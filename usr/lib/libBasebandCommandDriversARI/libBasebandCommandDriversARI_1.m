void *radio::ARICommandDriver::getARFCN_sync(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0::~$_0(void *a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  const void *v4;

  v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  v3 = a1[2];
  if (v3) {
    dispatch_release(v3);
  }
  v4 = (const void *)a1[1];
  if (v4) {
    _Block_release(v4);
  }
  return a1;
}

void radio::ARICommandDriver::getCA_sync(std::__shared_weak_count_vtbl *a1, uint64_t a2)
{
  v3 = (std::__shared_weak_count *)a1[2].~__shared_weak_count;
  if (!v3
    || (on_zero_shared_weak = (std::__shared_weak_count_vtbl *)a1[1].__on_zero_shared_weak,
        (v6 = std::__shared_weak_count::lock(v3)) == 0))
  {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v7 = v6;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v21[2] = v8;
  v21[3] = v8;
  v21[0] = v8;
  v21[1] = v8;
  AriSdk::ARI_CsiIceGetCaEnableReq_SDK::ARI_CsiIceGetCaEnableReq_SDK((AriSdk::ARI_CsiIceGetCaEnableReq_SDK *)v21);
  v9 = a1[7].__on_zero_shared_weak;
  if (!*(void *)a2)
  {
    v10 = 0;
    v11 = *(NSObject **)(a2 + 8);
    if (!v11) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  v10 = _Block_copy(*(const void **)a2);
  v11 = *(NSObject **)(a2 + 8);
  if (v11) {
LABEL_7:
  }
    dispatch_retain(v11);
LABEL_8:
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  v12 = (std::__shared_weak_count *)operator new(0x40uLL);
  *(_OWORD *)&v12->__shared_owners_ = 0u;
  p_shared_owners = &v12->__shared_owners_;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940518;
  v12[1].__vftable = a1;
  v12[1].__shared_owners_ = (uint64_t)v10;
  v12[1].__shared_weak_owners_ = (uint64_t)v11;
  v12[2].__vftable = on_zero_shared_weak;
  v12[2].__shared_owners_ = (uint64_t)v7;
  uint64_t v22 = MEMORY[0x263EF8330];
  uint64_t v23 = 1174405120;
  v24 = ___ZN3ice6detail12wrapCallbackIZN5radio16ARICommandDriver10getCA_syncEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS8_IK14__CFDictionaryEEEEEE3__0vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  v25 = &__block_descriptor_tmp_235;
  v26 = v12 + 1;
  v27 = v12;
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlock[0] = (const void *)MEMORY[0x263EF8330];
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
  aBlock[3] = &unk_264C7DF90;
  aBlock[4] = &v22;
  v14 = _Block_copy(aBlock);
  v15 = v27;
  if (!v27 || atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_11:
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
LABEL_12:
  *(void *)&long long v16 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v19[0] = v16;
  v19[1] = v16;
  unint64_t v20 = 0xAAAAAAAAAAAAAAAALL;
  v17 = (std::__shared_weak_count *)*((void *)v9 + 2);
  uint64_t v22 = *((void *)v9 + 1);
  if (!v17)
  {
    uint64_t v23 = 0;
LABEL_26:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v23 = (uint64_t)std::__shared_weak_count::lock(v17);
  if (!v23) {
    goto LABEL_26;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v18 = (std::__shared_weak_count *)v23;
  if (v23 && !atomic_fetch_add((atomic_ullong *volatile)(v23 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  aBlock[0] = v14;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0]) {
    _Block_release(aBlock[0]);
  }
  MEMORY[0x237DF50B0](v19);
  MEMORY[0x237DF5AC0](v21);
  std::__shared_weak_count::__release_weak(v7);
}

void sub_235E2E0C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  uint64_t v18 = va_arg(va2, void);
  v5 = *(const void **)(v3 - 120);
  if (v5) {
    _Block_release(v5);
  }
  MEMORY[0x237DF50B0]((uint64_t *)va1);
  radio::ARICommandDriver::getCA_sync(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0::~$_0((uint64_t *)va);
  MEMORY[0x237DF5AC0](va2);
  std::__shared_weak_count::__release_weak(v2);
  _Unwind_Resume(a1);
}

void *radio::ARICommandDriver::getCA_sync(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0::~$_0(void *a1)
{
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = a1[2];
  if (v3) {
    dispatch_release(v3);
  }
  v4 = (const void *)a1[1];
  if (v4) {
    _Block_release(v4);
  }
  return a1;
}

void radio::ARICommandDriver::checkFieldTestConfig(radio::ARICommandDriver *this)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 43);
  if (v2)
  {
    uint64_t v3 = (int *)((char *)this + 344);
    do
    {
      int v4 = *(_DWORD *)(v2 + 28);
      BOOL v5 = v4 < 1;
      if (v4 >= 1) {
        uint64_t v6 = (uint64_t *)v2;
      }
      else {
        uint64_t v6 = (uint64_t *)(v2 + 8);
      }
      if (!v5) {
        uint64_t v3 = (int *)v2;
      }
      uint64_t v2 = *v6;
    }
    while (*v6);
    if (v3 != (int *)((char *)this + 344) && v3[7] < 2) {
      goto LABEL_12;
    }
  }
  v7 = *((void *)this + 5);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v41[0]) = 0;
    _os_log_error_impl(&dword_235DB9000, v7, OS_LOG_TYPE_ERROR, "Failed to find fRxDiversity[ kWCDMA ]", (uint8_t *)v41, 2u);
    uint64_t v8 = (int *)((char *)this + 376);
    uint64_t v9 = *((void *)this + 47);
    if (v9) {
      goto LABEL_13;
    }
  }
  else
  {
LABEL_12:
    uint64_t v8 = (int *)((char *)this + 376);
    uint64_t v9 = *((void *)this + 47);
    if (v9)
    {
LABEL_13:
      uint64_t v10 = v8;
      uint64_t v11 = v9;
      do
      {
        int v12 = *(_DWORD *)(v11 + 28);
        BOOL v13 = v12 < 1;
        if (v12 >= 1) {
          uint64_t v14 = (uint64_t *)v11;
        }
        else {
          uint64_t v14 = (uint64_t *)(v11 + 8);
        }
        if (!v13) {
          uint64_t v10 = (int *)v11;
        }
        uint64_t v11 = *v14;
      }
      while (*v14);
      if (v10 != v8 && v10[7] < 2) {
        goto LABEL_23;
      }
    }
  }
  uint64_t v15 = *((void *)this + 5);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v41[0]) = 0;
    _os_log_error_impl(&dword_235DB9000, v15, OS_LOG_TYPE_ERROR, "Failed to find fARTD[ kWCDMA ]", (uint8_t *)v41, 2u);
    uint64_t v9 = *(void *)v8;
    if (*(void *)v8) {
      goto LABEL_24;
    }
    goto LABEL_33;
  }
LABEL_23:
  if (v9)
  {
LABEL_24:
    uint64_t v16 = v8;
    uint64_t v17 = v9;
    do
    {
      int v18 = *(_DWORD *)(v17 + 28);
      BOOL v19 = v18 < 2;
      if (v18 >= 2) {
        unint64_t v20 = (uint64_t *)v17;
      }
      else {
        unint64_t v20 = (uint64_t *)(v17 + 8);
      }
      if (!v19) {
        uint64_t v16 = (int *)v17;
      }
      uint64_t v17 = *v20;
    }
    while (*v20);
    if (v16 != v8 && v16[7] < 3) {
      goto LABEL_34;
    }
  }
LABEL_33:
  v21 = *((void *)this + 5);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v41[0]) = 0;
    _os_log_error_impl(&dword_235DB9000, v21, OS_LOG_TYPE_ERROR, "Failed to find fARTD[ kTDSCDMA ]", (uint8_t *)v41, 2u);
    uint64_t v9 = *(void *)v8;
    if (*(void *)v8) {
      goto LABEL_35;
    }
    goto LABEL_44;
  }
LABEL_34:
  if (v9)
  {
LABEL_35:
    uint64_t v22 = v8;
    uint64_t v23 = v9;
    do
    {
      int v24 = *(_DWORD *)(v23 + 28);
      BOOL v25 = v24 < 3;
      if (v24 >= 3) {
        v26 = (uint64_t *)v23;
      }
      else {
        v26 = (uint64_t *)(v23 + 8);
      }
      if (!v25) {
        uint64_t v22 = (int *)v23;
      }
      uint64_t v23 = *v26;
    }
    while (*v26);
    if (v22 != v8 && v22[7] < 4) {
      goto LABEL_45;
    }
  }
LABEL_44:
  v27 = *((void *)this + 5);
  if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v41[0]) = 0;
    _os_log_error_impl(&dword_235DB9000, v27, OS_LOG_TYPE_ERROR, "Failed to find fARTD[ kLTE ]", (uint8_t *)v41, 2u);
    uint64_t v9 = *(void *)v8;
    if (*(void *)v8) {
      goto LABEL_46;
    }
    goto LABEL_55;
  }
LABEL_45:
  if (v9)
  {
LABEL_46:
    v28 = v8;
    do
    {
      int v29 = *(_DWORD *)(v9 + 28);
      BOOL v30 = v29 < 0;
      if (v29 >= 0) {
        v31 = (uint64_t *)v9;
      }
      else {
        v31 = (uint64_t *)(v9 + 8);
      }
      if (!v30) {
        v28 = (int *)v9;
      }
      uint64_t v9 = *v31;
    }
    while (*v31);
    if (v28 != v8 && v28[7] < 1) {
      goto LABEL_56;
    }
  }
LABEL_55:
  v32 = *((void *)this + 5);
  if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v41[0]) = 0;
    _os_log_error_impl(&dword_235DB9000, v32, OS_LOG_TYPE_ERROR, "Failed to find fARTD[ kGSM ]", (uint8_t *)v41, 2u);
    uint64_t v33 = *((void *)this + 50);
    if (v33) {
      goto LABEL_57;
    }
LABEL_66:
    v39 = *((void *)this + 5);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      int v40 = *((_DWORD *)this + 104);
      v41[0] = 67109120;
      v41[1] = v40;
      _os_log_error_impl(&dword_235DB9000, v39, OS_LOG_TYPE_ERROR, "Failed to find fARFCNLock[ fARFCNCurrentRAT: %d ]", (uint8_t *)v41, 8u);
    }
    return;
  }
LABEL_56:
  uint64_t v33 = *((void *)this + 50);
  if (!v33) {
    goto LABEL_66;
  }
LABEL_57:
  int v34 = *((_DWORD *)this + 104);
  v35 = (_DWORD *)((char *)this + 400);
  do
  {
    int v36 = *(_DWORD *)(v33 + 28);
    BOOL v37 = v36 < v34;
    if (v36 >= v34) {
      v38 = (uint64_t *)v33;
    }
    else {
      v38 = (uint64_t *)(v33 + 8);
    }
    if (!v37) {
      v35 = (_DWORD *)v33;
    }
    uint64_t v33 = *v38;
  }
  while (*v38);
  if (v35 == (_DWORD *)((char *)this + 400) || v34 < v35[7]) {
    goto LABEL_66;
  }
}

void radio::ARICommandDriver::getFieldTestConfig(uint64_t a1, uint64_t a2)
{
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 1174405120;
  v7[2] = ___ZN5radio16ARICommandDriver18getFieldTestConfigEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_41_1;
  v7[4] = a1;
  int v4 = *(void **)a2;
  if (*(void *)a2) {
    int v4 = _Block_copy(v4);
  }
  BOOL v5 = (uint64_t *)(a1 + 72);
  uint64_t v6 = *(NSObject **)(a2 + 8);
  aBlock = v4;
  dispatch_object_t object = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(v5, (uint64_t)v7);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void ___ZN5radio16ARICommandDriver18getFieldTestConfigEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = dispatch_group_create();
  int v4 = v3;
  if (v3)
  {
    dispatch_retain(v3);
    dispatch_group_enter(v4);
  }
  v31[0] = 0;
  v31[1] = v31;
  v31[2] = 0x3802000000;
  v31[3] = __Block_byref_object_copy__0;
  v31[4] = __Block_byref_object_dispose__0;
  v32 = (const void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v33 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  BOOL v5 = (void *)a1[5];
  if (v5) {
    BOOL v5 = _Block_copy(v5);
  }
  uint64_t v6 = a1[6];
  v32 = v5;
  dispatch_object_t v33 = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  unint64_t v29 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v30 = 0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN5radio16ARICommandDriver18getFieldTestConfigEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_2;
  aBlock[3] = &unk_26E93F6A8;
  dispatch_group_t group = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(group);
  }
  aBlock[4] = v31;
  v7 = _Block_copy(aBlock);
  uint64_t v8 = *(NSObject **)(v2 + 88);
  if (v8) {
    dispatch_retain(*(dispatch_object_t *)(v2 + 88));
  }
  unint64_t v29 = (unint64_t)v7;
  unint64_t v30 = (unint64_t)v8;
  if (v7)
  {
    uint64_t v9 = _Block_copy(v7);
    BOOL v25 = v9;
    v26 = v8;
    if (!v8) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  uint64_t v9 = 0;
  BOOL v25 = 0;
  v26 = v8;
  if (v8) {
LABEL_13:
  }
    dispatch_retain(v8);
LABEL_14:
  radio::ARICommandDriver::getRxDiversityState_sync(v2, (uint64_t)&v25);
  if (v8) {
    dispatch_release(v8);
  }
  if (v9) {
    _Block_release(v9);
  }
  if (v7)
  {
    uint64_t v10 = _Block_copy(v7);
    uint64_t v23 = v10;
    int v24 = v8;
    if (!v8) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  uint64_t v10 = 0;
  uint64_t v23 = 0;
  int v24 = v8;
  if (v8) {
LABEL_20:
  }
    dispatch_retain(v8);
LABEL_21:
  CFDictionaryRef v22 = 0;
  radio::ARICommandDriver::getAntennaTxPort_sync((void *)v2, (uint64_t)&v23, &v22);
  if (v8) {
    dispatch_release(v8);
  }
  if (v10) {
    _Block_release(v10);
  }
  if (v7)
  {
    uint64_t v11 = _Block_copy(v7);
    unint64_t v20 = v11;
    v21 = v8;
    if (!v8) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  uint64_t v11 = 0;
  unint64_t v20 = 0;
  v21 = v8;
  if (v8) {
LABEL_27:
  }
    dispatch_retain(v8);
LABEL_28:
  radio::ARICommandDriver::getARTD_sync(v2, (uint64_t)&v20);
  if (v8) {
    dispatch_release(v8);
  }
  if (v11) {
    _Block_release(v11);
  }
  if (v7)
  {
    int v12 = _Block_copy(v7);
    int v18 = v12;
    BOOL v19 = v8;
    if (!v8) {
      goto LABEL_35;
    }
    goto LABEL_34;
  }
  int v12 = 0;
  int v18 = 0;
  BOOL v19 = v8;
  if (v8) {
LABEL_34:
  }
    dispatch_retain(v8);
LABEL_35:
  radio::ARICommandDriver::getARFCN_sync((std::__shared_weak_count_vtbl *)v2, (uint64_t)&v18);
  if (v8) {
    dispatch_release(v8);
  }
  if (v12) {
    _Block_release(v12);
  }
  if (v7)
  {
    BOOL v13 = _Block_copy(v7);
    uint64_t v16 = v13;
    uint64_t v17 = v8;
    if (!v8) {
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  BOOL v13 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = v8;
  if (v8) {
LABEL_41:
  }
    dispatch_retain(v8);
LABEL_42:
  radio::ARICommandDriver::getCA_sync((std::__shared_weak_count_vtbl *)v2, (uint64_t)&v16);
  if (v8) {
    dispatch_release(v8);
  }
  if (v13) {
    _Block_release(v13);
  }
  radio::ARICommandDriver::checkFieldTestConfig((radio::ARICommandDriver *)v2);
  uint64_t v14 = *(NSObject **)(v2 + 88);
  v15[0] = MEMORY[0x263EF8330];
  v15[1] = 0x40000000;
  v15[2] = ___ZN5radio16ARICommandDriver18getFieldTestConfigEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_39;
  v15[3] = &unk_264C7DEC8;
  v15[4] = v31;
  v15[5] = v2;
  dispatch_group_notify(v4, v14, v15);
  if (v8) {
    dispatch_release(v8);
  }
  if (v7) {
    _Block_release(v7);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  _Block_object_dispose(v31, 8);
  if (v33) {
    dispatch_release(v33);
  }
  if (v32) {
    _Block_release(v32);
  }
  if (v4)
  {
    dispatch_group_leave(v4);
    dispatch_release(v4);
    dispatch_release(v4);
  }
}

void sub_235E2EA04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,dispatch_group_t group)
{
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback((uint64_t)&a15);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v36 - 136);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  _Block_object_dispose((const void *)(v36 - 120), 8);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v35 + 40);
  if (v34)
  {
    dispatch_group_leave(v34);
    dispatch_release(v34);
    dispatch_release(v34);
  }
  _Unwind_Resume(a1);
}

void ___ZN5radio16ARICommandDriver18getFieldTestConfigEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_2(uint64_t a1, CFTypeRef *a2, const void **a3)
{
  CFTypeRef v3 = *a2;
  if (*a2) {
    int v4 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    int v4 = 0;
  }
  if (!v4) {
    return;
  }
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
  if (!*(void *)(v6 + 40) || !*(void *)(v6 + 48)) {
    return;
  }
  if (v3) {
    CFRetain(*a2);
  }
  uint64_t v8 = *a3;
  if (v8) {
    CFRetain(v8);
  }
  uint64_t v9 = *(const void **)(v6 + 40);
  if (v9) {
    uint64_t v10 = _Block_copy(v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(NSObject **)(v6 + 48);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke_0;
  block[3] = &__block_descriptor_tmp_191;
  if (v10)
  {
    aBlock = _Block_copy(v10);
    CFTypeRef v17 = v3;
    if (!v3) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  aBlock = 0;
  CFTypeRef v17 = v3;
  if (v3) {
LABEL_18:
  }
    CFRetain(v3);
LABEL_19:
  CFTypeRef cf = v8;
  if (v8) {
    CFRetain(v8);
  }
  dispatch_async(v11, block);
  if (cf) {
    CFRelease(cf);
  }
  if (v17) {
    CFRelease(v17);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v10) {
    _Block_release(v10);
  }
  if (v8) {
    CFRelease(v8);
  }
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v12 = *(void *)(*(void *)(a1 + 32) + 8);
  BOOL v13 = *(const void **)(v12 + 40);
  *(void *)(v12 + 40) = 0;
  if (v13) {
    _Block_release(v13);
  }
  uint64_t v14 = *(NSObject **)(v12 + 48);
  *(void *)(v12 + 48) = 0;
  if (v14) {
    dispatch_release(v14);
  }
}

void ___ZN5radio16ARICommandDriver18getFieldTestConfigEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_39(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  if (*(void *)(v1 + 40))
  {
    if (*(void *)(v1 + 48))
    {
      uint64_t v3 = *(void *)(a1 + 40);
      CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      uint64_t v6 = Mutable;
      if (Mutable)
      {
        v56 = Mutable;
        v7 = *(uint64_t **)(v3 + 344);
        if (v7)
        {
          while (1)
          {
            while (1)
            {
              uint64_t v9 = (uint64_t **)v7;
              int v10 = *((_DWORD *)v7 + 7);
              if (v10 < 2) {
                break;
              }
              v7 = *v9;
              uint64_t v8 = v9;
              if (!*v9) {
                goto LABEL_11;
              }
            }
            if (v10 == 1) {
              break;
            }
            v7 = v9[1];
            if (!v7)
            {
              uint64_t v8 = v9 + 1;
              goto LABEL_11;
            }
          }
          uint64_t v11 = (char *)v9;
        }
        else
        {
          uint64_t v8 = (uint64_t **)(v3 + 344);
          uint64_t v9 = (uint64_t **)(v3 + 344);
LABEL_11:
          uint64_t v11 = (char *)operator new(0x28uLL);
          *(void *)(v11 + 28) = 1;
          *(void *)uint64_t v11 = 0;
          *((void *)v11 + 1) = 0;
          *((void *)v11 + 2) = v9;
          *uint64_t v8 = (uint64_t *)v11;
          uint64_t v12 = **(void **)(v3 + 336);
          BOOL v13 = (uint64_t *)v11;
          if (v12)
          {
            *(void *)(v3 + 336) = v12;
            BOOL v13 = *v8;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 344), v13);
          ++*(void *)(v3 + 352);
          uint64_t v6 = v56;
        }
        ctu::cf::insert<__CFString const*,int>(v6, (CFTypeRef)*MEMORY[0x263F8B8C0], *((_DWORD *)v11 + 8), v4);
        ctu::cf::insert<__CFString const*,int>(v6, (CFTypeRef)*MEMORY[0x263F8B8A0], *(_DWORD *)(v3 + 360), v4);
        uint64_t v14 = (uint64_t **)(v3 + 376);
        uint64_t v15 = *(uint64_t **)(v3 + 376);
        uint64_t v16 = (uint64_t **)(v3 + 376);
        CFTypeRef v17 = (uint64_t **)(v3 + 376);
        if (v15)
        {
          while (1)
          {
            while (1)
            {
              CFTypeRef v17 = (uint64_t **)v15;
              int v18 = *((_DWORD *)v15 + 7);
              if (v18 < 2) {
                break;
              }
              uint64_t v15 = *v17;
              uint64_t v16 = v17;
              if (!*v17) {
                goto LABEL_22;
              }
            }
            if (v18 == 1) {
              break;
            }
            uint64_t v15 = v17[1];
            if (!v15)
            {
              uint64_t v16 = v17 + 1;
              goto LABEL_22;
            }
          }
          BOOL v19 = (char *)v17;
        }
        else
        {
LABEL_22:
          BOOL v19 = (char *)operator new(0x28uLL);
          *(void *)(v19 + 28) = 1;
          *(void *)BOOL v19 = 0;
          *((void *)v19 + 1) = 0;
          *((void *)v19 + 2) = v17;
          *uint64_t v16 = (uint64_t *)v19;
          uint64_t v20 = **(void **)(v3 + 368);
          v21 = (uint64_t *)v19;
          if (v20)
          {
            *(void *)(v3 + 368) = v20;
            v21 = *v16;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 376), v21);
          ++*(void *)(v3 + 384);
          uint64_t v6 = v56;
        }
        ctu::cf::insert<__CFString const*,int>(v6, (CFTypeRef)*MEMORY[0x263F8B890], *((_DWORD *)v19 + 8), v4);
        CFDictionaryRef v22 = *v14;
        uint64_t v23 = (uint64_t **)(v3 + 376);
        int v24 = (uint64_t **)(v3 + 376);
        if (*v14)
        {
          while (1)
          {
            while (1)
            {
              int v24 = (uint64_t **)v22;
              int v25 = *((_DWORD *)v22 + 7);
              if (v25 < 3) {
                break;
              }
              CFDictionaryRef v22 = *v24;
              uint64_t v23 = v24;
              if (!*v24) {
                goto LABEL_33;
              }
            }
            if (v25 == 2) {
              break;
            }
            CFDictionaryRef v22 = v24[1];
            if (!v22)
            {
              uint64_t v23 = v24 + 1;
              goto LABEL_33;
            }
          }
          v26 = (char *)v24;
        }
        else
        {
LABEL_33:
          v26 = (char *)operator new(0x28uLL);
          *(void *)(v26 + 28) = 2;
          *(void *)v26 = 0;
          *((void *)v26 + 1) = 0;
          *((void *)v26 + 2) = v24;
          *uint64_t v23 = (uint64_t *)v26;
          uint64_t v27 = **(void **)(v3 + 368);
          v28 = (uint64_t *)v26;
          if (v27)
          {
            *(void *)(v3 + 368) = v27;
            v28 = *v23;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 376), v28);
          ++*(void *)(v3 + 384);
          uint64_t v6 = v56;
        }
        ctu::cf::insert<__CFString const*,int>(v6, (CFTypeRef)*MEMORY[0x263F8B8A8], *((_DWORD *)v26 + 8), v4);
        unint64_t v29 = *v14;
        unint64_t v30 = (uint64_t **)(v3 + 376);
        v31 = (uint64_t **)(v3 + 376);
        if (*v14)
        {
          while (1)
          {
            while (1)
            {
              v31 = (uint64_t **)v29;
              int v32 = *((_DWORD *)v29 + 7);
              if (v32 < 4) {
                break;
              }
              unint64_t v29 = *v31;
              unint64_t v30 = v31;
              if (!*v31) {
                goto LABEL_44;
              }
            }
            if (v32 == 3) {
              break;
            }
            unint64_t v29 = v31[1];
            if (!v29)
            {
              unint64_t v30 = v31 + 1;
              goto LABEL_44;
            }
          }
          dispatch_object_t v33 = (char *)v31;
        }
        else
        {
LABEL_44:
          dispatch_object_t v33 = (char *)operator new(0x28uLL);
          *(void *)(v33 + 28) = 3;
          *(void *)dispatch_object_t v33 = 0;
          *((void *)v33 + 1) = 0;
          *((void *)v33 + 2) = v31;
          *unint64_t v30 = (uint64_t *)v33;
          uint64_t v34 = **(void **)(v3 + 368);
          uint64_t v35 = (uint64_t *)v33;
          if (v34)
          {
            *(void *)(v3 + 368) = v34;
            uint64_t v35 = *v30;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 376), v35);
          ++*(void *)(v3 + 384);
        }
        int v36 = *((_DWORD *)v33 + 8);
        BOOL v37 = v56;
        ctu::cf::insert<__CFString const*,int>(v56, (CFTypeRef)*MEMORY[0x263F8B7E0], v36, v4);
        v38 = *v14;
        v39 = (uint64_t **)(v3 + 376);
        if (*v14)
        {
          while (1)
          {
            while (1)
            {
              v39 = (uint64_t **)v38;
              int v40 = *((_DWORD *)v38 + 7);
              if (v40 < 1) {
                break;
              }
              v38 = *v39;
              uint64_t v14 = v39;
              if (!*v39) {
                goto LABEL_55;
              }
            }
            if ((v40 & 0x80000000) == 0) {
              break;
            }
            v38 = v39[1];
            if (!v38)
            {
              uint64_t v14 = v39 + 1;
              goto LABEL_55;
            }
          }
          v41 = v39;
        }
        else
        {
LABEL_55:
          v41 = operator new(0x28uLL);
          v41[7] = 0;
          v41[8] = 0;
          *(void *)v41 = 0;
          *((void *)v41 + 1) = 0;
          *((void *)v41 + 2) = v39;
          NSObject *v14 = (uint64_t *)v41;
          uint64_t v42 = **(void **)(v3 + 368);
          v43 = (uint64_t *)v41;
          if (v42)
          {
            *(void *)(v3 + 368) = v42;
            v43 = *v14;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 376), v43);
          ++*(void *)(v3 + 384);
          BOOL v37 = v56;
        }
        ctu::cf::insert<__CFString const*,int>(v37, (CFTypeRef)*MEMORY[0x263F8B7D8], v41[8], v4);
        ctu::cf::insert<__CFString const*,int>(v37, (CFTypeRef)*MEMORY[0x263F8B7E8], *(_DWORD *)(v3 + 416), v4);
        v44 = *(uint64_t **)(v3 + 400);
        int v45 = *(_DWORD *)(v3 + 416);
        if (v44)
        {
          while (1)
          {
            while (1)
            {
              v47 = (uint64_t **)v44;
              int v48 = *((_DWORD *)v44 + 7);
              if (v45 >= v48) {
                break;
              }
              v44 = *v47;
              v46 = v47;
              if (!*v47) {
                goto LABEL_65;
              }
            }
            if (v48 >= v45) {
              break;
            }
            v44 = v47[1];
            if (!v44)
            {
              v46 = v47 + 1;
              goto LABEL_65;
            }
          }
          v49 = v47;
        }
        else
        {
          v46 = (uint64_t **)(v3 + 400);
          v47 = (uint64_t **)(v3 + 400);
LABEL_65:
          v49 = operator new(0x28uLL);
          v49[7] = v45;
          v49[8] = 0;
          *(void *)v49 = 0;
          *((void *)v49 + 1) = 0;
          *((void *)v49 + 2) = v47;
          *v46 = (uint64_t *)v49;
          uint64_t v50 = **(void **)(v3 + 392);
          v51 = (uint64_t *)v49;
          if (v50)
          {
            *(void *)(v3 + 392) = v50;
            v51 = *v46;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 400), v51);
          ++*(void *)(v3 + 408);
          BOOL v37 = v56;
        }
        ctu::cf::insert<__CFString const*,int>(v37, (CFTypeRef)*MEMORY[0x263F8B888], v49[8], v4);
        ctu::cf::insert<__CFString const*,int>(v56, (CFTypeRef)*MEMORY[0x263F8B898], *(_DWORD *)(v3 + 420), v4);
        uint64_t v52 = *(void *)(*(void *)(a1 + 32) + 8);
        CFRetain(v56);
        v53 = *(const void **)(v52 + 40);
        if (v53) {
          v54 = _Block_copy(v53);
        }
        else {
          v54 = 0;
        }
        v55 = *(NSObject **)(v52 + 48);
        block[0] = MEMORY[0x263EF8330];
        block[1] = 1174405120;
        block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_NS3_IS6_EEEEEvDpT__block_invoke;
        block[3] = &__block_descriptor_tmp_184;
        if (v54)
        {
          aBlock = _Block_copy(v54);
          CFTypeRef v59 = 0;
          CFTypeRef cf = v56;
        }
        else
        {
          aBlock = 0;
          CFTypeRef v59 = 0;
          CFTypeRef cf = v56;
        }
        CFRetain(v56);
        dispatch_async(v55, block);
        if (cf) {
          CFRelease(cf);
        }
        if (v59) {
          CFRelease(v59);
        }
        if (aBlock) {
          _Block_release(aBlock);
        }
        if (v54) {
          _Block_release(v54);
        }
        CFRelease(v56);
        CFRelease(v56);
      }
    }
  }
}

void sub_235E2F2EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void sub_235E2F300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void sub_235E2F314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void sub_235E2F328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void sub_235E2F33C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void sub_235E2F350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void sub_235E2F364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void sub_235E2F378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void __copy_helper_block_e8_40c103_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEE(uint64_t a1, uint64_t a2)
{
  CFAllocatorRef v4 = *(void **)(a2 + 40);
  if (v4) {
    CFAllocatorRef v4 = _Block_copy(v4);
  }
  BOOL v5 = *(NSObject **)(a2 + 48);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v5;
  if (v5)
  {
    dispatch_retain(v5);
  }
}

void __destroy_helper_block_e8_40c103_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 48);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 40);
  if (v3) {
    _Block_release(v3);
  }
}

void radio::ARICommandDriver::setRxDiversityStateWithRAT_sync(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  uint64_t v8 = (void *)(a1 + 344);
  uint64_t v9 = *(uint64_t **)(a1 + 344);
  int v10 = (uint64_t **)(a1 + 344);
  uint64_t v11 = (uint64_t **)(a1 + 344);
  if (v9)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v11 = (uint64_t **)v9;
        int v12 = *((_DWORD *)v9 + 7);
        if (v12 <= a3) {
          break;
        }
        uint64_t v9 = *v11;
        int v10 = v11;
        if (!*v11) {
          goto LABEL_8;
        }
      }
      if (v12 >= a3) {
        break;
      }
      uint64_t v9 = v11[1];
      if (!v9)
      {
        int v10 = v11 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    BOOL v13 = (uint64_t *)v11;
    uint64_t v11 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v11 + 7) = a3;
    *((_DWORD *)v11 + 8) = 0;
    char *v11 = 0;
    v11[1] = 0;
    v11[2] = v13;
    void *v10 = (uint64_t *)v11;
    uint64_t v14 = **(void **)(a1 + 336);
    uint64_t v15 = (uint64_t *)v11;
    if (v14)
    {
      *(void *)(a1 + 336) = v14;
      uint64_t v15 = *v10;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 344), v15);
    ++*(void *)(a1 + 352);
  }
  if (*((_DWORD *)v11 + 8) == a2)
  {
    uint64_t v16 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      v38 = (_DWORD *)*v8;
      v39 = v8;
      if (*v8)
      {
        while (1)
        {
          while (1)
          {
            v39 = v38;
            int v40 = v38[7];
            if (v40 <= a3) {
              break;
            }
            v38 = (_DWORD *)*v39;
            uint64_t v8 = v39;
            if (!*v39) {
              goto LABEL_49;
            }
          }
          if (v40 >= a3) {
            break;
          }
          v38 = (_DWORD *)v39[1];
          if (!v38)
          {
            uint64_t v8 = v39 + 1;
            goto LABEL_49;
          }
        }
      }
      else
      {
LABEL_49:
        v41 = v39;
        v39 = operator new(0x28uLL);
        *((_DWORD *)v39 + 7) = a3;
        *((_DWORD *)v39 + 8) = 0;
        void *v39 = 0;
        v39[1] = 0;
        v39[2] = v41;
        *uint64_t v8 = v39;
        uint64_t v42 = **(void **)(a1 + 336);
        v43 = v39;
        if (v42)
        {
          *(void *)(a1 + 336) = v42;
          v43 = (uint64_t *)*v8;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 344), v43);
        ++*(void *)(a1 + 352);
      }
      int v44 = *((_DWORD *)v39 + 8);
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)&buf[4] = a3;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v44;
      *(_WORD *)&buf[14] = 1024;
      LODWORD(v57) = a2;
      _os_log_debug_impl(&dword_235DB9000, v16, OS_LOG_TYPE_DEBUG, "#D fRxDiversity[ %d ]: %d == %d\n", buf, 0x14u);
      CFTypeRef v17 = *(const void **)a4;
      if (*(void *)a4) {
        goto LABEL_14;
      }
    }
    else
    {
      CFTypeRef v17 = *(const void **)a4;
      if (*(void *)a4)
      {
LABEL_14:
        int v18 = _Block_copy(v17);
        goto LABEL_54;
      }
    }
    int v18 = 0;
LABEL_54:
    int v45 = *(NSObject **)(a4 + 8);
    *(void *)buf = MEMORY[0x263EF8330];
    *(void *)&buf[8] = 1174405120;
    *(void *)&long long v57 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
    *((void *)&v57 + 1) = &__block_descriptor_tmp_181;
    if (v18)
    {
      cf[0] = _Block_copy(v18);
      cf[1] = 0;
      dispatch_async(v45, buf);
      CFTypeRef v46 = cf[1];
      if (!cf[1]) {
        goto LABEL_59;
      }
    }
    else
    {
      cf[0] = 0;
      cf[1] = 0;
      dispatch_async(v45, buf);
      CFTypeRef v46 = cf[1];
      if (!cf[1])
      {
LABEL_59:
        if (cf[0]) {
          _Block_release(cf[0]);
        }
        if (v18) {
          _Block_release(v18);
        }
        return;
      }
    }
    CFRelease(v46);
    goto LABEL_59;
  }
  BOOL v19 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v19 || (uint64_t v20 = *(void *)(a1 + 72), (v21 = std::__shared_weak_count::lock(v19)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  CFDictionaryRef v22 = v21;
  atomic_fetch_add_explicit(&v21->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v22);
  }
  *(void *)&long long v23 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v23 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v59 = v23;
  *(_OWORD *)__p = v23;
  long long v57 = v23;
  *(_OWORD *)CFTypeRef cf = v23;
  *(_OWORD *)buf = v23;
  AriSdk::ARI_CsiIceRxDiversityReq_SDK::ARI_CsiIceRxDiversityReq_SDK((AriSdk::ARI_CsiIceRxDiversityReq_SDK *)buf);
  int v24 = operator new(4uLL);
  *int v24 = a2;
  int v25 = __p[0];
  __p[0] = v24;
  if (v25) {
    operator delete(v25);
  }
  v26 = operator new(4uLL);
  _DWORD *v26 = a3;
  uint64_t v27 = __p[1];
  __p[1] = v26;
  if (v27) {
    operator delete(v27);
  }
  uint64_t v28 = *(void *)(a1 + 312);
  if (!*(void *)a4)
  {
    unint64_t v29 = 0;
    unint64_t v30 = *(NSObject **)(a4 + 8);
    if (!v30) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  unint64_t v29 = (std::__shared_weak_count_vtbl *)_Block_copy(*(const void **)a4);
  unint64_t v30 = *(NSObject **)(a4 + 8);
  if (v30) {
LABEL_25:
  }
    dispatch_retain(v30);
LABEL_26:
  atomic_fetch_add_explicit(&v22->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  v31 = (std::__shared_weak_count *)operator new(0x40uLL);
  *(_OWORD *)&v31->__shared_owners_ = 0u;
  p_shared_owners = &v31->__shared_owners_;
  v31->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940598;
  v31[1].__vftable = v29;
  v31[1].__shared_owners_ = (uint64_t)v30;
  v31[1].__shared_weak_owners_ = v20;
  v31[2].__vftable = (std::__shared_weak_count_vtbl *)v22;
  LODWORD(v31[2].__shared_owners_) = a3;
  uint64_t v49 = MEMORY[0x263EF8330];
  uint64_t v50 = 1174405120;
  v51 = ___ZN3ice6detail12wrapCallbackIZN5radio16ARICommandDriver31setRxDiversityStateWithRAT_syncEiNS3_14RFRatSelectionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEE3__0vEENS5_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  uint64_t v52 = &__block_descriptor_tmp_238;
  v53 = v31 + 1;
  v54 = v31;
  atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlock[0] = (const void *)MEMORY[0x263EF8330];
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
  aBlock[3] = &unk_264C7DF90;
  aBlock[4] = &v49;
  dispatch_object_t v33 = _Block_copy(aBlock);
  uint64_t v34 = v54;
  if (!v54 || atomic_fetch_add(&v54->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
  std::__shared_weak_count::__release_weak(v34);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_29:
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
LABEL_30:
  *(void *)&long long v35 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v35 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v47[0] = v35;
  v47[1] = v35;
  unint64_t v48 = 0xAAAAAAAAAAAAAAAALL;
  int v36 = *(std::__shared_weak_count **)(v28 + 16);
  uint64_t v49 = *(void *)(v28 + 8);
  if (!v36)
  {
    uint64_t v50 = 0;
LABEL_66:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v50 = (uint64_t)std::__shared_weak_count::lock(v36);
  if (!v50) {
    goto LABEL_66;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  BOOL v37 = (std::__shared_weak_count *)v50;
  if (v50 && !atomic_fetch_add((atomic_ullong *volatile)(v50 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
  }
  aBlock[0] = v33;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0]) {
    _Block_release(aBlock[0]);
  }
  MEMORY[0x237DF50B0](v47);
  MEMORY[0x237DF5B00](buf);
  std::__shared_weak_count::__release_weak(v22);
}

void sub_235E2FA78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *aBlock,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t radio::ARICommandDriver::setRxDiversityStateWithRAT_sync(int,radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::~$_0(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(NSObject **)(a1 + 8);
  if (v3) {
    dispatch_release(v3);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void radio::ARICommandDriver::setRxDiversityState_sync(uint64_t a1, const __CFDictionary **a2, uint64_t a3)
{
  uint64_t v6 = dispatch_group_create();
  v7 = v6;
  if (v6)
  {
    dispatch_retain(v6);
    dispatch_group_enter(v7);
  }
  v23[0] = 0;
  v23[1] = v23;
  v23[2] = 0x3802000000;
  v23[3] = __Block_byref_object_copy__42;
  v23[4] = __Block_byref_object_dispose__43;
  int v24 = (const void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v25 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  uint64_t v8 = *(void **)a3;
  if (*(void *)a3) {
    uint64_t v8 = _Block_copy(v8);
  }
  uint64_t v9 = *(NSObject **)(a3 + 8);
  int v24 = v8;
  dispatch_object_t v25 = v9;
  if (v9) {
    dispatch_retain(v9);
  }
  unint64_t v21 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN5radio16ARICommandDriver24setRxDiversityState_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke;
  aBlock[3] = &unk_26E93F710;
  dispatch_group_t group = v7;
  if (v7)
  {
    dispatch_retain(v7);
    dispatch_group_enter(group);
  }
  aBlock[4] = v23;
  int v10 = _Block_copy(aBlock);
  uint64_t v11 = *(NSObject **)(a1 + 88);
  if (v11) {
    dispatch_retain(*(dispatch_object_t *)(a1 + 88));
  }
  unint64_t v21 = (unint64_t)v10;
  unint64_t v22 = (unint64_t)v11;
  v18[0] = 0xAAAAAAAAAAAAAAAALL;
  v18[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v18, *a2);
  int Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v18, (const __CFString *)*MEMORY[0x263F8B8C0]);
  if (v10)
  {
    BOOL v13 = _Block_copy(v10);
    uint64_t v16 = v13;
    CFTypeRef v17 = v11;
    if (!v11) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  BOOL v13 = 0;
  uint64_t v16 = 0;
  CFTypeRef v17 = v11;
  if (v11) {
LABEL_13:
  }
    dispatch_retain(v11);
LABEL_14:
  radio::ARICommandDriver::setRxDiversityStateWithRAT_sync(a1, Int, 1, (uint64_t)&v16);
  if (v11) {
    dispatch_release(v11);
  }
  if (v13) {
    _Block_release(v13);
  }
  uint64_t v14 = *(NSObject **)(a1 + 88);
  v15[0] = MEMORY[0x263EF8330];
  v15[1] = 0x40000000;
  v15[2] = ___ZN5radio16ARICommandDriver24setRxDiversityState_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke_48;
  v15[3] = &unk_264C7DEF0;
  v15[4] = v23;
  dispatch_group_notify(v7, v14, v15);
  MEMORY[0x237DF4EE0](v18);
  if (v11) {
    dispatch_release(v11);
  }
  if (v10) {
    _Block_release(v10);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  _Block_object_dispose(v23, 8);
  if (v25) {
    dispatch_release(v25);
  }
  if (v24) {
    _Block_release(v24);
  }
  if (v7)
  {
    dispatch_group_leave(v7);
    dispatch_release(v7);
    dispatch_release(v7);
  }
}

void sub_235E2FE40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,dispatch_group_t group,char a24)
{
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)&a14);
  MEMORY[0x237DF4EE0](&a16);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)&a24);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  _Block_object_dispose((const void *)(v26 - 120), 8);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v25 + 40);
  if (v24)
  {
    dispatch_group_leave(v24);
    dispatch_release(v24);
    dispatch_release(v24);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__42(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  return result;
}

void __Block_byref_object_dispose__43(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 48);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 40);
  if (v3) {
    _Block_release(v3);
  }
}

void ___ZN5radio16ARICommandDriver24setRxDiversityState_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef v2 = *a2;
  if (*a2) {
    uint64_t v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v3 = 0;
  }
  if (!v3) {
    return;
  }
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v6 = *(const void **)(v5 + 40);
  if (!v6 || !*(void *)(v5 + 48)) {
    return;
  }
  if (v2 && (CFRetain(*a2), (uint64_t v6 = *(const void **)(v5 + 40)) == 0)) {
    v7 = 0;
  }
  else {
    v7 = _Block_copy(v6);
  }
  uint64_t v8 = *(NSObject **)(v5 + 48);
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 1174405120;
  v12[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
  v12[3] = &__block_descriptor_tmp_181;
  if (v7)
  {
    aBlock = _Block_copy(v7);
    CFTypeRef cf = v2;
    if (!v2) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  aBlock = 0;
  CFTypeRef cf = v2;
  if (v2) {
LABEL_15:
  }
    CFRetain(v2);
LABEL_16:
  dispatch_async(v8, v12);
  if (cf) {
    CFRelease(cf);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v7) {
    _Block_release(v7);
  }
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8);
  int v10 = *(const void **)(v9 + 40);
  *(void *)(v9 + 40) = 0;
  if (v10) {
    _Block_release(v10);
  }
  uint64_t v11 = *(NSObject **)(v9 + 48);
  *(void *)(v9 + 48) = 0;
  if (v11) {
    dispatch_release(v11);
  }
}

void ___ZN5radio16ARICommandDriver24setRxDiversityState_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke_48(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  CFTypeRef v2 = *(const void **)(v1 + 40);
  if (!v2 || !*(void *)(v1 + 48)) {
    return;
  }
  uint64_t v3 = _Block_copy(v2);
  CFAllocatorRef v4 = v3;
  uint64_t v5 = *(NSObject **)(v1 + 48);
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 1174405120;
  v7[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
  v7[3] = &__block_descriptor_tmp_181;
  if (v3)
  {
    aBlock = _Block_copy(v3);
    CFTypeRef cf = 0;
    dispatch_async(v5, v7);
    CFTypeRef v6 = cf;
    if (!cf) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  aBlock = 0;
  CFTypeRef cf = 0;
  dispatch_async(v5, v7);
  CFTypeRef v6 = cf;
  if (cf) {
LABEL_7:
  }
    CFRelease(v6);
LABEL_8:
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v4) {
    _Block_release(v4);
  }
}

void radio::ARICommandDriver::setAntennaTxPort(void *a1, CFTypeRef *a2, uint64_t a3)
{
  CFTypeRef v5 = *a2;
  if (*a2) {
    CFRetain(*a2);
  }
  if (!*(void *)a3)
  {
    CFTypeRef v6 = 0;
    v7 = *(NSObject **)(a3 + 8);
    if (!v7) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  CFTypeRef v6 = _Block_copy(*(const void **)a3);
  v7 = *(NSObject **)(a3 + 8);
  if (v7) {
LABEL_5:
  }
    dispatch_retain(v7);
LABEL_6:
  uint64_t v8 = (std::__shared_weak_count *)a1[10];
  if (!v8 || (uint64_t v9 = a1[9], (v10 = std::__shared_weak_count::lock(v8)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v11 = v10;
  int v12 = operator new(0x20uLL);
  void *v12 = a1;
  v12[1] = v5;
  v12[2] = v6;
  v12[3] = v7;
  BOOL v13 = a1[11];
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v14 = operator new(0x18uLL);
  void *v14 = v12;
  v14[1] = v9;
  v14[2] = v11;
  dispatch_async_f(v13, v14, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::ARICommandDriver::setAntennaTxPort(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>(radio::ARICommandDriver::setAntennaTxPort(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::ARICommandDriver::setAntennaTxPort(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,dispatch_queue_s *::default_delete<radio::ARICommandDriver::setAntennaTxPort(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
}

uint64_t radio::ARICommandDriver::setAntennaTxPort_sync(uint64_t a1, const __CFDictionary **a2, uint64_t a3)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  v39[0] = 0xAAAAAAAAAAAAAAAALL;
  v39[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v39, *a2);
  int Bool = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v39, (const __CFString *)*MEMORY[0x263F8B8B8]);
  CFTypeRef v6 = (const __CFString **)MEMORY[0x263F8B8A0];
  if ((Bool & 1) == 0)
  {
    int v7 = *(_DWORD *)(a1 + 360);
    CFStringRef v8 = (const __CFString *)*MEMORY[0x263F8B8A0];
    if (v7 == ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v39, (const __CFString *)*MEMORY[0x263F8B8A0]))
    {
      uint64_t v9 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        int v33 = *(_DWORD *)(a1 + 360);
        int Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v39, v8);
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&buf[4] = v33;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = Int;
        _os_log_debug_impl(&dword_235DB9000, v9, OS_LOG_TYPE_DEBUG, "#D fAntennaState: %d == %d\n", buf, 0xEu);
        int v10 = *(const void **)a3;
        if (*(void *)a3) {
          goto LABEL_5;
        }
      }
      else
      {
        int v10 = *(const void **)a3;
        if (*(void *)a3)
        {
LABEL_5:
          uint64_t v11 = _Block_copy(v10);
          goto LABEL_36;
        }
      }
      uint64_t v11 = 0;
LABEL_36:
      long long v35 = *(NSObject **)(a3 + 8);
      *(void *)buf = MEMORY[0x263EF8330];
      *(void *)&buf[8] = 1174405120;
      *(void *)&long long v48 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
      *((void *)&v48 + 1) = &__block_descriptor_tmp_181;
      if (v11)
      {
        long long v49 = (unint64_t)_Block_copy(v11);
        dispatch_async(v35, buf);
        int v36 = (const void *)*((void *)&v49 + 1);
        if (!*((void *)&v49 + 1)) {
          goto LABEL_41;
        }
      }
      else
      {
        long long v49 = 0uLL;
        dispatch_async(v35, buf);
        int v36 = (const void *)*((void *)&v49 + 1);
        if (!*((void *)&v49 + 1))
        {
LABEL_41:
          if ((void)v49) {
            _Block_release((const void *)v49);
          }
          if (v11) {
            _Block_release(v11);
          }
          return MEMORY[0x237DF4EE0](v39);
        }
      }
      CFRelease(v36);
      goto LABEL_41;
    }
  }
  int v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12 || (v13 = *(void *)(a1 + 72), (uint64_t v14 = std::__shared_weak_count::lock(v12)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v15 = v14;
  atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v15);
  }
  *(void *)&long long v16 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v50 = v16;
  long long v51 = v16;
  long long v48 = v16;
  long long v49 = v16;
  *(_OWORD *)buf = v16;
  AriSdk::ARI_CsiIceSetTxAntennaReq_SDK::ARI_CsiIceSetTxAntennaReq_SDK((AriSdk::ARI_CsiIceSetTxAntennaReq_SDK *)buf);
  int v17 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v39, *v6);
  int v18 = operator new(4uLL);
  _DWORD *v18 = v17;
  BOOL v19 = (void *)v51;
  *(void *)&long long v51 = v18;
  if (v19) {
    operator delete(v19);
  }
  uint64_t v20 = operator new(4uLL);
  *uint64_t v20 = Bool;
  unint64_t v21 = (void *)*((void *)&v51 + 1);
  *((void *)&v51 + 1) = v20;
  if (v21) {
    operator delete(v21);
  }
  uint64_t v22 = *(void *)(a1 + 312);
  if (!*(void *)a3)
  {
    long long v23 = 0;
    int v24 = *(NSObject **)(a3 + 8);
    if (!v24) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  long long v23 = (std::__shared_weak_count_vtbl *)_Block_copy(*(const void **)a3);
  int v24 = *(NSObject **)(a3 + 8);
  if (v24) {
LABEL_16:
  }
    dispatch_retain(v24);
LABEL_17:
  atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v25 = (std::__shared_weak_count *)operator new(0x38uLL);
  *(_OWORD *)&v25->__shared_owners_ = 0u;
  p_shared_owners = &v25->__shared_owners_;
  v25->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940618;
  v25[1].__vftable = v23;
  v25[1].__shared_owners_ = (uint64_t)v24;
  v25[1].__shared_weak_owners_ = v13;
  v25[2].__vftable = (std::__shared_weak_count_vtbl *)v15;
  uint64_t v40 = MEMORY[0x263EF8330];
  uint64_t v41 = 1174405120;
  uint64_t v42 = ___ZN3ice6detail12wrapCallbackIZN5radio16ARICommandDriver21setAntennaTxPort_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS6_I9__CFErrorEEEEEE3__0vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  v43 = &__block_descriptor_tmp_244;
  int v44 = v25 + 1;
  int v45 = v25;
  atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlock[0] = (const void *)MEMORY[0x263EF8330];
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
  aBlock[3] = &unk_264C7DF90;
  aBlock[4] = &v40;
  uint64_t v27 = _Block_copy(aBlock);
  uint64_t v28 = v45;
  if (!v45 || atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
  std::__shared_weak_count::__release_weak(v28);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_20:
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
LABEL_21:
  *(void *)&long long v29 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v29 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v37[0] = v29;
  v37[1] = v29;
  unint64_t v38 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v30 = *(std::__shared_weak_count **)(v22 + 16);
  uint64_t v40 = *(void *)(v22 + 8);
  if (!v30)
  {
    uint64_t v41 = 0;
LABEL_47:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v41 = (uint64_t)std::__shared_weak_count::lock(v30);
  if (!v41) {
    goto LABEL_47;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v31 = (std::__shared_weak_count *)v41;
  if (v41 && !atomic_fetch_add((atomic_ullong *volatile)(v41 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  aBlock[0] = v27;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0]) {
    _Block_release(aBlock[0]);
  }
  MEMORY[0x237DF50B0](v37);
  MEMORY[0x237DF5D10](buf);
  std::__shared_weak_count::__release_weak(v15);
  return MEMORY[0x237DF4EE0](v39);
}

void sub_235E30890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *aBlock)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t radio::ARICommandDriver::setAntennaTxPort_sync(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::~$_0(uint64_t a1)
{
  CFTypeRef v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(NSObject **)(a1 + 8);
  if (v3) {
    dispatch_release(v3);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void radio::ARICommandDriver::setARTDWithRAT_sync(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  CFStringRef v8 = (void *)(a1 + 376);
  uint64_t v9 = *(uint64_t **)(a1 + 376);
  int v10 = (uint64_t **)(a1 + 376);
  uint64_t v11 = (uint64_t **)(a1 + 376);
  if (v9)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v11 = (uint64_t **)v9;
        int v12 = *((_DWORD *)v9 + 7);
        if (v12 <= a3) {
          break;
        }
        uint64_t v9 = *v11;
        int v10 = v11;
        if (!*v11) {
          goto LABEL_8;
        }
      }
      if (v12 >= a3) {
        break;
      }
      uint64_t v9 = v11[1];
      if (!v9)
      {
        int v10 = v11 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    uint64_t v13 = (uint64_t *)v11;
    uint64_t v11 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v11 + 7) = a3;
    *((_DWORD *)v11 + 8) = 0;
    void *v11 = 0;
    v11[1] = 0;
    v11[2] = v13;
    const void *v10 = (uint64_t *)v11;
    uint64_t v14 = **(void **)(a1 + 368);
    uint64_t v15 = (uint64_t *)v11;
    if (v14)
    {
      *(void *)(a1 + 368) = v14;
      uint64_t v15 = *v10;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 376), v15);
    ++*(void *)(a1 + 384);
  }
  if (*((_DWORD *)v11 + 8) == a2)
  {
    long long v16 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v38 = (_DWORD *)*v8;
      v39 = v8;
      if (*v8)
      {
        while (1)
        {
          while (1)
          {
            v39 = v38;
            int v40 = v38[7];
            if (v40 <= a3) {
              break;
            }
            unint64_t v38 = (_DWORD *)*v39;
            CFStringRef v8 = v39;
            if (!*v39) {
              goto LABEL_49;
            }
          }
          if (v40 >= a3) {
            break;
          }
          unint64_t v38 = (_DWORD *)v39[1];
          if (!v38)
          {
            CFStringRef v8 = v39 + 1;
            goto LABEL_49;
          }
        }
      }
      else
      {
LABEL_49:
        uint64_t v41 = v39;
        v39 = operator new(0x28uLL);
        *((_DWORD *)v39 + 7) = a3;
        *((_DWORD *)v39 + 8) = 0;
        void *v39 = 0;
        v39[1] = 0;
        void v39[2] = v41;
        *CFStringRef v8 = v39;
        uint64_t v42 = **(void **)(a1 + 368);
        v43 = v39;
        if (v42)
        {
          *(void *)(a1 + 368) = v42;
          v43 = (uint64_t *)*v8;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 376), v43);
        ++*(void *)(a1 + 384);
      }
      int v44 = *((_DWORD *)v39 + 8);
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)&buf[4] = a3;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v44;
      *(_WORD *)&buf[14] = 1024;
      LODWORD(v57) = a2;
      _os_log_debug_impl(&dword_235DB9000, v16, OS_LOG_TYPE_DEBUG, "#D fARTD[ %d ]: %d == %d\n", buf, 0x14u);
      int v17 = *(const void **)a4;
      if (*(void *)a4) {
        goto LABEL_14;
      }
    }
    else
    {
      int v17 = *(const void **)a4;
      if (*(void *)a4)
      {
LABEL_14:
        int v18 = _Block_copy(v17);
        goto LABEL_54;
      }
    }
    int v18 = 0;
LABEL_54:
    int v45 = *(NSObject **)(a4 + 8);
    *(void *)buf = MEMORY[0x263EF8330];
    *(void *)&buf[8] = 1174405120;
    *(void *)&long long v57 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
    *((void *)&v57 + 1) = &__block_descriptor_tmp_181;
    if (v18)
    {
      cf[0] = _Block_copy(v18);
      cf[1] = 0;
      dispatch_async(v45, buf);
      CFTypeRef v46 = cf[1];
      if (!cf[1]) {
        goto LABEL_59;
      }
    }
    else
    {
      cf[0] = 0;
      cf[1] = 0;
      dispatch_async(v45, buf);
      CFTypeRef v46 = cf[1];
      if (!cf[1])
      {
LABEL_59:
        if (cf[0]) {
          _Block_release(cf[0]);
        }
        if (v18) {
          _Block_release(v18);
        }
        return;
      }
    }
    CFRelease(v46);
    goto LABEL_59;
  }
  BOOL v19 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v19 || (uint64_t v20 = *(void *)(a1 + 72), (v21 = std::__shared_weak_count::lock(v19)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v22 = v21;
  atomic_fetch_add_explicit(&v21->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v22);
  }
  *(void *)&long long v23 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v23 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v59 = v23;
  *(_OWORD *)__p = v23;
  long long v57 = v23;
  *(_OWORD *)CFTypeRef cf = v23;
  *(_OWORD *)buf = v23;
  AriSdk::ARI_CsiIceArtdSettingReq_SDK::ARI_CsiIceArtdSettingReq_SDK((AriSdk::ARI_CsiIceArtdSettingReq_SDK *)buf);
  int v24 = operator new(4uLL);
  *int v24 = a3;
  uint64_t v25 = __p[0];
  __p[0] = v24;
  if (v25) {
    operator delete(v25);
  }
  uint64_t v26 = operator new(4uLL);
  _DWORD *v26 = a2;
  uint64_t v27 = __p[1];
  __p[1] = v26;
  if (v27) {
    operator delete(v27);
  }
  uint64_t v28 = *(void *)(a1 + 312);
  if (!*(void *)a4)
  {
    long long v29 = 0;
    unint64_t v30 = *(NSObject **)(a4 + 8);
    if (!v30) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  long long v29 = (std::__shared_weak_count_vtbl *)_Block_copy(*(const void **)a4);
  unint64_t v30 = *(NSObject **)(a4 + 8);
  if (v30) {
LABEL_25:
  }
    dispatch_retain(v30);
LABEL_26:
  atomic_fetch_add_explicit(&v22->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  v31 = (std::__shared_weak_count *)operator new(0x40uLL);
  *(_OWORD *)&v31->__shared_owners_ = 0u;
  p_shared_owners = &v31->__shared_owners_;
  v31->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940698;
  v31[1].__vftable = v29;
  v31[1].__shared_owners_ = (uint64_t)v30;
  v31[1].__shared_weak_owners_ = v20;
  v31[2].__vftable = (std::__shared_weak_count_vtbl *)v22;
  LODWORD(v31[2].__shared_owners_) = a3;
  uint64_t v49 = MEMORY[0x263EF8330];
  uint64_t v50 = 1174405120;
  long long v51 = ___ZN3ice6detail12wrapCallbackIZN5radio16ARICommandDriver19setARTDWithRAT_syncEiNS3_14RFRatSelectionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEE3__0vEENS5_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  uint64_t v52 = &__block_descriptor_tmp_249;
  v53 = v31 + 1;
  v54 = v31;
  atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlock[0] = (const void *)MEMORY[0x263EF8330];
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
  aBlock[3] = &unk_264C7DF90;
  aBlock[4] = &v49;
  int v33 = _Block_copy(aBlock);
  uint64_t v34 = v54;
  if (!v54 || atomic_fetch_add(&v54->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
  std::__shared_weak_count::__release_weak(v34);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_29:
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
LABEL_30:
  *(void *)&long long v35 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v35 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v47[0] = v35;
  v47[1] = v35;
  unint64_t v48 = 0xAAAAAAAAAAAAAAAALL;
  int v36 = *(std::__shared_weak_count **)(v28 + 16);
  uint64_t v49 = *(void *)(v28 + 8);
  if (!v36)
  {
    uint64_t v50 = 0;
LABEL_66:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v50 = (uint64_t)std::__shared_weak_count::lock(v36);
  if (!v50) {
    goto LABEL_66;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  BOOL v37 = (std::__shared_weak_count *)v50;
  if (v50 && !atomic_fetch_add((atomic_ullong *volatile)(v50 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
  }
  aBlock[0] = v33;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0]) {
    _Block_release(aBlock[0]);
  }
  MEMORY[0x237DF50B0](v47);
  MEMORY[0x237DF5AA0](buf);
  std::__shared_weak_count::__release_weak(v22);
}

void sub_235E31038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *aBlock,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t radio::ARICommandDriver::setARTDWithRAT_sync(int,radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::~$_0(uint64_t a1)
{
  CFTypeRef v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(NSObject **)(a1 + 8);
  if (v3) {
    dispatch_release(v3);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void radio::ARICommandDriver::setARTD_sync(uint64_t a1, const __CFDictionary **a2, uint64_t a3)
{
  CFTypeRef v6 = dispatch_group_create();
  int v7 = v6;
  if (v6)
  {
    dispatch_retain(v6);
    dispatch_group_enter(v7);
  }
  v35[0] = 0;
  v35[1] = v35;
  v35[2] = 0x3802000000;
  v35[3] = __Block_byref_object_copy__42;
  v35[4] = __Block_byref_object_dispose__43;
  int v36 = (const void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v37 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  CFStringRef v8 = *(void **)a3;
  if (*(void *)a3) {
    CFStringRef v8 = _Block_copy(v8);
  }
  uint64_t v9 = *(NSObject **)(a3 + 8);
  int v36 = v8;
  dispatch_object_t v37 = v9;
  if (v9) {
    dispatch_retain(v9);
  }
  unint64_t v33 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v34 = 0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN5radio16ARICommandDriver12setARTD_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke;
  aBlock[3] = &unk_26E93F748;
  dispatch_group_t group = v7;
  if (v7)
  {
    dispatch_retain(v7);
    dispatch_group_enter(group);
  }
  aBlock[4] = v35;
  int v10 = _Block_copy(aBlock);
  uint64_t v11 = *(NSObject **)(a1 + 88);
  if (v11) {
    dispatch_retain(*(dispatch_object_t *)(a1 + 88));
  }
  unint64_t v33 = (unint64_t)v10;
  unint64_t v34 = (unint64_t)v11;
  v30[0] = 0xAAAAAAAAAAAAAAAALL;
  v30[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v30, *a2);
  int Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v30, (const __CFString *)*MEMORY[0x263F8B890]);
  if (v10)
  {
    uint64_t v13 = _Block_copy(v10);
    uint64_t v28 = v13;
    long long v29 = v11;
    if (!v11) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  uint64_t v13 = 0;
  uint64_t v28 = 0;
  long long v29 = v11;
  if (v11) {
LABEL_13:
  }
    dispatch_retain(v11);
LABEL_14:
  radio::ARICommandDriver::setARTDWithRAT_sync(a1, Int, 1, (uint64_t)&v28);
  if (v11) {
    dispatch_release(v11);
  }
  if (v13) {
    _Block_release(v13);
  }
  int v14 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v30, (const __CFString *)*MEMORY[0x263F8B8A8]);
  if (v10)
  {
    uint64_t v15 = _Block_copy(v10);
    uint64_t v26 = v15;
    uint64_t v27 = v11;
    if (!v11) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  uint64_t v15 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = v11;
  if (v11) {
LABEL_20:
  }
    dispatch_retain(v11);
LABEL_21:
  radio::ARICommandDriver::setARTDWithRAT_sync(a1, v14, 2, (uint64_t)&v26);
  if (v11) {
    dispatch_release(v11);
  }
  if (v15) {
    _Block_release(v15);
  }
  int v16 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v30, (const __CFString *)*MEMORY[0x263F8B7E0]);
  if (v10)
  {
    int v17 = _Block_copy(v10);
    int v24 = v17;
    uint64_t v25 = v11;
    if (!v11) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  int v17 = 0;
  int v24 = 0;
  uint64_t v25 = v11;
  if (v11) {
LABEL_27:
  }
    dispatch_retain(v11);
LABEL_28:
  radio::ARICommandDriver::setARTDWithRAT_sync(a1, v16, 3, (uint64_t)&v24);
  if (v11) {
    dispatch_release(v11);
  }
  if (v17) {
    _Block_release(v17);
  }
  int v18 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v30, (const __CFString *)*MEMORY[0x263F8B7D8]);
  if (v10)
  {
    BOOL v19 = _Block_copy(v10);
    uint64_t v22 = v19;
    long long v23 = v11;
    if (!v11) {
      goto LABEL_35;
    }
    goto LABEL_34;
  }
  BOOL v19 = 0;
  uint64_t v22 = 0;
  long long v23 = v11;
  if (v11) {
LABEL_34:
  }
    dispatch_retain(v11);
LABEL_35:
  radio::ARICommandDriver::setARTDWithRAT_sync(a1, v18, 0, (uint64_t)&v22);
  if (v11) {
    dispatch_release(v11);
  }
  if (v19) {
    _Block_release(v19);
  }
  uint64_t v20 = *(NSObject **)(a1 + 88);
  v21[0] = MEMORY[0x263EF8330];
  v21[1] = 0x40000000;
  v21[2] = ___ZN5radio16ARICommandDriver12setARTD_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke_53;
  v21[3] = &unk_264C7DF18;
  _OWORD v21[4] = v35;
  dispatch_group_notify(v7, v20, v21);
  MEMORY[0x237DF4EE0](v30);
  if (v11) {
    dispatch_release(v11);
  }
  if (v10) {
    _Block_release(v10);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  _Block_object_dispose(v35, 8);
  if (v37) {
    dispatch_release(v37);
  }
  if (v36) {
    _Block_release(v36);
  }
  if (v7)
  {
    dispatch_group_leave(v7);
    dispatch_release(v7);
    dispatch_release(v7);
  }
}

void sub_235E31590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,dispatch_group_t group)
{
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)&a14);
  MEMORY[0x237DF4EE0](&a22);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v31 - 136);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  _Block_object_dispose((const void *)(v31 - 120), 8);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v30 + 40);
  if (v29)
  {
    dispatch_group_leave(v29);
    dispatch_release(v29);
    dispatch_release(v29);
  }
  _Unwind_Resume(a1);
}

void ___ZN5radio16ARICommandDriver12setARTD_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef v2 = *a2;
  if (*a2) {
    uint64_t v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v3 = 0;
  }
  if (!v3) {
    return;
  }
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
  CFTypeRef v6 = *(const void **)(v5 + 40);
  if (!v6 || !*(void *)(v5 + 48)) {
    return;
  }
  if (v2 && (CFRetain(*a2), (CFTypeRef v6 = *(const void **)(v5 + 40)) == 0)) {
    int v7 = 0;
  }
  else {
    int v7 = _Block_copy(v6);
  }
  CFStringRef v8 = *(NSObject **)(v5 + 48);
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 1174405120;
  v12[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
  v12[3] = &__block_descriptor_tmp_181;
  if (v7)
  {
    aBlock = _Block_copy(v7);
    CFTypeRef cf = v2;
    if (!v2) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  aBlock = 0;
  CFTypeRef cf = v2;
  if (v2) {
LABEL_15:
  }
    CFRetain(v2);
LABEL_16:
  dispatch_async(v8, v12);
  if (cf) {
    CFRelease(cf);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v7) {
    _Block_release(v7);
  }
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8);
  int v10 = *(const void **)(v9 + 40);
  *(void *)(v9 + 40) = 0;
  if (v10) {
    _Block_release(v10);
  }
  uint64_t v11 = *(NSObject **)(v9 + 48);
  *(void *)(v9 + 48) = 0;
  if (v11) {
    dispatch_release(v11);
  }
}

void ___ZN5radio16ARICommandDriver12setARTD_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke_53(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  CFTypeRef v2 = *(const void **)(v1 + 40);
  if (!v2 || !*(void *)(v1 + 48)) {
    return;
  }
  uint64_t v3 = _Block_copy(v2);
  CFAllocatorRef v4 = v3;
  uint64_t v5 = *(NSObject **)(v1 + 48);
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 1174405120;
  v7[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
  v7[3] = &__block_descriptor_tmp_181;
  if (v3)
  {
    aBlock = _Block_copy(v3);
    CFTypeRef cf = 0;
    dispatch_async(v5, v7);
    CFTypeRef v6 = cf;
    if (!cf) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  aBlock = 0;
  CFTypeRef cf = 0;
  dispatch_async(v5, v7);
  CFTypeRef v6 = cf;
  if (cf) {
LABEL_7:
  }
    CFRelease(v6);
LABEL_8:
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v4) {
    _Block_release(v4);
  }
}

void radio::ARICommandDriver::setARFCNWithRAT_sync(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  CFStringRef v8 = (void *)(a1 + 400);
  uint64_t v9 = *(uint64_t **)(a1 + 400);
  int v10 = (uint64_t **)(a1 + 400);
  uint64_t v11 = (uint64_t **)(a1 + 400);
  if (v9)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v11 = (uint64_t **)v9;
        int v12 = *((_DWORD *)v9 + 7);
        if (v12 <= a3) {
          break;
        }
        uint64_t v9 = *v11;
        int v10 = v11;
        if (!*v11) {
          goto LABEL_8;
        }
      }
      if (v12 >= a3) {
        break;
      }
      uint64_t v9 = v11[1];
      if (!v9)
      {
        int v10 = v11 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    uint64_t v13 = (uint64_t *)v11;
    uint64_t v11 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v11 + 7) = a3;
    *((_DWORD *)v11 + 8) = 0;
    NSObject *v11 = 0;
    v11[1] = 0;
    v11[2] = v13;
    const void *v10 = (uint64_t *)v11;
    uint64_t v14 = **(void **)(a1 + 392);
    uint64_t v15 = (uint64_t *)v11;
    if (v14)
    {
      *(void *)(a1 + 392) = v14;
      uint64_t v15 = *v10;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 400), v15);
    ++*(void *)(a1 + 408);
  }
  if (*((_DWORD *)v11 + 8) == a2)
  {
    int v16 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      int v40 = (_DWORD *)*v8;
      uint64_t v41 = v8;
      if (*v8)
      {
        while (1)
        {
          while (1)
          {
            uint64_t v41 = v40;
            int v42 = v40[7];
            if (v42 <= a3) {
              break;
            }
            int v40 = (_DWORD *)*v41;
            CFStringRef v8 = v41;
            if (!*v41) {
              goto LABEL_55;
            }
          }
          if (v42 >= a3) {
            break;
          }
          int v40 = (_DWORD *)v41[1];
          if (!v40)
          {
            CFStringRef v8 = v41 + 1;
            goto LABEL_55;
          }
        }
      }
      else
      {
LABEL_55:
        v43 = v41;
        uint64_t v41 = operator new(0x28uLL);
        *((_DWORD *)v41 + 7) = a3;
        *((_DWORD *)v41 + 8) = 0;
        void *v41 = 0;
        v41[1] = 0;
        _DWORD v41[2] = v43;
        *CFStringRef v8 = v41;
        uint64_t v44 = **(void **)(a1 + 392);
        int v45 = v41;
        if (v44)
        {
          *(void *)(a1 + 392) = v44;
          int v45 = (uint64_t *)*v8;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 400), v45);
        ++*(void *)(a1 + 408);
      }
      int v46 = *((_DWORD *)v41 + 8);
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)&buf[4] = a3;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v46;
      *(_WORD *)&buf[14] = 1024;
      LODWORD(v59) = a2;
      _os_log_debug_impl(&dword_235DB9000, v16, OS_LOG_TYPE_DEBUG, "#D fARFCNLock[ %d ]: %d == %d\n", buf, 0x14u);
      int v17 = *(const void **)a4;
      if (*(void *)a4) {
        goto LABEL_14;
      }
    }
    else
    {
      int v17 = *(const void **)a4;
      if (*(void *)a4)
      {
LABEL_14:
        int v18 = _Block_copy(v17);
        goto LABEL_60;
      }
    }
    int v18 = 0;
LABEL_60:
    v47 = *(NSObject **)(a4 + 8);
    *(void *)buf = MEMORY[0x263EF8330];
    *(void *)&buf[8] = 1174405120;
    *(void *)&long long v59 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
    *((void *)&v59 + 1) = &__block_descriptor_tmp_181;
    if (v18)
    {
      cf[0] = _Block_copy(v18);
      cf[1] = 0;
      dispatch_async(v47, buf);
      CFTypeRef v48 = cf[1];
      if (!cf[1]) {
        goto LABEL_65;
      }
    }
    else
    {
      cf[0] = 0;
      cf[1] = 0;
      dispatch_async(v47, buf);
      CFTypeRef v48 = cf[1];
      if (!cf[1])
      {
LABEL_65:
        if (cf[0]) {
          _Block_release(cf[0]);
        }
        if (v18) {
          _Block_release(v18);
        }
        return;
      }
    }
    CFRelease(v48);
    goto LABEL_65;
  }
  if (a3 == 255) {
    int v19 = 1;
  }
  else {
    int v19 = a3;
  }
  if (a3 == 255) {
    int v20 = 0;
  }
  else {
    int v20 = a2;
  }
  unint64_t v21 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v21 || (uint64_t v22 = *(void *)(a1 + 72), (v23 = std::__shared_weak_count::lock(v21)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v24 = v23;
  atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v24);
  }
  *(void *)&long long v25 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v25 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v61 = v25;
  *(_OWORD *)__p = v25;
  long long v59 = v25;
  *(_OWORD *)CFTypeRef cf = v25;
  *(_OWORD *)buf = v25;
  AriSdk::ARI_CsiIceArfcnLockReq_SDK::ARI_CsiIceArfcnLockReq_SDK((AriSdk::ARI_CsiIceArfcnLockReq_SDK *)buf);
  uint64_t v26 = operator new(4uLL);
  _DWORD *v26 = v20;
  uint64_t v27 = __p[0];
  __p[0] = v26;
  if (v27) {
    operator delete(v27);
  }
  uint64_t v28 = operator new(4uLL);
  _DWORD *v28 = v19;
  long long v29 = __p[1];
  __p[1] = v28;
  if (v29) {
    operator delete(v29);
  }
  uint64_t v30 = *(void *)(a1 + 312);
  if (!*(void *)a4)
  {
    uint64_t v31 = 0;
    int v32 = *(NSObject **)(a4 + 8);
    if (!v32) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  uint64_t v31 = (std::__shared_weak_count_vtbl *)_Block_copy(*(const void **)a4);
  int v32 = *(NSObject **)(a4 + 8);
  if (v32) {
LABEL_31:
  }
    dispatch_retain(v32);
LABEL_32:
  atomic_fetch_add_explicit(&v24->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  unint64_t v33 = (std::__shared_weak_count *)operator new(0x40uLL);
  *(_OWORD *)&v33->__shared_owners_ = 0u;
  p_shared_owners = &v33->__shared_owners_;
  v33->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940718;
  v33[1].__vftable = v31;
  v33[1].__shared_owners_ = (uint64_t)v32;
  v33[1].__shared_weak_owners_ = v22;
  v33[2].__vftable = (std::__shared_weak_count_vtbl *)v24;
  LODWORD(v33[2].__shared_owners_) = v19;
  uint64_t v51 = MEMORY[0x263EF8330];
  uint64_t v52 = 1174405120;
  v53 = ___ZN3ice6detail12wrapCallbackIZN5radio16ARICommandDriver20setARFCNWithRAT_syncEiNS3_14RFRatSelectionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEE3__0vEENS5_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  v54 = &__block_descriptor_tmp_254;
  v55 = v33 + 1;
  v56 = v33;
  atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlock[0] = (const void *)MEMORY[0x263EF8330];
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
  aBlock[3] = &unk_264C7DF90;
  aBlock[4] = &v51;
  long long v35 = _Block_copy(aBlock);
  int v36 = v56;
  if (!v56 || atomic_fetch_add(&v56->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
  std::__shared_weak_count::__release_weak(v36);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_35:
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
LABEL_36:
  *(void *)&long long v37 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v37 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v49[0] = v37;
  v49[1] = v37;
  unint64_t v50 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v38 = *(std::__shared_weak_count **)(v30 + 16);
  uint64_t v51 = *(void *)(v30 + 8);
  if (!v38)
  {
    uint64_t v52 = 0;
LABEL_72:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v52 = (uint64_t)std::__shared_weak_count::lock(v38);
  if (!v52) {
    goto LABEL_72;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v39 = (std::__shared_weak_count *)v52;
  if (v52 && !atomic_fetch_add((atomic_ullong *volatile)(v52 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
  }
  aBlock[0] = v35;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0]) {
    _Block_release(aBlock[0]);
  }
  MEMORY[0x237DF50B0](v49);
  MEMORY[0x237DF5700](buf);
  std::__shared_weak_count::__release_weak(v24);
}

void sub_235E31F1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *aBlock,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t radio::ARICommandDriver::setARFCNWithRAT_sync(int,radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::~$_0(uint64_t a1)
{
  CFTypeRef v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(NSObject **)(a1 + 8);
  if (v3) {
    dispatch_release(v3);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void radio::ARICommandDriver::setARFCN_sync(uint64_t a1, const __CFDictionary **a2, uint64_t a3)
{
  CFTypeRef v6 = dispatch_group_create();
  int v7 = v6;
  if (v6)
  {
    dispatch_retain(v6);
    dispatch_group_enter(v7);
  }
  v24[0] = 0;
  v24[1] = v24;
  v24[2] = 0x3802000000;
  v24[3] = __Block_byref_object_copy__42;
  v24[4] = __Block_byref_object_dispose__43;
  long long v25 = (void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  CFStringRef v8 = *(void **)a3;
  if (*(void *)a3) {
    CFStringRef v8 = _Block_copy(v8);
  }
  uint64_t v9 = *(NSObject **)(a3 + 8);
  long long v25 = v8;
  dispatch_object_t object = v9;
  if (v9) {
    dispatch_retain(v9);
  }
  unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v23 = 0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN5radio16ARICommandDriver13setARFCN_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke;
  aBlock[3] = &unk_26E93F780;
  dispatch_group_t group = v7;
  if (v7)
  {
    dispatch_retain(v7);
    dispatch_group_enter(group);
  }
  aBlock[4] = v24;
  int v10 = _Block_copy(aBlock);
  uint64_t v11 = *(NSObject **)(a1 + 88);
  if (v11) {
    dispatch_retain(*(dispatch_object_t *)(a1 + 88));
  }
  unint64_t v22 = (unint64_t)v10;
  unint64_t v23 = (unint64_t)v11;
  v19[0] = 0xAAAAAAAAAAAAAAAALL;
  v19[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v19, *a2);
  int Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v19, (const __CFString *)*MEMORY[0x263F8B888]);
  int v13 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v19, (const __CFString *)*MEMORY[0x263F8B7E8]);
  if (v10)
  {
    uint64_t v14 = _Block_copy(v10);
    int v17 = v14;
    int v18 = v11;
    if (!v11) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  uint64_t v14 = 0;
  int v17 = 0;
  int v18 = v11;
  if (v11) {
LABEL_13:
  }
    dispatch_retain(v11);
LABEL_14:
  radio::ARICommandDriver::setARFCNWithRAT_sync(a1, Int, v13, (uint64_t)&v17);
  if (v11) {
    dispatch_release(v11);
  }
  if (v14) {
    _Block_release(v14);
  }
  uint64_t v15 = *(NSObject **)(a1 + 88);
  v16[0] = MEMORY[0x263EF8330];
  v16[1] = 0x40000000;
  v16[2] = ___ZN5radio16ARICommandDriver13setARFCN_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke_58;
  v16[3] = &unk_264C7DF40;
  v16[4] = v24;
  dispatch_group_notify(v7, v15, v16);
  MEMORY[0x237DF4EE0](v19);
  if (v11) {
    dispatch_release(v11);
  }
  if (v10) {
    _Block_release(v10);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  _Block_object_dispose(v24, 8);
  if (object) {
    dispatch_release(object);
  }
  if (v25) {
    _Block_release(v25);
  }
  if (v7)
  {
    dispatch_group_leave(v7);
    dispatch_release(v7);
    dispatch_release(v7);
  }
}

void sub_235E32318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,dispatch_group_t group,char a24,uint64_t a25,char a26)
{
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)&a14);
  MEMORY[0x237DF4EE0](&a16);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)&a24);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  _Block_object_dispose(&a26, 8);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v27 + 40);
  if (v26)
  {
    dispatch_group_leave(v26);
    dispatch_release(v26);
    dispatch_release(v26);
  }
  _Unwind_Resume(a1);
}

void ___ZN5radio16ARICommandDriver13setARFCN_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef v2 = *a2;
  if (*a2) {
    uint64_t v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v3 = 0;
  }
  if (!v3) {
    return;
  }
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
  CFTypeRef v6 = *(const void **)(v5 + 40);
  if (!v6 || !*(void *)(v5 + 48)) {
    return;
  }
  if (v2 && (CFRetain(*a2), (CFTypeRef v6 = *(const void **)(v5 + 40)) == 0)) {
    int v7 = 0;
  }
  else {
    int v7 = _Block_copy(v6);
  }
  CFStringRef v8 = *(NSObject **)(v5 + 48);
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 1174405120;
  v12[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
  v12[3] = &__block_descriptor_tmp_181;
  if (v7)
  {
    aBlock = _Block_copy(v7);
    CFTypeRef cf = v2;
    if (!v2) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  aBlock = 0;
  CFTypeRef cf = v2;
  if (v2) {
LABEL_15:
  }
    CFRetain(v2);
LABEL_16:
  dispatch_async(v8, v12);
  if (cf) {
    CFRelease(cf);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v7) {
    _Block_release(v7);
  }
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8);
  int v10 = *(const void **)(v9 + 40);
  *(void *)(v9 + 40) = 0;
  if (v10) {
    _Block_release(v10);
  }
  uint64_t v11 = *(NSObject **)(v9 + 48);
  *(void *)(v9 + 48) = 0;
  if (v11) {
    dispatch_release(v11);
  }
}

void ___ZN5radio16ARICommandDriver13setARFCN_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke_58(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  CFTypeRef v2 = *(const void **)(v1 + 40);
  if (!v2 || !*(void *)(v1 + 48)) {
    return;
  }
  uint64_t v3 = _Block_copy(v2);
  CFAllocatorRef v4 = v3;
  uint64_t v5 = *(NSObject **)(v1 + 48);
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 1174405120;
  v7[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
  v7[3] = &__block_descriptor_tmp_181;
  if (v3)
  {
    aBlock = _Block_copy(v3);
    CFTypeRef cf = 0;
    dispatch_async(v5, v7);
    CFTypeRef v6 = cf;
    if (!cf) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  aBlock = 0;
  CFTypeRef cf = 0;
  dispatch_async(v5, v7);
  CFTypeRef v6 = cf;
  if (cf) {
LABEL_7:
  }
    CFRelease(v6);
LABEL_8:
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v4) {
    _Block_release(v4);
  }
}

uint64_t radio::ARICommandDriver::setCA_sync(uint64_t a1, const __CFDictionary **a2, uint64_t a3)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  v35[0] = 0xAAAAAAAAAAAAAAAALL;
  v35[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v35, *a2);
  int v5 = *(_DWORD *)(a1 + 420);
  CFStringRef v6 = (const __CFString *)*MEMORY[0x263F8B898];
  if (v5 == ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v35, (const __CFString *)*MEMORY[0x263F8B898]))
  {
    int v7 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      int v28 = *(_DWORD *)(a1 + 420);
      int Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v35, v6);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v28;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = Int;
      _os_log_debug_impl(&dword_235DB9000, v7, OS_LOG_TYPE_DEBUG, "#D fCAEnabled: %d == %d\n", buf, 0xEu);
      CFStringRef v8 = *(const void **)a3;
      if (*(void *)a3) {
        goto LABEL_4;
      }
    }
    else
    {
      CFStringRef v8 = *(const void **)a3;
      if (*(void *)a3)
      {
LABEL_4:
        uint64_t v9 = _Block_copy(v8);
        goto LABEL_32;
      }
    }
    uint64_t v9 = 0;
LABEL_32:
    uint64_t v30 = *(NSObject **)(a3 + 8);
    *(void *)buf = MEMORY[0x263EF8330];
    *(void *)&buf[8] = 1174405120;
    *(void *)&long long v44 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
    *((void *)&v44 + 1) = &__block_descriptor_tmp_181;
    if (v9)
    {
      long long v45 = (unint64_t)_Block_copy(v9);
      dispatch_async(v30, buf);
      uint64_t v31 = (const void *)*((void *)&v45 + 1);
      if (!*((void *)&v45 + 1)) {
        goto LABEL_37;
      }
    }
    else
    {
      long long v45 = 0uLL;
      dispatch_async(v30, buf);
      uint64_t v31 = (const void *)*((void *)&v45 + 1);
      if (!*((void *)&v45 + 1))
      {
LABEL_37:
        if ((void)v45) {
          _Block_release((const void *)v45);
        }
        if (v9) {
          _Block_release(v9);
        }
        return MEMORY[0x237DF4EE0](v35);
      }
    }
    CFRelease(v31);
    goto LABEL_37;
  }
  int v10 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v10 || (uint64_t v11 = *(void *)(a1 + 72), (v12 = std::__shared_weak_count::lock(v10)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v13 = v12;
  atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v13);
  }
  unint64_t v47 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v14 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v45 = v14;
  long long v46 = v14;
  *(_OWORD *)buf = v14;
  long long v44 = v14;
  AriSdk::ARI_CsiIceCaEnableReq_SDK::ARI_CsiIceCaEnableReq_SDK((AriSdk::ARI_CsiIceCaEnableReq_SDK *)buf);
  int v15 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v35, v6);
  int v16 = operator new(4uLL);
  *int v16 = v15;
  int v17 = (void *)v47;
  unint64_t v47 = (unint64_t)v16;
  if (v17) {
    operator delete(v17);
  }
  uint64_t v18 = *(void *)(a1 + 312);
  if (!*(void *)a3)
  {
    int v19 = 0;
    int v20 = *(NSObject **)(a3 + 8);
    if (!v20) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  int v19 = (std::__shared_weak_count_vtbl *)_Block_copy(*(const void **)a3);
  int v20 = *(NSObject **)(a3 + 8);
  if (v20) {
LABEL_13:
  }
    dispatch_retain(v20);
LABEL_14:
  atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  unint64_t v21 = (std::__shared_weak_count *)operator new(0x38uLL);
  *(_OWORD *)&v21->__shared_owners_ = 0u;
  p_shared_owners = &v21->__shared_owners_;
  v21->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940798;
  v21[1].__vftable = v19;
  v21[1].__shared_owners_ = (uint64_t)v20;
  v21[1].__shared_weak_owners_ = v11;
  v21[2].__vftable = (std::__shared_weak_count_vtbl *)v13;
  uint64_t v36 = MEMORY[0x263EF8330];
  uint64_t v37 = 1174405120;
  unint64_t v38 = ___ZN3ice6detail12wrapCallbackIZN5radio16ARICommandDriver10setCA_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS6_I9__CFErrorEEEEEE3__0vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  v39 = &__block_descriptor_tmp_259;
  int v40 = v21 + 1;
  uint64_t v41 = v21;
  atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlock[0] = (const void *)MEMORY[0x263EF8330];
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
  aBlock[3] = &unk_264C7DF90;
  aBlock[4] = &v36;
  unint64_t v23 = _Block_copy(aBlock);
  int v24 = v41;
  if (!v41 || atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
  std::__shared_weak_count::__release_weak(v24);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_17:
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
LABEL_18:
  *(void *)&long long v25 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v25 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v33[0] = v25;
  v33[1] = v25;
  unint64_t v34 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v26 = *(std::__shared_weak_count **)(v18 + 16);
  uint64_t v36 = *(void *)(v18 + 8);
  if (!v26)
  {
    uint64_t v37 = 0;
LABEL_44:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v37 = (uint64_t)std::__shared_weak_count::lock(v26);
  if (!v37) {
    goto LABEL_44;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  uint64_t v27 = (std::__shared_weak_count *)v37;
  if (v37 && !atomic_fetch_add((atomic_ullong *volatile)(v37 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  aBlock[0] = v23;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0]) {
    _Block_release(aBlock[0]);
  }
  MEMORY[0x237DF50B0](v33);
  MEMORY[0x237DF5680](buf);
  std::__shared_weak_count::__release_weak(v13);
  return MEMORY[0x237DF4EE0](v35);
}

void sub_235E32B84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *aBlock)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t radio::ARICommandDriver::setCA_sync(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::~$_0(uint64_t a1)
{
  CFTypeRef v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(NSObject **)(a1 + 8);
  if (v3) {
    dispatch_release(v3);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void radio::ARICommandDriver::setFieldTestConfig(uint64_t a1, const void **a2, uint64_t a3)
{
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 1174405120;
  v9[2] = ___ZN5radio16ARICommandDriver18setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke;
  v9[3] = &__block_descriptor_tmp_65_0;
  v9[4] = a1;
  CFStringRef v6 = *(void **)a3;
  if (*(void *)a3) {
    CFStringRef v6 = _Block_copy(v6);
  }
  int v7 = *(NSObject **)(a3 + 8);
  aBlock = v6;
  dispatch_object_t object = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  CFStringRef v8 = *a2;
  CFTypeRef cf = v8;
  if (v8) {
    CFRetain(v8);
  }
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped((uint64_t *)(a1 + 72), (uint64_t)v9);
  if (cf) {
    CFRelease(cf);
  }
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void ___ZN5radio16ARICommandDriver18setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = dispatch_group_create();
  CFAllocatorRef v4 = v3;
  if (v3)
  {
    dispatch_retain(v3);
    dispatch_group_enter(v4);
  }
  v40[0] = 0;
  v40[1] = v40;
  v40[2] = 0x3802000000;
  v40[3] = __Block_byref_object_copy__42;
  v40[4] = __Block_byref_object_dispose__43;
  uint64_t v41 = (const void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v42 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  int v5 = (void *)a1[5];
  if (v5) {
    int v5 = _Block_copy(v5);
  }
  CFStringRef v6 = a1[6];
  uint64_t v41 = v5;
  dispatch_object_t v42 = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  unint64_t v38 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v39 = 0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN5radio16ARICommandDriver18setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke_2;
  aBlock[3] = &unk_26E93F7B8;
  dispatch_group_t group = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(group);
  }
  aBlock[4] = v40;
  int v7 = _Block_copy(aBlock);
  CFStringRef v8 = *(NSObject **)(v2 + 88);
  if (v8) {
    dispatch_retain(*(dispatch_object_t *)(v2 + 88));
  }
  unint64_t v38 = (unint64_t)v7;
  unint64_t v39 = (unint64_t)v8;
  CFDictionaryRef v9 = (const __CFDictionary *)a1[7];
  CFDictionaryRef v35 = v9;
  if (v9) {
    CFRetain(v9);
  }
  if (v7)
  {
    int v10 = _Block_copy(v7);
    unint64_t v33 = v10;
    unint64_t v34 = v8;
    if (!v8) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  int v10 = 0;
  unint64_t v33 = 0;
  unint64_t v34 = v8;
  if (v8) {
LABEL_15:
  }
    dispatch_retain(v8);
LABEL_16:
  radio::ARICommandDriver::setRxDiversityState_sync(v2, &v35, (uint64_t)&v33);
  if (v8) {
    dispatch_release(v8);
  }
  if (v10) {
    _Block_release(v10);
  }
  if (v9) {
    CFRelease(v9);
  }
  CFDictionaryRef v11 = (const __CFDictionary *)a1[7];
  CFDictionaryRef v32 = v11;
  if (v11) {
    CFRetain(v11);
  }
  if (v7)
  {
    int v12 = _Block_copy(v7);
    uint64_t v30 = v12;
    uint64_t v31 = v8;
    if (!v8) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  int v12 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = v8;
  if (v8) {
LABEL_26:
  }
    dispatch_retain(v8);
LABEL_27:
  radio::ARICommandDriver::setAntennaTxPort_sync(v2, &v32, (uint64_t)&v30);
  if (v8) {
    dispatch_release(v8);
  }
  if (v12) {
    _Block_release(v12);
  }
  if (v11) {
    CFRelease(v11);
  }
  CFDictionaryRef v13 = (const __CFDictionary *)a1[7];
  CFDictionaryRef v29 = v13;
  if (v13) {
    CFRetain(v13);
  }
  if (v7)
  {
    long long v14 = _Block_copy(v7);
    uint64_t v27 = v14;
    int v28 = v8;
    if (!v8) {
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  long long v14 = 0;
  uint64_t v27 = 0;
  int v28 = v8;
  if (v8) {
LABEL_37:
  }
    dispatch_retain(v8);
LABEL_38:
  radio::ARICommandDriver::setARTD_sync(v2, &v29, (uint64_t)&v27);
  if (v8) {
    dispatch_release(v8);
  }
  if (v14) {
    _Block_release(v14);
  }
  if (v13) {
    CFRelease(v13);
  }
  CFDictionaryRef v15 = (const __CFDictionary *)a1[7];
  CFDictionaryRef v26 = v15;
  if (v15) {
    CFRetain(v15);
  }
  if (v7)
  {
    int v16 = _Block_copy(v7);
    int v24 = v16;
    long long v25 = v8;
    if (!v8) {
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  int v16 = 0;
  int v24 = 0;
  long long v25 = v8;
  if (v8) {
LABEL_48:
  }
    dispatch_retain(v8);
LABEL_49:
  radio::ARICommandDriver::setARFCN_sync(v2, &v26, (uint64_t)&v24);
  if (v8) {
    dispatch_release(v8);
  }
  if (v16) {
    _Block_release(v16);
  }
  if (v15) {
    CFRelease(v15);
  }
  CFDictionaryRef v17 = (const __CFDictionary *)a1[7];
  CFDictionaryRef v23 = v17;
  if (v17) {
    CFRetain(v17);
  }
  if (v7)
  {
    uint64_t v18 = _Block_copy(v7);
    unint64_t v21 = v18;
    unint64_t v22 = v8;
    if (!v8) {
      goto LABEL_60;
    }
    goto LABEL_59;
  }
  uint64_t v18 = 0;
  unint64_t v21 = 0;
  unint64_t v22 = v8;
  if (v8) {
LABEL_59:
  }
    dispatch_retain(v8);
LABEL_60:
  radio::ARICommandDriver::setCA_sync(v2, &v23, (uint64_t)&v21);
  if (v8) {
    dispatch_release(v8);
  }
  if (v18) {
    _Block_release(v18);
  }
  if (v17) {
    CFRelease(v17);
  }
  int v19 = *(NSObject **)(v2 + 88);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZN5radio16ARICommandDriver18setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke_63;
  block[3] = &unk_264C7DF68;
  void block[4] = v40;
  dispatch_group_notify(v4, v19, block);
  if (v8) {
    dispatch_release(v8);
  }
  if (v7) {
    _Block_release(v7);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  _Block_object_dispose(v40, 8);
  if (v42) {
    dispatch_release(v42);
  }
  if (v41) {
    _Block_release(v41);
  }
  if (v4)
  {
    dispatch_group_leave(v4);
    dispatch_release(v4);
    dispatch_release(v4);
  }
}

void sub_235E33298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, const void *a17, __int16 a18, char a19, char a20,uint64_t a21,char a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,char a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,char a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,dispatch_group_t group)
{
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)&a15);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a17);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v48 - 152);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  _Block_object_dispose((const void *)(v48 - 136), 8);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v47 + 40);
  if (v46)
  {
    dispatch_group_leave(v46);
    dispatch_release(v46);
    dispatch_release(v46);
  }
  _Unwind_Resume(a1);
}

void ___ZN5radio16ARICommandDriver18setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke_2(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef v2 = *a2;
  if (*a2) {
    uint64_t v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v3 = 0;
  }
  if (!v3) {
    return;
  }
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
  CFStringRef v6 = *(const void **)(v5 + 40);
  if (!v6 || !*(void *)(v5 + 48)) {
    return;
  }
  if (v2 && (CFRetain(*a2), (CFStringRef v6 = *(const void **)(v5 + 40)) == 0)) {
    int v7 = 0;
  }
  else {
    int v7 = _Block_copy(v6);
  }
  CFStringRef v8 = *(NSObject **)(v5 + 48);
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 1174405120;
  v12[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
  v12[3] = &__block_descriptor_tmp_181;
  if (v7)
  {
    aBlock = _Block_copy(v7);
    CFTypeRef cf = v2;
    if (!v2) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  aBlock = 0;
  CFTypeRef cf = v2;
  if (v2) {
LABEL_15:
  }
    CFRetain(v2);
LABEL_16:
  dispatch_async(v8, v12);
  if (cf) {
    CFRelease(cf);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v7) {
    _Block_release(v7);
  }
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8);
  int v10 = *(const void **)(v9 + 40);
  *(void *)(v9 + 40) = 0;
  if (v10) {
    _Block_release(v10);
  }
  CFDictionaryRef v11 = *(NSObject **)(v9 + 48);
  *(void *)(v9 + 48) = 0;
  if (v11) {
    dispatch_release(v11);
  }
}

void ___ZN5radio16ARICommandDriver18setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke_63(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  CFTypeRef v2 = *(const void **)(v1 + 40);
  if (!v2 || !*(void *)(v1 + 48)) {
    return;
  }
  uint64_t v3 = _Block_copy(v2);
  CFAllocatorRef v4 = v3;
  uint64_t v5 = *(NSObject **)(v1 + 48);
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 1174405120;
  v7[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
  v7[3] = &__block_descriptor_tmp_181;
  if (v3)
  {
    aBlock = _Block_copy(v3);
    CFTypeRef cf = 0;
    dispatch_async(v5, v7);
    CFTypeRef v6 = cf;
    if (!cf) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  aBlock = 0;
  CFTypeRef cf = 0;
  dispatch_async(v5, v7);
  CFTypeRef v6 = cf;
  if (cf) {
LABEL_7:
  }
    CFRelease(v6);
LABEL_8:
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v4) {
    _Block_release(v4);
  }
}

CFTypeRef __copy_helper_block_e8_40c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE56c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(void *a1, void *a2)
{
  CFAllocatorRef v4 = (void *)a2[5];
  if (v4) {
    CFAllocatorRef v4 = _Block_copy(v4);
  }
  uint64_t v5 = a2[6];
  a1[5] = v4;
  a1[6] = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  CFTypeRef result = (CFTypeRef)a2[7];
  a1[7] = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_40c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE56c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(void *a1)
{
  CFTypeRef v2 = (const void *)a1[7];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = a1[6];
  if (v3) {
    dispatch_release(v3);
  }
  CFAllocatorRef v4 = (const void *)a1[5];
  if (v4) {
    _Block_release(v4);
  }
}

void radio::ARICommandDriver::enableDumpLogsInd(radio::ARICommandDriver *this)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  uint64_t v1 = *((void *)this + 5);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    int v2 = 136315138;
    uint64_t v3 = "enableDumpLogsInd";
    _os_log_impl(&dword_235DB9000, v1, OS_LOG_TYPE_DEFAULT, "#I %s: not supported!", (uint8_t *)&v2, 0xCu);
  }
}

void radio::ARICommandDriver::disableDumpLogsInd(radio::ARICommandDriver *this)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  uint64_t v1 = *((void *)this + 5);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    int v2 = 136315138;
    uint64_t v3 = "disableDumpLogsInd";
    _os_log_impl(&dword_235DB9000, v1, OS_LOG_TYPE_DEFAULT, "#I %s: not supported!", (uint8_t *)&v2, 0xCu);
  }
}

void radio::ARICommandDriver::simTestCommand(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a1 + 72);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 80);
  CFTypeRef v6 = (uint64_t *)(a1 + 72);
  if (!v5 || (int v10 = std::__shared_weak_count::lock(v5)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  CFDictionaryRef v11 = v10;
  atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v11);
  }
  v14[0] = MEMORY[0x263EF8330];
  v14[1] = 1174405120;
  v14[2] = ___ZN5radio16ARICommandDriver14simTestCommandENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENSC_IK14__CFDictionaryEEEEE_block_invoke;
  v14[3] = &__block_descriptor_tmp_67_1;
  v14[4] = a1;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  int v12 = *(void **)a3;
  if (*(void *)a3) {
    int v12 = _Block_copy(v12);
  }
  CFDictionaryRef v13 = *(NSObject **)(a3 + 8);
  aBlock = v12;
  dispatch_object_t object = v13;
  if (v13) {
    dispatch_retain(v13);
  }
  uint64_t v18 = v7;
  int v19 = v11;
  atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(v6, (uint64_t)v14);
  if (v19) {
    std::__shared_weak_count::__release_weak(v19);
  }
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__shared_weak_count::__release_weak(v11);
}

void sub_235E33950(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN5radio16ARICommandDriver14simTestCommandENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENSC_IK14__CFDictionaryEEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  unint64_t v75 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)std::string __p = v3;
  long long v74 = v3;
  v72[2] = v3;
  v72[3] = v3;
  v72[0] = v3;
  v72[1] = v3;
  AriSdk::ARI_IBISimTestReq_SDK::ARI_IBISimTestReq_SDK((AriSdk::ARI_IBISimTestReq_SDK *)v72);
  if (*(char *)(a1 + 63) < 0)
  {
    unint64_t v4 = *(void *)(a1 + 48);
    if (v4 - 71 >= 0xFFFFFFFFFFFFFFBALL)
    {
LABEL_6:
      uint64_t v5 = operator new(4uLL);
      CFTypeRef v6 = (uint64_t *)(a1 + 40);
      _DWORD *v5 = 0;
      uint64_t v7 = __p[0];
      __p[0] = v5;
      if (v7) {
        operator delete(v7);
      }
      int SimSlotInfo = radio::CommandDriver::getSimSlotInfo();
      if (SimSlotInfo != 1)
      {
        if (SimSlotInfo != 2) {
          goto LABEL_13;
        }
        uint64_t v9 = operator new(4uLL);
        *uint64_t v9 = 1;
        int v10 = __p[0];
        __p[0] = v9;
        if (v10) {
          operator delete(v10);
        }
      }
      v4 -= 2;
LABEL_13:
      uint64_t v61 = v2;
      CFDictionaryRef v11 = operator new(1uLL);
      unsigned char *v11 = v4;
      CFDictionaryRef v13 = __p[1];
      __p[1] = v11;
      if (v13) {
        operator delete(v13);
      }
      if (v4)
      {
        uint64_t v14 = 0;
        unsigned int v15 = 0;
        while (1)
        {
          uint64_t v17 = a1 + 40;
          if (*(char *)(a1 + 63) < 0)
          {
            uint64_t v17 = *v6;
            int v19 = (unsigned char *)*((void *)&v74 + 1);
            uint64_t v18 = (unsigned char *)v74;
            unint64_t v20 = *((void *)&v74 + 1) - v74;
            if (*((void *)&v74 + 1) - (void)v74 >= 0x46uLL)
            {
LABEL_35:
              AriOsa::LogSrcInfo((uint64_t *)&block, (AriOsa *)"/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/ARI/ari_sdk_msg.h", "emplace_back", v12);
              p_block = &block;
              if (SHIBYTE(v64) < 0) {
                p_block = block;
              }
              Ari::Log((Ari *)8, (uint64_t)"(%s:%d) Array is full, cannot add new values", v28, p_block, 371);
              if (SHIBYTE(v64) < 0) {
                operator delete(block);
              }
              goto LABEL_19;
            }
          }
          else
          {
            int v19 = (unsigned char *)*((void *)&v74 + 1);
            uint64_t v18 = (unsigned char *)v74;
            unint64_t v20 = *((void *)&v74 + 1) - v74;
            if (*((void *)&v74 + 1) - (void)v74 >= 0x46uLL) {
              goto LABEL_35;
            }
          }
          char v21 = *(unsigned char *)(v17 + v14);
          if ((unint64_t)v19 >= v75) {
            break;
          }
          *int v19 = v21;
          uint64_t v16 = (uint64_t)(v19 + 1);
LABEL_18:
          *((void *)&v74 + 1) = v16;
LABEL_19:
          uint64_t v14 = ++v15;
          if (v4 <= v15) {
            goto LABEL_53;
          }
        }
        unint64_t v22 = v75 - (void)v18;
        if (2 * (v75 - (unint64_t)v18) <= v20 + 1) {
          uint64_t v23 = v20 + 1;
        }
        else {
          uint64_t v23 = 2 * v22;
        }
        if (v22 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v24 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v24 = v23;
        }
        long long v25 = (char *)operator new(v24);
        CFDictionaryRef v26 = &v25[v20];
        v25[v20] = v21;
        uint64_t v16 = (uint64_t)&v25[v20 + 1];
        if (v19 == v18)
        {
LABEL_51:
          *(void *)&long long v74 = v26;
          *((void *)&v74 + 1) = &v25[v20 + 1];
          unint64_t v75 = (unint64_t)&v25[v24];
          if (v19) {
            operator delete(v19);
          }
          goto LABEL_18;
        }
        if (v20 >= 8 && (unint64_t)(v18 - v25) >= 0x20)
        {
          if (v20 < 0x20)
          {
            unint64_t v27 = 0;
            goto LABEL_43;
          }
          unint64_t v27 = v20 & 0xFFFFFFFFFFFFFFE0;
          uint64_t v30 = &v25[v20 - 16];
          uint64_t v31 = (long long *)(v19 - 16);
          unint64_t v32 = v20 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v33 = *v31;
            *((_OWORD *)v30 - 1) = *(v31 - 1);
            *(_OWORD *)uint64_t v30 = v33;
            v30 -= 32;
            v31 -= 2;
            v32 -= 32;
          }
          while (v32);
          if (v20 == v27) {
            goto LABEL_50;
          }
          if ((v20 & 0x18) != 0)
          {
LABEL_43:
            v26 -= v20 & 0xFFFFFFFFFFFFFFF8;
            unint64_t v34 = &v25[&v19[-v27] - v18 - 8];
            CFDictionaryRef v35 = (uint64_t *)&v19[-v27 - 8];
            unint64_t v36 = v27 - (v20 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              uint64_t v37 = *v35--;
              *(void *)unint64_t v34 = v37;
              v34 -= 8;
              v36 += 8;
            }
            while (v36);
            v19 -= v20 & 0xFFFFFFFFFFFFFFF8;
            if (v20 == (v20 & 0xFFFFFFFFFFFFFFF8)) {
              goto LABEL_50;
            }
            goto LABEL_48;
          }
          v26 -= v27;
          v19 -= v27;
        }
LABEL_48:
        unint64_t v38 = v26 - 1;
        do
        {
          char v39 = *--v19;
          *v38-- = v39;
        }
        while (v19 != v18);
LABEL_50:
        int v19 = v18;
        CFDictionaryRef v26 = v25;
        goto LABEL_51;
      }
LABEL_53:
      uint64_t v40 = *(void *)(v61 + 312);
      uint64_t v41 = *(std::__shared_weak_count **)(a1 + 88);
      block = *(void **)(a1 + 80);
      uint64_t v63 = v41;
      if (v41) {
        atomic_fetch_add_explicit(&v41->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      dispatch_object_t v42 = *(void **)(a1 + 64);
      if (v42) {
        dispatch_object_t v42 = _Block_copy(v42);
      }
      v43 = *(NSObject **)(a1 + 72);
      v64 = (void (*)(uint64_t))v42;
      dispatch_object_t object = v43;
      if (v43) {
        dispatch_retain(v43);
      }
      if (*(char *)(a1 + 63) < 0)
      {
        std::string::__init_copy_ctor_external(&v66, *(const std::string::value_type **)(a1 + 40), *(void *)(a1 + 48));
      }
      else
      {
        *(_OWORD *)&v66.__r_.__value_.__l.__data_ = *(_OWORD *)v6;
        v66.__r_.__value_.__r.__words[2] = *(void *)(a1 + 56);
      }
      uint64_t v67 = v61;
      uint64_t v47 = (std::__shared_weak_count *)operator new(0x58uLL);
      v47->__shared_owners_ = 0;
      p_shared_owners = &v47->__shared_owners_;
      v47->__shared_weak_owners_ = 0;
      v47->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940818;
      uint64_t v49 = v63;
      v47[1].__vftable = (std::__shared_weak_count_vtbl *)block;
      v47[1].__shared_owners_ = (uint64_t)v49;
      if (v49) {
        atomic_fetch_add_explicit(&v49->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v50 = v64;
      if (v64) {
        unint64_t v50 = (void (*)(uint64_t))_Block_copy(v64);
      }
      uint64_t v51 = object;
      v47[1].__shared_weak_owners_ = (uint64_t)v50;
      v47[2].__vftable = (std::__shared_weak_count_vtbl *)v51;
      if (v51) {
        dispatch_retain(v51);
      }
      uint64_t v52 = (std::string *)&v47[2].__shared_owners_;
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v52, v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)&v52->__r_.__value_.__l.__data_ = *(_OWORD *)&v66.__r_.__value_.__l.__data_;
        v47[3].__vftable = (std::__shared_weak_count_vtbl *)v66.__r_.__value_.__r.__words[2];
      }
      v47[3].__shared_owners_ = v67;
      CFTypeRef v76 = (CFTypeRef)MEMORY[0x263EF8330];
      uint64_t v77 = 1174405120;
      v78 = ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver14simTestCommandENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENSF_IK14__CFDictionaryEEEEEEUb6_E4__19vEENSB_5blockIU13block_pointerFiPhjEEENS4_17integral_constantIiLi2EEEOT__block_invoke;
      v79 = &__block_descriptor_tmp_267;
      v80 = v47 + 1;
      v81 = v47;
      atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
      aBlock[0] = (const void *)MEMORY[0x263EF8330];
      aBlock[1] = (const void *)0x40000000;
      aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
      aBlock[3] = &unk_264C7DF90;
      aBlock[4] = &v76;
      v53 = _Block_copy(aBlock);
      v54 = v81;
      if (v81 && !atomic_fetch_add(&v81->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
        if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
        {
LABEL_79:
          if (__p[0]) {
            goto LABEL_84;
          }
LABEL_83:
          v55 = operator new(4uLL);
          _DWORD *v55 = 0;
          __p[0] = v55;
LABEL_84:
          unint64_t v69 = 0xAAAAAAAAAAAAAAAALL;
          *(void *)&long long v56 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v56 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v68[0] = v56;
          v68[1] = v56;
          long long v57 = *(std::__shared_weak_count **)(v40 + 16);
          CFTypeRef v76 = *(CFTypeRef *)(v40 + 8);
          if (v57)
          {
            uint64_t v77 = (uint64_t)std::__shared_weak_count::lock(v57);
            if (v77)
            {
              ice::SendMsgBaseProxy::SendMsgBaseProxy();
              v58 = (std::__shared_weak_count *)v77;
              if (v77 && !atomic_fetch_add((atomic_ullong *volatile)(v77 + 8), 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                std::__shared_weak_count::__release_weak(v58);
              }
              aBlock[0] = v53;
              ice::SendMsgBaseProxy::callback();
              if (aBlock[0]) {
                _Block_release(aBlock[0]);
              }
              MEMORY[0x237DF50B0](v68);
              if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v66.__r_.__value_.__l.__data_);
              }
              if (object) {
                dispatch_release(object);
              }
              if (v64) {
                _Block_release(v64);
              }
              if (v63) {
                std::__shared_weak_count::__release_weak(v63);
              }
              return MEMORY[0x237DF5330](v72);
            }
          }
          else
          {
            uint64_t v77 = 0;
          }
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
      }
      else if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
      {
        goto LABEL_79;
      }
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
      if (__p[0]) {
        goto LABEL_84;
      }
      goto LABEL_83;
    }
  }
  else if (*(unsigned __int8 *)(a1 + 63) - 71 > 0xFFFFFFB9)
  {
    unint64_t v4 = *(unsigned __int8 *)(a1 + 63);
    goto LABEL_6;
  }
  CFTypeRef v76 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  v70 = operator new(0x20uLL);
  long long v71 = xmmword_235E75070;
  strcpy((char *)v70, "Invalid SIM test command");
  CreateError();
  operator delete(v70);
  long long v44 = *(const void **)(a1 + 64);
  if (v44 && *(void *)(a1 + 72))
  {
    CFTypeRef v45 = v76;
    if (v76 && (CFRetain(v76), (long long v44 = *(const void **)(a1 + 64)) == 0)) {
      long long v46 = 0;
    }
    else {
      long long v46 = _Block_copy(v44);
    }
    long long v59 = *(NSObject **)(a1 + 72);
    block = (void *)MEMORY[0x263EF8330];
    uint64_t v63 = (std::__shared_weak_count *)1174405120;
    v64 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke_0;
    dispatch_object_t object = (dispatch_object_t)&__block_descriptor_tmp_191;
    if (v46)
    {
      v66.__r_.__value_.__r.__words[0] = (std::string::size_type)_Block_copy(v46);
      v66.__r_.__value_.__l.__size_ = (std::string::size_type)v45;
      if (!v45) {
        goto LABEL_105;
      }
    }
    else
    {
      v66.__r_.__value_.__r.__words[0] = 0;
      v66.__r_.__value_.__l.__size_ = (std::string::size_type)v45;
      if (!v45)
      {
LABEL_105:
        v66.__r_.__value_.__r.__words[2] = 0;
        dispatch_async(v59, &block);
        if (v66.__r_.__value_.__r.__words[2]) {
          CFRelease((CFTypeRef)v66.__r_.__value_.__r.__words[2]);
        }
        if (v66.__r_.__value_.__l.__size_) {
          CFRelease((CFTypeRef)v66.__r_.__value_.__l.__size_);
        }
        if (v66.__r_.__value_.__r.__words[0]) {
          _Block_release(v66.__r_.__value_.__l.__data_);
        }
        if (v46) {
          _Block_release(v46);
        }
        if (v45) {
          CFRelease(v45);
        }
        goto LABEL_115;
      }
    }
    CFRetain(v45);
    goto LABEL_105;
  }
LABEL_115:
  if (v76) {
    CFRelease(v76);
  }
  return MEMORY[0x237DF5330](v72);
}

void sub_235E34184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, std::__shared_weak_count *a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
}

uint64_t _ZZZN5radio16ARICommandDriver14simTestCommandENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENSC_IK14__CFDictionaryEEEEEEUb6_EN4__19D1Ev(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  uint64_t v2 = *(NSObject **)(a1 + 24);
  if (v2) {
    dispatch_release(v2);
  }
  long long v3 = *(const void **)(a1 + 16);
  if (v3) {
    _Block_release(v3);
  }
  unint64_t v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void __copy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c103_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEE80c46_ZTSNSt3__18weak_ptrIN5radio13CommandDriverEEE(void *a1, uint64_t a2)
{
  unint64_t v4 = (std::string *)(a1 + 5);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
    CFTypeRef v6 = *(void **)(a2 + 64);
    if (!v6) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  long long v5 = *(_OWORD *)(a2 + 40);
  v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 56);
  *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  CFTypeRef v6 = *(void **)(a2 + 64);
  if (v6) {
LABEL_5:
  }
    CFTypeRef v6 = _Block_copy(v6);
LABEL_6:
  uint64_t v7 = *(NSObject **)(a2 + 72);
  a1[8] = v6;
  a1[9] = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  uint64_t v8 = *(void *)(a2 + 88);
  a1[10] = *(void *)(a2 + 80);
  a1[11] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 16), 1uLL, memory_order_relaxed);
  }
}

void __destroy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c103_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEE80c46_ZTSNSt3__18weak_ptrIN5radio13CommandDriverEEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 88);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  long long v3 = *(NSObject **)(a1 + 72);
  if (v3) {
    dispatch_release(v3);
  }
  unint64_t v4 = *(const void **)(a1 + 64);
  if (v4) {
    _Block_release(v4);
  }
  if (*(char *)(a1 + 63) < 0)
  {
    long long v5 = *(void **)(a1 + 40);
    operator delete(v5);
  }
}

void radio::ARICommandDriver::getFirmwareNonce(void *a1, uint64_t a2)
{
  long long v3 = (std::__shared_weak_count *)a1[10];
  if (!v3 || (v5 = a1[9], (CFTypeRef v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v8 = *(const void **)a2;
    if (*(void *)a2) {
      goto LABEL_5;
    }
LABEL_15:
    uint64_t v9 = 0;
    int v10 = *(NSObject **)(a2 + 8);
    if (!v10) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v7);
  uint64_t v8 = *(const void **)a2;
  if (!*(void *)a2) {
    goto LABEL_15;
  }
LABEL_5:
  uint64_t v9 = _Block_copy(v8);
  int v10 = *(NSObject **)(a2 + 8);
  if (v10) {
LABEL_6:
  }
    dispatch_retain(v10);
LABEL_7:
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  CFDictionaryRef v11 = (std::__shared_weak_count *)a1[10];
  if (!v11 || (uint64_t v12 = a1[9], (v13 = std::__shared_weak_count::lock(v11)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v14 = v13;
  unsigned int v15 = operator new(0x28uLL);
  void *v15 = a1;
  v15[1] = v9;
  v15[2] = v10;
  v15[3] = v5;
  v15[4] = v7;
  uint64_t v16 = a1[11];
  atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v17 = operator new(0x18uLL);
  void *v17 = v15;
  v17[1] = v12;
  v17[2] = v14;
  dispatch_async_f(v16, v17, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::ARICommandDriver::getFirmwareNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>(radio::ARICommandDriver::getFirmwareNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::ARICommandDriver::getFirmwareNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0,dispatch_queue_s *::default_delete<radio::ARICommandDriver::getFirmwareNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }

  std::__shared_weak_count::__release_weak(v7);
}

void radio::ARICommandDriver::getRFSelfTestNonce(void *a1, uint64_t a2)
{
  long long v3 = (std::__shared_weak_count *)a1[10];
  if (!v3 || (v5 = a1[9], (CFTypeRef v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v8 = *(const void **)a2;
    if (*(void *)a2) {
      goto LABEL_5;
    }
LABEL_15:
    uint64_t v9 = 0;
    int v10 = *(NSObject **)(a2 + 8);
    if (!v10) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v7);
  uint64_t v8 = *(const void **)a2;
  if (!*(void *)a2) {
    goto LABEL_15;
  }
LABEL_5:
  uint64_t v9 = _Block_copy(v8);
  int v10 = *(NSObject **)(a2 + 8);
  if (v10) {
LABEL_6:
  }
    dispatch_retain(v10);
LABEL_7:
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  CFDictionaryRef v11 = (std::__shared_weak_count *)a1[10];
  if (!v11 || (uint64_t v12 = a1[9], (v13 = std::__shared_weak_count::lock(v11)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v14 = v13;
  unsigned int v15 = operator new(0x28uLL);
  void *v15 = a1;
  v15[1] = v9;
  v15[2] = v10;
  v15[3] = v5;
  v15[4] = v7;
  uint64_t v16 = a1[11];
  atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v17 = operator new(0x18uLL);
  void *v17 = v15;
  v17[1] = v12;
  v17[2] = v14;
  dispatch_async_f(v16, v17, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::ARICommandDriver::getRFSelfTestNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>(radio::ARICommandDriver::getRFSelfTestNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::ARICommandDriver::getRFSelfTestNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0,dispatch_queue_s *::default_delete<radio::ARICommandDriver::getRFSelfTestNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }

  std::__shared_weak_count::__release_weak(v7);
}

void radio::ARICommandDriver::setRFSelfTestTicket(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  unint64_t v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = "setRFSelfTestTicket";
    _os_log_impl(&dword_235DB9000, v4, OS_LOG_TYPE_DEFAULT, "#I %s: not supported!", (uint8_t *)&buf, 0xCu);
  }
  if (*(void *)a3 && *(void *)(a3 + 8))
  {
    char v10 = 13;
    strcpy((char *)__p, "Not supported");
    CreateError();
    if (*(void *)a3) {
      uint64_t v5 = _Block_copy(*(const void **)a3);
    }
    else {
      uint64_t v5 = 0;
    }
    CFTypeRef v6 = *(NSObject **)(a3 + 8);
    *(void *)&long long buf = MEMORY[0x263EF8330];
    *((void *)&buf + 1) = 1174405120;
    CFDictionaryRef v13 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
    uint64_t v14 = &__block_descriptor_tmp_181;
    if (v5)
    {
      uint64_t v7 = _Block_copy(v5);
      CFTypeRef v8 = cf;
      aBlock = v7;
      CFTypeRef v16 = cf;
      if (!cf) {
        goto LABEL_13;
      }
    }
    else
    {
      CFTypeRef v8 = cf;
      aBlock = 0;
      CFTypeRef v16 = cf;
      if (!cf)
      {
LABEL_13:
        dispatch_async(v6, &buf);
        if (v16) {
          CFRelease(v16);
        }
        if (aBlock) {
          _Block_release(aBlock);
        }
        if (v5) {
          _Block_release(v5);
        }
        if (cf) {
          CFRelease(cf);
        }
        if (v10 < 0) {
          operator delete(__p[0]);
        }
        return;
      }
    }
    CFRetain(v8);
    goto LABEL_13;
  }
}

void sub_235E3496C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void radio::ARICommandDriver::detachRequest(void *a1, int a2, uint64_t a3)
{
  unint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (!v4 || (v7 = a1[9], (CFTypeRef v8 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v9 = v8;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  std::string __p = (void *)0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v26[2] = v10;
  v26[3] = v10;
  v26[0] = v10;
  v26[1] = v10;
  AriSdk::ARI_IBINetDetachReq_SDK::ARI_IBINetDetachReq_SDK((AriSdk::ARI_IBINetDetachReq_SDK *)v26);
  CFDictionaryRef v11 = operator new(4uLL);
  _DWORD *v11 = a2;
  uint64_t v12 = __p;
  std::string __p = v11;
  if (v12) {
    operator delete(v12);
  }
  uint64_t v13 = a1[39];
  if (!*(void *)a3)
  {
    uint64_t v14 = 0;
    unsigned int v15 = *(NSObject **)(a3 + 8);
    if (!v15) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  uint64_t v14 = (std::__shared_weak_count_vtbl *)_Block_copy(*(const void **)a3);
  unsigned int v15 = *(NSObject **)(a3 + 8);
  if (v15) {
LABEL_9:
  }
    dispatch_retain(v15);
LABEL_10:
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  CFTypeRef v16 = (std::__shared_weak_count *)operator new(0x38uLL);
  *(_OWORD *)&v16->__shared_owners_ = 0u;
  p_shared_owners = &v16->__shared_owners_;
  v16->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E9409C8;
  v16[1].__vftable = v14;
  v16[1].__shared_owners_ = (uint64_t)v15;
  v16[1].__shared_weak_owners_ = v7;
  v16[2].__vftable = (std::__shared_weak_count_vtbl *)v9;
  uint64_t v28 = MEMORY[0x263EF8330];
  uint64_t v29 = 1174405120;
  uint64_t v30 = ___ZN3ice6detail12wrapCallbackIZN5radio16ARICommandDriver13detachRequestEhN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEE3__0vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  uint64_t v31 = &__block_descriptor_tmp_279;
  unint64_t v32 = v16 + 1;
  long long v33 = v16;
  atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlock[0] = (const void *)MEMORY[0x263EF8330];
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
  aBlock[3] = &unk_264C7DF90;
  aBlock[4] = &v28;
  uint64_t v18 = _Block_copy(aBlock);
  int v19 = v33;
  if (!v33 || atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_13;
    }
LABEL_18:
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    if (__p) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
  std::__shared_weak_count::__release_weak(v19);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_18;
  }
LABEL_13:
  if (__p) {
    goto LABEL_20;
  }
LABEL_19:
  unint64_t v20 = operator new(4uLL);
  *unint64_t v20 = 0;
  std::string __p = v20;
LABEL_20:
  unint64_t v25 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v21 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v24[0] = v21;
  v24[1] = v21;
  unint64_t v22 = *(std::__shared_weak_count **)(v13 + 16);
  uint64_t v28 = *(void *)(v13 + 8);
  if (!v22)
  {
    uint64_t v29 = 0;
LABEL_30:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v29 = (uint64_t)std::__shared_weak_count::lock(v22);
  if (!v29) {
    goto LABEL_30;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  uint64_t v23 = (std::__shared_weak_count *)v29;
  if (v29 && !atomic_fetch_add((atomic_ullong *volatile)(v29 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  aBlock[0] = v18;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0]) {
    _Block_release(aBlock[0]);
  }
  MEMORY[0x237DF50B0](v24);
  MEMORY[0x237DF54E0](v26);
  std::__shared_weak_count::__release_weak(v9);
}

void sub_235E34D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  unint64_t v22 = *(const void **)(v20 - 104);
  if (v22) {
    _Block_release(v22);
  }
  MEMORY[0x237DF50B0](&a13);
  radio::ARICommandDriver::detachRequest(unsigned char,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::~$_0((uint64_t)&a9);
  MEMORY[0x237DF54E0](&a19);
  std::__shared_weak_count::__release_weak(v19);
  _Unwind_Resume(a1);
}

uint64_t radio::ARICommandDriver::detachRequest(unsigned char,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::~$_0(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  long long v3 = *(NSObject **)(a1 + 8);
  if (v3) {
    dispatch_release(v3);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void radio::ARICommandDriver::prepareRFSelfTest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  unint64_t v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    LODWORD(block) = 136315138;
    *(void *)((char *)&block + 4) = "prepareRFSelfTest";
    _os_log_error_impl(&dword_235DB9000, v4, OS_LOG_TYPE_ERROR, "%s: not supported!", (uint8_t *)&block, 0xCu);
    if (!*(void *)a3) {
      return;
    }
  }
  else if (!*(void *)a3)
  {
    return;
  }
  if (*(void *)(a3 + 8))
  {
    char v10 = 13;
    strcpy((char *)__p, "Not supported");
    CreateError();
    if (*(void *)a3) {
      uint64_t v5 = _Block_copy(*(const void **)a3);
    }
    else {
      uint64_t v5 = 0;
    }
    CFTypeRef v6 = *(NSObject **)(a3 + 8);
    *(void *)&long long block = MEMORY[0x263EF8330];
    *((void *)&block + 1) = 1174405120;
    uint64_t v13 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
    uint64_t v14 = &__block_descriptor_tmp_181;
    if (v5)
    {
      uint64_t v7 = _Block_copy(v5);
      CFTypeRef v8 = cf;
      aBlock = v7;
      CFTypeRef v16 = cf;
      if (!cf) {
        goto LABEL_12;
      }
    }
    else
    {
      CFTypeRef v8 = cf;
      aBlock = 0;
      CFTypeRef v16 = cf;
      if (!cf)
      {
LABEL_12:
        dispatch_async(v6, &block);
        if (v16) {
          CFRelease(v16);
        }
        if (aBlock) {
          _Block_release(aBlock);
        }
        if (v5) {
          _Block_release(v5);
        }
        if (cf) {
          CFRelease(cf);
        }
        if (v10 < 0) {
          operator delete(__p[0]);
        }
        return;
      }
    }
    CFRetain(v8);
    goto LABEL_12;
  }
}

void sub_235E35040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void radio::ARICommandDriver::sendRFSelfTestReq(void *a1, const void **a2, uint64_t a3)
{
  unint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (!v4 || (v7 = a1[9], (CFTypeRef v8 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v9 = v8;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    char v10 = *a2;
    if (!v10) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  char v10 = *a2;
  if (v10) {
LABEL_7:
  }
    CFRetain(v10);
LABEL_8:
  if (!*(void *)a3)
  {
    CFDictionaryRef v11 = 0;
    uint64_t v12 = *(NSObject **)(a3 + 8);
    if (!v12) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  CFDictionaryRef v11 = _Block_copy(*(const void **)a3);
  uint64_t v12 = *(NSObject **)(a3 + 8);
  if (v12) {
LABEL_10:
  }
    dispatch_retain(v12);
LABEL_11:
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v13 = (std::__shared_weak_count *)a1[10];
  if (!v13 || (uint64_t v14 = a1[9], (v15 = std::__shared_weak_count::lock(v13)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  CFTypeRef v16 = v15;
  uint64_t v17 = operator new(0x30uLL);
  void *v17 = a1;
  v17[1] = v10;
  v17[2] = v11;
  v17[3] = v12;
  v17[4] = v7;
  v17[5] = v9;
  uint64_t v18 = a1[11];
  atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  int v19 = operator new(0x18uLL);
  *int v19 = v17;
  v19[1] = v14;
  void v19[2] = v16;
  dispatch_async_f(v18, v19, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::ARICommandDriver::sendRFSelfTestReq(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0>(radio::ARICommandDriver::sendRFSelfTestReq(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::ARICommandDriver::sendRFSelfTestReq(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0,dispatch_queue_s *::default_delete<radio::ARICommandDriver::sendRFSelfTestReq(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }

  std::__shared_weak_count::__release_weak(v9);
}

void radio::ARICommandDriver::getPkHash(void *a1, uint64_t a2)
{
  long long v3 = (std::__shared_weak_count *)a1[10];
  if (!v3 || (v5 = a1[9], (CFTypeRef v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    CFTypeRef v8 = *(const void **)a2;
    if (*(void *)a2) {
      goto LABEL_5;
    }
LABEL_15:
    uint64_t v9 = 0;
    char v10 = *(NSObject **)(a2 + 8);
    if (!v10) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v7);
  CFTypeRef v8 = *(const void **)a2;
  if (!*(void *)a2) {
    goto LABEL_15;
  }
LABEL_5:
  uint64_t v9 = _Block_copy(v8);
  char v10 = *(NSObject **)(a2 + 8);
  if (v10) {
LABEL_6:
  }
    dispatch_retain(v10);
LABEL_7:
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  CFDictionaryRef v11 = (std::__shared_weak_count *)a1[10];
  if (!v11 || (uint64_t v12 = a1[9], (v13 = std::__shared_weak_count::lock(v11)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v14 = v13;
  unsigned int v15 = operator new(0x28uLL);
  void *v15 = a1;
  v15[1] = v9;
  v15[2] = v10;
  v15[3] = v5;
  v15[4] = v7;
  CFTypeRef v16 = a1[11];
  atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v17 = operator new(0x18uLL);
  void *v17 = v15;
  v17[1] = v12;
  v17[2] = v14;
  dispatch_async_f(v16, v17, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::ARICommandDriver::getPkHash(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>(radio::ARICommandDriver::getPkHash(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::ARICommandDriver::getPkHash(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0,dispatch_queue_s *::default_delete<radio::ARICommandDriver::getPkHash(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }

  std::__shared_weak_count::__release_weak(v7);
}

void radio::ARICommandDriver::getPersParams(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  unint64_t v4 = operator new(0x20uLL);
  std::string __p = v4;
  long long v12 = xmmword_235E76320;
  strcpy((char *)v4, "Unsupported cmd: getPersParams");
  uint64_t v5 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    LODWORD(block) = 136315138;
    *(void *)((char *)&block + 4) = v4;
    _os_log_error_impl(&dword_235DB9000, v5, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&block, 0xCu);
    if (!*(void *)a2) {
      goto LABEL_24;
    }
  }
  else if (!*(void *)a2)
  {
    goto LABEL_24;
  }
  if (!*(void *)(a2 + 8)) {
    goto LABEL_24;
  }
  if (v12 >= 0) {
    p_p = (const char *)&__p;
  }
  else {
    p_p = (const char *)__p;
  }
  xpc_object_t v7 = xpc_string_create(p_p);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_object_t v8 = xpc_null_create();
  if (*(void *)a2) {
    uint64_t v9 = _Block_copy(*(const void **)a2);
  }
  else {
    uint64_t v9 = 0;
  }
  char v10 = *(NSObject **)(a2 + 8);
  *(void *)&long long block = MEMORY[0x263EF8330];
  *((void *)&block + 1) = 1174405120;
  uint64_t v14 = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke;
  unsigned int v15 = &__block_descriptor_tmp_270;
  if (v9)
  {
    aBlock = _Block_copy(v9);
    xpc_object_t v17 = v7;
    if (v7) {
      goto LABEL_14;
    }
LABEL_17:
    xpc_object_t v17 = xpc_null_create();
    xpc_object_t object = v8;
    if (v8) {
      goto LABEL_15;
    }
LABEL_18:
    xpc_object_t object = xpc_null_create();
    goto LABEL_19;
  }
  aBlock = 0;
  xpc_object_t v17 = v7;
  if (!v7) {
    goto LABEL_17;
  }
LABEL_14:
  xpc_retain(v7);
  xpc_object_t object = v8;
  if (!v8) {
    goto LABEL_18;
  }
LABEL_15:
  xpc_retain(v8);
LABEL_19:
  dispatch_async(v10, &block);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v17);
  xpc_object_t v17 = 0;
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v9) {
    _Block_release(v9);
  }
  xpc_release(v8);
  xpc_release(v7);
LABEL_24:
  if (SHIBYTE(v12) < 0) {
    operator delete(__p);
  }
}

void sub_235E35650(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void radio::ARICommandDriver::getChipID_sync(std::__shared_weak_count_vtbl *a1, xpc_object_t *a2, uint64_t a3)
{
  unint64_t v4 = (std::__shared_weak_count *)a1[2].~__shared_weak_count;
  if (!v4
    || (on_zero_shared_weak = (std::__shared_weak_count_vtbl *)a1[1].__on_zero_shared_weak,
        (xpc_object_t v8 = std::__shared_weak_count::lock(v4)) == 0))
  {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v9 = v8;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v25[2] = v10;
  v25[3] = v10;
  v25[0] = v10;
  v25[1] = v10;
  AriSdk::ARI_CsiSecGetChipIdReq_SDK::ARI_CsiSecGetChipIdReq_SDK((AriSdk::ARI_CsiSecGetChipIdReq_SDK *)v25);
  CFDictionaryRef v11 = a1[7].__on_zero_shared_weak;
  if (*(void *)a3)
  {
    long long v12 = _Block_copy(*(const void **)a3);
    uint64_t v13 = *(NSObject **)(a3 + 8);
    if (!v13) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  long long v12 = 0;
  uint64_t v13 = *(NSObject **)(a3 + 8);
  if (v13) {
LABEL_7:
  }
    dispatch_retain(v13);
LABEL_8:
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v14 = *a2;
  if (*a2) {
    xpc_retain(v14);
  }
  else {
    xpc_object_t v14 = xpc_null_create();
  }
  unsigned int v15 = (std::__shared_weak_count *)operator new(0x48uLL);
  *(_OWORD *)&v15->__shared_owners_ = 0u;
  p_shared_owners = &v15->__shared_owners_;
  v15->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940B78;
  v15[1].__vftable = a1;
  v15[1].__shared_owners_ = (uint64_t)v12;
  v15[1].__shared_weak_owners_ = (uint64_t)v13;
  v15[2].__vftable = on_zero_shared_weak;
  v15[2].__shared_owners_ = (uint64_t)v9;
  v15[2].__shared_weak_owners_ = (uint64_t)v14;
  xpc_object_t object = xpc_null_create();
  uint64_t v26 = MEMORY[0x263EF8330];
  uint64_t v27 = 1174405120;
  uint64_t v28 = ___ZN3ice6detail12wrapCallbackIZN5radio16ARICommandDriver14getChipID_syncEN3xpc4dictEN8dispatch8callbackIU13block_pointerFvNS4_6objectES8_EEEE3__0vEENS6_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  uint64_t v29 = &__block_descriptor_tmp_292;
  uint64_t v30 = v15 + 1;
  uint64_t v31 = v15;
  atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlock[0] = (const void *)MEMORY[0x263EF8330];
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
  aBlock[3] = &unk_264C7DF90;
  aBlock[4] = &v26;
  xpc_object_t v17 = _Block_copy(aBlock);
  uint64_t v18 = v31;
  if (!v31 || atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_16:
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
LABEL_17:
  *(void *)&long long v19 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v23[0] = v19;
  v23[1] = v19;
  unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v20 = (std::__shared_weak_count *)*((void *)v11 + 2);
  uint64_t v26 = *((void *)v11 + 1);
  if (!v20)
  {
    uint64_t v27 = 0;
LABEL_29:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v27 = (uint64_t)std::__shared_weak_count::lock(v20);
  if (!v27) {
    goto LABEL_29;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  long long v21 = (std::__shared_weak_count *)v27;
  if (v27 && !atomic_fetch_add((atomic_ullong *volatile)(v27 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  aBlock[0] = v17;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0]) {
    _Block_release(aBlock[0]);
  }
  MEMORY[0x237DF50B0](v23);
  xpc_release(object);
  MEMORY[0x237DF57B0](v25);
  std::__shared_weak_count::__release_weak(v9);
}

void sub_235E35A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  unint64_t v24 = *(const void **)(v22 - 128);
  if (v24) {
    _Block_release(v24);
  }
  MEMORY[0x237DF50B0](&a15);
  radio::ARICommandDriver::getChipID_sync(xpc::dict,dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::~$_0((uint64_t)&a9);
  MEMORY[0x237DF57B0](&a21);
  std::__shared_weak_count::__release_weak(v21);
  _Unwind_Resume(a1);
}

uint64_t radio::ARICommandDriver::getChipID_sync(xpc::dict,dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::~$_0(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(void *)(a1 + 40) = 0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  long long v3 = *(NSObject **)(a1 + 16);
  if (v3) {
    dispatch_release(v3);
  }
  unint64_t v4 = *(const void **)(a1 + 8);
  if (v4) {
    _Block_release(v4);
  }
  return a1;
}

void radio::ARICommandDriver::getScrtPubK_sync(std::__shared_weak_count_vtbl *a1, xpc_object_t *a2, uint64_t a3)
{
  unint64_t v4 = (std::__shared_weak_count *)a1[2].~__shared_weak_count;
  if (!v4
    || (on_zero_shared_weak = (std::__shared_weak_count_vtbl *)a1[1].__on_zero_shared_weak,
        (xpc_object_t v8 = std::__shared_weak_count::lock(v4)) == 0))
  {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v9 = v8;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v25[2] = v10;
  v25[3] = v10;
  v25[0] = v10;
  v25[1] = v10;
  AriSdk::ARI_CsiSecReadSikPKeyReq_SDK::ARI_CsiSecReadSikPKeyReq_SDK((AriSdk::ARI_CsiSecReadSikPKeyReq_SDK *)v25);
  CFDictionaryRef v11 = a1[7].__on_zero_shared_weak;
  if (*(void *)a3)
  {
    long long v12 = _Block_copy(*(const void **)a3);
    uint64_t v13 = *(NSObject **)(a3 + 8);
    if (!v13) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  long long v12 = 0;
  uint64_t v13 = *(NSObject **)(a3 + 8);
  if (v13) {
LABEL_7:
  }
    dispatch_retain(v13);
LABEL_8:
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v14 = *a2;
  if (*a2) {
    xpc_retain(v14);
  }
  else {
    xpc_object_t v14 = xpc_null_create();
  }
  unsigned int v15 = (std::__shared_weak_count *)operator new(0x48uLL);
  *(_OWORD *)&v15->__shared_owners_ = 0u;
  p_shared_owners = &v15->__shared_owners_;
  v15->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940BF8;
  v15[1].__vftable = a1;
  v15[1].__shared_owners_ = (uint64_t)v12;
  v15[1].__shared_weak_owners_ = (uint64_t)v13;
  v15[2].__vftable = on_zero_shared_weak;
  v15[2].__shared_owners_ = (uint64_t)v9;
  v15[2].__shared_weak_owners_ = (uint64_t)v14;
  xpc_object_t object = xpc_null_create();
  uint64_t v26 = MEMORY[0x263EF8330];
  uint64_t v27 = 1174405120;
  uint64_t v28 = ___ZN3ice6detail12wrapCallbackIZN5radio16ARICommandDriver16getScrtPubK_syncEN3xpc4dictEN8dispatch8callbackIU13block_pointerFvNS4_6objectES8_EEEE3__0vEENS6_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  uint64_t v29 = &__block_descriptor_tmp_296;
  uint64_t v30 = v15 + 1;
  uint64_t v31 = v15;
  atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlock[0] = (const void *)MEMORY[0x263EF8330];
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
  aBlock[3] = &unk_264C7DF90;
  aBlock[4] = &v26;
  xpc_object_t v17 = _Block_copy(aBlock);
  uint64_t v18 = v31;
  if (!v31 || atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_16:
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
LABEL_17:
  *(void *)&long long v19 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v23[0] = v19;
  v23[1] = v19;
  unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v20 = (std::__shared_weak_count *)*((void *)v11 + 2);
  uint64_t v26 = *((void *)v11 + 1);
  if (!v20)
  {
    uint64_t v27 = 0;
LABEL_29:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v27 = (uint64_t)std::__shared_weak_count::lock(v20);
  if (!v27) {
    goto LABEL_29;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  long long v21 = (std::__shared_weak_count *)v27;
  if (v27 && !atomic_fetch_add((atomic_ullong *volatile)(v27 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  aBlock[0] = v17;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0]) {
    _Block_release(aBlock[0]);
  }
  MEMORY[0x237DF50B0](v23);
  xpc_release(object);
  MEMORY[0x237DF5C10](v25);
  std::__shared_weak_count::__release_weak(v9);
}

void sub_235E35F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  unint64_t v24 = *(const void **)(v22 - 128);
  if (v24) {
    _Block_release(v24);
  }
  MEMORY[0x237DF50B0](&a15);
  radio::ARICommandDriver::getScrtPubK_sync(xpc::dict,dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::~$_0((uint64_t)&a9);
  MEMORY[0x237DF5C10](&a21);
  std::__shared_weak_count::__release_weak(v21);
  _Unwind_Resume(a1);
}

uint64_t radio::ARICommandDriver::getScrtPubK_sync(xpc::dict,dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::~$_0(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(void *)(a1 + 40) = 0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  long long v3 = *(NSObject **)(a1 + 16);
  if (v3) {
    dispatch_release(v3);
  }
  unint64_t v4 = *(const void **)(a1 + 8);
  if (v4) {
    _Block_release(v4);
  }
  return a1;
}

void radio::ARICommandDriver::getFirmwareInfo(void *a1, uint64_t a2)
{
  long long v3 = (std::__shared_weak_count *)a1[10];
  if (!v3 || (v5 = a1[9], (CFTypeRef v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v7 = v6;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    xpc_object_t v8 = *(const void **)a2;
    if (*(void *)a2) {
      goto LABEL_5;
    }
LABEL_15:
    uint64_t v9 = 0;
    long long v10 = *(NSObject **)(a2 + 8);
    if (!v10) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v7);
  xpc_object_t v8 = *(const void **)a2;
  if (!*(void *)a2) {
    goto LABEL_15;
  }
LABEL_5:
  uint64_t v9 = _Block_copy(v8);
  long long v10 = *(NSObject **)(a2 + 8);
  if (v10) {
LABEL_6:
  }
    dispatch_retain(v10);
LABEL_7:
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  CFDictionaryRef v11 = (std::__shared_weak_count *)a1[10];
  if (!v11 || (uint64_t v12 = a1[9], (v13 = std::__shared_weak_count::lock(v11)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v14 = v13;
  unsigned int v15 = operator new(0x28uLL);
  void *v15 = a1;
  v15[1] = v9;
  v15[2] = v10;
  v15[3] = v5;
  v15[4] = v7;
  CFTypeRef v16 = a1[11];
  atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v17 = operator new(0x18uLL);
  void *v17 = v15;
  v17[1] = v12;
  v17[2] = v14;
  dispatch_async_f(v16, v17, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::ARICommandDriver::getFirmwareInfo(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>(radio::ARICommandDriver::getFirmwareInfo(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::ARICommandDriver::getFirmwareInfo(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0,dispatch_queue_s *::default_delete<radio::ARICommandDriver::getFirmwareInfo(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }

  std::__shared_weak_count::__release_weak(v7);
}

void radio::ARICommandDriver::getManifestStatus(void *a1, uint64_t a2)
{
  long long v3 = (std::__shared_weak_count *)a1[10];
  if (!v3 || (v5 = a1[9], (CFTypeRef v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v7 = v6;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    xpc_object_t v8 = *(const void **)a2;
    if (*(void *)a2) {
      goto LABEL_5;
    }
LABEL_15:
    uint64_t v9 = 0;
    long long v10 = *(NSObject **)(a2 + 8);
    if (!v10) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v7);
  xpc_object_t v8 = *(const void **)a2;
  if (!*(void *)a2) {
    goto LABEL_15;
  }
LABEL_5:
  uint64_t v9 = _Block_copy(v8);
  long long v10 = *(NSObject **)(a2 + 8);
  if (v10) {
LABEL_6:
  }
    dispatch_retain(v10);
LABEL_7:
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  CFDictionaryRef v11 = (std::__shared_weak_count *)a1[10];
  if (!v11 || (uint64_t v12 = a1[9], (v13 = std::__shared_weak_count::lock(v11)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v14 = v13;
  unsigned int v15 = operator new(0x28uLL);
  void *v15 = a1;
  v15[1] = v9;
  v15[2] = v10;
  v15[3] = v5;
  v15[4] = v7;
  CFTypeRef v16 = a1[11];
  atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v17 = operator new(0x18uLL);
  void *v17 = v15;
  v17[1] = v12;
  v17[2] = v14;
  dispatch_async_f(v16, v17, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::ARICommandDriver::getManifestStatus(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>(radio::ARICommandDriver::getManifestStatus(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::ARICommandDriver::getManifestStatus(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0,dispatch_queue_s *::default_delete<radio::ARICommandDriver::getManifestStatus(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }

  std::__shared_weak_count::__release_weak(v7);
}

void radio::ARICommandDriver::getManifest(uint64_t a1, uint64_t a2)
{
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN5radio16ARICommandDriver11getManifestEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_88;
  aBlock[4] = a1;
  unint64_t v4 = *(void **)a2;
  if (*(void *)a2) {
    unint64_t v4 = _Block_copy(v4);
  }
  uint64_t v5 = *(NSObject **)(a2 + 8);
  uint64_t v9 = v4;
  dispatch_object_t object = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  CFTypeRef v6 = _Block_copy(aBlock);
  xpc_object_t v7 = *(NSObject **)(a1 + 88);
  if (v7) {
    dispatch_retain(*(dispatch_object_t *)(a1 + 88));
  }
  v11[0] = v6;
  v11[1] = v7;
  radio::ARICommandDriver::getFirmwareInfo((void *)a1, (uint64_t)v11);
  if (v7) {
    dispatch_release(v7);
  }
  if (v6) {
    _Block_release(v6);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v9) {
    _Block_release(v9);
  }
}

void sub_235E364B0(_Unwind_Exception *a1)
{
  dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>::~callback(v2 - 48);
  dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>::~callback(v1);
  _Unwind_Resume(a1);
}

void ___ZN5radio16ARICommandDriver11getManifestEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEE_block_invoke(void *a1, void *a2, void *a3)
{
  uint64_t v103 = *MEMORY[0x263EF8340];
  uint64_t v6 = a1[4];
  if (MEMORY[0x237DF76E0](*a2) != MEMORY[0x263EF8758])
  {
    xpc_object_t v7 = *(NSObject **)(v6 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      LOWORD(block.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_235DB9000, v7, OS_LOG_TYPE_ERROR, "Failed to get serial number", (uint8_t *)&block, 2u);
      xpc_object_t v8 = (xpc_object_t)*a2;
      if (v8) {
        goto LABEL_4;
      }
    }
    else
    {
      xpc_object_t v8 = (xpc_object_t)*a2;
      if (v8)
      {
LABEL_4:
        xpc_retain(v8);
        goto LABEL_62;
      }
    }
    xpc_object_t v8 = xpc_null_create();
LABEL_62:
    xpc_object_t v40 = xpc_null_create();
    uint64_t v41 = (const void *)a1[5];
    if (v41) {
      dispatch_object_t v42 = _Block_copy(v41);
    }
    else {
      dispatch_object_t v42 = 0;
    }
    v43 = a1[6];
    block.__r_.__value_.__r.__words[0] = MEMORY[0x263EF8330];
    block.__r_.__value_.__l.__size_ = 1174405120;
    block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke;
    v99 = &__block_descriptor_tmp_270;
    if (v42)
    {
      v100 = _Block_copy(v42);
      xpc_object_t v101 = v8;
      if (v8) {
        goto LABEL_67;
      }
    }
    else
    {
      v100 = 0;
      xpc_object_t v101 = v8;
      if (v8)
      {
LABEL_67:
        xpc_retain(v8);
        xpc_object_t v102 = v40;
        if (v40)
        {
LABEL_68:
          xpc_retain(v40);
LABEL_72:
          dispatch_async(v43, &block);
          xpc_release(v102);
          xpc_object_t v102 = 0;
          xpc_release(v101);
          xpc_object_t v101 = 0;
          if (v100) {
            _Block_release(v100);
          }
          if (v42) {
            _Block_release(v42);
          }
          xpc_release(v40);
          xpc_release(v8);
          return;
        }
LABEL_71:
        xpc_object_t v102 = xpc_null_create();
        goto LABEL_72;
      }
    }
    xpc_object_t v101 = xpc_null_create();
    xpc_object_t v102 = v40;
    if (v40) {
      goto LABEL_68;
    }
    goto LABEL_71;
  }
  xpc_object_t v9 = (xpc_object_t)*a3;
  if (*a3 && MEMORY[0x237DF76E0](*a3) == MEMORY[0x263EF8708]) {
    xpc_retain(v9);
  }
  else {
    xpc_object_t v9 = xpc_null_create();
  }
  memset(&object[3], 170, 24);
  xpc_object_t value = xpc_dictionary_get_value(v9, (const char *)*MEMORY[0x263F8B850]);
  object[0] = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object[0] = xpc_null_create();
  }
  memset(&block, 0, sizeof(block));
  xpc::dyn_cast_or_default();
  xpc_release(object[0]);
  memset(object, 170, 24);
  CFDictionaryRef v11 = object;
  ctu::hex((ctu *)object[3], (const void *)((char *)object[4] - (char *)object[3]));
  char v12 = HIBYTE(object[2]);
  uint64_t v13 = (xpc_object_t *)object[0];
  if (SHIBYTE(object[2]) >= 0) {
    xpc_object_t v14 = (xpc_object_t *)((char *)object + HIBYTE(object[2]));
  }
  else {
    xpc_object_t v14 = (xpc_object_t *)((char *)object[0] + (unint64_t)object[1]);
  }
  if (SHIBYTE(object[2]) < 0) {
    CFDictionaryRef v11 = (xpc_object_t *)object[0];
  }
  if (v11 != v14)
  {
    do
    {
      *(unsigned char *)CFDictionaryRef v11 = __toupper(*(char *)v11);
      CFDictionaryRef v11 = (xpc_object_t *)((char *)v11 + 1);
    }
    while (v11 != v14);
    char v12 = HIBYTE(object[2]);
    uint64_t v13 = (xpc_object_t *)object[0];
  }
  CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  if (v12 >= 0) {
    CFTypeRef v16 = object;
  }
  else {
    CFTypeRef v16 = v13;
  }
  CFStringRef v17 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], (const char *)v16, 0x600u);
  v95 = 0;
  CFTypeRef v96 = v17;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v15, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  long long v19 = Mutable;
  if (!Mutable
    || (v95 = Mutable,
        !ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get))
  {
    p_p = (void **)operator new(0x38uLL);
    std::string __p = p_p;
    long long __p_8 = xmmword_235E75000;
    strcpy((char *)p_p, "Failed to create dictionary for PROV FDR options");
    unint64_t v24 = *(NSObject **)(v6 + 40);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      LODWORD(block.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)block.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
      _os_log_error_impl(&dword_235DB9000, v24, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&block, 0xCu);
      unint64_t v25 = (const void **)(a1 + 5);
      if (SHIBYTE(__p_8) < 0) {
        p_p = __p;
      }
      else {
        p_p = (void **)&__p;
      }
    }
    else
    {
      unint64_t v25 = (const void **)(a1 + 5);
    }
    xpc_object_t v26 = xpc_string_create((const char *)p_p);
    if (!v26) {
      xpc_object_t v26 = xpc_null_create();
    }
    xpc_object_t v27 = xpc_null_create();
    if (*v25) {
      uint64_t v28 = _Block_copy(*v25);
    }
    else {
      uint64_t v28 = 0;
    }
    char v39 = a1[6];
    block.__r_.__value_.__r.__words[0] = MEMORY[0x263EF8330];
    block.__r_.__value_.__l.__size_ = 1174405120;
    block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke;
    v99 = &__block_descriptor_tmp_270;
    if (v28)
    {
      v100 = _Block_copy(v28);
      xpc_object_t v101 = v26;
      if (v26) {
        goto LABEL_49;
      }
    }
    else
    {
      v100 = 0;
      xpc_object_t v101 = v26;
      if (v26)
      {
LABEL_49:
        xpc_retain(v26);
        xpc_object_t v102 = v27;
        if (v27)
        {
LABEL_50:
          xpc_retain(v27);
LABEL_54:
          dispatch_async(v39, &block);
          xpc_release(v102);
          xpc_object_t v102 = 0;
          xpc_release(v101);
          xpc_object_t v101 = 0;
          if (v100) {
            _Block_release(v100);
          }
          if (v28) {
            _Block_release(v28);
          }
          xpc_release(v27);
          xpc_release(v26);
          if (SHIBYTE(__p_8) < 0) {
            operator delete(__p);
          }
          goto LABEL_199;
        }
LABEL_53:
        xpc_object_t v102 = xpc_null_create();
        goto LABEL_54;
      }
    }
    xpc_object_t v101 = xpc_null_create();
    xpc_object_t v102 = v27;
    if (v27) {
      goto LABEL_50;
    }
    goto LABEL_53;
  }
  ctu::cf::insert<__CFString const*,BOOL>(Mutable, @"GetCombined", 0);
  ctu::cf::insert<__CFString const*,BOOL>(v19, @"VerifyData", 0);
  ctu::cf::insert<__CFString const*,BOOL>(v19, @"StripImg4", 1);
  CFTypeRef v92 = CFStringCreateWithCString(v15, "bbpv", 0x600u);
  uint64_t v20 = capabilities::radio::chipID((capabilities::radio *)v92);
  CFDataRef theData = 0;
  CFTypeRef v91 = CFStringCreateWithFormat(v15, 0, @"%08X-%@", v20, v17);
  xdict[3] = 0;
  long long v21 = (const void *)AMFDRCreateWithOptions();
  if (!v21)
  {
    uint64_t v29 = (void **)operator new(0x30uLL);
    std::string __p = v29;
    long long __p_8 = xmmword_235E76330;
    strcpy((char *)v29, "Failed to read provision data with options");
    uint64_t v30 = *(NSObject **)(v6 + 40);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      LODWORD(block.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)block.__r_.__value_.__r.__words + 4) = (std::string::size_type)v29;
      _os_log_error_impl(&dword_235DB9000, v30, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&block, 0xCu);
      uint64_t v31 = (const void **)(a1 + 5);
      if (SHIBYTE(__p_8) < 0) {
        uint64_t v29 = __p;
      }
      else {
        uint64_t v29 = (void **)&__p;
      }
    }
    else
    {
      uint64_t v31 = (const void **)(a1 + 5);
    }
    xpc_object_t v32 = xpc_string_create((const char *)v29);
    if (!v32) {
      xpc_object_t v32 = xpc_null_create();
    }
    xpc_object_t v33 = xpc_null_create();
    if (*v31) {
      unint64_t v34 = _Block_copy(*v31);
    }
    else {
      unint64_t v34 = 0;
    }
    long long v44 = a1[6];
    block.__r_.__value_.__r.__words[0] = MEMORY[0x263EF8330];
    block.__r_.__value_.__l.__size_ = 1174405120;
    block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke;
    v99 = &__block_descriptor_tmp_270;
    if (v34)
    {
      v100 = _Block_copy(v34);
      xpc_object_t v101 = v32;
      if (v32) {
        goto LABEL_80;
      }
    }
    else
    {
      v100 = 0;
      xpc_object_t v101 = v32;
      if (v32)
      {
LABEL_80:
        xpc_retain(v32);
        xpc_object_t v102 = v33;
        if (v33)
        {
LABEL_81:
          xpc_retain(v33);
LABEL_85:
          dispatch_async(v44, &block);
          xpc_release(v102);
          xpc_object_t v102 = 0;
          xpc_release(v101);
          xpc_object_t v101 = 0;
          if (v100) {
            _Block_release(v100);
          }
          if (v34) {
            _Block_release(v34);
          }
          xpc_release(v33);
          xpc_release(v32);
          if (SHIBYTE(__p_8) < 0) {
            operator delete(__p);
          }
          goto LABEL_194;
        }
LABEL_84:
        xpc_object_t v102 = xpc_null_create();
        goto LABEL_85;
      }
    }
    xpc_object_t v101 = xpc_null_create();
    xpc_object_t v102 = v33;
    if (v33) {
      goto LABEL_81;
    }
    goto LABEL_84;
  }
  CFDataRef v22 = (const __CFData *)AMFDRDataCopy();
  CFDataRef theData = v22;
  CFRelease(v21);
  std::string __p = 0;
  long long __p_8 = 0uLL;
  memset(xdict, 170, 24);
  capabilities::radio::personalizedFirmwarePath((uint64_t *)xdict, 0);
  int v35 = SHIBYTE(xdict[2]);
  if (SHIBYTE(xdict[2]) >= 0) {
    size_t v36 = HIBYTE(xdict[2]);
  }
  else {
    size_t v36 = (size_t)xdict[1];
  }
  if (!v36)
  {
    p_dst = (std::string *)operator new(0x20uLL);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_235E75070;
    strcpy((char *)p_dst, "Failed to load bbfw path");
    long long v46 = *(NSObject **)(v6 + 40);
    if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
    {
      LODWORD(block.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)block.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_dst;
      _os_log_error_impl(&dword_235DB9000, v46, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&block, 0xCu);
      uint64_t v47 = (const void **)(a1 + 5);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
      }
      else {
        p_dst = &__dst;
      }
    }
    else
    {
      uint64_t v47 = (const void **)(a1 + 5);
    }
    xpc_object_t v48 = xpc_string_create((const char *)p_dst);
    if (!v48) {
      xpc_object_t v48 = xpc_null_create();
    }
    xpc_object_t v49 = xpc_null_create();
    if (*v47) {
      unint64_t v50 = _Block_copy(*v47);
    }
    else {
      unint64_t v50 = 0;
    }
    v62 = a1[6];
    block.__r_.__value_.__r.__words[0] = MEMORY[0x263EF8330];
    block.__r_.__value_.__l.__size_ = 1174405120;
    block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke;
    v99 = &__block_descriptor_tmp_270;
    if (v50) {
      uint64_t v63 = _Block_copy(v50);
    }
    else {
      uint64_t v63 = 0;
    }
    v100 = v63;
    xpc_object_t v101 = v48;
    if (v48) {
      xpc_retain(v48);
    }
    else {
      xpc_object_t v101 = xpc_null_create();
    }
    xpc_object_t v102 = v49;
    if (v49) {
      xpc_retain(v49);
    }
    else {
      xpc_object_t v102 = xpc_null_create();
    }
    dispatch_async(v62, &block);
    xpc_release(v102);
    xpc_object_t v102 = 0;
    xpc_release(v101);
    xpc_object_t v101 = 0;
    if (v100) {
      _Block_release(v100);
    }
    if (v50) {
      _Block_release(v50);
    }
    goto LABEL_148;
  }
  unint64_t v37 = v36 + 1;
  memset(&__dst, 170, sizeof(__dst));
  if (v36 + 1 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v37 > 0x16)
  {
    uint64_t v51 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v37 | 7) != 0x17) {
      uint64_t v51 = v37 | 7;
    }
    uint64_t v52 = v51 + 1;
    unint64_t v38 = (std::string *)operator new(v51 + 1);
    __dst.__r_.__value_.__l.__size_ = v36 + 1;
    __dst.__r_.__value_.__r.__words[2] = v52 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    unint64_t v38 = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v36 + 1;
  }
  if (v35 >= 0) {
    v53 = xdict;
  }
  else {
    v53 = (xpc_object_t *)xdict[0];
  }
  memmove(v38, v53, v36);
  *(_WORD *)((char *)&v38->__r_.__value_.__l.__data_ + v36) = 47;
  v54 = std::string::append(&__dst, "bbticket.der", 0xCuLL);
  long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
  block.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
  *(_OWORD *)&block.__r_.__value_.__l.__data_ = v55;
  v54->__r_.__value_.__l.__size_ = 0;
  v54->__r_.__value_.__r.__words[2] = 0;
  v54->__r_.__value_.__r.__words[0] = 0;
  BOOL File = support::fs::loadFile((uint64_t)&block, (uint64_t)&__p);
  if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(block.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_105:
      if (File)
      {
LABEL_106:
        int v57 = 1;
        goto LABEL_151;
      }
      goto LABEL_109;
    }
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_105;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (File) {
    goto LABEL_106;
  }
LABEL_109:
  memset(&__dst, 170, sizeof(__dst));
  std::string::basic_string[abi:ne180100]<0>(&__dst, "Failed to load manifest data");
  v58 = *(NSObject **)(v6 + 40);
  if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
  {
    v85 = &__dst;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      v85 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    LODWORD(block.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)block.__r_.__value_.__r.__words + 4) = (std::string::size_type)v85;
    _os_log_error_impl(&dword_235DB9000, v58, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&block, 0xCu);
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v59 = &__dst;
  }
  else {
    long long v59 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  xpc_object_t v48 = xpc_string_create((const char *)v59);
  if (!v48) {
    xpc_object_t v48 = xpc_null_create();
  }
  xpc_object_t v49 = xpc_null_create();
  v60 = (const void *)a1[5];
  if (v60) {
    uint64_t v61 = _Block_copy(v60);
  }
  else {
    uint64_t v61 = 0;
  }
  v64 = a1[6];
  block.__r_.__value_.__r.__words[0] = MEMORY[0x263EF8330];
  block.__r_.__value_.__l.__size_ = 1174405120;
  block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke;
  v99 = &__block_descriptor_tmp_270;
  if (v61) {
    v65 = _Block_copy(v61);
  }
  else {
    v65 = 0;
  }
  v100 = v65;
  xpc_object_t v101 = v48;
  if (v48) {
    xpc_retain(v48);
  }
  else {
    xpc_object_t v101 = xpc_null_create();
  }
  xpc_object_t v102 = v49;
  if (v49) {
    xpc_retain(v49);
  }
  else {
    xpc_object_t v102 = xpc_null_create();
  }
  dispatch_async(v64, &block);
  xpc_release(v102);
  xpc_object_t v102 = 0;
  xpc_release(v101);
  xpc_object_t v101 = 0;
  if (v100) {
    _Block_release(v100);
  }
  if (v61) {
    _Block_release(v61);
  }
LABEL_148:
  xpc_release(v49);
  xpc_release(v48);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  int v57 = 0;
LABEL_151:
  if (SHIBYTE(xdict[2]) < 0) {
    operator delete(xdict[0]);
  }
  if (!v57) {
    goto LABEL_190;
  }
  xdict[0] = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v66 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v67 = v66;
  if (v66)
  {
    xdict[0] = v66;
  }
  else
  {
    xpc_object_t v67 = xpc_null_create();
    xdict[0] = v67;
    if (!v67)
    {
      xpc_object_t v68 = xpc_null_create();
      xpc_object_t v67 = 0;
      goto LABEL_163;
    }
  }
  if (MEMORY[0x237DF76E0](v67) != MEMORY[0x263EF8708])
  {
    xpc_object_t v68 = xpc_null_create();
LABEL_163:
    xdict[0] = v68;
    goto LABEL_164;
  }
  xpc_retain(v67);
LABEL_164:
  xpc_release(v67);
  std::string::size_type v69 = *MEMORY[0x263F8B868];
  block.__r_.__value_.__r.__words[0] = (std::string::size_type)xdict;
  block.__r_.__value_.__l.__size_ = v69;
  xpc::dict::object_proxy::operator=(&v87, (uint64_t)&block);
  xpc_release(v87);
  xpc_object_t v87 = 0;
  std::string::size_type v70 = *MEMORY[0x263F8B880];
  block.__r_.__value_.__r.__words[0] = (std::string::size_type)xdict;
  block.__r_.__value_.__l.__size_ = v70;
  xpc::dict::object_proxy::operator=(&v86, (uint64_t)&block);
  xpc_release(v86);
  xpc_object_t v86 = 0;
  xpc_object_t v71 = xpc_int64_create(2);
  if (!v71) {
    xpc_object_t v71 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict[0], (const char *)*MEMORY[0x263F8B878], v71);
  xpc_object_t v72 = xpc_null_create();
  xpc_release(v71);
  xpc_release(v72);
  xpc_object_t v73 = xpc_data_create(__p, __p_8 - (void)__p);
  if (!v73) {
    xpc_object_t v73 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict[0], (const char *)*MEMORY[0x263F8B848], v73);
  xpc_object_t v74 = xpc_null_create();
  xpc_release(v73);
  xpc_release(v74);
  CFDataRef v22 = theData;
  BytePtr = CFDataGetBytePtr(theData);
  CFIndex Length = CFDataGetLength(v22);
  xpc_object_t v77 = xpc_data_create(BytePtr, Length);
  if (!v77) {
    xpc_object_t v77 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict[0], (const char *)*MEMORY[0x263F8B870], v77);
  xpc_object_t v78 = xpc_null_create();
  xpc_release(v77);
  xpc_release(v78);
  xpc_object_t v79 = xpc_null_create();
  xpc_object_t v80 = xdict[0];
  if (xdict[0]) {
    xpc_retain(xdict[0]);
  }
  else {
    xpc_object_t v80 = xpc_null_create();
  }
  v81 = (const void *)a1[5];
  if (v81) {
    v82 = _Block_copy(v81);
  }
  else {
    v82 = 0;
  }
  v83 = a1[6];
  block.__r_.__value_.__r.__words[0] = MEMORY[0x263EF8330];
  block.__r_.__value_.__l.__size_ = 1174405120;
  block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJNS1_4dictES7_EEEvDpT__block_invoke;
  v99 = &__block_descriptor_tmp_287;
  if (v82) {
    v84 = _Block_copy(v82);
  }
  else {
    v84 = 0;
  }
  v100 = v84;
  xpc_object_t v101 = v79;
  if (v79) {
    xpc_retain(v79);
  }
  else {
    xpc_object_t v101 = xpc_null_create();
  }
  xpc_object_t v102 = v80;
  if (v80) {
    xpc_retain(v80);
  }
  else {
    xpc_object_t v102 = xpc_null_create();
  }
  dispatch_async(v83, &block);
  xpc_release(v102);
  xpc_object_t v102 = 0;
  xpc_release(v101);
  xpc_object_t v101 = 0;
  if (v100) {
    _Block_release(v100);
  }
  if (v82) {
    _Block_release(v82);
  }
  xpc_release(v80);
  xpc_release(v79);
  xpc_release(xdict[0]);
LABEL_190:
  if (__p)
  {
    *(void *)&long long __p_8 = __p;
    operator delete(__p);
  }
  if (v22) {
    CFRelease(v22);
  }
LABEL_194:
  if (v91) {
    CFRelease(v91);
  }
  if (v92) {
    CFRelease(v92);
  }
  long long v19 = v95;
LABEL_199:
  if (v19) {
    CFRelease(v19);
  }
  if (v96) {
    CFRelease(v96);
  }
  if (SHIBYTE(object[2]) < 0) {
    operator delete(object[0]);
  }
  if (object[3])
  {
    object[4] = object[3];
    operator delete(object[3]);
  }
  xpc_release(v9);
}

void sub_235E376E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,char a26,int a27,__int16 a28,char a29,char a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,char a42,int a43,__int16 a44,char a45,char a46,xpc_object_t object,uint64_t a48,int a49,__int16 a50,char a51,char a52,void *a53,uint64_t a54)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void xpc::dict::object_proxy::operator=(void *a1, uint64_t a2)
{
  xpc_object_t v4 = xpc_null_create();
  xpc_dictionary_set_value(**(xpc_object_t **)a2, *(const char **)(a2 + 8), v4);
  *a1 = v4;
  xpc_object_t v5 = xpc_null_create();
  xpc_release(v5);
}

const void **ctu::cf::CFSharedRef<__CFString const>::~CFSharedRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void __copy_helper_block_e8_40c61_ZTSN8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEE(uint64_t a1, uint64_t a2)
{
  xpc_object_t v4 = *(void **)(a2 + 40);
  if (v4) {
    xpc_object_t v4 = _Block_copy(v4);
  }
  xpc_object_t v5 = *(NSObject **)(a2 + 48);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v5;
  if (v5)
  {
    dispatch_retain(v5);
  }
}

void __destroy_helper_block_e8_40c61_ZTSN8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 48);
  if (v2) {
    dispatch_release(v2);
  }
  long long v3 = *(const void **)(a1 + 40);
  if (v3) {
    _Block_release(v3);
  }
}

uint64_t dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void radio::ARICommandDriver::setRegionCode(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(a1 + 72);
  xpc_object_t v4 = *(std::__shared_weak_count **)(a1 + 80);
  xpc_object_t v5 = (uint64_t *)(a1 + 72);
  if (!v4 || (xpc_object_t v8 = std::__shared_weak_count::lock(v4)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v9 = v8;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 1174405120;
  v10[2] = ___ZN5radio16ARICommandDriver13setRegionCodeENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke;
  v10[3] = &__block_descriptor_tmp_89_0;
  v10[4] = a1;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  uint64_t v12 = v6;
  uint64_t v13 = v9;
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(v5, (uint64_t)v10);
  if (v13) {
    std::__shared_weak_count::__release_weak(v13);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__shared_weak_count::__release_weak(v9);
}

void sub_235E37D54(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN5radio16ARICommandDriver13setRegionCodeENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  uint64_t v66 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)std::string __p = v3;
  long long v59 = v3;
  v57[2] = v3;
  v57[3] = v3;
  v57[0] = v3;
  v57[1] = v3;
  AriSdk::ARI_IBISetDeviceRegionCodeReq_SDK::ARI_IBISetDeviceRegionCodeReq_SDK((AriSdk::ARI_IBISetDeviceRegionCodeReq_SDK *)v57);
  xpc_object_t v4 = (void *)(a1 + 40);
  if ((*(char *)(a1 + 63) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(a1 + 63) || *(unsigned __int8 *)(a1 + 63) > 4u)
    {
      xpc_object_t v5 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        goto LABEL_9;
      }
      return MEMORY[0x237DF6510](v57);
    }
    LOBYTE(v6) = *(unsigned char *)(a1 + 63);
LABEL_11:
    xpc_object_t v7 = operator new(1uLL);
    uint64_t v50 = v2;
    unsigned char *v7 = v6;
    xpc_object_t v9 = __p[0];
    __p[0] = v7;
    if (v9) {
      operator delete(v9);
    }
    unsigned int v10 = 0;
    int v11 = *(char *)(a1 + 63);
    if ((v11 & 0x80000000) == 0) {
      goto LABEL_18;
    }
LABEL_20:
    uint64_t v13 = v10;
    if (*(void *)(a1 + 48) > (unint64_t)v10)
    {
      do
      {
        xpc_object_t v14 = (void *)(a1 + 40);
        if (v11 < 0)
        {
          xpc_object_t v14 = (void *)*v4;
          CFTypeRef v16 = __p[1];
          CFAllocatorRef v15 = (unsigned char *)v59;
          unint64_t v17 = v59 - (unint64_t)__p[1];
          if ((unint64_t)v59 - (unint64_t)__p[1] < 4)
          {
LABEL_23:
            char v18 = *((unsigned char *)v14 + v13);
            if ((unint64_t)v15 >= *((void *)&v59 + 1))
            {
              unint64_t v19 = *((void *)&v59 + 1) - (void)v16;
              if (2 * (*((void *)&v59 + 1) - (void)v16) <= v17 + 1) {
                uint64_t v20 = v17 + 1;
              }
              else {
                uint64_t v20 = 2 * v19;
              }
              if (v19 >= 0x3FFFFFFFFFFFFFFFLL) {
                size_t v21 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                size_t v21 = v20;
              }
              CFDataRef v22 = (char *)operator new(v21);
              uint64_t v23 = &v22[v17];
              v22[v17] = v18;
              uint64_t v12 = (uint64_t)&v22[v17 + 1];
              if (v15 == v16) {
                goto LABEL_53;
              }
              if (v17 >= 8 && (unint64_t)(v16 - v22) >= 0x20)
              {
                if (v17 >= 0x20)
                {
                  unint64_t v24 = v17 & 0xFFFFFFFFFFFFFFE0;
                  xpc_object_t v27 = &v22[v17 - 16];
                  uint64_t v28 = (long long *)(v15 - 16);
                  unint64_t v29 = v17 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    long long v30 = *v28;
                    *((_OWORD *)v27 - 1) = *(v28 - 1);
                    *(_OWORD *)xpc_object_t v27 = v30;
                    v27 -= 32;
                    v28 -= 2;
                    v29 -= 32;
                  }
                  while (v29);
                  if (v17 == v24) {
                    goto LABEL_52;
                  }
                  if ((v17 & 0x18) != 0) {
                    goto LABEL_45;
                  }
                  v23 -= v24;
                  v15 -= v24;
                }
                else
                {
                  unint64_t v24 = 0;
LABEL_45:
                  v23 -= v17 & 0xFFFFFFFFFFFFFFF8;
                  uint64_t v31 = &v22[&v15[-v24] - v16 - 8];
                  xpc_object_t v32 = (uint64_t *)&v15[-v24 - 8];
                  unint64_t v33 = v24 - (v17 & 0xFFFFFFFFFFFFFFF8);
                  do
                  {
                    uint64_t v34 = *v32--;
                    *(void *)uint64_t v31 = v34;
                    v31 -= 8;
                    v33 += 8;
                  }
                  while (v33);
                  v15 -= v17 & 0xFFFFFFFFFFFFFFF8;
                  if (v17 == (v17 & 0xFFFFFFFFFFFFFFF8))
                  {
LABEL_52:
                    CFAllocatorRef v15 = v16;
                    uint64_t v23 = v22;
LABEL_53:
                    __p[1] = v23;
                    *(void *)&long long v59 = &v22[v17 + 1];
                    *((void *)&v59 + 1) = &v22[v21];
                    if (v15) {
                      operator delete(v15);
                    }
LABEL_16:
                    *(void *)&long long v59 = v12;
LABEL_17:
                    unsigned int v10 = v13 + 1;
                    int v11 = *(char *)(a1 + 63);
                    if (v11 < 0) {
                      goto LABEL_20;
                    }
                    goto LABEL_18;
                  }
                }
              }
              int v35 = v23 - 1;
              do
              {
                char v36 = *--v15;
                *v35-- = v36;
              }
              while (v15 != v16);
              goto LABEL_52;
            }
            unsigned char *v15 = v18;
            uint64_t v12 = (uint64_t)(v15 + 1);
            goto LABEL_16;
          }
        }
        else
        {
          CFTypeRef v16 = __p[1];
          CFAllocatorRef v15 = (unsigned char *)v59;
          unint64_t v17 = v59 - (unint64_t)__p[1];
          if ((unint64_t)v59 - (unint64_t)__p[1] < 4) {
            goto LABEL_23;
          }
        }
        AriOsa::LogSrcInfo((uint64_t *)&buf, (AriOsa *)"/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/ARI/ari_sdk_msg.h", "emplace_back", v8);
        p_long long buf = &buf;
        if (SHIBYTE(v62) < 0) {
          p_long long buf = (long long *)buf;
        }
        Ari::Log((Ari *)8, (uint64_t)"(%s:%d) Array is full, cannot add new values", v25, p_buf, 371);
        if ((SHIBYTE(v62) & 0x80000000) == 0) {
          goto LABEL_17;
        }
        operator delete((void *)buf);
        unsigned int v10 = v13 + 1;
        int v11 = *(char *)(a1 + 63);
        if (v11 < 0) {
          goto LABEL_20;
        }
LABEL_18:
        uint64_t v13 = v10;
      }
      while (v11 > (unint64_t)v10);
    }
    uint64_t v37 = *(void *)(v50 + 312);
    unint64_t v38 = *(std::__shared_weak_count **)(a1 + 72);
    uint64_t v51 = *(void *)(a1 + 64);
    uint64_t v52 = v38;
    if (v38)
    {
      atomic_fetch_add_explicit(&v38->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      LOBYTE(v11) = *(unsigned char *)(a1 + 63);
    }
    if ((v11 & 0x80) != 0)
    {
      std::string::__init_copy_ctor_external(&v53, *(const std::string::value_type **)(a1 + 40), *(void *)(a1 + 48));
    }
    else
    {
      *(_OWORD *)&v53.__r_.__value_.__l.__data_ = *(_OWORD *)v4;
      v53.__r_.__value_.__r.__words[2] = *(void *)(a1 + 56);
    }
    uint64_t v54 = v50;
    char v39 = operator new(0x48uLL);
    xpc_object_t v40 = (std::__shared_weak_count *)v39;
    v39[1] = 0;
    uint64_t v41 = v39 + 1;
    void v39[2] = 0;
    void *v39 = &unk_26E940D78;
    v39[3] = v51;
    dispatch_object_t v42 = v39 + 3;
    v39[4] = v52;
    if (v52) {
      atomic_fetch_add_explicit(&v52->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    v43 = (std::string *)(v39 + 5);
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v43, v53.__r_.__value_.__l.__data_, v53.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&v43->__r_.__value_.__l.__data_ = *(_OWORD *)&v53.__r_.__value_.__l.__data_;
      v40[2].__shared_owners_ = v53.__r_.__value_.__r.__words[2];
    }
    v40[2].__shared_weak_owners_ = v54;
    *(void *)&long long buf = MEMORY[0x263EF8330];
    *((void *)&buf + 1) = 1174405120;
    v62 = ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver13setRegionCodeENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEUb7_E4__29vEEN8dispatch5blockIU13block_pointerFiPhjEEENS4_17integral_constantIiLi2EEEOT__block_invoke;
    uint64_t v63 = &__block_descriptor_tmp_307;
    v64 = v42;
    v65 = v40;
    atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
    aBlock[0] = (const void *)MEMORY[0x263EF8330];
    aBlock[1] = (const void *)0x40000000;
    aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
    aBlock[3] = &unk_264C7DF90;
    aBlock[4] = &buf;
    long long v44 = _Block_copy(aBlock);
    CFTypeRef v45 = v65;
    if (v65 && !atomic_fetch_add(&v65->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
      if (atomic_fetch_add(v41, 0xFFFFFFFFFFFFFFFFLL))
      {
LABEL_69:
        *(void *)&long long v46 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v46 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v55[0] = v46;
        v55[1] = v46;
        unint64_t v56 = 0xAAAAAAAAAAAAAAAALL;
        uint64_t v47 = *(std::__shared_weak_count **)(v37 + 16);
        *(void *)&long long buf = *(void *)(v37 + 8);
        if (v47)
        {
          *((void *)&buf + 1) = std::__shared_weak_count::lock(v47);
          if (*((void *)&buf + 1))
          {
            ice::SendMsgBaseProxy::SendMsgBaseProxy();
            xpc_object_t v48 = (std::__shared_weak_count *)*((void *)&buf + 1);
            if (*((void *)&buf + 1)
              && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&buf + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
              std::__shared_weak_count::__release_weak(v48);
            }
            aBlock[0] = v44;
            ice::SendMsgBaseProxy::callback();
            if (aBlock[0]) {
              _Block_release(aBlock[0]);
            }
            MEMORY[0x237DF50B0](v55);
            if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v53.__r_.__value_.__l.__data_);
            }
            if (v52) {
              std::__shared_weak_count::__release_weak(v52);
            }
            return MEMORY[0x237DF6510](v57);
          }
        }
        else
        {
          *((void *)&buf + 1) = 0;
        }
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
    }
    else if (atomic_fetch_add(v41, 0xFFFFFFFFFFFFFFFFLL))
    {
      goto LABEL_69;
    }
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
    goto LABEL_69;
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if ((unint64_t)(v6 - 5) >= 0xFFFFFFFFFFFFFFFCLL) {
    goto LABEL_11;
  }
  xpc_object_t v5 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    xpc_object_t v4 = (void *)*v4;
LABEL_9:
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v4;
    _os_log_error_impl(&dword_235DB9000, v5, OS_LOG_TYPE_ERROR, "Invalid region code: %s", (uint8_t *)&buf, 0xCu);
  }
  return MEMORY[0x237DF6510](v57);
}

void sub_235E383C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  shared_owners = (std::__shared_weak_count *)v25[1].__shared_owners_;
  if (shared_owners) {
    std::__shared_weak_count::__release_weak(shared_owners);
  }
  std::__shared_weak_count::~__shared_weak_count(v25);
  operator delete(v28);
  _ZZZN5radio16ARICommandDriver13setRegionCodeENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEUb7_EN4__29D1Ev((uint64_t)&a13);
  MEMORY[0x237DF6510](&a25);
  _Unwind_Resume(a1);
}

void sub_235E38488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  if (*(char *)(v17 - 121) < 0)
  {
    operator delete(*(void **)(v17 - 144));
    MEMORY[0x237DF6510](va);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x235E384B0);
}

uint64_t _ZZZN5radio16ARICommandDriver13setRegionCodeENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEUb7_EN4__29D1Ev(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
    if (!v2) {
      return a1;
    }
    goto LABEL_3;
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
LABEL_3:
  }
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void __copy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c46_ZTSNSt3__18weak_ptrIN5radio13CommandDriverEEE(uint64_t a1, uint64_t a2)
{
  xpc_object_t v4 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
    uint64_t v6 = *(void *)(a2 + 72);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = v6;
    if (!v6) {
      return;
    }
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 40);
    v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 56);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
    uint64_t v6 = *(void *)(a2 + 72);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = v6;
    if (!v6) {
      return;
    }
  }
  atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 16), 1uLL, memory_order_relaxed);
}

void __destroy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c46_ZTSNSt3__18weak_ptrIN5radio13CommandDriverEEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  if (*(char *)(a1 + 63) < 0)
  {
    long long v3 = *(void **)(a1 + 40);
    operator delete(v3);
  }
}

void radio::ARICommandDriver::screenState(radio::ARICommandDriver *this, char a2)
{
  uint64_t v6 = *((void *)this + 9);
  xpc_object_t v4 = (std::__shared_weak_count *)*((void *)this + 10);
  long long v5 = (uint64_t *)((char *)this + 72);
  if (!v4 || (xpc_object_t v8 = std::__shared_weak_count::lock(v4)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v9 = v8;
  p_shared_weak_owners = &v8->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 1174405120;
  void v11[2] = ___ZN5radio16ARICommandDriver11screenStateEb_block_invoke;
  v11[3] = &__block_descriptor_tmp_90;
  char v13 = a2;
  v11[4] = this;
  v11[5] = v6;
  uint64_t v12 = v9;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(v5, (uint64_t)v11);
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  std::__shared_weak_count::__release_weak(v9);
}

uint64_t ___ZN5radio16ARICommandDriver11screenStateEb_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count_vtbl **)(a1 + 32);
  unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)std::string __p = v3;
  long long v23 = v3;
  v21[2] = v3;
  v21[3] = v3;
  v21[0] = v3;
  v21[1] = v3;
  AriSdk::ARI_IBINetIceApStatusReq_SDK::ARI_IBINetIceApStatusReq_SDK((AriSdk::ARI_IBINetIceApStatusReq_SDK *)v21);
  int v4 = *(unsigned __int8 *)(a1 + 56);
  long long v5 = operator new(4uLL);
  _DWORD *v5 = 2 * (v4 == 0);
  uint64_t v6 = __p[0];
  __p[0] = v5;
  if (v6) {
    operator delete(v6);
  }
  on_zero_shared_weak = v2[7].__on_zero_shared_weak;
  uint64_t v9 = *(void *)(a1 + 40);
  xpc_object_t v8 = *(std::__shared_weak_count **)(a1 + 48);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v10 = (std::__shared_weak_count *)operator new(0x30uLL);
  int v11 = v10;
  v10->__shared_owners_ = 0;
  p_shared_owners = &v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940DF8;
  v10[1].__vftable = v2;
  v10[1].__shared_owners_ = v9;
  v10[1].__shared_weak_owners_ = (uint64_t)v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v25 = MEMORY[0x263EF8330];
  uint64_t v26 = 1174405120;
  xpc_object_t v27 = ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver11screenStateEbEUb8_E4__30vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  uint64_t v28 = &__block_descriptor_tmp_310;
  unint64_t v29 = &v10[1].__vftable;
  long long v30 = v10;
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlock[0] = (const void *)MEMORY[0x263EF8330];
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
  aBlock[3] = &unk_264C7DF90;
  aBlock[4] = &v25;
  char v13 = _Block_copy(aBlock);
  xpc_object_t v14 = v30;
  if (!v30 || atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_10:
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_11:
  *(void *)&long long v15 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v19[0] = v15;
  v19[1] = v15;
  unint64_t v20 = 0xAAAAAAAAAAAAAAAALL;
  CFTypeRef v16 = (std::__shared_weak_count *)*((void *)on_zero_shared_weak + 2);
  uint64_t v25 = *((void *)on_zero_shared_weak + 1);
  if (!v16)
  {
    uint64_t v26 = 0;
LABEL_24:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v26 = (uint64_t)std::__shared_weak_count::lock(v16);
  if (!v26) {
    goto LABEL_24;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  uint64_t v17 = (std::__shared_weak_count *)v26;
  if (v26 && !atomic_fetch_add((atomic_ullong *volatile)(v26 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  aBlock[0] = v13;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0]) {
    _Block_release(aBlock[0]);
  }
  MEMORY[0x237DF50B0](v19);
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  return MEMORY[0x237DF5C80](v21);
}

void sub_235E389F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  char v18 = *(const void **)(v16 - 104);
  if (v18) {
    _Block_release(v18);
  }
  MEMORY[0x237DF50B0](&a9);
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
  MEMORY[0x237DF5C80](&a15);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c46_ZTSNSt3__18weak_ptrIN5radio13CommandDriverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c46_ZTSNSt3__18weak_ptrIN5radio13CommandDriverEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void radio::ARICommandDriver::forceNetworkSearch(radio::ARICommandDriver *this)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  uint64_t v1 = *((void *)this + 5);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
  {
    int v2 = 136315138;
    long long v3 = "forceNetworkSearch";
    _os_log_debug_impl(&dword_235DB9000, v1, OS_LOG_TYPE_DEBUG, "#D %s: not supported!", (uint8_t *)&v2, 0xCu);
  }
}

void radio::ARICommandDriver::setBreadMode(radio::ARICommandDriver *this, char a2)
{
  uint64_t v6 = *((void *)this + 9);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 10);
  long long v5 = (uint64_t *)((char *)this + 72);
  if (!v4 || (xpc_object_t v8 = std::__shared_weak_count::lock(v4)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v9 = v8;
  p_shared_weak_owners = &v8->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 1174405120;
  void v11[2] = ___ZN5radio16ARICommandDriver12setBreadModeEb_block_invoke;
  v11[3] = &__block_descriptor_tmp_93;
  char v13 = a2;
  v11[4] = this;
  v11[5] = v6;
  uint64_t v12 = v9;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(v5, (uint64_t)v11);
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  std::__shared_weak_count::__release_weak(v9);
}

uint64_t ___ZN5radio16ARICommandDriver12setBreadModeEb_block_invoke(uint64_t a1)
{
  int v2 = *(std::__shared_weak_count_vtbl **)(a1 + 32);
  unint64_t v25 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v23[3] = v3;
  *(_OWORD *)std::string __p = v3;
  v23[1] = v3;
  _OWORD v23[2] = v3;
  v23[0] = v3;
  AriSdk::ARI_IBICallPsBreadButterModeReq_SDK::ARI_IBICallPsBreadButterModeReq_SDK((AriSdk::ARI_IBICallPsBreadButterModeReq_SDK *)v23);
  int v4 = *(unsigned __int8 *)(a1 + 56);
  long long v5 = operator new(4uLL);
  _DWORD *v5 = v4;
  uint64_t v6 = __p[1];
  __p[1] = v5;
  if (v6) {
    operator delete(v6);
  }
  on_zero_shared_weak = v2[7].__on_zero_shared_weak;
  uint64_t v9 = *(void *)(a1 + 40);
  xpc_object_t v8 = *(std::__shared_weak_count **)(a1 + 48);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  char v10 = *(unsigned char *)(a1 + 56);
  int v11 = (std::__shared_weak_count *)operator new(0x38uLL);
  uint64_t v12 = v11;
  v11->__shared_owners_ = 0;
  p_shared_owners = &v11->__shared_owners_;
  v11->__shared_weak_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940E78;
  v11[1].__vftable = v2;
  v11[1].__shared_owners_ = v9;
  v11[1].__shared_weak_owners_ = (uint64_t)v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  LOBYTE(v11[2].__vftable) = v10;
  uint64_t v26 = MEMORY[0x263EF8330];
  uint64_t v27 = 1174405120;
  uint64_t v28 = ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver12setBreadModeEbEUb9_E4__31vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  unint64_t v29 = &__block_descriptor_tmp_313;
  long long v30 = v11 + 1;
  uint64_t v31 = v11;
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlock[0] = (const void *)MEMORY[0x263EF8330];
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
  aBlock[3] = &unk_264C7DF90;
  aBlock[4] = &v26;
  xpc_object_t v14 = _Block_copy(aBlock);
  long long v15 = v31;
  if (!v31 || atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_10;
    }
LABEL_13:
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    if (__p[0]) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_13;
  }
LABEL_10:
  if (__p[0]) {
    goto LABEL_15;
  }
LABEL_14:
  uint64_t v16 = operator new(4uLL);
  *uint64_t v16 = 0;
  __p[0] = v16;
LABEL_15:
  unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v17 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v21[0] = v17;
  v21[1] = v17;
  char v18 = (std::__shared_weak_count *)*((void *)on_zero_shared_weak + 2);
  uint64_t v26 = *((void *)on_zero_shared_weak + 1);
  if (!v18)
  {
    uint64_t v27 = 0;
LABEL_26:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v27 = (uint64_t)std::__shared_weak_count::lock(v18);
  if (!v27) {
    goto LABEL_26;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  unint64_t v19 = (std::__shared_weak_count *)v27;
  if (v27 && !atomic_fetch_add((atomic_ullong *volatile)(v27 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  aBlock[0] = v14;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0]) {
    _Block_release(aBlock[0]);
  }
  MEMORY[0x237DF50B0](v21);
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  return MEMORY[0x237DF6760](v23);
}

void sub_235E38F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  char v18 = *(const void **)(v16 - 104);
  if (v18) {
    _Block_release(v18);
  }
  MEMORY[0x237DF50B0](&a9);
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
  MEMORY[0x237DF6760](&a15);
  _Unwind_Resume(a1);
}

void radio::ARICommandDriver::setButterMode(radio::ARICommandDriver *this, char a2)
{
  uint64_t v6 = *((void *)this + 9);
  int v4 = (std::__shared_weak_count *)*((void *)this + 10);
  long long v5 = (uint64_t *)((char *)this + 72);
  if (!v4 || (xpc_object_t v8 = std::__shared_weak_count::lock(v4)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v9 = v8;
  p_shared_weak_owners = &v8->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 1174405120;
  void v11[2] = ___ZN5radio16ARICommandDriver13setButterModeEb_block_invoke;
  v11[3] = &__block_descriptor_tmp_96;
  char v13 = a2;
  v11[4] = this;
  v11[5] = v6;
  uint64_t v12 = v9;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(v5, (uint64_t)v11);
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  std::__shared_weak_count::__release_weak(v9);
}

uint64_t ___ZN5radio16ARICommandDriver13setButterModeEb_block_invoke(uint64_t a1)
{
  int v2 = *(std::__shared_weak_count_vtbl **)(a1 + 32);
  std::string __p = (void *)0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v23[3] = v3;
  long long v24 = v3;
  v23[1] = v3;
  _OWORD v23[2] = v3;
  v23[0] = v3;
  AriSdk::ARI_IBICallPsBreadButterModeReq_SDK::ARI_IBICallPsBreadButterModeReq_SDK((AriSdk::ARI_IBICallPsBreadButterModeReq_SDK *)v23);
  int v4 = *(unsigned __int8 *)(a1 + 56);
  long long v5 = operator new(4uLL);
  _DWORD *v5 = v4;
  uint64_t v6 = __p;
  std::string __p = v5;
  if (v6) {
    operator delete(v6);
  }
  on_zero_shared_weak = v2[7].__on_zero_shared_weak;
  uint64_t v9 = *(void *)(a1 + 40);
  xpc_object_t v8 = *(std::__shared_weak_count **)(a1 + 48);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  char v10 = *(unsigned char *)(a1 + 56);
  int v11 = (std::__shared_weak_count *)operator new(0x38uLL);
  uint64_t v12 = v11;
  v11->__shared_owners_ = 0;
  p_shared_owners = &v11->__shared_owners_;
  v11->__shared_weak_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940EF8;
  v11[1].__vftable = v2;
  v11[1].__shared_owners_ = v9;
  v11[1].__shared_weak_owners_ = (uint64_t)v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  LOBYTE(v11[2].__vftable) = v10;
  uint64_t v26 = MEMORY[0x263EF8330];
  uint64_t v27 = 1174405120;
  uint64_t v28 = ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver13setButterModeEbEUb10_E4__32vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  unint64_t v29 = &__block_descriptor_tmp_320;
  long long v30 = v11 + 1;
  uint64_t v31 = v11;
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlock[0] = (const void *)MEMORY[0x263EF8330];
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
  aBlock[3] = &unk_264C7DF90;
  aBlock[4] = &v26;
  xpc_object_t v14 = _Block_copy(aBlock);
  long long v15 = v31;
  if (!v31 || atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_10;
    }
LABEL_13:
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    if ((void)v24) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_13;
  }
LABEL_10:
  if ((void)v24) {
    goto LABEL_15;
  }
LABEL_14:
  uint64_t v16 = operator new(4uLL);
  *uint64_t v16 = 0;
  *(void *)&long long v24 = v16;
LABEL_15:
  unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v17 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v21[0] = v17;
  v21[1] = v17;
  char v18 = (std::__shared_weak_count *)*((void *)on_zero_shared_weak + 2);
  uint64_t v26 = *((void *)on_zero_shared_weak + 1);
  if (!v18)
  {
    uint64_t v27 = 0;
LABEL_26:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v27 = (uint64_t)std::__shared_weak_count::lock(v18);
  if (!v27) {
    goto LABEL_26;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  unint64_t v19 = (std::__shared_weak_count *)v27;
  if (v27 && !atomic_fetch_add((atomic_ullong *volatile)(v27 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  aBlock[0] = v14;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0]) {
    _Block_release(aBlock[0]);
  }
  MEMORY[0x237DF50B0](v21);
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  return MEMORY[0x237DF6760](v23);
}

void sub_235E39444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  char v18 = *(const void **)(v16 - 104);
  if (v18) {
    _Block_release(v18);
  }
  MEMORY[0x237DF50B0](&a9);
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
  MEMORY[0x237DF6760](&a15);
  _Unwind_Resume(a1);
}

void radio::ARICommandDriver::setMCC(void *a1, CFTypeRef *a2, uint64_t a3)
{
  CFTypeRef v5 = *a2;
  if (*a2) {
    CFRetain(*a2);
  }
  if (!*(void *)a3)
  {
    uint64_t v6 = 0;
    xpc_object_t v7 = *(NSObject **)(a3 + 8);
    if (!v7) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v6 = _Block_copy(*(const void **)a3);
  xpc_object_t v7 = *(NSObject **)(a3 + 8);
  if (v7) {
LABEL_5:
  }
    dispatch_retain(v7);
LABEL_6:
  xpc_object_t v8 = (std::__shared_weak_count *)a1[10];
  if (!v8 || (uint64_t v9 = a1[9], (v10 = std::__shared_weak_count::lock(v8)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v11 = v10;
  uint64_t v12 = operator new(0x20uLL);
  void *v12 = a1;
  v12[1] = v5;
  v12[2] = v6;
  v12[3] = v7;
  char v13 = a1[11];
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v14 = operator new(0x18uLL);
  void *v14 = v12;
  v14[1] = v9;
  v14[2] = v11;
  dispatch_async_f(v13, v14, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::ARICommandDriver::setMCC(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>(radio::ARICommandDriver::setMCC(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::ARICommandDriver::setMCC(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,dispatch_queue_s *::default_delete<radio::ARICommandDriver::setMCC(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
}

void radio::ARICommandDriver::sendVisitInfo(radio::ARICommandDriver *this, int a2, int a3)
{
  uint64_t v7 = *((void *)this + 9);
  CFTypeRef v5 = (std::__shared_weak_count *)*((void *)this + 10);
  uint64_t v6 = (uint64_t *)((char *)this + 72);
  if (!v5 || (char v10 = std::__shared_weak_count::lock(v5)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v11 = v10;
  p_shared_weak_owners = &v10->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v11);
  }
  v13[0] = MEMORY[0x263EF8330];
  v13[1] = 1174405120;
  v13[2] = ___ZN5radio16ARICommandDriver13sendVisitInfoEjj_block_invoke;
  v13[3] = &__block_descriptor_tmp_99_0;
  int v15 = a2;
  int v16 = a3;
  v13[4] = this;
  v13[5] = v7;
  xpc_object_t v14 = v11;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(v6, (uint64_t)v13);
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  std::__shared_weak_count::__release_weak(v11);
}

uint64_t ___ZN5radio16ARICommandDriver13sendVisitInfoEjj_block_invoke(uint64_t a1)
{
  int v2 = *(std::__shared_weak_count_vtbl **)(a1 + 32);
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)std::string __p = v3;
  *(_OWORD *)uint64_t v26 = v3;
  v23[3] = v3;
  long long v24 = v3;
  v23[1] = v3;
  _OWORD v23[2] = v3;
  v23[0] = v3;
  AriSdk::ARI_IBICallPsSignificantLocationReq_SDK::ARI_IBICallPsSignificantLocationReq_SDK((AriSdk::ARI_IBICallPsSignificantLocationReq_SDK *)v23);
  int v4 = operator new(4uLL);
  _DWORD *v4 = *(_DWORD *)(a1 + 56);
  CFTypeRef v5 = __p[1];
  __p[1] = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = operator new(4uLL);
  _DWORD *v6 = *(_DWORD *)(a1 + 60);
  uint64_t v7 = v26[0];
  v26[0] = v6;
  if (v7) {
    operator delete(v7);
  }
  on_zero_shared_weak = v2[7].__on_zero_shared_weak;
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 48);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  int v11 = (std::__shared_weak_count *)operator new(0x30uLL);
  uint64_t v12 = v11;
  v11->__shared_owners_ = 0;
  p_shared_owners = &v11->__shared_owners_;
  v11->__shared_weak_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940FF8;
  v11[1].__vftable = v2;
  v11[1].__shared_owners_ = v10;
  v11[1].__shared_weak_owners_ = (uint64_t)v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v27 = MEMORY[0x263EF8330];
  uint64_t v28 = 1174405120;
  unint64_t v29 = ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver13sendVisitInfoEjjEUb11_E4__34vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  long long v30 = &__block_descriptor_tmp_328;
  uint64_t v31 = &v11[1].__vftable;
  xpc_object_t v32 = v11;
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlock[0] = (const void *)MEMORY[0x263EF8330];
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
  aBlock[3] = &unk_264C7DF90;
  aBlock[4] = &v27;
  xpc_object_t v14 = _Block_copy(aBlock);
  int v15 = v32;
  if (!v32 || atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_12;
    }
LABEL_15:
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    if ((void)v24) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_15;
  }
LABEL_12:
  if ((void)v24) {
    goto LABEL_17;
  }
LABEL_16:
  int v16 = operator new(4uLL);
  *int v16 = 0;
  *(void *)&long long v24 = v16;
LABEL_17:
  unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v17 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v21[0] = v17;
  v21[1] = v17;
  char v18 = (std::__shared_weak_count *)*((void *)on_zero_shared_weak + 2);
  uint64_t v27 = *((void *)on_zero_shared_weak + 1);
  if (!v18)
  {
    uint64_t v28 = 0;
LABEL_28:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v28 = (uint64_t)std::__shared_weak_count::lock(v18);
  if (!v28) {
    goto LABEL_28;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  unint64_t v19 = (std::__shared_weak_count *)v28;
  if (v28 && !atomic_fetch_add((atomic_ullong *volatile)(v28 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  aBlock[0] = v14;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0]) {
    _Block_release(aBlock[0]);
  }
  MEMORY[0x237DF50B0](v21);
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  return MEMORY[0x237DF69D0](v23);
}

void sub_235E39A7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  char v18 = *(const void **)(v16 - 104);
  if (v18) {
    _Block_release(v18);
  }
  MEMORY[0x237DF50B0](&a9);
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
  MEMORY[0x237DF69D0](&a15);
  _Unwind_Resume(a1);
}

void radio::ARICommandDriver::sendAccessoryInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 1174405120;
  v8[2] = ___ZN5radio16ARICommandDriver17sendAccessoryInfoENSt3__16vectorIN3abm13AccessoryInfoENS1_9allocatorIS4_EEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke;
  v8[3] = &__block_descriptor_tmp_100;
  v8[4] = a1;
  CFTypeRef v5 = *(void **)a3;
  if (*(void *)a3) {
    CFTypeRef v5 = _Block_copy(v5);
  }
  uint64_t v6 = (uint64_t *)(a1 + 72);
  uint64_t v7 = *(NSObject **)(a3 + 8);
  aBlock = v5;
  dispatch_object_t object = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(v6, (uint64_t)v8);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void ___ZN5radio16ARICommandDriver17sendAccessoryInfoENSt3__16vectorIN3abm13AccessoryInfoENS1_9allocatorIS4_EEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke(void *a1)
{
  int v2 = *(NSObject **)(a1[4] + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v8[0]) = 0;
    _os_log_impl(&dword_235DB9000, v2, OS_LOG_TYPE_DEFAULT, "#I sendAccessoryInfo not yet supported for ICE", (uint8_t *)v8, 2u);
  }
  long long v3 = (const void *)a1[5];
  if (v3 && a1[6])
  {
    int v4 = _Block_copy(v3);
    CFTypeRef v5 = v4;
    uint64_t v6 = a1[6];
    v8[0] = MEMORY[0x263EF8330];
    v8[1] = 1174405120;
    v8[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
    v8[3] = &__block_descriptor_tmp_181;
    if (v4)
    {
      aBlock = _Block_copy(v4);
      CFTypeRef cf = 0;
      dispatch_async(v6, v8);
      CFTypeRef v7 = cf;
      if (!cf) {
        goto LABEL_10;
      }
    }
    else
    {
      aBlock = 0;
      CFTypeRef cf = 0;
      dispatch_async(v6, v8);
      CFTypeRef v7 = cf;
      if (!cf)
      {
LABEL_10:
        if (aBlock) {
          _Block_release(aBlock);
        }
        if (v5) {
          _Block_release(v5);
        }
        return;
      }
    }
    CFRelease(v7);
    goto LABEL_10;
  }
}

void radio::ARICommandDriver::getRFFEScanData(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  int v4 = operator new(0x28uLL);
  std::string __p = v4;
  long long v12 = xmmword_235E76340;
  strcpy((char *)v4, "Get RFFE Scan Data: not supported!");
  CFTypeRef v5 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    LODWORD(block) = 136315138;
    *(void *)((char *)&block + 4) = v4;
    _os_log_error_impl(&dword_235DB9000, v5, OS_LOG_TYPE_ERROR, "%s: \n", (uint8_t *)&block, 0xCu);
    if (!*(void *)a2) {
      goto LABEL_24;
    }
  }
  else if (!*(void *)a2)
  {
    goto LABEL_24;
  }
  if (!*(void *)(a2 + 8)) {
    goto LABEL_24;
  }
  if (v12 >= 0) {
    p_p = (const char *)&__p;
  }
  else {
    p_p = (const char *)__p;
  }
  xpc_object_t v7 = xpc_string_create(p_p);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_object_t v8 = xpc_null_create();
  if (*(void *)a2) {
    uint64_t v9 = _Block_copy(*(const void **)a2);
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(NSObject **)(a2 + 8);
  *(void *)&long long block = MEMORY[0x263EF8330];
  *((void *)&block + 1) = 1174405120;
  xpc_object_t v14 = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke;
  int v15 = &__block_descriptor_tmp_270;
  if (v9)
  {
    aBlock = _Block_copy(v9);
    xpc_object_t v17 = v7;
    if (v7) {
      goto LABEL_14;
    }
LABEL_17:
    xpc_object_t v17 = xpc_null_create();
    xpc_object_t object = v8;
    if (v8) {
      goto LABEL_15;
    }
LABEL_18:
    xpc_object_t object = xpc_null_create();
    goto LABEL_19;
  }
  aBlock = 0;
  xpc_object_t v17 = v7;
  if (!v7) {
    goto LABEL_17;
  }
LABEL_14:
  xpc_retain(v7);
  xpc_object_t object = v8;
  if (!v8) {
    goto LABEL_18;
  }
LABEL_15:
  xpc_retain(v8);
LABEL_19:
  dispatch_async(v10, &block);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v17);
  xpc_object_t v17 = 0;
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v9) {
    _Block_release(v9);
  }
  xpc_release(v8);
  xpc_release(v7);
LABEL_24:
  if (SHIBYTE(v12) < 0) {
    operator delete(__p);
  }
}

void sub_235E39F34(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void radio::ARICommandDriver::enableResetSPMIEvent(radio::ARICommandDriver *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)int v2 = 0;
    _os_log_error_impl(&dword_235DB9000, v1, OS_LOG_TYPE_ERROR, "Enable resetting SPMI: not supported!", v2, 2u);
  }
}

uint64_t ctu::Loggable<radio::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x270F97428](a1 + 8);
}

size_t ctu::Loggable<radio::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(radio::CommandDriver *a1@<X0>, void *a2@<X8>)
{
  Name = (const char *)radio::CommandDriver::getName(a1);
  size_t result = strlen(Name);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    xpc_object_t v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memmove(a2, Name, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<radio::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x270F978E0](a1 + 8);
}

void *boost::signals2::signal<void ()(unsigned int),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(unsigned int)>,boost::function<void ()(boost::signals2::connection const&,unsigned int)>,boost::signals2::mutex>::~signal(void *a1)
{
  *a1 = &unk_26E93FBF0;
  int v2 = (atomic_uint *)a1[2];
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

void *boost::signals2::signal<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::~signal(void *a1)
{
  *a1 = &unk_26E93FC60;
  int v2 = (atomic_uint *)a1[2];
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

void boost::signals2::signal<void ()(unsigned int),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(unsigned int)>,boost::function<void ()(boost::signals2::connection const&,unsigned int)>,boost::signals2::mutex>::~signal(void *__p)
{
  *std::string __p = &unk_26E93FBF0;
  int v2 = (atomic_uint *)__p[2];
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }

  operator delete(__p);
}

uint64_t boost::signals2::signal<void ()(unsigned int),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(unsigned int)>,boost::function<void ()(boost::signals2::connection const&,unsigned int)>,boost::signals2::mutex>::lock_pimpl@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 16);
  *a2 = *(void *)(result + 8);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 8), 1u, memory_order_relaxed);
  }
  return result;
}

void boost::signals2::signal<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::~signal(void *__p)
{
  *std::string __p = &unk_26E93FC60;
  uint64_t v2 = (atomic_uint *)__p[2];
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }

  operator delete(__p);
}

uint64_t boost::signals2::signal<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::lock_pimpl@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 16);
  *a2 = *(void *)(result + 8);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 8), 1u, memory_order_relaxed);
  }
  return result;
}

void *ctu::Loggable<radio::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_26E93FCD0;
  MEMORY[0x237DF4D50](a1 + 1);
  return a1;
}

void ctu::Loggable<radio::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_26E93FCD0;
  MEMORY[0x237DF4D50](a1 + 1);

  operator delete(a1);
}

void std::__shared_ptr_pointer<radio::ARICommandDriver *,std::shared_ptr<radio::ARICommandDriver> ctu::SharedSynchronizable<radio::CommandDriver>::make_shared_ptr<radio::ARICommandDriver>(radio::ARICommandDriver*)::{lambda(radio::ARICommandDriver *)#1},std::allocator<radio::ARICommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<radio::ARICommandDriver *,std::shared_ptr<radio::ARICommandDriver> ctu::SharedSynchronizable<radio::CommandDriver>::make_shared_ptr<radio::ARICommandDriver>(radio::ARICommandDriver*)::{lambda(radio::ARICommandDriver *)#1},std::allocator<radio::ARICommandDriver>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<radio::ARICommandDriver *,std::shared_ptr<radio::ARICommandDriver> ctu::SharedSynchronizable<radio::CommandDriver>::make_shared_ptr<radio::ARICommandDriver>(radio::ARICommandDriver*)::{lambda(radio::ARICommandDriver *)#1},std::allocator<radio::ARICommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN5radio13CommandDriverEE15make_shared_ptrINS1_16ARICommandDriverEEENSt"
                     "3__110shared_ptrIT_EEPS8_EUlPS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN5radio13CommandDriverEE15make_shared_ptrINS1_16ARICommandD"
                                "riverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN5radio13CommandDriverEE15make_shared_ptrINS1_16ARICommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN5radio13CommandDriverEE15make_shared_ptrINS1_16ARICommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<radio::ARICommandDriver> ctu::SharedSynchronizable<radio::CommandDriver>::make_shared_ptr<radio::ARICommandDriver>(radio::ARICommandDriver*)::{lambda(radio::ARICommandDriver*)#1}::operator() const(radio::ARICommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver4initEvEUb_E3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t result, const unsigned __int8 *a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(uint64_t **)(result + 32);
  if (v2)
  {
    uint64_t v3 = *v2;
    unint64_t v11 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v10[2] = v4;
    v10[3] = v4;
    v10[0] = v4;
    v10[1] = v4;
    AriSdk::ARI_CsiModeSetIndCb_SDK::ARI_CsiModeSetIndCb_SDK((AriSdk::ARI_CsiModeSetIndCb_SDK *)v10, a2);
    int v5 = AriSdk::ARI_CsiModeSetIndCb_SDK::unpack((AriSdk::ARI_CsiModeSetIndCb_SDK *)v10);
    if (v5)
    {
      uint64_t v6 = *(NSObject **)(v3 + 40);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = asString();
        *(_DWORD *)long long buf = 136315394;
        *(void *)&buf[4] = v7;
        __int16 v13 = 1024;
        int v14 = v5;
        _os_log_impl(&dword_235DB9000, v6, OS_LOG_TYPE_DEFAULT, "#N Could not unpack CsiModeSetIndCb: %s (%d)", buf, 0x12u);
      }
    }
    else
    {
      radio::OpMode::convertMode(*(radio::OpMode **)(v3 + 296));
      xpc_object_t v8 = *(NSObject **)(v3 + 40);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        radio::OpMode::modeToString();
        if (v15 >= 0) {
          uint64_t v9 = buf;
        }
        else {
          uint64_t v9 = *(unsigned char **)buf;
        }
        *(_DWORD *)uint64_t v16 = 136446210;
        xpc_object_t v17 = v9;
        _os_log_impl(&dword_235DB9000, v8, OS_LOG_TYPE_DEFAULT, "#I Got operating mode indication from BB: %{public}s", v16, 0xCu);
        if (v15 < 0) {
          operator delete(*(void **)buf);
        }
      }
      radio::CommandDriver::handleOperatingModeChanged_sync();
      *(unsigned char *)(v3 + 328) = 1;
    }
    return MEMORY[0x237DF5460](v10);
  }
  return result;
}

uint64_t __copy_helper_block_e8_32c69_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver4initEvEUb_E3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c69_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver4initEvEUb_E3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver4initEvEUb_E3__0NS_9allocatorIS3_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93FD90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver4initEvEUb_E3__0NS_9allocatorIS3_EEED0Ev(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93FD90;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7(uint64_t a1)
{
  return 0;
}

void ctu::cf::insert<__CFString const*,std::string>(int a1, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  ctu::cf::convert_copy();
  if (cf) {
    CFRelease(cf);
  }
}

void sub_235E3A984(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_235E3A9A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::insert<__CFString const*,BOOL>(CFMutableDictionaryRef theDict, CFTypeRef cf, int a3)
{
  if (cf) {
    CFRetain(cf);
  }
  uint64_t v6 = (const void **)MEMORY[0x263EFFB40];
  if (!a3) {
    uint64_t v6 = (const void **)MEMORY[0x263EFFB38];
  }
  uint64_t v7 = *v6;
  if (cf && v7)
  {
    CFDictionaryAddValue(theDict, cf, v7);
  }
  else if (!v7)
  {
    goto LABEL_10;
  }
  CFRelease(v7);
LABEL_10:
  if (cf) {
    CFRelease(cf);
  }
}

void sub_235E3AA58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
}

uint64_t *boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(uint64_t *a1)
{
  if (*(_DWORD *)(*a1 + 284) > *(_DWORD *)(*a1 + 280)) {
    boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::force_cleanup_connections(a1[1], a1[2]);
  }
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::invocation_state>::~shared_ptr(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)(a1 + 8);
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

uint64_t boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>>::erase(uint64_t *a1, int *a2, uint64_t **a3)
{
  uint64_t v7 = (uint64_t **)(a1 + 4);
  uint64_t v6 = a1[4];
  if (!v6)
  {
    long long v23 = (uint64_t *)a1[10];
    if (v23 != *a3) {
      goto LABEL_80;
    }
    long long v24 = (uint64_t *)v23[1];
    unint64_t v25 = (uint64_t **)(a1 + 4);
    uint64_t v10 = a1 + 4;
    if (v24 != a1) {
      goto LABEL_76;
    }
    goto LABEL_55;
  }
  int v8 = *a2;
  int v9 = a2[2];
  uint64_t v10 = a1 + 4;
  uint64_t v11 = a1[4];
  if (*a2 == 1)
  {
    do
    {
      while (1)
      {
        int v17 = *(_DWORD *)(v11 + 32);
        BOOL v18 = v17 < 1;
        if (v17 == 1) {
          BOOL v18 = *(_DWORD *)(v11 + 40) < v9;
        }
        if (!v18) {
          break;
        }
        uint64_t v11 = *(void *)(v11 + 8);
        if (!v11) {
          goto LABEL_19;
        }
      }
      uint64_t v10 = (uint64_t *)v11;
      uint64_t v11 = *(void *)v11;
    }
    while (v11);
  }
  else
  {
    do
    {
      int v12 = *(_DWORD *)(v11 + 32);
      BOOL v13 = v12 == v8;
      BOOL v14 = v12 < v8;
      if (v12 >= v8) {
        char v15 = (uint64_t *)v11;
      }
      else {
        char v15 = (uint64_t *)(v11 + 8);
      }
      if (v14) {
        uint64_t v16 = v10;
      }
      else {
        uint64_t v16 = (uint64_t *)v11;
      }
      if (v13)
      {
        char v15 = (uint64_t *)v11;
        uint64_t v10 = (uint64_t *)v11;
      }
      else
      {
        uint64_t v10 = v16;
      }
      uint64_t v11 = *v15;
    }
    while (*v15);
  }
LABEL_19:
  uint64_t v19 = (uint64_t *)v10[6];
  if (v19 != *a3) {
    goto LABEL_80;
  }
  unint64_t v20 = (uint64_t **)(a1 + 4);
  if (v8 == 1)
  {
    size_t v21 = (uint64_t *)a1[4];
    while (1)
    {
      int v22 = *((_DWORD *)v21 + 8);
      if (v22 == 1)
      {
        if (v9 < *((_DWORD *)v21 + 10)) {
          goto LABEL_27;
        }
LABEL_22:
        size_t v21 = (uint64_t *)v21[1];
        if (!v21) {
          goto LABEL_42;
        }
      }
      else
      {
        if (v22 <= 1) {
          goto LABEL_22;
        }
LABEL_27:
        unint64_t v20 = (uint64_t **)v21;
        size_t v21 = (uint64_t *)*v21;
        if (!v21) {
          goto LABEL_42;
        }
      }
    }
  }
  uint64_t v26 = (uint64_t **)a1[4];
  do
  {
    int v27 = *((_DWORD *)v26 + 8);
    uint64_t v28 = (uint64_t ***)(v26 + 1);
    BOOL v29 = v8 == v27;
    BOOL v30 = v8 < v27;
    if (v8 >= v27) {
      uint64_t v31 = (uint64_t ***)(v26 + 1);
    }
    else {
      uint64_t v31 = (uint64_t ***)v26;
    }
    if (!v30) {
      uint64_t v26 = v20;
    }
    if (v29) {
      uint64_t v31 = v28;
    }
    else {
      unint64_t v20 = v26;
    }
    uint64_t v26 = *v31;
  }
  while (*v31);
LABEL_42:
  long long v24 = (uint64_t *)v19[1];
  xpc_object_t v32 = a1;
  if (v20 != v7) {
    xpc_object_t v32 = v20[6];
  }
  if (v24 == v32)
  {
LABEL_55:
    uint64_t v37 = (uint64_t *)v10[1];
    if (v37)
    {
      do
      {
        unint64_t v38 = v37;
        uint64_t v37 = (uint64_t *)*v37;
      }
      while (v37);
    }
    else
    {
      uint64_t v41 = v10;
      do
      {
        unint64_t v38 = (uint64_t *)v41[2];
        BOOL v13 = *v38 == (void)v41;
        uint64_t v41 = v38;
      }
      while (!v13);
    }
    if ((uint64_t *)a1[3] == v10) {
      a1[3] = (uint64_t)v38;
    }
    --a1[5];
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v6, v10);
    operator delete(v10);
    goto LABEL_80;
  }
  int v33 = *a2;
  if (*a2 == 1)
  {
    int v34 = a2[2];
    while (1)
    {
      unint64_t v25 = (uint64_t **)v6;
      int v35 = *(_DWORD *)(v6 + 32);
      if (v35 == 1)
      {
        int v36 = *(_DWORD *)(v6 + 40);
        if (v36 <= v34)
        {
          if (v36 >= v34)
          {
            *(void *)(v6 + 48) = v24;
            goto LABEL_80;
          }
          goto LABEL_53;
        }
LABEL_47:
        uint64_t v6 = *(void *)v6;
        if (!*v25)
        {
          uint64_t v7 = v25;
          goto LABEL_76;
        }
      }
      else
      {
        if (v35 > 1) {
          goto LABEL_47;
        }
LABEL_53:
        uint64_t v6 = *(void *)(v6 + 8);
        if (!v6)
        {
          uint64_t v7 = v25 + 1;
          goto LABEL_76;
        }
      }
    }
  }
  int v39 = *(_DWORD *)(v6 + 32);
  if (v33 == v39) {
    goto LABEL_79;
  }
  while (v33 >= v39)
  {
    if (v39 >= v33) {
      goto LABEL_79;
    }
    uint64_t v40 = *(void *)(v6 + 8);
    if (!v40)
    {
      uint64_t v7 = (uint64_t **)(v6 + 8);
      goto LABEL_75;
    }
LABEL_61:
    int v39 = *(_DWORD *)(v40 + 32);
    uint64_t v6 = v40;
    if (v33 == v39)
    {
      *(void *)(v40 + 48) = v24;
      goto LABEL_80;
    }
  }
  uint64_t v40 = *(void *)v6;
  if (*(void *)v6) {
    goto LABEL_61;
  }
  uint64_t v7 = (uint64_t **)v6;
LABEL_75:
  unint64_t v25 = (uint64_t **)v6;
LABEL_76:
  uint64_t v6 = (uint64_t)operator new(0x38uLL);
  *(void *)(v6 + 32) = *(void *)a2;
  *(_DWORD *)(v6 + 40) = a2[2];
  *(void *)(v6 + 48) = 0;
  *(void *)uint64_t v6 = 0;
  *(void *)(v6 + 8) = 0;
  *(void *)(v6 + 16) = v25;
  const void *v7 = (uint64_t *)v6;
  uint64_t v42 = *(void *)a1[3];
  v43 = (uint64_t *)v6;
  if (v42)
  {
    a1[3] = v42;
    v43 = *v7;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)a1[4], v43);
  ++a1[5];
LABEL_79:
  *(void *)(v6 + 48) = v24;
LABEL_80:
  long long v44 = *a3;
  uint64_t v45 = **a3;
  uint64_t v46 = (*a3)[1];
  *(void *)(v45 + 8) = v46;
  *(void *)v44[1] = v45;
  --a1[2];
  uint64_t v47 = (atomic_uint *)v44[3];
  if (v47)
  {
    if (atomic_fetch_add(v47 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v47 + 16))(v47);
      if (atomic_fetch_add(v47 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v47 + 24))(v47);
      }
    }
  }
  operator delete(v44);
  return v46;
}

void boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>::lock_next_callable(void *a1)
{
  v44[3] = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  if (*a1 == a1[3]) {
    return;
  }
  if (v1 == a1[1]) {
    goto LABEL_51;
  }
  while (1)
  {
    boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::pop_back_n((void *)(a1[2] + 8), *(void *)(a1[2] + 264));
    *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v42 = v3;
    long long v43 = v3;
    long long v40 = v3;
    long long v41 = v3;
    long long v38 = v3;
    long long v39 = v3;
    long long v36 = v3;
    long long v37 = v3;
    long long v34 = v3;
    long long v35 = v3;
    long long v32 = v3;
    long long v33 = v3;
    uint64_t v4 = *(void *)(*a1 + 16);
    *(void *)&long long v42 = 10;
    *((void *)&v42 + 1) = &v32;
    *(void *)&long long v43 = 0;
    *((void *)&v43 + 1) = v4;
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
    uint64_t v5 = *a1;
    uint64_t v6 = *(void *)(*a1 + 16);
    uint64_t v7 = a1[2];
    int v8 = *(uint64_t **)(v6 + 32);
    if (v8)
    {
      uint64_t v9 = *v8;
      if (*v8 != v8[1])
      {
        uint64_t v10 = (void *)(v7 + 8);
        while (1)
        {
          memset(v44, 170, 24);
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::apply_visitor<boost::signals2::detail::lock_weak_ptr_visitor const>(v9, (uint64_t)v44);
          if ((*(_DWORD *)v9 ^ (*(int *)v9 >> 31)) == 2)
          {
            if (!(*(unsigned int (**)(void))(**(void **)(v9 + 8) + 24))(*(void *)(v9 + 8))) {
              goto LABEL_9;
            }
          }
          else
          {
            uint64_t v11 = *(void *)(v9 + 16);
            if (v11 && atomic_load_explicit((atomic_uint *volatile)(v11 + 8), memory_order_acquire))
            {
LABEL_9:
              boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::push_back(v10, (uint64_t)v44);
              char v12 = 0;
              if (LODWORD(v44[0]) == SLODWORD(v44[0]) >> 31) {
                goto LABEL_16;
              }
              goto LABEL_10;
            }
          }
          if (*(unsigned char *)(v6 + 24))
          {
            *(unsigned char *)(v6 + 24) = 0;
            boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>((_DWORD *)v6, &v32);
          }
          char v12 = 1;
          if (LODWORD(v44[0]) == SLODWORD(v44[0]) >> 31)
          {
LABEL_16:
            BOOL v13 = (atomic_uint *)v44[2];
            if (v44[2])
            {
              if (atomic_fetch_add((atomic_uint *volatile)(v44[2] + 8), 0xFFFFFFFF) == 1)
              {
                (*(void (**)(atomic_uint *))(*(void *)v13 + 16))(v13);
                if (atomic_fetch_add(v13 + 3, 0xFFFFFFFF) == 1) {
                  (*(void (**)(atomic_uint *))(*(void *)v13 + 24))(v13);
                }
              }
            }
            goto LABEL_20;
          }
LABEL_10:
          if (v44[1]) {
            (*(void (**)(void))(*(void *)v44[1] + 8))(v44[1]);
          }
LABEL_20:
          if ((v12 & 1) == 0)
          {
            v9 += 24;
            if (v9 != *(void *)(*(void *)(v6 + 32) + 8)) {
              continue;
            }
          }
          uint64_t v5 = *a1;
          uint64_t v6 = *(void *)(*a1 + 16);
          uint64_t v7 = a1[2];
          break;
        }
      }
    }
    if (*(unsigned char *)(v6 + 24))
    {
      ++*(_DWORD *)(v7 + 280);
      uint64_t v14 = *(void *)(v6 + 16);
      if (v14)
      {
        if (atomic_load_explicit((atomic_uint *volatile)(v14 + 8), memory_order_acquire))
        {
          int v15 = 1;
          goto LABEL_37;
        }
        uint64_t v7 = a1[2];
        uint64_t v5 = *a1;
      }
      a1[3] = v5;
      if (a1[1] == v5)
      {
        BOOL v18 = *(_DWORD **)(v7 + 288);
        if (v18) {
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v18, &v32);
        }
        int v15 = 0;
        *(void *)(v7 + 288) = 0;
      }
      else
      {
        uint64_t v16 = *(void *)(v5 + 16);
        int v17 = *(_DWORD **)(v7 + 288);
        if (v17) {
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v17, &v32);
        }
        *(void *)(v7 + 288) = v16;
        int v15 = 0;
        if (v16) {
          ++*(_DWORD *)(v16 + 28);
        }
      }
    }
    else
    {
      ++*(_DWORD *)(v7 + 284);
      int v15 = 1;
    }
LABEL_37:
    (*(void (**)(void))(**((void **)&v43 + 1) + 32))(*((void *)&v43 + 1));
    unint64_t v19 = *((void *)&v42 + 1);
    if (*((void *)&v42 + 1))
    {
      if ((uint64_t)v43 - 1 >= 0)
      {
        unint64_t v20 = *((void *)&v42 + 1) + 16 * v43;
        do
        {
          size_t v21 = *(atomic_uint **)(v20 - 8);
          if (v21)
          {
            if (atomic_fetch_add(v21 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v21 + 16))(v21);
              if (atomic_fetch_add(v21 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v21 + 24))(v21);
              }
            }
          }
          v20 -= 16;
        }
        while (v20 > v19);
      }
      if ((unint64_t)v42 >= 0xB) {
        operator delete(*((void **)&v42 + 1));
      }
    }
    uint64_t v1 = *a1;
    uint64_t v22 = a1[1];
    if (!v15) {
      break;
    }
    uint64_t v23 = *(void *)(v1 + 8);
    *a1 = v23;
    if (v23 == v22)
    {
      uint64_t v1 = v22;
LABEL_51:
      uint64_t v24 = a1[3];
      if (v24 != v1)
      {
        *(void *)&long long v25 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v25 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v40 = v25;
        long long v41 = v25;
        long long v38 = v25;
        long long v39 = v25;
        long long v36 = v25;
        long long v37 = v25;
        long long v34 = v25;
        long long v35 = v25;
        long long v32 = v25;
        long long v33 = v25;
        uint64_t v26 = *(void *)(v24 + 16);
        *(void *)&long long v42 = 10;
        *((void *)&v42 + 1) = &v32;
        *(void *)&long long v43 = 0;
        *((void *)&v43 + 1) = v26;
        (*(void (**)(uint64_t))(*(void *)v26 + 24))(v26);
        uint64_t v27 = a1[2];
        a1[3] = a1[1];
        uint64_t v28 = *(_DWORD **)(v27 + 288);
        if (v28) {
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v28, &v32);
        }
        *(void *)(v27 + 288) = 0;
        (*(void (**)(void))(**((void **)&v43 + 1) + 32))(*((void *)&v43 + 1));
        unint64_t v29 = *((void *)&v42 + 1);
        if (*((void *)&v42 + 1))
        {
          if ((uint64_t)v43 - 1 >= 0)
          {
            unint64_t v30 = *((void *)&v42 + 1) + 16 * v43;
            do
            {
              uint64_t v31 = *(atomic_uint **)(v30 - 8);
              if (v31)
              {
                if (atomic_fetch_add(v31 + 2, 0xFFFFFFFF) == 1)
                {
                  (*(void (**)(atomic_uint *))(*(void *)v31 + 16))(v31);
                  if (atomic_fetch_add(v31 + 3, 0xFFFFFFFF) == 1) {
                    (*(void (**)(atomic_uint *))(*(void *)v31 + 24))(v31);
                  }
                }
              }
              v30 -= 16;
            }
            while (v30 > v29);
          }
          if ((unint64_t)v42 >= 0xB) {
            operator delete(*((void **)&v42 + 1));
          }
        }
      }
      return;
    }
  }
  if (v1 == v22) {
    goto LABEL_51;
  }
}

void sub_235E3B4D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_235E3B4E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_235E3B6C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)va);
  _Unwind_Resume(a1);
}

void boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::force_cleanup_connections(uint64_t a1, uint64_t a2)
{
  long long v3 = (uint64_t **)a1;
  uint64_t v73 = *MEMORY[0x263EF8340];
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v68[8] = v4;
  v68[9] = v4;
  v68[6] = v4;
  v68[7] = v4;
  v68[4] = v4;
  v68[5] = v4;
  _OWORD v68[2] = v4;
  v68[3] = v4;
  v68[0] = v4;
  v68[1] = v4;
  uint64_t v5 = *(pthread_mutex_t **)(a1 + 24);
  unint64_t v69 = 10;
  std::string __p = v68;
  uint64_t v71 = 0;
  xpc_object_t v72 = v5;
  pthread_mutex_lock(v5);
  if (**v3 != a2) {
    goto LABEL_94;
  }
  uint64_t v6 = v3[1];
  if (!v6 || atomic_load_explicit((atomic_uint *volatile)v6 + 2, memory_order_acquire) != 1)
  {
    uint64_t v7 = (uint64_t *)operator new(0x20uLL);
    int v8 = *v3;
    uint64_t v9 = **v3;
    uint64_t v66 = v7;
    uint64_t v10 = operator new(0x40uLL);
    uint64_t v11 = v10;
    void *v10 = v10;
    v10[1] = v10;
    v10[2] = 0;
    char v12 = *(void **)(v9 + 8);
    if (v12 != (void *)v9)
    {
      uint64_t v13 = 0;
      uint64_t v14 = v10;
      do
      {
        int v15 = operator new(0x20uLL);
        v15[2] = v12[2];
        uint64_t v16 = v12[3];
        v15[3] = v16;
        if (v16)
        {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v16 + 8), 1u, memory_order_relaxed);
          uint64_t v14 = (void *)*v11;
          uint64_t v13 = v11[2];
        }
        void *v15 = v14;
        v15[1] = v11;
        v14[1] = v15;
        void *v11 = v15;
        void v11[2] = ++v13;
        char v12 = (void *)v12[1];
        uint64_t v14 = v15;
      }
      while (v12 != (void *)v9);
    }
    v64 = v3;
    v65 = v8;
    v11[3] = 0;
    int v17 = (void **)(v11 + 3);
    v11[4] = 0;
    BOOL v18 = v11 + 4;
    v11[5] = 0;
    *((unsigned char *)v11 + 48) = *(unsigned char *)(v9 + 48);
    v11[3] = v11 + 4;
    unint64_t v19 = *(void **)(v9 + 24);
    unint64_t v20 = (void *)(v9 + 32);
    if (v19 == (void *)(v9 + 32))
    {
LABEL_10:
      *((unsigned char *)v11 + 56) = *(unsigned char *)(v9 + 56);
      size_t v21 = *(void **)(v9 + 24);
      if (v21 != v20)
      {
        uint64_t v22 = (void *)v11[3];
        uint64_t v23 = v11[1];
        do
        {
          v22[6] = v23;
          uint64_t v24 = v9;
          if (v21 != v20) {
            uint64_t v24 = v21[6];
          }
          long long v25 = (void *)v21[1];
          uint64_t v26 = v25;
          uint64_t v27 = v21;
          if (v25)
          {
            do
            {
              uint64_t v28 = v26;
              uint64_t v26 = (void *)*v26;
            }
            while (v26);
          }
          else
          {
            do
            {
              uint64_t v28 = (void *)v27[2];
              BOOL v29 = *v28 == (void)v27;
              uint64_t v27 = v28;
            }
            while (!v29);
          }
          uint64_t v30 = v9;
          if (v28 != v20) {
            uint64_t v30 = v28[6];
          }
          while (v24 != v30)
          {
            uint64_t v24 = *(void *)(v24 + 8);
            uint64_t v23 = *(void *)(v23 + 8);
          }
          if (v25)
          {
            do
            {
              uint64_t v31 = v25;
              long long v25 = (void *)*v25;
            }
            while (v25);
          }
          else
          {
            do
            {
              uint64_t v31 = (void *)v21[2];
              BOOL v29 = *v31 == (void)v21;
              size_t v21 = v31;
            }
            while (!v29);
          }
          long long v32 = (void *)v22[1];
          if (v32)
          {
            do
            {
              long long v33 = v32;
              long long v32 = (void *)*v32;
            }
            while (v32);
          }
          else
          {
            do
            {
              long long v33 = (void *)v22[2];
              BOOL v29 = *v33 == (void)v22;
              uint64_t v22 = v33;
            }
            while (!v29);
          }
          size_t v21 = v31;
          uint64_t v22 = v33;
        }
        while (v31 != v20);
      }
      *uint64_t v66 = (uint64_t)v11;
      v66[1] = 0;
      std::string v53 = operator new(0x18uLL);
      v53[1] = 0x100000001;
      void *v53 = &unk_26E93FE40;
      v53[2] = v11;
      v66[1] = (uint64_t)v53;
      v66[2] = v65[2];
      uint64_t v54 = v65[3];
      v66[3] = v54;
      long long v3 = v64;
      if (v54) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v54 + 8), 1u, memory_order_relaxed);
      }
      long long v55 = (uint64_t *)operator new(0x18uLL);
      v55[1] = 0x100000001;
      uint64_t *v55 = (uint64_t)&unk_26E93FDE0;
      _OWORD v55[2] = (uint64_t)v66;
      unint64_t v56 = (atomic_uint *)v64[1];
      void *v64 = v66;
      v64[1] = v55;
      if (v56)
      {
        if (atomic_fetch_add(v56 + 2, 0xFFFFFFFF) == 1)
        {
          (*(void (**)(atomic_uint *))(*(void *)v56 + 16))(v56);
          if (atomic_fetch_add(v56 + 3, 0xFFFFFFFF) == 1) {
            (*(void (**)(atomic_uint *))(*(void *)v56 + 24))(v56);
          }
        }
      }
      goto LABEL_88;
    }
    while (1)
    {
      int v34 = *((_DWORD *)v19 + 8);
      long long v35 = (void *)*v18;
      long long v36 = v11 + 4;
      if (*v17 != v18)
      {
        long long v37 = (void *)*v18;
        long long v38 = v11 + 4;
        if (v35)
        {
          do
          {
            long long v36 = v37;
            long long v37 = (void *)v37[1];
          }
          while (v37);
        }
        else
        {
          do
          {
            long long v36 = (void *)v38[2];
            BOOL v29 = *v36 == (void)v38;
            long long v38 = v36;
          }
          while (v29);
        }
        int v39 = *((_DWORD *)v19 + 10);
        int v40 = *((_DWORD *)v36 + 8);
        if (v40 == v34)
        {
          if (v34 != 1) {
            goto LABEL_55;
          }
          if (*((_DWORD *)v36 + 10) >= v39)
          {
            long long v41 = (void *)*v18;
            long long v42 = v11 + 4;
            long long v43 = v11 + 4;
            if (v35) {
              goto LABEL_59;
            }
LABEL_66:
            uint64_t v47 = operator new(0x38uLL);
            long long v48 = *((_OWORD *)v19 + 2);
            v47[6] = v19[6];
            *((_OWORD *)v47 + 2) = v48;
            void *v47 = 0;
            v47[1] = 0;
            _OWORD v47[2] = v43;
            *long long v42 = v47;
            xpc_object_t v49 = (void *)**v17;
            if (v49)
            {
              _DWORD *v17 = v49;
              uint64_t v47 = (void *)*v42;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v11[4], v47);
            ++v11[5];
            goto LABEL_69;
          }
        }
        else if (v40 >= v34)
        {
LABEL_55:
          long long v42 = v11 + 4;
          long long v43 = v11 + 4;
          if (!v35) {
            goto LABEL_66;
          }
          long long v41 = (void *)*v18;
          if (v34 != 1)
          {
            int v44 = *((_DWORD *)v35 + 8);
            long long v43 = (void *)*v18;
            while (v34 != v44)
            {
              if (v34 < v44)
              {
                uint64_t v52 = *v43;
                long long v42 = v43;
                if (!*v43) {
                  goto LABEL_66;
                }
              }
              else
              {
                if (v44 >= v34) {
                  goto LABEL_69;
                }
                uint64_t v52 = v43[1];
                if (!v52) {
                  goto LABEL_65;
                }
              }
              int v44 = *(_DWORD *)(v52 + 32);
              long long v43 = (void *)v52;
            }
            goto LABEL_69;
          }
          while (1)
          {
LABEL_59:
            long long v43 = v41;
            int v45 = *((_DWORD *)v41 + 8);
            if (v45 == 1)
            {
              int v46 = *((_DWORD *)v41 + 10);
              if (v46 > v39) {
                goto LABEL_58;
              }
              if (v46 >= v39) {
                goto LABEL_69;
              }
            }
            else if (v45 > 1)
            {
LABEL_58:
              long long v41 = (void *)*v41;
              long long v42 = v43;
              if (!*v43) {
                goto LABEL_66;
              }
              continue;
            }
            long long v41 = (void *)v41[1];
            if (!v41)
            {
LABEL_65:
              long long v42 = v43 + 1;
              goto LABEL_66;
            }
          }
        }
      }
      if (v35) {
        long long v43 = v36;
      }
      else {
        long long v43 = v11 + 4;
      }
      if (v35) {
        long long v42 = v36 + 1;
      }
      else {
        long long v42 = v11 + 4;
      }
      if (!*v42) {
        goto LABEL_66;
      }
LABEL_69:
      uint64_t v50 = (void *)v19[1];
      if (v50)
      {
        do
        {
          uint64_t v51 = v50;
          uint64_t v50 = (void *)*v50;
        }
        while (v50);
      }
      else
      {
        do
        {
          uint64_t v51 = (void *)v19[2];
          BOOL v29 = *v51 == (void)v19;
          unint64_t v19 = v51;
        }
        while (!v29);
      }
      unint64_t v19 = v51;
      if (v51 == v20) {
        goto LABEL_10;
      }
    }
  }
LABEL_88:
  int v57 = (uint64_t **)*v3;
  v58 = (uint64_t *)**v3;
  long long v59 = (uint64_t *)v58[1];
  xpc_object_t v67 = v59;
  if (v58 != v59)
  {
    do
    {
      while (1)
      {
        uint64_t v60 = v59[2];
        if (!*(unsigned char *)(v60 + 24)) {
          break;
        }
        long long v59 = (uint64_t *)v59[1];
        xpc_object_t v67 = v59;
        v58 = *v57;
        if (v59 == *v57) {
          goto LABEL_93;
        }
      }
      long long v59 = (uint64_t *)boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>>::erase(v58, (int *)(v60 + 64), &v67);
      int v57 = (uint64_t **)*v3;
      xpc_object_t v67 = v59;
      v58 = *v57;
    }
    while (v59 != *v57);
  }
LABEL_93:
  v3[2] = v59;
LABEL_94:
  pthread_mutex_unlock(v72);
  uint64_t v61 = (char *)__p;
  if (__p)
  {
    if (v71 - 1 >= 0)
    {
      v62 = (char *)__p + 16 * v71;
      do
      {
        uint64_t v63 = (atomic_uint *)*((void *)v62 - 1);
        if (v63)
        {
          if (atomic_fetch_add(v63 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v63 + 16))(v63);
            if (atomic_fetch_add(v63 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v63 + 24))(v63);
            }
          }
        }
        v62 -= 16;
      }
      while (v62 > v61);
    }
    if (v69 >= 0xB) {
      operator delete(__p);
    }
  }
}

void sub_235E3BD78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::invocation_state>::dispose(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = (atomic_uint *)v1[3];
    if (v2)
    {
      if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
        if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
        }
      }
    }
    long long v3 = (atomic_uint *)v1[1];
    if (v3)
    {
      if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
        if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
        }
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::invocation_state>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::invocation_state>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::invocation_state>::get_untyped_deleter()
{
  return 0;
}

uint64_t *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>>::~list(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    long long v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        uint64_t v6 = (atomic_uint *)v3[3];
        if (v6)
        {
          if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
            if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
            }
          }
        }
        operator delete(v3);
        long long v3 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>>>::dispose(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>>>::destroy((void *)v1[4]);
    if (v1[2])
    {
      uint64_t v2 = (void *)*v1;
      long long v3 = (uint64_t *)v1[1];
      uint64_t v4 = *v3;
      *(void *)(v4 + 8) = *(void *)(*v1 + 8);
      *(void *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          uint64_t v5 = (uint64_t *)v3[1];
          uint64_t v6 = (atomic_uint *)v3[3];
          if (v6)
          {
            if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
              if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
              }
            }
          }
          operator delete(v3);
          long long v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>>>::get_untyped_deleter()
{
  return 0;
}

uint64_t boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>>>::~slot_call_iterator_cache(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 288);
  if (v2)
  {
    *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v8[8] = v3;
    v8[9] = v3;
    v8[6] = v3;
    v8[7] = v3;
    void v8[4] = v3;
    void v8[5] = v3;
    v8[2] = v3;
    v8[3] = v3;
    v8[0] = v3;
    v8[1] = v3;
    unint64_t v9 = 10;
    std::string __p = v8;
    uint64_t v11 = 0;
    uint64_t v12 = v2;
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
    boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(*(_DWORD **)(a1 + 288), v8);
    (*(void (**)(uint64_t))(*(void *)v12 + 32))(v12);
    uint64_t v4 = (char *)__p;
    if (__p)
    {
      if (v11 - 1 >= 0)
      {
        uint64_t v5 = (char *)__p + 16 * v11;
        do
        {
          uint64_t v6 = (atomic_uint *)*((void *)v5 - 1);
          if (v6)
          {
            if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
              if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
              }
            }
          }
          v5 -= 16;
        }
        while (v5 > v4);
      }
      if (v9 >= 0xB) {
        operator delete(__p);
      }
    }
  }
  if (*(void *)(a1 + 256)) {
    boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::auto_buffer_destroy((void *)(a1 + 8));
  }
  if (*(unsigned char *)a1) {
    *(unsigned char *)a1 = 0;
  }
  return a1;
}

void sub_235E3C7D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  long long v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (uint64_t v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  int v8 = a1[2];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN5radio13CommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_26E93FE98;
  void block[5] = v5;
  uint64_t v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = a2;
  dispatch_async(v8, block);
  uint64_t v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN5radio13CommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c50_ZTSNSt3__110shared_ptrIKN5radio13CommandDriverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c50_ZTSNSt3__110shared_ptrIKN5radio13CommandDriverEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v1 = *(const void **)(a1 + 40);
  CFTypeRef cf = v1;
  if (v1) {
    CFRetain(v1);
  }
  (*(void (**)(uint64_t, CFTypeRef *))(v2 + 16))(v2, &cf);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_235E3CB24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t utils::sendMsg<AriSdk::ARI_CsiBspShutdownRspCb_SDK>(std::shared_ptr<ice::Client>,AriSdk::MsgBase &,std::string,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::{lambda(unsigned char const*,unsigned int)#1}::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 32);
  if (v2) {
    dispatch_release(v2);
  }
  long long v3 = *(const void **)(a1 + 24);
  if (v3) {
    _Block_release(v3);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t ___ZN3ice6detail12wrapCallbackIZN5utils7sendMsgIN6AriSdk27ARI_CsiBspShutdownRspCb_SDKEEEvNSt3__110shared_ptrINS_6ClientEEERNS4_7MsgBaseENS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUlPKhjE_vEENSI_5blockIU13block_pointerFiPhjEEENS6_17integral_constantIiLi2EEEOT__block_invoke(uint64_t result, const unsigned __int8 *a2)
{
  uint64_t v2 = *(void *)(result + 32);
  if (v2)
  {
    *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v9[2] = v3;
    v9[3] = v3;
    v9[0] = v3;
    v9[1] = v3;
    AriSdk::ARI_CsiBspShutdownRspCb_SDK::ARI_CsiBspShutdownRspCb_SDK((AriSdk::ARI_CsiBspShutdownRspCb_SDK *)v9, a2);
    if (!*(void *)(v2 + 24) || !*(void *)(v2 + 32)) {
      return MEMORY[0x237DF58F0](v9);
    }
    CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
    checkError((AriSdk::MsgBase *)v9, v2, &cf);
    CFTypeRef v4 = cf;
    if (cf) {
      CFRetain(cf);
    }
    uint64_t v5 = *(const void **)(v2 + 24);
    if (v5) {
      uint64_t v6 = _Block_copy(v5);
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v7 = *(NSObject **)(v2 + 32);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
    block[3] = &__block_descriptor_tmp_181;
    if (v6)
    {
      aBlock = _Block_copy(v6);
      CFTypeRef v12 = v4;
      if (!v4) {
        goto LABEL_14;
      }
    }
    else
    {
      aBlock = 0;
      CFTypeRef v12 = v4;
      if (!v4)
      {
LABEL_14:
        dispatch_async(v7, block);
        if (v12) {
          CFRelease(v12);
        }
        if (aBlock) {
          _Block_release(aBlock);
        }
        if (v6) {
          _Block_release(v6);
        }
        if (v4) {
          CFRelease(v4);
        }
        if (cf) {
          CFRelease(cf);
        }
        return MEMORY[0x237DF58F0](v9);
      }
    }
    CFRetain(v4);
    goto LABEL_14;
  }
  return result;
}

uint64_t __copy_helper_block_e8_32c260_ZTSNSt3__110shared_ptrIZN5utils7sendMsgIN6AriSdk27ARI_CsiBspShutdownRspCb_SDKEEEvNS0_IN3ice6ClientEEERNS3_7MsgBaseENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUlPKhjE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c260_ZTSNSt3__110shared_ptrIZN5utils7sendMsgIN6AriSdk27ARI_CsiBspShutdownRspCb_SDKEEEvNS0_IN3ice6ClientEEERNS3_7MsgBaseENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUlPKhjE_EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<void utils::sendMsg<AriSdk::ARI_CsiBspShutdownRspCb_SDK>(std::shared_ptr<ice::Client>,AriSdk::MsgBase &,std::string,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void utils::sendMsg<AriSdk::ARI_CsiBspShutdownRspCb_SDK>(std::shared_ptr<ice::Client>,AriSdk::MsgBase &,std::string,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93FF38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<void utils::sendMsg<AriSdk::ARI_CsiBspShutdownRspCb_SDK>(std::shared_ptr<ice::Client>,AriSdk::MsgBase &,std::string,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void utils::sendMsg<AriSdk::ARI_CsiBspShutdownRspCb_SDK>(std::shared_ptr<ice::Client>,AriSdk::MsgBase &,std::string,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93FF38;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<void utils::sendMsg<AriSdk::ARI_CsiBspShutdownRspCb_SDK>(std::shared_ptr<ice::Client>,AriSdk::MsgBase &,std::string,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void utils::sendMsg<AriSdk::ARI_CsiBspShutdownRspCb_SDK>(std::shared_ptr<ice::Client>,AriSdk::MsgBase &,std::string,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 56);
  if (v2) {
    dispatch_release(v2);
  }
  long long v3 = *(const void **)(a1 + 48);
  if (v3) {
    _Block_release(v3);
  }
  if (*(char *)(a1 + 47) < 0)
  {
    CFTypeRef v4 = *(void **)(a1 + 24);
    operator delete(v4);
  }
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_NS3_IS6_EEEEEvDpT__block_invoke(void *a1)
{
  uint64_t v3 = a1[4];
  uint64_t v2 = (const void *)a1[5];
  CFTypeRef v7 = v2;
  if (v2) {
    CFRetain(v2);
  }
  CFTypeRef v4 = (const void *)a1[6];
  if (v4 && (CFTypeID v5 = CFGetTypeID(v4), v5 == CFDictionaryGetTypeID()))
  {
    CFTypeRef cf = v4;
    CFRetain(v4);
  }
  else
  {
    CFTypeRef cf = 0;
  }
  (*(void (**)(uint64_t, CFTypeRef *, CFTypeRef *))(v3 + 16))(v3, &v7, &cf);
  if (cf) {
    CFRelease(cf);
  }
  if (v7) {
    CFRelease(v7);
  }
}

void sub_235E3CF4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, CFTypeRef a10)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a10) {
    CFRelease(a10);
  }
  _Unwind_Resume(exception_object);
}

CFTypeRef __copy_helper_block_e8_32c100_ZTSN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEE40c38_ZTSN3ctu2cf11CFSharedRefI9__CFErrorEE48c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(void *a1, void *a2)
{
  CFTypeRef v4 = (const void *)a2[4];
  if (!v4)
  {
    uint64_t v6 = (const void *)a2[5];
    a1[4] = 0;
    a1[5] = v6;
    if (!v6) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  CFTypeID v5 = _Block_copy(v4);
  uint64_t v6 = (const void *)a2[5];
  a1[4] = v5;
  a1[5] = v6;
  if (v6) {
LABEL_5:
  }
    CFRetain(v6);
LABEL_6:
  CFTypeRef result = (CFTypeRef)a2[6];
  a1[6] = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_32c100_ZTSN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEE40c38_ZTSN3ctu2cf11CFSharedRefI9__CFErrorEE48c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(void *a1)
{
  uint64_t v2 = (const void *)a1[6];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)a1[5];
  if (v3) {
    CFRelease(v3);
  }
  CFTypeRef v4 = (const void *)a1[4];
  if (v4) {
    _Block_release(v4);
  }
}

void ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver15getBasebandTimeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS8_IK14__CFDictionaryEEEEEEUb0_E3__1vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      uint64_t v5 = v2[4];
      uint64_t v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        CFTypeRef v7 = v6;
        if (!*v2)
        {
LABEL_50:
          if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        long long v32 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v31[2] = v8;
        v31[3] = v8;
        v31[0] = v8;
        v31[1] = v8;
        AriSdk::ARI_CsiGetSystemTimeResp_SDK::ARI_CsiGetSystemTimeResp_SDK((AriSdk::ARI_CsiGetSystemTimeResp_SDK *)v31, a2);
        CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        block[23] = 21;
        strcpy(block, "getting baseband time");
        checkError((AriSdk::MsgBase *)v31, (uint64_t)block, &cf);
        if ((block[23] & 0x80000000) != 0) {
          operator delete(*(void **)block);
        }
        CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
        if (cf) {
          uint64_t v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          uint64_t v11 = 0;
        }
        if (v11)
        {
LABEL_11:
          if (!v2[2] || !v2[3])
          {
LABEL_45:
            if (Mutable) {
              CFRelease(Mutable);
            }
            if (cf) {
              CFRelease(cf);
            }
            MEMORY[0x237DF5A50](v31);
            goto LABEL_50;
          }
          CFTypeRef v12 = cf;
          if (cf) {
            CFRetain(cf);
          }
          if (Mutable) {
            CFRetain(Mutable);
          }
          uint64_t v13 = (const void *)v2[2];
          if (v13) {
            uint64_t v14 = _Block_copy(v13);
          }
          else {
            uint64_t v14 = 0;
          }
          int v17 = v2[3];
          *(void *)long long block = MEMORY[0x263EF8330];
          *(void *)&block[8] = 1174405120;
          *(void *)&block[16] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_NS3_IS6_EEEEEvDpT__block_invoke;
          *(void *)&block[24] = &__block_descriptor_tmp_184;
          if (v14)
          {
            *(void *)&long long v39 = _Block_copy(v14);
            *((void *)&v39 + 1) = v12;
            if (!v12) {
              goto LABEL_31;
            }
          }
          else
          {
            *(void *)&long long v39 = 0;
            *((void *)&v39 + 1) = v12;
            if (!v12)
            {
LABEL_31:
              *(void *)&long long v40 = Mutable;
              if (Mutable) {
                CFRetain(Mutable);
              }
              dispatch_async(v17, block);
              if ((void)v40) {
                CFRelease((CFTypeRef)v40);
              }
              if (*((void *)&v39 + 1)) {
                CFRelease(*((CFTypeRef *)&v39 + 1));
              }
              if ((void)v39) {
                _Block_release((const void *)v39);
              }
              if (v14) {
                _Block_release(v14);
              }
              if (Mutable) {
                CFRelease(Mutable);
              }
              if (v12) {
                CFRelease(v12);
              }
              goto LABEL_45;
            }
          }
          CFRetain(v12);
          goto LABEL_31;
        }
        if (AriSdk::ARI_CsiGetSystemTimeResp_SDK::unpack((AriSdk::ARI_CsiGetSystemTimeResp_SDK *)v31))
        {
          *(void *)__str = operator new(0x20uLL);
          *(_OWORD *)&__str[8] = xmmword_235E76350;
          strcpy(*(char **)__str, "Error response from ARI or BB");
          CreateError();
          CFTypeRef v15 = cf;
          CFTypeRef cf = *(CFTypeRef *)block;
          *(void *)long long block = 0;
          if (v15)
          {
            CFRelease(v15);
            if (*(void *)block) {
              CFRelease(*(CFTypeRef *)block);
            }
          }
          if ((__str[23] & 0x80000000) == 0) {
            goto LABEL_11;
          }
          uint64_t v16 = *(void **)__str;
LABEL_74:
          operator delete(v16);
          goto LABEL_11;
        }
        uint64_t v18 = *v32;
        time_t v19 = *v32 / 0x3E8uLL;
        memset(&v29, 0, sizeof(v29));
        *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v39 = v20;
        long long v40 = v20;
        *(_OWORD *)long long block = v20;
        *(_OWORD *)&block[16] = v20;
        long long v36 = v20;
        long long v37 = v20;
        *(_OWORD *)__str = v20;
        *(_OWORD *)&__str[16] = v20;
        time_t v28 = v19;
        size_t v21 = localtime(&v28);
        strftime(block, 0x40uLL, "%Y-%m-%d %H:%M:%S", v21);
        unsigned int v22 = 1000 * (v18 - 1000 * v19);
        snprintf(__str, 0x40uLL, "%s.%06d", block, v22);
        std::string::__assign_external(&v29, __str);
        uint64_t v23 = (const void *)*MEMORY[0x263F8B840];
        int v34 = v23;
        if (v23) {
          CFRetain(v23);
        }
        valuePtr.__r_.__value_.__r.__words[0] = v19;
        CFNumberRef v24 = CFNumberCreate(v9, kCFNumberLongLongType, &valuePtr);
        CFNumberRef v25 = v24;
        CFNumberRef v33 = v24;
        if (v23 && v24)
        {
          CFDictionaryAddValue(Mutable, v23, v24);
        }
        else if (!v24)
        {
          goto LABEL_60;
        }
        CFRelease(v25);
LABEL_60:
        if (v23) {
          CFRelease(v23);
        }
        ctu::cf::insert<__CFString const*,unsigned int>(Mutable, (CFTypeRef)*MEMORY[0x263F8B860], v22, v9);
        if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&valuePtr, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
        }
        else {
          std::string valuePtr = v29;
        }
        ctu::cf::insert<__CFString const*,std::string>((int)Mutable, (CFTypeRef)*MEMORY[0x263F8B838]);
        if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(valuePtr.__r_.__value_.__l.__data_);
          uint64_t v26 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
          {
LABEL_67:
            uint64_t v27 = &v29;
            if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              uint64_t v27 = (std::string *)v29.__r_.__value_.__r.__words[0];
            }
            LODWORD(valuePtr.__r_.__value_.__l.__data_) = 136315138;
            *(std::string::size_type *)((char *)valuePtr.__r_.__value_.__r.__words + 4) = (std::string::size_type)v27;
            _os_log_impl(&dword_235DB9000, v26, OS_LOG_TYPE_DEFAULT, "#I Baseband time: %s", (uint8_t *)&valuePtr, 0xCu);
            if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_11;
            }
            goto LABEL_73;
          }
        }
        else
        {
          uint64_t v26 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_67;
          }
        }
        if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_11;
        }
LABEL_73:
        uint64_t v16 = (void *)v29.__r_.__value_.__r.__words[0];
        goto LABEL_74;
      }
    }
  }
}

void sub_235E3D5A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, CFTypeRef cf, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,const void *a30,const void *a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a30);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a31);
  if (a18 < 0) {
    operator delete(__p);
  }
  if (v38) {
    CFRelease(v38);
  }
  if (cf) {
    CFRelease(cf);
  }
  MEMORY[0x237DF5A50](&a20);
  if (!atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c180_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver15getBasebandTimeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS7_IK14__CFDictionaryEEEEEEUb0_E3__1EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c180_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver15getBasebandTimeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS7_IK14__CFDictionaryEEEEEEUb0_E3__1EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver15getBasebandTimeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS7_IK14__CFDictionaryEEEEEEUb0_E3__1NS_9allocatorISG_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93FFE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver15getBasebandTimeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS7_IK14__CFDictionaryEEEEEEUb0_E3__1NS_9allocatorISG_EEED0Ev(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93FFE8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver15getBasebandTimeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS7_IK14__CFDictionaryEEEEEEUb0_E3__1NS_9allocatorISG_EEE16__on_zero_sharedEv(void *a1)
{
  uint64_t v2 = a1[6];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = (const void *)a1[5];
  if (v3) {
    _Block_release(v3);
  }
  CFTypeRef v4 = (std::__shared_weak_count *)a1[4];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke_0(uint64_t a1)
{
}

void ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver20getBasebandFWVersionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS8_IK14__CFDictionaryEEEEEEUb1_E3__2vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      uint64_t v5 = v2[4];
      uint64_t v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        CFTypeRef v7 = v6;
        if (!*v2)
        {
LABEL_52:
          if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        __src = (void *)0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v38[2] = v8;
        v38[3] = v8;
        v38[0] = v8;
        v38[1] = v8;
        AriSdk::ARI_CsiSysGetInfoRspCbV2_SDK::ARI_CsiSysGetInfoRspCbV2_SDK((AriSdk::ARI_CsiSysGetInfoRspCbV2_SDK *)v38, a2);
        CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        __p[0] = operator new(0x28uLL);
        *(_OWORD *)&__p[1] = xmmword_235E71950;
        strcpy((char *)__p[0], "getting baseband firmware version");
        checkError((AriSdk::MsgBase *)v38, (uint64_t)__p, &cf);
        if (SHIBYTE(__p[2]) < 0) {
          operator delete(__p[0]);
        }
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
        if (cf) {
          uint64_t v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          uint64_t v10 = 0;
        }
        if (v10) {
          goto LABEL_19;
        }
        if (AriSdk::ARI_CsiSysGetInfoRspCbV2_SDK::unpack((AriSdk::ARI_CsiSysGetInfoRspCbV2_SDK *)v38)
          || *((_DWORD *)__src + 129))
        {
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
          *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = xmmword_235E76350;
          strcpy(buf.__r_.__value_.__l.__data_, "Error response from ARI or BB");
          CreateError();
          CFTypeRef v11 = cf;
          CFTypeRef cf = __p[0];
          __p[0] = 0;
          if (v11)
          {
            CFRelease(v11);
            if (__p[0]) {
              CFRelease(__p[0]);
            }
          }
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          {
            CFTypeRef v12 = (void *)buf.__r_.__value_.__r.__words[0];
LABEL_18:
            operator delete(v12);
            goto LABEL_19;
          }
          goto LABEL_19;
        }
        memcpy(__p, __src, sizeof(__p));
        if (LODWORD(__p[64]) >= 0x200) {
          std::string::size_type v17 = 512;
        }
        else {
          std::string::size_type v17 = LODWORD(__p[64]);
        }
        LODWORD(__p[64]) = v17;
        memset(&v36, 170, sizeof(v36));
        if (v17 >= 0x17)
        {
          uint64_t v19 = (v17 & 0x3F8) + 8;
          if ((v17 | 7) != 0x17) {
            uint64_t v19 = v17 | 7;
          }
          uint64_t v20 = v19 + 1;
          uint64_t v18 = (std::string *)operator new(v19 + 1);
          v36.__r_.__value_.__l.__size_ = v17;
          v36.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
          v36.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
        }
        else
        {
          *((unsigned char *)&v36.__r_.__value_.__s + 23) = v17;
          uint64_t v18 = &v36;
          if (!v17)
          {
LABEL_65:
            v18->__r_.__value_.__s.__data_[v17] = 0;
            size_t v21 = *(NSObject **)(v5 + 40);
            if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
            {
              unsigned int v22 = &v36;
              if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                unsigned int v22 = (std::string *)v36.__r_.__value_.__r.__words[0];
              }
              LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
              *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v22;
              _os_log_impl(&dword_235DB9000, v21, OS_LOG_TYPE_DEFAULT, "#I Baseband FW Version: %s", (uint8_t *)&buf, 0xCu);
            }
            std::string::size_type v23 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
            LODWORD(v24) = SHIBYTE(v36.__r_.__value_.__r.__words[2]);
            std::string::size_type size = v36.__r_.__value_.__l.__size_;
            if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v26 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v26 = v36.__r_.__value_.__l.__size_;
            }
            if (v26 < 2
              || ((uint64_t v27 = (std::string *)v36.__r_.__value_.__r.__words[0],
                   (v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                ? (time_t v28 = &v36)
                : (time_t v28 = (std::string *)v36.__r_.__value_.__r.__words[0]),
                  (std::string v29 = memchr((char *)&v28->__r_.__value_.__l.__data_ + 1, 45, v26 - 1)) == 0
               || (std::string::size_type v30 = v29 - (unsigned char *)v28, v29 - (unsigned char *)v28 == -1)))
            {
LABEL_96:
              if ((v24 & 0x80) != 0) {
                std::string::__init_copy_ctor_external(&buf, v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
              }
              else {
                std::string buf = v36;
              }
              ctu::cf::insert<__CFString const*,std::string>((int)Mutable, (CFTypeRef)*MEMORY[0x263F8B8C8]);
              if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(buf.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
              {
                CFTypeRef v12 = (void *)v36.__r_.__value_.__r.__words[0];
                goto LABEL_18;
              }
LABEL_19:
              if (!v2[2] || !v2[3])
              {
LABEL_47:
                if (Mutable) {
                  CFRelease(Mutable);
                }
                if (cf) {
                  CFRelease(cf);
                }
                MEMORY[0x237DF5C40](v38);
                goto LABEL_52;
              }
              CFTypeRef v13 = cf;
              if (cf) {
                CFRetain(cf);
              }
              if (Mutable) {
                CFRetain(Mutable);
              }
              uint64_t v14 = (const void *)v2[2];
              if (v14) {
                CFTypeRef v15 = _Block_copy(v14);
              }
              else {
                CFTypeRef v15 = 0;
              }
              uint64_t v16 = v2[3];
              __p[0] = (void *)MEMORY[0x263EF8330];
              __p[1] = (void *)1174405120;
              __p[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_NS3_IS6_EEEEEvDpT__block_invoke;
              __p[3] = &__block_descriptor_tmp_184;
              if (v15)
              {
                __p[4] = _Block_copy(v15);
                __p[5] = (void *)v13;
                if (!v13) {
                  goto LABEL_33;
                }
              }
              else
              {
                __p[4] = 0;
                __p[5] = (void *)v13;
                if (!v13)
                {
LABEL_33:
                  __p[6] = Mutable;
                  if (Mutable) {
                    CFRetain(Mutable);
                  }
                  dispatch_async(v16, __p);
                  if (__p[6]) {
                    CFRelease(__p[6]);
                  }
                  if (__p[5]) {
                    CFRelease(__p[5]);
                  }
                  if (__p[4]) {
                    _Block_release(__p[4]);
                  }
                  if (v15) {
                    _Block_release(v15);
                  }
                  if (Mutable) {
                    CFRelease(Mutable);
                  }
                  if (v13) {
                    CFRelease(v13);
                  }
                  goto LABEL_47;
                }
              }
              CFRetain(v13);
              goto LABEL_33;
            }
            if ((v24 & 0x80000000) != 0)
            {
              if (size > v30)
              {
                std::string::size_type v23 = size;
LABEL_83:
                std::string::size_type v31 = v30 + 1;
                std::string::size_type v32 = v23 - (v30 + 1);
                if (v32 < v26) {
                  std::string::size_type v26 = v32;
                }
                if (v26 >= 0x7FFFFFFFFFFFFFF8) {
                  std::string::__throw_length_error[abi:ne180100]();
                }
                if (v26 >= 0x17)
                {
                  uint64_t v34 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v26 | 7) != 0x17) {
                    uint64_t v34 = v26 | 7;
                  }
                  uint64_t v35 = v34 + 1;
                  p_std::string buf = (std::string *)operator new(v34 + 1);
                  buf.__r_.__value_.__l.__size_ = v26;
                  buf.__r_.__value_.__r.__words[2] = v35 | 0x8000000000000000;
                  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)p_buf;
                }
                else
                {
                  *((unsigned char *)&buf.__r_.__value_.__s + 23) = v26;
                  p_std::string buf = &buf;
                  if (!v26) {
                    goto LABEL_93;
                  }
                }
                memmove(p_buf, (char *)v27 + v31, v26);
LABEL_93:
                p_buf->__r_.__value_.__s.__data_[v26] = 0;
                if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v36.__r_.__value_.__l.__data_);
                }
                std::string v36 = buf;
                std::string::size_type v24 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
                goto LABEL_96;
              }
            }
            else if (v30 < v23)
            {
              uint64_t v27 = &v36;
              goto LABEL_83;
            }
            std::string::__throw_out_of_range[abi:ne180100]();
          }
        }
        memcpy(v18, __p, v17);
        goto LABEL_65;
      }
    }
  }
}

void sub_235E3DE48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, CFTypeRef cf, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (v31) {
    CFRelease(v31);
  }
  if (cf) {
    CFRelease(cf);
  }
  MEMORY[0x237DF5C40](&a16);
  if (!atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c185_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver20getBasebandFWVersionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS7_IK14__CFDictionaryEEEEEEUb1_E3__2EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c185_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver20getBasebandFWVersionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS7_IK14__CFDictionaryEEEEEEUb1_E3__2EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver20getBasebandFWVersionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS7_IK14__CFDictionaryEEEEEEUb1_E3__2NS_9allocatorISG_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940098;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver20getBasebandFWVersionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS7_IK14__CFDictionaryEEEEEEUb1_E3__2NS_9allocatorISG_EEED0Ev(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940098;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver20getBasebandFWVersionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS7_IK14__CFDictionaryEEEEEEUb1_E3__2NS_9allocatorISG_EEE16__on_zero_sharedEv(void *a1)
{
  uint64_t v2 = a1[6];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = (const void *)a1[5];
  if (v3) {
    _Block_release(v3);
  }
  CFTypeRef v4 = (std::__shared_weak_count *)a1[4];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver22getRFCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS8_IK14__CFDictionaryEEEEEEUb2_E3__3vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      uint64_t v5 = std::__shared_weak_count::lock(v3);
      if (v5)
      {
        uint64_t v6 = v5;
        if (!*v2)
        {
LABEL_54:
          if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
          return;
        }
        *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v19[3] = v7;
        long long v20 = v7;
        v19[1] = v7;
        _OWORD v19[2] = v7;
        v19[0] = v7;
        AriSdk::ARI_CsiBspGetCalibrationStatusRspCb_SDK::ARI_CsiBspGetCalibrationStatusRspCb_SDK((AriSdk::ARI_CsiBspGetCalibrationStatusRspCb_SDK *)v19, a2);
        CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        long long block = (char *)operator new(0x20uLL);
        long long v22 = xmmword_235E72AD0;
        strcpy(block, "getting calibration status");
        checkError((AriSdk::MsgBase *)v19, (uint64_t)&block, &cf);
        if (SHIBYTE(v22) < 0) {
          operator delete(block);
        }
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
        if (cf) {
          CFAllocatorRef v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          CFAllocatorRef v9 = 0;
        }
        if (v9)
        {
LABEL_21:
          if (!v2[2] || !v2[3])
          {
LABEL_49:
            if (Mutable) {
              CFRelease(Mutable);
            }
            if (cf) {
              CFRelease(cf);
            }
            MEMORY[0x237DF6990](v19);
            goto LABEL_54;
          }
          CFTypeRef v13 = cf;
          if (cf) {
            CFRetain(cf);
          }
          if (Mutable) {
            CFRetain(Mutable);
          }
          uint64_t v14 = (const void *)v2[2];
          if (v14) {
            CFTypeRef v15 = _Block_copy(v14);
          }
          else {
            CFTypeRef v15 = 0;
          }
          uint64_t v16 = v2[3];
          long long block = (char *)MEMORY[0x263EF8330];
          *(void *)&long long v22 = 1174405120;
          *((void *)&v22 + 1) = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_NS3_IS6_EEEEEvDpT__block_invoke;
          std::string::size_type v23 = &__block_descriptor_tmp_184;
          if (v15)
          {
            std::string::size_type v24 = _Block_copy(v15);
            CFTypeRef v25 = v13;
            if (!v13) {
              goto LABEL_35;
            }
          }
          else
          {
            std::string::size_type v24 = 0;
            CFTypeRef v25 = v13;
            if (!v13)
            {
LABEL_35:
              CFMutableDictionaryRef v26 = Mutable;
              if (Mutable) {
                CFRetain(Mutable);
              }
              dispatch_async(v16, &block);
              if (v26) {
                CFRelease(v26);
              }
              if (v25) {
                CFRelease(v25);
              }
              if (v24) {
                _Block_release(v24);
              }
              if (v15) {
                _Block_release(v15);
              }
              if (Mutable) {
                CFRelease(Mutable);
              }
              if (v13) {
                CFRelease(v13);
              }
              goto LABEL_49;
            }
          }
          CFRetain(v13);
          goto LABEL_35;
        }
        if (AriSdk::ARI_CsiBspGetCalibrationStatusRspCb_SDK::unpack((AriSdk::ARI_CsiBspGetCalibrationStatusRspCb_SDK *)v19))
        {
          std::string __p = (char *)operator new(0x20uLL);
          strcpy(__p, "Error response from baseband");
          CreateError();
          CFTypeRef v10 = cf;
          CFTypeRef cf = block;
          long long block = 0;
          if (!v10) {
            goto LABEL_19;
          }
          CFRelease(v10);
          CFTypeRef v11 = block;
          if (!block) {
            goto LABEL_19;
          }
        }
        else
        {
          if (!*(_DWORD *)v20)
          {
            ctu::cf::insert<__CFString const*,BOOL>(Mutable, (CFTypeRef)*MEMORY[0x263F8B910], **((_DWORD **)&v20 + 1) == 1);
            goto LABEL_21;
          }
          std::string __p = (char *)operator new(0x38uLL);
          strcpy(__p, "failed response in retrieving calibration status");
          CreateError();
          CFTypeRef v12 = cf;
          CFTypeRef cf = block;
          long long block = 0;
          if (!v12) {
            goto LABEL_19;
          }
          CFRelease(v12);
          CFTypeRef v11 = block;
          if (!block) {
            goto LABEL_19;
          }
        }
        CFRelease(v11);
LABEL_19:
        operator delete(__p);
        goto LABEL_21;
      }
    }
  }
}

void sub_235E3E4CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, CFTypeRef cf, char a16)
{
  if (v17) {
    CFRelease(v17);
  }
  if (cf) {
    CFRelease(cf);
  }
  MEMORY[0x237DF6990](&a16);
  if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c187_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver22getRFCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS7_IK14__CFDictionaryEEEEEEUb2_E3__3EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c187_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver22getRFCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS7_IK14__CFDictionaryEEEEEEUb2_E3__3EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver22getRFCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS7_IK14__CFDictionaryEEEEEEUb2_E3__3NS_9allocatorISG_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940118;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver22getRFCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS7_IK14__CFDictionaryEEEEEEUb2_E3__3NS_9allocatorISG_EEED0Ev(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940118;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver22getRFCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS7_IK14__CFDictionaryEEEEEEUb2_E3__3NS_9allocatorISG_EEE16__on_zero_sharedEv(void *a1)
{
  uint64_t v2 = a1[6];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = (const void *)a1[5];
  if (v3) {
    _Block_release(v3);
  }
  CFTypeRef v4 = (std::__shared_weak_count *)a1[4];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver13getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS8_IK14__CFDictionaryEEEEEEUb3_E3__4vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      uint64_t v5 = std::__shared_weak_count::lock(v3);
      if (v5)
      {
        uint64_t v6 = v5;
        if (!*v2)
        {
LABEL_53:
          if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
          return;
        }
        *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v33[3] = v7;
        long long v34 = v7;
        v33[1] = v7;
        _OWORD v33[2] = v7;
        v33[0] = v7;
        AriSdk::ARI_CsiIceWakeupReasonRspCb_SDK::ARI_CsiIceWakeupReasonRspCb_SDK((AriSdk::ARI_CsiIceWakeupReasonRspCb_SDK *)v33, a2);
        CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        *(void *)std::string __p = operator new(0x20uLL);
        *(_OWORD *)&__p[8] = xmmword_235E75070;
        strcpy(*(char **)__p, "get baseband wake reason");
        checkError((AriSdk::MsgBase *)v33, (uint64_t)__p, &cf);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
        if (cf) {
          CFTypeRef v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          CFTypeRef v10 = 0;
        }
        if (!v10)
        {
          if (AriSdk::ARI_CsiIceWakeupReasonRspCb_SDK::unpack((AriSdk::ARI_CsiIceWakeupReasonRspCb_SDK *)v33))
          {
            std::string::size_type v31 = (char *)operator new(0x38uLL);
            strcpy(v31, "Failed to get baseband wake reason (unpack error)");
            CreateError();
            CFTypeRef v13 = cf;
            CFTypeRef cf = *(CFTypeRef *)__p;
            *(void *)std::string __p = 0;
            if (!v13) {
              goto LABEL_19;
            }
            CFRelease(v13);
            uint64_t v14 = *(const void **)__p;
            if (!*(void *)__p) {
              goto LABEL_19;
            }
            goto LABEL_18;
          }
          if (*(_DWORD *)v34)
          {
            std::string::size_type v31 = (char *)operator new(0x38uLL);
            strcpy(v31, "Failed to get baseband wake reason (result error)");
            CreateError();
            CFTypeRef v15 = cf;
            CFTypeRef cf = *(CFTypeRef *)__p;
            *(void *)std::string __p = 0;
            if (!v15) {
              goto LABEL_19;
            }
            CFRelease(v15);
            uint64_t v14 = *(const void **)__p;
            if (!*(void *)__p) {
              goto LABEL_19;
            }
LABEL_18:
            CFRelease(v14);
LABEL_19:
            operator delete(v31);
            goto LABEL_20;
          }
          *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)((char *)v41 + 12) = v20;
          long long v40 = v20;
          v41[0] = v20;
          long long v38 = v20;
          long long v39 = v20;
          *(_OWORD *)std::string v36 = v20;
          *(_OWORD *)long long v37 = v20;
          *(_OWORD *)std::string __p = v20;
          *(_OWORD *)&__p[16] = v20;
          *(_OWORD *)std::string __p = **((_OWORD **)&v34 + 1);
          long long v21 = *(_OWORD *)(*((void *)&v34 + 1) + 64);
          long long v23 = *(_OWORD *)(*((void *)&v34 + 1) + 16);
          long long v22 = *(_OWORD *)(*((void *)&v34 + 1) + 32);
          *(_OWORD *)long long v37 = *(_OWORD *)(*((void *)&v34 + 1) + 48);
          long long v38 = v21;
          *(_OWORD *)&__p[16] = v23;
          *(_OWORD *)std::string v36 = v22;
          long long v25 = *(_OWORD *)(*((void *)&v34 + 1) + 96);
          long long v24 = *(_OWORD *)(*((void *)&v34 + 1) + 112);
          long long v26 = *(_OWORD *)(*((void *)&v34 + 1) + 80);
          *(_OWORD *)((char *)v41 + 12) = *(_OWORD *)(*((void *)&v34 + 1) + 124);
          long long v40 = v25;
          v41[0] = v24;
          long long v39 = v26;
          ctu::cf::insert<char const*,unsigned int>(Mutable, *(unsigned int *)__p, v8, v11, v12);
          if (*(_DWORD *)&__p[8] >= 0x80u) {
            CFIndex v27 = 128;
          }
          else {
            CFIndex v27 = *(unsigned int *)&__p[8];
          }
          if (v27)
          {
            CFDataRef v28 = CFDataCreate(v8, (const UInt8 *)((unint64_t)__p | 0xC), v27);
            ctu::cf::insert<char const*,__CFData const*>(Mutable, v28, (uint64_t)v8, v29, v30);
            if (v28) {
              CFRelease(v28);
            }
          }
        }
LABEL_20:
        if (!v2[2] || !v2[3])
        {
LABEL_48:
          if (Mutable) {
            CFRelease(Mutable);
          }
          if (cf) {
            CFRelease(cf);
          }
          MEMORY[0x237DF6160](v33);
          goto LABEL_53;
        }
        CFTypeRef v16 = cf;
        if (cf) {
          CFRetain(cf);
        }
        if (Mutable) {
          CFRetain(Mutable);
        }
        std::string::size_type v17 = (const void *)v2[2];
        if (v17) {
          uint64_t v18 = _Block_copy(v17);
        }
        else {
          uint64_t v18 = 0;
        }
        uint64_t v19 = v2[3];
        *(void *)std::string __p = MEMORY[0x263EF8330];
        *(void *)&__p[8] = 1174405120;
        *(void *)&__p[16] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_NS3_IS6_EEEEEvDpT__block_invoke;
        *(void *)&__p[24] = &__block_descriptor_tmp_184;
        if (v18)
        {
          v36[0] = _Block_copy(v18);
          v36[1] = v16;
          if (!v16) {
            goto LABEL_34;
          }
        }
        else
        {
          v36[0] = 0;
          v36[1] = v16;
          if (!v16)
          {
LABEL_34:
            v37[0] = Mutable;
            if (Mutable) {
              CFRetain(Mutable);
            }
            dispatch_async(v19, __p);
            if (v37[0]) {
              CFRelease(v37[0]);
            }
            if (v36[1]) {
              CFRelease(v36[1]);
            }
            if (v36[0]) {
              _Block_release(v36[0]);
            }
            if (v18) {
              _Block_release(v18);
            }
            if (Mutable) {
              CFRelease(Mutable);
            }
            if (v16) {
              CFRelease(v16);
            }
            goto LABEL_48;
          }
        }
        CFRetain(v16);
        goto LABEL_34;
      }
    }
  }
}

void sub_235E3EBB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, CFTypeRef cf, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c178_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver13getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS7_IK14__CFDictionaryEEEEEEUb3_E3__4EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c178_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver13getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS7_IK14__CFDictionaryEEEEEEUb3_E3__4EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver13getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS7_IK14__CFDictionaryEEEEEEUb3_E3__4NS_9allocatorISG_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940198;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver13getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS7_IK14__CFDictionaryEEEEEEUb3_E3__4NS_9allocatorISG_EEED0Ev(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940198;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver13getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS7_IK14__CFDictionaryEEEEEEUb3_E3__4NS_9allocatorISG_EEE16__on_zero_sharedEv(void *a1)
{
  uint64_t v2 = a1[6];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = (const void *)a1[5];
  if (v3) {
    _Block_release(v3);
  }
  CFTypeRef v4 = (std::__shared_weak_count *)a1[4];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void ctu::cf::insert<char const*,unsigned int>(__CFDictionary *a1, unsigned int a2, const __CFAllocator *a3, uint64_t a4, const __CFAllocator *a5)
{
  unint64_t valuePtr = 0;
  ctu::cf::convert_copy((ctu::cf *)&valuePtr, (const __CFString **)"kKeyBasebandWakeChannel", (const char *)0x8000100, (uint64_t)a3, a5);
  CFAllocatorRef v8 = (const void *)valuePtr;
  unint64_t valuePtr = a2;
  CFNumberRef v9 = CFNumberCreate(a3, kCFNumberLongLongType, &valuePtr);
  CFNumberRef v10 = v9;
  if (v8) {
    BOOL v11 = v9 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11)
  {
    if (!v9) {
      goto LABEL_8;
    }
  }
  else
  {
    CFDictionaryAddValue(a1, v8, v9);
  }
  CFRelease(v10);
LABEL_8:
  if (v8) {
    CFRelease(v8);
  }
}

void sub_235E3EF0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_235E3EF30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::insert<char const*,__CFData const*>(__CFDictionary *a1, const void *a2, uint64_t a3, uint64_t a4, const __CFAllocator *a5)
{
  CFTypeRef cf = 0;
  ctu::cf::convert_copy((ctu::cf *)&cf, (const __CFString **)"kKeyBasebandWakeData", (const char *)0x8000100, a3, a5);
  CFTypeRef v7 = cf;
  CFTypeRef cf = a2;
  if (a2)
  {
    CFRetain(a2);
    if (v7) {
      CFDictionaryAddValue(a1, v7, a2);
    }
    CFRelease(a2);
  }
  if (v7) {
    CFRelease(v7);
  }
}

void sub_235E3EFD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

void sub_235E3EFF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver16setOperatingModeEyNS2_13OperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb4_E3__5vEENS5_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      uint64_t v5 = std::__shared_weak_count::lock(v3);
      if (v5)
      {
        uint64_t v6 = v5;
        if (!*v2)
        {
LABEL_30:
          if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
          return;
        }
        unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v13[2] = v7;
        v13[3] = v7;
        v13[0] = v7;
        v13[1] = v7;
        AriSdk::ARI_CsiModeSetRespCb_SDK::ARI_CsiModeSetRespCb_SDK((AriSdk::ARI_CsiModeSetRespCb_SDK *)v13, a2);
        CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        std::string __p = operator new(0x20uLL);
        long long v16 = xmmword_235E75010;
        strcpy((char *)__p, "setting baseband operating mode");
        checkError((AriSdk::MsgBase *)v13, (uint64_t)&__p, &cf);
        if (SHIBYTE(v16) < 0)
        {
          operator delete(__p);
          CFAllocatorRef v8 = (const void *)v2[2];
          if (!v8) {
            goto LABEL_27;
          }
        }
        else
        {
          CFAllocatorRef v8 = (const void *)v2[2];
          if (!v8) {
            goto LABEL_27;
          }
        }
        if (v2[3])
        {
          CFTypeRef v9 = cf;
          if (cf && (CFRetain(cf), (CFAllocatorRef v8 = (const void *)v2[2]) == 0)) {
            CFNumberRef v10 = 0;
          }
          else {
            CFNumberRef v10 = _Block_copy(v8);
          }
          BOOL v11 = v2[3];
          std::string __p = (void *)MEMORY[0x263EF8330];
          *(void *)&long long v16 = 1174405120;
          *((void *)&v16 + 1) = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
          std::string::size_type v17 = &__block_descriptor_tmp_181;
          if (v10)
          {
            aBlock = _Block_copy(v10);
            CFTypeRef v19 = v9;
            if (!v9) {
              goto LABEL_19;
            }
          }
          else
          {
            aBlock = 0;
            CFTypeRef v19 = v9;
            if (!v9)
            {
LABEL_19:
              dispatch_async(v11, &__p);
              if (v19) {
                CFRelease(v19);
              }
              if (aBlock) {
                _Block_release(aBlock);
              }
              if (v10) {
                _Block_release(v10);
              }
              if (v9) {
                CFRelease(v9);
              }
              goto LABEL_27;
            }
          }
          CFRetain(v9);
          goto LABEL_19;
        }
LABEL_27:
        if (cf) {
          CFRelease(cf);
        }
        MEMORY[0x237DF55A0](v13);
        goto LABEL_30;
      }
    }
  }
}

void sub_235E3F26C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  MEMORY[0x237DF55A0](&a11);
  if (!atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c178_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver16setOperatingModeEyNS1_13OperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb4_E3__5EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c178_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver16setOperatingModeEyNS1_13OperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb4_E3__5EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver16setOperatingModeEyNS1_13OperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb4_E3__5NS_9allocatorISE_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940218;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver16setOperatingModeEyNS1_13OperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb4_E3__5NS_9allocatorISE_EEED0Ev(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940218;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver16setOperatingModeEyNS1_13OperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb4_E3__5NS_9allocatorISE_EEE16__on_zero_sharedEv(void *a1)
{
  uint64_t v2 = a1[6];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = (const void *)a1[5];
  if (v3) {
    _Block_release(v3);
  }
  CFTypeRef v4 = (std::__shared_weak_count *)a1[4];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver16getOperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS8_IK14__CFDictionaryEEEEEEUb5_E3__6vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      uint64_t v5 = v2[4];
      uint64_t v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        long long v7 = v6;
        if (!*v2)
        {
LABEL_50:
          if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        _OWORD v21[2] = v8;
        v21[3] = v8;
        v21[0] = v8;
        v21[1] = v8;
        AriSdk::ARI_CsiModeGetRspCb_SDK::ARI_CsiModeGetRspCb_SDK((AriSdk::ARI_CsiModeGetRspCb_SDK *)v21, a2);
        CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        std::string __p = operator new(0x20uLL);
        long long v24 = xmmword_235E75010;
        strcpy((char *)__p, "getting baseband operating mode");
        checkError((AriSdk::MsgBase *)v21, (uint64_t)&__p, &cf);
        if (SHIBYTE(v24) < 0) {
          operator delete(__p);
        }
        CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
        if (cf) {
          BOOL v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          BOOL v11 = 0;
        }
        if (!v11)
        {
          if (AriSdk::ARI_CsiModeGetRspCb_SDK::unpack((AriSdk::ARI_CsiModeGetRspCb_SDK *)v21))
          {
            *(void *)std::string buf = operator new(0x20uLL);
            *(_OWORD *)&buf[8] = xmmword_235E76350;
            strcpy(*(char **)buf, "Error response from ARI or BB");
            CreateError();
            CFTypeRef v15 = cf;
            CFTypeRef cf = __p;
            std::string __p = 0;
            if (v15)
            {
              CFRelease(v15);
              if (__p) {
                CFRelease(__p);
              }
            }
            if ((buf[23] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
          }
          else
          {
            int v17 = radio::OpMode::convertMode(*(radio::OpMode **)(v5 + 296));
            ctu::cf::insert<__CFString const*,int>(Mutable, (CFTypeRef)*MEMORY[0x263F8B8D0], v17, v9);
            uint64_t v18 = *(NSObject **)(v5 + 40);
            if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
            {
              radio::OpMode::modeToString();
              CFTypeRef v19 = v24 >= 0 ? &__p : (void **)__p;
              *(_DWORD *)std::string buf = 136315138;
              *(void *)&buf[4] = v19;
              _os_log_impl(&dword_235DB9000, v18, OS_LOG_TYPE_DEFAULT, "#I Got operating mode: %s", buf, 0xCu);
              if (SHIBYTE(v24) < 0) {
                operator delete(__p);
              }
            }
            if (!*(unsigned char *)(v5 + 328))
            {
              radio::CommandDriver::handleOperatingModeChanged_sync();
              *(unsigned char *)(v5 + 328) = 1;
            }
          }
        }
        if (!v2[2] || !v2[3])
        {
LABEL_45:
          if (Mutable) {
            CFRelease(Mutable);
          }
          if (cf) {
            CFRelease(cf);
          }
          MEMORY[0x237DF5430](v21);
          goto LABEL_50;
        }
        CFTypeRef v12 = cf;
        if (cf) {
          CFRetain(cf);
        }
        if (Mutable) {
          CFRetain(Mutable);
        }
        CFTypeRef v13 = (const void *)v2[2];
        if (v13) {
          unint64_t v14 = _Block_copy(v13);
        }
        else {
          unint64_t v14 = 0;
        }
        long long v16 = v2[3];
        std::string __p = (void *)MEMORY[0x263EF8330];
        *(void *)&long long v24 = 1174405120;
        *((void *)&v24 + 1) = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_NS3_IS6_EEEEEvDpT__block_invoke;
        long long v25 = &__block_descriptor_tmp_184;
        if (v14)
        {
          aBlock = _Block_copy(v14);
          CFTypeRef v27 = v12;
          if (!v12) {
            goto LABEL_31;
          }
        }
        else
        {
          aBlock = 0;
          CFTypeRef v27 = v12;
          if (!v12)
          {
LABEL_31:
            CFTypeRef v28 = Mutable;
            if (Mutable) {
              CFRetain(Mutable);
            }
            dispatch_async(v16, &__p);
            if (v28) {
              CFRelease(v28);
            }
            if (v27) {
              CFRelease(v27);
            }
            if (aBlock) {
              _Block_release(aBlock);
            }
            if (v14) {
              _Block_release(v14);
            }
            if (Mutable) {
              CFRelease(Mutable);
            }
            if (v12) {
              CFRelease(v12);
            }
            goto LABEL_45;
          }
        }
        CFRetain(v12);
        goto LABEL_31;
      }
    }
  }
}

void sub_235E3F87C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (v26) {
    CFRelease(v26);
  }
  if (cf) {
    CFRelease(cf);
  }
  MEMORY[0x237DF5430](&a11);
  if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c181_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver16getOperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS7_IK14__CFDictionaryEEEEEEUb5_E3__6EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c181_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver16getOperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS7_IK14__CFDictionaryEEEEEEUb5_E3__6EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver16getOperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS7_IK14__CFDictionaryEEEEEEUb5_E3__6NS_9allocatorISG_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940298;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver16getOperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS7_IK14__CFDictionaryEEEEEEUb5_E3__6NS_9allocatorISG_EEED0Ev(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940298;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver16getOperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS7_IK14__CFDictionaryEEEEEEUb5_E3__6NS_9allocatorISG_EEE16__on_zero_sharedEv(void *a1)
{
  uint64_t v2 = a1[6];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = (const void *)a1[5];
  if (v3) {
    _Block_release(v3);
  }
  CFTypeRef v4 = (std::__shared_weak_count *)a1[4];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void ___ZN3ice6detail12wrapCallbackIZN5radio16ARICommandDriver31getRxDiversityStateWithRAT_syncENS3_14RFRatSelectionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS9_IK14__CFDictionaryEEEEEE3__0vEENS5_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v68 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = (std::__shared_weak_count *)v2[4];
    if (v3)
    {
      uint64_t v5 = *v2;
      uint64_t v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        long long v7 = v6;
        if (!v2[3])
        {
LABEL_49:
          if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        v62 = (int *)0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v60[3] = v8;
        long long v61 = v8;
        v60[1] = v8;
        v60[2] = v8;
        v60[0] = v8;
        AriSdk::ARI_CsiIceGetRxDiversityRspCb_SDK::ARI_CsiIceGetRxDiversityRspCb_SDK((AriSdk::ARI_CsiIceGetRxDiversityRspCb_SDK *)v60, a2);
        CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        block.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
        *(_OWORD *)&block.__r_.__value_.__r.__words[1] = xmmword_235E71960;
        strcpy(block.__r_.__value_.__l.__data_, "send Getting Rx Diversity Status");
        checkError((AriSdk::MsgBase *)v60, (uint64_t)&block, &cf);
        if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(block.__r_.__value_.__l.__data_);
          if (cf) {
            CFNumberRef v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          }
          else {
            CFNumberRef v10 = 0;
          }
          if (v10) {
            goto LABEL_25;
          }
        }
        else
        {
          if (cf) {
            CFAllocatorRef v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          }
          else {
            CFAllocatorRef v9 = 0;
          }
          if (v9) {
            goto LABEL_25;
          }
        }
        if (AriSdk::ARI_CsiIceGetRxDiversityRspCb_SDK::unpack((AriSdk::ARI_CsiIceGetRxDiversityRspCb_SDK *)v60))
        {
          std::to_string(&block, *((_DWORD *)v2 + 10));
          BOOL v11 = std::string::insert(&block, 0, "Failed to unpack response of getting Rx Diversity, and RAT selection: ", 0x46uLL);
          long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
          std::string::size_type v58 = v11->__r_.__value_.__r.__words[2];
          *(_OWORD *)std::string __p = v12;
          v11->__r_.__value_.__l.__size_ = 0;
          v11->__r_.__value_.__r.__words[2] = 0;
          v11->__r_.__value_.__r.__words[0] = 0;
          CreateError();
          CFTypeRef v13 = cf;
          CFTypeRef cf = (CFTypeRef)v55.__r_.__value_.__r.__words[0];
          v55.__r_.__value_.__r.__words[0] = 0;
          if (!v13) {
            goto LABEL_20;
          }
          goto LABEL_17;
        }
        unint64_t v14 = (ctu *)*(unsigned int *)v61;
        if (v14)
        {
          ctu::hex(v14);
          CFTypeRef v15 = std::string::insert(&block, 0, "Error on CsiIceGetRxDiversityRspCb result: 0x", 0x2DuLL);
          long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
          std::string::size_type v58 = v15->__r_.__value_.__r.__words[2];
          *(_OWORD *)std::string __p = v16;
          v15->__r_.__value_.__l.__size_ = 0;
          v15->__r_.__value_.__r.__words[2] = 0;
          v15->__r_.__value_.__r.__words[0] = 0;
          CreateError();
          CFTypeRef v13 = cf;
          CFTypeRef cf = (CFTypeRef)v55.__r_.__value_.__r.__words[0];
          v55.__r_.__value_.__r.__words[0] = 0;
          if (!v13)
          {
LABEL_20:
            if (SHIBYTE(v58) < 0) {
              operator delete(__p[0]);
            }
            if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
            {
              int v17 = (void *)block.__r_.__value_.__r.__words[0];
LABEL_24:
              operator delete(v17);
            }
LABEL_25:
            uint64_t v18 = (const void *)v2[1];
            if (!v18 || !v2[2])
            {
LABEL_46:
              if (cf) {
                CFRelease(cf);
              }
              MEMORY[0x237DF6490](v60);
              goto LABEL_49;
            }
            CFTypeRef v19 = cf;
            if (cf && (CFRetain(cf), (uint64_t v18 = (const void *)v2[1]) == 0)) {
              long long v20 = 0;
            }
            else {
              long long v20 = _Block_copy(v18);
            }
            long long v21 = v2[2];
            block.__r_.__value_.__r.__words[0] = MEMORY[0x263EF8330];
            block.__r_.__value_.__l.__size_ = 1174405120;
            block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke_0;
            v64 = &__block_descriptor_tmp_191;
            if (v20)
            {
              v65 = _Block_copy(v20);
              CFTypeRef v66 = v19;
              if (!v19) {
                goto LABEL_36;
              }
            }
            else
            {
              v65 = 0;
              CFTypeRef v66 = v19;
              if (!v19)
              {
LABEL_36:
                CFTypeRef v67 = 0;
                dispatch_async(v21, &block);
                if (v67) {
                  CFRelease(v67);
                }
                if (v66) {
                  CFRelease(v66);
                }
                if (v65) {
                  _Block_release(v65);
                }
                if (v20) {
                  _Block_release(v20);
                }
                if (v19) {
                  CFRelease(v19);
                }
                goto LABEL_46;
              }
            }
            CFRetain(v19);
            goto LABEL_36;
          }
LABEL_17:
          CFRelease(v13);
          goto LABEL_20;
        }
        int v22 = **((_DWORD **)&v61 + 1);
        if (**((_DWORD **)&v61 + 1) == *((_DWORD *)v2 + 10))
        {
          int v23 = *v62;
          long long v24 = (uint64_t **)(v5 + 344);
          long long v25 = *(uint64_t **)(v5 + 344);
          long long v26 = (uint64_t **)(v5 + 344);
          CFTypeRef v27 = (uint64_t **)(v5 + 344);
          if (v25)
          {
            while (1)
            {
              while (1)
              {
                CFTypeRef v27 = (uint64_t **)v25;
                int v28 = *((_DWORD *)v25 + 7);
                if (v22 >= v28) {
                  break;
                }
                long long v25 = *v27;
                long long v26 = v27;
                if (!*v27) {
                  goto LABEL_60;
                }
              }
              if (v28 >= v22) {
                break;
              }
              long long v25 = v27[1];
              if (!v25)
              {
                long long v26 = v27 + 1;
                goto LABEL_60;
              }
            }
            uint64_t v29 = v27;
          }
          else
          {
LABEL_60:
            uint64_t v29 = operator new(0x28uLL);
            v29[7] = v22;
            v29[8] = 0;
            *(void *)uint64_t v29 = 0;
            *((void *)v29 + 1) = 0;
            *((void *)v29 + 2) = v27;
            const void *v26 = (uint64_t *)v29;
            uint64_t v30 = **(void **)(v5 + 336);
            std::string::size_type v31 = (uint64_t *)v29;
            if (v30)
            {
              *(void *)(v5 + 336) = v30;
              std::string::size_type v31 = *v26;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v5 + 344), v31);
            ++*(void *)(v5 + 352);
          }
          v29[8] = v23;
          long long v43 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
          {
            int v44 = *((_DWORD *)v2 + 10);
            int v45 = *v24;
            int v46 = (uint64_t **)(v5 + 344);
            if (*v24)
            {
              while (1)
              {
                while (1)
                {
                  int v46 = (uint64_t **)v45;
                  int v47 = *((_DWORD *)v45 + 7);
                  if (v44 >= v47) {
                    break;
                  }
                  int v45 = *v46;
                  long long v24 = v46;
                  if (!*v46) {
                    goto LABEL_94;
                  }
                }
                if (v47 >= v44) {
                  break;
                }
                int v45 = v46[1];
                if (!v45)
                {
                  long long v24 = v46 + 1;
                  goto LABEL_94;
                }
              }
              long long v48 = v46;
            }
            else
            {
LABEL_94:
              long long v48 = operator new(0x28uLL);
              v48[7] = v44;
              v48[8] = 0;
              *(void *)long long v48 = 0;
              *((void *)v48 + 1) = 0;
              *((void *)v48 + 2) = v46;
              *long long v24 = (uint64_t *)v48;
              uint64_t v49 = **(void **)(v5 + 336);
              uint64_t v50 = (uint64_t *)v48;
              if (v49)
              {
                *(void *)(v5 + 336) = v49;
                uint64_t v50 = *v24;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v5 + 344), v50);
              ++*(void *)(v5 + 352);
            }
            int v51 = v48[8];
            LODWORD(block.__r_.__value_.__l.__data_) = 67109376;
            HIDWORD(block.__r_.__value_.__r.__words[0]) = v44;
            LOWORD(block.__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&block.__r_.__value_.__r.__words[1] + 2) = v51;
            _os_log_debug_impl(&dword_235DB9000, v43, OS_LOG_TYPE_DEBUG, "#D fRxDiversity[ %d ]: %d\n", (uint8_t *)&block, 0xEu);
          }
          goto LABEL_25;
        }
        std::to_string(&v53, **((_DWORD **)&v61 + 1));
        std::string::size_type v32 = std::string::insert(&v53, 0, "Getting Rx Diversity Response RAT(", 0x24uLL);
        long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
        v54.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v33;
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        long long v34 = std::string::append(&v54, ") selection is different from the input RAT(", 0x2FuLL);
        long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
        v55.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v35;
        v34->__r_.__value_.__l.__size_ = 0;
        v34->__r_.__value_.__r.__words[2] = 0;
        v34->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v52, *((_DWORD *)v2 + 10));
        if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string v36 = &v52;
        }
        else {
          std::string v36 = (std::string *)v52.__r_.__value_.__r.__words[0];
        }
        if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v52.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v52.__r_.__value_.__l.__size_;
        }
        long long v38 = std::string::append(&v55, (const std::string::value_type *)v36, size);
        long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
        block.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
        *(_OWORD *)&block.__r_.__value_.__l.__data_ = v39;
        v38->__r_.__value_.__l.__size_ = 0;
        v38->__r_.__value_.__r.__words[2] = 0;
        v38->__r_.__value_.__r.__words[0] = 0;
        long long v40 = std::string::append(&block, ")", 2uLL);
        long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
        std::string::size_type v58 = v40->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v41;
        v40->__r_.__value_.__l.__size_ = 0;
        v40->__r_.__value_.__r.__words[2] = 0;
        v40->__r_.__value_.__r.__words[0] = 0;
        CreateError();
        CFTypeRef v42 = cf;
        CFTypeRef cf = v56;
        CFTypeRef v56 = 0;
        if (v42)
        {
          CFRelease(v42);
          if (v56) {
            CFRelease(v56);
          }
        }
        if (SHIBYTE(v58) < 0)
        {
          operator delete(__p[0]);
          if ((SHIBYTE(block.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_74:
            if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_75;
            }
            goto LABEL_81;
          }
        }
        else if ((SHIBYTE(block.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_74;
        }
        operator delete(block.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_75:
          if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_76;
          }
          goto LABEL_82;
        }
LABEL_81:
        operator delete(v52.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_76:
          if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_77;
          }
          goto LABEL_83;
        }
LABEL_82:
        operator delete(v55.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_77:
          if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_25;
          }
          goto LABEL_84;
        }
LABEL_83:
        operator delete(v54.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_25;
        }
LABEL_84:
        int v17 = (void *)v53.__r_.__value_.__r.__words[0];
        goto LABEL_24;
      }
    }
  }
}

void sub_235E401FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,CFTypeRef cf,char a42)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c211_ZTSNSt3__110shared_ptrIZN5radio16ARICommandDriver31getRxDiversityStateWithRAT_syncENS2_14RFRatSelectionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS8_IK14__CFDictionaryEEEEEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c211_ZTSNSt3__110shared_ptrIZN5radio16ARICommandDriver31getRxDiversityStateWithRAT_syncENS2_14RFRatSelectionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS8_IK14__CFDictionaryEEEEEE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getRxDiversityStateWithRAT_sync(radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0,std::allocator<radio::ARICommandDriver::getRxDiversityStateWithRAT_sync(radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940318;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getRxDiversityStateWithRAT_sync(radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0,std::allocator<radio::ARICommandDriver::getRxDiversityStateWithRAT_sync(radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940318;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getRxDiversityStateWithRAT_sync(radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0,std::allocator<radio::ARICommandDriver::getRxDiversityStateWithRAT_sync(radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0>>::__on_zero_shared(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[7];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = a1[5];
  if (v3) {
    dispatch_release(v3);
  }
  CFTypeRef v4 = (const void *)a1[4];
  if (v4) {
    _Block_release(v4);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::ARICommandDriver::getAntennaTxPort(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0>(radio::ARICommandDriver::getAntennaTxPort(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::ARICommandDriver::getAntennaTxPort(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0,dispatch_queue_s *::default_delete<radio::ARICommandDriver::getAntennaTxPort(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v2 = (void *)*a1;
  CFTypeRef v4 = *(void **)*a1;
  uint64_t v3 = *(const void **)(*a1 + 8);
  if (v3)
  {
    uint64_t v5 = _Block_copy(v3);
    uint64_t v6 = v2[2];
    CFTypeRef v13 = v5;
    unint64_t v14 = v6;
    if (!v6) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v5 = 0;
  uint64_t v6 = v2[2];
  CFTypeRef v13 = 0;
  unint64_t v14 = v6;
  if (v6) {
LABEL_3:
  }
    dispatch_retain(v6);
LABEL_4:
  CFDictionaryRef v7 = (const __CFDictionary *)v2[3];
  CFDictionaryRef v12 = v7;
  if (v7) {
    CFRetain(v7);
  }
  radio::ARICommandDriver::getAntennaTxPort_sync(v4, (uint64_t)&v13, &v12);
  if (v7) {
    CFRelease(v7);
  }
  if (v6) {
    dispatch_release(v6);
  }
  if (v5) {
    _Block_release(v5);
  }
  long long v8 = (const void *)v2[3];
  if (v8) {
    CFRelease(v8);
  }
  CFAllocatorRef v9 = v2[2];
  if (v9) {
    dispatch_release(v9);
  }
  CFNumberRef v10 = (const void *)v2[1];
  if (v10) {
    _Block_release(v10);
  }
  operator delete(v2);
  BOOL v11 = (std::__shared_weak_count *)a1[2];
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }

  operator delete(a1);
}

void sub_235E406A8(_Unwind_Exception *a1)
{
  if (v5) {
    CFRelease(v5);
  }
  if (v4) {
    dispatch_release(v4);
  }
  if (v3) {
    _Block_release(v3);
  }
  CFDictionaryRef v7 = (const void *)v2[3];
  if (v7) {
    CFRelease(v7);
  }
  long long v8 = v2[2];
  if (v8) {
    dispatch_release(v8);
  }
  CFAllocatorRef v9 = (const void *)v2[1];
  if (v9) {
    _Block_release(v9);
  }
  operator delete(v2);
  CFNumberRef v10 = (std::__shared_weak_count *)v1[2];
  if (v10)
  {
    if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ___ZN3ice6detail12wrapCallbackIZN5radio16ARICommandDriver21getAntennaTxPort_syncEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS8_IK14__CFDictionaryEEEEESD_E3__0vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      uint64_t v5 = v2[2];
      uint64_t v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        CFDictionaryRef v7 = v6;
        if (!*v2)
        {
LABEL_61:
          if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v28[3] = v8;
        long long v29 = v8;
        v28[1] = v8;
        v28[2] = v8;
        v28[0] = v8;
        AriSdk::ARI_CsiIceGetTxAntennaRspCb_SDK::ARI_CsiIceGetTxAntennaRspCb_SDK((AriSdk::ARI_CsiIceGetTxAntennaRspCb_SDK *)v28, a2);
        CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
        *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_235E75050;
        strcpy(__p.__r_.__value_.__l.__data_, "send Getting Antenna Tx Antenna Status");
        checkError((AriSdk::MsgBase *)v28, (uint64_t)&__p, &cf);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          CFMutableDictionaryRef Mutable = 0;
          if (cf) {
            BOOL v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          }
          else {
            BOOL v11 = 0;
          }
          if (v11) {
            goto LABEL_29;
          }
        }
        else
        {
          CFMutableDictionaryRef Mutable = 0;
          if (cf) {
            CFNumberRef v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          }
          else {
            CFNumberRef v10 = 0;
          }
          if (v10) {
            goto LABEL_29;
          }
        }
        if (AriSdk::ARI_CsiIceGetTxAntennaRspCb_SDK::unpack((AriSdk::ARI_CsiIceGetTxAntennaRspCb_SDK *)v28))
        {
          long long v24 = (char *)operator new(0x38uLL);
          strcpy(v24, "Failed to unpack response of getting Antenna Tx Port");
          CreateError();
          CFTypeRef v12 = cf;
          CFTypeRef cf = (CFTypeRef)__p.__r_.__value_.__r.__words[0];
          __p.__r_.__value_.__r.__words[0] = 0;
          if (v12)
          {
            CFRelease(v12);
            if (__p.__r_.__value_.__r.__words[0]) {
              CFRelease(__p.__r_.__value_.__l.__data_);
            }
          }
          CFTypeRef v13 = v24;
          goto LABEL_27;
        }
        unint64_t v14 = (ctu *)*(unsigned int *)v29;
        if (v14)
        {
          ctu::hex(v14);
          CFTypeRef v15 = std::string::insert(&__p, 0, "Failed on returning result from getting antenna state: result: 0x", 0x41uLL);
          std::string v25 = *v15;
          v15->__r_.__value_.__l.__size_ = 0;
          v15->__r_.__value_.__r.__words[2] = 0;
          v15->__r_.__value_.__r.__words[0] = 0;
          CreateError();
          CFTypeRef v16 = cf;
          CFTypeRef cf = v26;
          if (v16) {
            CFRelease(v16);
          }
          if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v25.__r_.__value_.__l.__data_);
          }
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_28;
          }
          CFTypeRef v13 = (char *)__p.__r_.__value_.__r.__words[0];
LABEL_27:
          operator delete(v13);
LABEL_28:
          CFMutableDictionaryRef Mutable = 0;
          goto LABEL_29;
        }
        int v21 = **((_DWORD **)&v29 + 1);
        *(_DWORD *)(v5 + 360) = **((_DWORD **)&v29 + 1);
        int v22 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(__p.__r_.__value_.__l.__data_) = 67109120;
          HIDWORD(__p.__r_.__value_.__r.__words[0]) = v21;
          _os_log_debug_impl(&dword_235DB9000, v22, OS_LOG_TYPE_DEBUG, "#D Antenna State: %d\n", (uint8_t *)&__p, 8u);
        }
        CFAllocatorRef v23 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
        ctu::cf::insert<__CFString const*,int>(Mutable, (CFTypeRef)*MEMORY[0x263F8B8A0], *(_DWORD *)(v5 + 360), v23);
LABEL_29:
        if (!v2[3] || !v2[4])
        {
LABEL_57:
          if (cf) {
            CFRelease(cf);
          }
          MEMORY[0x237DF60E0](v28);
          if (Mutable) {
            CFRelease(Mutable);
          }
          goto LABEL_61;
        }
        CFTypeRef v17 = cf;
        if (cf) {
          CFRetain(cf);
        }
        if (Mutable) {
          CFRetain(Mutable);
        }
        uint64_t v18 = (const void *)v2[3];
        if (v18) {
          CFTypeRef v19 = _Block_copy(v18);
        }
        else {
          CFTypeRef v19 = 0;
        }
        long long v20 = v2[4];
        __p.__r_.__value_.__r.__words[0] = MEMORY[0x263EF8330];
        __p.__r_.__value_.__l.__size_ = 1174405120;
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_NS3_IS6_EEEEEvDpT__block_invoke;
        std::string::size_type v31 = &__block_descriptor_tmp_184;
        if (v19)
        {
          aBlock = _Block_copy(v19);
          CFTypeRef v33 = v17;
          if (!v17) {
            goto LABEL_43;
          }
        }
        else
        {
          aBlock = 0;
          CFTypeRef v33 = v17;
          if (!v17)
          {
LABEL_43:
            CFTypeRef v34 = Mutable;
            if (Mutable) {
              CFRetain(Mutable);
            }
            dispatch_async(v20, &__p);
            if (v34) {
              CFRelease(v34);
            }
            if (v33) {
              CFRelease(v33);
            }
            if (aBlock) {
              _Block_release(aBlock);
            }
            if (v19) {
              _Block_release(v19);
            }
            if (Mutable) {
              CFRelease(Mutable);
            }
            if (v17) {
              CFRelease(v17);
            }
            goto LABEL_57;
          }
        }
        CFRetain(v17);
        goto LABEL_43;
      }
    }
  }
}

void sub_235E40C0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, CFTypeRef cf, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c183_ZTSNSt3__110shared_ptrIZN5radio16ARICommandDriver21getAntennaTxPort_syncEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS7_IK14__CFDictionaryEEEEESC_E3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c183_ZTSNSt3__110shared_ptrIZN5radio16ARICommandDriver21getAntennaTxPort_syncEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS7_IK14__CFDictionaryEEEEESC_E3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getAntennaTxPort_sync(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0,std::allocator<radio::ARICommandDriver::getAntennaTxPort_sync(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940398;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getAntennaTxPort_sync(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0,std::allocator<radio::ARICommandDriver::getAntennaTxPort_sync(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940398;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getAntennaTxPort_sync(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0,std::allocator<radio::ARICommandDriver::getAntennaTxPort_sync(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0>>::__on_zero_shared(void *a1)
{
  uint64_t v2 = a1[7];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = (const void *)a1[6];
  if (v3) {
    _Block_release(v3);
  }
  CFTypeRef v4 = (std::__shared_weak_count *)a1[4];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void ___ZN3ice6detail12wrapCallbackIZN5radio16ARICommandDriver19getARTDWithRAT_syncENS3_14RFRatSelectionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS9_IK14__CFDictionaryEEEEEE3__0vEENS5_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v68 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = (std::__shared_weak_count *)v2[4];
    if (v3)
    {
      uint64_t v5 = *v2;
      uint64_t v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        CFDictionaryRef v7 = v6;
        if (!v2[3])
        {
LABEL_49:
          if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        v62 = (int *)0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v60[3] = v8;
        long long v61 = v8;
        v60[1] = v8;
        v60[2] = v8;
        v60[0] = v8;
        AriSdk::ARI_CsiIceGetArtdSettingRspCb_SDK::ARI_CsiIceGetArtdSettingRspCb_SDK((AriSdk::ARI_CsiIceGetArtdSettingRspCb_SDK *)v60, a2);
        CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        block.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
        *(_OWORD *)&block.__r_.__value_.__r.__words[1] = xmmword_235E72AD0;
        strcpy(block.__r_.__value_.__l.__data_, "send Getting ARTD Settings");
        checkError((AriSdk::MsgBase *)v60, (uint64_t)&block, &cf);
        if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(block.__r_.__value_.__l.__data_);
          if (cf) {
            CFNumberRef v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          }
          else {
            CFNumberRef v10 = 0;
          }
          if (v10) {
            goto LABEL_25;
          }
        }
        else
        {
          if (cf) {
            CFAllocatorRef v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          }
          else {
            CFAllocatorRef v9 = 0;
          }
          if (v9) {
            goto LABEL_25;
          }
        }
        if (AriSdk::ARI_CsiIceGetArtdSettingRspCb_SDK::unpack((AriSdk::ARI_CsiIceGetArtdSettingRspCb_SDK *)v60))
        {
          std::to_string(&block, *((_DWORD *)v2 + 10));
          BOOL v11 = std::string::insert(&block, 0, "Failed to unpack response of getting ARTD, and RAT selection: ", 0x3EuLL);
          long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
          std::string::size_type v58 = v11->__r_.__value_.__r.__words[2];
          *(_OWORD *)std::string __p = v12;
          v11->__r_.__value_.__l.__size_ = 0;
          v11->__r_.__value_.__r.__words[2] = 0;
          v11->__r_.__value_.__r.__words[0] = 0;
          CreateError();
          CFTypeRef v13 = cf;
          CFTypeRef cf = (CFTypeRef)v55.__r_.__value_.__r.__words[0];
          v55.__r_.__value_.__r.__words[0] = 0;
          if (!v13) {
            goto LABEL_20;
          }
          goto LABEL_17;
        }
        unint64_t v14 = (ctu *)*(unsigned int *)v61;
        if (v14)
        {
          ctu::hex(v14);
          CFTypeRef v15 = std::string::insert(&block, 0, "Error on CsiIceGetArtdSettingRspCb result: 0x", 0x2DuLL);
          long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
          std::string::size_type v58 = v15->__r_.__value_.__r.__words[2];
          *(_OWORD *)std::string __p = v16;
          v15->__r_.__value_.__l.__size_ = 0;
          v15->__r_.__value_.__r.__words[2] = 0;
          v15->__r_.__value_.__r.__words[0] = 0;
          CreateError();
          CFTypeRef v13 = cf;
          CFTypeRef cf = (CFTypeRef)v55.__r_.__value_.__r.__words[0];
          v55.__r_.__value_.__r.__words[0] = 0;
          if (!v13)
          {
LABEL_20:
            if (SHIBYTE(v58) < 0) {
              operator delete(__p[0]);
            }
            if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
            {
              CFTypeRef v17 = (void *)block.__r_.__value_.__r.__words[0];
LABEL_24:
              operator delete(v17);
            }
LABEL_25:
            uint64_t v18 = (const void *)v2[1];
            if (!v18 || !v2[2])
            {
LABEL_46:
              if (cf) {
                CFRelease(cf);
              }
              MEMORY[0x237DF6460](v60);
              goto LABEL_49;
            }
            CFTypeRef v19 = cf;
            if (cf && (CFRetain(cf), (uint64_t v18 = (const void *)v2[1]) == 0)) {
              long long v20 = 0;
            }
            else {
              long long v20 = _Block_copy(v18);
            }
            int v21 = v2[2];
            block.__r_.__value_.__r.__words[0] = MEMORY[0x263EF8330];
            block.__r_.__value_.__l.__size_ = 1174405120;
            block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke_0;
            v64 = &__block_descriptor_tmp_191;
            if (v20)
            {
              v65 = _Block_copy(v20);
              CFTypeRef v66 = v19;
              if (!v19) {
                goto LABEL_36;
              }
            }
            else
            {
              v65 = 0;
              CFTypeRef v66 = v19;
              if (!v19)
              {
LABEL_36:
                CFTypeRef v67 = 0;
                dispatch_async(v21, &block);
                if (v67) {
                  CFRelease(v67);
                }
                if (v66) {
                  CFRelease(v66);
                }
                if (v65) {
                  _Block_release(v65);
                }
                if (v20) {
                  _Block_release(v20);
                }
                if (v19) {
                  CFRelease(v19);
                }
                goto LABEL_46;
              }
            }
            CFRetain(v19);
            goto LABEL_36;
          }
LABEL_17:
          CFRelease(v13);
          goto LABEL_20;
        }
        int v22 = **((_DWORD **)&v61 + 1);
        if (**((_DWORD **)&v61 + 1) == *((_DWORD *)v2 + 10))
        {
          int v23 = *v62;
          long long v24 = (uint64_t **)(v5 + 376);
          std::string v25 = *(uint64_t **)(v5 + 376);
          CFTypeRef v26 = (uint64_t **)(v5 + 376);
          CFTypeRef v27 = (uint64_t **)(v5 + 376);
          if (v25)
          {
            while (1)
            {
              while (1)
              {
                CFTypeRef v27 = (uint64_t **)v25;
                int v28 = *((_DWORD *)v25 + 7);
                if (v22 >= v28) {
                  break;
                }
                std::string v25 = *v27;
                CFTypeRef v26 = v27;
                if (!*v27) {
                  goto LABEL_60;
                }
              }
              if (v28 >= v22) {
                break;
              }
              std::string v25 = v27[1];
              if (!v25)
              {
                CFTypeRef v26 = v27 + 1;
                goto LABEL_60;
              }
            }
            long long v29 = v27;
          }
          else
          {
LABEL_60:
            long long v29 = operator new(0x28uLL);
            v29[7] = v22;
            v29[8] = 0;
            *(void *)long long v29 = 0;
            *((void *)v29 + 1) = 0;
            *((void *)v29 + 2) = v27;
            const void *v26 = (uint64_t *)v29;
            uint64_t v30 = **(void **)(v5 + 368);
            std::string::size_type v31 = (uint64_t *)v29;
            if (v30)
            {
              *(void *)(v5 + 368) = v30;
              std::string::size_type v31 = *v26;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v5 + 376), v31);
            ++*(void *)(v5 + 384);
          }
          v29[8] = v23;
          long long v43 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
          {
            int v44 = *((_DWORD *)v2 + 10);
            int v45 = *v24;
            int v46 = (uint64_t **)(v5 + 376);
            if (*v24)
            {
              while (1)
              {
                while (1)
                {
                  int v46 = (uint64_t **)v45;
                  int v47 = *((_DWORD *)v45 + 7);
                  if (v44 >= v47) {
                    break;
                  }
                  int v45 = *v46;
                  long long v24 = v46;
                  if (!*v46) {
                    goto LABEL_94;
                  }
                }
                if (v47 >= v44) {
                  break;
                }
                int v45 = v46[1];
                if (!v45)
                {
                  long long v24 = v46 + 1;
                  goto LABEL_94;
                }
              }
              long long v48 = v46;
            }
            else
            {
LABEL_94:
              long long v48 = operator new(0x28uLL);
              v48[7] = v44;
              v48[8] = 0;
              *(void *)long long v48 = 0;
              *((void *)v48 + 1) = 0;
              *((void *)v48 + 2) = v46;
              *long long v24 = (uint64_t *)v48;
              uint64_t v49 = **(void **)(v5 + 368);
              uint64_t v50 = (uint64_t *)v48;
              if (v49)
              {
                *(void *)(v5 + 368) = v49;
                uint64_t v50 = *v24;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v5 + 376), v50);
              ++*(void *)(v5 + 384);
            }
            int v51 = v48[8];
            LODWORD(block.__r_.__value_.__l.__data_) = 67109376;
            HIDWORD(block.__r_.__value_.__r.__words[0]) = v44;
            LOWORD(block.__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&block.__r_.__value_.__r.__words[1] + 2) = v51;
            _os_log_debug_impl(&dword_235DB9000, v43, OS_LOG_TYPE_DEBUG, "#D fARTD[ %d ]: %d\n", (uint8_t *)&block, 0xEu);
          }
          goto LABEL_25;
        }
        std::to_string(&v53, **((_DWORD **)&v61 + 1));
        std::string::size_type v32 = std::string::insert(&v53, 0, "Getting ARTD Response RAT(", 0x1CuLL);
        long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
        v54.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v33;
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        CFTypeRef v34 = std::string::append(&v54, ") selection is different from the input RAT(", 0x2FuLL);
        long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
        v55.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v35;
        v34->__r_.__value_.__l.__size_ = 0;
        v34->__r_.__value_.__r.__words[2] = 0;
        v34->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v52, *((_DWORD *)v2 + 10));
        if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string v36 = &v52;
        }
        else {
          std::string v36 = (std::string *)v52.__r_.__value_.__r.__words[0];
        }
        if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v52.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v52.__r_.__value_.__l.__size_;
        }
        long long v38 = std::string::append(&v55, (const std::string::value_type *)v36, size);
        long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
        block.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
        *(_OWORD *)&block.__r_.__value_.__l.__data_ = v39;
        v38->__r_.__value_.__l.__size_ = 0;
        v38->__r_.__value_.__r.__words[2] = 0;
        v38->__r_.__value_.__r.__words[0] = 0;
        long long v40 = std::string::append(&block, ")", 2uLL);
        long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
        std::string::size_type v58 = v40->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v41;
        v40->__r_.__value_.__l.__size_ = 0;
        v40->__r_.__value_.__r.__words[2] = 0;
        v40->__r_.__value_.__r.__words[0] = 0;
        CreateError();
        CFTypeRef v42 = cf;
        CFTypeRef cf = v56;
        CFTypeRef v56 = 0;
        if (v42)
        {
          CFRelease(v42);
          if (v56) {
            CFRelease(v56);
          }
        }
        if (SHIBYTE(v58) < 0)
        {
          operator delete(__p[0]);
          if ((SHIBYTE(block.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_74:
            if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_75;
            }
            goto LABEL_81;
          }
        }
        else if ((SHIBYTE(block.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_74;
        }
        operator delete(block.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_75:
          if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_76;
          }
          goto LABEL_82;
        }
LABEL_81:
        operator delete(v52.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_76:
          if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_77;
          }
          goto LABEL_83;
        }
LABEL_82:
        operator delete(v55.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_77:
          if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_25;
          }
          goto LABEL_84;
        }
LABEL_83:
        operator delete(v54.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_25;
        }
LABEL_84:
        CFTypeRef v17 = (void *)v53.__r_.__value_.__r.__words[0];
        goto LABEL_24;
      }
    }
  }
}

void sub_235E415D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,CFTypeRef cf,char a42)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c199_ZTSNSt3__110shared_ptrIZN5radio16ARICommandDriver19getARTDWithRAT_syncENS2_14RFRatSelectionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS8_IK14__CFDictionaryEEEEEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c199_ZTSNSt3__110shared_ptrIZN5radio16ARICommandDriver19getARTDWithRAT_syncENS2_14RFRatSelectionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS8_IK14__CFDictionaryEEEEEE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getARTDWithRAT_sync(radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0,std::allocator<radio::ARICommandDriver::getARTDWithRAT_sync(radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940418;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getARTDWithRAT_sync(radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0,std::allocator<radio::ARICommandDriver::getARTDWithRAT_sync(radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940418;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getARTDWithRAT_sync(radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0,std::allocator<radio::ARICommandDriver::getARTDWithRAT_sync(radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0>>::__on_zero_shared(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[7];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = a1[5];
  if (v3) {
    dispatch_release(v3);
  }
  CFTypeRef v4 = (const void *)a1[4];
  if (v4) {
    _Block_release(v4);
  }
}

void ___ZN3ice6detail12wrapCallbackIZN5radio16ARICommandDriver13getARFCN_syncEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS8_IK14__CFDictionaryEEEEEE3__0vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = (std::__shared_weak_count *)v2[4];
    if (v3)
    {
      uint64_t v5 = *v2;
      uint64_t v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        CFDictionaryRef v7 = v6;
        if (!v2[3])
        {
LABEL_69:
          if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        int v45 = (int *)0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v43[3] = v8;
        long long v44 = v8;
        v43[1] = v8;
        v43[2] = v8;
        v43[0] = v8;
        AriSdk::ARI_CsiIceGetArfcnLockRspCb_SDK::ARI_CsiIceGetArfcnLockRspCb_SDK((AriSdk::ARI_CsiIceGetArfcnLockRspCb_SDK *)v43, a2);
        CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
        *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_235E71960;
        strcpy(__p.__r_.__value_.__l.__data_, "send Getting ARFCN Lock Settings");
        checkError((AriSdk::MsgBase *)v43, (uint64_t)&__p, &cf);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if (cf) {
            CFNumberRef v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          }
          else {
            CFNumberRef v10 = 0;
          }
          if (v10) {
            goto LABEL_45;
          }
        }
        else
        {
          if (cf) {
            CFAllocatorRef v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          }
          else {
            CFAllocatorRef v9 = 0;
          }
          if (v9) {
            goto LABEL_45;
          }
        }
        if (AriSdk::ARI_CsiIceGetArfcnLockRspCb_SDK::unpack((AriSdk::ARI_CsiIceGetArfcnLockRspCb_SDK *)v43))
        {
          long long v39 = (char *)operator new(0x20uLL);
          strcpy(v39, "Failed to unpack response");
          CreateError();
          CFTypeRef v11 = cf;
          CFTypeRef cf = (CFTypeRef)__p.__r_.__value_.__r.__words[0];
          __p.__r_.__value_.__r.__words[0] = 0;
          if (v11)
          {
            CFRelease(v11);
            if (__p.__r_.__value_.__r.__words[0]) {
              CFRelease(__p.__r_.__value_.__l.__data_);
            }
          }
          operator delete(v39);
          long long v12 = (const void *)v2[1];
          if (!v12) {
            goto LABEL_66;
          }
LABEL_46:
          if (v2[2])
          {
            CFTypeRef v28 = cf;
            if (cf && (CFRetain(cf), (long long v12 = (const void *)v2[1]) == 0)) {
              long long v29 = 0;
            }
            else {
              long long v29 = _Block_copy(v12);
            }
            uint64_t v30 = v2[2];
            __p.__r_.__value_.__r.__words[0] = MEMORY[0x263EF8330];
            __p.__r_.__value_.__l.__size_ = 1174405120;
            __p.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke_0;
            int v47 = &__block_descriptor_tmp_191;
            if (v29)
            {
              aBlock = _Block_copy(v29);
              CFTypeRef v49 = v28;
              if (!v28) {
                goto LABEL_56;
              }
            }
            else
            {
              aBlock = 0;
              CFTypeRef v49 = v28;
              if (!v28)
              {
LABEL_56:
                CFTypeRef v50 = 0;
                dispatch_async(v30, &__p);
                if (v50) {
                  CFRelease(v50);
                }
                if (v49) {
                  CFRelease(v49);
                }
                if (aBlock) {
                  _Block_release(aBlock);
                }
                if (v29) {
                  _Block_release(v29);
                }
                if (v28) {
                  CFRelease(v28);
                }
                goto LABEL_66;
              }
            }
            CFRetain(v28);
            goto LABEL_56;
          }
LABEL_66:
          if (cf) {
            CFRelease(cf);
          }
          MEMORY[0x237DF6070](v43);
          goto LABEL_69;
        }
        CFTypeRef v13 = (ctu *)*(unsigned int *)v44;
        if (v13)
        {
          ctu::hex(v13);
          unint64_t v14 = std::string::insert(&__p, 0, "Error on CsiIceGetArfcnLockRspCb result: 0x", 0x2BuLL);
          std::string v40 = *v14;
          v14->__r_.__value_.__l.__size_ = 0;
          v14->__r_.__value_.__r.__words[2] = 0;
          v14->__r_.__value_.__r.__words[0] = 0;
          CreateError();
          CFTypeRef v15 = cf;
          CFTypeRef cf = v41;
          if (v15) {
            CFRelease(v15);
          }
          if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v40.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            long long v12 = (const void *)v2[1];
            if (!v12) {
              goto LABEL_66;
            }
            goto LABEL_46;
          }
        }
        else
        {
          int v16 = **((_DWORD **)&v44 + 1);
          *(_DWORD *)(v5 + 416) = **((_DWORD **)&v44 + 1);
          if (v16 < 4)
          {
            int v18 = *v45;
            CFTypeRef v19 = (uint64_t **)(v5 + 400);
            long long v20 = *(uint64_t **)(v5 + 400);
            int v21 = (uint64_t **)(v5 + 400);
            int v22 = (uint64_t **)(v5 + 400);
            if (v20)
            {
              while (1)
              {
                while (1)
                {
                  int v22 = (uint64_t **)v20;
                  int v23 = *((_DWORD *)v20 + 7);
                  if (v16 >= v23) {
                    break;
                  }
                  long long v20 = *v22;
                  int v21 = v22;
                  if (!*v22) {
                    goto LABEL_40;
                  }
                }
                if (v23 >= v16) {
                  break;
                }
                long long v20 = v22[1];
                if (!v20)
                {
                  int v21 = v22 + 1;
                  goto LABEL_40;
                }
              }
              long long v24 = v22;
            }
            else
            {
LABEL_40:
              long long v24 = operator new(0x28uLL);
              v24[7] = v16;
              v24[8] = 0;
              *(void *)long long v24 = 0;
              *((void *)v24 + 1) = 0;
              *((void *)v24 + 2) = v22;
              NSObject *v21 = (uint64_t *)v24;
              uint64_t v25 = **(void **)(v5 + 392);
              CFTypeRef v26 = (uint64_t *)v24;
              if (v25)
              {
                *(void *)(v5 + 392) = v25;
                CFTypeRef v26 = *v21;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v5 + 400), v26);
              ++*(void *)(v5 + 408);
            }
            v24[8] = v18;
            CFTypeRef v27 = *(NSObject **)(v5 + 40);
            if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
            {
              int v31 = *(_DWORD *)(v5 + 416);
              std::string::size_type v32 = *(uint64_t **)(v5 + 400);
              long long v33 = (uint64_t **)(v5 + 400);
              if (v32)
              {
                while (1)
                {
                  while (1)
                  {
                    long long v33 = (uint64_t **)v32;
                    int v34 = *((_DWORD *)v32 + 7);
                    if (v31 >= v34) {
                      break;
                    }
                    std::string::size_type v32 = *v33;
                    CFTypeRef v19 = v33;
                    if (!*v33) {
                      goto LABEL_79;
                    }
                  }
                  if (v34 >= v31) {
                    break;
                  }
                  std::string::size_type v32 = v33[1];
                  if (!v32)
                  {
                    CFTypeRef v19 = v33 + 1;
                    goto LABEL_79;
                  }
                }
                long long v35 = v33;
              }
              else
              {
LABEL_79:
                long long v35 = operator new(0x28uLL);
                v35[7] = v31;
                v35[8] = 0;
                *(void *)long long v35 = 0;
                *((void *)v35 + 1) = 0;
                *((void *)v35 + 2) = v33;
                *CFTypeRef v19 = (uint64_t *)v35;
                uint64_t v36 = **(void **)(v5 + 392);
                long long v37 = (uint64_t *)v35;
                if (v36)
                {
                  *(void *)(v5 + 392) = v36;
                  long long v37 = *v19;
                }
                std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v5 + 400), v37);
                ++*(void *)(v5 + 408);
              }
              int v38 = v35[8];
              LODWORD(__p.__r_.__value_.__l.__data_) = 67109376;
              HIDWORD(__p.__r_.__value_.__r.__words[0]) = v31;
              LOWORD(__p.__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 2) = v38;
              _os_log_debug_impl(&dword_235DB9000, v27, OS_LOG_TYPE_DEBUG, "#D fARFCNLock[ %d ]: %d\n", (uint8_t *)&__p, 0xEu);
              long long v12 = (const void *)v2[1];
              if (!v12) {
                goto LABEL_66;
              }
              goto LABEL_46;
            }
          }
          else
          {
            CFTypeRef v17 = *(NSObject **)(v5 + 40);
            if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(__p.__r_.__value_.__l.__data_) = 67109120;
              HIDWORD(__p.__r_.__value_.__r.__words[0]) = v16;
              _os_log_impl(&dword_235DB9000, v17, OS_LOG_TYPE_DEFAULT, "#I Warning: getting ARFCN RAT: %d", (uint8_t *)&__p, 8u);
              long long v12 = (const void *)v2[1];
              if (!v12) {
                goto LABEL_66;
              }
              goto LABEL_46;
            }
          }
        }
LABEL_45:
        long long v12 = (const void *)v2[1];
        if (!v12) {
          goto LABEL_66;
        }
        goto LABEL_46;
      }
    }
  }
}

void sub_235E41EFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, CFTypeRef cf, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (cf) {
    CFRelease(cf);
  }
  MEMORY[0x237DF6070](&a18);
  if (!atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c172_ZTSNSt3__110shared_ptrIZN5radio16ARICommandDriver13getARFCN_syncEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS7_IK14__CFDictionaryEEEEEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c172_ZTSNSt3__110shared_ptrIZN5radio16ARICommandDriver13getARFCN_syncEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS7_IK14__CFDictionaryEEEEEE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getARFCN_sync(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0,std::allocator<radio::ARICommandDriver::getARFCN_sync(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940498;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getARFCN_sync(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0,std::allocator<radio::ARICommandDriver::getARFCN_sync(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940498;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getARFCN_sync(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0,std::allocator<radio::ARICommandDriver::getARFCN_sync(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0>>::__on_zero_shared(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[7];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = a1[5];
  if (v3) {
    dispatch_release(v3);
  }
  CFTypeRef v4 = (const void *)a1[4];
  if (v4) {
    _Block_release(v4);
  }
}

void ___ZN3ice6detail12wrapCallbackIZN5radio16ARICommandDriver10getCA_syncEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS8_IK14__CFDictionaryEEEEEE3__0vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = (std::__shared_weak_count *)v2[4];
    if (v3)
    {
      uint64_t v5 = *v2;
      uint64_t v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        CFDictionaryRef v7 = v6;
        if (!v2[3])
        {
LABEL_54:
          if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v25[3] = v8;
        long long v26 = v8;
        v25[1] = v8;
        v25[2] = v8;
        v25[0] = v8;
        AriSdk::ARI_CsiIceGetCaEnableRspCb_SDK::ARI_CsiIceGetCaEnableRspCb_SDK((AriSdk::ARI_CsiIceGetCaEnableRspCb_SDK *)v25, a2);
        CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        block.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
        *(_OWORD *)&block.__r_.__value_.__r.__words[1] = xmmword_235E72AD0;
        strcpy(block.__r_.__value_.__l.__data_, "send Getting ARTD Settings");
        checkError((AriSdk::MsgBase *)v25, (uint64_t)&block, &cf);
        if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(block.__r_.__value_.__l.__data_);
          if (cf) {
            CFNumberRef v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          }
          else {
            CFNumberRef v10 = 0;
          }
          if (v10) {
            goto LABEL_30;
          }
        }
        else
        {
          if (cf) {
            CFAllocatorRef v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          }
          else {
            CFAllocatorRef v9 = 0;
          }
          if (v9) {
            goto LABEL_30;
          }
        }
        if (AriSdk::ARI_CsiIceGetCaEnableRspCb_SDK::unpack((AriSdk::ARI_CsiIceGetCaEnableRspCb_SDK *)v25))
        {
          std::string __p = (char *)operator new(0x20uLL);
          strcpy(__p, "Failed to unpack response");
          CreateError();
          CFTypeRef v11 = cf;
          CFTypeRef cf = (CFTypeRef)block.__r_.__value_.__r.__words[0];
          block.__r_.__value_.__r.__words[0] = 0;
          if (v11)
          {
            CFRelease(v11);
            if (block.__r_.__value_.__r.__words[0]) {
              CFRelease(block.__r_.__value_.__l.__data_);
            }
          }
          operator delete(__p);
          long long v12 = (const void *)v2[1];
          if (!v12) {
            goto LABEL_51;
          }
LABEL_31:
          if (v2[2])
          {
            CFTypeRef v18 = cf;
            if (cf && (CFRetain(cf), (long long v12 = (const void *)v2[1]) == 0)) {
              CFTypeRef v19 = 0;
            }
            else {
              CFTypeRef v19 = _Block_copy(v12);
            }
            long long v20 = v2[2];
            block.__r_.__value_.__r.__words[0] = MEMORY[0x263EF8330];
            block.__r_.__value_.__l.__size_ = 1174405120;
            block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke_0;
            CFTypeRef v28 = &__block_descriptor_tmp_191;
            if (v19)
            {
              long long v29 = _Block_copy(v19);
              CFTypeRef v30 = v18;
              if (!v18) {
                goto LABEL_41;
              }
            }
            else
            {
              long long v29 = 0;
              CFTypeRef v30 = v18;
              if (!v18)
              {
LABEL_41:
                CFTypeRef v31 = 0;
                dispatch_async(v20, &block);
                if (v31) {
                  CFRelease(v31);
                }
                if (v30) {
                  CFRelease(v30);
                }
                if (v29) {
                  _Block_release(v29);
                }
                if (v19) {
                  _Block_release(v19);
                }
                if (v18) {
                  CFRelease(v18);
                }
                goto LABEL_51;
              }
            }
            CFRetain(v18);
            goto LABEL_41;
          }
LABEL_51:
          if (cf) {
            CFRelease(cf);
          }
          MEMORY[0x237DF5EA0](v25);
          goto LABEL_54;
        }
        CFTypeRef v13 = (ctu *)*(unsigned int *)v26;
        if (v13)
        {
          ctu::hex(v13);
          unint64_t v14 = std::string::insert(&block, 0, "Error on CsiIceGetCaEnableRspCb result: 0x", 0x2AuLL);
          std::string __pa = *v14;
          v14->__r_.__value_.__l.__size_ = 0;
          v14->__r_.__value_.__r.__words[2] = 0;
          v14->__r_.__value_.__r.__words[0] = 0;
          CreateError();
          CFTypeRef v15 = cf;
          CFTypeRef cf = v23;
          if (v15) {
            CFRelease(v15);
          }
          if (SHIBYTE(__pa.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__pa.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(block.__r_.__value_.__l.__data_);
            long long v12 = (const void *)v2[1];
            if (!v12) {
              goto LABEL_51;
            }
            goto LABEL_31;
          }
        }
        else
        {
          int v16 = **((_DWORD **)&v26 + 1);
          *(_DWORD *)(v5 + 420) = **((_DWORD **)&v26 + 1);
          CFTypeRef v17 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
          {
            LODWORD(block.__r_.__value_.__l.__data_) = 67109120;
            HIDWORD(block.__r_.__value_.__r.__words[0]) = v16;
            _os_log_debug_impl(&dword_235DB9000, v17, OS_LOG_TYPE_DEBUG, "#D fCAEnabled: %d\n", (uint8_t *)&block, 8u);
            long long v12 = (const void *)v2[1];
            if (!v12) {
              goto LABEL_51;
            }
            goto LABEL_31;
          }
        }
LABEL_30:
        long long v12 = (const void *)v2[1];
        if (!v12) {
          goto LABEL_51;
        }
        goto LABEL_31;
      }
    }
  }
}

void sub_235E42594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, CFTypeRef cf, char a18)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c169_ZTSNSt3__110shared_ptrIZN5radio16ARICommandDriver10getCA_syncEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS7_IK14__CFDictionaryEEEEEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c169_ZTSNSt3__110shared_ptrIZN5radio16ARICommandDriver10getCA_syncEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS7_IK14__CFDictionaryEEEEEE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getCA_sync(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0,std::allocator<radio::ARICommandDriver::getCA_sync(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940518;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getCA_sync(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0,std::allocator<radio::ARICommandDriver::getCA_sync(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940518;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getCA_sync(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0,std::allocator<radio::ARICommandDriver::getCA_sync(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0>>::__on_zero_shared(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[7];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = a1[5];
  if (v3) {
    dispatch_release(v3);
  }
  CFTypeRef v4 = (const void *)a1[4];
  if (v4) {
    _Block_release(v4);
  }
}

void ___ZN3ice6detail12wrapCallbackIZN5radio16ARICommandDriver31setRxDiversityStateWithRAT_syncEiNS3_14RFRatSelectionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEE3__0vEENS5_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 24);
    if (v3)
    {
      uint64_t v5 = std::__shared_weak_count::lock(v3);
      if (v5)
      {
        uint64_t v6 = v5;
        if (!*(void *)(v2 + 16))
        {
LABEL_68:
          if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
          return;
        }
        long long v37 = (unsigned int *)0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
        CFTypeRef v36[2] = v7;
        v36[3] = v7;
        v36[0] = v7;
        v36[1] = v7;
        AriSdk::ARI_CsiIceRxDiversityRspCb_SDK::ARI_CsiIceRxDiversityRspCb_SDK((AriSdk::ARI_CsiIceRxDiversityRspCb_SDK *)v36, a2);
        CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        std::to_string(&v34, *(_DWORD *)(v2 + 32));
        long long v8 = std::string::insert(&v34, 0, "send Setting RX Diversity of Rat: ", 0x22uLL);
        long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
        block.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
        *(_OWORD *)&block.__r_.__value_.__l.__data_ = v9;
        v8->__r_.__value_.__l.__size_ = 0;
        v8->__r_.__value_.__r.__words[2] = 0;
        v8->__r_.__value_.__r.__words[0] = 0;
        checkError((AriSdk::MsgBase *)v36, (uint64_t)&block, &cf);
        if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(block.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_7:
            if (cf) {
              CFNumberRef v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
            }
            else {
              CFNumberRef v10 = 0;
            }
            if (v10) {
              goto LABEL_46;
            }
            goto LABEL_17;
          }
        }
        else if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_7;
        }
        operator delete(v34.__r_.__value_.__l.__data_);
        if (cf) {
          CFTypeRef v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          CFTypeRef v11 = 0;
        }
        if (v11) {
          goto LABEL_46;
        }
LABEL_17:
        if (AriSdk::ARI_CsiIceRxDiversityRspCb_SDK::unpack((AriSdk::ARI_CsiIceRxDiversityRspCb_SDK *)v36))
        {
          std::to_string(&block, *(_DWORD *)(v2 + 32));
          long long v12 = std::string::insert(&block, 0, "Failed to unpack response of setting Rx Diversity, and RAT selection: ", 0x46uLL);
          long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
          v34.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v13;
          v12->__r_.__value_.__l.__size_ = 0;
          v12->__r_.__value_.__r.__words[2] = 0;
          v12->__r_.__value_.__r.__words[0] = 0;
          CreateError();
          CFTypeRef v14 = cf;
          CFTypeRef cf = (CFTypeRef)v32.__r_.__value_.__r.__words[0];
          v32.__r_.__value_.__r.__words[0] = 0;
          if (v14) {
            CFRelease(v14);
          }
          if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v34.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
          {
            CFTypeRef v15 = (void *)block.__r_.__value_.__r.__words[0];
LABEL_45:
            operator delete(v15);
          }
LABEL_46:
          long long v26 = *(const void **)v2;
          if (!*(void *)v2 || !*(void *)(v2 + 8))
          {
LABEL_65:
            if (cf) {
              CFRelease(cf);
            }
            MEMORY[0x237DF5ED0](v36);
            goto LABEL_68;
          }
          CFTypeRef v27 = cf;
          if (cf && (CFRetain(cf), (long long v26 = *(const void **)v2) == 0)) {
            CFTypeRef v28 = 0;
          }
          else {
            CFTypeRef v28 = _Block_copy(v26);
          }
          long long v29 = *(NSObject **)(v2 + 8);
          block.__r_.__value_.__r.__words[0] = MEMORY[0x263EF8330];
          block.__r_.__value_.__l.__size_ = 1174405120;
          block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
          long long v39 = &__block_descriptor_tmp_181;
          if (v28)
          {
            std::string v40 = _Block_copy(v28);
            CFTypeRef v41 = v27;
            if (!v27) {
              goto LABEL_57;
            }
          }
          else
          {
            std::string v40 = 0;
            CFTypeRef v41 = v27;
            if (!v27)
            {
LABEL_57:
              dispatch_async(v29, &block);
              if (v41) {
                CFRelease(v41);
              }
              if (v40) {
                _Block_release(v40);
              }
              if (v28) {
                _Block_release(v28);
              }
              if (v27) {
                CFRelease(v27);
              }
              goto LABEL_65;
            }
          }
          CFRetain(v27);
          goto LABEL_57;
        }
        int v16 = (ctu *)*v37;
        if (!v16) {
          goto LABEL_46;
        }
        ctu::hex(v16);
        CFTypeRef v17 = std::string::insert(&v31, 0, "Error on rx diversity response result: 0x", 0x29uLL);
        long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        v32.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        CFTypeRef v19 = std::string::append(&v32, ", and RAT selection: ", 0x15uLL);
        long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        block.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)&block.__r_.__value_.__l.__data_ = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&__p, *(_DWORD *)(v2 + 32));
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        CFTypeRef v23 = std::string::append(&block, (const std::string::value_type *)p_p, size);
        long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v34.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        CreateError();
        CFTypeRef v25 = cf;
        CFTypeRef cf = v33;
        CFTypeRef v33 = 0;
        if (v25)
        {
          CFRelease(v25);
          if (v33) {
            CFRelease(v33);
          }
        }
        if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v34.__r_.__value_.__l.__data_);
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_36:
            if ((SHIBYTE(block.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_37;
            }
            goto LABEL_42;
          }
        }
        else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_36;
        }
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((SHIBYTE(block.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_37:
          if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_38;
          }
          goto LABEL_43;
        }
LABEL_42:
        operator delete(block.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_38:
          if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_46;
          }
LABEL_44:
          CFTypeRef v15 = (void *)v31.__r_.__value_.__r.__words[0];
          goto LABEL_45;
        }
LABEL_43:
        operator delete(v32.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_46;
        }
        goto LABEL_44;
      }
    }
  }
}

void sub_235E42C94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,CFTypeRef cf,char a35)
{
  if (a33 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v36 - 73) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((*(char *)(v36 - 73) & 0x80000000) == 0)
  {
LABEL_4:
    if ((a26 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(*(void **)(v36 - 96));
  if ((a26 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a20 & 0x80000000) == 0)
    {
LABEL_12:
      if (cf) {
        CFRelease(cf);
      }
      MEMORY[0x237DF5ED0](&a35);
      if (!atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
      _Unwind_Resume(a1);
    }
LABEL_11:
    operator delete(a15);
    goto LABEL_12;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
    goto LABEL_12;
  }
  goto LABEL_11;
}

void sub_235E42E50()
{
  if (atomic_fetch_add((atomic_ullong *volatile)(v0 + 8), 0xFFFFFFFFFFFFFFFFLL)) {
    JUMPOUT(0x235E42E48);
  }
  JUMPOUT(0x235E42E18);
}

uint64_t __copy_helper_block_e8_32c188_ZTSNSt3__110shared_ptrIZN5radio16ARICommandDriver31setRxDiversityStateWithRAT_syncEiNS2_14RFRatSelectionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c188_ZTSNSt3__110shared_ptrIZN5radio16ARICommandDriver31setRxDiversityStateWithRAT_syncEiNS2_14RFRatSelectionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::setRxDiversityStateWithRAT_sync(int,radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::allocator<radio::ARICommandDriver::setRxDiversityStateWithRAT_sync(int,radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940598;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::setRxDiversityStateWithRAT_sync(int,radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::allocator<radio::ARICommandDriver::setRxDiversityStateWithRAT_sync(int,radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940598;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::setRxDiversityStateWithRAT_sync(int,radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::allocator<radio::ARICommandDriver::setRxDiversityStateWithRAT_sync(int,radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>::__on_zero_shared(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = a1[4];
  if (v3) {
    dispatch_release(v3);
  }
  CFTypeRef v4 = (const void *)a1[3];
  if (v4) {
    _Block_release(v4);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::ARICommandDriver::setAntennaTxPort(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>(radio::ARICommandDriver::setAntennaTxPort(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::ARICommandDriver::setAntennaTxPort(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,dispatch_queue_s *::default_delete<radio::ARICommandDriver::setAntennaTxPort(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v2 = *(uint64_t **)a1;
  uint64_t v4 = **(void **)a1;
  CFDictionaryRef v3 = *(const __CFDictionary **)(*(void *)a1 + 8);
  CFDictionaryRef v14 = v3;
  if (v3) {
    CFRetain(v3);
  }
  uint64_t v5 = (const void *)v2[2];
  if (v5)
  {
    uint64_t v6 = _Block_copy(v5);
    long long v7 = v2[3];
    long long v12 = v6;
    long long v13 = v7;
    if (!v7) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v6 = 0;
  long long v7 = v2[3];
  long long v12 = 0;
  long long v13 = v7;
  if (v7) {
LABEL_5:
  }
    dispatch_retain(v7);
LABEL_6:
  radio::ARICommandDriver::setAntennaTxPort_sync(v4, &v14, (uint64_t)&v12);
  if (v7) {
    dispatch_release(v7);
  }
  if (v6) {
    _Block_release(v6);
  }
  if (v3) {
    CFRelease(v3);
  }
  long long v8 = v2[3];
  if (v8) {
    dispatch_release(v8);
  }
  long long v9 = (const void *)v2[2];
  if (v9) {
    _Block_release(v9);
  }
  CFNumberRef v10 = (const void *)v2[1];
  if (v10) {
    CFRelease(v10);
  }
  operator delete(v2);
  CFTypeRef v11 = (std::__shared_weak_count *)*((void *)a1 + 2);
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }

  operator delete(a1);
}

void sub_235E4310C(_Unwind_Exception *a1)
{
  if (v5) {
    dispatch_release(v5);
  }
  if (v4) {
    _Block_release(v4);
  }
  if (v3) {
    CFRelease(v3);
  }
  long long v7 = v2[3];
  if (v7) {
    dispatch_release(v7);
  }
  long long v8 = (const void *)v2[2];
  if (v8) {
    _Block_release(v8);
  }
  long long v9 = (const void *)v2[1];
  if (v9) {
    CFRelease(v9);
  }
  operator delete(v2);
  CFNumberRef v10 = (std::__shared_weak_count *)v1[2];
  if (v10)
  {
    if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ___ZN3ice6detail12wrapCallbackIZN5radio16ARICommandDriver21setAntennaTxPort_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS6_I9__CFErrorEEEEEE3__0vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    CFDictionaryRef v3 = *(std::__shared_weak_count **)(v2 + 24);
    if (v3)
    {
      uint64_t v5 = std::__shared_weak_count::lock(v3);
      if (v5)
      {
        uint64_t v6 = v5;
        if (!*(void *)(v2 + 16))
        {
LABEL_50:
          if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
          return;
        }
        long long v24 = (unsigned int *)0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
        _OWORD v23[2] = v7;
        v23[3] = v7;
        v23[0] = v7;
        v23[1] = v7;
        AriSdk::ARI_CsiIceSetTxAntennaRspCb_SDK::ARI_CsiIceSetTxAntennaRspCb_SDK((AriSdk::ARI_CsiIceSetTxAntennaRspCb_SDK *)v23, a2);
        CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        block.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
        *(_OWORD *)&block.__r_.__value_.__r.__words[1] = xmmword_235E75050;
        strcpy(block.__r_.__value_.__l.__data_, "send Setting Antenna Tx Antenna Status");
        checkError((AriSdk::MsgBase *)v23, (uint64_t)&block, &cf);
        if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(block.__r_.__value_.__l.__data_);
          if (cf) {
            long long v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          }
          else {
            long long v9 = 0;
          }
          if (v9) {
            goto LABEL_28;
          }
        }
        else
        {
          if (cf) {
            long long v8 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          }
          else {
            long long v8 = 0;
          }
          if (v8) {
            goto LABEL_28;
          }
        }
        if (AriSdk::ARI_CsiIceSetTxAntennaRspCb_SDK::unpack((AriSdk::ARI_CsiIceSetTxAntennaRspCb_SDK *)v23))
        {
          std::string __p = (char *)operator new(0x38uLL);
          strcpy(__p, "Failed to unpack response of setting Antenna Tx Port");
          CreateError();
          CFTypeRef v10 = cf;
          CFTypeRef cf = (CFTypeRef)block.__r_.__value_.__r.__words[0];
          block.__r_.__value_.__r.__words[0] = 0;
          if (v10)
          {
            CFRelease(v10);
            if (block.__r_.__value_.__r.__words[0]) {
              CFRelease(block.__r_.__value_.__l.__data_);
            }
          }
          CFTypeRef v11 = __p;
          goto LABEL_27;
        }
        long long v12 = (ctu *)*v24;
        if (v12)
        {
          ctu::hex(v12);
          long long v13 = std::string::insert(&block, 0, "Error on setting antenna tx port response result: 0x", 0x34uLL);
          std::string __pa = *v13;
          v13->__r_.__value_.__l.__size_ = 0;
          v13->__r_.__value_.__r.__words[2] = 0;
          v13->__r_.__value_.__r.__words[0] = 0;
          CreateError();
          CFTypeRef v14 = cf;
          CFTypeRef cf = v21;
          if (v14) {
            CFRelease(v14);
          }
          if (SHIBYTE(__pa.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__pa.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
          {
            CFTypeRef v11 = (char *)block.__r_.__value_.__r.__words[0];
LABEL_27:
            operator delete(v11);
          }
        }
LABEL_28:
        CFTypeRef v15 = *(const void **)v2;
        if (!*(void *)v2 || !*(void *)(v2 + 8))
        {
LABEL_47:
          if (cf) {
            CFRelease(cf);
          }
          MEMORY[0x237DF6110](v23);
          goto LABEL_50;
        }
        CFTypeRef v16 = cf;
        if (cf && (CFRetain(cf), (CFTypeRef v15 = *(const void **)v2) == 0)) {
          CFTypeRef v17 = 0;
        }
        else {
          CFTypeRef v17 = _Block_copy(v15);
        }
        long long v18 = *(NSObject **)(v2 + 8);
        block.__r_.__value_.__r.__words[0] = MEMORY[0x263EF8330];
        block.__r_.__value_.__l.__size_ = 1174405120;
        block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
        long long v26 = &__block_descriptor_tmp_181;
        if (v17)
        {
          CFTypeRef v27 = _Block_copy(v17);
          CFTypeRef v28 = v16;
          if (!v16) {
            goto LABEL_39;
          }
        }
        else
        {
          CFTypeRef v27 = 0;
          CFTypeRef v28 = v16;
          if (!v16)
          {
LABEL_39:
            dispatch_async(v18, &block);
            if (v28) {
              CFRelease(v28);
            }
            if (v27) {
              _Block_release(v27);
            }
            if (v17) {
              _Block_release(v17);
            }
            if (v16) {
              CFRelease(v16);
            }
            goto LABEL_47;
          }
        }
        CFRetain(v16);
        goto LABEL_39;
      }
    }
  }
}

void sub_235E43564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, CFTypeRef cf, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v19 - 73) < 0) {
    operator delete(*(void **)(v19 - 96));
  }
  if (cf) {
    CFRelease(cf);
  }
  MEMORY[0x237DF6110](&a18);
  if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c180_ZTSNSt3__110shared_ptrIZN5radio16ARICommandDriver21setAntennaTxPort_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS5_I9__CFErrorEEEEEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c180_ZTSNSt3__110shared_ptrIZN5radio16ARICommandDriver21setAntennaTxPort_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS5_I9__CFErrorEEEEEE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::setAntennaTxPort_sync(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::allocator<radio::ARICommandDriver::setAntennaTxPort_sync(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940618;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::setAntennaTxPort_sync(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::allocator<radio::ARICommandDriver::setAntennaTxPort_sync(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940618;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::setAntennaTxPort_sync(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::allocator<radio::ARICommandDriver::setAntennaTxPort_sync(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>::__on_zero_shared(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  CFDictionaryRef v3 = a1[4];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (const void *)a1[3];
  if (v4) {
    _Block_release(v4);
  }
}

void ___ZN3ice6detail12wrapCallbackIZN5radio16ARICommandDriver19setARTDWithRAT_syncEiNS3_14RFRatSelectionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEE3__0vEENS5_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    CFDictionaryRef v3 = *(std::__shared_weak_count **)(v2 + 24);
    if (v3)
    {
      uint64_t v5 = std::__shared_weak_count::lock(v3);
      if (v5)
      {
        uint64_t v6 = v5;
        if (!*(void *)(v2 + 16))
        {
LABEL_68:
          if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
          return;
        }
        long long v37 = (unsigned int *)0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
        CFTypeRef v36[2] = v7;
        v36[3] = v7;
        v36[0] = v7;
        v36[1] = v7;
        AriSdk::ARI_CsiIceArtdSettingRspCb_SDK::ARI_CsiIceArtdSettingRspCb_SDK((AriSdk::ARI_CsiIceArtdSettingRspCb_SDK *)v36, a2);
        CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        std::to_string(&v34, *(_DWORD *)(v2 + 32));
        long long v8 = std::string::insert(&v34, 0, "send Setting ARTD Settings for: ", 0x20uLL);
        long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
        block.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
        *(_OWORD *)&block.__r_.__value_.__l.__data_ = v9;
        v8->__r_.__value_.__l.__size_ = 0;
        v8->__r_.__value_.__r.__words[2] = 0;
        v8->__r_.__value_.__r.__words[0] = 0;
        checkError((AriSdk::MsgBase *)v36, (uint64_t)&block, &cf);
        if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(block.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_7:
            if (cf) {
              CFTypeRef v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
            }
            else {
              CFTypeRef v10 = 0;
            }
            if (v10) {
              goto LABEL_46;
            }
            goto LABEL_17;
          }
        }
        else if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_7;
        }
        operator delete(v34.__r_.__value_.__l.__data_);
        if (cf) {
          CFTypeRef v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          CFTypeRef v11 = 0;
        }
        if (v11) {
          goto LABEL_46;
        }
LABEL_17:
        if (AriSdk::ARI_CsiIceArtdSettingRspCb_SDK::unpack((AriSdk::ARI_CsiIceArtdSettingRspCb_SDK *)v36))
        {
          std::to_string(&block, *(_DWORD *)(v2 + 32));
          long long v12 = std::string::insert(&block, 0, "Failed to unpack response of setting ARTD, and RAT selection: ", 0x3EuLL);
          long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
          v34.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v13;
          v12->__r_.__value_.__l.__size_ = 0;
          v12->__r_.__value_.__r.__words[2] = 0;
          v12->__r_.__value_.__r.__words[0] = 0;
          CreateError();
          CFTypeRef v14 = cf;
          CFTypeRef cf = (CFTypeRef)v32.__r_.__value_.__r.__words[0];
          v32.__r_.__value_.__r.__words[0] = 0;
          if (v14) {
            CFRelease(v14);
          }
          if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v34.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
          {
            CFTypeRef v15 = (void *)block.__r_.__value_.__r.__words[0];
LABEL_45:
            operator delete(v15);
          }
LABEL_46:
          long long v26 = *(const void **)v2;
          if (!*(void *)v2 || !*(void *)(v2 + 8))
          {
LABEL_65:
            if (cf) {
              CFRelease(cf);
            }
            MEMORY[0x237DF5E70](v36);
            goto LABEL_68;
          }
          CFTypeRef v27 = cf;
          if (cf && (CFRetain(cf), (long long v26 = *(const void **)v2) == 0)) {
            CFTypeRef v28 = 0;
          }
          else {
            CFTypeRef v28 = _Block_copy(v26);
          }
          long long v29 = *(NSObject **)(v2 + 8);
          block.__r_.__value_.__r.__words[0] = MEMORY[0x263EF8330];
          block.__r_.__value_.__l.__size_ = 1174405120;
          block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
          long long v39 = &__block_descriptor_tmp_181;
          if (v28)
          {
            std::string v40 = _Block_copy(v28);
            CFTypeRef v41 = v27;
            if (!v27) {
              goto LABEL_57;
            }
          }
          else
          {
            std::string v40 = 0;
            CFTypeRef v41 = v27;
            if (!v27)
            {
LABEL_57:
              dispatch_async(v29, &block);
              if (v41) {
                CFRelease(v41);
              }
              if (v40) {
                _Block_release(v40);
              }
              if (v28) {
                _Block_release(v28);
              }
              if (v27) {
                CFRelease(v27);
              }
              goto LABEL_65;
            }
          }
          CFRetain(v27);
          goto LABEL_57;
        }
        CFTypeRef v16 = (ctu *)*v37;
        if (!v16) {
          goto LABEL_46;
        }
        ctu::hex(v16);
        CFTypeRef v17 = std::string::insert(&v31, 0, "Error on setting ARTD response result: 0x", 0x29uLL);
        long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        v32.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        uint64_t v19 = std::string::append(&v32, ", and RAT selection: ", 0x15uLL);
        long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        block.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)&block.__r_.__value_.__l.__data_ = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&__p, *(_DWORD *)(v2 + 32));
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        CFTypeRef v23 = std::string::append(&block, (const std::string::value_type *)p_p, size);
        long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v34.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        CreateError();
        CFTypeRef v25 = cf;
        CFTypeRef cf = v33;
        CFTypeRef v33 = 0;
        if (v25)
        {
          CFRelease(v25);
          if (v33) {
            CFRelease(v33);
          }
        }
        if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v34.__r_.__value_.__l.__data_);
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_36:
            if ((SHIBYTE(block.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_37;
            }
            goto LABEL_42;
          }
        }
        else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_36;
        }
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((SHIBYTE(block.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_37:
          if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_38;
          }
          goto LABEL_43;
        }
LABEL_42:
        operator delete(block.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_38:
          if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_46;
          }
LABEL_44:
          CFTypeRef v15 = (void *)v31.__r_.__value_.__r.__words[0];
          goto LABEL_45;
        }
LABEL_43:
        operator delete(v32.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_46;
        }
        goto LABEL_44;
      }
    }
  }
}

void sub_235E43C4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,CFTypeRef cf,char a35)
{
  if (a33 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v36 - 73) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((*(char *)(v36 - 73) & 0x80000000) == 0)
  {
LABEL_4:
    if ((a26 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(*(void **)(v36 - 96));
  if ((a26 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a20 & 0x80000000) == 0)
    {
LABEL_12:
      if (cf) {
        CFRelease(cf);
      }
      MEMORY[0x237DF5E70](&a35);
      if (!atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
      _Unwind_Resume(a1);
    }
LABEL_11:
    operator delete(a15);
    goto LABEL_12;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
    goto LABEL_12;
  }
  goto LABEL_11;
}

void sub_235E43E08()
{
  if (atomic_fetch_add((atomic_ullong *volatile)(v0 + 8), 0xFFFFFFFFFFFFFFFFLL)) {
    JUMPOUT(0x235E43E00);
  }
  JUMPOUT(0x235E43DD0);
}

uint64_t __copy_helper_block_e8_32c176_ZTSNSt3__110shared_ptrIZN5radio16ARICommandDriver19setARTDWithRAT_syncEiNS2_14RFRatSelectionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c176_ZTSNSt3__110shared_ptrIZN5radio16ARICommandDriver19setARTDWithRAT_syncEiNS2_14RFRatSelectionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::setARTDWithRAT_sync(int,radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::allocator<radio::ARICommandDriver::setARTDWithRAT_sync(int,radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940698;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::setARTDWithRAT_sync(int,radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::allocator<radio::ARICommandDriver::setARTDWithRAT_sync(int,radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940698;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::setARTDWithRAT_sync(int,radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::allocator<radio::ARICommandDriver::setARTDWithRAT_sync(int,radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>::__on_zero_shared(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  CFDictionaryRef v3 = a1[4];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (const void *)a1[3];
  if (v4) {
    _Block_release(v4);
  }
}

void ___ZN3ice6detail12wrapCallbackIZN5radio16ARICommandDriver20setARFCNWithRAT_syncEiNS3_14RFRatSelectionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEE3__0vEENS5_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    CFDictionaryRef v3 = *(std::__shared_weak_count **)(v2 + 24);
    if (v3)
    {
      uint64_t v5 = std::__shared_weak_count::lock(v3);
      if (v5)
      {
        uint64_t v6 = v5;
        if (!*(void *)(v2 + 16))
        {
LABEL_68:
          if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
          return;
        }
        long long v37 = (unsigned int *)0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
        CFTypeRef v36[2] = v7;
        v36[3] = v7;
        v36[0] = v7;
        v36[1] = v7;
        AriSdk::ARI_CsiIceArfcnLockRspCb_SDK::ARI_CsiIceArfcnLockRspCb_SDK((AriSdk::ARI_CsiIceArfcnLockRspCb_SDK *)v36, a2);
        CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        std::to_string(&v34, *(_DWORD *)(v2 + 32));
        long long v8 = std::string::insert(&v34, 0, "send Setting ARFCN Lock Settings for: ", 0x26uLL);
        long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
        block.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
        *(_OWORD *)&block.__r_.__value_.__l.__data_ = v9;
        v8->__r_.__value_.__l.__size_ = 0;
        v8->__r_.__value_.__r.__words[2] = 0;
        v8->__r_.__value_.__r.__words[0] = 0;
        checkError((AriSdk::MsgBase *)v36, (uint64_t)&block, &cf);
        if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(block.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_7:
            if (cf) {
              CFTypeRef v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
            }
            else {
              CFTypeRef v10 = 0;
            }
            if (v10) {
              goto LABEL_46;
            }
            goto LABEL_17;
          }
        }
        else if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_7;
        }
        operator delete(v34.__r_.__value_.__l.__data_);
        if (cf) {
          CFTypeRef v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          CFTypeRef v11 = 0;
        }
        if (v11) {
          goto LABEL_46;
        }
LABEL_17:
        if (AriSdk::ARI_CsiIceArfcnLockRspCb_SDK::unpack((AriSdk::ARI_CsiIceArfcnLockRspCb_SDK *)v36))
        {
          std::to_string(&block, *(_DWORD *)(v2 + 32));
          long long v12 = std::string::insert(&block, 0, "Failed to unpack response of setting ARFCN Lock, and RAT selection: ", 0x44uLL);
          long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
          v34.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v13;
          v12->__r_.__value_.__l.__size_ = 0;
          v12->__r_.__value_.__r.__words[2] = 0;
          v12->__r_.__value_.__r.__words[0] = 0;
          CreateError();
          CFTypeRef v14 = cf;
          CFTypeRef cf = (CFTypeRef)v32.__r_.__value_.__r.__words[0];
          v32.__r_.__value_.__r.__words[0] = 0;
          if (v14) {
            CFRelease(v14);
          }
          if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v34.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
          {
            CFTypeRef v15 = (void *)block.__r_.__value_.__r.__words[0];
LABEL_45:
            operator delete(v15);
          }
LABEL_46:
          long long v26 = *(const void **)v2;
          if (!*(void *)v2 || !*(void *)(v2 + 8))
          {
LABEL_65:
            if (cf) {
              CFRelease(cf);
            }
            MEMORY[0x237DF5A80](v36);
            goto LABEL_68;
          }
          CFTypeRef v27 = cf;
          if (cf && (CFRetain(cf), (long long v26 = *(const void **)v2) == 0)) {
            CFTypeRef v28 = 0;
          }
          else {
            CFTypeRef v28 = _Block_copy(v26);
          }
          long long v29 = *(NSObject **)(v2 + 8);
          block.__r_.__value_.__r.__words[0] = MEMORY[0x263EF8330];
          block.__r_.__value_.__l.__size_ = 1174405120;
          block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
          long long v39 = &__block_descriptor_tmp_181;
          if (v28)
          {
            std::string v40 = _Block_copy(v28);
            CFTypeRef v41 = v27;
            if (!v27) {
              goto LABEL_57;
            }
          }
          else
          {
            std::string v40 = 0;
            CFTypeRef v41 = v27;
            if (!v27)
            {
LABEL_57:
              dispatch_async(v29, &block);
              if (v41) {
                CFRelease(v41);
              }
              if (v40) {
                _Block_release(v40);
              }
              if (v28) {
                _Block_release(v28);
              }
              if (v27) {
                CFRelease(v27);
              }
              goto LABEL_65;
            }
          }
          CFRetain(v27);
          goto LABEL_57;
        }
        CFTypeRef v16 = (ctu *)*v37;
        if (!v16) {
          goto LABEL_46;
        }
        ctu::hex(v16);
        CFTypeRef v17 = std::string::insert(&v31, 0, "Error on setting ARFCN Lock response result: 0x", 0x2FuLL);
        long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        v32.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        uint64_t v19 = std::string::append(&v32, ", and RAT selection: ", 0x15uLL);
        long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        block.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)&block.__r_.__value_.__l.__data_ = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&__p, *(_DWORD *)(v2 + 32));
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        CFTypeRef v23 = std::string::append(&block, (const std::string::value_type *)p_p, size);
        long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v34.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        CreateError();
        CFTypeRef v25 = cf;
        CFTypeRef cf = v33;
        CFTypeRef v33 = 0;
        if (v25)
        {
          CFRelease(v25);
          if (v33) {
            CFRelease(v33);
          }
        }
        if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v34.__r_.__value_.__l.__data_);
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_36:
            if ((SHIBYTE(block.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_37;
            }
            goto LABEL_42;
          }
        }
        else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_36;
        }
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((SHIBYTE(block.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_37:
          if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_38;
          }
          goto LABEL_43;
        }
LABEL_42:
        operator delete(block.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_38:
          if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_46;
          }
LABEL_44:
          CFTypeRef v15 = (void *)v31.__r_.__value_.__r.__words[0];
          goto LABEL_45;
        }
LABEL_43:
        operator delete(v32.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_46;
        }
        goto LABEL_44;
      }
    }
  }
}

void sub_235E44400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,CFTypeRef cf,char a35)
{
  if (a33 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v36 - 73) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((*(char *)(v36 - 73) & 0x80000000) == 0)
  {
LABEL_4:
    if ((a26 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(*(void **)(v36 - 96));
  if ((a26 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a20 & 0x80000000) == 0)
    {
LABEL_12:
      if (cf) {
        CFRelease(cf);
      }
      MEMORY[0x237DF5A80](&a35);
      if (!atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
      _Unwind_Resume(a1);
    }
LABEL_11:
    operator delete(a15);
    goto LABEL_12;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
    goto LABEL_12;
  }
  goto LABEL_11;
}

void sub_235E445BC()
{
  if (atomic_fetch_add((atomic_ullong *volatile)(v0 + 8), 0xFFFFFFFFFFFFFFFFLL)) {
    JUMPOUT(0x235E445B4);
  }
  JUMPOUT(0x235E44584);
}

uint64_t __copy_helper_block_e8_32c177_ZTSNSt3__110shared_ptrIZN5radio16ARICommandDriver20setARFCNWithRAT_syncEiNS2_14RFRatSelectionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c177_ZTSNSt3__110shared_ptrIZN5radio16ARICommandDriver20setARFCNWithRAT_syncEiNS2_14RFRatSelectionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::setARFCNWithRAT_sync(int,radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::allocator<radio::ARICommandDriver::setARFCNWithRAT_sync(int,radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940718;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::setARFCNWithRAT_sync(int,radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::allocator<radio::ARICommandDriver::setARFCNWithRAT_sync(int,radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940718;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::setARFCNWithRAT_sync(int,radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::allocator<radio::ARICommandDriver::setARFCNWithRAT_sync(int,radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>::__on_zero_shared(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  CFDictionaryRef v3 = a1[4];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (const void *)a1[3];
  if (v4) {
    _Block_release(v4);
  }
}

void ___ZN3ice6detail12wrapCallbackIZN5radio16ARICommandDriver10setCA_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS6_I9__CFErrorEEEEEE3__0vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    CFDictionaryRef v3 = *(std::__shared_weak_count **)(v2 + 24);
    if (v3)
    {
      uint64_t v5 = std::__shared_weak_count::lock(v3);
      if (v5)
      {
        uint64_t v6 = v5;
        if (!*(void *)(v2 + 16))
        {
LABEL_50:
          if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
          return;
        }
        long long v24 = (unsigned int *)0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
        _OWORD v23[2] = v7;
        v23[3] = v7;
        v23[0] = v7;
        v23[1] = v7;
        AriSdk::ARI_CsiIceCaEnableRspCb_SDK::ARI_CsiIceCaEnableRspCb_SDK((AriSdk::ARI_CsiIceCaEnableRspCb_SDK *)v23, a2);
        CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        block.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
        *(_OWORD *)&block.__r_.__value_.__r.__words[1] = xmmword_235E71940;
        strcpy(block.__r_.__value_.__l.__data_, "send Setting CA Enabled");
        checkError((AriSdk::MsgBase *)v23, (uint64_t)&block, &cf);
        if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(block.__r_.__value_.__l.__data_);
          if (cf) {
            long long v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          }
          else {
            long long v9 = 0;
          }
          if (v9) {
            goto LABEL_28;
          }
        }
        else
        {
          if (cf) {
            long long v8 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          }
          else {
            long long v8 = 0;
          }
          if (v8) {
            goto LABEL_28;
          }
        }
        if (AriSdk::ARI_CsiIceCaEnableRspCb_SDK::unpack((AriSdk::ARI_CsiIceCaEnableRspCb_SDK *)v23))
        {
          std::string __p = (char *)operator new(0x28uLL);
          strcpy(__p, "Failed to unpack response of setting CA");
          CreateError();
          CFTypeRef v10 = cf;
          CFTypeRef cf = (CFTypeRef)block.__r_.__value_.__r.__words[0];
          block.__r_.__value_.__r.__words[0] = 0;
          if (v10)
          {
            CFRelease(v10);
            if (block.__r_.__value_.__r.__words[0]) {
              CFRelease(block.__r_.__value_.__l.__data_);
            }
          }
          CFTypeRef v11 = __p;
          goto LABEL_27;
        }
        long long v12 = (ctu *)*v24;
        if (v12)
        {
          ctu::hex(v12);
          long long v13 = std::string::insert(&block, 0, "Error on enabling CA response result: 0x", 0x28uLL);
          std::string __pa = *v13;
          v13->__r_.__value_.__l.__size_ = 0;
          v13->__r_.__value_.__r.__words[2] = 0;
          v13->__r_.__value_.__r.__words[0] = 0;
          CreateError();
          CFTypeRef v14 = cf;
          CFTypeRef cf = v21;
          if (v14) {
            CFRelease(v14);
          }
          if (SHIBYTE(__pa.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__pa.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
          {
            CFTypeRef v11 = (char *)block.__r_.__value_.__r.__words[0];
LABEL_27:
            operator delete(v11);
          }
        }
LABEL_28:
        CFTypeRef v15 = *(const void **)v2;
        if (!*(void *)v2 || !*(void *)(v2 + 8))
        {
LABEL_47:
          if (cf) {
            CFRelease(cf);
          }
          MEMORY[0x237DF59A0](v23);
          goto LABEL_50;
        }
        CFTypeRef v16 = cf;
        if (cf && (CFRetain(cf), (CFTypeRef v15 = *(const void **)v2) == 0)) {
          CFTypeRef v17 = 0;
        }
        else {
          CFTypeRef v17 = _Block_copy(v15);
        }
        long long v18 = *(NSObject **)(v2 + 8);
        block.__r_.__value_.__r.__words[0] = MEMORY[0x263EF8330];
        block.__r_.__value_.__l.__size_ = 1174405120;
        block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
        long long v26 = &__block_descriptor_tmp_181;
        if (v17)
        {
          CFTypeRef v27 = _Block_copy(v17);
          CFTypeRef v28 = v16;
          if (!v16) {
            goto LABEL_39;
          }
        }
        else
        {
          CFTypeRef v27 = 0;
          CFTypeRef v28 = v16;
          if (!v16)
          {
LABEL_39:
            dispatch_async(v18, &block);
            if (v28) {
              CFRelease(v28);
            }
            if (v27) {
              _Block_release(v27);
            }
            if (v17) {
              _Block_release(v17);
            }
            if (v16) {
              CFRelease(v16);
            }
            goto LABEL_47;
          }
        }
        CFRetain(v16);
        goto LABEL_39;
      }
    }
  }
}

void sub_235E44AAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, CFTypeRef cf, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v19 - 73) < 0) {
    operator delete(*(void **)(v19 - 96));
  }
  if (cf) {
    CFRelease(cf);
  }
  MEMORY[0x237DF59A0](&a18);
  if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c169_ZTSNSt3__110shared_ptrIZN5radio16ARICommandDriver10setCA_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS5_I9__CFErrorEEEEEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c169_ZTSNSt3__110shared_ptrIZN5radio16ARICommandDriver10setCA_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS5_I9__CFErrorEEEEEE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::setCA_sync(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::allocator<radio::ARICommandDriver::setCA_sync(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940798;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::setCA_sync(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::allocator<radio::ARICommandDriver::setCA_sync(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940798;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::setCA_sync(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::allocator<radio::ARICommandDriver::setCA_sync(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>::__on_zero_shared(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  CFDictionaryRef v3 = a1[4];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (const void *)a1[3];
  if (v4) {
    _Block_release(v4);
  }
}

void ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver14simTestCommandENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENSF_IK14__CFDictionaryEEEEEEUb6_E4__19vEENSB_5blockIU13block_pointerFiPhjEEENS4_17integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    CFDictionaryRef v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
    {
      uint64_t v5 = *(void *)(v2 + 56);
      uint64_t v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        long long v7 = v6;
        if (!*(void *)v2)
        {
LABEL_52:
          if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v25[5] = v8;
        v25[6] = v8;
        v25[3] = v8;
        _OWORD v25[4] = v8;
        v25[1] = v8;
        v25[2] = v8;
        v25[0] = v8;
        AriSdk::ARI_IBISimTestRspCb_SDK::ARI_IBISimTestRspCb_SDK((AriSdk::ARI_IBISimTestRspCb_SDK *)v25, a2);
        CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        int v9 = *(char *)(v2 + 55);
        if (v9 >= 0) {
          size_t v10 = *(unsigned __int8 *)(v2 + 55);
        }
        else {
          size_t v10 = *(void *)(v2 + 40);
        }
        size_t v11 = v10 + 23;
        memset(__p, 170, 24);
        if (v10 + 23 >= 0x7FFFFFFFFFFFFFF8) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        long long v12 = (void *)(v2 + 32);
        if (v10 < 0xFFFFFFFFFFFFFFE9)
        {
          uint64_t v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v11 | 7) != 0x17) {
            uint64_t v14 = v11 | 7;
          }
          uint64_t v15 = v14 + 1;
          CFTypeRef v16 = (char *)operator new(v14 + 1);
          __p[1] = (void *)(v10 + 23);
          __p[2] = (void *)(v15 | 0x8000000000000000);
          __p[0] = v16;
          qmemcpy(v16, "send SIM test command: ", 23);
          long long v13 = v16 + 23;
          if (!v10)
          {
LABEL_18:
            v13[v10] = 0;
            checkError((AriSdk::MsgBase *)v25, (uint64_t)__p, &cf);
            if (SHIBYTE(__p[2]) < 0) {
              operator delete(__p[0]);
            }
            if (cf) {
              long long v18 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
            }
            else {
              long long v18 = 0;
            }
            if (!v18)
            {
              uint64_t v19 = *(NSObject **)(v5 + 40);
              if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
              {
                if (*(char *)(v2 + 55) < 0) {
                  long long v12 = (void *)*v12;
                }
                LODWORD(__p[0]) = 136315138;
                *(void **)((char *)__p + 4) = v12;
                _os_log_impl(&dword_235DB9000, v19, OS_LOG_TYPE_DEFAULT, "#I SIM test command: %s successful", (uint8_t *)__p, 0xCu);
              }
            }
            long long v20 = *(const void **)(v2 + 16);
            if (!v20 || !*(void *)(v2 + 24)) {
              goto LABEL_49;
            }
            CFTypeRef v21 = cf;
            if (cf && (CFRetain(cf), (long long v20 = *(const void **)(v2 + 16)) == 0)) {
              int v22 = 0;
            }
            else {
              int v22 = _Block_copy(v20);
            }
            CFTypeRef v23 = *(NSObject **)(v2 + 24);
            __p[0] = (void *)MEMORY[0x263EF8330];
            __p[1] = (void *)1174405120;
            __p[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke_0;
            __p[3] = &__block_descriptor_tmp_191;
            if (v22)
            {
              aBlock = _Block_copy(v22);
              CFTypeRef v28 = v21;
              if (!v21) {
                goto LABEL_39;
              }
            }
            else
            {
              aBlock = 0;
              CFTypeRef v28 = v21;
              if (!v21)
              {
LABEL_39:
                CFTypeRef v29 = 0;
                dispatch_async(v23, __p);
                if (v29) {
                  CFRelease(v29);
                }
                if (v28) {
                  CFRelease(v28);
                }
                if (aBlock) {
                  _Block_release(aBlock);
                }
                if (v22) {
                  _Block_release(v22);
                }
                if (v21) {
                  CFRelease(v21);
                }
LABEL_49:
                if (cf) {
                  CFRelease(cf);
                }
                MEMORY[0x237DF5500](v25);
                goto LABEL_52;
              }
            }
            CFRetain(v21);
            goto LABEL_39;
          }
        }
        else
        {
          long long v13 = (char *)&__p[2] + 7;
          HIBYTE(__p[2]) = v10 + 23;
          qmemcpy(__p, "send SIM test command: ", 23);
        }
        if (v9 >= 0) {
          CFTypeRef v17 = (void *)(v2 + 32);
        }
        else {
          CFTypeRef v17 = (void *)*v12;
        }
        memmove(v13, v17, v10);
        goto LABEL_18;
      }
    }
  }
}

void sub_235E4507C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c238_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver14simTestCommandENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENSD_IK14__CFDictionaryEEEEEEUb6_E4__19EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c238_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver14simTestCommandENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENSD_IK14__CFDictionaryEEEEEEUb6_E4__19EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver14simTestCommandENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENSD_IK14__CFDictionaryEEEEEEUb6_E4__19NS6_ISM_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940818;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver14simTestCommandENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENSD_IK14__CFDictionaryEEEEEEUb6_E4__19NS6_ISM_EEED0Ev(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940818;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver14simTestCommandENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENSD_IK14__CFDictionaryEEEEEEUb6_E4__19NS6_ISM_EEE16__on_zero_sharedEv(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  uint64_t v2 = *(NSObject **)(a1 + 48);
  if (v2) {
    dispatch_release(v2);
  }
  CFDictionaryRef v3 = *(const void **)(a1 + 40);
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 32);
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke(void *a1)
{
  uint64_t v3 = a1[4];
  uint64_t v2 = (void *)a1[5];
  xpc_object_t v6 = v2;
  if (!v2)
  {
    xpc_object_t v6 = xpc_null_create();
    uint64_t v4 = (void *)a1[6];
    xpc_object_t object = v4;
    if (v4) {
      goto LABEL_3;
    }
LABEL_5:
    xpc_object_t object = xpc_null_create();
    goto LABEL_6;
  }
  xpc_retain(v2);
  uint64_t v4 = (void *)a1[6];
  xpc_object_t object = v4;
  if (!v4) {
    goto LABEL_5;
  }
LABEL_3:
  xpc_retain(v4);
LABEL_6:
  (*(void (**)(uint64_t, xpc_object_t *, xpc_object_t *))(v3 + 16))(v3, &v6, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v6);
}

void sub_235E45330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, xpc_object_t a10)
{
}

xpc_object_t __copy_helper_block_e8_32c58_ZTSN8dispatch5blockIU13block_pointerFvN3xpc6objectES2_EEE40c17_ZTSN3xpc6objectE48c17_ZTSN3xpc6objectE(void *a1, void *a2)
{
  uint64_t v4 = (const void *)a2[4];
  if (v4)
  {
    uint64_t v5 = _Block_copy(v4);
    xpc_object_t v6 = (void *)a2[5];
    a1[4] = v5;
    a1[5] = v6;
    if (v6) {
      goto LABEL_3;
    }
LABEL_6:
    a1[5] = xpc_null_create();
    long long v7 = (void *)a2[6];
    a1[6] = v7;
    if (v7) {
      return xpc_retain(v7);
    }
    goto LABEL_7;
  }
  xpc_object_t v6 = (void *)a2[5];
  a1[4] = 0;
  a1[5] = v6;
  if (!v6) {
    goto LABEL_6;
  }
LABEL_3:
  xpc_retain(v6);
  long long v7 = (void *)a2[6];
  a1[6] = v7;
  if (v7) {
    return xpc_retain(v7);
  }
LABEL_7:
  xpc_object_t result = xpc_null_create();
  a1[6] = result;
  return result;
}

void __destroy_helper_block_e8_32c58_ZTSN8dispatch5blockIU13block_pointerFvN3xpc6objectES2_EEE40c17_ZTSN3xpc6objectE48c17_ZTSN3xpc6objectE(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 48));
  *(void *)(a1 + 48) = 0;
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(void *)(a1 + 40) = 0;
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2) {
    _Block_release(v2);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::ARICommandDriver::getFirmwareNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>(radio::ARICommandDriver::getFirmwareNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::ARICommandDriver::getFirmwareNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0,dispatch_queue_s *::default_delete<radio::ARICommandDriver::getFirmwareNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>>)::{lambda(void *)#1}::__invoke(std::__shared_weak_count_vtbl ***a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v22[2] = v4;
  v22[3] = v4;
  v22[0] = v4;
  v22[1] = v4;
  AriSdk::ARI_CsiSecGetRandomNumReq_SDK::ARI_CsiSecGetRandomNumReq_SDK((AriSdk::ARI_CsiSecGetRandomNumReq_SDK *)v22);
  on_zero_shared_weak = v3[7].__on_zero_shared_weak;
  xpc_object_t v6 = v2[1];
  if (v6)
  {
    long long v7 = _Block_copy(v6);
    long long v8 = v2[2];
    if (!v8) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  long long v7 = 0;
  long long v8 = v2[2];
  if (v8) {
LABEL_3:
  }
    dispatch_retain(v8);
LABEL_4:
  size_t v10 = v2[3];
  uint64_t v9 = (uint64_t)v2[4];
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 16), 1uLL, memory_order_relaxed);
  }
  size_t v11 = (std::__shared_weak_count *)operator new(0x40uLL);
  v11->__shared_owners_ = 0;
  p_shared_owners = &v11->__shared_owners_;
  v11->__shared_weak_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E9408C8;
  v11[1].__vftable = v3;
  v11[1].__shared_owners_ = (uint64_t)v7;
  v11[1].__shared_weak_owners_ = (uint64_t)v8;
  v11[2].__vftable = v10;
  v11[2].__shared_owners_ = v9;
  *(void *)&long long v24 = MEMORY[0x263EF8330];
  *((void *)&v24 + 1) = 1174405120;
  *(void *)&long long v25 = ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver16getFirmwareNonceEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES7_EEEENK3__0clEvEUlPKhjE_vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  *((void *)&v25 + 1) = &__block_descriptor_tmp_271;
  unint64_t v26 = (unint64_t)&v11[1];
  CFTypeRef v27 = v11;
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v29 = 0x40000000;
  uint64_t v30 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
  std::string v31 = &unk_264C7DF90;
  std::string v32 = &v24;
  long long v13 = _Block_copy(&aBlock);
  uint64_t v14 = v27;
  if (!v27 || atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_9:
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_10:
  *(void *)&long long v15 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v24 = v15;
  long long v25 = v15;
  unint64_t v26 = 0xAAAAAAAAAAAAAAAALL;
  CFTypeRef v16 = (std::__shared_weak_count *)*((void *)on_zero_shared_weak + 2);
  uint64_t aBlock = *((void *)on_zero_shared_weak + 1);
  if (!v16)
  {
    uint64_t v29 = 0;
LABEL_32:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v29 = (uint64_t)std::__shared_weak_count::lock(v16);
  if (!v29) {
    goto LABEL_32;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  CFTypeRef v17 = (std::__shared_weak_count *)v29;
  if (v29 && !atomic_fetch_add((atomic_ullong *volatile)(v29 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  CFTypeRef v23 = v13;
  ice::SendMsgBaseProxy::callback();
  if (v23) {
    _Block_release(v23);
  }
  MEMORY[0x237DF50B0](&v24);
  MEMORY[0x237DF5DB0](v22);
  long long v18 = (std::__shared_weak_count *)v2[4];
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
  uint64_t v19 = v2[2];
  if (v19) {
    dispatch_release(v19);
  }
  long long v20 = v2[1];
  if (v20) {
    _Block_release(v20);
  }
  operator delete(v2);
  CFTypeRef v21 = (std::__shared_weak_count *)a1[2];
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  operator delete(a1);
}

void sub_235E457B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *aBlock, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  MEMORY[0x237DF50B0](&a19);
  MEMORY[0x237DF5DB0](&a9);
  uint64_t v29 = (std::__shared_weak_count *)v27[4];
  if (v29)
  {
    std::__shared_weak_count::__release_weak(v29);
    uint64_t v30 = v27[2];
    if (!v30)
    {
LABEL_5:
      std::string v31 = (const void *)v27[1];
      if (!v31)
      {
LABEL_10:
        operator delete(v27);
        std::string v32 = (std::__shared_weak_count *)v26[2];
        if (v32)
        {
          if (!atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        operator delete(v26);
        _Unwind_Resume(a1);
      }
LABEL_9:
      _Block_release(v31);
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v30 = v27[2];
    if (!v30) {
      goto LABEL_5;
    }
  }
  dispatch_release(v30);
  std::string v31 = (const void *)v27[1];
  if (!v31) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver16getFirmwareNonceEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES7_EEEENK3__0clEvEUlPKhjE_vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = (std::__shared_weak_count *)v2[4];
    if (v3)
    {
      uint64_t v5 = *v2;
      xpc_object_t v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        long long v7 = v6;
        if (!v2[3])
        {
LABEL_96:
          if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        unint64_t v42 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        _OWORD v41[2] = v8;
        v41[3] = v8;
        v41[0] = v8;
        v41[1] = v8;
        AriSdk::ARI_CsiSecGetRandomNumRspCb_SDK::ARI_CsiSecGetRandomNumRspCb_SDK((AriSdk::ARI_CsiSecGetRandomNumRspCb_SDK *)v41, a2);
        memset(v40, 170, sizeof(v40));
        block[23] = 18;
        strcpy(block, "send Getting Nonce");
        checkErrorStr((AriSdk::MsgBase *)v41, (uint64_t)block, (uint64_t)v40);
        if ((block[23] & 0x80000000) != 0) {
          operator delete(*(void **)block);
        }
        uint64_t v9 = (void *)HIBYTE(v40[2]);
        int v10 = SHIBYTE(v40[2]);
        if (SHIBYTE(v40[2]) < 0) {
          uint64_t v9 = v40[1];
        }
        if (!v9)
        {
          if (!AriSdk::ARI_CsiSecGetRandomNumRspCb_SDK::unpack((AriSdk::ARI_CsiSecGetRandomNumRspCb_SDK *)v41))
          {
            int v45 = -1431655766;
            *(void *)&long long v18 = 0xAAAAAAAAAAAAAAAALL;
            *((void *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
            long long __src = v18;
            long long v44 = v18;
            unsigned int v19 = *(_DWORD *)(v42 + 32);
            long long v20 = *(_OWORD *)(v42 + 16);
            long long __src = *(_OWORD *)v42;
            long long v44 = v20;
            int v45 = v19;
            if (v19 >= 0x21)
            {
              unsigned int v19 = 32;
              int v45 = 32;
            }
            std::string __p = 0;
            int v38 = 0;
            uint64_t v39 = 0;
            std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, (char *)&__src, (char *)&__src + v19, v19);
            if (v2[1] && v2[2])
            {
              xpc_object_t v21 = xpc_null_create();
              xpc_object_t v22 = xpc_data_create(__p, v38 - (unsigned char *)__p);
              if (!v22) {
                xpc_object_t v22 = xpc_null_create();
              }
              CFTypeRef v23 = (const void *)v2[1];
              if (v23) {
                long long v24 = _Block_copy(v23);
              }
              else {
                long long v24 = 0;
              }
              std::string v34 = v2[2];
              *(void *)std::string block = MEMORY[0x263EF8330];
              *(void *)&block[8] = 1174405120;
              *(void *)&block[16] = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke;
              int v47 = &__block_descriptor_tmp_270;
              if (v24) {
                long long v35 = _Block_copy(v24);
              }
              else {
                long long v35 = 0;
              }
              long long v48 = v35;
              xpc_object_t v49 = v21;
              if (v21) {
                xpc_retain(v21);
              }
              else {
                xpc_object_t v49 = xpc_null_create();
              }
              xpc_object_t v50 = v22;
              if (v22) {
                xpc_retain(v22);
              }
              else {
                xpc_object_t v50 = xpc_null_create();
              }
              dispatch_async(v34, block);
              xpc_release(v50);
              xpc_object_t v50 = 0;
              xpc_release(v49);
              xpc_object_t v49 = 0;
              if (v48) {
                _Block_release(v48);
              }
              if (v24) {
                _Block_release(v24);
              }
              xpc_release(v22);
              xpc_release(v21);
            }
            if (__p)
            {
              int v38 = __p;
              operator delete(__p);
            }
            goto LABEL_93;
          }
          if (SHIBYTE(v40[2]) < 0)
          {
            v40[1] = (void *)19;
            CFTypeRef v17 = (char *)v40[0];
          }
          else
          {
            HIBYTE(v40[2]) = 19;
            CFTypeRef v17 = (char *)v40;
          }
          strcpy(v17, "Failed to get Nonce");
          CFTypeRef v27 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
          {
            uint64_t v36 = v40;
            if (SHIBYTE(v40[2]) < 0) {
              uint64_t v36 = (void **)v40[0];
            }
            *(_DWORD *)std::string block = 136315138;
            *(void *)&void block[4] = v36;
            _os_log_error_impl(&dword_235DB9000, v27, OS_LOG_TYPE_ERROR, "%s", block, 0xCu);
            if (!v2[1]) {
              goto LABEL_93;
            }
          }
          else if (!v2[1])
          {
            goto LABEL_93;
          }
          if (!v2[2]) {
            goto LABEL_93;
          }
          if (SHIBYTE(v40[2]) >= 0) {
            CFTypeRef v28 = v40;
          }
          else {
            CFTypeRef v28 = (void **)v40[0];
          }
          xpc_object_t v13 = xpc_string_create((const char *)v28);
          if (!v13) {
            xpc_object_t v13 = xpc_null_create();
          }
          xpc_object_t v14 = xpc_null_create();
          uint64_t v29 = (const void *)v2[1];
          if (v29) {
            uint64_t v30 = _Block_copy(v29);
          }
          else {
            uint64_t v30 = 0;
          }
          std::string v32 = v2[2];
          *(void *)std::string block = MEMORY[0x263EF8330];
          *(void *)&block[8] = 1174405120;
          *(void *)&block[16] = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke;
          int v47 = &__block_descriptor_tmp_270;
          if (v30) {
            CFTypeRef v33 = _Block_copy(v30);
          }
          else {
            CFTypeRef v33 = 0;
          }
          long long v48 = v33;
          xpc_object_t v49 = v13;
          if (v13) {
            xpc_retain(v13);
          }
          else {
            xpc_object_t v49 = xpc_null_create();
          }
          xpc_object_t v50 = v14;
          if (v14) {
            xpc_retain(v14);
          }
          else {
            xpc_object_t v50 = xpc_null_create();
          }
          dispatch_async(v32, block);
          xpc_release(v50);
          xpc_object_t v50 = 0;
          xpc_release(v49);
          xpc_object_t v49 = 0;
          if (v48) {
            _Block_release(v48);
          }
          if (v30) {
            _Block_release(v30);
          }
          goto LABEL_45;
        }
        size_t v11 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          std::string v31 = (void **)v40[0];
          if (v10 >= 0) {
            std::string v31 = v40;
          }
          *(_DWORD *)std::string block = 136315138;
          *(void *)&void block[4] = v31;
          _os_log_error_impl(&dword_235DB9000, v11, OS_LOG_TYPE_ERROR, "%s", block, 0xCu);
          if (!v2[1]) {
            goto LABEL_93;
          }
        }
        else if (!v2[1])
        {
          goto LABEL_93;
        }
        if (v2[2])
        {
          if (SHIBYTE(v40[2]) >= 0) {
            long long v12 = v40;
          }
          else {
            long long v12 = (void **)v40[0];
          }
          xpc_object_t v13 = xpc_string_create((const char *)v12);
          if (!v13) {
            xpc_object_t v13 = xpc_null_create();
          }
          xpc_object_t v14 = xpc_null_create();
          long long v15 = (const void *)v2[1];
          if (v15) {
            CFTypeRef v16 = _Block_copy(v15);
          }
          else {
            CFTypeRef v16 = 0;
          }
          long long v25 = v2[2];
          *(void *)std::string block = MEMORY[0x263EF8330];
          *(void *)&block[8] = 1174405120;
          *(void *)&block[16] = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke;
          int v47 = &__block_descriptor_tmp_270;
          if (v16) {
            unint64_t v26 = _Block_copy(v16);
          }
          else {
            unint64_t v26 = 0;
          }
          long long v48 = v26;
          xpc_object_t v49 = v13;
          if (v13) {
            xpc_retain(v13);
          }
          else {
            xpc_object_t v49 = xpc_null_create();
          }
          xpc_object_t v50 = v14;
          if (v14) {
            xpc_retain(v14);
          }
          else {
            xpc_object_t v50 = xpc_null_create();
          }
          dispatch_async(v25, block);
          xpc_release(v50);
          xpc_object_t v50 = 0;
          xpc_release(v49);
          xpc_object_t v49 = 0;
          if (v48) {
            _Block_release(v48);
          }
          if (v16) {
            _Block_release(v16);
          }
LABEL_45:
          xpc_release(v14);
          xpc_release(v13);
        }
LABEL_93:
        if (SHIBYTE(v40[2]) < 0) {
          operator delete(v40[0]);
        }
        MEMORY[0x237DF61F0](v41);
        goto LABEL_96;
      }
    }
  }
}

void sub_235E45FC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c149_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver16getFirmwareNonceEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES6_EEEENK3__0clEvEUlPKhjE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c149_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver16getFirmwareNonceEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES6_EEEENK3__0clEvEUlPKhjE_EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getFirmwareNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<radio::ARICommandDriver::getFirmwareNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E9408C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getFirmwareNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<radio::ARICommandDriver::getFirmwareNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E9408C8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getFirmwareNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<radio::ARICommandDriver::getFirmwareNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[7];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = a1[5];
  if (v3) {
    dispatch_release(v3);
  }
  long long v4 = (const void *)a1[4];
  if (v4) {
    _Block_release(v4);
  }
}

void *std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(void *result, char *__src, char *a3, unint64_t a4)
{
  long long v7 = result;
  unint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      unint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    uint64_t v10 = 2 * v8;
    if (2 * v8 <= a4) {
      uint64_t v10 = a4;
    }
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v10;
    }
    if ((v11 & 0x8000000000000000) != 0) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    xpc_object_t result = operator new(v11);
    uint64_t v9 = (char *)result;
    void *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v11;
    size_t v12 = a3 - __src;
    if (v12) {
      xpc_object_t result = memcpy(result, __src, v12);
    }
LABEL_20:
    v7[1] = &v9[v12];
    return result;
  }
  xpc_object_t v13 = (unsigned char *)result[1];
  size_t v14 = v13 - v9;
  if (v13 - v9 >= a4)
  {
    size_t v12 = a3 - __src;
    if (v12) {
      xpc_object_t result = memmove((void *)*result, __src, v12);
    }
    goto LABEL_20;
  }
  long long v15 = &__src[v14];
  if (v13 != v9)
  {
    xpc_object_t result = memmove((void *)*result, __src, v14);
    uint64_t v9 = (char *)v7[1];
  }
  if (a3 != v15) {
    xpc_object_t result = memmove(v9, v15, a3 - v15);
  }
  v7[1] = &v9[a3 - v15];
  return result;
}

void dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::ARICommandDriver::getRFSelfTestNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>(radio::ARICommandDriver::getRFSelfTestNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::ARICommandDriver::getRFSelfTestNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0,dispatch_queue_s *::default_delete<radio::ARICommandDriver::getRFSelfTestNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>>)::{lambda(void *)#1}::__invoke(std::__shared_weak_count_vtbl ***a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v22[2] = v4;
  v22[3] = v4;
  v22[0] = v4;
  v22[1] = v4;
  AriSdk::ARI_CsiSecGetRFSelfTestNonceReq_SDK::ARI_CsiSecGetRFSelfTestNonceReq_SDK((AriSdk::ARI_CsiSecGetRFSelfTestNonceReq_SDK *)v22);
  on_zero_shared_weak = v3[7].__on_zero_shared_weak;
  xpc_object_t v6 = v2[1];
  if (v6)
  {
    long long v7 = _Block_copy(v6);
    unint64_t v8 = v2[2];
    if (!v8) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  long long v7 = 0;
  unint64_t v8 = v2[2];
  if (v8) {
LABEL_3:
  }
    dispatch_retain(v8);
LABEL_4:
  uint64_t v10 = v2[3];
  uint64_t v9 = (uint64_t)v2[4];
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 16), 1uLL, memory_order_relaxed);
  }
  size_t v11 = (std::__shared_weak_count *)operator new(0x40uLL);
  v11->__shared_owners_ = 0;
  p_shared_owners = &v11->__shared_owners_;
  v11->__shared_weak_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940948;
  v11[1].__vftable = v3;
  v11[1].__shared_owners_ = (uint64_t)v7;
  v11[1].__shared_weak_owners_ = (uint64_t)v8;
  v11[2].__vftable = v10;
  v11[2].__shared_owners_ = v9;
  *(void *)&long long v24 = MEMORY[0x263EF8330];
  *((void *)&v24 + 1) = 1174405120;
  *(void *)&long long v25 = ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver18getRFSelfTestNonceEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES7_EEEENK3__0clEvEUlPKhjE_vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  *((void *)&v25 + 1) = &__block_descriptor_tmp_275;
  unint64_t v26 = (unint64_t)&v11[1];
  CFTypeRef v27 = v11;
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v29 = 0x40000000;
  uint64_t v30 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
  std::string v31 = &unk_264C7DF90;
  std::string v32 = &v24;
  xpc_object_t v13 = _Block_copy(&aBlock);
  size_t v14 = v27;
  if (!v27 || atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_9:
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_10:
  *(void *)&long long v15 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v24 = v15;
  long long v25 = v15;
  unint64_t v26 = 0xAAAAAAAAAAAAAAAALL;
  CFTypeRef v16 = (std::__shared_weak_count *)*((void *)on_zero_shared_weak + 2);
  uint64_t aBlock = *((void *)on_zero_shared_weak + 1);
  if (!v16)
  {
    uint64_t v29 = 0;
LABEL_32:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v29 = (uint64_t)std::__shared_weak_count::lock(v16);
  if (!v29) {
    goto LABEL_32;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  CFTypeRef v17 = (std::__shared_weak_count *)v29;
  if (v29 && !atomic_fetch_add((atomic_ullong *volatile)(v29 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  CFTypeRef v23 = v13;
  ice::SendMsgBaseProxy::callback();
  if (v23) {
    _Block_release(v23);
  }
  MEMORY[0x237DF50B0](&v24);
  MEMORY[0x237DF6710](v22);
  long long v18 = (std::__shared_weak_count *)v2[4];
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
  unsigned int v19 = v2[2];
  if (v19) {
    dispatch_release(v19);
  }
  long long v20 = v2[1];
  if (v20) {
    _Block_release(v20);
  }
  operator delete(v2);
  xpc_object_t v21 = (std::__shared_weak_count *)a1[2];
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  operator delete(a1);
}

void sub_235E466F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *aBlock, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  MEMORY[0x237DF50B0](&a19);
  MEMORY[0x237DF6710](&a9);
  uint64_t v29 = (std::__shared_weak_count *)v27[4];
  if (v29)
  {
    std::__shared_weak_count::__release_weak(v29);
    uint64_t v30 = v27[2];
    if (!v30)
    {
LABEL_5:
      std::string v31 = (const void *)v27[1];
      if (!v31)
      {
LABEL_10:
        operator delete(v27);
        std::string v32 = (std::__shared_weak_count *)v26[2];
        if (v32)
        {
          if (!atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        operator delete(v26);
        _Unwind_Resume(a1);
      }
LABEL_9:
      _Block_release(v31);
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v30 = v27[2];
    if (!v30) {
      goto LABEL_5;
    }
  }
  dispatch_release(v30);
  std::string v31 = (const void *)v27[1];
  if (!v31) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver18getRFSelfTestNonceEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES7_EEEENK3__0clEvEUlPKhjE_vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = (std::__shared_weak_count *)v2[4];
    if (v3)
    {
      uint64_t v5 = *v2;
      xpc_object_t v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        long long v7 = v6;
        if (!v2[3])
        {
LABEL_95:
          if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        unint64_t v42 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        _OWORD v41[2] = v8;
        v41[3] = v8;
        v41[0] = v8;
        v41[1] = v8;
        AriSdk::ARI_CsiSecGetRFSelfTestNonceRspCb_SDK::ARI_CsiSecGetRFSelfTestNonceRspCb_SDK((AriSdk::ARI_CsiSecGetRFSelfTestNonceRspCb_SDK *)v41, a2);
        memset(&v40, 170, sizeof(v40));
        *(void *)std::string block = operator new(0x20uLL);
        *(_OWORD *)&block[8] = xmmword_235E72AD0;
        strcpy(*(char **)block, "send Getting RF Test Nonce");
        checkErrorStr((AriSdk::MsgBase *)v41, (uint64_t)block, (uint64_t)&v40);
        if ((block[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)block);
          std::string::size_type size = HIBYTE(v40.__r_.__value_.__r.__words[2]);
          int v10 = SHIBYTE(v40.__r_.__value_.__r.__words[2]);
          if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type size = v40.__r_.__value_.__l.__size_;
          }
          if (size) {
            goto LABEL_9;
          }
        }
        else
        {
          std::string::size_type v9 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
          int v10 = SHIBYTE(v40.__r_.__value_.__r.__words[2]);
          if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v9 = v40.__r_.__value_.__l.__size_;
          }
          if (v9)
          {
LABEL_9:
            size_t v11 = *(NSObject **)(v5 + 40);
            if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
            {
              std::string v31 = (std::string *)v40.__r_.__value_.__r.__words[0];
              if (v10 >= 0) {
                std::string v31 = &v40;
              }
              *(_DWORD *)std::string block = 136315138;
              *(void *)&void block[4] = v31;
              _os_log_error_impl(&dword_235DB9000, v11, OS_LOG_TYPE_ERROR, "%s", block, 0xCu);
              if (!v2[1]) {
                goto LABEL_92;
              }
            }
            else if (!v2[1])
            {
              goto LABEL_92;
            }
            if (v2[2])
            {
              if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                size_t v12 = &v40;
              }
              else {
                size_t v12 = (std::string *)v40.__r_.__value_.__r.__words[0];
              }
              xpc_object_t v13 = xpc_string_create((const char *)v12);
              if (!v13) {
                xpc_object_t v13 = xpc_null_create();
              }
              xpc_object_t v14 = xpc_null_create();
              long long v15 = (const void *)v2[1];
              if (v15) {
                CFTypeRef v16 = _Block_copy(v15);
              }
              else {
                CFTypeRef v16 = 0;
              }
              uint64_t v29 = v2[2];
              *(void *)std::string block = MEMORY[0x263EF8330];
              *(void *)&block[8] = 1174405120;
              *(void *)&block[16] = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke;
              int v47 = &__block_descriptor_tmp_270;
              if (v16) {
                uint64_t v30 = _Block_copy(v16);
              }
              else {
                uint64_t v30 = 0;
              }
              long long v48 = v30;
              xpc_object_t v49 = v13;
              if (v13) {
                xpc_retain(v13);
              }
              else {
                xpc_object_t v49 = xpc_null_create();
              }
              xpc_object_t v50 = v14;
              if (v14) {
                xpc_retain(v14);
              }
              else {
                xpc_object_t v50 = xpc_null_create();
              }
              dispatch_async(v29, block);
              xpc_release(v50);
              xpc_object_t v50 = 0;
              xpc_release(v49);
              xpc_object_t v49 = 0;
              if (v48) {
                _Block_release(v48);
              }
              if (v16) {
                _Block_release(v16);
              }
LABEL_55:
              xpc_release(v14);
              xpc_release(v13);
            }
LABEL_92:
            if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v40.__r_.__value_.__l.__data_);
            }
            MEMORY[0x237DF68F0](v41);
            goto LABEL_95;
          }
        }
        if (!AriSdk::ARI_CsiSecGetRFSelfTestNonceRspCb_SDK::unpack((AriSdk::ARI_CsiSecGetRFSelfTestNonceRspCb_SDK *)v41))
        {
          int v45 = -1431655766;
          *(void *)&long long v22 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v22 + 1) = 0xAAAAAAAAAAAAAAAALL;
          long long __src = v22;
          long long v44 = v22;
          unsigned int v23 = *(_DWORD *)(v42 + 32);
          long long v24 = *(_OWORD *)(v42 + 16);
          long long __src = *(_OWORD *)v42;
          long long v44 = v24;
          int v45 = v23;
          if (v23 >= 0x21)
          {
            unsigned int v23 = 32;
            int v45 = 32;
          }
          std::string __p = 0;
          int v38 = 0;
          uint64_t v39 = 0;
          std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, (char *)&__src, (char *)&__src + v23, v23);
          if (v2[1] && v2[2])
          {
            xpc_object_t v25 = xpc_null_create();
            xpc_object_t v26 = xpc_data_create(__p, v38 - (unsigned char *)__p);
            if (!v26) {
              xpc_object_t v26 = xpc_null_create();
            }
            CFTypeRef v27 = (const void *)v2[1];
            if (v27) {
              CFTypeRef v28 = _Block_copy(v27);
            }
            else {
              CFTypeRef v28 = 0;
            }
            std::string v34 = v2[2];
            *(void *)std::string block = MEMORY[0x263EF8330];
            *(void *)&block[8] = 1174405120;
            *(void *)&block[16] = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke;
            int v47 = &__block_descriptor_tmp_270;
            if (v28) {
              long long v35 = _Block_copy(v28);
            }
            else {
              long long v35 = 0;
            }
            long long v48 = v35;
            xpc_object_t v49 = v25;
            if (v25) {
              xpc_retain(v25);
            }
            else {
              xpc_object_t v49 = xpc_null_create();
            }
            xpc_object_t v50 = v26;
            if (v26) {
              xpc_retain(v26);
            }
            else {
              xpc_object_t v50 = xpc_null_create();
            }
            dispatch_async(v34, block);
            xpc_release(v50);
            xpc_object_t v50 = 0;
            xpc_release(v49);
            xpc_object_t v49 = 0;
            if (v48) {
              _Block_release(v48);
            }
            if (v28) {
              _Block_release(v28);
            }
            xpc_release(v26);
            xpc_release(v25);
          }
          if (__p)
          {
            int v38 = __p;
            operator delete(__p);
          }
          goto LABEL_92;
        }
        std::string::__assign_external(&v40, "Failed to get RF Test Nonce", 0x1BuLL);
        long long v18 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          uint64_t v36 = &v40;
          if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t v36 = (std::string *)v40.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)std::string block = 136315138;
          *(void *)&void block[4] = v36;
          _os_log_error_impl(&dword_235DB9000, v18, OS_LOG_TYPE_ERROR, "%s", block, 0xCu);
          if (!v2[1]) {
            goto LABEL_92;
          }
        }
        else if (!v2[1])
        {
          goto LABEL_92;
        }
        if (v2[2])
        {
          if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unsigned int v19 = &v40;
          }
          else {
            unsigned int v19 = (std::string *)v40.__r_.__value_.__r.__words[0];
          }
          xpc_object_t v13 = xpc_string_create((const char *)v19);
          if (!v13) {
            xpc_object_t v13 = xpc_null_create();
          }
          xpc_object_t v14 = xpc_null_create();
          long long v20 = (const void *)v2[1];
          if (v20) {
            xpc_object_t v21 = _Block_copy(v20);
          }
          else {
            xpc_object_t v21 = 0;
          }
          std::string v32 = v2[2];
          *(void *)std::string block = MEMORY[0x263EF8330];
          *(void *)&block[8] = 1174405120;
          *(void *)&block[16] = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke;
          int v47 = &__block_descriptor_tmp_270;
          if (v21) {
            CFTypeRef v33 = _Block_copy(v21);
          }
          else {
            CFTypeRef v33 = 0;
          }
          long long v48 = v33;
          xpc_object_t v49 = v13;
          if (v13) {
            xpc_retain(v13);
          }
          else {
            xpc_object_t v49 = xpc_null_create();
          }
          xpc_object_t v50 = v14;
          if (v14) {
            xpc_retain(v14);
          }
          else {
            xpc_object_t v50 = xpc_null_create();
          }
          dispatch_async(v32, block);
          xpc_release(v50);
          xpc_object_t v50 = 0;
          xpc_release(v49);
          xpc_object_t v49 = 0;
          if (v48) {
            _Block_release(v48);
          }
          if (v21) {
            _Block_release(v21);
          }
          goto LABEL_55;
        }
        goto LABEL_92;
      }
    }
  }
}

void sub_235E46F00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c151_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver18getRFSelfTestNonceEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES6_EEEENK3__0clEvEUlPKhjE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c151_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver18getRFSelfTestNonceEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES6_EEEENK3__0clEvEUlPKhjE_EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getRFSelfTestNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<radio::ARICommandDriver::getRFSelfTestNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940948;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getRFSelfTestNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<radio::ARICommandDriver::getRFSelfTestNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940948;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getRFSelfTestNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<radio::ARICommandDriver::getRFSelfTestNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[7];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = a1[5];
  if (v3) {
    dispatch_release(v3);
  }
  long long v4 = (const void *)a1[4];
  if (v4) {
    _Block_release(v4);
  }
}

void ___ZN3ice6detail12wrapCallbackIZN5radio16ARICommandDriver13detachRequestEhN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEE3__0vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 24);
    if (v3)
    {
      uint64_t v5 = std::__shared_weak_count::lock(v3);
      if (v5)
      {
        xpc_object_t v6 = v5;
        if (!*(void *)(v2 + 16))
        {
LABEL_30:
          if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
          return;
        }
        unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v13[3] = v7;
        _OWORD v13[4] = v7;
        v13[1] = v7;
        v13[2] = v7;
        v13[0] = v7;
        AriSdk::ARI_IBINetDetachRspCb_SDK::ARI_IBINetDetachRspCb_SDK((AriSdk::ARI_IBINetDetachRspCb_SDK *)v13, a2);
        CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        strcpy(block, "network detach request");
        block[23] = 22;
        checkError((AriSdk::MsgBase *)v13, (uint64_t)block, &cf);
        if ((block[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)block);
          long long v8 = *(const void **)v2;
          if (!*(void *)v2) {
            goto LABEL_27;
          }
        }
        else
        {
          long long v8 = *(const void **)v2;
          if (!*(void *)v2) {
            goto LABEL_27;
          }
        }
        if (*(void *)(v2 + 8))
        {
          CFTypeRef v9 = cf;
          if (cf && (CFRetain(cf), (long long v8 = *(const void **)v2) == 0)) {
            int v10 = 0;
          }
          else {
            int v10 = _Block_copy(v8);
          }
          size_t v11 = *(NSObject **)(v2 + 8);
          *(void *)std::string block = MEMORY[0x263EF8330];
          *(void *)&block[8] = 1174405120;
          *(void *)&block[16] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
          CFTypeRef v16 = &__block_descriptor_tmp_181;
          if (v10)
          {
            CFTypeRef v17 = _Block_copy(v10);
            CFTypeRef v18 = v9;
            if (!v9) {
              goto LABEL_19;
            }
          }
          else
          {
            CFTypeRef v17 = 0;
            CFTypeRef v18 = v9;
            if (!v9)
            {
LABEL_19:
              dispatch_async(v11, block);
              if (v18) {
                CFRelease(v18);
              }
              if (v17) {
                _Block_release(v17);
              }
              if (v10) {
                _Block_release(v10);
              }
              if (v9) {
                CFRelease(v9);
              }
              goto LABEL_27;
            }
          }
          CFRetain(v9);
          goto LABEL_19;
        }
LABEL_27:
        if (cf) {
          CFRelease(cf);
        }
        MEMORY[0x237DF56C0](v13);
        goto LABEL_30;
      }
    }
  }
}

void sub_235E473E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if (*(char *)(v4 - 73) < 0) {
    operator delete(*(void **)(v4 - 96));
  }
  MEMORY[0x237DF56C0](va);
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c149_ZTSNSt3__110shared_ptrIZN5radio16ARICommandDriver13detachRequestEhN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c149_ZTSNSt3__110shared_ptrIZN5radio16ARICommandDriver13detachRequestEhN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::detachRequest(unsigned char,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::allocator<radio::ARICommandDriver::detachRequest(unsigned char,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E9409C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::detachRequest(unsigned char,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::allocator<radio::ARICommandDriver::detachRequest(unsigned char,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E9409C8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::detachRequest(unsigned char,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::allocator<radio::ARICommandDriver::detachRequest(unsigned char,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>::__on_zero_shared(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = a1[4];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (const void *)a1[3];
  if (v4) {
    _Block_release(v4);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::ARICommandDriver::sendRFSelfTestReq(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0>(radio::ARICommandDriver::sendRFSelfTestReq(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::ARICommandDriver::sendRFSelfTestReq(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0,dispatch_queue_s *::default_delete<radio::ARICommandDriver::sendRFSelfTestReq(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v29 = v2;
  uint64_t v3 = *v2;
  v32[0] = 0xAAAAAAAAAAAAAAAALL;
  v32[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v32, (const __CFDictionary *)v2[1]);
  CFArrayRef v4 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v32, (const __CFString *)*MEMORY[0x263F8B8B0]);
  std::string __p = (void *)0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  void v30[2] = v5;
  v30[3] = v5;
  v30[0] = v5;
  v30[1] = v5;
  AriSdk::ARI_CsiIceSecSendRFSelfTestTicketReq_SDK::ARI_CsiIceSecSendRFSelfTestTicketReq_SDK((AriSdk::ARI_CsiIceSecSendRFSelfTestTicketReq_SDK *)v30);
  xpc_object_t v6 = operator new(0x402uLL);
  bzero(v6, 0x402uLL);
  long long v7 = __p;
  std::string __p = v6;
  if (v7) {
    operator delete(v7);
  }
  if (v4) {
    long long v8 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
  }
  else {
    long long v8 = 0;
  }
  if (v8)
  {
    CFIndex Count = CFArrayGetCount(v4);
    if (Count >= 1)
    {
      for (CFIndex i = 0; i != Count; ++i)
      {
        ValueAtIndex = (unsigned __int8 *)CFArrayGetValueAtIndex(v4, i);
        size_t v12 = ValueAtIndex;
        LOBYTE(v34) = 0;
        if (ValueAtIndex)
        {
          CFTypeID v13 = CFGetTypeID(ValueAtIndex);
          if (v13 == CFNumberGetTypeID()) {
            ctu::cf::assign((ctu::cf *)&v34, v12, v14);
          }
        }
        *((unsigned char *)__p + i + 2) = v34;
      }
    }
  }
  else
  {
    LOWORD(Count) = 0;
  }
  *(_WORD *)std::string __p = Count;
  uint64_t v15 = *(void *)(v3 + 312);
  CFTypeRef v16 = (const void *)v2[2];
  if (v16)
  {
    CFTypeRef v17 = (std::__shared_weak_count_vtbl *)_Block_copy(v16);
    CFTypeRef v18 = v2[3];
    if (!v18) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  CFTypeRef v17 = 0;
  CFTypeRef v18 = v2[3];
  if (v18) {
LABEL_16:
  }
    dispatch_retain(v18);
LABEL_17:
  uint64_t v20 = v2[4];
  uint64_t v19 = v2[5];
  if (v19) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 16), 1uLL, memory_order_relaxed);
  }
  xpc_object_t v21 = (std::__shared_weak_count *)operator new(0x38uLL);
  v21->__shared_owners_ = 0;
  p_shared_owners = &v21->__shared_owners_;
  v21->__shared_weak_owners_ = 0;
  v21->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940A48;
  v21[1].__vftable = v17;
  v21[1].__shared_owners_ = (uint64_t)v18;
  v21[1].__shared_weak_owners_ = v20;
  v21[2].__vftable = (std::__shared_weak_count_vtbl *)v19;
  *(void *)&long long v34 = MEMORY[0x263EF8330];
  *((void *)&v34 + 1) = 1174405120;
  *(void *)&long long v35 = ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver17sendRFSelfTestReqEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS6_I9__CFErrorEES9_EEEENK3__0clEvEUlPKhjE_vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  *((void *)&v35 + 1) = &__block_descriptor_tmp_282;
  unint64_t v36 = (unint64_t)&v21[1];
  long long v37 = v21;
  atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v39 = 0x40000000;
  std::string v40 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
  CFTypeRef v41 = &unk_264C7DF90;
  unint64_t v42 = &v34;
  unsigned int v23 = _Block_copy(&aBlock);
  long long v24 = v37;
  if (!v37 || atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
  std::__shared_weak_count::__release_weak(v24);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_22:
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
LABEL_23:
  *(void *)&long long v25 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v25 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v34 = v25;
  long long v35 = v25;
  unint64_t v36 = 0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v26 = *(std::__shared_weak_count **)(v15 + 16);
  uint64_t aBlock = *(void *)(v15 + 8);
  if (!v26)
  {
    uint64_t v39 = 0;
LABEL_41:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v39 = (uint64_t)std::__shared_weak_count::lock(v26);
  if (!v39) {
    goto LABEL_41;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  CFTypeRef v27 = (std::__shared_weak_count *)v39;
  if (v39 && !atomic_fetch_add((atomic_ullong *volatile)(v39 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  CFTypeRef v33 = v23;
  ice::SendMsgBaseProxy::callback();
  if (v33) {
    _Block_release(v33);
  }
  MEMORY[0x237DF50B0](&v34);
  MEMORY[0x237DF6A20](v30);
  if (v4) {
    CFRelease(v4);
  }
  MEMORY[0x237DF4EE0](v32);
  std::unique_ptr<radio::ARICommandDriver::sendRFSelfTestReq(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0,std::default_delete<radio::ARICommandDriver::sendRFSelfTestReq(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0>>::~unique_ptr[abi:ne180100](&v29);
  CFTypeRef v28 = (std::__shared_weak_count *)a1[2];
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  operator delete(a1);
}

void sub_235E479EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,void *aBlock,char a25)
{
  MEMORY[0x237DF6A20](&a11);
  if (v26) {
    CFRelease(v26);
  }
  MEMORY[0x237DF4EE0](&a22);
  std::unique_ptr<radio::ARICommandDriver::sendRFSelfTestReq(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0,std::default_delete<radio::ARICommandDriver::sendRFSelfTestReq(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  CFTypeRef v28 = (std::__shared_weak_count *)v25[2];
  if (v28)
  {
    if (!atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  operator delete(v25);
  _Unwind_Resume(a1);
}

void **std::unique_ptr<radio::ARICommandDriver::sendRFSelfTestReq(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0,std::default_delete<radio::ARICommandDriver::sendRFSelfTestReq(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0>>::~unique_ptr[abi:ne180100](void **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = (std::__shared_weak_count *)v2[5];
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    CFArrayRef v4 = v2[3];
    if (v4) {
      dispatch_release(v4);
    }
    long long v5 = (const void *)v2[2];
    if (v5) {
      _Block_release(v5);
    }
    xpc_object_t v6 = (const void *)v2[1];
    if (v6) {
      CFRelease(v6);
    }
    operator delete(v2);
  }
  return a1;
}

void ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver17sendRFSelfTestReqEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS6_I9__CFErrorEES9_EEEENK3__0clEvEUlPKhjE_vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 24);
    if (v3)
    {
      long long v5 = std::__shared_weak_count::lock(v3);
      if (v5)
      {
        xpc_object_t v6 = v5;
        if (!*(void *)(v2 + 16))
        {
LABEL_52:
          if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
          return;
        }
        long long v24 = (unsigned int *)0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
        _OWORD v23[2] = v7;
        v23[3] = v7;
        v23[0] = v7;
        v23[1] = v7;
        AriSdk::ARI_CsiIceSecSendRFSelfTestTicketRspCb_SDK::ARI_CsiIceSecSendRFSelfTestTicketRspCb_SDK((AriSdk::ARI_CsiIceSecSendRFSelfTestTicketRspCb_SDK *)v23, a2);
        CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        block.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
        *(_OWORD *)&block.__r_.__value_.__r.__words[1] = xmmword_235E750A0;
        strcpy(block.__r_.__value_.__l.__data_, "send RF Self Test Request");
        checkError((AriSdk::MsgBase *)v23, (uint64_t)&block, &cf);
        if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(block.__r_.__value_.__l.__data_);
          if (cf) {
            CFTypeRef v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          }
          else {
            CFTypeRef v9 = 0;
          }
          if (v9) {
            goto LABEL_28;
          }
        }
        else
        {
          if (cf) {
            long long v8 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          }
          else {
            long long v8 = 0;
          }
          if (v8) {
            goto LABEL_28;
          }
        }
        if (AriSdk::ARI_CsiIceSecSendRFSelfTestTicketRspCb_SDK::unpack((AriSdk::ARI_CsiIceSecSendRFSelfTestTicketRspCb_SDK *)v23))
        {
          std::string __p = (char *)operator new(0x40uLL);
          strcpy(__p, "Failed to unpack response of sending RF Self Test Request");
          CreateError();
          CFTypeRef v10 = cf;
          CFTypeRef cf = (CFTypeRef)block.__r_.__value_.__r.__words[0];
          block.__r_.__value_.__r.__words[0] = 0;
          if (v10)
          {
            CFRelease(v10);
            if (block.__r_.__value_.__r.__words[0]) {
              CFRelease(block.__r_.__value_.__l.__data_);
            }
          }
          size_t v11 = __p;
          goto LABEL_27;
        }
        size_t v12 = (ctu *)*v24;
        if (v12)
        {
          ctu::hex(v12);
          CFTypeID v13 = std::string::insert(&block, 0, "Error on requesting RF Self Test: 0x", 0x24uLL);
          std::string __pa = *v13;
          v13->__r_.__value_.__l.__size_ = 0;
          v13->__r_.__value_.__r.__words[2] = 0;
          v13->__r_.__value_.__r.__words[0] = 0;
          CreateError();
          CFTypeRef v14 = cf;
          CFTypeRef cf = v21;
          if (v14) {
            CFRelease(v14);
          }
          if (SHIBYTE(__pa.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__pa.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
          {
            size_t v11 = (char *)block.__r_.__value_.__r.__words[0];
LABEL_27:
            operator delete(v11);
          }
        }
LABEL_28:
        uint64_t v15 = *(const void **)v2;
        if (!*(void *)v2 || !*(void *)(v2 + 8))
        {
LABEL_49:
          if (cf) {
            CFRelease(cf);
          }
          MEMORY[0x237DF6AD0](v23);
          goto LABEL_52;
        }
        CFTypeRef v16 = cf;
        if (cf && (CFRetain(cf), (uint64_t v15 = *(const void **)v2) == 0)) {
          CFTypeRef v17 = 0;
        }
        else {
          CFTypeRef v17 = _Block_copy(v15);
        }
        CFTypeRef v18 = *(NSObject **)(v2 + 8);
        block.__r_.__value_.__r.__words[0] = MEMORY[0x263EF8330];
        block.__r_.__value_.__l.__size_ = 1174405120;
        block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke_0;
        xpc_object_t v26 = &__block_descriptor_tmp_191;
        if (v17)
        {
          CFTypeRef v27 = _Block_copy(v17);
          CFTypeRef v28 = v16;
          if (!v16) {
            goto LABEL_39;
          }
        }
        else
        {
          CFTypeRef v27 = 0;
          CFTypeRef v28 = v16;
          if (!v16)
          {
LABEL_39:
            CFTypeRef v29 = 0;
            dispatch_async(v18, &block);
            if (v29) {
              CFRelease(v29);
            }
            if (v28) {
              CFRelease(v28);
            }
            if (v27) {
              _Block_release(v27);
            }
            if (v17) {
              _Block_release(v17);
            }
            if (v16) {
              CFRelease(v16);
            }
            goto LABEL_49;
          }
        }
        CFRetain(v16);
        goto LABEL_39;
      }
    }
  }
}

void sub_235E47F70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, CFTypeRef cf, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v19 - 81) < 0) {
    operator delete(*(void **)(v19 - 104));
  }
  if (cf) {
    CFRelease(cf);
  }
  MEMORY[0x237DF6AD0](&a18);
  if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c195_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver17sendRFSelfTestReqEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS5_I9__CFErrorEES8_EEEENK3__0clEvEUlPKhjE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c195_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver17sendRFSelfTestReqEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS5_I9__CFErrorEES8_EEEENK3__0clEvEUlPKhjE_EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::sendRFSelfTestReq(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<radio::ARICommandDriver::sendRFSelfTestReq(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940A48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::sendRFSelfTestReq(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<radio::ARICommandDriver::sendRFSelfTestReq(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940A48;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::sendRFSelfTestReq(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<radio::ARICommandDriver::sendRFSelfTestReq(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = a1[4];
  if (v3) {
    dispatch_release(v3);
  }
  CFArrayRef v4 = (const void *)a1[3];
  if (v4) {
    _Block_release(v4);
  }
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJNS1_4dictES7_EEEvDpT__block_invoke(void *a1)
{
  uint64_t v3 = a1[4];
  uint64_t v2 = (void *)a1[5];
  xpc_object_t v6 = v2;
  if (!v2)
  {
    xpc_object_t v6 = xpc_null_create();
    CFArrayRef v4 = (void *)a1[6];
    xpc_object_t object = v4;
    if (v4) {
      goto LABEL_3;
    }
LABEL_5:
    xpc_object_t object = xpc_null_create();
    goto LABEL_6;
  }
  xpc_retain(v2);
  CFArrayRef v4 = (void *)a1[6];
  xpc_object_t object = v4;
  if (!v4) {
    goto LABEL_5;
  }
LABEL_3:
  xpc_retain(v4);
LABEL_6:
  (*(void (**)(uint64_t, xpc_object_t *, xpc_object_t *))(v3 + 16))(v3, &v6, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v6);
}

void sub_235E48260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, xpc_object_t a10)
{
}

xpc_object_t __copy_helper_block_e8_32c58_ZTSN8dispatch5blockIU13block_pointerFvN3xpc6objectES2_EEE40c15_ZTSN3xpc4dictE48c15_ZTSN3xpc4dictE(void *a1, void *a2)
{
  CFArrayRef v4 = (const void *)a2[4];
  if (v4)
  {
    long long v5 = _Block_copy(v4);
    xpc_object_t v6 = (void *)a2[5];
    a1[4] = v5;
    a1[5] = v6;
    if (v6) {
      goto LABEL_3;
    }
LABEL_6:
    a1[5] = xpc_null_create();
    long long v7 = (void *)a2[6];
    a1[6] = v7;
    if (v7) {
      return xpc_retain(v7);
    }
    goto LABEL_7;
  }
  xpc_object_t v6 = (void *)a2[5];
  a1[4] = 0;
  a1[5] = v6;
  if (!v6) {
    goto LABEL_6;
  }
LABEL_3:
  xpc_retain(v6);
  long long v7 = (void *)a2[6];
  a1[6] = v7;
  if (v7) {
    return xpc_retain(v7);
  }
LABEL_7:
  xpc_object_t result = xpc_null_create();
  a1[6] = result;
  return result;
}

void __destroy_helper_block_e8_32c58_ZTSN8dispatch5blockIU13block_pointerFvN3xpc6objectES2_EEE40c15_ZTSN3xpc4dictE48c15_ZTSN3xpc4dictE(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 48));
  *(void *)(a1 + 48) = 0;
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(void *)(a1 + 40) = 0;
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2) {
    _Block_release(v2);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::ARICommandDriver::getPkHash(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>(radio::ARICommandDriver::getPkHash(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::ARICommandDriver::getPkHash(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0,dispatch_queue_s *::default_delete<radio::ARICommandDriver::getPkHash(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>>)::{lambda(void *)#1}::__invoke(std::__shared_weak_count_vtbl ***a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v22[2] = v4;
  v22[3] = v4;
  v22[0] = v4;
  v22[1] = v4;
  AriSdk::ARI_CsiSecGetPkHashReq_SDK::ARI_CsiSecGetPkHashReq_SDK((AriSdk::ARI_CsiSecGetPkHashReq_SDK *)v22);
  on_zero_shared_weak = v3[7].__on_zero_shared_weak;
  xpc_object_t v6 = v2[1];
  if (v6)
  {
    long long v7 = _Block_copy(v6);
    long long v8 = v2[2];
    if (!v8) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  long long v7 = 0;
  long long v8 = v2[2];
  if (v8) {
LABEL_3:
  }
    dispatch_retain(v8);
LABEL_4:
  CFTypeRef v10 = v2[3];
  uint64_t v9 = (uint64_t)v2[4];
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 16), 1uLL, memory_order_relaxed);
  }
  size_t v11 = (std::__shared_weak_count *)operator new(0x40uLL);
  v11->__shared_owners_ = 0;
  p_shared_owners = &v11->__shared_owners_;
  v11->__shared_weak_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940AF8;
  v11[1].__vftable = v3;
  v11[1].__shared_owners_ = (uint64_t)v7;
  v11[1].__shared_weak_owners_ = (uint64_t)v8;
  v11[2].__vftable = v10;
  v11[2].__shared_owners_ = v9;
  *(void *)&long long v24 = MEMORY[0x263EF8330];
  *((void *)&v24 + 1) = 1174405120;
  *(void *)&long long v25 = ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver9getPkHashEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES7_EEEENK3__0clEvEUlPKhjE_vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  *((void *)&v25 + 1) = &__block_descriptor_tmp_288;
  unint64_t v26 = (unint64_t)&v11[1];
  CFTypeRef v27 = v11;
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v29 = 0x40000000;
  uint64_t v30 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
  std::string v31 = &unk_264C7DF90;
  std::string v32 = &v24;
  CFTypeID v13 = _Block_copy(&aBlock);
  CFTypeRef v14 = v27;
  if (!v27 || atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_9:
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_10:
  *(void *)&long long v15 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v24 = v15;
  long long v25 = v15;
  unint64_t v26 = 0xAAAAAAAAAAAAAAAALL;
  CFTypeRef v16 = (std::__shared_weak_count *)*((void *)on_zero_shared_weak + 2);
  uint64_t aBlock = *((void *)on_zero_shared_weak + 1);
  if (!v16)
  {
    uint64_t v29 = 0;
LABEL_32:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v29 = (uint64_t)std::__shared_weak_count::lock(v16);
  if (!v29) {
    goto LABEL_32;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  CFTypeRef v17 = (std::__shared_weak_count *)v29;
  if (v29 && !atomic_fetch_add((atomic_ullong *volatile)(v29 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  unsigned int v23 = v13;
  ice::SendMsgBaseProxy::callback();
  if (v23) {
    _Block_release(v23);
  }
  MEMORY[0x237DF50B0](&v24);
  MEMORY[0x237DF57D0](v22);
  CFTypeRef v18 = (std::__shared_weak_count *)v2[4];
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
  uint64_t v19 = v2[2];
  if (v19) {
    dispatch_release(v19);
  }
  uint64_t v20 = v2[1];
  if (v20) {
    _Block_release(v20);
  }
  operator delete(v2);
  CFTypeRef v21 = (std::__shared_weak_count *)a1[2];
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  operator delete(a1);
}

void sub_235E486E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *aBlock, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  MEMORY[0x237DF50B0](&a19);
  MEMORY[0x237DF57D0](&a9);
  uint64_t v29 = (std::__shared_weak_count *)v27[4];
  if (v29)
  {
    std::__shared_weak_count::__release_weak(v29);
    uint64_t v30 = v27[2];
    if (!v30)
    {
LABEL_5:
      std::string v31 = (const void *)v27[1];
      if (!v31)
      {
LABEL_10:
        operator delete(v27);
        std::string v32 = (std::__shared_weak_count *)v26[2];
        if (v32)
        {
          if (!atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        operator delete(v26);
        _Unwind_Resume(a1);
      }
LABEL_9:
      _Block_release(v31);
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v30 = v27[2];
    if (!v30) {
      goto LABEL_5;
    }
  }
  dispatch_release(v30);
  std::string v31 = (const void *)v27[1];
  if (!v31) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver9getPkHashEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES7_EEEENK3__0clEvEUlPKhjE_vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = (std::__shared_weak_count *)v2[4];
    if (v3)
    {
      uint64_t v5 = *v2;
      xpc_object_t v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        long long v7 = v6;
        if (!v2[3])
        {
LABEL_114:
          if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        unint64_t v50 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        _OWORD v49[2] = v8;
        v49[3] = v8;
        v49[0] = v8;
        v49[1] = v8;
        AriSdk::ARI_CsiSecGetPkHashRspCb_SDK::ARI_CsiSecGetPkHashRspCb_SDK((AriSdk::ARI_CsiSecGetPkHashRspCb_SDK *)v49, a2);
        memset(v48, 170, sizeof(v48));
        block[23] = 19;
        strcpy(block, "send Getting PKHash");
        checkErrorStr((AriSdk::MsgBase *)v49, (uint64_t)block, (uint64_t)v48);
        if ((block[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)block);
          CFTypeRef v17 = (void *)HIBYTE(v48[2]);
          int v10 = SHIBYTE(v48[2]);
          if (SHIBYTE(v48[2]) < 0) {
            CFTypeRef v17 = v48[1];
          }
          if (v17)
          {
LABEL_9:
            size_t v11 = *(NSObject **)(v5 + 40);
            if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
            {
              std::string v31 = (void **)v48[0];
              if (v10 >= 0) {
                std::string v31 = v48;
              }
              *(_DWORD *)std::string block = 136315138;
              *(void *)&void block[4] = v31;
              _os_log_error_impl(&dword_235DB9000, v11, OS_LOG_TYPE_ERROR, "%s", block, 0xCu);
              if (!v2[1]) {
                goto LABEL_111;
              }
            }
            else if (!v2[1])
            {
              goto LABEL_111;
            }
            if (v2[2])
            {
              if (SHIBYTE(v48[2]) >= 0) {
                size_t v12 = v48;
              }
              else {
                size_t v12 = (void **)v48[0];
              }
              xpc_object_t v13 = xpc_string_create((const char *)v12);
              if (!v13) {
                xpc_object_t v13 = xpc_null_create();
              }
              xpc_object_t v14 = xpc_null_create();
              long long v15 = (const void *)v2[1];
              if (v15) {
                CFTypeRef v16 = _Block_copy(v15);
              }
              else {
                CFTypeRef v16 = 0;
              }
              unsigned int v23 = v2[2];
              *(void *)std::string block = MEMORY[0x263EF8330];
              *(void *)&block[8] = 1174405120;
              *(void *)&block[16] = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke;
              std::string v55 = &__block_descriptor_tmp_270;
              if (v16) {
                long long v24 = _Block_copy(v16);
              }
              else {
                long long v24 = 0;
              }
              CFTypeRef v56 = v24;
              xpc_object_t v57 = v13;
              if (v13) {
                xpc_retain(v13);
              }
              else {
                xpc_object_t v57 = xpc_null_create();
              }
              xpc_object_t v58 = v14;
              if (v14) {
                xpc_retain(v14);
              }
              else {
                xpc_object_t v58 = xpc_null_create();
              }
              dispatch_async(v23, block);
              xpc_release(v58);
              xpc_object_t v58 = 0;
              xpc_release(v57);
              xpc_object_t v57 = 0;
              if (v56) {
                _Block_release(v56);
              }
              if (v16) {
                _Block_release(v16);
              }
LABEL_45:
              xpc_release(v14);
              xpc_release(v13);
            }
LABEL_111:
            if (SHIBYTE(v48[2]) < 0) {
              operator delete(v48[0]);
            }
            MEMORY[0x237DF5BF0](v49);
            goto LABEL_114;
          }
        }
        else
        {
          uint64_t v9 = (void *)HIBYTE(v48[2]);
          int v10 = SHIBYTE(v48[2]);
          if (SHIBYTE(v48[2]) < 0) {
            uint64_t v9 = v48[1];
          }
          if (v9) {
            goto LABEL_9;
          }
        }
        if (!AriSdk::ARI_CsiSecGetPkHashRspCb_SDK::unpack((AriSdk::ARI_CsiSecGetPkHashRspCb_SDK *)v49))
        {
          __int16 v53 = -21846;
          *(void *)&long long v19 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
          long long __src = v19;
          long long v52 = v19;
          unsigned int v20 = *(unsigned __int16 *)(v50 + 32);
          long long v21 = *(_OWORD *)(v50 + 16);
          long long __src = *(_OWORD *)v50;
          long long v52 = v21;
          __int16 v53 = v20;
          if (v20 >= 0x21)
          {
            unsigned int v20 = 32;
            __int16 v53 = 32;
          }
          std::string __p = 0;
          int v46 = 0;
          uint64_t v47 = 0;
          std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, (char *)&__src, (char *)&__src + v20, v20);
          if (v53)
          {
            if (v46 == __p || (unint64_t)(v46 - (unsigned char *)__p) <= 3) {
              std::vector<unsigned char>::__throw_out_of_range[abi:ne180100]();
            }
            int64_t v22 = bswap32(*(_DWORD *)__p);
          }
          else
          {
            int64_t v22 = 0;
          }
          xpc_object_t v29 = xpc_dictionary_create(0, 0, 0);
          if (v29 || (xpc_object_t v29 = xpc_null_create()) != 0)
          {
            if (MEMORY[0x237DF76E0](v29) == MEMORY[0x263EF8708])
            {
              xpc_retain(v29);
              xpc_object_t v30 = v29;
            }
            else
            {
              xpc_object_t v30 = xpc_null_create();
            }
          }
          else
          {
            xpc_object_t v30 = xpc_null_create();
            xpc_object_t v29 = 0;
          }
          xpc_release(v29);
          xpc_object_t v34 = xpc_data_create(__p, v46 - (unsigned char *)__p);
          if (!v34) {
            xpc_object_t v34 = xpc_null_create();
          }
          xpc_dictionary_set_value(v30, (const char *)*MEMORY[0x263F8B810], v34);
          xpc_object_t v35 = xpc_null_create();
          xpc_release(v34);
          xpc_release(v35);
          xpc_object_t v36 = xpc_int64_create(v22);
          if (!v36) {
            xpc_object_t v36 = xpc_null_create();
          }
          xpc_dictionary_set_value(v30, (const char *)*MEMORY[0x263F8B800], v36);
          xpc_object_t v37 = xpc_null_create();
          xpc_release(v36);
          xpc_release(v37);
          if (v2[1] && v2[2])
          {
            xpc_object_t v38 = xpc_null_create();
            if (v30)
            {
              xpc_retain(v30);
              xpc_object_t v39 = v30;
            }
            else
            {
              xpc_object_t v39 = xpc_null_create();
            }
            std::string v40 = (const void *)v2[1];
            if (v40) {
              CFTypeRef v41 = _Block_copy(v40);
            }
            else {
              CFTypeRef v41 = 0;
            }
            unint64_t v42 = v2[2];
            *(void *)std::string block = MEMORY[0x263EF8330];
            *(void *)&block[8] = 1174405120;
            *(void *)&block[16] = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJNS1_4dictES7_EEEvDpT__block_invoke;
            std::string v55 = &__block_descriptor_tmp_287;
            if (v41) {
              long long v43 = _Block_copy(v41);
            }
            else {
              long long v43 = 0;
            }
            CFTypeRef v56 = v43;
            xpc_object_t v57 = v38;
            if (v38) {
              xpc_retain(v38);
            }
            else {
              xpc_object_t v57 = xpc_null_create();
            }
            xpc_object_t v58 = v39;
            if (v39) {
              xpc_retain(v39);
            }
            else {
              xpc_object_t v58 = xpc_null_create();
            }
            dispatch_async(v42, block);
            xpc_release(v58);
            xpc_object_t v58 = 0;
            xpc_release(v57);
            xpc_object_t v57 = 0;
            if (v56) {
              _Block_release(v56);
            }
            if (v41) {
              _Block_release(v41);
            }
            xpc_release(v39);
            xpc_release(v38);
          }
          xpc_release(v30);
          if (__p)
          {
            int v46 = __p;
            operator delete(__p);
          }
          goto LABEL_111;
        }
        if (SHIBYTE(v48[2]) < 0)
        {
          v48[1] = (void *)21;
          CFTypeRef v18 = (char *)v48[0];
        }
        else
        {
          HIBYTE(v48[2]) = 21;
          CFTypeRef v18 = (char *)v48;
        }
        strcpy(v18, "Failed to get PK hash");
        long long v25 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          long long v44 = v48;
          if (SHIBYTE(v48[2]) < 0) {
            long long v44 = (void **)v48[0];
          }
          *(_DWORD *)std::string block = 136315138;
          *(void *)&void block[4] = v44;
          _os_log_error_impl(&dword_235DB9000, v25, OS_LOG_TYPE_ERROR, "%s", block, 0xCu);
          if (!v2[1]) {
            goto LABEL_111;
          }
        }
        else if (!v2[1])
        {
          goto LABEL_111;
        }
        if (!v2[2]) {
          goto LABEL_111;
        }
        if (SHIBYTE(v48[2]) >= 0) {
          unint64_t v26 = v48;
        }
        else {
          unint64_t v26 = (void **)v48[0];
        }
        xpc_object_t v13 = xpc_string_create((const char *)v26);
        if (!v13) {
          xpc_object_t v13 = xpc_null_create();
        }
        xpc_object_t v14 = xpc_null_create();
        CFTypeRef v27 = (const void *)v2[1];
        if (v27) {
          CFTypeRef v28 = _Block_copy(v27);
        }
        else {
          CFTypeRef v28 = 0;
        }
        std::string v32 = v2[2];
        *(void *)std::string block = MEMORY[0x263EF8330];
        *(void *)&block[8] = 1174405120;
        *(void *)&block[16] = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke;
        std::string v55 = &__block_descriptor_tmp_270;
        if (v28) {
          CFTypeRef v33 = _Block_copy(v28);
        }
        else {
          CFTypeRef v33 = 0;
        }
        CFTypeRef v56 = v33;
        xpc_object_t v57 = v13;
        if (v13) {
          xpc_retain(v13);
        }
        else {
          xpc_object_t v57 = xpc_null_create();
        }
        xpc_object_t v58 = v14;
        if (v14) {
          xpc_retain(v14);
        }
        else {
          xpc_object_t v58 = xpc_null_create();
        }
        dispatch_async(v32, block);
        xpc_release(v58);
        xpc_object_t v58 = 0;
        xpc_release(v57);
        xpc_object_t v57 = 0;
        if (v56) {
          _Block_release(v56);
        }
        if (v28) {
          _Block_release(v28);
        }
        goto LABEL_45;
      }
    }
  }
}

void sub_235E49044(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c141_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver9getPkHashEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES6_EEEENK3__0clEvEUlPKhjE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c141_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver9getPkHashEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES6_EEEENK3__0clEvEUlPKhjE_EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getPkHash(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<radio::ARICommandDriver::getPkHash(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940AF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getPkHash(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<radio::ARICommandDriver::getPkHash(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940AF8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getPkHash(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<radio::ARICommandDriver::getPkHash(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[7];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = a1[5];
  if (v3) {
    dispatch_release(v3);
  }
  long long v4 = (const void *)a1[4];
  if (v4) {
    _Block_release(v4);
  }
}

void std::vector<unsigned char>::__throw_out_of_range[abi:ne180100]()
{
}

void ___ZN3ice6detail12wrapCallbackIZN5radio16ARICommandDriver14getChipID_syncEN3xpc4dictEN8dispatch8callbackIU13block_pointerFvNS4_6objectES8_EEEE3__0vEENS6_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = (std::__shared_weak_count *)v2[4];
    if (v3)
    {
      uint64_t v5 = *v2;
      xpc_object_t v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        long long v7 = v6;
        if (!v2[3])
        {
LABEL_84:
          if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        xpc_object_t v36 = (unsigned int *)0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        void v35[2] = v8;
        v35[3] = v8;
        v35[0] = v8;
        v35[1] = v8;
        AriSdk::ARI_CsiSecGetChipIdRspCb_SDK::ARI_CsiSecGetChipIdRspCb_SDK((AriSdk::ARI_CsiSecGetChipIdRspCb_SDK *)v35, a2);
        memset(v34, 170, sizeof(v34));
        __p[23] = 20;
        strcpy(__p, "send Getting Chip ID");
        checkErrorStr((AriSdk::MsgBase *)v35, (uint64_t)__p, (uint64_t)v34);
        if ((__p[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)__p);
          CFTypeRef v17 = (void *)HIBYTE(v34[2]);
          int v10 = SHIBYTE(v34[2]);
          if (SHIBYTE(v34[2]) < 0) {
            CFTypeRef v17 = v34[1];
          }
          if (v17)
          {
LABEL_9:
            size_t v11 = *(NSObject **)(v5 + 40);
            if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
            {
              std::string v32 = (void **)v34[0];
              if (v10 >= 0) {
                std::string v32 = v34;
              }
              *(_DWORD *)std::string __p = 136315138;
              *(void *)&__p[4] = v32;
              _os_log_error_impl(&dword_235DB9000, v11, OS_LOG_TYPE_ERROR, "%s", __p, 0xCu);
              LOBYTE(v10) = HIBYTE(v34[2]);
            }
            if ((v10 & 0x80u) == 0) {
              size_t v12 = v34;
            }
            else {
              size_t v12 = (void **)v34[0];
            }
            xpc_object_t v13 = xpc_string_create((const char *)v12);
            if (!v13) {
              xpc_object_t v13 = xpc_null_create();
            }
            xpc_object_t v14 = xpc_null_create();
            long long v15 = (const void *)v2[1];
            if (v15) {
              CFTypeRef v16 = _Block_copy(v15);
            }
            else {
              CFTypeRef v16 = 0;
            }
            long long v19 = v2[2];
            *(void *)std::string __p = MEMORY[0x263EF8330];
            *(void *)&__p[8] = 1174405120;
            *(void *)&__p[16] = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke;
            xpc_object_t v38 = &__block_descriptor_tmp_270;
            if (v16)
            {
              uint64_t aBlock = _Block_copy(v16);
              xpc_object_t v40 = v13;
              if (v13) {
                goto LABEL_26;
              }
            }
            else
            {
              uint64_t aBlock = 0;
              xpc_object_t v40 = v13;
              if (v13)
              {
LABEL_26:
                xpc_retain(v13);
                xpc_object_t object = v14;
                if (v14)
                {
LABEL_27:
                  xpc_retain(v14);
LABEL_31:
                  dispatch_async(v19, __p);
                  xpc_release(object);
                  xpc_object_t object = 0;
                  xpc_release(v40);
                  xpc_object_t v40 = 0;
                  if (aBlock) {
                    _Block_release(aBlock);
                  }
                  if (v16) {
                    _Block_release(v16);
                  }
LABEL_81:
                  xpc_release(v14);
                  xpc_release(v13);
                  if (SHIBYTE(v34[2]) < 0) {
                    operator delete(v34[0]);
                  }
                  MEMORY[0x237DF5BC0](v35);
                  goto LABEL_84;
                }
LABEL_30:
                xpc_object_t object = xpc_null_create();
                goto LABEL_31;
              }
            }
            xpc_object_t v40 = xpc_null_create();
            xpc_object_t object = v14;
            if (v14) {
              goto LABEL_27;
            }
            goto LABEL_30;
          }
        }
        else
        {
          uint64_t v9 = (void *)HIBYTE(v34[2]);
          int v10 = SHIBYTE(v34[2]);
          if (SHIBYTE(v34[2]) < 0) {
            uint64_t v9 = v34[1];
          }
          if (v9) {
            goto LABEL_9;
          }
        }
        if (AriSdk::ARI_CsiSecGetChipIdRspCb_SDK::unpack((AriSdk::ARI_CsiSecGetChipIdRspCb_SDK *)v35))
        {
          if (SHIBYTE(v34[2]) < 0)
          {
            v34[1] = (void *)21;
            CFTypeRef v18 = (char *)v34[0];
          }
          else
          {
            HIBYTE(v34[2]) = 21;
            CFTypeRef v18 = (char *)v34;
          }
          strcpy(v18, "Failed to get Chip ID");
          int64_t v22 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          {
            CFTypeRef v33 = v34;
            if (SHIBYTE(v34[2]) < 0) {
              CFTypeRef v33 = (void **)v34[0];
            }
            *(_DWORD *)std::string __p = 136315138;
            *(void *)&__p[4] = v33;
            _os_log_error_impl(&dword_235DB9000, v22, OS_LOG_TYPE_ERROR, "%s", __p, 0xCu);
          }
          if (SHIBYTE(v34[2]) >= 0) {
            unsigned int v23 = v34;
          }
          else {
            unsigned int v23 = (void **)v34[0];
          }
          xpc_object_t v13 = xpc_string_create((const char *)v23);
          if (!v13) {
            xpc_object_t v13 = xpc_null_create();
          }
          xpc_object_t v14 = xpc_null_create();
          long long v24 = (const void *)v2[1];
          if (v24) {
            long long v25 = _Block_copy(v24);
          }
          else {
            long long v25 = 0;
          }
          unint64_t v26 = v2[2];
          *(void *)std::string __p = MEMORY[0x263EF8330];
          *(void *)&__p[8] = 1174405120;
          *(void *)&__p[16] = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke;
          xpc_object_t v38 = &__block_descriptor_tmp_270;
          if (v25) {
            CFTypeRef v27 = _Block_copy(v25);
          }
          else {
            CFTypeRef v27 = 0;
          }
          uint64_t aBlock = v27;
          xpc_object_t v40 = v13;
          if (v13) {
            xpc_retain(v13);
          }
          else {
            xpc_object_t v40 = xpc_null_create();
          }
          xpc_object_t object = v14;
          if (v14) {
            xpc_retain(v14);
          }
          else {
            xpc_object_t object = xpc_null_create();
          }
          dispatch_async(v26, __p);
          xpc_release(object);
          xpc_object_t object = 0;
          xpc_release(v40);
          xpc_object_t v40 = 0;
          if (aBlock) {
            _Block_release(aBlock);
          }
          if (v25) {
            _Block_release(v25);
          }
        }
        else
        {
          xpc_object_t v20 = xpc_int64_create(*v36);
          if (!v20) {
            xpc_object_t v20 = xpc_null_create();
          }
          xpc_dictionary_set_value((xpc_object_t)v2[5], (const char *)*MEMORY[0x263F8B808], v20);
          xpc_object_t v21 = xpc_null_create();
          xpc_release(v20);
          xpc_release(v21);
          xpc_object_t v13 = xpc_null_create();
          xpc_object_t v14 = (xpc_object_t)v2[5];
          if (v14) {
            xpc_retain((xpc_object_t)v2[5]);
          }
          else {
            xpc_object_t v14 = xpc_null_create();
          }
          CFTypeRef v28 = (const void *)v2[1];
          if (v28) {
            xpc_object_t v29 = _Block_copy(v28);
          }
          else {
            xpc_object_t v29 = 0;
          }
          xpc_object_t v30 = v2[2];
          *(void *)std::string __p = MEMORY[0x263EF8330];
          *(void *)&__p[8] = 1174405120;
          *(void *)&__p[16] = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJNS1_4dictES7_EEEvDpT__block_invoke;
          xpc_object_t v38 = &__block_descriptor_tmp_287;
          if (v29) {
            std::string v31 = _Block_copy(v29);
          }
          else {
            std::string v31 = 0;
          }
          uint64_t aBlock = v31;
          xpc_object_t v40 = v13;
          if (v13) {
            xpc_retain(v13);
          }
          else {
            xpc_object_t v40 = xpc_null_create();
          }
          xpc_object_t object = v14;
          if (v14) {
            xpc_retain(v14);
          }
          else {
            xpc_object_t object = xpc_null_create();
          }
          dispatch_async(v30, __p);
          xpc_release(object);
          xpc_object_t object = 0;
          xpc_release(v40);
          xpc_object_t v40 = 0;
          if (aBlock) {
            _Block_release(aBlock);
          }
          if (v29) {
            _Block_release(v29);
          }
        }
        goto LABEL_81;
      }
    }
  }
}

void sub_235E49984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_235E49A5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    JUMPOUT(0x235E49A6CLL);
  }
  JUMPOUT(0x235E49A70);
}

uint64_t __copy_helper_block_e8_32c141_ZTSNSt3__110shared_ptrIZN5radio16ARICommandDriver14getChipID_syncEN3xpc4dictEN8dispatch8callbackIU13block_pointerFvNS3_6objectES7_EEEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c141_ZTSNSt3__110shared_ptrIZN5radio16ARICommandDriver14getChipID_syncEN3xpc4dictEN8dispatch8callbackIU13block_pointerFvNS3_6objectES7_EEEE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getChipID_sync(xpc::dict,dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0,std::allocator<radio::ARICommandDriver::getChipID_sync(xpc::dict,dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940B78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getChipID_sync(xpc::dict,dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0,std::allocator<radio::ARICommandDriver::getChipID_sync(xpc::dict,dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940B78;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getChipID_sync(xpc::dict,dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0,std::allocator<radio::ARICommandDriver::getChipID_sync(xpc::dict,dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>>::__on_zero_shared(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 64));
  *(void *)(a1 + 64) = 0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(NSObject **)(a1 + 40);
  if (v3) {
    dispatch_release(v3);
  }
  long long v4 = *(const void **)(a1 + 32);
  if (v4) {
    _Block_release(v4);
  }
}

void ___ZN3ice6detail12wrapCallbackIZN5radio16ARICommandDriver16getScrtPubK_syncEN3xpc4dictEN8dispatch8callbackIU13block_pointerFvNS4_6objectES8_EEEE3__0vEENS6_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = (std::__shared_weak_count *)v2[4];
    if (v3)
    {
      uint64_t v5 = *v2;
      xpc_object_t v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        long long v7 = v6;
        if (!v2[3])
        {
LABEL_86:
          if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v40 = v8;
        long long v41 = v8;
        void v39[2] = v8;
        v39[3] = v8;
        v39[0] = v8;
        v39[1] = v8;
        AriSdk::ARI_CsiSecReadSikPKeyRspCb_SDK::ARI_CsiSecReadSikPKeyRspCb_SDK((AriSdk::ARI_CsiSecReadSikPKeyRspCb_SDK *)v39, a2);
        memset(&v38, 170, sizeof(v38));
        *(void *)std::string __p = operator new(0x20uLL);
        *(_OWORD *)&__p[8] = xmmword_235E750A0;
        strcpy(*(char **)__p, "send Getting SCRT Pub Key");
        checkErrorStr((AriSdk::MsgBase *)v39, (uint64_t)__p, (uint64_t)&v38);
        if ((__p[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)__p);
          std::string::size_type size = HIBYTE(v38.__r_.__value_.__r.__words[2]);
          int v10 = SHIBYTE(v38.__r_.__value_.__r.__words[2]);
          if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type size = v38.__r_.__value_.__l.__size_;
          }
          if (size)
          {
LABEL_9:
            size_t v11 = *(NSObject **)(v5 + 40);
            if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
            {
              xpc_object_t v36 = (std::string *)v38.__r_.__value_.__r.__words[0];
              if (v10 >= 0) {
                xpc_object_t v36 = &v38;
              }
              *(_DWORD *)std::string __p = 136315138;
              *(void *)&__p[4] = v36;
              _os_log_error_impl(&dword_235DB9000, v11, OS_LOG_TYPE_ERROR, "%s", __p, 0xCu);
              LOBYTE(v10) = *((unsigned char *)&v38.__r_.__value_.__s + 23);
            }
            if ((v10 & 0x80u) == 0) {
              size_t v12 = &v38;
            }
            else {
              size_t v12 = (std::string *)v38.__r_.__value_.__r.__words[0];
            }
            xpc_object_t v13 = xpc_string_create((const char *)v12);
            if (!v13) {
              xpc_object_t v13 = xpc_null_create();
            }
            xpc_object_t v14 = xpc_null_create();
            long long v15 = (const void *)v2[1];
            if (v15) {
              CFTypeRef v16 = _Block_copy(v15);
            }
            else {
              CFTypeRef v16 = 0;
            }
            int64_t v22 = v2[2];
            *(void *)std::string __p = MEMORY[0x263EF8330];
            *(void *)&__p[8] = 1174405120;
            *(void *)&__p[16] = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke;
            long long v43 = &__block_descriptor_tmp_270;
            if (v16)
            {
              uint64_t aBlock = _Block_copy(v16);
              xpc_object_t v45 = v13;
              if (v13) {
                goto LABEL_32;
              }
            }
            else
            {
              uint64_t aBlock = 0;
              xpc_object_t v45 = v13;
              if (v13)
              {
LABEL_32:
                xpc_retain(v13);
                xpc_object_t object = v14;
                if (v14)
                {
LABEL_33:
                  xpc_retain(v14);
LABEL_37:
                  dispatch_async(v22, __p);
                  xpc_release(object);
                  xpc_object_t object = 0;
                  xpc_release(v45);
                  xpc_object_t v45 = 0;
                  if (aBlock) {
                    _Block_release(aBlock);
                  }
                  if (v16) {
                    _Block_release(v16);
                  }
                  goto LABEL_41;
                }
LABEL_36:
                xpc_object_t object = xpc_null_create();
                goto LABEL_37;
              }
            }
            xpc_object_t v45 = xpc_null_create();
            xpc_object_t object = v14;
            if (v14) {
              goto LABEL_33;
            }
            goto LABEL_36;
          }
        }
        else
        {
          std::string::size_type v9 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
          int v10 = SHIBYTE(v38.__r_.__value_.__r.__words[2]);
          if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v9 = v38.__r_.__value_.__l.__size_;
          }
          if (v9) {
            goto LABEL_9;
          }
        }
        if (!AriSdk::ARI_CsiSecReadSikPKeyRspCb_SDK::unpack((AriSdk::ARI_CsiSecReadSikPKeyRspCb_SDK *)v39))
        {
          size_t v23 = (unsigned __int16)**((_WORD **)&v41 + 1);
          if (**((_WORD **)&v41 + 1))
          {
            long long v24 = (const void *)v40;
            long long v25 = operator new((unsigned __int16)**((_WORD **)&v41 + 1));
            memmove(v25, v24, v23);
          }
          else
          {
            long long v25 = 0;
          }
          xpc_object_t v28 = xpc_data_create(v25, v23);
          if (!v28) {
            xpc_object_t v28 = xpc_null_create();
          }
          xpc_dictionary_set_value((xpc_object_t)v2[5], (const char *)*MEMORY[0x263F8B820], v28);
          xpc_object_t v29 = xpc_null_create();
          xpc_release(v28);
          xpc_release(v29);
          xpc_object_t v30 = xpc_null_create();
          xpc_object_t v31 = (xpc_object_t)v2[5];
          if (v31) {
            xpc_retain((xpc_object_t)v2[5]);
          }
          else {
            xpc_object_t v31 = xpc_null_create();
          }
          std::string v32 = (const void *)v2[1];
          if (v32) {
            CFTypeRef v33 = _Block_copy(v32);
          }
          else {
            CFTypeRef v33 = 0;
          }
          xpc_object_t v34 = v2[2];
          *(void *)std::string __p = MEMORY[0x263EF8330];
          *(void *)&__p[8] = 1174405120;
          *(void *)&__p[16] = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJNS1_4dictES7_EEEvDpT__block_invoke;
          long long v43 = &__block_descriptor_tmp_287;
          if (v33) {
            xpc_object_t v35 = _Block_copy(v33);
          }
          else {
            xpc_object_t v35 = 0;
          }
          uint64_t aBlock = v35;
          xpc_object_t v45 = v30;
          if (v30) {
            xpc_retain(v30);
          }
          else {
            xpc_object_t v45 = xpc_null_create();
          }
          xpc_object_t object = v31;
          if (v31) {
            xpc_retain(v31);
          }
          else {
            xpc_object_t object = xpc_null_create();
          }
          dispatch_async(v34, __p);
          xpc_release(object);
          xpc_object_t object = 0;
          xpc_release(v45);
          xpc_object_t v45 = 0;
          if (aBlock) {
            _Block_release(aBlock);
          }
          if (v33) {
            _Block_release(v33);
          }
          xpc_release(v31);
          xpc_release(v30);
          if (v25) {
            operator delete(v25);
          }
          goto LABEL_83;
        }
        std::string::__assign_external(&v38, "Failed to get SCRT Pub Key", 0x1AuLL);
        CFTypeRef v18 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          xpc_object_t v37 = &v38;
          if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            xpc_object_t v37 = (std::string *)v38.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)std::string __p = 136315138;
          *(void *)&__p[4] = v37;
          _os_log_error_impl(&dword_235DB9000, v18, OS_LOG_TYPE_ERROR, "%s", __p, 0xCu);
        }
        if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v19 = &v38;
        }
        else {
          long long v19 = (std::string *)v38.__r_.__value_.__r.__words[0];
        }
        xpc_object_t v13 = xpc_string_create((const char *)v19);
        if (!v13) {
          xpc_object_t v13 = xpc_null_create();
        }
        xpc_object_t v14 = xpc_null_create();
        xpc_object_t v20 = (const void *)v2[1];
        if (v20) {
          xpc_object_t v21 = _Block_copy(v20);
        }
        else {
          xpc_object_t v21 = 0;
        }
        unint64_t v26 = v2[2];
        *(void *)std::string __p = MEMORY[0x263EF8330];
        *(void *)&__p[8] = 1174405120;
        *(void *)&__p[16] = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke;
        long long v43 = &__block_descriptor_tmp_270;
        if (v21) {
          CFTypeRef v27 = _Block_copy(v21);
        }
        else {
          CFTypeRef v27 = 0;
        }
        uint64_t aBlock = v27;
        xpc_object_t v45 = v13;
        if (v13) {
          xpc_retain(v13);
        }
        else {
          xpc_object_t v45 = xpc_null_create();
        }
        xpc_object_t object = v14;
        if (v14) {
          xpc_retain(v14);
        }
        else {
          xpc_object_t object = xpc_null_create();
        }
        dispatch_async(v26, __p);
        xpc_release(object);
        xpc_object_t object = 0;
        xpc_release(v45);
        xpc_object_t v45 = 0;
        if (aBlock) {
          _Block_release(aBlock);
        }
        if (v21) {
          _Block_release(v21);
        }
LABEL_41:
        xpc_release(v14);
        xpc_release(v13);
LABEL_83:
        if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v38.__r_.__value_.__l.__data_);
        }
        MEMORY[0x237DF5FB0](v39);
        goto LABEL_86;
      }
    }
  }
}

void sub_235E4A2A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c143_ZTSNSt3__110shared_ptrIZN5radio16ARICommandDriver16getScrtPubK_syncEN3xpc4dictEN8dispatch8callbackIU13block_pointerFvNS3_6objectES7_EEEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c143_ZTSNSt3__110shared_ptrIZN5radio16ARICommandDriver16getScrtPubK_syncEN3xpc4dictEN8dispatch8callbackIU13block_pointerFvNS3_6objectES7_EEEE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getScrtPubK_sync(xpc::dict,dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0,std::allocator<radio::ARICommandDriver::getScrtPubK_sync(xpc::dict,dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940BF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getScrtPubK_sync(xpc::dict,dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0,std::allocator<radio::ARICommandDriver::getScrtPubK_sync(xpc::dict,dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940BF8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getScrtPubK_sync(xpc::dict,dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0,std::allocator<radio::ARICommandDriver::getScrtPubK_sync(xpc::dict,dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>>::__on_zero_shared(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 64));
  *(void *)(a1 + 64) = 0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(NSObject **)(a1 + 40);
  if (v3) {
    dispatch_release(v3);
  }
  long long v4 = *(const void **)(a1 + 32);
  if (v4) {
    _Block_release(v4);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::ARICommandDriver::getFirmwareInfo(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>(radio::ARICommandDriver::getFirmwareInfo(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::ARICommandDriver::getFirmwareInfo(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0,dispatch_queue_s *::default_delete<radio::ARICommandDriver::getFirmwareInfo(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>>)::{lambda(void *)#1}::__invoke(std::__shared_weak_count_vtbl ***a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v22[2] = v4;
  v22[3] = v4;
  v22[0] = v4;
  v22[1] = v4;
  AriSdk::ARI_CsiSecGetSNUMReq_SDK::ARI_CsiSecGetSNUMReq_SDK((AriSdk::ARI_CsiSecGetSNUMReq_SDK *)v22);
  on_zero_shared_weak = v3[7].__on_zero_shared_weak;
  xpc_object_t v6 = v2[1];
  if (v6)
  {
    long long v7 = _Block_copy(v6);
    long long v8 = v2[2];
    if (!v8) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  long long v7 = 0;
  long long v8 = v2[2];
  if (v8) {
LABEL_3:
  }
    dispatch_retain(v8);
LABEL_4:
  int v10 = v2[3];
  uint64_t v9 = (uint64_t)v2[4];
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 16), 1uLL, memory_order_relaxed);
  }
  size_t v11 = (std::__shared_weak_count *)operator new(0x40uLL);
  v11->__shared_owners_ = 0;
  p_shared_owners = &v11->__shared_owners_;
  v11->__shared_weak_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940C78;
  v11[1].__vftable = v3;
  v11[1].__shared_owners_ = (uint64_t)v7;
  v11[1].__shared_weak_owners_ = (uint64_t)v8;
  v11[2].__vftable = v10;
  v11[2].__shared_owners_ = v9;
  *(void *)&long long v24 = MEMORY[0x263EF8330];
  *((void *)&v24 + 1) = 1174405120;
  *(void *)&long long v25 = ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver15getFirmwareInfoEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES7_EEEENK3__0clEvEUlPKhjE_vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  *((void *)&v25 + 1) = &__block_descriptor_tmp_300;
  unint64_t v26 = (unint64_t)&v11[1];
  CFTypeRef v27 = v11;
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v29 = 0x40000000;
  xpc_object_t v30 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
  xpc_object_t v31 = &unk_264C7DF90;
  std::string v32 = &v24;
  xpc_object_t v13 = _Block_copy(&aBlock);
  xpc_object_t v14 = v27;
  if (!v27 || atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_9:
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_10:
  *(void *)&long long v15 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v24 = v15;
  long long v25 = v15;
  unint64_t v26 = 0xAAAAAAAAAAAAAAAALL;
  CFTypeRef v16 = (std::__shared_weak_count *)*((void *)on_zero_shared_weak + 2);
  uint64_t aBlock = *((void *)on_zero_shared_weak + 1);
  if (!v16)
  {
    uint64_t v29 = 0;
LABEL_32:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v29 = (uint64_t)std::__shared_weak_count::lock(v16);
  if (!v29) {
    goto LABEL_32;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  CFTypeRef v17 = (std::__shared_weak_count *)v29;
  if (v29 && !atomic_fetch_add((atomic_ullong *volatile)(v29 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  size_t v23 = v13;
  ice::SendMsgBaseProxy::callback();
  if (v23) {
    _Block_release(v23);
  }
  MEMORY[0x237DF50B0](&v24);
  MEMORY[0x237DF55C0](v22);
  CFTypeRef v18 = (std::__shared_weak_count *)v2[4];
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
  long long v19 = v2[2];
  if (v19) {
    dispatch_release(v19);
  }
  xpc_object_t v20 = v2[1];
  if (v20) {
    _Block_release(v20);
  }
  operator delete(v2);
  xpc_object_t v21 = (std::__shared_weak_count *)a1[2];
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  operator delete(a1);
}

void sub_235E4A8A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *aBlock, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  MEMORY[0x237DF50B0](&a19);
  MEMORY[0x237DF55C0](&a9);
  uint64_t v29 = (std::__shared_weak_count *)v27[4];
  if (v29)
  {
    std::__shared_weak_count::__release_weak(v29);
    xpc_object_t v30 = v27[2];
    if (!v30)
    {
LABEL_5:
      xpc_object_t v31 = (const void *)v27[1];
      if (!v31)
      {
LABEL_10:
        operator delete(v27);
        std::string v32 = (std::__shared_weak_count *)v26[2];
        if (v32)
        {
          if (!atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        operator delete(v26);
        _Unwind_Resume(a1);
      }
LABEL_9:
      _Block_release(v31);
      goto LABEL_10;
    }
  }
  else
  {
    xpc_object_t v30 = v27[2];
    if (!v30) {
      goto LABEL_5;
    }
  }
  dispatch_release(v30);
  xpc_object_t v31 = (const void *)v27[1];
  if (!v31) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver15getFirmwareInfoEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES7_EEEENK3__0clEvEUlPKhjE_vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 32);
    if (v3)
    {
      uint64_t v5 = *(std::__shared_weak_count_vtbl **)v2;
      xpc_object_t v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        long long v7 = v6;
        if (!*(void *)(v2 + 24))
        {
LABEL_87:
          if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        unint64_t v43 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v42[2] = v8;
        v42[3] = v8;
        v42[0] = v8;
        v42[1] = v8;
        AriSdk::ARI_CsiSecGetSNUMRspCb_SDK::ARI_CsiSecGetSNUMRspCb_SDK((AriSdk::ARI_CsiSecGetSNUMRspCb_SDK *)v42, a2);
        memset(&v41, 170, sizeof(v41));
        *(void *)std::string block = operator new(0x20uLL);
        *(_OWORD *)&block[8] = xmmword_235E72AD0;
        strcpy(*(char **)block, "send Getting Serial Number");
        checkErrorStr((AriSdk::MsgBase *)v42, (uint64_t)block, (uint64_t)&v41);
        if ((block[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)block);
          std::string::size_type size = HIBYTE(v41.__r_.__value_.__r.__words[2]);
          int v10 = SHIBYTE(v41.__r_.__value_.__r.__words[2]);
          if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type size = v41.__r_.__value_.__l.__size_;
          }
          if (size)
          {
LABEL_9:
            size_t v11 = v5[1].~__shared_weak_count;
            if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
            {
              uint64_t v29 = (std::string *)v41.__r_.__value_.__r.__words[0];
              if (v10 >= 0) {
                uint64_t v29 = &v41;
              }
              *(_DWORD *)std::string block = 136315138;
              *(void *)&void block[4] = v29;
              _os_log_error_impl(&dword_235DB9000, v11, OS_LOG_TYPE_ERROR, "%s", block, 0xCu);
              LOBYTE(v10) = *((unsigned char *)&v41.__r_.__value_.__s + 23);
            }
            if ((v10 & 0x80u) == 0) {
              size_t v12 = &v41;
            }
            else {
              size_t v12 = (std::string *)v41.__r_.__value_.__r.__words[0];
            }
            xpc_object_t v13 = xpc_string_create((const char *)v12);
            if (!v13) {
              xpc_object_t v13 = xpc_null_create();
            }
            xpc_object_t v14 = xpc_null_create();
            long long v15 = *(const void **)(v2 + 8);
            if (v15) {
              CFTypeRef v16 = _Block_copy(v15);
            }
            else {
              CFTypeRef v16 = 0;
            }
            int64_t v22 = *(NSObject **)(v2 + 16);
            *(void *)std::string block = MEMORY[0x263EF8330];
            *(void *)&block[8] = 1174405120;
            *(void *)&block[16] = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke;
            xpc_object_t v45 = &__block_descriptor_tmp_270;
            if (v16)
            {
              int v46 = _Block_copy(v16);
              xpc_object_t v47 = v13;
              if (v13) {
                goto LABEL_32;
              }
            }
            else
            {
              int v46 = 0;
              xpc_object_t v47 = v13;
              if (v13)
              {
LABEL_32:
                xpc_retain(v13);
                xpc_object_t v48 = v14;
                if (v14)
                {
LABEL_33:
                  xpc_retain(v14);
LABEL_37:
                  dispatch_async(v22, block);
                  xpc_release(v48);
                  xpc_object_t v48 = 0;
                  xpc_release(v47);
                  xpc_object_t v47 = 0;
                  if (v46) {
                    _Block_release(v46);
                  }
                  if (v16) {
                    _Block_release(v16);
                  }
                  goto LABEL_41;
                }
LABEL_36:
                xpc_object_t v48 = xpc_null_create();
                goto LABEL_37;
              }
            }
            xpc_object_t v47 = xpc_null_create();
            xpc_object_t v48 = v14;
            if (v14) {
              goto LABEL_33;
            }
            goto LABEL_36;
          }
        }
        else
        {
          std::string::size_type v9 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
          int v10 = SHIBYTE(v41.__r_.__value_.__r.__words[2]);
          if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v9 = v41.__r_.__value_.__l.__size_;
          }
          if (v9) {
            goto LABEL_9;
          }
        }
        if (!AriSdk::ARI_CsiSecGetSNUMRspCb_SDK::unpack((AriSdk::ARI_CsiSecGetSNUMRspCb_SDK *)v42))
        {
          memset(block, 170, sizeof(block));
          uint64_t v23 = *(void *)(v43 + 16);
          *(_OWORD *)std::string block = *(_OWORD *)v43;
          *(void *)&block[16] = v23;
          unsigned int v24 = (unsigned __int16)v23;
          if ((unsigned __int16)v23 >= 0x11u)
          {
            unsigned int v24 = 16;
            *(_WORD *)&block[16] = 16;
          }
          std::string __p = 0;
          xpc_object_t v39 = 0;
          uint64_t v40 = 0;
          std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, block, &block[v24], v24);
          xpc_object_t v25 = xpc_dictionary_create(0, 0, 0);
          if (v25 || (xpc_object_t v25 = xpc_null_create()) != 0)
          {
            if (MEMORY[0x237DF76E0](v25) == MEMORY[0x263EF8708])
            {
              xpc_retain(v25);
              xpc_object_t v26 = v25;
            }
            else
            {
              xpc_object_t v26 = xpc_null_create();
            }
          }
          else
          {
            xpc_object_t v26 = xpc_null_create();
            xpc_object_t v25 = 0;
          }
          xpc_release(v25);
          xpc_object_t v30 = xpc_data_create(__p, v39 - (unsigned char *)__p);
          if (!v30) {
            xpc_object_t v30 = xpc_null_create();
          }
          xpc_dictionary_set_value(v26, (const char *)*MEMORY[0x263F8B850], v30);
          xpc_object_t v31 = xpc_null_create();
          xpc_release(v30);
          xpc_release(v31);
          xpc_object_t object = v26;
          if (v26) {
            xpc_retain(v26);
          }
          else {
            xpc_object_t object = xpc_null_create();
          }
          std::string v32 = *(const void **)(v2 + 8);
          if (v32) {
            CFTypeRef v33 = _Block_copy(v32);
          }
          else {
            CFTypeRef v33 = 0;
          }
          xpc_object_t v34 = *(NSObject **)(v2 + 16);
          v36[0] = v33;
          v36[1] = v34;
          if (v34) {
            dispatch_retain(v34);
          }
          radio::ARICommandDriver::getChipID_sync(v5, &object, (uint64_t)v36);
          if (v34) {
            dispatch_release(v34);
          }
          if (v33) {
            _Block_release(v33);
          }
          xpc_release(object);
          xpc_object_t object = 0;
          xpc_release(v26);
          if (__p)
          {
            xpc_object_t v39 = __p;
            operator delete(__p);
          }
          goto LABEL_84;
        }
        std::string::__assign_external(&v41, "Failed to get Serial Number", 0x1BuLL);
        CFTypeRef v18 = v5[1].~__shared_weak_count;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          xpc_object_t v35 = &v41;
          if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            xpc_object_t v35 = (std::string *)v41.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)std::string block = 136315138;
          *(void *)&void block[4] = v35;
          _os_log_error_impl(&dword_235DB9000, v18, OS_LOG_TYPE_ERROR, "%s", block, 0xCu);
        }
        if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v19 = &v41;
        }
        else {
          long long v19 = (std::string *)v41.__r_.__value_.__r.__words[0];
        }
        xpc_object_t v13 = xpc_string_create((const char *)v19);
        if (!v13) {
          xpc_object_t v13 = xpc_null_create();
        }
        xpc_object_t v14 = xpc_null_create();
        xpc_object_t v20 = *(const void **)(v2 + 8);
        if (v20) {
          xpc_object_t v21 = _Block_copy(v20);
        }
        else {
          xpc_object_t v21 = 0;
        }
        CFTypeRef v27 = *(NSObject **)(v2 + 16);
        *(void *)std::string block = MEMORY[0x263EF8330];
        *(void *)&block[8] = 1174405120;
        *(void *)&block[16] = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke;
        xpc_object_t v45 = &__block_descriptor_tmp_270;
        if (v21) {
          xpc_object_t v28 = _Block_copy(v21);
        }
        else {
          xpc_object_t v28 = 0;
        }
        int v46 = v28;
        xpc_object_t v47 = v13;
        if (v13) {
          xpc_retain(v13);
        }
        else {
          xpc_object_t v47 = xpc_null_create();
        }
        xpc_object_t v48 = v14;
        if (v14) {
          xpc_retain(v14);
        }
        else {
          xpc_object_t v48 = xpc_null_create();
        }
        dispatch_async(v27, block);
        xpc_release(v48);
        xpc_object_t v48 = 0;
        xpc_release(v47);
        xpc_object_t v47 = 0;
        if (v46) {
          _Block_release(v46);
        }
        if (v21) {
          _Block_release(v21);
        }
LABEL_41:
        xpc_release(v14);
        xpc_release(v13);
LABEL_84:
        if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v41.__r_.__value_.__l.__data_);
        }
        MEMORY[0x237DF5800](v42);
        goto LABEL_87;
      }
    }
  }
}

void sub_235E4B098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c148_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver15getFirmwareInfoEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES6_EEEENK3__0clEvEUlPKhjE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c148_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver15getFirmwareInfoEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES6_EEEENK3__0clEvEUlPKhjE_EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getFirmwareInfo(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<radio::ARICommandDriver::getFirmwareInfo(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940C78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getFirmwareInfo(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<radio::ARICommandDriver::getFirmwareInfo(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940C78;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getFirmwareInfo(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<radio::ARICommandDriver::getFirmwareInfo(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[7];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = a1[5];
  if (v3) {
    dispatch_release(v3);
  }
  long long v4 = (const void *)a1[4];
  if (v4) {
    _Block_release(v4);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::ARICommandDriver::getManifestStatus(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>(radio::ARICommandDriver::getManifestStatus(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::ARICommandDriver::getManifestStatus(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0,dispatch_queue_s *::default_delete<radio::ARICommandDriver::getManifestStatus(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>>)::{lambda(void *)#1}::__invoke(std::__shared_weak_count_vtbl ***a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v22[2] = v4;
  v22[3] = v4;
  v22[0] = v4;
  v22[1] = v4;
  AriSdk::ARI_CsiIceGetManifestStatusReq_SDK::ARI_CsiIceGetManifestStatusReq_SDK((AriSdk::ARI_CsiIceGetManifestStatusReq_SDK *)v22);
  on_zero_shared_weak = v3[7].__on_zero_shared_weak;
  xpc_object_t v6 = v2[1];
  if (v6)
  {
    long long v7 = _Block_copy(v6);
    long long v8 = v2[2];
    if (!v8) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  long long v7 = 0;
  long long v8 = v2[2];
  if (v8) {
LABEL_3:
  }
    dispatch_retain(v8);
LABEL_4:
  int v10 = v2[3];
  uint64_t v9 = (uint64_t)v2[4];
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 16), 1uLL, memory_order_relaxed);
  }
  size_t v11 = (std::__shared_weak_count *)operator new(0x40uLL);
  v11->__shared_owners_ = 0;
  p_shared_owners = &v11->__shared_owners_;
  v11->__shared_weak_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940CF8;
  v11[1].__vftable = v3;
  v11[1].__shared_owners_ = (uint64_t)v7;
  v11[1].__shared_weak_owners_ = (uint64_t)v8;
  v11[2].__vftable = v10;
  v11[2].__shared_owners_ = v9;
  *(void *)&long long v24 = MEMORY[0x263EF8330];
  *((void *)&v24 + 1) = 1174405120;
  *(void *)&long long v25 = ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver17getManifestStatusEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES7_EEEENK3__0clEvEUlPKhjE_vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  *((void *)&v25 + 1) = &__block_descriptor_tmp_304;
  unint64_t v26 = (unint64_t)&v11[1];
  CFTypeRef v27 = v11;
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v29 = 0x40000000;
  xpc_object_t v30 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
  xpc_object_t v31 = &unk_264C7DF90;
  std::string v32 = &v24;
  xpc_object_t v13 = _Block_copy(&aBlock);
  xpc_object_t v14 = v27;
  if (!v27 || atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_9:
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_10:
  *(void *)&long long v15 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v24 = v15;
  long long v25 = v15;
  unint64_t v26 = 0xAAAAAAAAAAAAAAAALL;
  CFTypeRef v16 = (std::__shared_weak_count *)*((void *)on_zero_shared_weak + 2);
  uint64_t aBlock = *((void *)on_zero_shared_weak + 1);
  if (!v16)
  {
    uint64_t v29 = 0;
LABEL_32:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v29 = (uint64_t)std::__shared_weak_count::lock(v16);
  if (!v29) {
    goto LABEL_32;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  CFTypeRef v17 = (std::__shared_weak_count *)v29;
  if (v29 && !atomic_fetch_add((atomic_ullong *volatile)(v29 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  uint64_t v23 = v13;
  ice::SendMsgBaseProxy::callback();
  if (v23) {
    _Block_release(v23);
  }
  MEMORY[0x237DF50B0](&v24);
  MEMORY[0x237DF6580](v22);
  CFTypeRef v18 = (std::__shared_weak_count *)v2[4];
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
  long long v19 = v2[2];
  if (v19) {
    dispatch_release(v19);
  }
  xpc_object_t v20 = v2[1];
  if (v20) {
    _Block_release(v20);
  }
  operator delete(v2);
  xpc_object_t v21 = (std::__shared_weak_count *)a1[2];
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  operator delete(a1);
}

void sub_235E4B6D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *aBlock, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  MEMORY[0x237DF50B0](&a19);
  MEMORY[0x237DF6580](&a9);
  uint64_t v29 = (std::__shared_weak_count *)v27[4];
  if (v29)
  {
    std::__shared_weak_count::__release_weak(v29);
    xpc_object_t v30 = v27[2];
    if (!v30)
    {
LABEL_5:
      xpc_object_t v31 = (const void *)v27[1];
      if (!v31)
      {
LABEL_10:
        operator delete(v27);
        std::string v32 = (std::__shared_weak_count *)v26[2];
        if (v32)
        {
          if (!atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        operator delete(v26);
        _Unwind_Resume(a1);
      }
LABEL_9:
      _Block_release(v31);
      goto LABEL_10;
    }
  }
  else
  {
    xpc_object_t v30 = v27[2];
    if (!v30) {
      goto LABEL_5;
    }
  }
  dispatch_release(v30);
  xpc_object_t v31 = (const void *)v27[1];
  if (!v31) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver17getManifestStatusEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES7_EEEENK3__0clEvEUlPKhjE_vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v71 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = (std::__shared_weak_count *)v2[4];
    if (v3)
    {
      uint64_t v5 = *v2;
      xpc_object_t v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        long long v7 = v6;
        if (!v2[3])
        {
LABEL_98:
          if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v57 = v8;
        long long v58 = v8;
        v55[3] = v8;
        long long v56 = v8;
        v55[1] = v8;
        _OWORD v55[2] = v8;
        v55[0] = v8;
        AriSdk::ARI_CsiIceGetManifestStatusResp_SDK::ARI_CsiIceGetManifestStatusResp_SDK((AriSdk::ARI_CsiIceGetManifestStatusResp_SDK *)v55, a2);
        memset(&v54, 170, sizeof(v54));
        *(void *)std::string block = operator new(0x20uLL);
        *(_OWORD *)&block[8] = xmmword_235E71970;
        strcpy(*(char **)block, "send Getting Manifest Status");
        checkErrorStr((AriSdk::MsgBase *)v55, (uint64_t)block, (uint64_t)&v54);
        if ((block[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)block);
          std::string::size_type size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
          int v10 = SHIBYTE(v54.__r_.__value_.__r.__words[2]);
          if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type size = v54.__r_.__value_.__l.__size_;
          }
          if (size)
          {
LABEL_9:
            size_t v11 = *(NSObject **)(v5 + 40);
            if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
            {
              xpc_object_t v37 = (std::string *)v54.__r_.__value_.__r.__words[0];
              if (v10 >= 0) {
                xpc_object_t v37 = &v54;
              }
              *(_DWORD *)std::string block = 136315138;
              *(void *)&void block[4] = v37;
              _os_log_error_impl(&dword_235DB9000, v11, OS_LOG_TYPE_ERROR, "%s", block, 0xCu);
              LOBYTE(v10) = *((unsigned char *)&v54.__r_.__value_.__s + 23);
            }
            if ((v10 & 0x80u) == 0) {
              size_t v12 = &v54;
            }
            else {
              size_t v12 = (std::string *)v54.__r_.__value_.__r.__words[0];
            }
            xpc_object_t v13 = xpc_string_create((const char *)v12);
            if (!v13) {
              xpc_object_t v13 = xpc_null_create();
            }
            xpc_object_t v14 = xpc_null_create();
            long long v15 = (const void *)v2[1];
            if (v15) {
              CFTypeRef v16 = _Block_copy(v15);
            }
            else {
              CFTypeRef v16 = 0;
            }
            int64_t v22 = v2[2];
            *(void *)std::string block = MEMORY[0x263EF8330];
            *(void *)&block[8] = 1174405120;
            *(void *)&block[16] = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke;
            *(void *)&unsigned char block[24] = &__block_descriptor_tmp_270;
            if (v16)
            {
              *(void *)&long long v64 = _Block_copy(v16);
              *((void *)&v64 + 1) = v13;
              if (v13) {
                goto LABEL_32;
              }
            }
            else
            {
              *(void *)&long long v64 = 0;
              *((void *)&v64 + 1) = v13;
              if (v13)
              {
LABEL_32:
                xpc_retain(v13);
                *(void *)&long long v65 = v14;
                if (v14)
                {
LABEL_33:
                  xpc_retain(v14);
LABEL_37:
                  dispatch_async(v22, block);
                  xpc_release((xpc_object_t)v65);
                  *(void *)&long long v65 = 0;
                  xpc_release(*((xpc_object_t *)&v64 + 1));
                  *((void *)&v64 + 1) = 0;
                  if ((void)v64) {
                    _Block_release((const void *)v64);
                  }
                  if (v16) {
                    _Block_release(v16);
                  }
                  goto LABEL_41;
                }
LABEL_36:
                *(void *)&long long v65 = xpc_null_create();
                goto LABEL_37;
              }
            }
            *((void *)&v64 + 1) = xpc_null_create();
            *(void *)&long long v65 = v14;
            if (v14) {
              goto LABEL_33;
            }
            goto LABEL_36;
          }
        }
        else
        {
          std::string::size_type v9 = HIBYTE(v54.__r_.__value_.__r.__words[2]);
          int v10 = SHIBYTE(v54.__r_.__value_.__r.__words[2]);
          if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v9 = v54.__r_.__value_.__l.__size_;
          }
          if (v9) {
            goto LABEL_9;
          }
        }
        if (!AriSdk::ARI_CsiIceGetManifestStatusResp_SDK::unpack((AriSdk::ARI_CsiIceGetManifestStatusResp_SDK *)v55))
        {
          __int16 v70 = -21846;
          *(void *)&long long v23 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v23 + 1) = 0xAAAAAAAAAAAAAAAALL;
          long long v68 = v23;
          long long v69 = v23;
          long long v66 = v23;
          long long v67 = v23;
          long long v64 = v23;
          long long v65 = v23;
          *(_OWORD *)std::string block = v23;
          *(_OWORD *)&block[16] = v23;
          *(_OWORD *)std::string block = *(_OWORD *)v56;
          long long v24 = *(_OWORD *)(v56 + 64);
          long long v26 = *(_OWORD *)(v56 + 16);
          long long v25 = *(_OWORD *)(v56 + 32);
          long long v65 = *(_OWORD *)(v56 + 48);
          long long v66 = v24;
          *(_OWORD *)&block[16] = v26;
          long long v64 = v25;
          long long v28 = *(_OWORD *)(v56 + 96);
          long long v27 = *(_OWORD *)(v56 + 112);
          long long v29 = *(_OWORD *)(v56 + 80);
          __int16 v70 = *(_WORD *)(v56 + 128);
          long long v68 = v28;
          long long v69 = v27;
          long long v67 = v29;
          unsigned int v30 = *(unsigned __int16 *)block;
          if (*(unsigned __int16 *)block >= 0x81u)
          {
            unsigned int v30 = 128;
            *(_WORD *)std::string block = 128;
          }
          std::string __p = 0;
          long long v52 = 0;
          uint64_t v53 = 0;
          std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, &block[2], &block[v30 + 2], v30);
          int v31 = *(unsigned __int16 *)block;
          int64_t v32 = (unsigned __int16)**((_WORD **)&v57 + 1);
          xpc_object_t v33 = xpc_dictionary_create(0, 0, 0);
          if (v33 || (xpc_object_t v33 = xpc_null_create()) != 0)
          {
            if (MEMORY[0x237DF76E0](v33) == MEMORY[0x263EF8708])
            {
              xpc_retain(v33);
              xpc_object_t v34 = v33;
            }
            else
            {
              xpc_object_t v34 = xpc_null_create();
            }
          }
          else
          {
            xpc_object_t v34 = xpc_null_create();
            xpc_object_t v33 = 0;
          }
          xpc_release(v33);
          xpc_object_t v38 = xpc_int64_create(2 * (v31 != 32));
          if (!v38) {
            xpc_object_t v38 = xpc_null_create();
          }
          xpc_dictionary_set_value(v34, (const char *)*MEMORY[0x263F8B830], v38);
          xpc_object_t v39 = xpc_null_create();
          xpc_release(v38);
          xpc_release(v39);
          xpc_object_t v40 = xpc_int64_create(v32);
          if (!v40) {
            xpc_object_t v40 = xpc_null_create();
          }
          xpc_dictionary_set_value(v34, (const char *)*MEMORY[0x263F8B828], v40);
          xpc_object_t v41 = xpc_null_create();
          xpc_release(v40);
          xpc_release(v41);
          xpc_object_t v42 = xpc_data_create(__p, v52 - (unsigned char *)__p);
          if (!v42) {
            xpc_object_t v42 = xpc_null_create();
          }
          xpc_dictionary_set_value(v34, (const char *)*MEMORY[0x263F8B818], v42);
          xpc_object_t v43 = xpc_null_create();
          xpc_release(v42);
          xpc_release(v43);
          xpc_object_t v44 = xpc_null_create();
          if (v34)
          {
            xpc_retain(v34);
            xpc_object_t v45 = v34;
          }
          else
          {
            xpc_object_t v45 = xpc_null_create();
          }
          int v46 = (const void *)v2[1];
          if (v46) {
            xpc_object_t v47 = _Block_copy(v46);
          }
          else {
            xpc_object_t v47 = 0;
          }
          xpc_object_t v48 = v2[2];
          v59[0] = MEMORY[0x263EF8330];
          v59[1] = 1174405120;
          v59[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJNS1_4dictES7_EEEvDpT__block_invoke;
          v59[3] = &__block_descriptor_tmp_287;
          if (v47) {
            uint64_t v49 = _Block_copy(v47);
          }
          else {
            uint64_t v49 = 0;
          }
          uint64_t aBlock = v49;
          xpc_object_t v61 = v44;
          if (v44) {
            xpc_retain(v44);
          }
          else {
            xpc_object_t v61 = xpc_null_create();
          }
          xpc_object_t object = v45;
          if (v45) {
            xpc_retain(v45);
          }
          else {
            xpc_object_t object = xpc_null_create();
          }
          dispatch_async(v48, v59);
          xpc_release(object);
          xpc_object_t object = 0;
          xpc_release(v61);
          xpc_object_t v61 = 0;
          if (aBlock) {
            _Block_release(aBlock);
          }
          if (v47) {
            _Block_release(v47);
          }
          xpc_release(v45);
          xpc_release(v44);
          xpc_release(v34);
          if (__p)
          {
            long long v52 = __p;
            operator delete(__p);
          }
          goto LABEL_95;
        }
        std::string::__assign_external(&v54, "Error response from ARI or BB", 0x1DuLL);
        CFTypeRef v18 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          unint64_t v50 = &v54;
          if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            unint64_t v50 = (std::string *)v54.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)std::string block = 136315138;
          *(void *)&void block[4] = v50;
          _os_log_error_impl(&dword_235DB9000, v18, OS_LOG_TYPE_ERROR, "%s", block, 0xCu);
        }
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v19 = &v54;
        }
        else {
          long long v19 = (std::string *)v54.__r_.__value_.__r.__words[0];
        }
        xpc_object_t v13 = xpc_string_create((const char *)v19);
        if (!v13) {
          xpc_object_t v13 = xpc_null_create();
        }
        xpc_object_t v14 = xpc_null_create();
        xpc_object_t v20 = (const void *)v2[1];
        if (v20) {
          xpc_object_t v21 = _Block_copy(v20);
        }
        else {
          xpc_object_t v21 = 0;
        }
        xpc_object_t v35 = v2[2];
        *(void *)std::string block = MEMORY[0x263EF8330];
        *(void *)&block[8] = 1174405120;
        *(void *)&block[16] = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke;
        *(void *)&unsigned char block[24] = &__block_descriptor_tmp_270;
        if (v21) {
          xpc_object_t v36 = _Block_copy(v21);
        }
        else {
          xpc_object_t v36 = 0;
        }
        *(void *)&long long v64 = v36;
        *((void *)&v64 + 1) = v13;
        if (v13) {
          xpc_retain(v13);
        }
        else {
          *((void *)&v64 + 1) = xpc_null_create();
        }
        *(void *)&long long v65 = v14;
        if (v14) {
          xpc_retain(v14);
        }
        else {
          *(void *)&long long v65 = xpc_null_create();
        }
        dispatch_async(v35, block);
        xpc_release((xpc_object_t)v65);
        *(void *)&long long v65 = 0;
        xpc_release(*((xpc_object_t *)&v64 + 1));
        *((void *)&v64 + 1) = 0;
        if ((void)v64) {
          _Block_release((const void *)v64);
        }
        if (v21) {
          _Block_release(v21);
        }
LABEL_41:
        xpc_release(v14);
        xpc_release(v13);
LABEL_95:
        if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v54.__r_.__value_.__l.__data_);
        }
        MEMORY[0x237DF66D0](v55);
        goto LABEL_98;
      }
    }
  }
}

void sub_235E4C040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c150_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver17getManifestStatusEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES6_EEEENK3__0clEvEUlPKhjE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c150_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver17getManifestStatusEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES6_EEEENK3__0clEvEUlPKhjE_EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getManifestStatus(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<radio::ARICommandDriver::getManifestStatus(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940CF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getManifestStatus(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<radio::ARICommandDriver::getManifestStatus(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940CF8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::getManifestStatus(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<radio::ARICommandDriver::getManifestStatus(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[7];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = a1[5];
  if (v3) {
    dispatch_release(v3);
  }
  long long v4 = (const void *)a1[4];
  if (v4) {
    _Block_release(v4);
  }
}

void ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver13setRegionCodeENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEUb7_E4__29vEEN8dispatch5blockIU13block_pointerFiPhjEEENS4_17integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  __p[3] = *(void **)MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
    {
      uint64_t v5 = *(void *)(v2 + 40);
      xpc_object_t v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        long long v7 = v6;
        if (!*(void *)v2)
        {
LABEL_32:
          if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        unint64_t v23 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v22[2] = v8;
        v22[3] = v8;
        v22[0] = v8;
        v22[1] = v8;
        AriSdk::ARI_IBISetDeviceRegionCodeRspCb_SDK::ARI_IBISetDeviceRegionCodeRspCb_SDK((AriSdk::ARI_IBISetDeviceRegionCodeRspCb_SDK *)v22, a2);
        CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        int v9 = *(char *)(v2 + 39);
        if (v9 >= 0) {
          size_t v10 = *(unsigned __int8 *)(v2 + 39);
        }
        else {
          size_t v10 = *(void *)(v2 + 24);
        }
        unint64_t v11 = v10 + 17;
        memset(__p, 170, 24);
        if (v10 + 17 >= 0x7FFFFFFFFFFFFFF8) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        size_t v12 = (void *)(v2 + 16);
        if (v11 >= 0x17)
        {
          uint64_t v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v11 | 7) != 0x17) {
            uint64_t v14 = v11 | 7;
          }
          uint64_t v15 = v14 + 1;
          CFTypeRef v16 = (char *)operator new(v14 + 1);
          __p[1] = (void *)(v10 + 17);
          __p[2] = (void *)(v15 | 0x8000000000000000);
          __p[0] = v16;
          v16[16] = 32;
          *(_OWORD *)CFTypeRef v16 = *(_OWORD *)"Set region code: ";
          xpc_object_t v13 = v16 + 17;
        }
        else
        {
          __p[2] = (void *)32;
          *(_OWORD *)std::string __p = *(_OWORD *)"Set region code: ";
          xpc_object_t v13 = (char *)&__p[2] + 1;
          if (!v10)
          {
LABEL_19:
            v13[v10] = 0;
            checkError((AriSdk::MsgBase *)v22, (uint64_t)__p, &cf);
            if (SHIBYTE(__p[2]) < 0) {
              operator delete(__p[0]);
            }
            CFTypeRef v18 = cf;
            if (cf) {
              long long v19 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
            }
            else {
              long long v19 = 0;
            }
            if (!v19)
            {
              xpc_object_t v20 = *(NSObject **)(v5 + 40);
              if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
              {
                if (*(char *)(v2 + 39) < 0) {
                  size_t v12 = (void *)*v12;
                }
                LODWORD(__p[0]) = 136315138;
                *(void **)((char *)__p + 4) = v12;
                _os_log_impl(&dword_235DB9000, v20, OS_LOG_TYPE_DEFAULT, "#I Setting region code (%s) successful", (uint8_t *)__p, 0xCu);
                CFTypeRef v18 = cf;
              }
            }
            if (v18) {
              CFRelease(v18);
            }
            MEMORY[0x237DF67D0](v22);
            goto LABEL_32;
          }
        }
        if (v9 >= 0) {
          CFTypeRef v17 = (void *)(v2 + 16);
        }
        else {
          CFTypeRef v17 = (void *)*v12;
        }
        memmove(v13, v17, v10);
        goto LABEL_19;
      }
    }
  }
}

void sub_235E4C5AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c138_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver13setRegionCodeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEUb7_E4__29EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c138_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver13setRegionCodeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEUb7_E4__29EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver13setRegionCodeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEUb7_E4__29NS6_IS9_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940D78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver13setRegionCodeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEUb7_E4__29NS6_IS9_EEED0Ev(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940D78;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver13setRegionCodeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEUb7_E4__29NS6_IS9_EEE16__on_zero_sharedEv(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
  {
    operator delete(*(void **)(a1 + 40));
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v2) {
      return;
    }
  }
  else
  {
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v2) {
      return;
    }
  }

  std::__shared_weak_count::__release_weak(v2);
}

void ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver11screenStateEbEUb8_E4__30vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = (std::__shared_weak_count *)v2[2];
    if (v3)
    {
      uint64_t v5 = *v2;
      xpc_object_t v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        long long v7 = v6;
        if (v2[1])
        {
          *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v15[2] = v8;
          v15[3] = v8;
          v15[0] = v8;
          v15[1] = v8;
          AriSdk::ARI_IBINetIceApStatusRspCb_SDK::ARI_IBINetIceApStatusRspCb_SDK((AriSdk::ARI_IBINetIceApStatusRspCb_SDK *)v15, a2);
          CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
          std::string __p = operator new(0x19uLL);
          long long v13 = xmmword_235E71940;
          strcpy((char *)__p, "Update AP Screen Status");
          checkError((AriSdk::MsgBase *)v15, (uint64_t)&__p, &cf);
          if (SHIBYTE(v13) < 0) {
            operator delete(__p);
          }
          CFTypeRef v9 = cf;
          if (cf) {
            size_t v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          }
          else {
            size_t v10 = 0;
          }
          if (!v10)
          {
            unint64_t v11 = *(NSObject **)(v5 + 40);
            if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(__p) = 0;
              _os_log_impl(&dword_235DB9000, v11, OS_LOG_TYPE_DEFAULT, "#I Update AP Screen Status successful", (uint8_t *)&__p, 2u);
              CFTypeRef v9 = cf;
            }
          }
          if (v9) {
            CFRelease(v9);
          }
          MEMORY[0x237DF6020](v15);
        }
        if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
  }
}

void sub_235E4C938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  MEMORY[0x237DF6020](&a16);
  if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c79_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver11screenStateEbEUb8_E4__30EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c79_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver11screenStateEbEUb8_E4__30EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver11screenStateEbEUb8_E4__30NS_9allocatorIS3_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940DF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver11screenStateEbEUb8_E4__30NS_9allocatorIS3_EEED0Ev(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940DF8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver11screenStateEbEUb8_E4__30NS_9allocatorIS3_EEE16__on_zero_sharedEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver12setBreadModeEbEUb9_E4__31vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = (std::__shared_weak_count *)v2[2];
    if (v3)
    {
      uint64_t v5 = *v2;
      xpc_object_t v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        long long v7 = v6;
        if (v2[1])
        {
          *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v14[3] = v8;
          v14[4] = v8;
          v14[1] = v8;
          v14[2] = v8;
          v14[0] = v8;
          AriSdk::ARI_IBICallPsBreadButterModeRspCb_SDK::ARI_IBICallPsBreadButterModeRspCb_SDK((AriSdk::ARI_IBICallPsBreadButterModeRspCb_SDK *)v14, a2);
          CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
          char v16 = 14;
          strcpy((char *)buf, "Set Bread mode");
          checkError((AriSdk::MsgBase *)v14, (uint64_t)buf, &cf);
          if (v16 < 0) {
            operator delete(*(void **)buf);
          }
          if (cf) {
            CFTypeRef v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          }
          else {
            CFTypeRef v9 = 0;
          }
          size_t v10 = *(NSObject **)(v5 + 40);
          if (v9)
          {
            if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            {
              if (*((unsigned char *)v2 + 24)) {
                unint64_t v11 = "enable";
              }
              else {
                unint64_t v11 = "disable";
              }
              *(_DWORD *)std::string buf = 136315138;
              *(void *)&buf[4] = v11;
              _os_log_error_impl(&dword_235DB9000, v10, OS_LOG_TYPE_ERROR, "Failed to %s Bread mode", buf, 0xCu);
            }
          }
          else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            if (*((unsigned char *)v2 + 24)) {
              size_t v12 = "enabled";
            }
            else {
              size_t v12 = "disabled";
            }
            *(_DWORD *)std::string buf = 136315138;
            *(void *)&buf[4] = v12;
            _os_log_impl(&dword_235DB9000, v10, OS_LOG_TYPE_DEFAULT, "#I Successfully %s Bread mode", buf, 0xCu);
          }
          if (cf) {
            CFRelease(cf);
          }
          MEMORY[0x237DF6910](v14);
        }
        if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
  }
}

void sub_235E4CCF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c80_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver12setBreadModeEbEUb9_E4__31EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c80_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver12setBreadModeEbEUb9_E4__31EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver12setBreadModeEbEUb9_E4__31NS_9allocatorIS3_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940E78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver12setBreadModeEbEUb9_E4__31NS_9allocatorIS3_EEED0Ev(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940E78;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver12setBreadModeEbEUb9_E4__31NS_9allocatorIS3_EEE16__on_zero_sharedEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver13setButterModeEbEUb10_E4__32vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = (std::__shared_weak_count *)v2[2];
    if (v3)
    {
      uint64_t v5 = *v2;
      xpc_object_t v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        long long v7 = v6;
        if (v2[1])
        {
          *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v14[3] = v8;
          v14[4] = v8;
          v14[1] = v8;
          v14[2] = v8;
          v14[0] = v8;
          AriSdk::ARI_IBICallPsBreadButterModeRspCb_SDK::ARI_IBICallPsBreadButterModeRspCb_SDK((AriSdk::ARI_IBICallPsBreadButterModeRspCb_SDK *)v14, a2);
          CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
          char v16 = 15;
          strcpy((char *)buf, "Set Butter mode");
          checkError((AriSdk::MsgBase *)v14, (uint64_t)buf, &cf);
          if (v16 < 0) {
            operator delete(*(void **)buf);
          }
          if (cf) {
            CFTypeRef v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          }
          else {
            CFTypeRef v9 = 0;
          }
          size_t v10 = *(NSObject **)(v5 + 40);
          if (v9)
          {
            if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            {
              if (*((unsigned char *)v2 + 24)) {
                unint64_t v11 = "enable";
              }
              else {
                unint64_t v11 = "disable";
              }
              *(_DWORD *)std::string buf = 136315138;
              *(void *)&buf[4] = v11;
              _os_log_error_impl(&dword_235DB9000, v10, OS_LOG_TYPE_ERROR, "Failed to %s Butter mode", buf, 0xCu);
            }
          }
          else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            if (*((unsigned char *)v2 + 24)) {
              size_t v12 = "enabled";
            }
            else {
              size_t v12 = "disabled";
            }
            *(_DWORD *)std::string buf = 136315138;
            *(void *)&buf[4] = v12;
            _os_log_impl(&dword_235DB9000, v10, OS_LOG_TYPE_DEFAULT, "#I Successfully %s Butter mode", buf, 0xCu);
          }
          if (cf) {
            CFRelease(cf);
          }
          MEMORY[0x237DF6910](v14);
        }
        if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
  }
}

void sub_235E4D0B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c82_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver13setButterModeEbEUb10_E4__32EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c82_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver13setButterModeEbEUb10_E4__32EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver13setButterModeEbEUb10_E4__32NS_9allocatorIS3_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940EF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver13setButterModeEbEUb10_E4__32NS_9allocatorIS3_EEED0Ev(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940EF8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver13setButterModeEbEUb10_E4__32NS_9allocatorIS3_EEE16__on_zero_sharedEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::ARICommandDriver::setMCC(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>(radio::ARICommandDriver::setMCC(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::ARICommandDriver::setMCC(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,dispatch_queue_s *::default_delete<radio::ARICommandDriver::setMCC(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = *(void **)*a1;
  v36[0] = 0xAAAAAAAAAAAAAAAALL;
  v36[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v36, (const __CFDictionary *)v2[1]);
  long long v4 = (std::__shared_weak_count *)v3[10];
  if (!v4 || (v5 = v3[9], (xpc_object_t v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v7 = v6;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  xpc_object_t v35 = (void *)0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v33[3] = v8;
  *(_OWORD *)std::string __p = v8;
  v33[1] = v8;
  _OWORD v33[2] = v8;
  v33[0] = v8;
  AriSdk::ARI_IBIMccSettingReq_SDK::ARI_IBIMccSettingReq_SDK((AriSdk::ARI_IBIMccSettingReq_SDK *)v33);
  int Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v36, (const __CFString *)*MEMORY[0x263F8B918]);
  size_t v10 = operator new(4uLL);
  _DWORD *v10 = Int;
  unint64_t v11 = __p[0];
  __p[0] = v10;
  if (v11) {
    operator delete(v11);
  }
  int v12 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v36, (const __CFString *)*MEMORY[0x263F8B7F8]);
  long long v13 = operator new(4uLL);
  *long long v13 = v12;
  uint64_t v14 = __p[1];
  __p[1] = v13;
  if (v14) {
    operator delete(v14);
  }
  int v15 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v36, (const __CFString *)*MEMORY[0x263F8B7F0]);
  char v16 = operator new(4uLL);
  *char v16 = v15;
  uint64_t v17 = v35;
  xpc_object_t v35 = v16;
  if (v17) {
    operator delete(v17);
  }
  uint64_t v18 = v3[39];
  long long v19 = (const void *)v2[2];
  if (!v19)
  {
    xpc_object_t v20 = 0;
    xpc_object_t v21 = v2[3];
    if (!v21) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  xpc_object_t v20 = (std::__shared_weak_count_vtbl *)_Block_copy(v19);
  xpc_object_t v21 = v2[3];
  if (v21) {
LABEL_13:
  }
    dispatch_retain(v21);
LABEL_14:
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  int64_t v22 = (std::__shared_weak_count *)operator new(0x38uLL);
  v22->__shared_owners_ = 0;
  p_shared_owners = &v22->__shared_owners_;
  v22->__shared_weak_owners_ = 0;
  v22->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940F78;
  v22[1].__vftable = v20;
  v22[1].__shared_owners_ = (uint64_t)v21;
  v22[1].__shared_weak_owners_ = v5;
  v22[2].__vftable = (std::__shared_weak_count_vtbl *)v7;
  *(void *)&long long v38 = MEMORY[0x263EF8330];
  *((void *)&v38 + 1) = 1174405120;
  *(void *)&long long v39 = ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver6setMCCEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS6_I9__CFErrorEEEEEENK3__0clEvEUlPKhjE_vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  *((void *)&v39 + 1) = &__block_descriptor_tmp_323;
  unint64_t v40 = (unint64_t)&v22[1];
  xpc_object_t v41 = v22;
  atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v43 = 0x40000000;
  xpc_object_t v44 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
  xpc_object_t v45 = &unk_264C7DF90;
  int v46 = &v38;
  long long v24 = _Block_copy(&aBlock);
  long long v25 = v41;
  if (!v41 || atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
  std::__shared_weak_count::__release_weak(v25);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_17:
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
LABEL_18:
  *(void *)&long long v26 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v26 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v38 = v26;
  long long v39 = v26;
  unint64_t v40 = 0xAAAAAAAAAAAAAAAALL;
  long long v27 = *(std::__shared_weak_count **)(v18 + 16);
  uint64_t aBlock = *(void *)(v18 + 8);
  if (!v27)
  {
    uint64_t v43 = 0;
LABEL_41:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v43 = (uint64_t)std::__shared_weak_count::lock(v27);
  if (!v43) {
    goto LABEL_41;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  long long v28 = (std::__shared_weak_count *)v43;
  if (v43 && !atomic_fetch_add((atomic_ullong *volatile)(v43 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  xpc_object_t v37 = v24;
  ice::SendMsgBaseProxy::callback();
  if (v37) {
    _Block_release(v37);
  }
  MEMORY[0x237DF50B0](&v38);
  MEMORY[0x237DF55E0](v33);
  std::__shared_weak_count::__release_weak(v7);
  MEMORY[0x237DF4EE0](v36);
  long long v29 = v2[3];
  if (v29) {
    dispatch_release(v29);
  }
  unsigned int v30 = (const void *)v2[2];
  if (v30) {
    _Block_release(v30);
  }
  int v31 = (const void *)v2[1];
  if (v31) {
    CFRelease(v31);
  }
  operator delete(v2);
  int64_t v32 = (std::__shared_weak_count *)a1[2];
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
  operator delete(a1);
}

void sub_235E4D6F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,void *aBlock,char a23)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  MEMORY[0x237DF50B0](&a23);
  MEMORY[0x237DF55E0](&a9);
  std::__shared_weak_count::__release_weak(v25);
  MEMORY[0x237DF4EE0](&a20);
  long long v27 = v24[3];
  if (v27) {
    dispatch_release(v27);
  }
  long long v28 = (const void *)v24[2];
  if (v28) {
    _Block_release(v28);
  }
  long long v29 = (const void *)v24[1];
  if (v29) {
    CFRelease(v29);
  }
  operator delete(v24);
  unsigned int v30 = (std::__shared_weak_count *)v23[2];
  if (v30)
  {
    if (!atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  operator delete(v23);
  _Unwind_Resume(a1);
}

void sub_235E4D864()
{
}

void ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver6setMCCEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS6_I9__CFErrorEEEEEENK3__0clEvEUlPKhjE_vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 24);
    if (v3)
    {
      uint64_t v5 = std::__shared_weak_count::lock(v3);
      if (v5)
      {
        xpc_object_t v6 = v5;
        if (!*(void *)(v2 + 16))
        {
LABEL_50:
          if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
          return;
        }
        long long v24 = (unsigned int *)0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
        _OWORD v23[2] = v7;
        v23[3] = v7;
        v23[0] = v7;
        v23[1] = v7;
        AriSdk::ARI_IBIMccSettingRspCb_SDK::ARI_IBIMccSettingRspCb_SDK((AriSdk::ARI_IBIMccSettingRspCb_SDK *)v23, a2);
        CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        *((unsigned char *)&block.__r_.__value_.__s + 23) = 7;
        strcpy((char *)&block, "Set mcc");
        checkError((AriSdk::MsgBase *)v23, (uint64_t)&block, &cf);
        if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(block.__r_.__value_.__l.__data_);
          if (cf) {
            CFTypeRef v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          }
          else {
            CFTypeRef v9 = 0;
          }
          if (v9) {
            goto LABEL_28;
          }
        }
        else
        {
          if (cf) {
            long long v8 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          }
          else {
            long long v8 = 0;
          }
          if (v8) {
            goto LABEL_28;
          }
        }
        if (AriSdk::ARI_IBIMccSettingRspCb_SDK::unpack((AriSdk::ARI_IBIMccSettingRspCb_SDK *)v23))
        {
          std::string __p = (char *)operator new(0x30uLL);
          strcpy(__p, "Failed to unpack response of setting mcc");
          CreateError();
          CFTypeRef v10 = cf;
          CFTypeRef cf = (CFTypeRef)block.__r_.__value_.__r.__words[0];
          block.__r_.__value_.__r.__words[0] = 0;
          if (v10)
          {
            CFRelease(v10);
            if (block.__r_.__value_.__r.__words[0]) {
              CFRelease(block.__r_.__value_.__l.__data_);
            }
          }
          unint64_t v11 = __p;
          goto LABEL_27;
        }
        int v12 = (ctu *)*v24;
        if (v12)
        {
          ctu::hex(v12);
          long long v13 = std::string::insert(&block, 0, "Error on setting mcc response result: 0x", 0x28uLL);
          std::string __pa = *v13;
          v13->__r_.__value_.__l.__size_ = 0;
          v13->__r_.__value_.__r.__words[2] = 0;
          v13->__r_.__value_.__r.__words[0] = 0;
          CreateError();
          CFTypeRef v14 = cf;
          CFTypeRef cf = v21;
          if (v14) {
            CFRelease(v14);
          }
          if (SHIBYTE(__pa.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__pa.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
          {
            unint64_t v11 = (char *)block.__r_.__value_.__r.__words[0];
LABEL_27:
            operator delete(v11);
          }
        }
LABEL_28:
        int v15 = *(const void **)v2;
        if (!*(void *)v2 || !*(void *)(v2 + 8))
        {
LABEL_47:
          if (cf) {
            CFRelease(cf);
          }
          MEMORY[0x237DF5850](v23);
          goto LABEL_50;
        }
        CFTypeRef v16 = cf;
        if (cf && (CFRetain(cf), (int v15 = *(const void **)v2) == 0)) {
          uint64_t v17 = 0;
        }
        else {
          uint64_t v17 = _Block_copy(v15);
        }
        uint64_t v18 = *(NSObject **)(v2 + 8);
        block.__r_.__value_.__r.__words[0] = MEMORY[0x263EF8330];
        block.__r_.__value_.__l.__size_ = 1174405120;
        block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
        long long v26 = &__block_descriptor_tmp_181;
        if (v17)
        {
          long long v27 = _Block_copy(v17);
          CFTypeRef v28 = v16;
          if (!v16) {
            goto LABEL_39;
          }
        }
        else
        {
          long long v27 = 0;
          CFTypeRef v28 = v16;
          if (!v16)
          {
LABEL_39:
            dispatch_async(v18, &block);
            if (v28) {
              CFRelease(v28);
            }
            if (v27) {
              _Block_release(v27);
            }
            if (v17) {
              _Block_release(v17);
            }
            if (v16) {
              CFRelease(v16);
            }
            goto LABEL_47;
          }
        }
        CFRetain(v16);
        goto LABEL_39;
      }
    }
  }
}

void sub_235E4DBF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, CFTypeRef cf, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v19 - 73) < 0) {
    operator delete(*(void **)(v19 - 96));
  }
  if (cf) {
    CFRelease(cf);
  }
  MEMORY[0x237DF5850](&a18);
  if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c180_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver6setMCCEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS5_I9__CFErrorEEEEEENK3__0clEvEUlPKhjE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c180_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver6setMCCEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS5_I9__CFErrorEEEEEENK3__0clEvEUlPKhjE_EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::setMCC(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<radio::ARICommandDriver::setMCC(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940F78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::setMCC(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<radio::ARICommandDriver::setMCC(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940F78;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<radio::ARICommandDriver::setMCC(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<radio::ARICommandDriver::setMCC(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = a1[4];
  if (v3) {
    dispatch_release(v3);
  }
  long long v4 = (const void *)a1[3];
  if (v4) {
    _Block_release(v4);
  }
}

void ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver13sendVisitInfoEjjEUb11_E4__34vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = (std::__shared_weak_count *)v2[2];
    if (v3)
    {
      uint64_t v5 = *v2;
      xpc_object_t v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        long long v7 = v6;
        if (v2[1])
        {
          *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v14[3] = v8;
          v14[4] = v8;
          v14[1] = v8;
          v14[2] = v8;
          v14[0] = v8;
          AriSdk::ARI_IBICallPsSignificantLocationRspCb_SDK::ARI_IBICallPsSignificantLocationRspCb_SDK((AriSdk::ARI_IBICallPsSignificantLocationRspCb_SDK *)v14, a2);
          memset(__p, 170, sizeof(__p));
          char v16 = 15;
          strcpy((char *)buf, "Send visit info");
          checkErrorStr((AriSdk::MsgBase *)v14, (uint64_t)buf, (uint64_t)__p);
          if (v16 < 0) {
            operator delete(*(void **)buf);
          }
          CFTypeRef v9 = (void *)HIBYTE(__p[2]);
          int v10 = SHIBYTE(__p[2]);
          if (SHIBYTE(__p[2]) < 0) {
            CFTypeRef v9 = __p[1];
          }
          unint64_t v11 = *(NSObject **)(v5 + 40);
          if (v9)
          {
            if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
            {
              int v12 = (void **)__p[0];
              if (v10 >= 0) {
                int v12 = __p;
              }
              *(_DWORD *)std::string buf = 136315138;
              *(void *)&buf[4] = v12;
              _os_log_error_impl(&dword_235DB9000, v11, OS_LOG_TYPE_ERROR, "Failed to send visit info with error: %s", buf, 0xCu);
            }
          }
          else if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl(&dword_235DB9000, v11, OS_LOG_TYPE_DEFAULT, "#I Successfully sent visit info", buf, 2u);
          }
          if (SHIBYTE(__p[2]) < 0) {
            operator delete(__p[0]);
          }
          MEMORY[0x237DF6AA0](v14);
        }
        if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
  }
}

void sub_235E4E03C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (*(char *)(v6 - 57) < 0) {
    operator delete(*(void **)(v6 - 80));
  }
  MEMORY[0x237DF6AA0](va);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c83_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver13sendVisitInfoEjjEUb11_E4__34EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c83_ZTSNSt3__110shared_ptrIZZN5radio16ARICommandDriver13sendVisitInfoEjjEUb11_E4__34EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver13sendVisitInfoEjjEUb11_E4__34NS_9allocatorIS3_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940FF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver13sendVisitInfoEjjEUb11_E4__34NS_9allocatorIS3_EEED0Ev(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940FF8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5radio16ARICommandDriver13sendVisitInfoEjjEUb11_E4__34NS_9allocatorIS3_EEE16__on_zero_sharedEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void Timestamp::Timestamp(Timestamp *this)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  *((void *)this + 1) = 0;
  uint64_t v2 = (void *)((char *)this + 8);
  *((void *)this + 2) = 0;
  *(void *)this = (char *)this + 8;
  unsigned long long v12 = 0uLL;
  if ((gettimeofday((timeval *)&v12, 0) & 0x80000000) == 0
    || !os_log_type_enabled(MEMORY[0x263EF8438], OS_LOG_TYPE_ERROR))
  {
    uint64_t v3 = *v2;
    long long v4 = v2;
    if (*v2) {
      goto LABEL_4;
    }
LABEL_10:
    long long v7 = (char *)operator new(0x38uLL);
    *((_DWORD *)v7 + 8) = 0;
    *((void *)v7 + 5) = 0;
    *((void *)v7 + 6) = 0;
    *(void *)long long v7 = 0;
    *((void *)v7 + 1) = 0;
    *((void *)v7 + 2) = v4;
    void *v2 = v7;
    uint64_t v8 = **(void **)this;
    CFTypeRef v9 = (uint64_t *)v7;
    if (v8)
    {
      *(void *)this = v8;
      CFTypeRef v9 = (uint64_t *)*v2;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 1), v9);
    ++*((void *)this + 2);
    goto LABEL_13;
  }
  int v10 = __error();
  unint64_t v11 = strerror(*v10);
  *(_DWORD *)std::string buf = 136315138;
  CFTypeRef v14 = v11;
  _os_log_error_impl(&dword_235DB9000, MEMORY[0x263EF8438], OS_LOG_TYPE_ERROR, "Failed to get current time. Error: %s\n", buf, 0xCu);
  uint64_t v3 = *v2;
  long long v4 = v2;
  if (!*v2) {
    goto LABEL_10;
  }
LABEL_4:
  uint64_t v5 = v3;
  while (1)
  {
    while (1)
    {
      long long v4 = (void *)v5;
      int v6 = *(_DWORD *)(v5 + 32);
      if (v6 < 1) {
        break;
      }
      uint64_t v5 = *v4;
      uint64_t v2 = v4;
      if (!*v4) {
        goto LABEL_10;
      }
    }
    if ((v6 & 0x80000000) == 0) {
      break;
    }
    uint64_t v5 = v4[1];
    if (!v5)
    {
      uint64_t v2 = v4 + 1;
      goto LABEL_10;
    }
  }
  long long v7 = (char *)v4;
LABEL_13:
  *(_OWORD *)(v7 + 40) = v12;
}

void sub_235E4E348(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(v1, *v2);
  _Unwind_Resume(a1);
}

void sub_235E4E364(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(v1, v2);
  _Unwind_Resume(a1);
}

void Timestamp::Timestamp(Timestamp *this, const Timestamp *a2)
{
  *((void *)this + 2) = 0;
  *((void *)this + 1) = 0;
  *(void *)this = (char *)this + 8;
  std::map<Timestamp::TimeDomain,timeval>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<Timestamp::TimeDomain,timeval>,std::__tree_node<std::__value_type<Timestamp::TimeDomain,timeval>,void *> *,long>>>((uint64_t *)this, *(void **)a2, (void *)a2 + 1);
}

{
  *((void *)this + 2) = 0;
  *((void *)this + 1) = 0;
  *(void *)this = (char *)this + 8;
  std::map<Timestamp::TimeDomain,timeval>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<Timestamp::TimeDomain,timeval>,std::__tree_node<std::__value_type<Timestamp::TimeDomain,timeval>,void *> *,long>>>((uint64_t *)this, *(void **)a2, (void *)a2 + 1);
}

void sub_235E4E3C0(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_235E4E418(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void *Timestamp::Timestamp(void *a1, _OWORD *a2, int a3)
{
  a1[2] = 0;
  a1[1] = 0;
  int v6 = a1 + 1;
  *a1 = a1 + 1;
  long long v7 = (char *)operator new(0x38uLL);
  *((_DWORD *)v7 + 8) = a3;
  *(void *)long long v7 = 0;
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 2) = v6;
  void *v6 = v7;
  *a1 = v7;
  v7[24] = 1;
  a1[2] = 1;
  *(_OWORD *)(v7 + 40) = *a2;
  return a1;
}

{
  void *v6;
  char *v7;

  a1[2] = 0;
  a1[1] = 0;
  int v6 = a1 + 1;
  *a1 = a1 + 1;
  long long v7 = (char *)operator new(0x38uLL);
  *((_DWORD *)v7 + 8) = a3;
  *(void *)long long v7 = 0;
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 2) = v6;
  void *v6 = v7;
  *a1 = v7;
  v7[24] = 1;
  a1[2] = 1;
  *(_OWORD *)(v7 + 40) = *a2;
  return a1;
}

__n128 Timestamp::set(uint64_t **a1, __n128 *a2, int a3)
{
  long long v7 = a1 + 1;
  int v6 = (char *)a1[1];
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v8 = v6;
        int v9 = *((_DWORD *)v6 + 8);
        if (v9 <= a3) {
          break;
        }
        int v6 = *(char **)v8;
        long long v7 = (uint64_t **)v8;
        if (!*(void *)v8) {
          goto LABEL_8;
        }
      }
      if (v9 >= a3) {
        break;
      }
      int v6 = (char *)*((void *)v8 + 1);
      if (!v6)
      {
        long long v7 = (uint64_t **)(v8 + 8);
        goto LABEL_8;
      }
    }
  }
  else
  {
    uint64_t v8 = (char *)(a1 + 1);
LABEL_8:
    int v10 = v8;
    uint64_t v8 = (char *)operator new(0x38uLL);
    *((_DWORD *)v8 + 8) = a3;
    *((void *)v8 + 5) = 0;
    *((void *)v8 + 6) = 0;
    *(void *)uint64_t v8 = 0;
    *((void *)v8 + 1) = 0;
    *((void *)v8 + 2) = v10;
    char *v7 = (uint64_t *)v8;
    unint64_t v11 = (uint64_t *)**a1;
    unsigned long long v12 = (uint64_t *)v8;
    if (v11)
    {
      *a1 = v11;
      unsigned long long v12 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  __n128 result = *a2;
  *(__n128 *)(v8 + 40) = *a2;
  return result;
}

void *Timestamp::Timestamp(void *a1, uint64_t a2, int a3)
{
  a1[2] = 0;
  a1[1] = 0;
  int v6 = a1 + 1;
  *a1 = a1 + 1;
  long long v7 = operator new(0x38uLL);
  v7[8] = a3;
  *(void *)long long v7 = 0;
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 2) = v6;
  void *v6 = v7;
  *a1 = v7;
  *((unsigned char *)v7 + 24) = 1;
  a1[2] = 1;
  *((void *)v7 + 5) = a2;
  *((void *)v7 + 6) = 0xAAAAAAAAAAAAAAAALL;
  return a1;
}

{
  void *v6;
  _DWORD *v7;

  a1[2] = 0;
  a1[1] = 0;
  int v6 = a1 + 1;
  *a1 = a1 + 1;
  long long v7 = operator new(0x38uLL);
  v7[8] = a3;
  *(void *)long long v7 = 0;
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 2) = v6;
  void *v6 = v7;
  *a1 = v7;
  *((unsigned char *)v7 + 24) = 1;
  a1[2] = 1;
  *((void *)v7 + 5) = a2;
  *((void *)v7 + 6) = 0xAAAAAAAAAAAAAAAALL;
  return a1;
}

uint64_t **Timestamp::Timestamp(uint64_t **a1, char *a2, char a3, int a4)
{
  uint64_t v5 = a2;
  uint64_t v28 = *MEMORY[0x263EF8340];
  a1[1] = 0;
  long long v7 = a1 + 1;
  a1[2] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  __p[2] = (void *)0x11AAAAAAAAAA0053;
  *(_OWORD *)std::string __p = *(_OWORD *)"%Y-%m-%d-%H-%M-%S";
  if ((a3 & 0x10) != 0)
  {
    HIBYTE(__p[2]) = 19;
    strcpy((char *)__p, "%Y.%m.%d_%H-%M-%S%z");
  }
  *((void *)&v23 + 1) = 0xAAAAAAAA00000000;
  memset(&v24, 0, sizeof(v24));
  if (a2[23] < 0) {
    uint64_t v5 = *(const char **)a2;
  }
  if (strptime(v5, (const char *)__p, &v24))
  {
    v24.tm_isdst = -1;
    *(void *)&unsigned long long v23 = mktime(&v24);
    if ((void)v23 != -1) {
      goto LABEL_15;
    }
    if (os_log_type_enabled(MEMORY[0x263EF8438], OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = __error();
      xpc_object_t v20 = strerror(*v19);
      *(_DWORD *)std::string buf = 136315138;
      long long v27 = v20;
      _os_log_error_impl(&dword_235DB9000, MEMORY[0x263EF8438], OS_LOG_TYPE_ERROR, "Failed to convert to absolute time. Error: %s\n", buf, 0xCu);
      unsigned long long v23 = 0uLL;
      if ((gettimeofday((timeval *)&v23, 0) & 0x80000000) == 0) {
        goto LABEL_15;
      }
    }
    else
    {
      unsigned long long v23 = 0uLL;
      if ((gettimeofday((timeval *)&v23, 0) & 0x80000000) == 0) {
        goto LABEL_15;
      }
    }
    if (!os_log_type_enabled(MEMORY[0x263EF8438], OS_LOG_TYPE_ERROR)) {
      goto LABEL_15;
    }
    uint64_t v8 = __error();
    int v9 = strerror(*v8);
    *(_DWORD *)std::string buf = 136315138;
    long long v27 = v9;
    int v10 = MEMORY[0x263EF8438];
    unint64_t v11 = "Failed to get current time after absolute time conversion failed. Error: %s\n";
    goto LABEL_32;
  }
  if (os_log_type_enabled(MEMORY[0x263EF8438], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_235DB9000, MEMORY[0x263EF8438], OS_LOG_TYPE_DEFAULT, "Failed to convert time from string format\n", buf, 2u);
  }
  unsigned long long v23 = 0uLL;
  if (gettimeofday((timeval *)&v23, 0) < 0 && os_log_type_enabled(MEMORY[0x263EF8438], OS_LOG_TYPE_ERROR))
  {
    CFTypeRef v21 = __error();
    int64_t v22 = strerror(*v21);
    *(_DWORD *)std::string buf = 136315138;
    long long v27 = v22;
    int v10 = MEMORY[0x263EF8438];
    unint64_t v11 = "Failed to get current time after conversion failure. Error: %s\n";
LABEL_32:
    _os_log_error_impl(&dword_235DB9000, v10, OS_LOG_TYPE_ERROR, v11, buf, 0xCu);
  }
LABEL_15:
  unsigned long long v12 = *v7;
  long long v13 = v7;
  if (*v7)
  {
    while (1)
    {
      while (1)
      {
        long long v13 = (uint64_t **)v12;
        int v14 = *((_DWORD *)v12 + 8);
        if (v14 <= a4) {
          break;
        }
        unsigned long long v12 = *v13;
        long long v7 = v13;
        if (!*v13) {
          goto LABEL_22;
        }
      }
      if (v14 >= a4) {
        break;
      }
      unsigned long long v12 = v13[1];
      if (!v12)
      {
        long long v7 = v13 + 1;
        goto LABEL_22;
      }
    }
    *(_OWORD *)(v13 + 5) = v23;
    if (SHIBYTE(__p[2]) < 0) {
      goto LABEL_25;
    }
  }
  else
  {
LABEL_22:
    uint64_t v15 = (char *)operator new(0x38uLL);
    *((_DWORD *)v15 + 8) = a4;
    *((void *)v15 + 5) = 0;
    *((void *)v15 + 6) = 0;
    *(void *)uint64_t v15 = 0;
    *((void *)v15 + 1) = 0;
    *((void *)v15 + 2) = v13;
    _DWORD *v7 = (uint64_t *)v15;
    char v16 = (uint64_t *)**a1;
    uint64_t v17 = (uint64_t *)v15;
    if (v16)
    {
      *a1 = v16;
      uint64_t v17 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v17);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    *(_OWORD *)(v15 + 40) = v23;
    if (SHIBYTE(__p[2]) < 0) {
LABEL_25:
    }
      operator delete(__p[0]);
  }
  return a1;
}

void sub_235E4EA34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(v24, *(void **)(v24 + 8));
  _Unwind_Resume(a1);
}

uint64_t Timestamp::get(uint64_t a1, void *a2, int a3)
{
  *a2 = 0;
  a2[1] = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v3 = a1 + 8;
  uint64_t v4 = v5;
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v3;
  do
  {
    int v7 = *(_DWORD *)(v4 + 32);
    BOOL v8 = v7 < a3;
    if (v7 >= a3) {
      int v9 = (uint64_t *)v4;
    }
    else {
      int v9 = (uint64_t *)(v4 + 8);
    }
    if (!v8) {
      uint64_t v6 = v4;
    }
    uint64_t v4 = *v9;
  }
  while (*v9);
  if (v6 == v3 || *(_DWORD *)(v6 + 32) > a3) {
    return 0;
  }
  *(_OWORD *)a2 = *(_OWORD *)(v6 + 40);
  return 1;
}

uint64_t Timestamp::now(timeval *this, timeval *a2)
{
  return gettimeofday(this, 0);
}

uint64_t Timestamp::asString@<X0>(uint64_t a1@<X0>, int a2@<W1>, char a3@<W2>, unsigned char *a4@<X8>)
{
  uint64_t v68 = *MEMORY[0x263EF8340];
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v62 = v6;
  long long v61 = v6;
  long long v60 = v6;
  long long v59 = v6;
  long long v58 = v6;
  long long v57 = v6;
  long long v56 = v6;
  long long v55 = v6;
  long long v54 = v6;
  unint64_t v52 = 0xAAAAAAAAAAAAAAAALL;
  long long v51 = v6;
  long long __p = v6;
  long long v49 = v6;
  long long v48 = v6;
  long long v47 = v6;
  long long v46 = v6;
  unint64_t v44 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v7 = MEMORY[0x263F8C328] + 104;
  uint64_t v53 = MEMORY[0x263F8C328] + 104;
  uint64_t v8 = MEMORY[0x263F8C328] + 64;
  uint64_t v45 = MEMORY[0x263F8C328] + 64;
  int v9 = (void *)MEMORY[0x263F8C2B8];
  uint64_t v10 = *(void *)(MEMORY[0x263F8C2B8] + 24);
  uint64_t v43 = *(void *)(MEMORY[0x263F8C2B8] + 16);
  *(uint64_t *)((char *)&v43 + *(void *)(v43 - 24)) = v10;
  unint64_t v44 = 0;
  unint64_t v11 = (std::ios_base *)((char *)&v43 + *(void *)(v43 - 24));
  std::ios_base::init(v11, &v46);
  uint64_t v12 = MEMORY[0x263F8C328] + 24;
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  uint64_t v13 = v9[5];
  uint64_t v45 = v9[4];
  *(uint64_t *)((char *)&v45 + *(void *)(v45 - 24)) = v13;
  uint64_t v43 = v9[1];
  *(uint64_t *)((char *)&v43 + *(void *)(v43 - 24)) = v9[6];
  uint64_t v53 = v7;
  uint64_t v43 = v12;
  uint64_t v45 = v8;
  std::streambuf::basic_streambuf();
  uint64_t v14 = MEMORY[0x263F8C318] + 16;
  *(void *)&long long v46 = MEMORY[0x263F8C318] + 16;
  long long __p = 0u;
  long long v51 = 0u;
  LODWORD(v52) = 24;
  uint64_t v17 = *(void *)(a1 + 8);
  uint64_t v16 = a1 + 8;
  uint64_t v15 = v17;
  if (!v17) {
    goto LABEL_13;
  }
  uint64_t v18 = v16;
  do
  {
    int v19 = *(_DWORD *)(v15 + 32);
    BOOL v20 = v19 < a2;
    if (v19 >= a2) {
      CFTypeRef v21 = (uint64_t *)v15;
    }
    else {
      CFTypeRef v21 = (uint64_t *)(v15 + 8);
    }
    if (!v20) {
      uint64_t v18 = v15;
    }
    uint64_t v15 = *v21;
  }
  while (*v21);
  if (v18 == v16)
  {
LABEL_13:
    time_t v24 = 0;
    int64_t v22 = a4;
    char v23 = a3;
    if ((a3 & 0x11) != 0) {
      goto LABEL_14;
    }
    goto LABEL_22;
  }
  int64_t v22 = a4;
  char v23 = a3;
  if (*(_DWORD *)(v18 + 32) <= a2)
  {
    time_t v24 = *(void *)(v18 + 40);
    if ((a3 & 0x11) != 0) {
      goto LABEL_14;
    }
LABEL_22:
    std::ostream::operator<<();
    if ((v23 & 4) != 0 || (v23 & 8) != 0)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)".", 1);
      std::ostream::operator<<();
    }
    goto LABEL_25;
  }
  time_t v24 = 0;
  if ((a3 & 0x11) == 0) {
    goto LABEL_22;
  }
LABEL_14:
  v41.tm_zone = (char *)0xAAAAAAAAAAAAAAAALL;
  time_t v42 = v24;
  *(void *)&long long v25 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v25 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v41.tm_mon = v25;
  *(_OWORD *)&v41.tm_isdst = v25;
  *(_OWORD *)&v41.tm_sec = v25;
  localtime_r(&v42, &v41);
  long long v66 = 0u;
  long long v67 = 0u;
  *(_OWORD *)__s = 0u;
  long long v65 = 0u;
  if ((v23 & 0x10) != 0) {
    long long v26 = "%Y.%m.%d_%H-%M-%S%z";
  }
  else {
    long long v26 = "%Y-%m-%d-%H-%M-%S";
  }
  strftime(__s, 0x40uLL, v26, &v41);
  size_t v27 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)__s, v27);
  if ((v23 & 8) != 0)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v45, (uint64_t)"-", 1);
    uint64_t v28 = v45;
    long long v29 = (char *)&v45 + *(void *)(v45 - 24);
    if (*((_DWORD *)v29 + 36) == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)&v45 + *(void *)(v45 - 24)));
      unsigned int v30 = std::locale::use_facet(&v63, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 32);
      std::locale::~locale(&v63);
      uint64_t v28 = v45;
    }
    *((_DWORD *)v29 + 36) = 48;
    *(void *)((char *)&v47 + *(void *)(v28 - 24)) = 3;
    std::ostream::operator<<();
  }
LABEL_25:
  if ((v52 & 0x10) != 0)
  {
    uint64_t v32 = *((void *)&v51 + 1);
    if (*((void *)&v51 + 1) < (unint64_t)v49)
    {
      *((void *)&v51 + 1) = v49;
      uint64_t v32 = v49;
    }
    xpc_object_t v33 = (const void *)*((void *)&v48 + 1);
    size_t v31 = v32 - *((void *)&v48 + 1);
    if ((unint64_t)(v32 - *((void *)&v48 + 1)) >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_42;
    }
  }
  else
  {
    if ((v52 & 8) == 0)
    {
      size_t v31 = 0;
      v22[23] = 0;
      goto LABEL_38;
    }
    xpc_object_t v33 = (const void *)v47;
    size_t v31 = v48 - v47;
    if ((void)v48 - (void)v47 >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_42:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v31 >= 0x17)
  {
    uint64_t v34 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v31 | 7) != 0x17) {
      uint64_t v34 = v31 | 7;
    }
    uint64_t v35 = v34 + 1;
    xpc_object_t v36 = operator new(v34 + 1);
    *((void *)v22 + 1) = v31;
    *((void *)v22 + 2) = v35 | 0x8000000000000000;
    *(void *)int64_t v22 = v36;
    int64_t v22 = v36;
    goto LABEL_37;
  }
  v22[23] = v31;
  if (v31) {
LABEL_37:
  }
    memmove(v22, v33, v31);
LABEL_38:
  v22[v31] = 0;
  uint64_t v43 = *MEMORY[0x263F8C2B8];
  uint64_t v37 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(uint64_t *)((char *)&v43 + *(void *)(v43 - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  uint64_t v45 = v37;
  *(void *)&long long v46 = v14;
  if (SBYTE7(v51) < 0) {
    operator delete((void *)__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x237DF7120](&v53);
}

void sub_235E4F1F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_235E4F20C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  std::locale::~locale((std::locale *)(v13 - 184));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_235E4F228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_235E4F23C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2B8];
  uint64_t v3 = *MEMORY[0x263F8C2B8];
  *(void *)a1 = *MEMORY[0x263F8C2B8];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x237DF7120](a1 + 128);
  return a1;
}

uint64_t *Timestamp::convert(uint64_t a1)
{
  memset(v11, 170, sizeof(v11));
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __p = *(std::string *)a1;
  }
  Timestamp::Timestamp(v11, (char *)&__p, 9, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    uint64_t v1 = v11[1];
    if (!v11[1])
    {
LABEL_18:
      uint64_t v8 = 0;
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v1 = v11[1];
    if (!v11[1]) {
      goto LABEL_18;
    }
  }
  uint64_t v2 = &v11[1];
  uint64_t v3 = v1;
  do
  {
    uint64_t v4 = (uint64_t **)v3;
    uint64_t v5 = v2;
    int v6 = *((_DWORD *)v3 + 8);
    if (v6 >= 0) {
      uint64_t v2 = (uint64_t **)v3;
    }
    else {
      ++v3;
    }
    uint64_t v3 = (uint64_t *)*v3;
  }
  while (v3);
  if (v2 == &v11[1]) {
    goto LABEL_18;
  }
  uint64_t v7 = v6 >= 0 ? v4 : v5;
  if (*((int *)v7 + 8) > 0) {
    goto LABEL_18;
  }
  if (v6 < 0) {
    uint64_t v4 = v5;
  }
  uint64_t v8 = v4[5];
LABEL_19:
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)v11, v1);
  return v8;
}

void sub_235E4F4D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::map<Timestamp::TimeDomain,timeval>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<Timestamp::TimeDomain,timeval>,std::__tree_node<std::__value_type<Timestamp::TimeDomain,timeval>,void *> *,long>>>(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = result;
    int v6 = result + 1;
    do
    {
      int v7 = *((_DWORD *)v4 + 8);
      uint64_t v8 = (uint64_t *)v5[1];
      int v9 = v6;
      if ((uint64_t *)*v5 == v6) {
        goto LABEL_10;
      }
      uint64_t v10 = v5[1];
      unint64_t v11 = v6;
      if (v8)
      {
        do
        {
          int v9 = (uint64_t *)v10;
          uint64_t v10 = *(void *)(v10 + 8);
        }
        while (v10);
      }
      else
      {
        do
        {
          int v9 = (uint64_t *)v11[2];
          BOOL v12 = *v9 == (void)v11;
          unint64_t v11 = v9;
        }
        while (v12);
      }
      if (*((_DWORD *)v9 + 8) < v7)
      {
LABEL_10:
        if (v8) {
          uint64_t v13 = (uint64_t **)v9;
        }
        else {
          uint64_t v13 = (uint64_t **)v6;
        }
        if (v8) {
          uint64_t v14 = (uint64_t **)(v9 + 1);
        }
        else {
          uint64_t v14 = (uint64_t **)v6;
        }
        if (*v14) {
          goto LABEL_29;
        }
      }
      else
      {
        uint64_t v14 = (uint64_t **)v6;
        uint64_t v13 = (uint64_t **)v6;
        if (v8)
        {
          while (1)
          {
            while (1)
            {
              uint64_t v13 = (uint64_t **)v8;
              int v15 = *((_DWORD *)v8 + 8);
              if (v15 <= v7) {
                break;
              }
              uint64_t v8 = *v13;
              uint64_t v14 = v13;
              if (!*v13) {
                goto LABEL_25;
              }
            }
            if (v15 >= v7) {
              goto LABEL_29;
            }
            uint64_t v8 = v13[1];
            if (!v8)
            {
              uint64_t v14 = v13 + 1;
              break;
            }
          }
        }
      }
LABEL_25:
      uint64_t v16 = operator new(0x38uLL);
      uint64_t v17 = v4[6];
      v16[2] = *((_OWORD *)v4 + 2);
      *((void *)v16 + 6) = v17;
      *(void *)uint64_t v16 = 0;
      *((void *)v16 + 1) = 0;
      *((void *)v16 + 2) = v13;
      char *v14 = (uint64_t *)v16;
      uint64_t v18 = *(void *)*v5;
      if (v18)
      {
        uint64_t *v5 = v18;
        int v19 = *v14;
      }
      else
      {
        int v19 = (uint64_t *)v16;
      }
      __n128 result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v5[1], v19);
      ++v5[2];
LABEL_29:
      BOOL v20 = (void *)v4[1];
      if (v20)
      {
        do
        {
          CFTypeRef v21 = v20;
          BOOL v20 = (void *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          CFTypeRef v21 = (void *)v4[2];
          BOOL v12 = *v21 == (void)v4;
          uint64_t v4 = v21;
        }
        while (!v12);
      }
      uint64_t v4 = v21;
    }
    while (v21 != a3);
  }
  return result;
}

void ServerLogging::~ServerLogging(ServerLogging *this)
{
  uint64_t v2 = *((void *)this + 9);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*((dispatch_object_t *)this + 9));
    *((void *)this + 9) = 0;
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if ((*((char *)this + 71) & 0x80000000) == 0)
    {
LABEL_6:
      if ((*((char *)this + 47) & 0x80000000) == 0) {
        goto LABEL_7;
      }
      goto LABEL_12;
    }
  }
  else if ((*((char *)this + 71) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*((void **)this + 6));
  if ((*((char *)this + 47) & 0x80000000) == 0)
  {
LABEL_7:
    uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 1);
    if (!v4) {
      return;
    }
    goto LABEL_8;
  }
LABEL_12:
  operator delete(*((void **)this + 3));
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 1);
  if (!v4) {
    return;
  }
LABEL_8:
  std::__shared_weak_count::__release_weak(v4);
}

uint64_t ___ZN13ServerLogging4initEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(ServerLogging **)(a1 + 32);
  *((void *)v1 + 9) = ServerLogging::monitorSnapshotPath_sync(v1);
  uint64_t v2 = abm::trace::kTrashFolder;
  size_t v3 = strlen(abm::trace::kTrashFolder);
  if (v3 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v4 = (void *)v3;
  if (v3 >= 0x17)
  {
    uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v6 = v3 | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v5 = (void **)operator new(v6 + 1);
    __dst[1] = v4;
    unint64_t v12 = v7 | 0x8000000000000000;
    __dst[0] = v5;
    goto LABEL_8;
  }
  HIBYTE(v12) = v3;
  uint64_t v5 = __dst;
  if (v3) {
LABEL_8:
  }
    memmove(v5, v2, (size_t)v4);
  *((unsigned char *)v4 + (void)v5) = 0;
  support::fs::createDir((const char *)__dst, 0x1EDu, 1);
  if (SHIBYTE(v12) < 0) {
    operator delete(__dst[0]);
  }
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_async(global_queue, &__block_literal_global);
  capabilities::abs::logScratchPath((uint64_t *)__dst, v9);
  support::fs::createDir((const char *)__dst, 0x1EDu, 1);
  if (SHIBYTE(v12) < 0)
  {
    operator delete(__dst[0]);
    uint64_t result = *((void *)v1 + 10);
    if (!result) {
      return result;
    }
  }
  else
  {
    uint64_t result = *((void *)v1 + 10);
    if (!result) {
      return result;
    }
  }

  return MEMORY[0x270F97710]();
}

void sub_235E4F8BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

NSObject *ServerLogging::monitorSnapshotPath_sync(ServerLogging *this)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  size_t v3 = (char *)this + 48;
  uint64_t v2 = (const char *)*((void *)this + 6);
  v4.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v4.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v19.st_blkstd::string::size_type size = v4;
  *(timespec *)v19.st_qspare = v4;
  v19.st_birthtimespec = v4;
  *(timespec *)&v19.st_std::string::size_type size = v4;
  v19.st_mtimespec = v4;
  v19.st_ctimespec = v4;
  *(timespec *)&v19.st_uid = v4;
  v19.st_atimespec = v4;
  *(timespec *)&v19.st_dev = v4;
  if (*((char *)this + 71) >= 0) {
    uint64_t v5 = (char *)this + 48;
  }
  else {
    uint64_t v5 = v2;
  }
  if (stat(v5, &v19))
  {
    uint64_t v6 = GetOsLogContext()[1];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = v3;
      if (*((char *)this + 71) < 0) {
        uint64_t v7 = *(const char **)v3;
      }
      v19.st_dev = 136315138;
      *(void *)&v19.st_mode = v7;
      _os_log_impl(&dword_235DB9000, v6, OS_LOG_TYPE_DEFAULT, "Snapshot path [%s] was not found, so recreating it\n", (uint8_t *)&v19, 0xCu);
    }
    support::fs::createDir(v3, 0x1EDu, 1);
  }
  if ((*((char *)this + 71) & 0x80000000) == 0)
  {
    unsigned int v8 = open(v3, 0x8000);
    if ((v8 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    return 0;
  }
  unsigned int v8 = open(*(const char **)v3, 0x8000);
  if ((v8 & 0x80000000) != 0) {
    return 0;
  }
LABEL_12:
  int v9 = v8;
  uintptr_t v10 = v8;
  global_queue = dispatch_get_global_queue(17, 0);
  unint64_t v12 = dispatch_source_create(MEMORY[0x263EF8410], v10, 0x21uLL, global_queue);
  uint64_t v13 = v12;
  if (v12)
  {
    handler[0] = MEMORY[0x263EF8330];
    handler[1] = 0x40000000;
    handler[2] = ___ZN13ServerLogging24monitorSnapshotPath_syncEv_block_invoke;
    handler[3] = &__block_descriptor_tmp_7_0;
    handler[4] = this;
    int v18 = v9;
    dispatch_source_set_event_handler(v12, handler);
    v15[0] = MEMORY[0x263EF8330];
    v15[1] = 0x40000000;
    v15[2] = ___ZN13ServerLogging24monitorSnapshotPath_syncEv_block_invoke_8;
    v15[3] = &__block_descriptor_tmp_9_1;
    int v16 = v9;
    dispatch_source_set_cancel_handler(v13, v15);
    dispatch_activate(v13);
  }
  else
  {
    close(v9);
  }
  return v13;
}

void ServerLogging::registerLogServer(os_unfair_lock_s *a1, uint64_t a2, std::__shared_weak_count *a3)
{
  v5[0] = MEMORY[0x263EF8330];
  v5[1] = 1174405120;
  uint64_t v6 = ___ZN13ServerLogging17registerLogServerENSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  uint64_t v7 = &__block_descriptor_tmp_3_1;
  unsigned int v8 = a1;
  uint64_t v9 = a2;
  uintptr_t v10 = a3;
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  size_t v3 = a1 + 4;
  os_unfair_lock_lock(a1 + 4);
  v6(v5);
  os_unfair_lock_unlock(v3);
  timespec v4 = v10;
  if (v10)
  {
    if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t ___ZN13ServerLogging17registerLogServerENSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke(void *a1)
{
  uint64_t v3 = a1[4];
  uint64_t result = a1[5];
  uint64_t v4 = a1[6];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v3 + 88);
  *(void *)(v3 + 80) = result;
  *(void *)(v3 + 88) = v4;
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t result = *(void *)(v3 + 80);
  }
  if (result)
  {
    return MEMORY[0x270F97710]();
  }
  return result;
}

uint64_t __copy_helper_block_e8_40c42_ZTSNSt3__110shared_ptrIN3ctu9LogServerEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c42_ZTSNSt3__110shared_ptrIN3ctu9LogServerEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN13ServerLogging24clearScratchFolders_syncEv_block_invoke()
{
  uint64_t v0 = abm::trace::kTrashFolder;
  size_t v1 = strlen(abm::trace::kTrashFolder);
  if (v1 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v2 = (void *)v1;
  if (v1 >= 0x17)
  {
    uint64_t v4 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v1 | 7) != 0x17) {
      uint64_t v4 = v1 | 7;
    }
    uint64_t v5 = v4 + 1;
    uint64_t v3 = (void **)operator new(v4 + 1);
    __dst[1] = v2;
    unint64_t v7 = v5 | 0x8000000000000000;
    __dst[0] = v3;
    goto LABEL_8;
  }
  HIBYTE(v7) = v1;
  uint64_t v3 = __dst;
  if (v1) {
LABEL_8:
  }
    memmove(v3, v0, (size_t)v2);
  *((unsigned char *)v2 + (void)v3) = 0;
  support::fs::removeDirContents((const char *)__dst, 0);
  if (SHIBYTE(v7) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_235E4FE64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN13ServerLogging24monitorSnapshotPath_syncEv_block_invoke(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = GetOsLogContext()[1];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = (void *)(v2 + 48);
    if (*(char *)(v2 + 71) < 0) {
      uint64_t v4 = (void *)*v4;
    }
    int v6 = 136315138;
    unint64_t v7 = v4;
    _os_log_impl(&dword_235DB9000, v3, OS_LOG_TYPE_DEFAULT, "Snapshot path [%s] was removed\n", (uint8_t *)&v6, 0xCu);
  }
  dispatch_release(*(dispatch_object_t *)(v2 + 72));
  *(void *)(v2 + 72) = 0;
  close(*(_DWORD *)(a1 + 40));
  uint64_t result = ServerLogging::monitorSnapshotPath_sync((ServerLogging *)v2);
  *(void *)(v2 + 72) = result;
  return result;
}

uint64_t ___ZN13ServerLogging24monitorSnapshotPath_syncEv_block_invoke_8(uint64_t a1)
{
  return close(*(_DWORD *)(a1 + 32));
}

void GetABMLogServer(void *a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_9, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&_MergedGlobals_9))
    {
      __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &qword_26AB827A0, &dword_235DB9000);
      __cxa_guard_release(&_MergedGlobals_9);
    }
  }
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_14_0;
  void block[4] = &qword_26AB827A0;
  if (qword_26AB82798 == -1)
  {
    uint64_t v2 = *(void *)algn_26AB827A8;
    *a1 = qword_26AB827A0;
    a1[1] = v2;
    if (!v2) {
      return;
    }
    goto LABEL_4;
  }
  dispatch_once(&qword_26AB82798, block);
  uint64_t v2 = *(void *)algn_26AB827A8;
  *a1 = qword_26AB827A0;
  a1[1] = v2;
  if (v2) {
LABEL_4:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
}

uint64_t ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

uint64_t ctu::PthreadMutexGuardPolicy<ServerLogging>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke(uint64_t a1)
{
  *(void *)&__p.st_dev = operator new(0x20uLL);
  *(_OWORD *)&__p.st_ino = xmmword_235E76350;
  strcpy(*(char **)&__p.st_dev, "AppleBasebandManagerServerLog");
  ctu::LogServer::create();
  uint64_t v2 = *(void *)(a1 + 32);
  long long v3 = *(_OWORD *)&v64.__r_.__value_.__l.__data_;
  *(_OWORD *)&v64.__r_.__value_.__l.__data_ = 0uLL;
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
  *(_OWORD *)uint64_t v2 = v3;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    std::string::size_type size = (std::__shared_weak_count *)v64.__r_.__value_.__l.__size_;
    if (!v64.__r_.__value_.__l.__size_)
    {
LABEL_5:
      if ((SHIBYTE(__p.st_gid) & 0x80000000) == 0) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }
  else
  {
    std::string::size_type size = (std::__shared_weak_count *)v64.__r_.__value_.__l.__size_;
    if (!v64.__r_.__value_.__l.__size_) {
      goto LABEL_5;
    }
  }
  if (atomic_fetch_add(&size->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_5;
  }
  ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
  std::__shared_weak_count::__release_weak(size);
  if (SHIBYTE(__p.st_gid) < 0) {
LABEL_6:
  }
    operator delete(*(void **)&__p.st_dev);
LABEL_7:
  ctu::LogServer::start(**(ctu::LogServer ***)(a1 + 32));
  int v6 = (capabilities::abs *)pthread_mutex_lock(&stru_26AB82670);
  unint64_t v7 = (os_unfair_lock_s *)qword_26AB826B0;
  uint64_t v8 = (void *)&unk_235E70000;
  if (qword_26AB826B0) {
    goto LABEL_91;
  }
  capabilities::abs::logScratchPath((uint64_t *)&__p.st_dev, v6);
  uint64_t v9 = std::string::append((std::string *)&__p, "/abm.scratch", 0xCuLL);
  uintptr_t v10 = (const std::string::value_type *)v9->__r_.__value_.__r.__words[0];
  std::string::size_type v11 = v9->__r_.__value_.__l.__size_;
  v56[0] = v9->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v56 + 3) = *(_DWORD *)((char *)&v9->__r_.__value_.__r.__words[2] + 3);
  int v12 = SHIBYTE(v9->__r_.__value_.__r.__words[2]);
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.st_gid) < 0) {
    operator delete(*(void **)&__p.st_dev);
  }
  memset(&v55, 170, sizeof(v55));
  unint64_t v52 = (std::string::value_type *)v10;
  capabilities::abs::logSnapshotPath((uint64_t *)&v55, (capabilities::abs *)v9);
  uint64_t v13 = (char *)operator new(0x60uLL);
  __darwin_time_t v14 = (__darwin_time_t)v13;
  *(void *)uint64_t v13 = 0;
  *((void *)v13 + 1) = 0;
  *((_DWORD *)v13 + 4) = 0;
  if (v12 < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v13 + 1, v10, v11);
  }
  else
  {
    *((void *)v13 + 3) = v10;
    *((void *)v13 + 4) = v11;
    *((_DWORD *)v13 + 10) = v56[0];
    *(_DWORD *)(v13 + 43) = *(_DWORD *)((char *)v56 + 3);
    v13[47] = v12;
  }
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)(v14 + 48), v55.__r_.__value_.__l.__data_, v55.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)(v14 + 48) = v55;
  }
  *(void *)(v14 + 80) = 0;
  *(void *)(v14 + 88) = 0;
  pthread_mutex_lock(&_MergedGlobals);
  int v15 = off_26AB82660;
  if (!off_26AB82660)
  {
    int v16 = (std::__fs::filesystem::path *)operator new(0x60uLL);
    strcpy((char *)v16, "/private/var/wireless/Library/Preferences/com.apple.AppleBasebandManager.Statistics.plist");
    v17.tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v17.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    *(timespec *)&__p.st_blkstd::string::size_type size = v17;
    *(timespec *)__p.st_qspare = v17;
    __p.st_birthtimespec = v17;
    *(timespec *)&__p.st_std::string::size_type size = v17;
    __p.st_mtimespec = v17;
    __p.st_ctimespec = v17;
    *(timespec *)&__p.st_uid = v17;
    __p.st_atimespec = v17;
    *(timespec *)&__p.st_dev = v17;
    if (!stat((const char *)v16, &__p) && remove(v16, v18)) {
      unlink((const char *)v16);
    }
    stat v19 = operator new(0x30uLL);
    MEMORY[0x237DF4EF0](v19, @"com.apple.AppleBasebandManager.data", *MEMORY[0x263EFFE70]);
    v19[3] = 0;
    _OWORD v19[4] = 0;
    *((_DWORD *)v19 + 10) = 0;
    *(void *)&__p.st_dev = v19;
    uint64_t v20 = (atomic_ullong *)operator new(0x20uLL);
    CFTypeRef v21 = (std::__shared_weak_count *)v20;
    int v22 = v12;
    v20[2] = 0;
    v20[1] = 0;
    *uint64_t v20 = (atomic_ullong)&unk_26E9410E8;
    v20[3] = (atomic_ullong)v19;
    *(void *)&__p.st_dev = 0;
    atomic_fetch_add_explicit(v20 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(v20 + 2, 1uLL, memory_order_relaxed);
    v19[3] = v19;
    _OWORD v19[4] = v20;
    if (!atomic_fetch_add(v20 + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      (*(void (**)(atomic_ullong *))(*v20 + 16))(v20);
      std::__shared_weak_count::__release_weak(v21);
    }
    uint64_t v23 = *(void *)&__p.st_dev;
    if (*(void *)&__p.st_dev)
    {
      time_t v24 = *(std::__shared_weak_count **)(*(void *)&__p.st_dev + 32);
      if (v24) {
        std::__shared_weak_count::__release_weak(v24);
      }
      long long v25 = (void *)MEMORY[0x237DF4F00](v23);
      operator delete(v25);
    }
    operator delete(v16);
    long long v26 = (std::__shared_weak_count *)off_26AB82668;
    off_26AB82660 = v19;
    off_26AB82668 = v21;
    if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
    int v15 = off_26AB82660;
    int v12 = v22;
  }
  long long v60 = v15;
  long long v61 = (std::__shared_weak_count *)off_26AB82668;
  if (off_26AB82668) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)off_26AB82668 + 1, 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&_MergedGlobals);
  size_t v27 = abm::trace::kCurrentSnapshotFolder;
  size_t v28 = strlen(abm::trace::kCurrentSnapshotFolder);
  if (v28 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  long long v29 = (void *)v28;
  if (v28 >= 0x17)
  {
    int v31 = v12;
    uint64_t v32 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17) {
      uint64_t v32 = v28 | 7;
    }
    uint64_t v33 = v32 + 1;
    unsigned int v30 = (void **)operator new(v32 + 1);
    __dst[1] = v29;
    int64_t v59 = v33 | 0x8000000000000000;
    __dst[0] = v30;
    int v12 = v31;
LABEL_44:
    memmove(v30, v27, (size_t)v29);
    *((unsigned char *)v29 + (void)v30) = 0;
    if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_45;
  }
  HIBYTE(v59) = v28;
  unsigned int v30 = __dst;
  if (v28) {
    goto LABEL_44;
  }
  LOBYTE(__dst[0]) = 0;
  if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_40:
    std::string v57 = v55;
    goto LABEL_46;
  }
LABEL_45:
  std::string::__init_copy_ctor_external(&v57, v55.__r_.__value_.__l.__data_, v55.__r_.__value_.__l.__size_);
LABEL_46:
  os_unfair_lock_lock((os_unfair_lock_t)v15 + 10);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v63, v57.__r_.__value_.__l.__data_, v57.__r_.__value_.__l.__size_);
  }
  else {
    std::string v63 = v57;
  }
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v64, v63.__r_.__value_.__l.__data_, v63.__r_.__value_.__l.__size_);
  }
  else {
    std::string v64 = v63;
  }
  if (v59 >= 0) {
    uint64_t v34 = (const char *)__dst;
  }
  else {
    uint64_t v34 = (const char *)__dst[0];
  }
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&__p, v64.__r_.__value_.__l.__data_, v64.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&__p.st_dev = *(_OWORD *)&v64.__r_.__value_.__l.__data_;
    *(void *)&__p.st_uid = *((void *)&v64.__r_.__value_.__l + 2);
  }
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v65, v34);
  CFStringRef v35 = (const __CFString *)v65[0];
  CFPropertyListRef v66 = 0;
  ctu::cf::convert_copy();
  CFPropertyListRef v36 = v66;
  v65[1] = v66;
  if (v66)
  {
    CFStringRef v37 = (const __CFString *)*MEMORY[0x263EFFE68];
    CFPreferencesSetValue(v35, v66, *((CFStringRef *)v15 + 1), *((CFStringRef *)v15 + 2), (CFStringRef)*MEMORY[0x263EFFE68]);
    CFPreferencesSynchronize(*((CFStringRef *)v15 + 1), *((CFStringRef *)v15 + 2), v37);
    CFRelease(v36);
  }
  MEMORY[0x237DF4EA0](v65);
  if (SHIBYTE(__p.st_gid) < 0)
  {
    operator delete(*(void **)&__p.st_dev);
    uint64_t v8 = &unk_235E70000;
    if ((SHIBYTE(v64.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_62:
      if ((SHIBYTE(v63.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_63;
      }
      goto LABEL_69;
    }
  }
  else
  {
    uint64_t v8 = (void *)&unk_235E70000;
    if ((SHIBYTE(v64.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_62;
    }
  }
  operator delete(v64.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v63.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_63:
    os_unfair_lock_unlock((os_unfair_lock_t)v15 + 10);
    if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_64;
    }
    goto LABEL_70;
  }
LABEL_69:
  operator delete(v63.__r_.__value_.__l.__data_);
  os_unfair_lock_unlock((os_unfair_lock_t)v15 + 10);
  if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_64:
    if ((SHIBYTE(v59) & 0x80000000) == 0) {
      goto LABEL_65;
    }
    goto LABEL_71;
  }
LABEL_70:
  operator delete(v57.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v59) & 0x80000000) == 0)
  {
LABEL_65:
    long long v38 = v61;
    if (!v61) {
      goto LABEL_74;
    }
    goto LABEL_72;
  }
LABEL_71:
  operator delete(__dst[0]);
  long long v38 = v61;
  if (!v61) {
    goto LABEL_74;
  }
LABEL_72:
  if (!atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
LABEL_74:
  *(void *)&__p.st_dev = v14;
  long long v39 = (std::__shared_weak_count *)operator new(0x20uLL);
  v39->__shared_owners_ = 0;
  p_shared_owners = &v39->__shared_owners_;
  v39->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E941098;
  v39->__shared_weak_owners_ = 0;
  v39[1].__vftable = (std::__shared_weak_count_vtbl *)v14;
  *(void *)&__p.st_dev = 0;
  tm v41 = *(std::__shared_weak_count **)(v14 + 8);
  if (!v41)
  {
    atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v39->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)__darwin_time_t v14 = v14;
    *(void *)(v14 + 8) = v39;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_80;
    }
    goto LABEL_79;
  }
  if (v41->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v39->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)__darwin_time_t v14 = v14;
    *(void *)(v14 + 8) = v39;
    std::__shared_weak_count::__release_weak(v41);
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_79:
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
LABEL_80:
  if (*(void *)&__p.st_dev)
  {
    ServerLogging::~ServerLogging(*(ServerLogging **)&__p.st_dev);
    operator delete(v42);
  }
  *(void *)&__p.st_dev = MEMORY[0x263EF8330];
  __p.st_ino = v8[354];
  *(void *)&__p.st_uid = ___ZN13ServerLogging4initEv_block_invoke;
  *(void *)&__p.st_rdev = &__block_descriptor_tmp_8;
  __p.st_atimespec.tv_sec = v14;
  os_unfair_lock_lock((os_unfair_lock_t)(v14 + 16));
  (*(void (**)(stat *))&__p.st_uid)(&__p);
  os_unfair_lock_unlock((os_unfair_lock_t)(v14 + 16));
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v55.__r_.__value_.__l.__data_);
    if ((v12 & 0x80000000) == 0)
    {
LABEL_84:
      uint64_t v43 = (std::__shared_weak_count *)off_26AB826B8;
      qword_26AB826B0 = v14;
      off_26AB826B8 = v39;
      if (!v43) {
        goto LABEL_90;
      }
LABEL_88:
      if (!atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
      goto LABEL_90;
    }
  }
  else if ((v12 & 0x80000000) == 0)
  {
    goto LABEL_84;
  }
  operator delete(v52);
  uint64_t v43 = (std::__shared_weak_count *)off_26AB826B8;
  qword_26AB826B0 = v14;
  off_26AB826B8 = v39;
  if (v43) {
    goto LABEL_88;
  }
LABEL_90:
  unint64_t v7 = (os_unfair_lock_s *)qword_26AB826B0;
LABEL_91:
  unint64_t v44 = (std::__shared_weak_count *)off_26AB826B8;
  if (off_26AB826B8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)off_26AB826B8 + 1, 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&stru_26AB82670);
  uint64_t v45 = *(uint64_t **)(a1 + 32);
  uint64_t v46 = *v45;
  long long v47 = (std::__shared_weak_count *)v45[1];
  if (v47)
  {
    atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
    ServerLogging::registerLogServer(v7, v46, v47);
    if (!atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  else
  {
    ServerLogging::registerLogServer(v7, v46, 0);
  }
  if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
  }
  long long v48 = *(uint64_t **)(a1 + 32);
  uint64_t v50 = *v48;
  long long v49 = (std::__shared_weak_count *)v48[1];
  uint64_t v53 = v50;
  long long v54 = v49;
  if (v49) {
    atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)&__p.st_dev = MEMORY[0x263EF8330];
  __p.st_ino = v8[354];
  *(void *)&__p.st_uid = ___ZN3abm5debugL14sLogServerInitERNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  *(void *)&__p.st_rdev = &__block_descriptor_tmp_3;
  __p.st_atimespec.tv_sec = (__darwin_time_t)&v53;
  if (abm::debug::sLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    long long v51 = v54;
    if (!v54) {
      return;
    }
  }
  else
  {
    dispatch_once(&abm::debug::sLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &__p);
    long long v51 = v54;
    if (!v54) {
      return;
    }
  }
  if (!atomic_fetch_add(&v51->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
    std::__shared_weak_count::__release_weak(v51);
  }
}

void sub_235E50CCC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (*(char *)(v36 - 121) < 0)
  {
    operator delete(*(void **)(v36 - 144));
    if (*(char *)(v36 - 153) < 0)
    {
LABEL_3:
      operator delete(*(void **)(v36 - 176));
      __clang_call_terminate(a1);
    }
  }
  else if (*(char *)(v36 - 153) < 0)
  {
    goto LABEL_3;
  }
  __clang_call_terminate(a1);
}

void sub_235E50EF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

ServerLogging **std::unique_ptr<ServerLogging>::~unique_ptr[abi:ne180100](ServerLogging **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    ServerLogging::~ServerLogging(v2);
    operator delete(v3);
  }
  return a1;
}

void std::__shared_ptr_pointer<ServerLogging *,std::shared_ptr<ServerLogging>::__shared_ptr_default_delete<ServerLogging,ServerLogging>,std::allocator<ServerLogging>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<ServerLogging *,std::shared_ptr<ServerLogging>::__shared_ptr_default_delete<ServerLogging,ServerLogging>,std::allocator<ServerLogging>>::__on_zero_shared(uint64_t a1)
{
  size_t v1 = *(ServerLogging **)(a1 + 24);
  if (v1)
  {
    ServerLogging::~ServerLogging(v1);
    operator delete(v2);
  }
}

uint64_t std::__shared_ptr_pointer<ServerLogging *,std::shared_ptr<ServerLogging>::__shared_ptr_default_delete<ServerLogging,ServerLogging>,std::allocator<ServerLogging>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrI13ServerLoggingE27__shared_ptr_default_deleteIS1_S1_EE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__110shared_ptrI13ServerLoggingE27__shared_ptr_default_deleteIS1_S1_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrI13ServerLoggingE27__shared_ptr_default_deleteIS1_S1_EE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrI13ServerLoggingE27__shared_ptr_default_deleteIS1_S1_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t *std::unique_ptr<SharedData>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    unint64_t v3 = *(std::__shared_weak_count **)(v2 + 32);
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    uint64_t v4 = (void *)MEMORY[0x237DF4F00](v2);
    operator delete(v4);
  }
  return a1;
}

void std::__shared_ptr_pointer<SharedData *,std::shared_ptr<SharedData>::__shared_ptr_default_delete<SharedData,SharedData>,std::allocator<SharedData>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<SharedData *,std::shared_ptr<SharedData>::__shared_ptr_default_delete<SharedData,SharedData>,std::allocator<SharedData>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 32);
    if (v2) {
      std::__shared_weak_count::__release_weak(v2);
    }
    unint64_t v3 = (void *)MEMORY[0x237DF4F00](v1);
    operator delete(v3);
  }
}

uint64_t std::__shared_ptr_pointer<SharedData *,std::shared_ptr<SharedData>::__shared_ptr_default_delete<SharedData,SharedData>,std::allocator<SharedData>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrI10SharedDataE27__shared_ptr_default_deleteIS1_S1_EE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__110shared_ptrI10SharedDataE27__shared_ptr_default_deleteIS1_S1_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrI10SharedDataE27__shared_ptr_default_deleteIS1_S1_EE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrI10SharedDataE27__shared_ptr_default_deleteIS1_S1_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t __cxx_global_var_init()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy, &_MergedGlobals, &dword_235DB9000);
  }
  return result;
}

uint64_t __cxx_global_var_init_10()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ServerLogging>::~PthreadMutexGuardPolicy, &stru_26AB82670, &dword_235DB9000);
  }
  return result;
}

double trace::ARICommandDriverINT::create@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4 = operator new(0x118uLL);
  uint64_t v5 = v4;
  uint64_t v6 = a1[1];
  uint64_t v12 = *a1;
  uint64_t v13 = (std::__shared_weak_count *)v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  trace::ARICommandDriverINT::ARICommandDriverINT((uint64_t)v4, &v12);
  *(void *)&long long v14 = v5;
  unint64_t v7 = (std::__shared_weak_count *)operator new(0x20uLL);
  v7->__shared_owners_ = 0;
  p_shared_owners = &v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E941298;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
  *((void *)&v14 + 1) = v7;
  uint64_t v9 = (std::__shared_weak_count *)*((void *)v5 + 10);
  if (v9)
  {
    if (v9->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *((void *)v5 + 9) = v5;
      *((void *)v5 + 10) = v7;
      std::__shared_weak_count::__release_weak(v9);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)v5 + 9) = v5;
    *((void *)v5 + 10) = v7;
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_8:
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  ctu::Loggable<trace::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(v14);
  uintptr_t v10 = v13;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  (*(void (**)(void))(*(void *)v14 + 208))(v14);
  double result = *(double *)&v14;
  *a2 = v14;
  return result;
}

void sub_235E51388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_235E5139C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_235E513B8(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<trace::ARICommandDriverINT> ctu::SharedSynchronizable<trace::CommandDriver>::make_shared_ptr<trace::ARICommandDriverINT>(trace::ARICommandDriverINT*)::{lambda(trace::ARICommandDriverINT*)#1}::operator() const(trace::ARICommandDriverINT*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_235E513E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_235E513FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

uint64_t trace::ARICommandDriverINT::ARICommandDriverINT(uint64_t a1, uint64_t *a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v8 = *a2;
  uint64_t v9 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  trace::CommandDriver::CommandDriver((void *)a1, &v8);
  uint64_t v4 = v9;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  *(void *)a1 = &unk_26E941138;
  uint64_t v5 = *(NSObject **)(a1 + 88);
  xpc_object_t object = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  ice::Client::create();
  if (object) {
    dispatch_release(object);
  }
  *(unsigned char *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 850045863;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 1018212795;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 225) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  return a1;
}

void sub_235E51548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  trace::CommandDriver::~CommandDriver(v10);
  _Unwind_Resume(a1);
}

void sub_235E51568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void trace::ARICommandDriverINT::~ARICommandDriverINT(trace::ARICommandDriverINT *this)
{
  *(void *)this = &unk_26E941138;
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string::size_type v11 = 0;
    _os_log_impl(&dword_235DB9000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v11, 2u);
  }
  unint64_t v3 = *((void *)this + 34);
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (const void *)*((void *)this + 33);
  if (v4) {
    _Block_release(v4);
  }
  uint64_t v5 = *((void *)this + 32);
  if (v5) {
    dispatch_release(v5);
  }
  uint64_t v6 = (const void *)*((void *)this + 31);
  if (v6) {
    _Block_release(v6);
  }
  std::condition_variable::~condition_variable((std::condition_variable *)this + 4);
  std::mutex::~mutex((std::mutex *)this + 2);
  unint64_t v7 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  *(void *)this = &unk_26E93C090;
  MEMORY[0x237DF4D50]((char *)this + 8);
  uint64_t v8 = *((void *)this + 12);
  if (v8) {
    dispatch_release(v8);
  }
  uint64_t v9 = *((void *)this + 11);
  if (v9) {
    dispatch_release(v9);
  }
  uintptr_t v10 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
}

{
  void *v1;
  uint64_t vars8;

  trace::ARICommandDriverINT::~ARICommandDriverINT(this);

  operator delete(v1);
}

void trace::ARICommandDriverINT::init(trace::ARICommandDriverINT *this)
{
  v1[0] = MEMORY[0x263EF8330];
  v1[1] = 0x40000000;
  v1[2] = ___ZN5trace19ARICommandDriverINT4initEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_9_2;
  v1[4] = this;
  ctu::SharedSynchronizable<trace::CommandDriver>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v1);
}

uint64_t ___ZN5trace19ARICommandDriverINT4initEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_235DB9000, v2, OS_LOG_TYPE_DEFAULT, "#I Initializing", buf, 2u);
  }
  uint64_t v3 = *(void *)(v1 + 104);
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 0x40000000;
  void v11[2] = ___ZN5trace19ARICommandDriverINT4initEv_block_invoke_1;
  v11[3] = &__block_descriptor_tmp_9;
  v11[4] = v1;
  *(void *)std::string buf = v11;
  ice::Client::setEventHandler<void({block_pointer})(void)>(v3, 0, (uint64_t *)buf);
  uint64_t v4 = *(void *)(v1 + 104);
  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 0x40000000;
  v10[2] = ___ZN5trace19ARICommandDriverINT4initEv_block_invoke_2;
  v10[3] = &__block_descriptor_tmp_3_0;
  _OWORD v10[4] = v1;
  *(void *)std::string buf = v10;
  ice::Client::setEventHandler<void({block_pointer})(void)>(v4, 1, (uint64_t *)buf);
  uint64_t v5 = *(void *)(v1 + 104);
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 0x40000000;
  v9[2] = ___ZN5trace19ARICommandDriverINT4initEv_block_invoke_4;
  v9[3] = &__block_descriptor_tmp_6_1;
  _OWORD v9[4] = v1;
  *(void *)std::string buf = v9;
  ice::Client::setEventHandler<void({block_pointer})(dispatch::group_session)>(v5, 2, (uint64_t *)buf);
  uint64_t v6 = *(void *)(v1 + 104);
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 0x40000000;
  v8[2] = ___ZN5trace19ARICommandDriverINT4initEv_block_invoke_7;
  v8[3] = &__block_descriptor_tmp_8_1;
  void v8[4] = v1;
  *(void *)std::string buf = v8;
  ice::Client::setEventHandler<void({block_pointer})(void)>(v6, 3, (uint64_t *)buf);
  uint64_t result = ice::Client::start(*(ice::Client **)(v1 + 104));
  *(unsigned char *)(v1 + 120) = 1;
  return result;
}

void ___ZN5trace19ARICommandDriverINT4initEv_block_invoke_1(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl(&dword_235DB9000, v1, OS_LOG_TYPE_DEFAULT, "#I ARI Started event received.", v2, 2u);
  }
}

void ___ZN5trace19ARICommandDriverINT4initEv_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl(&dword_235DB9000, v1, OS_LOG_TYPE_DEFAULT, "#I ARI Stopped event received.", v2, 2u);
  }
}

void ___ZN5trace19ARICommandDriverINT4initEv_block_invoke_4(uint64_t a1, NSObject **a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = v3[5];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v9[0]) = 0;
    _os_log_impl(&dword_235DB9000, v4, OS_LOG_TYPE_DEFAULT, "#I ARI LPM Enter event received", (uint8_t *)v9, 2u);
  }
  uint64_t v5 = (const void *)v3[31];
  if (v5 && v3[32])
  {
    uint64_t v6 = *a2;
    if (v6 && (dispatch_retain(v6), dispatch_group_enter(v6), (uint64_t v5 = (const void *)v3[31]) == 0)) {
      unint64_t v7 = 0;
    }
    else {
      unint64_t v7 = _Block_copy(v5);
    }
    uint64_t v8 = v3[32];
    v9[0] = MEMORY[0x263EF8330];
    v9[1] = 1174405120;
    v9[2] = ___ZNK8dispatch8callbackIU13block_pointerFvNS_13group_sessionEEEclIJS1_EEEvDpT__block_invoke_1;
    v9[3] = &__block_descriptor_tmp_47_1;
    if (v7)
    {
      uint64_t aBlock = _Block_copy(v7);
      dispatch_group_t group = v6;
      if (!v6)
      {
LABEL_15:
        dispatch_async(v8, v9);
        if (group)
        {
          dispatch_group_leave(group);
          if (group) {
            dispatch_release(group);
          }
        }
        if (aBlock) {
          _Block_release(aBlock);
        }
        if (v7) {
          _Block_release(v7);
        }
        if (v6)
        {
          dispatch_group_leave(v6);
          dispatch_release(v6);
        }
        return;
      }
    }
    else
    {
      uint64_t aBlock = 0;
      dispatch_group_t group = v6;
      if (!v6) {
        goto LABEL_15;
      }
    }
    dispatch_retain(v6);
    if (group) {
      dispatch_group_enter(group);
    }
    goto LABEL_15;
  }
}

void ___ZN5trace19ARICommandDriverINT4initEv_block_invoke_7(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = v1[5];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v8[0]) = 0;
    _os_log_impl(&dword_235DB9000, v2, OS_LOG_TYPE_DEFAULT, "#I ARI LPM Exit event received", (uint8_t *)v8, 2u);
  }
  uint64_t v3 = (const void *)v1[33];
  if (v3 && v1[34])
  {
    uint64_t v4 = _Block_copy(v3);
    uint64_t v5 = v4;
    uint64_t v6 = v1[34];
    v8[0] = MEMORY[0x263EF8330];
    v8[1] = 1174405120;
    v8[2] = ___ZNK8dispatch8callbackIU13block_pointerFvvEEclIJEEEvDpT__block_invoke_1;
    v8[3] = &__block_descriptor_tmp_49_2;
    if (v4)
    {
      uint64_t aBlock = _Block_copy(v4);
      dispatch_async(v6, v8);
      unint64_t v7 = aBlock;
      if (!aBlock)
      {
LABEL_10:
        if (v5) {
          _Block_release(v5);
        }
        return;
      }
    }
    else
    {
      uint64_t aBlock = 0;
      dispatch_async(v6, v8);
      unint64_t v7 = aBlock;
      if (!aBlock) {
        goto LABEL_10;
      }
    }
    _Block_release(v7);
    goto LABEL_10;
  }
}

uint64_t trace::ARICommandDriverINT::sendFlushRequest(trace::ARICommandDriverINT *this)
{
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_235DB9000, v2, OS_LOG_TYPE_DEFAULT, "#I Sending flush request", buf, 2u);
  }
  stat __p = (void *)0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v26 = v3;
  long long v27 = v3;
  *(_OWORD *)std::string buf = v3;
  long long v25 = v3;
  AriSdk::ARI_TraceFlushReq_SDK::ARI_TraceFlushReq_SDK((AriSdk::ARI_TraceFlushReq_SDK *)buf);
  uint64_t v4 = operator new(4uLL);
  _DWORD *v4 = 1;
  uint64_t v5 = __p;
  stat __p = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v6 || (unint64_t v7 = std::__shared_weak_count::lock(v6)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v8 = v7;
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v9
    || (uint64_t v10 = *((void *)this + 13),
        std::string::size_type v11 = (std::__shared_weak_count_vtbl *)*((void *)this + 9),
        (uint64_t v12 = std::__shared_weak_count::lock(v9)) == 0))
  {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v13 = v12;
  atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v13);
  }
  long long v14 = (std::__shared_weak_count *)operator new(0x30uLL);
  v14->__shared_owners_ = 0;
  p_shared_owners = &v14->__shared_owners_;
  v14->__shared_weak_owners_ = 0;
  v14[1].__vftable = v11;
  v14->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E941378;
  v14[1].__shared_owners_ = (uint64_t)v13;
  v14[1].__shared_weak_owners_ = (uint64_t)this;
  uint64_t v29 = MEMORY[0x263EF8330];
  uint64_t v30 = 1174405120;
  int v31 = ___ZN3ice6detail12wrapCallbackIZN5trace19ARICommandDriverINT16sendFlushRequestEvE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  uint64_t v32 = &__block_descriptor_tmp_52_1;
  uint64_t v33 = v14 + 1;
  uint64_t v34 = v14;
  atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlock[0] = (const void *)MEMORY[0x263EF8330];
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_8;
  aBlock[3] = &unk_264C7E0F8;
  aBlock[4] = &v29;
  int v16 = _Block_copy(aBlock);
  timespec v17 = v34;
  if (!v34 || atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_16:
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_17:
  *(void *)&long long v18 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v22[0] = v18;
  v22[1] = v18;
  unint64_t v23 = 0xAAAAAAAAAAAAAAAALL;
  stat v19 = *(std::__shared_weak_count **)(v10 + 16);
  uint64_t v29 = *(void *)(v10 + 8);
  if (!v19)
  {
    uint64_t v30 = 0;
LABEL_30:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v30 = (uint64_t)std::__shared_weak_count::lock(v19);
  if (!v30) {
    goto LABEL_30;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  uint64_t v20 = (std::__shared_weak_count *)v30;
  if (v30 && !atomic_fetch_add((atomic_ullong *volatile)(v30 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  aBlock[0] = v16;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0]) {
    _Block_release(aBlock[0]);
  }
  MEMORY[0x237DF50B0](v22);
  usleep(0xF4240u);
  std::__shared_weak_count::__release_weak(v8);
  return MEMORY[0x237DF5350](buf);
}

void sub_235E520B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  std::__shared_weak_count::__release_weak(v24);
  MEMORY[0x237DF5350](&a15);
  _Unwind_Resume(a1);
}

uint64_t trace::ARICommandDriverINT::sendConfig(unint64_t a1, char **a2, std::__shared_count_vtbl **a3, int a4, int a5, int a6, uint64_t a7)
{
  uint64_t v78 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v8
    || (long long v14 = *(std::unique_lock<std::mutex>::mutex_type **)(a1 + 72), (v15 = std::__shared_weak_count::lock(v8)) == 0))
  {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v16 = v15;
  atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v16);
  }
  long long v65 = (void *)0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v17 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v63 = v17;
  *(_OWORD *)std::string v64 = v17;
  v61[3] = v17;
  *(_OWORD *)stat __p = v17;
  v61[1] = v17;
  v61[2] = v17;
  v61[0] = v17;
  AriSdk::ARI_TraceSetConfigReq_SDK::ARI_TraceSetConfigReq_SDK((AriSdk::ARI_TraceSetConfigReq_SDK *)v61);
  stat v19 = *a2;
  long long v18 = a2[1];
  uint64_t v20 = operator new(4uLL);
  unint64_t v22 = v18 - v19;
  *uint64_t v20 = v18 - v19;
  unint64_t v23 = __p[0];
  __p[0] = v20;
  std::string v57 = a3;
  if (v23)
  {
    operator delete(v23);
    stat v19 = *a2;
    long long v18 = a2[1];
    unint64_t v22 = v18 - *a2;
  }
  if (v22 < 0xF01)
  {
    if (&__p[1] != (void **)a2) {
      std::vector<char>::__assign_with_size[abi:ne180100]<char *,char *>(&__p[1], v19, v18, v22);
    }
  }
  else
  {
    AriOsa::LogSrcInfo((uint64_t *)&__lk, (AriOsa *)"/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/ARI/ari_sdk_msg.h", "operator=", v21);
    if ((SBYTE7(v74) & 0x80u) == 0) {
      p_lk = &__lk;
    }
    else {
      p_lk = __lk.__m_;
    }
    Ari::Log((Ari *)8, (uint64_t)"(%s:%d) Array assignment too large(%p), got(%d) max(%d)", v24, p_lk, 349, &__p[1], a2[1] - *a2, 3840);
    if (SBYTE7(v74) < 0) {
      operator delete(__lk.__m_);
    }
  }
  long long v26 = operator new(1uLL);
  unsigned char *v26 = a4;
  long long v27 = v64[0];
  v64[0] = v26;
  if (v27) {
    operator delete(v27);
  }
  size_t v28 = operator new(1uLL);
  unsigned char *v28 = a5;
  uint64_t v29 = v64[1];
  v64[1] = v28;
  if (v29) {
    operator delete(v29);
  }
  uint64_t v30 = operator new(4uLL);
  *uint64_t v30 = a6;
  int v31 = v65;
  long long v65 = v30;
  if (v31) {
    operator delete(v31);
  }
  uint64_t v32 = *(NSObject **)(a1 + 40);
  if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
  {
    if (!a5) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  LODWORD(__lk.__m_) = 67109632;
  HIDWORD(__lk.__m_) = a4;
  *(_WORD *)&__lk.__owns_ = 1024;
  *(_DWORD *)(&__lk.__owns_ + 2) = a5;
  *((_WORD *)&__lk.__owns_ + 3) = 1024;
  LODWORD(v74) = a6;
  _os_log_debug_impl(&dword_235DB9000, v32, OS_LOG_TYPE_DEBUG, "#D Background tracing: %d, wait for idle indication: %d, privacy level: %d", (uint8_t *)&__lk, 0x14u);
  if (a5) {
LABEL_23:
  }
    *(unsigned char *)(a1 + 240) = 0;
LABEL_24:
  uint64_t v33 = *(void *)(a1 + 104);
  __lk.__m_ = v14;
  *(void *)&__lk.__owns_ = v16;
  atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  long long v74 = a1;
  long long v75 = 0uLL;
  uint64_t v34 = *a2;
  size_t v35 = a2[1] - *a2;
  if (v35)
  {
    if ((v35 & 0x8000000000000000) != 0) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    *((void *)&v74 + 1) = operator new(v35);
    *(void *)&long long v75 = *((void *)&v74 + 1);
    size_t v36 = *((void *)&v74 + 1) + v35;
    *((void *)&v75 + 1) = *((void *)&v74 + 1) + v35;
    memcpy(*((void **)&v74 + 1), v34, v35);
    *(void *)&long long v75 = v36;
  }
  v76.__vftable = *v57;
  if (v76.__vftable) {
    dispatch_retain((dispatch_object_t)v76.__vftable);
  }
  CFStringRef v37 = *(void **)a7;
  if (*(void *)a7) {
    CFStringRef v37 = _Block_copy(v37);
  }
  long long v38 = *(NSObject **)(a7 + 8);
  v76.__shared_owners_ = (uint64_t)v37;
  dispatch_object_t v77 = v38;
  if (v38) {
    dispatch_retain(v38);
  }
  long long v39 = (std::__shared_weak_count *)operator new(0x60uLL);
  v39->__shared_owners_ = 0;
  p_shared_owners = &v39->__shared_owners_;
  long long v41 = v74;
  v39[1].std::__shared_count = (std::__shared_count)__lk;
  *(_OWORD *)&v39[1].__shared_weak_owners_ = v41;
  std::__shared_count v42 = v76;
  *(_OWORD *)&v39[2].__shared_owners_ = v75;
  v39->__shared_weak_owners_ = 0;
  v39->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E9413F8;
  __lk.__m_ = 0;
  *(void *)&__lk.__owns_ = 0;
  long long v75 = 0uLL;
  *((void *)&v74 + 1) = 0;
  v39[3].std::__shared_count = v42;
  std::__shared_count v76 = (std::__shared_count)0;
  v39[3].__shared_weak_owners_ = (uint64_t)v77;
  dispatch_object_t v77 = 0;
  *(void *)std::string buf = MEMORY[0x263EF8330];
  uint64_t v67 = 1174405120;
  uint64_t v68 = ___ZN3ice6detail12wrapCallbackIZN5trace19ARICommandDriverINT10sendConfigENSt3__16vectorIcNS4_9allocatorIcEEEEN8dispatch5groupEbbiNS9_8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEE3__0vEENS9_5blockIU13block_pointerFiPhjEEENS4_17integral_constantIiLi2EEEOT__block_invoke;
  long long v69 = &__block_descriptor_tmp_60;
  __int16 v70 = v39 + 1;
  uint64_t v71 = v39;
  atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlock[0] = (const void *)MEMORY[0x263EF8330];
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_8;
  aBlock[3] = &unk_264C7E0F8;
  aBlock[4] = buf;
  uint64_t v43 = _Block_copy(aBlock);
  unint64_t v44 = v71;
  if (!v71 || atomic_fetch_add(&v71->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
  std::__shared_weak_count::__release_weak(v44);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_36:
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
  }
LABEL_37:
  *(void *)&long long v45 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v45 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v59[0] = v45;
  v59[1] = v45;
  unint64_t v60 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v46 = *(std::__shared_weak_count **)(v33 + 16);
  *(void *)std::string buf = *(void *)(v33 + 8);
  if (!v46)
  {
    uint64_t v67 = 0;
LABEL_91:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v67 = (uint64_t)std::__shared_weak_count::lock(v46);
  if (!v67) {
    goto LABEL_91;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  long long v47 = (std::__shared_weak_count *)v67;
  if (v67 && !atomic_fetch_add((atomic_ullong *volatile)(v67 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
    std::__shared_weak_count::__release_weak(v47);
  }
  aBlock[0] = v43;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0]) {
    _Block_release(aBlock[0]);
  }
  MEMORY[0x237DF50B0](v59);
  if (v77) {
    dispatch_release(v77);
  }
  if (v76.__shared_owners_) {
    _Block_release((const void *)v76.__shared_owners_);
  }
  if (v76.__vftable) {
    dispatch_release((dispatch_object_t)v76.__vftable);
  }
  if (*((void *)&v74 + 1))
  {
    *(void *)&long long v75 = *((void *)&v74 + 1);
    operator delete(*((void **)&v74 + 1));
  }
  if (*(void *)&__lk.__owns_) {
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&__lk.__owns_);
  }
  if (!a5)
  {
    uint64_t v49 = 1;
    goto LABEL_82;
  }
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 128);
  *(void *)&__lk.__owns_ = 0xAAAAAAAAAAAAAA01;
  std::mutex::lock((std::mutex *)(a1 + 128));
  v48.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ + 3000000000;
  do
  {
    if (*(unsigned char *)(a1 + 240)) {
      goto LABEL_74;
    }
    if (v48.__d_.__rep_ <= std::chrono::steady_clock::now().__d_.__rep_) {
      break;
    }
    v52.__d_.__rep_ = v48.__d_.__rep_ - std::chrono::steady_clock::now().__d_.__rep_;
    if (v52.__d_.__rep_ < 1) {
      continue;
    }
    std::chrono::steady_clock::now();
    v53.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if (!v53.__d_.__rep_)
    {
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v50 = 0;
      goto LABEL_58;
    }
    if (v53.__d_.__rep_ < 1)
    {
      if ((unint64_t)v53.__d_.__rep_ < 0xFFDF3B645A1CAC09)
      {
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v50 = 0x8000000000000000;
        goto LABEL_58;
      }
    }
    else if ((unint64_t)v53.__d_.__rep_ > 0x20C49BA5E353F7)
    {
      std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v50 = 0x7FFFFFFFFFFFFFFFLL;
      if ((v52.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL) != 0x7FFFFFFFFFFFFFFFLL) {
        goto LABEL_72;
      }
      goto LABEL_58;
    }
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v50 = 1000 * v53.__d_.__rep_;
    if (1000 * v53.__d_.__rep_ > (v52.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
    {
LABEL_72:
      v51.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_59;
    }
LABEL_58:
    v51.__d_.__rep_ = v50 + v52.__d_.__rep_;
LABEL_59:
    std::condition_variable::__do_timed_wait((std::condition_variable *)(a1 + 192), &__lk, v51);
    std::chrono::steady_clock::now();
  }
  while (std::chrono::steady_clock::now().__d_.__rep_ < v48.__d_.__rep_);
  if (!*(unsigned char *)(a1 + 240))
  {
    std::string v55 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
    {
      uint64_t v49 = 0;
      if (!__lk.__owns_) {
        goto LABEL_82;
      }
      goto LABEL_81;
    }
    *(_WORD *)std::string buf = 0;
    _os_log_error_impl(&dword_235DB9000, v55, OS_LOG_TYPE_ERROR, "Error while waiting for trace output idle indication", buf, 2u);
    uint64_t v49 = 0;
    if (!__lk.__owns_) {
      goto LABEL_82;
    }
LABEL_81:
    std::mutex::unlock(__lk.__m_);
    goto LABEL_82;
  }
LABEL_74:
  long long v54 = *(NSObject **)(a1 + 40);
  if (!os_log_type_enabled(v54, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v49 = 1;
    if (!__lk.__owns_) {
      goto LABEL_82;
    }
    goto LABEL_81;
  }
  *(_WORD *)std::string buf = 0;
  _os_log_debug_impl(&dword_235DB9000, v54, OS_LOG_TYPE_DEBUG, "#D Trace output idle indication received successfully", buf, 2u);
  uint64_t v49 = 1;
  if (__lk.__owns_) {
    goto LABEL_81;
  }
LABEL_82:
  MEMORY[0x237DF56E0](v61);
  std::__shared_weak_count::__release_weak(v16);
  return v49;
}

void sub_235E52920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  MEMORY[0x237DF56E0](va);
  std::__shared_weak_count::__release_weak(v15);
  _Unwind_Resume(a1);
}

void *trace::ARICommandDriverINT::sendConfig(std::vector<char>,dispatch::group,BOOL,BOOL,int,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::~$_0(void *a1)
{
  uint64_t v2 = a1[8];
  if (v2) {
    dispatch_release(v2);
  }
  long long v3 = (const void *)a1[7];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = a1[6];
  if (v4) {
    dispatch_release(v4);
  }
  uint64_t v5 = (void *)a1[3];
  if (v5)
  {
    a1[4] = v5;
    operator delete(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)a1[1];
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  return a1;
}

uint64_t trace::ARICommandDriverINT::isStarted(trace::ARICommandDriverINT *this)
{
  unsigned __int8 v5 = 0;
  v4[0] = &v5;
  v4[1] = this;
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN5trace13CommandDriverEE20execute_wrapped_syncIZNKS1_19ARICommandDriverINT9isStartedEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_65;
  void block[4] = (char *)this + 72;
  void block[5] = v4;
  uint64_t v2 = (char *)this + 88;
  uint64_t v1 = *((void *)this + 11);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
  return v5;
}

void trace::ARICommandDriverINT::start(trace::ARICommandDriverINT *this)
{
  long long v3 = this;
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN5trace13CommandDriverEE20execute_wrapped_syncIZNS1_19ARICommandDriverINT5startEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_66;
  void block[4] = (char *)this + 72;
  void block[5] = &v3;
  uint64_t v2 = (char *)this + 88;
  uint64_t v1 = *((void *)this + 11);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
}

void trace::ARICommandDriverINT::stop(trace::ARICommandDriverINT *this, group *a2)
{
  gr_name = a2->gr_name;
  if (a2->gr_name)
  {
    dispatch_retain((dispatch_object_t)a2->gr_name);
    dispatch_group_enter((dispatch_group_t)gr_name);
    unsigned __int8 v5 = a2->gr_name;
    if (a2->gr_name) {
      dispatch_retain((dispatch_object_t)a2->gr_name);
    }
  }
  else
  {
    unsigned __int8 v5 = 0;
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v6 || (v7 = *((void *)this + 9), (uint64_t v8 = std::__shared_weak_count::lock(v6)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v9 = v8;
  uint64_t v10 = operator new(0x10uLL);
  void *v10 = this;
  v10[1] = v5;
  std::string::size_type v11 = *((void *)this + 11);
  atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v12 = operator new(0x18uLL);
  void *v12 = v10;
  v12[1] = v7;
  v12[2] = v9;
  dispatch_async_f(v11, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<trace::CommandDriver>::execute_wrapped<trace::ARICommandDriverINT::stop(dispatch::group)::$_0>(trace::ARICommandDriverINT::stop(dispatch::group)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<trace::ARICommandDriverINT::stop(dispatch::group)::$_0,dispatch_queue_s *::default_delete<trace::ARICommandDriverINT::stop(dispatch::group)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!gr_name) {
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (!gr_name) {
      return;
    }
  }
  dispatch_group_leave((dispatch_group_t)gr_name);

  dispatch_release((dispatch_object_t)gr_name);
}

void trace::ARICommandDriverINT::setLPMEnterAction(uint64_t a1, uint64_t a2)
{
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 1174405120;
  v8[2] = ___ZN5trace19ARICommandDriverINT17setLPMEnterActionEN8dispatch8callbackIU13block_pointerFvNS1_13group_sessionEEEE_block_invoke;
  v8[3] = &__block_descriptor_tmp_10_3;
  void v8[4] = a1;
  uint64_t v4 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v4 = _Block_copy(v4);
  }
  unsigned __int8 v5 = *(NSObject **)(a2 + 8);
  uint64_t aBlock = v4;
  dispatch_object_t object = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  std::string::size_type v11 = v8;
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN5trace13CommandDriverEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke_0;
  block[3] = &__block_descriptor_tmp_69;
  void block[4] = a1 + 72;
  void block[5] = &v11;
  uint64_t v6 = *(NSObject **)(a1 + 88);
  if (*(void *)(a1 + 96))
  {
    dispatch_async_and_wait(v6, block);
    uint64_t v7 = object;
    if (!object) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  dispatch_sync(v6, block);
  uint64_t v7 = object;
  if (object) {
LABEL_7:
  }
    dispatch_release(v7);
LABEL_8:
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void ___ZN5trace19ARICommandDriverINT17setLPMEnterActionEN8dispatch8callbackIU13block_pointerFvNS1_13group_sessionEEEE_block_invoke(void *a1)
{
  uint64_t v3 = a1[4];
  uint64_t v2 = (void *)a1[5];
  if (v2) {
    uint64_t v2 = _Block_copy(v2);
  }
  uint64_t v4 = *(const void **)(v3 + 248);
  *(void *)(v3 + 248) = v2;
  if (v4) {
    _Block_release(v4);
  }
  unsigned __int8 v5 = a1[6];
  if (v5) {
    dispatch_retain(v5);
  }
  uint64_t v6 = *(NSObject **)(v3 + 256);
  *(void *)(v3 + 256) = v5;
  if (v6) {
    dispatch_release(v6);
  }
  if (*(void *)(v3 + 248) && *(void *)(v3 + 256))
  {
    uint64_t v7 = (std::__shared_weak_count *)operator new(0x20uLL);
    v7->__shared_owners_ = 0;
    p_shared_owners = &v7->__shared_owners_;
    v7->__shared_weak_owners_ = 0;
    v7->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E9414A8;
    v7[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
    v11[0] = (void *)MEMORY[0x263EF8330];
    v11[1] = (void *)1174405120;
    void v11[2] = ___ZN3ice6detail12wrapCallbackIZZN5trace19ARICommandDriverINT17setLPMEnterActionEN8dispatch8callbackIU13block_pointerFvNS4_13group_sessionEEEEEUb_E3__6vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
    v11[3] = &__block_descriptor_tmp_67_2;
    v11[4] = &v7[1];
    uint64_t v12 = v7;
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 0x40000000;
    aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_8;
    aBlock[3] = &unk_264C7E0F8;
    aBlock[4] = v11;
    uint64_t v9 = _Block_copy(aBlock);
    uint64_t v10 = v12;
    if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_15;
      }
    }
    else if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
    {
LABEL_15:
      v11[0] = v9;
      ice::Client::regIndicationInternal();
      if (v11[0]) {
        _Block_release(v11[0]);
      }
      ice::Client::setIndShouldWake(*(ice::Client **)(v3 + 104));
      return;
    }
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    goto LABEL_15;
  }
}

void sub_235E53058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  _Unwind_Resume(exception_object);
}

void trace::ARICommandDriverINT::setLPMExitAction(uint64_t a1, uint64_t a2)
{
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 1174405120;
  v8[2] = ___ZN5trace19ARICommandDriverINT16setLPMExitActionEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke;
  v8[3] = &__block_descriptor_tmp_11_2;
  void v8[4] = a1;
  uint64_t v4 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v4 = _Block_copy(v4);
  }
  unsigned __int8 v5 = *(NSObject **)(a2 + 8);
  uint64_t aBlock = v4;
  dispatch_object_t object = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  std::string::size_type v11 = v8;
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN5trace13CommandDriverEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke_0;
  block[3] = &__block_descriptor_tmp_69;
  void block[4] = a1 + 72;
  void block[5] = &v11;
  uint64_t v6 = *(NSObject **)(a1 + 88);
  if (*(void *)(a1 + 96))
  {
    dispatch_async_and_wait(v6, block);
    uint64_t v7 = object;
    if (!object) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  dispatch_sync(v6, block);
  uint64_t v7 = object;
  if (object) {
LABEL_7:
  }
    dispatch_release(v7);
LABEL_8:
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void ___ZN5trace19ARICommandDriverINT16setLPMExitActionEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke(void *a1)
{
  uint64_t v3 = a1[4];
  uint64_t v2 = (void *)a1[5];
  if (v2) {
    uint64_t v2 = _Block_copy(v2);
  }
  uint64_t v4 = *(const void **)(v3 + 264);
  *(void *)(v3 + 264) = v2;
  if (v4) {
    _Block_release(v4);
  }
  unsigned __int8 v5 = a1[6];
  if (v5) {
    dispatch_retain(v5);
  }
  uint64_t v6 = *(NSObject **)(v3 + 272);
  *(void *)(v3 + 272) = v5;
  if (v6)
  {
    dispatch_release(v6);
  }
}

void std::__shared_ptr_pointer<trace::ARICommandDriverINT *,std::shared_ptr<trace::ARICommandDriverINT> ctu::SharedSynchronizable<trace::CommandDriver>::make_shared_ptr<trace::ARICommandDriverINT>(trace::ARICommandDriverINT*)::{lambda(trace::ARICommandDriverINT *)#1},std::allocator<trace::ARICommandDriverINT>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<trace::ARICommandDriverINT *,std::shared_ptr<trace::ARICommandDriverINT> ctu::SharedSynchronizable<trace::CommandDriver>::make_shared_ptr<trace::ARICommandDriverINT>(trace::ARICommandDriverINT*)::{lambda(trace::ARICommandDriverINT *)#1},std::allocator<trace::ARICommandDriverINT>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<trace::ARICommandDriverINT *,std::shared_ptr<trace::ARICommandDriverINT> ctu::SharedSynchronizable<trace::CommandDriver>::make_shared_ptr<trace::ARICommandDriverINT>(trace::ARICommandDriverINT*)::{lambda(trace::ARICommandDriverINT *)#1},std::allocator<trace::ARICommandDriverINT>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN5trace13CommandDriverEE15make_shared_ptrINS1_19ARICommandDriverINTEEE"
                     "NSt3__110shared_ptrIT_EEPS8_EUlPS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN5trace13CommandDriverEE15make_shared_ptrINS1_19ARICommandD"
                                "riverINTEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN5trace13CommandDriverEE15make_shared_ptrINS1_19ARICommandDriverINTEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN5trace13CommandDriverEE15make_shared_ptrINS1_19ARICommandDriverINTEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<trace::ARICommandDriverINT> ctu::SharedSynchronizable<trace::CommandDriver>::make_shared_ptr<trace::ARICommandDriverINT>(trace::ARICommandDriverINT*)::{lambda(trace::ARICommandDriverINT*)#1}::operator() const(trace::ARICommandDriverINT*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void ___ZNK8dispatch8callbackIU13block_pointerFvNS_13group_sessionEEEclIJS1_EEEvDpT__block_invoke_1(uint64_t a1)
{
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvvEEclIJEEEvDpT__block_invoke_1(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void ___ZN3ice6detail12wrapCallbackIZN5trace19ARICommandDriverINT16sendFlushRequestEvE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    unint64_t v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      uint64_t v5 = v2[2];
      uint64_t v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        uint64_t v7 = v6;
        if (!*v2)
        {
LABEL_27:
          if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        stat v19 = (int *)0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        void v18[2] = v8;
        v18[3] = v8;
        v18[0] = v8;
        v18[1] = v8;
        AriSdk::ARI_TraceFlushRspCb_SDK::ARI_TraceFlushRspCb_SDK((AriSdk::ARI_TraceFlushRspCb_SDK *)v18, a2);
        memset(__p, 170, sizeof(__p));
        *(void *)std::string buf = operator new(0x20uLL);
        long long v21 = xmmword_235E71980;
        strcpy(*(char **)buf, "Sending trace flush request");
        checkErrorStr((AriSdk::MsgBase *)v18, (uint64_t)buf, (uint64_t)__p);
        if (SHIBYTE(v21) < 0)
        {
          operator delete(*(void **)buf);
          uint64_t v12 = (void *)HIBYTE(__p[2]);
          if (SHIBYTE(__p[2]) < 0) {
            uint64_t v12 = __p[1];
          }
          if (v12)
          {
LABEL_9:
            uint64_t v10 = *(NSObject **)(v5 + 40);
            if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)std::string buf = 0;
              std::string::size_type v11 = "Failed to send trace flush request (response error)";
LABEL_17:
              uint64_t v13 = v10;
              uint32_t v14 = 2;
LABEL_18:
              _os_log_error_impl(&dword_235DB9000, v13, OS_LOG_TYPE_ERROR, v11, buf, v14);
              goto LABEL_24;
            }
            goto LABEL_24;
          }
        }
        else
        {
          uint64_t v9 = (void *)HIBYTE(__p[2]);
          if (SHIBYTE(__p[2]) < 0) {
            uint64_t v9 = __p[1];
          }
          if (v9) {
            goto LABEL_9;
          }
        }
        if (AriSdk::ARI_TraceFlushRspCb_SDK::unpack((AriSdk::ARI_TraceFlushRspCb_SDK *)v18))
        {
          uint64_t v10 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)std::string buf = 0;
            std::string::size_type v11 = "[rsp] Failed to send trace flush request (unpack error)";
            goto LABEL_17;
          }
        }
        else
        {
          int v15 = *v19;
          int v16 = *(NSObject **)(v5 + 40);
          if (!*v19)
          {
            if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)std::string buf = 0;
              _os_log_impl(&dword_235DB9000, v16, OS_LOG_TYPE_DEFAULT, "#I [rsp] Successfully sent trace flush request", buf, 2u);
            }
            goto LABEL_24;
          }
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = v15;
            std::string::size_type v11 = "[rsp] Failed to send trace flush request (result error: %d)";
            uint64_t v13 = v16;
            uint32_t v14 = 8;
            goto LABEL_18;
          }
        }
LABEL_24:
        if (SHIBYTE(__p[2]) < 0) {
          operator delete(__p[0]);
        }
        MEMORY[0x237DF5530](v18);
        goto LABEL_27;
      }
    }
  }
}

void sub_235E535D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  MEMORY[0x237DF5530](&a16);
  if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c80_ZTSNSt3__110shared_ptrIZN5trace19ARICommandDriverINT16sendFlushRequestEvE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c80_ZTSNSt3__110shared_ptrIZN5trace19ARICommandDriverINT16sendFlushRequestEvE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<trace::ARICommandDriverINT::sendFlushRequest(void)::$_0,std::allocator<trace::ARICommandDriverINT::sendFlushRequest(void)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E941378;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<trace::ARICommandDriverINT::sendFlushRequest(void)::$_0,std::allocator<trace::ARICommandDriverINT::sendFlushRequest(void)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E941378;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<trace::ARICommandDriverINT::sendFlushRequest(void)::$_0,std::allocator<trace::ARICommandDriverINT::sendFlushRequest(void)::$_0>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_8(uint64_t a1)
{
  return 0;
}

void ___ZN3ice6detail12wrapCallbackIZN5trace19ARICommandDriverINT10sendConfigENSt3__16vectorIcNS4_9allocatorIcEEEEN8dispatch5groupEbbiNS9_8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEE3__0vEENS9_5blockIU13block_pointerFiPhjEEENS4_17integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    unint64_t v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      uint64_t v5 = v2[2];
      uint64_t v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        uint64_t v7 = v6;
        if (!*v2) {
          goto LABEL_50;
        }
        unint64_t v40 = (int *)0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)long long v38 = v8;
        long long v39 = v8;
        long long v36 = v8;
        long long v37 = v8;
        AriSdk::ARI_TraceSetConfigRspCb_SDK::ARI_TraceSetConfigRspCb_SDK((AriSdk::ARI_TraceSetConfigRspCb_SDK *)&v36, a2);
        uint8_t buf[23] = 20;
        strcpy(buf, "Sending trace config");
        checkError((AriSdk::MsgBase *)&v36, (uint64_t)buf, (CFTypeRef *)cf);
        uint64_t v9 = *(const void **)cf;
        *(void *)CFTypeRef cf = 0;
        if ((buf[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)buf);
          if (v9) {
            uint64_t v12 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          }
          else {
            uint64_t v12 = 0;
          }
          if (v12)
          {
LABEL_10:
            std::string::size_type v11 = *(NSObject **)(v5 + 40);
            if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)std::string buf = 0;
              _os_log_error_impl(&dword_235DB9000, v11, OS_LOG_TYPE_ERROR, "[rsp] Failed to send trace config!", buf, 2u);
            }
            goto LABEL_26;
          }
        }
        else
        {
          if (v9) {
            uint64_t v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          }
          else {
            uint64_t v10 = 0;
          }
          if (v10) {
            goto LABEL_10;
          }
        }
        int v13 = AriSdk::ARI_TraceSetConfigRspCb_SDK::unpack((AriSdk::ARI_TraceSetConfigRspCb_SDK *)&v36);
        if (v13 || *v40)
        {
          uint32_t v14 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          {
            int v25 = *v40;
            *(_DWORD *)std::string buf = 67109376;
            *(_DWORD *)&uint8_t buf[4] = v13;
            *(_WORD *)&uint8_t buf[8] = 1024;
            *(_DWORD *)&buf[10] = v25;
            _os_log_error_impl(&dword_235DB9000, v14, OS_LOG_TYPE_ERROR, "[rsp] Failed to send trace config: unpackResult = %d result_code_t1 = %d", buf, 0xEu);
          }
          *(void *)std::string buf = operator new(0x20uLL);
          *(_OWORD *)&uint8_t buf[8] = xmmword_235E71980;
          strcpy(*(char **)buf, "Failed to send trace config");
          CreateError();
          int v15 = *(const void **)cf;
          *(void *)CFTypeRef cf = 0;
          if (v9)
          {
            CFRelease(v9);
            if (*(void *)cf) {
              CFRelease(*(CFTypeRef *)cf);
            }
          }
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
          uint64_t v9 = v15;
          goto LABEL_26;
        }
        uint64_t v20 = *(NSObject **)(v5 + 40);
        if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_26;
        }
        uint64_t v22 = v2[3];
        long long v21 = (char *)v2[4];
        unint64_t v23 = (unint64_t)&v21[-v22];
        if ((unint64_t)&v21[-v22] >= 0x7FFFFFFFFFFFFFF8) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v23 > 0x16)
        {
          uint64_t v26 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v23 | 7) != 0x17) {
            uint64_t v26 = v23 | 7;
          }
          uint64_t v27 = v26 + 1;
          time_t v24 = operator new(v26 + 1);
          *(void *)&uint8_t buf[8] = &v21[-v22];
          *(void *)&uint8_t buf[16] = v27 | 0x8000000000000000;
          *(void *)std::string buf = v24;
        }
        else
        {
          uint8_t buf[23] = (_BYTE)v21 - v22;
          time_t v24 = buf;
        }
        if ((char *)v22 == v21)
        {
          size_t v28 = v24;
        }
        else
        {
          if (v23 < 0x20 || (unint64_t)&v24[-v22] < 0x20)
          {
            size_t v28 = v24;
            uint64_t v29 = (char *)v22;
          }
          else
          {
            size_t v28 = &v24[v23 & 0xFFFFFFFFFFFFFFE0];
            uint64_t v29 = (char *)(v22 + (v23 & 0xFFFFFFFFFFFFFFE0));
            uint64_t v30 = (long long *)(v22 + 16);
            int v31 = v24 + 16;
            unint64_t v32 = v23 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v33 = *v30;
              *(v31 - 1) = *(v30 - 1);
              _OWORD *v31 = v33;
              v30 += 2;
              v31 += 2;
              v32 -= 32;
            }
            while (v32);
            if (v23 == (v23 & 0xFFFFFFFFFFFFFFE0)) {
              goto LABEL_70;
            }
          }
          do
          {
            char v34 = *v29++;
            *v28++ = v34;
          }
          while (v29 != v21);
        }
LABEL_70:
        unsigned char *v28 = 0;
        size_t v35 = buf;
        if (buf[23] < 0) {
          size_t v35 = *(unsigned char **)buf;
        }
        *(_DWORD *)CFTypeRef cf = 136315138;
        *(void *)&cf[4] = v35;
        _os_log_impl(&dword_235DB9000, v20, OS_LOG_TYPE_DEFAULT, "#I [rsp] Succeeded to send trace config: %s", cf, 0xCu);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
LABEL_26:
        MEMORY[0x237DF5A20](&v36);
        int v16 = v2[6];
        if (v16) {
          dispatch_group_leave(v16);
        }
        long long v17 = (const void *)v2[7];
        if (!v17 || !v2[8])
        {
          if (!v9)
          {
LABEL_50:
            if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
            return;
          }
LABEL_49:
          CFRelease(v9);
          goto LABEL_50;
        }
        if (v9 && (CFRetain(v9), (long long v17 = (const void *)v2[7]) == 0)) {
          long long v18 = 0;
        }
        else {
          long long v18 = _Block_copy(v17);
        }
        stat v19 = v2[8];
        *(void *)&long long v36 = MEMORY[0x263EF8330];
        *((void *)&v36 + 1) = 1174405120;
        *(void *)&long long v37 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_2;
        *((void *)&v37 + 1) = &__block_descriptor_tmp_64_2;
        if (v18)
        {
          v38[0] = _Block_copy(v18);
          v38[1] = v9;
          if (!v9) {
            goto LABEL_41;
          }
        }
        else
        {
          v38[0] = 0;
          v38[1] = v9;
          if (!v9)
          {
LABEL_41:
            dispatch_async(v19, &v36);
            if (v38[1]) {
              CFRelease(v38[1]);
            }
            if (v38[0]) {
              _Block_release(v38[0]);
            }
            if (v18) {
              _Block_release(v18);
            }
            if (!v9) {
              goto LABEL_50;
            }
            CFRelease(v9);
            goto LABEL_49;
          }
        }
        CFRetain(v9);
        goto LABEL_41;
      }
    }
  }
}

void sub_235E53CA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  MEMORY[0x237DF5A20](&a9);
  if (v27) {
    CFRelease(v27);
  }
  if (!atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c193_ZTSNSt3__110shared_ptrIZN5trace19ARICommandDriverINT10sendConfigENS_6vectorIcNS_9allocatorIcEEEEN8dispatch5groupEbbiNS7_8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c193_ZTSNSt3__110shared_ptrIZN5trace19ARICommandDriverINT10sendConfigENS_6vectorIcNS_9allocatorIcEEEEN8dispatch5groupEbbiNS7_8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<trace::ARICommandDriverINT::sendConfig(std::vector<char>,dispatch::group,BOOL,BOOL,int,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::allocator<trace::ARICommandDriverINT::sendConfig(std::vector<char>,dispatch::group,BOOL,BOOL,int,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E9413F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<trace::ARICommandDriverINT::sendConfig(std::vector<char>,dispatch::group,BOOL,BOOL,int,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::allocator<trace::ARICommandDriverINT::sendConfig(std::vector<char>,dispatch::group,BOOL,BOOL,int,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E9413F8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<trace::ARICommandDriverINT::sendConfig(std::vector<char>,dispatch::group,BOOL,BOOL,int,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::allocator<trace::ARICommandDriverINT::sendConfig(std::vector<char>,dispatch::group,BOOL,BOOL,int,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>::__on_zero_shared(void *a1)
{
  uint64_t v2 = a1[11];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = (const void *)a1[10];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = a1[9];
  if (v4) {
    dispatch_release(v4);
  }
  uint64_t v5 = (void *)a1[6];
  if (v5)
  {
    a1[7] = v5;
    operator delete(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)a1[4];
  if (v6)
  {
    std::__shared_weak_count::__release_weak(v6);
  }
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_2(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v1 = *(const void **)(a1 + 40);
  CFTypeRef cf = v1;
  if (v1) {
    CFRetain(v1);
  }
  (*(void (**)(uint64_t, CFTypeRef *))(v2 + 16))(v2, &cf);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_235E53F5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN5trace13CommandDriverEE20execute_wrapped_syncIZNKS1_19ARICommandDriverINT9isStartedEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke(uint64_t result)
{
  ***(unsigned char ***)(result + 40) = *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 120);
  return result;
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN5trace13CommandDriverEE20execute_wrapped_syncIZNS1_19ARICommandDriverINT5startEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 40);
  uint64_t v2 = *v1;
  uint64_t result = ice::Client::start(*(ice::Client **)(*v1 + 104));
  *(unsigned char *)(v2 + 120) = 1;
  return result;
}

void dispatch::async<void ctu::SharedSynchronizable<trace::CommandDriver>::execute_wrapped<trace::ARICommandDriverINT::stop(dispatch::group)::$_0>(trace::ARICommandDriverINT::stop(dispatch::group)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<trace::ARICommandDriverINT::stop(dispatch::group)::$_0,dispatch_queue_s *::default_delete<trace::ARICommandDriverINT::stop(dispatch::group)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v4 = **a1;
  unint64_t v3 = (char *)(*a1)[1];
  uint64_t v5 = *(ice::Client **)(v4 + 104);
  object.gr_name = v3;
  if (v3) {
    dispatch_retain((dispatch_object_t)v3);
  }
  ice::Client::stop(v5, &object);
  if (object.gr_name) {
    dispatch_release((dispatch_object_t)object.gr_name);
  }
  *(unsigned char *)(v4 + 120) = 0;
  uint64_t v6 = v2[1];
  if (v6) {
    dispatch_release(v6);
  }
  operator delete(v2);
  uint64_t v7 = (std::__shared_weak_count *)a1[2];
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  operator delete(a1);
}

void sub_235E54088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  if (object)
  {
    dispatch_release(object);
    int v13 = v11[1];
    if (!v13)
    {
LABEL_3:
      operator delete(v11);
      uint32_t v14 = (std::__shared_weak_count *)v10[2];
      if (!v14) {
        goto LABEL_9;
      }
      goto LABEL_7;
    }
  }
  else
  {
    int v13 = v11[1];
    if (!v13) {
      goto LABEL_3;
    }
  }
  dispatch_release(v13);
  operator delete(v11);
  uint32_t v14 = (std::__shared_weak_count *)v10[2];
  if (!v14) {
    goto LABEL_9;
  }
LABEL_7:
  if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_9:
  operator delete(v10);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3ice6detail12wrapCallbackIZZN5trace19ARICommandDriverINT17setLPMEnterActionEN8dispatch8callbackIU13block_pointerFvNS4_13group_sessionEEEEEUb_E3__6vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t result, const unsigned __int8 *a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(uint64_t **)(result + 32);
  if (v2)
  {
    uint64_t v3 = *v2;
    std::string::size_type v11 = (_DWORD *)0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v10[2] = v4;
    v10[3] = v4;
    v10[0] = v4;
    v10[1] = v4;
    AriSdk::ARI_TraceOutputIdleInd_SDK::ARI_TraceOutputIdleInd_SDK((AriSdk::ARI_TraceOutputIdleInd_SDK *)v10, a2);
    unint64_t GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v10);
    std::mutex::lock((std::mutex *)(v3 + 128));
    if (ice::isARIResponseValid())
    {
      if (!AriSdk::ARI_TraceOutputIdleInd_SDK::unpack((AriSdk::ARI_TraceOutputIdleInd_SDK *)v10)
        && *v11 == 1)
      {
        uint64_t v6 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl(&dword_235DB9000, v6, OS_LOG_TYPE_DEFAULT, "#I [ind] Trace output idle indication Success", buf, 2u);
        }
        char v7 = 1;
        goto LABEL_13;
      }
      uint64_t v9 = *(NSObject **)(v3 + 40);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_error_impl(&dword_235DB9000, v9, OS_LOG_TYPE_ERROR, "[ind] Error while unpacking trace output idle indication", buf, 2u);
      }
    }
    else
    {
      long long v8 = *(NSObject **)(v3 + 40);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 67109376;
        int v13 = (GMID >> 17) & 0xFFFF8000 | (GMID << 26);
        __int16 v14 = 1024;
        int v15 = 1568702464;
        _os_log_error_impl(&dword_235DB9000, v8, OS_LOG_TYPE_ERROR, "[ind] Got unexpected message 0x%0x, expected trace output idle indication (0x%0x)", buf, 0xEu);
      }
    }
    char v7 = 0;
LABEL_13:
    *(unsigned char *)(v3 + 240) = v7;
    std::condition_variable::notify_all((std::condition_variable *)(v3 + 192));
    std::mutex::unlock((std::mutex *)(v3 + 128));
    return MEMORY[0x237DF5880](v10);
  }
  return result;
}

void sub_235E542F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex::unlock(v9);
  MEMORY[0x237DF5880](&a9);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c146_ZTSNSt3__110shared_ptrIZZN5trace19ARICommandDriverINT17setLPMEnterActionEN8dispatch8callbackIU13block_pointerFvNS3_13group_sessionEEEEEUb_E3__6EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c146_ZTSNSt3__110shared_ptrIZZN5trace19ARICommandDriverINT17setLPMEnterActionEN8dispatch8callbackIU13block_pointerFvNS3_13group_sessionEEEEEUb_E3__6EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5trace19ARICommandDriverINT17setLPMEnterActionEN8dispatch8callbackIU13block_pointerFvNS3_13group_sessionEEEEEUb_E3__6NS_9allocatorIS9_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E9414A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5trace19ARICommandDriverINT17setLPMEnterActionEN8dispatch8callbackIU13block_pointerFvNS3_13group_sessionEEEEEUb_E3__6NS_9allocatorIS9_EEED0Ev(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E9414A8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void *___ZNK3ctu20SharedSynchronizableIN5trace13CommandDriverEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke_0(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

uint64_t abm::asString@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  switch((int)result)
  {
    case 0:
      a2[23] = 2;
      strcpy(a2, "UI");
      break;
    case 1:
      a2[23] = 7;
      strcpy(a2, "ABMtool");
      break;
    case 2:
      a2[23] = 7;
      strcpy(a2, "Profile");
      break;
    case 3:
      a2[23] = 10;
      strcpy(a2, "24hr_Timer");
      break;
    default:
      a2[23] = 11;
      strcpy(a2, "UnSpecified");
      break;
  }
  return result;
}

{
  if (result == 1)
  {
    a2[23] = 9;
    strcpy(a2, "Last_Used");
  }
  else if (result)
  {
    a2[23] = 11;
    strcpy(a2, "UnSpecified");
  }
  else
  {
    a2[23] = 7;
    strcpy(a2, "Default");
  }
  return result;
}

void util::strip_non_printable(std::string *this)
{
  uint64_t v1 = this;
  std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0) {
    uint64_t v3 = this;
  }
  else {
    uint64_t v3 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  if ((size & 0x80u) != 0) {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
  }
  if (size)
  {
    long long v4 = (std::string *)((char *)v3 + size);
    std::string::size_type v5 = size - 1;
    uint64_t v6 = MEMORY[0x263EF8318];
    while (1)
    {
      unsigned int v7 = v3->__r_.__value_.__s.__data_[0];
      if ((v7 & 0x80000000) != 0) {
        break;
      }
      int v8 = *(_DWORD *)(v6 + 4 * v7 + 60);
      if ((v8 & 0x40000) == 0 || (v8 & 0x4000) != 0) {
        goto LABEL_15;
      }
LABEL_8:
      uint64_t v3 = (std::string *)((char *)v3 + 1);
      --v5;
      if (v3 == v4) {
        goto LABEL_28;
      }
    }
    if (__maskrune(v3->__r_.__value_.__s.__data_[0], 0x40000uLL) && !__maskrune(v7, 0x4000uLL)) {
      goto LABEL_8;
    }
LABEL_15:
    if (v3 != v4 && (std::string *)((char *)&v3->__r_.__value_.__l.__data_ + 1) != v4)
    {
      uint64_t v9 = 1;
      long long v4 = v3;
      while (1)
      {
        unsigned int v10 = v3->__r_.__value_.__s.__data_[v9];
        if ((v10 & 0x80000000) != 0)
        {
          if (!__maskrune(v3->__r_.__value_.__s.__data_[v9], 0x40000uLL) || __maskrune(v10, 0x4000uLL)) {
            goto LABEL_19;
          }
        }
        else
        {
          int v11 = *(_DWORD *)(v6 + 4 * v10 + 60);
          if ((v11 & 0x40000) == 0 || (v11 & 0x4000) != 0) {
            goto LABEL_19;
          }
        }
        v4->__r_.__value_.__s.__data_[0] = v3->__r_.__value_.__s.__data_[v9];
        long long v4 = (std::string *)((char *)v4 + 1);
LABEL_19:
        ++v9;
        if (!--v5) {
          goto LABEL_28;
        }
      }
    }
  }
  long long v4 = v3;
LABEL_28:
  std::string::size_type v12 = HIBYTE(v1->__r_.__value_.__r.__words[2]);
  int v13 = (char)v12;
  __int16 v14 = (std::string *)v1->__r_.__value_.__r.__words[0];
  int v15 = (char *)(v1->__r_.__value_.__r.__words[0] + v1->__r_.__value_.__l.__size_);
  if ((v12 & 0x80u) != 0)
  {
    std::string::size_type v16 = v1->__r_.__value_.__r.__words[0];
  }
  else
  {
    int v15 = (char *)v1 + v12;
    std::string::size_type v16 = (std::string::size_type)v1;
  }
  if ((v12 & 0x80u) != 0) {
    std::string::size_type v12 = v1->__r_.__value_.__l.__size_;
  }
  std::string::size_type v17 = (std::string::size_type)v4 - v16;
  if (v12 < (unint64_t)v4 - v16) {
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v15 - (char *)v4 == -1)
  {
    if (v13 < 0)
    {
      v1->__r_.__value_.__l.__size_ = v17;
      uint64_t v1 = v14;
    }
    else
    {
      *((unsigned char *)&v1->__r_.__value_.__s + 23) = v17 & 0x7F;
    }
    v1->__r_.__value_.__s.__data_[v17] = 0;
  }
  else
  {
    std::string::__erase_external_with_move(v1, v17, v15 - (char *)v4);
  }
}

uint64_t util::convert_garbage(uint64_t result)
{
  int v1 = *(char *)(result + 23);
  if (v1 >= 0) {
    uint64_t v2 = (unsigned char *)result;
  }
  else {
    uint64_t v2 = *(unsigned char **)result;
  }
  if (v1 >= 0) {
    uint64_t v3 = *(unsigned __int8 *)(result + 23);
  }
  else {
    uint64_t v3 = *(void *)(result + 8);
  }
  if (v3)
  {
    uint64_t v4 = MEMORY[0x263EF8318];
    do
    {
      unsigned int v5 = (char)*v2;
      if ((v5 & 0x80000000) != 0)
      {
        uint64_t result = __maskrune((char)*v2, 0x40000uLL);
        if (result) {
          goto LABEL_10;
        }
        uint64_t result = __maskrune(v5, 0x4000uLL);
        if (result) {
          goto LABEL_10;
        }
      }
      else
      {
        int v6 = *(_DWORD *)(v4 + 4 * v5 + 60);
        if ((v6 & 0x40000) != 0) {
          goto LABEL_10;
        }
        uint64_t result = v6 & 0x4000;
        if ((v6 & 0x4000) != 0) {
          goto LABEL_10;
        }
      }
      unsigned char *v2 = 32;
LABEL_10:
      ++v2;
      --v3;
    }
    while (v3);
  }
  return result;
}

void util::strip_pattern(char *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  memset(a3, 170, sizeof(std::string));
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a3->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
  }
  int v5 = a1[23];
  int v6 = SHIBYTE(a3->__r_.__value_.__r.__words[2]);
  unsigned int v7 = (std::string *)a3->__r_.__value_.__r.__words[0];
  if (v6 >= 0) {
    int v8 = a3;
  }
  else {
    int v8 = (std::string *)a3->__r_.__value_.__r.__words[0];
  }
  if (v5 >= 0) {
    int64_t v9 = a1[23];
  }
  else {
    int64_t v9 = *((void *)a1 + 1);
  }
  std::string::size_type v10 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  if (v5 >= 0) {
    int v11 = a1;
  }
  else {
    int v11 = *(char **)a1;
  }
  if (!v9)
  {
    std::string::size_type v13 = 0;
    goto LABEL_20;
  }
  if (v6 >= 0) {
    uint64_t size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  }
  else {
    uint64_t size = a3->__r_.__value_.__l.__size_;
  }
  if (size >= v9)
  {
    uint64_t v27 = (char *)v8 + size;
    int v28 = *v11;
    uint64_t v29 = v8;
    do
    {
      uint64_t v30 = size - v9;
      if (v30 == -1) {
        break;
      }
      int v31 = (char *)memchr(v29, v28, v30 + 1);
      if (!v31) {
        break;
      }
      unint64_t v32 = v31;
      if (!memcmp(v31, v11, v9))
      {
        if (v32 != v27)
        {
          std::string::size_type v13 = v32 - (char *)v8;
          if (v32 - (char *)v8 != -1)
          {
            if (v9 == -1)
            {
              while (1)
              {
                std::string::size_type v33 = a3->__r_.__value_.__l.__size_;
                if ((v10 & 0x80u) == 0) {
                  std::string::size_type v33 = v10;
                }
                if (v33 < v13) {
                  break;
                }
                if ((char)v10 < 0)
                {
                  a3->__r_.__value_.__l.__size_ = v13;
                }
                else
                {
                  *((unsigned char *)&a3->__r_.__value_.__s + 23) = v13 & 0x7F;
                  unsigned int v7 = a3;
                }
                v7->__r_.__value_.__s.__data_[v13] = 0;
                int v34 = SHIBYTE(a3->__r_.__value_.__r.__words[2]);
                std::string::size_type v10 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
                unsigned int v7 = (std::string *)a3->__r_.__value_.__r.__words[0];
                if (v34 >= 0) {
                  size_t v35 = a3;
                }
                else {
                  size_t v35 = (std::string *)a3->__r_.__value_.__r.__words[0];
                }
                int v36 = a1[23];
                if (v36 >= 0) {
                  long long v37 = a1;
                }
                else {
                  long long v37 = *(char **)a1;
                }
                if (v36 >= 0) {
                  int64_t v38 = a1[23];
                }
                else {
                  int64_t v38 = *((void *)a1 + 1);
                }
                if (v38)
                {
                  if (v34 >= 0) {
                    int64_t v39 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
                  }
                  else {
                    int64_t v39 = a3->__r_.__value_.__l.__size_;
                  }
                  if (v39 < v38) {
                    return;
                  }
                  unint64_t v40 = (char *)v35 + v39;
                  int v41 = *v37;
                  std::__shared_count v42 = v35;
                  while (1)
                  {
                    int64_t v43 = v39 - v38;
                    if (v43 == -1) {
                      return;
                    }
                    unint64_t v44 = (char *)memchr(v42, v41, v43 + 1);
                    if (!v44) {
                      return;
                    }
                    long long v45 = v44;
                    if (!memcmp(v44, v37, v38)) {
                      break;
                    }
                    std::__shared_count v42 = (std::string *)(v45 + 1);
                    int64_t v39 = v40 - (v45 + 1);
                    if (v39 < v38) {
                      return;
                    }
                  }
                  if (v45 == v40) {
                    return;
                  }
                  std::string::size_type v13 = v45 - (char *)v35;
                  if (v45 - (char *)v35 == -1) {
                    return;
                  }
                }
                else
                {
                  std::string::size_type v13 = 0;
                }
              }
            }
            else
            {
LABEL_20:
              while (1)
              {
                std::string::size_type v14 = (v10 & 0x80u) == 0 ? v10 : a3->__r_.__value_.__l.__size_;
                if (v14 < v13) {
                  break;
                }
                std::string::__erase_external_with_move(a3, v13, v9);
                int v15 = SHIBYTE(a3->__r_.__value_.__r.__words[2]);
                std::string::size_type v10 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
                if (v15 >= 0) {
                  std::string::size_type v16 = a3;
                }
                else {
                  std::string::size_type v16 = (std::string *)a3->__r_.__value_.__r.__words[0];
                }
                int v17 = a1[23];
                if (v17 >= 0) {
                  long long v18 = a1;
                }
                else {
                  long long v18 = *(char **)a1;
                }
                if (v17 >= 0) {
                  int64_t v19 = a1[23];
                }
                else {
                  int64_t v19 = *((void *)a1 + 1);
                }
                if (v19)
                {
                  if (v15 >= 0) {
                    int64_t v20 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
                  }
                  else {
                    int64_t v20 = a3->__r_.__value_.__l.__size_;
                  }
                  if (v20 < v19) {
                    return;
                  }
                  long long v21 = (char *)v16 + v20;
                  int v22 = *v18;
                  unint64_t v23 = v16;
                  while (1)
                  {
                    int64_t v24 = v20 - v19;
                    if (v24 == -1) {
                      return;
                    }
                    int v25 = (char *)memchr(v23, v22, v24 + 1);
                    if (!v25) {
                      return;
                    }
                    uint64_t v26 = v25;
                    if (!memcmp(v25, v18, v19)) {
                      break;
                    }
                    unint64_t v23 = (std::string *)(v26 + 1);
                    int64_t v20 = v21 - (v26 + 1);
                    if (v20 < v19) {
                      return;
                    }
                  }
                  if (v26 == v21) {
                    return;
                  }
                  std::string::size_type v13 = v26 - (char *)v16;
                  if (v26 - (char *)v16 == -1) {
                    return;
                  }
                }
                else
                {
                  std::string::size_type v13 = 0;
                }
              }
            }
            std::string::__throw_out_of_range[abi:ne180100]();
          }
        }
        return;
      }
      uint64_t v29 = (std::string *)(v32 + 1);
      uint64_t size = v27 - (v32 + 1);
    }
    while (size >= v9);
  }
}

void sub_235E54B48(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *util::strip_leading_trailing@<X0>(void *result@<X0>, void **a2@<X1>, void *a3@<X8>)
{
  unint64_t v4 = *((unsigned __int8 *)result + 23);
  int v5 = (void *)*result;
  unint64_t v6 = result[1];
  if ((v4 & 0x80u) == 0) {
    unsigned int v7 = result;
  }
  else {
    unsigned int v7 = (void *)*result;
  }
  if ((v4 & 0x80u) == 0) {
    uint64_t v8 = *((unsigned __int8 *)result + 23);
  }
  else {
    uint64_t v8 = result[1];
  }
  int v9 = *((char *)a2 + 23);
  if (v9 >= 0) {
    std::string::size_type v10 = a2;
  }
  else {
    std::string::size_type v10 = *a2;
  }
  if (v9 >= 0) {
    size_t v11 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v11 = (size_t)a2[1];
  }
  if (!v8) {
    goto LABEL_26;
  }
  std::string::size_type v12 = result;
  unint64_t v13 = 0;
  if (!v11)
  {
    uint64_t v14 = v8 - 1;
    if ((v4 & 0x80) == 0) {
      goto LABEL_28;
    }
    goto LABEL_24;
  }
  while (1)
  {
    uint64_t result = memchr(v10, *((char *)v7 + v13), v11);
    if (!result) {
      break;
    }
    if (v8 == ++v13) {
      goto LABEL_26;
    }
  }
  if (v13 == -1)
  {
LABEL_26:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return result;
  }
  do
  {
    if (!v8)
    {
      uint64_t v14 = -1;
      if ((v4 & 0x80) == 0) {
        goto LABEL_28;
      }
LABEL_24:
      if (v6 >= v13)
      {
        unint64_t v4 = v6;
        std::string::size_type v12 = v5;
        goto LABEL_29;
      }
LABEL_41:
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t result = memchr(v10, *((char *)v7 + --v8), v11);
  }
  while (result);
  uint64_t v14 = v8;
  if ((v4 & 0x80) != 0) {
    goto LABEL_24;
  }
LABEL_28:
  if (v13 > v4) {
    goto LABEL_41;
  }
LABEL_29:
  unint64_t v15 = v14 - v13 + 1;
  if (v4 - v13 >= v15) {
    size_t v16 = v15;
  }
  else {
    size_t v16 = v4 - v13;
  }
  if (v16 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v16 >= 0x17)
  {
    uint64_t v17 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17) {
      uint64_t v17 = v16 | 7;
    }
    uint64_t v18 = v17 + 1;
    int64_t v19 = operator new(v17 + 1);
    a3[1] = v16;
    a3[2] = v18 | 0x8000000000000000;
    *a3 = v19;
    a3 = v19;
    goto LABEL_39;
  }
  *((unsigned char *)a3 + 23) = v16;
  if (v16) {
LABEL_39:
  }
    uint64_t result = memmove(a3, (char *)v12 + v13, v16);
  *((unsigned char *)a3 + v16) = 0;
  return result;
}

uint64_t util::to_upper(uint64_t result)
{
  uint64_t v1 = *(unsigned __int8 *)(result + 23);
  int v2 = (char)v1;
  uint64_t v3 = (unsigned char *)(result + v1);
  if (v2 >= 0) {
    unint64_t v4 = v3;
  }
  else {
    unint64_t v4 = (unsigned char *)(*(void *)result + *(void *)(result + 8));
  }
  if (v2 >= 0) {
    int v5 = (unsigned char *)result;
  }
  else {
    int v5 = *(unsigned char **)result;
  }
  for (; v5 != v4; ++v5)
  {
    uint64_t result = __toupper((char)*v5);
    unsigned char *v5 = result;
  }
  return result;
}

BOOL util::equal_nocase(const char *a1, const char *a2)
{
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  return strcasecmp(a1, a2) == 0;
}

void util::strip_non_alpha(std::string *a1)
{
  std::string::size_type size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0) {
    uint64_t v3 = (char *)a1;
  }
  else {
    uint64_t v3 = (char *)a1->__r_.__value_.__r.__words[0];
  }
  if ((size & 0x80u) != 0) {
    std::string::size_type size = a1->__r_.__value_.__l.__size_;
  }
  if (!size) {
    goto LABEL_21;
  }
  unint64_t v4 = &v3[size];
  std::string::size_type v5 = size - 1;
  uint64_t v6 = MEMORY[0x263EF8318];
  while (1)
  {
    unsigned int v7 = *v3;
    if ((v7 & 0x80000000) != 0)
    {
      if (!__maskrune(v7, 0x100uLL)) {
        break;
      }
      goto LABEL_9;
    }
    if ((*(_DWORD *)(v6 + 4 * v7 + 60) & 0x100) == 0) {
      break;
    }
LABEL_9:
    ++v3;
    --v5;
    if (v3 == v4) {
      goto LABEL_22;
    }
  }
  if (v3 != v4 && v3 + 1 != v4)
  {
    uint64_t v8 = 1;
    unint64_t v4 = v3;
    while (1)
    {
      unsigned int v9 = v3[v8];
      if ((v9 & 0x80000000) == 0) {
        break;
      }
      if (__maskrune(v9, 0x100uLL)) {
        goto LABEL_16;
      }
LABEL_17:
      ++v8;
      if (!--v5) {
        goto LABEL_22;
      }
    }
    if ((*(_DWORD *)(v6 + 4 * v9 + 60) & 0x100) == 0) {
      goto LABEL_17;
    }
LABEL_16:
    *v4++ = v3[v8];
    goto LABEL_17;
  }
LABEL_21:
  unint64_t v4 = v3;
LABEL_22:
  unint64_t v10 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  int v11 = (char)v10;
  std::string::size_type v12 = a1->__r_.__value_.__r.__words[0];
  unint64_t v13 = (char *)(a1->__r_.__value_.__r.__words[0] + a1->__r_.__value_.__l.__size_);
  if ((v10 & 0x80u) != 0)
  {
    uint64_t v14 = (std::string *)a1->__r_.__value_.__r.__words[0];
  }
  else
  {
    unint64_t v13 = (char *)a1 + v10;
    uint64_t v14 = a1;
  }
  if ((v10 & 0x80u) != 0) {
    unint64_t v10 = a1->__r_.__value_.__l.__size_;
  }
  std::string::size_type v15 = v4 - (char *)v14;
  if (v10 < v4 - (char *)v14) {
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v13 - v4 == -1)
  {
    if (v11 < 0)
    {
      a1->__r_.__value_.__l.__size_ = v15;
      *(unsigned char *)(v12 + v15) = 0;
    }
    else
    {
      *((unsigned char *)&a1->__r_.__value_.__s + 23) = v15 & 0x7F;
      a1->__r_.__value_.__s.__data_[v15] = 0;
    }
  }
  else
  {
    std::string::__erase_external_with_move(a1, v15, v13 - v4);
  }
}

void util::readPlistToCFDictionary(uint64_t a1@<X0>, void *a2@<X8>)
{
  int v2 = (const char *)a1;
  uint64_t v20 = *MEMORY[0x263EF8340];
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  if (*(char *)(a1 + 23) < 0) {
    int v2 = *(const char **)a1;
  }
  std::string::size_type v5 = (__CFError *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], v2, 0x8000100u);
  error[3] = v5;
  uint64_t v6 = CFURLCreateWithFileSystemPath(v4, (CFStringRef)v5, kCFURLPOSIXPathStyle, 0);
  error[2] = v6;
  *a2 = 0;
  if (v6) {
    unsigned int v7 = ctu::SharedRef<__CFURL const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFURL const>::get;
  }
  else {
    unsigned int v7 = 0;
  }
  if (v7)
  {
    uint64_t v8 = CFReadStreamCreateWithFile(v4, v6);
    unsigned int v9 = v8;
    error[1] = v8;
    if (v8) {
      unint64_t v10 = ctu::SharedRef<__CFReadStream,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFReadStream>::get;
    }
    else {
      unint64_t v10 = 0;
    }
    if (!v10) {
      goto LABEL_16;
    }
    CFReadStreamOpen(v8);
    error[0] = 0;
    CFPropertyListRef v11 = CFPropertyListCreateWithStream(v4, v9, 0, 1uLL, 0, error);
    *a2 = v11;
    CFReadStreamClose(v9);
    if (!error[0]) {
      goto LABEL_16;
    }
    CFErrorGetDomain(error[0]);
    memset(buf, 0, sizeof(buf));
    ctu::cf::assign();
    *(_OWORD *)stat __p = *(_OWORD *)buf;
    uint64_t v16 = *(void *)&buf[16];
    std::string::size_type v12 = GetOsLogContext()[1];
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      CFIndex Code = CFErrorGetCode(error[0]);
      uint64_t v14 = __p;
      if (v16 < 0) {
        uint64_t v14 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 138412802;
      *(void *)&uint8_t buf[4] = v6;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = Code;
      *(_WORD *)&buf[22] = 2080;
      int64_t v19 = v14;
      _os_log_error_impl(&dword_235DB9000, v12, OS_LOG_TYPE_ERROR, "Failed to create %@ PropertyList: %ld: %s", buf, 0x20u);
    }
    CFRelease(error[0]);
    *a2 = 0;
    if (v11) {
      CFRelease(v11);
    }
    if ((SHIBYTE(v16) & 0x80000000) == 0)
    {
LABEL_16:
      if (!v9) {
        goto LABEL_18;
      }
      goto LABEL_17;
    }
    operator delete(__p[0]);
    if (v9) {
LABEL_17:
    }
      CFRelease(v9);
  }
LABEL_18:
  if (v6) {
    CFRelease(v6);
  }
  if (v5) {
    CFRelease(v5);
  }
}

void sub_235E55174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::SharedRef<__CFURL const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFURL const>::get(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t ctu::SharedRef<__CFReadStream,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFReadStream>::get(uint64_t a1)
{
  return *(void *)a1;
}

const void **ctu::cf::CFSharedRef<__CFReadStream>::~CFSharedRef(const void **a1)
{
  int v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **ctu::cf::CFSharedRef<__CFURL const>::~CFSharedRef(const void **a1)
{
  int v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void util::moveDirContent(std::string::size_type a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5)
{
  uint64_t v140 = *MEMORY[0x263EF8340];
  v131 = 0;
  v132 = 0;
  uint64_t v133 = 0;
  std::locale::locale(&v125, (const std::locale *)a5);
  long long v126 = *(_OWORD *)(a5 + 8);
  long long v127 = *(_OWORD *)(a5 + 24);
  uint64_t v8 = *(std::__shared_weak_count **)(a5 + 48);
  uint64_t v128 = *(void *)(a5 + 40);
  v129 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v130 = *(void *)(a5 + 56);
  int filtered_files = ctu::fs::get_filtered_files();
  unint64_t v10 = v129;
  if (!v129 || atomic_fetch_add(&v129->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    std::locale::~locale(&v125);
    if (filtered_files) {
      goto LABEL_6;
    }
LABEL_104:
    std::chrono::system_clock::time_point v53 = GetOsLogContext()[1];
    if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
    {
      std::string::size_type v109 = a1;
      if (*(char *)(a1 + 23) < 0) {
        std::string::size_type v109 = *(void *)a1;
      }
      LODWORD(v139.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v139.__r_.__value_.__r.__words + 4) = v109;
      _os_log_error_impl(&dword_235DB9000, v53, OS_LOG_TYPE_ERROR, "Failed to find a content in %s", (uint8_t *)&v139, 0xCu);
    }
    goto LABEL_105;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  std::locale::~locale(&v125);
  if (!filtered_files) {
    goto LABEL_104;
  }
LABEL_6:
  CFPropertyListRef v11 = v131;
  v113 = (char *)v132;
  if (v131 != (char *)v132)
  {
    if (a4)
    {
      while (1)
      {
        memset(&v139, 170, sizeof(v139));
        if (v11[23] < 0)
        {
          std::string::__init_copy_ctor_external(&v139, *(const std::string::value_type **)v11, *((void *)v11 + 1));
        }
        else
        {
          long long v12 = *(_OWORD *)v11;
          v139.__r_.__value_.__r.__words[2] = *((void *)v11 + 2);
          *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v12;
        }
        int v13 = *(char *)(a1 + 23);
        if (v13 >= 0) {
          size_t v14 = *(unsigned __int8 *)(a1 + 23);
        }
        else {
          size_t v14 = *(void *)(a1 + 8);
        }
        unint64_t v15 = v14 + 1;
        memset(&__p, 170, sizeof(__p));
        if (v14 + 1 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v15 >= 0x17) {
          break;
        }
        memset(&__p, 0, sizeof(__p));
        p_p = &__p;
        *((unsigned char *)&__p.__r_.__value_.__s + 23) = v14 + 1;
        if (v14) {
          goto LABEL_24;
        }
LABEL_28:
        *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v14) = 47;
        if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v20 = &v139;
        }
        else {
          uint64_t v20 = (std::string *)v139.__r_.__value_.__r.__words[0];
        }
        if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v139.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v139.__r_.__value_.__l.__size_;
        }
        int v22 = std::string::append(&__p, (const std::string::value_type *)v20, size);
        long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        v124.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        int is_directory = ctu::fs::is_directory();
        if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v124.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_45;
          }
LABEL_36:
          if (is_directory) {
            goto LABEL_37;
          }
LABEL_46:
          uint64_t v29 = GetOsLogContext()[1];
          if (!os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
            goto LABEL_83;
          }
          int v30 = *(char *)(a1 + 23);
          if (v30 >= 0) {
            size_t v31 = *(unsigned __int8 *)(a1 + 23);
          }
          else {
            size_t v31 = *(void *)(a1 + 8);
          }
          unint64_t v32 = v31 + 1;
          memset(&__p, 170, sizeof(__p));
          if (v31 + 1 > 0x7FFFFFFFFFFFFFF7) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          if (v32 >= 0x17)
          {
            int v110 = v30;
            uint64_t v45 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v32 | 7) != 0x17) {
              uint64_t v45 = v32 | 7;
            }
            uint64_t v46 = v45 + 1;
            std::string::size_type v33 = (std::string *)operator new(v45 + 1);
            __p.__r_.__value_.__l.__size_ = v31 + 1;
            __p.__r_.__value_.__r.__words[2] = v46 | 0x8000000000000000;
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
            int v30 = v110;
          }
          else
          {
            memset(&__p, 0, sizeof(__p));
            std::string::size_type v33 = &__p;
            *((unsigned char *)&__p.__r_.__value_.__s + 23) = v31 + 1;
            if (!v31) {
              goto LABEL_93;
            }
          }
          if (v30 >= 0) {
            long long v47 = (const void *)a1;
          }
          else {
            long long v47 = *(const void **)a1;
          }
          memmove(v33, v47, v31);
LABEL_93:
          *(_WORD *)((char *)&v33->__r_.__value_.__l.__data_ + v31) = 47;
          if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::chrono::steady_clock::time_point v48 = &v139;
          }
          else {
            std::chrono::steady_clock::time_point v48 = (std::string *)v139.__r_.__value_.__r.__words[0];
          }
          if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v49 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v49 = v139.__r_.__value_.__l.__size_;
          }
          std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v50 = std::string::append(&__p, (const std::string::value_type *)v48, v49);
          long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
          v124.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v51;
          v50->__r_.__value_.__l.__size_ = 0;
          v50->__r_.__value_.__r.__words[2] = 0;
          v50->__r_.__value_.__r.__words[0] = 0;
          std::chrono::steady_clock::time_point v52 = &v124;
          if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::chrono::steady_clock::time_point v52 = (std::string *)v124.__r_.__value_.__r.__words[0];
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v52;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = a4;
          _os_log_error_impl(&dword_235DB9000, v29, OS_LOG_TYPE_ERROR, "%s is not a directory. So, skip to move it with the depth (%d)", (uint8_t *)&buf, 0x12u);
          if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_82;
          }
LABEL_77:
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_83;
          }
LABEL_9:
          operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_84;
          }
LABEL_10:
          v11 += 24;
          if (v11 == v113) {
            goto LABEL_105;
          }
        }
        else
        {
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_36;
          }
LABEL_45:
          operator delete(__p.__r_.__value_.__l.__data_);
          if (!is_directory) {
            goto LABEL_46;
          }
LABEL_37:
          int v25 = *(char *)(a1 + 23);
          if (v25 >= 0) {
            size_t v26 = *(unsigned __int8 *)(a1 + 23);
          }
          else {
            size_t v26 = *(void *)(a1 + 8);
          }
          unint64_t v27 = v26 + 1;
          memset(&__p, 170, sizeof(__p));
          if (v26 + 1 > 0x7FFFFFFFFFFFFFF7) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          if (v27 >= 0x17)
          {
            uint64_t v34 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v27 | 7) != 0x17) {
              uint64_t v34 = v27 | 7;
            }
            uint64_t v35 = v34 + 1;
            int v28 = (std::string *)operator new(v34 + 1);
            __p.__r_.__value_.__l.__size_ = v26 + 1;
            __p.__r_.__value_.__r.__words[2] = v35 | 0x8000000000000000;
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
          }
          else
          {
            memset(&__p, 0, sizeof(__p));
            int v28 = &__p;
            *((unsigned char *)&__p.__r_.__value_.__s + 23) = v26 + 1;
            if (!v26) {
              goto LABEL_61;
            }
          }
          if (v25 >= 0) {
            int v36 = (const void *)a1;
          }
          else {
            int v36 = *(const void **)a1;
          }
          memmove(v28, v36, v26);
LABEL_61:
          *(_WORD *)((char *)&v28->__r_.__value_.__l.__data_ + v26) = 47;
          if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v37 = &v139;
          }
          else {
            long long v37 = (std::string *)v139.__r_.__value_.__r.__words[0];
          }
          if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v38 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v38 = v139.__r_.__value_.__l.__size_;
          }
          int64_t v39 = std::string::append(&__p, (const std::string::value_type *)v37, v38);
          long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
          v124.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v40;
          v39->__r_.__value_.__l.__size_ = 0;
          v39->__r_.__value_.__r.__words[2] = 0;
          v39->__r_.__value_.__r.__words[0] = 0;
          int v41 = std::string::append(&v124, "/", 1uLL);
          long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
          std::string::size_type v122 = v41->__r_.__value_.__r.__words[2];
          *(_OWORD *)v121 = v42;
          v41->__r_.__value_.__l.__size_ = 0;
          v41->__r_.__value_.__r.__words[2] = 0;
          v41->__r_.__value_.__r.__words[0] = 0;
          if (*(char *)(a2 + 23) < 0) {
            std::string::__init_copy_ctor_external(&v120, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
          }
          else {
            std::string v120 = *(std::string *)a2;
          }
          std::locale::locale(&v114, (const std::locale *)a5);
          long long v115 = *(_OWORD *)(a5 + 8);
          long long v116 = *(_OWORD *)(a5 + 24);
          int64_t v43 = *(std::__shared_weak_count **)(a5 + 48);
          uint64_t v117 = *(void *)(a5 + 40);
          v118 = v43;
          if (v43) {
            atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v119 = *(void *)(a5 + 56);
          util::moveDirContent(v121, &v120, a3, (a4 - 1), &v114);
          unint64_t v44 = v118;
          if (v118 && !atomic_fetch_add(&v118->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
            std::locale::~locale(&v114);
            if ((SHIBYTE(v120.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_75:
              if ((SHIBYTE(v122) & 0x80000000) == 0) {
                goto LABEL_76;
              }
LABEL_81:
              operator delete(v121[0]);
              if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
                goto LABEL_82;
              }
              goto LABEL_77;
            }
          }
          else
          {
            std::locale::~locale(&v114);
            if ((SHIBYTE(v120.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_75;
            }
          }
          operator delete(v120.__r_.__value_.__l.__data_);
          if (SHIBYTE(v122) < 0) {
            goto LABEL_81;
          }
LABEL_76:
          if ((SHIBYTE(v124.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_77;
          }
LABEL_82:
          operator delete(v124.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_9;
          }
LABEL_83:
          if ((SHIBYTE(v139.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_10;
          }
LABEL_84:
          operator delete(v139.__r_.__value_.__l.__data_);
          v11 += 24;
          if (v11 == v113) {
            goto LABEL_105;
          }
        }
      }
      uint64_t v17 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17) {
        uint64_t v17 = v15 | 7;
      }
      uint64_t v18 = v17 + 1;
      p_p = (std::string *)operator new(v17 + 1);
      __p.__r_.__value_.__l.__size_ = v14 + 1;
      __p.__r_.__value_.__r.__words[2] = v18 | 0x8000000000000000;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
LABEL_24:
      if (v13 >= 0) {
        int64_t v19 = (const void *)a1;
      }
      else {
        int64_t v19 = *(const void **)a1;
      }
      memmove(p_p, v19, v14);
      goto LABEL_28;
    }
    while (1)
    {
      memset(&v139, 170, sizeof(v139));
      if (v11[23] < 0)
      {
        std::string::__init_copy_ctor_external(&v139, *(const std::string::value_type **)v11, *((void *)v11 + 1));
      }
      else
      {
        long long v57 = *(_OWORD *)v11;
        v139.__r_.__value_.__r.__words[2] = *((void *)v11 + 2);
        *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v57;
      }
      memset(&v124, 170, sizeof(v124));
      int v58 = *(char *)(a2 + 23);
      if (v58 >= 0) {
        size_t v59 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        size_t v59 = *(void *)(a2 + 8);
      }
      unint64_t v60 = v59 + 1;
      memset(&buf, 170, sizeof(buf));
      if (v59 + 1 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v60 >= 0x17)
      {
        uint64_t v62 = (v60 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v60 | 7) != 0x17) {
          uint64_t v62 = v60 | 7;
        }
        uint64_t v63 = v62 + 1;
        p_std::string buf = (std::string *)operator new(v62 + 1);
        buf.__r_.__value_.__l.__size_ = v59 + 1;
        buf.__r_.__value_.__r.__words[2] = v63 | 0x8000000000000000;
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)p_buf;
      }
      else
      {
        memset(&buf, 0, sizeof(buf));
        p_std::string buf = &buf;
        *((unsigned char *)&buf.__r_.__value_.__s + 23) = v59 + 1;
        if (!v59) {
          goto LABEL_136;
        }
      }
      if (v58 >= 0) {
        std::string v64 = (const void *)a2;
      }
      else {
        std::string v64 = *(const void **)a2;
      }
      memmove(p_buf, v64, v59);
LABEL_136:
      *(_WORD *)((char *)&p_buf->__r_.__value_.__l.__data_ + v59) = 47;
      if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v65 = &v139;
      }
      else {
        long long v65 = (std::string *)v139.__r_.__value_.__r.__words[0];
      }
      if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v66 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v66 = v139.__r_.__value_.__l.__size_;
      }
      uint64_t v67 = std::string::append(&buf, (const std::string::value_type *)v65, v66);
      long long v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v68;
      v67->__r_.__value_.__l.__size_ = 0;
      v67->__r_.__value_.__r.__words[2] = 0;
      v67->__r_.__value_.__r.__words[0] = 0;
      ctu::fs::get_unique_filename();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_144;
        }
      }
      else if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_144;
      }
      operator delete(buf.__r_.__value_.__l.__data_);
LABEL_144:
      int v69 = *(char *)(a1 + 23);
      if (v69 >= 0) {
        size_t v70 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        size_t v70 = *(void *)(a1 + 8);
      }
      unint64_t v71 = v70 + 1;
      memset(&buf, 170, sizeof(buf));
      if (v70 + 1 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v71 >= 0x17)
      {
        uint64_t v73 = (v71 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v71 | 7) != 0x17) {
          uint64_t v73 = v71 | 7;
        }
        uint64_t v74 = v73 + 1;
        xpc_object_t v72 = (std::string *)operator new(v73 + 1);
        buf.__r_.__value_.__l.__size_ = v70 + 1;
        buf.__r_.__value_.__r.__words[2] = v74 | 0x8000000000000000;
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v72;
LABEL_154:
        if (v69 >= 0) {
          long long v75 = (const void *)a1;
        }
        else {
          long long v75 = *(const void **)a1;
        }
        memmove(v72, v75, v70);
        goto LABEL_158;
      }
      memset(&buf, 0, sizeof(buf));
      xpc_object_t v72 = &buf;
      *((unsigned char *)&buf.__r_.__value_.__s + 23) = v70 + 1;
      if (v70) {
        goto LABEL_154;
      }
LABEL_158:
      *(_WORD *)((char *)&v72->__r_.__value_.__l.__data_ + v70) = 47;
      if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::__shared_count v76 = &v139;
      }
      else {
        std::__shared_count v76 = (std::string *)v139.__r_.__value_.__r.__words[0];
      }
      if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v77 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v77 = v139.__r_.__value_.__l.__size_;
      }
      uint64_t v78 = std::string::append(&buf, (const std::string::value_type *)v76, v77);
      long long v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v79;
      v78->__r_.__value_.__l.__size_ = 0;
      v78->__r_.__value_.__r.__words[2] = 0;
      v78->__r_.__value_.__r.__words[0] = 0;
      char v80 = ctu::fs::rename();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_178;
        }
LABEL_166:
        if (v80) {
          goto LABEL_167;
        }
LABEL_179:
        xpc_object_t v86 = GetOsLogContext()[1];
        if (!os_log_type_enabled(v86, OS_LOG_TYPE_ERROR)) {
          goto LABEL_206;
        }
        int v87 = *(char *)(a1 + 23);
        if (v87 >= 0) {
          size_t v88 = *(unsigned __int8 *)(a1 + 23);
        }
        else {
          size_t v88 = *(void *)(a1 + 8);
        }
        unint64_t v89 = v88 + 1;
        memset(&buf, 170, sizeof(buf));
        if (v88 + 1 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v89 >= 0x17)
        {
          uint64_t v100 = (v89 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v89 | 7) != 0x17) {
            uint64_t v100 = v89 | 7;
          }
          uint64_t v101 = v100 + 1;
          v90 = (std::string *)operator new(v100 + 1);
          buf.__r_.__value_.__l.__size_ = v88 + 1;
          buf.__r_.__value_.__r.__words[2] = v101 | 0x8000000000000000;
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v90;
        }
        else
        {
          memset(&buf, 0, sizeof(buf));
          v90 = &buf;
          *((unsigned char *)&buf.__r_.__value_.__s + 23) = v88 + 1;
          if (!v88) {
            goto LABEL_217;
          }
        }
        if (v87 >= 0) {
          xpc_object_t v102 = (const void *)a1;
        }
        else {
          xpc_object_t v102 = *(const void **)a1;
        }
        memmove(v90, v102, v88);
LABEL_217:
        *(_WORD *)((char *)&v90->__r_.__value_.__l.__data_ + v88) = 47;
        if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v103 = &v139;
        }
        else {
          uint64_t v103 = (std::string *)v139.__r_.__value_.__r.__words[0];
        }
        if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v104 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v104 = v139.__r_.__value_.__l.__size_;
        }
        v105 = std::string::append(&buf, (const std::string::value_type *)v103, v104);
        long long v106 = *(_OWORD *)&v105->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v105->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v106;
        v105->__r_.__value_.__l.__size_ = 0;
        v105->__r_.__value_.__r.__words[2] = 0;
        v105->__r_.__value_.__r.__words[0] = 0;
        v107 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          v107 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        v108 = &v124;
        if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          v108 = (std::string *)v124.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)v134 = 136315394;
        v135 = v107;
        __int16 v136 = 2080;
        v137 = v108;
        _os_log_error_impl(&dword_235DB9000, v86, OS_LOG_TYPE_ERROR, "Failed to move %s -> %s", v134, 0x16u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_228;
        }
LABEL_205:
        if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_206;
        }
LABEL_229:
        operator delete(buf.__r_.__value_.__l.__data_);
        if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_117;
        }
LABEL_207:
        if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_208;
        }
LABEL_118:
        v11 += 24;
        if (v11 == v113) {
          break;
        }
      }
      else
      {
        if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_166;
        }
LABEL_178:
        operator delete(buf.__r_.__value_.__l.__data_);
        if ((v80 & 1) == 0) {
          goto LABEL_179;
        }
LABEL_167:
        v81 = GetOsLogContext()[1];
        if (!os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_206;
        }
        int v82 = *(char *)(a1 + 23);
        if (v82 >= 0) {
          size_t v83 = *(unsigned __int8 *)(a1 + 23);
        }
        else {
          size_t v83 = *(void *)(a1 + 8);
        }
        unint64_t v84 = v83 + 1;
        memset(&buf, 170, sizeof(buf));
        if (v83 + 1 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v84 >= 0x17)
        {
          uint64_t v91 = (v84 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v84 | 7) != 0x17) {
            uint64_t v91 = v84 | 7;
          }
          uint64_t v92 = v91 + 1;
          v85 = (std::string *)operator new(v91 + 1);
          buf.__r_.__value_.__l.__size_ = v83 + 1;
          buf.__r_.__value_.__r.__words[2] = v92 | 0x8000000000000000;
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v85;
        }
        else
        {
          memset(&buf, 0, sizeof(buf));
          v85 = &buf;
          *((unsigned char *)&buf.__r_.__value_.__s + 23) = v83 + 1;
          if (!v83) {
            goto LABEL_194;
          }
        }
        if (v82 >= 0) {
          v93 = (const void *)a1;
        }
        else {
          v93 = *(const void **)a1;
        }
        memmove(v85, v93, v83);
LABEL_194:
        *(_WORD *)((char *)&v85->__r_.__value_.__l.__data_ + v83) = 47;
        if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v94 = &v139;
        }
        else {
          v94 = (std::string *)v139.__r_.__value_.__r.__words[0];
        }
        if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v95 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v95 = v139.__r_.__value_.__l.__size_;
        }
        CFTypeRef v96 = std::string::append(&buf, (const std::string::value_type *)v94, v95);
        long long v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v96->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v97;
        v96->__r_.__value_.__l.__size_ = 0;
        v96->__r_.__value_.__r.__words[2] = 0;
        v96->__r_.__value_.__r.__words[0] = 0;
        v98 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          v98 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        v99 = &v124;
        if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          v99 = (std::string *)v124.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)v134 = 136315394;
        v135 = v98;
        __int16 v136 = 2080;
        v137 = v99;
        _os_log_impl(&dword_235DB9000, v81, OS_LOG_TYPE_DEFAULT, "Moved %s -> %s", v134, 0x16u);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_205;
        }
LABEL_228:
        operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_229;
        }
LABEL_206:
        if ((SHIBYTE(v124.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_207;
        }
LABEL_117:
        operator delete(v124.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v139.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_118;
        }
LABEL_208:
        operator delete(v139.__r_.__value_.__l.__data_);
        v11 += 24;
        if (v11 == v113) {
          break;
        }
      }
    }
  }
LABEL_105:
  if (a3) {
    ctu::fs::remove_dir();
  }
  long long v54 = (void **)v131;
  if (v131)
  {
    std::string v55 = v132;
    long long v56 = v131;
    if (v132 != (void **)v131)
    {
      do
      {
        if (*((char *)v55 - 1) < 0) {
          operator delete(*(v55 - 3));
        }
        v55 -= 3;
      }
      while (v55 != v54);
      long long v56 = v131;
    }
    v132 = v54;
    operator delete(v56);
  }
}

void sub_235E560B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::locale a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57,std::locale a58)
{
  if (a57 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v58 - 105) < 0) {
    operator delete(*(void **)(v58 - 128));
  }
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v58 - 216));
  _Unwind_Resume(a1);
}

void util::generateSHA256(const char *a1@<X0>, void *a2@<X1>, unsigned int a3@<W2>, unsigned __int8 **a4@<X8>)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v8 = (unsigned __int8 *)operator new(0x20uLL);
  a4[1] = v8 + 32;
  a4[2] = v8 + 32;
  *(_OWORD *)uint64_t v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *a4 = v8;
  if (!a2)
  {
    size_t v14 = GetOsLogContext()[1];
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      return;
    }
    LOWORD(c.count[0]) = 0;
    unint64_t v15 = "dataIn Buffer is NULL";
    p_CC_SHA256_CTX c = (uint8_t *)&c;
    uint64_t v17 = v14;
    uint32_t v18 = 2;
    goto LABEL_16;
  }
  *(void *)&c.wbuf[14] = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&c.wbuf[6] = v9;
  *(_OWORD *)&c.wbuf[10] = v9;
  *(_OWORD *)&c.hash[6] = v9;
  *(_OWORD *)&c.wbuf[2] = v9;
  *(_OWORD *)c.count = v9;
  *(_OWORD *)&c.hash[2] = v9;
  if (!ctu::fs::get_file_size()) {
    return;
  }
  CC_SHA256_Init(&c);
  unint64_t v10 = a1;
  if (a1[23] < 0) {
    unint64_t v10 = *(const char **)a1;
  }
  int v11 = open(v10, 0);
  if (v11 < 1)
  {
    int64_t v19 = GetOsLogContext()[1];
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
      return;
    }
    if (a1[23] < 0) {
      a1 = *(const char **)a1;
    }
    uint64_t v20 = __error();
    long long v21 = strerror(*v20);
    int v22 = *__error();
    int v23 = *__error();
    *(_DWORD *)std::string buf = 136315906;
    size_t v31 = a1;
    __int16 v32 = 2080;
    std::string::size_type v33 = v21;
    __int16 v34 = 1024;
    int v35 = v22;
    __int16 v36 = 1024;
    int v37 = v23;
    unint64_t v15 = "Failed to open: %s : %s (%d, 0x%x)";
    p_CC_SHA256_CTX c = buf;
    uint64_t v17 = v19;
    uint32_t v18 = 34;
LABEL_16:
    _os_log_error_impl(&dword_235DB9000, v17, OS_LOG_TYPE_ERROR, v15, p_c, v18);
    return;
  }
  unint64_t v12 = 0;
  while (1)
  {
    ssize_t v13 = read(v11, a2, a3);
    if (v13 == -1) {
      break;
    }
    CC_SHA256_Update(&c, a2, v13);
    v12 += v13;
    if (v12 >= 0xAAAAAAAAAAAAAAAALL) {
      goto LABEL_18;
    }
  }
  int64_t v24 = GetOsLogContext()[1];
  if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
  {
    if (a1[23] < 0) {
      a1 = *(const char **)a1;
    }
    int v25 = __error();
    size_t v26 = strerror(*v25);
    int v27 = *__error();
    int v28 = *__error();
    *(_DWORD *)std::string buf = 136315906;
    size_t v31 = a1;
    __int16 v32 = 2080;
    std::string::size_type v33 = v26;
    __int16 v34 = 1024;
    int v35 = v27;
    __int16 v36 = 1024;
    int v37 = v28;
    _os_log_error_impl(&dword_235DB9000, v24, OS_LOG_TYPE_ERROR, "Failed to read: %s : %s (%d,0x%x)", buf, 0x22u);
  }
LABEL_18:
  CC_SHA256_Final(v8, &c);
  close(v11);
}

void sub_235E5658C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_235E565A4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_235E565BC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_235E565D4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_235E565EC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_235E56604(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_235E5661C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_235E56634(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

BOOL util::markPurgeableFile(uint64_t *a1)
{
  uint64_t v1 = a1;
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v15 = 65541;
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    int v2 = open((const char *)a1, 0);
    if ((v2 & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_9:
    unint64_t v12 = GetOsLogContext()[1];
    BOOL result = os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    if (*((char *)v1 + 23) < 0) {
      uint64_t v1 = (uint64_t *)*v1;
    }
    ssize_t v13 = __error();
    size_t v14 = strerror(*v13);
    *(_DWORD *)std::string buf = 136315394;
    uint64_t v17 = v1;
    __int16 v18 = 2080;
    *(void *)int64_t v19 = v14;
    long long v9 = "Failed to open %s : %s";
    unint64_t v10 = v12;
    uint32_t v11 = 22;
    goto LABEL_13;
  }
  int v2 = open((const char *)*a1, 0);
  if (v2 < 0) {
    goto LABEL_9;
  }
LABEL_3:
  int v3 = v2;
  int v4 = ffsctl(v2, 0xC0084A44uLL, &v15, 0);
  close(v3);
  if (v4)
  {
    std::string::size_type v5 = GetOsLogContext()[1];
    BOOL result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    if (*((char *)v1 + 23) < 0) {
      uint64_t v1 = (uint64_t *)*v1;
    }
    unsigned int v7 = __error();
    uint64_t v8 = strerror(*v7);
    *(_DWORD *)std::string buf = 136315906;
    uint64_t v17 = v1;
    __int16 v18 = 1024;
    *(_DWORD *)int64_t v19 = v4;
    *(_WORD *)&_OWORD v19[4] = 2080;
    *(void *)&v19[6] = v8;
    __int16 v20 = 2048;
    uint64_t v21 = v15;
    long long v9 = "Failed to mark %s as purgeable %d (%s) (flags 0x%llx)";
    unint64_t v10 = v5;
    uint32_t v11 = 38;
LABEL_13:
    _os_log_error_impl(&dword_235DB9000, v10, OS_LOG_TYPE_ERROR, v9, buf, v11);
    return 0;
  }
  return 1;
}

BOOL util::checkLogFileAge(uint64_t a1, int64_t a2, uint64_t a3)
{
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v95 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v97 = 0xAAAAAAAAAAAAAA00;
  long long v99 = v4;
  uint64_t v96 = 0;
  long long v98 = 0uLL;
  LOBYTE(v99) = 0;
  BYTE8(v99) = 0;
  uint64_t v100 = 0;
  memset(v94, 0, sizeof(v94));
  uint64_t v5 = *(unsigned __int8 *)(a1 + 23);
  if ((v5 & 0x80u) == 0) {
    uint64_t v6 = (std::sub_match<const char *> *)a1;
  }
  else {
    uint64_t v6 = *(std::sub_match<const char *> **)a1;
  }
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a1 + 8);
  }
  unsigned int v7 = (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v6 + v5);
  unint64_t v103 = 0xAAAAAAAAAAAAAA00;
  __p.tm_gmtoff = 0xAAAAAAAAAAAAAAAALL;
  long long v106 = v4;
  __p.tm_zone = 0;
  uint64_t v102 = 0;
  uint64_t v104 = 0;
  uint64_t v105 = 0;
  LOBYTE(v106) = 0;
  BYTE8(v106) = 0;
  uint64_t v107 = 0;
  memset(&__p, 0, 41);
  int v8 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(a3, v6, (std::sub_match<const char *> *)((char *)v6 + v5), (std::vector<std::csub_match> *)&__p, 4160);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)v94, (uint64_t)v6, v7, (uint64_t *)&__p.tm_sec, 0);
  if (*(void *)&__p.tm_sec)
  {
    *(void *)&__p.tm_hour = *(void *)&__p.tm_sec;
    operator delete(*(void **)&__p.tm_sec);
  }
  if ((_BYTE)v99) {
    int v9 = 0;
  }
  else {
    int v9 = v8;
  }
  if (v9 != 1)
  {
    BOOL v21 = 0;
    uint64_t v22 = *(void **)v94;
    if (!*(void *)v94) {
      return v21;
    }
LABEL_23:
    *(void *)&v94[8] = v22;
    operator delete(v22);
    return v21;
  }
  memset(&__p, 0, sizeof(__p));
  uint64_t v10 = *(void *)v94;
  if (!*(unsigned char *)(*(void *)v94 + 40))
  {
    memset(&v93, 0, sizeof(v93));
    goto LABEL_33;
  }
  uint64_t v12 = *(void *)(*(void *)v94 + 24);
  uint32_t v11 = *(char **)(*(void *)v94 + 32);
  unint64_t v13 = (unint64_t)&v11[-v12];
  if ((unint64_t)&v11[-v12] > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v13 <= 0x16)
  {
    *((unsigned char *)&v93.__r_.__value_.__s + 23) = (_BYTE)v11 - v12;
    size_t v14 = &v93;
    if ((char *)v12 != v11) {
      goto LABEL_16;
    }
LABEL_29:
    unsigned char *v14 = 0;
    goto LABEL_33;
  }
  uint64_t v24 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v13 | 7) != 0x17) {
    uint64_t v24 = v13 | 7;
  }
  uint64_t v25 = v24 + 1;
  size_t v14 = operator new(v24 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v11[-v12];
  v93.__r_.__value_.__r.__words[2] = v25 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
  if ((char *)v12 == v11) {
    goto LABEL_29;
  }
LABEL_16:
  if (v13 < 0x20 || (unint64_t)&v14[-v12] < 0x20)
  {
    uint64_t v15 = v14;
    uint64_t v16 = (char *)v12;
  }
  else
  {
    uint64_t v15 = &v14[v13 & 0xFFFFFFFFFFFFFFE0];
    uint64_t v16 = (char *)(v12 + (v13 & 0xFFFFFFFFFFFFFFE0));
    uint64_t v17 = (long long *)(v12 + 16);
    __int16 v18 = v14 + 16;
    unint64_t v19 = v13 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v20 = *v17;
      *(v18 - 1) = *(v17 - 1);
      _OWORD *v18 = v20;
      v17 += 2;
      v18 += 2;
      v19 -= 32;
    }
    while (v19);
    if (v13 == (v13 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_32;
    }
  }
  do
  {
    char v26 = *v16++;
    *v15++ = v26;
  }
  while (v16 != v11);
LABEL_32:
  unsigned char *v15 = 0;
LABEL_33:
  util::convert<int>(&v93, &__p.tm_year);
  if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    __p.tm_year -= 1900;
    if (*(unsigned char *)(v10 + 64)) {
      goto LABEL_35;
    }
LABEL_45:
    memset(&v93, 0, sizeof(v93));
    goto LABEL_53;
  }
  operator delete(v93.__r_.__value_.__l.__data_);
  __p.tm_year -= 1900;
  if (!*(unsigned char *)(v10 + 64)) {
    goto LABEL_45;
  }
LABEL_35:
  uint64_t v28 = *(void *)(v10 + 48);
  int v27 = *(char **)(v10 + 56);
  unint64_t v29 = (unint64_t)&v27[-v28];
  if ((unint64_t)&v27[-v28] > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v29 <= 0x16)
  {
    *((unsigned char *)&v93.__r_.__value_.__s + 23) = (_BYTE)v27 - v28;
    int v30 = &v93;
    if ((char *)v28 != v27) {
      goto LABEL_38;
    }
LABEL_49:
    *int v30 = 0;
    goto LABEL_53;
  }
  uint64_t v37 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v29 | 7) != 0x17) {
    uint64_t v37 = v29 | 7;
  }
  uint64_t v38 = v37 + 1;
  int v30 = operator new(v37 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v27[-v28];
  v93.__r_.__value_.__r.__words[2] = v38 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
  if ((char *)v28 == v27) {
    goto LABEL_49;
  }
LABEL_38:
  if (v29 < 0x20 || (unint64_t)&v30[-v28] < 0x20)
  {
    size_t v31 = v30;
    __int16 v32 = (char *)v28;
  }
  else
  {
    size_t v31 = &v30[v29 & 0xFFFFFFFFFFFFFFE0];
    __int16 v32 = (char *)(v28 + (v29 & 0xFFFFFFFFFFFFFFE0));
    std::string::size_type v33 = (long long *)(v28 + 16);
    __int16 v34 = v30 + 16;
    unint64_t v35 = v29 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v36 = *v33;
      *(v34 - 1) = *(v33 - 1);
      *__int16 v34 = v36;
      v33 += 2;
      v34 += 2;
      v35 -= 32;
    }
    while (v35);
    if (v29 == (v29 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_52;
    }
  }
  do
  {
    char v39 = *v32++;
    *v31++ = v39;
  }
  while (v32 != v27);
LABEL_52:
  unsigned char *v31 = 0;
LABEL_53:
  util::convert<int>(&v93, &__p.tm_mon);
  if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    --__p.tm_mon;
    if (*(unsigned char *)(v10 + 88)) {
      goto LABEL_55;
    }
LABEL_65:
    memset(&v93, 0, sizeof(v93));
    goto LABEL_73;
  }
  operator delete(v93.__r_.__value_.__l.__data_);
  --__p.tm_mon;
  if (!*(unsigned char *)(v10 + 88)) {
    goto LABEL_65;
  }
LABEL_55:
  uint64_t v41 = *(void *)(v10 + 72);
  long long v40 = *(char **)(v10 + 80);
  unint64_t v42 = (unint64_t)&v40[-v41];
  if ((unint64_t)&v40[-v41] > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v42 <= 0x16)
  {
    *((unsigned char *)&v93.__r_.__value_.__s + 23) = (_BYTE)v40 - v41;
    int64_t v43 = &v93;
    if ((char *)v41 != v40) {
      goto LABEL_58;
    }
LABEL_69:
    unsigned char *v43 = 0;
    goto LABEL_73;
  }
  uint64_t v50 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v42 | 7) != 0x17) {
    uint64_t v50 = v42 | 7;
  }
  uint64_t v51 = v50 + 1;
  int64_t v43 = operator new(v50 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v40[-v41];
  v93.__r_.__value_.__r.__words[2] = v51 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
  if ((char *)v41 == v40) {
    goto LABEL_69;
  }
LABEL_58:
  if (v42 < 0x20 || (unint64_t)&v43[-v41] < 0x20)
  {
    unint64_t v44 = v43;
    uint64_t v45 = (char *)v41;
  }
  else
  {
    unint64_t v44 = &v43[v42 & 0xFFFFFFFFFFFFFFE0];
    uint64_t v45 = (char *)(v41 + (v42 & 0xFFFFFFFFFFFFFFE0));
    uint64_t v46 = (long long *)(v41 + 16);
    long long v47 = v43 + 16;
    unint64_t v48 = v42 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v49 = *v46;
      *(v47 - 1) = *(v46 - 1);
      _OWORD *v47 = v49;
      v46 += 2;
      v47 += 2;
      v48 -= 32;
    }
    while (v48);
    if (v42 == (v42 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_72;
    }
  }
  do
  {
    char v52 = *v45++;
    *v44++ = v52;
  }
  while (v45 != v40);
LABEL_72:
  unsigned char *v44 = 0;
LABEL_73:
  util::convert<int>(&v93, (_DWORD *)((unint64_t)&__p | 0xC));
  if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(v10 + 112)) {
      goto LABEL_75;
    }
LABEL_85:
    memset(&v93, 0, sizeof(v93));
    goto LABEL_93;
  }
  operator delete(v93.__r_.__value_.__l.__data_);
  if (!*(unsigned char *)(v10 + 112)) {
    goto LABEL_85;
  }
LABEL_75:
  uint64_t v54 = *(void *)(v10 + 96);
  std::chrono::system_clock::time_point v53 = *(char **)(v10 + 104);
  unint64_t v55 = (unint64_t)&v53[-v54];
  if ((unint64_t)&v53[-v54] > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v55 <= 0x16)
  {
    *((unsigned char *)&v93.__r_.__value_.__s + 23) = (_BYTE)v53 - v54;
    long long v56 = &v93;
    if ((char *)v54 != v53) {
      goto LABEL_78;
    }
LABEL_89:
    unsigned char *v56 = 0;
    goto LABEL_93;
  }
  uint64_t v63 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v55 | 7) != 0x17) {
    uint64_t v63 = v55 | 7;
  }
  uint64_t v64 = v63 + 1;
  long long v56 = operator new(v63 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v53[-v54];
  v93.__r_.__value_.__r.__words[2] = v64 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
  if ((char *)v54 == v53) {
    goto LABEL_89;
  }
LABEL_78:
  if (v55 < 0x20 || (unint64_t)&v56[-v54] < 0x20)
  {
    long long v57 = v56;
    uint64_t v58 = (char *)v54;
  }
  else
  {
    long long v57 = &v56[v55 & 0xFFFFFFFFFFFFFFE0];
    uint64_t v58 = (char *)(v54 + (v55 & 0xFFFFFFFFFFFFFFE0));
    size_t v59 = (long long *)(v54 + 16);
    unint64_t v60 = v56 + 16;
    unint64_t v61 = v55 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v62 = *v59;
      *(v60 - 1) = *(v59 - 1);
      _OWORD *v60 = v62;
      v59 += 2;
      v60 += 2;
      v61 -= 32;
    }
    while (v61);
    if (v55 == (v55 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_92;
    }
  }
  do
  {
    char v65 = *v58++;
    *v57++ = v65;
  }
  while (v58 != v53);
LABEL_92:
  *long long v57 = 0;
LABEL_93:
  util::convert<int>(&v93, &__p.tm_hour);
  if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(v10 + 136)) {
      goto LABEL_95;
    }
LABEL_105:
    memset(&v93, 0, sizeof(v93));
    goto LABEL_113;
  }
  operator delete(v93.__r_.__value_.__l.__data_);
  if (!*(unsigned char *)(v10 + 136)) {
    goto LABEL_105;
  }
LABEL_95:
  uint64_t v67 = *(void *)(v10 + 120);
  std::string::size_type v66 = *(char **)(v10 + 128);
  unint64_t v68 = (unint64_t)&v66[-v67];
  if ((unint64_t)&v66[-v67] > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v68 <= 0x16)
  {
    *((unsigned char *)&v93.__r_.__value_.__s + 23) = (_BYTE)v66 - v67;
    int v69 = &v93;
    if ((char *)v67 != v66) {
      goto LABEL_98;
    }
LABEL_109:
    *int v69 = 0;
    goto LABEL_113;
  }
  uint64_t v76 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v68 | 7) != 0x17) {
    uint64_t v76 = v68 | 7;
  }
  uint64_t v77 = v76 + 1;
  int v69 = operator new(v76 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v66[-v67];
  v93.__r_.__value_.__r.__words[2] = v77 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v69;
  if ((char *)v67 == v66) {
    goto LABEL_109;
  }
LABEL_98:
  if (v68 < 0x20 || (unint64_t)&v69[-v67] < 0x20)
  {
    size_t v70 = v69;
    unint64_t v71 = (char *)v67;
  }
  else
  {
    size_t v70 = &v69[v68 & 0xFFFFFFFFFFFFFFE0];
    unint64_t v71 = (char *)(v67 + (v68 & 0xFFFFFFFFFFFFFFE0));
    xpc_object_t v72 = (long long *)(v67 + 16);
    uint64_t v73 = v69 + 16;
    unint64_t v74 = v68 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v75 = *v72;
      *(v73 - 1) = *(v72 - 1);
      *uint64_t v73 = v75;
      v72 += 2;
      v73 += 2;
      v74 -= 32;
    }
    while (v74);
    if (v68 == (v68 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_112;
    }
  }
  do
  {
    char v78 = *v71++;
    *v70++ = v78;
  }
  while (v71 != v66);
LABEL_112:
  unsigned char *v70 = 0;
LABEL_113:
  util::convert<int>(&v93, &__p.tm_min);
  if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(v10 + 160)) {
      goto LABEL_115;
    }
LABEL_125:
    memset(&v93, 0, sizeof(v93));
    goto LABEL_133;
  }
  operator delete(v93.__r_.__value_.__l.__data_);
  if (!*(unsigned char *)(v10 + 160)) {
    goto LABEL_125;
  }
LABEL_115:
  uint64_t v80 = *(void *)(v10 + 144);
  long long v79 = *(char **)(v10 + 152);
  unint64_t v81 = (unint64_t)&v79[-v80];
  if ((unint64_t)&v79[-v80] > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v81 <= 0x16)
  {
    *((unsigned char *)&v93.__r_.__value_.__s + 23) = (_BYTE)v79 - v80;
    int v82 = &v93;
    if ((char *)v80 != v79) {
      goto LABEL_118;
    }
LABEL_129:
    unsigned char *v82 = 0;
    goto LABEL_133;
  }
  uint64_t v89 = (v81 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v81 | 7) != 0x17) {
    uint64_t v89 = v81 | 7;
  }
  uint64_t v90 = v89 + 1;
  int v82 = operator new(v89 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v79[-v80];
  v93.__r_.__value_.__r.__words[2] = v90 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v82;
  if ((char *)v80 == v79) {
    goto LABEL_129;
  }
LABEL_118:
  if (v81 < 0x20 || (unint64_t)&v82[-v80] < 0x20)
  {
    size_t v83 = v82;
    unint64_t v84 = (char *)v80;
  }
  else
  {
    size_t v83 = &v82[v81 & 0xFFFFFFFFFFFFFFE0];
    unint64_t v84 = (char *)(v80 + (v81 & 0xFFFFFFFFFFFFFFE0));
    v85 = (long long *)(v80 + 16);
    xpc_object_t v86 = v82 + 16;
    unint64_t v87 = v81 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v88 = *v85;
      *(v86 - 1) = *(v85 - 1);
      *xpc_object_t v86 = v88;
      v85 += 2;
      v86 += 2;
      v87 -= 32;
    }
    while (v87);
    if (v81 == (v81 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_132;
    }
  }
  do
  {
    char v91 = *v84++;
    *v83++ = v91;
  }
  while (v84 != v79);
LABEL_132:
  unsigned char *v83 = 0;
LABEL_133:
  util::convert<int>(&v93, &__p);
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v93.__r_.__value_.__l.__data_);
  }
  __p.tm_isdst = -1;
  time_t v92 = mktime(&__p);
  v93.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
  v93.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  gettimeofday((timeval *)&v93, 0);
  BOOL v21 = (int64_t)(v93.__r_.__value_.__r.__words[0] - v92) > a2;
  uint64_t v22 = *(void **)v94;
  if (*(void *)v94) {
    goto LABEL_23;
  }
  return v21;
}

void sub_235E5706C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t util::convert<int>(const std::string *a1, _DWORD *a2)
{
  if ((SHIBYTE(a1->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    uint64_t result = strcasecmp((const char *)a1, "false");
    if (!result) {
      goto LABEL_29;
    }
    uint64_t result = strcasecmp((const char *)a1, "off");
    if (!result) {
      goto LABEL_29;
    }
    uint64_t result = strcasecmp((const char *)a1, "no");
    if (!result) {
      goto LABEL_29;
    }
    if (strcasecmp((const char *)a1, "true")
      && strcasecmp((const char *)a1, "on")
      && strcasecmp((const char *)a1, "yes")
      && strcasecmp((const char *)a1, "full")
      && strcasecmp((const char *)a1, "streaming"))
    {
      uint64_t v5 = (const char *)a1;
      if (!strcasecmp((const char *)a1, "lite")) {
        goto LABEL_31;
      }
      goto LABEL_21;
    }
LABEL_28:
    uint64_t result = 1;
LABEL_29:
    *a2 = result;
    return result;
  }
  uint64_t v5 = (const char *)a1->__r_.__value_.__r.__words[0];
  uint64_t result = strcasecmp(a1->__r_.__value_.__l.__data_, "false");
  if (!result) {
    goto LABEL_29;
  }
  uint64_t result = strcasecmp(v5, "off");
  if (!result) {
    goto LABEL_29;
  }
  uint64_t result = strcasecmp(v5, "no");
  if (!result) {
    goto LABEL_29;
  }
  if (!strcasecmp(v5, "true")
    || !strcasecmp(v5, "on")
    || !strcasecmp(v5, "yes")
    || !strcasecmp(v5, "full")
    || !strcasecmp(v5, "streaming"))
  {
    goto LABEL_28;
  }
  if (!strcasecmp(v5, "lite"))
  {
LABEL_31:
    uint64_t result = 2;
    goto LABEL_29;
  }
LABEL_21:
  if (!strcasecmp(v5, "background")) {
    goto LABEL_31;
  }
  size_t __idx = 0xAAAAAAAAAAAAAAAALL;
  uint64_t result = std::stol(a1, &__idx, 10);
  std::string::size_type size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0) {
    std::string::size_type size = a1->__r_.__value_.__l.__size_;
  }
  if (__idx == size && result >= (uint64_t)0xFFFFFFFF80000000 && result <= 0x7FFFFFFF) {
    goto LABEL_29;
  }
  return result;
}

void sub_235E57308(void *a1)
{
}

void util::findBasebandLogInfoFile(const void **a1@<X0>, long long **a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  uint64_t v46 = a3;
  a3[2] = 0;
  int v3 = *a2;
  long long v47 = a2[1];
  if (v3 == v47) {
    return;
  }
  while (1)
  {
    memset(&v49, 170, sizeof(v49));
    if (*((char *)v3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v49, *(const std::string::value_type **)v3, *((void *)v3 + 1));
    }
    else
    {
      long long v5 = *v3;
      v49.__r_.__value_.__r.__words[2] = *((void *)v3 + 2);
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v5;
    }
    int v6 = *((char *)a1 + 23);
    if (v6 >= 0) {
      size_t v7 = *((unsigned __int8 *)a1 + 23);
    }
    else {
      size_t v7 = (size_t)a1[1];
    }
    int v8 = SHIBYTE(v49.__r_.__value_.__r.__words[2]);
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v49.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v49.__r_.__value_.__l.__size_;
    }
    unint64_t v10 = size + v7;
    memset(__dst, 170, sizeof(__dst));
    if (size + v7 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v10 <= 0x16)
    {
      memset(__dst, 0, sizeof(__dst));
      uint32_t v11 = __dst;
      HIBYTE(__dst[2]) = size + v7;
      if (!v7) {
        goto LABEL_20;
      }
LABEL_16:
      if (v6 >= 0) {
        uint64_t v12 = a1;
      }
      else {
        uint64_t v12 = *a1;
      }
      memmove(v11, v12, v7);
      goto LABEL_20;
    }
    uint64_t v18 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17) {
      uint64_t v18 = v10 | 7;
    }
    uint64_t v19 = v18 + 1;
    uint32_t v11 = (void **)operator new(v18 + 1);
    __dst[1] = (void *)(size + v7);
    __dst[2] = (void *)(v19 | 0x8000000000000000);
    __dst[0] = v11;
    if (v7) {
      goto LABEL_16;
    }
LABEL_20:
    unint64_t v13 = (char *)v11 + v7;
    if (size)
    {
      if (v8 >= 0) {
        size_t v14 = &v49;
      }
      else {
        size_t v14 = (std::string *)v49.__r_.__value_.__r.__words[0];
      }
      memmove(v13, v14, size);
    }
    v13[size] = 0;
    v15.tv_seCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
    v15.tv_nseCC_SHA256_CTX c = 0xAAAAAAAAAAAAAAAALL;
    *(timespec *)&v50.st_blksize_t size = v15;
    *(timespec *)v50.st_qspare = v15;
    v50.st_birthtimespeCC_SHA256_CTX c = v15;
    *(timespec *)&v50.st_size_t size = v15;
    v50.st_mtimespeCC_SHA256_CTX c = v15;
    v50.st_ctimespeCC_SHA256_CTX c = v15;
    *(timespec *)&v50.st_uid = v15;
    v50.st_atimespeCC_SHA256_CTX c = v15;
    *(timespec *)&v50.st_dev = v15;
    if (SHIBYTE(__dst[2]) >= 0) {
      uint64_t v16 = (const char *)__dst;
    }
    else {
      uint64_t v16 = (const char *)__dst[0];
    }
    if (stat(v16, &v50)
      || (SHIBYTE(__dst[2]) >= 0 ? (long long v20 = (const char *)__dst) : (long long v20 = (const char *)__dst[0]),
          BOOL v21 = opendir(v20),
          (uint64_t v22 = v21) == 0))
    {
      char v17 = HIBYTE(__dst[2]);
      goto LABEL_30;
    }
    int v23 = readdir(v21);
    closedir(v22);
    char v17 = HIBYTE(__dst[2]);
    if (v23) {
      break;
    }
LABEL_30:
    if (v17 < 0)
    {
      operator delete(__dst[0]);
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
LABEL_59:
      }
        operator delete(v49.__r_.__value_.__l.__data_);
    }
    else if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    {
      goto LABEL_59;
    }
    int v3 = (long long *)((char *)v3 + 24);
    if (v3 == v47) {
      return;
    }
  }
  if ((HIBYTE(__dst[2]) & 0x80) == 0)
  {
    if (HIBYTE(__dst[2]) <= 4u) {
      goto LABEL_99;
    }
    uint64_t v24 = (_DWORD *)((char *)__dst + HIBYTE(__dst[2]) - 5);
    if (*v24 == 1885626669 && *((unsigned char *)__dst + HIBYTE(__dst[2]) - 1) == 108) {
      goto LABEL_79;
    }
    if (*v24 == 1935962413 && *((unsigned char *)__dst + HIBYTE(__dst[2]) - 1) == 115) {
      goto LABEL_79;
    }
    if (*v24 == 1634296877 && *((unsigned char *)__dst + HIBYTE(__dst[2]) - 1) == 103) {
      goto LABEL_79;
    }
    if (HIBYTE(__dst[2]) < 9u) {
      goto LABEL_99;
    }
    uint64_t v28 = __dst;
    unint64_t v29 = (void *)HIBYTE(__dst[2]);
    goto LABEL_74;
  }
  unint64_t v29 = __dst[1];
  if (__dst[1] < (void *)5) {
    goto LABEL_99;
  }
  uint64_t v28 = (void **)__dst[0];
  int v30 = (char *)__dst[1] + (unint64_t)__dst[0] - 5;
  if ((*v30 != 1885626669 || *((unsigned char *)__dst[1] + (unint64_t)__dst[0] - 1) != 108)
    && (*v30 != 1935962413 || *((unsigned char *)__dst[1] + (unint64_t)__dst[0] - 1) != 115)
    && (*v30 != 1634296877 || *((unsigned char *)__dst[1] + (unint64_t)__dst[0] - 1) != 103))
  {
    if (__dst[1] < (void *)9) {
LABEL_99:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
LABEL_74:
    __int16 v34 = (char *)v28 + (void)v29;
    uint64_t v35 = *(void *)(v34 - 9);
    int v36 = *(v34 - 1);
    if (v35 == 0x636172742D62622DLL && v36 == 101) {
      goto LABEL_79;
    }
    goto LABEL_30;
  }
LABEL_79:
  int v38 = SHIBYTE(v49.__r_.__value_.__r.__words[2]);
  if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v39 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v39 = v49.__r_.__value_.__l.__size_;
  }
  unint64_t v40 = v39 + 9;
  memset(&v50, 170, 24);
  if (v39 + 9 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v40 >= 0x17)
  {
    uint64_t v42 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v40 | 7) != 0x17) {
      uint64_t v42 = v40 | 7;
    }
    uint64_t v43 = v42 + 1;
    uint64_t v41 = operator new(v42 + 1);
    v50.st_ino = v39 + 9;
    *(void *)&v50.st_uid = v43 | 0x8000000000000000;
    *(void *)&v50.st_dev = v41;
  }
  else
  {
    memset(&v50, 0, 24);
    uint64_t v41 = &v50;
    HIBYTE(v50.st_gid) = v39 + 9;
    if (!v39) {
      goto LABEL_93;
    }
  }
  if (v38 >= 0) {
    unint64_t v44 = &v49;
  }
  else {
    unint64_t v44 = (std::string *)v49.__r_.__value_.__r.__words[0];
  }
  memmove(v41, v44, v39);
LABEL_93:
  strcpy((char *)v41 + v39, "/info.txt");
  uint64_t v45 = v46;
  *uint64_t v46 = *(_OWORD *)&v50.st_dev;
  *((void *)v45 + 2) = *(void *)&v50.st_uid;
  if ((v17 & 0x80) == 0)
  {
    if ((v38 & 0x80) == 0) {
      return;
    }
LABEL_97:
    operator delete(v49.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__dst[0]);
  if ((*((unsigned char *)&v49.__r_.__value_.__s + 23) & 0x80) != 0) {
    goto LABEL_97;
  }
}

void sub_235E577A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
  {
    operator delete(__p);
    if ((a23 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a18);
  _Unwind_Resume(exception_object);
}

BOOL util::isDumpForSysdiagnose(uint64_t a1, uint64_t a2)
{
  __p[73] = *(void **)MEMORY[0x263EF8340];
  unint64_t v74 = 0;
  long long v75 = 0;
  uint64_t v76 = 0;
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v72[32] = v2;
  long long v73 = v2;
  *(_OWORD *)xpc_object_t v72 = v2;
  *(_OWORD *)&v72[16] = v2;
  int v3 = *(char *)(a2 + 23);
  if (v3 >= 0) {
    size_t v4 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v4 = *(void *)(a2 + 8);
  }
  unint64_t v5 = v4 + 2;
  memset(&v71, 170, sizeof(v71));
  if (v4 + 2 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  int v6 = (const void **)a2;
  if (v5 >= 0x17)
  {
    uint64_t v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v9 = v5 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint32_t v11 = operator new(v9 + 1);
    v71.__r_.__value_.__l.__size_ = v4 + 2;
    v71.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    v71.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
    _WORD *v11 = 10798;
    int v8 = (std::string::value_type *)(v11 + 1);
  }
  else
  {
    v71.__r_.__value_.__r.__words[2] = 0;
    *((unsigned char *)&v71.__r_.__value_.__s + 23) = v4 + 2;
    int v8 = &v71.__r_.__value_.__s.__data_[2];
    *(_OWORD *)&v71.__r_.__value_.__l.__data_ = 0x2A2EuLL;
    if (!v4) {
      goto LABEL_15;
    }
  }
  if (v3 >= 0) {
    uint64_t v12 = v6;
  }
  else {
    uint64_t v12 = (const void **)*v6;
  }
  memmove(v8, v12, v4);
LABEL_15:
  v8[v4] = 0;
  unint64_t v13 = std::string::append(&v71, ".*", 2uLL);
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  __p[2] = (void *)v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)tm __p = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v72, (uint64_t)__p, 0);
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v71.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_17;
    }
LABEL_20:
    operator delete(v71.__r_.__value_.__l.__data_);
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_21;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_20;
  }
LABEL_17:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
LABEL_18:
    std::string v70 = *(std::string *)a1;
    goto LABEL_22;
  }
LABEL_21:
  std::string::__init_copy_ctor_external(&v70, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
LABEL_22:
  std::locale::locale(&v64, (const std::locale *)v72);
  long long v65 = *(_OWORD *)&v72[8];
  long long v66 = *(_OWORD *)&v72[24];
  uint64_t v67 = *(void *)&v72[40];
  unint64_t v68 = (std::__shared_weak_count *)v73;
  if ((void)v73) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v73 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v69 = *((void *)&v73 + 1);
  BOOL FilteredFiles = support::fs::getFilteredFiles((const char *)&v70, (uint64_t)&v64, (uint64_t)&v74, 0);
  uint64_t v16 = v68;
  if (v68 && !atomic_fetch_add(&v68->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    std::locale::~locale(&v64);
    if ((SHIBYTE(v70.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_27:
      if (FilteredFiles) {
        goto LABEL_28;
      }
LABEL_32:
      BOOL v17 = 0;
      goto LABEL_118;
    }
  }
  else
  {
    std::locale::~locale(&v64);
    if ((SHIBYTE(v70.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_27;
    }
  }
  operator delete(v70.__r_.__value_.__l.__data_);
  if (!FilteredFiles) {
    goto LABEL_32;
  }
LABEL_28:
  memset(&v71, 170, sizeof(v71));
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v63, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v63 = *(std::string *)a1;
  }
  unint64_t v60 = 0;
  unint64_t v61 = 0;
  long long v62 = 0;
  uint64_t v18 = (char *)v74;
  uint64_t v19 = v75;
  __p[0] = &v60;
  __p[1] = (void *)0xAAAAAAAAAAAAAA00;
  int64_t v20 = v75 - (unsigned char *)v74;
  if (v75 != v74)
  {
    unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * (v20 >> 3);
    if (v21 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v22 = (char *)operator new(v20);
    uint64_t v23 = 0;
    unint64_t v60 = v22;
    unint64_t v61 = v22;
    long long v62 = &v22[24 * v21];
    do
    {
      uint64_t v25 = (std::string *)&v22[v23];
      char v26 = &v18[v23];
      if (v18[v23 + 23] < 0)
      {
        std::string::__init_copy_ctor_external(v25, *(const std::string::value_type **)v26, *((void *)v26 + 1));
      }
      else
      {
        long long v24 = *(_OWORD *)v26;
        v25->__r_.__value_.__r.__words[2] = *((void *)v26 + 2);
        *(_OWORD *)&v25->__r_.__value_.__l.__data_ = v24;
      }
      v23 += 24;
    }
    while (&v18[v23] != v19);
    unint64_t v61 = &v22[v23];
  }
  util::findBasebandLogInfoFile((const void **)&v63.__r_.__value_.__l.__data_, (long long **)&v60, &v71);
  int v27 = (void **)v60;
  if (v60)
  {
    uint64_t v28 = (void **)v61;
    unint64_t v29 = v60;
    if (v61 != v60)
    {
      do
      {
        if (*((char *)v28 - 1) < 0) {
          operator delete(*(v28 - 3));
        }
        v28 -= 3;
      }
      while (v28 != v27);
      unint64_t v29 = v60;
    }
    unint64_t v61 = (char *)v27;
    operator delete(v29);
  }
  if ((SHIBYTE(v63.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    int v30 = SHIBYTE(v71.__r_.__value_.__r.__words[2]);
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v71.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v71.__r_.__value_.__l.__size_;
    }
    if (size) {
      goto LABEL_55;
    }
LABEL_102:
    uint64_t v51 = GetOsLogContext()[1];
    if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)v6 + 23) < 0) {
        int v6 = (const void **)*v6;
      }
      LODWORD(__p[0]) = 136315138;
      *(void **)((char *)__p + 4) = v6;
      _os_log_impl(&dword_235DB9000, v51, OS_LOG_TYPE_DEFAULT, "No baseband info file found for %s", (uint8_t *)__p, 0xCu);
    }
    BOOL v17 = 0;
    if ((v30 & 0x80) != 0) {
      goto LABEL_117;
    }
    goto LABEL_118;
  }
  operator delete(v63.__r_.__value_.__l.__data_);
  int v30 = SHIBYTE(v71.__r_.__value_.__r.__words[2]);
  if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(v71.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = v71.__r_.__value_.__l.__size_;
  }
  if (!size) {
    goto LABEL_102;
  }
LABEL_55:
  memset(__p, 170, 0x240uLL);
  int v32 = *(char *)(a1 + 23);
  if (v32 >= 0) {
    size_t v33 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    size_t v33 = *(void *)(a1 + 8);
  }
  unint64_t v34 = v33 + size;
  memset(__dst, 170, 24);
  if (v33 + size > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v34 <= 0x16)
  {
    memset(__dst, 0, 24);
    uint64_t v35 = __dst;
    HIBYTE(__dst[2]) = v33 + size;
    if (!v33) {
      goto LABEL_65;
    }
    goto LABEL_61;
  }
  uint64_t v52 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v34 | 7) != 0x17) {
    uint64_t v52 = v34 | 7;
  }
  uint64_t v53 = v52 + 1;
  uint64_t v35 = (void **)operator new(v52 + 1);
  __dst[1] = (void *)(v33 + size);
  __dst[2] = (void *)(v53 | 0x8000000000000000);
  __dst[0] = v35;
  if (v33)
  {
LABEL_61:
    if (v32 >= 0) {
      int v36 = (const void *)a1;
    }
    else {
      int v36 = *(const void **)a1;
    }
    memmove(v35, v36, v33);
  }
LABEL_65:
  uint64_t v37 = (char *)v35 + v33;
  if (v30 >= 0) {
    int v38 = &v71;
  }
  else {
    int v38 = (std::string *)v71.__r_.__value_.__r.__words[0];
  }
  memmove(v37, v38, size);
  v37[size] = 0;
  std::ifstream::basic_ifstream((uint64_t *)__p);
  if (SHIBYTE(__dst[2]) < 0)
  {
    operator delete(__dst[0]);
    if (__p[17]) {
      goto LABEL_70;
    }
LABEL_113:
    uint64_t v54 = GetOsLogContext()[1];
    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__dst[0]) = 136315138;
      *(void **)((char *)__dst + 4) = v38;
      _os_log_error_impl(&dword_235DB9000, v54, OS_LOG_TYPE_ERROR, "Failed to open info file: %s", (uint8_t *)__dst, 0xCu);
    }
    BOOL v17 = 0;
    goto LABEL_116;
  }
  if (!__p[17]) {
    goto LABEL_113;
  }
LABEL_70:
  std::istream::seekg();
  memset(__dst, 170, 24);
  size_t v39 = __dst;
  support::fs::readCurrentLine(__p, __dst);
  uint64_t v40 = HIBYTE(__dst[2]);
  int v41 = SHIBYTE(__dst[2]);
  uint64_t v42 = __dst[0];
  if (SHIBYTE(__dst[2]) < 0)
  {
    uint64_t v40 = (uint64_t)__dst[1];
    size_t v39 = (void **)__dst[0];
  }
  uint64_t v43 = (char *)v39 + v40;
  if (v40 >= 35)
  {
    unint64_t v44 = v39;
    do
    {
      uint64_t v45 = (char *)memchr(v44, 98, v40 - 34);
      if (!v45) {
        break;
      }
      if (*(void *)v45 == 0x6320676F6C206262
        && *((void *)v45 + 1) == 0x6F697463656C6C6FLL
        && *((void *)v45 + 2) == 0x20726F66202D206ELL
        && *((void *)v45 + 3) == 0x6E67616964737973
        && *(void *)(v45 + 27) == 0x65736F6E67616964)
      {
        goto LABEL_90;
      }
      unint64_t v44 = (void **)(v45 + 1);
      uint64_t v40 = v43 - (char *)v44;
    }
    while (v43 - (char *)v44 > 34);
  }
  uint64_t v45 = v43;
LABEL_90:
  BOOL v17 = v45 != v43 && v45 - (char *)v39 != -1;
  if (v41 < 0) {
    operator delete(v42);
  }
LABEL_116:
  __p[0] = *(void **)MEMORY[0x263F8C2A8];
  *(void **)((char *)__p + *((void *)__p[0] - 3)) = *(void **)(MEMORY[0x263F8C2A8] + 24);
  MEMORY[0x237DF6EF0](&__p[2]);
  std::istream::~istream();
  MEMORY[0x237DF7120](&__p[53]);
  if ((*((unsigned char *)&v71.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_117:
  }
    operator delete(v71.__r_.__value_.__l.__data_);
LABEL_118:
  unint64_t v55 = (std::__shared_weak_count *)v73;
  if ((void)v73 && !atomic_fetch_add((atomic_ullong *volatile)(v73 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
    std::__shared_weak_count::__release_weak(v55);
  }
  std::locale::~locale((std::locale *)v72);
  long long v56 = (void **)v74;
  if (v74)
  {
    long long v57 = (void **)v75;
    uint64_t v58 = v74;
    if (v75 != v74)
    {
      do
      {
        if (*((char *)v57 - 1) < 0) {
          operator delete(*(v57 - 3));
        }
        v57 -= 3;
      }
      while (v57 != v56);
      uint64_t v58 = v74;
    }
    long long v75 = (char *)v56;
    operator delete(v58);
  }
  return v17;
}

void sub_235E58068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, std::locale a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,std::locale a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47)
{
  std::ifstream::~ifstream(&a47);
  if (v47 < 0)
  {
    operator delete(__p);
    std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a31);
    std::vector<std::string>::~vector[abi:ne180100](&a40);
    _Unwind_Resume(a1);
  }
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a31);
  std::vector<std::string>::~vector[abi:ne180100](&a40);
  _Unwind_Resume(a1);
}

void util::findLastLogDumpTimestamp(util *this@<X0>, const char *__s@<X1>, const char *a3@<X2>, int a4@<W3>, char *a5@<X4>, std::string *a6@<X8>)
{
  unsigned int v8 = a3;
  uint64_t v10 = a6;
  uint64_t v150 = *MEMORY[0x263EF8340];
  a6->__r_.__value_.__r.__words[0] = 0;
  a6->__r_.__value_.__l.__size_ = 0;
  a6->__r_.__value_.__r.__words[2] = 0;
  v138 = 0;
  std::string v139 = 0;
  uint64_t v140 = 0;
  memset(v137, 170, sizeof(v137));
  size_t v11 = strlen(__s);
  unint64_t v103 = v10;
  if (v11 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v12 = v11;
  if (v11 >= 0x17)
  {
    uint64_t v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v14 = v11 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (long long *)operator new(v14 + 1);
    *((void *)&__dst + 1) = v12;
    *(void *)v142 = v15 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_8;
  }
  v142[7] = v11;
  p_dst = &__dst;
  if (v11) {
LABEL_8:
  }
    memcpy(p_dst, __s, v12);
  *((unsigned char *)p_dst + v12) = 0;
  uint64_t v16 = std::string::append((std::string *)&__dst, ".*", 2uLL);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v137[2] = (void *)v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)v137 = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if ((v142[7] & 0x80000000) != 0) {
    operator delete((void *)__dst);
  }
  *(void *)&long long v18 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v135[32] = v18;
  long long v136 = v18;
  *(_OWORD *)v135 = v18;
  *(_OWORD *)&v135[16] = v18;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v135, (uint64_t)v137, 0);
  *(void *)&long long v19 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v133[32] = v19;
  long long v134 = v19;
  *(_OWORD *)uint64_t v133 = v19;
  *(_OWORD *)&v133[16] = v19;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)v133, "(\\d{4})-(\\d{2})-(\\d{2})-(\\d{2})-(\\d{2})-(\\d{2})-(\\d{3})", 0);
  BOOL v104 = a5 == 0;
  size_t v20 = strlen((const char *)this);
  if (v20 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unint64_t v21 = (void *)v20;
  if (v20 >= 0x17)
  {
    uint64_t v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17) {
      uint64_t v23 = v20 | 7;
    }
    uint64_t v24 = v23 + 1;
    uint64_t v22 = operator new(v23 + 1);
    unint64_t v132 = v24 | 0x8000000000000000;
    __p[0] = v22;
    __p[1] = v21;
    goto LABEL_18;
  }
  HIBYTE(v132) = v20;
  uint64_t v22 = __p;
  if (v20) {
LABEL_18:
  }
    memcpy(v22, this, (size_t)v21);
  *((unsigned char *)v21 + (void)v22) = 0;
  std::locale::locale(&v125, (const std::locale *)v135);
  long long v126 = *(_OWORD *)&v135[8];
  long long v127 = *(_OWORD *)&v135[24];
  uint64_t v128 = *(void *)&v135[40];
  v129 = (std::__shared_weak_count *)v136;
  if ((void)v136) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v136 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v130 = *((void *)&v136 + 1);
  BOOL FilteredFiles = support::fs::getFilteredFiles((const char *)__p, (uint64_t)&v125, (uint64_t)&v138, 0);
  char v26 = v129;
  if (v129 && !atomic_fetch_add(&v129->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
    std::locale::~locale(&v125);
    if ((SHIBYTE(v132) & 0x80000000) == 0)
    {
LABEL_24:
      if (!FilteredFiles) {
        goto LABEL_167;
      }
      goto LABEL_28;
    }
  }
  else
  {
    std::locale::~locale(&v125);
    if ((SHIBYTE(v132) & 0x80000000) == 0) {
      goto LABEL_24;
    }
  }
  operator delete(__p[0]);
  if (!FilteredFiles) {
    goto LABEL_167;
  }
LABEL_28:
  unint64_t v28 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (v139 - v138));
  if (v139 == v138) {
    uint64_t v29 = 0;
  }
  else {
    uint64_t v29 = v28;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*,false>((unint64_t)v138, v139, v29, 1, v27);
  memset(&v124, 0, sizeof(v124));
  int v30 = v138;
  uint64_t v102 = v139;
  if (v138 == v139)
  {
LABEL_167:
    if (!v8) {
      goto LABEL_184;
    }
LABEL_168:
    if (SHIBYTE(v10->__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v111, v10->__r_.__value_.__l.__data_, v10->__r_.__value_.__l.__size_);
    }
    else {
      std::string v111 = *v10;
    }
    std::locale::locale(&v105, (const std::locale *)v133);
    long long v106 = *(_OWORD *)&v133[8];
    long long v107 = *(_OWORD *)&v133[24];
    uint64_t v108 = *(void *)&v133[40];
    std::string::size_type v109 = (std::__shared_weak_count *)v134;
    if ((void)v134) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v134 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v110 = *((void *)&v134 + 1);
    BOOL v91 = util::checkLogFileAge((uint64_t)&v111, v8, (uint64_t)&v105);
    time_t v92 = v109;
    if (v109 && !atomic_fetch_add(&v109->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
      std::locale::~locale(&v105);
      if ((SHIBYTE(v111.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_176:
        if (!v91) {
          goto LABEL_184;
        }
LABEL_180:
        if (SHIBYTE(v10->__r_.__value_.__r.__words[2]) < 0)
        {
          *v10->__r_.__value_.__l.__data_ = 0;
          v10->__r_.__value_.__l.__size_ = 0;
        }
        else
        {
          v10->__r_.__value_.__s.__data_[0] = 0;
          *((unsigned char *)&v10->__r_.__value_.__s + 23) = 0;
        }
        goto LABEL_184;
      }
    }
    else
    {
      std::locale::~locale(&v105);
      if ((SHIBYTE(v111.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_176;
      }
    }
    operator delete(v111.__r_.__value_.__l.__data_);
    if (!v91) {
      goto LABEL_184;
    }
    goto LABEL_180;
  }
  unsigned int v98 = v8;
  uint64_t v100 = a5;
  while (1)
  {
    memset(&v123, 170, sizeof(v123));
    if (*((char *)v30 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v123, (const std::string::value_type *)*v30, (std::string::size_type)v30[1]);
    }
    else
    {
      long long v31 = *(_OWORD *)v30;
      v123.__r_.__value_.__r.__words[2] = (std::string::size_type)v30[2];
      *(_OWORD *)&v123.__r_.__value_.__l.__data_ = v31;
    }
    if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int64_t size = HIBYTE(v124.__r_.__value_.__r.__words[2]);
    }
    else {
      int64_t size = v124.__r_.__value_.__l.__size_;
    }
    std::string::size_type v33 = HIBYTE(v123.__r_.__value_.__r.__words[2]);
    int v34 = SHIBYTE(v123.__r_.__value_.__r.__words[2]);
    uint64_t v35 = (std::string *)v123.__r_.__value_.__r.__words[0];
    if (size)
    {
      if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v36 = &v124;
      }
      else {
        int v36 = (std::string *)v124.__r_.__value_.__r.__words[0];
      }
      if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v37 = &v123;
      }
      else {
        uint64_t v37 = (std::string *)v123.__r_.__value_.__r.__words[0];
      }
      int64_t v38 = v123.__r_.__value_.__l.__size_;
      if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int64_t v38 = HIBYTE(v123.__r_.__value_.__r.__words[2]);
      }
      if (v38 >= size)
      {
        std::string v63 = (char *)v37 + v38;
        int v64 = v36->__r_.__value_.__s.__data_[0];
        long long v65 = v37;
        do
        {
          int64_t v66 = v38 - size;
          if (v66 == -1) {
            break;
          }
          uint64_t v67 = (char *)memchr(v65, v64, v66 + 1);
          if (!v67) {
            break;
          }
          unint64_t v68 = v67;
          if (!memcmp(v67, v36, size))
          {
            if (v68 == v63 || v68 - (char *)v37 == -1) {
              break;
            }
            int v61 = 3;
            uint64_t v10 = v103;
            if ((v34 & 0x80) == 0) {
              goto LABEL_150;
            }
            goto LABEL_106;
          }
          long long v65 = (std::string *)(v68 + 1);
          int64_t v38 = v63 - (v68 + 1);
        }
        while (v38 >= size);
      }
    }
    *(void *)&long long v39 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v39 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v121 = v39;
    unint64_t v118 = 0xAAAAAAAAAAAAAA00;
    v115[1].__end_cap_.__value_ = (std::sub_match<std::__wrap_iter<const char *>> *)0xAAAAAAAAAAAAAAAALL;
    uint64_t v116 = 0;
    uint64_t v117 = 0;
    uint64_t v119 = 0;
    uint64_t v120 = 0;
    LOBYTE(v121) = 0;
    BYTE8(v121) = 0;
    uint64_t v122 = 0;
    memset(v115, 0, 41);
    if (v104)
    {
      std::string::size_type v40 = v123.__r_.__value_.__l.__size_;
      long long v148 = v39;
      unint64_t v145 = 0xAAAAAAAAAAAAAA00;
      *(void *)&v142[24] = v39;
      uint64_t v143 = 0;
      uint64_t v144 = 0;
      uint64_t v146 = 0;
      uint64_t v147 = 0;
      LOBYTE(v148) = 0;
      BYTE8(v148) = 0;
      uint64_t v149 = 0;
      long long __dst = 0uLL;
      *(_OWORD *)v142 = 0uLL;
      if (v34 >= 0) {
        int v41 = (std::sub_match<const char *> *)&v123;
      }
      else {
        int v41 = (std::sub_match<const char *> *)v35;
      }
      if (v34 >= 0) {
        std::string::size_type v40 = v33;
      }
      *(_OWORD *)&v142[9] = 0uLL;
      uint64_t v10 = v103;
      int v42 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v133, v41, (std::sub_match<const char *> *)((char *)v41 + v40), (std::vector<std::csub_match> *)&__dst, 0);
      std::string::size_type v43 = HIBYTE(v123.__r_.__value_.__r.__words[2]);
      if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v44 = &v123;
      }
      else {
        unint64_t v44 = (std::string *)v123.__r_.__value_.__r.__words[0];
      }
      if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v43 = v123.__r_.__value_.__l.__size_;
      }
      std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v115, (uint64_t)v44, (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v44 + v43), (uint64_t *)&__dst, 0);
      if ((void)__dst)
      {
        *((void *)&__dst + 1) = __dst;
        operator delete((void *)__dst);
      }
      if (v42)
      {
        p_end_cap = &v115[1].__end_cap_;
        if (v115[0].__end_ != v115[0].__begin_) {
          p_end_cap = &v115[0].__begin_->matched;
        }
        if (!*p_end_cap)
        {
          long long __dst = 0uLL;
          *(void *)v142 = 0;
          if ((SHIBYTE(v103->__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_116;
          }
          goto LABEL_101;
        }
        std::vector<std::ssub_match>::pointer begin = (std::vector<std::ssub_match>::pointer)&v115[1];
        if (v115[0].__end_ != v115[0].__begin_) {
          std::vector<std::ssub_match>::pointer begin = v115[0].__begin_;
        }
        std::__wrap_iter<const char *>::iterator_type i = begin->first.__i_;
        p_std::__wrap_iter<const char *>::iterator_type i = &v115[0].__begin_->second.__i_;
        if (v115[0].__end_ == v115[0].__begin_) {
          p_std::__wrap_iter<const char *>::iterator_type i = (const char **)&v115[1].__end_;
        }
        std::string v49 = *p_i;
        unint64_t v50 = *p_i - i;
        if (v50 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v50 > 0x16)
        {
          uint64_t v75 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v50 | 7) != 0x17) {
            uint64_t v75 = v50 | 7;
          }
          uint64_t v76 = v75 + 1;
          uint64_t v51 = (long long *)operator new(v75 + 1);
          *((void *)&__dst + 1) = v50;
          *(void *)v142 = v76 | 0x8000000000000000;
          *(void *)&long long __dst = v51;
          if (i != v49)
          {
LABEL_74:
            if (v50 < 0x20 || (unint64_t)((char *)v51 - i) < 0x20)
            {
              uint64_t v52 = v51;
              uint64_t v53 = i;
            }
            else
            {
              uint64_t v52 = (long long *)((char *)v51 + (v50 & 0xFFFFFFFFFFFFFFE0));
              uint64_t v53 = &i[v50 & 0xFFFFFFFFFFFFFFE0];
              uint64_t v54 = (long long *)(i + 16);
              unint64_t v55 = v51 + 1;
              unint64_t v56 = v50 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                long long v57 = *v54;
                *(v55 - 1) = *(v54 - 1);
                _OWORD *v55 = v57;
                v54 += 2;
                v55 += 2;
                v56 -= 32;
              }
              while (v56);
              if (v50 == (v50 & 0x7FFFFFFFFFFFFFE0))
              {
LABEL_115:
                *(unsigned char *)uint64_t v52 = 0;
                if ((SHIBYTE(v103->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_116:
                  *(_OWORD *)&v103->__r_.__value_.__l.__data_ = __dst;
                  v103->__r_.__value_.__r.__words[2] = *(void *)v142;
                  if (a4) {
                    goto LABEL_117;
                  }
                  goto LABEL_141;
                }
LABEL_101:
                operator delete(v103->__r_.__value_.__l.__data_);
                *(_OWORD *)&v103->__r_.__value_.__l.__data_ = __dst;
                v103->__r_.__value_.__r.__words[2] = *(void *)v142;
                if (a4)
                {
LABEL_117:
                  size_t v78 = strlen((const char *)this);
                  if (v78 > 0x7FFFFFFFFFFFFFF7) {
                    std::string::__throw_length_error[abi:ne180100]();
                  }
                  long long v79 = (void *)v78;
                  if (v78 >= 0x17)
                  {
                    uint64_t v81 = (v78 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v78 | 7) != 0x17) {
                      uint64_t v81 = v78 | 7;
                    }
                    uint64_t v82 = v81 + 1;
                    uint64_t v80 = operator new(v81 + 1);
                    v113[1] = v79;
                    unint64_t v114 = v82 | 0x8000000000000000;
                    v113[0] = v80;
                  }
                  else
                  {
                    HIBYTE(v114) = v78;
                    uint64_t v80 = v113;
                    if (!v78)
                    {
                      LOBYTE(v113[0]) = 0;
                      if ((SHIBYTE(v103->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      {
LABEL_121:
                        std::string v112 = *v103;
                        goto LABEL_127;
                      }
LABEL_126:
                      std::string::__init_copy_ctor_external(&v112, v103->__r_.__value_.__l.__data_, v103->__r_.__value_.__l.__size_);
LABEL_127:
                      BOOL isDumpForSysdiagnose = util::isDumpForSysdiagnose((uint64_t)v113, (uint64_t)&v112);
                      if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
                      {
                        operator delete(v112.__r_.__value_.__l.__data_);
                        if ((SHIBYTE(v114) & 0x80000000) == 0)
                        {
LABEL_129:
                          if (isDumpForSysdiagnose) {
                            goto LABEL_130;
                          }
                          goto LABEL_141;
                        }
                      }
                      else if ((SHIBYTE(v114) & 0x80000000) == 0)
                      {
                        goto LABEL_129;
                      }
                      operator delete(v113[0]);
                      if (isDumpForSysdiagnose)
                      {
LABEL_130:
                        unint64_t v84 = GetOsLogContext()[1];
                        if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
                        {
                          if ((v103->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                            v85 = v103;
                          }
                          else {
                            v85 = (std::string *)v103->__r_.__value_.__r.__words[0];
                          }
                          LODWORD(__dst) = 136315138;
                          *(void *)((char *)&__dst + 4) = v85;
                          _os_log_impl(&dword_235DB9000, v84, OS_LOG_TYPE_DEFAULT, "Ignore dump for sysdiagnose: %s", (uint8_t *)&__dst, 0xCu);
                        }
                        if (&v124 != v103)
                        {
                          char v86 = HIBYTE(v103->__r_.__value_.__r.__words[2]);
                          if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
                          {
                            if (v86 >= 0) {
                              uint64_t v89 = v103;
                            }
                            else {
                              uint64_t v89 = (std::string *)v103->__r_.__value_.__r.__words[0];
                            }
                            if (v86 >= 0) {
                              size_t v90 = HIBYTE(v103->__r_.__value_.__r.__words[2]);
                            }
                            else {
                              size_t v90 = v103->__r_.__value_.__l.__size_;
                            }
                            std::string::__assign_no_alias<false>((void **)&v124.__r_.__value_.__l.__data_, v89, v90);
                          }
                          else
                          {
                            if ((*((unsigned char *)&v103->__r_.__value_.__s + 23) & 0x80) == 0)
                            {
                              std::string v124 = *v103;
LABEL_164:
                              int v61 = 0;
                              v103->__r_.__value_.__s.__data_[0] = 0;
                              *((unsigned char *)&v103->__r_.__value_.__s + 23) = 0;
                              goto LABEL_146;
                            }
                            std::string::__assign_no_alias<true>(&v124, v103->__r_.__value_.__l.__data_, v103->__r_.__value_.__l.__size_);
                          }
                        }
                        if (SHIBYTE(v103->__r_.__value_.__r.__words[2]) < 0)
                        {
                          int v61 = 0;
                          *v103->__r_.__value_.__l.__data_ = 0;
                          v103->__r_.__value_.__l.__size_ = 0;
                          goto LABEL_146;
                        }
                        goto LABEL_164;
                      }
                      goto LABEL_141;
                    }
                  }
                  memcpy(v80, this, (size_t)v79);
                  *((unsigned char *)v79 + (void)v80) = 0;
                  if ((SHIBYTE(v103->__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                    goto LABEL_121;
                  }
                  goto LABEL_126;
                }
LABEL_141:
                int v61 = 2;
LABEL_146:
                char v87 = 1;
LABEL_147:
                BOOL v104 = v87;
                long long v62 = v115[0].__begin_;
                if (v115[0].__begin_) {
                  goto LABEL_148;
                }
                goto LABEL_149;
              }
            }
            do
            {
              char v77 = *v53++;
              *(unsigned char *)uint64_t v52 = v77;
              uint64_t v52 = (long long *)((char *)v52 + 1);
            }
            while (v53 != v49);
            goto LABEL_115;
          }
        }
        else
        {
          v142[7] = *(unsigned char *)p_i - (_BYTE)i;
          uint64_t v51 = &__dst;
          if (i != v49) {
            goto LABEL_74;
          }
        }
        *(unsigned char *)uint64_t v51 = 0;
        if ((SHIBYTE(v103->__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_116;
        }
        goto LABEL_101;
      }
LABEL_145:
      int v61 = 0;
      goto LABEL_146;
    }
    if (v34 >= 0) {
      uint64_t v35 = &v123;
    }
    int64_t v58 = strlen(v100);
    uint64_t v10 = v103;
    if (!v58)
    {
LABEL_144:
      std::string::__assign_external(&v124, v100);
      goto LABEL_145;
    }
    int64_t v59 = v58;
    int64_t v60 = v123.__r_.__value_.__l.__size_;
    if (v34 >= 0) {
      int64_t v60 = v33;
    }
    if (v60 >= v58)
    {
      uint64_t v69 = (char *)v35 + v60;
      int v70 = *v100;
      std::string v71 = v35;
      do
      {
        int64_t v72 = v60 - v59;
        if (v72 == -1) {
          break;
        }
        long long v73 = (char *)memchr(v71, v70, v72 + 1);
        if (!v73) {
          break;
        }
        unint64_t v74 = v73;
        if (!memcmp(v73, v100, v59))
        {
          char v87 = 0;
          if (v74 != v69)
          {
            int64_t v88 = v74 - (char *)v35;
            int v61 = 0;
            if (v88 == -1) {
              goto LABEL_147;
            }
            goto LABEL_144;
          }
          int v61 = 0;
          BOOL v104 = 0;
          long long v62 = v115[0].__begin_;
          if (v115[0].__begin_) {
            goto LABEL_148;
          }
          goto LABEL_149;
        }
        std::string v71 = (std::string *)(v74 + 1);
        int64_t v60 = v69 - (v74 + 1);
      }
      while (v60 >= v59);
    }
    int v61 = 0;
    BOOL v104 = 0;
    long long v62 = v115[0].__begin_;
    if (v115[0].__begin_)
    {
LABEL_148:
      v115[0].__end_ = v62;
      operator delete(v62);
    }
LABEL_149:
    if ((*((unsigned char *)&v123.__r_.__value_.__s + 23) & 0x80) != 0) {
      break;
    }
LABEL_150:
    if (v61 != 3) {
      goto LABEL_151;
    }
LABEL_33:
    v30 += 3;
    if (v30 == v102) {
      goto LABEL_166;
    }
  }
LABEL_106:
  operator delete(v123.__r_.__value_.__l.__data_);
  if (v61 == 3) {
    goto LABEL_33;
  }
LABEL_151:
  if (!v61) {
    goto LABEL_33;
  }
LABEL_166:
  unsigned int v8 = v98;
  if ((SHIBYTE(v124.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_167;
  }
  operator delete(v124.__r_.__value_.__l.__data_);
  if (v98) {
    goto LABEL_168;
  }
LABEL_184:
  std::string v93 = (std::__shared_weak_count *)v134;
  if ((void)v134 && !atomic_fetch_add((atomic_ullong *volatile)(v134 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
    std::__shared_weak_count::__release_weak(v93);
    std::locale::~locale((std::locale *)v133);
    v94 = (std::__shared_weak_count *)v136;
    if (!(void)v136) {
      goto LABEL_188;
    }
LABEL_187:
    if (atomic_fetch_add(&v94->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_188;
    }
    ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
    std::__shared_weak_count::__release_weak(v94);
    std::locale::~locale((std::locale *)v135);
    if (SHIBYTE(v137[2]) < 0) {
LABEL_189:
    }
      operator delete(v137[0]);
  }
  else
  {
    std::locale::~locale((std::locale *)v133);
    v94 = (std::__shared_weak_count *)v136;
    if ((void)v136) {
      goto LABEL_187;
    }
LABEL_188:
    std::locale::~locale((std::locale *)v135);
    if (SHIBYTE(v137[2]) < 0) {
      goto LABEL_189;
    }
  }
  long long v95 = v138;
  if (v138)
  {
    uint64_t v96 = v139;
    unint64_t v97 = v138;
    if (v139 != v138)
    {
      do
      {
        if (*((char *)v96 - 1) < 0) {
          operator delete((void *)*(v96 - 3));
        }
        v96 -= 3;
      }
      while (v96 != v95);
      unint64_t v97 = v138;
    }
    std::string v139 = v95;
    operator delete(v97);
  }
}

void sub_235E58E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex((std::locale *)&STACK[0x220]);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex((std::locale *)&STACK[0x260]);
  if (SLOBYTE(STACK[0x2B7]) < 0) {
    operator delete((void *)STACK[0x2A0]);
  }
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v24 - 248));
  if (*(char *)(a24 + 23) < 0) {
    operator delete(*(void **)a24);
  }
  _Unwind_Resume(a1);
}

uint64_t util::getNumberOfLogDumps(uint64_t a1, const void **a2)
{
  uint64_t v236 = *MEMORY[0x263EF8340];
  v224 = 0;
  v225 = 0;
  uint64_t v226 = 0;
  long long v221 = 0u;
  long long v222 = 0u;
  unint64_t v223 = 0xAAAAAAAA3F800000;
  size_t v4 = (char *)operator new(0x48uLL);
  unint64_t v5 = v4;
  strcpy(v4, "[0-9]{4}-[0-9]{2}-[0-9]{2}-[0-9]{2}-[0-9]{2}-[0-9]{2,4}-[0-9]{3}");
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v219[32] = v6;
  long long v220 = v6;
  *(_OWORD *)v219 = v6;
  *(_OWORD *)&v219[16] = v6;
  int v7 = *((char *)a2 + 23);
  if (v7 >= 0) {
    size_t v8 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v8 = (size_t)a2[1];
  }
  unint64_t v9 = v8 + 64;
  memset(__dst, 170, 24);
  v197 = v4;
  if (v8 + 64 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v9 <= 0x16)
  {
    memset(__dst, 0, 24);
    uint64_t v10 = __dst;
    __dst[23] = v8 + 64;
LABEL_10:
    if (v7 >= 0) {
      unint64_t v13 = a2;
    }
    else {
      unint64_t v13 = *a2;
    }
    memmove(v10, v13, v8);
    goto LABEL_14;
  }
  uint64_t v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v9 | 7) != 0x17) {
    uint64_t v11 = v9 | 7;
  }
  uint64_t v12 = v11 + 1;
  uint64_t v10 = operator new(v11 + 1);
  *(void *)&__dst[8] = v8 + 64;
  *(void *)&__dst[16] = v12 | 0x8000000000000000;
  *(void *)long long __dst = v10;
  if (v8) {
    goto LABEL_10;
  }
LABEL_14:
  uint64_t v14 = &v10[v8];
  long long v15 = *(_OWORD *)v5;
  long long v16 = *((_OWORD *)v5 + 1);
  long long v17 = *((_OWORD *)v5 + 3);
  *((_OWORD *)v14 + 2) = *((_OWORD *)v5 + 2);
  *((_OWORD *)v14 + 3) = v17;
  *(_OWORD *)uint64_t v14 = v15;
  *((_OWORD *)v14 + 1) = v16;
  v14[64] = 0;
  long long v18 = std::string::append((std::string *)__dst, ".*", 2uLL);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  __p[0].__end_cap_.__value_ = (std::sub_match<const char *> *)v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p[0].__begin_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v219, (uint64_t)__p, 0);
  if (SHIBYTE(__p[0].__end_cap_.__value_) < 0)
  {
    operator delete(__p[0].__begin_);
    if ((__dst[23] & 0x80000000) == 0) {
      goto LABEL_16;
    }
  }
  else if ((__dst[23] & 0x80000000) == 0)
  {
    goto LABEL_16;
  }
  operator delete(*(void **)__dst);
LABEL_16:
  *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v217 = v20;
  long long v218 = v20;
  long long v216 = v20;
  *(_OWORD *)&v215[0].__locale_ = v20;
  int v21 = *((char *)a2 + 23);
  if (v21 >= 0) {
    size_t v22 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v22 = (size_t)a2[1];
  }
  unint64_t v23 = v22 + 64;
  memset(__dst, 170, 24);
  if (v22 + 64 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v23 <= 0x16)
  {
    memset(__dst, 0, 24);
    uint64_t v24 = __dst;
    __dst[23] = v22 + 64;
LABEL_25:
    if (v21 >= 0) {
      __n128 v27 = a2;
    }
    else {
      __n128 v27 = *a2;
    }
    memmove(v24, v27, v22);
    goto LABEL_29;
  }
  uint64_t v25 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v23 | 7) != 0x17) {
    uint64_t v25 = v23 | 7;
  }
  uint64_t v26 = v25 + 1;
  uint64_t v24 = operator new(v25 + 1);
  *(void *)&__dst[8] = v22 + 64;
  *(void *)&__dst[16] = v26 | 0x8000000000000000;
  *(void *)long long __dst = v24;
  if (v22) {
    goto LABEL_25;
  }
LABEL_29:
  unint64_t v28 = &v24[v22];
  long long v29 = *(_OWORD *)v5;
  long long v30 = *((_OWORD *)v5 + 1);
  long long v31 = *((_OWORD *)v5 + 3);
  *((_OWORD *)v28 + 2) = *((_OWORD *)v5 + 2);
  *((_OWORD *)v28 + 3) = v31;
  *(_OWORD *)unint64_t v28 = v29;
  *((_OWORD *)v28 + 1) = v30;
  v28[64] = 0;
  int v32 = std::string::append((std::string *)__dst, "(?=-*)(?!\\.json)", 0x10uLL);
  long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  __p[0].__end_cap_.__value_ = (std::sub_match<const char *> *)v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p[0].__begin_ = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v215, (uint64_t)__p, 0);
  if ((SHIBYTE(__p[0].__end_cap_.__value_) & 0x80000000) == 0)
  {
    if ((__dst[23] & 0x80000000) == 0) {
      goto LABEL_31;
    }
LABEL_36:
    operator delete(*(void **)__dst);
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_37;
  }
  operator delete(__p[0].__begin_);
  if ((__dst[23] & 0x80000000) != 0) {
    goto LABEL_36;
  }
LABEL_31:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
LABEL_32:
    std::string v214 = *(std::string *)a1;
    goto LABEL_38;
  }
LABEL_37:
  std::string::__init_copy_ctor_external(&v214, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
LABEL_38:
  std::locale::locale(&v208, (const std::locale *)v219);
  long long v209 = *(_OWORD *)&v219[8];
  long long v210 = *(_OWORD *)&v219[24];
  uint64_t v211 = *(void *)&v219[40];
  v212 = (std::__shared_weak_count *)v220;
  if ((void)v220) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v220 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v213 = *((void *)&v220 + 1);
  support::fs::getFilteredFiles((const char *)&v214, (uint64_t)&v208, (uint64_t)&v224, 0);
  int v34 = v212;
  if (v212 && !atomic_fetch_add(&v212->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
    std::locale::~locale(&v208);
    if ((SHIBYTE(v214.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_43:
      int v36 = (std::sub_match<const char *> *)v224;
      uint64_t v35 = v225;
      if (v224 == v225) {
        goto LABEL_231;
      }
      goto LABEL_47;
    }
  }
  else
  {
    std::locale::~locale(&v208);
    if ((SHIBYTE(v214.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_43;
    }
  }
  operator delete(v214.__r_.__value_.__l.__data_);
  int v36 = (std::sub_match<const char *> *)v224;
  uint64_t v35 = v225;
  if (v224 == v225) {
    goto LABEL_231;
  }
LABEL_47:
  uint64_t v37 = &__dst[48];
  int64_t v38 = &v233;
  p_end_cap = &__p[1].__end_cap_;
  v205 = &v228;
  v203 = (std::sub_match<const char *> *)&v222;
  v204 = v229;
  v198 = (uint64_t *)&__dst[24];
  v201 = &__dst[48];
  v202 = v35;
  v199 = &__p[1].__end_cap_;
  v200 = &v233;
  while (2)
  {
    *(void *)&long long v40 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v40 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v233 = v40;
    long long v234 = v40;
    *(_OWORD *)&__dst[40] = v40;
    long long v232 = v40;
    *(void *)uint64_t v37 = 0;
    *((void *)v37 + 1) = 0;
    v37[16] = 0;
    *(void *)int64_t v38 = 0;
    *((void *)v38 + 1) = 0;
    *((unsigned char *)v38 + 16) = 0;
    BYTE8(v234) = 0;
    uint64_t v235 = 0;
    memset(__dst, 0, 41);
    *(_OWORD *)&p_end_cap[4].__value_ = v40;
    *(_OWORD *)&p_end_cap[6].__value_ = v40;
    *(_OWORD *)&p_end_cap->__value_ = v40;
    *(_OWORD *)&p_end_cap[2].__value_ = v40;
    int v41 = v205;
    uint64_t *v205 = 0;
    v41[1] = 0;
    *((unsigned char *)v41 + 16) = 0;
    int v42 = v204;
    void *v204 = 0;
    v42[1] = 0;
    *((unsigned char *)v42 + 16) = 0;
    v229[24] = 0;
    uint64_t v230 = 0;
    memset(__p, 0, 41);
    second = (const char *)*((unsigned __int8 *)&v36->matched + 7);
    if ((char)second >= 0) {
      first = v36;
    }
    else {
      first = (std::sub_match<const char *> *)v36->first;
    }
    if ((char)second < 0) {
      second = v36->second;
    }
    int v45 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v215, first, (std::sub_match<const char *> *)&second[(void)first], __p, 0);
    uint64_t v46 = (const char *)*((unsigned __int8 *)&v36->matched + 7);
    if ((char)v46 >= 0) {
      uint64_t v47 = (uint64_t)v36;
    }
    else {
      uint64_t v47 = (uint64_t)v36->first;
    }
    if ((char)v46 < 0) {
      uint64_t v46 = v36->second;
    }
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)__dst, v47, (std::sub_match<std::__wrap_iter<const char *>> *)&v46[v47], (uint64_t *)__p, 0);
    if (__p[0].__begin_)
    {
      __p[0].__end_ = __p[0].__begin_;
      operator delete(__p[0].__begin_);
    }
    unint64_t v48 = *(void **)__dst;
    if (!v45) {
      goto LABEL_229;
    }
    if (*(void *)&__dst[8] == *(void *)__dst) {
      std::string v49 = &__dst[40];
    }
    else {
      std::string v49 = (unsigned char *)(*(void *)__dst + 16);
    }
    if (!*v49)
    {
      long long v62 = 0;
      std::string v63 = 0;
      unint64_t v64 = 0;
      v206[0] = 0;
      v206[1] = 0;
      unint64_t v207 = 0;
      goto LABEL_87;
    }
    unint64_t v50 = v198;
    if (*(void *)&__dst[8] != *(void *)__dst) {
      unint64_t v50 = *(uint64_t **)__dst;
    }
    uint64_t v51 = *v50;
    uint64_t v52 = (char **)(*(void *)__dst + 8);
    if (*(void *)&__dst[8] == *(void *)__dst) {
      uint64_t v52 = (char **)&__dst[32];
    }
    uint64_t v53 = *v52;
    unint64_t v54 = (unint64_t)&(*v52)[-v51];
    if (v54 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v54 > 0x16)
    {
      uint64_t v65 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v54 | 7) != 0x17) {
        uint64_t v65 = v54 | 7;
      }
      uint64_t v66 = v65 + 1;
      unint64_t v55 = operator new(v65 + 1);
      v206[1] = (void *)v54;
      unint64_t v207 = v66 | 0x8000000000000000;
      v206[0] = v55;
      if ((char *)v51 != v53) {
        goto LABEL_73;
      }
LABEL_83:
      unint64_t v56 = v55;
      goto LABEL_86;
    }
    HIBYTE(v207) = *(unsigned char *)v52 - v51;
    unint64_t v55 = v206;
    if ((char *)v51 == v53) {
      goto LABEL_83;
    }
LABEL_73:
    if (v54 < 0x20 || (unint64_t)v55 - v51 < 0x20)
    {
      unint64_t v56 = v55;
      long long v57 = (char *)v51;
    }
    else
    {
      unint64_t v56 = (char *)v55 + (v54 & 0xFFFFFFFFFFFFFFE0);
      long long v57 = (char *)(v51 + (v54 & 0xFFFFFFFFFFFFFFE0));
      int64_t v58 = (long long *)(v51 + 16);
      int64_t v59 = v55 + 1;
      unint64_t v60 = v54 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v61 = *v58;
        *(v59 - 1) = *(v58 - 1);
        *int64_t v59 = v61;
        v58 += 2;
        v59 += 2;
        v60 -= 32;
      }
      while (v60);
      if (v54 == (v54 & 0x7FFFFFFFFFFFFFE0)) {
        goto LABEL_86;
      }
    }
    do
    {
      char v67 = *v57++;
      *v56++ = v67;
    }
    while (v57 != v53);
LABEL_86:
    unsigned char *v56 = 0;
    unint64_t v64 = HIBYTE(v207);
    std::string v63 = (void **)v206[0];
    long long v62 = v206[1];
LABEL_87:
    if ((v64 & 0x80u) == 0) {
      unint64_t v68 = v206;
    }
    else {
      unint64_t v68 = v63;
    }
    if ((v64 & 0x80u) == 0) {
      unint64_t v69 = v64;
    }
    else {
      unint64_t v69 = (unint64_t)v62;
    }
    if (v69 > 0x20)
    {
      if (v69 <= 0x40)
      {
        if ((v64 & 0x80u) == 0) {
          std::string v63 = v206;
        }
        long long v73 = (char *)v63[3];
        uint64_t v74 = *(uint64_t *)((char *)v68 + v69 - 16);
        uint64_t v75 = (uint64_t)*v68 - 0x3C5A37A36834CED9 * v74 + 0xC3A5C85C97CB3127 * v69;
        uint64_t v76 = __ROR8__(&v73[v75], 52);
        size_t v78 = (char *)v63[1];
        char v77 = (char *)v63[2];
        long long v79 = &v78[v75];
        uint64_t v80 = __ROR8__(v79, 7);
        uint64_t v81 = &v77[(void)v79];
        uint64_t v82 = v80
            + __ROR8__((char *)*v68 - 0x3C5A37A36834CED9 * v74 + 0xC3A5C85C97CB3127 * v69, 37)
            + v76
            + __ROR8__(v81, 31);
        size_t v83 = &v77[*(void *)((char *)v68 + v69 - 32)];
        unint64_t v84 = &v73[*(void *)((char *)v68 + v69 - 8)];
        uint64_t v85 = __ROR8__(&v83[(void)v84], 52);
        uint64_t v86 = __ROR8__(v83, 37);
        char v87 = &v83[*(void *)((char *)v68 + v69 - 24)];
        uint64_t v88 = __ROR8__(v87, 7);
        uint64_t v89 = &v87[v74];
        size_t v90 = &v84[(void)v89];
        BOOL v91 = &v73[v86 + v88 + v85 + __ROR8__(v89, 31) + (void)v81];
        unint64_t v92 = 0x9AE16A3B2F90404FLL;
        unint64_t v93 = v82
            - 0x3C5A37A36834CED9
            * ((0xC3A5C85C97CB3127 * (void)&v90[v82] - 0x651E95C4D06FBFB1 * (void)v91) ^ ((0xC3A5C85C97CB3127
                                                                                                 * (unint64_t)&v90[v82]
                                                                                                 - 0x651E95C4D06FBFB1
                                                                                                 * (void)v91) >> 47));
        goto LABEL_105;
      }
      uint64_t v100 = *(uint64_t *)((char *)v68 + v69 - 48);
      uint64_t v101 = *(uint64_t *)((char *)v68 + v69 - 40);
      uint64_t v102 = *(uint64_t *)((char *)v68 + v69 - 24);
      uint64_t v103 = *(uint64_t *)((char *)v68 + v69 - 56);
      uint64_t v104 = *(uint64_t *)((char *)v68 + v69 - 16);
      uint64_t v105 = *(uint64_t *)((char *)v68 + v69 - 8);
      unint64_t v106 = v103 + v104;
      unint64_t v107 = 0x9DDFEA08EB382D69
           * (v102 ^ ((0x9DDFEA08EB382D69 * (v102 ^ (v100 + v69))) >> 47) ^ (0x9DDFEA08EB382D69
                                                                             * (v102 ^ (v100 + v69))));
      unint64_t v108 = 0x9DDFEA08EB382D69 * (v107 ^ (v107 >> 47));
      std::string::size_type v109 = *(char **)((char *)v68 + v69 - 64) + v69;
      uint64_t v110 = &v109[v100 + v103];
      std::string v111 = &v110[v101];
      uint64_t v112 = (uint64_t)&v109[__ROR8__(v110, 44) + __ROR8__(&v109[v101 + v108], 21)];
      uint64_t v113 = *(uint64_t *)((char *)v68 + v69 - 32) + v103 + v104 - 0x4B6D499041670D8DLL;
      uint64_t v114 = v102 + v104 + v113;
      uint64_t v115 = v114 + v105;
      uint64_t v116 = __ROR8__(v114, 44) + v113 + __ROR8__(v113 + v101 + v105, 21);
      uint64_t v117 = v68 + 4;
      uint64_t v118 = (uint64_t)*v68 - 0x4B6D499041670D8DLL * v101;
      uint64_t v119 = -(uint64_t)((v69 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v120 = *(v117 - 3);
        long long v121 = &v111[v118 + v106 + v120];
        uint64_t v122 = v117[2];
        uint64_t v123 = v117[3];
        uint64_t v124 = v117[1];
        unint64_t v106 = (unint64_t)&v111[v124 + 0xB492B66FBE98F273 * __ROR8__(v106 + v112 + v122, 42)];
        uint64_t v125 = v108 + v115;
        uint64_t v126 = *(v117 - 2);
        uint64_t v127 = *(v117 - 1);
        uint64_t v128 = *(v117 - 4) - 0x4B6D499041670D8DLL * v112;
        uint64_t v129 = v128 + v115 + v127;
        uint64_t v130 = v128 + v120 + v126;
        std::string v111 = (char *)(v130 + v127);
        uint64_t v131 = __ROR8__(v130, 44) + v128;
        unint64_t v132 = (0xB492B66FBE98F273 * __ROR8__(v121, 37)) ^ v116;
        uint64_t v118 = 0xB492B66FBE98F273 * __ROR8__(v125, 33);
        uint64_t v112 = v131 + __ROR8__(v129 + v132, 21);
        uint64_t v133 = v118 + v116 + *v117;
        uint64_t v115 = v124 + v122 + v133 + v123;
        uint64_t v116 = __ROR8__(v124 + v122 + v133, 44) + v133 + __ROR8__(v106 + v126 + v133 + v123, 21);
        v117 += 8;
        unint64_t v108 = v132;
        v119 += 64;
      }
      while (v119);
      unint64_t v134 = 0x9DDFEA08EB382D69
           * (v116 ^ ((0x9DDFEA08EB382D69 * (v116 ^ v112)) >> 47) ^ (0x9DDFEA08EB382D69 * (v116 ^ v112)));
      unint64_t v135 = v118 - 0x622015F714C7D297 * (v134 ^ (v134 >> 47));
      unint64_t v136 = 0x9DDFEA08EB382D69
           * (v135 ^ (v132
                    - 0x4B6D499041670D8DLL * (v106 ^ (v106 >> 47))
                    - 0x622015F714C7D297
                    * ((0x9DDFEA08EB382D69
                      * (v115 ^ ((0x9DDFEA08EB382D69 * (v115 ^ (unint64_t)v111)) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                                  * (v115 ^ (unint64_t)v111)))) ^ ((0x9DDFEA08EB382D69 * (v115 ^ ((0x9DDFEA08EB382D69 * (v115 ^ (unint64_t)v111)) >> 47) ^ (0x9DDFEA08EB382D69 * (v115 ^ (unint64_t)v111)))) >> 47))));
      unint64_t v72 = 0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69 * (v135 ^ (v136 >> 47) ^ v136)) ^ ((0x9DDFEA08EB382D69
                                                                     * (v135 ^ (v136 >> 47) ^ v136)) >> 47));
    }
    else
    {
      if (v69 > 0x10)
      {
        unint64_t v94 = 0xB492B66FBE98F273 * (void)*v68;
        if ((v64 & 0x80u) == 0) {
          std::string v63 = v206;
        }
        unint64_t v95 = (unint64_t)v63[1];
        uint64_t v96 = __ROR8__(0x9AE16A3B2F90404FLL * *(void *)((char *)v68 + v69 - 8), 30)
            + __ROR8__(v94 - v95, 43)
            - 0x3C5A37A36834CED9 * *(void *)((char *)v68 + v69 - 16);
        unint64_t v97 = v94
            + v69
            + __ROR8__(v95 ^ 0xC949D7C7509E6557, 20)
            - 0x9AE16A3B2F90404FLL * *(void *)((char *)v68 + v69 - 8);
        unint64_t v98 = v96 ^ v97;
        unint64_t v92 = 0x9DDFEA08EB382D69;
        unint64_t v99 = v97 ^ ((0x9DDFEA08EB382D69 * v98) >> 47) ^ (0x9DDFEA08EB382D69 * v98);
        goto LABEL_104;
      }
      if (v69 >= 9)
      {
        uint64_t v70 = *(uint64_t *)((char *)v68 + v69 - 8);
        uint64_t v71 = __ROR8__(v70 + v69, v69);
        unint64_t v72 = (0x9DDFEA08EB382D69
             * ((0x9DDFEA08EB382D69
               * (v71 ^ ((0x9DDFEA08EB382D69 * (v71 ^ (unint64_t)*v68)) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                         * (v71 ^ (unint64_t)*v68)))) ^ ((0x9DDFEA08EB382D69 * (v71 ^ ((0x9DDFEA08EB382D69 * (v71 ^ (unint64_t)*v68)) >> 47) ^ (0x9DDFEA08EB382D69 * (v71 ^ (unint64_t)*v68)))) >> 47))) ^ v70;
        goto LABEL_109;
      }
      if (v69 >= 4)
      {
        uint64_t v176 = *(unsigned int *)((char *)v68 + v69 - 4);
        unint64_t v92 = 0x9DDFEA08EB382D69;
        unint64_t v177 = 0x9DDFEA08EB382D69 * ((v69 + (8 * *(_DWORD *)v68)) ^ v176);
        unint64_t v99 = v176 ^ (v177 >> 47) ^ v177;
LABEL_104:
        unint64_t v93 = 0x9DDFEA08EB382D69 * v99;
LABEL_105:
        unint64_t v72 = (v93 ^ (v93 >> 47)) * v92;
        goto LABEL_109;
      }
      unint64_t v72 = 0x9AE16A3B2F90404FLL;
      if (v69)
      {
        unint64_t v179 = (0xC949D7C7509E6557 * (v69 + 4 * *((unsigned __int8 *)v68 + v69 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                           * (*(unsigned __int8 *)v68 | ((unint64_t)*((unsigned __int8 *)v68 + (v69 >> 1)) << 8)));
        unint64_t v72 = 0x9AE16A3B2F90404FLL * (v179 ^ (v179 >> 47));
      }
    }
LABEL_109:
    unint64_t v137 = *((void *)&v221 + 1);
    if (!*((void *)&v221 + 1))
    {
      unint64_t v139 = 0xAAAAAAAAAAAAAAAALL;
LABEL_152:
      __p[0].__end_cap_.__value_ = (std::sub_match<const char *> *)0xAAAAAAAAAAAAAA01;
      v157 = (std::sub_match<const char *> *)operator new(0x28uLL);
      __p[0].__begin_ = v157;
      __p[0].__end_ = v203;
      v157->first = 0;
      v157->second = (const char *)v72;
      *(_OWORD *)&v157->matched = *(_OWORD *)v206;
      v157[1].second = (const char *)v207;
      v206[0] = 0;
      v206[1] = 0;
      unint64_t v207 = 0;
      float v158 = (float)(unint64_t)(*((void *)&v222 + 1) + 1);
      if (v137 && (float)(*(float *)&v223 * (float)v137) >= v158)
      {
        unint64_t v72 = v139;
        uint64_t v37 = v201;
        uint64_t v35 = v202;
        goto LABEL_217;
      }
      BOOL v159 = (v137 & (v137 - 1)) != 0;
      if (v137 < 3) {
        BOOL v159 = 1;
      }
      unint64_t v160 = v159 | (2 * v137);
      unint64_t v161 = vcvtps_u32_f32(v158 / *(float *)&v223);
      if (v160 <= v161) {
        size_t prime = v161;
      }
      else {
        size_t prime = v160;
      }
      if (prime == 1)
      {
        size_t prime = 2;
        uint64_t v37 = v201;
        uint64_t v35 = v202;
      }
      else
      {
        uint64_t v37 = v201;
        uint64_t v35 = v202;
        if ((prime & (prime - 1)) != 0)
        {
          size_t prime = std::__next_prime(prime);
          unint64_t v137 = *((void *)&v221 + 1);
        }
      }
      if (prime <= v137)
      {
        if (prime >= v137) {
          goto LABEL_205;
        }
        unint64_t v173 = vcvtps_u32_f32((float)*((unint64_t *)&v222 + 1) / *(float *)&v223);
        if (v137 < 3 || (uint8x8_t v174 = (uint8x8_t)vcnt_s8((int8x8_t)v137), v174.i16[0] = vaddlv_u8(v174), v174.u32[0] > 1uLL))
        {
          unint64_t v173 = std::__next_prime(v173);
        }
        else
        {
          uint64_t v175 = 1 << -(char)__clz(v173 - 1);
          if (v173 >= 2) {
            unint64_t v173 = v175;
          }
        }
        if (prime <= v173) {
          size_t prime = v173;
        }
        if (prime >= v137)
        {
          unint64_t v137 = *((void *)&v221 + 1);
          uint64_t v181 = *((void *)&v221 + 1) - 1;
          if ((*((void *)&v221 + 1) & (*((void *)&v221 + 1) - 1)) != 0)
          {
LABEL_215:
            if (v72 >= v137) {
              v72 %= v137;
            }
LABEL_217:
            uint64_t v184 = v221;
            v185 = *(std::sub_match<const char *> ***)(v221 + 8 * v72);
            if (v185)
            {
              v157->first = (const char *)*v185;
            }
            else
            {
              v157->first = (const char *)v222;
              *(void *)&long long v222 = v157;
              *(void *)(v184 + 8 * v72) = v203;
              if (!v157->first) {
                goto LABEL_226;
              }
              unint64_t v186 = *((void *)v157->first + 1);
              if ((v137 & (v137 - 1)) != 0)
              {
                if (v186 >= v137) {
                  v186 %= v137;
                }
              }
              else
              {
                v186 &= v137 - 1;
              }
              v185 = (std::sub_match<const char *> **)(v221 + 8 * v186);
            }
            *v185 = v157;
LABEL_226:
            ++*((void *)&v222 + 1);
            if ((v207 & 0x8000000000000000) != 0) {
              goto LABEL_227;
            }
            goto LABEL_228;
          }
LABEL_206:
          v72 &= v181;
          goto LABEL_217;
        }
        if (!prime)
        {
          v180 = (void *)v221;
          *(void *)&long long v221 = 0;
          if (v180) {
            operator delete(v180);
          }
          unint64_t v137 = 0;
          *((void *)&v221 + 1) = 0;
          uint64_t v181 = -1;
          goto LABEL_206;
        }
      }
      if (prime >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      v163 = operator new(8 * prime);
      v164 = (void *)v221;
      *(void *)&long long v221 = v163;
      if (v164) {
        operator delete(v164);
      }
      uint64_t v165 = 0;
      *((void *)&v221 + 1) = prime;
      do
        *(void *)(v221 + 8 * v165++) = 0;
      while (prime != v165);
      v166 = (void **)v222;
      if (!(void)v222)
      {
LABEL_214:
        unint64_t v137 = prime;
        uint64_t v181 = prime - 1;
        if ((prime & (prime - 1)) != 0) {
          goto LABEL_215;
        }
        goto LABEL_206;
      }
      size_t v167 = *(void *)(v222 + 8);
      size_t v168 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        size_t v169 = v167 & v168;
        *(void *)(v221 + 8 * v169) = v203;
        for (std::__wrap_iter<const char *>::iterator_type i = *v166; *v166; std::__wrap_iter<const char *>::iterator_type i = *v166)
        {
          size_t v171 = i[1] & v168;
          if (v171 == v169)
          {
            v166 = (void **)i;
          }
          else if (*(void *)(v221 + 8 * v171))
          {
            *v166 = (void *)*i;
            uint64_t v172 = 8 * v171;
            *std::__wrap_iter<const char *>::iterator_type i = **(void **)(v221 + v172);
            **(void **)(v221 + v172) = i;
          }
          else
          {
            *(void *)(v221 + 8 * v171) = v166;
            v166 = (void **)i;
            size_t v169 = v171;
          }
        }
        goto LABEL_214;
      }
      if (v167 < prime)
      {
        *(void *)(v221 + 8 * v167) = v203;
        v178 = *v166;
        if (*v166) {
          goto LABEL_209;
        }
        goto LABEL_204;
      }
      v167 %= prime;
      *(void *)(v221 + 8 * v167) = v203;
      v178 = *v166;
      if (!*v166)
      {
LABEL_204:
        unint64_t v137 = prime;
LABEL_205:
        uint64_t v181 = v137 - 1;
        if ((v137 & (v137 - 1)) != 0) {
          goto LABEL_215;
        }
        goto LABEL_206;
      }
      while (1)
      {
LABEL_209:
        size_t v183 = v178[1];
        if (v183 >= prime) {
          v183 %= prime;
        }
        if (v183 == v167) {
          goto LABEL_208;
        }
        if (*(void *)(v221 + 8 * v183))
        {
          *v166 = (void *)*v178;
          uint64_t v182 = 8 * v183;
          void *v178 = **(void **)(v221 + v182);
          **(void **)(v221 + v182) = v178;
          v178 = v166;
LABEL_208:
          v166 = (void **)v178;
          v178 = (void *)*v178;
          if (!v178) {
            goto LABEL_214;
          }
        }
        else
        {
          *(void *)(v221 + 8 * v183) = v166;
          v166 = (void **)v178;
          v178 = (void *)*v178;
          size_t v167 = v183;
          if (!v178) {
            goto LABEL_214;
          }
        }
      }
    }
    uint8x8_t v138 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v221 + 8));
    v138.i16[0] = vaddlv_u8(v138);
    if (v138.u32[0] > 1uLL)
    {
      unint64_t v139 = v72;
      if (v72 >= *((void *)&v221 + 1)) {
        unint64_t v139 = v72 % *((void *)&v221 + 1);
      }
    }
    else
    {
      unint64_t v139 = (*((void *)&v221 + 1) - 1) & v72;
    }
    uint64_t v140 = *(uint64_t ***)(v221 + 8 * v139);
    if (!v140) {
      goto LABEL_152;
    }
    v141 = *v140;
    if (!*v140) {
      goto LABEL_152;
    }
    if (v138.u32[0] < 2uLL)
    {
      uint64_t v142 = *((void *)&v221 + 1) - 1;
      while (1)
      {
        uint64_t v148 = v141[1];
        if (v148 == v72)
        {
          uint64_t v149 = *((unsigned __int8 *)v141 + 39);
          if ((v149 & 0x80u) == 0) {
            uint64_t v150 = *((unsigned __int8 *)v141 + 39);
          }
          else {
            uint64_t v150 = v141[3];
          }
          if (v150 == v69)
          {
            v151 = (const void **)(v141 + 2);
            if ((v149 & 0x80) != 0)
            {
              v153 = v68;
              v154 = v68;
              uint64_t v155 = v142;
              int v156 = memcmp(*v151, v153, v141[3]);
              uint64_t v142 = v155;
              unint64_t v68 = v154;
              if (!v156) {
                goto LABEL_150;
              }
            }
            else
            {
              if (!*((unsigned char *)v141 + 39)) {
                goto LABEL_150;
              }
              v152 = v68;
              while (*(unsigned __int8 *)v151 == *(unsigned __int8 *)v152)
              {
                v151 = (const void **)((char *)v151 + 1);
                v152 = (void **)((char *)v152 + 1);
                if (!--v149) {
                  goto LABEL_150;
                }
              }
            }
          }
        }
        else if ((v148 & v142) != v139)
        {
          goto LABEL_152;
        }
        v141 = (uint64_t *)*v141;
        if (!v141) {
          goto LABEL_152;
        }
      }
    }
    while (1)
    {
      unint64_t v143 = v141[1];
      if (v143 == v72) {
        break;
      }
      if (v143 >= v137) {
        v143 %= v137;
      }
      if (v143 != v139) {
        goto LABEL_152;
      }
LABEL_120:
      v141 = (uint64_t *)*v141;
      if (!v141) {
        goto LABEL_152;
      }
    }
    uint64_t v144 = *((unsigned __int8 *)v141 + 39);
    if ((v144 & 0x80u) == 0) {
      uint64_t v145 = *((unsigned __int8 *)v141 + 39);
    }
    else {
      uint64_t v145 = v141[3];
    }
    if (v145 != v69) {
      goto LABEL_120;
    }
    uint64_t v146 = (const void **)(v141 + 2);
    if ((v144 & 0x80) == 0)
    {
      if (!*((unsigned char *)v141 + 39)) {
        goto LABEL_150;
      }
      uint64_t v147 = v68;
      while (*(unsigned __int8 *)v146 == *(unsigned __int8 *)v147)
      {
        uint64_t v146 = (const void **)((char *)v146 + 1);
        uint64_t v147 = (void **)((char *)v147 + 1);
        if (!--v144) {
          goto LABEL_150;
        }
      }
      goto LABEL_120;
    }
    if (memcmp(*v146, v68, v141[3])) {
      goto LABEL_120;
    }
LABEL_150:
    uint64_t v37 = v201;
    uint64_t v35 = v202;
    if ((v64 & 0x80) != 0) {
LABEL_227:
    }
      operator delete(v206[0]);
LABEL_228:
    unint64_t v48 = *(void **)__dst;
    p_end_cap = v199;
    int64_t v38 = v200;
LABEL_229:
    if (v48)
    {
      *(void *)&__dst[8] = v48;
      operator delete(v48);
    }
    if (++v36 != v35) {
      continue;
    }
    break;
  }
LABEL_231:
  uint64_t v187 = *((void *)&v222 + 1);
  v188 = (std::__shared_weak_count *)v218;
  if ((void)v218 && !atomic_fetch_add((atomic_ullong *volatile)(v218 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
    std::__shared_weak_count::__release_weak(v188);
  }
  std::locale::~locale(v215);
  v189 = (std::__shared_weak_count *)v220;
  if ((void)v220 && !atomic_fetch_add((atomic_ullong *volatile)(v220 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
    std::__shared_weak_count::__release_weak(v189);
  }
  std::locale::~locale((std::locale *)v219);
  operator delete(v197);
  v190 = (void **)v222;
  if ((void)v222)
  {
    do
    {
      v196 = (void **)*v190;
      if (*((char *)v190 + 39) < 0) {
        operator delete(v190[2]);
      }
      operator delete(v190);
      v190 = v196;
    }
    while (v196);
  }
  v191 = (void *)v221;
  *(void *)&long long v221 = 0;
  if (v191) {
    operator delete(v191);
  }
  v192 = (void **)v224;
  if (v224)
  {
    v193 = (void **)v225;
    v194 = v224;
    if (v225 != v224)
    {
      do
      {
        if (*((char *)v193 - 1) < 0) {
          operator delete(*(v193 - 3));
        }
        v193 -= 3;
      }
      while (v193 != v192);
      v194 = v224;
    }
    v225 = (std::sub_match<const char *> *)v192;
    operator delete(v194);
  }
  return v187;
}

void sub_235E5A410(_Unwind_Exception *a1)
{
  operator delete(v2);
  std::unordered_set<std::string>::~unordered_set[abi:ne180100](&v3);
  std::vector<std::string>::~vector[abi:ne180100](&v4);
  _Unwind_Resume(a1);
}

void sub_235E5A418()
{
}

void sub_235E5A440(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t std::unordered_set<std::string>::~unordered_set[abi:ne180100](uint64_t a1)
{
  long long v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v5 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      long long v2 = v5;
    }
    while (v5);
  }
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

uint64_t util::compareTwoStringsWithPattern(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v87 = 0xAAAAAAAAAAAAAA00;
  v84[1].__end_cap_.__value_ = (std::sub_match<std::__wrap_iter<const char *>> *)0xAAAAAAAAAAAAAAAALL;
  long long v90 = v5;
  uint64_t v85 = 0;
  uint64_t v86 = 0;
  uint64_t v88 = 0;
  uint64_t v89 = 0;
  LOBYTE(v90) = 0;
  BYTE8(v90) = 0;
  uint64_t v91 = 0;
  memset(v84, 0, 41);
  long long v82 = v5;
  long long v83 = v5;
  *(_OWORD *)&v80[0].__locale_ = v5;
  long long v81 = v5;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v80, a3, 0);
  char v77 = 0;
  size_t v78 = 0;
  unint64_t v79 = 0;
  tm __p = 0;
  uint64_t v75 = 0;
  unint64_t v76 = 0;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v95 = 0xAAAAAAAAAAAAAA00;
  v92[1].__end_cap_.__value_ = (std::sub_match<const char *> *)0xAAAAAAAAAAAAAAAALL;
  long long v98 = v6;
  uint64_t v93 = 0;
  uint64_t v94 = 0;
  uint64_t v96 = 0;
  uint64_t v97 = 0;
  LOBYTE(v98) = 0;
  BYTE8(v98) = 0;
  uint64_t v99 = 0;
  memset(v92, 0, 32);
  uint64_t v7 = *(unsigned __int8 *)(a1 + 23);
  if ((v7 & 0x80u) == 0) {
    size_t v8 = (std::sub_match<const char *> *)a1;
  }
  else {
    size_t v8 = *(std::sub_match<const char *> **)a1;
  }
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a1 + 8);
  }
  *(_OWORD *)((char *)&v92[1].__begin_ + 1) = 0uLL;
  int v9 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v80, v8, (std::sub_match<const char *> *)((char *)v8 + v7), v92, 0);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 23);
  if ((v10 & 0x80u) == 0) {
    uint64_t v11 = a1;
  }
  else {
    uint64_t v11 = *(void *)a1;
  }
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *(void *)(a1 + 8);
  }
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v84, v11, (std::sub_match<std::__wrap_iter<const char *>> *)(v11 + v10), (uint64_t *)v92, 0);
  if (v92[0].__begin_)
  {
    v92[0].__end_ = v92[0].__begin_;
    operator delete(v92[0].__begin_);
  }
  if (v9)
  {
    std::vector<std::ssub_match>::pointer end = v84[0].__end_;
    std::vector<std::ssub_match>::pointer begin = v84[0].__begin_;
    if (v84[0].__begin_ != v84[0].__end_)
    {
      while (1)
      {
        if (!begin->matched)
        {
          memset(v92, 0, 24);
          uint64_t v25 = v78;
          if ((unint64_t)v78 >= v79) {
            goto LABEL_38;
          }
          goto LABEL_16;
        }
        std::__wrap_iter<const char *>::iterator_type i = begin->first.__i_;
        std::__wrap_iter<const char *>::iterator_type v15 = begin->second.__i_;
        unint64_t v17 = v15 - begin->first.__i_;
        if (v17 > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v17 > 0x16)
        {
          uint64_t v26 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v17 | 7) != 0x17) {
            uint64_t v26 = v17 | 7;
          }
          uint64_t v27 = v26 + 1;
          long long v18 = (std::sub_match<const char *> *)operator new(v26 + 1);
          v92[0].__end_ = (std::vector<std::csub_match>::pointer)v17;
          v92[0].__end_cap_.__value_ = (std::sub_match<const char *> *)(v27 | 0x8000000000000000);
          v92[0].__begin_ = v18;
          if (i == v15)
          {
LABEL_33:
            LOBYTE(v18->first) = 0;
            uint64_t v25 = v78;
            if ((unint64_t)v78 >= v79) {
              goto LABEL_38;
            }
            goto LABEL_16;
          }
        }
        else
        {
          HIBYTE(v92[0].__end_cap_.__value_) = (_BYTE)v15 - LOBYTE(begin->first.__i_);
          long long v18 = (std::sub_match<const char *> *)v92;
          if (i == v15) {
            goto LABEL_33;
          }
        }
        if (v17 < 0x20 || (unint64_t)((char *)v18 - i) < 0x20) {
          break;
        }
        long long v19 = (std::sub_match<const char *> *)((char *)v18 + (v17 & 0xFFFFFFFFFFFFFFE0));
        long long v20 = &i[v17 & 0xFFFFFFFFFFFFFFE0];
        int v21 = (long long *)(i + 16);
        p_matched = &v18->matched;
        unint64_t v23 = v17 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v24 = *v21;
          *((_OWORD *)p_matched - 1) = *(v21 - 1);
          *(_OWORD *)p_matched = v24;
          v21 += 2;
          p_matched += 32;
          v23 -= 32;
        }
        while (v23);
        if (v17 != (v17 & 0x7FFFFFFFFFFFFFE0)) {
          goto LABEL_36;
        }
LABEL_37:
        LOBYTE(v19->first) = 0;
        uint64_t v25 = v78;
        if ((unint64_t)v78 >= v79)
        {
LABEL_38:
          size_t v78 = std::vector<std::string>::__push_back_slow_path<std::string>(&v77, (uint64_t)v92);
          if (SHIBYTE(v92[0].__end_cap_.__value_) < 0) {
            operator delete(v92[0].__begin_);
          }
          goto LABEL_17;
        }
LABEL_16:
        long long v14 = *(_OWORD *)&v92[0].__begin_;
        *((void *)v25 + 2) = v92[0].__end_cap_.__value_;
        *(_OWORD *)uint64_t v25 = v14;
        size_t v78 = v25 + 24;
LABEL_17:
        if (++begin == end) {
          goto LABEL_40;
        }
      }
      long long v19 = v18;
      long long v20 = i;
      do
      {
LABEL_36:
        char v28 = *v20++;
        LOBYTE(v19->first) = v28;
        long long v19 = (std::sub_match<const char *> *)((char *)v19 + 1);
      }
      while (v20 != v15);
      goto LABEL_37;
    }
LABEL_40:
    long long v29 = (char *)v77;
    long long v30 = v78;
    if (v78 - (unsigned char *)v77 != 24)
    {
      if ((char *)v77 + 24 != v78)
      {
        long long v31 = (char *)v77 + 23;
        do
        {
          int v32 = (void **)(v31 - 23);
          if (*v31 < 0) {
            operator delete(*v32);
          }
          *(_OWORD *)int v32 = *(_OWORD *)(v31 + 1);
          *(void *)(v31 - 7) = *(void *)(v31 + 17);
          v31[24] = 0;
          v31 += 24;
          *(v31 - 23) = 0;
          v29 += 24;
        }
        while (v31 + 1 != v30);
        long long v30 = v78;
      }
      while (v30 != v29)
      {
        if (*(v30 - 1) < 0) {
          operator delete(*((void **)v30 - 3));
        }
        v30 -= 24;
      }
      size_t v78 = v29;
    }
    *(void *)&long long v33 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v33 + 1) = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v95 = 0xAAAAAAAAAAAAAA00;
    v92[1].__end_cap_.__value_ = (std::sub_match<const char *> *)0xAAAAAAAAAAAAAAAALL;
    long long v98 = v33;
    uint64_t v93 = 0;
    uint64_t v94 = 0;
    uint64_t v96 = 0;
    uint64_t v97 = 0;
    LOBYTE(v98) = 0;
    BYTE8(v98) = 0;
    uint64_t v99 = 0;
    memset(v92, 0, 32);
    uint64_t v34 = *(unsigned __int8 *)(a2 + 23);
    if ((v34 & 0x80u) == 0) {
      uint64_t v35 = (std::sub_match<const char *> *)a2;
    }
    else {
      uint64_t v35 = *(std::sub_match<const char *> **)a2;
    }
    if ((v34 & 0x80u) != 0) {
      uint64_t v34 = *(void *)(a2 + 8);
    }
    *(_OWORD *)((char *)&v92[1].__begin_ + 1) = 0uLL;
    int v36 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v80, v35, (std::sub_match<const char *> *)((char *)v35 + v34), v92, 0);
    uint64_t v37 = *(unsigned __int8 *)(a2 + 23);
    if ((v37 & 0x80u) == 0) {
      uint64_t v38 = a2;
    }
    else {
      uint64_t v38 = *(void *)a2;
    }
    if ((v37 & 0x80u) != 0) {
      uint64_t v37 = *(void *)(a2 + 8);
    }
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v84, v38, (std::sub_match<std::__wrap_iter<const char *>> *)(v38 + v37), (uint64_t *)v92, 0);
    if (v92[0].__begin_)
    {
      v92[0].__end_ = v92[0].__begin_;
      operator delete(v92[0].__begin_);
    }
    if (v36)
    {
      std::vector<std::ssub_match>::pointer v40 = v84[0].__end_;
      std::vector<std::ssub_match>::pointer v39 = v84[0].__begin_;
      if (v84[0].__begin_ != v84[0].__end_)
      {
        while (1)
        {
          if (!v39->matched)
          {
            memset(v92, 0, 24);
            uint64_t v52 = v75;
            if ((unint64_t)v75 >= v76) {
              goto LABEL_89;
            }
            goto LABEL_67;
          }
          std::__wrap_iter<const char *>::iterator_type v43 = v39->first.__i_;
          std::__wrap_iter<const char *>::iterator_type v42 = v39->second.__i_;
          unint64_t v44 = v42 - v39->first.__i_;
          if (v44 > 0x7FFFFFFFFFFFFFF7) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          if (v44 > 0x16)
          {
            uint64_t v53 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v44 | 7) != 0x17) {
              uint64_t v53 = v44 | 7;
            }
            uint64_t v54 = v53 + 1;
            int v45 = (std::sub_match<const char *> *)operator new(v53 + 1);
            v92[0].__end_ = (std::vector<std::csub_match>::pointer)v44;
            v92[0].__end_cap_.__value_ = (std::sub_match<const char *> *)(v54 | 0x8000000000000000);
            v92[0].__begin_ = v45;
            if (v43 == v42)
            {
LABEL_84:
              LOBYTE(v45->first) = 0;
              uint64_t v52 = v75;
              if ((unint64_t)v75 >= v76) {
                goto LABEL_89;
              }
              goto LABEL_67;
            }
          }
          else
          {
            HIBYTE(v92[0].__end_cap_.__value_) = (_BYTE)v42 - LOBYTE(v39->first.__i_);
            int v45 = (std::sub_match<const char *> *)v92;
            if (v43 == v42) {
              goto LABEL_84;
            }
          }
          if (v44 < 0x20 || (unint64_t)((char *)v45 - v43) < 0x20) {
            break;
          }
          uint64_t v46 = (std::sub_match<const char *> *)((char *)v45 + (v44 & 0xFFFFFFFFFFFFFFE0));
          uint64_t v47 = &v43[v44 & 0xFFFFFFFFFFFFFFE0];
          unint64_t v48 = (long long *)(v43 + 16);
          std::string v49 = &v45->matched;
          unint64_t v50 = v44 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v51 = *v48;
            *((_OWORD *)v49 - 1) = *(v48 - 1);
            *(_OWORD *)std::string v49 = v51;
            v48 += 2;
            v49 += 32;
            v50 -= 32;
          }
          while (v50);
          if (v44 != (v44 & 0x7FFFFFFFFFFFFFE0)) {
            goto LABEL_87;
          }
LABEL_88:
          LOBYTE(v46->first) = 0;
          uint64_t v52 = v75;
          if ((unint64_t)v75 >= v76)
          {
LABEL_89:
            uint64_t v75 = std::vector<std::string>::__push_back_slow_path<std::string>(&__p, (uint64_t)v92);
            if (SHIBYTE(v92[0].__end_cap_.__value_) < 0) {
              operator delete(v92[0].__begin_);
            }
            goto LABEL_68;
          }
LABEL_67:
          long long v41 = *(_OWORD *)&v92[0].__begin_;
          *((void *)v52 + 2) = v92[0].__end_cap_.__value_;
          *(_OWORD *)uint64_t v52 = v41;
          uint64_t v75 = v52 + 24;
LABEL_68:
          if (++v39 == v40) {
            goto LABEL_91;
          }
        }
        uint64_t v46 = v45;
        uint64_t v47 = v43;
        do
        {
LABEL_87:
          char v55 = *v47++;
          LOBYTE(v46->first) = v55;
          uint64_t v46 = (std::sub_match<const char *> *)((char *)v46 + 1);
        }
        while (v47 != v42);
        goto LABEL_88;
      }
LABEL_91:
      long long v57 = (char *)__p;
      unint64_t v56 = v75;
      if (v75 - (unsigned char *)__p == 24)
      {
        int64_t v58 = (char *)v77;
        int64_t v59 = v78;
        uint64_t v60 = 1;
        if (v77 != v78) {
          goto LABEL_117;
        }
LABEL_105:
        if (v57) {
          goto LABEL_106;
        }
LABEL_134:
        unint64_t v64 = (char *)v77;
        if (v77) {
          goto LABEL_135;
        }
        goto LABEL_108;
      }
      if ((char *)__p + 24 != v75)
      {
        long long v61 = (char *)__p + 23;
        do
        {
          long long v62 = (void **)(v61 - 23);
          if (*v61 < 0) {
            operator delete(*v62);
          }
          *(_OWORD *)long long v62 = *(_OWORD *)(v61 + 1);
          *(void *)(v61 - 7) = *(void *)(v61 + 17);
          v61[24] = 0;
          v61 += 24;
          *(v61 - 23) = 0;
          v57 += 24;
        }
        while (v61 + 1 != v56);
        unint64_t v56 = v75;
      }
      while (v56 != v57)
      {
        if (*(v56 - 1) < 0) {
          operator delete(*((void **)v56 - 3));
        }
        v56 -= 24;
      }
      uint64_t v75 = v57;
      long long v57 = (char *)__p;
      int64_t v58 = (char *)v77;
      int64_t v59 = v78;
      uint64_t v60 = 1;
      if (v77 == v78) {
        goto LABEL_105;
      }
      while (1)
      {
LABEL_117:
        uint64_t v66 = v58[23];
        if ((v66 & 0x80u) == 0) {
          uint64_t v67 = v58[23];
        }
        else {
          uint64_t v67 = *((void *)v58 + 1);
        }
        uint64_t v68 = v57[23];
        int v69 = (char)v68;
        if ((v68 & 0x80u) != 0) {
          uint64_t v68 = *((void *)v57 + 1);
        }
        if (v67 != v68) {
          break;
        }
        if (v69 >= 0) {
          uint64_t v70 = v57;
        }
        else {
          uint64_t v70 = *(char **)v57;
        }
        if ((v66 & 0x80) != 0)
        {
          if (memcmp(*(const void **)v58, v70, *((void *)v58 + 1))) {
            break;
          }
        }
        else if (v58[23])
        {
          uint64_t v71 = 0;
          while (v58[v71] == v70[v71])
          {
            if (v66 == ++v71) {
              goto LABEL_116;
            }
          }
          break;
        }
LABEL_116:
        v58 += 24;
        v57 += 24;
        if (v58 == v59) {
          goto LABEL_133;
        }
      }
    }
  }
  uint64_t v60 = 0;
LABEL_133:
  long long v57 = (char *)__p;
  if (!__p) {
    goto LABEL_134;
  }
LABEL_106:
  std::string v63 = v75;
  if (v75 != v57)
  {
    do
    {
      if (*(v63 - 1) < 0) {
        operator delete(*((void **)v63 - 3));
      }
      v63 -= 24;
    }
    while (v63 != v57);
    uint64_t v75 = v57;
    operator delete(__p);
    unint64_t v64 = (char *)v77;
    if (v77) {
      goto LABEL_135;
    }
LABEL_108:
    uint64_t v65 = (std::__shared_weak_count *)v83;
    if (!(void)v83) {
      goto LABEL_144;
    }
    goto LABEL_142;
  }
  uint64_t v75 = v57;
  operator delete(v57);
  unint64_t v64 = (char *)v77;
  if (!v77) {
    goto LABEL_108;
  }
LABEL_135:
  unint64_t v72 = v78;
  if (v78 == v64)
  {
    size_t v78 = v64;
    operator delete(v64);
    uint64_t v65 = (std::__shared_weak_count *)v83;
    if (!(void)v83) {
      goto LABEL_144;
    }
    goto LABEL_142;
  }
  do
  {
    if (*(v72 - 1) < 0) {
      operator delete(*((void **)v72 - 3));
    }
    v72 -= 24;
  }
  while (v72 != v64);
  size_t v78 = v64;
  operator delete(v77);
  uint64_t v65 = (std::__shared_weak_count *)v83;
  if ((void)v83)
  {
LABEL_142:
    if (!atomic_fetch_add(&v65->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
LABEL_144:
  std::locale::~locale(v80);
  if (v84[0].__begin_)
  {
    v84[0].__end_ = v84[0].__begin_;
    operator delete(v84[0].__begin_);
  }
  return v60;
}

void sub_235E5ACB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, std::locale a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  uint64_t v26 = *(void **)(v24 - 192);
  if (v26)
  {
    *(void *)(v24 - 184) = v26;
    operator delete(v26);
  }
  std::vector<std::string>::~vector[abi:ne180100]((void **)&a9);
  std::vector<std::string>::~vector[abi:ne180100](&a12);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a15);
  if (__p)
  {
    a24 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ***std::__exception_guard_exceptions<std::vector<std::string>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    long long v2 = *result;
    uint64_t v3 = (void **)**result;
    if (v3)
    {
      uint64_t v4 = (void **)v2[1];
      long long v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 1) < 0) {
            operator delete(*(v4 - 3));
          }
          v4 -= 3;
        }
        while (v4 != v3);
        long long v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

__n128 std::__introsort<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*,false>(unint64_t a1, const void **a2, uint64_t a3, char a4, __n128 result)
{
LABEL_1:
  v268 = a2 - 3;
  v271 = a2;
  v260 = a2 - 9;
  v261 = a2 - 6;
  unint64_t k = a1;
  while (1)
  {
    a1 = k;
    uint64_t v11 = (uint64_t)a2 - k;
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - k) >> 3);
    if (v6 || !v5)
    {
      switch(v12)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t v119 = (__n128 *)(a2 - 3);
          int v120 = *((char *)a2 - 1);
          if (v120 >= 0) {
            long long v121 = a2 - 3;
          }
          else {
            long long v121 = (const void **)*(a2 - 3);
          }
          if (v120 >= 0) {
            size_t v122 = *((unsigned __int8 *)a2 - 1);
          }
          else {
            size_t v122 = (size_t)*(a2 - 2);
          }
          int v123 = *(char *)(a1 + 23);
          uint64_t v124 = *(void **)a1;
          uint64_t v125 = *(const void **)(a1 + 8);
          if (v123 >= 0) {
            uint64_t v126 = (const void *)a1;
          }
          else {
            uint64_t v126 = *(const void **)a1;
          }
          if (v123 >= 0) {
            size_t v127 = *(unsigned __int8 *)(a1 + 23);
          }
          else {
            size_t v127 = *(void *)(a1 + 8);
          }
          if (v127 >= v122) {
            size_t v128 = v122;
          }
          else {
            size_t v128 = v127;
          }
          int v129 = memcmp(v121, v126, v128);
          if (v129)
          {
            if (v129 < 0) {
              return result;
            }
          }
          else if (v122 <= v127)
          {
            return result;
          }
          v258 = *(const void **)(a1 + 16);
          uint64_t v259 = (uint64_t)*(a2 - 1);
          uint64_t result = *v119;
          *(__n128 *)a1 = *v119;
          *(void *)(a1 + 16) = v259;
          *(a2 - 3) = v124;
          *(a2 - 2) = v125;
          *(a2 - 1) = v258;
          break;
        case 3uLL:
          result.n128_u64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, v268).n128_u64[0];
          return result;
        case 4uLL:
          result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, a1 + 48, v268).n128_u64[0];
          return result;
        case 5uLL:
          result.n128_u64[0] = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, a1 + 48, a1 + 72, v268).n128_u64[0];
          return result;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v11 <= 575)
    {
      if (a4)
      {
        if ((const void **)a1 == a2) {
          return result;
        }
        uint64_t v130 = (const void *)(a1 + 24);
        if ((const void **)(a1 + 24) == a2) {
          return result;
        }
        uint64_t v131 = 0;
        unint64_t v132 = a1;
        while (2)
        {
          unint64_t v134 = (__n128 *)v132;
          unint64_t v132 = (unint64_t)v130;
          int v135 = v134[2].n128_i8[15];
          if (v135 >= 0) {
            unint64_t v136 = v130;
          }
          else {
            unint64_t v136 = (const void *)v134[1].n128_u64[1];
          }
          if (v135 >= 0) {
            size_t v137 = v134[2].n128_u8[15];
          }
          else {
            size_t v137 = v134[2].n128_u64[0];
          }
          int v138 = v134[1].n128_i8[7];
          if (v138 >= 0) {
            unint64_t v139 = v134;
          }
          else {
            unint64_t v139 = (__n128 *)v134->n128_u64[0];
          }
          if (v138 >= 0) {
            size_t v140 = v134[1].n128_u8[7];
          }
          else {
            size_t v140 = v134->n128_u64[1];
          }
          if (v140 >= v137) {
            size_t v141 = v137;
          }
          else {
            size_t v141 = v140;
          }
          int v142 = memcmp(v136, v139, v141);
          if (v142)
          {
            if (v142 < 0)
            {
LABEL_266:
              uint64_t v130 = (const void *)(v132 + 24);
              v131 += 24;
              if ((const void **)(v132 + 24) == v271) {
                return result;
              }
              continue;
            }
          }
          else if (v137 <= v140)
          {
            goto LABEL_266;
          }
          break;
        }
        __n128 v143 = *(__n128 *)v132;
        int64_t v274 = *(void *)(v132 + 16);
        __n128 v273 = v143;
        if (v274 >= 0) {
          uint64_t v144 = &v273;
        }
        else {
          uint64_t v144 = (__n128 *)v143.n128_u64[0];
        }
        if (v274 >= 0) {
          size_t v145 = HIBYTE(v274);
        }
        else {
          size_t v145 = v143.n128_u64[1];
        }
        *(void *)(v132 + 16) = v134[1].n128_u64[0];
        *(__n128 *)unint64_t v132 = *v134;
        v134[1].n128_u8[7] = 0;
        v134->n128_u8[0] = 0;
        uint64_t v133 = (__n128 *)a1;
        if (v134 != (__n128 *)a1)
        {
          uint64_t v146 = v131;
          while (1)
          {
            uint64_t v147 = a1 + v146;
            int v148 = *(char *)(a1 + v146 - 1);
            if (v148 >= 0) {
              uint64_t v149 = (const void *)(a1 + v146 - 24);
            }
            else {
              uint64_t v149 = *(const void **)(a1 + v146 - 24);
            }
            if (v148 >= 0) {
              size_t v150 = *(unsigned __int8 *)(a1 + v146 - 1);
            }
            else {
              size_t v150 = *(void *)(a1 + v146 - 16);
            }
            if (v150 >= v145) {
              size_t v151 = v145;
            }
            else {
              size_t v151 = v150;
            }
            int v152 = memcmp(v144, v149, v151);
            if (v152)
            {
              if (v152 < 0)
              {
                uint64_t v133 = (__n128 *)(a1 + v146);
                break;
              }
            }
            else if (v145 <= v150)
            {
              uint64_t v133 = v134;
              break;
            }
            unint64_t v134 = (__n128 *)((char *)v134 - 24);
            *(_OWORD *)uint64_t v147 = *(_OWORD *)(a1 + v146 - 24);
            *(void *)(v147 + 16) = *(void *)(a1 + v146 - 8);
            *(unsigned char *)(v147 - 1) = 0;
            *(unsigned char *)(v147 - 24) = 0;
            v146 -= 24;
            if (!v146)
            {
              uint64_t v133 = (__n128 *)a1;
              break;
            }
          }
        }
        uint64_t result = v273;
        v133[1].n128_u64[0] = v274;
        *uint64_t v133 = result;
        goto LABEL_266;
      }
      if ((const void **)a1 == a2) {
        return result;
      }
      v239 = (const void *)(a1 + 24);
      if ((const void **)(a1 + 24) == a2) {
        return result;
      }
LABEL_478:
      v240 = (const void **)a1;
      a1 = (unint64_t)v239;
      int v241 = *((char *)v240 + 47);
      if (v241 >= 0) {
        v242 = v239;
      }
      else {
        v242 = v240[3];
      }
      if (v241 >= 0) {
        size_t v243 = *((unsigned __int8 *)v240 + 47);
      }
      else {
        size_t v243 = (size_t)v240[4];
      }
      int v244 = *((char *)v240 + 23);
      if (v244 >= 0) {
        v245 = v240;
      }
      else {
        v245 = *v240;
      }
      if (v244 >= 0) {
        size_t v246 = *((unsigned __int8 *)v240 + 23);
      }
      else {
        size_t v246 = (size_t)v240[1];
      }
      if (v246 >= v243) {
        size_t v247 = v243;
      }
      else {
        size_t v247 = v246;
      }
      int v248 = memcmp(v242, v245, v247);
      if (v248)
      {
        if (v248 < 0) {
          goto LABEL_477;
        }
      }
      else if (v243 <= v246)
      {
        goto LABEL_477;
      }
      __n128 v249 = *(__n128 *)a1;
      int64_t v274 = *(void *)(a1 + 16);
      __n128 v273 = v249;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)a1 = 0;
      if (v274 >= 0) {
        v250 = &v273;
      }
      else {
        v250 = (__n128 *)v273.n128_u64[0];
      }
      if (v274 >= 0) {
        size_t v251 = HIBYTE(v274);
      }
      else {
        size_t v251 = v273.n128_u64[1];
      }
      for (unint64_t i = a1; ; i -= 24)
      {
        *(_OWORD *)unint64_t i = *(_OWORD *)(i - 24);
        *(void *)(i + 16) = *(void *)(i - 8);
        *(unsigned char *)(i - 1) = 0;
        *(unsigned char *)(i - 24) = 0;
        int v253 = *(char *)(i - 25);
        if (v253 >= 0) {
          v254 = (const void *)(i - 48);
        }
        else {
          v254 = *(const void **)(i - 48);
        }
        if (v253 >= 0) {
          size_t v255 = *(unsigned __int8 *)(i - 25);
        }
        else {
          size_t v255 = *(void *)(i - 40);
        }
        if (v255 >= v251) {
          size_t v256 = v251;
        }
        else {
          size_t v256 = v255;
        }
        int v257 = memcmp(v250, v254, v256);
        if (v257)
        {
          if (v257 < 0)
          {
LABEL_476:
            uint64_t result = v273;
            *(void *)(i - 8) = v274;
            *(__n128 *)(i - 24) = result;
LABEL_477:
            v239 = (const void *)(a1 + 24);
            if ((const void **)(a1 + 24) == a2) {
              return result;
            }
            goto LABEL_478;
          }
        }
        else if (v251 <= v255)
        {
          goto LABEL_476;
        }
      }
    }
    if (!a3) {
      break;
    }
    unint64_t v13 = v12 >> 1;
    uint64_t v14 = a1 + 24 * (v12 >> 1);
    if ((unint64_t)v11 < 0xC01)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(v14, a1, v268);
      uint64_t v265 = a3 - 1;
      if ((a4 & 1) == 0)
      {
LABEL_10:
        int v19 = *(char *)(a1 - 1);
        if (v19 >= 0) {
          long long v20 = (const void *)(a1 - 24);
        }
        else {
          long long v20 = *(const void **)(a1 - 24);
        }
        if (v19 >= 0) {
          size_t v21 = *(unsigned __int8 *)(a1 - 1);
        }
        else {
          size_t v21 = *(void *)(a1 - 16);
        }
        int v22 = *(char *)(a1 + 23);
        if (v22 >= 0) {
          unint64_t v23 = (const void *)a1;
        }
        else {
          unint64_t v23 = *(const void **)a1;
        }
        if (v22 >= 0) {
          size_t v24 = *(unsigned __int8 *)(a1 + 23);
        }
        else {
          size_t v24 = *(void *)(a1 + 8);
        }
        if (v24 >= v21) {
          size_t v25 = v21;
        }
        else {
          size_t v25 = v24;
        }
        int v26 = memcmp(v20, v23, v25);
        if (v26)
        {
          if (v26 < 0) {
            goto LABEL_125;
          }
        }
        else if (v21 <= v24)
        {
LABEL_125:
          __n128 v72 = *(__n128 *)a1;
          int64_t v274 = *(void *)(a1 + 16);
          __n128 v273 = v72;
          *(void *)(a1 + 8) = 0;
          *(void *)(a1 + 16) = 0;
          *(void *)a1 = 0;
          long long v73 = a2;
          if (v274 >= 0) {
            uint64_t v74 = &v273;
          }
          else {
            uint64_t v74 = (__n128 *)v273.n128_u64[0];
          }
          if (v274 >= 0) {
            size_t v75 = HIBYTE(v274);
          }
          else {
            size_t v75 = v273.n128_u64[1];
          }
          size_t v76 = *((unsigned __int8 *)v73 - 1);
          size_t v78 = (const void **)*(v73 - 3);
          char v77 = *(v73 - 2);
          if ((v76 & 0x80u) == 0) {
            unint64_t v79 = v268;
          }
          else {
            unint64_t v79 = (const void **)*(v73 - 3);
          }
          if ((v76 & 0x80u) == 0) {
            size_t v80 = *((unsigned __int8 *)v73 - 1);
          }
          else {
            size_t v80 = (size_t)*(v73 - 2);
          }
          if (v80 >= v75) {
            size_t v81 = v75;
          }
          else {
            size_t v81 = v80;
          }
          int v82 = memcmp(v74, v79, v81);
          if (v82)
          {
            if ((v82 & 0x80000000) == 0)
            {
LABEL_142:
              unint64_t v83 = a1 + 24;
              do
              {
                while (1)
                {
                  unint64_t k = v83;
                  uint64_t v84 = *(unsigned __int8 *)(v83 + 23);
                  uint64_t v85 = (v84 & 0x80u) == 0 ? (const void *)k : *(const void **)k;
                  size_t v86 = (v84 & 0x80u) == 0 ? v84 : *(void *)(k + 8);
                  size_t v87 = v86 >= v75 ? v75 : v86;
                  int v88 = memcmp(v74, v85, v87);
                  unint64_t v83 = k + 24;
                  if (v88) {
                    break;
                  }
                  if (v75 > v86) {
                    goto LABEL_155;
                  }
                }
              }
              while (v88 < 0);
LABEL_155:
              j = v271;
              if (k < (unint64_t)v271)
              {
                for (j = v268; ; char v77 = j[1])
                {
                  if ((v76 & 0x80u) == 0) {
                    uint64_t v91 = j;
                  }
                  else {
                    uint64_t v91 = v78;
                  }
                  if ((v76 & 0x80u) == 0) {
                    size_t v92 = v76;
                  }
                  else {
                    size_t v92 = (size_t)v77;
                  }
                  if (v92 >= v75) {
                    size_t v93 = v75;
                  }
                  else {
                    size_t v93 = v92;
                  }
                  int v94 = memcmp(v74, v91, v93);
                  if (v94)
                  {
                    if (v94 < 0) {
                      break;
                    }
                  }
                  else if (v75 <= v92)
                  {
                    break;
                  }
                  long long v90 = (const void **)*(j - 3);
                  j -= 3;
                  size_t v78 = v90;
                  size_t v76 = *((unsigned __int8 *)j + 23);
                }
              }
              if (k < (unint64_t)j)
              {
                unint64_t v95 = *(const void **)k;
                do
                {
                  long long v96 = *(_OWORD *)(k + 8);
                  long long v97 = *(_OWORD *)j;
                  *(void *)(k + 16) = j[2];
                  *(_OWORD *)unint64_t k = v97;
                  *j = v95;
                  *(_OWORD *)(j + 1) = v96;
                  if (v274 >= 0) {
                    long long v98 = &v273;
                  }
                  else {
                    long long v98 = (__n128 *)v273.n128_u64[0];
                  }
                  if (v274 >= 0) {
                    unint64_t v99 = HIBYTE(v274);
                  }
                  else {
                    unint64_t v99 = v273.n128_u64[1];
                  }
                  unint64_t v100 = k + 24;
                  do
                  {
                    while (1)
                    {
                      unint64_t k = v100;
                      uint64_t v101 = *(unsigned __int8 *)(v100 + 23);
                      unint64_t v95 = *(const void **)k;
                      uint64_t v102 = (v101 & 0x80u) == 0 ? (const void *)k : *(const void **)k;
                      unint64_t v103 = (v101 & 0x80u) == 0 ? v101 : *(void *)(k + 8);
                      size_t v104 = v103 >= v99 ? v99 : v103;
                      int v105 = memcmp(v98, v102, v104);
                      unint64_t v100 = k + 24;
                      if (v105) {
                        break;
                      }
                      if (v99 > v103) {
                        goto LABEL_192;
                      }
                    }
                  }
                  while (v105 < 0);
LABEL_192:
                  unint64_t v106 = j - 3;
                  do
                  {
                    while (1)
                    {
                      j = v106;
                      unint64_t v107 = (const void *)*((unsigned __int8 *)v106 + 23);
                      unint64_t v108 = (char)v107 >= 0 ? j : (const void **)*j;
                      std::string::size_type v109 = (char)v107 >= 0 ? v107 : j[1];
                      size_t v110 = (unint64_t)v109 >= v99 ? v99 : (size_t)v109;
                      int v111 = memcmp(v98, v108, v110);
                      unint64_t v106 = j - 3;
                      if (v111) {
                        break;
                      }
                      if (v99 <= (unint64_t)v109) {
                        goto LABEL_172;
                      }
                    }
                  }
                  while ((v111 & 0x80000000) == 0);
LABEL_172:
                  ;
                }
                while (k < (unint64_t)j);
              }
              uint64_t v112 = (__n128 *)(k - 24);
              BOOL v5 = k - 24 >= a1;
              BOOL v6 = k - 24 == a1;
              if (k - 24 == a1)
              {
                a2 = v271;
                a3 = v265;
                if (*(char *)(k - 1) < 0) {
                  operator delete(*(void **)a1);
                }
              }
              else
              {
                if (*(char *)(a1 + 23) < 0) {
                  operator delete(*(void **)a1);
                }
                __n128 v113 = *v112;
                *(void *)(a1 + 16) = *(void *)(k - 8);
                *(__n128 *)a1 = v113;
                *(unsigned char *)(k - 1) = 0;
                *(unsigned char *)(k - 24) = 0;
                a2 = v271;
                a3 = v265;
              }
              a4 = 0;
              uint64_t result = v273;
              *(void *)(k - 8) = v274;
              *uint64_t v112 = result;
              continue;
            }
          }
          else if (v75 > v80)
          {
            goto LABEL_142;
          }
          for (unint64_t k = a1 + 24; k < (unint64_t)v271; k += 24)
          {
            int v114 = *(char *)(k + 23);
            if (v114 >= 0) {
              uint64_t v115 = (const void *)k;
            }
            else {
              uint64_t v115 = *(const void **)k;
            }
            if (v114 >= 0) {
              size_t v116 = *(unsigned __int8 *)(k + 23);
            }
            else {
              size_t v116 = *(void *)(k + 8);
            }
            if (v116 >= v75) {
              size_t v117 = v75;
            }
            else {
              size_t v117 = v116;
            }
            int v118 = memcmp(v74, v115, v117);
            if (v118)
            {
              if ((v118 & 0x80000000) == 0) {
                goto LABEL_155;
              }
            }
            else if (v75 > v116)
            {
              goto LABEL_155;
            }
          }
          goto LABEL_155;
        }
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, v14, v268);
      uint64_t v15 = 24 * v13;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1 + 24, v15 + a1 - 24, v261);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1 + 48, a1 + 24 + v15, v260);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(v15 + a1 - 24, v14, (const void **)(a1 + 24 + v15));
      long long v16 = *(void **)a1;
      long long v17 = *(_OWORD *)(a1 + 8);
      long long v18 = *(_OWORD *)v14;
      *(void *)(a1 + 16) = *(void *)(v14 + 16);
      *(_OWORD *)a1 = v18;
      *(void *)uint64_t v14 = v16;
      *(_OWORD *)(v14 + 8) = v17;
      uint64_t v265 = a3 - 1;
      if ((a4 & 1) == 0) {
        goto LABEL_10;
      }
    }
    uint64_t v27 = 0;
    __n128 v28 = *(__n128 *)a1;
    int64_t v274 = *(void *)(a1 + 16);
    __n128 v273 = v28;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    if (v274 >= 0) {
      long long v29 = &v273;
    }
    else {
      long long v29 = (__n128 *)v273.n128_u64[0];
    }
    if (v274 >= 0) {
      unint64_t v30 = HIBYTE(v274);
    }
    else {
      unint64_t v30 = v273.n128_u64[1];
    }
    while (1)
    {
      long long v31 = *(const void **)(a1 + v27 + 24);
      int v32 = *(char *)(a1 + v27 + 47);
      long long v33 = v32 >= 0 ? (const void *)(a1 + v27 + 24) : *(const void **)(a1 + v27 + 24);
      unint64_t v34 = v32 >= 0 ? *(unsigned __int8 *)(a1 + v27 + 47) : *(void *)(a1 + v27 + 32);
      size_t v35 = v30 >= v34 ? v34 : v30;
      int v36 = memcmp(v33, v29, v35);
      if (v36) {
        break;
      }
      if (v34 <= v30) {
        goto LABEL_46;
      }
LABEL_34:
      v27 += 24;
    }
    if ((v36 & 0x80000000) == 0) {
      goto LABEL_34;
    }
LABEL_46:
    unint64_t v37 = a1 + v27 + 24;
    uint64_t v38 = v268;
    if (v27)
    {
      do
      {
        while (1)
        {
          std::vector<std::ssub_match>::pointer v39 = v38;
          uint64_t v46 = (const void *)*((unsigned __int8 *)v38 + 23);
          uint64_t v47 = (char)v46 >= 0 ? v39 : (const void **)*v39;
          unint64_t v48 = (unint64_t)((char)v46 >= 0 ? v46 : v39[1]);
          size_t v49 = v30 >= v48 ? v48 : v30;
          int v50 = memcmp(v47, v29, v49);
          uint64_t v38 = v39 - 3;
          if (v50) {
            break;
          }
          if (v48 > v30) {
            goto LABEL_77;
          }
        }
      }
      while (v50 < 0);
    }
    else
    {
      std::vector<std::ssub_match>::pointer v39 = v271;
      if (v37 < (unint64_t)v271)
      {
        std::vector<std::ssub_match>::pointer v40 = v268;
        do
        {
          while (1)
          {
            std::vector<std::ssub_match>::pointer v39 = v40;
            long long v41 = (const void *)*((unsigned __int8 *)v40 + 23);
            std::__wrap_iter<const char *>::iterator_type v42 = (char)v41 >= 0 ? v39 : (const void **)*v39;
            unint64_t v43 = (unint64_t)((char)v41 >= 0 ? v41 : v39[1]);
            size_t v44 = v30 >= v43 ? v43 : v30;
            int v45 = memcmp(v42, v29, v44);
            std::vector<std::ssub_match>::pointer v40 = v39 - 3;
            if (!v45) {
              break;
            }
            if (v37 >= (unint64_t)v39 || (v45 & 0x80000000) == 0) {
              goto LABEL_77;
            }
          }
        }
        while (v37 < (unint64_t)v39 && v43 <= v30);
      }
    }
LABEL_77:
    if (v37 >= (unint64_t)v39)
    {
      unint64_t k = v37;
    }
    else
    {
      long long v51 = v39;
      unint64_t k = v37;
      do
      {
        long long v52 = *(_OWORD *)(k + 8);
        long long v53 = *(_OWORD *)v51;
        *(void *)(k + 16) = v51[2];
        *(_OWORD *)unint64_t k = v53;
        long long *v51 = v31;
        *(_OWORD *)(v51 + 1) = v52;
        if (v274 >= 0) {
          uint64_t v54 = &v273;
        }
        else {
          uint64_t v54 = (__n128 *)v273.n128_u64[0];
        }
        if (v274 >= 0) {
          unint64_t v55 = HIBYTE(v274);
        }
        else {
          unint64_t v55 = v273.n128_u64[1];
        }
        unint64_t v56 = k + 24;
        do
        {
          while (1)
          {
            unint64_t k = v56;
            uint64_t v57 = *(unsigned __int8 *)(v56 + 23);
            long long v31 = *(const void **)k;
            int64_t v58 = (v57 & 0x80u) == 0 ? (const void *)k : *(const void **)k;
            unint64_t v59 = (v57 & 0x80u) == 0 ? v57 : *(void *)(k + 8);
            size_t v60 = v55 >= v59 ? v59 : v55;
            int v61 = memcmp(v58, v54, v60);
            unint64_t v56 = k + 24;
            if (v61) {
              break;
            }
            if (v59 <= v55) {
              goto LABEL_99;
            }
          }
        }
        while ((v61 & 0x80000000) == 0);
LABEL_99:
        long long v62 = v51 - 3;
        do
        {
          while (1)
          {
            long long v51 = v62;
            std::string v63 = (const void *)*((unsigned __int8 *)v62 + 23);
            unint64_t v64 = (char)v63 >= 0 ? v51 : (const void **)*v51;
            unint64_t v65 = (unint64_t)((char)v63 >= 0 ? v63 : v51[1]);
            size_t v66 = v55 >= v65 ? v65 : v55;
            int v67 = memcmp(v64, v54, v66);
            long long v62 = v51 - 3;
            if (v67) {
              break;
            }
            if (v65 > v55) {
              goto LABEL_79;
            }
          }
        }
        while (v67 < 0);
LABEL_79:
        ;
      }
      while (k < (unint64_t)v51);
    }
    uint64_t v68 = (__n128 *)(k - 24);
    if (k - 24 == a1)
    {
      a2 = v271;
      a3 = v265;
      if (*(char *)(k - 1) < 0) {
        operator delete(*(void **)a1);
      }
    }
    else
    {
      a2 = v271;
      a3 = v265;
      if (*(char *)(a1 + 23) < 0) {
        operator delete(*(void **)a1);
      }
      __n128 v69 = *v68;
      *(void *)(a1 + 16) = *(void *)(k - 8);
      *(__n128 *)a1 = v69;
      *(unsigned char *)(k - 1) = 0;
      *(unsigned char *)(k - 24) = 0;
    }
    __n128 v70 = v273;
    *(void *)(k - 8) = v274;
    *uint64_t v68 = v70;
    if (v37 < (unint64_t)v39)
    {
LABEL_123:
      std::__introsort<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*,false>(a1, k - 24, a3, a4 & 1);
      a4 = 0;
    }
    else
    {
      BOOL v71 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, (const void **)(k - 24));
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(k, a2))
      {
        a2 = (const void **)(k - 24);
        if (v71) {
          return result;
        }
        goto LABEL_1;
      }
      if (!v71) {
        goto LABEL_123;
      }
    }
  }
  if ((const void **)a1 == a2) {
    return result;
  }
  int64_t v153 = (v12 - 2) >> 1;
  int64_t v154 = v153;
  while (2)
  {
    int64_t v156 = v154;
    if (v153 >= v154)
    {
      uint64_t v157 = (2 * v154) | 1;
      unint64_t v158 = a1 + 24 * v157;
      uint64_t v159 = 2 * v154 + 2;
      if (v159 >= (uint64_t)v12) {
        goto LABEL_337;
      }
      unint64_t v160 = (const void **)(v158 + 24);
      int v161 = *(char *)(v158 + 23);
      if (v161 >= 0) {
        v162 = (const void *)(a1 + 24 * v157);
      }
      else {
        v162 = *(const void **)v158;
      }
      if (v161 >= 0) {
        size_t v163 = *(unsigned __int8 *)(v158 + 23);
      }
      else {
        size_t v163 = *(void *)(v158 + 8);
      }
      int v164 = *(char *)(v158 + 47);
      if (v164 >= 0) {
        uint64_t v165 = (const void *)(v158 + 24);
      }
      else {
        uint64_t v165 = *(const void **)(v158 + 24);
      }
      if (v164 >= 0) {
        size_t v166 = *(unsigned __int8 *)(v158 + 47);
      }
      else {
        size_t v166 = *(void *)(v158 + 32);
      }
      if (v166 >= v163) {
        size_t v167 = v163;
      }
      else {
        size_t v167 = v166;
      }
      int v168 = memcmp(v162, v165, v167);
      if (v168)
      {
        a2 = v271;
        if (v168 < 0)
        {
LABEL_337:
          unint64_t v160 = (const void **)(a1 + 24 * v157);
          uint64_t v159 = (2 * v156) | 1;
        }
      }
      else
      {
        BOOL v169 = v163 >= v166;
        if (v163 == v166)
        {
          unint64_t v160 = (const void **)(a1 + 24 * v157);
          uint64_t v159 = (2 * v156) | 1;
          a2 = v271;
        }
        else
        {
          a2 = v271;
          if (!v169) {
            goto LABEL_337;
          }
        }
      }
      unint64_t v170 = a1 + 24 * v156;
      int v171 = *((char *)v160 + 23);
      if (v171 >= 0) {
        uint64_t v172 = v160;
      }
      else {
        uint64_t v172 = *v160;
      }
      if (v171 >= 0) {
        size_t v173 = *((unsigned __int8 *)v160 + 23);
      }
      else {
        size_t v173 = (size_t)v160[1];
      }
      int v174 = *(char *)(v170 + 23);
      if (v174 >= 0) {
        uint64_t v175 = (const void *)(a1 + 24 * v156);
      }
      else {
        uint64_t v175 = *(const void **)v170;
      }
      if (v174 >= 0) {
        size_t v176 = *(unsigned __int8 *)(v170 + 23);
      }
      else {
        size_t v176 = *(void *)(v170 + 8);
      }
      if (v176 >= v173) {
        size_t v177 = v173;
      }
      else {
        size_t v177 = v176;
      }
      int v178 = memcmp(v172, v175, v177);
      if (v178)
      {
        int64_t v153 = (v12 - 2) >> 1;
        if (v178 < 0)
        {
LABEL_357:
          __n128 v180 = *(__n128 *)v170;
          int64_t v274 = *(void *)(v170 + 16);
          __n128 v273 = v180;
          *(void *)(v170 + 8) = 0;
          *(void *)(v170 + 16) = 0;
          *(void *)unint64_t v170 = 0;
          long long v181 = *(_OWORD *)v160;
          *(void *)(v170 + 16) = v160[2];
          *(_OWORD *)unint64_t v170 = v181;
          *((unsigned char *)v160 + 23) = 0;
          *(unsigned char *)unint64_t v160 = 0;
          if (v153 >= v159)
          {
            unint64_t v182 = HIBYTE(v274);
            size_t v183 = &v273;
            if (v274 < 0)
            {
              unint64_t v182 = v273.n128_u64[1];
              size_t v183 = (__n128 *)v273.n128_u64[0];
            }
            size_t v263 = v182;
            v266 = v183;
            int64_t v269 = v156;
            while (1)
            {
              uint64_t v185 = (2 * v159) | 1;
              unint64_t v186 = a1 + 24 * v185;
              uint64_t v159 = 2 * v159 + 2;
              if (v159 >= (uint64_t)v12) {
                goto LABEL_385;
              }
              uint64_t v155 = (const void **)(v186 + 24);
              int v187 = *(char *)(v186 + 23);
              v188 = v187 >= 0 ? (const void *)(a1 + 24 * v185) : *(const void **)v186;
              unint64_t v189 = v187 >= 0 ? *(unsigned __int8 *)(v186 + 23) : *(void *)(v186 + 8);
              int v190 = *(char *)(v186 + 47);
              v191 = v190 >= 0 ? (const void *)(v186 + 24) : *(const void **)(v186 + 24);
              unint64_t v192 = v190 >= 0 ? *(unsigned __int8 *)(v186 + 47) : *(void *)(v186 + 32);
              size_t v193 = v192 >= v189 ? v189 : v192;
              int v194 = memcmp(v188, v191, v193);
              if (v194) {
                break;
              }
              BOOL v195 = v189 >= v192;
              if (v189 == v192)
              {
                uint64_t v155 = (const void **)(a1 + 24 * v185);
                uint64_t v159 = v185;
                a2 = v271;
                int64_t v153 = (v12 - 2) >> 1;
                goto LABEL_386;
              }
              a2 = v271;
              int64_t v153 = (v12 - 2) >> 1;
              if (!v195) {
                goto LABEL_385;
              }
LABEL_386:
              int v196 = *((char *)v155 + 23);
              if (v196 >= 0) {
                v197 = v155;
              }
              else {
                v197 = *v155;
              }
              if (v196 >= 0) {
                size_t v198 = *((unsigned __int8 *)v155 + 23);
              }
              else {
                size_t v198 = (size_t)v155[1];
              }
              if (v263 >= v198) {
                size_t v199 = v198;
              }
              else {
                size_t v199 = v263;
              }
              int v200 = memcmp(v197, v266, v199);
              if (v200)
              {
                int64_t v156 = v269;
                if ((v200 & 0x80000000) == 0) {
                  goto LABEL_311;
                }
              }
              else
              {
                int64_t v156 = v269;
                if (v198 > v263) {
                  goto LABEL_311;
                }
              }
              long long v184 = *(_OWORD *)v155;
              v160[2] = v155[2];
              *(_OWORD *)unint64_t v160 = v184;
              *((unsigned char *)v155 + 23) = 0;
              *(unsigned char *)uint64_t v155 = 0;
              unint64_t v160 = v155;
              if (v153 < v159) {
                goto LABEL_312;
              }
            }
            a2 = v271;
            int64_t v153 = (v12 - 2) >> 1;
            if ((v194 & 0x80000000) == 0) {
              goto LABEL_386;
            }
LABEL_385:
            uint64_t v155 = (const void **)(a1 + 24 * v185);
            uint64_t v159 = v185;
            goto LABEL_386;
          }
LABEL_311:
          uint64_t v155 = v160;
LABEL_312:
          uint64_t result = v273;
          v155[2] = (const void *)v274;
          *(__n128 *)uint64_t v155 = result;
        }
      }
      else
      {
        BOOL v179 = v173 > v176;
        int64_t v153 = (v12 - 2) >> 1;
        if (!v179) {
          goto LABEL_357;
        }
      }
    }
    int64_t v154 = v156 - 1;
    if (v156) {
      continue;
    }
    break;
  }
  int64_t v201 = v11 / 0x18uLL;
  do
  {
    if (v201 < 2) {
      goto LABEL_400;
    }
    uint64_t v202 = 0;
    v270 = *(void **)a1;
    v272 = a2;
    v264 = *(const void **)(a1 + 16);
    v267 = *(const void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    unint64_t v203 = a1;
    *(void *)a1 = 0;
    do
    {
      uint64_t v205 = v203 + 24 * v202 + 24;
      uint64_t v206 = (2 * v202) | 1;
      uint64_t v202 = 2 * v202 + 2;
      if (v202 < v201)
      {
        v204 = (__n128 *)(v205 + 24);
        int v207 = *(char *)(v205 + 23);
        if (v207 >= 0) {
          std::locale v208 = (const void *)v205;
        }
        else {
          std::locale v208 = *(const void **)v205;
        }
        if (v207 >= 0) {
          size_t v209 = *(unsigned __int8 *)(v205 + 23);
        }
        else {
          size_t v209 = *(void *)(v205 + 8);
        }
        int v210 = *(char *)(v205 + 47);
        if (v210 >= 0) {
          uint64_t v211 = (const void *)(v205 + 24);
        }
        else {
          uint64_t v211 = *(const void **)(v205 + 24);
        }
        if (v210 >= 0) {
          size_t v212 = *(unsigned __int8 *)(v205 + 47);
        }
        else {
          size_t v212 = *(void *)(v205 + 32);
        }
        if (v212 >= v209) {
          size_t v213 = v209;
        }
        else {
          size_t v213 = v212;
        }
        int v214 = memcmp(v208, v211, v213);
        if (v214)
        {
          if ((v214 & 0x80000000) == 0) {
            goto LABEL_424;
          }
        }
        else if (v209 != v212 && v209 >= v212)
        {
LABEL_424:
          if ((*(char *)(v203 + 23) & 0x80000000) == 0) {
            goto LABEL_405;
          }
          goto LABEL_425;
        }
      }
      v204 = (__n128 *)v205;
      uint64_t v202 = v206;
      if ((*(char *)(v203 + 23) & 0x80000000) == 0) {
        goto LABEL_405;
      }
LABEL_425:
      operator delete(*(void **)v203);
LABEL_405:
      uint64_t result = *v204;
      *(void *)(v203 + 16) = v204[1].n128_u64[0];
      *(__n128 *)unint64_t v203 = result;
      v204[1].n128_u8[7] = 0;
      v204->n128_u8[0] = 0;
      unint64_t v203 = (unint64_t)v204;
    }
    while (v202 <= (uint64_t)((unint64_t)(v201 - 2) >> 1));
    if (v204 == (__n128 *)(a2 - 3))
    {
      v204->n128_u64[0] = (unint64_t)v270;
      v204->n128_u64[1] = (unint64_t)v267;
      v204[1].n128_u64[0] = (unint64_t)v264;
      goto LABEL_400;
    }
    uint64_t result = *(__n128 *)(a2 - 3);
    v204[1].n128_u64[0] = (unint64_t)*(a2 - 1);
    __n128 *v204 = result;
    *(a2 - 3) = v270;
    *(a2 - 2) = v267;
    *(a2 - 1) = v264;
    uint64_t v215 = (uint64_t)&v204[1].n128_i64[1] - a1;
    if (v215 >= 25)
    {
      unint64_t v216 = v215 / 0x18uLL - 2;
      unint64_t v217 = v216 >> 1;
      unint64_t v218 = a1 + 24 * (v216 >> 1);
      int v219 = *(char *)(v218 + 23);
      if (v219 >= 0) {
        long long v220 = (const void *)(a1 + 24 * (v216 >> 1));
      }
      else {
        long long v220 = *(const void **)v218;
      }
      if (v219 >= 0) {
        size_t v221 = *(unsigned __int8 *)(v218 + 23);
      }
      else {
        size_t v221 = *(void *)(v218 + 8);
      }
      int v222 = v204[1].n128_i8[7];
      if (v222 >= 0) {
        unint64_t v223 = v204;
      }
      else {
        unint64_t v223 = (__n128 *)v204->n128_u64[0];
      }
      if (v222 >= 0) {
        size_t v224 = v204[1].n128_u8[7];
      }
      else {
        size_t v224 = v204->n128_u64[1];
      }
      if (v224 >= v221) {
        size_t v225 = v221;
      }
      else {
        size_t v225 = v224;
      }
      int v226 = memcmp(v220, v223, v225);
      if (v226)
      {
        if (v226 < 0) {
          goto LABEL_400;
        }
      }
      else if (v221 <= v224)
      {
        goto LABEL_400;
      }
      __n128 v227 = *v204;
      int64_t v274 = v204[1].n128_i64[0];
      __n128 v273 = v227;
      v204->n128_u64[1] = 0;
      v204[1].n128_u64[0] = 0;
      v204->n128_u64[0] = 0;
      if (v274 >= 0) {
        uint64_t v228 = &v273;
      }
      else {
        uint64_t v228 = (__n128 *)v273.n128_u64[0];
      }
      if (v274 >= 0) {
        size_t v229 = HIBYTE(v274);
      }
      else {
        size_t v229 = v273.n128_u64[1];
      }
      __n128 v230 = *(__n128 *)v218;
      v204[1].n128_u64[0] = *(void *)(v218 + 16);
      __n128 *v204 = v230;
      *(unsigned char *)(v218 + 23) = 0;
      *(unsigned char *)unint64_t v218 = 0;
      if (v216 >= 2)
      {
        while (1)
        {
          unint64_t v232 = v217 - 1;
          unint64_t v217 = (v217 - 1) >> 1;
          unint64_t v233 = a1 + 24 * v217;
          int v234 = *(char *)(v233 + 23);
          if (v234 >= 0) {
            uint64_t v235 = (const void *)(a1 + 24 * v217);
          }
          else {
            uint64_t v235 = *(const void **)v233;
          }
          if (v234 >= 0) {
            size_t v236 = *(unsigned __int8 *)(v233 + 23);
          }
          else {
            size_t v236 = *(void *)(v233 + 8);
          }
          if (v229 >= v236) {
            size_t v237 = v236;
          }
          else {
            size_t v237 = v229;
          }
          int v238 = memcmp(v235, v228, v237);
          if (v238)
          {
            if (v238 < 0) {
              break;
            }
          }
          else if (v236 <= v229)
          {
            break;
          }
          long long v231 = *(_OWORD *)v233;
          *(void *)(v218 + 16) = *(void *)(v233 + 16);
          *(_OWORD *)unint64_t v218 = v231;
          *(unsigned char *)(v233 + 23) = 0;
          *(unsigned char *)unint64_t v233 = 0;
          unint64_t v218 = a1 + 24 * v217;
          if (v232 <= 1) {
            goto LABEL_472;
          }
        }
      }
      unint64_t v233 = v218;
LABEL_472:
      uint64_t result = v273;
      *(void *)(v233 + 16) = v274;
      *(__n128 *)unint64_t v233 = result;
      a2 = v272;
    }
LABEL_400:
    a2 -= 3;
    BOOL v179 = (unint64_t)v201-- > 2;
  }
  while (v179);
  return result;
}

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(uint64_t a1, uint64_t a2, const void **a3)
{
  int v6 = *(char *)(a2 + 23);
  uint64_t v7 = *(const void **)a2;
  size_t v8 = *(const void **)(a2 + 8);
  if (v6 >= 0) {
    int v9 = (const void *)a2;
  }
  else {
    int v9 = *(const void **)a2;
  }
  if (v6 >= 0) {
    size_t v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v10 = *(void *)(a2 + 8);
  }
  int v11 = *(char *)(a1 + 23);
  unint64_t v13 = *(const void **)a1;
  unint64_t v12 = *(const void **)(a1 + 8);
  if (v11 >= 0) {
    uint64_t v14 = (const void *)a1;
  }
  else {
    uint64_t v14 = *(const void **)a1;
  }
  if (v11 >= 0) {
    size_t v15 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    size_t v15 = *(void *)(a1 + 8);
  }
  if (v15 >= v10) {
    size_t v16 = v10;
  }
  else {
    size_t v16 = v15;
  }
  int v17 = memcmp(v9, v14, v16);
  if (v17)
  {
    if ((v17 & 0x80000000) == 0) {
      goto LABEL_18;
    }
  }
  else if (v10 > v15)
  {
LABEL_18:
    int v18 = *((char *)a3 + 23);
    if (v18 >= 0) {
      int v19 = a3;
    }
    else {
      int v19 = *a3;
    }
    if (v18 >= 0) {
      size_t v20 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      size_t v20 = (size_t)a3[1];
    }
    if (v10 >= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v10;
    }
    int v22 = memcmp(v19, v9, v21);
    if (v22)
    {
      if ((v22 & 0x80000000) == 0)
      {
LABEL_29:
        unint64_t v23 = *(const void **)(a1 + 16);
        size_t v24 = a3[2];
        __n128 result = *(__n128 *)a3;
        *(_OWORD *)a1 = *(_OWORD *)a3;
        *(void *)(a1 + 16) = v24;
        *a3 = v13;
        a3[1] = v12;
        a3[2] = v23;
        return result;
      }
    }
    else if (v20 > v10)
    {
      goto LABEL_29;
    }
    uint64_t v31 = *(void *)(a1 + 16);
    uint64_t v32 = *(void *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = v32;
    *(void *)a2 = v13;
    *(void *)(a2 + 8) = v12;
    *(void *)(a2 + 16) = v31;
    int v33 = *((char *)a3 + 23);
    if (v33 >= 0) {
      unint64_t v34 = a3;
    }
    else {
      unint64_t v34 = *a3;
    }
    if (v33 >= 0) {
      size_t v35 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      size_t v35 = (size_t)a3[1];
    }
    if (v31 >= 0) {
      int v36 = (const void *)a2;
    }
    else {
      int v36 = v13;
    }
    if (v31 >= 0) {
      size_t v37 = HIBYTE(v31);
    }
    else {
      size_t v37 = (size_t)v12;
    }
    if (v37 >= v35) {
      size_t v38 = v35;
    }
    else {
      size_t v38 = v37;
    }
    int v39 = memcmp(v34, v36, v38);
    if (v39)
    {
      if (v39 < 0) {
        return result;
      }
    }
    else if (v35 <= v37)
    {
      return result;
    }
    __n128 result = *(__n128 *)a3;
    *(void *)(a2 + 16) = a3[2];
    *(__n128 *)a2 = result;
    *a3 = v13;
    a3[1] = v12;
    a3[2] = (const void *)v31;
    return result;
  }
  int v26 = *((char *)a3 + 23);
  if (v26 >= 0) {
    uint64_t v27 = a3;
  }
  else {
    uint64_t v27 = *a3;
  }
  if (v26 >= 0) {
    size_t v28 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v28 = (size_t)a3[1];
  }
  if (v10 >= v28) {
    size_t v29 = v28;
  }
  else {
    size_t v29 = v10;
  }
  int v30 = memcmp(v27, v9, v29);
  if (v30)
  {
    if (v30 < 0) {
      return result;
    }
  }
  else if (v28 <= v10)
  {
    return result;
  }
  std::vector<std::ssub_match>::pointer v40 = *(const void **)(a2 + 16);
  long long v41 = a3[2];
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(void *)(a2 + 16) = v41;
  *a3 = v7;
  a3[1] = v8;
  a3[2] = v40;
  int v42 = *(char *)(a2 + 23);
  if (v42 >= 0) {
    unint64_t v43 = (const void *)a2;
  }
  else {
    unint64_t v43 = *(const void **)a2;
  }
  if (v42 >= 0) {
    size_t v44 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v44 = *(void *)(a2 + 8);
  }
  int v45 = *(char *)(a1 + 23);
  uint64_t v46 = *(const void **)a1;
  uint64_t v47 = *(void *)(a1 + 8);
  if (v45 >= 0) {
    unint64_t v48 = (const void *)a1;
  }
  else {
    unint64_t v48 = *(const void **)a1;
  }
  if (v45 >= 0) {
    size_t v49 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    size_t v49 = *(void *)(a1 + 8);
  }
  if (v49 >= v44) {
    size_t v50 = v44;
  }
  else {
    size_t v50 = v49;
  }
  int v51 = memcmp(v43, v48, v50);
  if (!v51)
  {
    if (v44 <= v49) {
      return result;
    }
    goto LABEL_84;
  }
  if ((v51 & 0x80000000) == 0)
  {
LABEL_84:
    uint64_t v52 = *(void *)(a1 + 16);
    uint64_t v53 = *(void *)(a2 + 16);
    __n128 result = *(__n128 *)a2;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = v53;
    *(void *)a2 = v46;
    *(void *)(a2 + 8) = v47;
    *(void *)(a2 + 16) = v52;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(uint64_t a1, const void **a2)
{
  long long v2 = a2;
  uint64_t v4 = ((uint64_t)a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      int v6 = a2 - 3;
      int v7 = *((char *)a2 - 1);
      if (v7 >= 0) {
        size_t v8 = a2 - 3;
      }
      else {
        size_t v8 = (const void **)*(a2 - 3);
      }
      if (v7 >= 0) {
        size_t v9 = *((unsigned __int8 *)a2 - 1);
      }
      else {
        size_t v9 = (size_t)*(a2 - 2);
      }
      int v10 = *(char *)(a1 + 23);
      int v11 = *(const void **)a1;
      unint64_t v12 = *(const void **)(a1 + 8);
      if (v10 >= 0) {
        unint64_t v13 = (const void *)a1;
      }
      else {
        unint64_t v13 = *(const void **)a1;
      }
      if (v10 >= 0) {
        size_t v14 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        size_t v14 = *(void *)(a1 + 8);
      }
      if (v14 >= v9) {
        size_t v15 = v9;
      }
      else {
        size_t v15 = v14;
      }
      int v16 = memcmp(v8, v13, v15);
      if (v16)
      {
        if (v16 < 0) {
          return 1;
        }
      }
      else if (v9 <= v14)
      {
        return 1;
      }
      long long v41 = *(const void **)(a1 + 16);
      uint64_t v42 = (uint64_t)*(v2 - 1);
      *(_OWORD *)a1 = *(_OWORD *)v6;
      *(void *)(a1 + 16) = v42;
      *(v2 - 3) = v11;
      *(v2 - 2) = v12;
      *(v2 - 1) = v41;
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, a2 - 3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, a1 + 48, a2 - 3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, a1 + 48, a1 + 72, a2 - 3);
      return 1;
    default:
      int v17 = (const void **)(a1 + 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, (const void **)(a1 + 48));
      int v18 = (const void **)(a1 + 72);
      if ((const void **)(a1 + 72) == v2) {
        return 1;
      }
      uint64_t v19 = 0;
      int v20 = 0;
      unint64_t v43 = v2;
      break;
  }
  while (2)
  {
    int v23 = *((char *)v18 + 23);
    if (v23 >= 0) {
      size_t v24 = v18;
    }
    else {
      size_t v24 = *v18;
    }
    if (v23 >= 0) {
      size_t v25 = *((unsigned __int8 *)v18 + 23);
    }
    else {
      size_t v25 = (size_t)v18[1];
    }
    int v26 = *((char *)v17 + 23);
    if (v26 >= 0) {
      uint64_t v27 = v17;
    }
    else {
      uint64_t v27 = *v17;
    }
    if (v26 >= 0) {
      size_t v28 = *((unsigned __int8 *)v17 + 23);
    }
    else {
      size_t v28 = (size_t)v17[1];
    }
    if (v28 >= v25) {
      size_t v29 = v25;
    }
    else {
      size_t v29 = v28;
    }
    int v30 = memcmp(v24, v27, v29);
    if (v30)
    {
      if (v30 < 0) {
        goto LABEL_25;
      }
    }
    else if (v25 <= v28)
    {
      goto LABEL_25;
    }
    long long v44 = *(_OWORD *)v18;
    int v45 = v18[2];
    *(_OWORD *)int v18 = *(_OWORD *)v17;
    void v18[2] = v17[2];
    *((unsigned char *)v17 + 23) = 0;
    *(unsigned char *)int v17 = 0;
    uint64_t v21 = a1;
    if (v17 == (const void **)a1) {
      goto LABEL_24;
    }
    uint64_t v31 = v19;
    while (1)
    {
      uint64_t v32 = a1 + v31;
      int v33 = (_OWORD *)(a1 + v31 + 24);
      unint64_t v34 = SHIBYTE(v45) >= 0 ? &v44 : (long long *)v44;
      unint64_t v35 = SHIBYTE(v45) >= 0 ? HIBYTE(v45) : *((void *)&v44 + 1);
      int v36 = *(char *)(v32 + 47);
      size_t v37 = v36 >= 0 ? (const void *)(a1 + v31 + 24) : *(const void **)(a1 + v31 + 24);
      unint64_t v38 = v36 >= 0 ? *(unsigned __int8 *)(v32 + 47) : *(void *)(v32 + 32);
      size_t v39 = v38 >= v35 ? v35 : v38;
      int v40 = memcmp(v34, v37, v39);
      if (!v40) {
        break;
      }
      if (v40 < 0)
      {
        uint64_t v21 = (uint64_t)v17;
        goto LABEL_23;
      }
LABEL_48:
      v17 -= 3;
      *(_OWORD *)(v32 + 48) = *v33;
      *(void *)(v32 + 64) = *(void *)(a1 + v31 + 40);
      *(unsigned char *)(v32 + 47) = 0;
      *(unsigned char *)int v33 = 0;
      v31 -= 24;
      if (v31 == -48)
      {
        uint64_t v21 = a1;
        goto LABEL_23;
      }
    }
    if (v35 > v38) {
      goto LABEL_48;
    }
    uint64_t v21 = a1 + v31 + 48;
LABEL_23:
    long long v2 = v43;
LABEL_24:
    long long v22 = v44;
    *(void *)(v21 + 16) = v45;
    *(_OWORD *)uint64_t v21 = v22;
    if (++v20 == 8) {
      return v18 + 3 == v2;
    }
LABEL_25:
    int v17 = v18;
    v19 += 24;
    v18 += 3;
    if (v18 != v2) {
      continue;
    }
    return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(uint64_t a1, uint64_t a2, uint64_t a3, const void **a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a2, (const void **)a3);
  int v8 = *((char *)a4 + 23);
  if (v8 >= 0) {
    size_t v9 = a4;
  }
  else {
    size_t v9 = *a4;
  }
  if (v8 >= 0) {
    size_t v10 = *((unsigned __int8 *)a4 + 23);
  }
  else {
    size_t v10 = (size_t)a4[1];
  }
  int v11 = *(char *)(a3 + 23);
  unint64_t v12 = *(const void **)a3;
  unint64_t v13 = *(const void **)(a3 + 8);
  if (v11 >= 0) {
    size_t v14 = (const void *)a3;
  }
  else {
    size_t v14 = *(const void **)a3;
  }
  if (v11 >= 0) {
    size_t v15 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    size_t v15 = *(void *)(a3 + 8);
  }
  if (v15 >= v10) {
    size_t v16 = v10;
  }
  else {
    size_t v16 = v15;
  }
  int v17 = memcmp(v9, v14, v16);
  if (v17)
  {
    if (v17 < 0) {
      return result;
    }
  }
  else if (v10 <= v15)
  {
    return result;
  }
  uint64_t v19 = *(const void **)(a3 + 16);
  int v20 = a4[2];
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(void *)(a3 + 16) = v20;
  *a4 = v12;
  a4[1] = v13;
  a4[2] = v19;
  int v21 = *(char *)(a3 + 23);
  if (v21 >= 0) {
    long long v22 = (const void *)a3;
  }
  else {
    long long v22 = *(const void **)a3;
  }
  if (v21 >= 0) {
    size_t v23 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    size_t v23 = *(void *)(a3 + 8);
  }
  int v24 = *(char *)(a2 + 23);
  size_t v25 = *(const void **)a2;
  uint64_t v26 = *(void *)(a2 + 8);
  if (v24 >= 0) {
    uint64_t v27 = (const void *)a2;
  }
  else {
    uint64_t v27 = *(const void **)a2;
  }
  if (v24 >= 0) {
    size_t v28 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v28 = *(void *)(a2 + 8);
  }
  if (v28 >= v23) {
    size_t v29 = v23;
  }
  else {
    size_t v29 = v28;
  }
  int v30 = memcmp(v22, v27, v29);
  if (v30)
  {
    if (v30 < 0) {
      return result;
    }
  }
  else if (v23 <= v28)
  {
    return result;
  }
  uint64_t v31 = *(void *)(a2 + 16);
  uint64_t v32 = *(void *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(void *)(a2 + 16) = v32;
  *(void *)a3 = v25;
  *(void *)(a3 + 8) = v26;
  *(void *)(a3 + 16) = v31;
  int v33 = *(char *)(a2 + 23);
  if (v33 >= 0) {
    unint64_t v34 = (const void *)a2;
  }
  else {
    unint64_t v34 = *(const void **)a2;
  }
  if (v33 >= 0) {
    size_t v35 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v35 = *(void *)(a2 + 8);
  }
  int v36 = *(char *)(a1 + 23);
  size_t v37 = *(const void **)a1;
  uint64_t v38 = *(void *)(a1 + 8);
  if (v36 >= 0) {
    size_t v39 = (const void *)a1;
  }
  else {
    size_t v39 = *(const void **)a1;
  }
  if (v36 >= 0) {
    size_t v40 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    size_t v40 = *(void *)(a1 + 8);
  }
  if (v40 >= v35) {
    size_t v41 = v35;
  }
  else {
    size_t v41 = v40;
  }
  int v42 = memcmp(v34, v39, v41);
  if (!v42)
  {
    if (v35 <= v40) {
      return result;
    }
LABEL_58:
    uint64_t v43 = *(void *)(a1 + 16);
    uint64_t v44 = *(void *)(a2 + 16);
    __n128 result = *(__n128 *)a2;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = v44;
    *(void *)a2 = v37;
    *(void *)(a2 + 8) = v38;
    *(void *)(a2 + 16) = v43;
    return result;
  }
  if ((v42 & 0x80000000) == 0) {
    goto LABEL_58;
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void **a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a2, a3, (const void **)a4);
  int v10 = *((char *)a5 + 23);
  if (v10 >= 0) {
    int v11 = a5;
  }
  else {
    int v11 = *a5;
  }
  if (v10 >= 0) {
    size_t v12 = *((unsigned __int8 *)a5 + 23);
  }
  else {
    size_t v12 = (size_t)a5[1];
  }
  int v13 = *(char *)(a4 + 23);
  size_t v14 = *(const void **)a4;
  size_t v15 = *(const void **)(a4 + 8);
  if (v13 >= 0) {
    size_t v16 = (const void *)a4;
  }
  else {
    size_t v16 = *(const void **)a4;
  }
  if (v13 >= 0) {
    size_t v17 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    size_t v17 = *(void *)(a4 + 8);
  }
  if (v17 >= v12) {
    size_t v18 = v12;
  }
  else {
    size_t v18 = v17;
  }
  int v19 = memcmp(v11, v16, v18);
  if (v19)
  {
    if (v19 < 0) {
      return result;
    }
  }
  else if (v12 <= v17)
  {
    return result;
  }
  int v21 = *(const void **)(a4 + 16);
  long long v22 = a5[2];
  *(_OWORD *)a4 = *(_OWORD *)a5;
  *(void *)(a4 + 16) = v22;
  *a5 = v14;
  a5[1] = v15;
  a5[2] = v21;
  int v23 = *(char *)(a4 + 23);
  if (v23 >= 0) {
    int v24 = (const void *)a4;
  }
  else {
    int v24 = *(const void **)a4;
  }
  if (v23 >= 0) {
    size_t v25 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    size_t v25 = *(void *)(a4 + 8);
  }
  int v26 = *(char *)(a3 + 23);
  uint64_t v27 = *(const void **)a3;
  uint64_t v28 = *(void *)(a3 + 8);
  if (v26 >= 0) {
    size_t v29 = (const void *)a3;
  }
  else {
    size_t v29 = *(const void **)a3;
  }
  if (v26 >= 0) {
    size_t v30 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    size_t v30 = *(void *)(a3 + 8);
  }
  if (v30 >= v25) {
    size_t v31 = v25;
  }
  else {
    size_t v31 = v30;
  }
  int v32 = memcmp(v24, v29, v31);
  if (v32)
  {
    if (v32 < 0) {
      return result;
    }
  }
  else if (v25 <= v30)
  {
    return result;
  }
  uint64_t v33 = *(void *)(a3 + 16);
  uint64_t v34 = *(void *)(a4 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(void *)(a3 + 16) = v34;
  *(void *)a4 = v27;
  *(void *)(a4 + 8) = v28;
  *(void *)(a4 + 16) = v33;
  int v35 = *(char *)(a3 + 23);
  if (v35 >= 0) {
    int v36 = (const void *)a3;
  }
  else {
    int v36 = *(const void **)a3;
  }
  if (v35 >= 0) {
    size_t v37 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    size_t v37 = *(void *)(a3 + 8);
  }
  int v38 = *(char *)(a2 + 23);
  size_t v39 = *(const void **)a2;
  uint64_t v40 = *(void *)(a2 + 8);
  if (v38 >= 0) {
    size_t v41 = (const void *)a2;
  }
  else {
    size_t v41 = *(const void **)a2;
  }
  if (v38 >= 0) {
    size_t v42 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v42 = *(void *)(a2 + 8);
  }
  if (v42 >= v37) {
    size_t v43 = v37;
  }
  else {
    size_t v43 = v42;
  }
  int v44 = memcmp(v36, v41, v43);
  if (v44)
  {
    if (v44 < 0) {
      return result;
    }
  }
  else if (v37 <= v42)
  {
    return result;
  }
  uint64_t v45 = *(void *)(a2 + 16);
  uint64_t v46 = *(void *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(void *)(a2 + 16) = v46;
  *(void *)a3 = v39;
  *(void *)(a3 + 8) = v40;
  *(void *)(a3 + 16) = v45;
  int v47 = *(char *)(a2 + 23);
  if (v47 >= 0) {
    unint64_t v48 = (const void *)a2;
  }
  else {
    unint64_t v48 = *(const void **)a2;
  }
  if (v47 >= 0) {
    size_t v49 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v49 = *(void *)(a2 + 8);
  }
  int v50 = *(char *)(a1 + 23);
  int v51 = *(const void **)a1;
  uint64_t v52 = *(void *)(a1 + 8);
  if (v50 >= 0) {
    uint64_t v53 = (const void *)a1;
  }
  else {
    uint64_t v53 = *(const void **)a1;
  }
  if (v50 >= 0) {
    size_t v54 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    size_t v54 = *(void *)(a1 + 8);
  }
  if (v54 >= v49) {
    size_t v55 = v49;
  }
  else {
    size_t v55 = v54;
  }
  int v56 = memcmp(v48, v53, v55);
  if (v56)
  {
    if (v56 < 0) {
      return result;
    }
  }
  else if (v49 <= v54)
  {
    return result;
  }
  uint64_t v57 = *(void *)(a1 + 16);
  uint64_t v58 = *(void *)(a2 + 16);
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v58;
  *(void *)a2 = v51;
  *(void *)(a2 + 8) = v52;
  *(void *)(a2 + 16) = v57;
  return result;
}

char *std::vector<std::string>::__push_back_slow_path<std::string>(void **a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int v7 = (char *)operator new(24 * v6);
  }
  else
  {
    int v7 = 0;
  }
  int v8 = &v7[24 * v3];
  size_t v9 = &v7[24 * v6];
  *(_OWORD *)int v8 = *(_OWORD *)a2;
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  int v10 = v8 + 24;
  int v11 = (void **)*a1;
  size_t v12 = (void **)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    do
    {
      long long v13 = *(_OWORD *)(v12 - 3);
      *((void *)v8 - 1) = *(v12 - 1);
      *(_OWORD *)(v8 - 24) = v13;
      v8 -= 24;
      *(v12 - 2) = 0;
      *(v12 - 1) = 0;
      *(v12 - 3) = 0;
      v12 -= 3;
    }
    while (v12 != v11);
    size_t v12 = (void **)*a1;
    size_t v14 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    while (v14 != v12)
    {
      if (*((char *)v14 - 1) < 0) {
        operator delete(*(v14 - 3));
      }
      v14 -= 3;
    }
  }
  if (v12) {
    operator delete(v12);
  }
  return v10;
}

uint64_t *std::unique_ptr<std::__hash_node<std::string,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16) && *(char *)(v2 + 39) < 0) {
      operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t *GetOsLogContext(void)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AB82728, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AB82728))
  {
    qword_26AB82748 = 0;
    qword_26AB82740 = 0;
    __cxa_atexit(MEMORY[0x263F8BDA8], &qword_26AB82740, &dword_235DB9000);
    __cxa_guard_release(&qword_26AB82728);
  }
  if (_MergedGlobals_3 != -1) {
    dispatch_once(&_MergedGlobals_3, &__block_literal_global_0);
  }
  return &qword_26AB82740;
}

void ___Z15GetOsLogContextv_block_invoke()
{
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v0, "com.apple.telephony.abm", "global");
  ctu::OsLogContext::operator=();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v0);
}

void *GetGlobalLogger(void *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AB82738, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AB82738))
  {
    MEMORY[0x237DF4DD0](&unk_26AB82750);
    __cxa_atexit(MEMORY[0x263F8BDB0], &unk_26AB82750, &dword_235DB9000);
    __cxa_guard_release(&qword_26AB82738);
  }
  v5[0] = MEMORY[0x263EF8330];
  v5[1] = 1174405120;
  void v5[2] = ___Z15GetGlobalLoggerNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v5[3] = &__block_descriptor_tmp_3_2;
  uint64_t v2 = (std::__shared_weak_count *)a1[1];
  v5[4] = *a1;
  unint64_t v6 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (qword_26AB82730 == -1)
  {
    unint64_t v3 = v6;
    if (!v6) {
      return &unk_26AB82750;
    }
  }
  else
  {
    dispatch_once(&qword_26AB82730, v5);
    unint64_t v3 = v6;
    if (!v6) {
      return &unk_26AB82750;
    }
  }
  if (atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return &unk_26AB82750;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return &unk_26AB82750;
}

void sub_235E5CB74(_Unwind_Exception *a1)
{
}

void ___Z15GetGlobalLoggerNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke(uint64_t a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AB82728, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AB82728))
  {
    qword_26AB82748 = 0;
    qword_26AB82740 = 0;
    __cxa_atexit(MEMORY[0x263F8BDA8], &qword_26AB82740, &dword_235DB9000);
    __cxa_guard_release(&qword_26AB82728);
  }
  if (_MergedGlobals_3 != -1) {
    dispatch_once(&_MergedGlobals_3, &__block_literal_global_0);
  }
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v5, (const ctu::OsLogContext *)&qword_26AB82740);
  MEMORY[0x237DF4DC0](v6, v5, a1 + 32);
  ctu::LoggerCommonBase::operator=();
  uint64_t v3 = v7;
  uint64_t v2 = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v4 = (std::__shared_weak_count *)qword_26AB82788;
  qword_26AB82780 = v3;
  qword_26AB82788 = v2;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  MEMORY[0x237DF4DE0](v6);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v5);
}

void sub_235E5CCDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t __copy_helper_block_e8_32c42_ZTSNSt3__110shared_ptrIN3ctu9LogServerEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c42_ZTSNSt3__110shared_ptrIN3ctu9LogServerEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

const char *ABMGetProjectVersion(void)
{
  return "AppleBasebandManager-AppleBasebandServices_Manager-1211";
}

uint64_t AMFDRCreateWithOptions()
{
  return MEMORY[0x270F91DA0]();
}

uint64_t AMFDRDataCopy()
{
  return MEMORY[0x270F91DC0]();
}

uint64_t BBUpdaterRegisterGlobalLogSink()
{
  return MEMORY[0x270F91618]();
}

int CC_SHA256_Final(unsigned __int8 *md, CC_SHA256_CTX *c)
{
  return MEMORY[0x270ED7B30](md, c);
}

int CC_SHA256_Init(CC_SHA256_CTX *c)
{
  return MEMORY[0x270ED7B38](c);
}

int CC_SHA256_Update(CC_SHA256_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x270ED7B40](c, data, *(void *)&len);
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x270EE4300](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x270EE4320](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x270EE4348]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x270EE4360](theArray, idx);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x270EE47C8](allocator, bytes, length);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x270EE4808](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x270EE4820](theData);
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x270EE4920](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x270EE4948]();
}

CFErrorRef CFErrorCreate(CFAllocatorRef allocator, CFErrorDomain domain, CFIndex code, CFDictionaryRef userInfo)
{
  return (CFErrorRef)MEMORY[0x270EE49C0](allocator, domain, code, userInfo);
}

CFIndex CFErrorGetCode(CFErrorRef err)
{
  return MEMORY[0x270EE49D0](err);
}

CFErrorDomain CFErrorGetDomain(CFErrorRef err)
{
  return (CFErrorDomain)MEMORY[0x270EE49D8](err);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x270EE4A30](cf);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x270EE4BE8](allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x270EE4C58]();
}

void CFPreferencesSetValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
}

Boolean CFPreferencesSynchronize(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return MEMORY[0x270EE4D08](applicationID, userName, hostName);
}

CFPropertyListRef CFPropertyListCreateWithStream(CFAllocatorRef allocator, CFReadStreamRef stream, CFIndex streamLength, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x270EE4D48](allocator, stream, streamLength, options, format, error);
}

void CFReadStreamClose(CFReadStreamRef stream)
{
}

CFReadStreamRef CFReadStreamCreateWithFile(CFAllocatorRef alloc, CFURLRef fileURL)
{
  return (CFReadStreamRef)MEMORY[0x270EE4D90](alloc, fileURL);
}

Boolean CFReadStreamOpen(CFReadStreamRef stream)
{
  return MEMORY[0x270EE4DB8](stream);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x270EE4E10](cf);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x270EE50E0](alloc, cStr, *(void *)&encoding);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x270EE5110](alloc, formatOptions, format);
}

CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x270EE53F0](allocator, filePath, pathStyle, isDirectory);
}

uint64_t KTLDebugRegisterDelegate()
{
  return MEMORY[0x270F92878]();
}

uint64_t KTLDebugSetFlags()
{
  return MEMORY[0x270F92880]();
}

uint64_t TelephonyUtilDebugRegisterDelegate()
{
  return MEMORY[0x270F97178]();
}

uint64_t TelephonyUtilDebugSetFlags()
{
  return MEMORY[0x270F97180]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x270ED7CD8](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

uint64_t CreateError()
{
  return MEMORY[0x270F91630]();
}

uint64_t asString()
{
  return MEMORY[0x270F8CB48]();
}

{
  return MEMORY[0x270F8CBF0]();
}

uint64_t capabilities::ct::supportsHiSpeedFiler(capabilities::ct *this)
{
  return MEMORY[0x270F96938](this);
}

uint64_t capabilities::abs::TUDebugFlags(capabilities::abs *this)
{
  return MEMORY[0x270F96B38](this);
}

uint64_t capabilities::abs::logScratchPath(capabilities::abs *this)
{
  return MEMORY[0x270F96B40](this);
}

uint64_t capabilities::abs::logSnapshotPath(capabilities::abs *this)
{
  return MEMORY[0x270F96B48](this);
}

uint64_t capabilities::abs::nonPrimaryDLServingCellBandwidthMaxValue(capabilities::abs *this)
{
  return MEMORY[0x270F96C18](this);
}

uint64_t capabilities::radio::supportsBBTraceV2(capabilities::radio *this)
{
  return MEMORY[0x270F96CE0](this);
}

uint64_t capabilities::radio::personalizedFirmwarePath(capabilities::radio *this)
{
  return MEMORY[0x270F96CF8](this);
}

uint64_t capabilities::radio::ice(capabilities::radio *this)
{
  return MEMORY[0x270F96D18](this);
}

uint64_t capabilities::radio::chipID(capabilities::radio *this)
{
  return MEMORY[0x270F96D20](this);
}

uint64_t capabilities::radio::vendor(capabilities::radio *this)
{
  return MEMORY[0x270F96D28](this);
}

uint64_t capabilities::radio::maverick(capabilities::radio *this)
{
  return MEMORY[0x270F96D38](this);
}

void CommandDriverFactory::CommandDriverFactory(CommandDriverFactory *this)
{
}

uint64_t Ari::MsgNameById(Ari *this)
{
  return MEMORY[0x270F8CCE8](this);
}

uint64_t Ari::Log(Ari *this, uint64_t a2, const char *a3, ...)
{
  return MEMORY[0x270F8CD00](this, a2, a3);
}

uint64_t awd::AwdCommandDriver::AwdCommandDriver()
{
  return MEMORY[0x270F91678]();
}

void awd::AwdCommandDriver::~AwdCommandDriver(awd::AwdCommandDriver *this)
{
}

uint64_t awd::asString()
{
  return MEMORY[0x270F91690]();
}

{
  return MEMORY[0x270F91698]();
}

{
  return MEMORY[0x270F916A0]();
}

{
  return MEMORY[0x270F916A8]();
}

uint64_t ctu::LogMessage::LogMessage()
{
  return MEMORY[0x270F97260]();
}

uint64_t ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase()
{
  return MEMORY[0x270F97268]();
}

void ctu::OsLogLogger::~OsLogLogger(ctu::OsLogLogger *this)
{
}

uint64_t ctu::OsLogContext::OsLogContext()
{
  return MEMORY[0x270F972D0]();
}

uint64_t ctu::OsLogContext::OsLogContext(ctu::OsLogContext *this, const char *a2, const char *a3)
{
  return MEMORY[0x270F972D8](this, a2, a3);
}

uint64_t ctu::OsLogContext::OsLogContext(ctu::OsLogContext *this, const ctu::OsLogContext *a2)
{
  return MEMORY[0x270F972E0](this, a2);
}

void ctu::OsLogContext::~OsLogContext(ctu::OsLogContext *this)
{
}

uint64_t ctu::OsLogContext::operator=()
{
  return MEMORY[0x270F972F0]();
}

uint64_t ctu::StaticLogger::StaticLogger()
{
  return MEMORY[0x270F97300]();
}

uint64_t ctu::StaticLogger::StaticLogger(ctu::StaticLogger *this)
{
  return MEMORY[0x270F97308](this);
}

void ctu::StaticLogger::~StaticLogger(ctu::StaticLogger *this)
{
}

uint64_t ctu::TrackedLogger::registerLoggerToServer()
{
  return MEMORY[0x270F97398]();
}

uint64_t ctu::LogMessageBuffer::takeString(ctu::LogMessageBuffer *this)
{
  return MEMORY[0x270F973E8](this);
}

uint64_t ctu::LogMessageBuffer::takeMetadata(ctu::LogMessageBuffer *this)
{
  return MEMORY[0x270F973F0](this);
}

uint64_t ctu::LogMessageBuffer::vprintf(ctu::LogMessageBuffer *this, const char *a2, char *a3)
{
  return MEMORY[0x270F97408](this, a2, a3);
}

uint64_t ctu::LogMessageBuffer::LogMessageBuffer(ctu::LogMessageBuffer *this)
{
  return MEMORY[0x270F97410](this);
}

void ctu::LogMessageBuffer::~LogMessageBuffer(ctu::LogMessageBuffer *this)
{
}

uint64_t ctu::LoggerCommonBase::setLogLevel()
{
  return MEMORY[0x270F97420]();
}

uint64_t ctu::LoggerCommonBase::LoggerCommonBase()
{
  return MEMORY[0x270F97430]();
}

uint64_t ctu::LoggerCommonBase::operator=()
{
  return MEMORY[0x270F97448]();
}

uint64_t ctu::cf::MakeCFString::MakeCFString(ctu::cf::MakeCFString *this, const char *a2)
{
  return MEMORY[0x270F974F0](this, a2);
}

void ctu::cf::MakeCFString::~MakeCFString(ctu::cf::MakeCFString *this)
{
}

uint64_t ctu::cf::convert_copy(ctu::cf *this, const __CFString **a2, const char *a3, uint64_t a4, const __CFAllocator *a5)
{
  return MEMORY[0x270F97500](this, a2, a3, a4, a5);
}

uint64_t ctu::cf::convert_copy()
{
  return MEMORY[0x270F97508]();
}

uint64_t ctu::cf::dict_adapter::dict_adapter(ctu::cf::dict_adapter *this, const __CFDictionary *a2)
{
  return MEMORY[0x270F97518](this, a2);
}

void ctu::cf::dict_adapter::~dict_adapter(ctu::cf::dict_adapter *this)
{
}

uint64_t ctu::cf::plist_adapter::plist_adapter(ctu::cf::plist_adapter *this, const __CFString *a2, const __CFString *a3)
{
  return MEMORY[0x270F97530](this, a2, a3);
}

void ctu::cf::plist_adapter::~plist_adapter(ctu::cf::plist_adapter *this)
{
}

uint64_t ctu::cf::show(ctu::cf *this, const void *a2)
{
  return MEMORY[0x270F97540](this, a2);
}

uint64_t ctu::cf::assign()
{
  return MEMORY[0x270F97550]();
}

uint64_t ctu::cf::assign(ctu::cf *this, signed __int8 *a2, const __CFNumber *a3)
{
  return MEMORY[0x270F97568](this, a2, a3);
}

uint64_t ctu::cf::assign(ctu::cf *this, unsigned __int8 *a2, const __CFNumber *a3)
{
  return MEMORY[0x270F97578](this, a2, a3);
}

uint64_t ctu::cf::assign(ctu::cf *this, unsigned int *a2, const __CFNumber *a3)
{
  return MEMORY[0x270F97588](this, a2, a3);
}

uint64_t ctu::fs::remove_dir()
{
  return MEMORY[0x270F975A8]();
}

uint64_t ctu::fs::is_directory()
{
  return MEMORY[0x270F975C8]();
}

uint64_t ctu::fs::get_file_size()
{
  return MEMORY[0x270F975D0]();
}

uint64_t ctu::fs::get_filtered_files()
{
  return MEMORY[0x270F975E8]();
}

uint64_t ctu::fs::get_unique_filename()
{
  return MEMORY[0x270F975F0]();
}

uint64_t ctu::fs::rename()
{
  return MEMORY[0x270F97600]();
}

uint64_t ctu::hex(ctu *this, const void *a2)
{
  return MEMORY[0x270F97628](this, a2);
}

uint64_t ctu::hex(ctu *this)
{
  return MEMORY[0x270F97640](this);
}

uint64_t ctu::Clock::now_in_nanoseconds(ctu::Clock *this)
{
  return MEMORY[0x270F976C8](this);
}

uint64_t ctu::assign()
{
  return MEMORY[0x270F976D0]();
}

uint64_t ctu::tokenize()
{
  return MEMORY[0x270F97708]();
}

uint64_t ctu::LogServer::updateConfig()
{
  return MEMORY[0x270F97718]();
}

uint64_t ctu::LogServer::log()
{
  return MEMORY[0x270F97720]();
}

uint64_t ctu::LogServer::start(ctu::LogServer *this)
{
  return MEMORY[0x270F97728](this);
}

uint64_t ctu::LogServer::create()
{
  return MEMORY[0x270F97730]();
}

uint64_t ctu::operator<<()
{
  return MEMORY[0x270F97798]();
}

{
  return MEMORY[0x270F977A8]();
}

{
  return MEMORY[0x270F977B8]();
}

{
  return MEMORY[0x270F977C8]();
}

uint64_t ice::SendMsgBaseProxy::SendMsgBaseProxy()
{
  return MEMORY[0x270F92078]();
}

void ice::SendMsgBaseProxy::~SendMsgBaseProxy(ice::SendMsgBaseProxy *this)
{
}

uint64_t ice::isARIResponseValid()
{
  return MEMORY[0x270F92088]();
}

uint64_t ice::Client::setIndShouldWake(ice::Client *this)
{
  return MEMORY[0x270F92090](this);
}

uint64_t ice::Client::regIndicationInternal()
{
  return MEMORY[0x270F92098]();
}

uint64_t ice::Client::regEventHandlerInternal()
{
  return MEMORY[0x270F920A0]();
}

uint64_t ice::Client::stop(ice::Client *this, group *a2)
{
  return MEMORY[0x270F920A8](this, a2);
}

uint64_t ice::Client::start(ice::Client *this)
{
  return MEMORY[0x270F920B0](this);
}

uint64_t ice::Client::create()
{
  return MEMORY[0x270F920B8]();
}

uint64_t xpc::dyn_cast_or_default()
{
  return MEMORY[0x270F977D8]();
}

{
  return MEMORY[0x270F977E8]();
}

{
  return MEMORY[0x270F977F0]();
}

{
  return MEMORY[0x270F97800]();
}

{
  return MEMORY[0x270F97808]();
}

{
  return MEMORY[0x270F97820]();
}

uint64_t coex::CommandDriver::CommandDriver()
{
  return MEMORY[0x270F916B0]();
}

uint64_t coex::util::data_to_uint64()
{
  return MEMORY[0x270F916B8]();
}

uint64_t cpms::CommandDriver::CommandDriver()
{
  return MEMORY[0x270F916C0]();
}

uint64_t radio::CommandDriver::getSimSlotInfo()
{
  return MEMORY[0x270F916D0]();
}

uint64_t radio::CommandDriver::handleClientStateChanged_sync(radio::CommandDriver *this)
{
  return MEMORY[0x270F916E8](this);
}

uint64_t radio::CommandDriver::handleOperatingModeChanged_sync()
{
  return MEMORY[0x270F916F0]();
}

uint64_t radio::CommandDriver::CommandDriver()
{
  return MEMORY[0x270F916F8]();
}

uint64_t radio::RFSCommandDriver::RFSCommandDriver()
{
  return MEMORY[0x270F91718]();
}

void radio::RFSCommandDriver::~RFSCommandDriver(radio::RFSCommandDriver *this)
{
}

uint64_t radio::OpMode::create(radio::OpMode *this)
{
  return MEMORY[0x270F91738](this);
}

uint64_t AriOsa::LogSrcInfo(AriOsa *this, const char *a2, const char *a3)
{
  return MEMORY[0x270F8CDB8](this, a2, a3);
}

uint64_t AriSdk::ARI_CsiIceSarReq_SDK::ARI_CsiIceSarReq_SDK(AriSdk::ARI_CsiIceSarReq_SDK *this)
{
  return MEMORY[0x270F8CE20](this);
}

void AriSdk::ARI_CsiIceSarReq_SDK::~ARI_CsiIceSarReq_SDK(AriSdk::ARI_CsiIceSarReq_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiFpRegister_SDK::ARI_CsiFpRegister_SDK(AriSdk::ARI_CsiFpRegister_SDK *this)
{
  return MEMORY[0x270F8CE40](this);
}

void AriSdk::ARI_CsiFpRegister_SDK::~ARI_CsiFpRegister_SDK(AriSdk::ARI_CsiFpRegister_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIceCltmReq_SDK::ARI_CsiIceCltmReq_SDK(AriSdk::ARI_CsiIceCltmReq_SDK *this)
{
  return MEMORY[0x270F8CE50](this);
}

void AriSdk::ARI_CsiIceCltmReq_SDK::~ARI_CsiIceCltmReq_SDK(AriSdk::ARI_CsiIceCltmReq_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiModeGetReq_SDK::ARI_CsiModeGetReq_SDK(AriSdk::ARI_CsiModeGetReq_SDK *this)
{
  return MEMORY[0x270F8CE60](this);
}

void AriSdk::ARI_CsiModeGetReq_SDK::~ARI_CsiModeGetReq_SDK(AriSdk::ARI_CsiModeGetReq_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiModeSetReq_SDK::ARI_CsiModeSetReq_SDK(AriSdk::ARI_CsiModeSetReq_SDK *this)
{
  return MEMORY[0x270F8CE70](this);
}

void AriSdk::ARI_CsiModeSetReq_SDK::~ARI_CsiModeSetReq_SDK(AriSdk::ARI_CsiModeSetReq_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiXsioGetReq_SDK::ARI_CsiXsioGetReq_SDK(AriSdk::ARI_CsiXsioGetReq_SDK *this)
{
  return MEMORY[0x270F8CE80](this);
}

void AriSdk::ARI_CsiXsioGetReq_SDK::~ARI_CsiXsioGetReq_SDK(AriSdk::ARI_CsiXsioGetReq_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiXsioSetReq_SDK::ARI_CsiXsioSetReq_SDK(AriSdk::ARI_CsiXsioSetReq_SDK *this)
{
  return MEMORY[0x270F8CE90](this);
}

void AriSdk::ARI_CsiXsioSetReq_SDK::~ARI_CsiXsioSetReq_SDK(AriSdk::ARI_CsiXsioSetReq_SDK *this)
{
}

uint64_t AriSdk::ARI_IBISimTestReq_SDK::ARI_IBISimTestReq_SDK(AriSdk::ARI_IBISimTestReq_SDK *this)
{
  return MEMORY[0x270F8CEA0](this);
}

void AriSdk::ARI_IBISimTestReq_SDK::~ARI_IBISimTestReq_SDK(AriSdk::ARI_IBISimTestReq_SDK *this)
{
}

uint64_t AriSdk::ARI_TraceFlushReq_SDK::ARI_TraceFlushReq_SDK(AriSdk::ARI_TraceFlushReq_SDK *this)
{
  return MEMORY[0x270F8CEC0](this);
}

void AriSdk::ARI_TraceFlushReq_SDK::~ARI_TraceFlushReq_SDK(AriSdk::ARI_TraceFlushReq_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiFpGetStatus_SDK::ARI_CsiFpGetStatus_SDK(AriSdk::ARI_CsiFpGetStatus_SDK *this)
{
  return MEMORY[0x270F8CED0](this);
}

void AriSdk::ARI_CsiFpGetStatus_SDK::~ARI_CsiFpGetStatus_SDK(AriSdk::ARI_CsiFpGetStatus_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIceSarRspCb_SDK::ARI_CsiIceSarRspCb_SDK(AriSdk::ARI_CsiIceSarRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8CEF0](this, a2);
}

void AriSdk::ARI_CsiIceSarRspCb_SDK::~ARI_CsiIceSarRspCb_SDK(AriSdk::ARI_CsiIceSarRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiAwdsQueryReq_SDK::ARI_CsiAwdsQueryReq_SDK(AriSdk::ARI_CsiAwdsQueryReq_SDK *this)
{
  return MEMORY[0x270F8CF30](this);
}

void AriSdk::ARI_CsiAwdsQueryReq_SDK::~ARI_CsiAwdsQueryReq_SDK(AriSdk::ARI_CsiAwdsQueryReq_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiBSPBBDumpInd_SDK::unpack(AriSdk::ARI_CsiBSPBBDumpInd_SDK *this)
{
  return MEMORY[0x270F8CF40](this);
}

uint64_t AriSdk::ARI_CsiBSPBBDumpInd_SDK::ARI_CsiBSPBBDumpInd_SDK(AriSdk::ARI_CsiBSPBBDumpInd_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8CF48](this, a2);
}

void AriSdk::ARI_CsiBSPBBDumpInd_SDK::~ARI_CsiBSPBBDumpInd_SDK(AriSdk::ARI_CsiBSPBBDumpInd_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIceCltmRspCb_SDK::ARI_CsiIceCltmRspCb_SDK(AriSdk::ARI_CsiIceCltmRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8CF58](this, a2);
}

void AriSdk::ARI_CsiIceCltmRspCb_SDK::~ARI_CsiIceCltmRspCb_SDK(AriSdk::ARI_CsiIceCltmRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiModeGetRspCb_SDK::unpack(AriSdk::ARI_CsiModeGetRspCb_SDK *this)
{
  return MEMORY[0x270F8CF68](this);
}

uint64_t AriSdk::ARI_CsiModeGetRspCb_SDK::ARI_CsiModeGetRspCb_SDK(AriSdk::ARI_CsiModeGetRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8CF70](this, a2);
}

void AriSdk::ARI_CsiModeGetRspCb_SDK::~ARI_CsiModeGetRspCb_SDK(AriSdk::ARI_CsiModeGetRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiModeSetIndCb_SDK::unpack(AriSdk::ARI_CsiModeSetIndCb_SDK *this)
{
  return MEMORY[0x270F8CF80](this);
}

uint64_t AriSdk::ARI_CsiModeSetIndCb_SDK::ARI_CsiModeSetIndCb_SDK(AriSdk::ARI_CsiModeSetIndCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8CF88](this, a2);
}

void AriSdk::ARI_CsiModeSetIndCb_SDK::~ARI_CsiModeSetIndCb_SDK(AriSdk::ARI_CsiModeSetIndCb_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiXsioGetRspCb_SDK::unpack(AriSdk::ARI_CsiXsioGetRspCb_SDK *this)
{
  return MEMORY[0x270F8CF98](this);
}

uint64_t AriSdk::ARI_CsiXsioGetRspCb_SDK::ARI_CsiXsioGetRspCb_SDK(AriSdk::ARI_CsiXsioGetRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8CFA0](this, a2);
}

void AriSdk::ARI_CsiXsioGetRspCb_SDK::~ARI_CsiXsioGetRspCb_SDK(AriSdk::ARI_CsiXsioGetRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiXsioSetRspCb_SDK::unpack(AriSdk::ARI_CsiXsioSetRspCb_SDK *this)
{
  return MEMORY[0x270F8CFB0](this);
}

uint64_t AriSdk::ARI_CsiXsioSetRspCb_SDK::ARI_CsiXsioSetRspCb_SDK(AriSdk::ARI_CsiXsioSetRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8CFB8](this, a2);
}

void AriSdk::ARI_CsiXsioSetRspCb_SDK::~ARI_CsiXsioSetRspCb_SDK(AriSdk::ARI_CsiXsioSetRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_IBINetDetachReq_SDK::ARI_IBINetDetachReq_SDK(AriSdk::ARI_IBINetDetachReq_SDK *this)
{
  return MEMORY[0x270F8CFE8](this);
}

void AriSdk::ARI_IBINetDetachReq_SDK::~ARI_IBINetDetachReq_SDK(AriSdk::ARI_IBINetDetachReq_SDK *this)
{
}

uint64_t AriSdk::ARI_IBISimTestRspCb_SDK::ARI_IBISimTestRspCb_SDK(AriSdk::ARI_IBISimTestRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8D028](this, a2);
}

void AriSdk::ARI_IBISimTestRspCb_SDK::~ARI_IBISimTestRspCb_SDK(AriSdk::ARI_IBISimTestRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_TraceFlushRspCb_SDK::unpack(AriSdk::ARI_TraceFlushRspCb_SDK *this)
{
  return MEMORY[0x270F8D070](this);
}

uint64_t AriSdk::ARI_TraceFlushRspCb_SDK::ARI_TraceFlushRspCb_SDK(AriSdk::ARI_TraceFlushRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8D078](this, a2);
}

void AriSdk::ARI_TraceFlushRspCb_SDK::~ARI_TraceFlushRspCb_SDK(AriSdk::ARI_TraceFlushRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiFpGetStatusV2_SDK::ARI_CsiFpGetStatusV2_SDK(AriSdk::ARI_CsiFpGetStatusV2_SDK *this)
{
  return MEMORY[0x270F8D088](this);
}

void AriSdk::ARI_CsiFpGetStatusV2_SDK::~ARI_CsiFpGetStatusV2_SDK(AriSdk::ARI_CsiFpGetStatusV2_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiFpRegisterRsp_SDK::unpack(AriSdk::ARI_CsiFpRegisterRsp_SDK *this)
{
  return MEMORY[0x270F8D098](this);
}

uint64_t AriSdk::ARI_CsiFpRegisterRsp_SDK::ARI_CsiFpRegisterRsp_SDK(AriSdk::ARI_CsiFpRegisterRsp_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8D0A0](this, a2);
}

void AriSdk::ARI_CsiFpRegisterRsp_SDK::~ARI_CsiFpRegisterRsp_SDK(AriSdk::ARI_CsiFpRegisterRsp_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiModeSetRespCb_SDK::ARI_CsiModeSetRespCb_SDK(AriSdk::ARI_CsiModeSetRespCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8D0B0](this, a2);
}

void AriSdk::ARI_CsiModeSetRespCb_SDK::~ARI_CsiModeSetRespCb_SDK(AriSdk::ARI_CsiModeSetRespCb_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiSecGetSNUMReq_SDK::ARI_CsiSecGetSNUMReq_SDK(AriSdk::ARI_CsiSecGetSNUMReq_SDK *this)
{
  return MEMORY[0x270F8D0C0](this);
}

void AriSdk::ARI_CsiSecGetSNUMReq_SDK::~ARI_CsiSecGetSNUMReq_SDK(AriSdk::ARI_CsiSecGetSNUMReq_SDK *this)
{
}

uint64_t AriSdk::ARI_IBIMccSettingReq_SDK::ARI_IBIMccSettingReq_SDK(AriSdk::ARI_IBIMccSettingReq_SDK *this)
{
  return MEMORY[0x270F8D0F0](this);
}

void AriSdk::ARI_IBIMccSettingReq_SDK::~ARI_IBIMccSettingReq_SDK(AriSdk::ARI_IBIMccSettingReq_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiAwdsQueryRspCb_SDK::unpack(AriSdk::ARI_CsiAwdsQueryRspCb_SDK *this)
{
  return MEMORY[0x270F8D168](this);
}

uint64_t AriSdk::ARI_CsiAwdsQueryRspCb_SDK::ARI_CsiAwdsQueryRspCb_SDK(AriSdk::ARI_CsiAwdsQueryRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8D170](this, a2);
}

void AriSdk::ARI_CsiAwdsQueryRspCb_SDK::~ARI_CsiAwdsQueryRspCb_SDK(AriSdk::ARI_CsiAwdsQueryRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiBspShutdownReq_SDK::ARI_CsiBspShutdownReq_SDK(AriSdk::ARI_CsiBspShutdownReq_SDK *this)
{
  return MEMORY[0x270F8D180](this);
}

void AriSdk::ARI_CsiBspShutdownReq_SDK::~ARI_CsiBspShutdownReq_SDK(AriSdk::ARI_CsiBspShutdownReq_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiFpGetStatusRsp_SDK::unpack(AriSdk::ARI_CsiFpGetStatusRsp_SDK *this)
{
  return MEMORY[0x270F8D190](this);
}

uint64_t AriSdk::ARI_CsiFpGetStatusRsp_SDK::ARI_CsiFpGetStatusRsp_SDK(AriSdk::ARI_CsiFpGetStatusRsp_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8D198](this, a2);
}

void AriSdk::ARI_CsiFpGetStatusRsp_SDK::~ARI_CsiFpGetStatusRsp_SDK(AriSdk::ARI_CsiFpGetStatusRsp_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIceCaEnableReq_SDK::ARI_CsiIceCaEnableReq_SDK(AriSdk::ARI_CsiIceCaEnableReq_SDK *this)
{
  return MEMORY[0x270F8D1A8](this);
}

void AriSdk::ARI_CsiIceCaEnableReq_SDK::~ARI_CsiIceCaEnableReq_SDK(AriSdk::ARI_CsiIceCaEnableReq_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIceGpsStateReq_SDK::ARI_CsiIceGpsStateReq_SDK(AriSdk::ARI_CsiIceGpsStateReq_SDK *this)
{
  return MEMORY[0x270F8D1B8](this);
}

void AriSdk::ARI_CsiIceGpsStateReq_SDK::~ARI_CsiIceGpsStateReq_SDK(AriSdk::ARI_CsiIceGpsStateReq_SDK *this)
{
}

uint64_t AriSdk::ARI_IBINetDetachRspCb_SDK::ARI_IBINetDetachRspCb_SDK(AriSdk::ARI_IBINetDetachRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8D238](this, a2);
}

void AriSdk::ARI_IBINetDetachRspCb_SDK::~ARI_IBINetDetachRspCb_SDK(AriSdk::ARI_IBINetDetachRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_TraceSetConfigReq_SDK::ARI_TraceSetConfigReq_SDK(AriSdk::ARI_TraceSetConfigReq_SDK *this)
{
  return MEMORY[0x270F8D348](this);
}

void AriSdk::ARI_TraceSetConfigReq_SDK::~ARI_TraceSetConfigReq_SDK(AriSdk::ARI_TraceSetConfigReq_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIceArfcnLockReq_SDK::ARI_CsiIceArfcnLockReq_SDK(AriSdk::ARI_CsiIceArfcnLockReq_SDK *this)
{
  return MEMORY[0x270F8D368](this);
}

void AriSdk::ARI_CsiIceArfcnLockReq_SDK::~ARI_CsiIceArfcnLockReq_SDK(AriSdk::ARI_CsiIceArfcnLockReq_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIceBBTxStateInd_SDK::unpack(AriSdk::ARI_CsiIceBBTxStateInd_SDK *this)
{
  return MEMORY[0x270F8D378](this);
}

uint64_t AriSdk::ARI_CsiIceBBTxStateInd_SDK::ARI_CsiIceBBTxStateInd_SDK(AriSdk::ARI_CsiIceBBTxStateInd_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8D380](this, a2);
}

void AriSdk::ARI_CsiIceBBTxStateInd_SDK::~ARI_CsiIceBBTxStateInd_SDK(AriSdk::ARI_CsiIceBBTxStateInd_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIceGripStateReq_SDK::ARI_CsiIceGripStateReq_SDK(AriSdk::ARI_CsiIceGripStateReq_SDK *this)
{
  return MEMORY[0x270F8D390](this);
}

void AriSdk::ARI_CsiIceGripStateReq_SDK::~ARI_CsiIceGripStateReq_SDK(AriSdk::ARI_CsiIceGripStateReq_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIceSarEnableReq_SDK::ARI_CsiIceSarEnableReq_SDK(AriSdk::ARI_CsiIceSarEnableReq_SDK *this)
{
  return MEMORY[0x270F8D3A0](this);
}

void AriSdk::ARI_CsiIceSarEnableReq_SDK::~ARI_CsiIceSarEnableReq_SDK(AriSdk::ARI_CsiIceSarEnableReq_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIdcSetRadio1Req_SDK::ARI_CsiIdcSetRadio1Req_SDK(AriSdk::ARI_CsiIdcSetRadio1Req_SDK *this)
{
  return MEMORY[0x270F8D3B0](this);
}

void AriSdk::ARI_CsiIdcSetRadio1Req_SDK::~ARI_CsiIdcSetRadio1Req_SDK(AriSdk::ARI_CsiIdcSetRadio1Req_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiSecGetChipIdReq_SDK::ARI_CsiSecGetChipIdReq_SDK(AriSdk::ARI_CsiSecGetChipIdReq_SDK *this)
{
  return MEMORY[0x270F8D3C0](this);
}

void AriSdk::ARI_CsiSecGetChipIdReq_SDK::~ARI_CsiSecGetChipIdReq_SDK(AriSdk::ARI_CsiSecGetChipIdReq_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiSecGetPkHashReq_SDK::ARI_CsiSecGetPkHashReq_SDK(AriSdk::ARI_CsiSecGetPkHashReq_SDK *this)
{
  return MEMORY[0x270F8D3D0](this);
}

void AriSdk::ARI_CsiSecGetPkHashReq_SDK::~ARI_CsiSecGetPkHashReq_SDK(AriSdk::ARI_CsiSecGetPkHashReq_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiSecGetSNUMRspCb_SDK::unpack(AriSdk::ARI_CsiSecGetSNUMRspCb_SDK *this)
{
  return MEMORY[0x270F8D3E0](this);
}

uint64_t AriSdk::ARI_CsiSecGetSNUMRspCb_SDK::ARI_CsiSecGetSNUMRspCb_SDK(AriSdk::ARI_CsiSecGetSNUMRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8D3E8](this, a2);
}

void AriSdk::ARI_CsiSecGetSNUMRspCb_SDK::~ARI_CsiSecGetSNUMRspCb_SDK(AriSdk::ARI_CsiSecGetSNUMRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiSysGetInfoReqV2_SDK::ARI_CsiSysGetInfoReqV2_SDK(AriSdk::ARI_CsiSysGetInfoReqV2_SDK *this)
{
  return MEMORY[0x270F8D3F8](this);
}

void AriSdk::ARI_CsiSysGetInfoReqV2_SDK::~ARI_CsiSysGetInfoReqV2_SDK(AriSdk::ARI_CsiSysGetInfoReqV2_SDK *this)
{
}

uint64_t AriSdk::ARI_IBIMccSettingRspCb_SDK::unpack(AriSdk::ARI_IBIMccSettingRspCb_SDK *this)
{
  return MEMORY[0x270F8D460](this);
}

uint64_t AriSdk::ARI_IBIMccSettingRspCb_SDK::ARI_IBIMccSettingRspCb_SDK(AriSdk::ARI_IBIMccSettingRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8D468](this, a2);
}

void AriSdk::ARI_IBIMccSettingRspCb_SDK::~ARI_IBIMccSettingRspCb_SDK(AriSdk::ARI_IBIMccSettingRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_TraceOutputIdleInd_SDK::unpack(AriSdk::ARI_TraceOutputIdleInd_SDK *this)
{
  return MEMORY[0x270F8D5E0](this);
}

uint64_t AriSdk::ARI_TraceOutputIdleInd_SDK::ARI_TraceOutputIdleInd_SDK(AriSdk::ARI_TraceOutputIdleInd_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8D5E8](this, a2);
}

void AriSdk::ARI_TraceOutputIdleInd_SDK::~ARI_TraceOutputIdleInd_SDK(AriSdk::ARI_TraceOutputIdleInd_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiAwdsAddConfigReq_SDK::ARI_CsiAwdsAddConfigReq_SDK(AriSdk::ARI_CsiAwdsAddConfigReq_SDK *this)
{
  return MEMORY[0x270F8D5F8](this);
}

void AriSdk::ARI_CsiAwdsAddConfigReq_SDK::~ARI_CsiAwdsAddConfigReq_SDK(AriSdk::ARI_CsiAwdsAddConfigReq_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiAwdsMetricSubInd_SDK::unpack(AriSdk::ARI_CsiAwdsMetricSubInd_SDK *this)
{
  return MEMORY[0x270F8D608](this);
}

uint64_t AriSdk::ARI_CsiAwdsMetricSubInd_SDK::ARI_CsiAwdsMetricSubInd_SDK(AriSdk::ARI_CsiAwdsMetricSubInd_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8D610](this, a2);
}

void AriSdk::ARI_CsiAwdsMetricSubInd_SDK::~ARI_CsiAwdsMetricSubInd_SDK(AriSdk::ARI_CsiAwdsMetricSubInd_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiBspShutdownRspCb_SDK::ARI_CsiBspShutdownRspCb_SDK(AriSdk::ARI_CsiBspShutdownRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8D620](this, a2);
}

void AriSdk::ARI_CsiBspShutdownRspCb_SDK::~ARI_CsiBspShutdownRspCb_SDK(AriSdk::ARI_CsiBspShutdownRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiFpGetStatusRspV2_SDK::unpack(AriSdk::ARI_CsiFpGetStatusRspV2_SDK *this)
{
  return MEMORY[0x270F8D630](this);
}

uint64_t AriSdk::ARI_CsiFpGetStatusRspV2_SDK::ARI_CsiFpGetStatusRspV2_SDK(AriSdk::ARI_CsiFpGetStatusRspV2_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8D638](this, a2);
}

void AriSdk::ARI_CsiFpGetStatusRspV2_SDK::~ARI_CsiFpGetStatusRspV2_SDK(AriSdk::ARI_CsiFpGetStatusRspV2_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiFpPrioSyncReqInd_SDK::unpack(AriSdk::ARI_CsiFpPrioSyncReqInd_SDK *this)
{
  return MEMORY[0x270F8D648](this);
}

uint64_t AriSdk::ARI_CsiFpPrioSyncReqInd_SDK::ARI_CsiFpPrioSyncReqInd_SDK(AriSdk::ARI_CsiFpPrioSyncReqInd_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8D650](this, a2);
}

void AriSdk::ARI_CsiFpPrioSyncReqInd_SDK::~ARI_CsiFpPrioSyncReqInd_SDK(AriSdk::ARI_CsiFpPrioSyncReqInd_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiGetSystemTimeReq_SDK::ARI_CsiGetSystemTimeReq_SDK(AriSdk::ARI_CsiGetSystemTimeReq_SDK *this)
{
  return MEMORY[0x270F8D660](this);
}

void AriSdk::ARI_CsiGetSystemTimeReq_SDK::~ARI_CsiGetSystemTimeReq_SDK(AriSdk::ARI_CsiGetSystemTimeReq_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIceCaEnableRspCb_SDK::unpack(AriSdk::ARI_CsiIceCaEnableRspCb_SDK *this)
{
  return MEMORY[0x270F8D670](this);
}

uint64_t AriSdk::ARI_CsiIceCaEnableRspCb_SDK::ARI_CsiIceCaEnableRspCb_SDK(AriSdk::ARI_CsiIceCaEnableRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8D678](this, a2);
}

void AriSdk::ARI_CsiIceCaEnableRspCb_SDK::~ARI_CsiIceCaEnableRspCb_SDK(AriSdk::ARI_CsiIceCaEnableRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIceGpsStateRspCb_SDK::unpack(AriSdk::ARI_CsiIceGpsStateRspCb_SDK *this)
{
  return MEMORY[0x270F8D698](this);
}

uint64_t AriSdk::ARI_CsiIceGpsStateRspCb_SDK::ARI_CsiIceGpsStateRspCb_SDK(AriSdk::ARI_CsiIceGpsStateRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8D6A0](this, a2);
}

void AriSdk::ARI_CsiIceGpsStateRspCb_SDK::~ARI_CsiIceGpsStateRspCb_SDK(AriSdk::ARI_CsiIceGpsStateRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiTraceModeInitReq_SDK::ARI_CsiTraceModeInitReq_SDK(AriSdk::ARI_CsiTraceModeInitReq_SDK *this)
{
  return MEMORY[0x270F8D6C0](this);
}

void AriSdk::ARI_CsiTraceModeInitReq_SDK::~ARI_CsiTraceModeInitReq_SDK(AriSdk::ARI_CsiTraceModeInitReq_SDK *this)
{
}

uint64_t AriSdk::ARI_TraceSetConfigRspCb_SDK::unpack(AriSdk::ARI_TraceSetConfigRspCb_SDK *this)
{
  return MEMORY[0x270F8D848](this);
}

uint64_t AriSdk::ARI_TraceSetConfigRspCb_SDK::ARI_TraceSetConfigRspCb_SDK(AriSdk::ARI_TraceSetConfigRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8D850](this, a2);
}

void AriSdk::ARI_TraceSetConfigRspCb_SDK::~ARI_TraceSetConfigRspCb_SDK(AriSdk::ARI_TraceSetConfigRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiGetSystemTimeResp_SDK::unpack(AriSdk::ARI_CsiGetSystemTimeResp_SDK *this)
{
  return MEMORY[0x270F8D860](this);
}

uint64_t AriSdk::ARI_CsiGetSystemTimeResp_SDK::ARI_CsiGetSystemTimeResp_SDK(AriSdk::ARI_CsiGetSystemTimeResp_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8D868](this, a2);
}

void AriSdk::ARI_CsiGetSystemTimeResp_SDK::~ARI_CsiGetSystemTimeResp_SDK(AriSdk::ARI_CsiGetSystemTimeResp_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIceArfcnLockRspCb_SDK::unpack(AriSdk::ARI_CsiIceArfcnLockRspCb_SDK *this)
{
  return MEMORY[0x270F8D888](this);
}

uint64_t AriSdk::ARI_CsiIceArfcnLockRspCb_SDK::ARI_CsiIceArfcnLockRspCb_SDK(AriSdk::ARI_CsiIceArfcnLockRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8D890](this, a2);
}

void AriSdk::ARI_CsiIceArfcnLockRspCb_SDK::~ARI_CsiIceArfcnLockRspCb_SDK(AriSdk::ARI_CsiIceArfcnLockRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIceArtdSettingReq_SDK::ARI_CsiIceArtdSettingReq_SDK(AriSdk::ARI_CsiIceArtdSettingReq_SDK *this)
{
  return MEMORY[0x270F8D8A0](this);
}

void AriSdk::ARI_CsiIceArtdSettingReq_SDK::~ARI_CsiIceArtdSettingReq_SDK(AriSdk::ARI_CsiIceArtdSettingReq_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIceGetCaEnableReq_SDK::ARI_CsiIceGetCaEnableReq_SDK(AriSdk::ARI_CsiIceGetCaEnableReq_SDK *this)
{
  return MEMORY[0x270F8D8C0](this);
}

void AriSdk::ARI_CsiIceGetCaEnableReq_SDK::~ARI_CsiIceGetCaEnableReq_SDK(AriSdk::ARI_CsiIceGetCaEnableReq_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIceGripStateRspCb_SDK::ARI_CsiIceGripStateRspCb_SDK(AriSdk::ARI_CsiIceGripStateRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8D8D0](this, a2);
}

void AriSdk::ARI_CsiIceGripStateRspCb_SDK::~ARI_CsiIceGripStateRspCb_SDK(AriSdk::ARI_CsiIceGripStateRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIceRxDiversityReq_SDK::ARI_CsiIceRxDiversityReq_SDK(AriSdk::ARI_CsiIceRxDiversityReq_SDK *this)
{
  return MEMORY[0x270F8D8E0](this);
}

void AriSdk::ARI_CsiIceRxDiversityReq_SDK::~ARI_CsiIceRxDiversityReq_SDK(AriSdk::ARI_CsiIceRxDiversityReq_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIceSarEnableRspCb_SDK::ARI_CsiIceSarEnableRspCb_SDK(AriSdk::ARI_CsiIceSarEnableRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8D8F0](this, a2);
}

void AriSdk::ARI_CsiIceSarEnableRspCb_SDK::~ARI_CsiIceSarEnableRspCb_SDK(AriSdk::ARI_CsiIceSarEnableRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIceSarWaitTimeReq_SDK::ARI_CsiIceSarWaitTimeReq_SDK(AriSdk::ARI_CsiIceSarWaitTimeReq_SDK *this)
{
  return MEMORY[0x270F8D900](this);
}

void AriSdk::ARI_CsiIceSarWaitTimeReq_SDK::~ARI_CsiIceSarWaitTimeReq_SDK(AriSdk::ARI_CsiIceSarWaitTimeReq_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIdcSetRTConfigReq_SDK::ARI_CsiIdcSetRTConfigReq_SDK(AriSdk::ARI_CsiIdcSetRTConfigReq_SDK *this)
{
  return MEMORY[0x270F8D910](this);
}

void AriSdk::ARI_CsiIdcSetRTConfigReq_SDK::~ARI_CsiIdcSetRTConfigReq_SDK(AriSdk::ARI_CsiIdcSetRTConfigReq_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIdcSetRadio1RspCb_SDK::unpack(AriSdk::ARI_CsiIdcSetRadio1RspCb_SDK *this)
{
  return MEMORY[0x270F8D920](this);
}

uint64_t AriSdk::ARI_CsiIdcSetRadio1RspCb_SDK::ARI_CsiIdcSetRadio1RspCb_SDK(AriSdk::ARI_CsiIdcSetRadio1RspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8D928](this, a2);
}

void AriSdk::ARI_CsiIdcSetRadio1RspCb_SDK::~ARI_CsiIdcSetRadio1RspCb_SDK(AriSdk::ARI_CsiIdcSetRadio1RspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiSecGetChipIdRspCb_SDK::unpack(AriSdk::ARI_CsiSecGetChipIdRspCb_SDK *this)
{
  return MEMORY[0x270F8D938](this);
}

uint64_t AriSdk::ARI_CsiSecGetChipIdRspCb_SDK::ARI_CsiSecGetChipIdRspCb_SDK(AriSdk::ARI_CsiSecGetChipIdRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8D940](this, a2);
}

void AriSdk::ARI_CsiSecGetChipIdRspCb_SDK::~ARI_CsiSecGetChipIdRspCb_SDK(AriSdk::ARI_CsiSecGetChipIdRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiSecGetPkHashRspCb_SDK::unpack(AriSdk::ARI_CsiSecGetPkHashRspCb_SDK *this)
{
  return MEMORY[0x270F8D950](this);
}

uint64_t AriSdk::ARI_CsiSecGetPkHashRspCb_SDK::ARI_CsiSecGetPkHashRspCb_SDK(AriSdk::ARI_CsiSecGetPkHashRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8D958](this, a2);
}

void AriSdk::ARI_CsiSecGetPkHashRspCb_SDK::~ARI_CsiSecGetPkHashRspCb_SDK(AriSdk::ARI_CsiSecGetPkHashRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiSecReadSikPKeyReq_SDK::ARI_CsiSecReadSikPKeyReq_SDK(AriSdk::ARI_CsiSecReadSikPKeyReq_SDK *this)
{
  return MEMORY[0x270F8D968](this);
}

void AriSdk::ARI_CsiSecReadSikPKeyReq_SDK::~ARI_CsiSecReadSikPKeyReq_SDK(AriSdk::ARI_CsiSecReadSikPKeyReq_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiSysGetInfoRspCbV2_SDK::unpack(AriSdk::ARI_CsiSysGetInfoRspCbV2_SDK *this)
{
  return MEMORY[0x270F8D978](this);
}

uint64_t AriSdk::ARI_CsiSysGetInfoRspCbV2_SDK::ARI_CsiSysGetInfoRspCbV2_SDK(AriSdk::ARI_CsiSysGetInfoRspCbV2_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8D980](this, a2);
}

void AriSdk::ARI_CsiSysGetInfoRspCbV2_SDK::~ARI_CsiSysGetInfoRspCbV2_SDK(AriSdk::ARI_CsiSysGetInfoRspCbV2_SDK *this)
{
}

uint64_t AriSdk::ARI_IBICPMSPowerQueryReq_SDK::ARI_IBICPMSPowerQueryReq_SDK(AriSdk::ARI_IBICPMSPowerQueryReq_SDK *this)
{
  return MEMORY[0x270F8D990](this);
}

void AriSdk::ARI_IBICPMSPowerQueryReq_SDK::~ARI_IBICPMSPowerQueryReq_SDK(AriSdk::ARI_IBICPMSPowerQueryReq_SDK *this)
{
}

uint64_t AriSdk::ARI_IBINetIceApStatusReq_SDK::ARI_IBINetIceApStatusReq_SDK(AriSdk::ARI_IBINetIceApStatusReq_SDK *this)
{
  return MEMORY[0x270F8DA68](this);
}

void AriSdk::ARI_IBINetIceApStatusReq_SDK::~ARI_IBINetIceApStatusReq_SDK(AriSdk::ARI_IBINetIceApStatusReq_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiAwdsAddConfigRspCb_SDK::unpack(AriSdk::ARI_CsiAwdsAddConfigRspCb_SDK *this)
{
  return MEMORY[0x270F8DB88](this);
}

uint64_t AriSdk::ARI_CsiAwdsAddConfigRspCb_SDK::ARI_CsiAwdsAddConfigRspCb_SDK(AriSdk::ARI_CsiAwdsAddConfigRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8DB90](this, a2);
}

void AriSdk::ARI_CsiAwdsAddConfigRspCb_SDK::~ARI_CsiAwdsAddConfigRspCb_SDK(AriSdk::ARI_CsiAwdsAddConfigRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIceGetArfcnLockReq_SDK::ARI_CsiIceGetArfcnLockReq_SDK(AriSdk::ARI_CsiIceGetArfcnLockReq_SDK *this)
{
  return MEMORY[0x270F8DBF0](this);
}

void AriSdk::ARI_CsiIceGetArfcnLockReq_SDK::~ARI_CsiIceGetArfcnLockReq_SDK(AriSdk::ARI_CsiIceGetArfcnLockReq_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIceGetTxAntennaReq_SDK::ARI_CsiIceGetTxAntennaReq_SDK(AriSdk::ARI_CsiIceGetTxAntennaReq_SDK *this)
{
  return MEMORY[0x270F8DC00](this);
}

void AriSdk::ARI_CsiIceGetTxAntennaReq_SDK::~ARI_CsiIceGetTxAntennaReq_SDK(AriSdk::ARI_CsiIceGetTxAntennaReq_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIceSetTxAntennaReq_SDK::ARI_CsiIceSetTxAntennaReq_SDK(AriSdk::ARI_CsiIceSetTxAntennaReq_SDK *this)
{
  return MEMORY[0x270F8DC20](this);
}

void AriSdk::ARI_CsiIceSetTxAntennaReq_SDK::~ARI_CsiIceSetTxAntennaReq_SDK(AriSdk::ARI_CsiIceSetTxAntennaReq_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIceSpeakerStateReq_SDK::ARI_CsiIceSpeakerStateReq_SDK(AriSdk::ARI_CsiIceSpeakerStateReq_SDK *this)
{
  return MEMORY[0x270F8DC30](this);
}

void AriSdk::ARI_CsiIceSpeakerStateReq_SDK::~ARI_CsiIceSpeakerStateReq_SDK(AriSdk::ARI_CsiIceSpeakerStateReq_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIceWakeupReasonReq_SDK::ARI_CsiIceWakeupReasonReq_SDK(AriSdk::ARI_CsiIceWakeupReasonReq_SDK *this)
{
  return MEMORY[0x270F8DC40](this);
}

void AriSdk::ARI_CsiIceWakeupReasonReq_SDK::~ARI_CsiIceWakeupReasonReq_SDK(AriSdk::ARI_CsiIceWakeupReasonReq_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIdcControlEventReq_SDK::ARI_CsiIdcControlEventReq_SDK(AriSdk::ARI_CsiIdcControlEventReq_SDK *this)
{
  return MEMORY[0x270F8DC50](this);
}

void AriSdk::ARI_CsiIdcControlEventReq_SDK::~ARI_CsiIdcControlEventReq_SDK(AriSdk::ARI_CsiIdcControlEventReq_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIdcSetLaaConfigReq_SDK::ARI_CsiIdcSetLaaConfigReq_SDK(AriSdk::ARI_CsiIdcSetLaaConfigReq_SDK *this)
{
  return MEMORY[0x270F8DC60](this);
}

void AriSdk::ARI_CsiIdcSetLaaConfigReq_SDK::~ARI_CsiIdcSetLaaConfigReq_SDK(AriSdk::ARI_CsiIdcSetLaaConfigReq_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiSecGetRandomNumReq_SDK::ARI_CsiSecGetRandomNumReq_SDK(AriSdk::ARI_CsiSecGetRandomNumReq_SDK *this)
{
  return MEMORY[0x270F8DC88](this);
}

void AriSdk::ARI_CsiSecGetRandomNumReq_SDK::~ARI_CsiSecGetRandomNumReq_SDK(AriSdk::ARI_CsiSecGetRandomNumReq_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiTraceModeInitRspCb_SDK::unpack(AriSdk::ARI_CsiTraceModeInitRspCb_SDK *this)
{
  return MEMORY[0x270F8DC98](this);
}

uint64_t AriSdk::ARI_CsiTraceModeInitRspCb_SDK::ARI_CsiTraceModeInitRspCb_SDK(AriSdk::ARI_CsiTraceModeInitRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8DCA0](this, a2);
}

void AriSdk::ARI_CsiTraceModeInitRspCb_SDK::~ARI_CsiTraceModeInitRspCb_SDK(AriSdk::ARI_CsiTraceModeInitRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiAwdsDeleteConfigReq_SDK::ARI_CsiAwdsDeleteConfigReq_SDK(AriSdk::ARI_CsiAwdsDeleteConfigReq_SDK *this)
{
  return MEMORY[0x270F8DF38](this);
}

void AriSdk::ARI_CsiAwdsDeleteConfigReq_SDK::~ARI_CsiAwdsDeleteConfigReq_SDK(AriSdk::ARI_CsiAwdsDeleteConfigReq_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiAwdsGlobalSwitchReq_SDK::ARI_CsiAwdsGlobalSwitchReq_SDK(AriSdk::ARI_CsiAwdsGlobalSwitchReq_SDK *this)
{
  return MEMORY[0x270F8DF48](this);
}

void AriSdk::ARI_CsiAwdsGlobalSwitchReq_SDK::~ARI_CsiAwdsGlobalSwitchReq_SDK(AriSdk::ARI_CsiAwdsGlobalSwitchReq_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiAwdsPiiLocConfigReq_SDK::ARI_CsiAwdsPiiLocConfigReq_SDK(AriSdk::ARI_CsiAwdsPiiLocConfigReq_SDK *this)
{
  return MEMORY[0x270F8DF58](this);
}

void AriSdk::ARI_CsiAwdsPiiLocConfigReq_SDK::~ARI_CsiAwdsPiiLocConfigReq_SDK(AriSdk::ARI_CsiAwdsPiiLocConfigReq_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIceArtdSettingRspCb_SDK::unpack(AriSdk::ARI_CsiIceArtdSettingRspCb_SDK *this)
{
  return MEMORY[0x270F8DF80](this);
}

uint64_t AriSdk::ARI_CsiIceArtdSettingRspCb_SDK::ARI_CsiIceArtdSettingRspCb_SDK(AriSdk::ARI_CsiIceArtdSettingRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8DF88](this, a2);
}

void AriSdk::ARI_CsiIceArtdSettingRspCb_SDK::~ARI_CsiIceArtdSettingRspCb_SDK(AriSdk::ARI_CsiIceArtdSettingRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIceGetCaEnableRspCb_SDK::unpack(AriSdk::ARI_CsiIceGetCaEnableRspCb_SDK *this)
{
  return MEMORY[0x270F8DF98](this);
}

uint64_t AriSdk::ARI_CsiIceGetCaEnableRspCb_SDK::ARI_CsiIceGetCaEnableRspCb_SDK(AriSdk::ARI_CsiIceGetCaEnableRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8DFA0](this, a2);
}

void AriSdk::ARI_CsiIceGetCaEnableRspCb_SDK::~ARI_CsiIceGetCaEnableRspCb_SDK(AriSdk::ARI_CsiIceGetCaEnableRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIceRxDiversityRspCb_SDK::unpack(AriSdk::ARI_CsiIceRxDiversityRspCb_SDK *this)
{
  return MEMORY[0x270F8DFB0](this);
}

uint64_t AriSdk::ARI_CsiIceRxDiversityRspCb_SDK::ARI_CsiIceRxDiversityRspCb_SDK(AriSdk::ARI_CsiIceRxDiversityRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8DFB8](this, a2);
}

void AriSdk::ARI_CsiIceRxDiversityRspCb_SDK::~ARI_CsiIceRxDiversityRspCb_SDK(AriSdk::ARI_CsiIceRxDiversityRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIceSarWaitTimeRspCb_SDK::ARI_CsiIceSarWaitTimeRspCb_SDK(AriSdk::ARI_CsiIceSarWaitTimeRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8DFC8](this, a2);
}

void AriSdk::ARI_CsiIceSarWaitTimeRspCb_SDK::~ARI_CsiIceSarWaitTimeRspCb_SDK(AriSdk::ARI_CsiIceSarWaitTimeRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIdcGetCellConfigReq_SDK::ARI_CsiIdcGetCellConfigReq_SDK(AriSdk::ARI_CsiIdcGetCellConfigReq_SDK *this)
{
  return MEMORY[0x270F8DFD8](this);
}

void AriSdk::ARI_CsiIdcGetCellConfigReq_SDK::~ARI_CsiIdcGetCellConfigReq_SDK(AriSdk::ARI_CsiIdcGetCellConfigReq_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIdcRTSetScanFreqReq_SDK::ARI_CsiIdcRTSetScanFreqReq_SDK(AriSdk::ARI_CsiIdcRTSetScanFreqReq_SDK *this)
{
  return MEMORY[0x270F8DFE8](this);
}

void AriSdk::ARI_CsiIdcRTSetScanFreqReq_SDK::~ARI_CsiIdcRTSetScanFreqReq_SDK(AriSdk::ARI_CsiIdcRTSetScanFreqReq_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIdcSetRTConfigRspCb_SDK::unpack(AriSdk::ARI_CsiIdcSetRTConfigRspCb_SDK *this)
{
  return MEMORY[0x270F8DFF8](this);
}

uint64_t AriSdk::ARI_CsiIdcSetRTConfigRspCb_SDK::ARI_CsiIdcSetRTConfigRspCb_SDK(AriSdk::ARI_CsiIdcSetRTConfigRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8E000](this, a2);
}

void AriSdk::ARI_CsiIdcSetRTConfigRspCb_SDK::~ARI_CsiIdcSetRTConfigRspCb_SDK(AriSdk::ARI_CsiIdcSetRTConfigRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIdcSetWifiStatusReq_SDK::ARI_CsiIdcSetWifiStatusReq_SDK(AriSdk::ARI_CsiIdcSetWifiStatusReq_SDK *this)
{
  return MEMORY[0x270F8E010](this);
}

void AriSdk::ARI_CsiIdcSetWifiStatusReq_SDK::~ARI_CsiIdcSetWifiStatusReq_SDK(AriSdk::ARI_CsiIdcSetWifiStatusReq_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiSecReadSikPKeyRspCb_SDK::unpack(AriSdk::ARI_CsiSecReadSikPKeyRspCb_SDK *this)
{
  return MEMORY[0x270F8E020](this);
}

uint64_t AriSdk::ARI_CsiSecReadSikPKeyRspCb_SDK::ARI_CsiSecReadSikPKeyRspCb_SDK(AriSdk::ARI_CsiSecReadSikPKeyRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8E028](this, a2);
}

void AriSdk::ARI_CsiSecReadSikPKeyRspCb_SDK::~ARI_CsiSecReadSikPKeyRspCb_SDK(AriSdk::ARI_CsiSecReadSikPKeyRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiTraceProfileInitReq_SDK::ARI_CsiTraceProfileInitReq_SDK(AriSdk::ARI_CsiTraceProfileInitReq_SDK *this)
{
  return MEMORY[0x270F8E038](this);
}

void AriSdk::ARI_CsiTraceProfileInitReq_SDK::~ARI_CsiTraceProfileInitReq_SDK(AriSdk::ARI_CsiTraceProfileInitReq_SDK *this)
{
}

uint64_t AriSdk::ARI_IBICPMSPowerQueryRspCb_SDK::unpack(AriSdk::ARI_IBICPMSPowerQueryRspCb_SDK *this)
{
  return MEMORY[0x270F8E048](this);
}

uint64_t AriSdk::ARI_IBICPMSPowerQueryRspCb_SDK::ARI_IBICPMSPowerQueryRspCb_SDK(AriSdk::ARI_IBICPMSPowerQueryRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8E050](this, a2);
}

void AriSdk::ARI_IBICPMSPowerQueryRspCb_SDK::~ARI_IBICPMSPowerQueryRspCb_SDK(AriSdk::ARI_IBICPMSPowerQueryRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_IBINetIceApStatusRspCb_SDK::ARI_IBINetIceApStatusRspCb_SDK(AriSdk::ARI_IBINetIceApStatusRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8E170](this, a2);
}

void AriSdk::ARI_IBINetIceApStatusRspCb_SDK::~ARI_IBINetIceApStatusRspCb_SDK(AriSdk::ARI_IBINetIceApStatusRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIceAccessoryStateReq_SDK::ARI_CsiIceAccessoryStateReq_SDK(AriSdk::ARI_CsiIceAccessoryStateReq_SDK *this)
{
  return MEMORY[0x270F8E3A0](this);
}

void AriSdk::ARI_CsiIceAccessoryStateReq_SDK::~ARI_CsiIceAccessoryStateReq_SDK(AriSdk::ARI_CsiIceAccessoryStateReq_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIceGetArfcnLockRspCb_SDK::unpack(AriSdk::ARI_CsiIceGetArfcnLockRspCb_SDK *this)
{
  return MEMORY[0x270F8E3F0](this);
}

uint64_t AriSdk::ARI_CsiIceGetArfcnLockRspCb_SDK::ARI_CsiIceGetArfcnLockRspCb_SDK(AriSdk::ARI_CsiIceGetArfcnLockRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8E3F8](this, a2);
}

void AriSdk::ARI_CsiIceGetArfcnLockRspCb_SDK::~ARI_CsiIceGetArfcnLockRspCb_SDK(AriSdk::ARI_CsiIceGetArfcnLockRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIceGetArtdSettingReq_SDK::ARI_CsiIceGetArtdSettingReq_SDK(AriSdk::ARI_CsiIceGetArtdSettingReq_SDK *this)
{
  return MEMORY[0x270F8E408](this);
}

void AriSdk::ARI_CsiIceGetArtdSettingReq_SDK::~ARI_CsiIceGetArtdSettingReq_SDK(AriSdk::ARI_CsiIceGetArtdSettingReq_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIceGetRxDiversityReq_SDK::ARI_CsiIceGetRxDiversityReq_SDK(AriSdk::ARI_CsiIceGetRxDiversityReq_SDK *this)
{
  return MEMORY[0x270F8E418](this);
}

void AriSdk::ARI_CsiIceGetRxDiversityReq_SDK::~ARI_CsiIceGetRxDiversityReq_SDK(AriSdk::ARI_CsiIceGetRxDiversityReq_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIceGetTxAntennaRspCb_SDK::unpack(AriSdk::ARI_CsiIceGetTxAntennaRspCb_SDK *this)
{
  return MEMORY[0x270F8E428](this);
}

uint64_t AriSdk::ARI_CsiIceGetTxAntennaRspCb_SDK::ARI_CsiIceGetTxAntennaRspCb_SDK(AriSdk::ARI_CsiIceGetTxAntennaRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8E430](this, a2);
}

void AriSdk::ARI_CsiIceGetTxAntennaRspCb_SDK::~ARI_CsiIceGetTxAntennaRspCb_SDK(AriSdk::ARI_CsiIceGetTxAntennaRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIceSetTxAntennaRspCb_SDK::unpack(AriSdk::ARI_CsiIceSetTxAntennaRspCb_SDK *this)
{
  return MEMORY[0x270F8E450](this);
}

uint64_t AriSdk::ARI_CsiIceSetTxAntennaRspCb_SDK::ARI_CsiIceSetTxAntennaRspCb_SDK(AriSdk::ARI_CsiIceSetTxAntennaRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8E458](this, a2);
}

void AriSdk::ARI_CsiIceSetTxAntennaRspCb_SDK::~ARI_CsiIceSetTxAntennaRspCb_SDK(AriSdk::ARI_CsiIceSetTxAntennaRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIceSpeakerStateRspCb_SDK::ARI_CsiIceSpeakerStateRspCb_SDK(AriSdk::ARI_CsiIceSpeakerStateRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8E468](this, a2);
}

void AriSdk::ARI_CsiIceSpeakerStateRspCb_SDK::~ARI_CsiIceSpeakerStateRspCb_SDK(AriSdk::ARI_CsiIceSpeakerStateRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIceWakeupReasonRspCb_SDK::unpack(AriSdk::ARI_CsiIceWakeupReasonRspCb_SDK *this)
{
  return MEMORY[0x270F8E478](this);
}

uint64_t AriSdk::ARI_CsiIceWakeupReasonRspCb_SDK::ARI_CsiIceWakeupReasonRspCb_SDK(AriSdk::ARI_CsiIceWakeupReasonRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8E480](this, a2);
}

void AriSdk::ARI_CsiIceWakeupReasonRspCb_SDK::~ARI_CsiIceWakeupReasonRspCb_SDK(AriSdk::ARI_CsiIceWakeupReasonRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIdcControlEventRspCb_SDK::unpack(AriSdk::ARI_CsiIdcControlEventRspCb_SDK *this)
{
  return MEMORY[0x270F8E490](this);
}

uint64_t AriSdk::ARI_CsiIdcControlEventRspCb_SDK::ARI_CsiIdcControlEventRspCb_SDK(AriSdk::ARI_CsiIdcControlEventRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8E498](this, a2);
}

void AriSdk::ARI_CsiIdcControlEventRspCb_SDK::~ARI_CsiIdcControlEventRspCb_SDK(AriSdk::ARI_CsiIdcControlEventRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIdcSetLaaConfigRspCb_SDK::unpack(AriSdk::ARI_CsiIdcSetLaaConfigRspCb_SDK *this)
{
  return MEMORY[0x270F8E4A8](this);
}

uint64_t AriSdk::ARI_CsiIdcSetLaaConfigRspCb_SDK::ARI_CsiIdcSetLaaConfigRspCb_SDK(AriSdk::ARI_CsiIdcSetLaaConfigRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8E4B0](this, a2);
}

void AriSdk::ARI_CsiIdcSetLaaConfigRspCb_SDK::~ARI_CsiIdcSetLaaConfigRspCb_SDK(AriSdk::ARI_CsiIdcSetLaaConfigRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiSecGetRandomNumRspCb_SDK::unpack(AriSdk::ARI_CsiSecGetRandomNumRspCb_SDK *this)
{
  return MEMORY[0x270F8E4C0](this);
}

uint64_t AriSdk::ARI_CsiSecGetRandomNumRspCb_SDK::ARI_CsiSecGetRandomNumRspCb_SDK(AriSdk::ARI_CsiSecGetRandomNumRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8E4C8](this, a2);
}

void AriSdk::ARI_CsiSecGetRandomNumRspCb_SDK::~ARI_CsiSecGetRandomNumRspCb_SDK(AriSdk::ARI_CsiSecGetRandomNumRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_IBICpsHealthActivityReq_SDK::ARI_IBICpsHealthActivityReq_SDK(AriSdk::ARI_IBICpsHealthActivityReq_SDK *this)
{
  return MEMORY[0x270F8E640](this);
}

void AriSdk::ARI_IBICpsHealthActivityReq_SDK::~ARI_IBICpsHealthActivityReq_SDK(AriSdk::ARI_IBICpsHealthActivityReq_SDK *this)
{
}

uint64_t AriSdk::ARI_IBICpsHealthActivityRsp_SDK::unpack(AriSdk::ARI_IBICpsHealthActivityRsp_SDK *this)
{
  return MEMORY[0x270F8E650](this);
}

uint64_t AriSdk::ARI_IBICpsHealthActivityRsp_SDK::ARI_IBICpsHealthActivityRsp_SDK(AriSdk::ARI_IBICpsHealthActivityRsp_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8E658](this, a2);
}

void AriSdk::ARI_IBICpsHealthActivityRsp_SDK::~ARI_IBICpsHealthActivityRsp_SDK(AriSdk::ARI_IBICpsHealthActivityRsp_SDK *this)
{
}

uint64_t AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK::ARI_IBIStwSarBackoffTimeReq_SDK(AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK *this)
{
  return MEMORY[0x270F8E7D8](this);
}

void AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK::~ARI_IBIStwSarBackoffTimeReq_SDK(AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiAwdsDeleteConfigRspCb_SDK::unpack(AriSdk::ARI_CsiAwdsDeleteConfigRspCb_SDK *this)
{
  return MEMORY[0x270F8E820](this);
}

uint64_t AriSdk::ARI_CsiAwdsDeleteConfigRspCb_SDK::ARI_CsiAwdsDeleteConfigRspCb_SDK(AriSdk::ARI_CsiAwdsDeleteConfigRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8E828](this, a2);
}

void AriSdk::ARI_CsiAwdsDeleteConfigRspCb_SDK::~ARI_CsiAwdsDeleteConfigRspCb_SDK(AriSdk::ARI_CsiAwdsDeleteConfigRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiAwdsGlobalSwitchRspCb_SDK::unpack(AriSdk::ARI_CsiAwdsGlobalSwitchRspCb_SDK *this)
{
  return MEMORY[0x270F8E838](this);
}

uint64_t AriSdk::ARI_CsiAwdsGlobalSwitchRspCb_SDK::ARI_CsiAwdsGlobalSwitchRspCb_SDK(AriSdk::ARI_CsiAwdsGlobalSwitchRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8E840](this, a2);
}

void AriSdk::ARI_CsiAwdsGlobalSwitchRspCb_SDK::~ARI_CsiAwdsGlobalSwitchRspCb_SDK(AriSdk::ARI_CsiAwdsGlobalSwitchRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiAwdsPiiLocConfigRspCb_SDK::unpack(AriSdk::ARI_CsiAwdsPiiLocConfigRspCb_SDK *this)
{
  return MEMORY[0x270F8E850](this);
}

uint64_t AriSdk::ARI_CsiAwdsPiiLocConfigRspCb_SDK::ARI_CsiAwdsPiiLocConfigRspCb_SDK(AriSdk::ARI_CsiAwdsPiiLocConfigRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8E858](this, a2);
}

void AriSdk::ARI_CsiAwdsPiiLocConfigRspCb_SDK::~ARI_CsiAwdsPiiLocConfigRspCb_SDK(AriSdk::ARI_CsiAwdsPiiLocConfigRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIdcGetCellConfigRspCb_SDK::unpack(AriSdk::ARI_CsiIdcGetCellConfigRspCb_SDK *this)
{
  return MEMORY[0x270F8E8A8](this);
}

uint64_t AriSdk::ARI_CsiIdcGetCellConfigRspCb_SDK::ARI_CsiIdcGetCellConfigRspCb_SDK(AriSdk::ARI_CsiIdcGetCellConfigRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8E8B0](this, a2);
}

void AriSdk::ARI_CsiIdcGetCellConfigRspCb_SDK::~ARI_CsiIdcGetCellConfigRspCb_SDK(AriSdk::ARI_CsiIdcGetCellConfigRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIdcRTSetScanFreqRspCb_SDK::unpack(AriSdk::ARI_CsiIdcRTSetScanFreqRspCb_SDK *this)
{
  return MEMORY[0x270F8E8C0](this);
}

uint64_t AriSdk::ARI_CsiIdcRTSetScanFreqRspCb_SDK::ARI_CsiIdcRTSetScanFreqRspCb_SDK(AriSdk::ARI_CsiIdcRTSetScanFreqRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8E8C8](this, a2);
}

void AriSdk::ARI_CsiIdcRTSetScanFreqRspCb_SDK::~ARI_CsiIdcRTSetScanFreqRspCb_SDK(AriSdk::ARI_CsiIdcRTSetScanFreqRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIdcSetTxPowerLimitReq_SDK::ARI_CsiIdcSetTxPowerLimitReq_SDK(AriSdk::ARI_CsiIdcSetTxPowerLimitReq_SDK *this)
{
  return MEMORY[0x270F8E8D8](this);
}

void AriSdk::ARI_CsiIdcSetTxPowerLimitReq_SDK::~ARI_CsiIdcSetTxPowerLimitReq_SDK(AriSdk::ARI_CsiIdcSetTxPowerLimitReq_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIdcSetWifiStatusRspCb_SDK::unpack(AriSdk::ARI_CsiIdcSetWifiStatusRspCb_SDK *this)
{
  return MEMORY[0x270F8E8E8](this);
}

uint64_t AriSdk::ARI_CsiIdcSetWifiStatusRspCb_SDK::ARI_CsiIdcSetWifiStatusRspCb_SDK(AriSdk::ARI_CsiIdcSetWifiStatusRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8E8F0](this, a2);
}

void AriSdk::ARI_CsiIdcSetWifiStatusRspCb_SDK::~ARI_CsiIdcSetWifiStatusRspCb_SDK(AriSdk::ARI_CsiIdcSetWifiStatusRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiTraceProfileInitRspCb_SDK::unpack(AriSdk::ARI_CsiTraceProfileInitRspCb_SDK *this)
{
  return MEMORY[0x270F8E910](this);
}

uint64_t AriSdk::ARI_CsiTraceProfileInitRspCb_SDK::ARI_CsiTraceProfileInitRspCb_SDK(AriSdk::ARI_CsiTraceProfileInitRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8E918](this, a2);
}

void AriSdk::ARI_CsiTraceProfileInitRspCb_SDK::~ARI_CsiTraceProfileInitRspCb_SDK(AriSdk::ARI_CsiTraceProfileInitRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiTraceProfileSelectReq_SDK::ARI_CsiTraceProfileSelectReq_SDK(AriSdk::ARI_CsiTraceProfileSelectReq_SDK *this)
{
  return MEMORY[0x270F8E928](this);
}

void AriSdk::ARI_CsiTraceProfileSelectReq_SDK::~ARI_CsiTraceProfileSelectReq_SDK(AriSdk::ARI_CsiTraceProfileSelectReq_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiAwdsMetricSubSwitchReq_SDK::ARI_CsiAwdsMetricSubSwitchReq_SDK(AriSdk::ARI_CsiAwdsMetricSubSwitchReq_SDK *this)
{
  return MEMORY[0x270F8EBD8](this);
}

void AriSdk::ARI_CsiAwdsMetricSubSwitchReq_SDK::~ARI_CsiAwdsMetricSubSwitchReq_SDK(AriSdk::ARI_CsiAwdsMetricSubSwitchReq_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIceAccessoryStateRspCb_SDK::ARI_CsiIceAccessoryStateRspCb_SDK(AriSdk::ARI_CsiIceAccessoryStateRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8EC10](this, a2);
}

void AriSdk::ARI_CsiIceAccessoryStateRspCb_SDK::~ARI_CsiIceAccessoryStateRspCb_SDK(AriSdk::ARI_CsiIceAccessoryStateRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIceGetArtdSettingRspCb_SDK::unpack(AriSdk::ARI_CsiIceGetArtdSettingRspCb_SDK *this)
{
  return MEMORY[0x270F8EC38](this);
}

uint64_t AriSdk::ARI_CsiIceGetArtdSettingRspCb_SDK::ARI_CsiIceGetArtdSettingRspCb_SDK(AriSdk::ARI_CsiIceGetArtdSettingRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8EC40](this, a2);
}

void AriSdk::ARI_CsiIceGetArtdSettingRspCb_SDK::~ARI_CsiIceGetArtdSettingRspCb_SDK(AriSdk::ARI_CsiIceGetArtdSettingRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIceGetRxDiversityRspCb_SDK::unpack(AriSdk::ARI_CsiIceGetRxDiversityRspCb_SDK *this)
{
  return MEMORY[0x270F8EC50](this);
}

uint64_t AriSdk::ARI_CsiIceGetRxDiversityRspCb_SDK::ARI_CsiIceGetRxDiversityRspCb_SDK(AriSdk::ARI_CsiIceGetRxDiversityRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8EC58](this, a2);
}

void AriSdk::ARI_CsiIceGetRxDiversityRspCb_SDK::~ARI_CsiIceGetRxDiversityRspCb_SDK(AriSdk::ARI_CsiIceGetRxDiversityRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIcePowerSourceStateReq_SDK::ARI_CsiIcePowerSourceStateReq_SDK(AriSdk::ARI_CsiIcePowerSourceStateReq_SDK *this)
{
  return MEMORY[0x270F8EC68](this);
}

void AriSdk::ARI_CsiIcePowerSourceStateReq_SDK::~ARI_CsiIcePowerSourceStateReq_SDK(AriSdk::ARI_CsiIcePowerSourceStateReq_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiTraceProfilePacketsReq_SDK::ARI_CsiTraceProfilePacketsReq_SDK(AriSdk::ARI_CsiTraceProfilePacketsReq_SDK *this)
{
  return MEMORY[0x270F8EC78](this);
}

void AriSdk::ARI_CsiTraceProfilePacketsReq_SDK::~ARI_CsiTraceProfilePacketsReq_SDK(AriSdk::ARI_CsiTraceProfilePacketsReq_SDK *this)
{
}

uint64_t AriSdk::ARI_IBICallPsTransmitStateReq_SDK::ARI_IBICallPsTransmitStateReq_SDK(AriSdk::ARI_IBICallPsTransmitStateReq_SDK *this)
{
  return MEMORY[0x270F8ED70](this);
}

void AriSdk::ARI_IBICallPsTransmitStateReq_SDK::~ARI_IBICallPsTransmitStateReq_SDK(AriSdk::ARI_IBICallPsTransmitStateReq_SDK *this)
{
}

uint64_t AriSdk::ARI_IBISetDeviceRegionCodeReq_SDK::ARI_IBISetDeviceRegionCodeReq_SDK(AriSdk::ARI_IBISetDeviceRegionCodeReq_SDK *this)
{
  return MEMORY[0x270F8EE40](this);
}

void AriSdk::ARI_IBISetDeviceRegionCodeReq_SDK::~ARI_IBISetDeviceRegionCodeReq_SDK(AriSdk::ARI_IBISetDeviceRegionCodeReq_SDK *this)
{
}

uint64_t AriSdk::ARI_IBIStwSarBackoffTimeRspCb_SDK::ARI_IBIStwSarBackoffTimeRspCb_SDK(AriSdk::ARI_IBIStwSarBackoffTimeRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8EF48](this, a2);
}

void AriSdk::ARI_IBIStwSarBackoffTimeRspCb_SDK::~ARI_IBIStwSarBackoffTimeRspCb_SDK(AriSdk::ARI_IBIStwSarBackoffTimeRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiAwdsMetricSubTriggerInd_SDK::unpack(AriSdk::ARI_CsiAwdsMetricSubTriggerInd_SDK *this)
{
  return MEMORY[0x270F8EF88](this);
}

uint64_t AriSdk::ARI_CsiAwdsMetricSubTriggerInd_SDK::ARI_CsiAwdsMetricSubTriggerInd_SDK(AriSdk::ARI_CsiAwdsMetricSubTriggerInd_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8EF90](this, a2);
}

void AriSdk::ARI_CsiAwdsMetricSubTriggerInd_SDK::~ARI_CsiAwdsMetricSubTriggerInd_SDK(AriSdk::ARI_CsiAwdsMetricSubTriggerInd_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIceGetManifestStatusReq_SDK::ARI_CsiIceGetManifestStatusReq_SDK(AriSdk::ARI_CsiIceGetManifestStatusReq_SDK *this)
{
  return MEMORY[0x270F8EFB8](this);
}

void AriSdk::ARI_CsiIceGetManifestStatusReq_SDK::~ARI_CsiIceGetManifestStatusReq_SDK(AriSdk::ARI_CsiIceGetManifestStatusReq_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIdcCellConfigEventIndCb_SDK::unpack(AriSdk::ARI_CsiIdcCellConfigEventIndCb_SDK *this)
{
  return MEMORY[0x270F8EFC8](this);
}

uint64_t AriSdk::ARI_CsiIdcCellConfigEventIndCb_SDK::ARI_CsiIdcCellConfigEventIndCb_SDK(AriSdk::ARI_CsiIdcCellConfigEventIndCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8EFD0](this, a2);
}

void AriSdk::ARI_CsiIdcCellConfigEventIndCb_SDK::~ARI_CsiIdcCellConfigEventIndCb_SDK(AriSdk::ARI_CsiIdcCellConfigEventIndCb_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIdcSetTxPowerLimitRspCb_SDK::unpack(AriSdk::ARI_CsiIdcSetTxPowerLimitRspCb_SDK *this)
{
  return MEMORY[0x270F8EFE0](this);
}

uint64_t AriSdk::ARI_CsiIdcSetTxPowerLimitRspCb_SDK::ARI_CsiIdcSetTxPowerLimitRspCb_SDK(AriSdk::ARI_CsiIdcSetTxPowerLimitRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8EFE8](this, a2);
}

void AriSdk::ARI_CsiIdcSetTxPowerLimitRspCb_SDK::~ARI_CsiIdcSetTxPowerLimitRspCb_SDK(AriSdk::ARI_CsiIdcSetTxPowerLimitRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiTraceProfileSelectRspCb_SDK::unpack(AriSdk::ARI_CsiTraceProfileSelectRspCb_SDK *this)
{
  return MEMORY[0x270F8F008](this);
}

uint64_t AriSdk::ARI_CsiTraceProfileSelectRspCb_SDK::ARI_CsiTraceProfileSelectRspCb_SDK(AriSdk::ARI_CsiTraceProfileSelectRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8F010](this, a2);
}

void AriSdk::ARI_CsiTraceProfileSelectRspCb_SDK::~ARI_CsiTraceProfileSelectRspCb_SDK(AriSdk::ARI_CsiTraceProfileSelectRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_IBIMsAccCurrentFreqInfoReq_SDK::ARI_IBIMsAccCurrentFreqInfoReq_SDK(AriSdk::ARI_IBIMsAccCurrentFreqInfoReq_SDK *this)
{
  return MEMORY[0x270F8F120](this);
}

void AriSdk::ARI_IBIMsAccCurrentFreqInfoReq_SDK::~ARI_IBIMsAccCurrentFreqInfoReq_SDK(AriSdk::ARI_IBIMsAccCurrentFreqInfoReq_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiAwdsMetricSubSwitchRspCb_SDK::unpack(AriSdk::ARI_CsiAwdsMetricSubSwitchRspCb_SDK *this)
{
  return MEMORY[0x270F8F220](this);
}

uint64_t AriSdk::ARI_CsiAwdsMetricSubSwitchRspCb_SDK::ARI_CsiAwdsMetricSubSwitchRspCb_SDK(AriSdk::ARI_CsiAwdsMetricSubSwitchRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8F228](this, a2);
}

void AriSdk::ARI_CsiAwdsMetricSubSwitchRspCb_SDK::~ARI_CsiAwdsMetricSubSwitchRspCb_SDK(AriSdk::ARI_CsiAwdsMetricSubSwitchRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK::ARI_CsiIceAccessoryStateArtdReq_SDK(AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK *this)
{
  return MEMORY[0x270F8F260](this);
}

void AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK::~ARI_CsiIceAccessoryStateArtdReq_SDK(AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK::ARI_CsiIceBBTxStateIndEnableReq_SDK(AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK *this)
{
  return MEMORY[0x270F8F280](this);
}

void AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK::~ARI_CsiIceBBTxStateIndEnableReq_SDK(AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIceGetManifestStatusResp_SDK::unpack(AriSdk::ARI_CsiIceGetManifestStatusResp_SDK *this)
{
  return MEMORY[0x270F8F290](this);
}

uint64_t AriSdk::ARI_CsiIceGetManifestStatusResp_SDK::ARI_CsiIceGetManifestStatusResp_SDK(AriSdk::ARI_CsiIceGetManifestStatusResp_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8F298](this, a2);
}

void AriSdk::ARI_CsiIceGetManifestStatusResp_SDK::~ARI_CsiIceGetManifestStatusResp_SDK(AriSdk::ARI_CsiIceGetManifestStatusResp_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIcePowerSourceStateRspCb_SDK::ARI_CsiIcePowerSourceStateRspCb_SDK(AriSdk::ARI_CsiIcePowerSourceStateRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8F2A8](this, a2);
}

void AriSdk::ARI_CsiIcePowerSourceStateRspCb_SDK::~ARI_CsiIcePowerSourceStateRspCb_SDK(AriSdk::ARI_CsiIcePowerSourceStateRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiSecGetRFSelfTestNonceReq_SDK::ARI_CsiSecGetRFSelfTestNonceReq_SDK(AriSdk::ARI_CsiSecGetRFSelfTestNonceReq_SDK *this)
{
  return MEMORY[0x270F8F2B8](this);
}

void AriSdk::ARI_CsiSecGetRFSelfTestNonceReq_SDK::~ARI_CsiSecGetRFSelfTestNonceReq_SDK(AriSdk::ARI_CsiSecGetRFSelfTestNonceReq_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiTraceProfilePacketsRspCb_SDK::unpack(AriSdk::ARI_CsiTraceProfilePacketsRspCb_SDK *this)
{
  return MEMORY[0x270F8F2C8](this);
}

uint64_t AriSdk::ARI_CsiTraceProfilePacketsRspCb_SDK::ARI_CsiTraceProfilePacketsRspCb_SDK(AriSdk::ARI_CsiTraceProfilePacketsRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8F2D0](this, a2);
}

void AriSdk::ARI_CsiTraceProfilePacketsRspCb_SDK::~ARI_CsiTraceProfilePacketsRspCb_SDK(AriSdk::ARI_CsiTraceProfilePacketsRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_IBICallPsBreadButterModeReq_SDK::ARI_IBICallPsBreadButterModeReq_SDK(AriSdk::ARI_IBICallPsBreadButterModeReq_SDK *this)
{
  return MEMORY[0x270F8F308](this);
}

void AriSdk::ARI_IBICallPsBreadButterModeReq_SDK::~ARI_IBICallPsBreadButterModeReq_SDK(AriSdk::ARI_IBICallPsBreadButterModeReq_SDK *this)
{
}

uint64_t AriSdk::ARI_IBICallPsTransmitStateIndCb_SDK::unpack(AriSdk::ARI_IBICallPsTransmitStateIndCb_SDK *this)
{
  return MEMORY[0x270F8F358](this);
}

uint64_t AriSdk::ARI_IBICallPsTransmitStateIndCb_SDK::ARI_IBICallPsTransmitStateIndCb_SDK(AriSdk::ARI_IBICallPsTransmitStateIndCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8F360](this, a2);
}

void AriSdk::ARI_IBICallPsTransmitStateIndCb_SDK::~ARI_IBICallPsTransmitStateIndCb_SDK(AriSdk::ARI_IBICallPsTransmitStateIndCb_SDK *this)
{
}

uint64_t AriSdk::ARI_IBICallPsTransmitStateRspCb_SDK::ARI_IBICallPsTransmitStateRspCb_SDK(AriSdk::ARI_IBICallPsTransmitStateRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8F370](this, a2);
}

void AriSdk::ARI_IBICallPsTransmitStateRspCb_SDK::~ARI_IBICallPsTransmitStateRspCb_SDK(AriSdk::ARI_IBICallPsTransmitStateRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_IBISetDeviceRegionCodeRspCb_SDK::ARI_IBISetDeviceRegionCodeRspCb_SDK(AriSdk::ARI_IBISetDeviceRegionCodeRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8F468](this, a2);
}

void AriSdk::ARI_IBISetDeviceRegionCodeRspCb_SDK::~ARI_IBISetDeviceRegionCodeRspCb_SDK(AriSdk::ARI_IBISetDeviceRegionCodeRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_IBICpsCellularPowerReportInd_SDK::unpack(AriSdk::ARI_IBICpsCellularPowerReportInd_SDK *this)
{
  return MEMORY[0x270F8F600](this);
}

uint64_t AriSdk::ARI_IBICpsCellularPowerReportInd_SDK::ARI_IBICpsCellularPowerReportInd_SDK(AriSdk::ARI_IBICpsCellularPowerReportInd_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8F608](this, a2);
}

void AriSdk::ARI_IBICpsCellularPowerReportInd_SDK::~ARI_IBICpsCellularPowerReportInd_SDK(AriSdk::ARI_IBICpsCellularPowerReportInd_SDK *this)
{
}

uint64_t AriSdk::ARI_IBIMsAccCurrentFreqInfoIndCb_SDK::unpack(AriSdk::ARI_IBIMsAccCurrentFreqInfoIndCb_SDK *this)
{
  return MEMORY[0x270F8F638](this);
}

uint64_t AriSdk::ARI_IBIMsAccCurrentFreqInfoIndCb_SDK::ARI_IBIMsAccCurrentFreqInfoIndCb_SDK(AriSdk::ARI_IBIMsAccCurrentFreqInfoIndCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8F640](this, a2);
}

void AriSdk::ARI_IBIMsAccCurrentFreqInfoIndCb_SDK::~ARI_IBIMsAccCurrentFreqInfoIndCb_SDK(AriSdk::ARI_IBIMsAccCurrentFreqInfoIndCb_SDK *this)
{
}

uint64_t AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK::unpack(AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK *this)
{
  return MEMORY[0x270F8F650](this);
}

uint64_t AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK(AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8F658](this, a2);
}

void AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK::~ARI_IBIMsAccCurrentFreqInfoRspCb_SDK(AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiBspGetCalibrationStatusReq_SDK::ARI_CsiBspGetCalibrationStatusReq_SDK(AriSdk::ARI_CsiBspGetCalibrationStatusReq_SDK *this)
{
  return MEMORY[0x270F8F768](this);
}

void AriSdk::ARI_CsiBspGetCalibrationStatusReq_SDK::~ARI_CsiBspGetCalibrationStatusReq_SDK(AriSdk::ARI_CsiBspGetCalibrationStatusReq_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIceAccessoryStateArtdRspCb_SDK::ARI_CsiIceAccessoryStateArtdRspCb_SDK(AriSdk::ARI_CsiIceAccessoryStateArtdRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8F790](this, a2);
}

void AriSdk::ARI_CsiIceAccessoryStateArtdRspCb_SDK::~ARI_CsiIceAccessoryStateArtdRspCb_SDK(AriSdk::ARI_CsiIceAccessoryStateArtdRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIceBBTxStateIndEnableRspCb_SDK::ARI_CsiIceBBTxStateIndEnableRspCb_SDK(AriSdk::ARI_CsiIceBBTxStateIndEnableRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8F7A0](this, a2);
}

void AriSdk::ARI_CsiIceBBTxStateIndEnableRspCb_SDK::~ARI_CsiIceBBTxStateIndEnableRspCb_SDK(AriSdk::ARI_CsiIceBBTxStateIndEnableRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiSecGetRFSelfTestNonceRspCb_SDK::unpack(AriSdk::ARI_CsiSecGetRFSelfTestNonceRspCb_SDK *this)
{
  return MEMORY[0x270F8F7B0](this);
}

uint64_t AriSdk::ARI_CsiSecGetRFSelfTestNonceRspCb_SDK::ARI_CsiSecGetRFSelfTestNonceRspCb_SDK(AriSdk::ARI_CsiSecGetRFSelfTestNonceRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8F7B8](this, a2);
}

void AriSdk::ARI_CsiSecGetRFSelfTestNonceRspCb_SDK::~ARI_CsiSecGetRFSelfTestNonceRspCb_SDK(AriSdk::ARI_CsiSecGetRFSelfTestNonceRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_IBICallPsBreadButterModeRspCb_SDK::ARI_IBICallPsBreadButterModeRspCb_SDK(AriSdk::ARI_IBICallPsBreadButterModeRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8F808](this, a2);
}

void AriSdk::ARI_IBICallPsBreadButterModeRspCb_SDK::~ARI_IBICallPsBreadButterModeRspCb_SDK(AriSdk::ARI_IBICallPsBreadButterModeRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_IBIRfSetAntennaPortMappingReq_SDK::ARI_IBIRfSetAntennaPortMappingReq_SDK(AriSdk::ARI_IBIRfSetAntennaPortMappingReq_SDK *this)
{
  return MEMORY[0x270F8F970](this);
}

void AriSdk::ARI_IBIRfSetAntennaPortMappingReq_SDK::~ARI_IBIRfSetAntennaPortMappingReq_SDK(AriSdk::ARI_IBIRfSetAntennaPortMappingReq_SDK *this)
{
}

uint64_t AriSdk::ARI_IBIRfSetAntennaPortMappingResp_SDK::unpack(AriSdk::ARI_IBIRfSetAntennaPortMappingResp_SDK *this)
{
  return MEMORY[0x270F8FB30](this);
}

uint64_t AriSdk::ARI_IBIRfSetAntennaPortMappingResp_SDK::ARI_IBIRfSetAntennaPortMappingResp_SDK(AriSdk::ARI_IBIRfSetAntennaPortMappingResp_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8FB38](this, a2);
}

void AriSdk::ARI_IBIRfSetAntennaPortMappingResp_SDK::~ARI_IBIRfSetAntennaPortMappingResp_SDK(AriSdk::ARI_IBIRfSetAntennaPortMappingResp_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiBspGetCalibrationStatusRspCb_SDK::unpack(AriSdk::ARI_CsiBspGetCalibrationStatusRspCb_SDK *this)
{
  return MEMORY[0x270F8FB70](this);
}

uint64_t AriSdk::ARI_CsiBspGetCalibrationStatusRspCb_SDK::ARI_CsiBspGetCalibrationStatusRspCb_SDK(AriSdk::ARI_CsiBspGetCalibrationStatusRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8FB78](this, a2);
}

void AriSdk::ARI_CsiBspGetCalibrationStatusRspCb_SDK::~ARI_CsiBspGetCalibrationStatusRspCb_SDK(AriSdk::ARI_CsiBspGetCalibrationStatusRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIdcRTGetLinkQualityReportReq_SDK::ARI_CsiIdcRTGetLinkQualityReportReq_SDK(AriSdk::ARI_CsiIdcRTGetLinkQualityReportReq_SDK *this)
{
  return MEMORY[0x270F8FB98](this);
}

void AriSdk::ARI_CsiIdcRTGetLinkQualityReportReq_SDK::~ARI_CsiIdcRTGetLinkQualityReportReq_SDK(AriSdk::ARI_CsiIdcRTGetLinkQualityReportReq_SDK *this)
{
}

uint64_t AriSdk::ARI_IBICallPsSignificantLocationReq_SDK::ARI_IBICallPsSignificantLocationReq_SDK(AriSdk::ARI_IBICallPsSignificantLocationReq_SDK *this)
{
  return MEMORY[0x270F8FC20](this);
}

void AriSdk::ARI_IBICallPsSignificantLocationReq_SDK::~ARI_IBICallPsSignificantLocationReq_SDK(AriSdk::ARI_IBICallPsSignificantLocationReq_SDK *this)
{
}

uint64_t AriSdk::ARI_IBICpsMaxCellularPowerForRatInd_SDK::unpack(AriSdk::ARI_IBICpsMaxCellularPowerForRatInd_SDK *this)
{
  return MEMORY[0x270F8FC30](this);
}

uint64_t AriSdk::ARI_IBICpsMaxCellularPowerForRatInd_SDK::ARI_IBICpsMaxCellularPowerForRatInd_SDK(AriSdk::ARI_IBICpsMaxCellularPowerForRatInd_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8FC38](this, a2);
}

void AriSdk::ARI_IBICpsMaxCellularPowerForRatInd_SDK::~ARI_IBICpsMaxCellularPowerForRatInd_SDK(AriSdk::ARI_IBICpsMaxCellularPowerForRatInd_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIceSecSendRFSelfTestTicketReq_SDK::ARI_CsiIceSecSendRFSelfTestTicketReq_SDK(AriSdk::ARI_CsiIceSecSendRFSelfTestTicketReq_SDK *this)
{
  return MEMORY[0x270F8FD38](this);
}

void AriSdk::ARI_CsiIceSecSendRFSelfTestTicketReq_SDK::~ARI_CsiIceSecSendRFSelfTestTicketReq_SDK(AriSdk::ARI_CsiIceSecSendRFSelfTestTicketReq_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIdcRTGetLinkQualityReportRspCb_SDK::unpack(AriSdk::ARI_CsiIdcRTGetLinkQualityReportRspCb_SDK *this)
{
  return MEMORY[0x270F8FE18](this);
}

uint64_t AriSdk::ARI_CsiIdcRTGetLinkQualityReportRspCb_SDK::ARI_CsiIdcRTGetLinkQualityReportRspCb_SDK(AriSdk::ARI_CsiIdcRTGetLinkQualityReportRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8FE20](this, a2);
}

void AriSdk::ARI_CsiIdcRTGetLinkQualityReportRspCb_SDK::~ARI_CsiIdcRTGetLinkQualityReportRspCb_SDK(AriSdk::ARI_CsiIdcRTGetLinkQualityReportRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIdcRTSetLinkQualityReportRspCb_SDK::unpack(AriSdk::ARI_CsiIdcRTSetLinkQualityReportRspCb_SDK *this)
{
  return MEMORY[0x270F8FE30](this);
}

uint64_t AriSdk::ARI_CsiIdcRTSetLinkQualityReportRspCb_SDK::ARI_CsiIdcRTSetLinkQualityReportRspCb_SDK(AriSdk::ARI_CsiIdcRTSetLinkQualityReportRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8FE38](this, a2);
}

void AriSdk::ARI_CsiIdcRTSetLinkQualityReportRspCb_SDK::~ARI_CsiIdcRTSetLinkQualityReportRspCb_SDK(AriSdk::ARI_CsiIdcRTSetLinkQualityReportRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_IBICallPsSignificantLocationRspCb_SDK::ARI_IBICallPsSignificantLocationRspCb_SDK(AriSdk::ARI_IBICallPsSignificantLocationRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8FE88](this, a2);
}

void AriSdk::ARI_IBICallPsSignificantLocationRspCb_SDK::~ARI_IBICallPsSignificantLocationRspCb_SDK(AriSdk::ARI_IBICallPsSignificantLocationRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIceSecSendRFSelfTestTicketRspCb_SDK::unpack(AriSdk::ARI_CsiIceSecSendRFSelfTestTicketRspCb_SDK *this)
{
  return MEMORY[0x270F8FEE0](this);
}

uint64_t AriSdk::ARI_CsiIceSecSendRFSelfTestTicketRspCb_SDK::ARI_CsiIceSecSendRFSelfTestTicketRspCb_SDK(AriSdk::ARI_CsiIceSecSendRFSelfTestTicketRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F8FEE8](this, a2);
}

void AriSdk::ARI_CsiIceSecSendRFSelfTestTicketRspCb_SDK::~ARI_CsiIceSecSendRFSelfTestTicketRspCb_SDK(AriSdk::ARI_CsiIceSecSendRFSelfTestTicketRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_IBICallPsLoopbackTestModeConfigRsp_SDK::ARI_IBICallPsLoopbackTestModeConfigRsp_SDK(AriSdk::ARI_IBICallPsLoopbackTestModeConfigRsp_SDK *this)
{
  return MEMORY[0x270F8FF30](this);
}

void AriSdk::ARI_IBICallPsLoopbackTestModeConfigRsp_SDK::~ARI_IBICallPsLoopbackTestModeConfigRsp_SDK(AriSdk::ARI_IBICallPsLoopbackTestModeConfigRsp_SDK *this)
{
}

uint64_t AriSdk::ARI_IBICallPsLoopbackTestModeStatusRsp_SDK::ARI_IBICallPsLoopbackTestModeStatusRsp_SDK(AriSdk::ARI_IBICallPsLoopbackTestModeStatusRsp_SDK *this)
{
  return MEMORY[0x270F8FF40](this);
}

void AriSdk::ARI_IBICallPsLoopbackTestModeStatusRsp_SDK::~ARI_IBICallPsLoopbackTestModeStatusRsp_SDK(AriSdk::ARI_IBICallPsLoopbackTestModeStatusRsp_SDK *this)
{
}

uint64_t AriSdk::ARI_IBICallPsLoopbackTestModeConfigIndCb_SDK::unpack(AriSdk::ARI_IBICallPsLoopbackTestModeConfigIndCb_SDK *this)
{
  return MEMORY[0x270F90080](this);
}

uint64_t AriSdk::ARI_IBICallPsLoopbackTestModeConfigIndCb_SDK::ARI_IBICallPsLoopbackTestModeConfigIndCb_SDK(AriSdk::ARI_IBICallPsLoopbackTestModeConfigIndCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F90088](this, a2);
}

void AriSdk::ARI_IBICallPsLoopbackTestModeConfigIndCb_SDK::~ARI_IBICallPsLoopbackTestModeConfigIndCb_SDK(AriSdk::ARI_IBICallPsLoopbackTestModeConfigIndCb_SDK *this)
{
}

uint64_t AriSdk::ARI_IBICallPsLoopbackTestModeStatusIndCb_SDK::unpack(AriSdk::ARI_IBICallPsLoopbackTestModeStatusIndCb_SDK *this)
{
  return MEMORY[0x270F90098](this);
}

uint64_t AriSdk::ARI_IBICallPsLoopbackTestModeStatusIndCb_SDK::ARI_IBICallPsLoopbackTestModeStatusIndCb_SDK(AriSdk::ARI_IBICallPsLoopbackTestModeStatusIndCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F900A0](this, a2);
}

void AriSdk::ARI_IBICallPsLoopbackTestModeStatusIndCb_SDK::~ARI_IBICallPsLoopbackTestModeStatusIndCb_SDK(AriSdk::ARI_IBICallPsLoopbackTestModeStatusIndCb_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIdcRTSetLinkQualityReportConfigReq_SDK::ARI_CsiIdcRTSetLinkQualityReportConfigReq_SDK(AriSdk::ARI_CsiIdcRTSetLinkQualityReportConfigReq_SDK *this)
{
  return MEMORY[0x270F90120](this);
}

void AriSdk::ARI_CsiIdcRTSetLinkQualityReportConfigReq_SDK::~ARI_CsiIdcRTSetLinkQualityReportConfigReq_SDK(AriSdk::ARI_CsiIdcRTSetLinkQualityReportConfigReq_SDK *this)
{
}

uint64_t AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK::ARI_IBICpsConfigureCellularPowerReportReq_SDK(AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK *this)
{
  return MEMORY[0x270F90140](this);
}

void AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK::~ARI_IBICpsConfigureCellularPowerReportReq_SDK(AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK *this)
{
}

uint64_t AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK::ARI_IBICpsConfigureCellularPowerReportRsp_SDK(AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270F90150](this, a2);
}

void AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK::~ARI_IBICpsConfigureCellularPowerReportRsp_SDK(AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK *this)
{
}

uint64_t antenna::CommandDriver::convertModeToState()
{
  return MEMORY[0x270F91750]();
}

uint64_t antenna::CommandDriver::CommandDriver()
{
  return MEMORY[0x270F91758]();
}

uint64_t desense::CommandDriver::CommandDriver()
{
  return MEMORY[0x270F91760]();
}

uint64_t desense::asString()
{
  return MEMORY[0x270F91768]();
}

uint64_t awd::AppContext::getProperties(awd::AppContext *this)
{
  return MEMORY[0x270F91770](this);
}

uint64_t awd::AppContext::getAppID(awd::AppContext *this)
{
  return MEMORY[0x270F91778](this);
}

uint64_t awd::AppContext::operator()()
{
  return MEMORY[0x270F91780]();
}

{
  return MEMORY[0x270F91788]();
}

{
  return MEMORY[0x270F91790]();
}

{
  return MEMORY[0x270F91798]();
}

uint64_t awd::AwdCommandDriver::broadcastState_sync()
{
  return MEMORY[0x270F917A0]();
}

uint64_t awd::AwdCommandDriver::getName(awd::AwdCommandDriver *this)
{
  return MEMORY[0x270F917A8](this);
}

uint64_t ctu::LoggerCommonBase::getLogDomain(ctu::LoggerCommonBase *this)
{
  return MEMORY[0x270F978D8](this);
}

uint64_t ctu::cf::map_adapter::copyCFDataRef(ctu::cf::map_adapter *this, const __CFString *a2)
{
  return MEMORY[0x270F978E8](this, a2);
}

uint64_t ctu::cf::map_adapter::copyCFArrayRef(ctu::cf::map_adapter *this, const __CFString *a2)
{
  return MEMORY[0x270F978F0](this, a2);
}

uint64_t ctu::cf::map_adapter::copyCFDictionaryRef(ctu::cf::map_adapter *this, const __CFString *a2)
{
  return MEMORY[0x270F97900](this, a2);
}

uint64_t ctu::cf::map_adapter::getInt(ctu::cf::map_adapter *this, const __CFString *a2)
{
  return MEMORY[0x270F97908](this, a2);
}

uint64_t ctu::cf::map_adapter::getBool(ctu::cf::map_adapter *this, const __CFString *a2)
{
  return MEMORY[0x270F97910](this, a2);
}

uint64_t ctu::cf::map_adapter::getDouble(ctu::cf::map_adapter *this, const __CFString *a2, double a3)
{
  return MEMORY[0x270F97918](this, a2, a3);
}

uint64_t ctu::LogServer::getConfig(ctu::LogServer *this)
{
  return MEMORY[0x270F97938](this);
}

uint64_t ice::Client::getClientId()
{
  return MEMORY[0x270F920C8]();
}

uint64_t coex::CommandDriver::getName(coex::CommandDriver *this)
{
  return MEMORY[0x270F917B0](this);
}

uint64_t cpms::CommandDriver::getName(cpms::CommandDriver *this)
{
  return MEMORY[0x270F917B8](this);
}

uint64_t radio::CommandDriver::getName(radio::CommandDriver *this)
{
  return MEMORY[0x270F917C0](this);
}

uint64_t radio::RFSCommandDriver::getName(radio::RFSCommandDriver *this)
{
  return MEMORY[0x270F917C8](this);
}

uint64_t radio::OpMode::convertMode()
{
  return MEMORY[0x270F917D0]();
}

uint64_t radio::OpMode::convertMode(radio::OpMode *this)
{
  return MEMORY[0x270F917D8](this);
}

uint64_t radio::OpMode::modeToString()
{
  return MEMORY[0x270F917E0]();
}

uint64_t AriSdk::MsgBase::getGMID(AriSdk::MsgBase *this)
{
  return MEMORY[0x270F903E8](this);
}

uint64_t antenna::CommandDriver::getName(antenna::CommandDriver *this)
{
  return MEMORY[0x270F917E8](this);
}

uint64_t desense::CommandDriver::getName(desense::CommandDriver *this)
{
  return MEMORY[0x270F917F0](this);
}

std::string *__cdecl std::locale::name(std::string *__return_ptr retstr, const std::locale *this)
{
  return (std::string *)MEMORY[0x270F982D8](retstr, this);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x270F982E8](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x270F982F8](this);
}

uint64_t ice::SendMsgBaseProxy::callback()
{
  return MEMORY[0x270F920E0]();
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x270F98330](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x270F983C8](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::runtime_error *a2)
{
  return (std::runtime_error *)MEMORY[0x270F983D8](this, a2);
}

void std::runtime_error::~runtime_error(std::runtime_error *this)
{
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x270F98428](this);
}

std::regex_error *__cdecl std::regex_error::regex_error(std::regex_error *this, std::regex_constants::error_type __ecode)
{
  return (std::regex_error *)MEMORY[0x270F98440](this, *(void *)&__ecode);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x270F98458](__n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F984A0](this, __s, __n);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F984E8](this, __pos, __s, __n);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

uint64_t std::filebuf::open()
{
  return MEMORY[0x270F98638]();
}

uint64_t std::filebuf::close()
{
  return MEMORY[0x270F98640]();
}

uint64_t std::filebuf::basic_filebuf()
{
  return MEMORY[0x270F98650]();
}

uint64_t std::filebuf::~filebuf()
{
  return MEMORY[0x270F98658]();
}

uint64_t std::istream::peek()
{
  return MEMORY[0x270F98670]();
}

uint64_t std::istream::read()
{
  return MEMORY[0x270F98678]();
}

uint64_t std::istream::seekg()
{
  return MEMORY[0x270F98690]();
}

uint64_t std::istream::tellg()
{
  return MEMORY[0x270F98698]();
}

uint64_t std::istream::sentry::sentry()
{
  return MEMORY[0x270F986B0]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x270F986D0]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x270F98758]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x270F98760]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x270F98770]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x270F987A8]();
}

{
  return MEMORY[0x270F987B8]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x270F98870]();
}

std::regex_traits<char>::char_class_type std::__get_classname(const char *__s, BOOL __icase)
{
  return MEMORY[0x270F98890](__s, __icase);
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x270F988A8]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x270F988B0]();
}

void std::condition_variable::notify_all(std::condition_variable *this)
{
}

void std::condition_variable::__do_timed_wait(std::condition_variable *this, std::unique_lock<std::mutex> *__lk, std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> a3)
{
}

void std::condition_variable::~condition_variable(std::condition_variable *this)
{
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x270F989E8](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

std::string *__cdecl std::__get_collation_name(std::string *__return_ptr retstr, const char *__s)
{
  return (std::string *)MEMORY[0x270F98A00](retstr, __s);
}

uint64_t std::stol(const std::string *__str, size_t *__idx, int __base)
{
  return MEMORY[0x270F98B80](__str, __idx, *(void *)&__base);
}

void std::mutex::lock(std::mutex *this)
{
}

void std::mutex::unlock(std::mutex *this)
{
}

void std::mutex::~mutex(std::mutex *this)
{
}

std::chrono::steady_clock::time_point std::chrono::steady_clock::now(void)
{
  return (std::chrono::steady_clock::time_point)MEMORY[0x270F98C18]();
}

std::chrono::system_clock::time_point std::chrono::system_clock::now(void)
{
  return (std::chrono::system_clock::time_point)MEMORY[0x270F98C28]();
}

std::locale *__cdecl std::locale::locale(std::locale *this, const std::locale *a2)
{
  return (std::locale *)MEMORY[0x270F98C70](this, a2);
}

std::locale *__cdecl std::locale::locale(std::locale *this)
{
  return (std::locale *)MEMORY[0x270F98C78](this);
}

void std::locale::~locale(std::locale *this)
{
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x270F98DE8]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x270F98E08](retstr, *(void *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x270F98E10](retstr, *(void *)&__val);
}

void std::exception::~exception(std::exception *this)
{
}

void std::terminate(void)
{
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x270F98EC0](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x270ED7DA0](lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x270F98ED8](a1);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_guard_abort(__guard *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x270F98F10](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_rethrow(void)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

int *__error(void)
{
  return (int *)MEMORY[0x270ED7DC0]();
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x270ED7E28](*(void *)&a1, a2);
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  return MEMORY[0x270ED7F08](*(void *)&a1);
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void bzero(void *a1, size_t a2)
{
}

int close(int a1)
{
  return MEMORY[0x270ED8F18](*(void *)&a1);
}

int closedir(DIR *a1)
{
  return MEMORY[0x270ED8F30](a1);
}

double difftime(time_t a1, time_t a2)
{
  MEMORY[0x270ED9180](a1, a2);
  return result;
}

void dispatch_activate(dispatch_object_t object)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_async_and_wait(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
}

void dispatch_barrier_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x270ED9318](identifier, flags);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x270ED9340]();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x270ED9460](label, attr);
}

void dispatch_release(dispatch_object_t object)
{
}

void dispatch_retain(dispatch_object_t object)
{
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x270ED9510](type, handle, mask, queue);
}

void dispatch_source_set_cancel_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_workloop_t dispatch_workloop_create(const char *label)
{
  return (dispatch_workloop_t)MEMORY[0x270ED95C8](label);
}

int ffsctl(int a1, unint64_t a2, void *a3, unsigned int a4)
{
  return MEMORY[0x270ED9940](*(void *)&a1, a2, a3, *(void *)&a4);
}

void free(void *a1)
{
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x270ED9D98](a1, a2);
}

tm *__cdecl localtime(const time_t *a1)
{
  return (tm *)MEMORY[0x270EDA098](a1);
}

tm *__cdecl localtime_r(const time_t *a1, tm *a2)
{
  return (tm *)MEMORY[0x270EDA0A0](a1, a2);
}

int lstat(const char *a1, stat *a2)
{
  return MEMORY[0x270EDA120](a1, a2);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x270EDA458](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x270EDA468](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x270EDA498](__b, *(void *)&__c, __len);
}

int mkdir(const char *a1, mode_t a2)
{
  return MEMORY[0x270EDA518](a1, a2);
}

time_t mktime(tm *a1)
{
  return MEMORY[0x270EDA588](a1);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x270EDA828](a1, *(void *)&a2);
}

DIR *__cdecl opendir(const char *a1)
{
  return (DIR *)MEMORY[0x270EDA858](a1);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x270EDA9A0](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x270EDA9D0](oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x270EDAF60](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x270EDAF70](a1);
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x270EDB120](*(void *)&a1, a2, a3);
}

dirent *__cdecl readdir(DIR *a1)
{
  return (dirent *)MEMORY[0x270EDB128](a1);
}

BOOL remove(const std::__fs::filesystem::path *__p, std::error_code *__ec)
{
  return MEMORY[0x270EDB1E8](__p, __ec);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x270EDB510](__str, __size, __format);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x270EDB568](a1, a2);
}

int strcasecmp(const char *a1, const char *a2)
{
  return MEMORY[0x270EDB590](a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x270EDB5B0](__s1, __s2);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x270EDB5D8](*(void *)&__errnum);
}

size_t strftime(char *a1, size_t a2, const char *a3, const tm *a4)
{
  return MEMORY[0x270EDB5F0](a1, a2, a3, a4);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x270EDB610](__s);
}

char *__cdecl strptime(const char *a1, const char *a2, tm *a3)
{
  return (char *)MEMORY[0x270EDB670](a1, a2, a3);
}

time_t time(time_t *a1)
{
  return MEMORY[0x270EDB930](a1);
}

int unlink(const char *a1)
{
  return MEMORY[0x270EDB9A8](a1);
}

int usleep(useconds_t a1)
{
  return MEMORY[0x270EDB9E8](*(void *)&a1);
}

void xpc_array_append_value(xpc_object_t xarray, xpc_object_t value)
{
}

xpc_object_t xpc_array_create(xpc_object_t *objects, size_t count)
{
  return (xpc_object_t)MEMORY[0x270EDBD18](objects, count);
}

size_t xpc_array_get_count(xpc_object_t xarray)
{
  return MEMORY[0x270EDBD38](xarray);
}

xpc_object_t xpc_BOOL_create(BOOL value)
{
  return (xpc_object_t)MEMORY[0x270EDBDD8](value);
}

char *__cdecl xpc_copy_description(xpc_object_t object)
{
  return (char *)MEMORY[0x270EDBF40](object);
}

xpc_object_t xpc_data_create(const void *bytes, size_t length)
{
  return (xpc_object_t)MEMORY[0x270EDBF90](bytes, length);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x270EDC008](keys, values, count);
}

xpc_object_t xpc_dictionary_get_value(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x270EDC0C0](xdict, key);
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x270EDC200](object);
}

xpc_object_t xpc_int64_create(int64_t value)
{
  return (xpc_object_t)MEMORY[0x270EDC210](value);
}

xpc_object_t xpc_null_create(void)
{
  return (xpc_object_t)MEMORY[0x270EDC290]();
}

void xpc_release(xpc_object_t object)
{
}

xpc_object_t xpc_retain(xpc_object_t object)
{
  return (xpc_object_t)MEMORY[0x270EDC2B8](object);
}