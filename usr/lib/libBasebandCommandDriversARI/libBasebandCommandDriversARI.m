DIR *support::fs::readDir(const char *a1, uint64_t a2)
{
  DIR *result;
  DIR *v4;
  dirent *v5;
  dirent *v6;
  size_t d_namlen;
  unsigned char *v8;
  std::string *v9;
  long long v10;
  uint64_t v11;
  unsigned char __dst[24];

  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  result = opendir(a1);
  if (result)
  {
    v4 = result;
    v5 = readdir(result);
    if (v5)
    {
      v6 = v5;
      do
      {
        memset(__dst, 170, sizeof(__dst));
        d_namlen = v6->d_namlen;
        if (d_namlen >= 0x17)
        {
          if ((d_namlen | 7) == 0x17) {
            v11 = ((unsigned __int16)d_namlen & 0xFFF8) + 8;
          }
          else {
            v11 = d_namlen | 7;
          }
          v8 = operator new(v11 + 1);
          *(void *)&__dst[8] = d_namlen;
          *(void *)&__dst[16] = v11 - 0x7FFFFFFFFFFFFFFFLL;
          *(void *)__dst = v8;
        }
        else
        {
          __dst[23] = v6->d_namlen;
          v8 = __dst;
          if (!d_namlen)
          {
            __dst[d_namlen] = 0;
            v9 = *(std::string **)(a2 + 8);
            if ((unint64_t)v9 < *(void *)(a2 + 16)) {
              goto LABEL_10;
            }
            goto LABEL_17;
          }
        }
        memmove(v8, v6->d_name, d_namlen);
        v8[d_namlen] = 0;
        v9 = *(std::string **)(a2 + 8);
        if ((unint64_t)v9 < *(void *)(a2 + 16))
        {
LABEL_10:
          if ((__dst[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)__dst, *(std::string::size_type *)&__dst[8]);
          }
          else
          {
            v10 = *(_OWORD *)__dst;
            v9->__r_.__value_.__r.__words[2] = *(void *)&__dst[16];
            *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
          }
          *(void *)(a2 + 8) = v9 + 1;
          *(void *)(a2 + 8) = v9 + 1;
          if ((__dst[23] & 0x80000000) == 0) {
            goto LABEL_6;
          }
LABEL_21:
          operator delete(*(void **)__dst);
          goto LABEL_6;
        }
LABEL_17:
        *(void *)(a2 + 8) = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a2, (uint64_t)__dst);
        if ((__dst[23] & 0x80000000) != 0) {
          goto LABEL_21;
        }
LABEL_6:
        v6 = readdir(v4);
      }
      while (v6);
    }
    return (DIR *)closedir(v4);
  }
  return result;
}

void sub_235DBA24C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  *(void *)(v15 + 8) = v16;
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void **std::vector<std::string>::~vector[abi:ne180100](void **a1)
{
  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0) {
          operator delete(*(v3 - 3));
        }
        v3 -= 3;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

BOOL support::fs::loadFile(uint64_t a1, uint64_t a2)
{
  __b[89] = *MEMORY[0x263EF8340];
  memset(__b, 170, 0x240uLL);
  std::ifstream::basic_ifstream(__b);
  if (!__b[17]
    || (std::istream::tellg(), std::istream::seekg(), std::istream::tellg(), unint64_t v3 = __b[88], std::istream::seekg(), !v3)
    || *(_DWORD *)((char *)&__b[4] + *(void *)(__b[0] - 24)))
  {
    BOOL v4 = 0;
    goto LABEL_5;
  }
  v7 = *(char **)a2;
  v6 = *(char **)(a2 + 8);
  unint64_t v8 = (unint64_t)&v6[-*(void *)a2];
  unint64_t v9 = v3 - v8;
  if (v3 <= v8)
  {
    if (v3 < v8) {
      *(void *)(a2 + 8) = &v7[v3];
    }
    goto LABEL_36;
  }
  uint64_t v10 = *(void *)(a2 + 16);
  if (v10 - (uint64_t)v6 < v9)
  {
    if ((v3 & 0x8000000000000000) != 0) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = v10 - (void)v7;
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= v3) {
      uint64_t v12 = v3;
    }
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v13 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v13 = v12;
    }
    v14 = (char *)operator new(v13);
    uint64_t v15 = &v14[v8];
    uint64_t v16 = &v14[v13];
    bzero(&v14[v8], v3 - v8);
    if (v6 == v7) {
      goto LABEL_34;
    }
    if (v8 >= 8 && (unint64_t)(v7 - v14) >= 0x20)
    {
      if (v8 < 0x20)
      {
        unint64_t v17 = 0;
        goto LABEL_26;
      }
      unint64_t v17 = v8 & 0xFFFFFFFFFFFFFFE0;
      v18 = v6 - 16;
      v19 = &v14[v6 - 16 - v7];
      unint64_t v20 = v8 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v21 = *(_OWORD *)v18;
        *((_OWORD *)v19 - 1) = *((_OWORD *)v18 - 1);
        *(_OWORD *)v19 = v21;
        v19 -= 32;
        v18 -= 32;
        v20 -= 32;
      }
      while (v20);
      if (v8 == v17) {
        goto LABEL_33;
      }
      if ((v8 & 0x18) != 0)
      {
LABEL_26:
        v15 -= v8 & 0xFFFFFFFFFFFFFFF8;
        v22 = &v6[-v17 - 8];
        v23 = (char *)(v22 - v7);
        unint64_t v24 = v17 - (v8 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v25 = *(void *)v22;
          v22 -= 8;
          *(void *)&v23[(void)v14] = v25;
          v23 -= 8;
          v24 += 8;
        }
        while (v24);
        v6 -= v8 & 0xFFFFFFFFFFFFFFF8;
        if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_33;
        }
        goto LABEL_31;
      }
      v15 -= v17;
      v6 -= v17;
    }
LABEL_31:
    v26 = v15 - 1;
    do
    {
      char v27 = *--v6;
      *v26-- = v27;
    }
    while (v6 != v7);
LABEL_33:
    v6 = v7;
    uint64_t v15 = v14;
LABEL_34:
    *(void *)a2 = v15;
    *(void *)(a2 + 8) = &v14[v3];
    *(void *)(a2 + 16) = v16;
    if (v6) {
      operator delete(v6);
    }
    goto LABEL_36;
  }
  bzero(*(void **)(a2 + 8), v3 - v8);
  *(void *)(a2 + 8) = &v6[v9];
LABEL_36:
  std::istream::read();
  BOOL v4 = __b[1] == (int)v3;
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)__b + *(void *)(__b[0] - 24)), *(_DWORD *)((char *)&__b[4] + *(void *)(__b[0] - 24)) | 4);
  }
LABEL_5:
  __b[0] = *MEMORY[0x263F8C2A8];
  *(uint64_t *)((char *)__b + *(void *)(__b[0] - 24)) = *(void *)(MEMORY[0x263F8C2A8] + 24);
  MEMORY[0x237DF6EF0](&__b[2]);
  std::istream::~istream();
  MEMORY[0x237DF7120](&__b[53]);
  return v4;
}

void sub_235DBA688(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ifstream::~ifstream((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::ifstream::basic_ifstream(uint64_t *a1)
{
  uint64_t v2 = MEMORY[0x263F8C308] + 64;
  a1[53] = MEMORY[0x263F8C308] + 64;
  unint64_t v3 = a1 + 2;
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2A8] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x263F8C2A8] + 8);
  *a1 = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = v4;
  a1[1] = 0;
  v6 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v6, a1 + 2);
  uint64_t v7 = MEMORY[0x263F8C308] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *a1 = v7;
  a1[53] = v2;
  MEMORY[0x237DF6EE0](v3);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 4);
  }
  return a1;
}

void sub_235DBA834(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x237DF7120](v1);
  _Unwind_Resume(a1);
}

void *std::ifstream::~ifstream(void *a1)
{
  uint64_t v2 = MEMORY[0x263F8C2A8];
  uint64_t v3 = *MEMORY[0x263F8C2A8];
  *a1 = *MEMORY[0x263F8C2A8];
  *(void *)((char *)a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  MEMORY[0x237DF6EF0](a1 + 2);
  std::istream::~istream();
  MEMORY[0x237DF7120](a1 + 53);
  return a1;
}

void std::basic_regex<char,std::regex_traits<char>>::~basic_regex(std::locale *this)
{
  uint64_t v1 = this;
  locale = (std::__shared_weak_count *)this[6].__locale_;
  if (locale && !atomic_fetch_add(&locale->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
    std::__shared_weak_count::__release_weak(locale);
    this = v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  std::locale::~locale(this);
}

BOOL support::fs::createDir(const char *a1, mode_t a2, int a3)
{
  uint64_t v5 = a1;
  v6.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v6.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v29.st_blksize = v6;
  *(timespec *)v29.st_qspare = v6;
  v29.st_birthtimespec = v6;
  *(timespec *)&v29.st_size = v6;
  v29.st_mtimespec = v6;
  v29.st_ctimespec = v6;
  *(timespec *)&v29.st_uid = v6;
  v29.st_atimespec = v6;
  *(timespec *)&v29.st_dev = v6;
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  if (!stat(a1, &v29)) {
    return 1;
  }
  if (!a3)
  {
    if (v5[23] >= 0) {
      long long v21 = v5;
    }
    else {
      long long v21 = *(const char **)v5;
    }
    return mkdir(v21, a2) == 0;
  }
  v27[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v28 = 0x1AAAAAAAAAAAAAALL;
  v27[0] = (void *)0xAAAAAAAAAAAA002FLL;
  memset(&__p[32], 170, 24);
  ctu::tokenize();
  memset(__p, 0, 24);
  if (v5[23] >= 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = *(const char **)v5;
  }
  if (*v7 == 47)
  {
    *(_OWORD *)__p = *(_OWORD *)v27;
    *(void *)&__p[16] = v28;
  }
  uint64_t v8 = *(void *)&__p[32];
  if (*(void *)&__p[40] != *(void *)&__p[32])
  {
    unint64_t v9 = 0;
    unsigned int v10 = 1;
    while (1)
    {
      if (v10 != 1)
      {
        if (v28 >= 0) {
          unint64_t v11 = v27;
        }
        else {
          unint64_t v11 = (void **)v27[0];
        }
        if (v28 >= 0) {
          std::string::size_type v12 = HIBYTE(v28);
        }
        else {
          std::string::size_type v12 = (std::string::size_type)v27[1];
        }
        std::string::append((std::string *)__p, (const std::string::value_type *)v11, v12);
        uint64_t v8 = *(void *)&__p[32];
      }
      uint64_t v13 = v8 + 24 * v9;
      int v14 = *(char *)(v13 + 23);
      uint64_t v15 = v14 >= 0 ? (const std::string::value_type *)v13 : *(const std::string::value_type **)v13;
      std::string::size_type v16 = v14 >= 0 ? *(unsigned __int8 *)(v13 + 23) : *(void *)(v13 + 8);
      std::string::append((std::string *)__p, v15, v16);
      v17.tv_sec = 0xAAAAAAAAAAAAAAAALL;
      v17.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
      *(timespec *)&v29.st_blksize = v17;
      *(timespec *)v29.st_qspare = v17;
      v29.st_birthtimespec = v17;
      *(timespec *)&v29.st_size = v17;
      v29.st_mtimespec = v17;
      v29.st_ctimespec = v17;
      *(timespec *)&v29.st_uid = v17;
      v29.st_atimespec = v17;
      *(timespec *)&v29.st_dev = v17;
      v18 = __p[23] >= 0 ? __p : *(const char **)__p;
      if (stat(v18, &v29))
      {
        v19 = __p[23] >= 0 ? __p : *(const char **)__p;
        if (mkdir(v19, a2)) {
          break;
        }
      }
      unint64_t v9 = v10;
      uint64_t v8 = *(void *)&__p[32];
      ++v10;
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&__p[40] - *(void *)&__p[32]) >> 3) <= v9) {
        goto LABEL_42;
      }
    }
    uint64_t v20 = 0;
    if ((__p[23] & 0x80000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t v20 = 1;
  if ((__p[23] & 0x80000000) != 0) {
LABEL_43:
  }
    operator delete(*(void **)__p);
LABEL_44:
  uint64_t v22 = *(void *)&__p[32];
  if (*(void *)&__p[32])
  {
    uint64_t v23 = *(void *)&__p[40];
    unint64_t v24 = *(void **)&__p[32];
    if (*(void *)&__p[40] != *(void *)&__p[32])
    {
      do
      {
        if (*(char *)(v23 - 1) < 0) {
          operator delete(*(void **)(v23 - 24));
        }
        v23 -= 24;
      }
      while (v23 != v22);
      unint64_t v24 = *(void **)&__p[32];
    }
    *(void *)&__p[40] = v22;
    operator delete(v24);
  }
  if (SHIBYTE(v28) < 0) {
    operator delete(v27[0]);
  }
  return v20;
}

void sub_235DBAC60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a14 < 0)
  {
    operator delete(__p);
    std::vector<std::string>::~vector[abi:ne180100](&a16);
    if ((a24 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    std::vector<std::string>::~vector[abi:ne180100](&a16);
    if ((a24 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  operator delete(a19);
  _Unwind_Resume(a1);
}

uint64_t support::fs::removeDir(const char *a1)
{
  uint64_t v1 = (const std::__fs::filesystem::path *)a1;
  v46[2] = *MEMORY[0x263EF8340];
  v2.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v2.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&__dst.st_blkstd::string::size_type size = v2;
  *(timespec *)__dst.st_qspare = v2;
  __dst.st_birthtimespec = v2;
  *(timespec *)&__dst.st_std::string::size_type size = v2;
  __dst.st_mtimespec = v2;
  __dst.st_ctimespec = v2;
  *(timespec *)&__dst.st_uid = v2;
  __dst.st_atimespec = v2;
  *(timespec *)&__dst.st_dev = v2;
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  if (stat(a1, &__dst)) {
    return 1;
  }
  v42 = 0;
  v43 = 0;
  uint64_t v44 = 0;
  support::fs::readDir((const char *)v1, (uint64_t)&v42);
  unsigned int v5 = 0;
  while (1)
  {
    unsigned int v6 = v5;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)v43 - (unsigned char *)v42) >> 3);
    BOOL v3 = v7 <= v5;
    if (v7 <= v5) {
      break;
    }
    uint64_t v8 = (char *)v42 + 24 * v5;
    memset(&__p, 170, sizeof(__p));
    if (v8[23] < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v8, *((void *)v8 + 1));
    }
    else
    {
      long long v9 = *(_OWORD *)v8;
      __p.__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v9;
    }
    int v10 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    if (size == 2)
    {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      if (LOWORD(p_p->__r_.__value_.__l.__data_) == 11822)
      {
LABEL_58:
        char v30 = 1;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_7;
        }
        goto LABEL_6;
      }
    }
    else if (size == 1)
    {
      std::string::size_type v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v12 = &__p;
      }
      if (v12->__r_.__value_.__s.__data_[0] == 46) {
        goto LABEL_58;
      }
    }
    int v14 = SHIBYTE(v1->__pn_.__r_.__value_.__r.__words[2]);
    if (v14 >= 0) {
      size_t v15 = HIBYTE(v1->__pn_.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v15 = v1->__pn_.__r_.__value_.__l.__size_;
    }
    unint64_t v16 = v15 + 1;
    memset(&__dst, 170, 24);
    if (v15 + 1 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v16 >= 0x17)
    {
      uint64_t v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v16 | 7) != 0x17) {
        uint64_t v18 = v16 | 7;
      }
      uint64_t v19 = v18 + 1;
      p_dst = (char *)operator new(v18 + 1);
      __dst.st_ino = v15 + 1;
      *(void *)&__dst.st_uid = v19 | 0x8000000000000000;
      *(void *)&__dst.st_dev = p_dst;
    }
    else
    {
      memset(&__dst, 0, 24);
      p_dst = (char *)&__dst;
      HIBYTE(__dst.st_gid) = v15 + 1;
      if (!v15) {
        goto LABEL_38;
      }
    }
    if (v14 >= 0) {
      uint64_t v20 = v1;
    }
    else {
      uint64_t v20 = (const std::__fs::filesystem::path *)v1->__pn_.__r_.__value_.__r.__words[0];
    }
    memmove(p_dst, v20, v15);
LABEL_38:
    *(_WORD *)&p_dst[v15] = 47;
    if (v10 >= 0) {
      long long v21 = &__p;
    }
    else {
      long long v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    uint64_t v22 = std::string::append((std::string *)&__dst, (const std::string::value_type *)v21, size);
    std::string::size_type v23 = v22->__r_.__value_.__r.__words[0];
    v46[0] = v22->__r_.__value_.__l.__size_;
    *(void *)((char *)v46 + 7) = *(std::string::size_type *)((char *)&v22->__r_.__value_.__r.__words[1] + 7);
    char v24 = HIBYTE(v22->__r_.__value_.__r.__words[2]);
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    __p.__r_.__value_.__r.__words[0] = v23;
    __p.__r_.__value_.__l.__size_ = v46[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v46 + 7);
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = v24;
    if (SHIBYTE(__dst.st_gid) < 0)
    {
      operator delete(*(void **)&__dst.st_dev);
      char v24 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      std::string::size_type v23 = __p.__r_.__value_.__r.__words[0];
    }
    v25.tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v25.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    *(timespec *)&__dst.st_blkstd::string::size_type size = v25;
    *(timespec *)__dst.st_qspare = v25;
    __dst.st_birthtimespec = v25;
    *(timespec *)&__dst.st_std::string::size_type size = v25;
    __dst.st_mtimespec = v25;
    __dst.st_ctimespec = v25;
    *(timespec *)&__dst.st_uid = v25;
    __dst.st_atimespec = v25;
    if (v24 >= 0) {
      v26 = &__p;
    }
    else {
      v26 = (std::string *)v23;
    }
    *(timespec *)&__dst.st_dev = v25;
    if (!stat((const char *)v26, &__dst)
      && ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? (v31 = &__p)
        : (v31 = (std::string *)__p.__r_.__value_.__r.__words[0]),
          (v32 = opendir((const char *)v31), (v33 = v32) != 0) && (v34 = readdir(v32), closedir(v33), v34)))
    {
      std::string::append(&__p, "/", 1uLL);
      char v30 = support::fs::removeDir(&__p);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_7;
      }
    }
    else
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v28 = (const std::__fs::filesystem::path *)&__p;
      }
      else {
        uint64_t v28 = (const std::__fs::filesystem::path *)__p.__r_.__value_.__r.__words[0];
      }
      if (!remove(v28, v27)) {
        goto LABEL_58;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        stat v29 = &__p;
      }
      else {
        stat v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      char v30 = unlink((const char *)v29) == 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_7;
      }
    }
LABEL_6:
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_7:
    unsigned int v5 = v6 + 1;
    if ((v30 & 1) == 0) {
      goto LABEL_75;
    }
  }
  if ((v1->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v35 = v1;
  }
  else {
    v35 = (const std::__fs::filesystem::path *)v1->__pn_.__r_.__value_.__r.__words[0];
  }
  if (remove(v35, v4))
  {
    if ((v1->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v36 = (const char *)v1;
    }
    else {
      v36 = (const char *)v1->__pn_.__r_.__value_.__r.__words[0];
    }
    unlink(v36);
  }
LABEL_75:
  v37 = (void **)v42;
  if (v42)
  {
    v38 = v43;
    v39 = v42;
    if (v43 != v42)
    {
      do
      {
        if (*((char *)v38 - 1) < 0) {
          operator delete(*(v38 - 3));
        }
        v38 -= 3;
      }
      while (v38 != v37);
      v39 = v42;
    }
    v43 = v37;
    operator delete(v39);
  }
  return v3;
}

void sub_235DBB0DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::vector<std::string>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_235DBB0F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if ((a16 & 0x80000000) == 0)
  {
    std::vector<std::string>::~vector[abi:ne180100](&a17);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  std::vector<std::string>::~vector[abi:ne180100](&a17);
  _Unwind_Resume(a1);
}

uint64_t support::fs::removeDirContents(const char *a1, unint64_t a2)
{
  BOOL v3 = a1;
  v62 = 0;
  v63 = 0;
  uint64_t v64 = 0;
  support::fs::readDir(a1, (uint64_t)&v62);
  time_t v56 = time(0);
  unsigned int v5 = (void **)v62;
  uint64_t v4 = v63;
  if (v62 == v63)
  {
    char v52 = 1;
    if (v62) {
      goto LABEL_105;
    }
    return v52 & 1;
  }
  double v6 = (double)a2;
  char v57 = 1;
  while (1)
  {
    memset(&v61, 170, sizeof(v61));
    if (*((char *)v5 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v61, (const std::string::value_type *)*v5, (std::string::size_type)v5[1]);
    }
    else
    {
      long long v7 = *(_OWORD *)v5;
      v61.__r_.__value_.__r.__words[2] = (std::string::size_type)v5[2];
      *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v7;
    }
    int v8 = SHIBYTE(v61.__r_.__value_.__r.__words[2]);
    std::string::size_type v9 = (v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? HIBYTE(v61.__r_.__value_.__r.__words[2])
       : v61.__r_.__value_.__l.__size_;
    if (v9 == 2) {
      break;
    }
    if (v9 == 1)
    {
      int v10 = (std::string *)v61.__r_.__value_.__r.__words[0];
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v10 = &v61;
      }
      if (v10->__r_.__value_.__s.__data_[0] == 46) {
        goto LABEL_95;
      }
    }
LABEL_19:
    memset(__p, 170, 24);
    int v12 = v3[23];
    if (v12 >= 0) {
      size_t v13 = *((unsigned __int8 *)v3 + 23);
    }
    else {
      size_t v13 = *((void *)v3 + 1);
    }
    unint64_t v14 = v13 + 1;
    memset(&__dst, 170, 24);
    if (v13 + 1 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v14 >= 0x17)
    {
      int v58 = SHIBYTE(v61.__r_.__value_.__r.__words[2]);
      std::string::size_type v16 = v9;
      timespec v17 = v5;
      uint64_t v18 = v4;
      uint64_t v19 = v3;
      unint64_t v20 = a2;
      uint64_t v21 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17) {
        uint64_t v21 = v14 | 7;
      }
      uint64_t v22 = v21 + 1;
      p_dst = (stat *)operator new(v21 + 1);
      __dst.st_ino = v13 + 1;
      *(void *)&__dst.st_uid = v22 | 0x8000000000000000;
      *(void *)&__dst.st_dev = p_dst;
      a2 = v20;
      BOOL v3 = v19;
      uint64_t v4 = v18;
      unsigned int v5 = v17;
      std::string::size_type v9 = v16;
      int v8 = v58;
    }
    else
    {
      memset(&__dst, 0, 24);
      p_dst = &__dst;
      HIBYTE(__dst.st_gid) = v13 + 1;
      if (!v13) {
        goto LABEL_33;
      }
    }
    if (v12 >= 0) {
      std::string::size_type v23 = v3;
    }
    else {
      std::string::size_type v23 = *(const char **)v3;
    }
    memmove(p_dst, v23, v13);
LABEL_33:
    *(_WORD *)((char *)&p_dst->st_dev + v13) = 47;
    if (v8 >= 0) {
      char v24 = &v61;
    }
    else {
      char v24 = (std::string *)v61.__r_.__value_.__r.__words[0];
    }
    timespec v25 = std::string::append((std::string *)&__dst, (const std::string::value_type *)v24, v9);
    long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    __p[2] = (void *)v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__dst.st_gid) < 0)
    {
      operator delete(*(void **)&__dst.st_dev);
      if (!a2) {
        goto LABEL_47;
      }
    }
    else if (!a2)
    {
      goto LABEL_47;
    }
    v27.tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v27.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    *(timespec *)&__dst.st_blkstd::string::size_type size = v27;
    *(timespec *)__dst.st_qspare = v27;
    __dst.st_birthtimespec = v27;
    *(timespec *)&__dst.st_std::string::size_type size = v27;
    __dst.st_mtimespec = v27;
    __dst.st_ctimespec = v27;
    __dst.st_atimespec = v27;
    *(timespec *)&__dst.st_dev = v27;
    *(timespec *)&__dst.st_uid = v27;
    if (SHIBYTE(__p[2]) >= 0) {
      uint64_t v28 = __p;
    }
    else {
      uint64_t v28 = (void **)__p[0];
    }
    if (!stat((const char *)v28, &__dst) && difftime(v56, __dst.st_ctimespec.tv_sec) >= v6)
    {
LABEL_47:
      v31.tv_sec = 0xAAAAAAAAAAAAAAAALL;
      v31.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
      *(timespec *)&__dst.st_blkstd::string::size_type size = v31;
      *(timespec *)__dst.st_qspare = v31;
      __dst.st_birthtimespec = v31;
      *(timespec *)&__dst.st_std::string::size_type size = v31;
      __dst.st_mtimespec = v31;
      __dst.st_ctimespec = v31;
      __dst.st_atimespec = v31;
      *(timespec *)&__dst.st_dev = v31;
      *(timespec *)&__dst.st_uid = v31;
      if (SHIBYTE(__p[2]) >= 0) {
        v32 = __p;
      }
      else {
        v32 = (void **)__p[0];
      }
      if (stat((const char *)v32, &__dst)
        || (SHIBYTE(__p[2]) >= 0 ? (v36 = __p) : (v36 = (void **)__p[0]),
            (v37 = opendir((const char *)v36), (v38 = v37) == 0) || (v39 = readdir(v37), closedir(v38), !v39)))
      {
        if (SHIBYTE(__p[2]) >= 0) {
          v34 = (const std::__fs::filesystem::path *)__p;
        }
        else {
          v34 = (const std::__fs::filesystem::path *)__p[0];
        }
        if (!remove(v34, v33)
          || (SHIBYTE(__p[2]) >= 0 ? (v35 = __p) : (v35 = (void **)__p[0]), !unlink((const char *)v35)))
        {
LABEL_89:
          int v30 = 0;
          char v57 = 1;
          char v29 = 1;
          if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
            goto LABEL_91;
          }
          goto LABEL_90;
        }
        goto LABEL_59;
      }
      int v40 = v3[23];
      if (v40 >= 0) {
        size_t v41 = *((unsigned __int8 *)v3 + 23);
      }
      else {
        size_t v41 = *((void *)v3 + 1);
      }
      unint64_t v42 = v41 + 1;
      memset(&v59, 170, sizeof(v59));
      if (v41 + 1 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v42 >= 0x17)
      {
        uint64_t v44 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v42 | 7) != 0x17) {
          uint64_t v44 = v42 | 7;
        }
        uint64_t v45 = v44 + 1;
        v43 = (char *)operator new(v44 + 1);
        v59.__r_.__value_.__l.__size_ = v41 + 1;
        v59.__r_.__value_.__r.__words[2] = v45 | 0x8000000000000000;
        v59.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
      }
      else
      {
        memset(&v59, 0, sizeof(v59));
        v43 = (char *)&v59;
        *((unsigned char *)&v59.__r_.__value_.__s + 23) = v41 + 1;
        if (!v41) {
          goto LABEL_80;
        }
      }
      if (v40 >= 0) {
        v46 = v3;
      }
      else {
        v46 = *(const char **)v3;
      }
      memmove(v43, v46, v41);
LABEL_80:
      *(_WORD *)&v43[v41] = 47;
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v47 = &v61;
      }
      else {
        v47 = (std::string *)v61.__r_.__value_.__r.__words[0];
      }
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v61.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v61.__r_.__value_.__l.__size_;
      }
      v49 = std::string::append(&v59, (const std::string::value_type *)v47, size);
      long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
      *(void *)&__dst.st_uid = *((void *)&v49->__r_.__value_.__l + 2);
      *(_OWORD *)&__dst.st_dev = v50;
      v49->__r_.__value_.__l.__size_ = 0;
      v49->__r_.__value_.__r.__words[2] = 0;
      v49->__r_.__value_.__r.__words[0] = 0;
      char v51 = support::fs::removeDir((const char *)&__dst);
      if (SHIBYTE(__dst.st_gid) < 0)
      {
        operator delete(*(void **)&__dst.st_dev);
        if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_88;
        }
      }
      else if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_88:
        if (v51) {
          goto LABEL_89;
        }
LABEL_59:
        char v57 = 0;
        char v29 = 0;
        int v30 = 2;
        if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
          goto LABEL_91;
        }
        goto LABEL_90;
      }
      operator delete(v59.__r_.__value_.__l.__data_);
      if (v51) {
        goto LABEL_89;
      }
      goto LABEL_59;
    }
    char v29 = 0;
    int v30 = 3;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_91;
    }
LABEL_90:
    operator delete(__p[0]);
LABEL_91:
    if (v29) {
      goto LABEL_95;
    }
    if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_93;
    }
LABEL_96:
    operator delete(v61.__r_.__value_.__l.__data_);
    if (v30 != 3) {
      goto LABEL_97;
    }
LABEL_3:
    v5 += 3;
    if (v5 == v4) {
      goto LABEL_102;
    }
  }
  unint64_t v11 = (std::string *)v61.__r_.__value_.__r.__words[0];
  if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v11 = &v61;
  }
  if (LOWORD(v11->__r_.__value_.__l.__data_) != 11822) {
    goto LABEL_19;
  }
LABEL_95:
  int v30 = 0;
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_96;
  }
LABEL_93:
  if (v30 == 3) {
    goto LABEL_3;
  }
LABEL_97:
  if (!v30) {
    goto LABEL_3;
  }
LABEL_102:
  unsigned int v5 = (void **)v62;
  char v52 = v57;
  if (!v62) {
    return v52 & 1;
  }
LABEL_105:
  v53 = v63;
  v54 = v5;
  if (v63 != v5)
  {
    do
    {
      if (*((char *)v53 - 1) < 0) {
        operator delete(*(v53 - 3));
      }
      v53 -= 3;
    }
    while (v53 != v5);
    v54 = v62;
  }
  v63 = v5;
  operator delete(v54);
  return v52 & 1;
}

void sub_235DBB6D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  std::vector<std::string>::~vector[abi:ne180100](&a31);
  _Unwind_Resume(a1);
}

BOOL support::fs::getFilteredFiles(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  *__error() = 0;
  if (a1[23] < 0)
  {
    long long v7 = opendir(*(const char **)a1);
    if (v7) {
      goto LABEL_3;
    }
LABEL_78:
    uint64_t v45 = GetOsLogContext()[1];
    BOOL result = os_log_type_enabled(v45, OS_LOG_TYPE_ERROR);
    if (result)
    {
      if (a1[23] < 0) {
        a1 = *(const char **)a1;
      }
      v47 = __error();
      v48 = strerror(*v47);
      v58.st_dev = 136315394;
      *(void *)&v58.st_mode = a1;
      WORD2(v58.st_ino) = 2080;
      *(__darwin_ino64_t *)((char *)&v58.st_ino + 6) = (__darwin_ino64_t)v48;
      _os_log_error_impl(&dword_235DB9000, v45, OS_LOG_TYPE_ERROR, "Error %s (%s)\n", (uint8_t *)&v58, 0x16u);
      return 0;
    }
    return result;
  }
  long long v7 = opendir(a1);
  if (!v7) {
    goto LABEL_78;
  }
LABEL_3:
  int v8 = v7;
  std::string::size_type v9 = readdir(v7);
  if (v9)
  {
    char v51 = a1;
    char v49 = 0;
    while (1)
    {
      d_name = v9->d_name;
      memset(__dst, 170, sizeof(__dst));
      size_t v11 = strlen(v9->d_name);
      if (v11 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      size_t v12 = v11;
      if (v11 >= 0x17) {
        break;
      }
      __dst[23] = v11;
      size_t v13 = __dst;
      if (v11) {
        goto LABEL_12;
      }
LABEL_13:
      v13[v12] = 0;
      uint64_t v16 = __dst[23];
      int v17 = __dst[23];
      uint64_t v18 = *(void *)&__dst[8];
      if (__dst[23] >= 0) {
        std::string::size_type v19 = __dst[23];
      }
      else {
        std::string::size_type v19 = *(void *)&__dst[8];
      }
      if (v19 == 2)
      {
        uint64_t v21 = *(_WORD **)__dst;
        if (__dst[23] >= 0) {
          uint64_t v21 = __dst;
        }
        if (*v21 == 11822) {
          goto LABEL_73;
        }
      }
      else if (v19 == 1)
      {
        unint64_t v20 = *(unsigned char **)__dst;
        if (__dst[23] >= 0) {
          unint64_t v20 = __dst;
        }
        if (*v20 == 46) {
          goto LABEL_73;
        }
      }
      if (a4) {
        goto LABEL_53;
      }
      uint64_t v22 = v8;
      uint64_t v23 = a4;
      uint64_t v24 = a3;
      v25.tv_sec = 0xAAAAAAAAAAAAAAAALL;
      v25.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
      *(timespec *)&v58.st_blkstd::string::size_type size = v25;
      *(timespec *)v58.st_qspare = v25;
      v58.st_birthtimespec = v25;
      *(timespec *)&v58.st_std::string::size_type size = v25;
      v58.st_mtimespec = v25;
      v58.st_ctimespec = v25;
      *(timespec *)&v58.st_uid = v25;
      v58.st_atimespec = v25;
      *(timespec *)&v58.st_dev = v25;
      int v26 = v51[23];
      if (v26 >= 0) {
        size_t v27 = *((unsigned __int8 *)v51 + 23);
      }
      else {
        size_t v27 = *((void *)v51 + 1);
      }
      unint64_t v28 = v27 + 1;
      memset(&v52, 170, sizeof(v52));
      if (v27 + 1 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v28 >= 0x17)
      {
        uint64_t v30 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v28 | 7) != 0x17) {
          uint64_t v30 = v28 | 7;
        }
        uint64_t v31 = v30 + 1;
        char v29 = (char *)operator new(v30 + 1);
        v52.__r_.__value_.__l.__size_ = v27 + 1;
        v52.__r_.__value_.__r.__words[2] = v31 | 0x8000000000000000;
        v52.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
      }
      else
      {
        memset(&v52, 0, sizeof(v52));
        char v29 = (char *)&v52;
        *((unsigned char *)&v52.__r_.__value_.__s + 23) = v27 + 1;
        if (!v27) {
          goto LABEL_40;
        }
      }
      if (v26 >= 0) {
        v32 = v51;
      }
      else {
        v32 = *(const char **)v51;
      }
      memmove(v29, v32, v27);
LABEL_40:
      a3 = v24;
      *(_WORD *)&v29[v27] = 47;
      if (v17 >= 0) {
        v33 = __dst;
      }
      else {
        v33 = *(const std::string::value_type **)__dst;
      }
      v34 = std::string::append(&v52, v33, v19);
      a4 = v23;
      long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      v55[0] = *((void *)&v34->__r_.__value_.__l + 2);
      *(_OWORD *)std::string __p = v35;
      v34->__r_.__value_.__l.__size_ = 0;
      v34->__r_.__value_.__r.__words[2] = 0;
      v34->__r_.__value_.__r.__words[0] = 0;
      if (v55[0] >= 0) {
        v36 = __p;
      }
      else {
        v36 = (void **)__p[0];
      }
      lstat((const char *)v36, &v58);
      int v8 = v22;
      if (SHIBYTE(v55[0]) < 0)
      {
        operator delete(__p[0]);
        if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_48:
          if ((v58.st_mode & 0xF000) != 0xA000) {
            goto LABEL_52;
          }
          goto LABEL_73;
        }
      }
      else if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_48;
      }
      operator delete(v52.__r_.__value_.__l.__data_);
      if ((v58.st_mode & 0xF000) != 0xA000)
      {
LABEL_52:
        uint64_t v16 = __dst[23];
        uint64_t v18 = *(void *)&__dst[8];
        LOBYTE(v17) = __dst[23];
LABEL_53:
        if ((v17 & 0x80u) == 0) {
          v37 = (std::sub_match<const char *> *)__dst;
        }
        else {
          v37 = *(std::sub_match<const char *> **)__dst;
        }
        if ((v17 & 0x80u) != 0) {
          uint64_t v16 = v18;
        }
        v38 = (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v37 + v16);
        *(void *)&long long v39 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v39 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v56 = v39;
        v55[6] = 0xAAAAAAAAAAAAAA00;
        v55[3] = 0xAAAAAAAAAAAAAAAALL;
        v55[4] = 0;
        v55[5] = 0;
        v55[7] = 0;
        v55[8] = 0;
        LOBYTE(v56) = 0;
        BYTE8(v56) = 0;
        uint64_t v57 = 0;
        *(_OWORD *)std::string __p = 0u;
        memset(v55, 0, 25);
        *(_OWORD *)&v58.st_birthtimespec.tv_nsec = v39;
        v58.st_ctimespec.tv_sec = 0xAAAAAAAAAAAAAAAALL;
        v58.st_atimespec.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
        memset(&v58.st_mtimespec, 0, 17);
        memset(&v58.st_ctimespec.tv_nsec, 0, 17);
        LOBYTE(v58.st_size) = 0;
        v58.st_blocks = 0;
        memset(&v58, 0, 41);
        int v40 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(a2, v37, (std::sub_match<const char *> *)((char *)v37 + v16), (std::vector<std::csub_match> *)&v58, 4160);
        std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)__p, (uint64_t)v37, v38, (uint64_t *)&v58.st_dev, 0);
        if (*(void *)&v58.st_dev)
        {
          v58.st_ino = *(void *)&v58.st_dev;
          operator delete(*(void **)&v58.st_dev);
        }
        if ((_BYTE)v56) {
          int v41 = v40 ^ 1;
        }
        else {
          int v41 = 1;
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if ((v40 & v41) != 0)
        {
          unint64_t v42 = *(void *)(a3 + 8);
          if (v42 >= *(void *)(a3 + 16))
          {
            uint64_t v44 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a3, (uint64_t)__dst);
          }
          else
          {
            if ((__dst[23] & 0x80000000) != 0)
            {
              std::string::__init_copy_ctor_external(*(std::string **)(a3 + 8), *(const std::string::value_type **)__dst, *(std::string::size_type *)&__dst[8]);
            }
            else
            {
              long long v43 = *(_OWORD *)__dst;
              *(void *)(v42 + 16) = *(void *)&__dst[16];
              *(_OWORD *)unint64_t v42 = v43;
            }
            uint64_t v44 = (std::string *)(v42 + 24);
            *(void *)(a3 + 8) = v42 + 24;
          }
          *(void *)(a3 + 8) = v44;
          char v49 = 1;
        }
      }
LABEL_73:
      if ((__dst[23] & 0x80000000) != 0) {
        operator delete(*(void **)__dst);
      }
      std::string::size_type v9 = readdir(v8);
      if (!v9) {
        goto LABEL_83;
      }
    }
    uint64_t v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v14 = v11 | 7;
    }
    uint64_t v15 = v14 + 1;
    size_t v13 = operator new(v14 + 1);
    *(void *)&__dst[8] = v12;
    *(void *)&__dst[16] = v15 | 0x8000000000000000;
    *(void *)stat __dst = v13;
LABEL_12:
    memmove(v13, d_name, v12);
    goto LABEL_13;
  }
  char v49 = 0;
LABEL_83:
  closedir(v8);
  return v49 & 1;
}

void sub_235DBBD24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49)
{
  *(void *)(v49 + 8) = v50;
  if (a30 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *support::fs::readCurrentLine@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::istream::tellg();
  uint64_t v4 = v10;
  if (v10 >= 2)
  {
    do
    {
      std::istream::seekg();
      if (std::istream::peek() == 10) {
        break;
      }
    }
    while (v4-- > 1);
  }
  std::istream::seekg();
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
  double v6 = std::locale::use_facet(v9, MEMORY[0x263F8C108]);
  unsigned __int8 v7 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
  std::locale::~locale(v9);
  return std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, (uint64_t)a2, v7);
}

void sub_235DBBEE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_235DBBEFC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0)
  {
    operator delete(*(void **)v1);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_264C7D2E8, MEMORY[0x263F8C060]);
}

void sub_235DBBF84(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  BOOL result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C388] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x263F8C208], MEMORY[0x263F8C090]);
}

void __clang_call_terminate(void *a1)
{
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  unsigned int v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    int v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    unsigned int v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }

  memmove(v5, __s, __sz + 1);
}

std::string *std::vector<std::string>::__push_back_slow_path<std::string const&>(char **a1, uint64_t a2)
{
  BOOL v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555) {
    unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    std::string::size_type v9 = (char *)operator new(24 * v8);
  }
  else
  {
    std::string::size_type v9 = 0;
  }
  uint64_t v10 = (std::string *)&v9[24 * v5];
  uint64_t v16 = v10;
  int v17 = v10;
  uint64_t v18 = &v9[24 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    BOOL v3 = *a1;
    uint64_t v4 = a1[1];
    uint64_t v10 = v16;
    uint64_t v11 = v17 + 1;
    if (v4 == *a1)
    {
LABEL_17:
      size_t v13 = v3;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v10->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
    uint64_t v11 = v10 + 1;
    if (v4 == v3) {
      goto LABEL_17;
    }
  }
  do
  {
    long long v12 = *(_OWORD *)(v4 - 24);
    v10[-1].__r_.__value_.__r.__words[2] = *((void *)v4 - 1);
    *(_OWORD *)&v10[-1].__r_.__value_.__l.__data_ = v12;
    --v10;
    *((void *)v4 - 2) = 0;
    *((void *)v4 - 1) = 0;
    *((void *)v4 - 3) = 0;
    v4 -= 24;
  }
  while (v4 != v3);
  size_t v13 = *a1;
  BOOL v3 = a1[1];
LABEL_18:
  *a1 = (char *)v10;
  a1[1] = (char *)v11;
  a1[2] = v18;
  if (v3 != v13)
  {
    uint64_t v14 = (void **)(v3 - 24);
    do
    {
      if (*((char *)v14 + 23) < 0) {
        operator delete(*v14);
      }
      v14 -= 3;
    }
    while (v14 + 3 != (void **)v13);
    BOOL v3 = v13;
  }
  if (v3) {
    operator delete(v3);
  }
  return v11;
}

void sub_235DBC278(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::pointer begin = this->__begin_;
  std::__split_buffer<std::string>::pointer end = this->__end_;
  if (end != begin)
  {
    do
    {
      std::__split_buffer<std::string>::pointer v4 = end - 1;
      this->__end_ = end - 1;
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v4->__r_.__value_.__l.__data_);
        std::__split_buffer<std::string>::pointer v4 = this->__end_;
      }
      std::__split_buffer<std::string>::pointer end = v4;
    }
    while (v4 != begin);
  }
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

void std::vector<std::string>::__throw_length_error[abi:ne180100]()
{
}

void std::string::__throw_out_of_range[abi:ne180100]()
{
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_264C7D2F0, MEMORY[0x263F8C068]);
}

void sub_235DBC36C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  BOOL result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
  return result;
}

uint64_t std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](uint64_t result)
{
  uint64_t v1 = result;
  timespec v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void *std::string::__assign_no_alias<true>(void *__dst, void *__src, size_t __len)
{
  if (__len > 0x16)
  {
    if (__len - 0x7FFFFFFFFFFFFFF7 <= 0x800000000000001ELL) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v7 = 44;
    if (__len > 0x2C) {
      size_t v7 = __len;
    }
    size_t v8 = (v7 | 7) + 1;
    unint64_t v6 = operator new(v8);
    memcpy(v6, __src, __len);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *stat __dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = __len;
    unint64_t v6 = __dst;
    if (__len)
    {
      memmove(__dst, __src, __len);
      unint64_t v6 = __dst;
    }
  }
  *((unsigned char *)v6 + __len) = 0;
  return __dst;
}

void **std::string::__assign_no_alias<false>(void **a1, void *__src, size_t __len)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v7 = v6 & 0x7FFFFFFFFFFFFFFFLL;
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) > __len)
  {
    size_t v8 = *a1;
    a1[1] = (void *)__len;
    if (__len) {
      memmove(v8, __src, __len);
    }
    goto LABEL_12;
  }
  size_t v9 = 0x7FFFFFFFFFFFFFF7;
  if (0x7FFFFFFFFFFFFFF7 - v7 < __len - v7 + 1) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unint64_t v10 = v7 - 1;
  uint64_t v11 = a1;
  if ((v6 & 0x8000000000000000) == 0)
  {
    if (v10 > 0x3FFFFFFFFFFFFFF2) {
      goto LABEL_7;
    }
LABEL_14:
    unint64_t v13 = 2 * v10;
    if (__len > 2 * v10) {
      unint64_t v13 = __len;
    }
    uint64_t v14 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17) {
      uint64_t v14 = v13 | 7;
    }
    if (v13 >= 0x17) {
      size_t v9 = v14 + 1;
    }
    else {
      size_t v9 = 23;
    }
    size_t v8 = operator new(v9);
    if (!__len) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  uint64_t v11 = *a1;
  if (v10 <= 0x3FFFFFFFFFFFFFF2) {
    goto LABEL_14;
  }
LABEL_7:
  size_t v8 = operator new(0x7FFFFFFFFFFFFFF7uLL);
  if (__len) {
LABEL_8:
  }
    memcpy(v8, __src, __len);
LABEL_9:
  if (v10 != 22) {
    operator delete(v11);
  }
  a1[1] = (void *)__len;
  a1[2] = (void *)(v9 | 0x8000000000000000);
  *a1 = v8;
LABEL_12:
  *((unsigned char *)v8 + __len) = 0;
  return a1;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](uint64_t a1, char *a2, int a3)
{
  unint64_t v6 = (const std::locale *)MEMORY[0x237DF70D0]();
  *(void *)(a1 + 8) = std::locale::use_facet(v6, MEMORY[0x263F8C108]);
  *(void *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x263F8C130]);
  *(_DWORD *)(a1 + 24) = a3;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  size_t v7 = strlen(a2);
  if (std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(a1, a2, &a2[v7]) != &a2[v7]) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>();
  }
  return a1;
}

void sub_235DBC6E0(_Unwind_Exception *a1)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v2);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void sub_235DBC6FC(_Unwind_Exception *a1)
{
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(uint64_t a1, char *a2, char *a3)
{
  unint64_t v6 = operator new(8uLL);
  void *v6 = &unk_26E93A970;
  size_t v7 = operator new(0x10uLL);
  v7[1] = v6;
  size_t v8 = operator new(0x20uLL);
  *size_t v8 = &unk_26E93A9C8;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = v7;
  size_t v9 = *(std::__shared_weak_count **)(a1 + 48);
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    uint64_t v10 = *(void *)(a1 + 40);
    *(void *)(a1 + 56) = v10;
    unsigned int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
    if (v11 <= 0x3F) {
      goto LABEL_4;
    }
LABEL_9:
    if (v11 != 64)
    {
      if (v11 == 128)
      {
        return std::basic_regex<char,std::regex_traits<char>>::__parse_grep<char const*>(a1, a2, a3);
      }
      if (v11 == 256)
      {
        return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<char const*>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
      }
LABEL_31:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>();
    }
LABEL_15:
    return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
  }
  uint64_t v10 = *(void *)(a1 + 40);
  *(void *)(a1 + 56) = v10;
  unsigned int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v11 > 0x3F) {
    goto LABEL_9;
  }
LABEL_4:
  if (v11)
  {
    if (v11 == 16)
    {
      return std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, a2, a3);
    }
    if (v11 != 32) {
      goto LABEL_31;
    }
    goto LABEL_15;
  }
  unint64_t v13 = a2;
  while (1)
  {
    uint64_t v14 = (std::basic_regex<char> *)v13;
    unint64_t v13 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(a1, v13, a3);
    if (v13 == (char *)v14) {
      break;
    }
LABEL_19:
    if (v13 == (char *)v14) {
      goto LABEL_29;
    }
  }
  uint64_t v15 = *(std::__owns_one_state<char> **)(a1 + 56);
  int v16 = *(_DWORD *)(a1 + 28);
  int v17 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>((std::basic_regex<char> *)a1, v14, (std::basic_regex<char> *)a3);
  if (v17 != (unsigned __int8 *)v14)
  {
    unint64_t v13 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, (std::basic_regex<char> *)v17, (std::basic_regex<char> *)a3, v15, (v16 + 1), (*(_DWORD *)(a1 + 28) + 1));
    goto LABEL_19;
  }
LABEL_29:
  if (v14 == (std::basic_regex<char> *)a2)
  {
    uint64_t v18 = operator new(0x10uLL);
    uint64_t v19 = *(void *)(a1 + 56);
    uint64_t v20 = *(void *)(v19 + 8);
    v18[1] = v20;
    *(void *)(v19 + 8) = v18;
    uint64_t v21 = *(void *)(*(void *)(a1 + 56) + 8);
    goto LABEL_32;
  }
LABEL_33:
  if (v14 != (std::basic_regex<char> *)a3)
  {
    if (LOBYTE(v14->__traits_.__loc_.__locale_) == 124)
    {
      uint64_t v22 = *(void *)(a1 + 56);
      uint64_t v23 = (std::basic_regex<char> *)((char *)&v14->__traits_.__loc_.__locale_ + 1);
      uint64_t v24 = (char *)&v14->__traits_.__loc_.__locale_ + 1;
      while (1)
      {
        uint64_t v14 = (std::basic_regex<char> *)v24;
        uint64_t v24 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(a1, v24, a3);
        if (v24 == (char *)v14)
        {
          timespec v25 = *(std::__owns_one_state<char> **)(a1 + 56);
          int v26 = *(_DWORD *)(a1 + 28);
          size_t v27 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>((std::basic_regex<char> *)a1, v14, (std::basic_regex<char> *)a3);
          if (v27 == (unsigned __int8 *)v14)
          {
LABEL_40:
            if (v14 == v23)
            {
              unint64_t v28 = operator new(0x10uLL);
              uint64_t v29 = *(void *)(a1 + 56);
              uint64_t v30 = *(void *)(v29 + 8);
              v28[1] = v30;
              *(void *)(v29 + 8) = v28;
              *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
            }
            uint64_t v31 = operator new(0x18uLL);
            uint64_t v32 = *(void *)(v22 + 8);
            v31[1] = *(void *)(v10 + 8);
            v31[2] = v32;
            void *v31 = &unk_26E93AF88;
            *(void *)(v10 + 8) = v31;
            *(void *)(v22 + 8) = 0;
            v33 = operator new(0x10uLL);
            uint64_t v34 = *(void *)(*(void *)(a1 + 56) + 8);
            v33[1] = v34;
            *(void *)(v22 + 8) = v33;
            *(void *)(*(void *)(a1 + 56) + 8) = 0;
            long long v35 = operator new(0x10uLL);
            uint64_t v36 = *(void *)(v22 + 8);
            void *v35 = &unk_26E93AFD0;
            v35[1] = v36;
            *(void *)(*(void *)(a1 + 56) + 8) = v35;
            uint64_t v21 = *(void *)(v22 + 8);
LABEL_32:
            *(void *)(a1 + 56) = v21;
            goto LABEL_33;
          }
          uint64_t v24 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, (std::basic_regex<char> *)v27, (std::basic_regex<char> *)a3, v25, (v26 + 1), (*(_DWORD *)(a1 + 28) + 1));
        }
        if (v24 == (char *)v14) {
          goto LABEL_40;
        }
      }
    }
    return (char *)v14;
  }
  return a3;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x237DF6E70](exception, 17);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_235DBCC0C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  std::__split_buffer<std::string>::pointer end = a1->__end_;
  size_t v7 = a2;
  do
  {
    size_t v8 = (std::basic_regex<char> *)v7;
    size_t v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>((uint64_t)a1, v7, a3);
    if (v7 != (char *)v8) {
      continue;
    }
    size_t v9 = a1->__end_;
    unsigned int marked_count = a1->__marked_count_;
    unsigned int v11 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(a1, v8);
    if (v11 == v8) {
      break;
    }
    size_t v7 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)a1, v11, (std::basic_regex<char> *)a3, v9, marked_count + 1, a1->__marked_count_ + 1);
  }
  while (v7 != (char *)v8);
  if (v8 == (std::basic_regex<char> *)a2)
  {
    long long v12 = (std::__node<char> *)operator new(0x10uLL);
    unint64_t v13 = a1->__end_;
    first = v13->__first_;
    v12[1].__vftable = (std::__node<char>_vtbl *)first;
    v13->__first_ = v12;
    uint64_t v15 = (std::__owns_one_state<char> *)a1->__end_->__first_;
    goto LABEL_8;
  }
LABEL_9:
  if (v8 != (std::basic_regex<char> *)a3)
  {
    if (LOBYTE(v8->__traits_.__loc_.__locale_) == 124)
    {
      int v16 = a1->__end_;
      int v17 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
      uint64_t v18 = (char *)&v8->__traits_.__loc_.__locale_ + 1;
      while (1)
      {
        size_t v8 = (std::basic_regex<char> *)v18;
        uint64_t v18 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>((uint64_t)a1, v18, a3);
        if (v18 == (char *)v8)
        {
          uint64_t v19 = a1->__end_;
          unsigned int v20 = a1->__marked_count_;
          uint64_t v21 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(a1, v8);
          if (v21 == v8)
          {
LABEL_16:
            if (v8 == v17)
            {
              uint64_t v22 = (std::__node<char> *)operator new(0x10uLL);
              uint64_t v23 = a1->__end_;
              uint64_t v24 = v23->__first_;
              v22[1].__vftable = (std::__node<char>_vtbl *)v24;
              v23->__first_ = v22;
              a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
            }
            timespec v25 = (std::__node<char> *)operator new(0x18uLL);
            int v26 = v16->__first_;
            v25[1].__vftable = (std::__node<char>_vtbl *)end->__first_;
            v25[2].__vftable = (std::__node<char>_vtbl *)v26;
            v25->__vftable = (std::__node<char>_vtbl *)&unk_26E93AF88;
            end->__first_ = v25;
            v16->__first_ = 0;
            size_t v27 = (std::__node<char> *)operator new(0x10uLL);
            unint64_t v28 = a1->__end_->__first_;
            v27[1].__vftable = (std::__node<char>_vtbl *)v28;
            v16->__first_ = v27;
            a1->__end_->__first_ = 0;
            uint64_t v29 = (std::__node<char> *)operator new(0x10uLL);
            uint64_t v30 = v16->__first_;
            v29->__vftable = (std::__node<char>_vtbl *)&unk_26E93AFD0;
            v29[1].__vftable = (std::__node<char>_vtbl *)v30;
            a1->__end_->__first_ = v29;
            uint64_t v15 = (std::__owns_one_state<char> *)v16->__first_;
LABEL_8:
            a1->__end_ = v15;
            goto LABEL_9;
          }
          uint64_t v18 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)a1, v21, (std::basic_regex<char> *)a3, v19, v20 + 1, a1->__marked_count_ + 1);
        }
        if (v18 == (char *)v8) {
          goto LABEL_16;
        }
      }
    }
    return (char *)v8;
  }
  return a3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(uint64_t a1, char *a2, char *a3)
{
  BOOL v3 = (std::basic_regex<char> *)a2;
  if (a2 == a3) {
    return a2;
  }
  if (*a2 == 94)
  {
    unint64_t v6 = operator new(0x18uLL);
    BOOL v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    uint64_t v8 = *(void *)(a1 + 56);
    uint64_t v9 = *(void *)(v8 + 8);
    void *v6 = &unk_26E93AAC0;
    v6[1] = v9;
    *((unsigned char *)v6 + 16) = v7;
    *(void *)(v8 + 8) = v6;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    BOOL v3 = (std::basic_regex<char> *)((char *)v3 + 1);
  }
  if (v3 != (std::basic_regex<char> *)a3)
  {
    while (v3 != (std::basic_regex<char> *)a3)
    {
      uint64_t v10 = v3;
      unsigned int v11 = *(std::__owns_one_state<char> **)(a1 + 56);
      int v12 = *(_DWORD *)(a1 + 28);
      unint64_t v13 = std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(a1, (uint64_t)v10, a3);
      if (v13 != (char *)v10)
      {
        BOOL v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v13, (std::basic_regex<char> *)a3, v11, (v12 + 1), (*(_DWORD *)(a1 + 28) + 1));
        if (v3 != v10) {
          continue;
        }
      }
      if ((char *)&v10->__traits_.__loc_.__locale_ + 1 != a3 || LOBYTE(v10->__traits_.__loc_.__locale_) != 36) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      }
      uint64_t v14 = operator new(0x18uLL);
      BOOL v15 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      uint64_t v16 = *(void *)(a1 + 56);
      uint64_t v17 = *(void *)(v16 + 8);
      void *v14 = &unk_26E93AB08;
      v14[1] = v17;
      *((unsigned char *)v14 + 16) = v15;
      *(void *)(v16 + 8) = v14;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
      return a3;
    }
  }
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  uint64_t v6 = *(void *)(a1 + 56);
  BOOL v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, a2, a3);
  if (v7 == a2) {
    goto LABEL_12;
  }
  do
  {
    uint64_t v8 = v7;
    BOOL v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, v7, a3);
  }
  while (v7 != v8);
  if (v8 == a2) {
LABEL_12:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  if (v8 == a3) {
    return a3;
  }
  while (LOBYTE(v8->__traits_.__loc_.__locale_) == 124)
  {
    uint64_t v9 = *(void *)(a1 + 56);
    uint64_t v10 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    unsigned int v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1), a3);
    if (v11 == (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1)) {
      goto LABEL_12;
    }
    do
    {
      uint64_t v8 = v11;
      unsigned int v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, v11, a3);
    }
    while (v11 != v8);
    if (v8 == v10) {
      goto LABEL_12;
    }
    int v12 = operator new(0x18uLL);
    uint64_t v13 = *(void *)(v9 + 8);
    v12[1] = *(void *)(v6 + 8);
    v12[2] = v13;
    *int v12 = &unk_26E93AF88;
    *(void *)(v6 + 8) = v12;
    *(void *)(v9 + 8) = 0;
    uint64_t v14 = operator new(0x10uLL);
    uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 8);
    v14[1] = v15;
    *(void *)(v9 + 8) = v14;
    *(void *)(*(void *)(a1 + 56) + 8) = 0;
    uint64_t v16 = operator new(0x10uLL);
    uint64_t v17 = *(void *)(v9 + 8);
    *uint64_t v16 = &unk_26E93AFD0;
    v16[1] = v17;
    *(void *)(*(void *)(a1 + 56) + 8) = v16;
    *(void *)(a1 + 56) = *(void *)(v9 + 8);
    if (v8 == a3) {
      return a3;
    }
  }
  return v8;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_grep<char const*>(uint64_t a1, char *__s, char *a3)
{
  uint64_t v6 = *(void *)(a1 + 56);
  BOOL v7 = (char *)memchr(__s, 10, a3 - __s);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = a3;
  }
  if (v8 == __s)
  {
    uint64_t v10 = operator new(0x10uLL);
    uint64_t v11 = *(void *)(v6 + 8);
    v10[1] = v11;
    *(void *)(v6 + 8) = v10;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    if (v8 == a3) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = v8 + 1;
    }
    if (v9 == a3) {
      return a3;
    }
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, __s, v8);
    if (v8 == a3) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = v8 + 1;
    }
    if (v9 == a3) {
      return a3;
    }
  }
  uint64_t v12 = *(void *)(a1 + 56);
  do
  {
    uint64_t v21 = (char *)memchr(v9, 10, a3 - v9);
    if (v21) {
      uint64_t v22 = v21;
    }
    else {
      uint64_t v22 = a3;
    }
    if (v22 == v9)
    {
      uint64_t v13 = operator new(0x10uLL);
      uint64_t v14 = *(void *)(v12 + 8);
      v13[1] = v14;
      *(void *)(v12 + 8) = v13;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, v9, v22);
    }
    uint64_t v15 = operator new(0x18uLL);
    uint64_t v16 = *(void *)(v12 + 8);
    v15[1] = *(void *)(v6 + 8);
    v15[2] = v16;
    *uint64_t v15 = &unk_26E93AF88;
    *(void *)(v6 + 8) = v15;
    *(void *)(v12 + 8) = 0;
    uint64_t v17 = operator new(0x10uLL);
    uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8);
    v17[1] = v18;
    *(void *)(v12 + 8) = v17;
    *(void *)(*(void *)(a1 + 56) + 8) = 0;
    uint64_t v19 = operator new(0x10uLL);
    uint64_t v20 = *(void *)(v12 + 8);
    void *v19 = &unk_26E93AFD0;
    v19[1] = v20;
    *(void *)(*(void *)(a1 + 56) + 8) = v19;
    uint64_t v12 = *(void *)(v12 + 8);
    *(void *)(a1 + 56) = v12;
    if (v22 == a3) {
      uint64_t v9 = v22;
    }
    else {
      uint64_t v9 = v22 + 1;
    }
  }
  while (v9 != a3);
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<char const*>(uint64_t a1, std::basic_regex<char> *__s, std::basic_regex<char> *a3)
{
  uint64_t v6 = *(void *)(a1 + 56);
  BOOL v7 = (std::basic_regex<char> *)memchr(__s, 10, (char *)a3 - (char *)__s);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = a3;
  }
  if (v8 == __s)
  {
    uint64_t v10 = operator new(0x10uLL);
    uint64_t v11 = *(void *)(v6 + 8);
    v10[1] = v11;
    *(void *)(v6 + 8) = v10;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    if (v8 == a3) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    }
    if (v9 == a3) {
      return a3;
    }
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, __s, v8);
    if (v8 == a3) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    }
    if (v9 == a3) {
      return a3;
    }
  }
  uint64_t v12 = *(void *)(a1 + 56);
  do
  {
    uint64_t v21 = (std::basic_regex<char> *)memchr(v9, 10, (char *)a3 - (char *)v9);
    if (v21) {
      uint64_t v22 = v21;
    }
    else {
      uint64_t v22 = a3;
    }
    if (v22 == v9)
    {
      uint64_t v13 = operator new(0x10uLL);
      uint64_t v14 = *(void *)(v12 + 8);
      v13[1] = v14;
      *(void *)(v12 + 8) = v13;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, v9, v22);
    }
    uint64_t v15 = operator new(0x18uLL);
    uint64_t v16 = *(void *)(v12 + 8);
    v15[1] = *(void *)(v6 + 8);
    v15[2] = v16;
    *uint64_t v15 = &unk_26E93AF88;
    *(void *)(v6 + 8) = v15;
    *(void *)(v12 + 8) = 0;
    uint64_t v17 = operator new(0x10uLL);
    uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8);
    v17[1] = v18;
    *(void *)(v12 + 8) = v17;
    *(void *)(*(void *)(a1 + 56) + 8) = 0;
    uint64_t v19 = operator new(0x10uLL);
    uint64_t v20 = *(void *)(v12 + 8);
    void *v19 = &unk_26E93AFD0;
    v19[1] = v20;
    *(void *)(*(void *)(a1 + 56) + 8) = v19;
    uint64_t v12 = *(void *)(v12 + 8);
    *(void *)(a1 + 56) = v12;
    if (v22 == a3) {
      uint64_t v9 = v22;
    }
    else {
      uint64_t v9 = (std::basic_regex<char> *)((char *)&v22->__traits_.__loc_.__locale_ + 1);
    }
  }
  while (v9 != a3);
  return a3;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x237DF6E70](exception, 14);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_235DBD5F0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__end_state<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

void std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000235E70769) {
    return a1 + 24;
  }
  if (((v3 & 0x8000000235E70769 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000235E70769)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000235E70769 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void (__cdecl ***std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__empty_state<char>::~__empty_state(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

void std::__empty_state<char>::__exec(const std::__empty_state<char> *this, std::__empty_state<char>::__state *a2)
{
  a2->__do_ = -994;
  a2->__node_ = this->__first_;
}

void std::__owns_one_state<char>::~__owns_one_state(std::__owns_one_state<char> *this)
{
  first = this->__first_;
  if (first) {
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  }
}

{
  std::__node<char> *first;
  uint64_t vars8;

  first = this->__first_;
  if (first) {
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  }

  operator delete(this);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(uint64_t a1, char *a2, char *a3)
{
  if (a2 == a3) {
    return a2;
  }
  int v6 = *a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 != a3)
      {
        int v14 = a2[1];
        if (v14 == 66)
        {
          uint64_t v15 = (char *)operator new(0x30uLL);
          uint64_t v23 = *(void *)(*(void *)(a1 + 56) + 8);
          *(void *)uint64_t v15 = &unk_26E93AB50;
          *((void *)v15 + 1) = v23;
          std::locale::locale((std::locale *)v15 + 2, (const std::locale *)a1);
          *(_OWORD *)(v15 + 24) = *(_OWORD *)(a1 + 8);
          v15[40] = 1;
        }
        else
        {
          if (v14 != 98) {
            return a2;
          }
          uint64_t v15 = (char *)operator new(0x30uLL);
          uint64_t v16 = *(void *)(*(void *)(a1 + 56) + 8);
          *(void *)uint64_t v15 = &unk_26E93AB50;
          *((void *)v15 + 1) = v16;
          std::locale::locale((std::locale *)v15 + 2, (const std::locale *)a1);
          *(_OWORD *)(v15 + 24) = *(_OWORD *)(a1 + 8);
          v15[40] = 0;
        }
        *(void *)(*(void *)(a1 + 56) + 8) = v15;
        *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
        return a2 + 2;
      }
      return a2;
    }
    if (v6 != 94) {
      return a2;
    }
    uint64_t v10 = operator new(0x18uLL);
    BOOL v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    uint64_t v12 = *(void *)(a1 + 56);
    v10[1] = *(void *)(v12 + 8);
    uint64_t v13 = &unk_26E93AAC0;
LABEL_14:
    *uint64_t v10 = v13;
    *((unsigned char *)v10 + 16) = v11;
    *(void *)(v12 + 8) = v10;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    return a2 + 1;
  }
  if (v6 == 36)
  {
    uint64_t v10 = operator new(0x18uLL);
    BOOL v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    uint64_t v12 = *(void *)(a1 + 56);
    v10[1] = *(void *)(v12 + 8);
    uint64_t v13 = &unk_26E93AB08;
    goto LABEL_14;
  }
  BOOL v8 = v6 == 40;
  BOOL v7 = a2 + 1;
  BOOL v8 = !v8 || v7 == a3;
  if (v8) {
    return a2;
  }
  BOOL v8 = *v7 == 63;
  uint64_t v17 = a2 + 2;
  if (!v8 || v17 == a3) {
    return a2;
  }
  int v19 = *v17;
  if (v19 == 33)
  {
    *(void *)&long long v24 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v24 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v26.__loop_count_ = v24;
    *(_OWORD *)&v26.__start_.__cntrl_ = v24;
    *(_OWORD *)&v26.__traits_.__loc_.__locale_ = v24;
    *(_OWORD *)&v26.__traits_.__col_ = v24;
    std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v26);
    v26.__flags_ = *(_DWORD *)(a1 + 24);
    uint64_t v21 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v26, a2 + 3, a3);
    unsigned int marked_count = v26.__marked_count_;
    std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v26, 1, *(_DWORD *)(a1 + 28));
    *(_DWORD *)(a1 + 28) += marked_count;
    if (v21 == a3 || *v21 != 41) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    goto LABEL_32;
  }
  if (v19 != 61) {
    return a2;
  }
  *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v26.__loop_count_ = v20;
  *(_OWORD *)&v26.__start_.__cntrl_ = v20;
  *(_OWORD *)&v26.__traits_.__loc_.__locale_ = v20;
  *(_OWORD *)&v26.__traits_.__col_ = v20;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v26);
  v26.__flags_ = *(_DWORD *)(a1 + 24);
  uint64_t v21 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v26, a2 + 3, a3);
  unsigned int v22 = v26.__marked_count_;
  std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v26, 0, *(_DWORD *)(a1 + 28));
  *(_DWORD *)(a1 + 28) += v22;
  if (v21 == a3 || *v21 != 41) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
  }
LABEL_32:
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&v26.__traits_.__loc_);
  return v21 + 1;
}

void sub_235DBDC20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_235DBDC34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_235DBDC48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_235DBDC5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(std::basic_regex<char> *this, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  uint64_t v3 = a2;
  if (a2 != a3)
  {
    switch(LOBYTE(a2->__traits_.__loc_.__locale_))
    {
      case '(':
        if ((std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1) == a3) {
          goto LABEL_32;
        }
        if ((std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 2) != a3
          && BYTE1(a2->__traits_.__loc_.__locale_) == 63
          && BYTE2(a2->__traits_.__loc_.__locale_) == 58)
        {
          p_open_count = &this->__open_count_;
          ++this->__open_count_;
          BOOL v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, (char *)&a2->__traits_.__loc_.__locale_ + 3, (char *)a3);
          if (v7 == (char *)a3) {
            goto LABEL_32;
          }
          uint64_t v3 = (std::basic_regex<char> *)v7;
          if (*v7 != 41) {
            goto LABEL_32;
          }
        }
        else
        {
          if ((this->__flags_ & 2) != 0)
          {
            unsigned int marked_count = this->__marked_count_;
          }
          else
          {
            uint64_t v12 = (std::__node<char> *)operator new(0x18uLL);
            unsigned int marked_count = this->__marked_count_ + 1;
            this->__marked_count_ = marked_count;
            std::__split_buffer<std::string>::pointer end = this->__end_;
            first = end->__first_;
            v12->__vftable = (std::__node<char>_vtbl *)&unk_26E93AE20;
            v12[1].__vftable = (std::__node<char>_vtbl *)first;
            LODWORD(v12[2].__vftable) = marked_count;
            end->__first_ = v12;
            this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
          }
          p_open_count = &this->__open_count_;
          ++this->__open_count_;
          uint64_t v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, (char *)&v3->__traits_.__loc_.__locale_ + 1, (char *)a3);
          if (v16 == (char *)a3 || (uint64_t v3 = (std::basic_regex<char> *)v16, *v16 != 41)) {
LABEL_32:
          }
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
          if ((this->__flags_ & 2) == 0)
          {
            uint64_t v17 = (std::__node<char> *)operator new(0x18uLL);
            uint64_t v18 = this->__end_;
            int v19 = v18->__first_;
            v17->__vftable = (std::__node<char>_vtbl *)&unk_26E93AE68;
            v17[1].__vftable = (std::__node<char>_vtbl *)v19;
            LODWORD(v17[2].__vftable) = marked_count;
            v18->__first_ = v17;
            this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
          }
        }
        --*p_open_count;
LABEL_29:
        uint64_t v3 = (std::basic_regex<char> *)((char *)v3 + 1);
        break;
      case ')':
      case ',':
      case '-':
      case '/':
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
      case ':':
      case ';':
      case '<':
      case '=':
      case '>':
      case '@':
      case 'A':
      case 'B':
      case 'C':
      case 'D':
      case 'E':
      case 'F':
      case 'G':
      case 'H':
      case 'I':
      case 'J':
      case 'K':
      case 'L':
      case 'M':
      case 'N':
      case 'O':
      case 'P':
      case 'Q':
      case 'R':
      case 'S':
      case 'T':
      case 'U':
      case 'V':
      case 'W':
      case 'X':
      case 'Y':
      case 'Z':
        goto LABEL_20;
      case '*':
      case '+':
      case '?':
        goto LABEL_31;
      case '.':
        BOOL v8 = (std::__node<char> *)operator new(0x10uLL);
        uint64_t v9 = this->__end_;
        uint64_t v10 = v9->__first_;
        v8->__vftable = (std::__node<char>_vtbl *)&unk_26E93ABE0;
        v8[1].__vftable = (std::__node<char>_vtbl *)v10;
        v9->__first_ = v8;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
        goto LABEL_29;
      case '[':
        return (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, (char *)a2, (char *)a3);
      case '\\':
        return std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<char const*>(this, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
      default:
        if (LOBYTE(a2->__traits_.__loc_.__locale_) == 123) {
LABEL_31:
        }
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
LABEL_20:
        return (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(this, a2, a3);
    }
  }
  return (unsigned __int8 *)v3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(uint64_t a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  if (this == a3) {
    return this;
  }
  int v6 = *(_DWORD *)(a1 + 24) & 0x1F0;
  int locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low <= 62)
  {
    if (locale_low == 42)
    {
      BOOL v8 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      if (v6) {
        BOOL v20 = 1;
      }
      else {
        BOOL v20 = v8 == a3;
      }
      if (!v20 && LOBYTE(v8->__traits_.__loc_.__locale_) == 63)
      {
        uint64_t v9 = (char *)&this->__traits_.__loc_.__locale_ + 2;
        __mexp_std::__split_buffer<std::string>::pointer begin = __mexp_begin;
        __mexp_std::__split_buffer<std::string>::pointer end = __mexp_end;
        size_t v10 = 0;
        goto LABEL_35;
      }
      __mexp_std::__split_buffer<std::string>::pointer begin = __mexp_begin;
      __mexp_std::__split_buffer<std::string>::pointer end = __mexp_end;
      size_t v24 = 0;
      goto LABEL_44;
    }
    if (locale_low == 43)
    {
      BOOL v8 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      if (!v6 && v8 != a3 && LOBYTE(v8->__traits_.__loc_.__locale_) == 63)
      {
        uint64_t v9 = (char *)&this->__traits_.__loc_.__locale_ + 2;
        __mexp_std::__split_buffer<std::string>::pointer begin = __mexp_begin;
        __mexp_std::__split_buffer<std::string>::pointer end = __mexp_end;
        size_t v10 = 1;
LABEL_35:
        std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v10, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 0);
        return (std::basic_regex<char> *)v9;
      }
      __mexp_std::__split_buffer<std::string>::pointer begin = __mexp_begin;
      __mexp_std::__split_buffer<std::string>::pointer end = __mexp_end;
      size_t v24 = 1;
      goto LABEL_44;
    }
    return this;
  }
  if (locale_low == 63)
  {
    uint64_t v21 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
    if (v6) {
      BOOL v22 = 1;
    }
    else {
      BOOL v22 = v21 == a3;
    }
    if (v22 || LOBYTE(v21->__traits_.__loc_.__locale_) != 63)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, 0, 1uLL, a4, __mexp_begin, __mexp_end, 1);
      return v21;
    }
    else
    {
      uint64_t v23 = (char *)&this->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, 0, 1uLL, a4, __mexp_begin, __mexp_end, 0);
      return (std::basic_regex<char> *)v23;
    }
  }
  else
  {
    if (locale_low != 123) {
      return this;
    }
    BOOL v11 = (char *)&this->__traits_.__loc_.__locale_ + 1;
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3) {
      goto LABEL_71;
    }
    int v12 = *v11;
    if ((v12 & 0xF8) != 0x30 && (v12 & 0xFE) != 0x38) {
      goto LABEL_71;
    }
    int v13 = v12 - 48;
    int v14 = (char *)&this->__traits_.__loc_.__locale_ + 2;
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) == a3)
    {
LABEL_19:
      int v14 = (char *)a3;
    }
    else
    {
      while (1)
      {
        int v15 = *v14;
        if ((v15 & 0xF8) != 0x30 && (v15 & 0xFE) != 0x38) {
          break;
        }
        if (v13 >= 214748364) {
          goto LABEL_71;
        }
        int v13 = v15 + 10 * v13 - 48;
        if (++v14 == (char *)a3) {
          goto LABEL_19;
        }
      }
    }
    if (v14 == v11) {
      goto LABEL_71;
    }
    if (v14 == (char *)a3) {
      goto LABEL_72;
    }
    int v16 = *v14;
    if (v16 != 44)
    {
      if (v16 == 125)
      {
        uint64_t v17 = (std::basic_regex<char> *)(v14 + 1);
        if (v6 || v17 == a3 || LOBYTE(v17->__traits_.__loc_.__locale_) != 63)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v13, v13, a4, __mexp_begin, __mexp_end, 1);
          return v17;
        }
        else
        {
          uint64_t v18 = (unsigned __int8 *)(v14 + 2);
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v13, v13, a4, __mexp_begin, __mexp_end, 0);
          return (std::basic_regex<char> *)v18;
        }
      }
LABEL_71:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
    }
    timespec v25 = (std::basic_regex<char> *)(v14 + 1);
    if (v14 + 1 == (char *)a3) {
      goto LABEL_71;
    }
    int v26 = LOBYTE(v25->__traits_.__loc_.__locale_);
    if (v26 == 125)
    {
      BOOL v8 = (std::basic_regex<char> *)(v14 + 2);
      if (!v6 && v8 != a3 && LOBYTE(v8->__traits_.__loc_.__locale_) == 63)
      {
        size_t v10 = v13;
        uint64_t v9 = v14 + 3;
        __mexp_std::__split_buffer<std::string>::pointer begin = __mexp_begin;
        __mexp_std::__split_buffer<std::string>::pointer end = __mexp_end;
        goto LABEL_35;
      }
      size_t v24 = v13;
      __mexp_std::__split_buffer<std::string>::pointer begin = __mexp_begin;
      __mexp_std::__split_buffer<std::string>::pointer end = __mexp_end;
LABEL_44:
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v24, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
      return v8;
    }
    if ((v26 & 0xF8) != 0x30 && (v26 & 0xFE) != 0x38) {
      goto LABEL_72;
    }
    int v27 = v26 - 48;
    unint64_t v28 = (std::basic_regex<char> *)(v14 + 2);
    if (v28 == a3)
    {
LABEL_60:
      unint64_t v28 = a3;
    }
    else
    {
      while (1)
      {
        int v29 = LOBYTE(v28->__traits_.__loc_.__locale_);
        if ((v29 & 0xF8) != 0x30 && (v29 & 0xFE) != 0x38) {
          break;
        }
        if (v27 >= 214748364) {
          goto LABEL_71;
        }
        int v27 = v29 + 10 * v27 - 48;
        unint64_t v28 = (std::basic_regex<char> *)((char *)v28 + 1);
        if (v28 == a3) {
          goto LABEL_60;
        }
      }
    }
    if (v28 == v25 || v28 == a3 || LOBYTE(v28->__traits_.__loc_.__locale_) != 125) {
LABEL_72:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    if (v27 < v13) {
      goto LABEL_71;
    }
    uint64_t v30 = (std::basic_regex<char> *)((char *)&v28->__traits_.__loc_.__locale_ + 1);
    if (v6 || v30 == a3 || LOBYTE(v30->__traits_.__loc_.__locale_) != 63)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v13, v27, a4, __mexp_begin, __mexp_end, 1);
      return v30;
    }
    else
    {
      uint64_t v31 = (char *)&v28->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v13, v27, a4, __mexp_begin, __mexp_end, 0);
      return (std::basic_regex<char> *)v31;
    }
  }
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = (const std::locale *)MEMORY[0x237DF70D0]();
  *(void *)(a1 + 8) = std::locale::use_facet(v2, MEMORY[0x263F8C108]);
  *(void *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x263F8C130]);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = 0;
  return a1;
}

void sub_235DBE444(_Unwind_Exception *a1)
{
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(std::basic_regex<char> *this, const std::basic_regex<char> *a2, BOOL a3, unsigned int a4)
{
  BOOL v8 = (char *)operator new(0x58uLL);
  first = this->__end_->__first_;
  *(void *)BOOL v8 = &unk_26E93AB98;
  *((void *)v8 + 1) = first;
  std::locale::locale((std::locale *)v8 + 2, &a2->__traits_.__loc_);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)&a2->__traits_.__ct_;
  *(_OWORD *)(v8 + 40) = *(_OWORD *)&a2->__flags_;
  cntrl = a2->__start_.__cntrl_;
  *((void *)v8 + 7) = a2->__start_.__ptr_;
  *((void *)v8 + 8) = cntrl;
  if (cntrl) {
    atomic_fetch_add_explicit(&cntrl->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)v8 + 9) = a2->__end_;
  *((_DWORD *)v8 + 20) = a4;
  v8[84] = a3;
  this->__end_->__first_ = (std::__node<char> *)v8;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x237DF6E70](exception, 6);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_235DBE55C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

uint64_t std::__l_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 92))
  {
    if (!*(unsigned char *)(result + 16)) {
      goto LABEL_12;
    }
    int v2 = *(unsigned __int8 *)(*(void *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10) {
      goto LABEL_12;
    }
LABEL_11:
    *(_DWORD *)a2 = -994;
    *(void *)(a2 + 80) = *(void *)(result + 8);
    return result;
  }
  if (*(void *)(a2 + 16) == *(void *)(a2 + 8) && (*(unsigned char *)(a2 + 88) & 1) == 0) {
    goto LABEL_11;
  }
LABEL_12:
  *(_DWORD *)a2 = -993;
  *(void *)(a2 + 80) = 0;
  return result;
}

void (__cdecl ***std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  int v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

uint64_t std::__r_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(unsigned char *)(a2 + 88) & 2) == 0
    || *(unsigned char *)(result + 16) && ((int v3 = *v2, v3 != 13) ? (v4 = v3 == 10) : (v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    *(void *)(a2 + 80) = *(void *)(result + 8);
  }
  else
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  return result;
}

std::locale *std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26E93AB50;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26E93AB50;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  operator delete(a1);
}

uint64_t std::__word_boundary<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 **)(a2 + 8);
  int v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3) {
    goto LABEL_19;
  }
  BOOL v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 != v3)
  {
    if (v4 == v2)
    {
      int v5 = *(_DWORD *)(a2 + 88);
      if ((v5 & 0x80) == 0)
      {
        if ((v5 & 4) == 0)
        {
          uint64_t v6 = *v2;
          if (v6 == 95) {
            goto LABEL_17;
          }
          goto LABEL_15;
        }
        goto LABEL_19;
      }
    }
    uint64_t v7 = *(v4 - 1);
    uint64_t v8 = *v4;
    if (v7 == 95
      || (v7 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v7) & 0x500) != 0)
    {
      int v9 = 1;
      if (v8 == 95) {
        goto LABEL_24;
      }
    }
    else
    {
      int v9 = 0;
      if (v8 == 95) {
        goto LABEL_24;
      }
    }
    if ((v8 & 0x80) != 0 || (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v8) & 0x500) == 0)
    {
      if (*(unsigned char *)(result + 40) == (v9 != 0)) {
        goto LABEL_20;
      }
      goto LABEL_27;
    }
LABEL_24:
    if (*(unsigned char *)(result + 40) != (v9 != 1)) {
      goto LABEL_27;
    }
    goto LABEL_20;
  }
  if ((*(unsigned char *)(a2 + 88) & 8) == 0)
  {
    uint64_t v6 = *(v3 - 1);
    if (v6 == 95) {
      goto LABEL_17;
    }
LABEL_15:
    if ((v6 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
    {
LABEL_17:
      if (*(unsigned char *)(result + 40) != 1) {
        goto LABEL_27;
      }
LABEL_20:
      *(_DWORD *)a2 = -993;
      *(void *)(a2 + 80) = 0;
      return result;
    }
  }
LABEL_19:
  if (!*(unsigned char *)(result + 40)) {
    goto LABEL_20;
  }
LABEL_27:
  uint64_t v10 = *(void *)(result + 8);
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = v10;
  return result;
}

std::locale *std::__lookahead<char,std::regex_traits<char>>::~__lookahead(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26E93AB98;
  int v2 = a1 + 2;
  locale = (std::__shared_weak_count *)a1[8].__locale_;
  if (locale && !atomic_fetch_add(&locale->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
    std::__shared_weak_count::__release_weak(locale);
    std::locale::~locale(v2);
    BOOL v4 = a1[1].__locale_;
    if (!v4) {
      return a1;
    }
    goto LABEL_4;
  }
  std::locale::~locale(a1 + 2);
  BOOL v4 = a1[1].__locale_;
  if (v4) {
LABEL_4:
  }
    (*(void (**)(std::locale::__imp *))(*(void *)v4 + 8))(v4);
  return a1;
}

void std::__lookahead<char,std::regex_traits<char>>::~__lookahead(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26E93AB98;
  int v2 = a1 + 2;
  locale = (std::__shared_weak_count *)a1[8].__locale_;
  if (!locale || atomic_fetch_add(&locale->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    std::locale::~locale(a1 + 2);
    BOOL v4 = a1[1].__locale_;
    if (!v4) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
  std::__shared_weak_count::__release_weak(locale);
  std::locale::~locale(v2);
  BOOL v4 = a1[1].__locale_;
  if (v4) {
LABEL_4:
  }
    (*(void (**)(std::locale::__imp *))(*(void *)v4 + 8))(v4);
LABEL_5:

  operator delete(a1);
}

void std::__lookahead<char,std::regex_traits<char>>::__exec(uint64_t a1, uint64_t a2)
{
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v20 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v22 = 0xAAAAAAAAAAAAAA00;
  long long v24 = v4;
  uint64_t v21 = 0;
  long long v23 = 0uLL;
  LOBYTE(v24) = 0;
  BYTE8(v24) = 0;
  uint64_t v25 = 0;
  memset(&__p, 0, sizeof(__p));
  std::vector<std::csub_match>::size_type v5 = (*(_DWORD *)(a1 + 44) + 1);
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)&long long v19 = *(void *)(a2 + 24);
  *((void *)&v19 + 1) = v19;
  LOBYTE(v20) = 0;
  std::vector<std::sub_match<char const*>>::assign(&__p, v5, (std::vector<std::csub_match>::const_reference)&v19);
  *((void *)&v20 + 1) = v6;
  uint64_t v21 = v6;
  LOBYTE(v22) = 0;
  long long v23 = v19;
  LOBYTE(v24) = v20;
  uint64_t v25 = v6;
  BYTE8(v24) = 1;
  uint64_t v7 = *(const char **)(a2 + 16);
  if (*(unsigned char *)(a2 + 92)) {
    BOOL v8 = v7 == *(const char **)(a2 + 8);
  }
  else {
    BOOL v8 = 0;
  }
  char v9 = v8;
  if (*(unsigned __int8 *)(a1 + 84) == std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1 + 16, v7, *(const char **)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v9))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
    std::__split_buffer<std::string>::pointer begin = __p.__begin_;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(a1 + 8);
  std::__split_buffer<std::string>::pointer begin = __p.__begin_;
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
  if (v11 < 2)
  {
LABEL_13:
    if (!begin) {
      return;
    }
    goto LABEL_14;
  }
  int v12 = 0;
  int v13 = *(_DWORD *)(a1 + 80);
  uint64_t v14 = *(void *)(a2 + 32);
  unint64_t v15 = 1;
  do
  {
    int v16 = &begin[v15];
    uint64_t v17 = v14 + 24 * (v13 + v12);
    *(std::pair<const char *, const char *> *)uint64_t v17 = v16->std::pair<const char *, const char *>;
    *(unsigned char *)(v17 + 16) = v16->matched;
    unint64_t v15 = (v12 + 2);
    ++v12;
  }
  while (v11 > v15);
LABEL_14:
  __p.__end_ = begin;
  operator delete(begin);
}

void sub_235DBEE24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  v48 = 0;
  uint64_t v49 = 0;
  unint64_t v50 = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  if (!v6) {
    return 0;
  }
  __x.second = a3;
  *(void *)&__x.matched = 0xAAAAAAAAAAAAAA00;
  __x.first = a3;
  *(_DWORD *)v46 = 0;
  memset(&v46[8], 0, 85);
  uint64_t v49 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v48, (uint64_t)v46);
  if (*(void *)&v46[56])
  {
    *(void *)&v46[64] = *(void *)&v46[56];
    operator delete(*(void **)&v46[56]);
  }
  if (*(void *)&v46[32])
  {
    *(void *)&v46[40] = *(void *)&v46[32];
    operator delete(*(void **)&v46[32]);
  }
  int v13 = v49;
  *((_DWORD *)v49 - 24) = 0;
  *((void *)v13 - 11) = a2;
  *((void *)v13 - 10) = a2;
  *((void *)v13 - 9) = a3;
  uint64_t v14 = *((void *)v13 - 8);
  unint64_t v15 = *(unsigned int *)(a1 + 28);
  unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((*((void *)v13 - 7) - v14) >> 3);
  if (v15 <= v16)
  {
    if (v15 < v16) {
      *((void *)v13 - 7) = v14 + 24 * v15;
    }
  }
  else
  {
    std::vector<std::sub_match<char const*>>::__append((std::vector<std::csub_match> *)(v13 - 64), v15 - v16, &__x);
    int v13 = v49;
  }
  uint64_t v18 = *((void *)v13 - 5);
  unint64_t v19 = *(unsigned int *)(a1 + 32);
  unint64_t v20 = (*((void *)v13 - 4) - v18) >> 4;
  if (v19 <= v20)
  {
    if (v19 < v20) {
      *((void *)v13 - 4) = v18 + 16 * v19;
    }
  }
  else
  {
    std::vector<std::pair<unsigned long,char const*>>::__append((std::vector<std::pair<unsigned long, const char *>> *)(v13 - 40), v19 - v20);
    int v13 = v49;
  }
  *((void *)v13 - 2) = v6;
  *((_DWORD *)v13 - 2) = a5;
  *(v13 - 4) = a6;
  unsigned int v21 = 1;
  while (2)
  {
    if ((v21 & 0xFFF) == 0 && (int)(v21 >> 12) >= (int)a3 - (int)a2) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
    }
    uint64_t v23 = *((void *)v13 - 2);
    if (v23) {
      (*(void (**)(uint64_t, char *))(*(void *)v23 + 16))(v23, v13 - 96);
    }
    switch(*((_DWORD *)v13 - 24))
    {
      case 0xFFFFFC18:
        long long v24 = (const char *)*((void *)v13 - 10);
        if ((a5 & 0x20) != 0 && v24 == a2 || (a5 & 0x1000) != 0 && v24 != a3) {
          goto LABEL_27;
        }
        uint64_t v37 = *a4;
        *(void *)uint64_t v37 = a2;
        *(void *)(v37 + 8) = v24;
        *(unsigned char *)(v37 + 16) = 1;
        uint64_t v38 = *((void *)v13 - 8);
        uint64_t v39 = *((void *)v13 - 7) - v38;
        if (v39)
        {
          unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * (v39 >> 3);
          int v41 = (unsigned char *)(v38 + 16);
          unsigned int v42 = 1;
          do
          {
            uint64_t v43 = v37 + 24 * v42;
            *(_OWORD *)uint64_t v43 = *((_OWORD *)v41 - 1);
            char v44 = *v41;
            v41 += 24;
            *(unsigned char *)(v43 + 16) = v44;
          }
          while (v40 > v42++);
        }
        uint64_t v17 = 1;
        unint64_t v22 = v48;
        if (!v48) {
          return v17;
        }
        goto LABEL_38;
      case 0xFFFFFC1D:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        goto LABEL_17;
      case 0xFFFFFC1F:
LABEL_27:
        uint64_t v25 = v49;
        int v26 = (void *)*((void *)v49 - 5);
        if (v26)
        {
          *((void *)v49 - 4) = v26;
          operator delete(v26);
        }
        int v27 = (void *)*((void *)v25 - 8);
        if (v27)
        {
          *((void *)v25 - 7) = v27;
          operator delete(v27);
        }
        uint64_t v49 = v25 - 96;
        goto LABEL_17;
      case 0xFFFFFC20:
        *(void *)&long long v28 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v28 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v46[64] = v28;
        *(_OWORD *)&v46[80] = v28;
        *(_OWORD *)&v46[32] = v28;
        *(_OWORD *)&v46[48] = v28;
        *(_OWORD *)v46 = v28;
        *(_OWORD *)&v46[16] = v28;
        std::__state<char>::__state((uint64_t)v46, (long long *)v13 - 6);
        (*(void (**)(void, uint64_t, char *))(**((void **)v13 - 2) + 24))(*((void *)v13 - 2), 1, v13 - 96);
        (*(void (**)(void, void, unsigned char *))(**(void **)&v46[80] + 24))(*(void *)&v46[80], 0, v46);
        int v29 = v49;
        if ((unint64_t)v49 >= v50)
        {
          uint64_t v49 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v48, (uint64_t)v46);
          if (*(void *)&v46[56])
          {
            *(void *)&v46[64] = *(void *)&v46[56];
            operator delete(*(void **)&v46[56]);
          }
        }
        else
        {
          long long v30 = *(_OWORD *)&v46[16];
          *(_OWORD *)uint64_t v49 = *(_OWORD *)v46;
          *((_OWORD *)v29 + 1) = v30;
          *((void *)v29 + 4) = 0;
          *((void *)v29 + 5) = 0;
          *((void *)v29 + 6) = 0;
          *((void *)v29 + 7) = 0;
          *((_OWORD *)v29 + 2) = *(_OWORD *)&v46[32];
          *((void *)v29 + 6) = *(void *)&v46[48];
          memset(&v46[32], 0, 24);
          *((void *)v29 + 8) = 0;
          *((void *)v29 + 9) = 0;
          *(_OWORD *)(v29 + 56) = *(_OWORD *)&v46[56];
          *((void *)v29 + 9) = *(void *)&v46[72];
          memset(&v46[56], 0, 24);
          uint64_t v31 = *(void *)&v46[80];
          *(void *)(v29 + 85) = *(void *)&v46[85];
          *((void *)v29 + 10) = v31;
          uint64_t v49 = v29 + 96;
        }
        if (*(void *)&v46[32])
        {
          *(void *)&v46[40] = *(void *)&v46[32];
          operator delete(*(void **)&v46[32]);
        }
LABEL_17:
        unint64_t v22 = v48;
        int v13 = v49;
        ++v21;
        if (v48 != v49) {
          continue;
        }
        uint64_t v17 = 0;
        if (v48)
        {
LABEL_38:
          uint64_t v32 = v49;
          v33 = v22;
          if (v49 != v22)
          {
            do
            {
              uint64_t v34 = (void *)*((void *)v32 - 5);
              if (v34)
              {
                *((void *)v32 - 4) = v34;
                operator delete(v34);
              }
              long long v35 = (void *)*((void *)v32 - 8);
              if (v35)
              {
                *((void *)v32 - 7) = v35;
                operator delete(v35);
              }
              v32 -= 96;
            }
            while (v32 != v22);
            v33 = v48;
          }
          uint64_t v49 = v22;
          operator delete(v33);
        }
        break;
      default:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
    }
    return v17;
  }
}

void sub_235DBF2A4(_Unwind_Exception *a1)
{
  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_235DBF2B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__state<char>::~__state((uint64_t *)va);
  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v3 - 112));
  _Unwind_Resume(a1);
}

void sub_235DBF300(_Unwind_Exception *a1)
{
  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_235DBF314(_Unwind_Exception *a1)
{
  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void std::vector<std::sub_match<char const*>>::assign(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __u)
{
  value = this->__end_cap_.__value_;
  std::__split_buffer<std::string>::pointer begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3) < __n)
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    if (__n > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_26;
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)value >> 3);
    std::vector<std::csub_match>::size_type v9 = 2 * v8;
    if (2 * v8 <= __n) {
      std::vector<std::csub_match>::size_type v9 = __n;
    }
    unint64_t v10 = v8 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v9;
    if (v10 > 0xAAAAAAAAAAAAAAALL) {
LABEL_26:
    }
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    uint64_t v11 = v10;
    int v12 = (std::sub_match<const char *> *)operator new(24 * v10);
    this->__begin_ = v12;
    this->__end_ = v12;
    this->__end_cap_.__value_ = &v12[v11];
    std::vector<std::csub_match>::size_type v13 = 24 * __n;
    uint64_t v14 = &v12[__n];
    do
    {
      v12->std::pair<const char *, const char *> = __u->std::pair<const char *, const char *>;
      *(void *)&v12->matched = *(void *)&__u->matched;
      ++v12;
      v13 -= 24;
    }
    while (v13);
    goto LABEL_25;
  }
  std::vector<std::csub_match>::pointer end = this->__end_;
  unint64_t v16 = end - begin;
  if (v16 >= __n) {
    std::vector<std::csub_match>::size_type v17 = __n;
  }
  else {
    std::vector<std::csub_match>::size_type v17 = end - begin;
  }
  if (v17)
  {
    uint64_t v18 = begin;
    do
    {
      *v18++ = *__u;
      --v17;
    }
    while (v17);
  }
  if (__n <= v16)
  {
    uint64_t v14 = &begin[__n];
LABEL_25:
    this->__end_ = v14;
    return;
  }
  unint64_t v19 = &end[__n - v16];
  std::vector<std::csub_match>::size_type v20 = 24 * __n - 24 * v16;
  do
  {
    std::pair<const char *, const char *> v21 = __u->std::pair<const char *, const char *>;
    *(void *)&end->matched = *(void *)&__u->matched;
    end->std::pair<const char *, const char *> = v21;
    ++end;
    v20 -= 24;
  }
  while (v20);
  this->__end_ = v19;
}

void *std::__state<char>::~__state(void *a1)
{
  int v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x237DF6E70](exception, 12);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_235DBF574(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x237DF6E70](exception, 16);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_235DBF5CC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void **std::vector<std::__state<char>>::~vector[abi:ne180100](void **a1)
{
  int v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    long long v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        std::vector<std::csub_match>::size_type v5 = (void *)*((void *)v3 - 5);
        if (v5)
        {
          *((void *)v3 - 4) = v5;
          operator delete(v5);
        }
        uint64_t v6 = (void *)*((void *)v3 - 8);
        if (v6)
        {
          *((void *)v3 - 7) = v6;
          operator delete(v6);
        }
        v3 -= 96;
      }
      while (v3 != v2);
      long long v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

char *std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(void **a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 5);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x2AAAAAAAAAAAAAALL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 5) >= 0x155555555555555) {
    unint64_t v6 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(96 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  long long v8 = *(_OWORD *)(a2 + 16);
  std::vector<std::csub_match>::size_type v9 = &v7[96 * v3];
  *(_OWORD *)std::vector<std::csub_match>::size_type v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v8;
  unint64_t v10 = &v7[96 * v6];
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((void *)v9 + 6) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(v9 + 85) = *(void *)(a2 + 85);
  uint64_t v11 = *(void *)(a2 + 72);
  uint64_t v12 = *(void *)(a2 + 80);
  *((void *)v9 + 9) = 0;
  *((void *)v9 + 10) = v12;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 + 56);
  *((void *)v9 + 9) = v11;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  std::vector<std::csub_match>::size_type v13 = v9 + 96;
  uint64_t v14 = (char *)*a1;
  unint64_t v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v9;
    a1[1] = v13;
    a1[2] = v10;
  }
  else
  {
    uint64_t v16 = 0;
    do
    {
      std::vector<std::csub_match>::size_type v17 = &v9[v16];
      uint64_t v18 = &v15[v16];
      long long v19 = *(_OWORD *)&v15[v16 - 80];
      *((_OWORD *)v17 - 6) = *(_OWORD *)&v15[v16 - 96];
      *((_OWORD *)v17 - 5) = v19;
      *((void *)v17 - 7) = 0;
      *((void *)v17 - 6) = 0;
      *((_OWORD *)v17 - 4) = *(_OWORD *)&v15[v16 - 64];
      *((void *)v17 - 6) = *(void *)&v15[v16 - 48];
      *((void *)v18 - 8) = 0;
      *((void *)v18 - 7) = 0;
      *((void *)v18 - 6) = 0;
      *((void *)v17 - 4) = 0;
      *((void *)v17 - 3) = 0;
      *(_OWORD *)(v17 - 40) = *(_OWORD *)&v15[v16 - 40];
      *((void *)v17 - 3) = *(void *)&v15[v16 - 24];
      *((void *)v18 - 5) = 0;
      *((void *)v18 - 4) = 0;
      *((void *)v18 - 3) = 0;
      uint64_t v20 = *(void *)&v15[v16 - 16];
      *(void *)(v17 - 11) = *(void *)&v15[v16 - 11];
      *((void *)v17 - 2) = v20;
      v16 -= 96;
    }
    while (&v15[v16] != v14);
    unint64_t v15 = (char *)*a1;
    std::pair<const char *, const char *> v21 = (char *)a1[1];
    *a1 = &v9[v16];
    a1[1] = v13;
    a1[2] = v10;
    while (v21 != v15)
    {
      unint64_t v22 = (void *)*((void *)v21 - 5);
      if (v22)
      {
        *((void *)v21 - 4) = v22;
        operator delete(v22);
      }
      uint64_t v23 = (void *)*((void *)v21 - 8);
      if (v23)
      {
        *((void *)v21 - 7) = v23;
        operator delete(v23);
      }
      v21 -= 96;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v13;
}

void std::vector<std::sub_match<char const*>>::__append(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __x)
{
  std::vector<std::csub_match>::pointer end = this->__end_;
  value = this->__end_cap_.__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= __n)
  {
    if (__n)
    {
      std::vector<std::csub_match>::size_type v13 = &end[__n];
      std::vector<std::csub_match>::size_type v14 = 24 * __n;
      do
      {
        std::pair<const char *, const char *> v15 = __x->std::pair<const char *, const char *>;
        *(void *)&end->matched = *(void *)&__x->matched;
        end->std::pair<const char *, const char *> = v15;
        ++end;
        v14 -= 24;
      }
      while (v14);
      std::vector<std::csub_match>::pointer end = v13;
    }
    this->__end_ = end;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
    unint64_t v9 = v8 + __n;
    if (v8 + __n > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v12 = (char *)operator new(24 * v11);
    }
    else
    {
      uint64_t v12 = 0;
    }
    uint64_t v16 = (std::sub_match<const char *> *)&v12[24 * v8];
    std::vector<std::csub_match>::size_type v17 = 24 * __n;
    uint64_t v18 = &v16[__n];
    long long v19 = v16;
    do
    {
      std::pair<const char *, const char *> v20 = __x->std::pair<const char *, const char *>;
      v19[1].first = *(const char **)&__x->matched;
      std::pair<const char *, const char *> *v19 = v20;
      long long v19 = (std::pair<const char *, const char *> *)((char *)v19 + 24);
      v17 -= 24;
    }
    while (v17);
    std::vector<std::csub_match>::pointer begin = this->__begin_;
    if (end != this->__begin_)
    {
      do
      {
        std::pair<const char *, const char *> v22 = end[-1].std::pair<const char *, const char *>;
        *(void *)&v16[-1].matched = *(void *)&end[-1].matched;
        v16[-1].std::pair<const char *, const char *> = v22;
        --v16;
        --end;
      }
      while (end != begin);
      std::vector<std::csub_match>::pointer end = this->__begin_;
    }
    this->__begin_ = v16;
    this->__end_ = v18;
    this->__end_cap_.__value_ = (std::sub_match<const char *> *)&v12[24 * v11];
    if (end)
    {
      operator delete(end);
    }
  }
}

void std::vector<std::pair<unsigned long,char const*>>::__append(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __n)
{
  std::vector<std::csub_match>::pointer end = this->__end_;
  value = this->__end_cap_.__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      std::vector<std::pair<unsigned long, const char *>>::size_type v12 = 16 * __n;
      bzero(this->__end_, 16 * __n);
      std::vector<std::csub_match>::pointer end = (std::pair<unsigned long, const char *> *)((char *)end + v12);
    }
    this->__end_ = end;
  }
  else
  {
    std::vector<std::pair<unsigned long, const char *>>::pointer begin = this->__begin_;
    uint64_t v7 = end - this->__begin_;
    unint64_t v8 = v7 + __n;
    if ((v7 + __n) >> 60) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = (char *)value - (char *)begin;
    if (v9 >> 3 > v8) {
      unint64_t v8 = v9 >> 3;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 >> 60) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v11 = (char *)operator new(16 * v10);
    }
    else
    {
      unint64_t v11 = 0;
    }
    std::vector<std::csub_match>::size_type v13 = (std::pair<unsigned long, const char *> *)&v11[16 * v7];
    size_t v14 = __n;
    std::pair<const char *, const char *> v15 = (std::pair<unsigned long, const char *> *)&v11[16 * v10];
    bzero(v13, v14 * 16);
    uint64_t v16 = &v13[v14];
    if (end != begin)
    {
      do
      {
        v13[-1] = end[-1];
        --v13;
        --end;
      }
      while (end != begin);
      std::vector<std::csub_match>::pointer end = this->__begin_;
    }
    this->__begin_ = v13;
    this->__end_ = v16;
    this->__end_cap_.__value_ = v15;
    if (end)
    {
      operator delete(end);
    }
  }
}

uint64_t std::__state<char>::__state(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v7 = (unsigned char *)*((void *)a2 + 4);
  unint64_t v6 = (unsigned char *)*((void *)a2 + 5);
  int64_t v8 = v6 - v7;
  if (v6 != v7)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v8 >> 3) >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = (char *)operator new(v8);
    *(void *)(a1 + 32) = v9;
    *(void *)(a1 + 40) = v9;
    *(void *)(a1 + 48) = &v9[8 * (v8 >> 3)];
    size_t v10 = 24 * ((v8 - 24) / 0x18uLL) + 24;
    memcpy(v9, v7, v10);
    *(void *)(a1 + 40) = &v9[v10];
  }
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  std::vector<std::pair<unsigned long, const char *>>::size_type v12 = (unsigned char *)*((void *)a2 + 7);
  unint64_t v11 = (unsigned char *)*((void *)a2 + 8);
  uint64_t v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    size_t v14 = (char *)operator new(v11 - v12);
    *(void *)(a1 + 56) = v14;
    *(void *)(a1 + 64) = v14;
    *(void *)(a1 + 72) = &v14[16 * (v13 >> 4)];
    memcpy(v14, v12, v13 & 0xFFFFFFFFFFFFFFF0);
    *(void *)(a1 + 64) = &v14[v13 & 0xFFFFFFFFFFFFFFF0];
  }
  uint64_t v15 = *((void *)a2 + 10);
  *(void *)(a1 + 85) = *(void *)((char *)a2 + 85);
  *(void *)(a1 + 80) = v15;
  return a1;
}

void sub_235DBFC70(_Unwind_Exception *exception_object)
{
  long long v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 64) = v5;
    operator delete(v5);
  }
  unint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 40) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<char const*>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 == a3 || *a2 != 92) {
    return a2;
  }
  long long v5 = a2 + 1;
  if (a2 + 1 == a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  int v7 = *v5;
  unsigned int v8 = v7 - 48;
  if (v7 == 48)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v8);
    return a2 + 2;
  }
  if ((v7 - 49) > 8) {
    goto LABEL_18;
  }
  size_t v10 = a2 + 2;
  if (a2 + 2 == a3)
  {
    size_t v10 = a3;
  }
  else
  {
    while (1)
    {
      int v11 = *v10;
      if ((v11 - 48) > 9) {
        break;
      }
      if (v8 >= 0x19999999) {
        goto LABEL_23;
      }
      ++v10;
      unsigned int v8 = v11 + 10 * v8 - 48;
      if (v10 == a3)
      {
        size_t v10 = a3;
        break;
      }
    }
    if (!v8) {
LABEL_23:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  if (v8 > this->__marked_count_) {
    goto LABEL_23;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, v8);
  if (v10 == v5)
  {
LABEL_18:
    size_t v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<char const*>((uint64_t)this, a2 + 1, a3);
    if (v10 == v5)
    {
      std::vector<std::pair<unsigned long, const char *>>::size_type v12 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(this, a2 + 1, a3, 0);
      if (v12 == v5) {
        return a2;
      }
      else {
        return v12;
      }
    }
  }
  return v10;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(uint64_t a1, char *a2, char *a3)
{
  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3) {
      goto LABEL_20;
    }
    int v5 = a2[1];
    char v6 = v5 == 94;
    int v7 = v5 == 94 ? a2 + 2 : a2 + 1;
    unsigned int v8 = operator new(0xB0uLL);
    std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v8, a1, *(void *)(*(void *)(a1 + 56) + 8), v6, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
    *(void *)(*(void *)(a1 + 56) + 8) = v8;
    *(void *)(a1 + 56) = v8;
    if (v7 == a3) {
      goto LABEL_20;
    }
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v7 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, 93);
      ++v7;
    }
    if (v7 == a3) {
      goto LABEL_20;
    }
    do
    {
      uint64_t v9 = v7;
      int v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<char const*>(a1, v7, a3, (uint64_t)v8);
    }
    while (v7 != v9);
    if (v9 == a3) {
      goto LABEL_20;
    }
    if (*v9 == 45)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, 45);
      ++v9;
    }
    if (v9 == a3 || *v9 != 93) {
LABEL_20:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
    return v9 + 1;
  }
  return a2;
}

void sub_235DBFF60(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x237DF6E70](exception, 11);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_235DBFFB8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  if (this == a3) {
    return this;
  }
  switch(LOBYTE(this->__traits_.__loc_.__locale_))
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '{':
    case '|':
    case '}':
      return this;
    default:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
      uint64_t result = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      break;
  }
  return result;
}

void (__cdecl ***std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  int v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x237DF6E70](exception, 3);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_235DC02DC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned char *std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<char const*>(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  unint64_t v3 = a2;
  if (a2 != a3)
  {
    switch(*a2)
    {
      case 'D':
        int v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(void *)(*(void *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_7;
      case 'S':
        int v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(void *)(*(void *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_11;
      case 'W':
        char v6 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v6, a1, *(void *)(*(void *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_9;
      case 'd':
        int v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(void *)(*(void *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_7:
        *(void *)(*(void *)(a1 + 56) + 8) = v5;
        *(void *)(a1 + 56) = v5;
        int v7 = v5[40] | 0x400;
        goto LABEL_12;
      case 's':
        int v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(void *)(*(void *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_11:
        *(void *)(*(void *)(a1 + 56) + 8) = v5;
        *(void *)(a1 + 56) = v5;
        int v7 = v5[40] | 0x4000;
LABEL_12:
        v5[40] = v7;
        goto LABEL_13;
      case 'w':
        char v6 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v6, a1, *(void *)(*(void *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_9:
        *(void *)(*(void *)(a1 + 56) + 8) = v6;
        *(void *)(a1 + 56) = v6;
        v6[40] |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v6, 95);
LABEL_13:
        ++v3;
        break;
      default:
        return v3;
    }
  }
  return v3;
}

void sub_235DC04CC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_235DC04E0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_235DC04F4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_235DC0508(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_235DC051C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_235DC0530(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t *a4)
{
  long long v4 = a2;
  if (a2 == a3) {
    return v4;
  }
  uint64_t v5 = *a2;
  std::basic_regex<char>::value_type v6 = v5;
  switch((char)v5)
  {
    case '0':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 0;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 0);
        return v4 + 1;
      }
    case 'c':
      if (v4 + 1 == a3) {
        goto LABEL_81;
      }
      unsigned __int8 v8 = v4[1];
      if (((v8 & 0xDF) - 65) > 0x19u) {
        goto LABEL_81;
      }
      std::basic_regex<char>::value_type v9 = v8 & 0x1F;
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(unsigned char *)a4 = v9;
        *((unsigned char *)a4 + 1) = 0;
        return v4 + 2;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v9);
        return v4 + 2;
      }
    case 'f':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
        return v4 + 1;
      }
    case 'n':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
        return v4 + 1;
      }
    case 'r':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
        return v4 + 1;
      }
    case 't':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
        return v4 + 1;
      }
    case 'u':
      if (v4 + 1 != a3)
      {
        int v10 = v4[1];
        if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38 || (v10 | 0x20u) - 97 < 6)
        {
          v4 += 2;
          if (v4 != a3)
          {
            int v11 = *v4;
            if ((v11 & 0xF8) == 0x30 || (v11 & 0xFE) == 0x38 || (v11 | 0x20u) - 97 < 6) {
              goto LABEL_38;
            }
          }
        }
      }
      goto LABEL_81;
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 11;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char>::value_type v6 = 11;
LABEL_65:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v6);
        return v4 + 1;
      }
    case 'x':
LABEL_38:
      if (v4 + 1 == a3) {
        goto LABEL_81;
      }
      unsigned __int8 v12 = v4[1];
      char v13 = -48;
      if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38) {
        goto LABEL_43;
      }
      v12 |= 0x20u;
      if ((v12 - 97) >= 6u) {
        goto LABEL_81;
      }
      char v13 = -87;
LABEL_43:
      if (v4 + 2 == a3) {
        goto LABEL_81;
      }
      unsigned __int8 v14 = v4[2];
      char v15 = -48;
      if ((v14 & 0xF8) != 0x30 && (v14 & 0xFE) != 0x38)
      {
        v14 |= 0x20u;
        if ((v14 - 97) >= 6u) {
LABEL_81:
        }
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
        char v15 = -87;
      }
      std::basic_regex<char>::value_type v16 = v14 + 16 * (v12 + v13) + v15;
      if (!a4)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v16);
        v4 += 3;
        return v4;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(unsigned char *)a4 = v16;
      *((unsigned char *)a4 + 1) = 0;
      uint64_t result = v4 + 3;
      break;
    default:
      if ((char)v5 == 95 || ((char)v5 & 0x80000000) == 0 && (a1->__traits_.__ct_->__tab_[v5] & 0x500) != 0) {
        goto LABEL_81;
      }
      if (!a4) {
        goto LABEL_65;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(unsigned char *)a4 = v5;
      *((unsigned char *)a4 + 1) = 0;
      return v4 + 1;
  }
  return result;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_char(std::basic_regex<char> *this, std::basic_regex<char>::value_type __c)
{
  uint64_t v2 = __c;
  std::basic_regex<_CharT, _Traits>::flag_type flags = this->__flags_;
  if (flags)
  {
    unsigned __int8 v8 = (char *)operator new(0x30uLL);
    first = this->__end_->__first_;
    *(void *)unsigned __int8 v8 = &unk_26E93AC28;
    *((void *)v8 + 1) = first;
    std::locale::locale((std::locale *)v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    v8[40] = ((uint64_t (*)(const std::ctype<char> *, uint64_t))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v2);
LABEL_6:
    this->__end_->__first_ = (std::__node<char> *)v8;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    unsigned __int8 v8 = (char *)operator new(0x30uLL);
    int v10 = this->__end_->__first_;
    *(void *)unsigned __int8 v8 = &unk_26E93AC70;
    *((void *)v8 + 1) = v10;
    std::locale::locale((std::locale *)v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    v8[40] = v2;
    goto LABEL_6;
  }
  uint64_t v5 = (std::__node<char> *)operator new(0x18uLL);
  std::vector<std::csub_match>::pointer end = this->__end_;
  int v7 = end->__first_;
  v5->__vftable = (std::__node<char>_vtbl *)&unk_26E93ACB8;
  v5[1].__vftable = (std::__node<char>_vtbl *)v7;
  LOBYTE(v5[2].__vftable) = v2;
  end->__first_ = v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void sub_235DC0D4C(_Unwind_Exception *a1)
{
  std::locale::~locale(v2);
  long long v4 = v1[1];
  if (v4) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x237DF6E70](exception, 4);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_235DC0DF8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(std::basic_regex<char> *this, int __i)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags = this->__flags_;
  if (flags)
  {
    unsigned __int8 v8 = (std::locale *)operator new(0x30uLL);
    std::basic_regex<char>::value_type v9 = v8;
    v8[1].__locale_ = (std::locale::__imp *)this->__end_->__first_;
    int v10 = (std::locale::__imp *)&unk_26E93AD00;
LABEL_6:
    v8->__locale_ = v10;
    std::locale::locale(v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)&v9[3].__locale_ = *(_OWORD *)&this->__traits_.__ct_;
    LODWORD(v9[5].__locale_) = __i;
    this->__end_->__first_ = (std::__node<char> *)v9;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    unsigned __int8 v8 = (std::locale *)operator new(0x30uLL);
    std::basic_regex<char>::value_type v9 = v8;
    v8[1].__locale_ = (std::locale::__imp *)this->__end_->__first_;
    int v10 = (std::locale::__imp *)&unk_26E93AD48;
    goto LABEL_6;
  }
  uint64_t v5 = (std::__node<char> *)operator new(0x18uLL);
  std::vector<std::csub_match>::pointer end = this->__end_;
  first = end->__first_;
  v5->__vftable = (std::__node<char>_vtbl *)&unk_26E93AD90;
  v5[1].__vftable = (std::__node<char>_vtbl *)first;
  LODWORD(v5[2].__vftable) = __i;
  end->__first_ = v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

std::locale *std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26E93AC28;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26E93AC28;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  operator delete(a1);
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unint64_t v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (uint64_t v4 = result,
        uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(result + 24) + 40))(*(void *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(void *)(a2 + 16);
    *(void *)(a2 + 80) = *(void *)(v4 + 8);
  }
  return result;
}

std::locale *std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26E93AC70;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26E93AC70;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  operator delete(a1);
}

uint64_t std::__match_char_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    *(void *)(a2 + 80) = *(void *)(result + 8);
  }
  return result;
}

void (__cdecl ***std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_char<char>::~__match_char(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

uint64_t std::__match_char<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    *(void *)(a2 + 80) = *(void *)(result + 8);
  }
  return result;
}

std::locale *std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26E93AD00;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26E93AD00;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  operator delete(a1);
}

uint64_t std::__back_ref_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (!*(unsigned char *)(v3 + 16)
    || (uint64_t v4 = *(void *)(v3 + 8) - *(void *)v3, v5 = *(void *)(a2 + 16), *(void *)(a2 + 24) - v5 < v4))
  {
LABEL_3:
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
    return result;
  }
  uint64_t v6 = result;
  if (v4 >= 1)
  {
    uint64_t v7 = 0;
    while (1)
    {
      int v8 = (*(uint64_t (**)(void, void))(**(void **)(v6 + 24) + 40))(*(void *)(v6 + 24), *(char *)(*(void *)v3 + v7));
      uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(v6 + 24) + 40))(*(void *)(v6 + 24), *(char *)(*(void *)(a2 + 16) + v7));
      if (v8 != result) {
        goto LABEL_3;
      }
      if (v4 == ++v7)
      {
        uint64_t v5 = *(void *)(a2 + 16);
        break;
      }
    }
  }
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 16) = v5 + v4;
  *(void *)(a2 + 80) = *(void *)(v6 + 8);
  return result;
}

std::locale *std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26E93AD48;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26E93AD48;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  operator delete(a1);
}

uint64_t std::__back_ref_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(result + 40) - 1;
  uint64_t v3 = *(void *)(a2 + 32);
  if (!*(unsigned char *)(v3 + 24 * v2 + 16)
    || (uint64_t v4 = (unsigned __int8 **)(v3 + 24 * v2),
        uint64_t v5 = *v4,
        uint64_t v6 = v4[1] - *v4,
        uint64_t v7 = *(void *)(a2 + 16),
        *(void *)(a2 + 24) - v7 < v6))
  {
LABEL_3:
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
    return result;
  }
  if (v6 >= 1)
  {
    uint64_t v8 = v6;
    std::basic_regex<char>::value_type v9 = *(unsigned __int8 **)(a2 + 16);
    do
    {
      int v11 = *v5++;
      int v10 = v11;
      int v12 = *v9++;
      if (v10 != v12) {
        goto LABEL_3;
      }
    }
    while (--v8);
  }
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 16) = v7 + v6;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void (__cdecl ***std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  unsigned int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__back_ref<char>::~__back_ref(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  unsigned int v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

unsigned int *std::__back_ref<char>::__exec(unsigned int *result, uint64_t a2)
{
  unint64_t v2 = result[4];
  uint64_t v3 = *(void *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a2 + 40) - v3) >> 3) < v2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  unsigned int v5 = v2 - 1;
  if (*(unsigned char *)(v3 + 24 * v5 + 16)
    && (uint64_t v6 = result,
        uint64_t v7 = v3 + 24 * v5,
        uint64_t result = *(unsigned int **)v7,
        int64_t v8 = *(void *)(v7 + 8) - *(void *)v7,
        uint64_t v9 = *(void *)(a2 + 16),
        *(void *)(a2 + 24) - v9 >= v8)
    && (uint64_t result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !result))
  {
    *(_DWORD *)a2 = -994;
    *(void *)(a2 + 16) = v9 + v8;
    *(void *)(a2 + 80) = *((void *)v6 + 1);
  }
  else
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  return result;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  if (!*(unsigned char *)(a1 + 169))
  {
    uint64_t v6 = (void *)(a1 + 40);
    unsigned int v5 = *(unsigned char **)(a1 + 48);
    unint64_t v16 = *(void *)(a1 + 56);
    if (*(unsigned char *)(a1 + 170))
    {
      if ((unint64_t)v5 < v16) {
        goto LABEL_24;
      }
      std::vector<std::csub_match>::size_type v17 = (unsigned char *)*v6;
      unint64_t v18 = (unint64_t)&v5[-*v6];
      unint64_t v19 = v18 + 1;
      if ((uint64_t)(v18 + 1) >= 0)
      {
        unint64_t v20 = v16 - (void)v17;
        if (2 * v20 > v19) {
          unint64_t v19 = 2 * v20;
        }
        if (v20 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v21 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v21 = v19;
        }
        if (v21)
        {
          int v12 = operator new(v21);
          char v13 = &v12[v18];
          unsigned __int8 v14 = &v12[v21];
          v12[v18] = v2;
          uint64_t v15 = (uint64_t)&v12[v18 + 1];
          if (v5 == v17) {
            goto LABEL_49;
          }
        }
        else
        {
          int v12 = 0;
          char v13 = &v5[-*v6];
          unsigned __int8 v14 = 0;
          *(unsigned char *)unint64_t v18 = a2;
          uint64_t v15 = v18 + 1;
          if (v5 == v17) {
            goto LABEL_49;
          }
        }
        if (v18 >= 8 && (unint64_t)(v17 - v12) >= 0x20)
        {
          if (v18 >= 0x20)
          {
            unint64_t v28 = v18 & 0xFFFFFFFFFFFFFFE0;
            uint64_t v38 = (long long *)(v5 - 16);
            uint64_t v39 = &v12[v5 - 16 - v17];
            unint64_t v40 = v18 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v41 = *v38;
              *(v39 - 1) = *(v38 - 1);
              _OWORD *v39 = v41;
              v39 -= 2;
              v38 -= 2;
              v40 -= 32;
            }
            while (v40);
            if (v18 == v28) {
              goto LABEL_86;
            }
            if ((v18 & 0x18) == 0)
            {
              v13 -= v28;
              v5 -= v28;
              goto LABEL_80;
            }
          }
          else
          {
            unint64_t v28 = 0;
          }
          v13 -= v18 & 0xFFFFFFFFFFFFFFF8;
          unsigned int v42 = &v5[-v28 - 8];
          uint64_t v43 = &v12[v42 - v17];
          unint64_t v44 = v28 - (v18 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v45 = *(void *)v42;
            v42 -= 8;
            *v43-- = v45;
            v44 += 8;
          }
          while (v44);
          v5 -= v18 & 0xFFFFFFFFFFFFFFF8;
          if (v18 == (v18 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_86;
          }
        }
LABEL_80:
        long long v56 = v13 - 1;
        do
        {
          char v57 = *--v5;
          *v56-- = v57;
        }
        while (v5 != v17);
        goto LABEL_86;
      }
LABEL_89:
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    if ((unint64_t)v5 < v16) {
      goto LABEL_24;
    }
    uint64_t v23 = (unsigned char *)*v6;
    unint64_t v24 = (unint64_t)&v5[-*v6];
    unint64_t v25 = v24 + 1;
    if ((uint64_t)(v24 + 1) < 0) {
      goto LABEL_89;
    }
    unint64_t v26 = v16 - (void)v23;
    if (2 * v26 > v25) {
      unint64_t v25 = 2 * v26;
    }
    if (v26 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v27 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v27 = v25;
    }
    if (v27)
    {
      int v12 = operator new(v27);
      char v13 = &v12[v24];
      unsigned __int8 v14 = &v12[v27];
      v12[v24] = v2;
      uint64_t v15 = (uint64_t)&v12[v24 + 1];
      if (v5 == v23)
      {
LABEL_49:
        *(void *)(a1 + 40) = v13;
        *(void *)(a1 + 48) = v15;
        *(void *)(a1 + 56) = v14;
        if (!v5) {
          goto LABEL_88;
        }
        goto LABEL_87;
      }
    }
    else
    {
      int v12 = 0;
      char v13 = &v5[-*v6];
      unsigned __int8 v14 = 0;
      *(unsigned char *)unint64_t v24 = a2;
      uint64_t v15 = v24 + 1;
      if (v5 == v23) {
        goto LABEL_49;
      }
    }
    if (v24 >= 8 && (unint64_t)(v23 - v12) >= 0x20)
    {
      if (v24 >= 0x20)
      {
        unint64_t v29 = v24 & 0xFFFFFFFFFFFFFFE0;
        v46 = (long long *)(v5 - 16);
        v47 = &v12[v5 - 16 - v23];
        unint64_t v48 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          _OWORD *v47 = v49;
          v47 -= 2;
          v46 -= 2;
          v48 -= 32;
        }
        while (v48);
        if (v24 == v29) {
          goto LABEL_86;
        }
        if ((v24 & 0x18) == 0)
        {
          v13 -= v29;
          v5 -= v29;
          goto LABEL_84;
        }
      }
      else
      {
        unint64_t v29 = 0;
      }
      v13 -= v24 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v50 = &v5[-v29 - 8];
      char v51 = &v12[v50 - v23];
      unint64_t v52 = v29 - (v24 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v53 = *(void *)v50;
        v50 -= 8;
        *v51-- = v53;
        v52 += 8;
      }
      while (v52);
      v5 -= v24 & 0xFFFFFFFFFFFFFFF8;
      if (v24 == (v24 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_86;
      }
    }
LABEL_84:
    stat v58 = v13 - 1;
    do
    {
      char v59 = *--v5;
      *v58-- = v59;
    }
    while (v5 != v23);
    goto LABEL_86;
  }
  char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
  unsigned int v5 = *(unsigned char **)(a1 + 48);
  unint64_t v4 = *(void *)(a1 + 56);
  if ((unint64_t)v5 < v4)
  {
LABEL_24:
    *unsigned int v5 = v2;
    uint64_t v15 = (uint64_t)(v5 + 1);
    goto LABEL_88;
  }
  uint64_t v6 = (void *)(a1 + 40);
  uint64_t v7 = *(unsigned char **)(a1 + 40);
  unint64_t v8 = v5 - v7;
  uint64_t v9 = v5 - v7 + 1;
  if (v9 < 0) {
    goto LABEL_89;
  }
  unint64_t v10 = v4 - (void)v7;
  if (2 * v10 > v9) {
    uint64_t v9 = 2 * v10;
  }
  if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v11 = v9;
  }
  if (v11)
  {
    int v12 = operator new(v11);
    char v13 = &v12[v8];
    unsigned __int8 v14 = &v12[v11];
    v12[v8] = v2;
    uint64_t v15 = (uint64_t)&v12[v8 + 1];
    if (v5 == v7) {
      goto LABEL_49;
    }
  }
  else
  {
    int v12 = 0;
    char v13 = (char *)(v5 - v7);
    unsigned __int8 v14 = 0;
    *(unsigned char *)unint64_t v8 = v2;
    uint64_t v15 = v8 + 1;
    if (v5 == v7) {
      goto LABEL_49;
    }
  }
  if (v8 < 8 || (unint64_t)(v7 - v12) < 0x20) {
    goto LABEL_76;
  }
  if (v8 < 0x20)
  {
    unint64_t v22 = 0;
    goto LABEL_55;
  }
  unint64_t v22 = v8 & 0xFFFFFFFFFFFFFFE0;
  long long v30 = (long long *)(v5 - 16);
  uint64_t v31 = &v12[v5 - 16 - v7];
  unint64_t v32 = v8 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    long long v33 = *v30;
    *(v31 - 1) = *(v30 - 1);
    _OWORD *v31 = v33;
    v31 -= 2;
    v30 -= 2;
    v32 -= 32;
  }
  while (v32);
  if (v8 != v22)
  {
    if ((v8 & 0x18) == 0)
    {
      v13 -= v22;
      v5 -= v22;
      goto LABEL_76;
    }
LABEL_55:
    v13 -= v8 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v34 = &v5[-v22 - 8];
    long long v35 = &v12[v34 - v7];
    unint64_t v36 = v22 - (v8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint64_t v37 = *(void *)v34;
      v34 -= 8;
      *v35-- = v37;
      v36 += 8;
    }
    while (v36);
    v5 -= v8 & 0xFFFFFFFFFFFFFFF8;
    if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_86;
    }
LABEL_76:
    v54 = v13 - 1;
    do
    {
      char v55 = *--v5;
      *v54-- = v55;
    }
    while (v5 != v7);
  }
LABEL_86:
  unsigned int v5 = (unsigned char *)*v6;
  *(void *)(a1 + 40) = v12;
  *(void *)(a1 + 48) = v15;
  *(void *)(a1 + 56) = v14;
  if (v5) {
LABEL_87:
  }
    operator delete(v5);
LABEL_88:
  *(void *)(a1 + 48) = v15;
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  *(void *)(a1 + 8) = a3;
  size_t v11 = (const std::locale *)(a1 + 16);
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(unsigned char *)(a1 + 168) = a4;
  *(unsigned char *)(a1 + 169) = a5;
  *(unsigned char *)(a1 + 170) = a6;
  std::locale::locale(&v16, v11);
  std::locale::name(&v17, &v16);
  std::string::size_type size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v17.__r_.__value_.__l.__size_;
  }
  if (size == 1)
  {
    char v13 = (std::string *)v17.__r_.__value_.__r.__words[0];
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v13 = &v17;
    }
    BOOL v14 = v13->__r_.__value_.__s.__data_[0] != 67;
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_9;
    }
  }
  else
  {
    BOOL v14 = 1;
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
LABEL_9:
    }
      operator delete(v17.__r_.__value_.__l.__data_);
  }
  std::locale::~locale(&v16);
  *(unsigned char *)(a1 + 171) = v14;
  return a1;
}

void sub_235DC1F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::locale::~locale(&a9);
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v9 + 136));
  uint64_t v15 = *(void **)(v9 + 112);
  if (v15)
  {
    *(void *)(v9 + 120) = v15;
    operator delete(v15);
    std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](v12);
    std::locale v16 = *(void **)(v9 + 64);
    if (!v16)
    {
LABEL_3:
      std::string v17 = *v13;
      if (!*v13) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](v12);
    std::locale v16 = *(void **)(v9 + 64);
    if (!v16) {
      goto LABEL_3;
    }
  }
  *(void *)(v9 + 72) = v16;
  operator delete(v16);
  std::string v17 = *v13;
  if (!*v13)
  {
LABEL_4:
    std::locale::~locale(v11);
    *(void *)uint64_t v9 = v10;
    uint64_t v18 = *(void *)(v9 + 8);
    if (!v18) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  *(void *)(v9 + 48) = v17;
  operator delete(v17);
  std::locale::~locale(v11);
  *(void *)uint64_t v9 = v10;
  uint64_t v18 = *(void *)(v9 + 8);
  if (!v18) {
LABEL_5:
  }
    _Unwind_Resume(a1);
LABEL_9:
  (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  _Unwind_Resume(a1);
}

void **std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](void **a1)
{
  char v2 = (void **)*a1;
  if (*a1)
  {
    uint64_t v3 = (void **)a1[1];
    unint64_t v4 = *a1;
    if (v3 == v2)
    {
LABEL_11:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      if (*((char *)v3 - 1) < 0)
      {
        operator delete(*(v3 - 3));
        if (*((char *)v3 - 25) < 0) {
LABEL_9:
        }
          operator delete(*(v3 - 6));
      }
      else if (*((char *)v3 - 25) < 0)
      {
        goto LABEL_9;
      }
      v3 -= 6;
      if (v3 == v2)
      {
        unint64_t v4 = *a1;
        goto LABEL_11;
      }
    }
  }
  return a1;
}

void std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  uint64_t v1 = std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(a1);

  operator delete(v1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__exec(const std::__bracket_expression<char, std::regex_traits<char>> *this, std::__bracket_expression<char, std::regex_traits<char>>::__state *a2)
{
  char v2 = a2;
  current = a2->__current_;
  last = a2->__last_;
  if (current == last)
  {
    uint64_t v25 = 0;
    BOOL negate = this->__negate_;
    goto LABEL_245;
  }
  if (!this->__might_have_digraph_ || current + 1 == last) {
    goto LABEL_34;
  }
  char v6 = *current;
  LOBYTE(__src) = *current;
  char v7 = current[1];
  HIBYTE(__src) = v7;
  if (this->__icase_)
  {
    LOBYTE(__src) = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v6);
    HIBYTE(__src) = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v7);
  }
  p_traits = &this->__traits_;
  std::regex_traits<char>::__lookup_collatename<char *>(&__src, (uint64_t)&this->__traits_, __p, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0)
  {
    size_t v27 = __p[1];
    operator delete(__p[0]);
    if (v27) {
      goto LABEL_8;
    }
LABEL_34:
    BOOL negate = 0;
    uint64_t v25 = 1;
    unsigned __int8 v28 = *v2->__current_;
    LOBYTE(__src) = v28;
    if (!this->__icase_) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (!HIBYTE(__p[2])) {
    goto LABEL_34;
  }
LABEL_8:
  std::vector<std::pair<char, char>>::pointer begin = this->__digraphs_.__begin_;
  uint64_t v10 = (char *)this->__digraphs_.__end_ - (char *)begin;
  if (v10)
  {
    uint64_t v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1) {
      uint64_t v11 = 1;
    }
    p_second = &begin->second;
    while (__src != *(p_second - 1) || HIBYTE(__src) != *p_second)
    {
      p_second += 2;
      if (!--v11) {
        goto LABEL_17;
      }
    }
    goto LABEL_227;
  }
LABEL_17:
  if (!this->__collate_ || this->__ranges_.__begin_ == this->__ranges_.__end_)
  {
    BOOL negate = 0;
    goto LABEL_167;
  }
  memset(v136, 170, sizeof(v136));
  __p[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  __p[2] = (void *)0x2AAAAAAAAAAAAAALL;
  __p[0] = (void *)0xAAAAAAAAAA00AAAALL;
  LOWORD(__p[0]) = __src;
  (*(void (**)(void **__return_ptr))(*(void *)this->__traits_.__col_ + 32))(v136);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  std::vector<std::pair<std::string, std::string>>::pointer v14 = this->__ranges_.__begin_;
  char v15 = HIBYTE(v136[2]);
  int64_t v16 = (char *)this->__ranges_.__end_ - (char *)v14;
  if (!v16)
  {
    BOOL v24 = 0;
    int v70 = 0;
    int v69 = 0;
    goto LABEL_164;
  }
  v128 = v2;
  uint64_t v17 = 0;
  unint64_t v18 = v16 / 48;
  if (SHIBYTE(v136[2]) >= 0) {
    unint64_t v19 = v136;
  }
  else {
    unint64_t v19 = (void **)v136[0];
  }
  char v20 = HIBYTE(v136[2]);
  if (SHIBYTE(v136[2]) >= 0) {
    size_t v21 = (void *)HIBYTE(v136[2]);
  }
  else {
    size_t v21 = v136[1];
  }
  if (v18 <= 1) {
    uint64_t v22 = 1;
  }
  else {
    uint64_t v22 = v16 / 48;
  }
  uint64_t v23 = (unsigned __int8 *)&v14->second.__r_.__value_.__r.__words[2] + 7;
  BOOL v24 = 1;
  do
  {
    int v59 = (char)*(v23 - 24);
    if (v59 >= 0) {
      v60 = (char *)(v23 - 47);
    }
    else {
      v60 = *(char **)(v23 - 47);
    }
    if (v59 >= 0) {
      size_t v61 = *(v23 - 24);
    }
    else {
      size_t v61 = *(void *)(v23 - 39);
    }
    if ((unint64_t)v21 >= v61) {
      size_t v62 = v61;
    }
    else {
      size_t v62 = (size_t)v21;
    }
    int v63 = memcmp(v60, v19, v62);
    if (v63)
    {
      if ((v63 & 0x80000000) == 0) {
        goto LABEL_98;
      }
    }
    else if (v61 > (unint64_t)v21)
    {
      goto LABEL_98;
    }
    int v64 = (char)*v23;
    if (v64 >= 0) {
      v65 = (char *)(v23 - 23);
    }
    else {
      v65 = *(char **)(v23 - 23);
    }
    if (v64 >= 0) {
      size_t v66 = *v23;
    }
    else {
      size_t v66 = *(void *)(v23 - 15);
    }
    if (v66 >= (unint64_t)v21) {
      size_t v67 = (size_t)v21;
    }
    else {
      size_t v67 = v66;
    }
    int v68 = memcmp(v19, v65, v67);
    if (v68)
    {
      if (v68 < 0)
      {
LABEL_123:
        int v69 = 1;
        int v70 = 5;
        goto LABEL_162;
      }
    }
    else if ((unint64_t)v21 <= v66)
    {
      goto LABEL_123;
    }
LABEL_98:
    BOOL v24 = ++v17 < v18;
    v23 += 48;
  }
  while (v22 != v17);
  int v70 = 0;
  int v69 = 0;
LABEL_162:
  char v2 = v128;
  p_traits = &this->__traits_;
  char v15 = v20;
LABEL_164:
  if (v15 < 0) {
    operator delete(v136[0]);
  }
  BOOL negate = v69;
  if (v24) {
    goto LABEL_207;
  }
LABEL_167:
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_) {
    goto LABEL_209;
  }
  int v133 = negate;
  v88 = v2;
  memset(__p, 170, sizeof(__p));
  std::regex_traits<char>::__transform_primary<char *>(&__src, (uint64_t)p_traits, __p, __p);
  std::vector<std::string>::pointer v89 = this->__equivalences_.__begin_;
  int v90 = SHIBYTE(__p[2]);
  int64_t v91 = (char *)this->__equivalences_.__end_ - (char *)v89;
  if (!v91) {
    goto LABEL_188;
  }
  unint64_t v92 = v91 / 24;
  v93 = __p[1];
  if (SHIBYTE(__p[2]) >= 0) {
    v94 = (void *)HIBYTE(__p[2]);
  }
  else {
    v94 = __p[1];
  }
  if (SHIBYTE(__p[2]) < 0)
  {
    int v135 = SHIBYTE(__p[2]);
    uint64_t v103 = 0;
    v104 = __p[0];
    if (v92 <= 1) {
      uint64_t v105 = 1;
    }
    else {
      uint64_t v105 = v91 / 24;
    }
    BOOL v97 = 1;
    do
    {
      std::string::size_type size = HIBYTE(v89->__r_.__value_.__r.__words[2]);
      int v107 = (char)size;
      if ((size & 0x80u) != 0) {
        std::string::size_type size = v89->__r_.__value_.__l.__size_;
      }
      if (v94 == (void *)size)
      {
        std::vector<std::string>::pointer v108 = v107 >= 0 ? v89 : (std::vector<std::string>::pointer)v89->__r_.__value_.__r.__words[0];
        if (!memcmp(v104, v108, (size_t)v93))
        {
          int v133 = 1;
          int v70 = 5;
          goto LABEL_203;
        }
      }
      BOOL v97 = ++v103 < v92;
      ++v89;
    }
    while (v105 != v103);
    int v70 = 0;
LABEL_203:
    char v2 = v88;
    int v90 = v135;
    goto LABEL_204;
  }
  if (!HIBYTE(__p[2]))
  {
    std::string::size_type v114 = HIBYTE(v89->__r_.__value_.__r.__words[2]);
    if ((v114 & 0x80u) != 0) {
      std::string::size_type v114 = v89->__r_.__value_.__l.__size_;
    }
    if (v114 != HIBYTE(__p[2]))
    {
      unint64_t v119 = 0;
      if (v92 <= 1) {
        uint64_t v120 = 1;
      }
      else {
        uint64_t v120 = v92;
      }
      uint64_t v121 = v120 - 1;
      v122 = &v89[1].__r_.__value_.__s.__data_[8];
      char v2 = v88;
      while (v121 != v119)
      {
        ++v119;
        unint64_t v123 = v122[15];
        unint64_t v125 = *(void *)v122;
        v122 += 24;
        unint64_t v124 = v125;
        if ((v123 & 0x80u) != 0) {
          unint64_t v123 = v124;
        }
        if (v94 == (void *)v123)
        {
          BOOL v97 = v119 < v92;
          int v133 = 1;
          int v70 = 5;
          goto LABEL_204;
        }
      }
      BOOL v97 = 0;
      int v70 = 0;
      goto LABEL_204;
    }
    char v2 = v88;
    BOOL negate = 1;
LABEL_208:
    uint64_t v25 = 2;
    goto LABEL_245;
  }
  uint64_t v95 = 0;
  uint64_t v96 = v92 <= 1 ? 1 : v91 / 24;
  BOOL v97 = 1;
  do
  {
    v98 = &v89[v95];
    v99 = (void *)HIBYTE(v98->__r_.__value_.__r.__words[2]);
    int v100 = (char)v99;
    if ((char)v99 < 0) {
      v99 = (void *)v98->__r_.__value_.__l.__size_;
    }
    if (v94 == v99)
    {
      if (v100 < 0) {
        v98 = (std::string *)v98->__r_.__value_.__r.__words[0];
      }
      v101 = __p;
      uint64_t v102 = HIBYTE(__p[2]);
      while (*(unsigned __int8 *)v101 == v98->__r_.__value_.__s.__data_[0])
      {
        v101 = (void **)((char *)v101 + 1);
        v98 = (std::string *)((char *)v98 + 1);
        if (!--v102)
        {
          int v133 = 1;
          int v70 = 5;
          char v2 = v88;
          goto LABEL_204;
        }
      }
    }
    BOOL v97 = ++v95 < v92;
  }
  while (v95 != v96);
LABEL_188:
  BOOL v97 = 0;
  int v70 = 0;
  char v2 = v88;
LABEL_204:
  if (v90 < 0) {
    operator delete(__p[0]);
  }
  BOOL negate = v133;
  if (!v97)
  {
LABEL_209:
    if ((char)__src < 0)
    {
      neg_std::regex_traits<char>::char_class_type mask = this->__neg_mask_;
    }
    else
    {
      std::regex_traits<char>::char_class_type mask = this->__mask_;
      tab = this->__traits_.__ct_->__tab_;
      std::ctype_base::mask v111 = tab[__src];
      if (((v111 & mask) != 0 || __src == 95 && (mask & 0x80) != 0)
        && (SHIBYTE(__src) & 0x80000000) == 0
        && ((tab[HIBYTE(__src)] & mask) != 0 || (mask & 0x80) != 0 && HIBYTE(__src) == 95))
      {
        goto LABEL_227;
      }
      neg_std::regex_traits<char>::char_class_type mask = this->__neg_mask_;
      if ((neg_mask & v111) != 0 || __src == 95 && (neg_mask & 0x80) != 0)
      {
LABEL_226:
        int v113 = negate;
LABEL_228:
        BOOL negate = v113;
        uint64_t v25 = 2;
        goto LABEL_245;
      }
    }
    if ((SHIBYTE(__src) & 0x80000000) == 0)
    {
      if ((this->__traits_.__ct_->__tab_[HIBYTE(__src)] & neg_mask) == 0)
      {
        int v113 = 1;
        if (HIBYTE(__src) != 95 || (neg_mask & 0x80) == 0) {
          goto LABEL_228;
        }
      }
      goto LABEL_226;
    }
LABEL_227:
    int v113 = 1;
    goto LABEL_228;
  }
LABEL_207:
  if (v70) {
    goto LABEL_208;
  }
  uint64_t v25 = 2;
  unsigned __int8 v28 = *v2->__current_;
  LOBYTE(__src) = v28;
  if (this->__icase_)
  {
LABEL_35:
    unsigned __int8 v28 = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, (char)v28);
    LOBYTE(__src) = v28;
  }
LABEL_36:
  std::vector<char>::pointer v29 = this->__chars_.__begin_;
  unint64_t v30 = this->__chars_.__end_ - v29;
  if (v30)
  {
    if (v30 <= 1) {
      unint64_t v30 = 1;
    }
    while (1)
    {
      int v31 = *v29++;
      if (v31 == v28) {
        break;
      }
      if (!--v30) {
        goto LABEL_41;
      }
    }
LABEL_244:
    BOOL negate = 1;
    goto LABEL_245;
  }
LABEL_41:
  std::regex_traits<char>::char_class_type v32 = this->__neg_mask_;
  if (v32 || this->__neg_chars_.__begin_ != this->__neg_chars_.__end_)
  {
    if ((v28 & 0x80) != 0 || (this->__traits_.__ct_->__tab_[v28] & v32) == 0)
    {
      int v34 = (v32 >> 7) & 1;
      char v33 = v28 == 95 ? v34 : 0;
    }
    else
    {
      char v33 = 1;
    }
    std::vector<char>::pointer end = this->__neg_chars_.__end_;
    std::vector<char>::pointer v36 = (std::vector<char>::pointer)memchr(this->__neg_chars_.__begin_, (char)v28, end - this->__neg_chars_.__begin_);
    uint64_t v37 = v36 ? v36 : end;
    if ((v33 & 1) == 0 && v37 == end) {
      goto LABEL_244;
    }
  }
  std::vector<std::pair<std::string, std::string>>::pointer v38 = this->__ranges_.__begin_;
  std::vector<std::pair<std::string, std::string>>::pointer v39 = this->__ranges_.__end_;
  if (v38 == v39) {
    goto LABEL_128;
  }
  memset(v136, 170, sizeof(v136));
  if (!this->__collate_)
  {
    unsigned int v40 = 1;
    HIBYTE(v136[2]) = 1;
    LOWORD(v136[0]) = v28;
    int64_t v41 = (char *)v39 - (char *)v38;
    if (v41) {
      goto LABEL_59;
    }
LABEL_155:
    BOOL v48 = 0;
    if ((v40 & 0x80) != 0) {
      goto LABEL_126;
    }
    goto LABEL_127;
  }
  __p[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  __p[2] = (void *)0x1AAAAAAAAAAAAAALL;
  __p[0] = (void *)0xAAAAAAAAAAAAAAAALL;
  LOWORD(__p[0]) = v28;
  (*(void (**)(void **__return_ptr))(*(void *)this->__traits_.__col_ + 32))(v136);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  std::vector<std::pair<std::string, std::string>>::pointer v38 = this->__ranges_.__begin_;
  unsigned int v40 = HIBYTE(v136[2]);
  int64_t v41 = (char *)this->__ranges_.__end_ - (char *)v38;
  if (!v41) {
    goto LABEL_155;
  }
LABEL_59:
  uint64_t v134 = v25;
  BOOL v131 = negate;
  v129 = v2;
  uint64_t v42 = 0;
  unint64_t v43 = v41 / 48;
  char v126 = v40;
  if ((v40 & 0x80u) == 0) {
    unint64_t v44 = v136;
  }
  else {
    unint64_t v44 = (void **)v136[0];
  }
  if ((v40 & 0x80u) == 0) {
    uint64_t v45 = (void *)v40;
  }
  else {
    uint64_t v45 = v136[1];
  }
  if (v43 <= 1) {
    uint64_t v46 = 1;
  }
  else {
    uint64_t v46 = v41 / 48;
  }
  v47 = (unsigned __int8 *)&v38->second.__r_.__value_.__r.__words[2] + 7;
  BOOL v48 = 1;
  while (2)
  {
    int v49 = (char)*(v47 - 24);
    if (v49 >= 0) {
      unint64_t v50 = (char *)(v47 - 47);
    }
    else {
      unint64_t v50 = *(char **)(v47 - 47);
    }
    if (v49 >= 0) {
      size_t v51 = *(v47 - 24);
    }
    else {
      size_t v51 = *(void *)(v47 - 39);
    }
    if ((unint64_t)v45 >= v51) {
      size_t v52 = v51;
    }
    else {
      size_t v52 = (size_t)v45;
    }
    int v53 = memcmp(v50, v44, v52);
    if (v53)
    {
      if (v53 < 0) {
        goto LABEL_84;
      }
    }
    else if (v51 <= (unint64_t)v45)
    {
LABEL_84:
      int v54 = (char)*v47;
      if (v54 >= 0) {
        char v55 = (char *)(v47 - 23);
      }
      else {
        char v55 = *(char **)(v47 - 23);
      }
      if (v54 >= 0) {
        size_t v56 = *v47;
      }
      else {
        size_t v56 = *(void *)(v47 - 15);
      }
      if (v56 >= (unint64_t)v45) {
        size_t v57 = (size_t)v45;
      }
      else {
        size_t v57 = v56;
      }
      int v58 = memcmp(v44, v55, v57);
      if (v58)
      {
        if (v58 < 0)
        {
LABEL_95:
          BOOL negate = 1;
          char v2 = v129;
          uint64_t v25 = v134;
          if ((v126 & 0x80) == 0) {
            goto LABEL_127;
          }
          goto LABEL_126;
        }
      }
      else if ((unint64_t)v45 <= v56)
      {
        goto LABEL_95;
      }
    }
    BOOL v48 = ++v42 < v43;
    v47 += 48;
    if (v46 != v42) {
      continue;
    }
    break;
  }
  char v2 = v129;
  BOOL negate = v131;
  uint64_t v25 = v134;
  if ((v126 & 0x80) == 0) {
    goto LABEL_127;
  }
LABEL_126:
  operator delete(v136[0]);
LABEL_127:
  if (v48) {
    goto LABEL_245;
  }
LABEL_128:
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
  {
LABEL_239:
    if ((v28 & 0x80) != 0) {
      goto LABEL_245;
    }
    std::regex_traits<char>::char_class_type v115 = this->__mask_;
    if ((this->__traits_.__ct_->__tab_[v28] & v115) == 0)
    {
      int v116 = (v115 >> 7) & 1;
      if (v28 != 95) {
        int v116 = 0;
      }
      if (v116 != 1) {
        goto LABEL_245;
      }
    }
    goto LABEL_244;
  }
  memset(__p, 170, sizeof(__p));
  std::regex_traits<char>::__transform_primary<char *>(&__src, (uint64_t)&this->__traits_, (unsigned char *)&__src + 1, __p);
  std::vector<std::string>::pointer v71 = this->__equivalences_.__begin_;
  uint64_t v72 = HIBYTE(__p[2]);
  int64_t v73 = (char *)this->__equivalences_.__end_ - (char *)v71;
  if (!v73)
  {
    if ((HIBYTE(__p[2]) & 0x80) != 0) {
      operator delete(__p[0]);
    }
LABEL_238:
    unsigned __int8 v28 = __src;
    goto LABEL_239;
  }
  BOOL v132 = negate;
  v130 = v2;
  unint64_t v74 = 0;
  unint64_t v75 = v73 / 24;
  v76 = __p[0];
  v77 = __p[1];
  if (SHIBYTE(__p[2]) >= 0) {
    v78 = (void *)HIBYTE(__p[2]);
  }
  else {
    v78 = __p[1];
  }
  if (v75 <= 1) {
    uint64_t v79 = 1;
  }
  else {
    uint64_t v79 = v73 / 24;
  }
  BOOL v80 = 1;
  while (2)
  {
    v81 = &v71[v74];
    v82 = (void *)HIBYTE(v81->__r_.__value_.__r.__words[2]);
    int v83 = (char)v82;
    if ((char)v82 < 0) {
      v82 = (void *)v81->__r_.__value_.__l.__size_;
    }
    if (v78 != v82)
    {
LABEL_149:
      if (++v74 == v79)
      {
        if ((v72 & 0x80) != 0) {
LABEL_236:
        }
          operator delete(__p[0]);
        char v2 = v130;
        BOOL negate = v132;
        goto LABEL_238;
      }
      goto LABEL_153;
    }
    if (v83 >= 0) {
      v84 = &v71[v74];
    }
    else {
      v84 = (std::string *)v81->__r_.__value_.__r.__words[0];
    }
    if ((v72 & 0x80) == 0)
    {
      if (!v72)
      {
LABEL_157:
        char v2 = v130;
        BOOL negate = 1;
        if (!v80) {
          goto LABEL_238;
        }
        goto LABEL_245;
      }
      uint64_t v85 = 0;
      while (*((unsigned __int8 *)__p + v85) == v84->__r_.__value_.__s.__data_[v85])
      {
        if (v72 == ++v85) {
          goto LABEL_157;
        }
      }
      goto LABEL_149;
    }
    BOOL v127 = v80;
    v86 = v76;
    v87 = v77;
    if (memcmp(v76, v84, (size_t)v77))
    {
      ++v74;
      v77 = v87;
      v76 = v86;
      if (v74 == v79) {
        goto LABEL_236;
      }
LABEL_153:
      BOOL v80 = v74 < v75;
      continue;
    }
    break;
  }
  operator delete(__p[0]);
  char v2 = v130;
  BOOL negate = 1;
  if (!v127) {
    goto LABEL_238;
  }
LABEL_245:
  if (negate == this->__negate_)
  {
    first = 0;
    int v118 = -993;
  }
  else
  {
    v2->__current_ += v25;
    first = this->__first_;
    int v118 = -995;
  }
  v2->__do_ = v118;
  v2->__node_ = first;
}

void sub_235DC2BD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

std::locale *std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  locale = a1[17].__locale_;
  if (locale)
  {
    uint64_t v3 = a1[18].__locale_;
    unint64_t v4 = a1[17].__locale_;
    if (v3 != locale)
    {
      do
      {
        if (*((char *)v3 - 1) < 0) {
          operator delete(*((void **)v3 - 3));
        }
        uint64_t v3 = (std::locale::__imp *)((char *)v3 - 24);
      }
      while (v3 != locale);
      unint64_t v4 = a1[17].__locale_;
    }
    a1[18].__locale_ = locale;
    operator delete(v4);
  }
  unsigned int v5 = a1[14].__locale_;
  if (v5)
  {
    a1[15].__locale_ = v5;
    operator delete(v5);
  }
  char v6 = a1[11].__locale_;
  if (v6)
  {
    char v7 = a1[12].__locale_;
    unint64_t v8 = a1[11].__locale_;
    if (v7 == v6)
    {
LABEL_21:
      a1[12].__locale_ = v6;
      operator delete(v8);
      goto LABEL_22;
    }
    while (1)
    {
      if (*((char *)v7 - 1) < 0)
      {
        operator delete(*((void **)v7 - 3));
        if (*((char *)v7 - 25) < 0) {
LABEL_19:
        }
          operator delete(*((void **)v7 - 6));
      }
      else if (*((char *)v7 - 25) < 0)
      {
        goto LABEL_19;
      }
      char v7 = (std::locale::__imp *)((char *)v7 - 48);
      if (v7 == v6)
      {
        unint64_t v8 = a1[11].__locale_;
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v9 = a1[8].__locale_;
  if (v9)
  {
    a1[9].__locale_ = v9;
    operator delete(v9);
  }
  uint64_t v10 = a1[5].__locale_;
  if (v10)
  {
    a1[6].__locale_ = v10;
    operator delete(v10);
  }
  std::locale::~locale(a1 + 2);
  uint64_t v11 = a1[1].__locale_;
  if (v11) {
    (*(void (**)(std::locale::__imp *))(*(void *)v11 + 8))(v11);
  }
  return a1;
}

void std::regex_traits<char>::__lookup_collatename<char *>(unsigned char *__src@<X1>, uint64_t a2@<X0>, unsigned char *a3@<X2>, uint64_t a4@<X8>)
{
  size_t v5 = a3 - __src;
  memset(__dst, 170, sizeof(__dst));
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 <= 0x16)
  {
    __dst[23] = (_BYTE)a3 - (_BYTE)__src;
    uint64_t v9 = __dst;
    if (__src == a3) {
      goto LABEL_9;
    }
LABEL_8:
    memcpy(v9, __src, v5);
    v9 += v5;
    goto LABEL_9;
  }
  uint64_t v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17) {
    uint64_t v10 = v5 | 7;
  }
  uint64_t v11 = v10 + 1;
  uint64_t v9 = operator new(v10 + 1);
  *(void *)&__dst[8] = v5;
  *(void *)&__dst[16] = v11 | 0x8000000000000000;
  *(void *)stat __dst = v9;
  if (__src != a3) {
    goto LABEL_8;
  }
LABEL_9:
  *uint64_t v9 = 0;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if ((__dst[23] & 0x80000000) != 0)
  {
    int v12 = *(char **)__dst;
    if (!*(void *)&__dst[8]) {
      goto LABEL_18;
    }
  }
  else
  {
    if (!__dst[23]) {
      return;
    }
    int v12 = __dst;
  }
  std::__get_collation_name(&v19, v12);
  *(_OWORD *)a4 = *(_OWORD *)&v19.__r_.__value_.__l.__data_;
  unint64_t v13 = v19.__r_.__value_.__r.__words[2];
  *(void *)(a4 + 16) = *((void *)&v19.__r_.__value_.__l + 2);
  unint64_t v14 = HIBYTE(v13);
  if ((v14 & 0x80u) != 0) {
    unint64_t v14 = *(void *)(a4 + 8);
  }
  if (v14) {
    goto LABEL_16;
  }
  if ((__dst[23] & 0x80000000) != 0)
  {
    int v12 = *(char **)__dst;
    if (*(void *)&__dst[8] < 3uLL)
    {
LABEL_24:
      (*(void (**)(std::string *__return_ptr))(**(void **)(a2 + 16) + 32))(&v19);
      if (*(char *)(a4 + 23) < 0) {
        operator delete(*(void **)a4);
      }
      *(std::string *)a4 = v19;
      if (*(char *)(a4 + 23) < 0)
      {
        uint64_t v16 = *(void *)(a4 + 8);
        if (v16 == 1 || v16 == 12)
        {
          if (__dst != (unsigned char *)a4)
          {
            if (__dst[23] >= 0) {
              uint64_t v17 = __dst;
            }
            else {
              uint64_t v17 = *(unsigned char **)__dst;
            }
            if (__dst[23] >= 0) {
              size_t v18 = __dst[23];
            }
            else {
              size_t v18 = *(void *)&__dst[8];
            }
            std::string::__assign_no_alias<false>((void **)a4, v17, v18);
          }
        }
        else
        {
          **(unsigned char **)a4 = 0;
          *(void *)(a4 + 8) = 0;
        }
      }
      else
      {
        int v15 = *(unsigned __int8 *)(a4 + 23);
        if (v15 == 1 || v15 == 12)
        {
          if (__dst != (unsigned char *)a4)
          {
            if ((__dst[23] & 0x80000000) != 0)
            {
              std::string::__assign_no_alias<true>((void *)a4, *(void **)__dst, *(size_t *)&__dst[8]);
            }
            else
            {
              *(_OWORD *)a4 = *(_OWORD *)__dst;
              *(void *)(a4 + 16) = *(void *)&__dst[16];
            }
          }
        }
        else
        {
          *(unsigned char *)a4 = 0;
          *(unsigned char *)(a4 + 23) = 0;
        }
      }
LABEL_16:
      if ((__dst[23] & 0x80000000) == 0) {
        return;
      }
      int v12 = *(char **)__dst;
    }
LABEL_18:
    operator delete(v12);
    return;
  }
  if (__dst[23] < 3u) {
    goto LABEL_24;
  }
}

void sub_235DC303C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0)
  {
    operator delete(*(void **)v17);
    if ((a17 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a17 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__transform_primary<char *>(unsigned char *__src@<X1>, uint64_t a2@<X0>, unsigned char *a3@<X2>, void *a4@<X8>)
{
  size_t v5 = a3 - __src;
  memset(__dst, 170, sizeof(__dst));
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 <= 0x16)
  {
    HIBYTE(__dst[2]) = (_BYTE)a3 - (_BYTE)__src;
    uint64_t v9 = __dst;
    if (__src == a3) {
      goto LABEL_9;
    }
LABEL_8:
    memcpy(v9, __src, v5);
    uint64_t v9 = (void **)((char *)v9 + v5);
    goto LABEL_9;
  }
  uint64_t v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17) {
    uint64_t v10 = v5 | 7;
  }
  uint64_t v11 = v10 + 1;
  uint64_t v9 = (void **)operator new(v10 + 1);
  __dst[1] = (void *)v5;
  __dst[2] = (void *)(v11 | 0x8000000000000000);
  __dst[0] = v9;
  if (__src != a3) {
    goto LABEL_8;
  }
LABEL_9:
  *(unsigned char *)uint64_t v9 = 0;
  memset(a4, 170, 24);
  int v12 = (char *)HIBYTE(__dst[2]);
  if (SHIBYTE(__dst[2]) >= 0) {
    unint64_t v13 = __dst;
  }
  else {
    unint64_t v13 = (void **)__dst[0];
  }
  if (SHIBYTE(__dst[2]) < 0) {
    int v12 = (char *)__dst[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a2 + 16) + 32))(*(void *)(a2 + 16), v13, &v12[(void)v13]);
  uint64_t v14 = *((unsigned __int8 *)a4 + 23);
  int v15 = (char)v14;
  if ((v14 & 0x80u) != 0) {
    uint64_t v14 = a4[1];
  }
  if (v14 == 1)
  {
LABEL_25:
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_26;
  }
  if (v14 == 12)
  {
    if (v15 >= 0) {
      uint64_t v16 = a4;
    }
    else {
      uint64_t v16 = (unsigned char *)*a4;
    }
    v16[11] = v16[3];
    if (SHIBYTE(__dst[2]) < 0) {
      goto LABEL_26;
    }
    return;
  }
  if ((v15 & 0x80000000) == 0)
  {
    *(unsigned char *)a4 = 0;
    *((unsigned char *)a4 + 23) = 0;
    goto LABEL_25;
  }
  *(unsigned char *)*a4 = 0;
  a4[1] = 0;
  if (SHIBYTE(__dst[2]) < 0) {
LABEL_26:
  }
    operator delete(__dst[0]);
}

void sub_235DC322C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x237DF6E70](exception, 5);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_235DC328C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<char const*>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  unint64_t v4 = a2;
  if (a2 == a3) {
    return v4;
  }
  int v5 = *a2;
  if (v5 == 93) {
    return v4;
  }
  char v6 = (char *)a4;
  int v9 = 0;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v40 = 0;
  if (a2 + 1 == a3 || v5 != 91)
  {
LABEL_38:
    int v24 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_33;
  }
  int v10 = a2[1];
  if (v10 != 46)
  {
    if (v10 != 58)
    {
      if (v10 == 61)
      {
        char v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<char const*>(a1, a2 + 2, a3, a4);
        char v11 = 0;
        if ((SHIBYTE(v40) & 0x80000000) == 0) {
          goto LABEL_64;
        }
        goto LABEL_63;
      }
      int v9 = 0;
      goto LABEL_38;
    }
    int v12 = a2 + 2;
    if (a3 - (v4 + 2) >= 2)
    {
      uint64_t v13 = 0;
      uint64_t v14 = (unsigned __int8 *)v4;
      if (v4[2] == 58) {
        goto LABEL_14;
      }
      do
      {
        do
        {
          if (a3 - v4 - 4 == v13) {
            goto LABEL_89;
          }
          uint64_t v14 = (unsigned __int8 *)&v4[++v13];
        }
        while (v4[v13 + 2] != 58);
LABEL_14:
        ;
      }
      while (v14[3] != 93);
      int v15 = &v4[v13 + 2];
      if (v15 != a3)
      {
        int v16 = std::regex_traits<char>::__lookup_classname<char const*>(a1, v12, v15, *(_DWORD *)(a1 + 24) & 1);
        if (!v16) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
        }
        char v11 = 0;
        *((_DWORD *)v6 + 40) |= v16;
        char v6 = &v4[v13 + 4];
        if (SHIBYTE(v40) < 0) {
          goto LABEL_63;
        }
        goto LABEL_64;
      }
    }
LABEL_89:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  uint64_t v17 = a2 + 2;
  if (a3 - (v4 + 2) < 2) {
    goto LABEL_89;
  }
  uint64_t v18 = a3 - v4 - 4;
  std::string v19 = v4 + 2;
  char v20 = v17 + 1;
  if (*v17 == 46) {
    goto LABEL_23;
  }
  do
  {
    do
    {
      if (!v18) {
        goto LABEL_89;
      }
      --v18;
      std::string v19 = v20;
      int v21 = *v20++;
    }
    while (v21 != 46);
LABEL_23:
    ;
  }
  while (*v20 != 93);
  if (v19 == a3) {
    goto LABEL_89;
  }
  std::regex_traits<char>::__lookup_collatename<char const*>(v17, a1, v19, (uint64_t)&v41);
  if (SHIBYTE(v40) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v40 = v42;
  *(_OWORD *)std::vector<std::csub_match> __p = v41;
  uint64_t v22 = (char *)HIBYTE(v42);
  int v9 = SHIBYTE(v42);
  uint64_t v23 = *((void *)&v41 + 1);
  if (v42 < 0) {
    uint64_t v22 = (char *)__p[1];
  }
  if ((unint64_t)(v22 - 1) >= 2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  unint64_t v4 = v19 + 2;
  int v24 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v42 >= 0) {
    uint64_t v23 = HIBYTE(v42);
  }
  if (v23)
  {
    unsigned __int8 v28 = v4;
    if (v4 == a3) {
      goto LABEL_41;
    }
    goto LABEL_40;
  }
LABEL_33:
  if ((v24 | 0x40) != 0x40)
  {
    LOBYTE(v25) = *v4;
LABEL_57:
    if (v9 < 0)
    {
      int v34 = __p[0];
      __p[1] = (void *)1;
      *(unsigned char *)__p[0] = v25;
      v34[1] = 0;
      unsigned __int8 v28 = v4 + 1;
      if (v4 + 1 == a3) {
        goto LABEL_41;
      }
    }
    else
    {
      HIBYTE(v40) = 1;
      LOWORD(__p[0]) = v25;
      unsigned __int8 v28 = v4 + 1;
      if (v4 + 1 == a3) {
        goto LABEL_41;
      }
    }
    goto LABEL_40;
  }
  int v25 = *v4;
  if (v25 != 92) {
    goto LABEL_57;
  }
  unint64_t v26 = v4 + 1;
  if (v24) {
    size_t v27 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v26, a3, (uint64_t *)__p);
  }
  else {
    size_t v27 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)v26, (unsigned __int8 *)a3, (uint64_t)__p, (uint64_t)v6);
  }
  unsigned __int8 v28 = v27;
  if (v27 == a3)
  {
LABEL_41:
    if (SHIBYTE(v40) < 0)
    {
      if (!__p[1]) {
        goto LABEL_62;
      }
      if (__p[1] != (void *)1)
      {
        unint64_t v30 = (void **)__p[0];
LABEL_61:
        std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100]((uint64_t)v6, *(char *)v30, *((char *)v30 + 1));
LABEL_62:
        char v11 = 1;
        unint64_t v4 = v28;
        if ((SHIBYTE(v40) & 0x80000000) == 0) {
          goto LABEL_64;
        }
        goto LABEL_63;
      }
      unint64_t v30 = (void **)__p[0];
    }
    else
    {
      if (!HIBYTE(v40)) {
        goto LABEL_62;
      }
      unint64_t v30 = __p;
      if (HIBYTE(v40) != 1) {
        goto LABEL_61;
      }
    }
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v6, *(char *)v30);
    goto LABEL_62;
  }
LABEL_40:
  int v29 = *v28;
  if (v29 == 93) {
    goto LABEL_41;
  }
  int v31 = v28 + 1;
  if (v28 + 1 == a3 || v29 != 45 || *v31 == 93) {
    goto LABEL_41;
  }
  long long v41 = 0uLL;
  int64_t v42 = 0;
  unint64_t v4 = v28 + 2;
  if (v28 + 2 == a3 || *v31 != 91 || *v4 != 46)
  {
    if ((v24 | 0x40) == 0x40)
    {
      LODWORD(v31) = *v31;
      if (v31 == 92)
      {
        if (v24) {
          std::regex_traits<char>::char_class_type v32 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v28 + 2, a3, (uint64_t *)&v41);
        }
        else {
          std::regex_traits<char>::char_class_type v32 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)v28 + 2, (unsigned __int8 *)a3, (uint64_t)&v41, (uint64_t)v6);
        }
        goto LABEL_79;
      }
    }
    else
    {
      LOBYTE(v31) = *v31;
    }
    HIBYTE(v42) = 1;
    LOWORD(v41) = v31;
    goto LABEL_80;
  }
  std::regex_traits<char>::char_class_type v32 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, v28 + 3, a3, (uint64_t)&v41);
LABEL_79:
  unint64_t v4 = v32;
LABEL_80:
  *(_OWORD *)uint64_t v37 = *(_OWORD *)__p;
  uint64_t v38 = v40;
  __p[1] = 0;
  uint64_t v40 = 0;
  __p[0] = 0;
  *(_OWORD *)long long v35 = v41;
  uint64_t v36 = v42;
  long long v41 = 0uLL;
  int64_t v42 = 0;
  std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100]((uint64_t)v6, (char *)v37, (uint64_t)v35);
  if (SHIBYTE(v36) < 0)
  {
    operator delete(v35[0]);
    if ((SHIBYTE(v38) & 0x80000000) == 0)
    {
LABEL_82:
      if ((SHIBYTE(v42) & 0x80000000) == 0) {
        goto LABEL_83;
      }
LABEL_87:
      operator delete((void *)v41);
      char v11 = 1;
      if (SHIBYTE(v40) < 0) {
        goto LABEL_63;
      }
      goto LABEL_64;
    }
  }
  else if ((SHIBYTE(v38) & 0x80000000) == 0)
  {
    goto LABEL_82;
  }
  operator delete(v37[0]);
  if (SHIBYTE(v42) < 0) {
    goto LABEL_87;
  }
LABEL_83:
  char v11 = 1;
  if (SHIBYTE(v40) < 0) {
LABEL_63:
  }
    operator delete(__p[0]);
LABEL_64:
  if (v11) {
    return v4;
  }
  return v6;
}

void sub_235DC37A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 49) < 0)
  {
    operator delete(*(void **)(v28 - 72));
    if (a28 < 0)
    {
LABEL_5:
      operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  else if (a28 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<char const*>(uint64_t a1, char *__src, char *a3, uint64_t a4)
{
  if (a3 - __src < 2 || a3 - 1 == __src) {
    goto LABEL_39;
  }
  uint64_t v7 = 0;
  unint64_t v8 = __src;
  if (*__src != 61) {
    goto LABEL_5;
  }
LABEL_4:
  if (v8[1] != 93)
  {
LABEL_5:
    while (a3 - __src - 2 != v7)
    {
      unint64_t v8 = &__src[++v7];
      if (__src[v7] == 61) {
        goto LABEL_4;
      }
    }
LABEL_39:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  if (&__src[v7] == a3) {
    goto LABEL_39;
  }
  memset(v18, 170, sizeof(v18));
  std::regex_traits<char>::__lookup_collatename<char const*>(__src, a1, &__src[v7], (uint64_t)v18);
  if ((SHIBYTE(v18[2]) & 0x80000000) == 0)
  {
    int v9 = (char *)HIBYTE(v18[2]);
    if (HIBYTE(v18[2]))
    {
      memset(__p, 170, sizeof(__p));
      int v10 = v18;
      goto LABEL_14;
    }
LABEL_40:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  int v9 = (char *)v18[1];
  if (!v18[1]) {
    goto LABEL_40;
  }
  memset(__p, 170, sizeof(__p));
  int v10 = (void **)v18[0];
LABEL_14:
  std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(a1, (uint64_t)v10, &v9[(void)v10], (unsigned char **)__p);
  if (SHIBYTE(__p[2]) < 0)
  {
    if (__p[1])
    {
LABEL_16:
      unint64_t v11 = *(void *)(a4 + 144);
      if (v11 >= *(void *)(a4 + 152))
      {
        *(void *)(a4 + 144) = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)(a4 + 136), (uint64_t)__p);
        if (SHIBYTE(__p[2]) < 0) {
          goto LABEL_37;
        }
      }
      else
      {
        if ((HIBYTE(__p[2]) & 0x80) != 0)
        {
          std::string::__init_copy_ctor_external(*(std::string **)(a4 + 144), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          long long v12 = *(_OWORD *)__p;
          *(void **)(v11 + 16) = __p[2];
          *(_OWORD *)unint64_t v11 = v12;
        }
        *(void *)(a4 + 144) = v11 + 24;
        *(void *)(a4 + 144) = v11 + 24;
        if (SHIBYTE(__p[2]) < 0) {
          goto LABEL_37;
        }
      }
      goto LABEL_33;
    }
  }
  else if (HIBYTE(__p[2]))
  {
    goto LABEL_16;
  }
  uint64_t v13 = (void *)HIBYTE(v18[2]);
  if (SHIBYTE(v18[2]) < 0) {
    uint64_t v13 = v18[1];
  }
  if (v13 == (void *)2)
  {
    int v15 = v18;
    if (SHIBYTE(v18[2]) < 0) {
      int v15 = (void **)v18[0];
    }
    std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](a4, *(char *)v15, *((char *)v15 + 1));
  }
  else
  {
    if (v13 != (void *)1) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
    }
    uint64_t v14 = v18;
    if (SHIBYTE(v18[2]) < 0) {
      uint64_t v14 = (void **)v18[0];
    }
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a4, *(char *)v14);
  }
  if (SHIBYTE(__p[2]) < 0)
  {
LABEL_37:
    operator delete(__p[0]);
    if (SHIBYTE(v18[2]) < 0) {
      goto LABEL_38;
    }
    return &__src[v7 + 2];
  }
LABEL_33:
  if (SHIBYTE(v18[2]) < 0) {
LABEL_38:
  }
    operator delete(v18[0]);
  return &__src[v7 + 2];
}

void sub_235DC3A74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  *(void *)(v20 + 144) = v21;
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(uint64_t a1, char *__src, char *a3, uint64_t a4)
{
  if (a3 - __src < 2 || a3 - 1 == __src) {
    goto LABEL_15;
  }
  uint64_t v6 = 0;
  uint64_t v7 = __src;
  if (*__src != 46) {
    goto LABEL_5;
  }
LABEL_4:
  if (v7[1] != 93)
  {
LABEL_5:
    while (a3 - __src - 2 != v6)
    {
      uint64_t v7 = &__src[++v6];
      if (__src[v6] == 46) {
        goto LABEL_4;
      }
    }
LABEL_15:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  if (&__src[v6] == a3) {
    goto LABEL_15;
  }
  std::regex_traits<char>::__lookup_collatename<char const*>(__src, a1, &__src[v6], (uint64_t)&v11);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(_OWORD *)a4 = v11;
  unint64_t v8 = v12;
  *(void *)(a4 + 16) = v12;
  unint64_t v9 = HIBYTE(v8);
  if ((v9 & 0x80u) != 0) {
    unint64_t v9 = *(void *)(a4 + 8);
  }
  if (v9 - 1 >= 2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  return &__src[v6 + 2];
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  if (a2 == a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  switch(*a2)
  {
    case 'D':
      *(_DWORD *)(a5 + 164) |= 0x400u;
      uint64_t result = a2 + 1;
      break;
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'T':
    case 'U':
    case 'V':
    case 'X':
    case 'Y':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case 'a':
    case 'c':
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'q':
    case 'r':
    case 't':
    case 'u':
    case 'v':
      goto LABEL_8;
    case 'S':
      *(_DWORD *)(a5 + 164) |= 0x4000u;
      uint64_t result = a2 + 1;
      break;
    case 'W':
      *(_DWORD *)(a5 + 164) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5, 95);
      uint64_t result = a2 + 1;
      break;
    case 'b':
      if (*(char *)(a4 + 23) < 0)
      {
        *(void *)(a4 + 8) = 1;
        a4 = *(void *)a4;
      }
      else
      {
        *(unsigned char *)(a4 + 23) = 1;
      }
      *(_WORD *)a4 = 8;
      uint64_t result = a2 + 1;
      break;
    case 'd':
      *(_DWORD *)(a5 + 160) |= 0x400u;
      uint64_t result = a2 + 1;
      break;
    case 's':
      *(_DWORD *)(a5 + 160) |= 0x4000u;
      uint64_t result = a2 + 1;
      break;
    case 'w':
      *(_DWORD *)(a5 + 160) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
      uint64_t result = a2 + 1;
      break;
    default:
      if (*a2)
      {
LABEL_8:
        uint64_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, a2, a3, (uint64_t *)a4);
      }
      else
      {
        if (*(char *)(a4 + 23) < 0)
        {
          *(void *)(a4 + 8) = 1;
          a4 = *(void *)a4;
        }
        else
        {
          *(unsigned char *)(a4 + 23) = 1;
        }
        *(unsigned char *)a4 = 0;
        *(unsigned char *)(a4 + 1) = 0;
        uint64_t result = a2 + 1;
      }
      break;
  }
  return result;
}

std::basic_regex<char>::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>(std::basic_regex<char> *a1, std::basic_regex<char>::value_type *a2, std::basic_regex<char>::value_type *a3, uint64_t *a4)
{
  if (a2 == a3) {
LABEL_70:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  std::basic_regex<char>::value_type v5 = *a2;
  switch(*a2)
  {
    case '""':
    case '/':
    case '\\':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(unsigned char *)a4 = v5;
        *((unsigned char *)a4 + 1) = 0;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
        return a2 + 1;
      }
    case 'a':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 7;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 7);
        return a2 + 1;
      }
    case 'b':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 8;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 8);
        return a2 + 1;
      }
    case 'f':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
        return a2 + 1;
      }
    case 'n':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
        return a2 + 1;
      }
    case 'r':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
        return a2 + 1;
      }
    case 't':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
        return a2 + 1;
      }
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 11;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 11);
        return a2 + 1;
      }
    default:
      if ((v5 & 0xF8) != 0x30) {
        goto LABEL_70;
      }
      std::basic_regex<char>::value_type v7 = *a2 - 48;
      unint64_t v8 = a2 + 1;
      if (a2 + 1 == a3)
      {
        unint64_t v8 = a3;
LABEL_42:
        if (a4) {
          goto LABEL_43;
        }
LABEL_69:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
        return v8;
      }
      if ((*v8 & 0xF8) != 0x30) {
        goto LABEL_42;
      }
      std::basic_regex<char>::value_type v7 = *v8 + 8 * v7 - 48;
      if (a2 + 2 == a3)
      {
        unint64_t v8 = a3;
        if (a4) {
          goto LABEL_43;
        }
        goto LABEL_69;
      }
      std::basic_regex<char>::value_type v9 = a2[2];
      int v10 = v9 & 0xF8;
      std::basic_regex<char>::value_type v11 = v9 + 8 * v7 - 48;
      if (v10 == 48) {
        unint64_t v8 = a2 + 3;
      }
      else {
        unint64_t v8 = a2 + 2;
      }
      if (v10 == 48) {
        std::basic_regex<char>::value_type v7 = v11;
      }
      if (!a4) {
        goto LABEL_69;
      }
LABEL_43:
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(unsigned char *)a4 = v7;
      *((unsigned char *)a4 + 1) = 0;
      return v8;
  }
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = (uint64_t)a2;
  if (!*(unsigned char *)(a1 + 170))
  {
    uint64_t v16 = a2[23];
    if (a2[23] < 0)
    {
      if (*((void *)a2 + 1) != 1) {
        goto LABEL_74;
      }
    }
    else if (v16 != 1)
    {
LABEL_74:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>();
    }
    if (*(char *)(a3 + 23) < 0)
    {
      if (*(void *)(a3 + 8) != 1) {
        goto LABEL_74;
      }
    }
    else if (*(unsigned char *)(a3 + 23) != 1)
    {
      goto LABEL_74;
    }
    if (!*(unsigned char *)(a1 + 169))
    {
LABEL_67:
      *(_OWORD *)std::vector<std::csub_match> __p = *(_OWORD *)v4;
      uint64_t v49 = *(void *)(v4 + 16);
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
      *(void *)uint64_t v4 = 0;
      *(_OWORD *)unint64_t v50 = *(_OWORD *)v3;
      uint64_t v51 = *(void *)(v3 + 16);
      *(void *)(v3 + 8) = 0;
      *(void *)(v3 + 16) = 0;
      *(void *)uint64_t v3 = 0;
      unint64_t v39 = *(void *)(a1 + 96);
      if (v39 < *(void *)(a1 + 104))
      {
        long long v40 = *(_OWORD *)__p;
        *(void *)(v39 + 16) = v49;
        *(_OWORD *)unint64_t v39 = v40;
        __p[1] = 0;
        uint64_t v49 = 0;
        __p[0] = 0;
        uint64_t v41 = v51;
        *(_OWORD *)(v39 + 24) = *(_OWORD *)v50;
        *(void *)(v39 + 40) = v41;
        v50[1] = 0;
        uint64_t v51 = 0;
        v50[0] = 0;
        *(void *)(a1 + 96) = v39 + 48;
        if (SHIBYTE(v49) < 0) {
          goto LABEL_69;
        }
        return;
      }
      int64_t v42 = std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string>>((void **)(a1 + 88), (uint64_t)__p);
      int v43 = SHIBYTE(v51);
      *(void *)(a1 + 96) = v42;
      if ((v43 & 0x80000000) == 0)
      {
        if (SHIBYTE(v49) < 0) {
          goto LABEL_69;
        }
        return;
      }
      operator delete(v50[0]);
      if ((SHIBYTE(v49) & 0x80000000) == 0) {
        return;
      }
LABEL_69:
      operator delete(__p[0]);
      return;
    }
    int v34 = a2;
    if ((v16 & 0x80) != 0) {
      int v34 = *(char **)a2;
    }
    char v35 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *v34);
    if (*(char *)(v4 + 23) < 0)
    {
      **(unsigned char **)uint64_t v4 = v35;
      uint64_t v36 = (char *)v3;
      if ((*(char *)(v3 + 23) & 0x80000000) == 0) {
        goto LABEL_64;
      }
    }
    else
    {
      *(unsigned char *)uint64_t v4 = v35;
      uint64_t v36 = (char *)v3;
      if ((*(char *)(v3 + 23) & 0x80000000) == 0)
      {
LABEL_64:
        char v37 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *v36);
        uint64_t v38 = (unsigned char *)v3;
        if (*(char *)(v3 + 23) < 0) {
          uint64_t v38 = *(unsigned char **)v3;
        }
        unsigned char *v38 = v37;
        goto LABEL_67;
      }
    }
    uint64_t v36 = *(char **)v3;
    goto LABEL_64;
  }
  if (*(unsigned char *)(a1 + 169))
  {
    for (unint64_t i = 0; ; ++i)
    {
      unint64_t v7 = *(unsigned __int8 *)(v4 + 23);
      if (*(char *)(v4 + 23) < 0)
      {
        if (i >= *(void *)(v4 + 8))
        {
LABEL_13:
          for (unint64_t j = 0; ; ++j)
          {
            unint64_t v12 = *(unsigned __int8 *)(v3 + 23);
            if (*(char *)(v3 + 23) < 0)
            {
              if (j >= *(void *)(v3 + 8)) {
                goto LABEL_44;
              }
            }
            else if (j >= v12)
            {
              goto LABEL_44;
            }
            uint64_t v13 = v3;
            if ((v12 & 0x80) != 0) {
              uint64_t v13 = *(void *)v3;
            }
            char v14 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *(char *)(v13 + j));
            uint64_t v15 = v3;
            if (*(char *)(v3 + 23) < 0) {
              uint64_t v15 = *(void *)v3;
            }
            *(unsigned char *)(v15 + j) = v14;
          }
        }
      }
      else if (i >= v7)
      {
        goto LABEL_13;
      }
      uint64_t v8 = v4;
      if ((v7 & 0x80) != 0) {
        uint64_t v8 = *(void *)v4;
      }
      char v9 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *(char *)(v8 + i));
      uint64_t v10 = v4;
      if (*(char *)(v4 + 23) < 0) {
        uint64_t v10 = *(void *)v4;
      }
      *(unsigned char *)(v10 + i) = v9;
    }
  }
  for (unint64_t k = 0; ; ++k)
  {
    unint64_t v19 = a2[23];
    if (a2[23] < 0) {
      break;
    }
    if (k >= v19) {
      goto LABEL_35;
    }
LABEL_33:
    uint64_t v18 = a2;
    if ((v19 & 0x80) != 0)
    {
      uint64_t v18 = *(char **)a2;
      uint64_t v20 = *(char **)a2;
    }
    else
    {
      uint64_t v20 = a2;
    }
    v20[k] = v18[k];
  }
  if (k < *((void *)a2 + 1)) {
    goto LABEL_33;
  }
LABEL_35:
  for (unint64_t m = 0; ; ++m)
  {
    unint64_t v23 = *(unsigned __int8 *)(a3 + 23);
    if (*(char *)(a3 + 23) < 0) {
      break;
    }
    if (m >= v23) {
      goto LABEL_44;
    }
LABEL_42:
    uint64_t v22 = a3;
    if ((v23 & 0x80) != 0)
    {
      uint64_t v22 = *(void *)a3;
      uint64_t v24 = *(void *)a3;
    }
    else
    {
      uint64_t v24 = a3;
    }
    *(unsigned char *)(v24 + m) = *(unsigned char *)(v22 + m);
  }
  if (m < *(void *)(a3 + 8)) {
    goto LABEL_42;
  }
LABEL_44:
  if (*(char *)(v4 + 23) < 0)
  {
    uint64_t v26 = v4;
    uint64_t v4 = *(void *)v4;
    uint64_t v25 = *(void *)(v26 + 8);
  }
  else
  {
    uint64_t v25 = *(unsigned __int8 *)(v4 + 23);
  }
  std::regex_traits<char>::transform<std::__wrap_iter<char *>>(a1 + 16, v4, (char *)(v4 + v25));
  if (*(char *)(v3 + 23) < 0)
  {
    uint64_t v28 = v3;
    uint64_t v3 = *(void *)v3;
    uint64_t v27 = *(void *)(v28 + 8);
  }
  else
  {
    uint64_t v27 = *(unsigned __int8 *)(v3 + 23);
  }
  std::regex_traits<char>::transform<std::__wrap_iter<char *>>(a1 + 16, v3, (char *)(v3 + v27));
  *(_OWORD *)std::vector<std::csub_match> __p = *(_OWORD *)v46;
  uint64_t v49 = v47;
  *(_OWORD *)unint64_t v50 = *(_OWORD *)v44;
  uint64_t v51 = v45;
  unint64_t v29 = *(void *)(a1 + 96);
  if (v29 >= *(void *)(a1 + 104))
  {
    std::regex_traits<char>::char_class_type v32 = std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string>>((void **)(a1 + 88), (uint64_t)__p);
    int v33 = SHIBYTE(v51);
    *(void *)(a1 + 96) = v32;
    if (v33 < 0)
    {
      operator delete(v50[0]);
      if ((SHIBYTE(v49) & 0x80000000) == 0) {
        return;
      }
    }
    else if ((SHIBYTE(v49) & 0x80000000) == 0)
    {
      return;
    }
    goto LABEL_69;
  }
  long long v30 = *(_OWORD *)__p;
  *(void *)(v29 + 16) = v49;
  *(_OWORD *)unint64_t v29 = v30;
  __p[1] = 0;
  uint64_t v49 = 0;
  __p[0] = 0;
  uint64_t v31 = v51;
  *(_OWORD *)(v29 + 24) = *(_OWORD *)v50;
  *(void *)(v29 + 40) = v31;
  v50[1] = 0;
  uint64_t v51 = 0;
  v50[0] = 0;
  *(void *)(a1 + 96) = v29 + 48;
  if (SHIBYTE(v49) < 0) {
    goto LABEL_69;
  }
}

void sub_235DC491C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::pair<std::string,std::string>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_235DC4930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 169))
  {
    unsigned __int8 v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
    __int16 v6 = v5 | (unsigned __int16)((*(unsigned __int16 (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a3) << 8);
    uint64_t v8 = *(char **)(a1 + 120);
    unint64_t v7 = *(void *)(a1 + 128);
    if ((unint64_t)v8 >= v7)
    {
      char v9 = (char **)(a1 + 112);
      uint64_t v10 = *(char **)(a1 + 112);
      uint64_t v11 = v8 - v10;
      if (v8 - v10 > -3)
      {
        uint64_t v12 = v11 >> 1;
        unint64_t v13 = v7 - (void)v10;
        if (v13 <= (v11 >> 1) + 1) {
          unint64_t v14 = v12 + 1;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v13 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v15 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v15 = v14;
        }
        if (!v15)
        {
          uint64_t v16 = 0;
          uint64_t v17 = (_WORD *)(2 * v12);
          uint64_t v18 = 0;
          *(_WORD *)(2 * v12) = v6;
          uint64_t v19 = 2 * v12 + 2;
          uint64_t v20 = (char *)(v8 - v10);
          if (v8 == v10) {
            goto LABEL_64;
          }
LABEL_30:
          unint64_t v30 = (unint64_t)(v20 - 2);
          if (v30 < 0x1E) {
            goto LABEL_71;
          }
          if (v8 - v16 - (v11 & 0xFFFFFFFFFFFFFFFELL) < 0x20) {
            goto LABEL_71;
          }
          uint64_t v31 = (v30 >> 1) + 1;
          unint64_t v32 = 2 * (v31 & 0xFFFFFFFFFFFFFFF0);
          int v33 = &v8[-v32];
          uint64_t v17 = (_WORD *)((char *)v17 - v32);
          int v34 = &v16[2 * v12 - 16];
          char v35 = v8 - 16;
          unint64_t v36 = v31 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            long long v37 = *(_OWORD *)v35;
            *(v34 - 1) = *((_OWORD *)v35 - 1);
            _OWORD *v34 = v37;
            v34 -= 2;
            v35 -= 32;
            v36 -= 16;
          }
          while (v36);
          uint64_t v8 = v33;
          if (v31 != (v31 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_71:
            do
            {
              __int16 v38 = *((_WORD *)v8 - 1);
              v8 -= 2;
              *--uint64_t v17 = v38;
            }
            while (v8 != v10);
          }
LABEL_63:
          uint64_t v8 = *v9;
          goto LABEL_64;
        }
        if ((v15 & 0x8000000000000000) == 0)
        {
          uint64_t v16 = operator new(2 * v15);
          uint64_t v17 = &v16[2 * v12];
          uint64_t v18 = &v16[2 * v15];
          *uint64_t v17 = v6;
          uint64_t v19 = (uint64_t)(v17 + 1);
          uint64_t v20 = (char *)(v8 - v10);
          if (v8 == v10) {
            goto LABEL_64;
          }
          goto LABEL_30;
        }
LABEL_68:
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
LABEL_67:
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
LABEL_28:
    *(_WORD *)uint64_t v8 = v6;
    uint64_t v19 = (uint64_t)(v8 + 2);
    goto LABEL_66;
  }
  char v9 = (char **)(a1 + 112);
  __int16 v6 = a2 | (unsigned __int16)((_WORD)a3 << 8);
  uint64_t v8 = *(char **)(a1 + 120);
  unint64_t v21 = *(void *)(a1 + 128);
  if (*(unsigned char *)(a1 + 170))
  {
    if ((unint64_t)v8 < v21) {
      goto LABEL_28;
    }
    uint64_t v22 = *v9;
    uint64_t v23 = v8 - *v9;
    if (v23 <= -3) {
      goto LABEL_67;
    }
    uint64_t v24 = v23 >> 1;
    unint64_t v25 = v21 - (void)v22;
    if (v25 <= (v23 >> 1) + 1) {
      unint64_t v26 = v24 + 1;
    }
    else {
      unint64_t v26 = v25;
    }
    if (v25 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v27 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v27 = v26;
    }
    if (v27)
    {
      if (v27 < 0) {
        goto LABEL_68;
      }
      uint64_t v28 = operator new(2 * v27);
      uint64_t v17 = &v28[2 * v24];
      uint64_t v18 = &v28[2 * v27];
      *uint64_t v17 = v6;
      uint64_t v19 = (uint64_t)(v17 + 1);
      unint64_t v29 = (char *)(v8 - v22);
      if (v8 == v22) {
        goto LABEL_64;
      }
    }
    else
    {
      uint64_t v28 = 0;
      uint64_t v17 = (_WORD *)(2 * v24);
      uint64_t v18 = 0;
      *(_WORD *)(2 * v24) = v6;
      uint64_t v19 = 2 * v24 + 2;
      unint64_t v29 = (char *)(v8 - v22);
      if (v8 == v22) {
        goto LABEL_64;
      }
    }
    unint64_t v47 = (unint64_t)(v29 - 2);
    if (v47 < 0x1E) {
      goto LABEL_72;
    }
    if ((unint64_t)(v8 - &v28[v23 & 0xFFFFFFFFFFFFFFFELL]) < 0x20) {
      goto LABEL_72;
    }
    uint64_t v48 = (v47 >> 1) + 1;
    unint64_t v49 = 2 * (v48 & 0xFFFFFFFFFFFFFFF0);
    unint64_t v50 = &v8[-v49];
    uint64_t v17 = (_WORD *)((char *)v17 - v49);
    uint64_t v51 = &v28[2 * v24 - 16];
    size_t v52 = v8 - 16;
    unint64_t v53 = v48 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      long long v54 = *(_OWORD *)v52;
      *(v51 - 1) = *((_OWORD *)v52 - 1);
      *uint64_t v51 = v54;
      v51 -= 2;
      v52 -= 32;
      v53 -= 16;
    }
    while (v53);
    uint64_t v8 = v50;
    if (v48 != (v48 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_72:
      do
      {
        __int16 v55 = *((_WORD *)v8 - 1);
        v8 -= 2;
        *--uint64_t v17 = v55;
      }
      while (v8 != v22);
    }
    goto LABEL_63;
  }
  if ((unint64_t)v8 < v21) {
    goto LABEL_28;
  }
  unint64_t v39 = *v9;
  uint64_t v40 = v8 - *v9;
  if (v40 <= -3) {
    goto LABEL_67;
  }
  uint64_t v41 = v40 >> 1;
  unint64_t v42 = v21 - (void)v39;
  if (v42 <= (v40 >> 1) + 1) {
    unint64_t v43 = v41 + 1;
  }
  else {
    unint64_t v43 = v42;
  }
  if (v42 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v44 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v44 = v43;
  }
  if (!v44)
  {
    uint64_t v45 = 0;
    uint64_t v17 = (_WORD *)(2 * v41);
    uint64_t v18 = 0;
    *(_WORD *)(2 * v41) = v6;
    uint64_t v19 = 2 * v41 + 2;
    uint64_t v46 = (char *)(v8 - v39);
    if (v8 == v39) {
      goto LABEL_64;
    }
    goto LABEL_57;
  }
  if (v44 < 0) {
    goto LABEL_68;
  }
  uint64_t v45 = operator new(2 * v44);
  uint64_t v17 = &v45[2 * v41];
  uint64_t v18 = &v45[2 * v44];
  *uint64_t v17 = v6;
  uint64_t v19 = (uint64_t)(v17 + 1);
  uint64_t v46 = (char *)(v8 - v39);
  if (v8 != v39)
  {
LABEL_57:
    unint64_t v56 = (unint64_t)(v46 - 2);
    if (v56 < 0x1E) {
      goto LABEL_73;
    }
    if ((unint64_t)(v8 - &v45[v40 & 0xFFFFFFFFFFFFFFFELL]) < 0x20) {
      goto LABEL_73;
    }
    uint64_t v57 = (v56 >> 1) + 1;
    unint64_t v58 = 2 * (v57 & 0xFFFFFFFFFFFFFFF0);
    int v59 = &v8[-v58];
    uint64_t v17 = (_WORD *)((char *)v17 - v58);
    v60 = &v45[2 * v41 - 16];
    size_t v61 = v8 - 16;
    unint64_t v62 = v57 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      long long v63 = *(_OWORD *)v61;
      *(v60 - 1) = *((_OWORD *)v61 - 1);
      _OWORD *v60 = v63;
      v60 -= 2;
      v61 -= 32;
      v62 -= 16;
    }
    while (v62);
    uint64_t v8 = v59;
    if (v57 != (v57 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_73:
      do
      {
        __int16 v64 = *((_WORD *)v8 - 1);
        v8 -= 2;
        *--uint64_t v17 = v64;
      }
      while (v8 != v39);
    }
    goto LABEL_63;
  }
LABEL_64:
  *(void *)(a1 + 112) = v17;
  *(void *)(a1 + 120) = v19;
  *(void *)(a1 + 128) = v18;
  if (v8) {
    operator delete(v8);
  }
LABEL_66:
  *(void *)(a1 + 120) = v19;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x237DF6E70](exception, 1);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_235DC4DAC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::regex_traits<char>::__lookup_collatename<char const*>(unsigned char *__src@<X1>, uint64_t a2@<X0>, unsigned char *a3@<X2>, uint64_t a4@<X8>)
{
  size_t v5 = a3 - __src;
  memset(__dst, 170, sizeof(__dst));
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 <= 0x16)
  {
    __dst[23] = (_BYTE)a3 - (_BYTE)__src;
    char v9 = __dst;
    if (__src == a3) {
      goto LABEL_9;
    }
LABEL_8:
    memcpy(v9, __src, v5);
    v9 += v5;
    goto LABEL_9;
  }
  uint64_t v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17) {
    uint64_t v10 = v5 | 7;
  }
  uint64_t v11 = v10 + 1;
  char v9 = operator new(v10 + 1);
  *(void *)&__dst[8] = v5;
  *(void *)&__dst[16] = v11 | 0x8000000000000000;
  *(void *)stat __dst = v9;
  if (__src != a3) {
    goto LABEL_8;
  }
LABEL_9:
  *char v9 = 0;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if ((__dst[23] & 0x80000000) != 0)
  {
    uint64_t v12 = *(char **)__dst;
    if (!*(void *)&__dst[8]) {
      goto LABEL_18;
    }
  }
  else
  {
    if (!__dst[23]) {
      return;
    }
    uint64_t v12 = __dst;
  }
  std::__get_collation_name(&v19, v12);
  *(_OWORD *)a4 = *(_OWORD *)&v19.__r_.__value_.__l.__data_;
  unint64_t v13 = v19.__r_.__value_.__r.__words[2];
  *(void *)(a4 + 16) = *((void *)&v19.__r_.__value_.__l + 2);
  unint64_t v14 = HIBYTE(v13);
  if ((v14 & 0x80u) != 0) {
    unint64_t v14 = *(void *)(a4 + 8);
  }
  if (v14) {
    goto LABEL_16;
  }
  if ((__dst[23] & 0x80000000) != 0)
  {
    uint64_t v12 = *(char **)__dst;
    if (*(void *)&__dst[8] < 3uLL)
    {
LABEL_24:
      (*(void (**)(std::string *__return_ptr))(**(void **)(a2 + 16) + 32))(&v19);
      if (*(char *)(a4 + 23) < 0) {
        operator delete(*(void **)a4);
      }
      *(std::string *)a4 = v19;
      if (*(char *)(a4 + 23) < 0)
      {
        uint64_t v16 = *(void *)(a4 + 8);
        if (v16 == 1 || v16 == 12)
        {
          if (__dst != (unsigned char *)a4)
          {
            if (__dst[23] >= 0) {
              uint64_t v17 = __dst;
            }
            else {
              uint64_t v17 = *(unsigned char **)__dst;
            }
            if (__dst[23] >= 0) {
              size_t v18 = __dst[23];
            }
            else {
              size_t v18 = *(void *)&__dst[8];
            }
            std::string::__assign_no_alias<false>((void **)a4, v17, v18);
          }
        }
        else
        {
          **(unsigned char **)a4 = 0;
          *(void *)(a4 + 8) = 0;
        }
      }
      else
      {
        int v15 = *(unsigned __int8 *)(a4 + 23);
        if (v15 == 1 || v15 == 12)
        {
          if (__dst != (unsigned char *)a4)
          {
            if ((__dst[23] & 0x80000000) != 0)
            {
              std::string::__assign_no_alias<true>((void *)a4, *(void **)__dst, *(size_t *)&__dst[8]);
            }
            else
            {
              *(_OWORD *)a4 = *(_OWORD *)__dst;
              *(void *)(a4 + 16) = *(void *)&__dst[16];
            }
          }
        }
        else
        {
          *(unsigned char *)a4 = 0;
          *(unsigned char *)(a4 + 23) = 0;
        }
      }
LABEL_16:
      if ((__dst[23] & 0x80000000) == 0) {
        return;
      }
      uint64_t v12 = *(char **)__dst;
    }
LABEL_18:
    operator delete(v12);
    return;
  }
  if (__dst[23] < 3u) {
    goto LABEL_24;
  }
}

void sub_235DC5034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0)
  {
    operator delete(*(void **)v17);
    if ((a17 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a17 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, unsigned char **a4@<X8>)
{
  unint64_t v5 = (unint64_t)&a3[-a2];
  memset(__p, 170, sizeof(__p));
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 > 0x16)
  {
    uint64_t v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v16 = v5 | 7;
    }
    uint64_t v17 = v16 + 1;
    char v9 = operator new(v16 + 1);
    __p[1] = (void *)v5;
    __p[2] = (void *)(v17 | 0x8000000000000000);
    __p[0] = v9;
    if ((char *)a2 != a3) {
      goto LABEL_4;
    }
LABEL_13:
    uint64_t v10 = v9;
    goto LABEL_16;
  }
  HIBYTE(__p[2]) = (_BYTE)a3 - a2;
  char v9 = __p;
  if ((char *)a2 == a3) {
    goto LABEL_13;
  }
LABEL_4:
  if (v5 < 0x20 || (unint64_t)v9 - a2 < 0x20)
  {
    uint64_t v10 = v9;
    uint64_t v11 = (char *)a2;
  }
  else
  {
    uint64_t v10 = (char *)v9 + (v5 & 0xFFFFFFFFFFFFFFE0);
    uint64_t v11 = (char *)(a2 + (v5 & 0xFFFFFFFFFFFFFFE0));
    uint64_t v12 = (long long *)(a2 + 16);
    unint64_t v13 = v9 + 1;
    unint64_t v14 = v5 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      *unint64_t v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 32;
    }
    while (v14);
    if (v5 == (v5 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_16;
    }
  }
  do
  {
    char v18 = *v11++;
    *v10++ = v18;
  }
  while (v11 != a3);
LABEL_16:
  *uint64_t v10 = 0;
  memset(a4, 170, 24);
  std::string v19 = (char *)HIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0) {
    uint64_t v20 = __p;
  }
  else {
    uint64_t v20 = (void **)__p[0];
  }
  if (SHIBYTE(__p[2]) < 0) {
    std::string v19 = (char *)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), v20, &v19[(void)v20]);
  unint64_t v21 = (unsigned char *)*((unsigned __int8 *)a4 + 23);
  int v22 = (char)v21;
  if ((char)v21 < 0) {
    unint64_t v21 = a4[1];
  }
  if (v21 == (unsigned char *)1) {
    goto LABEL_32;
  }
  if (v21 != (unsigned char *)12)
  {
    if (v22 < 0)
    {
      **a4 = 0;
      a4[1] = 0;
      if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_35:
      operator delete(__p[0]);
      return;
    }
    *(unsigned char *)a4 = 0;
    *((unsigned char *)a4 + 23) = 0;
LABEL_32:
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_35;
  }
  if (v22 >= 0) {
    uint64_t v23 = a4;
  }
  else {
    uint64_t v23 = *a4;
  }
  v23[11] = v23[3];
  if (SHIBYTE(__p[2]) < 0) {
    goto LABEL_35;
  }
}

void sub_235DC5284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x237DF6E70](exception, 2);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_235DC52E4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::regex_traits<char>::__lookup_classname<char const*>(uint64_t a1, unsigned char *__src, unsigned char *a3, BOOL a4)
{
  size_t v4 = a3 - __src;
  memset(__dst, 170, sizeof(__dst));
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v4 <= 0x16)
  {
    HIBYTE(__dst[2]) = (_BYTE)a3 - (_BYTE)__src;
    char v9 = __dst;
    if (__src == a3) {
      goto LABEL_9;
    }
LABEL_8:
    memcpy(v9, __src, v4);
    char v9 = (void **)((char *)v9 + v4);
    goto LABEL_9;
  }
  uint64_t v10 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v4 | 7) != 0x17) {
    uint64_t v10 = v4 | 7;
  }
  uint64_t v11 = v10 + 1;
  char v9 = (void **)operator new(v10 + 1);
  __dst[1] = (void *)v4;
  __dst[2] = (void *)(v11 | 0x8000000000000000);
  __dst[0] = v9;
  if (__src != a3) {
    goto LABEL_8;
  }
LABEL_9:
  *(unsigned char *)char v9 = 0;
  uint64_t v12 = (char *)HIBYTE(__dst[2]);
  if (SHIBYTE(__dst[2]) >= 0) {
    unint64_t v13 = __dst;
  }
  else {
    unint64_t v13 = (void **)__dst[0];
  }
  if (SHIBYTE(__dst[2]) < 0) {
    uint64_t v12 = (char *)__dst[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), v13, &v12[(void)v13]);
  if (SHIBYTE(__dst[2]) >= 0) {
    unint64_t v14 = (const char *)__dst;
  }
  else {
    unint64_t v14 = (const char *)__dst[0];
  }
  uint64_t classname = std::__get_classname(v14, a4);
  if (SHIBYTE(__dst[2]) < 0) {
    operator delete(__dst[0]);
  }
  return classname;
}

void sub_235DC544C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  if (!*(unsigned char *)(a1 + 169))
  {
    __int16 v6 = (void *)(a1 + 64);
    unint64_t v5 = *(unsigned char **)(a1 + 72);
    unint64_t v16 = *(void *)(a1 + 80);
    if (*(unsigned char *)(a1 + 170))
    {
      if ((unint64_t)v5 < v16) {
        goto LABEL_24;
      }
      uint64_t v17 = (unsigned char *)*v6;
      unint64_t v18 = (unint64_t)&v5[-*v6];
      unint64_t v19 = v18 + 1;
      if ((uint64_t)(v18 + 1) >= 0)
      {
        unint64_t v20 = v16 - (void)v17;
        if (2 * v20 > v19) {
          unint64_t v19 = 2 * v20;
        }
        if (v20 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v21 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v21 = v19;
        }
        if (v21)
        {
          uint64_t v12 = operator new(v21);
          unint64_t v13 = &v12[v18];
          unint64_t v14 = &v12[v21];
          v12[v18] = v2;
          uint64_t v15 = (uint64_t)&v12[v18 + 1];
          if (v5 == v17) {
            goto LABEL_49;
          }
        }
        else
        {
          uint64_t v12 = 0;
          unint64_t v13 = &v5[-*v6];
          unint64_t v14 = 0;
          *(unsigned char *)unint64_t v18 = a2;
          uint64_t v15 = v18 + 1;
          if (v5 == v17) {
            goto LABEL_49;
          }
        }
        if (v18 >= 8 && (unint64_t)(v17 - v12) >= 0x20)
        {
          if (v18 >= 0x20)
          {
            unint64_t v28 = v18 & 0xFFFFFFFFFFFFFFE0;
            __int16 v38 = (long long *)(v5 - 16);
            unint64_t v39 = &v12[v5 - 16 - v17];
            unint64_t v40 = v18 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v41 = *v38;
              *(v39 - 1) = *(v38 - 1);
              _OWORD *v39 = v41;
              v39 -= 2;
              v38 -= 2;
              v40 -= 32;
            }
            while (v40);
            if (v18 == v28) {
              goto LABEL_86;
            }
            if ((v18 & 0x18) == 0)
            {
              v13 -= v28;
              v5 -= v28;
              goto LABEL_80;
            }
          }
          else
          {
            unint64_t v28 = 0;
          }
          v13 -= v18 & 0xFFFFFFFFFFFFFFF8;
          unint64_t v42 = &v5[-v28 - 8];
          unint64_t v43 = &v12[v42 - v17];
          unint64_t v44 = v28 - (v18 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v45 = *(void *)v42;
            v42 -= 8;
            *v43-- = v45;
            v44 += 8;
          }
          while (v44);
          v5 -= v18 & 0xFFFFFFFFFFFFFFF8;
          if (v18 == (v18 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_86;
          }
        }
LABEL_80:
        unint64_t v56 = v13 - 1;
        do
        {
          char v57 = *--v5;
          *v56-- = v57;
        }
        while (v5 != v17);
        goto LABEL_86;
      }
LABEL_89:
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    if ((unint64_t)v5 < v16) {
      goto LABEL_24;
    }
    uint64_t v23 = (unsigned char *)*v6;
    unint64_t v24 = (unint64_t)&v5[-*v6];
    unint64_t v25 = v24 + 1;
    if ((uint64_t)(v24 + 1) < 0) {
      goto LABEL_89;
    }
    unint64_t v26 = v16 - (void)v23;
    if (2 * v26 > v25) {
      unint64_t v25 = 2 * v26;
    }
    if (v26 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v27 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v27 = v25;
    }
    if (v27)
    {
      uint64_t v12 = operator new(v27);
      unint64_t v13 = &v12[v24];
      unint64_t v14 = &v12[v27];
      v12[v24] = v2;
      uint64_t v15 = (uint64_t)&v12[v24 + 1];
      if (v5 == v23)
      {
LABEL_49:
        *(void *)(a1 + 64) = v13;
        *(void *)(a1 + 72) = v15;
        *(void *)(a1 + 80) = v14;
        if (!v5) {
          goto LABEL_88;
        }
        goto LABEL_87;
      }
    }
    else
    {
      uint64_t v12 = 0;
      unint64_t v13 = &v5[-*v6];
      unint64_t v14 = 0;
      *(unsigned char *)unint64_t v24 = a2;
      uint64_t v15 = v24 + 1;
      if (v5 == v23) {
        goto LABEL_49;
      }
    }
    if (v24 >= 8 && (unint64_t)(v23 - v12) >= 0x20)
    {
      if (v24 >= 0x20)
      {
        unint64_t v29 = v24 & 0xFFFFFFFFFFFFFFE0;
        uint64_t v46 = (long long *)(v5 - 16);
        unint64_t v47 = &v12[v5 - 16 - v23];
        unint64_t v48 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          _OWORD *v47 = v49;
          v47 -= 2;
          v46 -= 2;
          v48 -= 32;
        }
        while (v48);
        if (v24 == v29) {
          goto LABEL_86;
        }
        if ((v24 & 0x18) == 0)
        {
          v13 -= v29;
          v5 -= v29;
          goto LABEL_84;
        }
      }
      else
      {
        unint64_t v29 = 0;
      }
      v13 -= v24 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v50 = &v5[-v29 - 8];
      uint64_t v51 = &v12[v50 - v23];
      unint64_t v52 = v29 - (v24 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v53 = *(void *)v50;
        v50 -= 8;
        *v51-- = v53;
        v52 += 8;
      }
      while (v52);
      v5 -= v24 & 0xFFFFFFFFFFFFFFF8;
      if (v24 == (v24 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_86;
      }
    }
LABEL_84:
    unint64_t v58 = v13 - 1;
    do
    {
      char v59 = *--v5;
      *v58-- = v59;
    }
    while (v5 != v23);
    goto LABEL_86;
  }
  char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
  unint64_t v5 = *(unsigned char **)(a1 + 72);
  unint64_t v4 = *(void *)(a1 + 80);
  if ((unint64_t)v5 < v4)
  {
LABEL_24:
    *unint64_t v5 = v2;
    uint64_t v15 = (uint64_t)(v5 + 1);
    goto LABEL_88;
  }
  __int16 v6 = (void *)(a1 + 64);
  unint64_t v7 = *(unsigned char **)(a1 + 64);
  unint64_t v8 = v5 - v7;
  uint64_t v9 = v5 - v7 + 1;
  if (v9 < 0) {
    goto LABEL_89;
  }
  unint64_t v10 = v4 - (void)v7;
  if (2 * v10 > v9) {
    uint64_t v9 = 2 * v10;
  }
  if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v11 = v9;
  }
  if (v11)
  {
    uint64_t v12 = operator new(v11);
    unint64_t v13 = &v12[v8];
    unint64_t v14 = &v12[v11];
    v12[v8] = v2;
    uint64_t v15 = (uint64_t)&v12[v8 + 1];
    if (v5 == v7) {
      goto LABEL_49;
    }
  }
  else
  {
    uint64_t v12 = 0;
    unint64_t v13 = (char *)(v5 - v7);
    unint64_t v14 = 0;
    *(unsigned char *)unint64_t v8 = v2;
    uint64_t v15 = v8 + 1;
    if (v5 == v7) {
      goto LABEL_49;
    }
  }
  if (v8 < 8 || (unint64_t)(v7 - v12) < 0x20) {
    goto LABEL_76;
  }
  if (v8 < 0x20)
  {
    unint64_t v22 = 0;
    goto LABEL_55;
  }
  unint64_t v22 = v8 & 0xFFFFFFFFFFFFFFE0;
  unint64_t v30 = (long long *)(v5 - 16);
  uint64_t v31 = &v12[v5 - 16 - v7];
  unint64_t v32 = v8 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    long long v33 = *v30;
    *(v31 - 1) = *(v30 - 1);
    _OWORD *v31 = v33;
    v31 -= 2;
    v30 -= 2;
    v32 -= 32;
  }
  while (v32);
  if (v8 != v22)
  {
    if ((v8 & 0x18) == 0)
    {
      v13 -= v22;
      v5 -= v22;
      goto LABEL_76;
    }
LABEL_55:
    v13 -= v8 & 0xFFFFFFFFFFFFFFF8;
    int v34 = &v5[-v22 - 8];
    char v35 = &v12[v34 - v7];
    unint64_t v36 = v22 - (v8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint64_t v37 = *(void *)v34;
      v34 -= 8;
      *v35-- = v37;
      v36 += 8;
    }
    while (v36);
    v5 -= v8 & 0xFFFFFFFFFFFFFFF8;
    if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_86;
    }
LABEL_76:
    long long v54 = v13 - 1;
    do
    {
      char v55 = *--v5;
      *v54-- = v55;
    }
    while (v5 != v7);
  }
LABEL_86:
  unint64_t v5 = (unsigned char *)*v6;
  *(void *)(a1 + 64) = v12;
  *(void *)(a1 + 72) = v15;
  *(void *)(a1 + 80) = v14;
  if (v5) {
LABEL_87:
  }
    operator delete(v5);
LABEL_88:
  *(void *)(a1 + 72) = v15;
}

void std::regex_traits<char>::transform<std::__wrap_iter<char *>>(uint64_t a1, uint64_t a2, char *a3)
{
  unint64_t v3 = (unint64_t)&a3[-a2];
  memset(__p, 170, sizeof(__p));
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v3 > 0x16)
  {
    uint64_t v14 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v14 = v3 | 7;
    }
    uint64_t v15 = v14 + 1;
    unint64_t v7 = operator new(v14 + 1);
    __p[1] = (void *)v3;
    __p[2] = (void *)(v15 | 0x8000000000000000);
    __p[0] = v7;
    if ((char *)a2 != a3) {
      goto LABEL_4;
    }
LABEL_13:
    unint64_t v8 = v7;
    goto LABEL_16;
  }
  HIBYTE(__p[2]) = (_BYTE)a3 - a2;
  unint64_t v7 = __p;
  if ((char *)a2 == a3) {
    goto LABEL_13;
  }
LABEL_4:
  if (v3 < 0x20 || (unint64_t)v7 - a2 < 0x20)
  {
    unint64_t v8 = v7;
    uint64_t v9 = (char *)a2;
  }
  else
  {
    unint64_t v8 = (char *)v7 + (v3 & 0xFFFFFFFFFFFFFFE0);
    uint64_t v9 = (char *)(a2 + (v3 & 0xFFFFFFFFFFFFFFE0));
    unint64_t v10 = (long long *)(a2 + 16);
    size_t v11 = v7 + 1;
    unint64_t v12 = v3 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v13 = *v10;
      *(v11 - 1) = *(v10 - 1);
      *size_t v11 = v13;
      v10 += 2;
      v11 += 2;
      v12 -= 32;
    }
    while (v12);
    if (v3 == (v3 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_16;
    }
  }
  do
  {
    char v16 = *v9++;
    *v8++ = v16;
  }
  while (v9 != a3);
LABEL_16:
  *unint64_t v8 = 0;
  uint64_t v17 = (char *)HIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0) {
    unint64_t v18 = __p;
  }
  else {
    unint64_t v18 = (void **)__p[0];
  }
  if (SHIBYTE(__p[2]) < 0) {
    uint64_t v17 = (char *)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), v18, &v17[(void)v18]);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_235DC5A98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x237DF6E70](exception, 9);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_235DC5AF8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string>>(void **a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v6 = 0x555555555555555;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x555555555555555) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v7 = (char *)operator new(48 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  unint64_t v8 = &v7[48 * v3];
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
  uint64_t v9 = &v7[48 * v6];
  long long v10 = *(_OWORD *)(a2 + 24);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(v8 + 24) = v10;
  *((void *)v8 + 5) = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  size_t v11 = v8 + 48;
  unint64_t v12 = (void **)*a1;
  long long v13 = (void **)a1[1];
  if (v13 != *a1)
  {
    do
    {
      long long v14 = *((_OWORD *)v13 - 3);
      *((void *)v8 - 4) = *(v13 - 4);
      *((_OWORD *)v8 - 3) = v14;
      *(v13 - 5) = 0;
      *(v13 - 4) = 0;
      *(v13 - 6) = 0;
      long long v15 = *(_OWORD *)(v13 - 3);
      *((void *)v8 - 1) = *(v13 - 1);
      *(_OWORD *)(v8 - 24) = v15;
      v8 -= 48;
      *(v13 - 2) = 0;
      *(v13 - 1) = 0;
      *(v13 - 3) = 0;
      v13 -= 6;
    }
    while (v13 != v12);
    long long v13 = (void **)*a1;
    char v16 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v11;
    a1[2] = v9;
    while (1)
    {
      if (v16 == v13) {
        goto LABEL_22;
      }
      if (*((char *)v16 - 1) < 0)
      {
        operator delete(*(v16 - 3));
        if ((*((char *)v16 - 25) & 0x80000000) == 0) {
          goto LABEL_14;
        }
      }
      else if ((*((char *)v16 - 25) & 0x80000000) == 0)
      {
        goto LABEL_14;
      }
      operator delete(*(v16 - 6));
LABEL_14:
      v16 -= 6;
    }
  }
  *a1 = v8;
  a1[1] = v11;
  a1[2] = v9;
LABEL_22:
  if (v13) {
    operator delete(v13);
  }
  return v11;
}

void (__cdecl ***std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  char v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  char v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

uint64_t std::__begin_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(*(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(void *)(a2 + 16);
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void (__cdecl ***std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  char v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  char v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

uint64_t std::__end_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  uint64_t v2 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(void *)(v2 + 8) = *(void *)(a2 + 16);
  *(unsigned char *)(v2 + 16) = 1;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_loop(std::basic_regex<char> *this, size_t __min, size_t __max, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end, BOOL __greedy)
{
  int v8 = __mexp_end;
  int v9 = __mexp_begin;
  long long v14 = operator new(0x10uLL);
  std::vector<char>::pointer end = this->__end_;
  first = end->__first_;
  v14[1] = first;
  end->__first_ = 0;
  uint64_t v17 = operator new(0x38uLL);
  unsigned int loop_count = this->__loop_count_;
  *((void *)v17 + 1) = __s->__first_;
  *((void *)v17 + 2) = v14;
  *(void *)uint64_t v17 = &unk_26E93AEB0;
  *((void *)v17 + 3) = __min;
  *((void *)v17 + 4) = __max;
  *((_DWORD *)v17 + 10) = loop_count;
  *((_DWORD *)v17 + 11) = v9;
  *((_DWORD *)v17 + 12) = v8;
  *((unsigned char *)v17 + 52) = __greedy;
  __s->__first_ = 0;
  unint64_t v19 = (std::__node<char> *)operator new(0x10uLL);
  v19->__vftable = (std::__node<char>_vtbl *)&unk_26E93AF40;
  v19[1].__vftable = (std::__node<char>_vtbl *)v17;
  this->__end_->__first_ = v19;
  this->__end_ = (std::__owns_one_state<char> *)*((void *)v17 + 2);
  __s->__first_ = (std::__node<char> *)v17;
  this->__loop_count_ = loop_count + 1;
}

void sub_235DC5FF8(_Unwind_Exception *a1)
{
  std::__loop<char>::~__loop(v1);
  _Unwind_Resume(a1);
}

void sub_235DC600C(_Unwind_Exception *a1)
{
  std::__empty_state<char>::~__empty_state(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x237DF6E70](exception, 8);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_235DC6064(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x237DF6E70](exception, 7);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_235DC60BC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_26E93AF10;
  uint64_t v2 = a1[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  unint64_t v3 = a1[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }
  return a1;
}

void std::__loop<char>::~__loop(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  *std::vector<std::csub_match> __p = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_26E93AF10;
  uint64_t v2 = __p[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  unint64_t v3 = __p[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }

  operator delete(__p);
}

uint64_t std::__loop<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(result + 40);
  uint64_t v3 = *(void *)(a2 + 56);
  unint64_t v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 != -991)
  {
    unint64_t *v4 = 0;
    if (!*(void *)(result + 32))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_28;
    }
    if (*(void *)(result + 24))
    {
      *(_DWORD *)a2 = -994;
      *(void *)(a2 + 80) = *(void *)(result + 8);
      *(void *)(v3 + 16 * v2 + 8) = *(void *)(a2 + 16);
      int v20 = *(_DWORD *)(result + 44);
      int v21 = *(_DWORD *)(result + 48);
      if (v20 == v21) {
        return result;
      }
      uint64_t v22 = (v21 - 1);
      uint64_t v23 = (v20 - 1);
      uint64_t v24 = *(void *)(a2 + 24);
      uint64_t v25 = *(void *)(a2 + 32);
      uint64_t v26 = v22 - v23;
      if ((unint64_t)(v22 - v23) >= 2)
      {
        uint64_t v27 = (v26 & 0xFFFFFFFFFFFFFFFELL) + v23;
        uint64_t v28 = v25 + 24 * v23 + 24;
        unint64_t v29 = v26 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(void *)(v28 - 24) = v24;
          *(void *)(v28 - 16) = v24;
          *(void *)uint64_t v28 = v24;
          *(void *)(v28 + 8) = v24;
          *(unsigned char *)(v28 - 8) = 0;
          *(unsigned char *)(v28 + 16) = 0;
          v28 += 48;
          v29 -= 2;
        }
        while (v29);
        if (v26 == (v26 & 0xFFFFFFFFFFFFFFFELL)) {
          return result;
        }
      }
      else
      {
        uint64_t v27 = v23;
      }
      uint64_t v30 = v22 - v27;
      uint64_t v31 = (unsigned char *)(v25 + 24 * v27 + 16);
      do
      {
        *((void *)v31 - 2) = v24;
        *((void *)v31 - 1) = v24;
        unsigned char *v31 = 0;
        v31 += 24;
        --v30;
      }
      while (v30);
      return result;
    }
LABEL_26:
    *(_DWORD *)a2 = -992;
    return result;
  }
  unint64_t v5 = *v4 + 1;
  unint64_t *v4 = v5;
  unint64_t v6 = *(void *)(result + 24);
  unint64_t v7 = *(void *)(result + 32);
  BOOL v8 = v5 < v7;
  if (v5 < v7 && v5 >= v6) {
    BOOL v8 = v5 < v7 && *(void *)(v3 + 16 * v2 + 8) != *(void *)(a2 + 16);
  }
  if (v8 && v5 >= v6) {
    goto LABEL_26;
  }
  *(_DWORD *)a2 = -994;
  if (!v8)
  {
LABEL_28:
    *(void *)(a2 + 80) = *(void *)(result + 16);
    return result;
  }
  *(void *)(a2 + 80) = *(void *)(result + 8);
  *(void *)(v3 + 16 * v2 + 8) = *(void *)(a2 + 16);
  int v12 = *(_DWORD *)(result + 44);
  int v13 = *(_DWORD *)(result + 48);
  if (v12 == v13) {
    return result;
  }
  uint64_t v14 = (v13 - 1);
  uint64_t v15 = (v12 - 1);
  uint64_t v16 = *(void *)(a2 + 24);
  uint64_t v17 = *(void *)(a2 + 32);
  uint64_t v18 = v14 - v15;
  if ((unint64_t)(v14 - v15) < 2)
  {
    uint64_t v19 = v15;
LABEL_39:
    uint64_t v34 = v14 - v19;
    char v35 = (unsigned char *)(v17 + 24 * v19 + 16);
    do
    {
      *((void *)v35 - 2) = v16;
      *((void *)v35 - 1) = v16;
      unsigned char *v35 = 0;
      v35 += 24;
      --v34;
    }
    while (v34);
    return result;
  }
  uint64_t v19 = (v18 & 0xFFFFFFFFFFFFFFFELL) + v15;
  uint64_t v32 = v17 + 24 * v15 + 24;
  unint64_t v33 = v18 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    *(void *)(v32 - 24) = v16;
    *(void *)(v32 - 16) = v16;
    *(void *)uint64_t v32 = v16;
    *(void *)(v32 + 8) = v16;
    *(unsigned char *)(v32 - 8) = 0;
    *(unsigned char *)(v32 + 16) = 0;
    v32 += 48;
    v33 -= 2;
  }
  while (v33);
  if (v18 != (v18 & 0xFFFFFFFFFFFFFFFELL)) {
    goto LABEL_39;
  }
  return result;
}

uint64_t std::__loop<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)a3 = -994;
  if (*(unsigned __int8 *)(result + 52) == a2)
  {
    *(void *)(a3 + 80) = *(void *)(result + 16);
    return result;
  }
  *(void *)(a3 + 80) = *(void *)(result + 8);
  int v3 = *(_DWORD *)(result + 44);
  *(void *)(*(void *)(a3 + 56) + 16 * *(unsigned int *)(result + 40) + 8) = *(void *)(a3 + 16);
  int v4 = *(_DWORD *)(result + 48);
  if (v3 != v4)
  {
    uint64_t v5 = (v4 - 1);
    uint64_t v6 = (v3 - 1);
    uint64_t v7 = *(void *)(a3 + 24);
    uint64_t v8 = *(void *)(a3 + 32);
    uint64_t v9 = v5 - v6;
    if ((unint64_t)(v5 - v6) < 2)
    {
      uint64_t v10 = v6;
LABEL_9:
      uint64_t v13 = v5 - v10;
      uint64_t v14 = (unsigned char *)(v8 + 24 * v10 + 16);
      do
      {
        *((void *)v14 - 2) = v7;
        *((void *)v14 - 1) = v7;
        unsigned char *v14 = 0;
        v14 += 24;
        --v13;
      }
      while (v13);
      return result;
    }
    uint64_t v10 = (v9 & 0xFFFFFFFFFFFFFFFELL) + v6;
    uint64_t v11 = v8 + 24 * v6 + 24;
    unint64_t v12 = v9 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      *(void *)(v11 - 24) = v7;
      *(void *)(v11 - 16) = v7;
      *(void *)uint64_t v11 = v7;
      *(void *)(v11 + 8) = v7;
      *(unsigned char *)(v11 - 8) = 0;
      *(unsigned char *)(v11 + 16) = 0;
      v11 += 48;
      v12 -= 2;
    }
    while (v12);
    if (v9 != (v9 & 0xFFFFFFFFFFFFFFFELL)) {
      goto LABEL_9;
    }
  }
  return result;
}

void (__cdecl ***std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_26E93AF10;
  uint64_t v2 = a1[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  int v3 = a1[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }
  return a1;
}

void std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  *std::vector<std::csub_match> __p = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_26E93AF10;
  uint64_t v2 = __p[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  int v3 = __p[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }

  operator delete(__p);
}

uint64_t std::__repeat_one_loop<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void (__cdecl ***std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_26E93AF10;
  uint64_t v2 = a1[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  int v3 = a1[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }
  return a1;
}

void std::__alternate<char>::~__alternate(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  *std::vector<std::csub_match> __p = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_26E93AF10;
  uint64_t v2 = __p[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  int v3 = __p[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }

  operator delete(__p);
}

void std::__alternate<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t std::__alternate<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)a3 = -994;
  uint64_t v3 = 8;
  if (a2) {
    uint64_t v3 = 16;
  }
  *(void *)(a3 + 80) = *(void *)(result + v3);
  return result;
}

uint64_t std::__empty_non_own_state<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x237DF6E70](exception, 15);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_235DC6890(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<char const*>((std::basic_regex<char> *)a1, (char *)a2, a3);
  uint64_t v7 = v6;
  if (v6 != (char *)a2 || v6 == a3) {
    return v7;
  }
  if ((char *)(a2 + 1) == a3) {
    return (char *)a2;
  }
  if (*(unsigned char *)a2 != 92) {
    return (char *)a2;
  }
  int v8 = *(unsigned __int8 *)(a2 + 1);
  if (v8 == 40)
  {
    uint64_t v9 = (std::basic_regex<char> *)(a2 + 2);
    if ((*(unsigned char *)(a1 + 24) & 2) != 0)
    {
      int v11 = *(_DWORD *)(a1 + 28);
    }
    else
    {
      uint64_t v10 = operator new(0x18uLL);
      int v11 = *(_DWORD *)(a1 + 28) + 1;
      *(_DWORD *)(a1 + 28) = v11;
      uint64_t v12 = *(void *)(a1 + 56);
      uint64_t v13 = *(void *)(v12 + 8);
      *uint64_t v10 = &unk_26E93AE20;
      v10[1] = v13;
      *((_DWORD *)v10 + 4) = v11;
      *(void *)(v12 + 8) = v10;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    do
    {
      if (v9 == (std::basic_regex<char> *)a3) {
        goto LABEL_25;
      }
      uint64_t v15 = v9;
      uint64_t v16 = *(std::__owns_one_state<char> **)(a1 + 56);
      int v17 = *(_DWORD *)(a1 + 28);
      uint64_t v18 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(a1, v15, a3);
      if (v18 == v15) {
        break;
      }
      uint64_t v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>((std::basic_regex<char> *)a1, v18, (std::basic_regex<char> *)a3, v16, (v17 + 1), (*(_DWORD *)(a1 + 28) + 1));
    }
    while (v9 != v15);
    if ((char *)&v15->__traits_.__loc_.__locale_ + 1 == a3
      || LOBYTE(v15->__traits_.__loc_.__locale_) != 92
      || BYTE1(v15->__traits_.__loc_.__locale_) != 41)
    {
LABEL_25:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    uint64_t v7 = (char *)v15 + 2 * (BYTE1(v15->__traits_.__loc_.__locale_) == 41);
    if ((*(unsigned char *)(a1 + 24) & 2) == 0)
    {
      uint64_t v19 = operator new(0x18uLL);
      uint64_t v20 = *(void *)(a1 + 56);
      uint64_t v21 = *(void *)(v20 + 8);
      void *v19 = &unk_26E93AE68;
      v19[1] = v21;
      *((_DWORD *)v19 + 4) = v11;
      *(void *)(v20 + 8) = v19;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
      return v7;
    }
    return v7;
  }
  if ((v8 & 0xF8) != 0x30 && (v8 & 0xFE) != 0x38 || (v8 - 49) > 8) {
    return (char *)a2;
  }
  if ((v8 - 48) > *(_DWORD *)(a1 + 28)) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref((std::basic_regex<char> *)a1, v8 - 48);
  return (char *)(a2 + 2);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  uint64_t v6 = this;
  if (this == a3) {
    return v6;
  }
  int locale_low = LOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low == 42)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, 0, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
    return (std::basic_regex<char> *)((char *)v6 + 1);
  }
  if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3
    || locale_low != 92
    || BYTE1(this->__traits_.__loc_.__locale_) != 123)
  {
    return v6;
  }
  uint64_t v9 = (std::basic_regex<char> *)((char *)this + 2 * (BYTE1(this->__traits_.__loc_.__locale_) == 123));
  if (v9 == a3) {
    goto LABEL_43;
  }
  int v10 = LOBYTE(v9->__traits_.__loc_.__locale_);
  if ((v10 & 0xF8) != 0x30 && (v10 & 0xFE) != 0x38) {
    goto LABEL_43;
  }
  int v11 = v10 - 48;
  uint64_t v12 = (std::basic_regex<char> *)((char *)&v9->__traits_.__loc_.__locale_ + 1);
  if ((std::basic_regex<char> *)((char *)&v9->__traits_.__loc_.__locale_ + 1) == a3)
  {
LABEL_16:
    uint64_t v12 = a3;
  }
  else
  {
    while (1)
    {
      int v13 = LOBYTE(v12->__traits_.__loc_.__locale_);
      if ((v13 & 0xF8) != 0x30 && (v13 & 0xFE) != 0x38) {
        break;
      }
      if (v11 >= 214748364) {
        goto LABEL_43;
      }
      int v11 = v13 + 10 * v11 - 48;
      uint64_t v12 = (std::basic_regex<char> *)((char *)v12 + 1);
      if (v12 == a3) {
        goto LABEL_16;
      }
    }
  }
  if (v12 == v9) {
    goto LABEL_43;
  }
  if (v12 == a3) {
    goto LABEL_41;
  }
  uint64_t v14 = (std::basic_regex<char> *)((char *)&v12->__traits_.__loc_.__locale_ + 1);
  int v15 = LOBYTE(v12->__traits_.__loc_.__locale_);
  if (v15 != 44)
  {
    if (v14 != a3 && v15 == 92 && LOBYTE(v14->__traits_.__loc_.__locale_) == 125)
    {
      uint64_t v19 = (unsigned __int8 *)&v12->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v11, v11, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v19;
    }
    goto LABEL_41;
  }
  if (v14 == a3) {
    goto LABEL_41;
  }
  int v16 = LOBYTE(v14->__traits_.__loc_.__locale_);
  if ((v16 & 0xF8) == 0x30 || (v16 & 0xFE) == 0x38)
  {
    uint64_t v14 = (std::basic_regex<char> *)((char *)&v12->__traits_.__loc_.__locale_ + 2);
    if ((std::basic_regex<char> *)((char *)&v12->__traits_.__loc_.__locale_ + 2) == a3) {
      goto LABEL_41;
    }
    int v17 = v16 - 48;
    while (1)
    {
      int v16 = LOBYTE(v14->__traits_.__loc_.__locale_);
      if ((v16 & 0xF8) != 0x30 && (v16 & 0xFE) != 0x38) {
        break;
      }
      if (v17 >= 214748364) {
        goto LABEL_43;
      }
      int v17 = v16 + 10 * v17 - 48;
      uint64_t v14 = (std::basic_regex<char> *)((char *)v14 + 1);
      if (v14 == a3) {
        goto LABEL_41;
      }
    }
  }
  else
  {
    int v17 = -1;
  }
  if (v14 == a3
    || (std::basic_regex<char> *)((char *)&v14->__traits_.__loc_.__locale_ + 1) == a3
    || v16 != 92
    || BYTE1(v14->__traits_.__loc_.__locale_) != 125)
  {
LABEL_41:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
  }
  uint64_t v18 = (unsigned __int8 *)v14 + 2 * (BYTE1(v14->__traits_.__loc_.__locale_) == 125);
  if (v17 != -1)
  {
    if (v17 >= v11)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v11, v17, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v18;
    }
LABEL_43:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v11, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
  return (std::basic_regex<char> *)v18;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  if (a2 != a3)
  {
    uint64_t v6 = a2 + 1;
    int v5 = *a2;
    if (a2 + 1 != a3 || v5 != 36)
    {
      if ((v5 - 46) > 0x2E || ((1 << (v5 - 46)) & 0x600000000001) == 0)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v5);
        return a2 + 1;
      }
      if (v6 == a3 || v5 != 92)
      {
        if (v5 == 46)
        {
          int v10 = (std::__node<char> *)operator new(0x10uLL);
          std::vector<char>::pointer end = this->__end_;
          first = end->__first_;
          v10->__vftable = (std::__node<char>_vtbl *)&unk_26E93B018;
          v10[1].__vftable = (std::__node<char>_vtbl *)first;
          end->__first_ = v10;
          this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
          return a2 + 1;
        }
      }
      else
      {
        int v9 = *v6;
        if ((v9 - 36) <= 0x3A && ((1 << (v9 - 36)) & 0x580000000000441) != 0)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v9);
          return a2 + 2;
        }
      }
    }
  }

  return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
}

void (__cdecl ***std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_any<char>::~__match_any(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

uint64_t std::__match_any<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned char **)(a2 + 16);
  if (v2 == *(unsigned char **)(a2 + 24) || !*v2)
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    *(void *)(a2 + 80) = *(void *)(result + 8);
  }
  return result;
}

BOOL std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(std::basic_regex<char> *this, char a2)
{
  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8) {
    return 0;
  }
  if (a2 - 48 > this->__marked_count_) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, a2 - 48);
  return 1;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  uint64_t v6 = *(std::__owns_one_state<char> **)(a1 + 56);
  int v7 = *(_DWORD *)(a1 + 28);
  int v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<char const*>((std::basic_regex<char> *)a1, a2, a3);
  if (v8 != a2
    || (int v8 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<char const*>(a1, a2, a3), v8 != a2))
  {
    if (v8 != a2) {
      goto LABEL_25;
    }
LABEL_4:
    if (v8 != a3)
    {
      int locale_low = SLOBYTE(a2->__traits_.__loc_.__locale_);
      if (locale_low == 36)
      {
        int v10 = operator new(0x18uLL);
        BOOL v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
        uint64_t v12 = *(void *)(a1 + 56);
        v10[1] = *(void *)(v12 + 8);
        int v13 = &unk_26E93AB08;
        goto LABEL_13;
      }
      if (locale_low != 40)
      {
        if (locale_low == 94)
        {
          int v10 = operator new(0x18uLL);
          BOOL v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
          uint64_t v12 = *(void *)(a1 + 56);
          v10[1] = *(void *)(v12 + 8);
          int v13 = &unk_26E93AAC0;
LABEL_13:
          *int v10 = v13;
          *((unsigned char *)v10 + 16) = v11;
          *(void *)(v12 + 8) = v10;
          goto LABEL_14;
        }
        return a2;
      }
      if ((*(unsigned char *)(a1 + 24) & 2) != 0)
      {
        int v18 = *(_DWORD *)(a1 + 28);
      }
      else
      {
        int v17 = operator new(0x18uLL);
        int v18 = *(_DWORD *)(a1 + 28) + 1;
        *(_DWORD *)(a1 + 28) = v18;
        uint64_t v19 = *(void *)(a1 + 56);
        uint64_t v20 = *(void *)(v19 + 8);
        *int v17 = &unk_26E93AE20;
        v17[1] = v20;
        *((_DWORD *)v17 + 4) = v18;
        *(void *)(v19 + 8) = v17;
        *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
      }
      ++*(_DWORD *)(a1 + 36);
      uint64_t v21 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, (char *)&a2->__traits_.__loc_.__locale_ + 1, a3);
      if (v21 == a3 || (uint64_t v22 = v21, LOBYTE(v21->__traits_.__loc_.__locale_) != 41)) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      }
      if ((*(unsigned char *)(a1 + 24) & 2) == 0)
      {
        uint64_t v23 = operator new(0x18uLL);
        uint64_t v24 = *(void *)(a1 + 56);
        uint64_t v25 = *(void *)(v24 + 8);
        void *v23 = &unk_26E93AE68;
        v23[1] = v25;
        *((_DWORD *)v23 + 4) = v18;
        *(void *)(v24 + 8) = v23;
        *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
      }
      --*(_DWORD *)(a1 + 36);
      int v8 = (std::basic_regex<char> *)((char *)&v22->__traits_.__loc_.__locale_ + 1);
    }
LABEL_25:
    if (v8 != a2) {
      goto LABEL_26;
    }
    return a2;
  }
  if (a2 == a3 || LOBYTE(a2->__traits_.__loc_.__locale_) != 46)
  {
    int v8 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(a1, (char *)a2, (char *)a3);
    if (v8 != a2) {
      goto LABEL_25;
    }
    goto LABEL_4;
  }
  uint64_t v14 = operator new(0x10uLL);
  uint64_t v15 = *(void *)(a1 + 56);
  uint64_t v16 = *(void *)(v15 + 8);
  void *v14 = &unk_26E93B018;
  v14[1] = v16;
  *(void *)(v15 + 8) = v14;
LABEL_14:
  *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
  int v8 = (std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1);
LABEL_26:
  size_t v26 = (*(_DWORD *)(a1 + 28) + 1);

  return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v8, a3, v6, (v7 + 1), v26);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  if (this == a3) {
    return this;
  }
  switch(LOBYTE(this->__traits_.__loc_.__locale_))
  {
    case '$':
    case '(':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
      return this;
    case ')':
      if (a1->__open_count_) {
        return this;
      }
      break;
    default:
      break;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
  return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
}

std::basic_regex<char>::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<char const*>(uint64_t a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  uint64_t v3 = this;
  if (this == a3) {
    return (std::basic_regex<char>::value_type *)v3;
  }
  int v4 = (char *)&this->__traits_.__loc_.__locale_ + 1;
  if ((std::basic_regex<char> *)((char *)&v3->__traits_.__loc_.__locale_ + 1) == a3
    || LOBYTE(v3->__traits_.__loc_.__locale_) != 92)
  {
    return (std::basic_regex<char>::value_type *)v3;
  }
  std::basic_regex<char>::value_type v5 = *v4;
  switch(*v4)
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
    case '}':
      std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v5);
      return (char *)v3 + 2;
    default:
      if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
      {
        uint64_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v4, (std::basic_regex<char>::value_type *)a3, 0);
      }
      else
      {
        BOOL v7 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v5);
        uint64_t v8 = 2;
        if (!v7) {
          uint64_t v8 = 0;
        }
        uint64_t result = (char *)v3 + v8;
      }
      break;
  }
  return result;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(uint64_t a1, std::sub_match<const char *> *a2, std::sub_match<const char *> *a3, std::vector<std::csub_match> *this, int a5)
{
  if ((a5 & 0x80) != 0) {
    int v9 = a5 & 0xFFA;
  }
  else {
    int v9 = a5;
  }
  int v10 = *(_DWORD *)(a1 + 28);
  this[1].__begin_ = a3;
  BOOL v11 = (const std::vector<std::csub_match>::value_type *)&this[1];
  this[1].__end_ = a3;
  LOBYTE(this[1].__end_cap_.__value_) = 0;
  std::vector<std::sub_match<char const*>>::assign(this, (v10 + 1), (std::vector<std::csub_match>::const_reference)&this[1]);
  this[2].__begin_ = a2;
  this[2].__end_ = a2;
  LOBYTE(this[2].__end_cap_.__value_) = 0;
  *(std::pair<const char *, const char *> *)&this[3].__begin_ = v11->std::pair<const char *, const char *>;
  LOBYTE(this[3].__end_cap_.__value_) = this[1].__end_cap_.__value_;
  if ((v9 & 0x800) == 0) {
    this[4].__end_ = a2;
  }
  LOBYTE(this[4].__begin_) = 1;
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0)
  {
    if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a2, (const char *)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0))goto LABEL_28; {
    goto LABEL_13;
    }
  }
  if (*(_DWORD *)(a1 + 28))
  {
    if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a2, (const char *)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0))goto LABEL_28; {
LABEL_13:
    }
    if (a2 != a3 && (v9 & 0x40) == 0)
    {
      int v12 = v9 | 0x80;
      for (unint64_t i = (char *)&a2->first + 1; i != (const char *)a3; ++i)
      {
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
        if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0)
        {
          if (*(_DWORD *)(a1 + 28))
          {
            if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, i, (const char *)a3, (uint64_t *)this, v12, 0))goto LABEL_28; {
          }
            }
          else if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)i, (uint64_t)a3, (uint64_t *)this, v12, 0))
          {
            goto LABEL_28;
          }
        }
        else if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, i, (const char *)a3, (uint64_t *)this, v12, 0))
        {
          goto LABEL_28;
        }
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
      }
      std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
      if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0)
      {
        if (*(_DWORD *)(a1 + 28))
        {
          if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a3, (const char *)a3, (uint64_t *)this, v12, 0))goto LABEL_28; {
        }
          }
        else if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)a3, (uint64_t)a3, (uint64_t *)this, v12, 0))
        {
          goto LABEL_28;
        }
      }
      else if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a3, (const char *)a3, (uint64_t *)this, v12, 0))
      {
        goto LABEL_28;
      }
    }
    uint64_t result = 0;
    this->__end_ = this->__begin_;
    return result;
  }
  if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)a2, (uint64_t)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0) & 1) == 0)goto LABEL_13; {
LABEL_28:
  }
  if (this->__end_ == this->__begin_) {
    std::vector<std::csub_match>::pointer begin = (std::vector<std::csub_match>::pointer)v11;
  }
  else {
    std::vector<std::csub_match>::pointer begin = this->__begin_;
  }
  first = (std::sub_match<const char *> *)begin->first;
  this[2].__end_ = (std::vector<std::csub_match>::pointer)begin->first;
  LOBYTE(this[2].__end_cap_.__value_) = this[2].__begin_ != first;
  second = (std::sub_match<const char *> *)begin->second;
  this[3].__begin_ = second;
  LOBYTE(this[3].__end_cap_.__value_) = second != this[3].__end_;
  return 1;
}

void std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(std::vector<std::ssub_match> *this, uint64_t a2, std::sub_match<std::__wrap_iter<const char *>> *a3, uint64_t *a4, char a5)
{
  uint64_t v10 = a4[6];
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
  std::vector<std::ssub_match>::pointer begin = this->__begin_;
  std::vector<char>::pointer end = this->__end_;
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
  if (v11 <= v14)
  {
    if (v11 < v14)
    {
      std::vector<char>::pointer end = (std::vector<std::ssub_match>::pointer)((char *)begin + 8 * ((a4[1] - *a4) >> 3));
      this->__end_ = end;
    }
  }
  else
  {
    std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append(this, v11 - v14);
    std::vector<std::ssub_match>::pointer begin = this->__begin_;
    std::vector<char>::pointer end = this->__end_;
  }
  if (end != begin)
  {
    uint64_t v15 = 0;
    unint64_t v16 = 0;
    uint64_t v18 = *a4;
    uint64_t v17 = a4[1];
    do
    {
      unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((v17 - v18) >> 3);
      uint64_t v20 = (void *)(v18 + v15 * 24);
      if (v19 <= v16) {
        uint64_t v21 = a4 + 3;
      }
      else {
        uint64_t v21 = v20;
      }
      begin[v15].first.__i_ = (std::__wrap_iter<const char *>::iterator_type)(a2 + *v21 - v10);
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v16) {
        uint64_t v22 = (uint64_t)(a4 + 3);
      }
      else {
        uint64_t v22 = *a4 + v15 * 24;
      }
      this->__begin_[v15].second.__i_ = (std::__wrap_iter<const char *>::iterator_type)(a2 + *(void *)(v22 + 8) - v10);
      uint64_t v18 = *a4;
      uint64_t v17 = a4[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v17 - *a4) >> 3) <= v16) {
        uint64_t v23 = (uint64_t)(a4 + 3);
      }
      else {
        uint64_t v23 = *a4 + v15 * 24;
      }
      char v24 = *(unsigned char *)(v23 + 16);
      std::vector<std::ssub_match>::pointer begin = this->__begin_;
      std::vector<std::ssub_match>::pointer v25 = this->__end_;
      this->__begin_[v15].matched = v24;
      ++v16;
      ++v15;
    }
    while (v16 < 0xAAAAAAAAAAAAAAABLL * (((char *)v25 - (char *)begin) >> 3));
  }
  this[1].__begin_ = a3;
  this[1].__end_ = a3;
  LOBYTE(this[1].__end_cap_.__value_) = 0;
  size_t v26 = (std::sub_match<std::__wrap_iter<const char *>> *)(a2 + a4[6] - v10);
  this[2].__begin_ = v26;
  this[2].__end_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[7] - v10);
  LOBYTE(this[2].__end_cap_.__value_) = *((unsigned char *)a4 + 64);
  this[3].__begin_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[9] - v10);
  this[3].__end_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[10] - v10);
  LOBYTE(this[3].__end_cap_.__value_) = *((unsigned char *)a4 + 88);
  if ((a5 & 1) == 0) {
    this[4].__end_ = v26;
  }
  LOBYTE(this[4].__begin_) = *((unsigned char *)a4 + 96);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  long long v100 = 0u;
  long long v101 = 0u;
  long long v99 = 0u;
  uint64_t v6 = *(void *)(a1 + 40);
  if (!v6)
  {
LABEL_79:
    uint64_t v85 = (void **)*((void *)&v99 + 1);
    v86 = (void **)v100;
    *((void *)&v101 + 1) = 0;
    unint64_t v87 = v100 - *((void *)&v99 + 1);
    if ((void)v100 - *((void *)&v99 + 1) < 0x11uLL) {
      goto LABEL_81;
    }
    do
    {
LABEL_80:
      operator delete(*v85);
      v86 = (void **)v100;
      uint64_t v85 = (void **)(*((void *)&v99 + 1) + 8);
      *((void *)&v99 + 1) = v85;
      unint64_t v87 = v100 - (void)v85;
    }
    while ((void)v100 - (void)v85 > 0x10uLL);
    goto LABEL_81;
  }
  *(_DWORD *)v98 = 0;
  memset(&v98[8], 0, 85);
  std::deque<std::__state<char>>::__add_back_capacity((uint64_t)&v99);
  unint64_t v11 = *(void *)(*((void *)&v99 + 1) + 8 * (((void)v101 + *((void *)&v101 + 1)) / 0x2AuLL))
      + 96 * (((void)v101 + *((void *)&v101 + 1)) % 0x2AuLL);
  long long v12 = *(_OWORD *)&v98[16];
  *(_OWORD *)unint64_t v11 = *(_OWORD *)v98;
  *(_OWORD *)(v11 + 16) = v12;
  *(void *)(v11 + 40) = 0;
  *(void *)(v11 + 48) = 0;
  *(void *)(v11 + 32) = 0;
  memset(&v98[32], 0, 24);
  *(void *)(v11 + 56) = 0;
  *(void *)(v11 + 64) = 0;
  *(void *)(v11 + 72) = 0;
  memset(&v98[56], 0, 24);
  uint64_t v13 = *(void *)&v98[80];
  *(void *)(v11 + 85) = *(void *)&v98[85];
  *(void *)(v11 + 80) = v13;
  uint64_t v15 = *((void *)&v101 + 1);
  uint64_t v14 = v101;
  uint64_t v16 = ++*((void *)&v101 + 1);
  uint64_t v17 = *((void *)&v99 + 1);
  unint64_t v18 = *(unsigned int *)(a1 + 32);
  unint64_t v19 = v101 + v15;
  unint64_t v20 = 8 * (v19 / 0x2A);
  unint64_t v21 = 96 * (v19 % 0x2A);
  unint64_t v22 = *(void *)(*((void *)&v99 + 1) + v20) + v21;
  *(_DWORD *)unint64_t v22 = 0;
  *(void *)(v22 + 8) = a2;
  *(void *)(*(void *)(v17 + v20) + v21 + 16) = a2;
  *(void *)(*(void *)(v17 + v20) + v21 + 24) = a3;
  unint64_t v23 = *(void *)(v17 + v20) + v21;
  uint64_t v26 = *(void *)(v23 + 56);
  char v24 = (std::vector<std::pair<unsigned long, const char *>> *)(v23 + 56);
  uint64_t v25 = v26;
  unint64_t v27 = ((uint64_t)v24->__end_ - v26) >> 4;
  unint64_t v92 = a4;
  if (v18 <= v27)
  {
    if (v18 < v27) {
      v24->__end_ = (std::vector<std::pair<unsigned long, const char *>>::pointer)(v25 + 16 * v18);
    }
  }
  else
  {
    std::vector<std::pair<unsigned long,char const*>>::__append(v24, v18 - v27);
    uint64_t v16 = *((void *)&v101 + 1);
    uint64_t v14 = v101;
    uint64_t v17 = *((void *)&v99 + 1);
  }
  uint64_t v94 = 0;
  char v95 = 0;
  unsigned int v28 = 0;
  unint64_t v29 = v14 + v16 - 1;
  unint64_t v30 = 8 * (v29 / 0x2A);
  unint64_t v31 = 96 * (v29 % 0x2A);
  *(void *)(*(void *)(v17 + v30) + v31 + 80) = v6;
  uint64_t v93 = a3;
  uint64_t v32 = a3 - a2;
  unint64_t v33 = *(void *)(v17 + v30) + v31;
  *(_DWORD *)(v33 + 88) = a5;
  *(unsigned char *)(v33 + 92) = a6;
  while (2)
  {
    if ((++v28 & 0xFFF) == 0 && (int)(v28 >> 12) >= (int)v32) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
    }
    unint64_t v35 = v16 + v101 - 1;
    uint64_t v36 = *(void *)(*((void *)&v99 + 1) + 8 * (v35 / 0x2A));
    unint64_t v37 = v35 % 0x2A;
    uint64_t v38 = v36 + 96 * (v35 % 0x2A);
    unint64_t v40 = (void *)(v38 + 80);
    uint64_t v39 = *(void *)(v38 + 80);
    if (v39) {
      (*(void (**)(uint64_t, unint64_t))(*(void *)v39 + 16))(v39, v36 + 96 * v37);
    }
    switch(*(_DWORD *)v38)
    {
      case 0xFFFFFC18:
        uint64_t v41 = *(void *)(v36 + 96 * v37 + 16);
        if ((a5 & 0x20) != 0 && v41 == a2 || (a5 & 0x1000) != 0 && v41 != v93) {
          goto LABEL_21;
        }
        uint64_t v65 = v41 - *(void *)(v36 + 96 * v37 + 8);
        uint64_t v66 = v94;
        if ((v95 & (v94 >= v65)) == 0) {
          uint64_t v66 = v65;
        }
        if (v66 == v32)
        {
          size_t v67 = (void **)*((void *)&v99 + 1);
          uint64_t v68 = v100;
          if ((void)v100 == *((void *)&v99 + 1))
          {
            *((void *)&v101 + 1) = 0;
            unint64_t v82 = 0;
          }
          else
          {
            int v69 = (void *)(*((void *)&v99 + 1) + 8 * ((unint64_t)v101 / 0x2A));
            int v70 = (void *)(*v69 + 96 * ((unint64_t)v101 % 0x2A));
            unint64_t v71 = *(void *)(*((void *)&v99 + 1) + 8 * ((*((void *)&v101 + 1) + (void)v101) / 0x2AuLL))
                + 96 * ((*((void *)&v101 + 1) + (void)v101) % 0x2AuLL);
            if (v70 != (void *)v71)
            {
              do
              {
                uint64_t v72 = (void *)v70[7];
                if (v72)
                {
                  v70[8] = v72;
                  operator delete(v72);
                }
                int64_t v73 = (void *)v70[4];
                if (v73)
                {
                  v70[5] = v73;
                  operator delete(v73);
                }
                v70 += 12;
                if ((void *)((char *)v70 - *v69) == (void *)4032)
                {
                  unint64_t v74 = (void *)v69[1];
                  ++v69;
                  int v70 = v74;
                }
              }
              while (v70 != (void *)v71);
              size_t v67 = (void **)*((void *)&v99 + 1);
              uint64_t v68 = v100;
            }
            *((void *)&v101 + 1) = 0;
            unint64_t v82 = v68 - (void)v67;
            if (v82 >= 0x11)
            {
              do
              {
                operator delete(*v67);
                size_t v67 = (void **)(*((void *)&v99 + 1) + 8);
                *((void *)&v99 + 1) = v67;
                unint64_t v82 = v100 - (void)v67;
              }
              while ((void)v100 - (void)v67 > 0x10uLL);
            }
          }
          if (v82 >> 3 == 1)
          {
            uint64_t v83 = 21;
          }
          else
          {
            if (v82 >> 3 != 2)
            {
LABEL_76:
              char v95 = 1;
              uint64_t v94 = v32;
              goto LABEL_8;
            }
            uint64_t v83 = 42;
          }
          *(void *)&long long v101 = v83;
          goto LABEL_76;
        }
        uint64_t v94 = v66;
        unint64_t v75 = *((void *)&v101 + 1) + v101 - 1;
        uint64_t v76 = *(void *)(*((void *)&v99 + 1) + 8 * (v75 / 0x2A));
        unint64_t v77 = v75 % 0x2A;
        v78 = *(void **)(v76 + 96 * (v75 % 0x2A) + 56);
        if (v78)
        {
          *(void *)(v76 + 96 * v77 + 64) = v78;
          operator delete(v78);
        }
        uint64_t v79 = *(void **)(v76 + 96 * v77 + 32);
        if (v79)
        {
          *(void *)(v76 + 96 * v77 + 40) = v79;
          operator delete(v79);
        }
        uint64_t v80 = 42 * ((uint64_t)(v100 - *((void *)&v99 + 1)) >> 3) - 1;
        long long v81 = v101;
        --*((void *)&v101 + 1);
        if ((void)v100 == *((void *)&v99 + 1)) {
          uint64_t v80 = 0;
        }
        if ((unint64_t)(v80 - (*((void *)&v81 + 1) + v81) + 1) >= 0x54)
        {
          operator delete(*(void **)(v100 - 8));
          *(void *)&long long v100 = v100 - 8;
        }
        char v95 = 1;
LABEL_8:
        uint64_t v16 = *((void *)&v101 + 1);
        if (*((void *)&v101 + 1)) {
          continue;
        }
        if (v95)
        {
          uint64_t v84 = *v92;
          *(void *)uint64_t v84 = a2;
          *(void *)(v84 + 8) = a2 + v94;
          uint64_t v6 = 1;
          *(unsigned char *)(v84 + 16) = 1;
          goto LABEL_79;
        }
        uint64_t v6 = 0;
        uint64_t v85 = (void **)*((void *)&v99 + 1);
        v86 = (void **)v100;
        *((void *)&v101 + 1) = 0;
        unint64_t v87 = v100 - *((void *)&v99 + 1);
        if ((void)v100 - *((void *)&v99 + 1) >= 0x11uLL) {
          goto LABEL_80;
        }
LABEL_81:
        unint64_t v88 = v87 >> 3;
        if (v88 == 1)
        {
          uint64_t v89 = 21;
LABEL_85:
          *(void *)&long long v101 = v89;
        }
        else if (v88 == 2)
        {
          uint64_t v89 = 42;
          goto LABEL_85;
        }
        if (v85 != v86)
        {
          do
          {
            int v90 = *v85++;
            operator delete(v90);
          }
          while (v85 != v86);
          if ((void)v100 != *((void *)&v99 + 1)) {
            *(void *)&long long v100 = v100 + ((*((void *)&v99 + 1) - v100 + 7) & 0xFFFFFFFFFFFFFFF8);
          }
        }
        if ((void)v99) {
          operator delete((void *)v99);
        }
        return v6;
      case 0xFFFFFC19:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        goto LABEL_8;
      case 0xFFFFFC1D:
        unint64_t v49 = v101;
        if (!(void)v101)
        {
          std::deque<std::__state<char>>::__add_front_capacity((uint64_t)&v99);
          unint64_t v49 = v101;
        }
        unint64_t v50 = (void *)(*((void *)&v99 + 1) + 8 * (v49 / 0x2A));
        uint64_t v51 = *v50 + 96 * (v49 % 0x2A);
        if ((void)v100 == *((void *)&v99 + 1)) {
          uint64_t v51 = 0;
        }
        if (v51 == *v50) {
          uint64_t v51 = *(v50 - 1) + 4032;
        }
        long long v52 = *(_OWORD *)(v38 + 16);
        *(_OWORD *)(v51 - 96) = *(_OWORD *)v38;
        *(_OWORD *)(v51 - 80) = v52;
        uint64_t v53 = v36 + 96 * v37;
        *(void *)(v51 - 56) = 0;
        *(void *)(v51 - 48) = 0;
        *(void *)(v51 - 64) = 0;
        *(_OWORD *)(v51 - 64) = *(_OWORD *)(v53 + 32);
        *(void *)(v51 - 48) = *(void *)(v53 + 48);
        *(void *)(v53 + 32) = 0;
        *(void *)(v53 + 40) = 0;
        *(void *)(v53 + 48) = 0;
        *(void *)(v51 - 40) = 0;
        *(void *)(v51 - 32) = 0;
        *(void *)(v51 - 24) = 0;
        *(_OWORD *)(v51 - 40) = *(_OWORD *)(v53 + 56);
        *(void *)(v51 - 24) = *(void *)(v53 + 72);
        *(void *)(v53 + 56) = 0;
        *(void *)(v53 + 64) = 0;
        *(void *)(v53 + 72) = 0;
        uint64_t v54 = *v40;
        *(void *)(v51 - 11) = *(void *)(v38 + 85);
        *(void *)(v51 - 16) = v54;
        uint64_t v55 = *((void *)&v101 + 1);
        *(void *)&long long v101 = v101 - 1;
        ++*((void *)&v101 + 1);
        uint64_t v56 = v55 + v101;
        unint64_t v57 = (v55 + (uint64_t)v101) / 0x2AuLL;
        uint64_t v43 = *(void *)(*((void *)&v99 + 1) + 8 * v57);
        unint64_t v44 = v56 - 42 * v57;
        uint64_t v45 = *(void **)(v43 + 96 * v44 + 56);
        if (!v45) {
          goto LABEL_23;
        }
        goto LABEL_22;
      case 0xFFFFFC1F:
LABEL_21:
        unint64_t v42 = *((void *)&v101 + 1) + v101 - 1;
        uint64_t v43 = *(void *)(*((void *)&v99 + 1) + 8 * (v42 / 0x2A));
        unint64_t v44 = v42 % 0x2A;
        uint64_t v45 = *(void **)(v43 + 96 * (v42 % 0x2A) + 56);
        if (v45)
        {
LABEL_22:
          *(void *)(v43 + 96 * v44 + 64) = v45;
          operator delete(v45);
        }
LABEL_23:
        uint64_t v46 = *(void **)(v43 + 96 * v44 + 32);
        if (v46)
        {
          *(void *)(v43 + 96 * v44 + 40) = v46;
          operator delete(v46);
        }
        uint64_t v47 = 42 * ((uint64_t)(v100 - *((void *)&v99 + 1)) >> 3) - 1;
        long long v48 = v101;
        --*((void *)&v101 + 1);
        if ((void)v100 == *((void *)&v99 + 1)) {
          uint64_t v47 = 0;
        }
        if ((unint64_t)(v47 - (*((void *)&v48 + 1) + v48) + 1) >= 0x54)
        {
          operator delete(*(void **)(v100 - 8));
          *(void *)&long long v100 = v100 - 8;
        }
        goto LABEL_8;
      case 0xFFFFFC20:
        *(void *)&long long v58 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v58 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v98[64] = v58;
        *(_OWORD *)&v98[80] = v58;
        *(_OWORD *)&v98[32] = v58;
        *(_OWORD *)&v98[48] = v58;
        *(_OWORD *)v98 = v58;
        *(_OWORD *)&v98[16] = v58;
        std::__state<char>::__state((uint64_t)v98, (long long *)(v36 + 96 * v37));
        (*(void (**)(void, uint64_t, unint64_t))(*(void *)*v40 + 24))(*v40, 1, v36 + 96 * v37);
        (*(void (**)(void, void, unsigned char *))(**(void **)&v98[80] + 24))(*(void *)&v98[80], 0, v98);
        uint64_t v59 = *((void *)&v99 + 1);
        if ((void)v100 == *((void *)&v99 + 1)) {
          uint64_t v60 = 0;
        }
        else {
          uint64_t v60 = 42 * ((uint64_t)(v100 - *((void *)&v99 + 1)) >> 3) - 1;
        }
        unint64_t v61 = *((void *)&v101 + 1) + v101;
        if (v60 == *((void *)&v101 + 1) + (void)v101)
        {
          std::deque<std::__state<char>>::__add_back_capacity((uint64_t)&v99);
          uint64_t v59 = *((void *)&v99 + 1);
          unint64_t v61 = *((void *)&v101 + 1) + v101;
        }
        unint64_t v62 = *(void *)(v59 + 8 * (v61 / 0x2A)) + 96 * (v61 % 0x2A);
        long long v63 = *(_OWORD *)&v98[16];
        *(_OWORD *)unint64_t v62 = *(_OWORD *)v98;
        *(_OWORD *)(v62 + 16) = v63;
        *(void *)(v62 + 40) = 0;
        *(void *)(v62 + 48) = 0;
        *(void *)(v62 + 32) = 0;
        *(_OWORD *)(v62 + 32) = *(_OWORD *)&v98[32];
        *(void *)(v62 + 48) = *(void *)&v98[48];
        memset(&v98[32], 0, 24);
        *(void *)(v62 + 56) = 0;
        *(void *)(v62 + 64) = 0;
        *(void *)(v62 + 72) = 0;
        *(_OWORD *)(v62 + 56) = *(_OWORD *)&v98[56];
        *(void *)(v62 + 72) = *(void *)&v98[72];
        memset(&v98[56], 0, 24);
        uint64_t v64 = *(void *)&v98[80];
        *(void *)(v62 + 85) = *(void *)&v98[85];
        *(void *)(v62 + 80) = v64;
        ++*((void *)&v101 + 1);
        if (*(void *)&v98[56])
        {
          *(void *)&v98[64] = *(void *)&v98[56];
          operator delete(*(void **)&v98[56]);
        }
        if (*(void *)&v98[32])
        {
          *(void *)&v98[40] = *(void *)&v98[32];
          operator delete(*(void **)&v98[32]);
        }
        goto LABEL_8;
      default:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
    }
  }
}

void sub_235DC8508(_Unwind_Exception *a1)
{
  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

void sub_235DC851C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::__state<char>::~__state((uint64_t *)va);
  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v9 - 144));
  _Unwind_Resume(a1);
}

void sub_235DC8564(_Unwind_Exception *a1)
{
  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

void sub_235DC8578(_Unwind_Exception *a1)
{
  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  size_t v67 = 0;
  uint64_t v68 = 0;
  unint64_t v69 = 0;
  *(_DWORD *)&v66[36] = -1431655766;
  *(void *)uint64_t v64 = 0xAAAAAAAA00000000;
  memset(&v64[8], 0, 32);
  *(_OWORD *)uint64_t v65 = 0u;
  memset(v66, 0, 36);
  uint64_t v6 = *(void *)(a1 + 40);
  if (!v6) {
    goto LABEL_63;
  }
  __x.second = a3;
  *(void *)&__x.matched = 0xAAAAAAAAAAAAAA00;
  __x.first = a3;
  *(_DWORD *)unint64_t v62 = 0;
  memset(&v62[8], 0, 85);
  uint64_t v68 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v67, (uint64_t)v62);
  if (*(void *)&v62[56])
  {
    *(void *)&v62[64] = *(void *)&v62[56];
    operator delete(*(void **)&v62[56]);
  }
  if (*(void *)&v62[32])
  {
    *(void *)&v62[40] = *(void *)&v62[32];
    operator delete(*(void **)&v62[32]);
  }
  uint64_t v13 = v68;
  *((_DWORD *)v68 - 24) = 0;
  *((void *)v13 - 11) = a2;
  *((void *)v13 - 10) = a2;
  *((void *)v13 - 9) = a3;
  uint64_t v14 = *((void *)v13 - 8);
  unint64_t v15 = *(unsigned int *)(a1 + 28);
  unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((*((void *)v13 - 7) - v14) >> 3);
  if (v15 <= v16)
  {
    if (v15 < v16) {
      *((void *)v13 - 7) = v14 + 24 * v15;
    }
  }
  else
  {
    std::vector<std::sub_match<char const*>>::__append((std::vector<std::csub_match> *)(v13 - 64), v15 - v16, &__x);
    uint64_t v13 = v68;
  }
  uint64_t v17 = *((void *)v13 - 5);
  unint64_t v18 = *(unsigned int *)(a1 + 32);
  unint64_t v19 = (*((void *)v13 - 4) - v17) >> 4;
  long long v58 = a4;
  if (v18 <= v19)
  {
    if (v18 < v19) {
      *((void *)v13 - 4) = v17 + 16 * v18;
    }
  }
  else
  {
    std::vector<std::pair<unsigned long,char const*>>::__append((std::vector<std::pair<unsigned long, const char *>> *)(v13 - 40), v18 - v19);
    uint64_t v13 = v68;
  }
  char v61 = 0;
  unsigned int v20 = 0;
  unint64_t v21 = (const char *)(a3 - a2);
  *((void *)v13 - 2) = v6;
  *((_DWORD *)v13 - 2) = a5;
  *(v13 - 4) = a6;
  uint64_t v60 = 0;
  uint64_t v59 = a3;
  do
  {
    BOOL v22 = (++v20 & 0xFFF) != 0 || (int)(v20 >> 12) < (int)v21;
    if (!v22) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
    }
    char v24 = v13 - 16;
    uint64_t v23 = *((void *)v13 - 2);
    uint64_t v25 = v13 - 96;
    if (v23) {
      (*(void (**)(uint64_t, char *))(*(void *)v23 + 16))(v23, v13 - 96);
    }
    switch(*(_DWORD *)v25)
    {
      case 0xFFFFFC18:
        uint64_t v26 = (const char *)*((void *)v13 - 10);
        if ((a5 & 0x20) != 0 && v26 == a2 || (a5 & 0x1000) != 0 && v26 != v59) {
          goto LABEL_29;
        }
        uint64_t v34 = &v26[-*((void *)v13 - 11)];
        unint64_t v35 = v60;
        if ((v61 & ((uint64_t)v60 >= (uint64_t)v34)) == 0)
        {
          long long v36 = *((_OWORD *)v13 - 5);
          *(_OWORD *)uint64_t v64 = *(_OWORD *)v25;
          *(_OWORD *)&v64[16] = v36;
          if (v64 != v25)
          {
            std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>((char **)&v64[32], *((char **)v13 - 8), *((char **)v13 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v13 - 7) - *((void *)v13 - 8)) >> 3));
            std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((uint64_t)v66, *((const double **)v13 - 5), *((const double **)v13 - 4), (uint64_t)(*((void *)v13 - 4) - *((void *)v13 - 5)) >> 4);
          }
          uint64_t v37 = *(void *)v24;
          *(void *)&v66[29] = *(void *)(v13 - 11);
          *(void *)&v66[24] = v37;
          unint64_t v35 = v34;
        }
        uint64_t v38 = v68;
        if (v35 == v21)
        {
          uint64_t v39 = v67;
          while (v38 != v39)
          {
            unint64_t v40 = (void *)*((void *)v38 - 5);
            if (v40)
            {
              *((void *)v38 - 4) = v40;
              operator delete(v40);
            }
            uint64_t v41 = (void *)*((void *)v38 - 8);
            if (v41)
            {
              *((void *)v38 - 7) = v41;
              operator delete(v41);
            }
            v38 -= 96;
          }
          uint64_t v68 = v39;
          char v61 = 1;
          uint64_t v60 = v21;
        }
        else
        {
          uint64_t v60 = v35;
          unint64_t v42 = (void *)*((void *)v68 - 5);
          if (v42)
          {
            *((void *)v68 - 4) = v42;
            operator delete(v42);
          }
          uint64_t v43 = (void *)*((void *)v38 - 8);
          if (v43)
          {
            *((void *)v38 - 7) = v43;
            operator delete(v43);
          }
          uint64_t v68 = v38 - 96;
          char v61 = 1;
        }
        break;
      case 0xFFFFFC1D:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        break;
      case 0xFFFFFC1F:
LABEL_29:
        unint64_t v27 = v68;
        unsigned int v28 = (void *)*((void *)v68 - 5);
        if (v28)
        {
          *((void *)v68 - 4) = v28;
          operator delete(v28);
        }
        unint64_t v29 = (void *)*((void *)v27 - 8);
        if (v29)
        {
          *((void *)v27 - 7) = v29;
          operator delete(v29);
        }
        uint64_t v68 = v27 - 96;
        break;
      case 0xFFFFFC20:
        *(void *)&long long v30 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v30 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v62[64] = v30;
        *(_OWORD *)&v62[80] = v30;
        *(_OWORD *)&v62[32] = v30;
        *(_OWORD *)&v62[48] = v30;
        *(_OWORD *)unint64_t v62 = v30;
        *(_OWORD *)&v62[16] = v30;
        std::__state<char>::__state((uint64_t)v62, (long long *)v13 - 6);
        (*(void (**)(void, uint64_t, char *))(**(void **)v24 + 24))(*(void *)v24, 1, v13 - 96);
        (*(void (**)(void, void, unsigned char *))(**(void **)&v62[80] + 24))(*(void *)&v62[80], 0, v62);
        unint64_t v31 = v68;
        if ((unint64_t)v68 >= v69)
        {
          uint64_t v68 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v67, (uint64_t)v62);
          if (*(void *)&v62[56])
          {
            *(void *)&v62[64] = *(void *)&v62[56];
            operator delete(*(void **)&v62[56]);
          }
        }
        else
        {
          long long v32 = *(_OWORD *)&v62[16];
          *(_OWORD *)uint64_t v68 = *(_OWORD *)v62;
          *((_OWORD *)v31 + 1) = v32;
          *((void *)v31 + 4) = 0;
          *((void *)v31 + 5) = 0;
          *((void *)v31 + 6) = 0;
          *((void *)v31 + 7) = 0;
          *((_OWORD *)v31 + 2) = *(_OWORD *)&v62[32];
          *((void *)v31 + 6) = *(void *)&v62[48];
          memset(&v62[32], 0, 24);
          *((void *)v31 + 8) = 0;
          *((void *)v31 + 9) = 0;
          *(_OWORD *)(v31 + 56) = *(_OWORD *)&v62[56];
          *((void *)v31 + 9) = *(void *)&v62[72];
          memset(&v62[56], 0, 24);
          uint64_t v33 = *(void *)&v62[80];
          *(void *)(v31 + 85) = *(void *)&v62[85];
          *((void *)v31 + 10) = v33;
          uint64_t v68 = v31 + 96;
        }
        if (*(void *)&v62[32])
        {
          *(void *)&v62[40] = *(void *)&v62[32];
          operator delete(*(void **)&v62[32]);
        }
        break;
      default:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
    }
    uint64_t v13 = v68;
  }
  while (v67 != v68);
  if ((v61 & 1) == 0)
  {
LABEL_63:
    uint64_t v50 = 0;
    uint64_t v51 = *(void **)v66;
    if (!*(void *)v66) {
      goto LABEL_65;
    }
    goto LABEL_64;
  }
  uint64_t v44 = *v58;
  *(void *)uint64_t v44 = a2;
  *(void *)(v44 + 8) = &v60[(void)a2];
  *(unsigned char *)(v44 + 16) = 1;
  if (v65[0] != *(void **)&v64[32])
  {
    unint64_t v45 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v65[0] - *(void *)&v64[32]) >> 3);
    uint64_t v46 = (unsigned char *)(*(void *)&v64[32] + 16);
    unsigned int v47 = 1;
    do
    {
      uint64_t v48 = v44 + 24 * v47;
      *(_OWORD *)uint64_t v48 = *((_OWORD *)v46 - 1);
      char v49 = *v46;
      v46 += 24;
      *(unsigned char *)(v48 + 16) = v49;
      BOOL v22 = v45 > v47++;
    }
    while (v22);
  }
  uint64_t v50 = 1;
  uint64_t v51 = *(void **)v66;
  if (*(void *)v66)
  {
LABEL_64:
    *(void *)&v66[8] = v51;
    operator delete(v51);
  }
LABEL_65:
  if (*(void *)&v64[32])
  {
    v65[0] = *(void **)&v64[32];
    operator delete(*(void **)&v64[32]);
  }
  long long v52 = v67;
  if (v67)
  {
    uint64_t v53 = v68;
    uint64_t v54 = v67;
    if (v68 != v67)
    {
      do
      {
        uint64_t v55 = (void *)*((void *)v53 - 5);
        if (v55)
        {
          *((void *)v53 - 4) = v55;
          operator delete(v55);
        }
        uint64_t v56 = (void *)*((void *)v53 - 8);
        if (v56)
        {
          *((void *)v53 - 7) = v56;
          operator delete(v56);
        }
        v53 -= 96;
      }
      while (v53 != v52);
      uint64_t v54 = v67;
    }
    uint64_t v68 = v52;
    operator delete(v54);
  }
  return v50;
}

void sub_235DC8BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  std::__state<char>::~__state(&a33);
  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v33 - 120));
  _Unwind_Resume(a1);
}

void std::deque<std::__state<char>>::clear(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    a1[5] = 0;
    unint64_t v11 = 0;
  }
  else
  {
    unint64_t v4 = a1[4];
    std::basic_regex<char>::value_type v5 = &v2[v4 / 0x2A];
    uint64_t v6 = (char *)*v5 + 96 * (v4 % 0x2A);
    unint64_t v7 = (unint64_t)v2[(a1[5] + v4) / 0x2A] + 96 * ((a1[5] + v4) % 0x2A);
    if (v6 != (char *)v7)
    {
      do
      {
        uint64_t v8 = (void *)*((void *)v6 + 7);
        if (v8)
        {
          *((void *)v6 + 8) = v8;
          operator delete(v8);
        }
        uint64_t v9 = (void *)*((void *)v6 + 4);
        if (v9)
        {
          *((void *)v6 + 5) = v9;
          operator delete(v9);
        }
        v6 += 96;
        if (v6 - (unsigned char *)*v5 == 4032)
        {
          uint64_t v10 = (char *)v5[1];
          ++v5;
          uint64_t v6 = v10;
        }
      }
      while (v6 != (char *)v7);
      uint64_t v2 = (void **)a1[1];
      uint64_t v3 = (void **)a1[2];
    }
    a1[5] = 0;
    unint64_t v11 = (char *)v3 - (char *)v2;
    if (v11 >= 0x11)
    {
      do
      {
        operator delete(*v2);
        uint64_t v12 = a1[2];
        uint64_t v2 = (void **)(a1[1] + 8);
        a1[1] = v2;
        unint64_t v11 = v12 - (void)v2;
      }
      while (v11 > 0x10);
    }
  }
  if (v11 >> 3 == 1)
  {
    uint64_t v13 = 21;
  }
  else
  {
    if (v11 >> 3 != 2) {
      return;
    }
    uint64_t v13 = 42;
  }
  a1[4] = v13;
}

void **std::deque<std::__state<char>>::~deque[abi:ne180100](void **a1)
{
  std::deque<std::__state<char>>::clear(a1);
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  if (v2 != v3)
  {
    do
    {
      unint64_t v4 = *v2++;
      operator delete(v4);
    }
    while (v2 != v3);
    uint64_t v6 = a1[1];
    std::basic_regex<char>::value_type v5 = a1[2];
    if (v5 != v6) {
      a1[2] = &v5[(v6 - v5 + 7) & 0xFFFFFFFFFFFFFFF8];
    }
  }
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::deque<std::__state<char>>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0x2A;
  unint64_t v4 = v2 - 42;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    uint64_t v6 = *(void **)(a1 + 8);
    std::basic_regex<char>::value_type v5 = *(char **)(a1 + 16);
    unint64_t v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    *(void *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_78:
      *(void *)std::basic_regex<char>::value_type v5 = v8;
      *(void *)(a1 + 16) += 8;
      return;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v32 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v32 = 1;
      }
      if (!(v32 >> 61))
      {
        unint64_t v33 = v32 >> 2;
        uint64_t v34 = 8 * v32;
        unint64_t v35 = (char *)operator new(8 * v32);
        long long v36 = &v35[8 * v33];
        uint64_t v37 = &v35[v34];
        int64_t v39 = v5 - v7;
        BOOL v38 = v5 == v7;
        std::basic_regex<char>::value_type v5 = v36;
        if (!v38)
        {
          std::basic_regex<char>::value_type v5 = &v36[v39 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v40 = v39 - 8;
          if ((unint64_t)(v39 - 8) >= 0x38)
          {
            int64_t v73 = &v35[8 * v33];
            uint64_t v41 = v73;
            if ((unint64_t)(v73 - v7) >= 0x20)
            {
              uint64_t v74 = (v40 >> 3) + 1;
              uint64_t v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v41 = &v36[v75];
              v7 += v75;
              uint64_t v76 = (long long *)(v6 + 3);
              unint64_t v77 = v73 + 16;
              uint64_t v78 = v74 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v79 = *v76;
                *(v77 - 1) = *(v76 - 1);
                _OWORD *v77 = v79;
                v76 += 2;
                v77 += 2;
                v78 -= 4;
              }
              while (v78);
              if (v74 == (v74 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_76;
              }
            }
          }
          else
          {
            uint64_t v41 = &v35[8 * v33];
          }
          do
          {
            uint64_t v80 = *(void *)v7;
            v7 += 8;
            *(void *)uint64_t v41 = v80;
            v41 += 8;
          }
          while (v41 != v5);
        }
        goto LABEL_76;
      }
LABEL_87:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    if (v11 >= -1) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = v11 + 2;
    }
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = -v13;
    unint64_t v15 = &v7[-8 * v13];
    int64_t v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      unint64_t v7 = *(char **)(a1 + 8);
    }
    std::basic_regex<char>::value_type v5 = &v15[v16];
    *(void *)(a1 + 8) = &v7[8 * v14];
    *(void *)(a1 + 16) = &v15[v16];
    goto LABEL_78;
  }
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 24);
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v20 = v18 - v19;
  uint64_t v21 = (v18 - v19) >> 3;
  uint64_t v22 = v17 - *(void *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      uint64_t v89 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back((char **)a1, &v89);
      return;
    }
    uint64_t v89 = operator new(0xFC0uLL);
    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v89);
    unint64_t v42 = *(void **)(a1 + 8);
    std::basic_regex<char>::value_type v5 = *(char **)(a1 + 16);
    unint64_t v7 = (char *)(v42 + 1);
    uint64_t v8 = *v42;
    *(void *)(a1 + 8) = v42 + 1;
    if (v5 != *(char **)(a1 + 24)) {
      goto LABEL_78;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v43 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v43 = 1;
      }
      if (!(v43 >> 61))
      {
        unint64_t v44 = v43 >> 2;
        uint64_t v45 = 8 * v43;
        unint64_t v35 = (char *)operator new(8 * v43);
        long long v36 = &v35[8 * v44];
        uint64_t v37 = &v35[v45];
        int64_t v46 = v5 - v7;
        BOOL v38 = v5 == v7;
        std::basic_regex<char>::value_type v5 = v36;
        if (!v38)
        {
          std::basic_regex<char>::value_type v5 = &v36[v46 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v47 = v46 - 8;
          if ((unint64_t)(v46 - 8) >= 0x38)
          {
            long long v81 = &v35[8 * v44];
            uint64_t v48 = v81;
            if ((unint64_t)(v81 - v7) >= 0x20)
            {
              uint64_t v82 = (v47 >> 3) + 1;
              uint64_t v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v48 = &v36[v83];
              v7 += v83;
              uint64_t v84 = (long long *)(v42 + 3);
              uint64_t v85 = v81 + 16;
              uint64_t v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v87 = *v84;
                *(v85 - 1) = *(v84 - 1);
                *uint64_t v85 = v87;
                v84 += 2;
                v85 += 2;
                v86 -= 4;
              }
              while (v86);
              if (v82 == (v82 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_76;
              }
            }
          }
          else
          {
            uint64_t v48 = &v35[8 * v44];
          }
          do
          {
            uint64_t v88 = *(void *)v7;
            v7 += 8;
            *(void *)uint64_t v48 = v88;
            v48 += 8;
          }
          while (v48 != v5);
        }
LABEL_76:
        *(void *)a1 = v35;
        *(void *)(a1 + 8) = v36;
        *(void *)(a1 + 16) = v5;
        *(void *)(a1 + 24) = v37;
        if (v9)
        {
          operator delete(v9);
          std::basic_regex<char>::value_type v5 = *(char **)(a1 + 16);
        }
        goto LABEL_78;
      }
      goto LABEL_87;
    }
    goto LABEL_5;
  }
  uint64_t v23 = v22 >> 2;
  if (v17 == *(void *)a1) {
    unint64_t v24 = 1;
  }
  else {
    unint64_t v24 = v23;
  }
  if (v24 >> 61) {
    goto LABEL_87;
  }
  uint64_t v25 = (char *)operator new(8 * v24);
  uint64_t v26 = operator new(0xFC0uLL);
  unint64_t v27 = &v25[8 * v21];
  unsigned int v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    long long v30 = v26;
    if (v20 < 1)
    {
      if (v18 == v19) {
        unint64_t v49 = 1;
      }
      else {
        unint64_t v49 = v20 >> 2;
      }
      if (v49 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v27 = (char *)operator new(8 * v49);
      unsigned int v28 = &v27[8 * v49];
      operator delete(v25);
      uint64_t v50 = *(void *)(a1 + 8);
      uint64_t v18 = *(void *)(a1 + 16);
      uint64_t v25 = v27;
      *(void *)unint64_t v27 = v30;
      unint64_t v29 = v27 + 8;
      if (v18 == v50) {
        goto LABEL_45;
      }
    }
    else
    {
      unint64_t v31 = v21 + 2;
      if (v21 >= -1) {
        unint64_t v31 = v21 + 1;
      }
      v27 -= 8 * (v31 >> 1);
      *(void *)unint64_t v27 = v26;
      unint64_t v29 = v27 + 8;
      if (v18 == v19) {
        goto LABEL_45;
      }
    }
    goto LABEL_51;
  }
  *(void *)unint64_t v27 = v26;
  unint64_t v29 = v27 + 8;
  if (v18 != v19)
  {
    do
    {
LABEL_51:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v25) {
            unint64_t v57 = 1;
          }
          else {
            unint64_t v57 = (v28 - v25) >> 2;
          }
          if (v57 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          long long v58 = (char *)operator new(8 * v57);
          uint64_t v59 = v58;
          unint64_t v60 = (v57 + 3) >> 2;
          unint64_t v27 = &v58[8 * v60];
          int64_t v61 = v29 - v25;
          BOOL v38 = v29 == v25;
          unint64_t v29 = v27;
          if (!v38)
          {
            unint64_t v29 = &v27[v61 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v62 = v61 - 8;
            long long v63 = &v58[8 * v60];
            uint64_t v64 = v25;
            if (v62 < 0x38) {
              goto LABEL_91;
            }
            uint64_t v65 = 8 * v60;
            long long v63 = &v58[8 * v60];
            uint64_t v64 = v25;
            if ((unint64_t)(v63 - v25) < 0x20) {
              goto LABEL_91;
            }
            uint64_t v66 = (v62 >> 3) + 1;
            uint64_t v67 = 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
            long long v63 = &v27[v67];
            uint64_t v64 = &v25[v67];
            uint64_t v68 = (long long *)(v25 + 16);
            unint64_t v69 = &v58[v65 + 16];
            uint64_t v70 = v66 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v71 = *v68;
              *((_OWORD *)v69 - 1) = *(v68 - 1);
              *(_OWORD *)unint64_t v69 = v71;
              v68 += 2;
              v69 += 32;
              v70 -= 4;
            }
            while (v70);
            if (v66 != (v66 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_91:
              do
              {
                uint64_t v72 = *(void *)v64;
                v64 += 8;
                *(void *)long long v63 = v72;
                v63 += 8;
              }
              while (v63 != v29);
            }
          }
          unsigned int v28 = &v58[8 * v57];
          operator delete(v25);
          uint64_t v25 = v59;
        }
        else
        {
          uint64_t v53 = (v28 - v29) >> 3;
          if (v53 >= -1) {
            uint64_t v54 = v53 + 1;
          }
          else {
            uint64_t v54 = v53 + 2;
          }
          uint64_t v55 = v54 >> 1;
          unint64_t v27 = &v25[8 * (v54 >> 1)];
          uint64_t v56 = v25;
          if (v29 != v25)
          {
            memmove(v27, v25, v29 - v25);
            uint64_t v56 = v29;
          }
          unint64_t v29 = (char *)v56 + 8 * v55;
        }
      }
      uint64_t v52 = *(void *)(v18 - 8);
      v18 -= 8;
      *((void *)v27 - 1) = v52;
      v27 -= 8;
    }
    while (v18 != *(void *)(a1 + 8));
  }
LABEL_45:
  uint64_t v51 = *(char **)a1;
  *(void *)a1 = v25;
  *(void *)(a1 + 8) = v27;
  *(void *)(a1 + 16) = v29;
  *(void *)(a1 + 24) = v28;
  if (v51)
  {
    operator delete(v51);
  }
}

void sub_235DC9358(_Unwind_Exception *a1)
{
  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(char **a1, void *a2)
{
  unint64_t v4 = a1[2];
  if (v4 != a1[3]) {
    goto LABEL_22;
  }
  std::basic_regex<char>::value_type v5 = *a1;
  uint64_t v6 = a1[1];
  if (v6 > *a1)
  {
    uint64_t v7 = (v6 - *a1) >> 3;
    if (v7 >= -1) {
      uint64_t v8 = v7 + 1;
    }
    else {
      uint64_t v8 = v7 + 2;
    }
    uint64_t v9 = v8 >> 1;
    uint64_t v10 = -v9;
    uint64_t v11 = &v6[-8 * v9];
    int64_t v12 = v4 - v6;
    if (v4 != v6)
    {
      memmove(&v6[-8 * v9], a1[1], v4 - v6);
      unint64_t v4 = a1[1];
    }
    uint64_t v13 = &v4[8 * v10];
    unint64_t v4 = &v11[v12];
    a1[1] = v13;
    a1[2] = &v11[v12];
    goto LABEL_22;
  }
  unint64_t v14 = (v4 - v5) >> 2;
  if (v4 == v5) {
    unint64_t v14 = 1;
  }
  if (v14 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  unint64_t v15 = v14 >> 2;
  uint64_t v16 = 8 * v14;
  uint64_t v17 = (char *)operator new(8 * v14);
  uint64_t v18 = &v17[8 * v15];
  int64_t v20 = v4 - v6;
  BOOL v19 = v4 == v6;
  unint64_t v4 = v18;
  if (!v19)
  {
    unint64_t v4 = &v18[v20 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v21 = v20 - 8;
    if ((unint64_t)(v20 - 8) < 0x38)
    {
      uint64_t v22 = &v17[8 * v15];
      do
      {
LABEL_19:
        uint64_t v31 = *(void *)v6;
        v6 += 8;
        *(void *)uint64_t v22 = v31;
        v22 += 8;
      }
      while (v22 != v4);
      goto LABEL_20;
    }
    uint64_t v23 = &v17[8 * v15];
    uint64_t v22 = v23;
    if ((unint64_t)(v23 - v6) < 0x20) {
      goto LABEL_19;
    }
    uint64_t v24 = (v21 >> 3) + 1;
    uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v22 = &v18[v25];
    uint64_t v26 = &v6[v25];
    unint64_t v27 = (long long *)(v6 + 16);
    unsigned int v28 = v23 + 16;
    uint64_t v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v30 = *v27;
      *(v28 - 1) = *(v27 - 1);
      *unsigned int v28 = v30;
      v27 += 2;
      v28 += 2;
      v29 -= 4;
    }
    while (v29);
    uint64_t v6 = v26;
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_19;
    }
  }
LABEL_20:
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v4;
  a1[3] = &v17[v16];
  if (v5)
  {
    operator delete(v5);
    unint64_t v4 = a1[2];
  }
LABEL_22:
  *(void *)unint64_t v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front(void **a1, void *a2)
{
  unint64_t v4 = (char *)a1[1];
  if (v4 == *a1)
  {
    uint64_t v7 = a1[2];
    uint64_t v6 = a1[3];
    if (v7 >= v6)
    {
      uint64_t v13 = v6 - v4;
      BOOL v12 = v13 == 0;
      unint64_t v14 = v13 >> 2;
      if (v12) {
        unint64_t v14 = 1;
      }
      if (v14 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v15 = (v14 + 3) >> 2;
      uint64_t v16 = 8 * v14;
      uint64_t v17 = (char *)operator new(8 * v14);
      std::basic_regex<char>::value_type v5 = &v17[8 * v15];
      uint64_t v18 = v5;
      uint64_t v19 = v7 - v4;
      if (v7 != v4)
      {
        uint64_t v18 = &v5[v19 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v20 = v19 - 8;
        unint64_t v21 = &v17[8 * v15];
        uint64_t v22 = v4;
        if (v20 < 0x38) {
          goto LABEL_27;
        }
        uint64_t v23 = &v17[8 * v15];
        unint64_t v21 = v23;
        uint64_t v22 = v4;
        if ((unint64_t)(v23 - v4) < 0x20) {
          goto LABEL_27;
        }
        uint64_t v24 = (v20 >> 3) + 1;
        uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v21 = &v5[v25];
        uint64_t v22 = &v4[v25];
        uint64_t v26 = (long long *)(v4 + 16);
        unint64_t v27 = v23 + 16;
        uint64_t v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v29 = *v26;
          *(v27 - 1) = *(v26 - 1);
          *unint64_t v27 = v29;
          v26 += 2;
          v27 += 2;
          v28 -= 4;
        }
        while (v28);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_27:
          do
          {
            uint64_t v30 = *(void *)v22;
            v22 += 8;
            *(void *)unint64_t v21 = v30;
            v21 += 8;
          }
          while (v21 != v18);
        }
      }
      *a1 = v17;
      a1[1] = v5;
      a1[2] = v18;
      a1[3] = &v17[v16];
      if (v4)
      {
        operator delete(v4);
        std::basic_regex<char>::value_type v5 = (char *)a1[1];
      }
    }
    else
    {
      uint64_t v8 = (v6 - v7) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v11 = &v7[8 * (v9 >> 1)];
      std::basic_regex<char>::value_type v5 = &v11[-(v7 - v4)];
      if (v7 != v4)
      {
        memmove(&v11[-(v7 - v4)], v4, v7 - v4);
        unint64_t v4 = (char *)a1[2];
      }
      a1[1] = v5;
      a1[2] = &v4[8 * v10];
    }
  }
  else
  {
    std::basic_regex<char>::value_type v5 = (char *)a1[1];
  }
  *((void *)v5 - 1) = *a2;
  a1[1] = (char *)a1[1] - 8;
}

void std::deque<std::__state<char>>::__add_front_capacity(uint64_t a1)
{
  BOOL v3 = *(uint64_t **)(a1 + 8);
  unint64_t v2 = *(uint64_t **)(a1 + 16);
  unint64_t v4 = v2 - v3;
  if (v2 == v3) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 42 * v4 - 1;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if ((unint64_t)(v5 - (*(void *)(a1 + 40) + v6)) >= 0x2A)
  {
    *(void *)(a1 + 32) = v6 + 42;
    unint64_t v47 = (void *)*(v2 - 1);
    *(void *)(a1 + 16) = v2 - 1;
    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v47);
    return;
  }
  uint64_t v7 = *(uint64_t **)(a1 + 24);
  uint64_t v8 = *(uint64_t **)a1;
  uint64_t v9 = (uint64_t)v7 - *(void *)a1;
  if (v4 < v9 >> 3)
  {
    if (v3 == v8)
    {
      unint64_t v47 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back((char **)a1, &v47);
      uint64_t v43 = *(void *)(a1 + 16);
      unint64_t v47 = *(void **)(v43 - 8);
      *(void *)(a1 + 16) = v43 - 8;
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v47);
      if (*(void *)(a1 + 16) - *(void *)(a1 + 8) == 8) {
        goto LABEL_9;
      }
    }
    else
    {
      unint64_t v47 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v47);
      if (*(void *)(a1 + 16) - *(void *)(a1 + 8) == 8)
      {
LABEL_9:
        uint64_t v10 = 21;
LABEL_45:
        *(void *)(a1 + 32) = v10;
        return;
      }
    }
    uint64_t v10 = *(void *)(a1 + 32) + 42;
    goto LABEL_45;
  }
  if (v7 == v8) {
    unint64_t v11 = 1;
  }
  else {
    unint64_t v11 = v9 >> 2;
  }
  if (v11 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  BOOL v12 = (char *)operator new(8 * v11);
  uint64_t v13 = operator new(0xFC0uLL);
  unint64_t v14 = v13;
  if (v11)
  {
    unint64_t v15 = &v12[8 * v11];
    *(void *)BOOL v12 = v13;
    uint64_t v16 = v12 + 8;
    if (v3 != v2)
    {
LABEL_16:
      uint64_t v17 = v12;
      while (1)
      {
        if (v16 == v15)
        {
          if (v17 <= v12)
          {
            if (v16 == v12) {
              unint64_t v26 = 1;
            }
            else {
              unint64_t v26 = (v16 - v12) >> 2;
            }
            if (v26 >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            unint64_t v27 = (char *)operator new(8 * v26);
            uint64_t v28 = v27;
            unint64_t v29 = v26 >> 2;
            uint64_t v18 = &v27[8 * (v26 >> 2)];
            int64_t v31 = v16 - v17;
            BOOL v30 = v16 == v17;
            uint64_t v16 = v18;
            if (!v30)
            {
              uint64_t v16 = &v18[v31 & 0xFFFFFFFFFFFFFFF8];
              unint64_t v32 = v31 - 8;
              if (v32 < 0x38 || (uint64_t v33 = 8 * v29, (unint64_t)(&v27[8 * v29] - v17) < 0x20))
              {
                uint64_t v34 = &v27[8 * (v26 >> 2)];
                unint64_t v35 = v17;
                goto LABEL_35;
              }
              uint64_t v37 = (v32 >> 3) + 1;
              uint64_t v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v34 = &v18[v38];
              unint64_t v35 = &v17[v38];
              int64_t v39 = (long long *)(v17 + 16);
              unint64_t v40 = &v27[v33 + 16];
              uint64_t v41 = v37 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v42 = *v39;
                *((_OWORD *)v40 - 1) = *(v39 - 1);
                *(_OWORD *)unint64_t v40 = v42;
                v39 += 2;
                v40 += 32;
                v41 -= 4;
              }
              while (v41);
              if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
              {
                do
                {
LABEL_35:
                  uint64_t v36 = *(void *)v35;
                  v35 += 8;
                  *(void *)uint64_t v34 = v36;
                  v34 += 8;
                }
                while (v34 != v16);
              }
            }
            unint64_t v15 = &v27[8 * v26];
            if (v12) {
              operator delete(v12);
            }
            BOOL v12 = v28;
            goto LABEL_18;
          }
          uint64_t v20 = (v17 - v12) >> 3;
          if (v20 >= -1) {
            uint64_t v21 = v20 + 1;
          }
          else {
            uint64_t v21 = v20 + 2;
          }
          uint64_t v22 = v21 >> 1;
          uint64_t v23 = &v17[-8 * (v21 >> 1)];
          uint64_t v24 = v16;
          if (v16 != v17)
          {
            memmove(v23, v17, v16 - v17);
            uint64_t v24 = v17;
          }
          uint64_t v25 = -v22;
          unint64_t v15 = v16;
          uint64_t v16 = &v23[v16 - v17];
          uint64_t v18 = &v24[8 * v25];
        }
        else
        {
          uint64_t v18 = v17;
        }
LABEL_18:
        uint64_t v19 = *v3++;
        *(void *)uint64_t v16 = v19;
        v16 += 8;
        uint64_t v17 = v18;
        if (v3 == *(uint64_t **)(a1 + 16)) {
          goto LABEL_48;
        }
      }
    }
  }
  else
  {
    unint64_t v44 = (char *)operator new(8uLL);
    unint64_t v15 = v44 + 8;
    operator delete(v12);
    BOOL v3 = *(uint64_t **)(a1 + 8);
    uint64_t v45 = *(uint64_t **)(a1 + 16);
    BOOL v12 = v44;
    *(void *)unint64_t v44 = v14;
    uint64_t v16 = v44 + 8;
    if (v3 != v45) {
      goto LABEL_16;
    }
  }
  uint64_t v18 = v12;
LABEL_48:
  int64_t v46 = *(void **)a1;
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = v18;
  *(void *)(a1 + 16) = v16;
  *(void *)(a1 + 24) = v15;
  if (v16 - v18 == 8)
  {
    *(void *)(a1 + 32) = 21;
    if (!v46) {
      return;
    }
  }
  else
  {
    *(void *)(a1 + 32) += 42;
    if (!v46) {
      return;
    }
  }

  operator delete(v46);
}

void sub_235DC9A28(_Unwind_Exception *a1)
{
  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(char **a1, char *a2, char *a3, size_t __sz)
{
  uint64_t v6 = a2;
  uint64_t v8 = (uint64_t)a1[2];
  uint64_t result = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 3) >= __sz)
  {
    uint64_t v18 = a1[1];
    uint64_t v17 = a1 + 1;
    unint64_t v14 = v18;
    unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((v18 - result) >> 3);
    if (v19 >= __sz)
    {
      uint64_t v24 = result;
      if (a2 != a3)
      {
        uint64_t v25 = result;
        do
        {
          *(_OWORD *)uint64_t v25 = *(_OWORD *)v6;
          v25[16] = v6[16];
          v24 += 24;
          v6 += 24;
          v25 += 24;
        }
        while (v6 != a3);
      }
      int64_t v16 = v24 - result;
      unint64_t v14 = result;
    }
    else
    {
      uint64_t v20 = &a2[24 * v19];
      if (v14 != result)
      {
        do
        {
          *(_OWORD *)uint64_t result = *(_OWORD *)v6;
          result[16] = v6[16];
          v6 += 24;
          result += 24;
        }
        while (v6 != v20);
      }
      uint64_t v21 = v14;
      if (v20 != a3)
      {
        uint64_t v22 = v14;
        do
        {
          long long v23 = *(_OWORD *)v20;
          *((void *)v22 + 2) = *((void *)v20 + 2);
          *(_OWORD *)uint64_t v22 = v23;
          v22 += 24;
          v20 += 24;
          v21 += 24;
        }
        while (v20 != a3);
      }
      int64_t v16 = v21 - v14;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_26;
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= __sz) {
      uint64_t v11 = __sz;
    }
    unint64_t v12 = v10 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v11;
    if (v12 > 0xAAAAAAAAAAAAAAALL) {
LABEL_26:
    }
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    uint64_t v13 = 24 * v12;
    uint64_t result = (char *)operator new(24 * v12);
    unint64_t v14 = result;
    *a1 = result;
    a1[1] = result;
    a1[2] = &result[v13];
    unint64_t v15 = result;
    if (v6 != a3)
    {
      uint64_t result = (char *)memcpy(result, v6, 24 * ((a3 - v6 - 24) / 0x18uLL) + 24);
      unint64_t v15 = &v14[24 * ((a3 - v6 - 24) / 0x18uLL) + 24];
    }
    int64_t v16 = v15 - v14;
    uint64_t v17 = a1 + 1;
  }
  *uint64_t v17 = &v14[v16];
  return result;
}

double *std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(uint64_t a1, const double *a2, const double *a3, size_t __sz)
{
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t result = *(double **)a1;
  if (__sz > (v8 - (uint64_t)result) >> 4)
  {
    if (result)
    {
      *(void *)(a1 + 8) = result;
      operator delete(result);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (__sz >> 60) {
      goto LABEL_62;
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v37 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    if (!v37) {
      unint64_t v11 = v10;
    }
    if (v11 >> 60) {
LABEL_62:
    }
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    uint64_t v12 = 2 * v11;
    uint64_t result = (double *)operator new(16 * v11);
    uint64_t v13 = result;
    *(void *)a1 = result;
    *(void *)(a1 + 8) = result;
    *(void *)(a1 + 16) = &result[v12];
    unint64_t v14 = result;
    if (a2 != a3)
    {
      uint64_t result = (double *)memcpy(result, a2, ((char *)a3 - (char *)a2) & 0xFFFFFFFFFFFFFFF0);
      unint64_t v14 = (double *)((char *)v13 + (((char *)a3 - (char *)a2) & 0xFFFFFFFFFFFFFFF0));
    }
    int64_t v15 = (char *)v14 - (char *)v13;
    int64_t v16 = (void *)(a1 + 8);
    goto LABEL_29;
  }
  uint64_t v17 = *(double **)(a1 + 8);
  int64_t v16 = (void *)(a1 + 8);
  uint64_t v13 = v17;
  int64_t v18 = (char *)v17 - (char *)result;
  unint64_t v19 = ((char *)v17 - (char *)result) >> 4;
  if (v19 >= __sz)
  {
    if (a2 == a3)
    {
      BOOL v30 = (char *)result;
    }
    else
    {
      unint64_t v29 = (char *)a3 - (char *)a2 - 16;
      if (v29 < 0xF0
        || ((unint64_t v47 = v29 & 0xFFFFFFFFFFFFFFF0 | 8,
             uint64_t v48 = (char *)result + v47,
             unint64_t v49 = (unint64_t)a2 + v47,
             unint64_t v50 = (v29 & 0xFFFFFFFFFFFFFFF0) + 16,
             result + 1 < (const double *)((char *)a2 + v50))
          ? (BOOL v51 = a2 + 1 >= (double *)((char *)result + v50))
          : (BOOL v51 = 1),
            v51 ? (char v52 = 0) : (char v52 = 1),
            v48 > (char *)a2 ? (BOOL v53 = (unint64_t)result >= v49) : (BOOL v53 = 1),
            !v53 || (v52 & 1) != 0))
      {
        BOOL v30 = (char *)result;
        int64_t v31 = a2;
      }
      else
      {
        uint64_t v54 = (v29 >> 4) + 1;
        uint64_t v55 = 2 * (v54 & 0x1FFFFFFFFFFFFFFCLL);
        BOOL v30 = (char *)&result[v55];
        int64_t v31 = &a2[v55];
        uint64_t v56 = a2 + 4;
        unint64_t v57 = result + 4;
        uint64_t v58 = v54 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          uint64_t v59 = v56 - 4;
          float64x2x2_t v62 = vld2q_f64(v59);
          float64x2x2_t v64 = vld2q_f64(v56);
          unint64_t v60 = v57 - 4;
          vst2q_f64(v60, v62);
          vst2q_f64(v57, v64);
          v56 += 8;
          v57 += 8;
          v58 -= 4;
        }
        while (v58);
        if (v54 == (v54 & 0x1FFFFFFFFFFFFFFCLL)) {
          goto LABEL_28;
        }
      }
      do
      {
        uint64_t v32 = *(void *)v31;
        uint64_t v33 = *((void *)v31 + 1);
        v31 += 2;
        *(void *)BOOL v30 = v32;
        *((void *)v30 + 1) = v33;
        v30 += 16;
      }
      while (v31 != a3);
    }
LABEL_28:
    int64_t v15 = v30 - (char *)result;
    uint64_t v13 = result;
    goto LABEL_29;
  }
  uint64_t v20 = &a2[2 * v19];
  if (v13 != result)
  {
    unint64_t v21 = v18 - 16;
    if ((unint64_t)(v18 - 16) < 0xF0
      || ((unint64_t v34 = v18 & 0xFFFFFFFFFFFFFFF0,
           unint64_t v35 = (char *)result + v34 - 8,
           unint64_t v36 = (unint64_t)a2 + v34 - 8,
           result + 1 < (const double *)((char *)a2 + v34))
        ? (BOOL v37 = a2 + 1 >= (double *)((char *)result + v34))
        : (BOOL v37 = 1),
          v37 ? (char v38 = 0) : (char v38 = 1),
          v35 > (char *)a2 ? (BOOL v39 = (unint64_t)result >= v36) : (BOOL v39 = 1),
          !v39 || (v38 & 1) != 0))
    {
      uint64_t v22 = result;
      long long v23 = a2;
    }
    else
    {
      uint64_t v40 = (v21 >> 4) + 1;
      uint64_t v41 = 2 * (v40 & 0x1FFFFFFFFFFFFFFCLL);
      uint64_t v22 = &result[v41];
      long long v23 = &a2[v41];
      long long v42 = a2 + 4;
      uint64_t v43 = result + 4;
      uint64_t v44 = v40 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        uint64_t v45 = v42 - 4;
        float64x2x2_t v61 = vld2q_f64(v45);
        float64x2x2_t v63 = vld2q_f64(v42);
        int64_t v46 = v43 - 4;
        vst2q_f64(v46, v61);
        vst2q_f64(v43, v63);
        v42 += 8;
        v43 += 8;
        v44 -= 4;
      }
      while (v44);
      if (v40 == (v40 & 0x1FFFFFFFFFFFFFFCLL)) {
        goto LABEL_18;
      }
    }
    do
    {
      uint64_t v24 = *(void *)v23;
      uint64_t v25 = *((void *)v23 + 1);
      v23 += 2;
      *(void *)uint64_t v22 = v24;
      *((void *)v22 + 1) = v25;
      v22 += 2;
    }
    while (v23 != v20);
  }
LABEL_18:
  unint64_t v26 = v13;
  if (v20 != a3)
  {
    unint64_t v27 = v13;
    do
    {
      long long v28 = *(_OWORD *)v20;
      v20 += 2;
      *(_OWORD *)unint64_t v27 = v28;
      v27 += 2;
      v26 += 2;
    }
    while (v20 != a3);
  }
  int64_t v15 = (char *)v26 - (char *)v13;
LABEL_29:
  *int64_t v16 = (char *)v13 + v15;
  return result;
}

void std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append(std::vector<std::ssub_match> *this, std::vector<std::ssub_match>::size_type __n)
{
  std::vector<std::ssub_match>::pointer end = this->__end_;
  value = this->__end_cap_.__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= __n)
  {
    if (__n)
    {
      unint64_t v11 = &end[__n];
      std::vector<std::ssub_match>::size_type v12 = 24 * __n;
      do
      {
        end->first.__i_ = 0;
        end->second.__i_ = 0;
        end->matched = 0;
        ++end;
        v12 -= 24;
      }
      while (v12);
      std::vector<std::ssub_match>::pointer end = v11;
    }
    this->__end_ = end;
  }
  else
  {
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
    unint64_t v7 = v6 + __n;
    if (v6 + __n > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      if (v9 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v10 = (char *)operator new(24 * v9);
    }
    else
    {
      uint64_t v10 = 0;
    }
    uint64_t v13 = (std::sub_match<std::__wrap_iter<const char *>> *)&v10[24 * v6];
    std::vector<std::ssub_match>::size_type v14 = 24 * __n;
    int64_t v15 = &v13[__n];
    int64_t v16 = v13;
    do
    {
      v16->first.__i_ = 0;
      v16->second.__i_ = 0;
      v16->matched = 0;
      ++v16;
      v14 -= 24;
    }
    while (v14);
    std::vector<std::ssub_match>::pointer begin = this->__begin_;
    if (end != this->__begin_)
    {
      do
      {
        std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v18 = end[-1].std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
        *(void *)&v13[-1].matched = *(void *)&end[-1].matched;
        v13[-1].std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v18;
        --v13;
        --end;
      }
      while (end != begin);
      std::vector<std::ssub_match>::pointer end = this->__begin_;
    }
    this->__begin_ = v13;
    this->__end_ = v15;
    this->__end_cap_.__value_ = (std::sub_match<std::__wrap_iter<const char *>> *)&v10[24 * v9];
    if (end)
    {
      operator delete(end);
    }
  }
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v6 = (const std::locale *)MEMORY[0x237DF70D0]();
  *(void *)(a1 + 8) = std::locale::use_facet(v6, MEMORY[0x263F8C108]);
  *(void *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x263F8C130]);
  *(_DWORD *)(a1 + 24) = a3;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
  if ((v7 & 0x80u) == 0) {
    unint64_t v8 = (char *)a2;
  }
  else {
    unint64_t v8 = *(char **)a2;
  }
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a2 + 8);
  }
  if (&v8[v7] != std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(a1, v8, &v8[v7]))std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>(); {
  return a1;
  }
}

void sub_235DCA188(_Unwind_Exception *a1)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v2);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void sub_235DCA1A4(_Unwind_Exception *a1)
{
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  unint64_t v6 = operator new(8uLL);
  void *v6 = &unk_26E93A970;
  uint64_t v7 = operator new(0x10uLL);
  v7[1] = v6;
  unint64_t v8 = operator new(0x20uLL);
  *unint64_t v8 = &unk_26E93A9C8;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = v7;
  unint64_t v9 = *(std::__shared_weak_count **)(a1 + 48);
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    *(void *)(a1 + 56) = *(void *)(a1 + 40);
    unsigned int v10 = *(_DWORD *)(a1 + 24) & 0x1F0;
    if (v10 <= 0x3F)
    {
LABEL_4:
      if (v10)
      {
        if (v10 != 16)
        {
          if (v10 != 32) {
LABEL_27:
          }
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>();
          goto LABEL_15;
        }
        return std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, a2, a3);
      }
      else
      {
        return std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, a3);
      }
    }
  }
  else
  {
    *(void *)(a1 + 56) = *(void *)(a1 + 40);
    unsigned int v10 = *(_DWORD *)(a1 + 24) & 0x1F0;
    if (v10 <= 0x3F) {
      goto LABEL_4;
    }
  }
  switch(v10)
  {
    case 0x40u:
LABEL_15:
      return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
    case 0x80u:
      return std::basic_regex<char,std::regex_traits<char>>::__parse_grep<std::__wrap_iter<char const*>>(a1, a2, a3);
    case 0x100u:
      return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
    default:
      goto LABEL_27;
  }
}

void sub_235DCA3F8(_Unwind_Exception *a1)
{
  std::__empty_state<char>::~__empty_state(v2);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  std::vector<std::ssub_match>::pointer end = a1->__end_;
  uint64_t v7 = a2;
  while (1)
  {
    unint64_t v8 = (std::basic_regex<char> *)v7;
    uint64_t v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>((uint64_t)a1, v7, a3);
    if (v8 == (std::basic_regex<char> *)v7) {
      break;
    }
LABEL_2:
    if (v7 == (char *)v8) {
      goto LABEL_6;
    }
  }
  unint64_t v9 = a1->__end_;
  unsigned int marked_count = a1->__marked_count_;
  unint64_t v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(a1, v8, (std::basic_regex<char> *)a3);
  if (v8 != v11)
  {
    uint64_t v7 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)a1, v11, (std::basic_regex<char> *)a3, v9, marked_count + 1, a1->__marked_count_ + 1);
    goto LABEL_2;
  }
LABEL_6:
  if (v8 == (std::basic_regex<char> *)a2)
  {
    std::vector<std::ssub_match>::size_type v12 = (std::__node<char> *)operator new(0x10uLL);
    uint64_t v13 = a1->__end_;
    first = v13->__first_;
    v12[1].__vftable = (std::__node<char>_vtbl *)first;
    v13->__first_ = v12;
    int64_t v15 = (std::__owns_one_state<char> *)a1->__end_->__first_;
    goto LABEL_8;
  }
LABEL_9:
  if (v8 == (std::basic_regex<char> *)a3) {
    return a3;
  }
  if (LOBYTE(v8->__traits_.__loc_.__locale_) == 124)
  {
    int64_t v16 = a1->__end_;
    uint64_t v17 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v18 = (char *)&v8->__traits_.__loc_.__locale_ + 1;
    while (1)
    {
      unint64_t v8 = (std::basic_regex<char> *)v18;
      std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v18 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>((uint64_t)a1, v18, a3);
      if (v8 == (std::basic_regex<char> *)v18)
      {
        unint64_t v19 = a1->__end_;
        unsigned int v20 = a1->__marked_count_;
        unint64_t v21 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(a1, v8, (std::basic_regex<char> *)a3);
        if (v8 == v21)
        {
LABEL_16:
          if (v8 == v17)
          {
            uint64_t v22 = (std::__node<char> *)operator new(0x10uLL);
            long long v23 = a1->__end_;
            uint64_t v24 = v23->__first_;
            v22[1].__vftable = (std::__node<char>_vtbl *)v24;
            v23->__first_ = v22;
            a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
          }
          uint64_t v25 = (std::__node<char> *)operator new(0x18uLL);
          unint64_t v26 = v16->__first_;
          v25[1].__vftable = (std::__node<char>_vtbl *)end->__first_;
          v25[2].__vftable = (std::__node<char>_vtbl *)v26;
          v25->__vftable = (std::__node<char>_vtbl *)&unk_26E93AF88;
          end->__first_ = v25;
          v16->__first_ = 0;
          unint64_t v27 = (std::__node<char> *)operator new(0x10uLL);
          long long v28 = a1->__end_->__first_;
          v27[1].__vftable = (std::__node<char>_vtbl *)v28;
          v16->__first_ = v27;
          a1->__end_->__first_ = 0;
          unint64_t v29 = (std::__node<char> *)operator new(0x10uLL);
          BOOL v30 = v16->__first_;
          v29->__vftable = (std::__node<char>_vtbl *)&unk_26E93AFD0;
          v29[1].__vftable = (std::__node<char>_vtbl *)v30;
          a1->__end_->__first_ = v29;
          int64_t v15 = (std::__owns_one_state<char> *)v16->__first_;
LABEL_8:
          a1->__end_ = v15;
          goto LABEL_9;
        }
        std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v18 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)a1, v21, (std::basic_regex<char> *)a3, v19, v20 + 1, a1->__marked_count_ + 1);
      }
      if (v18 == (char *)v8) {
        goto LABEL_16;
      }
    }
  }
  return (char *)v8;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  BOOL v3 = (std::basic_regex<char> *)a2;
  if (a2 == a3) {
    return a2;
  }
  if (*a2 == 94)
  {
    unint64_t v6 = operator new(0x18uLL);
    BOOL v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    uint64_t v8 = *(void *)(a1 + 56);
    uint64_t v9 = *(void *)(v8 + 8);
    void *v6 = &unk_26E93AAC0;
    v6[1] = v9;
    *((unsigned char *)v6 + 16) = v7;
    *(void *)(v8 + 8) = v6;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    BOOL v3 = (std::basic_regex<char> *)((char *)v3 + 1);
  }
  if (v3 != (std::basic_regex<char> *)a3)
  {
    while (v3 != (std::basic_regex<char> *)a3)
    {
      unsigned int v10 = v3;
      unint64_t v11 = *(std::__owns_one_state<char> **)(a1 + 56);
      int v12 = *(_DWORD *)(a1 + 28);
      uint64_t v13 = std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(a1, (uint64_t)v10, a3);
      if (v10 != v13)
      {
        BOOL v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v13, (std::basic_regex<char> *)a3, v11, (v12 + 1), (*(_DWORD *)(a1 + 28) + 1));
        if (v10 != (unsigned char *)v3) {
          continue;
        }
      }
      if (v10 + 1 != a3 || *v10 != 36) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      }
      std::vector<std::ssub_match>::size_type v14 = operator new(0x18uLL);
      BOOL v15 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      uint64_t v16 = *(void *)(a1 + 56);
      uint64_t v17 = *(void *)(v16 + 8);
      void *v14 = &unk_26E93AB08;
      v14[1] = v17;
      *((unsigned char *)v14 + 16) = v15;
      *(void *)(v16 + 8) = v14;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
      return a3;
    }
  }
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  uint64_t v6 = *(void *)(a1 + 56);
  BOOL v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v7 == a2) {
    goto LABEL_12;
  }
  do
  {
    uint64_t v8 = v7;
    BOOL v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, v7, a3);
  }
  while (v8 != v7);
  if (v8 == a2) {
LABEL_12:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  if (v8 == a3) {
    return a3;
  }
  while (LOBYTE(v8->__traits_.__loc_.__locale_) == 124)
  {
    uint64_t v9 = *(void *)(a1 + 56);
    unsigned int v10 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    unint64_t v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1), a3);
    if ((std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1) == v11) {
      goto LABEL_12;
    }
    do
    {
      uint64_t v8 = v11;
      unint64_t v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, v11, a3);
    }
    while (v8 != v11);
    if (v8 == v10) {
      goto LABEL_12;
    }
    int v12 = operator new(0x18uLL);
    uint64_t v13 = *(void *)(v9 + 8);
    v12[1] = *(void *)(v6 + 8);
    v12[2] = v13;
    *int v12 = &unk_26E93AF88;
    *(void *)(v6 + 8) = v12;
    *(void *)(v9 + 8) = 0;
    std::vector<std::ssub_match>::size_type v14 = operator new(0x10uLL);
    uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 8);
    v14[1] = v15;
    *(void *)(v9 + 8) = v14;
    *(void *)(*(void *)(a1 + 56) + 8) = 0;
    uint64_t v16 = operator new(0x10uLL);
    uint64_t v17 = *(void *)(v9 + 8);
    *uint64_t v16 = &unk_26E93AFD0;
    v16[1] = v17;
    *(void *)(*(void *)(a1 + 56) + 8) = v16;
    *(void *)(a1 + 56) = *(void *)(v9 + 8);
    if (v8 == a3) {
      return a3;
    }
  }
  return v8;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_grep<std::__wrap_iter<char const*>>(uint64_t a1, char *__s, char *a3)
{
  uint64_t v6 = *(void *)(a1 + 56);
  BOOL v7 = (char *)memchr(__s, 10, a3 - __s);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = a3;
  }
  if (v8 == __s)
  {
    uint64_t v9 = operator new(0x10uLL);
    uint64_t v10 = *(void *)(v6 + 8);
    v9[1] = v10;
    *(void *)(v6 + 8) = v9;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    if (v8 == a3) {
      unint64_t v11 = v8;
    }
    else {
      unint64_t v11 = v8 + 1;
    }
    if (v11 == a3) {
      return a3;
    }
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, __s, v8);
    if (v8 == a3) {
      unint64_t v11 = v8;
    }
    else {
      unint64_t v11 = v8 + 1;
    }
    if (v11 == a3) {
      return a3;
    }
  }
  uint64_t v12 = *(void *)(a1 + 56);
  do
  {
    unint64_t v21 = (char *)memchr(v11, 10, a3 - v11);
    if (v21) {
      uint64_t v22 = v21;
    }
    else {
      uint64_t v22 = a3;
    }
    if (v22 == v11)
    {
      uint64_t v13 = operator new(0x10uLL);
      uint64_t v14 = *(void *)(v12 + 8);
      v13[1] = v14;
      *(void *)(v12 + 8) = v13;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, v11, v22);
    }
    uint64_t v15 = operator new(0x18uLL);
    uint64_t v16 = *(void *)(v12 + 8);
    v15[1] = *(void *)(v6 + 8);
    v15[2] = v16;
    *uint64_t v15 = &unk_26E93AF88;
    *(void *)(v6 + 8) = v15;
    *(void *)(v12 + 8) = 0;
    uint64_t v17 = operator new(0x10uLL);
    uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8);
    v17[1] = v18;
    *(void *)(v12 + 8) = v17;
    *(void *)(*(void *)(a1 + 56) + 8) = 0;
    unint64_t v19 = operator new(0x10uLL);
    uint64_t v20 = *(void *)(v12 + 8);
    void *v19 = &unk_26E93AFD0;
    v19[1] = v20;
    *(void *)(*(void *)(a1 + 56) + 8) = v19;
    uint64_t v12 = *(void *)(v12 + 8);
    *(void *)(a1 + 56) = v12;
    if (v22 == a3) {
      unint64_t v11 = v22;
    }
    else {
      unint64_t v11 = v22 + 1;
    }
  }
  while (v11 != a3);
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *__s, std::basic_regex<char> *a3)
{
  uint64_t v6 = *(void *)(a1 + 56);
  BOOL v7 = (std::basic_regex<char> *)memchr(__s, 10, (char *)a3 - (char *)__s);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = a3;
  }
  if (v8 == __s)
  {
    uint64_t v9 = operator new(0x10uLL);
    uint64_t v10 = *(void *)(v6 + 8);
    v9[1] = v10;
    *(void *)(v6 + 8) = v9;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    if (v8 == a3) {
      unint64_t v11 = v8;
    }
    else {
      unint64_t v11 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    }
    if (v11 == a3) {
      return a3;
    }
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, __s, v8);
    if (v8 == a3) {
      unint64_t v11 = v8;
    }
    else {
      unint64_t v11 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    }
    if (v11 == a3) {
      return a3;
    }
  }
  uint64_t v12 = *(void *)(a1 + 56);
  do
  {
    unint64_t v21 = (std::basic_regex<char> *)memchr(v11, 10, (char *)a3 - (char *)v11);
    if (v21) {
      uint64_t v22 = v21;
    }
    else {
      uint64_t v22 = a3;
    }
    if (v22 == v11)
    {
      uint64_t v13 = operator new(0x10uLL);
      uint64_t v14 = *(void *)(v12 + 8);
      v13[1] = v14;
      *(void *)(v12 + 8) = v13;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, v11, v22);
    }
    uint64_t v15 = operator new(0x18uLL);
    uint64_t v16 = *(void *)(v12 + 8);
    v15[1] = *(void *)(v6 + 8);
    v15[2] = v16;
    *uint64_t v15 = &unk_26E93AF88;
    *(void *)(v6 + 8) = v15;
    *(void *)(v12 + 8) = 0;
    uint64_t v17 = operator new(0x10uLL);
    uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8);
    v17[1] = v18;
    *(void *)(v12 + 8) = v17;
    *(void *)(*(void *)(a1 + 56) + 8) = 0;
    unint64_t v19 = operator new(0x10uLL);
    uint64_t v20 = *(void *)(v12 + 8);
    void *v19 = &unk_26E93AFD0;
    v19[1] = v20;
    *(void *)(*(void *)(a1 + 56) + 8) = v19;
    uint64_t v12 = *(void *)(v12 + 8);
    *(void *)(a1 + 56) = v12;
    if (v22 == a3) {
      unint64_t v11 = v22;
    }
    else {
      unint64_t v11 = (std::basic_regex<char> *)((char *)&v22->__traits_.__loc_.__locale_ + 1);
    }
  }
  while (v11 != a3);
  return a3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  BOOL v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  int v6 = *a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 != a3)
      {
        int v16 = a2[1];
        if (v16 == 66)
        {
          uint64_t v17 = (char *)operator new(0x30uLL);
          uint64_t v19 = *(void *)(*(void *)(a1 + 56) + 8);
          *(void *)uint64_t v17 = &unk_26E93AB50;
          *((void *)v17 + 1) = v19;
          std::locale::locale((std::locale *)v17 + 2, (const std::locale *)a1);
          *(_OWORD *)(v17 + 24) = *(_OWORD *)(a1 + 8);
          v17[40] = 1;
        }
        else
        {
          if (v16 != 98) {
            return v3;
          }
          uint64_t v17 = (char *)operator new(0x30uLL);
          uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8);
          *(void *)uint64_t v17 = &unk_26E93AB50;
          *((void *)v17 + 1) = v18;
          std::locale::locale((std::locale *)v17 + 2, (const std::locale *)a1);
          *(_OWORD *)(v17 + 24) = *(_OWORD *)(a1 + 8);
          v17[40] = 0;
        }
        *(void *)(*(void *)(a1 + 56) + 8) = v17;
        *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
        return v3 + 2;
      }
      return v3;
    }
    if (v6 != 94) {
      return v3;
    }
    unint64_t v11 = operator new(0x18uLL);
    BOOL v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    uint64_t v13 = *(void *)(a1 + 56);
    v11[1] = *(void *)(v13 + 8);
    uint64_t v14 = &unk_26E93AAC0;
LABEL_17:
    *unint64_t v11 = v14;
    *((unsigned char *)v11 + 16) = v12;
    *(void *)(v13 + 8) = v11;
    *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    return ++v3;
  }
  if (v6 == 36)
  {
    unint64_t v11 = operator new(0x18uLL);
    BOOL v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    uint64_t v13 = *(void *)(a1 + 56);
    v11[1] = *(void *)(v13 + 8);
    uint64_t v14 = &unk_26E93AB08;
    goto LABEL_17;
  }
  if (v6 != 40 || a2 + 1 == a3 || a2[1] != 63 || a2 + 2 == a3) {
    return v3;
  }
  int v7 = a2[2];
  if (v7 == 33)
  {
    *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v22.__loop_count_ = v20;
    *(_OWORD *)&v22.__start_.__cntrl_ = v20;
    *(_OWORD *)&v22.__traits_.__loc_.__locale_ = v20;
    *(_OWORD *)&v22.__traits_.__col_ = v20;
    std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v22);
    v22.__flags_ = *(_DWORD *)(a1 + 24);
    uint64_t v9 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v22, v3 + 3, a3);
    unsigned int marked_count = v22.__marked_count_;
    std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v22, 1, *(_DWORD *)(a1 + 28));
    *(_DWORD *)(a1 + 28) += marked_count;
    if (v9 == a3 || *v9 != 41) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    goto LABEL_27;
  }
  if (v7 != 61) {
    return v3;
  }
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v22.__loop_count_ = v8;
  *(_OWORD *)&v22.__start_.__cntrl_ = v8;
  *(_OWORD *)&v22.__traits_.__loc_.__locale_ = v8;
  *(_OWORD *)&v22.__traits_.__col_ = v8;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v22);
  v22.__flags_ = *(_DWORD *)(a1 + 24);
  uint64_t v9 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v22, v3 + 3, a3);
  unsigned int v10 = v22.__marked_count_;
  std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v22, 0, *(_DWORD *)(a1 + 28));
  *(_DWORD *)(a1 + 28) += v10;
  if (v9 == a3 || *v9 != 41) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
  }
LABEL_27:
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&v22.__traits_.__loc_);
  return v9 + 1;
}

void sub_235DCB0E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_235DCB0FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_235DCB110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_235DCB124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  BOOL v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  switch(LOBYTE(a2->__traits_.__loc_.__locale_))
  {
    case '(':
      if ((std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1) == a3) {
        goto LABEL_26;
      }
      if ((std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 2) != a3
        && BYTE1(a2->__traits_.__loc_.__locale_) == 63
        && BYTE2(a2->__traits_.__loc_.__locale_) == 58)
      {
        ++this->__open_count_;
        int v6 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(this, (char *)&a2->__traits_.__loc_.__locale_ + 3, a3);
        if (v6 != a3 && LOBYTE(v6->__traits_.__loc_.__locale_) == 41)
        {
          --this->__open_count_;
          return (std::basic_regex<char> *)((char *)&v6->__traits_.__loc_.__locale_ + 1);
        }
LABEL_26:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      }
      if ((this->__flags_ & 2) != 0)
      {
        unsigned int marked_count = this->__marked_count_;
      }
      else
      {
        unint64_t v11 = (std::__node<char> *)operator new(0x18uLL);
        unsigned int marked_count = this->__marked_count_ + 1;
        this->__marked_count_ = marked_count;
        std::vector<std::ssub_match>::pointer end = this->__end_;
        first = end->__first_;
        v11->__vftable = (std::__node<char>_vtbl *)&unk_26E93AE20;
        v11[1].__vftable = (std::__node<char>_vtbl *)first;
        LODWORD(v11[2].__vftable) = marked_count;
        end->__first_ = v11;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      }
      ++this->__open_count_;
      uint64_t v15 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(this, (char *)&v3->__traits_.__loc_.__locale_ + 1, a3);
      if (v15 == a3) {
        goto LABEL_26;
      }
      int v16 = v15;
      if (LOBYTE(v15->__traits_.__loc_.__locale_) != 41) {
        goto LABEL_26;
      }
      if ((this->__flags_ & 2) == 0)
      {
        uint64_t v17 = (std::__node<char> *)operator new(0x18uLL);
        uint64_t v18 = this->__end_;
        uint64_t v19 = v18->__first_;
        v17->__vftable = (std::__node<char>_vtbl *)&unk_26E93AE68;
        v17[1].__vftable = (std::__node<char>_vtbl *)v19;
        LODWORD(v17[2].__vftable) = marked_count;
        v18->__first_ = v17;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      }
      --this->__open_count_;
      uint64_t result = (std::basic_regex<char> *)((char *)&v16->__traits_.__loc_.__locale_ + 1);
      break;
    case ')':
    case ',':
    case '-':
    case '/':
    case '0':
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
    case ':':
    case ';':
    case '<':
    case '=':
    case '>':
    case '@':
    case 'A':
    case 'B':
    case 'C':
    case 'D':
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'S':
    case 'T':
    case 'U':
    case 'V':
    case 'W':
    case 'X':
    case 'Y':
    case 'Z':
      return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(this, a2, a3);
    case '*':
    case '+':
    case '?':
      goto LABEL_25;
    case '.':
      long long v8 = (std::__node<char> *)operator new(0x10uLL);
      uint64_t v9 = this->__end_;
      unsigned int v10 = v9->__first_;
      v8->__vftable = (std::__node<char>_vtbl *)&unk_26E93ABE0;
      v8[1].__vftable = (std::__node<char>_vtbl *)v10;
      v9->__first_ = v8;
      this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      return (std::basic_regex<char> *)((char *)v3 + 1);
    case '[':
      return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, (char *)a2, (char *)a3);
    case '\\':
      return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<std::__wrap_iter<char const*>>(this, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
    default:
      if (LOBYTE(a2->__traits_.__loc_.__locale_) == 123) {
LABEL_25:
      }
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
      return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(this, a2, a3);
  }
  return result;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  if (this == a3) {
    return this;
  }
  int v6 = *(_DWORD *)(a1 + 24) & 0x1F0;
  int locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low <= 62)
  {
    if (locale_low == 42)
    {
      uint64_t v9 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      if (v6) {
        BOOL v21 = 1;
      }
      else {
        BOOL v21 = v9 == a3;
      }
      if (!v21 && LOBYTE(v9->__traits_.__loc_.__locale_) == 63)
      {
        unsigned int v10 = (char *)&this->__traits_.__loc_.__locale_ + 2;
        __mexp_std::vector<std::ssub_match>::pointer begin = __mexp_begin;
        __mexp_std::vector<std::ssub_match>::pointer end = __mexp_end;
        size_t v11 = 0;
        goto LABEL_36;
      }
      __mexp_std::vector<std::ssub_match>::pointer begin = __mexp_begin;
      __mexp_std::vector<std::ssub_match>::pointer end = __mexp_end;
      size_t v25 = 0;
      goto LABEL_45;
    }
    long long v8 = this;
    if (locale_low == 43)
    {
      uint64_t v9 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      if (!v6 && v9 != a3 && LOBYTE(v9->__traits_.__loc_.__locale_) == 63)
      {
        unsigned int v10 = (char *)&this->__traits_.__loc_.__locale_ + 2;
        __mexp_std::vector<std::ssub_match>::pointer begin = __mexp_begin;
        __mexp_std::vector<std::ssub_match>::pointer end = __mexp_end;
        size_t v11 = 1;
LABEL_36:
        std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v11, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 0);
        return (std::basic_regex<char> *)v10;
      }
      __mexp_std::vector<std::ssub_match>::pointer begin = __mexp_begin;
      __mexp_std::vector<std::ssub_match>::pointer end = __mexp_end;
      size_t v25 = 1;
      goto LABEL_45;
    }
    return v8;
  }
  if (locale_low == 63)
  {
    std::basic_regex<char> v22 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
    if (v6) {
      BOOL v23 = 1;
    }
    else {
      BOOL v23 = v22 == a3;
    }
    if (v23 || LOBYTE(v22->__traits_.__loc_.__locale_) != 63)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, 0, 1uLL, a4, __mexp_begin, __mexp_end, 1);
      return v22;
    }
    else
    {
      uint64_t v24 = (char *)&this->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, 0, 1uLL, a4, __mexp_begin, __mexp_end, 0);
      return (std::basic_regex<char> *)v24;
    }
  }
  else
  {
    long long v8 = this;
    if (locale_low != 123) {
      return v8;
    }
    uint64_t v13 = (char *)&this->__traits_.__loc_.__locale_ + 1;
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3) {
      goto LABEL_72;
    }
    int v14 = *v13;
    if ((v14 & 0xF8) != 0x30 && (v14 & 0xFE) != 0x38) {
      goto LABEL_72;
    }
    int v15 = v14 - 48;
    int v16 = (char *)&this->__traits_.__loc_.__locale_ + 2;
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) == a3)
    {
LABEL_21:
      int v16 = (char *)a3;
    }
    else
    {
      while (1)
      {
        int v17 = *v16;
        if ((v17 & 0xF8) != 0x30 && (v17 & 0xFE) != 0x38) {
          break;
        }
        if (v15 >= 214748364) {
          goto LABEL_72;
        }
        int v15 = v17 + 10 * v15 - 48;
        if (++v16 == (char *)a3) {
          goto LABEL_21;
        }
      }
    }
    if (v16 == v13) {
      goto LABEL_72;
    }
    if (v16 == (char *)a3) {
      goto LABEL_73;
    }
    int v18 = *v16;
    if (v18 != 44)
    {
      if (v18 == 125)
      {
        uint64_t v19 = (std::basic_regex<char> *)(v16 + 1);
        if (v6 || v19 == a3 || LOBYTE(v19->__traits_.__loc_.__locale_) != 63)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v15, v15, a4, __mexp_begin, __mexp_end, 1);
          return v19;
        }
        else
        {
          long long v20 = (unsigned __int8 *)(v16 + 2);
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v15, v15, a4, __mexp_begin, __mexp_end, 0);
          return (std::basic_regex<char> *)v20;
        }
      }
LABEL_72:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
    }
    unint64_t v26 = (std::basic_regex<char> *)(v16 + 1);
    if (v16 + 1 == (char *)a3) {
      goto LABEL_72;
    }
    int v27 = LOBYTE(v26->__traits_.__loc_.__locale_);
    if (v27 == 125)
    {
      uint64_t v9 = (std::basic_regex<char> *)(v16 + 2);
      if (!v6 && v9 != a3 && LOBYTE(v9->__traits_.__loc_.__locale_) == 63)
      {
        size_t v11 = v15;
        unsigned int v10 = v16 + 3;
        __mexp_std::vector<std::ssub_match>::pointer begin = __mexp_begin;
        __mexp_std::vector<std::ssub_match>::pointer end = __mexp_end;
        goto LABEL_36;
      }
      size_t v25 = v15;
      __mexp_std::vector<std::ssub_match>::pointer begin = __mexp_begin;
      __mexp_std::vector<std::ssub_match>::pointer end = __mexp_end;
LABEL_45:
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v25, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
      return v9;
    }
    if ((v27 & 0xF8) != 0x30 && (v27 & 0xFE) != 0x38) {
      goto LABEL_73;
    }
    int v28 = v27 - 48;
    unint64_t v29 = (std::basic_regex<char> *)(v16 + 2);
    if (v29 == a3)
    {
LABEL_61:
      unint64_t v29 = a3;
    }
    else
    {
      while (1)
      {
        int v30 = LOBYTE(v29->__traits_.__loc_.__locale_);
        if ((v30 & 0xF8) != 0x30 && (v30 & 0xFE) != 0x38) {
          break;
        }
        if (v28 >= 214748364) {
          goto LABEL_72;
        }
        int v28 = v30 + 10 * v28 - 48;
        unint64_t v29 = (std::basic_regex<char> *)((char *)v29 + 1);
        if (v29 == a3) {
          goto LABEL_61;
        }
      }
    }
    if (v29 == v26 || v29 == a3 || LOBYTE(v29->__traits_.__loc_.__locale_) != 125) {
LABEL_73:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    if (v28 < v15) {
      goto LABEL_72;
    }
    int64_t v31 = (std::basic_regex<char> *)((char *)&v29->__traits_.__loc_.__locale_ + 1);
    if (v6 || v31 == a3 || LOBYTE(v31->__traits_.__loc_.__locale_) != 63)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v15, v28, a4, __mexp_begin, __mexp_end, 1);
      return v31;
    }
    else
    {
      uint64_t v32 = (char *)&v29->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v15, v28, a4, __mexp_begin, __mexp_end, 0);
      return (std::basic_regex<char> *)v32;
    }
  }
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 == a3) {
    return a2;
  }
  unint64_t v4 = a2;
  if (*a2 == 92)
  {
    int v6 = a2 + 1;
    if (a2 + 1 == a3) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    }
    int v8 = *v6;
    unsigned int v9 = v8 - 48;
    if (v8 == 48)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v9);
      return a2 + 2;
    }
    if ((v8 - 49) <= 8)
    {
      unint64_t v4 = a2 + 2;
      if (a2 + 2 == a3)
      {
        unint64_t v4 = a3;
      }
      else
      {
        while (1)
        {
          int v11 = *v4;
          if ((v11 - 48) > 9) {
            break;
          }
          if (v9 >= 0x19999999) {
            goto LABEL_24;
          }
          ++v4;
          unsigned int v9 = v11 + 10 * v9 - 48;
          if (v4 == a3)
          {
            unint64_t v4 = a3;
            break;
          }
        }
        if (!v9) {
LABEL_24:
        }
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
      }
      if (v9 > this->__marked_count_) {
        goto LABEL_24;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, v9);
      if (v4 != v6) {
        return v4;
      }
    }
    unint64_t v4 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<std::__wrap_iter<char const*>>((uint64_t)this, a2 + 1, a3);
    if (v6 == v4)
    {
      BOOL v12 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(this, a2 + 1, a3, 0);
      if (v6 == v12) {
        return a2;
      }
      else {
        return v12;
      }
    }
  }
  return v4;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3) {
      goto LABEL_20;
    }
    int v5 = a2[1];
    char v6 = v5 == 94;
    int v7 = v5 == 94 ? a2 + 2 : a2 + 1;
    int v8 = operator new(0xB0uLL);
    std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v8, a1, *(void *)(*(void *)(a1 + 56) + 8), v6, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
    *(void *)(*(void *)(a1 + 56) + 8) = v8;
    *(void *)(a1 + 56) = v8;
    if (v7 == a3) {
      goto LABEL_20;
    }
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v7 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, 93);
      ++v7;
    }
    if (v7 == a3) {
      goto LABEL_20;
    }
    do
    {
      unsigned int v9 = v7;
      int v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<std::__wrap_iter<char const*>>(a1, v7, a3, (uint64_t)v8);
    }
    while (v9 != v7);
    if (v9 == a3) {
      goto LABEL_20;
    }
    if (*v9 == 45)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, 45);
      ++v9;
    }
    if (v9 == a3 || *v9 != 93) {
LABEL_20:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
    return v9 + 1;
  }
  return a2;
}

void sub_235DCBB4C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  if (this == a3) {
    return this;
  }
  switch(LOBYTE(this->__traits_.__loc_.__locale_))
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '{':
    case '|':
    case '}':
      return this;
    default:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
      uint64_t result = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      break;
  }
  return result;
}

unsigned char *std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<std::__wrap_iter<char const*>>(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  BOOL v3 = a2;
  if (a2 != a3)
  {
    switch(*a2)
    {
      case 'D':
        int v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(void *)(*(void *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_7;
      case 'S':
        int v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(void *)(*(void *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_11;
      case 'W':
        char v6 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v6, a1, *(void *)(*(void *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_9;
      case 'd':
        int v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(void *)(*(void *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_7:
        *(void *)(*(void *)(a1 + 56) + 8) = v5;
        *(void *)(a1 + 56) = v5;
        int v7 = v5[40] | 0x400;
        goto LABEL_12;
      case 's':
        int v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(void *)(*(void *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_11:
        *(void *)(*(void *)(a1 + 56) + 8) = v5;
        *(void *)(a1 + 56) = v5;
        int v7 = v5[40] | 0x4000;
LABEL_12:
        v5[40] = v7;
        goto LABEL_13;
      case 'w':
        char v6 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v6, a1, *(void *)(*(void *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_9:
        *(void *)(*(void *)(a1 + 56) + 8) = v6;
        *(void *)(a1 + 56) = v6;
        v6[40] |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v6, 95);
LABEL_13:
        ++v3;
        break;
      default:
        return v3;
    }
  }
  return v3;
}

void sub_235DCBF20(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_235DCBF34(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_235DCBF48(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_235DCBF5C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_235DCBF70(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_235DCBF84(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t *a4)
{
  unint64_t v4 = a2;
  if (a2 == a3) {
    return v4;
  }
  uint64_t v5 = *a2;
  std::basic_regex<char>::value_type v6 = v5;
  switch((char)v5)
  {
    case '0':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 0;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 0);
        return v4 + 1;
      }
    case 'c':
      if (v4 + 1 == a3 || (char)v4[1] < 65) {
        goto LABEL_85;
      }
      unsigned int v8 = v4[1];
      if (v8 >= 0x5B && (v8 - 97) > 0x19u) {
        goto LABEL_85;
      }
      std::basic_regex<char>::value_type v10 = v8 & 0x1F;
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(unsigned char *)a4 = v10;
        *((unsigned char *)a4 + 1) = 0;
        return v4 + 2;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v10);
        return v4 + 2;
      }
    case 'f':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
        return v4 + 1;
      }
    case 'n':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
        return v4 + 1;
      }
    case 'r':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
        return v4 + 1;
      }
    case 't':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
        return v4 + 1;
      }
    case 'u':
      if (v4 + 1 != a3)
      {
        int v11 = v4[1];
        if ((v11 & 0xF8) == 0x30 || (v11 & 0xFE) == 0x38 || (v11 | 0x20u) - 97 < 6)
        {
          v4 += 2;
          if (v4 != a3)
          {
            int v12 = *v4;
            if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38 || (v12 | 0x20u) - 97 < 6) {
              goto LABEL_42;
            }
          }
        }
      }
      goto LABEL_85;
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 11;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char>::value_type v6 = 11;
LABEL_68:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v6);
        return v4 + 1;
      }
    case 'x':
LABEL_42:
      if (v4 + 1 == a3) {
        goto LABEL_85;
      }
      unsigned __int8 v13 = v4[1];
      char v14 = -48;
      if ((v13 & 0xF8) == 0x30 || (v13 & 0xFE) == 0x38) {
        goto LABEL_47;
      }
      v13 |= 0x20u;
      if ((v13 - 97) >= 6u) {
        goto LABEL_85;
      }
      char v14 = -87;
LABEL_47:
      if (v4 + 2 == a3) {
        goto LABEL_85;
      }
      unsigned __int8 v15 = v4[2];
      char v16 = -48;
      if ((v15 & 0xF8) != 0x30 && (v15 & 0xFE) != 0x38)
      {
        v15 |= 0x20u;
        if ((v15 - 97) >= 6u) {
LABEL_85:
        }
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
        char v16 = -87;
      }
      std::basic_regex<char>::value_type v17 = v15 + 16 * (v13 + v14) + v16;
      if (!a4)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v17);
        v4 += 3;
        return v4;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(unsigned char *)a4 = v17;
      *((unsigned char *)a4 + 1) = 0;
      uint64_t result = v4 + 3;
      break;
    default:
      if ((char)v5 == 95 || ((char)v5 & 0x80000000) == 0 && (a1->__traits_.__ct_->__tab_[v5] & 0x500) != 0) {
        goto LABEL_85;
      }
      if (!a4) {
        goto LABEL_68;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(unsigned char *)a4 = v5;
      *((unsigned char *)a4 + 1) = 0;
      return v4 + 1;
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  unint64_t v4 = a2;
  int64_t v5 = a2 - a3;
  if (a2 == a3) {
    return a2;
  }
  int v6 = *a2;
  int v7 = a2;
  if (v6 == 93) {
    return v7;
  }
  unsigned int v8 = (char *)a4;
  int v11 = 0;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v42 = 0;
  if (a2 + 1 == a3 || v6 != 91)
  {
LABEL_36:
    int v27 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_39;
  }
  int v12 = a2[1];
  if (v12 != 46)
  {
    if (v12 == 58)
    {
      uint64_t v14 = (uint64_t)(a2 + 2);
      if (a3 - (v4 + 2) < 2) {
        goto LABEL_91;
      }
      uint64_t v15 = 0;
      int64_t v16 = v5 + 4;
      std::basic_regex<char>::value_type v17 = (unsigned __int8 *)v4;
      uint64_t v18 = v16;
      if (v4[2] == 58) {
        goto LABEL_15;
      }
      do
      {
        do
        {
          if (!v18) {
            goto LABEL_91;
          }
          std::basic_regex<char>::value_type v17 = (unsigned __int8 *)&v4[++v15];
          uint64_t v18 = v16 + v15;
        }
        while (v4[v15 + 2] != 58);
LABEL_15:
        ;
      }
      while (v17[3] != 93);
      uint64_t v19 = &v4[v15 + 2];
      if (v19 == a3) {
LABEL_91:
      }
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
      int v20 = std::regex_traits<char>::__lookup_classname<std::__wrap_iter<char const*>>(a1, v14, v19, *(_DWORD *)(a1 + 24) & 1);
      if (!v20) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
      }
      char v13 = 0;
      *((_DWORD *)v8 + 40) |= v20;
      unsigned int v8 = &v4[v15 + 4];
      int v7 = v4;
      if (SHIBYTE(v42) < 0) {
        goto LABEL_70;
      }
      goto LABEL_71;
    }
    if (v12 == 61)
    {
      unsigned int v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<std::__wrap_iter<char const*>>(a1, a2 + 2, a3, a4);
      char v13 = 0;
      int v7 = v4;
      if ((SHIBYTE(v42) & 0x80000000) == 0) {
        goto LABEL_71;
      }
      goto LABEL_70;
    }
    int v11 = 0;
    goto LABEL_36;
  }
  BOOL v21 = a2 + 2;
  if (a3 - (v4 + 2) < 2) {
    goto LABEL_92;
  }
  std::basic_regex<char> v22 = (unsigned __int8 *)(v4 + 2);
  BOOL v23 = (unsigned __int8 *)(v4 + 3);
  if (*v21 == 46) {
    goto LABEL_24;
  }
  do
  {
    do
    {
      if (a3 - 4 == v4) {
        goto LABEL_92;
      }
      ++v4;
      std::basic_regex<char> v22 = v23;
      int v24 = *v23++;
    }
    while (v24 != 46);
LABEL_24:
    ;
  }
  while (*v23 != 93);
  if (v22 == (unsigned __int8 *)a3) {
LABEL_92:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(a1, (uint64_t)v21, v4 + 2, (uint64_t)&v43);
  if (SHIBYTE(v42) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v42 = v44;
  *(_OWORD *)std::vector<std::csub_match> __p = v43;
  size_t v25 = (char *)HIBYTE(v44);
  int v11 = SHIBYTE(v44);
  uint64_t v26 = *((void *)&v43 + 1);
  if (v44 < 0) {
    size_t v25 = (char *)__p[1];
  }
  if ((unint64_t)(v25 - 1) >= 2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  unint64_t v4 = (char *)(v22 + 2);
  int v27 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v44 >= 0) {
    uint64_t v26 = HIBYTE(v44);
  }
  if (v26)
  {
    if (v4 == a3) {
      goto LABEL_52;
    }
    goto LABEL_51;
  }
LABEL_39:
  if ((v27 | 0x40) != 0x40)
  {
    LOBYTE(v28) = *v4;
LABEL_44:
    if (v11 < 0)
    {
      int64_t v31 = __p[0];
      __p[1] = (void *)1;
      *(unsigned char *)__p[0] = v28;
      v31[1] = 0;
      if (++v4 == a3) {
        goto LABEL_52;
      }
    }
    else
    {
      HIBYTE(v42) = 1;
      LOWORD(__p[0]) = v28;
      if (++v4 == a3) {
        goto LABEL_52;
      }
    }
    goto LABEL_51;
  }
  int v28 = *v4;
  if (v28 != 92) {
    goto LABEL_44;
  }
  unint64_t v29 = v4 + 1;
  if (v27) {
    int v30 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v29, a3, (uint64_t *)__p);
  }
  else {
    int v30 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (unsigned __int8 *)v29, (unsigned __int8 *)a3, (uint64_t)__p, (uint64_t)v8);
  }
  unint64_t v4 = v30;
  if (v30 == a3)
  {
LABEL_52:
    if (SHIBYTE(v42) < 0)
    {
      if (!__p[1]) {
        goto LABEL_69;
      }
      if (__p[1] != (void *)1)
      {
        uint64_t v33 = (void **)__p[0];
LABEL_68:
        std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100]((uint64_t)v8, *(char *)v33, *((char *)v33 + 1));
LABEL_69:
        char v13 = 1;
        int v7 = v4;
        if ((SHIBYTE(v42) & 0x80000000) == 0) {
          goto LABEL_71;
        }
        goto LABEL_70;
      }
      uint64_t v33 = (void **)__p[0];
    }
    else
    {
      if (!HIBYTE(v42)) {
        goto LABEL_69;
      }
      uint64_t v33 = __p;
      if (HIBYTE(v42) != 1) {
        goto LABEL_68;
      }
    }
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, *(char *)v33);
    goto LABEL_69;
  }
LABEL_51:
  int v32 = *v4;
  if (v32 == 93) {
    goto LABEL_52;
  }
  unint64_t v34 = v4 + 1;
  if (v4 + 1 == a3 || v32 != 45 || *v34 == 93) {
    goto LABEL_52;
  }
  long long v43 = 0uLL;
  int64_t v44 = 0;
  int v7 = v4 + 2;
  if (v4 + 2 == a3 || *v34 != 91 || *v7 != 46)
  {
    if ((v27 | 0x40) == 0x40)
    {
      LODWORD(v34) = *v34;
      if (v34 == 92)
      {
        if (v27) {
          unint64_t v35 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v4 + 2, a3, (uint64_t *)&v43);
        }
        else {
          unint64_t v35 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (unsigned __int8 *)v4 + 2, (unsigned __int8 *)a3, (uint64_t)&v43, (uint64_t)v8);
        }
        goto LABEL_81;
      }
    }
    else
    {
      LOBYTE(v34) = *v34;
    }
    HIBYTE(v44) = 1;
    LOWORD(v43) = v34;
    goto LABEL_82;
  }
  unint64_t v35 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(a1, v4 + 3, a3, (uint64_t)&v43);
LABEL_81:
  int v7 = v35;
LABEL_82:
  *(_OWORD *)BOOL v39 = *(_OWORD *)__p;
  uint64_t v40 = v42;
  __p[1] = 0;
  uint64_t v42 = 0;
  __p[0] = 0;
  *(_OWORD *)BOOL v37 = v43;
  uint64_t v38 = v44;
  long long v43 = 0uLL;
  int64_t v44 = 0;
  std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100]((uint64_t)v8, (char *)v39, (uint64_t)v37);
  if (SHIBYTE(v38) < 0)
  {
    operator delete(v37[0]);
    if ((SHIBYTE(v40) & 0x80000000) == 0)
    {
LABEL_84:
      if ((SHIBYTE(v44) & 0x80000000) == 0) {
        goto LABEL_85;
      }
LABEL_89:
      operator delete((void *)v43);
      char v13 = 1;
      if (SHIBYTE(v42) < 0) {
        goto LABEL_70;
      }
      goto LABEL_71;
    }
  }
  else if ((SHIBYTE(v40) & 0x80000000) == 0)
  {
    goto LABEL_84;
  }
  operator delete(v39[0]);
  if (SHIBYTE(v44) < 0) {
    goto LABEL_89;
  }
LABEL_85:
  char v13 = 1;
  if (SHIBYTE(v42) < 0) {
LABEL_70:
  }
    operator delete(__p[0]);
LABEL_71:
  if (v13) {
    return v7;
  }
  return v8;
}

void sub_235DCCB8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 49) < 0)
  {
    operator delete(*(void **)(v28 - 72));
    if (a28 < 0)
    {
LABEL_5:
      operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  else if (a28 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_39;
  }
  int v6 = a3 - 2;
  int v7 = a2;
  unsigned int v8 = a2;
  unsigned int v9 = a2 + 1;
  if (*a2 != 61) {
    goto LABEL_5;
  }
LABEL_4:
  if (*v9 != 93)
  {
LABEL_5:
    while (a2 != v6)
    {
      ++v7;
      --v6;
      unsigned int v8 = v9;
      int v10 = *v9++;
      if (v10 == 61) {
        goto LABEL_4;
      }
    }
LABEL_39:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  if (v8 == a3) {
    goto LABEL_39;
  }
  memset(v20, 170, sizeof(v20));
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(a1, (uint64_t)a2, v7, (uint64_t)v20);
  if ((SHIBYTE(v20[2]) & 0x80000000) == 0)
  {
    int v11 = (char *)HIBYTE(v20[2]);
    if (HIBYTE(v20[2]))
    {
      memset(__p, 170, sizeof(__p));
      int v12 = v20;
      goto LABEL_14;
    }
LABEL_40:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  int v11 = (char *)v20[1];
  if (!v20[1]) {
    goto LABEL_40;
  }
  memset(__p, 170, sizeof(__p));
  int v12 = (void **)v20[0];
LABEL_14:
  std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(a1, (uint64_t)v12, &v11[(void)v12], (unsigned char **)__p);
  if (SHIBYTE(__p[2]) < 0)
  {
    if (__p[1])
    {
LABEL_16:
      unint64_t v13 = *(void *)(a4 + 144);
      if (v13 >= *(void *)(a4 + 152))
      {
        *(void *)(a4 + 144) = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)(a4 + 136), (uint64_t)__p);
        if (SHIBYTE(__p[2]) < 0) {
          goto LABEL_37;
        }
      }
      else
      {
        if ((HIBYTE(__p[2]) & 0x80) != 0)
        {
          std::string::__init_copy_ctor_external(*(std::string **)(a4 + 144), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          long long v14 = *(_OWORD *)__p;
          *(void **)(v13 + 16) = __p[2];
          *(_OWORD *)unint64_t v13 = v14;
        }
        *(void *)(a4 + 144) = v13 + 24;
        *(void *)(a4 + 144) = v13 + 24;
        if (SHIBYTE(__p[2]) < 0) {
          goto LABEL_37;
        }
      }
      goto LABEL_33;
    }
  }
  else if (HIBYTE(__p[2]))
  {
    goto LABEL_16;
  }
  uint64_t v15 = (void *)HIBYTE(v20[2]);
  if (SHIBYTE(v20[2]) < 0) {
    uint64_t v15 = v20[1];
  }
  if (v15 == (void *)2)
  {
    std::basic_regex<char>::value_type v17 = v20;
    if (SHIBYTE(v20[2]) < 0) {
      std::basic_regex<char>::value_type v17 = (void **)v20[0];
    }
    std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](a4, *(char *)v17, *((char *)v17 + 1));
  }
  else
  {
    if (v15 != (void *)1) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
    }
    int64_t v16 = v20;
    if (SHIBYTE(v20[2]) < 0) {
      int64_t v16 = (void **)v20[0];
    }
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a4, *(char *)v16);
  }
  if (SHIBYTE(__p[2]) < 0)
  {
LABEL_37:
    operator delete(__p[0]);
    if (SHIBYTE(v20[2]) < 0) {
      goto LABEL_38;
    }
    return v7 + 2;
  }
LABEL_33:
  if ((SHIBYTE(v20[2]) & 0x80000000) == 0) {
    return v7 + 2;
  }
LABEL_38:
  operator delete(v20[0]);
  return v7 + 2;
}

void sub_235DCCE94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  *(void *)(v20 + 144) = v21;
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_15;
  }
  int64_t v5 = a3 - 2;
  int v6 = a2;
  int v7 = a2;
  unsigned int v8 = a2 + 1;
  if (*a2 != 46) {
    goto LABEL_5;
  }
LABEL_4:
  if (*v8 != 93)
  {
LABEL_5:
    while (a2 != v5)
    {
      ++v6;
      --v5;
      int v7 = v8;
      int v9 = *v8++;
      if (v9 == 46) {
        goto LABEL_4;
      }
    }
LABEL_15:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  if (v7 == a3) {
    goto LABEL_15;
  }
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(a1, (uint64_t)a2, v6, (uint64_t)&v13);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(_OWORD *)a4 = v13;
  unint64_t v10 = v14;
  *(void *)(a4 + 16) = v14;
  unint64_t v11 = HIBYTE(v10);
  if ((v11 & 0x80u) != 0) {
    unint64_t v11 = *(void *)(a4 + 8);
  }
  if (v11 - 1 >= 2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  return v6 + 2;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  if (a2 == a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  switch(*a2)
  {
    case 'D':
      *(_DWORD *)(a5 + 164) |= 0x400u;
      uint64_t result = a2 + 1;
      break;
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'T':
    case 'U':
    case 'V':
    case 'X':
    case 'Y':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case 'a':
    case 'c':
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'q':
    case 'r':
    case 't':
    case 'u':
    case 'v':
      goto LABEL_8;
    case 'S':
      *(_DWORD *)(a5 + 164) |= 0x4000u;
      uint64_t result = a2 + 1;
      break;
    case 'W':
      *(_DWORD *)(a5 + 164) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5, 95);
      uint64_t result = a2 + 1;
      break;
    case 'b':
      if (*(char *)(a4 + 23) < 0)
      {
        *(void *)(a4 + 8) = 1;
        a4 = *(void *)a4;
      }
      else
      {
        *(unsigned char *)(a4 + 23) = 1;
      }
      *(_WORD *)a4 = 8;
      uint64_t result = a2 + 1;
      break;
    case 'd':
      *(_DWORD *)(a5 + 160) |= 0x400u;
      uint64_t result = a2 + 1;
      break;
    case 's':
      *(_DWORD *)(a5 + 160) |= 0x4000u;
      uint64_t result = a2 + 1;
      break;
    case 'w':
      *(_DWORD *)(a5 + 160) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
      uint64_t result = a2 + 1;
      break;
    default:
      if (*a2)
      {
LABEL_8:
        uint64_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, a2, a3, (uint64_t *)a4);
      }
      else
      {
        if (*(char *)(a4 + 23) < 0)
        {
          *(void *)(a4 + 8) = 1;
          a4 = *(void *)a4;
        }
        else
        {
          *(unsigned char *)(a4 + 23) = 1;
        }
        *(unsigned char *)a4 = 0;
        *(unsigned char *)(a4 + 1) = 0;
        uint64_t result = a2 + 1;
      }
      break;
  }
  return result;
}

std::basic_regex<char>::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char>::value_type *a2, std::basic_regex<char>::value_type *a3, uint64_t *a4)
{
  if (a2 == a3) {
LABEL_70:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  std::basic_regex<char>::value_type v5 = *a2;
  switch(*a2)
  {
    case '""':
    case '/':
    case '\\':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(unsigned char *)a4 = v5;
        *((unsigned char *)a4 + 1) = 0;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
        return a2 + 1;
      }
    case 'a':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 7;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 7);
        return a2 + 1;
      }
    case 'b':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 8;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 8);
        return a2 + 1;
      }
    case 'f':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
        return a2 + 1;
      }
    case 'n':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
        return a2 + 1;
      }
    case 'r':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
        return a2 + 1;
      }
    case 't':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
        return a2 + 1;
      }
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 11;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 11);
        return a2 + 1;
      }
    default:
      if ((v5 & 0xF8) != 0x30) {
        goto LABEL_70;
      }
      std::basic_regex<char>::value_type v7 = *a2 - 48;
      unsigned int v8 = a2 + 1;
      if (a2 + 1 == a3)
      {
        unsigned int v8 = a3;
LABEL_42:
        if (a4) {
          goto LABEL_43;
        }
LABEL_69:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
        return v8;
      }
      if ((*v8 & 0xF8) != 0x30) {
        goto LABEL_42;
      }
      std::basic_regex<char>::value_type v7 = *v8 + 8 * v7 - 48;
      if (a2 + 2 == a3)
      {
        unsigned int v8 = a3;
        if (a4) {
          goto LABEL_43;
        }
        goto LABEL_69;
      }
      std::basic_regex<char>::value_type v9 = a2[2];
      int v10 = v9 & 0xF8;
      std::basic_regex<char>::value_type v11 = v9 + 8 * v7 - 48;
      if (v10 == 48) {
        unsigned int v8 = a2 + 3;
      }
      else {
        unsigned int v8 = a2 + 2;
      }
      if (v10 == 48) {
        std::basic_regex<char>::value_type v7 = v11;
      }
      if (!a4) {
        goto LABEL_69;
      }
LABEL_43:
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(unsigned char *)a4 = v7;
      *((unsigned char *)a4 + 1) = 0;
      return v8;
  }
}

void std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v5 = (unint64_t)&a3[-a2];
  memset(__s, 170, sizeof(__s));
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 <= 0x16)
  {
    __s[23] = (_BYTE)a3 - a2;
    std::basic_regex<char>::value_type v9 = __s;
    if ((char *)a2 != a3) {
      goto LABEL_4;
    }
LABEL_13:
    int v10 = v9;
    goto LABEL_16;
  }
  uint64_t v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17) {
    uint64_t v16 = v5 | 7;
  }
  uint64_t v17 = v16 + 1;
  std::basic_regex<char>::value_type v9 = (char *)operator new(v16 + 1);
  *(void *)&__s[8] = v5;
  *(void *)&__s[16] = v17 | 0x8000000000000000;
  *(void *)__s = v9;
  if ((char *)a2 == a3) {
    goto LABEL_13;
  }
LABEL_4:
  if (v5 < 0x20 || (unint64_t)&v9[-a2] < 0x20)
  {
    int v10 = v9;
    std::basic_regex<char>::value_type v11 = (char *)a2;
    do
    {
LABEL_15:
      char v18 = *v11++;
      *v10++ = v18;
    }
    while (v11 != a3);
    goto LABEL_16;
  }
  int v10 = &v9[v5 & 0xFFFFFFFFFFFFFFE0];
  std::basic_regex<char>::value_type v11 = (char *)(a2 + (v5 & 0xFFFFFFFFFFFFFFE0));
  int v12 = (long long *)(a2 + 16);
  long long v13 = v9 + 16;
  unint64_t v14 = v5 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    long long v15 = *v12;
    *(v13 - 1) = *(v12 - 1);
    *long long v13 = v15;
    v12 += 2;
    v13 += 2;
    v14 -= 32;
  }
  while (v14);
  if (v5 != (v5 & 0xFFFFFFFFFFFFFFE0)) {
    goto LABEL_15;
  }
LABEL_16:
  *int v10 = 0;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if (__s[23] < 0)
  {
    uint64_t v19 = *(char **)__s;
    if (!*(void *)&__s[8]) {
      goto LABEL_29;
    }
  }
  else
  {
    if (!__s[23]) {
      return;
    }
    uint64_t v19 = __s;
  }
  std::__get_collation_name(&v26, v19);
  *(_OWORD *)a4 = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
  unint64_t v20 = v26.__r_.__value_.__r.__words[2];
  *(void *)(a4 + 16) = *((void *)&v26.__r_.__value_.__l + 2);
  unint64_t v21 = HIBYTE(v20);
  if ((v21 & 0x80u) != 0) {
    unint64_t v21 = *(void *)(a4 + 8);
  }
  if (v21)
  {
LABEL_23:
    if ((__s[23] & 0x80000000) == 0) {
      return;
    }
    uint64_t v19 = *(char **)__s;
LABEL_29:
    operator delete(v19);
    return;
  }
  if (__s[23] < 0)
  {
    uint64_t v19 = *(char **)__s;
    if (*(void *)&__s[8] >= 3uLL) {
      goto LABEL_29;
    }
    goto LABEL_31;
  }
  if (__s[23] < 3u)
  {
LABEL_31:
    (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 16) + 32))(&v26);
    if (*(char *)(a4 + 23) < 0) {
      operator delete(*(void **)a4);
    }
    *(std::string *)a4 = v26;
    if (*(char *)(a4 + 23) < 0)
    {
      uint64_t v23 = *(void *)(a4 + 8);
      if (v23 == 1 || v23 == 12)
      {
        if (__s != (char *)a4)
        {
          if (__s[23] >= 0) {
            int v24 = __s;
          }
          else {
            int v24 = *(char **)__s;
          }
          if (__s[23] >= 0) {
            size_t v25 = __s[23];
          }
          else {
            size_t v25 = *(void *)&__s[8];
          }
          std::string::__assign_no_alias<false>((void **)a4, v24, v25);
        }
      }
      else
      {
        **(unsigned char **)a4 = 0;
        *(void *)(a4 + 8) = 0;
      }
    }
    else
    {
      int v22 = *(unsigned __int8 *)(a4 + 23);
      if (v22 == 1 || v22 == 12)
      {
        if (__s != (char *)a4)
        {
          if (__s[23] < 0)
          {
            std::string::__assign_no_alias<true>((void *)a4, *(void **)__s, *(size_t *)&__s[8]);
          }
          else
          {
            *(_OWORD *)a4 = *(_OWORD *)__s;
            *(void *)(a4 + 16) = *(void *)&__s[16];
          }
        }
      }
      else
      {
        *(unsigned char *)a4 = 0;
        *(unsigned char *)(a4 + 23) = 0;
      }
    }
    goto LABEL_23;
  }
}

void sub_235DCDAC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0)
  {
    operator delete(*(void **)v17);
    if ((a17 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a17 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::regex_traits<char>::__lookup_classname<std::__wrap_iter<char const*>>(uint64_t a1, uint64_t a2, char *a3, BOOL a4)
{
  unint64_t v4 = (unint64_t)&a3[-a2];
  memset(__p, 170, sizeof(__p));
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v4 > 0x16)
  {
    uint64_t v16 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v16 = v4 | 7;
    }
    uint64_t v17 = v16 + 1;
    std::basic_regex<char>::value_type v9 = operator new(v16 + 1);
    __p[1] = (void *)v4;
    __p[2] = (void *)(v17 | 0x8000000000000000);
    __p[0] = v9;
    if ((char *)a2 != a3) {
      goto LABEL_4;
    }
LABEL_13:
    int v10 = v9;
    goto LABEL_16;
  }
  HIBYTE(__p[2]) = (_BYTE)a3 - a2;
  std::basic_regex<char>::value_type v9 = __p;
  if ((char *)a2 == a3) {
    goto LABEL_13;
  }
LABEL_4:
  if (v4 < 0x20 || (unint64_t)v9 - a2 < 0x20)
  {
    int v10 = v9;
    std::basic_regex<char>::value_type v11 = (char *)a2;
  }
  else
  {
    int v10 = (char *)v9 + (v4 & 0xFFFFFFFFFFFFFFE0);
    std::basic_regex<char>::value_type v11 = (char *)(a2 + (v4 & 0xFFFFFFFFFFFFFFE0));
    int v12 = (long long *)(a2 + 16);
    long long v13 = v9 + 1;
    unint64_t v14 = v4 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      *long long v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 32;
    }
    while (v14);
    if (v4 == (v4 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_16;
    }
  }
  do
  {
    char v18 = *v11++;
    *v10++ = v18;
  }
  while (v11 != a3);
LABEL_16:
  *int v10 = 0;
  uint64_t v19 = (char *)HIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0) {
    unint64_t v20 = __p;
  }
  else {
    unint64_t v20 = (void **)__p[0];
  }
  if (SHIBYTE(__p[2]) < 0) {
    uint64_t v19 = (char *)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), v20, &v19[(void)v20]);
  if (SHIBYTE(__p[2]) >= 0) {
    unint64_t v21 = __p;
  }
  else {
    unint64_t v21 = (void **)__p[0];
  }
  uint64_t classname = std::__get_classname((const char *)v21, a4);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  return classname;
}

void sub_235DCDCAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(uint64_t a1, uint64_t a2, char *a3)
{
  int v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (char *)a2, a3);
  if ((char *)a2 != v6 || (char *)a2 == a3 || (char *)(a2 + 1) == a3 || *(unsigned char *)a2 != 92) {
    return v6;
  }
  int v8 = *(unsigned __int8 *)(a2 + 1);
  if (v8 == 40)
  {
    std::basic_regex<char>::value_type v9 = (std::basic_regex<char> *)(a2 + 2);
    if ((*(unsigned char *)(a1 + 24) & 2) != 0)
    {
      int v11 = *(_DWORD *)(a1 + 28);
    }
    else
    {
      int v10 = operator new(0x18uLL);
      int v11 = *(_DWORD *)(a1 + 28) + 1;
      *(_DWORD *)(a1 + 28) = v11;
      uint64_t v12 = *(void *)(a1 + 56);
      uint64_t v13 = *(void *)(v12 + 8);
      *int v10 = &unk_26E93AE20;
      v10[1] = v13;
      *((_DWORD *)v10 + 4) = v11;
      *(void *)(v12 + 8) = v10;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    do
    {
      if (v9 == (std::basic_regex<char> *)a3) {
        goto LABEL_23;
      }
      unint64_t v14 = v9;
      long long v15 = *(std::__owns_one_state<char> **)(a1 + 56);
      int v16 = *(_DWORD *)(a1 + 28);
      uint64_t v17 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(a1, v14, a3);
      if (v14 == v17) {
        break;
      }
      std::basic_regex<char>::value_type v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v17, (std::basic_regex<char> *)a3, v15, (v16 + 1), (*(_DWORD *)(a1 + 28) + 1));
    }
    while (v14 != v9);
    if ((char *)&v14->__traits_.__loc_.__locale_ + 1 == a3
      || LOBYTE(v14->__traits_.__loc_.__locale_) != 92
      || BYTE1(v14->__traits_.__loc_.__locale_) != 41)
    {
LABEL_23:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    int v6 = (char *)v14 + 2 * (BYTE1(v14->__traits_.__loc_.__locale_) == 41);
    if ((*(unsigned char *)(a1 + 24) & 2) == 0)
    {
      char v18 = operator new(0x18uLL);
      uint64_t v19 = *(void *)(a1 + 56);
      uint64_t v20 = *(void *)(v19 + 8);
      void *v18 = &unk_26E93AE68;
      v18[1] = v20;
      *((_DWORD *)v18 + 4) = v11;
      *(void *)(v19 + 8) = v18;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
      return v6;
    }
    return v6;
  }
  if ((v8 & 0xF8) != 0x30 && (v8 & 0xFE) != 0x38 || (v8 - 49) > 8) {
    return v6;
  }
  if ((v8 - 48) > *(_DWORD *)(a1 + 28)) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref((std::basic_regex<char> *)a1, v8 - 48);
  return (char *)(a2 + 2);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  if (this == a3) {
    return this;
  }
  int locale_low = LOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low == 42)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, 0, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  std::basic_regex<char>::value_type v9 = (unsigned __int8 *)a3;
  if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3
    || locale_low != 92
    || BYTE1(this->__traits_.__loc_.__locale_) != 123)
  {
    return this;
  }
  int v10 = (std::basic_regex<char> *)((char *)this + 2 * (BYTE1(this->__traits_.__loc_.__locale_) == 123));
  if (v10 == a3) {
    goto LABEL_45;
  }
  int v11 = LOBYTE(v10->__traits_.__loc_.__locale_);
  if ((v11 & 0xF8) != 0x30 && (v11 & 0xFE) != 0x38) {
    goto LABEL_45;
  }
  int v12 = v11 - 48;
  uint64_t v13 = (std::basic_regex<char> *)((char *)&v10->__traits_.__loc_.__locale_ + 1);
  if ((std::basic_regex<char> *)((char *)&v10->__traits_.__loc_.__locale_ + 1) == a3)
  {
LABEL_15:
    uint64_t v13 = a3;
  }
  else
  {
    while (1)
    {
      int v14 = LOBYTE(v13->__traits_.__loc_.__locale_);
      if ((v14 & 0xF8) != 0x30 && (v14 & 0xFE) != 0x38) {
        break;
      }
      if (v12 >= 214748364) {
        goto LABEL_45;
      }
      int v12 = v14 + 10 * v12 - 48;
      uint64_t v13 = (std::basic_regex<char> *)((char *)v13 + 1);
      if (v13 == a3) {
        goto LABEL_15;
      }
    }
  }
  if (v13 == v10) {
    goto LABEL_45;
  }
  if (v13 == a3) {
LABEL_46:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
  long long v15 = (std::basic_regex<char> *)((char *)&v13->__traits_.__loc_.__locale_ + 1);
  int v16 = LOBYTE(v13->__traits_.__loc_.__locale_);
  if (v16 != 44)
  {
    if (v15 != a3 && v16 == 92 && LOBYTE(v15->__traits_.__loc_.__locale_) == 125)
    {
      uint64_t v19 = (unsigned __int8 *)&v13->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v12, v12, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v19;
    }
    goto LABEL_46;
  }
  if (v15 == a3) {
    goto LABEL_46;
  }
  int v17 = LOBYTE(v15->__traits_.__loc_.__locale_);
  if ((v17 & 0xF8) == 0x30 || (v17 & 0xFE) == 0x38)
  {
    int v18 = v17 - 48;
    long long v15 = (std::basic_regex<char> *)((char *)&v13->__traits_.__loc_.__locale_ + 2);
    if ((std::basic_regex<char> *)((char *)&v13->__traits_.__loc_.__locale_ + 2) == a3)
    {
LABEL_37:
      long long v15 = a3;
      goto LABEL_40;
    }
    while (1)
    {
      int v17 = LOBYTE(v15->__traits_.__loc_.__locale_);
      if ((v17 & 0xF8) != 0x30 && (v17 & 0xFE) != 0x38) {
        break;
      }
      if (v18 >= 214748364) {
        goto LABEL_45;
      }
      int v18 = v17 + 10 * v18 - 48;
      long long v15 = (std::basic_regex<char> *)((char *)v15 + 1);
      if (v15 == a3) {
        goto LABEL_37;
      }
    }
  }
  else
  {
    int v18 = -1;
  }
  if (v15 == a3)
  {
    uint64_t v20 = (unsigned __int8 *)v15;
    long long v15 = a3;
    std::basic_regex<char>::value_type v9 = v20;
  }
  else if ((std::basic_regex<char> *)((char *)&v15->__traits_.__loc_.__locale_ + 1) == a3 || v17 != 92)
  {
    std::basic_regex<char>::value_type v9 = (unsigned __int8 *)v15;
  }
  else
  {
    std::basic_regex<char>::value_type v9 = (unsigned __int8 *)v15 + 2 * (BYTE1(v15->__traits_.__loc_.__locale_) == 125);
  }
LABEL_40:
  if (v15 == (std::basic_regex<char> *)v9) {
    goto LABEL_46;
  }
  if (v18 != -1)
  {
    if (v18 >= v12)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v12, v18, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v9;
    }
LABEL_45:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v12, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
  return (std::basic_regex<char> *)v9;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, char *a2, char *a3)
{
  if (a2 != a3)
  {
    int v6 = a2 + 1;
    int v5 = *a2;
    if (a2 + 1 != a3 || v5 != 36)
    {
      if ((v5 - 46) > 0x2E || ((1 << (v5 - 46)) & 0x600000000001) == 0)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v5);
        return a2 + 1;
      }
      if (v6 != a3 && v5 == 92)
      {
        int v9 = *v6;
        if ((v9 - 36) <= 0x3A && ((1 << (v9 - 36)) & 0x580000000000441) != 0)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v9);
          return a2 + 2;
        }
      }
      if (*a2 == 46)
      {
        int v10 = (std::__node<char> *)operator new(0x10uLL);
        std::vector<std::ssub_match>::pointer end = this->__end_;
        first = end->__first_;
        v10->__vftable = (std::__node<char>_vtbl *)&unk_26E93B018;
        v10[1].__vftable = (std::__node<char>_vtbl *)first;
        end->__first_ = v10;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
        return a2 + 1;
      }
    }
  }

  return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, a2, a3);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  int v6 = *(std::__owns_one_state<char> **)(a1 + 56);
  int v7 = *(_DWORD *)(a1 + 28);
  int v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, a3);
  if (v8 == a2)
  {
    int v8 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char>::value_type *)a2, (std::basic_regex<char>::value_type *)a3);
    if (v8 == a2)
    {
      if (a2 == a3 || LOBYTE(a2->__traits_.__loc_.__locale_) != 46)
      {
        int v8 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(a1, (char *)a2, (char *)a3);
      }
      else
      {
        int v9 = operator new(0x10uLL);
        uint64_t v10 = *(void *)(a1 + 56);
        uint64_t v11 = *(void *)(v10 + 8);
        *int v9 = &unk_26E93B018;
        v9[1] = v11;
        *(void *)(v10 + 8) = v9;
        *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
        int v8 = (std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1);
      }
    }
  }
  if (v8 != a2 || v8 == a3)
  {
LABEL_23:
    if (v8 != a2) {
      goto LABEL_24;
    }
    return a2;
  }
  int locale_low = SLOBYTE(a2->__traits_.__loc_.__locale_);
  if (locale_low == 36)
  {
    uint64_t v13 = operator new(0x18uLL);
    BOOL v14 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    uint64_t v15 = *(void *)(a1 + 56);
    v13[1] = *(void *)(v15 + 8);
    int v16 = &unk_26E93AB08;
    goto LABEL_14;
  }
  if (locale_low == 40)
  {
    if ((*(unsigned char *)(a1 + 24) & 2) != 0)
    {
      int v18 = *(_DWORD *)(a1 + 28);
    }
    else
    {
      int v17 = operator new(0x18uLL);
      int v18 = *(_DWORD *)(a1 + 28) + 1;
      *(_DWORD *)(a1 + 28) = v18;
      uint64_t v19 = *(void *)(a1 + 56);
      uint64_t v20 = *(void *)(v19 + 8);
      *int v17 = &unk_26E93AE20;
      v17[1] = v20;
      *((_DWORD *)v17 + 4) = v18;
      *(void *)(v19 + 8) = v17;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    ++*(_DWORD *)(a1 + 36);
    unint64_t v21 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, (char *)&a2->__traits_.__loc_.__locale_ + 1, a3);
    if (v21 == a3 || (int v22 = v21, LOBYTE(v21->__traits_.__loc_.__locale_) != 41)) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    if ((*(unsigned char *)(a1 + 24) & 2) == 0)
    {
      uint64_t v23 = operator new(0x18uLL);
      uint64_t v24 = *(void *)(a1 + 56);
      uint64_t v25 = *(void *)(v24 + 8);
      void *v23 = &unk_26E93AE68;
      v23[1] = v25;
      *((_DWORD *)v23 + 4) = v18;
      *(void *)(v24 + 8) = v23;
      *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
    }
    --*(_DWORD *)(a1 + 36);
    int v8 = (std::basic_regex<char> *)((char *)&v22->__traits_.__loc_.__locale_ + 1);
    goto LABEL_23;
  }
  if (locale_low != 94) {
    return a2;
  }
  uint64_t v13 = operator new(0x18uLL);
  BOOL v14 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
  uint64_t v15 = *(void *)(a1 + 56);
  v13[1] = *(void *)(v15 + 8);
  int v16 = &unk_26E93AAC0;
LABEL_14:
  *uint64_t v13 = v16;
  *((unsigned char *)v13 + 16) = v14;
  *(void *)(v15 + 8) = v13;
  *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
  int v8 = (std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1);
LABEL_24:
  size_t v26 = (*(_DWORD *)(a1 + 28) + 1);

  return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(a1, v8, a3, v6, (v7 + 1), v26);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  if (this == a3) {
    return this;
  }
  switch(LOBYTE(this->__traits_.__loc_.__locale_))
  {
    case '$':
    case '(':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
      return this;
    case ')':
      if (a1->__open_count_) {
        return this;
      }
      break;
    default:
      break;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
  return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
}

std::basic_regex<char>::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char>::value_type *a2, std::basic_regex<char>::value_type *a3)
{
  BOOL v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  unint64_t v4 = a2 + 1;
  if (v3 + 1 == a3 || *v3 != 92) {
    return v3;
  }
  std::basic_regex<char>::value_type v5 = *v4;
  switch(*v4)
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
    case '}':
      std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v5);
      v3 += 2;
      return v3;
    default:
      if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
      {
        uint64_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v4, a3, 0);
      }
      else
      {
        BOOL v7 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v5);
        uint64_t v8 = 2;
        if (!v7) {
          uint64_t v8 = 0;
        }
        uint64_t result = &v3[v8];
      }
      break;
  }
  return result;
}

void *std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, uint64_t a2, unsigned __int8 a3)
{
  char v11 = -86;
  MEMORY[0x237DF6F40](&v11, a1, 1);
  if (!v11) {
    return a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  uint64_t v6 = 0;
  while (1)
  {
    BOOL v7 = *(void **)((char *)a1 + *(void *)(*a1 - 24) + 40);
    uint64_t v8 = (unsigned char *)v7[3];
    if (v8 != (unsigned char *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(void *))(*v7 + 80))(v7);
    if (v7 == -1) {
      break;
    }
LABEL_9:
    if (v7 == a3)
    {
      int v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(void *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      int v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6) {
    int v9 = 2;
  }
  else {
    int v9 = 6;
  }
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_235DCEB68(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v2 = *v1;
  *(_DWORD *)((char *)v1 + *(void *)(*v1 - 24) + 32) |= 1u;
  if ((*((unsigned char *)v1 + *(void *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x235DCEB28);
  }
  __cxa_rethrow();
}

void sub_235DCEBE4(_Unwind_Exception *a1)
{
}

void checkError(AriSdk::MsgBase *a1@<X0>, uint64_t a2@<X1>, CFTypeRef *a3@<X8>)
{
  *a3 = 0;
  memset(&v9, 170, sizeof(v9));
  checkErrorStr(a1, a2, (uint64_t)&v9);
  int v4 = SHIBYTE(v9.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
  {
    std::basic_regex<char>::value_type v5 = (void *)v9.__r_.__value_.__r.__words[0];
    if (!v9.__r_.__value_.__l.__size_)
    {
LABEL_16:
      operator delete(v5);
      return;
    }
    std::string::__init_copy_ctor_external(&__p, v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_);
  }
  else
  {
    if (!*((unsigned char *)&v9.__r_.__value_.__s + 23)) {
      return;
    }
    std::string __p = v9;
  }
  CreateError();
  if (&cf != a3)
  {
    CFTypeRef v6 = *a3;
    *a3 = cf;
    CFTypeRef cf = 0;
    if (!v6) {
      goto LABEL_11;
    }
    CFRelease(v6);
  }
  if (cf) {
    CFRelease(cf);
  }
LABEL_11:
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v4 & 0x80000000) == 0) {
      return;
    }
    goto LABEL_15;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (v4 < 0)
  {
LABEL_15:
    std::basic_regex<char>::value_type v5 = (void *)v9.__r_.__value_.__r.__words[0];
    goto LABEL_16;
  }
}

void sub_235DCECF0(_Unwind_Exception *a1)
{
  operator delete(v2);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(v1);
  _Unwind_Resume(a1);
}

void sub_235DCED10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v18 & 0x80000000) == 0)
    {
LABEL_3:
      ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(v17);
      _Unwind_Resume(a1);
    }
  }
  else if ((v18 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a17);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(v17);
  _Unwind_Resume(a1);
}

void sub_235DCED58(_Unwind_Exception *a1)
{
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(v1);
  _Unwind_Resume(a1);
}

uint64_t checkErrorStr@<X0>(AriSdk::MsgBase *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  if (!*((unsigned char *)a1 + 33))
  {
    uint64_t result = (*(uint64_t (**)(AriSdk::MsgBase *))(*(void *)a1 + 32))(a1);
    if (result) {
      return result;
    }
    unint64_t v52 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v15 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v50 = v15;
    long long v51 = v15;
    long long v48 = v15;
    long long v49 = v15;
    long long v46 = v15;
    long long v47 = v15;
    long long v44 = v15;
    long long v45 = v15;
    long long v43 = v15;
    long long v41 = v15;
    long long v42 = v15;
    long long v39 = v15;
    *(_OWORD *)uint64_t v40 = v15;
    long long v37 = v15;
    long long v38 = v15;
    long long v36 = v15;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v36);
    int v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"Failed to ", 10);
    int v17 = *(char *)(a2 + 23);
    if (v17 >= 0) {
      uint64_t v18 = a2;
    }
    else {
      uint64_t v18 = *(void *)a2;
    }
    if (v17 >= 0) {
      uint64_t v19 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v19 = *(void *)(a2 + 8);
    }
    uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v18, v19);
    unint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)": BB responded with unexpected GMID: 0x", 39);
    unint64_t GMID = AriSdk::MsgBase::getGMID(a1);
    ctu::hex((ctu *)((GMID >> 17) & 0xFFFF8000 | (GMID << 26)));
    if (v35 >= 0) {
      uint64_t v23 = __p;
    }
    else {
      uint64_t v23 = (void **)__p[0];
    }
    if (v35 >= 0) {
      uint64_t v24 = HIBYTE(v35);
    }
    else {
      uint64_t v24 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v23, v24);
    if (SHIBYTE(v35) < 0)
    {
      operator delete(__p[0]);
      char v25 = BYTE8(v42);
      if ((BYTE8(v42) & 0x10) == 0)
      {
LABEL_26:
        if ((v25 & 8) == 0) {
          goto LABEL_27;
        }
        uint64_t v28 = (const void *)*((void *)&v37 + 1);
        size_t v26 = *((void *)&v38 + 1) - *((void *)&v37 + 1);
        if (*((void *)&v38 + 1) - *((void *)&v37 + 1) > 0x7FFFFFFFFFFFFFF7uLL) {
LABEL_55:
        }
          std::string::__throw_length_error[abi:ne180100]();
LABEL_40:
        if (v26 >= 0x17)
        {
          uint64_t v33 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v26 | 7) != 0x17) {
            uint64_t v33 = v26 | 7;
          }
          uint64_t v30 = v33 + 1;
          int64_t v31 = (void **)operator new(v33 + 1);
          goto LABEL_46;
        }
LABEL_41:
        HIBYTE(v35) = v26;
        int v27 = __p;
        if (!v26) {
          goto LABEL_48;
        }
        goto LABEL_47;
      }
    }
    else
    {
      char v25 = BYTE8(v42);
      if ((BYTE8(v42) & 0x10) == 0) {
        goto LABEL_26;
      }
    }
    uint64_t v32 = v42;
    if ((unint64_t)v42 < *((void *)&v39 + 1))
    {
      *(void *)&long long v42 = *((void *)&v39 + 1);
      uint64_t v32 = *((void *)&v39 + 1);
    }
    uint64_t v28 = (const void *)v39;
    size_t v26 = v32 - v39;
    if ((unint64_t)(v32 - v39) > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_55;
    }
    goto LABEL_40;
  }
  unint64_t v52 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v50 = v5;
  long long v51 = v5;
  long long v48 = v5;
  long long v49 = v5;
  long long v46 = v5;
  long long v47 = v5;
  long long v44 = v5;
  long long v45 = v5;
  long long v43 = v5;
  long long v41 = v5;
  long long v42 = v5;
  long long v39 = v5;
  *(_OWORD *)uint64_t v40 = v5;
  long long v37 = v5;
  long long v38 = v5;
  long long v36 = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v36);
  CFTypeRef v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"Failed to ", 10);
  int v7 = *(char *)(a2 + 23);
  if (v7 >= 0) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = *(void *)a2;
  }
  if (v7 >= 0) {
    uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v9 = *(void *)(a2 + 8);
  }
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)": BB responded with NACK (is baseband resetting?)", 49);
  if ((BYTE8(v42) & 0x10) != 0)
  {
    uint64_t v12 = v42;
    if ((unint64_t)v42 < *((void *)&v39 + 1))
    {
      *(void *)&long long v42 = *((void *)&v39 + 1);
      uint64_t v12 = *((void *)&v39 + 1);
    }
    char v11 = (const void **)&v39;
LABEL_31:
    uint64_t v28 = *v11;
    size_t v26 = v12 - (void)*v11;
    if (v26 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v26 >= 0x17)
    {
      uint64_t v29 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v26 | 7) != 0x17) {
        uint64_t v29 = v26 | 7;
      }
      uint64_t v30 = v29 + 1;
      int64_t v31 = (void **)operator new(v29 + 1);
LABEL_46:
      int v27 = v31;
      __p[1] = (void *)v26;
      int64_t v35 = v30 | 0x8000000000000000;
      __p[0] = v31;
LABEL_47:
      memmove(v27, v28, v26);
      goto LABEL_48;
    }
    goto LABEL_41;
  }
  if ((BYTE8(v42) & 8) != 0)
  {
    char v11 = (const void **)&v37 + 1;
    uint64_t v12 = *((void *)&v38 + 1);
    goto LABEL_31;
  }
LABEL_27:
  size_t v26 = 0;
  HIBYTE(v35) = 0;
  int v27 = __p;
LABEL_48:
  *((unsigned char *)v27 + v26) = 0;
  if (*(char *)(a3 + 23) < 0) {
    operator delete(*(void **)a3);
  }
  *(_OWORD *)a3 = *(_OWORD *)__p;
  *(void *)(a3 + 16) = v35;
  *(void *)&long long v36 = *MEMORY[0x263F8C2C8];
  *(void *)((char *)&v36 + *(void *)(v36 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  *((void *)&v36 + 1) = MEMORY[0x263F8C318] + 16;
  if (SHIBYTE(v41) < 0) {
    operator delete(v40[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x237DF7120](&v43);
}

void sub_235DCF198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    std::ostringstream::~ostringstream((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

const void **ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C340] + 64;
  *(void *)(a1 + 112) = MEMORY[0x263F8C340] + 64;
  uint64_t v3 = *(void *)(MEMORY[0x263F8C2C8] + 16);
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2C8] + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  long long v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 8));
  uint64_t v6 = MEMORY[0x263F8C340] + 24;
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)a1 = v6;
  *(void *)(a1 + 112) = v2;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 8) = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_235DCF38C(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x237DF7120](v1);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)a1 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 8) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x237DF7120](a1 + 112);
  return a1;
}

void *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  v13[0] = 0xAAAAAAAAAAAAAAAALL;
  v13[1] = 0xAAAAAAAAAAAAAAAALL;
  MEMORY[0x237DF6F60](v13, a1);
  if (LOBYTE(v13[0]))
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      uint64_t v10 = std::locale::use_facet(&v14, MEMORY[0x263F8C108]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x237DF6F70](v13);
  return a1;
}

void sub_235DCF608(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  MEMORY[0x237DF6F70](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x235DCF5E8);
}

void sub_235DCF65C(_Unwind_Exception *a1)
{
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      size_t v12 = 0;
    }
    else {
      size_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if ((uint64_t)v12 >= 1)
    {
      memset(__b, 170, sizeof(__b));
      if (v12 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v12 >= 0x17)
      {
        uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17) {
          uint64_t v14 = v12 | 7;
        }
        uint64_t v15 = v14 + 1;
        uint64_t v13 = (void **)operator new(v14 + 1);
        __b[1] = (void *)v12;
        __b[2] = (void *)(v15 | 0x8000000000000000);
        __b[0] = v13;
      }
      else
      {
        HIBYTE(__b[2]) = v12;
        uint64_t v13 = __b;
      }
      memset(v13, __c, v12);
      *((unsigned char *)v13 + v12) = 0;
      if (SHIBYTE(__b[2]) >= 0) {
        int v16 = __b;
      }
      else {
        int v16 = (void **)__b[0];
      }
      uint64_t v17 = (*(uint64_t (**)(uint64_t, void **, size_t))(*(void *)v6 + 96))(v6, v16, v12);
      uint64_t v18 = v17;
      if (SHIBYTE(__b[2]) < 0)
      {
        operator delete(__b[0]);
        if (v18 != v12) {
          return 0;
        }
      }
      else if (v17 != v12)
      {
        return 0;
      }
    }
    uint64_t v19 = a4 - a3;
    if (v19 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v19) == v19)
    {
      *(void *)(a5 + 24) = 0;
      return v6;
    }
    return 0;
  }
  return v6;
}

void sub_235DCF850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

const char *abm::asString(unsigned int a1)
{
  if (a1 > 9) {
    return "Unknown";
  }
  else {
    return off_264C7D5C8[a1];
  }
}

{
  if (a1 > 3) {
    return "Unknown";
  }
  else {
    return off_264C7D618[a1];
  }
}

const char *abm::asString(int a1)
{
  if ((a1 - 1) > 2) {
    return "Unknown";
  }
  else {
    return off_264C7D638[a1 - 1];
  }
}

{
  if ((a1 - 1) > 2) {
    return "Unknown";
  }
  else {
    return off_264C7D650[a1 - 1];
  }
}

double ARICellularCertCommandDriver::create@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4 = operator new(0x88uLL);
  uint64_t v5 = (uint64_t)v4;
  uint64_t v6 = a1[1];
  uint64_t v9 = *a1;
  uint64_t v10 = (std::__shared_weak_count *)v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  ARICellularCertCommandDriver::ARICellularCertCommandDriver(v4, &v9);
  *(void *)&long long v11 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<ARICellularCertCommandDriver>::shared_ptr[abi:ne180100]<ARICellularCertCommandDriver,std::shared_ptr<ARICellularCertCommandDriver> ctu::SharedSynchronizable<CellularCertCommandDriver>::make_shared_ptr<ARICellularCertCommandDriver>(ARICellularCertCommandDriver*)::{lambda(ARICellularCertCommandDriver*)#1},void>(&v11, v5);
  ctu::Loggable<CellularCertCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(v11);
  uint64_t v7 = v10;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  (*(void (**)(void))(*(void *)v11 + 72))(v11);
  double result = *(double *)&v11;
  *a2 = v11;
  return result;
}

void sub_235DCF9FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_235DCFA10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_235DCFA2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_235DCFA40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

uint64_t std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100](uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void *ARICellularCertCommandDriver::ARICellularCertCommandDriver(void *a1, uint64_t *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v8 = *a2;
  uint64_t v9 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CellularCertCommandDriver::CellularCertCommandDriver(a1, &v8);
  uint64_t v4 = v9;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  *a1 = &unk_26E93B060;
  uint64_t v5 = a1[11];
  object = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  ice::Client::create();
  if (object) {
    dispatch_release(object);
  }
  a1[15] = 0;
  a1[16] = 0;
  return a1;
}

void sub_235DCFBC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  CellularCertCommandDriver::~CellularCertCommandDriver(v10);
  _Unwind_Resume(a1);
}

void sub_235DCFBE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *CellularCertCommandDriver::CellularCertCommandDriver(void *a1, void *a2)
{
  *a1 = &unk_26E93B168;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v7, "com.apple.telephony.abm", "cellularcert.drv");
  uint64_t v4 = dispatch_queue_create("cellularcert.drv", 0);
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = v4;
  if (v4)
  {
    uint64_t v5 = v4;
    dispatch_retain(v4);
    a1[12] = 0;
    dispatch_release(v5);
  }
  else
  {
    a1[12] = 0;
  }
  ctu::Loggable<CellularCertCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>&>(a1, (uint64_t)v7, a2);
  *a1 = &unk_26E93B1C8;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v7);
  *a1 = &unk_26E93B168;
  return a1;
}

void sub_235DCFCE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ctu::SharedSynchronizable<CellularCertCommandDriver>::~SharedSynchronizable(v9);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a9);
  _Unwind_Resume(a1);
}

void CellularCertCommandDriver::~CellularCertCommandDriver(CellularCertCommandDriver *this)
{
  *(void *)this = &unk_26E93B208;
  MEMORY[0x237DF4D50]((char *)this + 8);
  uint64_t v2 = *((void *)this + 12);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *((void *)this + 11);
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void ARICellularCertCommandDriver::~ARICellularCertCommandDriver(ARICellularCertCommandDriver *this)
{
  *(void *)this = &unk_26E93B060;
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl(&dword_235DB9000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v9, 2u);
  }
  uint64_t v3 = *((void *)this + 16);
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (const void *)*((void *)this + 15);
  if (v4) {
    _Block_release(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  *(void *)this = &unk_26E93B208;
  MEMORY[0x237DF4D50]((char *)this + 8);
  uint64_t v6 = *((void *)this + 12);
  if (v6) {
    dispatch_release(v6);
  }
  uint64_t v7 = *((void *)this + 11);
  if (v7) {
    dispatch_release(v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
}

{
  void *v1;
  uint64_t vars8;

  ARICellularCertCommandDriver::~ARICellularCertCommandDriver(this);

  operator delete(v1);
}

void ARICellularCertCommandDriver::init(ARICellularCertCommandDriver *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v2 || (uint64_t v3 = *((void *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  uint64_t v6 = operator new(8uLL);
  void *v6 = this;
  uint64_t v7 = *((void *)this + 11);
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v8 = operator new(0x18uLL);
  *uint64_t v8 = v6;
  v8[1] = v3;
  v8[2] = v5;
  dispatch_async_f(v7, v8, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<CellularCertCommandDriver>::execute_wrapped<ARICellularCertCommandDriver::init(void)::$_0>(ARICellularCertCommandDriver::init(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ARICellularCertCommandDriver::init(void)::$_0,dispatch_queue_s *::default_delete<ARICellularCertCommandDriver::init(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void ARICellularCertCommandDriver::ackCellularCertStatusResult(ARICellularCertCommandDriver *this, char a2)
{
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v3 || (uint64_t v5 = *((void *)this + 9), (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  uint64_t v8 = operator new(0x10uLL);
  *(void *)uint64_t v8 = this;
  v8[8] = a2;
  uint64_t v9 = *((void *)this + 11);
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v10 = operator new(0x18uLL);
  *uint64_t v10 = v8;
  v10[1] = v5;
  v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<CellularCertCommandDriver>::execute_wrapped<ARICellularCertCommandDriver::ackCellularCertStatusResult(BOOL)::$_0>(ARICellularCertCommandDriver::ackCellularCertStatusResult(BOOL)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ARICellularCertCommandDriver::ackCellularCertStatusResult(BOOL)::$_0,dispatch_queue_s *::default_delete<ARICellularCertCommandDriver::ackCellularCertStatusResult(BOOL)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void ARICellularCertCommandDriver::ackCellularCertModeResult(ARICellularCertCommandDriver *this, char a2)
{
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v3 || (uint64_t v5 = *((void *)this + 9), (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  uint64_t v8 = operator new(0x10uLL);
  *(void *)uint64_t v8 = this;
  v8[8] = a2;
  uint64_t v9 = *((void *)this + 11);
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v10 = operator new(0x18uLL);
  *uint64_t v10 = v8;
  v10[1] = v5;
  v10[2] = v7;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<CellularCertCommandDriver>::execute_wrapped<ARICellularCertCommandDriver::ackCellularCertModeResult(BOOL)::$_0>(ARICellularCertCommandDriver::ackCellularCertModeResult(BOOL)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ARICellularCertCommandDriver::ackCellularCertModeResult(BOOL)::$_0,dispatch_queue_s *::default_delete<ARICellularCertCommandDriver::ackCellularCertModeResult(BOOL)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void ARICellularCertCommandDriver::registerCellularCertEventHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a1;
  *(_OWORD *)object = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI25CellularCertCommandDriverE20execute_wrapped_syncIZN28ARICellularCertCommandDriver32registerCellularCertEventHandlerEON8dispatch8callbackIU13block_pointerFvPKcN3xpc4dictEEEEE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSG__block_invoke;
  block[3] = &__block_descriptor_tmp_46;
  block[4] = a1 + 72;
  block[5] = &v5;
  uint64_t v3 = a1 + 88;
  uint64_t v2 = *(NSObject **)(a1 + 88);
  if (*(void *)(v3 + 8))
  {
    dispatch_async_and_wait(v2, block);
    uint64_t v4 = object[1];
    if (!object[1]) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  dispatch_sync(v2, block);
  uint64_t v4 = object[1];
  if (object[1]) {
LABEL_3:
  }
    dispatch_release(v4);
LABEL_4:
  if (object[0]) {
    _Block_release(object[0]);
  }
}

uint64_t ctu::Loggable<CellularCertCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x270F97428](a1 + 8);
}

void ctu::Loggable<CellularCertCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 16;
  strcpy(a1, "cellularcert.drv");
}

uint64_t ctu::Loggable<CellularCertCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x270F978E0](a1 + 8);
}

void *ctu::Loggable<CellularCertCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>&>(void *a1, uint64_t a2, void *a3)
{
  *a1 = &unk_26E93B208;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v8);
  a1[1] = &unk_26E93B248;
  a1[7] = *a3;
  uint64_t v5 = a3[1];
  a1[8] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v7);
  return a1;
}

void sub_235DD039C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void *ctu::SharedSynchronizable<CellularCertCommandDriver>::~SharedSynchronizable(void *a1)
{
  uint64_t v2 = a1[3];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[2];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void *ctu::SharedLoggable<CellularCertCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_26E93B208;
  MEMORY[0x237DF4D50](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void ctu::SharedLoggable<CellularCertCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_26E93B208;
  MEMORY[0x237DF4D50](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void *ctu::Loggable<CellularCertCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_26E93B208;
  MEMORY[0x237DF4D50](a1 + 1);
  return a1;
}

void ctu::Loggable<CellularCertCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_26E93B208;
  MEMORY[0x237DF4D50](a1 + 1);

  operator delete(a1);
}

void ctu::Loggable<CellularCertCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (*(void *)(a1 + 56))
  {
    if (!*(void *)(a1 + 80) || (uint64_t v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_235DD0698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_235DD06B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<ARICellularCertCommandDriver>::shared_ptr[abi:ne180100]<ARICellularCertCommandDriver,std::shared_ptr<ARICellularCertCommandDriver> ctu::SharedSynchronizable<CellularCertCommandDriver>::make_shared_ptr<ARICellularCertCommandDriver>(ARICellularCertCommandDriver*)::{lambda(ARICellularCertCommandDriver*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93B288;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 72) = a2;
      *(void *)(a2 + 80) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 72) = a2;
  *(void *)(a2 + 80) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_235DD07E0(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<ARICellularCertCommandDriver> ctu::SharedSynchronizable<CellularCertCommandDriver>::make_shared_ptr<ARICellularCertCommandDriver>(ARICellularCertCommandDriver*)::{lambda(ARICellularCertCommandDriver*)#1}::operator() const(ARICellularCertCommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_235DD0808(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<ARICellularCertCommandDriver *,std::shared_ptr<ARICellularCertCommandDriver> ctu::SharedSynchronizable<CellularCertCommandDriver>::make_shared_ptr<ARICellularCertCommandDriver>(ARICellularCertCommandDriver*)::{lambda(ARICellularCertCommandDriver *)#1},std::allocator<ARICellularCertCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<ARICellularCertCommandDriver *,std::shared_ptr<ARICellularCertCommandDriver> ctu::SharedSynchronizable<CellularCertCommandDriver>::make_shared_ptr<ARICellularCertCommandDriver>(ARICellularCertCommandDriver*)::{lambda(ARICellularCertCommandDriver *)#1},std::allocator<ARICellularCertCommandDriver>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<ARICellularCertCommandDriver *,std::shared_ptr<ARICellularCertCommandDriver> ctu::SharedSynchronizable<CellularCertCommandDriver>::make_shared_ptr<ARICellularCertCommandDriver>(ARICellularCertCommandDriver*)::{lambda(ARICellularCertCommandDriver *)#1},std::allocator<ARICellularCertCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI25CellularCertCommandDriverE15make_shared_ptrI28ARICellularCertCommand"
                     "DriverEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI25CellularCertCommandDriverE15make_shared_ptrI28ARICellular"
                                "CertCommandDriverEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI25CellularCertCommandDriverE15make_shared_ptrI28ARICellularCertCommandDriverEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI25CellularCertCommandDriverE15make_shared_ptrI28ARICellularCertCommandDriverEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<ARICellularCertCommandDriver> ctu::SharedSynchronizable<CellularCertCommandDriver>::make_shared_ptr<ARICellularCertCommandDriver>(ARICellularCertCommandDriver*)::{lambda(ARICellularCertCommandDriver*)#1}::operator() const(ARICellularCertCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__throw_bad_weak_ptr[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x263F8C2D8] + 16;
  __cxa_throw(exception, MEMORY[0x263F8C198], MEMORY[0x263F8C0A0]);
}

void dispatch::async<void ctu::SharedSynchronizable<CellularCertCommandDriver>::execute_wrapped<ARICellularCertCommandDriver::init(void)::$_0>(ARICellularCertCommandDriver::init(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ARICellularCertCommandDriver::init(void)::$_0,dispatch_queue_s *::default_delete<ARICellularCertCommandDriver::init(void)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v2 = *(uint64_t **)a1;
  uint64_t v3 = **(void **)a1;
  uint64_t v4 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_235DB9000, v4, OS_LOG_TYPE_DEFAULT, "#I Initializing", buf, 2u);
  }
  uint64_t v5 = *(void *)(v3 + 104);
  *(void *)buf = MEMORY[0x263EF8330];
  uint64_t v19 = 0x40000000;
  uint64_t v20 = ___ZZN28ARICellularCertCommandDriver4initEvENK3__0clEv_block_invoke;
  unint64_t v21 = &__block_descriptor_tmp;
  uint64_t v22 = v3;
  v17[0] = (uint64_t)buf;
  ice::Client::setEventHandler<void({block_pointer})(void)>(v5, 0, v17);
  uint64_t v6 = *(void *)(v3 + 104);
  v17[0] = MEMORY[0x263EF8330];
  v17[1] = 0x40000000;
  v17[2] = (uint64_t)___ZZN28ARICellularCertCommandDriver4initEvENK3__0clEv_block_invoke_22;
  v17[3] = (uint64_t)&__block_descriptor_tmp_23;
  v17[4] = v3;
  v16[0] = (uint64_t)v17;
  ice::Client::setEventHandler<void({block_pointer})(void)>(v6, 1, v16);
  uint64_t v7 = *(void *)(v3 + 104);
  v16[0] = MEMORY[0x263EF8330];
  v16[1] = 0x40000000;
  v16[2] = (uint64_t)___ZZN28ARICellularCertCommandDriver4initEvENK3__0clEv_block_invoke_24;
  v16[3] = (uint64_t)&__block_descriptor_tmp_26;
  v16[4] = v3;
  v15[0] = (uint64_t)v16;
  ice::Client::setEventHandler<void({block_pointer})(dispatch::group_session)>(v7, 2, v15);
  uint64_t v8 = *(void *)(v3 + 104);
  v15[0] = MEMORY[0x263EF8330];
  v15[1] = 0x40000000;
  v15[2] = (uint64_t)___ZZN28ARICellularCertCommandDriver4initEvENK3__0clEv_block_invoke_27;
  v15[3] = (uint64_t)&__block_descriptor_tmp_28;
  v15[4] = v3;
  v14[0] = (uint64_t)v15;
  ice::Client::setEventHandler<void({block_pointer})(void)>(v8, 3, v14);
  uint64_t v9 = *(void *)(v3 + 104);
  v14[0] = MEMORY[0x263EF8330];
  v14[1] = 0x40000000;
  v14[2] = (uint64_t)___ZZN28ARICellularCertCommandDriver4initEvENK3__0clEv_block_invoke_29;
  v14[3] = (uint64_t)&__block_descriptor_tmp_33;
  v14[4] = v3;
  v12[0] = (uint64_t)v14;
  ice::Client::regIndication<void({block_pointer})(unsigned char *,unsigned int)>(v9, 227278848, v12);
  uint64_t v10 = *(void *)(v3 + 104);
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 0x40000000;
  v12[2] = (uint64_t)___ZZN28ARICellularCertCommandDriver4initEvENK3__0clEv_block_invoke_34;
  v12[3] = (uint64_t)&__block_descriptor_tmp_35;
  v12[4] = v3;
  uint64_t v13 = v12;
  ice::Client::regIndication<void({block_pointer})(unsigned char *,unsigned int)>(v10, 227311616, (uint64_t *)&v13);
  ice::Client::start(*(ice::Client **)(v3 + 104));
  operator delete(v2);
  long long v11 = (std::__shared_weak_count *)*((void *)a1 + 2);
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  operator delete(a1);
}

void sub_235DD0C34(_Unwind_Exception *a1)
{
  operator delete(v2);
  uint64_t v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ice::Client::setEventHandler<void({block_pointer})(void)>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN3ice6detail17wrapEventCallbackIvEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi0EEEU13block_pointerFT_vE_block_invoke;
  aBlock[3] = &unk_264C7D730;
  aBlock[4] = v3;
  uint64_t v4 = _Block_copy(aBlock);
  uint64_t v5 = v4;
  if (v4) {
    uint64_t v6 = _Block_copy(v4);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = v6;
  ice::Client::regEventHandlerInternal();
  if (v7) {
    _Block_release(v7);
  }
  if (v5) {
    _Block_release(v5);
  }
}

void sub_235DD0D70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v9) {
    _Block_release(v9);
  }
  _Unwind_Resume(exception_object);
}

void ___ZZN28ARICellularCertCommandDriver4initEvENK3__0clEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_debug_impl(&dword_235DB9000, v1, OS_LOG_TYPE_DEBUG, "#D ARI Started event received.", v2, 2u);
  }
}

void ___ZZN28ARICellularCertCommandDriver4initEvENK3__0clEv_block_invoke_22(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_debug_impl(&dword_235DB9000, v1, OS_LOG_TYPE_DEBUG, "#D ARI Stopped event received.", v2, 2u);
  }
}

void ice::Client::setEventHandler<void({block_pointer})(dispatch::group_session)>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN3ice6detail17wrapEventCallbackIvEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi1EEEU13block_pointerFT_NS2_13group_sessionEE_block_invoke;
  aBlock[3] = &unk_264C7D758;
  aBlock[4] = v3;
  uint64_t v4 = _Block_copy(aBlock);
  uint64_t v5 = v4;
  if (v4) {
    uint64_t v6 = _Block_copy(v4);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = v6;
  ice::Client::regEventHandlerInternal();
  if (v7) {
    _Block_release(v7);
  }
  if (v5) {
    _Block_release(v5);
  }
}

void sub_235DD0F60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v9) {
    _Block_release(v9);
  }
  _Unwind_Resume(exception_object);
}

void ___ZZN28ARICellularCertCommandDriver4initEvENK3__0clEv_block_invoke_24(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl(&dword_235DB9000, v1, OS_LOG_TYPE_DEFAULT, "#I ARI LPM Enter event received", v2, 2u);
  }
}

void ___ZZN28ARICellularCertCommandDriver4initEvENK3__0clEv_block_invoke_27(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl(&dword_235DB9000, v1, OS_LOG_TYPE_DEFAULT, "#I ARI LPM Exit event received", v2, 2u);
  }
}

void ice::Client::regIndication<void({block_pointer})(unsigned char *,unsigned int)>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke;
  aBlock[3] = &unk_264C7D780;
  aBlock[4] = v3;
  uint64_t v4 = _Block_copy(aBlock);
  ice::Client::regIndicationInternal();
  if (v4) {
    _Block_release(v4);
  }
}

void sub_235DD10FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZZN28ARICellularCertCommandDriver4initEvENK3__0clEv_block_invoke_29(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void **)(a1 + 32);
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v14[3] = v3;
  long long v15 = v3;
  v14[1] = v3;
  v14[2] = v3;
  v14[0] = v3;
  AriSdk::ARI_IBICallPsLoopbackTestModeStatusIndCb_SDK::ARI_IBICallPsLoopbackTestModeStatusIndCb_SDK((AriSdk::ARI_IBICallPsLoopbackTestModeStatusIndCb_SDK *)v14, a2);
  if (!AriSdk::ARI_IBICallPsLoopbackTestModeStatusIndCb_SDK::unpack((AriSdk::ARI_IBICallPsLoopbackTestModeStatusIndCb_SDK *)v14))
  {
    int v5 = **((_DWORD **)&v15 + 1);
    uint64_t v6 = v2[5];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = "activated";
      if (!v5) {
        uint64_t v7 = "de-activated";
      }
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v7;
      _os_log_impl(&dword_235DB9000, v6, OS_LOG_TYPE_DEFAULT, "#I Cellular test %s", (uint8_t *)&buf, 0xCu);
    }
    if (v2[15] && v2[16])
    {
      uint64_t v8 = &abm::kCommandCellularCertBootstrap;
      if (!v5) {
        uint64_t v8 = &abm::kCommandCellularCertShutdown;
      }
      uint64_t v9 = *v8;
      xpc_object_t v10 = xpc_null_create();
      long long v11 = (const void *)v2[15];
      if (v11) {
        size_t v12 = _Block_copy(v11);
      }
      else {
        size_t v12 = 0;
      }
      uint64_t v13 = v2[16];
      *(void *)&long long buf = MEMORY[0x263EF8330];
      *((void *)&buf + 1) = 1174405120;
      uint64_t v17 = ___ZNK8dispatch8callbackIU13block_pointerFvPKcN3xpc4dictEEEclIJS2_S4_EEEvDpT__block_invoke;
      uint64_t v18 = &__block_descriptor_tmp_41;
      if (v12)
      {
        aBlocunint64_t k = _Block_copy(v12);
        uint64_t v20 = v9;
        xpc_object_t object = v10;
        if (v10)
        {
LABEL_16:
          xpc_retain(v10);
LABEL_19:
          dispatch_async(v13, &buf);
          xpc_release(object);
          xpc_object_t object = 0;
          if (aBlock) {
            _Block_release(aBlock);
          }
          if (v12) {
            _Block_release(v12);
          }
          xpc_release(v10);
          return MEMORY[0x237DF6B70](v14);
        }
      }
      else
      {
        aBlocunint64_t k = 0;
        uint64_t v20 = v9;
        xpc_object_t object = v10;
        if (v10) {
          goto LABEL_16;
        }
      }
      xpc_object_t object = xpc_null_create();
      goto LABEL_19;
    }
  }
  return MEMORY[0x237DF6B70](v14);
}

void sub_235DD1318(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZZN28ARICellularCertCommandDriver4initEvENK3__0clEv_block_invoke_34(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  unint64_t v50 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v48 = v3;
  long long v49 = v3;
  long long v46 = v3;
  long long v47 = v3;
  v44[3] = v3;
  long long v45 = v3;
  v44[1] = v3;
  v44[2] = v3;
  v44[0] = v3;
  AriSdk::ARI_IBICallPsLoopbackTestModeConfigIndCb_SDK::ARI_IBICallPsLoopbackTestModeConfigIndCb_SDK((AriSdk::ARI_IBICallPsLoopbackTestModeConfigIndCb_SDK *)v44, a2);
  if (!AriSdk::ARI_IBICallPsLoopbackTestModeConfigIndCb_SDK::unpack((AriSdk::ARI_IBICallPsLoopbackTestModeConfigIndCb_SDK *)v44))
  {
    xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
    if (v4 || (xpc_object_t v4 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x237DF76E0](v4) == MEMORY[0x263EF8708])
      {
        xpc_retain(v4);
        xpc_object_t v5 = v4;
      }
      else
      {
        xpc_object_t v5 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v5 = xpc_null_create();
      xpc_object_t v4 = 0;
    }
    xpc_release(v4);
    int v6 = **((_DWORD **)&v45 + 1);
    if (**((_DWORD **)&v45 + 1))
    {
      if (v6 == 1)
      {
        xpc_object_t v7 = xpc_string_create(abm::kCellularCertConfigure_ModeB);
        if (!v7) {
          xpc_object_t v7 = xpc_null_create();
        }
      }
      else
      {
        if (v6 != 2) {
          goto LABEL_20;
        }
        xpc_object_t v7 = xpc_string_create(abm::kCellularCertConfigure_ModeOpen);
        if (!v7) {
          xpc_object_t v7 = xpc_null_create();
        }
      }
    }
    else
    {
      xpc_object_t v7 = xpc_string_create(abm::kCellularCertConfigure_ModeA);
      if (!v7) {
        xpc_object_t v7 = xpc_null_create();
      }
    }
    xpc_dictionary_set_value(v5, abm::kKeyCellularCertConfigure_Mode, v7);
    xpc_object_t v8 = xpc_null_create();
    xpc_release(v7);
    xpc_release(v8);
LABEL_20:
    if (*(unsigned char *)v46)
    {
      xpc_object_t v9 = xpc_int64_create(*(unsigned __int8 *)v46);
      if (!v9) {
        xpc_object_t v9 = xpc_null_create();
      }
      xpc_dictionary_set_value(v5, abm::kKeyCellularCertConfigure_DelayTimer, v9);
      xpc_object_t v10 = xpc_null_create();
      xpc_release(v9);
      xpc_release(v10);
    }
    uint64_t v11 = **((unsigned char **)&v46 + 1);
    xpc_object_t v12 = xpc_array_create(0, 0);
    uint64_t v13 = MEMORY[0x263EF86D8];
    uint64_t v42 = v2;
    long long v43 = v5;
    if (v12 || (xpc_object_t v12 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x237DF76E0](v12) == v13)
      {
        xpc_retain(v12);
        xpc_object_t v14 = v12;
      }
      else
      {
        xpc_object_t v14 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v14 = xpc_null_create();
      xpc_object_t v12 = 0;
    }
    xpc_release(v12);
    if (v11)
    {
      uint64_t v15 = 0;
      uint64_t v16 = 12 * v11;
      do
      {
        int64_t v17 = *(unsigned __int8 *)(v47 + v15);
        int64_t v18 = *(unsigned __int8 *)(v47 + v15 + 1);
        int64_t v19 = *(unsigned __int8 *)(v47 + v15 + 2);
        int64_t v20 = *(unsigned int *)(v47 + v15 + 4);
        int64_t v21 = *(unsigned __int16 *)(v47 + v15 + 8);
        xpc_object_t v22 = xpc_dictionary_create(0, 0, 0);
        if (v22 || (xpc_object_t v22 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x237DF76E0](v22) == MEMORY[0x263EF8708])
          {
            xpc_retain(v22);
            xpc_object_t v23 = v22;
          }
          else
          {
            xpc_object_t v23 = xpc_null_create();
          }
        }
        else
        {
          xpc_object_t v23 = xpc_null_create();
          xpc_object_t v22 = 0;
        }
        xpc_release(v22);
        xpc_object_t v24 = xpc_int64_create(v17);
        if (!v24) {
          xpc_object_t v24 = xpc_null_create();
        }
        xpc_dictionary_set_value(v23, abm::kKeyCellularCertConfigure_DRB_ID, v24);
        xpc_object_t v25 = xpc_null_create();
        xpc_release(v24);
        xpc_release(v25);
        xpc_object_t v26 = xpc_int64_create(v18);
        if (!v26) {
          xpc_object_t v26 = xpc_null_create();
        }
        xpc_dictionary_set_value(v23, abm::kKeyCellularCertConfigure_RB_ENTRY_INDEX, v26);
        xpc_object_t v27 = xpc_null_create();
        xpc_release(v26);
        xpc_release(v27);
        xpc_object_t v28 = xpc_int64_create(v19);
        if (!v28) {
          xpc_object_t v28 = xpc_null_create();
        }
        xpc_dictionary_set_value(v23, abm::kKeyCellularCertConfigure_VIRTUAL_DRB, v28);
        xpc_object_t v29 = xpc_null_create();
        xpc_release(v28);
        xpc_release(v29);
        xpc_object_t v30 = xpc_int64_create(v20);
        if (!v30) {
          xpc_object_t v30 = xpc_null_create();
        }
        xpc_dictionary_set_value(v23, abm::kKeyCellularCertConfigure_UL_SDU_SCALING, v30);
        xpc_object_t v31 = xpc_null_create();
        xpc_release(v30);
        xpc_release(v31);
        xpc_object_t v32 = xpc_int64_create(v21);
        if (!v32) {
          xpc_object_t v32 = xpc_null_create();
        }
        xpc_dictionary_set_value(v23, abm::kKeyCellularCertConfigure_UL_SDU_SIZE, v32);
        xpc_object_t v33 = xpc_null_create();
        xpc_release(v32);
        xpc_release(v33);
        xpc_array_append_value(v14, v23);
        xpc_release(v23);
        v15 += 12;
      }
      while (v16 != v15);
    }
    if (MEMORY[0x237DF76E0](v14) == MEMORY[0x263EF86D8] && xpc_array_get_count(v14))
    {
      if (v14)
      {
        xpc_retain(v14);
        xpc_object_t v34 = v14;
      }
      else
      {
        xpc_object_t v34 = xpc_null_create();
      }
      xpc_dictionary_set_value(v43, abm::kKeyCellularCertConfigure_ConfigList, v34);
      xpc_object_t v35 = xpc_null_create();
      xpc_release(v34);
      xpc_release(v35);
    }
    if (!*(void *)(v42 + 120) || !*(void *)(v42 + 128)) {
      goto LABEL_72;
    }
    long long v36 = abm::kCommandCellularCertConfigure;
    if (v43)
    {
      xpc_retain(v43);
      xpc_object_t v37 = v43;
      long long v38 = *(const void **)(v42 + 120);
      if (v38)
      {
LABEL_59:
        long long v39 = _Block_copy(v38);
        goto LABEL_62;
      }
    }
    else
    {
      xpc_object_t v37 = xpc_null_create();
      long long v38 = *(const void **)(v42 + 120);
      if (v38) {
        goto LABEL_59;
      }
    }
    long long v39 = 0;
LABEL_62:
    uint64_t v40 = *(NSObject **)(v42 + 128);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvPKcN3xpc4dictEEEclIJS2_S4_EEEvDpT__block_invoke;
    block[3] = &__block_descriptor_tmp_41;
    if (v39)
    {
      unint64_t v52 = _Block_copy(v39);
      BOOL v53 = v36;
      xpc_object_t v54 = v37;
      if (v37)
      {
LABEL_64:
        xpc_retain(v37);
LABEL_67:
        dispatch_async(v40, block);
        xpc_release(v54);
        xpc_object_t v54 = 0;
        if (v52) {
          _Block_release(v52);
        }
        if (v39) {
          _Block_release(v39);
        }
        xpc_release(v37);
LABEL_72:
        xpc_release(v14);
        xpc_release(v43);
        return MEMORY[0x237DF6B40](v44);
      }
    }
    else
    {
      unint64_t v52 = 0;
      BOOL v53 = v36;
      xpc_object_t v54 = v37;
      if (v37) {
        goto LABEL_64;
      }
    }
    xpc_object_t v54 = xpc_null_create();
    goto LABEL_67;
  }
  return MEMORY[0x237DF6B40](v44);
}

void sub_235DD1A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, char a11)
{
  xpc_release(v11);
  xpc_release(object);
  MEMORY[0x237DF6B40](&a11);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3ice6detail17wrapEventCallbackIvEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi0EEEU13block_pointerFT_vE_block_invoke(uint64_t a1)
{
  return 0;
}

uint64_t ___ZN3ice6detail17wrapEventCallbackIvEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi1EEEU13block_pointerFT_NS2_13group_sessionEE_block_invoke(uint64_t a1, dispatch_object_t object)
{
  if (object)
  {
    dispatch_retain(object);
    dispatch_retain(object);
    dispatch_group_enter(object);
    dispatch_release(object);
    uint64_t v4 = *(void *)(a1 + 32);
    dispatch_retain(object);
    dispatch_group_enter(object);
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 32);
  }
  dispatch_group_t group = object;
  (*(void (**)(uint64_t, dispatch_group_t *))(v4 + 16))(v4, &group);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  if (object)
  {
    dispatch_group_leave(object);
    dispatch_release(object);
  }
  return 0;
}

void sub_235DD1C5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_group_t group)
{
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  if (v10)
  {
    dispatch_group_leave(v10);
    dispatch_release(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke(uint64_t a1)
{
  return 0;
}

void ___ZNK8dispatch8callbackIU13block_pointerFvPKcN3xpc4dictEEEclIJS2_S4_EEEvDpT__block_invoke(void *a1)
{
  uint64_t v1 = a1[4];
  uint64_t v2 = a1[5];
  long long v3 = (void *)a1[6];
  xpc_object_t object = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v1 + 16))(v1, v2, &object);
  xpc_release(object);
}

void sub_235DD1D24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

xpc_object_t __copy_helper_block_e8_32c56_ZTSN8dispatch5blockIU13block_pointerFvPKcN3xpc4dictEEEE48c15_ZTSN3xpc4dictE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a2 + 32);
  if (v4) {
    uint64_t v4 = _Block_copy(v4);
  }
  *(void *)(a1 + 32) = v4;
  xpc_object_t v5 = *(void **)(a2 + 48);
  *(void *)(a1 + 48) = v5;
  if (v5) {
    return xpc_retain(v5);
  }
  xpc_object_t result = xpc_null_create();
  *(void *)(a1 + 48) = result;
  return result;
}

void __destroy_helper_block_e8_32c56_ZTSN8dispatch5blockIU13block_pointerFvPKcN3xpc4dictEEEE48c15_ZTSN3xpc4dictE(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 48));
  *(void *)(a1 + 48) = 0;
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2) {
    _Block_release(v2);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<CellularCertCommandDriver>::execute_wrapped<ARICellularCertCommandDriver::ackCellularCertStatusResult(BOOL)::$_0>(ARICellularCertCommandDriver::ackCellularCertStatusResult(BOOL)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ARICellularCertCommandDriver::ackCellularCertStatusResult(BOOL)::$_0,dispatch_queue_s *::default_delete<ARICellularCertCommandDriver::ackCellularCertStatusResult(BOOL)::$_0>>)::{lambda(void *)#1}::__invoke(unsigned __int8 **a1)
{
  uint64_t v2 = *a1;
  long long v3 = *(void **)*a1;
  uint64_t v4 = v3[5];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v24[0]) = 0;
    _os_log_debug_impl(&dword_235DB9000, v4, OS_LOG_TYPE_DEBUG, "#D Acknowledging cellular certification status result", (uint8_t *)v24, 2u);
  }
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v24[3] = v5;
  *(_OWORD *)std::string __p = v5;
  v24[1] = v5;
  v24[2] = v5;
  v24[0] = v5;
  AriSdk::ARI_IBICallPsLoopbackTestModeStatusRsp_SDK::ARI_IBICallPsLoopbackTestModeStatusRsp_SDK((AriSdk::ARI_IBICallPsLoopbackTestModeStatusRsp_SDK *)v24);
  int v6 = v2[8];
  xpc_object_t v7 = operator new(4uLL);
  _DWORD *v7 = v6 == 0;
  xpc_object_t v8 = __p[1];
  __p[1] = v7;
  if (v8) {
    operator delete(v8);
  }
  xpc_object_t v9 = (std::__shared_weak_count *)v3[10];
  if (!v9 || (xpc_object_t v10 = (std::__shared_weak_count_vtbl *)v3[9], (v11 = std::__shared_weak_count::lock(v9)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v12 = v11;
  p_shared_weak_owners = &v11->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v12);
  }
  uint64_t v14 = v3[13];
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v15 = (std::__shared_weak_count *)operator new(0x30uLL);
  v15->__shared_owners_ = 0;
  p_shared_owners = &v15->__shared_owners_;
  v15->__shared_weak_owners_ = 0;
  v15[1].__vftable = v10;
  v15->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93B338;
  v15[1].__shared_owners_ = (uint64_t)v12;
  v15[1].__shared_weak_owners_ = (uint64_t)v3;
  *(void *)&long long v27 = MEMORY[0x263EF8330];
  *((void *)&v27 + 1) = 1174405120;
  *(void *)&long long v28 = ___ZN3ice6detail12wrapCallbackIZZN28ARICellularCertCommandDriver27ackCellularCertStatusResultEbENK3__0clEvEUlPKhjE_vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  *((void *)&v28 + 1) = &__block_descriptor_tmp_42;
  unint64_t v29 = (unint64_t)&v15[1];
  xpc_object_t v30 = v15;
  atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlocunint64_t k = MEMORY[0x263EF8330];
  uint64_t v32 = 0x40000000;
  xpc_object_t v33 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke;
  xpc_object_t v34 = &unk_264C7D780;
  xpc_object_t v35 = &v27;
  int64_t v17 = _Block_copy(&aBlock);
  int64_t v18 = v30;
  if (!v30 || atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_12;
    }
LABEL_15:
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if (__p[0]) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_15;
  }
LABEL_12:
  if (__p[0]) {
    goto LABEL_17;
  }
LABEL_16:
  int64_t v19 = operator new(4uLL);
  _DWORD *v19 = 0;
  __p[0] = v19;
LABEL_17:
  unint64_t v29 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v27 = v20;
  long long v28 = v20;
  int64_t v21 = *(std::__shared_weak_count **)(v14 + 16);
  aBlocunint64_t k = *(void *)(v14 + 8);
  if (!v21)
  {
    uint64_t v32 = 0;
LABEL_30:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v32 = (uint64_t)std::__shared_weak_count::lock(v21);
  if (!v32) {
    goto LABEL_30;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  xpc_object_t v22 = (std::__shared_weak_count *)v32;
  if (v32 && !atomic_fetch_add((atomic_ullong *volatile)(v32 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  xpc_object_t v26 = v17;
  ice::SendMsgBaseProxy::callback();
  if (v26) {
    _Block_release(v26);
  }
  MEMORY[0x237DF50B0](&v27);
  std::__shared_weak_count::__release_weak(v12);
  MEMORY[0x237DF6B10](v24);
  operator delete(v2);
  xpc_object_t v23 = (std::__shared_weak_count *)a1[2];
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  operator delete(a1);
}

void sub_235DD21E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *aBlock,char a21)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  MEMORY[0x237DF50B0](&a21);
  std::__shared_weak_count::__release_weak(v23);
  MEMORY[0x237DF6B10](&a9);
  operator delete(v22);
  xpc_object_t v25 = (std::__shared_weak_count *)v21[2];
  if (v25)
  {
    if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  operator delete(v21);
  _Unwind_Resume(a1);
}

void ___ZN3ice6detail12wrapCallbackIZZN28ARICellularCertCommandDriver27ackCellularCertStatusResultEbENK3__0clEvEUlPKhjE_vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 8);
    if (v2)
    {
      long long v3 = std::__shared_weak_count::lock(v2);
      if (v3)
      {
        uint64_t v4 = v3;
        if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
    }
  }
}

uint64_t __copy_helper_block_e8_32c110_ZTSNSt3__110shared_ptrIZZN28ARICellularCertCommandDriver27ackCellularCertStatusResultEbENK3__0clEvEUlPKhjE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c110_ZTSNSt3__110shared_ptrIZZN28ARICellularCertCommandDriver27ackCellularCertStatusResultEbENK3__0clEvEUlPKhjE_EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<ARICellularCertCommandDriver::ackCellularCertStatusResult(BOOL)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<ARICellularCertCommandDriver::ackCellularCertStatusResult(BOOL)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93B338;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ARICellularCertCommandDriver::ackCellularCertStatusResult(BOOL)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<ARICellularCertCommandDriver::ackCellularCertStatusResult(BOOL)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93B338;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<ARICellularCertCommandDriver::ackCellularCertStatusResult(BOOL)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<ARICellularCertCommandDriver::ackCellularCertStatusResult(BOOL)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<CellularCertCommandDriver>::execute_wrapped<ARICellularCertCommandDriver::ackCellularCertModeResult(BOOL)::$_0>(ARICellularCertCommandDriver::ackCellularCertModeResult(BOOL)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ARICellularCertCommandDriver::ackCellularCertModeResult(BOOL)::$_0,dispatch_queue_s *::default_delete<ARICellularCertCommandDriver::ackCellularCertModeResult(BOOL)::$_0>>)::{lambda(void *)#1}::__invoke(unsigned __int8 **a1)
{
  uint64_t v2 = *a1;
  long long v3 = *(void **)*a1;
  uint64_t v4 = v3[5];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v24[0]) = 0;
    _os_log_debug_impl(&dword_235DB9000, v4, OS_LOG_TYPE_DEBUG, "#D Acknowledging cellular certification mode result", (uint8_t *)v24, 2u);
  }
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v26 = v5;
  long long v27 = v5;
  v24[3] = v5;
  *(_OWORD *)std::string __p = v5;
  v24[1] = v5;
  v24[2] = v5;
  v24[0] = v5;
  AriSdk::ARI_IBICallPsLoopbackTestModeConfigRsp_SDK::ARI_IBICallPsLoopbackTestModeConfigRsp_SDK((AriSdk::ARI_IBICallPsLoopbackTestModeConfigRsp_SDK *)v24);
  int v6 = v2[8];
  xpc_object_t v7 = operator new(4uLL);
  _DWORD *v7 = v6 == 0;
  xpc_object_t v8 = __p[1];
  __p[1] = v7;
  if (v8) {
    operator delete(v8);
  }
  xpc_object_t v9 = (std::__shared_weak_count *)v3[10];
  if (!v9 || (xpc_object_t v10 = (std::__shared_weak_count_vtbl *)v3[9], (v11 = std::__shared_weak_count::lock(v9)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v12 = v11;
  p_shared_weak_owners = &v11->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v12);
  }
  uint64_t v14 = v3[13];
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v15 = (std::__shared_weak_count *)operator new(0x30uLL);
  v15->__shared_owners_ = 0;
  p_shared_owners = &v15->__shared_owners_;
  v15->__shared_weak_owners_ = 0;
  v15[1].__vftable = v10;
  v15->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93B3B8;
  v15[1].__shared_owners_ = (uint64_t)v12;
  v15[1].__shared_weak_owners_ = (uint64_t)v3;
  *(void *)&long long v29 = MEMORY[0x263EF8330];
  *((void *)&v29 + 1) = 1174405120;
  *(void *)&long long v30 = ___ZN3ice6detail12wrapCallbackIZZN28ARICellularCertCommandDriver25ackCellularCertModeResultEbENK3__0clEvEUlPKhjE_vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  *((void *)&v30 + 1) = &__block_descriptor_tmp_44;
  unint64_t v31 = (unint64_t)&v15[1];
  uint64_t v32 = v15;
  atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlocunint64_t k = MEMORY[0x263EF8330];
  uint64_t v34 = 0x40000000;
  xpc_object_t v35 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke;
  long long v36 = &unk_264C7D780;
  xpc_object_t v37 = &v29;
  int64_t v17 = _Block_copy(&aBlock);
  int64_t v18 = v32;
  if (!v32 || atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_12;
    }
LABEL_15:
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if (__p[0]) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_15;
  }
LABEL_12:
  if (__p[0]) {
    goto LABEL_17;
  }
LABEL_16:
  int64_t v19 = operator new(4uLL);
  _DWORD *v19 = 0;
  __p[0] = v19;
LABEL_17:
  unint64_t v31 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v29 = v20;
  long long v30 = v20;
  int64_t v21 = *(std::__shared_weak_count **)(v14 + 16);
  aBlocunint64_t k = *(void *)(v14 + 8);
  if (!v21)
  {
    uint64_t v34 = 0;
LABEL_30:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v34 = (uint64_t)std::__shared_weak_count::lock(v21);
  if (!v34) {
    goto LABEL_30;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  xpc_object_t v22 = (std::__shared_weak_count *)v34;
  if (v34 && !atomic_fetch_add((atomic_ullong *volatile)(v34 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  long long v28 = v17;
  ice::SendMsgBaseProxy::callback();
  if (v28) {
    _Block_release(v28);
  }
  MEMORY[0x237DF50B0](&v29);
  std::__shared_weak_count::__release_weak(v12);
  MEMORY[0x237DF6AF0](v24);
  operator delete(v2);
  xpc_object_t v23 = (std::__shared_weak_count *)a1[2];
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  operator delete(a1);
}

void sub_235DD28A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *aBlock,char a25)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  MEMORY[0x237DF50B0](&a25);
  std::__shared_weak_count::__release_weak(v27);
  MEMORY[0x237DF6AF0](&a9);
  operator delete(v26);
  long long v29 = (std::__shared_weak_count *)v25[2];
  if (v29)
  {
    if (!atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  operator delete(v25);
  _Unwind_Resume(a1);
}

void ___ZN3ice6detail12wrapCallbackIZZN28ARICellularCertCommandDriver25ackCellularCertModeResultEbENK3__0clEvEUlPKhjE_vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 8);
    if (v2)
    {
      long long v3 = std::__shared_weak_count::lock(v2);
      if (v3)
      {
        uint64_t v4 = v3;
        if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
    }
  }
}

uint64_t __copy_helper_block_e8_32c108_ZTSNSt3__110shared_ptrIZZN28ARICellularCertCommandDriver25ackCellularCertModeResultEbENK3__0clEvEUlPKhjE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c108_ZTSNSt3__110shared_ptrIZZN28ARICellularCertCommandDriver25ackCellularCertModeResultEbENK3__0clEvEUlPKhjE_EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<ARICellularCertCommandDriver::ackCellularCertModeResult(BOOL)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<ARICellularCertCommandDriver::ackCellularCertModeResult(BOOL)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93B3B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ARICellularCertCommandDriver::ackCellularCertModeResult(BOOL)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<ARICellularCertCommandDriver::ackCellularCertModeResult(BOOL)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93B3B8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<ARICellularCertCommandDriver::ackCellularCertModeResult(BOOL)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<ARICellularCertCommandDriver::ackCellularCertModeResult(BOOL)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZNK3ctu20SharedSynchronizableI25CellularCertCommandDriverE20execute_wrapped_syncIZN28ARICellularCertCommandDriver32registerCellularCertEventHandlerEON8dispatch8callbackIU13block_pointerFvPKcN3xpc4dictEEEEE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSG__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 40);
  uint64_t v3 = *v1;
  uint64_t v2 = (void *)v1[1];
  if (v2) {
    uint64_t v2 = _Block_copy(v2);
  }
  uint64_t v4 = *(const void **)(v3 + 120);
  *(void *)(v3 + 120) = v2;
  if (v4) {
    _Block_release(v4);
  }
  long long v5 = v1[2];
  if (v5) {
    dispatch_retain(v5);
  }
  int v6 = *(NSObject **)(v3 + 128);
  *(void *)(v3 + 128) = v5;
  if (v6)
  {
    dispatch_release(v6);
  }
}

void awd::ARIAwdCommandDriver::sendEnableMetricSubmission(void *a1, uint64_t *a2, char a3, const void **a4)
{
  if (*a2)
  {
    long long v5 = (std::__shared_weak_count *)a1[10];
    if (!v5 || (uint64_t v9 = a1[9], (v10 = std::__shared_weak_count::lock(v5)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v11 = v10;
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v11);
    }
    uint64_t v12 = *a2;
    uint64_t v13 = a2[1];
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
    if (*a4)
    {
      uint64_t v14 = _Block_copy(*a4);
      atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v15 = (std::__shared_weak_count *)a1[10];
      if (!v15) {
LABEL_22:
      }
        std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    else
    {
      uint64_t v14 = 0;
      atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v15 = (std::__shared_weak_count *)a1[10];
      if (!v15) {
        goto LABEL_22;
      }
    }
    uint64_t v17 = a1[9];
    int64_t v18 = std::__shared_weak_count::lock(v15);
    if (!v18) {
      goto LABEL_22;
    }
    int64_t v19 = v18;
    long long v20 = operator new(0x38uLL);
    *long long v20 = v12;
    v20[1] = v13;
    *((unsigned char *)v20 + 16) = a3;
    v20[3] = v14;
    v20[4] = a1;
    v20[5] = v9;
    v20[6] = v11;
    int64_t v21 = a1[11];
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    xpc_object_t v22 = operator new(0x18uLL);
    void *v22 = v20;
    v22[1] = v17;
    v22[2] = v19;
    dispatch_async_f(v21, v22, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::ARIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::ARIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::ARIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::ARIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke);
    if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
    std::__shared_weak_count::__release_weak(v11);
  }
  else
  {
    uint64_t v16 = a1[5];
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)xpc_object_t v23 = 0;
      _os_log_error_impl(&dword_235DB9000, v16, OS_LOG_TYPE_ERROR, "AppContext is NULL", v23, 2u);
    }
  }
}

void awd::ARIAwdCommandDriver::sendAddConfiguration(void *a1, void *a2, char a3, uint64_t a4, void **a5)
{
  if (*a2)
  {
    int v6 = (std::__shared_weak_count *)a1[10];
    if (!v6 || (uint64_t v11 = (void *)a1[9], (v12 = std::__shared_weak_count::lock(v6)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v13 = v12;
    atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v13);
    }
    uint64_t v14 = a2[1];
    *(void *)&long long v35 = *a2;
    *((void *)&v35 + 1) = v14;
    if (v14) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
    }
    char v36 = a3;
    long long v38 = 0;
    long long v39 = 0;
    std::string __p = 0;
    uint64_t v15 = *(const void **)a4;
    size_t v16 = *(void *)(a4 + 8) - *(void *)a4;
    if (v16)
    {
      if ((v16 & 0x8000000000000000) != 0) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v17 = (char *)operator new(v16);
      int64_t v18 = &v17[v16];
      std::string __p = v17;
      long long v39 = &v17[v16];
      memcpy(v17, v15, v16);
      long long v38 = v18;
    }
    int64_t v19 = *a5;
    if (*a5) {
      int64_t v19 = _Block_copy(v19);
    }
    aBlock[0] = v19;
    aBlock[1] = v11;
    long long v41 = v13;
    atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v42 = a1;
    long long v20 = (std::__shared_weak_count *)a1[10];
    if (!v20 || (uint64_t v21 = a1[9], (v22 = std::__shared_weak_count::lock(v20)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    xpc_object_t v23 = v22;
    xpc_object_t v24 = operator new(0x50uLL);
    *(_OWORD *)xpc_object_t v24 = v35;
    long long v35 = 0uLL;
    char v25 = v36;
    v24[3] = 0;
    *((unsigned char *)v24 + 16) = v25;
    _OWORD v24[4] = 0;
    v24[5] = 0;
    long long v26 = __p;
    size_t v27 = v38 - (unsigned char *)__p;
    if (v38 != __p)
    {
      if ((v27 & 0x8000000000000000) != 0) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      long long v28 = (char *)operator new(v38 - (unsigned char *)__p);
      v24[3] = v28;
      long long v29 = &v28[v27];
      v24[5] = &v28[v27];
      memcpy(v28, v26, v27);
      _OWORD v24[4] = v29;
    }
    long long v30 = *(_OWORD *)aBlock;
    aBlock[0] = 0;
    *((_OWORD *)v24 + 3) = v30;
    unint64_t v31 = v41;
    aBlock[1] = 0;
    long long v41 = 0;
    v24[8] = v31;
    v24[9] = a1;
    uint64_t v32 = a1[11];
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    xpc_object_t v33 = operator new(0x18uLL);
    void *v33 = v24;
    v33[1] = v21;
    v33[2] = v23;
    dispatch_async_f(v32, v33, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::ARIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::ARIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::ARIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::ARIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke);
    if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
    if (v41) {
      std::__shared_weak_count::__release_weak(v41);
    }
    if (aBlock[0]) {
      _Block_release(aBlock[0]);
    }
    if (__p)
    {
      long long v38 = (char *)__p;
      operator delete(__p);
    }
    if (*((void *)&v35 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v35 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      (*(void (**)(void))(**((void **)&v35 + 1) + 16))(*((void *)&v35 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v35 + 1));
    }
    std::__shared_weak_count::__release_weak(v13);
  }
  else
  {
    uint64_t v34 = a1[5];
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v35) = 0;
      _os_log_error_impl(&dword_235DB9000, v34, OS_LOG_TYPE_ERROR, "AppContext is NULL", (uint8_t *)&v35, 2u);
    }
  }
}

void sub_235DD3180(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  size_t v16 = *v14;
  if (*v14)
  {
    *(void *)(v13 + 32) = v16;
    operator delete(v16);
  }
  uint64_t v17 = *(std::__shared_weak_count **)(v13 + 8);
  if (v17)
  {
    if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
      __clang_call_terminate(a1);
    }
  }
  __clang_call_terminate(a1);
}

void awd::ARIAwdCommandDriver::sendClearConfiguration(void *a1, uint64_t *a2, const void **a3)
{
  if (*a2)
  {
    uint64_t v4 = (std::__shared_weak_count *)a1[10];
    if (!v4 || (v7 = a1[9], (xpc_object_t v8 = std::__shared_weak_count::lock(v4)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v9 = v8;
    p_shared_weak_owners = &v8->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v9);
    }
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    uint64_t v11 = *a2;
    uint64_t v12 = a2[1];
    if (v12) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
    }
    if (*a3)
    {
      uint64_t v13 = _Block_copy(*a3);
      uint64_t v14 = (std::__shared_weak_count *)a1[10];
      if (!v14) {
LABEL_22:
      }
        std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v14 = (std::__shared_weak_count *)a1[10];
      if (!v14) {
        goto LABEL_22;
      }
    }
    uint64_t v16 = a1[9];
    uint64_t v17 = std::__shared_weak_count::lock(v14);
    if (!v17) {
      goto LABEL_22;
    }
    int64_t v18 = v17;
    int64_t v19 = operator new(0x30uLL);
    void *v19 = v7;
    v19[1] = v9;
    v19[2] = v11;
    v19[3] = v12;
    v19[4] = v13;
    v19[5] = a1;
    long long v20 = a1[11];
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v21 = operator new(0x18uLL);
    *uint64_t v21 = v19;
    v21[1] = v16;
    v21[2] = v18;
    dispatch_async_f(v20, v21, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::ARIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::ARIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::ARIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::ARIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke);
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    std::__shared_weak_count::__release_weak(v9);
  }
  else
  {
    uint64_t v15 = a1[5];
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)xpc_object_t v22 = 0;
      _os_log_error_impl(&dword_235DB9000, v15, OS_LOG_TYPE_ERROR, "AppContext is NULL", v22, 2u);
    }
  }
}

void awd::ARIAwdCommandDriver::sendUpdateProperties(void *a1, uint64_t *a2, const void **a3)
{
  if (*a2)
  {
    uint64_t v4 = (std::__shared_weak_count *)a1[10];
    if (!v4 || (v7 = a1[9], (xpc_object_t v8 = std::__shared_weak_count::lock(v4)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v9 = v8;
    p_shared_weak_owners = &v8->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v9);
    }
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    uint64_t v11 = *a2;
    uint64_t v12 = a2[1];
    if (v12) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
    }
    if (*a3)
    {
      uint64_t v13 = _Block_copy(*a3);
      uint64_t v14 = (std::__shared_weak_count *)a1[10];
      if (!v14) {
LABEL_22:
      }
        std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v14 = (std::__shared_weak_count *)a1[10];
      if (!v14) {
        goto LABEL_22;
      }
    }
    uint64_t v16 = a1[9];
    uint64_t v17 = std::__shared_weak_count::lock(v14);
    if (!v17) {
      goto LABEL_22;
    }
    int64_t v18 = v17;
    int64_t v19 = operator new(0x30uLL);
    void *v19 = v7;
    v19[1] = v9;
    v19[2] = v11;
    v19[3] = v12;
    v19[4] = v13;
    v19[5] = a1;
    long long v20 = a1[11];
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v21 = operator new(0x18uLL);
    *uint64_t v21 = v19;
    v21[1] = v16;
    v21[2] = v18;
    dispatch_async_f(v20, v21, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::ARIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::ARIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::ARIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::ARIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke);
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    std::__shared_weak_count::__release_weak(v9);
  }
  else
  {
    uint64_t v15 = a1[5];
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)xpc_object_t v22 = 0;
      _os_log_error_impl(&dword_235DB9000, v15, OS_LOG_TYPE_ERROR, "AppContext is NULL", v22, 2u);
    }
  }
}

void awd::ARIAwdCommandDriver::sendQueriableMetric(void *a1, uint64_t *a2, _OWORD *a3, const void **a4)
{
  if (*a2)
  {
    long long v5 = (std::__shared_weak_count *)a1[10];
    if (!v5 || (uint64_t v9 = a1[9], (v10 = std::__shared_weak_count::lock(v5)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v11 = v10;
    p_shared_weak_owners = &v10->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v11);
    }
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    uint64_t v13 = *a2;
    uint64_t v14 = a2[1];
    if (v14) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
    }
    *(_OWORD *)xpc_object_t v24 = *a3;
    *(_OWORD *)&v24[12] = *(_OWORD *)((char *)a3 + 12);
    if (*a4)
    {
      uint64_t v15 = _Block_copy(*a4);
      uint64_t v16 = (std::__shared_weak_count *)a1[10];
      if (!v16) {
LABEL_22:
      }
        std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    else
    {
      uint64_t v15 = 0;
      uint64_t v16 = (std::__shared_weak_count *)a1[10];
      if (!v16) {
        goto LABEL_22;
      }
    }
    uint64_t v18 = a1[9];
    int64_t v19 = std::__shared_weak_count::lock(v16);
    if (!v19) {
      goto LABEL_22;
    }
    long long v20 = v19;
    uint64_t v21 = (char *)operator new(0x50uLL);
    *(void *)uint64_t v21 = v9;
    *((void *)v21 + 1) = v11;
    *((void *)v21 + 2) = v13;
    *((void *)v21 + 3) = v14;
    *((_OWORD *)v21 + 2) = *(_OWORD *)v24;
    *(_OWORD *)(v21 + 44) = *(_OWORD *)&v24[12];
    *((void *)v21 + 8) = v15;
    *((void *)v21 + 9) = a1;
    xpc_object_t v22 = a1[11];
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    xpc_object_t v23 = operator new(0x18uLL);
    void *v23 = v21;
    v23[1] = v18;
    v23[2] = v20;
    dispatch_async_f(v22, v23, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::ARIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::ARIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::ARIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::ARIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke);
    if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
    std::__shared_weak_count::__release_weak(v11);
  }
  else
  {
    uint64_t v17 = a1[5];
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)xpc_object_t v24 = 0;
      _os_log_error_impl(&dword_235DB9000, v17, OS_LOG_TYPE_ERROR, "AppContext is NULL", v24, 2u);
    }
  }
}

void awd::ARIAwdCommandDriver::sendQueriableMetric(void *a1, uint64_t *a2, _OWORD *a3, long long *a4, const void **a5)
{
  if (*a2)
  {
    int v6 = (std::__shared_weak_count *)a1[10];
    if (!v6 || (uint64_t v11 = a1[9], (v12 = std::__shared_weak_count::lock(v6)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v13 = v12;
    p_shared_weak_owners = &v12->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v13);
    }
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    uint64_t v16 = *a2;
    uint64_t v15 = a2[1];
    if (v15) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
    }
    long long v17 = *(_OWORD *)((char *)a3 + 12);
    long long v18 = *a4;
    *(_OWORD *)long long v29 = *a3;
    *(_OWORD *)&v29[12] = v17;
    long long v30 = v18;
    uint64_t v31 = *((void *)a4 + 2);
    if (*a5)
    {
      int64_t v19 = _Block_copy(*a5);
      long long v20 = (std::__shared_weak_count *)a1[10];
      if (!v20) {
LABEL_22:
      }
        std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    else
    {
      int64_t v19 = 0;
      long long v20 = (std::__shared_weak_count *)a1[10];
      if (!v20) {
        goto LABEL_22;
      }
    }
    uint64_t v22 = a1[9];
    xpc_object_t v23 = std::__shared_weak_count::lock(v20);
    if (!v23) {
      goto LABEL_22;
    }
    xpc_object_t v24 = v23;
    char v25 = operator new(0x68uLL);
    *char v25 = v11;
    v25[1] = v13;
    v25[2] = v16;
    v25[3] = v15;
    long long v26 = *(_OWORD *)&v29[16];
    *((_OWORD *)v25 + 2) = *(_OWORD *)v29;
    *((_OWORD *)v25 + 3) = v26;
    *((_OWORD *)v25 + 4) = v30;
    v25[10] = v31;
    v25[11] = v19;
    v25[12] = a1;
    size_t v27 = a1[11];
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    long long v28 = operator new(0x18uLL);
    *long long v28 = v25;
    v28[1] = v22;
    v28[2] = v24;
    dispatch_async_f(v27, v28, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::ARIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,awd::TriggerInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::ARIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,awd::TriggerInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::ARIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,awd::TriggerInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::ARIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,awd::TriggerInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke);
    if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    std::__shared_weak_count::__release_weak(v13);
  }
  else
  {
    uint64_t v21 = a1[5];
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long v29 = 0;
      _os_log_error_impl(&dword_235DB9000, v21, OS_LOG_TYPE_ERROR, "AppContext is NULL", v29, 2u);
    }
  }
}

void awd::ARIAwdCommandDriver::init(awd::ARIAwdCommandDriver *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v2 || (uint64_t v3 = *((void *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v5 = v4;
  p_shared_weak_owners = &v4->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v7 || (uint64_t v8 = *((void *)this + 9), (v9 = std::__shared_weak_count::lock(v7)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v10 = v9;
  uint64_t v11 = operator new(0x18uLL);
  *uint64_t v11 = this;
  v11[1] = v3;
  v11[2] = v5;
  uint64_t v12 = *((void *)this + 11);
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v13 = operator new(0x18uLL);
  *uint64_t v13 = v11;
  v13[1] = v8;
  void v13[2] = v10;
  dispatch_async_f(v12, v13, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::ARIAwdCommandDriver::init(void)::$_0>(awd::ARIAwdCommandDriver::init(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::ARIAwdCommandDriver::init(void)::$_0,dispatch_queue_s *::default_delete<awd::ARIAwdCommandDriver::init(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }

  std::__shared_weak_count::__release_weak(v5);
}

void awd::ARIAwdCommandDriver::create(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  int v6 = (awd::AwdCommandDriver *)operator new(0xA0uLL);
  uint64_t v7 = (uint64_t)v6;
  uint64_t v8 = (std::__shared_weak_count *)a1[1];
  uint64_t v13 = *a1;
  uint64_t v14 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *a2;
  xpc_object_t v10 = (std::__shared_weak_count *)a2[1];
  v12[0] = v9;
  v12[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  awd::ARIAwdCommandDriver::ARIAwdCommandDriver(v6, (uint64_t)&v13, (uint64_t)v12);
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<awd::ARIAwdCommandDriver>::shared_ptr[abi:ne180100]<awd::ARIAwdCommandDriver,std::shared_ptr<awd::ARIAwdCommandDriver> ctu::SharedSynchronizable<awd::AwdCommandDriver>::make_shared_ptr<awd::ARIAwdCommandDriver>(awd::ARIAwdCommandDriver*)::{lambda(awd::ARIAwdCommandDriver*)#1},void>(a3, v7);
  ctu::Loggable<awd::AwdCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a3);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  uint64_t v11 = v14;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  awd::ARIAwdCommandDriver::init((awd::ARIAwdCommandDriver *)*a3);
}

void sub_235DD3DE4(_Unwind_Exception *a1)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_235DD3DF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v11);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

awd::AwdCommandDriver *awd::ARIAwdCommandDriver::ARIAwdCommandDriver(awd::AwdCommandDriver *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a2 + 8);
  xpc_object_t v10 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v5 = *(std::__shared_weak_count **)(a3 + 8);
  uint64_t v9 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  awd::AwdCommandDriver::AwdCommandDriver();
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  *(void *)a1 = &unk_26E93B408;
  int v6 = *((void *)a1 + 11);
  xpc_object_t object = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  awd::AwdCommandDriver::getName(a1);
  ice::Client::create();
  if (object) {
    dispatch_release(object);
  }
  ctu::LoggerCommonBase::setLogLevel();
  return a1;
}

void sub_235DD3F94(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v3);
  awd::AwdCommandDriver::~AwdCommandDriver(v1);
  _Unwind_Resume(a1);
}

void sub_235DD3FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_235DD3FD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  awd::AwdCommandDriver::~AwdCommandDriver(v10);
  _Unwind_Resume(a1);
}

uint64_t awd::ARIAwdCommandDriver::handleClientStarted_sync(awd::ARIAwdCommandDriver *this)
{
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_debug_impl(&dword_235DB9000, v2, OS_LOG_TYPE_DEBUG, "#D Started", v4, 2u);
  }
  awd::ARIAwdCommandDriver::sendGlobalSwitch_sync(this, 1);
  return awd::AwdCommandDriver::broadcastState_sync();
}

uint64_t awd::ARIAwdCommandDriver::sendGlobalSwitch_sync(awd::ARIAwdCommandDriver *this, int a2)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v28[3] = v4;
  *(_OWORD *)std::string __p = v4;
  v28[1] = v4;
  v28[2] = v4;
  v28[0] = v4;
  AriSdk::ARI_CsiAwdsGlobalSwitchReq_SDK::ARI_CsiAwdsGlobalSwitchReq_SDK((AriSdk::ARI_CsiAwdsGlobalSwitchReq_SDK *)v28);
  long long v5 = operator new(4uLL);
  *long long v5 = a2;
  uint64_t v6 = __p[0];
  __p[0] = v5;
  if (v6) {
    operator delete(v6);
  }
  unint64_t v7 = ctu::Clock::now_in_nanoseconds((ctu::Clock *)v5);
  uint64_t v8 = operator new(8uLL);
  *uint64_t v8 = v7 / 0xF4240;
  uint64_t v9 = __p[1];
  __p[1] = v8;
  if (v9) {
    operator delete(v9);
  }
  xpc_object_t v10 = *((void *)this + 5);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    char v25 = "disabled";
    if (a2) {
      char v25 = "enabled";
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v25;
    _os_log_debug_impl(&dword_235DB9000, v10, OS_LOG_TYPE_DEBUG, "#D Requesting global switch to be %s", (uint8_t *)&buf, 0xCu);
    uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 10);
    if (!v11) {
LABEL_27:
    }
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 10);
    if (!v11) {
      goto LABEL_27;
    }
  }
  uint64_t v12 = (std::__shared_weak_count_vtbl *)*((void *)this + 9);
  uint64_t v13 = std::__shared_weak_count::lock(v11);
  if (!v13) {
    goto LABEL_27;
  }
  uint64_t v14 = v13;
  p_shared_weak_owners = &v13->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v14);
  }
  uint64_t v16 = *((void *)this + 18);
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  long long v17 = (std::__shared_weak_count *)operator new(0x38uLL);
  v17->__shared_owners_ = 0;
  p_shared_owners = &v17->__shared_owners_;
  v17->__shared_weak_owners_ = 0;
  v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93BA28;
  v17[1].__vftable = v12;
  v17[1].__shared_owners_ = (uint64_t)v14;
  v17[1].__shared_weak_owners_ = (uint64_t)this;
  LODWORD(v17[2].__vftable) = a2;
  *(void *)&long long buf = MEMORY[0x263EF8330];
  *((void *)&buf + 1) = 1174405120;
  uint64_t v32 = ___ZN3ice6detail12wrapCallbackIZNK3awd19ARIAwdCommandDriver21sendGlobalSwitch_syncEbE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  xpc_object_t v33 = &__block_descriptor_tmp_36;
  uint64_t v34 = v17 + 1;
  long long v35 = v17;
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlock[0] = (const void *)MEMORY[0x263EF8330];
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_0;
  aBlock[3] = &unk_264C7D7C8;
  aBlock[4] = &buf;
  int64_t v19 = _Block_copy(aBlock);
  long long v20 = v35;
  if (!v35 || atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_13:
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_14:
  *(void *)&long long v21 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v26[0] = v21;
  v26[1] = v21;
  unint64_t v27 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v22 = *(std::__shared_weak_count **)(v16 + 16);
  *(void *)&long long buf = *(void *)(v16 + 8);
  if (!v22)
  {
    *((void *)&buf + 1) = 0;
LABEL_29:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  *((void *)&buf + 1) = std::__shared_weak_count::lock(v22);
  if (!*((void *)&buf + 1)) {
    goto LABEL_29;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  xpc_object_t v23 = (std::__shared_weak_count *)*((void *)&buf + 1);
  if (*((void *)&buf + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&buf + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  aBlock[0] = v19;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0]) {
    _Block_release(aBlock[0]);
  }
  MEMORY[0x237DF50B0](v26);
  std::__shared_weak_count::__release_weak(v14);
  return MEMORY[0x237DF5E20](v28);
}

void sub_235DD4474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *aBlock)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t awd::ARIAwdCommandDriver::handleMetricSubmissionInd_sync(awd::ARIAwdCommandDriver *this, const unsigned __int8 *a2)
{
  uint64_t v72 = *MEMORY[0x263EF8340];
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v60 = v3;
  long long v59 = v3;
  long long v58 = v3;
  long long v57 = v3;
  long long v56 = v3;
  long long v55 = v3;
  long long v54 = v3;
  v53[3] = v3;
  v53[2] = v3;
  v53[1] = v3;
  v53[0] = v3;
  AriSdk::ARI_CsiAwdsMetricSubInd_SDK::ARI_CsiAwdsMetricSubInd_SDK((AriSdk::ARI_CsiAwdsMetricSubInd_SDK *)v53, a2);
  if (ice::isARIResponseValid())
  {
    int v4 = AriSdk::ARI_CsiAwdsMetricSubInd_SDK::unpack((AriSdk::ARI_CsiAwdsMetricSubInd_SDK *)v53);
    long long v5 = *((void *)this + 5);
    if (v4)
    {
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = asString();
        *(_DWORD *)long long buf = 136315394;
        *(void *)float64x2x2_t v62 = v6;
        *(_WORD *)&v62[8] = 1024;
        LODWORD(v63) = v4;
        _os_log_impl(&dword_235DB9000, v5, OS_LOG_TYPE_DEFAULT, "#N Could not unpack CsiAwdsMetricSubInd: %s (%d)", buf, 0x12u);
      }
      return MEMORY[0x237DF58D0](v53);
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_debug_impl(&dword_235DB9000, v5, OS_LOG_TYPE_DEBUG, "#D Got metric submission from BB", buf, 2u);
      uint64_t v9 = (int *)*((void *)&v60 + 1);
      if (*((void *)&v60 + 1))
      {
LABEL_10:
        int v10 = *v9;
        uint64_t v11 = (const void *)v59;
        if (!(void)v59) {
          return MEMORY[0x237DF58D0](v53);
        }
LABEL_14:
        if (v11 != *((const void **)&v59 + 1))
        {
          int v13 = *(_DWORD *)v54;
          int v36 = **((_DWORD **)&v54 + 1);
          int v14 = *(_DWORD *)v55;
          int v15 = **((_DWORD **)&v55 + 1);
          int v16 = *(_DWORD *)v56;
          int v39 = *(unsigned __int8 *)v57;
          int v34 = **((unsigned char **)&v57 + 1);
          int v35 = (unsigned __int16)**((_WORD **)&v56 + 1);
          int v37 = *(unsigned __int8 *)v58;
          int v38 = **((unsigned char **)&v58 + 1);
          unint64_t v50 = 0;
          long long v51 = 0;
          unint64_t v52 = 0;
          size_t v17 = *((void *)&v59 + 1) - (void)v11;
          if ((uint64_t)(*((void *)&v59 + 1) - (void)v11) < 0) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          int v33 = v16;
          long long v18 = (char *)operator new(*((void *)&v59 + 1) - (void)v11);
          unint64_t v50 = v18;
          unint64_t v52 = &v18[v17];
          memmove(v18, v11, v17);
          long long v51 = &v18[v17];
          int64_t v19 = (char **)*((void *)this + 16);
          if (!v19) {
            goto LABEL_43;
          }
          long long v20 = (char **)((char *)this + 128);
          do
          {
            unsigned int v21 = *((unsigned __int8 *)v19 + 32);
            BOOL v22 = v21 >= v13;
            if (v21 >= v13) {
              xpc_object_t v23 = v19;
            }
            else {
              xpc_object_t v23 = v19 + 1;
            }
            if (v22) {
              long long v20 = v19;
            }
            int64_t v19 = (char **)*v23;
          }
          while (*v23);
          if (v20 == (char **)((char *)this + 128)
            || *((unsigned __int8 *)v20 + 32) > v13)
          {
            goto LABEL_43;
          }
          char v25 = v20[5];
          xpc_object_t v24 = (std::__shared_weak_count *)v20[6];
          long long v48 = v25;
          long long v49 = v24;
          if (v24) {
            atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v32 = v24;
          if (v25)
          {
            *(void *)&v47[16] = 0xAAAAAAAAAAAAAAAALL;
            *(_DWORD *)&v47[24] = -1431655766;
            *(_DWORD *)&v47[12] = v36;
            *(_DWORD *)long long v47 = v14;
            if (!v15)
            {
              long long v26 = *((void *)this + 5);
              if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)long long buf = 0;
                _os_log_impl(&dword_235DB9000, v26, OS_LOG_TYPE_DEFAULT, "#N Baseband did not supply metric ID, using trigger ID instead...", buf, 2u);
              }
              int v15 = v10;
            }
            *(_DWORD *)&v47[4] = v15;
            *(_DWORD *)&v47[8] = 60;
            v47[16] = v37 != 0;
            v47[17] = v38 != 0;
            *(_DWORD *)&v47[20] = v39;
            v47[24] = 1;
            *(_OWORD *)long long v46 = *(_OWORD *)v47;
            *(_OWORD *)&v46[12] = *(_OWORD *)&v47[12];
            unint64_t v27 = (char *)operator new(v17);
            long long v28 = &v27[v17];
            std::string __p = v27;
            long long v45 = &v27[v17];
            memcpy(v27, v18, v17);
            long long v44 = v28;
            awd::AppContext::operator()();
            if (__p)
            {
              long long v44 = __p;
              operator delete(__p);
            }
            if (v39)
            {
              v42[0] = *(_OWORD *)v47;
              *(_OWORD *)((char *)v42 + 12) = *(_OWORD *)&v47[12];
              awd::AppContext::operator()();
            }
            long long v29 = *((void *)this + 5);
            if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v30 = awd::asString();
              awd::asString();
              uint64_t v31 = v41 >= 0 ? &v40 : (void **)v40;
              *(_DWORD *)long long buf = 136316418;
              *(void *)float64x2x2_t v62 = v30;
              *(_WORD *)&v62[8] = 2080;
              float64x2x2_t v63 = v31;
              __int16 v64 = 1024;
              int v65 = v33;
              __int16 v66 = 1024;
              int v67 = v35;
              __int16 v68 = 1024;
              int v69 = v39;
              __int16 v70 = 1024;
              int v71 = v34;
              _os_log_debug_impl(&dword_235DB9000, v29, OS_LOG_TYPE_DEBUG, "#D Got metric segment for: %s, %s, packetLength: %u, packetNumber: %u, isLastPacket: %u, isLastSegment: %u", buf, 0x2Eu);
              if (v41 < 0) {
                operator delete(v40);
              }
            }
          }
          if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
          long long v18 = v50;
          if (v50) {
LABEL_43:
          }
            operator delete(v18);
        }
        return MEMORY[0x237DF58D0](v53);
      }
    }
    else
    {
      uint64_t v9 = (int *)*((void *)&v60 + 1);
      if (*((void *)&v60 + 1)) {
        goto LABEL_10;
      }
    }
    int v10 = 0;
    uint64_t v11 = (const void *)v59;
    if (!(void)v59) {
      return MEMORY[0x237DF58D0](v53);
    }
    goto LABEL_14;
  }
  unint64_t v7 = *((void *)this + 5);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    unint64_t GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v53);
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)float64x2x2_t v62 = (GMID >> 17) & 0xFFFF8000 | (GMID << 26);
    *(_WORD *)&v62[4] = 1024;
    *(_DWORD *)&v62[6] = -842137600;
    _os_log_error_impl(&dword_235DB9000, v7, OS_LOG_TYPE_ERROR, "Got unexpected message 0x%0x, expected CsiAwdsMetricSubInd (0x%0x)", buf, 0xEu);
  }
  return MEMORY[0x237DF58D0](v53);
}

void sub_235DD4A80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
  operator delete(v37);
  MEMORY[0x237DF58D0](&a37);
  _Unwind_Resume(a1);
}

void sub_235DD4AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

uint64_t awd::ARIAwdCommandDriver::handleTriggerSubmissionInd_sync(awd::ARIAwdCommandDriver *this, const unsigned __int8 *a2)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v38 = v3;
  long long v39 = v3;
  v36[3] = v3;
  long long v37 = v3;
  v36[1] = v3;
  v36[2] = v3;
  v36[0] = v3;
  AriSdk::ARI_CsiAwdsMetricSubTriggerInd_SDK::ARI_CsiAwdsMetricSubTriggerInd_SDK((AriSdk::ARI_CsiAwdsMetricSubTriggerInd_SDK *)v36, a2);
  char isARIResponseValid = ice::isARIResponseValid();
  long long v5 = *((void *)this + 5);
  if (isARIResponseValid)
  {
    if (os_log_type_enabled(*((os_log_t *)this + 5), OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_debug_impl(&dword_235DB9000, v5, OS_LOG_TYPE_DEBUG, "#D Got trigger submission from BB", buf, 2u);
    }
    if (!AriSdk::ARI_CsiAwdsMetricSubTriggerInd_SDK::unpack((AriSdk::ARI_CsiAwdsMetricSubTriggerInd_SDK *)v36))
    {
      uint64_t v6 = (char **)*((void *)this + 16);
      if (v6)
      {
        int v7 = *(_DWORD *)v37;
        unsigned int v8 = **((_DWORD **)&v37 + 1);
        unsigned int v9 = *(_DWORD *)v38;
        unsigned int v10 = **((_DWORD **)&v38 + 1);
        uint64_t v11 = *(void *)v39;
        uint64_t v12 = (char **)((char *)this + 128);
        do
        {
          unsigned int v13 = *((unsigned __int8 *)v6 + 32);
          BOOL v14 = v13 >= v7;
          if (v13 >= v7) {
            int v15 = v6;
          }
          else {
            int v15 = v6 + 1;
          }
          if (v14) {
            uint64_t v12 = v6;
          }
          uint64_t v6 = (char **)*v15;
        }
        while (*v15);
        if (v12 != (char **)((char *)this + 128) && *((unsigned __int8 *)v12 + 32) <= v7)
        {
          int v16 = v12[5];
          size_t v17 = (std::__shared_weak_count *)v12[6];
          int v34 = v16;
          int v35 = v17;
          if (v17) {
            atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v16)
          {
            *(void *)&v33[16] = 0xAAAAAA00AAAA0000;
            *(_DWORD *)&v33[24] = -1431655936;
            uint64_t v32 = v11;
            *(_DWORD *)int v33 = 0;
            *(_DWORD *)&v33[4] = v10;
            *(void *)&v33[8] = 60;
            *((void *)&v31 + 1) = v9 | 0xAAAAAAAA00000000;
            *(void *)&long long v31 = __PAIR64__(v8, v10);
            *(_OWORD *)((char *)v30 + 12) = *(_OWORD *)&v33[12];
            v30[0] = *(_OWORD *)v33;
            uint64_t v29 = v11;
            long long v28 = v31;
            awd::AppContext::operator()();
            long long v18 = *((void *)this + 5);
            if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v21 = awd::asString();
              awd::asString();
              awd::asString();
              BOOL v22 = &v26;
              if (v27 < 0) {
                BOOL v22 = v26;
              }
              if (v25 >= 0) {
                p_p = &__p;
              }
              else {
                p_p = __p;
              }
              *(_DWORD *)long long buf = 136315650;
              *(void *)char v41 = v21;
              *(_WORD *)&v41[8] = 2080;
              uint64_t v42 = v22;
              __int16 v43 = 2080;
              long long v44 = p_p;
              _os_log_debug_impl(&dword_235DB9000, v18, OS_LOG_TYPE_DEBUG, "#D Got trigger for: %s, %s, %s", buf, 0x20u);
              if (v25 < 0) {
                operator delete(__p);
              }
              if (v27 < 0) {
                operator delete(v26);
              }
            }
          }
          if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
      }
    }
  }
  else if (os_log_type_enabled(*((os_log_t *)this + 5), OS_LOG_TYPE_ERROR))
  {
    unint64_t GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v36);
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)char v41 = (GMID >> 17) & 0xFFFF8000 | (GMID << 26);
    *(_WORD *)&v41[4] = 1024;
    *(_DWORD *)&v41[6] = -842170368;
    _os_log_error_impl(&dword_235DB9000, v5, OS_LOG_TYPE_ERROR, "Got unexpected message 0x%0x, expected CsiAwdsMetricSubInd (0x%0x)", buf, 0xEu);
  }
  return MEMORY[0x237DF6560](v36);
}

void sub_235DD4E4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,char a36)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a34);
  MEMORY[0x237DF6560](&a36);
  _Unwind_Resume(a1);
}

void awd::ARIAwdCommandDriver::~ARIAwdCommandDriver(std::__shared_weak_count **this)
{
  uint64_t v1 = (awd::ARIAwdCommandDriver *)this;
  *this = (std::__shared_weak_count *)&unk_26E93B408;
  uint64_t v2 = this[19];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    this = (std::__shared_weak_count **)v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  awd::AwdCommandDriver::~AwdCommandDriver((awd::AwdCommandDriver *)this);
}

void awd::ARIAwdCommandDriver::~ARIAwdCommandDriver(awd::ARIAwdCommandDriver *this)
{
  *(void *)this = &unk_26E93B408;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    awd::AwdCommandDriver::~AwdCommandDriver(this);
  }
  else
  {
    awd::AwdCommandDriver::~AwdCommandDriver(this);
  }
  operator delete(v3);
}

uint64_t ctu::Loggable<awd::AwdCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x270F97428](a1 + 8);
}

size_t ctu::Loggable<awd::AwdCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(awd::AwdCommandDriver *a1@<X0>, void *a2@<X8>)
{
  Name = (const char *)awd::AwdCommandDriver::getName(a1);
  size_t result = strlen(Name);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    unsigned int v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memmove(a2, Name, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<awd::AwdCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x270F978E0](a1 + 8);
}

void dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::ARIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::ARIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::ARIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::ARIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  v31[0] = (void *)v2;
  uint64_t v3 = *(void *)(v2 + 32);
  int v4 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(v2 + 16)) {
      size_t v5 = "enabled";
    }
    else {
      size_t v5 = "disabled";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl(&dword_235DB9000, v4, OS_LOG_TYPE_DEFAULT, "#I Requesting metric submission to be %s", buf, 0xCu);
  }
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v44 = v6;
  *(_OWORD *)std::string __p = v6;
  long long v42 = v6;
  long long v43 = v6;
  *(_OWORD *)long long buf = v6;
  uint64_t v30 = a1;
  AriSdk::ARI_CsiAwdsMetricSubSwitchReq_SDK::ARI_CsiAwdsMetricSubSwitchReq_SDK((AriSdk::ARI_CsiAwdsMetricSubSwitchReq_SDK *)buf);
  int AppID = awd::AppContext::getAppID(*(awd::AppContext **)v2);
  unsigned int v8 = operator new(4uLL);
  *unsigned int v8 = AppID;
  unsigned int v9 = __p[0];
  __p[0] = v8;
  if (v9) {
    operator delete(v9);
  }
  int v10 = *(unsigned __int8 *)(v2 + 16);
  uint64_t v11 = operator new(4uLL);
  *uint64_t v11 = v10;
  uint64_t v12 = __p[1];
  __p[1] = v11;
  if (v12) {
    operator delete(v12);
  }
  uint64_t v13 = *(void *)(v3 + 144);
  int v15 = *(std::__shared_weak_count_vtbl **)(v2 + 40);
  uint64_t v14 = *(void *)(v2 + 48);
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 16), 1uLL, memory_order_relaxed);
  }
  int v16 = *(const void **)(v2 + 24);
  uint64_t v29 = v13;
  if (!v16)
  {
    size_t v17 = 0;
    long long v18 = *(std::__shared_weak_count_vtbl **)v2;
    uint64_t v19 = *(void *)(v2 + 8);
    if (!v19) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  size_t v17 = _Block_copy(v16);
  long long v18 = *(std::__shared_weak_count_vtbl **)v2;
  uint64_t v19 = *(void *)(v2 + 8);
  if (v19) {
LABEL_14:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
LABEL_15:
  char v20 = *(unsigned char *)(v2 + 16);
  uint64_t v21 = (std::__shared_weak_count *)operator new(0x50uLL);
  v21->__shared_owners_ = 0;
  p_shared_owners = &v21->__shared_owners_;
  v21->__shared_weak_owners_ = 0;
  v21->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93B4D8;
  v21[1].__vftable = v15;
  v21[1].__shared_owners_ = v14;
  v21[1].__shared_weak_owners_ = (uint64_t)v17;
  v21[2].__vftable = v18;
  v21[2].__shared_owners_ = v19;
  LODWORD(v21[2].__shared_weak_owners_) = AppID;
  BYTE4(v21[2].__shared_weak_owners_) = v20;
  v21[3].__vftable = (std::__shared_weak_count_vtbl *)v3;
  *(void *)&long long v32 = MEMORY[0x263EF8330];
  *((void *)&v32 + 1) = 1174405120;
  *(void *)&long long v33 = ___ZN3ice6detail12wrapCallbackIZZNK3awd19ARIAwdCommandDriver26sendEnableMetricSubmissionENSt3__110shared_ptrINS2_10AppContextEEEbN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEvEUlPKhjE_vEENS9_IU13block_pointerFiPhjEEENS4_17integral_constantIiLi2EEEOT__block_invoke;
  *((void *)&v33 + 1) = &__block_descriptor_tmp_11;
  unint64_t v34 = (unint64_t)&v21[1];
  int v35 = v21;
  atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlocunint64_t k = MEMORY[0x263EF8330];
  uint64_t v37 = 0x40000000;
  long long v38 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_0;
  long long v39 = &unk_264C7D7C8;
  uint64_t v40 = &v32;
  xpc_object_t v23 = _Block_copy(&aBlock);
  xpc_object_t v24 = v35;
  if (!v35 || atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
  std::__shared_weak_count::__release_weak(v24);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_18:
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
LABEL_19:
  *(void *)&long long v25 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v25 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v32 = v25;
  long long v33 = v25;
  unint64_t v34 = 0xAAAAAAAAAAAAAAAALL;
  long long v26 = *(std::__shared_weak_count **)(v29 + 16);
  aBlocunint64_t k = *(void *)(v29 + 8);
  if (!v26)
  {
    uint64_t v37 = 0;
LABEL_35:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v37 = (uint64_t)std::__shared_weak_count::lock(v26);
  if (!v37) {
    goto LABEL_35;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  char v27 = (std::__shared_weak_count *)v37;
  if (v37 && !atomic_fetch_add((atomic_ullong *volatile)(v37 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  v31[1] = v23;
  ice::SendMsgBaseProxy::callback();
  if (v23) {
    _Block_release(v23);
  }
  MEMORY[0x237DF50B0](&v32);
  MEMORY[0x237DF6410](buf);
  std::unique_ptr<awd::ARIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::ARIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](v31);
  long long v28 = (std::__shared_weak_count *)v30[2];
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  operator delete(v30);
}

void sub_235DD554C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, char a11, void *aBlock, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void **std::unique_ptr<awd::ARIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::ARIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](void **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = (std::__shared_weak_count *)v2[6];
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    int v4 = (const void *)v2[3];
    if (v4) {
      _Block_release(v4);
    }
    size_t v5 = (std::__shared_weak_count *)v2[1];
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    operator delete(v2);
  }
  return a1;
}

void ___ZN3ice6detail12wrapCallbackIZZNK3awd19ARIAwdCommandDriver26sendEnableMetricSubmissionENSt3__110shared_ptrINS2_10AppContextEEEbN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEvEUlPKhjE_vEENS9_IU13block_pointerFiPhjEEENS4_17integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
    {
      uint64_t v5 = *(void *)(v2 + 48);
      long long v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        uint64_t v7 = v6;
        if (!*(void *)v2)
        {
LABEL_18:
          if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v17[3] = v8;
        long long v18 = v8;
        v17[1] = v8;
        v17[2] = v8;
        v17[0] = v8;
        AriSdk::ARI_CsiAwdsMetricSubSwitchRspCb_SDK::ARI_CsiAwdsMetricSubSwitchRspCb_SDK((AriSdk::ARI_CsiAwdsMetricSubSwitchRspCb_SDK *)v17, a2);
        if (ice::isARIResponseValid()
          && !AriSdk::ARI_CsiAwdsMetricSubSwitchRspCb_SDK::unpack((AriSdk::ARI_CsiAwdsMetricSubSwitchRspCb_SDK *)v17))
        {
          int v14 = **((_DWORD **)&v18 + 1);
          int AppID = awd::AppContext::getAppID(*(awd::AppContext **)(v2 + 24));
          if (v14) {
            BOOL v16 = 0;
          }
          else {
            BOOL v16 = *(_DWORD *)v18 == AppID;
          }
          int v9 = v16;
          int v10 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_8;
          }
        }
        else
        {
          int v9 = 0;
          int v10 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
LABEL_8:
            uint64_t v11 = "enabled";
            uint64_t v12 = "error";
            if (!*(unsigned char *)(v2 + 44)) {
              uint64_t v11 = "disabled";
            }
            if (v9) {
              uint64_t v12 = "success";
            }
            *(_DWORD *)long long buf = 136315394;
            *(void *)&uint8_t buf[4] = v11;
            __int16 v20 = 2080;
            uint64_t v21 = v12;
            _os_log_impl(&dword_235DB9000, v10, OS_LOG_TYPE_DEFAULT, "#I Metric submission %s %s", buf, 0x16u);
          }
        }
        uint64_t v13 = *(void **)(v2 + 16);
        if (v13) {
          uint64_t v13 = _Block_copy(v13);
        }
        *(void *)long long buf = v13;
        awd::AppContext::operator()();
        if (*(void *)buf) {
          _Block_release(*(const void **)buf);
        }
        MEMORY[0x237DF6660](v17);
        goto LABEL_18;
      }
    }
  }
}

void sub_235DD597C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *aBlock)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c168_ZTSNSt3__110shared_ptrIZZNK3awd19ARIAwdCommandDriver26sendEnableMetricSubmissionENS0_INS1_10AppContextEEEbN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEvEUlPKhjE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c168_ZTSNSt3__110shared_ptrIZZNK3awd19ARIAwdCommandDriver26sendEnableMetricSubmissionENS0_INS1_10AppContextEEEbN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEvEUlPKhjE_EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<awd::ARIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<awd::ARIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93B4D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<awd::ARIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<awd::ARIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93B4D8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<awd::ARIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<awd::ARIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[7];
  if (!v2 || atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v3 = (const void *)a1[5];
    if (!v3) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  uint64_t v3 = (const void *)a1[5];
  if (v3) {
LABEL_4:
  }
    _Block_release(v3);
LABEL_5:
  int v4 = (std::__shared_weak_count *)a1[4];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

uint64_t ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_0(uint64_t a1)
{
  return 0;
}

void dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::ARIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::ARIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::ARIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::ARIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v100 = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  uint64_t v3 = *(void *)(*a1 + 24);
  uint64_t v2 = *(void *)(*a1 + 32);
  uint64_t v71 = v2 - v3;
  uint64_t v76 = *(void *)(*a1 + 72);
  unint64_t v77 = (void *)*a1;
  int v4 = *(NSObject **)(v76 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = awd::asString();
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v2 - v3;
    _os_log_impl(&dword_235DB9000, v4, OS_LOG_TYPE_DEFAULT, "#I Requesting to add configuration type: %s, payload size: %lu", buf, 0x16u);
  }
  if (v2 != v3 && (unint64_t)(v71 + 3839) >= 0xF00)
  {
    LODWORD(v7) = 0;
    unint64_t v74 = (v71 + 3839) / 0xF00uLL;
    unint64_t v68 = *(void *)(v1 + 24) + v71;
    uint64_t v69 = *(void *)(v1 + 24);
    uint64_t v75 = v1;
    while (1)
    {
      unint64_t v99 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v97 = v8;
      long long v98 = v8;
      uint64_t v9 = v69 + (3840 * v7);
      unint64_t v10 = v9 + 3840;
      if (v68 < v9 + 3840) {
        unint64_t v10 = v68;
      }
      unint64_t v73 = v10;
      long long v95 = v8;
      long long v96 = v8;
      long long v93 = v8;
      long long v94 = v8;
      *(_OWORD *)long long buf = v8;
      *(_OWORD *)&uint8_t buf[16] = v8;
      AriSdk::ARI_CsiAwdsAddConfigReq_SDK::ARI_CsiAwdsAddConfigReq_SDK((AriSdk::ARI_CsiAwdsAddConfigReq_SDK *)buf);
      int AppID = awd::AppContext::getAppID(*(awd::AppContext **)v1);
      uint64_t v12 = operator new(4uLL);
      *uint64_t v12 = AppID;
      uint64_t v13 = (void *)v95;
      *(void *)&long long v95 = v12;
      if (v13) {
        operator delete(v13);
      }
      char v14 = *(unsigned char *)(v1 + 16);
      int v15 = operator new(1uLL);
      *int v15 = v14;
      BOOL v16 = (void *)*((void *)&v95 + 1);
      *((void *)&v95 + 1) = v15;
      if (v16) {
        operator delete(v16);
      }
      size_t v17 = operator new(4uLL);
      *size_t v17 = v71;
      long long v18 = (void *)v96;
      *(void *)&long long v96 = v17;
      if (v18) {
        operator delete(v18);
      }
      int v72 = AppID;
      uint64_t v19 = operator new(4uLL);
      uint64_t v20 = v73 - v9;
      _DWORD *v19 = v73 - v9;
      uint64_t v21 = (void *)*((void *)&v96 + 1);
      *((void *)&v96 + 1) = v19;
      if (v21) {
        operator delete(v21);
      }
      uint64_t v22 = operator new(2uLL);
      _WORD *v22 = v7;
      xpc_object_t v23 = (void *)v97;
      *(void *)&long long v97 = v22;
      if (v23) {
        operator delete(v23);
      }
      xpc_object_t v24 = operator new(1uLL);
      uint64_t v70 = (unsigned __int16)v7 + 1;
      *xpc_object_t v24 = v74 == v70;
      long long v26 = (void *)*((void *)&v97 + 1);
      *((void *)&v97 + 1) = v24;
      if (v26) {
        operator delete(v26);
      }
      if (v20 >= 1)
      {
        uint64_t v27 = 0;
        while (1)
        {
          uint64_t v30 = (char *)*((void *)&v98 + 1);
          uint64_t v29 = (char *)v98;
          unint64_t v31 = *((void *)&v98 + 1) - v98;
          if (*((void *)&v98 + 1) - (void)v98 >= 0xF00uLL)
          {
            AriOsa::LogSrcInfo((uint64_t *)v81, (AriOsa *)"/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/ARI/ari_sdk_msg.h", "emplace_back", v25);
            if (v81[23] >= 0) {
              long long v39 = v81;
            }
            else {
              long long v39 = *(unsigned char **)v81;
            }
            Ari::Log((Ari *)8, (uint64_t)"(%s:%d) Array is full, cannot add new values", v38, v39, 371);
            if ((v81[23] & 0x80000000) != 0) {
              operator delete(*(void **)v81);
            }
            goto LABEL_29;
          }
          if (*((void *)&v98 + 1) >= v99) {
            break;
          }
          **((unsigned char **)&v98 + 1) = *(unsigned char *)(v9 + v27);
          uint64_t v28 = (uint64_t)(v30 + 1);
LABEL_28:
          *((void *)&v98 + 1) = v28;
LABEL_29:
          if (++v27 >= v20) {
            goto LABEL_62;
          }
        }
        unint64_t v32 = v99 - v98;
        if (2 * (v99 - (unint64_t)v98) <= v31 + 1) {
          uint64_t v33 = v31 + 1;
        }
        else {
          uint64_t v33 = 2 * v32;
        }
        if (v32 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v34 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v34 = v33;
        }
        int v35 = (char *)operator new(v34);
        int v36 = &v35[v31];
        v35[v31] = *(unsigned char *)(v9 + v27);
        uint64_t v28 = (uint64_t)&v35[v31 + 1];
        if (v30 != v29)
        {
          if (v31 >= 8 && (unint64_t)(v29 - v35) >= 0x20)
          {
            if (v31 >= 0x20)
            {
              unint64_t v37 = v31 & 0xFFFFFFFFFFFFFFE0;
              uint64_t v40 = &v35[v31 - 16];
              char v41 = v30 - 16;
              unint64_t v42 = v31 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                long long v43 = *(_OWORD *)v41;
                *((_OWORD *)v40 - 1) = *((_OWORD *)v41 - 1);
                *(_OWORD *)uint64_t v40 = v43;
                v40 -= 32;
                v41 -= 32;
                v42 -= 32;
              }
              while (v42);
              if (v31 == v37) {
                goto LABEL_59;
              }
              if ((v31 & 0x18) != 0) {
                goto LABEL_52;
              }
              v36 -= v37;
              v30 -= v37;
            }
            else
            {
              unint64_t v37 = 0;
LABEL_52:
              v36 -= v31 & 0xFFFFFFFFFFFFFFF8;
              long long v44 = &v35[&v30[-v37] - v29 - 8];
              uint64_t v45 = &v30[-v37 - 8];
              unint64_t v46 = v37 - (v31 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                uint64_t v47 = *(void *)v45;
                v45 -= 8;
                *(void *)long long v44 = v47;
                v44 -= 8;
                v46 += 8;
              }
              while (v46);
              v30 -= v31 & 0xFFFFFFFFFFFFFFF8;
              if (v31 == (v31 & 0xFFFFFFFFFFFFFFF8))
              {
LABEL_59:
                uint64_t v30 = v29;
                int v36 = v35;
                goto LABEL_60;
              }
            }
          }
          long long v48 = v36 - 1;
          do
          {
            char v49 = *--v30;
            *v48-- = v49;
          }
          while (v30 != v29);
          goto LABEL_59;
        }
LABEL_60:
        *(void *)&long long v98 = v36;
        *((void *)&v98 + 1) = &v35[v31 + 1];
        unint64_t v99 = (unint64_t)&v35[v34];
        if (v30) {
          operator delete(v30);
        }
        goto LABEL_28;
      }
LABEL_62:
      unint64_t v50 = *(NSObject **)(v76 + 40);
      if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
      {
        awd::AppContext::getAppID(*(awd::AppContext **)v75);
        uint64_t v51 = awd::asString();
        uint64_t v52 = awd::asString();
        *(_DWORD *)long long v81 = 136317186;
        *(void *)&v81[4] = v51;
        *(_WORD *)&v81[12] = 2080;
        *(void *)&v81[14] = v52;
        *(_WORD *)&v81[22] = 1024;
        LODWORD(v82) = v71;
        WORD2(v82) = 2048;
        *(void *)((char *)&v82 + 6) = (v71 + 3839) / 0xF00uLL;
        HIWORD(v82) = 2048;
        uint64_t v83 = (std::__shared_weak_count *)(v69 + (3840 * v7));
        __int16 v84 = 2048;
        unint64_t v85 = v73;
        __int16 v86 = 1024;
        int v87 = v73 - v9;
        __int16 v88 = 1024;
        int v89 = (unsigned __int16)v7;
        __int16 v90 = 1024;
        BOOL v91 = v74 == v70;
        _os_log_impl(&dword_235DB9000, v50, OS_LOG_TYPE_DEFAULT, "#I AppID: %s, config type: %s, total length: %d, number of segments: %lu, start: %p, end: %p, segment length: %d, segment number: %d, is last segment: %d", v81, 0x4Cu);
      }
      uint64_t v53 = *(void *)(v76 + 144);
      long long v54 = *(std::__shared_weak_count_vtbl **)(v75 + 56);
      uint64_t v55 = *(void *)(v75 + 64);
      if (v55) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v55 + 16), 1uLL, memory_order_relaxed);
      }
      long long v56 = *(const void **)(v75 + 48);
      if (!v56) {
        break;
      }
      long long v57 = _Block_copy(v56);
      long long v59 = *(awd::AppContext **)v75;
      uint64_t v58 = *(void *)(v75 + 8);
      if (v58) {
        goto LABEL_68;
      }
LABEL_69:
      long long v60 = (std::__shared_weak_count *)operator new(0x50uLL);
      v60->__shared_owners_ = 0;
      p_shared_owners = &v60->__shared_owners_;
      v60->__shared_weak_owners_ = 0;
      v60->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93B558;
      v60[1].__vftable = v54;
      v60[1].__shared_owners_ = v55;
      v60[1].__shared_weak_owners_ = (uint64_t)v57;
      v60[2].__vftable = (std::__shared_weak_count_vtbl *)v59;
      v60[2].__shared_owners_ = v58;
      LODWORD(v60[2].__shared_weak_owners_) = v72;
      v60[3].__vftable = (std::__shared_weak_count_vtbl *)v76;
      aBlock[4] = v81;
      *(void *)long long v81 = MEMORY[0x263EF8330];
      *(void *)&v81[8] = 1174405120;
      *(void *)&v81[16] = ___ZN3ice6detail12wrapCallbackIZZNK3awd19ARIAwdCommandDriver20sendAddConfigurationENSt3__110shared_ptrINS2_10AppContextEEENS2_11PayloadTypeERKNS4_6vectorIhNS4_9allocatorIhEEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEvEUlPKhjE_vEENSG_IU13block_pointerFiPhjEEENS4_17integral_constantIiLi2EEEOT__block_invoke;
      *(void *)&long long v82 = &__block_descriptor_tmp_15;
      *((void *)&v82 + 1) = v60 + 1;
      uint64_t v83 = v60;
      atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
      aBlock[0] = (const void *)MEMORY[0x263EF8330];
      aBlock[1] = (const void *)0x40000000;
      aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_0;
      aBlock[3] = &unk_264C7D7C8;
      float64x2x2_t v62 = _Block_copy(aBlock);
      float64x2x2_t v63 = v83;
      if (v83 && !atomic_fetch_add(&v83->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
        if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
          goto LABEL_73;
        }
LABEL_72:
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
        goto LABEL_73;
      }
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_72;
      }
LABEL_73:
      *(void *)&long long v64 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v64 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v78[0] = v64;
      v78[1] = v64;
      unint64_t v79 = 0xAAAAAAAAAAAAAAAALL;
      int v65 = *(std::__shared_weak_count **)(v53 + 16);
      *(void *)long long v81 = *(void *)(v53 + 8);
      if (!v65)
      {
        *(void *)&v81[8] = 0;
LABEL_85:
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      *(void *)&v81[8] = std::__shared_weak_count::lock(v65);
      if (!*(void *)&v81[8]) {
        goto LABEL_85;
      }
      ice::SendMsgBaseProxy::SendMsgBaseProxy();
      __int16 v66 = *(std::__shared_weak_count **)&v81[8];
      if (*(void *)&v81[8]
        && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v81[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
      aBlock[0] = v62;
      ice::SendMsgBaseProxy::callback();
      uint64_t v1 = v75;
      if (aBlock[0]) {
        _Block_release(aBlock[0]);
      }
      MEMORY[0x237DF50B0](v78);
      MEMORY[0x237DF58A0](buf);
      unint64_t v7 = (v7 + 1);
      if (v74 <= v7) {
        goto LABEL_5;
      }
    }
    long long v57 = 0;
    long long v59 = *(awd::AppContext **)v75;
    uint64_t v58 = *(void *)(v75 + 8);
    if (!v58) {
      goto LABEL_69;
    }
LABEL_68:
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v58 + 8), 1uLL, memory_order_relaxed);
    goto LABEL_69;
  }
LABEL_5:
  std::unique_ptr<awd::ARIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::ARIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](&v77);
  uint64_t v5 = a1;
  long long v6 = (std::__shared_weak_count *)a1[2];
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    uint64_t v5 = a1;
  }
  operator delete(v5);
}

void sub_235DD6434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *aBlock,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  std::unique_ptr<awd::ARIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::ARIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](&a28);
  uint64_t v47 = __p;
  long long v48 = (std::__shared_weak_count *)__p[2];
  if (v48)
  {
    if (!atomic_fetch_add(&v48->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
      uint64_t v47 = __p;
    }
  }
  operator delete(v47);
  _Unwind_Resume(a1);
}

void **std::unique_ptr<awd::ARIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::ARIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](void **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = (std::__shared_weak_count *)v2[8];
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    int v4 = (const void *)v2[6];
    if (v4) {
      _Block_release(v4);
    }
    uint64_t v5 = (void *)v2[3];
    if (v5)
    {
      v2[4] = v5;
      operator delete(v5);
    }
    long long v6 = (std::__shared_weak_count *)v2[1];
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    operator delete(v2);
  }
  return a1;
}

void ___ZN3ice6detail12wrapCallbackIZZNK3awd19ARIAwdCommandDriver20sendAddConfigurationENSt3__110shared_ptrINS2_10AppContextEEENS2_11PayloadTypeERKNS4_6vectorIhNS4_9allocatorIhEEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEvEUlPKhjE_vEENSG_IU13block_pointerFiPhjEEENS4_17integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  buf[3] = *(const void **)MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
    {
      uint64_t v5 = *(void *)(v2 + 48);
      long long v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        unint64_t v7 = v6;
        if (!*(void *)v2)
        {
LABEL_25:
          if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v16[3] = v8;
        long long v17 = v8;
        v16[1] = v8;
        v16[2] = v8;
        v16[0] = v8;
        AriSdk::ARI_CsiAwdsAddConfigRspCb_SDK::ARI_CsiAwdsAddConfigRspCb_SDK((AriSdk::ARI_CsiAwdsAddConfigRspCb_SDK *)v16, a2);
        if (ice::isARIResponseValid())
        {
          if (AriSdk::ARI_CsiAwdsAddConfigRspCb_SDK::unpack((AriSdk::ARI_CsiAwdsAddConfigRspCb_SDK *)v16))
          {
            int v9 = 0;
            unint64_t v10 = *(NSObject **)(v5 + 40);
            if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_20;
            }
          }
          else
          {
            int v11 = **((_DWORD **)&v17 + 1);
            int AppID = awd::AppContext::getAppID(*(awd::AppContext **)(v2 + 24));
            if (v11) {
              BOOL v13 = 0;
            }
            else {
              BOOL v13 = *(_DWORD *)v17 == AppID;
            }
            int v9 = v13;
            unint64_t v10 = *(NSObject **)(v5 + 40);
            if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_20;
            }
          }
          char v14 = "error";
          if (v9) {
            char v14 = "success";
          }
          LODWORD(buf[0]) = 136315138;
          *(const void **)((char *)buf + 4) = v14;
          _os_log_impl(&dword_235DB9000, v10, OS_LOG_TYPE_DEFAULT, "#I Added configuration %s", (uint8_t *)buf, 0xCu);
        }
LABEL_20:
        int v15 = *(void **)(v2 + 16);
        if (v15) {
          int v15 = _Block_copy(v15);
        }
        buf[0] = v15;
        awd::AppContext::operator()();
        if (buf[0]) {
          _Block_release(buf[0]);
        }
        MEMORY[0x237DF5CB0](v16);
        goto LABEL_25;
      }
    }
  }
}

void sub_235DD688C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *aBlock)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c212_ZTSNSt3__110shared_ptrIZZNK3awd19ARIAwdCommandDriver20sendAddConfigurationENS0_INS1_10AppContextEEENS1_11PayloadTypeERKNS_6vectorIhNS_9allocatorIhEEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEvEUlPKhjE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c212_ZTSNSt3__110shared_ptrIZZNK3awd19ARIAwdCommandDriver20sendAddConfigurationENS0_INS1_10AppContextEEENS1_11PayloadTypeERKNS_6vectorIhNS_9allocatorIhEEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEvEUlPKhjE_EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<awd::ARIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<awd::ARIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93B558;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<awd::ARIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<awd::ARIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93B558;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<awd::ARIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<awd::ARIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[7];
  if (!v2 || atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v3 = (const void *)a1[5];
    if (!v3) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  uint64_t v3 = (const void *)a1[5];
  if (v3) {
LABEL_4:
  }
    _Block_release(v3);
LABEL_5:
  int v4 = (std::__shared_weak_count *)a1[4];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::ARIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::ARIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::ARIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::ARIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  v24[0] = (void *)v1;
  uint64_t v2 = *(void *)(v1 + 40);
  uint64_t v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    awd::AppContext::getAppID(*(awd::AppContext **)(v1 + 16));
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = awd::asString();
    _os_log_impl(&dword_235DB9000, v3, OS_LOG_TYPE_DEFAULT, "#I Requesting to clear configuration for app: %s", buf, 0xCu);
  }
  std::string __p = (void *)0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v36 = v4;
  long long v37 = v4;
  *(_OWORD *)long long buf = v4;
  long long v35 = v4;
  AriSdk::ARI_CsiAwdsDeleteConfigReq_SDK::ARI_CsiAwdsDeleteConfigReq_SDK((AriSdk::ARI_CsiAwdsDeleteConfigReq_SDK *)buf);
  int AppID = awd::AppContext::getAppID(*(awd::AppContext **)(v1 + 16));
  long long v6 = operator new(4uLL);
  _DWORD *v6 = AppID;
  unint64_t v7 = __p;
  std::string __p = v6;
  if (v7) {
    operator delete(v7);
  }
  uint64_t v8 = *(void *)(v2 + 144);
  unint64_t v10 = *(std::__shared_weak_count_vtbl **)v1;
  uint64_t v9 = *(void *)(v1 + 8);
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 16), 1uLL, memory_order_relaxed);
  }
  int v11 = *(const void **)(v1 + 32);
  if (!v11)
  {
    uint64_t v12 = 0;
    BOOL v13 = *(std::__shared_weak_count_vtbl **)(v1 + 16);
    uint64_t v14 = *(void *)(v1 + 24);
    if (!v14) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  uint64_t v12 = _Block_copy(v11);
  BOOL v13 = *(std::__shared_weak_count_vtbl **)(v1 + 16);
  uint64_t v14 = *(void *)(v1 + 24);
  if (v14) {
LABEL_9:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
LABEL_10:
  int v15 = (std::__shared_weak_count *)operator new(0x50uLL);
  v15->__shared_owners_ = 0;
  p_shared_owners = &v15->__shared_owners_;
  v15->__shared_weak_owners_ = 0;
  v15->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93B5D8;
  v15[1].__vftable = v10;
  v15[1].__shared_owners_ = v9;
  v15[1].__shared_weak_owners_ = (uint64_t)v12;
  v15[2].__vftable = v13;
  v15[2].__shared_owners_ = v14;
  LODWORD(v15[2].__shared_weak_owners_) = AppID;
  v15[3].__vftable = (std::__shared_weak_count_vtbl *)v2;
  *(void *)&long long v25 = MEMORY[0x263EF8330];
  *((void *)&v25 + 1) = 1174405120;
  *(void *)&long long v26 = ___ZN3ice6detail12wrapCallbackIZZNK3awd19ARIAwdCommandDriver22sendClearConfigurationENSt3__110shared_ptrINS2_10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEvEUlPKhjE_vEENS9_IU13block_pointerFiPhjEEENS4_17integral_constantIiLi2EEEOT__block_invoke;
  *((void *)&v26 + 1) = &__block_descriptor_tmp_17;
  unint64_t v27 = (unint64_t)&v15[1];
  uint64_t v28 = v15;
  atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlocunint64_t k = MEMORY[0x263EF8330];
  uint64_t v30 = 0x40000000;
  unint64_t v31 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_0;
  unint64_t v32 = &unk_264C7D7C8;
  uint64_t v33 = &v25;
  long long v17 = _Block_copy(&aBlock);
  long long v18 = v28;
  if (!v28 || atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_13:
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
LABEL_14:
  *(void *)&long long v19 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v25 = v19;
  long long v26 = v19;
  unint64_t v27 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v20 = *(std::__shared_weak_count **)(v8 + 16);
  aBlocunint64_t k = *(void *)(v8 + 8);
  if (!v20)
  {
    uint64_t v30 = 0;
LABEL_30:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v30 = (uint64_t)std::__shared_weak_count::lock(v20);
  if (!v30) {
    goto LABEL_30;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  uint64_t v21 = (std::__shared_weak_count *)v30;
  if (v30 && !atomic_fetch_add((atomic_ullong *volatile)(v30 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  v24[1] = v17;
  ice::SendMsgBaseProxy::callback();
  if (v17) {
    _Block_release(v17);
  }
  MEMORY[0x237DF50B0](&v25);
  MEMORY[0x237DF5E00](buf);
  std::unique_ptr<awd::ARIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::ARIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](v24);
  uint64_t v22 = (std::__shared_weak_count *)a1[2];
  if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  operator delete(a1);
}

void sub_235DD6EC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, char a11, void *aBlock, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void **std::unique_ptr<awd::ARIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::ARIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](void **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = (const void *)v2[4];
    if (v3) {
      _Block_release(v3);
    }
    long long v4 = (std::__shared_weak_count *)v2[3];
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint64_t v5 = (std::__shared_weak_count *)v2[1];
    if (v5) {
      std::__shared_weak_count::__release_weak(v5);
    }
    operator delete(v2);
  }
  return a1;
}

void ___ZN3ice6detail12wrapCallbackIZZNK3awd19ARIAwdCommandDriver22sendClearConfigurationENSt3__110shared_ptrINS2_10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEvEUlPKhjE_vEENS9_IU13block_pointerFiPhjEEENS4_17integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  buf[3] = *(const void **)MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
    {
      uint64_t v5 = *(void *)(v2 + 48);
      long long v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        unint64_t v7 = v6;
        if (!*(void *)v2)
        {
LABEL_25:
          if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v16[3] = v8;
        long long v17 = v8;
        v16[1] = v8;
        v16[2] = v8;
        v16[0] = v8;
        AriSdk::ARI_CsiAwdsDeleteConfigRspCb_SDK::ARI_CsiAwdsDeleteConfigRspCb_SDK((AriSdk::ARI_CsiAwdsDeleteConfigRspCb_SDK *)v16, a2);
        if (ice::isARIResponseValid())
        {
          if (AriSdk::ARI_CsiAwdsDeleteConfigRspCb_SDK::unpack((AriSdk::ARI_CsiAwdsDeleteConfigRspCb_SDK *)v16))
          {
            int v9 = 0;
            unint64_t v10 = *(NSObject **)(v5 + 40);
            if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_20;
            }
          }
          else
          {
            int v11 = **((_DWORD **)&v17 + 1);
            int AppID = awd::AppContext::getAppID(*(awd::AppContext **)(v2 + 24));
            if (v11) {
              BOOL v13 = 0;
            }
            else {
              BOOL v13 = *(_DWORD *)v17 == AppID;
            }
            int v9 = v13;
            unint64_t v10 = *(NSObject **)(v5 + 40);
            if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_20;
            }
          }
          uint64_t v14 = "error";
          if (v9) {
            uint64_t v14 = "success";
          }
          LODWORD(buf[0]) = 136315138;
          *(const void **)((char *)buf + 4) = v14;
          _os_log_impl(&dword_235DB9000, v10, OS_LOG_TYPE_DEFAULT, "#I Clear configuration %s", (uint8_t *)buf, 0xCu);
        }
LABEL_20:
        int v15 = *(void **)(v2 + 16);
        if (v15) {
          int v15 = _Block_copy(v15);
        }
        buf[0] = v15;
        awd::AppContext::operator()();
        if (buf[0]) {
          _Block_release(buf[0]);
        }
        MEMORY[0x237DF6290](v16);
        goto LABEL_25;
      }
    }
  }
}

void sub_235DD72D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *aBlock)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c163_ZTSNSt3__110shared_ptrIZZNK3awd19ARIAwdCommandDriver22sendClearConfigurationENS0_INS1_10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEvEUlPKhjE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c163_ZTSNSt3__110shared_ptrIZZNK3awd19ARIAwdCommandDriver22sendClearConfigurationENS0_INS1_10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEvEUlPKhjE_EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<awd::ARIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<awd::ARIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93B5D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<awd::ARIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<awd::ARIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93B5D8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<awd::ARIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<awd::ARIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[7];
  if (!v2 || atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v3 = (const void *)a1[5];
    if (!v3) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  uint64_t v3 = (const void *)a1[5];
  if (v3) {
LABEL_4:
  }
    _Block_release(v3);
LABEL_5:
  long long v4 = (std::__shared_weak_count *)a1[4];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::ARIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::ARIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::ARIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::ARIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v2 = *a1;
  uint64_t v30 = (void *)v2;
  uint64_t v3 = *(void *)(v2 + 40);
  long long v4 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_debug_impl(&dword_235DB9000, v4, OS_LOG_TYPE_DEBUG, "#D Requesting to update properties", buf, 2u);
  }
  long long v36 = (void *)0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v34 = v5;
  *(_OWORD *)std::string __p = v5;
  long long v32 = v5;
  long long v33 = v5;
  *(_OWORD *)long long buf = v5;
  uint64_t v29 = a1;
  AriSdk::ARI_CsiAwdsPiiLocConfigReq_SDK::ARI_CsiAwdsPiiLocConfigReq_SDK((AriSdk::ARI_CsiAwdsPiiLocConfigReq_SDK *)buf);
  int AppID = awd::AppContext::getAppID(*(awd::AppContext **)(v2 + 16));
  int Properties = awd::AppContext::getProperties(*(awd::AppContext **)(v2 + 16));
  long long v8 = operator new(4uLL);
  *long long v8 = AppID;
  int v9 = __p[0];
  __p[0] = v8;
  if (v9) {
    operator delete(v9);
  }
  unint64_t v10 = operator new(1uLL);
  *unint64_t v10 = BYTE1(Properties) & 1;
  int v11 = __p[1];
  __p[1] = v10;
  if (v11) {
    operator delete(v11);
  }
  uint64_t v12 = operator new(1uLL);
  *uint64_t v12 = BYTE2(Properties) & 1;
  BOOL v13 = v36;
  long long v36 = v12;
  if (v13) {
    operator delete(v13);
  }
  uint64_t v14 = *(void *)(v3 + 144);
  BOOL v16 = *(std::__shared_weak_count_vtbl **)v2;
  uint64_t v15 = *(void *)(v2 + 8);
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 16), 1uLL, memory_order_relaxed);
  }
  long long v17 = *(const void **)(v2 + 32);
  if (!v17)
  {
    long long v18 = 0;
    long long v19 = *(std::__shared_weak_count_vtbl **)(v2 + 16);
    uint64_t v20 = *(void *)(v2 + 24);
    if (!v20) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  long long v18 = _Block_copy(v17);
  long long v19 = *(std::__shared_weak_count_vtbl **)(v2 + 16);
  uint64_t v20 = *(void *)(v2 + 24);
  if (v20) {
LABEL_13:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
LABEL_14:
  uint64_t v21 = (std::__shared_weak_count *)operator new(0x50uLL);
  v21->__shared_owners_ = 0;
  p_shared_owners = &v21->__shared_owners_;
  v21->__shared_weak_owners_ = 0;
  v21->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93B658;
  v21[1].__vftable = v16;
  v21[1].__shared_owners_ = v15;
  v21[1].__shared_weak_owners_ = (uint64_t)v18;
  v21[2].__vftable = v19;
  v21[2].__shared_owners_ = v20;
  LODWORD(v21[2].__shared_weak_owners_) = AppID;
  v21[3].__vftable = (std::__shared_weak_count_vtbl *)v3;
  *(void *)&long long v38 = MEMORY[0x263EF8330];
  *((void *)&v38 + 1) = 1174405120;
  *(void *)&long long v39 = ___ZN3ice6detail12wrapCallbackIZZNK3awd19ARIAwdCommandDriver20sendUpdatePropertiesENSt3__110shared_ptrINS2_10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEvEUlPKhjE_vEENS9_IU13block_pointerFiPhjEEENS4_17integral_constantIiLi2EEEOT__block_invoke;
  *((void *)&v39 + 1) = &__block_descriptor_tmp_19;
  unint64_t v40 = (unint64_t)&v21[1];
  char v41 = v21;
  atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlocunint64_t k = MEMORY[0x263EF8330];
  uint64_t v43 = 0x40000000;
  long long v44 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_0;
  uint64_t v45 = &unk_264C7D7C8;
  unint64_t v46 = &v38;
  xpc_object_t v23 = _Block_copy(&aBlock);
  xpc_object_t v24 = v41;
  if (!v41 || atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
  std::__shared_weak_count::__release_weak(v24);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_17:
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
LABEL_18:
  *(void *)&long long v25 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v25 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v38 = v25;
  long long v39 = v25;
  unint64_t v40 = 0xAAAAAAAAAAAAAAAALL;
  long long v26 = *(std::__shared_weak_count **)(v14 + 16);
  aBlocunint64_t k = *(void *)(v14 + 8);
  if (!v26)
  {
    uint64_t v43 = 0;
LABEL_34:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v43 = (uint64_t)std::__shared_weak_count::lock(v26);
  if (!v43) {
    goto LABEL_34;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  unint64_t v27 = (std::__shared_weak_count *)v43;
  if (v43 && !atomic_fetch_add((atomic_ullong *volatile)(v43 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  long long v37 = v23;
  ice::SendMsgBaseProxy::callback();
  if (v37) {
    _Block_release(v37);
  }
  MEMORY[0x237DF50B0](&v38);
  MEMORY[0x237DF5E40](buf);
  std::unique_ptr<awd::ARIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::ARIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](&v30);
  uint64_t v28 = (std::__shared_weak_count *)v29[2];
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  operator delete(v29);
}

void sub_235DD7928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, void *a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *aBlock,char a25)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  MEMORY[0x237DF50B0](&a25);
  MEMORY[0x237DF5E40](&a11);
  std::unique_ptr<awd::ARIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::ARIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  long long v26 = (std::__shared_weak_count *)__p[2];
  if (v26)
  {
    if (!atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  operator delete(__p);
  _Unwind_Resume(a1);
}

void **std::unique_ptr<awd::ARIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::ARIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](void **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = (const void *)v2[4];
    if (v3) {
      _Block_release(v3);
    }
    long long v4 = (std::__shared_weak_count *)v2[3];
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    long long v5 = (std::__shared_weak_count *)v2[1];
    if (v5) {
      std::__shared_weak_count::__release_weak(v5);
    }
    operator delete(v2);
  }
  return a1;
}

void ___ZN3ice6detail12wrapCallbackIZZNK3awd19ARIAwdCommandDriver20sendUpdatePropertiesENSt3__110shared_ptrINS2_10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEvEUlPKhjE_vEENS9_IU13block_pointerFiPhjEEENS4_17integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  aBlock[3] = *(const void **)MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
    {
      uint64_t v5 = *(void *)(v2 + 48);
      long long v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        unint64_t v7 = v6;
        if (!*(void *)v2)
        {
LABEL_23:
          if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v16[3] = v8;
        long long v17 = v8;
        v16[1] = v8;
        v16[2] = v8;
        v16[0] = v8;
        AriSdk::ARI_CsiAwdsPiiLocConfigRspCb_SDK::ARI_CsiAwdsPiiLocConfigRspCb_SDK((AriSdk::ARI_CsiAwdsPiiLocConfigRspCb_SDK *)v16, a2);
        if (!ice::isARIResponseValid())
        {
          int v11 = *(void **)(v2 + 16);
          if (!v11) {
            goto LABEL_20;
          }
          goto LABEL_19;
        }
        if (AriSdk::ARI_CsiAwdsPiiLocConfigRspCb_SDK::unpack((AriSdk::ARI_CsiAwdsPiiLocConfigRspCb_SDK *)v16))
        {
          int v9 = 0;
          unint64_t v10 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_26;
          }
        }
        else
        {
          int v12 = **((_DWORD **)&v17 + 1);
          int AppID = awd::AppContext::getAppID(*(awd::AppContext **)(v2 + 24));
          if (v12) {
            BOOL v14 = 0;
          }
          else {
            BOOL v14 = *(_DWORD *)v17 == AppID;
          }
          int v9 = v14;
          unint64_t v10 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
          {
LABEL_26:
            uint64_t v15 = "error";
            if (v9) {
              uint64_t v15 = "success";
            }
            LODWORD(aBlock[0]) = 136315138;
            *(const void **)((char *)aBlock + 4) = v15;
            _os_log_debug_impl(&dword_235DB9000, v10, OS_LOG_TYPE_DEBUG, "#D Update properties %s", (uint8_t *)aBlock, 0xCu);
            int v11 = *(void **)(v2 + 16);
            if (!v11) {
              goto LABEL_20;
            }
            goto LABEL_19;
          }
        }
        int v11 = *(void **)(v2 + 16);
        if (!v11)
        {
LABEL_20:
          aBlock[0] = v11;
          awd::AppContext::operator()();
          if (aBlock[0]) {
            _Block_release(aBlock[0]);
          }
          MEMORY[0x237DF62F0](v16);
          goto LABEL_23;
        }
LABEL_19:
        int v11 = _Block_copy(v11);
        goto LABEL_20;
      }
    }
  }
}

void sub_235DD7D40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *aBlock)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c161_ZTSNSt3__110shared_ptrIZZNK3awd19ARIAwdCommandDriver20sendUpdatePropertiesENS0_INS1_10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEvEUlPKhjE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c161_ZTSNSt3__110shared_ptrIZZNK3awd19ARIAwdCommandDriver20sendUpdatePropertiesENS0_INS1_10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEvEUlPKhjE_EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<awd::ARIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<awd::ARIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93B658;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<awd::ARIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<awd::ARIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93B658;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<awd::ARIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<awd::ARIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[7];
  if (!v2 || atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v3 = (const void *)a1[5];
    if (!v3) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  uint64_t v3 = (const void *)a1[5];
  if (v3) {
LABEL_4:
  }
    _Block_release(v3);
LABEL_5:
  long long v4 = (std::__shared_weak_count *)a1[4];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::ARIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::ARIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::ARIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::ARIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  long long v37 = (void *)v1;
  uint64_t v2 = *(void *)(v1 + 72);
  uint64_t v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    awd::asString();
    long long v35 = (SBYTE7(v39) & 0x80u) == 0 ? v38 : (void **)v38[0];
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v35;
    _os_log_debug_impl(&dword_235DB9000, v3, OS_LOG_TYPE_DEBUG, "#D Querying metric: %s", (uint8_t *)&buf, 0xCu);
    if (SBYTE7(v39) < 0) {
      operator delete(v38[0]);
    }
  }
  unint64_t v45 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)uint64_t v43 = v4;
  *(_OWORD *)long long v44 = v4;
  long long v41 = v4;
  *(_OWORD *)std::string __p = v4;
  long long v39 = v4;
  long long v40 = v4;
  *(_OWORD *)long long v38 = v4;
  AriSdk::ARI_CsiAwdsQueryReq_SDK::ARI_CsiAwdsQueryReq_SDK((AriSdk::ARI_CsiAwdsQueryReq_SDK *)v38);
  int AppID = awd::AppContext::getAppID(*(awd::AppContext **)(v1 + 16));
  long long v6 = operator new(4uLL);
  _DWORD *v6 = AppID;
  unint64_t v7 = __p[0];
  __p[0] = v6;
  if (v7) {
    operator delete(v7);
  }
  int v8 = *(_DWORD *)(v1 + 44);
  int v9 = operator new(4uLL);
  *int v9 = v8;
  unint64_t v10 = __p[1];
  __p[1] = v9;
  if (v10) {
    operator delete(v10);
  }
  int v11 = *(_DWORD *)(v1 + 36);
  int v12 = operator new(4uLL);
  *int v12 = v11;
  BOOL v13 = v43[1];
  v43[1] = v12;
  if (v13) {
    operator delete(v13);
  }
  BOOL v14 = operator new(4uLL);
  _DWORD *v14 = 0;
  uint64_t v15 = v43[0];
  v43[0] = v14;
  if (v15) {
    operator delete(v15);
  }
  BOOL v16 = operator new(4uLL);
  *BOOL v16 = 0;
  long long v17 = v44[0];
  v44[0] = v16;
  if (v17) {
    operator delete(v17);
  }
  long long v18 = operator new(4uLL);
  _DWORD *v18 = 0;
  long long v19 = v44[1];
  v44[1] = v18;
  if (v19) {
    operator delete(v19);
  }
  uint64_t v20 = *(void *)(v2 + 144);
  uint64_t v22 = *(std::__shared_weak_count_vtbl **)v1;
  uint64_t v21 = *(void *)(v1 + 8);
  if (v21) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 16), 1uLL, memory_order_relaxed);
  }
  xpc_object_t v23 = *(const void **)(v1 + 64);
  if (!v23)
  {
    xpc_object_t v24 = 0;
    long long v25 = *(std::__shared_weak_count_vtbl **)(v1 + 16);
    uint64_t v26 = *(void *)(v1 + 24);
    if (!v26) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  xpc_object_t v24 = _Block_copy(v23);
  long long v25 = *(std::__shared_weak_count_vtbl **)(v1 + 16);
  uint64_t v26 = *(void *)(v1 + 24);
  if (v26) {
LABEL_18:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
LABEL_19:
  unint64_t v27 = (std::__shared_weak_count *)operator new(0x50uLL);
  v27->__shared_owners_ = 0;
  p_shared_owners = &v27->__shared_owners_;
  v27->__shared_weak_owners_ = 0;
  v27->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93B6D8;
  v27[1].__vftable = v22;
  v27[1].__shared_owners_ = v21;
  v27[1].__shared_weak_owners_ = (uint64_t)v24;
  v27[2].__vftable = v25;
  v27[2].__shared_owners_ = v26;
  LODWORD(v27[2].__shared_weak_owners_) = AppID;
  v27[3].__vftable = (std::__shared_weak_count_vtbl *)v2;
  *(void *)&long long buf = MEMORY[0x263EF8330];
  *((void *)&buf + 1) = 1174405120;
  *(void *)&long long v53 = ___ZN3ice6detail12wrapCallbackIZZNK3awd19ARIAwdCommandDriver19sendQueriableMetricENSt3__110shared_ptrINS2_10AppContextEEERKNS2_10MetricInfoEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEvEUlPKhjE_vEENSC_IU13block_pointerFiPhjEEENS4_17integral_constantIiLi2EEEOT__block_invoke;
  *((void *)&v53 + 1) = &__block_descriptor_tmp_21;
  unint64_t v54 = (unint64_t)&v27[1];
  uint64_t v55 = v27;
  atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlocunint64_t k = MEMORY[0x263EF8330];
  uint64_t v48 = 0x40000000;
  char v49 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_0;
  unint64_t v50 = &unk_264C7D7C8;
  p_long long buf = &buf;
  uint64_t v29 = _Block_copy(&aBlock);
  uint64_t v30 = v55;
  if (!v55 || atomic_fetch_add(&v55->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
  std::__shared_weak_count::__release_weak(v30);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_22:
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
LABEL_23:
  *(void *)&long long v31 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v31 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long buf = v31;
  long long v53 = v31;
  unint64_t v54 = 0xAAAAAAAAAAAAAAAALL;
  long long v32 = *(std::__shared_weak_count **)(v20 + 16);
  aBlocunint64_t k = *(void *)(v20 + 8);
  if (!v32)
  {
    uint64_t v48 = 0;
LABEL_44:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v48 = (uint64_t)std::__shared_weak_count::lock(v32);
  if (!v48) {
    goto LABEL_44;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  long long v33 = (std::__shared_weak_count *)v48;
  if (v48 && !atomic_fetch_add((atomic_ullong *volatile)(v48 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
  unint64_t v46 = v29;
  ice::SendMsgBaseProxy::callback();
  if (v46) {
    _Block_release(v46);
  }
  MEMORY[0x237DF50B0](&buf);
  MEMORY[0x237DF53B0](v38);
  std::unique_ptr<awd::ARIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::ARIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](&v37);
  long long v34 = (std::__shared_weak_count *)a1[2];
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
  operator delete(a1);
}

void sub_235DD8458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *aBlock,uint64_t a31,uint64_t a32)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void **std::unique_ptr<awd::ARIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::ARIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](void **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = (const void *)v2[8];
    if (v3) {
      _Block_release(v3);
    }
    long long v4 = (std::__shared_weak_count *)v2[3];
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint64_t v5 = (std::__shared_weak_count *)v2[1];
    if (v5) {
      std::__shared_weak_count::__release_weak(v5);
    }
    operator delete(v2);
  }
  return a1;
}

void ___ZN3ice6detail12wrapCallbackIZZNK3awd19ARIAwdCommandDriver19sendQueriableMetricENSt3__110shared_ptrINS2_10AppContextEEERKNS2_10MetricInfoEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEvEUlPKhjE_vEENSC_IU13block_pointerFiPhjEEENS4_17integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  aBlock[3] = *(const void **)MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
    {
      uint64_t v5 = *(void *)(v2 + 48);
      long long v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        unint64_t v7 = v6;
        if (!*(void *)v2)
        {
LABEL_23:
          if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v16[3] = v8;
        long long v17 = v8;
        v16[1] = v8;
        v16[2] = v8;
        v16[0] = v8;
        AriSdk::ARI_CsiAwdsQueryRspCb_SDK::ARI_CsiAwdsQueryRspCb_SDK((AriSdk::ARI_CsiAwdsQueryRspCb_SDK *)v16, a2);
        if (!ice::isARIResponseValid())
        {
          int v11 = *(void **)(v2 + 16);
          if (!v11) {
            goto LABEL_20;
          }
          goto LABEL_19;
        }
        if (AriSdk::ARI_CsiAwdsQueryRspCb_SDK::unpack((AriSdk::ARI_CsiAwdsQueryRspCb_SDK *)v16))
        {
          int v9 = 0;
          unint64_t v10 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_26;
          }
        }
        else
        {
          int v12 = **((_DWORD **)&v17 + 1);
          int AppID = awd::AppContext::getAppID(*(awd::AppContext **)(v2 + 24));
          if (v12) {
            BOOL v14 = 0;
          }
          else {
            BOOL v14 = *(_DWORD *)v17 == AppID;
          }
          int v9 = v14;
          unint64_t v10 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
          {
LABEL_26:
            uint64_t v15 = "error";
            if (v9) {
              uint64_t v15 = "success";
            }
            LODWORD(aBlock[0]) = 136315138;
            *(const void **)((char *)aBlock + 4) = v15;
            _os_log_debug_impl(&dword_235DB9000, v10, OS_LOG_TYPE_DEBUG, "#D Metric query %s", (uint8_t *)aBlock, 0xCu);
            int v11 = *(void **)(v2 + 16);
            if (!v11) {
              goto LABEL_20;
            }
            goto LABEL_19;
          }
        }
        int v11 = *(void **)(v2 + 16);
        if (!v11)
        {
LABEL_20:
          aBlock[0] = v11;
          awd::AppContext::operator()();
          if (aBlock[0]) {
            _Block_release(aBlock[0]);
          }
          MEMORY[0x237DF5610](v16);
          goto LABEL_23;
        }
LABEL_19:
        int v11 = _Block_copy(v11);
        goto LABEL_20;
      }
    }
  }
}

void sub_235DD8890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *aBlock)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c179_ZTSNSt3__110shared_ptrIZZNK3awd19ARIAwdCommandDriver19sendQueriableMetricENS0_INS1_10AppContextEEERKNS1_10MetricInfoEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEvEUlPKhjE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c179_ZTSNSt3__110shared_ptrIZZNK3awd19ARIAwdCommandDriver19sendQueriableMetricENS0_INS1_10AppContextEEERKNS1_10MetricInfoEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEvEUlPKhjE_EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<awd::ARIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<awd::ARIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93B6D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<awd::ARIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<awd::ARIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93B6D8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<awd::ARIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<awd::ARIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[7];
  if (!v2 || atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v3 = (const void *)a1[5];
    if (!v3) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  uint64_t v3 = (const void *)a1[5];
  if (v3) {
LABEL_4:
  }
    _Block_release(v3);
LABEL_5:
  long long v4 = (std::__shared_weak_count *)a1[4];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::ARIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,awd::TriggerInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::ARIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,awd::TriggerInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::ARIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,awd::TriggerInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::ARIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,awd::TriggerInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  long long v41 = (void *)v1;
  uint64_t v2 = *(void *)(v1 + 96);
  uint64_t v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    awd::asString();
    awd::asString();
    long long v38 = v42;
    if (SBYTE7(v43) < 0) {
      long long v38 = (void **)v42[0];
    }
    if ((SBYTE7(v52) & 0x80u) == 0) {
      long long v39 = &v51;
    }
    else {
      long long v39 = (long long *)v51;
    }
    *(_DWORD *)aBlocunint64_t k = 136315394;
    *(void *)&aBlock[4] = v38;
    *(_WORD *)&aBlock[12] = 2080;
    *(void *)&aBlock[14] = v39;
    _os_log_debug_impl(&dword_235DB9000, v3, OS_LOG_TYPE_DEBUG, "#D Querying metric: %s with trigger: %s", aBlock, 0x16u);
    if (SBYTE7(v52) < 0) {
      operator delete((void *)v51);
    }
    if (SBYTE7(v43) < 0) {
      operator delete(v42[0]);
    }
  }
  unint64_t v49 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)uint64_t v47 = v4;
  *(_OWORD *)uint64_t v48 = v4;
  long long v45 = v4;
  *(_OWORD *)std::string __p = v4;
  long long v43 = v4;
  long long v44 = v4;
  *(_OWORD *)unint64_t v42 = v4;
  AriSdk::ARI_CsiAwdsQueryReq_SDK::ARI_CsiAwdsQueryReq_SDK((AriSdk::ARI_CsiAwdsQueryReq_SDK *)v42);
  int AppID = awd::AppContext::getAppID(*(awd::AppContext **)(v1 + 16));
  long long v6 = operator new(4uLL);
  _DWORD *v6 = AppID;
  unint64_t v7 = __p[0];
  __p[0] = v6;
  if (v7) {
    operator delete(v7);
  }
  int v8 = *(_DWORD *)(v1 + 68);
  int v9 = operator new(4uLL);
  *int v9 = v8;
  unint64_t v10 = __p[1];
  __p[1] = v9;
  if (v10) {
    operator delete(v10);
  }
  int v11 = *(_DWORD *)(v1 + 72);
  int v12 = operator new(4uLL);
  *int v12 = v11;
  BOOL v13 = v47[0];
  v47[0] = v12;
  if (v13) {
    operator delete(v13);
  }
  int v14 = *(_DWORD *)(v1 + 64);
  uint64_t v15 = operator new(4uLL);
  *uint64_t v15 = v14;
  BOOL v16 = v47[1];
  v47[1] = v15;
  if (v16) {
    operator delete(v16);
  }
  int v17 = *(_DWORD *)(v1 + 32);
  long long v18 = operator new(4uLL);
  _DWORD *v18 = v17;
  long long v19 = v48[0];
  v48[0] = v18;
  if (v19) {
    operator delete(v19);
  }
  int v20 = *(_DWORD *)(v1 + 36);
  uint64_t v21 = operator new(4uLL);
  *uint64_t v21 = v20;
  uint64_t v22 = v48[1];
  v48[1] = v21;
  if (v22) {
    operator delete(v22);
  }
  uint64_t v23 = *(void *)(v2 + 144);
  long long v25 = *(std::__shared_weak_count_vtbl **)v1;
  uint64_t v24 = *(void *)(v1 + 8);
  if (v24) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v26 = *(const void **)(v1 + 88);
  if (!v26)
  {
    unint64_t v27 = 0;
    uint64_t v28 = *(std::__shared_weak_count_vtbl **)(v1 + 16);
    uint64_t v29 = *(void *)(v1 + 24);
    if (!v29) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  unint64_t v27 = _Block_copy(v26);
  uint64_t v28 = *(std::__shared_weak_count_vtbl **)(v1 + 16);
  uint64_t v29 = *(void *)(v1 + 24);
  if (v29) {
LABEL_18:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
LABEL_19:
  uint64_t v30 = (std::__shared_weak_count *)operator new(0x50uLL);
  v30->__shared_owners_ = 0;
  p_shared_owners = &v30->__shared_owners_;
  v30->__shared_weak_owners_ = 0;
  v30->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93B758;
  v30[1].__vftable = v25;
  v30[1].__shared_owners_ = v24;
  v30[1].__shared_weak_owners_ = (uint64_t)v27;
  v30[2].__vftable = v28;
  v30[2].__shared_owners_ = v29;
  LODWORD(v30[2].__shared_weak_owners_) = AppID;
  v30[3].__vftable = (std::__shared_weak_count_vtbl *)v2;
  *(void *)&long long v51 = MEMORY[0x263EF8330];
  *((void *)&v51 + 1) = 1174405120;
  *(void *)&long long v52 = ___ZN3ice6detail12wrapCallbackIZZNK3awd19ARIAwdCommandDriver19sendQueriableMetricENSt3__110shared_ptrINS2_10AppContextEEERKNS2_10MetricInfoERKNS2_11TriggerInfoEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEvEUlPKhjE_vEENSF_IU13block_pointerFiPhjEEENS4_17integral_constantIiLi2EEEOT__block_invoke;
  *((void *)&v52 + 1) = &__block_descriptor_tmp_23_0;
  unint64_t v53 = (unint64_t)&v30[1];
  unint64_t v54 = v30;
  atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
  *(void *)aBlocunint64_t k = MEMORY[0x263EF8330];
  *(void *)&aBlock[8] = 0x40000000;
  *(void *)&aBlock[16] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_0;
  uint64_t v56 = &unk_264C7D7C8;
  long long v57 = &v51;
  long long v32 = _Block_copy(aBlock);
  long long v33 = v54;
  if (!v54 || atomic_fetch_add(&v54->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
  std::__shared_weak_count::__release_weak(v33);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_22:
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
LABEL_23:
  *(void *)&long long v34 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v34 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v51 = v34;
  long long v52 = v34;
  unint64_t v53 = 0xAAAAAAAAAAAAAAAALL;
  long long v35 = *(std::__shared_weak_count **)(v23 + 16);
  *(void *)aBlocunint64_t k = *(void *)(v23 + 8);
  if (!v35)
  {
    *(void *)&aBlock[8] = 0;
LABEL_48:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  *(void *)&aBlock[8] = std::__shared_weak_count::lock(v35);
  if (!*(void *)&aBlock[8]) {
    goto LABEL_48;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  long long v36 = *(std::__shared_weak_count **)&aBlock[8];
  if (*(void *)&aBlock[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&aBlock[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
  }
  unint64_t v50 = v32;
  ice::SendMsgBaseProxy::callback();
  if (v50) {
    _Block_release(v50);
  }
  MEMORY[0x237DF50B0](&v51);
  MEMORY[0x237DF53B0](v42);
  std::unique_ptr<awd::ARIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,awd::TriggerInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::ARIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,awd::TriggerInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](&v41);
  long long v37 = (std::__shared_weak_count *)a1[2];
  if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
  }
  operator delete(a1);
}

void sub_235DD8FEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *aBlock,char a30)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void **std::unique_ptr<awd::ARIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,awd::TriggerInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::ARIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,awd::TriggerInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](void **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = (const void *)v2[11];
    if (v3) {
      _Block_release(v3);
    }
    long long v4 = (std::__shared_weak_count *)v2[3];
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    uint64_t v5 = (std::__shared_weak_count *)v2[1];
    if (v5) {
      std::__shared_weak_count::__release_weak(v5);
    }
    operator delete(v2);
  }
  return a1;
}

void ___ZN3ice6detail12wrapCallbackIZZNK3awd19ARIAwdCommandDriver19sendQueriableMetricENSt3__110shared_ptrINS2_10AppContextEEERKNS2_10MetricInfoERKNS2_11TriggerInfoEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEvEUlPKhjE_vEENSF_IU13block_pointerFiPhjEEENS4_17integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  aBlock[3] = *(const void **)MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
    {
      uint64_t v5 = *(void *)(v2 + 48);
      long long v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        unint64_t v7 = v6;
        if (!*(void *)v2)
        {
LABEL_23:
          if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v16[3] = v8;
        long long v17 = v8;
        v16[1] = v8;
        v16[2] = v8;
        v16[0] = v8;
        AriSdk::ARI_CsiAwdsQueryRspCb_SDK::ARI_CsiAwdsQueryRspCb_SDK((AriSdk::ARI_CsiAwdsQueryRspCb_SDK *)v16, a2);
        if (!ice::isARIResponseValid())
        {
          int v11 = *(void **)(v2 + 16);
          if (!v11) {
            goto LABEL_20;
          }
          goto LABEL_19;
        }
        if (AriSdk::ARI_CsiAwdsQueryRspCb_SDK::unpack((AriSdk::ARI_CsiAwdsQueryRspCb_SDK *)v16))
        {
          int v9 = 0;
          unint64_t v10 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_26;
          }
        }
        else
        {
          int v12 = **((_DWORD **)&v17 + 1);
          int AppID = awd::AppContext::getAppID(*(awd::AppContext **)(v2 + 24));
          if (v12) {
            BOOL v14 = 0;
          }
          else {
            BOOL v14 = *(_DWORD *)v17 == AppID;
          }
          int v9 = v14;
          unint64_t v10 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
          {
LABEL_26:
            uint64_t v15 = "error";
            if (v9) {
              uint64_t v15 = "success";
            }
            LODWORD(aBlock[0]) = 136315138;
            *(const void **)((char *)aBlock + 4) = v15;
            _os_log_debug_impl(&dword_235DB9000, v10, OS_LOG_TYPE_DEBUG, "#D Metric query %s", (uint8_t *)aBlock, 0xCu);
            int v11 = *(void **)(v2 + 16);
            if (!v11) {
              goto LABEL_20;
            }
            goto LABEL_19;
          }
        }
        int v11 = *(void **)(v2 + 16);
        if (!v11)
        {
LABEL_20:
          aBlock[0] = v11;
          awd::AppContext::operator()();
          if (aBlock[0]) {
            _Block_release(aBlock[0]);
          }
          MEMORY[0x237DF5610](v16);
          goto LABEL_23;
        }
LABEL_19:
        int v11 = _Block_copy(v11);
        goto LABEL_20;
      }
    }
  }
}

void sub_235DD943C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *aBlock)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c199_ZTSNSt3__110shared_ptrIZZNK3awd19ARIAwdCommandDriver19sendQueriableMetricENS0_INS1_10AppContextEEERKNS1_10MetricInfoERKNS1_11TriggerInfoEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEvEUlPKhjE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c199_ZTSNSt3__110shared_ptrIZZNK3awd19ARIAwdCommandDriver19sendQueriableMetricENS0_INS1_10AppContextEEERKNS1_10MetricInfoERKNS1_11TriggerInfoEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEvEUlPKhjE_EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<awd::ARIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,awd::TriggerInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<awd::ARIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,awd::TriggerInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93B758;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<awd::ARIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,awd::TriggerInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<awd::ARIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,awd::TriggerInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93B758;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<awd::ARIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,awd::TriggerInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<awd::ARIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,awd::TriggerInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[7];
  if (!v2 || atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v3 = (const void *)a1[5];
    if (!v3) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  uint64_t v3 = (const void *)a1[5];
  if (v3) {
LABEL_4:
  }
    _Block_release(v3);
LABEL_5:
  long long v4 = (std::__shared_weak_count *)a1[4];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::ARIAwdCommandDriver::init(void)::$_0>(awd::ARIAwdCommandDriver::init(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::ARIAwdCommandDriver::init(void)::$_0,dispatch_queue_s *::default_delete<awd::ARIAwdCommandDriver::init(void)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  long long v4 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v41) = 0;
    _os_log_debug_impl(&dword_235DB9000, v4, OS_LOG_TYPE_DEBUG, "#D Init", (uint8_t *)&v41, 2u);
    uint64_t v5 = *(std::__shared_weak_count **)(v3 + 80);
    if (!v5) {
      goto LABEL_63;
    }
  }
  else
  {
    uint64_t v5 = *(std::__shared_weak_count **)(v3 + 80);
    if (!v5) {
      goto LABEL_63;
    }
  }
  long long v6 = *(std::__shared_weak_count_vtbl **)(v3 + 72);
  unint64_t v7 = std::__shared_weak_count::lock(v5);
  if (!v7) {
    goto LABEL_63;
  }
  long long v8 = v7;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  p_shared_weak_owners = &v7->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  unint64_t v10 = (std::__shared_weak_count *)operator new(0x38uLL);
  v10->__shared_owners_ = 0;
  p_shared_owners = &v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93B7D8;
  v10[1].__vftable = v6;
  v10[1].__shared_owners_ = (uint64_t)v8;
  v10[1].__shared_weak_owners_ = (uint64_t)awd::ARIAwdCommandDriver::handleClientStarted_sync;
  v10[2].__vftable = 0;
  long long v41 = (void *)MEMORY[0x263EF8330];
  uint64_t v42 = 1174405120;
  long long v43 = ___ZN3ice6detail17wrapEventCallbackIZNS_6Client15setEventHandlerIN3awd16AwdCommandDriverENS4_19ARIAwdCommandDriverEvJEEEvNS2_5EventENSt3__110shared_ptrIT_EEMT0_FT1_DpT2_EEUlvE_vEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENS8_17integral_constantIiLi0EEEOSA__block_invoke;
  long long v44 = &__block_descriptor_tmp_26_0;
  long long v45 = v10 + 1;
  unint64_t v46 = v10;
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlocunint64_t k = MEMORY[0x263EF8330];
  uint64_t v48 = 0x40000000;
  unint64_t v49 = ___ZN3ice6detail17wrapEventCallbackIvEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi0EEEU13block_pointerFT_vE_block_invoke_0;
  unint64_t v50 = &unk_264C7D7F0;
  long long v51 = &v41;
  int v12 = _Block_copy(&aBlock);
  BOOL v13 = v46;
  if (!v46 || atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_9;
    }
LABEL_12:
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if (v12) {
      goto LABEL_10;
    }
    goto LABEL_13;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_12;
  }
LABEL_9:
  if (v12)
  {
LABEL_10:
    BOOL v14 = _Block_copy(v12);
    goto LABEL_14;
  }
LABEL_13:
  BOOL v14 = 0;
LABEL_14:
  long long v41 = v14;
  ice::Client::regEventHandlerInternal();
  if (v41) {
    _Block_release(v41);
  }
  if (v12) {
    _Block_release(v12);
  }
  std::__shared_weak_count::__release_weak(v8);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v16 = v2[1];
  uint64_t v15 = v2[2];
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 16), 1uLL, memory_order_relaxed);
  }
  long long v17 = (std::__shared_weak_count *)operator new(0x30uLL);
  v17->__shared_owners_ = 0;
  long long v18 = &v17->__shared_owners_;
  v17->__shared_weak_owners_ = 0;
  v17[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93B858;
  v17[1].__shared_owners_ = v16;
  v17[1].__shared_weak_owners_ = v15;
  long long v41 = (void *)MEMORY[0x263EF8330];
  uint64_t v42 = 1174405120;
  long long v43 = ___ZN3ice6detail17wrapEventCallbackIZZN3awd19ARIAwdCommandDriver4initEvENK3__0clEvEUlvE_vEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi0EEEOT__block_invoke;
  long long v44 = &__block_descriptor_tmp_30_0;
  long long v45 = v17 + 1;
  unint64_t v46 = v17;
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlocunint64_t k = MEMORY[0x263EF8330];
  uint64_t v48 = 0x40000000;
  unint64_t v49 = ___ZN3ice6detail17wrapEventCallbackIvEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi0EEEU13block_pointerFT_vE_block_invoke_0;
  unint64_t v50 = &unk_264C7D7F0;
  long long v51 = &v41;
  long long v19 = _Block_copy(&aBlock);
  int v20 = v46;
  if (!v46 || atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(v18, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_25;
    }
LABEL_28:
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    if (v19) {
      goto LABEL_26;
    }
    goto LABEL_29;
  }
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  if (!atomic_fetch_add(v18, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_28;
  }
LABEL_25:
  if (v19)
  {
LABEL_26:
    uint64_t v21 = _Block_copy(v19);
    goto LABEL_30;
  }
LABEL_29:
  uint64_t v21 = 0;
LABEL_30:
  long long v41 = v21;
  ice::Client::regEventHandlerInternal();
  if (v41) {
    _Block_release(v41);
  }
  if (v19) {
    _Block_release(v19);
  }
  uint64_t v23 = v2[1];
  uint64_t v22 = v2[2];
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v24 = (std::__shared_weak_count *)operator new(0x30uLL);
  v24->__shared_owners_ = 0;
  long long v25 = &v24->__shared_owners_;
  v24->__shared_weak_owners_ = 0;
  v24[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  v24->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93B8D8;
  v24[1].__shared_owners_ = v23;
  v24[1].__shared_weak_owners_ = v22;
  long long v41 = (void *)MEMORY[0x263EF8330];
  uint64_t v42 = 1174405120;
  long long v43 = ___ZN3ice6detail17wrapEventCallbackIZZN3awd19ARIAwdCommandDriver4initEvENK3__0clEvEUlvE0_vEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi0EEEOT__block_invoke;
  long long v44 = &__block_descriptor_tmp_32;
  long long v45 = v24 + 1;
  unint64_t v46 = v24;
  atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlocunint64_t k = MEMORY[0x263EF8330];
  uint64_t v48 = 0x40000000;
  unint64_t v49 = ___ZN3ice6detail17wrapEventCallbackIvEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi0EEEU13block_pointerFT_vE_block_invoke_0;
  unint64_t v50 = &unk_264C7D7F0;
  long long v51 = &v41;
  uint64_t v26 = _Block_copy(&aBlock);
  unint64_t v27 = v46;
  if (!v46 || atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(v25, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_39;
    }
LABEL_42:
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
    if (v26) {
      goto LABEL_40;
    }
    goto LABEL_43;
  }
  ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
  std::__shared_weak_count::__release_weak(v27);
  if (!atomic_fetch_add(v25, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_42;
  }
LABEL_39:
  if (v26)
  {
LABEL_40:
    uint64_t v28 = _Block_copy(v26);
    goto LABEL_44;
  }
LABEL_43:
  uint64_t v28 = 0;
LABEL_44:
  long long v41 = v28;
  ice::Client::regEventHandlerInternal();
  if (v41) {
    _Block_release(v41);
  }
  if (v26) {
    _Block_release(v26);
  }
  uint64_t v29 = *(std::__shared_weak_count **)(v3 + 80);
  if (!v29) {
    goto LABEL_63;
  }
  uint64_t v30 = *(void *)(v3 + 144);
  long long v31 = *(std::__shared_weak_count_vtbl **)(v3 + 72);
  long long v32 = std::__shared_weak_count::lock(v29);
  if (!v32) {
    goto LABEL_63;
  }
  long long v33 = v32;
  ice::Client::regIndication<awd::AwdCommandDriver,awd::ARIAwdCommandDriver,void,unsigned char const*,unsigned int>(v30, 3452829696, v31, v32, (uint64_t)awd::ARIAwdCommandDriver::handleMetricSubmissionInd_sync, 0);
  if (!atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
  long long v34 = *(std::__shared_weak_count **)(v3 + 80);
  if (!v34
    || (uint64_t v35 = *(void *)(v3 + 144),
        long long v36 = *(std::__shared_weak_count_vtbl **)(v3 + 72),
        (long long v37 = std::__shared_weak_count::lock(v34)) == 0))
  {
LABEL_63:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v38 = v37;
  ice::Client::regIndication<awd::AwdCommandDriver,awd::ARIAwdCommandDriver,void,unsigned char const*,unsigned int>(v35, 3452796928, v36, v37, (uint64_t)awd::ARIAwdCommandDriver::handleTriggerSubmissionInd_sync, 0);
  if (!atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  ice::Client::setIndShouldWake(*(ice::Client **)(v3 + 144));
  ice::Client::setIndShouldWake(*(ice::Client **)(v3 + 144));
  ice::Client::start(*(ice::Client **)(v3 + 144));
  long long v39 = (std::__shared_weak_count *)v2[2];
  if (v39) {
    std::__shared_weak_count::__release_weak(v39);
  }
  operator delete(v2);
  long long v40 = (std::__shared_weak_count *)a1[2];
  if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
  operator delete(a1);
}

void sub_235DD9ED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock)
{
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  BOOL v13 = (std::__shared_weak_count *)v10[2];
  if (v13) {
    std::__shared_weak_count::__release_weak(v13);
  }
  operator delete(v10);
  BOOL v14 = (std::__shared_weak_count *)v9[2];
  if (v14)
  {
    if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  operator delete(v9);
  _Unwind_Resume(a1);
}

void ice::Client::regIndication<awd::AwdCommandDriver,awd::ARIAwdCommandDriver,void,unsigned char const*,unsigned int>(uint64_t a1, uint64_t a2, std::__shared_weak_count_vtbl *a3, std::__shared_weak_count *a4, uint64_t a5, std::__shared_weak_count_vtbl *a6)
{
  if (a4)
  {
    atomic_fetch_add_explicit(&a4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&a4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&a4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a4->__on_zero_shared)(a4);
      std::__shared_weak_count::__release_weak(a4);
    }
    atomic_fetch_add_explicit(&a4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v10 = (std::__shared_weak_count *)operator new(0x38uLL);
  v10->__shared_owners_ = 0;
  p_shared_owners = &v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93B958;
  v10[1].__vftable = a3;
  v10[1].__shared_owners_ = (uint64_t)a4;
  v10[1].__shared_weak_owners_ = a5;
  v10[2].__vftable = a6;
  v14[0] = (void *)MEMORY[0x263EF8330];
  v14[1] = (void *)1174405120;
  v14[2] = ___ZN3ice6detail12wrapCallbackIZNS_6Client13regIndicationIN3awd16AwdCommandDriverENS4_19ARIAwdCommandDriverEvJPKhjEEEvjNSt3__110shared_ptrIT_EEMT0_FT1_DpT2_EEUlS8_jE_vEEN8dispatch5blockIU13block_pointerFiPhjEEENS9_17integral_constantIiLi2EEEOSB__block_invoke;
  v14[3] = &__block_descriptor_tmp_34;
  _OWORD v14[4] = &v10[1];
  uint64_t v15 = v10;
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_0;
  aBlock[3] = &unk_264C7D7C8;
  aBlock[4] = v14;
  int v12 = _Block_copy(aBlock);
  BOOL v13 = v15;
  if (!v15 || atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
LABEL_9:
  v14[0] = v12;
  ice::Client::regIndicationInternal();
  if (v14[0]) {
    _Block_release(v14[0]);
  }
  if (a4) {
    std::__shared_weak_count::__release_weak(a4);
  }
}

void sub_235DDA2A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN3ice6detail17wrapEventCallbackIZNS_6Client15setEventHandlerIN3awd16AwdCommandDriverENS4_19ARIAwdCommandDriverEvJEEEvNS2_5EventENSt3__110shared_ptrIT_EEMT0_FT1_DpT2_EEUlvE_vEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENS8_17integral_constantIiLi0EEEOSA__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = (std::__shared_weak_count *)v1[1];
    if (v2)
    {
      uint64_t v3 = std::__shared_weak_count::lock(v2);
      if (v3)
      {
        long long v4 = v3;
        if (*v1)
        {
          uint64_t v5 = (void (*)(void *))v1[2];
          uint64_t v6 = v1[3];
          unint64_t v7 = (void *)(*v1 + (v6 >> 1));
          if (v6) {
            uint64_t v5 = *(void (**)(void *))(*v7 + v5);
          }
          v5(v7);
        }
        if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
    }
  }
}

void sub_235DDA3C0(_Unwind_Exception *exception_object)
{
  if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c153_ZTSNSt3__110shared_ptrIZN3ice6Client15setEventHandlerIN3awd16AwdCommandDriverENS4_19ARIAwdCommandDriverEvJEEEvNS2_5EventENS0_IT_EEMT0_FT1_DpT2_EEUlvE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c153_ZTSNSt3__110shared_ptrIZN3ice6Client15setEventHandlerIN3awd16AwdCommandDriverENS4_19ARIAwdCommandDriverEvJEEEvNS2_5EventENS0_IT_EEMT0_FT1_DpT2_EEUlvE_EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void _ZNSt3__120__shared_ptr_emplaceIZN3ice6Client15setEventHandlerIN3awd16AwdCommandDriverENS4_19ARIAwdCommandDriverEvJEEEvNS2_5EventENS_10shared_ptrIT_EEMT0_FT1_DpT2_EEUlvE_NS_9allocatorISH_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93B7D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZNSt3__120__shared_ptr_emplaceIZN3ice6Client15setEventHandlerIN3awd16AwdCommandDriverENS4_19ARIAwdCommandDriverEvJEEEvNS2_5EventENS_10shared_ptrIT_EEMT0_FT1_DpT2_EEUlvE_NS_9allocatorISH_EEED0Ev(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93B7D8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void _ZNSt3__120__shared_ptr_emplaceIZN3ice6Client15setEventHandlerIN3awd16AwdCommandDriverENS4_19ARIAwdCommandDriverEvJEEEvNS2_5EventENS_10shared_ptrIT_EEMT0_FT1_DpT2_EEUlvE_NS_9allocatorISH_EEE16__on_zero_sharedEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t ___ZN3ice6detail17wrapEventCallbackIvEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi0EEEU13block_pointerFT_vE_block_invoke_0(uint64_t a1)
{
  return 0;
}

void ___ZN3ice6detail17wrapEventCallbackIZZN3awd19ARIAwdCommandDriver4initEvENK3__0clEvEUlvE_vEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi0EEEOT__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 16);
    if (v2)
    {
      uint64_t v3 = std::__shared_weak_count::lock(v2);
      if (v3)
      {
        long long v4 = v3;
        if (*(void *)(v1 + 8)) {
          awd::AwdCommandDriver::broadcastState_sync();
        }
        if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
    }
  }
}

void sub_235DDA5F8(_Unwind_Exception *exception_object)
{
  if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c78_ZTSNSt3__110shared_ptrIZZN3awd19ARIAwdCommandDriver4initEvENK3__0clEvEUlvE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c78_ZTSNSt3__110shared_ptrIZZN3awd19ARIAwdCommandDriver4initEvENK3__0clEvEUlvE_EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<awd::ARIAwdCommandDriver::init(void)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<awd::ARIAwdCommandDriver::init(void)::$_0::operator() const(void)::{lambda(void)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93B858;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<awd::ARIAwdCommandDriver::init(void)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<awd::ARIAwdCommandDriver::init(void)::$_0::operator() const(void)::{lambda(void)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93B858;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<awd::ARIAwdCommandDriver::init(void)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<awd::ARIAwdCommandDriver::init(void)::$_0::operator() const(void)::{lambda(void)#1}>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN3ice6detail17wrapEventCallbackIZZN3awd19ARIAwdCommandDriver4initEvENK3__0clEvEUlvE0_vEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi0EEEOT__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 16);
    if (v2)
    {
      uint64_t v3 = std::__shared_weak_count::lock(v2);
      if (v3)
      {
        long long v4 = v3;
        if (*(void *)(v1 + 8)) {
          awd::AwdCommandDriver::broadcastState_sync();
        }
        if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
    }
  }
}

void sub_235DDA808(_Unwind_Exception *exception_object)
{
  if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c79_ZTSNSt3__110shared_ptrIZZN3awd19ARIAwdCommandDriver4initEvENK3__0clEvEUlvE0_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c79_ZTSNSt3__110shared_ptrIZZN3awd19ARIAwdCommandDriver4initEvENK3__0clEvEUlvE0_EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<awd::ARIAwdCommandDriver::init(void)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<awd::ARIAwdCommandDriver::init(void)::$_0::operator() const(void)::{lambda(void)#2}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93B8D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<awd::ARIAwdCommandDriver::init(void)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<awd::ARIAwdCommandDriver::init(void)::$_0::operator() const(void)::{lambda(void)#2}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93B8D8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<awd::ARIAwdCommandDriver::init(void)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<awd::ARIAwdCommandDriver::init(void)::$_0::operator() const(void)::{lambda(void)#2}>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN3ice6detail12wrapCallbackIZNS_6Client13regIndicationIN3awd16AwdCommandDriverENS4_19ARIAwdCommandDriverEvJPKhjEEEvjNSt3__110shared_ptrIT_EEMT0_FT1_DpT2_EEUlS8_jE_vEEN8dispatch5blockIU13block_pointerFiPhjEEENS9_17integral_constantIiLi2EEEOSB__block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void **)(a1 + 32);
  if (v3)
  {
    long long v4 = (std::__shared_weak_count *)v3[1];
    if (v4)
    {
      unint64_t v7 = std::__shared_weak_count::lock(v4);
      if (v7)
      {
        long long v8 = v7;
        if (*v3)
        {
          int v9 = (void (*)(void *, uint64_t, uint64_t))v3[2];
          uint64_t v10 = v3[3];
          int v11 = (void *)(*v3 + (v10 >> 1));
          if (v10) {
            int v9 = *(void (**)(void *, uint64_t, uint64_t))(*v11 + v9);
          }
          v9(v11, a2, a3);
        }
        if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
  }
}

void sub_235DDAA5C(_Unwind_Exception *exception_object)
{
  if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c148_ZTSNSt3__110shared_ptrIZN3ice6Client13regIndicationIN3awd16AwdCommandDriverENS4_19ARIAwdCommandDriverEvJPKhjEEEvjNS0_IT_EEMT0_FT1_DpT2_EEUlS8_jE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c148_ZTSNSt3__110shared_ptrIZN3ice6Client13regIndicationIN3awd16AwdCommandDriverENS4_19ARIAwdCommandDriverEvJPKhjEEEvjNS0_IT_EEMT0_FT1_DpT2_EEUlS8_jE_EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<void ice::Client::regIndication<awd::AwdCommandDriver,awd::ARIAwdCommandDriver,void,unsigned char const*,unsigned int>(unsigned int,std::shared_ptr<awd::AwdCommandDriver>,void (awd::ARIAwdCommandDriver::*)(unsigned char const*,unsigned int))::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void ice::Client::regIndication<awd::AwdCommandDriver,awd::ARIAwdCommandDriver,void,unsigned char const*,unsigned int>(unsigned int,std::shared_ptr<awd::AwdCommandDriver>,void (awd::ARIAwdCommandDriver::*)(unsigned char const*,unsigned int))::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93B958;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<void ice::Client::regIndication<awd::AwdCommandDriver,awd::ARIAwdCommandDriver,void,unsigned char const*,unsigned int>(unsigned int,std::shared_ptr<awd::AwdCommandDriver>,void (awd::ARIAwdCommandDriver::*)(unsigned char const*,unsigned int))::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void ice::Client::regIndication<awd::AwdCommandDriver,awd::ARIAwdCommandDriver,void,unsigned char const*,unsigned int>(unsigned int,std::shared_ptr<awd::AwdCommandDriver>,void (awd::ARIAwdCommandDriver::*)(unsigned char const*,unsigned int))::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93B958;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<void ice::Client::regIndication<awd::AwdCommandDriver,awd::ARIAwdCommandDriver,void,unsigned char const*,unsigned int>(unsigned int,std::shared_ptr<awd::AwdCommandDriver>,void (awd::ARIAwdCommandDriver::*)(unsigned char const*,unsigned int))::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void ice::Client::regIndication<awd::AwdCommandDriver,awd::ARIAwdCommandDriver,void,unsigned char const*,unsigned int>(unsigned int,std::shared_ptr<awd::AwdCommandDriver>,void (awd::ARIAwdCommandDriver::*)(unsigned char const*,unsigned int))::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ctu::Loggable<awd::AwdCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (*(void *)(a1 + 56))
  {
    if (!*(void *)(a1 + 80) || (uint64_t v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_235DDACD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_235DDACF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<awd::ARIAwdCommandDriver>::shared_ptr[abi:ne180100]<awd::ARIAwdCommandDriver,std::shared_ptr<awd::ARIAwdCommandDriver> ctu::SharedSynchronizable<awd::AwdCommandDriver>::make_shared_ptr<awd::ARIAwdCommandDriver>(awd::ARIAwdCommandDriver*)::{lambda(awd::ARIAwdCommandDriver*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  long long v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93B9A8;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 72) = a2;
      *(void *)(a2 + 80) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 72) = a2;
  *(void *)(a2 + 80) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_235DDAE20(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<awd::ARIAwdCommandDriver> ctu::SharedSynchronizable<awd::AwdCommandDriver>::make_shared_ptr<awd::ARIAwdCommandDriver>(awd::ARIAwdCommandDriver*)::{lambda(awd::ARIAwdCommandDriver*)#1}::operator() const(awd::ARIAwdCommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_235DDAE48(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<awd::ARIAwdCommandDriver *,std::shared_ptr<awd::ARIAwdCommandDriver> ctu::SharedSynchronizable<awd::AwdCommandDriver>::make_shared_ptr<awd::ARIAwdCommandDriver>(awd::ARIAwdCommandDriver*)::{lambda(awd::ARIAwdCommandDriver *)#1},std::allocator<awd::ARIAwdCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<awd::ARIAwdCommandDriver *,std::shared_ptr<awd::ARIAwdCommandDriver> ctu::SharedSynchronizable<awd::AwdCommandDriver>::make_shared_ptr<awd::ARIAwdCommandDriver>(awd::ARIAwdCommandDriver*)::{lambda(awd::ARIAwdCommandDriver *)#1},std::allocator<awd::ARIAwdCommandDriver>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<awd::ARIAwdCommandDriver *,std::shared_ptr<awd::ARIAwdCommandDriver> ctu::SharedSynchronizable<awd::AwdCommandDriver>::make_shared_ptr<awd::ARIAwdCommandDriver>(awd::ARIAwdCommandDriver*)::{lambda(awd::ARIAwdCommandDriver *)#1},std::allocator<awd::ARIAwdCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN3awd16AwdCommandDriverEE15make_shared_ptrINS1_19ARIAwdCommandDriverEE"
                     "ENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN3awd16AwdCommandDriverEE15make_shared_ptrINS1_19ARIAwdComm"
                                "andDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN3awd16AwdCommandDriverEE15make_shared_ptrINS1_19ARIAwdCommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN3awd16AwdCommandDriverEE15make_shared_ptrINS1_19ARIAwdCommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<awd::ARIAwdCommandDriver> ctu::SharedSynchronizable<awd::AwdCommandDriver>::make_shared_ptr<awd::ARIAwdCommandDriver>(awd::ARIAwdCommandDriver*)::{lambda(awd::ARIAwdCommandDriver*)#1}::operator() const(awd::ARIAwdCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void ___ZN3ice6detail12wrapCallbackIZNK3awd19ARIAwdCommandDriver21sendGlobalSwitch_syncEbE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    unint64_t v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      uint64_t v5 = v2[2];
      uint64_t v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        unint64_t v7 = v6;
        if (!*v2) {
          goto LABEL_9;
        }
        *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v12[3] = v8;
        long long v13 = v8;
        v12[1] = v8;
        void v12[2] = v8;
        v12[0] = v8;
        AriSdk::ARI_CsiAwdsGlobalSwitchRspCb_SDK::ARI_CsiAwdsGlobalSwitchRspCb_SDK((AriSdk::ARI_CsiAwdsGlobalSwitchRspCb_SDK *)v12, a2);
        if (ice::isARIResponseValid())
        {
          if (AriSdk::ARI_CsiAwdsGlobalSwitchRspCb_SDK::unpack((AriSdk::ARI_CsiAwdsGlobalSwitchRspCb_SDK *)v12))
          {
            int v9 = 0;
            uint64_t v10 = *(NSObject **)(v5 + 40);
            if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
              goto LABEL_8;
            }
          }
          else
          {
            int v9 = *(_DWORD *)v13;
            uint64_t v10 = *(NSObject **)(v5 + 40);
            if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
              goto LABEL_8;
            }
          }
          int v11 = "enabled";
          if (!v9) {
            int v11 = "disabled";
          }
          *(_DWORD *)long long buf = 136315138;
          uint64_t v15 = v11;
          _os_log_debug_impl(&dword_235DB9000, v10, OS_LOG_TYPE_DEBUG, "#D Global switch %s", buf, 0xCu);
        }
LABEL_8:
        MEMORY[0x237DF62C0](v12);
LABEL_9:
        if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
  }
}

void sub_235DDB0E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  MEMORY[0x237DF62C0](&a9);
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c84_ZTSNSt3__110shared_ptrIZNK3awd19ARIAwdCommandDriver21sendGlobalSwitch_syncEbE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c84_ZTSNSt3__110shared_ptrIZNK3awd19ARIAwdCommandDriver21sendGlobalSwitch_syncEbE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<awd::ARIAwdCommandDriver::sendGlobalSwitch_sync(BOOL)::$_0,std::allocator<awd::ARIAwdCommandDriver::sendGlobalSwitch_sync(BOOL)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93BA28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<awd::ARIAwdCommandDriver::sendGlobalSwitch_sync(BOOL)::$_0,std::allocator<awd::ARIAwdCommandDriver::sendGlobalSwitch_sync(BOOL)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93BA28;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<awd::ARIAwdCommandDriver::sendGlobalSwitch_sync(BOOL)::$_0,std::allocator<awd::ARIAwdCommandDriver::sendGlobalSwitch_sync(BOOL)::$_0>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

double ARICommandDriverFactory::create_default_global@<D0>(void *a1@<X8>)
{
  unint64_t v3 = operator new(0xA8uLL);
  v3[1] = 0;
  v3[2] = 0;
  *unint64_t v3 = &unk_26E93BB48;
  CommandDriverFactory::CommandDriverFactory((CommandDriverFactory *)(v3 + 3));
  v3[3] = &unk_26E93BA78;
  double result = 0.0;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  *((_OWORD *)v3 + 9) = 0u;
  v3[20] = 0;
  *a1 = v5;
  a1[1] = v3;
  return result;
}

void sub_235DDB2D0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void ARICommandDriverFactory::ARICommandDriverFactory(ARICommandDriverFactory *this)
{
  CommandDriverFactory::CommandDriverFactory(this);
  *(void *)uint64_t v1 = &unk_26E93BA78;
  *(_OWORD *)(v1 + 88) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_OWORD *)(v1 + 120) = 0u;
  *(void *)(v1 + 136) = 0;
}

{
  uint64_t v1;

  CommandDriverFactory::CommandDriverFactory(this);
  *(void *)uint64_t v1 = &unk_26E93BA78;
  *(_OWORD *)(v1 + 88) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_OWORD *)(v1 + 120) = 0u;
  *(void *)(v1 + 136) = 0;
}

const char *ARICommandDriverFactory::getName(ARICommandDriverFactory *this)
{
  return "ari.driver.factory";
}

void ARICommandDriverFactory::createRadioCommandDriver(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1[13];
  if (v6)
  {
LABEL_2:
    uint64_t v7 = a2[1];
    uint64_t v17 = *a2;
    long long v18 = (std::__shared_weak_count *)v7;
    if (v7)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
      uint64_t v6 = a1[13];
      dispatch_object_t object = v6;
      if (!v6)
      {
        long long v8 = (std::__shared_weak_count *)a1[2];
        uint64_t v14 = a1[1];
        uint64_t v15 = v8;
        if (!v8) {
          goto LABEL_6;
        }
        goto LABEL_5;
      }
    }
    else
    {
      dispatch_object_t object = v6;
    }
    dispatch_retain(v6);
    long long v8 = (std::__shared_weak_count *)a1[2];
    uint64_t v14 = a1[1];
    uint64_t v15 = v8;
    if (!v8)
    {
LABEL_6:
      radio::ARICommandDriver::create(&v17, &object, &v14, buf);
      *(_OWORD *)a3 = *(_OWORD *)buf;
      memset(buf, 0, sizeof(buf));
      int v9 = v15;
      if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
      if (object) {
        dispatch_release(object);
      }
      uint64_t v10 = v18;
      if (v18)
      {
        if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      return;
    }
LABEL_5:
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_6;
  }
  uint64_t v6 = dispatch_workloop_create("radio.wl");
  int v11 = a1[13];
  a1[13] = v6;
  if (v11)
  {
    dispatch_release(v11);
    uint64_t v6 = a1[13];
  }
  if (v6)
  {
    dispatch_retain(v6);
    int v12 = a1[13];
    a1[13] = v6;
    if (!v12) {
      goto LABEL_2;
    }
    dispatch_release(v12);
    uint64_t v6 = a1[13];
    if (v6) {
      goto LABEL_2;
    }
  }
  else
  {
    a1[13] = 0;
  }
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, "com.apple.telephony.abm", "ari.driver.factory");
  long long v13 = *(NSObject **)&buf[8];
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_235DB9000, v13, OS_LOG_TYPE_DEFAULT, "Failed to create radio workloop!", buf, 2u);
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
}

void sub_235DDB5B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, dispatch_object_t object, char a13)
{
  if (object) {
    dispatch_release(object);
  }
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void ARICommandDriverFactory::getRadioWorkloop(ARICommandDriverFactory *this@<X0>, NSObject **a2@<X8>)
{
  long long v4 = *((void *)this + 13);
  if (v4)
  {
    *a2 = v4;
LABEL_4:
    dispatch_retain(v4);
    return;
  }
  long long v4 = dispatch_workloop_create("radio.wl");
  uint64_t v5 = *((void *)this + 13);
  *((void *)this + 13) = v4;
  if (v5)
  {
    dispatch_release(v5);
    long long v4 = *((void *)this + 13);
  }
  *a2 = v4;
  if (v4)
  {
    goto LABEL_4;
  }
}

void ARICommandDriverFactory::weakRadioCommandDriver(ARICommandDriverFactory *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *((void *)this + 11);
  if (!v4)
  {
    std::mutex::lock((std::mutex *)((char *)this + 24));
    if (!*((void *)this + 11))
    {
      GetABMLogServer(&v10);
      ARICommandDriverFactory::createRadioCommandDriver(this, &v10, (uint64_t)&v12);
      long long v6 = v12;
      long long v12 = 0uLL;
      uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 12);
      *(_OWORD *)((char *)this + 88) = v6;
      if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
      long long v8 = (std::__shared_weak_count *)*((void *)&v12 + 1);
      if (*((void *)&v12 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v12 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      int v9 = v11;
      if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    std::mutex::unlock((std::mutex *)((char *)this + 24));
    uint64_t v4 = *((void *)this + 11);
  }
  uint64_t v5 = *((void *)this + 12);
  *a2 = v4;
  a2[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 16), 1uLL, memory_order_relaxed);
  }
}

void sub_235DDB7E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

void sub_235DDB800(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void ARICommandDriverFactory::createRFSCommandDriver(ARICommandDriverFactory *this@<X0>, _OWORD *a2@<X8>)
{
  GetABMLogServer(&v9);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  uint64_t v7 = *((void *)this + 1);
  long long v8 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  radio::ARIRFSCommandDriver::create(&v9, &v7, &v11);
  *a2 = v11;
  long long v11 = 0uLL;
  uint64_t v5 = v8;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  long long v6 = v10;
  if (v10)
  {
    if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_235DDB91C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void ARICommandDriverFactory::weakRFSCommandDriver(ARICommandDriverFactory *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *((void *)this + 14);
  if (!v4)
  {
    std::mutex::lock((std::mutex *)((char *)this + 24));
    if (!*((void *)this + 14))
    {
      ARICommandDriverFactory::createRFSCommandDriver(this, &v9);
      long long v6 = v9;
      long long v9 = 0uLL;
      uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 15);
      *((_OWORD *)this + 7) = v6;
      if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
      long long v8 = (std::__shared_weak_count *)*((void *)&v9 + 1);
      if (*((void *)&v9 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v9 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    std::mutex::unlock((std::mutex *)((char *)this + 24));
    uint64_t v4 = *((void *)this + 14);
  }
  uint64_t v5 = *((void *)this + 15);
  *a2 = v4;
  a2[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 16), 1uLL, memory_order_relaxed);
  }
}

void sub_235DDBA58(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void ARICommandDriverFactory::createCoexCommandDriver(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = a2[1];
  uint64_t v8 = *a2;
  long long v9 = (std::__shared_weak_count *)v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  v7[0] = *(void *)(a1 + 8);
  v7[1] = (uint64_t)v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  coex::ARICommandDriver::create(&v8, v7, (uint64_t *)&v10);
  *a3 = v10;
  long long v10 = 0uLL;
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  long long v6 = v9;
  if (v9)
  {
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_235DDBB7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void ARICommandDriverFactory::createAntennaCommandDriver(uint64_t a1@<X0>, NSObject **a2@<X1>, _OWORD *a3@<X8>)
{
  GetABMLogServer(&v13);
  long long v6 = *a2;
  dispatch_object_t object = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 16);
  uint64_t v10 = *(void *)(a1 + 8);
  long long v11 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  antenna::ARICommandDriver::create(&v13, &object, &v10, (antenna::CommandDriver **)&v15);
  *a3 = v15;
  long long v15 = 0uLL;
  uint64_t v8 = v11;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (object) {
    dispatch_release(object);
  }
  long long v9 = v14;
  if (v14)
  {
    if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_235DDBCD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, dispatch_object_t object, char a13)
{
  if (object) {
    dispatch_release(object);
  }
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void ARICommandDriverFactory::createAwdCommandDriver(ARICommandDriverFactory *this@<X0>, _OWORD *a2@<X8>)
{
  GetABMLogServer(&v8);
  uint64_t v4 = *((void *)this + 1);
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 2);
  v7[0] = v4;
  v7[1] = (uint64_t)v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  awd::ARIAwdCommandDriver::create(&v8, v7, (uint64_t *)&v10);
  *a2 = v10;
  long long v10 = 0uLL;
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  long long v6 = v9;
  if (v9)
  {
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_235DDBDFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void ARICommandDriverFactory::createHealthCommandDriver(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void ARICommandDriverFactory::createLogCommandDriver(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void ARICommandDriverFactory::createDataCommandDriver(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void ARICommandDriverFactory::weakDataCommandDriver(ARICommandDriverFactory *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *((void *)this + 16);
  if (!v4)
  {
    std::mutex::lock((std::mutex *)((char *)this + 24));
    if (!*((void *)this + 16))
    {
      long long v6 = (std::__shared_weak_count *)*((void *)this + 17);
      *((void *)this + 16) = 0;
      *((void *)this + 17) = 0;
      if (v6)
      {
        if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    std::mutex::unlock((std::mutex *)((char *)this + 24));
    uint64_t v4 = *((void *)this + 16);
  }
  uint64_t v5 = *((void *)this + 17);
  *a2 = v4;
  a2[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 16), 1uLL, memory_order_relaxed);
  }
}

void ARICommandDriverFactory::createCPMSCommandDriver(ARICommandDriverFactory *this@<X0>, _OWORD *a2@<X8>)
{
  unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  v4[0] = *((void *)this + 1);
  v4[1] = (uint64_t)v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  cpms::ARICommandDriver::create(v4, &v5);
  *a2 = v5;
  long long v5 = 0uLL;
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_235DDBF98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ARICommandDriverFactory::createCoreDumpCommandDriver(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void ARICommandDriverFactory::createDebugCommandDriver(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void ARICommandDriverFactory::createDiagCommandDriver(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void ARICommandDriverFactory::createTraceCommandDriver(ARICommandDriverFactory *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  if (capabilities::radio::vendor(this) == 2)
  {
    GetABMLogServer(&v6);
    trace::ARICommandDriver::create(&v6, buf);
    long long v3 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    *(_OWORD *)a2 = v3;
    uint64_t v4 = v7;
    if (v7)
    {
      if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  else
  {
    ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, "com.apple.telephony.abm", "ari.driver.factory");
    long long v5 = *(NSObject **)&buf[8];
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_235DB9000, v5, OS_LOG_TYPE_ERROR, "Unsupported or unknown radio vendor!", buf, 2u);
    }
  }
}

void sub_235DDC0E0(_Unwind_Exception *a1)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_235DDC0F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

void sub_235DDC110(_Unwind_Exception *a1)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_235DDC124(_Unwind_Exception *a1)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void ARICommandDriverFactory::createDesenseCommandDriver(ARICommandDriverFactory *this@<X0>, _OWORD *a2@<X8>)
{
  GetABMLogServer(&v8);
  uint64_t v4 = *((void *)this + 1);
  long long v5 = (std::__shared_weak_count *)*((void *)this + 2);
  v7[0] = v4;
  v7[1] = (uint64_t)v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  desense::ARICommandDriver::create(&v8, v7, (uint64_t *)&v10);
  *a2 = v10;
  long long v10 = 0uLL;
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = v9;
  if (v9)
  {
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_235DDC23C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void ARICommandDriverFactory::createCellularCertCommandDriver(_OWORD *a1@<X8>)
{
  GetABMLogServer(&v5);
  double v3 = ARICellularCertCommandDriver::create(&v5, a1);
  uint64_t v4 = v6;
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *, double))v4->__on_zero_shared)(v4, v3);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_235DDC2EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::__shared_ptr_emplace<ARICommandDriverFactory>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93BB48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ARICommandDriverFactory>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93BB48;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<ARICommandDriverFactory>::__on_zero_shared(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_26E93BA78;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 160);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    double v3 = *(std::__shared_weak_count **)(a1 + 144);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    double v3 = *(std::__shared_weak_count **)(a1 + 144);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  uint64_t v4 = *(NSObject **)(a1 + 128);
  if (v4) {
    dispatch_release(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 120);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    *(void *)(a1 + 24) = MEMORY[0x263F8BAC0] + 16;
    std::mutex::~mutex((std::mutex *)(a1 + 48));
    uint64_t v6 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v6) {
      return;
    }
  }
  else
  {
    *(void *)(a1 + 24) = MEMORY[0x263F8BAC0] + 16;
    std::mutex::~mutex((std::mutex *)(a1 + 48));
    uint64_t v6 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v6) {
      return;
    }
  }
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

double trace::ARICommandDriver::create@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4 = operator new(0xB0uLL);
  uint64_t v5 = (uint64_t)v4;
  uint64_t v6 = a1[1];
  uint64_t v9 = *a1;
  long long v10 = (std::__shared_weak_count *)v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  trace::ARICommandDriver::ARICommandDriver((uint64_t)v4, &v9);
  *(void *)&long long v11 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<trace::ARICommandDriver>::shared_ptr[abi:ne180100]<trace::ARICommandDriver,std::shared_ptr<trace::ARICommandDriver> ctu::SharedSynchronizable<trace::CommandDriver>::make_shared_ptr<trace::ARICommandDriver>(trace::ARICommandDriver*)::{lambda(trace::ARICommandDriver*)#1},void>(&v11, v5);
  ctu::Loggable<trace::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(v11);
  uint64_t v7 = v10;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  (*(void (**)(void))(*(void *)v11 + 208))(v11);
  double result = *(double *)&v11;
  *a2 = v11;
  return result;
}

void sub_235DDC64C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_235DDC660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_235DDC67C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_235DDC690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

uint64_t trace::ARICommandDriver::ARICommandDriver(uint64_t a1, uint64_t *a2)
{
  double v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v8 = *a2;
  uint64_t v9 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  trace::CommandDriver::CommandDriver((void *)a1, &v8);
  uint64_t v4 = v9;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  *(void *)a1 = &unk_26E93BB98;
  uint64_t v5 = *(NSObject **)(a1 + 88);
  dispatch_object_t object = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  ice::Client::create();
  if (object) {
    dispatch_release(object);
  }
  *(_WORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  return a1;
}

void sub_235DDC7AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  trace::CommandDriver::~CommandDriver(v10);
  _Unwind_Resume(a1);
}

void sub_235DDC7CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *trace::CommandDriver::CommandDriver(void *a1, void *a2)
{
  *a1 = &unk_26E93BF68;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v7, "com.apple.telephony.abm", "trace.drv");
  uint64_t v4 = dispatch_queue_create("trace.drv", 0);
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = v4;
  if (v4)
  {
    uint64_t v5 = v4;
    dispatch_retain(v4);
    a1[12] = 0;
    dispatch_release(v5);
  }
  else
  {
    a1[12] = 0;
  }
  ctu::Loggable<trace::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>&>(a1, (uint64_t)v7, a2);
  *a1 = &unk_26E93C050;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v7);
  *a1 = &unk_26E93BF68;
  return a1;
}

void sub_235DDC8CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ctu::SharedSynchronizable<CellularCertCommandDriver>::~SharedSynchronizable(v9);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a9);
  _Unwind_Resume(a1);
}

void trace::CommandDriver::~CommandDriver(trace::CommandDriver *this)
{
  *(void *)this = &unk_26E93C090;
  MEMORY[0x237DF4D50]((char *)this + 8);
  uint64_t v2 = *((void *)this + 12);
  if (v2) {
    dispatch_release(v2);
  }
  double v3 = *((void *)this + 11);
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void trace::ARICommandDriver::~ARICommandDriver(trace::ARICommandDriver *this)
{
  *(void *)this = &unk_26E93BB98;
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl(&dword_235DB9000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v13, 2u);
  }
  double v3 = *((void *)this + 20);
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (const void *)*((void *)this + 19);
  if (v4) {
    _Block_release(v4);
  }
  uint64_t v5 = *((void *)this + 18);
  if (v5) {
    dispatch_release(v5);
  }
  uint64_t v6 = (const void *)*((void *)this + 17);
  if (v6) {
    _Block_release(v6);
  }
  uint64_t v7 = *((void *)this + 16);
  if (v7) {
    dispatch_release(v7);
  }
  uint64_t v8 = (const void *)*((void *)this + 15);
  if (v8) {
    _Block_release(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  *(void *)this = &unk_26E93C090;
  MEMORY[0x237DF4D50]((char *)this + 8);
  long long v10 = *((void *)this + 12);
  if (v10) {
    dispatch_release(v10);
  }
  long long v11 = *((void *)this + 11);
  if (v11) {
    dispatch_release(v11);
  }
  long long v12 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
}

{
  void *v1;
  uint64_t vars8;

  trace::ARICommandDriver::~ARICommandDriver(this);

  operator delete(v1);
}

void trace::ARICommandDriver::init(trace::ARICommandDriver *this)
{
  v1[0] = MEMORY[0x263EF8330];
  v1[1] = 0x40000000;
  v1[2] = ___ZN5trace16ARICommandDriver4initEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_9;
  v1[4] = this;
  ctu::SharedSynchronizable<trace::CommandDriver>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v1);
}

uint64_t ___ZN5trace16ARICommandDriver4initEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(v1 + 40);
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_235DB9000, v2, OS_LOG_TYPE_DEFAULT, "#I Initializing", buf, 2u);
  }
  *(unsigned char *)(v1 + 168) = capabilities::radio::supportsBBTraceV2((capabilities::radio *)v3);
  uint64_t v4 = *(void *)(v1 + 104);
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 0x40000000;
  void v12[2] = ___ZN5trace16ARICommandDriver4initEv_block_invoke_1;
  v12[3] = &__block_descriptor_tmp_0;
  _OWORD v12[4] = v1;
  *(void *)long long buf = v12;
  ice::Client::setEventHandler<void({block_pointer})(void)>(v4, 0, (uint64_t *)buf);
  uint64_t v5 = *(void *)(v1 + 104);
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 0x40000000;
  v11[2] = ___ZN5trace16ARICommandDriver4initEv_block_invoke_2;
  v11[3] = &__block_descriptor_tmp_3;
  v11[4] = v1;
  *(void *)long long buf = v11;
  ice::Client::setEventHandler<void({block_pointer})(void)>(v5, 1, (uint64_t *)buf);
  uint64_t v6 = *(void *)(v1 + 104);
  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 0x40000000;
  v10[2] = ___ZN5trace16ARICommandDriver4initEv_block_invoke_4;
  v10[3] = &__block_descriptor_tmp_6;
  v10[4] = v1;
  *(void *)long long buf = v10;
  ice::Client::setEventHandler<void({block_pointer})(dispatch::group_session)>(v6, 2, (uint64_t *)buf);
  uint64_t v7 = *(void *)(v1 + 104);
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 0x40000000;
  v9[2] = ___ZN5trace16ARICommandDriver4initEv_block_invoke_7;
  v9[3] = &__block_descriptor_tmp_8;
  v9[4] = v1;
  *(void *)long long buf = v9;
  ice::Client::setEventHandler<void({block_pointer})(void)>(v7, 3, (uint64_t *)buf);
  uint64_t result = ice::Client::start(*(ice::Client **)(v1 + 104));
  *(unsigned char *)(v1 + 169) = 1;
  return result;
}

void ___ZN5trace16ARICommandDriver4initEv_block_invoke_1(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = v1[5];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v8[0]) = 0;
    _os_log_debug_impl(&dword_235DB9000, v2, OS_LOG_TYPE_DEBUG, "#D ARI Started event received.", (uint8_t *)v8, 2u);
    BOOL v3 = (const void *)v1[15];
    if (!v3) {
      return;
    }
  }
  else
  {
    BOOL v3 = (const void *)v1[15];
    if (!v3) {
      return;
    }
  }
  if (v1[16])
  {
    uint64_t v4 = _Block_copy(v3);
    uint64_t v5 = v4;
    uint64_t v6 = v1[16];
    v8[0] = MEMORY[0x263EF8330];
    v8[1] = 1174405120;
    v8[2] = ___ZNK8dispatch8callbackIU13block_pointerFvvEEclIJEEEvDpT__block_invoke;
    v8[3] = &__block_descriptor_tmp_64_0;
    if (v4)
    {
      aBlocunint64_t k = _Block_copy(v4);
      dispatch_async(v6, v8);
      uint64_t v7 = aBlock;
      if (!aBlock)
      {
LABEL_9:
        if (v5) {
          _Block_release(v5);
        }
        return;
      }
    }
    else
    {
      aBlocunint64_t k = 0;
      dispatch_async(v6, v8);
      uint64_t v7 = aBlock;
      if (!aBlock) {
        goto LABEL_9;
      }
    }
    _Block_release(v7);
    goto LABEL_9;
  }
}

void ___ZN5trace16ARICommandDriver4initEv_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_debug_impl(&dword_235DB9000, v1, OS_LOG_TYPE_DEBUG, "#D ARI Stopped event received.", v2, 2u);
  }
}

void ___ZN5trace16ARICommandDriver4initEv_block_invoke_4(uint64_t a1, NSObject **a2)
{
  BOOL v3 = *(void **)(a1 + 32);
  uint64_t v4 = v3[5];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v9[0]) = 0;
    _os_log_impl(&dword_235DB9000, v4, OS_LOG_TYPE_DEFAULT, "#I ARI LPM Enter event received", (uint8_t *)v9, 2u);
  }
  uint64_t v5 = (const void *)v3[17];
  if (v5 && v3[18])
  {
    uint64_t v6 = *a2;
    if (v6 && (dispatch_retain(v6), dispatch_group_enter(v6), (uint64_t v5 = (const void *)v3[17]) == 0)) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = _Block_copy(v5);
    }
    uint64_t v8 = v3[18];
    v9[0] = MEMORY[0x263EF8330];
    v9[1] = 1174405120;
    v9[2] = ___ZNK8dispatch8callbackIU13block_pointerFvNS_13group_sessionEEEclIJS1_EEEvDpT__block_invoke;
    v9[3] = &__block_descriptor_tmp_67;
    if (v7)
    {
      aBlocunint64_t k = _Block_copy(v7);
      dispatch_group_t group = v6;
      if (!v6)
      {
LABEL_15:
        dispatch_async(v8, v9);
        if (group)
        {
          dispatch_group_leave(group);
          if (group) {
            dispatch_release(group);
          }
        }
        if (aBlock) {
          _Block_release(aBlock);
        }
        if (v7) {
          _Block_release(v7);
        }
        if (v6)
        {
          dispatch_group_leave(v6);
          dispatch_release(v6);
        }
        return;
      }
    }
    else
    {
      aBlocunint64_t k = 0;
      dispatch_group_t group = v6;
      if (!v6) {
        goto LABEL_15;
      }
    }
    dispatch_retain(v6);
    if (group) {
      dispatch_group_enter(group);
    }
    goto LABEL_15;
  }
}

void ___ZN5trace16ARICommandDriver4initEv_block_invoke_7(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = v1[5];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v8[0]) = 0;
    _os_log_impl(&dword_235DB9000, v2, OS_LOG_TYPE_DEFAULT, "#I ARI LPM Exit event received", (uint8_t *)v8, 2u);
  }
  BOOL v3 = (const void *)v1[19];
  if (v3 && v1[20])
  {
    uint64_t v4 = _Block_copy(v3);
    uint64_t v5 = v4;
    uint64_t v6 = v1[20];
    v8[0] = MEMORY[0x263EF8330];
    v8[1] = 1174405120;
    v8[2] = ___ZNK8dispatch8callbackIU13block_pointerFvvEEclIJEEEvDpT__block_invoke;
    v8[3] = &__block_descriptor_tmp_64_0;
    if (v4)
    {
      aBlocunint64_t k = _Block_copy(v4);
      dispatch_async(v6, v8);
      uint64_t v7 = aBlock;
      if (!aBlock)
      {
LABEL_10:
        if (v5) {
          _Block_release(v5);
        }
        return;
      }
    }
    else
    {
      aBlocunint64_t k = 0;
      dispatch_async(v6, v8);
      uint64_t v7 = aBlock;
      if (!aBlock) {
        goto LABEL_10;
      }
    }
    _Block_release(v7);
    goto LABEL_10;
  }
}

void trace::ARICommandDriver::pauseTraceTraffic(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(a1 + 72);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 80);
  uint64_t v5 = (uint64_t *)(a1 + 72);
  if (!v4 || (uint64_t v8 = std::__shared_weak_count::lock(v4)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v9 = v8;
  p_shared_weak_owners = &v8->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  v13[0] = MEMORY[0x263EF8330];
  v13[1] = 1174405120;
  void v13[2] = ___ZN5trace16ARICommandDriver17pauseTraceTrafficEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke;
  v13[3] = &__block_descriptor_tmp_10_1;
  v13[4] = a1;
  v13[5] = v6;
  uint64_t v14 = v9;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  long long v11 = *(void **)a2;
  if (*(void *)a2) {
    long long v11 = _Block_copy(v11);
  }
  long long v12 = *(NSObject **)(a2 + 8);
  aBlocunint64_t k = v11;
  dispatch_object_t object = v12;
  if (v12) {
    dispatch_retain(v12);
  }
  ctu::SharedSynchronizable<trace::CommandDriver>::execute_wrapped(v5, (uint64_t)v13);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  std::__shared_weak_count::__release_weak(v9);
}

uint64_t ___ZN5trace16ARICommandDriver17pauseTraceTrafficEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v26[3] = v3;
  long long __p = v3;
  v26[1] = v3;
  _OWORD v26[2] = v3;
  v26[0] = v3;
  AriSdk::ARI_CsiTraceProfileSelectReq_SDK::ARI_CsiTraceProfileSelectReq_SDK((AriSdk::ARI_CsiTraceProfileSelectReq_SDK *)v26);
  uint64_t v4 = operator new(4uLL);
  _DWORD *v4 = 0;
  uint64_t v5 = (void *)__p;
  *(void *)&long long __p = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = operator new(4uLL);
  _DWORD *v6 = 1;
  uint64_t v7 = (void *)*((void *)&__p + 1);
  *((void *)&__p + 1) = v6;
  if (v7) {
    operator delete(v7);
  }
  uint64_t v8 = *(void *)(v2 + 104);
  long long v10 = (std::__shared_weak_count_vtbl *)a1[5];
  uint64_t v9 = (std::__shared_weak_count *)a1[6];
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  long long v11 = (const void *)a1[7];
  if (v11)
  {
    long long v12 = _Block_copy(v11);
    uint64_t v13 = a1[8];
    uint64_t v22 = v12;
    dispatch_object_t object = v13;
    if (!v13) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  long long v12 = 0;
  uint64_t v13 = a1[8];
  uint64_t v22 = 0;
  dispatch_object_t object = v13;
  if (v13) {
LABEL_9:
  }
    dispatch_retain(v13);
LABEL_10:
  uint64_t v14 = (std::__shared_weak_count *)operator new(0x40uLL);
  v14->__shared_owners_ = 0;
  p_shared_owners = &v14->__shared_owners_;
  v14->__shared_weak_owners_ = 0;
  v14->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93C218;
  v14[1].__vftable = v10;
  v14[1].__shared_owners_ = (uint64_t)v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v12)
  {
    v14[1].__shared_weak_owners_ = 0;
    v14[2].__vftable = (std::__shared_weak_count_vtbl *)v13;
    if (!v13) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  v14[1].__shared_weak_owners_ = (uint64_t)_Block_copy(v12);
  v14[2].__vftable = (std::__shared_weak_count_vtbl *)v13;
  if (v13) {
LABEL_14:
  }
    dispatch_retain(v13);
LABEL_15:
  v14[2].__shared_owners_ = v2;
  uint64_t v28 = MEMORY[0x263EF8330];
  uint64_t v29 = 1174405120;
  uint64_t v30 = ___ZN3ice6detail12wrapCallbackIZZN5trace16ARICommandDriver17pauseTraceTrafficEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb_E3__0vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  long long v31 = &__block_descriptor_tmp_73;
  long long v32 = v14 + 1;
  long long v33 = v14;
  atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlock[0] = (const void *)MEMORY[0x263EF8330];
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_1;
  aBlock[3] = &unk_264C7D900;
  aBlock[4] = &v28;
  uint64_t v16 = _Block_copy(aBlock);
  uint64_t v17 = v33;
  if (!v33 || atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_18:
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_19:
  *(void *)&long long v18 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v24[0] = v18;
  v24[1] = v18;
  unint64_t v25 = 0xAAAAAAAAAAAAAAAALL;
  long long v19 = *(std::__shared_weak_count **)(v8 + 16);
  uint64_t v28 = *(void *)(v8 + 8);
  if (!v19)
  {
    uint64_t v29 = 0;
LABEL_40:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v29 = (uint64_t)std::__shared_weak_count::lock(v19);
  if (!v29) {
    goto LABEL_40;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  int v20 = (std::__shared_weak_count *)v29;
  if (v29 && !atomic_fetch_add((atomic_ullong *volatile)(v29 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  aBlock[0] = v16;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0]) {
    _Block_release(aBlock[0]);
  }
  MEMORY[0x237DF50B0](v24);
  if (object) {
    dispatch_release(object);
  }
  if (v22) {
    _Block_release(v22);
  }
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  return MEMORY[0x237DF63F0](v26);
}

void sub_235DDD6A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  uint64_t v4 = *(const void **)(v2 - 120);
  if (v4) {
    _Block_release(v4);
  }
  MEMORY[0x237DF50B0]((uint64_t *)va1);
  _ZZZN5trace16ARICommandDriver17pauseTraceTrafficEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb_EN3__0D1Ev((uint64_t *)va);
  MEMORY[0x237DF63F0](va2);
  _Unwind_Resume(a1);
}

void sub_235DDD6D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v3 - 168);
  if (v2) {
    _Block_release(v2);
  }
  _ZZZN5trace16ARICommandDriver17pauseTraceTrafficEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb_EN3__0D1Ev((uint64_t *)va);
  MEMORY[0x237DF63F0](va1);
  _Unwind_Resume(a1);
}

void *_ZZZN5trace16ARICommandDriver17pauseTraceTrafficEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb_EN3__0D1Ev(void *a1)
{
  uint64_t v2 = a1[3];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = (const void *)a1[2];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void __copy_helper_block_e8_40c46_ZTSNSt3__18weak_ptrIN5trace13CommandDriverEEE56c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(void *a1, void *a2)
{
  uint64_t v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (void *)a2[7];
  if (v5) {
    uint64_t v5 = _Block_copy(v5);
  }
  uint64_t v6 = a2[8];
  a1[7] = v5;
  a1[8] = v6;
  if (v6)
  {
    dispatch_retain(v6);
  }
}

void __destroy_helper_block_e8_40c46_ZTSNSt3__18weak_ptrIN5trace13CommandDriverEEE56c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(void *a1)
{
  uint64_t v2 = a1[8];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = (const void *)a1[7];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

uint64_t dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void trace::ARICommandDriver::enableSleepProfile(uint64_t a1, uint64_t a2)
{
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 1174405120;
  uint64_t v7[2] = ___ZN5trace16ARICommandDriver18enableSleepProfileEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_11;
  v7[4] = a1;
  uint64_t v4 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v4 = _Block_copy(v4);
  }
  uint64_t v5 = (uint64_t *)(a1 + 72);
  uint64_t v6 = *(NSObject **)(a2 + 8);
  aBlocunint64_t k = v4;
  dispatch_object_t object = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  ctu::SharedSynchronizable<trace::CommandDriver>::execute_wrapped(v5, (uint64_t)v7);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

uint64_t ___ZN5trace16ARICommandDriver18enableSleepProfileEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v29[3] = v3;
  long long __p = v3;
  v29[1] = v3;
  v29[2] = v3;
  v29[0] = v3;
  AriSdk::ARI_CsiTraceProfileSelectReq_SDK::ARI_CsiTraceProfileSelectReq_SDK((AriSdk::ARI_CsiTraceProfileSelectReq_SDK *)v29);
  uint64_t v4 = operator new(4uLL);
  _DWORD *v4 = 1;
  uint64_t v5 = (void *)__p;
  *(void *)&long long __p = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = operator new(4uLL);
  _DWORD *v6 = 0;
  uint64_t v7 = (void *)*((void *)&__p + 1);
  *((void *)&__p + 1) = v6;
  if (v7) {
    operator delete(v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)v2[10];
  if (!v8 || (uint64_t v9 = (std::__shared_weak_count_vtbl *)v2[9], (v10 = std::__shared_weak_count::lock(v8)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v11 = v10;
  p_shared_weak_owners = &v10->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v13 = v2[13];
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    uint64_t v14 = (const void *)a1[5];
    if (v14) {
      goto LABEL_9;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v11);
    uint64_t v13 = v2[13];
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    uint64_t v14 = (const void *)a1[5];
    if (v14)
    {
LABEL_9:
      uint64_t v15 = _Block_copy(v14);
      uint64_t v16 = a1[6];
      unint64_t v25 = v15;
      dispatch_object_t object = v16;
      if (!v16) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
  }
  uint64_t v15 = 0;
  uint64_t v16 = a1[6];
  unint64_t v25 = 0;
  dispatch_object_t object = v16;
  if (v16) {
LABEL_10:
  }
    dispatch_retain(v16);
LABEL_11:
  uint64_t v17 = (std::__shared_weak_count *)operator new(0x40uLL);
  v17->__shared_owners_ = 0;
  p_shared_owners = &v17->__shared_owners_;
  v17->__shared_weak_owners_ = 0;
  v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93C298;
  v17[1].__vftable = v9;
  v17[1].__shared_owners_ = (uint64_t)v11;
  if (!v15)
  {
    v17[1].__shared_weak_owners_ = 0;
    v17[2].__vftable = (std::__shared_weak_count_vtbl *)v16;
    if (!v16) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  v17[1].__shared_weak_owners_ = (uint64_t)_Block_copy(v15);
  v17[2].__vftable = (std::__shared_weak_count_vtbl *)v16;
  if (v16) {
LABEL_13:
  }
    dispatch_retain(v16);
LABEL_14:
  v17[2].__shared_owners_ = (uint64_t)v2;
  uint64_t v31 = MEMORY[0x263EF8330];
  uint64_t v32 = 1174405120;
  long long v33 = ___ZN3ice6detail12wrapCallbackIZZN5trace16ARICommandDriver18enableSleepProfileEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb0_E3__1vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  long long v34 = &__block_descriptor_tmp_79;
  uint64_t v35 = v17 + 1;
  long long v36 = v17;
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlock[0] = (const void *)MEMORY[0x263EF8330];
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_1;
  aBlock[3] = &unk_264C7D900;
  aBlock[4] = &v31;
  long long v19 = _Block_copy(aBlock);
  int v20 = v36;
  if (!v36 || atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_17:
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_18:
  *(void *)&long long v21 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v27[0] = v21;
  v27[1] = v21;
  unint64_t v28 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v22 = *(std::__shared_weak_count **)(v13 + 16);
  uint64_t v31 = *(void *)(v13 + 8);
  if (!v22)
  {
    uint64_t v32 = 0;
LABEL_39:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v32 = (uint64_t)std::__shared_weak_count::lock(v22);
  if (!v32) {
    goto LABEL_39;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  uint64_t v23 = (std::__shared_weak_count *)v32;
  if (v32 && !atomic_fetch_add((atomic_ullong *volatile)(v32 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  aBlock[0] = v19;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0]) {
    _Block_release(aBlock[0]);
  }
  MEMORY[0x237DF50B0](v27);
  if (object) {
    dispatch_release(object);
  }
  if (v25) {
    _Block_release(v25);
  }
  std::__shared_weak_count::__release_weak(v11);
  return MEMORY[0x237DF63F0](v29);
}

void sub_235DDDDA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  uint64_t v18 = va_arg(va2, void);
  uint64_t v5 = *(const void **)(v3 - 120);
  if (v5) {
    _Block_release(v5);
  }
  MEMORY[0x237DF50B0]((uint64_t *)va1);
  _ZZZN5trace16ARICommandDriver18enableSleepProfileEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb0_EN3__1D1Ev((uint64_t *)va);
  std::__shared_weak_count::__release_weak(v2);
  MEMORY[0x237DF63F0](va2);
  _Unwind_Resume(a1);
}

void *_ZZZN5trace16ARICommandDriver18enableSleepProfileEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb0_EN3__1D1Ev(void *a1)
{
  uint64_t v2 = a1[3];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = (const void *)a1[2];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void __copy_helper_block_e8_40c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a2 + 40);
  if (v4) {
    uint64_t v4 = _Block_copy(v4);
  }
  uint64_t v5 = *(NSObject **)(a2 + 48);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v5;
  if (v5)
  {
    dispatch_retain(v5);
  }
}

void __destroy_helper_block_e8_40c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 48);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 40);
  if (v3) {
    _Block_release(v3);
  }
}

void trace::ARICommandDriver::enableActiveProfile(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(a1 + 72);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 80);
  uint64_t v5 = (uint64_t *)(a1 + 72);
  if (!v4 || (uint64_t v8 = std::__shared_weak_count::lock(v4)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v9 = v8;
  p_shared_weak_owners = &v8->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  v13[0] = MEMORY[0x263EF8330];
  v13[1] = 1174405120;
  void v13[2] = ___ZN5trace16ARICommandDriver19enableActiveProfileEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke;
  v13[3] = &__block_descriptor_tmp_14_1;
  v13[4] = a1;
  v13[5] = v6;
  uint64_t v14 = v9;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v11 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v11 = _Block_copy(v11);
  }
  uint64_t v12 = *(NSObject **)(a2 + 8);
  aBlocunint64_t k = v11;
  dispatch_object_t object = v12;
  if (v12) {
    dispatch_retain(v12);
  }
  ctu::SharedSynchronizable<trace::CommandDriver>::execute_wrapped(v5, (uint64_t)v13);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  std::__shared_weak_count::__release_weak(v9);
}

uint64_t ___ZN5trace16ARICommandDriver19enableActiveProfileEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v26[3] = v3;
  long long __p = v3;
  v26[1] = v3;
  _OWORD v26[2] = v3;
  v26[0] = v3;
  AriSdk::ARI_CsiTraceProfileSelectReq_SDK::ARI_CsiTraceProfileSelectReq_SDK((AriSdk::ARI_CsiTraceProfileSelectReq_SDK *)v26);
  uint64_t v4 = operator new(4uLL);
  _DWORD *v4 = 1;
  uint64_t v5 = (void *)__p;
  *(void *)&long long __p = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = operator new(4uLL);
  _DWORD *v6 = 1;
  uint64_t v7 = (void *)*((void *)&__p + 1);
  *((void *)&__p + 1) = v6;
  if (v7) {
    operator delete(v7);
  }
  uint64_t v8 = *(void *)(v2 + 104);
  uint64_t v10 = (std::__shared_weak_count_vtbl *)a1[5];
  uint64_t v9 = (std::__shared_weak_count *)a1[6];
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = (const void *)a1[7];
  if (v11)
  {
    uint64_t v12 = _Block_copy(v11);
    uint64_t v13 = a1[8];
    uint64_t v22 = v12;
    dispatch_object_t object = v13;
    if (!v13) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  uint64_t v12 = 0;
  uint64_t v13 = a1[8];
  uint64_t v22 = 0;
  dispatch_object_t object = v13;
  if (v13) {
LABEL_9:
  }
    dispatch_retain(v13);
LABEL_10:
  uint64_t v14 = (std::__shared_weak_count *)operator new(0x40uLL);
  v14->__shared_owners_ = 0;
  p_shared_owners = &v14->__shared_owners_;
  v14->__shared_weak_owners_ = 0;
  v14->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93C318;
  v14[1].__vftable = v10;
  v14[1].__shared_owners_ = (uint64_t)v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v12)
  {
    v14[1].__shared_weak_owners_ = 0;
    v14[2].__vftable = (std::__shared_weak_count_vtbl *)v13;
    if (!v13) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  v14[1].__shared_weak_owners_ = (uint64_t)_Block_copy(v12);
  v14[2].__vftable = (std::__shared_weak_count_vtbl *)v13;
  if (v13) {
LABEL_14:
  }
    dispatch_retain(v13);
LABEL_15:
  v14[2].__shared_owners_ = v2;
  uint64_t v28 = MEMORY[0x263EF8330];
  uint64_t v29 = 1174405120;
  uint64_t v30 = ___ZN3ice6detail12wrapCallbackIZZN5trace16ARICommandDriver19enableActiveProfileEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb1_E3__2vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  uint64_t v31 = &__block_descriptor_tmp_83;
  uint64_t v32 = v14 + 1;
  long long v33 = v14;
  atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlock[0] = (const void *)MEMORY[0x263EF8330];
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_1;
  aBlock[3] = &unk_264C7D900;
  aBlock[4] = &v28;
  uint64_t v16 = _Block_copy(aBlock);
  uint64_t v17 = v33;
  if (!v33 || atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_18:
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_19:
  *(void *)&long long v18 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v24[0] = v18;
  v24[1] = v18;
  unint64_t v25 = 0xAAAAAAAAAAAAAAAALL;
  long long v19 = *(std::__shared_weak_count **)(v8 + 16);
  uint64_t v28 = *(void *)(v8 + 8);
  if (!v19)
  {
    uint64_t v29 = 0;
LABEL_40:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v29 = (uint64_t)std::__shared_weak_count::lock(v19);
  if (!v29) {
    goto LABEL_40;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  int v20 = (std::__shared_weak_count *)v29;
  if (v29 && !atomic_fetch_add((atomic_ullong *volatile)(v29 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  aBlock[0] = v16;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0]) {
    _Block_release(aBlock[0]);
  }
  MEMORY[0x237DF50B0](v24);
  if (object) {
    dispatch_release(object);
  }
  if (v22) {
    _Block_release(v22);
  }
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  return MEMORY[0x237DF63F0](v26);
}

void sub_235DDE43C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  uint64_t v4 = *(const void **)(v2 - 120);
  if (v4) {
    _Block_release(v4);
  }
  MEMORY[0x237DF50B0]((uint64_t *)va1);
  _ZZZN5trace16ARICommandDriver19enableActiveProfileEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb1_EN3__2D1Ev((uint64_t *)va);
  MEMORY[0x237DF63F0](va2);
  _Unwind_Resume(a1);
}

void sub_235DDE470(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v3 - 168);
  if (v2) {
    _Block_release(v2);
  }
  _ZZZN5trace16ARICommandDriver19enableActiveProfileEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb1_EN3__2D1Ev((uint64_t *)va);
  MEMORY[0x237DF63F0](va1);
  _Unwind_Resume(a1);
}

void *_ZZZN5trace16ARICommandDriver19enableActiveProfileEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb1_EN3__2D1Ev(void *a1)
{
  uint64_t v2 = a1[3];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = (const void *)a1[2];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void trace::ARICommandDriver::getTraceMode(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(a1 + 72);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 80);
  uint64_t v5 = (uint64_t *)(a1 + 72);
  if (!v4 || (uint64_t v8 = std::__shared_weak_count::lock(v4)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v9 = v8;
  p_shared_weak_owners = &v8->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  v13[0] = MEMORY[0x263EF8330];
  v13[1] = 1174405120;
  void v13[2] = ___ZN5trace16ARICommandDriver12getTraceModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc4dictEEEE_block_invoke;
  v13[3] = &__block_descriptor_tmp_15_0;
  v13[4] = a1;
  v13[5] = v6;
  uint64_t v14 = v9;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v11 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v11 = _Block_copy(v11);
  }
  uint64_t v12 = *(NSObject **)(a2 + 8);
  aBlocunint64_t k = v11;
  dispatch_object_t object = v12;
  if (v12) {
    dispatch_retain(v12);
  }
  ctu::SharedSynchronizable<trace::CommandDriver>::execute_wrapped(v5, (uint64_t)v13);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  std::__shared_weak_count::__release_weak(v9);
}

uint64_t ___ZN5trace16ARICommandDriver12getTraceModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc4dictEEEE_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  _OWORD v24[2] = v3;
  v24[3] = v3;
  v24[0] = v3;
  v24[1] = v3;
  AriSdk::ARI_CsiXsioGetReq_SDK::ARI_CsiXsioGetReq_SDK((AriSdk::ARI_CsiXsioGetReq_SDK *)v24);
  uint64_t v4 = *(void *)(v2 + 104);
  uint64_t v6 = (std::__shared_weak_count_vtbl *)a1[5];
  uint64_t v5 = (std::__shared_weak_count *)a1[6];
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (const void *)a1[7];
  if (v7)
  {
    uint64_t v8 = _Block_copy(v7);
    uint64_t v9 = a1[8];
    int v20 = v8;
    dispatch_object_t object = v9;
    if (!v9) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v8 = 0;
  uint64_t v9 = a1[8];
  int v20 = 0;
  dispatch_object_t object = v9;
  if (v9) {
LABEL_5:
  }
    dispatch_retain(v9);
LABEL_6:
  uint64_t v10 = (std::__shared_weak_count *)operator new(0x40uLL);
  uint64_t v11 = v10;
  v10->__shared_owners_ = 0;
  p_shared_owners = &v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93C398;
  v10[1].__vftable = v6;
  uint64_t v13 = &v10[1].__vftable;
  v10[1].__shared_owners_ = (uint64_t)v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  v10[1].__shared_weak_owners_ = v2;
  if (!v8)
  {
    v10[2].__vftable = 0;
    v10[2].__shared_owners_ = (uint64_t)v9;
    if (!v9) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  v10[2].__vftable = (std::__shared_weak_count_vtbl *)_Block_copy(v8);
  v11[2].__shared_owners_ = (uint64_t)v9;
  if (v9) {
LABEL_10:
  }
    dispatch_retain(v9);
LABEL_11:
  uint64_t v25 = MEMORY[0x263EF8330];
  uint64_t v26 = 1174405120;
  unint64_t v27 = ___ZN3ice6detail12wrapCallbackIZZN5trace16ARICommandDriver12getTraceModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc4dictEEEEEUb2_E3__3vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  uint64_t v28 = &__block_descriptor_tmp_87;
  uint64_t v29 = v13;
  uint64_t v30 = v11;
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlock[0] = (const void *)MEMORY[0x263EF8330];
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_1;
  aBlock[3] = &unk_264C7D900;
  aBlock[4] = &v25;
  uint64_t v14 = _Block_copy(aBlock);
  uint64_t v15 = v30;
  if (!v30 || atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_14:
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_15:
  *(void *)&long long v16 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v22[0] = v16;
  v22[1] = v16;
  unint64_t v23 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v17 = *(std::__shared_weak_count **)(v4 + 16);
  uint64_t v25 = *(void *)(v4 + 8);
  if (!v17)
  {
    uint64_t v26 = 0;
LABEL_36:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v26 = (uint64_t)std::__shared_weak_count::lock(v17);
  if (!v26) {
    goto LABEL_36;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  long long v18 = (std::__shared_weak_count *)v26;
  if (v26 && !atomic_fetch_add((atomic_ullong *volatile)(v26 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  aBlock[0] = v14;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0]) {
    _Block_release(aBlock[0]);
  }
  MEMORY[0x237DF50B0](v22);
  if (object) {
    dispatch_release(object);
  }
  if (v20) {
    _Block_release(v20);
  }
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  return MEMORY[0x237DF52F0](v24);
}

void sub_235DDE9F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  uint64_t v4 = *(const void **)(v2 - 120);
  if (v4) {
    _Block_release(v4);
  }
  MEMORY[0x237DF50B0]((uint64_t *)va1);
  _ZZZN5trace16ARICommandDriver12getTraceModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc4dictEEEEEUb2_EN3__3D1Ev((uint64_t *)va);
  MEMORY[0x237DF52F0](va2);
  _Unwind_Resume(a1);
}

void sub_235DDEA2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  if (v30) {
    _Block_release(v30);
  }
  _ZZZN5trace16ARICommandDriver12getTraceModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc4dictEEEEEUb2_EN3__3D1Ev(&a10);
  MEMORY[0x237DF52F0](&a21);
  _Unwind_Resume(a1);
}

void *_ZZZN5trace16ARICommandDriver12getTraceModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc4dictEEEEEUb2_EN3__3D1Ev(void *a1)
{
  uint64_t v2 = a1[4];
  if (v2) {
    dispatch_release(v2);
  }
  long long v3 = (const void *)a1[3];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void __copy_helper_block_e8_40c46_ZTSNSt3__18weak_ptrIN5trace13CommandDriverEEE56c90_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc4dictEEEE(void *a1, void *a2)
{
  uint64_t v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (void *)a2[7];
  if (v5) {
    uint64_t v5 = _Block_copy(v5);
  }
  uint64_t v6 = a2[8];
  a1[7] = v5;
  a1[8] = v6;
  if (v6)
  {
    dispatch_retain(v6);
  }
}

void __destroy_helper_block_e8_40c46_ZTSNSt3__18weak_ptrIN5trace13CommandDriverEEE56c90_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc4dictEEEE(void *a1)
{
  uint64_t v2 = a1[8];
  if (v2) {
    dispatch_release(v2);
  }
  long long v3 = (const void *)a1[7];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void trace::ARICommandDriver::setTraceMode(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a1 + 72);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 80);
  uint64_t v6 = (uint64_t *)(a1 + 72);
  if (!v5 || (uint64_t v10 = std::__shared_weak_count::lock(v5)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v11 = v10;
  p_shared_weak_owners = &v10->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v11);
  }
  v15[0] = MEMORY[0x263EF8330];
  v15[1] = 1174405120;
  v15[2] = ___ZN5trace16ARICommandDriver12setTraceModeENS_4ModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke;
  v15[3] = &__block_descriptor_tmp_18_0;
  int v19 = a2;
  v15[4] = a1;
  uint64_t v15[5] = v7;
  uint64_t v16 = v11;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v13 = *(void **)a3;
  if (*(void *)a3) {
    uint64_t v13 = _Block_copy(v13);
  }
  uint64_t v14 = *(NSObject **)(a3 + 8);
  aBlocunint64_t k = v13;
  dispatch_object_t object = v14;
  if (v14) {
    dispatch_retain(v14);
  }
  ctu::SharedSynchronizable<trace::CommandDriver>::execute_wrapped(v6, (uint64_t)v15);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  std::__shared_weak_count::__release_weak(v11);
}

uint64_t ___ZN5trace16ARICommandDriver12setTraceModeENS_4ModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  long long __p = (void *)0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  _OWORD v27[2] = v3;
  v27[3] = v3;
  v27[0] = v3;
  v27[1] = v3;
  AriSdk::ARI_CsiXsioSetReq_SDK::ARI_CsiXsioSetReq_SDK((AriSdk::ARI_CsiXsioSetReq_SDK *)v27);
  if (*(_DWORD *)(a1 + 72) != 2)
  {
    uint64_t v6 = operator new(4uLL);
    _DWORD *v6 = 0;
    uint64_t v5 = __p;
    long long __p = v6;
    if (!v5) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v4 = operator new(4uLL);
  _DWORD *v4 = 2;
  uint64_t v5 = __p;
  long long __p = v4;
  if (v5) {
LABEL_5:
  }
    operator delete(v5);
LABEL_6:
  uint64_t v7 = *(void *)(v2 + 104);
  uint64_t v9 = *(std::__shared_weak_count_vtbl **)(a1 + 40);
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 48);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *(const void **)(a1 + 56);
  if (v10)
  {
    uint64_t v11 = _Block_copy(v10);
    uint64_t v12 = *(NSObject **)(a1 + 64);
    long long v21 = v11;
    dispatch_object_t object = v12;
    if (!v12) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  uint64_t v11 = 0;
  uint64_t v12 = *(NSObject **)(a1 + 64);
  long long v21 = 0;
  dispatch_object_t object = v12;
  if (v12) {
LABEL_10:
  }
    dispatch_retain(v12);
LABEL_11:
  uint64_t v23 = v2;
  int v24 = *(_DWORD *)(a1 + 72);
  uint64_t v13 = (std::__shared_weak_count *)operator new(0x48uLL);
  v13->__shared_owners_ = 0;
  p_shared_owners = &v13->__shared_owners_;
  v13->__shared_weak_owners_ = 0;
  v13->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93C448;
  v13[1].__vftable = v9;
  v13[1].__shared_owners_ = (uint64_t)v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v11)
  {
    v13[1].__shared_weak_owners_ = 0;
    v13[2].__vftable = (std::__shared_weak_count_vtbl *)v12;
    if (!v12) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  v13[1].__shared_weak_owners_ = (uint64_t)_Block_copy(v11);
  v13[2].__vftable = (std::__shared_weak_count_vtbl *)v12;
  if (v12) {
LABEL_15:
  }
    dispatch_retain(v12);
LABEL_16:
  v13[2].__shared_owners_ = v23;
  LODWORD(v13[2].__shared_weak_owners_) = v24;
  uint64_t v29 = MEMORY[0x263EF8330];
  uint64_t v30 = 1174405120;
  uint64_t v31 = ___ZN3ice6detail12wrapCallbackIZZN5trace16ARICommandDriver12setTraceModeENS2_4ModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb3_E3__4vEENS5_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  uint64_t v32 = &__block_descriptor_tmp_92;
  long long v33 = v13 + 1;
  long long v34 = v13;
  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlock[0] = (const void *)MEMORY[0x263EF8330];
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_1;
  aBlock[3] = &unk_264C7D900;
  aBlock[4] = &v29;
  uint64_t v15 = _Block_copy(aBlock);
  uint64_t v16 = v34;
  if (!v34 || atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
  std::__shared_weak_count::__release_weak(v16);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_19:
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
LABEL_20:
  *(void *)&long long v17 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v25[0] = v17;
  v25[1] = v17;
  unint64_t v26 = 0xAAAAAAAAAAAAAAAALL;
  long long v18 = *(std::__shared_weak_count **)(v7 + 16);
  uint64_t v29 = *(void *)(v7 + 8);
  if (!v18)
  {
    uint64_t v30 = 0;
LABEL_41:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v30 = (uint64_t)std::__shared_weak_count::lock(v18);
  if (!v30) {
    goto LABEL_41;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  int v19 = (std::__shared_weak_count *)v30;
  if (v30 && !atomic_fetch_add((atomic_ullong *volatile)(v30 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  aBlock[0] = v15;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0]) {
    _Block_release(aBlock[0]);
  }
  MEMORY[0x237DF50B0](v25);
  if (object) {
    dispatch_release(object);
  }
  if (v21) {
    _Block_release(v21);
  }
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  return MEMORY[0x237DF5310](v27);
}

void *_ZZZN5trace16ARICommandDriver12setTraceModeENS_4ModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb3_EN3__4D1Ev(void *a1)
{
  uint64_t v2 = a1[3];
  if (v2) {
    dispatch_release(v2);
  }
  long long v3 = (const void *)a1[2];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

uint64_t trace::ARICommandDriver::profileMaskV1_sync(uint64_t a1, uint64_t a2, uint64_t a3, std::__shared_weak_count **a4, NSObject **a5)
{
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)uint64_t v48 = v10;
  long long v49 = v10;
  *(_OWORD *)long long __p = v10;
  long long v47 = v10;
  v45[2] = v10;
  v45[3] = v10;
  v45[0] = v10;
  v45[1] = v10;
  AriSdk::ARI_CsiTraceProfileInitReq_SDK::ARI_CsiTraceProfileInitReq_SDK((AriSdk::ARI_CsiTraceProfileInitReq_SDK *)v45);
  uint64_t v12 = *(char **)a2;
  uint64_t v11 = *(void *)(a2 + 8);
  uint64_t v13 = operator new(4uLL);
  *uint64_t v13 = v11 - v12;
  uint64_t v14 = __p[0];
  __p[0] = v13;
  if (v14) {
    operator delete(v14);
  }
  AriSdk::TlvArray<char,960ul>::operator=((char **)&__p[1], (char **)a2);
  uint64_t v16 = *(char **)a3;
  uint64_t v15 = *(void *)(a3 + 8);
  long long v17 = operator new(4uLL);
  *long long v17 = v15 - v16;
  long long v18 = v48[0];
  v48[0] = v17;
  if (v18) {
    operator delete(v18);
  }
  AriSdk::TlvArray<char,960ul>::operator=((char **)&v48[1], (char **)a3);
  uint64_t v19 = *(void *)(a1 + 104);
  int v20 = a4[1];
  v41[0] = *a4;
  v41[1] = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  long long v21 = *a5;
  if (*a5) {
    long long v21 = _Block_copy(v21);
  }
  uint64_t v22 = a5[1];
  object[0] = v21;
  object[1] = v22;
  if (v22) {
    dispatch_retain(v22);
  }
  uint64_t v23 = *(char **)a2;
  size_t v24 = *(void *)(a2 + 8) - *(void *)a2;
  if (v24)
  {
    if ((v24 & 0x8000000000000000) != 0) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v25 = (char *)operator new(v24);
    unint64_t v26 = (std::__shared_weak_count_vtbl *)&v25[v24];
    memcpy(v25, v23, v24);
    uint64_t v28 = *(char **)a3;
    uint64_t v27 = *(void *)(a3 + 8);
    size_t v29 = v27 - *(void *)a3;
    if (v27 != *(void *)a3) {
      goto LABEL_14;
    }
LABEL_17:
    uint64_t v31 = 0;
    uint64_t v30 = 0;
    goto LABEL_18;
  }
  unint64_t v26 = 0;
  uint64_t v25 = 0;
  uint64_t v28 = *(char **)a3;
  uint64_t v32 = *(void *)(a3 + 8);
  size_t v29 = v32 - *(void *)a3;
  if (v32 == *(void *)a3) {
    goto LABEL_17;
  }
LABEL_14:
  if ((v29 & 0x8000000000000000) != 0) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v30 = (char *)operator new(v29);
  uint64_t v31 = (std::__shared_weak_count_vtbl *)&v30[v29];
  memcpy(v30, v28, v29);
LABEL_18:
  long long v33 = (std::__shared_weak_count *)operator new(0x70uLL);
  *(_OWORD *)&v33->__shared_owners_ = 0u;
  p_shared_owners = &v33->__shared_owners_;
  v33[1].std::__shared_count = *(std::__shared_count *)v41;
  v33->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93C4C8;
  *(_OWORD *)&v33[1].__shared_weak_owners_ = *(_OWORD *)object;
  v33[2].__shared_owners_ = a1;
  v33[2].__shared_weak_owners_ = (uint64_t)v25;
  v33[3].__vftable = v26;
  v33[3].__shared_owners_ = (uint64_t)v26;
  v33[3].__shared_weak_owners_ = (uint64_t)v30;
  v33[4].__vftable = v31;
  v33[4].__shared_owners_ = (uint64_t)v31;
  uint64_t v50 = MEMORY[0x263EF8330];
  uint64_t v51 = 1174405120;
  long long v52 = ___ZN3ice6detail12wrapCallbackIZN5trace16ARICommandDriver18profileMaskV1_syncENSt3__16vectorIcNS4_9allocatorIcEEEES8_NS4_8weak_ptrINS2_13CommandDriverEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEE3__0vEENSC_5blockIU13block_pointerFiPhjEEENS4_17integral_constantIiLi2EEEOT__block_invoke;
  unint64_t v53 = &__block_descriptor_tmp_98;
  unint64_t v54 = v33 + 1;
  uint64_t v55 = v33;
  atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlock[0] = (const void *)MEMORY[0x263EF8330];
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_1;
  aBlock[3] = &unk_264C7D900;
  aBlock[4] = &v50;
  uint64_t v35 = _Block_copy(aBlock);
  long long v36 = v55;
  if (!v55 || atomic_fetch_add(&v55->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
  std::__shared_weak_count::__release_weak(v36);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_21:
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
LABEL_22:
  *(void *)&long long v37 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v37 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v43[0] = v37;
  v43[1] = v37;
  unint64_t v44 = 0xAAAAAAAAAAAAAAAALL;
  long long v38 = *(std::__shared_weak_count **)(v19 + 16);
  uint64_t v50 = *(void *)(v19 + 8);
  if (!v38)
  {
    uint64_t v51 = 0;
LABEL_33:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v51 = (uint64_t)std::__shared_weak_count::lock(v38);
  if (!v51) {
    goto LABEL_33;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  long long v39 = (std::__shared_weak_count *)v51;
  if (v51 && !atomic_fetch_add((atomic_ullong *volatile)(v51 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
  }
  aBlock[0] = v35;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0]) {
    _Block_release(aBlock[0]);
  }
  MEMORY[0x237DF50B0](v43);
  return MEMORY[0x237DF5FD0](v45);
}

void sub_235DDF68C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  size_t v29 = *(const void **)(v27 - 128);
  if (v29) {
    _Block_release(v29);
  }
  MEMORY[0x237DF50B0](&a21);
  trace::ARICommandDriver::profileMaskV1_sync(std::vector<char>,std::vector<char>,std::weak_ptr<trace::CommandDriver>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::~$_0(&a9);
  MEMORY[0x237DF5FD0](&a27);
  _Unwind_Resume(a1);
}

void sub_235DDF6C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v28 - 176);
  if (v27) {
    _Block_release(v27);
  }
  trace::ARICommandDriver::profileMaskV1_sync(std::vector<char>,std::vector<char>,std::weak_ptr<trace::CommandDriver>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::~$_0(&a9);
  MEMORY[0x237DF5FD0](&a27);
  _Unwind_Resume(a1);
}

char **AriSdk::TlvArray<char,960ul>::operator=(char **a1, char **a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if ((unint64_t)(v5 - v4) < 0x3C1)
  {
    if (a1 == a2) {
      return a1;
    }
    std::vector<char>::__assign_with_size[abi:ne180100]<char *,char *>(a1, v4, v5, v5 - v4);
    return a1;
  }
  else
  {
    AriOsa::LogSrcInfo((uint64_t *)__p, (AriOsa *)"/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/ARI/ari_sdk_msg.h", "operator=", v5);
    if (v11 >= 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    Ari::Log((Ari *)8, (uint64_t)"(%s:%d) Array assignment too large(%p), got(%d) max(%d)", v7, v8, 349, a1, a2[1] - *a2, 960);
    if ((v11 & 0x80000000) == 0) {
      return a1;
    }
    operator delete(__p[0]);
    return a1;
  }
}

void sub_235DDF8D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *trace::ARICommandDriver::profileMaskV1_sync(std::vector<char>,std::vector<char>,std::weak_ptr<trace::CommandDriver>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::~$_0(void *a1)
{
  uint64_t v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  long long v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
  uint64_t v4 = a1[3];
  if (v4) {
    dispatch_release(v4);
  }
  uint64_t v5 = (const void *)a1[2];
  if (v5) {
    _Block_release(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)a1[1];
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  return a1;
}

void trace::ARICommandDriver::profileMaskV2_sync(uint64_t a1, const void **a2, __int16 a3, std::__shared_weak_count **a4, NSObject **a5)
{
  uint64_t v6 = a2[1];
  if (v6 != *a2)
  {
    int v7 = 0;
    unsigned int v8 = 0;
    unsigned int v49 = vcvtpd_u64_f64((double)(v6 - *a2) * 0.000260416667) - 1;
    unsigned int v50 = v6 - *a2;
    unsigned int v9 = v50;
    while (1)
    {
      unsigned int v10 = v9 - 3840;
      if (v9 >= 0xF00) {
        int v11 = 3840;
      }
      else {
        int v11 = v9;
      }
      *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)uint64_t v69 = v12;
      long long v70 = v12;
      *(_OWORD *)long long __p = v12;
      *(_OWORD *)unint64_t v68 = v12;
      long long v65 = v12;
      long long v66 = v12;
      *(_OWORD *)long long buf = v12;
      long long v64 = v12;
      AriSdk::ARI_CsiTraceProfilePacketsReq_SDK::ARI_CsiTraceProfilePacketsReq_SDK((AriSdk::ARI_CsiTraceProfilePacketsReq_SDK *)buf);
      uint64_t v13 = operator new(2uLL);
      *uint64_t v13 = a3;
      uint64_t v14 = __p[0];
      __p[0] = v13;
      if (v14) {
        operator delete(v14);
      }
      uint64_t v15 = operator new(2uLL);
      *uint64_t v15 = v8;
      uint64_t v16 = __p[1];
      __p[1] = v15;
      if (v16) {
        operator delete(v16);
      }
      long long v17 = operator new(4uLL);
      *long long v17 = v50;
      long long v18 = v68[0];
      v68[0] = v17;
      if (v18) {
        operator delete(v18);
      }
      uint64_t v19 = operator new(4uLL);
      _DWORD *v19 = v7;
      int v20 = v68[1];
      v68[1] = v19;
      if (v20) {
        operator delete(v20);
      }
      long long v21 = operator new(4uLL);
      *long long v21 = v11;
      uint64_t v22 = v69[0];
      v69[0] = v21;
      if (v22) {
        operator delete(v22);
      }
      uint64_t v23 = a2[1];
      size_t v24 = (char *)*a2 + v7;
      uint64_t v72 = 0;
      unint64_t v73 = 0;
      uint64_t v71 = 0;
      size_t v25 = v23 - v24;
      if (v23 == v24) {
        break;
      }
      if ((v25 & 0x8000000000000000) != 0) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v26 = (char *)operator new(v23 - v24);
      uint64_t v27 = &v26[v25];
      uint64_t v71 = v26;
      unint64_t v73 = (void (*)(uint64_t, const unsigned __int8 *))&v26[v25];
      memmove(v26, v24, v25);
      uint64_t v72 = (uint64_t)&v26[v25];
      uint64_t v29 = a1;
      if (v25 < 0xF01) {
        goto LABEL_26;
      }
      AriOsa::LogSrcInfo((uint64_t *)v55, (AriOsa *)"/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/ARI/ari_sdk_msg.h", "operator=", v28);
      uint64_t v31 = v55;
      if (v56 < 0) {
        uint64_t v31 = (std::__shared_weak_count **)v55[0];
      }
      Ari::Log((Ari *)8, (uint64_t)"(%s:%d) Array assignment too large(%p), got(%zu) max(%zu)", v30, v31, 360, &v69[1], v25, 3840);
      if (SHIBYTE(v56) < 0)
      {
        operator delete(v55[0]);
        if (!v26) {
          goto LABEL_31;
        }
LABEL_30:
        operator delete(v26);
        goto LABEL_31;
      }
      if (v26) {
        goto LABEL_30;
      }
LABEL_31:
      uint64_t v32 = *(void *)(v29 + 104);
      long long v33 = a4[1];
      v55[0] = *a4;
      v55[1] = v33;
      if (v33) {
        atomic_fetch_add_explicit(&v33->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v56 = v29;
      __int16 v57 = a3;
      v58[1] = 0;
      long long v59 = 0;
      v58[0] = 0;
      uint64_t v35 = *a2;
      long long v34 = a2[1];
      size_t v36 = v34 - (unsigned char *)*a2;
      if (v34 != *a2)
      {
        if ((v36 & 0x8000000000000000) != 0) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        v58[0] = operator new(v34 - (unsigned char *)*a2);
        v58[1] = v58[0];
        long long v37 = (char *)v58[0] + v36;
        long long v59 = (std::__shared_weak_count_vtbl *)((char *)v58[0] + v36);
        memcpy(v58[0], v35, v36);
        v58[1] = v37;
      }
      long long v38 = *a5;
      if (*a5) {
        long long v38 = _Block_copy(v38);
      }
      long long v39 = a5[1];
      object[0] = v38;
      object[1] = v39;
      if (v39) {
        dispatch_retain(v39);
      }
      long long v40 = (std::__shared_weak_count *)operator new(0x60uLL);
      v40->__shared_owners_ = 0;
      p_shared_owners = &v40->__shared_owners_;
      long long v42 = *(_OWORD *)v58;
      v40[1].std::__shared_count = *(std::__shared_count *)v55;
      v40->__shared_weak_owners_ = 0;
      v40->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93C548;
      v55[0] = 0;
      v55[1] = 0;
      v40[1].__shared_weak_owners_ = v56;
      LOWORD(v40[2].__vftable) = v57;
      *(_OWORD *)&v40[2].__shared_owners_ = v42;
      v40[3].__vftable = v59;
      v58[1] = 0;
      long long v59 = 0;
      v58[0] = 0;
      *(_OWORD *)&v40[3].__shared_owners_ = *(_OWORD *)object;
      object[0] = 0;
      object[1] = 0;
      uint64_t v71 = (char *)MEMORY[0x263EF8330];
      uint64_t v72 = 1174405120;
      unint64_t v73 = ___ZN3ice6detail12wrapCallbackIZN5trace16ARICommandDriver18profileMaskV2_syncENSt3__16vectorIcNS4_9allocatorIcEEEEtNS4_8weak_ptrINS2_13CommandDriverEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEE3__0vEENSC_5blockIU13block_pointerFiPhjEEENS4_17integral_constantIiLi2EEEOT__block_invoke;
      unint64_t v74 = &__block_descriptor_tmp_103;
      uint64_t v75 = v40 + 1;
      uint64_t v76 = v40;
      atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
      aBlock[0] = (const void *)MEMORY[0x263EF8330];
      aBlock[1] = (const void *)0x40000000;
      aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_1;
      aBlock[3] = &unk_264C7D900;
      aBlock[4] = &v71;
      long long v43 = _Block_copy(aBlock);
      unint64_t v44 = v76;
      if (v76 && !atomic_fetch_add(&v76->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
        if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
          goto LABEL_44;
        }
LABEL_43:
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
        goto LABEL_44;
      }
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_43;
      }
LABEL_44:
      *(void *)&long long v45 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v45 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v61[0] = v45;
      v61[1] = v45;
      unint64_t v62 = 0xAAAAAAAAAAAAAAAALL;
      unint64_t v46 = *(std::__shared_weak_count **)(v32 + 16);
      uint64_t v71 = *(char **)(v32 + 8);
      if (!v46)
      {
        uint64_t v72 = 0;
LABEL_65:
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      uint64_t v72 = (uint64_t)std::__shared_weak_count::lock(v46);
      if (!v72) {
        goto LABEL_65;
      }
      ice::SendMsgBaseProxy::SendMsgBaseProxy();
      long long v47 = (std::__shared_weak_count *)v72;
      if (v72 && !atomic_fetch_add((atomic_ullong *volatile)(v72 + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
      aBlock[0] = v43;
      ice::SendMsgBaseProxy::callback();
      if (aBlock[0]) {
        _Block_release(aBlock[0]);
      }
      MEMORY[0x237DF50B0](v61);
      if (object[1]) {
        dispatch_release(object[1]);
      }
      if (object[0]) {
        _Block_release(object[0]);
      }
      if (v58[0])
      {
        v58[1] = v58[0];
        operator delete(v58[0]);
      }
      if (v55[1]) {
        std::__shared_weak_count::__release_weak(v55[1]);
      }
      MEMORY[0x237DF64D0](buf);
      ++v8;
      v7 += 3840;
      unsigned int v9 = v10;
      if (v8 > v49) {
        return;
      }
    }
    unint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v29 = a1;
LABEL_26:
    if (v69[1])
    {
      *(void **)&long long v70 = v69[1];
      operator delete(v69[1]);
    }
    v69[1] = v26;
    *(void *)&long long v70 = v27;
    *((void *)&v70 + 1) = v27;
    goto LABEL_31;
  }
  uint64_t v48 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_235DB9000, v48, OS_LOG_TYPE_ERROR, "Nothing have to be sent!", buf, 2u);
  }
}

void sub_235DDFFA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,std::__shared_weak_count *a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  if (v44)
  {
    operator delete(v44);
    MEMORY[0x237DF64D0](&a44);
    _Unwind_Resume(a1);
  }
  MEMORY[0x237DF64D0](&a44);
  _Unwind_Resume(a1);
}

void *trace::ARICommandDriver::profileMaskV2_sync(std::vector<char>,unsigned short,std::weak_ptr<trace::CommandDriver>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::~$_0(void *a1)
{
  uint64_t v2 = a1[8];
  if (v2) {
    dispatch_release(v2);
  }
  long long v3 = (const void *)a1[7];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = (void *)a1[4];
  if (v4)
  {
    a1[5] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

void trace::ARICommandDriver::setTraceMasks(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (!v4 || (v7 = a1[9], (unsigned int v8 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  unsigned int v9 = v8;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  long long v47 = 0;
  size_t v48 = 0;
  unsigned int v49 = 0;
  unint64_t v44 = 0;
  size_t v45 = 0;
  unint64_t v46 = 0;
  if (&v47 != (void **)(a2 + 8))
  {
    int v11 = *(unsigned char **)(a2 + 8);
    unsigned int v10 = *(unsigned char **)(a2 + 16);
    size_t v12 = v10 - v11;
    if (v10 == v11)
    {
      size_t v13 = 0;
    }
    else
    {
      if ((v12 & 0x8000000000000000) != 0) {
        goto LABEL_55;
      }
      size_t v13 = (size_t)operator new(v10 - v11);
      long long v47 = (void *)v13;
      size_t v48 = v13;
      unsigned int v49 = (char *)(v13 + v12);
      memcpy((void *)v13, v11, v12);
      v12 += v13;
    }
    size_t v48 = v12;
    if (&v44 != (void **)(a2 + 32)) {
      goto LABEL_13;
    }
LABEL_10:
    size_t v14 = 0;
    size_t v15 = 0;
    goto LABEL_18;
  }
  size_t v12 = 0;
  size_t v13 = 0;
  if (&v44 == (void **)(a2 + 32)) {
    goto LABEL_10;
  }
LABEL_13:
  long long v17 = *(unsigned char **)(a2 + 32);
  uint64_t v16 = *(unsigned char **)(a2 + 40);
  size_t v14 = v16 - v17;
  if (v16 == v17)
  {
    size_t v15 = 0;
    goto LABEL_17;
  }
  if ((v14 & 0x8000000000000000) != 0) {
LABEL_55:
  }
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  size_t v15 = (size_t)operator new(v16 - v17);
  unint64_t v44 = (void *)v15;
  size_t v45 = v15;
  unint64_t v46 = (char *)(v15 + v14);
  memcpy((void *)v15, v17, v14);
  v14 += v15;
LABEL_17:
  size_t v45 = v14;
LABEL_18:
  v33[0] = MEMORY[0x263EF8330];
  v33[1] = 1174405120;
  v33[2] = ___ZN5trace16ARICommandDriver13setTraceMasksERNS_13TraceMaskInfoEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke;
  v33[3] = &__block_descriptor_tmp_20;
  v33[4] = a1;
  long long v34 = 0;
  uint64_t v35 = 0;
  size_t v36 = 0;
  size_t v18 = v12 - v13;
  if (v18)
  {
    if ((v18 & 0x8000000000000000) != 0) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v19 = (char *)operator new(v18);
    int v20 = &v19[v18];
    long long v34 = v19;
    size_t v36 = &v19[v18];
    memcpy(v19, (const void *)v13, v18);
    uint64_t v35 = v20;
  }
  long long __p = 0;
  long long v38 = 0;
  long long v39 = 0;
  size_t v21 = v14 - v15;
  if (v14 != v15)
  {
    if ((v21 & 0x8000000000000000) != 0) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v22 = (char *)operator new(v14 - v15);
    uint64_t v23 = &v22[v21];
    long long __p = v22;
    long long v39 = &v22[v21];
    memcpy(v22, (const void *)v15, v14 - v15);
    long long v38 = v23;
  }
  size_t v24 = *(void **)a3;
  if (*(void *)a3) {
    size_t v24 = _Block_copy(v24);
  }
  size_t v25 = *(NSObject **)(a3 + 8);
  aBlocunint64_t k = v24;
  dispatch_object_t object = v25;
  if (v25) {
    dispatch_retain(v25);
  }
  uint64_t v42 = v7;
  long long v43 = v9;
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  unint64_t v26 = (std::__shared_weak_count *)a1[10];
  if (!v26 || (uint64_t v27 = a1[9], (v28 = std::__shared_weak_count::lock(v26)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v29 = v28;
  uint64_t v30 = a1[11];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN5trace13CommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_26E93C178;
  block[5] = v27;
  uint64_t v51 = v29;
  p_shared_owners = &v29->__shared_owners_;
  atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = v33;
  dispatch_async(v30, block);
  uint64_t v32 = v51;
  if (!v51 || atomic_fetch_add(&v51->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
  std::__shared_weak_count::__release_weak(v32);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_33:
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
LABEL_34:
  if (v43) {
    std::__shared_weak_count::__release_weak(v43);
  }
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (__p)
  {
    long long v38 = __p;
    operator delete(__p);
  }
  if (v34)
  {
    uint64_t v35 = v34;
    operator delete(v34);
  }
  if (v44)
  {
    size_t v45 = (size_t)v44;
    operator delete(v44);
  }
  if (v47)
  {
    size_t v48 = (size_t)v47;
    operator delete(v47);
  }
  std::__shared_weak_count::__release_weak(v9);
}

void sub_235DE0564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  if (a29)
  {
    operator delete(a29);
    uint64_t v35 = a32;
    if (!a32)
    {
LABEL_7:
      std::__shared_weak_count::__release_weak(v33);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v35 = a32;
    if (!a32) {
      goto LABEL_7;
    }
  }
  operator delete(v35);
  std::__shared_weak_count::__release_weak(v33);
  _Unwind_Resume(a1);
}

void sub_235DE05D8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,long long a26,CFTypeRef cf)
{
  __cxa_begin_catch(a1);
  uint64_t v30 = *(NSObject **)(v28 + 40);
  if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)(v29 - 160) = 0;
    _os_log_error_impl(&dword_235DB9000, v30, OS_LOG_TYPE_ERROR, "Invalid parameter not downcastable to TraceMaskInfo", (uint8_t *)(v29 - 160), 2u);
    if (!*(void *)v27) {
      goto LABEL_17;
    }
  }
  else if (!*(void *)v27)
  {
    goto LABEL_17;
  }
  if (*(void *)(v27 + 8))
  {
    __pa = (char *)operator new(0x38uLL);
    strcpy(__pa, "Invalid parameter not downcastable to TraceMaskInfo");
    CreateError();
    operator delete(__pa);
    CFRetain((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
    if (*(void *)v27) {
      uint64_t v31 = _Block_copy(*(const void **)v27);
    }
    else {
      uint64_t v31 = 0;
    }
    uint64_t v32 = *(NSObject **)(v27 + 8);
    *(void *)(v29 - 160) = MEMORY[0x263EF8330];
    *(void *)(v29 - 152) = 1174405120;
    *(void *)(v29 - 144) = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke;
    *(void *)(v29 - 136) = &__block_descriptor_tmp_71;
    if (v31) {
      long long v33 = _Block_copy(v31);
    }
    else {
      long long v33 = 0;
    }
    *(void *)(v29 - 128) = v33;
    *(void *)(v29 - 120) = 0xAAAAAAAAAAAAAAAALL;
    CFRetain((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
    dispatch_async(v32, (dispatch_block_t)(v29 - 160));
    long long v34 = *(const void **)(v29 - 120);
    if (v34) {
      CFRelease(v34);
    }
    uint64_t v35 = *(const void **)(v29 - 128);
    if (v35) {
      _Block_release(v35);
    }
    if (v31) {
      _Block_release(v31);
    }
    CFRelease((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
    CFRelease((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
  }
LABEL_17:
  __cxa_end_catch();
  JUMPOUT(0x235DE0498);
}

void sub_235DE07A4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x235DE0590);
}

void sub_235DE07CC()
{
}

void ___ZN5trace16ARICommandDriver13setTraceMasksERNS_13TraceMaskInfoEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke(uint64_t a1)
{
  uint64_t v87 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  long long v3 = *(NSObject **)(v2 + 40);
  if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_39;
  }
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v4 = *(char **)(a1 + 48);
  unint64_t v6 = (unint64_t)&v4[-v5];
  if ((unint64_t)&v4[-v5] > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v6 > 0x16)
  {
    uint64_t v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v14 = v6 | 7;
    }
    uint64_t v15 = v14 + 1;
    uint64_t v7 = (void **)operator new(v14 + 1);
    v82[1] = &v4[-v5];
    int64_t v83 = v15 | 0x8000000000000000;
    v82[0] = v7;
    if ((char *)v5 != v4) {
      goto LABEL_5;
    }
LABEL_14:
    unsigned int v8 = v7;
    goto LABEL_17;
  }
  HIBYTE(v83) = (_BYTE)v4 - v5;
  uint64_t v7 = v82;
  if ((char *)v5 == v4) {
    goto LABEL_14;
  }
LABEL_5:
  if (v6 < 0x20 || (unint64_t)v7 - v5 < 0x20)
  {
    unsigned int v8 = v7;
    unsigned int v9 = (char *)v5;
  }
  else
  {
    unsigned int v8 = (char *)v7 + (v6 & 0xFFFFFFFFFFFFFFE0);
    unsigned int v9 = (char *)(v5 + (v6 & 0xFFFFFFFFFFFFFFE0));
    unsigned int v10 = (long long *)(v5 + 16);
    int v11 = v7 + 2;
    unint64_t v12 = v6 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v13 = *v10;
      *(v11 - 1) = *(v10 - 1);
      *int v11 = v13;
      v10 += 2;
      v11 += 2;
      v12 -= 32;
    }
    while (v12);
    if (v6 == (v6 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_17;
    }
  }
  do
  {
    char v16 = *v9++;
    *v8++ = v16;
  }
  while (v9 != v4);
LABEL_17:
  *unsigned int v8 = 0;
  if (v83 >= 0) {
    long long v17 = v82;
  }
  else {
    long long v17 = (void **)v82[0];
  }
  uint64_t v19 = *(void *)(a1 + 64);
  size_t v18 = *(char **)(a1 + 72);
  unint64_t v20 = (unint64_t)&v18[-v19];
  if ((unint64_t)&v18[-v19] > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v20 <= 0x16)
  {
    HIBYTE(v81) = (_BYTE)v18 - v19;
    size_t v21 = (char *)__p;
    if ((char *)v19 != v18) {
      goto LABEL_23;
    }
LABEL_32:
    uint64_t v22 = v21;
    goto LABEL_35;
  }
  uint64_t v28 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v20 | 7) != 0x17) {
    uint64_t v28 = v20 | 7;
  }
  uint64_t v29 = v28 + 1;
  size_t v21 = (char *)operator new(v28 + 1);
  __p[1] = &v18[-v19];
  int64_t v81 = v29 | 0x8000000000000000;
  __p[0] = v21;
  if ((char *)v19 == v18) {
    goto LABEL_32;
  }
LABEL_23:
  if (v20 < 0x20 || (unint64_t)&v21[-v19] < 0x20)
  {
    uint64_t v22 = v21;
    uint64_t v23 = (char *)v19;
    do
    {
LABEL_34:
      char v30 = *v23++;
      *v22++ = v30;
    }
    while (v23 != v18);
    goto LABEL_35;
  }
  uint64_t v22 = &v21[v20 & 0xFFFFFFFFFFFFFFE0];
  uint64_t v23 = (char *)(v19 + (v20 & 0xFFFFFFFFFFFFFFE0));
  size_t v24 = (long long *)(v19 + 16);
  size_t v25 = v21 + 16;
  unint64_t v26 = v20 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    long long v27 = *v24;
    *(v25 - 1) = *(v24 - 1);
    *size_t v25 = v27;
    v24 += 2;
    v25 += 2;
    v26 -= 32;
  }
  while (v26);
  if (v20 != (v20 & 0xFFFFFFFFFFFFFFE0)) {
    goto LABEL_34;
  }
LABEL_35:
  char *v22 = 0;
  uint64_t v31 = __p;
  if (v81 < 0) {
    uint64_t v31 = (void **)__p[0];
  }
  *(_DWORD *)long long buf = 134218754;
  *(void *)&uint8_t buf[4] = v6;
  *(_WORD *)&unsigned char buf[12] = 2080;
  *(void *)&buf[14] = v17;
  *(_WORD *)&buf[22] = 2048;
  unint64_t v85 = &v18[-v19];
  LOWORD(v86) = 2080;
  *(void *)((char *)&v86 + 2) = v31;
  _os_log_impl(&dword_235DB9000, v3, OS_LOG_TYPE_DEFAULT, "#I Setting trace masks\nActive[%zu]: %s\nSleep[%zu]: %s", buf, 0x2Au);
  if (SHIBYTE(v81) < 0)
  {
    operator delete(__p[0]);
    if (SHIBYTE(v83) < 0) {
      goto LABEL_63;
    }
LABEL_39:
    long long v33 = *(unsigned char **)(a1 + 40);
    uint64_t v32 = *(unsigned char **)(a1 + 48);
    size_t v34 = v32 - v33;
    if (v32 == v33) {
      goto LABEL_64;
    }
    goto LABEL_40;
  }
  if ((SHIBYTE(v83) & 0x80000000) == 0) {
    goto LABEL_39;
  }
LABEL_63:
  operator delete(v82[0]);
  long long v33 = *(unsigned char **)(a1 + 40);
  size_t v48 = *(unsigned char **)(a1 + 48);
  size_t v34 = v48 - v33;
  if (v48 == v33)
  {
LABEL_64:
    unsigned int v49 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_235DB9000, v49, OS_LOG_TYPE_ERROR, "Cannot set trace mask of size zero", buf, 2u);
      if (!*(void *)(a1 + 88)) {
        return;
      }
    }
    else if (!*(void *)(a1 + 88))
    {
      return;
    }
    if (!*(void *)(a1 + 96)) {
      return;
    }
    CFErrorRef v50 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], (CFErrorDomain)*MEMORY[0x263EFFC60], 2, 0);
    CFErrorRef v51 = v50;
    if (v50) {
      CFRetain(v50);
    }
    long long v52 = *(const void **)(a1 + 88);
    if (v52) {
      unint64_t v53 = _Block_copy(v52);
    }
    else {
      unint64_t v53 = 0;
    }
    uint64_t v58 = *(NSObject **)(a1 + 96);
    *(void *)long long buf = MEMORY[0x263EF8330];
    *(void *)&uint8_t buf[8] = 1174405120;
    *(void *)&uint8_t buf[16] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke;
    unint64_t v85 = (char *)&__block_descriptor_tmp_71;
    if (v53)
    {
      *(void *)&long long v86 = _Block_copy(v53);
      *((void *)&v86 + 1) = v51;
      if (!v51) {
        goto LABEL_99;
      }
    }
    else
    {
      *(void *)&long long v86 = 0;
      *((void *)&v86 + 1) = v51;
      if (!v51)
      {
LABEL_99:
        dispatch_async(v58, buf);
        if (*((void *)&v86 + 1)) {
          CFRelease(*((CFTypeRef *)&v86 + 1));
        }
        if ((void)v86) {
          _Block_release((const void *)v86);
        }
        if (v53) {
          _Block_release(v53);
        }
        if (v51)
        {
          CFRelease(v51);
          CFRelease(v51);
        }
        return;
      }
    }
    CFRetain(v51);
    goto LABEL_99;
  }
LABEL_40:
  size_t v36 = *(unsigned char **)(a1 + 64);
  uint64_t v35 = *(unsigned char **)(a1 + 72);
  size_t v37 = v35 - v36;
  if (v35 == v36) {
    goto LABEL_64;
  }
  if (*(unsigned char *)(v2 + 168))
  {
    unint64_t v77 = 0;
    uint64_t v78 = 0;
    unint64_t v79 = 0;
    if ((v34 & 0x8000000000000000) != 0) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    long long v38 = (char *)operator new(v34);
    unint64_t v77 = v38;
    unint64_t v79 = &v38[v34];
    memcpy(v38, v33, v34);
    uint64_t v78 = &v38[v34];
    long long v39 = *(std::__shared_weak_count **)(a1 + 112);
    v76[0] = *(std::__shared_weak_count **)(a1 + 104);
    v76[1] = v39;
    if (v39) {
      atomic_fetch_add_explicit(&v39->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    v75[0] = 0;
    v75[1] = 0;
    trace::ARICommandDriver::profileMaskV2_sync(v2, &v77, 1, v76, v75);
    if (v39) {
      std::__shared_weak_count::__release_weak(v39);
    }
    uint64_t v78 = v38;
    operator delete(v38);
    uint64_t v72 = 0;
    unint64_t v73 = 0;
    unint64_t v74 = 0;
    long long v41 = *(unsigned char **)(a1 + 64);
    long long v40 = *(unsigned char **)(a1 + 72);
    size_t v42 = v40 - v41;
    if (v40 == v41)
    {
      long long v43 = 0;
      unint64_t v44 = *(std::__shared_weak_count **)(a1 + 112);
      long long v70 = *(std::__shared_weak_count **)(a1 + 104);
      uint64_t v71 = v44;
      if (v44) {
LABEL_50:
      }
        atomic_fetch_add_explicit(&v44->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      if ((v42 & 0x8000000000000000) != 0) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      long long v43 = (char *)operator new(v40 - v41);
      uint64_t v72 = v43;
      unint64_t v74 = &v43[v42];
      memcpy(v43, v41, v42);
      unint64_t v73 = &v43[v42];
      unint64_t v44 = *(std::__shared_weak_count **)(a1 + 112);
      long long v70 = *(std::__shared_weak_count **)(a1 + 104);
      uint64_t v71 = v44;
      if (v44) {
        goto LABEL_50;
      }
    }
    size_t v45 = *(const void **)(a1 + 88);
    if (v45)
    {
      unint64_t v46 = _Block_copy(v45);
      long long v47 = *(NSObject **)(a1 + 96);
      unint64_t v68 = v46;
      uint64_t v69 = v47;
      if (!v47) {
        goto LABEL_54;
      }
    }
    else
    {
      unint64_t v46 = 0;
      long long v47 = *(NSObject **)(a1 + 96);
      unint64_t v68 = 0;
      uint64_t v69 = v47;
      if (!v47)
      {
LABEL_54:
        trace::ARICommandDriver::profileMaskV2_sync(v2, &v72, 0, &v70, &v68);
        if (v47) {
          dispatch_release(v47);
        }
        if (v46) {
          _Block_release(v46);
        }
        if (v44) {
          std::__shared_weak_count::__release_weak(v44);
        }
        if (!v43) {
          return;
        }
LABEL_88:
        operator delete(v43);
        return;
      }
    }
    dispatch_retain(v47);
    goto LABEL_54;
  }
  long long v65 = 0;
  long long v66 = 0;
  int v67 = 0;
  if ((v34 & 0x8000000000000000) != 0) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  long long v65 = (char *)operator new(v34);
  int v67 = &v65[v34];
  memcpy(v65, v33, v34);
  long long v66 = &v65[v34];
  float64x2x2_t v63 = 0;
  long long v64 = 0;
  unint64_t v62 = 0;
  if ((v37 & 0x8000000000000000) != 0) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v62 = operator new(v37);
  long long v64 = (char *)v62 + v37;
  memcpy(v62, v36, v37);
  float64x2x2_t v63 = (char *)v62 + v37;
  unint64_t v54 = *(std::__shared_weak_count **)(a1 + 112);
  v61[0] = *(std::__shared_weak_count **)(a1 + 104);
  v61[1] = v54;
  if (v54) {
    atomic_fetch_add_explicit(&v54->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v55 = *(const void **)(a1 + 88);
  if (v55)
  {
    uint64_t v56 = _Block_copy(v55);
    __int16 v57 = *(NSObject **)(a1 + 96);
    long long v59 = v56;
    long long v60 = v57;
    if (!v57) {
      goto LABEL_78;
    }
    goto LABEL_77;
  }
  uint64_t v56 = 0;
  __int16 v57 = *(NSObject **)(a1 + 96);
  long long v59 = 0;
  long long v60 = v57;
  if (v57) {
LABEL_77:
  }
    dispatch_retain(v57);
LABEL_78:
  trace::ARICommandDriver::profileMaskV1_sync(v2, (uint64_t)&v65, (uint64_t)&v62, v61, &v59);
  if (v57) {
    dispatch_release(v57);
  }
  if (v56) {
    _Block_release(v56);
  }
  if (v54) {
    std::__shared_weak_count::__release_weak(v54);
  }
  if (v62)
  {
    float64x2x2_t v63 = (char *)v62;
    operator delete(v62);
  }
  long long v43 = v65;
  if (v65)
  {
    long long v66 = v65;
    goto LABEL_88;
  }
}

void sub_235DE0F04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_40c39_ZTSNSt3__16vectorIcNS_9allocatorIcEEEE64c39_ZTSNSt3__16vectorIcNS_9allocatorIcEEEE88c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE104c46_ZTSNSt3__18weak_ptrIN5trace13CommandDriverEEE(void *a1, void *a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  uint64_t v5 = (unsigned char *)a2[5];
  uint64_t v4 = (unsigned char *)a2[6];
  size_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if ((v6 & 0x8000000000000000) != 0) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(v4 - v5);
    a1[5] = v7;
    a1[6] = v7;
    unsigned int v8 = &v7[v6];
    a1[7] = &v7[v6];
    memcpy(v7, v5, v6);
    a1[6] = v8;
  }
  a1[8] = 0;
  a1[9] = 0;
  a1[10] = 0;
  unsigned int v10 = (unsigned char *)a2[8];
  unsigned int v9 = (unsigned char *)a2[9];
  size_t v11 = v9 - v10;
  if (v9 != v10)
  {
    if ((v11 & 0x8000000000000000) != 0) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = (char *)operator new(v9 - v10);
    a1[8] = v12;
    a1[9] = v12;
    long long v13 = &v12[v11];
    a1[10] = &v12[v11];
    memcpy(v12, v10, v11);
    a1[9] = v13;
  }
  uint64_t v14 = (void *)a2[11];
  if (v14) {
    uint64_t v14 = _Block_copy(v14);
  }
  uint64_t v15 = a2[12];
  a1[11] = v14;
  a1[12] = v15;
  if (v15) {
    dispatch_retain(v15);
  }
  uint64_t v16 = a2[14];
  a1[13] = a2[13];
  a1[14] = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 16), 1uLL, memory_order_relaxed);
  }
}

void sub_235DE1160(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 72) = v5;
    operator delete(v5);
  }
  size_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 48) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c39_ZTSNSt3__16vectorIcNS_9allocatorIcEEEE64c39_ZTSNSt3__16vectorIcNS_9allocatorIcEEEE88c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE104c46_ZTSNSt3__18weak_ptrIN5trace13CommandDriverEEE(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[14];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  long long v3 = a1[12];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (const void *)a1[11];
  if (v4) {
    _Block_release(v4);
  }
  uint64_t v5 = (void *)a1[8];
  if (v5)
  {
    a1[9] = v5;
    operator delete(v5);
  }
  size_t v6 = (void *)a1[5];
  if (v6)
  {
    a1[6] = v6;
    operator delete(v6);
  }
}

void trace::ARICommandDriver::setTraceParams(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a1 + 72);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 80);
  size_t v6 = (uint64_t *)(a1 + 72);
  if (!v5 || (unsigned int v10 = std::__shared_weak_count::lock(v5)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  size_t v11 = v10;
  p_shared_weak_owners = &v10->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v11);
  }
  __int16 v13 = *(_WORD *)(a2 + 8);
  v16[0] = MEMORY[0x263EF8330];
  v16[1] = 1174405120;
  v16[2] = ___ZN5trace16ARICommandDriver14setTraceParamsERNS_11TraceParamsEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke;
  v16[3] = &__block_descriptor_tmp_23_1;
  __int16 v21 = v13;
  uint64_t v20 = *(void *)(a2 + 12);
  _OWORD v16[4] = a1;
  uint64_t v16[5] = v7;
  long long v17 = v11;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v14 = *(void **)a3;
  if (*(void *)a3) {
    uint64_t v14 = _Block_copy(v14);
  }
  uint64_t v15 = *(NSObject **)(a3 + 8);
  aBlocunint64_t k = v14;
  dispatch_object_t object = v15;
  if (v15) {
    dispatch_retain(v15);
  }
  ctu::SharedSynchronizable<trace::CommandDriver>::execute_wrapped(v6, (uint64_t)v16);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v17) {
    std::__shared_weak_count::__release_weak(v17);
  }
  std::__shared_weak_count::__release_weak(v11);
}

uint64_t ___ZN5trace16ARICommandDriver14setTraceParamsERNS_11TraceParamsEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke(int32x2_t *a1)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  int32x2_t v2 = a1[4];
  uint64_t v35 = (void *)0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)long long __p = v3;
  *(_OWORD *)size_t v34 = v3;
  v32[2] = v3;
  v32[3] = v3;
  v32[0] = v3;
  v32[1] = v3;
  AriSdk::ARI_CsiTraceModeInitReq_SDK::ARI_CsiTraceModeInitReq_SDK((AriSdk::ARI_CsiTraceModeInitReq_SDK *)v32);
  uint64_t v4 = operator new(4uLL);
  _DWORD *v4 = a1[10].u8[0];
  uint64_t v5 = __p[0];
  __p[0] = v4;
  if (v5) {
    operator delete(v5);
  }
  int v6 = a1[10].u8[1];
  uint64_t v7 = operator new(4uLL);
  _DWORD *v7 = v6;
  unsigned int v8 = __p[1];
  __p[1] = v7;
  if (v8) {
    operator delete(v8);
  }
  unsigned int v9 = operator new(4uLL);
  *unsigned int v9 = a1[9].i32[0];
  unsigned int v10 = v34[0];
  v34[0] = v9;
  if (v10) {
    operator delete(v10);
  }
  size_t v11 = operator new(4uLL);
  *size_t v11 = a1[9].i32[1];
  unint64_t v12 = v34[1];
  v34[1] = v11;
  if (v12) {
    operator delete(v12);
  }
  __int16 v13 = operator new(4uLL);
  *__int16 v13 = 0;
  uint64_t v14 = v35;
  uint64_t v35 = v13;
  if (v14) {
    operator delete(v14);
  }
  uint64_t v15 = *(NSObject **)(*(void *)&v2 + 40);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)long long buf = 67109120;
    _os_log_impl(&dword_235DB9000, v15, OS_LOG_TYPE_DEFAULT, "#I Setting trace timeout of %u", buf, 8u);
  }
  uint64_t v16 = *(void *)(*(void *)&v2 + 104);
  size_t v18 = (std::__shared_weak_count_vtbl *)a1[5];
  long long v17 = (std::__shared_weak_count *)a1[6];
  *(void *)long long buf = v18;
  unint64_t v44 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v19 = (const void *)a1[7];
  if (v19)
  {
    uint64_t v20 = _Block_copy(v19);
    __int16 v21 = a1[8];
    size_t v45 = v20;
    dispatch_object_t v46 = v21;
    if (!v21) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  uint64_t v20 = 0;
  __int16 v21 = a1[8];
  size_t v45 = 0;
  dispatch_object_t v46 = v21;
  if (v21) {
LABEL_17:
  }
    dispatch_retain(v21);
LABEL_18:
  *(int32x2_t *)long long v47 = v2;
  *(_WORD *)&v47[8] = a1[10].i16[0];
  *(int32x2_t *)&v47[12] = vrev64_s32(a1[9]);
  uint64_t v22 = (std::__shared_weak_count *)operator new(0x50uLL);
  v22->__shared_owners_ = 0;
  p_shared_owners = &v22->__shared_owners_;
  v22->__shared_weak_owners_ = 0;
  v22->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93C5C8;
  v22[1].__vftable = v18;
  v22[1].__shared_owners_ = (uint64_t)v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v20)
  {
    v22[1].__shared_weak_owners_ = 0;
    v22[2].__vftable = (std::__shared_weak_count_vtbl *)v21;
    if (!v21) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  v22[1].__shared_weak_owners_ = (uint64_t)_Block_copy(v20);
  v22[2].__vftable = (std::__shared_weak_count_vtbl *)v21;
  if (v21) {
LABEL_22:
  }
    dispatch_retain(v21);
LABEL_23:
  *(_OWORD *)&v22[2].__shared_owners_ = *(_OWORD *)v47;
  LODWORD(v22[3].__vftable) = *(_DWORD *)&v47[16];
  uint64_t v36 = MEMORY[0x263EF8330];
  uint64_t v37 = 1174405120;
  long long v38 = ___ZN3ice6detail12wrapCallbackIZZN5trace16ARICommandDriver14setTraceParamsERNS2_11TraceParamsEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb4_E3__7vEENS6_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  long long v39 = &__block_descriptor_tmp_107;
  long long v40 = v22 + 1;
  long long v41 = v22;
  atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlock[0] = (const void *)MEMORY[0x263EF8330];
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_1;
  aBlock[3] = &unk_264C7D900;
  aBlock[4] = &v36;
  size_t v24 = _Block_copy(aBlock);
  size_t v25 = v41;
  if (!v41 || atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
  std::__shared_weak_count::__release_weak(v25);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_26:
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
LABEL_27:
  *(void *)&long long v26 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v26 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v30[0] = v26;
  v30[1] = v26;
  unint64_t v31 = 0xAAAAAAAAAAAAAAAALL;
  long long v27 = *(std::__shared_weak_count **)(v16 + 16);
  uint64_t v36 = *(void *)(v16 + 8);
  if (!v27)
  {
    uint64_t v37 = 0;
LABEL_48:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v37 = (uint64_t)std::__shared_weak_count::lock(v27);
  if (!v37) {
    goto LABEL_48;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  uint64_t v28 = (std::__shared_weak_count *)v37;
  if (v37 && !atomic_fetch_add((atomic_ullong *volatile)(v37 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  aBlock[0] = v24;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0]) {
    _Block_release(aBlock[0]);
  }
  MEMORY[0x237DF50B0](v30);
  if (v46) {
    dispatch_release(v46);
  }
  if (v45) {
    _Block_release(v45);
  }
  if (v44) {
    std::__shared_weak_count::__release_weak(v44);
  }
  return MEMORY[0x237DF59F0](v32);
}

void sub_235DE1838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void *_ZZZN5trace16ARICommandDriver14setTraceParamsERNS_11TraceParamsEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb4_EN3__7D1Ev(void *a1)
{
  int32x2_t v2 = a1[3];
  if (v2) {
    dispatch_release(v2);
  }
  long long v3 = (const void *)a1[2];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void trace::ARICommandDriver::setDriverStartedAction(uint64_t a1, uint64_t a2)
{
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 1174405120;
  v8[2] = ___ZN5trace16ARICommandDriver22setDriverStartedActionEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke;
  v8[3] = &__block_descriptor_tmp_24;
  void v8[4] = a1;
  uint64_t v4 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v4 = _Block_copy(v4);
  }
  uint64_t v5 = *(NSObject **)(a2 + 8);
  aBlocunint64_t k = v4;
  dispatch_object_t object = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  size_t v11 = v8;
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN5trace13CommandDriverEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
  block[3] = &__block_descriptor_tmp_111;
  void block[4] = a1 + 72;
  block[5] = &v11;
  int v6 = *(NSObject **)(a1 + 88);
  if (*(void *)(a1 + 96))
  {
    dispatch_async_and_wait(v6, block);
    uint64_t v7 = object;
    if (!object) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  dispatch_sync(v6, block);
  uint64_t v7 = object;
  if (object) {
LABEL_7:
  }
    dispatch_release(v7);
LABEL_8:
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void ___ZN5trace16ARICommandDriver22setDriverStartedActionEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke(void *a1)
{
  uint64_t v3 = a1[4];
  int32x2_t v2 = (void *)a1[5];
  if (v2) {
    int32x2_t v2 = _Block_copy(v2);
  }
  uint64_t v4 = *(const void **)(v3 + 120);
  *(void *)(v3 + 120) = v2;
  if (v4) {
    _Block_release(v4);
  }
  uint64_t v5 = a1[6];
  if (v5) {
    dispatch_retain(v5);
  }
  int v6 = *(NSObject **)(v3 + 128);
  *(void *)(v3 + 128) = v5;
  if (v6)
  {
    dispatch_release(v6);
  }
}

void __copy_helper_block_e8_40c46_ZTSN8dispatch8callbackIU13block_pointerFvvEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a2 + 40);
  if (v4) {
    uint64_t v4 = _Block_copy(v4);
  }
  uint64_t v5 = *(NSObject **)(a2 + 48);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v5;
  if (v5)
  {
    dispatch_retain(v5);
  }
}

void __destroy_helper_block_e8_40c46_ZTSN8dispatch8callbackIU13block_pointerFvvEEE(uint64_t a1)
{
  int32x2_t v2 = *(NSObject **)(a1 + 48);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 40);
  if (v3) {
    _Block_release(v3);
  }
}

void trace::ARICommandDriver::setLPMEnterAction(uint64_t a1, uint64_t a2)
{
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 1174405120;
  v8[2] = ___ZN5trace16ARICommandDriver17setLPMEnterActionEN8dispatch8callbackIU13block_pointerFvNS1_13group_sessionEEEE_block_invoke;
  v8[3] = &__block_descriptor_tmp_25;
  void v8[4] = a1;
  uint64_t v4 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v4 = _Block_copy(v4);
  }
  uint64_t v5 = *(NSObject **)(a2 + 8);
  aBlocunint64_t k = v4;
  dispatch_object_t object = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  size_t v11 = v8;
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN5trace13CommandDriverEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
  block[3] = &__block_descriptor_tmp_111;
  void block[4] = a1 + 72;
  block[5] = &v11;
  int v6 = *(NSObject **)(a1 + 88);
  if (*(void *)(a1 + 96))
  {
    dispatch_async_and_wait(v6, block);
    uint64_t v7 = object;
    if (!object) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  dispatch_sync(v6, block);
  uint64_t v7 = object;
  if (object) {
LABEL_7:
  }
    dispatch_release(v7);
LABEL_8:
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void ___ZN5trace16ARICommandDriver17setLPMEnterActionEN8dispatch8callbackIU13block_pointerFvNS1_13group_sessionEEEE_block_invoke(void *a1)
{
  uint64_t v3 = a1[4];
  int32x2_t v2 = (void *)a1[5];
  if (v2) {
    int32x2_t v2 = _Block_copy(v2);
  }
  uint64_t v4 = *(const void **)(v3 + 136);
  *(void *)(v3 + 136) = v2;
  if (v4) {
    _Block_release(v4);
  }
  uint64_t v5 = a1[6];
  if (v5) {
    dispatch_retain(v5);
  }
  int v6 = *(NSObject **)(v3 + 144);
  *(void *)(v3 + 144) = v5;
  if (v6)
  {
    dispatch_release(v6);
  }
}

void __copy_helper_block_e8_40c64_ZTSN8dispatch8callbackIU13block_pointerFvNS_13group_sessionEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a2 + 40);
  if (v4) {
    uint64_t v4 = _Block_copy(v4);
  }
  uint64_t v5 = *(NSObject **)(a2 + 48);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v5;
  if (v5)
  {
    dispatch_retain(v5);
  }
}

void __destroy_helper_block_e8_40c64_ZTSN8dispatch8callbackIU13block_pointerFvNS_13group_sessionEEEE(uint64_t a1)
{
  int32x2_t v2 = *(NSObject **)(a1 + 48);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 40);
  if (v3) {
    _Block_release(v3);
  }
}

void trace::ARICommandDriver::setLPMExitAction(uint64_t a1, uint64_t a2)
{
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 1174405120;
  v8[2] = ___ZN5trace16ARICommandDriver16setLPMExitActionEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke;
  v8[3] = &__block_descriptor_tmp_28_0;
  void v8[4] = a1;
  uint64_t v4 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v4 = _Block_copy(v4);
  }
  uint64_t v5 = *(NSObject **)(a2 + 8);
  aBlocunint64_t k = v4;
  dispatch_object_t object = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  size_t v11 = v8;
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN5trace13CommandDriverEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
  block[3] = &__block_descriptor_tmp_111;
  void block[4] = a1 + 72;
  block[5] = &v11;
  int v6 = *(NSObject **)(a1 + 88);
  if (*(void *)(a1 + 96))
  {
    dispatch_async_and_wait(v6, block);
    uint64_t v7 = object;
    if (!object) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  dispatch_sync(v6, block);
  uint64_t v7 = object;
  if (object) {
LABEL_7:
  }
    dispatch_release(v7);
LABEL_8:
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void ___ZN5trace16ARICommandDriver16setLPMExitActionEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke(void *a1)
{
  uint64_t v3 = a1[4];
  int32x2_t v2 = (void *)a1[5];
  if (v2) {
    int32x2_t v2 = _Block_copy(v2);
  }
  uint64_t v4 = *(const void **)(v3 + 152);
  *(void *)(v3 + 152) = v2;
  if (v4) {
    _Block_release(v4);
  }
  uint64_t v5 = a1[6];
  if (v5) {
    dispatch_retain(v5);
  }
  int v6 = *(NSObject **)(v3 + 160);
  *(void *)(v3 + 160) = v5;
  if (v6)
  {
    dispatch_release(v6);
  }
}

void trace::ARICommandDriver::setETBMasks(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a1 + 72);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 80);
  int v6 = (uint64_t *)(a1 + 72);
  if (!v5 || (unsigned int v10 = std::__shared_weak_count::lock(v5)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  size_t v11 = v10;
  atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v11);
  }
  v16[0] = MEMORY[0x263EF8330];
  v16[1] = 1174405120;
  v16[2] = ___ZN5trace16ARICommandDriver11setETBMasksENSt3__16vectorIcNS1_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke;
  v16[3] = &__block_descriptor_tmp_30_1;
  _OWORD v16[4] = a1;
  long long __p = 0;
  size_t v18 = 0;
  uint64_t v19 = 0;
  unint64_t v12 = *(const void **)a2;
  size_t v13 = *(void *)(a2 + 8) - *(void *)a2;
  if (v13)
  {
    if ((v13 & 0x8000000000000000) != 0) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    long long __p = operator new(v13);
    uint64_t v19 = (char *)__p + v13;
    memcpy(__p, v12, v13);
    size_t v18 = (char *)__p + v13;
  }
  uint64_t v20 = v7;
  __int16 v21 = v11;
  atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v14 = *(void **)a3;
  if (*(void *)a3) {
    uint64_t v14 = _Block_copy(v14);
  }
  uint64_t v15 = *(NSObject **)(a3 + 8);
  aBlocunint64_t k = v14;
  dispatch_object_t object = v15;
  if (v15) {
    dispatch_retain(v15);
  }
  ctu::SharedSynchronizable<trace::CommandDriver>::execute_wrapped(v6, (uint64_t)v16);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v21) {
    std::__shared_weak_count::__release_weak(v21);
  }
  if (__p)
  {
    size_t v18 = (char *)__p;
    operator delete(__p);
  }
  std::__shared_weak_count::__release_weak(v11);
}

void sub_235DE2160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_weak(v15);
  _Unwind_Resume(a1);
}

void ___ZN5trace16ARICommandDriver11setETBMasksENSt3__16vectorIcNS1_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke(void *a1)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[4];
  uint64_t v3 = *(NSObject **)(v2 + 40);
  if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_20;
  }
  uint64_t v5 = a1[5];
  uint64_t v4 = (char *)a1[6];
  unint64_t v6 = (unint64_t)&v4[-v5];
  if ((unint64_t)&v4[-v5] >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v6 <= 0x16)
  {
    HIBYTE(v43) = (_BYTE)v4 - v5;
    p_p = (char *)&__p;
    if ((char *)v5 != v4) {
      goto LABEL_5;
    }
LABEL_14:
    unsigned int v8 = p_p;
    goto LABEL_17;
  }
  uint64_t v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v6 | 7) != 0x17) {
    uint64_t v14 = v6 | 7;
  }
  uint64_t v15 = v14 + 1;
  p_p = (char *)operator new(v14 + 1);
  uint64_t v42 = (uint64_t)&v4[-v5];
  int64_t v43 = v15 | 0x8000000000000000;
  long long __p = p_p;
  if ((char *)v5 == v4) {
    goto LABEL_14;
  }
LABEL_5:
  if (v6 < 0x20 || (unint64_t)&p_p[-v5] < 0x20)
  {
    unsigned int v8 = p_p;
    unsigned int v9 = (char *)v5;
    do
    {
LABEL_16:
      char v16 = *v9++;
      *v8++ = v16;
    }
    while (v9 != v4);
    goto LABEL_17;
  }
  unsigned int v8 = &p_p[v6 & 0xFFFFFFFFFFFFFFE0];
  unsigned int v9 = (char *)(v5 + (v6 & 0xFFFFFFFFFFFFFFE0));
  unsigned int v10 = (long long *)(v5 + 16);
  size_t v11 = p_p + 16;
  unint64_t v12 = v6 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    long long v13 = *v10;
    *(v11 - 1) = *(v10 - 1);
    *size_t v11 = v13;
    v10 += 2;
    v11 += 2;
    v12 -= 32;
  }
  while (v12);
  if (v6 != (v6 & 0xFFFFFFFFFFFFFFE0)) {
    goto LABEL_16;
  }
LABEL_17:
  *unsigned int v8 = 0;
  long long v17 = &__p;
  if (v43 < 0) {
    long long v17 = __p;
  }
  *(_DWORD *)long long buf = 134218242;
  uint64_t v48 = &v4[-v5];
  __int16 v49 = 2080;
  CFErrorRef v50 = v17;
  _os_log_impl(&dword_235DB9000, v3, OS_LOG_TYPE_DEFAULT, "#I Setting ETB [%zu]: %s", buf, 0x16u);
  if ((SHIBYTE(v43) & 0x80000000) == 0)
  {
LABEL_20:
    if (*(unsigned char *)(v2 + 168)) {
      goto LABEL_21;
    }
LABEL_42:
    if (!a1[10] || !a1[11]) {
      return;
    }
    uint64_t v32 = (char *)operator new(0x30uLL);
    strcpy(v32, "ETB configuration works on only bb trace v2!");
    CreateError();
    long long v27 = (const void *)a1[10];
    if (v27) {
      uint64_t v28 = _Block_copy(v27);
    }
    else {
      uint64_t v28 = 0;
    }
    uint64_t v29 = a1[11];
    long long __p = (void *)MEMORY[0x263EF8330];
    uint64_t v42 = 1174405120;
    int64_t v43 = (int64_t)___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke;
    unint64_t v44 = &__block_descriptor_tmp_71;
    if (v28)
    {
      char v30 = _Block_copy(v28);
      unint64_t v31 = cf;
      aBlocunint64_t k = v30;
      CFTypeRef v46 = cf;
      if (!cf) {
        goto LABEL_52;
      }
    }
    else
    {
      unint64_t v31 = cf;
      aBlocunint64_t k = 0;
      CFTypeRef v46 = cf;
      if (!cf)
      {
LABEL_52:
        dispatch_async(v29, &__p);
        if (v46) {
          CFRelease(v46);
        }
        if (aBlock) {
          _Block_release(aBlock);
        }
        if (v28) {
          _Block_release(v28);
        }
        if (cf) {
          CFRelease(cf);
        }
        long long v26 = v32;
        goto LABEL_36;
      }
    }
    CFRetain(v31);
    goto LABEL_52;
  }
  operator delete(__p);
  if (!*(unsigned char *)(v2 + 168)) {
    goto LABEL_42;
  }
LABEL_21:
  long long v38 = 0;
  long long v39 = 0;
  long long v40 = 0;
  uint64_t v19 = (unsigned char *)a1[5];
  size_t v18 = (unsigned char *)a1[6];
  size_t v20 = v18 - v19;
  if (v18 == v19)
  {
    __int16 v21 = 0;
    uint64_t v22 = (std::__shared_weak_count *)a1[9];
    uint64_t v36 = (std::__shared_weak_count *)a1[8];
    uint64_t v37 = v22;
    if (v22) {
LABEL_24:
    }
      atomic_fetch_add_explicit(&v22->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    if ((v20 & 0x8000000000000000) != 0) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    __int16 v21 = (char *)operator new(v18 - v19);
    long long v38 = v21;
    long long v40 = &v21[v20];
    memcpy(v21, v19, v20);
    long long v39 = &v21[v20];
    uint64_t v22 = (std::__shared_weak_count *)a1[9];
    uint64_t v36 = (std::__shared_weak_count *)a1[8];
    uint64_t v37 = v22;
    if (v22) {
      goto LABEL_24;
    }
  }
  uint64_t v23 = (const void *)a1[10];
  if (v23)
  {
    size_t v24 = _Block_copy(v23);
    size_t v25 = a1[11];
    size_t v34 = v24;
    uint64_t v35 = v25;
    if (!v25) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  size_t v24 = 0;
  size_t v25 = a1[11];
  size_t v34 = 0;
  uint64_t v35 = v25;
  if (v25) {
LABEL_27:
  }
    dispatch_retain(v25);
LABEL_28:
  trace::ARICommandDriver::profileMaskV2_sync(v2, &v38, 2, &v36, &v34);
  if (v25) {
    dispatch_release(v25);
  }
  if (v24) {
    _Block_release(v24);
  }
  if (v22) {
    std::__shared_weak_count::__release_weak(v22);
  }
  if (v21)
  {
    long long v26 = v21;
LABEL_36:
    operator delete(v26);
  }
}

void sub_235DE2594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_40c39_ZTSNSt3__16vectorIcNS_9allocatorIcEEEE64c46_ZTSNSt3__18weak_ptrIN5trace13CommandDriverEEE80c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(void *a1, void *a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  uint64_t v5 = (unsigned char *)a2[5];
  uint64_t v4 = (unsigned char *)a2[6];
  size_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if ((v6 & 0x8000000000000000) != 0) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(v4 - v5);
    a1[5] = v7;
    a1[6] = v7;
    unsigned int v8 = &v7[v6];
    a1[7] = &v7[v6];
    memcpy(v7, v5, v6);
    a1[6] = v8;
  }
  uint64_t v9 = a2[9];
  a1[8] = a2[8];
  a1[9] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 16), 1uLL, memory_order_relaxed);
  }
  unsigned int v10 = (void *)a2[10];
  if (v10) {
    unsigned int v10 = _Block_copy(v10);
  }
  size_t v11 = a2[11];
  a1[10] = v10;
  a1[11] = v11;
  if (v11)
  {
    dispatch_retain(v11);
  }
}

void sub_235DE2710(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 48) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c39_ZTSNSt3__16vectorIcNS_9allocatorIcEEEE64c46_ZTSNSt3__18weak_ptrIN5trace13CommandDriverEEE80c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(void *a1)
{
  uint64_t v2 = a1[11];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = (const void *)a1[10];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[9];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = (void *)a1[5];
  if (v5)
  {
    a1[6] = v5;
    operator delete(v5);
  }
}

void trace::ARICommandDriver::start(trace::ARICommandDriver *this)
{
  v3[0] = MEMORY[0x263EF8330];
  v3[1] = 0x40000000;
  v3[2] = ___ZN5trace16ARICommandDriver5startEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_31;
  v3[4] = this;
  uint64_t v4 = v3;
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN5trace13CommandDriverEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
  block[3] = &__block_descriptor_tmp_111;
  void block[4] = (char *)this + 72;
  block[5] = &v4;
  uint64_t v2 = (char *)this + 88;
  uint64_t v1 = *((void *)this + 11);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
}

uint64_t ___ZN5trace16ARICommandDriver5startEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t result = ice::Client::start(*(ice::Client **)(v1 + 104));
  *(unsigned char *)(v1 + 169) = 1;
  return result;
}

void trace::ARICommandDriver::stop(trace::ARICommandDriver *this, group *a2)
{
  gr_name = a2->gr_name;
  if (a2->gr_name)
  {
    dispatch_retain((dispatch_object_t)a2->gr_name);
    dispatch_group_enter((dispatch_group_t)gr_name);
  }
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 1174405120;
  v6[2] = ___ZN5trace16ARICommandDriver4stopEN8dispatch5groupE_block_invoke;
  v6[3] = &__block_descriptor_tmp_32_0;
  v6[4] = this;
  dispatch_group_t group = (dispatch_group_t)gr_name;
  if (gr_name)
  {
    dispatch_retain((dispatch_object_t)gr_name);
    dispatch_group_enter(group);
  }
  uint64_t v5 = a2->gr_name;
  dispatch_object_t object = (dispatch_object_t)v5;
  if (v5) {
    dispatch_retain((dispatch_object_t)v5);
  }
  ctu::SharedSynchronizable<trace::CommandDriver>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v6);
  if (object) {
    dispatch_release(object);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  if (gr_name)
  {
    dispatch_group_leave((dispatch_group_t)gr_name);
    dispatch_release((dispatch_object_t)gr_name);
  }
}

void ___ZN5trace16ARICommandDriver4stopEN8dispatch5groupE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(ice::Client **)(v1 + 104);
  uint64_t v3 = *(char **)(a1 + 48);
  object.gr_name = v3;
  if (v3) {
    dispatch_retain((dispatch_object_t)v3);
  }
  ice::Client::stop(v2, &object);
  if (object.gr_name) {
    dispatch_release((dispatch_object_t)object.gr_name);
  }
  *(unsigned char *)(v1 + 169) = 0;
}

void sub_235DE29F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c21_ZTSN8dispatch5groupE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(NSObject **)(a2 + 40);
  *(void *)(a1 + 40) = v4;
  if (v4)
  {
    dispatch_retain(v4);
    uint64_t v5 = *(NSObject **)(a1 + 40);
    if (v5) {
      dispatch_group_enter(v5);
    }
  }
  size_t v6 = *(NSObject **)(a2 + 48);
  *(void *)(a1 + 48) = v6;
  if (v6)
  {
    dispatch_retain(v6);
  }
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c21_ZTSN8dispatch5groupE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 48);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(NSObject **)(a1 + 40);
  if (v3)
  {
    dispatch_group_leave(v3);
    uint64_t v4 = *(NSObject **)(a1 + 40);
    if (v4)
    {
      dispatch_release(v4);
    }
  }
}

uint64_t trace::ARICommandDriver::isStarted(trace::ARICommandDriver *this)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2000000000;
  char v9 = -86;
  v5[0] = MEMORY[0x263EF8330];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK5trace16ARICommandDriver9isStartedEv_block_invoke;
  v5[3] = &unk_264C7D8D8;
  v5[4] = &v6;
  v5[5] = this;
  unsigned int v10 = v5;
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN5trace13CommandDriverEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
  block[3] = &__block_descriptor_tmp_111;
  void block[4] = (char *)this + 72;
  block[5] = &v10;
  uint64_t v2 = (char *)this + 88;
  uint64_t v1 = *((void *)this + 11);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
  uint64_t v3 = *((unsigned __int8 *)v7 + 24);
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t ___ZNK5trace16ARICommandDriver9isStartedEv_block_invoke(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(unsigned char *)(*(void *)(result + 40) + 169);
  return result;
}

const char *trace::ARICommandDriver::toString(trace::ARICommandDriver *this, unsigned int a2)
{
  if (a2 > 2) {
    return "Unknown";
  }
  else {
    return off_264C7D940[(__int16)a2];
  }
}

uint64_t ctu::Loggable<trace::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x270F97428](a1 + 8);
}

void ctu::Loggable<trace::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 9;
  strcpy(a1, "trace.drv");
}

uint64_t ctu::Loggable<trace::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x270F978E0](a1 + 8);
}

uint64_t trace::CommandDriver::sendConfig()
{
  return 0;
}

uint64_t trace::CommandDriver::isStarted(trace::CommandDriver *this)
{
  return 0;
}

void *ctu::Loggable<trace::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>&>(void *a1, uint64_t a2, void *a3)
{
  *a1 = &unk_26E93C090;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v8);
  a1[1] = &unk_26E93B248;
  a1[7] = *a3;
  uint64_t v5 = a3[1];
  a1[8] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v7);
  return a1;
}

void sub_235DE2D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void *ctu::SharedLoggable<trace::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_26E93C090;
  MEMORY[0x237DF4D50](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void ctu::SharedLoggable<trace::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(void *a1)
{
  *a1 = &unk_26E93C090;
  MEMORY[0x237DF4D50](a1 + 1);
  uint64_t v2 = a1[12];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[11];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete(a1);
}

void *ctu::Loggable<trace::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_26E93C090;
  MEMORY[0x237DF4D50](a1 + 1);
  return a1;
}

void ctu::Loggable<trace::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_26E93C090;
  MEMORY[0x237DF4D50](a1 + 1);

  operator delete(a1);
}

void *std::vector<char>::__assign_with_size[abi:ne180100]<char *,char *>(void *result, char *__src, char *a3, unint64_t a4)
{
  uint64_t v7 = result;
  unint64_t v8 = result[2];
  char v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      unint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      uint64_t v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0) {
      goto LABEL_22;
    }
    uint64_t v10 = 2 * v8;
    if (2 * v8 <= a4) {
      uint64_t v10 = a4;
    }
    size_t v11 = v8 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v10;
    if ((v11 & 0x8000000000000000) != 0) {
LABEL_22:
    }
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    uint64_t result = operator new(v11);
    char v9 = (char *)result;
    void *v7 = result;
    v7[1] = result;
    uint64_t v7[2] = (char *)result + v11;
    size_t v12 = a3 - __src;
    if (v12) {
      uint64_t result = memcpy(result, __src, v12);
    }
LABEL_21:
    v7[1] = &v9[v12];
    return result;
  }
  long long v13 = (unsigned char *)result[1];
  size_t v14 = v13 - v9;
  if (v13 - v9 >= a4)
  {
    size_t v12 = a3 - __src;
    if (v12) {
      uint64_t result = memmove((void *)*result, __src, v12);
    }
    goto LABEL_21;
  }
  uint64_t v15 = &__src[v14];
  if (v13 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v14);
    char v9 = (char *)v7[1];
  }
  if (a3 != v15) {
    uint64_t result = memmove(v9, v15, a3 - v15);
  }
  v7[1] = &v9[a3 - v15];
  return result;
}

void ctu::Loggable<trace::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (*(void *)(a1 + 56))
  {
    if (!*(void *)(a1 + 80) || (uint64_t v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_235DE3168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_235DE3184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<trace::ARICommandDriver>::shared_ptr[abi:ne180100]<trace::ARICommandDriver,std::shared_ptr<trace::ARICommandDriver> ctu::SharedSynchronizable<trace::CommandDriver>::make_shared_ptr<trace::ARICommandDriver>(trace::ARICommandDriver*)::{lambda(trace::ARICommandDriver*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93C0D0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 72) = a2;
      *(void *)(a2 + 80) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 72) = a2;
  *(void *)(a2 + 80) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_235DE32B0(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<trace::ARICommandDriver> ctu::SharedSynchronizable<trace::CommandDriver>::make_shared_ptr<trace::ARICommandDriver>(trace::ARICommandDriver*)::{lambda(trace::ARICommandDriver*)#1}::operator() const(trace::ARICommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_235DE32D8(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<trace::ARICommandDriver *,std::shared_ptr<trace::ARICommandDriver> ctu::SharedSynchronizable<trace::CommandDriver>::make_shared_ptr<trace::ARICommandDriver>(trace::ARICommandDriver*)::{lambda(trace::ARICommandDriver *)#1},std::allocator<trace::ARICommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<trace::ARICommandDriver *,std::shared_ptr<trace::ARICommandDriver> ctu::SharedSynchronizable<trace::CommandDriver>::make_shared_ptr<trace::ARICommandDriver>(trace::ARICommandDriver*)::{lambda(trace::ARICommandDriver *)#1},std::allocator<trace::ARICommandDriver>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<trace::ARICommandDriver *,std::shared_ptr<trace::ARICommandDriver> ctu::SharedSynchronizable<trace::CommandDriver>::make_shared_ptr<trace::ARICommandDriver>(trace::ARICommandDriver*)::{lambda(trace::ARICommandDriver *)#1},std::allocator<trace::ARICommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN5trace13CommandDriverEE15make_shared_ptrINS1_16ARICommandDriverEEENSt"
                     "3__110shared_ptrIT_EEPS8_EUlPS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN5trace13CommandDriverEE15make_shared_ptrINS1_16ARICommandD"
                                "riverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN5trace13CommandDriverEE15make_shared_ptrINS1_16ARICommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN5trace13CommandDriverEE15make_shared_ptrINS1_16ARICommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<trace::ARICommandDriver> ctu::SharedSynchronizable<trace::CommandDriver>::make_shared_ptr<trace::ARICommandDriver>(trace::ARICommandDriver*)::{lambda(trace::ARICommandDriver*)#1}::operator() const(trace::ARICommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvvEEclIJEEEvDpT__block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void *__copy_helper_block_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)(a2 + 32);
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  *(void *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  if (v1) {
    _Block_release(v1);
  }
}

void ___ZNK8dispatch8callbackIU13block_pointerFvNS_13group_sessionEEEclIJS1_EEEvDpT__block_invoke(uint64_t a1)
{
}

void dispatch::block<void({block_pointer})(dispatch::group_session)>::operator()<dispatch::group_session const&>(uint64_t *a1, NSObject **a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = *a2;
  dispatch_group_t group = v3;
  if (v3)
  {
    dispatch_retain(v3);
    dispatch_group_enter(v3);
  }
  (*(void (**)(uint64_t, dispatch_group_t *))(v2 + 16))(v2, &group);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
}

void sub_235DE34C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_group_t group)
{
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_32c61_ZTSN8dispatch5blockIU13block_pointerFvNS_13group_sessionEEEE40c30_ZTSN8dispatch13group_sessionE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a2 + 32);
  if (v4) {
    uint64_t v4 = _Block_copy(v4);
  }
  uint64_t v5 = *(NSObject **)(a2 + 40);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  if (v5)
  {
    dispatch_retain(v5);
    uint64_t v6 = *(NSObject **)(a1 + 40);
    if (v6)
    {
      dispatch_group_enter(v6);
    }
  }
}

void __destroy_helper_block_e8_32c61_ZTSN8dispatch5blockIU13block_pointerFvNS_13group_sessionEEEE40c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 40);
  if (v2)
  {
    dispatch_group_leave(v2);
    unint64_t v3 = *(NSObject **)(a1 + 40);
    if (v3) {
      dispatch_release(v3);
    }
  }
  uint64_t v4 = *(const void **)(a1 + 32);
  if (v4) {
    _Block_release(v4);
  }
}

void ctu::SharedSynchronizable<trace::CommandDriver>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  unint64_t v8 = a1[2];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN5trace13CommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_26E93C178;
  block[5] = v5;
  size_t v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = a2;
  dispatch_async(v8, block);
  uint64_t v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN5trace13CommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c50_ZTSNSt3__110shared_ptrIKN5trace13CommandDriverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c50_ZTSNSt3__110shared_ptrIKN5trace13CommandDriverEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v1 = *(const void **)(a1 + 40);
  CFTypeRef cf = v1;
  if (v1) {
    CFRetain(v1);
  }
  (*(void (**)(uint64_t, CFTypeRef *))(v2 + 16))(v2, &cf);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_235DE3800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

CFTypeRef __copy_helper_block_e8_32c76_ZTSN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE40c38_ZTSN3ctu2cf11CFSharedRefI9__CFErrorEE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const void **)(a2 + 32);
  if (!v4)
  {
    CFTypeRef result = *(CFTypeRef *)(a2 + 40);
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = result;
    if (!result) {
      return result;
    }
    return CFRetain(result);
  }
  uint64_t v5 = _Block_copy(v4);
  CFTypeRef result = *(CFTypeRef *)(a2 + 40);
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_32c76_ZTSN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE40c38_ZTSN3ctu2cf11CFSharedRefI9__CFErrorEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 40);
  if (v2) {
    CFRelease(v2);
  }
  unint64_t v3 = *(const void **)(a1 + 32);
  if (v3) {
    _Block_release(v3);
  }
}

void ___ZN3ice6detail12wrapCallbackIZZN5trace16ARICommandDriver17pauseTraceTrafficEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb_E3__0vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    unint64_t v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      uint64_t v5 = v2[4];
      uint64_t v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        uint64_t v7 = v6;
        if (!*v2)
        {
LABEL_45:
          if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        uint64_t v23 = (int *)0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        _OWORD v22[2] = v8;
        v22[3] = v8;
        v22[0] = v8;
        v22[1] = v8;
        AriSdk::ARI_CsiTraceProfileSelectRspCb_SDK::ARI_CsiTraceProfileSelectRspCb_SDK((AriSdk::ARI_CsiTraceProfileSelectRspCb_SDK *)v22, a2);
        CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        HIBYTE(v25) = 13;
        strcpy((char *)&__p, "disable trace");
        checkError((AriSdk::MsgBase *)v22, (uint64_t)&__p, &cf);
        if (SHIBYTE(v25) < 0)
        {
          operator delete((void *)__p);
          if (cf) {
            uint64_t v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          }
          else {
            uint64_t v10 = 0;
          }
          if (v10) {
            goto LABEL_23;
          }
        }
        else
        {
          if (cf) {
            char v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          }
          else {
            char v9 = 0;
          }
          if (v9) {
            goto LABEL_23;
          }
        }
        int v11 = AriSdk::ARI_CsiTraceProfileSelectRspCb_SDK::unpack((AriSdk::ARI_CsiTraceProfileSelectRspCb_SDK *)v22);
        if (v11 || *v23)
        {
          size_t v12 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            int v19 = *v23;
            LODWORD(__p) = 67109376;
            DWORD1(__p) = v11;
            WORD4(__p) = 1024;
            *(_DWORD *)((char *)&__p + 10) = v19;
            _os_log_error_impl(&dword_235DB9000, v12, OS_LOG_TYPE_ERROR, "Failed to disable trace: unpackResult = %d result_code_t1 = %d", (uint8_t *)&__p, 0xEu);
          }
          size_t v20 = (char *)operator new(0x19uLL);
          strcpy(v20, "Failed to disable trace");
          CreateError();
          CFTypeRef v13 = cf;
          CFTypeRef cf = (CFTypeRef)__p;
          *(void *)&long long __p = 0;
          if (v13)
          {
            CFRelease(v13);
            if ((void)__p) {
              CFRelease((CFTypeRef)__p);
            }
          }
          operator delete(v20);
        }
        else
        {
          size_t v18 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(__p) = 0;
            _os_log_impl(&dword_235DB9000, v18, OS_LOG_TYPE_DEFAULT, "#I Successfully disabled trace", (uint8_t *)&__p, 2u);
          }
        }
LABEL_23:
        size_t v14 = (const void *)v2[2];
        if (!v14 || !v2[3])
        {
LABEL_42:
          if (cf) {
            CFRelease(cf);
          }
          MEMORY[0x237DF6610](v22);
          goto LABEL_45;
        }
        CFTypeRef v15 = cf;
        if (cf && (CFRetain(cf), (size_t v14 = (const void *)v2[2]) == 0)) {
          char v16 = 0;
        }
        else {
          char v16 = _Block_copy(v14);
        }
        long long v17 = v2[3];
        *(void *)&long long __p = MEMORY[0x263EF8330];
        *((void *)&__p + 1) = 1174405120;
        size_t v25 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke;
        long long v26 = &__block_descriptor_tmp_71;
        if (v16)
        {
          aBlocunint64_t k = _Block_copy(v16);
          CFTypeRef v28 = v15;
          if (!v15) {
            goto LABEL_34;
          }
        }
        else
        {
          aBlocunint64_t k = 0;
          CFTypeRef v28 = v15;
          if (!v15)
          {
LABEL_34:
            dispatch_async(v17, &__p);
            if (v28) {
              CFRelease(v28);
            }
            if (aBlock) {
              _Block_release(aBlock);
            }
            if (v16) {
              _Block_release(v16);
            }
            if (v15) {
              CFRelease(v15);
            }
            goto LABEL_42;
          }
        }
        CFRetain(v15);
        goto LABEL_34;
      }
    }
  }
}

void sub_235DE3C6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, CFTypeRef cf, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c157_ZTSNSt3__110shared_ptrIZZN5trace16ARICommandDriver17pauseTraceTrafficEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb_E3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c157_ZTSNSt3__110shared_ptrIZZN5trace16ARICommandDriver17pauseTraceTrafficEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb_E3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5trace16ARICommandDriver17pauseTraceTrafficEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb_E3__0NS_9allocatorISD_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93C218;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5trace16ARICommandDriver17pauseTraceTrafficEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb_E3__0NS_9allocatorISD_EEED0Ev(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93C218;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5trace16ARICommandDriver17pauseTraceTrafficEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb_E3__0NS_9allocatorISD_EEE16__on_zero_sharedEv(void *a1)
{
  uint64_t v2 = a1[6];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = (const void *)a1[5];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[4];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

uint64_t ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_1(uint64_t a1)
{
  return 0;
}

uint64_t ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get(uint64_t a1)
{
  return *(void *)a1;
}

void ___ZN3ice6detail12wrapCallbackIZZN5trace16ARICommandDriver18enableSleepProfileEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb0_E3__1vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    unint64_t v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      uint64_t v5 = v2[4];
      uint64_t v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        uint64_t v7 = v6;
        if (!*v2)
        {
LABEL_45:
          if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        uint64_t v23 = (int *)0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        _OWORD v22[2] = v8;
        v22[3] = v8;
        v22[0] = v8;
        v22[1] = v8;
        AriSdk::ARI_CsiTraceProfileSelectRspCb_SDK::ARI_CsiTraceProfileSelectRspCb_SDK((AriSdk::ARI_CsiTraceProfileSelectRspCb_SDK *)v22, a2);
        CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        long long __p = operator new(0x19uLL);
        long long v25 = xmmword_235E71940;
        strcpy((char *)__p, "configure sleep profile");
        checkError((AriSdk::MsgBase *)v22, (uint64_t)&__p, &cf);
        if (SHIBYTE(v25) < 0)
        {
          operator delete(__p);
          if (cf) {
            uint64_t v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          }
          else {
            uint64_t v10 = 0;
          }
          if (v10) {
            goto LABEL_23;
          }
        }
        else
        {
          if (cf) {
            char v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          }
          else {
            char v9 = 0;
          }
          if (v9) {
            goto LABEL_23;
          }
        }
        int v11 = AriSdk::ARI_CsiTraceProfileSelectRspCb_SDK::unpack((AriSdk::ARI_CsiTraceProfileSelectRspCb_SDK *)v22);
        if (v11 || *v23)
        {
          size_t v12 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            int v19 = *v23;
            LODWORD(__p) = 67109376;
            HIDWORD(__p) = v11;
            LOWORD(v25) = 1024;
            *(_DWORD *)((char *)&v25 + 2) = v19;
            _os_log_error_impl(&dword_235DB9000, v12, OS_LOG_TYPE_ERROR, "Failed to configure sleep profile: unpackResult = %d result_code_t1 = %d", (uint8_t *)&__p, 0xEu);
          }
          size_t v20 = (char *)operator new(0x28uLL);
          strcpy(v20, "Failed to configure sleep profile");
          CreateError();
          CFTypeRef v13 = cf;
          CFTypeRef cf = __p;
          long long __p = 0;
          if (v13)
          {
            CFRelease(v13);
            if (__p) {
              CFRelease(__p);
            }
          }
          operator delete(v20);
        }
        else
        {
          size_t v18 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(__p) = 0;
            _os_log_impl(&dword_235DB9000, v18, OS_LOG_TYPE_DEFAULT, "#I Successfully configured sleep profile", (uint8_t *)&__p, 2u);
          }
        }
LABEL_23:
        size_t v14 = (const void *)v2[2];
        if (!v14 || !v2[3])
        {
LABEL_42:
          if (cf) {
            CFRelease(cf);
          }
          MEMORY[0x237DF6610](v22);
          goto LABEL_45;
        }
        CFTypeRef v15 = cf;
        if (cf && (CFRetain(cf), (size_t v14 = (const void *)v2[2]) == 0)) {
          char v16 = 0;
        }
        else {
          char v16 = _Block_copy(v14);
        }
        long long v17 = v2[3];
        long long __p = (void *)MEMORY[0x263EF8330];
        *(void *)&long long v25 = 1174405120;
        *((void *)&v25 + 1) = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke;
        long long v26 = &__block_descriptor_tmp_71;
        if (v16)
        {
          aBlocunint64_t k = _Block_copy(v16);
          CFTypeRef v28 = v15;
          if (!v15) {
            goto LABEL_34;
          }
        }
        else
        {
          aBlocunint64_t k = 0;
          CFTypeRef v28 = v15;
          if (!v15)
          {
LABEL_34:
            dispatch_async(v17, &__p);
            if (v28) {
              CFRelease(v28);
            }
            if (aBlock) {
              _Block_release(aBlock);
            }
            if (v16) {
              _Block_release(v16);
            }
            if (v15) {
              CFRelease(v15);
            }
            goto LABEL_42;
          }
        }
        CFRetain(v15);
        goto LABEL_34;
      }
    }
  }
}

void sub_235DE4290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, CFTypeRef cf, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c159_ZTSNSt3__110shared_ptrIZZN5trace16ARICommandDriver18enableSleepProfileEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb0_E3__1EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c159_ZTSNSt3__110shared_ptrIZZN5trace16ARICommandDriver18enableSleepProfileEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb0_E3__1EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5trace16ARICommandDriver18enableSleepProfileEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb0_E3__1NS_9allocatorISD_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93C298;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5trace16ARICommandDriver18enableSleepProfileEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb0_E3__1NS_9allocatorISD_EEED0Ev(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93C298;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5trace16ARICommandDriver18enableSleepProfileEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb0_E3__1NS_9allocatorISD_EEE16__on_zero_sharedEv(void *a1)
{
  uint64_t v2 = a1[6];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = (const void *)a1[5];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[4];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void ___ZN3ice6detail12wrapCallbackIZZN5trace16ARICommandDriver19enableActiveProfileEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb1_E3__2vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    unint64_t v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      uint64_t v5 = v2[4];
      uint64_t v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        uint64_t v7 = v6;
        if (!*v2)
        {
LABEL_45:
          if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        uint64_t v23 = (int *)0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        _OWORD v22[2] = v8;
        v22[3] = v8;
        v22[0] = v8;
        v22[1] = v8;
        AriSdk::ARI_CsiTraceProfileSelectRspCb_SDK::ARI_CsiTraceProfileSelectRspCb_SDK((AriSdk::ARI_CsiTraceProfileSelectRspCb_SDK *)v22, a2);
        CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        strcpy((char *)__p, "configure wake profile");
        HIBYTE(__p[2]) = 22;
        checkError((AriSdk::MsgBase *)v22, (uint64_t)__p, &cf);
        if (SHIBYTE(__p[2]) < 0)
        {
          operator delete(__p[0]);
          if (cf) {
            uint64_t v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          }
          else {
            uint64_t v10 = 0;
          }
          if (v10) {
            goto LABEL_23;
          }
        }
        else
        {
          if (cf) {
            char v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          }
          else {
            char v9 = 0;
          }
          if (v9) {
            goto LABEL_23;
          }
        }
        int v11 = AriSdk::ARI_CsiTraceProfileSelectRspCb_SDK::unpack((AriSdk::ARI_CsiTraceProfileSelectRspCb_SDK *)v22);
        if (v11 || *v23)
        {
          size_t v12 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            int v19 = *v23;
            LODWORD(__p[0]) = 67109376;
            HIDWORD(__p[0]) = v11;
            LOWORD(__p[1]) = 1024;
            *(_DWORD *)((char *)&__p[1] + 2) = v19;
            _os_log_error_impl(&dword_235DB9000, v12, OS_LOG_TYPE_ERROR, "Failed to configure wake profile: unpackResult = %d result_code_t1 = %d", (uint8_t *)__p, 0xEu);
          }
          size_t v20 = (char *)operator new(0x28uLL);
          strcpy(v20, "Failed to configure wake profile");
          CreateError();
          CFTypeRef v13 = cf;
          CFTypeRef cf = __p[0];
          __p[0] = 0;
          if (v13)
          {
            CFRelease(v13);
            if (__p[0]) {
              CFRelease(__p[0]);
            }
          }
          operator delete(v20);
        }
        else
        {
          size_t v18 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(__p[0]) = 0;
            _os_log_impl(&dword_235DB9000, v18, OS_LOG_TYPE_DEFAULT, "#I Successfully configured wake profile", (uint8_t *)__p, 2u);
          }
        }
LABEL_23:
        size_t v14 = (const void *)v2[2];
        if (!v14 || !v2[3])
        {
LABEL_42:
          if (cf) {
            CFRelease(cf);
          }
          MEMORY[0x237DF6610](v22);
          goto LABEL_45;
        }
        CFTypeRef v15 = cf;
        if (cf && (CFRetain(cf), (size_t v14 = (const void *)v2[2]) == 0)) {
          char v16 = 0;
        }
        else {
          char v16 = _Block_copy(v14);
        }
        long long v17 = v2[3];
        __p[0] = (void *)MEMORY[0x263EF8330];
        __p[1] = (void *)1174405120;
        __p[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke;
        __p[3] = &__block_descriptor_tmp_71;
        if (v16)
        {
          aBlocunint64_t k = _Block_copy(v16);
          CFTypeRef v26 = v15;
          if (!v15) {
            goto LABEL_34;
          }
        }
        else
        {
          aBlocunint64_t k = 0;
          CFTypeRef v26 = v15;
          if (!v15)
          {
LABEL_34:
            dispatch_async(v17, __p);
            if (v26) {
              CFRelease(v26);
            }
            if (aBlock) {
              _Block_release(aBlock);
            }
            if (v16) {
              _Block_release(v16);
            }
            if (v15) {
              CFRelease(v15);
            }
            goto LABEL_42;
          }
        }
        CFRetain(v15);
        goto LABEL_34;
      }
    }
  }
}

void sub_235DE4874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, CFTypeRef cf, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c160_ZTSNSt3__110shared_ptrIZZN5trace16ARICommandDriver19enableActiveProfileEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb1_E3__2EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c160_ZTSNSt3__110shared_ptrIZZN5trace16ARICommandDriver19enableActiveProfileEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb1_E3__2EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5trace16ARICommandDriver19enableActiveProfileEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb1_E3__2NS_9allocatorISD_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93C318;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5trace16ARICommandDriver19enableActiveProfileEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb1_E3__2NS_9allocatorISD_EEED0Ev(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93C318;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5trace16ARICommandDriver19enableActiveProfileEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb1_E3__2NS_9allocatorISD_EEE16__on_zero_sharedEv(void *a1)
{
  uint64_t v2 = a1[6];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = (const void *)a1[5];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[4];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void ___ZN3ice6detail12wrapCallbackIZZN5trace16ARICommandDriver12getTraceModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc4dictEEEEEUb2_E3__3vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    unint64_t v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      uint64_t v5 = v2[2];
      uint64_t v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        uint64_t v7 = v6;
        if (!*v2)
        {
LABEL_65:
          if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v32[3] = v8;
        long long v33 = v8;
        v32[1] = v8;
        v32[2] = v8;
        v32[0] = v8;
        AriSdk::ARI_CsiXsioGetRspCb_SDK::ARI_CsiXsioGetRspCb_SDK((AriSdk::ARI_CsiXsioGetRspCb_SDK *)v32, a2);
        CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        HIBYTE(v35) = 8;
        strcpy((char *)&__p, "get mode");
        checkError((AriSdk::MsgBase *)v32, (uint64_t)&__p, &cf);
        if (SHIBYTE(v35) < 0)
        {
          operator delete((void *)__p);
          if (cf) {
            uint64_t v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          }
          else {
            uint64_t v10 = 0;
          }
          if (v10) {
            goto LABEL_23;
          }
        }
        else
        {
          if (cf) {
            char v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          }
          else {
            char v9 = 0;
          }
          if (v9) {
            goto LABEL_23;
          }
        }
        int v11 = AriSdk::ARI_CsiXsioGetRspCb_SDK::unpack((AriSdk::ARI_CsiXsioGetRspCb_SDK *)v32);
        if (!v11 && !**((_DWORD **)&v33 + 1))
        {
          unsigned int v14 = *(_DWORD *)v33;
          CFTypeRef v28 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(__p) = 67109120;
            DWORD1(__p) = v14;
            _os_log_impl(&dword_235DB9000, v28, OS_LOG_TYPE_DEFAULT, "#I Successfully retrieved mode (%d)", (uint8_t *)&__p, 8u);
          }
LABEL_24:
          if (!v2[3] || !v2[4])
          {
LABEL_62:
            if (cf) {
              CFRelease(cf);
            }
            MEMORY[0x237DF5490](v32);
            goto LABEL_65;
          }
          xpc_object_t v15 = xpc_dictionary_create(0, 0, 0);
          if (v15 || (xpc_object_t v15 = xpc_null_create()) != 0)
          {
            if (MEMORY[0x237DF76E0](v15) == MEMORY[0x263EF8708])
            {
              xpc_retain(v15);
              xpc_object_t v16 = v15;
            }
            else
            {
              xpc_object_t v16 = xpc_null_create();
            }
          }
          else
          {
            xpc_object_t v16 = xpc_null_create();
            xpc_object_t v15 = 0;
          }
          xpc_release(v15);
          xpc_object_t v17 = xpc_null_create();
          xpc_release(v17);
          xpc_object_t v18 = xpc_int64_create(v14);
          if (v18 || (xpc_object_t v18 = xpc_null_create()) != 0)
          {
            xpc_retain(v18);
            xpc_object_t v19 = v18;
          }
          else
          {
            xpc_object_t v19 = xpc_null_create();
            xpc_object_t v18 = 0;
          }
          xpc_dictionary_set_value(v16, "Mode", v19);
          xpc_object_t v20 = xpc_null_create();
          xpc_release(v19);
          xpc_release(v20);
          if (v16)
          {
            xpc_retain(v16);
            xpc_object_t v21 = v16;
          }
          else
          {
            xpc_object_t v21 = xpc_null_create();
          }
          xpc_release(v18);
          xpc_release(v16);
          xpc_object_t v22 = xpc_null_create();
          xpc_release(v22);
          CFTypeRef v23 = cf;
          if (cf) {
            CFRetain(cf);
          }
          if (v21)
          {
            xpc_retain(v21);
            xpc_object_t v24 = v21;
            long long v25 = (const void *)v2[3];
            if (v25)
            {
LABEL_42:
              CFTypeRef v26 = _Block_copy(v25);
              goto LABEL_45;
            }
          }
          else
          {
            xpc_object_t v24 = xpc_null_create();
            long long v25 = (const void *)v2[3];
            if (v25) {
              goto LABEL_42;
            }
          }
          CFTypeRef v26 = 0;
LABEL_45:
          uint64_t v27 = v2[4];
          *(void *)&long long __p = MEMORY[0x263EF8330];
          *((void *)&__p + 1) = 1174405120;
          uint64_t v35 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc4dictEEEclIJS5_S7_EEEvDpT__block_invoke;
          uint64_t v36 = &__block_descriptor_tmp_91;
          if (v26)
          {
            aBlocunint64_t k = _Block_copy(v26);
            CFTypeRef v38 = v23;
            if (!v23) {
              goto LABEL_50;
            }
          }
          else
          {
            aBlocunint64_t k = 0;
            CFTypeRef v38 = v23;
            if (!v23)
            {
LABEL_50:
              xpc_object_t object = v24;
              if (v24) {
                xpc_retain(v24);
              }
              else {
                xpc_object_t object = xpc_null_create();
              }
              dispatch_async(v27, &__p);
              xpc_release(object);
              xpc_object_t object = 0;
              if (v38) {
                CFRelease(v38);
              }
              if (aBlock) {
                _Block_release(aBlock);
              }
              if (v26) {
                _Block_release(v26);
              }
              xpc_release(v24);
              if (v23) {
                CFRelease(v23);
              }
              xpc_release(v21);
              goto LABEL_62;
            }
          }
          CFRetain(v23);
          goto LABEL_50;
        }
        size_t v12 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          int v29 = **((_DWORD **)&v33 + 1);
          LODWORD(__p) = 67109376;
          DWORD1(__p) = v11;
          WORD4(__p) = 1024;
          *(_DWORD *)((char *)&__p + 10) = v29;
          _os_log_error_impl(&dword_235DB9000, v12, OS_LOG_TYPE_ERROR, "Failed to retrieve mode: unpackResult = %d result_code_t2 = %d", (uint8_t *)&__p, 0xEu);
        }
        char v30 = (char *)operator new(0x19uLL);
        strcpy(v30, "Failed to retrieve mode");
        CreateError();
        CFTypeRef v13 = cf;
        CFTypeRef cf = (CFTypeRef)__p;
        *(void *)&long long __p = 0;
        if (v13)
        {
          CFRelease(v13);
          if ((void)__p) {
            CFRelease((CFTypeRef)__p);
          }
        }
        operator delete(v30);
LABEL_23:
        unsigned int v14 = 0;
        goto LABEL_24;
      }
    }
  }
}

void sub_235DE4FD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, CFTypeRef cf, char a16)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_235DE50A4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  MEMORY[0x237DF5490](&a13);
  JUMPOUT(0x235DE50C8);
}

uint64_t __copy_helper_block_e8_32c164_ZTSNSt3__110shared_ptrIZZN5trace16ARICommandDriver12getTraceModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc4dictEEEEEUb2_E3__3EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c164_ZTSNSt3__110shared_ptrIZZN5trace16ARICommandDriver12getTraceModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc4dictEEEEEUb2_E3__3EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5trace16ARICommandDriver12getTraceModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc4dictEEEEEUb2_E3__3NS_9allocatorISF_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93C398;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5trace16ARICommandDriver12getTraceModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc4dictEEEEEUb2_E3__3NS_9allocatorISF_EEED0Ev(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93C398;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5trace16ARICommandDriver12getTraceModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc4dictEEEEEUb2_E3__3NS_9allocatorISF_EEE16__on_zero_sharedEv(void *a1)
{
  uint64_t v2 = a1[7];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = (const void *)a1[6];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[4];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc4dictEEEclIJS5_S7_EEEvDpT__block_invoke(void *a1)
{
  uint64_t v3 = a1[4];
  uint64_t v2 = (const void *)a1[5];
  CFTypeRef cf = v2;
  if (v2) {
    CFRetain(v2);
  }
  uint64_t v4 = (void *)a1[6];
  xpc_object_t object = v4;
  if (v4) {
    xpc_retain(v4);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(uint64_t, CFTypeRef *, xpc_object_t *))(v3 + 16))(v3, &cf, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  if (cf) {
    CFRelease(cf);
  }
}

void sub_235DE5300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_32c87_ZTSN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc4dictEEEE40c38_ZTSN3ctu2cf11CFSharedRefI9__CFErrorEE48c15_ZTSN3xpc4dictE(void *a1, void *a2)
{
  uint64_t v4 = (const void *)a2[4];
  if (!v4)
  {
    uint64_t v6 = (const void *)a2[5];
    a1[4] = 0;
    a1[5] = v6;
    if (!v6) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v5 = _Block_copy(v4);
  uint64_t v6 = (const void *)a2[5];
  a1[4] = v5;
  a1[5] = v6;
  if (v6) {
LABEL_5:
  }
    CFRetain(v6);
LABEL_6:
  uint64_t v7 = (void *)a2[6];
  a1[6] = v7;
  if (v7) {
    return xpc_retain(v7);
  }
  xpc_object_t result = xpc_null_create();
  a1[6] = result;
  return result;
}

void __destroy_helper_block_e8_32c87_ZTSN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEN3xpc4dictEEEE40c38_ZTSN3ctu2cf11CFSharedRefI9__CFErrorEE48c15_ZTSN3xpc4dictE(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 48));
  *(void *)(a1 + 48) = 0;
  uint64_t v2 = *(const void **)(a1 + 40);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 32);
  if (v3) {
    _Block_release(v3);
  }
}

void ___ZN3ice6detail12wrapCallbackIZZN5trace16ARICommandDriver12setTraceModeENS2_4ModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb3_E3__4vEENS5_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
    {
      uint64_t v5 = *(void *)(v2 + 32);
      uint64_t v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        uint64_t v7 = v6;
        if (!*(void *)v2)
        {
LABEL_46:
          if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        xpc_object_t v24 = (int *)0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v23[2] = v8;
        v23[3] = v8;
        v23[0] = v8;
        v23[1] = v8;
        AriSdk::ARI_CsiXsioSetRspCb_SDK::ARI_CsiXsioSetRspCb_SDK((AriSdk::ARI_CsiXsioSetRspCb_SDK *)v23, a2);
        CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        HIBYTE(v26) = 8;
        strcpy((char *)&__p, "set mode");
        checkError((AriSdk::MsgBase *)v23, (uint64_t)&__p, &cf);
        if (SHIBYTE(v26) < 0)
        {
          operator delete((void *)__p);
          if (cf) {
            uint64_t v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          }
          else {
            uint64_t v10 = 0;
          }
          if (v10) {
            goto LABEL_24;
          }
        }
        else
        {
          if (cf) {
            char v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          }
          else {
            char v9 = 0;
          }
          if (v9) {
            goto LABEL_24;
          }
        }
        int v11 = AriSdk::ARI_CsiXsioSetRspCb_SDK::unpack((AriSdk::ARI_CsiXsioSetRspCb_SDK *)v23);
        if (v11 || *v24)
        {
          size_t v12 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            int v20 = *v24;
            LODWORD(__p) = 67109376;
            DWORD1(__p) = v11;
            WORD4(__p) = 1024;
            *(_DWORD *)((char *)&__p + 10) = v20;
            _os_log_error_impl(&dword_235DB9000, v12, OS_LOG_TYPE_ERROR, "Failed to set mode: unpackResult = %d result_code_t1 = %d", (uint8_t *)&__p, 0xEu);
          }
          HIBYTE(v21[2]) = 18;
          strcpy((char *)v21, "Failed to set mode");
          CreateError();
          CFTypeRef v13 = cf;
          CFTypeRef cf = (CFTypeRef)__p;
          *(void *)&long long __p = 0;
          if (v13)
          {
            CFRelease(v13);
            if ((void)__p) {
              CFRelease((CFTypeRef)__p);
            }
          }
          if (SHIBYTE(v21[2]) < 0) {
            operator delete(v21[0]);
          }
        }
        else
        {
          xpc_object_t v18 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            int v19 = *(_DWORD *)(v2 + 40);
            LODWORD(__p) = 67109120;
            DWORD1(__p) = v19;
            _os_log_impl(&dword_235DB9000, v18, OS_LOG_TYPE_DEFAULT, "#I Successfully set mode %d", (uint8_t *)&__p, 8u);
          }
        }
LABEL_24:
        unsigned int v14 = *(const void **)(v2 + 16);
        if (!v14 || !*(void *)(v2 + 24))
        {
LABEL_43:
          if (cf) {
            CFRelease(cf);
          }
          MEMORY[0x237DF54C0](v23);
          goto LABEL_46;
        }
        CFTypeRef v15 = cf;
        if (cf && (CFRetain(cf), (unsigned int v14 = *(const void **)(v2 + 16)) == 0)) {
          xpc_object_t v16 = 0;
        }
        else {
          xpc_object_t v16 = _Block_copy(v14);
        }
        xpc_object_t v17 = *(NSObject **)(v2 + 24);
        *(void *)&long long __p = MEMORY[0x263EF8330];
        *((void *)&__p + 1) = 1174405120;
        CFTypeRef v26 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke;
        uint64_t v27 = &__block_descriptor_tmp_71;
        if (v16)
        {
          aBlocunint64_t k = _Block_copy(v16);
          CFTypeRef v29 = v15;
          if (!v15) {
            goto LABEL_35;
          }
        }
        else
        {
          aBlocunint64_t k = 0;
          CFTypeRef v29 = v15;
          if (!v15)
          {
LABEL_35:
            dispatch_async(v17, &__p);
            if (v29) {
              CFRelease(v29);
            }
            if (aBlock) {
              _Block_release(aBlock);
            }
            if (v16) {
              _Block_release(v16);
            }
            if (v15) {
              CFRelease(v15);
            }
            goto LABEL_43;
          }
        }
        CFRetain(v15);
        goto LABEL_35;
      }
    }
  }
}

void sub_235DE57B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, CFTypeRef cf, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c163_ZTSNSt3__110shared_ptrIZZN5trace16ARICommandDriver12setTraceModeENS1_4ModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb3_E3__4EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c163_ZTSNSt3__110shared_ptrIZZN5trace16ARICommandDriver12setTraceModeENS1_4ModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb3_E3__4EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5trace16ARICommandDriver12setTraceModeENS1_4ModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb3_E3__4NS_9allocatorISE_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93C448;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5trace16ARICommandDriver12setTraceModeENS1_4ModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb3_E3__4NS_9allocatorISE_EEED0Ev(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93C448;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5trace16ARICommandDriver12setTraceModeENS1_4ModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb3_E3__4NS_9allocatorISE_EEE16__on_zero_sharedEv(void *a1)
{
  uint64_t v2 = a1[6];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = (const void *)a1[5];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[4];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void ___ZN3ice6detail12wrapCallbackIZN5trace16ARICommandDriver18profileMaskV1_syncENSt3__16vectorIcNS4_9allocatorIcEEEES8_NS4_8weak_ptrINS2_13CommandDriverEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEE3__0vEENSC_5blockIU13block_pointerFiPhjEEENS4_17integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      uint64_t v5 = v2[4];
      uint64_t v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        uint64_t v7 = v6;
        if (!*v2)
        {
LABEL_47:
          if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        uint64_t v55 = (int *)0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v54[2] = v8;
        v54[3] = v8;
        v54[0] = v8;
        v54[1] = v8;
        AriSdk::ARI_CsiTraceProfileInitRspCb_SDK::ARI_CsiTraceProfileInitRspCb_SDK((AriSdk::ARI_CsiTraceProfileInitRspCb_SDK *)v54, a2);
        CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        HIBYTE(__p[2]) = 18;
        strcpy((char *)__p, "update trace masks");
        checkError((AriSdk::MsgBase *)v54, (uint64_t)__p, &cf);
        if (SHIBYTE(__p[2]) < 0)
        {
          operator delete(__p[0]);
          if (cf) {
            uint64_t v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          }
          else {
            uint64_t v10 = 0;
          }
          if (v10) {
            goto LABEL_25;
          }
        }
        else
        {
          if (cf) {
            char v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          }
          else {
            char v9 = 0;
          }
          if (v9) {
            goto LABEL_25;
          }
        }
        int v11 = AriSdk::ARI_CsiTraceProfileInitRspCb_SDK::unpack((AriSdk::ARI_CsiTraceProfileInitRspCb_SDK *)v54);
        if (v11 || *v55)
        {
          size_t v12 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            int v24 = *v55;
            LODWORD(__p[0]) = 67109376;
            HIDWORD(__p[0]) = v11;
            LOWORD(__p[1]) = 1024;
            *(_DWORD *)((char *)&__p[1] + 2) = v24;
            _os_log_error_impl(&dword_235DB9000, v12, OS_LOG_TYPE_ERROR, "Failed to update trace masks: unpackResult = %d result_code_t1 = %d", (uint8_t *)__p, 0xEu);
          }
          uint64_t v51 = operator new(0x20uLL);
          long long v52 = xmmword_235E71970;
          strcpy((char *)v51, "Failed to update trace masks");
          CreateError();
          CFTypeRef v13 = cf;
          CFTypeRef cf = __p[0];
          __p[0] = 0;
          if (v13)
          {
            CFRelease(v13);
            if (__p[0]) {
              CFRelease(__p[0]);
            }
          }
          if (SHIBYTE(v52) < 0)
          {
            unsigned int v14 = v51;
LABEL_24:
            operator delete(v14);
            goto LABEL_25;
          }
          goto LABEL_25;
        }
        int v19 = *(NSObject **)(v5 + 40);
        if (!os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_25;
        }
        uint64_t v21 = v2[5];
        int v20 = (char *)v2[6];
        unint64_t v22 = (unint64_t)&v20[-v21];
        if ((unint64_t)&v20[-v21] > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v22 > 0x16)
        {
          uint64_t v25 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v22 | 7) != 0x17) {
            uint64_t v25 = v22 | 7;
          }
          uint64_t v26 = v25 + 1;
          CFTypeRef v23 = operator new(v25 + 1);
          __p[1] = &v20[-v21];
          __p[2] = (void *)(v26 | 0x8000000000000000);
          __p[0] = v23;
        }
        else
        {
          HIBYTE(__p[2]) = (_BYTE)v20 - v21;
          CFTypeRef v23 = __p;
        }
        if ((char *)v21 == v20)
        {
          uint64_t v27 = v23;
          goto LABEL_67;
        }
        if (v22 < 0x20 || (unint64_t)v23 - v21 < 0x20)
        {
          uint64_t v27 = v23;
          CFTypeRef v28 = (char *)v21;
        }
        else
        {
          uint64_t v27 = (char *)v23 + (v22 & 0xFFFFFFFFFFFFFFE0);
          CFTypeRef v28 = (char *)(v21 + (v22 & 0xFFFFFFFFFFFFFFE0));
          CFTypeRef v29 = (long long *)(v21 + 16);
          uint64_t v30 = v23 + 1;
          unint64_t v31 = v22 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v32 = *v29;
            *(v30 - 1) = *(v29 - 1);
            *uint64_t v30 = v32;
            v29 += 2;
            v30 += 2;
            v31 -= 32;
          }
          while (v31);
          if (v22 == (v22 & 0xFFFFFFFFFFFFFFE0))
          {
LABEL_67:
            *uint64_t v27 = 0;
            uint64_t v35 = v2[8];
            size_t v34 = (char *)v2[9];
            unint64_t v36 = (unint64_t)&v34[-v35];
            if ((unint64_t)&v34[-v35] > 0x7FFFFFFFFFFFFFF7) {
              std::string::__throw_length_error[abi:ne180100]();
            }
            int v37 = SHIBYTE(__p[2]);
            CFTypeRef v38 = (void **)__p[0];
            if (v36 > 0x16)
            {
              uint64_t v40 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v36 | 7) != 0x17) {
                uint64_t v40 = v36 | 7;
              }
              uint64_t v41 = v40 + 1;
              long long v39 = operator new(v40 + 1);
              *(void *)&long long v52 = &v34[-v35];
              *((void *)&v52 + 1) = v41 | 0x8000000000000000;
              uint64_t v51 = v39;
            }
            else
            {
              HIBYTE(v52) = (_BYTE)v34 - v35;
              long long v39 = &v51;
            }
            if ((char *)v35 == v34)
            {
              uint64_t v42 = v39;
              goto LABEL_83;
            }
            if (v36 < 0x20 || (unint64_t)v39 - v35 < 0x20)
            {
              uint64_t v42 = v39;
              int64_t v43 = (char *)v35;
            }
            else
            {
              uint64_t v42 = (char *)v39 + (v36 & 0xFFFFFFFFFFFFFFE0);
              int64_t v43 = (char *)(v35 + (v36 & 0xFFFFFFFFFFFFFFE0));
              unint64_t v44 = (long long *)(v35 + 16);
              size_t v45 = v39 + 1;
              unint64_t v46 = v36 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                long long v47 = *v44;
                *(v45 - 1) = *(v44 - 1);
                *size_t v45 = v47;
                v44 += 2;
                v45 += 2;
                v46 -= 32;
              }
              while (v46);
              if (v36 == (v36 & 0xFFFFFFFFFFFFFFE0))
              {
LABEL_83:
                unsigned char *v42 = 0;
                __int16 v49 = __p;
                if (v37 < 0) {
                  __int16 v49 = v38;
                }
                CFErrorRef v50 = &v51;
                if (v52 < 0) {
                  CFErrorRef v50 = v51;
                }
                *(_DWORD *)long long buf = 136315394;
                __int16 v57 = v49;
                __int16 v58 = 2080;
                long long v59 = v50;
                _os_log_impl(&dword_235DB9000, v19, OS_LOG_TYPE_DEFAULT, "#I Successfully updated trace masks\nActive: %s\nSleep: %s", buf, 0x16u);
                if (SHIBYTE(v52) < 0) {
                  operator delete(v51);
                }
                if (SHIBYTE(__p[2]) < 0)
                {
                  unsigned int v14 = __p[0];
                  goto LABEL_24;
                }
LABEL_25:
                CFTypeRef v15 = (const void *)v2[2];
                if (!v15 || !v2[3])
                {
LABEL_44:
                  if (cf) {
                    CFRelease(cf);
                  }
                  MEMORY[0x237DF63D0](v54);
                  goto LABEL_47;
                }
                CFTypeRef v16 = cf;
                if (cf && (CFRetain(cf), (CFTypeRef v15 = (const void *)v2[2]) == 0)) {
                  xpc_object_t v17 = 0;
                }
                else {
                  xpc_object_t v17 = _Block_copy(v15);
                }
                xpc_object_t v18 = v2[3];
                __p[0] = (void *)MEMORY[0x263EF8330];
                __p[1] = (void *)1174405120;
                __p[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke;
                __p[3] = &__block_descriptor_tmp_71;
                if (v17)
                {
                  aBlocunint64_t k = _Block_copy(v17);
                  CFTypeRef v62 = v16;
                  if (!v16) {
                    goto LABEL_36;
                  }
                }
                else
                {
                  aBlocunint64_t k = 0;
                  CFTypeRef v62 = v16;
                  if (!v16)
                  {
LABEL_36:
                    dispatch_async(v18, __p);
                    if (v62) {
                      CFRelease(v62);
                    }
                    if (aBlock) {
                      _Block_release(aBlock);
                    }
                    if (v17) {
                      _Block_release(v17);
                    }
                    if (v16) {
                      CFRelease(v16);
                    }
                    goto LABEL_44;
                  }
                }
                CFRetain(v16);
                goto LABEL_36;
              }
            }
            do
            {
              char v48 = *v43++;
              *v42++ = v48;
            }
            while (v43 != v34);
            goto LABEL_83;
          }
        }
        do
        {
          char v33 = *v28++;
          *v27++ = v33;
        }
        while (v28 != v20);
        goto LABEL_67;
      }
    }
  }
}

void sub_235DE5FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, CFTypeRef cf, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  if (cf) {
    CFRelease(cf);
  }
  MEMORY[0x237DF63D0](&a16);
  if (!atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c222_ZTSNSt3__110shared_ptrIZN5trace16ARICommandDriver18profileMaskV1_syncENS_6vectorIcNS_9allocatorIcEEEES6_NS_8weak_ptrINS1_13CommandDriverEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c222_ZTSNSt3__110shared_ptrIZN5trace16ARICommandDriver18profileMaskV1_syncENS_6vectorIcNS_9allocatorIcEEEES6_NS_8weak_ptrINS1_13CommandDriverEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<trace::ARICommandDriver::profileMaskV1_sync(std::vector<char>,std::vector<char>,std::weak_ptr<trace::CommandDriver>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::allocator<trace::ARICommandDriver::profileMaskV1_sync(std::vector<char>,std::vector<char>,std::weak_ptr<trace::CommandDriver>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93C4C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<trace::ARICommandDriver::profileMaskV1_sync(std::vector<char>,std::vector<char>,std::weak_ptr<trace::CommandDriver>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::allocator<trace::ARICommandDriver::profileMaskV1_sync(std::vector<char>,std::vector<char>,std::weak_ptr<trace::CommandDriver>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93C4C8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<trace::ARICommandDriver::profileMaskV1_sync(std::vector<char>,std::vector<char>,std::weak_ptr<trace::CommandDriver>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::allocator<trace::ARICommandDriver::profileMaskV1_sync(std::vector<char>,std::vector<char>,std::weak_ptr<trace::CommandDriver>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>::__on_zero_shared(void *a1)
{
  uint64_t v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[8];
  if (v3)
  {
    a1[9] = v3;
    operator delete(v3);
  }
  uint64_t v4 = a1[6];
  if (v4) {
    dispatch_release(v4);
  }
  uint64_t v5 = (const void *)a1[5];
  if (v5) {
    _Block_release(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)a1[4];
  if (v6)
  {
    std::__shared_weak_count::__release_weak(v6);
  }
}

void ___ZN3ice6detail12wrapCallbackIZN5trace16ARICommandDriver18profileMaskV2_syncENSt3__16vectorIcNS4_9allocatorIcEEEEtNS4_8weak_ptrINS2_13CommandDriverEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEE3__0vEENSC_5blockIU13block_pointerFiPhjEEENS4_17integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
    {
      uint64_t v5 = *(void *)(v2 + 16);
      uint64_t v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        uint64_t v7 = v6;
        if (!*(void *)v2)
        {
LABEL_47:
          if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        long long v39 = (int *)0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v38[2] = v8;
        v38[3] = v8;
        v38[0] = v8;
        v38[1] = v8;
        AriSdk::ARI_CsiTraceProfilePacketsRspCb_SDK::ARI_CsiTraceProfilePacketsRspCb_SDK((AriSdk::ARI_CsiTraceProfilePacketsRspCb_SDK *)v38, a2);
        CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        HIBYTE(__p[2]) = 18;
        strcpy((char *)__p, "update trace masks");
        checkError((AriSdk::MsgBase *)v38, (uint64_t)__p, &cf);
        if (SHIBYTE(__p[2]) < 0)
        {
          operator delete(__p[0]);
          if (cf) {
            uint64_t v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          }
          else {
            uint64_t v10 = 0;
          }
          if (v10) {
            goto LABEL_25;
          }
        }
        else
        {
          if (cf) {
            char v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          }
          else {
            char v9 = 0;
          }
          if (v9) {
            goto LABEL_25;
          }
        }
        int v11 = AriSdk::ARI_CsiTraceProfilePacketsRspCb_SDK::unpack((AriSdk::ARI_CsiTraceProfilePacketsRspCb_SDK *)v38);
        if (v11 || *v39)
        {
          size_t v12 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            int v25 = *v39;
            LODWORD(__p[0]) = 67109376;
            HIDWORD(__p[0]) = v11;
            LOWORD(__p[1]) = 1024;
            *(_DWORD *)((char *)&__p[1] + 2) = v25;
            _os_log_error_impl(&dword_235DB9000, v12, OS_LOG_TYPE_ERROR, "Failed to update trace masks: unpackResult = %d result_code_t1 = %d", (uint8_t *)__p, 0xEu);
          }
          *(void *)long long buf = operator new(0x20uLL);
          *(_OWORD *)&uint8_t buf[8] = xmmword_235E71970;
          strcpy(*(char **)buf, "Failed to update trace masks");
          CreateError();
          CFTypeRef v13 = cf;
          CFTypeRef cf = __p[0];
          __p[0] = 0;
          if (v13)
          {
            CFRelease(v13);
            if (__p[0]) {
              CFRelease(__p[0]);
            }
          }
          if ((buf[23] & 0x80000000) != 0)
          {
            unsigned int v14 = *(void **)buf;
LABEL_24:
            operator delete(v14);
            goto LABEL_25;
          }
          goto LABEL_25;
        }
        int v19 = *(NSObject **)(v5 + 40);
        if (!os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_25;
        }
        uint64_t v21 = *(void *)(v2 + 32);
        int v20 = *(char **)(v2 + 40);
        unint64_t v22 = (unint64_t)&v20[-v21];
        if ((unint64_t)&v20[-v21] >= 0x7FFFFFFFFFFFFFF8) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        int v23 = *(unsigned __int16 *)(v2 + 24);
        if (v22 > 0x16)
        {
          uint64_t v26 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v22 | 7) != 0x17) {
            uint64_t v26 = v22 | 7;
          }
          uint64_t v27 = v26 + 1;
          int v24 = operator new(v26 + 1);
          __p[1] = &v20[-v21];
          __p[2] = (void *)(v27 | 0x8000000000000000);
          __p[0] = v24;
        }
        else
        {
          HIBYTE(__p[2]) = (_BYTE)v20 - v21;
          int v24 = __p;
        }
        if ((char *)v21 == v20)
        {
          CFTypeRef v28 = v24;
          goto LABEL_67;
        }
        if (v22 < 0x20 || (unint64_t)v24 - v21 < 0x20)
        {
          CFTypeRef v28 = v24;
          CFTypeRef v29 = (char *)v21;
        }
        else
        {
          CFTypeRef v28 = (char *)v24 + (v22 & 0xFFFFFFFFFFFFFFE0);
          CFTypeRef v29 = (char *)(v21 + (v22 & 0xFFFFFFFFFFFFFFE0));
          uint64_t v30 = (long long *)(v21 + 16);
          unint64_t v31 = v24 + 1;
          unint64_t v32 = v22 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v33 = *v30;
            *(v31 - 1) = *(v30 - 1);
            _OWORD *v31 = v33;
            v30 += 2;
            v31 += 2;
            v32 -= 32;
          }
          while (v32);
          if (v22 == (v22 & 0xFFFFFFFFFFFFFFE0))
          {
LABEL_67:
            *CFTypeRef v28 = 0;
            uint64_t v35 = "Active: ";
            if (!v23) {
              uint64_t v35 = "Sleep: ";
            }
            unint64_t v36 = __p;
            if (SHIBYTE(__p[2]) < 0) {
              unint64_t v36 = (void **)__p[0];
            }
            *(_DWORD *)long long buf = 136315394;
            *(void *)&uint8_t buf[4] = v35;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = v36;
            _os_log_impl(&dword_235DB9000, v19, OS_LOG_TYPE_DEFAULT, "#I Successfully updated trace masks\n%s%s", buf, 0x16u);
            if (SHIBYTE(__p[2]) < 0)
            {
              unsigned int v14 = __p[0];
              goto LABEL_24;
            }
LABEL_25:
            CFTypeRef v15 = *(const void **)(v2 + 56);
            if (!v15 || !*(void *)(v2 + 64))
            {
LABEL_44:
              if (cf) {
                CFRelease(cf);
              }
              MEMORY[0x237DF6740](v38);
              goto LABEL_47;
            }
            CFTypeRef v16 = cf;
            if (cf && (CFRetain(cf), (CFTypeRef v15 = *(const void **)(v2 + 56)) == 0)) {
              xpc_object_t v17 = 0;
            }
            else {
              xpc_object_t v17 = _Block_copy(v15);
            }
            xpc_object_t v18 = *(NSObject **)(v2 + 64);
            __p[0] = (void *)MEMORY[0x263EF8330];
            __p[1] = (void *)1174405120;
            __p[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke;
            __p[3] = &__block_descriptor_tmp_71;
            if (v17)
            {
              aBlocunint64_t k = _Block_copy(v17);
              CFTypeRef v43 = v16;
              if (!v16) {
                goto LABEL_36;
              }
            }
            else
            {
              aBlocunint64_t k = 0;
              CFTypeRef v43 = v16;
              if (!v16)
              {
LABEL_36:
                dispatch_async(v18, __p);
                if (v43) {
                  CFRelease(v43);
                }
                if (aBlock) {
                  _Block_release(aBlock);
                }
                if (v17) {
                  _Block_release(v17);
                }
                if (v16) {
                  CFRelease(v16);
                }
                goto LABEL_44;
              }
            }
            CFRetain(v16);
            goto LABEL_36;
          }
        }
        do
        {
          char v34 = *v29++;
          *v28++ = v34;
        }
        while (v29 != v20);
        goto LABEL_67;
      }
    }
  }
}

void sub_235DE6720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (cf) {
    CFRelease(cf);
  }
  MEMORY[0x237DF6740](&a11);
  if (!atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c220_ZTSNSt3__110shared_ptrIZN5trace16ARICommandDriver18profileMaskV2_syncENS_6vectorIcNS_9allocatorIcEEEEtNS_8weak_ptrINS1_13CommandDriverEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c220_ZTSNSt3__110shared_ptrIZN5trace16ARICommandDriver18profileMaskV2_syncENS_6vectorIcNS_9allocatorIcEEEEtNS_8weak_ptrINS1_13CommandDriverEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<trace::ARICommandDriver::profileMaskV2_sync(std::vector<char>,unsigned short,std::weak_ptr<trace::CommandDriver>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::allocator<trace::ARICommandDriver::profileMaskV2_sync(std::vector<char>,unsigned short,std::weak_ptr<trace::CommandDriver>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93C548;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<trace::ARICommandDriver::profileMaskV2_sync(std::vector<char>,unsigned short,std::weak_ptr<trace::CommandDriver>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::allocator<trace::ARICommandDriver::profileMaskV2_sync(std::vector<char>,unsigned short,std::weak_ptr<trace::CommandDriver>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93C548;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<trace::ARICommandDriver::profileMaskV2_sync(std::vector<char>,unsigned short,std::weak_ptr<trace::CommandDriver>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::allocator<trace::ARICommandDriver::profileMaskV2_sync(std::vector<char>,unsigned short,std::weak_ptr<trace::CommandDriver>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>::__on_zero_shared(void *a1)
{
  uint64_t v2 = a1[11];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = (const void *)a1[10];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = (void *)a1[7];
  if (v4)
  {
    a1[8] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
  {
    std::__shared_weak_count::__release_weak(v5);
  }
}

void ___ZN3ice6detail12wrapCallbackIZZN5trace16ARICommandDriver14setTraceParamsERNS2_11TraceParamsEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb4_E3__7vEENS6_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
    {
      uint64_t v5 = *(void *)(v2 + 32);
      uint64_t v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        uint64_t v7 = v6;
        if (!*(void *)v2)
        {
LABEL_45:
          if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        uint64_t v26 = (int *)0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        _OWORD v25[2] = v8;
        v25[3] = v8;
        v25[0] = v8;
        v25[1] = v8;
        AriSdk::ARI_CsiTraceModeInitRspCb_SDK::ARI_CsiTraceModeInitRspCb_SDK((AriSdk::ARI_CsiTraceModeInitRspCb_SDK *)v25, a2);
        CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        long long __p = operator new(0x19uLL);
        *(_OWORD *)CFTypeRef v28 = xmmword_235E71940;
        strcpy((char *)__p, "update trace parameters");
        checkError((AriSdk::MsgBase *)v25, (uint64_t)&__p, &cf);
        if ((v28[15] & 0x80000000) != 0)
        {
          operator delete(__p);
          if (cf) {
            uint64_t v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          }
          else {
            uint64_t v10 = 0;
          }
          if (v10) {
            goto LABEL_23;
          }
        }
        else
        {
          if (cf) {
            char v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          }
          else {
            char v9 = 0;
          }
          if (v9) {
            goto LABEL_23;
          }
        }
        int v11 = AriSdk::ARI_CsiTraceModeInitRspCb_SDK::unpack((AriSdk::ARI_CsiTraceModeInitRspCb_SDK *)v25);
        if (v11 || *v26)
        {
          size_t v12 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            int v22 = *v26;
            LODWORD(__p) = 67109376;
            HIDWORD(__p) = v11;
            *(_WORD *)CFTypeRef v28 = 1024;
            *(_DWORD *)&v28[2] = v22;
            _os_log_error_impl(&dword_235DB9000, v12, OS_LOG_TYPE_ERROR, "Failed to update trace parameters: unpackResult = %d result_code_t1 = %d", (uint8_t *)&__p, 0xEu);
          }
          int v23 = (char *)operator new(0x20uLL);
          strcpy(v23, "Failed to update watermarks");
          CreateError();
          CFTypeRef v13 = cf;
          CFTypeRef cf = __p;
          long long __p = 0;
          if (v13)
          {
            CFRelease(v13);
            if (__p) {
              CFRelease(__p);
            }
          }
          operator delete(v23);
        }
        else
        {
          xpc_object_t v18 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            int v19 = *(unsigned __int8 *)(v2 + 41);
            int v20 = *(_DWORD *)(v2 + 44);
            int v21 = *(_DWORD *)(v2 + 48);
            long long __p = (void *)__PAIR64__(*(unsigned __int8 *)(v2 + 40), 67109888);
            *(_WORD *)CFTypeRef v28 = 1024;
            *(_DWORD *)&v28[2] = v19;
            *(_WORD *)&v28[6] = 1024;
            *(_DWORD *)&v28[8] = v20;
            *(_WORD *)&v28[12] = 1024;
            *(_DWORD *)&v28[14] = v21;
            _os_log_impl(&dword_235DB9000, v18, OS_LOG_TYPE_DEFAULT, "#I Successfully updated trace parameters to Enabled: %d, BackgroundMode: %d, Watermarks: %d, %d", (uint8_t *)&__p, 0x1Au);
          }
        }
LABEL_23:
        unsigned int v14 = *(const void **)(v2 + 16);
        if (!v14 || !*(void *)(v2 + 24))
        {
LABEL_42:
          if (cf) {
            CFRelease(cf);
          }
          MEMORY[0x237DF5DE0](v25);
          goto LABEL_45;
        }
        CFTypeRef v15 = cf;
        if (cf && (CFRetain(cf), (unsigned int v14 = *(const void **)(v2 + 16)) == 0)) {
          CFTypeRef v16 = 0;
        }
        else {
          CFTypeRef v16 = _Block_copy(v14);
        }
        xpc_object_t v17 = *(NSObject **)(v2 + 24);
        long long __p = (void *)MEMORY[0x263EF8330];
        *(void *)CFTypeRef v28 = 1174405120;
        *(void *)&v28[8] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke;
        *(void *)&v28[16] = &__block_descriptor_tmp_71;
        if (v16)
        {
          aBlocunint64_t k = _Block_copy(v16);
          CFTypeRef v30 = v15;
          if (!v15) {
            goto LABEL_34;
          }
        }
        else
        {
          aBlocunint64_t k = 0;
          CFTypeRef v30 = v15;
          if (!v15)
          {
LABEL_34:
            dispatch_async(v17, &__p);
            if (v30) {
              CFRelease(v30);
            }
            if (aBlock) {
              _Block_release(aBlock);
            }
            if (v16) {
              _Block_release(v16);
            }
            if (v15) {
              CFRelease(v15);
            }
            goto LABEL_42;
          }
        }
        CFRetain(v15);
        goto LABEL_34;
      }
    }
  }
}

void sub_235DE6D5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, CFTypeRef cf, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c174_ZTSNSt3__110shared_ptrIZZN5trace16ARICommandDriver14setTraceParamsERNS1_11TraceParamsEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb4_E3__7EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c174_ZTSNSt3__110shared_ptrIZZN5trace16ARICommandDriver14setTraceParamsERNS1_11TraceParamsEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb4_E3__7EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5trace16ARICommandDriver14setTraceParamsERNS1_11TraceParamsEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb4_E3__7NS_9allocatorISF_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93C5C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5trace16ARICommandDriver14setTraceParamsERNS1_11TraceParamsEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb4_E3__7NS_9allocatorISF_EEED0Ev(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93C5C8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN5trace16ARICommandDriver14setTraceParamsERNS1_11TraceParamsEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb4_E3__7NS_9allocatorISF_EEE16__on_zero_sharedEv(void *a1)
{
  uint64_t v2 = a1[6];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = (const void *)a1[5];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[4];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void *___ZNK3ctu20SharedSynchronizableIN5trace13CommandDriverEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

void cpms::ARICommandDriver::create(uint64_t *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v4 = (cpms::CommandDriver *)operator new(0x60uLL);
  uint64_t v5 = (uint64_t)v4;
  uint64_t v6 = (std::__shared_weak_count *)a1[1];
  uint64_t v10 = *a1;
  int v11 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  cpms::ARICommandDriver::ARICommandDriver(v4, (uint64_t)&v10);
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<cpms::ARICommandDriver>::shared_ptr[abi:ne180100]<cpms::ARICommandDriver,std::shared_ptr<cpms::ARICommandDriver> ctu::SharedSynchronizable<cpms::CommandDriver>::make_shared_ptr<cpms::ARICommandDriver>(cpms::ARICommandDriver*)::{lambda(cpms::ARICommandDriver*)#1},void>(a2, v5);
  uint64_t v7 = v11;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v8 = *a2;
  char v9 = (uint64_t *)(*a2 + 8);
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 0x40000000;
  void v12[2] = ___ZN4cpms16ARICommandDriver4initEv_block_invoke;
  v12[3] = &__block_descriptor_tmp_1;
  _OWORD v12[4] = v8;
  ctu::SharedSynchronizable<cpms::CommandDriver>::execute_wrapped(v9, (uint64_t)v12);
}

void sub_235DE70D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_235DE70E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  operator delete(v2);
  _Unwind_Resume(a1);
}

void cpms::ARICommandDriver::init(cpms::ARICommandDriver *this)
{
  v1[0] = MEMORY[0x263EF8330];
  v1[1] = 0x40000000;
  v1[2] = ___ZN4cpms16ARICommandDriver4initEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_1;
  v1[4] = this;
  ctu::SharedSynchronizable<cpms::CommandDriver>::execute_wrapped((uint64_t *)this + 1, (uint64_t)v1);
}

cpms::CommandDriver *cpms::ARICommandDriver::ARICommandDriver(cpms::CommandDriver *a1, uint64_t a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 8);
  uint64_t v7 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  cpms::CommandDriver::CommandDriver();
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  *(void *)a1 = &unk_26E93C618;
  uint64_t v4 = *((void *)a1 + 3);
  xpc_object_t object = v4;
  if (v4) {
    dispatch_retain(v4);
  }
  cpms::CommandDriver::getName(a1);
  ice::Client::create();
  if (object) {
    dispatch_release(object);
  }
  *((void *)a1 + 10) = 0;
  *((void *)a1 + 11) = 0;
  return a1;
}

void sub_235DE7264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_235DE7278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  cpms::CommandDriver::~CommandDriver(v10);
  _Unwind_Resume(a1);
}

void cpms::CommandDriver::~CommandDriver(cpms::CommandDriver *this)
{
  *(void *)this = &unk_26E93C728;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (!v2 || atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    MEMORY[0x237DF4D60]((char *)this + 40);
    uint64_t v3 = *((void *)this + 4);
    if (!v3) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  MEMORY[0x237DF4D60]((char *)this + 40);
  uint64_t v3 = *((void *)this + 4);
  if (v3) {
LABEL_4:
  }
    dispatch_release(v3);
LABEL_5:
  uint64_t v4 = *((void *)this + 3);
  if (v4) {
    dispatch_release(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
}

void cpms::ARICommandDriver::~ARICommandDriver(cpms::ARICommandDriver *this)
{
  *(void *)this = &unk_26E93C618;
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl(&dword_235DB9000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v6, 2u);
  }
  uint64_t v3 = *((void *)this + 11);
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (const void *)*((void *)this + 10);
  if (v4) {
    _Block_release(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    cpms::CommandDriver::~CommandDriver(this);
  }
  else
  {
    cpms::CommandDriver::~CommandDriver(this);
  }
}

{
  void *v1;
  uint64_t vars8;

  cpms::ARICommandDriver::~ARICommandDriver(this);

  operator delete(v1);
}

uint64_t ___ZN4cpms16ARICommandDriver4initEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v14) = 0;
    _os_log_impl(&dword_235DB9000, v2, OS_LOG_TYPE_DEFAULT, "#I Initializing", (uint8_t *)&v14, 2u);
  }
  uint64_t v3 = (std::__shared_weak_count *)operator new(0x20uLL);
  v3->__shared_owners_ = 0;
  p_shared_owners = &v3->__shared_owners_;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93C808;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)v1;
  unsigned int v14 = (void *)MEMORY[0x263EF8330];
  uint64_t v15 = 1174405120;
  CFTypeRef v16 = ___ZN3ice6detail17wrapEventCallbackIZZN4cpms16ARICommandDriver4initEvEUb_E3__0vEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi0EEEOT__block_invoke;
  xpc_object_t v17 = &__block_descriptor_tmp_11_0;
  xpc_object_t v18 = v3 + 1;
  int v19 = v3;
  atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlocunint64_t k = MEMORY[0x263EF8330];
  uint64_t v21 = 0x40000000;
  int v22 = ___ZN3ice6detail17wrapEventCallbackIvEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi0EEEU13block_pointerFT_vE_block_invoke_1;
  int v23 = &unk_264C7D980;
  int v24 = &v14;
  uint64_t v5 = _Block_copy(&aBlock);
  uint64_t v6 = v19;
  if (!v19 || atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_6;
    }
LABEL_9:
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if (v5) {
      goto LABEL_7;
    }
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_9;
  }
LABEL_6:
  if (v5)
  {
LABEL_7:
    uint64_t v7 = _Block_copy(v5);
    goto LABEL_11;
  }
LABEL_10:
  uint64_t v7 = 0;
LABEL_11:
  unsigned int v14 = v7;
  ice::Client::regEventHandlerInternal();
  if (v14) {
    _Block_release(v14);
  }
  if (v5) {
    _Block_release(v5);
  }
  uint64_t v8 = (std::__shared_weak_count *)operator new(0x20uLL);
  v8->__shared_owners_ = 0;
  char v9 = &v8->__shared_owners_;
  v8->__shared_weak_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93C888;
  v8[1].__vftable = (std::__shared_weak_count_vtbl *)v1;
  unsigned int v14 = (void *)MEMORY[0x263EF8330];
  uint64_t v15 = 1174405120;
  CFTypeRef v16 = ___ZN3ice6detail17wrapEventCallbackIZZN4cpms16ARICommandDriver4initEvEUb_E3__1vEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi0EEEOT__block_invoke;
  xpc_object_t v17 = &__block_descriptor_tmp_15_1;
  xpc_object_t v18 = v8 + 1;
  int v19 = v8;
  atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlocunint64_t k = MEMORY[0x263EF8330];
  uint64_t v21 = 0x40000000;
  int v22 = ___ZN3ice6detail17wrapEventCallbackIvEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi0EEEU13block_pointerFT_vE_block_invoke_1;
  int v23 = &unk_264C7D980;
  int v24 = &v14;
  uint64_t v10 = _Block_copy(&aBlock);
  int v11 = v19;
  if (!v19 || atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(v9, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_18;
    }
LABEL_21:
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (v10) {
      goto LABEL_19;
    }
    goto LABEL_22;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  if (!atomic_fetch_add(v9, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_21;
  }
LABEL_18:
  if (v10)
  {
LABEL_19:
    size_t v12 = _Block_copy(v10);
    goto LABEL_23;
  }
LABEL_22:
  size_t v12 = 0;
LABEL_23:
  unsigned int v14 = v12;
  ice::Client::regEventHandlerInternal();
  if (v14) {
    _Block_release(v14);
  }
  if (v10) {
    _Block_release(v10);
  }
  return ice::Client::start(*(ice::Client **)(v1 + 64));
}

void sub_235DE788C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v9) {
    _Block_release(v9);
  }
  _Unwind_Resume(exception_object);
}

void cpms::ARICommandDriver::sendPowerBudget(void *a1, uint64_t a2, uint64_t a3)
{
  aBlock[0] = a1;
  uint64_t v6 = *(void **)a3;
  if (*(void *)a3) {
    uint64_t v6 = _Block_copy(v6);
  }
  uint64_t v7 = *(NSObject **)(a3 + 8);
  aBlock[1] = v6;
  object[0] = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  uint64_t v8 = *(void *)(a2 + 8);
  object[1] = *(dispatch_object_t *)a2;
  *(void *)&long long v25 = v8;
  uint64_t v9 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  *((void *)&v25 + 1) = v9;
  uint64_t v10 = (dispatch_object_t *)(v8 + 16);
  if (v9) {
    int v11 = v10;
  }
  else {
    int v11 = &object[1];
  }
  *int v11 = (dispatch_object_t)&v25;
  *(void *)a2 = a2 + 8;
  size_t v12 = (std::__shared_weak_count *)a1[2];
  if (!v12 || (uint64_t v13 = a1[1], (v14 = std::__shared_weak_count::lock(v12)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v15 = v14;
  CFTypeRef v16 = operator new(0x30uLL);
  xpc_object_t v17 = v16;
  xpc_object_t v18 = v16 + 3;
  long long v19 = *(_OWORD *)object;
  long long v20 = v25;
  _OWORD v16[4] = v25;
  *(_OWORD *)CFTypeRef v16 = *(_OWORD *)aBlock;
  *((_OWORD *)v16 + 1) = v19;
  long long v25 = 0u;
  void v16[5] = *((void *)&v20 + 1);
  if (*((void *)&v20 + 1)) {
    xpc_object_t v18 = (void *)(v20 + 16);
  }
  void *v18 = v16 + 4;
  object[1] = (dispatch_object_t)&v25;
  uint64_t v21 = a1[3];
  atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  int v22 = operator new(0x18uLL);
  void *v22 = v17;
  v22[1] = v13;
  _OWORD v22[2] = v15;
  dispatch_async_f(v21, v22, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<cpms::CommandDriver>::execute_wrapped<cpms::ARICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>(cpms::ARICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<cpms::ARICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,dispatch_queue_s *::default_delete<cpms::ARICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)&object[1], (void *)v25);
  long long v25 = 0uLL;
  object[1] = (dispatch_object_t)&v25;
}

void cpms::ARICommandDriver::registerPowerBudgetIndication(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (!v3 || (uint64_t v5 = a1[1], (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v8 = *(const void **)a2;
    if (*(void *)a2) {
      goto LABEL_5;
    }
LABEL_15:
    uint64_t v9 = 0;
    uint64_t v10 = *(NSObject **)(a2 + 8);
    if (!v10) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v7);
  uint64_t v8 = *(const void **)a2;
  if (!*(void *)a2) {
    goto LABEL_15;
  }
LABEL_5:
  uint64_t v9 = _Block_copy(v8);
  uint64_t v10 = *(NSObject **)(a2 + 8);
  if (v10) {
LABEL_6:
  }
    dispatch_retain(v10);
LABEL_7:
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  int v11 = (std::__shared_weak_count *)a1[2];
  if (!v11 || (uint64_t v12 = a1[1], (v13 = std::__shared_weak_count::lock(v11)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  unsigned int v14 = v13;
  uint64_t v15 = operator new(0x28uLL);
  *uint64_t v15 = a1;
  v15[1] = v9;
  v15[2] = v10;
  v15[3] = v5;
  v15[4] = v7;
  CFTypeRef v16 = a1[3];
  atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v17 = operator new(0x18uLL);
  *xpc_object_t v17 = v15;
  v17[1] = v12;
  v17[2] = v14;
  dispatch_async_f(v16, v17, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<cpms::CommandDriver>::execute_wrapped<cpms::ARICommandDriver::registerPowerBudgetIndication(dispatch::callback<void({block_pointer})(BudgetData)>)::$_0>(cpms::ARICommandDriver::registerPowerBudgetIndication(dispatch::callback<void({block_pointer})(BudgetData)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<cpms::ARICommandDriver::registerPowerBudgetIndication(dispatch::callback<void({block_pointer})(BudgetData)>)::$_0,dispatch_queue_s *::default_delete<cpms::ARICommandDriver::registerPowerBudgetIndication(dispatch::callback<void({block_pointer})(BudgetData)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }

  std::__shared_weak_count::__release_weak(v7);
}

void cpms::ARICommandDriver::getCurrentPower(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (!v3 || (uint64_t v5 = a1[1], (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  p_shared_weak_owners = &v6->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    uint64_t v9 = *(const void **)a2;
    if (*(void *)a2) {
      goto LABEL_5;
    }
LABEL_15:
    uint64_t v10 = 0;
    int v11 = *(NSObject **)(a2 + 8);
    if (!v11) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v7);
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v9 = *(const void **)a2;
  if (!*(void *)a2) {
    goto LABEL_15;
  }
LABEL_5:
  uint64_t v10 = _Block_copy(v9);
  int v11 = *(NSObject **)(a2 + 8);
  if (v11) {
LABEL_6:
  }
    dispatch_retain(v11);
LABEL_7:
  uint64_t v12 = (std::__shared_weak_count *)a1[2];
  if (!v12 || (uint64_t v13 = a1[1], (v14 = std::__shared_weak_count::lock(v12)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v15 = v14;
  CFTypeRef v16 = operator new(0x28uLL);
  *CFTypeRef v16 = a1;
  v16[1] = v5;
  v16[2] = v7;
  v16[3] = v10;
  _OWORD v16[4] = v11;
  xpc_object_t v17 = a1[3];
  atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v18 = operator new(0x18uLL);
  void *v18 = v16;
  v18[1] = v13;
  v18[2] = v15;
  dispatch_async_f(v17, v18, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<cpms::CommandDriver>::execute_wrapped<cpms::ARICommandDriver::getCurrentPower(dispatch::callback<void({block_pointer})(BudgetData)>)::$_0>(cpms::ARICommandDriver::getCurrentPower(dispatch::callback<void({block_pointer})(BudgetData)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<cpms::ARICommandDriver::getCurrentPower(dispatch::callback<void({block_pointer})(BudgetData)>)::$_0,dispatch_queue_s *::default_delete<cpms::ARICommandDriver::getCurrentPower(dispatch::callback<void({block_pointer})(BudgetData)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }

  std::__shared_weak_count::__release_weak(v7);
}

void cpms::ARICommandDriver::enablePowerBudgetIndication(cpms::ARICommandDriver *this, char a2, int a3)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (!v4 || (v7 = *((void *)this + 1), (uint64_t v8 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v9 = v8;
  uint64_t v10 = operator new(0x10uLL);
  *(unsigned char *)uint64_t v10 = a2;
  v10[1] = a3;
  *((void *)v10 + 1) = this;
  int v11 = *((void *)this + 3);
  atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v12 = operator new(0x18uLL);
  *uint64_t v12 = v10;
  v12[1] = v7;
  void v12[2] = v9;
  dispatch_async_f(v11, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<cpms::CommandDriver>::execute_wrapped<cpms::ARICommandDriver::enablePowerBudgetIndication(BOOL,unsigned int)::$_0>(cpms::ARICommandDriver::enablePowerBudgetIndication(BOOL,unsigned int)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<cpms::ARICommandDriver::enablePowerBudgetIndication(BOOL,unsigned int)::$_0,dispatch_queue_s *::default_delete<cpms::ARICommandDriver::enablePowerBudgetIndication(BOOL,unsigned int)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void cpms::ARICommandDriver::queryThermalID(uint64_t a1)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    int v2 = 136315138;
    uint64_t v3 = "virtual void cpms::ARICommandDriver::queryThermalID(QueryThermalIDCallback)";
    _os_log_error_impl(&dword_235DB9000, v1, OS_LOG_TYPE_ERROR, "%s is not implemented!", (uint8_t *)&v2, 0xCu);
  }
}

void cpms::ARICommandDriver::setThermalReportFrequency(uint64_t a1)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    int v2 = 136315138;
    uint64_t v3 = "virtual void cpms::ARICommandDriver::setThermalReportFrequency(ThermalReportVersion, uint32_t, ThermalDataBlock"
         ", utils::Callback)";
    _os_log_error_impl(&dword_235DB9000, v1, OS_LOG_TYPE_ERROR, "%s is not implemented!", (uint8_t *)&v2, 0xCu);
  }
}

void cpms::ARICommandDriver::getPowerMitigation(uint64_t a1)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    int v2 = 136315138;
    uint64_t v3 = "virtual void cpms::ARICommandDriver::getPowerMitigation(QueryPwrMitigationCallback)";
    _os_log_error_impl(&dword_235DB9000, v1, OS_LOG_TYPE_ERROR, "%s is not implemented!", (uint8_t *)&v2, 0xCu);
  }
}

void *std::shared_ptr<cpms::ARICommandDriver>::shared_ptr[abi:ne180100]<cpms::ARICommandDriver,std::shared_ptr<cpms::ARICommandDriver> ctu::SharedSynchronizable<cpms::CommandDriver>::make_shared_ptr<cpms::ARICommandDriver>(cpms::ARICommandDriver*)::{lambda(cpms::ARICommandDriver*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93C788;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 16);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 8) = a2;
      *(void *)(a2 + 16) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 8) = a2;
  *(void *)(a2 + 16) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_235DE827C(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<cpms::ARICommandDriver> ctu::SharedSynchronizable<cpms::CommandDriver>::make_shared_ptr<cpms::ARICommandDriver>(cpms::ARICommandDriver*)::{lambda(cpms::ARICommandDriver*)#1}::operator() const(cpms::ARICommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_235DE82A4(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<cpms::ARICommandDriver *,std::shared_ptr<cpms::ARICommandDriver> ctu::SharedSynchronizable<cpms::CommandDriver>::make_shared_ptr<cpms::ARICommandDriver>(cpms::ARICommandDriver*)::{lambda(cpms::ARICommandDriver *)#1},std::allocator<cpms::ARICommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<cpms::ARICommandDriver *,std::shared_ptr<cpms::ARICommandDriver> ctu::SharedSynchronizable<cpms::CommandDriver>::make_shared_ptr<cpms::ARICommandDriver>(cpms::ARICommandDriver*)::{lambda(cpms::ARICommandDriver *)#1},std::allocator<cpms::ARICommandDriver>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<cpms::ARICommandDriver *,std::shared_ptr<cpms::ARICommandDriver> ctu::SharedSynchronizable<cpms::CommandDriver>::make_shared_ptr<cpms::ARICommandDriver>(cpms::ARICommandDriver*)::{lambda(cpms::ARICommandDriver *)#1},std::allocator<cpms::ARICommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN4cpms13CommandDriverEE15make_shared_ptrINS1_16ARICommandDriverEEENSt3"
                     "__110shared_ptrIT_EEPS8_EUlPS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN4cpms13CommandDriverEE15make_shared_ptrINS1_16ARICommandDr"
                                "iverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN4cpms13CommandDriverEE15make_shared_ptrINS1_16ARICommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN4cpms13CommandDriverEE15make_shared_ptrINS1_16ARICommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<cpms::ARICommandDriver> ctu::SharedSynchronizable<cpms::CommandDriver>::make_shared_ptr<cpms::ARICommandDriver>(cpms::ARICommandDriver*)::{lambda(cpms::ARICommandDriver*)#1}::operator() const(cpms::ARICommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

void ___ZN3ice6detail17wrapEventCallbackIZZN4cpms16ARICommandDriver4initEvEUb_E3__0vEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi0EEEOT__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    int v2 = *(NSObject **)(*(void *)v1 + 40);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)unint64_t v3 = 0;
      _os_log_debug_impl(&dword_235DB9000, v2, OS_LOG_TYPE_DEBUG, "#D Started", v3, 2u);
    }
  }
}

uint64_t __copy_helper_block_e8_32c68_ZTSNSt3__110shared_ptrIZZN4cpms16ARICommandDriver4initEvEUb_E3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c68_ZTSNSt3__110shared_ptrIZZN4cpms16ARICommandDriver4initEvEUb_E3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void _ZNSt3__120__shared_ptr_emplaceIZZN4cpms16ARICommandDriver4initEvEUb_E3__0NS_9allocatorIS3_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93C808;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN4cpms16ARICommandDriver4initEvEUb_E3__0NS_9allocatorIS3_EEED0Ev(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93C808;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t ___ZN3ice6detail17wrapEventCallbackIvEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi0EEEU13block_pointerFT_vE_block_invoke_1(uint64_t a1)
{
  return 0;
}

void ___ZN3ice6detail17wrapEventCallbackIZZN4cpms16ARICommandDriver4initEvEUb_E3__1vEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi0EEEOT__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = *(NSObject **)(*(void *)v1 + 40);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)unint64_t v3 = 0;
      _os_log_debug_impl(&dword_235DB9000, v2, OS_LOG_TYPE_DEBUG, "#D Stopped", v3, 2u);
    }
  }
}

uint64_t __copy_helper_block_e8_32c68_ZTSNSt3__110shared_ptrIZZN4cpms16ARICommandDriver4initEvEUb_E3__1EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c68_ZTSNSt3__110shared_ptrIZZN4cpms16ARICommandDriver4initEvEUb_E3__1EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void _ZNSt3__120__shared_ptr_emplaceIZZN4cpms16ARICommandDriver4initEvEUb_E3__1NS_9allocatorIS3_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93C888;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN4cpms16ARICommandDriver4initEvEUb_E3__1NS_9allocatorIS3_EEED0Ev(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93C888;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void ctu::SharedSynchronizable<cpms::CommandDriver>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  uint64_t v8 = a1[2];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN4cpms13CommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_26E93C8D0;
  block[5] = v5;
  uint64_t v12 = v7;
  p_shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = a2;
  dispatch_async(v8, block);
  uint64_t v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN4cpms13CommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c49_ZTSNSt3__110shared_ptrIKN4cpms13CommandDriverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c49_ZTSNSt3__110shared_ptrIKN4cpms13CommandDriverEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<cpms::CommandDriver>::execute_wrapped<cpms::ARICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>(cpms::ARICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<cpms::ARICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,dispatch_queue_s *::default_delete<cpms::ARICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v41[0] = v3;
  v41[1] = v3;
  v39[3] = v3;
  *(_OWORD *)long long __p = v3;
  v39[1] = v3;
  v39[2] = v3;
  v39[0] = v3;
  AriSdk::ARI_CsiIceCltmReq_SDK::ARI_CsiIceCltmReq_SDK((AriSdk::ARI_CsiIceCltmReq_SDK *)v39);
  uint64_t v4 = operator new(4uLL);
  _DWORD *v4 = 0x7FFF;
  uint64_t v5 = __p[0];
  __p[0] = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = operator new(4uLL);
  _DWORD *v6 = 0x7FFF;
  uint64_t v7 = __p[1];
  __p[1] = v6;
  if (v7) {
    operator delete(v7);
  }
  uint64_t v38 = 0;
  int v37 = 0;
  uint64_t v56 = 0;
  uint64_t v8 = (void (***)(void))operator new(0x20uLL);
  uint64_t v9 = (void (**)(void))&unk_26E93C910;
  *uint64_t v8 = (void (**)(void))&unk_26E93C910;
  v8[1] = (void (**)(void))&v38;
  v8[2] = (void (**)(void))v39;
  v8[3] = (void (**)(void))&v37;
  uint64_t v56 = v8;
  uint64_t v10 = (uint64_t *)v1[3];
  int v11 = v1 + 4;
  if (v10 == v1 + 4) {
    goto LABEL_19;
  }
  do
  {
    if (!v56) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    if (!((unsigned int (*)(void (***)(void), uint64_t, uint64_t *))(*v56)[6])(v56, (uint64_t)v10 + 28, v10 + 4))break; {
    uint64_t v13 = (uint64_t *)v10[1];
    }
    if (v13)
    {
      do
      {
        unsigned int v14 = v13;
        uint64_t v13 = (uint64_t *)*v13;
      }
      while (v13);
    }
    else
    {
      do
      {
        unsigned int v14 = (uint64_t *)v10[2];
        BOOL v15 = *v14 == (void)v10;
        uint64_t v10 = v14;
      }
      while (!v15);
    }
    uint64_t v10 = v14;
  }
  while (v14 != v11);
  if (v56 == v55)
  {
    (*(void (**)(void *))(v55[0] + 32))(v55);
    if (v37 > 4) {
      goto LABEL_23;
    }
    goto LABEL_21;
  }
  if (v56)
  {
    uint64_t v9 = *v56;
LABEL_19:
    v9[5]();
  }
  if (v37 > 4) {
    goto LABEL_23;
  }
LABEL_21:
  int v16 = 0;
  do
  {
    uint64_t v38 = 0;
    AriSdk::TlvArray<IBI_CPMS_POWER_BUDGET,5ul>::emplace_back<IBI_CPMS_POWER_BUDGET&>((char **)v41 + 1, 0, v12);
    ++v16;
  }
  while (v16 < 5 - v37);
LABEL_23:
  uint64_t v17 = *(void *)(v2 + 64);
  xpc_object_t v18 = *(std::__shared_weak_count **)(v2 + 72);
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v19 = (const void *)v1[1];
  if (v19)
  {
    long long v20 = _Block_copy(v19);
    uint64_t v21 = v1[2];
    if (!v21) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  long long v20 = 0;
  uint64_t v21 = v1[2];
  if (v21) {
LABEL_27:
  }
    dispatch_retain(v21);
LABEL_28:
  strcpy(v42, "Send power budget");
  *(_DWORD *)&v42[18] = v35;
  v42[22] = v36;
  v42[23] = 17;
  long long v33 = v20;
  if (!v20)
  {
    int v22 = 0;
    CFTypeRef v43 = 0;
    dispatch_object_t v44 = v21;
    if (!v21) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  int v22 = (std::__shared_weak_count_vtbl *)_Block_copy(v20);
  CFTypeRef v43 = v22;
  dispatch_object_t v44 = v21;
  if (v21) {
LABEL_30:
  }
    dispatch_retain(v21);
LABEL_31:
  int v23 = (std::__shared_weak_count *)operator new(0x40uLL);
  v23->__shared_owners_ = 0;
  p_shared_owners = &v23->__shared_owners_;
  v23->__shared_weak_owners_ = 0;
  v23->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93C9D0;
  v23[1].std::__shared_count = *(std::__shared_count *)v42;
  *(void *)uint64_t v42 = 0;
  *(void *)&v42[8] = 0;
  v23[1].__shared_weak_owners_ = *(void *)&v42[16];
  v23[2].__vftable = v22;
  v23[2].__shared_owners_ = (uint64_t)v21;
  CFTypeRef v43 = 0;
  dispatch_object_t v44 = 0;
  *(void *)&v42[16] = 0;
  *(void *)&long long v46 = MEMORY[0x263EF8330];
  *((void *)&v46 + 1) = 1174405120;
  *(void *)&long long v47 = ___ZN3ice6detail12wrapCallbackIZN5utils7sendMsgIN6AriSdk23ARI_CsiIceCltmRspCb_SDKEEEvNSt3__110shared_ptrINS_6ClientEEERNS4_7MsgBaseENS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUlPKhjE_vEENSI_5blockIU13block_pointerFiPhjEEENS6_17integral_constantIiLi2EEEOT__block_invoke;
  *((void *)&v47 + 1) = &__block_descriptor_tmp_32_1;
  unint64_t v48 = (unint64_t)&v23[1];
  __int16 v49 = v23;
  atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlocunint64_t k = MEMORY[0x263EF8330];
  uint64_t v51 = 0x40000000;
  long long v52 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_2;
  unint64_t v53 = &unk_264C7D9A8;
  unint64_t v54 = &v46;
  long long v25 = _Block_copy(&aBlock);
  uint64_t v26 = v49;
  if (!v49 || atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_35;
    }
    goto LABEL_34;
  }
  ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
  std::__shared_weak_count::__release_weak(v26);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_34:
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
LABEL_35:
  *(void *)&long long v27 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v27 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v46 = v27;
  long long v47 = v27;
  unint64_t v48 = 0xAAAAAAAAAAAAAAAALL;
  CFTypeRef v28 = *(std::__shared_weak_count **)(v17 + 16);
  aBlocunint64_t k = *(void *)(v17 + 8);
  if (!v28)
  {
    uint64_t v51 = 0;
LABEL_73:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v51 = (uint64_t)std::__shared_weak_count::lock(v28);
  if (!v51) {
    goto LABEL_73;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  CFTypeRef v29 = (std::__shared_weak_count *)v51;
  if (v51 && !atomic_fetch_add((atomic_ullong *volatile)(v51 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
  size_t v45 = v25;
  ice::SendMsgBaseProxy::callback();
  if (v45) {
    _Block_release(v45);
  }
  MEMORY[0x237DF50B0](&v46);
  if (v44) {
    dispatch_release(v44);
  }
  if (v43) {
    _Block_release(v43);
  }
  if ((v42[23] & 0x80000000) != 0) {
    operator delete(*(void **)v42);
  }
  if (v21) {
    dispatch_release(v21);
  }
  if (v33) {
    _Block_release(v33);
  }
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  MEMORY[0x237DF5290](v39);
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)(v1 + 3), (void *)v1[4]);
  v1[4] = 0;
  void v1[5] = 0;
  v1[3] = (uint64_t)v11;
  CFTypeRef v30 = v1[2];
  if (v30) {
    dispatch_release(v30);
  }
  uint64_t v31 = (const void *)v1[1];
  if (v31) {
    _Block_release(v31);
  }
  operator delete(v1);
  unint64_t v32 = (std::__shared_weak_count *)a1[2];
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
  operator delete(a1);
}

void sub_235DE8F60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void AriSdk::TlvArray<IBI_CPMS_POWER_BUDGET,5ul>::emplace_back<IBI_CPMS_POWER_BUDGET&>(char **a1, uint64_t a2, const char *a3)
{
  uint64_t v4 = *a1;
  long long v3 = a1[1];
  uint64_t v5 = v3 - *a1;
  if ((unint64_t)v5 >= 0x28)
  {
    AriOsa::LogSrcInfo((uint64_t *)__p, (AriOsa *)"/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/ARI/ari_sdk_msg.h", "emplace_back", a3);
    if (v31 >= 0) {
      int v11 = __p;
    }
    else {
      int v11 = (void **)__p[0];
    }
    Ari::Log((Ari *)8, (uint64_t)"(%s:%d) Array is full, cannot add new values", v10, v11, 371);
    if (v31 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    unint64_t v8 = (unint64_t)a1[2];
    if ((unint64_t)v3 >= v8)
    {
      uint64_t v12 = v5 >> 3;
      uint64_t v13 = v8 - (void)v4;
      if (v13 >> 2 <= (unint64_t)((v5 >> 3) + 1)) {
        uint64_t v14 = v12 + 1;
      }
      else {
        uint64_t v14 = v13 >> 2;
      }
      BOOL v15 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8;
      unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v15) {
        unint64_t v16 = v14;
      }
      if (v16 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v17 = 8 * v16;
      xpc_object_t v18 = operator new(8 * v16);
      long long v19 = &v18[8 * v12];
      long long v20 = &v18[v17];
      *(void *)long long v19 = a2;
      uint64_t v9 = v19 + 8;
      if (v3 != v4)
      {
        unint64_t v21 = v3 - v4 - 8;
        if (v21 < 0x58) {
          goto LABEL_30;
        }
        if ((unint64_t)(&v3[-(v5 & 0xFFFFFFFFFFFFFFF8)] - v18) < 0x20) {
          goto LABEL_30;
        }
        uint64_t v22 = (v21 >> 3) + 1;
        uint64_t v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
        int v24 = &v3[-v23];
        v19 -= v23;
        long long v25 = &v18[8 * v12 - 16];
        uint64_t v26 = v3 - 16;
        uint64_t v27 = v22 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          *long long v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        long long v3 = v24;
        if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_30:
          do
          {
            uint64_t v29 = *((void *)v3 - 1);
            v3 -= 8;
            *((void *)v19 - 1) = v29;
            v19 -= 8;
          }
          while (v3 != v4);
        }
        long long v3 = v4;
      }
      *a1 = v19;
      a1[1] = v9;
      a1[2] = v20;
      if (v3) {
        operator delete(v3);
      }
    }
    else
    {
      *(void *)long long v3 = a2;
      uint64_t v9 = v3 + 8;
    }
    a1[1] = v9;
  }
}

void sub_235DE9334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__function::__func<cpms::ARICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::operator() const(void)::{lambda(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)#1},std::allocator<cpms::ARICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::operator() const(void)::{lambda(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)#1}>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26E93C910;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<cpms::ARICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::operator() const(void)::{lambda(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)#1},std::allocator<cpms::ARICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::operator() const(void)::{lambda(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)#1}>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26E93C910;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<cpms::ARICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::operator() const(void)::{lambda(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)#1},std::allocator<cpms::ARICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::operator() const(void)::{lambda(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)#1}>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::operator()(uint64_t a1, unsigned char *a2, const char *a3)
{
  if (a3[4])
  {
    int v4 = *(_DWORD *)a3;
    int v5 = *a2;
    if (v5 == 2)
    {
      uint64_t v6 = *(void *)(a1 + 8);
      int v7 = 3;
      goto LABEL_8;
    }
    if (v5 == 1)
    {
      uint64_t v6 = *(void *)(a1 + 8);
      int v7 = 2;
      goto LABEL_8;
    }
    if (!*a2)
    {
      uint64_t v6 = *(void *)(a1 + 8);
      int v7 = 1;
LABEL_8:
      *(_DWORD *)uint64_t v6 = v7;
      *(_DWORD *)(v6 + 4) = v4;
      AriSdk::TlvArray<IBI_CPMS_POWER_BUDGET,5ul>::emplace_back<IBI_CPMS_POWER_BUDGET&>((char **)(*(void *)(a1 + 16) + 88), *(void *)v6, a3);
      ++**(_DWORD **)(a1 + 24);
    }
  }
  return 1;
}

uint64_t std::__function::__func<cpms::ARICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::operator() const(void)::{lambda(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)#1},std::allocator<cpms::ARICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::operator() const(void)::{lambda(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)#1}>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZZN4cpms16ARICommandDriver15sendPowerBudgetE10BudgetDataN8dispatch8callbackIU13block_pointerFvN3ctu"
                     "2cf11CFSharedRefI9__CFErrorEEEEEENK3$_0clEvEUlRKN3abm28BasebandCPMSPowerBudgetScaleERKNSt3__18optionalIjEEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZN4cpms16ARICommandDriver15sendPowerBudgetE10BudgetDataN8dispatch8callbackIU13block_poi"
                                "nterFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEENK3$_0clEvEUlRKN3abm28BasebandCPMSPowerBudge"
                                "tScaleERKNSt3__18optionalIjEEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN4cpms16ARICommandDriver15sendPowerBudgetE10BudgetDataN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEENK3$_0clEvEUlRKN3abm28BasebandCPMSPowerBudgetScaleERKNSt3__18optionalIjEEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN4cpms16ARICommandDriver15sendPowerBudgetE10BudgetDataN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEENK3$_0clEvEUlRKN3abm28BasebandCPMSPowerBudgetScaleERKNSt3__18optionalIjEEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<cpms::ARICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::operator() const(void)::{lambda(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)#1},std::allocator<cpms::ARICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::operator() const(void)::{lambda(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)#1}>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::target_type()
{
}

uint64_t utils::sendMsg<AriSdk::ARI_CsiIceCltmRspCb_SDK>(std::shared_ptr<ice::Client>,AriSdk::MsgBase &,std::string,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::{lambda(unsigned char const*,unsigned int)#1}::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 32);
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = *(const void **)(a1 + 24);
  if (v3) {
    _Block_release(v3);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t ___ZN3ice6detail12wrapCallbackIZN5utils7sendMsgIN6AriSdk23ARI_CsiIceCltmRspCb_SDKEEEvNSt3__110shared_ptrINS_6ClientEEERNS4_7MsgBaseENS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUlPKhjE_vEENSI_5blockIU13block_pointerFiPhjEEENS6_17integral_constantIiLi2EEEOT__block_invoke(uint64_t result, const unsigned __int8 *a2)
{
  uint64_t v2 = *(void *)(result + 32);
  if (v2)
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v9[2] = v3;
    v9[3] = v3;
    v9[0] = v3;
    v9[1] = v3;
    AriSdk::ARI_CsiIceCltmRspCb_SDK::ARI_CsiIceCltmRspCb_SDK((AriSdk::ARI_CsiIceCltmRspCb_SDK *)v9, a2);
    if (!*(void *)(v2 + 24) || !*(void *)(v2 + 32)) {
      return MEMORY[0x237DF5400](v9);
    }
    CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
    checkError((AriSdk::MsgBase *)v9, v2, &cf);
    CFTypeRef v4 = cf;
    if (cf) {
      CFRetain(cf);
    }
    int v5 = *(const void **)(v2 + 24);
    if (v5) {
      uint64_t v6 = _Block_copy(v5);
    }
    else {
      uint64_t v6 = 0;
    }
    int v7 = *(NSObject **)(v2 + 32);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_0;
    block[3] = &__block_descriptor_tmp_36_0;
    if (v6)
    {
      uint64_t v12 = _Block_copy(v6);
      CFTypeRef v13 = v4;
      if (!v4) {
        goto LABEL_14;
      }
    }
    else
    {
      uint64_t v12 = 0;
      CFTypeRef v13 = v4;
      if (!v4)
      {
LABEL_14:
        dispatch_async(v7, block);
        if (v13) {
          CFRelease(v13);
        }
        if (v12) {
          _Block_release(v12);
        }
        if (v6) {
          _Block_release(v6);
        }
        if (v4) {
          CFRelease(v4);
        }
        if (cf) {
          CFRelease(cf);
        }
        return MEMORY[0x237DF5400](v9);
      }
    }
    CFRetain(v4);
    goto LABEL_14;
  }
  return result;
}

uint64_t __copy_helper_block_e8_32c256_ZTSNSt3__110shared_ptrIZN5utils7sendMsgIN6AriSdk23ARI_CsiIceCltmRspCb_SDKEEEvNS0_IN3ice6ClientEEERNS3_7MsgBaseENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUlPKhjE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c256_ZTSNSt3__110shared_ptrIZN5utils7sendMsgIN6AriSdk23ARI_CsiIceCltmRspCb_SDKEEEvNS0_IN3ice6ClientEEERNS3_7MsgBaseENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUlPKhjE_EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<void utils::sendMsg<AriSdk::ARI_CsiIceCltmRspCb_SDK>(std::shared_ptr<ice::Client>,AriSdk::MsgBase &,std::string,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void utils::sendMsg<AriSdk::ARI_CsiIceCltmRspCb_SDK>(std::shared_ptr<ice::Client>,AriSdk::MsgBase &,std::string,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93C9D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<void utils::sendMsg<AriSdk::ARI_CsiIceCltmRspCb_SDK>(std::shared_ptr<ice::Client>,AriSdk::MsgBase &,std::string,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void utils::sendMsg<AriSdk::ARI_CsiIceCltmRspCb_SDK>(std::shared_ptr<ice::Client>,AriSdk::MsgBase &,std::string,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93C9D0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<void utils::sendMsg<AriSdk::ARI_CsiIceCltmRspCb_SDK>(std::shared_ptr<ice::Client>,AriSdk::MsgBase &,std::string,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void utils::sendMsg<AriSdk::ARI_CsiIceCltmRspCb_SDK>(std::shared_ptr<ice::Client>,AriSdk::MsgBase &,std::string,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 56);
  if (v2) {
    dispatch_release(v2);
  }
  long long v3 = *(const void **)(a1 + 48);
  if (v3) {
    _Block_release(v3);
  }
  if (*(char *)(a1 + 47) < 0)
  {
    CFTypeRef v4 = *(void **)(a1 + 24);
    operator delete(v4);
  }
}

uint64_t ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_2(uint64_t a1)
{
  return 0;
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v1 = *(const void **)(a1 + 40);
  CFTypeRef cf = v1;
  if (v1) {
    CFRetain(v1);
  }
  (*(void (**)(uint64_t, CFTypeRef *))(v2 + 16))(v2, &cf);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_235DE98D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void dispatch::async<void ctu::SharedSynchronizable<cpms::CommandDriver>::execute_wrapped<cpms::ARICommandDriver::registerPowerBudgetIndication(dispatch::callback<void({block_pointer})(BudgetData)>)::$_0>(cpms::ARICommandDriver::registerPowerBudgetIndication(dispatch::callback<void({block_pointer})(BudgetData)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<cpms::ARICommandDriver::registerPowerBudgetIndication(dispatch::callback<void({block_pointer})(BudgetData)>)::$_0,dispatch_queue_s *::default_delete<cpms::ARICommandDriver::registerPowerBudgetIndication(dispatch::callback<void({block_pointer})(BudgetData)>)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v2 = (void *)*a1;
  CFTypeRef v4 = *(void **)*a1;
  long long v3 = *(void **)(*a1 + 8);
  if (v3) {
    long long v3 = _Block_copy(v3);
  }
  int v5 = (const void *)v4[10];
  v4[10] = v3;
  if (v5) {
    _Block_release(v5);
  }
  uint64_t v6 = v2[2];
  if (v6) {
    dispatch_retain((dispatch_object_t)v2[2]);
  }
  int v7 = v4[11];
  v4[11] = v6;
  if (v7) {
    dispatch_release(v7);
  }
  if (v4[10] && v4[11])
  {
    uint64_t v8 = v4[8];
    v14[0] = MEMORY[0x263EF8330];
    v14[1] = 1174405120;
    v14[2] = ___ZZN4cpms16ARICommandDriver29registerPowerBudgetIndicationEN8dispatch8callbackIU13block_pointerFv10BudgetDataEEEENK3__0clEv_block_invoke;
    v14[3] = &__block_descriptor_tmp_38_0;
    _OWORD v14[4] = v4;
    uint64_t v14[5] = v2[3];
    uint64_t v9 = (std::__shared_weak_count *)v2[4];
    BOOL v15 = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v16 = v14;
    ice::Client::regIndication<void({block_pointer})(unsigned char *,unsigned int)>(v8, 1031962624, (uint64_t *)&v16);
    if (v15) {
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  unint64_t v10 = (std::__shared_weak_count *)v2[4];
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  int v11 = v2[2];
  if (v11) {
    dispatch_release(v11);
  }
  uint64_t v12 = (const void *)v2[1];
  if (v12) {
    _Block_release(v12);
  }
  operator delete(v2);
  CFTypeRef v13 = (std::__shared_weak_count *)a1[2];
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  operator delete(a1);
}

void sub_235DE9A78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    xpc_object_t v18 = (std::__shared_weak_count *)v16[4];
    if (!v18)
    {
LABEL_3:
      long long v19 = v16[2];
      if (!v19) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    xpc_object_t v18 = (std::__shared_weak_count *)v16[4];
    if (!v18) {
      goto LABEL_3;
    }
  }
  std::__shared_weak_count::__release_weak(v18);
  long long v19 = v16[2];
  if (!v19)
  {
LABEL_4:
    long long v20 = (const void *)v16[1];
    if (!v20)
    {
LABEL_10:
      operator delete(v16);
      unint64_t v21 = (std::__shared_weak_count *)v15[2];
      if (v21)
      {
        if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      operator delete(v15);
      _Unwind_Resume(a1);
    }
LABEL_9:
    _Block_release(v20);
    goto LABEL_10;
  }
LABEL_8:
  dispatch_release(v19);
  long long v20 = (const void *)v16[1];
  if (!v20) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void ___ZZN4cpms16ARICommandDriver29registerPowerBudgetIndicationEN8dispatch8callbackIU13block_pointerFv10BudgetDataEEEENK3__0clEv_block_invoke(void *a1, const unsigned __int8 *a2)
{
  long long v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      int v7 = v6;
      uint64_t v8 = a1[5];
      if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (!v8) {
          return;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8) {
          return;
        }
      }
      *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
      _OWORD v22[4] = v9;
      long long v23 = v9;
      _OWORD v22[2] = v9;
      v22[3] = v9;
      v22[0] = v9;
      v22[1] = v9;
      AriSdk::ARI_IBICpsMaxCellularPowerForRatInd_SDK::ARI_IBICpsMaxCellularPowerForRatInd_SDK((AriSdk::ARI_IBICpsMaxCellularPowerForRatInd_SDK *)v22, a2);
      if (!AriSdk::ARI_IBICpsMaxCellularPowerForRatInd_SDK::unpack((AriSdk::ARI_IBICpsMaxCellularPowerForRatInd_SDK *)v22)
        && *(void *)(v5 + 80)
        && *(void *)(v5 + 88))
      {
        int v10 = **((_DWORD **)&v23 + 1);
        long long v20 = 0;
        uint64_t v21 = 0;
        int v11 = operator new(0x28uLL);
        v11[28] = 0;
        v11[32] = 0;
        v11[36] = 0;
        *(void *)int v11 = 0;
        *((void *)v11 + 1) = 0;
        *((void *)v11 + 2) = &v20;
        long long v19 = v11;
        long long v20 = v11;
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v11, (uint64_t *)v11);
        ++v21;
        *((_DWORD *)v11 + 8) = v10;
        v11[36] = 1;
        uint64_t v17 = 0;
        uint64_t v18 = 0;
        unint64_t v16 = &v17;
        std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&v16, v11, &v20);
        uint64_t v12 = *(const void **)(v5 + 80);
        if (v12) {
          CFTypeRef v13 = _Block_copy(v12);
        }
        else {
          CFTypeRef v13 = 0;
        }
        uint64_t v14 = *(NSObject **)(v5 + 88);
        block[0] = MEMORY[0x263EF8330];
        block[1] = 1174405120;
        block[2] = ___ZNK8dispatch8callbackIU13block_pointerFv10BudgetDataEEclIJS1_EEEvDpT__block_invoke;
        block[3] = &__block_descriptor_tmp_39_0;
        if (v13) {
          BOOL v15 = _Block_copy(v13);
        }
        else {
          BOOL v15 = 0;
        }
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        long long v25 = v15;
        uint64_t v26 = &v27;
        std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&v26, v16, &v17);
        dispatch_async(v14, block);
        std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)&v26, v27);
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        uint64_t v26 = &v27;
        if (v25) {
          _Block_release(v25);
        }
        if (v13) {
          _Block_release(v13);
        }
        std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)&v16, v17);
        uint64_t v17 = 0;
        uint64_t v18 = 0;
        unint64_t v16 = &v17;
        std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)&v19, v20);
      }
      MEMORY[0x237DF6A00](v22);
    }
  }
}

void sub_235DE9DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, char a12, void *a13, uint64_t a14, char a15)
{
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(v16, *(void **)(v17 - 64));
  long long v19 = *(const void **)(v17 - 80);
  if (v19) {
    _Block_release(v19);
  }
  if (v15) {
    _Block_release(v15);
  }
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)&a9, a10);
  a10 = 0;
  a11 = 0;
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)&a12, a13);
  MEMORY[0x237DF6A00](&a15);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrIN4cpms13CommandDriverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrIN4cpms13CommandDriverEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZNK8dispatch8callbackIU13block_pointerFv10BudgetDataEEclIJS1_EEEvDpT__block_invoke(void *a1)
{
  uint64_t v1 = a1[4];
  v3[0] = 0;
  v3[1] = 0;
  uint64_t v2 = v3;
  if (&v2 != a1 + 5) {
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&v2, (void *)a1[5], a1 + 6);
  }
  (*(void (**)(uint64_t, void ***))(v1 + 16))(v1, &v2);
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)&v2, v3[0]);
}

void sub_235DE9EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

void sub_235DE9EFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

void __copy_helper_block_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFv10BudgetDataEEE40c16_ZTS10BudgetData(void *a1, uint64_t a2)
{
  CFTypeRef v4 = *(void **)(a2 + 32);
  if (v4) {
    CFTypeRef v4 = _Block_copy(v4);
  }
  a1[6] = 0;
  a1[4] = v4;
  a1[5] = a1 + 6;
  a1[7] = 0;
  if (a1 != (void *)a2) {
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)(a1 + 5), *(void **)(a2 + 40), (void *)(a2 + 48));
  }
}

void sub_235DE9F7C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(v2, *(void **)(v1 + 48));
  CFTypeRef v4 = *(const void **)(v1 + 32);
  if (v4) {
    _Block_release(v4);
  }
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFv10BudgetDataEEE40c16_ZTS10BudgetData(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 48);
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(a1 + 40, *(void **)(a1 + 48));
  *(v1 - 1) = v1;
  *uint64_t v1 = 0;
  v1[1] = 0;
  uint64_t v2 = (const void *)*(v1 - 2);
  if (v2) {
    _Block_release(v2);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<cpms::CommandDriver>::execute_wrapped<cpms::ARICommandDriver::getCurrentPower(dispatch::callback<void({block_pointer})(BudgetData)>)::$_0>(cpms::ARICommandDriver::getCurrentPower(dispatch::callback<void({block_pointer})(BudgetData)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<cpms::ARICommandDriver::getCurrentPower(dispatch::callback<void({block_pointer})(BudgetData)>)::$_0,dispatch_queue_s *::default_delete<cpms::ARICommandDriver::getCurrentPower(dispatch::callback<void({block_pointer})(BudgetData)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  _OWORD v22[2] = v4;
  v22[3] = v4;
  v22[0] = v4;
  v22[1] = v4;
  AriSdk::ARI_IBICPMSPowerQueryReq_SDK::ARI_IBICPMSPowerQueryReq_SDK((AriSdk::ARI_IBICPMSPowerQueryReq_SDK *)v22);
  uint64_t v5 = *(void *)(v3 + 64);
  int v7 = (std::__shared_weak_count_vtbl *)v2[1];
  uint64_t v6 = v2[2];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (const void *)v2[3];
  if (!v8)
  {
    long long v9 = 0;
    int v10 = v2[4];
    if (!v10) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  long long v9 = (std::__shared_weak_count_vtbl *)_Block_copy(v8);
  int v10 = v2[4];
  if (v10) {
LABEL_5:
  }
    dispatch_retain(v10);
LABEL_6:
  int v11 = (std::__shared_weak_count *)operator new(0x40uLL);
  v11->__shared_owners_ = 0;
  p_shared_owners = &v11->__shared_owners_;
  v11->__shared_weak_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93CAE0;
  v11[1].__vftable = v7;
  v11[1].__shared_owners_ = v6;
  v11[1].__shared_weak_owners_ = v3;
  v11[2].__vftable = v9;
  v11[2].__shared_owners_ = (uint64_t)v10;
  *(void *)&long long v24 = MEMORY[0x263EF8330];
  *((void *)&v24 + 1) = 1174405120;
  *(void *)&long long v25 = ___ZN3ice6detail12wrapCallbackIZZN4cpms16ARICommandDriver15getCurrentPowerEN8dispatch8callbackIU13block_pointerFv10BudgetDataEEEENK3__0clEvEUlPKhjE_vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  *((void *)&v25 + 1) = &__block_descriptor_tmp_40_1;
  unint64_t v26 = (unint64_t)&v11[1];
  uint64_t v27 = v11;
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlocunint64_t k = MEMORY[0x263EF8330];
  uint64_t v29 = 0x40000000;
  CFTypeRef v30 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_2;
  char v31 = &unk_264C7D9A8;
  unint64_t v32 = &v24;
  CFTypeRef v13 = _Block_copy(&aBlock);
  uint64_t v14 = v27;
  if (!v27 || atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_9:
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_10:
  *(void *)&long long v15 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v24 = v15;
  long long v25 = v15;
  unint64_t v26 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v16 = *(std::__shared_weak_count **)(v5 + 16);
  aBlocunint64_t k = *(void *)(v5 + 8);
  if (!v16)
  {
    uint64_t v29 = 0;
LABEL_32:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v29 = (uint64_t)std::__shared_weak_count::lock(v16);
  if (!v29) {
    goto LABEL_32;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  uint64_t v17 = (std::__shared_weak_count *)v29;
  if (v29 && !atomic_fetch_add((atomic_ullong *volatile)(v29 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  long long v23 = v13;
  ice::SendMsgBaseProxy::callback();
  if (v23) {
    _Block_release(v23);
  }
  MEMORY[0x237DF50B0](&v24);
  MEMORY[0x237DF5C60](v22);
  uint64_t v18 = v2[4];
  if (v18) {
    dispatch_release(v18);
  }
  long long v19 = (const void *)v2[3];
  if (v19) {
    _Block_release(v19);
  }
  long long v20 = (std::__shared_weak_count *)v2[2];
  if (v20) {
    std::__shared_weak_count::__release_weak(v20);
  }
  operator delete(v2);
  uint64_t v21 = (std::__shared_weak_count *)a1[2];
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  operator delete(a1);
}

void sub_235DEA354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *aBlock, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  MEMORY[0x237DF50B0](&a19);
  MEMORY[0x237DF5C60](&a9);
  uint64_t v29 = v27[4];
  if (v29) {
    dispatch_release(v29);
  }
  CFTypeRef v30 = (const void *)v27[3];
  if (v30) {
    _Block_release(v30);
  }
  char v31 = (std::__shared_weak_count *)v27[2];
  if (v31) {
    std::__shared_weak_count::__release_weak(v31);
  }
  operator delete(v27);
  unint64_t v32 = (std::__shared_weak_count *)v26[2];
  if (v32)
  {
    if (!atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  operator delete(v26);
  _Unwind_Resume(a1);
}

void ___ZN3ice6detail12wrapCallbackIZZN4cpms16ARICommandDriver15getCurrentPowerEN8dispatch8callbackIU13block_pointerFv10BudgetDataEEEENK3__0clEvEUlPKhjE_vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      uint64_t v5 = v2[2];
      uint64_t v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        int v7 = v6;
        uint64_t v8 = *v2;
        if (atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          if (!v8) {
            return;
          }
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v7);
          if (!v8) {
            return;
          }
        }
        unint64_t v29 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v28 = v9;
        _OWORD v27[2] = v9;
        v27[3] = v9;
        v27[0] = v9;
        v27[1] = v9;
        AriSdk::ARI_IBICPMSPowerQueryRspCb_SDK::ARI_IBICPMSPowerQueryRspCb_SDK((AriSdk::ARI_IBICPMSPowerQueryRspCb_SDK *)v27, a2);
        memset(&v26, 170, sizeof(v26));
        *(void *)long long buf = operator new(0x20uLL);
        *(_OWORD *)&uint8_t buf[8] = xmmword_235E71980;
        strcpy(*(char **)buf, "Failed to get current power");
        checkErrorStr((AriSdk::MsgBase *)v27, (uint64_t)buf, (uint64_t)&v26);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        v25[0] = 0;
        v25[1] = 0;
        long long v24 = v25;
        std::string::size_type size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
        int v11 = SHIBYTE(v26.__r_.__value_.__r.__words[2]);
        if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v26.__r_.__value_.__l.__size_;
        }
        if (size)
        {
          uint64_t v12 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            CFTypeRef v13 = (std::string *)v26.__r_.__value_.__r.__words[0];
            if (v11 >= 0) {
              CFTypeRef v13 = &v26;
            }
            *(_DWORD *)long long buf = 136315138;
            *(void *)&uint8_t buf[4] = v13;
            _os_log_error_impl(&dword_235DB9000, v12, OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
          }
        }
        else
        {
          int v14 = AriSdk::ARI_IBICPMSPowerQueryRspCb_SDK::unpack((AriSdk::ARI_IBICPMSPowerQueryRspCb_SDK *)v27);
          if (v14)
          {
            long long v15 = *(NSObject **)(v5 + 40);
            if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long buf = 67109120;
              *(_DWORD *)&uint8_t buf[4] = v14;
              _os_log_error_impl(&dword_235DB9000, v15, OS_LOG_TYPE_ERROR, "Failed to unpack query current power response: unpackResult = %d", buf, 8u);
            }
            std::string::__assign_external(&v26, "Failed to unpack to query current power", 0x27uLL);
          }
          else
          {
            uint64_t v16 = v28;
            if ((*(_DWORD *)v28 - 1) < 3)
            {
              BudgetData::set((uint64_t *)&v24, (*(unsigned char *)v28 - 1), *(_DWORD *)(v28 + 4));
              if ((*(_DWORD *)(v16 + 8) - 1) <= 2)
              {
                BudgetData::set((uint64_t *)&v24, (*(unsigned char *)(v16 + 8) - 1), *(_DWORD *)(v16 + 12));
                if ((*(_DWORD *)(v16 + 16) - 1) <= 2)
                {
                  BudgetData::set((uint64_t *)&v24, (*(unsigned char *)(v16 + 16) - 1), *(_DWORD *)(v16 + 20));
                  if ((*(_DWORD *)(v16 + 24) - 1) <= 2)
                  {
                    BudgetData::set((uint64_t *)&v24, (*(unsigned char *)(v16 + 24) - 1), *(_DWORD *)(v16 + 28));
                    if ((*(_DWORD *)(v16 + 32) - 1) <= 2) {
                      BudgetData::set((uint64_t *)&v24, (*(unsigned char *)(v16 + 32) - 1), *(_DWORD *)(v16 + 36));
                    }
                  }
                }
              }
            }
          }
        }
        if (v2[3] && v2[4])
        {
          uint64_t v22 = 0;
          uint64_t v23 = 0;
          uint64_t v21 = &v22;
          std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&v21, v24, v25);
          uint64_t v17 = (const void *)v2[3];
          if (v17) {
            uint64_t v18 = _Block_copy(v17);
          }
          else {
            uint64_t v18 = 0;
          }
          long long v19 = v2[4];
          *(void *)long long buf = MEMORY[0x263EF8330];
          *(void *)&uint8_t buf[8] = 1174405120;
          *(void *)&uint8_t buf[16] = ___ZNK8dispatch8callbackIU13block_pointerFv10BudgetDataEEclIJS1_EEEvDpT__block_invoke;
          char v31 = &__block_descriptor_tmp_39_0;
          if (v18) {
            long long v20 = _Block_copy(v18);
          }
          else {
            long long v20 = 0;
          }
          char v34 = 0;
          uint64_t v35 = 0;
          unint64_t v32 = v20;
          long long v33 = &v34;
          std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&v33, v21, &v22);
          dispatch_async(v19, buf);
          std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)&v33, v34);
          char v34 = 0;
          uint64_t v35 = 0;
          long long v33 = &v34;
          if (v32) {
            _Block_release(v32);
          }
          if (v18) {
            _Block_release(v18);
          }
          std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)&v21, v22);
          uint64_t v22 = 0;
          uint64_t v23 = 0;
          uint64_t v21 = &v22;
        }
        std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)&v24, v25[0]);
        if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v26.__r_.__value_.__l.__data_);
        }
        MEMORY[0x237DF6000](v27);
      }
    }
  }
}

void sub_235DEA8DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, void *a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0)
  {
    operator delete(__p);
    MEMORY[0x237DF6000](&a22);
    _Unwind_Resume(a1);
  }
  MEMORY[0x237DF6000](&a22);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c143_ZTSNSt3__110shared_ptrIZZN4cpms16ARICommandDriver15getCurrentPowerEN8dispatch8callbackIU13block_pointerFv10BudgetDataEEEENK3__0clEvEUlPKhjE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c143_ZTSNSt3__110shared_ptrIZZN4cpms16ARICommandDriver15getCurrentPowerEN8dispatch8callbackIU13block_pointerFv10BudgetDataEEEENK3__0clEvEUlPKhjE_EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<cpms::ARICommandDriver::getCurrentPower(dispatch::callback<void({block_pointer})(BudgetData)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<cpms::ARICommandDriver::getCurrentPower(dispatch::callback<void({block_pointer})(BudgetData)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93CAE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<cpms::ARICommandDriver::getCurrentPower(dispatch::callback<void({block_pointer})(BudgetData)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<cpms::ARICommandDriver::getCurrentPower(dispatch::callback<void({block_pointer})(BudgetData)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93CAE0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<cpms::ARICommandDriver::getCurrentPower(dispatch::callback<void({block_pointer})(BudgetData)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<cpms::ARICommandDriver::getCurrentPower(dispatch::callback<void({block_pointer})(BudgetData)>)::$_0::operator() const(void)::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(void *a1)
{
  uint64_t v2 = a1[7];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = (const void *)a1[6];
  if (v3) {
    _Block_release(v3);
  }
  long long v4 = (std::__shared_weak_count *)a1[4];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    unint64_t v10 = this->__r_.__value_.__r.__words[2];
    unint64_t v8 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (__n > v8)
    {
      size_t v11 = 0x7FFFFFFFFFFFFFF7;
      if (0x7FFFFFFFFFFFFFF7 - (v10 & 0x7FFFFFFFFFFFFFFFLL) >= __n - v8)
      {
        long long v9 = (std::string *)this->__r_.__value_.__r.__words[0];
        if (v8 > 0x3FFFFFFFFFFFFFF2)
        {
LABEL_15:
          int v7 = operator new(v11);
          memcpy(v7, __s, __n);
          if (v8 != 22) {
            operator delete(v9);
          }
          this->__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
          this->__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
LABEL_23:
          this->__r_.__value_.__l.__size_ = __n;
          goto LABEL_24;
        }
LABEL_8:
        std::string::size_type v12 = 2 * v8;
        if (__n > 2 * v8) {
          std::string::size_type v12 = __n;
        }
        uint64_t v13 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17) {
          uint64_t v13 = v12 | 7;
        }
        if (v12 >= 0x17) {
          size_t v11 = v13 + 1;
        }
        else {
          size_t v11 = 23;
        }
        goto LABEL_15;
      }
LABEL_25:
      std::string::__throw_length_error[abi:ne180100]();
    }
    unint64_t v6 = HIBYTE(v10);
    int v7 = (void *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    int v7 = this;
    if (__n > 0x16)
    {
      if (__n - 0x7FFFFFFFFFFFFFF7 >= 0x800000000000001FLL)
      {
        unint64_t v8 = 22;
        long long v9 = this;
        goto LABEL_8;
      }
      goto LABEL_25;
    }
  }
  if (__n)
  {
    memmove(v7, __s, __n);
    LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0) {
    goto LABEL_23;
  }
  *((unsigned char *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
LABEL_24:
  *((unsigned char *)v7 + __n) = 0;
  return this;
}

void dispatch::async<void ctu::SharedSynchronizable<cpms::CommandDriver>::execute_wrapped<cpms::ARICommandDriver::enablePowerBudgetIndication(BOOL,unsigned int)::$_0>(cpms::ARICommandDriver::enablePowerBudgetIndication(BOOL,unsigned int)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<cpms::ARICommandDriver::enablePowerBudgetIndication(BOOL,unsigned int)::$_0,dispatch_queue_s *::default_delete<cpms::ARICommandDriver::enablePowerBudgetIndication(BOOL,unsigned int)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v1 = (unsigned __int8 *)*a1;
  uint64_t v2 = *(void **)(*a1 + 8);
  unint64_t v29 = (void *)0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v27[3] = v3;
  *(_OWORD *)long long __p = v3;
  v27[1] = v3;
  _OWORD v27[2] = v3;
  v27[0] = v3;
  long long v24 = v1;
  AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK::ARI_IBICpsConfigureCellularPowerReportReq_SDK((AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK *)v27);
  long long v4 = operator new(4uLL);
  _DWORD *v4 = 1;
  uint64_t v5 = __p[0];
  __p[0] = v4;
  if (v5) {
    operator delete(v5);
  }
  unint64_t v6 = operator new(4uLL);
  _DWORD *v6 = *v1;
  int v7 = __p[1];
  __p[1] = v6;
  if (v7) {
    operator delete(v7);
  }
  int v8 = *((_DWORD *)v1 + 1);
  long long v9 = operator new(2uLL);
  *long long v9 = v8;
  unint64_t v10 = v29;
  unint64_t v29 = v9;
  if (v10) {
    operator delete(v10);
  }
  uint64_t v12 = v2[8];
  size_t v11 = (std::__shared_weak_count *)v2[9];
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = (char *)operator new(0x28uLL);
  strcpy(v13, "Enable CPS to enable the indication");
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZZN4cpms16ARICommandDriver27enablePowerBudgetIndicationEbjENK3__0clEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_46_0;
  aBlock[4] = v2;
  int v14 = _Block_copy(aBlock);
  long long v15 = v2[3];
  if (v15) {
    dispatch_retain(v15);
  }
  std::string::__init_copy_ctor_external(&v30, v13, 0x23uLL);
  if (!v14)
  {
    v31.__vftable = 0;
    v31.__shared_owners_ = (uint64_t)v15;
    if (!v15) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  v31.__vftable = (std::__shared_count_vtbl *)_Block_copy(v14);
  v31.__shared_owners_ = (uint64_t)v15;
  if (v15) {
LABEL_13:
  }
    dispatch_retain(v15);
LABEL_14:
  uint64_t v16 = (std::__shared_weak_count *)operator new(0x40uLL);
  v16->__shared_owners_ = 0;
  p_shared_owners = &v16->__shared_owners_;
  v16->__shared_weak_owners_ = 0;
  v16->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93CB60;
  v16[1] = (std::__shared_weak_count)v30;
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = 0uLL;
  v16[2].std::__shared_count = v31;
  v30.__r_.__value_.__r.__words[2] = 0;
  std::__shared_count v31 = (std::__shared_count)0;
  *(void *)&long long v33 = MEMORY[0x263EF8330];
  *((void *)&v33 + 1) = 1174405120;
  *(void *)&long long v34 = ___ZN3ice6detail12wrapCallbackIZN5utils7sendMsgIN6AriSdk45ARI_IBICpsConfigureCellularPowerReportRsp_SDKEEEvNSt3__110shared_ptrINS_6ClientEEERNS4_7MsgBaseENS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUlPKhjE_vEENSI_5blockIU13block_pointerFiPhjEEENS6_17integral_constantIiLi2EEEOT__block_invoke;
  *((void *)&v34 + 1) = &__block_descriptor_tmp_47;
  unint64_t v35 = (unint64_t)&v16[1];
  uint64_t v36 = v16;
  atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v37 = MEMORY[0x263EF8330];
  uint64_t v38 = 0x40000000;
  long long v39 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_2;
  uint64_t v40 = &unk_264C7D9A8;
  uint64_t v41 = &v33;
  uint64_t v18 = _Block_copy(&v37);
  long long v19 = v36;
  if (!v36 || atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
  std::__shared_weak_count::__release_weak(v19);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_17:
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
LABEL_18:
  *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v33 = v20;
  long long v34 = v20;
  unint64_t v35 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v21 = *(std::__shared_weak_count **)(v12 + 16);
  uint64_t v37 = *(void *)(v12 + 8);
  if (!v21)
  {
    uint64_t v38 = 0;
LABEL_47:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v38 = (uint64_t)std::__shared_weak_count::lock(v21);
  if (!v38) {
    goto LABEL_47;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  uint64_t v22 = (std::__shared_weak_count *)v38;
  if (v38 && !atomic_fetch_add((atomic_ullong *volatile)(v38 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  unint64_t v32 = v18;
  ice::SendMsgBaseProxy::callback();
  if (v32) {
    _Block_release(v32);
  }
  MEMORY[0x237DF50B0](&v33);
  if (v31.__shared_owners_) {
    dispatch_release((dispatch_object_t)v31.__shared_owners_);
  }
  if (v31.__vftable) {
    _Block_release(v31.__vftable);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (v15) {
    dispatch_release(v15);
  }
  if (v14) {
    _Block_release(v14);
  }
  operator delete(v13);
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  MEMORY[0x237DF6BB0](v27);
  operator delete(v24);
  uint64_t v23 = (std::__shared_weak_count *)a1[2];
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  operator delete(a1);
}

void sub_235DEB184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *aBlock,char a35)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  MEMORY[0x237DF50B0](&a35);
  utils::sendMsg<AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK>(std::shared_ptr<ice::Client>,AriSdk::MsgBase &,std::string,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::{lambda(unsigned char const*,unsigned int)#1}::~callback((uint64_t)&a29);
  if (v38) {
    dispatch_release(v38);
  }
  if (v37) {
    _Block_release(v37);
  }
  operator delete(v36);
  if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
  MEMORY[0x237DF6BB0](&a17);
  operator delete(__p);
  uint64_t v40 = (std::__shared_weak_count *)a11[2];
  if (v40)
  {
    if (!atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  operator delete(a11);
  _Unwind_Resume(a1);
}

void ___ZZN4cpms16ARICommandDriver27enablePowerBudgetIndicationEbjENK3__0clEv_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a2;
  if (*a2) {
    long long v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    long long v3 = 0;
  }
  if (v3)
  {
    long long v4 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v5 = 138412290;
      uint64_t v6 = v2;
      _os_log_error_impl(&dword_235DB9000, v4, OS_LOG_TYPE_ERROR, "%@", (uint8_t *)&v5, 0xCu);
    }
  }
}

uint64_t utils::sendMsg<AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK>(std::shared_ptr<ice::Client>,AriSdk::MsgBase &,std::string,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::{lambda(unsigned char const*,unsigned int)#1}::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 32);
  if (v2) {
    dispatch_release(v2);
  }
  long long v3 = *(const void **)(a1 + 24);
  if (v3) {
    _Block_release(v3);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t ___ZN3ice6detail12wrapCallbackIZN5utils7sendMsgIN6AriSdk45ARI_IBICpsConfigureCellularPowerReportRsp_SDKEEEvNSt3__110shared_ptrINS_6ClientEEERNS4_7MsgBaseENS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUlPKhjE_vEENSI_5blockIU13block_pointerFiPhjEEENS6_17integral_constantIiLi2EEEOT__block_invoke(uint64_t result, const unsigned __int8 *a2)
{
  uint64_t v2 = *(void *)(result + 32);
  if (v2)
  {
    *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v9[3] = v3;
    _OWORD v9[4] = v3;
    v9[1] = v3;
    v9[2] = v3;
    v9[0] = v3;
    AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK::ARI_IBICpsConfigureCellularPowerReportRsp_SDK((AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK *)v9, a2);
    if (!*(void *)(v2 + 24) || !*(void *)(v2 + 32)) {
      return MEMORY[0x237DF6BD0](v9);
    }
    CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
    checkError((AriSdk::MsgBase *)v9, v2, &cf);
    CFTypeRef v4 = cf;
    if (cf) {
      CFRetain(cf);
    }
    int v5 = *(const void **)(v2 + 24);
    if (v5) {
      uint64_t v6 = _Block_copy(v5);
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v7 = *(NSObject **)(v2 + 32);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_0;
    block[3] = &__block_descriptor_tmp_36_0;
    if (v6)
    {
      size_t v11 = _Block_copy(v6);
      CFTypeRef v12 = v4;
      if (!v4) {
        goto LABEL_14;
      }
    }
    else
    {
      size_t v11 = 0;
      CFTypeRef v12 = v4;
      if (!v4)
      {
LABEL_14:
        dispatch_async(v7, block);
        if (v12) {
          CFRelease(v12);
        }
        if (v11) {
          _Block_release(v11);
        }
        if (v6) {
          _Block_release(v6);
        }
        if (v4) {
          CFRelease(v4);
        }
        if (cf) {
          CFRelease(cf);
        }
        return MEMORY[0x237DF6BD0](v9);
      }
    }
    CFRetain(v4);
    goto LABEL_14;
  }
  return result;
}

uint64_t __copy_helper_block_e8_32c278_ZTSNSt3__110shared_ptrIZN5utils7sendMsgIN6AriSdk45ARI_IBICpsConfigureCellularPowerReportRsp_SDKEEEvNS0_IN3ice6ClientEEERNS3_7MsgBaseENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUlPKhjE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c278_ZTSNSt3__110shared_ptrIZN5utils7sendMsgIN6AriSdk45ARI_IBICpsConfigureCellularPowerReportRsp_SDKEEEvNS0_IN3ice6ClientEEERNS3_7MsgBaseENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUlPKhjE_EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<void utils::sendMsg<AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK>(std::shared_ptr<ice::Client>,AriSdk::MsgBase &,std::string,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void utils::sendMsg<AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK>(std::shared_ptr<ice::Client>,AriSdk::MsgBase &,std::string,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93CB60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<void utils::sendMsg<AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK>(std::shared_ptr<ice::Client>,AriSdk::MsgBase &,std::string,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void utils::sendMsg<AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK>(std::shared_ptr<ice::Client>,AriSdk::MsgBase &,std::string,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93CB60;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<void utils::sendMsg<AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK>(std::shared_ptr<ice::Client>,AriSdk::MsgBase &,std::string,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void utils::sendMsg<AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK>(std::shared_ptr<ice::Client>,AriSdk::MsgBase &,std::string,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 56);
  if (v2) {
    dispatch_release(v2);
  }
  long long v3 = *(const void **)(a1 + 48);
  if (v3) {
    _Block_release(v3);
  }
  if (*(char *)(a1 + 47) < 0)
  {
    CFTypeRef v4 = *(void **)(a1 + 24);
    operator delete(v4);
  }
}

void radio::ARIRFSCommandDriver::create(uint64_t *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v6 = operator new(0xF8uLL);
  uint64_t v7 = v6;
  int v8 = (std::__shared_weak_count *)a1[1];
  uint64_t v25 = *a1;
  std::string v26 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *a2;
  unint64_t v10 = (std::__shared_weak_count *)a2[1];
  v24[0] = v9;
  v24[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  radio::ARIRFSCommandDriver::ARIRFSCommandDriver((uint64_t)v6, (uint64_t)&v25, (uint64_t)v24);
  *a3 = v7;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  size_t v11 = (std::__shared_weak_count *)operator new(0x20uLL);
  v11->__shared_owners_ = 0;
  p_shared_owners = &v11->__shared_owners_;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93CD00;
  v11->__shared_weak_owners_ = 0;
  v11[1].__vftable = (std::__shared_weak_count_vtbl *)v7;
  a3[1] = v11;
  uint64_t v13 = (std::__shared_weak_count *)*((void *)v7 + 10);
  if (!v13)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)v7 + 9) = v7;
    *((void *)v7 + 10) = v11;
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_8;
    }
LABEL_11:
    int v14 = (void *)*a3;
    if (!*(void *)(*a3 + 56)) {
      goto LABEL_20;
    }
    goto LABEL_12;
  }
  if (v13->__shared_owners_ != -1) {
    goto LABEL_11;
  }
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *((void *)v7 + 9) = v7;
  *((void *)v7 + 10) = v11;
  std::__shared_weak_count::__release_weak(v13);
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_11;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  int v14 = (void *)*a3;
  if (!*(void *)(*a3 + 56)) {
    goto LABEL_20;
  }
LABEL_12:
  long long v15 = (std::__shared_weak_count *)v14[10];
  if (!v15 || (uint64_t v16 = v14[9], (v17 = std::__shared_weak_count::lock(v15)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v18 = v17;
  uint64_t v27 = v16;
  uint64_t v28 = (uint64_t)v17;
  ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v14 + 1));
  uint64_t v32 = v16;
  long long v33 = v18;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  ctu::TrackedLogger::registerLoggerToServer();
  long long v19 = v33;
  if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  long long v20 = (std::__shared_weak_count *)v28;
  if (v28 && !atomic_fetch_add((atomic_ullong *volatile)(v28 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
LABEL_20:
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  uint64_t v21 = v26;
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  uint64_t v22 = *a3;
  uint64_t v23 = (uint64_t *)(*a3 + 72);
  uint64_t v27 = MEMORY[0x263EF8330];
  uint64_t v28 = 0x40000000;
  unint64_t v29 = ___ZN5radio19ARIRFSCommandDriver4initEv_block_invoke;
  std::string v30 = &__block_descriptor_tmp_13;
  uint64_t v31 = v22;
  ctu::SharedSynchronizable<radio::RFSCommandDriver>::execute_wrapped(v23, (uint64_t)&v27);
}

void sub_235DEBA58()
{
}

void sub_235DEBAA4()
{
}

void sub_235DEBAB4()
{
}

void radio::ARIRFSCommandDriver::init(radio::ARIRFSCommandDriver *this)
{
  v1[0] = MEMORY[0x263EF8330];
  v1[1] = 0x40000000;
  v1[2] = ___ZN5radio19ARIRFSCommandDriver4initEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_13;
  v1[4] = this;
  ctu::SharedSynchronizable<radio::RFSCommandDriver>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v1);
}

uint64_t radio::ARIRFSCommandDriver::ARIRFSCommandDriver(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFTypeRef v4 = *(std::__shared_weak_count **)(a2 + 8);
  unint64_t v10 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v5 = *(std::__shared_weak_count **)(a3 + 8);
  uint64_t v9 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  radio::RFSCommandDriver::RFSCommandDriver();
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  *(void *)a1 = &unk_26E93CBB0;
  uint64_t v6 = *(NSObject **)(a1 + 88);
  xpc_object_t object = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  radio::RFSCommandDriver::getName((radio::RFSCommandDriver *)a1);
  ice::Client::create();
  if (object) {
    dispatch_release(object);
  }
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  return a1;
}

void sub_235DEBCCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_235DEBCE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  radio::RFSCommandDriver::~RFSCommandDriver(v10);
  _Unwind_Resume(a1);
}

uint64_t ___ZN5radio19ARIRFSCommandDriver4initEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_235DB9000, v2, OS_LOG_TYPE_DEFAULT, "#I Initializing", buf, 2u);
  }
  uint64_t v3 = *(void *)(v1 + 168);
  v13[0] = MEMORY[0x263EF8330];
  v13[1] = 0x40000000;
  void v13[2] = ___ZN5radio19ARIRFSCommandDriver4initEv_block_invoke_2;
  v13[3] = &__block_descriptor_tmp_2;
  v13[4] = v1;
  *(void *)long long buf = v13;
  ice::Client::setEventHandler<void({block_pointer})(void)>(v3, 0, (uint64_t *)buf);
  uint64_t v4 = *(void *)(v1 + 168);
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 0x40000000;
  void v12[2] = ___ZN5radio19ARIRFSCommandDriver4initEv_block_invoke_3;
  v12[3] = &__block_descriptor_tmp_4;
  _OWORD v12[4] = v1;
  *(void *)long long buf = v12;
  ice::Client::setEventHandler<void({block_pointer})(void)>(v4, 1, (uint64_t *)buf);
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 0x40000000;
  v11[2] = ___ZN5radio19ARIRFSCommandDriver4initEv_block_invoke_5;
  v11[3] = &__block_descriptor_tmp_7;
  v11[4] = v1;
  *(void *)long long buf = MEMORY[0x263EF8330];
  uint64_t v15 = 0x40000000;
  uint64_t v16 = ___ZN3ice6detail12wrapCallbackIiEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke;
  uint64_t v17 = &unk_264C7DAD0;
  uint64_t v18 = v11;
  *(void *)long long buf = _Block_copy(buf);
  ice::Client::regIndicationInternal();
  if (*(void *)buf) {
    _Block_release(*(const void **)buf);
  }
  ice::Client::setIndShouldWake(*(ice::Client **)(v1 + 168));
  int v5 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_235DB9000, v5, OS_LOG_TYPE_DEFAULT, "#I Enabling CsiFpPrioSyncReqInd as wakeable", buf, 2u);
  }
  uint64_t v6 = *(void *)(v1 + 168);
  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 0x40000000;
  v10[2] = ___ZN5radio19ARIRFSCommandDriver4initEv_block_invoke_8;
  v10[3] = &__block_descriptor_tmp_10_0;
  v10[4] = v1;
  *(void *)long long buf = v10;
  ice::Client::setEventHandler<void({block_pointer})(dispatch::group_session)>(v6, 2, (uint64_t *)buf);
  uint64_t v7 = *(void *)(v1 + 168);
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 0x40000000;
  v9[2] = ___ZN5radio19ARIRFSCommandDriver4initEv_block_invoke_11;
  v9[3] = &__block_descriptor_tmp_12;
  _OWORD v9[4] = v1;
  *(void *)long long buf = v9;
  ice::Client::setEventHandler<void({block_pointer})(void)>(v7, 3, (uint64_t *)buf);
  return ice::Client::start(*(ice::Client **)(v1 + 168));
}

void sub_235DEBFD4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(const void **)(v1 - 96);
  if (v3) {
    _Block_release(v3);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN5radio19ARIRFSCommandDriver4initEv_block_invoke_2(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(const void **)(v1 + 184);
  if (!v2 || !*(void *)(v1 + 192))
  {
LABEL_8:
    int v5 = *(NSObject **)(v1 + 40);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
      return;
    }
LABEL_11:
    *(_WORD *)uint64_t v6 = 0;
    _os_log_debug_impl(&dword_235DB9000, v5, OS_LOG_TYPE_DEBUG, "#D Started", v6, 2u);
    return;
  }
  uint64_t v3 = _Block_copy(v2);
  uint64_t v4 = *(void *)(v1 + 192);
  if (v4) {
    dispatch_retain(*(dispatch_object_t *)(v1 + 192));
  }
  v9[0] = &unk_26E93CD50;
  v9[1] = v3;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  v9[2] = v4;
  unint64_t v10 = v9;
  ice::Client::getClientId();
  if (v10 != v9)
  {
    if (v10) {
      (*(void (**)(void))(*v10 + 40))();
    }
    goto LABEL_8;
  }
  (*(void (**)(void *))(v9[0] + 32))(v9);
  int v5 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
    goto LABEL_11;
  }
}

void sub_235DEC180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  std::function<void ()(int)>::~function((uint64_t *)va1);
  dispatch::callback<void({block_pointer})>::~callback((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_235DEC19C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void *std::function<void ()(int)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

uint64_t dispatch::callback<void({block_pointer})(unsigned int)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void ___ZN5radio19ARIRFSCommandDriver4initEv_block_invoke_3(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_debug_impl(&dword_235DB9000, v1, OS_LOG_TYPE_DEBUG, "#D Stopped", v2, 2u);
  }
}

uint64_t ___ZN5radio19ARIRFSCommandDriver4initEv_block_invoke_5(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v11[3] = v3;
  long long v12 = v3;
  v11[1] = v3;
  v11[2] = v3;
  v11[0] = v3;
  AriSdk::ARI_CsiFpPrioSyncReqInd_SDK::ARI_CsiFpPrioSyncReqInd_SDK((AriSdk::ARI_CsiFpPrioSyncReqInd_SDK *)v11, a2);
  if (ice::isARIResponseValid())
  {
    if (!v2[25] || !v2[26]) {
      goto LABEL_19;
    }
    if (AriSdk::ARI_CsiFpPrioSyncReqInd_SDK::unpack((AriSdk::ARI_CsiFpPrioSyncReqInd_SDK *)v11)
      || !*((void *)&v12 + 1))
    {
      BOOL v4 = 0;
      int v5 = (const void *)v2[25];
      if (!v5)
      {
LABEL_11:
        uint64_t v6 = 0;
        goto LABEL_12;
      }
    }
    else
    {
      BOOL v4 = **((_DWORD **)&v12 + 1) != 0;
      int v5 = (const void *)v2[25];
      if (!v5) {
        goto LABEL_11;
      }
    }
    uint64_t v6 = _Block_copy(v5);
LABEL_12:
    uint64_t v8 = v2[26];
    *(void *)long long buf = MEMORY[0x263EF8330];
    uint64_t v14 = 1174405120;
    uint64_t v15 = ___ZNK8dispatch8callbackIU13block_pointerFvbyEEclIJbiEEEvDpT__block_invoke;
    uint64_t v16 = &__block_descriptor_tmp_49_0;
    if (v6) {
      uint64_t v9 = _Block_copy(v6);
    }
    else {
      uint64_t v9 = 0;
    }
    aBlocunint64_t k = v9;
    BOOL v19 = v4;
    int v18 = 0;
    dispatch_async(v8, buf);
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v6) {
      _Block_release(v6);
    }
    goto LABEL_19;
  }
  uint64_t v7 = v2[5];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_235DB9000, v7, OS_LOG_TYPE_ERROR, "Got invalid ARI indication, was expecting CsiFpPrioSyncReqInd", buf, 2u);
  }
LABEL_19:
  MEMORY[0x237DF5950](v11);
  return 0;
}

void ___ZN5radio19ARIRFSCommandDriver4initEv_block_invoke_8(uint64_t a1, NSObject **a2)
{
  long long v3 = *(void **)(a1 + 32);
  BOOL v4 = v3[5];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v9[0]) = 0;
    _os_log_impl(&dword_235DB9000, v4, OS_LOG_TYPE_DEFAULT, "#I ARI LPM Enter event received", (uint8_t *)v9, 2u);
  }
  int v5 = (const void *)v3[27];
  if (v5 && v3[28])
  {
    uint64_t v6 = *a2;
    if (v6 && (dispatch_retain(v6), dispatch_group_enter(v6), (int v5 = (const void *)v3[27]) == 0)) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = _Block_copy(v5);
    }
    uint64_t v8 = v3[28];
    v9[0] = MEMORY[0x263EF8330];
    v9[1] = 1174405120;
    v9[2] = ___ZNK8dispatch8callbackIU13block_pointerFvNS_13group_sessionEEEclIJS1_EEEvDpT__block_invoke_0;
    void v9[3] = &__block_descriptor_tmp_51;
    if (v7)
    {
      aBlocunint64_t k = _Block_copy(v7);
      dispatch_group_t group = v6;
      if (!v6)
      {
LABEL_15:
        dispatch_async(v8, v9);
        if (group)
        {
          dispatch_group_leave(group);
          if (group) {
            dispatch_release(group);
          }
        }
        if (aBlock) {
          _Block_release(aBlock);
        }
        if (v7) {
          _Block_release(v7);
        }
        if (v6)
        {
          dispatch_group_leave(v6);
          dispatch_release(v6);
        }
        return;
      }
    }
    else
    {
      aBlocunint64_t k = 0;
      dispatch_group_t group = v6;
      if (!v6) {
        goto LABEL_15;
      }
    }
    dispatch_retain(v6);
    if (group) {
      dispatch_group_enter(group);
    }
    goto LABEL_15;
  }
}

void ___ZN5radio19ARIRFSCommandDriver4initEv_block_invoke_11(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = v1[5];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v8[0]) = 0;
    _os_log_impl(&dword_235DB9000, v2, OS_LOG_TYPE_DEFAULT, "#I ARI LPM Exit event received", (uint8_t *)v8, 2u);
  }
  long long v3 = (const void *)v1[29];
  if (v3 && v1[30])
  {
    BOOL v4 = _Block_copy(v3);
    int v5 = v4;
    uint64_t v6 = v1[30];
    v8[0] = MEMORY[0x263EF8330];
    v8[1] = 1174405120;
    v8[2] = ___ZNK8dispatch8callbackIU13block_pointerFvvEEclIJEEEvDpT__block_invoke_0;
    v8[3] = &__block_descriptor_tmp_53;
    if (v4)
    {
      aBlocunint64_t k = _Block_copy(v4);
      dispatch_async(v6, v8);
      uint64_t v7 = aBlock;
      if (!aBlock)
      {
LABEL_10:
        if (v5) {
          _Block_release(v5);
        }
        return;
      }
    }
    else
    {
      aBlocunint64_t k = 0;
      dispatch_async(v6, v8);
      uint64_t v7 = aBlock;
      if (!aBlock) {
        goto LABEL_10;
      }
    }
    _Block_release(v7);
    goto LABEL_10;
  }
}

void radio::ARIRFSCommandDriver::sync(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  BOOL v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(block) = 136315138;
    *(void *)((char *)&block + 4) = "sync";
    _os_log_debug_impl(&dword_235DB9000, v4, OS_LOG_TYPE_DEBUG, "#D %s: not supported!", (uint8_t *)&block, 0xCu);
  }
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  char v8 = 13;
  strcpy((char *)__p, "Not supported");
  CreateError();
  CFRetain((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
  if (*(void *)a3) {
    int v5 = _Block_copy(*(const void **)a3);
  }
  else {
    int v5 = 0;
  }
  uint64_t v6 = *(NSObject **)(a3 + 8);
  *(void *)&blocunint64_t k = MEMORY[0x263EF8330];
  *((void *)&block + 1) = 1174405120;
  uint64_t v11 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke;
  long long v12 = &__block_descriptor_tmp_55_0;
  if (v5)
  {
    aBlocunint64_t k = _Block_copy(v5);
    CFTypeRef v14 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  }
  else
  {
    aBlocunint64_t k = 0;
    CFTypeRef v14 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  }
  CFRetain((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
  CFTypeRef v15 = 0;
  dispatch_async(v6, &block);
  if (v15) {
    CFRelease(v15);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v5) {
    _Block_release(v5);
  }
  CFRelease((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
  CFRelease(cf);
}

void sub_235DEC968(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_235DEC9A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x235DEC994);
}

const void **ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void radio::ARIRFSCommandDriver::registerRFS_sync(std::__shared_weak_count **this, int a2)
{
  if (capabilities::ct::supportsHiSpeedFiler((capabilities::ct *)this))
  {
    if (a2)
    {
      radio::ARIRFSCommandDriver::getRFSStatus_V2_sync((radio::ARIRFSCommandDriver *)this);
    }
    return;
  }
  BOOL v4 = this[10];
  if (!v4 || (int v5 = (std::__shared_weak_count_vtbl *)this[9], (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  long long __p = (void *)0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v21[2] = v8;
  v21[3] = v8;
  v21[0] = v8;
  v21[1] = v8;
  AriSdk::ARI_CsiFpRegister_SDK::ARI_CsiFpRegister_SDK((AriSdk::ARI_CsiFpRegister_SDK *)v21);
  uint64_t v9 = operator new(4uLL);
  *uint64_t v9 = a2;
  unint64_t v10 = __p;
  long long __p = v9;
  if (v10) {
    operator delete(v10);
  }
  uint64_t v11 = this[21];
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  long long v12 = (std::__shared_weak_count *)operator new(0x38uLL);
  v12->__shared_owners_ = 0;
  p_uint64_t shared_owners = &v12->__shared_owners_;
  v12->__shared_weak_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93CF38;
  v12[1].__vftable = v5;
  v12[1].__shared_owners_ = (uint64_t)v7;
  v12[1].__shared_weak_owners_ = (uint64_t)this;
  LOBYTE(v12[2].__vftable) = a2;
  uint64_t shared_owners = MEMORY[0x263EF8330];
  uint64_t v24 = 1174405120;
  uint64_t v25 = ___ZN3ice6detail12wrapCallbackIZN5radio19ARIRFSCommandDriver16registerRFS_syncEbE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  std::string v26 = &__block_descriptor_tmp_57;
  uint64_t v27 = v12 + 1;
  uint64_t v28 = v12;
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlock[0] = (const void *)MEMORY[0x263EF8330];
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_3;
  aBlock[3] = &unk_264C7DAF8;
  aBlock[4] = &shared_owners;
  CFTypeRef v14 = _Block_copy(aBlock);
  CFTypeRef v15 = v28;
  if (!v28 || atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_15:
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
LABEL_16:
  *(void *)&long long v16 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v19[0] = v16;
  v19[1] = v16;
  unint64_t v20 = 0xAAAAAAAAAAAAAAAALL;
  shared_weak_owners = (std::__shared_weak_count *)v11->__shared_weak_owners_;
  uint64_t shared_owners = v11->__shared_owners_;
  if (!shared_weak_owners)
  {
    uint64_t v24 = 0;
LABEL_29:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v24 = (uint64_t)std::__shared_weak_count::lock(shared_weak_owners);
  if (!v24) {
    goto LABEL_29;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  int v18 = (std::__shared_weak_count *)v24;
  if (v24 && !atomic_fetch_add((atomic_ullong *volatile)(v24 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  aBlock[0] = v14;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0]) {
    _Block_release(aBlock[0]);
  }
  MEMORY[0x237DF50B0](v19);
  MEMORY[0x237DF5270](v21);
  std::__shared_weak_count::__release_weak(v7);
}

void sub_235DECD68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  int v18 = *(const void **)(v16 - 104);
  if (v18) {
    _Block_release(v18);
  }
  MEMORY[0x237DF50B0](&a9);
  MEMORY[0x237DF5270](&a15);
  std::__shared_weak_count::__release_weak(v15);
  _Unwind_Resume(a1);
}

void sub_235DECD9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  if (v8) {
    _Block_release(v8);
  }
  MEMORY[0x237DF5270]((uint64_t *)va);
  std::__shared_weak_count::__release_weak(v7);
  _Unwind_Resume(a1);
}

void radio::ARIRFSCommandDriver::getRFSStatus_V2_sync(radio::ARIRFSCommandDriver *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v2
    || (long long v3 = (std::__shared_weak_count_vtbl *)*((void *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0))
  {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v5 = v4;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v17[2] = v6;
  v17[3] = v6;
  v17[0] = v6;
  v17[1] = v6;
  AriSdk::ARI_CsiFpGetStatusV2_SDK::ARI_CsiFpGetStatusV2_SDK((AriSdk::ARI_CsiFpGetStatusV2_SDK *)v17);
  uint64_t v7 = *((void *)this + 21);
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  long long v8 = (std::__shared_weak_count *)operator new(0x30uLL);
  v8->__shared_owners_ = 0;
  p_uint64_t shared_owners = &v8->__shared_owners_;
  v8->__shared_weak_owners_ = 0;
  v8[1].__vftable = v3;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93D038;
  v8[1].__shared_owners_ = (uint64_t)v5;
  v8[1].__shared_weak_owners_ = (uint64_t)this;
  uint64_t v18 = MEMORY[0x263EF8330];
  uint64_t v19 = 1174405120;
  unint64_t v20 = ___ZN3ice6detail12wrapCallbackIZN5radio19ARIRFSCommandDriver20getRFSStatus_V2_syncEvE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  uint64_t v21 = &__block_descriptor_tmp_69_1;
  uint64_t v22 = v8 + 1;
  uint64_t v23 = v8;
  atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlock[0] = (const void *)MEMORY[0x263EF8330];
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_3;
  aBlock[3] = &unk_264C7DAF8;
  aBlock[4] = &v18;
  uint64_t v10 = _Block_copy(aBlock);
  uint64_t v11 = v23;
  if (!v23 || atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_9:
  *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v15[0] = v12;
  v15[1] = v12;
  unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v13 = *(std::__shared_weak_count **)(v7 + 16);
  uint64_t v18 = *(void *)(v7 + 8);
  if (!v13)
  {
    uint64_t v19 = 0;
LABEL_21:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v19 = (uint64_t)std::__shared_weak_count::lock(v13);
  if (!v19) {
    goto LABEL_21;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  uint64_t v14 = (std::__shared_weak_count *)v19;
  if (v19 && !atomic_fetch_add((atomic_ullong *volatile)(v19 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  aBlock[0] = v10;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0]) {
    _Block_release(aBlock[0]);
  }
  MEMORY[0x237DF50B0](v15);
  MEMORY[0x237DF5550](v17);
  std::__shared_weak_count::__release_weak(v5);
}

void sub_235DED138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v18 = *(const void **)(v16 - 104);
  if (v18) {
    _Block_release(v18);
  }
  MEMORY[0x237DF50B0](&a9);
  MEMORY[0x237DF5550](&a15);
  std::__shared_weak_count::__release_weak(v15);
  _Unwind_Resume(a1);
}

void sub_235DED16C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  if (v8) {
    _Block_release(v8);
  }
  MEMORY[0x237DF5550]((uint64_t *)va);
  std::__shared_weak_count::__release_weak(v7);
  _Unwind_Resume(a1);
}

std::string *radio::ARIRFSCommandDriver::asString@<X0>(int a1@<W1>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = 0xAAAAAAAAAAAAAAAALL;
  *(void *)(a2 + 16) = 0xAAAAAAAAAAAAAAAALL;
  *(unsigned char *)(a2 + 23) = 7;
  strcpy((char *)a2, "Unknown");
  long long v3 = "cmd called in wrong state";
  std::string::size_type v4 = 25;
  switch(a1)
  {
    case 0:
      *(unsigned char *)(a2 + 23) = 7;
      strcpy((char *)a2, "success");
      return result;
    case 1:
      *(unsigned char *)(a2 + 23) = 18;
      strcpy((char *)a2, "param out of range");
      return result;
    case 2:
      strcpy((char *)a2, "function not supported");
      *(unsigned char *)(a2 + 23) = 22;
      return result;
    case 3:
      *(unsigned char *)(a2 + 23) = 21;
      strcpy((char *)a2, "drv grp not supported");
      return result;
    case 4:
      return std::string::__assign_external((std::string *)a2, v3, v4);
    case 5:
      long long v3 = "driver IF not available";
      std::string::size_type v4 = 23;
      return std::string::__assign_external((std::string *)a2, v3, v4);
    case 6:
      *(unsigned char *)(a2 + 23) = 12;
      strcpy((char *)a2, "driver error");
      return result;
    case 7:
      int v5 = "driver timeout";
      goto LABEL_15;
    case 8:
      *(unsigned char *)(a2 + 23) = 20;
      strcpy((char *)a2, "driver not supported");
      return result;
    case 9:
    case 10:
    case 11:
      return result;
    case 12:
      *(unsigned char *)(a2 + 23) = 20;
      strcpy((char *)a2, "param count mismatch");
      return result;
    case 13:
      *(unsigned char *)(a2 + 23) = 18;
      strcpy((char *)a2, "cmd format invalid");
      return result;
    case 14:
      int v5 = "internal error";
LABEL_15:
      *(unsigned char *)(a2 + 23) = 14;
      *(void *)a2 = *(void *)v5;
      *(void *)(a2 + 6) = *(void *)(v5 + 6);
      *(unsigned char *)(a2 + 14) = 0;
      break;
    default:
      if (a1 == 0x7FFFFFFF)
      {
        *(unsigned char *)(a2 + 23) = 17;
        strcpy((char *)a2, "ARM41 INT ENFORCE");
      }
      break;
  }
  return result;
}

void sub_235DED478(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void radio::ARIRFSCommandDriver::getRFSStatus_sync(radio::ARIRFSCommandDriver *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v2
    || (long long v3 = (std::__shared_weak_count_vtbl *)*((void *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0))
  {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v5 = v4;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v17[2] = v6;
  v17[3] = v6;
  v17[0] = v6;
  v17[1] = v6;
  AriSdk::ARI_CsiFpGetStatus_SDK::ARI_CsiFpGetStatus_SDK((AriSdk::ARI_CsiFpGetStatus_SDK *)v17);
  uint64_t v7 = *((void *)this + 21);
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  long long v8 = (std::__shared_weak_count *)operator new(0x30uLL);
  v8->__shared_owners_ = 0;
  p_uint64_t shared_owners = &v8->__shared_owners_;
  v8->__shared_weak_owners_ = 0;
  v8[1].__vftable = v3;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93CFB8;
  v8[1].__shared_owners_ = (uint64_t)v5;
  v8[1].__shared_weak_owners_ = (uint64_t)this;
  uint64_t v18 = MEMORY[0x263EF8330];
  uint64_t v19 = 1174405120;
  unint64_t v20 = ___ZN3ice6detail12wrapCallbackIZN5radio19ARIRFSCommandDriver17getRFSStatus_syncEvE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  uint64_t v21 = &__block_descriptor_tmp_66_0;
  uint64_t v22 = v8 + 1;
  uint64_t v23 = v8;
  atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlock[0] = (const void *)MEMORY[0x263EF8330];
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_3;
  aBlock[3] = &unk_264C7DAF8;
  aBlock[4] = &v18;
  uint64_t v10 = _Block_copy(aBlock);
  uint64_t v11 = v23;
  if (!v23 || atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_9:
  *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v15[0] = v12;
  v15[1] = v12;
  unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v13 = *(std::__shared_weak_count **)(v7 + 16);
  uint64_t v18 = *(void *)(v7 + 8);
  if (!v13)
  {
    uint64_t v19 = 0;
LABEL_21:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v19 = (uint64_t)std::__shared_weak_count::lock(v13);
  if (!v19) {
    goto LABEL_21;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  uint64_t v14 = (std::__shared_weak_count *)v19;
  if (v19 && !atomic_fetch_add((atomic_ullong *volatile)(v19 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  aBlock[0] = v10;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0]) {
    _Block_release(aBlock[0]);
  }
  MEMORY[0x237DF50B0](v15);
  MEMORY[0x237DF5370](v17);
  std::__shared_weak_count::__release_weak(v5);
}

void sub_235DED7D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v18 = *(const void **)(v16 - 104);
  if (v18) {
    _Block_release(v18);
  }
  MEMORY[0x237DF50B0](&a9);
  MEMORY[0x237DF5370](&a15);
  std::__shared_weak_count::__release_weak(v15);
  _Unwind_Resume(a1);
}

void sub_235DED80C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  if (v8) {
    _Block_release(v8);
  }
  MEMORY[0x237DF5370]((uint64_t *)va);
  std::__shared_weak_count::__release_weak(v7);
  _Unwind_Resume(a1);
}

void radio::ARIRFSCommandDriver::checkRFSStatus(radio::ARIRFSCommandDriver *this)
{
  v1[0] = MEMORY[0x263EF8330];
  v1[1] = 0x40000000;
  v1[2] = ___ZN5radio19ARIRFSCommandDriver14checkRFSStatusEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_29_0;
  v1[4] = this;
  ctu::SharedSynchronizable<radio::RFSCommandDriver>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v1);
}

void ___ZN5radio19ARIRFSCommandDriver14checkRFSStatusEv_block_invoke(uint64_t a1)
{
}

void radio::ARIRFSCommandDriver::setStartHandler(uint64_t a1, uint64_t a2)
{
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 1174405120;
  uint64_t v7[2] = ___ZN5radio19ARIRFSCommandDriver15setStartHandlerEN8dispatch8callbackIU13block_pointerFvjEEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_30_2;
  v7[4] = a1;
  std::string::size_type v4 = *(void **)a2;
  if (*(void *)a2) {
    std::string::size_type v4 = _Block_copy(v4);
  }
  int v5 = (uint64_t *)(a1 + 72);
  long long v6 = *(NSObject **)(a2 + 8);
  aBlocunint64_t k = v4;
  dispatch_object_t object = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  ctu::SharedSynchronizable<radio::RFSCommandDriver>::execute_wrapped(v5, (uint64_t)v7);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void ___ZN5radio19ARIRFSCommandDriver15setStartHandlerEN8dispatch8callbackIU13block_pointerFvjEEE_block_invoke(void *a1)
{
  uint64_t v3 = a1[4];
  uint64_t v2 = (void *)a1[5];
  if (v2) {
    uint64_t v2 = _Block_copy(v2);
  }
  std::string::size_type v4 = *(const void **)(v3 + 184);
  *(void *)(v3 + 184) = v2;
  if (v4) {
    _Block_release(v4);
  }
  int v5 = a1[6];
  if (v5) {
    dispatch_retain(v5);
  }
  long long v6 = *(NSObject **)(v3 + 192);
  *(void *)(v3 + 192) = v5;
  if (v6)
  {
    dispatch_release(v6);
  }
}

void __copy_helper_block_e8_40c46_ZTSN8dispatch8callbackIU13block_pointerFvjEEE(uint64_t a1, uint64_t a2)
{
  std::string::size_type v4 = *(void **)(a2 + 40);
  if (v4) {
    std::string::size_type v4 = _Block_copy(v4);
  }
  int v5 = *(NSObject **)(a2 + 48);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v5;
  if (v5)
  {
    dispatch_retain(v5);
  }
}

void __destroy_helper_block_e8_40c46_ZTSN8dispatch8callbackIU13block_pointerFvjEEE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 48);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 40);
  if (v3) {
    _Block_release(v3);
  }
}

void radio::ARIRFSCommandDriver::setLPMEnterAction(uint64_t a1, uint64_t a2)
{
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 1174405120;
  uint64_t v7[2] = ___ZN5radio19ARIRFSCommandDriver17setLPMEnterActionEN8dispatch8callbackIU13block_pointerFvNS1_13group_sessionEEEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_31_0;
  v7[4] = a1;
  std::string::size_type v4 = *(void **)a2;
  if (*(void *)a2) {
    std::string::size_type v4 = _Block_copy(v4);
  }
  int v5 = (uint64_t *)(a1 + 72);
  long long v6 = *(NSObject **)(a2 + 8);
  aBlocunint64_t k = v4;
  dispatch_object_t object = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  ctu::SharedSynchronizable<radio::RFSCommandDriver>::execute_wrapped(v5, (uint64_t)v7);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void ___ZN5radio19ARIRFSCommandDriver17setLPMEnterActionEN8dispatch8callbackIU13block_pointerFvNS1_13group_sessionEEEE_block_invoke(void *a1)
{
  uint64_t v3 = a1[4];
  uint64_t v2 = (void *)a1[5];
  if (v2) {
    uint64_t v2 = _Block_copy(v2);
  }
  std::string::size_type v4 = *(const void **)(v3 + 216);
  *(void *)(v3 + 216) = v2;
  if (v4) {
    _Block_release(v4);
  }
  int v5 = a1[6];
  if (v5) {
    dispatch_retain(v5);
  }
  long long v6 = *(NSObject **)(v3 + 224);
  *(void *)(v3 + 224) = v5;
  if (v6)
  {
    dispatch_release(v6);
  }
}

void radio::ARIRFSCommandDriver::setLPMExitAction(uint64_t a1, uint64_t a2)
{
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 1174405120;
  uint64_t v7[2] = ___ZN5radio19ARIRFSCommandDriver16setLPMExitActionEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_32_2;
  v7[4] = a1;
  std::string::size_type v4 = *(void **)a2;
  if (*(void *)a2) {
    std::string::size_type v4 = _Block_copy(v4);
  }
  int v5 = (uint64_t *)(a1 + 72);
  long long v6 = *(NSObject **)(a2 + 8);
  aBlocunint64_t k = v4;
  dispatch_object_t object = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  ctu::SharedSynchronizable<radio::RFSCommandDriver>::execute_wrapped(v5, (uint64_t)v7);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void ___ZN5radio19ARIRFSCommandDriver16setLPMExitActionEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke(void *a1)
{
  uint64_t v3 = a1[4];
  uint64_t v2 = (void *)a1[5];
  if (v2) {
    uint64_t v2 = _Block_copy(v2);
  }
  std::string::size_type v4 = *(const void **)(v3 + 232);
  *(void *)(v3 + 232) = v2;
  if (v4) {
    _Block_release(v4);
  }
  int v5 = a1[6];
  if (v5) {
    dispatch_retain(v5);
  }
  long long v6 = *(NSObject **)(v3 + 240);
  *(void *)(v3 + 240) = v5;
  if (v6)
  {
    dispatch_release(v6);
  }
}

void radio::ARIRFSCommandDriver::setIndicationHandler(uint64_t a1, uint64_t a2)
{
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 1174405120;
  uint64_t v7[2] = ___ZN5radio19ARIRFSCommandDriver20setIndicationHandlerEN8dispatch8callbackIU13block_pointerFvbyEEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_33_1;
  v7[4] = a1;
  std::string::size_type v4 = *(void **)a2;
  if (*(void *)a2) {
    std::string::size_type v4 = _Block_copy(v4);
  }
  int v5 = (uint64_t *)(a1 + 72);
  long long v6 = *(NSObject **)(a2 + 8);
  aBlocunint64_t k = v4;
  dispatch_object_t object = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  ctu::SharedSynchronizable<radio::RFSCommandDriver>::execute_wrapped(v5, (uint64_t)v7);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void ___ZN5radio19ARIRFSCommandDriver20setIndicationHandlerEN8dispatch8callbackIU13block_pointerFvbyEEE_block_invoke(void *a1)
{
  uint64_t v3 = a1[4];
  uint64_t v2 = (void *)a1[5];
  if (v2) {
    uint64_t v2 = _Block_copy(v2);
  }
  std::string::size_type v4 = *(const void **)(v3 + 200);
  *(void *)(v3 + 200) = v2;
  if (v4) {
    _Block_release(v4);
  }
  int v5 = a1[6];
  if (v5) {
    dispatch_retain(v5);
  }
  long long v6 = *(NSObject **)(v3 + 208);
  *(void *)(v3 + 208) = v5;
  if (v6)
  {
    dispatch_release(v6);
  }
}

void __copy_helper_block_e8_40c47_ZTSN8dispatch8callbackIU13block_pointerFvbyEEE(uint64_t a1, uint64_t a2)
{
  std::string::size_type v4 = *(void **)(a2 + 40);
  if (v4) {
    std::string::size_type v4 = _Block_copy(v4);
  }
  int v5 = *(NSObject **)(a2 + 48);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v5;
  if (v5)
  {
    dispatch_retain(v5);
  }
}

void __destroy_helper_block_e8_40c47_ZTSN8dispatch8callbackIU13block_pointerFvbyEEE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 48);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 40);
  if (v3) {
    _Block_release(v3);
  }
}

void radio::ARIRFSCommandDriver::~ARIRFSCommandDriver(radio::ARIRFSCommandDriver *this)
{
  radio::ARIRFSCommandDriver::~ARIRFSCommandDriver(this);

  operator delete(v1);
}

{
  NSObject *v2;
  const void *v3;
  NSObject *v4;
  const void *v5;
  NSObject *v6;
  const void *v7;
  NSObject *v8;
  const void *v9;
  std::__shared_weak_count *v10;
  radio::RFSCommandDriver *v11;
  uint64_t vars8;

  *(void *)this = &unk_26E93CBB0;
  uint64_t v2 = *((void *)this + 30);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = (const void *)*((void *)this + 29);
  if (v3) {
    _Block_release(v3);
  }
  std::string::size_type v4 = *((void *)this + 28);
  if (v4) {
    dispatch_release(v4);
  }
  int v5 = (const void *)*((void *)this + 27);
  if (v5) {
    _Block_release(v5);
  }
  long long v6 = *((void *)this + 26);
  if (v6) {
    dispatch_release(v6);
  }
  uint64_t v7 = (const void *)*((void *)this + 25);
  if (v7) {
    _Block_release(v7);
  }
  long long v8 = *((void *)this + 24);
  if (v8) {
    dispatch_release(v8);
  }
  uint64_t v9 = (const void *)*((void *)this + 23);
  if (v9) {
    _Block_release(v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 22);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    uint64_t v11 = this;
  }
  else
  {
    uint64_t v11 = this;
  }
  radio::RFSCommandDriver::~RFSCommandDriver(v11);
}

uint64_t ctu::Loggable<radio::RFSCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x270F97428](a1 + 8);
}

size_t ctu::Loggable<radio::RFSCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(radio::RFSCommandDriver *a1@<X0>, void *a2@<X8>)
{
  Name = (const char *)radio::RFSCommandDriver::getName(a1);
  size_t result = strlen(Name);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    long long v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memmove(a2, Name, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<radio::RFSCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x270F978E0](a1 + 8);
}

void std::__shared_ptr_pointer<radio::ARIRFSCommandDriver *,std::shared_ptr<radio::ARIRFSCommandDriver> ctu::SharedSynchronizable<radio::RFSCommandDriver>::make_shared_ptr<radio::ARIRFSCommandDriver>(radio::ARIRFSCommandDriver*)::{lambda(radio::ARIRFSCommandDriver *)#1},std::allocator<radio::ARIRFSCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<radio::ARIRFSCommandDriver *,std::shared_ptr<radio::ARIRFSCommandDriver> ctu::SharedSynchronizable<radio::RFSCommandDriver>::make_shared_ptr<radio::ARIRFSCommandDriver>(radio::ARIRFSCommandDriver*)::{lambda(radio::ARIRFSCommandDriver *)#1},std::allocator<radio::ARIRFSCommandDriver>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<radio::ARIRFSCommandDriver *,std::shared_ptr<radio::ARIRFSCommandDriver> ctu::SharedSynchronizable<radio::RFSCommandDriver>::make_shared_ptr<radio::ARIRFSCommandDriver>(radio::ARIRFSCommandDriver*)::{lambda(radio::ARIRFSCommandDriver *)#1},std::allocator<radio::ARIRFSCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN5radio16RFSCommandDriverEE15make_shared_ptrINS1_19ARIRFSCommandDriver"
                     "EEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN5radio16RFSCommandDriverEE15make_shared_ptrINS1_19ARIRFSCo"
                                "mmandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN5radio16RFSCommandDriverEE15make_shared_ptrINS1_19ARIRFSCommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN5radio16RFSCommandDriverEE15make_shared_ptrINS1_19ARIRFSCommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<radio::ARIRFSCommandDriver> ctu::SharedSynchronizable<radio::RFSCommandDriver>::make_shared_ptr<radio::ARIRFSCommandDriver>(radio::ARIRFSCommandDriver*)::{lambda(radio::ARIRFSCommandDriver*)#1}::operator() const(radio::ARIRFSCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void *std::__function::__func<dispatch::callback<void({block_pointer})(unsigned int)>,std::allocator<dispatch::callback<void({block_pointer})(unsigned int)>>,void ()(int)>::~__func(void *a1)
{
  *a1 = &unk_26E93CD50;
  uint64_t v2 = a1[2];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = (const void *)a1[1];
  if (v3) {
    _Block_release(v3);
  }
  return a1;
}

void std::__function::__func<dispatch::callback<void({block_pointer})(unsigned int)>,std::allocator<dispatch::callback<void({block_pointer})(unsigned int)>>,void ()(int)>::~__func(void *__p)
{
  *long long __p = &unk_26E93CD50;
  uint64_t v2 = __p[2];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = (const void *)__p[1];
  if (v3) {
    _Block_release(v3);
  }

  operator delete(__p);
}

void *std::__function::__func<dispatch::callback<void({block_pointer})(unsigned int)>,std::allocator<dispatch::callback<void({block_pointer})(unsigned int)>>,void ()(int)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x18uLL);
  *uint64_t v2 = &unk_26E93CD50;
  unint64_t v3 = *(void **)(a1 + 8);
  if (v3) {
    unint64_t v3 = _Block_copy(v3);
  }
  std::string::size_type v4 = *(NSObject **)(a1 + 16);
  v2[1] = v3;
  v2[2] = v4;
  if (v4) {
    dispatch_retain(v4);
  }
  return v2;
}

void std::__function::__func<dispatch::callback<void({block_pointer})(unsigned int)>,std::allocator<dispatch::callback<void({block_pointer})(unsigned int)>>,void ()(int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26E93CD50;
  std::string::size_type v4 = *(void **)(a1 + 8);
  if (v4) {
    std::string::size_type v4 = _Block_copy(v4);
  }
  size_t v5 = *(NSObject **)(a1 + 16);
  a2[1] = v4;
  a2[2] = v5;
  if (v5)
  {
    dispatch_retain(v5);
  }
}

void std::__function::__func<dispatch::callback<void({block_pointer})(unsigned int)>,std::allocator<dispatch::callback<void({block_pointer})(unsigned int)>>,void ()(int)>::destroy(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 16);
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = *(const void **)(a1 + 8);
  if (v3) {
    _Block_release(v3);
  }
}

void std::__function::__func<dispatch::callback<void({block_pointer})(unsigned int)>,std::allocator<dispatch::callback<void({block_pointer})(unsigned int)>>,void ()(int)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = __p[2];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = (const void *)__p[1];
  if (v3) {
    _Block_release(v3);
  }

  operator delete(__p);
}

void std::__function::__func<dispatch::callback<void({block_pointer})(unsigned int)>,std::allocator<dispatch::callback<void({block_pointer})(unsigned int)>>,void ()(int)>::operator()(uint64_t a1, int *a2)
{
  int v3 = *a2;
  std::string::size_type v4 = *(const void **)(a1 + 8);
  if (v4) {
    size_t v5 = _Block_copy(v4);
  }
  else {
    size_t v5 = 0;
  }
  uint64_t v6 = *(NSObject **)(a1 + 16);
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 1174405120;
  v8[2] = ___ZNK8dispatch8callbackIU13block_pointerFvjEEclIJiEEEvDpT__block_invoke;
  v8[3] = &__block_descriptor_tmp_46_1;
  if (v5) {
    uint64_t v7 = _Block_copy(v5);
  }
  else {
    uint64_t v7 = 0;
  }
  aBlocunint64_t k = v7;
  int v10 = v3;
  dispatch_async(v6, v8);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v5) {
    _Block_release(v5);
  }
}

uint64_t std::__function::__func<dispatch::callback<void({block_pointer})(unsigned int)>,std::allocator<dispatch::callback<void({block_pointer})(unsigned int)>>,void ()(int)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "N8dispatch8callbackIU13block_pointerFvjEEE") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"N8dispatch8callbackIU13block_pointerFvjEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N8dispatch8callbackIU13block_pointerFvjEEE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N8dispatch8callbackIU13block_pointerFvjEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<dispatch::callback<void({block_pointer})(unsigned int)>,std::allocator<dispatch::callback<void({block_pointer})(unsigned int)>>,void ()(int)>::target_type()
{
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvjEEclIJiEEEvDpT__block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

void *__copy_helper_block_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvjEEE(uint64_t a1, uint64_t a2)
{
  size_t result = *(void **)(a2 + 32);
  if (result) {
    size_t result = _Block_copy(result);
  }
  *(void *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvjEEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  if (v1) {
    _Block_release(v1);
  }
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvbyEEclIJbiEEEvDpT__block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 44), *(int *)(a1 + 40));
}

void *__copy_helper_block_e8_32c44_ZTSN8dispatch5blockIU13block_pointerFvbyEEE(uint64_t a1, uint64_t a2)
{
  size_t result = *(void **)(a2 + 32);
  if (result) {
    size_t result = _Block_copy(result);
  }
  *(void *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c44_ZTSN8dispatch5blockIU13block_pointerFvbyEEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  if (v1) {
    _Block_release(v1);
  }
}

uint64_t ___ZN3ice6detail12wrapCallbackIiEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke(uint64_t a1)
{
  return 0;
}

void ___ZNK8dispatch8callbackIU13block_pointerFvNS_13group_sessionEEEclIJS1_EEEvDpT__block_invoke_0(uint64_t a1)
{
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvvEEclIJEEEvDpT__block_invoke_0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void ctu::SharedSynchronizable<radio::RFSCommandDriver>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  long long v8 = a1[2];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN5radio16RFSCommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_26E93CE98;
  block[5] = v5;
  uint64_t v12 = v7;
  p_uint64_t shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = a2;
  dispatch_async(v8, block);
  int v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN5radio16RFSCommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c53_ZTSNSt3__110shared_ptrIKN5radio16RFSCommandDriverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c53_ZTSNSt3__110shared_ptrIKN5radio16RFSCommandDriverEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke(uint64_t a1)
{
}

void dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::operator()<ctu::cf::CFSharedRef<__CFError> const&,ctu::cf::CFSharedRef<__CFDictionary const> const&>(uint64_t *a1, const void **a2, const void **a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  CFTypeRef v8 = v5;
  if (v5) {
    CFRetain(v5);
  }
  uint64_t v6 = *a3;
  CFTypeRef cf = v6;
  if (v6) {
    CFRetain(v6);
  }
  (*(void (**)(uint64_t, CFTypeRef *, CFTypeRef *))(v4 + 16))(v4, &v8, &cf);
  if (cf) {
    CFRelease(cf);
  }
  if (v8) {
    CFRelease(v8);
  }
}

void sub_235DEE9C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

CFTypeRef __copy_helper_block_e8_32c100_ZTSN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEE40c38_ZTSN3ctu2cf11CFSharedRefI9__CFErrorEE48c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(void *a1, void *a2)
{
  uint64_t v4 = (const void *)a2[4];
  if (!v4)
  {
    uint64_t v6 = (const void *)a2[5];
    a1[4] = 0;
    a1[5] = v6;
    if (!v6) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v5 = _Block_copy(v4);
  uint64_t v6 = (const void *)a2[5];
  a1[4] = v5;
  a1[5] = v6;
  if (v6) {
LABEL_5:
  }
    CFRetain(v6);
LABEL_6:
  CFTypeRef result = (CFTypeRef)a2[6];
  a1[6] = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_32c100_ZTSN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEE40c38_ZTSN3ctu2cf11CFSharedRefI9__CFErrorEE48c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(void *a1)
{
  uint64_t v2 = (const void *)a1[6];
  if (v2) {
    CFRelease(v2);
  }
  unint64_t v3 = (const void *)a1[5];
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)a1[4];
  if (v4) {
    _Block_release(v4);
  }
}

void ___ZN3ice6detail12wrapCallbackIZN5radio19ARIRFSCommandDriver16registerRFS_syncEbE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    unint64_t v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
    {
      uint64_t v5 = *(radio::ARIRFSCommandDriver **)(v2 + 16);
      uint64_t v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        uint64_t v7 = v6;
        if (!*(void *)v2)
        {
LABEL_54:
          if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        long long v33 = (int *)0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v32[2] = v8;
        v32[3] = v8;
        v32[0] = v8;
        v32[1] = v8;
        AriSdk::ARI_CsiFpRegisterRsp_SDK::ARI_CsiFpRegisterRsp_SDK((AriSdk::ARI_CsiFpRegisterRsp_SDK *)v32, a2);
        CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        *(void *)long long __p = operator new(0x20uLL);
        *(_OWORD *)&__p[8] = xmmword_235E72AD0;
        strcpy(*(char **)__p, "registering rfs-get-status");
        checkError((AriSdk::MsgBase *)v32, (uint64_t)__p, &cf);
        if ((__p[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)__p);
          if (cf) {
            int v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          }
          else {
            int v10 = 0;
          }
          if (v10) {
            goto LABEL_43;
          }
        }
        else
        {
          if (cf) {
            uint64_t v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          }
          else {
            uint64_t v9 = 0;
          }
          if (v9) {
            goto LABEL_43;
          }
        }
        if (AriSdk::ARI_CsiFpRegisterRsp_SDK::unpack((AriSdk::ARI_CsiFpRegisterRsp_SDK *)v32))
        {
          *(void *)long long __p = operator new(0x40uLL);
          *(_OWORD *)&__p[8] = xmmword_235E72AE0;
          strcpy(*(char **)__p, "Failed to unpack response in registering for RFS Get Status");
          CreateError();
          CFTypeRef v11 = cf;
          CFTypeRef cf = (CFTypeRef)v34.__r_.__value_.__r.__words[0];
          v34.__r_.__value_.__r.__words[0] = 0;
          if (v11)
          {
            CFRelease(v11);
            if (v34.__r_.__value_.__r.__words[0]) {
              CFRelease(v34.__r_.__value_.__l.__data_);
            }
          }
          if ((__p[23] & 0x80000000) == 0) {
            goto LABEL_43;
          }
          uint64_t v12 = *(void **)__p;
          goto LABEL_42;
        }
        int v13 = *v33;
        if (!*v33) {
          goto LABEL_43;
        }
        radio::ARIRFSCommandDriver::asString(*v33, (uint64_t)&v27);
        uint64_t v14 = std::string::insert(&v27, 0, "Error on enabling RFS Get Status result: ", 0x29uLL);
        long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
        v28.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v15;
        v14->__r_.__value_.__l.__size_ = 0;
        v14->__r_.__value_.__r.__words[2] = 0;
        v14->__r_.__value_.__r.__words[0] = 0;
        uint64_t v16 = std::string::append(&v28, ", value: ", 9uLL);
        long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
        v34.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v17;
        v16->__r_.__value_.__l.__size_ = 0;
        v16->__r_.__value_.__r.__words[2] = 0;
        v16->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v26, v13);
        if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v18 = &v26;
        }
        else {
          uint64_t v18 = (std::string *)v26.__r_.__value_.__r.__words[0];
        }
        if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v26.__r_.__value_.__l.__size_;
        }
        unint64_t v20 = std::string::append(&v34, (const std::string::value_type *)v18, size);
        long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
        *(void *)&__p[16] = *((void *)&v20->__r_.__value_.__l + 2);
        *(_OWORD *)long long __p = v21;
        v20->__r_.__value_.__l.__size_ = 0;
        v20->__r_.__value_.__r.__words[2] = 0;
        v20->__r_.__value_.__r.__words[0] = 0;
        CreateError();
        CFTypeRef v22 = cf;
        CFTypeRef cf = v29;
        CFTypeRef v29 = 0;
        if (v22)
        {
          CFRelease(v22);
          if (v29) {
            CFRelease(v29);
          }
        }
        if ((__p[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)__p);
          if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_33:
            if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_34;
            }
            goto LABEL_39;
          }
        }
        else if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_33;
        }
        operator delete(v26.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_34:
          if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_35;
          }
          goto LABEL_40;
        }
LABEL_39:
        operator delete(v34.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_35:
          if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_41;
          }
          goto LABEL_43;
        }
LABEL_40:
        operator delete(v28.__r_.__value_.__l.__data_);
        if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
        {
LABEL_41:
          uint64_t v12 = (void *)v27.__r_.__value_.__r.__words[0];
LABEL_42:
          operator delete(v12);
        }
LABEL_43:
        CFTypeRef v23 = cf;
        if (cf) {
          uint64_t v24 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          uint64_t v24 = 0;
        }
        if (v24)
        {
          uint64_t v25 = *((void *)v5 + 5);
          if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
          {
            LODWORD(v34.__r_.__value_.__l.__data_) = 138412290;
            *(std::string::size_type *)((char *)v34.__r_.__value_.__r.__words + 4) = (std::string::size_type)v23;
            _os_log_error_impl(&dword_235DB9000, v25, OS_LOG_TYPE_ERROR, "%@", (uint8_t *)&v34, 0xCu);
          }
        }
        else if (*(unsigned char *)(v2 + 24))
        {
          radio::ARIRFSCommandDriver::getRFSStatus_sync(v5);
        }
        if (cf) {
          CFRelease(cf);
        }
        MEMORY[0x237DF5580](v32);
        goto LABEL_54;
      }
    }
  }
}

void sub_235DEEEBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,CFTypeRef cf,char a35)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c80_ZTSNSt3__110shared_ptrIZN5radio19ARIRFSCommandDriver16registerRFS_syncEbE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c80_ZTSNSt3__110shared_ptrIZN5radio19ARIRFSCommandDriver16registerRFS_syncEbE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<radio::ARIRFSCommandDriver::registerRFS_sync(BOOL)::$_0,std::allocator<radio::ARIRFSCommandDriver::registerRFS_sync(BOOL)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93CF38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<radio::ARIRFSCommandDriver::registerRFS_sync(BOOL)::$_0,std::allocator<radio::ARIRFSCommandDriver::registerRFS_sync(BOOL)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93CF38;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<radio::ARIRFSCommandDriver::registerRFS_sync(BOOL)::$_0,std::allocator<radio::ARIRFSCommandDriver::registerRFS_sync(BOOL)::$_0>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_3(uint64_t a1)
{
  return 0;
}

void ___ZN3ice6detail12wrapCallbackIZN5radio19ARIRFSCommandDriver17getRFSStatus_syncEvE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    unint64_t v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      uint64_t v5 = (radio::ARIRFSCommandDriver *)v2[2];
      uint64_t v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        uint64_t v7 = v6;
        if (!*v2)
        {
LABEL_54:
          if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v45[3] = v8;
        long long v46 = v8;
        v45[1] = v8;
        v45[2] = v8;
        v45[0] = v8;
        AriSdk::ARI_CsiFpGetStatusRsp_SDK::ARI_CsiFpGetStatusRsp_SDK((AriSdk::ARI_CsiFpGetStatusRsp_SDK *)v45, a2);
        CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        *(void *)long long v47 = operator new(0x20uLL);
        *(_OWORD *)&v47[8] = xmmword_235E72AD0;
        strcpy(*(char **)v47, "registering rfs-get-status");
        checkError((AriSdk::MsgBase *)v45, (uint64_t)v47, &cf);
        if ((v47[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)v47);
          if (cf) {
            int v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          }
          else {
            int v10 = 0;
          }
          if (v10) {
            goto LABEL_45;
          }
        }
        else
        {
          if (cf) {
            uint64_t v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          }
          else {
            uint64_t v9 = 0;
          }
          if (v9) {
            goto LABEL_45;
          }
        }
        if (AriSdk::ARI_CsiFpGetStatusRsp_SDK::unpack((AriSdk::ARI_CsiFpGetStatusRsp_SDK *)v45))
        {
          *(void *)long long v47 = operator new(0x40uLL);
          *(_OWORD *)&v47[8] = xmmword_235E72AE0;
          strcpy(*(char **)v47, "Failed to unpack response in registering for RFS Get Status");
          CreateError();
          CFTypeRef v11 = cf;
          CFTypeRef cf = v41[0];
          v41[0] = 0;
          if (v11) {
            CFRelease(v11);
          }
          if ((v47[23] & 0x80000000) != 0)
          {
            operator delete(*(void **)v47);
            CFTypeRef v12 = cf;
            if (cf) {
              int v13 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
            }
            else {
              int v13 = 0;
            }
            if (!v13) {
              goto LABEL_51;
            }
LABEL_49:
            uint64_t v32 = *((void *)v5 + 5);
            if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
            {
              LODWORD(v50.__r_.__value_.__l.__data_) = 138412290;
              *(std::string::size_type *)((char *)v50.__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
              _os_log_error_impl(&dword_235DB9000, v32, OS_LOG_TYPE_ERROR, "%@", (uint8_t *)&v50, 0xCu);
            }
            goto LABEL_51;
          }
          goto LABEL_45;
        }
        int v14 = *(_DWORD *)v46;
        int v16 = **((_DWORD **)&v46 + 1);
        int v15 = *(_DWORD *)(*((void *)&v46 + 1) + 4);
        int v17 = *(_DWORD *)(*((void *)&v46 + 1) + 8);
        int v18 = *(_DWORD *)(*((void *)&v46 + 1) + 12);
        int v19 = *(_DWORD *)(*((void *)&v46 + 1) + 16);
        long long v35 = *(_OWORD *)(*((void *)&v46 + 1) + 20);
        long long v36 = *(_OWORD *)(*((void *)&v46 + 1) + 36);
        long long v37 = *(_OWORD *)(*((void *)&v46 + 1) + 52);
        int v38 = *(_DWORD *)(*((void *)&v46 + 1) + 68);
        if (!*(_DWORD *)v46) {
          goto LABEL_39;
        }
        radio::ARIRFSCommandDriver::asString(v14, (uint64_t)&v40);
        unint64_t v20 = std::string::insert(&v40, 0, "Error on getting RFS Status result: ", 0x24uLL);
        long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
        v50.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v21;
        v20->__r_.__value_.__l.__size_ = 0;
        v20->__r_.__value_.__r.__words[2] = 0;
        v20->__r_.__value_.__r.__words[0] = 0;
        CFTypeRef v22 = std::string::append(&v50, ", value: ", 9uLL);
        long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        *(void *)&v47[16] = *((void *)&v22->__r_.__value_.__l + 2);
        *(_OWORD *)long long v47 = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v39, v14);
        if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v24 = &v39;
        }
        else {
          uint64_t v24 = (std::string *)v39.__r_.__value_.__r.__words[0];
        }
        if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v39.__r_.__value_.__l.__size_;
        }
        std::string v26 = std::string::append((std::string *)v47, (const std::string::value_type *)v24, size);
        long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        std::string::size_type v42 = v26->__r_.__value_.__r.__words[2];
        *(_OWORD *)uint64_t v41 = v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        CreateError();
        CFTypeRef v29 = v43;
        CFTypeRef v28 = cf;
        CFTypeRef v43 = 0;
        CFTypeRef cf = v29;
        if (v28)
        {
          CFRelease(v28);
          if (v43) {
            CFRelease(v43);
          }
        }
        if (SHIBYTE(v42) < 0)
        {
          operator delete((void *)v41[0]);
          if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_36:
            if ((v47[23] & 0x80000000) == 0) {
              goto LABEL_37;
            }
            goto LABEL_59;
          }
        }
        else if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_36;
        }
        operator delete(v39.__r_.__value_.__l.__data_);
        if ((v47[23] & 0x80000000) == 0)
        {
LABEL_37:
          if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_38;
          }
LABEL_60:
          operator delete(v50.__r_.__value_.__l.__data_);
          if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_61;
          }
LABEL_39:
          std::string v30 = *((void *)v5 + 5);
          if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_40;
          }
          goto LABEL_62;
        }
LABEL_59:
        operator delete(*(void **)v47);
        if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_38:
          if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_39;
          }
LABEL_61:
          operator delete(v40.__r_.__value_.__l.__data_);
          std::string v30 = *((void *)v5 + 5);
          if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
          {
LABEL_40:
            if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG)) {
              goto LABEL_41;
            }
            goto LABEL_67;
          }
LABEL_62:
          radio::ARIRFSCommandDriver::asString(v14, (uint64_t)v47);
          long long v33 = v47;
          if (v47[23] < 0) {
            long long v33 = *(unsigned char **)v47;
          }
          LODWORD(v50.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)v50.__r_.__value_.__r.__words + 4) = (std::string::size_type)v33;
          _os_log_debug_impl(&dword_235DB9000, v30, OS_LOG_TYPE_DEBUG, "#D RFS Status: %s\n", (uint8_t *)&v50, 0xCu);
          if ((v47[23] & 0x80000000) != 0) {
            operator delete(*(void **)v47);
          }
          std::string v30 = *((void *)v5 + 5);
          if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
          {
LABEL_41:
            if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG)) {
              goto LABEL_42;
            }
            goto LABEL_68;
          }
LABEL_67:
          *(void *)long long v47 = 67110144;
          *(_WORD *)&v47[8] = 1024;
          *(_DWORD *)&v47[10] = v16;
          *(_WORD *)&v47[14] = 1024;
          *(_DWORD *)&v47[16] = v15;
          *(_WORD *)&unsigned char v47[20] = 1024;
          *(_DWORD *)&v47[22] = v17;
          __int16 v48 = 1024;
          int v49 = v18;
          _os_log_debug_impl(&dword_235DB9000, v30, OS_LOG_TYPE_DEBUG, "#D \tTable[%d]\tError Code: %d, Data Type: %d, Offset: %d Group ID: %d\n", v47, 0x20u);
          std::string v30 = *((void *)v5 + 5);
          if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
          {
LABEL_42:
            if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG)) {
              goto LABEL_43;
            }
            goto LABEL_69;
          }
LABEL_68:
          *(void *)long long v47 = 0x104000500;
          *(_WORD *)&v47[8] = 1024;
          *(_DWORD *)&v47[10] = v19;
          *(_WORD *)&v47[14] = 1024;
          *(_DWORD *)&v47[16] = v35;
          *(_WORD *)&unsigned char v47[20] = 1024;
          *(_DWORD *)&v47[22] = DWORD1(v35);
          __int16 v48 = 1024;
          int v49 = DWORD2(v35);
          _os_log_debug_impl(&dword_235DB9000, v30, OS_LOG_TYPE_DEBUG, "#D \tTable[%d]\tError Code: %d, Data Type: %d, Offset: %d Group ID: %d\n", v47, 0x20u);
          std::string v30 = *((void *)v5 + 5);
          if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
          {
LABEL_43:
            if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG)) {
              goto LABEL_44;
            }
LABEL_70:
            *(_DWORD *)long long v47 = 67109120;
            *(_DWORD *)&v47[4] = HIDWORD(v36);
            _os_log_debug_impl(&dword_235DB9000, v30, OS_LOG_TYPE_DEBUG, "#D \tNumber of Errors: %d\n", v47, 8u);
            std::string v30 = *((void *)v5 + 5);
            if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG)) {
              goto LABEL_71;
            }
LABEL_45:
            CFTypeRef v12 = cf;
            if (cf) {
              uint64_t v31 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
            }
            else {
              uint64_t v31 = 0;
            }
            if (v31) {
              goto LABEL_49;
            }
            goto LABEL_51;
          }
LABEL_69:
          *(void *)long long v47 = 0x204000500;
          *(_WORD *)&v47[8] = 1024;
          *(_DWORD *)&v47[10] = HIDWORD(v35);
          *(_WORD *)&v47[14] = 1024;
          *(_DWORD *)&v47[16] = v36;
          *(_WORD *)&unsigned char v47[20] = 1024;
          *(_DWORD *)&v47[22] = DWORD1(v36);
          __int16 v48 = 1024;
          int v49 = DWORD2(v36);
          _os_log_debug_impl(&dword_235DB9000, v30, OS_LOG_TYPE_DEBUG, "#D \tTable[%d]\tError Code: %d, Data Type: %d, Offset: %d Group ID: %d\n", v47, 0x20u);
          std::string v30 = *((void *)v5 + 5);
          if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
          {
LABEL_44:
            if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG)) {
              goto LABEL_45;
            }
LABEL_71:
            *(_DWORD *)long long v47 = 67110144;
            *(_DWORD *)&v47[4] = v37;
            *(_WORD *)&v47[8] = 1024;
            *(_DWORD *)&v47[10] = DWORD1(v37);
            *(_WORD *)&v47[14] = 1024;
            *(_DWORD *)&v47[16] = DWORD2(v37);
            *(_WORD *)&unsigned char v47[20] = 1024;
            *(_DWORD *)&v47[22] = HIDWORD(v37);
            __int16 v48 = 1024;
            int v49 = v38;
            _os_log_debug_impl(&dword_235DB9000, v30, OS_LOG_TYPE_DEBUG, "#D \tSpare: [%d,%d,%d,%d,%d]\n", v47, 0x20u);
            CFTypeRef v12 = cf;
            if (cf) {
              std::string v34 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
            }
            else {
              std::string v34 = 0;
            }
            if (v34) {
              goto LABEL_49;
            }
LABEL_51:
            radio::ARIRFSCommandDriver::registerRFS_sync(v5, 0);
            if (cf) {
              CFRelease(cf);
            }
            MEMORY[0x237DF5660](v45);
            goto LABEL_54;
          }
          goto LABEL_70;
        }
        goto LABEL_60;
      }
    }
  }
}

void sub_235DEF930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,CFTypeRef cf,char a38)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c81_ZTSNSt3__110shared_ptrIZN5radio19ARIRFSCommandDriver17getRFSStatus_syncEvE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c81_ZTSNSt3__110shared_ptrIZN5radio19ARIRFSCommandDriver17getRFSStatus_syncEvE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<radio::ARIRFSCommandDriver::getRFSStatus_sync(void)::$_0,std::allocator<radio::ARIRFSCommandDriver::getRFSStatus_sync(void)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93CFB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<radio::ARIRFSCommandDriver::getRFSStatus_sync(void)::$_0,std::allocator<radio::ARIRFSCommandDriver::getRFSStatus_sync(void)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93CFB8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<radio::ARIRFSCommandDriver::getRFSStatus_sync(void)::$_0,std::allocator<radio::ARIRFSCommandDriver::getRFSStatus_sync(void)::$_0>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN3ice6detail12wrapCallbackIZN5radio19ARIRFSCommandDriver20getRFSStatus_V2_syncEvE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    unint64_t v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      uint64_t v5 = v2[2];
      uint64_t v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        uint64_t v7 = v6;
        if (!*v2)
        {
LABEL_54:
          if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v45[3] = v8;
        long long v46 = v8;
        v45[1] = v8;
        v45[2] = v8;
        v45[0] = v8;
        AriSdk::ARI_CsiFpGetStatusRspV2_SDK::ARI_CsiFpGetStatusRspV2_SDK((AriSdk::ARI_CsiFpGetStatusRspV2_SDK *)v45, a2);
        CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        *(void *)long long v47 = operator new(0x20uLL);
        *(_OWORD *)&v47[8] = xmmword_235E72AD0;
        strcpy(*(char **)v47, "registering rfs-get-status");
        checkError((AriSdk::MsgBase *)v45, (uint64_t)v47, &cf);
        if ((v47[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)v47);
          if (cf) {
            int v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          }
          else {
            int v10 = 0;
          }
          if (v10) {
            goto LABEL_45;
          }
        }
        else
        {
          if (cf) {
            uint64_t v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          }
          else {
            uint64_t v9 = 0;
          }
          if (v9) {
            goto LABEL_45;
          }
        }
        if (AriSdk::ARI_CsiFpGetStatusRspV2_SDK::unpack((AriSdk::ARI_CsiFpGetStatusRspV2_SDK *)v45))
        {
          *(void *)long long v47 = operator new(0x40uLL);
          *(_OWORD *)&v47[8] = xmmword_235E72AE0;
          strcpy(*(char **)v47, "Failed to unpack response in registering for RFS Get Status");
          CreateError();
          CFTypeRef v11 = cf;
          CFTypeRef cf = v41[0];
          v41[0] = 0;
          if (v11) {
            CFRelease(v11);
          }
          if ((v47[23] & 0x80000000) != 0)
          {
            operator delete(*(void **)v47);
            CFTypeRef v12 = cf;
            if (cf) {
              int v13 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
            }
            else {
              int v13 = 0;
            }
            if (!v13) {
              goto LABEL_51;
            }
LABEL_49:
            uint64_t v32 = *(NSObject **)(v5 + 40);
            if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
            {
              LODWORD(v50.__r_.__value_.__l.__data_) = 138412290;
              *(std::string::size_type *)((char *)v50.__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
              _os_log_error_impl(&dword_235DB9000, v32, OS_LOG_TYPE_ERROR, "%@", (uint8_t *)&v50, 0xCu);
              CFTypeRef v12 = cf;
            }
            goto LABEL_51;
          }
          goto LABEL_45;
        }
        int v14 = *(_DWORD *)v46;
        int v16 = **((_DWORD **)&v46 + 1);
        int v15 = *(_DWORD *)(*((void *)&v46 + 1) + 4);
        int v18 = *(_DWORD *)(*((void *)&v46 + 1) + 8);
        int v17 = *(_DWORD *)(*((void *)&v46 + 1) + 12);
        int v19 = *(_DWORD *)(*((void *)&v46 + 1) + 16);
        long long v35 = *(_OWORD *)(*((void *)&v46 + 1) + 20);
        uint64_t v36 = *(void *)(*((void *)&v46 + 1) + 36);
        int v37 = *(_DWORD *)(*((void *)&v46 + 1) + 44);
        uint64_t v38 = *(void *)(*((void *)&v46 + 1) + 64);
        if (!*(_DWORD *)v46) {
          goto LABEL_39;
        }
        radio::ARIRFSCommandDriver::asString(v14, (uint64_t)&v40);
        unint64_t v20 = std::string::insert(&v40, 0, "Error on getting RFS Status result: ", 0x24uLL);
        long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
        v50.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v21;
        v20->__r_.__value_.__l.__size_ = 0;
        v20->__r_.__value_.__r.__words[2] = 0;
        v20->__r_.__value_.__r.__words[0] = 0;
        CFTypeRef v22 = std::string::append(&v50, ", value: ", 9uLL);
        long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        *(void *)&v47[16] = *((void *)&v22->__r_.__value_.__l + 2);
        *(_OWORD *)long long v47 = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v39, v14);
        if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v24 = &v39;
        }
        else {
          uint64_t v24 = (std::string *)v39.__r_.__value_.__r.__words[0];
        }
        if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v39.__r_.__value_.__l.__size_;
        }
        std::string v26 = std::string::append((std::string *)v47, (const std::string::value_type *)v24, size);
        long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        std::string::size_type v42 = v26->__r_.__value_.__r.__words[2];
        *(_OWORD *)uint64_t v41 = v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        CreateError();
        CFTypeRef v29 = v43;
        CFTypeRef v28 = cf;
        CFTypeRef v43 = 0;
        CFTypeRef cf = v29;
        if (v28)
        {
          CFRelease(v28);
          if (v43) {
            CFRelease(v43);
          }
        }
        if (SHIBYTE(v42) < 0)
        {
          operator delete((void *)v41[0]);
          if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_36:
            if ((v47[23] & 0x80000000) == 0) {
              goto LABEL_37;
            }
            goto LABEL_59;
          }
        }
        else if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_36;
        }
        operator delete(v39.__r_.__value_.__l.__data_);
        if ((v47[23] & 0x80000000) == 0)
        {
LABEL_37:
          if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_38;
          }
LABEL_60:
          operator delete(v50.__r_.__value_.__l.__data_);
          if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_61;
          }
LABEL_39:
          std::string v30 = *(NSObject **)(v5 + 40);
          if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_40;
          }
          goto LABEL_62;
        }
LABEL_59:
        operator delete(*(void **)v47);
        if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_38:
          if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_39;
          }
LABEL_61:
          operator delete(v40.__r_.__value_.__l.__data_);
          std::string v30 = *(NSObject **)(v5 + 40);
          if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
          {
LABEL_40:
            if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG)) {
              goto LABEL_41;
            }
            goto LABEL_67;
          }
LABEL_62:
          radio::ARIRFSCommandDriver::asString(v14, (uint64_t)v47);
          long long v33 = v47;
          if (v47[23] < 0) {
            long long v33 = *(unsigned char **)v47;
          }
          LODWORD(v50.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)v50.__r_.__value_.__r.__words + 4) = (std::string::size_type)v33;
          _os_log_debug_impl(&dword_235DB9000, v30, OS_LOG_TYPE_DEBUG, "#D RFS Status: %s\n", (uint8_t *)&v50, 0xCu);
          if ((v47[23] & 0x80000000) != 0) {
            operator delete(*(void **)v47);
          }
          std::string v30 = *(NSObject **)(v5 + 40);
          if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
          {
LABEL_41:
            if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG)) {
              goto LABEL_42;
            }
            goto LABEL_68;
          }
LABEL_67:
          *(void *)long long v47 = 67110144;
          *(_WORD *)&v47[8] = 1024;
          *(_DWORD *)&v47[10] = v16;
          *(_WORD *)&v47[14] = 1024;
          *(_DWORD *)&v47[16] = v15;
          *(_WORD *)&unsigned char v47[20] = 1024;
          *(_DWORD *)&v47[22] = v18;
          __int16 v48 = 1024;
          int v49 = v17;
          _os_log_debug_impl(&dword_235DB9000, v30, OS_LOG_TYPE_DEBUG, "#D \tTable[%d]\tError Code: %d, Data Type: %d, Offset: %d Group ID: %d\n", v47, 0x20u);
          std::string v30 = *(NSObject **)(v5 + 40);
          if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
          {
LABEL_42:
            if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG)) {
              goto LABEL_43;
            }
            goto LABEL_69;
          }
LABEL_68:
          *(void *)long long v47 = 0x104000500;
          *(_WORD *)&v47[8] = 1024;
          *(_DWORD *)&v47[10] = v19;
          *(_WORD *)&v47[14] = 1024;
          *(_DWORD *)&v47[16] = v35;
          *(_WORD *)&unsigned char v47[20] = 1024;
          *(_DWORD *)&v47[22] = DWORD1(v35);
          __int16 v48 = 1024;
          int v49 = DWORD2(v35);
          _os_log_debug_impl(&dword_235DB9000, v30, OS_LOG_TYPE_DEBUG, "#D \tTable[%d]\tError Code: %d, Data Type: %d, Offset: %d Group ID: %d\n", v47, 0x20u);
          std::string v30 = *(NSObject **)(v5 + 40);
          if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
          {
LABEL_43:
            if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG)) {
              goto LABEL_44;
            }
LABEL_70:
            *(_DWORD *)long long v47 = 67109120;
            *(_DWORD *)&v47[4] = v38;
            _os_log_debug_impl(&dword_235DB9000, v30, OS_LOG_TYPE_DEBUG, "#D \tNumber of Errors: %d\n", v47, 8u);
            std::string v30 = *(NSObject **)(v5 + 40);
            if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG)) {
              goto LABEL_71;
            }
LABEL_45:
            CFTypeRef v12 = cf;
            if (cf) {
              uint64_t v31 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
            }
            else {
              uint64_t v31 = 0;
            }
            if (v31) {
              goto LABEL_49;
            }
            goto LABEL_51;
          }
LABEL_69:
          *(void *)long long v47 = 0x204000500;
          *(_WORD *)&v47[8] = 1024;
          *(_DWORD *)&v47[10] = HIDWORD(v35);
          *(_WORD *)&v47[14] = 1024;
          *(_DWORD *)&v47[16] = v36;
          *(_WORD *)&unsigned char v47[20] = 1024;
          *(_DWORD *)&v47[22] = HIDWORD(v36);
          __int16 v48 = 1024;
          int v49 = v37;
          _os_log_debug_impl(&dword_235DB9000, v30, OS_LOG_TYPE_DEBUG, "#D \tTable[%d]\tError Code: %d, Data Type: %d, Offset: %d Group ID: %d\n", v47, 0x20u);
          std::string v30 = *(NSObject **)(v5 + 40);
          if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
          {
LABEL_44:
            if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG)) {
              goto LABEL_45;
            }
LABEL_71:
            *(_DWORD *)long long v47 = 67110144;
            *(_DWORD *)&v47[4] = HIDWORD(v38);
            *(_WORD *)&v47[8] = 1024;
            *(_WORD *)&v47[14] = 1024;
            *(_WORD *)&unsigned char v47[20] = 1024;
            __int16 v48 = 1024;
            _os_log_debug_impl(&dword_235DB9000, v30, OS_LOG_TYPE_DEBUG, "#D \tSpare: [%d,%d,%d,%d,%d]\n", v47, 0x20u);
            CFTypeRef v12 = cf;
            if (cf) {
              std::string v34 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
            }
            else {
              std::string v34 = 0;
            }
            if (v34) {
              goto LABEL_49;
            }
LABEL_51:
            if (v12) {
              CFRelease(v12);
            }
            MEMORY[0x237DF5920](v45);
            goto LABEL_54;
          }
          goto LABEL_70;
        }
        goto LABEL_60;
      }
    }
  }
}

void sub_235DF0350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,CFTypeRef cf,char a36)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c84_ZTSNSt3__110shared_ptrIZN5radio19ARIRFSCommandDriver20getRFSStatus_V2_syncEvE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c84_ZTSNSt3__110shared_ptrIZN5radio19ARIRFSCommandDriver20getRFSStatus_V2_syncEvE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<radio::ARIRFSCommandDriver::getRFSStatus_V2_sync(void)::$_0,std::allocator<radio::ARIRFSCommandDriver::getRFSStatus_V2_sync(void)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93D038;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<radio::ARIRFSCommandDriver::getRFSStatus_V2_sync(void)::$_0,std::allocator<radio::ARIRFSCommandDriver::getRFSStatus_V2_sync(void)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93D038;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<radio::ARIRFSCommandDriver::getRFSStatus_V2_sync(void)::$_0,std::allocator<radio::ARIRFSCommandDriver::getRFSStatus_V2_sync(void)::$_0>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

std::string *abm::trace::getBasebandTraceDirSuffix@<X0>(abm::trace *this@<X0>, std::string *a2@<X8>)
{
  int v2 = (int)this;
  memset(a2, 170, sizeof(std::string));
  *((unsigned char *)&a2->__r_.__value_.__s + 23) = 0;
  a2->__r_.__value_.__s.__data_[0] = 0;
  CFTypeRef result = (std::string *)capabilities::radio::vendor(this);
  if ((result - 2) >= 2)
  {
    if (result != 1) {
      return result;
    }
    if (v2)
    {
      *((unsigned char *)&a2->__r_.__value_.__s + 23) = 5;
      strcpy((char *)a2, "-qdss");
      return result;
    }
    uint64_t v5 = &abm::trace::kEURTraceSnapshotDirectorySuffix;
  }
  else
  {
    uint64_t v5 = &abm::trace::kICETraceSnapshotDirectorySuffix;
  }
  return std::string::__assign_external(a2, *v5);
}

void sub_235DF0688(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    uint64_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void abm::trace::getCoreDumpDirSuffix(std::string *a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_0, memory_order_acquire) & 1) == 0)
  {
    size_t v4 = (capabilities::radio *)__cxa_guard_acquire(&_MergedGlobals_0);
    if (v4)
    {
      int v5 = capabilities::radio::maverick(v4);
      uint64_t v6 = &abm::trace::kEURCoreDumpSnapshotDirectorySuffix;
      if (!v5) {
        uint64_t v6 = &abm::trace::kCoreDumpSnapshotDirectorySuffix;
      }
      std::string::basic_string[abi:ne180100]<0>(&xmmword_26AB826C8, *v6);
      __cxa_guard_release(&_MergedGlobals_0);
    }
  }
  if (byte_26AB826DF < 0)
  {
    long long v3 = xmmword_26AB826C8;
    std::string::__init_copy_ctor_external(a1, (const std::string::value_type *)v3, *((std::string::size_type *)&v3 + 1));
  }
  else
  {
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = xmmword_26AB826C8;
    a1->__r_.__value_.__r.__words[2] = unk_26AB826D8;
  }
}

void sub_235DF0824(_Unwind_Exception *a1)
{
}

uint64_t abm::trace::isSupported(uint64_t a1)
{
  uint64_t v1 = (const char *)a1;
  int v2 = *(char *)(a1 + 23);
  if (v2 < 0)
  {
    long long v3 = (capabilities::radio *)strcasecmp(*(const char **)a1, (const char *)abm::trace::kDIAG);
    if (v3)
    {
LABEL_3:
      size_t v4 = v1;
      if ((v2 & 0x80) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else
  {
    long long v3 = (capabilities::radio *)strcasecmp((const char *)a1, (const char *)abm::trace::kDIAG);
    if (v3) {
      goto LABEL_3;
    }
  }
  if (capabilities::radio::maverick(v3)) {
    return 1;
  }
  LOBYTE(v2) = v1[23];
  size_t v4 = v1;
  if ((v2 & 0x80) == 0)
  {
LABEL_4:
    int v5 = (capabilities::radio *)strcasecmp(v4, (const char *)abm::trace::kICETrace);
    if (v5) {
      goto LABEL_5;
    }
LABEL_12:
    if (capabilities::radio::ice(v5)) {
      return 1;
    }
    LOBYTE(v2) = v1[23];
    if ((v2 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_11:
  int v5 = (capabilities::radio *)strcasecmp(*(const char **)v1, (const char *)abm::trace::kICETrace);
  if (!v5) {
    goto LABEL_12;
  }
LABEL_5:
  if ((v2 & 0x80) == 0)
  {
LABEL_6:
    uint64_t v6 = v1;
    if (!strcasecmp(v1, (const char *)abm::trace::kBasebandTrace)) {
      return 1;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t v6 = *(const char **)v1;
  if (!strcasecmp(*(const char **)v1, (const char *)abm::trace::kBasebandTrace)) {
    return 1;
  }
LABEL_15:
  uint64_t v7 = (capabilities::radio *)strcasecmp(v6, (const char *)abm::trace::kEURCoreDump);
  if (v7)
  {
    if ((v2 & 0x80) == 0) {
      goto LABEL_17;
    }
  }
  else
  {
    if (capabilities::radio::maverick(v7)) {
      return 1;
    }
    if ((v1[23] & 0x80) == 0)
    {
LABEL_17:
      if (!strcasecmp(v1, (const char *)abm::trace::kCoreDump)
        || !strcasecmp(v1, (const char *)abm::trace::kSystemLogs))
      {
        return 1;
      }
      if (!strcasecmp(v1, (const char *)abm::trace::kCompression)) {
        goto LABEL_40;
      }
      if (strcasecmp(v1, (const char *)abm::trace::kBasebandIPC))
      {
        if (!strcasecmp(v1, (const char *)abm::trace::kIPC)
          || !strcasecmp(v1, "KernelPCI")
          || !strcasecmp(v1, (const char *)abm::trace::kTapToRadar))
        {
          goto LABEL_40;
        }
LABEL_34:
        if (strcasecmp(v1, (const char *)abm::trace::kProfile))
        {
          if (strcasecmp(v1, (const char *)abm::trace::kTraceTailspin)
            && strcasecmp(v1, "Settings")
            && strcasecmp(v1, "LogFilter"))
          {
            return 0;
          }
          goto LABEL_40;
        }
        return 1;
      }
      goto LABEL_43;
    }
  }
  uint64_t v1 = *(const char **)v1;
  if (!strcasecmp(v1, (const char *)abm::trace::kCoreDump) || !strcasecmp(v1, (const char *)abm::trace::kSystemLogs)) {
    return 1;
  }
  if (!strcasecmp(v1, (const char *)abm::trace::kCompression)) {
    goto LABEL_40;
  }
  if (strcasecmp(v1, (const char *)abm::trace::kBasebandIPC))
  {
    if (!strcasecmp(v1, (const char *)abm::trace::kIPC)
      || !strcasecmp(v1, "KernelPCI")
      || !strcasecmp(v1, (const char *)abm::trace::kTapToRadar))
    {
LABEL_40:
      return MEMORY[0x270F96DB0]();
    }
    goto LABEL_34;
  }
LABEL_43:

  return MEMORY[0x270F96D80]();
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s)
{
  size_t v4 = strlen(__s);

  return std::string::__assign_external(this, __s, v4);
}

void abm::debug::registerLogServer(uint64_t a1)
{
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZN3abm5debugL14sLogServerInitERNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_3;
  void block[4] = a1;
  if (abm::debug::sLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce != -1) {
    dispatch_once(&abm::debug::sLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
  }
}

void ___ZN3abm5debugL14sLogServerInitERNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke(uint64_t a1)
{
  xpc_object_t xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  ctu::LogServer::getConfig((uint64_t *)&xdict, **(ctu::LogServer ***)(a1 + 32));
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kDomainLogLevels");
  xpc_object_t v3 = value;
  uint64_t v4 = MEMORY[0x263EF8708];
  if (value)
  {
    xpc_retain(value);
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    if (!v3)
    {
      xpc_object_t v5 = xpc_null_create();
      xpc_object_t v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x237DF76E0](v3) == v4)
  {
    xpc_retain(v3);
    xpc_object_t v5 = v3;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
  }
LABEL_8:
  xpc_release(v3);
  if (MEMORY[0x237DF76E0](v5) == v4)
  {
    xpc_object_t v7 = v5;
  }
  else
  {
    xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
    if (v6 || (xpc_object_t v6 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x237DF76E0](v6) == v4)
      {
        xpc_retain(v6);
        xpc_object_t v7 = v6;
      }
      else
      {
        xpc_object_t v7 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v7 = xpc_null_create();
      xpc_object_t v6 = 0;
    }
    xpc_release(v6);
    xpc_object_t v8 = xpc_null_create();
    xpc_release(v5);
    xpc_release(v8);
  }
  xpc_object_t v9 = xpc_int64_create(1);
  if (!v9) {
    xpc_object_t v9 = xpc_null_create();
  }
  xpc_dictionary_set_value(v7, "libetl", v9);
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  xpc_object_t v11 = xpc_int64_create(1);
  if (!v11) {
    xpc_object_t v11 = xpc_null_create();
  }
  xpc_dictionary_set_value(v7, "libtu", v11);
  xpc_object_t v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  xpc_object_t v13 = xpc_int64_create(1);
  if (!v13) {
    xpc_object_t v13 = xpc_null_create();
  }
  xpc_dictionary_set_value(v7, "trace.diag.cfg", v13);
  xpc_object_t v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  xpc_object_t v15 = xpc_int64_create(1);
  if (!v15) {
    xpc_object_t v15 = xpc_null_create();
  }
  xpc_dictionary_set_value(v7, "trace.diag.svc", v15);
  xpc_object_t v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  xpc_object_t v17 = xpc_int64_create(1);
  if (!v17) {
    xpc_object_t v17 = xpc_null_create();
  }
  xpc_dictionary_set_value(v7, "libktl", v17);
  xpc_object_t v18 = xpc_null_create();
  xpc_release(v17);
  xpc_release(v18);
  if (v7)
  {
    xpc_retain(v7);
    xpc_object_t v19 = v7;
  }
  else
  {
    xpc_object_t v19 = xpc_null_create();
  }
  xpc_dictionary_set_value(xdict, "kDomainLogLevels", v19);
  xpc_object_t v20 = xpc_null_create();
  xpc_release(v19);
  xpc_release(v20);
  xpc_object_t object = xdict;
  if (xdict) {
    xpc_retain(xdict);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  ctu::LogServer::updateConfig();
  xpc_release(object);
  long long v21 = (capabilities::abs *)operator new(0x10uLL);
  CFTypeRef v22 = *(void **)(a1 + 32);
  *(void *)long long v21 = *v22;
  uint64_t v23 = v22[1];
  *((void *)v21 + 1) = v23;
  if (v23) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 16), 1uLL, memory_order_relaxed);
  }
  _MergedGlobals_1 = (uint64_t)v21;
  if (!qword_26AB826E8)
  {
    long long v21 = (capabilities::abs *)os_log_create("com.apple.telephony.abm", "libtu");
    qword_26AB826E8 = (uint64_t)v21;
  }
  capabilities::abs::TUDebugFlags(v21);
  TelephonyUtilDebugSetFlags();
  uint64_t v24 = (capabilities::radio *)TelephonyUtilDebugRegisterDelegate();
  uint64_t v25 = (capabilities::radio *)capabilities::radio::ice(v24);
  if (v25)
  {
    if (!qword_26AB826F0) {
      qword_26AB826F0 = (uint64_t)os_log_create("com.apple.telephony.abm", "libktl");
    }
    KTLDebugRegisterDelegate();
    KTLDebugSetFlags();
  }
  else
  {
    capabilities::radio::maverick(v25);
  }
  if (!qword_26AB826F8) {
    qword_26AB826F8 = (uint64_t)os_log_create("com.apple.telephony.abm", "bbu");
  }
  BBUpdaterRegisterGlobalLogSink();
  xpc_release(v7);
  xpc_release(xdict);
}

void sub_235DF1050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, xpc_object_t a10)
{
  xpc_release(object);
  xpc_release(v10);
  xpc_release(a10);
  _Unwind_Resume(a1);
}

void abm::debug::handleDebugPrintTelephonyUtil(abm::debug *this, const char *a2, const char *a3, char *a4)
{
}

void abm::debug::handleDebugPrintBinaryTelephonyUtil(uint64_t a1, int a2, uint64_t a3, int a4)
{
  xpc_object_t v6 = "misc";
  if (!a2) {
    xpc_object_t v6 = "send";
  }
  if (a2 == 1) {
    xpc_object_t v7 = "recv";
  }
  else {
    xpc_object_t v7 = v6;
  }
  abm::debug::handleDebugPrintBinary(a1, 0, (uint64_t)v7, a3, a4);
}

void abm::debug::handleDebugPrintKTL(abm::debug *this, const char *a2, const char *a3, char *a4)
{
}

void abm::debug::handleErrorPrintKTL(abm::debug *this, const char *a2, const char *a3, char *a4)
{
}

void abm::debug::handleDebugPrintBinaryKTL(uint64_t a1, unsigned int a2, uint64_t a3, int a4)
{
  if (a2 > 3) {
    xpc_object_t v6 = (char *)&unk_235E60B46;
  }
  else {
    xpc_object_t v6 = off_264C7DB58[a2];
  }
  abm::debug::handleDebugPrintBinary(a1, 2, (uint64_t)v6, a3, a4);
}

uint64_t abm::debug::handleDebugPrintBBU(abm::debug *this, void *a2, const char *a3, const char *a4)
{
  unint64_t v30 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v29[7] = v5;
  v29[8] = v5;
  v29[5] = v5;
  v29[6] = v5;
  v29[3] = v5;
  _OWORD v29[4] = v5;
  v29[1] = v5;
  v29[2] = v5;
  v29[0] = v5;
  long long v27 = v5;
  long long v28 = v5;
  long long v25 = v5;
  *(_OWORD *)long long __p = v5;
  long long v23 = v5;
  long long v24 = v5;
  long long v22 = v5;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v22);
  xpc_object_t v6 = (void *)std::ostream::operator<<();
  xpc_object_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  size_t v8 = strlen(a3);
  xpc_object_t v9 = (abm::debug *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)a3, v8);
  memset(__dst, 170, sizeof(__dst));
  if ((BYTE8(v28) & 0x10) != 0)
  {
    uint64_t v15 = v28;
    if ((unint64_t)v28 < *((void *)&v25 + 1))
    {
      *(void *)&long long v28 = *((void *)&v25 + 1);
      uint64_t v15 = *((void *)&v25 + 1);
    }
    xpc_object_t v16 = (const void *)v25;
    size_t v13 = v15 - v25;
    if ((unint64_t)(v15 - v25) >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_22;
    }
  }
  else
  {
    if ((BYTE8(v28) & 8) == 0)
    {
      size_t v13 = 0;
      HIBYTE(__dst[2]) = 0;
      xpc_object_t v14 = __dst;
      goto LABEL_14;
    }
    xpc_object_t v16 = (const void *)*((void *)&v23 + 1);
    size_t v13 = *((void *)&v24 + 1) - *((void *)&v23 + 1);
    if (*((void *)&v24 + 1) - *((void *)&v23 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_22:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v13 >= 0x17)
  {
    uint64_t v17 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17) {
      uint64_t v17 = v13 | 7;
    }
    uint64_t v18 = v17 + 1;
    xpc_object_t v14 = (void **)operator new(v17 + 1);
    __dst[1] = (void *)v13;
    __dst[2] = (void *)(v18 | 0x8000000000000000);
    __dst[0] = v14;
    goto LABEL_13;
  }
  HIBYTE(__dst[2]) = v13;
  xpc_object_t v14 = __dst;
  if (v13) {
LABEL_13:
  }
    xpc_object_t v9 = (abm::debug *)memmove(v14, v16, v13);
LABEL_14:
  *((unsigned char *)v14 + v13) = 0;
  xpc_object_t v19 = __dst;
  if (SHIBYTE(__dst[2]) < 0) {
    xpc_object_t v19 = (void **)__dst[0];
  }
  abm::debug::handleDebugPrintBBUHelper(v9, v10, v11, v12, v19);
  if (SHIBYTE(__dst[2]) < 0) {
    operator delete(__dst[0]);
  }
  *(void *)&long long v22 = *MEMORY[0x263F8C2C8];
  *(void *)((char *)&v22 + *(void *)(v22 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  *((void *)&v22 + 1) = MEMORY[0x263F8C318] + 16;
  if (SHIBYTE(v27) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x237DF7120](v29);
}

void sub_235DF1478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    std::ostringstream::~ostringstream((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void abm::debug::handleDebugPrint(uint64_t a1, int a2, unsigned char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  long long v5 = (void *)_MergedGlobals_1;
  if (!_MergedGlobals_1) {
    return;
  }
  xpc_object_t v6 = *(std::__shared_weak_count **)(_MergedGlobals_1 + 8);
  if (!v6) {
    return;
  }
  uint64_t v11 = std::__shared_weak_count::lock(v6);
  unint64_t v53 = v11;
  if (!v11) {
    return;
  }
  if (!*v5)
  {
    xpc_object_t v20 = v11;
LABEL_68:
    if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
    return;
  }
  unint64_t v51 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v50[1] = v12;
  v50[2] = v12;
  v50[0] = v12;
  ctu::LogMessageBuffer::LogMessageBuffer((ctu::LogMessageBuffer *)v50);
  if (a3 && *a3)
  {
    uint64_t v13 = MEMORY[0x237DF5070](v50, a3);
    MEMORY[0x237DF5070](v13, ": ");
  }
  MEMORY[0x237DF4E20](&v48, a4, a5);
  ctu::operator<<();
  xpc_object_t v14 = (ctu::Clock *)MEMORY[0x237DF4E40](&v48);
  ctu::Clock::now_in_nanoseconds(v14);
  uint64_t v15 = (std::string *)operator new(0x60uLL);
  xpc_object_t v16 = abm::debug::kLogDomainMap[a2];
  size_t v17 = strlen(v16);
  if (v17 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v18 = (void *)v17;
  if (v17 >= 0x17)
  {
    uint64_t v21 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17) {
      uint64_t v21 = v17 | 7;
    }
    uint64_t v22 = v21 + 1;
    xpc_object_t v19 = (void **)operator new(v21 + 1);
    __dst[1] = v18;
    unint64_t v47 = v22 | 0x8000000000000000;
    __dst[0] = v19;
    goto LABEL_16;
  }
  HIBYTE(v47) = v17;
  xpc_object_t v19 = __dst;
  if (v17) {
LABEL_16:
  }
    memmove(v19, v16, (size_t)v18);
  *((unsigned char *)v18 + (void)v19) = 0;
  MEMORY[0x237DF4E00](v50);
  ctu::LogMessageBuffer::takeMetadata((ctu::LogMessageBuffer *)v50);
  ctu::LogMessage::LogMessage();
  __int16 v48 = v15;
  long long v23 = (std::__shared_weak_count *)operator new(0x20uLL);
  v23->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93D0B0;
  v23->__shared_owners_ = 0;
  v23->__shared_weak_owners_ = 0;
  v23[1].__vftable = (std::__shared_weak_count_vtbl *)v15;
  int v49 = v23;
  if (SHIBYTE(v47) < 0)
  {
    operator delete(__dst[0]);
    long long v24 = v15 + 2;
    int v25 = SHIBYTE(v15[2].__r_.__value_.__r.__words[2]);
    if ((v25 & 0x80000000) == 0) {
      goto LABEL_19;
    }
  }
  else
  {
    long long v24 = v15 + 2;
    int v25 = SHIBYTE(v15[2].__r_.__value_.__r.__words[2]);
    if ((v25 & 0x80000000) == 0)
    {
LABEL_19:
      size_t size = v25;
      data = v24;
      goto LABEL_22;
    }
  }
  data = (std::string *)v15[2].__r_.__value_.__l.__data_;
  size_t size = v15[2].__r_.__value_.__l.__size_;
LABEL_22:
  long long v28 = memchr(data, 10, size);
  if (v28) {
    unint64_t v29 = (unint64_t)v28;
  }
  else {
    unint64_t v29 = (unint64_t)data + size;
  }
  if (v29 - (void)data != size)
  {
    unint64_t v30 = (unsigned __int8 *)(v29 + 1);
    if ((std::string *)(v29 + 1) != (std::string *)((char *)data + size))
    {
      uint64_t v31 = (char *)data + size + ~v29;
      do
      {
        int v32 = *v30;
        if (v32 != 10) {
          *(unsigned char *)v29++ = v32;
        }
        ++v30;
        --v31;
      }
      while (v31);
      LOBYTE(v25) = *((unsigned char *)&v15[2].__r_.__value_.__s + 23);
    }
  }
  if ((v25 & 0x80) == 0)
  {
    long long v33 = (char *)v24 + v25;
    std::string::size_type v34 = v29 - (void)v24;
    if (v25 >= v29 - (unint64_t)v24) {
      goto LABEL_34;
    }
LABEL_49:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  std::string::pointer v39 = v15[2].__r_.__value_.__l.__data_;
  std::string::size_type v38 = v15[2].__r_.__value_.__l.__size_;
  long long v33 = &v39[v38];
  std::string::size_type v34 = v29 - (void)v39;
  if (v38 < v29 - (unint64_t)v39) {
    goto LABEL_49;
  }
LABEL_34:
  if (&v33[-v29] == (char *)-1)
  {
    if ((v25 & 0x80) != 0)
    {
      std::string::pointer v44 = v15[2].__r_.__value_.__l.__data_;
      v15[2].__r_.__value_.__l.__size_ = v34;
      v44[v34] = 0;
      long long v35 = v49;
      size_t v45 = v49;
      if (!v49) {
        goto LABEL_37;
      }
    }
    else
    {
      *((unsigned char *)&v15[2].__r_.__value_.__s + 23) = v34 & 0x7F;
      v24->__r_.__value_.__s.__data_[v34] = 0;
      long long v35 = v49;
      size_t v45 = v49;
      if (!v49) {
        goto LABEL_37;
      }
    }
    goto LABEL_36;
  }
  std::string::__erase_external_with_move(v24, v34, (std::string::size_type)&v33[-v29]);
  long long v35 = v49;
  size_t v45 = v49;
  if (v49) {
LABEL_36:
  }
    atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_37:
  ctu::LogServer::log();
  if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
  }
  if (a2)
  {
    if (a2 == 2)
    {
      std::string v40 = qword_26AB826F0;
      if (qword_26AB826F0 && os_log_type_enabled((os_log_t)qword_26AB826F0, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v41 = (std::string::__raw *)&v48[2];
        if (SHIBYTE(v48[2].__r_.__value_.__r.__words[2]) < 0) {
          uint64_t v41 = (std::string::__raw *)v41->__words[0];
        }
        *(_DWORD *)long long buf = 136315138;
        uint64_t v55 = v41;
        _os_log_debug_impl(&dword_235DB9000, v40, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
      }
    }
    else if (a2 == 3)
    {
      uint64_t v36 = qword_26AB826F8;
      if (qword_26AB826F8)
      {
        if (os_log_type_enabled((os_log_t)qword_26AB826F8, OS_LOG_TYPE_DEFAULT))
        {
          int v37 = (std::string::__raw *)&v48[2];
          if (SHIBYTE(v48[2].__r_.__value_.__r.__words[2]) < 0) {
            int v37 = (std::string::__raw *)v37->__words[0];
          }
          *(_DWORD *)long long buf = 136315138;
          uint64_t v55 = v37;
LABEL_63:
          _os_log_impl(&dword_235DB9000, v36, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
        }
      }
    }
  }
  else
  {
    uint64_t v36 = qword_26AB826E8;
    if (qword_26AB826E8 && os_log_type_enabled((os_log_t)qword_26AB826E8, OS_LOG_TYPE_DEFAULT))
    {
      std::string::size_type v42 = (std::string::__raw *)&v48[2];
      if (SHIBYTE(v48[2].__r_.__value_.__r.__words[2]) < 0) {
        std::string::size_type v42 = (std::string::__raw *)v42->__words[0];
      }
      *(_DWORD *)long long buf = 136315138;
      uint64_t v55 = v42;
      goto LABEL_63;
    }
  }
  CFTypeRef v43 = v49;
  if (v49 && !atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
    std::__shared_weak_count::__release_weak(v43);
  }
  MEMORY[0x237DF4E40](v50);
  xpc_object_t v20 = v53;
  if (v53) {
    goto LABEL_68;
  }
}

void sub_235DF1A54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  MEMORY[0x237DF4E40](&a24);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100](v24 - 128);
  _Unwind_Resume(a1);
}

void sub_235DF1B04(_Unwind_Exception *a1)
{
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100](v1 - 128);
  _Unwind_Resume(a1);
}

void sub_235DF1B18()
{
  operator delete(v0);
  JUMPOUT(0x235DF1B60);
}

void sub_235DF1B44(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  operator delete(v16);
  JUMPOUT(0x235DF1B60);
}

void std::__shared_ptr_pointer<ctu::LogMessage *,std::shared_ptr<ctu::LogMessage>::__shared_ptr_default_delete<ctu::LogMessage,ctu::LogMessage>,std::allocator<ctu::LogMessage>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<ctu::LogMessage *,std::shared_ptr<ctu::LogMessage>::__shared_ptr_default_delete<ctu::LogMessage,ctu::LogMessage>,std::allocator<ctu::LogMessage>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<ctu::LogMessage *,std::shared_ptr<ctu::LogMessage>::__shared_ptr_default_delete<ctu::LogMessage,ctu::LogMessage>,std::allocator<ctu::LogMessage>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 0x8000000235E72ED1) {
    return a1 + 24;
  }
  if (((v3 & 0x8000000235E72ED1 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x8000000235E72ED1)) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000235E72ED1 & 0x7FFFFFFFFFFFFFFFLL))) {
    return a1 + 24;
  }
  return 0;
}

void std::string::__erase_external_with_move(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  if (!__n) {
    return;
  }
  int v4 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if (v4 < 0)
  {
    xpc_object_t v6 = (std::string *)this->__r_.__value_.__r.__words[0];
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    std::string::size_type v7 = size - __pos;
    if (size - __pos >= __n) {
      std::string::size_type v8 = __n;
    }
    else {
      std::string::size_type v8 = size - __pos;
    }
    if (size - __pos <= __n) {
      goto LABEL_8;
    }
  }
  else
  {
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    xpc_object_t v6 = this;
    std::string::size_type v7 = size - __pos;
    if (size - __pos >= __n) {
      std::string::size_type v8 = __n;
    }
    else {
      std::string::size_type v8 = HIBYTE(this->__r_.__value_.__r.__words[2]) - __pos;
    }
    if (v7 <= __n) {
      goto LABEL_8;
    }
  }
  memmove((char *)v6 + __pos, (char *)v6 + __pos + v8, v7 - v8);
  LOBYTE(v4) = *((unsigned char *)&this->__r_.__value_.__s + 23);
LABEL_8:
  std::string::size_type v9 = size - v8;
  if ((v4 & 0x80) != 0) {
    this->__r_.__value_.__l.__size_ = v9;
  }
  else {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = v9 & 0x7F;
  }
  v6->__r_.__value_.__s.__data_[v9] = 0;
}

void abm::debug::handleDebugPrintBinary(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  long long v5 = (void *)_MergedGlobals_1;
  if (!_MergedGlobals_1) {
    return;
  }
  std::string::size_type v7 = *(std::__shared_weak_count **)(_MergedGlobals_1 + 8);
  if (!v7) {
    return;
  }
  uint64_t v11 = std::__shared_weak_count::lock(v7);
  std::string::pointer v39 = v11;
  if (!v11) {
    return;
  }
  if (!*v5)
  {
    long long v23 = v11;
LABEL_34:
    if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
    return;
  }
  unint64_t v37 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v36[1] = v12;
  v36[2] = v12;
  v36[0] = v12;
  ctu::LogMessageBuffer::LogMessageBuffer((ctu::LogMessageBuffer *)v36);
  uint64_t v13 = MEMORY[0x237DF5070](v36, a1);
  MEMORY[0x237DF5070](v13, " (");
  uint64_t v14 = ctu::operator<<();
  uint64_t v15 = MEMORY[0x237DF5070](v14, ") ");
  uint64_t v16 = MEMORY[0x237DF5070](v15, a3);
  MEMORY[0x237DF5070](v16, "\n");
  __p[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v35 = 0xAAAAAAAAAAAAAALL;
  __p[0] = (void *)0xAAAAAAAAAAAAAA00;
  ctu::assign();
  size_t v17 = (ctu::Clock *)MEMORY[0x237DF5080](v36, __p);
  ctu::Clock::now_in_nanoseconds(v17);
  uint64_t v18 = (std::__shared_weak_count_vtbl *)operator new(0x60uLL);
  xpc_object_t v19 = abm::debug::kLogDomainMap[a2];
  size_t v20 = strlen(v19);
  if (v20 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v21 = (void *)v20;
  if (v20 >= 0x17)
  {
    uint64_t v24 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17) {
      uint64_t v24 = v20 | 7;
    }
    uint64_t v25 = v24 + 1;
    uint64_t v22 = (void **)operator new(v24 + 1);
    __dst[1] = v21;
    unint64_t v31 = v25 | 0x8000000000000000;
    __dst[0] = v22;
    goto LABEL_13;
  }
  HIBYTE(v31) = v20;
  uint64_t v22 = __dst;
  if (v20) {
LABEL_13:
  }
    memmove(v22, v19, (size_t)v21);
  *((unsigned char *)v21 + (void)v22) = 0;
  MEMORY[0x237DF4E00](v36);
  ctu::LogMessageBuffer::takeMetadata((ctu::LogMessageBuffer *)v36);
  ctu::LogMessage::LogMessage();
  int v32 = v18;
  std::string v26 = (std::__shared_weak_count *)operator new(0x20uLL);
  v26->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93D0B0;
  v26->__shared_owners_ = 0;
  v26->__shared_weak_owners_ = 0;
  v26[1].__vftable = v18;
  long long v33 = v26;
  if (SHIBYTE(v31) < 0) {
    operator delete(__dst[0]);
  }
  atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
  ctu::LogServer::log();
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  if (a2)
  {
    if (a2 == 2)
    {
      long long v27 = qword_26AB826F0;
      if (qword_26AB826F0)
      {
        if (os_log_type_enabled((os_log_t)qword_26AB826F0, OS_LOG_TYPE_DEBUG))
        {
          long long v28 = __p;
          if (v35 < 0) {
            long long v28 = (void **)__p[0];
          }
          goto LABEL_39;
        }
      }
    }
  }
  else
  {
    long long v27 = qword_26AB826E8;
    if (qword_26AB826E8 && os_log_type_enabled((os_log_t)qword_26AB826E8, OS_LOG_TYPE_DEBUG))
    {
      long long v28 = __p;
      if (v35 < 0) {
        long long v28 = (void **)__p[0];
      }
LABEL_39:
      *(_DWORD *)long long buf = 67109634;
      int v41 = a5;
      __int16 v42 = 2080;
      uint64_t v43 = a3;
      __int16 v44 = 2080;
      size_t v45 = v28;
      _os_log_debug_impl(&dword_235DB9000, v27, OS_LOG_TYPE_DEBUG, "(%d) %s: %s", buf, 0x1Cu);
      unint64_t v29 = v33;
      if (!v33) {
        goto LABEL_31;
      }
      goto LABEL_29;
    }
  }
  unint64_t v29 = v33;
  if (!v33) {
    goto LABEL_31;
  }
LABEL_29:
  if (!atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
LABEL_31:
  if (SHIBYTE(v35) < 0) {
    operator delete(__p[0]);
  }
  MEMORY[0x237DF4E40](v36);
  long long v23 = v39;
  if (v39) {
    goto LABEL_34;
  }
}

void sub_235DF2158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a24 < 0)
  {
    operator delete(__p);
    MEMORY[0x237DF4E40](&a25);
    std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
    _Unwind_Resume(a1);
  }
  MEMORY[0x237DF4E40](&a25);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void abm::debug::handleDebugPrintBBUHelper(abm::debug *this, void *a2, uint64_t a3, const char *a4, ...)
{
  va_start(va, a4);
  abm::debug::handleDebugPrint(20, 3, &unk_235E60B46, (uint64_t)"%s", (uint64_t)va);
}

uint64_t desense::ARICommandDriver::create@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v6 = (desense::CommandDriver *)operator new(0xD0uLL);
  uint64_t v7 = (uint64_t)v6;
  std::string::size_type v8 = (std::__shared_weak_count *)a1[1];
  uint64_t v16 = *a1;
  size_t v17 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *a2;
  xpc_object_t v10 = (std::__shared_weak_count *)a2[1];
  v15[0] = v9;
  v15[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  desense::ARICommandDriver::ARICommandDriver(v6, (uint64_t)&v16, (uint64_t)v15);
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<desense::ARICommandDriver>::shared_ptr[abi:ne180100]<desense::ARICommandDriver,std::shared_ptr<desense::ARICommandDriver> ctu::SharedSynchronizable<desense::CommandDriver>::make_shared_ptr<desense::ARICommandDriver>(desense::ARICommandDriver*)::{lambda(desense::ARICommandDriver*)#1},void>(a3, v7);
  ctu::Loggable<desense::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a3);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  uint64_t v13 = v17;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)*a3 + 64))(*a3, v11, v12);
}

void sub_235DF23E0(_Unwind_Exception *a1)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_235DF23F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v11);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

desense::CommandDriver *desense::ARICommandDriver::ARICommandDriver(desense::CommandDriver *a1, uint64_t a2, uint64_t a3)
{
  int v4 = *(std::__shared_weak_count **)(a2 + 8);
  xpc_object_t v10 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v5 = *(std::__shared_weak_count **)(a3 + 8);
  uint64_t v9 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  desense::CommandDriver::CommandDriver();
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  *(void *)a1 = &unk_26E93D100;
  xpc_object_t v6 = *((void *)a1 + 11);
  xpc_object_t object = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  desense::CommandDriver::getName(a1);
  ice::Client::create();
  if (object) {
    dispatch_release(object);
  }
  return a1;
}

void sub_235DF2580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_235DF259C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  desense::CommandDriver::~CommandDriver(v10);
  _Unwind_Resume(a1);
}

void desense::CommandDriver::~CommandDriver(void **this)
{
  *this = &unk_26E93D200;
  if (*((char *)this + 191) < 0) {
    operator delete(this[21]);
  }
  int v2 = (std::__shared_weak_count *)this[20];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    this[16] = &unk_26E93D258;
    uint64_t v3 = (atomic_uint *)this[18];
    if (!v3) {
      goto LABEL_10;
    }
  }
  else
  {
    this[16] = &unk_26E93D258;
    uint64_t v3 = (atomic_uint *)this[18];
    if (!v3) {
      goto LABEL_10;
    }
  }
  if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
    if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
    }
  }
LABEL_10:
  this[13] = &unk_26E93D318;
  uint64_t v4 = (atomic_uint *)this[15];
  if (v4)
  {
    if (atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
      if (atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
      }
    }
  }
  *this = &unk_26E93D388;
  MEMORY[0x237DF4D50](this + 1);
  long long v5 = this[12];
  if (v5) {
    dispatch_release(v5);
  }
  uint64_t v6 = this[11];
  if (v6) {
    dispatch_release(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)this[10];
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
}

void desense::ARICommandDriver::~ARICommandDriver(desense::ARICommandDriver *this)
{
  *(void *)this = &unk_26E93D100;
  int v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_235DB9000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v4, 2u);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 25);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    desense::CommandDriver::~CommandDriver((void **)this);
  }
  else
  {
    desense::CommandDriver::~CommandDriver((void **)this);
  }
}

{
  NSObject *v2;
  std::__shared_weak_count *v3;
  uint8_t v4[16];

  *(void *)this = &unk_26E93D100;
  int v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_235DB9000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v4, 2u);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 25);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    desense::CommandDriver::~CommandDriver((void **)this);
  }
  else
  {
    desense::CommandDriver::~CommandDriver((void **)this);
  }
}

{
  NSObject *v2;
  std::__shared_weak_count *v3;
  void *v4;
  uint8_t v5[16];

  *(void *)this = &unk_26E93D100;
  int v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long v5 = 0;
    _os_log_impl(&dword_235DB9000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v5, 2u);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 25);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  desense::CommandDriver::~CommandDriver((void **)this);
  operator delete(v4);
}

void desense::ARICommandDriver::init(desense::ARICommandDriver *this)
{
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 0x40000000;
  v9[2] = ___ZN7desense16ARICommandDriver4initEv_block_invoke;
  void v9[3] = &__block_descriptor_tmp_5;
  void v9[4] = this;
  int v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v2 || (uint64_t v3 = *((void *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v5 = v4;
  uint64_t v6 = *((void *)this + 11);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN7desense13CommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_26E93D700;
  void block[5] = v3;
  uint64_t v11 = v5;
  p_uint64_t shared_owners = &v5->__shared_owners_;
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = v9;
  dispatch_async(v6, block);
  std::string::size_type v8 = v11;
  if (!v11 || atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZN7desense16ARICommandDriver4initEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_235DB9000, v2, OS_LOG_TYPE_DEFAULT, "#I Initializing", buf, 2u);
  }
  uint64_t v3 = *(void *)(v1 + 192);
  v17[0] = MEMORY[0x263EF8330];
  v17[1] = 0x40000000;
  v17[2] = ___ZN7desense16ARICommandDriver4initEv_block_invoke_2;
  v17[3] = &__block_descriptor_tmp_4;
  _OWORD v17[4] = v1;
  *(void *)long long buf = v17;
  ice::Client::setEventHandler<void({block_pointer})(void)>(v3, 0, (uint64_t *)buf);
  uint64_t v4 = *(void *)(v1 + 192);
  v16[0] = MEMORY[0x263EF8330];
  v16[1] = 0x40000000;
  v16[2] = ___ZN7desense16ARICommandDriver4initEv_block_invoke_3;
  v16[3] = &__block_descriptor_tmp_4_0;
  _OWORD v16[4] = v1;
  *(void *)long long buf = v16;
  ice::Client::setEventHandler<void({block_pointer})(void)>(v4, 1, (uint64_t *)buf);
  uint64_t v6 = *(std::__shared_weak_count_vtbl **)(v1 + 72);
  long long v5 = *(std::__shared_weak_count **)(v1 + 80);
  if (!v5 || (v7 = std::__shared_weak_count::lock(v5), (uint64_t v15 = v7) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  std::string::size_type v8 = v7;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  p_shared_weak_owners = &v7->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  xpc_object_t v10 = (std::__shared_weak_count *)operator new(0x38uLL);
  v10->__shared_owners_ = 0;
  p_uint64_t shared_owners = &v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93D6B8;
  v10[1].__vftable = v6;
  v10[1].__shared_owners_ = (uint64_t)v8;
  v10[1].__shared_weak_owners_ = (uint64_t)desense::ARICommandDriver::handleCurrentFrequencyInfoIndication_sync;
  v10[2].__vftable = 0;
  *(void *)long long buf = MEMORY[0x263EF8330];
  uint64_t v19 = 1174405120;
  size_t v20 = ___ZN3ice6detail12wrapCallbackIZNS_6Client13regIndicationIN7desense13CommandDriverENS4_16ARICommandDriverEvJPKhjEEEvjNSt3__110shared_ptrIT_EEMT0_FT1_DpT2_EEUlS8_jE_vEEN8dispatch5blockIU13block_pointerFiPhjEEENS9_17integral_constantIiLi2EEEOSB__block_invoke;
  uint64_t v21 = &__block_descriptor_tmp_36_1;
  uint64_t v22 = v10 + 1;
  long long v23 = v10;
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_4;
  aBlock[3] = &unk_264C7DBE0;
  aBlock[4] = buf;
  uint64_t v12 = _Block_copy(aBlock);
  uint64_t v13 = v23;
  if (!v23 || atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_10:
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
LABEL_11:
  *(void *)long long buf = v12;
  ice::Client::regIndicationInternal();
  if (*(void *)buf) {
    _Block_release(*(const void **)buf);
  }
  std::__shared_weak_count::__release_weak(v8);
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  return ice::Client::start(*(ice::Client **)(v1 + 192));
}

void sub_235DF3008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *aBlock)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  std::__shared_weak_count::__release_weak(v21);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ___ZN7desense16ARICommandDriver4initEv_block_invoke_2(uint64_t a1)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_debug_impl(&dword_235DB9000, v2, OS_LOG_TYPE_DEBUG, "#D Started", buf, 2u);
  }
  uint64_t v3 = *(void *)(v1 + 112);
  int v38 = 0;
  uint64_t v36 = 0;
  unint64_t v37 = 0;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v50 = v4;
  long long v51 = v4;
  long long v48 = v4;
  long long v49 = v4;
  long long v46 = v4;
  long long v47 = v4;
  long long v44 = v4;
  long long v45 = v4;
  *(_OWORD *)long long buf = v4;
  long long v43 = v4;
  long long v5 = *(pthread_mutex_t **)(v3 + 24);
  __p[0] = (void *)10;
  __p[1] = buf;
  v53[0] = 0;
  v53[1] = v5;
  pthread_mutex_lock(v5);
  uint64_t v6 = *(atomic_uint **)(v3 + 8);
  if (!v6)
  {
    std::string::size_type v8 = *(uint64_t ***)v3;
    goto LABEL_15;
  }
  unsigned int explicit = atomic_load_explicit(v6 + 2, memory_order_acquire);
  std::string::size_type v8 = *(uint64_t ***)v3;
  if (explicit == 1)
  {
    uint64_t v9 = *v8;
    uint64_t v10 = *(void *)(v3 + 16);
    if ((uint64_t *)v10 == *v8)
    {
      uint64_t v10 = v9[1];
      *(void *)&long long v39 = v10;
      if (v9 == (uint64_t *)v10)
      {
LABEL_12:
        *(void *)(v3 + 16) = v10;
        goto LABEL_13;
      }
    }
    else
    {
      *(void *)&long long v39 = *(void *)(v3 + 16);
    }
    uint64_t v11 = *(void *)(v10 + 16);
    if (*(unsigned char *)(v11 + 24))
    {
      uint64_t v10 = *(void *)(v10 + 8);
    }
    else
    {
      uint64_t v10 = boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>>::erase(v9, (int *)(v11 + 64), (uint64_t **)&v39);
      std::string::size_type v8 = *(uint64_t ***)v3;
    }
    goto LABEL_12;
  }
LABEL_13:
  uint64_t v6 = *(atomic_uint **)(v3 + 8);
  if (v6) {
    atomic_fetch_add_explicit(v6 + 2, 1u, memory_order_relaxed);
  }
LABEL_15:
  uint64_t v12 = v37;
  uint64_t v36 = v8;
  unint64_t v37 = v6;
  if (v12)
  {
    if (atomic_fetch_add(v12 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v12 + 16))(v12);
      if (atomic_fetch_add(v12 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v12 + 24))(v12);
      }
    }
  }
  pthread_mutex_unlock(v53[1]);
  uint64_t v13 = (char *)__p[1];
  if (__p[1])
  {
    if ((uint64_t)&v53[0][-1].__opaque[55] >= 0)
    {
      uint64_t v14 = (char *)__p[1] + 16 * (uint64_t)v53[0];
      do
      {
        uint64_t v15 = (atomic_uint *)*((void *)v14 - 1);
        if (v15)
        {
          if (atomic_fetch_add(v15 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v15 + 16))(v15);
            if (atomic_fetch_add(v15 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v15 + 24))(v15);
            }
          }
        }
        v14 -= 16;
      }
      while (v14 > v13);
    }
    if (__p[0] >= (void *)0xB) {
      operator delete(__p[1]);
    }
  }
  *(void *)&long long v16 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v55 = v16;
  long long v56 = v16;
  *(_OWORD *)unint64_t v53 = v16;
  long long v54 = v16;
  long long v51 = v16;
  *(_OWORD *)long long __p = v16;
  long long v49 = v16;
  long long v50 = v16;
  long long v47 = v16;
  long long v48 = v16;
  long long v45 = v16;
  long long v46 = v16;
  long long v43 = v16;
  long long v44 = v16;
  *(_OWORD *)long long buf = v16;
  buf[0] = 0;
  unint64_t v57 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v58 = 10;
  long long v59 = &buf[8];
  uint64_t v60 = 0;
  float64x2x2_t v61 = &v38;
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  size_t v17 = v36;
  uint64_t v18 = (uint64_t)*v36;
  long long v33 = buf;
  uint64_t v34 = v3;
  uint64_t v35 = v18;
  *(void *)&long long v31 = *(void *)(v18 + 8);
  *((void *)&v31 + 1) = v18;
  *(void *)&long long v32 = buf;
  *((void *)&v32 + 1) = v18;
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,coex::SubId>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>::lock_next_callable(&v31);
  v30[0] = *v17;
  v30[1] = v30[0];
  _OWORD v30[2] = buf;
  v30[3] = v30[0];
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,coex::SubId>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>::lock_next_callable(v30);
  long long v39 = v31;
  long long v40 = v32;
  uint64_t v19 = v30[0];
  uint64_t v20 = v31;
  if ((void)v31 == v30[0])
  {
    if (HIDWORD(v62) <= v62) {
      goto LABEL_49;
    }
LABEL_48:
    boost::signals2::detail::signal_impl<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::force_cleanup_connections(v34, v35);
    goto LABEL_49;
  }
  uint64_t v21 = (unsigned char *)v40;
  if (!*(unsigned char *)v40)
  {
    uint64_t v22 = *(void *)(*(void *)(v31 + 16) + 32);
    uint64_t v23 = *(void *)(v22 + 24);
    if (!v23)
    {
      std::runtime_error::runtime_error(&v41, "call to empty boost::function");
      v41.__vftable = (std::runtime_error_vtbl *)&unk_26E93D570;
      boost::throw_exception<boost::bad_function_call>(&v41);
    }
    (*(void (**)(uint64_t, void))((v23 & 0xFFFFFFFFFFFFFFFELL) + 8))(v22 + 32, **(unsigned int **)(v40 + 272));
    if (!*v21) {
      *uint64_t v21 = 1;
    }
  }
  *(void *)&long long v39 = *(void *)(v20 + 8);
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,coex::SubId>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>::lock_next_callable(&v39);
  uint64_t v24 = v40;
  if (*(unsigned char *)v40) {
    *(unsigned char *)long long v40 = 0;
  }
  for (uint64_t i = v39; (void)v39 != v19; uint64_t i = v39)
  {
    uint64_t v26 = *(void *)(*(void *)(i + 16) + 32);
    uint64_t v27 = *(void *)(v26 + 24);
    if (!v27)
    {
      std::runtime_error::runtime_error(&v41, "call to empty boost::function");
      v41.__vftable = (std::runtime_error_vtbl *)&unk_26E93D570;
      boost::throw_exception<boost::bad_function_call>(&v41);
    }
    (*(void (**)(uint64_t, void))((v27 & 0xFFFFFFFFFFFFFFFELL) + 8))(v26 + 32, **(unsigned int **)(v24 + 272));
    if (!*(unsigned char *)v24) {
      *(unsigned char *)uint64_t v24 = 1;
    }
    *(void *)&long long v39 = *(void *)(i + 8);
    boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,coex::SubId>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>::lock_next_callable(&v39);
    uint64_t v24 = v40;
    if (*(unsigned char *)v40) {
      *(unsigned char *)long long v40 = 0;
    }
  }
  if (*((_DWORD *)v33 + 71) > *((_DWORD *)v33 + 70)) {
    goto LABEL_48;
  }
LABEL_49:
  uint64_t result = boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,coex::SubId>>::~slot_call_iterator_cache((uint64_t)buf);
  unint64_t v29 = v37;
  if (v37 && atomic_fetch_add(v37 + 2, 0xFFFFFFFF) == 1)
  {
    uint64_t result = (*(uint64_t (**)(atomic_uint *))(*(void *)v29 + 16))(v29);
    if (atomic_fetch_add(v29 + 3, 0xFFFFFFFF) == 1) {
      return (*(uint64_t (**)(atomic_uint *))(*(void *)v29 + 24))(v29);
    }
  }
  return result;
}

void sub_235DF3654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_235DF3664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::runtime_error a27)
{
  std::runtime_error::~runtime_error(&a27);
  if (a2 != 2)
  {
    boost::signals2::detail::signal_impl<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(&v29);
    boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,coex::SubId>>::~slot_call_iterator_cache((uint64_t)&v31);
    boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&v30);
    _Unwind_Resume(a1);
  }
  __cxa_begin_catch(a1);
  boost::signals2::detail::connection_body_base::disconnect(*(boost::signals2::detail::connection_body_base **)(a23 + 16));
  __cxa_rethrow();
}

void sub_235DF36C4(_Unwind_Exception *a1, int a2)
{
  __cxa_end_catch();
  if (a2 != 2)
  {
    boost::signals2::detail::signal_impl<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(&v4);
    boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,coex::SubId>>::~slot_call_iterator_cache((uint64_t)&v6);
    boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&v5);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x235DF3694);
}

void sub_235DF36FC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,unint64_t a49,char *__p,uint64_t a51)
{
  if (__p)
  {
    if (a51 - 1 >= 0)
    {
      long long v51 = &__p[16 * a51];
      do
      {
        long long v52 = (atomic_uint *)*((void *)v51 - 1);
        if (v52)
        {
          if (atomic_fetch_add(v52 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v52 + 16))(v52);
            if (atomic_fetch_add(v52 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v52 + 24))(v52);
            }
          }
        }
        v51 -= 16;
      }
      while (v51 > __p);
    }
    if (a49 >= 0xB) {
      operator delete(__p);
    }
  }
  JUMPOUT(0x235DF37ECLL);
}

void sub_235DF37C8(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x235DF37F4);
}

void ___ZN7desense16ARICommandDriver4initEv_block_invoke_3(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int v2 = 0;
    _os_log_debug_impl(&dword_235DB9000, v1, OS_LOG_TYPE_DEBUG, "#D Stopped", v2, 2u);
  }
}

uint64_t desense::ARICommandDriver::handleCurrentFrequencyInfoIndication_sync(desense::ARICommandDriver *this, const unsigned __int8 *a2)
{
  uint64_t v200 = *MEMORY[0x263EF8340];
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v197 = v3;
  long long v198 = v3;
  long long v195 = v3;
  long long v196 = v3;
  v193[3] = v3;
  long long v194 = v3;
  v193[1] = v3;
  v193[2] = v3;
  v193[0] = v3;
  AriSdk::ARI_IBIMsAccCurrentFreqInfoIndCb_SDK::ARI_IBIMsAccCurrentFreqInfoIndCb_SDK((AriSdk::ARI_IBIMsAccCurrentFreqInfoIndCb_SDK *)v193, a2);
  uint64_t v4 = (void *)AriSdk::ARI_IBIMsAccCurrentFreqInfoIndCb_SDK::unpack((AriSdk::ARI_IBIMsAccCurrentFreqInfoIndCb_SDK *)v193);
  int v5 = (int)v4;
  if (v4)
  {
    uint64_t v6 = *((void *)this + 5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = asString();
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = v7;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v5;
      std::string::size_type v8 = "#N Could not unpack IBIMsAccCurrentFreqInfoIndCb: %s (%d)";
LABEL_7:
      _os_log_impl(&dword_235DB9000, v6, OS_LOG_TYPE_DEFAULT, v8, buf, 0x12u);
      return MEMORY[0x237DF6830](v193);
    }
    return MEMORY[0x237DF6830](v193);
  }
  if (!**((_DWORD **)&v194 + 1))
  {
    *(void *)long long buf = buf;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0;
    v190 = &v190;
    v191 = &v190;
    uint64_t v192 = 0;
    v187 = &v187;
    v188 = &v187;
    uint64_t v189 = 0;
    v184 = &v184;
    v185 = &v184;
    uint64_t v186 = 0;
    v181 = &v181;
    v182 = &v181;
    uint64_t v183 = 0;
    v178 = &v178;
    v179 = &v178;
    uint64_t v180 = 0;
    if (**((unsigned char **)&v195 + 1))
    {
      uint64_t v12 = 0;
      if (**((unsigned char **)&v195 + 1) == 1) {
        uint64_t v13 = 1;
      }
      else {
        uint64_t v13 = 2;
      }
      uint64_t v14 = (_DWORD *)(*((void *)&v195 + 1) + 12);
      uint64_t v15 = buf;
      do
      {
        int v16 = *v14;
        uint64_t v4 = operator new(0x20uLL);
        uint64_t v17 = *((void *)v14 - 1);
        v4[1] = buf;
        uint64_t v4[2] = v17;
        *((_DWORD *)v4 + 6) = v16;
        void *v4 = v15;
        *((void *)v15 + 1) = v4;
        ++v12;
        *(void *)long long buf = v4;
        *(void *)&uint8_t buf[16] = v12;
        v14 += 3;
        uint64_t v15 = v4;
      }
      while (v13 != v12);
    }
    unsigned int v18 = capabilities::abs::nonPrimaryDLServingCellBandwidthMaxValue((capabilities::abs *)v4);
    unsigned int v19 = *(unsigned __int8 *)v196;
    if (v19 >= 0x14) {
      unsigned int v19 = 20;
    }
    if (v19)
    {
      uint64_t v20 = 0;
      uint64_t v21 = v190;
      uint64_t v22 = 12 * v19;
      uint64_t v23 = v192 + 1;
      do
      {
        uint64_t v24 = v196 + v20;
        unsigned int v25 = *(_DWORD *)(v196 + v20 + 12);
        uint64_t v26 = operator new(0x20uLL);
        uint64_t v27 = *(void *)(v24 + 4);
        v26[1] = &v190;
        _OWORD v26[2] = v27;
        if (v25 >= v18) {
          unsigned int v28 = v18;
        }
        else {
          unsigned int v28 = v25;
        }
        *((_DWORD *)v26 + 6) = v28;
        void *v26 = v21;
        v21[1] = v26;
        v190 = v26;
        uint64_t v192 = v23;
        v20 += 12;
        ++v23;
        uint64_t v21 = v26;
      }
      while (v22 != v20);
    }
    unsigned int v29 = **((unsigned char **)&v196 + 1);
    if (v29 >= 0x40) {
      unsigned int v29 = 64;
    }
    if (v29)
    {
      uint64_t v30 = 0;
      uint64_t v31 = v187;
      uint64_t v32 = 12 * v29;
      uint64_t v33 = v189 + 1;
      do
      {
        uint64_t v34 = *((void *)&v196 + 1) + v30;
        unsigned int v35 = *(_DWORD *)(*((void *)&v196 + 1) + v30 + 12);
        uint64_t v36 = operator new(0x20uLL);
        uint64_t v37 = *(void *)(v34 + 4);
        v36[1] = &v187;
        v36[2] = v37;
        if (v35 >= v18) {
          unsigned int v38 = v18;
        }
        else {
          unsigned int v38 = v35;
        }
        *((_DWORD *)v36 + 6) = v38;
        void *v36 = v31;
        v31[1] = v36;
        v187 = v36;
        uint64_t v189 = v33;
        v30 += 12;
        ++v33;
        uint64_t v31 = v36;
      }
      while (v32 != v30);
    }
    unsigned int v39 = *(unsigned __int8 *)v197;
    if (v39 >= 0x64) {
      unsigned int v39 = 100;
    }
    if (v39)
    {
      uint64_t v40 = 0;
      std::runtime_error v41 = v184;
      uint64_t v42 = 12 * v39;
      uint64_t v43 = v186 + 1;
      do
      {
        uint64_t v44 = v197 + v40;
        unsigned int v45 = *(_DWORD *)(v197 + v40 + 12);
        long long v46 = operator new(0x20uLL);
        uint64_t v47 = *(void *)(v44 + 4);
        v46[1] = &v184;
        v46[2] = v47;
        if (v45 >= v18) {
          unsigned int v48 = v18;
        }
        else {
          unsigned int v48 = v45;
        }
        *((_DWORD *)v46 + 6) = v48;
        void *v46 = v41;
        v41[1] = v46;
        v184 = v46;
        uint64_t v186 = v43;
        v40 += 12;
        ++v43;
        std::runtime_error v41 = v46;
      }
      while (v42 != v40);
    }
    unsigned int v49 = **((unsigned char **)&v197 + 1);
    if (v49 >= 0x46) {
      unsigned int v49 = 70;
    }
    if (v49)
    {
      uint64_t v50 = 0;
      long long v51 = v181;
      uint64_t v52 = 12 * v49;
      uint64_t v53 = v183 + 1;
      do
      {
        uint64_t v54 = *((void *)&v197 + 1) + v50;
        unsigned int v55 = *(_DWORD *)(*((void *)&v197 + 1) + v50 + 12);
        long long v56 = operator new(0x20uLL);
        uint64_t v57 = *(void *)(v54 + 4);
        v56[1] = &v181;
        v56[2] = v57;
        if (v55 >= v18) {
          unsigned int v58 = v18;
        }
        else {
          unsigned int v58 = v55;
        }
        *((_DWORD *)v56 + 6) = v58;
        *long long v56 = v51;
        v51[1] = v56;
        v181 = v56;
        uint64_t v183 = v53;
        v50 += 12;
        ++v53;
        long long v51 = v56;
      }
      while (v52 != v50);
    }
    uint64_t v59 = v195;
    if (*(unsigned __int8 *)v195 >= 4u) {
      uint64_t v60 = 4;
    }
    else {
      uint64_t v60 = *(unsigned __int8 *)v195;
    }
    if (v60)
    {
      float64x2x2_t v61 = v178;
      uint64_t v62 = v180;
      int v63 = *(_DWORD *)(v195 + 12);
      uint64_t v64 = operator new(0x20uLL);
      uint64_t v65 = *(void *)(v59 + 4);
      v64[6] = v63;
      *((void *)v64 + 1) = &v178;
      *((void *)v64 + 2) = v65;
      *(void *)uint64_t v64 = v61;
      v61[1] = v64;
      v178 = v64;
      uint64_t v180 = v62 + 1;
      if (v60 != 1)
      {
        uint64_t v66 = v60 - 1;
        int v67 = (unsigned int *)(v195 + 24);
        uint64_t v68 = v62 + 2;
        do
        {
          unsigned int v69 = *v67;
          long long v70 = operator new(0x20uLL);
          uint64_t v71 = *((void *)v67 - 1);
          v70[1] = &v178;
          v70[2] = v71;
          if (v69 >= v18) {
            unsigned int v72 = v18;
          }
          else {
            unsigned int v72 = v69;
          }
          *((_DWORD *)v70 + 6) = v72;
          *long long v70 = v64;
          *((void *)v64 + 1) = v70;
          v178 = v70;
          uint64_t v180 = v68;
          v67 += 3;
          ++v68;
          uint64_t v64 = v70;
          --v66;
        }
        while (v66);
      }
    }
    v176 = 0;
    uint64_t v177 = 0;
    v175 = &v176;
    unint64_t v73 = operator new(0x40uLL);
    v73[4] = *MEMORY[0x263F8BAA0];
    v73[5] = v73 + 5;
    v73[6] = v73 + 5;
    v73[7] = 0;
    *unint64_t v73 = 0;
    v73[1] = 0;
    v73[2] = &v176;
    v175 = (uint64_t **)v73;
    v176 = v73;
    *((unsigned char *)v73 + 24) = 1;
    uint64_t v177 = 1;
    std::list<std::pair<unsigned long long,unsigned int>>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>,std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>>(v73 + 5, v73 + 5, *(uint64_t *)&buf[8], (uint64_t)buf);
    unint64_t v74 = v176;
    unint64_t v75 = *MEMORY[0x263F8BA98];
    uint64_t v76 = &v176;
    unint64_t v77 = &v176;
    if (v176)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v77 = (uint64_t **)v74;
          unint64_t v78 = v74[4];
          if (v75 >= v78) {
            break;
          }
          unint64_t v74 = *v77;
          uint64_t v76 = v77;
          if (!*v77) {
            goto LABEL_64;
          }
        }
        if (v78 >= v75) {
          break;
        }
        unint64_t v74 = v77[1];
        if (!v74)
        {
          uint64_t v76 = v77 + 1;
          goto LABEL_64;
        }
      }
      unint64_t v79 = (uint64_t *)v77;
      int64_t v81 = (uint64_t *)(v77 + 5);
      if (v81 == (uint64_t *)&v190)
      {
LABEL_83:
        int v89 = v176;
        unint64_t v90 = *MEMORY[0x263F8BAA8];
        BOOL v91 = &v176;
        unint64_t v92 = &v176;
        if (v176)
        {
          while (1)
          {
            while (1)
            {
              unint64_t v92 = (uint64_t **)v89;
              unint64_t v93 = v89[4];
              if (v90 >= v93) {
                break;
              }
              int v89 = *v92;
              BOOL v91 = v92;
              if (!*v92) {
                goto LABEL_90;
              }
            }
            if (v93 >= v90) {
              break;
            }
            int v89 = v92[1];
            if (!v89)
            {
              BOOL v91 = v92 + 1;
              goto LABEL_90;
            }
          }
          long long v94 = (uint64_t *)v92;
          long long v96 = (uint64_t *)(v92 + 5);
          if (v96 == (uint64_t *)&v187)
          {
LABEL_109:
            v104 = v176;
            unint64_t v105 = *MEMORY[0x263F8BAB8];
            v106 = &v176;
            int v107 = &v176;
            if (v176)
            {
              while (1)
              {
                while (1)
                {
                  int v107 = (uint64_t **)v104;
                  unint64_t v108 = v104[4];
                  if (v105 >= v108) {
                    break;
                  }
                  v104 = *v107;
                  v106 = v107;
                  if (!*v107) {
                    goto LABEL_116;
                  }
                }
                if (v108 >= v105) {
                  break;
                }
                v104 = v107[1];
                if (!v104)
                {
                  v106 = v107 + 1;
                  goto LABEL_116;
                }
              }
              v109 = (uint64_t *)v107;
              std::ctype_base::mask v111 = (uint64_t *)(v107 + 5);
              if (v111 == (uint64_t *)&v184)
              {
LABEL_135:
                unint64_t v119 = v176;
                unint64_t v120 = *MEMORY[0x263F8BA90];
                uint64_t v121 = &v176;
                v122 = &v176;
                if (v176)
                {
                  while (1)
                  {
                    while (1)
                    {
                      v122 = (uint64_t **)v119;
                      unint64_t v123 = v119[4];
                      if (v120 >= v123) {
                        break;
                      }
                      unint64_t v119 = *v122;
                      uint64_t v121 = v122;
                      if (!*v122) {
                        goto LABEL_142;
                      }
                    }
                    if (v123 >= v120) {
                      break;
                    }
                    unint64_t v119 = v122[1];
                    if (!v119)
                    {
                      uint64_t v121 = v122 + 1;
                      goto LABEL_142;
                    }
                  }
                  unint64_t v124 = (uint64_t *)v122;
                  char v126 = (uint64_t *)(v122 + 5);
                  if (v126 == (uint64_t *)&v181)
                  {
LABEL_161:
                    uint64_t v134 = v176;
                    unint64_t v135 = *MEMORY[0x263F8BAB0];
                    v136 = &v176;
                    v137 = &v176;
                    if (v176)
                    {
                      while (1)
                      {
                        while (1)
                        {
                          v137 = (uint64_t **)v134;
                          unint64_t v138 = v134[4];
                          if (v135 >= v138) {
                            break;
                          }
                          uint64_t v134 = *v137;
                          v136 = v137;
                          if (!*v137) {
                            goto LABEL_168;
                          }
                        }
                        if (v138 >= v135) {
                          break;
                        }
                        uint64_t v134 = v137[1];
                        if (!v134)
                        {
                          v136 = v137 + 1;
                          goto LABEL_168;
                        }
                      }
                      v139 = (uint64_t *)v137;
                      v141 = (uint64_t *)(v137 + 5);
                      if (v141 == (uint64_t *)&v178) {
                        goto LABEL_187;
                      }
                    }
                    else
                    {
LABEL_168:
                      v139 = (uint64_t *)operator new(0x40uLL);
                      v139[4] = v135;
                      v139[5] = (uint64_t)(v139 + 5);
                      v139[6] = (uint64_t)(v139 + 5);
                      v139[7] = 0;
                      uint64_t *v139 = 0;
                      v139[1] = 0;
                      v139[2] = (uint64_t)v137;
                      *v136 = v139;
                      v140 = v139;
                      if (*v175)
                      {
                        v175 = (uint64_t **)*v175;
                        v140 = *v136;
                      }
                      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v176, v140);
                      ++v177;
                      v141 = v139 + 5;
                      if (v139 + 5 == (uint64_t *)&v178) {
                        goto LABEL_187;
                      }
                    }
                    uint64_t v142 = (uint64_t)v179;
                    for (uint64_t i = (uint64_t *)v139[6]; (void **)v142 != &v178 && i != v141; uint64_t i = (uint64_t *)i[1])
                    {
                      i[2] = *(void *)(v142 + 16);
                      *((_DWORD *)i + 6) = *(_DWORD *)(v142 + 24);
                      uint64_t v142 = *(void *)(v142 + 8);
                    }
                    if (i == v141)
                    {
                      std::list<std::pair<unsigned long long,unsigned int>>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>,std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>>(v141, v141, v142, (uint64_t)&v178);
                    }
                    else
                    {
                      uint64_t v146 = v139[5];
                      uint64_t v147 = *i;
                      *(void *)(v147 + 8) = *(void *)(v146 + 8);
                      **(void **)(v146 + 8) = v147;
                      do
                      {
                        v148 = (uint64_t *)i[1];
                        --v139[7];
                        operator delete(i);
                        uint64_t i = v148;
                      }
                      while (v148 != v141);
                    }
LABEL_187:
                    v174[0] = 0;
                    v174[1] = 0;
                    v173 = v174;
                    std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__tree_node<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,void *> *,long>>>(&v173, v175, &v176);
                    desense::ARICommandDriver::sendFrequencyReport_sync((uint64_t)this, (uint64_t)&v173, 0);
                    std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v174[0]);
                    std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v176);
                    if (v180)
                    {
                      v150 = v178;
                      v149 = v179;
                      uint64_t v151 = *v179;
                      *(void *)(v151 + 8) = v178[1];
                      *(void *)v150[1] = v151;
                      uint64_t v180 = 0;
                      if (v149 != &v178)
                      {
                        do
                        {
                          v152 = (void *)v149[1];
                          operator delete(v149);
                          v149 = v152;
                        }
                        while (v152 != &v178);
                      }
                    }
                    if (v183)
                    {
                      v154 = v181;
                      v153 = v182;
                      uint64_t v155 = *v182;
                      *(void *)(v155 + 8) = v181[1];
                      *(void *)v154[1] = v155;
                      uint64_t v183 = 0;
                      if (v153 != &v181)
                      {
                        do
                        {
                          v156 = (void *)v153[1];
                          operator delete(v153);
                          v153 = v156;
                        }
                        while (v156 != &v181);
                      }
                    }
                    if (v186)
                    {
                      v158 = v184;
                      v157 = v185;
                      uint64_t v159 = *v185;
                      *(void *)(v159 + 8) = v184[1];
                      *(void *)v158[1] = v159;
                      uint64_t v186 = 0;
                      if (v157 != &v184)
                      {
                        do
                        {
                          v160 = (void *)v157[1];
                          operator delete(v157);
                          v157 = v160;
                        }
                        while (v160 != &v184);
                      }
                    }
                    if (v189)
                    {
                      v162 = v187;
                      v161 = v188;
                      uint64_t v163 = *v188;
                      *(void *)(v163 + 8) = v187[1];
                      *(void *)v162[1] = v163;
                      uint64_t v189 = 0;
                      if (v161 != &v187)
                      {
                        do
                        {
                          v164 = (void *)v161[1];
                          operator delete(v161);
                          v161 = v164;
                        }
                        while (v164 != &v187);
                      }
                    }
                    if (v192)
                    {
                      v166 = v190;
                      v165 = v191;
                      uint64_t v167 = *v191;
                      *(void *)(v167 + 8) = v190[1];
                      *(void *)v166[1] = v167;
                      uint64_t v192 = 0;
                      if (v165 != &v190)
                      {
                        do
                        {
                          v168 = (void *)v165[1];
                          operator delete(v165);
                          v165 = v168;
                        }
                        while (v168 != &v190);
                      }
                    }
                    if (*(void *)&buf[16])
                    {
                      uint64_t v170 = *(void *)buf;
                      v169 = *(void **)&buf[8];
                      uint64_t v171 = **(void **)&buf[8];
                      *(void *)(v171 + 8) = *(void *)(*(void *)buf + 8);
                      **(void **)(v170 + 8) = v171;
                      *(void *)&uint8_t buf[16] = 0;
                      if (v169 != (void *)buf)
                      {
                        do
                        {
                          v172 = (unsigned char *)v169[1];
                          operator delete(v169);
                          v169 = v172;
                        }
                        while (v172 != buf);
                      }
                    }
                    return MEMORY[0x237DF6830](v193);
                  }
                }
                else
                {
LABEL_142:
                  unint64_t v124 = (uint64_t *)operator new(0x40uLL);
                  v124[4] = v120;
                  v124[5] = (uint64_t)(v124 + 5);
                  v124[6] = (uint64_t)(v124 + 5);
                  v124[7] = 0;
                  *unint64_t v124 = 0;
                  v124[1] = 0;
                  v124[2] = (uint64_t)v122;
                  *uint64_t v121 = v124;
                  unint64_t v125 = v124;
                  if (*v175)
                  {
                    v175 = (uint64_t **)*v175;
                    unint64_t v125 = *v121;
                  }
                  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v176, v125);
                  ++v177;
                  char v126 = v124 + 5;
                  if (v124 + 5 == (uint64_t *)&v181) {
                    goto LABEL_161;
                  }
                }
                uint64_t v127 = (uint64_t)v182;
                for (unint64_t j = (uint64_t *)v124[6]; (void **)v127 != &v181 && j != v126; unint64_t j = (uint64_t *)j[1])
                {
                  j[2] = *(void *)(v127 + 16);
                  *((_DWORD *)j + 6) = *(_DWORD *)(v127 + 24);
                  uint64_t v127 = *(void *)(v127 + 8);
                }
                if (j == v126)
                {
                  std::list<std::pair<unsigned long long,unsigned int>>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>,std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>>(v126, v126, v127, (uint64_t)&v181);
                }
                else
                {
                  uint64_t v131 = v124[5];
                  uint64_t v132 = *j;
                  *(void *)(v132 + 8) = *(void *)(v131 + 8);
                  **(void **)(v131 + 8) = v132;
                  do
                  {
                    int v133 = (uint64_t *)j[1];
                    --v124[7];
                    operator delete(j);
                    unint64_t j = v133;
                  }
                  while (v133 != v126);
                }
                goto LABEL_161;
              }
            }
            else
            {
LABEL_116:
              v109 = (uint64_t *)operator new(0x40uLL);
              v109[4] = v105;
              v109[5] = (uint64_t)(v109 + 5);
              v109[6] = (uint64_t)(v109 + 5);
              v109[7] = 0;
              uint64_t *v109 = 0;
              v109[1] = 0;
              v109[2] = (uint64_t)v107;
              *v106 = v109;
              v110 = v109;
              if (*v175)
              {
                v175 = (uint64_t **)*v175;
                v110 = *v106;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v176, v110);
              ++v177;
              std::ctype_base::mask v111 = v109 + 5;
              if (v109 + 5 == (uint64_t *)&v184) {
                goto LABEL_135;
              }
            }
            uint64_t v112 = (uint64_t)v185;
            for (unint64_t k = (uint64_t *)v109[6]; (void **)v112 != &v184 && k != v111; unint64_t k = (uint64_t *)k[1])
            {
              k[2] = *(void *)(v112 + 16);
              *((_DWORD *)k + 6) = *(_DWORD *)(v112 + 24);
              uint64_t v112 = *(void *)(v112 + 8);
            }
            if (k == v111)
            {
              std::list<std::pair<unsigned long long,unsigned int>>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>,std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>>(v111, v111, v112, (uint64_t)&v184);
            }
            else
            {
              uint64_t v116 = v109[5];
              uint64_t v117 = *k;
              *(void *)(v117 + 8) = *(void *)(v116 + 8);
              **(void **)(v116 + 8) = v117;
              do
              {
                int v118 = (uint64_t *)k[1];
                --v109[7];
                operator delete(k);
                unint64_t k = v118;
              }
              while (v118 != v111);
            }
            goto LABEL_135;
          }
        }
        else
        {
LABEL_90:
          long long v94 = (uint64_t *)operator new(0x40uLL);
          v94[4] = v90;
          v94[5] = (uint64_t)(v94 + 5);
          v94[6] = (uint64_t)(v94 + 5);
          v94[7] = 0;
          uint64_t *v94 = 0;
          v94[1] = 0;
          v94[2] = (uint64_t)v92;
          *BOOL v91 = v94;
          long long v95 = v94;
          if (*v175)
          {
            v175 = (uint64_t **)*v175;
            long long v95 = *v91;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v176, v95);
          ++v177;
          long long v96 = v94 + 5;
          if (v94 + 5 == (uint64_t *)&v187) {
            goto LABEL_109;
          }
        }
        uint64_t v97 = (uint64_t)v188;
        for (unint64_t m = (uint64_t *)v94[6]; (void **)v97 != &v187 && m != v96; unint64_t m = (uint64_t *)m[1])
        {
          m[2] = *(void *)(v97 + 16);
          *((_DWORD *)m + 6) = *(_DWORD *)(v97 + 24);
          uint64_t v97 = *(void *)(v97 + 8);
        }
        if (m == v96)
        {
          std::list<std::pair<unsigned long long,unsigned int>>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>,std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>>(v96, v96, v97, (uint64_t)&v187);
        }
        else
        {
          uint64_t v101 = v94[5];
          uint64_t v102 = *m;
          *(void *)(v102 + 8) = *(void *)(v101 + 8);
          **(void **)(v101 + 8) = v102;
          do
          {
            uint64_t v103 = (uint64_t *)m[1];
            --v94[7];
            operator delete(m);
            unint64_t m = v103;
          }
          while (v103 != v96);
        }
        goto LABEL_109;
      }
    }
    else
    {
LABEL_64:
      unint64_t v79 = (uint64_t *)operator new(0x40uLL);
      v79[4] = v75;
      v79[5] = (uint64_t)(v79 + 5);
      v79[6] = (uint64_t)(v79 + 5);
      v79[7] = 0;
      *unint64_t v79 = 0;
      v79[1] = 0;
      v79[2] = (uint64_t)v77;
      std::__shared_weak_count *v76 = v79;
      uint64_t v80 = v79;
      if (*v175)
      {
        v175 = (uint64_t **)*v175;
        uint64_t v80 = *v76;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v176, v80);
      ++v177;
      int64_t v81 = v79 + 5;
      if (v79 + 5 == (uint64_t *)&v190) {
        goto LABEL_83;
      }
    }
    uint64_t v82 = (uint64_t)v191;
    for (n = (uint64_t *)v79[6]; (void **)v82 != &v190 && n != v81; n = (uint64_t *)n[1])
    {
      n[2] = *(void *)(v82 + 16);
      *((_DWORD *)n + 6) = *(_DWORD *)(v82 + 24);
      uint64_t v82 = *(void *)(v82 + 8);
    }
    if (n == v81)
    {
      std::list<std::pair<unsigned long long,unsigned int>>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>,std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>>(v81, v81, v82, (uint64_t)&v190);
    }
    else
    {
      uint64_t v86 = v79[5];
      uint64_t v87 = *n;
      *(void *)(v87 + 8) = *(void *)(v86 + 8);
      **(void **)(v86 + 8) = v87;
      do
      {
        __int16 v88 = (uint64_t *)n[1];
        --v79[7];
        operator delete(n);
        n = v88;
      }
      while (v88 != v81);
    }
    goto LABEL_83;
  }
  uint64_t v6 = *((void *)this + 5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = asString();
    int v10 = **((_DWORD **)&v194 + 1);
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = v9;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = v10;
    std::string::size_type v8 = "#N Current frequency info indication failed: %s (%d)";
    goto LABEL_7;
  }
  return MEMORY[0x237DF6830](v193);
}

void sub_235DF4628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  std::list<std::pair<unsigned long long,unsigned int>>::~list(&a16);
  std::list<std::pair<unsigned long long,unsigned int>>::~list(&a19);
  std::list<std::pair<unsigned long long,unsigned int>>::~list(&a22);
  std::list<std::pair<unsigned long long,unsigned int>>::~list(&a25);
  std::list<std::pair<unsigned long long,unsigned int>>::~list(&a28);
  std::list<std::pair<unsigned long long,unsigned int>>::~list((uint64_t *)(v31 - 112));
  MEMORY[0x237DF6830](&a31);
  _Unwind_Resume(a1);
}

uint64_t desense::ARICommandDriver::setFrequencyReportingMode(void *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  int v5 = a1[5];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = desense::asString();
    _os_log_impl(&dword_235DB9000, v5, OS_LOG_TYPE_DEFAULT, "#I Set Frequency reporting mode: %s", buf, 0xCu);
  }
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v35 = v6;
  *(_OWORD *)long long __p = v6;
  long long v33 = v6;
  long long v34 = v6;
  *(_OWORD *)long long buf = v6;
  AriSdk::ARI_IBIMsAccCurrentFreqInfoReq_SDK::ARI_IBIMsAccCurrentFreqInfoReq_SDK((AriSdk::ARI_IBIMsAccCurrentFreqInfoReq_SDK *)buf);
  uint64_t v7 = operator new(4uLL);
  _DWORD *v7 = 0;
  std::string::size_type v8 = __p[0];
  __p[0] = v7;
  if (v8) {
    operator delete(v8);
  }
  if (a3 < 3)
  {
    uint64_t v9 = operator new(4uLL);
    *uint64_t v9 = a3;
    int v10 = __p[1];
    __p[1] = v9;
    if (v10) {
      operator delete(v10);
    }
    uint64_t v11 = a1[24];
    uint64_t v13 = (std::__shared_weak_count_vtbl *)a1[9];
    uint64_t v12 = (std::__shared_weak_count *)a1[10];
    if (!v12 || (uint64_t v14 = std::__shared_weak_count::lock(v12), (v28 = v14) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v15 = v14;
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    p_shared_weak_owners = &v14->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v15);
    }
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    uint64_t v17 = (std::__shared_weak_count *)operator new(0x38uLL);
    v17->__shared_owners_ = 0;
    p_uint64_t shared_owners = &v17->__shared_owners_;
    v17->__shared_weak_owners_ = 0;
    v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93D770;
    v17[1].__vftable = v13;
    v17[1].__shared_owners_ = (uint64_t)v15;
    v17[1].__shared_weak_owners_ = (uint64_t)desense::ARICommandDriver::handleSetFrequencyReportingModeResponse_sync;
    v17[2].__vftable = 0;
    *(void *)&long long v37 = MEMORY[0x263EF8330];
    *((void *)&v37 + 1) = 1174405120;
    unsigned int v38 = ___ZN3ice6detail12wrapCallbackIZNS_6Client4sendIN6AriSdk34ARI_IBIMsAccCurrentFreqInfoReq_SDKEN7desense13CommandDriverENS6_16ARICommandDriverEvJPKhjEEENS_16SendMsgBaseProxyERT_NSt3__110shared_ptrIT0_EEMT1_FT2_DpT3_EEUlSA_jE_vEEN8dispatch5blockIU13block_pointerFiPhjEEENSE_17integral_constantIiLi2EEEOSC__block_invoke;
    unsigned int v39 = &__block_descriptor_tmp_41_0;
    uint64_t v40 = v17 + 1;
    std::runtime_error v41 = v17;
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    aBlock[0] = (const void *)MEMORY[0x263EF8330];
    aBlock[1] = (const void *)0x40000000;
    aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_4;
    aBlock[3] = &unk_264C7DBE0;
    aBlock[4] = &v37;
    unsigned int v19 = _Block_copy(aBlock);
    uint64_t v20 = v41;
    if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
      if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
      {
LABEL_15:
        if (__p[0]) {
          goto LABEL_22;
        }
LABEL_21:
        uint64_t v23 = operator new(4uLL);
        _DWORD *v23 = 0;
        __p[0] = v23;
LABEL_22:
        unint64_t v30 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v24 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v24 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v29[0] = v24;
        v29[1] = v24;
        unsigned int v25 = *(std::__shared_weak_count **)(v11 + 16);
        *(void *)&long long v37 = *(void *)(v11 + 8);
        if (v25)
        {
          *((void *)&v37 + 1) = std::__shared_weak_count::lock(v25);
          if (*((void *)&v37 + 1))
          {
            ice::SendMsgBaseProxy::SendMsgBaseProxy();
            uint64_t v26 = (std::__shared_weak_count *)*((void *)&v37 + 1);
            if (*((void *)&v37 + 1)
              && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v37 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
              std::__shared_weak_count::__release_weak(v26);
            }
            aBlock[0] = v19;
            ice::SendMsgBaseProxy::callback();
            if (aBlock[0]) {
              _Block_release(aBlock[0]);
            }
            std::__shared_weak_count::__release_weak(v15);
            MEMORY[0x237DF50B0](v29);
            if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v28);
            }
            return MEMORY[0x237DF6630](buf);
          }
        }
        else
        {
          *((void *)&v37 + 1) = 0;
        }
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
    }
    else if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
    {
      goto LABEL_15;
    }
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    if (__p[0]) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  uint64_t v21 = a1[5];
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v22 = desense::asString();
    LODWORD(v37) = 136315138;
    *(void *)((char *)&v37 + 4) = v22;
    _os_log_impl(&dword_235DB9000, v21, OS_LOG_TYPE_DEFAULT, "#N Unhandled frequency reporting mode: %s", (uint8_t *)&v37, 0xCu);
  }
  return MEMORY[0x237DF6630](buf);
}

uint64_t desense::ARICommandDriver::handleSetFrequencyReportingModeResponse_sync(desense::ARICommandDriver *this, const unsigned __int8 *a2)
{
  uint64_t v200 = *MEMORY[0x263EF8340];
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v197 = v3;
  long long v198 = v3;
  long long v195 = v3;
  long long v196 = v3;
  v193[3] = v3;
  long long v194 = v3;
  v193[1] = v3;
  v193[2] = v3;
  v193[0] = v3;
  AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK((AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK *)v193, a2);
  if ((ice::isARIResponseValid() & 1) == 0) {
    return MEMORY[0x237DF6860](v193);
  }
  uint64_t v4 = (void *)AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK::unpack((AriSdk::ARI_IBIMsAccCurrentFreqInfoRspCb_SDK *)v193);
  int v5 = (int)v4;
  if (v4)
  {
    long long v6 = *((void *)this + 5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = asString();
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = v7;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v5;
      std::string::size_type v8 = "#N Could not unpack IBIMsAccCurrentFreqInfoRspCb: %s (%d)";
LABEL_8:
      _os_log_impl(&dword_235DB9000, v6, OS_LOG_TYPE_DEFAULT, v8, buf, 0x12u);
      return MEMORY[0x237DF6860](v193);
    }
    return MEMORY[0x237DF6860](v193);
  }
  if (!**((_DWORD **)&v194 + 1))
  {
    *(void *)long long buf = buf;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0;
    v190 = &v190;
    v191 = &v190;
    uint64_t v192 = 0;
    v187 = &v187;
    v188 = &v187;
    uint64_t v189 = 0;
    v184 = &v184;
    v185 = &v184;
    uint64_t v186 = 0;
    v181 = &v181;
    v182 = &v181;
    uint64_t v183 = 0;
    v178 = &v178;
    v179 = &v178;
    uint64_t v180 = 0;
    if (**((unsigned char **)&v195 + 1))
    {
      uint64_t v12 = 0;
      if (**((unsigned char **)&v195 + 1) == 1) {
        uint64_t v13 = 1;
      }
      else {
        uint64_t v13 = 2;
      }
      uint64_t v14 = (_DWORD *)(*((void *)&v195 + 1) + 12);
      uint64_t v15 = buf;
      do
      {
        int v16 = *v14;
        uint64_t v4 = operator new(0x20uLL);
        uint64_t v17 = *((void *)v14 - 1);
        v4[1] = buf;
        uint64_t v4[2] = v17;
        *((_DWORD *)v4 + 6) = v16;
        void *v4 = v15;
        *((void *)v15 + 1) = v4;
        ++v12;
        *(void *)long long buf = v4;
        *(void *)&uint8_t buf[16] = v12;
        v14 += 3;
        uint64_t v15 = v4;
      }
      while (v13 != v12);
    }
    unsigned int v18 = capabilities::abs::nonPrimaryDLServingCellBandwidthMaxValue((capabilities::abs *)v4);
    unsigned int v19 = *(unsigned __int8 *)v196;
    if (v19 >= 0x14) {
      unsigned int v19 = 20;
    }
    if (v19)
    {
      uint64_t v20 = 0;
      uint64_t v21 = v190;
      uint64_t v22 = 12 * v19;
      uint64_t v23 = v192 + 1;
      do
      {
        uint64_t v24 = v196 + v20;
        unsigned int v25 = *(_DWORD *)(v196 + v20 + 12);
        uint64_t v26 = operator new(0x20uLL);
        uint64_t v27 = *(void *)(v24 + 4);
        v26[1] = &v190;
        _OWORD v26[2] = v27;
        if (v25 >= v18) {
          unsigned int v28 = v18;
        }
        else {
          unsigned int v28 = v25;
        }
        *((_DWORD *)v26 + 6) = v28;
        void *v26 = v21;
        v21[1] = v26;
        v190 = v26;
        uint64_t v192 = v23;
        v20 += 12;
        ++v23;
        uint64_t v21 = v26;
      }
      while (v22 != v20);
    }
    unsigned int v29 = **((unsigned char **)&v196 + 1);
    if (v29 >= 0x40) {
      unsigned int v29 = 64;
    }
    if (v29)
    {
      uint64_t v30 = 0;
      uint64_t v31 = v187;
      uint64_t v32 = 12 * v29;
      uint64_t v33 = v189 + 1;
      do
      {
        uint64_t v34 = *((void *)&v196 + 1) + v30;
        unsigned int v35 = *(_DWORD *)(*((void *)&v196 + 1) + v30 + 12);
        uint64_t v36 = operator new(0x20uLL);
        uint64_t v37 = *(void *)(v34 + 4);
        v36[1] = &v187;
        v36[2] = v37;
        if (v35 >= v18) {
          unsigned int v38 = v18;
        }
        else {
          unsigned int v38 = v35;
        }
        *((_DWORD *)v36 + 6) = v38;
        void *v36 = v31;
        v31[1] = v36;
        v187 = v36;
        uint64_t v189 = v33;
        v30 += 12;
        ++v33;
        uint64_t v31 = v36;
      }
      while (v32 != v30);
    }
    unsigned int v39 = *(unsigned __int8 *)v197;
    if (v39 >= 0x64) {
      unsigned int v39 = 100;
    }
    if (v39)
    {
      uint64_t v40 = 0;
      std::runtime_error v41 = v184;
      uint64_t v42 = 12 * v39;
      uint64_t v43 = v186 + 1;
      do
      {
        uint64_t v44 = v197 + v40;
        unsigned int v45 = *(_DWORD *)(v197 + v40 + 12);
        long long v46 = operator new(0x20uLL);
        uint64_t v47 = *(void *)(v44 + 4);
        v46[1] = &v184;
        v46[2] = v47;
        if (v45 >= v18) {
          unsigned int v48 = v18;
        }
        else {
          unsigned int v48 = v45;
        }
        *((_DWORD *)v46 + 6) = v48;
        void *v46 = v41;
        v41[1] = v46;
        v184 = v46;
        uint64_t v186 = v43;
        v40 += 12;
        ++v43;
        std::runtime_error v41 = v46;
      }
      while (v42 != v40);
    }
    unsigned int v49 = **((unsigned char **)&v197 + 1);
    if (v49 >= 0x46) {
      unsigned int v49 = 70;
    }
    if (v49)
    {
      uint64_t v50 = 0;
      long long v51 = v181;
      uint64_t v52 = 12 * v49;
      uint64_t v53 = v183 + 1;
      do
      {
        uint64_t v54 = *((void *)&v197 + 1) + v50;
        unsigned int v55 = *(_DWORD *)(*((void *)&v197 + 1) + v50 + 12);
        long long v56 = operator new(0x20uLL);
        uint64_t v57 = *(void *)(v54 + 4);
        v56[1] = &v181;
        v56[2] = v57;
        if (v55 >= v18) {
          unsigned int v58 = v18;
        }
        else {
          unsigned int v58 = v55;
        }
        *((_DWORD *)v56 + 6) = v58;
        *long long v56 = v51;
        v51[1] = v56;
        v181 = v56;
        uint64_t v183 = v53;
        v50 += 12;
        ++v53;
        long long v51 = v56;
      }
      while (v52 != v50);
    }
    uint64_t v59 = v195;
    if (*(unsigned __int8 *)v195 >= 4u) {
      uint64_t v60 = 4;
    }
    else {
      uint64_t v60 = *(unsigned __int8 *)v195;
    }
    if (v60)
    {
      float64x2x2_t v61 = v178;
      uint64_t v62 = v180;
      int v63 = *(_DWORD *)(v195 + 12);
      uint64_t v64 = operator new(0x20uLL);
      uint64_t v65 = *(void *)(v59 + 4);
      v64[6] = v63;
      *((void *)v64 + 1) = &v178;
      *((void *)v64 + 2) = v65;
      *(void *)uint64_t v64 = v61;
      v61[1] = v64;
      v178 = v64;
      uint64_t v180 = v62 + 1;
      if (v60 != 1)
      {
        uint64_t v66 = v60 - 1;
        int v67 = (unsigned int *)(v195 + 24);
        uint64_t v68 = v62 + 2;
        do
        {
          unsigned int v69 = *v67;
          long long v70 = operator new(0x20uLL);
          uint64_t v71 = *((void *)v67 - 1);
          v70[1] = &v178;
          v70[2] = v71;
          if (v69 >= v18) {
            unsigned int v72 = v18;
          }
          else {
            unsigned int v72 = v69;
          }
          *((_DWORD *)v70 + 6) = v72;
          *long long v70 = v64;
          *((void *)v64 + 1) = v70;
          v178 = v70;
          uint64_t v180 = v68;
          v67 += 3;
          ++v68;
          uint64_t v64 = v70;
          --v66;
        }
        while (v66);
      }
    }
    v176 = 0;
    uint64_t v177 = 0;
    v175 = &v176;
    unint64_t v73 = operator new(0x40uLL);
    v73[4] = *MEMORY[0x263F8BAA0];
    v73[5] = v73 + 5;
    v73[6] = v73 + 5;
    v73[7] = 0;
    *unint64_t v73 = 0;
    v73[1] = 0;
    v73[2] = &v176;
    v175 = (uint64_t **)v73;
    v176 = v73;
    *((unsigned char *)v73 + 24) = 1;
    uint64_t v177 = 1;
    std::list<std::pair<unsigned long long,unsigned int>>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>,std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>>(v73 + 5, v73 + 5, *(uint64_t *)&buf[8], (uint64_t)buf);
    unint64_t v74 = v176;
    unint64_t v75 = *MEMORY[0x263F8BA98];
    uint64_t v76 = &v176;
    unint64_t v77 = &v176;
    if (v176)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v77 = (uint64_t **)v74;
          unint64_t v78 = v74[4];
          if (v75 >= v78) {
            break;
          }
          unint64_t v74 = *v77;
          uint64_t v76 = v77;
          if (!*v77) {
            goto LABEL_65;
          }
        }
        if (v78 >= v75) {
          break;
        }
        unint64_t v74 = v77[1];
        if (!v74)
        {
          uint64_t v76 = v77 + 1;
          goto LABEL_65;
        }
      }
      unint64_t v79 = (uint64_t *)v77;
      int64_t v81 = (uint64_t *)(v77 + 5);
      if (v81 == (uint64_t *)&v190)
      {
LABEL_84:
        int v89 = v176;
        unint64_t v90 = *MEMORY[0x263F8BAA8];
        BOOL v91 = &v176;
        unint64_t v92 = &v176;
        if (v176)
        {
          while (1)
          {
            while (1)
            {
              unint64_t v92 = (uint64_t **)v89;
              unint64_t v93 = v89[4];
              if (v90 >= v93) {
                break;
              }
              int v89 = *v92;
              BOOL v91 = v92;
              if (!*v92) {
                goto LABEL_91;
              }
            }
            if (v93 >= v90) {
              break;
            }
            int v89 = v92[1];
            if (!v89)
            {
              BOOL v91 = v92 + 1;
              goto LABEL_91;
            }
          }
          long long v94 = (uint64_t *)v92;
          long long v96 = (uint64_t *)(v92 + 5);
          if (v96 == (uint64_t *)&v187)
          {
LABEL_110:
            v104 = v176;
            unint64_t v105 = *MEMORY[0x263F8BAB8];
            v106 = &v176;
            int v107 = &v176;
            if (v176)
            {
              while (1)
              {
                while (1)
                {
                  int v107 = (uint64_t **)v104;
                  unint64_t v108 = v104[4];
                  if (v105 >= v108) {
                    break;
                  }
                  v104 = *v107;
                  v106 = v107;
                  if (!*v107) {
                    goto LABEL_117;
                  }
                }
                if (v108 >= v105) {
                  break;
                }
                v104 = v107[1];
                if (!v104)
                {
                  v106 = v107 + 1;
                  goto LABEL_117;
                }
              }
              v109 = (uint64_t *)v107;
              std::ctype_base::mask v111 = (uint64_t *)(v107 + 5);
              if (v111 == (uint64_t *)&v184)
              {
LABEL_136:
                unint64_t v119 = v176;
                unint64_t v120 = *MEMORY[0x263F8BA90];
                uint64_t v121 = &v176;
                v122 = &v176;
                if (v176)
                {
                  while (1)
                  {
                    while (1)
                    {
                      v122 = (uint64_t **)v119;
                      unint64_t v123 = v119[4];
                      if (v120 >= v123) {
                        break;
                      }
                      unint64_t v119 = *v122;
                      uint64_t v121 = v122;
                      if (!*v122) {
                        goto LABEL_143;
                      }
                    }
                    if (v123 >= v120) {
                      break;
                    }
                    unint64_t v119 = v122[1];
                    if (!v119)
                    {
                      uint64_t v121 = v122 + 1;
                      goto LABEL_143;
                    }
                  }
                  unint64_t v124 = (uint64_t *)v122;
                  char v126 = (uint64_t *)(v122 + 5);
                  if (v126 == (uint64_t *)&v181)
                  {
LABEL_162:
                    uint64_t v134 = v176;
                    unint64_t v135 = *MEMORY[0x263F8BAB0];
                    v136 = &v176;
                    v137 = &v176;
                    if (v176)
                    {
                      while (1)
                      {
                        while (1)
                        {
                          v137 = (uint64_t **)v134;
                          unint64_t v138 = v134[4];
                          if (v135 >= v138) {
                            break;
                          }
                          uint64_t v134 = *v137;
                          v136 = v137;
                          if (!*v137) {
                            goto LABEL_169;
                          }
                        }
                        if (v138 >= v135) {
                          break;
                        }
                        uint64_t v134 = v137[1];
                        if (!v134)
                        {
                          v136 = v137 + 1;
                          goto LABEL_169;
                        }
                      }
                      v139 = (uint64_t *)v137;
                      v141 = (uint64_t *)(v137 + 5);
                      if (v141 == (uint64_t *)&v178) {
                        goto LABEL_188;
                      }
                    }
                    else
                    {
LABEL_169:
                      v139 = (uint64_t *)operator new(0x40uLL);
                      v139[4] = v135;
                      v139[5] = (uint64_t)(v139 + 5);
                      v139[6] = (uint64_t)(v139 + 5);
                      v139[7] = 0;
                      uint64_t *v139 = 0;
                      v139[1] = 0;
                      v139[2] = (uint64_t)v137;
                      *v136 = v139;
                      v140 = v139;
                      if (*v175)
                      {
                        v175 = (uint64_t **)*v175;
                        v140 = *v136;
                      }
                      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v176, v140);
                      ++v177;
                      v141 = v139 + 5;
                      if (v139 + 5 == (uint64_t *)&v178) {
                        goto LABEL_188;
                      }
                    }
                    uint64_t v142 = (uint64_t)v179;
                    for (uint64_t i = (uint64_t *)v139[6]; (void **)v142 != &v178 && i != v141; uint64_t i = (uint64_t *)i[1])
                    {
                      i[2] = *(void *)(v142 + 16);
                      *((_DWORD *)i + 6) = *(_DWORD *)(v142 + 24);
                      uint64_t v142 = *(void *)(v142 + 8);
                    }
                    if (i == v141)
                    {
                      std::list<std::pair<unsigned long long,unsigned int>>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>,std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>>(v141, v141, v142, (uint64_t)&v178);
                    }
                    else
                    {
                      uint64_t v146 = v139[5];
                      uint64_t v147 = *i;
                      *(void *)(v147 + 8) = *(void *)(v146 + 8);
                      **(void **)(v146 + 8) = v147;
                      do
                      {
                        v148 = (uint64_t *)i[1];
                        --v139[7];
                        operator delete(i);
                        uint64_t i = v148;
                      }
                      while (v148 != v141);
                    }
LABEL_188:
                    v174[0] = 0;
                    v174[1] = 0;
                    v173 = v174;
                    std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__tree_node<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,void *> *,long>>>(&v173, v175, &v176);
                    desense::ARICommandDriver::sendFrequencyReport_sync((uint64_t)this, (uint64_t)&v173, 0);
                    std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v174[0]);
                    std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v176);
                    if (v180)
                    {
                      v150 = v178;
                      v149 = v179;
                      uint64_t v151 = *v179;
                      *(void *)(v151 + 8) = v178[1];
                      *(void *)v150[1] = v151;
                      uint64_t v180 = 0;
                      if (v149 != &v178)
                      {
                        do
                        {
                          v152 = (void *)v149[1];
                          operator delete(v149);
                          v149 = v152;
                        }
                        while (v152 != &v178);
                      }
                    }
                    if (v183)
                    {
                      v154 = v181;
                      v153 = v182;
                      uint64_t v155 = *v182;
                      *(void *)(v155 + 8) = v181[1];
                      *(void *)v154[1] = v155;
                      uint64_t v183 = 0;
                      if (v153 != &v181)
                      {
                        do
                        {
                          v156 = (void *)v153[1];
                          operator delete(v153);
                          v153 = v156;
                        }
                        while (v156 != &v181);
                      }
                    }
                    if (v186)
                    {
                      v158 = v184;
                      v157 = v185;
                      uint64_t v159 = *v185;
                      *(void *)(v159 + 8) = v184[1];
                      *(void *)v158[1] = v159;
                      uint64_t v186 = 0;
                      if (v157 != &v184)
                      {
                        do
                        {
                          v160 = (void *)v157[1];
                          operator delete(v157);
                          v157 = v160;
                        }
                        while (v160 != &v184);
                      }
                    }
                    if (v189)
                    {
                      v162 = v187;
                      v161 = v188;
                      uint64_t v163 = *v188;
                      *(void *)(v163 + 8) = v187[1];
                      *(void *)v162[1] = v163;
                      uint64_t v189 = 0;
                      if (v161 != &v187)
                      {
                        do
                        {
                          v164 = (void *)v161[1];
                          operator delete(v161);
                          v161 = v164;
                        }
                        while (v164 != &v187);
                      }
                    }
                    if (v192)
                    {
                      v166 = v190;
                      v165 = v191;
                      uint64_t v167 = *v191;
                      *(void *)(v167 + 8) = v190[1];
                      *(void *)v166[1] = v167;
                      uint64_t v192 = 0;
                      if (v165 != &v190)
                      {
                        do
                        {
                          v168 = (void *)v165[1];
                          operator delete(v165);
                          v165 = v168;
                        }
                        while (v168 != &v190);
                      }
                    }
                    if (*(void *)&buf[16])
                    {
                      uint64_t v170 = *(void *)buf;
                      v169 = *(void **)&buf[8];
                      uint64_t v171 = **(void **)&buf[8];
                      *(void *)(v171 + 8) = *(void *)(*(void *)buf + 8);
                      **(void **)(v170 + 8) = v171;
                      *(void *)&uint8_t buf[16] = 0;
                      if (v169 != (void *)buf)
                      {
                        do
                        {
                          v172 = (unsigned char *)v169[1];
                          operator delete(v169);
                          v169 = v172;
                        }
                        while (v172 != buf);
                      }
                    }
                    return MEMORY[0x237DF6860](v193);
                  }
                }
                else
                {
LABEL_143:
                  unint64_t v124 = (uint64_t *)operator new(0x40uLL);
                  v124[4] = v120;
                  v124[5] = (uint64_t)(v124 + 5);
                  v124[6] = (uint64_t)(v124 + 5);
                  v124[7] = 0;
                  *unint64_t v124 = 0;
                  v124[1] = 0;
                  v124[2] = (uint64_t)v122;
                  *uint64_t v121 = v124;
                  unint64_t v125 = v124;
                  if (*v175)
                  {
                    v175 = (uint64_t **)*v175;
                    unint64_t v125 = *v121;
                  }
                  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v176, v125);
                  ++v177;
                  char v126 = v124 + 5;
                  if (v124 + 5 == (uint64_t *)&v181) {
                    goto LABEL_162;
                  }
                }
                uint64_t v127 = (uint64_t)v182;
                for (unint64_t j = (uint64_t *)v124[6]; (void **)v127 != &v181 && j != v126; unint64_t j = (uint64_t *)j[1])
                {
                  j[2] = *(void *)(v127 + 16);
                  *((_DWORD *)j + 6) = *(_DWORD *)(v127 + 24);
                  uint64_t v127 = *(void *)(v127 + 8);
                }
                if (j == v126)
                {
                  std::list<std::pair<unsigned long long,unsigned int>>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>,std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>>(v126, v126, v127, (uint64_t)&v181);
                }
                else
                {
                  uint64_t v131 = v124[5];
                  uint64_t v132 = *j;
                  *(void *)(v132 + 8) = *(void *)(v131 + 8);
                  **(void **)(v131 + 8) = v132;
                  do
                  {
                    int v133 = (uint64_t *)j[1];
                    --v124[7];
                    operator delete(j);
                    unint64_t j = v133;
                  }
                  while (v133 != v126);
                }
                goto LABEL_162;
              }
            }
            else
            {
LABEL_117:
              v109 = (uint64_t *)operator new(0x40uLL);
              v109[4] = v105;
              v109[5] = (uint64_t)(v109 + 5);
              v109[6] = (uint64_t)(v109 + 5);
              v109[7] = 0;
              uint64_t *v109 = 0;
              v109[1] = 0;
              v109[2] = (uint64_t)v107;
              *v106 = v109;
              v110 = v109;
              if (*v175)
              {
                v175 = (uint64_t **)*v175;
                v110 = *v106;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v176, v110);
              ++v177;
              std::ctype_base::mask v111 = v109 + 5;
              if (v109 + 5 == (uint64_t *)&v184) {
                goto LABEL_136;
              }
            }
            uint64_t v112 = (uint64_t)v185;
            for (unint64_t k = (uint64_t *)v109[6]; (void **)v112 != &v184 && k != v111; unint64_t k = (uint64_t *)k[1])
            {
              k[2] = *(void *)(v112 + 16);
              *((_DWORD *)k + 6) = *(_DWORD *)(v112 + 24);
              uint64_t v112 = *(void *)(v112 + 8);
            }
            if (k == v111)
            {
              std::list<std::pair<unsigned long long,unsigned int>>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>,std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>>(v111, v111, v112, (uint64_t)&v184);
            }
            else
            {
              uint64_t v116 = v109[5];
              uint64_t v117 = *k;
              *(void *)(v117 + 8) = *(void *)(v116 + 8);
              **(void **)(v116 + 8) = v117;
              do
              {
                int v118 = (uint64_t *)k[1];
                --v109[7];
                operator delete(k);
                unint64_t k = v118;
              }
              while (v118 != v111);
            }
            goto LABEL_136;
          }
        }
        else
        {
LABEL_91:
          long long v94 = (uint64_t *)operator new(0x40uLL);
          v94[4] = v90;
          v94[5] = (uint64_t)(v94 + 5);
          v94[6] = (uint64_t)(v94 + 5);
          v94[7] = 0;
          uint64_t *v94 = 0;
          v94[1] = 0;
          v94[2] = (uint64_t)v92;
          *BOOL v91 = v94;
          long long v95 = v94;
          if (*v175)
          {
            v175 = (uint64_t **)*v175;
            long long v95 = *v91;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v176, v95);
          ++v177;
          long long v96 = v94 + 5;
          if (v94 + 5 == (uint64_t *)&v187) {
            goto LABEL_110;
          }
        }
        uint64_t v97 = (uint64_t)v188;
        for (unint64_t m = (uint64_t *)v94[6]; (void **)v97 != &v187 && m != v96; unint64_t m = (uint64_t *)m[1])
        {
          m[2] = *(void *)(v97 + 16);
          *((_DWORD *)m + 6) = *(_DWORD *)(v97 + 24);
          uint64_t v97 = *(void *)(v97 + 8);
        }
        if (m == v96)
        {
          std::list<std::pair<unsigned long long,unsigned int>>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>,std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>>(v96, v96, v97, (uint64_t)&v187);
        }
        else
        {
          uint64_t v101 = v94[5];
          uint64_t v102 = *m;
          *(void *)(v102 + 8) = *(void *)(v101 + 8);
          **(void **)(v101 + 8) = v102;
          do
          {
            uint64_t v103 = (uint64_t *)m[1];
            --v94[7];
            operator delete(m);
            unint64_t m = v103;
          }
          while (v103 != v96);
        }
        goto LABEL_110;
      }
    }
    else
    {
LABEL_65:
      unint64_t v79 = (uint64_t *)operator new(0x40uLL);
      v79[4] = v75;
      v79[5] = (uint64_t)(v79 + 5);
      v79[6] = (uint64_t)(v79 + 5);
      v79[7] = 0;
      *unint64_t v79 = 0;
      v79[1] = 0;
      v79[2] = (uint64_t)v77;
      std::__shared_weak_count *v76 = v79;
      uint64_t v80 = v79;
      if (*v175)
      {
        v175 = (uint64_t **)*v175;
        uint64_t v80 = *v76;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v176, v80);
      ++v177;
      int64_t v81 = v79 + 5;
      if (v79 + 5 == (uint64_t *)&v190) {
        goto LABEL_84;
      }
    }
    uint64_t v82 = (uint64_t)v191;
    for (n = (uint64_t *)v79[6]; (void **)v82 != &v190 && n != v81; n = (uint64_t *)n[1])
    {
      n[2] = *(void *)(v82 + 16);
      *((_DWORD *)n + 6) = *(_DWORD *)(v82 + 24);
      uint64_t v82 = *(void *)(v82 + 8);
    }
    if (n == v81)
    {
      std::list<std::pair<unsigned long long,unsigned int>>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>,std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>>(v81, v81, v82, (uint64_t)&v190);
    }
    else
    {
      uint64_t v86 = v79[5];
      uint64_t v87 = *n;
      *(void *)(v87 + 8) = *(void *)(v86 + 8);
      **(void **)(v86 + 8) = v87;
      do
      {
        __int16 v88 = (uint64_t *)n[1];
        --v79[7];
        operator delete(n);
        n = v88;
      }
      while (v88 != v81);
    }
    goto LABEL_84;
  }
  long long v6 = *((void *)this + 5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = asString();
    int v10 = **((_DWORD **)&v194 + 1);
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = v9;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = v10;
    std::string::size_type v8 = "#N Set frequency reporting mode request failed: %s (%d)";
    goto LABEL_8;
  }
  return MEMORY[0x237DF6860](v193);
}

void sub_235DF5A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  std::list<std::pair<unsigned long long,unsigned int>>::~list(&a16);
  std::list<std::pair<unsigned long long,unsigned int>>::~list(&a19);
  std::list<std::pair<unsigned long long,unsigned int>>::~list(&a22);
  std::list<std::pair<unsigned long long,unsigned int>>::~list(&a25);
  std::list<std::pair<unsigned long long,unsigned int>>::~list(&a28);
  std::list<std::pair<unsigned long long,unsigned int>>::~list((uint64_t *)(v31 - 112));
  MEMORY[0x237DF6860](&a31);
  _Unwind_Resume(a1);
}

uint64_t desense::ARICommandDriver::registerFrequencyReporting(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2, 1);
}

void desense::ARICommandDriver::sendFrequencyReport_sync(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  if (!*(void *)(a2 + 16)) {
    return;
  }
  long long v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a3;
    _os_log_impl(&dword_235DB9000, v6, OS_LOG_TYPE_DEFAULT, "#I Sending frequency report for SubId=%d", buf, 8u);
  }
  v40[0] = 0;
  v40[1] = 0;
  unsigned int v39 = v40;
  std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__tree_node<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,void *> *,long>>>(&v39, *(void **)a2, (void *)(a2 + 8));
  uint64_t v7 = *(void *)(a1 + 136);
  v42[0] = 0;
  v42[1] = 0;
  std::runtime_error v41 = v42;
  std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__tree_node<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,void *> *,long>>>(&v41, v39, v40);
  int v51 = a3;
  unsigned int v49 = 0;
  uint64_t v50 = 0;
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v69 = v8;
  long long v70 = v8;
  long long v67 = v8;
  long long v68 = v8;
  long long v65 = v8;
  long long v66 = v8;
  long long v63 = v8;
  long long v64 = v8;
  *(_OWORD *)long long buf = v8;
  long long v62 = v8;
  uint64_t v9 = *(pthread_mutex_t **)(v7 + 24);
  __p[0] = (void *)10;
  __p[1] = buf;
  v72[0] = 0;
  v72[1] = v9;
  pthread_mutex_lock(v9);
  int v10 = *(atomic_uint **)(v7 + 8);
  if (!v10)
  {
    uint64_t v12 = *(uint64_t ***)v7;
    goto LABEL_16;
  }
  unsigned int explicit = atomic_load_explicit(v10 + 2, memory_order_acquire);
  uint64_t v12 = *(uint64_t ***)v7;
  if (explicit == 1)
  {
    uint64_t v13 = *v12;
    uint64_t v14 = *(void *)(v7 + 16);
    if ((uint64_t *)v14 == *v12)
    {
      uint64_t v14 = v13[1];
      *(void *)&long long v52 = v14;
      if (v13 == (uint64_t *)v14)
      {
LABEL_13:
        *(void *)(v7 + 16) = v14;
        goto LABEL_14;
      }
    }
    else
    {
      *(void *)&long long v52 = *(void *)(v7 + 16);
    }
    uint64_t v15 = *(void *)(v14 + 16);
    if (*(unsigned char *)(v15 + 24))
    {
      uint64_t v14 = *(void *)(v14 + 8);
    }
    else
    {
      uint64_t v14 = boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>>::erase(v13, (int *)(v15 + 64), (uint64_t **)&v52);
      uint64_t v12 = *(uint64_t ***)v7;
    }
    goto LABEL_13;
  }
LABEL_14:
  int v10 = *(atomic_uint **)(v7 + 8);
  if (v10) {
    atomic_fetch_add_explicit(v10 + 2, 1u, memory_order_relaxed);
  }
LABEL_16:
  int v16 = v50;
  unsigned int v49 = v12;
  uint64_t v50 = v10;
  if (v16)
  {
    if (atomic_fetch_add(v16 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v16 + 16))(v16);
      if (atomic_fetch_add(v16 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v16 + 24))(v16);
      }
    }
  }
  pthread_mutex_unlock(v72[1]);
  uint64_t v17 = (char *)__p[1];
  if (__p[1])
  {
    if ((uint64_t)&v72[0][-1].__opaque[55] >= 0)
    {
      unsigned int v18 = (char *)__p[1] + 16 * (uint64_t)v72[0];
      do
      {
        unsigned int v19 = (atomic_uint *)*((void *)v18 - 1);
        if (v19)
        {
          if (atomic_fetch_add(v19 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v19 + 16))(v19);
            if (atomic_fetch_add(v19 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v19 + 24))(v19);
            }
          }
        }
        v18 -= 16;
      }
      while (v18 > v17);
    }
    if (__p[0] >= (void *)0xB) {
      operator delete(__p[1]);
    }
  }
  *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v74 = v20;
  long long v75 = v20;
  *(_OWORD *)unsigned int v72 = v20;
  long long v73 = v20;
  long long v70 = v20;
  *(_OWORD *)long long __p = v20;
  long long v68 = v20;
  long long v69 = v20;
  long long v66 = v20;
  long long v67 = v20;
  long long v64 = v20;
  long long v65 = v20;
  long long v62 = v20;
  long long v63 = v20;
  *(_OWORD *)long long buf = v20;
  buf[0] = 0;
  unint64_t v76 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v77 = 10;
  unint64_t v78 = &buf[8];
  uint64_t v79 = 0;
  uint64_t v80 = &v41;
  int64_t v81 = &v51;
  uint64_t v82 = 0;
  uint64_t v83 = 0;
  uint64_t v21 = v49;
  uint64_t v22 = (uint64_t)*v49;
  long long v46 = buf;
  uint64_t v47 = v7;
  uint64_t v48 = v22;
  *(void *)&long long v44 = *(void *)(v22 + 8);
  *((void *)&v44 + 1) = v22;
  *(void *)&long long v45 = buf;
  *((void *)&v45 + 1) = v22;
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>::lock_next_callable(&v44);
  v43[0] = *v21;
  v43[1] = v43[0];
  _OWORD v43[2] = buf;
  v43[3] = v43[0];
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>::lock_next_callable(v43);
  long long v52 = v44;
  long long v53 = v45;
  uint64_t v23 = v43[0];
  uint64_t v24 = v44;
  if ((void)v44 != v43[0])
  {
    uint64_t v25 = v53;
    if (!*(unsigned char *)v53)
    {
      uint64_t v26 = *(void *)(*(void *)(v44 + 16) + 32);
      uint64_t v27 = *(void *)(v53 + 272);
      unsigned int v55 = 0;
      uint64_t v56 = 0;
      uint64_t v54 = &v55;
      std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__tree_node<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,void *> *,long>>>(&v54, *(void **)v27, (void *)(v27 + 8));
      uint64_t v28 = *(void *)(v26 + 24);
      if (!v28)
      {
        std::runtime_error::runtime_error(&v60, "call to empty boost::function");
        v60.__vftable = (std::runtime_error_vtbl *)&unk_26E93D570;
        boost::throw_exception<boost::bad_function_call>(&v60);
      }
      uint64_t v29 = **(unsigned int **)(v25 + 280);
      uint64_t v30 = *(void (**)(uint64_t, void ***, uint64_t))((v28 & 0xFFFFFFFFFFFFFFFELL) + 8);
      uint64_t v57 = v54;
      unsigned int v58 = v55;
      uint64_t v59 = v56;
      if (v56)
      {
        v55[2] = &v58;
        uint64_t v54 = &v55;
        unsigned int v55 = 0;
        uint64_t v56 = 0;
      }
      else
      {
        uint64_t v57 = &v58;
      }
      v30(v26 + 32, &v57, v29);
      std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v58);
      std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v55);
      if (!*(unsigned char *)v25) {
        *(unsigned char *)uint64_t v25 = 1;
      }
    }
    *(void *)&long long v52 = *(void *)(v24 + 8);
    boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>::lock_next_callable(&v52);
    uint64_t v31 = v53;
    if (*(unsigned char *)v53) {
      *(unsigned char *)long long v53 = 0;
    }
    for (uint64_t i = v52; (void)v52 != v23; uint64_t i = v52)
    {
      uint64_t v33 = *(void *)(*(void *)(i + 16) + 32);
      uint64_t v34 = *(void *)(v31 + 272);
      unsigned int v55 = 0;
      uint64_t v56 = 0;
      uint64_t v54 = &v55;
      std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__tree_node<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,void *> *,long>>>(&v54, *(void **)v34, (void *)(v34 + 8));
      uint64_t v35 = *(void *)(v33 + 24);
      if (!v35)
      {
        std::runtime_error::runtime_error(&v60, "call to empty boost::function");
        v60.__vftable = (std::runtime_error_vtbl *)&unk_26E93D570;
        boost::throw_exception<boost::bad_function_call>(&v60);
      }
      uint64_t v36 = **(unsigned int **)(v31 + 280);
      uint64_t v37 = *(void (**)(uint64_t, void ***, uint64_t))((v35 & 0xFFFFFFFFFFFFFFFELL) + 8);
      uint64_t v57 = v54;
      unsigned int v58 = v55;
      uint64_t v59 = v56;
      if (v56)
      {
        v55[2] = &v58;
        uint64_t v54 = &v55;
        unsigned int v55 = 0;
        uint64_t v56 = 0;
      }
      else
      {
        uint64_t v57 = &v58;
      }
      v37(v33 + 32, &v57, v36);
      std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v58);
      std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v55);
      if (!*(unsigned char *)v31) {
        *(unsigned char *)uint64_t v31 = 1;
      }
      *(void *)&long long v52 = *(void *)(i + 8);
      boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>::lock_next_callable(&v52);
      uint64_t v31 = v53;
      if (*(unsigned char *)v53) {
        *(unsigned char *)long long v53 = 0;
      }
    }
    if (*((_DWORD *)v46 + 73) <= *((_DWORD *)v46 + 72)) {
      goto LABEL_56;
    }
    goto LABEL_55;
  }
  if (HIDWORD(v82) > v82) {
LABEL_55:
  }
    boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::force_cleanup_connections(v47, v48);
LABEL_56:
  boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>>::~slot_call_iterator_cache((uint64_t)buf);
  unsigned int v38 = v50;
  if (v50 && atomic_fetch_add(v50 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v38 + 16))(v38);
    if (atomic_fetch_add(v38 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v38 + 24))(v38);
    }
  }
  std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v42[0]);
  std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v40[0]);
}

void sub_235DF628C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
}

void sub_235DF629C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,std::runtime_error a39)
{
  std::runtime_error::~runtime_error(&a39);
  std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(a34);
  if (a2 != 2)
  {
    boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(&v43);
    boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>>::~slot_call_iterator_cache((uint64_t)&v45);
    boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&v44);
    std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v42);
    std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v41);
    _Unwind_Resume(a1);
  }
  __cxa_begin_catch(a1);
  boost::signals2::detail::connection_body_base::disconnect(*(boost::signals2::detail::connection_body_base **)(a29 + 16));
  __cxa_rethrow();
}

void sub_235DF6324(_Unwind_Exception *a1, int a2)
{
  __cxa_end_catch();
  if (a2 != 2)
  {
    boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(&v6);
    boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>>::~slot_call_iterator_cache((uint64_t)&v8);
    boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&v7);
    std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v5);
    std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v4);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x235DF62F4);
}

void sub_235DF6358(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,unint64_t a61,char *__p,uint64_t a63)
{
  if (__p)
  {
    if (a63 - 1 >= 0)
    {
      long long v63 = &__p[16 * a63];
      do
      {
        long long v64 = (atomic_uint *)*((void *)v63 - 1);
        if (v64)
        {
          if (atomic_fetch_add(v64 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v64 + 16))(v64);
            if (atomic_fetch_add(v64 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v64 + 24))(v64);
            }
          }
        }
        v63 -= 16;
      }
      while (v63 > __p);
    }
    if (a61 >= 0xB) {
      operator delete(__p);
    }
  }
  JUMPOUT(0x235DF6458);
}

void sub_235DF6420()
{
}

void sub_235DF6428()
{
}

void sub_235DF6434(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x235DF6470);
}

uint64_t *std::list<std::pair<unsigned long long,unsigned int>>::~list(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v3 = *a1;
    int v2 = (uint64_t *)a1[1];
    uint64_t v4 = *v2;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v3 + 8) = v4;
    a1[2] = 0;
    if (v2 != a1)
    {
      do
      {
        int v5 = (uint64_t *)v2[1];
        operator delete(v2);
        int v2 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

uint64_t ctu::Loggable<desense::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x270F97428](a1 + 8);
}

size_t ctu::Loggable<desense::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(desense::CommandDriver *a1@<X0>, void *a2@<X8>)
{
  Name = (const char *)desense::CommandDriver::getName(a1);
  size_t result = strlen(Name);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memmove(a2, Name, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<desense::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x270F978E0](a1 + 8);
}

void *boost::signals2::signal<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::~signal(void *a1)
{
  *a1 = &unk_26E93D258;
  int v2 = (atomic_uint *)a1[2];
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

void *boost::signals2::signal<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::~signal(void *a1)
{
  *a1 = &unk_26E93D318;
  int v2 = (atomic_uint *)a1[2];
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

void boost::signals2::signal<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::~signal(void *__p)
{
  *long long __p = &unk_26E93D258;
  int v2 = (atomic_uint *)__p[2];
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }

  operator delete(__p);
}

uint64_t boost::signals2::signal<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::lock_pimpl@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 16);
  *a2 = *(void *)(result + 8);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 8), 1u, memory_order_relaxed);
  }
  return result;
}

void boost::signals2::signal<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::~signal(void *__p)
{
  *long long __p = &unk_26E93D318;
  uint64_t v2 = (atomic_uint *)__p[2];
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }

  operator delete(__p);
}

uint64_t boost::signals2::signal<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::lock_pimpl@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 16);
  *a2 = *(void *)(result + 8);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 8), 1u, memory_order_relaxed);
  }
  return result;
}

void *ctu::Loggable<desense::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_26E93D388;
  MEMORY[0x237DF4D50](a1 + 1);
  return a1;
}

void ctu::Loggable<desense::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_26E93D388;
  MEMORY[0x237DF4D50](a1 + 1);

  operator delete(a1);
}

void std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(*a1);
    std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(a1[1]);
    if (a1[7])
    {
      uint64_t v3 = a1[5];
      uint64_t v2 = (uint64_t *)a1[6];
      uint64_t v4 = *v2;
      *(void *)(v4 + 8) = *(void *)(v3 + 8);
      **(void **)(v3 + 8) = v4;
      a1[7] = 0;
      if (v2 != a1 + 5)
      {
        do
        {
          size_t v5 = (uint64_t *)v2[1];
          operator delete(v2);
          uint64_t v2 = v5;
        }
        while (v5 != a1 + 5);
      }
    }
    operator delete(a1);
  }
}

void *std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__tree_node<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,void *> *,long>>>(void *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v3 = a2;
    uint64_t v4 = result + 1;
    uint64_t v24 = a3;
    uint64_t v25 = (void **)result;
    while (1)
    {
      size_t v5 = (uint64_t *)result[1];
      uint64_t v6 = v4;
      if ((void *)*result != v4)
      {
        uint64_t v7 = (void *)result[1];
        uint64_t v8 = v4;
        if (v5)
        {
          do
          {
            uint64_t v6 = v7;
            uint64_t v7 = (void *)v7[1];
          }
          while (v7);
        }
        else
        {
          do
          {
            uint64_t v6 = (void *)v8[2];
            BOOL v9 = *v6 == (void)v8;
            uint64_t v8 = v6;
          }
          while (v9);
        }
        unint64_t v10 = v3[4];
        if (v6[4] >= v10) {
          break;
        }
      }
      if (v5) {
        uint64_t v11 = (uint64_t **)v6;
      }
      else {
        uint64_t v11 = (uint64_t **)v4;
      }
      if (v5) {
        uint64_t v12 = (uint64_t **)(v6 + 1);
      }
      else {
        uint64_t v12 = (uint64_t **)v4;
      }
      if (!*v12) {
        goto LABEL_25;
      }
LABEL_31:
      uint64_t v22 = (void *)v3[1];
      if (v22)
      {
        do
        {
          uint64_t v23 = v22;
          uint64_t v22 = (void *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          uint64_t v23 = (void *)v3[2];
          BOOL v9 = *v23 == (void)v3;
          uint64_t v3 = v23;
        }
        while (!v9);
      }
      uint64_t v3 = v23;
      size_t result = v25;
      if (v23 == a3) {
        return result;
      }
    }
    uint64_t v12 = (uint64_t **)v4;
    uint64_t v11 = (uint64_t **)v4;
    if (v5)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v11 = (uint64_t **)v5;
          unint64_t v13 = v5[4];
          if (v13 <= v10) {
            break;
          }
          size_t v5 = *v11;
          uint64_t v12 = v11;
          if (!*v11) {
            goto LABEL_25;
          }
        }
        if (v13 >= v10) {
          goto LABEL_31;
        }
        size_t v5 = v11[1];
        if (!v5)
        {
          uint64_t v12 = v11 + 1;
          break;
        }
      }
    }
LABEL_25:
    uint64_t v14 = (uint64_t *)operator new(0x40uLL);
    uint64_t v15 = v14;
    int v16 = v14 + 5;
    _OWORD v14[4] = v3[4];
    uint64_t v14[5] = (uint64_t)(v14 + 5);
    void v14[6] = (uint64_t)(v14 + 5);
    v14[7] = 0;
    uint64_t v17 = v3[6];
    if ((void *)v17 != v3 + 5)
    {
      uint64_t v18 = 1;
      unsigned int v19 = v14 + 5;
      do
      {
        long long v20 = operator new(0x20uLL);
        v20[1] = *(_OWORD *)(v17 + 16);
        *(void *)long long v20 = v19;
        *((void *)v20 + 1) = v16;
        v19[1] = v20;
        uint64_t v15[5] = (uint64_t)v20;
        v15[7] = v18;
        uint64_t v17 = *(void *)(v17 + 8);
        ++v18;
        unsigned int v19 = v20;
      }
      while ((void *)v17 != v3 + 5);
    }
    *uint64_t v15 = 0;
    v15[1] = 0;
    void v15[2] = (uint64_t)v11;
    *uint64_t v12 = v15;
    uint64_t v21 = (void *)**v25;
    if (v21)
    {
      *uint64_t v25 = v21;
      uint64_t v15 = *v12;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v25[1], v15);
    _OWORD v25[2] = (void *)((char *)v25[2] + 1);
    a3 = v24;
    goto LABEL_31;
  }
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 == result) {
    return result;
  }
  while (1)
  {
    uint64_t v2 = a2[2];
    if (*(unsigned char *)(v2 + 24)) {
      return result;
    }
    uint64_t v3 = *(uint64_t **)(v2 + 16);
    uint64_t v4 = *v3;
    if (*v3 != v2) {
      break;
    }
    uint64_t v7 = v3[1];
    if (!v7 || (int v8 = *(unsigned __int8 *)(v7 + 24), v5 = (unsigned char *)(v7 + 24), v8))
    {
      if (*(uint64_t **)v2 == a2)
      {
        *(unsigned char *)(v2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v11 = *(void *)(v2 + 8);
        *uint64_t v3 = v11;
        if (v11) {
          goto LABEL_15;
        }
      }
      else
      {
        BOOL v9 = *(uint64_t **)(v2 + 8);
        uint64_t v10 = *v9;
        *(void *)(v2 + 8) = *v9;
        if (v10)
        {
          *(void *)(v10 + 16) = v2;
          uint64_t v3 = *(uint64_t **)(v2 + 16);
        }
        v9[2] = (uint64_t)v3;
        *(void *)(*(void *)(v2 + 16) + 8 * (**(void **)(v2 + 16) != v2)) = v9;
        *BOOL v9 = v2;
        *(void *)(v2 + 16) = v9;
        uint64_t v3 = (uint64_t *)v9[2];
        uint64_t v2 = *v3;
        *((unsigned char *)v9 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v11 = *(void *)(v2 + 8);
        *uint64_t v3 = v11;
        if (v11) {
LABEL_15:
        }
          *(void *)(v11 + 16) = v3;
      }
      *(void *)(v2 + 16) = v3[2];
      *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
      *(void *)(v2 + 8) = v3;
      v3[2] = v2;
      return result;
    }
LABEL_3:
    *(unsigned char *)(v2 + 24) = 1;
    a2 = v3;
    *((unsigned char *)v3 + 24) = v3 == result;
    *size_t v5 = 1;
    if (v3 == result) {
      return result;
    }
  }
  if (v4)
  {
    int v6 = *(unsigned __int8 *)(v4 + 24);
    size_t v5 = (unsigned char *)(v4 + 24);
    if (!v6) {
      goto LABEL_3;
    }
  }
  if (*(uint64_t **)v2 == a2)
  {
    uint64_t v12 = a2[1];
    *(void *)uint64_t v2 = v12;
    if (v12)
    {
      *(void *)(v12 + 16) = v2;
      uint64_t v3 = *(uint64_t **)(v2 + 16);
    }
    a2[2] = (uint64_t)v3;
    *(void *)(*(void *)(v2 + 16) + 8 * (**(void **)(v2 + 16) != v2)) = a2;
    a2[1] = v2;
    *(void *)(v2 + 16) = a2;
    uint64_t v3 = (uint64_t *)a2[2];
  }
  else
  {
    a2 = (uint64_t *)a2[2];
  }
  *((unsigned char *)a2 + 24) = 1;
  *((unsigned char *)v3 + 24) = 0;
  unint64_t v13 = (uint64_t *)v3[1];
  uint64_t v14 = *v13;
  v3[1] = *v13;
  if (v14) {
    *(void *)(v14 + 16) = v3;
  }
  void v13[2] = v3[2];
  *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v13;
  *unint64_t v13 = (uint64_t)v3;
  v3[2] = (uint64_t)v13;
  return result;
}

void ctu::Loggable<desense::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (*(void *)(a1 + 56))
  {
    if (!*(void *)(a1 + 80) || (uint64_t v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_235DF6F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_235DF6F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<desense::ARICommandDriver>::shared_ptr[abi:ne180100]<desense::ARICommandDriver,std::shared_ptr<desense::ARICommandDriver> ctu::SharedSynchronizable<desense::CommandDriver>::make_shared_ptr<desense::ARICommandDriver>(desense::ARICommandDriver*)::{lambda(desense::ARICommandDriver*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_uint64_t shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93D3C8;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  int v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 72) = a2;
      *(void *)(a2 + 80) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 72) = a2;
  *(void *)(a2 + 80) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_235DF70A0(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<desense::ARICommandDriver> ctu::SharedSynchronizable<desense::CommandDriver>::make_shared_ptr<desense::ARICommandDriver>(desense::ARICommandDriver*)::{lambda(desense::ARICommandDriver*)#1}::operator() const(desense::ARICommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_235DF70C8(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<desense::ARICommandDriver *,std::shared_ptr<desense::ARICommandDriver> ctu::SharedSynchronizable<desense::CommandDriver>::make_shared_ptr<desense::ARICommandDriver>(desense::ARICommandDriver*)::{lambda(desense::ARICommandDriver *)#1},std::allocator<desense::ARICommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<desense::ARICommandDriver *,std::shared_ptr<desense::ARICommandDriver> ctu::SharedSynchronizable<desense::CommandDriver>::make_shared_ptr<desense::ARICommandDriver>(desense::ARICommandDriver*)::{lambda(desense::ARICommandDriver *)#1},std::allocator<desense::ARICommandDriver>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<desense::ARICommandDriver *,std::shared_ptr<desense::ARICommandDriver> ctu::SharedSynchronizable<desense::CommandDriver>::make_shared_ptr<desense::ARICommandDriver>(desense::ARICommandDriver*)::{lambda(desense::ARICommandDriver *)#1},std::allocator<desense::ARICommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN7desense13CommandDriverEE15make_shared_ptrINS1_16ARICommandDriverEEEN"
                     "St3__110shared_ptrIT_EEPS8_EUlPS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN7desense13CommandDriverEE15make_shared_ptrINS1_16ARIComman"
                                "dDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN7desense13CommandDriverEE15make_shared_ptrINS1_16ARICommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN7desense13CommandDriverEE15make_shared_ptrINS1_16ARICommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<desense::ARICommandDriver> ctu::SharedSynchronizable<desense::CommandDriver>::make_shared_ptr<desense::ARICommandDriver>(desense::ARICommandDriver*)::{lambda(desense::ARICommandDriver*)#1}::operator() const(desense::ARICommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock(uint64_t a1)
{
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 184));
  unint64_t v2 = *(void *)(a1 + 168);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 176);
    if (v3 - 1 >= 0)
    {
      unint64_t v4 = v2 + 16 * v3;
      do
      {
        size_t v5 = *(atomic_uint **)(v4 - 8);
        if (v5)
        {
          if (atomic_fetch_add(v5 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v5 + 16))(v5);
            if (atomic_fetch_add(v5 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v5 + 24))(v5);
            }
          }
        }
        v4 -= 16;
      }
      while (v4 > v2);
    }
    if (*(void *)(a1 + 160) >= 0xBuLL) {
      operator delete(*(void **)(a1 + 168));
    }
  }
  return a1;
}

uint64_t *boost::signals2::detail::signal_impl<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(uint64_t *a1)
{
  if (*(_DWORD *)(*a1 + 284) > *(_DWORD *)(*a1 + 280)) {
    boost::signals2::detail::signal_impl<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::force_cleanup_connections(a1[1], a1[2]);
  }
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::invocation_state>::~shared_ptr(uint64_t a1)
{
  unint64_t v2 = *(atomic_uint **)(a1 + 8);
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

uint64_t boost::shared_ptr<void>::~shared_ptr(uint64_t a1)
{
  unint64_t v2 = *(atomic_uint **)(a1 + 8);
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

uint64_t boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>>::erase(uint64_t *a1, int *a2, uint64_t **a3)
{
  uint64_t v7 = (uint64_t **)(a1 + 4);
  uint64_t v6 = a1[4];
  if (!v6)
  {
    uint64_t v23 = (uint64_t *)a1[10];
    if (v23 != *a3) {
      goto LABEL_80;
    }
    uint64_t v24 = (uint64_t *)v23[1];
    uint64_t v25 = (uint64_t **)(a1 + 4);
    uint64_t v10 = a1 + 4;
    if (v24 != a1) {
      goto LABEL_76;
    }
    goto LABEL_55;
  }
  int v8 = *a2;
  int v9 = a2[2];
  uint64_t v10 = a1 + 4;
  uint64_t v11 = a1[4];
  if (*a2 == 1)
  {
    do
    {
      while (1)
      {
        int v17 = *(_DWORD *)(v11 + 32);
        BOOL v18 = v17 < 1;
        if (v17 == 1) {
          BOOL v18 = *(_DWORD *)(v11 + 40) < v9;
        }
        if (!v18) {
          break;
        }
        uint64_t v11 = *(void *)(v11 + 8);
        if (!v11) {
          goto LABEL_19;
        }
      }
      uint64_t v10 = (uint64_t *)v11;
      uint64_t v11 = *(void *)v11;
    }
    while (v11);
  }
  else
  {
    do
    {
      int v12 = *(_DWORD *)(v11 + 32);
      BOOL v13 = v12 == v8;
      BOOL v14 = v12 < v8;
      if (v12 >= v8) {
        uint64_t v15 = (uint64_t *)v11;
      }
      else {
        uint64_t v15 = (uint64_t *)(v11 + 8);
      }
      if (v14) {
        int v16 = v10;
      }
      else {
        int v16 = (uint64_t *)v11;
      }
      if (v13)
      {
        uint64_t v15 = (uint64_t *)v11;
        uint64_t v10 = (uint64_t *)v11;
      }
      else
      {
        uint64_t v10 = v16;
      }
      uint64_t v11 = *v15;
    }
    while (*v15);
  }
LABEL_19:
  unsigned int v19 = (uint64_t *)v10[6];
  if (v19 != *a3) {
    goto LABEL_80;
  }
  long long v20 = (uint64_t **)(a1 + 4);
  if (v8 == 1)
  {
    uint64_t v21 = (uint64_t *)a1[4];
    while (1)
    {
      int v22 = *((_DWORD *)v21 + 8);
      if (v22 == 1)
      {
        if (v9 < *((_DWORD *)v21 + 10)) {
          goto LABEL_27;
        }
LABEL_22:
        uint64_t v21 = (uint64_t *)v21[1];
        if (!v21) {
          goto LABEL_42;
        }
      }
      else
      {
        if (v22 <= 1) {
          goto LABEL_22;
        }
LABEL_27:
        long long v20 = (uint64_t **)v21;
        uint64_t v21 = (uint64_t *)*v21;
        if (!v21) {
          goto LABEL_42;
        }
      }
    }
  }
  uint64_t v26 = (uint64_t **)a1[4];
  do
  {
    int v27 = *((_DWORD *)v26 + 8);
    uint64_t v28 = (uint64_t ***)(v26 + 1);
    BOOL v29 = v8 == v27;
    BOOL v30 = v8 < v27;
    if (v8 >= v27) {
      uint64_t v31 = (uint64_t ***)(v26 + 1);
    }
    else {
      uint64_t v31 = (uint64_t ***)v26;
    }
    if (!v30) {
      uint64_t v26 = v20;
    }
    if (v29) {
      uint64_t v31 = v28;
    }
    else {
      long long v20 = v26;
    }
    uint64_t v26 = *v31;
  }
  while (*v31);
LABEL_42:
  uint64_t v24 = (uint64_t *)v19[1];
  uint64_t v32 = a1;
  if (v20 != v7) {
    uint64_t v32 = v20[6];
  }
  if (v24 == v32)
  {
LABEL_55:
    uint64_t v37 = (uint64_t *)v10[1];
    if (v37)
    {
      do
      {
        unsigned int v38 = v37;
        uint64_t v37 = (uint64_t *)*v37;
      }
      while (v37);
    }
    else
    {
      std::runtime_error v41 = v10;
      do
      {
        unsigned int v38 = (uint64_t *)v41[2];
        BOOL v13 = *v38 == (void)v41;
        std::runtime_error v41 = v38;
      }
      while (!v13);
    }
    if ((uint64_t *)a1[3] == v10) {
      a1[3] = (uint64_t)v38;
    }
    --a1[5];
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v6, v10);
    operator delete(v10);
    goto LABEL_80;
  }
  int v33 = *a2;
  if (*a2 == 1)
  {
    int v34 = a2[2];
    while (1)
    {
      uint64_t v25 = (uint64_t **)v6;
      int v35 = *(_DWORD *)(v6 + 32);
      if (v35 == 1)
      {
        int v36 = *(_DWORD *)(v6 + 40);
        if (v36 <= v34)
        {
          if (v36 >= v34)
          {
            *(void *)(v6 + 48) = v24;
            goto LABEL_80;
          }
          goto LABEL_53;
        }
LABEL_47:
        uint64_t v6 = *(void *)v6;
        if (!*v25)
        {
          uint64_t v7 = v25;
          goto LABEL_76;
        }
      }
      else
      {
        if (v35 > 1) {
          goto LABEL_47;
        }
LABEL_53:
        uint64_t v6 = *(void *)(v6 + 8);
        if (!v6)
        {
          uint64_t v7 = v25 + 1;
          goto LABEL_76;
        }
      }
    }
  }
  int v39 = *(_DWORD *)(v6 + 32);
  if (v33 == v39) {
    goto LABEL_79;
  }
  while (v33 >= v39)
  {
    if (v39 >= v33) {
      goto LABEL_79;
    }
    uint64_t v40 = *(void *)(v6 + 8);
    if (!v40)
    {
      uint64_t v7 = (uint64_t **)(v6 + 8);
      goto LABEL_75;
    }
LABEL_61:
    int v39 = *(_DWORD *)(v40 + 32);
    uint64_t v6 = v40;
    if (v33 == v39)
    {
      *(void *)(v40 + 48) = v24;
      goto LABEL_80;
    }
  }
  uint64_t v40 = *(void *)v6;
  if (*(void *)v6) {
    goto LABEL_61;
  }
  uint64_t v7 = (uint64_t **)v6;
LABEL_75:
  uint64_t v25 = (uint64_t **)v6;
LABEL_76:
  uint64_t v6 = (uint64_t)operator new(0x38uLL);
  *(void *)(v6 + 32) = *(void *)a2;
  *(_DWORD *)(v6 + 40) = a2[2];
  *(void *)(v6 + 48) = 0;
  *(void *)uint64_t v6 = 0;
  *(void *)(v6 + 8) = 0;
  *(void *)(v6 + 16) = v25;
  void *v7 = (uint64_t *)v6;
  uint64_t v42 = *(void *)a1[3];
  uint64_t v43 = (uint64_t *)v6;
  if (v42)
  {
    a1[3] = v42;
    uint64_t v43 = *v7;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)a1[4], v43);
  ++a1[5];
LABEL_79:
  *(void *)(v6 + 48) = v24;
LABEL_80:
  uint64_t v44 = *a3;
  uint64_t v45 = **a3;
  uint64_t v46 = (*a3)[1];
  *(void *)(v45 + 8) = v46;
  *(void *)v44[1] = v45;
  --a1[2];
  uint64_t v47 = (atomic_uint *)v44[3];
  if (v47)
  {
    if (atomic_fetch_add(v47 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v47 + 16))(v47);
      if (atomic_fetch_add(v47 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v47 + 24))(v47);
      }
    }
  }
  operator delete(v44);
  return v46;
}

void boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::shared_ptr<void>>>::reserve_impl(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = (void *)a1;
  if (a2 >= 0xB)
  {
    if (a2 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v4 = operator new(16 * a2);
  }
  uint64_t v6 = *(void **)(a1 + 168);
  uint64_t v5 = *(void *)(a1 + 176);
  if (v5)
  {
    uint64_t v7 = &v6[2 * v5];
    int v8 = v4;
    do
    {
      uint64_t v9 = v6[1];
      *int v8 = *v6;
      v8[1] = v9;
      if (v9) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v9 + 8), 1u, memory_order_relaxed);
      }
      v6 += 2;
      v8 += 2;
    }
    while (v6 != v7);
    uint64_t v6 = *(void **)(a1 + 168);
  }
  if (v6)
  {
    uint64_t v10 = *(void *)(a1 + 176);
    if (v10 - 1 >= 0)
    {
      uint64_t v11 = &v6[2 * v10];
      do
      {
        int v12 = (atomic_uint *)*(v11 - 1);
        if (v12)
        {
          if (atomic_fetch_add(v12 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v12 + 16))(v12);
            if (atomic_fetch_add(v12 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v12 + 24))(v12);
            }
          }
        }
        v11 -= 2;
      }
      while (v11 > v6);
    }
    if (*(void *)(a1 + 160) >= 0xBuLL) {
      operator delete(*(void **)(a1 + 168));
    }
  }
  *(void *)(a1 + 160) = a2;
  *(void *)(a1 + 168) = v4;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2;
  if (*a2)
  {
    unint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      uint64_t v3 = a2;
      goto LABEL_10;
    }
    do
    {
      uint64_t v3 = v4;
      unint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (!v2)
  {
    int v5 = 1;
    uint64_t v6 = (uint64_t **)v3[2];
    uint64_t v7 = *v6;
    if (*v6 == v3) {
      goto LABEL_6;
    }
LABEL_11:
    v6[1] = (uint64_t *)v2;
    int v8 = *((unsigned __int8 *)v3 + 24);
    if (v3 == a2) {
      goto LABEL_16;
    }
    goto LABEL_12;
  }
LABEL_10:
  int v5 = 0;
  *(void *)(v2 + 16) = v3[2];
  uint64_t v6 = (uint64_t **)v3[2];
  uint64_t v7 = *v6;
  if (*v6 != v3) {
    goto LABEL_11;
  }
LABEL_6:
  void *v6 = (uint64_t *)v2;
  if (v3 != result)
  {
    uint64_t v7 = v6[1];
    int v8 = *((unsigned __int8 *)v3 + 24);
    if (v3 == a2) {
      goto LABEL_16;
    }
LABEL_12:
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    *uint64_t v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      size_t result = v3;
    }
    goto LABEL_16;
  }
  uint64_t v7 = 0;
  size_t result = (uint64_t *)v2;
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2) {
    goto LABEL_12;
  }
LABEL_16:
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    BOOL v14 = (uint64_t **)v7[2];
    if (*v14 != v7) {
      break;
    }
    if (*((unsigned char *)v7 + 24))
    {
      int v16 = (void *)*v7;
      if (*v7) {
        goto LABEL_48;
      }
    }
    else
    {
      *((unsigned char *)v7 + 24) = 1;
      *((unsigned char *)v14 + 24) = 0;
      long long v20 = (uint64_t *)v7[1];
      uint64_t *v14 = v20;
      if (v20) {
        v20[2] = (uint64_t)v14;
      }
      uint64_t v7[2] = (uint64_t)v14[2];
      v14[2][*v14[2] != (void)v14] = (uint64_t)v7;
      v7[1] = (uint64_t)v14;
      v14[2] = v7;
      if (result == (uint64_t *)v14) {
        size_t result = v7;
      }
      uint64_t v7 = *v14;
      int v16 = (void *)**v14;
      if (v16)
      {
LABEL_48:
        if (!*((unsigned char *)v16 + 24)) {
          goto LABEL_71;
        }
      }
    }
    uint64_t v21 = (uint64_t *)v7[1];
    if (v21 && !*((unsigned char *)v21 + 24))
    {
      if (v16 && !*((unsigned char *)v16 + 24))
      {
LABEL_71:
        uint64_t v21 = v7;
      }
      else
      {
        *((unsigned char *)v21 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v22 = *v21;
        v7[1] = *v21;
        if (v22) {
          *(void *)(v22 + 16) = v7;
        }
        v21[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v21;
        *uint64_t v21 = (uint64_t)v7;
        uint64_t v7[2] = (uint64_t)v21;
        int v16 = v7;
      }
      int v27 = (uint64_t *)v21[2];
      *((unsigned char *)v21 + 24) = *((unsigned char *)v27 + 24);
      *((unsigned char *)v27 + 24) = 1;
      *((unsigned char *)v16 + 24) = 1;
      uint64_t v28 = *v27;
      uint64_t v29 = *(void *)(*v27 + 8);
      *int v27 = v29;
      if (v29) {
        *(void *)(v29 + 16) = v27;
      }
      *(void *)(v28 + 16) = v27[2];
      *(void *)(v27[2] + 8 * (*(void *)v27[2] != (void)v27)) = v28;
      *(void *)(v28 + 8) = v27;
      _OWORD v27[2] = v28;
      return result;
    }
    *((unsigned char *)v7 + 24) = 0;
    int v12 = (uint64_t *)v7[2];
    if (*((unsigned char *)v12 + 24)) {
      BOOL v13 = v12 == result;
    }
    else {
      BOOL v13 = 1;
    }
    if (v13) {
      goto LABEL_61;
    }
LABEL_24:
    uint64_t v7 = *(uint64_t **)(v12[2] + 8 * (*(void *)v12[2] == (void)v12));
  }
  if (*((unsigned char *)v7 + 24))
  {
    uint64_t v15 = (void *)*v7;
    if (!*v7)
    {
LABEL_38:
      unsigned int v19 = (uint64_t *)v7[1];
      if (v19 && !*((unsigned char *)v19 + 24)) {
        goto LABEL_67;
      }
      *((unsigned char *)v7 + 24) = 0;
      int v12 = (uint64_t *)v7[2];
      if (v12 == result)
      {
        int v12 = result;
LABEL_61:
        *((unsigned char *)v12 + 24) = 1;
        return result;
      }
      if (!*((unsigned char *)v12 + 24)) {
        goto LABEL_61;
      }
      goto LABEL_24;
    }
  }
  else
  {
    *((unsigned char *)v7 + 24) = 1;
    *((unsigned char *)v14 + 24) = 0;
    int v17 = v14[1];
    BOOL v18 = (uint64_t *)*v17;
    v14[1] = (uint64_t *)*v17;
    if (v18) {
      v18[2] = (uint64_t)v14;
    }
    v17[2] = (uint64_t)v14[2];
    v14[2][*v14[2] != (void)v14] = (uint64_t)v17;
    *int v17 = (uint64_t)v14;
    v14[2] = v17;
    if (result == (uint64_t *)*v7) {
      size_t result = v7;
    }
    uint64_t v7 = *(uint64_t **)(*v7 + 8);
    uint64_t v15 = (void *)*v7;
    if (!*v7) {
      goto LABEL_38;
    }
  }
  if (*((unsigned char *)v15 + 24)) {
    goto LABEL_38;
  }
  unsigned int v19 = (uint64_t *)v7[1];
  if (v19 && !*((unsigned char *)v19 + 24))
  {
LABEL_67:
    uint64_t v15 = v7;
  }
  else
  {
    *((unsigned char *)v15 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v23 = v15[1];
    uint64_t *v7 = v23;
    if (v23) {
      *(void *)(v23 + 16) = v7;
    }
    void v15[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
    v15[1] = v7;
    uint64_t v7[2] = (uint64_t)v15;
    unsigned int v19 = v7;
  }
  uint64_t v24 = v15[2];
  *((unsigned char *)v15 + 24) = *(unsigned char *)(v24 + 24);
  *(unsigned char *)(v24 + 24) = 1;
  *((unsigned char *)v19 + 24) = 1;
  uint64_t v25 = *(uint64_t **)(v24 + 8);
  uint64_t v26 = *v25;
  *(void *)(v24 + 8) = *v25;
  if (v26) {
    *(void *)(v26 + 16) = v24;
  }
  _OWORD v25[2] = *(void *)(v24 + 16);
  *(void *)(*(void *)(v24 + 16) + 8 * (**(void **)(v24 + 16) != v24)) = v25;
  *uint64_t v25 = v24;
  *(void *)(v24 + 16) = v25;
  return result;
}

void boost::signals2::detail::connection_body_base::disconnect(boost::signals2::detail::connection_body_base *this)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v6[8] = v2;
  v6[9] = v2;
  v6[6] = v2;
  v6[7] = v2;
  v6[4] = v2;
  void v6[5] = v2;
  v6[2] = v2;
  v6[3] = v2;
  v6[0] = v2;
  v6[1] = v2;
  unint64_t v7 = 10;
  long long __p = v6;
  uint64_t v9 = 0;
  uint64_t v10 = this;
  (*(void (**)(boost::signals2::detail::connection_body_base *))(*(void *)this + 24))(this);
  if (*((unsigned char *)this + 24))
  {
    *((unsigned char *)this + 24) = 0;
    boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(this, v6);
  }
  (*(void (**)(boost::signals2::detail::connection_body_base *))(*(void *)v10 + 32))(v10);
  uint64_t v3 = (char *)__p;
  if (__p)
  {
    if (v9 - 1 >= 0)
    {
      unint64_t v4 = (char *)__p + 16 * v9;
      do
      {
        int v5 = (atomic_uint *)*((void *)v4 - 1);
        if (v5)
        {
          if (atomic_fetch_add(v5 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v5 + 16))(v5);
            if (atomic_fetch_add(v5 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v5 + 24))(v5);
            }
          }
        }
        v4 -= 16;
      }
      while (v4 > v3);
    }
    if (v7 >= 0xB) {
      operator delete(__p);
    }
  }
}

void sub_235DF7EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_235DF7EFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void boost::throw_exception<boost::bad_function_call>(const std::runtime_error *a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<boost::bad_function_call>::wrapexcept((uint64_t)exception, a1);
}

void sub_235DF802C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::wrapexcept<boost::bad_function_call>::wrapexcept(uint64_t a1, const std::runtime_error *a2)
{
  *(void *)a1 = &unk_26E93D540;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), a2);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(void *)a1 = &unk_26E93D4C8;
  *(void *)(a1 + 8) = &unk_26E93D4F8;
  *(void *)(a1 + 24) = &unk_26E93D520;
  return a1;
}

uint64_t boost::wrapexcept<boost::bad_function_call>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_26E93D598;
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2)) {
    *(void *)(a1 + 32) = 0;
  }
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  return a1;
}

char *boost::wrapexcept<boost::bad_function_call>::clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v2 = &unk_26E93D540;
  std::runtime_error::runtime_error((std::runtime_error *)(v2 + 8), (const std::runtime_error *)(a1 + 8));
  *((void *)v2 + 1) = &unk_26E93D570;
  uint64_t v3 = *(void *)(a1 + 32);
  *((void *)v2 + 3) = &unk_26E93D598;
  *((void *)v2 + 4) = v3;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *((_DWORD *)v2 + 14) = *(_DWORD *)(a1 + 56);
  *(void *)uint64_t v2 = &unk_26E93D4C8;
  *((void *)v2 + 1) = &unk_26E93D4F8;
  *((void *)v2 + 3) = &unk_26E93D520;
  boost::exception_detail::copy_boost_exception((uint64_t)(v2 + 24), a1 + 24);
  return v2;
}

void sub_235DF82B0(_Unwind_Exception *a1)
{
  std::runtime_error::~runtime_error(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_235DF82CC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::bad_function_call>::rethrow(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<boost::bad_function_call>::wrapexcept((uint64_t)exception, a1);
}

void sub_235DF8348(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::bad_function_call>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_26E93D598;
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2)) {
    *(void *)(a1 + 32) = 0;
  }
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));

  operator delete((void *)a1);
}

void non-virtual thunk to'boost::wrapexcept<boost::bad_function_call>::~wrapexcept(std::runtime_error *this)
{
  this[1].__vftable = (std::runtime_error_vtbl *)&unk_26E93D598;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    this[1].__imp_.__imp_ = 0;
  }

  std::runtime_error::~runtime_error(this);
}

{
  const char *imp;
  uint64_t vars8;

  this[1].__vftable = (std::runtime_error_vtbl *)&unk_26E93D598;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    this[1].__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(this);

  operator delete(&this[-1].__imp_);
}

void non-virtual thunk to'boost::wrapexcept<boost::bad_function_call>::~wrapexcept(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&unk_26E93D598;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    a1->__imp_.__imp_ = 0;
  }

  std::runtime_error::~runtime_error(a1 - 1);
}

{
  const char *imp;
  uint64_t vars8;

  a1->__vftable = (std::runtime_error_vtbl *)&unk_26E93D598;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    a1->__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(a1 - 1);

  operator delete(&a1[-2].__imp_);
}

void boost::bad_function_call::~bad_function_call(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);

  operator delete(v1);
}

uint64_t *boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2)) {
    *a1 = 0;
  }
  return a1;
}

uint64_t boost::wrapexcept<boost::bad_function_call>::wrapexcept(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26E93D540;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  *(void *)(a1 + 8) = &unk_26E93D570;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = &unk_26E93D598;
  *(void *)(a1 + 32) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(void *)a1 = &unk_26E93D4C8;
  *(void *)(a1 + 8) = &unk_26E93D4F8;
  *(void *)(a1 + 24) = &unk_26E93D520;
  return a1;
}

void sub_235DF87E4(_Unwind_Exception *a1)
{
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::copy_boost_exception(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  if (!v4)
  {
    uint64_t v5 = 0;
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    uint64_t result = *(void *)(a1 + 8);
    if (!result) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v4 + 40))(&v7);
  uint64_t v5 = v7;
  uint64_t v8 = v7;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 24))(v7);
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 32))(v7);
    }
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
LABEL_8:
  }
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 32))(result);
LABEL_9:
  *(void *)(a1 + 8) = v5;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
    return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 32))(v5);
  }
  return result;
}

void sub_235DF8978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void sub_235DF8998(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_235DF89AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 184) + 32))(*(void *)(a1 + 184));
  unint64_t v2 = *(void *)(a1 + 168);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 176);
    if (v3 - 1 >= 0)
    {
      unint64_t v4 = v2 + 16 * v3;
      do
      {
        uint64_t v5 = *(atomic_uint **)(v4 - 8);
        if (v5)
        {
          if (atomic_fetch_add(v5 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v5 + 16))(v5);
            if (atomic_fetch_add(v5 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v5 + 24))(v5);
            }
          }
        }
        v4 -= 16;
      }
      while (v4 > v2);
    }
    if (*(void *)(a1 + 160) >= 0xBuLL) {
      operator delete(*(void **)(a1 + 168));
    }
  }
  return a1;
}

void boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(_DWORD *a1, void *a2)
{
  int v2 = a1[7] - 1;
  a1[7] = v2;
  if (!v2)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)a1 + 40))(&v8);
    uint64_t v4 = a2[22];
    if (v4 == a2[20] && v4 != -1)
    {
      if (4 * v4 <= (unint64_t)(v4 + 1)) {
        unint64_t v5 = v4 + 1;
      }
      else {
        unint64_t v5 = 4 * v4;
      }
      boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::shared_ptr<void>>>::reserve_impl((uint64_t)a2, v5);
      uint64_t v4 = a2[22];
    }
    uint64_t v6 = *((void *)&v8 + 1);
    *(_OWORD *)(a2[21] + 16 * v4) = v8;
    if (v6)
    {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 8), 1u, memory_order_relaxed);
      uint64_t v4 = a2[22];
    }
    a2[22] = v4 + 1;
    uint64_t v7 = (atomic_uint *)*((void *)&v8 + 1);
    if (*((void *)&v8 + 1) && atomic_fetch_add((atomic_uint *volatile)(*((void *)&v8 + 1) + 8), 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v7 + 16))(v7);
      if (atomic_fetch_add(v7 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v7 + 24))(v7);
      }
    }
  }
}

void sub_235DF8C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,coex::SubId>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>::lock_next_callable(void *a1)
{
  v44[3] = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  if (*a1 == a1[3]) {
    return;
  }
  if (v1 == a1[1]) {
    goto LABEL_51;
  }
  while (1)
  {
    boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::pop_back_n((void *)(a1[2] + 8), *(void *)(a1[2] + 264));
    *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v42 = v3;
    long long v43 = v3;
    long long v40 = v3;
    long long v41 = v3;
    long long v38 = v3;
    long long v39 = v3;
    long long v36 = v3;
    long long v37 = v3;
    long long v34 = v3;
    long long v35 = v3;
    long long v32 = v3;
    long long v33 = v3;
    uint64_t v4 = *(void *)(*a1 + 16);
    *(void *)&long long v42 = 10;
    *((void *)&v42 + 1) = &v32;
    *(void *)&long long v43 = 0;
    *((void *)&v43 + 1) = v4;
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
    uint64_t v5 = *a1;
    uint64_t v6 = *(void *)(*a1 + 16);
    uint64_t v7 = a1[2];
    long long v8 = *(uint64_t **)(v6 + 32);
    if (v8)
    {
      uint64_t v9 = *v8;
      if (*v8 != v8[1])
      {
        uint64_t v10 = (void *)(v7 + 8);
        while (1)
        {
          memset(v44, 170, 24);
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::apply_visitor<boost::signals2::detail::lock_weak_ptr_visitor const>(v9, (uint64_t)v44);
          if ((*(_DWORD *)v9 ^ (*(int *)v9 >> 31)) == 2)
          {
            if (!(*(unsigned int (**)(void))(**(void **)(v9 + 8) + 24))(*(void *)(v9 + 8))) {
              goto LABEL_9;
            }
          }
          else
          {
            uint64_t v11 = *(void *)(v9 + 16);
            if (v11 && atomic_load_explicit((atomic_uint *volatile)(v11 + 8), memory_order_acquire))
            {
LABEL_9:
              boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::push_back(v10, (uint64_t)v44);
              char v12 = 0;
              if (LODWORD(v44[0]) == SLODWORD(v44[0]) >> 31) {
                goto LABEL_16;
              }
              goto LABEL_10;
            }
          }
          if (*(unsigned char *)(v6 + 24))
          {
            *(unsigned char *)(v6 + 24) = 0;
            boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>((_DWORD *)v6, &v32);
          }
          char v12 = 1;
          if (LODWORD(v44[0]) == SLODWORD(v44[0]) >> 31)
          {
LABEL_16:
            BOOL v13 = (atomic_uint *)v44[2];
            if (v44[2])
            {
              if (atomic_fetch_add((atomic_uint *volatile)(v44[2] + 8), 0xFFFFFFFF) == 1)
              {
                (*(void (**)(atomic_uint *))(*(void *)v13 + 16))(v13);
                if (atomic_fetch_add(v13 + 3, 0xFFFFFFFF) == 1) {
                  (*(void (**)(atomic_uint *))(*(void *)v13 + 24))(v13);
                }
              }
            }
            goto LABEL_20;
          }
LABEL_10:
          if (v44[1]) {
            (*(void (**)(void))(*(void *)v44[1] + 8))(v44[1]);
          }
LABEL_20:
          if ((v12 & 1) == 0)
          {
            v9 += 24;
            if (v9 != *(void *)(*(void *)(v6 + 32) + 8)) {
              continue;
            }
          }
          uint64_t v5 = *a1;
          uint64_t v6 = *(void *)(*a1 + 16);
          uint64_t v7 = a1[2];
          break;
        }
      }
    }
    if (*(unsigned char *)(v6 + 24))
    {
      ++*(_DWORD *)(v7 + 280);
      uint64_t v14 = *(void *)(v6 + 16);
      if (v14)
      {
        if (atomic_load_explicit((atomic_uint *volatile)(v14 + 8), memory_order_acquire))
        {
          int v15 = 1;
          goto LABEL_37;
        }
        uint64_t v7 = a1[2];
        uint64_t v5 = *a1;
      }
      a1[3] = v5;
      if (a1[1] == v5)
      {
        BOOL v18 = *(_DWORD **)(v7 + 288);
        if (v18) {
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v18, &v32);
        }
        int v15 = 0;
        *(void *)(v7 + 288) = 0;
      }
      else
      {
        uint64_t v16 = *(void *)(v5 + 16);
        int v17 = *(_DWORD **)(v7 + 288);
        if (v17) {
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v17, &v32);
        }
        *(void *)(v7 + 288) = v16;
        int v15 = 0;
        if (v16) {
          ++*(_DWORD *)(v16 + 28);
        }
      }
    }
    else
    {
      ++*(_DWORD *)(v7 + 284);
      int v15 = 1;
    }
LABEL_37:
    (*(void (**)(void))(**((void **)&v43 + 1) + 32))(*((void *)&v43 + 1));
    unint64_t v19 = *((void *)&v42 + 1);
    if (*((void *)&v42 + 1))
    {
      if ((uint64_t)v43 - 1 >= 0)
      {
        unint64_t v20 = *((void *)&v42 + 1) + 16 * v43;
        do
        {
          uint64_t v21 = *(atomic_uint **)(v20 - 8);
          if (v21)
          {
            if (atomic_fetch_add(v21 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v21 + 16))(v21);
              if (atomic_fetch_add(v21 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v21 + 24))(v21);
              }
            }
          }
          v20 -= 16;
        }
        while (v20 > v19);
      }
      if ((unint64_t)v42 >= 0xB) {
        operator delete(*((void **)&v42 + 1));
      }
    }
    uint64_t v1 = *a1;
    uint64_t v22 = a1[1];
    if (!v15) {
      break;
    }
    uint64_t v23 = *(void *)(v1 + 8);
    *a1 = v23;
    if (v23 == v22)
    {
      uint64_t v1 = v22;
LABEL_51:
      uint64_t v24 = a1[3];
      if (v24 != v1)
      {
        *(void *)&long long v25 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v25 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v40 = v25;
        long long v41 = v25;
        long long v38 = v25;
        long long v39 = v25;
        long long v36 = v25;
        long long v37 = v25;
        long long v34 = v25;
        long long v35 = v25;
        long long v32 = v25;
        long long v33 = v25;
        uint64_t v26 = *(void *)(v24 + 16);
        *(void *)&long long v42 = 10;
        *((void *)&v42 + 1) = &v32;
        *(void *)&long long v43 = 0;
        *((void *)&v43 + 1) = v26;
        (*(void (**)(uint64_t))(*(void *)v26 + 24))(v26);
        uint64_t v27 = a1[2];
        a1[3] = a1[1];
        uint64_t v28 = *(_DWORD **)(v27 + 288);
        if (v28) {
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v28, &v32);
        }
        *(void *)(v27 + 288) = 0;
        (*(void (**)(void))(**((void **)&v43 + 1) + 32))(*((void *)&v43 + 1));
        unint64_t v29 = *((void *)&v42 + 1);
        if (*((void *)&v42 + 1))
        {
          if ((uint64_t)v43 - 1 >= 0)
          {
            unint64_t v30 = *((void *)&v42 + 1) + 16 * v43;
            do
            {
              uint64_t v31 = *(atomic_uint **)(v30 - 8);
              if (v31)
              {
                if (atomic_fetch_add(v31 + 2, 0xFFFFFFFF) == 1)
                {
                  (*(void (**)(atomic_uint *))(*(void *)v31 + 16))(v31);
                  if (atomic_fetch_add(v31 + 3, 0xFFFFFFFF) == 1) {
                    (*(void (**)(atomic_uint *))(*(void *)v31 + 24))(v31);
                  }
                }
              }
              v30 -= 16;
            }
            while (v30 > v29);
          }
          if ((unint64_t)v42 >= 0xB) {
            operator delete(*((void **)&v42 + 1));
          }
        }
      }
      return;
    }
  }
  if (v1 == v22) {
    goto LABEL_51;
  }
}

void sub_235DF91E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_235DF91FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_235DF93DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)va);
  _Unwind_Resume(a1);
}

void *boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::pop_back_n(void *result, uint64_t a2)
{
  if (a2)
  {
    long long v3 = result;
    uint64_t v4 = result[32];
    if (a2 - 1 >= 0)
    {
      uint64_t v5 = result[31] + 24 * v4;
      unint64_t v6 = v5 + 24 * ~a2;
      unint64_t v7 = v5 - 24;
      do
      {
        if (*(_DWORD *)v7 == *(int *)v7 >> 31)
        {
          long long v8 = *(atomic_uint **)(v7 + 16);
          if (v8 && atomic_fetch_add(v8 + 2, 0xFFFFFFFF) == 1)
          {
            uint64_t result = (void *)(*(uint64_t (**)(atomic_uint *))(*(void *)v8 + 16))(v8);
            if (atomic_fetch_add(v8 + 3, 0xFFFFFFFF) == 1) {
              uint64_t result = (void *)(*(uint64_t (**)(atomic_uint *))(*(void *)v8 + 24))(v8);
            }
          }
        }
        else
        {
          uint64_t result = *(void **)(v7 + 8);
          if (result) {
            uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
          }
        }
        v7 -= 24;
      }
      while (v7 > v6);
      uint64_t v4 = v3[32];
    }
    v3[32] = v4 - a2;
  }
  return result;
}

uint64_t boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>::~variant(uint64_t a1)
{
  if (*(_DWORD *)a1 == *(int *)a1 >> 31)
  {
    int v2 = *(atomic_uint **)(a1 + 16);
    if (v2 && atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  return a1;
}

uint64_t boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::apply_visitor<boost::signals2::detail::lock_weak_ptr_visitor const>@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *(_DWORD *)result ^ (*(int *)result >> 31);
  if (v3 == 2)
  {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(result + 8) + 16))(&v8);
    *(void *)(a2 + 8) = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 16))(v8);
    *(_DWORD *)a2 = 1;
    uint64_t result = v8;
    if (v8) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
  }
  else if (v3 == 1)
  {
    uint64_t v4 = *(void *)(result + 16);
    if (v4)
    {
      uint64_t v5 = *(unsigned int *)(v4 + 8);
      while (v5)
      {
        uint64_t v6 = v5;
        atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v4 + 8), (unsigned int *)&v6, v5 + 1, memory_order_relaxed, memory_order_relaxed);
        BOOL v7 = v6 == v5;
        uint64_t v5 = v6;
        if (v7)
        {
          *(void *)(a2 + 8) = *(void *)(result + 8);
          *(void *)(a2 + 16) = v4;
          *(_DWORD *)a2 = 0;
          return result;
        }
      }
      uint64_t v4 = 0;
    }
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = v4;
    *(_DWORD *)a2 = 0;
  }
  else
  {
    *(_DWORD *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  return result;
}

void sub_235DF9764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::push_back(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[32];
  if (v4 == a1[30])
  {
    boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::reserve(a1, v4 + 1);
    uint64_t v5 = a1[31];
    uint64_t v6 = a1[32];
    BOOL v7 = (uint64_t *)(v5 + 24 * v6 + 8);
    uint64_t result = *(void *)(a2 + 8);
    if (*(_DWORD *)a2 == *(int *)a2 >> 31)
    {
      uint64_t *v7 = result;
      uint64_t v9 = *(void *)(a2 + 16);
      *(void *)(v5 + 24 * v6 + 16) = v9;
      if (v9) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v9 + 8), 1u, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
      uint64_t *v7 = result;
    }
    BOOL v13 = (int *)(v5 + 24 * v6);
  }
  else
  {
    uint64_t v10 = a1[31];
    uint64_t v11 = (uint64_t *)(v10 + 24 * v4 + 8);
    uint64_t result = *(void *)(a2 + 8);
    if (*(_DWORD *)a2 == *(int *)a2 >> 31)
    {
      *uint64_t v11 = result;
      uint64_t v12 = *(void *)(a2 + 16);
      *(void *)(v10 + 24 * v4 + 16) = v12;
      if (v12) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v12 + 8), 1u, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
      *uint64_t v11 = result;
    }
    BOOL v13 = (int *)(v10 + 24 * v4);
  }
  *BOOL v13 = *(_DWORD *)a2 ^ (*(int *)a2 >> 31);
  ++a1[32];
  return result;
}

void boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::reserve(void *a1, unint64_t a2)
{
  unint64_t v2 = a1[30];
  if (v2 < a2)
  {
    unint64_t v4 = 4 * v2;
    if (v4 <= a2) {
      unint64_t v5 = a2;
    }
    else {
      unint64_t v5 = v4;
    }
    uint64_t v6 = a1;
    if (v5 >= 0xB)
    {
      if (v5 >= 0xAAAAAAAAAAAAAABLL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v6 = operator new(24 * v5);
    }
    std::uninitialized_copy[abi:ne180100]<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr> *,boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr> *>(a1[31], a1[31] + 24 * a1[32], (uint64_t)v6);
    if (a1[31]) {
      boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::auto_buffer_destroy(a1);
    }
    a1[30] = v5;
    a1[31] = v6;
  }
}

uint64_t std::uninitialized_copy[abi:ne180100]<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr> *,boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = a3 + v6;
      uint64_t v8 = a1 + v6;
      uint64_t v9 = *(void *)(a1 + v6 + 8);
      if (*(_DWORD *)(a1 + v6) == *(int *)(a1 + v6) >> 31)
      {
        uint64_t v10 = *(void *)(v8 + 16);
        *(void *)(v7 + 8) = v9;
        *(void *)(v7 + 16) = v10;
        if (v10) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v10 + 8), 1u, memory_order_relaxed);
        }
      }
      else
      {
        *(void *)(v7 + 8) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
      }
      *(_DWORD *)uint64_t v7 = *(_DWORD *)v8 ^ (*(int *)v8 >> 31);
      v6 += 24;
    }
    while (v8 + 24 != a2);
    a3 += v6;
  }
  return a3;
}

void sub_235DF9A88(void *a1)
{
  __cxa_begin_catch(a1);
  if (v2)
  {
    int v3 = (void *)(v1 + 8);
    do
    {
      if (*((_DWORD *)v3 - 2) == *((int *)v3 - 2) >> 31)
      {
        unint64_t v4 = (atomic_uint *)v3[1];
        if (v4 && atomic_fetch_add(v4 + 2, 0xFFFFFFFF) == 1)
        {
          (*(void (**)(atomic_uint *))(*(void *)v4 + 16))(v4);
          if (atomic_fetch_add(v4 + 3, 0xFFFFFFFF) == 1) {
            (*(void (**)(atomic_uint *))(*(void *)v4 + 24))(v4);
          }
        }
      }
      else if (*v3)
      {
        (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
      }
      v3 += 3;
      v2 -= 24;
    }
    while (v2);
  }
  __cxa_rethrow();
}

void sub_235DF9B6C(_Unwind_Exception *a1)
{
}

void boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::auto_buffer_destroy(void *a1)
{
  uint64_t v2 = a1[32];
  if (v2 && v2 - 1 >= 0)
  {
    unint64_t v3 = a1[31];
    unint64_t v4 = v3 + 24 * v2;
    unint64_t v5 = v4;
    do
    {
      int v6 = *(_DWORD *)(v5 - 24);
      v5 -= 24;
      if (v6 == v6 >> 31)
      {
        uint64_t v7 = *(atomic_uint **)(v4 - 8);
        if (v7)
        {
          if (atomic_fetch_add(v7 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v7 + 16))(v7);
            if (atomic_fetch_add(v7 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v7 + 24))(v7);
            }
          }
        }
      }
      else
      {
        uint64_t v8 = *(void *)(v4 - 16);
        if (v8) {
          (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
        }
      }
      unint64_t v4 = v5;
    }
    while (v5 > v3);
  }
  if (a1[30] >= 0xBuLL)
  {
    uint64_t v9 = (void *)a1[31];
    operator delete(v9);
  }
}

void boost::signals2::detail::signal_impl<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::force_cleanup_connections(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (uint64_t **)a1;
  uint64_t v73 = *MEMORY[0x263EF8340];
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v68[8] = v4;
  v68[9] = v4;
  v68[6] = v4;
  v68[7] = v4;
  v68[4] = v4;
  v68[5] = v4;
  v68[2] = v4;
  v68[3] = v4;
  v68[0] = v4;
  v68[1] = v4;
  unint64_t v5 = *(pthread_mutex_t **)(a1 + 24);
  unint64_t v69 = 10;
  long long __p = v68;
  uint64_t v71 = 0;
  unsigned int v72 = v5;
  pthread_mutex_lock(v5);
  if (**v3 != a2) {
    goto LABEL_94;
  }
  int v6 = v3[1];
  if (!v6 || atomic_load_explicit((atomic_uint *volatile)v6 + 2, memory_order_acquire) != 1)
  {
    uint64_t v7 = (uint64_t *)operator new(0x20uLL);
    uint64_t v8 = *v3;
    uint64_t v9 = **v3;
    long long v66 = v7;
    uint64_t v10 = operator new(0x40uLL);
    uint64_t v11 = v10;
    *uint64_t v10 = v10;
    v10[1] = v10;
    v10[2] = 0;
    uint64_t v12 = *(void **)(v9 + 8);
    if (v12 != (void *)v9)
    {
      uint64_t v13 = 0;
      uint64_t v14 = v10;
      do
      {
        int v15 = operator new(0x20uLL);
        void v15[2] = v12[2];
        uint64_t v16 = v12[3];
        v15[3] = v16;
        if (v16)
        {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v16 + 8), 1u, memory_order_relaxed);
          uint64_t v14 = (void *)*v11;
          uint64_t v13 = v11[2];
        }
        *int v15 = v14;
        v15[1] = v11;
        v14[1] = v15;
        *uint64_t v11 = v15;
        v11[2] = ++v13;
        uint64_t v12 = (void *)v12[1];
        uint64_t v14 = v15;
      }
      while (v12 != (void *)v9);
    }
    long long v64 = v3;
    long long v65 = v8;
    v11[3] = 0;
    int v17 = (void **)(v11 + 3);
    _OWORD v11[4] = 0;
    BOOL v18 = v11 + 4;
    void v11[5] = 0;
    *((unsigned char *)v11 + 48) = *(unsigned char *)(v9 + 48);
    v11[3] = v11 + 4;
    unint64_t v19 = *(void **)(v9 + 24);
    unint64_t v20 = (void *)(v9 + 32);
    if (v19 == (void *)(v9 + 32))
    {
LABEL_10:
      *((unsigned char *)v11 + 56) = *(unsigned char *)(v9 + 56);
      uint64_t v21 = *(void **)(v9 + 24);
      if (v21 != v20)
      {
        uint64_t v22 = (void *)v11[3];
        uint64_t v23 = v11[1];
        do
        {
          v22[6] = v23;
          uint64_t v24 = v9;
          if (v21 != v20) {
            uint64_t v24 = v21[6];
          }
          long long v25 = (void *)v21[1];
          uint64_t v26 = v25;
          uint64_t v27 = v21;
          if (v25)
          {
            do
            {
              uint64_t v28 = v26;
              uint64_t v26 = (void *)*v26;
            }
            while (v26);
          }
          else
          {
            do
            {
              uint64_t v28 = (void *)v27[2];
              BOOL v29 = *v28 == (void)v27;
              uint64_t v27 = v28;
            }
            while (!v29);
          }
          uint64_t v30 = v9;
          if (v28 != v20) {
            uint64_t v30 = v28[6];
          }
          while (v24 != v30)
          {
            uint64_t v24 = *(void *)(v24 + 8);
            uint64_t v23 = *(void *)(v23 + 8);
          }
          if (v25)
          {
            do
            {
              uint64_t v31 = v25;
              long long v25 = (void *)*v25;
            }
            while (v25);
          }
          else
          {
            do
            {
              uint64_t v31 = (void *)v21[2];
              BOOL v29 = *v31 == (void)v21;
              uint64_t v21 = v31;
            }
            while (!v29);
          }
          long long v32 = (void *)v22[1];
          if (v32)
          {
            do
            {
              long long v33 = v32;
              long long v32 = (void *)*v32;
            }
            while (v32);
          }
          else
          {
            do
            {
              long long v33 = (void *)v22[2];
              BOOL v29 = *v33 == (void)v22;
              uint64_t v22 = v33;
            }
            while (!v29);
          }
          uint64_t v21 = v31;
          uint64_t v22 = v33;
        }
        while (v31 != v20);
      }
      *long long v66 = (uint64_t)v11;
      v66[1] = 0;
      long long v53 = operator new(0x18uLL);
      v53[1] = 0x100000001;
      *long long v53 = &unk_26E93D628;
      v53[2] = v11;
      v66[1] = (uint64_t)v53;
      v66[2] = v65[2];
      uint64_t v54 = v65[3];
      v66[3] = v54;
      unint64_t v3 = v64;
      if (v54) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v54 + 8), 1u, memory_order_relaxed);
      }
      unsigned int v55 = (uint64_t *)operator new(0x18uLL);
      v55[1] = 0x100000001;
      *unsigned int v55 = (uint64_t)&unk_26E93D5B8;
      v55[2] = (uint64_t)v66;
      uint64_t v56 = (atomic_uint *)v64[1];
      *long long v64 = v66;
      v64[1] = v55;
      if (v56)
      {
        if (atomic_fetch_add(v56 + 2, 0xFFFFFFFF) == 1)
        {
          (*(void (**)(atomic_uint *))(*(void *)v56 + 16))(v56);
          if (atomic_fetch_add(v56 + 3, 0xFFFFFFFF) == 1) {
            (*(void (**)(atomic_uint *))(*(void *)v56 + 24))(v56);
          }
        }
      }
      goto LABEL_88;
    }
    while (1)
    {
      int v34 = *((_DWORD *)v19 + 8);
      long long v35 = (void *)*v18;
      long long v36 = v11 + 4;
      if (*v17 != v18)
      {
        long long v37 = (void *)*v18;
        long long v38 = v11 + 4;
        if (v35)
        {
          do
          {
            long long v36 = v37;
            long long v37 = (void *)v37[1];
          }
          while (v37);
        }
        else
        {
          do
          {
            long long v36 = (void *)v38[2];
            BOOL v29 = *v36 == (void)v38;
            long long v38 = v36;
          }
          while (v29);
        }
        int v39 = *((_DWORD *)v19 + 10);
        int v40 = *((_DWORD *)v36 + 8);
        if (v40 == v34)
        {
          if (v34 != 1) {
            goto LABEL_55;
          }
          if (*((_DWORD *)v36 + 10) >= v39)
          {
            long long v41 = (void *)*v18;
            long long v42 = v11 + 4;
            long long v43 = v11 + 4;
            if (v35) {
              goto LABEL_59;
            }
LABEL_66:
            uint64_t v47 = operator new(0x38uLL);
            long long v48 = *((_OWORD *)v19 + 2);
            v47[6] = v19[6];
            *((_OWORD *)v47 + 2) = v48;
            void *v47 = 0;
            v47[1] = 0;
            v47[2] = v43;
            void *v42 = v47;
            unsigned int v49 = (void *)**v17;
            if (v49)
            {
              *int v17 = v49;
              uint64_t v47 = (void *)*v42;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v11[4], v47);
            ++v11[5];
            goto LABEL_69;
          }
        }
        else if (v40 >= v34)
        {
LABEL_55:
          long long v42 = v11 + 4;
          long long v43 = v11 + 4;
          if (!v35) {
            goto LABEL_66;
          }
          long long v41 = (void *)*v18;
          if (v34 != 1)
          {
            int v44 = *((_DWORD *)v35 + 8);
            long long v43 = (void *)*v18;
            while (v34 != v44)
            {
              if (v34 < v44)
              {
                uint64_t v52 = *v43;
                long long v42 = v43;
                if (!*v43) {
                  goto LABEL_66;
                }
              }
              else
              {
                if (v44 >= v34) {
                  goto LABEL_69;
                }
                uint64_t v52 = v43[1];
                if (!v52) {
                  goto LABEL_65;
                }
              }
              int v44 = *(_DWORD *)(v52 + 32);
              long long v43 = (void *)v52;
            }
            goto LABEL_69;
          }
          while (1)
          {
LABEL_59:
            long long v43 = v41;
            int v45 = *((_DWORD *)v41 + 8);
            if (v45 == 1)
            {
              int v46 = *((_DWORD *)v41 + 10);
              if (v46 > v39) {
                goto LABEL_58;
              }
              if (v46 >= v39) {
                goto LABEL_69;
              }
            }
            else if (v45 > 1)
            {
LABEL_58:
              long long v41 = (void *)*v41;
              long long v42 = v43;
              if (!*v43) {
                goto LABEL_66;
              }
              continue;
            }
            long long v41 = (void *)v41[1];
            if (!v41)
            {
LABEL_65:
              long long v42 = v43 + 1;
              goto LABEL_66;
            }
          }
        }
      }
      if (v35) {
        long long v43 = v36;
      }
      else {
        long long v43 = v11 + 4;
      }
      if (v35) {
        long long v42 = v36 + 1;
      }
      else {
        long long v42 = v11 + 4;
      }
      if (!*v42) {
        goto LABEL_66;
      }
LABEL_69:
      uint64_t v50 = (void *)v19[1];
      if (v50)
      {
        do
        {
          int v51 = v50;
          uint64_t v50 = (void *)*v50;
        }
        while (v50);
      }
      else
      {
        do
        {
          int v51 = (void *)v19[2];
          BOOL v29 = *v51 == (void)v19;
          unint64_t v19 = v51;
        }
        while (!v29);
      }
      unint64_t v19 = v51;
      if (v51 == v20) {
        goto LABEL_10;
      }
    }
  }
LABEL_88:
  uint64_t v57 = (uint64_t **)*v3;
  unsigned int v58 = (uint64_t *)**v3;
  uint64_t v59 = (uint64_t *)v58[1];
  long long v67 = v59;
  if (v58 != v59)
  {
    do
    {
      while (1)
      {
        uint64_t v60 = v59[2];
        if (!*(unsigned char *)(v60 + 24)) {
          break;
        }
        uint64_t v59 = (uint64_t *)v59[1];
        long long v67 = v59;
        unsigned int v58 = *v57;
        if (v59 == *v57) {
          goto LABEL_93;
        }
      }
      uint64_t v59 = (uint64_t *)boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>>::erase(v58, (int *)(v60 + 64), &v67);
      uint64_t v57 = (uint64_t **)*v3;
      long long v67 = v59;
      unsigned int v58 = *v57;
    }
    while (v59 != *v57);
  }
LABEL_93:
  v3[2] = v59;
LABEL_94:
  pthread_mutex_unlock(v72);
  float64x2x2_t v61 = (char *)__p;
  if (__p)
  {
    if (v71 - 1 >= 0)
    {
      long long v62 = (char *)__p + 16 * v71;
      do
      {
        long long v63 = (atomic_uint *)*((void *)v62 - 1);
        if (v63)
        {
          if (atomic_fetch_add(v63 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v63 + 16))(v63);
            if (atomic_fetch_add(v63 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v63 + 24))(v63);
            }
          }
        }
        v62 -= 16;
      }
      while (v62 > v61);
    }
    if (v69 >= 0xB) {
      operator delete(__p);
    }
  }
}

void sub_235DFA374(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::invocation_state>::dispose(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = (atomic_uint *)v1[3];
    if (v2)
    {
      if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
        if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
        }
      }
    }
    unint64_t v3 = (atomic_uint *)v1[1];
    if (v3)
    {
      if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
        if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
        }
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_base::destroy(uint64_t this)
{
  if (this) {
    return (*(uint64_t (**)(void))(*(void *)this + 8))();
  }
  return this;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_untyped_deleter()
{
  return 0;
}

uint64_t *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>>::~list(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    unint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        unint64_t v5 = (uint64_t *)v3[1];
        int v6 = (atomic_uint *)v3[3];
        if (v6)
        {
          if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
            if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
            }
          }
        }
        operator delete(v3);
        unint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

void std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>>>::destroy(a1[1]);
    operator delete(a1);
  }
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>>>::dispose(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>>>::destroy((void *)v1[4]);
    if (v1[2])
    {
      uint64_t v2 = (void *)*v1;
      unint64_t v3 = (uint64_t *)v1[1];
      uint64_t v4 = *v3;
      *(void *)(v4 + 8) = *(void *)(*v1 + 8);
      *(void *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          unint64_t v5 = (uint64_t *)v3[1];
          int v6 = (atomic_uint *)v3[3];
          if (v6)
          {
            if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
              if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
              }
            }
          }
          operator delete(v3);
          unint64_t v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>>>::get_untyped_deleter()
{
  return 0;
}

uint64_t boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,coex::SubId>>::~slot_call_iterator_cache(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 288);
  if (v2)
  {
    *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v8[8] = v3;
    v8[9] = v3;
    v8[6] = v3;
    v8[7] = v3;
    void v8[4] = v3;
    void v8[5] = v3;
    v8[2] = v3;
    v8[3] = v3;
    v8[0] = v3;
    v8[1] = v3;
    unint64_t v9 = 10;
    long long __p = v8;
    uint64_t v11 = 0;
    uint64_t v12 = v2;
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
    boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(*(_DWORD **)(a1 + 288), v8);
    (*(void (**)(uint64_t))(*(void *)v12 + 32))(v12);
    uint64_t v4 = (char *)__p;
    if (__p)
    {
      if (v11 - 1 >= 0)
      {
        unint64_t v5 = (char *)__p + 16 * v11;
        do
        {
          int v6 = (atomic_uint *)*((void *)v5 - 1);
          if (v6)
          {
            if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
              if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
              }
            }
          }
          v5 -= 16;
        }
        while (v5 > v4);
      }
      if (v9 >= 0xB) {
        operator delete(__p);
      }
    }
  }
  if (*(void *)(a1 + 256)) {
    boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::auto_buffer_destroy((void *)(a1 + 8));
  }
  if (*(unsigned char *)a1) {
    *(unsigned char *)a1 = 0;
  }
  return a1;
}

void sub_235DFAE44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN3ice6detail12wrapCallbackIZNS_6Client13regIndicationIN7desense13CommandDriverENS4_16ARICommandDriverEvJPKhjEEEvjNSt3__110shared_ptrIT_EEMT0_FT1_DpT2_EEUlS8_jE_vEEN8dispatch5blockIU13block_pointerFiPhjEEENS9_17integral_constantIiLi2EEEOSB__block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v3 = *(void **)(a1 + 32);
  if (v3)
  {
    uint64_t v4 = (std::__shared_weak_count *)v3[1];
    if (v4)
    {
      uint64_t v7 = std::__shared_weak_count::lock(v4);
      if (v7)
      {
        uint64_t v8 = v7;
        if (*v3)
        {
          unint64_t v9 = (void (*)(void *, uint64_t, uint64_t))v3[2];
          uint64_t v10 = v3[3];
          uint64_t v11 = (void *)(*v3 + (v10 >> 1));
          if (v10) {
            unint64_t v9 = *(void (**)(void *, uint64_t, uint64_t))(*v11 + v9);
          }
          v9(v11, a2, a3);
        }
        if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
  }
}

void sub_235DFB02C(_Unwind_Exception *exception_object)
{
  if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c146_ZTSNSt3__110shared_ptrIZN3ice6Client13regIndicationIN7desense13CommandDriverENS4_16ARICommandDriverEvJPKhjEEEvjNS0_IT_EEMT0_FT1_DpT2_EEUlS8_jE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c146_ZTSNSt3__110shared_ptrIZN3ice6Client13regIndicationIN7desense13CommandDriverENS4_16ARICommandDriverEvJPKhjEEEvjNS0_IT_EEMT0_FT1_DpT2_EEUlS8_jE_EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<void ice::Client::regIndication<desense::CommandDriver,desense::ARICommandDriver,void,unsigned char const*,unsigned int>(unsigned int,std::shared_ptr<desense::CommandDriver>,void (desense::ARICommandDriver::*)(unsigned char const*,unsigned int))::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void ice::Client::regIndication<desense::CommandDriver,desense::ARICommandDriver,void,unsigned char const*,unsigned int>(unsigned int,std::shared_ptr<desense::CommandDriver>,void (desense::ARICommandDriver::*)(unsigned char const*,unsigned int))::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93D6B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<void ice::Client::regIndication<desense::CommandDriver,desense::ARICommandDriver,void,unsigned char const*,unsigned int>(unsigned int,std::shared_ptr<desense::CommandDriver>,void (desense::ARICommandDriver::*)(unsigned char const*,unsigned int))::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void ice::Client::regIndication<desense::CommandDriver,desense::ARICommandDriver,void,unsigned char const*,unsigned int>(unsigned int,std::shared_ptr<desense::CommandDriver>,void (desense::ARICommandDriver::*)(unsigned char const*,unsigned int))::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93D6B8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<void ice::Client::regIndication<desense::CommandDriver,desense::ARICommandDriver,void,unsigned char const*,unsigned int>(unsigned int,std::shared_ptr<desense::CommandDriver>,void (desense::ARICommandDriver::*)(unsigned char const*,unsigned int))::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void ice::Client::regIndication<desense::CommandDriver,desense::ARICommandDriver,void,unsigned char const*,unsigned int>(unsigned int,std::shared_ptr<desense::CommandDriver>,void (desense::ARICommandDriver::*)(unsigned char const*,unsigned int))::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_4(uint64_t a1)
{
  return 0;
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN7desense13CommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c52_ZTSNSt3__110shared_ptrIKN7desense13CommandDriverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c52_ZTSNSt3__110shared_ptrIKN7desense13CommandDriverEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN3ice6detail12wrapCallbackIZNS_6Client4sendIN6AriSdk34ARI_IBIMsAccCurrentFreqInfoReq_SDKEN7desense13CommandDriverENS6_16ARICommandDriverEvJPKhjEEENS_16SendMsgBaseProxyERT_NSt3__110shared_ptrIT0_EEMT1_FT2_DpT3_EEUlSA_jE_vEEN8dispatch5blockIU13block_pointerFiPhjEEENSE_17integral_constantIiLi2EEEOSC__block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v3 = *(void **)(a1 + 32);
  if (v3)
  {
    uint64_t v4 = (std::__shared_weak_count *)v3[1];
    if (v4)
    {
      uint64_t v7 = std::__shared_weak_count::lock(v4);
      if (v7)
      {
        uint64_t v8 = v7;
        if (*v3)
        {
          unint64_t v9 = (void (*)(void *, uint64_t, uint64_t))v3[2];
          uint64_t v10 = v3[3];
          uint64_t v11 = (void *)(*v3 + (v10 >> 1));
          if (v10) {
            unint64_t v9 = *(void (**)(void *, uint64_t, uint64_t))(*v11 + v9);
          }
          v9(v11, a2, a3);
        }
        if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
  }
}

void sub_235DFB350(_Unwind_Exception *exception_object)
{
  if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c206_ZTSNSt3__110shared_ptrIZN3ice6Client4sendIN6AriSdk34ARI_IBIMsAccCurrentFreqInfoReq_SDKEN7desense13CommandDriverENS6_16ARICommandDriverEvJPKhjEEENS1_16SendMsgBaseProxyERT_NS0_IT0_EEMT1_FT2_DpT3_EEUlSA_jE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c206_ZTSNSt3__110shared_ptrIZN3ice6Client4sendIN6AriSdk34ARI_IBIMsAccCurrentFreqInfoReq_SDKEN7desense13CommandDriverENS6_16ARICommandDriverEvJPKhjEEENS1_16SendMsgBaseProxyERT_NS0_IT0_EEMT1_FT2_DpT3_EEUlSA_jE_EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<ice::SendMsgBaseProxy ice::Client::send<AriSdk::ARI_IBIMsAccCurrentFreqInfoReq_SDK,desense::CommandDriver,desense::ARICommandDriver,void,unsigned char const*,unsigned int>(AriSdk::ARI_IBIMsAccCurrentFreqInfoReq_SDK &,std::shared_ptr<desense::CommandDriver>,void (desense::ARICommandDriver::*)(unsigned char const*,unsigned int))::{lambda(unsigned char const*,unsigned int)#1},std::allocator<ice::SendMsgBaseProxy ice::Client::send<AriSdk::ARI_IBIMsAccCurrentFreqInfoReq_SDK,desense::CommandDriver,desense::ARICommandDriver,void,unsigned char const*,unsigned int>(AriSdk::ARI_IBIMsAccCurrentFreqInfoReq_SDK &,std::shared_ptr<desense::CommandDriver>,void (desense::ARICommandDriver::*)(unsigned char const*,unsigned int))::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93D770;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ice::SendMsgBaseProxy ice::Client::send<AriSdk::ARI_IBIMsAccCurrentFreqInfoReq_SDK,desense::CommandDriver,desense::ARICommandDriver,void,unsigned char const*,unsigned int>(AriSdk::ARI_IBIMsAccCurrentFreqInfoReq_SDK &,std::shared_ptr<desense::CommandDriver>,void (desense::ARICommandDriver::*)(unsigned char const*,unsigned int))::{lambda(unsigned char const*,unsigned int)#1},std::allocator<ice::SendMsgBaseProxy ice::Client::send<AriSdk::ARI_IBIMsAccCurrentFreqInfoReq_SDK,desense::CommandDriver,desense::ARICommandDriver,void,unsigned char const*,unsigned int>(AriSdk::ARI_IBIMsAccCurrentFreqInfoReq_SDK &,std::shared_ptr<desense::CommandDriver>,void (desense::ARICommandDriver::*)(unsigned char const*,unsigned int))::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93D770;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<ice::SendMsgBaseProxy ice::Client::send<AriSdk::ARI_IBIMsAccCurrentFreqInfoReq_SDK,desense::CommandDriver,desense::ARICommandDriver,void,unsigned char const*,unsigned int>(AriSdk::ARI_IBIMsAccCurrentFreqInfoReq_SDK &,std::shared_ptr<desense::CommandDriver>,void (desense::ARICommandDriver::*)(unsigned char const*,unsigned int))::{lambda(unsigned char const*,unsigned int)#1},std::allocator<ice::SendMsgBaseProxy ice::Client::send<AriSdk::ARI_IBIMsAccCurrentFreqInfoReq_SDK,desense::CommandDriver,desense::ARICommandDriver,void,unsigned char const*,unsigned int>(AriSdk::ARI_IBIMsAccCurrentFreqInfoReq_SDK &,std::shared_ptr<desense::CommandDriver>,void (desense::ARICommandDriver::*)(unsigned char const*,unsigned int))::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void *std::list<std::pair<unsigned long long,unsigned int>>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>,std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>>(void *result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a4)
  {
    uint64_t v7 = result;
    uint64_t result = operator new(0x20uLL);
    uint64_t v8 = result;
    *uint64_t result = 0;
    result[1] = 0;
    *((_OWORD *)result + 1) = *(_OWORD *)(a3 + 16);
    uint64_t v9 = *(void *)(a3 + 8);
    uint64_t v10 = 1;
    if (v9 != a4)
    {
      uint64_t v11 = result;
      do
      {
        uint64_t result = operator new(0x20uLL);
        *uint64_t result = v11;
        result[1] = 0;
        *((_OWORD *)result + 1) = *(_OWORD *)(v9 + 16);
        v11[1] = result;
        ++v10;
        uint64_t v9 = *(void *)(v9 + 8);
        uint64_t v11 = result;
      }
      while (v9 != a4);
    }
    uint64_t v12 = *a2;
    *(void *)(v12 + 8) = v8;
    *uint64_t v8 = v12;
    *a2 = (uint64_t)result;
    result[1] = a2;
    v7[2] += v10;
  }
  return result;
}

void sub_235DFB578(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    uint64_t v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_235DFB598(_Unwind_Exception *a1)
{
}

uint64_t *boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(uint64_t *a1)
{
  if (*(_DWORD *)(*a1 + 292) > *(_DWORD *)(*a1 + 288)) {
    boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::force_cleanup_connections(a1[1], a1[2]);
  }
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::~shared_ptr(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)(a1 + 8);
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

uint64_t boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>>::erase(uint64_t *a1, int *a2, uint64_t **a3)
{
  uint64_t v7 = (uint64_t **)(a1 + 4);
  uint64_t v6 = a1[4];
  if (!v6)
  {
    uint64_t v23 = (uint64_t *)a1[10];
    if (v23 != *a3) {
      goto LABEL_80;
    }
    uint64_t v24 = (uint64_t *)v23[1];
    long long v25 = (uint64_t **)(a1 + 4);
    uint64_t v10 = a1 + 4;
    if (v24 != a1) {
      goto LABEL_76;
    }
    goto LABEL_55;
  }
  int v8 = *a2;
  int v9 = a2[2];
  uint64_t v10 = a1 + 4;
  uint64_t v11 = a1[4];
  if (*a2 == 1)
  {
    do
    {
      while (1)
      {
        int v17 = *(_DWORD *)(v11 + 32);
        BOOL v18 = v17 < 1;
        if (v17 == 1) {
          BOOL v18 = *(_DWORD *)(v11 + 40) < v9;
        }
        if (!v18) {
          break;
        }
        uint64_t v11 = *(void *)(v11 + 8);
        if (!v11) {
          goto LABEL_19;
        }
      }
      uint64_t v10 = (uint64_t *)v11;
      uint64_t v11 = *(void *)v11;
    }
    while (v11);
  }
  else
  {
    do
    {
      int v12 = *(_DWORD *)(v11 + 32);
      BOOL v13 = v12 == v8;
      BOOL v14 = v12 < v8;
      if (v12 >= v8) {
        int v15 = (uint64_t *)v11;
      }
      else {
        int v15 = (uint64_t *)(v11 + 8);
      }
      if (v14) {
        uint64_t v16 = v10;
      }
      else {
        uint64_t v16 = (uint64_t *)v11;
      }
      if (v13)
      {
        int v15 = (uint64_t *)v11;
        uint64_t v10 = (uint64_t *)v11;
      }
      else
      {
        uint64_t v10 = v16;
      }
      uint64_t v11 = *v15;
    }
    while (*v15);
  }
LABEL_19:
  unint64_t v19 = (uint64_t *)v10[6];
  if (v19 != *a3) {
    goto LABEL_80;
  }
  unint64_t v20 = (uint64_t **)(a1 + 4);
  if (v8 == 1)
  {
    uint64_t v21 = (uint64_t *)a1[4];
    while (1)
    {
      int v22 = *((_DWORD *)v21 + 8);
      if (v22 == 1)
      {
        if (v9 < *((_DWORD *)v21 + 10)) {
          goto LABEL_27;
        }
LABEL_22:
        uint64_t v21 = (uint64_t *)v21[1];
        if (!v21) {
          goto LABEL_42;
        }
      }
      else
      {
        if (v22 <= 1) {
          goto LABEL_22;
        }
LABEL_27:
        unint64_t v20 = (uint64_t **)v21;
        uint64_t v21 = (uint64_t *)*v21;
        if (!v21) {
          goto LABEL_42;
        }
      }
    }
  }
  uint64_t v26 = (uint64_t **)a1[4];
  do
  {
    int v27 = *((_DWORD *)v26 + 8);
    uint64_t v28 = (uint64_t ***)(v26 + 1);
    BOOL v29 = v8 == v27;
    BOOL v30 = v8 < v27;
    if (v8 >= v27) {
      uint64_t v31 = (uint64_t ***)(v26 + 1);
    }
    else {
      uint64_t v31 = (uint64_t ***)v26;
    }
    if (!v30) {
      uint64_t v26 = v20;
    }
    if (v29) {
      uint64_t v31 = v28;
    }
    else {
      unint64_t v20 = v26;
    }
    uint64_t v26 = *v31;
  }
  while (*v31);
LABEL_42:
  uint64_t v24 = (uint64_t *)v19[1];
  long long v32 = a1;
  if (v20 != v7) {
    long long v32 = v20[6];
  }
  if (v24 == v32)
  {
LABEL_55:
    long long v37 = (uint64_t *)v10[1];
    if (v37)
    {
      do
      {
        long long v38 = v37;
        long long v37 = (uint64_t *)*v37;
      }
      while (v37);
    }
    else
    {
      long long v41 = v10;
      do
      {
        long long v38 = (uint64_t *)v41[2];
        BOOL v13 = *v38 == (void)v41;
        long long v41 = v38;
      }
      while (!v13);
    }
    if ((uint64_t *)a1[3] == v10) {
      a1[3] = (uint64_t)v38;
    }
    --a1[5];
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v6, v10);
    operator delete(v10);
    goto LABEL_80;
  }
  int v33 = *a2;
  if (*a2 == 1)
  {
    int v34 = a2[2];
    while (1)
    {
      long long v25 = (uint64_t **)v6;
      int v35 = *(_DWORD *)(v6 + 32);
      if (v35 == 1)
      {
        int v36 = *(_DWORD *)(v6 + 40);
        if (v36 <= v34)
        {
          if (v36 >= v34)
          {
            *(void *)(v6 + 48) = v24;
            goto LABEL_80;
          }
          goto LABEL_53;
        }
LABEL_47:
        uint64_t v6 = *(void *)v6;
        if (!*v25)
        {
          uint64_t v7 = v25;
          goto LABEL_76;
        }
      }
      else
      {
        if (v35 > 1) {
          goto LABEL_47;
        }
LABEL_53:
        uint64_t v6 = *(void *)(v6 + 8);
        if (!v6)
        {
          uint64_t v7 = v25 + 1;
          goto LABEL_76;
        }
      }
    }
  }
  int v39 = *(_DWORD *)(v6 + 32);
  if (v33 == v39) {
    goto LABEL_79;
  }
  while (v33 >= v39)
  {
    if (v39 >= v33) {
      goto LABEL_79;
    }
    uint64_t v40 = *(void *)(v6 + 8);
    if (!v40)
    {
      uint64_t v7 = (uint64_t **)(v6 + 8);
      goto LABEL_75;
    }
LABEL_61:
    int v39 = *(_DWORD *)(v40 + 32);
    uint64_t v6 = v40;
    if (v33 == v39)
    {
      *(void *)(v40 + 48) = v24;
      goto LABEL_80;
    }
  }
  uint64_t v40 = *(void *)v6;
  if (*(void *)v6) {
    goto LABEL_61;
  }
  uint64_t v7 = (uint64_t **)v6;
LABEL_75:
  long long v25 = (uint64_t **)v6;
LABEL_76:
  uint64_t v6 = (uint64_t)operator new(0x38uLL);
  *(void *)(v6 + 32) = *(void *)a2;
  *(_DWORD *)(v6 + 40) = a2[2];
  *(void *)(v6 + 48) = 0;
  *(void *)uint64_t v6 = 0;
  *(void *)(v6 + 8) = 0;
  *(void *)(v6 + 16) = v25;
  void *v7 = (uint64_t *)v6;
  uint64_t v42 = *(void *)a1[3];
  long long v43 = (uint64_t *)v6;
  if (v42)
  {
    a1[3] = v42;
    long long v43 = *v7;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)a1[4], v43);
  ++a1[5];
LABEL_79:
  *(void *)(v6 + 48) = v24;
LABEL_80:
  int v44 = *a3;
  uint64_t v45 = **a3;
  uint64_t v46 = (*a3)[1];
  *(void *)(v45 + 8) = v46;
  *(void *)v44[1] = v45;
  --a1[2];
  uint64_t v47 = (atomic_uint *)v44[3];
  if (v47)
  {
    if (atomic_fetch_add(v47 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v47 + 16))(v47);
      if (atomic_fetch_add(v47 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v47 + 24))(v47);
      }
    }
  }
  operator delete(v44);
  return v46;
}

void boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>::lock_next_callable(void *a1)
{
  v44[3] = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  if (*a1 == a1[3]) {
    return;
  }
  if (v1 == a1[1]) {
    goto LABEL_51;
  }
  while (1)
  {
    boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::pop_back_n((void *)(a1[2] + 8), *(void *)(a1[2] + 264));
    *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v42 = v3;
    long long v43 = v3;
    long long v40 = v3;
    long long v41 = v3;
    long long v38 = v3;
    long long v39 = v3;
    long long v36 = v3;
    long long v37 = v3;
    long long v34 = v3;
    long long v35 = v3;
    long long v32 = v3;
    long long v33 = v3;
    uint64_t v4 = *(void *)(*a1 + 16);
    *(void *)&long long v42 = 10;
    *((void *)&v42 + 1) = &v32;
    *(void *)&long long v43 = 0;
    *((void *)&v43 + 1) = v4;
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
    uint64_t v5 = *a1;
    uint64_t v6 = *(void *)(*a1 + 16);
    uint64_t v7 = a1[2];
    int v8 = *(uint64_t **)(v6 + 32);
    if (v8)
    {
      uint64_t v9 = *v8;
      if (*v8 != v8[1])
      {
        uint64_t v10 = (void *)(v7 + 8);
        while (1)
        {
          memset(v44, 170, 24);
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::apply_visitor<boost::signals2::detail::lock_weak_ptr_visitor const>(v9, (uint64_t)v44);
          if ((*(_DWORD *)v9 ^ (*(int *)v9 >> 31)) == 2)
          {
            if (!(*(unsigned int (**)(void))(**(void **)(v9 + 8) + 24))(*(void *)(v9 + 8))) {
              goto LABEL_9;
            }
          }
          else
          {
            uint64_t v11 = *(void *)(v9 + 16);
            if (v11 && atomic_load_explicit((atomic_uint *volatile)(v11 + 8), memory_order_acquire))
            {
LABEL_9:
              boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::push_back(v10, (uint64_t)v44);
              char v12 = 0;
              if (LODWORD(v44[0]) == SLODWORD(v44[0]) >> 31) {
                goto LABEL_16;
              }
              goto LABEL_10;
            }
          }
          if (*(unsigned char *)(v6 + 24))
          {
            *(unsigned char *)(v6 + 24) = 0;
            boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>((_DWORD *)v6, &v32);
          }
          char v12 = 1;
          if (LODWORD(v44[0]) == SLODWORD(v44[0]) >> 31)
          {
LABEL_16:
            BOOL v13 = (atomic_uint *)v44[2];
            if (v44[2])
            {
              if (atomic_fetch_add((atomic_uint *volatile)(v44[2] + 8), 0xFFFFFFFF) == 1)
              {
                (*(void (**)(atomic_uint *))(*(void *)v13 + 16))(v13);
                if (atomic_fetch_add(v13 + 3, 0xFFFFFFFF) == 1) {
                  (*(void (**)(atomic_uint *))(*(void *)v13 + 24))(v13);
                }
              }
            }
            goto LABEL_20;
          }
LABEL_10:
          if (v44[1]) {
            (*(void (**)(void))(*(void *)v44[1] + 8))(v44[1]);
          }
LABEL_20:
          if ((v12 & 1) == 0)
          {
            v9 += 24;
            if (v9 != *(void *)(*(void *)(v6 + 32) + 8)) {
              continue;
            }
          }
          uint64_t v5 = *a1;
          uint64_t v6 = *(void *)(*a1 + 16);
          uint64_t v7 = a1[2];
          break;
        }
      }
    }
    if (*(unsigned char *)(v6 + 24))
    {
      ++*(_DWORD *)(v7 + 288);
      uint64_t v14 = *(void *)(v6 + 16);
      if (v14)
      {
        if (atomic_load_explicit((atomic_uint *volatile)(v14 + 8), memory_order_acquire))
        {
          int v15 = 1;
          goto LABEL_37;
        }
        uint64_t v7 = a1[2];
        uint64_t v5 = *a1;
      }
      a1[3] = v5;
      if (a1[1] == v5)
      {
        BOOL v18 = *(_DWORD **)(v7 + 296);
        if (v18) {
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v18, &v32);
        }
        int v15 = 0;
        *(void *)(v7 + 296) = 0;
      }
      else
      {
        uint64_t v16 = *(void *)(v5 + 16);
        int v17 = *(_DWORD **)(v7 + 296);
        if (v17) {
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v17, &v32);
        }
        *(void *)(v7 + 296) = v16;
        int v15 = 0;
        if (v16) {
          ++*(_DWORD *)(v16 + 28);
        }
      }
    }
    else
    {
      ++*(_DWORD *)(v7 + 292);
      int v15 = 1;
    }
LABEL_37:
    (*(void (**)(void))(**((void **)&v43 + 1) + 32))(*((void *)&v43 + 1));
    unint64_t v19 = *((void *)&v42 + 1);
    if (*((void *)&v42 + 1))
    {
      if ((uint64_t)v43 - 1 >= 0)
      {
        unint64_t v20 = *((void *)&v42 + 1) + 16 * v43;
        do
        {
          uint64_t v21 = *(atomic_uint **)(v20 - 8);
          if (v21)
          {
            if (atomic_fetch_add(v21 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v21 + 16))(v21);
              if (atomic_fetch_add(v21 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v21 + 24))(v21);
              }
            }
          }
          v20 -= 16;
        }
        while (v20 > v19);
      }
      if ((unint64_t)v42 >= 0xB) {
        operator delete(*((void **)&v42 + 1));
      }
    }
    uint64_t v1 = *a1;
    uint64_t v22 = a1[1];
    if (!v15) {
      break;
    }
    uint64_t v23 = *(void *)(v1 + 8);
    *a1 = v23;
    if (v23 == v22)
    {
      uint64_t v1 = v22;
LABEL_51:
      uint64_t v24 = a1[3];
      if (v24 != v1)
      {
        *(void *)&long long v25 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v25 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v40 = v25;
        long long v41 = v25;
        long long v38 = v25;
        long long v39 = v25;
        long long v36 = v25;
        long long v37 = v25;
        long long v34 = v25;
        long long v35 = v25;
        long long v32 = v25;
        long long v33 = v25;
        uint64_t v26 = *(void *)(v24 + 16);
        *(void *)&long long v42 = 10;
        *((void *)&v42 + 1) = &v32;
        *(void *)&long long v43 = 0;
        *((void *)&v43 + 1) = v26;
        (*(void (**)(uint64_t))(*(void *)v26 + 24))(v26);
        uint64_t v27 = a1[2];
        a1[3] = a1[1];
        uint64_t v28 = *(_DWORD **)(v27 + 296);
        if (v28) {
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v28, &v32);
        }
        *(void *)(v27 + 296) = 0;
        (*(void (**)(void))(**((void **)&v43 + 1) + 32))(*((void *)&v43 + 1));
        unint64_t v29 = *((void *)&v42 + 1);
        if (*((void *)&v42 + 1))
        {
          if ((uint64_t)v43 - 1 >= 0)
          {
            unint64_t v30 = *((void *)&v42 + 1) + 16 * v43;
            do
            {
              uint64_t v31 = *(atomic_uint **)(v30 - 8);
              if (v31)
              {
                if (atomic_fetch_add(v31 + 2, 0xFFFFFFFF) == 1)
                {
                  (*(void (**)(atomic_uint *))(*(void *)v31 + 16))(v31);
                  if (atomic_fetch_add(v31 + 3, 0xFFFFFFFF) == 1) {
                    (*(void (**)(atomic_uint *))(*(void *)v31 + 24))(v31);
                  }
                }
              }
              v30 -= 16;
            }
            while (v30 > v29);
          }
          if ((unint64_t)v42 >= 0xB) {
            operator delete(*((void **)&v42 + 1));
          }
        }
      }
      return;
    }
  }
  if (v1 == v22) {
    goto LABEL_51;
  }
}

void sub_235DFC000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_235DFC014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_235DFC1F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)va);
  _Unwind_Resume(a1);
}

void boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::force_cleanup_connections(uint64_t a1, uint64_t a2)
{
  long long v3 = (uint64_t **)a1;
  uint64_t v73 = *MEMORY[0x263EF8340];
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v68[8] = v4;
  v68[9] = v4;
  v68[6] = v4;
  v68[7] = v4;
  v68[4] = v4;
  v68[5] = v4;
  v68[2] = v4;
  v68[3] = v4;
  v68[0] = v4;
  v68[1] = v4;
  uint64_t v5 = *(pthread_mutex_t **)(a1 + 24);
  unint64_t v69 = 10;
  long long __p = v68;
  uint64_t v71 = 0;
  unsigned int v72 = v5;
  pthread_mutex_lock(v5);
  if (**v3 != a2) {
    goto LABEL_94;
  }
  uint64_t v6 = v3[1];
  if (!v6 || atomic_load_explicit((atomic_uint *volatile)v6 + 2, memory_order_acquire) != 1)
  {
    uint64_t v7 = (uint64_t *)operator new(0x20uLL);
    int v8 = *v3;
    uint64_t v9 = **v3;
    long long v66 = v7;
    uint64_t v10 = operator new(0x40uLL);
    uint64_t v11 = v10;
    *uint64_t v10 = v10;
    v10[1] = v10;
    v10[2] = 0;
    char v12 = *(void **)(v9 + 8);
    if (v12 != (void *)v9)
    {
      uint64_t v13 = 0;
      uint64_t v14 = v10;
      do
      {
        int v15 = operator new(0x20uLL);
        void v15[2] = v12[2];
        uint64_t v16 = v12[3];
        v15[3] = v16;
        if (v16)
        {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v16 + 8), 1u, memory_order_relaxed);
          uint64_t v14 = (void *)*v11;
          uint64_t v13 = v11[2];
        }
        *int v15 = v14;
        v15[1] = v11;
        v14[1] = v15;
        *uint64_t v11 = v15;
        v11[2] = ++v13;
        char v12 = (void *)v12[1];
        uint64_t v14 = v15;
      }
      while (v12 != (void *)v9);
    }
    long long v64 = v3;
    long long v65 = v8;
    v11[3] = 0;
    int v17 = (void **)(v11 + 3);
    _OWORD v11[4] = 0;
    BOOL v18 = v11 + 4;
    void v11[5] = 0;
    *((unsigned char *)v11 + 48) = *(unsigned char *)(v9 + 48);
    v11[3] = v11 + 4;
    unint64_t v19 = *(void **)(v9 + 24);
    unint64_t v20 = (void *)(v9 + 32);
    if (v19 == (void *)(v9 + 32))
    {
LABEL_10:
      *((unsigned char *)v11 + 56) = *(unsigned char *)(v9 + 56);
      uint64_t v21 = *(void **)(v9 + 24);
      if (v21 != v20)
      {
        uint64_t v22 = (void *)v11[3];
        uint64_t v23 = v11[1];
        do
        {
          v22[6] = v23;
          uint64_t v24 = v9;
          if (v21 != v20) {
            uint64_t v24 = v21[6];
          }
          long long v25 = (void *)v21[1];
          uint64_t v26 = v25;
          uint64_t v27 = v21;
          if (v25)
          {
            do
            {
              uint64_t v28 = v26;
              uint64_t v26 = (void *)*v26;
            }
            while (v26);
          }
          else
          {
            do
            {
              uint64_t v28 = (void *)v27[2];
              BOOL v29 = *v28 == (void)v27;
              uint64_t v27 = v28;
            }
            while (!v29);
          }
          uint64_t v30 = v9;
          if (v28 != v20) {
            uint64_t v30 = v28[6];
          }
          while (v24 != v30)
          {
            uint64_t v24 = *(void *)(v24 + 8);
            uint64_t v23 = *(void *)(v23 + 8);
          }
          if (v25)
          {
            do
            {
              uint64_t v31 = v25;
              long long v25 = (void *)*v25;
            }
            while (v25);
          }
          else
          {
            do
            {
              uint64_t v31 = (void *)v21[2];
              BOOL v29 = *v31 == (void)v21;
              uint64_t v21 = v31;
            }
            while (!v29);
          }
          long long v32 = (void *)v22[1];
          if (v32)
          {
            do
            {
              long long v33 = v32;
              long long v32 = (void *)*v32;
            }
            while (v32);
          }
          else
          {
            do
            {
              long long v33 = (void *)v22[2];
              BOOL v29 = *v33 == (void)v22;
              uint64_t v22 = v33;
            }
            while (!v29);
          }
          uint64_t v21 = v31;
          uint64_t v22 = v33;
        }
        while (v31 != v20);
      }
      *long long v66 = (uint64_t)v11;
      v66[1] = 0;
      long long v53 = operator new(0x18uLL);
      v53[1] = 0x100000001;
      *long long v53 = &unk_26E93D820;
      v53[2] = v11;
      v66[1] = (uint64_t)v53;
      v66[2] = v65[2];
      uint64_t v54 = v65[3];
      v66[3] = v54;
      long long v3 = v64;
      if (v54) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v54 + 8), 1u, memory_order_relaxed);
      }
      unsigned int v55 = (uint64_t *)operator new(0x18uLL);
      v55[1] = 0x100000001;
      *unsigned int v55 = (uint64_t)&unk_26E93D7C0;
      v55[2] = (uint64_t)v66;
      uint64_t v56 = (atomic_uint *)v64[1];
      *long long v64 = v66;
      v64[1] = v55;
      if (v56)
      {
        if (atomic_fetch_add(v56 + 2, 0xFFFFFFFF) == 1)
        {
          (*(void (**)(atomic_uint *))(*(void *)v56 + 16))(v56);
          if (atomic_fetch_add(v56 + 3, 0xFFFFFFFF) == 1) {
            (*(void (**)(atomic_uint *))(*(void *)v56 + 24))(v56);
          }
        }
      }
      goto LABEL_88;
    }
    while (1)
    {
      int v34 = *((_DWORD *)v19 + 8);
      long long v35 = (void *)*v18;
      long long v36 = v11 + 4;
      if (*v17 != v18)
      {
        long long v37 = (void *)*v18;
        long long v38 = v11 + 4;
        if (v35)
        {
          do
          {
            long long v36 = v37;
            long long v37 = (void *)v37[1];
          }
          while (v37);
        }
        else
        {
          do
          {
            long long v36 = (void *)v38[2];
            BOOL v29 = *v36 == (void)v38;
            long long v38 = v36;
          }
          while (v29);
        }
        int v39 = *((_DWORD *)v19 + 10);
        int v40 = *((_DWORD *)v36 + 8);
        if (v40 == v34)
        {
          if (v34 != 1) {
            goto LABEL_55;
          }
          if (*((_DWORD *)v36 + 10) >= v39)
          {
            long long v41 = (void *)*v18;
            long long v42 = v11 + 4;
            long long v43 = v11 + 4;
            if (v35) {
              goto LABEL_59;
            }
LABEL_66:
            uint64_t v47 = operator new(0x38uLL);
            long long v48 = *((_OWORD *)v19 + 2);
            v47[6] = v19[6];
            *((_OWORD *)v47 + 2) = v48;
            void *v47 = 0;
            v47[1] = 0;
            v47[2] = v43;
            void *v42 = v47;
            unsigned int v49 = (void *)**v17;
            if (v49)
            {
              *int v17 = v49;
              uint64_t v47 = (void *)*v42;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v11[4], v47);
            ++v11[5];
            goto LABEL_69;
          }
        }
        else if (v40 >= v34)
        {
LABEL_55:
          long long v42 = v11 + 4;
          long long v43 = v11 + 4;
          if (!v35) {
            goto LABEL_66;
          }
          long long v41 = (void *)*v18;
          if (v34 != 1)
          {
            int v44 = *((_DWORD *)v35 + 8);
            long long v43 = (void *)*v18;
            while (v34 != v44)
            {
              if (v34 < v44)
              {
                uint64_t v52 = *v43;
                long long v42 = v43;
                if (!*v43) {
                  goto LABEL_66;
                }
              }
              else
              {
                if (v44 >= v34) {
                  goto LABEL_69;
                }
                uint64_t v52 = v43[1];
                if (!v52) {
                  goto LABEL_65;
                }
              }
              int v44 = *(_DWORD *)(v52 + 32);
              long long v43 = (void *)v52;
            }
            goto LABEL_69;
          }
          while (1)
          {
LABEL_59:
            long long v43 = v41;
            int v45 = *((_DWORD *)v41 + 8);
            if (v45 == 1)
            {
              int v46 = *((_DWORD *)v41 + 10);
              if (v46 > v39) {
                goto LABEL_58;
              }
              if (v46 >= v39) {
                goto LABEL_69;
              }
            }
            else if (v45 > 1)
            {
LABEL_58:
              long long v41 = (void *)*v41;
              long long v42 = v43;
              if (!*v43) {
                goto LABEL_66;
              }
              continue;
            }
            long long v41 = (void *)v41[1];
            if (!v41)
            {
LABEL_65:
              long long v42 = v43 + 1;
              goto LABEL_66;
            }
          }
        }
      }
      if (v35) {
        long long v43 = v36;
      }
      else {
        long long v43 = v11 + 4;
      }
      if (v35) {
        long long v42 = v36 + 1;
      }
      else {
        long long v42 = v11 + 4;
      }
      if (!*v42) {
        goto LABEL_66;
      }
LABEL_69:
      uint64_t v50 = (void *)v19[1];
      if (v50)
      {
        do
        {
          int v51 = v50;
          uint64_t v50 = (void *)*v50;
        }
        while (v50);
      }
      else
      {
        do
        {
          int v51 = (void *)v19[2];
          BOOL v29 = *v51 == (void)v19;
          unint64_t v19 = v51;
        }
        while (!v29);
      }
      unint64_t v19 = v51;
      if (v51 == v20) {
        goto LABEL_10;
      }
    }
  }
LABEL_88:
  uint64_t v57 = (uint64_t **)*v3;
  unsigned int v58 = (uint64_t *)**v3;
  uint64_t v59 = (uint64_t *)v58[1];
  long long v67 = v59;
  if (v58 != v59)
  {
    do
    {
      while (1)
      {
        uint64_t v60 = v59[2];
        if (!*(unsigned char *)(v60 + 24)) {
          break;
        }
        uint64_t v59 = (uint64_t *)v59[1];
        long long v67 = v59;
        unsigned int v58 = *v57;
        if (v59 == *v57) {
          goto LABEL_93;
        }
      }
      uint64_t v59 = (uint64_t *)boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>>::erase(v58, (int *)(v60 + 64), &v67);
      uint64_t v57 = (uint64_t **)*v3;
      long long v67 = v59;
      unsigned int v58 = *v57;
    }
    while (v59 != *v57);
  }
LABEL_93:
  v3[2] = v59;
LABEL_94:
  pthread_mutex_unlock(v72);
  float64x2x2_t v61 = (char *)__p;
  if (__p)
  {
    if (v71 - 1 >= 0)
    {
      long long v62 = (char *)__p + 16 * v71;
      do
      {
        long long v63 = (atomic_uint *)*((void *)v62 - 1);
        if (v63)
        {
          if (atomic_fetch_add(v63 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v63 + 16))(v63);
            if (atomic_fetch_add(v63 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v63 + 24))(v63);
            }
          }
        }
        v62 -= 16;
      }
      while (v62 > v61);
    }
    if (v69 >= 0xB) {
      operator delete(__p);
    }
  }
}

void sub_235DFC8A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::dispose(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = (atomic_uint *)v1[3];
    if (v2)
    {
      if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
        if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
        }
      }
    }
    long long v3 = (atomic_uint *)v1[1];
    if (v3)
    {
      if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
        if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
        }
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_untyped_deleter()
{
  return 0;
}

uint64_t *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>>::~list(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    long long v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        uint64_t v6 = (atomic_uint *)v3[3];
        if (v6)
        {
          if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
            if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
            }
          }
        }
        operator delete(v3);
        long long v3 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>>>::dispose(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>>>::destroy((void *)v1[4]);
    if (v1[2])
    {
      uint64_t v2 = (void *)*v1;
      long long v3 = (uint64_t *)v1[1];
      uint64_t v4 = *v3;
      *(void *)(v4 + 8) = *(void *)(*v1 + 8);
      *(void *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          uint64_t v5 = (uint64_t *)v3[1];
          uint64_t v6 = (atomic_uint *)v3[3];
          if (v6)
          {
            if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
              if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
              }
            }
          }
          operator delete(v3);
          long long v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>>>::get_untyped_deleter()
{
  return 0;
}

uint64_t boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>>::~slot_call_iterator_cache(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 296);
  if (v2)
  {
    *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v8[8] = v3;
    v8[9] = v3;
    v8[6] = v3;
    v8[7] = v3;
    void v8[4] = v3;
    void v8[5] = v3;
    v8[2] = v3;
    v8[3] = v3;
    v8[0] = v3;
    v8[1] = v3;
    unint64_t v9 = 10;
    long long __p = v8;
    uint64_t v11 = 0;
    uint64_t v12 = v2;
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
    boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(*(_DWORD **)(a1 + 296), v8);
    (*(void (**)(uint64_t))(*(void *)v12 + 32))(v12);
    uint64_t v4 = (char *)__p;
    if (__p)
    {
      if (v11 - 1 >= 0)
      {
        uint64_t v5 = (char *)__p + 16 * v11;
        do
        {
          uint64_t v6 = (atomic_uint *)*((void *)v5 - 1);
          if (v6)
          {
            if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
              if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
              }
            }
          }
          v5 -= 16;
        }
        while (v5 > v4);
      }
      if (v9 >= 0xB) {
        operator delete(__p);
      }
    }
  }
  if (*(void *)(a1 + 256)) {
    boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::auto_buffer_destroy((void *)(a1 + 8));
  }
  if (*(unsigned char *)a1) {
    *(unsigned char *)a1 = 0;
  }
  return a1;
}

void sub_235DFD300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t antenna::ARICommandDriver::create@<X0>(uint64_t *a1@<X0>, NSObject **a2@<X1>, uint64_t *a3@<X2>, antenna::CommandDriver **a4@<X8>)
{
  *a4 = (antenna::CommandDriver *)0xAAAAAAAAAAAAAAAALL;
  a4[1] = (antenna::CommandDriver *)0xAAAAAAAAAAAAAAAALL;
  int v8 = (antenna::CommandDriver *)operator new(0xF8uLL);
  unint64_t v9 = (std::__shared_weak_count *)a1[1];
  uint64_t v27 = *a1;
  uint64_t v28 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *a2;
  dispatch_object_t object = v10;
  if (v10) {
    dispatch_retain(v10);
  }
  uint64_t v11 = *a3;
  uint64_t v12 = (std::__shared_weak_count *)a3[1];
  v25[0] = v11;
  v25[1] = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  antenna::ARICommandDriver::ARICommandDriver(v8, (uint64_t)&v27, &object, (uint64_t)v25);
  *a4 = v8;
  a4[1] = (antenna::CommandDriver *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v13 = (std::__shared_weak_count *)operator new(0x20uLL);
  v13->__shared_owners_ = 0;
  p_uint64_t shared_owners = &v13->__shared_owners_;
  v13->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93DA28;
  v13->__shared_weak_owners_ = 0;
  v13[1].__vftable = (std::__shared_weak_count_vtbl *)v8;
  a4[1] = (antenna::CommandDriver *)v13;
  int v15 = (std::__shared_weak_count *)*((void *)v8 + 10);
  if (!v15)
  {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)v8 + 9) = v8;
    *((void *)v8 + 10) = v13;
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_10;
    }
LABEL_13:
    uint64_t v16 = *a4;
    if (!*((void *)*a4 + 7)) {
      goto LABEL_22;
    }
    goto LABEL_14;
  }
  if (v15->__shared_owners_ != -1) {
    goto LABEL_13;
  }
  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *((void *)v8 + 9) = v8;
  *((void *)v8 + 10) = v13;
  std::__shared_weak_count::__release_weak(v15);
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_13;
  }
LABEL_10:
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  uint64_t v16 = *a4;
  if (!*((void *)*a4 + 7)) {
    goto LABEL_22;
  }
LABEL_14:
  int v17 = (std::__shared_weak_count *)*((void *)v16 + 10);
  if (!v17 || (uint64_t v18 = *((void *)v16 + 9), (v19 = std::__shared_weak_count::lock(v17)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  unint64_t v20 = v19;
  uint64_t v31 = v18;
  long long v32 = v19;
  ctu::LoggerCommonBase::getLogDomain((antenna::CommandDriver *)((char *)v16 + 8));
  uint64_t v29 = v18;
  uint64_t v30 = v20;
  uint64_t v31 = 0;
  long long v32 = 0;
  ctu::TrackedLogger::registerLoggerToServer();
  uint64_t v21 = v30;
  if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  uint64_t v22 = v32;
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
LABEL_22:
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (object) {
    dispatch_release(object);
  }
  uint64_t v23 = v28;
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  return (*(uint64_t (**)(void))(*(void *)*a4 + 72))();
}

void sub_235DFD72C()
{
}

void sub_235DFD78C()
{
}

void sub_235DFD79C()
{
}

antenna::CommandDriver *antenna::ARICommandDriver::ARICommandDriver(antenna::CommandDriver *a1, uint64_t a2, dispatch_object_t *a3, uint64_t a4)
{
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 8);
  uint64_t v13 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  dispatch_object_t object = *a3;
  if (*a3) {
    dispatch_retain(*a3);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a4 + 8);
  uint64_t v11 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  antenna::CommandDriver::CommandDriver();
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  *(void *)a1 = &unk_26E93D880;
  int v8 = *((void *)a1 + 11);
  uint64_t v10 = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  antenna::CommandDriver::getName(a1);
  ice::Client::create();
  if (v10) {
    dispatch_release(v10);
  }
  *((void *)a1 + 27) = 0;
  *((void *)a1 + 25) = 0;
  *((void *)a1 + 26) = (char *)a1 + 216;
  *((void *)a1 + 29) = 0;
  *((void *)a1 + 30) = 0;
  *((void *)a1 + 28) = 0;
  return a1;
}

void sub_235DFD970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, dispatch_object_t object, char a13)
{
  if (object) {
    dispatch_release(object);
  }
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_235DFD998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  antenna::CommandDriver::~CommandDriver(v9);
  _Unwind_Resume(a1);
}

void antenna::CommandDriver::~CommandDriver(void **this)
{
  *this = &unk_26E93D988;
  if (*((char *)this + 183) < 0)
  {
    operator delete(this[20]);
    uint64_t v2 = (std::__shared_weak_count *)this[19];
    if (!v2) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v2 = (std::__shared_weak_count *)this[19];
    if (!v2) {
      goto LABEL_6;
    }
  }
  if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    long long v3 = (std::__shared_weak_count *)this[17];
    if (!v3) {
      goto LABEL_10;
    }
    goto LABEL_7;
  }
LABEL_6:
  long long v3 = (std::__shared_weak_count *)this[17];
  if (!v3) {
    goto LABEL_10;
  }
LABEL_7:
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_10:
  std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>>>::destroy(this[14]);
  *this = &unk_26E93D9E8;
  MEMORY[0x237DF4D50](this + 1);
  uint64_t v4 = this[12];
  if (v4) {
    dispatch_release(v4);
  }
  uint64_t v5 = this[11];
  if (v5) {
    dispatch_release(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)this[10];
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
}

void antenna::ARICommandDriver::~ARICommandDriver(antenna::ARICommandDriver *this)
{
  *(void *)this = &unk_26E93D880;
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl(&dword_235DB9000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v6, 2u);
  }
  long long v3 = *((void *)this + 30);
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (const void *)*((void *)this + 29);
  if (v4) {
    _Block_release(v4);
  }
  std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>>>::destroy(*((void **)this + 27));
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 24);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    antenna::CommandDriver::~CommandDriver((void **)this);
  }
  else
  {
    antenna::CommandDriver::~CommandDriver((void **)this);
  }
}

{
  void *v1;
  uint64_t vars8;

  antenna::ARICommandDriver::~ARICommandDriver(this);

  operator delete(v1);
}

uint64_t dispatch::callback<void({block_pointer})(BOOL,xpc::object)>::~callback(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

void antenna::ARICommandDriver::init(antenna::ARICommandDriver *this)
{
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 0x40000000;
  v9[2] = ___ZN7antenna16ARICommandDriver4initEv_block_invoke;
  void v9[3] = &__block_descriptor_tmp_5;
  void v9[4] = this;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (!v2 || (uint64_t v3 = *((void *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  uint64_t v6 = *((void *)this + 11);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_26E93DC70;
  void block[5] = v3;
  uint64_t v11 = v5;
  p_uint64_t shared_owners = &v5->__shared_owners_;
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = v9;
  dispatch_async(v6, block);
  int v8 = v11;
  if (!v11 || atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZN7antenna16ARICommandDriver4initEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v3 = (uint64_t **)(v1 + 112);
  uint64_t v2 = *(unsigned int **)(v1 + 112);
  uint64_t v4 = (uint64_t **)(v1 + 112);
  uint64_t v5 = (void *)(v1 + 112);
  if (v2)
  {
    uint64_t v6 = *(unsigned int **)(v1 + 112);
    while (1)
    {
      while (1)
      {
        uint64_t v5 = v6;
        unsigned int v7 = v6[7];
        if (v7 < 2) {
          break;
        }
        uint64_t v6 = (unsigned int *)*v5;
        uint64_t v4 = (uint64_t **)v5;
        if (!*v5) {
          goto LABEL_8;
        }
      }
      if (v7) {
        break;
      }
      uint64_t v6 = (unsigned int *)v5[1];
      if (!v6)
      {
        uint64_t v4 = (uint64_t **)(v5 + 1);
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    int v8 = v5;
    uint64_t v5 = operator new(0x28uLL);
    *(void *)((char *)v5 + 28) = 1;
    *uint64_t v5 = 0;
    v5[1] = 0;
    v5[2] = v8;
    std::__shared_weak_count *v4 = v5;
    uint64_t v9 = **(void **)(v1 + 104);
    uint64_t v10 = v5;
    if (v9)
    {
      *(void *)(v1 + 104) = v9;
      uint64_t v10 = *v4;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 112), v10);
    uint64_t v2 = *(unsigned int **)(v1 + 112);
    ++*(void *)(v1 + 120);
  }
  *((_DWORD *)v5 + 8) = 2;
  uint64_t v11 = (uint64_t **)(v1 + 112);
  uint64_t v12 = (void *)(v1 + 112);
  if (v2)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v12 = v2;
        unsigned int v13 = v2[7];
        if (v13 < 3) {
          break;
        }
        uint64_t v2 = (unsigned int *)*v12;
        uint64_t v11 = (uint64_t **)v12;
        if (!*v12) {
          goto LABEL_18;
        }
      }
      if (v13 == 2) {
        break;
      }
      uint64_t v2 = (unsigned int *)v12[1];
      if (!v2)
      {
        uint64_t v11 = (uint64_t **)(v12 + 1);
        goto LABEL_18;
      }
    }
  }
  else
  {
LABEL_18:
    uint64_t v14 = v12;
    uint64_t v12 = operator new(0x28uLL);
    *(void *)((char *)v12 + 28) = 2;
    *uint64_t v12 = 0;
    v12[1] = 0;
    void v12[2] = v14;
    *uint64_t v11 = v12;
    uint64_t v15 = **(void **)(v1 + 104);
    uint64_t v16 = v12;
    if (v15)
    {
      *(void *)(v1 + 104) = v15;
      uint64_t v16 = *v11;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 112), v16);
    ++*(void *)(v1 + 120);
  }
  *((_DWORD *)v12 + 8) = 16;
  int v17 = *v3;
  uint64_t v18 = (uint64_t **)(v1 + 112);
  unint64_t v19 = (void *)(v1 + 112);
  if (*v3)
  {
    unint64_t v20 = (unsigned int *)*v3;
    while (1)
    {
      while (1)
      {
        unint64_t v19 = v20;
        unsigned int v21 = v20[7];
        if (v21 < 5) {
          break;
        }
        unint64_t v20 = (unsigned int *)*v19;
        uint64_t v18 = (uint64_t **)v19;
        if (!*v19) {
          goto LABEL_28;
        }
      }
      if (v21 == 4) {
        break;
      }
      unint64_t v20 = (unsigned int *)v19[1];
      if (!v20)
      {
        uint64_t v18 = (uint64_t **)(v19 + 1);
        goto LABEL_28;
      }
    }
  }
  else
  {
LABEL_28:
    uint64_t v22 = v19;
    unint64_t v19 = operator new(0x28uLL);
    *(void *)((char *)v19 + 28) = 4;
    void *v19 = 0;
    v19[1] = 0;
    _OWORD v19[2] = v22;
    void *v18 = v19;
    uint64_t v23 = **(void **)(v1 + 104);
    uint64_t v24 = v19;
    if (v23)
    {
      *(void *)(v1 + 104) = v23;
      uint64_t v24 = *v18;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 112), v24);
    int v17 = *(uint64_t **)(v1 + 112);
    ++*(void *)(v1 + 120);
  }
  *((_DWORD *)v19 + 8) = 32;
  long long v25 = (uint64_t **)(v1 + 112);
  uint64_t v26 = (void *)(v1 + 112);
  if (v17)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v26 = v17;
        unsigned int v27 = *((_DWORD *)v17 + 7);
        if (v27 < 0x21) {
          break;
        }
        int v17 = (uint64_t *)*v26;
        long long v25 = (uint64_t **)v26;
        if (!*v26) {
          goto LABEL_38;
        }
      }
      if (v27 == 32) {
        break;
      }
      int v17 = (uint64_t *)v26[1];
      if (!v17)
      {
        long long v25 = (uint64_t **)(v26 + 1);
        goto LABEL_38;
      }
    }
  }
  else
  {
LABEL_38:
    uint64_t v28 = v26;
    uint64_t v26 = operator new(0x28uLL);
    *(void *)((char *)v26 + 28) = 32;
    void *v26 = 0;
    v26[1] = 0;
    _OWORD v26[2] = v28;
    *long long v25 = v26;
    uint64_t v29 = **(void **)(v1 + 104);
    uint64_t v30 = v26;
    if (v29)
    {
      *(void *)(v1 + 104) = v29;
      uint64_t v30 = *v25;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 112), v30);
    ++*(void *)(v1 + 120);
  }
  *((_DWORD *)v26 + 8) = 256;
  uint64_t v31 = (unsigned int *)*v3;
  long long v32 = (uint64_t **)(v1 + 112);
  long long v33 = (void *)(v1 + 112);
  if (*v3)
  {
    int v34 = (unsigned int *)*v3;
    while (1)
    {
      while (1)
      {
        long long v33 = v34;
        unsigned int v35 = v34[7];
        if (v35 < 0x11) {
          break;
        }
        int v34 = (unsigned int *)*v33;
        long long v32 = (uint64_t **)v33;
        if (!*v33) {
          goto LABEL_48;
        }
      }
      if (v35 == 16) {
        break;
      }
      int v34 = (unsigned int *)v33[1];
      if (!v34)
      {
        long long v32 = (uint64_t **)(v33 + 1);
        goto LABEL_48;
      }
    }
  }
  else
  {
LABEL_48:
    long long v36 = v33;
    long long v33 = operator new(0x28uLL);
    *(void *)((char *)v33 + 28) = 16;
    void *v33 = 0;
    v33[1] = 0;
    v33[2] = v36;
    std::__shared_weak_count *v32 = v33;
    uint64_t v37 = **(void **)(v1 + 104);
    long long v38 = v33;
    if (v37)
    {
      *(void *)(v1 + 104) = v37;
      long long v38 = *v32;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 112), v38);
    uint64_t v31 = *(unsigned int **)(v1 + 112);
    ++*(void *)(v1 + 120);
  }
  *((_DWORD *)v33 + 8) = 1024;
  int v39 = (uint64_t **)(v1 + 112);
  int v40 = (void *)(v1 + 112);
  if (v31)
  {
    while (1)
    {
      while (1)
      {
        int v40 = v31;
        unsigned int v41 = v31[7];
        if (v41 < 9) {
          break;
        }
        uint64_t v31 = (unsigned int *)*v40;
        int v39 = (uint64_t **)v40;
        if (!*v40) {
          goto LABEL_58;
        }
      }
      if (v41 == 8) {
        break;
      }
      uint64_t v31 = (unsigned int *)v40[1];
      if (!v31)
      {
        int v39 = (uint64_t **)(v40 + 1);
        goto LABEL_58;
      }
    }
  }
  else
  {
LABEL_58:
    long long v42 = v40;
    int v40 = operator new(0x28uLL);
    *(void *)((char *)v40 + 28) = 8;
    *int v40 = 0;
    v40[1] = 0;
    v40[2] = v42;
    void *v39 = v40;
    uint64_t v43 = **(void **)(v1 + 104);
    int v44 = v40;
    if (v43)
    {
      *(void *)(v1 + 104) = v43;
      int v44 = *v39;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 112), v44);
    ++*(void *)(v1 + 120);
  }
  *((_DWORD *)v40 + 8) = 64;
  int v45 = (unsigned int *)*v3;
  int v46 = (uint64_t **)(v1 + 112);
  uint64_t v47 = (void *)(v1 + 112);
  if (*v3)
  {
    long long v48 = (unsigned int *)*v3;
    while (1)
    {
      while (1)
      {
        uint64_t v47 = v48;
        unsigned int v49 = v48[7];
        if (v49 < 0x41) {
          break;
        }
        long long v48 = (unsigned int *)*v47;
        int v46 = (uint64_t **)v47;
        if (!*v47) {
          goto LABEL_68;
        }
      }
      if (v49 == 64) {
        break;
      }
      long long v48 = (unsigned int *)v47[1];
      if (!v48)
      {
        int v46 = (uint64_t **)(v47 + 1);
        goto LABEL_68;
      }
    }
  }
  else
  {
LABEL_68:
    uint64_t v50 = v47;
    uint64_t v47 = operator new(0x28uLL);
    *(void *)((char *)v47 + 28) = 64;
    void *v47 = 0;
    v47[1] = 0;
    v47[2] = v50;
    uint8_t *v46 = v47;
    uint64_t v51 = **(void **)(v1 + 104);
    uint64_t v52 = v47;
    if (v51)
    {
      *(void *)(v1 + 104) = v51;
      uint64_t v52 = *v46;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 112), v52);
    int v45 = *(unsigned int **)(v1 + 112);
    ++*(void *)(v1 + 120);
  }
  *((_DWORD *)v47 + 8) = 2048;
  long long v53 = (uint64_t **)(v1 + 112);
  uint64_t v54 = (void *)(v1 + 112);
  if (v45)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v54 = v45;
        unsigned int v55 = v45[7];
        if (v55 < 0x81) {
          break;
        }
        int v45 = (unsigned int *)*v54;
        long long v53 = (uint64_t **)v54;
        if (!*v54) {
          goto LABEL_78;
        }
      }
      if (v55 == 128) {
        break;
      }
      int v45 = (unsigned int *)v54[1];
      if (!v45)
      {
        long long v53 = (uint64_t **)(v54 + 1);
        goto LABEL_78;
      }
    }
  }
  else
  {
LABEL_78:
    uint64_t v56 = v54;
    uint64_t v54 = operator new(0x28uLL);
    *(void *)((char *)v54 + 28) = 128;
    void *v54 = 0;
    v54[1] = 0;
    v54[2] = v56;
    *long long v53 = v54;
    uint64_t v57 = **(void **)(v1 + 104);
    unsigned int v58 = v54;
    if (v57)
    {
      *(void *)(v1 + 104) = v57;
      unsigned int v58 = *v53;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 112), v58);
    ++*(void *)(v1 + 120);
  }
  *((_DWORD *)v54 + 8) = 4096;
  uint64_t v59 = (unsigned int *)*v3;
  uint64_t v60 = (uint64_t **)(v1 + 112);
  float64x2x2_t v61 = (void *)(v1 + 112);
  if (*v3)
  {
    long long v62 = (unsigned int *)*v3;
    while (1)
    {
      while (1)
      {
        float64x2x2_t v61 = v62;
        unsigned int v63 = v62[7];
        if (v63 < 0x101) {
          break;
        }
        long long v62 = (unsigned int *)*v61;
        uint64_t v60 = (uint64_t **)v61;
        if (!*v61) {
          goto LABEL_88;
        }
      }
      if (v63 == 256) {
        break;
      }
      long long v62 = (unsigned int *)v61[1];
      if (!v62)
      {
        uint64_t v60 = (uint64_t **)(v61 + 1);
        goto LABEL_88;
      }
    }
  }
  else
  {
LABEL_88:
    long long v64 = v61;
    float64x2x2_t v61 = operator new(0x28uLL);
    *(void *)((char *)v61 + 28) = 256;
    *float64x2x2_t v61 = 0;
    v61[1] = 0;
    _OWORD v61[2] = v64;
    NSObject *v60 = v61;
    uint64_t v65 = **(void **)(v1 + 104);
    long long v66 = v61;
    if (v65)
    {
      *(void *)(v1 + 104) = v65;
      long long v66 = *v60;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 112), v66);
    uint64_t v59 = *(unsigned int **)(v1 + 112);
    ++*(void *)(v1 + 120);
  }
  *((_DWORD *)v61 + 8) = 0x2000;
  long long v67 = (uint64_t **)(v1 + 112);
  long long v68 = (void *)(v1 + 112);
  if (v59)
  {
    while (1)
    {
      while (1)
      {
        long long v68 = v59;
        unsigned int v69 = v59[7];
        if (v69 < 0x201) {
          break;
        }
        uint64_t v59 = (unsigned int *)*v68;
        long long v67 = (uint64_t **)v68;
        if (!*v68) {
          goto LABEL_98;
        }
      }
      if (v69 == 512) {
        break;
      }
      uint64_t v59 = (unsigned int *)v68[1];
      if (!v59)
      {
        long long v67 = (uint64_t **)(v68 + 1);
        goto LABEL_98;
      }
    }
  }
  else
  {
LABEL_98:
    long long v70 = v68;
    long long v68 = operator new(0x28uLL);
    *(void *)((char *)v68 + 28) = 512;
    *long long v68 = 0;
    v68[1] = 0;
    v68[2] = v70;
    *long long v67 = v68;
    uint64_t v71 = **(void **)(v1 + 104);
    unsigned int v72 = v68;
    if (v71)
    {
      *(void *)(v1 + 104) = v71;
      unsigned int v72 = *v67;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 112), v72);
    ++*(void *)(v1 + 120);
  }
  *((_DWORD *)v68 + 8) = 0x4000;
  uint64_t v73 = (unsigned int *)*v3;
  long long v74 = (uint64_t **)(v1 + 112);
  long long v75 = (void *)(v1 + 112);
  if (*v3)
  {
    unint64_t v76 = (unsigned int *)*v3;
    while (1)
    {
      while (1)
      {
        long long v75 = v76;
        unsigned int v77 = v76[7];
        if (v77 < 0x401) {
          break;
        }
        unint64_t v76 = (unsigned int *)*v75;
        long long v74 = (uint64_t **)v75;
        if (!*v75) {
          goto LABEL_108;
        }
      }
      if (v77 == 1024) {
        break;
      }
      unint64_t v76 = (unsigned int *)v75[1];
      if (!v76)
      {
        long long v74 = (uint64_t **)(v75 + 1);
        goto LABEL_108;
      }
    }
  }
  else
  {
LABEL_108:
    unint64_t v78 = v75;
    long long v75 = operator new(0x28uLL);
    *(void *)((char *)v75 + 28) = 1024;
    *long long v75 = 0;
    v75[1] = 0;
    v75[2] = v78;
    *long long v74 = v75;
    uint64_t v79 = **(void **)(v1 + 104);
    uint64_t v80 = v75;
    if (v79)
    {
      *(void *)(v1 + 104) = v79;
      uint64_t v80 = *v74;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 112), v80);
    uint64_t v73 = *(unsigned int **)(v1 + 112);
    ++*(void *)(v1 + 120);
  }
  *((_DWORD *)v75 + 8) = 0x8000;
  int64_t v81 = (uint64_t **)(v1 + 112);
  uint64_t v82 = (void *)(v1 + 112);
  if (v73)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v82 = v73;
        unsigned int v83 = v73[7];
        if (v83 < 0x801) {
          break;
        }
        uint64_t v73 = (unsigned int *)*v82;
        int64_t v81 = (uint64_t **)v82;
        if (!*v82) {
          goto LABEL_118;
        }
      }
      if (v83 == 2048) {
        break;
      }
      uint64_t v73 = (unsigned int *)v82[1];
      if (!v73)
      {
        int64_t v81 = (uint64_t **)(v82 + 1);
        goto LABEL_118;
      }
    }
  }
  else
  {
LABEL_118:
    uint64_t v84 = v82;
    uint64_t v82 = operator new(0x28uLL);
    *(void *)((char *)v82 + 28) = 2048;
    void *v82 = 0;
    v82[1] = 0;
    v82[2] = v84;
    int *v81 = v82;
    uint64_t v85 = **(void **)(v1 + 104);
    uint64_t v86 = v82;
    if (v85)
    {
      *(void *)(v1 + 104) = v85;
      uint64_t v86 = *v81;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 112), v86);
    ++*(void *)(v1 + 120);
  }
  *((_DWORD *)v82 + 8) = 0x10000;
  uint64_t v87 = (unsigned int *)*v3;
  __int16 v88 = (void *)(v1 + 112);
  if (*v3)
  {
    while (1)
    {
      while (1)
      {
        __int16 v88 = v87;
        unsigned int v89 = v87[7];
        if (v89 <= 0x1000) {
          break;
        }
        uint64_t v87 = (unsigned int *)*v88;
        uint64_t v3 = (uint64_t **)v88;
        if (!*v88) {
          goto LABEL_128;
        }
      }
      if (v89 == 4096) {
        break;
      }
      uint64_t v87 = (unsigned int *)v88[1];
      if (!v87)
      {
        uint64_t v3 = (uint64_t **)(v88 + 1);
        goto LABEL_128;
      }
    }
  }
  else
  {
LABEL_128:
    unint64_t v90 = v88;
    __int16 v88 = operator new(0x28uLL);
    *(void *)((char *)v88 + 28) = 4096;
    void *v88 = 0;
    v88[1] = 0;
    v88[2] = v90;
    *uint64_t v3 = v88;
    uint64_t v91 = **(void **)(v1 + 104);
    unint64_t v92 = v88;
    if (v91)
    {
      *(void *)(v1 + 104) = v91;
      unint64_t v92 = *v3;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 112), v92);
    ++*(void *)(v1 + 120);
  }
  *((_DWORD *)v88 + 8) = 0x20000;
  long long v94 = (uint64_t **)(v1 + 216);
  unint64_t v93 = *(int **)(v1 + 216);
  long long v95 = (uint64_t **)(v1 + 216);
  long long v96 = (void *)(v1 + 216);
  if (v93)
  {
    uint64_t v97 = *(int **)(v1 + 216);
    while (1)
    {
      while (1)
      {
        long long v96 = v97;
        int v98 = v97[7];
        if (v98 < 1) {
          break;
        }
        uint64_t v97 = (int *)*v96;
        long long v95 = (uint64_t **)v96;
        if (!*v96) {
          goto LABEL_138;
        }
      }
      if ((v98 & 0x80000000) == 0) {
        break;
      }
      uint64_t v97 = (int *)v96[1];
      if (!v97)
      {
        long long v95 = (uint64_t **)(v96 + 1);
        goto LABEL_138;
      }
    }
  }
  else
  {
LABEL_138:
    unint64_t v99 = v96;
    long long v96 = operator new(0x28uLL);
    *((_DWORD *)v96 + 7) = 0;
    *((_DWORD *)v96 + 8) = 0;
    *long long v96 = 0;
    v96[1] = 0;
    v96[2] = v99;
    *long long v95 = v96;
    uint64_t v100 = **(void **)(v1 + 208);
    uint64_t v101 = v96;
    if (v100)
    {
      *(void *)(v1 + 208) = v100;
      uint64_t v101 = *v95;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 216), v101);
    unint64_t v93 = *(int **)(v1 + 216);
    ++*(void *)(v1 + 224);
  }
  *((_DWORD *)v96 + 8) = 2;
  uint64_t v102 = (uint64_t **)(v1 + 216);
  uint64_t v103 = (void *)(v1 + 216);
  if (v93)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v103 = v93;
        int v104 = v93[7];
        if (v104 < 2) {
          break;
        }
        unint64_t v93 = (int *)*v103;
        uint64_t v102 = (uint64_t **)v103;
        if (!*v103) {
          goto LABEL_148;
        }
      }
      if (v104 == 1) {
        break;
      }
      unint64_t v93 = (int *)v103[1];
      if (!v93)
      {
        uint64_t v102 = (uint64_t **)(v103 + 1);
        goto LABEL_148;
      }
    }
  }
  else
  {
LABEL_148:
    unint64_t v105 = v103;
    uint64_t v103 = operator new(0x28uLL);
    *(void *)((char *)v103 + 28) = 1;
    *uint64_t v103 = 0;
    v103[1] = 0;
    v103[2] = v105;
    *uint64_t v102 = v103;
    uint64_t v106 = **(void **)(v1 + 208);
    int v107 = v103;
    if (v106)
    {
      *(void *)(v1 + 208) = v106;
      int v107 = *v102;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 216), v107);
    ++*(void *)(v1 + 224);
  }
  *((_DWORD *)v103 + 8) = 3;
  unint64_t v108 = *v94;
  v109 = (uint64_t **)(v1 + 216);
  v110 = (void *)(v1 + 216);
  if (*v94)
  {
    std::ctype_base::mask v111 = (int *)*v94;
    while (1)
    {
      while (1)
      {
        v110 = v111;
        int v112 = v111[7];
        if (v112 < 3) {
          break;
        }
        std::ctype_base::mask v111 = (int *)*v110;
        v109 = (uint64_t **)v110;
        if (!*v110) {
          goto LABEL_158;
        }
      }
      if (v112 == 2) {
        break;
      }
      std::ctype_base::mask v111 = (int *)v110[1];
      if (!v111)
      {
        v109 = (uint64_t **)(v110 + 1);
        goto LABEL_158;
      }
    }
  }
  else
  {
LABEL_158:
    int v113 = v110;
    v110 = operator new(0x28uLL);
    *(void *)((char *)v110 + 28) = 2;
    void *v110 = 0;
    v110[1] = 0;
    v110[2] = v113;
    uint64_t *v109 = v110;
    uint64_t v114 = **(void **)(v1 + 208);
    std::regex_traits<char>::char_class_type v115 = v110;
    if (v114)
    {
      *(void *)(v1 + 208) = v114;
      std::regex_traits<char>::char_class_type v115 = *v109;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 216), v115);
    unint64_t v108 = *(uint64_t **)(v1 + 216);
    ++*(void *)(v1 + 224);
  }
  *((_DWORD *)v110 + 8) = 0;
  uint64_t v116 = (uint64_t **)(v1 + 216);
  uint64_t v117 = (void *)(v1 + 216);
  if (v108)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v117 = v108;
        int v118 = *((_DWORD *)v108 + 7);
        if (v118 < 4) {
          break;
        }
        unint64_t v108 = (uint64_t *)*v117;
        uint64_t v116 = (uint64_t **)v117;
        if (!*v117) {
          goto LABEL_168;
        }
      }
      if (v118 == 3) {
        break;
      }
      unint64_t v108 = (uint64_t *)v117[1];
      if (!v108)
      {
        uint64_t v116 = (uint64_t **)(v117 + 1);
        goto LABEL_168;
      }
    }
  }
  else
  {
LABEL_168:
    unint64_t v119 = v117;
    uint64_t v117 = operator new(0x28uLL);
    *(void *)((char *)v117 + 28) = 3;
    *uint64_t v117 = 0;
    v117[1] = 0;
    v117[2] = v119;
    *uint64_t v116 = v117;
    uint64_t v120 = **(void **)(v1 + 208);
    uint64_t v121 = v117;
    if (v120)
    {
      *(void *)(v1 + 208) = v120;
      uint64_t v121 = *v116;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 216), v121);
    ++*(void *)(v1 + 224);
  }
  *((_DWORD *)v117 + 8) = 1;
  v122 = (int *)*v94;
  unint64_t v123 = (void *)(v1 + 216);
  if (*v94)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v123 = v122;
        int v124 = v122[7];
        if (v124 < 5) {
          break;
        }
        v122 = (int *)*v123;
        long long v94 = (uint64_t **)v123;
        if (!*v123) {
          goto LABEL_178;
        }
      }
      if (v124 == 4) {
        break;
      }
      v122 = (int *)v123[1];
      if (!v122)
      {
        long long v94 = (uint64_t **)(v123 + 1);
        goto LABEL_178;
      }
    }
  }
  else
  {
LABEL_178:
    unint64_t v125 = v123;
    unint64_t v123 = operator new(0x28uLL);
    *(void *)((char *)v123 + 28) = 4;
    *unint64_t v123 = 0;
    v123[1] = 0;
    v123[2] = v125;
    uint64_t *v94 = v123;
    uint64_t v126 = **(void **)(v1 + 208);
    uint64_t v127 = v123;
    if (v126)
    {
      *(void *)(v1 + 208) = v126;
      uint64_t v127 = *v94;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 216), v127);
    ++*(void *)(v1 + 224);
  }
  *((_DWORD *)v123 + 8) = 255;
  v128 = (std::__shared_weak_count *)operator new(0x20uLL);
  v128->__shared_owners_ = 0;
  p_uint64_t shared_owners = &v128->__shared_owners_;
  v128->__shared_weak_owners_ = 0;
  v128->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93DAA8;
  v128[1].__vftable = (std::__shared_weak_count_vtbl *)v1;
  v149 = (void *)MEMORY[0x263EF8330];
  uint64_t v150 = 1174405120;
  uint64_t v151 = ___ZN3ice6detail17wrapEventCallbackIZZN7antenna16ARICommandDriver4initEvEUb_E3__0vEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi0EEEOT__block_invoke;
  v152 = &__block_descriptor_tmp_19_0;
  v153 = v128 + 1;
  v154 = v128;
  atomic_fetch_add_explicit(&v128->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlocunint64_t k = MEMORY[0x263EF8330];
  uint64_t v156 = 0x40000000;
  v157 = ___ZN3ice6detail17wrapEventCallbackIvEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi0EEEU13block_pointerFT_vE_block_invoke_2;
  v158 = &unk_264C7DC28;
  uint64_t v159 = &v149;
  v130 = _Block_copy(&aBlock);
  uint64_t v131 = v154;
  if (!v154 || atomic_fetch_add(&v154->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_184;
    }
LABEL_187:
    ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
    std::__shared_weak_count::__release_weak(v128);
    if (v130) {
      goto LABEL_185;
    }
    goto LABEL_188;
  }
  ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
  std::__shared_weak_count::__release_weak(v131);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_187;
  }
LABEL_184:
  if (v130)
  {
LABEL_185:
    uint64_t v132 = _Block_copy(v130);
    goto LABEL_189;
  }
LABEL_188:
  uint64_t v132 = 0;
LABEL_189:
  v149 = v132;
  ice::Client::regEventHandlerInternal();
  if (v149) {
    _Block_release(v149);
  }
  if (v130) {
    _Block_release(v130);
  }
  int v133 = (std::__shared_weak_count *)operator new(0x20uLL);
  v133->__shared_owners_ = 0;
  uint64_t v134 = &v133->__shared_owners_;
  v133->__shared_weak_owners_ = 0;
  v133->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93DB28;
  v133[1].__vftable = (std::__shared_weak_count_vtbl *)v1;
  v149 = (void *)MEMORY[0x263EF8330];
  uint64_t v150 = 1174405120;
  uint64_t v151 = ___ZN3ice6detail17wrapEventCallbackIZZN7antenna16ARICommandDriver4initEvEUb_E3__1vEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi0EEEOT__block_invoke;
  v152 = &__block_descriptor_tmp_23_2;
  v153 = v133 + 1;
  v154 = v133;
  atomic_fetch_add_explicit(&v133->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlocunint64_t k = MEMORY[0x263EF8330];
  uint64_t v156 = 0x40000000;
  v157 = ___ZN3ice6detail17wrapEventCallbackIvEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi0EEEU13block_pointerFT_vE_block_invoke_2;
  v158 = &unk_264C7DC28;
  uint64_t v159 = &v149;
  unint64_t v135 = _Block_copy(&aBlock);
  v136 = v154;
  if (!v154 || atomic_fetch_add(&v154->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(v134, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_196;
    }
LABEL_199:
    ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
    std::__shared_weak_count::__release_weak(v133);
    if (v135) {
      goto LABEL_197;
    }
    goto LABEL_200;
  }
  ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
  std::__shared_weak_count::__release_weak(v136);
  if (!atomic_fetch_add(v134, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_199;
  }
LABEL_196:
  if (v135)
  {
LABEL_197:
    v137 = _Block_copy(v135);
    goto LABEL_201;
  }
LABEL_200:
  v137 = 0;
LABEL_201:
  v149 = v137;
  ice::Client::regEventHandlerInternal();
  if (v149) {
    _Block_release(v149);
  }
  if (v135) {
    _Block_release(v135);
  }
  unint64_t v138 = (std::__shared_weak_count *)operator new(0x20uLL);
  v138->__shared_owners_ = 0;
  v139 = &v138->__shared_owners_;
  v138->__shared_weak_owners_ = 0;
  v138->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93DBA8;
  v138[1].__vftable = (std::__shared_weak_count_vtbl *)v1;
  v149 = (void *)MEMORY[0x263EF8330];
  uint64_t v150 = 1174405120;
  uint64_t v151 = ___ZN3ice6detail17wrapEventCallbackIZZN7antenna16ARICommandDriver4initEvEUb_E3__2vEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi0EEEOT__block_invoke;
  v152 = &__block_descriptor_tmp_25_0;
  v153 = v138 + 1;
  v154 = v138;
  atomic_fetch_add_explicit(&v138->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlocunint64_t k = MEMORY[0x263EF8330];
  uint64_t v156 = 0x40000000;
  v157 = ___ZN3ice6detail17wrapEventCallbackIvEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi0EEEU13block_pointerFT_vE_block_invoke_2;
  v158 = &unk_264C7DC28;
  uint64_t v159 = &v149;
  v140 = _Block_copy(&aBlock);
  v141 = v154;
  if (!v154 || atomic_fetch_add(&v154->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(v139, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_208;
    }
LABEL_211:
    ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
    std::__shared_weak_count::__release_weak(v138);
    if (v140) {
      goto LABEL_209;
    }
    goto LABEL_212;
  }
  ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
  std::__shared_weak_count::__release_weak(v141);
  if (!atomic_fetch_add(v139, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_211;
  }
LABEL_208:
  if (v140)
  {
LABEL_209:
    uint64_t v142 = _Block_copy(v140);
    goto LABEL_213;
  }
LABEL_212:
  uint64_t v142 = 0;
LABEL_213:
  v149 = v142;
  ice::Client::regEventHandlerInternal();
  if (v149) {
    _Block_release(v149);
  }
  if (v140) {
    _Block_release(v140);
  }
  v143 = (std::__shared_weak_count *)operator new(0x20uLL);
  v143->__shared_owners_ = 0;
  v144 = &v143->__shared_owners_;
  v143->__shared_weak_owners_ = 0;
  v143->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93DC28;
  v143[1].__vftable = (std::__shared_weak_count_vtbl *)v1;
  v149 = (void *)MEMORY[0x263EF8330];
  uint64_t v150 = 1174405120;
  uint64_t v151 = ___ZN3ice6detail17wrapEventCallbackIZZN7antenna16ARICommandDriver4initEvEUb_E3__3vEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi0EEEOT__block_invoke;
  v152 = &__block_descriptor_tmp_27;
  v153 = v143 + 1;
  v154 = v143;
  atomic_fetch_add_explicit(&v143->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlocunint64_t k = MEMORY[0x263EF8330];
  uint64_t v156 = 0x40000000;
  v157 = ___ZN3ice6detail17wrapEventCallbackIvEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi0EEEU13block_pointerFT_vE_block_invoke_2;
  v158 = &unk_264C7DC28;
  uint64_t v159 = &v149;
  v145 = _Block_copy(&aBlock);
  uint64_t v146 = v154;
  if (!v154 || atomic_fetch_add(&v154->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(v144, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_220;
    }
LABEL_223:
    ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
    std::__shared_weak_count::__release_weak(v143);
    if (v145) {
      goto LABEL_221;
    }
    goto LABEL_224;
  }
  ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
  std::__shared_weak_count::__release_weak(v146);
  if (!atomic_fetch_add(v144, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_223;
  }
LABEL_220:
  if (v145)
  {
LABEL_221:
    uint64_t v147 = _Block_copy(v145);
    goto LABEL_225;
  }
LABEL_224:
  uint64_t v147 = 0;
LABEL_225:
  v149 = v147;
  ice::Client::regEventHandlerInternal();
  if (v149) {
    _Block_release(v149);
  }
  if (v145) {
    _Block_release(v145);
  }
  return ice::Client::start(*(ice::Client **)(v1 + 184));
}

void sub_235DFF054(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v10) {
    _Block_release(v10);
  }
  _Unwind_Resume(exception_object);
}

void antenna::ARICommandDriver::perform(void *a1, xpc_object_t *a2, uint64_t a3)
{
  xpc_object_t v5 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    uint64_t v6 = *(const void **)a3;
    if (*(void *)a3) {
      goto LABEL_3;
    }
LABEL_11:
    unsigned int v7 = 0;
    int v8 = *(NSObject **)(a3 + 8);
    if (!v8) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  xpc_object_t v5 = xpc_null_create();
  uint64_t v6 = *(const void **)a3;
  if (!*(void *)a3) {
    goto LABEL_11;
  }
LABEL_3:
  unsigned int v7 = _Block_copy(v6);
  int v8 = *(NSObject **)(a3 + 8);
  if (v8) {
LABEL_4:
  }
    dispatch_retain(v8);
LABEL_5:
  uint64_t v9 = (std::__shared_weak_count *)a1[10];
  if (!v9 || (uint64_t v10 = a1[9], (v11 = std::__shared_weak_count::lock(v9)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v12 = v11;
  unsigned int v13 = operator new(0x20uLL);
  *unsigned int v13 = v5;
  xpc_object_t v14 = xpc_null_create();
  v13[1] = a1;
  void v13[2] = v7;
  v13[3] = v8;
  uint64_t v15 = a1[11];
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v16 = operator new(0x18uLL);
  *uint64_t v16 = v13;
  v16[1] = v10;
  v16[2] = v12;
  dispatch_async_f(v15, v16, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped<antenna::ARICommandDriver::perform(xpc::dict,dispatch::callback<void({block_pointer})(BOOL,xpc::object)> &&)::$_0>(antenna::ARICommandDriver::perform(xpc::dict,dispatch::callback<void({block_pointer})(BOOL,xpc::object)> &&)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::ARICommandDriver::perform(xpc::dict,dispatch::callback<void({block_pointer})(BOOL,xpc::object)> &&)::$_0,dispatch_queue_s::default_delete<antenna::ARICommandDriver::perform(xpc::dict,dispatch::callback<void({block_pointer})(BOOL,xpc::object)> &&)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  xpc_release(v14);
}

uint64_t antenna::ARICommandDriver::txPowerCappingEnable_sync(std::__shared_weak_count_vtbl *a1, xpc_object_t *a2, uint64_t a3)
{
  long long __p = (void *)0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v32[2] = v6;
  v32[3] = v6;
  v32[0] = v6;
  v32[1] = v6;
  AriSdk::ARI_CsiIceSarEnableReq_SDK::ARI_CsiIceSarEnableReq_SDK((AriSdk::ARI_CsiIceSarEnableReq_SDK *)v32);
  unsigned int v7 = (const char *)*MEMORY[0x263F8B9E8];
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F8B9E8]))
  {
    xpc_object_t value = xpc_dictionary_get_value(*a2, v7);
    object[0] = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      object[0] = xpc_null_create();
    }
    int v9 = xpc::dyn_cast_or_default();
    xpc_release(object[0]);
  }
  else
  {
    int v9 = 0;
  }
  uint64_t v10 = operator new(4uLL);
  *uint64_t v10 = v9;
  uint64_t v11 = __p;
  long long __p = v10;
  if (v11) {
    operator delete(v11);
  }
  uint64_t v12 = *(void **)a3;
  if (*(void *)a3) {
    uint64_t v12 = _Block_copy(v12);
  }
  unsigned int v13 = *(NSObject **)(a3 + 8);
  aBlocunint64_t k = v12;
  uint64_t v31 = v13;
  if (v13) {
    dispatch_retain(v13);
  }
  xpc_object_t v14 = (std::__shared_weak_count *)a1[2].~__shared_weak_count;
  if (!v14
    || (on_zero_shared_weak = (uint64_t)a1[1].__on_zero_shared_weak, (uint64_t v16 = std::__shared_weak_count::lock(v14)) == 0))
  {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v17 = v16;
  p_shared_weak_owners = &v16->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v17);
  }
  get_deleter = a1[4].__get_deleter;
  int v34 = a1;
  uint64_t v35 = on_zero_shared_weak;
  long long v36 = v17;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  int v37 = -184221696;
  if (!aBlock)
  {
    unint64_t v20 = 0;
    unsigned int v21 = v31;
    long long v38 = 0;
    dispatch_object_t v39 = v31;
    if (!v31) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  unint64_t v20 = _Block_copy(aBlock);
  unsigned int v21 = v31;
  long long v38 = v20;
  dispatch_object_t v39 = v31;
  if (v31) {
LABEL_19:
  }
    dispatch_retain(v21);
LABEL_20:
  uint64_t v22 = (std::__shared_weak_count *)operator new(0x48uLL);
  v22->__shared_owners_ = 0;
  p_uint64_t shared_owners = &v22->__shared_owners_;
  v22->__shared_weak_owners_ = 0;
  v22->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93DCE0;
  v22[1].__vftable = a1;
  v22[1].__shared_owners_ = on_zero_shared_weak;
  v22[1].__shared_weak_owners_ = (uint64_t)v17;
  uint64_t v35 = 0;
  long long v36 = 0;
  LODWORD(v22[2].__vftable) = -184221696;
  v22[2].__shared_owners_ = (uint64_t)v20;
  v22[2].__shared_weak_owners_ = (uint64_t)v21;
  long long v38 = 0;
  dispatch_object_t v39 = 0;
  object[0] = (xpc_object_t)MEMORY[0x263EF8330];
  object[1] = (xpc_object_t)1174405120;
  *(void *)&long long v42 = ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk28ARI_CsiIceSarEnableRspCb_SDKENS5_26ARI_CsiIceSarEnableReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  *((void *)&v42 + 1) = &__block_descriptor_tmp_34_0;
  unint64_t v43 = (unint64_t)&v22[1];
  int v44 = v22;
  atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v45 = MEMORY[0x263EF8330];
  uint64_t v46 = 0x40000000;
  uint64_t v47 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_5;
  long long v48 = &unk_264C7DC50;
  unsigned int v49 = object;
  uint64_t v24 = _Block_copy(&v45);
  long long v25 = v44;
  if (!v44 || atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
  std::__shared_weak_count::__release_weak(v25);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_23:
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
LABEL_24:
  *(void *)&long long v26 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v26 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)dispatch_object_t object = v26;
  long long v42 = v26;
  unint64_t v43 = 0xAAAAAAAAAAAAAAAALL;
  unsigned int v27 = (std::__shared_weak_count *)*((void *)get_deleter + 2);
  uint64_t v45 = *((void *)get_deleter + 1);
  if (!v27)
  {
    uint64_t v46 = 0;
LABEL_48:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v46 = (uint64_t)std::__shared_weak_count::lock(v27);
  if (!v46) {
    goto LABEL_48;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  uint64_t v28 = (std::__shared_weak_count *)v46;
  if (v46 && !atomic_fetch_add((atomic_ullong *volatile)(v46 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  int v40 = v24;
  ice::SendMsgBaseProxy::callback();
  if (v40) {
    _Block_release(v40);
  }
  MEMORY[0x237DF50B0](object);
  if (v39) {
    dispatch_release(v39);
  }
  if (v38) {
    _Block_release(v38);
  }
  if (v36) {
    std::__shared_weak_count::__release_weak(v36);
  }
  std::__shared_weak_count::__release_weak(v17);
  if (v31) {
    dispatch_release(v31);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  return MEMORY[0x237DF5770](v32);
}

void sub_235DFF6D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *aBlock,xpc_object_t object)
{
}

void antenna::ARICommandDriver::transmitIndicationRegister_sync(std::__shared_weak_count_vtbl *a1, uint64_t a2)
{
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_uint64_t shared_owners = &v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93DD60;
  v4[1].__vftable = a1;
  uint64_t v16 = (void *)MEMORY[0x263EF8330];
  uint64_t v17 = 1174405120;
  uint64_t v18 = ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver31transmitIndicationRegister_syncEN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEE3__0vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  unint64_t v19 = &__block_descriptor_tmp_38_1;
  unint64_t v20 = &v4[1];
  xpc_object_t object = v4;
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlocunint64_t k = MEMORY[0x263EF8330];
  uint64_t v24 = 0x40000000;
  long long v25 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_5;
  long long v26 = &unk_264C7DC50;
  unsigned int v27 = &v16;
  long long v6 = _Block_copy(&aBlock);
  unsigned int v7 = (std::__shared_weak_count *)object;
  if (!object || atomic_fetch_add((atomic_ullong *volatile)object + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_4:
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
LABEL_5:
  uint64_t v16 = v6;
  ice::Client::regIndicationInternal();
  if (v16) {
    _Block_release(v16);
  }
  int v8 = (std::__shared_weak_count *)operator new(0x20uLL);
  v8->__shared_owners_ = 0;
  int v9 = &v8->__shared_owners_;
  v8->__shared_weak_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93DDE0;
  v8[1].__vftable = a1;
  uint64_t v16 = (void *)MEMORY[0x263EF8330];
  uint64_t v17 = 1174405120;
  uint64_t v18 = ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver31transmitIndicationRegister_syncEN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEE3__1vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  unint64_t v19 = &__block_descriptor_tmp_40_3;
  unint64_t v20 = &v8[1];
  xpc_object_t object = v8;
  atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlocunint64_t k = MEMORY[0x263EF8330];
  uint64_t v24 = 0x40000000;
  long long v25 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_5;
  long long v26 = &unk_264C7DC50;
  unsigned int v27 = &v16;
  uint64_t v10 = _Block_copy(&aBlock);
  uint64_t v11 = (std::__shared_weak_count *)object;
  if (!object || atomic_fetch_add((atomic_ullong *volatile)object + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(v9, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  if (!atomic_fetch_add(v9, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_10:
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_11:
  uint64_t v16 = v10;
  ice::Client::regIndicationInternal();
  if (v16) {
    _Block_release(v16);
  }
  xpc_object_t v12 = xpc_null_create();
  if (*(void *)a2) {
    unsigned int v13 = _Block_copy(*(const void **)a2);
  }
  else {
    unsigned int v13 = 0;
  }
  xpc_object_t v14 = *(NSObject **)(a2 + 8);
  uint64_t v16 = (void *)MEMORY[0x263EF8330];
  uint64_t v17 = 1174405120;
  uint64_t v18 = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  unint64_t v19 = &__block_descriptor_tmp_42_0;
  if (v13)
  {
    uint64_t v15 = _Block_copy(v13);
    char v22 = 1;
    unint64_t v20 = v15;
    xpc_object_t object = v12;
    if (v12)
    {
LABEL_18:
      xpc_retain(v12);
      goto LABEL_21;
    }
  }
  else
  {
    char v22 = 1;
    unint64_t v20 = 0;
    xpc_object_t object = v12;
    if (v12) {
      goto LABEL_18;
    }
  }
  xpc_object_t object = xpc_null_create();
LABEL_21:
  dispatch_async(v14, &v16);
  xpc_release(object);
  xpc_object_t object = 0;
  if (v20) {
    _Block_release(v20);
  }
  if (v13) {
    _Block_release(v13);
  }
  xpc_release(v12);
}

void sub_235DFFC18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  _Unwind_Resume(exception_object);
}

void antenna::ARICommandDriver::transmitIndicationEnable_sync(std::__shared_weak_count_vtbl *a1, xpc_object_t *a2, uint64_t a3)
{
  memset(v64, 170, sizeof(v64));
  xpc_object_t value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F8BA30]);
  object[0] = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    object[0] = xpc_null_create();
  }
  xpc::dyn_cast_or_default();
  xpc_release(object[0]);
  if (SHIBYTE(v64[2]) >= 0) {
    size_t v7 = HIBYTE(v64[2]);
  }
  else {
    size_t v7 = (size_t)v64[1];
  }
  if (v7 == strlen((const char *)*MEMORY[0x263F8BA38]))
  {
    int v8 = SHIBYTE(v64[2]) >= 0 ? v64 : (void **)v64[0];
    if (!memcmp(v8, (const void *)*MEMORY[0x263F8BA38], v7))
    {
      __p[0] = (void *)0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v33 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v33 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v59 = v33;
      long long v60 = v33;
      *(_OWORD *)xpc_object_t object = v33;
      long long v58 = v33;
      AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK::ARI_CsiIceBBTxStateIndEnableReq_SDK((AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK *)object);
      int v34 = (const char *)*MEMORY[0x263F8BA10];
      if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F8BA10]))
      {
        xpc_object_t v35 = xpc_dictionary_get_value(*a2, v34);
        *(void *)&long long v72 = v35;
        if (v35) {
          xpc_retain(v35);
        }
        else {
          *(void *)&long long v72 = xpc_null_create();
        }
        int v36 = xpc::dyn_cast_or_default();
        xpc_release((xpc_object_t)v72);
      }
      else
      {
        int v36 = 0;
      }
      int v37 = operator new(4uLL);
      _DWORD *v37 = v36;
      long long v38 = __p[0];
      __p[0] = v37;
      if (v38) {
        operator delete(v38);
      }
      dispatch_object_t v39 = *(void **)a3;
      if (*(void *)a3) {
        dispatch_object_t v39 = _Block_copy(v39);
      }
      int v40 = *(NSObject **)(a3 + 8);
      long long v62 = v39;
      dispatch_object_t v63 = v40;
      if (v40) {
        dispatch_retain(v40);
      }
      unsigned int v41 = (std::__shared_weak_count *)a1[2].~__shared_weak_count;
      if (!v41
        || (on_zero_shared_weaunint64_t k = (uint64_t)a1[1].__on_zero_shared_weak,
            (unint64_t v43 = std::__shared_weak_count::lock(v41)) == 0))
      {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      int v44 = v43;
      p_shared_weak_owners = &v43->__shared_weak_owners_;
      atomic_fetch_add_explicit(&v43->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v44);
      }
      get_deleter = a1[4].__get_deleter;
      uint64_t v65 = a1;
      uint64_t v66 = on_zero_shared_weak;
      long long v67 = v44;
      atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
      int v68 = -184156160;
      if (v62)
      {
        uint64_t v47 = _Block_copy(v62);
        long long v48 = v63;
        unsigned int v69 = v47;
        dispatch_object_t v70 = v63;
        if (!v63)
        {
LABEL_80:
          unsigned int v49 = (std::__shared_weak_count *)operator new(0x48uLL);
          v49->__shared_owners_ = 0;
          v49->__shared_weak_owners_ = 0;
          v49->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93DE90;
          v49[1].__vftable = a1;
          v49[1].__shared_owners_ = on_zero_shared_weak;
          v49[1].__shared_weak_owners_ = (uint64_t)v44;
          uint64_t v66 = 0;
          long long v67 = 0;
          LODWORD(v49[2].__vftable) = -184156160;
          v49[2].__shared_owners_ = (uint64_t)v47;
          v49[2].__shared_weak_owners_ = (uint64_t)v48;
          unsigned int v69 = 0;
          dispatch_object_t v70 = 0;
          *(void *)&long long v72 = MEMORY[0x263EF8330];
          *((void *)&v72 + 1) = 1174405120;
          *(void *)&long long v73 = ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk37ARI_CsiIceBBTxStateIndEnableRspCb_SDKENS5_35ARI_CsiIceBBTxStateIndEnableReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
          *((void *)&v73 + 1) = &__block_descriptor_tmp_43;
          unint64_t v74 = (unint64_t)&v49[1];
          long long v75 = v49;
          atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v76 = MEMORY[0x263EF8330];
          uint64_t v77 = 0x40000000;
          unint64_t v78 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_5;
          uint64_t v79 = &unk_264C7DC50;
          uint64_t v80 = &v72;
          uint64_t v50 = _Block_copy(&v76);
          uint64_t v51 = v75;
          if (v75 && !atomic_fetch_add(&v75->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
          if (!atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
          }
          *(void *)&long long v52 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v52 + 1) = 0xAAAAAAAAAAAAAAAALL;
          long long v72 = v52;
          long long v73 = v52;
          unint64_t v74 = 0xAAAAAAAAAAAAAAAALL;
          long long v53 = (std::__shared_weak_count *)*((void *)get_deleter + 2);
          uint64_t v76 = *((void *)get_deleter + 1);
          if (v53)
          {
            uint64_t v77 = (uint64_t)std::__shared_weak_count::lock(v53);
            if (v77)
            {
              ice::SendMsgBaseProxy::SendMsgBaseProxy();
              uint64_t v54 = (std::__shared_weak_count *)v77;
              if (v77 && !atomic_fetch_add((atomic_ullong *volatile)(v77 + 8), 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                std::__shared_weak_count::__release_weak(v54);
              }
              uint64_t v71 = v50;
              ice::SendMsgBaseProxy::callback();
              if (v71) {
                _Block_release(v71);
              }
              MEMORY[0x237DF50B0](&v72);
              if (v70) {
                dispatch_release(v70);
              }
              if (v69) {
                _Block_release(v69);
              }
              if (v67) {
                std::__shared_weak_count::__release_weak(v67);
              }
              std::__shared_weak_count::__release_weak(v44);
              if (v63) {
                dispatch_release(v63);
              }
              if (v62) {
                _Block_release(v62);
              }
              MEMORY[0x237DF66A0](object);
              if (SHIBYTE(v64[2]) < 0) {
                goto LABEL_59;
              }
              return;
            }
          }
          else
          {
            uint64_t v77 = 0;
          }
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
      }
      else
      {
        uint64_t v47 = 0;
        long long v48 = v63;
        unsigned int v69 = 0;
        dispatch_object_t v70 = v63;
        if (!v63) {
          goto LABEL_80;
        }
      }
      dispatch_retain(v48);
      goto LABEL_80;
    }
  }
  *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v60 = v9;
  *(_OWORD *)long long __p = v9;
  long long v58 = v9;
  long long v59 = v9;
  *(_OWORD *)xpc_object_t object = v9;
  AriSdk::ARI_IBICallPsTransmitStateReq_SDK::ARI_IBICallPsTransmitStateReq_SDK((AriSdk::ARI_IBICallPsTransmitStateReq_SDK *)object);
  uint64_t v10 = (const char *)*MEMORY[0x263F8BA10];
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F8BA10]))
  {
    xpc_object_t v11 = xpc_dictionary_get_value(*a2, v10);
    *(void *)&long long v72 = v11;
    if (v11) {
      xpc_retain(v11);
    }
    else {
      *(void *)&long long v72 = xpc_null_create();
    }
    int v12 = xpc::dyn_cast_or_default();
    xpc_release((xpc_object_t)v72);
  }
  else
  {
    int v12 = 0;
  }
  unsigned int v13 = operator new(4uLL);
  *unsigned int v13 = v12;
  xpc_object_t v14 = __p[1];
  __p[1] = v13;
  if (v14) {
    operator delete(v14);
  }
  uint64_t v15 = *(void **)a3;
  if (*(void *)a3) {
    uint64_t v15 = _Block_copy(v15);
  }
  uint64_t v16 = *(NSObject **)(a3 + 8);
  aBlocunint64_t k = v15;
  uint64_t v56 = v16;
  if (v16) {
    dispatch_retain(v16);
  }
  uint64_t v17 = (std::__shared_weak_count *)a1[2].~__shared_weak_count;
  if (!v17 || (uint64_t v18 = (uint64_t)a1[1].__on_zero_shared_weak, (v19 = std::__shared_weak_count::lock(v17)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  unint64_t v20 = v19;
  unsigned int v21 = &v19->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v20);
  }
  char v22 = a1[4].__get_deleter;
  uint64_t v65 = a1;
  uint64_t v66 = v18;
  long long v67 = v20;
  atomic_fetch_add_explicit(v21, 1uLL, memory_order_relaxed);
  int v68 = 219709440;
  if (!aBlock)
  {
    uint64_t v23 = 0;
    uint64_t v24 = v56;
    unsigned int v69 = 0;
    dispatch_object_t v70 = v56;
    if (!v56) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  uint64_t v23 = _Block_copy(aBlock);
  uint64_t v24 = v56;
  unsigned int v69 = v23;
  dispatch_object_t v70 = v56;
  if (v56) {
LABEL_30:
  }
    dispatch_retain(v24);
LABEL_31:
  long long v25 = (std::__shared_weak_count *)operator new(0x48uLL);
  v25->__shared_owners_ = 0;
  p_uint64_t shared_owners = &v25->__shared_owners_;
  v25->__shared_weak_owners_ = 0;
  v25->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93DF10;
  v25[1].__vftable = a1;
  v25[1].__shared_owners_ = v18;
  v25[1].__shared_weak_owners_ = (uint64_t)v20;
  uint64_t v66 = 0;
  long long v67 = 0;
  LODWORD(v25[2].__vftable) = 219709440;
  v25[2].__shared_owners_ = (uint64_t)v23;
  v25[2].__shared_weak_owners_ = (uint64_t)v24;
  unsigned int v69 = 0;
  dispatch_object_t v70 = 0;
  *(void *)&long long v72 = MEMORY[0x263EF8330];
  *((void *)&v72 + 1) = 1174405120;
  *(void *)&long long v73 = ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk35ARI_IBICallPsTransmitStateRspCb_SDKENS5_33ARI_IBICallPsTransmitStateReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  *((void *)&v73 + 1) = &__block_descriptor_tmp_46_2;
  unint64_t v74 = (unint64_t)&v25[1];
  long long v75 = v25;
  atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v76 = MEMORY[0x263EF8330];
  uint64_t v77 = 0x40000000;
  unint64_t v78 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_5;
  uint64_t v79 = &unk_264C7DC50;
  uint64_t v80 = &v72;
  unsigned int v27 = _Block_copy(&v76);
  uint64_t v28 = v75;
  if (!v75 || atomic_fetch_add(&v75->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_34;
    }
LABEL_39:
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
    if (__p[0]) {
      goto LABEL_41;
    }
    goto LABEL_40;
  }
  ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
  std::__shared_weak_count::__release_weak(v28);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_39;
  }
LABEL_34:
  if (__p[0]) {
    goto LABEL_41;
  }
LABEL_40:
  uint64_t v29 = operator new(4uLL);
  *uint64_t v29 = 0;
  __p[0] = v29;
LABEL_41:
  unint64_t v74 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v30 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v30 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v72 = v30;
  long long v73 = v30;
  uint64_t v31 = (std::__shared_weak_count *)*((void *)v22 + 2);
  uint64_t v76 = *((void *)v22 + 1);
  if (!v31)
  {
    uint64_t v77 = 0;
LABEL_108:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v77 = (uint64_t)std::__shared_weak_count::lock(v31);
  if (!v77) {
    goto LABEL_108;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  long long v32 = (std::__shared_weak_count *)v77;
  if (v77 && !atomic_fetch_add((atomic_ullong *volatile)(v77 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
  uint64_t v71 = v27;
  ice::SendMsgBaseProxy::callback();
  if (v71) {
    _Block_release(v71);
  }
  MEMORY[0x237DF50B0](&v72);
  if (v70) {
    dispatch_release(v70);
  }
  if (v69) {
    _Block_release(v69);
  }
  if (v67) {
    std::__shared_weak_count::__release_weak(v67);
  }
  std::__shared_weak_count::__release_weak(v20);
  if (v56) {
    dispatch_release(v56);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  MEMORY[0x237DF64F0](object);
  if (SHIBYTE(v64[2]) < 0) {
LABEL_59:
  }
    operator delete(v64[0]);
}

void sub_235E00594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *aBlock)
{
  xpc_release(*(xpc_object_t *)(v35 - 176));
  MEMORY[0x237DF66A0](&object);
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t antenna::ARICommandDriver::txPowerCapping_sync(uint64_t a1, xpc_object_t *a2, uint64_t a3)
{
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v57 = v6;
  *(_OWORD *)long long __p = v6;
  long long v55 = v6;
  long long v56 = v6;
  long long v54 = v6;
  AriSdk::ARI_CsiIceSarReq_SDK::ARI_CsiIceSarReq_SDK((AriSdk::ARI_CsiIceSarReq_SDK *)&v54);
  size_t v7 = (const char *)*MEMORY[0x263F8BA58];
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F8BA58]))
  {
    xpc_object_t value = xpc_dictionary_get_value(*a2, v7);
    object[0] = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      object[0] = xpc_null_create();
    }
    int v13 = xpc::dyn_cast_or_default();
    xpc_release(object[0]);
    uint64_t v15 = (uint64_t **)(a1 + 216);
    xpc_object_t v14 = *(uint64_t **)(a1 + 216);
    if (v14)
    {
      do
      {
        while (1)
        {
          uint64_t v16 = (uint64_t **)v14;
          int v17 = *((_DWORD *)v14 + 7);
          if (v17 <= v13) {
            break;
          }
          xpc_object_t v14 = *v16;
          uint64_t v15 = v16;
          if (!*v16) {
            goto LABEL_18;
          }
        }
        if (v17 >= v13)
        {
          unsigned int v21 = v16;
          goto LABEL_23;
        }
        xpc_object_t v14 = v16[1];
      }
      while (v14);
      uint64_t v15 = v16 + 1;
    }
    else
    {
      uint64_t v16 = (uint64_t **)(a1 + 216);
    }
LABEL_18:
    unsigned int v21 = operator new(0x28uLL);
    v21[7] = v13;
    v21[8] = 0;
    *(void *)unsigned int v21 = 0;
    *((void *)v21 + 1) = 0;
    *((void *)v21 + 2) = v16;
    *uint64_t v15 = (uint64_t *)v21;
    uint64_t v18 = **(void **)(a1 + 208);
    unint64_t v19 = (uint64_t *)v21;
    if (v18)
    {
      *(void *)(a1 + 208) = v18;
      unint64_t v19 = *v15;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 216), v19);
    ++*(void *)(a1 + 224);
LABEL_23:
    int v22 = v21[8];
    uint64_t v23 = operator new(4uLL);
    _DWORD *v23 = v22;
    uint64_t v24 = __p[0];
    __p[0] = v23;
    if (v24) {
      operator delete(v24);
    }
    long long v25 = operator new(4uLL);
    *long long v25 = 0;
    long long v26 = __p[1];
    __p[1] = v25;
    if (v26) {
      operator delete(v26);
    }
    unsigned int v27 = (const char *)*MEMORY[0x263F8BA88];
    if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F8BA88]))
    {
      xpc_object_t v28 = xpc_dictionary_get_value(*a2, v27);
      object[0] = v28;
      if (v28) {
        xpc_retain(v28);
      }
      else {
        object[0] = xpc_null_create();
      }
      int v29 = xpc::dyn_cast_or_default();
      xpc_release(object[0]);
      long long v30 = operator new(4uLL);
      *long long v30 = v29;
      int v12 = __p[1];
      __p[1] = v30;
      if (v12) {
        goto LABEL_32;
      }
    }
    goto LABEL_33;
  }
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F8B9D0]))
  {
    long long v9 = operator new(4uLL);
    *long long v9 = 0;
    uint64_t v10 = __p[0];
    __p[0] = v9;
    if (!v10) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  unint64_t v20 = operator new(4uLL);
  *unint64_t v20 = 1;
  uint64_t v10 = __p[0];
  __p[0] = v20;
  if (v10) {
LABEL_6:
  }
    operator delete(v10);
LABEL_7:
  xpc_object_t v11 = operator new(4uLL);
  *xpc_object_t v11 = 0;
  int v12 = __p[1];
  __p[1] = v11;
  if (v12) {
LABEL_32:
  }
    operator delete(v12);
LABEL_33:
  uint64_t v31 = (const char *)*MEMORY[0x263F8B928];
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F8B928]))
  {
    xpc_object_t v32 = xpc_dictionary_get_value(*a2, v31);
    object[0] = v32;
    if (v32) {
      xpc_retain(v32);
    }
    else {
      object[0] = xpc_null_create();
    }
    int v33 = xpc::dyn_cast_or_default();
    xpc_release(object[0]);
    HIDWORD(v55) = v33;
  }
  int v34 = *(void **)a3;
  if (*(void *)a3) {
    int v34 = _Block_copy(v34);
  }
  uint64_t v35 = *(NSObject **)(a3 + 8);
  aBlocunint64_t k = v34;
  long long v53 = v35;
  if (v35) {
    dispatch_retain(v35);
  }
  int v36 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v36 || (uint64_t v37 = *(void *)(a1 + 72), (v38 = std::__shared_weak_count::lock(v36)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  dispatch_object_t v39 = v38;
  p_shared_weak_owners = &v38->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v38->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v39);
  }
  uint64_t v41 = *(void *)(a1 + 184);
  uint64_t v59 = a1;
  uint64_t v60 = v37;
  float64x2x2_t v61 = v39;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  int v62 = -184385536;
  if (!aBlock)
  {
    long long v42 = 0;
    unint64_t v43 = v53;
    dispatch_object_t v63 = 0;
    dispatch_object_t v64 = v53;
    if (!v53) {
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  long long v42 = _Block_copy(aBlock);
  unint64_t v43 = v53;
  dispatch_object_t v63 = v42;
  dispatch_object_t v64 = v53;
  if (v53) {
LABEL_48:
  }
    dispatch_retain(v43);
LABEL_49:
  int v44 = (std::__shared_weak_count *)operator new(0x48uLL);
  v44->__shared_owners_ = 0;
  p_uint64_t shared_owners = &v44->__shared_owners_;
  v44->__shared_weak_owners_ = 0;
  v44->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93DF90;
  v44[1].__vftable = (std::__shared_weak_count_vtbl *)a1;
  v44[1].__shared_owners_ = v37;
  v44[1].__shared_weak_owners_ = (uint64_t)v39;
  uint64_t v60 = 0;
  float64x2x2_t v61 = 0;
  LODWORD(v44[2].__vftable) = -184385536;
  v44[2].__shared_owners_ = (uint64_t)v42;
  v44[2].__shared_weak_owners_ = (uint64_t)v43;
  dispatch_object_t v63 = 0;
  dispatch_object_t v64 = 0;
  object[0] = (xpc_object_t)MEMORY[0x263EF8330];
  object[1] = (xpc_object_t)1174405120;
  *(void *)&long long v67 = ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk22ARI_CsiIceSarRspCb_SDKENS5_20ARI_CsiIceSarReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  *((void *)&v67 + 1) = &__block_descriptor_tmp_49_1;
  unint64_t v68 = (unint64_t)&v44[1];
  unsigned int v69 = v44;
  atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v70 = MEMORY[0x263EF8330];
  uint64_t v71 = 0x40000000;
  long long v72 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_5;
  long long v73 = &unk_264C7DC50;
  unint64_t v74 = object;
  uint64_t v46 = _Block_copy(&v70);
  uint64_t v47 = v69;
  if (!v69 || atomic_fetch_add(&v69->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_53;
    }
    goto LABEL_52;
  }
  ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
  std::__shared_weak_count::__release_weak(v47);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_52:
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
  }
LABEL_53:
  *(void *)&long long v48 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v48 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)xpc_object_t object = v48;
  long long v67 = v48;
  unint64_t v68 = 0xAAAAAAAAAAAAAAAALL;
  unsigned int v49 = *(std::__shared_weak_count **)(v41 + 16);
  uint64_t v70 = *(void *)(v41 + 8);
  if (!v49)
  {
    uint64_t v71 = 0;
LABEL_77:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v71 = (uint64_t)std::__shared_weak_count::lock(v49);
  if (!v71) {
    goto LABEL_77;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  uint64_t v50 = (std::__shared_weak_count *)v71;
  if (v71 && !atomic_fetch_add((atomic_ullong *volatile)(v71 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
    std::__shared_weak_count::__release_weak(v50);
  }
  uint64_t v65 = v46;
  ice::SendMsgBaseProxy::callback();
  if (v65) {
    _Block_release(v65);
  }
  MEMORY[0x237DF50B0](object);
  if (v64) {
    dispatch_release(v64);
  }
  if (v63) {
    _Block_release(v63);
  }
  if (v61) {
    std::__shared_weak_count::__release_weak(v61);
  }
  std::__shared_weak_count::__release_weak(v39);
  if (v53) {
    dispatch_release(v53);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  return MEMORY[0x237DF5250](&v54);
}

xpc_object_t antenna::ARICommandDriver::txPowerConfiguration_sync(std::__shared_weak_count_vtbl *a1, xpc_object_t *a2, uint64_t a3)
{
  long long v6 = (const char *)*MEMORY[0x263F8BA70];
  xpc_object_t value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F8BA70]);
  int v8 = (const char **)MEMORY[0x263F8BA68];
  long long v9 = (const char **)MEMORY[0x263F8BA80];
  if (value || xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F8BA68]) || xpc_dictionary_get_value(*a2, *v9))
  {
    *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)long long v58 = v10;
    long long v59 = v10;
    long long v56 = v10;
    *(_OWORD *)long long __p = v10;
    long long v54 = v10;
    long long v55 = v10;
    long long v53 = v10;
    AriSdk::ARI_CsiIceCltmReq_SDK::ARI_CsiIceCltmReq_SDK((AriSdk::ARI_CsiIceCltmReq_SDK *)&v53);
    if (xpc_dictionary_get_value(*a2, v6))
    {
      xpc_object_t v11 = xpc_dictionary_get_value(*a2, v6);
      *(void *)&long long v67 = v11;
      if (v11) {
        xpc_retain(v11);
      }
      else {
        *(void *)&long long v67 = xpc_null_create();
      }
      int v12 = xpc::dyn_cast_or_default();
      int v13 = operator new(4uLL);
      *int v13 = v12;
      xpc_object_t v14 = __p[0];
      __p[0] = v13;
      if (v14) {
        operator delete(v14);
      }
      xpc_release((xpc_object_t)v67);
    }
    uint64_t v15 = *v8;
    if (xpc_dictionary_get_value(*a2, *v8))
    {
      xpc_object_t v16 = xpc_dictionary_get_value(*a2, v15);
      *(void *)&long long v67 = v16;
      if (v16) {
        xpc_retain(v16);
      }
      else {
        *(void *)&long long v67 = xpc_null_create();
      }
      int v17 = xpc::dyn_cast_or_default();
      uint64_t v18 = operator new(4uLL);
      _DWORD *v18 = v17;
      unint64_t v19 = __p[1];
      __p[1] = v18;
      if (v19) {
        operator delete(v19);
      }
      xpc_release((xpc_object_t)v67);
    }
    unint64_t v20 = *v9;
    if (xpc_dictionary_get_value(*a2, *v9))
    {
      xpc_object_t v21 = xpc_dictionary_get_value(*a2, v20);
      *(void *)&long long v67 = v21;
      if (v21) {
        xpc_retain(v21);
      }
      else {
        *(void *)&long long v67 = xpc_null_create();
      }
      int v22 = xpc::dyn_cast_or_default();
      uint64_t v23 = operator new(4uLL);
      _DWORD *v23 = v22;
      uint64_t v24 = v58[0];
      v58[0] = v23;
      if (v24) {
        operator delete(v24);
      }
      xpc_release((xpc_object_t)v67);
    }
    if (*(void *)a3)
    {
      long long v25 = _Block_copy(*(const void **)a3);
      long long v26 = *(NSObject **)(a3 + 8);
      uint64_t v51 = v25;
      long long v52 = v26;
      if (!v26)
      {
LABEL_28:
        antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceCltmRspCb_SDK,AriSdk::ARI_CsiIceCltmReq_SDK>(a1, (uint64_t)&v53, (uint64_t)&v51);
        if (v26) {
          dispatch_release(v26);
        }
        if (v25) {
          _Block_release(v25);
        }
        return (xpc_object_t)MEMORY[0x237DF5290](&v53);
      }
    }
    else
    {
      long long v25 = 0;
      long long v26 = *(NSObject **)(a3 + 8);
      uint64_t v51 = 0;
      long long v52 = v26;
      if (!v26) {
        goto LABEL_28;
      }
    }
    dispatch_retain(v26);
    goto LABEL_28;
  }
  xpc_object_t v28 = (const char *)*MEMORY[0x263F8BA60];
  xpc_object_t result = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F8BA60]);
  if (!result) {
    return result;
  }
  __p[0] = (void *)0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v29 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v29 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v55 = v29;
  long long v56 = v29;
  long long v53 = v29;
  long long v54 = v29;
  AriSdk::ARI_CsiIceSarWaitTimeReq_SDK::ARI_CsiIceSarWaitTimeReq_SDK((AriSdk::ARI_CsiIceSarWaitTimeReq_SDK *)&v53);
  xpc_object_t v30 = xpc_dictionary_get_value(*a2, v28);
  *(void *)&long long v67 = v30;
  if (v30) {
    xpc_retain(v30);
  }
  else {
    *(void *)&long long v67 = xpc_null_create();
  }
  unsigned __int16 v31 = xpc::dyn_cast_or_default();
  xpc_release((xpc_object_t)v67);
  xpc_object_t v32 = operator new(4uLL);
  _DWORD *v32 = v31;
  int v33 = __p[0];
  __p[0] = v32;
  if (v33) {
    operator delete(v33);
  }
  int v34 = *(const void **)a3;
  if (*(void *)a3) {
    int v34 = _Block_copy(v34);
  }
  uint64_t v35 = *(NSObject **)(a3 + 8);
  aBlocunint64_t k = (void *)v34;
  xpc_object_t object = v35;
  if (v35) {
    dispatch_retain(v35);
  }
  int v36 = (std::__shared_weak_count *)a1[2].~__shared_weak_count;
  if (!v36 || (on_zero_shared_weak = a1[1].__on_zero_shared_weak, (long long v38 = std::__shared_weak_count::lock(v36)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  dispatch_object_t v39 = v38;
  p_shared_weak_owners = &v38->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v38->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v39);
  }
  get_deleter = a1[4].__get_deleter;
  uint64_t v60 = a1;
  float64x2x2_t v61 = on_zero_shared_weak;
  int v62 = v39;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  int v63 = -184352768;
  if (aBlock) {
    long long v42 = _Block_copy(aBlock);
  }
  else {
    long long v42 = 0;
  }
  dispatch_object_t v64 = v42;
  dispatch_object_t v65 = object;
  if (object) {
    dispatch_retain(object);
  }
  unint64_t v43 = (std::__shared_weak_count *)operator new(0x48uLL);
  v43->__shared_owners_ = 0;
  v43->__shared_weak_owners_ = 0;
  v43->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93E090;
  v43[1].__vftable = a1;
  v43[1].__shared_owners_ = (uint64_t)on_zero_shared_weak;
  v43[1].__shared_weak_owners_ = (uint64_t)v39;
  float64x2x2_t v61 = 0;
  int v62 = 0;
  LODWORD(v43[2].__vftable) = -184352768;
  v43[2].__shared_owners_ = (uint64_t)v42;
  v43[2].__shared_weak_owners_ = (uint64_t)object;
  dispatch_object_t v64 = 0;
  dispatch_object_t v65 = 0;
  *(void *)&long long v67 = MEMORY[0x263EF8330];
  *((void *)&v67 + 1) = 1174405120;
  *(void *)&long long v68 = ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk30ARI_CsiIceSarWaitTimeRspCb_SDKENS5_28ARI_CsiIceSarWaitTimeReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  *((void *)&v68 + 1) = &__block_descriptor_tmp_55_1;
  unint64_t v69 = (unint64_t)&v43[1];
  uint64_t v70 = v43;
  atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v71 = MEMORY[0x263EF8330];
  uint64_t v72 = 0x40000000;
  long long v73 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_5;
  unint64_t v74 = &unk_264C7DC50;
  long long v75 = &v67;
  int v44 = _Block_copy(&v71);
  uint64_t v45 = v70;
  if (v70 && !atomic_fetch_add(&v70->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
  }
  if (!atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
    std::__shared_weak_count::__release_weak(v43);
  }
  *(void *)&long long v46 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v46 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v67 = v46;
  long long v68 = v46;
  unint64_t v69 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v47 = (std::__shared_weak_count *)*((void *)get_deleter + 2);
  uint64_t v71 = *((void *)get_deleter + 1);
  if (!v47)
  {
    uint64_t v72 = 0;
LABEL_80:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v72 = (uint64_t)std::__shared_weak_count::lock(v47);
  if (!v72) {
    goto LABEL_80;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  long long v48 = (std::__shared_weak_count *)v72;
  if (v72 && !atomic_fetch_add((atomic_ullong *volatile)(v72 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
    std::__shared_weak_count::__release_weak(v48);
  }
  uint64_t v66 = v44;
  ice::SendMsgBaseProxy::callback();
  if (v66) {
    _Block_release(v66);
  }
  MEMORY[0x237DF50B0](&v67);
  if (v65) {
    dispatch_release(v65);
  }
  if (v64) {
    _Block_release(v64);
  }
  if (v62) {
    std::__shared_weak_count::__release_weak(v62);
  }
  std::__shared_weak_count::__release_weak(v39);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  return (xpc_object_t)MEMORY[0x237DF5B40](&v53);
}

void sub_235E015D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  unsigned __int16 v31 = *(const void **)(v29 - 184);
  if (v31) {
    _Block_release(v31);
  }
  MEMORY[0x237DF50B0](v29 - 176);
  antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarWaitTimeRspCb_SDK,AriSdk::ARI_CsiIceSarWaitTimeReq_SDK>(AriSdk::ARI_CsiIceSarWaitTimeReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::~callback(&a28);
  std::__shared_weak_count::__release_weak(v28);
  dispatch::callback<void({block_pointer})(BOOL,xpc::object)>::~callback((uint64_t)&a9);
  MEMORY[0x237DF5B40](&a13);
  _Unwind_Resume(a1);
}

void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceCltmRspCb_SDK,AriSdk::ARI_CsiIceCltmReq_SDK>(std::__shared_weak_count_vtbl *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[2].~__shared_weak_count;
  if (!v4
    || (on_zero_shared_weak = (uint64_t)a1[1].__on_zero_shared_weak, (size_t v7 = std::__shared_weak_count::lock(v4)) == 0))
  {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v8 = v7;
  p_shared_weak_owners = &v7->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  get_deleter = a1[4].__get_deleter;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  if (!*(void *)a3)
  {
    xpc_object_t v11 = 0;
    int v12 = *(NSObject **)(a3 + 8);
    if (!v12) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  xpc_object_t v11 = _Block_copy(*(const void **)a3);
  int v12 = *(NSObject **)(a3 + 8);
  if (v12) {
LABEL_7:
  }
    dispatch_retain(v12);
LABEL_8:
  int v13 = (std::__shared_weak_count *)operator new(0x48uLL);
  v13->__shared_owners_ = 0;
  p_uint64_t shared_owners = &v13->__shared_owners_;
  v13->__shared_weak_owners_ = 0;
  v13->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93E010;
  v13[1].__vftable = a1;
  v13[1].__shared_owners_ = on_zero_shared_weak;
  v13[1].__shared_weak_owners_ = (uint64_t)v8;
  LODWORD(v13[2].__vftable) = -184418304;
  v13[2].__shared_owners_ = (uint64_t)v11;
  v13[2].__shared_weak_owners_ = (uint64_t)v12;
  uint64_t v22 = MEMORY[0x263EF8330];
  uint64_t v23 = 1174405120;
  uint64_t v24 = ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk23ARI_CsiIceCltmRspCb_SDKENS5_21ARI_CsiIceCltmReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  long long v25 = &__block_descriptor_tmp_52;
  long long v26 = v13 + 1;
  unsigned int v27 = v13;
  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlock[0] = (const void *)MEMORY[0x263EF8330];
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_5;
  aBlock[3] = &unk_264C7DC50;
  aBlock[4] = &v22;
  uint64_t v15 = _Block_copy(aBlock);
  xpc_object_t v16 = v27;
  if (!v27 || atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
  std::__shared_weak_count::__release_weak(v16);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_11:
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
LABEL_12:
  *(void *)&long long v17 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v20[0] = v17;
  v20[1] = v17;
  unint64_t v21 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v18 = (std::__shared_weak_count *)*((void *)get_deleter + 2);
  uint64_t v22 = *((void *)get_deleter + 1);
  if (!v18)
  {
    uint64_t v23 = 0;
LABEL_26:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v23 = (uint64_t)std::__shared_weak_count::lock(v18);
  if (!v23) {
    goto LABEL_26;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  unint64_t v19 = (std::__shared_weak_count *)v23;
  if (v23 && !atomic_fetch_add((atomic_ullong *volatile)(v23 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  aBlock[0] = v15;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0]) {
    _Block_release(aBlock[0]);
  }
  MEMORY[0x237DF50B0](v20);
  std::__shared_weak_count::__release_weak(v8);
}

void sub_235E01B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v18 = *(const void **)(v16 - 128);
  if (v18) {
    _Block_release(v18);
  }
  MEMORY[0x237DF50B0](&a15);
  antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceCltmRspCb_SDK,AriSdk::ARI_CsiIceCltmReq_SDK>(AriSdk::ARI_CsiIceCltmReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::~callback(&a9);
  std::__shared_weak_count::__release_weak(v15);
  _Unwind_Resume(a1);
}

void sub_235E01B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  if (v22) {
    _Block_release(v22);
  }
  antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceCltmRspCb_SDK,AriSdk::ARI_CsiIceCltmReq_SDK>(AriSdk::ARI_CsiIceCltmReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::~callback(&a9);
  std::__shared_weak_count::__release_weak(v21);
  _Unwind_Resume(a1);
}

uint64_t antenna::ARICommandDriver::getE75AccessoryType(antenna::ARICommandDriver *this, __int16 a2)
{
  if ((a2 & 2) == 0)
  {
    uint64_t v4 = 0;
    if ((a2 & 4) == 0) {
      goto LABEL_26;
    }
    goto LABEL_15;
  }
  long long v6 = (uint64_t **)((char *)this + 112);
  xpc_object_t v5 = (char *)*((void *)this + 14);
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        size_t v7 = v5;
        unsigned int v8 = *((_DWORD *)v5 + 7);
        if (v8 < 3) {
          break;
        }
        xpc_object_t v5 = *(char **)v7;
        long long v6 = (uint64_t **)v7;
        if (!*(void *)v7) {
          goto LABEL_11;
        }
      }
      if (v8 == 2) {
        break;
      }
      xpc_object_t v5 = (char *)*((void *)v7 + 1);
      if (!v5)
      {
        long long v6 = (uint64_t **)(v7 + 8);
        goto LABEL_11;
      }
    }
  }
  else
  {
    size_t v7 = (char *)this + 112;
LABEL_11:
    long long v9 = v7;
    size_t v7 = (char *)operator new(0x28uLL);
    *(void *)(v7 + 28) = 2;
    *(void *)size_t v7 = 0;
    *((void *)v7 + 1) = 0;
    *((void *)v7 + 2) = v9;
    const char *v6 = (uint64_t *)v7;
    uint64_t v10 = **((void **)this + 13);
    xpc_object_t v11 = (uint64_t *)v7;
    if (v10)
    {
      *((void *)this + 13) = v10;
      xpc_object_t v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 14), v11);
    ++*((void *)this + 15);
  }
  uint64_t v4 = *((unsigned int *)v7 + 8);
  if ((a2 & 4) != 0)
  {
LABEL_15:
    int v13 = (uint64_t **)((char *)this + 112);
    int v12 = (char *)*((void *)this + 14);
    if (v12)
    {
      while (1)
      {
        while (1)
        {
          xpc_object_t v14 = v12;
          unsigned int v15 = *((_DWORD *)v12 + 7);
          if (v15 < 5) {
            break;
          }
          int v12 = *(char **)v14;
          int v13 = (uint64_t **)v14;
          if (!*(void *)v14) {
            goto LABEL_22;
          }
        }
        if (v15 == 4) {
          break;
        }
        int v12 = (char *)*((void *)v14 + 1);
        if (!v12)
        {
          int v13 = (uint64_t **)(v14 + 8);
          goto LABEL_22;
        }
      }
    }
    else
    {
      xpc_object_t v14 = (char *)this + 112;
LABEL_22:
      uint64_t v16 = v14;
      xpc_object_t v14 = (char *)operator new(0x28uLL);
      *(void *)(v14 + 28) = 4;
      *(void *)xpc_object_t v14 = 0;
      *((void *)v14 + 1) = 0;
      *((void *)v14 + 2) = v16;
      *int v13 = (uint64_t *)v14;
      uint64_t v17 = **((void **)this + 13);
      uint64_t v18 = (uint64_t *)v14;
      if (v17)
      {
        *((void *)this + 13) = v17;
        uint64_t v18 = *v13;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 14), v18);
      ++*((void *)this + 15);
    }
    uint64_t v4 = *((_DWORD *)v14 + 8) | v4;
  }
LABEL_26:
  if ((a2 & 8) != 0)
  {
    unint64_t v21 = (uint64_t **)((char *)this + 112);
    unint64_t v20 = (char *)*((void *)this + 14);
    if (v20)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v22 = v20;
          unsigned int v23 = *((_DWORD *)v20 + 7);
          if (v23 < 9) {
            break;
          }
          unint64_t v20 = *(char **)v22;
          unint64_t v21 = (uint64_t **)v22;
          if (!*(void *)v22) {
            goto LABEL_45;
          }
        }
        if (v23 == 8) {
          break;
        }
        unint64_t v20 = (char *)*((void *)v22 + 1);
        if (!v20)
        {
          unint64_t v21 = (uint64_t **)(v22 + 8);
          goto LABEL_45;
        }
      }
    }
    else
    {
      uint64_t v22 = (char *)this + 112;
LABEL_45:
      uint64_t v24 = v22;
      uint64_t v22 = (char *)operator new(0x28uLL);
      *(void *)(v22 + 28) = 8;
      *(void *)uint64_t v22 = 0;
      *((void *)v22 + 1) = 0;
      *((void *)v22 + 2) = v24;
      *unint64_t v21 = (uint64_t *)v22;
      uint64_t v25 = **((void **)this + 13);
      long long v26 = (uint64_t *)v22;
      if (v25)
      {
        *((void *)this + 13) = v25;
        long long v26 = *v21;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 14), v26);
      ++*((void *)this + 15);
    }
    uint64_t v4 = *((_DWORD *)v22 + 8) | v4;
    if ((a2 & 0x10) == 0)
    {
LABEL_28:
      if ((a2 & 0x20) == 0) {
        goto LABEL_29;
      }
      goto LABEL_60;
    }
  }
  else if ((a2 & 0x10) == 0)
  {
    goto LABEL_28;
  }
  xpc_object_t v28 = (uint64_t **)((char *)this + 112);
  unsigned int v27 = (char *)*((void *)this + 14);
  if (v27)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v29 = v27;
        unsigned int v30 = *((_DWORD *)v27 + 7);
        if (v30 < 0x11) {
          break;
        }
        unsigned int v27 = *(char **)v29;
        xpc_object_t v28 = (uint64_t **)v29;
        if (!*(void *)v29) {
          goto LABEL_56;
        }
      }
      if (v30 == 16) {
        break;
      }
      unsigned int v27 = (char *)*((void *)v29 + 1);
      if (!v27)
      {
        xpc_object_t v28 = (uint64_t **)(v29 + 8);
        goto LABEL_56;
      }
    }
  }
  else
  {
    uint64_t v29 = (char *)this + 112;
LABEL_56:
    unsigned __int16 v31 = v29;
    uint64_t v29 = (char *)operator new(0x28uLL);
    *(void *)(v29 + 28) = 16;
    *(void *)uint64_t v29 = 0;
    *((void *)v29 + 1) = 0;
    *((void *)v29 + 2) = v31;
    *xpc_object_t v28 = (uint64_t *)v29;
    uint64_t v32 = **((void **)this + 13);
    int v33 = (uint64_t *)v29;
    if (v32)
    {
      *((void *)this + 13) = v32;
      int v33 = *v28;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 14), v33);
    ++*((void *)this + 15);
  }
  uint64_t v4 = *((_DWORD *)v29 + 8) | v4;
  if ((a2 & 0x20) == 0)
  {
LABEL_29:
    if ((a2 & 0x40) == 0) {
      goto LABEL_30;
    }
    goto LABEL_71;
  }
LABEL_60:
  uint64_t v35 = (uint64_t **)((char *)this + 112);
  int v34 = (char *)*((void *)this + 14);
  if (v34)
  {
    while (1)
    {
      while (1)
      {
        int v36 = v34;
        unsigned int v37 = *((_DWORD *)v34 + 7);
        if (v37 < 0x21) {
          break;
        }
        int v34 = *(char **)v36;
        uint64_t v35 = (uint64_t **)v36;
        if (!*(void *)v36) {
          goto LABEL_67;
        }
      }
      if (v37 == 32) {
        break;
      }
      int v34 = (char *)*((void *)v36 + 1);
      if (!v34)
      {
        uint64_t v35 = (uint64_t **)(v36 + 8);
        goto LABEL_67;
      }
    }
  }
  else
  {
    int v36 = (char *)this + 112;
LABEL_67:
    long long v38 = v36;
    int v36 = (char *)operator new(0x28uLL);
    *(void *)(v36 + 28) = 32;
    *(void *)int v36 = 0;
    *((void *)v36 + 1) = 0;
    *((void *)v36 + 2) = v38;
    NSObject *v35 = (uint64_t *)v36;
    uint64_t v39 = **((void **)this + 13);
    int v40 = (uint64_t *)v36;
    if (v39)
    {
      *((void *)this + 13) = v39;
      int v40 = *v35;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 14), v40);
    ++*((void *)this + 15);
  }
  uint64_t v4 = *((_DWORD *)v36 + 8) | v4;
  if ((a2 & 0x40) == 0)
  {
LABEL_30:
    if ((a2 & 0x80) == 0) {
      goto LABEL_31;
    }
    goto LABEL_82;
  }
LABEL_71:
  long long v42 = (uint64_t **)((char *)this + 112);
  uint64_t v41 = (char *)*((void *)this + 14);
  if (v41)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v43 = v41;
        unsigned int v44 = *((_DWORD *)v41 + 7);
        if (v44 < 0x41) {
          break;
        }
        uint64_t v41 = *(char **)v43;
        long long v42 = (uint64_t **)v43;
        if (!*(void *)v43) {
          goto LABEL_78;
        }
      }
      if (v44 == 64) {
        break;
      }
      uint64_t v41 = (char *)*((void *)v43 + 1);
      if (!v41)
      {
        long long v42 = (uint64_t **)(v43 + 8);
        goto LABEL_78;
      }
    }
  }
  else
  {
    unint64_t v43 = (char *)this + 112;
LABEL_78:
    uint64_t v45 = v43;
    unint64_t v43 = (char *)operator new(0x28uLL);
    *(void *)(v43 + 28) = 64;
    *(void *)unint64_t v43 = 0;
    *((void *)v43 + 1) = 0;
    *((void *)v43 + 2) = v45;
    void *v42 = (uint64_t *)v43;
    uint64_t v46 = **((void **)this + 13);
    uint64_t v47 = (uint64_t *)v43;
    if (v46)
    {
      *((void *)this + 13) = v46;
      uint64_t v47 = *v42;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 14), v47);
    ++*((void *)this + 15);
  }
  uint64_t v4 = *((_DWORD *)v43 + 8) | v4;
  if ((a2 & 0x80) == 0)
  {
LABEL_31:
    if ((a2 & 0x100) == 0) {
      goto LABEL_32;
    }
    goto LABEL_93;
  }
LABEL_82:
  unsigned int v49 = (uint64_t **)((char *)this + 112);
  long long v48 = (char *)*((void *)this + 14);
  if (v48)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v50 = v48;
        unsigned int v51 = *((_DWORD *)v48 + 7);
        if (v51 < 0x81) {
          break;
        }
        long long v48 = *(char **)v50;
        unsigned int v49 = (uint64_t **)v50;
        if (!*(void *)v50) {
          goto LABEL_89;
        }
      }
      if (v51 == 128) {
        break;
      }
      long long v48 = (char *)*((void *)v50 + 1);
      if (!v48)
      {
        unsigned int v49 = (uint64_t **)(v50 + 8);
        goto LABEL_89;
      }
    }
  }
  else
  {
    uint64_t v50 = (char *)this + 112;
LABEL_89:
    long long v52 = v50;
    uint64_t v50 = (char *)operator new(0x28uLL);
    *(void *)(v50 + 28) = 128;
    *(void *)uint64_t v50 = 0;
    *((void *)v50 + 1) = 0;
    *((void *)v50 + 2) = v52;
    std::__shared_weak_count *v49 = (uint64_t *)v50;
    uint64_t v53 = **((void **)this + 13);
    long long v54 = (uint64_t *)v50;
    if (v53)
    {
      *((void *)this + 13) = v53;
      long long v54 = *v49;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 14), v54);
    ++*((void *)this + 15);
  }
  uint64_t v4 = *((_DWORD *)v50 + 8) | v4;
  if ((a2 & 0x100) == 0)
  {
LABEL_32:
    if ((a2 & 0x200) == 0) {
      goto LABEL_33;
    }
    goto LABEL_104;
  }
LABEL_93:
  long long v56 = (uint64_t **)((char *)this + 112);
  long long v55 = (char *)*((void *)this + 14);
  if (v55)
  {
    while (1)
    {
      while (1)
      {
        long long v57 = v55;
        unsigned int v58 = *((_DWORD *)v55 + 7);
        if (v58 < 0x101) {
          break;
        }
        long long v55 = *(char **)v57;
        long long v56 = (uint64_t **)v57;
        if (!*(void *)v57) {
          goto LABEL_100;
        }
      }
      if (v58 == 256) {
        break;
      }
      long long v55 = (char *)*((void *)v57 + 1);
      if (!v55)
      {
        long long v56 = (uint64_t **)(v57 + 8);
        goto LABEL_100;
      }
    }
  }
  else
  {
    long long v57 = (char *)this + 112;
LABEL_100:
    long long v59 = v57;
    long long v57 = (char *)operator new(0x28uLL);
    *(void *)(v57 + 28) = 256;
    *(void *)long long v57 = 0;
    *((void *)v57 + 1) = 0;
    *((void *)v57 + 2) = v59;
    *long long v56 = (uint64_t *)v57;
    uint64_t v60 = **((void **)this + 13);
    float64x2x2_t v61 = (uint64_t *)v57;
    if (v60)
    {
      *((void *)this + 13) = v60;
      float64x2x2_t v61 = *v56;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 14), v61);
    ++*((void *)this + 15);
  }
  uint64_t v4 = *((_DWORD *)v57 + 8) | v4;
  if ((a2 & 0x200) == 0)
  {
LABEL_33:
    if ((a2 & 0x400) == 0) {
      goto LABEL_34;
    }
    goto LABEL_115;
  }
LABEL_104:
  int v63 = (uint64_t **)((char *)this + 112);
  int v62 = (char *)*((void *)this + 14);
  if (v62)
  {
    while (1)
    {
      while (1)
      {
        dispatch_object_t v64 = v62;
        unsigned int v65 = *((_DWORD *)v62 + 7);
        if (v65 < 0x201) {
          break;
        }
        int v62 = *(char **)v64;
        int v63 = (uint64_t **)v64;
        if (!*(void *)v64) {
          goto LABEL_111;
        }
      }
      if (v65 == 512) {
        break;
      }
      int v62 = (char *)*((void *)v64 + 1);
      if (!v62)
      {
        int v63 = (uint64_t **)(v64 + 8);
        goto LABEL_111;
      }
    }
  }
  else
  {
    dispatch_object_t v64 = (char *)this + 112;
LABEL_111:
    uint64_t v66 = v64;
    dispatch_object_t v64 = (char *)operator new(0x28uLL);
    *(void *)(v64 + 28) = 512;
    *(void *)dispatch_object_t v64 = 0;
    *((void *)v64 + 1) = 0;
    *((void *)v64 + 2) = v66;
    *int v63 = (uint64_t *)v64;
    uint64_t v67 = **((void **)this + 13);
    long long v68 = (uint64_t *)v64;
    if (v67)
    {
      *((void *)this + 13) = v67;
      long long v68 = *v63;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 14), v68);
    ++*((void *)this + 15);
  }
  uint64_t v4 = *((_DWORD *)v64 + 8) | v4;
  if ((a2 & 0x400) == 0)
  {
LABEL_34:
    if ((a2 & 0x800) == 0) {
      goto LABEL_35;
    }
    goto LABEL_126;
  }
LABEL_115:
  uint64_t v70 = (uint64_t **)((char *)this + 112);
  unint64_t v69 = (char *)*((void *)this + 14);
  if (v69)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v71 = v69;
        unsigned int v72 = *((_DWORD *)v69 + 7);
        if (v72 < 0x401) {
          break;
        }
        unint64_t v69 = *(char **)v71;
        uint64_t v70 = (uint64_t **)v71;
        if (!*(void *)v71) {
          goto LABEL_122;
        }
      }
      if (v72 == 1024) {
        break;
      }
      unint64_t v69 = (char *)*((void *)v71 + 1);
      if (!v69)
      {
        uint64_t v70 = (uint64_t **)(v71 + 8);
        goto LABEL_122;
      }
    }
  }
  else
  {
    uint64_t v71 = (char *)this + 112;
LABEL_122:
    long long v73 = v71;
    uint64_t v71 = (char *)operator new(0x28uLL);
    *(void *)(v71 + 28) = 1024;
    *(void *)uint64_t v71 = 0;
    *((void *)v71 + 1) = 0;
    *((void *)v71 + 2) = v73;
    *uint64_t v70 = (uint64_t *)v71;
    uint64_t v74 = **((void **)this + 13);
    long long v75 = (uint64_t *)v71;
    if (v74)
    {
      *((void *)this + 13) = v74;
      long long v75 = *v70;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 14), v75);
    ++*((void *)this + 15);
  }
  uint64_t v4 = *((_DWORD *)v71 + 8) | v4;
  if ((a2 & 0x800) == 0)
  {
LABEL_35:
    if ((a2 & 0x1000) == 0) {
      goto LABEL_36;
    }
LABEL_137:
    uint64_t v84 = (uint64_t **)((char *)this + 112);
    unsigned int v83 = (char *)*((void *)this + 14);
    if (v83)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v85 = v83;
          unsigned int v86 = *((_DWORD *)v83 + 7);
          if (v86 <= 0x1000) {
            break;
          }
          unsigned int v83 = *(char **)v85;
          uint64_t v84 = (uint64_t **)v85;
          if (!*(void *)v85) {
            goto LABEL_144;
          }
        }
        if (v86 == 4096) {
          break;
        }
        unsigned int v83 = (char *)*((void *)v85 + 1);
        if (!v83)
        {
          uint64_t v84 = (uint64_t **)(v85 + 8);
          goto LABEL_144;
        }
      }
    }
    else
    {
      uint64_t v85 = (char *)this + 112;
LABEL_144:
      uint64_t v87 = v85;
      uint64_t v85 = (char *)operator new(0x28uLL);
      *(void *)(v85 + 28) = 4096;
      *(void *)uint64_t v85 = 0;
      *((void *)v85 + 1) = 0;
      *((void *)v85 + 2) = v87;
      void *v84 = (uint64_t *)v85;
      uint64_t v88 = **((void **)this + 13);
      unsigned int v89 = (uint64_t *)v85;
      if (v88)
      {
        *((void *)this + 13) = v88;
        unsigned int v89 = *v84;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 14), v89);
      ++*((void *)this + 15);
    }
    uint64_t v4 = *((_DWORD *)v85 + 8) | v4;
    if (v4) {
      return v4;
    }
    goto LABEL_148;
  }
LABEL_126:
  uint64_t v77 = (uint64_t **)((char *)this + 112);
  uint64_t v76 = (char *)*((void *)this + 14);
  if (v76)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v78 = v76;
        unsigned int v79 = *((_DWORD *)v76 + 7);
        if (v79 < 0x801) {
          break;
        }
        uint64_t v76 = *(char **)v78;
        uint64_t v77 = (uint64_t **)v78;
        if (!*(void *)v78) {
          goto LABEL_133;
        }
      }
      if (v79 == 2048) {
        break;
      }
      uint64_t v76 = (char *)*((void *)v78 + 1);
      if (!v76)
      {
        uint64_t v77 = (uint64_t **)(v78 + 8);
        goto LABEL_133;
      }
    }
  }
  else
  {
    unint64_t v78 = (char *)this + 112;
LABEL_133:
    uint64_t v80 = v78;
    unint64_t v78 = (char *)operator new(0x28uLL);
    *(void *)(v78 + 28) = 2048;
    *(void *)unint64_t v78 = 0;
    *((void *)v78 + 1) = 0;
    *((void *)v78 + 2) = v80;
    const void *v77 = (uint64_t *)v78;
    uint64_t v81 = **((void **)this + 13);
    uint64_t v82 = (uint64_t *)v78;
    if (v81)
    {
      *((void *)this + 13) = v81;
      uint64_t v82 = *v77;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 14), v82);
    ++*((void *)this + 15);
  }
  uint64_t v4 = *((_DWORD *)v78 + 8) | v4;
  if ((a2 & 0x1000) != 0) {
    goto LABEL_137;
  }
LABEL_36:
  if (v4) {
    return v4;
  }
LABEL_148:
  uint64_t v91 = (uint64_t **)((char *)this + 112);
  unint64_t v90 = (char *)*((void *)this + 14);
  if (v90)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v92 = v90;
        unsigned int v93 = *((_DWORD *)v90 + 7);
        if (v93 < 2) {
          break;
        }
        unint64_t v90 = *(char **)v92;
        uint64_t v91 = (uint64_t **)v92;
        if (!*(void *)v92) {
          goto LABEL_155;
        }
      }
      if (v93) {
        break;
      }
      unint64_t v90 = (char *)*((void *)v92 + 1);
      if (!v90)
      {
        uint64_t v91 = (uint64_t **)(v92 + 8);
        goto LABEL_155;
      }
    }
  }
  else
  {
    unint64_t v92 = (char *)this + 112;
LABEL_155:
    long long v94 = v92;
    unint64_t v92 = (char *)operator new(0x28uLL);
    *(void *)(v92 + 28) = 1;
    *(void *)unint64_t v92 = 0;
    *((void *)v92 + 1) = 0;
    *((void *)v92 + 2) = v94;
    *uint64_t v91 = (uint64_t *)v92;
    uint64_t v95 = **((void **)this + 13);
    long long v96 = (uint64_t *)v92;
    if (v95)
    {
      *((void *)this + 13) = v95;
      long long v96 = *v91;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 14), v96);
    ++*((void *)this + 15);
  }
  return *((unsigned int *)v92 + 8);
}

uint64_t antenna::ARICommandDriver::sendAccessoryReportRF_sync(uint64_t a1, uint64_t a2)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  long long __p = (void *)0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  _OWORD v30[2] = v4;
  v30[3] = v4;
  v30[0] = v4;
  v30[1] = v4;
  AriSdk::ARI_CsiIceAccessoryStateReq_SDK::ARI_CsiIceAccessoryStateReq_SDK((AriSdk::ARI_CsiIceAccessoryStateReq_SDK *)v30);
  int v5 = *(_DWORD *)(a1 + 200);
  if ((v5 & 0x7FFFFFFF) != 0) {
    unsigned int v6 = v5 | 0x80000000;
  }
  else {
    unsigned int v6 = 0;
  }
  *(_DWORD *)(a1 + 200) = v6;
  size_t v7 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v6;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = v6;
    _os_log_impl(&dword_235DB9000, v7, OS_LOG_TYPE_DEFAULT, "#I fAccessory for RF: 0x%08x(%d)\n", buf, 0xEu);
  }
  unsigned int v8 = operator new(4uLL);
  *unsigned int v8 = *(_DWORD *)(a1 + 200);
  long long v9 = __p;
  long long __p = v8;
  if (v9) {
    operator delete(v9);
  }
  uint64_t v10 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v10 = _Block_copy(v10);
  }
  xpc_object_t v11 = *(NSObject **)(a2 + 8);
  aBlocunint64_t k = v10;
  xpc_object_t object = v11;
  if (v11) {
    dispatch_retain(v11);
  }
  int v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12 || (uint64_t v13 = *(void *)(a1 + 72), (v14 = std::__shared_weak_count::lock(v12)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  unsigned int v15 = v14;
  p_shared_weak_owners = &v14->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v15);
  }
  uint64_t v17 = *(void *)(a1 + 184);
  uint64_t v32 = a1;
  uint64_t v33 = v13;
  int v34 = v15;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  int v35 = -184451072;
  if (!aBlock)
  {
    uint64_t v18 = 0;
    unint64_t v19 = object;
    int v36 = 0;
    dispatch_object_t v37 = object;
    if (!object) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  uint64_t v18 = _Block_copy(aBlock);
  unint64_t v19 = object;
  int v36 = v18;
  dispatch_object_t v37 = object;
  if (object) {
LABEL_18:
  }
    dispatch_retain(v19);
LABEL_19:
  unint64_t v20 = (std::__shared_weak_count *)operator new(0x48uLL);
  v20->__shared_owners_ = 0;
  p_uint64_t shared_owners = &v20->__shared_owners_;
  v20->__shared_weak_owners_ = 0;
  v20->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93E110;
  v20[1].__vftable = (std::__shared_weak_count_vtbl *)a1;
  v20[1].__shared_owners_ = v13;
  v20[1].__shared_weak_owners_ = (uint64_t)v15;
  uint64_t v33 = 0;
  int v34 = 0;
  LODWORD(v20[2].__vftable) = -184451072;
  v20[2].__shared_owners_ = (uint64_t)v18;
  v20[2].__shared_weak_owners_ = (uint64_t)v19;
  int v36 = 0;
  dispatch_object_t v37 = 0;
  *(void *)long long buf = MEMORY[0x263EF8330];
  *(void *)&uint8_t buf[8] = 1174405120;
  *(void *)&long long v45 = ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk33ARI_CsiIceAccessoryStateRspCb_SDKENS5_31ARI_CsiIceAccessoryStateReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  *((void *)&v45 + 1) = &__block_descriptor_tmp_58;
  unint64_t v46 = (unint64_t)&v20[1];
  uint64_t v47 = v20;
  atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v39 = MEMORY[0x263EF8330];
  uint64_t v40 = 0x40000000;
  uint64_t v41 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_5;
  long long v42 = &unk_264C7DC50;
  unint64_t v43 = buf;
  uint64_t v22 = _Block_copy(&v39);
  unsigned int v23 = v47;
  if (!v47 || atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
  std::__shared_weak_count::__release_weak(v23);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_22:
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
LABEL_23:
  *(void *)&long long v24 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v24 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)long long buf = v24;
  long long v45 = v24;
  unint64_t v46 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v25 = *(std::__shared_weak_count **)(v17 + 16);
  uint64_t v39 = *(void *)(v17 + 8);
  if (!v25)
  {
    uint64_t v40 = 0;
LABEL_47:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v40 = (uint64_t)std::__shared_weak_count::lock(v25);
  if (!v40) {
    goto LABEL_47;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  long long v26 = (std::__shared_weak_count *)v40;
  if (v40 && !atomic_fetch_add((atomic_ullong *volatile)(v40 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  long long v38 = v22;
  ice::SendMsgBaseProxy::callback();
  if (v38) {
    _Block_release(v38);
  }
  MEMORY[0x237DF50B0](buf);
  if (v37) {
    dispatch_release(v37);
  }
  if (v36) {
    _Block_release(v36);
  }
  if (v34) {
    std::__shared_weak_count::__release_weak(v34);
  }
  std::__shared_weak_count::__release_weak(v15);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  return MEMORY[0x237DF6040](v30);
}

void sub_235E028F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *aBlock,char a28)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_235E029AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t antenna::ARICommandDriver::sendAccessoryReportARTD_sync(uint64_t a1, uint64_t a2)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  long long __p = (void *)0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  _OWORD v30[2] = v4;
  v30[3] = v4;
  v30[0] = v4;
  v30[1] = v4;
  AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK::ARI_CsiIceAccessoryStateArtdReq_SDK((AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK *)v30);
  int v5 = *(_DWORD *)(a1 + 204);
  if ((v5 & 0x7FFFFFFF) != 0) {
    unsigned int v6 = v5 | 0x80000000;
  }
  else {
    unsigned int v6 = 0;
  }
  *(_DWORD *)(a1 + 204) = v6;
  size_t v7 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v6;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = v6;
    _os_log_impl(&dword_235DB9000, v7, OS_LOG_TYPE_DEFAULT, "#I fAccessory for ARTD: 0x%08x(%d)\n", buf, 0xEu);
  }
  unsigned int v8 = operator new(4uLL);
  *unsigned int v8 = *(_DWORD *)(a1 + 204);
  long long v9 = __p;
  long long __p = v8;
  if (v9) {
    operator delete(v9);
  }
  uint64_t v10 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v10 = _Block_copy(v10);
  }
  xpc_object_t v11 = *(NSObject **)(a2 + 8);
  aBlocunint64_t k = v10;
  xpc_object_t object = v11;
  if (v11) {
    dispatch_retain(v11);
  }
  int v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12 || (uint64_t v13 = *(void *)(a1 + 72), (v14 = std::__shared_weak_count::lock(v12)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  unsigned int v15 = v14;
  p_shared_weak_owners = &v14->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v15);
  }
  uint64_t v17 = *(void *)(a1 + 184);
  uint64_t v32 = a1;
  uint64_t v33 = v13;
  int v34 = v15;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  int v35 = -183697408;
  if (!aBlock)
  {
    uint64_t v18 = 0;
    unint64_t v19 = object;
    int v36 = 0;
    dispatch_object_t v37 = object;
    if (!object) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  uint64_t v18 = _Block_copy(aBlock);
  unint64_t v19 = object;
  int v36 = v18;
  dispatch_object_t v37 = object;
  if (object) {
LABEL_18:
  }
    dispatch_retain(v19);
LABEL_19:
  unint64_t v20 = (std::__shared_weak_count *)operator new(0x48uLL);
  v20->__shared_owners_ = 0;
  p_uint64_t shared_owners = &v20->__shared_owners_;
  v20->__shared_weak_owners_ = 0;
  v20->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93E190;
  v20[1].__vftable = (std::__shared_weak_count_vtbl *)a1;
  v20[1].__shared_owners_ = v13;
  v20[1].__shared_weak_owners_ = (uint64_t)v15;
  uint64_t v33 = 0;
  int v34 = 0;
  LODWORD(v20[2].__vftable) = -183697408;
  v20[2].__shared_owners_ = (uint64_t)v18;
  v20[2].__shared_weak_owners_ = (uint64_t)v19;
  int v36 = 0;
  dispatch_object_t v37 = 0;
  *(void *)long long buf = MEMORY[0x263EF8330];
  *(void *)&uint8_t buf[8] = 1174405120;
  *(void *)&long long v45 = ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk37ARI_CsiIceAccessoryStateArtdRspCb_SDKENS5_35ARI_CsiIceAccessoryStateArtdReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  *((void *)&v45 + 1) = &__block_descriptor_tmp_61_0;
  unint64_t v46 = (unint64_t)&v20[1];
  uint64_t v47 = v20;
  atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v39 = MEMORY[0x263EF8330];
  uint64_t v40 = 0x40000000;
  uint64_t v41 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_5;
  long long v42 = &unk_264C7DC50;
  unint64_t v43 = buf;
  uint64_t v22 = _Block_copy(&v39);
  unsigned int v23 = v47;
  if (!v47 || atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
  std::__shared_weak_count::__release_weak(v23);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_22:
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
LABEL_23:
  *(void *)&long long v24 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v24 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)long long buf = v24;
  long long v45 = v24;
  unint64_t v46 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v25 = *(std::__shared_weak_count **)(v17 + 16);
  uint64_t v39 = *(void *)(v17 + 8);
  if (!v25)
  {
    uint64_t v40 = 0;
LABEL_47:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v40 = (uint64_t)std::__shared_weak_count::lock(v25);
  if (!v40) {
    goto LABEL_47;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  long long v26 = (std::__shared_weak_count *)v40;
  if (v40 && !atomic_fetch_add((atomic_ullong *volatile)(v40 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  long long v38 = v22;
  ice::SendMsgBaseProxy::callback();
  if (v38) {
    _Block_release(v38);
  }
  MEMORY[0x237DF50B0](buf);
  if (v37) {
    dispatch_release(v37);
  }
  if (v36) {
    _Block_release(v36);
  }
  if (v34) {
    std::__shared_weak_count::__release_weak(v34);
  }
  std::__shared_weak_count::__release_weak(v15);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  return MEMORY[0x237DF6680](v30);
}

void sub_235E02E50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *aBlock,char a28)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_235E02F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void antenna::ARICommandDriver::e75AccessoryStatusRF_sync(antenna::ARICommandDriver *a1, xpc_object_t *a2, uint64_t a3)
{
  unsigned int v6 = (const char *)*MEMORY[0x263F8B9C0];
  if (!xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F8B9C0])) {
    return;
  }
  xpc_object_t value = xpc_dictionary_get_value(*a2, v6);
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  __int16 v8 = xpc::dyn_cast_or_default();
  xpc_release(object);
  int v9 = *((_DWORD *)a1 + 50);
  if (v8)
  {
    *((_DWORD *)a1 + 50) = v9 | 2;
    uint64_t v10 = (const char *)*MEMORY[0x263F8B990];
    if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F8B990]))
    {
      *((_DWORD *)a1 + 50) &= 0x8000000F;
      xpc_object_t v11 = xpc_dictionary_get_value(*a2, v10);
      xpc_object_t object = v11;
      if (v11) {
        xpc_retain(v11);
      }
      else {
        xpc_object_t object = xpc_null_create();
      }
      __int16 v12 = xpc::dyn_cast_or_default();
      *((_DWORD *)a1 + 50) |= antenna::ARICommandDriver::getE75AccessoryType(a1, v12);
      xpc_release(object);
    }
  }
  else
  {
    *((_DWORD *)a1 + 50) = v9 & 0x8000000D;
  }
  if (!*(void *)a3)
  {
    uint64_t v13 = 0;
    xpc_object_t v14 = *(NSObject **)(a3 + 8);
    unsigned int v15 = 0;
    uint64_t v16 = v14;
    if (!v14) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  uint64_t v13 = _Block_copy(*(const void **)a3);
  xpc_object_t v14 = *(NSObject **)(a3 + 8);
  unsigned int v15 = v13;
  uint64_t v16 = v14;
  if (v14) {
LABEL_14:
  }
    dispatch_retain(v14);
LABEL_15:
  antenna::ARICommandDriver::sendAccessoryReportRF_sync((uint64_t)a1, (uint64_t)&v15);
  if (v14) {
    dispatch_release(v14);
  }
  if (v13) {
    _Block_release(v13);
  }
}

void sub_235E030C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object)
{
}

void antenna::ARICommandDriver::e75AccessoryStatusARTD_sync(antenna::ARICommandDriver *a1, xpc_object_t *a2, uint64_t a3)
{
  unsigned int v6 = (const char *)*MEMORY[0x263F8B9C0];
  if (!xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F8B9C0])) {
    return;
  }
  xpc_object_t value = xpc_dictionary_get_value(*a2, v6);
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  __int16 v8 = xpc::dyn_cast_or_default();
  xpc_release(object);
  int v9 = *((_DWORD *)a1 + 51);
  if (v8)
  {
    *((_DWORD *)a1 + 51) = v9 | 2;
    uint64_t v10 = (const char *)*MEMORY[0x263F8B990];
    if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F8B990]))
    {
      *((_DWORD *)a1 + 51) &= 0x8000000F;
      xpc_object_t v11 = xpc_dictionary_get_value(*a2, v10);
      xpc_object_t object = v11;
      if (v11) {
        xpc_retain(v11);
      }
      else {
        xpc_object_t object = xpc_null_create();
      }
      __int16 v12 = xpc::dyn_cast_or_default();
      *((_DWORD *)a1 + 51) |= antenna::ARICommandDriver::getE75AccessoryType(a1, v12);
      xpc_release(object);
    }
  }
  else
  {
    *((_DWORD *)a1 + 51) = v9 & 0x8000000D;
  }
  if (!*(void *)a3)
  {
    uint64_t v13 = 0;
    xpc_object_t v14 = *(NSObject **)(a3 + 8);
    unsigned int v15 = 0;
    uint64_t v16 = v14;
    if (!v14) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  uint64_t v13 = _Block_copy(*(const void **)a3);
  xpc_object_t v14 = *(NSObject **)(a3 + 8);
  unsigned int v15 = v13;
  uint64_t v16 = v14;
  if (v14) {
LABEL_14:
  }
    dispatch_retain(v14);
LABEL_15:
  antenna::ARICommandDriver::sendAccessoryReportARTD_sync((uint64_t)a1, (uint64_t)&v15);
  if (v14) {
    dispatch_release(v14);
  }
  if (v13) {
    _Block_release(v13);
  }
}

void sub_235E032A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object)
{
}

void antenna::ARICommandDriver::videoAccessoryStatus_sync(int8x8_t *a1, xpc_object_t *a2, uint64_t a3)
{
  unsigned int v6 = (const char *)*MEMORY[0x263F8B9F0];
  if (!xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F8B9F0])) {
    return;
  }
  xpc_object_t value = xpc_dictionary_get_value(*a2, v6);
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  int v8 = xpc::dyn_cast_or_default();
  xpc_release(object);
  if (v8) {
    unsigned int v9 = 4;
  }
  else {
    unsigned int v9 = 0;
  }
  a1[25] = vorr_s8((int8x8_t)(*(void *)&a1[25] & 0xFFFFFFFBFFFFFFFBLL), (int8x8_t)vdup_n_s32(v9));
  if (*(void *)a3)
  {
    uint64_t v10 = _Block_copy(*(const void **)a3);
    xpc_object_t v11 = *(NSObject **)(a3 + 8);
    uint64_t v16 = v10;
    uint64_t v17 = v11;
    if (!v11) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  uint64_t v10 = 0;
  xpc_object_t v11 = *(NSObject **)(a3 + 8);
  uint64_t v16 = 0;
  uint64_t v17 = v11;
  if (v11) {
LABEL_10:
  }
    dispatch_retain(v11);
LABEL_11:
  antenna::ARICommandDriver::sendAccessoryReportRF_sync((uint64_t)a1, (uint64_t)&v16);
  if (v11) {
    dispatch_release(v11);
  }
  if (v10) {
    _Block_release(v10);
  }
  if (!*(void *)a3)
  {
    __int16 v12 = 0;
    uint64_t v13 = *(NSObject **)(a3 + 8);
    xpc_object_t v14 = 0;
    unsigned int v15 = v13;
    if (!v13) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  __int16 v12 = _Block_copy(*(const void **)a3);
  uint64_t v13 = *(NSObject **)(a3 + 8);
  xpc_object_t v14 = v12;
  unsigned int v15 = v13;
  if (v13) {
LABEL_17:
  }
    dispatch_retain(v13);
LABEL_18:
  antenna::ARICommandDriver::sendAccessoryReportARTD_sync((uint64_t)a1, (uint64_t)&v14);
  if (v13) {
    dispatch_release(v13);
  }
  if (v12) {
    _Block_release(v12);
  }
}

void sub_235E03464(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  dispatch::callback<void({block_pointer})(BOOL,xpc::object)>::~callback((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_235E03488(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t object)
{
}

void antenna::ARICommandDriver::wiredPortNotification_sync(int8x8_t *a1, xpc_object_t *a2, uint64_t a3)
{
  unsigned int v6 = (const char *)*MEMORY[0x263F8B938];
  if (!xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F8B938])) {
    return;
  }
  xpc_object_t value = xpc_dictionary_get_value(*a2, v6);
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  int v8 = xpc::dyn_cast_or_default();
  xpc_release(object);
  if (v8) {
    unsigned int v9 = 8;
  }
  else {
    unsigned int v9 = 0;
  }
  a1[25] = vorr_s8((int8x8_t)(*(void *)&a1[25] & 0xFFFFFFF7FFFFFFF7), (int8x8_t)vdup_n_s32(v9));
  if (*(void *)a3)
  {
    uint64_t v10 = _Block_copy(*(const void **)a3);
    xpc_object_t v11 = *(NSObject **)(a3 + 8);
    uint64_t v16 = v10;
    uint64_t v17 = v11;
    if (!v11) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  uint64_t v10 = 0;
  xpc_object_t v11 = *(NSObject **)(a3 + 8);
  uint64_t v16 = 0;
  uint64_t v17 = v11;
  if (v11) {
LABEL_10:
  }
    dispatch_retain(v11);
LABEL_11:
  antenna::ARICommandDriver::sendAccessoryReportRF_sync((uint64_t)a1, (uint64_t)&v16);
  if (v11) {
    dispatch_release(v11);
  }
  if (v10) {
    _Block_release(v10);
  }
  if (!*(void *)a3)
  {
    __int16 v12 = 0;
    uint64_t v13 = *(NSObject **)(a3 + 8);
    xpc_object_t v14 = 0;
    unsigned int v15 = v13;
    if (!v13) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  __int16 v12 = _Block_copy(*(const void **)a3);
  uint64_t v13 = *(NSObject **)(a3 + 8);
  xpc_object_t v14 = v12;
  unsigned int v15 = v13;
  if (v13) {
LABEL_17:
  }
    dispatch_retain(v13);
LABEL_18:
  antenna::ARICommandDriver::sendAccessoryReportARTD_sync((uint64_t)a1, (uint64_t)&v14);
  if (v13) {
    dispatch_release(v13);
  }
  if (v12) {
    _Block_release(v12);
  }
}

void sub_235E03618(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  dispatch::callback<void({block_pointer})(BOOL,xpc::object)>::~callback((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_235E0363C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t object)
{
}

void antenna::ARICommandDriver::speakerState_sync(std::__shared_weak_count_vtbl *a1, xpc_object_t *a2, uint64_t a3)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  unsigned int v6 = (const char *)*MEMORY[0x263F8B970];
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F8B970]))
  {
    long long __p = (void *)0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)unsigned int v44 = v7;
    long long v45 = v7;
    *(_OWORD *)blocunint64_t k = v7;
    *(_OWORD *)&block[16] = v7;
    AriSdk::ARI_CsiIceSpeakerStateReq_SDK::ARI_CsiIceSpeakerStateReq_SDK((AriSdk::ARI_CsiIceSpeakerStateReq_SDK *)block);
    xpc_object_t value = xpc_dictionary_get_value(*a2, v6);
    *(void *)long long buf = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      *(void *)long long buf = xpc_null_create();
    }
    int v12 = xpc::dyn_cast_or_default();
    xpc_release(*(xpc_object_t *)buf);
    uint64_t v13 = operator new(4uLL);
    *uint64_t v13 = v12;
    xpc_object_t v14 = __p;
    long long __p = v13;
    if (v14) {
      operator delete(v14);
    }
    unsigned int v15 = *(void **)a3;
    if (*(void *)a3) {
      unsigned int v15 = _Block_copy(v15);
    }
    uint64_t v16 = *(NSObject **)(a3 + 8);
    aBlocunint64_t k = v15;
    xpc_object_t object = v16;
    if (v16) {
      dispatch_retain(v16);
    }
    uint64_t v17 = (std::__shared_weak_count *)a1[2].~__shared_weak_count;
    if (!v17
      || (on_zero_shared_weak = (uint64_t)a1[1].__on_zero_shared_weak, (unint64_t v19 = std::__shared_weak_count::lock(v17)) == 0))
    {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    unint64_t v20 = v19;
    p_shared_weak_owners = &v19->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v20);
    }
    get_deleter = a1[4].__get_deleter;
    uint64_t v47 = a1;
    uint64_t v48 = on_zero_shared_weak;
    unsigned int v49 = v20;
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    int v50 = -183664640;
    if (aBlock)
    {
      unsigned int v23 = _Block_copy(aBlock);
      long long v24 = object;
      unsigned int v51 = v23;
      dispatch_object_t v52 = object;
      if (!object)
      {
LABEL_21:
        uint64_t v25 = (std::__shared_weak_count *)operator new(0x48uLL);
        v25->__shared_owners_ = 0;
        p_uint64_t shared_owners = &v25->__shared_owners_;
        v25->__shared_weak_owners_ = 0;
        v25->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93E210;
        v25[1].__vftable = a1;
        v25[1].__shared_owners_ = on_zero_shared_weak;
        v25[1].__shared_weak_owners_ = (uint64_t)v20;
        uint64_t v48 = 0;
        unsigned int v49 = 0;
        LODWORD(v25[2].__vftable) = -183664640;
        v25[2].__shared_owners_ = (uint64_t)v23;
        v25[2].__shared_weak_owners_ = (uint64_t)v24;
        unsigned int v51 = 0;
        dispatch_object_t v52 = 0;
        *(void *)long long buf = MEMORY[0x263EF8330];
        *(void *)&uint8_t buf[8] = 1174405120;
        *(void *)&long long v60 = ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk31ARI_CsiIceSpeakerStateRspCb_SDKENS5_29ARI_CsiIceSpeakerStateReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
        *((void *)&v60 + 1) = &__block_descriptor_tmp_64_1;
        unint64_t v61 = (unint64_t)&v25[1];
        int v62 = v25;
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v54 = MEMORY[0x263EF8330];
        uint64_t v55 = 0x40000000;
        long long v56 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_5;
        long long v57 = &unk_264C7DC50;
        unsigned int v58 = buf;
        unsigned int v27 = _Block_copy(&v54);
        xpc_object_t v28 = v62;
        if (v62 && !atomic_fetch_add(&v62->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
          if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
          {
LABEL_25:
            *(void *)&long long v29 = 0xAAAAAAAAAAAAAAAALL;
            *((void *)&v29 + 1) = 0xAAAAAAAAAAAAAAAALL;
            *(_OWORD *)long long buf = v29;
            long long v60 = v29;
            unint64_t v61 = 0xAAAAAAAAAAAAAAAALL;
            unsigned int v30 = (std::__shared_weak_count *)*((void *)get_deleter + 2);
            uint64_t v54 = *((void *)get_deleter + 1);
            if (v30)
            {
              uint64_t v55 = (uint64_t)std::__shared_weak_count::lock(v30);
              if (v55)
              {
                ice::SendMsgBaseProxy::SendMsgBaseProxy();
                unsigned __int16 v31 = (std::__shared_weak_count *)v55;
                if (v55 && !atomic_fetch_add((atomic_ullong *volatile)(v55 + 8), 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
                  std::__shared_weak_count::__release_weak(v31);
                }
                uint64_t v53 = v27;
                ice::SendMsgBaseProxy::callback();
                if (v53) {
                  _Block_release(v53);
                }
                MEMORY[0x237DF50B0](buf);
                if (v52) {
                  dispatch_release(v52);
                }
                if (v51) {
                  _Block_release(v51);
                }
                if (v49) {
                  std::__shared_weak_count::__release_weak(v49);
                }
                std::__shared_weak_count::__release_weak(v20);
                if (object) {
                  dispatch_release(object);
                }
                if (aBlock) {
                  _Block_release(aBlock);
                }
                MEMORY[0x237DF5D30](block);
                return;
              }
            }
            else
            {
              uint64_t v55 = 0;
            }
            std::__throw_bad_weak_ptr[abi:ne180100]();
          }
        }
        else if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
        {
          goto LABEL_25;
        }
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
        goto LABEL_25;
      }
    }
    else
    {
      unsigned int v23 = 0;
      long long v24 = object;
      unsigned int v51 = 0;
      dispatch_object_t v52 = object;
      if (!object) {
        goto LABEL_21;
      }
    }
    dispatch_retain(v24);
    goto LABEL_21;
  }
  unsigned int v9 = a1[1].~__shared_weak_count;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    int v34 = (char *)MEMORY[0x237DF7690](*a2);
    memset(block, 170, 24);
    size_t v35 = strlen(v34);
    if (v35 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v36 = v35;
    if (v35 >= 0x17)
    {
      uint64_t v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v35 | 7) != 0x17) {
        uint64_t v38 = v35 | 7;
      }
      uint64_t v39 = v38 + 1;
      dispatch_object_t v37 = operator new(v38 + 1);
      *(void *)&block[8] = v36;
      *(void *)&block[16] = v39 | 0x8000000000000000;
      *(void *)blocunint64_t k = v37;
    }
    else
    {
      block[23] = v35;
      dispatch_object_t v37 = block;
      if (!v35) {
        goto LABEL_66;
      }
    }
    memcpy(v37, v34, v36);
LABEL_66:
    v37[v36] = 0;
    free(v34);
    uint64_t v40 = block;
    if (block[23] < 0) {
      uint64_t v40 = *(unsigned char **)block;
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v40;
    _os_log_error_impl(&dword_235DB9000, v9, OS_LOG_TYPE_ERROR, "Missing mandatory TLV. args: %s", buf, 0xCu);
    if ((block[23] & 0x80000000) != 0) {
      operator delete(*(void **)block);
    }
  }
  xpc_object_t v10 = xpc_null_create();
  if (*(void *)a3) {
    xpc_object_t v11 = _Block_copy(*(const void **)a3);
  }
  else {
    xpc_object_t v11 = 0;
  }
  uint64_t v32 = *(NSObject **)(a3 + 8);
  *(void *)blocunint64_t k = MEMORY[0x263EF8330];
  *(void *)&block[8] = 1174405120;
  *(void *)&block[16] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  *(void *)&block[24] = &__block_descriptor_tmp_42_0;
  if (!v11)
  {
    LOBYTE(v45) = 0;
    v44[0] = 0;
    v44[1] = v10;
    if (v10) {
      goto LABEL_50;
    }
LABEL_52:
    v44[1] = xpc_null_create();
    goto LABEL_53;
  }
  uint64_t v33 = _Block_copy(v11);
  LOBYTE(v45) = 0;
  v44[0] = v33;
  v44[1] = v10;
  if (!v10) {
    goto LABEL_52;
  }
LABEL_50:
  xpc_retain(v10);
LABEL_53:
  dispatch_async(v32, block);
  xpc_release(v44[1]);
  v44[1] = 0;
  if (v44[0]) {
    _Block_release(v44[0]);
  }
  if (v11) {
    _Block_release(v11);
  }
  xpc_release(v10);
}

void sub_235E03CBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *aBlock,char a28)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void antenna::ARICommandDriver::handDetectionState_sync(std::__shared_weak_count_vtbl *a1, xpc_object_t *a2, uint64_t a3)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  unsigned int v6 = (const char *)*MEMORY[0x263F8B9C8];
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F8B9C8]))
  {
    long long __p = (void *)0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)unsigned int v44 = v7;
    long long v45 = v7;
    *(_OWORD *)blocunint64_t k = v7;
    *(_OWORD *)&block[16] = v7;
    AriSdk::ARI_CsiIceGripStateReq_SDK::ARI_CsiIceGripStateReq_SDK((AriSdk::ARI_CsiIceGripStateReq_SDK *)block);
    xpc_object_t value = xpc_dictionary_get_value(*a2, v6);
    *(void *)long long buf = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      *(void *)long long buf = xpc_null_create();
    }
    unsigned __int8 v12 = xpc::dyn_cast_or_default();
    xpc_release(*(xpc_object_t *)buf);
    uint64_t v13 = operator new(4uLL);
    *uint64_t v13 = v12;
    xpc_object_t v14 = __p;
    long long __p = v13;
    if (v14) {
      operator delete(v14);
    }
    unsigned int v15 = *(void **)a3;
    if (*(void *)a3) {
      unsigned int v15 = _Block_copy(v15);
    }
    uint64_t v16 = *(NSObject **)(a3 + 8);
    aBlocunint64_t k = v15;
    xpc_object_t object = v16;
    if (v16) {
      dispatch_retain(v16);
    }
    uint64_t v17 = (std::__shared_weak_count *)a1[2].~__shared_weak_count;
    if (!v17
      || (on_zero_shared_weak = (uint64_t)a1[1].__on_zero_shared_weak, (unint64_t v19 = std::__shared_weak_count::lock(v17)) == 0))
    {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    unint64_t v20 = v19;
    p_shared_weak_owners = &v19->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v20);
    }
    get_deleter = a1[4].__get_deleter;
    uint64_t v47 = a1;
    uint64_t v48 = on_zero_shared_weak;
    unsigned int v49 = v20;
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    int v50 = -183599104;
    if (aBlock)
    {
      unsigned int v23 = _Block_copy(aBlock);
      long long v24 = object;
      unsigned int v51 = v23;
      dispatch_object_t v52 = object;
      if (!object)
      {
LABEL_21:
        uint64_t v25 = (std::__shared_weak_count *)operator new(0x48uLL);
        v25->__shared_owners_ = 0;
        p_uint64_t shared_owners = &v25->__shared_owners_;
        v25->__shared_weak_owners_ = 0;
        v25->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93E290;
        v25[1].__vftable = a1;
        v25[1].__shared_owners_ = on_zero_shared_weak;
        v25[1].__shared_weak_owners_ = (uint64_t)v20;
        uint64_t v48 = 0;
        unsigned int v49 = 0;
        LODWORD(v25[2].__vftable) = -183599104;
        v25[2].__shared_owners_ = (uint64_t)v23;
        v25[2].__shared_weak_owners_ = (uint64_t)v24;
        unsigned int v51 = 0;
        dispatch_object_t v52 = 0;
        *(void *)long long buf = MEMORY[0x263EF8330];
        *(void *)&uint8_t buf[8] = 1174405120;
        *(void *)&long long v60 = ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk28ARI_CsiIceGripStateRspCb_SDKENS5_26ARI_CsiIceGripStateReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
        *((void *)&v60 + 1) = &__block_descriptor_tmp_67_0;
        unint64_t v61 = (unint64_t)&v25[1];
        int v62 = v25;
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v54 = MEMORY[0x263EF8330];
        uint64_t v55 = 0x40000000;
        long long v56 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_5;
        long long v57 = &unk_264C7DC50;
        unsigned int v58 = buf;
        unsigned int v27 = _Block_copy(&v54);
        xpc_object_t v28 = v62;
        if (v62 && !atomic_fetch_add(&v62->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
          if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
          {
LABEL_25:
            *(void *)&long long v29 = 0xAAAAAAAAAAAAAAAALL;
            *((void *)&v29 + 1) = 0xAAAAAAAAAAAAAAAALL;
            *(_OWORD *)long long buf = v29;
            long long v60 = v29;
            unint64_t v61 = 0xAAAAAAAAAAAAAAAALL;
            unsigned int v30 = (std::__shared_weak_count *)*((void *)get_deleter + 2);
            uint64_t v54 = *((void *)get_deleter + 1);
            if (v30)
            {
              uint64_t v55 = (uint64_t)std::__shared_weak_count::lock(v30);
              if (v55)
              {
                ice::SendMsgBaseProxy::SendMsgBaseProxy();
                unsigned __int16 v31 = (std::__shared_weak_count *)v55;
                if (v55 && !atomic_fetch_add((atomic_ullong *volatile)(v55 + 8), 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
                  std::__shared_weak_count::__release_weak(v31);
                }
                uint64_t v53 = v27;
                ice::SendMsgBaseProxy::callback();
                if (v53) {
                  _Block_release(v53);
                }
                MEMORY[0x237DF50B0](buf);
                if (v52) {
                  dispatch_release(v52);
                }
                if (v51) {
                  _Block_release(v51);
                }
                if (v49) {
                  std::__shared_weak_count::__release_weak(v49);
                }
                std::__shared_weak_count::__release_weak(v20);
                if (object) {
                  dispatch_release(object);
                }
                if (aBlock) {
                  _Block_release(aBlock);
                }
                MEMORY[0x237DF5750](block);
                return;
              }
            }
            else
            {
              uint64_t v55 = 0;
            }
            std::__throw_bad_weak_ptr[abi:ne180100]();
          }
        }
        else if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
        {
          goto LABEL_25;
        }
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
        goto LABEL_25;
      }
    }
    else
    {
      unsigned int v23 = 0;
      long long v24 = object;
      unsigned int v51 = 0;
      dispatch_object_t v52 = object;
      if (!object) {
        goto LABEL_21;
      }
    }
    dispatch_retain(v24);
    goto LABEL_21;
  }
  unsigned int v9 = a1[1].~__shared_weak_count;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    int v34 = (char *)MEMORY[0x237DF7690](*a2);
    memset(block, 170, 24);
    size_t v35 = strlen(v34);
    if (v35 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v36 = v35;
    if (v35 >= 0x17)
    {
      uint64_t v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v35 | 7) != 0x17) {
        uint64_t v38 = v35 | 7;
      }
      uint64_t v39 = v38 + 1;
      dispatch_object_t v37 = operator new(v38 + 1);
      *(void *)&block[8] = v36;
      *(void *)&block[16] = v39 | 0x8000000000000000;
      *(void *)blocunint64_t k = v37;
    }
    else
    {
      block[23] = v35;
      dispatch_object_t v37 = block;
      if (!v35) {
        goto LABEL_66;
      }
    }
    memcpy(v37, v34, v36);
LABEL_66:
    v37[v36] = 0;
    free(v34);
    uint64_t v40 = block;
    if (block[23] < 0) {
      uint64_t v40 = *(unsigned char **)block;
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v40;
    _os_log_error_impl(&dword_235DB9000, v9, OS_LOG_TYPE_ERROR, "Missing mandatory TLV. args: %s", buf, 0xCu);
    if ((block[23] & 0x80000000) != 0) {
      operator delete(*(void **)block);
    }
  }
  xpc_object_t v10 = xpc_null_create();
  if (*(void *)a3) {
    xpc_object_t v11 = _Block_copy(*(const void **)a3);
  }
  else {
    xpc_object_t v11 = 0;
  }
  uint64_t v32 = *(NSObject **)(a3 + 8);
  *(void *)blocunint64_t k = MEMORY[0x263EF8330];
  *(void *)&block[8] = 1174405120;
  *(void *)&block[16] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  *(void *)&block[24] = &__block_descriptor_tmp_42_0;
  if (!v11)
  {
    LOBYTE(v45) = 0;
    v44[0] = 0;
    v44[1] = v10;
    if (v10) {
      goto LABEL_50;
    }
LABEL_52:
    v44[1] = xpc_null_create();
    goto LABEL_53;
  }
  uint64_t v33 = _Block_copy(v11);
  LOBYTE(v45) = 0;
  v44[0] = v33;
  v44[1] = v10;
  if (!v10) {
    goto LABEL_52;
  }
LABEL_50:
  xpc_retain(v10);
LABEL_53:
  dispatch_async(v32, block);
  xpc_release(v44[1]);
  v44[1] = 0;
  if (v44[0]) {
    _Block_release(v44[0]);
  }
  if (v11) {
    _Block_release(v11);
  }
  xpc_release(v10);
}

void sub_235E04438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *aBlock,char a28)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void antenna::ARICommandDriver::powerSourceState_sync(std::__shared_weak_count_vtbl *a1, xpc_object_t *a2, uint64_t a3)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  unsigned int v6 = (const char *)*MEMORY[0x263F8B998];
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F8B998]))
  {
    long long __p = (void *)0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)unsigned int v44 = v7;
    long long v45 = v7;
    *(_OWORD *)blocunint64_t k = v7;
    *(_OWORD *)&block[16] = v7;
    AriSdk::ARI_CsiIcePowerSourceStateReq_SDK::ARI_CsiIcePowerSourceStateReq_SDK((AriSdk::ARI_CsiIcePowerSourceStateReq_SDK *)block);
    xpc_object_t value = xpc_dictionary_get_value(*a2, v6);
    *(void *)long long buf = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      *(void *)long long buf = xpc_null_create();
    }
    int v12 = xpc::dyn_cast_or_default();
    uint64_t v13 = operator new(4uLL);
    *uint64_t v13 = v12;
    xpc_object_t v14 = __p;
    long long __p = v13;
    if (v14) {
      operator delete(v14);
    }
    xpc_release(*(xpc_object_t *)buf);
    unsigned int v15 = *(void **)a3;
    if (*(void *)a3) {
      unsigned int v15 = _Block_copy(v15);
    }
    uint64_t v16 = *(NSObject **)(a3 + 8);
    aBlocunint64_t k = v15;
    xpc_object_t object = v16;
    if (v16) {
      dispatch_retain(v16);
    }
    uint64_t v17 = (std::__shared_weak_count *)a1[2].~__shared_weak_count;
    if (!v17
      || (on_zero_shared_weak = (uint64_t)a1[1].__on_zero_shared_weak, (unint64_t v19 = std::__shared_weak_count::lock(v17)) == 0))
    {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    unint64_t v20 = v19;
    p_shared_weak_owners = &v19->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v20);
    }
    get_deleter = a1[4].__get_deleter;
    uint64_t v47 = a1;
    uint64_t v48 = on_zero_shared_weak;
    unsigned int v49 = v20;
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    int v50 = -183533568;
    if (aBlock)
    {
      unsigned int v23 = _Block_copy(aBlock);
      long long v24 = object;
      unsigned int v51 = v23;
      dispatch_object_t v52 = object;
      if (!object)
      {
LABEL_21:
        uint64_t v25 = (std::__shared_weak_count *)operator new(0x48uLL);
        v25->__shared_owners_ = 0;
        p_uint64_t shared_owners = &v25->__shared_owners_;
        v25->__shared_weak_owners_ = 0;
        v25->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93E310;
        v25[1].__vftable = a1;
        v25[1].__shared_owners_ = on_zero_shared_weak;
        v25[1].__shared_weak_owners_ = (uint64_t)v20;
        uint64_t v48 = 0;
        unsigned int v49 = 0;
        LODWORD(v25[2].__vftable) = -183533568;
        v25[2].__shared_owners_ = (uint64_t)v23;
        v25[2].__shared_weak_owners_ = (uint64_t)v24;
        unsigned int v51 = 0;
        dispatch_object_t v52 = 0;
        *(void *)long long buf = MEMORY[0x263EF8330];
        *(void *)&uint8_t buf[8] = 1174405120;
        *(void *)&long long v60 = ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk35ARI_CsiIcePowerSourceStateRspCb_SDKENS5_33ARI_CsiIcePowerSourceStateReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
        *((void *)&v60 + 1) = &__block_descriptor_tmp_70;
        unint64_t v61 = (unint64_t)&v25[1];
        int v62 = v25;
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v54 = MEMORY[0x263EF8330];
        uint64_t v55 = 0x40000000;
        long long v56 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_5;
        long long v57 = &unk_264C7DC50;
        unsigned int v58 = buf;
        unsigned int v27 = _Block_copy(&v54);
        xpc_object_t v28 = v62;
        if (v62 && !atomic_fetch_add(&v62->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
          if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
          {
LABEL_25:
            *(void *)&long long v29 = 0xAAAAAAAAAAAAAAAALL;
            *((void *)&v29 + 1) = 0xAAAAAAAAAAAAAAAALL;
            *(_OWORD *)long long buf = v29;
            long long v60 = v29;
            unint64_t v61 = 0xAAAAAAAAAAAAAAAALL;
            unsigned int v30 = (std::__shared_weak_count *)*((void *)get_deleter + 2);
            uint64_t v54 = *((void *)get_deleter + 1);
            if (v30)
            {
              uint64_t v55 = (uint64_t)std::__shared_weak_count::lock(v30);
              if (v55)
              {
                ice::SendMsgBaseProxy::SendMsgBaseProxy();
                unsigned __int16 v31 = (std::__shared_weak_count *)v55;
                if (v55 && !atomic_fetch_add((atomic_ullong *volatile)(v55 + 8), 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
                  std::__shared_weak_count::__release_weak(v31);
                }
                uint64_t v53 = v27;
                ice::SendMsgBaseProxy::callback();
                if (v53) {
                  _Block_release(v53);
                }
                MEMORY[0x237DF50B0](buf);
                if (v52) {
                  dispatch_release(v52);
                }
                if (v51) {
                  _Block_release(v51);
                }
                if (v49) {
                  std::__shared_weak_count::__release_weak(v49);
                }
                std::__shared_weak_count::__release_weak(v20);
                if (object) {
                  dispatch_release(object);
                }
                if (aBlock) {
                  _Block_release(aBlock);
                }
                MEMORY[0x237DF64B0](block);
                return;
              }
            }
            else
            {
              uint64_t v55 = 0;
            }
            std::__throw_bad_weak_ptr[abi:ne180100]();
          }
        }
        else if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
        {
          goto LABEL_25;
        }
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
        goto LABEL_25;
      }
    }
    else
    {
      unsigned int v23 = 0;
      long long v24 = object;
      unsigned int v51 = 0;
      dispatch_object_t v52 = object;
      if (!object) {
        goto LABEL_21;
      }
    }
    dispatch_retain(v24);
    goto LABEL_21;
  }
  unsigned int v9 = a1[1].~__shared_weak_count;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    int v34 = (char *)MEMORY[0x237DF7690](*a2);
    memset(block, 170, 24);
    size_t v35 = strlen(v34);
    if (v35 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v36 = v35;
    if (v35 >= 0x17)
    {
      uint64_t v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v35 | 7) != 0x17) {
        uint64_t v38 = v35 | 7;
      }
      uint64_t v39 = v38 + 1;
      dispatch_object_t v37 = operator new(v38 + 1);
      *(void *)&block[8] = v36;
      *(void *)&block[16] = v39 | 0x8000000000000000;
      *(void *)blocunint64_t k = v37;
    }
    else
    {
      block[23] = v35;
      dispatch_object_t v37 = block;
      if (!v35) {
        goto LABEL_66;
      }
    }
    memcpy(v37, v34, v36);
LABEL_66:
    v37[v36] = 0;
    free(v34);
    uint64_t v40 = block;
    if (block[23] < 0) {
      uint64_t v40 = *(unsigned char **)block;
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v40;
    _os_log_error_impl(&dword_235DB9000, v9, OS_LOG_TYPE_ERROR, "Missing mandatory TLV. args: %s", buf, 0xCu);
    if ((block[23] & 0x80000000) != 0) {
      operator delete(*(void **)block);
    }
  }
  xpc_object_t v10 = xpc_null_create();
  if (*(void *)a3) {
    xpc_object_t v11 = _Block_copy(*(const void **)a3);
  }
  else {
    xpc_object_t v11 = 0;
  }
  uint64_t v32 = *(NSObject **)(a3 + 8);
  *(void *)blocunint64_t k = MEMORY[0x263EF8330];
  *(void *)&block[8] = 1174405120;
  *(void *)&block[16] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  *(void *)&block[24] = &__block_descriptor_tmp_42_0;
  if (!v11)
  {
    LOBYTE(v45) = 0;
    v44[0] = 0;
    v44[1] = v10;
    if (v10) {
      goto LABEL_50;
    }
LABEL_52:
    v44[1] = xpc_null_create();
    goto LABEL_53;
  }
  uint64_t v33 = _Block_copy(v11);
  LOBYTE(v45) = 0;
  v44[0] = v33;
  v44[1] = v10;
  if (!v10) {
    goto LABEL_52;
  }
LABEL_50:
  xpc_retain(v10);
LABEL_53:
  dispatch_async(v32, block);
  xpc_release(v44[1]);
  v44[1] = 0;
  if (v44[0]) {
    _Block_release(v44[0]);
  }
  if (v11) {
    _Block_release(v11);
  }
  xpc_release(v10);
}

void sub_235E04BB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *aBlock,char a28)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void antenna::ARICommandDriver::ppmEnable_sync(std::__shared_weak_count_vtbl *a1, xpc_object_t *a2, uint64_t a3)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  unsigned int v6 = (const char *)*MEMORY[0x263F8B930];
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F8B930]))
  {
    dispatch_object_t v52 = (void *)0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v50 = v7;
    *(_OWORD *)long long __p = v7;
    *(_OWORD *)&block[16] = v7;
    *(_OWORD *)unsigned int v49 = v7;
    *(_OWORD *)blocunint64_t k = v7;
    AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK::ARI_IBICpsConfigureCellularPowerReportReq_SDK((AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK *)block);
    xpc_object_t value = xpc_dictionary_get_value(*a2, v6);
    *(void *)long long buf = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      *(void *)long long buf = xpc_null_create();
    }
    int v12 = xpc::dyn_cast_or_default();
    xpc_release(*(xpc_object_t *)buf);
    uint64_t v13 = operator new(4uLL);
    *uint64_t v13 = v12;
    xpc_object_t v14 = __p[1];
    __p[1] = v13;
    if (v14) {
      operator delete(v14);
    }
    if (v12)
    {
      xpc_object_t v15 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F8B950]);
      *(void *)long long buf = v15;
      if (v15) {
        xpc_retain(v15);
      }
      else {
        *(void *)long long buf = xpc_null_create();
      }
      __int16 v16 = xpc::dyn_cast_or_default();
      xpc_release(*(xpc_object_t *)buf);
    }
    else
    {
      __int16 v16 = 0;
    }
    uint64_t v17 = operator new(2uLL);
    *uint64_t v17 = v16;
    uint64_t v18 = v52;
    dispatch_object_t v52 = v17;
    if (v18) {
      operator delete(v18);
    }
    unint64_t v19 = *(void **)a3;
    if (*(void *)a3) {
      unint64_t v19 = _Block_copy(v19);
    }
    unint64_t v20 = *(NSObject **)(a3 + 8);
    aBlocunint64_t k = v19;
    xpc_object_t object = v20;
    if (v20) {
      dispatch_retain(v20);
    }
    unint64_t v21 = (std::__shared_weak_count *)a1[2].~__shared_weak_count;
    if (!v21
      || (on_zero_shared_weak = (uint64_t)a1[1].__on_zero_shared_weak, (unsigned int v23 = std::__shared_weak_count::lock(v21)) == 0))
    {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    long long v24 = v23;
    p_shared_weak_owners = &v23->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v24);
    }
    get_deleter = a1[4].__get_deleter;
    uint64_t v53 = a1;
    uint64_t v54 = on_zero_shared_weak;
    uint64_t v55 = v24;
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    int v56 = 1023442944;
    if (aBlock)
    {
      unsigned int v27 = _Block_copy(aBlock);
      xpc_object_t v28 = object;
      long long v57 = v27;
      dispatch_object_t v58 = object;
      if (!object)
      {
LABEL_29:
        long long v29 = (std::__shared_weak_count *)operator new(0x48uLL);
        v29->__shared_owners_ = 0;
        p_uint64_t shared_owners = &v29->__shared_owners_;
        v29->__shared_weak_owners_ = 0;
        v29->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93E390;
        v29[1].__vftable = a1;
        v29[1].__shared_owners_ = on_zero_shared_weak;
        v29[1].__shared_weak_owners_ = (uint64_t)v24;
        uint64_t v54 = 0;
        uint64_t v55 = 0;
        LODWORD(v29[2].__vftable) = 1023442944;
        v29[2].__shared_owners_ = (uint64_t)v27;
        v29[2].__shared_weak_owners_ = (uint64_t)v28;
        long long v57 = 0;
        dispatch_object_t v58 = 0;
        *(void *)long long buf = MEMORY[0x263EF8330];
        *(void *)&uint8_t buf[8] = 1174405120;
        *(void *)&long long v66 = ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk45ARI_IBICpsConfigureCellularPowerReportRsp_SDKENS5_45ARI_IBICpsConfigureCellularPowerReportReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
        *((void *)&v66 + 1) = &__block_descriptor_tmp_73_0;
        unint64_t v67 = (unint64_t)&v29[1];
        long long v68 = v29;
        atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v60 = MEMORY[0x263EF8330];
        uint64_t v61 = 0x40000000;
        int v62 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_5;
        uint64_t v63 = &unk_264C7DC50;
        dispatch_object_t v64 = buf;
        unsigned __int16 v31 = _Block_copy(&v60);
        uint64_t v32 = v68;
        if (v68 && !atomic_fetch_add(&v68->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
          if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
          {
LABEL_32:
            if (__p[0]) {
              goto LABEL_39;
            }
LABEL_38:
            uint64_t v33 = operator new(4uLL);
            _DWORD *v33 = 0;
            __p[0] = v33;
LABEL_39:
            unint64_t v67 = 0xAAAAAAAAAAAAAAAALL;
            *(void *)&long long v34 = 0xAAAAAAAAAAAAAAAALL;
            *((void *)&v34 + 1) = 0xAAAAAAAAAAAAAAAALL;
            *(_OWORD *)long long buf = v34;
            long long v66 = v34;
            size_t v35 = (std::__shared_weak_count *)*((void *)get_deleter + 2);
            uint64_t v60 = *((void *)get_deleter + 1);
            if (v35)
            {
              uint64_t v61 = (uint64_t)std::__shared_weak_count::lock(v35);
              if (v61)
              {
                ice::SendMsgBaseProxy::SendMsgBaseProxy();
                size_t v36 = (std::__shared_weak_count *)v61;
                if (v61 && !atomic_fetch_add((atomic_ullong *volatile)(v61 + 8), 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
                  std::__shared_weak_count::__release_weak(v36);
                }
                long long v59 = v31;
                ice::SendMsgBaseProxy::callback();
                if (v59) {
                  _Block_release(v59);
                }
                MEMORY[0x237DF50B0](buf);
                if (v58) {
                  dispatch_release(v58);
                }
                if (v57) {
                  _Block_release(v57);
                }
                if (v55) {
                  std::__shared_weak_count::__release_weak(v55);
                }
                std::__shared_weak_count::__release_weak(v24);
                if (object) {
                  dispatch_release(object);
                }
                if (aBlock) {
                  _Block_release(aBlock);
                }
                MEMORY[0x237DF6BB0](block);
                return;
              }
            }
            else
            {
              uint64_t v61 = 0;
            }
            std::__throw_bad_weak_ptr[abi:ne180100]();
          }
        }
        else if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
        {
          goto LABEL_32;
        }
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
        if (__p[0]) {
          goto LABEL_39;
        }
        goto LABEL_38;
      }
    }
    else
    {
      unsigned int v27 = 0;
      xpc_object_t v28 = object;
      long long v57 = 0;
      dispatch_object_t v58 = object;
      if (!object) {
        goto LABEL_29;
      }
    }
    dispatch_retain(v28);
    goto LABEL_29;
  }
  unsigned int v9 = a1[1].~__shared_weak_count;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    uint64_t v39 = (char *)MEMORY[0x237DF7690](*a2);
    memset(block, 170, 24);
    size_t v40 = strlen(v39);
    if (v40 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v41 = v40;
    if (v40 >= 0x17)
    {
      uint64_t v43 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v40 | 7) != 0x17) {
        uint64_t v43 = v40 | 7;
      }
      uint64_t v44 = v43 + 1;
      long long v42 = operator new(v43 + 1);
      *(void *)&block[8] = v41;
      *(void *)&block[16] = v44 | 0x8000000000000000;
      *(void *)blocunint64_t k = v42;
    }
    else
    {
      block[23] = v40;
      long long v42 = block;
      if (!v40) {
        goto LABEL_76;
      }
    }
    memcpy(v42, v39, v41);
LABEL_76:
    v42[v41] = 0;
    free(v39);
    long long v45 = block;
    if (block[23] < 0) {
      long long v45 = *(unsigned char **)block;
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v45;
    _os_log_error_impl(&dword_235DB9000, v9, OS_LOG_TYPE_ERROR, "Missing mandatory TLV. args: %s", buf, 0xCu);
    if ((block[23] & 0x80000000) != 0) {
      operator delete(*(void **)block);
    }
  }
  xpc_object_t v10 = xpc_null_create();
  if (*(void *)a3) {
    xpc_object_t v11 = _Block_copy(*(const void **)a3);
  }
  else {
    xpc_object_t v11 = 0;
  }
  dispatch_object_t v37 = *(NSObject **)(a3 + 8);
  *(void *)blocunint64_t k = MEMORY[0x263EF8330];
  *(void *)&block[8] = 1174405120;
  *(void *)&block[16] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  *(void *)&block[24] = &__block_descriptor_tmp_42_0;
  if (!v11)
  {
    LOBYTE(v50) = 0;
    v49[0] = 0;
    v49[1] = v10;
    if (v10) {
      goto LABEL_60;
    }
LABEL_62:
    v49[1] = xpc_null_create();
    goto LABEL_63;
  }
  uint64_t v38 = _Block_copy(v11);
  LOBYTE(v50) = 0;
  v49[0] = v38;
  v49[1] = v10;
  if (!v10) {
    goto LABEL_62;
  }
LABEL_60:
  xpc_retain(v10);
LABEL_63:
  dispatch_async(v37, block);
  xpc_release(v49[1]);
  v49[1] = 0;
  if (v49[0]) {
    _Block_release(v49[0]);
  }
  if (v11) {
    _Block_release(v11);
  }
  xpc_release(v10);
}

void sub_235E053A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *aBlock,char a30)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void antenna::ARICommandDriver::ppmRegisterIndication_sync(std::__shared_weak_count_vtbl *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[2].~__shared_weak_count;
  if (!v3 || (int v5 = std::__shared_weak_count::lock(v3)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  unsigned int v6 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
    long long v7 = *(void **)a2;
    if (!*(void *)a2) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  long long v7 = *(void **)a2;
  if (*(void *)a2) {
LABEL_7:
  }
    long long v7 = _Block_copy(v7);
LABEL_8:
  on_zero_shared_weaunint64_t k = a1[5].__on_zero_shared_weak;
  a1[5].__on_zero_shared_weaunint64_t k = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  if (on_zero_shared_weak) {
    _Block_release(on_zero_shared_weak);
  }
  unsigned int v9 = *(NSObject **)(a2 + 8);
  if (v9) {
    dispatch_retain(v9);
  }
  xpc_object_t v10 = a1[6].~__shared_weak_count;
  a1[6].~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  if (v10) {
    dispatch_release(v10);
  }
  xpc_object_t v11 = (std::__shared_weak_count *)operator new(0x20uLL);
  v11->__shared_owners_ = 0;
  p_uint64_t shared_owners = &v11->__shared_owners_;
  v11->__shared_weak_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93E410;
  v11[1].__vftable = a1;
  v15[0] = (void *)MEMORY[0x263EF8330];
  v15[1] = (void *)1174405120;
  void v15[2] = ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver26ppmRegisterIndication_syncEN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEE3__0vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  v15[3] = &__block_descriptor_tmp_76_0;
  v15[4] = &v11[1];
  __int16 v16 = v11;
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_5;
  aBlock[3] = &unk_264C7DC50;
  aBlock[4] = v15;
  uint64_t v13 = _Block_copy(aBlock);
  xpc_object_t v14 = v16;
  if (!v16 || atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_17:
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_18:
  v15[0] = v13;
  ice::Client::regIndicationInternal();
  if (v15[0]) {
    _Block_release(v15[0]);
  }
  std::__shared_weak_count::__release_weak(v6);
}

void sub_235E05798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  std::__shared_weak_count::__release_weak(v10);
  _Unwind_Resume(a1);
}

uint64_t antenna::ARICommandDriver::workoutInfo_sync(void *a1, xpc_object_t *a2, uint64_t a3)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  xpc_object_t value = xpc_dictionary_get_value(*a2, "kKeyWorkoutType");
  *(void *)&long long object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    *(void *)&long long object = xpc_null_create();
  }
  unsigned int v7 = xpc::dyn_cast_or_default();
  xpc_release((xpc_object_t)object);
  xpc_object_t v8 = xpc_dictionary_get_value(*a2, "kKeyWorkoutState");
  *(void *)&long long object = v8;
  if (v8) {
    xpc_retain(v8);
  }
  else {
    *(void *)&long long object = xpc_null_create();
  }
  int v9 = xpc::dyn_cast_or_default();
  xpc_release((xpc_object_t)object);
  xpc_object_t v10 = xpc_dictionary_get_value(*a2, "kKeyWorkoutLocation");
  *(void *)&long long object = v10;
  if (v10) {
    xpc_retain(v10);
  }
  else {
    *(void *)&long long object = xpc_null_create();
  }
  int v11 = xpc::dyn_cast_or_default();
  xpc_release((xpc_object_t)object);
  xpc_object_t v12 = xpc_dictionary_get_value(*a2, "kKeySwimLocation");
  *(void *)&long long object = v12;
  if (v12) {
    xpc_retain(v12);
  }
  else {
    *(void *)&long long object = xpc_null_create();
  }
  int v13 = xpc::dyn_cast_or_default();
  xpc_release((xpc_object_t)object);
  xpc_object_t v14 = a1[5];
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)&long long object = __PAIR64__(v7, 67109888);
    WORD4(object) = 1024;
    *(_DWORD *)((char *)&object + 10) = v9;
    HIWORD(object) = 1024;
    LODWORD(v51) = v11;
    WORD2(v51) = 1024;
    *(_DWORD *)((char *)&v51 + 6) = v13;
    _os_log_impl(&dword_235DB9000, v14, OS_LOG_TYPE_DEFAULT, "#I Workout info: Type=%d State=%d Loc=%d SwimLoc=%d", (uint8_t *)&object, 0x1Au);
  }
  int v56 = (void *)0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v15 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v54 = v15;
  long long v55 = v15;
  long long v52 = v15;
  long long v53 = v15;
  long long object = v15;
  long long v51 = v15;
  AriSdk::ARI_IBICpsHealthActivityReq_SDK::ARI_IBICpsHealthActivityReq_SDK((AriSdk::ARI_IBICpsHealthActivityReq_SDK *)&object);
  __int16 v16 = operator new(4uLL);
  *__int16 v16 = v7;
  uint64_t v17 = (void *)*((void *)&v54 + 1);
  *((void *)&v54 + 1) = v16;
  if (v17) {
    operator delete(v17);
  }
  uint64_t v18 = operator new(4uLL);
  _DWORD *v18 = v9;
  unint64_t v19 = (void *)v55;
  *(void *)&long long v55 = v18;
  if (v19) {
    operator delete(v19);
  }
  if (v11)
  {
    unint64_t v20 = operator new(4uLL);
    *unint64_t v20 = v11;
    unint64_t v21 = (void *)*((void *)&v55 + 1);
    *((void *)&v55 + 1) = v20;
    if (v21) {
      operator delete(v21);
    }
  }
  if (v13)
  {
    uint64_t v22 = operator new(4uLL);
    _DWORD *v22 = v13;
    unsigned int v23 = v56;
    int v56 = v22;
    if (v23) {
      operator delete(v23);
    }
  }
  long long v24 = (std::__shared_weak_count *)a1[10];
  if (!v24 || (uint64_t v25 = (std::__shared_weak_count_vtbl *)a1[9], (v26 = std::__shared_weak_count::lock(v24)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  unsigned int v27 = v26;
  p_shared_weak_owners = &v26->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v26->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v27);
  }
  uint64_t v29 = a1[23];
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  if (!*(void *)a3)
  {
    unsigned int v30 = 0;
    unsigned __int16 v31 = *(NSObject **)(a3 + 8);
    if (!v31) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  unsigned int v30 = (std::__shared_weak_count_vtbl *)_Block_copy(*(const void **)a3);
  unsigned __int16 v31 = *(NSObject **)(a3 + 8);
  if (v31) {
LABEL_31:
  }
    dispatch_retain(v31);
LABEL_32:
  uint64_t v32 = (std::__shared_weak_count *)operator new(0x40uLL);
  v32->__shared_owners_ = 0;
  p_uint64_t shared_owners = &v32->__shared_owners_;
  v32->__shared_weak_owners_ = 0;
  v32[1].__vftable = v25;
  v32->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93E490;
  v32[1].__shared_owners_ = (uint64_t)v27;
  v32[1].__shared_weak_owners_ = (uint64_t)a1;
  v32[2].__vftable = v30;
  v32[2].__shared_owners_ = (uint64_t)v31;
  uint64_t v43 = MEMORY[0x263EF8330];
  uint64_t v44 = 1174405120;
  long long v45 = ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver16workoutInfo_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS4_6objectEEEEE3__0vEENS8_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  unint64_t v46 = &__block_descriptor_tmp_79_0;
  uint64_t v47 = v32 + 1;
  uint64_t v48 = v32;
  atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlock[0] = (const void *)MEMORY[0x263EF8330];
  aBlock[1] = (const void *)0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_5;
  aBlock[3] = &unk_264C7DC50;
  aBlock[4] = &v43;
  long long v34 = _Block_copy(aBlock);
  size_t v35 = v48;
  if (!v48 || atomic_fetch_add(&v48->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_35;
    }
LABEL_40:
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
    if ((void)v54) {
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
  std::__shared_weak_count::__release_weak(v35);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_40;
  }
LABEL_35:
  if ((void)v54) {
    goto LABEL_42;
  }
LABEL_41:
  size_t v36 = operator new(4uLL);
  _DWORD *v36 = 0;
  *(void *)&long long v54 = v36;
LABEL_42:
  unint64_t v42 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v37 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v37 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v41[0] = v37;
  v41[1] = v37;
  uint64_t v38 = *(std::__shared_weak_count **)(v29 + 16);
  uint64_t v43 = *(void *)(v29 + 8);
  if (!v38)
  {
    uint64_t v44 = 0;
LABEL_52:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v44 = (uint64_t)std::__shared_weak_count::lock(v38);
  if (!v44) {
    goto LABEL_52;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  uint64_t v39 = (std::__shared_weak_count *)v44;
  if (v44 && !atomic_fetch_add((atomic_ullong *volatile)(v44 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
  }
  aBlock[0] = v34;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0]) {
    _Block_release(aBlock[0]);
  }
  MEMORY[0x237DF50B0](v41);
  std::__shared_weak_count::__release_weak(v27);
  return MEMORY[0x237DF6210](&object);
}

void sub_235E05D90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *aBlock,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,xpc_object_t object)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *antenna::ARICommandDriver::workoutInfo_sync(xpc::dict const&,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::$_0::~$_0(void *a1)
{
  uint64_t v2 = a1[4];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = (const void *)a1[3];
  if (v3) {
    _Block_release(v3);
  }
  long long v4 = (std::__shared_weak_count *)a1[1];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void antenna::ARICommandDriver::cpmsPowerLevel_sync(std::__shared_weak_count_vtbl *a1, xpc_object_t *a2, uint64_t a3)
{
  unsigned int v6 = (const char *)*MEMORY[0x263F8B9B0];
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x263F8B9B0]))
  {
    *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)unsigned __int16 v31 = v7;
    long long v32 = v7;
    long long v29 = v7;
    *(_OWORD *)long long __p = v7;
    long long v27 = v7;
    *(_OWORD *)aBlocunint64_t k = v7;
    blocunint64_t k = v7;
    AriSdk::ARI_CsiIceCltmReq_SDK::ARI_CsiIceCltmReq_SDK((AriSdk::ARI_CsiIceCltmReq_SDK *)&block);
    xpc_object_t v8 = operator new(4uLL);
    *xpc_object_t v8 = 0x7FFF;
    int v9 = __p[0];
    __p[0] = v8;
    if (v9) {
      operator delete(v9);
    }
    xpc_object_t v10 = operator new(4uLL);
    *xpc_object_t v10 = 0x7FFF;
    int v11 = __p[1];
    __p[1] = v10;
    if (v11) {
      operator delete(v11);
    }
    xpc_object_t value = xpc_dictionary_get_value(*a2, v6);
    xpc_object_t object = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    int v16 = xpc::dyn_cast_or_default();
    uint64_t v17 = operator new(4uLL);
    *uint64_t v17 = v16;
    uint64_t v18 = v31[0];
    v31[0] = v17;
    if (v18) {
      operator delete(v18);
    }
    xpc_release(object);
    if (*(void *)a3)
    {
      unint64_t v19 = _Block_copy(*(const void **)a3);
      unint64_t v20 = *(NSObject **)(a3 + 8);
      unsigned int v23 = v19;
      long long v24 = v20;
      if (!v20)
      {
LABEL_18:
        antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceCltmRspCb_SDK,AriSdk::ARI_CsiIceCltmReq_SDK>(a1, (uint64_t)&block, (uint64_t)&v23);
        if (v20) {
          dispatch_release(v20);
        }
        if (v19) {
          _Block_release(v19);
        }
        MEMORY[0x237DF5290](&block);
        return;
      }
    }
    else
    {
      unint64_t v19 = 0;
      unint64_t v20 = *(NSObject **)(a3 + 8);
      unsigned int v23 = 0;
      long long v24 = v20;
      if (!v20) {
        goto LABEL_18;
      }
    }
    dispatch_retain(v20);
    goto LABEL_18;
  }
  int v13 = a1[1].~__shared_weak_count;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    LOWORD(block) = 0;
    _os_log_error_impl(&dword_235DB9000, v13, OS_LOG_TYPE_ERROR, "CPMS Power Level argument is missing!", (uint8_t *)&block, 2u);
  }
  xpc_object_t v14 = xpc_null_create();
  if (*(void *)a3) {
    long long v15 = _Block_copy(*(const void **)a3);
  }
  else {
    long long v15 = 0;
  }
  unint64_t v21 = *(NSObject **)(a3 + 8);
  *(void *)&blocunint64_t k = MEMORY[0x263EF8330];
  *((void *)&block + 1) = 1174405120;
  *(void *)&long long v27 = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  *((void *)&v27 + 1) = &__block_descriptor_tmp_42_0;
  if (!v15)
  {
    LOBYTE(v29) = 0;
    aBlock[0] = 0;
    aBlock[1] = v14;
    if (v14) {
      goto LABEL_28;
    }
LABEL_30:
    aBlock[1] = xpc_null_create();
    goto LABEL_31;
  }
  uint64_t v22 = _Block_copy(v15);
  LOBYTE(v29) = 0;
  aBlock[0] = v22;
  aBlock[1] = v14;
  if (!v14) {
    goto LABEL_30;
  }
LABEL_28:
  xpc_retain(v14);
LABEL_31:
  dispatch_async(v21, &block);
  xpc_release(aBlock[1]);
  aBlock[1] = 0;
  if (aBlock[0]) {
    _Block_release(aBlock[0]);
  }
  if (v15) {
    _Block_release(v15);
  }
  xpc_release(v14);
}

void sub_235E06218(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  dispatch::callback<void({block_pointer})(BOOL,xpc::object)>::~callback((uint64_t)va);
  MEMORY[0x237DF5290](va1);
  _Unwind_Resume(a1);
}

void antenna::ARICommandDriver::sendSensorID(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_error_impl(&dword_235DB9000, v1, OS_LOG_TYPE_ERROR, "Not implemented for this product", v2, 2u);
  }
}

uint64_t antenna::ARICommandDriver::stewieSARWaitTime(std::__shared_weak_count_vtbl *a1, uint64_t a2, uint64_t a3)
{
  long long __p = (void *)0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  _OWORD v29[2] = v6;
  v29[3] = v6;
  v29[0] = v6;
  v29[1] = v6;
  AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK::ARI_IBIStwSarBackoffTimeReq_SDK((AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK *)v29);
  long long v7 = operator new(8uLL);
  void *v7 = a2;
  xpc_object_t v8 = __p;
  long long __p = v7;
  if (v8) {
    operator delete(v8);
  }
  int v9 = *(void **)a3;
  if (*(void *)a3) {
    int v9 = _Block_copy(v9);
  }
  xpc_object_t v10 = *(NSObject **)(a3 + 8);
  aBlocunint64_t k = v9;
  xpc_object_t object = v10;
  if (v10) {
    dispatch_retain(v10);
  }
  int v11 = (std::__shared_weak_count *)a1[2].~__shared_weak_count;
  if (!v11
    || (on_zero_shared_weak = (uint64_t)a1[1].__on_zero_shared_weak, (int v13 = std::__shared_weak_count::lock(v11)) == 0))
  {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v14 = v13;
  p_shared_weak_owners = &v13->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v14);
  }
  get_deleter = a1[4].__get_deleter;
  unsigned __int16 v31 = a1;
  uint64_t v32 = on_zero_shared_weak;
  uint64_t v33 = v14;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  int v34 = -653262848;
  if (!aBlock)
  {
    uint64_t v17 = 0;
    uint64_t v18 = object;
    size_t v35 = 0;
    dispatch_object_t v36 = object;
    if (!object) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  uint64_t v17 = _Block_copy(aBlock);
  uint64_t v18 = object;
  size_t v35 = v17;
  dispatch_object_t v36 = object;
  if (object) {
LABEL_13:
  }
    dispatch_retain(v18);
LABEL_14:
  unint64_t v19 = (std::__shared_weak_count *)operator new(0x48uLL);
  v19->__shared_owners_ = 0;
  p_uint64_t shared_owners = &v19->__shared_owners_;
  v19->__shared_weak_owners_ = 0;
  v19->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93E510;
  v19[1].__vftable = a1;
  v19[1].__shared_owners_ = on_zero_shared_weak;
  v19[1].__shared_weak_owners_ = (uint64_t)v14;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  LODWORD(v19[2].__vftable) = -653262848;
  v19[2].__shared_owners_ = (uint64_t)v17;
  v19[2].__shared_weak_owners_ = (uint64_t)v18;
  size_t v35 = 0;
  dispatch_object_t v36 = 0;
  *(void *)&long long v38 = MEMORY[0x263EF8330];
  *((void *)&v38 + 1) = 1174405120;
  *(void *)&long long v39 = ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk33ARI_IBIStwSarBackoffTimeRspCb_SDKENS5_31ARI_IBIStwSarBackoffTimeReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  *((void *)&v39 + 1) = &__block_descriptor_tmp_82;
  unint64_t v40 = (unint64_t)&v19[1];
  size_t v41 = v19;
  atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v42 = MEMORY[0x263EF8330];
  uint64_t v43 = 0x40000000;
  uint64_t v44 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_5;
  long long v45 = &unk_264C7DC50;
  unint64_t v46 = &v38;
  unint64_t v21 = _Block_copy(&v42);
  uint64_t v22 = v41;
  if (!v41 || atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
  std::__shared_weak_count::__release_weak(v22);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_17:
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
LABEL_18:
  *(void *)&long long v23 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v23 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v38 = v23;
  long long v39 = v23;
  unint64_t v40 = 0xAAAAAAAAAAAAAAAALL;
  long long v24 = (std::__shared_weak_count *)*((void *)get_deleter + 2);
  uint64_t v42 = *((void *)get_deleter + 1);
  if (!v24)
  {
    uint64_t v43 = 0;
LABEL_42:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v43 = (uint64_t)std::__shared_weak_count::lock(v24);
  if (!v43) {
    goto LABEL_42;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  uint64_t v25 = (std::__shared_weak_count *)v43;
  if (v43 && !atomic_fetch_add((atomic_ullong *volatile)(v43 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  long long v37 = v21;
  ice::SendMsgBaseProxy::callback();
  if (v37) {
    _Block_release(v37);
  }
  MEMORY[0x237DF50B0](&v38);
  if (v36) {
    dispatch_release(v36);
  }
  if (v35) {
    _Block_release(v35);
  }
  if (v33) {
    std::__shared_weak_count::__release_weak(v33);
  }
  std::__shared_weak_count::__release_weak(v14);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  return MEMORY[0x237DF6260](v29);
}

void sub_235E06710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *aBlock,char a27)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  MEMORY[0x237DF50B0](&a27);
  antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBIStwSarBackoffTimeRspCb_SDK,AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK>(AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::~callback(&a20);
  std::__shared_weak_count::__release_weak(v27);
  dispatch::callback<void({block_pointer})(BOOL,xpc::object)>::~callback((uint64_t)&a9);
  MEMORY[0x237DF6260](&a11);
  _Unwind_Resume(a1);
}

void sub_235E0679C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t ctu::Loggable<antenna::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x270F97428](a1 + 8);
}

size_t ctu::Loggable<antenna::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(antenna::CommandDriver *a1@<X0>, void *a2@<X8>)
{
  Name = (const char *)antenna::CommandDriver::getName(a1);
  size_t result = strlen(Name);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    xpc_object_t v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memmove(a2, Name, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<antenna::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x270F978E0](a1 + 8);
}

void *ctu::Loggable<antenna::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_26E93D9E8;
  MEMORY[0x237DF4D50](a1 + 1);
  return a1;
}

void ctu::Loggable<antenna::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_26E93D9E8;
  MEMORY[0x237DF4D50](a1 + 1);

  operator delete(a1);
}

void std::__shared_ptr_pointer<antenna::ARICommandDriver *,std::shared_ptr<antenna::ARICommandDriver> ctu::SharedSynchronizable<antenna::CommandDriver>::make_shared_ptr<antenna::ARICommandDriver>(antenna::ARICommandDriver*)::{lambda(antenna::ARICommandDriver *)#1},std::allocator<antenna::ARICommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<antenna::ARICommandDriver *,std::shared_ptr<antenna::ARICommandDriver> ctu::SharedSynchronizable<antenna::CommandDriver>::make_shared_ptr<antenna::ARICommandDriver>(antenna::ARICommandDriver*)::{lambda(antenna::ARICommandDriver *)#1},std::allocator<antenna::ARICommandDriver>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<antenna::ARICommandDriver *,std::shared_ptr<antenna::ARICommandDriver> ctu::SharedSynchronizable<antenna::CommandDriver>::make_shared_ptr<antenna::ARICommandDriver>(antenna::ARICommandDriver*)::{lambda(antenna::ARICommandDriver *)#1},std::allocator<antenna::ARICommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15make_shared_ptrINS1_16ARICommandDriverEEEN"
                     "St3__110shared_ptrIT_EEPS8_EUlPS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15make_shared_ptrINS1_16ARIComman"
                                "dDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15make_shared_ptrINS1_16ARICommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15make_shared_ptrINS1_16ARICommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<antenna::ARICommandDriver> ctu::SharedSynchronizable<antenna::CommandDriver>::make_shared_ptr<antenna::ARICommandDriver>(antenna::ARICommandDriver*)::{lambda(antenna::ARICommandDriver*)#1}::operator() const(antenna::ARICommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void ___ZN3ice6detail17wrapEventCallbackIZZN7antenna16ARICommandDriver4initEvEUb_E3__0vEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi0EEEOT__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = *(NSObject **)(*(void *)v1 + 40);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)unint64_t v3 = 0;
      _os_log_debug_impl(&dword_235DB9000, v2, OS_LOG_TYPE_DEBUG, "#D ICE Client has been started!", v3, 2u);
    }
  }
}

uint64_t __copy_helper_block_e8_32c71_ZTSNSt3__110shared_ptrIZZN7antenna16ARICommandDriver4initEvEUb_E3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c71_ZTSNSt3__110shared_ptrIZZN7antenna16ARICommandDriver4initEvEUb_E3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void _ZNSt3__120__shared_ptr_emplaceIZZN7antenna16ARICommandDriver4initEvEUb_E3__0NS_9allocatorIS3_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93DAA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN7antenna16ARICommandDriver4initEvEUb_E3__0NS_9allocatorIS3_EEED0Ev(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93DAA8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t ___ZN3ice6detail17wrapEventCallbackIvEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi0EEEU13block_pointerFT_vE_block_invoke_2(uint64_t a1)
{
  return 0;
}

void *___ZN3ice6detail17wrapEventCallbackIZZN7antenna16ARICommandDriver4initEvEUb_E3__1vEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi0EEEOT__block_invoke(void *result)
{
  uint64_t v1 = (uint64_t *)result[4];
  if (v1)
  {
    uint64_t v2 = *v1;
    unint64_t v3 = *(NSObject **)(*v1 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long v4 = 0;
      _os_log_debug_impl(&dword_235DB9000, v3, OS_LOG_TYPE_DEBUG, "#D ICE Client has been stopped!", v4, 2u);
      size_t result = *(void **)(v2 + 144);
      if (!result) {
        return result;
      }
    }
    else
    {
      size_t result = *(void **)(v2 + 144);
      if (!result) {
        return result;
      }
    }
    return (void *)(*(uint64_t (**)(void *, void, uint64_t))(*result + 16))(result, 0, 4);
  }
  return result;
}

uint64_t __copy_helper_block_e8_32c71_ZTSNSt3__110shared_ptrIZZN7antenna16ARICommandDriver4initEvEUb_E3__1EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c71_ZTSNSt3__110shared_ptrIZZN7antenna16ARICommandDriver4initEvEUb_E3__1EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void _ZNSt3__120__shared_ptr_emplaceIZZN7antenna16ARICommandDriver4initEvEUb_E3__1NS_9allocatorIS3_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93DB28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN7antenna16ARICommandDriver4initEvEUb_E3__1NS_9allocatorIS3_EEED0Ev(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93DB28;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void ___ZN3ice6detail17wrapEventCallbackIZZN7antenna16ARICommandDriver4initEvEUb_E3__2vEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi0EEEOT__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = *(NSObject **)(*(void *)v1 + 40);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)unint64_t v3 = 0;
      _os_log_debug_impl(&dword_235DB9000, v2, OS_LOG_TYPE_DEBUG, "#D ICE Client is entering low power!", v3, 2u);
    }
  }
}

uint64_t __copy_helper_block_e8_32c71_ZTSNSt3__110shared_ptrIZZN7antenna16ARICommandDriver4initEvEUb_E3__2EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c71_ZTSNSt3__110shared_ptrIZZN7antenna16ARICommandDriver4initEvEUb_E3__2EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void _ZNSt3__120__shared_ptr_emplaceIZZN7antenna16ARICommandDriver4initEvEUb_E3__2NS_9allocatorIS3_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93DBA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN7antenna16ARICommandDriver4initEvEUb_E3__2NS_9allocatorIS3_EEED0Ev(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93DBA8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void ___ZN3ice6detail17wrapEventCallbackIZZN7antenna16ARICommandDriver4initEvEUb_E3__3vEEN8dispatch5blockIU13block_pointerFiP16dispatch_group_sEEENSt3__117integral_constantIiLi0EEEOT__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = *(NSObject **)(*(void *)v1 + 40);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)unint64_t v3 = 0;
      _os_log_debug_impl(&dword_235DB9000, v2, OS_LOG_TYPE_DEBUG, "#D ICE Client is exiting low power!", v3, 2u);
    }
  }
}

uint64_t __copy_helper_block_e8_32c71_ZTSNSt3__110shared_ptrIZZN7antenna16ARICommandDriver4initEvEUb_E3__3EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c71_ZTSNSt3__110shared_ptrIZZN7antenna16ARICommandDriver4initEvEUb_E3__3EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void _ZNSt3__120__shared_ptr_emplaceIZZN7antenna16ARICommandDriver4initEvEUb_E3__3NS_9allocatorIS3_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93DC28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN7antenna16ARICommandDriver4initEvEUb_E3__3NS_9allocatorIS3_EEED0Ev(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93DC28;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c52_ZTSNSt3__110shared_ptrIKN7antenna13CommandDriverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c52_ZTSNSt3__110shared_ptrIKN7antenna13CommandDriverEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped<antenna::ARICommandDriver::perform(xpc::dict,dispatch::callback<void({block_pointer})(BOOL,xpc::object)> &&)::$_0>(antenna::ARICommandDriver::perform(xpc::dict,dispatch::callback<void({block_pointer})(BOOL,xpc::object)> &&)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::ARICommandDriver::perform(xpc::dict,dispatch::callback<void({block_pointer})(BOOL,xpc::object)> &&)::$_0,dispatch_queue_s::default_delete<antenna::ARICommandDriver::perform(xpc::dict,dispatch::callback<void({block_pointer})(BOOL,xpc::object)> &&)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v2 = *a1;
  unint64_t v3 = *(std::__shared_weak_count_vtbl **)(*a1 + 8);
  memset(__s1, 170, sizeof(__s1));
  xpc_object_t value = xpc_dictionary_get_value(*(xpc_object_t *)v2, (const char *)*MEMORY[0x263F8B920]);
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  xpc::dyn_cast_or_default();
  xpc_release(object);
  size_t v5 = strlen((const char *)*MEMORY[0x263F8BA00]);
  uint64_t v6 = (const void *)v5;
  uint64_t v7 = (const void *)HIBYTE(__s1[2]);
  if ((SHIBYTE(__s1[2]) & 0x80000000) == 0)
  {
    if (v5 != -1)
    {
      xpc_object_t v8 = __s1;
      int v9 = (const void *)HIBYTE(__s1[2]);
      goto LABEL_9;
    }
LABEL_309:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v5 == -1) {
    goto LABEL_309;
  }
  xpc_object_t v8 = (const void **)__s1[0];
  int v9 = __s1[1];
LABEL_9:
  if (v9 >= v6) {
    size_t v10 = (size_t)v6;
  }
  else {
    size_t v10 = (size_t)v9;
  }
  if (!memcmp(v8, (const void *)*MEMORY[0x263F8BA00], v10) && v9 == v6)
  {
    uint64_t v17 = *(const void **)(v2 + 16);
    if (v17)
    {
      uint64_t v18 = _Block_copy(v17);
      unint64_t v19 = *(NSObject **)(v2 + 24);
      xpc_object_t object = v18;
      unint64_t v119 = v19;
      if (!v19) {
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v18 = 0;
      unint64_t v19 = *(NSObject **)(v2 + 24);
      xpc_object_t object = 0;
      unint64_t v119 = v19;
      if (!v19)
      {
LABEL_26:
        antenna::ARICommandDriver::txPowerCappingEnable_sync(v3, (xpc_object_t *)v2, (uint64_t)&object);
        if (v19) {
          dispatch_release(v19);
        }
        if (v18) {
          goto LABEL_298;
        }
        goto LABEL_299;
      }
    }
    dispatch_retain(v19);
    goto LABEL_26;
  }
  xpc_object_t v12 = (const void *)*MEMORY[0x263F8BA78];
  int v13 = (const void *)strlen((const char *)*MEMORY[0x263F8BA78]);
  xpc_object_t v14 = v13;
  if ((v7 & 0x80) == 0)
  {
    if (v13 != (const void *)-1)
    {
      long long v15 = v7;
      if (v7 >= v13) {
        size_t v16 = (size_t)v13;
      }
      else {
        size_t v16 = (size_t)v7;
      }
      if (memcmp(__s1, v12, v16)) {
        goto LABEL_43;
      }
LABEL_35:
      if (v15 != v14) {
        goto LABEL_43;
      }
      unint64_t v21 = *(const void **)(v2 + 16);
      if (v21)
      {
        uint64_t v18 = _Block_copy(v21);
        uint64_t v22 = *(NSObject **)(v2 + 24);
        xpc_object_t object = v18;
        unint64_t v119 = v22;
        if (!v22) {
          goto LABEL_39;
        }
      }
      else
      {
        uint64_t v18 = 0;
        uint64_t v22 = *(NSObject **)(v2 + 24);
        xpc_object_t object = 0;
        unint64_t v119 = v22;
        if (!v22)
        {
LABEL_39:
          antenna::ARICommandDriver::transmitIndicationRegister_sync(v3, (uint64_t)&object);
          if (v22) {
            dispatch_release(v22);
          }
          if (v18) {
            goto LABEL_298;
          }
          goto LABEL_299;
        }
      }
      dispatch_retain(v22);
      goto LABEL_39;
    }
LABEL_310:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v13 == (const void *)-1) {
    goto LABEL_310;
  }
  long long v15 = __s1[1];
  if (__s1[1] >= v13) {
    unint64_t v20 = v13;
  }
  else {
    unint64_t v20 = __s1[1];
  }
  if (!memcmp(__s1[0], v12, (size_t)v20)) {
    goto LABEL_35;
  }
LABEL_43:
  long long v23 = (const void *)*MEMORY[0x263F8BA48];
  long long v24 = (const void *)strlen((const char *)*MEMORY[0x263F8BA48]);
  uint64_t v25 = v24;
  if ((v7 & 0x80) == 0)
  {
    if (v24 != (const void *)-1)
    {
      long long v26 = v7;
      if (v7 >= v24) {
        size_t v27 = (size_t)v24;
      }
      else {
        size_t v27 = (size_t)v7;
      }
      if (memcmp(__s1, v23, v27)) {
        goto LABEL_65;
      }
LABEL_57:
      if (v26 != v25) {
        goto LABEL_65;
      }
      long long v29 = *(const void **)(v2 + 16);
      if (v29)
      {
        uint64_t v18 = _Block_copy(v29);
        unsigned int v30 = *(NSObject **)(v2 + 24);
        xpc_object_t object = v18;
        unint64_t v119 = v30;
        if (!v30) {
          goto LABEL_61;
        }
      }
      else
      {
        uint64_t v18 = 0;
        unsigned int v30 = *(NSObject **)(v2 + 24);
        xpc_object_t object = 0;
        unint64_t v119 = v30;
        if (!v30)
        {
LABEL_61:
          antenna::ARICommandDriver::transmitIndicationEnable_sync(v3, (xpc_object_t *)v2, (uint64_t)&object);
          if (v30) {
            dispatch_release(v30);
          }
          if (v18) {
            goto LABEL_298;
          }
          goto LABEL_299;
        }
      }
      dispatch_retain(v30);
      goto LABEL_61;
    }
LABEL_311:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 == (const void *)-1) {
    goto LABEL_311;
  }
  long long v26 = __s1[1];
  if (__s1[1] >= v24) {
    xpc_object_t v28 = v24;
  }
  else {
    xpc_object_t v28 = __s1[1];
  }
  if (!memcmp(__s1[0], v23, (size_t)v28)) {
    goto LABEL_57;
  }
LABEL_65:
  unsigned __int16 v31 = (const void *)*MEMORY[0x263F8B9B8];
  uint64_t v32 = (const void *)strlen((const char *)*MEMORY[0x263F8B9B8]);
  uint64_t v33 = v32;
  if ((v7 & 0x80) == 0)
  {
    if (v32 != (const void *)-1)
    {
      int v34 = v7;
      if (v7 >= v32) {
        size_t v35 = (size_t)v32;
      }
      else {
        size_t v35 = (size_t)v7;
      }
      if (memcmp(__s1, v31, v35)) {
        goto LABEL_87;
      }
LABEL_79:
      if (v34 != v33) {
        goto LABEL_87;
      }
      long long v37 = *(const void **)(v2 + 16);
      if (v37)
      {
        uint64_t v18 = _Block_copy(v37);
        long long v38 = *(NSObject **)(v2 + 24);
        xpc_object_t object = v18;
        unint64_t v119 = v38;
        if (!v38) {
          goto LABEL_83;
        }
      }
      else
      {
        uint64_t v18 = 0;
        long long v38 = *(NSObject **)(v2 + 24);
        xpc_object_t object = 0;
        unint64_t v119 = v38;
        if (!v38)
        {
LABEL_83:
          antenna::ARICommandDriver::txPowerCapping_sync((uint64_t)v3, (xpc_object_t *)v2, (uint64_t)&object);
          if (v38) {
            dispatch_release(v38);
          }
          if (v18) {
            goto LABEL_298;
          }
          goto LABEL_299;
        }
      }
      dispatch_retain(v38);
      goto LABEL_83;
    }
LABEL_312:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v32 == (const void *)-1) {
    goto LABEL_312;
  }
  int v34 = __s1[1];
  if (__s1[1] >= v32) {
    dispatch_object_t v36 = v32;
  }
  else {
    dispatch_object_t v36 = __s1[1];
  }
  if (!memcmp(__s1[0], v31, (size_t)v36)) {
    goto LABEL_79;
  }
LABEL_87:
  long long v39 = (const void *)*MEMORY[0x263F8BA08];
  unint64_t v40 = (const void *)strlen((const char *)*MEMORY[0x263F8BA08]);
  size_t v41 = v40;
  if ((v7 & 0x80) != 0)
  {
    if (v40 != (const void *)-1)
    {
      uint64_t v42 = __s1[1];
      if (__s1[1] >= v40) {
        uint64_t v44 = v40;
      }
      else {
        uint64_t v44 = __s1[1];
      }
      if (memcmp(__s1[0], v39, (size_t)v44)) {
        goto LABEL_104;
      }
      goto LABEL_101;
    }
LABEL_313:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v40 == (const void *)-1) {
    goto LABEL_313;
  }
  uint64_t v42 = v7;
  if (v7 >= v40) {
    size_t v43 = (size_t)v40;
  }
  else {
    size_t v43 = (size_t)v7;
  }
  if (memcmp(__s1, v39, v43)) {
    goto LABEL_104;
  }
LABEL_101:
  if (v42 == v41)
  {
    long long v45 = *(const void **)(v2 + 16);
    if (v45) {
      uint64_t v18 = _Block_copy(v45);
    }
    else {
      uint64_t v18 = 0;
    }
    int v56 = *(NSObject **)(v2 + 24);
    xpc_object_t object = v18;
    unint64_t v119 = v56;
    if (v56) {
      dispatch_retain(v56);
    }
    antenna::ARICommandDriver::txPowerConfiguration_sync(v3, (xpc_object_t *)v2, (uint64_t)&object);
    if (v56) {
      dispatch_release(v56);
    }
    if (v18) {
      goto LABEL_298;
    }
    goto LABEL_299;
  }
LABEL_104:
  size_t v46 = strlen((const char *)*MEMORY[0x263F8BA40]);
  uint64_t v47 = (const void *)v46;
  if ((v7 & 0x80) == 0)
  {
    if (v46 != -1)
    {
      uint64_t v48 = __s1;
      unsigned int v49 = v7;
      goto LABEL_111;
    }
LABEL_314:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v46 == -1) {
    goto LABEL_314;
  }
  uint64_t v48 = (const void **)__s1[0];
  unsigned int v49 = __s1[1];
LABEL_111:
  if (v49 >= v47) {
    size_t v50 = (size_t)v47;
  }
  else {
    size_t v50 = (size_t)v49;
  }
  if (memcmp(v48, (const void *)*MEMORY[0x263F8BA40], v50) || v49 != v47)
  {
    size_t v52 = strlen((const char *)*MEMORY[0x263F8BA50]);
    long long v53 = (const void *)v52;
    if ((v7 & 0x80) != 0)
    {
      if (v52 != -1)
      {
        long long v54 = (const void **)__s1[0];
        long long v55 = __s1[1];
LABEL_130:
        if (v55 >= v53) {
          size_t v57 = (size_t)v53;
        }
        else {
          size_t v57 = (size_t)v55;
        }
        if (!memcmp(v54, (const void *)*MEMORY[0x263F8BA50], v57) && v55 == v53)
        {
          dispatch_object_t v58 = *(const void **)(v2 + 16);
          if (v58) {
            uint64_t v18 = _Block_copy(v58);
          }
          else {
            uint64_t v18 = 0;
          }
          uint64_t v70 = *(NSObject **)(v2 + 24);
          xpc_object_t object = v18;
          unint64_t v119 = v70;
          if (v70) {
            dispatch_retain(v70);
          }
          antenna::ARICommandDriver::e75AccessoryStatusARTD_sync((antenna::ARICommandDriver *)v3, (xpc_object_t *)v2, (uint64_t)&object);
          if (v70) {
            dispatch_release(v70);
          }
          if (v18) {
            goto LABEL_298;
          }
          goto LABEL_299;
        }
        size_t v59 = strlen((const char *)*MEMORY[0x263F8B9A0]);
        uint64_t v60 = (const void *)v59;
        if ((v7 & 0x80) != 0)
        {
          if (v59 != -1)
          {
            uint64_t v61 = (const void **)__s1[0];
            int v62 = __s1[1];
LABEL_149:
            if (v62 >= v60) {
              size_t v64 = (size_t)v60;
            }
            else {
              size_t v64 = (size_t)v62;
            }
            if (!memcmp(v61, (const void *)*MEMORY[0x263F8B9A0], v64) && v62 == v60)
            {
              unsigned int v65 = *(const void **)(v2 + 16);
              if (v65) {
                uint64_t v18 = _Block_copy(v65);
              }
              else {
                uint64_t v18 = 0;
              }
              uint64_t v77 = *(NSObject **)(v2 + 24);
              xpc_object_t object = v18;
              unint64_t v119 = v77;
              if (v77) {
                dispatch_retain(v77);
              }
              antenna::ARICommandDriver::videoAccessoryStatus_sync((int8x8_t *)v3, (xpc_object_t *)v2, (uint64_t)&object);
              goto LABEL_295;
            }
            size_t v66 = strlen((const char *)*MEMORY[0x263F8BA28]);
            unint64_t v67 = (const void *)v66;
            if ((v7 & 0x80) != 0)
            {
              if (v66 != -1)
              {
                long long v68 = (const void **)__s1[0];
                uint64_t v69 = __s1[1];
LABEL_168:
                if (v69 >= v67) {
                  size_t v71 = (size_t)v67;
                }
                else {
                  size_t v71 = (size_t)v69;
                }
                if (!memcmp(v68, (const void *)*MEMORY[0x263F8BA28], v71) && v69 == v67)
                {
                  unsigned int v72 = *(const void **)(v2 + 16);
                  if (v72) {
                    uint64_t v18 = _Block_copy(v72);
                  }
                  else {
                    uint64_t v18 = 0;
                  }
                  uint64_t v77 = *(NSObject **)(v2 + 24);
                  xpc_object_t object = v18;
                  unint64_t v119 = v77;
                  if (v77) {
                    dispatch_retain(v77);
                  }
                  antenna::ARICommandDriver::wiredPortNotification_sync((int8x8_t *)v3, (xpc_object_t *)v2, (uint64_t)&object);
                  goto LABEL_295;
                }
                size_t v73 = strlen((const char *)*MEMORY[0x263F8B988]);
                uint64_t v74 = (const void *)v73;
                if ((v7 & 0x80) != 0)
                {
                  if (v73 != -1)
                  {
                    long long v75 = (const void **)__s1[0];
                    uint64_t v76 = __s1[1];
LABEL_184:
                    if (v76 >= v74) {
                      size_t v78 = (size_t)v74;
                    }
                    else {
                      size_t v78 = (size_t)v76;
                    }
                    if (!memcmp(v75, (const void *)*MEMORY[0x263F8B988], v78) && v76 == v74)
                    {
                      unsigned int v79 = *(const void **)(v2 + 16);
                      if (v79) {
                        uint64_t v18 = _Block_copy(v79);
                      }
                      else {
                        uint64_t v18 = 0;
                      }
                      uint64_t v77 = *(NSObject **)(v2 + 24);
                      xpc_object_t object = v18;
                      unint64_t v119 = v77;
                      if (v77) {
                        dispatch_retain(v77);
                      }
                      antenna::ARICommandDriver::speakerState_sync(v3, (xpc_object_t *)v2, (uint64_t)&object);
                      goto LABEL_295;
                    }
                    size_t v80 = strlen((const char *)*MEMORY[0x263F8B9F8]);
                    uint64_t v81 = (const void *)v80;
                    if ((v7 & 0x80) != 0)
                    {
                      if (v80 != -1)
                      {
                        uint64_t v82 = (const void **)__s1[0];
                        unsigned int v83 = __s1[1];
LABEL_200:
                        if (v83 >= v81) {
                          size_t v84 = (size_t)v81;
                        }
                        else {
                          size_t v84 = (size_t)v83;
                        }
                        if (!memcmp(v82, (const void *)*MEMORY[0x263F8B9F8], v84) && v83 == v81)
                        {
                          uint64_t v85 = *(const void **)(v2 + 16);
                          if (v85) {
                            uint64_t v18 = _Block_copy(v85);
                          }
                          else {
                            uint64_t v18 = 0;
                          }
                          uint64_t v77 = *(NSObject **)(v2 + 24);
                          xpc_object_t object = v18;
                          unint64_t v119 = v77;
                          if (v77) {
                            dispatch_retain(v77);
                          }
                          antenna::ARICommandDriver::handDetectionState_sync(v3, (xpc_object_t *)v2, (uint64_t)&object);
                          goto LABEL_295;
                        }
                        size_t v86 = strlen((const char *)*MEMORY[0x263F8B9E0]);
                        uint64_t v87 = (const void *)v86;
                        if ((v7 & 0x80) != 0)
                        {
                          if (v86 != -1)
                          {
                            uint64_t v88 = (const void **)__s1[0];
                            unsigned int v89 = __s1[1];
LABEL_216:
                            if (v89 >= v87) {
                              size_t v90 = (size_t)v87;
                            }
                            else {
                              size_t v90 = (size_t)v89;
                            }
                            if (!memcmp(v88, (const void *)*MEMORY[0x263F8B9E0], v90) && v89 == v87)
                            {
                              uint64_t v91 = *(const void **)(v2 + 16);
                              if (v91) {
                                uint64_t v18 = _Block_copy(v91);
                              }
                              else {
                                uint64_t v18 = 0;
                              }
                              uint64_t v77 = *(NSObject **)(v2 + 24);
                              xpc_object_t object = v18;
                              unint64_t v119 = v77;
                              if (v77) {
                                dispatch_retain(v77);
                              }
                              antenna::ARICommandDriver::powerSourceState_sync(v3, (xpc_object_t *)v2, (uint64_t)&object);
                              goto LABEL_295;
                            }
                            size_t v92 = strlen((const char *)*MEMORY[0x263F8B978]);
                            unsigned int v93 = (const void *)v92;
                            if ((v7 & 0x80) != 0)
                            {
                              if (v92 != -1)
                              {
                                long long v94 = (const void **)__s1[0];
                                uint64_t v95 = __s1[1];
LABEL_232:
                                if (v95 >= v93) {
                                  size_t v96 = (size_t)v93;
                                }
                                else {
                                  size_t v96 = (size_t)v95;
                                }
                                if (!memcmp(v94, (const void *)*MEMORY[0x263F8B978], v96) && v95 == v93)
                                {
                                  uint64_t v97 = *(const void **)(v2 + 16);
                                  if (v97) {
                                    uint64_t v18 = _Block_copy(v97);
                                  }
                                  else {
                                    uint64_t v18 = 0;
                                  }
                                  uint64_t v77 = *(NSObject **)(v2 + 24);
                                  xpc_object_t object = v18;
                                  unint64_t v119 = v77;
                                  if (v77) {
                                    dispatch_retain(v77);
                                  }
                                  antenna::ARICommandDriver::ppmEnable_sync(v3, (xpc_object_t *)v2, (uint64_t)&object);
                                  goto LABEL_295;
                                }
                                size_t v98 = strlen((const char *)*MEMORY[0x263F8BA20]);
                                unint64_t v99 = (const void *)v98;
                                if ((v7 & 0x80) != 0)
                                {
                                  if (v98 != -1)
                                  {
                                    uint64_t v100 = (const void **)__s1[0];
                                    uint64_t v101 = __s1[1];
LABEL_248:
                                    if (v101 >= v99) {
                                      size_t v102 = (size_t)v99;
                                    }
                                    else {
                                      size_t v102 = (size_t)v101;
                                    }
                                    if (!memcmp(v100, (const void *)*MEMORY[0x263F8BA20], v102) && v101 == v99)
                                    {
                                      uint64_t v103 = *(const void **)(v2 + 16);
                                      if (v103) {
                                        uint64_t v18 = _Block_copy(v103);
                                      }
                                      else {
                                        uint64_t v18 = 0;
                                      }
                                      uint64_t v77 = *(NSObject **)(v2 + 24);
                                      xpc_object_t object = v18;
                                      unint64_t v119 = v77;
                                      if (v77) {
                                        dispatch_retain(v77);
                                      }
                                      antenna::ARICommandDriver::ppmRegisterIndication_sync(v3, (uint64_t)&object);
                                      goto LABEL_295;
                                    }
                                    size_t v104 = strlen((const char *)*MEMORY[0x263F8B980]);
                                    unint64_t v105 = (const void *)v104;
                                    if ((v7 & 0x80) != 0)
                                    {
                                      if (v104 != -1)
                                      {
                                        uint64_t v106 = (const void **)__s1[0];
                                        int v107 = __s1[1];
LABEL_264:
                                        if (v107 >= v105) {
                                          size_t v108 = (size_t)v105;
                                        }
                                        else {
                                          size_t v108 = (size_t)v107;
                                        }
                                        if (!memcmp(v106, (const void *)*MEMORY[0x263F8B980], v108) && v107 == v105)
                                        {
                                          v109 = *(const void **)(v2 + 16);
                                          if (v109) {
                                            uint64_t v18 = _Block_copy(v109);
                                          }
                                          else {
                                            uint64_t v18 = 0;
                                          }
                                          uint64_t v77 = *(NSObject **)(v2 + 24);
                                          xpc_object_t object = v18;
                                          unint64_t v119 = v77;
                                          if (v77) {
                                            dispatch_retain(v77);
                                          }
                                          antenna::ARICommandDriver::workoutInfo_sync(v3, (xpc_object_t *)v2, (uint64_t)&object);
LABEL_295:
                                          if (v77)
                                          {
                                            dispatch_release(v77);
                                            uint64_t v18 = object;
                                          }
                                          if (v18) {
                                            goto LABEL_298;
                                          }
                                          goto LABEL_299;
                                        }
                                        size_t v110 = strlen((const char *)*MEMORY[0x263F8BA18]);
                                        std::ctype_base::mask v111 = (const void *)v110;
                                        if ((v7 & 0x80) != 0)
                                        {
                                          if (v110 != -1)
                                          {
                                            int v112 = (const void **)__s1[0];
                                            uint64_t v7 = __s1[1];
                                            goto LABEL_280;
                                          }
                                        }
                                        else if (v110 != -1)
                                        {
                                          int v112 = __s1;
LABEL_280:
                                          if (v7 >= v111) {
                                            size_t v113 = (size_t)v111;
                                          }
                                          else {
                                            size_t v113 = (size_t)v7;
                                          }
                                          if (memcmp(v112, (const void *)*MEMORY[0x263F8BA18], v113) || v7 != v111) {
                                            goto LABEL_299;
                                          }
                                          uint64_t v114 = *(const void **)(v2 + 16);
                                          if (v114) {
                                            uint64_t v18 = _Block_copy(v114);
                                          }
                                          else {
                                            uint64_t v18 = 0;
                                          }
                                          uint64_t v77 = *(NSObject **)(v2 + 24);
                                          xpc_object_t object = v18;
                                          unint64_t v119 = v77;
                                          if (v77) {
                                            dispatch_retain(v77);
                                          }
                                          antenna::ARICommandDriver::cpmsPowerLevel_sync(v3, (xpc_object_t *)v2, (uint64_t)&object);
                                          goto LABEL_295;
                                        }
                                        std::string::__throw_out_of_range[abi:ne180100]();
                                      }
                                    }
                                    else if (v104 != -1)
                                    {
                                      uint64_t v106 = __s1;
                                      int v107 = v7;
                                      goto LABEL_264;
                                    }
                                    std::string::__throw_out_of_range[abi:ne180100]();
                                  }
                                }
                                else if (v98 != -1)
                                {
                                  uint64_t v100 = __s1;
                                  uint64_t v101 = v7;
                                  goto LABEL_248;
                                }
                                std::string::__throw_out_of_range[abi:ne180100]();
                              }
                            }
                            else if (v92 != -1)
                            {
                              long long v94 = __s1;
                              uint64_t v95 = v7;
                              goto LABEL_232;
                            }
                            std::string::__throw_out_of_range[abi:ne180100]();
                          }
                        }
                        else if (v86 != -1)
                        {
                          uint64_t v88 = __s1;
                          unsigned int v89 = v7;
                          goto LABEL_216;
                        }
                        std::string::__throw_out_of_range[abi:ne180100]();
                      }
                    }
                    else if (v80 != -1)
                    {
                      uint64_t v82 = __s1;
                      unsigned int v83 = v7;
                      goto LABEL_200;
                    }
                    std::string::__throw_out_of_range[abi:ne180100]();
                  }
                }
                else if (v73 != -1)
                {
                  long long v75 = __s1;
                  uint64_t v76 = v7;
                  goto LABEL_184;
                }
                std::string::__throw_out_of_range[abi:ne180100]();
              }
            }
            else if (v66 != -1)
            {
              long long v68 = __s1;
              uint64_t v69 = v7;
              goto LABEL_168;
            }
            std::string::__throw_out_of_range[abi:ne180100]();
          }
        }
        else if (v59 != -1)
        {
          uint64_t v61 = __s1;
          int v62 = v7;
          goto LABEL_149;
        }
        std::string::__throw_out_of_range[abi:ne180100]();
      }
    }
    else if (v52 != -1)
    {
      long long v54 = __s1;
      long long v55 = v7;
      goto LABEL_130;
    }
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  long long v51 = *(const void **)(v2 + 16);
  if (v51) {
    uint64_t v18 = _Block_copy(v51);
  }
  else {
    uint64_t v18 = 0;
  }
  uint64_t v63 = *(NSObject **)(v2 + 24);
  xpc_object_t object = v18;
  unint64_t v119 = v63;
  if (v63) {
    dispatch_retain(v63);
  }
  antenna::ARICommandDriver::e75AccessoryStatusRF_sync((antenna::ARICommandDriver *)v3, (xpc_object_t *)v2, (uint64_t)&object);
  if (v63) {
    dispatch_release(v63);
  }
  if (v18) {
LABEL_298:
  }
    _Block_release(v18);
LABEL_299:
  if (SHIBYTE(__s1[2]) < 0) {
    operator delete((void *)__s1[0]);
  }
  std::regex_traits<char>::char_class_type v115 = *(NSObject **)(v2 + 24);
  if (v115) {
    dispatch_release(v115);
  }
  uint64_t v116 = *(const void **)(v2 + 16);
  if (v116) {
    _Block_release(v116);
  }
  xpc_release(*(xpc_object_t *)v2);
  operator delete((void *)v2);
  uint64_t v117 = (std::__shared_weak_count *)a1[2];
  if (v117 && !atomic_fetch_add(&v117->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
    std::__shared_weak_count::__release_weak(v117);
  }
  operator delete(a1);
}

void sub_235E07D90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (v20)
  {
    dispatch_release(v20);
    xpc_object_t v19 = object;
  }
  if (v19) {
    _Block_release(v19);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  uint64_t v22 = *(NSObject **)(v18 + 24);
  if (v22) {
    dispatch_release(v22);
  }
  long long v23 = *(const void **)(v18 + 16);
  if (v23) {
    _Block_release(v23);
  }
  xpc_release(*(xpc_object_t *)v18);
  operator delete((void *)v18);
  long long v24 = (std::__shared_weak_count *)v17[2];
  if (v24)
  {
    if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  operator delete(v17);
  _Unwind_Resume(a1);
}

void *antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarEnableRspCb_SDK,AriSdk::ARI_CsiIceSarEnableReq_SDK>(AriSdk::ARI_CsiIceSarEnableReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::~callback(void *a1)
{
  uint64_t v2 = a1[5];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = (const void *)a1[4];
  if (v3) {
    _Block_release(v3);
  }
  long long v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk28ARI_CsiIceSarEnableRspCb_SDKENS5_26ARI_CsiIceSarEnableReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  if (v2)
  {
    unint64_t v3 = (std::__shared_weak_count *)v2[2];
    if (v3)
    {
      uint64_t v5 = *v2;
      uint64_t v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        uint64_t v7 = v6;
        xpc_object_t v8 = (void *)v2[1];
        if (!v8) {
          goto LABEL_21;
        }
        unint64_t v26 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
        void v25[2] = v9;
        v25[3] = v9;
        v25[0] = v9;
        v25[1] = v9;
        AriSdk::ARI_CsiIceSarEnableRspCb_SDK::ARI_CsiIceSarEnableRspCb_SDK((AriSdk::ARI_CsiIceSarEnableRspCb_SDK *)v25, a2);
        if (!v2[4] || !v2[5])
        {
LABEL_20:
          MEMORY[0x237DF5B20](v25);
LABEL_21:
          if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        unint64_t GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v25);
        int v11 = (Ari *)((GMID >> 17) & 0xFFFF8000 | (GMID << 26));
        if (v11 == 67600384 || v11 != *((_DWORD *)v2 + 6))
        {
          int v13 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            uint64_t v24 = Ari::MsgNameById(v11);
            *(_DWORD *)long long buf = 136315138;
            uint64_t v28 = v24;
            _os_log_error_impl(&dword_235DB9000, v13, OS_LOG_TYPE_ERROR, "Response %s is invalid", buf, 0xCu);
          }
          char v12 = 0;
        }
        else
        {
          char v12 = 1;
        }
        xpc_object_t v14 = (const void *)v2[4];
        if (v14)
        {
          long long v15 = _Block_copy(v14);
          size_t v16 = v2[5];
          if (!v16) {
            goto LABEL_16;
          }
        }
        else
        {
          long long v15 = 0;
          size_t v16 = v2[5];
          if (!v16)
          {
LABEL_16:
            uint64_t v17 = (std::__shared_weak_count *)v8[10];
            if (!v17 || (uint64_t v18 = v8[9], (v19 = std::__shared_weak_count::lock(v17)) == 0)) {
              std::__throw_bad_weak_ptr[abi:ne180100]();
            }
            unint64_t v20 = v19;
            unint64_t v21 = operator new(0x18uLL);
            *unint64_t v21 = v15;
            v21[1] = v16;
            *((unsigned char *)v21 + 16) = v12;
            uint64_t v22 = v8[11];
            atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
            long long v23 = operator new(0x18uLL);
            void *v23 = v21;
            v23[1] = v18;
            v23[2] = v20;
            dispatch_async_f(v22, v23, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarEnableRspCb_SDK,AriSdk::ARI_CsiIceSarEnableReq_SDK>(AriSdk::ARI_CsiIceSarEnableReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>(void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarEnableRspCb_SDK,AriSdk::ARI_CsiIceSarEnableReq_SDK>(AriSdk::ARI_CsiIceSarEnableReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarEnableRspCb_SDK,AriSdk::ARI_CsiIceSarEnableReq_SDK>(AriSdk::ARI_CsiIceSarEnableReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1},dispatch_queue_s *::default_delete<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarEnableRspCb_SDK,AriSdk::ARI_CsiIceSarEnableReq_SDK>(AriSdk::ARI_CsiIceSarEnableReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
            if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
            goto LABEL_20;
          }
        }
        dispatch_retain(v16);
        goto LABEL_16;
      }
    }
  }
}

void sub_235E08220(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t __copy_helper_block_e8_32c207_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk28ARI_CsiIceSarEnableRspCb_SDKENS4_26ARI_CsiIceSarEnableReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c207_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk28ARI_CsiIceSarEnableRspCb_SDKENS4_26ARI_CsiIceSarEnableReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarEnableRspCb_SDK,AriSdk::ARI_CsiIceSarEnableReq_SDK>(AriSdk::ARI_CsiIceSarEnableReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarEnableRspCb_SDK,AriSdk::ARI_CsiIceSarEnableReq_SDK>(AriSdk::ARI_CsiIceSarEnableReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93DCE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarEnableRspCb_SDK,AriSdk::ARI_CsiIceSarEnableReq_SDK>(AriSdk::ARI_CsiIceSarEnableReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarEnableRspCb_SDK,AriSdk::ARI_CsiIceSarEnableReq_SDK>(AriSdk::ARI_CsiIceSarEnableReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93DCE0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarEnableRspCb_SDK,AriSdk::ARI_CsiIceSarEnableReq_SDK>(AriSdk::ARI_CsiIceSarEnableReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarEnableRspCb_SDK,AriSdk::ARI_CsiIceSarEnableReq_SDK>(AriSdk::ARI_CsiIceSarEnableReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(void *a1)
{
  uint64_t v2 = a1[8];
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = (const void *)a1[7];
  if (v3) {
    _Block_release(v3);
  }
  long long v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

uint64_t ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_5(uint64_t a1)
{
  return 0;
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarEnableRspCb_SDK,AriSdk::ARI_CsiIceSarEnableReq_SDK>(AriSdk::ARI_CsiIceSarEnableReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>(void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarEnableRspCb_SDK,AriSdk::ARI_CsiIceSarEnableReq_SDK>(AriSdk::ARI_CsiIceSarEnableReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarEnableRspCb_SDK,AriSdk::ARI_CsiIceSarEnableReq_SDK>(AriSdk::ARI_CsiIceSarEnableReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1},dispatch_queue_s *::default_delete<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarEnableRspCb_SDK,AriSdk::ARI_CsiIceSarEnableReq_SDK>(AriSdk::ARI_CsiIceSarEnableReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v2 = *a1;
  char v3 = *(unsigned char *)(*a1 + 16);
  xpc_object_t v4 = xpc_null_create();
  if (*(void *)v2) {
    uint64_t v5 = _Block_copy(*(const void **)v2);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(NSObject **)(v2 + 8);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_42_0;
  if (v5)
  {
    char v12 = v3;
    aBlocunint64_t k = _Block_copy(v5);
    xpc_object_t object = v4;
    if (v4)
    {
LABEL_6:
      xpc_retain(v4);
      goto LABEL_9;
    }
  }
  else
  {
    char v12 = v3;
    aBlocunint64_t k = 0;
    xpc_object_t object = v4;
    if (v4) {
      goto LABEL_6;
    }
  }
  xpc_object_t object = xpc_null_create();
LABEL_9:
  dispatch_async(v6, block);
  xpc_release(object);
  xpc_object_t object = 0;
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v5) {
    _Block_release(v5);
  }
  xpc_release(v4);
  uint64_t v7 = *(NSObject **)(v2 + 8);
  if (v7) {
    dispatch_release(v7);
  }
  if (*(void *)v2) {
    _Block_release(*(const void **)v2);
  }
  operator delete((void *)v2);
  xpc_object_t v8 = (std::__shared_weak_count *)a1[2];
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  operator delete(a1);
}

uint64_t ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver31transmitIndicationRegister_syncEN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEE3__0vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t result, const unsigned __int8 *a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(uint64_t **)(result + 32);
  if (v2)
  {
    uint64_t v3 = *v2;
    unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v8[2] = v4;
    v8[3] = v4;
    v8[0] = v4;
    v8[1] = v4;
    AriSdk::ARI_CsiIceBBTxStateInd_SDK::ARI_CsiIceBBTxStateInd_SDK((AriSdk::ARI_CsiIceBBTxStateInd_SDK *)v8, a2);
    unint64_t GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v8);
    if (ice::isARIResponseValid())
    {
      if (!AriSdk::ARI_CsiIceBBTxStateInd_SDK::unpack((AriSdk::ARI_CsiIceBBTxStateInd_SDK *)v8)
        && (int)antenna::CommandDriver::convertModeToState() <= 1)
      {
        uint64_t v6 = *(void *)(v3 + 144);
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
        }
      }
    }
    else
    {
      uint64_t v7 = *(NSObject **)(v3 + 40);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 67109376;
        int v11 = (GMID >> 17) & 0xFFFF8000 | (GMID << 26);
        __int16 v12 = 1024;
        int v13 = -175800320;
        _os_log_error_impl(&dword_235DB9000, v7, OS_LOG_TYPE_ERROR, "Got unexpected message 0x%0x, expected CsiIceBBTxStateInd (0x%0x)", buf, 0xEu);
      }
    }
    return MEMORY[0x237DF5730](v8);
  }
  return result;
}

uint64_t __copy_helper_block_e8_32c148_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver31transmitIndicationRegister_syncEN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c148_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver31transmitIndicationRegister_syncEN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<antenna::ARICommandDriver::transmitIndicationRegister_sync(dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::$_0,std::allocator<antenna::ARICommandDriver::transmitIndicationRegister_sync(dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93DD60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<antenna::ARICommandDriver::transmitIndicationRegister_sync(dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::$_0,std::allocator<antenna::ARICommandDriver::transmitIndicationRegister_sync(dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93DD60;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver31transmitIndicationRegister_syncEN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEE3__1vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t result, const unsigned __int8 *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(uint64_t **)(result + 32);
  if (v2)
  {
    uint64_t v3 = *v2;
    size_t v10 = (unsigned int *)0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v8[3] = v4;
    long long v9 = v4;
    v8[1] = v4;
    v8[2] = v4;
    v8[0] = v4;
    AriSdk::ARI_IBICallPsTransmitStateIndCb_SDK::ARI_IBICallPsTransmitStateIndCb_SDK((AriSdk::ARI_IBICallPsTransmitStateIndCb_SDK *)v8, a2);
    unint64_t GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v8);
    if (ice::isARIResponseValid())
    {
      if (!AriSdk::ARI_IBICallPsTransmitStateIndCb_SDK::unpack((AriSdk::ARI_IBICallPsTransmitStateIndCb_SDK *)v8))
      {
        uint64_t v6 = *(void *)(v3 + 144);
        if (v6) {
          (*(void (**)(uint64_t, void, void))(*(void *)v6 + 16))(v6, **((_DWORD **)&v9 + 1), *v10);
        }
      }
    }
    else
    {
      uint64_t v7 = *(NSObject **)(v3 + 40);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 67109376;
        int v12 = (GMID >> 17) & 0xFFFF8000 | (GMID << 26);
        __int16 v13 = 1024;
        int v14 = 227016704;
        _os_log_error_impl(&dword_235DB9000, v7, OS_LOG_TYPE_ERROR, "Got unexpected message 0x%0x, expected IBICallPsTransmitStateIndCb (0x%0x)", buf, 0xEu);
      }
    }
    return MEMORY[0x237DF6790](v8);
  }
  return result;
}

uint64_t __copy_helper_block_e8_32c148_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver31transmitIndicationRegister_syncEN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEE3__1EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c148_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver31transmitIndicationRegister_syncEN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEE3__1EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<antenna::ARICommandDriver::transmitIndicationRegister_sync(dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::$_1,std::allocator<antenna::ARICommandDriver::transmitIndicationRegister_sync(dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::$_1>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93DDE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<antenna::ARICommandDriver::transmitIndicationRegister_sync(dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::$_1,std::allocator<antenna::ARICommandDriver::transmitIndicationRegister_sync(dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::$_1>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93DDE0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(a1 + 40);
  xpc_object_t object = v2;
  if (v2) {
    xpc_retain(v2);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(uint64_t, BOOL, xpc_object_t *))(v3 + 16))(v3, v1 != 0, &object);
  xpc_release(object);
}

void sub_235E08BAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

xpc_object_t __copy_helper_block_e8_32c56_ZTSN8dispatch5blockIU13block_pointerFvbN3xpc6objectEEEE40c17_ZTSN3xpc6objectE(uint64_t a1, uint64_t a2)
{
  long long v4 = *(const void **)(a2 + 32);
  if (v4)
  {
    uint64_t v5 = _Block_copy(v4);
    uint64_t v6 = *(void **)(a2 + 40);
    *(void *)(a1 + 32) = v5;
    *(void *)(a1 + 40) = v6;
    if (v6) {
      return xpc_retain(v6);
    }
  }
  else
  {
    uint64_t v6 = *(void **)(a2 + 40);
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = v6;
    if (v6) {
      return xpc_retain(v6);
    }
  }
  xpc_object_t result = xpc_null_create();
  *(void *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_32c56_ZTSN8dispatch5blockIU13block_pointerFvbN3xpc6objectEEEE40c17_ZTSN3xpc6objectE(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(void *)(a1 + 40) = 0;
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2) {
    _Block_release(v2);
  }
}

void *antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceBBTxStateIndEnableRspCb_SDK,AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK>(AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::~callback(void *a1)
{
  uint64_t v2 = a1[5];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = (const void *)a1[4];
  if (v3) {
    _Block_release(v3);
  }
  long long v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk37ARI_CsiIceBBTxStateIndEnableRspCb_SDKENS5_35ARI_CsiIceBBTxStateIndEnableReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = (std::__shared_weak_count *)v2[2];
    if (v3)
    {
      uint64_t v5 = *v2;
      uint64_t v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        uint64_t v7 = v6;
        xpc_object_t v8 = (void *)v2[1];
        if (!v8) {
          goto LABEL_21;
        }
        unint64_t v26 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
        void v25[2] = v9;
        v25[3] = v9;
        v25[0] = v9;
        v25[1] = v9;
        AriSdk::ARI_CsiIceBBTxStateIndEnableRspCb_SDK::ARI_CsiIceBBTxStateIndEnableRspCb_SDK((AriSdk::ARI_CsiIceBBTxStateIndEnableRspCb_SDK *)v25, a2);
        if (!v2[4] || !v2[5])
        {
LABEL_20:
          MEMORY[0x237DF68C0](v25);
LABEL_21:
          if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        unint64_t GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v25);
        int v11 = (Ari *)((GMID >> 17) & 0xFFFF8000 | (GMID << 26));
        if (v11 == 67600384 || v11 != *((_DWORD *)v2 + 6))
        {
          __int16 v13 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            uint64_t v24 = Ari::MsgNameById(v11);
            *(_DWORD *)long long buf = 136315138;
            uint64_t v28 = v24;
            _os_log_error_impl(&dword_235DB9000, v13, OS_LOG_TYPE_ERROR, "Response %s is invalid", buf, 0xCu);
          }
          char v12 = 0;
        }
        else
        {
          char v12 = 1;
        }
        int v14 = (const void *)v2[4];
        if (v14)
        {
          uint64_t v15 = _Block_copy(v14);
          size_t v16 = v2[5];
          if (!v16) {
            goto LABEL_16;
          }
        }
        else
        {
          uint64_t v15 = 0;
          size_t v16 = v2[5];
          if (!v16)
          {
LABEL_16:
            uint64_t v17 = (std::__shared_weak_count *)v8[10];
            if (!v17 || (uint64_t v18 = v8[9], (v19 = std::__shared_weak_count::lock(v17)) == 0)) {
              std::__throw_bad_weak_ptr[abi:ne180100]();
            }
            unint64_t v20 = v19;
            unint64_t v21 = operator new(0x18uLL);
            *unint64_t v21 = v15;
            v21[1] = v16;
            *((unsigned char *)v21 + 16) = v12;
            uint64_t v22 = v8[11];
            atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
            long long v23 = operator new(0x18uLL);
            void *v23 = v21;
            v23[1] = v18;
            v23[2] = v20;
            dispatch_async_f(v22, v23, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceBBTxStateIndEnableRspCb_SDK,AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK>(AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>(void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceBBTxStateIndEnableRspCb_SDK,AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK>(AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceBBTxStateIndEnableRspCb_SDK,AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK>(AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1},dispatch_queue_s *::default_delete<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceBBTxStateIndEnableRspCb_SDK,AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK>(AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
            if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
            goto LABEL_20;
          }
        }
        dispatch_retain(v16);
        goto LABEL_16;
      }
    }
  }
}

void sub_235E08F44(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t __copy_helper_block_e8_32c225_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk37ARI_CsiIceBBTxStateIndEnableRspCb_SDKENS4_35ARI_CsiIceBBTxStateIndEnableReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c225_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk37ARI_CsiIceBBTxStateIndEnableRspCb_SDKENS4_35ARI_CsiIceBBTxStateIndEnableReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_EE(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceBBTxStateIndEnableRspCb_SDK,AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK>(AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceBBTxStateIndEnableRspCb_SDK,AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK>(AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93DE90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceBBTxStateIndEnableRspCb_SDK,AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK>(AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceBBTxStateIndEnableRspCb_SDK,AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK>(AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93DE90;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceBBTxStateIndEnableRspCb_SDK,AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK>(AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceBBTxStateIndEnableRspCb_SDK,AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK>(AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(void *a1)
{
  uint64_t v2 = a1[8];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = (const void *)a1[7];
  if (v3) {
    _Block_release(v3);
  }
  long long v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceBBTxStateIndEnableRspCb_SDK,AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK>(AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>(void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceBBTxStateIndEnableRspCb_SDK,AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK>(AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceBBTxStateIndEnableRspCb_SDK,AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK>(AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1},dispatch_queue_s *::default_delete<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceBBTxStateIndEnableRspCb_SDK,AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK>(AriSdk::ARI_CsiIceBBTxStateIndEnableReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v2 = *a1;
  char v3 = *(unsigned char *)(*a1 + 16);
  xpc_object_t v4 = xpc_null_create();
  if (*(void *)v2) {
    uint64_t v5 = _Block_copy(*(const void **)v2);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(NSObject **)(v2 + 8);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_42_0;
  if (v5)
  {
    char v12 = v3;
    aBlocunint64_t k = _Block_copy(v5);
    xpc_object_t object = v4;
    if (v4)
    {
LABEL_6:
      xpc_retain(v4);
      goto LABEL_9;
    }
  }
  else
  {
    char v12 = v3;
    aBlocunint64_t k = 0;
    xpc_object_t object = v4;
    if (v4) {
      goto LABEL_6;
    }
  }
  xpc_object_t object = xpc_null_create();
LABEL_9:
  dispatch_async(v6, block);
  xpc_release(object);
  xpc_object_t object = 0;
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v5) {
    _Block_release(v5);
  }
  xpc_release(v4);
  uint64_t v7 = *(NSObject **)(v2 + 8);
  if (v7) {
    dispatch_release(v7);
  }
  if (*(void *)v2) {
    _Block_release(*(const void **)v2);
  }
  operator delete((void *)v2);
  xpc_object_t v8 = (std::__shared_weak_count *)a1[2];
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  operator delete(a1);
}

void *antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBICallPsTransmitStateRspCb_SDK,AriSdk::ARI_IBICallPsTransmitStateReq_SDK>(AriSdk::ARI_IBICallPsTransmitStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::~callback(void *a1)
{
  uint64_t v2 = a1[5];
  if (v2) {
    dispatch_release(v2);
  }
  char v3 = (const void *)a1[4];
  if (v3) {
    _Block_release(v3);
  }
  xpc_object_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk35ARI_IBICallPsTransmitStateRspCb_SDKENS5_33ARI_IBICallPsTransmitStateReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  if (v2)
  {
    char v3 = (std::__shared_weak_count *)v2[2];
    if (v3)
    {
      uint64_t v5 = *v2;
      uint64_t v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        uint64_t v7 = v6;
        xpc_object_t v8 = (void *)v2[1];
        if (!v8) {
          goto LABEL_21;
        }
        *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v25[3] = v9;
        _OWORD v25[4] = v9;
        v25[1] = v9;
        void v25[2] = v9;
        v25[0] = v9;
        AriSdk::ARI_IBICallPsTransmitStateRspCb_SDK::ARI_IBICallPsTransmitStateRspCb_SDK((AriSdk::ARI_IBICallPsTransmitStateRspCb_SDK *)v25, a2);
        if (!v2[4] || !v2[5])
        {
LABEL_20:
          MEMORY[0x237DF67B0](v25);
LABEL_21:
          if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        unint64_t GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v25);
        int v11 = (Ari *)((GMID >> 17) & 0xFFFF8000 | (GMID << 26));
        if (v11 == 67600384 || v11 != *((_DWORD *)v2 + 6))
        {
          __int16 v13 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            uint64_t v24 = Ari::MsgNameById(v11);
            *(_DWORD *)long long buf = 136315138;
            uint64_t v27 = v24;
            _os_log_error_impl(&dword_235DB9000, v13, OS_LOG_TYPE_ERROR, "Response %s is invalid", buf, 0xCu);
          }
          char v12 = 0;
        }
        else
        {
          char v12 = 1;
        }
        int v14 = (const void *)v2[4];
        if (v14)
        {
          uint64_t v15 = _Block_copy(v14);
          size_t v16 = v2[5];
          if (!v16) {
            goto LABEL_16;
          }
        }
        else
        {
          uint64_t v15 = 0;
          size_t v16 = v2[5];
          if (!v16)
          {
LABEL_16:
            uint64_t v17 = (std::__shared_weak_count *)v8[10];
            if (!v17 || (uint64_t v18 = v8[9], (v19 = std::__shared_weak_count::lock(v17)) == 0)) {
              std::__throw_bad_weak_ptr[abi:ne180100]();
            }
            unint64_t v20 = v19;
            unint64_t v21 = operator new(0x18uLL);
            *unint64_t v21 = v15;
            v21[1] = v16;
            *((unsigned char *)v21 + 16) = v12;
            uint64_t v22 = v8[11];
            atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
            long long v23 = operator new(0x18uLL);
            void *v23 = v21;
            v23[1] = v18;
            v23[2] = v20;
            dispatch_async_f(v22, v23, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBICallPsTransmitStateRspCb_SDK,AriSdk::ARI_IBICallPsTransmitStateReq_SDK>(AriSdk::ARI_IBICallPsTransmitStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>(void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBICallPsTransmitStateRspCb_SDK,AriSdk::ARI_IBICallPsTransmitStateReq_SDK>(AriSdk::ARI_IBICallPsTransmitStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBICallPsTransmitStateRspCb_SDK,AriSdk::ARI_IBICallPsTransmitStateReq_SDK>(AriSdk::ARI_IBICallPsTransmitStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1},dispatch_queue_s *::default_delete<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBICallPsTransmitStateRspCb_SDK,AriSdk::ARI_IBICallPsTransmitStateReq_SDK>(AriSdk::ARI_IBICallPsTransmitStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
            if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
            goto LABEL_20;
          }
        }
        dispatch_retain(v16);
        goto LABEL_16;
      }
    }
  }
}

void sub_235E0959C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t __copy_helper_block_e8_32c221_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk35ARI_IBICallPsTransmitStateRspCb_SDKENS4_33ARI_IBICallPsTransmitStateReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c221_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk35ARI_IBICallPsTransmitStateRspCb_SDKENS4_33ARI_IBICallPsTransmitStateReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_EE(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBICallPsTransmitStateRspCb_SDK,AriSdk::ARI_IBICallPsTransmitStateReq_SDK>(AriSdk::ARI_IBICallPsTransmitStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBICallPsTransmitStateRspCb_SDK,AriSdk::ARI_IBICallPsTransmitStateReq_SDK>(AriSdk::ARI_IBICallPsTransmitStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93DF10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBICallPsTransmitStateRspCb_SDK,AriSdk::ARI_IBICallPsTransmitStateReq_SDK>(AriSdk::ARI_IBICallPsTransmitStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBICallPsTransmitStateRspCb_SDK,AriSdk::ARI_IBICallPsTransmitStateReq_SDK>(AriSdk::ARI_IBICallPsTransmitStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93DF10;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBICallPsTransmitStateRspCb_SDK,AriSdk::ARI_IBICallPsTransmitStateReq_SDK>(AriSdk::ARI_IBICallPsTransmitStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBICallPsTransmitStateRspCb_SDK,AriSdk::ARI_IBICallPsTransmitStateReq_SDK>(AriSdk::ARI_IBICallPsTransmitStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(void *a1)
{
  uint64_t v2 = a1[8];
  if (v2) {
    dispatch_release(v2);
  }
  char v3 = (const void *)a1[7];
  if (v3) {
    _Block_release(v3);
  }
  xpc_object_t v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBICallPsTransmitStateRspCb_SDK,AriSdk::ARI_IBICallPsTransmitStateReq_SDK>(AriSdk::ARI_IBICallPsTransmitStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>(void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBICallPsTransmitStateRspCb_SDK,AriSdk::ARI_IBICallPsTransmitStateReq_SDK>(AriSdk::ARI_IBICallPsTransmitStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBICallPsTransmitStateRspCb_SDK,AriSdk::ARI_IBICallPsTransmitStateReq_SDK>(AriSdk::ARI_IBICallPsTransmitStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1},dispatch_queue_s *::default_delete<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBICallPsTransmitStateRspCb_SDK,AriSdk::ARI_IBICallPsTransmitStateReq_SDK>(AriSdk::ARI_IBICallPsTransmitStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v2 = *a1;
  char v3 = *(unsigned char *)(*a1 + 16);
  xpc_object_t v4 = xpc_null_create();
  if (*(void *)v2) {
    uint64_t v5 = _Block_copy(*(const void **)v2);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(NSObject **)(v2 + 8);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_42_0;
  if (v5)
  {
    char v12 = v3;
    aBlocunint64_t k = _Block_copy(v5);
    xpc_object_t object = v4;
    if (v4)
    {
LABEL_6:
      xpc_retain(v4);
      goto LABEL_9;
    }
  }
  else
  {
    char v12 = v3;
    aBlocunint64_t k = 0;
    xpc_object_t object = v4;
    if (v4) {
      goto LABEL_6;
    }
  }
  xpc_object_t object = xpc_null_create();
LABEL_9:
  dispatch_async(v6, block);
  xpc_release(object);
  xpc_object_t object = 0;
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v5) {
    _Block_release(v5);
  }
  xpc_release(v4);
  uint64_t v7 = *(NSObject **)(v2 + 8);
  if (v7) {
    dispatch_release(v7);
  }
  if (*(void *)v2) {
    _Block_release(*(const void **)v2);
  }
  operator delete((void *)v2);
  xpc_object_t v8 = (std::__shared_weak_count *)a1[2];
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  operator delete(a1);
}

void *antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarRspCb_SDK,AriSdk::ARI_CsiIceSarReq_SDK>(AriSdk::ARI_CsiIceSarReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::~callback(void *a1)
{
  uint64_t v2 = a1[5];
  if (v2) {
    dispatch_release(v2);
  }
  char v3 = (const void *)a1[4];
  if (v3) {
    _Block_release(v3);
  }
  xpc_object_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk22ARI_CsiIceSarRspCb_SDKENS5_20ARI_CsiIceSarReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  if (v2)
  {
    char v3 = (std::__shared_weak_count *)v2[2];
    if (v3)
    {
      uint64_t v5 = *v2;
      uint64_t v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        uint64_t v7 = v6;
        xpc_object_t v8 = (void *)v2[1];
        if (!v8) {
          goto LABEL_21;
        }
        unint64_t v26 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
        void v25[2] = v9;
        v25[3] = v9;
        v25[0] = v9;
        v25[1] = v9;
        AriSdk::ARI_CsiIceSarRspCb_SDK::ARI_CsiIceSarRspCb_SDK((AriSdk::ARI_CsiIceSarRspCb_SDK *)v25, a2);
        if (!v2[4] || !v2[5])
        {
LABEL_20:
          MEMORY[0x237DF5390](v25);
LABEL_21:
          if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        unint64_t GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v25);
        int v11 = (Ari *)((GMID >> 17) & 0xFFFF8000 | (GMID << 26));
        if (v11 == 67600384 || v11 != *((_DWORD *)v2 + 6))
        {
          __int16 v13 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            uint64_t v24 = Ari::MsgNameById(v11);
            *(_DWORD *)long long buf = 136315138;
            uint64_t v28 = v24;
            _os_log_error_impl(&dword_235DB9000, v13, OS_LOG_TYPE_ERROR, "Response %s is invalid", buf, 0xCu);
          }
          char v12 = 0;
        }
        else
        {
          char v12 = 1;
        }
        int v14 = (const void *)v2[4];
        if (v14)
        {
          uint64_t v15 = _Block_copy(v14);
          size_t v16 = v2[5];
          if (!v16) {
            goto LABEL_16;
          }
        }
        else
        {
          uint64_t v15 = 0;
          size_t v16 = v2[5];
          if (!v16)
          {
LABEL_16:
            uint64_t v17 = (std::__shared_weak_count *)v8[10];
            if (!v17 || (uint64_t v18 = v8[9], (v19 = std::__shared_weak_count::lock(v17)) == 0)) {
              std::__throw_bad_weak_ptr[abi:ne180100]();
            }
            unint64_t v20 = v19;
            unint64_t v21 = operator new(0x18uLL);
            *unint64_t v21 = v15;
            v21[1] = v16;
            *((unsigned char *)v21 + 16) = v12;
            uint64_t v22 = v8[11];
            atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
            long long v23 = operator new(0x18uLL);
            void *v23 = v21;
            v23[1] = v18;
            v23[2] = v20;
            dispatch_async_f(v22, v23, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarRspCb_SDK,AriSdk::ARI_CsiIceSarReq_SDK>(AriSdk::ARI_CsiIceSarReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>(void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarRspCb_SDK,AriSdk::ARI_CsiIceSarReq_SDK>(AriSdk::ARI_CsiIceSarReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarRspCb_SDK,AriSdk::ARI_CsiIceSarReq_SDK>(AriSdk::ARI_CsiIceSarReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1},dispatch_queue_s *::default_delete<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarRspCb_SDK,AriSdk::ARI_CsiIceSarReq_SDK>(AriSdk::ARI_CsiIceSarReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
            if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
            goto LABEL_20;
          }
        }
        dispatch_retain(v16);
        goto LABEL_16;
      }
    }
  }
}

void sub_235E09BF8(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t __copy_helper_block_e8_32c195_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk22ARI_CsiIceSarRspCb_SDKENS4_20ARI_CsiIceSarReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c195_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk22ARI_CsiIceSarRspCb_SDKENS4_20ARI_CsiIceSarReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_EE(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarRspCb_SDK,AriSdk::ARI_CsiIceSarReq_SDK>(AriSdk::ARI_CsiIceSarReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarRspCb_SDK,AriSdk::ARI_CsiIceSarReq_SDK>(AriSdk::ARI_CsiIceSarReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93DF90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarRspCb_SDK,AriSdk::ARI_CsiIceSarReq_SDK>(AriSdk::ARI_CsiIceSarReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarRspCb_SDK,AriSdk::ARI_CsiIceSarReq_SDK>(AriSdk::ARI_CsiIceSarReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93DF90;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarRspCb_SDK,AriSdk::ARI_CsiIceSarReq_SDK>(AriSdk::ARI_CsiIceSarReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarRspCb_SDK,AriSdk::ARI_CsiIceSarReq_SDK>(AriSdk::ARI_CsiIceSarReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(void *a1)
{
  uint64_t v2 = a1[8];
  if (v2) {
    dispatch_release(v2);
  }
  char v3 = (const void *)a1[7];
  if (v3) {
    _Block_release(v3);
  }
  xpc_object_t v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarRspCb_SDK,AriSdk::ARI_CsiIceSarReq_SDK>(AriSdk::ARI_CsiIceSarReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>(void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarRspCb_SDK,AriSdk::ARI_CsiIceSarReq_SDK>(AriSdk::ARI_CsiIceSarReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarRspCb_SDK,AriSdk::ARI_CsiIceSarReq_SDK>(AriSdk::ARI_CsiIceSarReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1},dispatch_queue_s *::default_delete<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarRspCb_SDK,AriSdk::ARI_CsiIceSarReq_SDK>(AriSdk::ARI_CsiIceSarReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v2 = *a1;
  char v3 = *(unsigned char *)(*a1 + 16);
  xpc_object_t v4 = xpc_null_create();
  if (*(void *)v2) {
    uint64_t v5 = _Block_copy(*(const void **)v2);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(NSObject **)(v2 + 8);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_42_0;
  if (v5)
  {
    char v12 = v3;
    aBlocunint64_t k = _Block_copy(v5);
    xpc_object_t object = v4;
    if (v4)
    {
LABEL_6:
      xpc_retain(v4);
      goto LABEL_9;
    }
  }
  else
  {
    char v12 = v3;
    aBlocunint64_t k = 0;
    xpc_object_t object = v4;
    if (v4) {
      goto LABEL_6;
    }
  }
  xpc_object_t object = xpc_null_create();
LABEL_9:
  dispatch_async(v6, block);
  xpc_release(object);
  xpc_object_t object = 0;
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v5) {
    _Block_release(v5);
  }
  xpc_release(v4);
  uint64_t v7 = *(NSObject **)(v2 + 8);
  if (v7) {
    dispatch_release(v7);
  }
  if (*(void *)v2) {
    _Block_release(*(const void **)v2);
  }
  operator delete((void *)v2);
  xpc_object_t v8 = (std::__shared_weak_count *)a1[2];
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  operator delete(a1);
}

void *antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceCltmRspCb_SDK,AriSdk::ARI_CsiIceCltmReq_SDK>(AriSdk::ARI_CsiIceCltmReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::~callback(void *a1)
{
  uint64_t v2 = a1[5];
  if (v2) {
    dispatch_release(v2);
  }
  char v3 = (const void *)a1[4];
  if (v3) {
    _Block_release(v3);
  }
  xpc_object_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk23ARI_CsiIceCltmRspCb_SDKENS5_21ARI_CsiIceCltmReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  if (v2)
  {
    char v3 = (std::__shared_weak_count *)v2[2];
    if (v3)
    {
      uint64_t v5 = *v2;
      uint64_t v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        uint64_t v7 = v6;
        xpc_object_t v8 = (void *)v2[1];
        if (!v8) {
          goto LABEL_21;
        }
        unint64_t v26 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
        void v25[2] = v9;
        v25[3] = v9;
        v25[0] = v9;
        v25[1] = v9;
        AriSdk::ARI_CsiIceCltmRspCb_SDK::ARI_CsiIceCltmRspCb_SDK((AriSdk::ARI_CsiIceCltmRspCb_SDK *)v25, a2);
        if (!v2[4] || !v2[5])
        {
LABEL_20:
          MEMORY[0x237DF5400](v25);
LABEL_21:
          if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        unint64_t GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v25);
        int v11 = (Ari *)((GMID >> 17) & 0xFFFF8000 | (GMID << 26));
        if (v11 == 67600384 || v11 != *((_DWORD *)v2 + 6))
        {
          __int16 v13 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            uint64_t v24 = Ari::MsgNameById(v11);
            *(_DWORD *)long long buf = 136315138;
            uint64_t v28 = v24;
            _os_log_error_impl(&dword_235DB9000, v13, OS_LOG_TYPE_ERROR, "Response %s is invalid", buf, 0xCu);
          }
          char v12 = 0;
        }
        else
        {
          char v12 = 1;
        }
        int v14 = (const void *)v2[4];
        if (v14)
        {
          uint64_t v15 = _Block_copy(v14);
          size_t v16 = v2[5];
          if (!v16) {
            goto LABEL_16;
          }
        }
        else
        {
          uint64_t v15 = 0;
          size_t v16 = v2[5];
          if (!v16)
          {
LABEL_16:
            uint64_t v17 = (std::__shared_weak_count *)v8[10];
            if (!v17 || (uint64_t v18 = v8[9], (v19 = std::__shared_weak_count::lock(v17)) == 0)) {
              std::__throw_bad_weak_ptr[abi:ne180100]();
            }
            unint64_t v20 = v19;
            unint64_t v21 = operator new(0x18uLL);
            *unint64_t v21 = v15;
            v21[1] = v16;
            *((unsigned char *)v21 + 16) = v12;
            uint64_t v22 = v8[11];
            atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
            long long v23 = operator new(0x18uLL);
            void *v23 = v21;
            v23[1] = v18;
            v23[2] = v20;
            dispatch_async_f(v22, v23, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceCltmRspCb_SDK,AriSdk::ARI_CsiIceCltmReq_SDK>(AriSdk::ARI_CsiIceCltmReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>(void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceCltmRspCb_SDK,AriSdk::ARI_CsiIceCltmReq_SDK>(AriSdk::ARI_CsiIceCltmReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceCltmRspCb_SDK,AriSdk::ARI_CsiIceCltmReq_SDK>(AriSdk::ARI_CsiIceCltmReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1},dispatch_queue_s *::default_delete<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceCltmRspCb_SDK,AriSdk::ARI_CsiIceCltmReq_SDK>(AriSdk::ARI_CsiIceCltmReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
            if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
            goto LABEL_20;
          }
        }
        dispatch_retain(v16);
        goto LABEL_16;
      }
    }
  }
}

void sub_235E0A254(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t __copy_helper_block_e8_32c197_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk23ARI_CsiIceCltmRspCb_SDKENS4_21ARI_CsiIceCltmReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c197_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk23ARI_CsiIceCltmRspCb_SDKENS4_21ARI_CsiIceCltmReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_EE(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceCltmRspCb_SDK,AriSdk::ARI_CsiIceCltmReq_SDK>(AriSdk::ARI_CsiIceCltmReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceCltmRspCb_SDK,AriSdk::ARI_CsiIceCltmReq_SDK>(AriSdk::ARI_CsiIceCltmReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93E010;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceCltmRspCb_SDK,AriSdk::ARI_CsiIceCltmReq_SDK>(AriSdk::ARI_CsiIceCltmReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceCltmRspCb_SDK,AriSdk::ARI_CsiIceCltmReq_SDK>(AriSdk::ARI_CsiIceCltmReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93E010;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceCltmRspCb_SDK,AriSdk::ARI_CsiIceCltmReq_SDK>(AriSdk::ARI_CsiIceCltmReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceCltmRspCb_SDK,AriSdk::ARI_CsiIceCltmReq_SDK>(AriSdk::ARI_CsiIceCltmReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(void *a1)
{
  uint64_t v2 = a1[8];
  if (v2) {
    dispatch_release(v2);
  }
  char v3 = (const void *)a1[7];
  if (v3) {
    _Block_release(v3);
  }
  xpc_object_t v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceCltmRspCb_SDK,AriSdk::ARI_CsiIceCltmReq_SDK>(AriSdk::ARI_CsiIceCltmReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>(void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceCltmRspCb_SDK,AriSdk::ARI_CsiIceCltmReq_SDK>(AriSdk::ARI_CsiIceCltmReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceCltmRspCb_SDK,AriSdk::ARI_CsiIceCltmReq_SDK>(AriSdk::ARI_CsiIceCltmReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1},dispatch_queue_s *::default_delete<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceCltmRspCb_SDK,AriSdk::ARI_CsiIceCltmReq_SDK>(AriSdk::ARI_CsiIceCltmReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v2 = *a1;
  char v3 = *(unsigned char *)(*a1 + 16);
  xpc_object_t v4 = xpc_null_create();
  if (*(void *)v2) {
    uint64_t v5 = _Block_copy(*(const void **)v2);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(NSObject **)(v2 + 8);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_42_0;
  if (v5)
  {
    char v12 = v3;
    aBlocunint64_t k = _Block_copy(v5);
    xpc_object_t object = v4;
    if (v4)
    {
LABEL_6:
      xpc_retain(v4);
      goto LABEL_9;
    }
  }
  else
  {
    char v12 = v3;
    aBlocunint64_t k = 0;
    xpc_object_t object = v4;
    if (v4) {
      goto LABEL_6;
    }
  }
  xpc_object_t object = xpc_null_create();
LABEL_9:
  dispatch_async(v6, block);
  xpc_release(object);
  xpc_object_t object = 0;
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v5) {
    _Block_release(v5);
  }
  xpc_release(v4);
  uint64_t v7 = *(NSObject **)(v2 + 8);
  if (v7) {
    dispatch_release(v7);
  }
  if (*(void *)v2) {
    _Block_release(*(const void **)v2);
  }
  operator delete((void *)v2);
  xpc_object_t v8 = (std::__shared_weak_count *)a1[2];
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  operator delete(a1);
}

void *antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarWaitTimeRspCb_SDK,AriSdk::ARI_CsiIceSarWaitTimeReq_SDK>(AriSdk::ARI_CsiIceSarWaitTimeReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::~callback(void *a1)
{
  uint64_t v2 = a1[5];
  if (v2) {
    dispatch_release(v2);
  }
  char v3 = (const void *)a1[4];
  if (v3) {
    _Block_release(v3);
  }
  xpc_object_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk30ARI_CsiIceSarWaitTimeRspCb_SDKENS5_28ARI_CsiIceSarWaitTimeReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  if (v2)
  {
    char v3 = (std::__shared_weak_count *)v2[2];
    if (v3)
    {
      uint64_t v5 = *v2;
      uint64_t v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        uint64_t v7 = v6;
        xpc_object_t v8 = (void *)v2[1];
        if (!v8) {
          goto LABEL_21;
        }
        unint64_t v26 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
        void v25[2] = v9;
        v25[3] = v9;
        v25[0] = v9;
        v25[1] = v9;
        AriSdk::ARI_CsiIceSarWaitTimeRspCb_SDK::ARI_CsiIceSarWaitTimeRspCb_SDK((AriSdk::ARI_CsiIceSarWaitTimeRspCb_SDK *)v25, a2);
        if (!v2[4] || !v2[5])
        {
LABEL_20:
          MEMORY[0x237DF5EF0](v25);
LABEL_21:
          if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        unint64_t GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v25);
        int v11 = (Ari *)((GMID >> 17) & 0xFFFF8000 | (GMID << 26));
        if (v11 == 67600384 || v11 != *((_DWORD *)v2 + 6))
        {
          __int16 v13 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            uint64_t v24 = Ari::MsgNameById(v11);
            *(_DWORD *)long long buf = 136315138;
            uint64_t v28 = v24;
            _os_log_error_impl(&dword_235DB9000, v13, OS_LOG_TYPE_ERROR, "Response %s is invalid", buf, 0xCu);
          }
          char v12 = 0;
        }
        else
        {
          char v12 = 1;
        }
        int v14 = (const void *)v2[4];
        if (v14)
        {
          uint64_t v15 = _Block_copy(v14);
          size_t v16 = v2[5];
          if (!v16) {
            goto LABEL_16;
          }
        }
        else
        {
          uint64_t v15 = 0;
          size_t v16 = v2[5];
          if (!v16)
          {
LABEL_16:
            uint64_t v17 = (std::__shared_weak_count *)v8[10];
            if (!v17 || (uint64_t v18 = v8[9], (v19 = std::__shared_weak_count::lock(v17)) == 0)) {
              std::__throw_bad_weak_ptr[abi:ne180100]();
            }
            unint64_t v20 = v19;
            unint64_t v21 = operator new(0x18uLL);
            *unint64_t v21 = v15;
            v21[1] = v16;
            *((unsigned char *)v21 + 16) = v12;
            uint64_t v22 = v8[11];
            atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
            long long v23 = operator new(0x18uLL);
            void *v23 = v21;
            v23[1] = v18;
            v23[2] = v20;
            dispatch_async_f(v22, v23, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarWaitTimeRspCb_SDK,AriSdk::ARI_CsiIceSarWaitTimeReq_SDK>(AriSdk::ARI_CsiIceSarWaitTimeReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>(void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarWaitTimeRspCb_SDK,AriSdk::ARI_CsiIceSarWaitTimeReq_SDK>(AriSdk::ARI_CsiIceSarWaitTimeReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarWaitTimeRspCb_SDK,AriSdk::ARI_CsiIceSarWaitTimeReq_SDK>(AriSdk::ARI_CsiIceSarWaitTimeReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1},dispatch_queue_s *::default_delete<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarWaitTimeRspCb_SDK,AriSdk::ARI_CsiIceSarWaitTimeReq_SDK>(AriSdk::ARI_CsiIceSarWaitTimeReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
            if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
            goto LABEL_20;
          }
        }
        dispatch_retain(v16);
        goto LABEL_16;
      }
    }
  }
}

void sub_235E0A8B0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t __copy_helper_block_e8_32c211_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk30ARI_CsiIceSarWaitTimeRspCb_SDKENS4_28ARI_CsiIceSarWaitTimeReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c211_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk30ARI_CsiIceSarWaitTimeRspCb_SDKENS4_28ARI_CsiIceSarWaitTimeReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_EE(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarWaitTimeRspCb_SDK,AriSdk::ARI_CsiIceSarWaitTimeReq_SDK>(AriSdk::ARI_CsiIceSarWaitTimeReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarWaitTimeRspCb_SDK,AriSdk::ARI_CsiIceSarWaitTimeReq_SDK>(AriSdk::ARI_CsiIceSarWaitTimeReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93E090;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarWaitTimeRspCb_SDK,AriSdk::ARI_CsiIceSarWaitTimeReq_SDK>(AriSdk::ARI_CsiIceSarWaitTimeReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarWaitTimeRspCb_SDK,AriSdk::ARI_CsiIceSarWaitTimeReq_SDK>(AriSdk::ARI_CsiIceSarWaitTimeReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93E090;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarWaitTimeRspCb_SDK,AriSdk::ARI_CsiIceSarWaitTimeReq_SDK>(AriSdk::ARI_CsiIceSarWaitTimeReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarWaitTimeRspCb_SDK,AriSdk::ARI_CsiIceSarWaitTimeReq_SDK>(AriSdk::ARI_CsiIceSarWaitTimeReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(void *a1)
{
  uint64_t v2 = a1[8];
  if (v2) {
    dispatch_release(v2);
  }
  char v3 = (const void *)a1[7];
  if (v3) {
    _Block_release(v3);
  }
  xpc_object_t v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarWaitTimeRspCb_SDK,AriSdk::ARI_CsiIceSarWaitTimeReq_SDK>(AriSdk::ARI_CsiIceSarWaitTimeReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>(void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarWaitTimeRspCb_SDK,AriSdk::ARI_CsiIceSarWaitTimeReq_SDK>(AriSdk::ARI_CsiIceSarWaitTimeReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarWaitTimeRspCb_SDK,AriSdk::ARI_CsiIceSarWaitTimeReq_SDK>(AriSdk::ARI_CsiIceSarWaitTimeReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1},dispatch_queue_s *::default_delete<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSarWaitTimeRspCb_SDK,AriSdk::ARI_CsiIceSarWaitTimeReq_SDK>(AriSdk::ARI_CsiIceSarWaitTimeReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v2 = *a1;
  char v3 = *(unsigned char *)(*a1 + 16);
  xpc_object_t v4 = xpc_null_create();
  if (*(void *)v2) {
    uint64_t v5 = _Block_copy(*(const void **)v2);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(NSObject **)(v2 + 8);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_42_0;
  if (v5)
  {
    char v12 = v3;
    aBlocunint64_t k = _Block_copy(v5);
    xpc_object_t object = v4;
    if (v4)
    {
LABEL_6:
      xpc_retain(v4);
      goto LABEL_9;
    }
  }
  else
  {
    char v12 = v3;
    aBlocunint64_t k = 0;
    xpc_object_t object = v4;
    if (v4) {
      goto LABEL_6;
    }
  }
  xpc_object_t object = xpc_null_create();
LABEL_9:
  dispatch_async(v6, block);
  xpc_release(object);
  xpc_object_t object = 0;
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v5) {
    _Block_release(v5);
  }
  xpc_release(v4);
  uint64_t v7 = *(NSObject **)(v2 + 8);
  if (v7) {
    dispatch_release(v7);
  }
  if (*(void *)v2) {
    _Block_release(*(const void **)v2);
  }
  operator delete((void *)v2);
  xpc_object_t v8 = (std::__shared_weak_count *)a1[2];
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  operator delete(a1);
}

void *antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceAccessoryStateRspCb_SDK,AriSdk::ARI_CsiIceAccessoryStateReq_SDK>(AriSdk::ARI_CsiIceAccessoryStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::~callback(void *a1)
{
  uint64_t v2 = a1[5];
  if (v2) {
    dispatch_release(v2);
  }
  char v3 = (const void *)a1[4];
  if (v3) {
    _Block_release(v3);
  }
  xpc_object_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk33ARI_CsiIceAccessoryStateRspCb_SDKENS5_31ARI_CsiIceAccessoryStateReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  if (v2)
  {
    char v3 = (std::__shared_weak_count *)v2[2];
    if (v3)
    {
      uint64_t v5 = *v2;
      uint64_t v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        uint64_t v7 = v6;
        xpc_object_t v8 = (void *)v2[1];
        if (!v8) {
          goto LABEL_21;
        }
        unint64_t v26 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
        void v25[2] = v9;
        v25[3] = v9;
        v25[0] = v9;
        v25[1] = v9;
        AriSdk::ARI_CsiIceAccessoryStateRspCb_SDK::ARI_CsiIceAccessoryStateRspCb_SDK((AriSdk::ARI_CsiIceAccessoryStateRspCb_SDK *)v25, a2);
        if (!v2[4] || !v2[5])
        {
LABEL_20:
          MEMORY[0x237DF6430](v25);
LABEL_21:
          if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        unint64_t GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v25);
        int v11 = (Ari *)((GMID >> 17) & 0xFFFF8000 | (GMID << 26));
        if (v11 == 67600384 || v11 != *((_DWORD *)v2 + 6))
        {
          __int16 v13 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            uint64_t v24 = Ari::MsgNameById(v11);
            *(_DWORD *)long long buf = 136315138;
            uint64_t v28 = v24;
            _os_log_error_impl(&dword_235DB9000, v13, OS_LOG_TYPE_ERROR, "Response %s is invalid", buf, 0xCu);
          }
          char v12 = 0;
        }
        else
        {
          char v12 = 1;
        }
        int v14 = (const void *)v2[4];
        if (v14)
        {
          uint64_t v15 = _Block_copy(v14);
          size_t v16 = v2[5];
          if (!v16) {
            goto LABEL_16;
          }
        }
        else
        {
          uint64_t v15 = 0;
          size_t v16 = v2[5];
          if (!v16)
          {
LABEL_16:
            uint64_t v17 = (std::__shared_weak_count *)v8[10];
            if (!v17 || (uint64_t v18 = v8[9], (v19 = std::__shared_weak_count::lock(v17)) == 0)) {
              std::__throw_bad_weak_ptr[abi:ne180100]();
            }
            unint64_t v20 = v19;
            unint64_t v21 = operator new(0x18uLL);
            *unint64_t v21 = v15;
            v21[1] = v16;
            *((unsigned char *)v21 + 16) = v12;
            uint64_t v22 = v8[11];
            atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
            long long v23 = operator new(0x18uLL);
            void *v23 = v21;
            v23[1] = v18;
            v23[2] = v20;
            dispatch_async_f(v22, v23, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceAccessoryStateRspCb_SDK,AriSdk::ARI_CsiIceAccessoryStateReq_SDK>(AriSdk::ARI_CsiIceAccessoryStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>(void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceAccessoryStateRspCb_SDK,AriSdk::ARI_CsiIceAccessoryStateReq_SDK>(AriSdk::ARI_CsiIceAccessoryStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceAccessoryStateRspCb_SDK,AriSdk::ARI_CsiIceAccessoryStateReq_SDK>(AriSdk::ARI_CsiIceAccessoryStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1},dispatch_queue_s *::default_delete<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceAccessoryStateRspCb_SDK,AriSdk::ARI_CsiIceAccessoryStateReq_SDK>(AriSdk::ARI_CsiIceAccessoryStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
            if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
            goto LABEL_20;
          }
        }
        dispatch_retain(v16);
        goto LABEL_16;
      }
    }
  }
}

void sub_235E0AF0C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t __copy_helper_block_e8_32c217_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk33ARI_CsiIceAccessoryStateRspCb_SDKENS4_31ARI_CsiIceAccessoryStateReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c217_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk33ARI_CsiIceAccessoryStateRspCb_SDKENS4_31ARI_CsiIceAccessoryStateReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_EE(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceAccessoryStateRspCb_SDK,AriSdk::ARI_CsiIceAccessoryStateReq_SDK>(AriSdk::ARI_CsiIceAccessoryStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceAccessoryStateRspCb_SDK,AriSdk::ARI_CsiIceAccessoryStateReq_SDK>(AriSdk::ARI_CsiIceAccessoryStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93E110;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceAccessoryStateRspCb_SDK,AriSdk::ARI_CsiIceAccessoryStateReq_SDK>(AriSdk::ARI_CsiIceAccessoryStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceAccessoryStateRspCb_SDK,AriSdk::ARI_CsiIceAccessoryStateReq_SDK>(AriSdk::ARI_CsiIceAccessoryStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93E110;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceAccessoryStateRspCb_SDK,AriSdk::ARI_CsiIceAccessoryStateReq_SDK>(AriSdk::ARI_CsiIceAccessoryStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceAccessoryStateRspCb_SDK,AriSdk::ARI_CsiIceAccessoryStateReq_SDK>(AriSdk::ARI_CsiIceAccessoryStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(void *a1)
{
  uint64_t v2 = a1[8];
  if (v2) {
    dispatch_release(v2);
  }
  char v3 = (const void *)a1[7];
  if (v3) {
    _Block_release(v3);
  }
  xpc_object_t v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceAccessoryStateRspCb_SDK,AriSdk::ARI_CsiIceAccessoryStateReq_SDK>(AriSdk::ARI_CsiIceAccessoryStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>(void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceAccessoryStateRspCb_SDK,AriSdk::ARI_CsiIceAccessoryStateReq_SDK>(AriSdk::ARI_CsiIceAccessoryStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceAccessoryStateRspCb_SDK,AriSdk::ARI_CsiIceAccessoryStateReq_SDK>(AriSdk::ARI_CsiIceAccessoryStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1},dispatch_queue_s *::default_delete<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceAccessoryStateRspCb_SDK,AriSdk::ARI_CsiIceAccessoryStateReq_SDK>(AriSdk::ARI_CsiIceAccessoryStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v2 = *a1;
  char v3 = *(unsigned char *)(*a1 + 16);
  xpc_object_t v4 = xpc_null_create();
  if (*(void *)v2) {
    uint64_t v5 = _Block_copy(*(const void **)v2);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(NSObject **)(v2 + 8);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_42_0;
  if (v5)
  {
    char v12 = v3;
    aBlocunint64_t k = _Block_copy(v5);
    xpc_object_t object = v4;
    if (v4)
    {
LABEL_6:
      xpc_retain(v4);
      goto LABEL_9;
    }
  }
  else
  {
    char v12 = v3;
    aBlocunint64_t k = 0;
    xpc_object_t object = v4;
    if (v4) {
      goto LABEL_6;
    }
  }
  xpc_object_t object = xpc_null_create();
LABEL_9:
  dispatch_async(v6, block);
  xpc_release(object);
  xpc_object_t object = 0;
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v5) {
    _Block_release(v5);
  }
  xpc_release(v4);
  uint64_t v7 = *(NSObject **)(v2 + 8);
  if (v7) {
    dispatch_release(v7);
  }
  if (*(void *)v2) {
    _Block_release(*(const void **)v2);
  }
  operator delete((void *)v2);
  xpc_object_t v8 = (std::__shared_weak_count *)a1[2];
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  operator delete(a1);
}

void *antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceAccessoryStateArtdRspCb_SDK,AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK>(AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::~callback(void *a1)
{
  uint64_t v2 = a1[5];
  if (v2) {
    dispatch_release(v2);
  }
  char v3 = (const void *)a1[4];
  if (v3) {
    _Block_release(v3);
  }
  xpc_object_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk37ARI_CsiIceAccessoryStateArtdRspCb_SDKENS5_35ARI_CsiIceAccessoryStateArtdReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  if (v2)
  {
    char v3 = (std::__shared_weak_count *)v2[2];
    if (v3)
    {
      uint64_t v5 = *v2;
      uint64_t v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        uint64_t v7 = v6;
        xpc_object_t v8 = (void *)v2[1];
        if (!v8) {
          goto LABEL_21;
        }
        unint64_t v26 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
        void v25[2] = v9;
        v25[3] = v9;
        v25[0] = v9;
        v25[1] = v9;
        AriSdk::ARI_CsiIceAccessoryStateArtdRspCb_SDK::ARI_CsiIceAccessoryStateArtdRspCb_SDK((AriSdk::ARI_CsiIceAccessoryStateArtdRspCb_SDK *)v25, a2);
        if (!v2[4] || !v2[5])
        {
LABEL_20:
          MEMORY[0x237DF68A0](v25);
LABEL_21:
          if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        unint64_t GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v25);
        int v11 = (Ari *)((GMID >> 17) & 0xFFFF8000 | (GMID << 26));
        if (v11 == 67600384 || v11 != *((_DWORD *)v2 + 6))
        {
          __int16 v13 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            uint64_t v24 = Ari::MsgNameById(v11);
            *(_DWORD *)long long buf = 136315138;
            uint64_t v28 = v24;
            _os_log_error_impl(&dword_235DB9000, v13, OS_LOG_TYPE_ERROR, "Response %s is invalid", buf, 0xCu);
          }
          char v12 = 0;
        }
        else
        {
          char v12 = 1;
        }
        int v14 = (const void *)v2[4];
        if (v14)
        {
          uint64_t v15 = _Block_copy(v14);
          size_t v16 = v2[5];
          if (!v16) {
            goto LABEL_16;
          }
        }
        else
        {
          uint64_t v15 = 0;
          size_t v16 = v2[5];
          if (!v16)
          {
LABEL_16:
            uint64_t v17 = (std::__shared_weak_count *)v8[10];
            if (!v17 || (uint64_t v18 = v8[9], (v19 = std::__shared_weak_count::lock(v17)) == 0)) {
              std::__throw_bad_weak_ptr[abi:ne180100]();
            }
            unint64_t v20 = v19;
            unint64_t v21 = operator new(0x18uLL);
            *unint64_t v21 = v15;
            v21[1] = v16;
            *((unsigned char *)v21 + 16) = v12;
            uint64_t v22 = v8[11];
            atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
            long long v23 = operator new(0x18uLL);
            void *v23 = v21;
            v23[1] = v18;
            v23[2] = v20;
            dispatch_async_f(v22, v23, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceAccessoryStateArtdRspCb_SDK,AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK>(AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>(void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceAccessoryStateArtdRspCb_SDK,AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK>(AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceAccessoryStateArtdRspCb_SDK,AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK>(AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1},dispatch_queue_s *::default_delete<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceAccessoryStateArtdRspCb_SDK,AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK>(AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
            if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
            goto LABEL_20;
          }
        }
        dispatch_retain(v16);
        goto LABEL_16;
      }
    }
  }
}

void sub_235E0B568(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t __copy_helper_block_e8_32c225_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk37ARI_CsiIceAccessoryStateArtdRspCb_SDKENS4_35ARI_CsiIceAccessoryStateArtdReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c225_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk37ARI_CsiIceAccessoryStateArtdRspCb_SDKENS4_35ARI_CsiIceAccessoryStateArtdReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_EE(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceAccessoryStateArtdRspCb_SDK,AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK>(AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceAccessoryStateArtdRspCb_SDK,AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK>(AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93E190;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceAccessoryStateArtdRspCb_SDK,AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK>(AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceAccessoryStateArtdRspCb_SDK,AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK>(AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93E190;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceAccessoryStateArtdRspCb_SDK,AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK>(AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceAccessoryStateArtdRspCb_SDK,AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK>(AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(void *a1)
{
  uint64_t v2 = a1[8];
  if (v2) {
    dispatch_release(v2);
  }
  char v3 = (const void *)a1[7];
  if (v3) {
    _Block_release(v3);
  }
  xpc_object_t v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceAccessoryStateArtdRspCb_SDK,AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK>(AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>(void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceAccessoryStateArtdRspCb_SDK,AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK>(AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceAccessoryStateArtdRspCb_SDK,AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK>(AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1},dispatch_queue_s *::default_delete<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceAccessoryStateArtdRspCb_SDK,AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK>(AriSdk::ARI_CsiIceAccessoryStateArtdReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v2 = *a1;
  char v3 = *(unsigned char *)(*a1 + 16);
  xpc_object_t v4 = xpc_null_create();
  if (*(void *)v2) {
    uint64_t v5 = _Block_copy(*(const void **)v2);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(NSObject **)(v2 + 8);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_42_0;
  if (v5)
  {
    char v12 = v3;
    aBlocunint64_t k = _Block_copy(v5);
    xpc_object_t object = v4;
    if (v4)
    {
LABEL_6:
      xpc_retain(v4);
      goto LABEL_9;
    }
  }
  else
  {
    char v12 = v3;
    aBlocunint64_t k = 0;
    xpc_object_t object = v4;
    if (v4) {
      goto LABEL_6;
    }
  }
  xpc_object_t object = xpc_null_create();
LABEL_9:
  dispatch_async(v6, block);
  xpc_release(object);
  xpc_object_t object = 0;
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v5) {
    _Block_release(v5);
  }
  xpc_release(v4);
  uint64_t v7 = *(NSObject **)(v2 + 8);
  if (v7) {
    dispatch_release(v7);
  }
  if (*(void *)v2) {
    _Block_release(*(const void **)v2);
  }
  operator delete((void *)v2);
  xpc_object_t v8 = (std::__shared_weak_count *)a1[2];
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  operator delete(a1);
}

void *antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSpeakerStateRspCb_SDK,AriSdk::ARI_CsiIceSpeakerStateReq_SDK>(AriSdk::ARI_CsiIceSpeakerStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::~callback(void *a1)
{
  uint64_t v2 = a1[5];
  if (v2) {
    dispatch_release(v2);
  }
  char v3 = (const void *)a1[4];
  if (v3) {
    _Block_release(v3);
  }
  xpc_object_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk31ARI_CsiIceSpeakerStateRspCb_SDKENS5_29ARI_CsiIceSpeakerStateReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  if (v2)
  {
    char v3 = (std::__shared_weak_count *)v2[2];
    if (v3)
    {
      uint64_t v5 = *v2;
      uint64_t v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        uint64_t v7 = v6;
        xpc_object_t v8 = (void *)v2[1];
        if (!v8) {
          goto LABEL_21;
        }
        unint64_t v26 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
        void v25[2] = v9;
        v25[3] = v9;
        v25[0] = v9;
        v25[1] = v9;
        AriSdk::ARI_CsiIceSpeakerStateRspCb_SDK::ARI_CsiIceSpeakerStateRspCb_SDK((AriSdk::ARI_CsiIceSpeakerStateRspCb_SDK *)v25, a2);
        if (!v2[4] || !v2[5])
        {
LABEL_20:
          MEMORY[0x237DF6130](v25);
LABEL_21:
          if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        unint64_t GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v25);
        int v11 = (Ari *)((GMID >> 17) & 0xFFFF8000 | (GMID << 26));
        if (v11 == 67600384 || v11 != *((_DWORD *)v2 + 6))
        {
          __int16 v13 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            uint64_t v24 = Ari::MsgNameById(v11);
            *(_DWORD *)long long buf = 136315138;
            uint64_t v28 = v24;
            _os_log_error_impl(&dword_235DB9000, v13, OS_LOG_TYPE_ERROR, "Response %s is invalid", buf, 0xCu);
          }
          char v12 = 0;
        }
        else
        {
          char v12 = 1;
        }
        int v14 = (const void *)v2[4];
        if (v14)
        {
          uint64_t v15 = _Block_copy(v14);
          size_t v16 = v2[5];
          if (!v16) {
            goto LABEL_16;
          }
        }
        else
        {
          uint64_t v15 = 0;
          size_t v16 = v2[5];
          if (!v16)
          {
LABEL_16:
            uint64_t v17 = (std::__shared_weak_count *)v8[10];
            if (!v17 || (uint64_t v18 = v8[9], (v19 = std::__shared_weak_count::lock(v17)) == 0)) {
              std::__throw_bad_weak_ptr[abi:ne180100]();
            }
            unint64_t v20 = v19;
            unint64_t v21 = operator new(0x18uLL);
            *unint64_t v21 = v15;
            v21[1] = v16;
            *((unsigned char *)v21 + 16) = v12;
            uint64_t v22 = v8[11];
            atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
            long long v23 = operator new(0x18uLL);
            void *v23 = v21;
            v23[1] = v18;
            v23[2] = v20;
            dispatch_async_f(v22, v23, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSpeakerStateRspCb_SDK,AriSdk::ARI_CsiIceSpeakerStateReq_SDK>(AriSdk::ARI_CsiIceSpeakerStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>(void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSpeakerStateRspCb_SDK,AriSdk::ARI_CsiIceSpeakerStateReq_SDK>(AriSdk::ARI_CsiIceSpeakerStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSpeakerStateRspCb_SDK,AriSdk::ARI_CsiIceSpeakerStateReq_SDK>(AriSdk::ARI_CsiIceSpeakerStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1},dispatch_queue_s *::default_delete<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSpeakerStateRspCb_SDK,AriSdk::ARI_CsiIceSpeakerStateReq_SDK>(AriSdk::ARI_CsiIceSpeakerStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
            if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
            goto LABEL_20;
          }
        }
        dispatch_retain(v16);
        goto LABEL_16;
      }
    }
  }
}

void sub_235E0BBC4(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t __copy_helper_block_e8_32c213_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk31ARI_CsiIceSpeakerStateRspCb_SDKENS4_29ARI_CsiIceSpeakerStateReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c213_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk31ARI_CsiIceSpeakerStateRspCb_SDKENS4_29ARI_CsiIceSpeakerStateReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_EE(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSpeakerStateRspCb_SDK,AriSdk::ARI_CsiIceSpeakerStateReq_SDK>(AriSdk::ARI_CsiIceSpeakerStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSpeakerStateRspCb_SDK,AriSdk::ARI_CsiIceSpeakerStateReq_SDK>(AriSdk::ARI_CsiIceSpeakerStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93E210;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSpeakerStateRspCb_SDK,AriSdk::ARI_CsiIceSpeakerStateReq_SDK>(AriSdk::ARI_CsiIceSpeakerStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSpeakerStateRspCb_SDK,AriSdk::ARI_CsiIceSpeakerStateReq_SDK>(AriSdk::ARI_CsiIceSpeakerStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93E210;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSpeakerStateRspCb_SDK,AriSdk::ARI_CsiIceSpeakerStateReq_SDK>(AriSdk::ARI_CsiIceSpeakerStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSpeakerStateRspCb_SDK,AriSdk::ARI_CsiIceSpeakerStateReq_SDK>(AriSdk::ARI_CsiIceSpeakerStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(void *a1)
{
  uint64_t v2 = a1[8];
  if (v2) {
    dispatch_release(v2);
  }
  char v3 = (const void *)a1[7];
  if (v3) {
    _Block_release(v3);
  }
  xpc_object_t v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSpeakerStateRspCb_SDK,AriSdk::ARI_CsiIceSpeakerStateReq_SDK>(AriSdk::ARI_CsiIceSpeakerStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>(void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSpeakerStateRspCb_SDK,AriSdk::ARI_CsiIceSpeakerStateReq_SDK>(AriSdk::ARI_CsiIceSpeakerStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSpeakerStateRspCb_SDK,AriSdk::ARI_CsiIceSpeakerStateReq_SDK>(AriSdk::ARI_CsiIceSpeakerStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1},dispatch_queue_s *::default_delete<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceSpeakerStateRspCb_SDK,AriSdk::ARI_CsiIceSpeakerStateReq_SDK>(AriSdk::ARI_CsiIceSpeakerStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v2 = *a1;
  char v3 = *(unsigned char *)(*a1 + 16);
  xpc_object_t v4 = xpc_null_create();
  if (*(void *)v2) {
    uint64_t v5 = _Block_copy(*(const void **)v2);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(NSObject **)(v2 + 8);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_42_0;
  if (v5)
  {
    char v12 = v3;
    aBlocunint64_t k = _Block_copy(v5);
    xpc_object_t object = v4;
    if (v4)
    {
LABEL_6:
      xpc_retain(v4);
      goto LABEL_9;
    }
  }
  else
  {
    char v12 = v3;
    aBlocunint64_t k = 0;
    xpc_object_t object = v4;
    if (v4) {
      goto LABEL_6;
    }
  }
  xpc_object_t object = xpc_null_create();
LABEL_9:
  dispatch_async(v6, block);
  xpc_release(object);
  xpc_object_t object = 0;
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v5) {
    _Block_release(v5);
  }
  xpc_release(v4);
  uint64_t v7 = *(NSObject **)(v2 + 8);
  if (v7) {
    dispatch_release(v7);
  }
  if (*(void *)v2) {
    _Block_release(*(const void **)v2);
  }
  operator delete((void *)v2);
  xpc_object_t v8 = (std::__shared_weak_count *)a1[2];
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  operator delete(a1);
}

void *antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceGripStateRspCb_SDK,AriSdk::ARI_CsiIceGripStateReq_SDK>(AriSdk::ARI_CsiIceGripStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::~callback(void *a1)
{
  uint64_t v2 = a1[5];
  if (v2) {
    dispatch_release(v2);
  }
  char v3 = (const void *)a1[4];
  if (v3) {
    _Block_release(v3);
  }
  xpc_object_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk28ARI_CsiIceGripStateRspCb_SDKENS5_26ARI_CsiIceGripStateReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  if (v2)
  {
    char v3 = (std::__shared_weak_count *)v2[2];
    if (v3)
    {
      uint64_t v5 = *v2;
      uint64_t v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        uint64_t v7 = v6;
        xpc_object_t v8 = (void *)v2[1];
        if (!v8) {
          goto LABEL_21;
        }
        unint64_t v26 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
        void v25[2] = v9;
        v25[3] = v9;
        v25[0] = v9;
        v25[1] = v9;
        AriSdk::ARI_CsiIceGripStateRspCb_SDK::ARI_CsiIceGripStateRspCb_SDK((AriSdk::ARI_CsiIceGripStateRspCb_SDK *)v25, a2);
        if (!v2[4] || !v2[5])
        {
LABEL_20:
          MEMORY[0x237DF5AE0](v25);
LABEL_21:
          if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        unint64_t GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v25);
        int v11 = (Ari *)((GMID >> 17) & 0xFFFF8000 | (GMID << 26));
        if (v11 == 67600384 || v11 != *((_DWORD *)v2 + 6))
        {
          __int16 v13 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            uint64_t v24 = Ari::MsgNameById(v11);
            *(_DWORD *)long long buf = 136315138;
            uint64_t v28 = v24;
            _os_log_error_impl(&dword_235DB9000, v13, OS_LOG_TYPE_ERROR, "Response %s is invalid", buf, 0xCu);
          }
          char v12 = 0;
        }
        else
        {
          char v12 = 1;
        }
        int v14 = (const void *)v2[4];
        if (v14)
        {
          uint64_t v15 = _Block_copy(v14);
          size_t v16 = v2[5];
          if (!v16) {
            goto LABEL_16;
          }
        }
        else
        {
          uint64_t v15 = 0;
          size_t v16 = v2[5];
          if (!v16)
          {
LABEL_16:
            uint64_t v17 = (std::__shared_weak_count *)v8[10];
            if (!v17 || (uint64_t v18 = v8[9], (v19 = std::__shared_weak_count::lock(v17)) == 0)) {
              std::__throw_bad_weak_ptr[abi:ne180100]();
            }
            unint64_t v20 = v19;
            unint64_t v21 = operator new(0x18uLL);
            *unint64_t v21 = v15;
            v21[1] = v16;
            *((unsigned char *)v21 + 16) = v12;
            uint64_t v22 = v8[11];
            atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
            long long v23 = operator new(0x18uLL);
            void *v23 = v21;
            v23[1] = v18;
            v23[2] = v20;
            dispatch_async_f(v22, v23, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceGripStateRspCb_SDK,AriSdk::ARI_CsiIceGripStateReq_SDK>(AriSdk::ARI_CsiIceGripStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>(void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceGripStateRspCb_SDK,AriSdk::ARI_CsiIceGripStateReq_SDK>(AriSdk::ARI_CsiIceGripStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceGripStateRspCb_SDK,AriSdk::ARI_CsiIceGripStateReq_SDK>(AriSdk::ARI_CsiIceGripStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1},dispatch_queue_s *::default_delete<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceGripStateRspCb_SDK,AriSdk::ARI_CsiIceGripStateReq_SDK>(AriSdk::ARI_CsiIceGripStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
            if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
            goto LABEL_20;
          }
        }
        dispatch_retain(v16);
        goto LABEL_16;
      }
    }
  }
}

void sub_235E0C220(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t __copy_helper_block_e8_32c207_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk28ARI_CsiIceGripStateRspCb_SDKENS4_26ARI_CsiIceGripStateReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c207_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk28ARI_CsiIceGripStateRspCb_SDKENS4_26ARI_CsiIceGripStateReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_EE(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceGripStateRspCb_SDK,AriSdk::ARI_CsiIceGripStateReq_SDK>(AriSdk::ARI_CsiIceGripStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceGripStateRspCb_SDK,AriSdk::ARI_CsiIceGripStateReq_SDK>(AriSdk::ARI_CsiIceGripStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93E290;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceGripStateRspCb_SDK,AriSdk::ARI_CsiIceGripStateReq_SDK>(AriSdk::ARI_CsiIceGripStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceGripStateRspCb_SDK,AriSdk::ARI_CsiIceGripStateReq_SDK>(AriSdk::ARI_CsiIceGripStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93E290;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceGripStateRspCb_SDK,AriSdk::ARI_CsiIceGripStateReq_SDK>(AriSdk::ARI_CsiIceGripStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceGripStateRspCb_SDK,AriSdk::ARI_CsiIceGripStateReq_SDK>(AriSdk::ARI_CsiIceGripStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(void *a1)
{
  uint64_t v2 = a1[8];
  if (v2) {
    dispatch_release(v2);
  }
  char v3 = (const void *)a1[7];
  if (v3) {
    _Block_release(v3);
  }
  xpc_object_t v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceGripStateRspCb_SDK,AriSdk::ARI_CsiIceGripStateReq_SDK>(AriSdk::ARI_CsiIceGripStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>(void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceGripStateRspCb_SDK,AriSdk::ARI_CsiIceGripStateReq_SDK>(AriSdk::ARI_CsiIceGripStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceGripStateRspCb_SDK,AriSdk::ARI_CsiIceGripStateReq_SDK>(AriSdk::ARI_CsiIceGripStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1},dispatch_queue_s *::default_delete<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIceGripStateRspCb_SDK,AriSdk::ARI_CsiIceGripStateReq_SDK>(AriSdk::ARI_CsiIceGripStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v2 = *a1;
  char v3 = *(unsigned char *)(*a1 + 16);
  xpc_object_t v4 = xpc_null_create();
  if (*(void *)v2) {
    uint64_t v5 = _Block_copy(*(const void **)v2);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(NSObject **)(v2 + 8);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_42_0;
  if (v5)
  {
    char v12 = v3;
    aBlocunint64_t k = _Block_copy(v5);
    xpc_object_t object = v4;
    if (v4)
    {
LABEL_6:
      xpc_retain(v4);
      goto LABEL_9;
    }
  }
  else
  {
    char v12 = v3;
    aBlocunint64_t k = 0;
    xpc_object_t object = v4;
    if (v4) {
      goto LABEL_6;
    }
  }
  xpc_object_t object = xpc_null_create();
LABEL_9:
  dispatch_async(v6, block);
  xpc_release(object);
  xpc_object_t object = 0;
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v5) {
    _Block_release(v5);
  }
  xpc_release(v4);
  uint64_t v7 = *(NSObject **)(v2 + 8);
  if (v7) {
    dispatch_release(v7);
  }
  if (*(void *)v2) {
    _Block_release(*(const void **)v2);
  }
  operator delete((void *)v2);
  xpc_object_t v8 = (std::__shared_weak_count *)a1[2];
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  operator delete(a1);
}

void *antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIcePowerSourceStateRspCb_SDK,AriSdk::ARI_CsiIcePowerSourceStateReq_SDK>(AriSdk::ARI_CsiIcePowerSourceStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::~callback(void *a1)
{
  uint64_t v2 = a1[5];
  if (v2) {
    dispatch_release(v2);
  }
  char v3 = (const void *)a1[4];
  if (v3) {
    _Block_release(v3);
  }
  xpc_object_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk35ARI_CsiIcePowerSourceStateRspCb_SDKENS5_33ARI_CsiIcePowerSourceStateReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  if (v2)
  {
    char v3 = (std::__shared_weak_count *)v2[2];
    if (v3)
    {
      uint64_t v5 = *v2;
      uint64_t v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        uint64_t v7 = v6;
        xpc_object_t v8 = (void *)v2[1];
        if (!v8) {
          goto LABEL_21;
        }
        unint64_t v26 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
        void v25[2] = v9;
        v25[3] = v9;
        v25[0] = v9;
        v25[1] = v9;
        AriSdk::ARI_CsiIcePowerSourceStateRspCb_SDK::ARI_CsiIcePowerSourceStateRspCb_SDK((AriSdk::ARI_CsiIcePowerSourceStateRspCb_SDK *)v25, a2);
        if (!v2[4] || !v2[5])
        {
LABEL_20:
          MEMORY[0x237DF66F0](v25);
LABEL_21:
          if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        unint64_t GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v25);
        int v11 = (Ari *)((GMID >> 17) & 0xFFFF8000 | (GMID << 26));
        if (v11 == 67600384 || v11 != *((_DWORD *)v2 + 6))
        {
          __int16 v13 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            uint64_t v24 = Ari::MsgNameById(v11);
            *(_DWORD *)long long buf = 136315138;
            uint64_t v28 = v24;
            _os_log_error_impl(&dword_235DB9000, v13, OS_LOG_TYPE_ERROR, "Response %s is invalid", buf, 0xCu);
          }
          char v12 = 0;
        }
        else
        {
          char v12 = 1;
        }
        int v14 = (const void *)v2[4];
        if (v14)
        {
          uint64_t v15 = _Block_copy(v14);
          size_t v16 = v2[5];
          if (!v16) {
            goto LABEL_16;
          }
        }
        else
        {
          uint64_t v15 = 0;
          size_t v16 = v2[5];
          if (!v16)
          {
LABEL_16:
            uint64_t v17 = (std::__shared_weak_count *)v8[10];
            if (!v17 || (uint64_t v18 = v8[9], (v19 = std::__shared_weak_count::lock(v17)) == 0)) {
              std::__throw_bad_weak_ptr[abi:ne180100]();
            }
            unint64_t v20 = v19;
            unint64_t v21 = operator new(0x18uLL);
            *unint64_t v21 = v15;
            v21[1] = v16;
            *((unsigned char *)v21 + 16) = v12;
            uint64_t v22 = v8[11];
            atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
            long long v23 = operator new(0x18uLL);
            void *v23 = v21;
            v23[1] = v18;
            v23[2] = v20;
            dispatch_async_f(v22, v23, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIcePowerSourceStateRspCb_SDK,AriSdk::ARI_CsiIcePowerSourceStateReq_SDK>(AriSdk::ARI_CsiIcePowerSourceStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>(void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIcePowerSourceStateRspCb_SDK,AriSdk::ARI_CsiIcePowerSourceStateReq_SDK>(AriSdk::ARI_CsiIcePowerSourceStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIcePowerSourceStateRspCb_SDK,AriSdk::ARI_CsiIcePowerSourceStateReq_SDK>(AriSdk::ARI_CsiIcePowerSourceStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1},dispatch_queue_s *::default_delete<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIcePowerSourceStateRspCb_SDK,AriSdk::ARI_CsiIcePowerSourceStateReq_SDK>(AriSdk::ARI_CsiIcePowerSourceStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
            if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
            goto LABEL_20;
          }
        }
        dispatch_retain(v16);
        goto LABEL_16;
      }
    }
  }
}

void sub_235E0C87C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t __copy_helper_block_e8_32c221_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk35ARI_CsiIcePowerSourceStateRspCb_SDKENS4_33ARI_CsiIcePowerSourceStateReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c221_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk35ARI_CsiIcePowerSourceStateRspCb_SDKENS4_33ARI_CsiIcePowerSourceStateReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_EE(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIcePowerSourceStateRspCb_SDK,AriSdk::ARI_CsiIcePowerSourceStateReq_SDK>(AriSdk::ARI_CsiIcePowerSourceStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIcePowerSourceStateRspCb_SDK,AriSdk::ARI_CsiIcePowerSourceStateReq_SDK>(AriSdk::ARI_CsiIcePowerSourceStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93E310;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIcePowerSourceStateRspCb_SDK,AriSdk::ARI_CsiIcePowerSourceStateReq_SDK>(AriSdk::ARI_CsiIcePowerSourceStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIcePowerSourceStateRspCb_SDK,AriSdk::ARI_CsiIcePowerSourceStateReq_SDK>(AriSdk::ARI_CsiIcePowerSourceStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93E310;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIcePowerSourceStateRspCb_SDK,AriSdk::ARI_CsiIcePowerSourceStateReq_SDK>(AriSdk::ARI_CsiIcePowerSourceStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIcePowerSourceStateRspCb_SDK,AriSdk::ARI_CsiIcePowerSourceStateReq_SDK>(AriSdk::ARI_CsiIcePowerSourceStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(void *a1)
{
  uint64_t v2 = a1[8];
  if (v2) {
    dispatch_release(v2);
  }
  char v3 = (const void *)a1[7];
  if (v3) {
    _Block_release(v3);
  }
  xpc_object_t v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIcePowerSourceStateRspCb_SDK,AriSdk::ARI_CsiIcePowerSourceStateReq_SDK>(AriSdk::ARI_CsiIcePowerSourceStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>(void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIcePowerSourceStateRspCb_SDK,AriSdk::ARI_CsiIcePowerSourceStateReq_SDK>(AriSdk::ARI_CsiIcePowerSourceStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIcePowerSourceStateRspCb_SDK,AriSdk::ARI_CsiIcePowerSourceStateReq_SDK>(AriSdk::ARI_CsiIcePowerSourceStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1},dispatch_queue_s *::default_delete<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_CsiIcePowerSourceStateRspCb_SDK,AriSdk::ARI_CsiIcePowerSourceStateReq_SDK>(AriSdk::ARI_CsiIcePowerSourceStateReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v2 = *a1;
  char v3 = *(unsigned char *)(*a1 + 16);
  xpc_object_t v4 = xpc_null_create();
  if (*(void *)v2) {
    uint64_t v5 = _Block_copy(*(const void **)v2);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(NSObject **)(v2 + 8);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_42_0;
  if (v5)
  {
    char v12 = v3;
    aBlocunint64_t k = _Block_copy(v5);
    xpc_object_t object = v4;
    if (v4)
    {
LABEL_6:
      xpc_retain(v4);
      goto LABEL_9;
    }
  }
  else
  {
    char v12 = v3;
    aBlocunint64_t k = 0;
    xpc_object_t object = v4;
    if (v4) {
      goto LABEL_6;
    }
  }
  xpc_object_t object = xpc_null_create();
LABEL_9:
  dispatch_async(v6, block);
  xpc_release(object);
  xpc_object_t object = 0;
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v5) {
    _Block_release(v5);
  }
  xpc_release(v4);
  uint64_t v7 = *(NSObject **)(v2 + 8);
  if (v7) {
    dispatch_release(v7);
  }
  if (*(void *)v2) {
    _Block_release(*(const void **)v2);
  }
  operator delete((void *)v2);
  xpc_object_t v8 = (std::__shared_weak_count *)a1[2];
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  operator delete(a1);
}

void *antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK,AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK>(AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::~callback(void *a1)
{
  uint64_t v2 = a1[5];
  if (v2) {
    dispatch_release(v2);
  }
  char v3 = (const void *)a1[4];
  if (v3) {
    _Block_release(v3);
  }
  xpc_object_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk45ARI_IBICpsConfigureCellularPowerReportRsp_SDKENS5_45ARI_IBICpsConfigureCellularPowerReportReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  if (v2)
  {
    char v3 = (std::__shared_weak_count *)v2[2];
    if (v3)
    {
      uint64_t v5 = *v2;
      uint64_t v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        uint64_t v7 = v6;
        xpc_object_t v8 = (void *)v2[1];
        if (!v8) {
          goto LABEL_21;
        }
        *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v25[3] = v9;
        _OWORD v25[4] = v9;
        v25[1] = v9;
        void v25[2] = v9;
        v25[0] = v9;
        AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK::ARI_IBICpsConfigureCellularPowerReportRsp_SDK((AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK *)v25, a2);
        if (!v2[4] || !v2[5])
        {
LABEL_20:
          MEMORY[0x237DF6BD0](v25);
LABEL_21:
          if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        unint64_t GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v25);
        int v11 = (Ari *)((GMID >> 17) & 0xFFFF8000 | (GMID << 26));
        if (v11 == 67600384 || v11 != *((_DWORD *)v2 + 6))
        {
          __int16 v13 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            uint64_t v24 = Ari::MsgNameById(v11);
            *(_DWORD *)long long buf = 136315138;
            uint64_t v27 = v24;
            _os_log_error_impl(&dword_235DB9000, v13, OS_LOG_TYPE_ERROR, "Response %s is invalid", buf, 0xCu);
          }
          char v12 = 0;
        }
        else
        {
          char v12 = 1;
        }
        int v14 = (const void *)v2[4];
        if (v14)
        {
          uint64_t v15 = _Block_copy(v14);
          size_t v16 = v2[5];
          if (!v16) {
            goto LABEL_16;
          }
        }
        else
        {
          uint64_t v15 = 0;
          size_t v16 = v2[5];
          if (!v16)
          {
LABEL_16:
            uint64_t v17 = (std::__shared_weak_count *)v8[10];
            if (!v17 || (uint64_t v18 = v8[9], (v19 = std::__shared_weak_count::lock(v17)) == 0)) {
              std::__throw_bad_weak_ptr[abi:ne180100]();
            }
            unint64_t v20 = v19;
            unint64_t v21 = operator new(0x18uLL);
            *unint64_t v21 = v15;
            v21[1] = v16;
            *((unsigned char *)v21 + 16) = v12;
            uint64_t v22 = v8[11];
            atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
            long long v23 = operator new(0x18uLL);
            void *v23 = v21;
            v23[1] = v18;
            v23[2] = v20;
            dispatch_async_f(v22, v23, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK,AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK>(AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>(void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK,AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK>(AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK,AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK>(AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1},dispatch_queue_s *::default_delete<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK,AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK>(AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
            if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
            goto LABEL_20;
          }
        }
        dispatch_retain(v16);
        goto LABEL_16;
      }
    }
  }
}

void sub_235E0CED4(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t __copy_helper_block_e8_32c243_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk45ARI_IBICpsConfigureCellularPowerReportRsp_SDKENS4_45ARI_IBICpsConfigureCellularPowerReportReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c243_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk45ARI_IBICpsConfigureCellularPowerReportRsp_SDKENS4_45ARI_IBICpsConfigureCellularPowerReportReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_EE(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK,AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK>(AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK,AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK>(AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93E390;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK,AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK>(AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK,AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK>(AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93E390;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK,AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK>(AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK,AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK>(AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(void *a1)
{
  uint64_t v2 = a1[8];
  if (v2) {
    dispatch_release(v2);
  }
  char v3 = (const void *)a1[7];
  if (v3) {
    _Block_release(v3);
  }
  xpc_object_t v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK,AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK>(AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>(void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK,AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK>(AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK,AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK>(AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1},dispatch_queue_s *::default_delete<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBICpsConfigureCellularPowerReportRsp_SDK,AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK>(AriSdk::ARI_IBICpsConfigureCellularPowerReportReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v2 = *a1;
  char v3 = *(unsigned char *)(*a1 + 16);
  xpc_object_t v4 = xpc_null_create();
  if (*(void *)v2) {
    uint64_t v5 = _Block_copy(*(const void **)v2);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(NSObject **)(v2 + 8);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_42_0;
  if (v5)
  {
    char v12 = v3;
    aBlocunint64_t k = _Block_copy(v5);
    xpc_object_t object = v4;
    if (v4)
    {
LABEL_6:
      xpc_retain(v4);
      goto LABEL_9;
    }
  }
  else
  {
    char v12 = v3;
    aBlocunint64_t k = 0;
    xpc_object_t object = v4;
    if (v4) {
      goto LABEL_6;
    }
  }
  xpc_object_t object = xpc_null_create();
LABEL_9:
  dispatch_async(v6, block);
  xpc_release(object);
  xpc_object_t object = 0;
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v5) {
    _Block_release(v5);
  }
  xpc_release(v4);
  uint64_t v7 = *(NSObject **)(v2 + 8);
  if (v7) {
    dispatch_release(v7);
  }
  if (*(void *)v2) {
    _Block_release(*(const void **)v2);
  }
  operator delete((void *)v2);
  xpc_object_t v8 = (std::__shared_weak_count *)a1[2];
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  operator delete(a1);
}

uint64_t ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver26ppmRegisterIndication_syncEN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEE3__0vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t result, const unsigned __int8 *a2)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void **)(result + 32);
  if (v2)
  {
    char v3 = (void *)*v2;
    *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v44 = v4;
    long long v45 = v4;
    long long v42 = v4;
    long long v43 = v4;
    v40[3] = v4;
    long long v41 = v4;
    v40[1] = v4;
    v40[2] = v4;
    v40[0] = v4;
    AriSdk::ARI_IBICpsCellularPowerReportInd_SDK::ARI_IBICpsCellularPowerReportInd_SDK((AriSdk::ARI_IBICpsCellularPowerReportInd_SDK *)v40, a2);
    unint64_t GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v40);
    if ((ice::isARIResponseValid() & 1) == 0)
    {
      size_t v10 = v3[5];
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = (GMID >> 17) & 0xFFFF8000 | (GMID << 26);
        LOWORD(v47) = 1024;
        *(_DWORD *)((char *)&v47 + 2) = 1031831552;
        uint64_t v7 = "Got unexpected message 0x%0x, expected IBICpsCellularPowerReportInd (0x%0x)";
        xpc_object_t v8 = v10;
        uint32_t v9 = 14;
        goto LABEL_8;
      }
      return MEMORY[0x237DF6800](v40);
    }
    if (AriSdk::ARI_IBICpsCellularPowerReportInd_SDK::unpack((AriSdk::ARI_IBICpsCellularPowerReportInd_SDK *)v40))
    {
      uint64_t v6 = v3[5];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        uint64_t v7 = "Failed to unpack PPM data from Baseband.";
        xpc_object_t v8 = v6;
        uint32_t v9 = 2;
LABEL_8:
        _os_log_error_impl(&dword_235DB9000, v8, OS_LOG_TYPE_ERROR, v7, buf, v9);
        return MEMORY[0x237DF6800](v40);
      }
      return MEMORY[0x237DF6800](v40);
    }
    xpc_object_t v11 = xpc_dictionary_create(0, 0, 0);
    if (v11 || (xpc_object_t v11 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x237DF76E0](v11) == MEMORY[0x263EF8708])
      {
        xpc_retain(v11);
        xpc_object_t v12 = v11;
      }
      else
      {
        xpc_object_t v12 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v12 = xpc_null_create();
      xpc_object_t v11 = 0;
    }
    xpc_release(v11);
    if (*((void *)&v41 + 1))
    {
      xpc_object_t v13 = xpc_int64_create(**((_DWORD **)&v41 + 1));
      if (!v13) {
        xpc_object_t v13 = xpc_null_create();
      }
      xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x263F8B9D8], v13);
      xpc_object_t v14 = xpc_null_create();
      xpc_release(v13);
      xpc_release(v14);
    }
    if ((void)v42)
    {
      xpc_object_t v15 = xpc_int64_create(*(unsigned int *)v42);
      if (!v15) {
        xpc_object_t v15 = xpc_null_create();
      }
      xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x263F8B968], v15);
      xpc_object_t v16 = xpc_null_create();
      xpc_release(v15);
      xpc_release(v16);
    }
    uint64_t v17 = (const void *)*((void *)&v42 + 1);
    if (*((void *)&v42 + 1) && *((void *)&v42 + 1) != (void)v43)
    {
      int64_t v18 = v43 - *((void *)&v42 + 1);
      if ((uint64_t)(v43 - *((void *)&v42 + 1)) < 0) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      xpc_object_t v19 = (char *)operator new(v43 - *((void *)&v42 + 1));
      memmove(v19, v17, v18);
      xpc_object_t v20 = xpc_array_create(0, 0);
      if (v20 || (xpc_object_t v20 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x237DF76E0](v20) == MEMORY[0x263EF86D8])
        {
          xpc_retain(v20);
          xpc_object_t v21 = v20;
        }
        else
        {
          xpc_object_t v21 = xpc_null_create();
        }
      }
      else
      {
        xpc_object_t v21 = xpc_null_create();
        xpc_object_t v20 = 0;
      }
      xpc_release(v20);
      uint64_t v22 = 0;
      uint64_t v23 = 4 * (v18 >> 2);
      do
      {
        xpc_object_t v24 = xpc_int64_create(*(unsigned int *)&v19[v22]);
        if (!v24) {
          xpc_object_t v24 = xpc_null_create();
        }
        xpc_array_append_value(v21, v24);
        xpc_release(v24);
        v22 += 4;
      }
      while (v23 != v22);
      if (v21)
      {
        xpc_retain(v21);
        xpc_object_t v25 = v21;
      }
      else
      {
        xpc_object_t v25 = xpc_null_create();
      }
      xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x263F8B960], v25);
      xpc_object_t v26 = xpc_null_create();
      xpc_release(v25);
      xpc_release(v26);
      xpc_release(v21);
      operator delete(v19);
    }
    if ((void)v44)
    {
      xpc_object_t v27 = xpc_int64_create(*(int *)v44);
      if (!v27) {
        xpc_object_t v27 = xpc_null_create();
      }
      xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x263F8B948], v27);
      xpc_object_t v28 = xpc_null_create();
      xpc_release(v27);
      xpc_release(v28);
    }
    if (*((void *)&v44 + 1))
    {
      xpc_object_t v29 = xpc_int64_create(**((_DWORD **)&v44 + 1));
      if (!v29) {
        xpc_object_t v29 = xpc_null_create();
      }
      xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x263F8B9A8], v29);
      xpc_object_t v30 = xpc_null_create();
      xpc_release(v29);
      xpc_release(v30);
    }
    if ((void)v45)
    {
      xpc_object_t v31 = xpc_int64_create(*(unsigned int *)v45);
      if (!v31) {
        xpc_object_t v31 = xpc_null_create();
      }
      xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x263F8B958], v31);
      xpc_object_t v32 = xpc_null_create();
      xpc_release(v31);
      xpc_release(v32);
    }
    if (*((void *)&v45 + 1))
    {
      xpc_object_t v33 = xpc_int64_create(**((_DWORD **)&v45 + 1));
      if (!v33) {
        xpc_object_t v33 = xpc_null_create();
      }
      xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x263F8B940], v33);
      xpc_object_t v34 = xpc_null_create();
      xpc_release(v33);
      xpc_release(v34);
    }
    if (v12)
    {
      xpc_retain(v12);
      xpc_object_t v35 = v12;
      dispatch_object_t v36 = (const void *)v3[29];
      if (v36)
      {
LABEL_58:
        long long v37 = _Block_copy(v36);
        goto LABEL_61;
      }
    }
    else
    {
      xpc_object_t v35 = xpc_null_create();
      dispatch_object_t v36 = (const void *)v3[29];
      if (v36) {
        goto LABEL_58;
      }
    }
    long long v37 = 0;
LABEL_61:
    long long v38 = v3[30];
    *(void *)long long buf = MEMORY[0x263EF8330];
    uint64_t v47 = 1174405120;
    uint64_t v48 = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
    unsigned int v49 = &__block_descriptor_tmp_42_0;
    if (v37)
    {
      long long v39 = _Block_copy(v37);
      char v52 = 1;
      size_t v50 = v39;
      xpc_object_t v51 = v35;
      if (v35)
      {
LABEL_63:
        xpc_retain(v35);
LABEL_66:
        dispatch_async(v38, buf);
        xpc_release(v51);
        xpc_object_t v51 = 0;
        if (v50) {
          _Block_release(v50);
        }
        if (v37) {
          _Block_release(v37);
        }
        xpc_release(v35);
        xpc_release(v12);
        return MEMORY[0x237DF6800](v40);
      }
    }
    else
    {
      char v52 = 1;
      size_t v50 = 0;
      xpc_object_t v51 = v35;
      if (v35) {
        goto LABEL_63;
      }
    }
    xpc_object_t v51 = xpc_null_create();
    goto LABEL_66;
  }
  return result;
}

void sub_235E0D868(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t __copy_helper_block_e8_32c143_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver26ppmRegisterIndication_syncEN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c143_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver26ppmRegisterIndication_syncEN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEE3__0EE(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<antenna::ARICommandDriver::ppmRegisterIndication_sync(dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::$_0,std::allocator<antenna::ARICommandDriver::ppmRegisterIndication_sync(dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93E410;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<antenna::ARICommandDriver::ppmRegisterIndication_sync(dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::$_0,std::allocator<antenna::ARICommandDriver::ppmRegisterIndication_sync(dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93E410;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver16workoutInfo_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS4_6objectEEEEE3__0vEENS8_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void **)(a1 + 32);
  if (!v2) {
    return;
  }
  char v3 = (std::__shared_weak_count *)v2[1];
  if (!v3)
  {
    uint64_t v6 = 0;
LABEL_14:
    xpc_object_t v13 = xpc_null_create();
    xpc_object_t v14 = (const void *)v2[3];
    if (v14) {
      xpc_object_t v15 = _Block_copy(v14);
    }
    else {
      xpc_object_t v15 = 0;
    }
    xpc_object_t v16 = v2[4];
    *(void *)&blocunint64_t k = MEMORY[0x263EF8330];
    *((void *)&block + 1) = 1174405120;
    *(void *)&long long v37 = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
    *((void *)&v37 + 1) = &__block_descriptor_tmp_42_0;
    if (v15)
    {
      LOBYTE(v39) = 0;
      object[0] = _Block_copy(v15);
      object[1] = v13;
      if (v13)
      {
LABEL_19:
        xpc_retain(v13);
        goto LABEL_22;
      }
    }
    else
    {
      LOBYTE(v39) = 0;
      object[0] = 0;
      object[1] = v13;
      if (v13) {
        goto LABEL_19;
      }
    }
    object[1] = xpc_null_create();
LABEL_22:
    dispatch_async(v16, &block);
    xpc_release(object[1]);
    object[1] = 0;
    if (object[0]) {
      _Block_release(object[0]);
    }
    if (v15) {
      _Block_release(v15);
    }
    xpc_release(v13);
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_93;
    }
    return;
  }
  uint64_t v5 = v2[2];
  uint64_t v6 = std::__shared_weak_count::lock(v3);
  if (!v6 || !*v2) {
    goto LABEL_14;
  }
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v39 = v7;
  long long v40 = v7;
  long long v37 = v7;
  *(_OWORD *)xpc_object_t object = v7;
  blocunint64_t k = v7;
  AriSdk::ARI_IBICpsHealthActivityRsp_SDK::ARI_IBICpsHealthActivityRsp_SDK((AriSdk::ARI_IBICpsHealthActivityRsp_SDK *)&block, a2);
  memset(v35, 170, sizeof(v35));
  __p[23] = 17;
  strcpy(__p, "set workout state");
  checkErrorStr((AriSdk::MsgBase *)&block, (uint64_t)__p, (uint64_t)v35);
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    uint64_t v17 = (void *)HIBYTE(v35[2]);
    if (SHIBYTE(v35[2]) < 0) {
      uint64_t v17 = v35[1];
    }
    if (v17)
    {
LABEL_9:
      uint32_t v9 = *(NSObject **)(v5 + 40);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long __p = 0;
        _os_log_error_impl(&dword_235DB9000, v9, OS_LOG_TYPE_ERROR, "Failed to set workout state (response error)", __p, 2u);
      }
      xpc_object_t v10 = xpc_null_create();
      xpc_object_t v11 = (const void *)v2[3];
      if (v11) {
        xpc_object_t v12 = _Block_copy(v11);
      }
      else {
        xpc_object_t v12 = 0;
      }
      xpc_object_t v21 = v2[4];
      *(void *)long long __p = MEMORY[0x263EF8330];
      *(void *)&__p[8] = 1174405120;
      *(void *)&__p[16] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
      long long v42 = &__block_descriptor_tmp_42_0;
      if (v12)
      {
        uint64_t v22 = _Block_copy(v12);
        char v45 = 0;
        aBlocunint64_t k = v22;
        xpc_object_t v44 = v10;
        if (v10)
        {
LABEL_40:
          xpc_retain(v10);
LABEL_43:
          dispatch_async(v21, __p);
          xpc_release(v44);
          xpc_object_t v44 = 0;
          if (aBlock) {
            _Block_release(aBlock);
          }
          if (v12) {
            _Block_release(v12);
          }
          goto LABEL_90;
        }
      }
      else
      {
        char v45 = 0;
        aBlocunint64_t k = 0;
        xpc_object_t v44 = v10;
        if (v10) {
          goto LABEL_40;
        }
      }
      xpc_object_t v44 = xpc_null_create();
      goto LABEL_43;
    }
  }
  else
  {
    xpc_object_t v8 = (void *)HIBYTE(v35[2]);
    if (SHIBYTE(v35[2]) < 0) {
      xpc_object_t v8 = v35[1];
    }
    if (v8) {
      goto LABEL_9;
    }
  }
  if (AriSdk::ARI_IBICpsHealthActivityRsp_SDK::unpack((AriSdk::ARI_IBICpsHealthActivityRsp_SDK *)&block))
  {
    int64_t v18 = *(NSObject **)(v5 + 40);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long __p = 0;
      _os_log_error_impl(&dword_235DB9000, v18, OS_LOG_TYPE_ERROR, "Failed to set workout state (unpack error)", __p, 2u);
    }
    xpc_object_t v10 = xpc_null_create();
    xpc_object_t v19 = (const void *)v2[3];
    if (v19) {
      xpc_object_t v20 = _Block_copy(v19);
    }
    else {
      xpc_object_t v20 = 0;
    }
    xpc_object_t v27 = v2[4];
    *(void *)long long __p = MEMORY[0x263EF8330];
    *(void *)&__p[8] = 1174405120;
    *(void *)&__p[16] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
    long long v42 = &__block_descriptor_tmp_42_0;
    if (v20) {
      xpc_object_t v28 = _Block_copy(v20);
    }
    else {
      xpc_object_t v28 = 0;
    }
    char v45 = 0;
    aBlocunint64_t k = v28;
    xpc_object_t v44 = v10;
    if (v10) {
      xpc_retain(v10);
    }
    else {
      xpc_object_t v44 = xpc_null_create();
    }
    dispatch_async(v27, __p);
    xpc_release(v44);
    xpc_object_t v44 = 0;
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v20) {
      _Block_release(v20);
    }
  }
  else
  {
    int v23 = **((_DWORD **)&v40 + 1);
    if (**((_DWORD **)&v40 + 1))
    {
      xpc_object_t v24 = *(NSObject **)(v5 + 40);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long __p = 67109120;
        *(_DWORD *)&__p[4] = v23;
        _os_log_error_impl(&dword_235DB9000, v24, OS_LOG_TYPE_ERROR, "Failed to set workout state (result error: %d)", __p, 8u);
      }
      xpc_object_t v10 = xpc_null_create();
      xpc_object_t v25 = (const void *)v2[3];
      if (v25) {
        xpc_object_t v26 = _Block_copy(v25);
      }
      else {
        xpc_object_t v26 = 0;
      }
      xpc_object_t v31 = v2[4];
      *(void *)long long __p = MEMORY[0x263EF8330];
      *(void *)&__p[8] = 1174405120;
      *(void *)&__p[16] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
      long long v42 = &__block_descriptor_tmp_42_0;
      if (v26) {
        xpc_object_t v32 = _Block_copy(v26);
      }
      else {
        xpc_object_t v32 = 0;
      }
      char v45 = 0;
      aBlocunint64_t k = v32;
      xpc_object_t v44 = v10;
      if (v10) {
        xpc_retain(v10);
      }
      else {
        xpc_object_t v44 = xpc_null_create();
      }
      dispatch_async(v31, __p);
      xpc_release(v44);
      xpc_object_t v44 = 0;
      if (aBlock) {
        _Block_release(aBlock);
      }
      if (v26) {
        _Block_release(v26);
      }
    }
    else
    {
      xpc_object_t v10 = xpc_null_create();
      xpc_object_t v29 = (const void *)v2[3];
      if (v29) {
        xpc_object_t v30 = _Block_copy(v29);
      }
      else {
        xpc_object_t v30 = 0;
      }
      xpc_object_t v33 = v2[4];
      *(void *)long long __p = MEMORY[0x263EF8330];
      *(void *)&__p[8] = 1174405120;
      *(void *)&__p[16] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
      long long v42 = &__block_descriptor_tmp_42_0;
      if (v30) {
        xpc_object_t v34 = _Block_copy(v30);
      }
      else {
        xpc_object_t v34 = 0;
      }
      char v45 = 1;
      aBlocunint64_t k = v34;
      xpc_object_t v44 = v10;
      if (v10) {
        xpc_retain(v10);
      }
      else {
        xpc_object_t v44 = xpc_null_create();
      }
      dispatch_async(v33, __p);
      xpc_release(v44);
      xpc_object_t v44 = 0;
      if (aBlock) {
        _Block_release(aBlock);
      }
      if (v30) {
        _Block_release(v30);
      }
    }
  }
LABEL_90:
  xpc_release(v10);
  if (SHIBYTE(v35[2]) < 0) {
    operator delete(v35[0]);
  }
  MEMORY[0x237DF6240](&block);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_93:
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_235E0E1B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t __copy_helper_block_e8_32c145_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver16workoutInfo_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS3_6objectEEEEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c145_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver16workoutInfo_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS3_6objectEEEEE3__0EE(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<antenna::ARICommandDriver::workoutInfo_sync(xpc::dict const&,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::$_0,std::allocator<antenna::ARICommandDriver::workoutInfo_sync(xpc::dict const&,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93E490;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<antenna::ARICommandDriver::workoutInfo_sync(xpc::dict const&,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::$_0,std::allocator<antenna::ARICommandDriver::workoutInfo_sync(xpc::dict const&,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93E490;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<antenna::ARICommandDriver::workoutInfo_sync(xpc::dict const&,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::$_0,std::allocator<antenna::ARICommandDriver::workoutInfo_sync(xpc::dict const&,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::$_0>>::__on_zero_shared(void *a1)
{
  uint64_t v2 = a1[7];
  if (v2) {
    dispatch_release(v2);
  }
  char v3 = (const void *)a1[6];
  if (v3) {
    _Block_release(v3);
  }
  long long v4 = (std::__shared_weak_count *)a1[4];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void *antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBIStwSarBackoffTimeRspCb_SDK,AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK>(AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::~callback(void *a1)
{
  uint64_t v2 = a1[5];
  if (v2) {
    dispatch_release(v2);
  }
  char v3 = (const void *)a1[4];
  if (v3) {
    _Block_release(v3);
  }
  long long v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void ___ZN3ice6detail12wrapCallbackIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk33ARI_IBIStwSarBackoffTimeRspCb_SDKENS5_31ARI_IBIStwSarBackoffTimeReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_vEENSA_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  if (v2)
  {
    char v3 = (std::__shared_weak_count *)v2[2];
    if (v3)
    {
      uint64_t v5 = *v2;
      uint64_t v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        long long v7 = v6;
        xpc_object_t v8 = (void *)v2[1];
        if (!v8) {
          goto LABEL_21;
        }
        *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v25[3] = v9;
        _OWORD v25[4] = v9;
        v25[1] = v9;
        void v25[2] = v9;
        v25[0] = v9;
        AriSdk::ARI_IBIStwSarBackoffTimeRspCb_SDK::ARI_IBIStwSarBackoffTimeRspCb_SDK((AriSdk::ARI_IBIStwSarBackoffTimeRspCb_SDK *)v25, a2);
        if (!v2[4] || !v2[5])
        {
LABEL_20:
          MEMORY[0x237DF6530](v25);
LABEL_21:
          if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        unint64_t GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)v25);
        xpc_object_t v11 = (Ari *)((GMID >> 17) & 0xFFFF8000 | (GMID << 26));
        if (v11 == 67600384 || v11 != *((_DWORD *)v2 + 6))
        {
          xpc_object_t v13 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            uint64_t v24 = Ari::MsgNameById(v11);
            *(_DWORD *)long long buf = 136315138;
            uint64_t v27 = v24;
            _os_log_error_impl(&dword_235DB9000, v13, OS_LOG_TYPE_ERROR, "Response %s is invalid", buf, 0xCu);
          }
          char v12 = 0;
        }
        else
        {
          char v12 = 1;
        }
        xpc_object_t v14 = (const void *)v2[4];
        if (v14)
        {
          xpc_object_t v15 = _Block_copy(v14);
          xpc_object_t v16 = v2[5];
          if (!v16) {
            goto LABEL_16;
          }
        }
        else
        {
          xpc_object_t v15 = 0;
          xpc_object_t v16 = v2[5];
          if (!v16)
          {
LABEL_16:
            uint64_t v17 = (std::__shared_weak_count *)v8[10];
            if (!v17 || (uint64_t v18 = v8[9], (v19 = std::__shared_weak_count::lock(v17)) == 0)) {
              std::__throw_bad_weak_ptr[abi:ne180100]();
            }
            xpc_object_t v20 = v19;
            xpc_object_t v21 = operator new(0x18uLL);
            *xpc_object_t v21 = v15;
            v21[1] = v16;
            *((unsigned char *)v21 + 16) = v12;
            uint64_t v22 = v8[11];
            atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
            int v23 = operator new(0x18uLL);
            void *v23 = v21;
            v23[1] = v18;
            v23[2] = v20;
            dispatch_async_f(v22, v23, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBIStwSarBackoffTimeRspCb_SDK,AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK>(AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>(void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBIStwSarBackoffTimeRspCb_SDK,AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK>(AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBIStwSarBackoffTimeRspCb_SDK,AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK>(AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1},dispatch_queue_s *::default_delete<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBIStwSarBackoffTimeRspCb_SDK,AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK>(AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
            if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
            goto LABEL_20;
          }
        }
        dispatch_retain(v16);
        goto LABEL_16;
      }
    }
  }
}

void sub_235E0E70C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t __copy_helper_block_e8_32c217_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk33ARI_IBIStwSarBackoffTimeRspCb_SDKENS4_31ARI_IBIStwSarBackoffTimeReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c217_ZTSNSt3__110shared_ptrIZN7antenna16ARICommandDriver7sendMsgIN6AriSdk33ARI_IBIStwSarBackoffTimeRspCb_SDKENS4_31ARI_IBIStwSarBackoffTimeReq_SDKEEEvRT0_jN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEEUlPKhjE_EE(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBIStwSarBackoffTimeRspCb_SDK,AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK>(AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBIStwSarBackoffTimeRspCb_SDK,AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK>(AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93E510;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBIStwSarBackoffTimeRspCb_SDK,AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK>(AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBIStwSarBackoffTimeRspCb_SDK,AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK>(AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93E510;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBIStwSarBackoffTimeRspCb_SDK,AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK>(AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1},std::allocator<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBIStwSarBackoffTimeRspCb_SDK,AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK>(AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}>>::__on_zero_shared(void *a1)
{
  uint64_t v2 = a1[8];
  if (v2) {
    dispatch_release(v2);
  }
  char v3 = (const void *)a1[7];
  if (v3) {
    _Block_release(v3);
  }
  long long v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBIStwSarBackoffTimeRspCb_SDK,AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK>(AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>(void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBIStwSarBackoffTimeRspCb_SDK,AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK>(AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBIStwSarBackoffTimeRspCb_SDK,AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK>(AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1},dispatch_queue_s *::default_delete<void antenna::ARICommandDriver::sendMsg<AriSdk::ARI_IBIStwSarBackoffTimeRspCb_SDK,AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK>(AriSdk::ARI_IBIStwSarBackoffTimeReq_SDK &,unsigned int,dispatch::callback<void({block_pointer})(BOOL,xpc::object)>)::{lambda(unsigned char const*,unsigned int)#1}::operator() const(unsigned char const*,unsigned int)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v2 = *a1;
  char v3 = *(unsigned char *)(*a1 + 16);
  xpc_object_t v4 = xpc_null_create();
  if (*(void *)v2) {
    uint64_t v5 = _Block_copy(*(const void **)v2);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(NSObject **)(v2 + 8);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_42_0;
  if (v5)
  {
    char v12 = v3;
    aBlocunint64_t k = _Block_copy(v5);
    xpc_object_t object = v4;
    if (v4)
    {
LABEL_6:
      xpc_retain(v4);
      goto LABEL_9;
    }
  }
  else
  {
    char v12 = v3;
    aBlocunint64_t k = 0;
    xpc_object_t object = v4;
    if (v4) {
      goto LABEL_6;
    }
  }
  xpc_object_t object = xpc_null_create();
LABEL_9:
  dispatch_async(v6, block);
  xpc_release(object);
  xpc_object_t object = 0;
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v5) {
    _Block_release(v5);
  }
  xpc_release(v4);
  long long v7 = *(NSObject **)(v2 + 8);
  if (v7) {
    dispatch_release(v7);
  }
  if (*(void *)v2) {
    _Block_release(*(const void **)v2);
  }
  operator delete((void *)v2);
  xpc_object_t v8 = (std::__shared_weak_count *)a1[2];
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  operator delete(a1);
}

uint64_t std::vector<std::tuple<unsigned long long,unsigned long long,unsigned long long>>::~vector[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t coex::ARICommandDriver::create@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v6 = (coex::CommandDriver *)operator new(0xE8uLL);
  uint64_t v7 = (uint64_t)v6;
  xpc_object_t v8 = (std::__shared_weak_count *)a1[1];
  uint64_t v16 = *a1;
  uint64_t v17 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *a2;
  xpc_object_t v10 = (std::__shared_weak_count *)a2[1];
  v15[0] = v9;
  v15[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  coex::ARICommandDriver::ARICommandDriver(v6, (uint64_t)&v16, (uint64_t)v15);
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<coex::ARICommandDriver>::shared_ptr[abi:ne180100]<coex::ARICommandDriver,std::shared_ptr<coex::ARICommandDriver> ctu::SharedSynchronizable<coex::CommandDriver>::make_shared_ptr<coex::ARICommandDriver>(coex::ARICommandDriver*)::{lambda(coex::ARICommandDriver*)#1},void>(a3, v7);
  ctu::Loggable<coex::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a3);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  xpc_object_t v13 = v17;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)*a3 + 80))(*a3, v11, v12);
}

void sub_235E0EC34(_Unwind_Exception *a1)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_235E0EC48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v11);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

coex::CommandDriver *coex::ARICommandDriver::ARICommandDriver(coex::CommandDriver *a1, uint64_t a2, uint64_t a3)
{
  xpc_object_t v4 = *(std::__shared_weak_count **)(a2 + 8);
  xpc_object_t v10 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a3 + 8);
  uint64_t v9 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  coex::CommandDriver::CommandDriver();
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  *(void *)a1 = &unk_26E93E560;
  uint64_t v6 = *((void *)a1 + 11);
  xpc_object_t object = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  coex::CommandDriver::getName(a1);
  ice::Client::create();
  if (object) {
    dispatch_release(object);
  }
  *((void *)a1 + 26) = 0;
  *((void *)a1 + 27) = 0;
  *((void *)a1 + 28) = 0;
  return a1;
}

void sub_235E0EDDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_235E0EDF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  coex::CommandDriver::~CommandDriver(v10);
  _Unwind_Resume(a1);
}

void coex::CommandDriver::~CommandDriver(void **this)
{
  *this = &unk_26E93E798;
  if (*((char *)this + 191) < 0)
  {
    operator delete(this[21]);
    this[18] = &unk_26E93E800;
    uint64_t v2 = (atomic_uint *)this[20];
    if (!v2) {
      goto LABEL_8;
    }
  }
  else
  {
    this[18] = &unk_26E93E800;
    uint64_t v2 = (atomic_uint *)this[20];
    if (!v2) {
      goto LABEL_8;
    }
  }
  if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
    if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
    }
  }
LABEL_8:
  this[15] = &unk_26E93E870;
  char v3 = (atomic_uint *)this[17];
  if (v3)
  {
    if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
      if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
      }
    }
  }
  uint64_t v4 = (std::__shared_weak_count *)this[14];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  *this = &unk_26E93E8E0;
  MEMORY[0x237DF4D50](this + 1);
  uint64_t v5 = this[12];
  if (v5) {
    dispatch_release(v5);
  }
  uint64_t v6 = this[11];
  if (v6) {
    dispatch_release(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)this[10];
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
}

void coex::ARICommandDriver::~ARICommandDriver(coex::ARICommandDriver *this)
{
  *(void *)this = &unk_26E93E560;
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl(&dword_235DB9000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v7, 2u);
  }
  char v3 = (const void *)*((void *)this + 28);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)*((void *)this + 27);
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (const void *)*((void *)this + 26);
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 25);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    coex::CommandDriver::~CommandDriver((void **)this);
  }
  else
  {
    coex::CommandDriver::~CommandDriver((void **)this);
  }
}

{
  void *v1;
  uint64_t vars8;

  coex::ARICommandDriver::~ARICommandDriver(this);

  operator delete(v1);
}

void coex::ARICommandDriver::init(coex::ARICommandDriver *this)
{
  v1[0] = MEMORY[0x263EF8330];
  v1[1] = 0x40000000;
  v1[2] = ___ZN4coex16ARICommandDriver4initEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_6_0;
  v1[4] = this;
  ctu::SharedSynchronizable<coex::CommandDriver>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v1);
}

uint64_t ___ZN4coex16ARICommandDriver4initEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_235DB9000, v2, OS_LOG_TYPE_DEFAULT, "#I Initializing", buf, 2u);
  }
  char v3 = (void *)qword_26AB82710;
  if (qword_26AB82710 >= (unint64_t)qword_26AB82718)
  {
    uint64_t v5 = qword_26AB82708;
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((qword_26AB82710 - qword_26AB82708) >> 3);
    unint64_t v7 = v6 + 1;
    if (v6 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_237;
    }
    if (0x5555555555555556 * ((qword_26AB82718 - qword_26AB82708) >> 3) > v7) {
      unint64_t v7 = 0x5555555555555556 * ((qword_26AB82718 - qword_26AB82708) >> 3);
    }
    if (0xAAAAAAAAAAAAAAABLL * ((qword_26AB82718 - qword_26AB82708) >> 3) >= 0x555555555555555) {
      unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v8 = v7;
    }
    if (v8)
    {
      if (v8 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_238;
      }
      uint64_t v9 = operator new(24 * v8);
    }
    else
    {
      uint64_t v9 = 0;
    }
    uint64_t v10 = (uint64_t)v9 + 24 * v6;
    *(_OWORD *)uint64_t v10 = xmmword_235E74F30;
    *(void *)(v10 + 16) = 8;
    uint64_t v4 = (void *)(v10 + 24);
    if (v3 != (void *)v5)
    {
      do
      {
        long long v11 = *(_OWORD *)(v3 - 3);
        *(void *)(v10 - 8) = *(v3 - 1);
        *(_OWORD *)(v10 - 24) = v11;
        v10 -= 24;
        v3 -= 3;
      }
      while (v3 != (void *)v5);
      char v3 = (void *)qword_26AB82708;
    }
    qword_26AB82708 = v10;
    qword_26AB82710 = (uint64_t)v4;
    qword_26AB82718 = (uint64_t)v9 + 24 * v8;
    if (v3) {
      operator delete(v3);
    }
  }
  else
  {
    *(_OWORD *)qword_26AB82710 = xmmword_235E74F30;
    v3[2] = 8;
    uint64_t v4 = v3 + 3;
  }
  qword_26AB82710 = (uint64_t)v4;
  if ((unint64_t)v4 >= qword_26AB82718)
  {
    uint64_t v14 = qword_26AB82708;
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v4 - qword_26AB82708) >> 3);
    unint64_t v16 = v15 + 1;
    if (v15 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_237;
    }
    if (0x5555555555555556 * ((qword_26AB82718 - qword_26AB82708) >> 3) > v16) {
      unint64_t v16 = 0x5555555555555556 * ((qword_26AB82718 - qword_26AB82708) >> 3);
    }
    if (0xAAAAAAAAAAAAAAABLL * ((qword_26AB82718 - qword_26AB82708) >> 3) >= 0x555555555555555) {
      unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v17 = v16;
    }
    if (v17)
    {
      if (v17 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_238;
      }
      uint64_t v18 = operator new(24 * v17);
    }
    else
    {
      uint64_t v18 = 0;
    }
    uint64_t v19 = (uint64_t)v18 + 24 * v15;
    *(_OWORD *)uint64_t v19 = xmmword_235E74F40;
    *(void *)(v19 + 16) = 32;
    uint64_t v12 = (void *)(v19 + 24);
    if (v4 == (void *)v14)
    {
      qword_26AB82708 = v19;
      qword_26AB82710 = v19 + 24;
      qword_26AB82718 = (uint64_t)v18 + 24 * v17;
    }
    else
    {
      do
      {
        long long v20 = *(_OWORD *)(v4 - 3);
        *(void *)(v19 - 8) = *(v4 - 1);
        *(_OWORD *)(v19 - 24) = v20;
        v19 -= 24;
        v4 -= 3;
      }
      while (v4 != (void *)v14);
      uint64_t v4 = (void *)qword_26AB82708;
      qword_26AB82708 = v19;
      qword_26AB82710 = (uint64_t)v12;
      qword_26AB82718 = (uint64_t)v18 + 24 * v17;
      if (!v4)
      {
        qword_26AB82710 = (uint64_t)v12;
        uint64_t v13 = qword_26AB82718;
        if ((unint64_t)v12 >= qword_26AB82718) {
          goto LABEL_41;
        }
        goto LABEL_37;
      }
    }
    operator delete(v4);
    qword_26AB82710 = (uint64_t)v12;
    uint64_t v13 = qword_26AB82718;
    if ((unint64_t)v12 >= qword_26AB82718) {
      goto LABEL_41;
    }
LABEL_37:
    *(_OWORD *)uint64_t v12 = xmmword_235E74F50;
    void v12[2] = 16;
    xpc_object_t v21 = v12 + 3;
    qword_26AB82710 = (uint64_t)(v12 + 3);
    uint64_t v22 = qword_26AB82718;
    if ((unint64_t)(v12 + 3) < qword_26AB82718) {
      goto LABEL_55;
    }
    goto LABEL_59;
  }
  *(_OWORD *)uint64_t v4 = xmmword_235E74F40;
  uint64_t v4[2] = 32;
  uint64_t v12 = v4 + 3;
  qword_26AB82710 = (uint64_t)(v4 + 3);
  uint64_t v13 = qword_26AB82718;
  if ((unint64_t)(v4 + 3) < qword_26AB82718) {
    goto LABEL_37;
  }
LABEL_41:
  uint64_t v23 = qword_26AB82708;
  unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v12 - qword_26AB82708) >> 3);
  unint64_t v25 = v24 + 1;
  if (v24 + 1 > 0xAAAAAAAAAAAAAAALL) {
    goto LABEL_237;
  }
  unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((v13 - qword_26AB82708) >> 3);
  if (2 * v26 > v25) {
    unint64_t v25 = 2 * v26;
  }
  if (v26 >= 0x555555555555555) {
    unint64_t v27 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v27 = v25;
  }
  if (v27)
  {
    if (v27 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_238;
    }
    uint64_t v28 = operator new(24 * v27);
  }
  else
  {
    uint64_t v28 = 0;
  }
  uint64_t v29 = (uint64_t)v28 + 24 * v24;
  *(_OWORD *)uint64_t v29 = xmmword_235E74F50;
  *(void *)(v29 + 16) = 16;
  xpc_object_t v21 = (void *)(v29 + 24);
  if (v12 == (void *)v23)
  {
    qword_26AB82708 = v29;
    qword_26AB82710 = v29 + 24;
    qword_26AB82718 = (uint64_t)v28 + 24 * v27;
  }
  else
  {
    do
    {
      long long v30 = *(_OWORD *)(v12 - 3);
      *(void *)(v29 - 8) = *(v12 - 1);
      *(_OWORD *)(v29 - 24) = v30;
      v29 -= 24;
      v12 -= 3;
    }
    while (v12 != (void *)v23);
    uint64_t v12 = (void *)qword_26AB82708;
    qword_26AB82708 = v29;
    qword_26AB82710 = (uint64_t)v21;
    qword_26AB82718 = (uint64_t)v28 + 24 * v27;
    if (!v12)
    {
      qword_26AB82710 = (uint64_t)v21;
      uint64_t v22 = qword_26AB82718;
      if ((unint64_t)v21 < qword_26AB82718) {
        goto LABEL_55;
      }
LABEL_59:
      uint64_t v33 = qword_26AB82708;
      unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v21 - qword_26AB82708) >> 3);
      unint64_t v35 = v34 + 1;
      if (v34 + 1 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_237;
      }
      unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((v22 - qword_26AB82708) >> 3);
      if (2 * v36 > v35) {
        unint64_t v35 = 2 * v36;
      }
      if (v36 >= 0x555555555555555) {
        unint64_t v37 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v37 = v35;
      }
      if (v37)
      {
        if (v37 > 0xAAAAAAAAAAAAAAALL) {
          goto LABEL_238;
        }
        long long v38 = operator new(24 * v37);
      }
      else
      {
        long long v38 = 0;
      }
      uint64_t v39 = (uint64_t)v38 + 24 * v34;
      *(_OWORD *)uint64_t v39 = xmmword_235E74F60;
      *(void *)(v39 + 16) = 4160749568;
      xpc_object_t v31 = (void *)(v39 + 24);
      if (v21 == (void *)v33)
      {
        qword_26AB82708 = v39;
        qword_26AB82710 = v39 + 24;
        qword_26AB82718 = (uint64_t)v38 + 24 * v37;
      }
      else
      {
        do
        {
          long long v40 = *(_OWORD *)(v21 - 3);
          *(void *)(v39 - 8) = *(v21 - 1);
          *(_OWORD *)(v39 - 24) = v40;
          v39 -= 24;
          v21 -= 3;
        }
        while (v21 != (void *)v33);
        xpc_object_t v21 = (void *)qword_26AB82708;
        qword_26AB82708 = v39;
        qword_26AB82710 = (uint64_t)v31;
        qword_26AB82718 = (uint64_t)v38 + 24 * v37;
        if (!v21)
        {
          qword_26AB82710 = (uint64_t)v31;
          uint64_t v32 = qword_26AB82718;
          if ((unint64_t)v31 >= qword_26AB82718) {
            goto LABEL_77;
          }
          goto LABEL_73;
        }
      }
      operator delete(v21);
      qword_26AB82710 = (uint64_t)v31;
      uint64_t v32 = qword_26AB82718;
      if ((unint64_t)v31 >= qword_26AB82718) {
        goto LABEL_77;
      }
LABEL_73:
      *(_OWORD *)xpc_object_t v31 = xmmword_235E74F70;
      v31[2] = 0xFF000000000000;
      long long v41 = v31 + 3;
      qword_26AB82710 = (uint64_t)(v31 + 3);
      uint64_t v42 = qword_26AB82718;
      if ((unint64_t)(v31 + 3) < qword_26AB82718) {
        goto LABEL_91;
      }
      goto LABEL_95;
    }
  }
  operator delete(v12);
  qword_26AB82710 = (uint64_t)v21;
  uint64_t v22 = qword_26AB82718;
  if ((unint64_t)v21 >= qword_26AB82718) {
    goto LABEL_59;
  }
LABEL_55:
  *(_OWORD *)xpc_object_t v21 = xmmword_235E74F60;
  v21[2] = 4160749568;
  xpc_object_t v31 = v21 + 3;
  qword_26AB82710 = (uint64_t)(v21 + 3);
  uint64_t v32 = qword_26AB82718;
  if ((unint64_t)(v21 + 3) < qword_26AB82718) {
    goto LABEL_73;
  }
LABEL_77:
  uint64_t v43 = qword_26AB82708;
  unint64_t v44 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v31 - qword_26AB82708) >> 3);
  unint64_t v45 = v44 + 1;
  if (v44 + 1 > 0xAAAAAAAAAAAAAAALL) {
    goto LABEL_237;
  }
  unint64_t v46 = 0xAAAAAAAAAAAAAAABLL * ((v32 - qword_26AB82708) >> 3);
  if (2 * v46 > v45) {
    unint64_t v45 = 2 * v46;
  }
  if (v46 >= 0x555555555555555) {
    unint64_t v47 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v47 = v45;
  }
  if (v47)
  {
    if (v47 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_238;
    }
    uint64_t v48 = operator new(24 * v47);
  }
  else
  {
    uint64_t v48 = 0;
  }
  uint64_t v49 = (uint64_t)v48 + 24 * v44;
  *(_OWORD *)uint64_t v49 = xmmword_235E74F70;
  *(void *)(v49 + 16) = 0xFF000000000000;
  long long v41 = (void *)(v49 + 24);
  if (v31 == (void *)v43)
  {
    qword_26AB82708 = v49;
    qword_26AB82710 = v49 + 24;
    qword_26AB82718 = (uint64_t)v48 + 24 * v47;
  }
  else
  {
    do
    {
      long long v50 = *(_OWORD *)(v31 - 3);
      *(void *)(v49 - 8) = *(v31 - 1);
      *(_OWORD *)(v49 - 24) = v50;
      v49 -= 24;
      v31 -= 3;
    }
    while (v31 != (void *)v43);
    xpc_object_t v31 = (void *)qword_26AB82708;
    qword_26AB82708 = v49;
    qword_26AB82710 = (uint64_t)v41;
    qword_26AB82718 = (uint64_t)v48 + 24 * v47;
    if (!v31)
    {
      qword_26AB82710 = (uint64_t)v41;
      uint64_t v42 = qword_26AB82718;
      if ((unint64_t)v41 < qword_26AB82718) {
        goto LABEL_91;
      }
LABEL_95:
      uint64_t v53 = qword_26AB82708;
      unint64_t v54 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v41 - qword_26AB82708) >> 3);
      unint64_t v55 = v54 + 1;
      if (v54 + 1 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_237;
      }
      unint64_t v56 = 0xAAAAAAAAAAAAAAABLL * ((v42 - qword_26AB82708) >> 3);
      if (2 * v56 > v55) {
        unint64_t v55 = 2 * v56;
      }
      if (v56 >= 0x555555555555555) {
        unint64_t v57 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v57 = v55;
      }
      if (v57)
      {
        if (v57 > 0xAAAAAAAAAAAAAAALL) {
          goto LABEL_238;
        }
        dispatch_object_t v58 = operator new(24 * v57);
      }
      else
      {
        dispatch_object_t v58 = 0;
      }
      uint64_t v59 = (uint64_t)v58 + 24 * v54;
      *(_OWORD *)uint64_t v59 = xmmword_235E74F80;
      *(void *)(v59 + 16) = 0x800000000000000;
      xpc_object_t v51 = (void *)(v59 + 24);
      if (v41 == (void *)v53)
      {
        qword_26AB82708 = v59;
        qword_26AB82710 = v59 + 24;
        qword_26AB82718 = (uint64_t)v58 + 24 * v57;
      }
      else
      {
        do
        {
          long long v60 = *(_OWORD *)(v41 - 3);
          *(void *)(v59 - 8) = *(v41 - 1);
          *(_OWORD *)(v59 - 24) = v60;
          v59 -= 24;
          v41 -= 3;
        }
        while (v41 != (void *)v53);
        long long v41 = (void *)qword_26AB82708;
        qword_26AB82708 = v59;
        qword_26AB82710 = (uint64_t)v51;
        qword_26AB82718 = (uint64_t)v58 + 24 * v57;
        if (!v41)
        {
          qword_26AB82710 = (uint64_t)v51;
          uint64_t v52 = qword_26AB82718;
          if ((unint64_t)v51 >= qword_26AB82718) {
            goto LABEL_113;
          }
          goto LABEL_109;
        }
      }
      operator delete(v41);
      qword_26AB82710 = (uint64_t)v51;
      uint64_t v52 = qword_26AB82718;
      if ((unint64_t)v51 >= qword_26AB82718) {
        goto LABEL_113;
      }
LABEL_109:
      *(_OWORD *)xpc_object_t v51 = xmmword_235E74F90;
      v51[2] = 0x1000000000000000;
      uint64_t v61 = v51 + 3;
      qword_26AB82710 = (uint64_t)(v51 + 3);
      uint64_t v62 = qword_26AB82718;
      if ((unint64_t)(v51 + 3) < qword_26AB82718) {
        goto LABEL_127;
      }
      goto LABEL_131;
    }
  }
  operator delete(v31);
  qword_26AB82710 = (uint64_t)v41;
  uint64_t v42 = qword_26AB82718;
  if ((unint64_t)v41 >= qword_26AB82718) {
    goto LABEL_95;
  }
LABEL_91:
  *(_OWORD *)long long v41 = xmmword_235E74F80;
  _OWORD v41[2] = 0x800000000000000;
  xpc_object_t v51 = v41 + 3;
  qword_26AB82710 = (uint64_t)(v41 + 3);
  uint64_t v52 = qword_26AB82718;
  if ((unint64_t)(v41 + 3) < qword_26AB82718) {
    goto LABEL_109;
  }
LABEL_113:
  uint64_t v63 = qword_26AB82708;
  unint64_t v64 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v51 - qword_26AB82708) >> 3);
  unint64_t v65 = v64 + 1;
  if (v64 + 1 > 0xAAAAAAAAAAAAAAALL) {
    goto LABEL_237;
  }
  unint64_t v66 = 0xAAAAAAAAAAAAAAABLL * ((v52 - qword_26AB82708) >> 3);
  if (2 * v66 > v65) {
    unint64_t v65 = 2 * v66;
  }
  if (v66 >= 0x555555555555555) {
    unint64_t v67 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v67 = v65;
  }
  if (v67)
  {
    if (v67 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_238;
    }
    long long v68 = operator new(24 * v67);
  }
  else
  {
    long long v68 = 0;
  }
  uint64_t v69 = (uint64_t)v68 + 24 * v64;
  *(_OWORD *)uint64_t v69 = xmmword_235E74F90;
  *(void *)(v69 + 16) = 0x1000000000000000;
  uint64_t v61 = (void *)(v69 + 24);
  if (v51 == (void *)v63)
  {
    qword_26AB82708 = v69;
    qword_26AB82710 = v69 + 24;
    qword_26AB82718 = (uint64_t)v68 + 24 * v67;
  }
  else
  {
    do
    {
      long long v70 = *(_OWORD *)(v51 - 3);
      *(void *)(v69 - 8) = *(v51 - 1);
      *(_OWORD *)(v69 - 24) = v70;
      v69 -= 24;
      v51 -= 3;
    }
    while (v51 != (void *)v63);
    xpc_object_t v51 = (void *)qword_26AB82708;
    qword_26AB82708 = v69;
    qword_26AB82710 = (uint64_t)v61;
    qword_26AB82718 = (uint64_t)v68 + 24 * v67;
    if (!v51)
    {
      qword_26AB82710 = (uint64_t)v61;
      uint64_t v62 = qword_26AB82718;
      if ((unint64_t)v61 < qword_26AB82718) {
        goto LABEL_127;
      }
LABEL_131:
      uint64_t v73 = qword_26AB82708;
      unint64_t v74 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v61 - qword_26AB82708) >> 3);
      unint64_t v75 = v74 + 1;
      if (v74 + 1 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_237;
      }
      unint64_t v76 = 0xAAAAAAAAAAAAAAABLL * ((v62 - qword_26AB82708) >> 3);
      if (2 * v76 > v75) {
        unint64_t v75 = 2 * v76;
      }
      if (v76 >= 0x555555555555555) {
        unint64_t v77 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v77 = v75;
      }
      if (v77)
      {
        if (v77 > 0xAAAAAAAAAAAAAAALL) {
          goto LABEL_238;
        }
        size_t v78 = operator new(24 * v77);
      }
      else
      {
        size_t v78 = 0;
      }
      uint64_t v79 = (uint64_t)v78 + 24 * v74;
      *(_OWORD *)uint64_t v79 = xmmword_235E74FA0;
      *(void *)(v79 + 16) = 0xFF00000000;
      size_t v71 = (void *)(v79 + 24);
      if (v61 == (void *)v73)
      {
        qword_26AB82708 = v79;
        qword_26AB82710 = v79 + 24;
        qword_26AB82718 = (uint64_t)v78 + 24 * v77;
      }
      else
      {
        do
        {
          long long v80 = *(_OWORD *)(v61 - 3);
          *(void *)(v79 - 8) = *(v61 - 1);
          *(_OWORD *)(v79 - 24) = v80;
          v79 -= 24;
          v61 -= 3;
        }
        while (v61 != (void *)v73);
        uint64_t v61 = (void *)qword_26AB82708;
        qword_26AB82708 = v79;
        qword_26AB82710 = (uint64_t)v71;
        qword_26AB82718 = (uint64_t)v78 + 24 * v77;
        if (!v61)
        {
          qword_26AB82710 = (uint64_t)v71;
          uint64_t v72 = qword_26AB82718;
          if ((unint64_t)v71 >= qword_26AB82718) {
            goto LABEL_149;
          }
          goto LABEL_145;
        }
      }
      operator delete(v61);
      qword_26AB82710 = (uint64_t)v71;
      uint64_t v72 = qword_26AB82718;
      if ((unint64_t)v71 >= qword_26AB82718) {
        goto LABEL_149;
      }
LABEL_145:
      *(_OWORD *)size_t v71 = xmmword_235E74FB0;
      v71[2] = 0x2000000000000000;
      uint64_t v81 = v71 + 3;
      qword_26AB82710 = (uint64_t)(v71 + 3);
      uint64_t v82 = qword_26AB82718;
      if ((unint64_t)(v71 + 3) < qword_26AB82718) {
        goto LABEL_163;
      }
      goto LABEL_167;
    }
  }
  operator delete(v51);
  qword_26AB82710 = (uint64_t)v61;
  uint64_t v62 = qword_26AB82718;
  if ((unint64_t)v61 >= qword_26AB82718) {
    goto LABEL_131;
  }
LABEL_127:
  *(_OWORD *)uint64_t v61 = xmmword_235E74FA0;
  _OWORD v61[2] = 0xFF00000000;
  size_t v71 = v61 + 3;
  qword_26AB82710 = (uint64_t)(v61 + 3);
  uint64_t v72 = qword_26AB82718;
  if ((unint64_t)(v61 + 3) < qword_26AB82718) {
    goto LABEL_145;
  }
LABEL_149:
  uint64_t v83 = qword_26AB82708;
  unint64_t v84 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v71 - qword_26AB82708) >> 3);
  unint64_t v85 = v84 + 1;
  if (v84 + 1 > 0xAAAAAAAAAAAAAAALL) {
    goto LABEL_237;
  }
  unint64_t v86 = 0xAAAAAAAAAAAAAAABLL * ((v72 - qword_26AB82708) >> 3);
  if (2 * v86 > v85) {
    unint64_t v85 = 2 * v86;
  }
  if (v86 >= 0x555555555555555) {
    unint64_t v87 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v87 = v85;
  }
  if (v87)
  {
    if (v87 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_238;
    }
    uint64_t v88 = operator new(24 * v87);
  }
  else
  {
    uint64_t v88 = 0;
  }
  uint64_t v89 = (uint64_t)v88 + 24 * v84;
  *(_OWORD *)uint64_t v89 = xmmword_235E74FB0;
  *(void *)(v89 + 16) = 0x2000000000000000;
  uint64_t v81 = (void *)(v89 + 24);
  if (v71 == (void *)v83)
  {
    qword_26AB82708 = v89;
    qword_26AB82710 = v89 + 24;
    qword_26AB82718 = (uint64_t)v88 + 24 * v87;
  }
  else
  {
    do
    {
      long long v90 = *(_OWORD *)(v71 - 3);
      *(void *)(v89 - 8) = *(v71 - 1);
      *(_OWORD *)(v89 - 24) = v90;
      v89 -= 24;
      v71 -= 3;
    }
    while (v71 != (void *)v83);
    size_t v71 = (void *)qword_26AB82708;
    qword_26AB82708 = v89;
    qword_26AB82710 = (uint64_t)v81;
    qword_26AB82718 = (uint64_t)v88 + 24 * v87;
    if (!v71)
    {
      qword_26AB82710 = (uint64_t)v81;
      uint64_t v82 = qword_26AB82718;
      if ((unint64_t)v81 < qword_26AB82718) {
        goto LABEL_163;
      }
LABEL_167:
      uint64_t v93 = qword_26AB82708;
      unint64_t v94 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v81 - qword_26AB82708) >> 3);
      unint64_t v95 = v94 + 1;
      if (v94 + 1 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_237;
      }
      unint64_t v96 = 0xAAAAAAAAAAAAAAABLL * ((v82 - qword_26AB82708) >> 3);
      if (2 * v96 > v95) {
        unint64_t v95 = 2 * v96;
      }
      if (v96 >= 0x555555555555555) {
        unint64_t v97 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v97 = v95;
      }
      if (v97)
      {
        if (v97 > 0xAAAAAAAAAAAAAAALL) {
          goto LABEL_238;
        }
        size_t v98 = operator new(24 * v97);
      }
      else
      {
        size_t v98 = 0;
      }
      uint64_t v99 = (uint64_t)v98 + 24 * v94;
      *(_OWORD *)uint64_t v99 = xmmword_235E74FC0;
      *(void *)(v99 + 16) = 0x1000000;
      uint64_t v91 = (void *)(v99 + 24);
      if (v81 == (void *)v93)
      {
        qword_26AB82708 = v99;
        qword_26AB82710 = v99 + 24;
        qword_26AB82718 = (uint64_t)v98 + 24 * v97;
      }
      else
      {
        do
        {
          long long v100 = *(_OWORD *)(v81 - 3);
          *(void *)(v99 - 8) = *(v81 - 1);
          *(_OWORD *)(v99 - 24) = v100;
          v99 -= 24;
          v81 -= 3;
        }
        while (v81 != (void *)v93);
        uint64_t v81 = (void *)qword_26AB82708;
        qword_26AB82708 = v99;
        qword_26AB82710 = (uint64_t)v91;
        qword_26AB82718 = (uint64_t)v98 + 24 * v97;
        if (!v81)
        {
          qword_26AB82710 = (uint64_t)v91;
          uint64_t v92 = qword_26AB82718;
          if ((unint64_t)v91 >= qword_26AB82718) {
            goto LABEL_185;
          }
          goto LABEL_181;
        }
      }
      operator delete(v81);
      qword_26AB82710 = (uint64_t)v91;
      uint64_t v92 = qword_26AB82718;
      if ((unint64_t)v91 >= qword_26AB82718) {
        goto LABEL_185;
      }
LABEL_181:
      *(_OWORD *)uint64_t v91 = xmmword_235E74FD0;
      v91[2] = 0xC000000000000000;
      uint64_t v101 = (char *)(v91 + 3);
      qword_26AB82710 = (uint64_t)(v91 + 3);
      uint64_t v102 = qword_26AB82718;
      if ((unint64_t)(v91 + 3) < qword_26AB82718) {
        goto LABEL_199;
      }
      goto LABEL_203;
    }
  }
  operator delete(v71);
  qword_26AB82710 = (uint64_t)v81;
  uint64_t v82 = qword_26AB82718;
  if ((unint64_t)v81 >= qword_26AB82718) {
    goto LABEL_167;
  }
LABEL_163:
  *(_OWORD *)uint64_t v81 = xmmword_235E74FC0;
  v81[2] = 0x1000000;
  uint64_t v91 = v81 + 3;
  qword_26AB82710 = (uint64_t)(v81 + 3);
  uint64_t v92 = qword_26AB82718;
  if ((unint64_t)(v81 + 3) < qword_26AB82718) {
    goto LABEL_181;
  }
LABEL_185:
  uint64_t v103 = qword_26AB82708;
  unint64_t v104 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v91 - qword_26AB82708) >> 3);
  unint64_t v105 = v104 + 1;
  if (v104 + 1 > 0xAAAAAAAAAAAAAAALL) {
    goto LABEL_237;
  }
  unint64_t v106 = 0xAAAAAAAAAAAAAAABLL * ((v92 - qword_26AB82708) >> 3);
  if (2 * v106 > v105) {
    unint64_t v105 = 2 * v106;
  }
  if (v106 >= 0x555555555555555) {
    unint64_t v107 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v107 = v105;
  }
  if (v107)
  {
    if (v107 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_238;
    }
    size_t v108 = operator new(24 * v107);
  }
  else
  {
    size_t v108 = 0;
  }
  uint64_t v109 = (uint64_t)v108 + 24 * v104;
  *(_OWORD *)uint64_t v109 = xmmword_235E74FD0;
  *(void *)(v109 + 16) = 0xC000000000000000;
  uint64_t v101 = (char *)(v109 + 24);
  if (v91 == (void *)v103)
  {
    qword_26AB82708 = v109;
    qword_26AB82710 = v109 + 24;
    qword_26AB82718 = (uint64_t)v108 + 24 * v107;
  }
  else
  {
    do
    {
      long long v110 = *(_OWORD *)(v91 - 3);
      *(void *)(v109 - 8) = *(v91 - 1);
      *(_OWORD *)(v109 - 24) = v110;
      v109 -= 24;
      v91 -= 3;
    }
    while (v91 != (void *)v103);
    uint64_t v91 = (void *)qword_26AB82708;
    qword_26AB82708 = v109;
    qword_26AB82710 = (uint64_t)v101;
    qword_26AB82718 = (uint64_t)v108 + 24 * v107;
    if (!v91)
    {
      qword_26AB82710 = (uint64_t)v101;
      uint64_t v102 = qword_26AB82718;
      if ((unint64_t)v101 < qword_26AB82718) {
        goto LABEL_199;
      }
LABEL_203:
      uint64_t v113 = qword_26AB82708;
      unint64_t v114 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v101[-qword_26AB82708] >> 3);
      unint64_t v115 = v114 + 1;
      if (v114 + 1 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_237;
      }
      unint64_t v116 = 0xAAAAAAAAAAAAAAABLL * ((v102 - qword_26AB82708) >> 3);
      if (2 * v116 > v115) {
        unint64_t v115 = 2 * v116;
      }
      if (v116 >= 0x555555555555555) {
        unint64_t v117 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v117 = v115;
      }
      if (v117)
      {
        if (v117 > 0xAAAAAAAAAAAAAAALL) {
          goto LABEL_238;
        }
        int v118 = operator new(24 * v117);
      }
      else
      {
        int v118 = 0;
      }
      uint64_t v119 = (uint64_t)v118 + 24 * v114;
      *(_OWORD *)uint64_t v119 = xmmword_235E74FE0;
      *(void *)(v119 + 16) = 16711680;
      std::ctype_base::mask v111 = (char *)(v119 + 24);
      if (v101 == (char *)v113)
      {
        qword_26AB82708 = v119;
        qword_26AB82710 = v119 + 24;
        qword_26AB82718 = (uint64_t)v118 + 24 * v117;
      }
      else
      {
        do
        {
          long long v120 = *(_OWORD *)(v101 - 24);
          *(void *)(v119 - 8) = *((void *)v101 - 1);
          *(_OWORD *)(v119 - 24) = v120;
          v119 -= 24;
          v101 -= 24;
        }
        while (v101 != (char *)v113);
        uint64_t v101 = (char *)qword_26AB82708;
        qword_26AB82708 = v119;
        qword_26AB82710 = (uint64_t)v111;
        qword_26AB82718 = (uint64_t)v118 + 24 * v117;
        if (!v101)
        {
          qword_26AB82710 = (uint64_t)v111;
          uint64_t v112 = qword_26AB82718;
          if ((unint64_t)v111 >= qword_26AB82718) {
            goto LABEL_220;
          }
          goto LABEL_217;
        }
      }
      operator delete(v101);
      qword_26AB82710 = (uint64_t)v111;
      uint64_t v112 = qword_26AB82718;
      if ((unint64_t)v111 >= qword_26AB82718) {
        goto LABEL_220;
      }
LABEL_217:
      *(_OWORD *)std::ctype_base::mask v111 = xmmword_235E74FF0;
      *((void *)v111 + 2) = 65280;
      uint64_t v121 = (uint64_t)(v111 + 24);
      goto LABEL_236;
    }
  }
  operator delete(v91);
  qword_26AB82710 = (uint64_t)v101;
  uint64_t v102 = qword_26AB82718;
  if ((unint64_t)v101 >= qword_26AB82718) {
    goto LABEL_203;
  }
LABEL_199:
  *(_OWORD *)uint64_t v101 = xmmword_235E74FE0;
  *((void *)v101 + 2) = 16711680;
  std::ctype_base::mask v111 = v101 + 24;
  qword_26AB82710 = (uint64_t)(v101 + 24);
  uint64_t v112 = qword_26AB82718;
  if ((unint64_t)(v101 + 24) < qword_26AB82718) {
    goto LABEL_217;
  }
LABEL_220:
  uint64_t v122 = qword_26AB82708;
  unint64_t v123 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v111[-qword_26AB82708] >> 3);
  unint64_t v124 = v123 + 1;
  if (v123 + 1 > 0xAAAAAAAAAAAAAAALL) {
LABEL_237:
  }
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  unint64_t v125 = 0xAAAAAAAAAAAAAAABLL * ((v112 - qword_26AB82708) >> 3);
  if (2 * v125 > v124) {
    unint64_t v124 = 2 * v125;
  }
  if (v125 >= 0x555555555555555) {
    unint64_t v126 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v126 = v124;
  }
  if (v126)
  {
    if (v126 <= 0xAAAAAAAAAAAAAAALL)
    {
      uint64_t v127 = operator new(24 * v126);
      goto LABEL_230;
    }
LABEL_238:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v127 = 0;
LABEL_230:
  uint64_t v128 = (uint64_t)v127 + 24 * v123;
  *(_OWORD *)uint64_t v128 = xmmword_235E74FF0;
  *(void *)(v128 + 16) = 65280;
  uint64_t v121 = v128 + 24;
  if (v111 == (char *)v122)
  {
    qword_26AB82708 = (uint64_t)v127 + 24 * v123;
    qword_26AB82710 = v128 + 24;
    qword_26AB82718 = (uint64_t)v127 + 24 * v126;
LABEL_235:
    operator delete(v111);
    goto LABEL_236;
  }
  do
  {
    long long v129 = *(_OWORD *)(v111 - 24);
    *(void *)(v128 - 8) = *((void *)v111 - 1);
    *(_OWORD *)(v128 - 24) = v129;
    v128 -= 24;
    v111 -= 24;
  }
  while (v111 != (char *)v122);
  std::ctype_base::mask v111 = (char *)qword_26AB82708;
  qword_26AB82708 = v128;
  qword_26AB82710 = v121;
  qword_26AB82718 = (uint64_t)v127 + 24 * v126;
  if (v111) {
    goto LABEL_235;
  }
LABEL_236:
  qword_26AB82710 = v121;
  uint64_t v130 = *(void *)(v1 + 192);
  v134[0] = MEMORY[0x263EF8330];
  v134[1] = 0x40000000;
  v134[2] = ___ZN4coex16ARICommandDriver4initEv_block_invoke_3;
  v134[3] = &__block_descriptor_tmp_6;
  v134[4] = v1;
  *(void *)long long buf = v134;
  ice::Client::setEventHandler<void({block_pointer})(void)>(v130, 0, (uint64_t *)buf);
  uint64_t v131 = *(void *)(v1 + 192);
  v133[0] = MEMORY[0x263EF8330];
  v133[1] = 0x40000000;
  v133[2] = ___ZN4coex16ARICommandDriver4initEv_block_invoke_4;
  v133[3] = &__block_descriptor_tmp_5_0;
  v133[4] = v1;
  *(void *)long long buf = v133;
  ice::Client::setEventHandler<void({block_pointer})(void)>(v131, 1, (uint64_t *)buf);
  return ice::Client::start(*(ice::Client **)(v1 + 192));
}

uint64_t ___ZN4coex16ARICommandDriver4initEv_block_invoke_3(uint64_t a1)
{
  uint64_t v62 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf) = 0;
    _os_log_debug_impl(&dword_235DB9000, v2, OS_LOG_TYPE_DEBUG, "#D Started", (uint8_t *)&buf, 2u);
  }
  uint64_t v3 = *(void *)(v1 + 128);
  unint64_t v36 = 0;
  unint64_t v37 = 0;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v49 = v4;
  long long v50 = v4;
  long long v47 = v4;
  long long v48 = v4;
  long long v45 = v4;
  long long v46 = v4;
  long long v43 = v4;
  long long v44 = v4;
  long long buf = v4;
  long long v42 = v4;
  uint64_t v5 = *(pthread_mutex_t **)(v3 + 24);
  *(void *)&long long v51 = 10;
  *((void *)&v51 + 1) = &buf;
  *(void *)&long long v52 = 0;
  *((void *)&v52 + 1) = v5;
  pthread_mutex_lock(v5);
  unint64_t v6 = *(atomic_uint **)(v3 + 8);
  if (!v6)
  {
    unint64_t v8 = *(uint64_t ***)v3;
    goto LABEL_15;
  }
  unsigned int explicit = atomic_load_explicit(v6 + 2, memory_order_acquire);
  unint64_t v8 = *(uint64_t ***)v3;
  if (explicit == 1)
  {
    uint64_t v9 = *v8;
    uint64_t v10 = *(void *)(v3 + 16);
    if ((uint64_t *)v10 == *v8)
    {
      uint64_t v10 = v9[1];
      *(void *)&long long v38 = v10;
      if (v9 == (uint64_t *)v10)
      {
LABEL_12:
        *(void *)(v3 + 16) = v10;
        goto LABEL_13;
      }
    }
    else
    {
      *(void *)&long long v38 = *(void *)(v3 + 16);
    }
    uint64_t v11 = *(void *)(v10 + 16);
    if (*(unsigned char *)(v11 + 24))
    {
      uint64_t v10 = *(void *)(v10 + 8);
    }
    else
    {
      uint64_t v10 = boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>>::erase(v9, (int *)(v11 + 64), (uint64_t **)&v38);
      unint64_t v8 = *(uint64_t ***)v3;
    }
    goto LABEL_12;
  }
LABEL_13:
  unint64_t v6 = *(atomic_uint **)(v3 + 8);
  if (v6) {
    atomic_fetch_add_explicit(v6 + 2, 1u, memory_order_relaxed);
  }
LABEL_15:
  uint64_t v12 = v37;
  unint64_t v36 = v8;
  unint64_t v37 = v6;
  if (v12)
  {
    if (atomic_fetch_add(v12 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v12 + 16))(v12);
      if (atomic_fetch_add(v12 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v12 + 24))(v12);
      }
    }
  }
  pthread_mutex_unlock(*((pthread_mutex_t **)&v52 + 1));
  unint64_t v13 = *((void *)&v51 + 1);
  if (*((void *)&v51 + 1))
  {
    if ((uint64_t)v52 - 1 >= 0)
    {
      unint64_t v14 = *((void *)&v51 + 1) + 16 * v52;
      do
      {
        unint64_t v15 = *(atomic_uint **)(v14 - 8);
        if (v15)
        {
          if (atomic_fetch_add(v15 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v15 + 16))(v15);
            if (atomic_fetch_add(v15 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v15 + 24))(v15);
            }
          }
        }
        v14 -= 16;
      }
      while (v14 > v13);
    }
    if ((unint64_t)v51 >= 0xB) {
      operator delete(*((void **)&v51 + 1));
    }
  }
  *(void *)&long long v16 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v60 = v16;
  long long v55 = v16;
  unint64_t v56 = 0xAAAAAAAAAAAAAAAALL;
  long long v53 = v16;
  long long v54 = v16;
  long long v51 = v16;
  long long v52 = v16;
  long long v49 = v16;
  long long v50 = v16;
  long long v47 = v16;
  long long v48 = v16;
  long long v45 = v16;
  long long v46 = v16;
  long long v43 = v16;
  long long v44 = v16;
  long long buf = v16;
  long long v42 = v16;
  LOBYTE(buf) = 0;
  uint64_t v57 = 10;
  dispatch_object_t v58 = (char *)&buf + 8;
  *(void *)((char *)&v60 + 4) = 0;
  uint64_t v59 = 0;
  uint64_t v61 = 0;
  unint64_t v17 = v36;
  uint64_t v18 = (uint64_t)*v36;
  p_long long buf = &buf;
  uint64_t v34 = v3;
  uint64_t v35 = v18;
  *(void *)&long long v31 = *(void *)(v18 + 8);
  *((void *)&v31 + 1) = v18;
  *(void *)&long long v32 = &buf;
  *((void *)&v32 + 1) = v18;
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>::lock_next_callable(&v31);
  v30[0] = *v17;
  v30[1] = v30[0];
  _OWORD v30[2] = &buf;
  v30[3] = v30[0];
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>::lock_next_callable(v30);
  long long v38 = v31;
  long long v39 = v32;
  uint64_t v19 = v30[0];
  uint64_t v20 = v31;
  if ((void)v31 == v30[0])
  {
    if (DWORD2(v60) <= DWORD1(v60)) {
      goto LABEL_49;
    }
LABEL_48:
    boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::force_cleanup_connections(v34, v35);
    goto LABEL_49;
  }
  xpc_object_t v21 = (unsigned char *)v39;
  if (!*(unsigned char *)v39)
  {
    uint64_t v22 = *(void *)(*(void *)(v31 + 16) + 32);
    uint64_t v23 = *(void *)(v22 + 24);
    if (!v23)
    {
      std::runtime_error::runtime_error(&v40, "call to empty boost::function");
      v40.__vftable = (std::runtime_error_vtbl *)&unk_26E93D570;
      boost::throw_exception<boost::bad_function_call>(&v40);
    }
    (*(void (**)(uint64_t))((v23 & 0xFFFFFFFFFFFFFFFELL) + 8))(v22 + 32);
    if (!*v21) {
      *xpc_object_t v21 = 1;
    }
  }
  *(void *)&long long v38 = *(void *)(v20 + 8);
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>::lock_next_callable(&v38);
  unint64_t v24 = (unsigned char *)v39;
  if (*(unsigned char *)v39) {
    *(unsigned char *)long long v39 = 0;
  }
  for (uint64_t i = v38; (void)v38 != v19; uint64_t i = v38)
  {
    uint64_t v26 = *(void *)(*(void *)(i + 16) + 32);
    uint64_t v27 = *(void *)(v26 + 24);
    if (!v27)
    {
      std::runtime_error::runtime_error(&v40, "call to empty boost::function");
      v40.__vftable = (std::runtime_error_vtbl *)&unk_26E93D570;
      boost::throw_exception<boost::bad_function_call>(&v40);
    }
    (*(void (**)(uint64_t))((v27 & 0xFFFFFFFFFFFFFFFELL) + 8))(v26 + 32);
    if (!*v24) {
      *unint64_t v24 = 1;
    }
    *(void *)&long long v38 = *(void *)(i + 8);
    boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>::lock_next_callable(&v38);
    unint64_t v24 = (unsigned char *)v39;
    if (*(unsigned char *)v39) {
      *(unsigned char *)long long v39 = 0;
    }
  }
  if (*((_DWORD *)p_buf + 70) > *((_DWORD *)p_buf + 69)) {
    goto LABEL_48;
  }
LABEL_49:
  uint64_t result = boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type>>::~slot_call_iterator_cache((uint64_t)&buf);
  uint64_t v29 = v37;
  if (v37 && atomic_fetch_add(v37 + 2, 0xFFFFFFFF) == 1)
  {
    uint64_t result = (*(uint64_t (**)(atomic_uint *))(*(void *)v29 + 16))(v29);
    if (atomic_fetch_add(v29 + 3, 0xFFFFFFFF) == 1) {
      return (*(uint64_t (**)(atomic_uint *))(*(void *)v29 + 24))(v29);
    }
  }
  return result;
}

void sub_235E108D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_235E108E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::runtime_error a27)
{
  std::runtime_error::~runtime_error(&a27);
  if (a2 != 2)
  {
    boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(&v29);
    boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type>>::~slot_call_iterator_cache((uint64_t)&v31);
    boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&v30);
    _Unwind_Resume(a1);
  }
  __cxa_begin_catch(a1);
  boost::signals2::detail::connection_body_base::disconnect(*(boost::signals2::detail::connection_body_base **)(a23 + 16));
  __cxa_rethrow();
}

void sub_235E10948(_Unwind_Exception *a1, int a2)
{
  __cxa_end_catch();
  if (a2 != 2)
  {
    boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(&v4);
    boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type>>::~slot_call_iterator_cache((uint64_t)&v6);
    boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&v5);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x235E10918);
}

void sub_235E10980(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,unint64_t a49,char *__p,uint64_t a51)
{
  if (__p)
  {
    if (a51 - 1 >= 0)
    {
      long long v51 = &__p[16 * a51];
      do
      {
        long long v52 = (atomic_uint *)*((void *)v51 - 1);
        if (v52)
        {
          if (atomic_fetch_add(v52 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v52 + 16))(v52);
            if (atomic_fetch_add(v52 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v52 + 24))(v52);
            }
          }
        }
        v51 -= 16;
      }
      while (v51 > __p);
    }
    if (a49 >= 0xB) {
      operator delete(__p);
    }
  }
  JUMPOUT(0x235E10A70);
}

void sub_235E10A4C(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x235E10A78);
}

void ___ZN4coex16ARICommandDriver4initEv_block_invoke_4(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_debug_impl(&dword_235DB9000, v1, OS_LOG_TYPE_DEBUG, "#D Stopped", v2, 2u);
  }
}

void coex::ARICommandDriver::set(uint64_t a1, const void **a2, int a3, uint64_t a4)
{
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 1174405120;
  v11[2] = ___ZN4coex16ARICommandDriver3setEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke;
  v11[3] = &__block_descriptor_tmp_7_1;
  unint64_t v7 = *a2;
  _OWORD v11[4] = a1;
  CFTypeRef cf = v7;
  if (v7) {
    CFRetain(v7);
  }
  int v15 = a3;
  unint64_t v8 = *(void **)a4;
  if (*(void *)a4) {
    unint64_t v8 = _Block_copy(v8);
  }
  uint64_t v9 = (uint64_t *)(a1 + 72);
  uint64_t v10 = *(NSObject **)(a4 + 8);
  aBlocunint64_t k = v8;
  dispatch_object_t object = v10;
  if (v10) {
    dispatch_retain(v10);
  }
  ctu::SharedSynchronizable<coex::CommandDriver>::execute_wrapped(v9, (uint64_t)v11);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (cf) {
    CFRelease(cf);
  }
}

void ___ZN4coex16ARICommandDriver3setEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  CFDictionaryRef v2 = *(const __CFDictionary **)(a1 + 40);
  CFDictionaryRef v10 = v2;
  if (v2) {
    CFRetain(v2);
  }
  int v4 = *(_DWORD *)(a1 + 64);
  uint64_t v5 = *(const void **)(a1 + 48);
  if (v5)
  {
    uint64_t v6 = _Block_copy(v5);
    unint64_t v7 = *(NSObject **)(a1 + 56);
    unint64_t v8 = v6;
    uint64_t v9 = v7;
    if (!v7) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v6 = 0;
  unint64_t v7 = *(NSObject **)(a1 + 56);
  unint64_t v8 = 0;
  uint64_t v9 = v7;
  if (v7) {
LABEL_5:
  }
    dispatch_retain(v7);
LABEL_6:
  coex::ARICommandDriver::set_sync(v3, &v10, v4, (uint64_t)&v8);
  if (v7) {
    dispatch_release(v7);
  }
  if (v6) {
    _Block_release(v6);
  }
  if (v2) {
    CFRelease(v2);
  }
}

void sub_235E10CB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  coex::CommandDriver::Callback::~Callback((coex::CommandDriver::Callback *)va);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va1);
  _Unwind_Resume(a1);
}

void coex::ARICommandDriver::set_sync(uint64_t a1, const __CFDictionary **a2, int a3, uint64_t a4)
{
  unint64_t v8 = dispatch_group_create();
  uint64_t v9 = v8;
  if (v8)
  {
    dispatch_retain(v8);
    dispatch_group_enter(v9);
  }
  v109[0] = 0;
  v109[1] = v109;
  v109[2] = 0x3802000000;
  v109[3] = __Block_byref_object_copy_;
  v109[4] = __Block_byref_object_dispose_;
  long long v110 = (const void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v111 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  CFDictionaryRef v10 = *(void **)a4;
  if (*(void *)a4) {
    CFDictionaryRef v10 = _Block_copy(v10);
  }
  uint64_t v11 = *(NSObject **)(a4 + 8);
  long long v110 = v10;
  dispatch_object_t v111 = v11;
  if (v11) {
    dispatch_retain(v11);
  }
  unint64_t v107 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v108 = 0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1174405120;
  xpc_object_t aBlock[2] = ___ZN4coex16ARICommandDriver8set_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke;
  aBlock[3] = &unk_26E93E680;
  dispatch_object_t v106 = v9;
  if (v9)
  {
    dispatch_retain(v9);
    dispatch_group_enter(v106);
  }
  aBlock[4] = v109;
  uint64_t v12 = _Block_copy(aBlock);
  unint64_t v13 = *(NSObject **)(a1 + 88);
  if (v13) {
    dispatch_retain(*(dispatch_object_t *)(a1 + 88));
  }
  if (v12)
  {
    unint64_t v14 = _Block_copy(v12);
    unint64_t v107 = (unint64_t)v14;
    unint64_t v108 = (unint64_t)v13;
    if (!v13) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  unint64_t v14 = 0;
  unint64_t v107 = 0;
  unint64_t v108 = (unint64_t)v13;
  if (v13)
  {
LABEL_13:
    dispatch_retain(v13);
    dispatch_release(v13);
  }
LABEL_14:
  if (v12) {
    _Block_release(v12);
  }
  v104[0] = 0xAAAAAAAAAAAAAAAALL;
  v104[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v15 = ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v104, *a2);
  long long v16 = (const void *)(*(uint64_t (**)(uint64_t, void))v104[0])(v15, *MEMORY[0x263F8B708]);
  unint64_t v17 = v16;
  if (v16)
  {
    CFTypeID v18 = CFGetTypeID(v16);
    CFTypeID TypeID = CFDictionaryGetTypeID();
    CFRelease(v17);
    if (v18 == TypeID) {
      goto LABEL_20;
    }
  }
  xpc_object_t v21 = (const void *)(*(uint64_t (**)(void *, void))v104[0])(v104, *MEMORY[0x263F8B650]);
  uint64_t v22 = v21;
  if (v21)
  {
    CFTypeID v23 = CFGetTypeID(v21);
    CFTypeID v24 = CFDictionaryGetTypeID();
    CFRelease(v22);
    if (v23 == v24)
    {
LABEL_20:
      CFDictionaryRef v25 = *a2;
      CFDictionaryRef v103 = v25;
      if (v25) {
        CFRetain(v25);
      }
      if (v14)
      {
        uint64_t v26 = _Block_copy(v14);
        uint64_t v101 = v26;
        uint64_t v102 = v13;
        if (!v13)
        {
LABEL_25:
          coex::ARICommandDriver::setWLANState_sync(a1, v20, (uint64_t)&v101);
          if (v13) {
            dispatch_release(v13);
          }
          if (v26) {
            _Block_release(v26);
          }
          if (v25) {
            CFRelease(v25);
          }
          goto LABEL_31;
        }
      }
      else
      {
        uint64_t v26 = 0;
        uint64_t v101 = 0;
        uint64_t v102 = v13;
        if (!v13) {
          goto LABEL_25;
        }
      }
      dispatch_retain(v13);
      goto LABEL_25;
    }
  }
LABEL_31:
  uint64_t v27 = (const void *)(*(uint64_t (**)(void *, void))v104[0])(v104, *MEMORY[0x263F8B5A0]);
  uint64_t v28 = v27;
  if (!v27) {
    goto LABEL_41;
  }
  CFTypeID v29 = CFGetTypeID(v27);
  CFTypeID v30 = CFDictionaryGetTypeID();
  CFRelease(v28);
  if (v29 != v30) {
    goto LABEL_41;
  }
  CFDictionaryRef v100 = (const __CFDictionary *)v28;
  CFRetain(v28);
  if (!v14)
  {
    uint64_t v31 = 0;
    size_t v98 = 0;
    uint64_t v99 = v13;
    if (!v13) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  uint64_t v31 = _Block_copy(v14);
  size_t v98 = v31;
  uint64_t v99 = v13;
  if (v13) {
LABEL_35:
  }
    dispatch_retain(v13);
LABEL_36:
  coex::ARICommandDriver::setPolicy_sync(a1, &v100, a3, (uint64_t)&v98);
  if (v13) {
    dispatch_release(v13);
  }
  if (v31) {
    _Block_release(v31);
  }
  CFRelease(v28);
LABEL_41:
  long long v32 = (const void *)(*(uint64_t (**)(void *, void))v104[0])(v104, *MEMORY[0x263F8B618]);
  uint64_t v33 = v32;
  if (!v32) {
    goto LABEL_51;
  }
  CFTypeID v34 = CFGetTypeID(v32);
  CFTypeID v35 = CFDictionaryGetTypeID();
  CFRelease(v33);
  if (v34 != v35) {
    goto LABEL_51;
  }
  unint64_t v97 = v33;
  CFRetain(v33);
  if (!v14)
  {
    long long v38 = 0;
    unint64_t v95 = 0;
    unint64_t v96 = v13;
    if (!v13) {
      goto LABEL_46;
    }
    goto LABEL_45;
  }
  long long v38 = _Block_copy(v14);
  unint64_t v95 = v38;
  unint64_t v96 = v13;
  if (v13) {
LABEL_45:
  }
    dispatch_retain(v13);
LABEL_46:
  coex::ARICommandDriver::setBandFilterInfo_sync(a1, v36, v37, (uint64_t)&v95);
  if (v13) {
    dispatch_release(v13);
  }
  if (v38) {
    _Block_release(v38);
  }
  CFRelease(v33);
LABEL_51:
  long long v39 = (const void *)(*(uint64_t (**)(void *, void))v104[0])(v104, *MEMORY[0x263F8B6E8]);
  std::runtime_error v40 = v39;
  if (!v39) {
    goto LABEL_61;
  }
  CFTypeID v41 = CFGetTypeID(v39);
  CFTypeID v42 = CFDictionaryGetTypeID();
  CFRelease(v40);
  if (v41 != v42) {
    goto LABEL_61;
  }
  CFDictionaryRef v94 = (const __CFDictionary *)v40;
  CFRetain(v40);
  if (!v14)
  {
    long long v43 = 0;
    uint64_t v92 = 0;
    uint64_t v93 = v13;
    if (!v13) {
      goto LABEL_56;
    }
    goto LABEL_55;
  }
  long long v43 = _Block_copy(v14);
  uint64_t v92 = v43;
  uint64_t v93 = v13;
  if (v13) {
LABEL_55:
  }
    dispatch_retain(v13);
LABEL_56:
  coex::ARICommandDriver::setScanFreqBandFilter_sync((void *)a1, &v94, a3, (uint64_t)&v92);
  if (v13) {
    dispatch_release(v13);
  }
  if (v43) {
    _Block_release(v43);
  }
  CFRelease(v40);
LABEL_61:
  long long v44 = (const void *)(*(uint64_t (**)(void *, void))v104[0])(v104, *MEMORY[0x263F8B5E0]);
  long long v45 = v44;
  if (v44)
  {
    CFTypeID v46 = CFGetTypeID(v44);
    CFTypeID v47 = CFDictionaryGetTypeID();
    CFRelease(v45);
    if (v46 == v47)
    {
      CFDictionaryRef v91 = (const __CFDictionary *)v45;
      CFRetain(v45);
      long long v48 = 0;
      CFDictionaryRef v90 = 0;
      char v49 = 1;
      if (v14) {
        goto LABEL_64;
      }
LABEL_77:
      long long v50 = 0;
      uint64_t v88 = 0;
      uint64_t v89 = v13;
      if (!v13) {
        goto LABEL_66;
      }
      goto LABEL_65;
    }
  }
  long long v51 = (const void *)(*(uint64_t (**)(void *, void))v104[0])(v104, *MEMORY[0x263F8B5F0]);
  long long v48 = v51;
  if (!v51) {
    goto LABEL_79;
  }
  CFTypeID v52 = CFGetTypeID(v51);
  CFTypeID v53 = CFDictionaryGetTypeID();
  CFRelease(v48);
  if (v52 != v53) {
    goto LABEL_79;
  }
  CFDictionaryRef v90 = (const __CFDictionary *)v48;
  CFDictionaryRef v91 = 0;
  CFRetain(v48);
  long long v45 = 0;
  char v49 = 0;
  if (!v14) {
    goto LABEL_77;
  }
LABEL_64:
  long long v50 = _Block_copy(v14);
  uint64_t v88 = v50;
  uint64_t v89 = v13;
  if (v13) {
LABEL_65:
  }
    dispatch_retain(v13);
LABEL_66:
  coex::ARICommandDriver::setLinkQualityMode_sync((void *)a1, &v91, &v90, a3, (uint64_t)&v88);
  if (v13) {
    dispatch_release(v13);
  }
  if (v50) {
    _Block_release(v50);
  }
  if ((v49 & 1) == 0) {
    CFRelease(v48);
  }
  if (v45) {
    CFRelease(v45);
  }
LABEL_79:
  long long v54 = (const void *)(*(uint64_t (**)(void *, void))v104[0])(v104, *MEMORY[0x263F8B608]);
  long long v55 = v54;
  if (!v54) {
    goto LABEL_89;
  }
  CFTypeID v56 = CFGetTypeID(v54);
  CFTypeID v57 = CFDictionaryGetTypeID();
  CFRelease(v55);
  if (v56 != v57) {
    goto LABEL_89;
  }
  CFDictionaryRef v87 = (const __CFDictionary *)v55;
  CFRetain(v55);
  if (!v14)
  {
    dispatch_object_t v58 = 0;
    unint64_t v85 = 0;
    unint64_t v86 = v13;
    if (!v13) {
      goto LABEL_84;
    }
    goto LABEL_83;
  }
  dispatch_object_t v58 = _Block_copy(v14);
  unint64_t v85 = v58;
  unint64_t v86 = v13;
  if (v13) {
LABEL_83:
  }
    dispatch_retain(v13);
LABEL_84:
  coex::ARICommandDriver::setWiFiStatus_sync((void *)a1, &v87, (uint64_t)&v85);
  if (v13) {
    dispatch_release(v13);
  }
  if (v58) {
    _Block_release(v58);
  }
  CFRelease(v55);
LABEL_89:
  uint64_t v59 = (const void *)(*(uint64_t (**)(void *, void))v104[0])(v104, *MEMORY[0x263F8B5E8]);
  long long v60 = v59;
  if (!v59) {
    goto LABEL_99;
  }
  CFTypeID v61 = CFGetTypeID(v59);
  CFTypeID v62 = CFDictionaryGetTypeID();
  CFRelease(v60);
  if (v61 != v62) {
    goto LABEL_99;
  }
  CFDictionaryRef v84 = (const __CFDictionary *)v60;
  CFRetain(v60);
  if (!v14)
  {
    uint64_t v63 = 0;
    uint64_t v82 = 0;
    uint64_t v83 = v13;
    if (!v13) {
      goto LABEL_94;
    }
    goto LABEL_93;
  }
  uint64_t v63 = _Block_copy(v14);
  uint64_t v82 = v63;
  uint64_t v83 = v13;
  if (v13) {
LABEL_93:
  }
    dispatch_retain(v13);
LABEL_94:
  coex::ARICommandDriver::setLAAConfig_sync((void *)a1, &v84, a3, (uint64_t)&v82);
  if (v13) {
    dispatch_release(v13);
  }
  if (v63) {
    _Block_release(v63);
  }
  CFRelease(v60);
LABEL_99:
  unint64_t v64 = (const void *)(*(uint64_t (**)(void *, void))v104[0])(v104, *MEMORY[0x263F8B6A8]);
  unint64_t v65 = v64;
  if (!v64) {
    goto LABEL_109;
  }
  CFTypeID v66 = CFGetTypeID(v64);
  CFTypeID v67 = CFDictionaryGetTypeID();
  CFRelease(v65);
  if (v66 != v67) {
    goto LABEL_109;
  }
  CFDictionaryRef v81 = (const __CFDictionary *)v65;
  CFRetain(v65);
  if (!v14)
  {
    long long v68 = 0;
    uint64_t v79 = 0;
    long long v80 = v13;
    if (!v13) {
      goto LABEL_104;
    }
    goto LABEL_103;
  }
  long long v68 = _Block_copy(v14);
  uint64_t v79 = v68;
  long long v80 = v13;
  if (v13) {
LABEL_103:
  }
    dispatch_retain(v13);
LABEL_104:
  coex::ARICommandDriver::setFCMBCMAntennaMode_sync((void *)a1, &v81, (uint64_t)&v79);
  if (v13) {
    dispatch_release(v13);
  }
  if (v68) {
    _Block_release(v68);
  }
  CFRelease(v65);
LABEL_109:
  uint64_t v69 = (const void *)(*(uint64_t (**)(void *, void))v104[0])(v104, *MEMORY[0x263F8B620]);
  long long v70 = v69;
  if (!v69) {
    goto LABEL_119;
  }
  CFTypeID v71 = CFGetTypeID(v69);
  CFTypeID v72 = CFDictionaryGetTypeID();
  CFRelease(v70);
  if (v71 != v72) {
    goto LABEL_119;
  }
  CFDictionaryRef v78 = (const __CFDictionary *)v70;
  CFRetain(v70);
  if (!v14)
  {
    uint64_t v73 = 0;
    unint64_t v76 = 0;
    unint64_t v77 = v13;
    if (!v13) {
      goto LABEL_114;
    }
    goto LABEL_113;
  }
  uint64_t v73 = _Block_copy(v14);
  unint64_t v76 = v73;
  unint64_t v77 = v13;
  if (v13) {
LABEL_113:
  }
    dispatch_retain(v13);
LABEL_114:
  coex::ARICommandDriver::setRC1Duration_sync((void *)a1, &v78, a3, (uint64_t)&v76);
  if (v13) {
    dispatch_release(v13);
  }
  if (v73) {
    _Block_release(v73);
  }
  CFRelease(v70);
LABEL_119:
  unint64_t v74 = *(NSObject **)(a1 + 88);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZN4coex16ARICommandDriver8set_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke_17;
  block[3] = &unk_264C7DCD8;
  void block[4] = v109;
  dispatch_group_notify(v9, v74, block);
  MEMORY[0x237DF4EE0](v104);
  if (v13) {
    dispatch_release(v13);
  }
  if (v14) {
    _Block_release(v14);
  }
  if (v106)
  {
    dispatch_group_leave(v106);
    if (v106) {
      dispatch_release(v106);
    }
  }
  _Block_object_dispose(v109, 8);
  if (v111) {
    dispatch_release(v111);
  }
  if (v110) {
    _Block_release(v110);
  }
  if (v9)
  {
    dispatch_group_leave(v9);
    dispatch_release(v9);
    dispatch_release(v9);
  }
}

void sub_235E11810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  coex::CommandDriver::Callback::~Callback((coex::CommandDriver::Callback *)va);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va1);
  MEMORY[0x237DF4EE0](v9 - 224);
  coex::CommandDriver::Callback::~Callback((coex::CommandDriver::Callback *)(v9 - 160));
  uint64_t v11 = *(NSObject **)(v9 - 168);
  if (v11)
  {
    dispatch_group_leave(v11);
    uint64_t v12 = *(NSObject **)(v9 - 168);
    if (v12) {
      dispatch_release(v12);
    }
  }
  _Block_object_dispose((const void *)(v9 - 144), 8);
  coex::CommandDriver::Callback::~Callback((coex::CommandDriver::Callback *)(v8 + 40));
  if (v7)
  {
    dispatch_group_leave(v7);
    dispatch_release(v7);
    dispatch_release(v7);
  }
  _Unwind_Resume(a1);
}

void coex::CommandDriver::Callback::~Callback(coex::CommandDriver::Callback *this)
{
  CFDictionaryRef v2 = *((void *)this + 1);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)this) {
    _Block_release(*(const void **)this);
  }
}

void __copy_helper_block_e8_40c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE48c35_ZTSN4coex13CommandDriver8CallbackE(void *a1, void *a2)
{
  int v4 = (const void *)a2[5];
  a1[5] = v4;
  if (v4) {
    CFRetain(v4);
  }
  uint64_t v5 = (void *)a2[6];
  if (v5) {
    uint64_t v5 = _Block_copy(v5);
  }
  uint64_t v6 = a2[7];
  a1[6] = v5;
  a1[7] = v6;
  if (v6)
  {
    dispatch_retain(v6);
  }
}

void __destroy_helper_block_e8_40c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE48c35_ZTSN4coex13CommandDriver8CallbackE(void *a1)
{
  CFDictionaryRef v2 = a1[7];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = (const void *)a1[6];
  if (v3) {
    _Block_release(v3);
  }
  int v4 = (const void *)a1[5];
  if (v4) {
    CFRelease(v4);
  }
}

void coex::ARICommandDriver::get(uint64_t a1, const void **a2, int a3, uint64_t a4)
{
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 1174405120;
  v11[2] = ___ZN4coex16ARICommandDriver3getEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke;
  v11[3] = &__block_descriptor_tmp_10_2;
  unint64_t v7 = *a2;
  _OWORD v11[4] = a1;
  CFTypeRef cf = v7;
  if (v7) {
    CFRetain(v7);
  }
  int v15 = a3;
  uint64_t v8 = *(void **)a4;
  if (*(void *)a4) {
    uint64_t v8 = _Block_copy(v8);
  }
  uint64_t v9 = (uint64_t *)(a1 + 72);
  CFDictionaryRef v10 = *(NSObject **)(a4 + 8);
  aBlocunint64_t k = v8;
  dispatch_object_t object = v10;
  if (v10) {
    dispatch_retain(v10);
  }
  ctu::SharedSynchronizable<coex::CommandDriver>::execute_wrapped(v9, (uint64_t)v11);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (cf) {
    CFRelease(cf);
  }
}

void ___ZN4coex16ARICommandDriver3getEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  CFDictionaryRef v4 = (const __CFDictionary *)a1[5];
  CFDictionaryRef v11 = v4;
  if (v4) {
    CFRetain(v4);
  }
  uint64_t v6 = (const void *)a1[6];
  if (v6)
  {
    unint64_t v7 = _Block_copy(v6);
    uint64_t v8 = a1[7];
    uint64_t v9 = v7;
    CFDictionaryRef v10 = v8;
    if (!v8) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  unint64_t v7 = 0;
  uint64_t v8 = a1[7];
  uint64_t v9 = 0;
  CFDictionaryRef v10 = v8;
  if (v8) {
LABEL_5:
  }
    dispatch_retain(v8);
LABEL_6:
  coex::ARICommandDriver::get_sync(v5, &v11, a3, (uint64_t)&v9);
  if (v8) {
    dispatch_release(v8);
  }
  if (v7) {
    _Block_release(v7);
  }
  if (v4) {
    CFRelease(v4);
  }
}

void sub_235E11C84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  coex::CommandDriver::Callback::~Callback((coex::CommandDriver::Callback *)va);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va1);
  _Unwind_Resume(a1);
}

uint64_t coex::ARICommandDriver::get_sync(uint64_t a1, const __CFDictionary **a2, uint64_t a3, uint64_t a4)
{
  v12[0] = 0xAAAAAAAAAAAAAAAALL;
  v12[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v12, *a2);
  if (!ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v12, (const __CFString *)*MEMORY[0x263F8B6C8]))return MEMORY[0x237DF4EE0](v12); {
  if (!*(void *)a4)
  }
  {
    unint64_t v7 = 0;
    uint64_t v8 = *(NSObject **)(a4 + 8);
    CFDictionaryRef v10 = 0;
    CFDictionaryRef v11 = v8;
    if (!v8) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  unint64_t v7 = _Block_copy(*(const void **)a4);
  uint64_t v8 = *(NSObject **)(a4 + 8);
  CFDictionaryRef v10 = v7;
  CFDictionaryRef v11 = v8;
  if (v8) {
LABEL_4:
  }
    dispatch_retain(v8);
LABEL_5:
  coex::ARICommandDriver::getScanFreqBandFilter_sync(a1, v6, (uint64_t)&v10);
  if (v8) {
    dispatch_release(v8);
  }
  if (v7) {
    _Block_release(v7);
  }
  return MEMORY[0x237DF4EE0](v12);
}

void sub_235E11D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void coex::ARICommandDriver::poll(uint64_t a1, const void **a2, int a3)
{
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 1174405120;
  v6[2] = ___ZN4coex16ARICommandDriver4pollEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdE_block_invoke;
  v6[3] = &__block_descriptor_tmp_11_1;
  uint64_t v5 = *a2;
  v6[4] = a1;
  CFTypeRef cf = v5;
  if (v5) {
    CFRetain(v5);
  }
  int v8 = a3;
  ctu::SharedSynchronizable<coex::CommandDriver>::execute_wrapped((uint64_t *)(a1 + 72), (uint64_t)v6);
  if (cf) {
    CFRelease(cf);
  }
}

void ___ZN4coex16ARICommandDriver4pollEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdE_block_invoke(uint64_t a1)
{
  uint64_t v3 = *(void **)(a1 + 32);
  CFDictionaryRef v2 = *(const __CFDictionary **)(a1 + 40);
  CFDictionaryRef v4 = v2;
  if (v2) {
    CFRetain(v2);
  }
  coex::ARICommandDriver::poll_sync(v3, &v4, *(_DWORD *)(a1 + 48));
  if (v2) {
    CFRelease(v2);
  }
}

void sub_235E11EB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t coex::ARICommandDriver::poll_sync(void *a1, const __CFDictionary **a2, int a3)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v6 = a1[5];
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    CFDictionaryRef v20 = *a2;
    *(_DWORD *)long long buf = 67109378;
    *(_DWORD *)&uint8_t buf[4] = a3;
    *(_WORD *)&uint8_t buf[8] = 2112;
    *(void *)&buf[10] = v20;
    _os_log_debug_impl(&dword_235DB9000, v6, OS_LOG_TYPE_DEBUG, "#D Polling for sim[%d]:\n%@", buf, 0x12u);
  }
  memset(buf, 170, 16);
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)buf, *a2);
  if (ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)buf, (const __CFString *)*MEMORY[0x263F8B600]))coex::ARICommandDriver::pollWWANState_sync(a1, a3); {
  int v22 = -1431655766;
  }
  unint64_t v7 = (unsigned int *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x263F8B668]);
  int v8 = v7;
  if (v7)
  {
    CFTypeID v9 = CFGetTypeID(v7);
    int v11 = v9 == CFNumberGetTypeID() ? ctu::cf::assign((ctu::cf *)&v22, v8, v10) : 0;
    CFRelease(v8);
    if (v11)
    {
      uint64_t v12 = a1[5];
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)CFTypeID v24 = 136315138;
        CFDictionaryRef v25 = "pollWLANScanState_sync";
        _os_log_debug_impl(&dword_235DB9000, v12, OS_LOG_TYPE_DEBUG, "#D %s: not supported!", v24, 0xCu);
      }
    }
  }
  int v21 = -1431655766;
  uint64_t v13 = (unsigned int *)(**(uint64_t (***)(uint8_t *, void))buf)(buf, *MEMORY[0x263F8B720]);
  unint64_t v14 = v13;
  if (v13)
  {
    CFTypeID v15 = CFGetTypeID(v13);
    int v17 = v15 == CFNumberGetTypeID() ? ctu::cf::assign((ctu::cf *)&v21, v14, v16) : 0;
    CFRelease(v14);
    if (v17)
    {
      CFTypeID v18 = a1[5];
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)CFTypeID v24 = 136315138;
        CFDictionaryRef v25 = "pollWLANConnState_sync";
        _os_log_debug_impl(&dword_235DB9000, v18, OS_LOG_TYPE_DEBUG, "#D %s: not supported!", v24, 0xCu);
      }
    }
  }
  if (ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)buf, (const __CFString *)*MEMORY[0x263F8B5C0]))coex::ARICommandDriver::pollPolicy_sync((uint64_t)a1, a3); {
  if (ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)buf, (const __CFString *)*MEMORY[0x263F8B638]))coex::ARICommandDriver::pollLinkQuality_sync(a1, a3);
  }
  return MEMORY[0x237DF4EE0](buf);
}

CFTypeRef __copy_helper_block_e8_40c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)(a2 + 40);
  *(void *)(a1 + 40) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_40c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 40);
  if (v1) {
    CFRelease(v1);
  }
}

void coex::ARICommandDriver::setIndications(uint64_t a1, const void **a2, uint64_t a3)
{
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 1174405120;
  v9[2] = ___ZN4coex16ARICommandDriver14setIndicationsEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke;
  void v9[3] = &__block_descriptor_tmp_14_2;
  uint64_t v5 = *a2;
  void v9[4] = a1;
  CFTypeRef cf = v5;
  if (v5) {
    CFRetain(v5);
  }
  uint64_t v6 = *(void **)a3;
  if (*(void *)a3) {
    uint64_t v6 = _Block_copy(v6);
  }
  unint64_t v7 = (uint64_t *)(a1 + 72);
  int v8 = *(NSObject **)(a3 + 8);
  aBlocunint64_t k = v6;
  dispatch_object_t object = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  ctu::SharedSynchronizable<coex::CommandDriver>::execute_wrapped(v7, (uint64_t)v9);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (cf) {
    CFRelease(cf);
  }
}

void ___ZN4coex16ARICommandDriver14setIndicationsEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke(void *a1)
{
  CFDictionaryRef v2 = (coex::ARICommandDriver *)a1[4];
  uint64_t v3 = (CFTypeRef *)(a1 + 5);
  CFDictionaryRef v4 = (const void **)((char *)v2 + 208);
  if ((void *)((char *)v2 + 208) != a1 + 5)
  {
    CFTypeRef v5 = *v3;
    if (*v3) {
      CFRetain(*v3);
    }
    uint64_t v6 = *v4;
    const void *v4 = v5;
    if (v6) {
      CFRelease(v6);
    }
  }
  unint64_t v7 = (const void *)a1[6];
  if (v7)
  {
    int v8 = _Block_copy(v7);
    CFTypeID v9 = a1[7];
    CFNumberRef v10 = v8;
    int v11 = v9;
    if (!v9) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  int v8 = 0;
  CFTypeID v9 = a1[7];
  CFNumberRef v10 = 0;
  int v11 = v9;
  if (v9) {
LABEL_8:
  }
    dispatch_retain(v9);
LABEL_9:
  coex::ARICommandDriver::setIndications_sync(v2, (uint64_t)&v10);
  if (v9) {
    dispatch_release(v9);
  }
  if (v8) {
    _Block_release(v8);
  }
}

void sub_235E12414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t coex::ARICommandDriver::setIndications_sync(coex::ARICommandDriver *a1, uint64_t a2)
{
  coex::ARICommandDriver::registerWWANStateIndication_sync(a1);
  CFDictionaryRef v4 = *((void *)a1 + 5);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_235DB9000, v4, OS_LOG_TYPE_DEFAULT, "#I Request to enable coex indications", buf, 2u);
  }
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v31 = v5;
  long long v32 = v5;
  long long v29 = v5;
  long long v30 = v5;
  *(_OWORD *)long long buf = v5;
  AriSdk::ARI_CsiIdcControlEventReq_SDK::ARI_CsiIdcControlEventReq_SDK((AriSdk::ARI_CsiIdcControlEventReq_SDK *)buf);
  uint64_t v6 = operator new(4uLL);
  _DWORD *v6 = 1;
  unint64_t v7 = (void *)*((void *)&v32 + 1);
  *((void *)&v32 + 1) = v6;
  if (v7) {
    operator delete(v7);
  }
  int v8 = (std::__shared_weak_count *)*((void *)a1 + 10);
  if (!v8
    || (CFTypeID v9 = (std::__shared_weak_count_vtbl *)*((void *)a1 + 9), (v10 = std::__shared_weak_count::lock(v8)) == 0))
  {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v11 = v10;
  p_shared_weak_owners = &v10->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v13 = *((void *)a1 + 24);
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    unint64_t v14 = *(const void **)a2;
    if (*(void *)a2) {
      goto LABEL_9;
    }
LABEL_17:
    CFTypeID v15 = 0;
    CFNumberRef v16 = *(NSObject **)(a2 + 8);
    if (!v16) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v11);
  uint64_t v13 = *((void *)a1 + 24);
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  unint64_t v14 = *(const void **)a2;
  if (!*(void *)a2) {
    goto LABEL_17;
  }
LABEL_9:
  CFTypeID v15 = _Block_copy(v14);
  CFNumberRef v16 = *(NSObject **)(a2 + 8);
  if (v16) {
LABEL_10:
  }
    dispatch_retain(v16);
LABEL_11:
  int v17 = (std::__shared_weak_count *)operator new(0x40uLL);
  v17->__shared_owners_ = 0;
  p_uint64_t shared_owners = &v17->__shared_owners_;
  v17->__shared_weak_owners_ = 0;
  v17[1].__vftable = v9;
  v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93EAC8;
  v17[1].__shared_owners_ = (uint64_t)v11;
  v17[1].__shared_weak_owners_ = (uint64_t)v15;
  v17[2].__vftable = (std::__shared_weak_count_vtbl *)v16;
  v17[2].__shared_owners_ = (uint64_t)a1;
  uint64_t v33 = MEMORY[0x263EF8330];
  uint64_t v34 = 1174405120;
  CFTypeID v35 = ___ZN3ice6detail12wrapCallbackIZN4coex16ARICommandDriver19setIndications_syncENS2_13CommandDriver8CallbackEE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  uint64_t v36 = &__block_descriptor_tmp_58_0;
  uint64_t v37 = v17 + 1;
  long long v38 = v17;
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlock[0] = (const void *)MEMORY[0x263EF8330];
  aBlock[1] = (const void *)0x40000000;
  xpc_object_t aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_6;
  aBlock[3] = &unk_264C7DD00;
  aBlock[4] = &v33;
  uint64_t v19 = _Block_copy(aBlock);
  CFDictionaryRef v20 = v38;
  if (!v38 || atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_14;
    }
LABEL_20:
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    if ((void)v32) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_20;
  }
LABEL_14:
  if ((void)v32) {
    goto LABEL_22;
  }
LABEL_21:
  int v21 = operator new(4uLL);
  *int v21 = 0;
  *(void *)&long long v32 = v21;
LABEL_22:
  unint64_t v27 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v22 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v22 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v26[0] = v22;
  v26[1] = v22;
  CFTypeID v23 = *(std::__shared_weak_count **)(v13 + 16);
  uint64_t v33 = *(void *)(v13 + 8);
  if (!v23)
  {
    uint64_t v34 = 0;
LABEL_32:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v34 = (uint64_t)std::__shared_weak_count::lock(v23);
  if (!v34) {
    goto LABEL_32;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  CFTypeID v24 = (std::__shared_weak_count *)v34;
  if (v34 && !atomic_fetch_add((atomic_ullong *volatile)(v34 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  aBlock[0] = v19;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0]) {
    _Block_release(aBlock[0]);
  }
  MEMORY[0x237DF50B0](v26);
  std::__shared_weak_count::__release_weak(v11);
  return MEMORY[0x237DF5D70](buf);
}

void sub_235E12858(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  uint64_t v18 = va_arg(va2, void);
  long long v5 = *(const void **)(v3 - 120);
  if (v5) {
    _Block_release(v5);
  }
  MEMORY[0x237DF50B0]((uint64_t *)va1);
  coex::ARICommandDriver::setIndications_sync(coex::CommandDriver::Callback)::$_0::~$_0((uint64_t *)va);
  std::__shared_weak_count::__release_weak(v2);
  MEMORY[0x237DF5D70](va2);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  CFDictionaryRef v2 = *(NSObject **)(a1 + 48);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 40);
  if (v3) {
    _Block_release(v3);
  }
}

void ___ZN4coex16ARICommandDriver8set_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke(uint64_t a1, const void **a2, const void **a3)
{
  uint64_t v3 = *a2;
  if (*a2) {
    CFDictionaryRef v4 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    CFDictionaryRef v4 = 0;
  }
  if (!v4) {
    return;
  }
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v8 = *(void *)(v6 + 40);
  uint64_t v7 = v6 + 40;
  if (!v8 || !*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 48)) {
    return;
  }
  uint64_t v15 = *a2;
  if (v3) {
    CFRetain(v3);
  }
  uint64_t v10 = *a3;
  uint64_t v14 = v10;
  if (v10)
  {
    CFRetain(v10);
    coex::CommandDriver::Callback::operator()(v7, &v15, &v14);
    CFRelease(v10);
    if (!v3) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  coex::CommandDriver::Callback::operator()(v7, &v15, &v14);
  if (v3) {
LABEL_13:
  }
    CFRelease(v3);
LABEL_14:
  uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v12 = *(const void **)(v11 + 40);
  *(void *)(v11 + 40) = 0;
  if (v12) {
    _Block_release(v12);
  }
  uint64_t v13 = *(NSObject **)(v11 + 48);
  *(void *)(v11 + 48) = 0;
  if (v13)
  {
    dispatch_release(v13);
  }
}

void coex::CommandDriver::Callback::operator()(uint64_t a1, const void **a2, const void **a3)
{
  uint64_t v6 = *(const void **)a1;
  if (v6) {
    uint64_t v7 = _Block_copy(v6);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(NSObject **)(a1 + 8);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 1174405120;
  block[2] = ___ZNK4coex13CommandDriver8CallbackclEN3ctu2cf11CFSharedRefI9__CFErrorEENS4_IK14__CFDictionaryEE_block_invoke;
  block[3] = &__block_descriptor_tmp_35_2;
  if (!v7)
  {
    uint64_t v10 = *a2;
    aBlocunint64_t k = 0;
    CFTypeRef v14 = v10;
    if (!v10) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  uint64_t v9 = _Block_copy(v7);
  uint64_t v10 = *a2;
  aBlocunint64_t k = v9;
  CFTypeRef v14 = v10;
  if (v10) {
LABEL_8:
  }
    CFRetain(v10);
LABEL_9:
  uint64_t v11 = *a3;
  CFTypeRef cf = v11;
  if (v11) {
    CFRetain(v11);
  }
  dispatch_async(v8, block);
  if (cf) {
    CFRelease(cf);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v7) {
    _Block_release(v7);
  }
}

void __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(NSObject **)(a2 + 40);
  *(void *)(a1 + 40) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    CFDictionaryRef v4 = *(NSObject **)(a1 + 40);
    if (v4)
    {
      dispatch_group_enter(v4);
    }
  }
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  CFDictionaryRef v2 = *(NSObject **)(a1 + 40);
  if (v2)
  {
    dispatch_group_leave(v2);
    uint64_t v3 = *(NSObject **)(a1 + 40);
    if (v3)
    {
      dispatch_release(v3);
    }
  }
}

uint64_t ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get(uint64_t a1)
{
  return *(void *)a1;
}

void coex::ARICommandDriver::setWLANState_sync(uint64_t a1, uint64_t a2, uint64_t a3)
{
  cf[3] = *(CFTypeRef *)MEMORY[0x263EF8340];
  CFDictionaryRef v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(cf[0]) = 136315138;
    *(CFTypeRef *)((char *)cf + 4) = "setWLANState_sync";
    _os_log_debug_impl(&dword_235DB9000, v4, OS_LOG_TYPE_DEBUG, "#D %s: not supported!", (uint8_t *)cf, 0xCu);
  }
  cf[0] = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  char v10 = 13;
  strcpy((char *)__p, "Not supported");
  CreateError();
  CFTypeRef v5 = cf[0];
  CFTypeRef v8 = cf[0];
  if (!cf[0])
  {
    uint64_t v7 = 0;
    coex::CommandDriver::Callback::operator()(a3, &v8, &v7);
    CFTypeRef v6 = cf[0];
    if (!cf[0]) {
      return;
    }
    goto LABEL_7;
  }
  CFRetain(cf[0]);
  uint64_t v7 = 0;
  coex::CommandDriver::Callback::operator()(a3, &v8, &v7);
  CFRelease(v5);
  CFTypeRef v6 = cf[0];
  if (cf[0]) {
LABEL_7:
  }
    CFRelease(v6);
}

void sub_235E12DA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t coex::ARICommandDriver::setPolicy_sync(uint64_t a1, const __CFDictionary **a2, int a3, uint64_t a4)
{
  uint64_t v167 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a3;
    _os_log_debug_impl(&dword_235DB9000, v7, OS_LOG_TYPE_DEBUG, "#D Set Policy request for sim[%d]", buf, 8u);
  }
  v153[0] = 0xAAAAAAAAAAAAAAAALL;
  v153[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v153, *a2);
  v152 = (void *)0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v150[3] = v8;
  *(_OWORD *)long long __p = v8;
  v150[1] = v8;
  v150[2] = v8;
  v150[0] = v8;
  AriSdk::ARI_CsiIdcSetRTConfigReq_SDK::ARI_CsiIdcSetRTConfigReq_SDK((AriSdk::ARI_CsiIdcSetRTConfigReq_SDK *)v150);
  uint64_t v9 = operator new(4uLL);
  *uint64_t v9 = a3;
  char v10 = __p[0];
  __p[0] = v9;
  if (v10) {
    operator delete(v10);
  }
  uint64_t v11 = (const void *)ctu::cf::map_adapter::copyCFDataRef((ctu::cf::map_adapter *)v153, (const __CFString *)*MEMORY[0x263F8B570]);
  CFTypeRef cf = v11;
  CFTypeRef v149 = v11;
  if (v11) {
    CFRetain(v11);
  }
  uint64_t v12 = coex::util::data_to_uint64();
  if (cf) {
    CFRelease(cf);
  }
  uint64_t v13 = (void *)qword_26AB82708;
  long long v129 = (void *)a1;
  int v124 = a3;
  uint64_t v127 = (const void **)a2;
  for (uint64_t i = -1; v13 != (void *)qword_26AB82710; v13 += 3)
  {
    if ((*v13 & v12) != 0) {
      i &= v13[1];
    }
    else {
      i |= v13[2];
    }
  }
  uint64_t v15 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134218240;
    *(void *)&uint8_t buf[4] = v12;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = i;
    _os_log_impl(&dword_235DB9000, v15, OS_LOG_TYPE_DEFAULT, "#I Policy bitmap; CxM=0x%llx ICE=0x%llx ", buf, 0x16u);
  }
  uint8_t Bool = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v153, (const __CFString *)*MEMORY[0x263F8B770]);
  unint64_t v123 = (__CFString *)*MEMORY[0x263F8B788];
  int v125 = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v153, (const __CFString *)*MEMORY[0x263F8B788]);
  uint64_t v16 = (const void *)ctu::cf::map_adapter::copyCFDictionaryRef((ctu::cf::map_adapter *)v153, (const __CFString *)*MEMORY[0x263F8B738]);
  v146[1] = 0xAAAAAAAAAAAAAAAALL;
  CFTypeRef v147 = v16;
  v146[0] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v146, (const __CFDictionary *)v16);
  char theArray = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v146, (const __CFString *)*MEMORY[0x263F8B5B8]);
  char Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v153, (const __CFString *)*MEMORY[0x263F8B7C0]);
  uint64_t v122 = (__CFString *)*MEMORY[0x263F8B610];
  char v18 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v153, (const __CFString *)*MEMORY[0x263F8B610]);
  uint64_t v121 = (__CFString *)*MEMORY[0x263F8B5D0];
  char v19 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v153, (const __CFString *)*MEMORY[0x263F8B5D0]);
  char v20 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v153, (const __CFString *)*MEMORY[0x263F8B7B0]);
  char v21 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v153, (const __CFString *)*MEMORY[0x263F8B750]);
  if ((v12 & 8) != 0) {
    int v22 = 0;
  }
  else {
    int v22 = 5;
  }
  CFTypeID v23 = v129[5];
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134218240;
    *(void *)&uint8_t buf[4] = v12;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = v22;
    _os_log_impl(&dword_235DB9000, v23, OS_LOG_TYPE_DEFAULT, "#I Event bitmap;CxM=0x%llx ICE=0x%x ", buf, 0x12u);
  }
  CFTypeID v24 = operator new(0x14uLL);
  *(void *)CFTypeID v24 = i;
  v24[8] = theArray;
  v24[9] = Int;
  v24[10] = v18;
  v24[11] = v19;
  v24[12] = v20;
  v24[13] = v21;
  *((_WORD *)v24 + 7) = -21846;
  *((_DWORD *)v24 + 4) = v22;
  CFDictionaryRef v25 = __p[1];
  __p[1] = v24;
  if (v25) {
    operator delete(v25);
  }
  if (ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v153, (const __CFString *)*MEMORY[0x263F8B710]))
  {
    *(void *)&long long v26 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v26 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&buf[360] = v26;
    *(_OWORD *)&buf[376] = v26;
    *(_OWORD *)&buf[328] = v26;
    *(_OWORD *)&buf[344] = v26;
    *(_OWORD *)&buf[296] = v26;
    *(_OWORD *)&buf[312] = v26;
    *(_OWORD *)&buf[264] = v26;
    *(_OWORD *)&buf[280] = v26;
    *(_OWORD *)&buf[248] = v26;
    *(_OWORD *)&buf[232] = v26;
    *(_OWORD *)&buf[216] = v26;
    *(_OWORD *)&buf[200] = v26;
    *(_OWORD *)&buf[184] = v26;
    *(_OWORD *)&buf[168] = v26;
    *(_OWORD *)&buf[152] = v26;
    *(_OWORD *)&buf[136] = v26;
    *(_OWORD *)&buf[120] = v26;
    *(_OWORD *)&buf[104] = v26;
    *(_OWORD *)&buf[88] = v26;
    *(_OWORD *)&buf[72] = v26;
    *(_OWORD *)&buf[56] = v26;
    *(_OWORD *)&buf[40] = v26;
    *(_OWORD *)&unsigned char buf[24] = v26;
    *(_OWORD *)&uint8_t buf[8] = v26;
    *(_DWORD *)long long buf = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v153, (const __CFString *)*MEMORY[0x263F8B6B8]);
    *(_DWORD *)&uint8_t buf[4] = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v153, (const __CFString *)*MEMORY[0x263F8B688]);
    uint64_t v131 = (__CFString *)*MEMORY[0x263F8B648];
    CFArrayRef v27 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v153, (const __CFString *)*MEMORY[0x263F8B648]);
    CFArrayRef v155 = v27;
    uint64_t v28 = (const void *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v153, (const __CFString *)*MEMORY[0x263F8B790]);
    aBlocunint64_t k = v28;
    uint64_t v145 = ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v153, (const __CFString *)*MEMORY[0x263F8B7A0]);
    CFArrayRef v29 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v153, (const __CFString *)*MEMORY[0x263F8B7A8]);
    CFArrayRef v144 = v29;
    CFArrayRef v30 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v153, (const __CFString *)*MEMORY[0x263F8B780]);
    CFArrayRef v143 = v30;
    CFArrayRef v31 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v153, (const __CFString *)*MEMORY[0x263F8B798]);
    CFArrayRef v133 = (const __CFArray *)v28;
    CFArrayRef theArraya = (const __CFArray *)v145;
    CFArrayRef v142 = v31;
    CFArrayRef v132 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v153, (const __CFString *)*MEMORY[0x263F8B778]);
    CFArrayRef v141 = v132;
    if (v27) {
      long long v32 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
    }
    else {
      long long v32 = 0;
    }
    if (v32)
    {
      unint64_t Count = CFArrayGetCount(v27);
      uint64_t v34 = 32;
      if (Count < 0x20) {
        uint64_t v34 = Count;
      }
      uint64_t v130 = v34;
      if (v34)
      {
        CFIndex v35 = 0;
        uint64_t v36 = &buf[17];
        do
        {
          uint64_t v37 = (const void *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v153, v131);
          v140 = v37;
          CFArrayRef v38 = v27;
          ValueAtIndex = (unsigned int *)CFArrayGetValueAtIndex(v27, v35);
          std::runtime_error v40 = ValueAtIndex;
          int v154 = 0;
          if (ValueAtIndex)
          {
            CFTypeID v41 = CFGetTypeID(ValueAtIndex);
            if (v41 == CFNumberGetTypeID()) {
              ctu::cf::assign((ctu::cf *)&v154, v40, v42);
            }
          }
          *(_DWORD *)(v36 - 9) = v154;
          long long v43 = (unsigned __int8 *)CFArrayGetValueAtIndex(theArraya, v35);
          long long v44 = v43;
          LOBYTE(v154) = 0;
          if (v43)
          {
            CFTypeID v45 = CFGetTypeID(v43);
            if (v45 == CFNumberGetTypeID()) {
              ctu::cf::assign((ctu::cf *)&v154, v44, v46);
            }
          }
          *(v36 - 5) = v154;
          CFTypeID v47 = (unsigned __int8 *)CFArrayGetValueAtIndex(v133, v35);
          long long v48 = v47;
          LOBYTE(v154) = 0;
          if (v47)
          {
            CFTypeID v49 = CFGetTypeID(v47);
            if (v49 == CFNumberGetTypeID()) {
              ctu::cf::assign((ctu::cf *)&v154, v48, v50);
            }
          }
          *(v36 - 4) = v154;
          long long v51 = (signed __int8 *)CFArrayGetValueAtIndex(v29, v35);
          CFTypeID v52 = v51;
          LOBYTE(v154) = 0;
          if (v51)
          {
            CFTypeID v53 = CFGetTypeID(v51);
            if (v53 == CFNumberGetTypeID()) {
              ctu::cf::assign((ctu::cf *)&v154, v52, v54);
            }
          }
          *(v36 - 3) = v154;
          long long v55 = (signed __int8 *)CFArrayGetValueAtIndex(v30, v35);
          CFTypeID v56 = v55;
          LOBYTE(v154) = 0;
          if (v55)
          {
            CFTypeID v57 = CFGetTypeID(v55);
            if (v57 == CFNumberGetTypeID()) {
              ctu::cf::assign((ctu::cf *)&v154, v56, v58);
            }
          }
          *(v36 - 2) = v154;
          uint64_t v59 = (signed __int8 *)CFArrayGetValueAtIndex(v31, v35);
          long long v60 = v59;
          LOBYTE(v154) = 0;
          if (v59)
          {
            CFTypeID v61 = CFGetTypeID(v59);
            if (v61 == CFNumberGetTypeID()) {
              ctu::cf::assign((ctu::cf *)&v154, v60, v62);
            }
          }
          *(v36 - 1) = v154;
          uint64_t v63 = (signed __int8 *)CFArrayGetValueAtIndex(v132, v35);
          unint64_t v64 = v63;
          LOBYTE(v154) = 0;
          if (v63)
          {
            CFTypeID v65 = CFGetTypeID(v63);
            if (v65 == CFNumberGetTypeID()) {
              ctu::cf::assign((ctu::cf *)&v154, v64, v66);
            }
          }
          uint8_t *v36 = v154;
          if (v37) {
            CFRelease(v37);
          }
          ++v35;
          v36 += 12;
          CFArrayRef v27 = v38;
        }
        while (v130 != v35);
      }
    }
    CFTypeID v67 = operator new(0x188uLL);
    memcpy(v67, buf, 0x188uLL);
    long long v68 = v152;
    v152 = v67;
    if (v68) {
      operator delete(v68);
    }
    if (v132) {
      CFRelease(v132);
    }
    if (v31) {
      CFRelease(v31);
    }
    if (v30) {
      CFRelease(v30);
    }
    if (v29) {
      CFRelease(v29);
    }
    if (theArraya) {
      CFRelease(theArraya);
    }
    if (v133) {
      CFRelease(v133);
    }
    if (v27) {
      CFRelease(v27);
    }
  }
  uint64_t v69 = (std::__shared_weak_count *)v129[10];
  if (!v69 || (long long v70 = (std::__shared_weak_count_vtbl *)v129[9], (v71 = std::__shared_weak_count::lock(v69)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  CFTypeID v72 = v71;
  p_shared_weak_owners = &v71->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v71->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v71->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
    std::__shared_weak_count::__release_weak(v72);
  }
  uint64_t v74 = v129[24];
  *(void *)long long buf = v70;
  *(void *)&uint8_t buf[8] = v72;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  *(void *)&uint8_t buf[16] = v129;
  if (*(void *)a4)
  {
    unint64_t v75 = (std::__shared_weak_count_vtbl *)_Block_copy(*(const void **)a4);
    unint64_t v76 = *(NSObject **)(a4 + 8);
    *(void *)&unsigned char buf[24] = v75;
    *(void *)&uint8_t buf[32] = v76;
    if (!v76) {
      goto LABEL_79;
    }
    goto LABEL_78;
  }
  unint64_t v75 = 0;
  unint64_t v76 = *(NSObject **)(a4 + 8);
  *(void *)&unsigned char buf[24] = 0;
  *(void *)&uint8_t buf[32] = v76;
  if (v76) {
LABEL_78:
  }
    dispatch_retain(v76);
LABEL_79:
  unint64_t v77 = *v127;
  *(void *)&buf[40] = v77;
  if (v77) {
    CFRetain(v77);
  }
  buf[48] = Bool;
  buf[49] = (v12 & 0x8000) != 0;
  CFDictionaryRef v78 = (std::__shared_weak_count *)operator new(0x50uLL);
  v78->__shared_owners_ = 0;
  p_uint64_t shared_owners = &v78->__shared_owners_;
  v78->__shared_weak_owners_ = 0;
  v78->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93ECC8;
  v78[1].__vftable = v70;
  *(void *)long long buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  v78[1].__shared_owners_ = (uint64_t)v72;
  v78[1].__shared_weak_owners_ = (uint64_t)v129;
  v78[2].__vftable = v75;
  v78[2].__shared_owners_ = (uint64_t)v76;
  *(void *)&uint8_t buf[32] = 0;
  *(void *)&unsigned char buf[24] = 0;
  v78[2].__shared_weak_owners_ = (uint64_t)v77;
  *(void *)&buf[40] = 0;
  LOWORD(v78[3].__vftable) = *(_WORD *)&buf[48];
  CFArrayRef v155 = (const __CFArray *)MEMORY[0x263EF8330];
  uint64_t v156 = 1174405120;
  v157 = ___ZN3ice6detail12wrapCallbackIZN4coex16ARICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS2_5SubIdENS2_13CommandDriver8CallbackEE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  v158 = &__block_descriptor_tmp_79_1;
  uint64_t v159 = v78 + 1;
  v160 = v78;
  atomic_fetch_add_explicit(&v78->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlocunint64_t k = (const void *)MEMORY[0x263EF8330];
  uint64_t v162 = 0x40000000;
  uint64_t v163 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_6;
  v164 = &unk_264C7DD00;
  v165 = &v155;
  long long v80 = _Block_copy(&aBlock);
  CFDictionaryRef v81 = v160;
  if (!v160 || atomic_fetch_add(&v160->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_84;
    }
LABEL_89:
    ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
    std::__shared_weak_count::__release_weak(v78);
    if (__p[0]) {
      goto LABEL_91;
    }
    goto LABEL_90;
  }
  ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
  std::__shared_weak_count::__release_weak(v81);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_89;
  }
LABEL_84:
  if (__p[0]) {
    goto LABEL_91;
  }
LABEL_90:
  uint64_t v82 = operator new(4uLL);
  _DWORD *v82 = 0;
  __p[0] = v82;
LABEL_91:
  unint64_t v139 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v83 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v83 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v138[0] = v83;
  v138[1] = v83;
  CFDictionaryRef v84 = *(std::__shared_weak_count **)(v74 + 16);
  CFArrayRef v155 = *(const __CFArray **)(v74 + 8);
  if (!v84)
  {
    uint64_t v156 = 0;
LABEL_148:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v156 = (uint64_t)std::__shared_weak_count::lock(v84);
  if (!v156) {
    goto LABEL_148;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  unint64_t v85 = (std::__shared_weak_count *)v156;
  if (v156 && !atomic_fetch_add((atomic_ullong *volatile)(v156 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
    std::__shared_weak_count::__release_weak(v85);
  }
  aBlocunint64_t k = v80;
  ice::SendMsgBaseProxy::callback();
  if (aBlock) {
    _Block_release(aBlock);
  }
  MEMORY[0x237DF50B0](v138);
  if (*(void *)&buf[40]) {
    CFRelease(*(CFTypeRef *)&buf[40]);
  }
  if (*(void *)&buf[32]) {
    dispatch_release(*(dispatch_object_t *)&buf[32]);
  }
  if (*(void *)&buf[24]) {
    _Block_release(*(const void **)&buf[24]);
  }
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
  }
  if (v125)
  {
    unint64_t v86 = v129[5];
    if (os_log_type_enabled(v86, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v124;
      _os_log_debug_impl(&dword_235DB9000, v86, OS_LOG_TYPE_DEBUG, "#D Set TxPower Limit Threshold for sim[%d]", buf, 8u);
    }
    *(void *)&long long v87 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v87 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&buf[96] = v87;
    *(_OWORD *)&buf[112] = v87;
    *(_OWORD *)&buf[64] = v87;
    *(_OWORD *)&buf[80] = v87;
    *(_OWORD *)&uint8_t buf[32] = v87;
    *(_OWORD *)&buf[48] = v87;
    *(_OWORD *)long long buf = v87;
    *(_OWORD *)&uint8_t buf[16] = v87;
    AriSdk::ARI_CsiIdcSetTxPowerLimitReq_SDK::ARI_CsiIdcSetTxPowerLimitReq_SDK((AriSdk::ARI_CsiIdcSetTxPowerLimitReq_SDK *)buf);
    uint64_t v88 = operator new(4uLL);
    _DWORD *v88 = v124;
    uint64_t v89 = *(void **)&buf[64];
    *(void *)&buf[64] = v88;
    if (v89) {
      operator delete(v89);
    }
    char v90 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v153, (const __CFString *)*MEMORY[0x263F8B6F0]);
    CFDictionaryRef v91 = operator new(1uLL);
    *CFDictionaryRef v91 = v90;
    uint64_t v92 = *(void **)&buf[72];
    *(void *)&buf[72] = v91;
    if (v92) {
      operator delete(v92);
    }
    char v93 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v153, (const __CFString *)*MEMORY[0x263F8B6B0]);
    CFDictionaryRef v94 = operator new(1uLL);
    unsigned char *v94 = v93;
    unint64_t v95 = *(void **)&buf[80];
    *(void *)&buf[80] = v94;
    if (v95) {
      operator delete(v95);
    }
    char v96 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v153, v122);
    unint64_t v97 = operator new(1uLL);
    *unint64_t v97 = v96;
    size_t v98 = *(void **)&buf[88];
    *(void *)&buf[88] = v97;
    if (v98) {
      operator delete(v98);
    }
    char v99 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v153, v121);
    CFDictionaryRef v100 = operator new(1uLL);
    *CFDictionaryRef v100 = v99;
    uint64_t v101 = *(void **)&buf[96];
    *(void *)&buf[96] = v100;
    if (v101) {
      operator delete(v101);
    }
    char v102 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v153, (const __CFString *)*MEMORY[0x263F8B730]);
    CFDictionaryRef v103 = operator new(1uLL);
    *CFDictionaryRef v103 = v102;
    unint64_t v104 = *(void **)&buf[104];
    *(void *)&buf[104] = v103;
    if (v104) {
      operator delete(v104);
    }
    char v105 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v153, (const __CFString *)*MEMORY[0x263F8B6F8]);
    dispatch_object_t v106 = operator new(1uLL);
    *dispatch_object_t v106 = v105;
    unint64_t v107 = *(void **)&buf[112];
    *(void *)&buf[112] = v106;
    if (v107) {
      operator delete(v107);
    }
    int v108 = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v153, v123);
    uint64_t v109 = operator new(4uLL);
    _DWORD *v109 = v108;
    long long v110 = *(void **)&buf[120];
    *(void *)&buf[120] = v109;
    if (v110) {
      operator delete(v110);
    }
    uint64_t v111 = v129[24];
    atomic_fetch_add_explicit(&v72->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v112 = (std::__shared_weak_count *)operator new(0x30uLL);
    v112->__shared_owners_ = 0;
    uint64_t v113 = &v112->__shared_owners_;
    v112->__shared_weak_owners_ = 0;
    v112[1].__vftable = v70;
    v112->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93ED48;
    v112[1].__shared_owners_ = (uint64_t)v72;
    v112[1].__shared_weak_owners_ = (uint64_t)v129;
    CFArrayRef v155 = (const __CFArray *)MEMORY[0x263EF8330];
    uint64_t v156 = 1174405120;
    v157 = ___ZN3ice6detail12wrapCallbackIZN4coex16ARICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS2_5SubIdENS2_13CommandDriver8CallbackEE3__1vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
    v158 = &__block_descriptor_tmp_84;
    uint64_t v159 = v112 + 1;
    v160 = v112;
    atomic_fetch_add_explicit(&v112->__shared_owners_, 1uLL, memory_order_relaxed);
    aBlocunint64_t k = (const void *)MEMORY[0x263EF8330];
    uint64_t v162 = 0x40000000;
    uint64_t v163 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_6;
    v164 = &unk_264C7DD00;
    v165 = &v155;
    unint64_t v114 = _Block_copy(&aBlock);
    unint64_t v115 = v160;
    if (v160 && !atomic_fetch_add(&v160->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
      std::__shared_weak_count::__release_weak(v115);
      if (atomic_fetch_add(v113, 0xFFFFFFFFFFFFFFFFLL))
      {
LABEL_128:
        if (*(void *)&buf[64]) {
          goto LABEL_133;
        }
LABEL_132:
        unint64_t v116 = operator new(4uLL);
        *unint64_t v116 = 0;
        *(void *)&buf[64] = v116;
LABEL_133:
        unint64_t v137 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v117 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v117 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v136[0] = v117;
        v136[1] = v117;
        int v118 = *(std::__shared_weak_count **)(v111 + 16);
        CFArrayRef v155 = *(const __CFArray **)(v111 + 8);
        if (v118)
        {
          uint64_t v156 = (uint64_t)std::__shared_weak_count::lock(v118);
          if (v156)
          {
            ice::SendMsgBaseProxy::SendMsgBaseProxy();
            uint64_t v119 = (std::__shared_weak_count *)v156;
            if (v156 && !atomic_fetch_add((atomic_ullong *volatile)(v156 + 8), 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
              std::__shared_weak_count::__release_weak(v119);
            }
            aBlocunint64_t k = v114;
            ice::SendMsgBaseProxy::callback();
            if (aBlock) {
              _Block_release(aBlock);
            }
            MEMORY[0x237DF50B0](v136);
            MEMORY[0x237DF6370](buf);
            goto LABEL_141;
          }
        }
        else
        {
          uint64_t v156 = 0;
        }
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
    }
    else if (atomic_fetch_add(v113, 0xFFFFFFFFFFFFFFFFLL))
    {
      goto LABEL_128;
    }
    ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
    std::__shared_weak_count::__release_weak(v112);
    if (*(void *)&buf[64]) {
      goto LABEL_133;
    }
    goto LABEL_132;
  }
LABEL_141:
  std::__shared_weak_count::__release_weak(v72);
  MEMORY[0x237DF4EE0](v146);
  if (v147) {
    CFRelease(v147);
  }
  if (v149) {
    CFRelease(v149);
  }
  MEMORY[0x237DF5B60](v150);
  return MEMORY[0x237DF4EE0](v153);
}

void sub_235E13E34(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void coex::ARICommandDriver::setBandFilterInfo_sync(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  cf[3] = *(CFTypeRef *)MEMORY[0x263EF8340];
  CFTypeRef v5 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(cf[0]) = 136315138;
    *(CFTypeRef *)((char *)cf + 4) = "setBandFilterInfo_sync";
    _os_log_debug_impl(&dword_235DB9000, v5, OS_LOG_TYPE_DEBUG, "#D %s: not supported!", (uint8_t *)cf, 0xCu);
  }
  cf[0] = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  char v11 = 13;
  strcpy((char *)__p, "Not supported");
  CreateError();
  CFTypeRef v6 = cf[0];
  CFTypeRef v9 = cf[0];
  if (!cf[0])
  {
    long long v8 = 0;
    coex::CommandDriver::Callback::operator()(a4, &v9, &v8);
    CFTypeRef v7 = cf[0];
    if (!cf[0]) {
      return;
    }
    goto LABEL_7;
  }
  CFRetain(cf[0]);
  long long v8 = 0;
  coex::CommandDriver::Callback::operator()(a4, &v9, &v8);
  CFRelease(v6);
  CFTypeRef v7 = cf[0];
  if (cf[0]) {
LABEL_7:
  }
    CFRelease(v7);
}

void sub_235E14238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t coex::ARICommandDriver::setScanFreqBandFilter_sync(void *a1, const __CFDictionary **a2, int a3, uint64_t a4)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  long long v8 = a1[5];
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    CFDictionaryRef v36 = *a2;
    *(_DWORD *)long long buf = 67109378;
    *(_DWORD *)&uint8_t buf[4] = a3;
    *(_WORD *)&uint8_t buf[8] = 2112;
    *(void *)&buf[10] = v36;
    _os_log_debug_impl(&dword_235DB9000, v8, OS_LOG_TYPE_DEBUG, "#D Setting Scan Frequency Band filter info for sim[%d]: %@", buf, 0x12u);
  }
  v43[0] = 0xAAAAAAAAAAAAAAAALL;
  v43[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v43, *a2);
  CFArrayRef v9 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v43, (const __CFString *)*MEMORY[0x263F8B680]);
  CFArrayRef v42 = v9;
  if (v9) {
    char v10 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
  }
  else {
    char v10 = 0;
  }
  if (v10)
  {
    *(void *)&long long v11 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v40[3] = v11;
    long long __p = v11;
    v40[1] = v11;
    v40[2] = v11;
    v40[0] = v11;
    AriSdk::ARI_CsiIdcRTSetScanFreqReq_SDK::ARI_CsiIdcRTSetScanFreqReq_SDK((AriSdk::ARI_CsiIdcRTSetScanFreqReq_SDK *)v40);
    uint64_t v12 = operator new(4uLL);
    *uint64_t v12 = a3;
    uint64_t v13 = (void *)__p;
    *(void *)&long long __p = v12;
    if (v13) {
      operator delete(v13);
    }
    CFArrayRef v39 = v9;
    if (v9) {
      CFRetain(v9);
    }
    coex::ARICommandDriver::convertScanFrequencies_sync((uint64_t)a1, &v39, buf);
    CFTypeRef v14 = operator new(0x60uLL);
    long long v15 = v47;
    v14[2] = v46;
    v14[3] = v15;
    long long v16 = v49;
    _OWORD v14[4] = v48;
    uint64_t v14[5] = v16;
    long long v17 = *(_OWORD *)&buf[16];
    _OWORD *v14 = *(_OWORD *)buf;
    v14[1] = v17;
    char v18 = (void *)*((void *)&__p + 1);
    *((void *)&__p + 1) = v14;
    if (v18) {
      operator delete(v18);
    }
    if (v9) {
      CFRelease(v9);
    }
    char v19 = (std::__shared_weak_count *)a1[10];
    if (!v19 || (char v20 = (std::__shared_weak_count_vtbl *)a1[9], (v21 = std::__shared_weak_count::lock(v19)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    int v22 = v21;
    p_shared_weak_owners = &v21->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v21->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v22);
    }
    uint64_t v24 = a1[24];
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    if (*(void *)a4)
    {
      CFDictionaryRef v25 = (std::__shared_weak_count_vtbl *)_Block_copy(*(const void **)a4);
      long long v26 = *(NSObject **)(a4 + 8);
      if (!v26)
      {
LABEL_22:
        CFArrayRef v27 = (std::__shared_weak_count *)operator new(0x40uLL);
        v27->__shared_owners_ = 0;
        p_uint64_t shared_owners = &v27->__shared_owners_;
        v27->__shared_weak_owners_ = 0;
        v27[1].__vftable = v20;
        v27->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93F048;
        v27[1].__shared_owners_ = (uint64_t)v22;
        v27[1].__shared_weak_owners_ = (uint64_t)a1;
        v27[2].__vftable = v25;
        v27[2].__shared_owners_ = (uint64_t)v26;
        *(void *)long long buf = MEMORY[0x263EF8330];
        *(void *)&uint8_t buf[8] = 1174405120;
        *(void *)&uint8_t buf[16] = ___ZN3ice6detail12wrapCallbackIZN4coex16ARICommandDriver26setScanFreqBandFilter_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS2_5SubIdENS2_13CommandDriver8CallbackEE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
        *(void *)&unsigned char buf[24] = &__block_descriptor_tmp_116;
        *(void *)&long long v46 = v27 + 1;
        *((void *)&v46 + 1) = v27;
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        aBlock[0] = (const void *)MEMORY[0x263EF8330];
        aBlock[1] = (const void *)0x40000000;
        xpc_object_t aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_6;
        aBlock[3] = &unk_264C7DD00;
        aBlock[4] = buf;
        CFArrayRef v29 = _Block_copy(aBlock);
        CFArrayRef v30 = (std::__shared_weak_count *)*((void *)&v46 + 1);
        if (*((void *)&v46 + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v46 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
          if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
          {
LABEL_25:
            if ((void)__p) {
              goto LABEL_32;
            }
LABEL_31:
            CFArrayRef v31 = operator new(4uLL);
            _DWORD *v31 = 0;
            *(void *)&long long __p = v31;
LABEL_32:
            unint64_t v38 = 0xAAAAAAAAAAAAAAAALL;
            *(void *)&long long v32 = 0xAAAAAAAAAAAAAAAALL;
            *((void *)&v32 + 1) = 0xAAAAAAAAAAAAAAAALL;
            v37[0] = v32;
            v37[1] = v32;
            uint64_t v33 = *(std::__shared_weak_count **)(v24 + 16);
            *(void *)long long buf = *(void *)(v24 + 8);
            if (v33)
            {
              *(void *)&uint8_t buf[8] = std::__shared_weak_count::lock(v33);
              if (*(void *)&buf[8])
              {
                ice::SendMsgBaseProxy::SendMsgBaseProxy();
                uint64_t v34 = *(std::__shared_weak_count **)&buf[8];
                if (*(void *)&buf[8]
                  && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
                  std::__shared_weak_count::__release_weak(v34);
                }
                aBlock[0] = v29;
                ice::SendMsgBaseProxy::callback();
                if (aBlock[0]) {
                  _Block_release(aBlock[0]);
                }
                MEMORY[0x237DF50B0](v37);
                std::__shared_weak_count::__release_weak(v22);
                MEMORY[0x237DF5F30](v40);
                CFArrayRef v9 = v42;
                goto LABEL_40;
              }
            }
            else
            {
              *(void *)&uint8_t buf[8] = 0;
            }
            std::__throw_bad_weak_ptr[abi:ne180100]();
          }
        }
        else if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
        {
          goto LABEL_25;
        }
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
        if ((void)__p) {
          goto LABEL_32;
        }
        goto LABEL_31;
      }
    }
    else
    {
      CFDictionaryRef v25 = 0;
      long long v26 = *(NSObject **)(a4 + 8);
      if (!v26) {
        goto LABEL_22;
      }
    }
    dispatch_retain(v26);
    goto LABEL_22;
  }
LABEL_40:
  if (v9) {
    CFRelease(v9);
  }
  return MEMORY[0x237DF4EE0](v43);
}

void sub_235E1478C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *aBlock)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t coex::ARICommandDriver::setLinkQualityMode_sync(void *a1, const __CFDictionary **a2, const __CFDictionary **a3, int a4, uint64_t a5)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  CFDictionaryRef v9 = *a2;
  if (*a2) {
    char v10 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  }
  else {
    char v10 = 0;
  }
  long long v11 = (const __CFString **)MEMORY[0x263F8B7C8];
  if (v10)
  {
    uint64_t v13 = a1[5];
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 67109378;
      *(_DWORD *)&uint8_t buf[4] = a4;
      *(_WORD *)&uint8_t buf[8] = 2112;
      *(void *)&buf[10] = v9;
      _os_log_debug_impl(&dword_235DB9000, v13, OS_LOG_TYPE_DEBUG, "#D Setting BLER with for sim[%d]: %@", buf, 0x12u);
      CFDictionaryRef v9 = *a2;
    }
    memset(buf, 170, 16);
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)buf, v9);
    if (ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)buf, *v11))
    {
      char Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)buf, (const __CFString *)*MEMORY[0x263F8B5B0]);
      char v15 = 2;
    }
    else
    {
      char Int = 0;
      char v15 = 0;
    }
    MEMORY[0x237DF4EE0](buf);
    CFDictionaryRef v16 = *a3;
    if (*a3) {
      char v20 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    }
    else {
      char v20 = 0;
    }
    if (v20) {
      goto LABEL_19;
    }
LABEL_13:
    unsigned int v18 = 0;
    unsigned int v19 = 0;
    goto LABEL_28;
  }
  char Int = 0;
  char v15 = 0;
  CFDictionaryRef v16 = *a3;
  if (*a3) {
    long long v17 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  }
  else {
    long long v17 = 0;
  }
  if (!v17) {
    goto LABEL_13;
  }
LABEL_19:
  char v21 = a1[5];
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 67109378;
    *(_DWORD *)&uint8_t buf[4] = a4;
    *(_WORD *)&uint8_t buf[8] = 2112;
    *(void *)&buf[10] = v16;
    _os_log_debug_impl(&dword_235DB9000, v21, OS_LOG_TYPE_DEBUG, "#D Setting SINR with for sim[%d]: %@", buf, 0x12u);
    CFDictionaryRef v16 = *a3;
  }
  memset(buf, 170, 16);
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)buf, v16);
  if (ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)buf, *v11))
  {
    double v22 = 0.0;
    ctu::cf::map_adapter::getDouble((ctu::cf::map_adapter *)buf, (const __CFString *)*MEMORY[0x263F8B7D0], 0.0);
    v15 |= 1u;
    if (v23 >= 0.0)
    {
      double v22 = v23;
      if (v23 > 1.0) {
        double v22 = 1.0;
      }
    }
    unsigned int v19 = (v22 * 10000.0);
    unsigned int v18 = (10000.0 - v22 * 10000.0);
  }
  else
  {
    unsigned int v18 = 0;
    unsigned int v19 = 0;
    v15 &= 2u;
  }
  MEMORY[0x237DF4EE0](buf);
LABEL_28:
  *(void *)&long long v24 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v24 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v57 = v24;
  long long __p = v24;
  *(_OWORD *)&uint8_t buf[16] = v24;
  long long v56 = v24;
  *(_OWORD *)long long buf = v24;
  AriSdk::ARI_CsiIdcRTSetLinkQualityReportConfigReq_SDK::ARI_CsiIdcRTSetLinkQualityReportConfigReq_SDK((AriSdk::ARI_CsiIdcRTSetLinkQualityReportConfigReq_SDK *)buf);
  CFDictionaryRef v25 = operator new(4uLL);
  *CFDictionaryRef v25 = a4;
  long long v26 = (void *)__p;
  *(void *)&long long __p = v25;
  if (v26) {
    operator delete(v26);
  }
  CFArrayRef v27 = operator new(0xCuLL);
  *CFArrayRef v27 = v15;
  v27[1] = Int;
  *((_WORD *)v27 + 1) = 0;
  *((_DWORD *)v27 + 1) = v18;
  *((_DWORD *)v27 + 2) = v19;
  uint64_t v28 = (void *)*((void *)&__p + 1);
  *((void *)&__p + 1) = v27;
  if (v28) {
    operator delete(v28);
  }
  CFArrayRef v29 = (std::__shared_weak_count *)a1[10];
  if (!v29 || (CFArrayRef v30 = (std::__shared_weak_count_vtbl *)a1[9], (v31 = std::__shared_weak_count::lock(v29)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v32 = v31;
  p_shared_weak_owners = &v31->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v31->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v32);
  }
  uint64_t v34 = a1[24];
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  if (!*(void *)a5)
  {
    CFIndex v35 = 0;
    CFDictionaryRef v36 = *(NSObject **)(a5 + 8);
    if (!v36) {
      goto LABEL_39;
    }
    goto LABEL_38;
  }
  CFIndex v35 = (std::__shared_weak_count_vtbl *)_Block_copy(*(const void **)a5);
  CFDictionaryRef v36 = *(NSObject **)(a5 + 8);
  if (v36) {
LABEL_38:
  }
    dispatch_retain(v36);
LABEL_39:
  uint64_t v37 = (std::__shared_weak_count *)operator new(0x40uLL);
  v37->__shared_owners_ = 0;
  p_uint64_t shared_owners = &v37->__shared_owners_;
  v37->__shared_weak_owners_ = 0;
  v37[1].__vftable = v30;
  v37->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93EFC8;
  v37[1].__shared_owners_ = (uint64_t)v32;
  v37[1].__shared_weak_owners_ = (uint64_t)a1;
  v37[2].__vftable = v35;
  v37[2].__shared_owners_ = (uint64_t)v36;
  uint64_t v48 = MEMORY[0x263EF8330];
  uint64_t v49 = 1174405120;
  uint64_t v50 = ___ZN3ice6detail12wrapCallbackIZN4coex16ARICommandDriver23setLinkQualityMode_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEES9_NS2_5SubIdENS2_13CommandDriver8CallbackEE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  long long v51 = &__block_descriptor_tmp_111_0;
  CFTypeID v52 = v37 + 1;
  CFTypeID v53 = v37;
  atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlock[0] = (const void *)MEMORY[0x263EF8330];
  aBlock[1] = (const void *)0x40000000;
  xpc_object_t aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_6;
  aBlock[3] = &unk_264C7DD00;
  aBlock[4] = &v48;
  CFArrayRef v39 = _Block_copy(aBlock);
  std::runtime_error v40 = v53;
  if (!v53 || atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_42;
    }
LABEL_47:
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
    if ((void)__p) {
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
  std::__shared_weak_count::__release_weak(v40);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_47;
  }
LABEL_42:
  if ((void)__p) {
    goto LABEL_49;
  }
LABEL_48:
  CFTypeID v41 = operator new(4uLL);
  *CFTypeID v41 = 0;
  *(void *)&long long __p = v41;
LABEL_49:
  unint64_t v47 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v42 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v42 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v46[0] = v42;
  v46[1] = v42;
  long long v43 = *(std::__shared_weak_count **)(v34 + 16);
  uint64_t v48 = *(void *)(v34 + 8);
  if (!v43)
  {
    uint64_t v49 = 0;
LABEL_59:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v49 = (uint64_t)std::__shared_weak_count::lock(v43);
  if (!v49) {
    goto LABEL_59;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  long long v44 = (std::__shared_weak_count *)v49;
  if (v49 && !atomic_fetch_add((atomic_ullong *volatile)(v49 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
  }
  aBlock[0] = v39;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0]) {
    _Block_release(aBlock[0]);
  }
  MEMORY[0x237DF50B0](v46);
  std::__shared_weak_count::__release_weak(v32);
  return MEMORY[0x237DF6B90](buf);
}

uint64_t coex::ARICommandDriver::setWiFiStatus_sync(void *a1, const __CFDictionary **a2, uint64_t a3)
{
  v41[0] = 0xAAAAAAAAAAAAAAAALL;
  v41[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v41, *a2);
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)long long __p = v6;
  *(_OWORD *)std::runtime_error v40 = v6;
  v38[2] = v6;
  v38[3] = v6;
  v38[0] = v6;
  v38[1] = v6;
  AriSdk::ARI_CsiIdcSetWifiStatusReq_SDK::ARI_CsiIdcSetWifiStatusReq_SDK((AriSdk::ARI_CsiIdcSetWifiStatusReq_SDK *)v38);
  CFTypeRef v7 = operator new(4uLL);
  _DWORD *v7 = 0;
  long long v8 = __p[0];
  __p[0] = v7;
  if (v8) {
    operator delete(v8);
  }
  int Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v41, (const __CFString *)*MEMORY[0x263F8B630]);
  char v10 = operator new(4uLL);
  *char v10 = Int;
  long long v11 = __p[1];
  __p[1] = v10;
  if (v11) {
    operator delete(v11);
  }
  int v12 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v41, (const __CFString *)*MEMORY[0x263F8B578]);
  uint64_t v13 = operator new(4uLL);
  *uint64_t v13 = v12;
  CFTypeRef v14 = v40[0];
  v40[0] = v13;
  if (v14) {
    operator delete(v14);
  }
  int v15 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v41, (const __CFString *)*MEMORY[0x263F8B590]);
  CFDictionaryRef v16 = operator new(4uLL);
  *CFDictionaryRef v16 = v15;
  long long v17 = v40[1];
  v40[1] = v16;
  if (v17) {
    operator delete(v17);
  }
  unsigned int v18 = (std::__shared_weak_count *)a1[10];
  if (!v18 || (v19 = (std::__shared_weak_count_vtbl *)a1[9], (char v20 = std::__shared_weak_count::lock(v18)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  char v21 = v20;
  p_shared_weak_owners = &v20->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v20->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v21);
  }
  uint64_t v23 = a1[24];
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  if (*(void *)a3)
  {
    long long v24 = (std::__shared_weak_count_vtbl *)_Block_copy(*(const void **)a3);
    CFDictionaryRef v25 = *(NSObject **)(a3 + 8);
    if (!v25) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  long long v24 = 0;
  CFDictionaryRef v25 = *(NSObject **)(a3 + 8);
  if (v25) {
LABEL_15:
  }
    dispatch_retain(v25);
LABEL_16:
  CFDictionaryRef v26 = *a2;
  if (*a2) {
    CFRetain(v26);
  }
  CFArrayRef v27 = (std::__shared_weak_count *)operator new(0x48uLL);
  v27->__shared_owners_ = 0;
  p_uint64_t shared_owners = &v27->__shared_owners_;
  v27->__shared_weak_owners_ = 0;
  v27->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93EE48;
  v27[1].__vftable = v19;
  v27[1].__shared_owners_ = (uint64_t)v21;
  v27[1].__shared_weak_owners_ = (uint64_t)a1;
  v27[2].__vftable = v24;
  v27[2].__shared_owners_ = (uint64_t)v25;
  v27[2].__shared_weak_owners_ = (uint64_t)v26;
  uint64_t v42 = MEMORY[0x263EF8330];
  uint64_t v43 = 1174405120;
  long long v44 = ___ZN3ice6detail12wrapCallbackIZN4coex16ARICommandDriver18setWiFiStatus_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS2_13CommandDriver8CallbackEE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  CFTypeID v45 = &__block_descriptor_tmp_94;
  long long v46 = v27 + 1;
  unint64_t v47 = v27;
  atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlock[0] = (const void *)MEMORY[0x263EF8330];
  aBlock[1] = (const void *)0x40000000;
  xpc_object_t aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_6;
  aBlock[3] = &unk_264C7DD00;
  aBlock[4] = &v42;
  CFArrayRef v29 = _Block_copy(aBlock);
  CFArrayRef v30 = v47;
  if (!v47 || atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_21;
    }
LABEL_26:
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    if (__p[0]) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
  std::__shared_weak_count::__release_weak(v30);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_26;
  }
LABEL_21:
  if (__p[0]) {
    goto LABEL_28;
  }
LABEL_27:
  CFArrayRef v31 = operator new(4uLL);
  _DWORD *v31 = 0;
  __p[0] = v31;
LABEL_28:
  unint64_t v37 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v32 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v32 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v36[0] = v32;
  v36[1] = v32;
  uint64_t v33 = *(std::__shared_weak_count **)(v23 + 16);
  uint64_t v42 = *(void *)(v23 + 8);
  if (!v33)
  {
    uint64_t v43 = 0;
LABEL_38:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v43 = (uint64_t)std::__shared_weak_count::lock(v33);
  if (!v43) {
    goto LABEL_38;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  uint64_t v34 = (std::__shared_weak_count *)v43;
  if (v43 && !atomic_fetch_add((atomic_ullong *volatile)(v43 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
  aBlock[0] = v29;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0]) {
    _Block_release(aBlock[0]);
  }
  MEMORY[0x237DF50B0](v36);
  std::__shared_weak_count::__release_weak(v21);
  MEMORY[0x237DF5F80](v38);
  return MEMORY[0x237DF4EE0](v41);
}

void sub_235E154E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  long long v24 = *(const void **)(v22 - 120);
  if (v24) {
    _Block_release(v24);
  }
  MEMORY[0x237DF50B0](&a15);
  coex::ARICommandDriver::setWiFiStatus_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::CommandDriver::Callback)::$_0::~$_0(&a9);
  std::__shared_weak_count::__release_weak(v21);
  MEMORY[0x237DF5F80](&a21);
  MEMORY[0x237DF4EE0](v22 - 184);
  _Unwind_Resume(a1);
}

uint64_t coex::ARICommandDriver::setLAAConfig_sync(void *a1, const __CFDictionary **a2, int a3, uint64_t a4)
{
  v54[0] = 0xAAAAAAAAAAAAAAAALL;
  v54[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v54, *a2);
  CFTypeID v53 = (void *)0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)long long v51 = v8;
  *(_OWORD *)CFTypeID v52 = v8;
  v49[3] = v8;
  *(_OWORD *)long long __p = v8;
  v49[1] = v8;
  xpc_object_t v49[2] = v8;
  v49[0] = v8;
  AriSdk::ARI_CsiIdcSetLaaConfigReq_SDK::ARI_CsiIdcSetLaaConfigReq_SDK((AriSdk::ARI_CsiIdcSetLaaConfigReq_SDK *)v49);
  CFDictionaryRef v9 = operator new(4uLL);
  *CFDictionaryRef v9 = a3;
  char v10 = __p[0];
  __p[0] = v9;
  if (v10) {
    operator delete(v10);
  }
  int Bool = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v54, (const __CFString *)*MEMORY[0x263F8B698]);
  int v12 = operator new(4uLL);
  *int v12 = Bool;
  uint64_t v13 = __p[1];
  __p[1] = v12;
  if (v13) {
    operator delete(v13);
  }
  char Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v54, (const __CFString *)*MEMORY[0x263F8B748]);
  int v15 = operator new(1uLL);
  *int v15 = Int;
  CFDictionaryRef v16 = v51[0];
  v51[0] = v15;
  if (v16) {
    operator delete(v16);
  }
  char v17 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v54, (const __CFString *)*MEMORY[0x263F8B6A0]);
  unsigned int v18 = operator new(1uLL);
  unsigned char *v18 = v17;
  unsigned int v19 = v51[1];
  v51[1] = v18;
  if (v19) {
    operator delete(v19);
  }
  char v20 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v54, (const __CFString *)*MEMORY[0x263F8B6D8]);
  char v21 = operator new(1uLL);
  *char v21 = v20;
  uint64_t v22 = v52[0];
  v52[0] = v21;
  if (v22) {
    operator delete(v22);
  }
  __int16 v23 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v54, (const __CFString *)*MEMORY[0x263F8B690]);
  long long v24 = operator new(2uLL);
  *long long v24 = v23;
  CFDictionaryRef v25 = v52[1];
  v52[1] = v24;
  if (v25) {
    operator delete(v25);
  }
  __int16 v26 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v54, (const __CFString *)*MEMORY[0x263F8B718]);
  CFArrayRef v27 = operator new(2uLL);
  *CFArrayRef v27 = v26;
  uint64_t v28 = v53;
  CFTypeID v53 = v27;
  if (v28) {
    operator delete(v28);
  }
  CFArrayRef v29 = (std::__shared_weak_count *)a1[10];
  if (!v29 || (CFArrayRef v30 = (std::__shared_weak_count_vtbl *)a1[9], (v31 = std::__shared_weak_count::lock(v29)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v32 = v31;
  p_shared_weak_owners = &v31->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v31->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v32);
  }
  uint64_t v34 = a1[24];
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  if (*(void *)a4)
  {
    CFIndex v35 = (std::__shared_weak_count_vtbl *)_Block_copy(*(const void **)a4);
    CFDictionaryRef v36 = *(NSObject **)(a4 + 8);
    if (!v36) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  CFIndex v35 = 0;
  CFDictionaryRef v36 = *(NSObject **)(a4 + 8);
  if (v36) {
LABEL_21:
  }
    dispatch_retain(v36);
LABEL_22:
  CFDictionaryRef v37 = *a2;
  if (*a2) {
    CFRetain(v37);
  }
  unint64_t v38 = (std::__shared_weak_count *)operator new(0x48uLL);
  v38->__shared_owners_ = 0;
  p_uint64_t shared_owners = &v38->__shared_owners_;
  v38->__shared_weak_owners_ = 0;
  v38->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93EEC8;
  v38[1].__vftable = v30;
  v38[1].__shared_owners_ = (uint64_t)v32;
  v38[1].__shared_weak_owners_ = (uint64_t)a1;
  v38[2].__vftable = v35;
  v38[2].__shared_owners_ = (uint64_t)v36;
  v38[2].__shared_weak_owners_ = (uint64_t)v37;
  uint64_t v55 = MEMORY[0x263EF8330];
  uint64_t v56 = 1174405120;
  long long v57 = ___ZN3ice6detail12wrapCallbackIZN4coex16ARICommandDriver17setLAAConfig_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS2_5SubIdENS2_13CommandDriver8CallbackEE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  CFNumberRef v58 = &__block_descriptor_tmp_99;
  uint64_t v59 = v38 + 1;
  long long v60 = v38;
  atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlock[0] = (const void *)MEMORY[0x263EF8330];
  aBlock[1] = (const void *)0x40000000;
  xpc_object_t aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_6;
  aBlock[3] = &unk_264C7DD00;
  aBlock[4] = &v55;
  std::runtime_error v40 = _Block_copy(aBlock);
  CFTypeID v41 = v60;
  if (!v60 || atomic_fetch_add(&v60->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_27;
    }
LABEL_32:
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
    if (__p[0]) {
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
  std::__shared_weak_count::__release_weak(v41);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_32;
  }
LABEL_27:
  if (__p[0]) {
    goto LABEL_34;
  }
LABEL_33:
  uint64_t v42 = operator new(4uLL);
  _DWORD *v42 = 0;
  __p[0] = v42;
LABEL_34:
  unint64_t v48 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v43 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v43 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v47[0] = v43;
  v47[1] = v43;
  long long v44 = *(std::__shared_weak_count **)(v34 + 16);
  uint64_t v55 = *(void *)(v34 + 8);
  if (!v44)
  {
    uint64_t v56 = 0;
LABEL_44:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v56 = (uint64_t)std::__shared_weak_count::lock(v44);
  if (!v56) {
    goto LABEL_44;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  CFTypeID v45 = (std::__shared_weak_count *)v56;
  if (v56 && !atomic_fetch_add((atomic_ullong *volatile)(v56 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
  }
  aBlock[0] = v40;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0]) {
    _Block_release(aBlock[0]);
  }
  MEMORY[0x237DF50B0](v47);
  std::__shared_weak_count::__release_weak(v32);
  MEMORY[0x237DF5D90](v49);
  return MEMORY[0x237DF4EE0](v54);
}

void sub_235E15B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  long long v24 = *(const void **)(v22 - 120);
  if (v24) {
    _Block_release(v24);
  }
  MEMORY[0x237DF50B0](&a15);
  coex::ARICommandDriver::setLAAConfig_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0::~$_0(&a9);
  std::__shared_weak_count::__release_weak(v21);
  MEMORY[0x237DF5D90](&a21);
  MEMORY[0x237DF4EE0](v22 - 184);
  _Unwind_Resume(a1);
}

uint64_t coex::ARICommandDriver::setFCMBCMAntennaMode_sync(void *a1, const __CFDictionary **a2, uint64_t a3)
{
  v75[0] = 0xAAAAAAAAAAAAAAAALL;
  v75[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v75, *a2);
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)long long __p = v4;
  long long v74 = v4;
  v72[2] = v4;
  v72[3] = v4;
  v72[0] = v4;
  v72[1] = v4;
  AriSdk::ARI_IBIRfSetAntennaPortMappingReq_SDK::ARI_IBIRfSetAntennaPortMappingReq_SDK((AriSdk::ARI_IBIRfSetAntennaPortMappingReq_SDK *)v72);
  int Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v75, (const __CFString *)*MEMORY[0x263F8B740]);
  long long v6 = operator new(4uLL);
  _DWORD *v6 = Int;
  CFTypeRef v7 = __p[0];
  __p[0] = v6;
  if (v7) {
    operator delete(v7);
  }
  long long v8 = (const void *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v75, (const __CFString *)*MEMORY[0x263F8B7B8]);
  CFTypeRef v71 = v8;
  CFIndex Count = CFArrayGetCount((CFArrayRef)v8);
  if (Count >= 1)
  {
    CFIndex v10 = 0;
    uint64_t v11 = 50;
    if (Count < 50) {
      uint64_t v11 = Count;
    }
    uint64_t v60 = v11;
    CFNumberRef v62 = (__CFString *)*MEMORY[0x263F8B760];
    CFTypeID v61 = (__CFString *)*MEMORY[0x263F8B768];
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v8, v10);
      uint64_t v13 = ValueAtIndex;
      if (ValueAtIndex && (CFTypeID v14 = CFGetTypeID(ValueAtIndex), v14 == CFDictionaryGetTypeID()))
      {
        aBlock[0] = v13;
        CFRetain(v13);
      }
      else
      {
        uint64_t v13 = 0;
        aBlock[0] = 0;
      }
      int v15 = a1;
      unint64_t v63 = 0xAAAAAAAAAAAAAAAALL;
      unint64_t v64 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)&v63, (const __CFDictionary *)v13);
      unsigned __int8 v16 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)&v63, v62);
      uint64_t v17 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)&v63, v61);
      char v20 = __p[1];
      unsigned int v19 = (unsigned char *)v74;
      uint64_t v21 = v74 - (unint64_t)__p[1];
      if ((unint64_t)v74 - (unint64_t)__p[1] >= 0x190)
      {
        AriOsa::LogSrcInfo((uint64_t *)&v76, (AriOsa *)"/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/ARI/ari_sdk_msg.h", "emplace_back", v18);
        CFDictionaryRef v25 = (void **)&v76;
        if (SHIBYTE(v78) < 0) {
          CFDictionaryRef v25 = v76;
        }
        Ari::Log((Ari *)8, (uint64_t)"(%s:%d) Array is full, cannot add new values", v24, v25, 371);
        if (SHIBYTE(v78) < 0) {
          operator delete(v76);
        }
        goto LABEL_38;
      }
      uint64_t v22 = v16 | (unint64_t)(v17 << 32) | 0xAAAAAA00;
      if ((unint64_t)v74 >= *((void *)&v74 + 1)) {
        break;
      }
      *(void *)long long v74 = v22;
      __int16 v23 = v19 + 8;
LABEL_37:
      *(void *)&long long v74 = v23;
LABEL_38:
      MEMORY[0x237DF4EE0](&v63);
      if (v13) {
        CFRelease(v13);
      }
      if (++v10 == v60) {
        goto LABEL_40;
      }
    }
    uint64_t v26 = v21 >> 3;
    int64_t v27 = *((void *)&v74 + 1) - (unint64_t)__p[1];
    if ((uint64_t)(*((void *)&v74 + 1) - (unint64_t)__p[1]) >> 2 <= (unint64_t)((v21 >> 3) + 1)) {
      unint64_t v28 = v26 + 1;
    }
    else {
      unint64_t v28 = v27 >> 2;
    }
    if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
    }
    if (v28 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v59 = v28;
    CFArrayRef v29 = operator new(8 * v28);
    CFArrayRef v30 = (uint64_t *)&v29[8 * v26];
    *CFArrayRef v30 = v22;
    __int16 v23 = v30 + 1;
    if (v19 != v20)
    {
      unint64_t v31 = v19 - v20 - 8;
      if (v31 < 0x58) {
        goto LABEL_81;
      }
      if ((unint64_t)(&v19[-(v21 & 0xFFFFFFFFFFFFFFF8)] - v29) < 0x20) {
        goto LABEL_81;
      }
      uint64_t v32 = (v31 >> 3) + 1;
      uint64_t v33 = 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v34 = &v19[-v33];
      CFArrayRef v30 = (uint64_t *)((char *)v30 - v33);
      CFIndex v35 = &v29[8 * v26 - 16];
      CFDictionaryRef v36 = (long long *)(v19 - 16);
      uint64_t v37 = v32 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v38 = *v36;
        *(v35 - 1) = *(v36 - 1);
        _OWORD *v35 = v38;
        v35 -= 2;
        v36 -= 2;
        v37 -= 4;
      }
      while (v37);
      unsigned int v19 = v34;
      if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_81:
        do
        {
          uint64_t v39 = *((void *)v19 - 1);
          v19 -= 8;
          *--CFArrayRef v30 = v39;
        }
        while (v19 != v20);
        unsigned int v19 = v20;
        a1 = v15;
        __p[1] = v30;
        *(void *)&long long v74 = v23;
        *((void *)&v74 + 1) = &v29[8 * v59];
        if (!v20) {
          goto LABEL_37;
        }
LABEL_36:
        operator delete(v19);
        goto LABEL_37;
      }
      unsigned int v19 = v20;
    }
    a1 = v15;
    __p[1] = v30;
    *(void *)&long long v74 = v23;
    *((void *)&v74 + 1) = &v29[8 * v59];
    if (!v19) {
      goto LABEL_37;
    }
    goto LABEL_36;
  }
LABEL_40:
  std::runtime_error v40 = (std::__shared_weak_count *)a1[10];
  if (!v40 || (CFTypeID v41 = (std::__shared_weak_count_vtbl *)a1[9], (v42 = std::__shared_weak_count::lock(v40)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  long long v43 = v42;
  p_shared_weak_owners = &v42->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v42->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v43);
  }
  uint64_t v45 = a1[24];
  unint64_t v63 = (unint64_t)v41;
  unint64_t v64 = v43;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  CFTypeID v65 = a1;
  if (*(void *)a3)
  {
    long long v46 = (std::__shared_weak_count_vtbl *)_Block_copy(*(const void **)a3);
    unint64_t v47 = *(NSObject **)(a3 + 8);
    CFNumberRef v66 = v46;
    dispatch_object_t object = v47;
    if (!v47) {
      goto LABEL_47;
    }
    goto LABEL_46;
  }
  long long v46 = 0;
  unint64_t v47 = *(NSObject **)(a3 + 8);
  CFNumberRef v66 = 0;
  dispatch_object_t object = v47;
  if (v47) {
LABEL_46:
  }
    dispatch_retain(v47);
LABEL_47:
  CFDictionaryRef v48 = *a2;
  CFTypeRef cf = v48;
  if (v48) {
    CFRetain(v48);
  }
  uint64_t v49 = (std::__shared_weak_count *)operator new(0x48uLL);
  v49->__shared_owners_ = 0;
  p_uint64_t shared_owners = &v49->__shared_owners_;
  v49->__shared_weak_owners_ = 0;
  v49->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93EF48;
  v49[1].__vftable = v41;
  unint64_t v63 = 0;
  unint64_t v64 = 0;
  v49[1].__shared_owners_ = (uint64_t)v43;
  v49[1].__shared_weak_owners_ = (uint64_t)a1;
  v49[2].__vftable = v46;
  v49[2].__shared_owners_ = (uint64_t)v47;
  CFNumberRef v66 = 0;
  dispatch_object_t object = 0;
  v49[2].__shared_weak_owners_ = (uint64_t)v48;
  CFTypeRef cf = 0;
  unint64_t v76 = (void **)MEMORY[0x263EF8330];
  uint64_t v77 = 1174405120;
  CFDictionaryRef v78 = ___ZN3ice6detail12wrapCallbackIZN4coex16ARICommandDriver25setFCMBCMAntennaMode_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS2_13CommandDriver8CallbackEE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  uint64_t v79 = &__block_descriptor_tmp_106;
  long long v80 = v49 + 1;
  CFDictionaryRef v81 = v49;
  atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlock[0] = (const void *)MEMORY[0x263EF8330];
  aBlock[1] = (const void *)0x40000000;
  xpc_object_t aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_6;
  aBlock[3] = &unk_264C7DD00;
  aBlock[4] = &v76;
  long long v51 = _Block_copy(aBlock);
  CFTypeID v52 = v81;
  if (!v81 || atomic_fetch_add(&v81->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_53;
    }
    goto LABEL_52;
  }
  ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
  std::__shared_weak_count::__release_weak(v52);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_52:
    ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
    std::__shared_weak_count::__release_weak(v49);
  }
LABEL_53:
  *(void *)&long long v53 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v53 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v69[0] = v53;
  v69[1] = v53;
  unint64_t v70 = 0xAAAAAAAAAAAAAAAALL;
  CFNumberRef v54 = *(std::__shared_weak_count **)(v45 + 16);
  unint64_t v76 = *(void ***)(v45 + 8);
  if (!v54)
  {
    uint64_t v77 = 0;
LABEL_78:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v77 = (uint64_t)std::__shared_weak_count::lock(v54);
  if (!v77) {
    goto LABEL_78;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  uint64_t v55 = (std::__shared_weak_count *)v77;
  if (v77 && !atomic_fetch_add((atomic_ullong *volatile)(v77 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
    std::__shared_weak_count::__release_weak(v55);
  }
  aBlock[0] = v51;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0]) {
    _Block_release(aBlock[0]);
  }
  MEMORY[0x237DF50B0](v69);
  if (cf) {
    CFRelease(cf);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v66) {
    _Block_release(v66);
  }
  if (v64) {
    std::__shared_weak_count::__release_weak(v64);
  }
  std::__shared_weak_count::__release_weak(v43);
  if (v71) {
    CFRelease(v71);
  }
  MEMORY[0x237DF6930](v72);
  return MEMORY[0x237DF4EE0](v75);
}

void sub_235E162FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,const void *a28,char a29)
{
  uint64_t v32 = *(const void **)(v30 - 128);
  if (v32) {
    _Block_release(v32);
  }
  MEMORY[0x237DF50B0](&a23);
  coex::ARICommandDriver::setFCMBCMAntennaMode_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::CommandDriver::Callback)::$_0::~$_0(&a17);
  std::__shared_weak_count::__release_weak(v29);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef(&a28);
  MEMORY[0x237DF6930](&a29);
  MEMORY[0x237DF4EE0](v30 - 192);
  _Unwind_Resume(a1);
}

uint64_t coex::ARICommandDriver::setRC1Duration_sync(void *a1, const __CFDictionary **a2, int a3, uint64_t a4)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  long long v8 = a1[5];
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    CFDictionaryRef v33 = *a2;
    *(_DWORD *)long long buf = 67109378;
    *(_DWORD *)&uint8_t buf[4] = a3;
    *(_WORD *)&uint8_t buf[8] = 2112;
    *(void *)&buf[10] = v33;
    _os_log_debug_impl(&dword_235DB9000, v8, OS_LOG_TYPE_DEBUG, "#D Setting RC1 duration for sim[%d]: %@", buf, 0x12u);
  }
  v36[0] = 0xAAAAAAAAAAAAAAAALL;
  v36[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v36, *a2);
  int Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v36, (const __CFString *)*MEMORY[0x263F8B5D8]);
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v46 = v10;
  long long v47 = v10;
  *(_OWORD *)&uint8_t buf[16] = v10;
  long long v45 = v10;
  *(_OWORD *)long long buf = v10;
  AriSdk::ARI_CsiIdcSetRadio1Req_SDK::ARI_CsiIdcSetRadio1Req_SDK((AriSdk::ARI_CsiIdcSetRadio1Req_SDK *)buf);
  uint64_t v11 = operator new(4uLL);
  *uint64_t v11 = a3;
  int v12 = (void *)v47;
  *(void *)&long long v47 = v11;
  if (v12) {
    operator delete(v12);
  }
  uint64_t v13 = operator new(4uLL);
  *uint64_t v13 = Int;
  CFTypeID v14 = (void *)*((void *)&v47 + 1);
  *((void *)&v47 + 1) = v13;
  if (v14) {
    operator delete(v14);
  }
  int v15 = (std::__shared_weak_count *)a1[10];
  if (!v15 || (unsigned __int8 v16 = (std::__shared_weak_count_vtbl *)a1[9], (v17 = std::__shared_weak_count::lock(v15)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  unsigned int v18 = v17;
  p_shared_weak_owners = &v17->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v20 = a1[24];
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    uint64_t v21 = *(const void **)a4;
    if (*(void *)a4) {
      goto LABEL_11;
    }
LABEL_19:
    uint64_t v22 = 0;
    __int16 v23 = *(NSObject **)(a4 + 8);
    if (!v23) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v18);
  uint64_t v20 = a1[24];
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v21 = *(const void **)a4;
  if (!*(void *)a4) {
    goto LABEL_19;
  }
LABEL_11:
  uint64_t v22 = _Block_copy(v21);
  __int16 v23 = *(NSObject **)(a4 + 8);
  if (v23) {
LABEL_12:
  }
    dispatch_retain(v23);
LABEL_13:
  long long v24 = (std::__shared_weak_count *)operator new(0x38uLL);
  v24->__shared_owners_ = 0;
  p_uint64_t shared_owners = &v24->__shared_owners_;
  v24->__shared_weak_owners_ = 0;
  v24->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93F0C8;
  v24[1].__vftable = v16;
  v24[1].__shared_owners_ = (uint64_t)v18;
  v24[1].__shared_weak_owners_ = (uint64_t)v22;
  v24[2].__vftable = (std::__shared_weak_count_vtbl *)v23;
  uint64_t v37 = MEMORY[0x263EF8330];
  uint64_t v38 = 1174405120;
  uint64_t v39 = ___ZN3ice6detail12wrapCallbackIZN4coex16ARICommandDriver19setRC1Duration_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS2_5SubIdENS2_13CommandDriver8CallbackEE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  std::runtime_error v40 = &__block_descriptor_tmp_121;
  CFTypeID v41 = v24 + 1;
  uint64_t v42 = v24;
  atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlock[0] = (const void *)MEMORY[0x263EF8330];
  aBlock[1] = (const void *)0x40000000;
  xpc_object_t aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_6;
  aBlock[3] = &unk_264C7DD00;
  aBlock[4] = &v37;
  uint64_t v26 = _Block_copy(aBlock);
  int64_t v27 = v42;
  if (!v42 || atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_16;
    }
LABEL_22:
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
    if ((void)v47) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
  std::__shared_weak_count::__release_weak(v27);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_22;
  }
LABEL_16:
  if ((void)v47) {
    goto LABEL_24;
  }
LABEL_23:
  unint64_t v28 = operator new(4uLL);
  *unint64_t v28 = 0;
  *(void *)&long long v47 = v28;
LABEL_24:
  unint64_t v35 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v29 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v29 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v34[0] = v29;
  v34[1] = v29;
  uint64_t v30 = *(std::__shared_weak_count **)(v20 + 16);
  uint64_t v37 = *(void *)(v20 + 8);
  if (!v30)
  {
    uint64_t v38 = 0;
LABEL_34:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v38 = (uint64_t)std::__shared_weak_count::lock(v30);
  if (!v38) {
    goto LABEL_34;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  unint64_t v31 = (std::__shared_weak_count *)v38;
  if (v38 && !atomic_fetch_add((atomic_ullong *volatile)(v38 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  aBlock[0] = v26;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0]) {
    _Block_release(aBlock[0]);
  }
  MEMORY[0x237DF50B0](v34);
  std::__shared_weak_count::__release_weak(v18);
  MEMORY[0x237DF5790](buf);
  return MEMORY[0x237DF4EE0](v36);
}

void sub_235E168C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *aBlock)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ___ZN4coex16ARICommandDriver8set_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke_17(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  if (*(void *)(v1 + 40))
  {
    if (*(void *)(v1 + 48))
    {
      CFDictionaryRef v2 = 0;
      uint64_t v3 = 0;
      coex::CommandDriver::Callback::operator()(v1 + 40, &v3, &v2);
    }
  }
}

void coex::ARICommandDriver::getScanFreqBandFilter_sync(uint64_t a1, uint64_t a2, uint64_t a3)
{
  cf[3] = *(CFTypeRef *)MEMORY[0x263EF8340];
  long long v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(cf[0]) = 136315138;
    *(CFTypeRef *)((char *)cf + 4) = "getScanFreqBandFilter_sync";
    _os_log_debug_impl(&dword_235DB9000, v4, OS_LOG_TYPE_DEBUG, "#D %s: not supported!", (uint8_t *)cf, 0xCu);
  }
  cf[0] = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  char v10 = 13;
  strcpy((char *)__p, "Not supported");
  CreateError();
  CFTypeRef v5 = cf[0];
  CFTypeRef v8 = cf[0];
  if (!cf[0])
  {
    CFTypeRef v7 = 0;
    coex::CommandDriver::Callback::operator()(a3, &v8, &v7);
    CFTypeRef v6 = cf[0];
    if (!cf[0]) {
      return;
    }
    goto LABEL_7;
  }
  CFRetain(cf[0]);
  CFTypeRef v7 = 0;
  coex::CommandDriver::Callback::operator()(a3, &v8, &v7);
  CFRelease(v5);
  CFTypeRef v6 = cf[0];
  if (cf[0]) {
LABEL_7:
  }
    CFRelease(v6);
}

void sub_235E16B54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t coex::ARICommandDriver::pollWWANState_sync(void *a1, int a2)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  long long v4 = a1[5];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a2;
    _os_log_debug_impl(&dword_235DB9000, v4, OS_LOG_TYPE_DEBUG, "#D Polling WWAN state for sim[%d]", buf, 8u);
  }
  long long __p = (void *)0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v34 = v5;
  long long v35 = v5;
  *(_OWORD *)long long buf = v5;
  long long v33 = v5;
  AriSdk::ARI_CsiIdcGetCellConfigReq_SDK::ARI_CsiIdcGetCellConfigReq_SDK((AriSdk::ARI_CsiIdcGetCellConfigReq_SDK *)buf);
  CFTypeRef v6 = operator new(4uLL);
  _DWORD *v6 = a2;
  CFTypeRef v7 = __p;
  long long __p = v6;
  if (v7) {
    operator delete(v7);
  }
  CFTypeRef v8 = (std::__shared_weak_count *)a1[10];
  if (!v8 || (CFDictionaryRef v9 = (std::__shared_weak_count_vtbl *)a1[9], (v10 = std::__shared_weak_count::lock(v8)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v11 = v10;
  p_shared_weak_owners = &v10->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v13 = a1[24];
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  CFTypeID v14 = (std::__shared_weak_count *)operator new(0x30uLL);
  v14->__shared_owners_ = 0;
  p_uint64_t shared_owners = &v14->__shared_owners_;
  v14->__shared_weak_owners_ = 0;
  v14[1].__vftable = v9;
  v14->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93EBC8;
  v14[1].__shared_owners_ = (uint64_t)v11;
  v14[1].__shared_weak_owners_ = (uint64_t)a1;
  uint64_t v25 = MEMORY[0x263EF8330];
  uint64_t v26 = 1174405120;
  int64_t v27 = ___ZN3ice6detail12wrapCallbackIZN4coex16ARICommandDriver18pollWWANState_syncENS2_5SubIdEE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  unint64_t v28 = &__block_descriptor_tmp_71_0;
  long long v29 = v14 + 1;
  uint64_t v30 = v14;
  atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlock[0] = (const void *)MEMORY[0x263EF8330];
  aBlock[1] = (const void *)0x40000000;
  xpc_object_t aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_6;
  aBlock[3] = &unk_264C7DD00;
  aBlock[4] = &v25;
  unsigned __int8 v16 = _Block_copy(aBlock);
  uint64_t v17 = v30;
  if (!v30 || atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_12;
    }
LABEL_15:
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (__p) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_15;
  }
LABEL_12:
  if (__p) {
    goto LABEL_17;
  }
LABEL_16:
  unsigned int v18 = operator new(4uLL);
  _DWORD *v18 = 0;
  long long __p = v18;
LABEL_17:
  unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v19 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v23[0] = v19;
  v23[1] = v19;
  uint64_t v20 = *(std::__shared_weak_count **)(v13 + 16);
  uint64_t v25 = *(void *)(v13 + 8);
  if (!v20)
  {
    uint64_t v26 = 0;
LABEL_27:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v26 = (uint64_t)std::__shared_weak_count::lock(v20);
  if (!v26) {
    goto LABEL_27;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  uint64_t v21 = (std::__shared_weak_count *)v26;
  if (v26 && !atomic_fetch_add((atomic_ullong *volatile)(v26 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  aBlock[0] = v16;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0]) {
    _Block_release(aBlock[0]);
  }
  MEMORY[0x237DF50B0](v23);
  std::__shared_weak_count::__release_weak(v11);
  return MEMORY[0x237DF5F10](buf);
}

void sub_235E16F50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *aBlock,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void coex::ARICommandDriver::pollWLANScanState_sync(coex::ARICommandDriver *this)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  uint64_t v1 = *((void *)this + 5);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
  {
    int v2 = 136315138;
    uint64_t v3 = "pollWLANScanState_sync";
    _os_log_debug_impl(&dword_235DB9000, v1, OS_LOG_TYPE_DEBUG, "#D %s: not supported!", (uint8_t *)&v2, 0xCu);
  }
}

void coex::ARICommandDriver::pollWLANConnState_sync(coex::ARICommandDriver *this)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  uint64_t v1 = *((void *)this + 5);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
  {
    int v2 = 136315138;
    uint64_t v3 = "pollWLANConnState_sync";
    _os_log_debug_impl(&dword_235DB9000, v1, OS_LOG_TYPE_DEBUG, "#D %s: not supported!", (uint8_t *)&v2, 0xCu);
  }
}

void coex::ARICommandDriver::pollPolicy_sync(uint64_t a1, int a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a2;
    _os_log_debug_impl(&dword_235DB9000, v4, OS_LOG_TYPE_DEBUG, "#D Polling Policy for sim[%d]", buf, 8u);
  }
  *(void *)long long buf = 0;
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFTypeRef v7 = Mutable;
  if (Mutable) {
    *(void *)long long buf = Mutable;
  }
  CFMutableDictionaryRef v13 = 0;
  CFMutableDictionaryRef v8 = CFDictionaryCreateMutable(v5, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFMutableDictionaryRef v9 = v8;
  if (v8) {
    CFMutableDictionaryRef v13 = v8;
  }
  ctu::cf::insert<__CFString const*,__CFDictionary *>(v7, (CFTypeRef)*MEMORY[0x263F8B5C0], v8);
  if (v7 && (CFTypeID v10 = CFGetTypeID(v7), v10 == CFDictionaryGetTypeID()))
  {
    int v12 = v7;
    CFRetain(v7);
    uint64_t v11 = v7;
  }
  else
  {
    uint64_t v11 = 0;
    int v12 = 0;
  }
  coex::ARICommandDriver::sendStateUpdate_sync(a1, (const void **)&v12, a2);
  if (v11) {
    CFRelease(v11);
  }
  if (v9)
  {
    CFRelease(v9);
    CFTypeRef v7 = *(__CFDictionary **)buf;
  }
  if (v7) {
    CFRelease(v7);
  }
}

void sub_235E1733C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t coex::ARICommandDriver::pollLinkQuality_sync(void *a1, int a2)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v4 = a1[5];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a2;
    _os_log_debug_impl(&dword_235DB9000, v4, OS_LOG_TYPE_DEBUG, "#D Polling Link quality for sim[%d]", buf, 8u);
  }
  long long __p = (void *)0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v34 = v5;
  long long v35 = v5;
  *(_OWORD *)long long buf = v5;
  long long v33 = v5;
  AriSdk::ARI_CsiIdcRTGetLinkQualityReportReq_SDK::ARI_CsiIdcRTGetLinkQualityReportReq_SDK((AriSdk::ARI_CsiIdcRTGetLinkQualityReportReq_SDK *)buf);
  CFTypeRef v6 = operator new(4uLL);
  _DWORD *v6 = a2;
  CFTypeRef v7 = __p;
  long long __p = v6;
  if (v7) {
    operator delete(v7);
  }
  CFMutableDictionaryRef v8 = (std::__shared_weak_count *)a1[10];
  if (!v8 || (CFMutableDictionaryRef v9 = (std::__shared_weak_count_vtbl *)a1[9], (v10 = std::__shared_weak_count::lock(v8)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v11 = v10;
  p_shared_weak_owners = &v10->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v13 = a1[24];
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  CFTypeID v14 = (std::__shared_weak_count *)operator new(0x30uLL);
  v14->__shared_owners_ = 0;
  p_uint64_t shared_owners = &v14->__shared_owners_;
  v14->__shared_weak_owners_ = 0;
  v14[1].__vftable = v9;
  v14->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93EC48;
  v14[1].__shared_owners_ = (uint64_t)v11;
  v14[1].__shared_weak_owners_ = (uint64_t)a1;
  uint64_t v25 = MEMORY[0x263EF8330];
  uint64_t v26 = 1174405120;
  int64_t v27 = ___ZN3ice6detail12wrapCallbackIZN4coex16ARICommandDriver20pollLinkQuality_syncENS2_5SubIdEE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  unint64_t v28 = &__block_descriptor_tmp_76_1;
  long long v29 = v14 + 1;
  uint64_t v30 = v14;
  atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlock[0] = (const void *)MEMORY[0x263EF8330];
  aBlock[1] = (const void *)0x40000000;
  xpc_object_t aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_6;
  aBlock[3] = &unk_264C7DD00;
  aBlock[4] = &v25;
  unsigned __int8 v16 = _Block_copy(aBlock);
  uint64_t v17 = v30;
  if (!v30 || atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_12;
    }
LABEL_15:
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (__p) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_15;
  }
LABEL_12:
  if (__p) {
    goto LABEL_17;
  }
LABEL_16:
  unsigned int v18 = operator new(4uLL);
  _DWORD *v18 = 0;
  long long __p = v18;
LABEL_17:
  unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v19 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v23[0] = v19;
  v23[1] = v19;
  uint64_t v20 = *(std::__shared_weak_count **)(v13 + 16);
  uint64_t v25 = *(void *)(v13 + 8);
  if (!v20)
  {
    uint64_t v26 = 0;
LABEL_27:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v26 = (uint64_t)std::__shared_weak_count::lock(v20);
  if (!v26) {
    goto LABEL_27;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  uint64_t v21 = (std::__shared_weak_count *)v26;
  if (v26 && !atomic_fetch_add((atomic_ullong *volatile)(v26 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  aBlock[0] = v16;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0]) {
    _Block_release(aBlock[0]);
  }
  MEMORY[0x237DF50B0](v23);
  std::__shared_weak_count::__release_weak(v11);
  return MEMORY[0x237DF69B0](buf);
}

void sub_235E17758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *aBlock,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void coex::ARICommandDriver::updateIndications_sync(coex::ARICommandDriver *this, group *a2)
{
  gr_name = a2->gr_name;
  if (a2->gr_name)
  {
    dispatch_retain((dispatch_object_t)a2->gr_name);
    dispatch_group_enter((dispatch_group_t)gr_name);
  }
  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1174405120;
  xpc_object_t aBlock[2] = ___ZN4coex16ARICommandDriver22updateIndications_syncEN8dispatch5groupE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_19_1;
  dispatch_group_t group = (dispatch_group_t)gr_name;
  if (gr_name)
  {
    dispatch_retain((dispatch_object_t)gr_name);
    dispatch_group_enter(group);
  }
  uint64_t v4 = _Block_copy(aBlock);
  long long v5 = *((void *)this + 11);
  if (v5) {
    dispatch_retain(*((dispatch_object_t *)this + 11));
  }
  if (v4)
  {
    CFTypeRef v6 = _Block_copy(v4);
    unint64_t v12 = (unint64_t)v6;
    unint64_t v13 = (unint64_t)v5;
    if (!v5) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  CFTypeRef v6 = 0;
  unint64_t v12 = 0;
  unint64_t v13 = (unint64_t)v5;
  if (v5)
  {
LABEL_9:
    dispatch_retain(v5);
    dispatch_release(v5);
  }
LABEL_10:
  if (v4) {
    _Block_release(v4);
  }
  if (v6)
  {
    CFTypeRef v7 = _Block_copy(v6);
    CFMutableDictionaryRef v8 = v7;
    CFMutableDictionaryRef v9 = v5;
    if (!v5) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  CFTypeRef v7 = 0;
  CFMutableDictionaryRef v8 = 0;
  CFMutableDictionaryRef v9 = v5;
  if (v5) {
LABEL_14:
  }
    dispatch_retain(v5);
LABEL_15:
  coex::ARICommandDriver::setIndications_sync(this, (uint64_t)&v8);
  if (v5) {
    dispatch_release(v5);
  }
  if (v7) {
    _Block_release(v7);
  }
  if (v5) {
    dispatch_release(v5);
  }
  if (v6) {
    _Block_release(v6);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  if (gr_name)
  {
    dispatch_group_leave((dispatch_group_t)gr_name);
    dispatch_release((dispatch_object_t)gr_name);
  }
}

void sub_235E179F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, dispatch_group_t group, char a17)
{
  coex::CommandDriver::Callback::~Callback((coex::CommandDriver::Callback *)&a10);
  coex::CommandDriver::Callback::~Callback((coex::CommandDriver::Callback *)&a17);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  if (v17)
  {
    dispatch_group_leave(v17);
    dispatch_release(v17);
  }
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c30_ZTSN8dispatch13group_sessionE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(NSObject **)(a2 + 32);
  *(void *)(a1 + 32) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    uint64_t v4 = *(NSObject **)(a1 + 32);
    if (v4)
    {
      dispatch_group_enter(v4);
    }
  }
}

void __destroy_helper_block_e8_32c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  int v2 = *(NSObject **)(a1 + 32);
  if (v2)
  {
    dispatch_group_leave(v2);
    uint64_t v3 = *(NSObject **)(a1 + 32);
    if (v3)
    {
      dispatch_release(v3);
    }
  }
}

void coex::ARICommandDriver::registerWWANStateIndication_sync(coex::ARICommandDriver *this)
{
  int v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v7[0]) = 0;
    _os_log_impl(&dword_235DB9000, v2, OS_LOG_TYPE_DEFAULT, "#I Request to register for WWAN state indication", (uint8_t *)v7, 2u);
  }
  uint64_t v3 = (std::__shared_weak_count *)operator new(0x20uLL);
  v3->__shared_owners_ = 0;
  p_uint64_t shared_owners = &v3->__shared_owners_;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93EB48;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)this;
  v7[0] = (void *)MEMORY[0x263EF8330];
  v7[1] = (void *)1174405120;
  uint64_t v7[2] = ___ZN3ice6detail12wrapCallbackIZN4coex16ARICommandDriver32registerWWANStateIndication_syncEvE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  v7[3] = &__block_descriptor_tmp_66_1;
  v7[4] = &v3[1];
  CFMutableDictionaryRef v8 = v3;
  atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 0x40000000;
  xpc_object_t aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_6;
  aBlock[3] = &unk_264C7DD00;
  void aBlock[4] = v7;
  long long v5 = _Block_copy(aBlock);
  CFTypeRef v6 = v8;
  if (!v8 || atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_6:
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  v7[0] = v5;
  ice::Client::regIndicationInternal();
  if (v7[0]) {
    _Block_release(v7[0]);
  }
}

void sub_235E17D00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  _Unwind_Resume(exception_object);
}

void *coex::ARICommandDriver::setIndications_sync(coex::CommandDriver::Callback)::$_0::~$_0(void *a1)
{
  int v2 = a1[3];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = (const void *)a1[2];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

uint64_t ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get(uint64_t a1)
{
  return *(void *)a1;
}

void coex::ARICommandDriver::sendStateUpdate_sync(uint64_t a1, const void **a2, int a3)
{
  uint64_t v79 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a2;
  if (*a2) {
    uint64_t v4 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  }
  else {
    uint64_t v4 = 0;
  }
  if (!v4) {
    return;
  }
  CFMutableDictionaryRef v8 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109378;
    *(_DWORD *)&uint8_t buf[4] = a3;
    *(_WORD *)&uint8_t buf[8] = 2112;
    *(void *)&buf[10] = v3;
    _os_log_impl(&dword_235DB9000, v8, OS_LOG_TYPE_DEFAULT, "#I Update for SubId=%d -> %@", buf, 0x12u);
    uint64_t v3 = *a2;
  }
  if (v3)
  {
    CFRetain(v3);
    uint64_t v9 = *(void *)(a1 + 152);
    CFTypeRef v43 = v3;
    CFRetain(v3);
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 152);
    CFTypeRef v43 = 0;
  }
  int v52 = a3;
  uint64_t v50 = 0;
  long long v51 = 0;
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v64 = v10;
  long long v65 = v10;
  long long v62 = v10;
  long long v63 = v10;
  long long v60 = v10;
  long long v61 = v10;
  long long v58 = v10;
  long long v59 = v10;
  *(_OWORD *)long long buf = v10;
  *(_OWORD *)&uint8_t buf[16] = v10;
  uint64_t v11 = *(pthread_mutex_t **)(v9 + 24);
  __p[0] = (void *)10;
  __p[1] = buf;
  v67[0] = 0;
  v67[1] = v11;
  pthread_mutex_lock(v11);
  unint64_t v12 = *(atomic_uint **)(v9 + 8);
  if (!v12)
  {
    CFTypeID v14 = *(uint64_t ***)v9;
    goto LABEL_22;
  }
  unsigned int explicit = atomic_load_explicit(v12 + 2, memory_order_acquire);
  CFTypeID v14 = *(uint64_t ***)v9;
  if (explicit == 1)
  {
    uint64_t v15 = *v14;
    uint64_t v16 = *(void *)(v9 + 16);
    if ((uint64_t *)v16 == *v14)
    {
      uint64_t v16 = v15[1];
      *(void *)&long long v53 = v16;
      if (v15 == (uint64_t *)v16)
      {
LABEL_19:
        *(void *)(v9 + 16) = v16;
        goto LABEL_20;
      }
    }
    else
    {
      *(void *)&long long v53 = *(void *)(v9 + 16);
    }
    uint64_t v17 = *(void *)(v16 + 16);
    if (*(unsigned char *)(v17 + 24))
    {
      uint64_t v16 = *(void *)(v16 + 8);
    }
    else
    {
      uint64_t v16 = boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>>::erase(v15, (int *)(v17 + 64), (uint64_t **)&v53);
      CFTypeID v14 = *(uint64_t ***)v9;
    }
    goto LABEL_19;
  }
LABEL_20:
  unint64_t v12 = *(atomic_uint **)(v9 + 8);
  if (v12) {
    atomic_fetch_add_explicit(v12 + 2, 1u, memory_order_relaxed);
  }
LABEL_22:
  unsigned int v18 = v51;
  uint64_t v50 = v14;
  long long v51 = v12;
  if (v18)
  {
    if (atomic_fetch_add(v18 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v18 + 16))(v18);
      if (atomic_fetch_add(v18 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v18 + 24))(v18);
      }
    }
  }
  pthread_mutex_unlock(v67[1]);
  long long v19 = (char *)__p[1];
  if (__p[1])
  {
    if ((uint64_t)&v67[0][-1].__opaque[55] >= 0)
    {
      uint64_t v20 = (char *)__p[1] + 16 * (uint64_t)v67[0];
      do
      {
        uint64_t v21 = (atomic_uint *)*((void *)v20 - 1);
        if (v21)
        {
          if (atomic_fetch_add(v21 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v21 + 16))(v21);
            if (atomic_fetch_add(v21 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v21 + 24))(v21);
            }
          }
        }
        v20 -= 16;
      }
      while (v20 > v19);
    }
    if (__p[0] >= (void *)0xB) {
      operator delete(__p[1]);
    }
  }
  *(void *)&long long v22 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v22 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v69 = v22;
  long long v70 = v22;
  *(_OWORD *)CFTypeID v67 = v22;
  long long v68 = v22;
  long long v65 = v22;
  *(_OWORD *)long long __p = v22;
  long long v63 = v22;
  long long v64 = v22;
  long long v61 = v22;
  long long v62 = v22;
  long long v59 = v22;
  long long v60 = v22;
  *(_OWORD *)&uint8_t buf[16] = v22;
  long long v58 = v22;
  *(_OWORD *)long long buf = v22;
  buf[0] = 0;
  unint64_t v71 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v72 = 10;
  uint64_t v73 = &buf[8];
  uint64_t v74 = 0;
  unint64_t v75 = &v43;
  unint64_t v76 = &v52;
  uint64_t v77 = 0;
  uint64_t v78 = 0;
  __int16 v23 = v50;
  uint64_t v24 = (uint64_t)*v50;
  long long v47 = buf;
  uint64_t v48 = v9;
  uint64_t v49 = v24;
  *(void *)&long long v45 = *(void *)(v24 + 8);
  *((void *)&v45 + 1) = v24;
  *(void *)&long long v46 = buf;
  *((void *)&v46 + 1) = v24;
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>::lock_next_callable(&v45);
  v44[0] = *v23;
  v44[1] = v44[0];
  xpc_object_t v44[2] = buf;
  v44[3] = v44[0];
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>::lock_next_callable(v44);
  long long v53 = v45;
  long long v54 = v46;
  uint64_t v25 = v44[0];
  uint64_t v26 = v45;
  if ((void)v45 == v44[0])
  {
    if (HIDWORD(v77) <= v77) {
      goto LABEL_64;
    }
  }
  else
  {
    uint64_t v27 = v54;
    if (!*(unsigned char *)v54)
    {
      uint64_t v28 = *(void *)(*(void *)(v45 + 16) + 32);
      long long v29 = *(CFTypeRef **)(v54 + 272);
      CFTypeRef v30 = *v29;
      if (*v29) {
        CFRetain(*v29);
      }
      uint64_t v31 = *(void *)(v28 + 24);
      if (!v31)
      {
        std::runtime_error::runtime_error(&v56, "call to empty boost::function");
        v56.__vftable = (std::runtime_error_vtbl *)&unk_26E93D570;
        boost::throw_exception<boost::bad_function_call>(&v56);
      }
      uint64_t v32 = **(unsigned int **)(v27 + 280);
      long long v33 = *(void (**)(uint64_t, CFTypeRef *, uint64_t))((v31 & 0xFFFFFFFFFFFFFFFELL) + 8);
      CFTypeRef cf = v30;
      v33(v28 + 32, &cf, v32);
      if (cf) {
        CFRelease(cf);
      }
      if (!*(unsigned char *)v27) {
        *(unsigned char *)uint64_t v27 = 1;
      }
    }
    *(void *)&long long v53 = *(void *)(v26 + 8);
    boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>::lock_next_callable(&v53);
    uint64_t v34 = v54;
    if (*(unsigned char *)v54) {
      *(unsigned char *)long long v54 = 0;
    }
    for (uint64_t i = v53; (void)v53 != v25; uint64_t i = v53)
    {
      uint64_t v36 = *(void *)(*(void *)(i + 16) + 32);
      uint64_t v37 = *(CFTypeRef **)(v34 + 272);
      CFTypeRef v38 = *v37;
      if (*v37) {
        CFRetain(*v37);
      }
      uint64_t v39 = *(void *)(v36 + 24);
      if (!v39)
      {
        std::runtime_error::runtime_error(&v56, "call to empty boost::function");
        v56.__vftable = (std::runtime_error_vtbl *)&unk_26E93D570;
        boost::throw_exception<boost::bad_function_call>(&v56);
      }
      uint64_t v40 = **(unsigned int **)(v34 + 280);
      CFTypeID v41 = *(void (**)(uint64_t, CFTypeRef *, uint64_t))((v39 & 0xFFFFFFFFFFFFFFFELL) + 8);
      CFTypeRef cf = v38;
      v41(v36 + 32, &cf, v40);
      if (cf) {
        CFRelease(cf);
      }
      if (!*(unsigned char *)v34) {
        *(unsigned char *)uint64_t v34 = 1;
      }
      *(void *)&long long v53 = *(void *)(i + 8);
      boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>::lock_next_callable(&v53);
      uint64_t v34 = v54;
      if (*(unsigned char *)v54) {
        *(unsigned char *)long long v54 = 0;
      }
    }
    if (*((_DWORD *)v47 + 73) <= *((_DWORD *)v47 + 72)) {
      goto LABEL_64;
    }
  }
  boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::force_cleanup_connections(v48, v49);
LABEL_64:
  boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>>::~slot_call_iterator_cache((uint64_t)buf);
  uint64_t v42 = v51;
  if (v51)
  {
    if (atomic_fetch_add(v51 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v42 + 16))(v42);
      if (atomic_fetch_add(v42 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v42 + 24))(v42);
      }
    }
  }
  if (v43) {
    CFRelease(v43);
  }
  if (v3) {
    CFRelease(v3);
  }
}

void sub_235E18474(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_235E18484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,std::runtime_error a31)
{
  std::runtime_error::~runtime_error(&a31);
  if (v31) {
    CFRelease(v31);
  }
  if (a2 != 2)
  {
    boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(&v36);
    boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>>::~slot_call_iterator_cache((uint64_t)&v38);
    boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&v37);
    ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&v35);
    ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&v34);
    _Unwind_Resume(a1);
  }
  __cxa_begin_catch(a1);
  boost::signals2::detail::connection_body_base::disconnect(*(boost::signals2::detail::connection_body_base **)(a25 + 16));
  __cxa_rethrow();
}

void sub_235E18510(_Unwind_Exception *a1, int a2)
{
  __cxa_end_catch();
  if (a2 != 2)
  {
    boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(&v6);
    boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>>::~slot_call_iterator_cache((uint64_t)&v8);
    boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&v7);
    ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&v5);
    ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&v4);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x235E184E0);
}

void sub_235E18554(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,unint64_t a53,char *__p,uint64_t a55)
{
  if (__p)
  {
    if (a55 - 1 >= 0)
    {
      uint64_t v55 = &__p[16 * a55];
      do
      {
        std::runtime_error v56 = (atomic_uint *)*((void *)v55 - 1);
        if (v56)
        {
          if (atomic_fetch_add(v56 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v56 + 16))(v56);
            if (atomic_fetch_add(v56 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v56 + 24))(v56);
            }
          }
        }
        v55 -= 16;
      }
      while (v55 > __p);
    }
    if (a53 >= 0xB) {
      operator delete(__p);
    }
  }
  JUMPOUT(0x235E1864CLL);
}

void sub_235E18628(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x235E18664);
}

const void **ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(const void **a1)
{
  int v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef(const void **a1)
{
  int v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get(uint64_t a1)
{
  return *(void *)a1;
}

const void **ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef(const void **a1)
{
  int v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void *coex::ARICommandDriver::setPolicy_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0::~$_0(void *a1)
{
  int v2 = (const void *)a1[5];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = a1[4];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (const void *)a1[3];
  if (v4) {
    _Block_release(v4);
  }
  long long v5 = (std::__shared_weak_count *)a1[1];
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

uint64_t coex::ARICommandDriver::setGPSState_sync(void *a1, int a2, const void **a3)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v6 = a1[5];
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a2;
    _os_log_impl(&dword_235DB9000, v6, OS_LOG_TYPE_DEFAULT, "#I GPS Active: %d", buf, 8u);
  }
  unint64_t v38 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v36 = v7;
  long long v37 = v7;
  *(_OWORD *)long long buf = v7;
  long long v35 = v7;
  AriSdk::ARI_CsiIceGpsStateReq_SDK::ARI_CsiIceGpsStateReq_SDK((AriSdk::ARI_CsiIceGpsStateReq_SDK *)buf);
  uint64_t v8 = operator new(4uLL);
  *uint64_t v8 = a2;
  uint64_t v9 = (void *)v38;
  unint64_t v38 = (unint64_t)v8;
  if (v9) {
    operator delete(v9);
  }
  long long v10 = (std::__shared_weak_count *)a1[10];
  if (!v10 || (uint64_t v11 = (std::__shared_weak_count_vtbl *)a1[9], (v12 = std::__shared_weak_count::lock(v10)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  unint64_t v13 = v12;
  p_shared_weak_owners = &v12->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v15 = a1[24];
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v16 = (std::__shared_weak_count_vtbl *)*a3;
  if (v16) {
    CFRetain(v16);
  }
  uint64_t v17 = (std::__shared_weak_count *)operator new(0x38uLL);
  v17->__shared_owners_ = 0;
  p_uint64_t shared_owners = &v17->__shared_owners_;
  v17->__shared_weak_owners_ = 0;
  v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93EDC8;
  v17[1].__vftable = v11;
  v17[1].__shared_owners_ = (uint64_t)v13;
  v17[1].__shared_weak_owners_ = (uint64_t)a1;
  v17[2].__vftable = v16;
  uint64_t v27 = MEMORY[0x263EF8330];
  uint64_t v28 = 1174405120;
  long long v29 = ___ZN3ice6detail12wrapCallbackIZN4coex16ARICommandDriver16setGPSState_syncEbN3ctu2cf11CFSharedRefIK14__CFDictionaryEEE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  CFTypeRef v30 = &__block_descriptor_tmp_89;
  uint64_t v31 = v17 + 1;
  uint64_t v32 = v17;
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlock[0] = (const void *)MEMORY[0x263EF8330];
  aBlock[1] = (const void *)0x40000000;
  xpc_object_t aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_6;
  aBlock[3] = &unk_264C7DD00;
  void aBlock[4] = &v27;
  long long v19 = _Block_copy(aBlock);
  uint64_t v20 = v32;
  if (!v32 || atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_14:
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_15:
  *(void *)&long long v21 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v25[0] = v21;
  v25[1] = v21;
  unint64_t v26 = 0xAAAAAAAAAAAAAAAALL;
  long long v22 = *(std::__shared_weak_count **)(v15 + 16);
  uint64_t v27 = *(void *)(v15 + 8);
  if (!v22)
  {
    uint64_t v28 = 0;
LABEL_27:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v28 = (uint64_t)std::__shared_weak_count::lock(v22);
  if (!v28) {
    goto LABEL_27;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  __int16 v23 = (std::__shared_weak_count *)v28;
  if (v28 && !atomic_fetch_add((atomic_ullong *volatile)(v28 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  aBlock[0] = v19;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0]) {
    _Block_release(aBlock[0]);
  }
  MEMORY[0x237DF50B0](v25);
  std::__shared_weak_count::__release_weak(v13);
  return MEMORY[0x237DF56A0](buf);
}

void sub_235E18B50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *aBlock)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t coex::ARICommandDriver::setGPSState_sync(BOOL,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0::~$_0(uint64_t a1)
{
  int v2 = *(const void **)(a1 + 24);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void *coex::ARICommandDriver::setWiFiStatus_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::CommandDriver::Callback)::$_0::~$_0(void *a1)
{
  int v2 = (const void *)a1[5];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = a1[4];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (const void *)a1[3];
  if (v4) {
    _Block_release(v4);
  }
  long long v5 = (std::__shared_weak_count *)a1[1];
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

void *coex::ARICommandDriver::setLAAConfig_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0::~$_0(void *a1)
{
  int v2 = (const void *)a1[5];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = a1[4];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (const void *)a1[3];
  if (v4) {
    _Block_release(v4);
  }
  long long v5 = (std::__shared_weak_count *)a1[1];
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

void *coex::ARICommandDriver::setFCMBCMAntennaMode_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::CommandDriver::Callback)::$_0::~$_0(void *a1)
{
  int v2 = (const void *)a1[5];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = a1[4];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (const void *)a1[3];
  if (v4) {
    _Block_release(v4);
  }
  long long v5 = (std::__shared_weak_count *)a1[1];
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

void *coex::ARICommandDriver::setLinkQualityMode_sync(ctu::cf::CFSharedRef<__CFDictionary const>,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0::~$_0(void *a1)
{
  int v2 = a1[4];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = (const void *)a1[3];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void coex::ARICommandDriver::convertScanFrequencies_sync(uint64_t a1@<X0>, CFArrayRef *a2@<X1>, _OWORD *a3@<X8>)
{
  long long v5 = a3;
  uint64_t v19 = *MEMORY[0x263EF8340];
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  unint64_t Count = CFArrayGetCount(*a2);
  uint64_t v7 = Count;
  if (Count >= 0x11)
  {
    uint64_t v8 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134218240;
      *(void *)&uint8_t buf[4] = v7;
      *(_WORD *)&unsigned char buf[12] = 2048;
      uint64_t v7 = 16;
      *(void *)&buf[14] = 16;
      _os_log_error_impl(&dword_235DB9000, v8, OS_LOG_TYPE_ERROR, "Source bands is too big for ScanFreqConfig struct (%zu) vs max (%zu).  Truncating...", buf, 0x16u);
    }
    else
    {
      uint64_t v7 = 16;
    }
    goto LABEL_5;
  }
  if (Count)
  {
LABEL_5:
    CFIndex v9 = 0;
    CFStringRef v10 = (const __CFString *)*MEMORY[0x263F8B630];
    CFStringRef v11 = (const __CFString *)*MEMORY[0x263F8B590];
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*a2, v9);
      unint64_t v13 = ValueAtIndex;
      if (!ValueAtIndex) {
        break;
      }
      CFTypeID v14 = CFGetTypeID(ValueAtIndex);
      if (v14 != CFDictionaryGetTypeID()) {
        break;
      }
      CFRetain(v13);
      CFRetain(v13);
      if (v13) {
        uint64_t v15 = (uint64_t)ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
      }
      else {
        uint64_t v15 = 0;
      }
      if (!v15) {
        goto LABEL_15;
      }
      memset(buf, 170, 16);
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)buf, (const __CFDictionary *)v13);
      int Int = (unsigned __int16)ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)buf, v10);
      uint64_t v17 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)buf, v11);
      MEMORY[0x237DF4EE0](buf);
      uint64_t v15 = 1;
LABEL_16:
      *(_DWORD *)long long v5 = v15 | (Int << 16);
      *((_WORD *)v5 + 2) = ((v17 << 32) | (unint64_t)(v15 << 40)) >> 32;
      if (v13)
      {
        CFRelease(v13);
        CFRelease(v13);
      }
      ++v9;
      long long v5 = (_OWORD *)((char *)v5 + 6);
      if (v7 == v9) {
        return;
      }
    }
    unint64_t v13 = 0;
    uint64_t v15 = 0;
LABEL_15:
    uint64_t v17 = 0;
    int Int = 0;
    goto LABEL_16;
  }
}

void sub_235E18FF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *coex::ARICommandDriver::setScanFreqBandFilter_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0::~$_0(void *a1)
{
  int v2 = a1[4];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = (const void *)a1[3];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void *coex::ARICommandDriver::setRC1Duration_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0::~$_0(void *a1)
{
  int v2 = a1[3];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = (const void *)a1[2];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

uint64_t ctu::Loggable<coex::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t a1)
{
  return MEMORY[0x270F97428](a1 + 8);
}

size_t ctu::Loggable<coex::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(coex::CommandDriver *a1@<X0>, void *a2@<X8>)
{
  Name = (const char *)coex::CommandDriver::getName(a1);
  size_t result = strlen(Name);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a2 = 0;
      return result;
    }
  }
  size_t result = (size_t)memmove(a2, Name, v5);
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<coex::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return MEMORY[0x270F978E0](a1 + 8);
}

void *boost::signals2::signal<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::~signal(void *a1)
{
  *a1 = &unk_26E93E800;
  int v2 = (atomic_uint *)a1[2];
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

void *boost::signals2::signal<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::~signal(void *a1)
{
  *a1 = &unk_26E93E870;
  int v2 = (atomic_uint *)a1[2];
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

void boost::signals2::signal<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::~signal(void *__p)
{
  *long long __p = &unk_26E93E800;
  int v2 = (atomic_uint *)__p[2];
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }

  operator delete(__p);
}

uint64_t boost::signals2::signal<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::lock_pimpl@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 16);
  *a2 = *(void *)(result + 8);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 8), 1u, memory_order_relaxed);
  }
  return result;
}

void boost::signals2::signal<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::~signal(void *__p)
{
  *long long __p = &unk_26E93E870;
  uint64_t v2 = (atomic_uint *)__p[2];
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }

  operator delete(__p);
}

uint64_t boost::signals2::signal<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::lock_pimpl@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 16);
  *a2 = *(void *)(result + 8);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 8), 1u, memory_order_relaxed);
  }
  return result;
}

void *ctu::Loggable<coex::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_26E93E8E0;
  MEMORY[0x237DF4D50](a1 + 1);
  return a1;
}

void ctu::Loggable<coex::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_26E93E8E0;
  MEMORY[0x237DF4D50](a1 + 1);

  operator delete(a1);
}

void ___ZNK4coex13CommandDriver8CallbackclEN3ctu2cf11CFSharedRefI9__CFErrorEENS4_IK14__CFDictionaryEE_block_invoke(uint64_t a1)
{
}

void ctu::Loggable<coex::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  if (*(void *)(a1 + 56))
  {
    if (!*(void *)(a1 + 80) || (uint64_t v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_235E196F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_235E19714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<coex::ARICommandDriver>::shared_ptr[abi:ne180100]<coex::ARICommandDriver,std::shared_ptr<coex::ARICommandDriver> ctu::SharedSynchronizable<coex::CommandDriver>::make_shared_ptr<coex::ARICommandDriver>(coex::ARICommandDriver*)::{lambda(coex::ARICommandDriver*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_uint64_t shared_owners = &v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93E950;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2) {
    return a1;
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ == -1)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(a2 + 72) = a2;
      *(void *)(a2 + 80) = v4;
      std::__shared_weak_count::__release_weak(v6);
      if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_8;
      }
    }
    return a1;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 72) = a2;
  *(void *)(a2 + 80) = v4;
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
LABEL_8:
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_235E19840(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<coex::ARICommandDriver> ctu::SharedSynchronizable<coex::CommandDriver>::make_shared_ptr<coex::ARICommandDriver>(coex::ARICommandDriver*)::{lambda(coex::ARICommandDriver*)#1}::operator() const(coex::ARICommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_235E19868(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<coex::ARICommandDriver *,std::shared_ptr<coex::ARICommandDriver> ctu::SharedSynchronizable<coex::CommandDriver>::make_shared_ptr<coex::ARICommandDriver>(coex::ARICommandDriver*)::{lambda(coex::ARICommandDriver *)#1},std::allocator<coex::ARICommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<coex::ARICommandDriver *,std::shared_ptr<coex::ARICommandDriver> ctu::SharedSynchronizable<coex::CommandDriver>::make_shared_ptr<coex::ARICommandDriver>(coex::ARICommandDriver*)::{lambda(coex::ARICommandDriver *)#1},std::allocator<coex::ARICommandDriver>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<coex::ARICommandDriver *,std::shared_ptr<coex::ARICommandDriver> ctu::SharedSynchronizable<coex::CommandDriver>::make_shared_ptr<coex::ARICommandDriver>(coex::ARICommandDriver*)::{lambda(coex::ARICommandDriver *)#1},std::allocator<coex::ARICommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN4coex13CommandDriverEE15make_shared_ptrINS1_16ARICommandDriverEEENSt3"
                     "__110shared_ptrIT_EEPS8_EUlPS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN4coex13CommandDriverEE15make_shared_ptrINS1_16ARICommandDr"
                                "iverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN4coex13CommandDriverEE15make_shared_ptrINS1_16ARICommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN4coex13CommandDriverEE15make_shared_ptrINS1_16ARICommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t std::shared_ptr<coex::ARICommandDriver> ctu::SharedSynchronizable<coex::CommandDriver>::make_shared_ptr<coex::ARICommandDriver>(coex::ARICommandDriver*)::{lambda(coex::ARICommandDriver*)#1}::operator() const(coex::ARICommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t *boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(uint64_t *a1)
{
  if (*(_DWORD *)(*a1 + 280) > *(_DWORD *)(*a1 + 276)) {
    boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::force_cleanup_connections(a1[1], a1[2]);
  }
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::invocation_state>::~shared_ptr(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)(a1 + 8);
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

uint64_t boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>>::erase(uint64_t *a1, int *a2, uint64_t **a3)
{
  uint64_t v7 = (uint64_t **)(a1 + 4);
  uint64_t v6 = a1[4];
  if (!v6)
  {
    __int16 v23 = (uint64_t *)a1[10];
    if (v23 != *a3) {
      goto LABEL_80;
    }
    uint64_t v24 = (uint64_t *)v23[1];
    uint64_t v25 = (uint64_t **)(a1 + 4);
    CFStringRef v10 = a1 + 4;
    if (v24 != a1) {
      goto LABEL_76;
    }
    goto LABEL_55;
  }
  int v8 = *a2;
  int v9 = a2[2];
  CFStringRef v10 = a1 + 4;
  uint64_t v11 = a1[4];
  if (*a2 == 1)
  {
    do
    {
      while (1)
      {
        int v17 = *(_DWORD *)(v11 + 32);
        BOOL v18 = v17 < 1;
        if (v17 == 1) {
          BOOL v18 = *(_DWORD *)(v11 + 40) < v9;
        }
        if (!v18) {
          break;
        }
        uint64_t v11 = *(void *)(v11 + 8);
        if (!v11) {
          goto LABEL_19;
        }
      }
      CFStringRef v10 = (uint64_t *)v11;
      uint64_t v11 = *(void *)v11;
    }
    while (v11);
  }
  else
  {
    do
    {
      int v12 = *(_DWORD *)(v11 + 32);
      BOOL v13 = v12 == v8;
      BOOL v14 = v12 < v8;
      if (v12 >= v8) {
        uint64_t v15 = (uint64_t *)v11;
      }
      else {
        uint64_t v15 = (uint64_t *)(v11 + 8);
      }
      if (v14) {
        uint64_t v16 = v10;
      }
      else {
        uint64_t v16 = (uint64_t *)v11;
      }
      if (v13)
      {
        uint64_t v15 = (uint64_t *)v11;
        CFStringRef v10 = (uint64_t *)v11;
      }
      else
      {
        CFStringRef v10 = v16;
      }
      uint64_t v11 = *v15;
    }
    while (*v15);
  }
LABEL_19:
  uint64_t v19 = (uint64_t *)v10[6];
  if (v19 != *a3) {
    goto LABEL_80;
  }
  uint64_t v20 = (uint64_t **)(a1 + 4);
  if (v8 == 1)
  {
    long long v21 = (uint64_t *)a1[4];
    while (1)
    {
      int v22 = *((_DWORD *)v21 + 8);
      if (v22 == 1)
      {
        if (v9 < *((_DWORD *)v21 + 10)) {
          goto LABEL_27;
        }
LABEL_22:
        long long v21 = (uint64_t *)v21[1];
        if (!v21) {
          goto LABEL_42;
        }
      }
      else
      {
        if (v22 <= 1) {
          goto LABEL_22;
        }
LABEL_27:
        uint64_t v20 = (uint64_t **)v21;
        long long v21 = (uint64_t *)*v21;
        if (!v21) {
          goto LABEL_42;
        }
      }
    }
  }
  unint64_t v26 = (uint64_t **)a1[4];
  do
  {
    int v27 = *((_DWORD *)v26 + 8);
    uint64_t v28 = (uint64_t ***)(v26 + 1);
    BOOL v29 = v8 == v27;
    BOOL v30 = v8 < v27;
    if (v8 >= v27) {
      uint64_t v31 = (uint64_t ***)(v26 + 1);
    }
    else {
      uint64_t v31 = (uint64_t ***)v26;
    }
    if (!v30) {
      unint64_t v26 = v20;
    }
    if (v29) {
      uint64_t v31 = v28;
    }
    else {
      uint64_t v20 = v26;
    }
    unint64_t v26 = *v31;
  }
  while (*v31);
LABEL_42:
  uint64_t v24 = (uint64_t *)v19[1];
  uint64_t v32 = a1;
  if (v20 != v7) {
    uint64_t v32 = v20[6];
  }
  if (v24 == v32)
  {
LABEL_55:
    long long v37 = (uint64_t *)v10[1];
    if (v37)
    {
      do
      {
        unint64_t v38 = v37;
        long long v37 = (uint64_t *)*v37;
      }
      while (v37);
    }
    else
    {
      CFTypeID v41 = v10;
      do
      {
        unint64_t v38 = (uint64_t *)v41[2];
        BOOL v13 = *v38 == (void)v41;
        CFTypeID v41 = v38;
      }
      while (!v13);
    }
    if ((uint64_t *)a1[3] == v10) {
      a1[3] = (uint64_t)v38;
    }
    --a1[5];
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v6, v10);
    operator delete(v10);
    goto LABEL_80;
  }
  int v33 = *a2;
  if (*a2 == 1)
  {
    int v34 = a2[2];
    while (1)
    {
      uint64_t v25 = (uint64_t **)v6;
      int v35 = *(_DWORD *)(v6 + 32);
      if (v35 == 1)
      {
        int v36 = *(_DWORD *)(v6 + 40);
        if (v36 <= v34)
        {
          if (v36 >= v34)
          {
            *(void *)(v6 + 48) = v24;
            goto LABEL_80;
          }
          goto LABEL_53;
        }
LABEL_47:
        uint64_t v6 = *(void *)v6;
        if (!*v25)
        {
          uint64_t v7 = v25;
          goto LABEL_76;
        }
      }
      else
      {
        if (v35 > 1) {
          goto LABEL_47;
        }
LABEL_53:
        uint64_t v6 = *(void *)(v6 + 8);
        if (!v6)
        {
          uint64_t v7 = v25 + 1;
          goto LABEL_76;
        }
      }
    }
  }
  int v39 = *(_DWORD *)(v6 + 32);
  if (v33 == v39) {
    goto LABEL_79;
  }
  while (v33 >= v39)
  {
    if (v39 >= v33) {
      goto LABEL_79;
    }
    uint64_t v40 = *(void *)(v6 + 8);
    if (!v40)
    {
      uint64_t v7 = (uint64_t **)(v6 + 8);
      goto LABEL_75;
    }
LABEL_61:
    int v39 = *(_DWORD *)(v40 + 32);
    uint64_t v6 = v40;
    if (v33 == v39)
    {
      *(void *)(v40 + 48) = v24;
      goto LABEL_80;
    }
  }
  uint64_t v40 = *(void *)v6;
  if (*(void *)v6) {
    goto LABEL_61;
  }
  uint64_t v7 = (uint64_t **)v6;
LABEL_75:
  uint64_t v25 = (uint64_t **)v6;
LABEL_76:
  uint64_t v6 = (uint64_t)operator new(0x38uLL);
  *(void *)(v6 + 32) = *(void *)a2;
  *(_DWORD *)(v6 + 40) = a2[2];
  *(void *)(v6 + 48) = 0;
  *(void *)uint64_t v6 = 0;
  *(void *)(v6 + 8) = 0;
  *(void *)(v6 + 16) = v25;
  void *v7 = (uint64_t *)v6;
  uint64_t v42 = *(void *)a1[3];
  CFTypeRef v43 = (uint64_t *)v6;
  if (v42)
  {
    a1[3] = v42;
    CFTypeRef v43 = *v7;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)a1[4], v43);
  ++a1[5];
LABEL_79:
  *(void *)(v6 + 48) = v24;
LABEL_80:
  long long v44 = *a3;
  uint64_t v45 = **a3;
  uint64_t v46 = (*a3)[1];
  *(void *)(v45 + 8) = v46;
  *(void *)v44[1] = v45;
  --a1[2];
  long long v47 = (atomic_uint *)v44[3];
  if (v47)
  {
    if (atomic_fetch_add(v47 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v47 + 16))(v47);
      if (atomic_fetch_add(v47 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v47 + 24))(v47);
      }
    }
  }
  operator delete(v44);
  return v46;
}

void boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>::lock_next_callable(void *a1)
{
  v44[3] = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  if (*a1 == a1[3]) {
    return;
  }
  if (v1 == a1[1]) {
    goto LABEL_51;
  }
  while (1)
  {
    boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::pop_back_n((void *)(a1[2] + 8), *(void *)(a1[2] + 264));
    *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v42 = v3;
    long long v43 = v3;
    long long v40 = v3;
    long long v41 = v3;
    long long v38 = v3;
    long long v39 = v3;
    long long v36 = v3;
    long long v37 = v3;
    long long v34 = v3;
    long long v35 = v3;
    long long v32 = v3;
    long long v33 = v3;
    uint64_t v4 = *(void *)(*a1 + 16);
    *(void *)&long long v42 = 10;
    *((void *)&v42 + 1) = &v32;
    *(void *)&long long v43 = 0;
    *((void *)&v43 + 1) = v4;
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
    uint64_t v5 = *a1;
    uint64_t v6 = *(void *)(*a1 + 16);
    uint64_t v7 = a1[2];
    int v8 = *(uint64_t **)(v6 + 32);
    if (v8)
    {
      uint64_t v9 = *v8;
      if (*v8 != v8[1])
      {
        CFStringRef v10 = (void *)(v7 + 8);
        while (1)
        {
          memset(v44, 170, 24);
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::apply_visitor<boost::signals2::detail::lock_weak_ptr_visitor const>(v9, (uint64_t)v44);
          if ((*(_DWORD *)v9 ^ (*(int *)v9 >> 31)) == 2)
          {
            if (!(*(unsigned int (**)(void))(**(void **)(v9 + 8) + 24))(*(void *)(v9 + 8))) {
              goto LABEL_9;
            }
          }
          else
          {
            uint64_t v11 = *(void *)(v9 + 16);
            if (v11 && atomic_load_explicit((atomic_uint *volatile)(v11 + 8), memory_order_acquire))
            {
LABEL_9:
              boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::push_back(v10, (uint64_t)v44);
              char v12 = 0;
              if (LODWORD(v44[0]) == SLODWORD(v44[0]) >> 31) {
                goto LABEL_16;
              }
              goto LABEL_10;
            }
          }
          if (*(unsigned char *)(v6 + 24))
          {
            *(unsigned char *)(v6 + 24) = 0;
            boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>((_DWORD *)v6, &v32);
          }
          char v12 = 1;
          if (LODWORD(v44[0]) == SLODWORD(v44[0]) >> 31)
          {
LABEL_16:
            BOOL v13 = (atomic_uint *)v44[2];
            if (v44[2])
            {
              if (atomic_fetch_add((atomic_uint *volatile)(v44[2] + 8), 0xFFFFFFFF) == 1)
              {
                (*(void (**)(atomic_uint *))(*(void *)v13 + 16))(v13);
                if (atomic_fetch_add(v13 + 3, 0xFFFFFFFF) == 1) {
                  (*(void (**)(atomic_uint *))(*(void *)v13 + 24))(v13);
                }
              }
            }
            goto LABEL_20;
          }
LABEL_10:
          if (v44[1]) {
            (*(void (**)(void))(*(void *)v44[1] + 8))(v44[1]);
          }
LABEL_20:
          if ((v12 & 1) == 0)
          {
            v9 += 24;
            if (v9 != *(void *)(*(void *)(v6 + 32) + 8)) {
              continue;
            }
          }
          uint64_t v5 = *a1;
          uint64_t v6 = *(void *)(*a1 + 16);
          uint64_t v7 = a1[2];
          break;
        }
      }
    }
    if (*(unsigned char *)(v6 + 24))
    {
      ++*(_DWORD *)(v7 + 276);
      uint64_t v14 = *(void *)(v6 + 16);
      if (v14)
      {
        if (atomic_load_explicit((atomic_uint *volatile)(v14 + 8), memory_order_acquire))
        {
          int v15 = 1;
          goto LABEL_37;
        }
        uint64_t v7 = a1[2];
        uint64_t v5 = *a1;
      }
      a1[3] = v5;
      if (a1[1] == v5)
      {
        BOOL v18 = *(_DWORD **)(v7 + 288);
        if (v18) {
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v18, &v32);
        }
        int v15 = 0;
        *(void *)(v7 + 288) = 0;
      }
      else
      {
        uint64_t v16 = *(void *)(v5 + 16);
        int v17 = *(_DWORD **)(v7 + 288);
        if (v17) {
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v17, &v32);
        }
        *(void *)(v7 + 288) = v16;
        int v15 = 0;
        if (v16) {
          ++*(_DWORD *)(v16 + 28);
        }
      }
    }
    else
    {
      ++*(_DWORD *)(v7 + 280);
      int v15 = 1;
    }
LABEL_37:
    (*(void (**)(void))(**((void **)&v43 + 1) + 32))(*((void *)&v43 + 1));
    unint64_t v19 = *((void *)&v42 + 1);
    if (*((void *)&v42 + 1))
    {
      if ((uint64_t)v43 - 1 >= 0)
      {
        unint64_t v20 = *((void *)&v42 + 1) + 16 * v43;
        do
        {
          long long v21 = *(atomic_uint **)(v20 - 8);
          if (v21)
          {
            if (atomic_fetch_add(v21 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v21 + 16))(v21);
              if (atomic_fetch_add(v21 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v21 + 24))(v21);
              }
            }
          }
          v20 -= 16;
        }
        while (v20 > v19);
      }
      if ((unint64_t)v42 >= 0xB) {
        operator delete(*((void **)&v42 + 1));
      }
    }
    uint64_t v1 = *a1;
    uint64_t v22 = a1[1];
    if (!v15) {
      break;
    }
    uint64_t v23 = *(void *)(v1 + 8);
    *a1 = v23;
    if (v23 == v22)
    {
      uint64_t v1 = v22;
LABEL_51:
      uint64_t v24 = a1[3];
      if (v24 != v1)
      {
        *(void *)&long long v25 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v25 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v40 = v25;
        long long v41 = v25;
        long long v38 = v25;
        long long v39 = v25;
        long long v36 = v25;
        long long v37 = v25;
        long long v34 = v25;
        long long v35 = v25;
        long long v32 = v25;
        long long v33 = v25;
        uint64_t v26 = *(void *)(v24 + 16);
        *(void *)&long long v42 = 10;
        *((void *)&v42 + 1) = &v32;
        *(void *)&long long v43 = 0;
        *((void *)&v43 + 1) = v26;
        (*(void (**)(uint64_t))(*(void *)v26 + 24))(v26);
        uint64_t v27 = a1[2];
        a1[3] = a1[1];
        uint64_t v28 = *(_DWORD **)(v27 + 288);
        if (v28) {
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v28, &v32);
        }
        *(void *)(v27 + 288) = 0;
        (*(void (**)(void))(**((void **)&v43 + 1) + 32))(*((void *)&v43 + 1));
        unint64_t v29 = *((void *)&v42 + 1);
        if (*((void *)&v42 + 1))
        {
          if ((uint64_t)v43 - 1 >= 0)
          {
            unint64_t v30 = *((void *)&v42 + 1) + 16 * v43;
            do
            {
              uint64_t v31 = *(atomic_uint **)(v30 - 8);
              if (v31)
              {
                if (atomic_fetch_add(v31 + 2, 0xFFFFFFFF) == 1)
                {
                  (*(void (**)(atomic_uint *))(*(void *)v31 + 16))(v31);
                  if (atomic_fetch_add(v31 + 3, 0xFFFFFFFF) == 1) {
                    (*(void (**)(atomic_uint *))(*(void *)v31 + 24))(v31);
                  }
                }
              }
              v30 -= 16;
            }
            while (v30 > v29);
          }
          if ((unint64_t)v42 >= 0xB) {
            operator delete(*((void **)&v42 + 1));
          }
        }
      }
      return;
    }
  }
  if (v1 == v22) {
    goto LABEL_51;
  }
}

void sub_235E1A3B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_235E1A3CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_235E1A5AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)va);
  _Unwind_Resume(a1);
}

void boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::force_cleanup_connections(uint64_t a1, uint64_t a2)
{
  long long v3 = (uint64_t **)a1;
  uint64_t v73 = *MEMORY[0x263EF8340];
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v68[8] = v4;
  v68[9] = v4;
  v68[6] = v4;
  v68[7] = v4;
  v68[4] = v4;
  v68[5] = v4;
  v68[2] = v4;
  v68[3] = v4;
  v68[0] = v4;
  v68[1] = v4;
  uint64_t v5 = *(pthread_mutex_t **)(a1 + 24);
  unint64_t v69 = 10;
  long long __p = v68;
  uint64_t v71 = 0;
  uint64_t v72 = v5;
  pthread_mutex_lock(v5);
  if (**v3 != a2) {
    goto LABEL_94;
  }
  uint64_t v6 = v3[1];
  if (!v6 || atomic_load_explicit((atomic_uint *volatile)v6 + 2, memory_order_acquire) != 1)
  {
    uint64_t v7 = (uint64_t *)operator new(0x20uLL);
    int v8 = *v3;
    uint64_t v9 = **v3;
    CFNumberRef v66 = v7;
    CFStringRef v10 = operator new(0x40uLL);
    uint64_t v11 = v10;
    *CFStringRef v10 = v10;
    v10[1] = v10;
    v10[2] = 0;
    char v12 = *(void **)(v9 + 8);
    if (v12 != (void *)v9)
    {
      uint64_t v13 = 0;
      uint64_t v14 = v10;
      do
      {
        int v15 = operator new(0x20uLL);
        void v15[2] = v12[2];
        uint64_t v16 = v12[3];
        v15[3] = v16;
        if (v16)
        {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v16 + 8), 1u, memory_order_relaxed);
          uint64_t v14 = (void *)*v11;
          uint64_t v13 = v11[2];
        }
        *int v15 = v14;
        v15[1] = v11;
        v14[1] = v15;
        *uint64_t v11 = v15;
        v11[2] = ++v13;
        char v12 = (void *)v12[1];
        uint64_t v14 = v15;
      }
      while (v12 != (void *)v9);
    }
    long long v64 = v3;
    long long v65 = v8;
    v11[3] = 0;
    int v17 = (void **)(v11 + 3);
    _OWORD v11[4] = 0;
    BOOL v18 = v11 + 4;
    void v11[5] = 0;
    *((unsigned char *)v11 + 48) = *(unsigned char *)(v9 + 48);
    v11[3] = v11 + 4;
    unint64_t v19 = *(void **)(v9 + 24);
    unint64_t v20 = (void *)(v9 + 32);
    if (v19 == (void *)(v9 + 32))
    {
LABEL_10:
      *((unsigned char *)v11 + 56) = *(unsigned char *)(v9 + 56);
      long long v21 = *(void **)(v9 + 24);
      if (v21 != v20)
      {
        uint64_t v22 = (void *)v11[3];
        uint64_t v23 = v11[1];
        do
        {
          v22[6] = v23;
          uint64_t v24 = v9;
          if (v21 != v20) {
            uint64_t v24 = v21[6];
          }
          long long v25 = (void *)v21[1];
          uint64_t v26 = v25;
          uint64_t v27 = v21;
          if (v25)
          {
            do
            {
              uint64_t v28 = v26;
              uint64_t v26 = (void *)*v26;
            }
            while (v26);
          }
          else
          {
            do
            {
              uint64_t v28 = (void *)v27[2];
              BOOL v29 = *v28 == (void)v27;
              uint64_t v27 = v28;
            }
            while (!v29);
          }
          uint64_t v30 = v9;
          if (v28 != v20) {
            uint64_t v30 = v28[6];
          }
          while (v24 != v30)
          {
            uint64_t v24 = *(void *)(v24 + 8);
            uint64_t v23 = *(void *)(v23 + 8);
          }
          if (v25)
          {
            do
            {
              uint64_t v31 = v25;
              long long v25 = (void *)*v25;
            }
            while (v25);
          }
          else
          {
            do
            {
              uint64_t v31 = (void *)v21[2];
              BOOL v29 = *v31 == (void)v21;
              long long v21 = v31;
            }
            while (!v29);
          }
          long long v32 = (void *)v22[1];
          if (v32)
          {
            do
            {
              long long v33 = v32;
              long long v32 = (void *)*v32;
            }
            while (v32);
          }
          else
          {
            do
            {
              long long v33 = (void *)v22[2];
              BOOL v29 = *v33 == (void)v22;
              uint64_t v22 = v33;
            }
            while (!v29);
          }
          long long v21 = v31;
          uint64_t v22 = v33;
        }
        while (v31 != v20);
      }
      *CFNumberRef v66 = (uint64_t)v11;
      v66[1] = 0;
      long long v53 = operator new(0x18uLL);
      v53[1] = 0x100000001;
      *long long v53 = &unk_26E93EA00;
      v53[2] = v11;
      v66[1] = (uint64_t)v53;
      v66[2] = v65[2];
      uint64_t v54 = v65[3];
      v66[3] = v54;
      long long v3 = v64;
      if (v54) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v54 + 8), 1u, memory_order_relaxed);
      }
      uint64_t v55 = (uint64_t *)operator new(0x18uLL);
      v55[1] = 0x100000001;
      *uint64_t v55 = (uint64_t)&unk_26E93E9A0;
      v55[2] = (uint64_t)v66;
      std::runtime_error v56 = (atomic_uint *)v64[1];
      *long long v64 = v66;
      v64[1] = v55;
      if (v56)
      {
        if (atomic_fetch_add(v56 + 2, 0xFFFFFFFF) == 1)
        {
          (*(void (**)(atomic_uint *))(*(void *)v56 + 16))(v56);
          if (atomic_fetch_add(v56 + 3, 0xFFFFFFFF) == 1) {
            (*(void (**)(atomic_uint *))(*(void *)v56 + 24))(v56);
          }
        }
      }
      goto LABEL_88;
    }
    while (1)
    {
      int v34 = *((_DWORD *)v19 + 8);
      long long v35 = (void *)*v18;
      long long v36 = v11 + 4;
      if (*v17 != v18)
      {
        long long v37 = (void *)*v18;
        long long v38 = v11 + 4;
        if (v35)
        {
          do
          {
            long long v36 = v37;
            long long v37 = (void *)v37[1];
          }
          while (v37);
        }
        else
        {
          do
          {
            long long v36 = (void *)v38[2];
            BOOL v29 = *v36 == (void)v38;
            long long v38 = v36;
          }
          while (v29);
        }
        int v39 = *((_DWORD *)v19 + 10);
        int v40 = *((_DWORD *)v36 + 8);
        if (v40 == v34)
        {
          if (v34 != 1) {
            goto LABEL_55;
          }
          if (*((_DWORD *)v36 + 10) >= v39)
          {
            long long v41 = (void *)*v18;
            long long v42 = v11 + 4;
            long long v43 = v11 + 4;
            if (v35) {
              goto LABEL_59;
            }
LABEL_66:
            long long v47 = operator new(0x38uLL);
            long long v48 = *((_OWORD *)v19 + 2);
            v47[6] = v19[6];
            *((_OWORD *)v47 + 2) = v48;
            void *v47 = 0;
            v47[1] = 0;
            _OWORD v47[2] = v43;
            void *v42 = v47;
            uint64_t v49 = (void *)**v17;
            if (v49)
            {
              *int v17 = v49;
              long long v47 = (void *)*v42;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v11[4], v47);
            ++v11[5];
            goto LABEL_69;
          }
        }
        else if (v40 >= v34)
        {
LABEL_55:
          long long v42 = v11 + 4;
          long long v43 = v11 + 4;
          if (!v35) {
            goto LABEL_66;
          }
          long long v41 = (void *)*v18;
          if (v34 != 1)
          {
            int v44 = *((_DWORD *)v35 + 8);
            long long v43 = (void *)*v18;
            while (v34 != v44)
            {
              if (v34 < v44)
              {
                uint64_t v52 = *v43;
                long long v42 = v43;
                if (!*v43) {
                  goto LABEL_66;
                }
              }
              else
              {
                if (v44 >= v34) {
                  goto LABEL_69;
                }
                uint64_t v52 = v43[1];
                if (!v52) {
                  goto LABEL_65;
                }
              }
              int v44 = *(_DWORD *)(v52 + 32);
              long long v43 = (void *)v52;
            }
            goto LABEL_69;
          }
          while (1)
          {
LABEL_59:
            long long v43 = v41;
            int v45 = *((_DWORD *)v41 + 8);
            if (v45 == 1)
            {
              int v46 = *((_DWORD *)v41 + 10);
              if (v46 > v39) {
                goto LABEL_58;
              }
              if (v46 >= v39) {
                goto LABEL_69;
              }
            }
            else if (v45 > 1)
            {
LABEL_58:
              long long v41 = (void *)*v41;
              long long v42 = v43;
              if (!*v43) {
                goto LABEL_66;
              }
              continue;
            }
            long long v41 = (void *)v41[1];
            if (!v41)
            {
LABEL_65:
              long long v42 = v43 + 1;
              goto LABEL_66;
            }
          }
        }
      }
      if (v35) {
        long long v43 = v36;
      }
      else {
        long long v43 = v11 + 4;
      }
      if (v35) {
        long long v42 = v36 + 1;
      }
      else {
        long long v42 = v11 + 4;
      }
      if (!*v42) {
        goto LABEL_66;
      }
LABEL_69:
      uint64_t v50 = (void *)v19[1];
      if (v50)
      {
        do
        {
          long long v51 = v50;
          uint64_t v50 = (void *)*v50;
        }
        while (v50);
      }
      else
      {
        do
        {
          long long v51 = (void *)v19[2];
          BOOL v29 = *v51 == (void)v19;
          unint64_t v19 = v51;
        }
        while (!v29);
      }
      unint64_t v19 = v51;
      if (v51 == v20) {
        goto LABEL_10;
      }
    }
  }
LABEL_88:
  long long v57 = (uint64_t **)*v3;
  long long v58 = (uint64_t *)**v3;
  long long v59 = (uint64_t *)v58[1];
  CFTypeID v67 = v59;
  if (v58 != v59)
  {
    do
    {
      while (1)
      {
        uint64_t v60 = v59[2];
        if (!*(unsigned char *)(v60 + 24)) {
          break;
        }
        long long v59 = (uint64_t *)v59[1];
        CFTypeID v67 = v59;
        long long v58 = *v57;
        if (v59 == *v57) {
          goto LABEL_93;
        }
      }
      long long v59 = (uint64_t *)boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>>::erase(v58, (int *)(v60 + 64), &v67);
      long long v57 = (uint64_t **)*v3;
      CFTypeID v67 = v59;
      long long v58 = *v57;
    }
    while (v59 != *v57);
  }
LABEL_93:
  v3[2] = v59;
LABEL_94:
  pthread_mutex_unlock(v72);
  long long v61 = (char *)__p;
  if (__p)
  {
    if (v71 - 1 >= 0)
    {
      long long v62 = (char *)__p + 16 * v71;
      do
      {
        long long v63 = (atomic_uint *)*((void *)v62 - 1);
        if (v63)
        {
          if (atomic_fetch_add(v63 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v63 + 16))(v63);
            if (atomic_fetch_add(v63 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v63 + 24))(v63);
            }
          }
        }
        v62 -= 16;
      }
      while (v62 > v61);
    }
    if (v69 >= 0xB) {
      operator delete(__p);
    }
  }
}

void sub_235E1AC60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::invocation_state>::dispose(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = (atomic_uint *)v1[3];
    if (v2)
    {
      if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
        if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
        }
      }
    }
    long long v3 = (atomic_uint *)v1[1];
    if (v3)
    {
      if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
        if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
        }
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::invocation_state>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::invocation_state>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::invocation_state>::get_untyped_deleter()
{
  return 0;
}

uint64_t *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>>::~list(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    long long v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        uint64_t v6 = (atomic_uint *)v3[3];
        if (v6)
        {
          if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
            if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
            }
          }
        }
        operator delete(v3);
        long long v3 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>>>::dispose(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>>>::destroy((void *)v1[4]);
    if (v1[2])
    {
      uint64_t v2 = (void *)*v1;
      long long v3 = (uint64_t *)v1[1];
      uint64_t v4 = *v3;
      *(void *)(v4 + 8) = *(void *)(*v1 + 8);
      *(void *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          uint64_t v5 = (uint64_t *)v3[1];
          uint64_t v6 = (atomic_uint *)v3[3];
          if (v6)
          {
            if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
              if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
              }
            }
          }
          operator delete(v3);
          long long v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>>>::get_untyped_deleter()
{
  return 0;
}

uint64_t boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type>>::~slot_call_iterator_cache(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 288);
  if (v2)
  {
    *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v8[8] = v3;
    v8[9] = v3;
    v8[6] = v3;
    v8[7] = v3;
    _OWORD v8[4] = v3;
    void v8[5] = v3;
    v8[2] = v3;
    v8[3] = v3;
    v8[0] = v3;
    v8[1] = v3;
    unint64_t v9 = 10;
    long long __p = v8;
    uint64_t v11 = 0;
    uint64_t v12 = v2;
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
    boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(*(_DWORD **)(a1 + 288), v8);
    (*(void (**)(uint64_t))(*(void *)v12 + 32))(v12);
    uint64_t v4 = (char *)__p;
    if (__p)
    {
      if (v11 - 1 >= 0)
      {
        uint64_t v5 = (char *)__p + 16 * v11;
        do
        {
          uint64_t v6 = (atomic_uint *)*((void *)v5 - 1);
          if (v6)
          {
            if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
              if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
              }
            }
          }
          v5 -= 16;
        }
        while (v5 > v4);
      }
      if (v9 >= 0xB) {
        operator delete(__p);
      }
    }
  }
  if (*(void *)(a1 + 256)) {
    boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::auto_buffer_destroy((void *)(a1 + 8));
  }
  if (*(unsigned char *)a1) {
    *(unsigned char *)a1 = 0;
  }
  return a1;
}

void sub_235E1B6B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ctu::SharedSynchronizable<coex::CommandDriver>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  long long v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  int v8 = a1[2];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN4coex13CommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_26E93EA58;
  void block[5] = v5;
  uint64_t v12 = v7;
  p_uint64_t shared_owners = &v7->__shared_owners_;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = a2;
  dispatch_async(v8, block);
  CFStringRef v10 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
LABEL_8:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN4coex13CommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c49_ZTSNSt3__110shared_ptrIKN4coex13CommandDriverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c49_ZTSNSt3__110shared_ptrIKN4coex13CommandDriverEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN3ice6detail12wrapCallbackIZN4coex16ARICommandDriver19setIndications_syncENS2_13CommandDriver8CallbackEE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    long long v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      uint64_t v5 = v2[4];
      uint64_t v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        uint64_t v7 = v6;
        if (!*v2)
        {
LABEL_30:
          if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v20[3] = v8;
        long long v21 = v8;
        v20[1] = v8;
        _OWORD v20[2] = v8;
        v20[0] = v8;
        AriSdk::ARI_CsiIdcControlEventRspCb_SDK::ARI_CsiIdcControlEventRspCb_SDK((AriSdk::ARI_CsiIdcControlEventRspCb_SDK *)v20, a2);
        CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        long long __p = operator new(0x19uLL);
        long long v18 = xmmword_235E71940;
        strcpy((char *)__p, "enable coex indications");
        coex::checkError(&cf, (AriSdk::MsgBase *)v20, 1224998912, (uint64_t)&__p);
        if (SHIBYTE(v18) < 0) {
          operator delete(__p);
        }
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
        if (cf) {
          CFStringRef v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          CFStringRef v10 = 0;
        }
        if (!v10)
        {
          if (AriSdk::ARI_CsiIdcControlEventRspCb_SDK::unpack((AriSdk::ARI_CsiIdcControlEventRspCb_SDK *)v20))
          {
            uint64_t v11 = *(NSObject **)(v5 + 40);
            if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
            {
              LOWORD(__p) = 0;
              _os_log_error_impl(&dword_235DB9000, v11, OS_LOG_TYPE_ERROR, "Failed to enable coex indications", (uint8_t *)&__p, 2u);
            }
            long long __p = operator new(0x38uLL);
            long long v18 = xmmword_235E75000;
            strcpy((char *)__p, "Failed to enable coex indications (unpack error)");
            CreateError();
            CFTypeRef v12 = cf;
            CFTypeRef cf = v16;
            CFTypeRef v16 = 0;
            if (!v12) {
              goto LABEL_20;
            }
            goto LABEL_15;
          }
          uint64_t v13 = *(NSObject **)(v5 + 40);
          if (**((_DWORD **)&v21 + 1))
          {
            if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
            {
              LOWORD(__p) = 0;
              _os_log_error_impl(&dword_235DB9000, v13, OS_LOG_TYPE_ERROR, "Failed to enable coex indications", (uint8_t *)&__p, 2u);
            }
            long long __p = operator new(0x38uLL);
            long long v18 = xmmword_235E75000;
            strcpy((char *)__p, "Failed to enable coex indications (result error)");
            CreateError();
            CFTypeRef v12 = cf;
            CFTypeRef cf = v16;
            CFTypeRef v16 = 0;
            if (!v12) {
              goto LABEL_20;
            }
LABEL_15:
            CFRelease(v12);
LABEL_20:
            if (SHIBYTE(v18) < 0) {
              operator delete(__p);
            }
            goto LABEL_22;
          }
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(__p) = 0;
            _os_log_impl(&dword_235DB9000, v13, OS_LOG_TYPE_DEFAULT, "#I Successfully enabled coex indications", (uint8_t *)&__p, 2u);
          }
        }
LABEL_22:
        CFTypeRef v14 = cf;
        CFTypeRef v16 = cf;
        if (cf)
        {
          CFRetain(cf);
          int v15 = 0;
          coex::CommandDriver::Callback::operator()((uint64_t)(v2 + 2), &v16, &v15);
          CFRelease(v14);
          if (!Mutable) {
            goto LABEL_27;
          }
        }
        else
        {
          int v15 = 0;
          coex::CommandDriver::Callback::operator()((uint64_t)(v2 + 2), &v16, &v15);
          if (!Mutable)
          {
LABEL_27:
            if (cf) {
              CFRelease(cf);
            }
            MEMORY[0x237DF6190](v20);
            goto LABEL_30;
          }
        }
        CFRelease(Mutable);
        goto LABEL_27;
      }
    }
  }
}

void sub_235E1BD5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, CFTypeRef cf, char a18)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (v19) {
    CFRelease(v19);
  }
  if (cf) {
    CFRelease(cf);
  }
  MEMORY[0x237DF6190](&a18);
  if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c107_ZTSNSt3__110shared_ptrIZN4coex16ARICommandDriver19setIndications_syncENS1_13CommandDriver8CallbackEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c107_ZTSNSt3__110shared_ptrIZN4coex16ARICommandDriver19setIndications_syncENS1_13CommandDriver8CallbackEE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::setIndications_sync(coex::CommandDriver::Callback)::$_0,std::allocator<coex::ARICommandDriver::setIndications_sync(coex::CommandDriver::Callback)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93EAC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::setIndications_sync(coex::CommandDriver::Callback)::$_0,std::allocator<coex::ARICommandDriver::setIndications_sync(coex::CommandDriver::Callback)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93EAC8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::setIndications_sync(coex::CommandDriver::Callback)::$_0,std::allocator<coex::ARICommandDriver::setIndications_sync(coex::CommandDriver::Callback)::$_0>>::__on_zero_shared(void *a1)
{
  uint64_t v2 = a1[6];
  if (v2) {
    dispatch_release(v2);
  }
  long long v3 = (const void *)a1[5];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[4];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

uint64_t ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_6(uint64_t a1)
{
  return 0;
}

unint64_t coex::checkError(CFTypeRef *a1, AriSdk::MsgBase *this, int a3, uint64_t a4)
{
  *a1 = 0;
  unint64_t result = AriSdk::MsgBase::getGMID(this);
  int v8 = (result >> 17) & 0xFFFF8000 | (result << 26);
  if (v8 != 67600384 && v8 == a3) {
    return result;
  }
  unint64_t v33 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v32[7] = v10;
  v32[8] = v10;
  v32[5] = v10;
  v32[6] = v10;
  v32[3] = v10;
  _OWORD v32[4] = v10;
  v32[1] = v10;
  v32[2] = v10;
  long long v31 = v10;
  v32[0] = v10;
  *(_OWORD *)BOOL v29 = v10;
  long long v30 = v10;
  long long v27 = v10;
  long long v28 = v10;
  long long v25 = v10;
  long long v26 = v10;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v25);
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v25, (uint64_t)"Failed to ", 10);
  int v12 = *(char *)(a4 + 23);
  if (v12 >= 0) {
    uint64_t v13 = a4;
  }
  else {
    uint64_t v13 = *(void *)a4;
  }
  if (v12 >= 0) {
    uint64_t v14 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    uint64_t v14 = *(void *)(a4 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v13, v14);
  if ((BYTE8(v31) & 0x10) != 0)
  {
    uint64_t v17 = v31;
    if ((unint64_t)v31 < *((void *)&v28 + 1))
    {
      *(void *)&long long v31 = *((void *)&v28 + 1);
      uint64_t v17 = *((void *)&v28 + 1);
    }
    long long v18 = (const void *)v28;
    size_t v15 = v17 - v28;
    if ((unint64_t)(v17 - v28) >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_36;
    }
  }
  else
  {
    if ((BYTE8(v31) & 8) == 0)
    {
      size_t v15 = 0;
      HIBYTE(v23) = 0;
      CFTypeRef v16 = __p;
      goto LABEL_24;
    }
    long long v18 = (const void *)*((void *)&v26 + 1);
    size_t v15 = *((void *)&v27 + 1) - *((void *)&v26 + 1);
    if (*((void *)&v27 + 1) - *((void *)&v26 + 1) >= 0x7FFFFFFFFFFFFFF8uLL) {
LABEL_36:
    }
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v15 >= 0x17)
  {
    uint64_t v19 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17) {
      uint64_t v19 = v15 | 7;
    }
    uint64_t v20 = v19 + 1;
    CFTypeRef v16 = operator new(v19 + 1);
    __p[1] = (void *)v15;
    unint64_t v23 = v20 | 0x8000000000000000;
    __p[0] = v16;
    goto LABEL_23;
  }
  HIBYTE(v23) = v15;
  CFTypeRef v16 = __p;
  if (v15) {
LABEL_23:
  }
    memmove(v16, v18, v15);
LABEL_24:
  *((unsigned char *)v16 + v15) = 0;
  CreateError();
  if (&cf == a1) {
    goto LABEL_27;
  }
  CFTypeRef v21 = *a1;
  *a1 = cf;
  CFTypeRef cf = 0;
  if (v21)
  {
    CFRelease(v21);
LABEL_27:
    if (cf) {
      CFRelease(cf);
    }
  }
  if (SHIBYTE(v23) < 0) {
    operator delete(__p[0]);
  }
  *(void *)&long long v25 = *MEMORY[0x263F8C2C8];
  *(void *)((char *)&v25 + *(void *)(v25 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  *((void *)&v25 + 1) = MEMORY[0x263F8C318] + 16;
  if (SHIBYTE(v30) < 0) {
    operator delete(v29[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x237DF7120](v32);
}

void sub_235E1C29C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a14 < 0)
  {
    operator delete(__p);
    std::ostringstream::~ostringstream((uint64_t)&a16);
    ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(v16);
    _Unwind_Resume(a1);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(v16);
  _Unwind_Resume(a1);
}

void sub_235E1C2FC(_Unwind_Exception *a1)
{
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(v1);
  _Unwind_Resume(a1);
}

void ctu::cf::insert<__CFString const*,__CFDictionary *>(__CFDictionary *a1, CFTypeRef cf, CFTypeRef a3)
{
  if (cf) {
    CFRetain(cf);
  }
  if (a3)
  {
    CFRetain(a3);
    if (cf) {
      CFDictionaryAddValue(a1, cf, a3);
    }
    CFRelease(a3);
  }
  if (cf) {
    CFRelease(cf);
  }
}

void sub_235E1C390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
}

void sub_235E1C3B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(const void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t ___ZN3ice6detail12wrapCallbackIZN4coex16ARICommandDriver32registerWWANStateIndication_syncEvE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t result, const unsigned __int8 *a2)
{
  uint64_t v2 = *(uint64_t **)(result + 32);
  if (!v2) {
    return result;
  }
  uint64_t v3 = *v2;
  unint64_t v25 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v23 = v4;
  long long v24 = v4;
  _OWORD v22[2] = v4;
  v22[3] = v4;
  v22[0] = v4;
  v22[1] = v4;
  AriSdk::ARI_CsiIdcCellConfigEventIndCb_SDK::ARI_CsiIdcCellConfigEventIndCb_SDK((AriSdk::ARI_CsiIdcCellConfigEventIndCb_SDK *)v22, a2);
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  long long __p = operator new(0x20uLL);
  long long v20 = xmmword_235E75010;
  strcpy((char *)__p, "get right WWAN state indication");
  coex::checkError(&cf, (AriSdk::MsgBase *)v22, 1233158144, (uint64_t)&__p);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p);
  }
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (cf) {
    uint64_t v7 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v7 = 0;
  }
  if (v7) {
    goto LABEL_15;
  }
  if (AriSdk::ARI_CsiIdcCellConfigEventIndCb_SDK::unpack((AriSdk::ARI_CsiIdcCellConfigEventIndCb_SDK *)v22))
  {
    long long __p = operator new(0x30uLL);
    long long v20 = xmmword_235E71930;
    strcpy((char *)__p, "Invalid WWAN state indication (unpack error)");
    CreateError();
    CFTypeRef v8 = cf;
    CFTypeRef cf = v18;
    CFTypeRef v18 = 0;
    if (!v8) {
      goto LABEL_13;
    }
  }
  else
  {
    if (!**((_DWORD **)&v23 + 1))
    {
      CFMutableDictionaryRef v15 = CFDictionaryCreateMutable(v5, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      CFTypeRef v16 = v15;
      if (v15) {
        long long v10 = v15;
      }
      else {
        long long v10 = Mutable;
      }
      if (v15 && Mutable)
      {
        CFRelease(Mutable);
        long long v10 = v16;
      }
      int v9 = *(_DWORD *)v23;
      coex::fetch_cell_config_info((__CFDictionary **)&__p, (const void *)v24, *((_OWORD **)&v24 + 1));
      uint64_t v17 = __p;
      ctu::cf::insert<__CFString const*,__CFDictionary const*>(v10, (CFTypeRef)*MEMORY[0x263F8B640], __p);
      if (v17) {
        CFRelease(v17);
      }
      goto LABEL_16;
    }
    long long __p = operator new(0x30uLL);
    long long v20 = xmmword_235E71930;
    strcpy((char *)__p, "Invalid WWAN state indication (result error)");
    CreateError();
    CFTypeRef v8 = cf;
    CFTypeRef cf = v18;
    CFTypeRef v18 = 0;
    if (!v8) {
      goto LABEL_13;
    }
  }
  CFRelease(v8);
LABEL_13:
  if (SHIBYTE(v20) < 0) {
    operator delete(__p);
  }
LABEL_15:
  int v9 = 0;
  long long v10 = Mutable;
LABEL_16:
  if (cf) {
    uint64_t v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v11 = 0;
  }
  if (v11) {
    ctu::cf::insert<__CFString const*,__CFError *>(v10, (CFTypeRef)*MEMORY[0x263F8B598], cf);
  }
  if (v10) {
    int v12 = ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get;
  }
  else {
    int v12 = 0;
  }
  if (v12)
  {
    if (v10 && (CFTypeID v13 = CFGetTypeID(v10), v13 == CFDictionaryGetTypeID()))
    {
      CFTypeRef v18 = v10;
      CFRetain(v10);
      uint64_t v14 = v10;
    }
    else
    {
      uint64_t v14 = 0;
      CFTypeRef v18 = 0;
    }
    coex::ARICommandDriver::sendStateUpdate_sync(v3, &v18, v9);
    if (v14) {
      CFRelease(v14);
    }
  }
  if (v10) {
    CFRelease(v10);
  }
  if (cf) {
    CFRelease(cf);
  }
  return MEMORY[0x237DF65B0](v22);
}

void sub_235E1C750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, CFTypeRef cf, char a18)
{
  if (v18) {
    CFRelease(v18);
  }
  if (v19) {
    CFRelease(v19);
  }
  if (cf) {
    CFRelease(cf);
  }
  MEMORY[0x237DF65B0](&a18);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c92_ZTSNSt3__110shared_ptrIZN4coex16ARICommandDriver32registerWWANStateIndication_syncEvE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c92_ZTSNSt3__110shared_ptrIZN4coex16ARICommandDriver32registerWWANStateIndication_syncEvE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::registerWWANStateIndication_sync(void)::$_0,std::allocator<coex::ARICommandDriver::registerWWANStateIndication_sync(void)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93EB48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::registerWWANStateIndication_sync(void)::$_0,std::allocator<coex::ARICommandDriver::registerWWANStateIndication_sync(void)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93EB48;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void coex::fetch_cell_config_info(__CFDictionary **a1, const void *a2, _OWORD *a3)
{
  uint64_t v60 = 0;
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFTypeRef v8 = Mutable;
  if (Mutable) {
    uint64_t v60 = Mutable;
  }
  memcpy(__dst, a2, sizeof(__dst));
  CFMutableArrayRef v61 = 0;
  int v9 = CFDictionaryCreateMutable(v6, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  long long v10 = v9;
  if (v9) {
    CFMutableArrayRef v61 = v9;
  }
  coex::fetch_freq_and_bandwidth((coex *)v51);
  CFTypeRef v11 = v51[0];
  ctu::cf::insert<__CFString const*,__CFDictionary const*>(v10, (CFTypeRef)*MEMORY[0x263F8B670], v51[0]);
  if (v11) {
    CFRelease(v11);
  }
  coex::fetch_freq_and_bandwidth((coex *)v51);
  CFTypeRef v12 = v51[0];
  ctu::cf::insert<__CFString const*,__CFDictionary const*>(v10, (CFTypeRef)*MEMORY[0x263F8B658], v51[0]);
  if (v12) {
    CFRelease(v12);
  }
  ctu::cf::insert<__CFString const*,__CFDictionary *>(v8, (CFTypeRef)*MEMORY[0x263F8B678], v10);
  if (v10) {
    CFRelease(v10);
  }
  v51[0] = 0;
  CFMutableDictionaryRef v13 = CFDictionaryCreateMutable(v6, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  uint64_t v14 = v13;
  if (v13) {
    v51[0] = v13;
  }
  ctu::cf::insert<__CFString const*,unsigned char>(v13, (CFTypeRef)*MEMORY[0x263F8B5C8], LOBYTE(__dst[6]), v6);
  if (HIBYTE(__dst[3]) != 240) {
    ctu::cf::insert<__CFString const*,unsigned char>(v14, (CFTypeRef)*MEMORY[0x263F8B5A8], HIBYTE(__dst[3]), v6);
  }
  if (BYTE2(__dst[3]) != 240) {
    ctu::cf::insert<__CFString const*,unsigned char>(v14, (CFTypeRef)*MEMORY[0x263F8B628], BYTE2(__dst[3]), v6);
  }
  ctu::cf::insert<__CFString const*,unsigned int>(v14, (CFTypeRef)*MEMORY[0x263F8B588], __dst[4], v6);
  ctu::cf::insert<__CFString const*,unsigned int>(v14, (CFTypeRef)*MEMORY[0x263F8B580], __dst[5], v6);
  if (v14)
  {
    CFTypeID v15 = CFGetTypeID(v14);
    if (v15 == CFDictionaryGetTypeID())
    {
      CFMutableArrayRef v61 = v14;
      CFRetain(v14);
      CFTypeRef v16 = v14;
    }
    else
    {
      CFTypeRef v16 = 0;
      CFMutableArrayRef v61 = 0;
    }
    CFRelease(v14);
  }
  else
  {
    CFTypeRef v16 = 0;
    CFMutableArrayRef v61 = 0;
  }
  ctu::cf::insert<__CFString const*,__CFDictionary const*>(v8, (CFTypeRef)*MEMORY[0x263F8B660], v16);
  if (v61) {
    CFRelease(v61);
  }
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  coex::fetch_basic_cell_config_list((CFMutableArrayRef *)&cf, (uint64_t)&__dst[7], (uint64_t)&__dst[15], 4);
  uint64_t v17 = (__CFArray *)cf;
  std::runtime_error v56 = (__CFArray *)cf;
  CFTypeRef v57 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  if (cf) {
    CFRetain(cf);
  }
  if (__dst[0] || LOWORD(__dst[1]))
  {
    v51[0] = 0;
    CFMutableDictionaryRef v19 = CFDictionaryCreateMutable(v6, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    long long v20 = v19;
    if (v19) {
      v51[0] = v19;
    }
    ctu::cf::insert<__CFString const*,unsigned int>(v19, (CFTypeRef)*MEMORY[0x263F8B630], __dst[0], v6);
    ctu::cf::insert<__CFString const*,int>(v20, (CFTypeRef)*MEMORY[0x263F8B590], 1000 * LOWORD(__dst[1]), v6);
    ctu::cf::insert<__CFString const*,unsigned int>(v20, (CFTypeRef)*MEMORY[0x263F8B5F8], 1u, v6);
    if (v17) {
      CFTypeRef v21 = ctu::SharedRef<__CFArray,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray>::get;
    }
    else {
      CFTypeRef v21 = 0;
    }
    if (v21 || (v50 = CFArrayCreateMutable(v6, 0, MEMORY[0x263EFFF70]), (CFTypeRef v18 = v50) == 0))
    {
      CFTypeRef v18 = v17;
    }
    else
    {
      std::runtime_error v56 = v50;
      if (v17) {
        CFRelease(v17);
      }
    }
    CFArrayAppendValue(v18, v20);
    if (v20) {
      CFRelease(v20);
    }
  }
  else
  {
    CFTypeRef v18 = v17;
  }
  if (!__dst[2] && !LOWORD(__dst[3]))
  {
    std::runtime_error v56 = 0;
    CFTypeRef v57 = v18;
    if (v18) {
      uint64_t v22 = ctu::SharedRef<__CFArray,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray>::get;
    }
    else {
      uint64_t v22 = 0;
    }
    if (!v22) {
      goto LABEL_61;
    }
    goto LABEL_59;
  }
  v51[0] = 0;
  CFMutableDictionaryRef v23 = CFDictionaryCreateMutable(v6, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  long long v24 = v23;
  if (v23) {
    v51[0] = v23;
  }
  ctu::cf::insert<__CFString const*,unsigned int>(v23, (CFTypeRef)*MEMORY[0x263F8B630], __dst[2], v6);
  ctu::cf::insert<__CFString const*,int>(v24, (CFTypeRef)*MEMORY[0x263F8B590], 1000 * LOWORD(__dst[3]), v6);
  ctu::cf::insert<__CFString const*,unsigned int>(v24, (CFTypeRef)*MEMORY[0x263F8B5F8], 2u, v6);
  if (v18) {
    unint64_t v25 = ctu::SharedRef<__CFArray,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray>::get;
  }
  else {
    unint64_t v25 = 0;
  }
  if (v25 || (long long v26 = CFArrayCreateMutable(v6, 0, MEMORY[0x263EFFF70])) == 0)
  {
    long long v26 = v18;
  }
  else
  {
    std::runtime_error v56 = v26;
    if (v18)
    {
      CFRelease(v18);
      long long v26 = v56;
    }
  }
  CFArrayAppendValue(v26, v24);
  if (v24) {
    CFRelease(v24);
  }
  CFTypeRef v18 = v56;
  std::runtime_error v56 = 0;
  CFTypeRef v57 = v18;
  if (v18) {
    long long v27 = ctu::SharedRef<__CFArray,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray>::get;
  }
  else {
    long long v27 = 0;
  }
  if (v27)
  {
LABEL_59:
    if (CFArrayGetCount(v18)) {
      ctu::cf::insert<__CFString const*,__CFArray *>(v60, (CFTypeRef)*MEMORY[0x263F8B6E0], v57);
    }
  }
LABEL_61:
  coex::fetch_basic_cell_config_list((CFMutableArrayRef *)v51, (uint64_t)&__dst[23], (uint64_t)&__dst[29], 3);
  CFTypeRef v28 = v51[0];
  if (!v51[0] || (CFTypeID v29 = CFGetTypeID(v51[0]), v29 != CFArrayGetTypeID()))
  {
    CFTypeRef v28 = 0;
    CFTypeRef v55 = 0;
    CFTypeRef v30 = v51[0];
    if (!v51[0]) {
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  CFTypeRef v55 = v28;
  CFRetain(v28);
  CFTypeRef v30 = v51[0];
  if (v51[0]) {
LABEL_66:
  }
    CFRelease(v30);
LABEL_67:
  if (v28) {
    long long v31 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
  }
  else {
    long long v31 = 0;
  }
  if (v31 && CFArrayGetCount((CFArrayRef)v28)) {
    ctu::cf::insert<__CFString const*,__CFArray const*>(v60, (CFTypeRef)*MEMORY[0x263F8B728], v28);
  }
  coex::fetch_basic_cell_config_list((CFMutableArrayRef *)v51, (uint64_t)&__dst[37], (uint64_t)&__dst[35], 1);
  CFTypeRef v32 = v51[0];
  if (!v51[0] || (CFTypeID v33 = CFGetTypeID(v51[0]), v33 != CFArrayGetTypeID()))
  {
    CFTypeRef v32 = 0;
    CFTypeRef v54 = 0;
    CFTypeRef v34 = v51[0];
    if (!v51[0]) {
      goto LABEL_79;
    }
    goto LABEL_78;
  }
  CFTypeRef v54 = v32;
  CFRetain(v32);
  CFTypeRef v34 = v51[0];
  if (v51[0]) {
LABEL_78:
  }
    CFRelease(v34);
LABEL_79:
  if (v32) {
    long long v35 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
  }
  else {
    long long v35 = 0;
  }
  if (v35 && CFArrayGetCount((CFArrayRef)v32)) {
    ctu::cf::insert<__CFString const*,__CFArray const*>(v60, (CFTypeRef)*MEMORY[0x263F8B758], v32);
  }
  CFTypeRef v53 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  v51[0] = 0;
  CFMutableArrayRef v36 = CFArrayCreateMutable(v6, 0, MEMORY[0x263EFFF70]);
  long long v37 = v36;
  if (v36) {
    v51[0] = v36;
  }
  for (uint64_t i = 0; i != 64; ++i)
  {
    CFMutableArrayRef v61 = (CFMutableArrayRef)0xAAAAAAAAAAAAAAAALL;
    coex::fetch_gsm_cell_config((coex *)&v61, __dst[i + 104], 1u);
    CFMutableArrayRef v39 = v61;
    if (v61) {
      int v40 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    }
    else {
      int v40 = 0;
    }
    if (v40) {
      CFArrayAppendValue(v37, v61);
    }
    if (v39) {
      CFRelease(v39);
    }
    CFMutableArrayRef v61 = (CFMutableArrayRef)0xAAAAAAAAAAAAAAAALL;
    coex::fetch_gsm_cell_config((coex *)&v61, __dst[i + 40], 2u);
    CFMutableArrayRef v41 = v61;
    if (v61) {
      long long v42 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    }
    else {
      long long v42 = 0;
    }
    if (v42) {
      CFArrayAppendValue(v37, v61);
    }
    if (v41) {
      CFRelease(v41);
    }
  }
  if (v37)
  {
    CFTypeID v43 = CFGetTypeID(v37);
    if (v43 == CFArrayGetTypeID())
    {
      CFTypeRef v53 = v37;
      CFRetain(v37);
      CFArrayRef v44 = v37;
    }
    else
    {
      CFArrayRef v44 = 0;
      CFTypeRef v53 = 0;
    }
    CFRelease(v37);
  }
  else
  {
    CFArrayRef v44 = 0;
    CFTypeRef v53 = 0;
  }
  if (v44) {
    int v45 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
  }
  else {
    int v45 = 0;
  }
  if (v45 && CFArrayGetCount(v44)) {
    ctu::cf::insert<__CFString const*,__CFArray const*>(v60, (CFTypeRef)*MEMORY[0x263F8B6C0], v53);
  }
  if (a3)
  {
    long long v46 = a3[1];
    *(_OWORD *)long long v51 = *a3;
    long long v52 = v46;
    coex::fetch_basic_cell_config_list(&v61, (uint64_t)v51, (uint64_t)&v51[1], 1);
    long long v47 = v60;
    ctu::cf::insert<__CFString const*,__CFArray *>(v60, (CFTypeRef)*MEMORY[0x263F8B700], v61);
    if (v61) {
      CFRelease(v61);
    }
    coex::fetch_basic_cell_config_list(&v61, (uint64_t)&v52, (uint64_t)&v52 + 8, 1);
    ctu::cf::insert<__CFString const*,__CFArray *>(v47, (CFTypeRef)*MEMORY[0x263F8B6D0], v61);
    if (v61) {
      CFRelease(v61);
    }
    if (!v47)
    {
LABEL_126:
      *a1 = 0;
      CFTypeRef v49 = v53;
      if (!v53) {
        goto LABEL_128;
      }
      goto LABEL_127;
    }
  }
  else
  {
    long long v47 = v60;
    if (!v60) {
      goto LABEL_126;
    }
  }
  CFTypeID v48 = CFGetTypeID(v47);
  if (v48 != CFDictionaryGetTypeID()) {
    goto LABEL_126;
  }
  *a1 = v47;
  CFRetain(v47);
  CFTypeRef v49 = v53;
  if (v53) {
LABEL_127:
  }
    CFRelease(v49);
LABEL_128:
  if (v54) {
    CFRelease(v54);
  }
  if (v55) {
    CFRelease(v55);
  }
  if (v57) {
    CFRelease(v57);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v47) {
    CFRelease(v47);
  }
}

void sub_235E1D25C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va4, a5);
  va_start(va3, a5);
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v7 = va_arg(va1, const void *);
  va_copy(va2, va1);
  int v9 = va_arg(va2, const void *);
  va_copy(va3, va2);
  CFTypeRef v11 = va_arg(va3, const void *);
  uint64_t v13 = va_arg(va3, void);
  va_copy(va4, va3);
  uint64_t v14 = va_arg(va4, const void *);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va1);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va2);
  ctu::cf::CFSharedRef<__CFArray>::~CFSharedRef((const void **)va3);
  ctu::cf::CFSharedRef<__CFArray>::~CFSharedRef((const void **)va4);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v5 - 80));
  _Unwind_Resume(a1);
}

void ctu::cf::insert<__CFString const*,__CFDictionary const*>(__CFDictionary *a1, CFTypeRef cf, CFTypeRef a3)
{
  if (cf) {
    CFRetain(cf);
  }
  if (a3)
  {
    CFRetain(a3);
    if (cf) {
      CFDictionaryAddValue(a1, cf, a3);
    }
    CFRelease(a3);
  }
  if (cf) {
    CFRelease(cf);
  }
}

void sub_235E1D4D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
}

void sub_235E1D4FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void coex::fetch_basic_cell_config_list(CFMutableArrayRef *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *a1 = 0;
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  int v9 = Mutable;
  if (Mutable) {
    *a1 = Mutable;
  }
  if (a2)
  {
    if (a3)
    {
      do
      {
        xpc_object_t value = (void *)0xAAAAAAAAAAAAAAAALL;
        coex::fetch_cell_config((CFMutableDictionaryRef *)&value, a2, 1u);
        long long v10 = value;
        if (value) {
          CFTypeRef v11 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
        }
        else {
          CFTypeRef v11 = 0;
        }
        if (v11) {
          CFArrayAppendValue(v9, value);
        }
        if (v10) {
          CFRelease(v10);
        }
        xpc_object_t value = (void *)0xAAAAAAAAAAAAAAAALL;
        coex::fetch_cell_config((CFMutableDictionaryRef *)&value, a3, 2u);
        CFTypeRef v12 = value;
        if (value) {
          uint64_t v13 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
        }
        else {
          uint64_t v13 = 0;
        }
        if (v13) {
          CFArrayAppendValue(v9, value);
        }
        if (v12) {
          CFRelease(v12);
        }
        a3 += 8;
        a2 += 8;
        --a4;
      }
      while (a4);
    }
    else
    {
      do
      {
        xpc_object_t value = (void *)0xAAAAAAAAAAAAAAAALL;
        coex::fetch_cell_config((CFMutableDictionaryRef *)&value, a2, 1u);
        CFTypeRef v16 = value;
        if (value) {
          uint64_t v17 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
        }
        else {
          uint64_t v17 = 0;
        }
        if (v17) {
          CFArrayAppendValue(v9, value);
        }
        if (v16) {
          CFRelease(v16);
        }
        a2 += 8;
        --a4;
      }
      while (a4);
    }
  }
  else if (a3)
  {
    do
    {
      xpc_object_t value = (void *)0xAAAAAAAAAAAAAAAALL;
      coex::fetch_cell_config((CFMutableDictionaryRef *)&value, a3, 2u);
      uint64_t v14 = value;
      if (value) {
        CFTypeID v15 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
      }
      else {
        CFTypeID v15 = 0;
      }
      if (v15) {
        CFArrayAppendValue(v9, value);
      }
      if (v14) {
        CFRelease(v14);
      }
      a3 += 8;
      --a4;
    }
    while (a4);
  }
}

void sub_235E1D710(_Unwind_Exception *a1)
{
  ctu::cf::CFSharedRef<__CFArray>::~CFSharedRef(v1);
  _Unwind_Resume(a1);
}

void sub_235E1D728(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFArray>::~CFSharedRef(v2);
  _Unwind_Resume(a1);
}

void sub_235E1D784(_Unwind_Exception *a1)
{
  ctu::cf::CFSharedRef<__CFArray>::~CFSharedRef(v1);
  _Unwind_Resume(a1);
}

void sub_235E1D798(_Unwind_Exception *a1)
{
  ctu::cf::CFSharedRef<__CFArray>::~CFSharedRef(v1);
  _Unwind_Resume(a1);
}

const void **ctu::cf::CFSharedRef<__CFArray>::~CFSharedRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t ctu::SharedRef<__CFArray,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray>::get(uint64_t a1)
{
  return *(void *)a1;
}

void coex::fetch_freq_and_bandwidth(coex *this)
{
  int v9 = 0;
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  LODWORD(v8[0]) = 0;
  CFNumberRef v3 = CFNumberCreate(v2, kCFNumberIntType, v8);
  v8[1] = v3;
  int v9 = 0;
  int valuePtr = 0;
  CFNumberRef v4 = CFNumberCreate(v2, kCFNumberIntType, &valuePtr);
  v8[0] = v4;
  int v9 = 0;
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v2, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFAllocatorRef v6 = Mutable;
  if (Mutable) {
    int v9 = Mutable;
  }
  ctu::cf::insert<__CFString const*,__CFNumber const*>(Mutable, (CFTypeRef)*MEMORY[0x263F8B630], v3);
  ctu::cf::insert<__CFString const*,__CFNumber const*>(v6, (CFTypeRef)*MEMORY[0x263F8B590], v4);
  if (v6)
  {
    CFTypeID v7 = CFGetTypeID(v6);
    if (v7 == CFDictionaryGetTypeID())
    {
      *(void *)this = v6;
      CFRetain(v6);
    }
    else
    {
      *(void *)this = 0;
    }
    CFRelease(v6);
  }
  else
  {
    *(void *)this = 0;
  }
  if (v4) {
    CFRelease(v4);
  }
  if (v3) {
    CFRelease(v3);
  }
}

void sub_235E1D92C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10, const void *a11)
{
}

const void **ctu::cf::CFSharedRef<__CFNumber const>::~CFSharedRef(const void **a1)
{
  CFAllocatorRef v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void ctu::cf::insert<__CFString const*,__CFNumber const*>(__CFDictionary *a1, CFTypeRef cf, CFTypeRef a3)
{
  if (cf) {
    CFRetain(cf);
  }
  if (a3)
  {
    CFRetain(a3);
    if (cf) {
      CFDictionaryAddValue(a1, cf, a3);
    }
    CFRelease(a3);
  }
  if (cf) {
    CFRelease(cf);
  }
}

void sub_235E1DA3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
}

void sub_235E1DA60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::insert<__CFString const*,unsigned char>(__CFDictionary *a1, CFTypeRef cf, unsigned int a3, CFAllocatorRef allocator)
{
  if (cf) {
    CFRetain(cf);
  }
  uint64_t valuePtr = a3;
  CFNumberRef v8 = CFNumberCreate(allocator, kCFNumberLongLongType, &valuePtr);
  CFNumberRef v9 = v8;
  if (cf && v8)
  {
    CFDictionaryAddValue(a1, cf, v8);
  }
  else if (!v8)
  {
    goto LABEL_8;
  }
  CFRelease(v9);
LABEL_8:
  if (cf) {
    CFRelease(cf);
  }
}

void sub_235E1DB14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  CFNumberRef v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_235E1DB38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t ctu::cf::insert<__CFString const*,unsigned int>(__CFDictionary *a1, CFTypeRef cf, unsigned int a3, CFAllocatorRef allocator)
{
  if (cf) {
    CFRetain(cf);
  }
  uint64_t valuePtr = a3;
  CFNumberRef v8 = CFNumberCreate(allocator, kCFNumberLongLongType, &valuePtr);
  CFNumberRef v9 = v8;
  if (cf) {
    BOOL v10 = v8 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  uint64_t v11 = !v10;
  if (v10)
  {
    if (!v8) {
      goto LABEL_13;
    }
  }
  else
  {
    CFDictionaryAddValue(a1, cf, v8);
  }
  CFRelease(v9);
LABEL_13:
  if (cf) {
    CFRelease(cf);
  }
  return v11;
}

void sub_235E1DBF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  CFNumberRef v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_235E1DC1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void coex::fetch_cell_config(CFMutableDictionaryRef *a1, uint64_t a2, unsigned int a3)
{
  CFMutableDictionaryRef Mutable = 0;
  if (*(_DWORD *)a2) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = *(unsigned __int16 *)(a2 + 4) == 0;
  }
  if (!v5
    && (CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x263EFFB08],
        Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]), ctu::cf::insert<__CFString const*,unsigned int>(Mutable, (CFTypeRef)*MEMORY[0x263F8B630], *(_DWORD *)a2, v8), ctu::cf::insert<__CFString const*,int>(Mutable, (CFTypeRef)*MEMORY[0x263F8B590], 1000 * *(unsigned __int16 *)(a2 + 4), v8), ctu::cf::insert<__CFString const*,unsigned int>(Mutable, (CFTypeRef)*MEMORY[0x263F8B5F8], a3, v8), Mutable)&& (CFTypeID v9 = CFGetTypeID(Mutable), v9 == CFDictionaryGetTypeID()))
  {
    *a1 = Mutable;
    CFRetain(Mutable);
  }
  else
  {
    *a1 = 0;
    if (!Mutable) {
      return;
    }
  }
  CFRelease(Mutable);
}

void sub_235E1DD60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_235E1DD78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_235E1DD8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t ctu::cf::insert<__CFString const*,int>(__CFDictionary *a1, CFTypeRef cf, int a3, CFAllocatorRef allocator)
{
  if (cf) {
    CFRetain(cf);
  }
  int valuePtr = a3;
  CFNumberRef v8 = CFNumberCreate(allocator, kCFNumberIntType, &valuePtr);
  CFNumberRef v9 = v8;
  if (cf) {
    BOOL v10 = v8 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  uint64_t v11 = !v10;
  if (v10)
  {
    if (!v8) {
      goto LABEL_13;
    }
  }
  else
  {
    CFDictionaryAddValue(a1, cf, v8);
  }
  CFRelease(v9);
LABEL_13:
  if (cf) {
    CFRelease(cf);
  }
  return v11;
}

void sub_235E1DE48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  CFNumberRef v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_235E1DE6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::insert<__CFString const*,__CFArray *>(__CFDictionary *a1, CFTypeRef cf, CFTypeRef a3)
{
  if (cf) {
    CFRetain(cf);
  }
  if (a3)
  {
    CFRetain(a3);
    if (cf) {
      CFDictionaryAddValue(a1, cf, a3);
    }
    CFRelease(a3);
  }
  if (cf) {
    CFRelease(cf);
  }
}

void sub_235E1DF00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
}

void sub_235E1DF24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::insert<__CFString const*,__CFArray const*>(__CFDictionary *a1, CFTypeRef cf, CFTypeRef a3)
{
  if (cf) {
    CFRetain(cf);
  }
  if (a3)
  {
    CFRetain(a3);
    if (cf) {
      CFDictionaryAddValue(a1, cf, a3);
    }
    CFRelease(a3);
  }
  if (cf) {
    CFRelease(cf);
  }
}

void sub_235E1DFB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
}

void sub_235E1DFDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void coex::fetch_gsm_cell_config(coex *this, unsigned int a2, unsigned int a3)
{
  if (a2
    && (CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08],
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]), ctu::cf::insert<__CFString const*,unsigned int>(Mutable, (CFTypeRef)*MEMORY[0x263F8B630], a2, v6), ctu::cf::insert<__CFString const*,int>(Mutable, (CFTypeRef)*MEMORY[0x263F8B590], 200000, v6), ctu::cf::insert<__CFString const*,unsigned int>(Mutable, (CFTypeRef)*MEMORY[0x263F8B5F8], a3, v6), Mutable))
  {
    CFTypeID v8 = CFGetTypeID(Mutable);
    if (v8 == CFDictionaryGetTypeID())
    {
      *(void *)this = Mutable;
      CFRetain(Mutable);
    }
    else
    {
      *(void *)this = 0;
    }
    CFRelease(Mutable);
  }
  else
  {
    *(void *)this = 0;
  }
}

void sub_235E1E120(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_235E1E134(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_235E1E148(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::insert<__CFString const*,__CFError *>(__CFDictionary *a1, CFTypeRef cf, CFTypeRef a3)
{
  if (cf) {
    CFRetain(cf);
  }
  if (a3)
  {
    CFRetain(a3);
    if (cf) {
      CFDictionaryAddValue(a1, cf, a3);
    }
    CFRelease(a3);
  }
  if (cf) {
    CFRelease(cf);
  }
}

void sub_235E1E1DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
}

void sub_235E1E200(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN3ice6detail12wrapCallbackIZN4coex16ARICommandDriver18pollWWANState_syncENS2_5SubIdEE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  CFAllocatorRef v2 = *(void **)(a1 + 32);
  if (v2)
  {
    CFNumberRef v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      uint64_t v5 = v2[2];
      CFAllocatorRef v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        CFTypeID v7 = v6;
        if (!*v2)
        {
LABEL_39:
          if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v22 = v8;
        long long v23 = v8;
        v21[2] = v8;
        v21[3] = v8;
        v21[0] = v8;
        v21[1] = v8;
        AriSdk::ARI_CsiIdcGetCellConfigRspCb_SDK::ARI_CsiIdcGetCellConfigRspCb_SDK((AriSdk::ARI_CsiIdcGetCellConfigRspCb_SDK *)v21, a2);
        CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        __p[23] = 14;
        strcpy(__p, "get WWAN state");
        coex::checkError(&cf, (AriSdk::MsgBase *)v21, 1224769536, (uint64_t)__p);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
        if (cf) {
          BOOL v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          BOOL v10 = 0;
        }
        if (v10) {
          goto LABEL_18;
        }
        if (AriSdk::ARI_CsiIdcGetCellConfigRspCb_SDK::unpack((AriSdk::ARI_CsiIdcGetCellConfigRspCb_SDK *)v21))
        {
          *(void *)long long __p = operator new(0x28uLL);
          *(_OWORD *)&__p[8] = xmmword_235E75020;
          strcpy(*(char **)__p, "Failed to get WWAN state (unpack error)");
          CreateError();
          CFTypeRef v11 = cf;
          CFTypeRef cf = v18;
          CFTypeRef v18 = 0;
          if (!v11) {
            goto LABEL_16;
          }
        }
        else
        {
          if (!**((_DWORD **)&v22 + 1))
          {
            int v12 = *(_DWORD *)v22;
            coex::fetch_cell_config_info((__CFDictionary **)__p, (const void *)v23, *((_OWORD **)&v23 + 1));
            uint64_t v17 = *(const void **)__p;
            ctu::cf::insert<__CFString const*,__CFDictionary const*>(Mutable, (CFTypeRef)*MEMORY[0x263F8B600], *(CFTypeRef *)__p);
            if (v17) {
              CFRelease(v17);
            }
            goto LABEL_19;
          }
          *(void *)long long __p = operator new(0x28uLL);
          *(_OWORD *)&__p[8] = xmmword_235E75020;
          strcpy(*(char **)__p, "Failed to get WWAN state (result error)");
          CreateError();
          CFTypeRef v11 = cf;
          CFTypeRef cf = v18;
          CFTypeRef v18 = 0;
          if (!v11) {
            goto LABEL_16;
          }
        }
        CFRelease(v11);
LABEL_16:
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
LABEL_18:
        int v12 = 0;
LABEL_19:
        if (cf) {
          uint64_t v13 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          uint64_t v13 = 0;
        }
        if (v13) {
          ctu::cf::insert<__CFString const*,__CFError *>(Mutable, (CFTypeRef)*MEMORY[0x263F8B598], cf);
        }
        if (Mutable) {
          uint64_t v14 = ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get;
        }
        else {
          uint64_t v14 = 0;
        }
        if (v14)
        {
          if (Mutable && (CFTypeID v15 = CFGetTypeID(Mutable), v15 == CFDictionaryGetTypeID()))
          {
            CFTypeRef v18 = Mutable;
            CFRetain(Mutable);
            CFTypeRef v16 = Mutable;
          }
          else
          {
            CFTypeRef v16 = 0;
            CFTypeRef v18 = 0;
          }
          coex::ARICommandDriver::sendStateUpdate_sync(v5, &v18, v12);
          if (v16) {
            CFRelease(v16);
          }
        }
        if (Mutable) {
          CFRelease(Mutable);
        }
        if (cf) {
          CFRelease(cf);
        }
        MEMORY[0x237DF6320](v21);
        goto LABEL_39;
      }
    }
  }
}

void sub_235E1E59C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, CFTypeRef cf, char a18)
{
  if (v20) {
    CFRelease(v20);
  }
  if (v19) {
    CFRelease(v19);
  }
  if (cf) {
    CFRelease(cf);
  }
  MEMORY[0x237DF6320](&a18);
  if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c88_ZTSNSt3__110shared_ptrIZN4coex16ARICommandDriver18pollWWANState_syncENS1_5SubIdEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c88_ZTSNSt3__110shared_ptrIZN4coex16ARICommandDriver18pollWWANState_syncENS1_5SubIdEE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::pollWWANState_sync(coex::SubId)::$_0,std::allocator<coex::ARICommandDriver::pollWWANState_sync(coex::SubId)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93EBC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::pollWWANState_sync(coex::SubId)::$_0,std::allocator<coex::ARICommandDriver::pollWWANState_sync(coex::SubId)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93EBC8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::pollWWANState_sync(coex::SubId)::$_0,std::allocator<coex::ARICommandDriver::pollWWANState_sync(coex::SubId)::$_0>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN3ice6detail12wrapCallbackIZN4coex16ARICommandDriver20pollLinkQuality_syncENS2_5SubIdEE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    CFNumberRef v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      uint64_t v5 = v2[2];
      CFAllocatorRef v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        CFTypeID v7 = v6;
        if (!*v2)
        {
LABEL_32:
          if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v20[3] = v8;
        long long v21 = v8;
        v20[1] = v8;
        _OWORD v20[2] = v8;
        v20[0] = v8;
        AriSdk::ARI_CsiIdcRTGetLinkQualityReportRspCb_SDK::ARI_CsiIdcRTGetLinkQualityReportRspCb_SDK((AriSdk::ARI_CsiIdcRTGetLinkQualityReportRspCb_SDK *)v20, a2);
        CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        char v18 = 16;
        strcpy(__p, "get link quality");
        coex::checkError(&cf, (AriSdk::MsgBase *)v20, 1224867840, (uint64_t)__p);
        if (v18 < 0)
        {
          operator delete(*(void **)__p);
          if (cf) {
            uint64_t v14 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          }
          else {
            uint64_t v14 = 0;
          }
          if (v14)
          {
LABEL_10:
            CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
            ctu::cf::insert<__CFString const*,__CFError *>(Mutable, (CFTypeRef)*MEMORY[0x263F8B598], cf);
            if (Mutable)
            {
              CFTypeID v11 = CFGetTypeID(Mutable);
              if (v11 == CFDictionaryGetTypeID())
              {
                *(void *)long long __p = Mutable;
                CFRetain(Mutable);
                int v12 = 0;
                uint64_t v13 = Mutable;
LABEL_25:
                coex::ARICommandDriver::sendStateUpdate_sync(v5, (const void **)__p, v12);
                if (v13) {
                  CFRelease(v13);
                }
                if (Mutable) {
                  CFRelease(Mutable);
                }
                if (cf) {
                  CFRelease(cf);
                }
                MEMORY[0x237DF6A50](v20);
                goto LABEL_32;
              }
            }
            goto LABEL_23;
          }
        }
        else
        {
          if (cf) {
            CFNumberRef v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          }
          else {
            CFNumberRef v9 = 0;
          }
          if (v9) {
            goto LABEL_10;
          }
        }
        if (AriSdk::ARI_CsiIdcRTGetLinkQualityReportRspCb_SDK::unpack((AriSdk::ARI_CsiIdcRTGetLinkQualityReportRspCb_SDK *)v20))
        {
          CFTypeID v15 = *(NSObject **)(v5 + 40);
          if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          {
LABEL_22:
            CFMutableDictionaryRef Mutable = 0;
LABEL_23:
            int v12 = 0;
LABEL_24:
            uint64_t v13 = 0;
            *(void *)long long __p = 0;
            goto LABEL_25;
          }
          *(_WORD *)long long __p = 0;
          CFTypeRef v16 = "Failed to get link quality report (unpack error)";
        }
        else
        {
          if (!**((_DWORD **)&v21 + 1))
          {
            CFMutableDictionaryRef Mutable = 0;
            int v12 = *(_DWORD *)v21;
            goto LABEL_24;
          }
          CFTypeID v15 = *(NSObject **)(v5 + 40);
          if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
            goto LABEL_22;
          }
          *(_WORD *)long long __p = 0;
          CFTypeRef v16 = "Failed to get link quality report (result error)";
        }
        _os_log_error_impl(&dword_235DB9000, v15, OS_LOG_TYPE_ERROR, v16, (uint8_t *)__p, 2u);
        goto LABEL_22;
      }
    }
  }
}

void sub_235E1EA8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, CFTypeRef cf, char a16)
{
  if (cf) {
    CFRelease(cf);
  }
  MEMORY[0x237DF6A50](&a16);
  if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c90_ZTSNSt3__110shared_ptrIZN4coex16ARICommandDriver20pollLinkQuality_syncENS1_5SubIdEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c90_ZTSNSt3__110shared_ptrIZN4coex16ARICommandDriver20pollLinkQuality_syncENS1_5SubIdEE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::pollLinkQuality_sync(coex::SubId)::$_0,std::allocator<coex::ARICommandDriver::pollLinkQuality_sync(coex::SubId)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93EC48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::pollLinkQuality_sync(coex::SubId)::$_0,std::allocator<coex::ARICommandDriver::pollLinkQuality_sync(coex::SubId)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93EC48;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::pollLinkQuality_sync(coex::SubId)::$_0,std::allocator<coex::ARICommandDriver::pollLinkQuality_sync(coex::SubId)::$_0>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN3ice6detail12wrapCallbackIZN4coex16ARICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS2_5SubIdENS2_13CommandDriver8CallbackEE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    CFNumberRef v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
    {
      uint64_t v5 = *(void **)(v2 + 16);
      CFAllocatorRef v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        CFTypeID v7 = v6;
        if (!*(void *)v2)
        {
LABEL_37:
          if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v26[3] = v8;
        long long v27 = v8;
        v26[1] = v8;
        _OWORD v26[2] = v8;
        v26[0] = v8;
        AriSdk::ARI_CsiIdcSetRTConfigRspCb_SDK::ARI_CsiIdcSetRTConfigRspCb_SDK((AriSdk::ARI_CsiIdcSetRTConfigRspCb_SDK *)v26, a2);
        CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        __p[23] = 10;
        strcpy(__p, "set policy");
        coex::checkError(&cf, (AriSdk::MsgBase *)v26, 1224802304, (uint64_t)__p);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
        if (cf) {
          BOOL v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          BOOL v10 = 0;
        }
        if (!v10)
        {
          if (AriSdk::ARI_CsiIdcSetRTConfigRspCb_SDK::unpack((AriSdk::ARI_CsiIdcSetRTConfigRspCb_SDK *)v26))
          {
            *(void *)long long __p = operator new(0x28uLL);
            *(_OWORD *)&__p[8] = xmmword_235E75030;
            strcpy(*(char **)__p, "Failed to set policy (unpack error)");
            CreateError();
            CFTypeRef v11 = cf;
            CFTypeRef cf = v23;
            CFTypeRef v23 = 0;
            if (!v11) {
              goto LABEL_16;
            }
            goto LABEL_13;
          }
          if (**((_DWORD **)&v27 + 1))
          {
            *(void *)long long __p = operator new(0x28uLL);
            *(_OWORD *)&__p[8] = xmmword_235E75030;
            strcpy(*(char **)__p, "Failed to set policy (result error)");
            CreateError();
            CFTypeRef v11 = cf;
            CFTypeRef cf = v23;
            CFTypeRef v23 = 0;
            if (!v11)
            {
LABEL_16:
              if ((__p[23] & 0x80000000) != 0) {
                operator delete(*(void **)__p);
              }
              goto LABEL_18;
            }
LABEL_13:
            CFRelease(v11);
            goto LABEL_16;
          }
          uint64_t v17 = (CFTypeRef *)(v2 + 40);
          char v18 = (const void **)(v5 + 28);
          if (v5 + 28 != (void *)(v2 + 40))
          {
            CFTypeRef v19 = *v17;
            if (*v17) {
              CFRetain(*v17);
            }
            long long v20 = *v18;
            std::__shared_weak_count *v18 = v19;
            if (v20) {
              CFRelease(v20);
            }
          }
        }
LABEL_18:
        CFTypeRef v12 = cf;
        if (cf) {
          uint64_t v13 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          uint64_t v13 = 0;
        }
        if (v13)
        {
          uint64_t v14 = (const void *)v5[28];
          v5[28] = 0;
          if (v14)
          {
            CFRelease(v14);
            CFTypeRef v12 = cf;
          }
        }
        CFTypeRef v23 = v12;
        if (v12)
        {
          CFRetain(v12);
          unint64_t v22 = 0;
          coex::CommandDriver::Callback::operator()(v2 + 24, &v23, &v22);
          CFRelease(v12);
          if (!*(unsigned char *)(v2 + 48)) {
            goto LABEL_32;
          }
        }
        else
        {
          unint64_t v22 = 0;
          coex::CommandDriver::Callback::operator()(v2 + 24, &v23, &v22);
          if (!*(unsigned char *)(v2 + 48))
          {
LABEL_32:
            if (Mutable) {
              CFRelease(Mutable);
            }
            if (cf) {
              CFRelease(cf);
            }
            MEMORY[0x237DF5F60](v26);
            goto LABEL_37;
          }
        }
        int v15 = *(unsigned __int8 *)(v2 + 49);
        CFTypeRef v16 = *(const void **)(v2 + 40);
        long long v21 = v16;
        if (v16) {
          CFRetain(v16);
        }
        coex::ARICommandDriver::setGPSState_sync(v5, v15 != 0, &v21);
        if (v16) {
          CFRelease(v16);
        }
        goto LABEL_32;
      }
    }
  }
}

void sub_235E1F004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, CFTypeRef cf, char a20)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (v21) {
    CFRelease(v21);
  }
  if (cf) {
    CFRelease(cf);
  }
  MEMORY[0x237DF5F60](&a20);
  if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c154_ZTSNSt3__110shared_ptrIZN4coex16ARICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS1_5SubIdENS1_13CommandDriver8CallbackEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c154_ZTSNSt3__110shared_ptrIZN4coex16ARICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS1_5SubIdENS1_13CommandDriver8CallbackEE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::setPolicy_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0,std::allocator<coex::ARICommandDriver::setPolicy_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93ECC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::setPolicy_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0,std::allocator<coex::ARICommandDriver::setPolicy_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93ECC8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::setPolicy_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0,std::allocator<coex::ARICommandDriver::setPolicy_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0>>::__on_zero_shared(void *a1)
{
  uint64_t v2 = (const void *)a1[8];
  if (v2) {
    CFRelease(v2);
  }
  CFNumberRef v3 = a1[7];
  if (v3) {
    dispatch_release(v3);
  }
  CFNumberRef v4 = (const void *)a1[6];
  if (v4) {
    _Block_release(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
  {
    std::__shared_weak_count::__release_weak(v5);
  }
}

void ___ZN3ice6detail12wrapCallbackIZN4coex16ARICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS2_5SubIdENS2_13CommandDriver8CallbackEE3__1vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    CFNumberRef v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      uint64_t v5 = std::__shared_weak_count::lock(v3);
      if (v5)
      {
        CFAllocatorRef v6 = v5;
        if (!*v2)
        {
LABEL_23:
          if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
          return;
        }
        *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v15[3] = v7;
        long long v16 = v7;
        v15[1] = v7;
        void v15[2] = v7;
        v15[0] = v7;
        AriSdk::ARI_CsiIdcSetTxPowerLimitRspCb_SDK::ARI_CsiIdcSetTxPowerLimitRspCb_SDK((AriSdk::ARI_CsiIdcSetTxPowerLimitRspCb_SDK *)v15, a2);
        CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        long long __p = operator new(0x20uLL);
        long long v13 = xmmword_235E71980;
        strcpy((char *)__p, "set txpower-limit threshold");
        coex::checkError(&cf, (AriSdk::MsgBase *)v15, 1225261056, (uint64_t)&__p);
        if (SHIBYTE(v13) < 0) {
          operator delete(__p);
        }
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
        if (cf) {
          CFNumberRef v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          CFNumberRef v9 = 0;
        }
        if (!v9)
        {
          if (AriSdk::ARI_CsiIdcSetTxPowerLimitRspCb_SDK::unpack((AriSdk::ARI_CsiIdcSetTxPowerLimitRspCb_SDK *)v15))
          {
            long long __p = operator new(0x38uLL);
            long long v13 = xmmword_235E75040;
            strcpy((char *)__p, "Failed to set txpower-limit threshold (unpack error)");
            CreateError();
            CFTypeRef v10 = cf;
            CFTypeRef cf = v11;
            if (!v10) {
              goto LABEL_16;
            }
            goto LABEL_13;
          }
          if (**((_DWORD **)&v16 + 1))
          {
            long long __p = operator new(0x38uLL);
            long long v13 = xmmword_235E75040;
            strcpy((char *)__p, "Failed to set txpower-limit threshold (result error)");
            CreateError();
            CFTypeRef v10 = cf;
            CFTypeRef cf = v11;
            if (!v10)
            {
LABEL_16:
              if (SHIBYTE(v13) < 0) {
                operator delete(__p);
              }
              goto LABEL_18;
            }
LABEL_13:
            CFRelease(v10);
            goto LABEL_16;
          }
        }
LABEL_18:
        if (Mutable) {
          CFRelease(Mutable);
        }
        if (cf) {
          CFRelease(cf);
        }
        MEMORY[0x237DF65E0](v15);
        goto LABEL_23;
      }
    }
  }
}

void sub_235E1F520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, CFTypeRef cf, char a18)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (v19) {
    CFRelease(v19);
  }
  if (cf) {
    CFRelease(cf);
  }
  MEMORY[0x237DF65E0](&a18);
  if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c154_ZTSNSt3__110shared_ptrIZN4coex16ARICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS1_5SubIdENS1_13CommandDriver8CallbackEE3__1EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c154_ZTSNSt3__110shared_ptrIZN4coex16ARICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS1_5SubIdENS1_13CommandDriver8CallbackEE3__1EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::setPolicy_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_1,std::allocator<coex::ARICommandDriver::setPolicy_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_1>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93ED48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::setPolicy_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_1,std::allocator<coex::ARICommandDriver::setPolicy_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_1>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93ED48;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::setPolicy_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_1,std::allocator<coex::ARICommandDriver::setPolicy_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_1>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN3ice6detail12wrapCallbackIZN4coex16ARICommandDriver16setGPSState_syncEbN3ctu2cf11CFSharedRefIK14__CFDictionaryEEE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    CFNumberRef v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      uint64_t v5 = v2[2];
      CFAllocatorRef v6 = std::__shared_weak_count::lock(v3);
      if (v6)
      {
        long long v7 = v6;
        if (!*v2)
        {
LABEL_25:
          if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          return;
        }
        long long v20 = (_DWORD *)0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        _OWORD v19[2] = v8;
        v19[3] = v8;
        v19[0] = v8;
        v19[1] = v8;
        AriSdk::ARI_CsiIceGpsStateRspCb_SDK::ARI_CsiIceGpsStateRspCb_SDK((AriSdk::ARI_CsiIceGpsStateRspCb_SDK *)v19, a2);
        CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        __p[23] = 13;
        strcpy(__p, "set gps state");
        coex::checkError(&cf, (AriSdk::MsgBase *)v19, -183566336, (uint64_t)__p);
        if ((__p[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)__p);
          if (cf) {
            CFTypeRef v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          }
          else {
            CFTypeRef v10 = 0;
          }
          if (!v10)
          {
LABEL_15:
            if (AriSdk::ARI_CsiIceGpsStateRspCb_SDK::unpack((AriSdk::ARI_CsiIceGpsStateRspCb_SDK *)v19))
            {
              *(void *)long long __p = operator new(0x28uLL);
              *(_OWORD *)&__p[8] = xmmword_235E75050;
              strcpy(*(char **)__p, "Failed to set gps state (unpack error)");
              CreateError();
              CFTypeRef v11 = cf;
              CFTypeRef cf = v16;
              if (!v11) {
                goto LABEL_20;
              }
            }
            else
            {
              if (!*v20)
              {
                CFTypeRef v12 = (CFTypeRef *)(v2 + 3);
                long long v13 = (const void **)(v5 + 224);
                if ((void *)(v5 + 224) != v2 + 3)
                {
                  CFTypeRef v14 = *v12;
                  if (*v12) {
                    CFRetain(*v12);
                  }
                  int v15 = *v13;
                  *long long v13 = v14;
                  if (v15) {
                    CFRelease(v15);
                  }
                }
                goto LABEL_22;
              }
              *(void *)long long __p = operator new(0x28uLL);
              *(_OWORD *)&__p[8] = xmmword_235E75050;
              strcpy(*(char **)__p, "Failed to set gps state (result error)");
              CreateError();
              CFTypeRef v11 = cf;
              CFTypeRef cf = v16;
              if (!v11) {
                goto LABEL_20;
              }
            }
            CFRelease(v11);
LABEL_20:
            if ((__p[23] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
          }
        }
        else
        {
          if (cf) {
            CFNumberRef v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          }
          else {
            CFNumberRef v9 = 0;
          }
          if (!v9) {
            goto LABEL_15;
          }
        }
LABEL_22:
        if (cf) {
          CFRelease(cf);
        }
        MEMORY[0x237DF59D0](v19);
        goto LABEL_25;
      }
    }
  }
}

void sub_235E1F9CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, CFTypeRef cf, char a18)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (cf) {
    CFRelease(cf);
  }
  MEMORY[0x237DF59D0](&a18);
  if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c117_ZTSNSt3__110shared_ptrIZN4coex16ARICommandDriver16setGPSState_syncEbN3ctu2cf11CFSharedRefIK14__CFDictionaryEEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c117_ZTSNSt3__110shared_ptrIZN4coex16ARICommandDriver16setGPSState_syncEbN3ctu2cf11CFSharedRefIK14__CFDictionaryEEE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::setGPSState_sync(BOOL,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0,std::allocator<coex::ARICommandDriver::setGPSState_sync(BOOL,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93EDC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::setGPSState_sync(BOOL,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0,std::allocator<coex::ARICommandDriver::setGPSState_sync(BOOL,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93EDC8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::setGPSState_sync(BOOL,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0,std::allocator<coex::ARICommandDriver::setGPSState_sync(BOOL,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 48);
  if (v2) {
    CFRelease(v2);
  }
  CFNumberRef v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void ___ZN3ice6detail12wrapCallbackIZN4coex16ARICommandDriver18setWiFiStatus_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS2_13CommandDriver8CallbackEE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    CFNumberRef v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      uint64_t v5 = std::__shared_weak_count::lock(v3);
      if (v5)
      {
        CFAllocatorRef v6 = v5;
        if (!*v2) {
          goto LABEL_28;
        }
        *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v17[3] = v7;
        long long v18 = v7;
        v17[1] = v7;
        v17[2] = v7;
        v17[0] = v7;
        AriSdk::ARI_CsiIdcSetWifiStatusRspCb_SDK::ARI_CsiIdcSetWifiStatusRspCb_SDK((AriSdk::ARI_CsiIdcSetWifiStatusRspCb_SDK *)v17, a2);
        CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        __p[23] = 15;
        strcpy(__p, "set wifi status");
        coex::checkError(&cf, (AriSdk::MsgBase *)v17, 1225162752, (uint64_t)__p);
        if ((__p[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)__p);
          if (cf) {
            CFNumberRef v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          }
          else {
            CFNumberRef v9 = 0;
          }
          if (!v9)
          {
LABEL_15:
            if (AriSdk::ARI_CsiIdcSetWifiStatusRspCb_SDK::unpack((AriSdk::ARI_CsiIdcSetWifiStatusRspCb_SDK *)v17))
            {
              *(void *)long long __p = operator new(0x30uLL);
              *(_OWORD *)&__p[8] = xmmword_235E75060;
              strcpy(*(char **)__p, "Failed to set wifi status (unpack error)");
              CreateError();
              CFTypeRef v10 = cf;
              CFTypeRef cf = v14;
              CFTypeRef v14 = 0;
              if (!v10) {
                goto LABEL_20;
              }
            }
            else
            {
              if (!**((_DWORD **)&v18 + 1)) {
                goto LABEL_22;
              }
              *(void *)long long __p = operator new(0x30uLL);
              *(_OWORD *)&__p[8] = xmmword_235E75060;
              strcpy(*(char **)__p, "Failed to set wifi status (result error)");
              CreateError();
              CFTypeRef v10 = cf;
              CFTypeRef cf = v14;
              CFTypeRef v14 = 0;
              if (!v10) {
                goto LABEL_20;
              }
            }
            CFRelease(v10);
LABEL_20:
            if ((__p[23] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
          }
        }
        else
        {
          if (cf) {
            long long v8 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          }
          else {
            long long v8 = 0;
          }
          if (!v8) {
            goto LABEL_15;
          }
        }
LABEL_22:
        CFTypeRef v11 = cf;
        CFTypeRef v14 = cf;
        if (cf)
        {
          CFRetain(cf);
          long long v13 = 0;
          coex::CommandDriver::Callback::operator()((uint64_t)(v2 + 3), &v14, &v13);
          CFRelease(v11);
          CFTypeRef v12 = cf;
          if (!cf) {
            goto LABEL_27;
          }
        }
        else
        {
          long long v13 = 0;
          coex::CommandDriver::Callback::operator()((uint64_t)(v2 + 3), &v14, &v13);
          CFTypeRef v12 = cf;
          if (!cf)
          {
LABEL_27:
            MEMORY[0x237DF63A0](v17);
LABEL_28:
            if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
            return;
          }
        }
        CFRelease(v12);
        goto LABEL_27;
      }
    }
  }
}

void sub_235E1FEA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, CFTypeRef cf, char a18)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (cf) {
    CFRelease(cf);
  }
  MEMORY[0x237DF63A0](&a18);
  if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c147_ZTSNSt3__110shared_ptrIZN4coex16ARICommandDriver18setWiFiStatus_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS1_13CommandDriver8CallbackEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c147_ZTSNSt3__110shared_ptrIZN4coex16ARICommandDriver18setWiFiStatus_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS1_13CommandDriver8CallbackEE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::setWiFiStatus_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::CommandDriver::Callback)::$_0,std::allocator<coex::ARICommandDriver::setWiFiStatus_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::CommandDriver::Callback)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93EE48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::setWiFiStatus_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::CommandDriver::Callback)::$_0,std::allocator<coex::ARICommandDriver::setWiFiStatus_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::CommandDriver::Callback)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93EE48;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::setWiFiStatus_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::CommandDriver::Callback)::$_0,std::allocator<coex::ARICommandDriver::setWiFiStatus_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::CommandDriver::Callback)::$_0>>::__on_zero_shared(void *a1)
{
  uint64_t v2 = (const void *)a1[8];
  if (v2) {
    CFRelease(v2);
  }
  CFNumberRef v3 = a1[7];
  if (v3) {
    dispatch_release(v3);
  }
  CFNumberRef v4 = (const void *)a1[6];
  if (v4) {
    _Block_release(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
  {
    std::__shared_weak_count::__release_weak(v5);
  }
}

void ___ZN3ice6detail12wrapCallbackIZN4coex16ARICommandDriver17setLAAConfig_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS2_5SubIdENS2_13CommandDriver8CallbackEE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    CFNumberRef v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      uint64_t v5 = std::__shared_weak_count::lock(v3);
      if (v5)
      {
        CFAllocatorRef v6 = v5;
        if (!*v2) {
          goto LABEL_28;
        }
        *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v17[3] = v7;
        long long v18 = v7;
        v17[1] = v7;
        v17[2] = v7;
        v17[0] = v7;
        AriSdk::ARI_CsiIdcSetLaaConfigRspCb_SDK::ARI_CsiIdcSetLaaConfigRspCb_SDK((AriSdk::ARI_CsiIdcSetLaaConfigRspCb_SDK *)v17, a2);
        CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        __p[23] = 14;
        strcpy(__p, "set LAA config");
        coex::checkError(&cf, (AriSdk::MsgBase *)v17, 1225293824, (uint64_t)__p);
        if ((__p[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)__p);
          if (cf) {
            CFNumberRef v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          }
          else {
            CFNumberRef v9 = 0;
          }
          if (!v9)
          {
LABEL_15:
            if (AriSdk::ARI_CsiIdcSetLaaConfigRspCb_SDK::unpack((AriSdk::ARI_CsiIdcSetLaaConfigRspCb_SDK *)v17))
            {
              *(void *)long long __p = operator new(0x28uLL);
              *(_OWORD *)&__p[8] = xmmword_235E75020;
              strcpy(*(char **)__p, "Failed to set LAA config (unpack error)");
              CreateError();
              CFTypeRef v10 = cf;
              CFTypeRef cf = v14;
              CFTypeRef v14 = 0;
              if (!v10) {
                goto LABEL_20;
              }
            }
            else
            {
              if (!**((_DWORD **)&v18 + 1)) {
                goto LABEL_22;
              }
              *(void *)long long __p = operator new(0x28uLL);
              *(_OWORD *)&__p[8] = xmmword_235E75020;
              strcpy(*(char **)__p, "Failed to set LAA config (result error)");
              CreateError();
              CFTypeRef v10 = cf;
              CFTypeRef cf = v14;
              CFTypeRef v14 = 0;
              if (!v10) {
                goto LABEL_20;
              }
            }
            CFRelease(v10);
LABEL_20:
            if ((__p[23] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
          }
        }
        else
        {
          if (cf) {
            long long v8 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          }
          else {
            long long v8 = 0;
          }
          if (!v8) {
            goto LABEL_15;
          }
        }
LABEL_22:
        CFTypeRef v11 = cf;
        CFTypeRef v14 = cf;
        if (cf)
        {
          CFRetain(cf);
          long long v13 = 0;
          coex::CommandDriver::Callback::operator()((uint64_t)(v2 + 3), &v14, &v13);
          CFRelease(v11);
          CFTypeRef v12 = cf;
          if (!cf) {
            goto LABEL_27;
          }
        }
        else
        {
          long long v13 = 0;
          coex::CommandDriver::Callback::operator()((uint64_t)(v2 + 3), &v14, &v13);
          CFTypeRef v12 = cf;
          if (!cf)
          {
LABEL_27:
            MEMORY[0x237DF61C0](v17);
LABEL_28:
            if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
            return;
          }
        }
        CFRelease(v12);
        goto LABEL_27;
      }
    }
  }
}

void sub_235E20398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, CFTypeRef cf, char a18)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (cf) {
    CFRelease(cf);
  }
  MEMORY[0x237DF61C0](&a18);
  if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c157_ZTSNSt3__110shared_ptrIZN4coex16ARICommandDriver17setLAAConfig_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS1_5SubIdENS1_13CommandDriver8CallbackEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c157_ZTSNSt3__110shared_ptrIZN4coex16ARICommandDriver17setLAAConfig_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS1_5SubIdENS1_13CommandDriver8CallbackEE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::setLAAConfig_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0,std::allocator<coex::ARICommandDriver::setLAAConfig_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93EEC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::setLAAConfig_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0,std::allocator<coex::ARICommandDriver::setLAAConfig_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93EEC8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::setLAAConfig_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0,std::allocator<coex::ARICommandDriver::setLAAConfig_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0>>::__on_zero_shared(void *a1)
{
  uint64_t v2 = (const void *)a1[8];
  if (v2) {
    CFRelease(v2);
  }
  CFNumberRef v3 = a1[7];
  if (v3) {
    dispatch_release(v3);
  }
  CFNumberRef v4 = (const void *)a1[6];
  if (v4) {
    _Block_release(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
  {
    std::__shared_weak_count::__release_weak(v5);
  }
}

void ___ZN3ice6detail12wrapCallbackIZN4coex16ARICommandDriver25setFCMBCMAntennaMode_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS2_13CommandDriver8CallbackEE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    CFNumberRef v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      uint64_t v5 = std::__shared_weak_count::lock(v3);
      if (v5)
      {
        CFAllocatorRef v6 = v5;
        if (!*v2) {
          goto LABEL_28;
        }
        CFTypeRef v19 = (_DWORD *)0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v18[2] = v7;
        v18[3] = v7;
        v18[0] = v7;
        v18[1] = v7;
        AriSdk::ARI_IBIRfSetAntennaPortMappingResp_SDK::ARI_IBIRfSetAntennaPortMappingResp_SDK((AriSdk::ARI_IBIRfSetAntennaPortMappingResp_SDK *)v18, a2);
        CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        long long __p = operator new(0x20uLL);
        long long v16 = xmmword_235E75070;
        strcpy((char *)__p, "set FCM BCM Antenna mode");
        coex::checkError(&cf, (AriSdk::MsgBase *)v18, 84508672, (uint64_t)&__p);
        if (SHIBYTE(v16) < 0)
        {
          operator delete(__p);
          if (cf) {
            CFNumberRef v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          }
          else {
            CFNumberRef v9 = 0;
          }
          if (!v9)
          {
LABEL_15:
            if (AriSdk::ARI_IBIRfSetAntennaPortMappingResp_SDK::unpack((AriSdk::ARI_IBIRfSetAntennaPortMappingResp_SDK *)v18))
            {
              long long __p = operator new(0x38uLL);
              long long v16 = xmmword_235E75080;
              strcpy((char *)__p, "Failed to set FCM BCM Antenna mode (unpack error)");
              CreateError();
              CFTypeRef v10 = cf;
              CFTypeRef cf = v14;
              CFTypeRef v14 = 0;
              if (!v10) {
                goto LABEL_20;
              }
            }
            else
            {
              if (!*v19) {
                goto LABEL_22;
              }
              long long __p = operator new(0x38uLL);
              long long v16 = xmmword_235E75080;
              strcpy((char *)__p, "Failed to set FCM BCM Antenna mode (status error)");
              CreateError();
              CFTypeRef v10 = cf;
              CFTypeRef cf = v14;
              CFTypeRef v14 = 0;
              if (!v10) {
                goto LABEL_20;
              }
            }
            CFRelease(v10);
LABEL_20:
            if (SHIBYTE(v16) < 0) {
              operator delete(__p);
            }
          }
        }
        else
        {
          if (cf) {
            long long v8 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          }
          else {
            long long v8 = 0;
          }
          if (!v8) {
            goto LABEL_15;
          }
        }
LABEL_22:
        CFTypeRef v11 = cf;
        CFTypeRef v14 = cf;
        if (cf)
        {
          CFRetain(cf);
          long long v13 = 0;
          coex::CommandDriver::Callback::operator()((uint64_t)(v2 + 3), &v14, &v13);
          CFRelease(v11);
          CFTypeRef v12 = cf;
          if (!cf) {
            goto LABEL_27;
          }
        }
        else
        {
          long long v13 = 0;
          coex::CommandDriver::Callback::operator()((uint64_t)(v2 + 3), &v14, &v13);
          CFTypeRef v12 = cf;
          if (!cf)
          {
LABEL_27:
            MEMORY[0x237DF6960](v18);
LABEL_28:
            if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
            return;
          }
        }
        CFRelease(v12);
        goto LABEL_27;
      }
    }
  }
}

void sub_235E208B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, CFTypeRef cf, char a18)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (cf) {
    CFRelease(cf);
  }
  MEMORY[0x237DF6960](&a18);
  if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c154_ZTSNSt3__110shared_ptrIZN4coex16ARICommandDriver25setFCMBCMAntennaMode_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS1_13CommandDriver8CallbackEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c154_ZTSNSt3__110shared_ptrIZN4coex16ARICommandDriver25setFCMBCMAntennaMode_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS1_13CommandDriver8CallbackEE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::setFCMBCMAntennaMode_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::CommandDriver::Callback)::$_0,std::allocator<coex::ARICommandDriver::setFCMBCMAntennaMode_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::CommandDriver::Callback)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93EF48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::setFCMBCMAntennaMode_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::CommandDriver::Callback)::$_0,std::allocator<coex::ARICommandDriver::setFCMBCMAntennaMode_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::CommandDriver::Callback)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93EF48;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::setFCMBCMAntennaMode_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::CommandDriver::Callback)::$_0,std::allocator<coex::ARICommandDriver::setFCMBCMAntennaMode_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::CommandDriver::Callback)::$_0>>::__on_zero_shared(void *a1)
{
  uint64_t v2 = (const void *)a1[8];
  if (v2) {
    CFRelease(v2);
  }
  CFNumberRef v3 = a1[7];
  if (v3) {
    dispatch_release(v3);
  }
  CFNumberRef v4 = (const void *)a1[6];
  if (v4) {
    _Block_release(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
  {
    std::__shared_weak_count::__release_weak(v5);
  }
}

void ___ZN3ice6detail12wrapCallbackIZN4coex16ARICommandDriver23setLinkQualityMode_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEES9_NS2_5SubIdENS2_13CommandDriver8CallbackEE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    CFNumberRef v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      uint64_t v5 = std::__shared_weak_count::lock(v3);
      if (v5)
      {
        CFAllocatorRef v6 = v5;
        if (!*v2)
        {
LABEL_26:
          if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
          return;
        }
        *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v16[3] = v7;
        long long v17 = v7;
        v16[1] = v7;
        v16[2] = v7;
        v16[0] = v7;
        AriSdk::ARI_CsiIdcRTSetLinkQualityReportRspCb_SDK::ARI_CsiIdcRTSetLinkQualityReportRspCb_SDK((AriSdk::ARI_CsiIdcRTSetLinkQualityReportRspCb_SDK *)v16, a2);
        CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        __p[23] = 16;
        strcpy(__p, "set link quality");
        coex::checkError(&cf, (AriSdk::MsgBase *)v16, 1224835072, (uint64_t)__p);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
        if (cf) {
          CFNumberRef v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        }
        else {
          CFNumberRef v9 = 0;
        }
        if (v9)
        {
LABEL_18:
          CFTypeRef v11 = cf;
          CFTypeRef v13 = cf;
          if (cf)
          {
            CFRetain(cf);
            CFTypeRef v12 = 0;
            coex::CommandDriver::Callback::operator()((uint64_t)(v2 + 3), &v13, &v12);
            CFRelease(v11);
            if (!Mutable) {
              goto LABEL_23;
            }
          }
          else
          {
            CFTypeRef v12 = 0;
            coex::CommandDriver::Callback::operator()((uint64_t)(v2 + 3), &v13, &v12);
            if (!Mutable)
            {
LABEL_23:
              if (cf) {
                CFRelease(cf);
              }
              MEMORY[0x237DF6A80](v16);
              goto LABEL_26;
            }
          }
          CFRelease(Mutable);
          goto LABEL_23;
        }
        if (AriSdk::ARI_CsiIdcRTSetLinkQualityReportRspCb_SDK::unpack((AriSdk::ARI_CsiIdcRTSetLinkQualityReportRspCb_SDK *)v16))
        {
          *(void *)long long __p = operator new(0x30uLL);
          *(_OWORD *)&__p[8] = xmmword_235E75090;
          strcpy(*(char **)__p, "Failed to set link quality (unpack error)");
          CreateError();
          CFTypeRef v10 = cf;
          CFTypeRef cf = v13;
          CFTypeRef v13 = 0;
          if (!v10) {
            goto LABEL_16;
          }
        }
        else
        {
          if (!**((_DWORD **)&v17 + 1)) {
            goto LABEL_18;
          }
          *(void *)long long __p = operator new(0x30uLL);
          *(_OWORD *)&__p[8] = xmmword_235E75090;
          strcpy(*(char **)__p, "Failed to set link quality (result error)");
          CreateError();
          CFTypeRef v10 = cf;
          CFTypeRef cf = v13;
          CFTypeRef v13 = 0;
          if (!v10) {
            goto LABEL_16;
          }
        }
        CFRelease(v10);
LABEL_16:
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        goto LABEL_18;
      }
    }
  }
}

void sub_235E20DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, CFTypeRef cf, char a18)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (v19) {
    CFRelease(v19);
  }
  if (cf) {
    CFRelease(cf);
  }
  MEMORY[0x237DF6A80](&a18);
  if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c166_ZTSNSt3__110shared_ptrIZN4coex16ARICommandDriver23setLinkQualityMode_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEES8_NS1_5SubIdENS1_13CommandDriver8CallbackEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c166_ZTSNSt3__110shared_ptrIZN4coex16ARICommandDriver23setLinkQualityMode_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEES8_NS1_5SubIdENS1_13CommandDriver8CallbackEE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::setLinkQualityMode_sync(ctu::cf::CFSharedRef<__CFDictionary const>,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0,std::allocator<coex::ARICommandDriver::setLinkQualityMode_sync(ctu::cf::CFSharedRef<__CFDictionary const>,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93EFC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::setLinkQualityMode_sync(ctu::cf::CFSharedRef<__CFDictionary const>,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0,std::allocator<coex::ARICommandDriver::setLinkQualityMode_sync(ctu::cf::CFSharedRef<__CFDictionary const>,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93EFC8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::setLinkQualityMode_sync(ctu::cf::CFSharedRef<__CFDictionary const>,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0,std::allocator<coex::ARICommandDriver::setLinkQualityMode_sync(ctu::cf::CFSharedRef<__CFDictionary const>,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0>>::__on_zero_shared(void *a1)
{
  uint64_t v2 = a1[7];
  if (v2) {
    dispatch_release(v2);
  }
  CFNumberRef v3 = (const void *)a1[6];
  if (v3) {
    _Block_release(v3);
  }
  CFNumberRef v4 = (std::__shared_weak_count *)a1[4];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void ___ZN3ice6detail12wrapCallbackIZN4coex16ARICommandDriver26setScanFreqBandFilter_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS2_5SubIdENS2_13CommandDriver8CallbackEE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    CFNumberRef v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      uint64_t v5 = std::__shared_weak_count::lock(v3);
      if (v5)
      {
        CFAllocatorRef v6 = v5;
        if (!*v2) {
          goto LABEL_28;
        }
        *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v18[3] = v7;
        long long v19 = v7;
        v18[1] = v7;
        v18[2] = v7;
        v18[0] = v7;
        AriSdk::ARI_CsiIdcRTSetScanFreqRspCb_SDK::ARI_CsiIdcRTSetScanFreqRspCb_SDK((AriSdk::ARI_CsiIdcRTSetScanFreqRspCb_SDK *)v18, a2);
        CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        long long __p = operator new(0x20uLL);
        long long v16 = xmmword_235E750A0;
        strcpy((char *)__p, "set scan freq band filter");
        coex::checkError(&cf, (AriSdk::MsgBase *)v18, 1224900608, (uint64_t)&__p);
        if (SHIBYTE(v16) < 0)
        {
          operator delete(__p);
          if (cf) {
            CFNumberRef v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          }
          else {
            CFNumberRef v9 = 0;
          }
          if (!v9)
          {
LABEL_15:
            if (AriSdk::ARI_CsiIdcRTSetScanFreqRspCb_SDK::unpack((AriSdk::ARI_CsiIdcRTSetScanFreqRspCb_SDK *)v18))
            {
              long long __p = operator new(0x38uLL);
              long long v16 = xmmword_235E750B0;
              strcpy((char *)__p, "Failed to set scan freq band filter (unpack error)");
              CreateError();
              CFTypeRef v10 = cf;
              CFTypeRef cf = v14;
              CFTypeRef v14 = 0;
              if (!v10) {
                goto LABEL_20;
              }
            }
            else
            {
              if (!**((_DWORD **)&v19 + 1)) {
                goto LABEL_22;
              }
              long long __p = operator new(0x38uLL);
              long long v16 = xmmword_235E750B0;
              strcpy((char *)__p, "Failed to set scan freq band filter (result error)");
              CreateError();
              CFTypeRef v10 = cf;
              CFTypeRef cf = v14;
              CFTypeRef v14 = 0;
              if (!v10) {
                goto LABEL_20;
              }
            }
            CFRelease(v10);
LABEL_20:
            if (SHIBYTE(v16) < 0) {
              operator delete(__p);
            }
          }
        }
        else
        {
          if (cf) {
            long long v8 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          }
          else {
            long long v8 = 0;
          }
          if (!v8) {
            goto LABEL_15;
          }
        }
LABEL_22:
        CFTypeRef v11 = cf;
        CFTypeRef v14 = cf;
        if (cf)
        {
          CFRetain(cf);
          CFTypeRef v13 = 0;
          coex::CommandDriver::Callback::operator()((uint64_t)(v2 + 3), &v14, &v13);
          CFRelease(v11);
          CFTypeRef v12 = cf;
          if (!cf) {
            goto LABEL_27;
          }
        }
        else
        {
          CFTypeRef v13 = 0;
          coex::CommandDriver::Callback::operator()((uint64_t)(v2 + 3), &v14, &v13);
          CFTypeRef v12 = cf;
          if (!cf)
          {
LABEL_27:
            MEMORY[0x237DF6350](v18);
LABEL_28:
            if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
            return;
          }
        }
        CFRelease(v12);
        goto LABEL_27;
      }
    }
  }
}

void sub_235E212DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, CFTypeRef cf, char a18)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (cf) {
    CFRelease(cf);
  }
  MEMORY[0x237DF6350](&a18);
  if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c166_ZTSNSt3__110shared_ptrIZN4coex16ARICommandDriver26setScanFreqBandFilter_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS1_5SubIdENS1_13CommandDriver8CallbackEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c166_ZTSNSt3__110shared_ptrIZN4coex16ARICommandDriver26setScanFreqBandFilter_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS1_5SubIdENS1_13CommandDriver8CallbackEE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::setScanFreqBandFilter_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0,std::allocator<coex::ARICommandDriver::setScanFreqBandFilter_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93F048;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::setScanFreqBandFilter_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0,std::allocator<coex::ARICommandDriver::setScanFreqBandFilter_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93F048;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::setScanFreqBandFilter_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0,std::allocator<coex::ARICommandDriver::setScanFreqBandFilter_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0>>::__on_zero_shared(void *a1)
{
  uint64_t v2 = a1[7];
  if (v2) {
    dispatch_release(v2);
  }
  CFNumberRef v3 = (const void *)a1[6];
  if (v3) {
    _Block_release(v3);
  }
  CFNumberRef v4 = (std::__shared_weak_count *)a1[4];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void ___ZN3ice6detail12wrapCallbackIZN4coex16ARICommandDriver19setRC1Duration_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS2_5SubIdENS2_13CommandDriver8CallbackEE3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    CFNumberRef v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      uint64_t v5 = std::__shared_weak_count::lock(v3);
      if (v5)
      {
        CFAllocatorRef v6 = v5;
        if (!*v2) {
          goto LABEL_28;
        }
        *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v17[3] = v7;
        long long v18 = v7;
        v17[1] = v7;
        v17[2] = v7;
        v17[0] = v7;
        AriSdk::ARI_CsiIdcSetRadio1RspCb_SDK::ARI_CsiIdcSetRadio1RspCb_SDK((AriSdk::ARI_CsiIdcSetRadio1RspCb_SDK *)v17, a2);
        CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        __p[23] = 16;
        strcpy(__p, "set rc1 duration");
        coex::checkError(&cf, (AriSdk::MsgBase *)v17, 1225326592, (uint64_t)__p);
        if ((__p[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)__p);
          if (cf) {
            CFNumberRef v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          }
          else {
            CFNumberRef v9 = 0;
          }
          if (!v9)
          {
LABEL_15:
            if (AriSdk::ARI_CsiIdcSetRadio1RspCb_SDK::unpack((AriSdk::ARI_CsiIdcSetRadio1RspCb_SDK *)v17))
            {
              *(void *)long long __p = operator new(0x30uLL);
              *(_OWORD *)&__p[8] = xmmword_235E75090;
              strcpy(*(char **)__p, "Failed to set rc1 duration (unpack error)");
              CreateError();
              CFTypeRef v10 = cf;
              CFTypeRef cf = v14;
              CFTypeRef v14 = 0;
              if (!v10) {
                goto LABEL_20;
              }
            }
            else
            {
              if (!**((_DWORD **)&v18 + 1)) {
                goto LABEL_22;
              }
              *(void *)long long __p = operator new(0x30uLL);
              *(_OWORD *)&__p[8] = xmmword_235E75090;
              strcpy(*(char **)__p, "Failed to set rc1 duration (result error)");
              CreateError();
              CFTypeRef v10 = cf;
              CFTypeRef cf = v14;
              CFTypeRef v14 = 0;
              if (!v10) {
                goto LABEL_20;
              }
            }
            CFRelease(v10);
LABEL_20:
            if ((__p[23] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
          }
        }
        else
        {
          if (cf) {
            long long v8 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          }
          else {
            long long v8 = 0;
          }
          if (!v8) {
            goto LABEL_15;
          }
        }
LABEL_22:
        CFTypeRef v11 = cf;
        CFTypeRef v14 = cf;
        if (cf)
        {
          CFRetain(cf);
          CFTypeRef v13 = 0;
          coex::CommandDriver::Callback::operator()((uint64_t)(v2 + 2), &v14, &v13);
          CFRelease(v11);
          CFTypeRef v12 = cf;
          if (!cf) {
            goto LABEL_27;
          }
        }
        else
        {
          CFTypeRef v13 = 0;
          coex::CommandDriver::Callback::operator()((uint64_t)(v2 + 2), &v14, &v13);
          CFTypeRef v12 = cf;
          if (!cf)
          {
LABEL_27:
            MEMORY[0x237DF5B90](v17);
LABEL_28:
            if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
            return;
          }
        }
        CFRelease(v12);
        goto LABEL_27;
      }
    }
  }
}

void sub_235E217C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, CFTypeRef cf, char a18)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (cf) {
    CFRelease(cf);
  }
  MEMORY[0x237DF5B90](&a18);
  if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c159_ZTSNSt3__110shared_ptrIZN4coex16ARICommandDriver19setRC1Duration_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS1_5SubIdENS1_13CommandDriver8CallbackEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c159_ZTSNSt3__110shared_ptrIZN4coex16ARICommandDriver19setRC1Duration_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS1_5SubIdENS1_13CommandDriver8CallbackEE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::setRC1Duration_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0,std::allocator<coex::ARICommandDriver::setRC1Duration_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93F0C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::setRC1Duration_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0,std::allocator<coex::ARICommandDriver::setRC1Duration_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93F0C8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<coex::ARICommandDriver::setRC1Duration_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0,std::allocator<coex::ARICommandDriver::setRC1Duration_sync(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId,coex::CommandDriver::Callback)::$_0>>::__on_zero_shared(void *a1)
{
  uint64_t v2 = a1[6];
  if (v2) {
    dispatch_release(v2);
  }
  CFNumberRef v3 = (const void *)a1[5];
  if (v3) {
    _Block_release(v3);
  }
  CFNumberRef v4 = (std::__shared_weak_count *)a1[4];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

uint64_t *boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(uint64_t *a1)
{
  if (*(_DWORD *)(*a1 + 292) > *(_DWORD *)(*a1 + 288)) {
    boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::force_cleanup_connections(a1[1], a1[2]);
  }
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::~shared_ptr(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)(a1 + 8);
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

uint64_t boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>>::erase(uint64_t *a1, int *a2, uint64_t **a3)
{
  long long v7 = (uint64_t **)(a1 + 4);
  uint64_t v6 = a1[4];
  if (!v6)
  {
    CFTypeRef v23 = (uint64_t *)a1[10];
    if (v23 != *a3) {
      goto LABEL_80;
    }
    unint64_t v24 = (uint64_t *)v23[1];
    unint64_t v25 = (uint64_t **)(a1 + 4);
    CFTypeRef v10 = a1 + 4;
    if (v24 != a1) {
      goto LABEL_76;
    }
    goto LABEL_55;
  }
  int v8 = *a2;
  int v9 = a2[2];
  CFTypeRef v10 = a1 + 4;
  uint64_t v11 = a1[4];
  if (*a2 == 1)
  {
    do
    {
      while (1)
      {
        int v17 = *(_DWORD *)(v11 + 32);
        BOOL v18 = v17 < 1;
        if (v17 == 1) {
          BOOL v18 = *(_DWORD *)(v11 + 40) < v9;
        }
        if (!v18) {
          break;
        }
        uint64_t v11 = *(void *)(v11 + 8);
        if (!v11) {
          goto LABEL_19;
        }
      }
      CFTypeRef v10 = (uint64_t *)v11;
      uint64_t v11 = *(void *)v11;
    }
    while (v11);
  }
  else
  {
    do
    {
      int v12 = *(_DWORD *)(v11 + 32);
      BOOL v13 = v12 == v8;
      BOOL v14 = v12 < v8;
      if (v12 >= v8) {
        int v15 = (uint64_t *)v11;
      }
      else {
        int v15 = (uint64_t *)(v11 + 8);
      }
      if (v14) {
        long long v16 = v10;
      }
      else {
        long long v16 = (uint64_t *)v11;
      }
      if (v13)
      {
        int v15 = (uint64_t *)v11;
        CFTypeRef v10 = (uint64_t *)v11;
      }
      else
      {
        CFTypeRef v10 = v16;
      }
      uint64_t v11 = *v15;
    }
    while (*v15);
  }
LABEL_19:
  long long v19 = (uint64_t *)v10[6];
  if (v19 != *a3) {
    goto LABEL_80;
  }
  long long v20 = (uint64_t **)(a1 + 4);
  if (v8 == 1)
  {
    long long v21 = (uint64_t *)a1[4];
    while (1)
    {
      int v22 = *((_DWORD *)v21 + 8);
      if (v22 == 1)
      {
        if (v9 < *((_DWORD *)v21 + 10)) {
          goto LABEL_27;
        }
LABEL_22:
        long long v21 = (uint64_t *)v21[1];
        if (!v21) {
          goto LABEL_42;
        }
      }
      else
      {
        if (v22 <= 1) {
          goto LABEL_22;
        }
LABEL_27:
        long long v20 = (uint64_t **)v21;
        long long v21 = (uint64_t *)*v21;
        if (!v21) {
          goto LABEL_42;
        }
      }
    }
  }
  long long v26 = (uint64_t **)a1[4];
  do
  {
    int v27 = *((_DWORD *)v26 + 8);
    CFTypeRef v28 = (uint64_t ***)(v26 + 1);
    BOOL v29 = v8 == v27;
    BOOL v30 = v8 < v27;
    if (v8 >= v27) {
      long long v31 = (uint64_t ***)(v26 + 1);
    }
    else {
      long long v31 = (uint64_t ***)v26;
    }
    if (!v30) {
      long long v26 = v20;
    }
    if (v29) {
      long long v31 = v28;
    }
    else {
      long long v20 = v26;
    }
    long long v26 = *v31;
  }
  while (*v31);
LABEL_42:
  unint64_t v24 = (uint64_t *)v19[1];
  CFTypeRef v32 = a1;
  if (v20 != v7) {
    CFTypeRef v32 = v20[6];
  }
  if (v24 == v32)
  {
LABEL_55:
    long long v37 = (uint64_t *)v10[1];
    if (v37)
    {
      do
      {
        long long v38 = v37;
        long long v37 = (uint64_t *)*v37;
      }
      while (v37);
    }
    else
    {
      CFMutableArrayRef v41 = v10;
      do
      {
        long long v38 = (uint64_t *)v41[2];
        BOOL v13 = *v38 == (void)v41;
        CFMutableArrayRef v41 = v38;
      }
      while (!v13);
    }
    if ((uint64_t *)a1[3] == v10) {
      a1[3] = (uint64_t)v38;
    }
    --a1[5];
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v6, v10);
    operator delete(v10);
    goto LABEL_80;
  }
  int v33 = *a2;
  if (*a2 == 1)
  {
    int v34 = a2[2];
    while (1)
    {
      unint64_t v25 = (uint64_t **)v6;
      int v35 = *(_DWORD *)(v6 + 32);
      if (v35 == 1)
      {
        int v36 = *(_DWORD *)(v6 + 40);
        if (v36 <= v34)
        {
          if (v36 >= v34)
          {
            *(void *)(v6 + 48) = v24;
            goto LABEL_80;
          }
          goto LABEL_53;
        }
LABEL_47:
        uint64_t v6 = *(void *)v6;
        if (!*v25)
        {
          long long v7 = v25;
          goto LABEL_76;
        }
      }
      else
      {
        if (v35 > 1) {
          goto LABEL_47;
        }
LABEL_53:
        uint64_t v6 = *(void *)(v6 + 8);
        if (!v6)
        {
          long long v7 = v25 + 1;
          goto LABEL_76;
        }
      }
    }
  }
  int v39 = *(_DWORD *)(v6 + 32);
  if (v33 == v39) {
    goto LABEL_79;
  }
  while (v33 >= v39)
  {
    if (v39 >= v33) {
      goto LABEL_79;
    }
    uint64_t v40 = *(void *)(v6 + 8);
    if (!v40)
    {
      long long v7 = (uint64_t **)(v6 + 8);
      goto LABEL_75;
    }
LABEL_61:
    int v39 = *(_DWORD *)(v40 + 32);
    uint64_t v6 = v40;
    if (v33 == v39)
    {
      *(void *)(v40 + 48) = v24;
      goto LABEL_80;
    }
  }
  uint64_t v40 = *(void *)v6;
  if (*(void *)v6) {
    goto LABEL_61;
  }
  long long v7 = (uint64_t **)v6;
LABEL_75:
  unint64_t v25 = (uint64_t **)v6;
LABEL_76:
  uint64_t v6 = (uint64_t)operator new(0x38uLL);
  *(void *)(v6 + 32) = *(void *)a2;
  *(_DWORD *)(v6 + 40) = a2[2];
  *(void *)(v6 + 48) = 0;
  *(void *)uint64_t v6 = 0;
  *(void *)(v6 + 8) = 0;
  *(void *)(v6 + 16) = v25;
  std::__shared_weak_count *v7 = (uint64_t *)v6;
  uint64_t v42 = *(void *)a1[3];
  CFTypeID v43 = (uint64_t *)v6;
  if (v42)
  {
    a1[3] = v42;
    CFTypeID v43 = *v7;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)a1[4], v43);
  ++a1[5];
LABEL_79:
  *(void *)(v6 + 48) = v24;
LABEL_80:
  CFArrayRef v44 = *a3;
  uint64_t v45 = **a3;
  uint64_t v46 = (*a3)[1];
  *(void *)(v45 + 8) = v46;
  *(void *)v44[1] = v45;
  --a1[2];
  long long v47 = (atomic_uint *)v44[3];
  if (v47)
  {
    if (atomic_fetch_add(v47 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v47 + 16))(v47);
      if (atomic_fetch_add(v47 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v47 + 24))(v47);
      }
    }
  }
  operator delete(v44);
  return v46;
}

void boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>::lock_next_callable(void *a1)
{
  v44[3] = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  if (*a1 == a1[3]) {
    return;
  }
  if (v1 == a1[1]) {
    goto LABEL_51;
  }
  while (1)
  {
    boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::pop_back_n((void *)(a1[2] + 8), *(void *)(a1[2] + 264));
    *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v42 = v3;
    long long v43 = v3;
    long long v40 = v3;
    long long v41 = v3;
    long long v38 = v3;
    long long v39 = v3;
    long long v36 = v3;
    long long v37 = v3;
    long long v34 = v3;
    long long v35 = v3;
    long long v32 = v3;
    long long v33 = v3;
    uint64_t v4 = *(void *)(*a1 + 16);
    *(void *)&long long v42 = 10;
    *((void *)&v42 + 1) = &v32;
    *(void *)&long long v43 = 0;
    *((void *)&v43 + 1) = v4;
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
    uint64_t v5 = *a1;
    uint64_t v6 = *(void *)(*a1 + 16);
    uint64_t v7 = a1[2];
    int v8 = *(uint64_t **)(v6 + 32);
    if (v8)
    {
      uint64_t v9 = *v8;
      if (*v8 != v8[1])
      {
        CFTypeRef v10 = (void *)(v7 + 8);
        while (1)
        {
          memset(v44, 170, 24);
          boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::apply_visitor<boost::signals2::detail::lock_weak_ptr_visitor const>(v9, (uint64_t)v44);
          if ((*(_DWORD *)v9 ^ (*(int *)v9 >> 31)) == 2)
          {
            if (!(*(unsigned int (**)(void))(**(void **)(v9 + 8) + 24))(*(void *)(v9 + 8))) {
              goto LABEL_9;
            }
          }
          else
          {
            uint64_t v11 = *(void *)(v9 + 16);
            if (v11 && atomic_load_explicit((atomic_uint *volatile)(v11 + 8), memory_order_acquire))
            {
LABEL_9:
              boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::push_back(v10, (uint64_t)v44);
              char v12 = 0;
              if (LODWORD(v44[0]) == SLODWORD(v44[0]) >> 31) {
                goto LABEL_16;
              }
              goto LABEL_10;
            }
          }
          if (*(unsigned char *)(v6 + 24))
          {
            *(unsigned char *)(v6 + 24) = 0;
            boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>((_DWORD *)v6, &v32);
          }
          char v12 = 1;
          if (LODWORD(v44[0]) == SLODWORD(v44[0]) >> 31)
          {
LABEL_16:
            BOOL v13 = (atomic_uint *)v44[2];
            if (v44[2])
            {
              if (atomic_fetch_add((atomic_uint *volatile)(v44[2] + 8), 0xFFFFFFFF) == 1)
              {
                (*(void (**)(atomic_uint *))(*(void *)v13 + 16))(v13);
                if (atomic_fetch_add(v13 + 3, 0xFFFFFFFF) == 1) {
                  (*(void (**)(atomic_uint *))(*(void *)v13 + 24))(v13);
                }
              }
            }
            goto LABEL_20;
          }
LABEL_10:
          if (v44[1]) {
            (*(void (**)(void))(*(void *)v44[1] + 8))(v44[1]);
          }
LABEL_20:
          if ((v12 & 1) == 0)
          {
            v9 += 24;
            if (v9 != *(void *)(*(void *)(v6 + 32) + 8)) {
              continue;
            }
          }
          uint64_t v5 = *a1;
          uint64_t v6 = *(void *)(*a1 + 16);
          uint64_t v7 = a1[2];
          break;
        }
      }
    }
    if (*(unsigned char *)(v6 + 24))
    {
      ++*(_DWORD *)(v7 + 288);
      uint64_t v14 = *(void *)(v6 + 16);
      if (v14)
      {
        if (atomic_load_explicit((atomic_uint *volatile)(v14 + 8), memory_order_acquire))
        {
          int v15 = 1;
          goto LABEL_37;
        }
        uint64_t v7 = a1[2];
        uint64_t v5 = *a1;
      }
      a1[3] = v5;
      if (a1[1] == v5)
      {
        BOOL v18 = *(_DWORD **)(v7 + 296);
        if (v18) {
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v18, &v32);
        }
        int v15 = 0;
        *(void *)(v7 + 296) = 0;
      }
      else
      {
        uint64_t v16 = *(void *)(v5 + 16);
        int v17 = *(_DWORD **)(v7 + 296);
        if (v17) {
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v17, &v32);
        }
        *(void *)(v7 + 296) = v16;
        int v15 = 0;
        if (v16) {
          ++*(_DWORD *)(v16 + 28);
        }
      }
    }
    else
    {
      ++*(_DWORD *)(v7 + 292);
      int v15 = 1;
    }
LABEL_37:
    (*(void (**)(void))(**((void **)&v43 + 1) + 32))(*((void *)&v43 + 1));
    unint64_t v19 = *((void *)&v42 + 1);
    if (*((void *)&v42 + 1))
    {
      if ((uint64_t)v43 - 1 >= 0)
      {
        unint64_t v20 = *((void *)&v42 + 1) + 16 * v43;
        do
        {
          long long v21 = *(atomic_uint **)(v20 - 8);
          if (v21)
          {
            if (atomic_fetch_add(v21 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v21 + 16))(v21);
              if (atomic_fetch_add(v21 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v21 + 24))(v21);
              }
            }
          }
          v20 -= 16;
        }
        while (v20 > v19);
      }
      if ((unint64_t)v42 >= 0xB) {
        operator delete(*((void **)&v42 + 1));
      }
    }
    uint64_t v1 = *a1;
    uint64_t v22 = a1[1];
    if (!v15) {
      break;
    }
    uint64_t v23 = *(void *)(v1 + 8);
    *a1 = v23;
    if (v23 == v22)
    {
      uint64_t v1 = v22;
LABEL_51:
      uint64_t v24 = a1[3];
      if (v24 != v1)
      {
        *(void *)&long long v25 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v25 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v40 = v25;
        long long v41 = v25;
        long long v38 = v25;
        long long v39 = v25;
        long long v36 = v25;
        long long v37 = v25;
        long long v34 = v25;
        long long v35 = v25;
        long long v32 = v25;
        long long v33 = v25;
        uint64_t v26 = *(void *)(v24 + 16);
        *(void *)&long long v42 = 10;
        *((void *)&v42 + 1) = &v32;
        *(void *)&long long v43 = 0;
        *((void *)&v43 + 1) = v26;
        (*(void (**)(uint64_t))(*(void *)v26 + 24))(v26);
        uint64_t v27 = a1[2];
        a1[3] = a1[1];
        CFTypeRef v28 = *(_DWORD **)(v27 + 296);
        if (v28) {
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v28, &v32);
        }
        *(void *)(v27 + 296) = 0;
        (*(void (**)(void))(**((void **)&v43 + 1) + 32))(*((void *)&v43 + 1));
        unint64_t v29 = *((void *)&v42 + 1);
        if (*((void *)&v42 + 1))
        {
          if ((uint64_t)v43 - 1 >= 0)
          {
            unint64_t v30 = *((void *)&v42 + 1) + 16 * v43;
            do
            {
              long long v31 = *(atomic_uint **)(v30 - 8);
              if (v31)
              {
                if (atomic_fetch_add(v31 + 2, 0xFFFFFFFF) == 1)
                {
                  (*(void (**)(atomic_uint *))(*(void *)v31 + 16))(v31);
                  if (atomic_fetch_add(v31 + 3, 0xFFFFFFFF) == 1) {
                    (*(void (**)(atomic_uint *))(*(void *)v31 + 24))(v31);
                  }
                }
              }
              v30 -= 16;
            }
            while (v30 > v29);
          }
          if ((unint64_t)v42 >= 0xB) {
            operator delete(*((void **)&v42 + 1));
          }
        }
      }
      return;
    }
  }
  if (v1 == v22) {
    goto LABEL_51;
  }
}

void sub_235E22430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_235E22444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_235E22624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)va);
  _Unwind_Resume(a1);
}

void boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::force_cleanup_connections(uint64_t a1, uint64_t a2)
{
  long long v3 = (uint64_t **)a1;
  uint64_t v73 = *MEMORY[0x263EF8340];
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v68[8] = v4;
  v68[9] = v4;
  v68[6] = v4;
  v68[7] = v4;
  v68[4] = v4;
  v68[5] = v4;
  v68[2] = v4;
  v68[3] = v4;
  v68[0] = v4;
  v68[1] = v4;
  uint64_t v5 = *(pthread_mutex_t **)(a1 + 24);
  unint64_t v69 = 10;
  long long __p = v68;
  uint64_t v71 = 0;
  uint64_t v72 = v5;
  pthread_mutex_lock(v5);
  if (**v3 != a2) {
    goto LABEL_94;
  }
  uint64_t v6 = v3[1];
  if (!v6 || atomic_load_explicit((atomic_uint *volatile)v6 + 2, memory_order_acquire) != 1)
  {
    uint64_t v7 = (uint64_t *)operator new(0x20uLL);
    int v8 = *v3;
    uint64_t v9 = **v3;
    CFNumberRef v66 = v7;
    CFTypeRef v10 = operator new(0x40uLL);
    uint64_t v11 = v10;
    *CFTypeRef v10 = v10;
    v10[1] = v10;
    v10[2] = 0;
    char v12 = *(void **)(v9 + 8);
    if (v12 != (void *)v9)
    {
      uint64_t v13 = 0;
      uint64_t v14 = v10;
      do
      {
        int v15 = operator new(0x20uLL);
        void v15[2] = v12[2];
        uint64_t v16 = v12[3];
        v15[3] = v16;
        if (v16)
        {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v16 + 8), 1u, memory_order_relaxed);
          uint64_t v14 = (void *)*v11;
          uint64_t v13 = v11[2];
        }
        *int v15 = v14;
        v15[1] = v11;
        v14[1] = v15;
        *uint64_t v11 = v15;
        v11[2] = ++v13;
        char v12 = (void *)v12[1];
        uint64_t v14 = v15;
      }
      while (v12 != (void *)v9);
    }
    long long v64 = v3;
    long long v65 = v8;
    v11[3] = 0;
    int v17 = (void **)(v11 + 3);
    _OWORD v11[4] = 0;
    BOOL v18 = v11 + 4;
    void v11[5] = 0;
    *((unsigned char *)v11 + 48) = *(unsigned char *)(v9 + 48);
    v11[3] = v11 + 4;
    unint64_t v19 = *(void **)(v9 + 24);
    unint64_t v20 = (void *)(v9 + 32);
    if (v19 == (void *)(v9 + 32))
    {
LABEL_10:
      *((unsigned char *)v11 + 56) = *(unsigned char *)(v9 + 56);
      long long v21 = *(void **)(v9 + 24);
      if (v21 != v20)
      {
        uint64_t v22 = (void *)v11[3];
        uint64_t v23 = v11[1];
        do
        {
          v22[6] = v23;
          uint64_t v24 = v9;
          if (v21 != v20) {
            uint64_t v24 = v21[6];
          }
          long long v25 = (void *)v21[1];
          uint64_t v26 = v25;
          uint64_t v27 = v21;
          if (v25)
          {
            do
            {
              CFTypeRef v28 = v26;
              uint64_t v26 = (void *)*v26;
            }
            while (v26);
          }
          else
          {
            do
            {
              CFTypeRef v28 = (void *)v27[2];
              BOOL v29 = *v28 == (void)v27;
              uint64_t v27 = v28;
            }
            while (!v29);
          }
          uint64_t v30 = v9;
          if (v28 != v20) {
            uint64_t v30 = v28[6];
          }
          while (v24 != v30)
          {
            uint64_t v24 = *(void *)(v24 + 8);
            uint64_t v23 = *(void *)(v23 + 8);
          }
          if (v25)
          {
            do
            {
              long long v31 = v25;
              long long v25 = (void *)*v25;
            }
            while (v25);
          }
          else
          {
            do
            {
              long long v31 = (void *)v21[2];
              BOOL v29 = *v31 == (void)v21;
              long long v21 = v31;
            }
            while (!v29);
          }
          long long v32 = (void *)v22[1];
          if (v32)
          {
            do
            {
              long long v33 = v32;
              long long v32 = (void *)*v32;
            }
            while (v32);
          }
          else
          {
            do
            {
              long long v33 = (void *)v22[2];
              BOOL v29 = *v33 == (void)v22;
              uint64_t v22 = v33;
            }
            while (!v29);
          }
          long long v21 = v31;
          uint64_t v22 = v33;
        }
        while (v31 != v20);
      }
      *CFNumberRef v66 = (uint64_t)v11;
      v66[1] = 0;
      CFTypeRef v53 = operator new(0x18uLL);
      v53[1] = 0x100000001;
      *CFTypeRef v53 = &unk_26E93F178;
      v53[2] = v11;
      v66[1] = (uint64_t)v53;
      v66[2] = v65[2];
      uint64_t v54 = v65[3];
      v66[3] = v54;
      long long v3 = v64;
      if (v54) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v54 + 8), 1u, memory_order_relaxed);
      }
      CFTypeRef v55 = (uint64_t *)operator new(0x18uLL);
      v55[1] = 0x100000001;
      *CFTypeRef v55 = (uint64_t)&unk_26E93F118;
      v55[2] = (uint64_t)v66;
      std::runtime_error v56 = (atomic_uint *)v64[1];
      *long long v64 = v66;
      v64[1] = v55;
      if (v56)
      {
        if (atomic_fetch_add(v56 + 2, 0xFFFFFFFF) == 1)
        {
          (*(void (**)(atomic_uint *))(*(void *)v56 + 16))(v56);
          if (atomic_fetch_add(v56 + 3, 0xFFFFFFFF) == 1) {
            (*(void (**)(atomic_uint *))(*(void *)v56 + 24))(v56);
          }
        }
      }
      goto LABEL_88;
    }
    while (1)
    {
      int v34 = *((_DWORD *)v19 + 8);
      long long v35 = (void *)*v18;
      long long v36 = v11 + 4;
      if (*v17 != v18)
      {
        long long v37 = (void *)*v18;
        long long v38 = v11 + 4;
        if (v35)
        {
          do
          {
            long long v36 = v37;
            long long v37 = (void *)v37[1];
          }
          while (v37);
        }
        else
        {
          do
          {
            long long v36 = (void *)v38[2];
            BOOL v29 = *v36 == (void)v38;
            long long v38 = v36;
          }
          while (v29);
        }
        int v39 = *((_DWORD *)v19 + 10);
        int v40 = *((_DWORD *)v36 + 8);
        if (v40 == v34)
        {
          if (v34 != 1) {
            goto LABEL_55;
          }
          if (*((_DWORD *)v36 + 10) >= v39)
          {
            long long v41 = (void *)*v18;
            long long v42 = v11 + 4;
            long long v43 = v11 + 4;
            if (v35) {
              goto LABEL_59;
            }
LABEL_66:
            long long v47 = operator new(0x38uLL);
            long long v48 = *((_OWORD *)v19 + 2);
            v47[6] = v19[6];
            *((_OWORD *)v47 + 2) = v48;
            void *v47 = 0;
            v47[1] = 0;
            _OWORD v47[2] = v43;
            void *v42 = v47;
            CFTypeRef v49 = (void *)**v17;
            if (v49)
            {
              *int v17 = v49;
              long long v47 = (void *)*v42;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v11[4], v47);
            ++v11[5];
            goto LABEL_69;
          }
        }
        else if (v40 >= v34)
        {
LABEL_55:
          long long v42 = v11 + 4;
          long long v43 = v11 + 4;
          if (!v35) {
            goto LABEL_66;
          }
          long long v41 = (void *)*v18;
          if (v34 != 1)
          {
            int v44 = *((_DWORD *)v35 + 8);
            long long v43 = (void *)*v18;
            while (v34 != v44)
            {
              if (v34 < v44)
              {
                uint64_t v52 = *v43;
                long long v42 = v43;
                if (!*v43) {
                  goto LABEL_66;
                }
              }
              else
              {
                if (v44 >= v34) {
                  goto LABEL_69;
                }
                uint64_t v52 = v43[1];
                if (!v52) {
                  goto LABEL_65;
                }
              }
              int v44 = *(_DWORD *)(v52 + 32);
              long long v43 = (void *)v52;
            }
            goto LABEL_69;
          }
          while (1)
          {
LABEL_59:
            long long v43 = v41;
            int v45 = *((_DWORD *)v41 + 8);
            if (v45 == 1)
            {
              int v46 = *((_DWORD *)v41 + 10);
              if (v46 > v39) {
                goto LABEL_58;
              }
              if (v46 >= v39) {
                goto LABEL_69;
              }
            }
            else if (v45 > 1)
            {
LABEL_58:
              long long v41 = (void *)*v41;
              long long v42 = v43;
              if (!*v43) {
                goto LABEL_66;
              }
              continue;
            }
            long long v41 = (void *)v41[1];
            if (!v41)
            {
LABEL_65:
              long long v42 = v43 + 1;
              goto LABEL_66;
            }
          }
        }
      }
      if (v35) {
        long long v43 = v36;
      }
      else {
        long long v43 = v11 + 4;
      }
      if (v35) {
        long long v42 = v36 + 1;
      }
      else {
        long long v42 = v11 + 4;
      }
      if (!*v42) {
        goto LABEL_66;
      }
LABEL_69:
      CFMutableArrayRef v50 = (void *)v19[1];
      if (v50)
      {
        do
        {
          long long v51 = v50;
          CFMutableArrayRef v50 = (void *)*v50;
        }
        while (v50);
      }
      else
      {
        do
        {
          long long v51 = (void *)v19[2];
          BOOL v29 = *v51 == (void)v19;
          unint64_t v19 = v51;
        }
        while (!v29);
      }
      unint64_t v19 = v51;
      if (v51 == v20) {
        goto LABEL_10;
      }
    }
  }
LABEL_88:
  CFTypeRef v57 = (uint64_t **)*v3;
  long long v58 = (uint64_t *)**v3;
  long long v59 = (uint64_t *)v58[1];
  CFTypeID v67 = v59;
  if (v58 != v59)
  {
    do
    {
      while (1)
      {
        uint64_t v60 = v59[2];
        if (!*(unsigned char *)(v60 + 24)) {
          break;
        }
        long long v59 = (uint64_t *)v59[1];
        CFTypeID v67 = v59;
        long long v58 = *v57;
        if (v59 == *v57) {
          goto LABEL_93;
        }
      }
      long long v59 = (uint64_t *)boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>>::erase(v58, (int *)(v60 + 64), &v67);
      CFTypeRef v57 = (uint64_t **)*v3;
      CFTypeID v67 = v59;
      long long v58 = *v57;
    }
    while (v59 != *v57);
  }
LABEL_93:
  v3[2] = v59;
LABEL_94:
  pthread_mutex_unlock(v72);
  CFMutableArrayRef v61 = (char *)__p;
  if (__p)
  {
    if (v71 - 1 >= 0)
    {
      long long v62 = (char *)__p + 16 * v71;
      do
      {
        long long v63 = (atomic_uint *)*((void *)v62 - 1);
        if (v63)
        {
          if (atomic_fetch_add(v63 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v63 + 16))(v63);
            if (atomic_fetch_add(v63 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v63 + 24))(v63);
            }
          }
        }
        v62 -= 16;
      }
      while (v62 > v61);
    }
    if (v69 >= 0xB) {
      operator delete(__p);
    }
  }
}

void sub_235E22CD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::dispose(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = (atomic_uint *)v1[3];
    if (v2)
    {
      if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
        if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
        }
      }
    }
    long long v3 = (atomic_uint *)v1[1];
    if (v3)
    {
      if (atomic_fetch_add(v3 + 2, 0xFFFFFFFF) == 1)
      {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
        if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
        }
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_untyped_deleter()
{
  return 0;
}

uint64_t *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>>::~list(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    long long v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        uint64_t v6 = (atomic_uint *)v3[3];
        if (v6)
        {
          if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
            if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
            }
          }
        }
        operator delete(v3);
        long long v3 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>>>::dispose(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>>>::destroy((void *)v1[4]);
    if (v1[2])
    {
      uint64_t v2 = (void *)*v1;
      long long v3 = (uint64_t *)v1[1];
      uint64_t v4 = *v3;
      *(void *)(v4 + 8) = *(void *)(*v1 + 8);
      *(void *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          uint64_t v5 = (uint64_t *)v3[1];
          uint64_t v6 = (atomic_uint *)v3[3];
          if (v6)
          {
            if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
              if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
              }
            }
          }
          operator delete(v3);
          long long v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>>>::get_untyped_deleter()
{
  return 0;
}

uint64_t boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>>::~slot_call_iterator_cache(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 296);
  if (v2)
  {
    *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v8[8] = v3;
    v8[9] = v3;
    v8[6] = v3;
    v8[7] = v3;
    _OWORD v8[4] = v3;
    void v8[5] = v3;
    void v8[2] = v3;
    v8[3] = v3;
    v8[0] = v3;
    v8[1] = v3;
    unint64_t v9 = 10;
    long long __p = v8;
    uint64_t v11 = 0;
    uint64_t v12 = v2;
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
    boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(*(_DWORD **)(a1 + 296), v8);
    (*(void (**)(uint64_t))(*(void *)v12 + 32))(v12);
    uint64_t v4 = (char *)__p;
    if (__p)
    {
      if (v11 - 1 >= 0)
      {
        uint64_t v5 = (char *)__p + 16 * v11;
        do
        {
          uint64_t v6 = (atomic_uint *)*((void *)v5 - 1);
          if (v6)
          {
            if (atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
            {
              (*(void (**)(atomic_uint *))(*(void *)v6 + 16))(v6);
              if (atomic_fetch_add(v6 + 3, 0xFFFFFFFF) == 1) {
                (*(void (**)(atomic_uint *))(*(void *)v6 + 24))(v6);
              }
            }
          }
          v5 -= 16;
        }
        while (v5 > v4);
      }
      if (v9 >= 0xB) {
        operator delete(__p);
      }
    }
  }
  if (*(void *)(a1 + 256)) {
    boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::auto_buffer_destroy((void *)(a1 + 8));
  }
  if (*(unsigned char *)a1) {
    *(unsigned char *)a1 = 0;
  }
  return a1;
}

void sub_235E23730(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t _GLOBAL__sub_I_ARICoexCommandDriver_cpp()
{
  return __cxa_atexit((void (*)(void *))std::vector<std::tuple<unsigned long long,unsigned long long,unsigned long long>>::~vector[abi:ne180100], &qword_26AB82708, &dword_235DB9000);
}

void BudgetData::BudgetData(BudgetData *this)
{
  *((void *)this + 2) = 0;
  *((void *)this + 1) = 0;
  *(void *)this = (char *)this + 8;
}

{
  *((void *)this + 2) = 0;
  *((void *)this + 1) = 0;
  *(void *)this = (char *)this + 8;
}

void BudgetData::~BudgetData(BudgetData *this)
{
  uint64_t v2 = (void *)((char *)this + 8);
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)this, *((void **)this + 1));
  *(void *)this = v2;
  *((void *)this + 2) = 0;
  *uint64_t v2 = 0;
}

{
  void *v2;

  uint64_t v2 = (void *)((char *)this + 8);
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)this, *((void **)this + 1));
  *(void *)this = v2;
  *((void *)this + 2) = 0;
  *uint64_t v2 = 0;
}

void BudgetData::BudgetData(BudgetData *this, const BudgetData *a2)
{
  *((void *)this + 2) = 0;
  *((void *)this + 1) = 0;
  *(void *)this = (char *)this + 8;
  if (this != a2) {
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)this, *(void **)a2, (void *)a2 + 1);
  }
}

{
  *((void *)this + 2) = 0;
  *((void *)this + 1) = 0;
  *(void *)this = (char *)this + 8;
  if (this != a2) {
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)this, *(void **)a2, (void *)a2 + 1);
  }
}

void sub_235E23930(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_235E23994(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void *BudgetData::BudgetData(void *result, uint64_t a2)
{
  result[2] = 0;
  result[1] = 0;
  *unint64_t result = result + 1;
  *unint64_t result = *(void *)a2;
  *(void *)a2 = result + 1;
  uint64_t v2 = result[1];
  *(_OWORD *)(result + 1) = *(_OWORD *)(a2 + 8);
  *(void *)(a2 + 8) = v2;
  *(void *)(a2 + 16) = 0;
  if (result[2]) {
    long long v3 = (void *)(result[1] + 16);
  }
  else {
    long long v3 = result;
  }
  *long long v3 = result + 1;
  *(void *)a2 = a2 + 8;
  return result;
}

{
  uint64_t v2;
  void *v3;

  result[2] = 0;
  result[1] = 0;
  *unint64_t result = result + 1;
  *unint64_t result = *(void *)a2;
  *(void *)a2 = result + 1;
  uint64_t v2 = result[1];
  *(_OWORD *)(result + 1) = *(_OWORD *)(a2 + 8);
  *(void *)(a2 + 8) = v2;
  *(void *)(a2 + 16) = 0;
  if (result[2]) {
    long long v3 = (void *)(result[1] + 16);
  }
  else {
    long long v3 = result;
  }
  *long long v3 = result + 1;
  *(void *)a2 = a2 + 8;
  return result;
}

uint64_t BudgetData::operator=(uint64_t a1, uint64_t a2)
{
  if (a2 != a1) {
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>(a1, *(void **)a2, (void *)(a2 + 8));
  }
  return a1;
}

uint64_t BudgetData::get(uint64_t **a1, unsigned int a2)
{
  char v2 = a2;
  uint64_t v5 = a1 + 1;
  uint64_t v4 = (unsigned __int8 *)a1[1];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v6 = v4;
        unsigned int v7 = v4[28];
        if (v7 <= a2) {
          break;
        }
        uint64_t v4 = (unsigned __int8 *)*v6;
        uint64_t v5 = (uint64_t **)v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }
      if (v7 >= a2) {
        break;
      }
      uint64_t v4 = (unsigned __int8 *)v6[1];
      if (!v4)
      {
        uint64_t v5 = (uint64_t **)(v6 + 1);
        goto LABEL_8;
      }
    }
  }
  else
  {
    uint64_t v6 = a1 + 1;
LABEL_8:
    int v8 = v6;
    uint64_t v6 = operator new(0x28uLL);
    *((unsigned char *)v6 + 28) = v2;
    *((unsigned char *)v6 + 32) = 0;
    *((unsigned char *)v6 + 36) = 0;
    void *v6 = 0;
    v6[1] = 0;
    v6[2] = v8;
    *uint64_t v5 = v6;
    unint64_t v9 = (uint64_t *)**a1;
    CFTypeRef v10 = v6;
    if (v9)
    {
      *a1 = v9;
      CFTypeRef v10 = *v5;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v6[4];
}

uint64_t *BudgetData::set(uint64_t *result, unsigned int a2, int a3)
{
  char v4 = a2;
  uint64_t v5 = result;
  unsigned int v7 = (uint64_t **)(result + 1);
  uint64_t v6 = (unsigned __int8 *)result[1];
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        int v8 = v6;
        unsigned int v9 = v6[28];
        if (v9 <= a2) {
          break;
        }
        uint64_t v6 = (unsigned __int8 *)*v8;
        unsigned int v7 = (uint64_t **)v8;
        if (!*v8) {
          goto LABEL_8;
        }
      }
      if (v9 >= a2) {
        break;
      }
      uint64_t v6 = (unsigned __int8 *)v8[1];
      if (!v6)
      {
        unsigned int v7 = (uint64_t **)(v8 + 1);
        goto LABEL_8;
      }
    }
  }
  else
  {
    int v8 = result + 1;
LABEL_8:
    CFTypeRef v10 = v8;
    int v8 = operator new(0x28uLL);
    *((unsigned char *)v8 + 28) = v4;
    *((unsigned char *)v8 + 32) = 0;
    *((unsigned char *)v8 + 36) = 0;
    *int v8 = 0;
    v8[1] = 0;
    void v8[2] = v10;
    uint64_t *v7 = v8;
    uint64_t v11 = *(void *)*v5;
    uint64_t v12 = v8;
    if (v11)
    {
      *uint64_t v5 = v11;
      uint64_t v12 = *v7;
    }
    unint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v5[1], v12);
    ++v5[2];
  }
  *((_DWORD *)v8 + 8) = a3;
  *((unsigned char *)v8 + 36) = 1;
  return result;
}

void BudgetData::clear(BudgetData *this)
{
  char v2 = (void *)((char *)this + 8);
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)this, *((void **)this + 1));
  *(void *)this = v2;
  *((void *)this + 2) = 0;
  *char v2 = 0;
}

void *BudgetData::for_each(void *result, uint64_t a2)
{
  char v2 = result + 1;
  long long v3 = (void *)*result;
  if ((void *)*result != result + 1)
  {
    do
    {
      uint64_t v5 = *(void *)(a2 + 24);
      if (!v5) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      unint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)v5 + 48))(v5, (uint64_t)v3 + 28, v3 + 4);
      if (!result) {
        break;
      }
      uint64_t v6 = (void *)v3[1];
      if (v6)
      {
        do
        {
          unsigned int v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          unsigned int v7 = (void *)v3[2];
          BOOL v8 = *v7 == (void)v3;
          long long v3 = v7;
        }
        while (!v8);
      }
      long long v3 = v7;
    }
    while (v7 != v2);
  }
  return result;
}

void std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>(uint64_t a1, void *a2, void *a3)
{
  char v4 = a2;
  if (*(void *)(a1 + 16))
  {
    uint64_t v6 = *(uint64_t **)a1;
    BOOL v8 = (uint64_t **)(a1 + 8);
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)a1 = a1 + 8;
    *(void *)(v7 + 16) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 8) = 0;
    unsigned int v9 = v6[1] ? (uint64_t *)v6[1] : v6;
    if (v9)
    {
      CFTypeRef v10 = (uint64_t *)v9[2];
      if (v10)
      {
        uint64_t v11 = (uint64_t *)*v10;
        if ((uint64_t *)*v10 == v9)
        {
          *CFTypeRef v10 = 0;
          while (1)
          {
            long long v35 = (uint64_t *)v10[1];
            if (!v35) {
              break;
            }
            do
            {
              CFTypeRef v10 = v35;
              long long v35 = (uint64_t *)*v35;
            }
            while (v35);
          }
        }
        else
        {
          for (v10[1] = 0; v11; uint64_t v11 = (uint64_t *)v10[1])
          {
            do
            {
              CFTypeRef v10 = v11;
              uint64_t v11 = (uint64_t *)*v11;
            }
            while (v11);
          }
        }
      }
      if (a2 != a3)
      {
        uint64_t v12 = v9;
        uint64_t v13 = v4;
        while (1)
        {
          unsigned int v9 = v10;
          unsigned int v14 = *((unsigned __int8 *)v13 + 28);
          *((unsigned char *)v12 + 28) = v14;
          int v15 = *((_DWORD *)v13 + 8);
          *((unsigned char *)v12 + 36) = *((unsigned char *)v13 + 36);
          *((_DWORD *)v12 + 8) = v15;
          uint64_t v16 = *v8;
          int v17 = (uint64_t **)(a1 + 8);
          BOOL v18 = (uint64_t **)(a1 + 8);
          if (*v8) {
            break;
          }
LABEL_14:
          *uint64_t v12 = 0;
          v12[1] = 0;
          void v12[2] = (uint64_t)v17;
          void *v18 = v12;
          uint64_t v19 = **(void **)a1;
          if (v19) {
            goto LABEL_15;
          }
LABEL_16:
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), v12);
          ++*(void *)(a1 + 16);
          if (v10)
          {
            CFTypeRef v10 = (uint64_t *)v10[2];
            if (v10)
            {
              uint64_t v22 = (uint64_t *)*v10;
              if ((uint64_t *)*v10 == v9)
              {
                *CFTypeRef v10 = 0;
                while (1)
                {
                  uint64_t v23 = (uint64_t *)v10[1];
                  if (!v23) {
                    break;
                  }
                  do
                  {
                    CFTypeRef v10 = v23;
                    uint64_t v23 = (uint64_t *)*v23;
                  }
                  while (v23);
                }
              }
              else
              {
                for (v10[1] = 0; v22; uint64_t v22 = (uint64_t *)v10[1])
                {
                  do
                  {
                    CFTypeRef v10 = v22;
                    uint64_t v22 = (uint64_t *)*v22;
                  }
                  while (v22);
                }
              }
            }
          }
          else
          {
            CFTypeRef v10 = 0;
          }
          unint64_t v20 = (void *)v13[1];
          if (v20)
          {
            do
            {
              char v4 = v20;
              unint64_t v20 = (void *)*v20;
            }
            while (v20);
          }
          else
          {
            do
            {
              char v4 = (void *)v13[2];
              BOOL v21 = *v4 == (void)v13;
              uint64_t v13 = v4;
            }
            while (!v21);
          }
          if (v9)
          {
            uint64_t v12 = v9;
            uint64_t v13 = v4;
            if (v4 != a3) {
              continue;
            }
          }
          goto LABEL_42;
        }
        do
        {
          while (1)
          {
            int v17 = (uint64_t **)v16;
            if (v14 >= *((unsigned __int8 *)v16 + 28)) {
              break;
            }
            uint64_t v16 = (uint64_t *)*v16;
            BOOL v18 = v17;
            if (!*v17) {
              goto LABEL_14;
            }
          }
          uint64_t v16 = (uint64_t *)v16[1];
        }
        while (v16);
        BOOL v18 = v17 + 1;
        *uint64_t v12 = 0;
        v12[1] = 0;
        void v12[2] = (uint64_t)v17;
        v17[1] = v12;
        uint64_t v19 = **(void **)a1;
        if (!v19) {
          goto LABEL_16;
        }
LABEL_15:
        *(void *)a1 = v19;
        uint64_t v12 = *v18;
        goto LABEL_16;
      }
LABEL_42:
      std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(a1, v9);
      if (v10)
      {
        for (uint64_t i = (uint64_t *)v10[2]; i; uint64_t i = (uint64_t *)i[2])
          CFTypeRef v10 = i;
        std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(a1, v10);
      }
    }
  }
  if (v4 != a3)
  {
    long long v25 = (uint64_t ***)(a1 + 8);
    while (1)
    {
      uint64_t v26 = (uint64_t *)operator new(0x28uLL);
      uint64_t v27 = v26;
      int v28 = *((_DWORD *)v4 + 9);
      *(uint64_t *)((char *)v26 + 28) = *(void *)((char *)v4 + 28);
      *((_DWORD *)v26 + 9) = v28;
      BOOL v29 = *v25;
      uint64_t v30 = (uint64_t **)(a1 + 8);
      long long v31 = (uint64_t **)(a1 + 8);
      if (*v25) {
        break;
      }
LABEL_54:
      uint64_t *v26 = 0;
      v26[1] = 0;
      _OWORD v26[2] = (uint64_t)v30;
      void *v31 = v26;
      uint64_t v32 = **(void **)a1;
      if (v32) {
        goto LABEL_55;
      }
LABEL_56:
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), v27);
      ++*(void *)(a1 + 16);
      long long v33 = (void *)v4[1];
      if (v33)
      {
        do
        {
          int v34 = v33;
          long long v33 = (void *)*v33;
        }
        while (v33);
      }
      else
      {
        do
        {
          int v34 = (void *)v4[2];
          BOOL v21 = *v34 == (void)v4;
          char v4 = v34;
        }
        while (!v21);
      }
      char v4 = v34;
      if (v34 == a3) {
        return;
      }
    }
    do
    {
      while (1)
      {
        uint64_t v30 = v29;
        if (*((unsigned __int8 *)v26 + 28) >= *((unsigned __int8 *)v29 + 28)) {
          break;
        }
        BOOL v29 = (uint64_t **)*v29;
        long long v31 = v30;
        if (!*v30) {
          goto LABEL_54;
        }
      }
      BOOL v29 = (uint64_t **)v29[1];
    }
    while (v29);
    long long v31 = v30 + 1;
    uint64_t *v26 = 0;
    v26[1] = 0;
    _OWORD v26[2] = (uint64_t)v30;
    v30[1] = v26;
    uint64_t v32 = **(void **)a1;
    if (!v32) {
      goto LABEL_56;
    }
LABEL_55:
    *(void *)a1 = v32;
    uint64_t v27 = *v31;
    goto LABEL_56;
  }
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);

  operator delete(v1);
}

char *abm::data::getDataPropertyNameFromDict(xpc_object_t *a1)
{
  if (MEMORY[0x237DF76E0](*a1) != MEMORY[0x263EF8708]) {
    return "Unknown";
  }
  xpc_object_t value = xpc_dictionary_get_value(*a1, "kDataProperty");
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  unsigned int v3 = xpc::dyn_cast_or_default();
  xpc_release(object);
  if (v3 < 5) {
    return off_264C7DD30[v3];
  }
  else {
    return "Unknown";
  }
}

void sub_235E241E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

uint64_t abm::data::getDataPropertyTypeFromDict(xpc_object_t *a1)
{
  if (MEMORY[0x237DF76E0](*a1) != MEMORY[0x263EF8708]) {
    return 5;
  }
  xpc_object_t value = xpc_dictionary_get_value(*a1, "kDataProperty");
  xpc_object_t object = value;
  if (value) {
    xpc_retain(value);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  unsigned int v4 = xpc::dyn_cast_or_default();
  xpc_release(object);
  if (v4 >= 5) {
    return 5;
  }
  else {
    return v4;
  }
}

void sub_235E242A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void abm::data::DataAggregationProtocol::toDict(abm::data::DataAggregationProtocol *this@<X0>, void **a2@<X8>)
{
  *a2 = (void *)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x237DF76E0](v5) == MEMORY[0x263EF8708])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  xpc_object_t v7 = xpc_int64_create(0);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  BOOL v8 = *a2;
  xpc_dictionary_set_value(v8, "kDataProperty", v7);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v9);
  xpc_object_t v10 = xpc_int64_create(*((unsigned int *)this + 3));
  if (!v10) {
    xpc_object_t v10 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, "kDataAggregationProtocol", v10);
  xpc_object_t v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
}

void abm::data::DataAggregationProtocol::addToDict(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v3 = xpc_int64_create(*(unsigned int *)(a1 + 12));
  if (!v3) {
    xpc_object_t v3 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, "kDataAggregationProtocol", v3);
  xpc_object_t v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

const char *abm::data::DataAggregationProtocol::asString(abm::data::DataAggregationProtocol *this)
{
  uint64_t v1 = *((int *)this + 3);
  if (v1 > 2) {
    return "unknown";
  }
  else {
    return off_264C7DD58[v1];
  }
}

void abm::data::DataProperty<abm::data::DataAggregationProtocol>::createDictForGet(xpc_object_t *a1@<X8>)
{
  *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v3 = v2;
  if (v2)
  {
    *a1 = v2;
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    *a1 = v3;
    if (!v3)
    {
      xpc_object_t v4 = xpc_null_create();
      xpc_object_t v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x237DF76E0](v3) == MEMORY[0x263EF8708])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  xpc_object_t v4 = xpc_null_create();
LABEL_8:
  *a1 = v4;
LABEL_9:
  xpc_release(v3);
  xpc_object_t v5 = xpc_int64_create(0);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a1, "kDataProperty", v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
}

void abm::data::DataProperty<abm::data::DataAggregationProtocol>::create(xpc_object_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26E93F218;
  *(void *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  if (MEMORY[0x237DF76E0](*a1) == MEMORY[0x263EF8708] && xpc_dictionary_get_value(*a1, "kDataAggregationProtocol"))
  {
    xpc_object_t value = xpc_dictionary_get_value(*a1, "kDataAggregationProtocol");
    xpc_object_t object = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    int v5 = xpc::dyn_cast_or_default();
    xpc_release(object);
    if (v5)
    {
      if (v5 == 1)
      {
        *(_DWORD *)(a2 + 12) = 1;
      }
      else if (v5 == 2)
      {
        *(_DWORD *)(a2 + 12) = 2;
      }
      else
      {
        *(unsigned char *)(a2 + 8) = 0;
        *(_DWORD *)(a2 + 12) = 3;
      }
    }
    else
    {
      *(_DWORD *)(a2 + 12) = 0;
    }
  }
  else
  {
    *(unsigned char *)(a2 + 8) = 0;
  }
}

void sub_235E2470C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

uint64_t abm::data::DataProperty<abm::data::DataAggregationProtocol>::create@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26E93F218;
  *(void *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  if (result >= 3)
  {
    *(unsigned char *)(a2 + 8) = 0;
    unint64_t result = 3;
  }
  *(_DWORD *)(a2 + 12) = result;
  return result;
}

void abm::data::DataAggregationMaxDatagrams::toDict(abm::data::DataAggregationMaxDatagrams *this@<X0>, void **a2@<X8>)
{
  *a2 = (void *)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x237DF76E0](v5) == MEMORY[0x263EF8708])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  xpc_object_t v7 = xpc_int64_create(1);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  BOOL v8 = *a2;
  xpc_dictionary_set_value(v8, "kDataProperty", v7);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v9);
  xpc_object_t v10 = xpc_int64_create(*((unsigned int *)this + 3));
  if (!v10) {
    xpc_object_t v10 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, "kDataAggregationMaxDatagrams", v10);
  xpc_object_t v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
}

void abm::data::DataAggregationMaxDatagrams::addToDict(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v3 = xpc_int64_create(*(unsigned int *)(a1 + 12));
  if (!v3) {
    xpc_object_t v3 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, "kDataAggregationMaxDatagrams", v3);
  xpc_object_t v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void abm::data::DataProperty<abm::data::DataAggregationMaxDatagrams>::createDictForGet(xpc_object_t *a1@<X8>)
{
  *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v3 = v2;
  if (v2)
  {
    *a1 = v2;
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    *a1 = v3;
    if (!v3)
    {
      xpc_object_t v4 = xpc_null_create();
      xpc_object_t v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x237DF76E0](v3) == MEMORY[0x263EF8708])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  xpc_object_t v4 = xpc_null_create();
LABEL_8:
  *a1 = v4;
LABEL_9:
  xpc_release(v3);
  xpc_object_t v5 = xpc_int64_create(1);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a1, "kDataProperty", v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
}

void abm::data::DataProperty<abm::data::DataAggregationMaxDatagrams>::create(xpc_object_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26E93F260;
  *(void *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  if (MEMORY[0x237DF76E0](*a1) == MEMORY[0x263EF8708] && xpc_dictionary_get_value(*a1, "kDataAggregationMaxDatagrams"))
  {
    xpc_object_t value = xpc_dictionary_get_value(*a1, "kDataAggregationMaxDatagrams");
    xpc_object_t object = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    *(_DWORD *)(a2 + 12) = xpc::dyn_cast_or_default();
    xpc_release(object);
  }
  else
  {
    *(unsigned char *)(a2 + 8) = 0;
  }
}

void sub_235E24B28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

uint64_t abm::data::DataProperty<abm::data::DataAggregationMaxDatagrams>::create@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26E93F260;
  *(void *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  *(_DWORD *)(a2 + 12) = result;
  return result;
}

void abm::data::DataAggregationMaxSize::toDict(abm::data::DataAggregationMaxSize *this@<X0>, void **a2@<X8>)
{
  *a2 = (void *)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x237DF76E0](v5) == MEMORY[0x263EF8708])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  xpc_object_t v7 = xpc_int64_create(2);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  BOOL v8 = *a2;
  xpc_dictionary_set_value(v8, "kDataProperty", v7);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v9);
  xpc_object_t v10 = xpc_int64_create(*((unsigned int *)this + 3));
  if (!v10) {
    xpc_object_t v10 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, "kDataAggregationMaxSize", v10);
  xpc_object_t v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
}

void abm::data::DataAggregationMaxSize::addToDict(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v3 = xpc_int64_create(*(unsigned int *)(a1 + 12));
  if (!v3) {
    xpc_object_t v3 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, "kDataAggregationMaxSize", v3);
  xpc_object_t v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void abm::data::DataProperty<abm::data::DataAggregationMaxSize>::createDictForGet(xpc_object_t *a1@<X8>)
{
  *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v3 = v2;
  if (v2)
  {
    *a1 = v2;
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    *a1 = v3;
    if (!v3)
    {
      xpc_object_t v4 = xpc_null_create();
      xpc_object_t v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x237DF76E0](v3) == MEMORY[0x263EF8708])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  xpc_object_t v4 = xpc_null_create();
LABEL_8:
  *a1 = v4;
LABEL_9:
  xpc_release(v3);
  xpc_object_t v5 = xpc_int64_create(2);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a1, "kDataProperty", v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
}

void abm::data::DataProperty<abm::data::DataAggregationMaxSize>::create(xpc_object_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26E93F2A8;
  *(void *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  if (MEMORY[0x237DF76E0](*a1) == MEMORY[0x263EF8708] && xpc_dictionary_get_value(*a1, "kDataAggregationMaxSize"))
  {
    xpc_object_t value = xpc_dictionary_get_value(*a1, "kDataAggregationMaxSize");
    xpc_object_t object = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    *(_DWORD *)(a2 + 12) = xpc::dyn_cast_or_default();
    xpc_release(object);
  }
  else
  {
    *(unsigned char *)(a2 + 8) = 0;
  }
}

void sub_235E24F34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

uint64_t abm::data::DataProperty<abm::data::DataAggregationMaxSize>::create@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26E93F2A8;
  *(void *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  *(_DWORD *)(a2 + 12) = result;
  return result;
}

void abm::data::DataFlowControl::toDict(abm::data::DataFlowControl *this@<X0>, void **a2@<X8>)
{
  *a2 = (void *)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x237DF76E0](v5) == MEMORY[0x263EF8708])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  xpc_object_t v7 = xpc_int64_create(3);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  BOOL v8 = *a2;
  xpc_dictionary_set_value(v8, "kDataProperty", v7);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v9);
  xpc_object_t v10 = xpc_BOOL_create(*((unsigned char *)this + 9));
  if (!v10) {
    xpc_object_t v10 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, "kDataFlowControl", v10);
  xpc_object_t v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
}

void abm::data::DataFlowControl::addToDict(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v3 = xpc_BOOL_create(*(unsigned char *)(a1 + 9));
  if (!v3) {
    xpc_object_t v3 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, "kDataFlowControl", v3);
  xpc_object_t v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void abm::data::DataProperty<abm::data::DataFlowControl>::createDictForGet(xpc_object_t *a1@<X8>)
{
  *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v3 = v2;
  if (v2)
  {
    *a1 = v2;
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    *a1 = v3;
    if (!v3)
    {
      xpc_object_t v4 = xpc_null_create();
      xpc_object_t v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x237DF76E0](v3) == MEMORY[0x263EF8708])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  xpc_object_t v4 = xpc_null_create();
LABEL_8:
  *a1 = v4;
LABEL_9:
  xpc_release(v3);
  xpc_object_t v5 = xpc_int64_create(3);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a1, "kDataProperty", v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
}

void abm::data::DataProperty<abm::data::DataFlowControl>::create(xpc_object_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26E93F2F0;
  *(void *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  if (MEMORY[0x237DF76E0](*a1) == MEMORY[0x263EF8708] && xpc_dictionary_get_value(*a1, "kDataFlowControl"))
  {
    xpc_object_t value = xpc_dictionary_get_value(*a1, "kDataFlowControl");
    xpc_object_t object = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    *(unsigned char *)(a2 + 9) = xpc::dyn_cast_or_default();
    xpc_release(object);
  }
  else
  {
    *(unsigned char *)(a2 + 8) = 0;
  }
}

void sub_235E25340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

uint64_t abm::data::DataProperty<abm::data::DataFlowControl>::create@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26E93F2F0;
  *(void *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  *(unsigned char *)(a2 + 9) = result != 0;
  return result;
}

void abm::data::DataPowerSave::toDict(abm::data::DataPowerSave *this@<X0>, void **a2@<X8>)
{
  *a2 = (void *)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x237DF76E0](v5) == MEMORY[0x263EF8708])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  xpc_object_t v7 = xpc_int64_create(4);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  BOOL v8 = *a2;
  xpc_dictionary_set_value(v8, "kDataProperty", v7);
  xpc_object_t v9 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v9);
  xpc_object_t v10 = xpc_BOOL_create(*((unsigned char *)this + 9));
  if (!v10) {
    xpc_object_t v10 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, "kDataPowerSave", v10);
  xpc_object_t v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
}

void abm::data::DataPowerSave::addToDict(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v3 = xpc_BOOL_create(*(unsigned char *)(a1 + 9));
  if (!v3) {
    xpc_object_t v3 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a2, "kDataPowerSave", v3);
  xpc_object_t v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void abm::data::DataProperty<abm::data::DataPowerSave>::createDictForGet(xpc_object_t *a1@<X8>)
{
  *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v3 = v2;
  if (v2)
  {
    *a1 = v2;
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    *a1 = v3;
    if (!v3)
    {
      xpc_object_t v4 = xpc_null_create();
      xpc_object_t v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x237DF76E0](v3) == MEMORY[0x263EF8708])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  xpc_object_t v4 = xpc_null_create();
LABEL_8:
  *a1 = v4;
LABEL_9:
  xpc_release(v3);
  xpc_object_t v5 = xpc_int64_create(4);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(*a1, "kDataProperty", v5);
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
}

void abm::data::DataProperty<abm::data::DataPowerSave>::create(xpc_object_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26E93F338;
  *(void *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  if (MEMORY[0x237DF76E0](*a1) == MEMORY[0x263EF8708] && xpc_dictionary_get_value(*a1, "kDataPowerSave"))
  {
    xpc_object_t value = xpc_dictionary_get_value(*a1, "kDataPowerSave");
    xpc_object_t object = value;
    if (value) {
      xpc_retain(value);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    *(unsigned char *)(a2 + 9) = xpc::dyn_cast_or_default();
    xpc_release(object);
  }
  else
  {
    *(unsigned char *)(a2 + 8) = 0;
  }
}

void sub_235E25754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

uint64_t abm::data::DataProperty<abm::data::DataPowerSave>::create@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_26E93F338;
  *(void *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  *(unsigned char *)(a2 + 9) = result != 0;
  return result;
}

uint64_t abm::asString@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = 0xAAAAAAAAAAAAAAAALL;
  *(void *)(a2 + 16) = 0xAAAAAAAAAAAAAAAALL;
  *(unsigned char *)(a2 + 23) = 7;
  strcpy((char *)a2, "Invalid");
  if (result <= 2)
  {
    *(unsigned char *)(a2 + 23) = 4;
    *(_DWORD *)a2 = (result << 16) + 1378894420;
    *(unsigned char *)(a2 + 4) = 0;
  }
  return result;
}

{
  *(void *)(a2 + 8) = 0xAAAAAAAAAAAAAAAALL;
  *(void *)(a2 + 16) = 0xAAAAAAAAAAAAAAAALL;
  *(unsigned char *)(a2 + 23) = 7;
  strcpy((char *)a2, "Invalid");
  switch((int)result)
  {
    case 0:
      *(unsigned char *)(a2 + 23) = 8;
      strcpy((char *)a2, "1000msec");
      break;
    case 1:
      *(_DWORD *)(a2 + 3) = 1667593069;
      *(_DWORD *)a2 = 1831874609;
      break;
    case 2:
      *(unsigned char *)(a2 + 23) = 5;
      strcpy((char *)a2, "1msec");
      break;
    case 10:
      *(unsigned char *)(a2 + 23) = 9;
      strcpy((char *)a2, "ModemSkin");
      break;
    case 11:
      *(unsigned char *)(a2 + 23) = 9;
      strcpy((char *)a2, "TangierBG");
      break;
    case 12:
      *(unsigned char *)(a2 + 23) = 9;
      strcpy((char *)a2, "TangierCG");
      break;
    case 13:
      *(unsigned char *)(a2 + 23) = 3;
      *(_DWORD *)a2 = 5915974;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t abm::convertBasebandCPMSPowerBudgetScale(unsigned __int16 *a1)
{
  uint64_t v1 = *((unsigned __int8 *)a1 + 23);
  int v2 = (char)v1;
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = *((void *)a1 + 1);
  }
  switch(v1)
  {
    case 3:
      if (v2 >= 0) {
        xpc_object_t v3 = a1;
      }
      else {
        xpc_object_t v3 = *(unsigned __int16 **)a1;
      }
      if (bswap32(*v3) >> 16 == 17989)
      {
        if (*((unsigned char *)v3 + 2) == 90) {
          unsigned __int8 v4 = 13;
        }
        else {
          unsigned __int8 v4 = -1;
        }
        uint64_t result = v4;
      }
      else
      {
        uint64_t result = 255;
      }
      break;
    case 5:
      if (v2 >= 0) {
        xpc_object_t v6 = a1;
      }
      else {
        xpc_object_t v6 = *(unsigned __int16 **)a1;
      }
      int v7 = *(_DWORD *)v6;
      int v8 = *((unsigned __int8 *)v6 + 4);
      if (v7 != 1702063409 || v8 != 99) {
        goto LABEL_50;
      }
      uint64_t result = 2;
      break;
    case 7:
      if (v2 >= 0) {
        xpc_object_t v10 = (int *)a1;
      }
      else {
        xpc_object_t v10 = *(int **)a1;
      }
      int v11 = *v10;
      int v12 = *(int *)((char *)v10 + 3);
      if (v11 != 1831874609 || v12 != 1667593069) {
        goto LABEL_50;
      }
      uint64_t result = 1;
      break;
    case 8:
      if (v2 >= 0) {
        unsigned int v14 = a1;
      }
      else {
        unsigned int v14 = *(void **)a1;
      }
      if (*v14 != 0x6365736D30303031) {
        goto LABEL_50;
      }
      uint64_t result = 0;
      break;
    case 9:
      if (v2 >= 0) {
        int v15 = a1;
      }
      else {
        int v15 = *(unsigned __int16 **)a1;
      }
      if (*(void *)v15 == 0x696B536D65646F4DLL && *((unsigned char *)v15 + 8) == 110)
      {
        uint64_t result = 10;
      }
      else if (*(void *)v15 == 0x42726569676E6154 && *((unsigned char *)v15 + 8) == 71)
      {
        uint64_t result = 11;
      }
      else
      {
        uint64_t v18 = *(void *)v15;
        int v19 = *((unsigned __int8 *)v15 + 8);
        if (v18 != 0x43726569676E6154 || v19 != 71) {
          goto LABEL_50;
        }
        uint64_t result = 12;
      }
      break;
    default:
LABEL_50:
      uint64_t result = 255;
      break;
  }
  return result;
}

void radio::ARICommandDriver::create(uint64_t *a1@<X0>, NSObject **a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  *a4 = 0xAAAAAAAAAAAAAAAALL;
  a4[1] = 0xAAAAAAAAAAAAAAAALL;
  int v8 = operator new(0x1A8uLL);
  xpc_object_t v9 = (std::__shared_weak_count *)a1[1];
  uint64_t v28 = *a1;
  BOOL v29 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  xpc_object_t v10 = *a2;
  dispatch_object_t object = v10;
  if (v10) {
    dispatch_retain(v10);
  }
  uint64_t v11 = *a3;
  int v12 = (std::__shared_weak_count *)a3[1];
  v26[0] = v11;
  v26[1] = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  radio::ARICommandDriver::ARICommandDriver((uint64_t)v8, (uint64_t)&v28, &object, (uint64_t)v26);
  *a4 = v8;
  a4[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v13 = (std::__shared_weak_count *)operator new(0x20uLL);
  v13->__shared_owners_ = 0;
  p_uint64_t shared_owners = &v13->__shared_owners_;
  v13->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93FD10;
  v13->__shared_weak_owners_ = 0;
  v13[1].__vftable = (std::__shared_weak_count_vtbl *)v8;
  a4[1] = v13;
  int v15 = (std::__shared_weak_count *)*((void *)v8 + 10);
  if (!v15)
  {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)v8 + 9) = v8;
    *((void *)v8 + 10) = v13;
    if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_10;
    }
LABEL_13:
    uint64_t v16 = (void *)*a4;
    if (!*(void *)(*a4 + 56)) {
      goto LABEL_22;
    }
    goto LABEL_14;
  }
  if (v15->__shared_owners_ != -1) {
    goto LABEL_13;
  }
  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *((void *)v8 + 9) = v8;
  *((void *)v8 + 10) = v13;
  std::__shared_weak_count::__release_weak(v15);
  if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_13;
  }
LABEL_10:
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  uint64_t v16 = (void *)*a4;
  if (!*(void *)(*a4 + 56)) {
    goto LABEL_22;
  }
LABEL_14:
  int v17 = (std::__shared_weak_count *)v16[10];
  if (!v17 || (uint64_t v18 = v16[9], (v19 = std::__shared_weak_count::lock(v17)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  unint64_t v20 = v19;
  uint64_t v30 = v18;
  uint64_t v31 = (uint64_t)v19;
  ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v16 + 1));
  uint64_t v35 = v18;
  long long v36 = v20;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  ctu::TrackedLogger::registerLoggerToServer();
  BOOL v21 = v36;
  if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  uint64_t v22 = (std::__shared_weak_count *)v31;
  if (v31 && !atomic_fetch_add((atomic_ullong *volatile)(v31 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
LABEL_22:
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (object) {
    dispatch_release(object);
  }
  uint64_t v23 = v29;
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  uint64_t v24 = *a4;
  long long v25 = (uint64_t *)(*a4 + 72);
  uint64_t v30 = MEMORY[0x263EF8330];
  uint64_t v31 = 0x40000000;
  uint64_t v32 = ___ZN5radio16ARICommandDriver4initEv_block_invoke;
  long long v33 = &__block_descriptor_tmp_9_0;
  uint64_t v34 = v24;
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(v25, (uint64_t)&v30);
}

void sub_235E25EE4()
{
}

void sub_235E25F30()
{
}

void sub_235E25F40()
{
}

void radio::ARICommandDriver::init(radio::ARICommandDriver *this)
{
  v1[0] = MEMORY[0x263EF8330];
  v1[1] = 0x40000000;
  v1[2] = ___ZN5radio16ARICommandDriver4initEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_9_0;
  v1[4] = this;
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v1);
}

uint64_t radio::ARICommandDriver::ARICommandDriver(uint64_t a1, uint64_t a2, dispatch_object_t *a3, uint64_t a4)
{
  xpc_object_t v6 = *(std::__shared_weak_count **)(a2 + 8);
  unsigned int v14 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  dispatch_object_t object = *a3;
  if (*a3) {
    dispatch_retain(*a3);
  }
  int v7 = *(std::__shared_weak_count **)(a4 + 8);
  int v12 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  radio::CommandDriver::CommandDriver();
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  int v8 = (radio::OpMode *)object;
  if (object) {
    dispatch_release(object);
  }
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  *(void *)a1 = &unk_26E93F380;
  *(_DWORD *)(a1 + 288) = 255;
  radio::OpMode::create(v8);
  xpc_object_t v9 = *(NSObject **)(a1 + 88);
  uint64_t v11 = v9;
  if (v9) {
    dispatch_retain(v9);
  }
  radio::CommandDriver::getName((radio::CommandDriver *)a1);
  ice::Client::create();
  if (v11) {
    dispatch_release(v11);
  }
  *(unsigned char *)(a1 + 328) = 0;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 336) = a1 + 344;
  *(void *)(a1 + 368) = a1 + 376;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = a1 + 400;
  return a1;
}

void sub_235E261C8(_Unwind_Exception *a1)
{
  radio::CommandDriver::~CommandDriver(v1);
  _Unwind_Resume(a1);
}

void sub_235E261DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, dispatch_object_t object, char a13)
{
  if (object) {
    dispatch_release(object);
  }
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_235E26204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v10);
  radio::CommandDriver::~CommandDriver(v9);
  _Unwind_Resume(a1);
}

void radio::CommandDriver::~CommandDriver(void **this)
{
  *this = &unk_26E93FA50;
  if (*((char *)this + 287) < 0) {
    operator delete(this[33]);
  }
  int v2 = (std::__shared_weak_count *)this[32];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  xpc_object_t v3 = (std::__shared_weak_count *)this[30];
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  unsigned __int8 v4 = (std::__shared_weak_count *)this[28];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  xpc_object_t v5 = this[26];
  if (v5) {
    dispatch_release(v5);
  }
  xpc_object_t v6 = this[25];
  if (v6) {
    _Block_release(v6);
  }
  if (this[24])
  {
    int v7 = this[22];
    int v8 = (radio::CommandDriver *)this[23];
    uint64_t v9 = *(void *)v8;
    *(void *)(v9 + 8) = v7[1];
    *(void *)v7[1] = v9;
    this[24] = 0;
    if (v8 != (radio::CommandDriver *)(this + 22))
    {
      do
      {
        int v19 = (radio::CommandDriver *)*((void *)v8 + 1);
        uint64_t v18 = (const void *)*((void *)v8 + 2);
        if (v18) {
          _Block_release(v18);
        }
        operator delete(v8);
        int v8 = v19;
      }
      while (v19 != (radio::CommandDriver *)(this + 22));
    }
  }
  if (this[21])
  {
    uint64_t v10 = this[19];
    uint64_t v11 = (radio::CommandDriver *)this[20];
    uint64_t v12 = *(void *)v11;
    *(void *)(v12 + 8) = v10[1];
    *(void *)v10[1] = v12;
    this[21] = 0;
    if (v11 != (radio::CommandDriver *)(this + 19))
    {
      do
      {
        BOOL v21 = (radio::CommandDriver *)*((void *)v11 + 1);
        unint64_t v20 = (const void *)*((void *)v11 + 2);
        if (v20) {
          _Block_release(v20);
        }
        operator delete(v11);
        uint64_t v11 = v21;
      }
      while (v21 != (radio::CommandDriver *)(this + 19));
    }
  }
  this[16] = &unk_26E93FBF0;
  uint64_t v13 = (atomic_uint *)this[18];
  if (v13)
  {
    if (atomic_fetch_add(v13 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v13 + 16))(v13);
      if (atomic_fetch_add(v13 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v13 + 24))(v13);
      }
    }
  }
  this[13] = &unk_26E93FC60;
  unsigned int v14 = (atomic_uint *)this[15];
  if (v14)
  {
    if (atomic_fetch_add(v14 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v14 + 16))(v14);
      if (atomic_fetch_add(v14 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v14 + 24))(v14);
      }
    }
  }
  *this = &unk_26E93FCD0;
  MEMORY[0x237DF4D50](this + 1);
  int v15 = this[12];
  if (v15) {
    dispatch_release(v15);
  }
  uint64_t v16 = this[11];
  if (v16) {
    dispatch_release(v16);
  }
  int v17 = (std::__shared_weak_count *)this[10];
  if (v17) {
    std::__shared_weak_count::__release_weak(v17);
  }
}

void radio::ARICommandDriver::~ARICommandDriver(radio::ARICommandDriver *this)
{
  *(void *)this = &unk_26E93F380;
  int v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)xpc_object_t v5 = 0;
    _os_log_impl(&dword_235DB9000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v5, 2u);
  }
  std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>>>::destroy(*((void **)this + 50));
  std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>>>::destroy(*((void **)this + 47));
  std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>>>>::destroy(*((void **)this + 43));
  xpc_object_t v3 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    unsigned __int8 v4 = (std::__shared_weak_count *)*((void *)this + 38);
    if (!v4) {
      goto LABEL_7;
    }
  }
  else
  {
    unsigned __int8 v4 = (std::__shared_weak_count *)*((void *)this + 38);
    if (!v4)
    {
LABEL_7:
      radio::CommandDriver::~CommandDriver((void **)this);
      return;
    }
  }
  if (atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_7;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  radio::CommandDriver::~CommandDriver((void **)this);
}

{
  void *v1;
  uint64_t vars8;

  radio::ARICommandDriver::~ARICommandDriver(this);

  operator delete(v1);
}

uint64_t ___ZN5radio16ARICommandDriver4initEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_235DB9000, v2, OS_LOG_TYPE_DEFAULT, "#I Initializing", buf, 2u);
  }
  int v3 = *(_DWORD *)(v1 + 288);
  unsigned __int8 v4 = (uint64_t **)(v1 + 344);
  xpc_object_t v5 = *(int **)(v1 + 344);
  xpc_object_t v6 = (uint64_t **)(v1 + 344);
  int v7 = (void *)(v1 + 344);
  if (v5)
  {
    int v8 = *(int **)(v1 + 344);
    while (1)
    {
      while (1)
      {
        int v7 = v8;
        int v9 = v8[7];
        if (v9 < 2) {
          break;
        }
        int v8 = (int *)*v7;
        xpc_object_t v6 = (uint64_t **)v7;
        if (!*v7) {
          goto LABEL_10;
        }
      }
      if (v9 == 1) {
        break;
      }
      int v8 = (int *)v7[1];
      if (!v8)
      {
        xpc_object_t v6 = (uint64_t **)(v7 + 1);
        goto LABEL_10;
      }
    }
  }
  else
  {
LABEL_10:
    uint64_t v10 = v7;
    int v7 = operator new(0x28uLL);
    *(void *)((char *)v7 + 28) = 1;
    void *v7 = 0;
    v7[1] = 0;
    uint64_t v7[2] = v10;
    const void *v6 = v7;
    uint64_t v11 = **(void **)(v1 + 336);
    uint64_t v12 = v7;
    if (v11)
    {
      *(void *)(v1 + 336) = v11;
      uint64_t v12 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 344), v12);
    xpc_object_t v5 = *(int **)(v1 + 344);
    ++*(void *)(v1 + 352);
  }
  *((_DWORD *)v7 + 8) = v3;
  int v13 = *(_DWORD *)(v1 + 288);
  unsigned int v14 = (uint64_t **)(v1 + 344);
  int v15 = (void *)(v1 + 344);
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        int v15 = v5;
        int v16 = v5[7];
        if (v16 < 3) {
          break;
        }
        xpc_object_t v5 = (int *)*v15;
        unsigned int v14 = (uint64_t **)v15;
        if (!*v15) {
          goto LABEL_20;
        }
      }
      if (v16 == 2) {
        break;
      }
      xpc_object_t v5 = (int *)v15[1];
      if (!v5)
      {
        unsigned int v14 = (uint64_t **)(v15 + 1);
        goto LABEL_20;
      }
    }
  }
  else
  {
LABEL_20:
    int v17 = v15;
    int v15 = operator new(0x28uLL);
    *(void *)((char *)v15 + 28) = 2;
    *int v15 = 0;
    v15[1] = 0;
    void v15[2] = v17;
    atomic_uint *v14 = v15;
    uint64_t v18 = **(void **)(v1 + 336);
    int v19 = v15;
    if (v18)
    {
      *(void *)(v1 + 336) = v18;
      int v19 = *v14;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 344), v19);
    ++*(void *)(v1 + 352);
  }
  *((_DWORD *)v15 + 8) = v13;
  int v20 = *(_DWORD *)(v1 + 288);
  BOOL v21 = *(int **)(v1 + 344);
  uint64_t v22 = (uint64_t **)(v1 + 344);
  uint64_t v23 = (void *)(v1 + 344);
  if (v21)
  {
    uint64_t v24 = *(int **)(v1 + 344);
    while (1)
    {
      while (1)
      {
        uint64_t v23 = v24;
        int v25 = v24[7];
        if (v25 < 4) {
          break;
        }
        uint64_t v24 = (int *)*v23;
        uint64_t v22 = (uint64_t **)v23;
        if (!*v23) {
          goto LABEL_30;
        }
      }
      if (v25 == 3) {
        break;
      }
      uint64_t v24 = (int *)v23[1];
      if (!v24)
      {
        uint64_t v22 = (uint64_t **)(v23 + 1);
        goto LABEL_30;
      }
    }
  }
  else
  {
LABEL_30:
    uint64_t v26 = v23;
    uint64_t v23 = operator new(0x28uLL);
    *(void *)((char *)v23 + 28) = 3;
    void *v23 = 0;
    v23[1] = 0;
    _OWORD v23[2] = v26;
    std::__shared_weak_count *v22 = v23;
    uint64_t v27 = **(void **)(v1 + 336);
    uint64_t v28 = v23;
    if (v27)
    {
      *(void *)(v1 + 336) = v27;
      uint64_t v28 = *v22;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 344), v28);
    BOOL v21 = *(int **)(v1 + 344);
    ++*(void *)(v1 + 352);
  }
  *((_DWORD *)v23 + 8) = v20;
  int v29 = *(_DWORD *)(v1 + 288);
  uint64_t v30 = (void *)(v1 + 344);
  if (v21)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v30 = v21;
        int v31 = v21[7];
        if (v31 < 1) {
          break;
        }
        BOOL v21 = (int *)*v30;
        unsigned __int8 v4 = (uint64_t **)v30;
        if (!*v30) {
          goto LABEL_40;
        }
      }
      if ((v31 & 0x80000000) == 0) {
        break;
      }
      BOOL v21 = (int *)v30[1];
      if (!v21)
      {
        unsigned __int8 v4 = (uint64_t **)(v30 + 1);
        goto LABEL_40;
      }
    }
  }
  else
  {
LABEL_40:
    uint64_t v32 = v30;
    uint64_t v30 = operator new(0x28uLL);
    *((_DWORD *)v30 + 7) = 0;
    *((_DWORD *)v30 + 8) = 0;
    *uint64_t v30 = 0;
    v30[1] = 0;
    _OWORD v30[2] = v32;
    std::__shared_weak_count *v4 = v30;
    uint64_t v33 = **(void **)(v1 + 336);
    uint64_t v34 = v30;
    if (v33)
    {
      *(void *)(v1 + 336) = v33;
      uint64_t v34 = *v4;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 344), v34);
    ++*(void *)(v1 + 352);
  }
  *((_DWORD *)v30 + 8) = v29;
  int v35 = *(_DWORD *)(v1 + 288);
  *(_DWORD *)(v1 + 360) = v35;
  long long v36 = (uint64_t **)(v1 + 376);
  long long v37 = *(int **)(v1 + 376);
  long long v38 = (uint64_t **)(v1 + 376);
  int v39 = (void *)(v1 + 376);
  if (v37)
  {
    int v40 = *(int **)(v1 + 376);
    while (1)
    {
      while (1)
      {
        int v39 = v40;
        int v41 = v40[7];
        if (v41 < 2) {
          break;
        }
        int v40 = (int *)*v39;
        long long v38 = (uint64_t **)v39;
        if (!*v39) {
          goto LABEL_50;
        }
      }
      if (v41 == 1) {
        break;
      }
      int v40 = (int *)v39[1];
      if (!v40)
      {
        long long v38 = (uint64_t **)(v39 + 1);
        goto LABEL_50;
      }
    }
  }
  else
  {
LABEL_50:
    long long v42 = v39;
    int v39 = operator new(0x28uLL);
    *(void *)((char *)v39 + 28) = 1;
    void *v39 = 0;
    v39[1] = 0;
    v39[2] = v42;
    void *v38 = v39;
    uint64_t v43 = **(void **)(v1 + 368);
    int v44 = v39;
    if (v43)
    {
      *(void *)(v1 + 368) = v43;
      int v44 = *v38;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 376), v44);
    long long v37 = *(int **)(v1 + 376);
    ++*(void *)(v1 + 384);
  }
  *((_DWORD *)v39 + 8) = v35;
  int v45 = *(_DWORD *)(v1 + 288);
  int v46 = (uint64_t **)(v1 + 376);
  long long v47 = (void *)(v1 + 376);
  if (v37)
  {
    while (1)
    {
      while (1)
      {
        long long v47 = v37;
        int v48 = v37[7];
        if (v48 < 3) {
          break;
        }
        long long v37 = (int *)*v47;
        int v46 = (uint64_t **)v47;
        if (!*v47) {
          goto LABEL_60;
        }
      }
      if (v48 == 2) {
        break;
      }
      long long v37 = (int *)v47[1];
      if (!v37)
      {
        int v46 = (uint64_t **)(v47 + 1);
        goto LABEL_60;
      }
    }
  }
  else
  {
LABEL_60:
    CFTypeRef v49 = v47;
    long long v47 = operator new(0x28uLL);
    *(void *)((char *)v47 + 28) = 2;
    void *v47 = 0;
    v47[1] = 0;
    _OWORD v47[2] = v49;
    std::__shared_weak_count_vtbl *v46 = v47;
    uint64_t v50 = **(void **)(v1 + 368);
    long long v51 = v47;
    if (v50)
    {
      *(void *)(v1 + 368) = v50;
      long long v51 = *v46;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 376), v51);
    ++*(void *)(v1 + 384);
  }
  *((_DWORD *)v47 + 8) = v45;
  int v52 = *(_DWORD *)(v1 + 288);
  CFTypeRef v53 = *(int **)(v1 + 376);
  uint64_t v54 = (uint64_t **)(v1 + 376);
  CFTypeRef v55 = (void *)(v1 + 376);
  if (v53)
  {
    std::runtime_error v56 = *(int **)(v1 + 376);
    while (1)
    {
      while (1)
      {
        CFTypeRef v55 = v56;
        int v57 = v56[7];
        if (v57 < 4) {
          break;
        }
        std::runtime_error v56 = (int *)*v55;
        uint64_t v54 = (uint64_t **)v55;
        if (!*v55) {
          goto LABEL_70;
        }
      }
      if (v57 == 3) {
        break;
      }
      std::runtime_error v56 = (int *)v55[1];
      if (!v56)
      {
        uint64_t v54 = (uint64_t **)(v55 + 1);
        goto LABEL_70;
      }
    }
  }
  else
  {
LABEL_70:
    long long v58 = v55;
    CFTypeRef v55 = operator new(0x28uLL);
    *(void *)((char *)v55 + 28) = 3;
    *CFTypeRef v55 = 0;
    v55[1] = 0;
    v55[2] = v58;
    std::__shared_weak_count *v54 = v55;
    uint64_t v59 = **(void **)(v1 + 368);
    uint64_t v60 = v55;
    if (v59)
    {
      *(void *)(v1 + 368) = v59;
      uint64_t v60 = *v54;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 376), v60);
    CFTypeRef v53 = *(int **)(v1 + 376);
    ++*(void *)(v1 + 384);
  }
  *((_DWORD *)v55 + 8) = v52;
  int v61 = *(_DWORD *)(v1 + 288);
  long long v62 = (void *)(v1 + 376);
  if (v53)
  {
    while (1)
    {
      while (1)
      {
        long long v62 = v53;
        int v63 = v53[7];
        if (v63 < 1) {
          break;
        }
        CFTypeRef v53 = (int *)*v62;
        long long v36 = (uint64_t **)v62;
        if (!*v62) {
          goto LABEL_80;
        }
      }
      if ((v63 & 0x80000000) == 0) {
        break;
      }
      CFTypeRef v53 = (int *)v62[1];
      if (!v53)
      {
        long long v36 = (uint64_t **)(v62 + 1);
        goto LABEL_80;
      }
    }
  }
  else
  {
LABEL_80:
    long long v64 = v62;
    long long v62 = operator new(0x28uLL);
    *((_DWORD *)v62 + 7) = 0;
    *((_DWORD *)v62 + 8) = 0;
    void *v62 = 0;
    v62[1] = 0;
    v62[2] = v64;
    std::__shared_weak_count *v36 = v62;
    uint64_t v65 = **(void **)(v1 + 368);
    CFNumberRef v66 = v62;
    if (v65)
    {
      *(void *)(v1 + 368) = v65;
      CFNumberRef v66 = *v36;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 376), v66);
    ++*(void *)(v1 + 384);
  }
  *((_DWORD *)v62 + 8) = v61;
  int v67 = *(_DWORD *)(v1 + 288);
  long long v68 = (uint64_t **)(v1 + 400);
  unint64_t v69 = *(int **)(v1 + 400);
  long long v70 = (uint64_t **)(v1 + 400);
  uint64_t v71 = (void *)(v1 + 400);
  if (v69)
  {
    uint64_t v72 = *(int **)(v1 + 400);
    while (1)
    {
      while (1)
      {
        uint64_t v71 = v72;
        int v73 = v72[7];
        if (v73 < 2) {
          break;
        }
        uint64_t v72 = (int *)*v71;
        long long v70 = (uint64_t **)v71;
        if (!*v71) {
          goto LABEL_90;
        }
      }
      if (v73 == 1) {
        break;
      }
      uint64_t v72 = (int *)v71[1];
      if (!v72)
      {
        long long v70 = (uint64_t **)(v71 + 1);
        goto LABEL_90;
      }
    }
  }
  else
  {
LABEL_90:
    uint64_t v74 = v71;
    uint64_t v71 = operator new(0x28uLL);
    *(void *)((char *)v71 + 28) = 1;
    *uint64_t v71 = 0;
    v71[1] = 0;
    v71[2] = v74;
    *long long v70 = v71;
    uint64_t v75 = **(void **)(v1 + 392);
    unint64_t v76 = v71;
    if (v75)
    {
      *(void *)(v1 + 392) = v75;
      unint64_t v76 = *v70;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 400), v76);
    unint64_t v69 = *(int **)(v1 + 400);
    ++*(void *)(v1 + 408);
  }
  *((_DWORD *)v71 + 8) = v67;
  int v77 = *(_DWORD *)(v1 + 288);
  uint64_t v78 = (uint64_t **)(v1 + 400);
  uint64_t v79 = (void *)(v1 + 400);
  if (v69)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v79 = v69;
        int v80 = v69[7];
        if (v80 < 3) {
          break;
        }
        unint64_t v69 = (int *)*v79;
        uint64_t v78 = (uint64_t **)v79;
        if (!*v79) {
          goto LABEL_100;
        }
      }
      if (v80 == 2) {
        break;
      }
      unint64_t v69 = (int *)v79[1];
      if (!v69)
      {
        uint64_t v78 = (uint64_t **)(v79 + 1);
        goto LABEL_100;
      }
    }
  }
  else
  {
LABEL_100:
    CFDictionaryRef v81 = v79;
    uint64_t v79 = operator new(0x28uLL);
    *(void *)((char *)v79 + 28) = 2;
    *uint64_t v79 = 0;
    v79[1] = 0;
    v79[2] = v81;
    std::__shared_weak_count *v78 = v79;
    uint64_t v82 = **(void **)(v1 + 392);
    long long v83 = v79;
    if (v82)
    {
      *(void *)(v1 + 392) = v82;
      long long v83 = *v78;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 400), v83);
    ++*(void *)(v1 + 408);
  }
  *((_DWORD *)v79 + 8) = v77;
  int v84 = *(_DWORD *)(v1 + 288);
  unint64_t v85 = *(int **)(v1 + 400);
  unint64_t v86 = (uint64_t **)(v1 + 400);
  long long v87 = (void *)(v1 + 400);
  if (v85)
  {
    uint64_t v88 = *(int **)(v1 + 400);
    while (1)
    {
      while (1)
      {
        long long v87 = v88;
        int v89 = v88[7];
        if (v89 < 4) {
          break;
        }
        uint64_t v88 = (int *)*v87;
        unint64_t v86 = (uint64_t **)v87;
        if (!*v87) {
          goto LABEL_110;
        }
      }
      if (v89 == 3) {
        break;
      }
      uint64_t v88 = (int *)v87[1];
      if (!v88)
      {
        unint64_t v86 = (uint64_t **)(v87 + 1);
        goto LABEL_110;
      }
    }
  }
  else
  {
LABEL_110:
    char v90 = v87;
    long long v87 = operator new(0x28uLL);
    *(void *)((char *)v87 + 28) = 3;
    void *v87 = 0;
    v87[1] = 0;
    v87[2] = v90;
    NSObject *v86 = v87;
    uint64_t v91 = **(void **)(v1 + 392);
    uint64_t v92 = v87;
    if (v91)
    {
      *(void *)(v1 + 392) = v91;
      uint64_t v92 = *v86;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 400), v92);
    unint64_t v85 = *(int **)(v1 + 400);
    ++*(void *)(v1 + 408);
  }
  *((_DWORD *)v87 + 8) = v84;
  int v93 = *(_DWORD *)(v1 + 288);
  CFDictionaryRef v94 = (void *)(v1 + 400);
  if (v85)
  {
    while (1)
    {
      while (1)
      {
        CFDictionaryRef v94 = v85;
        int v95 = v85[7];
        if (v95 < 1) {
          break;
        }
        unint64_t v85 = (int *)*v94;
        long long v68 = (uint64_t **)v94;
        if (!*v94) {
          goto LABEL_120;
        }
      }
      if ((v95 & 0x80000000) == 0) {
        break;
      }
      unint64_t v85 = (int *)v94[1];
      if (!v85)
      {
        long long v68 = (uint64_t **)(v94 + 1);
        goto LABEL_120;
      }
    }
  }
  else
  {
LABEL_120:
    char v96 = v94;
    CFDictionaryRef v94 = operator new(0x28uLL);
    *((_DWORD *)v94 + 7) = 0;
    *((_DWORD *)v94 + 8) = 0;
    void *v94 = 0;
    v94[1] = 0;
    v94[2] = v96;
    *long long v68 = v94;
    uint64_t v97 = **(void **)(v1 + 392);
    size_t v98 = v94;
    if (v97)
    {
      *(void *)(v1 + 392) = v97;
      size_t v98 = *v68;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 400), v98);
    ++*(void *)(v1 + 408);
  }
  *((_DWORD *)v94 + 8) = v93;
  *(_DWORD *)(v1 + 420) = 0;
  uint64_t v99 = *(void *)(v1 + 312);
  v109[0] = MEMORY[0x263EF8330];
  v109[1] = 0x40000000;
  v109[2] = ___ZN5radio16ARICommandDriver4initEv_block_invoke_2;
  v109[3] = &__block_descriptor_tmp_7;
  v109[4] = v1;
  *(void *)long long buf = v109;
  ice::Client::setEventHandler<void({block_pointer})(void)>(v99, 0, (uint64_t *)buf);
  uint64_t v100 = *(void *)(v1 + 312);
  v108[0] = MEMORY[0x263EF8330];
  v108[1] = 0x40000000;
  v108[2] = ___ZN5radio16ARICommandDriver4initEv_block_invoke_3;
  v108[3] = &__block_descriptor_tmp_4_1;
  v108[4] = v1;
  *(void *)long long buf = v108;
  ice::Client::setEventHandler<void({block_pointer})(void)>(v100, 1, (uint64_t *)buf);
  uint64_t v101 = (std::__shared_weak_count *)operator new(0x20uLL);
  v101->__shared_owners_ = 0;
  p_uint64_t shared_owners = &v101->__shared_owners_;
  v101->__shared_weak_owners_ = 0;
  v101[1].__vftable = (std::__shared_weak_count_vtbl *)v1;
  v101->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93FD90;
  *(void *)long long buf = MEMORY[0x263EF8330];
  uint64_t v111 = 1174405120;
  uint64_t v112 = ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver4initEvEUb_E3__0vEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  uint64_t v113 = &__block_descriptor_tmp_162;
  unint64_t v114 = v101 + 1;
  unint64_t v115 = v101;
  atomic_fetch_add_explicit(&v101->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 0x40000000;
  xpc_object_t aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
  aBlock[3] = &unk_264C7DF90;
  void aBlock[4] = buf;
  CFDictionaryRef v103 = _Block_copy(aBlock);
  unint64_t v104 = v115;
  if (!v115 || atomic_fetch_add(&v115->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_127;
    }
    goto LABEL_126;
  }
  ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
  std::__shared_weak_count::__release_weak(v104);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_126:
    ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
    std::__shared_weak_count::__release_weak(v101);
  }
LABEL_127:
  *(void *)long long buf = v103;
  ice::Client::regIndicationInternal();
  if (*(void *)buf) {
    _Block_release(*(const void **)buf);
  }
  ice::Client::setIndShouldWake(*(ice::Client **)(v1 + 312));
  uint64_t v105 = *(void *)(v1 + 312);
  v107[0] = MEMORY[0x263EF8330];
  v107[1] = 0x40000000;
  v107[2] = ___ZN5radio16ARICommandDriver4initEv_block_invoke_5;
  v107[3] = &__block_descriptor_tmp_8_0;
  v107[4] = v1;
  *(void *)long long buf = v107;
  ice::Client::regIndication<void({block_pointer})(unsigned char *,unsigned int)>(v105, 92798976, (uint64_t *)buf);
  ice::Client::setIndShouldWake(*(ice::Client **)(v1 + 312));
  return ice::Client::start(*(ice::Client **)(v1 + 312));
}

void sub_235E271D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *aBlock)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN5radio16ARICommandDriver4initEv_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(radio::CommandDriver **)(a1 + 32);
  int v2 = *((void *)v1 + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_debug_impl(&dword_235DB9000, v2, OS_LOG_TYPE_DEBUG, "#D Started", buf, 2u);
  }
  radio::CommandDriver::handleClientStateChanged_sync(v1);
  v3[0] = 0;
  v3[1] = 0;
  radio::ARICommandDriver::getOperatingMode((uint64_t)v1, (uint64_t)v3);
}

void sub_235E27278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void radio::ARICommandDriver::getOperatingMode(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(a1 + 72);
  unsigned __int8 v4 = *(std::__shared_weak_count **)(a1 + 80);
  xpc_object_t v5 = (uint64_t *)(a1 + 72);
  if (!v4 || (int v8 = std::__shared_weak_count::lock(v4)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v9 = v8;
  p_shared_weak_owners = &v8->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  v13[0] = MEMORY[0x263EF8330];
  v13[1] = 1174405120;
  void v13[2] = ___ZN5radio16ARICommandDriver16getOperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke;
  v13[3] = &__block_descriptor_tmp_26_1;
  v13[4] = a1;
  void v13[5] = v6;
  unsigned int v14 = v9;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v11 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v11 = _Block_copy(v11);
  }
  uint64_t v12 = *(NSObject **)(a2 + 8);
  aBlocunint64_t k = v11;
  dispatch_object_t object = v12;
  if (v12) {
    dispatch_retain(v12);
  }
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(v5, (uint64_t)v13);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  std::__shared_weak_count::__release_weak(v9);
}

uint64_t dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(uint64_t a1)
{
  int v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  if (*(void *)a1) {
    _Block_release(*(const void **)a1);
  }
  return a1;
}

uint64_t ___ZN5radio16ARICommandDriver4initEv_block_invoke_3(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)unsigned __int8 v4 = 0;
    _os_log_debug_impl(&dword_235DB9000, v2, OS_LOG_TYPE_DEBUG, "#D Stopped", v4, 2u);
  }
  radio::CommandDriver::handleClientStateChanged_sync((radio::CommandDriver *)v1);
  uint64_t result = radio::CommandDriver::handleOperatingModeChanged_sync();
  *(unsigned char *)(v1 + 328) = 0;
  return result;
}

void ___ZN5radio16ARICommandDriver4initEv_block_invoke_5(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v95 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v59 = v3;
  long long v60 = v3;
  v58[2] = v3;
  v58[3] = v3;
  v58[0] = v3;
  v58[1] = v3;
  AriSdk::ARI_CsiBSPBBDumpInd_SDK::ARI_CsiBSPBBDumpInd_SDK((AriSdk::ARI_CsiBSPBBDumpInd_SDK *)v58, a2);
  if (AriSdk::ARI_CsiBSPBBDumpInd_SDK::unpack((AriSdk::ARI_CsiBSPBBDumpInd_SDK *)v58))
  {
    BOOL v4 = 1;
    std::string::size_type v5 = 0xAAAAAAAAAAAAAAAALL;
    uint64_t v6 = 0x7AAAAAAAAAAAAAALL;
    uint64_t v7 = 0x6E776F6E6B6E75;
    goto LABEL_19;
  }
  long long v8 = v59;
  unint64_t v9 = *((void *)&v59 + 1) - v59;
  if (*((void *)&v59 + 1) - (void)v59 >= 0x7FFFFFFFFFFFFFF8uLL) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v9 > 0x16)
  {
    uint64_t v17 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v17 = v9 | 7;
    }
    uint64_t v18 = v17 + 1;
    uint64_t v10 = operator new(v17 + 1);
    *(void *)&v74[8] = v9;
    *(void *)&v74[16] = v18 | 0x8000000000000000;
    *(void *)uint64_t v74 = v10;
    if ((void)v8 != *((void *)&v8 + 1)) {
      goto LABEL_6;
    }
LABEL_15:
    uint64_t v11 = v10;
    goto LABEL_18;
  }
  v74[23] = BYTE8(v59) - v59;
  uint64_t v10 = v74;
  if ((void)v59 == *((void *)&v59 + 1)) {
    goto LABEL_15;
  }
LABEL_6:
  if (v9 < 0x20 || (unint64_t)&v10[-v8] < 0x20)
  {
    uint64_t v11 = v10;
    uint64_t v12 = (char *)v8;
  }
  else
  {
    uint64_t v11 = &v10[v9 & 0xFFFFFFFFFFFFFFE0];
    uint64_t v12 = (char *)(v8 + (v9 & 0xFFFFFFFFFFFFFFE0));
    int v13 = (long long *)(v8 + 16);
    unsigned int v14 = v10 + 16;
    unint64_t v15 = v9 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v16 = *v13;
      *(v14 - 1) = *(v13 - 1);
      _OWORD *v14 = v16;
      v13 += 2;
      v14 += 2;
      v15 -= 32;
    }
    while (v15);
    if (v9 == (v9 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_18;
    }
  }
  do
  {
    char v19 = *v12++;
    *v11++ = v19;
  }
  while (v12 != *((char **)&v8 + 1));
LABEL_18:
  *uint64_t v11 = 0;
  std::string::size_type v5 = *(void *)&v74[8];
  uint64_t v7 = *(void *)v74;
  uint64_t v6 = *(void *)&v74[16];
  BOOL v4 = **((_DWORD **)&v60 + 1) != 0;
LABEL_19:
  int v57 = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  BOOL v21 = Mutable;
  if (Mutable) {
    int v57 = Mutable;
  }
  if (v6 < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v74, (const std::string::value_type *)v7, v5);
  }
  else
  {
    *(void *)uint64_t v74 = v7;
    *(void *)&v74[8] = v5;
    *(void *)&v74[16] = v6;
  }
  ctu::cf::insert<__CFString const*,std::string>((int)v21, (CFTypeRef)*MEMORY[0x263F8B8D8]);
  if ((v74[23] & 0x80000000) != 0) {
    operator delete(*(void **)v74);
  }
  ctu::cf::insert<__CFString const*,BOOL>(v21, (CFTypeRef)*MEMORY[0x263F8B900], v4);
  uint64_t v22 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t v74 = 138412290;
    *(void *)&v74[4] = v21;
    _os_log_impl(&dword_235DB9000, v22, OS_LOG_TYPE_DEFAULT, "#I Baseband requested to dump logs\n%@", v74, 0xCu);
  }
  if (v21 && (CFTypeID v23 = CFGetTypeID(v21), v23 == CFDictionaryGetTypeID()))
  {
    CFRetain(v21);
    uint64_t v24 = *(void *)(v2 + 112);
    CFTypeRef v61 = v21;
    CFRetain(v21);
    int v25 = v21;
  }
  else
  {
    int v25 = 0;
    uint64_t v24 = *(void *)(v2 + 112);
    CFTypeRef v61 = 0;
  }
  long long v68 = 0;
  unint64_t v69 = 0;
  *(void *)&long long v26 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v26 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v81 = v26;
  long long v82 = v26;
  long long v79 = v26;
  long long v80 = v26;
  long long v77 = v26;
  long long v78 = v26;
  long long v75 = v26;
  long long v76 = v26;
  *(_OWORD *)uint64_t v74 = v26;
  *(_OWORD *)&v74[16] = v26;
  uint64_t v27 = *(pthread_mutex_t **)(v24 + 24);
  __p[0] = (void *)10;
  __p[1] = v74;
  v84[0] = 0;
  v84[1] = v27;
  pthread_mutex_lock(v27);
  uint64_t v28 = *(atomic_uint **)(v24 + 8);
  if (!v28)
  {
    uint64_t v30 = *(uint64_t ***)v24;
    goto LABEL_44;
  }
  unsigned int explicit = atomic_load_explicit(v28 + 2, memory_order_acquire);
  uint64_t v30 = *(uint64_t ***)v24;
  if (explicit == 1)
  {
    int v31 = *v30;
    uint64_t v32 = *(void *)(v24 + 16);
    if ((uint64_t *)v32 == *v30)
    {
      uint64_t v32 = v31[1];
      *(void *)&long long v70 = v32;
      if (v31 == (uint64_t *)v32)
      {
LABEL_41:
        *(void *)(v24 + 16) = v32;
        goto LABEL_42;
      }
    }
    else
    {
      *(void *)&long long v70 = *(void *)(v24 + 16);
    }
    uint64_t v33 = *(void *)(v32 + 16);
    if (*(unsigned char *)(v33 + 24))
    {
      uint64_t v32 = *(void *)(v32 + 8);
    }
    else
    {
      uint64_t v32 = boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>>::erase(v31, (int *)(v33 + 64), (uint64_t **)&v70);
      uint64_t v30 = *(uint64_t ***)v24;
    }
    goto LABEL_41;
  }
LABEL_42:
  uint64_t v28 = *(atomic_uint **)(v24 + 8);
  if (v28) {
    atomic_fetch_add_explicit(v28 + 2, 1u, memory_order_relaxed);
  }
LABEL_44:
  uint64_t v34 = v69;
  long long v68 = v30;
  unint64_t v69 = v28;
  if (v34)
  {
    if (atomic_fetch_add(v34 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v34 + 16))(v34);
      if (atomic_fetch_add(v34 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v34 + 24))(v34);
      }
    }
  }
  pthread_mutex_unlock(v84[1]);
  int v35 = (char *)__p[1];
  if (__p[1])
  {
    if ((uint64_t)&v84[0][-1].__opaque[55] >= 0)
    {
      long long v36 = (char *)__p[1] + 16 * (uint64_t)v84[0];
      do
      {
        long long v37 = (atomic_uint *)*((void *)v36 - 1);
        if (v37)
        {
          if (atomic_fetch_add(v37 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v37 + 16))(v37);
            if (atomic_fetch_add(v37 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v37 + 24))(v37);
            }
          }
        }
        v36 -= 16;
      }
      while (v36 > v35);
    }
    if (__p[0] >= (void *)0xB) {
      operator delete(__p[1]);
    }
  }
  *(void *)&long long v38 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v38 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v86 = v38;
  long long v87 = v38;
  *(_OWORD *)int v84 = v38;
  long long v85 = v38;
  long long v82 = v38;
  *(_OWORD *)long long __p = v38;
  long long v80 = v38;
  long long v81 = v38;
  long long v78 = v38;
  long long v79 = v38;
  long long v76 = v38;
  long long v77 = v38;
  *(_OWORD *)&v74[16] = v38;
  long long v75 = v38;
  *(_OWORD *)uint64_t v74 = v38;
  v74[0] = 0;
  unint64_t v88 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v89 = 10;
  char v90 = &v74[8];
  uint64_t v91 = 0;
  uint64_t v94 = 0;
  uint64_t v92 = &v61;
  uint64_t v93 = 0;
  int v39 = v68;
  uint64_t v40 = (uint64_t)*v68;
  uint64_t v65 = v74;
  uint64_t v66 = v24;
  uint64_t v67 = v40;
  *(void *)&long long v63 = *(void *)(v40 + 8);
  *((void *)&v63 + 1) = v40;
  *(void *)&long long v64 = v74;
  *((void *)&v64 + 1) = v40;
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>::lock_next_callable(&v63);
  v62[0] = *v39;
  v62[1] = v62[0];
  v62[2] = v74;
  v62[3] = v62[0];
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>::lock_next_callable(v62);
  long long v70 = v63;
  long long v71 = v64;
  uint64_t v41 = v62[0];
  uint64_t v42 = v63;
  if ((void)v63 == v62[0])
  {
    if (HIDWORD(v93) <= v93) {
      goto LABEL_86;
    }
LABEL_85:
    boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::force_cleanup_connections(v66, v67);
    goto LABEL_86;
  }
  uint64_t v43 = (unsigned char *)v71;
  if (!*(unsigned char *)v71)
  {
    uint64_t v44 = *(void *)(*(void *)(v70 + 16) + 32);
    int v45 = *(CFTypeRef **)(v71 + 272);
    CFTypeRef v46 = *v45;
    if (*v45) {
      CFRetain(*v45);
    }
    uint64_t v47 = *(void *)(v44 + 24);
    if (!v47)
    {
      std::runtime_error::runtime_error(&v73, "call to empty boost::function");
      v73.__vftable = (std::runtime_error_vtbl *)&unk_26E93D570;
      boost::throw_exception<boost::bad_function_call>(&v73);
    }
    int v48 = *(void (**)(uint64_t, CFTypeRef *))((v47 & 0xFFFFFFFFFFFFFFFELL) + 8);
    CFTypeRef cf = v46;
    v48(v44 + 32, &cf);
    if (cf) {
      CFRelease(cf);
    }
    if (!*v43) {
      unsigned char *v43 = 1;
    }
  }
  *(void *)&long long v70 = *(void *)(v42 + 8);
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>::lock_next_callable(&v70);
  uint64_t v49 = v71;
  if (*(unsigned char *)v71) {
    *(unsigned char *)long long v71 = 0;
  }
  for (uint64_t i = v70; (void)v70 != v41; uint64_t i = v70)
  {
    uint64_t v51 = *(void *)(*(void *)(i + 16) + 32);
    int v52 = *(CFTypeRef **)(v49 + 272);
    CFTypeRef v53 = *v52;
    if (*v52) {
      CFRetain(*v52);
    }
    uint64_t v54 = *(void *)(v51 + 24);
    if (!v54)
    {
      std::runtime_error::runtime_error(&v73, "call to empty boost::function");
      v73.__vftable = (std::runtime_error_vtbl *)&unk_26E93D570;
      boost::throw_exception<boost::bad_function_call>(&v73);
    }
    CFTypeRef v55 = *(void (**)(uint64_t, CFTypeRef *))((v54 & 0xFFFFFFFFFFFFFFFELL) + 8);
    CFTypeRef cf = v53;
    v55(v51 + 32, &cf);
    if (cf) {
      CFRelease(cf);
    }
    if (!*(unsigned char *)v49) {
      *(unsigned char *)uint64_t v49 = 1;
    }
    *(void *)&long long v70 = *(void *)(i + 8);
    boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>::lock_next_callable(&v70);
    uint64_t v49 = v71;
    if (*(unsigned char *)v71) {
      *(unsigned char *)long long v71 = 0;
    }
  }
  if (*((_DWORD *)v65 + 71) > *((_DWORD *)v65 + 70)) {
    goto LABEL_85;
  }
LABEL_86:
  boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>>>::~slot_call_iterator_cache((uint64_t)v74);
  std::runtime_error v56 = v69;
  if (v69)
  {
    if (atomic_fetch_add(v69 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v56 + 16))(v56);
      if (atomic_fetch_add(v56 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v56 + 24))(v56);
      }
    }
  }
  if (v61) {
    CFRelease(v61);
  }
  if (v25)
  {
    CFRelease(v25);
    BOOL v21 = v57;
  }
  if (v21) {
    CFRelease(v21);
  }
  MEMORY[0x237DF53E0](v58);
  if (v6 < 0) {
    operator delete((void *)v7);
  }
}

void sub_235E27D84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
}

void sub_235E27D94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,std::runtime_error a45)
{
  std::runtime_error::~runtime_error(&a45);
  if (v46) {
    CFRelease(v46);
  }
  if (a2 == 2)
  {
    __cxa_begin_catch(a1);
    boost::signals2::detail::connection_body_base::disconnect(*(boost::signals2::detail::connection_body_base **)(a39 + 16));
    __cxa_rethrow();
  }
  boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(&v54);
  boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>>>::~slot_call_iterator_cache((uint64_t)&v56);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&v55);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&v53);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&v50);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&v51);
  MEMORY[0x237DF53E0](&v52);
  if (v47 < 0) {
    operator delete(v45);
  }
  _Unwind_Resume(a1);
}

void sub_235E27E20(_Unwind_Exception *a1, int a2)
{
  __cxa_end_catch();
  if (a2 != 2)
  {
    boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(&v10);
    boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>>>::~slot_call_iterator_cache((uint64_t)&v12);
    boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&v11);
    ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&v9);
    ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&v6);
    ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&v7);
    MEMORY[0x237DF53E0](&v8);
    if (v3 < 0) {
      operator delete(v2);
    }
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x235E27DF0);
}

void sub_235E27E7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (__p)
  {
    if (a69 - 1 >= 0)
    {
      unint64_t v69 = &__p[16 * a69];
      do
      {
        long long v70 = (atomic_uint *)*((void *)v69 - 1);
        if (v70)
        {
          if (atomic_fetch_add(v70 + 2, 0xFFFFFFFF) == 1)
          {
            (*(void (**)(atomic_uint *))(*(void *)v70 + 16))(v70);
            if (atomic_fetch_add(v70 + 3, 0xFFFFFFFF) == 1) {
              (*(void (**)(atomic_uint *))(*(void *)v70 + 24))(v70);
            }
          }
        }
        v69 -= 16;
      }
      while (v69 > __p);
    }
    if (a67 >= 0xB) {
      operator delete(__p);
    }
  }
  JUMPOUT(0x235E27FACLL);
}

void sub_235E27F44(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a52 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x235E27FC4);
}

void sub_235E27F78()
{
}

void sub_235E27F88(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x235E27FE0);
}

void radio::ARICommandDriver::reset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  BOOL v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(block) = 136315138;
    *(void *)((char *)&block + 4) = "reset";
    _os_log_debug_impl(&dword_235DB9000, v4, OS_LOG_TYPE_DEBUG, "#D %s: not supported!", (uint8_t *)&block, 0xCu);
  }
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  char v8 = 13;
  strcpy((char *)__p, "Not supported");
  CreateError();
  CFRetain((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
  if (*(void *)a3) {
    std::string::size_type v5 = _Block_copy(*(const void **)a3);
  }
  else {
    std::string::size_type v5 = 0;
  }
  uint64_t v6 = *(NSObject **)(a3 + 8);
  *(void *)&blocunint64_t k = MEMORY[0x263EF8330];
  *((void *)&block + 1) = 1174405120;
  uint64_t v11 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
  uint64_t v12 = &__block_descriptor_tmp_181;
  if (v5)
  {
    aBlocunint64_t k = _Block_copy(v5);
    CFTypeRef v14 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  }
  else
  {
    aBlocunint64_t k = 0;
    CFTypeRef v14 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  }
  CFRetain((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
  dispatch_async(v6, &block);
  if (v14) {
    CFRelease(v14);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v5) {
    _Block_release(v5);
  }
  CFRelease((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
  CFRelease(cf);
}

void sub_235E281D4(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_235E2820C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x235E281FCLL);
}

uint64_t radio::ARICommandDriver::powerOff(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long __p = (void *)0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  void v24[2] = v5;
  v24[3] = v5;
  v24[0] = v5;
  v24[1] = v5;
  AriSdk::ARI_CsiBspShutdownReq_SDK::ARI_CsiBspShutdownReq_SDK((AriSdk::ARI_CsiBspShutdownReq_SDK *)v24);
  uint64_t v6 = operator new(4uLL);
  _DWORD *v6 = 2;
  uint64_t v7 = __p;
  long long __p = v6;
  if (v7) {
    operator delete(v7);
  }
  uint64_t v9 = *(void *)(a1 + 312);
  char v8 = *(std::__shared_weak_count **)(a1 + 320);
  CFTypeID v23 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*(void *)a3)
  {
    uint64_t v10 = _Block_copy(*(const void **)a3);
    uint64_t v11 = *(NSObject **)(a3 + 8);
    BOOL v21 = v10;
    uint64_t v22 = v11;
    if (!v11) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v10 = 0;
  uint64_t v11 = *(NSObject **)(a3 + 8);
  BOOL v21 = 0;
  uint64_t v22 = v11;
  if (v11) {
LABEL_7:
  }
    dispatch_retain(v11);
LABEL_8:
  v26[0] = (void *)0x776F642074756873;
  v26[1] = (void *)110;
  HIBYTE(v27) = 9;
  if (!v10)
  {
    uint64_t v12 = 0;
    uint64_t v28 = 0;
    dispatch_object_t object = v11;
    if (!v11) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  uint64_t v12 = (std::__shared_weak_count_vtbl *)_Block_copy(v10);
  uint64_t v28 = v12;
  dispatch_object_t object = v11;
  if (v11) {
LABEL_10:
  }
    dispatch_retain(v11);
LABEL_11:
  int v13 = (std::__shared_weak_count *)operator new(0x40uLL);
  v13->__shared_owners_ = 0;
  p_uint64_t shared_owners = &v13->__shared_owners_;
  v13->__shared_weak_owners_ = 0;
  v13->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93FF38;
  v13[1].std::__shared_count = *(std::__shared_count *)v26;
  v26[0] = 0;
  v26[1] = 0;
  v13[1].__shared_weak_owners_ = v27;
  v13[2].__vftable = v12;
  v13[2].__shared_owners_ = (uint64_t)v11;
  uint64_t v28 = 0;
  dispatch_object_t object = 0;
  uint64_t v27 = 0;
  *(void *)&long long v31 = MEMORY[0x263EF8330];
  *((void *)&v31 + 1) = 1174405120;
  *(void *)&long long v32 = ___ZN3ice6detail12wrapCallbackIZN5utils7sendMsgIN6AriSdk27ARI_CsiBspShutdownRspCb_SDKEEEvNSt3__110shared_ptrINS_6ClientEEERNS4_7MsgBaseENS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUlPKhjE_vEENSI_5blockIU13block_pointerFiPhjEEENS6_17integral_constantIiLi2EEEOT__block_invoke;
  *((void *)&v32 + 1) = &__block_descriptor_tmp_182;
  unint64_t v33 = (unint64_t)&v13[1];
  uint64_t v34 = v13;
  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlocunint64_t k = MEMORY[0x263EF8330];
  uint64_t v36 = 0x40000000;
  long long v37 = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
  long long v38 = &unk_264C7DF90;
  int v39 = &v31;
  uint64_t v15 = _Block_copy(&aBlock);
  long long v16 = v34;
  if (!v34 || atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
  std::__shared_weak_count::__release_weak(v16);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_14:
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
LABEL_15:
  *(void *)&long long v17 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v31 = v17;
  long long v32 = v17;
  unint64_t v33 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v18 = *(std::__shared_weak_count **)(v9 + 16);
  aBlocunint64_t k = *(void *)(v9 + 8);
  if (!v18)
  {
    uint64_t v36 = 0;
LABEL_43:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v36 = (uint64_t)std::__shared_weak_count::lock(v18);
  if (!v36) {
    goto LABEL_43;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  char v19 = (std::__shared_weak_count *)v36;
  if (v36 && !atomic_fetch_add((atomic_ullong *volatile)(v36 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  uint64_t v30 = v15;
  ice::SendMsgBaseProxy::callback();
  if (v30) {
    _Block_release(v30);
  }
  MEMORY[0x237DF50B0](&v31);
  if (object) {
    dispatch_release(object);
  }
  if (v28) {
    _Block_release(v28);
  }
  if (SHIBYTE(v27) < 0) {
    operator delete(v26[0]);
  }
  if (v22) {
    dispatch_release(v22);
  }
  if (v21) {
    _Block_release(v21);
  }
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  return MEMORY[0x237DF5630](v24);
}

void sub_235E28628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *aBlock)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  MEMORY[0x237DF50B0](v28 - 144);
  utils::sendMsg<AriSdk::ARI_CsiBspShutdownRspCb_SDK>(std::shared_ptr<ice::Client>,AriSdk::MsgBase &,std::string,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::{lambda(unsigned char const*,unsigned int)#1}::~callback((uint64_t)&a23);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)&a9);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  MEMORY[0x237DF5630](&a13);
  _Unwind_Resume(a1);
}

void radio::ARICommandDriver::releaseResetDetect(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(block) = 136315138;
    *(void *)((char *)&block + 4) = "releaseResetDetect";
    _os_log_debug_impl(&dword_235DB9000, v3, OS_LOG_TYPE_DEBUG, "#D %s: not supported!", (uint8_t *)&block, 0xCu);
  }
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  char v7 = 13;
  strcpy((char *)__p, "Not supported");
  CreateError();
  CFRetain((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
  if (*(void *)a2) {
    BOOL v4 = _Block_copy(*(const void **)a2);
  }
  else {
    BOOL v4 = 0;
  }
  long long v5 = *(NSObject **)(a2 + 8);
  *(void *)&blocunint64_t k = MEMORY[0x263EF8330];
  *((void *)&block + 1) = 1174405120;
  uint64_t v10 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
  uint64_t v11 = &__block_descriptor_tmp_181;
  if (v4)
  {
    aBlocunint64_t k = _Block_copy(v4);
    CFTypeRef v13 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  }
  else
  {
    aBlocunint64_t k = 0;
    CFTypeRef v13 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  }
  CFRetain((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
  dispatch_async(v5, &block);
  if (v13) {
    CFRelease(v13);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v4) {
    _Block_release(v4);
  }
  CFRelease((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
  CFRelease(cf);
}

void sub_235E288A0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_235E288D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x235E288C8);
}

void radio::ARICommandDriver::eraseNonvol(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(block) = 136315138;
    *(void *)((char *)&block + 4) = "eraseNonvol";
    _os_log_debug_impl(&dword_235DB9000, v3, OS_LOG_TYPE_DEBUG, "#D %s: not supported!", (uint8_t *)&block, 0xCu);
  }
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  char v7 = 13;
  strcpy((char *)__p, "Not supported");
  CreateError();
  CFRetain((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
  if (*(void *)a2) {
    BOOL v4 = _Block_copy(*(const void **)a2);
  }
  else {
    BOOL v4 = 0;
  }
  long long v5 = *(NSObject **)(a2 + 8);
  *(void *)&blocunint64_t k = MEMORY[0x263EF8330];
  *((void *)&block + 1) = 1174405120;
  uint64_t v10 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
  uint64_t v11 = &__block_descriptor_tmp_181;
  if (v4)
  {
    aBlocunint64_t k = _Block_copy(v4);
    CFTypeRef v13 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  }
  else
  {
    aBlocunint64_t k = 0;
    CFTypeRef v13 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  }
  CFRetain((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
  dispatch_async(v5, &block);
  if (v13) {
    CFRelease(v13);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v4) {
    _Block_release(v4);
  }
  CFRelease((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
  CFRelease(cf);
}

void sub_235E28AE0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_235E28B18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x235E28B08);
}

void radio::ARICommandDriver::restoreNonvolDefaults(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(block) = 136315138;
    *(void *)((char *)&block + 4) = "restoreNonvolDefaults";
    _os_log_debug_impl(&dword_235DB9000, v3, OS_LOG_TYPE_DEBUG, "#D %s: not supported!", (uint8_t *)&block, 0xCu);
  }
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  char v7 = 13;
  strcpy((char *)__p, "Not supported");
  CreateError();
  CFRetain((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
  if (*(void *)a2) {
    BOOL v4 = _Block_copy(*(const void **)a2);
  }
  else {
    BOOL v4 = 0;
  }
  long long v5 = *(NSObject **)(a2 + 8);
  *(void *)&blocunint64_t k = MEMORY[0x263EF8330];
  *((void *)&block + 1) = 1174405120;
  uint64_t v10 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
  uint64_t v11 = &__block_descriptor_tmp_181;
  if (v4)
  {
    aBlocunint64_t k = _Block_copy(v4);
    CFTypeRef v13 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  }
  else
  {
    aBlocunint64_t k = 0;
    CFTypeRef v13 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  }
  CFRetain((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
  dispatch_async(v5, &block);
  if (v13) {
    CFRelease(v13);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v4) {
    _Block_release(v4);
  }
  CFRelease((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
  CFRelease(cf);
}

void sub_235E28D20(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_235E28D58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x235E28D48);
}

void radio::ARICommandDriver::getBasebandTime(void *a1, uint64_t a2)
{
  BOOL v4 = a1[5];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_235DB9000, v4, OS_LOG_TYPE_DEFAULT, "#I Getting baseband time", buf, 2u);
  }
  uint64_t v6 = a1[9];
  long long v5 = (std::__shared_weak_count *)a1[10];
  if (!v5 || (char v7 = std::__shared_weak_count::lock(v5)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  char v8 = v7;
  p_shared_weak_owners = &v7->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 1174405120;
  void v12[2] = ___ZN5radio16ARICommandDriver15getBasebandTimeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke;
  v12[3] = &__block_descriptor_tmp_12_0;
  _OWORD v12[4] = a1;
  void v12[5] = v6;
  CFTypeRef v13 = v8;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v10 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v10 = _Block_copy(v10);
  }
  uint64_t v11 = *(NSObject **)(a2 + 8);
  aBlocunint64_t k = v10;
  dispatch_object_t object = v11;
  if (v11) {
    dispatch_retain(v11);
  }
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(a1 + 9, (uint64_t)v12);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v13) {
    std::__shared_weak_count::__release_weak(v13);
  }
  std::__shared_weak_count::__release_weak(v8);
}

uint64_t ___ZN5radio16ARICommandDriver15getBasebandTimeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  _OWORD v22[2] = v3;
  v22[3] = v3;
  v22[0] = v3;
  v22[1] = v3;
  AriSdk::ARI_CsiGetSystemTimeReq_SDK::ARI_CsiGetSystemTimeReq_SDK((AriSdk::ARI_CsiGetSystemTimeReq_SDK *)v22);
  uint64_t v4 = *(void *)(v2 + 312);
  uint64_t v6 = (std::__shared_weak_count_vtbl *)a1[5];
  long long v5 = (std::__shared_weak_count *)a1[6];
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  char v7 = (const void *)a1[7];
  if (v7)
  {
    char v8 = _Block_copy(v7);
    uint64_t v9 = a1[8];
    uint64_t v18 = v8;
    dispatch_object_t object = v9;
    if (!v9) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v8 = 0;
  uint64_t v9 = a1[8];
  uint64_t v18 = 0;
  dispatch_object_t object = v9;
  if (v9) {
LABEL_5:
  }
    dispatch_retain(v9);
LABEL_6:
  uint64_t v10 = (std::__shared_weak_count *)operator new(0x40uLL);
  v10->__shared_owners_ = 0;
  p_uint64_t shared_owners = &v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E93FFE8;
  v10[1].__vftable = v6;
  v10[1].__shared_owners_ = (uint64_t)v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v8)
  {
    v10[1].__shared_weak_owners_ = 0;
    v10[2].__vftable = (std::__shared_weak_count_vtbl *)v9;
    if (!v9) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  v10[1].__shared_weak_owners_ = (uint64_t)_Block_copy(v8);
  v10[2].__vftable = (std::__shared_weak_count_vtbl *)v9;
  if (v9) {
LABEL_10:
  }
    dispatch_retain(v9);
LABEL_11:
  v10[2].__shared_owners_ = v2;
  uint64_t v23 = MEMORY[0x263EF8330];
  uint64_t v24 = 1174405120;
  int v25 = ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver15getBasebandTimeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS8_IK14__CFDictionaryEEEEEEUb0_E3__1vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  long long v26 = &__block_descriptor_tmp_185;
  uint64_t v27 = v10 + 1;
  uint64_t v28 = v10;
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlock[0] = (const void *)MEMORY[0x263EF8330];
  aBlock[1] = (const void *)0x40000000;
  xpc_object_t aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
  aBlock[3] = &unk_264C7DF90;
  void aBlock[4] = &v23;
  uint64_t v12 = _Block_copy(aBlock);
  CFTypeRef v13 = v28;
  if (!v28 || atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_14:
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
LABEL_15:
  *(void *)&long long v14 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v20[0] = v14;
  v20[1] = v14;
  unint64_t v21 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v15 = *(std::__shared_weak_count **)(v4 + 16);
  uint64_t v23 = *(void *)(v4 + 8);
  if (!v15)
  {
    uint64_t v24 = 0;
LABEL_36:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v24 = (uint64_t)std::__shared_weak_count::lock(v15);
  if (!v24) {
    goto LABEL_36;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  long long v16 = (std::__shared_weak_count *)v24;
  if (v24 && !atomic_fetch_add((atomic_ullong *volatile)(v24 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  aBlock[0] = v12;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0]) {
    _Block_release(aBlock[0]);
  }
  MEMORY[0x237DF50B0](v20);
  if (object) {
    dispatch_release(object);
  }
  if (v18) {
    _Block_release(v18);
  }
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  return MEMORY[0x237DF5970](v22);
}

void sub_235E29268(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  uint64_t v4 = *(const void **)(v2 - 120);
  if (v4) {
    _Block_release(v4);
  }
  MEMORY[0x237DF50B0]((uint64_t *)va1);
  _ZZZN5radio16ARICommandDriver15getBasebandTimeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEEEUb0_EN3__1D1Ev((uint64_t *)va);
  MEMORY[0x237DF5970](va2);
  _Unwind_Resume(a1);
}

void sub_235E2929C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  if (v30) {
    _Block_release(v30);
  }
  _ZZZN5radio16ARICommandDriver15getBasebandTimeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEEEUb0_EN3__1D1Ev(&a10);
  MEMORY[0x237DF5970](&a21);
  _Unwind_Resume(a1);
}

void *_ZZZN5radio16ARICommandDriver15getBasebandTimeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEEEUb0_EN3__1D1Ev(void *a1)
{
  uint64_t v2 = a1[3];
  if (v2) {
    dispatch_release(v2);
  }
  long long v3 = (const void *)a1[2];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void __copy_helper_block_e8_40c46_ZTSNSt3__18weak_ptrIN5radio13CommandDriverEEE56c103_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEE(void *a1, void *a2)
{
  uint64_t v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (void *)a2[7];
  if (v5) {
    uint64_t v5 = _Block_copy(v5);
  }
  uint64_t v6 = a2[8];
  a1[7] = v5;
  a1[8] = v6;
  if (v6)
  {
    dispatch_retain(v6);
  }
}

void __destroy_helper_block_e8_40c46_ZTSNSt3__18weak_ptrIN5radio13CommandDriverEEE56c103_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEE(void *a1)
{
  uint64_t v2 = a1[8];
  if (v2) {
    dispatch_release(v2);
  }
  long long v3 = (const void *)a1[7];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void radio::ARICommandDriver::getBasebandStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  long long v3 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(block) = 136315138;
    *(void *)((char *)&block + 4) = "getBasebandStatus";
    _os_log_debug_impl(&dword_235DB9000, v3, OS_LOG_TYPE_DEBUG, "#D %s: not supported!", (uint8_t *)&block, 0xCu);
  }
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  char v7 = 13;
  strcpy((char *)__p, "Not supported");
  CreateError();
  CFRetain((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
  if (*(void *)a2) {
    uint64_t v4 = _Block_copy(*(const void **)a2);
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(NSObject **)(a2 + 8);
  *(void *)&blocunint64_t k = MEMORY[0x263EF8330];
  *((void *)&block + 1) = 1174405120;
  uint64_t v10 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke_0;
  uint64_t v11 = &__block_descriptor_tmp_191;
  if (v4)
  {
    aBlocunint64_t k = _Block_copy(v4);
    CFTypeRef v13 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  }
  else
  {
    aBlocunint64_t k = 0;
    CFTypeRef v13 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  }
  CFRetain((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
  CFTypeRef v14 = 0;
  dispatch_async(v5, &block);
  if (v14) {
    CFRelease(v14);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v4) {
    _Block_release(v4);
  }
  CFRelease((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
  CFRelease(cf);
}

void sub_235E29618(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_235E29654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x235E29644);
}

void radio::ARICommandDriver::getBasebandFWVersion(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(a1 + 72);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 80);
  uint64_t v5 = (uint64_t *)(a1 + 72);
  if (!v4 || (uint64_t v8 = std::__shared_weak_count::lock(v4)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v9 = v8;
  p_shared_weak_owners = &v8->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  v13[0] = MEMORY[0x263EF8330];
  v13[1] = 1174405120;
  void v13[2] = ___ZN5radio16ARICommandDriver20getBasebandFWVersionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke;
  v13[3] = &__block_descriptor_tmp_15_2;
  v13[4] = a1;
  void v13[5] = v6;
  CFTypeRef v14 = v9;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v11 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v11 = _Block_copy(v11);
  }
  uint64_t v12 = *(NSObject **)(a2 + 8);
  aBlocunint64_t k = v11;
  dispatch_object_t object = v12;
  if (v12) {
    dispatch_retain(v12);
  }
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(v5, (uint64_t)v13);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  std::__shared_weak_count::__release_weak(v9);
}

uint64_t ___ZN5radio16ARICommandDriver20getBasebandFWVersionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  long long __p = (void *)0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  void v24[2] = v3;
  v24[3] = v3;
  v24[0] = v3;
  v24[1] = v3;
  AriSdk::ARI_CsiSysGetInfoReqV2_SDK::ARI_CsiSysGetInfoReqV2_SDK((AriSdk::ARI_CsiSysGetInfoReqV2_SDK *)v24);
  uint64_t v4 = operator new(4uLL);
  _DWORD *v4 = 4;
  uint64_t v5 = __p;
  long long __p = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = *(void *)(v2 + 312);
  uint64_t v8 = (std::__shared_weak_count_vtbl *)a1[5];
  char v7 = (std::__shared_weak_count *)a1[6];
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = (const void *)a1[7];
  if (v9)
  {
    uint64_t v10 = _Block_copy(v9);
    uint64_t v11 = a1[8];
    int v20 = v10;
    dispatch_object_t object = v11;
    if (!v11) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v10 = 0;
  uint64_t v11 = a1[8];
  int v20 = 0;
  dispatch_object_t object = v11;
  if (v11) {
LABEL_7:
  }
    dispatch_retain(v11);
LABEL_8:
  uint64_t v12 = (std::__shared_weak_count *)operator new(0x40uLL);
  v12->__shared_owners_ = 0;
  p_uint64_t shared_owners = &v12->__shared_owners_;
  v12->__shared_weak_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940098;
  v12[1].__vftable = v8;
  v12[1].__shared_owners_ = (uint64_t)v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v10)
  {
    v12[1].__shared_weak_owners_ = 0;
    v12[2].__vftable = (std::__shared_weak_count_vtbl *)v11;
    if (!v11) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  v12[1].__shared_weak_owners_ = (uint64_t)_Block_copy(v10);
  v12[2].__vftable = (std::__shared_weak_count_vtbl *)v11;
  if (v11) {
LABEL_12:
  }
    dispatch_retain(v11);
LABEL_13:
  v12[2].__shared_owners_ = v2;
  uint64_t v26 = MEMORY[0x263EF8330];
  uint64_t v27 = 1174405120;
  uint64_t v28 = ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver20getBasebandFWVersionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS8_IK14__CFDictionaryEEEEEEUb1_E3__2vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  int v29 = &__block_descriptor_tmp_192;
  uint64_t v30 = v12 + 1;
  long long v31 = v12;
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlock[0] = (const void *)MEMORY[0x263EF8330];
  aBlock[1] = (const void *)0x40000000;
  xpc_object_t aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
  aBlock[3] = &unk_264C7DF90;
  void aBlock[4] = &v26;
  CFTypeRef v14 = _Block_copy(aBlock);
  uint64_t v15 = v31;
  if (!v31 || atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_16:
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
LABEL_17:
  *(void *)&long long v16 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v22[0] = v16;
  v22[1] = v16;
  unint64_t v23 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v17 = *(std::__shared_weak_count **)(v6 + 16);
  uint64_t v26 = *(void *)(v6 + 8);
  if (!v17)
  {
    uint64_t v27 = 0;
LABEL_38:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v27 = (uint64_t)std::__shared_weak_count::lock(v17);
  if (!v27) {
    goto LABEL_38;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  uint64_t v18 = (std::__shared_weak_count *)v27;
  if (v27 && !atomic_fetch_add((atomic_ullong *volatile)(v27 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  aBlock[0] = v14;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0]) {
    _Block_release(aBlock[0]);
  }
  MEMORY[0x237DF50B0](v22);
  if (object) {
    dispatch_release(object);
  }
  if (v20) {
    _Block_release(v20);
  }
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  return MEMORY[0x237DF5820](v24);
}

void sub_235E29B54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  uint64_t v4 = *(const void **)(v2 - 120);
  if (v4) {
    _Block_release(v4);
  }
  MEMORY[0x237DF50B0]((uint64_t *)va1);
  _ZZZN5radio16ARICommandDriver20getBasebandFWVersionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEEEUb1_EN3__2D1Ev((uint64_t *)va);
  MEMORY[0x237DF5820](va2);
  _Unwind_Resume(a1);
}

void sub_235E29B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  if (v30) {
    _Block_release(v30);
  }
  _ZZZN5radio16ARICommandDriver20getBasebandFWVersionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEEEUb1_EN3__2D1Ev(&a10);
  MEMORY[0x237DF5820](&a21);
  _Unwind_Resume(a1);
}

void *_ZZZN5radio16ARICommandDriver20getBasebandFWVersionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEEEUb1_EN3__2D1Ev(void *a1)
{
  uint64_t v2 = a1[3];
  if (v2) {
    dispatch_release(v2);
  }
  long long v3 = (const void *)a1[2];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void radio::ARICommandDriver::getFactoryCalibrationStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  long long v3 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = "getFactoryCalibrationStatus";
    _os_log_impl(&dword_235DB9000, v3, OS_LOG_TYPE_DEFAULT, "#I %s: not supported!", (uint8_t *)&buf, 0xCu);
  }
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  char v7 = 13;
  strcpy((char *)__p, "Not supported");
  CreateError();
  CFRetain((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
  if (*(void *)a2) {
    uint64_t v4 = _Block_copy(*(const void **)a2);
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(NSObject **)(a2 + 8);
  *(void *)&long long buf = MEMORY[0x263EF8330];
  *((void *)&buf + 1) = 1174405120;
  uint64_t v10 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke_0;
  uint64_t v11 = &__block_descriptor_tmp_191;
  if (v4)
  {
    aBlocunint64_t k = _Block_copy(v4);
    CFTypeRef v13 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  }
  else
  {
    aBlocunint64_t k = 0;
    CFTypeRef v13 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  }
  CFRetain((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
  CFTypeRef v14 = 0;
  dispatch_async(v5, &buf);
  if (v14) {
    CFRelease(v14);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v4) {
    _Block_release(v4);
  }
  CFRelease((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
  CFRelease(cf);
}

void sub_235E29E3C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_235E29E78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x235E29E68);
}

void radio::ARICommandDriver::getRFCalibrationStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(a1 + 72);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 80);
  uint64_t v5 = (uint64_t *)(a1 + 72);
  if (!v4 || (uint64_t v8 = std::__shared_weak_count::lock(v4)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v9 = v8;
  p_shared_weak_owners = &v8->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  v13[0] = MEMORY[0x263EF8330];
  v13[1] = 1174405120;
  void v13[2] = ___ZN5radio16ARICommandDriver22getRFCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke;
  v13[3] = &__block_descriptor_tmp_18_1;
  v13[4] = a1;
  void v13[5] = v6;
  CFTypeRef v14 = v9;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v11 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v11 = _Block_copy(v11);
  }
  uint64_t v12 = *(NSObject **)(a2 + 8);
  aBlocunint64_t k = v11;
  dispatch_object_t object = v12;
  if (v12) {
    dispatch_retain(v12);
  }
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(v5, (uint64_t)v13);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  std::__shared_weak_count::__release_weak(v9);
}

uint64_t ___ZN5radio16ARICommandDriver22getRFCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  _OWORD v22[2] = v3;
  v22[3] = v3;
  v22[0] = v3;
  v22[1] = v3;
  AriSdk::ARI_CsiBspGetCalibrationStatusReq_SDK::ARI_CsiBspGetCalibrationStatusReq_SDK((AriSdk::ARI_CsiBspGetCalibrationStatusReq_SDK *)v22);
  uint64_t v4 = *(void *)(v2 + 312);
  uint64_t v6 = (std::__shared_weak_count_vtbl *)a1[5];
  uint64_t v5 = (std::__shared_weak_count *)a1[6];
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  char v7 = (const void *)a1[7];
  if (v7)
  {
    uint64_t v8 = _Block_copy(v7);
    uint64_t v9 = a1[8];
    uint64_t v18 = v8;
    dispatch_object_t object = v9;
    if (!v9) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v8 = 0;
  uint64_t v9 = a1[8];
  uint64_t v18 = 0;
  dispatch_object_t object = v9;
  if (v9) {
LABEL_5:
  }
    dispatch_retain(v9);
LABEL_6:
  uint64_t v10 = (std::__shared_weak_count *)operator new(0x38uLL);
  v10->__shared_owners_ = 0;
  p_uint64_t shared_owners = &v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940118;
  v10[1].__vftable = v6;
  v10[1].__shared_owners_ = (uint64_t)v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v8)
  {
    v10[1].__shared_weak_owners_ = 0;
    v10[2].__vftable = (std::__shared_weak_count_vtbl *)v9;
    if (!v9) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  v10[1].__shared_weak_owners_ = (uint64_t)_Block_copy(v8);
  v10[2].__vftable = (std::__shared_weak_count_vtbl *)v9;
  if (v9) {
LABEL_10:
  }
    dispatch_retain(v9);
LABEL_11:
  uint64_t v23 = MEMORY[0x263EF8330];
  uint64_t v24 = 1174405120;
  int v25 = ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver22getRFCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS8_IK14__CFDictionaryEEEEEEUb2_E3__3vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  uint64_t v26 = &__block_descriptor_tmp_195;
  uint64_t v27 = v10 + 1;
  uint64_t v28 = v10;
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlock[0] = (const void *)MEMORY[0x263EF8330];
  aBlock[1] = (const void *)0x40000000;
  xpc_object_t aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
  aBlock[3] = &unk_264C7DF90;
  void aBlock[4] = &v23;
  uint64_t v12 = _Block_copy(aBlock);
  CFTypeRef v13 = v28;
  if (!v28 || atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_14:
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
LABEL_15:
  *(void *)&long long v14 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v20[0] = v14;
  v20[1] = v14;
  unint64_t v21 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v15 = *(std::__shared_weak_count **)(v4 + 16);
  uint64_t v23 = *(void *)(v4 + 8);
  if (!v15)
  {
    uint64_t v24 = 0;
LABEL_36:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v24 = (uint64_t)std::__shared_weak_count::lock(v15);
  if (!v24) {
    goto LABEL_36;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  uint64_t v16 = (std::__shared_weak_count *)v24;
  if (v24 && !atomic_fetch_add((atomic_ullong *volatile)(v24 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  aBlock[0] = v12;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0]) {
    _Block_release(aBlock[0]);
  }
  MEMORY[0x237DF50B0](v20);
  if (object) {
    dispatch_release(object);
  }
  if (v18) {
    _Block_release(v18);
  }
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  return MEMORY[0x237DF6880](v22);
}

void sub_235E2A344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  unint64_t v21 = *(const void **)(v19 - 120);
  if (v21) {
    _Block_release(v21);
  }
  MEMORY[0x237DF50B0](&a13);
  _ZZZN5radio16ARICommandDriver22getRFCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEEEUb2_EN3__3D1Ev(&a9);
  MEMORY[0x237DF6880](&a19);
  _Unwind_Resume(a1);
}

void sub_235E2A378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  if (v28) {
    _Block_release(v28);
  }
  _ZZZN5radio16ARICommandDriver22getRFCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEEEUb2_EN3__3D1Ev(&a9);
  MEMORY[0x237DF6880](&a19);
  _Unwind_Resume(a1);
}

void *_ZZZN5radio16ARICommandDriver22getRFCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEEEUb2_EN3__3D1Ev(void *a1)
{
  uint64_t v2 = a1[3];
  if (v2) {
    dispatch_release(v2);
  }
  long long v3 = (const void *)a1[2];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void radio::ARICommandDriver::getWakeReason(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(a1 + 72);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 80);
  uint64_t v5 = (uint64_t *)(a1 + 72);
  if (!v4 || (uint64_t v8 = std::__shared_weak_count::lock(v4)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v9 = v8;
  p_shared_weak_owners = &v8->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  v13[0] = MEMORY[0x263EF8330];
  v13[1] = 1174405120;
  void v13[2] = ___ZN5radio16ARICommandDriver13getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke;
  v13[3] = &__block_descriptor_tmp_21_0;
  v13[4] = a1;
  void v13[5] = v6;
  long long v14 = v9;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v11 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v11 = _Block_copy(v11);
  }
  uint64_t v12 = *(NSObject **)(a2 + 8);
  aBlocunint64_t k = v11;
  dispatch_object_t object = v12;
  if (v12) {
    dispatch_retain(v12);
  }
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(v5, (uint64_t)v13);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  std::__shared_weak_count::__release_weak(v9);
}

uint64_t ___ZN5radio16ARICommandDriver13getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  long long v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_235DB9000, v3, OS_LOG_TYPE_DEFAULT, "#I Getting Baseband wake reason", buf, 2u);
  }
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v25 = v4;
  long long v26 = v4;
  *(_OWORD *)long long buf = v4;
  long long v24 = v4;
  AriSdk::ARI_CsiIceWakeupReasonReq_SDK::ARI_CsiIceWakeupReasonReq_SDK((AriSdk::ARI_CsiIceWakeupReasonReq_SDK *)buf);
  uint64_t v5 = *(void *)(v2 + 312);
  char v7 = (std::__shared_weak_count_vtbl *)a1[5];
  uint64_t v6 = (std::__shared_weak_count *)a1[6];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (const void *)a1[7];
  if (v8)
  {
    uint64_t v9 = _Block_copy(v8);
    uint64_t v10 = a1[8];
    uint64_t v19 = v9;
    dispatch_object_t object = v10;
    if (!v10) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v9 = 0;
  uint64_t v10 = a1[8];
  uint64_t v19 = 0;
  dispatch_object_t object = v10;
  if (v10) {
LABEL_7:
  }
    dispatch_retain(v10);
LABEL_8:
  uint64_t v11 = (std::__shared_weak_count *)operator new(0x38uLL);
  v11->__shared_owners_ = 0;
  p_uint64_t shared_owners = &v11->__shared_owners_;
  v11->__shared_weak_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940198;
  v11[1].__vftable = v7;
  v11[1].__shared_owners_ = (uint64_t)v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v9)
  {
    v11[1].__shared_weak_owners_ = 0;
    v11[2].__vftable = (std::__shared_weak_count_vtbl *)v10;
    if (!v10) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  v11[1].__shared_weak_owners_ = (uint64_t)_Block_copy(v9);
  v11[2].__vftable = (std::__shared_weak_count_vtbl *)v10;
  if (v10) {
LABEL_12:
  }
    dispatch_retain(v10);
LABEL_13:
  uint64_t v27 = MEMORY[0x263EF8330];
  uint64_t v28 = 1174405120;
  int v29 = ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver13getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS8_IK14__CFDictionaryEEEEEEUb3_E3__4vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  uint64_t v30 = &__block_descriptor_tmp_200;
  long long v31 = v11 + 1;
  long long v32 = v11;
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlock[0] = (const void *)MEMORY[0x263EF8330];
  aBlock[1] = (const void *)0x40000000;
  xpc_object_t aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
  aBlock[3] = &unk_264C7DF90;
  void aBlock[4] = &v27;
  CFTypeRef v13 = _Block_copy(aBlock);
  long long v14 = v32;
  if (!v32 || atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_16:
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_17:
  *(void *)&long long v15 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v21[0] = v15;
  v21[1] = v15;
  unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v16 = *(std::__shared_weak_count **)(v5 + 16);
  uint64_t v27 = *(void *)(v5 + 8);
  if (!v16)
  {
    uint64_t v28 = 0;
LABEL_38:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v28 = (uint64_t)std::__shared_weak_count::lock(v16);
  if (!v28) {
    goto LABEL_38;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  uint64_t v17 = (std::__shared_weak_count *)v28;
  if (v28 && !atomic_fetch_add((atomic_ullong *volatile)(v28 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  aBlock[0] = v13;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0]) {
    _Block_release(aBlock[0]);
  }
  MEMORY[0x237DF50B0](v21);
  if (object) {
    dispatch_release(object);
  }
  if (v19) {
    _Block_release(v19);
  }
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  return MEMORY[0x237DF5D50](buf);
}

void sub_235E2A90C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  unint64_t v21 = *(const void **)(v19 - 120);
  if (v21) {
    _Block_release(v21);
  }
  MEMORY[0x237DF50B0](&a13);
  _ZZZN5radio16ARICommandDriver13getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEEEUb3_EN3__4D1Ev(&a9);
  MEMORY[0x237DF5D50](&a19);
  _Unwind_Resume(a1);
}

void sub_235E2A940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  if (v28) {
    _Block_release(v28);
  }
  _ZZZN5radio16ARICommandDriver13getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEEEUb3_EN3__4D1Ev(&a9);
  MEMORY[0x237DF5D50](&a19);
  _Unwind_Resume(a1);
}

void *_ZZZN5radio16ARICommandDriver13getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEEEUb3_EN3__4D1Ev(void *a1)
{
  uint64_t v2 = a1[3];
  if (v2) {
    dispatch_release(v2);
  }
  long long v3 = (const void *)a1[2];
  if (v3) {
    _Block_release(v3);
  }
  long long v4 = (std::__shared_weak_count *)a1[1];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void radio::ARICommandDriver::setOperatingMode(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a1 + 72);
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 80);
  char v7 = (uint64_t *)(a1 + 72);
  if (!v6 || (uint64_t v12 = std::__shared_weak_count::lock(v6)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  CFTypeRef v13 = v12;
  atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v13);
  }
  v16[0] = MEMORY[0x263EF8330];
  v16[1] = 1174405120;
  v16[2] = ___ZN5radio16ARICommandDriver16setOperatingModeEyNS_13OperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke;
  v16[3] = &__block_descriptor_tmp_23_3;
  _OWORD v16[4] = a1;
  char v22 = a3;
  long long v14 = *(void **)a4;
  if (*(void *)a4) {
    long long v14 = _Block_copy(v14);
  }
  long long v15 = *(NSObject **)(a4 + 8);
  aBlocunint64_t k = v14;
  dispatch_object_t object = v15;
  if (v15) {
    dispatch_retain(v15);
  }
  uint64_t v19 = a2;
  uint64_t v20 = v8;
  unint64_t v21 = v13;
  atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(v7, (uint64_t)v16);
  if (v21) {
    std::__shared_weak_count::__release_weak(v21);
  }
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  std::__shared_weak_count::__release_weak(v13);
}

void ___ZN5radio16ARICommandDriver16setOperatingModeEyNS_13OperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke(uint64_t a1)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  if (*(unsigned __int8 *)(a1 + 80) >= 8u)
  {
    strcpy((char *)v38, "Invalid operating mode");
    HIBYTE(v38[2]) = 22;
    CreateError();
    uint64_t v2 = *(const void **)(a1 + 40);
    if (v2) {
      long long v3 = _Block_copy(v2);
    }
    else {
      long long v3 = 0;
    }
    long long v26 = *(NSObject **)(a1 + 48);
    *(void *)&blocunint64_t k = MEMORY[0x263EF8330];
    *((void *)&block + 1) = 1174405120;
    *(void *)&long long v34 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
    *((void *)&v34 + 1) = &__block_descriptor_tmp_181;
    if (v3)
    {
      uint64_t v27 = _Block_copy(v3);
      CFTypeRef v28 = cf;
      v35[0] = v27;
      v35[1] = cf;
      if (!cf) {
        goto LABEL_49;
      }
    }
    else
    {
      CFTypeRef v28 = cf;
      v35[0] = 0;
      v35[1] = cf;
      if (!cf)
      {
LABEL_49:
        dispatch_async(v26, &block);
        if (v35[1]) {
          CFRelease(v35[1]);
        }
        if (v35[0]) {
          _Block_release(v35[0]);
        }
        if (v3) {
          _Block_release(v3);
        }
        if (cf) {
          CFRelease(cf);
        }
        if (SHIBYTE(v38[2]) < 0) {
          operator delete(v38[0]);
        }
        return;
      }
    }
    CFRetain(v28);
    goto LABEL_49;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  long long __p = (void *)0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)int v35 = v5;
  long long v36 = v5;
  blocunint64_t k = v5;
  long long v34 = v5;
  AriSdk::ARI_CsiModeSetReq_SDK::ARI_CsiModeSetReq_SDK((AriSdk::ARI_CsiModeSetReq_SDK *)&block);
  int v6 = radio::OpMode::convertMode();
  char v7 = operator new(4uLL);
  _DWORD *v7 = v6;
  uint64_t v8 = __p;
  long long __p = v7;
  if (v8) {
    operator delete(v8);
  }
  unint64_t v9 = *(void *)(a1 + 56);
  if (v9 >= 0xDF8475800) {
    unint64_t v10 = v9 / 0xF4240;
  }
  else {
    unint64_t v10 = 60000;
  }
  HIDWORD(v34) = v10;
  uint64_t v11 = *(NSObject **)(v4 + 40);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    radio::OpMode::modeToString();
    uint64_t v12 = SHIBYTE(v42) >= 0 ? (void **)&v40 : v40;
    *(_DWORD *)long long buf = 136446466;
    *(void *)&uint8_t buf[4] = v12;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v10;
    _os_log_impl(&dword_235DB9000, v11, OS_LOG_TYPE_DEFAULT, "#I Requesting operating mode change to %{public}s, with timeout %llu ms", buf, 0x16u);
    if (SHIBYTE(v42) < 0) {
      operator delete(v40);
    }
  }
  uint64_t v13 = *(void *)(v4 + 312);
  long long v15 = *(std::__shared_weak_count_vtbl **)(a1 + 64);
  long long v14 = *(std::__shared_weak_count **)(a1 + 72);
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = *(const void **)(a1 + 40);
  if (v16)
  {
    uint64_t v17 = _Block_copy(v16);
    uint64_t v18 = *(NSObject **)(a1 + 48);
    aBlocunint64_t k = v17;
    dispatch_object_t object = v18;
    if (!v18) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  uint64_t v17 = 0;
  uint64_t v18 = *(NSObject **)(a1 + 48);
  aBlocunint64_t k = 0;
  dispatch_object_t object = v18;
  if (v18) {
LABEL_19:
  }
    dispatch_retain(v18);
LABEL_20:
  uint64_t v19 = (std::__shared_weak_count *)operator new(0x38uLL);
  v19->__shared_owners_ = 0;
  p_uint64_t shared_owners = &v19->__shared_owners_;
  v19->__shared_weak_owners_ = 0;
  v19->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940218;
  v19[1].__vftable = v15;
  v19[1].__shared_owners_ = (uint64_t)v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v17)
  {
    v19[1].__shared_weak_owners_ = 0;
    v19[2].__vftable = (std::__shared_weak_count_vtbl *)v18;
    if (!v18) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  v19[1].__shared_weak_owners_ = (uint64_t)_Block_copy(v17);
  v19[2].__vftable = (std::__shared_weak_count_vtbl *)v18;
  if (v18) {
LABEL_24:
  }
    dispatch_retain(v18);
LABEL_25:
  uint64_t v40 = (void **)MEMORY[0x263EF8330];
  uint64_t v41 = 1174405120;
  uint64_t v42 = ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver16setOperatingModeEyNS2_13OperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb4_E3__5vEENS5_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  uint64_t v43 = &__block_descriptor_tmp_205;
  uint64_t v44 = v19 + 1;
  int v45 = v19;
  atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  *(void *)long long buf = MEMORY[0x263EF8330];
  *(void *)&uint8_t buf[8] = 0x40000000;
  *(void *)&uint8_t buf[16] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
  uint64_t v47 = &unk_264C7DF90;
  int v48 = &v40;
  unint64_t v21 = _Block_copy(buf);
  char v22 = v45;
  if (!v45 || atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
  std::__shared_weak_count::__release_weak(v22);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_28:
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
LABEL_29:
  *(void *)&long long v23 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v23 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v31[0] = v23;
  v31[1] = v23;
  unint64_t v32 = 0xAAAAAAAAAAAAAAAALL;
  long long v24 = *(std::__shared_weak_count **)(v13 + 16);
  uint64_t v40 = *(void ***)(v13 + 8);
  if (!v24)
  {
    uint64_t v41 = 0;
LABEL_67:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v41 = (uint64_t)std::__shared_weak_count::lock(v24);
  if (!v41) {
    goto LABEL_67;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  long long v25 = (std::__shared_weak_count *)v41;
  if (v41 && !atomic_fetch_add((atomic_ullong *volatile)(v41 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  *(void *)long long buf = v21;
  ice::SendMsgBaseProxy::callback();
  if (*(void *)buf) {
    _Block_release(*(const void **)buf);
  }
  MEMORY[0x237DF50B0](v31);
  if (object) {
    dispatch_release(object);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  MEMORY[0x237DF52D0](&block);
}

void *_ZZZN5radio16ARICommandDriver16setOperatingModeEyNS_13OperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEEUb4_EN3__5D1Ev(void *a1)
{
  uint64_t v2 = a1[3];
  if (v2) {
    dispatch_release(v2);
  }
  long long v3 = (const void *)a1[2];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void __copy_helper_block_e8_40c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE64c46_ZTSNSt3__18weak_ptrIN5radio13CommandDriverEEE(void *a1, void *a2)
{
  uint64_t v4 = (void *)a2[5];
  if (v4) {
    uint64_t v4 = _Block_copy(v4);
  }
  long long v5 = a2[6];
  a1[5] = v4;
  a1[6] = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  uint64_t v6 = a2[9];
  a1[8] = a2[8];
  a1[9] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 16), 1uLL, memory_order_relaxed);
  }
}

void __destroy_helper_block_e8_40c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE64c46_ZTSNSt3__18weak_ptrIN5radio13CommandDriverEEE(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[9];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  long long v3 = a1[6];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (const void *)a1[5];
  if (v4) {
    _Block_release(v4);
  }
}

void radio::ARICommandDriver::forceOperatingMode(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  if (*(void *)a4)
  {
    uint64_t v8 = _Block_copy(*(const void **)a4);
    unint64_t v9 = *(NSObject **)(a4 + 8);
    unint64_t v10 = v8;
    uint64_t v11 = v9;
    if (!v9) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v8 = 0;
  unint64_t v9 = *(NSObject **)(a4 + 8);
  unint64_t v10 = 0;
  uint64_t v11 = v9;
  if (v9) {
LABEL_3:
  }
    dispatch_retain(v9);
LABEL_4:
  radio::ARICommandDriver::setOperatingMode(a1, a2, a3, (uint64_t)&v10);
  if (v9) {
    dispatch_release(v9);
  }
  if (v8) {
    _Block_release(v8);
  }
}

void sub_235E2B380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t ___ZN5radio16ARICommandDriver16getOperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  _OWORD v23[2] = v3;
  v23[3] = v3;
  v23[0] = v3;
  v23[1] = v3;
  AriSdk::ARI_CsiModeGetReq_SDK::ARI_CsiModeGetReq_SDK((AriSdk::ARI_CsiModeGetReq_SDK *)v23);
  uint64_t v4 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_235DB9000, v4, OS_LOG_TYPE_DEFAULT, "#I Getting operating mode", buf, 2u);
  }
  uint64_t v5 = *(void *)(v2 + 312);
  char v7 = (std::__shared_weak_count_vtbl *)a1[5];
  uint64_t v6 = (std::__shared_weak_count *)a1[6];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (const void *)a1[7];
  if (v8)
  {
    unint64_t v9 = _Block_copy(v8);
    unint64_t v10 = a1[8];
    uint64_t v19 = v9;
    dispatch_object_t object = v10;
    if (!v10) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  unint64_t v9 = 0;
  unint64_t v10 = a1[8];
  uint64_t v19 = 0;
  dispatch_object_t object = v10;
  if (v10) {
LABEL_7:
  }
    dispatch_retain(v10);
LABEL_8:
  uint64_t v11 = (std::__shared_weak_count *)operator new(0x40uLL);
  v11->__shared_owners_ = 0;
  p_uint64_t shared_owners = &v11->__shared_owners_;
  v11->__shared_weak_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940298;
  v11[1].__vftable = v7;
  v11[1].__shared_owners_ = (uint64_t)v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v9)
  {
    v11[1].__shared_weak_owners_ = 0;
    v11[2].__vftable = (std::__shared_weak_count_vtbl *)v10;
    if (!v10) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  v11[1].__shared_weak_owners_ = (uint64_t)_Block_copy(v9);
  v11[2].__vftable = (std::__shared_weak_count_vtbl *)v10;
  if (v10) {
LABEL_12:
  }
    dispatch_retain(v10);
LABEL_13:
  v11[2].__shared_owners_ = v2;
  *(void *)long long buf = MEMORY[0x263EF8330];
  uint64_t v25 = 1174405120;
  long long v26 = ___ZN3ice6detail12wrapCallbackIZZN5radio16ARICommandDriver16getOperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS8_IK14__CFDictionaryEEEEEEUb5_E3__6vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  uint64_t v27 = &__block_descriptor_tmp_208;
  CFTypeRef v28 = v11 + 1;
  int v29 = v11;
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlock[0] = (const void *)MEMORY[0x263EF8330];
  aBlock[1] = (const void *)0x40000000;
  xpc_object_t aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
  aBlock[3] = &unk_264C7DF90;
  void aBlock[4] = buf;
  uint64_t v13 = _Block_copy(aBlock);
  long long v14 = v29;
  if (!v29 || atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_16:
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_17:
  *(void *)&long long v15 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v21[0] = v15;
  v21[1] = v15;
  unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v16 = *(std::__shared_weak_count **)(v5 + 16);
  *(void *)long long buf = *(void *)(v5 + 8);
  if (!v16)
  {
    uint64_t v25 = 0;
LABEL_38:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v25 = (uint64_t)std::__shared_weak_count::lock(v16);
  if (!v25) {
    goto LABEL_38;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  uint64_t v17 = (std::__shared_weak_count *)v25;
  if (v25 && !atomic_fetch_add((atomic_ullong *volatile)(v25 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  aBlock[0] = v13;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0]) {
    _Block_release(aBlock[0]);
  }
  MEMORY[0x237DF50B0](v21);
  if (object) {
    dispatch_release(object);
  }
  if (v19) {
    _Block_release(v19);
  }
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  return MEMORY[0x237DF52B0](v23);
}

void sub_235E2B730(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  uint64_t v4 = *(const void **)(v2 - 120);
  if (v4) {
    _Block_release(v4);
  }
  MEMORY[0x237DF50B0]((uint64_t *)va1);
  _ZZZN5radio16ARICommandDriver16getOperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEEEUb5_EN3__6D1Ev((uint64_t *)va);
  MEMORY[0x237DF52B0](va2);
  _Unwind_Resume(a1);
}

void sub_235E2B764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  if (v29) {
    _Block_release(v29);
  }
  _ZZZN5radio16ARICommandDriver16getOperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEEEUb5_EN3__6D1Ev(&a10);
  MEMORY[0x237DF52B0](&a21);
  _Unwind_Resume(a1);
}

void *_ZZZN5radio16ARICommandDriver16getOperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEEEUb5_EN3__6D1Ev(void *a1)
{
  uint64_t v2 = a1[3];
  if (v2) {
    dispatch_release(v2);
  }
  long long v3 = (const void *)a1[2];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void radio::ARICommandDriver::getResetProperties(uint64_t a1, uint64_t a2)
{
  long long v3 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(block[0]) = 0;
    _os_log_debug_impl(&dword_235DB9000, v3, OS_LOG_TYPE_DEBUG, "#D not supported!", (uint8_t *)block, 2u);
  }
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  char v7 = 13;
  strcpy((char *)__p, "Not supported");
  CreateError();
  CFRetain((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
  if (*(void *)a2) {
    uint64_t v4 = _Block_copy(*(const void **)a2);
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(NSObject **)(a2 + 8);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke_0;
  block[3] = &__block_descriptor_tmp_191;
  if (v4)
  {
    aBlocunint64_t k = _Block_copy(v4);
    CFTypeRef v11 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  }
  else
  {
    aBlocunint64_t k = 0;
    CFTypeRef v11 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  }
  CFRetain((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
  CFTypeRef v12 = 0;
  dispatch_async(v5, block);
  if (v12) {
    CFRelease(v12);
  }
  if (v11) {
    CFRelease(v11);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v4) {
    _Block_release(v4);
  }
  CFRelease((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
  CFRelease(cf);
}

void sub_235E2B9F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void radio::ARICommandDriver::sendBatteryInfoUpdate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(block[0]) = 0;
    _os_log_debug_impl(&dword_235DB9000, v5, OS_LOG_TYPE_DEBUG, "#D not supported!", (uint8_t *)block, 2u);
  }
  CFTypeRef cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  char v9 = 13;
  strcpy((char *)__p, "Not supported");
  CreateError();
  CFRetain((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
  if (*(void *)a4) {
    uint64_t v6 = _Block_copy(*(const void **)a4);
  }
  else {
    uint64_t v6 = 0;
  }
  char v7 = *(NSObject **)(a4 + 8);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
  block[3] = &__block_descriptor_tmp_181;
  if (v6)
  {
    aBlocunint64_t k = _Block_copy(v6);
    CFTypeRef v13 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  }
  else
  {
    aBlocunint64_t k = 0;
    CFTypeRef v13 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  }
  CFRetain((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
  dispatch_async(v7, block);
  if (v13) {
    CFRelease(v13);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v6) {
    _Block_release(v6);
  }
  CFRelease((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
  CFRelease(cf);
}

void sub_235E2BBDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void radio::ARICommandDriver::getRxDiversityStateWithRAT_sync(std::__shared_weak_count_vtbl *a1, int a2, uint64_t a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[2].~__shared_weak_count;
  if (!v4
    || (on_zero_shared_weaunint64_t k = (std::__shared_weak_count_vtbl *)a1[1].__on_zero_shared_weak,
        (uint64_t v8 = std::__shared_weak_count::lock(v4)) == 0))
  {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  char v9 = v8;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  long long __p = (void *)0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  _OWORD v25[2] = v10;
  v25[3] = v10;
  v25[0] = v10;
  v25[1] = v10;
  AriSdk::ARI_CsiIceGetRxDiversityReq_SDK::ARI_CsiIceGetRxDiversityReq_SDK((AriSdk::ARI_CsiIceGetRxDiversityReq_SDK *)v25);
  CFTypeRef v11 = operator new(4uLL);
  *CFTypeRef v11 = a2;
  CFTypeRef v12 = __p;
  long long __p = v11;
  if (v12) {
    operator delete(v12);
  }
  CFTypeRef v13 = a1[7].__on_zero_shared_weak;
  if (!*(void *)a3)
  {
    uint64_t v14 = 0;
    uint64_t v15 = *(NSObject **)(a3 + 8);
    if (!v15) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  uint64_t v14 = _Block_copy(*(const void **)a3);
  uint64_t v15 = *(NSObject **)(a3 + 8);
  if (v15) {
LABEL_9:
  }
    dispatch_retain(v15);
LABEL_10:
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v16 = (std::__shared_weak_count *)operator new(0x48uLL);
  *(_OWORD *)&v16->__shared_owners_ = 0u;
  p_uint64_t shared_owners = &v16->__shared_owners_;
  v16->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940318;
  v16[1].__vftable = a1;
  v16[1].__shared_owners_ = (uint64_t)v14;
  v16[1].__shared_weak_owners_ = (uint64_t)v15;
  v16[2].__vftable = on_zero_shared_weak;
  v16[2].__shared_owners_ = (uint64_t)v9;
  LODWORD(v16[2].__shared_weak_owners_) = a2;
  uint64_t v27 = MEMORY[0x263EF8330];
  uint64_t v28 = 1174405120;
  int v29 = ___ZN3ice6detail12wrapCallbackIZN5radio16ARICommandDriver31getRxDiversityStateWithRAT_syncENS3_14RFRatSelectionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS9_IK14__CFDictionaryEEEEEE3__0vEENS5_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  uint64_t v30 = &__block_descriptor_tmp_211;
  long long v31 = v16 + 1;
  unint64_t v32 = v16;
  atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlock[0] = (const void *)MEMORY[0x263EF8330];
  aBlock[1] = (const void *)0x40000000;
  xpc_object_t aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
  aBlock[3] = &unk_264C7DF90;
  void aBlock[4] = &v27;
  uint64_t v18 = _Block_copy(aBlock);
  uint64_t v19 = v32;
  if (!v32 || atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
  std::__shared_weak_count::__release_weak(v19);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_13:
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
LABEL_14:
  *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v23[0] = v20;
  v23[1] = v20;
  unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v21 = (std::__shared_weak_count *)*((void *)v13 + 2);
  uint64_t v27 = *((void *)v13 + 1);
  if (!v21)
  {
    uint64_t v28 = 0;
LABEL_28:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v28 = (uint64_t)std::__shared_weak_count::lock(v21);
  if (!v28) {
    goto LABEL_28;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  unint64_t v22 = (std::__shared_weak_count *)v28;
  if (v28 && !atomic_fetch_add((atomic_ullong *volatile)(v28 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  aBlock[0] = v18;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0]) {
    _Block_release(aBlock[0]);
  }
  MEMORY[0x237DF50B0](v23);
  MEMORY[0x237DF60B0](v25);
  std::__shared_weak_count::__release_weak(v9);
}

void sub_235E2BFBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  unint64_t v24 = *(const void **)(v22 - 120);
  if (v24) {
    _Block_release(v24);
  }
  MEMORY[0x237DF50B0](&a15);
  radio::ARICommandDriver::getRxDiversityStateWithRAT_sync(radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0::~$_0(&a9);
  MEMORY[0x237DF60B0](&a21);
  std::__shared_weak_count::__release_weak(v21);
  _Unwind_Resume(a1);
}

void *radio::ARICommandDriver::getRxDiversityStateWithRAT_sync(radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0::~$_0(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  long long v3 = a1[2];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (const void *)a1[1];
  if (v4) {
    _Block_release(v4);
  }
  return a1;
}

void radio::ARICommandDriver::getRxDiversityState_sync(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = dispatch_group_create();
  uint64_t v5 = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v5);
  }
  v19[0] = 0;
  v19[1] = v19;
  _OWORD v19[2] = 0x3802000000;
  v19[3] = __Block_byref_object_copy__0;
  _OWORD v19[4] = __Block_byref_object_dispose__0;
  long long v20 = (const void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v21 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  uint64_t v6 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v6 = _Block_copy(v6);
  }
  char v7 = *(NSObject **)(a2 + 8);
  long long v20 = v6;
  dispatch_object_t v21 = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1174405120;
  xpc_object_t aBlock[2] = ___ZN5radio16ARICommandDriver24getRxDiversityState_syncEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke;
  aBlock[3] = &unk_26E93F638;
  dispatch_group_t group = v5;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(group);
  }
  void aBlock[4] = v19;
  uint64_t v8 = _Block_copy(aBlock);
  char v9 = *(NSObject **)(a1 + 88);
  if (v9) {
    dispatch_retain(*(dispatch_object_t *)(a1 + 88));
  }
  unint64_t v17 = (unint64_t)v8;
  unint64_t v18 = (unint64_t)v9;
  if (v8)
  {
    long long v10 = _Block_copy(v8);
    CFTypeRef v13 = v10;
    uint64_t v14 = v9;
    if (!v9) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  long long v10 = 0;
  CFTypeRef v13 = 0;
  uint64_t v14 = v9;
  if (v9) {
LABEL_13:
  }
    dispatch_retain(v9);
LABEL_14:
  radio::ARICommandDriver::getRxDiversityStateWithRAT_sync((std::__shared_weak_count_vtbl *)a1, 1, (uint64_t)&v13);
  if (v9) {
    dispatch_release(v9);
  }
  if (v10) {
    _Block_release(v10);
  }
  CFTypeRef v11 = *(NSObject **)(a1 + 88);
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 0x40000000;
  void v12[2] = ___ZN5radio16ARICommandDriver24getRxDiversityState_syncEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_29;
  v12[3] = &unk_264C7DE78;
  _OWORD v12[4] = v19;
  dispatch_group_notify(v5, v11, v12);
  if (v9) {
    dispatch_release(v9);
  }
  if (v8) {
    _Block_release(v8);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  _Block_object_dispose(v19, 8);
  if (v21) {
    dispatch_release(v21);
  }
  if (v20) {
    _Block_release(v20);
  }
  if (v5)
  {
    dispatch_group_leave(v5);
    dispatch_release(v5);
    dispatch_release(v5);
  }
}

void sub_235E2C334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,dispatch_group_t group,char a22)
{
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback((uint64_t)&a14);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback((uint64_t)&a22);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  _Block_object_dispose((const void *)(v24 - 104), 8);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v23);
  if (v22)
  {
    dispatch_group_leave(v22);
    dispatch_release(v22);
    dispatch_release(v22);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__0(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 48);
  if (v2) {
    dispatch_release(v2);
  }
  long long v3 = *(const void **)(a1 + 40);
  if (v3) {
    _Block_release(v3);
  }
}

void ___ZN5radio16ARICommandDriver24getRxDiversityState_syncEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke(uint64_t a1, CFTypeRef *a2, const void **a3)
{
  CFTypeRef v3 = *a2;
  if (*a2) {
    uint64_t v4 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v4 = 0;
  }
  if (!v4) {
    return;
  }
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
  if (!*(void *)(v6 + 40) || !*(void *)(v6 + 48)) {
    return;
  }
  if (v3) {
    CFRetain(*a2);
  }
  uint64_t v8 = *a3;
  if (v8) {
    CFRetain(v8);
  }
  char v9 = *(const void **)(v6 + 40);
  if (v9) {
    long long v10 = _Block_copy(v9);
  }
  else {
    long long v10 = 0;
  }
  CFTypeRef v11 = *(NSObject **)(v6 + 48);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke_0;
  block[3] = &__block_descriptor_tmp_191;
  if (v10)
  {
    aBlocunint64_t k = _Block_copy(v10);
    CFTypeRef v17 = v3;
    if (!v3) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  aBlocunint64_t k = 0;
  CFTypeRef v17 = v3;
  if (v3) {
LABEL_18:
  }
    CFRetain(v3);
LABEL_19:
  CFTypeRef cf = v8;
  if (v8) {
    CFRetain(v8);
  }
  dispatch_async(v11, block);
  if (cf) {
    CFRelease(cf);
  }
  if (v17) {
    CFRelease(v17);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v10) {
    _Block_release(v10);
  }
  if (v8) {
    CFRelease(v8);
  }
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v12 = *(void *)(*(void *)(a1 + 32) + 8);
  CFTypeRef v13 = *(const void **)(v12 + 40);
  *(void *)(v12 + 40) = 0;
  if (v13) {
    _Block_release(v13);
  }
  uint64_t v14 = *(NSObject **)(v12 + 48);
  *(void *)(v12 + 48) = 0;
  if (v14) {
    dispatch_release(v14);
  }
}

void ___ZN5radio16ARICommandDriver24getRxDiversityState_syncEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_29(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v2 = *(const void **)(v1 + 40);
  if (v2 && *(void *)(v1 + 48))
  {
    CFTypeRef v3 = _Block_copy(v2);
    uint64_t v4 = v3;
    uint64_t v5 = *(NSObject **)(v1 + 48);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke_0;
    block[3] = &__block_descriptor_tmp_191;
    if (v3) {
      uint64_t v6 = _Block_copy(v3);
    }
    else {
      uint64_t v6 = 0;
    }
    CFTypeRef v9 = 0;
    CFTypeRef cf = 0;
    aBlocunint64_t k = v6;
    dispatch_async(v5, block);
    if (cf) {
      CFRelease(cf);
    }
    if (v9) {
      CFRelease(v9);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v4) {
      _Block_release(v4);
    }
  }
}

void radio::ARICommandDriver::getAntennaTxPort(void *a1, uint64_t a2, CFTypeRef *a3)
{
  if (*(void *)a2)
  {
    uint64_t v6 = _Block_copy(*(const void **)a2);
    char v7 = *(NSObject **)(a2 + 8);
    if (!v7) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v6 = 0;
  char v7 = *(NSObject **)(a2 + 8);
  if (v7) {
LABEL_3:
  }
    dispatch_retain(v7);
LABEL_4:
  CFTypeRef v8 = *a3;
  if (*a3) {
    CFRetain(*a3);
  }
  CFTypeRef v9 = (std::__shared_weak_count *)a1[10];
  if (!v9 || (uint64_t v10 = a1[9], (v11 = std::__shared_weak_count::lock(v9)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v12 = v11;
  CFTypeRef v13 = operator new(0x20uLL);
  *CFTypeRef v13 = a1;
  v13[1] = v6;
  void v13[2] = v7;
  v13[3] = v8;
  uint64_t v14 = a1[11];
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v15 = operator new(0x18uLL);
  *uint64_t v15 = v13;
  v15[1] = v10;
  void v15[2] = v12;
  dispatch_async_f(v14, v15, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::ARICommandDriver::getAntennaTxPort(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0>(radio::ARICommandDriver::getAntennaTxPort(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::ARICommandDriver::getAntennaTxPort(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0,dispatch_queue_s *::default_delete<radio::ARICommandDriver::getAntennaTxPort(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0>>)::{lambda(void *)#1}::__invoke);
  if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
}

void radio::ARICommandDriver::getAntennaTxPort_sync(void *a1, uint64_t a2, const __CFDictionary **a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[10];
  if (!v4 || (v7 = (std::__shared_weak_count_vtbl *)a1[9], (CFTypeRef v8 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  CFTypeRef v9 = v8;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  long long __p = (void *)0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  _OWORD v27[2] = v10;
  v27[3] = v10;
  v27[0] = v10;
  v27[1] = v10;
  AriSdk::ARI_CsiIceGetTxAntennaReq_SDK::ARI_CsiIceGetTxAntennaReq_SDK((AriSdk::ARI_CsiIceGetTxAntennaReq_SDK *)v27);
  v26[0] = 0xAAAAAAAAAAAAAAAALL;
  v26[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v26, *a3);
  int Bool = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v26, (const __CFString *)*MEMORY[0x263F8B8B8]);
  uint64_t v12 = operator new(4uLL);
  *uint64_t v12 = Bool;
  CFTypeRef v13 = __p;
  long long __p = v12;
  if (v13) {
    operator delete(v13);
  }
  uint64_t v14 = a1[39];
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!*(void *)a2)
  {
    uint64_t v15 = 0;
    uint64_t v16 = *(NSObject **)(a2 + 8);
    if (!v16) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  uint64_t v15 = (std::__shared_weak_count_vtbl *)_Block_copy(*(const void **)a2);
  uint64_t v16 = *(NSObject **)(a2 + 8);
  if (v16) {
LABEL_9:
  }
    dispatch_retain(v16);
LABEL_10:
  CFTypeRef v17 = (std::__shared_weak_count *)operator new(0x40uLL);
  v17->__shared_owners_ = 0;
  p_uint64_t shared_owners = &v17->__shared_owners_;
  v17->__shared_weak_owners_ = 0;
  v17[1].__vftable = v7;
  v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940398;
  v17[1].__shared_owners_ = (uint64_t)v9;
  v17[1].__shared_weak_owners_ = (uint64_t)a1;
  v17[2].__vftable = v15;
  v17[2].__shared_owners_ = (uint64_t)v16;
  uint64_t v29 = MEMORY[0x263EF8330];
  uint64_t v30 = 1174405120;
  long long v31 = ___ZN3ice6detail12wrapCallbackIZN5radio16ARICommandDriver21getAntennaTxPort_syncEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS8_IK14__CFDictionaryEEEEESD_E3__0vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  unint64_t v32 = &__block_descriptor_tmp_219;
  unint64_t v33 = v17 + 1;
  long long v34 = v17;
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlock[0] = (const void *)MEMORY[0x263EF8330];
  aBlock[1] = (const void *)0x40000000;
  xpc_object_t aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
  aBlock[3] = &unk_264C7DF90;
  void aBlock[4] = &v29;
  uint64_t v19 = _Block_copy(aBlock);
  long long v20 = v34;
  if (!v34 || atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_13:
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_14:
  *(void *)&long long v21 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v24[0] = v21;
  v24[1] = v21;
  unint64_t v25 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v22 = *(std::__shared_weak_count **)(v14 + 16);
  uint64_t v29 = *(void *)(v14 + 8);
  if (!v22)
  {
    uint64_t v30 = 0;
LABEL_28:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v30 = (uint64_t)std::__shared_weak_count::lock(v22);
  if (!v30) {
    goto LABEL_28;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  uint64_t v23 = (std::__shared_weak_count *)v30;
  if (v30 && !atomic_fetch_add((atomic_ullong *volatile)(v30 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  aBlock[0] = v19;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0]) {
    _Block_release(aBlock[0]);
  }
  MEMORY[0x237DF50B0](v24);
  MEMORY[0x237DF4EE0](v26);
  MEMORY[0x237DF5CF0](v27);
  std::__shared_weak_count::__release_weak(v9);
}

void sub_235E2CC14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  uint64_t v18 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v19 = va_arg(va3, void);
  uint64_t v21 = va_arg(va3, void);
  uint64_t v5 = *(const void **)(v3 - 120);
  if (v5) {
    _Block_release(v5);
  }
  MEMORY[0x237DF50B0]((uint64_t *)va1);
  radio::ARICommandDriver::getAntennaTxPort_sync(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0::~$_0((uint64_t *)va);
  MEMORY[0x237DF4EE0]((uint64_t *)va2);
  MEMORY[0x237DF5CF0](va3);
  std::__shared_weak_count::__release_weak(v2);
  _Unwind_Resume(a1);
}

void *radio::ARICommandDriver::getAntennaTxPort_sync(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0::~$_0(void *a1)
{
  uint64_t v2 = a1[4];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = (const void *)a1[3];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void radio::ARICommandDriver::getARTDWithRAT_sync(std::__shared_weak_count_vtbl *a1, int a2, uint64_t a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[2].~__shared_weak_count;
  if (!v4
    || (on_zero_shared_weaunint64_t k = (std::__shared_weak_count_vtbl *)a1[1].__on_zero_shared_weak,
        (uint64_t v8 = std::__shared_weak_count::lock(v4)) == 0))
  {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v9 = v8;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  long long __p = (void *)0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  _OWORD v25[2] = v10;
  v25[3] = v10;
  v25[0] = v10;
  v25[1] = v10;
  AriSdk::ARI_CsiIceGetArtdSettingReq_SDK::ARI_CsiIceGetArtdSettingReq_SDK((AriSdk::ARI_CsiIceGetArtdSettingReq_SDK *)v25);
  uint64_t v11 = operator new(4uLL);
  *uint64_t v11 = a2;
  uint64_t v12 = __p;
  long long __p = v11;
  if (v12) {
    operator delete(v12);
  }
  CFTypeRef v13 = a1[7].__on_zero_shared_weak;
  if (!*(void *)a3)
  {
    uint64_t v14 = 0;
    uint64_t v15 = *(NSObject **)(a3 + 8);
    if (!v15) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  uint64_t v14 = _Block_copy(*(const void **)a3);
  uint64_t v15 = *(NSObject **)(a3 + 8);
  if (v15) {
LABEL_9:
  }
    dispatch_retain(v15);
LABEL_10:
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v16 = (std::__shared_weak_count *)operator new(0x48uLL);
  *(_OWORD *)&v16->__shared_owners_ = 0u;
  p_uint64_t shared_owners = &v16->__shared_owners_;
  v16->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940418;
  v16[1].__vftable = a1;
  v16[1].__shared_owners_ = (uint64_t)v14;
  v16[1].__shared_weak_owners_ = (uint64_t)v15;
  v16[2].__vftable = on_zero_shared_weak;
  v16[2].__shared_owners_ = (uint64_t)v9;
  LODWORD(v16[2].__shared_weak_owners_) = a2;
  uint64_t v27 = MEMORY[0x263EF8330];
  uint64_t v28 = 1174405120;
  uint64_t v29 = ___ZN3ice6detail12wrapCallbackIZN5radio16ARICommandDriver19getARTDWithRAT_syncENS3_14RFRatSelectionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS9_IK14__CFDictionaryEEEEEE3__0vEENS5_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  uint64_t v30 = &__block_descriptor_tmp_224;
  long long v31 = v16 + 1;
  unint64_t v32 = v16;
  atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlock[0] = (const void *)MEMORY[0x263EF8330];
  aBlock[1] = (const void *)0x40000000;
  xpc_object_t aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
  aBlock[3] = &unk_264C7DF90;
  void aBlock[4] = &v27;
  uint64_t v18 = _Block_copy(aBlock);
  uint64_t v19 = v32;
  if (!v32 || atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
  std::__shared_weak_count::__release_weak(v19);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_13:
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
LABEL_14:
  *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v23[0] = v20;
  v23[1] = v20;
  unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v21 = (std::__shared_weak_count *)*((void *)v13 + 2);
  uint64_t v27 = *((void *)v13 + 1);
  if (!v21)
  {
    uint64_t v28 = 0;
LABEL_28:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v28 = (uint64_t)std::__shared_weak_count::lock(v21);
  if (!v28) {
    goto LABEL_28;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  uint64_t v22 = (std::__shared_weak_count *)v28;
  if (v28 && !atomic_fetch_add((atomic_ullong *volatile)(v28 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  aBlock[0] = v18;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0]) {
    _Block_release(aBlock[0]);
  }
  MEMORY[0x237DF50B0](v23);
  MEMORY[0x237DF6090](v25);
  std::__shared_weak_count::__release_weak(v9);
}

void sub_235E2D0D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  unint64_t v24 = *(const void **)(v22 - 120);
  if (v24) {
    _Block_release(v24);
  }
  MEMORY[0x237DF50B0](&a15);
  radio::ARICommandDriver::getARTDWithRAT_sync(radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0::~$_0(&a9);
  MEMORY[0x237DF6090](&a21);
  std::__shared_weak_count::__release_weak(v21);
  _Unwind_Resume(a1);
}

void *radio::ARICommandDriver::getARTDWithRAT_sync(radio::ARICommandDriver::RFRatSelection,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0::~$_0(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = a1[2];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (const void *)a1[1];
  if (v4) {
    _Block_release(v4);
  }
  return a1;
}

void radio::ARICommandDriver::getARTD_sync(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = dispatch_group_create();
  uint64_t v5 = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v5);
  }
  v28[0] = 0;
  v28[1] = v28;
  v28[2] = 0x3802000000;
  v28[3] = __Block_byref_object_copy__0;
  _OWORD v28[4] = __Block_byref_object_dispose__0;
  uint64_t v29 = (const void *)0xAAAAAAAAAAAAAAAALL;
  dispatch_object_t v30 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  uint64_t v6 = *(void **)a2;
  if (*(void *)a2) {
    uint64_t v6 = _Block_copy(v6);
  }
  char v7 = *(NSObject **)(a2 + 8);
  uint64_t v29 = v6;
  dispatch_object_t v30 = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  unint64_t v26 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v27 = 0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1174405120;
  xpc_object_t aBlock[2] = ___ZN5radio16ARICommandDriver12getARTD_syncEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke;
  aBlock[3] = &unk_26E93F670;
  dispatch_group_t group = v5;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(group);
  }
  void aBlock[4] = v28;
  uint64_t v8 = _Block_copy(aBlock);
  uint64_t v9 = *(NSObject **)(a1 + 88);
  if (v9) {
    dispatch_retain(*(dispatch_object_t *)(a1 + 88));
  }
  unint64_t v26 = (unint64_t)v8;
  unint64_t v27 = (unint64_t)v9;
  if (v8)
  {
    long long v10 = _Block_copy(v8);
    uint64_t v22 = v10;
    uint64_t v23 = v9;
    if (!v9) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  long long v10 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = v9;
  if (v9) {
LABEL_13:
  }
    dispatch_retain(v9);
LABEL_14:
  radio::ARICommandDriver::getARTDWithRAT_sync((std::__shared_weak_count_vtbl *)a1, 1, (uint64_t)&v22);
  if (v9) {
    dispatch_release(v9);
  }
  if (v10) {
    _Block_release(v10);
  }
  if (v8)
  {
    uint64_t v11 = _Block_copy(v8);
    long long v20 = v11;
    uint64_t v21 = v9;
    if (!v9) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  uint64_t v11 = 0;
  long long v20 = 0;
  uint64_t v21 = v9;
  if (v9) {
LABEL_20:
  }
    dispatch_retain(v9);
LABEL_21:
  radio::ARICommandDriver::getARTDWithRAT_sync((std::__shared_weak_count_vtbl *)a1, 2, (uint64_t)&v20);
  if (v9) {
    dispatch_release(v9);
  }
  if (v11) {
    _Block_release(v11);
  }
  if (v8)
  {
    uint64_t v12 = _Block_copy(v8);
    uint64_t v18 = v12;
    uint64_t v19 = v9;
    if (!v9) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  uint64_t v12 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = v9;
  if (v9) {
LABEL_27:
  }
    dispatch_retain(v9);
LABEL_28:
  radio::ARICommandDriver::getARTDWithRAT_sync((std::__shared_weak_count_vtbl *)a1, 3, (uint64_t)&v18);
  if (v9) {
    dispatch_release(v9);
  }
  if (v12) {
    _Block_release(v12);
  }
  if (v8)
  {
    CFTypeRef v13 = _Block_copy(v8);
    uint64_t v16 = v13;
    uint64_t v17 = v9;
    if (!v9) {
      goto LABEL_35;
    }
    goto LABEL_34;
  }
  CFTypeRef v13 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = v9;
  if (v9) {
LABEL_34:
  }
    dispatch_retain(v9);
LABEL_35:
  radio::ARICommandDriver::getARTDWithRAT_sync((std::__shared_weak_count_vtbl *)a1, 0, (uint64_t)&v16);
  if (v9) {
    dispatch_release(v9);
  }
  if (v13) {
    _Block_release(v13);
  }
  uint64_t v14 = *(NSObject **)(a1 + 88);
  v15[0] = MEMORY[0x263EF8330];
  v15[1] = 0x40000000;
  void v15[2] = ___ZN5radio16ARICommandDriver12getARTD_syncEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_34;
  v15[3] = &unk_264C7DEA0;
  _OWORD v15[4] = v28;
  dispatch_group_notify(v5, v14, v15);
  if (v9) {
    dispatch_release(v9);
  }
  if (v8) {
    _Block_release(v8);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  _Block_object_dispose(v28, 8);
  if (v30) {
    dispatch_release(v30);
  }
  if (v29) {
    _Block_release(v29);
  }
  if (v5)
  {
    dispatch_group_leave(v5);
    dispatch_release(v5);
    dispatch_release(v5);
  }
}

void sub_235E2D56C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,dispatch_group_t group)
{
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback((uint64_t)&a14);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v29 - 136);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  _Block_object_dispose((const void *)(v29 - 120), 8);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v28 + 40);
  if (v27)
  {
    dispatch_group_leave(v27);
    dispatch_release(v27);
    dispatch_release(v27);
  }
  _Unwind_Resume(a1);
}

void ___ZN5radio16ARICommandDriver12getARTD_syncEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke(uint64_t a1, CFTypeRef *a2, const void **a3)
{
  CFTypeRef v3 = *a2;
  if (*a2) {
    uint64_t v4 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  }
  else {
    uint64_t v4 = 0;
  }
  if (!v4) {
    return;
  }
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
  if (!*(void *)(v6 + 40) || !*(void *)(v6 + 48)) {
    return;
  }
  if (v3) {
    CFRetain(*a2);
  }
  uint64_t v8 = *a3;
  if (v8) {
    CFRetain(v8);
  }
  uint64_t v9 = *(const void **)(v6 + 40);
  if (v9) {
    long long v10 = _Block_copy(v9);
  }
  else {
    long long v10 = 0;
  }
  uint64_t v11 = *(NSObject **)(v6 + 48);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke_0;
  block[3] = &__block_descriptor_tmp_191;
  if (v10)
  {
    aBlocunint64_t k = _Block_copy(v10);
    CFTypeRef v17 = v3;
    if (!v3) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  aBlocunint64_t k = 0;
  CFTypeRef v17 = v3;
  if (v3) {
LABEL_18:
  }
    CFRetain(v3);
LABEL_19:
  CFTypeRef cf = v8;
  if (v8) {
    CFRetain(v8);
  }
  dispatch_async(v11, block);
  if (cf) {
    CFRelease(cf);
  }
  if (v17) {
    CFRelease(v17);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v10) {
    _Block_release(v10);
  }
  if (v8) {
    CFRelease(v8);
  }
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v12 = *(void *)(*(void *)(a1 + 32) + 8);
  CFTypeRef v13 = *(const void **)(v12 + 40);
  *(void *)(v12 + 40) = 0;
  if (v13) {
    _Block_release(v13);
  }
  uint64_t v14 = *(NSObject **)(v12 + 48);
  *(void *)(v12 + 48) = 0;
  if (v14) {
    dispatch_release(v14);
  }
}

void ___ZN5radio16ARICommandDriver12getARTD_syncEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_34(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v2 = *(const void **)(v1 + 40);
  if (v2 && *(void *)(v1 + 48))
  {
    CFTypeRef v3 = _Block_copy(v2);
    uint64_t v4 = v3;
    uint64_t v5 = *(NSObject **)(v1 + 48);
    block[0] = MEMORY[0x263EF8330];
    block[1] = 1174405120;
    block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke_0;
    block[3] = &__block_descriptor_tmp_191;
    if (v3) {
      uint64_t v6 = _Block_copy(v3);
    }
    else {
      uint64_t v6 = 0;
    }
    CFTypeRef v9 = 0;
    CFTypeRef cf = 0;
    aBlocunint64_t k = v6;
    dispatch_async(v5, block);
    if (cf) {
      CFRelease(cf);
    }
    if (v9) {
      CFRelease(v9);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v4) {
      _Block_release(v4);
    }
  }
}

void radio::ARICommandDriver::getARFCN_sync(std::__shared_weak_count_vtbl *a1, uint64_t a2)
{
  CFTypeRef v3 = (std::__shared_weak_count *)a1[2].~__shared_weak_count;
  if (!v3
    || (on_zero_shared_weaunint64_t k = (std::__shared_weak_count_vtbl *)a1[1].__on_zero_shared_weak,
        (uint64_t v6 = std::__shared_weak_count::lock(v3)) == 0))
  {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  char v7 = v6;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  _OWORD v21[2] = v8;
  v21[3] = v8;
  v21[0] = v8;
  v21[1] = v8;
  AriSdk::ARI_CsiIceGetArfcnLockReq_SDK::ARI_CsiIceGetArfcnLockReq_SDK((AriSdk::ARI_CsiIceGetArfcnLockReq_SDK *)v21);
  CFTypeRef v9 = a1[7].__on_zero_shared_weak;
  if (!*(void *)a2)
  {
    long long v10 = 0;
    uint64_t v11 = *(NSObject **)(a2 + 8);
    if (!v11) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  long long v10 = _Block_copy(*(const void **)a2);
  uint64_t v11 = *(NSObject **)(a2 + 8);
  if (v11) {
LABEL_7:
  }
    dispatch_retain(v11);
LABEL_8:
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v12 = (std::__shared_weak_count *)operator new(0x40uLL);
  *(_OWORD *)&v12->__shared_owners_ = 0u;
  p_uint64_t shared_owners = &v12->__shared_owners_;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_26E940498;
  v12[1].__vftable = a1;
  v12[1].__shared_owners_ = (uint64_t)v10;
  v12[1].__shared_weak_owners_ = (uint64_t)v11;
  v12[2].__vftable = on_zero_shared_weak;
  v12[2].__shared_owners_ = (uint64_t)v7;
  uint64_t v22 = MEMORY[0x263EF8330];
  uint64_t v23 = 1174405120;
  unint64_t v24 = ___ZN3ice6detail12wrapCallbackIZN5radio16ARICommandDriver13getARFCN_syncEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS8_IK14__CFDictionaryEEEEEE3__0vEENS4_5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEOT__block_invoke;
  unint64_t v25 = &__block_descriptor_tmp_230;
  unint64_t v26 = v12 + 1;
  unint64_t v27 = v12;
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  aBlock[0] = (const void *)MEMORY[0x263EF8330];
  aBlock[1] = (const void *)0x40000000;
  xpc_object_t aBlock[2] = ___ZN3ice6detail12wrapCallbackIvEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke_7;
  aBlock[3] = &unk_264C7DF90;
  void aBlock[4] = &v22;
  uint64_t v14 = _Block_copy(aBlock);
  uint64_t v15 = v27;
  if (!v27 || atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_11:
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
LABEL_12:
  *(void *)&long long v16 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v19[0] = v16;
  v19[1] = v16;
  unint64_t v20 = 0xAAAAAAAAAAAAAAAALL;
  CFTypeRef v17 = (std::__shared_weak_count *)*((void *)v9 + 2);
  uint64_t v22 = *((void *)v9 + 1);
  if (!v17)
  {
    uint64_t v23 = 0;
LABEL_26:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v23 = (uint64_t)std::__shared_weak_count::lock(v17);
  if (!v23) {
    goto LABEL_26;
  }
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  uint64_t v18 = (std::__shared_weak_count *)v23;
  if (v23 && !atomic_fetch_add((atomic_ullong *volatile)(v23 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  aBlock[0] = v14;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0]) {
    _Block_release(aBlock[0]);
  }
  MEMORY[0x237DF50B0](v19);
  MEMORY[0x237DF5CD0](v21);
  std::__shared_weak_count::__release_weak(v7);
}

void sub_235E2DC64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  uint64_t v18 = va_arg(va2, void);
  uint64_t v5 = *(const void **)(v3 - 120);
  if (v5) {
    _Block_release(v5);
  }
  MEMORY[0x237DF50B0]((uint64_t *)va1);
  radio::ARICommandDriver::getARFCN_sync(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0::~$_0((uint64_t *)va);
  MEMORY[0x237DF5CD0](va2);
  std::__shared_weak_count::__release_weak(v2);
  _Unwind_Resume(a1);
}