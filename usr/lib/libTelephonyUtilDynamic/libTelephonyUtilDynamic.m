void *ctu::OsLogLogger::OsLogLogger(ctu::OsLogLogger *this, void **a2)
{
  return ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::SharedRef(this, *a2);
}

{
  return ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::SharedRef(this, a2[1]);
}

{
  return ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::SharedRef(this, a2[1]);
}

{
  return ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::SharedRef(this, *a2);
}

uint64_t _TelephonyUtilDebugPrintVerbose(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if ((_TelephonyUtilDebugFlags & 4) != 0) {
    return gDelegate(result, a2, &a9);
  }
  return result;
}

void ctu::RestModule::setProperty(uint64_t *a1, uint64_t a2, uint64_t a3)
{
}

uint64_t _TelephonyUtilDebugPrintBinaryVerbose()
{
  if ((~_TelephonyUtilDebugFlags & 0xC) == 0) {
    return off_1EB4652D0();
  }
  return result;
}

double ctu::LogMessageBuffer::LogMessageBuffer(ctu::LogMessageBuffer *this)
{
  *((void *)this + 6) = 0;
  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return result;
}

{
  double result;

  *((void *)this + 6) = 0;
  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return result;
}

BOOL ctu::cf::convert_copy(CFStringRef *a1, const UInt8 *a2, CFStringEncoding encoding, CFAllocatorRef alloc)
{
  CFIndex v6 = *((void *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    CFIndex v7 = a2[23];
  }
  else
  {
    a2 = *(const UInt8 **)a2;
    CFIndex v7 = v6;
  }
  CFStringRef v8 = CFStringCreateWithBytes(alloc, a2, v7, encoding, 0);
  *a1 = v8;
  return v8 != 0;
}

uint64_t xpc::dyn_cast_or_default(xpc_object_t *a1, unsigned int a2)
{
  return xpc::dyn_cast_or_default(a1, a2);
}

uint64_t xpc::dyn_cast_or_default(xpc_object_t *a1, int a2)
{
  return xpc::dyn_cast_or_default(a1, a2);
}

uint64_t xpc::dyn_cast_or_default(xpc_object_t *a1, uint64_t a2)
{
  uint64_t v4 = MEMORY[0x192FEE1B0](*a1);
  xpc_object_t v5 = *a1;
  if (v4 == MEMORY[0x1E4F145C0])
  {
    return xpc_int64_get_value(v5);
  }
  else
  {
    uint64_t v6 = MEMORY[0x192FEE1B0](v5);
    xpc_object_t v7 = *a1;
    if (v6 == MEMORY[0x1E4F145F8])
    {
      return xpc_uint64_get_value(v7);
    }
    else
    {
      if (MEMORY[0x192FEE1B0](v7) == MEMORY[0x1E4F14570]) {
        return xpc::dyn_cast_or_default(a1, 0);
      }
      return a2;
    }
  }
}

BOOL xpc::dyn_cast_or_default(xpc_object_t *a1, uint64_t a2)
{
  uint64_t v4 = MEMORY[0x192FEE1B0](*a1);
  xpc_object_t v5 = *a1;
  if (v4 == MEMORY[0x1E4F14570]) {
    return v5 == (xpc_object_t)MEMORY[0x1E4F14518];
  }
  uint64_t v6 = MEMORY[0x192FEE1B0](v5);
  xpc_object_t v7 = *a1;
  if (v6 == MEMORY[0x1E4F145C0])
  {
    uint64_t value = xpc_int64_get_value(v7);
    return value != 0;
  }
  if (MEMORY[0x192FEE1B0](v7) == MEMORY[0x1E4F145F8])
  {
    uint64_t value = xpc_uint64_get_value(*a1);
    return value != 0;
  }
  return a2;
}

void ctu::rest::detail::read_enum_string_value(ctu::rest::detail *this, xpc_object_t *a2, const xpc::object *a3)
{
  memset(v6, 0, sizeof(v6));
  xpc::dyn_cast_or_default(a2, (uint64_t)v6, &v5);
  std::string __p = v5;
  *(_DWORD *)this = std::stoi(&__p, 0, 10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

{
  std::string __p;
  std::string v5;
  void v6[3];

  memset(v6, 0, sizeof(v6));
  xpc::dyn_cast_or_default(a2, (uint64_t)v6, &v5);
  std::string __p = v5;
  *(void *)this = std::stoll(&__p, 0, 10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

{
  std::string __p;
  std::string v5;
  void v6[3];

  memset(v6, 0, sizeof(v6));
  xpc::dyn_cast_or_default(a2, (uint64_t)v6, &v5);
  std::string __p = v5;
  *(void *)this = std::stoull(&__p, 0, 10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

{
  std::string __p;
  std::string v5;
  void v6[3];

  memset(v6, 0, sizeof(v6));
  xpc::dyn_cast_or_default(a2, (uint64_t)v6, &v5);
  std::string __p = v5;
  *(unsigned char *)this = std::stoi(&__p, 0, 10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

{
  std::string __p;
  std::string v5;
  void v6[3];

  memset(v6, 0, sizeof(v6));
  xpc::dyn_cast_or_default(a2, (uint64_t)v6, &v5);
  std::string __p = v5;
  *(unsigned char *)this = std::stoi(&__p, 0, 10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

{
  std::string __p;
  std::string v5;
  void v6[3];

  memset(v6, 0, sizeof(v6));
  xpc::dyn_cast_or_default(a2, (uint64_t)v6, &v5);
  std::string __p = v5;
  *(_WORD *)this = std::stoi(&__p, 0, 10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

{
  std::string __p;
  std::string v5;
  void v6[3];

  memset(v6, 0, sizeof(v6));
  xpc::dyn_cast_or_default(a2, (uint64_t)v6, &v5);
  std::string __p = v5;
  *(_WORD *)this = std::stoi(&__p, 0, 10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

{
  std::string __p;
  std::string v5;
  void v6[3];

  memset(v6, 0, sizeof(v6));
  xpc::dyn_cast_or_default(a2, (uint64_t)v6, &v5);
  std::string __p = v5;
  *(_DWORD *)this = std::stoul(&__p, 0, 10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

{
  std::string __p;
  std::string v5;
  void v6[3];

  memset(v6, 0, sizeof(v6));
  xpc::dyn_cast_or_default(a2, (uint64_t)v6, &v5);
  std::string __p = v5;
  *(void *)this = std::stol(&__p, 0, 10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

{
  std::string __p;
  std::string v5;
  void v6[3];

  memset(v6, 0, sizeof(v6));
  xpc::dyn_cast_or_default(a2, (uint64_t)v6, &v5);
  std::string __p = v5;
  *(void *)this = std::stoul(&__p, 0, 10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_192047C9C(void *a1)
{
}

void sub_192047CA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *ctu::OsLogContext::OsLogContext(void *a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = (void *)a2[1];
  *a1 = v5;
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::SharedRef(a1 + 1, v4);
  uint64_t v6 = (void *)a2[1];
  a2[1] = 0;
  CFStringRef v8 = v6;
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v8);
  return a1;
}

{
  void *v4;
  uint64_t v5;
  void *v6;
  void *v8;

  uint64_t v5 = *a2;
  uint64_t v4 = (void *)a2[1];
  *a1 = v5;
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::SharedRef(a1 + 1, v4);
  uint64_t v6 = (void *)a2[1];
  a2[1] = 0;
  CFStringRef v8 = v6;
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v8);
  return a1;
}

ctu::OsLogContext *ctu::OsLogContext::OsLogContext(ctu::OsLogContext *this, const ctu::OsLogContext *a2)
{
  uint64_t v4 = *(void *)a2;
  v3 = (void *)*((void *)a2 + 1);
  *(void *)this = v4;
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::SharedRef((void *)this + 1, v3);
  return this;
}

{
  void *v3;
  uint64_t v4;

  uint64_t v4 = *(void *)a2;
  v3 = (void *)*((void *)a2 + 1);
  *(void *)this = v4;
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::SharedRef((void *)this + 1, v3);
  return this;
}

void *ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::SharedRef(void *a1, void *object)
{
  *a1 = object;
  if (object) {
    os_retain(object);
  }
  return a1;
}

{
  *a1 = object;
  if (object) {
    os_retain(object);
  }
  return a1;
}

uint64_t *ctu::OsLogContext::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = (void *)a2[1];
  if (v4)
  {
    os_retain((void *)a2[1]);
    uint64_t v6 = (void *)a2[1];
  }
  else
  {
    uint64_t v6 = 0;
  }
  a2[1] = 0;
  v12 = v6;
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v12);
  xpc_object_t v7 = (void *)a1[1];
  uint64_t v9 = *a1;
  *a1 = v5;
  a1[1] = 0;
  if (&v9 != a1)
  {
    v12 = 0;
    a1[1] = (uint64_t)v4;
    v10 = 0;
    ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v12);
    uint64_t v4 = v10;
  }
  v11 = 0;
  v12 = v4;
  v10 = v7;
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v12);
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v11);
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v10);
  return a1;
}

{
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;

  uint64_t v4 = *a2;
  v3 = (void *)a2[1];
  if (v3) {
    os_retain((void *)a2[1]);
  }
  uint64_t v5 = (void *)a1[1];
  xpc_object_t v7 = *a1;
  *a1 = v4;
  a1[1] = 0;
  if (&v7 != a1)
  {
    v10 = 0;
    a1[1] = (uint64_t)v3;
    CFStringRef v8 = 0;
    ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v10);
    v3 = v8;
  }
  uint64_t v9 = 0;
  v10 = v3;
  CFStringRef v8 = v5;
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v10);
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v9);
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v8);
  return a1;
}

void ctu::OsLogContext::~OsLogContext(void **this)
{
}

{
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1);
}

void **ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(void **a1)
{
  v2 = *a1;
  if (v2) {
    os_release(v2);
  }
  return a1;
}

uint64_t ctu::TreeRestResource::handleMessage(void ***this, ctu::RestResourceContext *a2, const ctu::PathView *a3)
{
  size_t v6 = *((void *)a3 + 3);
  if (v6)
  {
    xpc_object_t v7 = (void *)*((void *)a3 + 2);
    if (v7)
    {
      std::string::basic_string[abi:ne180100](__p, v7, v6);
    }
    else
    {
      __p[0] = 0;
      __p[1] = 0;
      *(void *)&long long v14 = 0;
    }
    boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::shared_ptr<ctu::RestResourceBase>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::shared_ptr<ctu::RestResourceBase>>>>::find((uint64_t)&v15, this + 1, __p);
    uint64_t v9 = v15;
    if (SBYTE7(v14) < 0) {
      operator delete(__p[0]);
    }
    if ((void **)v9 == &this[1][5 * (void)this[2]])
    {
      uint64_t result = 0;
      if (*((void *)a3 + 3) == 1 && **((unsigned char **)a3 + 2) == 42)
      {
        long long v11 = *((_OWORD *)a3 + 1);
        v12[0] = *(_OWORD *)a3;
        v12[1] = v11;
        if (((uint64_t (*)(void ***, ctu::RestResourceContext *, _OWORD *))(*this)[10])(this, a2, v12)) {
          return 1;
        }
      }
    }
    else
    {
      long long v10 = *((_OWORD *)a3 + 1);
      *(_OWORD *)std::string __p = *(_OWORD *)a3;
      long long v14 = v10;
      ctu::PathView::advance((uint64_t)__p, 1);
      return (*(uint64_t (**)(void, ctu::RestResourceContext *, void **))(**(void **)(v9 + 24) + 16))(*(void *)(v9 + 24), a2, __p);
    }
  }
  else
  {
    return ctu::RestResource::handleMessage((ctu::RestResource *)this, a2, a3);
  }
  return result;
}

uint64_t boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::shared_ptr<ctu::RestResourceBase>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::shared_ptr<ctu::RestResourceBase>>>>::find(uint64_t result, void ***a2, void **a3)
{
  uint64_t v4 = (void *)result;
  *(void *)uint64_t result = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v5 = *a2;
  size_t v6 = a2[1];
  if (v6)
  {
    CFStringRef v8 = *a2;
    do
    {
      uint64_t result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v8[5 * ((unint64_t)v6 >> 1)], a3);
      if ((result & 0x80u) == 0)
      {
        size_t v6 = (void **)((unint64_t)v6 >> 1);
      }
      else
      {
        v8 += 5 * ((unint64_t)v6 >> 1) + 5;
        size_t v6 = (void **)((char *)v6 + ~((unint64_t)v6 >> 1));
      }
    }
    while (v6);
    uint64_t v5 = *a2;
    uint64_t v9 = a2[1];
  }
  else
  {
    uint64_t v9 = 0;
    CFStringRef v8 = *a2;
  }
  *uint64_t v4 = v8;
  long long v10 = &v5[5 * (void)v9];
  if (v8 != v10)
  {
    uint64_t result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, v8);
    if ((result & 0x80) != 0) {
      *uint64_t v4 = v10;
    }
  }
  return result;
}

uint64_t ctu::PathView::advance(uint64_t this, uint64_t a2)
{
  if (a2 < 1)
  {
    if (a2 < 0)
    {
      unint64_t v11 = *(void *)(this + 8);
      if (v11)
      {
        v12 = *(unsigned char **)this;
        v13 = *(unsigned char **)(this + 16);
        do
        {
          uint64_t v14 = v13 - v12;
          if (v13 - v12 <= 1)
          {
            if (v13 - v12 == 1)
            {
              if (v13 == v12 || *v12 == 47) {
                return this;
              }
            }
            else if (v13 == v12)
            {
              return this;
            }
          }
          ++a2;
          unint64_t v15 = v14 - (v14 != v11);
          if (v15 >= v11) {
            unint64_t v16 = v11;
          }
          else {
            unint64_t v16 = v14 - (v14 != v11);
          }
          unint64_t v17 = v16 - 1;
          do
          {
            if (v17 == -1)
            {
              v13 = v12;
              goto LABEL_54;
            }
            int v18 = v12[v17--];
          }
          while (v18 != 47);
          unint64_t v19 = v17 + 2;
          if (v17 + 2 >= v11) {
            unint64_t v19 = v11;
          }
          if (v19 > v15) {
            unint64_t v15 = v19;
          }
          if (v15 >= v11) {
            unint64_t v20 = v11;
          }
          else {
            unint64_t v20 = v15;
          }
          v13 = &v12[v19];
          unint64_t v16 = v20 - v19;
LABEL_54:
          *(void *)(this + 16) = v13;
          *(void *)(this + 24) = v16;
        }
        while (a2);
      }
    }
  }
  else
  {
    v2 = *(unsigned char **)this;
    unint64_t v3 = *(void *)(this + 8);
    uint64_t v4 = *(void *)(this + 16) + *(void *)(this + 24) - *(void *)this;
    BOOL v5 = v4 != -1 && v4 < (uint64_t)v3;
    unint64_t v6 = *(void *)(this + 8);
    unint64_t v7 = v6;
    if (v5)
    {
      while (1)
      {
        unint64_t v6 = v4 + 1;
        if (v3 <= v4 + 1) {
          break;
        }
        ++v4;
        while (v2[v4] != 47)
        {
          if (v3 == ++v4) {
            goto LABEL_18;
          }
        }
        uint64_t v8 = a2 - 1;
        if (a2 >= 2 && v4 != -1)
        {
          --a2;
          if (v4 < (uint64_t)v3) {
            continue;
          }
        }
        goto LABEL_19;
      }
LABEL_18:
      uint64_t v8 = a2 - 1;
      uint64_t v4 = -1;
LABEL_19:
      if (v8)
      {
        unint64_t v6 = *(void *)(this + 8);
        unint64_t v7 = v6;
      }
      else
      {
        unint64_t v7 = v4;
      }
    }
    if (v6 >= v3) {
      unint64_t v9 = *(void *)(this + 8);
    }
    else {
      unint64_t v9 = v6;
    }
    if (v9 <= v7) {
      unint64_t v10 = v7;
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10 < v3) {
      unint64_t v3 = v10;
    }
    *(void *)(this + 16) = &v2[v9];
    *(void *)(this + 24) = v3 - v9;
  }
  return this;
}

uint64_t ctu::RestResource::handleMessage(ctu::RestResource *this, ctu::RestResourceContext *a2, const ctu::PathView *a3)
{
  (*(void (**)(xpc_object_t *__return_ptr, ctu::RestResourceContext *))(*(void *)a2 + 16))(&object, a2);
  int v7 = ctu::rest::asOperation(&object, v6);
  xpc_release(object);
  switch(v7)
  {
    case 1:
      uint64_t result = (*(uint64_t (**)(ctu::RestResource *, ctu::RestResourceContext *, const ctu::PathView *))(*(void *)this + 48))(this, a2, a3);
      break;
    case 2:
      uint64_t result = (*(uint64_t (**)(ctu::RestResource *, ctu::RestResourceContext *, const ctu::PathView *))(*(void *)this + 40))(this, a2, a3);
      break;
    case 3:
      uint64_t result = (*(uint64_t (**)(ctu::RestResource *, ctu::RestResourceContext *, const ctu::PathView *))(*(void *)this + 56))(this, a2, a3);
      break;
    case 4:
      uint64_t result = (*(uint64_t (**)(ctu::RestResource *, ctu::RestResourceContext *, const ctu::PathView *))(*(void *)this + 64))(this, a2, a3);
      break;
    case 5:
      uint64_t result = (*(uint64_t (**)(ctu::RestResource *, ctu::RestResourceContext *, const ctu::PathView *))(*(void *)this + 72))(this, a2, a3);
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

void sub_192048404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

xpc_object_t ctu::DictRestResourceContext::getRestOperation@<X0>(ctu::DictRestResourceContext *this@<X0>, void *a2@<X8>)
{
  v3[0] = *((void *)this + 1);
  v3[1] = "o";
  return xpc::dict::object_proxy::operator xpc::object((uint64_t)v3, a2);
}

void ctu::rest::WatchableRestResourceHelper::map(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  if (v2)
  {
    uint64_t v4 = 16 * v2;
    BOOL v5 = (std::__shared_weak_count **)(*a1 + 8);
    do
    {
      if (*v5)
      {
        unint64_t v6 = std::__shared_weak_count::lock(*v5);
        if (v6)
        {
          int v7 = v6;
          if (*(v5 - 1))
          {
            uint64_t v8 = *(void *)(a2 + 24);
            if (!v8) {
              std::__throw_bad_function_call[abi:ne180100]();
            }
            (*(void (**)(uint64_t))(*(void *)v8 + 48))(v8);
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        }
      }
      v5 += 2;
      v4 -= 16;
    }
    while (v4);
  }
}

void sub_1920484F0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<ctu::PropertyRestResource::handleMessage_Resource_SET(ctu::RestResourceContext &,ctu::PathView const&,ctu::llvm::StringRef,ctu::llvm::StringRef)::$_0,std::allocator<ctu::PropertyRestResource::handleMessage_Resource_SET(ctu::RestResourceContext &,ctu::PathView const&,ctu::llvm::StringRef,ctu::llvm::StringRef)::$_0>,void ()(ctu::RestResourceConnection const&)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[1];
  if (*(char *)(a2 + 31) >= 0) {
    BOOL v5 = (const char *)(a2 + 8);
  }
  else {
    BOOL v5 = *(const char **)(a2 + 8);
  }
  xpc_object_t v8 = xpc_string_create(v5);
  if (!v8) {
    xpc_object_t v8 = xpc_null_create();
  }
  unint64_t v6 = (const char *)a1[2];
  if (v6[23] < 0) {
    unint64_t v6 = *(const char **)v6;
  }
  xpc_object_t object = xpc_string_create(v6);
  if (!object) {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *, xpc_object_t *, void))(*(void *)v4 + 48))(v4, a2, &v8, &object, a1[3]);
  xpc_release(object);
  xpc_release(v8);
}

void sub_1920485E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, xpc_object_t a10)
{
}

uint64_t ctu::ReplyCallbackRestResourceContext::sendNotify(ctu::ReplyCallbackRestResourceContext *this, const ctu::RestResourceConnection *a2, void **a3, void **a4, void **a5)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  ctu::rest::createNotify(a3, a4, a5, &object);
  int v7 = *((void *)this + 9);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v9 = (const ctu::RestResourceConnection *)*((void *)a2 + 1);
    int v10 = *((char *)a2 + 31);
    xpc::object::to_string(&object, &__p);
    unint64_t v11 = v10 >= 0 ? (const ctu::RestResourceConnection *)((char *)a2 + 8) : v9;
    v12 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315650;
    unint64_t v17 = v11;
    __int16 v18 = 2048;
    unint64_t v19 = a2;
    __int16 v20 = 2080;
    v21 = v12;
    _os_log_debug_impl(&dword_192046000, v7, OS_LOG_TYPE_DEBUG, "Sending NOTIFY to %s (%p): %s", buf, 0x20u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  xpc_object_t v13 = object;
  if (object) {
    xpc_retain(object);
  }
  else {
    xpc_object_t v13 = xpc_null_create();
  }
  (*(void (**)(const ctu::RestResourceConnection *, xpc_object_t *))(*(void *)a2 + 16))(a2, &v13);
  xpc_release(v13);
  xpc_object_t v13 = 0;
  xpc_release(object);
  return 1;
}

void sub_19204879C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t object)
{
}

void ctu::DispatchRestResourceConnection::send(uint64_t a1, xpc_object_t *a2)
{
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
  {
    BOOL v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      unint64_t v6 = v5;
      uint64_t v7 = *(void *)(a1 + 32);
      if (v7)
      {
        xpc_object_t object = *a2;
        *a2 = xpc_null_create();
        (*(void (**)(uint64_t, xpc_object_t *))(*(void *)v7 + 16))(v7, &object);
        xpc_release(object);
        xpc_object_t object = 0;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_19204888C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'ctu::rest::RestDispatchConnector::handleMessage(uint64_t a1, xpc_object_t *a2)
{
}

void ctu::rest::createNotify(void **a1@<X0>, void **a2@<X1>, void **a3@<X2>, void *a4@<X8>)
{
  xpc_object_t v8 = xpc_string_create("notify");
  unint64_t v9 = v8;
  if (!v8)
  {
    xpc_object_t v8 = xpc_null_create();
    unint64_t v9 = v8;
  }
  ctu::rest::createRestMessage(&v9, a1, a2, a3, a4);
  xpc_release(v8);
}

void ctu::rest::createRestMessage(void **a1@<X0>, void **a2@<X1>, void **a3@<X2>, void **a4@<X3>, void *a5@<X8>)
{
  *a5 = 0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v10 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v11 = v10;
  if (v10)
  {
    *a5 = v10;
  }
  else
  {
    xpc_object_t v11 = xpc_null_create();
    *a5 = v11;
    if (!v11)
    {
      xpc_object_t v12 = xpc_null_create();
      xpc_object_t v11 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x192FEE1B0](v11) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v11);
    goto LABEL_9;
  }
  xpc_object_t v12 = xpc_null_create();
LABEL_8:
  *a5 = v12;
LABEL_9:
  xpc_release(v11);
  xpc_object_t v13 = *a1;
  xpc_object_t object = v13;
  if (v13) {
    xpc_retain(v13);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  v23 = a5;
  v24 = "o";
  xpc::dict::object_proxy::operator=((uint64_t)&v23, &object, &v26);
  xpc_release(v26);
  xpc_object_t v26 = 0;
  xpc_release(object);
  xpc_object_t object = 0;
  uint64_t v14 = *a2;
  xpc_object_t v21 = v14;
  if (v14) {
    xpc_retain(v14);
  }
  else {
    xpc_object_t v21 = xpc_null_create();
  }
  v23 = a5;
  v24 = "a";
  xpc::dict::object_proxy::operator=((uint64_t)&v23, &v21, &v22);
  xpc_release(v22);
  xpc_object_t v22 = 0;
  xpc_release(v21);
  xpc_object_t v21 = 0;
  unint64_t v15 = *a3;
  xpc_object_t v19 = v15;
  if (v15) {
    xpc_retain(v15);
  }
  else {
    xpc_object_t v19 = xpc_null_create();
  }
  v23 = a5;
  v24 = "r";
  xpc::dict::object_proxy::operator=((uint64_t)&v23, &v19, &v20);
  xpc_release(v20);
  xpc_object_t v20 = 0;
  xpc_release(v19);
  xpc_object_t v19 = 0;
  unint64_t v16 = *a4;
  xpc_object_t v17 = v16;
  if (v16) {
    xpc_retain(v16);
  }
  else {
    xpc_object_t v17 = xpc_null_create();
  }
  v23 = a5;
  v24 = "v";
  xpc::dict::object_proxy::operator=((uint64_t)&v23, &v17, &v18);
  xpc_release(v18);
  xpc_object_t v18 = 0;
  xpc_release(v17);
}

xpc_object_t xpc::dict::object_proxy::operator=@<X0>(uint64_t a1@<X0>, xpc_object_t *a2@<X1>, xpc_object_t *a3@<X8>)
{
  xpc_dictionary_set_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8), *a2);
  *a3 = *a2;
  xpc_object_t result = xpc_null_create();
  *a2 = result;
  return result;
}

{
  xpc_object_t result;

  xpc_dictionary_set_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8), *a2);
  *a3 = *a2;
  xpc_object_t result = xpc_null_create();
  *a2 = result;
  return result;
}

{
  xpc_object_t result;

  xpc_dictionary_set_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8), *a2);
  *a3 = *a2;
  xpc_object_t result = xpc_null_create();
  *a2 = result;
  return result;
}

uint64_t *dispatch::async<void ctu::rest::RestDispatchConnector::execute<ctu::rest::RestDispatchConnector::handleMessage(xpc::dict)::$_0>(ctu::rest::RestDispatchConnector::handleMessage(xpc::dict)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ctu::rest::RestDispatchConnector::handleMessage(xpc::dict)::$_0,dispatch_queue_s *::default_delete<ctu::rest::RestDispatchConnector::handleMessage(xpc::dict)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v6 = a1;
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = (void *)(a1 + 24);
  uint64_t v4 = *(void *)(v1 + 72);
  unint64_t v3 = *(std::__shared_weak_count **)(v1 + 80);
  uint64_t v7 = v4;
  xpc_object_t v8 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::rest::RestConnector::visitIfNotifyMessage<std::shared_ptr<ctu::rest::RestConnectorDelegateBase>>(v2, &v7);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  return std::unique_ptr<void ctu::rest::RestDispatchConnector::execute<ctu::rest::RestDispatchConnector::handleMessage(xpc::dict)::$_0>(ctu::rest::RestDispatchConnector::handleMessage(xpc::dict)::$_0 &&)::{lambda(void)#1},std::default_delete<ctu::rest::RestDispatchConnector::handleMessage(xpc::dict)::$_0 &&>>::~unique_ptr[abi:ne180100](&v6);
}

void sub_192048C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  std::unique_ptr<void ctu::rest::RestDispatchConnector::execute<ctu::rest::RestDispatchConnector::handleMessage(xpc::dict)::$_0>(ctu::rest::RestDispatchConnector::handleMessage(xpc::dict)::$_0 &&)::{lambda(void)#1},std::default_delete<ctu::rest::RestDispatchConnector::handleMessage(xpc::dict)::$_0 &&>>::~unique_ptr[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void ctu::rest::RestDispatchConnector::handleMessage(void *a1, xpc_object_t *a2)
{
  xpc_object_t v3 = *a2;
  *a2 = xpc_null_create();
  if (!a1[7]) {
    _rest_api_misuse("Attempted to dispatch on a connector with no queue!");
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (!v4 || (v5 = a1[1], (uint64_t v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v8 = xpc_null_create();
  unint64_t v9 = a1[7];
  xpc_object_t v10 = operator new(0x20uLL);
  void *v10 = v5;
  v10[1] = v7;
  v10[2] = a1;
  v10[3] = v3;
  xpc_object_t v11 = xpc_null_create();
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  dispatch_async_f(v9, v10, (dispatch_function_t)dispatch::async<void ctu::rest::RestDispatchConnector::execute<ctu::rest::RestDispatchConnector::handleMessage(xpc::dict)::$_0>(ctu::rest::RestDispatchConnector::handleMessage(xpc::dict)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ctu::rest::RestDispatchConnector::handleMessage(xpc::dict)::$_0,dispatch_queue_s *::default_delete<ctu::rest::RestDispatchConnector::handleMessage(xpc::dict)::$_0>>)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<void ctu::rest::RestDispatchConnector::execute<ctu::rest::RestDispatchConnector::handleMessage(xpc::dict)::$_0>(ctu::rest::RestDispatchConnector::handleMessage(xpc::dict)::$_0 &&)::{lambda(void)#1},std::default_delete<ctu::rest::RestDispatchConnector::handleMessage(xpc::dict)::$_0 &&>>::~unique_ptr[abi:ne180100](&v12);
  std::unique_ptr<void ctu::rest::RestDispatchConnector::execute<ctu::rest::RestDispatchConnector::handleMessage(xpc::dict)::$_0>(ctu::rest::RestDispatchConnector::handleMessage(xpc::dict)::$_0 &&)::{lambda(void)#1},std::default_delete<ctu::rest::RestDispatchConnector::handleMessage(xpc::dict)::$_0 &&>>::~unique_ptr[abi:ne180100](&v13);
  xpc_release(v11);
  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  xpc_release(v8);
}

uint64_t *std::unique_ptr<void ctu::rest::RestDispatchConnector::execute<ctu::rest::RestDispatchConnector::handleMessage(xpc::dict)::$_0>(ctu::rest::RestDispatchConnector::handleMessage(xpc::dict)::$_0 &&)::{lambda(void)#1},std::default_delete<ctu::rest::RestDispatchConnector::handleMessage(xpc::dict)::$_0 &&>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    xpc_release(*(xpc_object_t *)(v2 + 24));
    *(void *)(v2 + 24) = 0;
    xpc_object_t v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    operator delete((void *)v2);
  }
  return a1;
}

BOOL ctu::rest::RestConnectorDelegate<ctu::RestModuleState>::handleNotifyMessage(uint64_t a1, xpc_object_t *a2, void **a3)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v4) {
    return 0;
  }
  uint64_t v7 = std::__shared_weak_count::lock(v4);
  if (!v7) {
    return 0;
  }
  xpc_object_t v8 = v7;
  unint64_t v9 = *(ctu::RestModuleState **)(a1 + 8);
  if (v9) {
    BOOL v10 = ctu::RestModuleState::handleNotifyMessage(v9, a2, a3);
  }
  else {
    BOOL v10 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  return v10;
}

void sub_192048E48(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::__shared_weak_count::__release_shared[abi:ne180100](std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

uint64_t ctu::rest::RestConnector::visitIfNotifyMessage<std::shared_ptr<ctu::rest::RestConnectorDelegateBase>>(void *a1, uint64_t *a2)
{
  uint64_t v12 = a1;
  uint64_t v13 = "o";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)&v12, object);
  int v5 = ctu::rest::asOperation(object, v4);
  xpc_release(object[0]);
  if (v5 != 5) {
    return 0;
  }
  uint64_t v6 = *a2;
  uint64_t v12 = a1;
  uint64_t v13 = "r";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)&v12, &v11);
  object[0] = a1;
  object[1] = "v";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v10);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, xpc_object_t *, xpc_object_t *))(*(void *)v6 + 32))(v6, &v11, &v10);
  xpc_release(v10);
  xpc_release(v11);
  return v7;
}

void sub_192048FC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, uint64_t a10, xpc_object_t object, xpc_object_t a12)
{
}

xpc_object_t xpc::dict::object_proxy::operator xpc::object@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  xpc_object_t value = xpc_dictionary_get_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8));
  *a2 = value;
  if (value) {
    return xpc_retain(value);
  }
  xpc_object_t result = xpc_null_create();
  *a2 = result;
  return result;
}

uint64_t ctu::rest::asOperation(xpc_object_t *this, const xpc::object *a2)
{
  if (MEMORY[0x192FEE1B0](*this, a2) == MEMORY[0x1E4F145D8]) {
    return 0;
  }
  memset(&__p, 170, sizeof(__p));
  memset(v22, 0, sizeof(v22));
  xpc::dyn_cast_or_default(this, (uint64_t)v22, &__p);
  std::string::size_type size = __p.__r_.__value_.__l.__size_;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  switch(size)
  {
    case 6uLL:
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      int data = (int)p_p->__r_.__value_.__l.__data_;
      int v13 = WORD2(p_p->__r_.__value_.__r.__words[0]);
      if (data == 1769238382 && v13 == 31078)
      {
        uint64_t v10 = 5;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_49;
        }
        return v10;
      }
      break;
    case 4uLL:
      unint64_t v15 = (unsigned int *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v15 = (unsigned int *)&__p;
      }
      if (*v15 != 1752397168)
      {
        unsigned int v16 = bswap32(*v15);
        BOOL v17 = v16 >= 0x70696E67;
        int v18 = v16 > 0x70696E67;
        int v19 = !v17;
        if (v18 == v19) {
          uint64_t v10 = 6;
        }
        else {
          uint64_t v10 = 0;
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_49;
        }
        return v10;
      }
      uint64_t v10 = 3;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return v10;
      }
LABEL_49:
      operator delete(__p.__r_.__value_.__l.__data_);
      return v10;
    case 3uLL:
      uint64_t v4 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v4 = &__p;
      }
      if (LOWORD(v4->__r_.__value_.__l.__data_) == 25959 && v4->__r_.__value_.__s.__data_[2] == 116)
      {
        uint64_t v10 = 2;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_49;
        }
        return v10;
      }
      if (LOWORD(v4->__r_.__value_.__l.__data_) == 25971 && v4->__r_.__value_.__s.__data_[2] == 116)
      {
        uint64_t v10 = 1;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          return v10;
        }
        goto LABEL_49;
      }
      int data_low = LOWORD(v4->__r_.__value_.__l.__data_);
      int v8 = v4->__r_.__value_.__s.__data_[2];
      if (data_low == 28528 && v8 == 112)
      {
        uint64_t v10 = 4;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          return v10;
        }
        goto LABEL_49;
      }
      break;
  }
  uint64_t v10 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_49;
  }
  return v10;
}

void xpc::dyn_cast_or_default(xpc_object_t *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  if (MEMORY[0x192FEE1B0](*a1) == MEMORY[0x1E4F145F0])
  {
    string_ptr = (char *)xpc_string_get_string_ptr(*a1);
    size_t length = xpc_string_get_length(*a1);
    std::string::basic_string[abi:ne180100](a3, string_ptr, length);
  }
  else if (*(char *)(a2 + 23) < 0)
  {
    int v8 = *(const std::string::value_type **)a2;
    std::string::size_type v9 = *(void *)(a2 + 8);
    std::string::__init_copy_ctor_external(a3, v8, v9);
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a3->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
  }
}

BOOL ctu::RestModuleState::handleNotifyMessage(ctu::RestModuleState *this, xpc_object_t *a2, void **a3)
{
  memset(&__p, 170, sizeof(__p));
  memset(v10, 0, sizeof(v10));
  xpc::dyn_cast_or_default(a2, (uint64_t)v10, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = __p.__r_.__value_.__l.__size_;
  }
  if (!size)
  {
    BOOL v7 = 0;
    if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) == 0) {
      return v7;
    }
    goto LABEL_9;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  BOOL v7 = ctu::RestModuleState::handleNotifyMessage((uint64_t)this, p_p, size, a3);
  if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_9:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
  return v7;
}

void sub_192049398(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL ctu::RestModuleState::handleNotifyMessage(uint64_t a1, void *a2, size_t a3, void **a4)
{
  uint64_t v6 = (void ***)(a1 + 72);
  if (a2)
  {
    std::string::basic_string[abi:ne180100](__p, a2, a3);
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v14 = 0;
  }
  boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::function<void ()(xpc::object)>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::function<void ()(xpc::object)>>>>::find((uint64_t)&v15, v6, __p);
  uint64_t v7 = v15;
  if (SHIBYTE(v14) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v8 = *(void *)(a1 + 72) + 56 * *(void *)(a1 + 80);
  if (v7 != v8)
  {
    std::string::size_type v9 = *a4;
    xpc_object_t object = v9;
    if (v9) {
      xpc_retain(v9);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    uint64_t v10 = *(void *)(v7 + 48);
    if (!v10) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, xpc_object_t *))(*(void *)v10 + 48))(v10, &object);
    xpc_release(object);
  }
  return v7 != v8;
}

void sub_1920494A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

uint64_t boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>>::find(uint64_t result, void ***a2, void **a3)
{
  uint64_t v4 = (void *)result;
  *(void *)xpc_object_t result = 0xAAAAAAAAAAAAAAAALL;
  int v5 = *a2;
  uint64_t v6 = a2[1];
  if (v6)
  {
    uint64_t v8 = *a2;
    do
    {
      xpc_object_t result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v8[4 * ((unint64_t)v6 >> 1)], a3);
      if ((result & 0x80u) == 0)
      {
        uint64_t v6 = (void **)((unint64_t)v6 >> 1);
      }
      else
      {
        v8 += 4 * ((unint64_t)v6 >> 1) + 4;
        uint64_t v6 = (void **)((char *)v6 + ~((unint64_t)v6 >> 1));
      }
    }
    while (v6);
    int v5 = *a2;
    std::string::size_type v9 = a2[1];
  }
  else
  {
    std::string::size_type v9 = 0;
    uint64_t v8 = *a2;
  }
  *uint64_t v4 = v8;
  uint64_t v10 = &v5[4 * (void)v9];
  if (v8 != v10)
  {
    xpc_object_t result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, v8);
    if ((result & 0x80) != 0) {
      *uint64_t v4 = v10;
    }
  }
  return result;
}

uint64_t boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::function<void ()(xpc::object)>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::function<void ()(xpc::object)>>>>::find(uint64_t result, void ***a2, void **a3)
{
  uint64_t v4 = (void *)result;
  *(void *)xpc_object_t result = 0xAAAAAAAAAAAAAAAALL;
  int v5 = *a2;
  uint64_t v6 = a2[1];
  if (v6)
  {
    uint64_t v8 = *a2;
    do
    {
      xpc_object_t result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v8[7 * ((unint64_t)v6 >> 1)], a3);
      if ((result & 0x80u) == 0)
      {
        uint64_t v6 = (void **)((unint64_t)v6 >> 1);
      }
      else
      {
        v8 += 7 * ((unint64_t)v6 >> 1) + 7;
        uint64_t v6 = (void **)((char *)v6 + ~((unint64_t)v6 >> 1));
      }
    }
    while (v6);
    int v5 = *a2;
    std::string::size_type v9 = a2[1];
  }
  else
  {
    std::string::size_type v9 = 0;
    uint64_t v8 = *a2;
  }
  *uint64_t v4 = v8;
  uint64_t v10 = &v5[7 * (void)v9];
  if (v8 != v10)
  {
    xpc_object_t result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, v8);
    if ((result & 0x80) != 0) {
      *uint64_t v4 = v10;
    }
  }
  return result;
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, void **a2)
{
  size_t v2 = *((unsigned __int8 *)a1 + 23);
  size_t v3 = a1[1];
  if ((v2 & 0x80u) != 0)
  {
    a1 = (void *)*a1;
    size_t v2 = v3;
  }
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    int v5 = a2;
  }
  else {
    int v5 = *a2;
  }
  if (v4 >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  return std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(a1, v2, v5, v6);
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(const void *a1, size_t a2, void *__s2, size_t a4)
{
  if (a4 >= a2) {
    size_t v7 = a2;
  }
  else {
    size_t v7 = a4;
  }
  int v8 = memcmp(a1, __s2, v7);
  if (v8)
  {
    if ((v8 & 0x80000000) == 0) {
      return 1;
    }
  }
  else
  {
    if (a2 == a4) {
      return 0;
    }
    if (a2 >= a4) {
      return 1;
    }
  }
  return 255;
}

void *std::string::basic_string[abi:ne180100](void *__dst, void *__src, size_t __len)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    size_t v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = __len;
    size_t v6 = __dst;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __dst;
}

BOOL ctu::PropertyRestResource::handleRestMessage_SET(ctu::PropertyRestResource *this, ctu::RestResourceContext *a2, const ctu::PathView *a3)
{
  uint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v10 = v6;
  long long v11 = v6;
  long long v7 = *((_OWORD *)a3 + 1);
  v9[0] = *(_OWORD *)a3;
  v9[1] = v7;
  if (v10 == 6) {
    return 0;
  }
  if (v10 == 7) {
    return ctu::PropertyRestResource::handleMessage_Resource_SET((uint64_t)this, a2, a3, *((unsigned char **)&v10 + 1), v11, *((uint64_t *)&v11 + 1), v12);
  }
  return 1;
}

uint64_t anonymous namespace'::sParsePath(uint64_t result, void *a2)
{
  size_t v2 = (_DWORD *)result;
  *(void *)xpc_object_t result = 0xAAAAAAAA00000000;
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  unint64_t v3 = a2[3];
  if (!v3)
  {
    int v15 = 1;
    goto LABEL_50;
  }
  int v5 = (unsigned __int8 *)a2[2];
  if (v3 == 1)
  {
    int v6 = *v5;
    if (v6 == 42)
    {
      xpc_object_t result = ctu::PathView::advance((uint64_t)a2, 1);
      if (a2[3]) {
        return result;
      }
      int v15 = 6;
      goto LABEL_50;
    }
    if (v6 == 95)
    {
      xpc_object_t result = ctu::PathView::advance((uint64_t)a2, 1);
      uint64_t v7 = a2[3];
      if (v7)
      {
        size_t v8 = (int *)a2[2];
        if (v7 == 8)
        {
          if (*(void *)v8 != 0x7372656863746177) {
            return result;
          }
          xpc_object_t result = ctu::PathView::advance((uint64_t)a2, 1);
          if (a2[3]) {
            return result;
          }
          int v15 = 3;
        }
        else
        {
          if (v7 != 7) {
            return result;
          }
          int v9 = *v8;
          int v10 = *(int *)((char *)v8 + 3);
          if (v9 != 1668571511 || v10 != 1684367459) {
            return result;
          }
          xpc_object_t result = ctu::PathView::advance((uint64_t)a2, 1);
          uint64_t v12 = a2[3];
          if (v12)
          {
            if (v12 != 1) {
              return result;
            }
            if (*(unsigned char *)a2[2] != 95) {
              return result;
            }
            xpc_object_t result = ctu::PathView::advance((uint64_t)a2, 1);
            if (a2[3] != 8) {
              return result;
            }
            int v13 = (void *)a2[2];
            if (*v13 != 0x7372656863746177) {
              return result;
            }
            uint64_t v14 = (void *)(*a2 + a2[1]);
            int v15 = 5;
            if (v14 != v13 + 1 && (void *)((char *)v13 + 9) != v14) {
              return result;
            }
          }
          else
          {
            int v15 = 4;
          }
        }
      }
      else
      {
        int v15 = 2;
      }
LABEL_50:
      _DWORD *v2 = v15;
      return result;
    }
  }
  unint64_t v16 = 0;
  *(_DWORD *)xpc_object_t result = 7;
  while (v5[v16] != 64)
  {
    if (v3 == ++v16)
    {
      BOOL v17 = 0;
      unint64_t v18 = 0;
      unint64_t v19 = v3;
      goto LABEL_37;
    }
  }
  if (v16 >= v3) {
    unint64_t v19 = v3;
  }
  else {
    unint64_t v19 = v16;
  }
  if (v16 + 1 < v3) {
    unint64_t v20 = v16 + 1;
  }
  else {
    unint64_t v20 = v3;
  }
  xpc_object_t v21 = &v5[v20];
  unint64_t v18 = v3 - v20;
  BOOL v22 = v16 == -1;
  if (v16 == -1) {
    BOOL v17 = 0;
  }
  else {
    BOOL v17 = v21;
  }
  if (v22)
  {
    unint64_t v18 = 0;
    unint64_t v19 = v3;
  }
LABEL_37:
  *(void *)(result + 8) = v5;
  *(void *)(result + 16) = v19;
  *(void *)(result + 24) = v17;
  *(void *)(result + 32) = v18;
  if (!v19)
  {
LABEL_49:
    int v15 = 0;
    goto LABEL_50;
  }
  v23 = &v5[v3];
  v24 = (unsigned __int8 *)(*a2 + a2[1]);
  if (v24 != v23 && v23 + 1 != v24)
  {
    xpc_object_t result = ctu::PathView::advance((uint64_t)a2, 1);
    if (a2[3] == 1 && *(unsigned char *)a2[2] == 95)
    {
      xpc_object_t result = ctu::PathView::advance((uint64_t)a2, 1);
      uint64_t v26 = a2[3];
      if (!v26)
      {
        int v15 = 8;
        goto LABEL_50;
      }
      if (v26 == 8)
      {
        v27 = (void *)a2[2];
        if (*v27 == 0x7372656863746177)
        {
          v28 = (void *)(*a2 + a2[1]);
          int v15 = 9;
          if (v28 == v27 + 1 || (void *)((char *)v27 + 9) == v28) {
            goto LABEL_50;
          }
        }
      }
    }
    goto LABEL_49;
  }
  return result;
}

int *anonymous namespace'::sParsePath(int *result, void *a2)
{
  size_t v2 = result;
  *((void *)result + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
  *((void *)result + 2) = 0;
  *(void *)xpc_object_t result = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v3 = a2[3];
  if (!v3)
  {
    int v9 = 1;
    goto LABEL_16;
  }
  *xpc_object_t result = 3;
  uint64_t v6 = a2[1];
  int v5 = (unsigned char *)a2[2];
  *((void *)result + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v5;
  *((void *)result + 2) = v3;
  uint64_t v7 = (unsigned char *)(*a2 + v6);
  if (v7 != &v5[v3] && &v5[v3 + 1] != v7)
  {
    xpc_object_t result = (int *)ctu::PathView::advance((uint64_t)a2, 1);
    if (a2[3] != 8
      || (int v10 = (void *)a2[2], *v10 != 0x72656469766F7270)
      || (v11 = (void *)(*a2 + a2[1]), int v9 = 4, v11 != v10 + 1) && (void *)((char *)v10 + 9) != v11)
    {
      int v9 = 0;
    }
    goto LABEL_16;
  }
  if (v3 == 1 && *v5 == 42)
  {
    int v9 = 2;
LABEL_16:
    int *v2 = v9;
  }
  return result;
}

{
  int *v2;
  uint64_t v3;
  unsigned char *v5;
  int v6;
  unsigned char *v7;
  unsigned char *v8;
  int *v10;
  uint64_t v11;
  int v14;
  int v15;

  size_t v2 = result;
  *((void *)result + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
  *((void *)result + 2) = 0;
  *(void *)xpc_object_t result = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v3 = a2[3];
  if (!v3)
  {
    uint64_t v6 = 1;
    goto LABEL_28;
  }
  *xpc_object_t result = 3;
  int v5 = (unsigned char *)a2[2];
  *((void *)result + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v5;
  *((void *)result + 2) = v3;
  if (v3 == 1 && *v5 == 42)
  {
    uint64_t v6 = 2;
LABEL_28:
    int *v2 = v6;
    return result;
  }
  uint64_t v7 = &v5[v3];
  size_t v8 = (unsigned char *)(*a2 + a2[1]);
  if (v8 != v7 && v7 + 1 != v8)
  {
    xpc_object_t result = (int *)ctu::PathView::advance((uint64_t)a2, 1);
    int v10 = (int *)a2[2];
    long long v11 = a2[3];
    if (v11 == 8)
    {
      if (*(void *)v10 == 0x72656469766F7270)
      {
        uint64_t v6 = 7;
        goto LABEL_28;
      }
    }
    else if (v11 == 7)
    {
      if (*v10 == 1851880039 && *(int *)((char *)v10 + 3) == 1684370542)
      {
        uint64_t v6 = 4;
        goto LABEL_28;
      }
      if (*v10 == 1953063287 && *(int *)((char *)v10 + 3) == 1735289204)
      {
        uint64_t v6 = 6;
        goto LABEL_28;
      }
      uint64_t v14 = *v10;
      int v15 = *(int *)((char *)v10 + 3);
      if (v14 == 1870030194 && v15 == 1684368239)
      {
        uint64_t v6 = 5;
        goto LABEL_28;
      }
    }
    uint64_t v6 = 0;
    goto LABEL_28;
  }
  return result;
}

BOOL ctu::PropertyRestResource::handleMessage_Resource_SET(uint64_t a1, ctu::RestResourceContext *a2, const ctu::PathView *a3, unsigned char *a4, size_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (a7) {
    return a7 == 0;
  }
  (*(void (**)(xpc_object_t *__return_ptr, ctu::RestResourceContext *))(*(void *)a2 + 24))(&object, a2);
  if (a4) {
    std::string::basic_string[abi:ne180100](&__p, a4, a5);
  }
  else {
    memset(&__p, 0, sizeof(__p));
  }
  boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>>::find((uint64_t)&v24, (void ***)(a1 + 16), (void **)&__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (a4) {
      goto LABEL_7;
    }
  }
  else if (a4)
  {
LABEL_7:
    std::string::basic_string[abi:ne180100](&__p, a4, a5);
    goto LABEL_10;
  }
  memset(&__p, 0, sizeof(__p));
LABEL_10:
  BOOL v13 = ctu::PropertyRestResource::createIfNotPresent(a1, (uint64_t)&__p, &v24);
  BOOL v14 = v13;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!v13) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (v14) {
LABEL_14:
  }
    ctu::PropertyRestResource::sendResourcesNotification((ctu::PropertyRestResource *)a1, a2, a3);
LABEL_15:
  if (*(unsigned char *)(a1 + 8))
  {
    xpc_object_t v15 = object;
    if (object) {
      xpc_retain(object);
    }
    else {
      xpc_object_t v15 = xpc_null_create();
    }
    uint64_t v16 = *(void *)(v24 + 24);
    BOOL v17 = *(void **)(v16 + 24);
    *(void *)(v16 + 24) = v15;
    xpc_release(v17);
  }
  if (*((void *)a3 + 3))
  {
    unint64_t v18 = *(void **)a3;
    unint64_t v19 = *((void *)a3 + 2) - *(void *)a3;
    if (v19 > 1)
    {
      if (v19 - 1 >= *((void *)a3 + 1)) {
        size_t v20 = *((void *)a3 + 1);
      }
      else {
        size_t v20 = v19 - 1;
      }
    }
    else if (v19 >= *((void *)a3 + 1))
    {
      size_t v20 = *((void *)a3 + 1);
    }
    else
    {
      size_t v20 = *((void *)a3 + 2) - *(void *)a3;
    }
  }
  else
  {
    unint64_t v18 = *(void **)a3;
    size_t v20 = *((void *)a3 + 1);
  }
  memset(&__p, 170, sizeof(__p));
  if (v18) {
    std::string::basic_string[abi:ne180100](&__p, v18, v20);
  }
  else {
    memset(&__p, 0, sizeof(__p));
  }
  ctu::path_join_impl(&__p, a4, a5);
  xpc_object_t v21 = *(void **)(v24 + 24);
  v28 = 0;
  BOOL v22 = operator new(0x20uLL);
  *BOOL v22 = &unk_1EE2F4438;
  v22[1] = a2;
  v22[2] = &__p;
  void v22[3] = &object;
  v28 = v22;
  ctu::rest::WatchableRestResourceHelper::map(v21, (uint64_t)v27);
  std::__function::__value_func<void ()(ctu::RestResourceConnection const&)>::~__value_func[abi:ne180100](v27);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  xpc_release(object);
  return a7 == 0;
}

void sub_192049FAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
}

xpc_object_t ctu::DictRestResourceContext::getRestValue@<X0>(ctu::DictRestResourceContext *this@<X0>, void *a2@<X8>)
{
  v3[0] = *((void *)this + 1);
  v3[1] = "v";
  return xpc::dict::object_proxy::operator xpc::object((uint64_t)v3, a2);
}

void *std::__function::__value_func<void ()(ctu::RestResourceConnection const&)>::~__value_func[abi:ne180100](void *a1)
{
  size_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

BOOL ctu::PropertyRestResource::createIfNotPresent(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (char *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 16) + 32 * *(void *)(a1 + 24);
  uint64_t v5 = *a3;
  if (*a3 == v4)
  {
    if (*(unsigned char *)(a1 + 8))
    {
      int v9 = operator new(0x20uLL);
      *int v9 = 0u;
      v9[1] = 0u;
      *((void *)v9 + 3) = xpc_null_create();
    }
    else
    {
      int v9 = operator new(0x18uLL);
      *((void *)v9 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
      *((void *)v9 + 2) = 0;
      *(void *)int v9 = 0;
    }
    *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v10 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)v25 = v10;
    *(_OWORD *)&v25[16] = v10;
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v25, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)v25 = *(_OWORD *)a2;
      *(void *)&v25[16] = *(void *)(a2 + 16);
    }
    *(void *)&v25[24] = v9;
    uint64_t v11 = *(void *)(a1 + 16);
    unint64_t v12 = *(void *)(a1 + 24);
    uint64_t v13 = v11 + 32 * v12;
    while (v12)
    {
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(v11 + 32 * (v12 >> 1)), (void **)v25) & 0x80u) == 0)
      {
        v12 >>= 1;
      }
      else
      {
        v11 += 32 * (v12 >> 1) + 32;
        v12 += ~(v12 >> 1);
      }
    }
    if (v11 == v13
      || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v25, (void **)v11) & 0x80) != 0)
    {
      uint64_t v14 = *(void *)(a1 + 24);
      if (*(void *)(a1 + 32) == v14)
      {
        boost::container::vector<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::PropertyRestResourceState>>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::PropertyRestResourceState>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::PropertyRestResourceState>>>,boost::container::dtl::pair<std::string,std::unique_ptr<ctu::PropertyRestResourceState>>*,boost::container::dtl::pair<std::string,std::unique_ptr<ctu::PropertyRestResourceState>>>>(&v24, v3, (long long *)v11, (long long *)v25);
        uint64_t v11 = v24;
      }
      else
      {
        uint64_t v15 = *(void *)v3 + 32 * v14;
        if (v15 == v11)
        {
          long long v20 = *(_OWORD *)v25;
          *(void *)(v11 + 16) = *(void *)&v25[16];
          *(_OWORD *)uint64_t v11 = v20;
          memset(v25, 0, sizeof(v25));
          *(void *)(v15 + 24) = *(void *)&v25[24];
          ++*(void *)(a1 + 24);
        }
        else
        {
          uint64_t v16 = v15 - 32;
          *(_OWORD *)uint64_t v15 = *(_OWORD *)(v15 - 32);
          *(void *)(v15 - 32) = 0;
          *(void *)(v15 - 24) = 0;
          uint64_t v17 = *(void *)(v15 - 16);
          uint64_t v18 = *(void *)(v15 - 8);
          *(void *)(v15 - 16) = 0;
          *(void *)(v15 - 8) = 0;
          *(void *)(v15 + 16) = v17;
          *(void *)(v15 + 24) = v18;
          ++*(void *)(a1 + 24);
          if (v15 - 32 != v11)
          {
            do
            {
              uint64_t v19 = v16 - 32;
              boost::container::dtl::pair<std::string,std::unique_ptr<ctu::PropertyRestResourceState>>::operator=(v16, (long long *)(v16 - 32));
              uint64_t v16 = v19;
            }
            while (v19 != v11);
          }
          boost::container::dtl::pair<std::string,std::unique_ptr<ctu::PropertyRestResourceState>>::operator=(v11, (long long *)v25);
        }
      }
    }
    xpc_object_t v21 = *(void **)&v25[24];
    *(void *)&v25[24] = 0;
    if (v21)
    {
      BOOL v22 = boost::container::vector<std::weak_ptr<ctu::RestResourceConnection>,boost::container::new_allocator<std::weak_ptr<ctu::RestResourceConnection>>,void>::~vector(v21);
      operator delete(v22);
    }
    if ((v25[23] & 0x80000000) != 0) {
      operator delete(*(void **)v25);
    }
    *a3 = v11;
  }
  return v5 == v4;
}

void sub_19204A344(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  boost::container::dtl::value_destructor<boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::PropertyRestResourceState>>>,boost::container::dtl::pair<std::string,std::unique_ptr<ctu::PropertyRestResourceState>>>::~value_destructor((uint64_t *)va);
  _Unwind_Resume(a1);
}

void ctu::path_join_impl(std::string *this, unsigned char *__src, size_t __len)
{
  if (!__len) {
    return;
  }
  if (*__src == 47) {
    goto LABEL_3;
  }
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    if (size) {
      goto LABEL_10;
    }
LABEL_3:
    std::string::basic_string[abi:ne180100](__p, __src, __len);
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      operator delete(this->__r_.__value_.__l.__data_);
    }
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    this->__r_.__value_.__r.__words[2] = v11;
    return;
  }
  if (!*((unsigned char *)&this->__r_.__value_.__s + 23)) {
    goto LABEL_3;
  }
  std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
LABEL_10:
  if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v7 = this;
  }
  else {
    uint64_t v7 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  if (v7->__r_.__value_.__s.__data_[size - 1] != 47) {
    std::string::push_back(this, 47);
  }
  std::string::basic_string[abi:ne180100](__p, __src, __len);
  if (v11 >= 0) {
    size_t v8 = __p;
  }
  else {
    size_t v8 = (void **)__p[0];
  }
  if (v11 >= 0) {
    std::string::size_type v9 = HIBYTE(v11);
  }
  else {
    std::string::size_type v9 = (std::string::size_type)__p[1];
  }
  std::string::append(this, (const std::string::value_type *)v8, v9);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
}

void sub_19204A48C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__shared_ptr_emplace<ctu::rest::createAutoReplyWithAction(std::function<void ()(xpc::object)> &&)::AutoReplier,std::allocator<std::function<void ()(xpc::object)> &&>>::__on_zero_shared(uint64_t a1)
{
  if (*(void *)(a1 + 48))
  {
    xpc_object_t object = *(xpc_object_t *)(a1 + 56);
    *(void *)(a1 + 56) = xpc_null_create();
    uint64_t v2 = *(void *)(a1 + 48);
    if (!v2) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, xpc_object_t *))(*(void *)v2 + 48))(v2, &object);
    xpc_release(object);
    xpc_object_t object = 0;
  }
  xpc_release(*(xpc_object_t *)(a1 + 56));
  *(void *)(a1 + 56) = 0;
  return std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100]((void *)(a1 + 24));
}

void std::__function::__func<ctu::ReplyCallbackRestResourceContext::ReplyCallbackRestResourceContext(ctu::os::OSSharedRef<os_log_s>,xpc::dict const&,dispatch::queue const&,std::shared_ptr<ctu::RestResourceConnection> const&,std::function<void ()(xpc::object)>)::$_0,std::allocator<ctu::ReplyCallbackRestResourceContext::ReplyCallbackRestResourceContext(ctu::os::OSSharedRef<os_log_s>,xpc::dict const&,dispatch::queue const&,std::shared_ptr<ctu::RestResourceConnection> const&,std::function<void ()(xpc::object)>)::$_0>,void ()(xpc::object)>::operator()(uint64_t a1, void **a2)
{
  uint64_t v3 = *a2;
  uint64_t v6 = *a2;
  *a2 = xpc_null_create();
  ctu::rest::createReplyFromRequestWithValue((xpc_object_t *)(a1 + 8), (const xpc::dict *)&v6, &object);
  xpc_object_t v4 = object;
  xpc_object_t v8 = object;
  if (object) {
    xpc_retain(object);
  }
  else {
    xpc_object_t v8 = xpc_null_create();
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (!v5) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, xpc_object_t *))(*(void *)v5 + 48))(v5, &v8);
  xpc_release(v8);
  xpc_object_t v8 = 0;
  xpc_release(v4);
  xpc_release(v3);
}

void sub_19204A62C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  xpc_release(v12);
  _Unwind_Resume(a1);
}

uint64_t *dispatch::async<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0::operator() const(xpc::object)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0::operator() const(xpc::object)::{lambda(void)#1},std::default_delete<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0::operator() const(xpc::object)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v5 = a1;
  ctu::rest::createReplyFromRequestWithValue((xpc_object_t *)a1, (const xpc::dict *)(a1 + 8), &object);
  xpc_object_t v2 = object;
  xpc_object_t v7 = object;
  if (object) {
    xpc_retain(object);
  }
  else {
    xpc_object_t v7 = xpc_null_create();
  }
  uint64_t v3 = *(void *)(a1 + 40);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, xpc_object_t *))(*(void *)v3 + 48))(v3, &v7);
  xpc_release(v7);
  xpc_object_t v7 = 0;
  xpc_release(v2);
  return std::unique_ptr<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0::operator() const(xpc::object)::{lambda(void)#1},std::default_delete<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0::operator() const(xpc::object)::{lambda(void)#1}>>::~unique_ptr[abi:ne180100](&v5);
}

void sub_19204A724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
}

void ctu::rest::createReplyFromRequestWithValue(xpc_object_t *this@<X0>, const xpc::dict *a2@<X1>, void *a3@<X8>)
{
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  ctu::rest::createReplyFromRequest(this, a2, (_anonymous_namespace_ *)&v7);
  if (MEMORY[0x192FEE1B0](v7) == MEMORY[0x1E4F14590])
  {
    ctu::rest::updateReplyValue((uint64_t)&v7, (xpc_object_t *)a2);
    *a3 = v7;
    xpc_object_t v6 = xpc_null_create();
    unint64_t v7 = (unint64_t)v6;
  }
  else
  {
    *a3 = xpc_null_create();
    xpc_object_t v6 = (xpc_object_t)v7;
  }
  xpc_release(v6);
}

void sub_19204A7EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void ctu::rest::createReplyFromRequest(xpc_object_t *this@<X0>, const xpc::dict *a2@<X1>, _anonymous_namespace_ *a3@<X8>)
{
  uint64_t v5 = MEMORY[0x192FEE1B0](*this, a2);
  uint64_t v6 = MEMORY[0x1E4F14590];
  if (v5 != MEMORY[0x1E4F14590])
  {
    *(void *)a3 = xpc_null_create();
    return;
  }
  *(void *)a3 = 0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v8 = v7;
  if (v7)
  {
    *(void *)a3 = v7;
  }
  else
  {
    xpc_object_t v8 = xpc_null_create();
    *(void *)a3 = v8;
    if (!v8)
    {
      xpc_object_t v9 = xpc_null_create();
      xpc_object_t v8 = 0;
      goto LABEL_10;
    }
  }
  if (MEMORY[0x192FEE1B0](v8) != v6)
  {
    xpc_object_t v9 = xpc_null_create();
LABEL_10:
    *(void *)a3 = v9;
    goto LABEL_11;
  }
  xpc_retain(v8);
LABEL_11:
  xpc_release(v8);
}

void sub_19204A900(_Unwind_Exception *a1)
{
  xpc::dict::~dict(v1);
  _Unwind_Resume(a1);
}

void anonymous namespace'::copyKeyIfPresent(_anonymous_namespace_ *this, xpc_object_t *a2, const xpc::dict *key, const char *a4)
{
  v8[0] = a2;
  v8[1] = key;
  if (xpc_dictionary_get_value(*a2, (const char *)key))
  {
    v6[0] = this;
    v6[1] = key;
    xpc::dict::object_proxy::operator=((uint64_t)v6, (uint64_t)v8, &object);
    xpc_release(object);
  }
}

void xpc::dict::object_proxy::operator=(uint64_t a1@<X0>, uint64_t a2@<X1>, xpc_object_t *a3@<X8>)
{
  xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc::dict::object_proxy::operator xpc::object(a2, &object);
  xpc_object_t v5 = object;
  if (object) {
    xpc_retain(object);
  }
  else {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc::dict::object_proxy::operator=(a1, &v5, a3);
  xpc_release(v5);
  xpc_object_t v5 = 0;
  xpc_release(object);
}

void ctu::rest::updateReplyValue(uint64_t a1, xpc_object_t *a2)
{
  uint64_t v4 = MEMORY[0x192FEE1B0](*a2);
  xpc_object_t v5 = *a2;
  if (v4 == MEMORY[0x1E4F145A8])
  {
    string = xpc_dictionary_get_string(v5, (const char *)*MEMORY[0x1E4F14530]);
    xpc_object_t object = xpc_string_create(string);
    if (!object) {
      xpc_object_t object = xpc_null_create();
    }
    uint64_t v9 = a1;
    long long v10 = "e";
    xpc::dict::object_proxy::operator=((uint64_t)&v9, &object, &v12);
    xpc_release(v12);
    xpc_object_t v12 = 0;
    xpc_release(object);
  }
  else
  {
    xpc_object_t v7 = *a2;
    if (v5) {
      xpc_retain(v5);
    }
    else {
      xpc_object_t v7 = xpc_null_create();
    }
    uint64_t v9 = a1;
    long long v10 = "v";
    xpc::dict::object_proxy::operator=((uint64_t)&v9, &v7, &v8);
    xpc_release(v8);
    xpc_object_t v8 = 0;
    xpc_release(v7);
  }
}

void std::__function::__func<ctu::RestDispatchListener::handleClientMessageWithReply(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict,std::function<void ()(xpc::object)>)::$_0::operator() const(void)::{lambda(xpc::object)#1},std::allocator<ctu::RestDispatchListener::handleClientMessageWithReply(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict,std::function<void ()(xpc::object)>)::$_0::operator() const(void)::{lambda(xpc::object)#1}>,void ()(xpc::object)>::operator()(uint64_t a1, void **a2)
{
  uint64_t v3 = *a2;
  *a2 = xpc_null_create();
  xpc_object_t object = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, xpc_object_t *))(*(void *)v4 + 48))(v4, &object);
  xpc_release(object);
  xpc_release(v3);
}

void sub_19204ABC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

void std::__function::__func<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_1,std::allocator<std::function<void ()(xpc::object)> &&>,void ()(xpc::object)>::operator()(uint64_t a1, void **a2)
{
  v9[4] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  *a2 = xpc_null_create();
  xpc_object_t object = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)v9, a1 + 24);
  uint64_t v4 = *(NSObject **)(a1 + 16);
  xpc_object_t v5 = operator new(0x28uLL);
  *xpc_object_t v5 = object;
  xpc_object_t object = xpc_null_create();
  std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)(v5 + 1), (uint64_t)v9);
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  dispatch_async_f(v4, v5, (dispatch_function_t)dispatch::async<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_1::operator() const(xpc::object)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_1::operator() const(xpc::object)::{lambda(void)#1},std::default_delete<std::unique_ptr>>)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_1::operator() const(xpc::object)::{lambda(void)#1},std::default_delete<$_1>>::~unique_ptr[abi:ne180100](&v6);
  std::unique_ptr<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_1::operator() const(xpc::object)::{lambda(void)#1},std::default_delete<$_1>>::~unique_ptr[abi:ne180100](&v7);
  std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100](v9);
  xpc_release(object);
  xpc_release(v3);
}

void sub_19204ACF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t *std::unique_ptr<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_1::operator() const(xpc::object)::{lambda(void)#1},std::default_delete<$_1>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100]((void *)(v2 + 8));
    xpc_release(*(xpc_object_t *)v2);
    operator delete((void *)v2);
  }
  return a1;
}

void std::__function::__func<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0,std::allocator<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0>,void ()(xpc::object)>::operator()(uint64_t a1, void **a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = v4;
  *a2 = xpc_null_create();
  ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)const::$_0::operator()(a1 + 8, &v4);
  xpc_release(v3);
}

void sub_19204ADEC(_Unwind_Exception *a1)
{
  xpc_release(v1);
  _Unwind_Resume(a1);
}

void ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)const::$_0::operator()(uint64_t a1, void **a2)
{
  v12[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void **)a1;
  xpc_object_t v10 = v4;
  if (v4) {
    xpc_retain(v4);
  }
  else {
    xpc_object_t v10 = xpc_null_create();
  }
  xpc_object_t v5 = *a2;
  xpc_object_t object = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)v12, a1 + 16);
  uint64_t v6 = *(NSObject **)(a1 + 8);
  uint64_t v7 = operator new(0x30uLL);
  *uint64_t v7 = v10;
  xpc_object_t v10 = xpc_null_create();
  v7[1] = object;
  xpc_object_t object = xpc_null_create();
  std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)(v7 + 2), (uint64_t)v12);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  dispatch_async_f(v6, v7, (dispatch_function_t)dispatch::async<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0::operator() const(xpc::object)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0::operator() const(xpc::object)::{lambda(void)#1},std::default_delete<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0::operator() const(xpc::object)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0::operator() const(xpc::object)::{lambda(void)#1},std::default_delete<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0::operator() const(xpc::object)::{lambda(void)#1}>>::~unique_ptr[abi:ne180100](&v8);
  std::unique_ptr<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0::operator() const(xpc::object)::{lambda(void)#1},std::default_delete<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0::operator() const(xpc::object)::{lambda(void)#1}>>::~unique_ptr[abi:ne180100](&v9);
  std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100](v12);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v10);
}

void sub_19204AF3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t a12, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t *std::unique_ptr<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0::operator() const(xpc::object)::{lambda(void)#1},std::default_delete<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0::operator() const(xpc::object)::{lambda(void)#1}>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100]((void *)(v2 + 16));
    xpc_release(*(xpc_object_t *)(v2 + 8));
    *(void *)(v2 + 8) = 0;
    xpc_release(*(xpc_object_t *)v2);
    operator delete((void *)v2);
  }
  return a1;
}

void *std::__function::__func<ctu::RestModuleState::sendRequest(std::string &&,xpc::object &&,std::function<void ()(xpc)> &&)::$_0,std::allocator<std::function<void ()(xpc)>>,xpc::object &&>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  void *v2 = &unk_1EE2F4388;
  std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_19204B040(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,std::weak_ptr<void const>,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_0,std::allocator<std::function<void ()(xpc::object)> &&>,void ()(xpc::object)>::__clone(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  uint64_t v2 = operator new(0x38uLL);
  void *v2 = &unk_1EE2F4B18;
  std::__compressed_pair_elem<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,std::weak_ptr<void const>,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<std::function<void ()(xpc::object)> && const&,0ul>(v2 + 1, v1);
  return v2;
}

void sub_19204B0A8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__compressed_pair_elem<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,std::weak_ptr<void const>,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<std::function<void ()(xpc::object)> && const&,0ul>(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  return a1;
}

void sub_19204B104(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;

  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  std::__shared_weak_count *v3 = 0;
  return a1;
}

void std::__function::__func<ctu::DispatchRestResourceConnection::sendWithReply(xpc::dict,dispatch_queue_s *,void({block_pointer})(void *))::$_0,std::allocator<ctu::DispatchRestResourceConnection::sendWithReply(xpc::dict,dispatch_queue_s *,void({block_pointer})(void *))::$_0>,void ()(xpc::object)>::operator()(uint64_t a1, void **a2)
{
  uint64_t v3 = *a2;
  *a2 = xpc_null_create();
  (*(void (**)(void))(*(void *)(a1 + 8) + 16))();
  xpc_release(v3);
}

void sub_19204B20C(_Unwind_Exception *a1)
{
  xpc_release(v1);
  _Unwind_Resume(a1);
}

void ___ZN3ctu32ReplyCallbackRestResourceContext7sendGetERKNS_22RestResourceConnectionERKN3xpc6objectES7_S7_RKNSt3__110shared_ptrIS5_EE_block_invoke(uint64_t a1, xpc_object_t object)
{
  uint64_t v3 = MEMORY[0x1E4F14590];
  if (object)
  {
    xpc_object_t v4 = object;
    xpc_retain(object);
    xpc_object_t v10 = v4;
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t v10 = v4;
    if (!v4)
    {
      xpc_object_t v5 = xpc_null_create();
      xpc_object_t v4 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x192FEE1B0](v4) == v3)
  {
    xpc_retain(v4);
    goto LABEL_9;
  }
  xpc_object_t v5 = xpc_null_create();
LABEL_8:
  xpc_object_t v10 = v5;
LABEL_9:
  xpc_release(v4);
  uint64_t v6 = v10;
  if (MEMORY[0x192FEE1B0](v10) == v3)
  {
    ctu::rest::getReplyValue(&v10, &v9);
    uint64_t v7 = *(void ***)(a1 + 32);
    uint64_t v8 = *v7;
    *uint64_t v7 = v9;
    uint64_t v9 = v8;
    xpc_release(v8);
    uint64_t v9 = 0;
    uint64_t v6 = v10;
  }
  xpc_release(v6);
}

void sub_19204B318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

xpc_object_t ctu::rest::getReplyValue@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  if (MEMORY[0x192FEE1B0](*a1) == MEMORY[0x1E4F14590])
  {
    v5[0] = a1;
    v5[1] = "v";
    return xpc::dict::object_proxy::operator xpc::object((uint64_t)v5, a2);
  }
  else
  {
    xpc_object_t result = xpc_null_create();
    *a2 = result;
  }
  return result;
}

xpc_object_t *std::__function::__func<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_1,std::allocator<std::function<void ()(xpc::object)> &&>,void ()(xpc::object)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = (xpc_object_t *)operator new(0x38uLL);
  xpc_object_t *v2 = &unk_1EE2F4B70;
  std::__compressed_pair_elem<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<std::function<void ()(xpc::object)> && const&,0ul>(v2 + 1, v1);
  return v2;
}

void sub_19204B3F4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

xpc_object_t *std::__compressed_pair_elem<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<std::function<void ()(xpc::object)> && const&,0ul>(xpc_object_t *a1, uint64_t a2)
{
  xpc_object_t v4 = *(xpc_object_t *)a2;
  *a1 = *(xpc_object_t *)a2;
  if (v4) {
    xpc_retain(v4);
  }
  else {
    *a1 = xpc_null_create();
  }
  xpc_object_t v5 = *(NSObject **)(a2 + 8);
  a1[1] = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)(a1 + 2), a2 + 16);
  return a1;
}

void sub_19204B468(_Unwind_Exception *a1)
{
  uint64_t v3 = *(NSObject **)(v1 + 8);
  if (v3) {
    dispatch_release(v3);
  }
  xpc_release(*(xpc_object_t *)v1);
  *(void *)uint64_t v1 = 0;
  _Unwind_Resume(a1);
}

void ctu::rest::RestDispatchConnector::handleMessageWithReply(void *a1, void **a2, NSObject **a3, uint64_t a4)
{
  v35[5] = *MEMORY[0x1E4F143B8];
  unint64_t v30 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v29 = v8;
  *(_OWORD *)xpc_object_t object = v8;
  uint64_t v9 = *a2;
  xpc_object_t v27 = v9;
  if (v9) {
    xpc_retain(v9);
  }
  else {
    xpc_object_t v27 = xpc_null_create();
  }
  xpc_object_t v10 = *a3;
  object[0] = v10;
  if (v10) {
    dispatch_retain(v10);
  }
  std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)&object[1], a4);
  int64_t v11 = *a2;
  v23[0] = a1;
  v23[1] = v11;
  *a2 = xpc_null_create();
  xpc_object_t v24 = v27;
  xpc_object_t v27 = xpc_null_create();
  dispatch_object_t v25 = object[0];
  if (object[0]) {
    dispatch_retain(object[0]);
  }
  std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)v26, (uint64_t)&object[1]);
  if (!a1[7]) {
    _rest_api_misuse("Attempted to dispatch on a connector with no queue!");
  }
  xpc_object_t v12 = (std::__shared_weak_count *)a1[2];
  if (!v12 || (v13 = a1[1], (uint64_t v14 = std::__shared_weak_count::lock(v12)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v15 = v14;
  *(void *)&long long v31 = v13;
  *((void *)&v31 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v14;
  atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  *(_OWORD *)v32 = *(_OWORD *)v23;
  v23[1] = xpc_null_create();
  xpc_object_t v33 = v24;
  xpc_object_t v24 = xpc_null_create();
  dispatch_object_t v34 = v25;
  if (v25) {
    dispatch_retain(v25);
  }
  std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)v35, (uint64_t)v26);
  uint64_t v16 = a1[7];
  uint64_t v17 = operator new(0x50uLL);
  long long v18 = v31;
  long long v19 = *(_OWORD *)v32;
  long long v31 = 0uLL;
  *uint64_t v17 = v18;
  v17[1] = v19;
  v32[1] = xpc_null_create();
  *((void *)v17 + 4) = v33;
  xpc_object_t v33 = xpc_null_create();
  long long v20 = v34;
  *((void *)v17 + 5) = v34;
  if (v20) {
    dispatch_retain(v20);
  }
  std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)(v17 + 3), (uint64_t)v35);
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  dispatch_async_f(v16, v17, (dispatch_function_t)dispatch::async<void ctu::rest::RestDispatchConnector::execute<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_1>(ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_1 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_1,std::default_delete<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_1>>)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<void ctu::rest::RestDispatchConnector::execute<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_1>(ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_1 &&)::{lambda(void)#1},std::default_delete<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_1 &&>>::~unique_ptr[abi:ne180100](&v21);
  std::unique_ptr<void ctu::rest::RestDispatchConnector::execute<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_1>(ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_1 &&)::{lambda(void)#1},std::default_delete<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_1 &&>>::~unique_ptr[abi:ne180100](&v22);
  std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100](v35);
  if (v34) {
    dispatch_release(v34);
  }
  xpc_release(v33);
  xpc_object_t v33 = 0;
  xpc_release(v32[1]);
  v32[1] = 0;
  if (*((void *)&v31 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v31 + 1));
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100](v26);
  if (v25) {
    dispatch_release(v25);
  }
  xpc_release(v24);
  xpc_object_t v24 = 0;
  xpc_release(v23[1]);
  std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100](&object[1]);
  if (object[0]) {
    dispatch_release(object[0]);
  }
  xpc_release(v27);
}

void sub_19204B734(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void *ctu::ReplyCallbackRestResourceContext::ReplyCallbackRestResourceContext(void *a1, void *a2, uint64_t a3, NSObject **a4, void *a5, uint64_t a6)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  *a1 = &unk_1EE2F7280;
  a1[1] = a3;
  xpc_object_t v10 = *a4;
  a1[2] = *a4;
  if (v10) {
    dispatch_retain(v10);
  }
  a1[3] = *a5;
  uint64_t v11 = a5[1];
  a1[4] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  a1[9] = 0;
  a1[8] = 0;
  xpc_object_t v12 = a1 + 8;
  a1[9] = *a2;
  *a2 = 0;
  uint64_t v13 = *(void **)a1[1];
  xpc_object_t v18 = v13;
  if (v13) {
    xpc_retain(v13);
  }
  else {
    xpc_object_t v18 = xpc_null_create();
  }
  std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)v20, a6);
  xpc_object_t object = v18;
  uint64_t v14 = a1 + 5;
  xpc_object_t v19 = xpc_null_create();
  std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)v22, (uint64_t)v20);
  xpc_object_t v24 = 0;
  uint64_t v15 = operator new(0x30uLL);
  xpc_object_t v16 = object;
  *uint64_t v15 = &unk_1EE2F8450;
  v15[1] = v16;
  xpc_object_t object = xpc_null_create();
  std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)(v15 + 2), (uint64_t)v22);
  xpc_object_t v24 = v15;
  if (a1 + 5 != v23)
  {
    if ((void *)*v12 == v14)
    {
      (*(void (**)(void *, void *))(*v14 + 24))(a1 + 5, v23);
      (*(void (**)(void))(*(void *)*v12 + 32))();
      void *v12 = v24;
      xpc_object_t v24 = v23;
    }
    else
    {
      xpc_object_t v24 = (void *)*v12;
      void *v12 = v15;
    }
  }
  std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100](v23);
  std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100](v22);
  xpc_release(object);
  std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100](v20);
  xpc_release(v19);
  return a1;
}

void sub_19204B9DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void *std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<ctu::DispatchRestResourceConnection::sendWithReply(xpc::dict,dispatch_queue_s *,void({block_pointer})(void *))::$_0,std::allocator<ctu::DispatchRestResourceConnection::sendWithReply(xpc::dict,dispatch_queue_s *,void({block_pointer})(void *))::$_0>,void ()(xpc::object)>::destroy(uint64_t a1)
{
}

void std::__function::__alloc_func<ctu::DispatchRestResourceConnection::sendWithReply(xpc::dict,dispatch_queue_s *,void({block_pointer})(void *))::$_0,std::allocator<ctu::DispatchRestResourceConnection::sendWithReply(xpc::dict,dispatch_queue_s *,void({block_pointer})(void *))::$_0>,void ()(xpc::object)>::destroy[abi:ne180100](const void *a1)
{
  if (a1) {
    _Block_release(a1);
  }
}

void *std::__compressed_pair_elem<ctu::DispatchRestResourceConnection::sendWithReply(xpc::dict,dispatch_queue_s *,void({block_pointer})(void *))::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<ctu::DispatchRestResourceConnection::sendWithReply(xpc::dict,dispatch_queue_s *,void({block_pointer})(void *))::$_0 const&,0ul>(void *a1, void **a2)
{
  uint64_t v3 = *a2;
  if (*a2) {
    uint64_t v3 = _Block_copy(v3);
  }
  *a1 = v3;
  return a1;
}

void *std::__function::__func<ctu::DispatchRestResourceConnection::sendWithReply(xpc::dict,dispatch_queue_s *,void({block_pointer})(void *))::$_0,std::allocator<ctu::DispatchRestResourceConnection::sendWithReply(xpc::dict,dispatch_queue_s *,void({block_pointer})(void *))::$_0>,void ()(xpc::object)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE2F8558;
  return std::__compressed_pair_elem<ctu::DispatchRestResourceConnection::sendWithReply(xpc::dict,dispatch_queue_s *,void({block_pointer})(void *))::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<ctu::DispatchRestResourceConnection::sendWithReply(xpc::dict,dispatch_queue_s *,void({block_pointer})(void *))::$_0 const&,0ul>(a2 + 1, (void **)(a1 + 8));
}

void std::__function::__func<ctu::ReplyCallbackRestResourceContext::ReplyCallbackRestResourceContext(ctu::os::OSSharedRef<os_log_s>,xpc::dict const&,dispatch::queue const&,std::shared_ptr<ctu::RestResourceConnection> const&,std::function<void ()(xpc::object)>)::$_0,std::allocator<ctu::ReplyCallbackRestResourceContext::ReplyCallbackRestResourceContext(ctu::os::OSSharedRef<os_log_s>,xpc::dict const&,dispatch::queue const&,std::shared_ptr<ctu::RestResourceConnection> const&,std::function<void ()(xpc::object)>)::$_0>,void ()(xpc::object)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<ctu::ReplyCallbackRestResourceContext::ReplyCallbackRestResourceContext(ctu::os::OSSharedRef<os_log_s>,xpc::dict const&,dispatch::queue const&,std::shared_ptr<ctu::RestResourceConnection> const&,std::function<void ()(xpc::object)>)::$_0,std::allocator<ctu::ReplyCallbackRestResourceContext::ReplyCallbackRestResourceContext(ctu::os::OSSharedRef<os_log_s>,xpc::dict const&,dispatch::queue const&,std::shared_ptr<ctu::RestResourceConnection> const&,std::function<void ()(xpc::object)>)::$_0>,void ()(xpc::object)>::destroy[abi:ne180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

void std::__function::__alloc_func<ctu::ReplyCallbackRestResourceContext::ReplyCallbackRestResourceContext(ctu::os::OSSharedRef<os_log_s>,xpc::dict const&,dispatch::queue const&,std::shared_ptr<ctu::RestResourceConnection> const&,std::function<void ()(xpc::object)>)::$_0,std::allocator<ctu::ReplyCallbackRestResourceContext::ReplyCallbackRestResourceContext(ctu::os::OSSharedRef<os_log_s>,xpc::dict const&,dispatch::queue const&,std::shared_ptr<ctu::RestResourceConnection> const&,std::function<void ()(xpc::object)>)::$_0>,void ()(xpc::object)>::destroy[abi:ne180100](uint64_t a1)
{
  *(void *)a1 = 0;
}

void std::__function::__func<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,std::weak_ptr<void const>,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_0,std::allocator<std::function<void ()(xpc::object)> &&>,void ()(xpc::object)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,std::weak_ptr<void const>,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_0,std::allocator<std::function<void ()(xpc::object)> &&>,void ()(xpc::object)>::destroy[abi:ne180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

void std::__function::__alloc_func<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,std::weak_ptr<void const>,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_0,std::allocator<std::function<void ()(xpc::object)> &&>,void ()(xpc::object)>::destroy[abi:ne180100](uint64_t a1)
{
  std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100]((void *)(a1 + 16));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void std::__function::__func<ctu::RestModuleState::sendRequest(std::string &&,xpc::object &&,std::function<void ()(xpc)> &&)::$_0,std::allocator<std::function<void ()(xpc)>>,xpc::object &&>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

uint64_t *std::unique_ptr<void ctu::rest::RestDispatchConnector::execute<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_1>(ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_1 &&)::{lambda(void)#1},std::default_delete<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_1 &&>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100]((void *)(v2 + 48));
    uint64_t v3 = *(NSObject **)(v2 + 40);
    if (v3) {
      dispatch_release(v3);
    }
    xpc_release(*(xpc_object_t *)(v2 + 32));
    *(void *)(v2 + 32) = 0;
    xpc_release(*(xpc_object_t *)(v2 + 24));
    *(void *)(v2 + 24) = 0;
    xpc_object_t v4 = *(std::__shared_weak_count **)(v2 + 8);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    operator delete((void *)v2);
  }
  return a1;
}

void std::__function::__func<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_1,std::allocator<std::function<void ()(xpc::object)> &&>,void ()(xpc::object)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_1,std::allocator<std::function<void ()(xpc::object)> &&>,void ()(xpc::object)>::destroy[abi:ne180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

void std::__function::__alloc_func<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_1,std::allocator<std::function<void ()(xpc::object)> &&>,void ()(xpc::object)>::destroy[abi:ne180100](uint64_t a1)
{
  std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100]((void *)(a1 + 16));
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  xpc_release(*(xpc_object_t *)a1);
  *(void *)a1 = 0;
}

void std::__function::__func<ctu::RestDispatchListener::handleClientMessageWithReply(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict,std::function<void ()(xpc::object)>)::$_0::operator() const(void)::{lambda(xpc::object)#1},std::allocator<ctu::RestDispatchListener::handleClientMessageWithReply(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict,std::function<void ()(xpc::object)>)::$_0::operator() const(void)::{lambda(xpc::object)#1}>,void ()(xpc::object)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

void std::__function::__func<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0,std::allocator<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0>,void ()(xpc::object)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0,std::allocator<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0>,void ()(xpc::object)>::destroy[abi:ne180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

void std::__function::__alloc_func<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0,std::allocator<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0>,void ()(xpc::object)>::destroy[abi:ne180100](uint64_t a1)
{
  std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100]((void *)(a1 + 16));
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  xpc_release(*(xpc_object_t *)a1);
  *(void *)a1 = 0;
}

void std::__function::__func<ctu::RestModuleState::getValueOnce(std::string &&,std::function<void ()(xpc::object)> &&)::$_0,std::allocator<std::function<void ()(xpc::object)> &>,xpc::object>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

void *std::__function::__func<ctu::RestModuleState::getValueOnce(std::string &&,std::function<void ()(xpc::object)> &&)::$_0,std::allocator<std::function<void ()(xpc::object)> &>,xpc::object>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  void *v2 = &unk_1EE2F8348;
  std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_19204BF54(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t xpc::is_logically_false(xpc_object_t *a1)
{
  if (MEMORY[0x192FEE1B0](*a1) == MEMORY[0x1E4F145D8]) {
    return 1;
  }
  uint64_t v2 = MEMORY[0x192FEE1B0](*a1);
  xpc_object_t v3 = *a1;
  if (v2 == MEMORY[0x1E4F145C0])
  {
    uint64_t value = xpc_int64_get_value(v3);
  }
  else
  {
    uint64_t v4 = MEMORY[0x192FEE1B0](v3);
    xpc_object_t v5 = *a1;
    if (v4 == MEMORY[0x1E4F145F8])
    {
      uint64_t value = xpc_uint64_get_value(v5);
    }
    else
    {
      uint64_t v6 = MEMORY[0x192FEE1B0](v5);
      xpc_object_t v7 = *a1;
      if (v6 == MEMORY[0x1E4F14570]) {
        return !xpc_BOOL_get_value(v7);
      }
      uint64_t v8 = MEMORY[0x192FEE1B0](v7);
      xpc_object_t v9 = *a1;
      if (v8 == MEMORY[0x1E4F14580])
      {
        uint64_t value = xpc_data_get_length(v9);
      }
      else
      {
        uint64_t v10 = MEMORY[0x192FEE1B0](v9);
        xpc_object_t v11 = *a1;
        if (v10 == MEMORY[0x1E4F145F0])
        {
          uint64_t value = xpc_string_get_length(v11);
        }
        else
        {
          uint64_t v12 = MEMORY[0x192FEE1B0](v11);
          xpc_object_t v13 = *a1;
          if (v12 == MEMORY[0x1E4F14568])
          {
            uint64_t value = xpc_array_get_count(v13);
          }
          else
          {
            if (MEMORY[0x192FEE1B0](v13) != MEMORY[0x1E4F14590]) {
              return 0;
            }
            uint64_t value = xpc_dictionary_get_count(*a1);
          }
        }
      }
    }
  }
  return value == 0;
}

void ctu::RestModule::sendRequest(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void ctu::LogMessageBuffer::~LogMessageBuffer(ctu::LogMessageBuffer *this)
{
  xpc_object_t v3 = (void **)((char *)this + 32);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    xpc_object_t v3 = **a1;
    operator delete(v3);
  }
}

void ctu::RestModule::sendEvent(uint64_t *a1, uint64_t a2, uint64_t a3)
{
}

uint64_t xpc::bridge@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = _CFXPCCreateCFObjectFromXPCObject();
  *a1 = result;
  return result;
}

ctu::LogMessageBuffer *ctu::LogMessageBuffer::operator=(ctu::LogMessageBuffer *a1, ctu::LogMessageBuffer *a2)
{
  return a1;
}

__n128 ctu::LogMessageBuffer::swap(ctu::LogMessageBuffer *this, ctu::LogMessageBuffer *a2)
{
  uint64_t v2 = *(void *)this;
  __n128 result = *(__n128 *)((char *)this + 8);
  long long v4 = *(_OWORD *)a2;
  *((void *)this + 2) = *((void *)a2 + 2);
  *(_OWORD *)this = v4;
  *(void *)a2 = v2;
  *(__n128 *)((char *)a2 + 8) = result;
  uint64_t v5 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  uint64_t v6 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v6;
  uint64_t v7 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v7;
  uint64_t v8 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v8;
  return result;
}

void __destroy_helper_block_e8_32c39_ZTSNSt3__110shared_ptrIN3xpc6objectEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void ctu::cf::dict_adapter::~dict_adapter(ctu::cf::dict_adapter *this)
{
  *(void *)this = &unk_1EE2F7198;
  uint64_t v1 = (const void *)*((void *)this + 1);
  if (v1) {
    CFRelease(v1);
  }
}

{
  void *v1;
  uint64_t vars8;

  ctu::cf::dict_adapter::~dict_adapter(this);

  operator delete(v1);
}

void xpc::object::to_string(void **this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v2[0] = a2;
  v2[1] = (std::string *)0xAAAAAAAA00000000;
}

void sub_19204C300(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN12_GLOBAL__N_123XpcDescriptionGenerator19describe_dictionaryEPv_block_invoke(uint64_t a1, const char *a2, void *a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  std::string::push_back(*(std::string **)v5, 10);
  std::string::append(*(std::string **)v5, *(int *)(v5 + 8), 9);
  std::string::push_back(*(std::string **)v5, 34);
  size_t v6 = strlen(a2);
  std::string::append(*(std::string **)v5, a2, v6);
  std::string::append(*(std::string **)v5, "\": ", 3uLL);
  std::string::push_back(*(std::string **)v5, 44);
  return 1;
}

void anonymous namespace'::XpcDescriptionGenerator::describe(std::string **this, void *a2)
{
  uint64_t v4 = MEMORY[0x192FEE1B0](a2);
  if (v4 == MEMORY[0x1E4F14590])
  {
    std::string::push_back(*this, 123);
    if (xpc_dictionary_get_count(a2))
    {
      ++*((_DWORD *)this + 2);
      applier.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
      applier.__r_.__value_.__l.__size_ = 0x40000000;
      applier.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN12_GLOBAL__N_123XpcDescriptionGenerator19describe_dictionaryEPv_block_invoke;
      v42 = &__block_descriptor_tmp_8;
      v43 = this;
      xpc_dictionary_apply(a2, &applier);
      --*((_DWORD *)this + 2);
      uint64_t v5 = *this;
      if (SHIBYTE((*this)->__r_.__value_.__r.__words[2]) < 0) {
        std::string::size_type size = v5->__r_.__value_.__l.__size_;
      }
      else {
        std::string::size_type size = HIBYTE((*this)->__r_.__value_.__r.__words[2]);
      }
      std::string::resize(v5, size - 1, 0);
      std::string::push_back(*this, 10);
      std::string::append(*this, *((int *)this + 2), 9);
    }
    uint64_t v22 = *this;
    std::string::value_type v23 = 125;
    goto LABEL_47;
  }
  if (v4 == MEMORY[0x1E4F145F0])
  {
    string_ptr = xpc_string_get_string_ptr(a2);
    size_t length = xpc_string_get_length(a2);
    std::string::push_back(*this, 34);
    std::string::append(*this, string_ptr, length);
    xpc_object_t v9 = *this;
    std::string::value_type v10 = 34;
LABEL_19:
    std::string::push_back(v9, v10);
    return;
  }
  if (v4 == MEMORY[0x1E4F145C0])
  {
    int64_t value = xpc_int64_get_value(a2);
    uint64_t v12 = *this;
    std::to_string(&applier, value);
    if ((applier.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_std::string applier = &applier;
    }
    else {
      p_std::string applier = (std::string *)applier.__r_.__value_.__r.__words[0];
    }
    if ((applier.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v14 = HIBYTE(applier.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v14 = applier.__r_.__value_.__l.__size_;
    }
LABEL_28:
    std::string::append(v12, (const std::string::value_type *)p_applier, v14);
    if (SHIBYTE(applier.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(applier.__r_.__value_.__l.__data_);
    }
    return;
  }
  if (v4 == MEMORY[0x1E4F14568])
  {
    std::string::push_back(*this, 91);
    size_t count = xpc_array_get_count(a2);
    if (count)
    {
      size_t v16 = count;
      unint64_t v17 = 0;
      ++*((_DWORD *)this + 2);
      do
      {
        if (v17) {
          std::string::push_back(*this, 44);
        }
        std::string::push_back(*this, 10);
        std::string::append(*this, *((int *)this + 2), 9);
        xpc_object_t v18 = *this;
        std::to_string(&applier, v17);
        if ((applier.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          xpc_object_t v19 = &applier;
        }
        else {
          xpc_object_t v19 = (std::string *)applier.__r_.__value_.__r.__words[0];
        }
        if ((applier.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v20 = HIBYTE(applier.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v20 = applier.__r_.__value_.__l.__size_;
        }
        std::string::append(v18, (const std::string::value_type *)v19, v20);
        if (SHIBYTE(applier.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(applier.__r_.__value_.__l.__data_);
        }
        std::string::append(*this, ": ", 2uLL);
        xpc_object_t v21 = xpc_array_get_value(a2, v17);
        ++v17;
      }
      while (v16 != v17);
      --*((_DWORD *)this + 2);
      std::string::push_back(*this, 10);
      std::string::append(*this, *((int *)this + 2), 9);
      uint64_t v22 = *this;
      std::string::value_type v23 = 93;
      goto LABEL_47;
    }
    xpc_object_t v9 = *this;
    std::string::value_type v10 = 93;
    goto LABEL_19;
  }
  if (v4 != MEMORY[0x1E4F14580])
  {
    if (v4 == MEMORY[0x1E4F14570])
    {
      BOOL v29 = xpc_BOOL_get_value(a2);
      if (v29) {
        unint64_t v30 = "true";
      }
      else {
        unint64_t v30 = "false";
      }
      if (v29) {
        std::string::size_type v31 = 4;
      }
      else {
        std::string::size_type v31 = 5;
      }
      v32 = *this;
LABEL_82:
      std::string::append(v32, v30, v31);
      return;
    }
    if (v4 != MEMORY[0x1E4F145F8])
    {
      if (v4 != MEMORY[0x1E4F145D8])
      {
        if (v4 == MEMORY[0x1E4F14598])
        {
        }
        else if (v4 == MEMORY[0x1E4F14588])
        {
        }
        else if (v4 == MEMORY[0x1E4F14600])
        {
        }
        else if (v4 == MEMORY[0x1E4F145A8])
        {
        }
        else
        {
          xpc_object_t object = a2;
          if (a2) {
            xpc_retain(a2);
          }
          else {
            xpc_object_t object = xpc_null_create();
          }
          v37 = *this;
          xpc::object::describe((xpc::object *)&object, &applier);
          if ((applier.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v38 = &applier;
          }
          else {
            v38 = (std::string *)applier.__r_.__value_.__r.__words[0];
          }
          if ((applier.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v39 = HIBYTE(applier.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v39 = applier.__r_.__value_.__l.__size_;
          }
          std::string::append(v37, (const std::string::value_type *)v38, v39);
          if (SHIBYTE(applier.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(applier.__r_.__value_.__l.__data_);
          }
          xpc_release(object);
        }
        return;
      }
      v32 = *this;
      unint64_t v30 = "null";
      std::string::size_type v31 = 4;
      goto LABEL_82;
    }
    uint64_t v33 = xpc_uint64_get_value(a2);
    dispatch_object_t v34 = *this;
    std::to_string(&applier, v33);
    if ((applier.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v35 = &applier;
    }
    else {
      v35 = (std::string *)applier.__r_.__value_.__r.__words[0];
    }
    if ((applier.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v36 = HIBYTE(applier.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v36 = applier.__r_.__value_.__l.__size_;
    }
    std::string::append(v34, (const std::string::value_type *)v35, v36);
    if (SHIBYTE(applier.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(applier.__r_.__value_.__l.__data_);
    }
    uint64_t v22 = *this;
    std::string::value_type v23 = 117;
LABEL_47:
    std::string::push_back(v22, v23);
    return;
  }
  bytes_ptr = (ctu *)xpc_data_get_bytes_ptr(a2);
  size_t v25 = xpc_data_get_length(a2);
  std::string::append(*this, "[", 1uLL);
  uint64_t v26 = *this;
  std::to_string(&applier, v25);
  if ((applier.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    xpc_object_t v27 = &applier;
  }
  else {
    xpc_object_t v27 = (std::string *)applier.__r_.__value_.__r.__words[0];
  }
  if ((applier.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v28 = HIBYTE(applier.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v28 = applier.__r_.__value_.__l.__size_;
  }
  std::string::append(v26, (const std::string::value_type *)v27, v28);
  if (SHIBYTE(applier.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(applier.__r_.__value_.__l.__data_);
  }
  std::string::append(*this, " bytes]", 7uLL);
  if (v25)
  {
    std::string::append(*this, " ", 1uLL);
    uint64_t v12 = *this;
    ctu::hex_sp(bytes_ptr, v25, &applier);
    if ((applier.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_std::string applier = &applier;
    }
    else {
      p_std::string applier = (std::string *)applier.__r_.__value_.__r.__words[0];
    }
    if ((applier.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v14 = HIBYTE(applier.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v14 = applier.__r_.__value_.__l.__size_;
    }
    goto LABEL_28;
  }
}

void sub_19204CA44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  xpc_release(object);
  _Unwind_Resume(a1);
}

void ctu::hex_sp(ctu *this@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  if (a2 >= 1)
  {
    xpc_object_t v3 = this;
    uint64_t v5 = (ctu *)((char *)this + a2);
    do
    {
      if (*(unsigned __int8 *)v3 >= 0xA0u) {
        char v6 = 87;
      }
      else {
        char v6 = 48;
      }
      std::string::push_back(a3, v6 + (*(unsigned char *)v3 >> 4));
      unsigned int v7 = *(unsigned char *)v3 & 0xF;
      if (v7 >= 0xA) {
        char v8 = 87;
      }
      else {
        char v8 = 48;
      }
      std::string::push_back(a3, v8 + v7);
      std::string::push_back(a3, 32);
      xpc_object_t v3 = (ctu *)((char *)v3 + 1);
    }
    while (v3 < v5);
    if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type size = a3->__r_.__value_.__l.__size_;
      if (!size) {
        return;
      }
      std::string::size_type v10 = a3->__r_.__value_.__r.__words[0];
      std::string::size_type v9 = a3->__r_.__value_.__r.__words[0] + size;
    }
    else
    {
      if (!*((unsigned char *)&a3->__r_.__value_.__s + 23)) {
        return;
      }
      std::string::size_type v9 = (std::string::size_type)a3 + HIBYTE(a3->__r_.__value_.__r.__words[2]);
      std::string::size_type v10 = (std::string::size_type)a3;
    }
    std::string::erase(a3, ~v10 + v9, 1uLL);
  }
}

void sub_19204CB7C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *anonymous namespace'::XpcDescriptionGenerator::describe_uuid(std::string **this, xpc_object_t xuuid)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  *(void *)&v8[13] = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v7 = v3;
  *(_OWORD *)char v8 = v3;
  bytes = xpc_uuid_get_bytes(xuuid);
  uuid_unparse_lower(bytes, (char *)&v7);
  size_t v5 = strlen((const char *)&v7);
  return std::string::append(*this, (const std::string::value_type *)&v7, v5);
}

double ctu::cf::map_adapter::getDouble(ctu::cf::map_adapter *this, const __CFString *a2, double a3)
{
  double v3 = a3;
  double v9 = a3;
  uint64_t v4 = (const void *)(**(uint64_t (***)(ctu::cf::map_adapter *, const __CFString *))this)(this, a2);
  if (v4)
  {
    size_t v5 = v4;
    CFTypeID v6 = CFGetTypeID(v4);
    if (v6 == CFNumberGetTypeID())
    {
      ctu::cf::assign((ctu::cf *)&v9, v5, v7);
      double v3 = v9;
    }
    CFRelease(v5);
  }
  return v3;
}

uint64_t ctu::cf::assign(ctu::cf *this, CFTypeRef cf, const __CFNumber *a3)
{
  if (!cf) {
    return 0;
  }
  CFTypeID v5 = CFGetTypeID(cf);
  if (v5 != CFNumberGetTypeID()) {
    return 0;
  }
  uint64_t valuePtr = -1;
  uint64_t result = CFNumberGetValue((CFNumberRef)cf, kCFNumberDoubleType, &valuePtr);
  if (result)
  {
    *(void *)this = valuePtr;
    return 1;
  }
  return result;
}

{
  CFTypeID v5;
  uint64_t result;
  int valuePtr;

  if (!cf) {
    return 0;
  }
  CFTypeID v5 = CFGetTypeID(cf);
  if (v5 != CFNumberGetTypeID()) {
    return 0;
  }
  uint64_t valuePtr = -1431655766;
  uint64_t result = CFNumberGetValue((CFNumberRef)cf, kCFNumberIntType, &valuePtr);
  if (result)
  {
    *(_DWORD *)this = valuePtr;
    return 1;
  }
  return result;
}

{
  CFTypeID v5;
  uint64_t valuePtr;

  if (!cf) {
    return 0;
  }
  CFTypeID v5 = CFGetTypeID(cf);
  if (v5 != CFNumberGetTypeID()) {
    return 0;
  }
  uint64_t valuePtr = 0xAAAAAAAAAAAAAAAALL;
  if (!CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt64Type, &valuePtr) || valuePtr >= 0x100000000) {
    return 0;
  }
  *(_DWORD *)this = valuePtr;
  return 1;
}

{
  CFTypeID v5;
  uint64_t valuePtr;

  if (!cf) {
    return 0;
  }
  CFTypeID v5 = CFGetTypeID(cf);
  if (v5 != CFNumberGetTypeID()) {
    return 0;
  }
  uint64_t valuePtr = 0xAAAAAAAAAAAAAAAALL;
  if (!CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt64Type, &valuePtr) || valuePtr >= 0x10000) {
    return 0;
  }
  *(_WORD *)this = valuePtr;
  return 1;
}

{
  CFTypeID v5;
  uint64_t result;
  __int16 valuePtr;

  if (!cf) {
    return 0;
  }
  CFTypeID v5 = CFGetTypeID(cf);
  if (v5 != CFNumberGetTypeID()) {
    return 0;
  }
  uint64_t valuePtr = -21846;
  uint64_t result = CFNumberGetValue((CFNumberRef)cf, kCFNumberShortType, &valuePtr);
  if (result)
  {
    *(_WORD *)this = valuePtr;
    return 1;
  }
  return result;
}

{
  CFTypeID v5;
  uint64_t result;
  char valuePtr;

  if (!cf) {
    return 0;
  }
  CFTypeID v5 = CFGetTypeID(cf);
  if (v5 != CFNumberGetTypeID()) {
    return 0;
  }
  uint64_t valuePtr = -86;
  uint64_t result = CFNumberGetValue((CFNumberRef)cf, kCFNumberCharType, &valuePtr);
  if (result)
  {
    *(unsigned char *)this = valuePtr;
    return 1;
  }
  return result;
}

{
  CFTypeID v5;
  uint64_t valuePtr;

  if (!cf) {
    return 0;
  }
  CFTypeID v5 = CFGetTypeID(cf);
  if (v5 != CFNumberGetTypeID()) {
    return 0;
  }
  uint64_t valuePtr = 0xAAAAAAAAAAAAAAAALL;
  if (!CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt64Type, &valuePtr) || valuePtr >= 256) {
    return 0;
  }
  *(unsigned char *)this = valuePtr;
  return 1;
}

{
  CFTypeID v5;
  uint64_t result;
  unint64_t valuePtr;

  if (!cf) {
    return 0;
  }
  CFTypeID v5 = CFGetTypeID(cf);
  if (v5 != CFNumberGetTypeID()) {
    return 0;
  }
  uint64_t valuePtr = 0xAAAAAAAAAAAAAAAALL;
  uint64_t result = CFNumberGetValue((CFNumberRef)cf, kCFNumberLongLongType, &valuePtr);
  if (result)
  {
    *(void *)this = valuePtr;
    return 1;
  }
  return result;
}

{
  CFTypeID v5;
  uint64_t result;
  unint64_t valuePtr;

  if (!cf) {
    return 0;
  }
  CFTypeID v5 = CFGetTypeID(cf);
  if (v5 != CFNumberGetTypeID()) {
    return 0;
  }
  uint64_t valuePtr = 0xAAAAAAAAAAAAAAAALL;
  uint64_t result = CFNumberGetValue((CFNumberRef)cf, kCFNumberLongType, &valuePtr);
  if (result)
  {
    *(void *)this = valuePtr;
    return 1;
  }
  return result;
}

{
  CFTypeID v5;
  uint64_t result;
  int valuePtr;

  if (!cf) {
    return 0;
  }
  CFTypeID v5 = CFGetTypeID(cf);
  if (v5 != CFNumberGetTypeID()) {
    return 0;
  }
  uint64_t valuePtr = -1;
  uint64_t result = CFNumberGetValue((CFNumberRef)cf, kCFNumberFloatType, &valuePtr);
  if (result)
  {
    *(_DWORD *)this = valuePtr;
    return 1;
  }
  return result;
}

{
  CFTypeID v5;
  uint64_t result;
  unint64_t valuePtr;

  if (!cf) {
    return 0;
  }
  CFTypeID v5 = CFGetTypeID(cf);
  if (v5 != CFNumberGetTypeID()) {
    return 0;
  }
  uint64_t valuePtr = 0xAAAAAAAAAAAAAAAALL;
  uint64_t result = CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt64Type, &valuePtr);
  if (result)
  {
    *(void *)this = valuePtr;
    return 1;
  }
  return result;
}

{
  CFTypeID v5;
  uint64_t result;
  unint64_t valuePtr;

  if (!cf) {
    return 0;
  }
  CFTypeID v5 = CFGetTypeID(cf);
  if (v5 != CFNumberGetTypeID()) {
    return 0;
  }
  uint64_t valuePtr = 0xAAAAAAAAAAAAAAAALL;
  uint64_t result = CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt64Type, &valuePtr);
  if (result)
  {
    *(void *)this = valuePtr;
    return 1;
  }
  return result;
}

const void *ctu::cf::map_adapter::copyCFDataRef(ctu::cf::map_adapter *this, const __CFString *a2)
{
  uint64_t v2 = (const void *)(**(uint64_t (***)(ctu::cf::map_adapter *, const __CFString *))this)(this, a2);
  double v3 = v2;
  if (v2)
  {
    CFTypeID v4 = CFGetTypeID(v2);
    if (v4 != CFDataGetTypeID())
    {
      CFRelease(v3);
      return 0;
    }
  }
  return v3;
}

const void *ctu::cf::map_adapter::copyCFArrayRef(ctu::cf::map_adapter *this, const __CFString *a2)
{
  uint64_t v2 = (const void *)(**(uint64_t (***)(ctu::cf::map_adapter *, const __CFString *))this)(this, a2);
  double v3 = v2;
  if (v2)
  {
    CFTypeID v4 = CFGetTypeID(v2);
    if (v4 != CFArrayGetTypeID())
    {
      CFRelease(v3);
      return 0;
    }
  }
  return v3;
}

uint64_t ctu::cf::map_adapter::getInt(ctu::cf::map_adapter *this, const __CFString *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  unsigned int v9 = a3;
  CFTypeID v4 = (const void *)(**(uint64_t (***)(ctu::cf::map_adapter *, const __CFString *))this)(this, a2);
  if (v4)
  {
    CFTypeID v5 = v4;
    CFTypeID v6 = CFGetTypeID(v4);
    if (v6 == CFNumberGetTypeID())
    {
      ctu::cf::assign((ctu::cf *)&v9, v5, v7);
      uint64_t v3 = v9;
    }
    CFRelease(v5);
  }
  return v3;
}

const void *ctu::cf::map_adapter::copyCFDictionaryRef(ctu::cf::map_adapter *this, const __CFString *a2)
{
  uint64_t v2 = (const void *)(**(uint64_t (***)(ctu::cf::map_adapter *, const __CFString *))this)(this, a2);
  uint64_t v3 = v2;
  if (v2)
  {
    CFTypeID v4 = CFGetTypeID(v2);
    if (v4 != CFDictionaryGetTypeID())
    {
      CFRelease(v3);
      return 0;
    }
  }
  return v3;
}

const void *ctu::cf::dict_adapter::copyCFTypeRef(ctu::cf::dict_adapter *this, const __CFString *a2)
{
  CFDictionaryRef v2 = (const __CFDictionary *)*((void *)this + 1);
  if (!v2) {
    return 0;
  }
  Value = CFDictionaryGetValue(v2, a2);
  CFTypeID v4 = Value;
  if (Value) {
    CFRetain(Value);
  }
  return v4;
}

ctu::cf::dict_adapter *ctu::cf::dict_adapter::dict_adapter(ctu::cf::dict_adapter *this, CFTypeRef cf, char a3)
{
  *(void *)this = &unk_1EE2F7198;
  *((void *)this + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = cf;
  if (cf && (a3 & 1) == 0) {
    CFRetain(cf);
  }
  return this;
}

{
  *(void *)this = &unk_1EE2F7198;
  *((void *)this + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = cf;
  if (cf && (a3 & 1) == 0) {
    CFRetain(cf);
  }
  return this;
}

uint64_t ctu::LoggerCommonBase::getLogLevel(ctu::LoggerCommonBase *this)
{
  if (*((unsigned char *)this + 40)) {
    BOOL v1 = *((unsigned __int8 *)this + 41) == 255;
  }
  else {
    BOOL v1 = 1;
  }
  if (v1) {
    return *((unsigned __int8 *)this + 41);
  }
  else {
    return *((unsigned __int8 *)this + 40);
  }
}

void *ctu::PathView::PathView(void *result, uint64_t a2, unint64_t a3)
{
  *uint64_t result = a2;
  result[1] = a3;
  result[2] = 0;
  result[3] = 0;
  if (a3 < 2)
  {
    if (!a3)
    {
LABEL_11:
      unint64_t v3 = -1;
LABEL_13:
      if (v3 >= a3) {
        unint64_t v3 = a3;
      }
      goto LABEL_15;
    }
    a3 = 1;
  }
  else if (*(unsigned char *)(a2 + a3 - 1) == 47)
  {
    if (a3 - 1 < a3) {
      --a3;
    }
    result[1] = a3;
  }
  unint64_t v3 = 0;
  while (*(unsigned char *)(a2 + v3) != 47)
  {
    if (a3 == ++v3) {
      goto LABEL_11;
    }
  }
  if (v3) {
    goto LABEL_13;
  }
  if (a3 < 2)
  {
LABEL_20:
    unint64_t v4 = -1;
  }
  else
  {
    unint64_t v4 = 1;
    while (*(unsigned char *)(a2 + v4) != 47)
    {
      if (a3 == ++v4) {
        goto LABEL_20;
      }
    }
  }
  unint64_t v5 = a3 != 0;
  if (a3) {
    ++a2;
  }
  if (v5 > v4) {
    unint64_t v4 = a3 != 0;
  }
  if (v4 >= a3) {
    unint64_t v4 = a3;
  }
  unint64_t v3 = v4 - v5;
LABEL_15:
  result[2] = a2;
  result[3] = v3;
  return result;
}

xpc_object_t ctu::rest::detail::write_enum_string_value@<X0>(ctu::rest::detail *this@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return xpc::string((xpc *)"%lld:%s", a3, this, a2);
}

{
  return xpc::string((xpc *)"%llu:%s", a3, this, a2);
}

xpc_object_t xpc::string@<X0>(xpc *this@<X0>, void *a2@<X8>, ...)
{
  va_start(va, a2);
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  xpc_object_t result = xpc_string_create_with_format_and_arguments((const char *)this, va);
  *a2 = result;
  if (!result)
  {
    xpc_object_t result = xpc_null_create();
    *a2 = result;
  }
  return result;
}

uint64_t __copy_helper_block_e8_32c39_ZTSNSt3__110shared_ptrIN3xpc6objectEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

ctu::LogMessageBuffer *ctu::LogMessageBuffer::str(ctu::LogMessageBuffer *this)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>(v2 + 8, &v5);
    if (*((char *)this + 23) < 0) {
      operator delete(*(void **)this);
    }
    *(_OWORD *)this = v5;
    uint64_t v3 = *((void *)this + 3);
    *((void *)this + 2) = v6;
    *((void *)this + 3) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  return this;
}

void xpc::auto_reply::deleter(xpc_object_t *a1)
{
  if (a1)
  {
    if (MEMORY[0x192FEE1B0](*a1) == MEMORY[0x1E4F14590])
    {
      remote_connection = xpc_dictionary_get_remote_connection(*a1);
      if (remote_connection) {
        xpc_connection_send_message(remote_connection, *a1);
      }
    }
    xpc_release(*a1);
    operator delete(a1);
  }
}

void xpc::auto_reply::connect(void ***a1, xpc_object_t *a2)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    xpc_object_t v4 = *a2;
    if (*a2) {
      xpc_retain(*a2);
    }
    else {
      xpc_object_t v4 = xpc_null_create();
    }
    long long v5 = *v2;
    const void *v2 = v4;
    xpc_release(v5);
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t v7 = *a2;
    *a2 = v6;
    xpc_release(v7);
  }
}

ctu::OsLogLogger *ctu::OsLogLogger::OsLogLogger(ctu::OsLogLogger *this, const char *subsystem, const char *category)
{
  *(void *)this = os_log_create(subsystem, category);
  return this;
}

{
  *(void *)this = os_log_create(subsystem, category);
  return this;
}

void *xpc::dyn_cast_or_default@<X0>(xpc_object_t *this@<X0>, const xpc::object *a2@<X1>, const char *a3@<X2>, void *a4@<X8>)
{
  if (MEMORY[0x192FEE1B0](*this, a2, a3) == MEMORY[0x1E4F145F0])
  {
    string_ptr = (char *)xpc_string_get_string_ptr(*this);
    size_t length = xpc_string_get_length(*this);
    return std::string::basic_string[abi:ne180100](a4, string_ptr, length);
  }
  else
  {
    return std::string::basic_string[abi:ne180100]<0>(a4, (char *)a2);
  }
}

uint64_t ctu::cf_to_xpc@<X0>(void *a1@<X8>)
{
  uint64_t result = _CFXPCCreateXPCObjectFromCFObject();
  *a1 = result;
  if (!result)
  {
    uint64_t result = (uint64_t)xpc_null_create();
    *a1 = result;
  }
  return result;
}

void ctu::LogMessageBuffer::vCreateWithFormat(ctu::LogMessageBuffer *this@<X0>, va_list a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(void *)(a3 + 48) = 0;
  std::string::resize((std::string *)a3, 0x40uLL, 0);
  int v6 = *(char *)(a3 + 23);
  if (v6 >= 0) {
    xpc_object_t v7 = (char *)a3;
  }
  else {
    xpc_object_t v7 = *(char **)a3;
  }
  if (v6 >= 0) {
    size_t v8 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    size_t v8 = *(void *)(a3 + 8);
  }
  int v9 = vsnprintf(v7, v8, (const char *)this, a2);
  std::string::size_type v10 = v9;
  unint64_t v11 = *(unsigned __int8 *)(a3 + 23);
  if ((v11 & 0x80u) != 0) {
    unint64_t v11 = *(void *)(a3 + 8);
  }
  if (v11 <= v9)
  {
    std::string::resize((std::string *)a3, v9 + 1, 0);
    int v12 = *(char *)(a3 + 23);
    if (v12 >= 0) {
      xpc_object_t v13 = (char *)a3;
    }
    else {
      xpc_object_t v13 = *(char **)a3;
    }
    if (v12 >= 0) {
      size_t v14 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      size_t v14 = *(void *)(a3 + 8);
    }
    std::string::size_type v10 = vsnprintf(v13, v14, (const char *)this, a2);
  }
  std::string::resize((std::string *)a3, v10, 0);
}

void sub_19204D534(_Unwind_Exception *a1)
{
  ctu::LogMessageBuffer::~LogMessageBuffer(v1);
  _Unwind_Resume(a1);
}

uint64_t ctu::cf::assign(void **a1, CFTypeRef cf)
{
  if (!cf) {
    return 0;
  }
  CFTypeID v4 = CFGetTypeID(cf);
  if (v4 != CFDataGetTypeID()) {
    return 0;
  }
  BytePtr = CFDataGetBytePtr((CFDataRef)cf);
  int v6 = CFDataGetBytePtr((CFDataRef)cf);
  xpc_object_t v7 = &v6[CFDataGetLength((CFDataRef)cf)];
  size_t v8 = v7 - BytePtr;
  unint64_t v9 = (unint64_t)a1[2];
  std::string::size_type v10 = (char *)*a1;
  if (v9 - (unint64_t)*a1 >= v7 - BytePtr)
  {
    size_t v14 = (char *)a1[1];
    size_t v15 = v14 - v10;
    if (v14 - v10 < v8)
    {
      size_t v16 = &BytePtr[v15];
      if (v14 != v10)
      {
        memmove(*a1, BytePtr, v15);
        std::string::size_type v10 = (char *)a1[1];
      }
      if (v7 != v16) {
        memmove(v10, v16, v7 - v16);
      }
      unint64_t v17 = &v10[v7 - v16];
      goto LABEL_23;
    }
  }
  else
  {
    if (v10)
    {
      a1[1] = v10;
      operator delete(v10);
      unint64_t v9 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if ((v8 & 0x8000000000000000) != 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = 2 * v9;
    if (2 * v9 <= v8) {
      uint64_t v11 = v7 - BytePtr;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v12 = v11;
    }
    std::vector<char>::__vallocate[abi:ne180100](a1, v12);
    std::string::size_type v10 = (char *)a1[1];
  }
  if (v7 != BytePtr) {
    memmove(v10, BytePtr, v8);
  }
  unint64_t v17 = &v10[v8];
LABEL_23:
  a1[1] = v17;
  return 1;
}

uint64_t ctu::cf::assign(uint64_t a1, const __CFString *cf)
{
  if (!cf) {
    return 0;
  }
  CFTypeID v4 = CFGetTypeID(cf);
  if (v4 != CFStringGetTypeID()) {
    return 0;
  }
  CFIndex Length = CFStringGetLength(cf);
  CFIndex usedBufLen = 0xAAAAAAAAAAAAAAAALL;
  v10.location = 0;
  v10.size_t length = Length;
  CFIndex Bytes = CFStringGetBytes(cf, v10, 0x8000100u, 0, 0, 0, 0, &usedBufLen);
  if (!usedBufLen || !Bytes) {
    goto LABEL_11;
  }
  memset(__p, 170, sizeof(__p));
  std::vector<unsigned char>::vector(__p, usedBufLen);
  v11.location = 0;
  v11.size_t length = Length;
  if (!CFStringGetBytes(cf, v11, 0x8000100u, 0, 0, (UInt8 *)__p[0], (char *)__p[1] - (char *)__p[0], 0))
  {
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
LABEL_11:
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    return 1;
  }
  std::string::__assign_trivial[abi:ne180100]<unsigned char *,unsigned char *>((std::string *)a1, (std::string::value_type *)__p[0], (std::string::value_type *)__p[1], (char *)__p[1] - (char *)__p[0]);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return 1;
}

void sub_19204D7E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::string::__assign_trivial[abi:ne180100]<unsigned char *,unsigned char *>(std::string *this, std::string::value_type *a2, std::string::value_type *a3, std::string::size_type a4)
{
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    size_t v8 = this;
    if (a4 <= 0x16) {
      goto LABEL_11;
    }
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v10 = 22;
    goto LABEL_6;
  }
  unint64_t v11 = this->__r_.__value_.__r.__words[2];
  std::string::size_type v10 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v10 < a4)
  {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
LABEL_6:
    std::string::__grow_by(this, v10, a4 - v10, size, 0, size, 0);
    this->__r_.__value_.__l.__size_ = 0;
    LOBYTE(v12) = *((unsigned char *)&this->__r_.__value_.__s + 23);
    goto LABEL_8;
  }
  unint64_t v12 = HIBYTE(v11);
LABEL_8:
  size_t v8 = this;
  if ((v12 & 0x80) != 0) {
    size_t v8 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
LABEL_11:
  while (a2 != a3)
  {
    std::string::value_type v13 = *a2++;
    v8->__r_.__value_.__s.__data_[0] = v13;
    size_t v8 = (std::string *)((char *)v8 + 1);
  }
  v8->__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
    this->__r_.__value_.__l.__size_ = a4;
  }
  else {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = a4 & 0x7F;
  }
}

void *std::vector<unsigned char>::vector(void *a1, size_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<char>::__vallocate[abi:ne180100](a1, a2);
    CFTypeID v4 = (char *)a1[1];
    long long v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_19204D928(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<char>::__vallocate[abi:ne180100](void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000) != 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

ctu::OsLogContext *ctu::OsLogContext::OsLogContext(ctu::OsLogContext *this, const char *subsystem, const char *category)
{
  *(void *)this = category;
  *((void *)this + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = os_log_create(subsystem, category);
  return this;
}

{
  *(void *)this = category;
  *((void *)this + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = os_log_create(subsystem, category);
  return this;
}

uint64_t TelephonyRadiosGetRadioVendor()
{
  if (_TelephonyRadiosGetRadioInternal_sOnce != -1) {
    dispatch_once(&_TelephonyRadiosGetRadioInternal_sOnce, &__block_literal_global_4);
  }
  return sTelephonyRadioVendor;
}

void ctu::RestModuleState::sendRequest(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a1[7];
  if (v6 && ((*(uint64_t (**)(uint64_t))(*(void *)v6 + 32))(v6) & 1) != 0)
  {
    uint64_t v9 = a1[7];
    if (*(char *)(a2 + 23) >= 0) {
      std::string::size_type v10 = (const char *)a2;
    }
    else {
      std::string::size_type v10 = *(const char **)a2;
    }
    xpc_object_t v21 = xpc_string_create(v10);
    if (!v21) {
      xpc_object_t v21 = xpc_null_create();
    }
    unint64_t v11 = (std::__shared_weak_count *)a1[1];
    if (!v11 || (v12 = *a1, (std::string::value_type v13 = std::__shared_weak_count::lock(v11)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    size_t v14 = v13;
    atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    size_t v15 = std::__shared_weak_count::lock(v14);
    size_t v16 = v15;
    if (v15)
    {
      atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_weak(v14);
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    else
    {
      std::__shared_weak_count::__release_weak(v14);
      uint64_t v12 = 0;
    }
    uint64_t v19 = v12;
    std::string::size_type v20 = v16;
    std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)v23, a4);
    size_t v25 = 0;
    xpc_object_t v18 = operator new(0x28uLL);
    *xpc_object_t v18 = &unk_1EE2F4388;
    std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)(v18 + 1), (uint64_t)v23);
    size_t v25 = v18;
    (*(void (**)(uint64_t, xpc_object_t *, uint64_t, uint64_t *, uint64_t *, void *))(*(void *)v9 + 80))(v9, &v21, a3, &v19, a1 + 2, v24);
    std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100](v24);
    std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100](v23);
    if (v20) {
      std::__shared_weak_count::__release_weak(v20);
    }
    xpc_release(v21);
  }
  else
  {
    xpc_object_t object = xpc_null_create();
    uint64_t v17 = *(void *)(a4 + 24);
    if (!v17) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, xpc_object_t *))(*(void *)v17 + 48))(v17, &object);
    xpc_release(object);
  }
}

void sub_19204DC38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, xpc_object_t object, xpc_object_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ctu::rest::RestDispatchConnector::get(uint64_t a1, void **a2, void **a3, std::__shared_weak_count **a4, NSObject **a5, uint64_t a6)
{
  uint64_t v6 = a4[1];
  v7[0] = *a4;
  v7[1] = v6;
  *a4 = 0;
  a4[1] = 0;
  ctu::rest::RestDispatchConnector::send_with_reply(a1, "get", a2, a3, v7, a5, a6);
  if (v6)
  {
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_19204DD30(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

void ctu::rest::RestDispatchConnector::send_with_reply(uint64_t a1, char *a2, void **a3, void **a4, std::__shared_weak_count **a5, NSObject **a6, uint64_t a7)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = a5[1];
  v14[0] = *a5;
  v14[1] = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)v15, a7);
  uint64_t v17 = 0;
  std::string::value_type v13 = (char *)operator new(0x38uLL);
  *(void *)std::string::value_type v13 = &unk_1EE2F4B18;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)v14;
  std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)(v13 + 24), (uint64_t)v15);
  uint64_t v17 = v13;
  ctu::rest::RestDispatchConnector::send_with_reply(a1, a2, a3, a4, a6, (uint64_t)v16);
  std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100](v16);
  std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100](v15);
}

void sub_19204DE70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
}

void ctu::rest::RestDispatchConnector::send_with_reply(uint64_t a1, char *string, void **a3, void **a4, NSObject **a5, uint64_t a6)
{
  v35[4] = *(void **)MEMORY[0x1E4F143B8];
  if (!*(void *)(a1 + 64) || !*(void *)(a1 + 72) || !*(void *)(a1 + 56)) {
    _rest_api_misuse("Attempted to send message on a disconnected connector.");
  }
  xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v11 = xpc_string_create(string);
  v35[0] = v11;
  if (!v11)
  {
    xpc_object_t v11 = xpc_null_create();
    v35[0] = v11;
  }
  uint64_t v12 = (const char *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0) {
    uint64_t v12 = *(const char **)v12;
  }
  xpc_object_t v13 = xpc_string_create(v12);
  std::string::size_type v28 = v13;
  if (!v13)
  {
    xpc_object_t v13 = xpc_null_create();
    std::string::size_type v28 = v13;
  }
  ctu::rest::createRestMessage(v35, &v28, a3, a4, &object);
  xpc_release(v13);
  xpc_release(v11);
  uint64_t v14 = *(void *)(a1 + 64);
  if (v14)
  {
    size_t v15 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v15 || (uint64_t v16 = *(void *)(a1 + 8), (v17 = std::__shared_weak_count::lock(v15)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v18 = v16 + 24;
    if (!v16) {
      uint64_t v18 = 0;
    }
    uint64_t v26 = v18;
    xpc_object_t v27 = v17;
    xpc_object_t v25 = object;
    if (object) {
      xpc_retain(object);
    }
    else {
      xpc_object_t v25 = xpc_null_create();
    }
    xpc_object_t v30 = object;
    if (object) {
      xpc_retain(object);
    }
    else {
      xpc_object_t v30 = xpc_null_create();
    }
    xpc_object_t v21 = *a5;
    dispatch_object_t v31 = v21;
    if (v21) {
      dispatch_retain(v21);
    }
    std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)v32, a6);
    dispatch_object_t v34 = 0;
    uint64_t v22 = operator new(0x38uLL);
    xpc_object_t v23 = v30;
    *uint64_t v22 = &unk_1EE2F4B70;
    v22[1] = v23;
    xpc_object_t v30 = xpc_null_create();
    xpc_object_t v24 = v31;
    v22[2] = v31;
    if (v24) {
      dispatch_retain(v24);
    }
    std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)(v22 + 3), (uint64_t)v32);
    dispatch_object_t v34 = v22;
    (*(void (**)(uint64_t, uint64_t *, xpc_object_t *, void *))(*(void *)v14 + 24))(v14, &v26, &v25, v33);
    std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100](v33);
    std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100](v32);
    if (v31) {
      dispatch_release(v31);
    }
    xpc_release(v30);
    xpc_object_t v30 = 0;
    xpc_release(v25);
    xpc_object_t v25 = 0;
    if (v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v27);
    }
  }
  else
  {
    std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)v35, a6);
    uint64_t v19 = *a5;
    std::string::size_type v20 = operator new(0x20uLL);
    std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)v20, (uint64_t)v35);
    dispatch_async_f(v19, v20, (dispatch_function_t)dispatch::async<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_0>(dispatch_queue_s *,std::unique_ptr<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_0,std::default_delete<std::unique_ptr>>)::{lambda(void *)#1}::__invoke);
    std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100](v35);
  }
  xpc_release(object);
}

void sub_19204E160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ctu::rest::RestConnectorSink<ctu::RestDispatchListener>::handleClientMessageWithReply(uint64_t a1, long long *a2, xpc_object_t *a3, uint64_t a4)
{
  v14[4] = *MEMORY[0x1E4F143B8];
  long long v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    uint64_t v9 = std::__shared_weak_count::lock(v5);
    if (v9)
    {
      std::string::size_type v10 = v9;
      uint64_t v11 = *(void *)(a1 + 8);
      if (v11)
      {
        long long v13 = *a2;
        *(void *)a2 = 0;
        *((void *)a2 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
        xpc_object_t object = *a3;
        *a3 = xpc_null_create();
        std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)v14, a4);
        (*(void (**)(uint64_t, long long *, xpc_object_t *, void *))(*(void *)v11 + 32))(v11, &v13, &object, v14);
        std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100](v14);
        xpc_release(object);
        xpc_object_t object = 0;
        if (*((void *)&v13 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v13 + 1));
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
  }
}

void sub_19204E308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void **dispatch::async<void ctu::SharedSynchronizable<ctu::RestDispatchListener>::execute_wrapped<ctu::RestDispatchListener::handleClientMessageWithReply(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict,std::function<void ()(xpc::object)>)::$_0>(ctu::RestDispatchListener::handleClientMessageWithReply(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict,std::function<void ()(xpc::object)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ctu::RestDispatchListener::handleClientMessageWithReply(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict,std::function<void ()(xpc::object)>)::$_0,std::default_delete<ctu::RestDispatchListener::handleClientMessageWithReply(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict,std::function<void ()(xpc::object)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *a1;
  std::string::size_type v10 = a1;
  uint64_t v11 = v1;
  uint64_t v2 = *(void **)v1;
  if (xpc_dictionary_get_value(*(xpc_object_t *)(v1 + 24), "r"))
  {
    v16[0] = v1 + 24;
    v16[1] = "a";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)v16, &object);
    memset(v17, 0, sizeof(v17));
    xpc::dyn_cast_or_default(&object, (uint64_t)v17, &__p);
    ResourceConnection_sync = ctu::RestDispatchListener::getOrCreateResourceConnection_sync(v2, (unint64_t *)(v1 + 8), (uint64_t *)&__p);
    CFTypeID v4 = (void *)*ResourceConnection_sync;
    long long v5 = (std::__shared_weak_count *)ResourceConnection_sync[1];
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    xpc_release(object);
    uint64_t v6 = v2[6];
    xpc_object_t object = v4;
    uint64_t v14 = v5;
    xpc_object_t v7 = *(void **)(v1 + 24);
    xpc_object_t v12 = v7;
    if (v7) {
      xpc_retain(v7);
    }
    else {
      xpc_object_t v12 = xpc_null_create();
    }
    std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)v16, v1 + 32);
    uint64_t v18 = 0;
    size_t v8 = operator new(0x28uLL);
    *size_t v8 = &unk_1EE2F4C78;
    std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)(v8 + 1), (uint64_t)v16);
    uint64_t v18 = v8;
    (*(void (**)(uint64_t, xpc_object_t *, xpc_object_t *, void *))(*(void *)v6 + 24))(v6, &object, &v12, v17);
    std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100](v17);
    std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100](v16);
    xpc_release(v12);
    xpc_object_t v12 = 0;
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
  }
  std::unique_ptr<ctu::RestDispatchListener::handleClientMessageWithReply(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict,std::function<void ()(xpc::object)>)::$_0,std::default_delete<ctu::RestDispatchListener::handleClientMessageWithReply(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict,std::function<void ()(xpc::object)>)::$_0>>::~unique_ptr[abi:ne180100](&v11);
  return std::unique_ptr<void ctu::SharedSynchronizable<ctu::RestModuleState>::execute_wrapped<ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0>(ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0 &&)::{lambda(void)#1},std::default_delete<ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0>>::~unique_ptr[abi:ne180100](&v10);
}

void sub_19204E524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, xpc_object_t object, xpc_object_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::unique_ptr<ctu::RestDispatchListener::handleClientMessageWithReply(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict,std::function<void ()(xpc::object)>)::$_0,std::default_delete<ctu::RestDispatchListener::handleClientMessageWithReply(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict,std::function<void ()(xpc::object)>)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100]((void *)(v2 + 32));
    xpc_release(*(xpc_object_t *)(v2 + 24));
    *(void *)(v2 + 24) = 0;
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 16);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    operator delete((void *)v2);
  }
  return a1;
}

void ctu::RestDispatchListener::handleClientMessageWithReply(void *a1, uint64_t a2, xpc_object_t *a3, uint64_t a4)
{
  v19[5] = *MEMORY[0x1E4F143B8];
  *(void *)uint64_t v17 = a1;
  *(_OWORD *)&v17[8] = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  xpc_object_t object = *a3;
  *a3 = xpc_null_create();
  std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)v19, a4);
  uint64_t v6 = (std::__shared_weak_count *)a1[2];
  if (!v6 || (uint64_t v7 = a1[1], (v8 = std::__shared_weak_count::lock(v6)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v9 = v8;
  std::string::size_type v10 = operator new(0x40uLL);
  *(_OWORD *)std::string::size_type v10 = *(_OWORD *)v17;
  uint64_t v11 = *(void *)&v17[16];
  xpc_object_t v12 = object;
  *(void *)&v17[8] = 0;
  *(void *)&v17[16] = 0;
  v10[2] = v11;
  void v10[3] = v12;
  xpc_object_t object = xpc_null_create();
  std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)(v10 + 4), (uint64_t)v19);
  long long v13 = a1[3];
  atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v14 = operator new(0x18uLL);
  *uint64_t v14 = v10;
  v14[1] = v7;
  v14[2] = v9;
  size_t v15 = 0;
  uint64_t v16 = 0;
  dispatch_async_f(v13, v14, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<ctu::RestDispatchListener>::execute_wrapped<ctu::RestDispatchListener::handleClientMessageWithReply(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict,std::function<void ()(xpc::object)>)::$_0>(ctu::RestDispatchListener::handleClientMessageWithReply(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict,std::function<void ()(xpc::object)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ctu::RestDispatchListener::handleClientMessageWithReply(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict,std::function<void ()(xpc::object)>)::$_0,std::default_delete<ctu::RestDispatchListener::handleClientMessageWithReply(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict,std::function<void ()(xpc::object)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<void ctu::SharedSynchronizable<ctu::RestModuleState>::execute_wrapped<ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0>(ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0 &&)::{lambda(void)#1},std::default_delete<ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0>>::~unique_ptr[abi:ne180100](&v15);
  std::unique_ptr<void ctu::SharedSynchronizable<ctu::RestModuleState>::execute_wrapped<ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0>(ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0 &&)::{lambda(void)#1},std::default_delete<ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0>>::~unique_ptr[abi:ne180100](&v16);
  std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100](v19);
  xpc_release(object);
  xpc_object_t object = 0;
  if (*(void *)&v17[16]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v17[16]);
  }
}

void sub_19204E798(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void ctu::RestModuleState::setSubscriptionValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 56);
  if (v4 && (*(unsigned int (**)(uint64_t))(*(void *)v4 + 32))(v4))
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v7 = (const char *)a2;
    }
    else {
      uint64_t v7 = *(const char **)a2;
    }
    xpc_object_t object = xpc_string_create(v7);
    if (!object) {
      xpc_object_t object = xpc_null_create();
    }
    (*(void (**)(void, xpc_object_t *, uint64_t))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56), &object, a3);
    xpc_release(object);
  }
}

void sub_19204E88C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

BOOL ctu::rest::RestDispatchConnector::isConnected(ctu::rest::RestDispatchConnector *this)
{
  return *((void *)this + 8) && *((void *)this + 9) && *((void *)this + 7) != 0;
}

void ctu::rest::RestDispatchConnector::send(uint64_t a1, char *string, void **a3, void **a4)
{
  if (!*(void *)(a1 + 64) || !*(void *)(a1 + 72) || !*(void *)(a1 + 56)) {
    _rest_api_misuse("Attempted to send message on a disconnected connector.");
  }
  xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v7 = xpc_string_create(string);
  uint64_t v19 = v7;
  if (!v7)
  {
    xpc_object_t v7 = xpc_null_create();
    uint64_t v19 = v7;
  }
  size_t v8 = (const char *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0) {
    size_t v8 = *(const char **)v8;
  }
  xpc_object_t v9 = xpc_string_create(v8);
  uint64_t v18 = v9;
  if (!v9)
  {
    xpc_object_t v9 = xpc_null_create();
    uint64_t v18 = v9;
  }
  ctu::rest::createRestMessage(&v19, &v18, a3, a4, &object);
  xpc_release(v9);
  xpc_release(v7);
  uint64_t v10 = *(void *)(a1 + 64);
  if (v10)
  {
    uint64_t v11 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v11 || (v12 = *(void *)(a1 + 8), (long long v13 = std::__shared_weak_count::lock(v11)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v14 = v12 + 24;
    if (!v12) {
      uint64_t v14 = 0;
    }
    uint64_t v16 = v14;
    uint64_t v17 = v13;
    xpc_object_t v15 = object;
    if (object) {
      xpc_retain(object);
    }
    else {
      xpc_object_t v15 = xpc_null_create();
    }
    (*(void (**)(uint64_t, uint64_t *, xpc_object_t *))(*(void *)v10 + 16))(v10, &v16, &v15);
    xpc_release(v15);
    xpc_object_t v15 = 0;
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
  }
  xpc_release(object);
}

void sub_19204EA5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, xpc_object_t a14)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  xpc_release(a14);
  _Unwind_Resume(a1);
}

void ctu::rest::RestDispatchConnector::set(uint64_t a1, void **a2, void **a3)
{
}

void ctu::rest::RestConnectorSink<ctu::RestDispatchListener>::handleClientMessage(uint64_t a1, long long *a2, xpc_object_t *a3)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    xpc_object_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      size_t v8 = v7;
      uint64_t v9 = *(void *)(a1 + 8);
      if (v9)
      {
        long long v11 = *a2;
        *(void *)a2 = 0;
        *((void *)a2 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
        xpc_object_t object = *a3;
        *a3 = xpc_null_create();
        (*(void (**)(uint64_t, long long *, xpc_object_t *))(*(void *)v9 + 24))(v9, &v11, &object);
        xpc_release(object);
        xpc_object_t object = 0;
        if (*((void *)&v11 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v11 + 1));
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void sub_19204EB88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, std::__shared_weak_count *a12)
{
  xpc_release(object);
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  _Unwind_Resume(a1);
}

void **dispatch::async<void ctu::SharedSynchronizable<ctu::RestDispatchListener>::execute_wrapped<ctu::RestDispatchListener::handleClientMessage(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict)::$_0>(ctu::RestDispatchListener::handleClientMessage(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ctu::RestDispatchListener::handleClientMessage(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict)::$_0,std::default_delete<ctu::RestDispatchListener::handleClientMessage(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v10 = a1;
  uint64_t v11 = v1;
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = (void **)(v1 + 24);
  if (xpc_dictionary_get_value(*(xpc_object_t *)(v1 + 24), "r"))
  {
    v12[0] = (xpc_object_t)(v1 + 24);
    v12[1] = "a";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)v12, &object);
    unint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    xpc::dyn_cast_or_default(&object, (uint64_t)&v15, &__p);
    ResourceConnection_sync = ctu::RestDispatchListener::getOrCreateResourceConnection_sync(v2, (unint64_t *)(v1 + 8), (uint64_t *)&__p);
    unint64_t v5 = *ResourceConnection_sync;
    uint64_t v6 = (std::__shared_weak_count *)ResourceConnection_sync[1];
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    xpc_release(object);
    uint64_t v7 = v2[6];
    unint64_t v15 = v5;
    uint64_t v16 = v6;
    size_t v8 = *v3;
    v12[0] = v8;
    if (v8) {
      xpc_retain(v8);
    }
    else {
      v12[0] = xpc_null_create();
    }
    (*(void (**)(uint64_t, unint64_t *, xpc_object_t *))(*(void *)v7 + 16))(v7, &v15, v12);
    xpc_release(v12[0]);
    v12[0] = 0;
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
  }
  std::unique_ptr<ctu::RestDispatchListener::handleClientMessage(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict)::$_0,std::default_delete<ctu::RestDispatchListener::handleClientMessage(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict)::$_0>>::~unique_ptr[abi:ne180100](&v11);
  return std::unique_ptr<void ctu::SharedSynchronizable<ctu::RestModuleState>::execute_wrapped<ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0>(ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0 &&)::{lambda(void)#1},std::default_delete<ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0>>::~unique_ptr[abi:ne180100](&v10);
}

void sub_19204ECF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, xpc_object_t object, uint64_t a13, xpc_object_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  xpc_release(object);
  xpc_object_t object = 0;
  uint64_t v22 = *(std::__shared_weak_count **)(v20 - 48);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  std::unique_ptr<ctu::RestDispatchListener::handleClientMessage(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict)::$_0,std::default_delete<ctu::RestDispatchListener::handleClientMessage(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict)::$_0>>::~unique_ptr[abi:ne180100](&a11);
  std::unique_ptr<void ctu::SharedSynchronizable<ctu::RestModuleState>::execute_wrapped<ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0>(ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0 &&)::{lambda(void)#1},std::default_delete<ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

unint64_t *ctu::RestDispatchListener::getOrCreateResourceConnection_sync(void *a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (unint64_t *)a1[7];
  unint64_t v7 = a1[8];
  size_t v8 = (char *)(a1 + 7);
  if (v7)
  {
    unint64_t v9 = *a2;
    uint64_t v10 = &v6[3 * v7];
    do
    {
      unint64_t v11 = v7 >> 1;
      uint64_t v12 = &v6[3 * (v7 >> 1)];
      unint64_t v14 = *v12;
      long long v13 = v12 + 3;
      v7 += ~(v7 >> 1);
      if (v14 >= v9) {
        unint64_t v7 = v11;
      }
      else {
        uint64_t v6 = v13;
      }
    }
    while (v7);
    if (v6 != v10 && *v6 <= v9) {
      return v6 + 1;
    }
  }
  unint64_t v15 = operator new(0x48uLL);
  uint64_t v16 = v15;
  v15[1] = 0;
  v15[2] = 0;
  *unint64_t v15 = &unk_1EE2F8A40;
  uint64_t v17 = *a3;
  *(void *)&long long v55 = a3[1];
  *(void *)((char *)&v55 + 7) = *(uint64_t *)((char *)a3 + 15);
  char v18 = *((unsigned char *)a3 + 23);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  unint64_t v20 = *a2;
  unint64_t v19 = a2[1];
  unint64_t v21 = *a2;
  if (v19)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 16), 1uLL, memory_order_relaxed);
    unint64_t v21 = *a2;
  }
  uint64_t v22 = v55;
  v15[4] = v17;
  void v15[5] = v22;
  *(void *)((char *)v15 + 47) = *(void *)((char *)&v55 + 7);
  *((unsigned char *)v15 + 55) = v18;
  v15[3] = &unk_1EE2F71E8;
  v15[7] = v20;
  v15[8] = v19;
  xpc_object_t v24 = (unint64_t *)a1[7];
  uint64_t v23 = a1[8];
  xpc_object_t v25 = &v24[3 * v23];
  if (!v23) {
    goto LABEL_27;
  }
  uint64_t v26 = (unint64_t *)a1[7];
  unint64_t v27 = a1[8];
  do
  {
    unint64_t v28 = v27 >> 1;
    BOOL v29 = &v26[3 * (v27 >> 1)];
    unint64_t v31 = *v29;
    xpc_object_t v30 = v29 + 3;
    v27 += ~(v27 >> 1);
    if (v31 >= v21) {
      unint64_t v27 = v28;
    }
    else {
      uint64_t v26 = v30;
    }
  }
  while (v27);
  if (v26 == v25)
  {
LABEL_27:
    v56 = 0;
    long long v55 = v21;
    uint64_t v26 = &v24[3 * v23];
    goto LABEL_28;
  }
  if (*v26 > v21)
  {
    v56 = 0;
    long long v55 = v21;
    if (*v26 <= v21)
    {
      unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * (v25 - v26);
      do
      {
        unint64_t v33 = v32 >> 1;
        dispatch_object_t v34 = &v26[3 * (v32 >> 1)];
        unint64_t v36 = *v34;
        v35 = v34 + 3;
        v32 += ~(v32 >> 1);
        if (v36 >= v21) {
          unint64_t v32 = v33;
        }
        else {
          uint64_t v26 = v35;
        }
      }
      while (v32);
      if (v26 == v25)
      {
        uint64_t v26 = &v24[3 * v23];
        goto LABEL_40;
      }
      goto LABEL_53;
    }
LABEL_28:
    if (v24 == v26)
    {
      uint64_t v26 = v24;
      goto LABEL_40;
    }
    v37 = v26 - 3;
    unint64_t v38 = *(v26 - 3);
    if (v38 < v21)
    {
LABEL_40:
      if (a1[9] == v23)
      {
        boost::container::vector<boost::container::dtl::pair<ctu::rest::RestConnectorSourceBase const*,std::shared_ptr<ctu::DispatchRestResourceConnection>>,boost::container::new_allocator<boost::container::dtl::pair<ctu::rest::RestConnectorSourceBase const*,std::shared_ptr<ctu::DispatchRestResourceConnection>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<ctu::rest::RestConnectorSourceBase const*,std::shared_ptr<ctu::DispatchRestResourceConnection>>>,boost::container::dtl::pair<ctu::rest::RestConnectorSourceBase const*,std::shared_ptr<ctu::DispatchRestResourceConnection>>*,boost::container::dtl::pair<ctu::rest::RestConnectorSourceBase const*,std::shared_ptr<ctu::DispatchRestResourceConnection>>>>(&v54, v8, v26, (uint64_t)&v55);
        goto LABEL_56;
      }
      if (v25 == v26)
      {
        *xpc_object_t v25 = v21;
        v51 = &v24[3 * v23];
        v51[1] = 0;
        v51[2] = 0;
        *((void *)&v55 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
        v56 = 0;
        a1[8] = v23 + 1;
LABEL_55:
        v54 = v25;
LABEL_56:
        if (v56) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v56);
        }
        uint64_t v26 = v54;
        goto LABEL_59;
      }
      v44 = v25 - 3;
      *(_OWORD *)xpc_object_t v25 = *(_OWORD *)(v25 - 3);
      v24[3 * v23 + 2] = *(v25 - 1);
      *(v25 - 2) = 0;
      *(v25 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
      ++a1[8];
      if (v25 - 3 != v26)
      {
        v45 = v25 - 3;
        do
        {
          unint64_t v46 = *(v45 - 3);
          v45 -= 3;
          long long v47 = *((_OWORD *)v44 - 1);
          *(v44 - 2) = 0;
          *(v44 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
          unint64_t *v44 = v46;
          v48 = (std::__shared_weak_count *)v44[2];
          *(_OWORD *)(v44 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v47;
          if (v48) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v48);
          }
          v44 = v45;
        }
        while (v45 != v26);
      }
      *uint64_t v26 = v21;
      *((void *)&v55 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
      v56 = 0;
      v49 = (std::__shared_weak_count *)v26[2];
      v26[1] = 0;
      v26[2] = 0;
      if (v49) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v49);
      }
LABEL_54:
      xpc_object_t v25 = v26;
      goto LABEL_55;
    }
    if (v38 <= v21)
    {
      v26 -= 3;
      goto LABEL_54;
    }
    if (v37 == v24)
    {
      uint64_t v26 = v24;
    }
    else
    {
      unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * (v37 - v24);
      uint64_t v26 = v24;
      do
      {
        unint64_t v40 = v39 >> 1;
        v41 = &v26[3 * (v39 >> 1)];
        unint64_t v43 = *v41;
        v42 = v41 + 3;
        v39 += ~(v39 >> 1);
        if (v43 >= v21) {
          unint64_t v39 = v40;
        }
        else {
          uint64_t v26 = v42;
        }
      }
      while (v39);
    }
    if (v26 == v37)
    {
      uint64_t v26 = v37;
      goto LABEL_40;
    }
LABEL_53:
    if (*v26 <= v21) {
      goto LABEL_54;
    }
    goto LABEL_40;
  }
LABEL_59:
  v26[1] = (unint64_t)(v16 + 3);
  v50 = v26 + 1;
  v52 = (std::__shared_weak_count *)v50[1];
  v50[1] = v16;
  if (v52) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v52);
  }
  return v50;
}

void sub_19204F144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<ctu::RestDispatchListener::handleClientMessage(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict)::$_0,std::default_delete<ctu::RestDispatchListener::handleClientMessage(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    xpc_release(*(xpc_object_t *)(v2 + 24));
    *(void *)(v2 + 24) = 0;
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 16);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    operator delete((void *)v2);
  }
  return a1;
}

void ctu::RestDispatchListener::handleClientMessage(void *a1, long long *a2, xpc_object_t *a3)
{
  long long v13 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
  xpc_object_t v4 = *a3;
  *a3 = xpc_null_create();
  unint64_t v5 = (std::__shared_weak_count *)a1[2];
  if (!v5 || (uint64_t v6 = a1[1], (v7 = std::__shared_weak_count::lock(v5)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  size_t v8 = v7;
  unint64_t v9 = (char *)operator new(0x20uLL);
  *(void *)unint64_t v9 = a1;
  *(_OWORD *)(v9 + 8) = v13;
  *((void *)v9 + 3) = v4;
  xpc_object_t v10 = xpc_null_create();
  unint64_t v11 = a1[3];
  atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v12 = operator new(0x18uLL);
  void *v12 = v9;
  v12[1] = v6;
  xpc_object_t v12[2] = v8;
  unint64_t v14 = 0;
  unint64_t v15 = 0;
  dispatch_async_f(v11, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<ctu::RestDispatchListener>::execute_wrapped<ctu::RestDispatchListener::handleClientMessage(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict)::$_0>(ctu::RestDispatchListener::handleClientMessage(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ctu::RestDispatchListener::handleClientMessage(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict)::$_0,std::default_delete<ctu::RestDispatchListener::handleClientMessage(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict)::$_0>>)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<void ctu::SharedSynchronizable<ctu::RestModuleState>::execute_wrapped<ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0>(ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0 &&)::{lambda(void)#1},std::default_delete<ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0>>::~unique_ptr[abi:ne180100](&v14);
  std::unique_ptr<void ctu::SharedSynchronizable<ctu::RestModuleState>::execute_wrapped<ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0>(ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0 &&)::{lambda(void)#1},std::default_delete<ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0>>::~unique_ptr[abi:ne180100](&v15);
  std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  xpc_release(v10);
}

void **std::unique_ptr<void ctu::SharedSynchronizable<ctu::RestModuleState>::execute_wrapped<ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0>(ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0 &&)::{lambda(void)#1},std::default_delete<ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0>>::~unique_ptr[abi:ne180100](void **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = (std::__shared_weak_count *)v2[2];
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    operator delete(v2);
  }
  return a1;
}

ctu::cf::dict_adapter *ctu::cf::dict_adapter::dict_adapter(ctu::cf::dict_adapter *this, const ctu::cf::dict_adapter *a2)
{
  uint64_t v3 = (const void *)*((void *)a2 + 1);
  *(void *)this = &unk_1EE2F7198;
  *((void *)this + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v3;
  if (v3) {
    CFRetain(v3);
  }
  return this;
}

{
  const void *v3;

  uint64_t v3 = (const void *)*((void *)a2 + 1);
  *(void *)this = &unk_1EE2F7198;
  *((void *)this + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v3;
  if (v3) {
    CFRetain(v3);
  }
  return this;
}

uint64_t ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::enabled(uint64_t a1, unsigned int a2)
{
  unsigned int v2 = *(unsigned __int8 *)(a1 + 41);
  if (*(unsigned char *)(a1 + 40)) {
    BOOL v3 = v2 == 255;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3) {
    unsigned int v2 = *(unsigned __int8 *)(a1 + 40);
  }
  if (v2 <= a2)
  {
    uint64_t v6 = *(void *)(a1 + 48);
    unint64_t v5 = *(std::__shared_weak_count **)(a1 + 56);
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v6)
    {
      unsigned __int8 v7 = atomic_load((unsigned __int8 *)(v6 + 216));
      uint64_t v4 = v7 & 1;
      if (!v5) {
        return v4;
      }
    }
    else
    {
      uint64_t v4 = 1;
      if (!v5) {
        return v4;
      }
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    return v4;
  }
  return 0;
}

void ctu::ns::AutoPool::~AutoPool(void **this)
{
  uint64_t v1 = *this;
  if (v1) {
}
  }

ctu::ns::AutoPool *ctu::ns::AutoPool::AutoPool(ctu::ns::AutoPool *this)
{
  *(void *)this = objc_alloc_init(MEMORY[0x1E4F28B28]);
  return this;
}

{
  *(void *)this = objc_alloc_init(MEMORY[0x1E4F28B28]);
  return this;
}

uint64_t TelephonyRadiosGetRadio()
{
  if (_TelephonyRadiosGetRadioInternal_sOnce != -1) {
    dispatch_once(&_TelephonyRadiosGetRadioInternal_sOnce, &__block_literal_global_4);
  }
  return sTelephonyRadio;
}

uint64_t xpc::dyn_cast_or_default(void *a1, int64_t value)
{
  uint64_t v4 = MEMORY[0x192FEE1B0](*a1);
  unint64_t v5 = (void *)*a1;
  if (v4 == MEMORY[0x1E4F145C0])
  {
    int64_t value = xpc_int64_get_value(v5);
    if (value < 0)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::out_of_range::out_of_range[abi:ne180100](exception, "dyn_cast to uint64_t requires nonnegative values");
      __cxa_throw(exception, (struct type_info *)off_1E5743E90, MEMORY[0x1E4FBA1D0]);
    }
    return value;
  }
  if (MEMORY[0x192FEE1B0](v5) != MEMORY[0x1E4F145F8]) {
    return value;
  }
  uint64_t v6 = (void *)*a1;

  return xpc_uint64_get_value(v6);
}

void sub_19204F5D8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t ctu::cf::assign(ctu::cf *this, CFTypeRef cf, const __CFBoolean *a3)
{
  if (!cf) {
    return 0;
  }
  CFTypeID v5 = CFGetTypeID(cf);
  if (v5 != CFBooleanGetTypeID()) {
    return 0;
  }
  *(unsigned char *)this = CFBooleanGetValue((CFBooleanRef)cf) != 0;
  return 1;
}

uint64_t __copy_helper_block_e8_40c39_ZTSNSt3__18weak_ptrIN3ctu9XpcClientEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t _TelephonyUtilDebugPrint(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if ((_TelephonyUtilDebugFlags & 6) != 0) {
    return gDelegate(result, a2, &a9);
  }
  return result;
}

void _TelephonyUtilDebugPrintOsLog(uint64_t a1, const char *a2, va_list a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    memset(__b, 170, sizeof(__b));
    vsnprintf(__b, 0x400uLL, a2, a3);
    if (qword_1EB465358 != -1) {
      dispatch_once(&qword_1EB465358, &__block_literal_global_0);
    }
    CFTypeID v5 = _MergedGlobals_0;
    if (os_log_type_enabled((os_log_t)_MergedGlobals_0, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315138;
      unsigned __int8 v7 = __b;
      _os_log_impl(&dword_192046000, v5, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)&v6, 0xCu);
    }
  }
}

void ___ZN3ctu15XpcClientHelper9setServerINS_9XpcClientEEEvN3xpc10connectionEN8dispatch5queueENSt3__18weak_ptrIT_EE_block_invoke(void *a1, xpc_object_t a2)
{
  BOOL v3 = (std::__shared_weak_count *)a1[6];
  if (!v3) {
    return;
  }
  CFTypeID v5 = (void *)a1[4];
  int v6 = std::__shared_weak_count::lock(v3);
  if (!v6) {
    return;
  }
  unsigned __int8 v7 = v6;
  size_t v8 = (void (***)(void, xpc_object_t *))a1[5];
  if (v8)
  {
    uint64_t v9 = MEMORY[0x192FEE1B0](a2);
    uint64_t v10 = MEMORY[0x1E4F14590];
    if (v9 != MEMORY[0x1E4F14590])
    {
      if (v9 == MEMORY[0x1E4F145A8] && *v5 == a1[7])
      {
        uint64_t v12 = a2;
        if (a2)
        {
          xpc_retain(a2);
        }
        else
        {
          a2 = xpc_null_create();
          uint64_t v12 = a2;
        }
        ctu::XpcClient::handleServerError(v8, &v12);
        xpc_release(a2);
      }
      goto LABEL_19;
    }
    if (a2)
    {
      xpc_retain(a2);
      long long v13 = a2;
    }
    else
    {
      a2 = xpc_null_create();
      long long v13 = a2;
      if (!a2)
      {
        xpc_object_t v11 = xpc_null_create();
        a2 = 0;
        goto LABEL_17;
      }
    }
    if (MEMORY[0x192FEE1B0](a2) == v10)
    {
      xpc_retain(a2);
      xpc_object_t v11 = a2;
LABEL_18:
      ctu::XpcClient::handleMessage((uint64_t)v8, &v13);
      xpc_release(v11);
      long long v13 = 0;
      xpc_release(a2);
      goto LABEL_19;
    }
    xpc_object_t v11 = xpc_null_create();
LABEL_17:
    long long v13 = v11;
    goto LABEL_18;
  }
LABEL_19:

  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
}

void sub_19204F974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  xpc_release(v11);
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

void ctu::XpcClient::handleMessage(uint64_t a1, void **a2)
{
  BOOL v3 = *a2;
  xpc_object_t object = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(uint64_t, xpc_object_t *))(*(void *)a1 + 8))(a1, &object);
  xpc_release(object);
}

void sub_19204FA50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

uint64_t *dispatch::async<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_1::operator() const(xpc::object)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_1::operator() const(xpc::object)::{lambda(void)#1},std::default_delete<std::unique_ptr>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v5 = a1;
  uint64_t v2 = *(void **)a1;
  xpc_object_t object = v2;
  if (v2) {
    xpc_retain(v2);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  uint64_t v3 = *(void *)(a1 + 32);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, xpc_object_t *))(*(void *)v3 + 48))(v3, &object);
  xpc_release(object);
  return std::unique_ptr<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_1::operator() const(xpc::object)::{lambda(void)#1},std::default_delete<$_1>>::~unique_ptr[abi:ne180100](&v5);
}

void sub_19204FB04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void std::__function::__func<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,std::weak_ptr<void const>,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_0,std::allocator<std::function<void ()(xpc::object)> &&>,void ()(xpc::object)>::operator()(void *a1, void **a2)
{
  uint64_t v3 = *a2;
  *a2 = xpc_null_create();
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      int v6 = v5;
      if (a1[1])
      {
        xpc_object_t object = v3;
        if (v3) {
          xpc_retain(v3);
        }
        else {
          xpc_object_t object = xpc_null_create();
        }
        uint64_t v7 = a1[6];
        if (!v7) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, xpc_object_t *))(*(void *)v7 + 48))(v7, &object);
        xpc_release(object);
        xpc_object_t object = 0;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
  xpc_release(v3);
}

void sub_19204FBF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

void std::__function::__func<ctu::RestModuleState::sendRequest(std::string &&,xpc::object &&,std::function<void ()(xpc)> &&)::$_0,std::allocator<std::function<void ()(xpc)>>,xpc::object &&>::operator()(uint64_t a1, void **a2)
{
  uint64_t v3 = *a2;
  *a2 = xpc_null_create();
  xpc_object_t v4 = xpc_null_create();
  xpc_object_t v12 = v3;
  uint64_t v5 = MEMORY[0x1E4F14590];
  if (v3 && MEMORY[0x192FEE1B0](v3) == v5)
  {
    xpc_retain(v3);
    xpc_object_t v6 = v3;
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t v12 = v6;
  }
  if (MEMORY[0x192FEE1B0](v6) == v5)
  {
    object[0] = &v12;
    object[1] = "v";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v11);
    uint64_t v7 = v11;
    xpc_object_t v11 = v4;
    xpc_release(v4);
    xpc_object_t v11 = 0;
    xpc_object_t v6 = v12;
    xpc_object_t v4 = v7;
  }
  xpc_release(v6);
  object[0] = v4;
  xpc_object_t v8 = xpc_null_create();
  uint64_t v9 = *(void *)(a1 + 32);
  if (!v9) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, xpc_object_t *))(*(void *)v9 + 48))(v9, object);
  xpc_release(object[0]);
  object[0] = 0;
  xpc_release(v8);
  xpc_release(v3);
}

void sub_19204FD78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v13);
  xpc_release(v12);
  _Unwind_Resume(a1);
}

uint64_t ctu::RequestRestResource::handleRestMessage_GET(ctu::RequestRestResource *this, ctu::RestResourceContext *a2, const ctu::PathView *a3)
{
  memset(v11, 170, sizeof(v11));
  long long v6 = *((_OWORD *)a3 + 1);
  v10[0] = *(_OWORD *)a3;
  v10[1] = v6;
  switch(LODWORD(v11[0]))
  {
    case 1:
      ctu::RequestRestResource::handleMessage_Root_GET(this, a2);
      return 1;
    case 2:
      ctu::RequestRestResource::handleMessage_RootDumpState_GET(this, a2);
      return 1;
    case 3:
      return ctu::RequestRestResource::handleMessage_Resource_GET((uint64_t)this, (uint64_t)a2, (uint64_t)a3, v11[1], (size_t)v11[2]);
    case 4:
      ctu::RequestRestResource::handleMessage_Resource_Provider_GET((uint64_t)this, (uint64_t)a2, v7, v11[1], (size_t)v11[2]);
      return 1;
    default:
      xpc_object_t object = xpc_null_create();
      (*(void (**)(ctu::RestResourceContext *, xpc_object_t *))(*(void *)a2 + 32))(a2, &object);
      xpc_release(object);
      return 1;
  }
}

void sub_19204FF04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

uint64_t ctu::RequestRestResource::handleMessage_Resource_GET(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, size_t a5)
{
  unint64_t v21 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v22 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)a2 + 40))(&v21, a2);
  if (v21)
  {
    if (a4)
    {
      std::string::basic_string[abi:ne180100](&__p, a4, a5);
    }
    else
    {
      std::string __p = 0;
      uint64_t v24 = 0;
      uint64_t v25 = 0;
    }
    boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>>::find((uint64_t)&v26, (void ***)(a1 + 8), &__p);
    xpc_object_t v11 = v26;
    if (SHIBYTE(v25) < 0) {
      operator delete(__p);
    }
    if (v11 != (void *)(*(void *)(a1 + 8) + 32 * *(void *)(a1 + 16))
      && (v12 = (uint64_t *)v11[3], (long long v13 = (std::__shared_weak_count *)v12[1]) != 0)
      && (unint64_t v14 = std::__shared_weak_count::lock(v13)) != 0)
    {
      unint64_t v15 = v14;
      uint64_t v16 = *v12;
      if (v16)
      {
        (*(void (**)(xpc_object_t *__return_ptr, uint64_t))(*(void *)a2 + 8))(&v26, a2);
        if (*(void *)a3)
        {
          std::string::basic_string[abi:ne180100](&__p, *(void **)a3, *(void *)(a3 + 8));
          if (v25 >= 0) {
            p_p = (const char *)&__p;
          }
          else {
            p_p = (const char *)__p;
          }
        }
        else
        {
          std::string __p = 0;
          uint64_t v24 = 0;
          p_p = (const char *)&__p;
          uint64_t v25 = 0;
        }
        xpc_object_t v20 = xpc_string_create(p_p);
        if (!v20) {
          xpc_object_t v20 = xpc_null_create();
        }
        (*(void (**)(xpc_object_t *__return_ptr, uint64_t))(*(void *)a2 + 24))(&object, a2);
        uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, xpc_object_t *, xpc_object_t *, xpc_object_t *, unint64_t *))(*(void *)a2 + 56))(a2, v16, &v26, &v20, &object, &v21);
        xpc_release(object);
        xpc_release(v20);
        xpc_object_t v20 = 0;
        if (SHIBYTE(v25) < 0) {
          operator delete(__p);
        }
        xpc_release(v26);
      }
      else
      {
        uint64_t v10 = 1;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
    else
    {
      uint64_t v10 = 1;
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  return v10;
}

void sub_192050168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, xpc_object_t a10, uint64_t a11, std::__shared_weak_count *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, xpc_object_t object)
{
  xpc_release(object);
  std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(a1);
}

xpc_object_t ctu::DictRestResourceContext::getRestAuthor@<X0>(ctu::DictRestResourceContext *this@<X0>, void *a2@<X8>)
{
  v3[0] = *((void *)this + 1);
  v3[1] = "a";
  return xpc::dict::object_proxy::operator xpc::object((uint64_t)v3, a2);
}

uint64_t ctu::ReplyCallbackRestResourceContext::sendGet(uint64_t a1, uint64_t a2, void **a3, void **a4, void **a5, uint64_t *a6)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  ctu::rest::createGet(a3, a4, a5, &object);
  uint64_t v10 = *a6;
  uint64_t v9 = (std::__shared_weak_count *)a6[1];
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  xpc_object_t v11 = *(NSObject **)(a1 + 72);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v14 = *(void *)(a2 + 8);
    int v15 = *(char *)(a2 + 31);
    xpc::object::to_string(&object, &__p);
    uint64_t v16 = v15 >= 0 ? a2 + 8 : v14;
    uint64_t v17 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315650;
    uint64_t v24 = v16;
    __int16 v25 = 2048;
    uint64_t v26 = a2;
    __int16 v27 = 2080;
    unint64_t v28 = v17;
    _os_log_debug_impl(&dword_192046000, v11, OS_LOG_TYPE_DEBUG, "Sending GET to %s (%p): %s", buf, 0x20u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  xpc_object_t v20 = object;
  if (object) {
    xpc_retain(object);
  }
  else {
    xpc_object_t v20 = xpc_null_create();
  }
  uint64_t v12 = *(void *)(a1 + 16);
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 1174405120;
  v18[2] = ___ZN3ctu32ReplyCallbackRestResourceContext7sendGetERKNS_22RestResourceConnectionERKN3xpc6objectES7_S7_RKNSt3__110shared_ptrIS5_EE_block_invoke;
  v18[3] = &__block_descriptor_tmp_18;
  v18[4] = v10;
  unint64_t v19 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, xpc_object_t *, uint64_t, void *))(*(void *)a2 + 24))(a2, &v20, v12, v18);
  xpc_release(v20);
  xpc_object_t v20 = 0;
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  xpc_release(object);
  return 1;
}

void sub_192050454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, xpc_object_t a16, uint64_t a17, uint64_t a18, uint64_t a19, xpc_object_t object)
{
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  xpc_release(object);
  _Unwind_Resume(a1);
}

void ctu::DispatchRestResourceConnection::sendWithReply(uint64_t a1, void **a2, NSObject *a3, const void *a4)
{
  void v16[4] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5)
  {
    uint64_t v9 = std::__shared_weak_count::lock(v5);
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = *(void *)(a1 + 32);
      if (!v11)
      {
LABEL_13:
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
        return;
      }
      dispatch_object_t v15 = a3;
      if (a3) {
        dispatch_retain(a3);
      }
      uint64_t v12 = *a2;
      xpc_object_t object = v12;
      if (v12)
      {
        xpc_retain(v12);
        if (a4)
        {
LABEL_8:
          long long v13 = _Block_copy(a4);
          goto LABEL_11;
        }
      }
      else
      {
        xpc_object_t object = xpc_null_create();
        if (a4) {
          goto LABEL_8;
        }
      }
      long long v13 = 0;
LABEL_11:
      v16[0] = &unk_1EE2F8558;
      v16[1] = v13;
      void v16[3] = v16;
      (*(void (**)(uint64_t, xpc_object_t *, dispatch_object_t *, void *))(*(void *)v11 + 24))(v11, &object, &v15, v16);
      std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100](v16);
      xpc_release(object);
      xpc_object_t object = 0;
      if (v15) {
        dispatch_release(v15);
      }
      goto LABEL_13;
    }
  }
}

void sub_192050608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, dispatch_object_t a11, char a12)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void non-virtual thunk to'ctu::rest::RestDispatchConnector::handleMessageWithReply(uint64_t a1, void **a2, NSObject **a3, uint64_t a4)
{
}

void ctu::rest::createGet(void **a1@<X0>, void **a2@<X1>, void **a3@<X2>, void *a4@<X8>)
{
  xpc_object_t v8 = xpc_string_create("get");
  uint64_t v9 = v8;
  if (!v8)
  {
    xpc_object_t v8 = xpc_null_create();
    uint64_t v9 = v8;
  }
  ctu::rest::createRestMessage(&v9, a1, a2, a3, a4);
  xpc_release(v8);
}

void ctu::ReplyCallbackRestResourceContext::takeAutoReplyValue(ctu::ReplyCallbackRestResourceContext *this@<X0>, void *a2@<X8>)
{
}

uint64_t *dispatch::async<void ctu::rest::RestDispatchConnector::execute<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_1>(ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_1 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_1,std::default_delete<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_1>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v15 = a1;
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = (void *)(a1 + 24);
  xpc_object_t v20 = (xpc_object_t)(a1 + 24);
  dispatch_object_t object = (dispatch_object_t)"o";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)&v20, v23);
  int v5 = ctu::rest::asOperation(v23, v4);
  xpc_release(v23[0]);
  if (v5 == 6)
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t v20 = v6;
    ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)const::$_0::operator()(a1 + 32, &v20);
    xpc_release(v6);
  }
  else
  {
    uint64_t v8 = *(void *)(v2 + 72);
    uint64_t v7 = *(std::__shared_weak_count **)(v2 + 80);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    xpc_object_t v20 = v3;
    dispatch_object_t object = (dispatch_object_t)"o";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&v20, v23);
    int v10 = ctu::rest::asOperation(v23, v9);
    xpc_release(v23[0]);
    if (v10 == 2)
    {
      v18[0] = v3;
      v18[1] = "r";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)v18, &v19);
      v16[0] = v3;
      v16[1] = "v";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)v16, &v17);
      ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)const::$_0::$_0(&v20, a1 + 32);
      uint64_t v24 = 0;
      uint64_t v11 = operator new(0x38uLL);
      xpc_object_t v12 = v20;
      void *v11 = &unk_1EE2F4BC8;
      v11[1] = v12;
      xpc_object_t v20 = xpc_null_create();
      long long v13 = object;
      v11[2] = object;
      if (v13) {
        dispatch_retain(v13);
      }
      std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)(v11 + 3), (uint64_t)v22);
      uint64_t v24 = v11;
      (*(void (**)(uint64_t, xpc_object_t *, xpc_object_t *, xpc_object_t *))(*(void *)v8 + 24))(v8, &v19, &v17, v23);
      std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100](v23);
      std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100](v22);
      if (object) {
        dispatch_release(object);
      }
      xpc_release(v20);
      xpc_object_t v20 = 0;
      xpc_release(v17);
      xpc_release(v19);
    }
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
  return std::unique_ptr<void ctu::rest::RestDispatchConnector::execute<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_1>(ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_1 &&)::{lambda(void)#1},std::default_delete<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_1 &&>>::~unique_ptr[abi:ne180100](&v15);
}

void sub_19205092C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t a12, uint64_t a13, uint64_t a14, xpc_object_t a15, xpc_object_t a16, dispatch_object_t object)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

xpc_object_t *ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)const::$_0::$_0(xpc_object_t *a1, uint64_t a2)
{
  xpc_object_t v4 = *(xpc_object_t *)a2;
  *a1 = *(xpc_object_t *)a2;
  if (v4) {
    xpc_retain(v4);
  }
  else {
    *a1 = xpc_null_create();
  }
  int v5 = *(NSObject **)(a2 + 8);
  a1[1] = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)(a1 + 2), a2 + 16);
  return a1;
}

void sub_192050A84(_Unwind_Exception *a1)
{
  uint64_t v3 = *(NSObject **)(v1 + 8);
  if (v3) {
    dispatch_release(v3);
  }
  xpc_release(*(xpc_object_t *)v1);
  *(void *)uint64_t v1 = 0;
  _Unwind_Resume(a1);
}

uint64_t ctu::rest::RestConnectorDelegate<ctu::RestModuleState>::handleGetMessage(uint64_t a1, xpc_object_t *a2, void **a3, uint64_t a4)
{
  v14[4] = *MEMORY[0x1E4F143B8];
  int v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5) {
    return 0;
  }
  uint64_t v9 = std::__shared_weak_count::lock(v5);
  if (!v9) {
    return 0;
  }
  int v10 = v9;
  uint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)v14, a4);
    uint64_t Message = ctu::RestModuleState::handleGetMessage(v11, a2, a3, (uint64_t)v14);
    std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100](v14);
  }
  else
  {
    uint64_t Message = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  return Message;
}

void sub_192050B84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

uint64_t ctu::RestModuleState::handleGetMessage(uint64_t a1, xpc_object_t *a2, void **a3, uint64_t a4)
{
  if (!*(void *)(a1 + 96)) {
    return 0;
  }
  memset(&__p, 170, sizeof(__p));
  memset(v17, 0, sizeof(v17));
  xpc::dyn_cast_or_default(a2, (uint64_t)v17, &__p);
  std::string::size_type size = __p.__r_.__value_.__l.__size_;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  if (!size
    || (boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::function<void ()(xpc::object)>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::function<void ()(xpc::object)>>>>::find((uint64_t)v17, *(void ****)(a1 + 96), (void **)&__p.__r_.__value_.__l.__data_), uint64_t v8 = v17[0], v17[0] == **(void **)(a1 + 96) + 56 * *(void *)(*(void *)(a1 + 96) + 8)))
  {
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v9 = *a3;
    xpc_object_t object = v9;
    if (v9) {
      xpc_retain(v9);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    ctu::rest::createAutoReplyWithAction(a4, &v13);
    uint64_t v11 = *(void *)(v8 + 48);
    if (!v11) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, xpc_object_t *, uint64_t *))(*(void *)v11 + 48))(v11, &object, &v13);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    xpc_release(object);
    xpc_object_t object = 0;
    uint64_t v10 = 1;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v10;
}

void sub_192050CF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ctu::rest::createAutoReplyWithAction(uint64_t a1@<X0>, void *a2@<X8>)
{
  xpc_object_t v4 = (std::__shared_weak_count *)operator new(0x40uLL);
  v4->__shared_owners_ = 0;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE2F8BC8;
  std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)&v4[1], a1);
  v4[2].__shared_owners_ = (uint64_t)xpc_null_create();
  *a2 = (char *)v4 + 56;
  a2[1] = v4;
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);

  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
}

void ctu::basename(char *a1@<X0>, size_t a2@<X1>, std::string *a3@<X8>)
{
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)std::string __p = v4;
  *(_OWORD *)&__p[16] = v4;
  *(_OWORD *)int v5 = v4;
  ctu::path_split(a1, a2, (uint64_t)v5);
  if ((__p[31] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)&__p[8], *(std::string::size_type *)&__p[16]);
    if ((__p[31] & 0x80000000) != 0) {
      operator delete(*(void **)&__p[8]);
    }
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)&__p[8];
    a3->__r_.__value_.__r.__words[2] = *(void *)&__p[24];
  }
  if ((__p[7] & 0x80000000) != 0) {
    operator delete(v5[0]);
  }
}

void sub_192050E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ctu::path_split(char *a1@<X0>, size_t a2@<X1>, uint64_t a3@<X8>)
{
  if (!a2)
  {
    if (!a1)
    {
      memset(&v31, 0, sizeof(v31));
LABEL_21:
      std::string::basic_string[abi:ne180100]<0>(&__dst, "");
      *(std::string *)a3 = v31;
      *(std::string *)(a3 + 24) = __dst;
      return;
    }
LABEL_20:
    std::string::basic_string[abi:ne180100](&v31, a1, a2);
    goto LABEL_21;
  }
  size_t v6 = 0;
  while (a1[v6] == 47)
  {
    if (a2 == ++v6) {
      goto LABEL_20;
    }
  }
  if (v6 == -1) {
    goto LABEL_20;
  }
  memset(&__dst, 170, sizeof(__dst));
  if (v6 >= a2) {
    size_t v7 = a2;
  }
  else {
    size_t v7 = v6;
  }
  std::string::basic_string[abi:ne180100](&__dst, a1, v7);
  uint64_t v8 = &a1[v7];
  size_t v9 = a2 - v7;
  if (!v9) {
    goto LABEL_34;
  }
  uint64_t v10 = 0;
  size_t v11 = a2 >= v6 ? v6 : a2;
  size_t v12 = a2 - v11;
  uint64_t v13 = &a1[v11];
  while (v13[v10] != 47)
  {
    if (v12 == ++v10) {
      goto LABEL_34;
    }
  }
  if (v10 == -1)
  {
LABEL_34:
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      if (__dst.__r_.__value_.__l.__size_)
      {
        std::string::__init_copy_ctor_external(&v31, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
LABEL_39:
        unint64_t v32 = v8;
        size_t v33 = v9;
        *(std::string *)a3 = v31;
        memset(&v31, 0, sizeof(v31));
        unint64_t v21 = (void *)(a3 + 24);
        if (a1)
        {
          std::string::basic_string[abi:ne180100](v21, v8, v9);
          if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_68;
          }
          uint64_t v22 = (void *)v31.__r_.__value_.__r.__words[0];
          goto LABEL_67;
        }
LABEL_44:
        void *v21 = 0;
        v21[1] = 0;
        v21[2] = 0;
        goto LABEL_68;
      }
    }
    else if (*((unsigned char *)&__dst.__r_.__value_.__s + 23))
    {
      std::string v31 = __dst;
      goto LABEL_39;
    }
    std::string::basic_string[abi:ne180100]<0>((void *)a3, "");
    unint64_t v21 = (void *)(a3 + 24);
    if (a1)
    {
      std::string::basic_string[abi:ne180100](v21, v8, v9);
      goto LABEL_68;
    }
    goto LABEL_44;
  }
  memset(&__p, 0, sizeof(__p));
  uint64_t v14 = &a1[a2 - 1];
  size_t v15 = v9;
  while (v15)
  {
    --v15;
    int v16 = *v14--;
    if (v16 == 47)
    {
      if (v15 >= v9) {
        size_t v17 = v9;
      }
      else {
        size_t v17 = v15;
      }
      if (v15 + 1 < v9) {
        size_t v18 = v15 + 1;
      }
      else {
        size_t v18 = v9;
      }
      xpc_object_t v19 = &v8[v18];
      size_t v20 = v9 - v18;
      size_t v9 = v17;
      goto LABEL_47;
    }
  }
  if (!a1)
  {
    memset(&__p, 0, sizeof(__p));
    goto LABEL_52;
  }
  xpc_object_t v19 = 0;
  size_t v20 = 0;
LABEL_47:
  std::string::basic_string[abi:ne180100](&v31, v8, v9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string __p = v31;
  if (v19)
  {
    std::string::basic_string[abi:ne180100](&v31, v19, v20);
    goto LABEL_53;
  }
LABEL_52:
  memset(&v31, 0, sizeof(v31));
LABEL_53:
  long long v23 = *(_OWORD *)&v31.__r_.__value_.__l.__data_;
  int v24 = SHIBYTE(v31.__r_.__value_.__r.__words[2]);
  std::string::size_type size = __p.__r_.__value_.__l.__size_;
  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  *(_DWORD *)uint64_t v29 = v31.__r_.__value_.__r.__words[2];
  *(_DWORD *)&v29[3] = *(_DWORD *)((char *)&v31.__r_.__value_.__r.__words[2] + 3);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    p_p = &__p;
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  __int16 v27 = (char *)&p_p[-1].__r_.__value_.__r.__words[2] + 7;
  while (size)
  {
    int v28 = v27[size--];
    if (v28 != 47)
    {
      if (size != -1) {
        std::string::erase(&__p, size + 1, 0xFFFFFFFFFFFFFFFFLL);
      }
      break;
    }
  }
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__dst.__r_.__value_.__l.__data_, (const void **)&__p.__r_.__value_.__l.__data_, &v31);
  *(std::string *)a3 = v31;
  memset(&v31, 0, sizeof(v31));
  if (v24 < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a3 + 24), (const std::string::value_type *)v23, *((std::string::size_type *)&v23 + 1));
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v31.__r_.__value_.__l.__data_);
    }
    operator delete((void *)v23);
  }
  else
  {
    *(_OWORD *)(a3 + 24) = v23;
    *(_DWORD *)(a3 + 40) = *(_DWORD *)v29;
    *(_DWORD *)(a3 + 43) = *(_DWORD *)&v29[3];
    *(unsigned char *)(a3 + 47) = v24;
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_68;
  }
  uint64_t v22 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_67:
  operator delete(v22);
LABEL_68:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_1920511E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (v24 < 0) {
    operator delete(v23);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v25 - 49) < 0) {
    operator delete(*(void **)(v25 - 72));
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(const void **a1@<X0>, const void **a2@<X1>, void *a3@<X8>)
{
  if (*((char *)a1 + 23) >= 0) {
    size_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v5 = (size_t)a1[1];
  }
  if (*((char *)a2 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  memset(a3, 170, 24);
  uint64_t result = std::string::basic_string[abi:ne180100]((uint64_t)a3, v6 + v5);
  if (*(char *)(result + 23) >= 0) {
    uint64_t v8 = (char *)result;
  }
  else {
    uint64_t v8 = *(char **)result;
  }
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0) {
      size_t v9 = a1;
    }
    else {
      size_t v9 = *a1;
    }
    uint64_t result = (uint64_t)memmove(v8, v9, v5);
  }
  uint64_t v10 = &v8[v5];
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0) {
      size_t v11 = a2;
    }
    else {
      size_t v11 = *a2;
    }
    uint64_t result = (uint64_t)memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  return result;
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    size_t v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

double xpc::dyn_cast_or_default(void *a1, double a2)
{
  if (MEMORY[0x192FEE1B0](*a1) != MEMORY[0x1E4F14598]) {
    return a2;
  }
  uint64_t v5 = (void *)*a1;

  return xpc_double_get_value(v5);
}

uint64_t __copy_helper_block_e8_32c27_ZTSNSt3__110shared_ptrIvEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void ctu::hex(ctu *this@<X0>, unint64_t a2@<X8>)
{
  unsigned int v2 = this;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  do
  {
    if ((v2 & 0xF) >= 0xA) {
      char v4 = 87;
    }
    else {
      char v4 = 48;
    }
    std::string::push_back((std::string *)a2, v4 + (v2 & 0xF));
    BOOL v10 = v2 > 0xF;
    v2 >>= 4;
  }
  while (v10);
  int v5 = *(char *)(a2 + 23);
  BOOL v6 = v5 < 0;
  if (v5 >= 0) {
    unint64_t v7 = a2;
  }
  else {
    unint64_t v7 = *(void *)a2;
  }
  if (v6) {
    uint64_t v8 = *(void *)(a2 + 8);
  }
  else {
    uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  size_t v9 = (unsigned char *)(v7 + v8 - 1);
  if (v8) {
    BOOL v10 = (unint64_t)v9 > v7;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    unint64_t v11 = v7 + 1;
    do
    {
      char v12 = *(unsigned char *)(v11 - 1);
      *(unsigned char *)(v11 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = *v9;
      *v9-- = v12;
    }
    while (v11++ < (unint64_t)v9);
  }
}

{
  unsigned __int8 v2;
  char v4;
  unsigned int v5;
  int v6;
  BOOL v7;
  unint64_t v8;
  uint64_t v9;
  unsigned char *v10;
  BOOL v11;
  unint64_t v12;
  char v13;

  unsigned int v2 = this;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  do
  {
    if ((v2 & 0xFu) >= 0xA) {
      char v4 = 87;
    }
    else {
      char v4 = 48;
    }
    std::string::push_back((std::string *)a2, v4 + (v2 & 0xF));
    int v5 = v2;
    v2 >>= 4;
  }
  while (v5 > 0xF);
  BOOL v6 = *(char *)(a2 + 23);
  unint64_t v7 = v6 < 0;
  if (v6 >= 0) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = *(void *)a2;
  }
  if (v7) {
    size_t v9 = *(void *)(a2 + 8);
  }
  else {
    size_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  BOOL v10 = (unsigned char *)(v8 + v9 - 1);
  if (v9) {
    unint64_t v11 = (unint64_t)v10 > v8;
  }
  else {
    unint64_t v11 = 0;
  }
  if (v11)
  {
    char v12 = v8 + 1;
    do
    {
      uint64_t v13 = *(unsigned char *)(v12 - 1);
      *(unsigned char *)(v12 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = *v10;
      *v10-- = v13;
    }
    while (v12++ < (unint64_t)v10);
  }
}

{
  unsigned __int16 v2;
  char v4;
  unsigned int v5;
  int v6;
  BOOL v7;
  unint64_t v8;
  uint64_t v9;
  unsigned char *v10;
  BOOL v11;
  unint64_t v12;
  char v13;

  unsigned int v2 = (unsigned __int16)this;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  do
  {
    if ((v2 & 0xFu) >= 0xA) {
      char v4 = 87;
    }
    else {
      char v4 = 48;
    }
    std::string::push_back((std::string *)a2, v4 + (v2 & 0xF));
    int v5 = v2;
    v2 >>= 4;
  }
  while (v5 > 0xF);
  BOOL v6 = *(char *)(a2 + 23);
  unint64_t v7 = v6 < 0;
  if (v6 >= 0) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = *(void *)a2;
  }
  if (v7) {
    size_t v9 = *(void *)(a2 + 8);
  }
  else {
    size_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  BOOL v10 = (unsigned char *)(v8 + v9 - 1);
  if (v9) {
    unint64_t v11 = (unint64_t)v10 > v8;
  }
  else {
    unint64_t v11 = 0;
  }
  if (v11)
  {
    char v12 = v8 + 1;
    do
    {
      uint64_t v13 = *(unsigned char *)(v12 - 1);
      *(unsigned char *)(v12 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = *v10;
      *v10-- = v13;
    }
    while (v12++ < (unint64_t)v10);
  }
}

{
  unsigned __int8 v2;
  char v4;
  unsigned int v5;
  int v6;
  BOOL v7;
  unint64_t v8;
  uint64_t v9;
  unsigned char *v10;
  BOOL v11;
  unint64_t v12;
  char v13;

  unsigned int v2 = this;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  do
  {
    if ((v2 & 0xFu) >= 0xA) {
      char v4 = 87;
    }
    else {
      char v4 = 48;
    }
    std::string::push_back((std::string *)a2, v4 + (v2 & 0xF));
    int v5 = v2;
    v2 >>= 4;
  }
  while (v5 > 0xF);
  BOOL v6 = *(char *)(a2 + 23);
  unint64_t v7 = v6 < 0;
  if (v6 >= 0) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = *(void *)a2;
  }
  if (v7) {
    size_t v9 = *(void *)(a2 + 8);
  }
  else {
    size_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  BOOL v10 = (unsigned char *)(v8 + v9 - 1);
  if (v9) {
    unint64_t v11 = (unint64_t)v10 > v8;
  }
  else {
    unint64_t v11 = 0;
  }
  if (v11)
  {
    char v12 = v8 + 1;
    do
    {
      uint64_t v13 = *(unsigned char *)(v12 - 1);
      *(unsigned char *)(v12 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = *v10;
      *v10-- = v13;
    }
    while (v12++ < (unint64_t)v10);
  }
}

{
  unsigned __int8 v2;
  char v4;
  unsigned int v5;
  int v6;
  BOOL v7;
  unint64_t v8;
  uint64_t v9;
  unsigned char *v10;
  BOOL v11;
  unint64_t v12;
  char v13;

  unsigned int v2 = this;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  do
  {
    if ((v2 & 0xFu) >= 0xA) {
      char v4 = 87;
    }
    else {
      char v4 = 48;
    }
    std::string::push_back((std::string *)a2, v4 + (v2 & 0xF));
    int v5 = v2;
    v2 >>= 4;
  }
  while (v5 > 0xF);
  BOOL v6 = *(char *)(a2 + 23);
  unint64_t v7 = v6 < 0;
  if (v6 >= 0) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = *(void *)a2;
  }
  if (v7) {
    size_t v9 = *(void *)(a2 + 8);
  }
  else {
    size_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  BOOL v10 = (unsigned char *)(v8 + v9 - 1);
  if (v9) {
    unint64_t v11 = (unint64_t)v10 > v8;
  }
  else {
    unint64_t v11 = 0;
  }
  if (v11)
  {
    char v12 = v8 + 1;
    do
    {
      uint64_t v13 = *(unsigned char *)(v12 - 1);
      *(unsigned char *)(v12 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = *v10;
      *v10-- = v13;
    }
    while (v12++ < (unint64_t)v10);
  }
}

{
  unsigned __int16 v2;
  char v4;
  unsigned int v5;
  int v6;
  BOOL v7;
  unint64_t v8;
  uint64_t v9;
  unsigned char *v10;
  BOOL v11;
  unint64_t v12;
  char v13;

  unsigned int v2 = (unsigned __int16)this;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  do
  {
    if ((v2 & 0xFu) >= 0xA) {
      char v4 = 87;
    }
    else {
      char v4 = 48;
    }
    std::string::push_back((std::string *)a2, v4 + (v2 & 0xF));
    int v5 = v2;
    v2 >>= 4;
  }
  while (v5 > 0xF);
  BOOL v6 = *(char *)(a2 + 23);
  unint64_t v7 = v6 < 0;
  if (v6 >= 0) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = *(void *)a2;
  }
  if (v7) {
    size_t v9 = *(void *)(a2 + 8);
  }
  else {
    size_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  BOOL v10 = (unsigned char *)(v8 + v9 - 1);
  if (v9) {
    unint64_t v11 = (unint64_t)v10 > v8;
  }
  else {
    unint64_t v11 = 0;
  }
  if (v11)
  {
    char v12 = v8 + 1;
    do
    {
      uint64_t v13 = *(unsigned char *)(v12 - 1);
      *(unsigned char *)(v12 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = *v10;
      *v10-- = v13;
    }
    while (v12++ < (unint64_t)v10);
  }
}

{
  unsigned int v2;
  char v4;
  int v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unsigned char *v9;
  BOOL v10;
  unint64_t v11;
  char v12;

  unsigned int v2 = this;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  do
  {
    if ((v2 & 0xF) >= 0xA) {
      char v4 = 87;
    }
    else {
      char v4 = 48;
    }
    std::string::push_back((std::string *)a2, v4 + (v2 & 0xF));
    BOOL v10 = v2 > 0xF;
    v2 >>= 4;
  }
  while (v10);
  int v5 = *(char *)(a2 + 23);
  BOOL v6 = v5 < 0;
  if (v5 >= 0) {
    unint64_t v7 = a2;
  }
  else {
    unint64_t v7 = *(void *)a2;
  }
  if (v6) {
    uint64_t v8 = *(void *)(a2 + 8);
  }
  else {
    uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  size_t v9 = (unsigned char *)(v7 + v8 - 1);
  if (v8) {
    BOOL v10 = (unint64_t)v9 > v7;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    unint64_t v11 = v7 + 1;
    do
    {
      char v12 = *(unsigned char *)(v11 - 1);
      *(unsigned char *)(v11 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = *v9;
      *v9-- = v12;
    }
    while (v11++ < (unint64_t)v9);
  }
}

void sub_1920515DC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *__copy_helper_block_e8_32c39_ZTSNSt3__18weak_ptrIN3ctu9XpcServerEEE56c70_ZTSN8dispatch5blockIU13block_pointerFvN3xpc10connectionENS1_4dictEEEE(void *a1, void *a2)
{
  uint64_t v3 = a2[5];
  a1[4] = a2[4];
  a1[5] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t result = (void *)a2[7];
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  a1[7] = result;
  return result;
}

void ___ZNK3ctu15XpcServerHelper12acceptClientINS_9XpcServerEN8dispatch5blockIU13block_pointerFvN3xpc10connectionENS5_4dictEEEEEEvS6_NS3_5queueENSt3__18weak_ptrIT_EET0__block_invoke(uint64_t a1, xpc_object_t a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v3) {
    return;
  }
  int v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return;
  }
  BOOL v6 = v5;
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7)
  {
    uint64_t v8 = MEMORY[0x192FEE1B0](a2);
    uint64_t v9 = MEMORY[0x1E4F14590];
    if (v8 != MEMORY[0x1E4F14590])
    {
      if (v8 == MEMORY[0x1E4F145A8])
      {
        xpc_object_t v10 = *(xpc_object_t *)(a1 + 48);
        int v16 = v10;
        if (v10)
        {
          xpc_retain(v10);
        }
        else
        {
          xpc_object_t v10 = xpc_null_create();
          int v16 = v10;
        }
        size_t v15 = a2;
        if (a2)
        {
          xpc_retain(a2);
        }
        else
        {
          a2 = xpc_null_create();
          size_t v15 = a2;
        }
        ctu::XpcServer::handleClientError(v7, &v16, &v15);
        xpc_release(a2);
        xpc_release(v10);
      }
      goto LABEL_30;
    }
    xpc_object_t v11 = *(xpc_object_t *)(a1 + 48);
    if (v11)
    {
      xpc_retain(*(xpc_object_t *)(a1 + 48));
      if (a2)
      {
LABEL_11:
        xpc_retain(a2);
        size_t v17 = a2;
        goto LABEL_14;
      }
    }
    else
    {
      xpc_object_t v11 = xpc_null_create();
      if (a2) {
        goto LABEL_11;
      }
    }
    a2 = xpc_null_create();
    size_t v17 = a2;
    if (!a2)
    {
      xpc_object_t v12 = xpc_null_create();
      a2 = 0;
      goto LABEL_23;
    }
LABEL_14:
    if (MEMORY[0x192FEE1B0](a2) == v9)
    {
      xpc_retain(a2);
      xpc_object_t v12 = a2;
LABEL_24:
      uint64_t v13 = *(const void **)(a1 + 56);
      if (v13) {
        uint64_t v14 = _Block_copy(v13);
      }
      else {
        uint64_t v14 = 0;
      }
      dispatch::block<void({block_pointer})(xpc::connection,xpc::dict)>::operator()<xpc::connection&,xpc::dict&>((uint64_t)v14, v11, &v17);
      if (v14) {
        _Block_release(v14);
      }
      xpc_release(v12);
      size_t v17 = 0;
      xpc_release(a2);
      xpc_release(v11);
      goto LABEL_30;
    }
    xpc_object_t v12 = xpc_null_create();
LABEL_23:
    size_t v17 = v12;
    goto LABEL_24;
  }
LABEL_30:

  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
}

void sub_1920519E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  xpc_release(v13);
  xpc_release(v14);
  std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  _Unwind_Resume(a1);
}

void dispatch::block<void({block_pointer})(xpc::connection,xpc::dict)>::operator()<xpc::connection&,xpc::dict&>(uint64_t a1, xpc_object_t object, void **a3)
{
  xpc_object_t v7 = object;
  if (object) {
    xpc_retain(object);
  }
  else {
    xpc_object_t v7 = xpc_null_create();
  }
  int v5 = *a3;
  xpc_object_t objecta = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t objecta = xpc_null_create();
  }
  (*(void (**)(uint64_t, xpc_object_t *, xpc_object_t *))(a1 + 16))(a1, &v7, &objecta);
  xpc_release(objecta);
  xpc_object_t objecta = 0;
  xpc_release(v7);
}

void sub_192051B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, xpc_object_t a10)
{
}

uint64_t ctu::XpcClient::XpcClient(uint64_t a1, char *label)
{
  unsigned int v2 = label;
  if (label[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)label, *((void *)label + 1));
    if (v2[23] < 0) {
      unsigned int v2 = *(char **)v2;
    }
  }
  else
  {
    std::string v8 = *(std::string *)label;
  }
  char v4 = dispatch_queue_create(v2, 0);
  BOOL v6 = 0;
  xpc_object_t v7 = v4;
  ctu::XpcClient::XpcClient(a1, (long long *)&v8, &v7, &v6);
  if (v4) {
    dispatch_release(v4);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  return a1;
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  int v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    std::string v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    int v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }

  memmove(v5, __s, __sz + 1);
}

uint64_t ctu::XpcClient::XpcClient(uint64_t a1, long long *a2, NSObject **a3, NSObject **a4)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  std::string::size_type v7 = *a3;
  *(void *)(a1 + 24) = *a3;
  if (v7) {
    dispatch_retain(v7);
  }
  std::string v8 = *a4;
  *(void *)(a1 + 32) = *a4;
  if (v8) {
    dispatch_retain(v8);
  }
  *(void *)a1 = &unk_1EE2F7D30;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 40) = xpc_null_create();
  long long v9 = *a2;
  *(void *)(a1 + 64) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 48) = v9;
  *((void *)a2 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  return a1;
}

uint64_t ctu::cf::assign(std::string *a1, __CFString *cf)
{
  if (!cf) {
    return 0;
  }
  CFTypeID v4 = CFGetTypeID(cf);
  if (v4 == CFStringGetTypeID())
  {
    return ctu::cf::assign((uint64_t)a1, cf);
  }
  CFTypeID v6 = CFGetTypeID(cf);
  if (v6 == CFErrorGetTypeID())
  {
    return ctu::cf::assign((uint64_t)a1, (CFErrorRef)cf);
  }
  CFTypeID v7 = CFGetTypeID(cf);
  if (v7 != CFURLGetTypeID()) {
    return 0;
  }

  return ctu::cf::assign(a1, (CFURLRef)cf, 0);
}

void ctu::TimerService::throwIfPeriodIsZero(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 8))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    ctu::IllegalTimerParamsException::IllegalTimerParamsException(exception, "Cannot set up a period of 0 time; that would be insane!");
  }
}

void sub_192051E78(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void ctu::XpcClient::setServer_sync(uint64_t a1, void *a2)
{
  if (MEMORY[0x192FEE1B0](*a2) == MEMORY[0x1E4F14578])
  {
    CFTypeID v4 = (void *)*a2;
    xpc_object_t v10 = v4;
    if (v4) {
      xpc_retain(v4);
    }
    else {
      xpc_object_t v10 = xpc_null_create();
    }
    int v5 = *(NSObject **)(a1 + 24);
    dispatch_object_t object = v5;
    if (v5) {
      dispatch_retain(v5);
    }
    std::shared_ptr<ctu::XpcServer>::shared_ptr[abi:ne180100]<ctu::XpcServer,void>(&v11, (void *)(a1 + 8));
    CFTypeID v6 = v12;
    uint64_t v7 = v11;
    std::string v8 = v12;
    if (v12)
    {
      atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
    ctu::XpcClientHelper::setServer<ctu::XpcClient>((_xpc_connection_s **)(a1 + 40), &v10, &object, &v7);
    if (v8) {
      std::__shared_weak_count::__release_weak(v8);
    }
    if (object) {
      dispatch_release(object);
    }
    xpc_release(v10);
  }
  else
  {
    ctu::XpcClientHelper::setServer((void *)(a1 + 40));
  }
}

void sub_192051F88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, dispatch_object_t object, xpc_object_t a12)
{
  if (a10) {
    std::__shared_weak_count::__release_weak(a10);
  }
  if (object) {
    dispatch_release(object);
  }
  xpc_release(a12);
  _Unwind_Resume(a1);
}

void ctu::XpcClientHelper::setServer<ctu::XpcClient>(_xpc_connection_s **a1, xpc_object_t *a2, dispatch_queue_t *a3, uint64_t *a4)
{
  xpc_object_t v13 = *a2;
  if (v13) {
    xpc_retain(v13);
  }
  else {
    xpc_object_t v13 = xpc_null_create();
  }
  ctu::XpcClientHelper::setServer_internal(a1, &v13);
  xpc_release(v13);
  if (MEMORY[0x192FEE1B0](*a1) == MEMORY[0x1E4F14578])
  {
    uint64_t v7 = *a1;
    handler[0] = MEMORY[0x1E4F143A8];
    handler[1] = 1174405120;
    handler[2] = ___ZN3ctu15XpcClientHelper9setServerINS_9XpcClientEEEvN3xpc10connectionEN8dispatch5queueENSt3__18weak_ptrIT_EE_block_invoke;
    handler[3] = &__block_descriptor_tmp_22;
    uint64_t v9 = *a4;
    std::string v8 = (std::__shared_weak_count *)a4[1];
    handler[4] = a1;
    handler[5] = v9;
    uint64_t v11 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    xpc_object_t v12 = v7;
    xpc_connection_set_event_handler(v7, handler);
    xpc_connection_set_target_queue(v7, *a3);
    xpc_connection_resume(v7);
    if (v11) {
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1920520D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  _Unwind_Resume(exception_object);
}

void ctu::XpcClientHelper::setServer_internal(void *a1, void *a2)
{
  uint64_t v3 = (void *)*a2;
  *a2 = *a1;
  *a1 = v3;
  if (MEMORY[0x192FEE1B0](*a2) == MEMORY[0x1E4F14578])
  {
    CFTypeID v4 = (void *)*a2;
    barrier[0] = MEMORY[0x1E4F143A8];
    barrier[1] = 1174405120;
    barrier[2] = ___ZN3ctu15XpcClientHelper18setServer_internalEN3xpc10connectionE_block_invoke;
    barrier[3] = &__block_descriptor_tmp_14;
    xpc_object_t object = v4;
    if (v4) {
      xpc_retain(v4);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    xpc_connection_send_barrier((xpc_connection_t)v4, barrier);
    xpc_release(object);
  }
}

void sub_1920521DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t object)
{
}

void ___ZN3ctu15XpcServerHelper13startListenerINS_9XpcServerEEEvN8dispatch5queueENSt3__18weak_ptrIT_EE_block_invoke(void *a1, xpc_object_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (!v3) {
    return;
  }
  int v5 = (void *)a1[4];
  CFTypeID v6 = std::__shared_weak_count::lock(v3);
  if (!v6) {
    return;
  }
  uint64_t v7 = v6;
  std::string v8 = (void (***)(void, xpc_object_t *))a1[5];
  if (v8)
  {
    uint64_t v9 = MEMORY[0x192FEE1B0](a2);
    uint64_t v10 = MEMORY[0x1E4F14578];
    if (v9 != MEMORY[0x1E4F14578])
    {
      if (v9 == MEMORY[0x1E4F145A8] && *v5 == a1[7])
      {
        uint64_t v14 = a2;
        if (a2)
        {
          xpc_retain(a2);
        }
        else
        {
          a2 = xpc_null_create();
          uint64_t v14 = a2;
        }
        ctu::XpcServer::handleListenerError(v8, &v14);
        xpc_release(a2);
      }
      goto LABEL_22;
    }
    if (a2)
    {
      xpc_retain(a2);
      size_t v15 = a2;
      xpc_object_t v11 = a2;
    }
    else
    {
      xpc_object_t v11 = xpc_null_create();
      size_t v15 = v11;
      if (!v11)
      {
        xpc_object_t v12 = xpc_null_create();
        xpc_object_t v11 = 0;
        goto LABEL_17;
      }
    }
    if (MEMORY[0x192FEE1B0](v11) == v10)
    {
      xpc_retain(v11);
      xpc_object_t v12 = v11;
      goto LABEL_18;
    }
    xpc_object_t v12 = xpc_null_create();
LABEL_17:
    size_t v15 = v12;
LABEL_18:
    BOOL v13 = ctu::XpcServer::handleNewClient(v8, &v15);
    xpc_release(v12);
    size_t v15 = 0;
    xpc_release(v11);
    if (!v13) {
      xpc_connection_cancel((xpc_connection_t)a2);
    }
  }
LABEL_22:

  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
}

void sub_192052388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  xpc_release(v11);
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

BOOL ctu::XpcServer::handleNewClient(void *a1, void **a2)
{
  CFTypeID v4 = *a2;
  xpc_object_t object = v4;
  aBlock = (void *)0xAAAAAAAAAAAAAAAALL;
  if (v4) {
    xpc_retain(v4);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(void **__return_ptr, void *, xpc_object_t *))(*a1 + 8))(&aBlock, a1, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  int v5 = aBlock;
  if (aBlock)
  {
    xpc_object_t v6 = *a2;
    if (v6) {
      xpc_retain(v6);
    }
    else {
      xpc_object_t v6 = xpc_null_create();
    }
    uint64_t v7 = a1 + 1;
    std::string v8 = a1[3];
    if (v8) {
      dispatch_retain(v8);
    }
    std::shared_ptr<ctu::XpcServer>::shared_ptr[abi:ne180100]<ctu::XpcServer,void>(&handler, v7);
    uint64_t v10 = handler;
    uint64_t v9 = (std::__shared_weak_count *)v17;
    if (v17)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 16), 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    if (aBlock) {
      xpc_object_t v11 = _Block_copy(aBlock);
    }
    else {
      xpc_object_t v11 = 0;
    }
    uint64_t handler = MEMORY[0x1E4F143A8];
    uint64_t v17 = 1174405120;
    size_t v18 = ___ZNK3ctu15XpcServerHelper12acceptClientINS_9XpcServerEN8dispatch5blockIU13block_pointerFvN3xpc10connectionENS5_4dictEEEEEEvS6_NS3_5queueENSt3__18weak_ptrIT_EET0__block_invoke;
    xpc_object_t v19 = &__block_descriptor_tmp_6_1;
    uint64_t v20 = v10;
    unint64_t v21 = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    xpc_object_t v22 = v6;
    if (v11) {
      xpc_object_t v12 = _Block_copy(v11);
    }
    else {
      xpc_object_t v12 = 0;
    }
    long long v23 = v12;
    xpc_connection_set_event_handler((xpc_connection_t)v6, &handler);
    xpc_connection_set_target_queue((xpc_connection_t)v6, v8);
    xpc_connection_resume((xpc_connection_t)v6);
    if (v23) {
      _Block_release(v23);
    }
    if (v21) {
      std::__shared_weak_count::__release_weak(v21);
    }
    if (v11) {
      _Block_release(v11);
    }
    if (v9) {
      std::__shared_weak_count::__release_weak(v9);
    }
    if (v8) {
      dispatch_release(v8);
    }
    xpc_release(v6);
    if (aBlock) {
      _Block_release(aBlock);
    }
  }
  return v5 != 0;
}

void sub_192052600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, void *aBlock)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  if (v21) {
    _Block_release(v21);
  }
  if (v20) {
    std::__shared_weak_count::__release_weak(v20);
  }
  if (v19) {
    dispatch_release(v19);
  }
  xpc_release(v18);
  if (a10) {
    _Block_release(a10);
  }
  _Unwind_Resume(a1);
}

void *std::shared_ptr<ctu::XpcServer>::shared_ptr[abi:ne180100]<ctu::XpcServer,void>(void *a1, void *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  *a1 = *a2;
  if (!v3)
  {
    a1[1] = 0;
LABEL_5:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  CFTypeID v4 = std::__shared_weak_count::lock(v3);
  a1[1] = v4;
  if (!v4) {
    goto LABEL_5;
  }
  return a1;
}

void ctu::DispatchTimerService::createPeriodicTimerImpl(uint64_t a1@<X2>, uint64_t a2@<X3>, int a3@<W4>, dispatch_queue_t *a4@<X5>, void **a5@<X6>, void *a6@<X8>)
{
  v6[0] = a1;
  v6[1] = a2;
  ctu::DispatchTimerService::createDispatchTimer(*a4, (char *)v6, 1000 * a2, a3, *a5, a6);
}

void ctu::DispatchTimerService::createDispatchTimer(dispatch_queue_t queue@<X1>, char *a2@<X2>, uint64_t a3@<X3>, int a4@<W4>, void *a5@<X5>, void *a6@<X8>)
{
  int v12 = *a2;
  uint64_t v13 = 1;
  if (v12 == 2) {
    uint64_t v13 = 2;
  }
  if (v12 == 1) {
    uintptr_t v14 = 3;
  }
  else {
    uintptr_t v14 = v13;
  }
  size_t v15 = dispatch_source_create(MEMORY[0x1E4F14490], v14, 0, queue);
  int v16 = (std::__shared_weak_count_vtbl *)operator new(1uLL);
  LOBYTE(v16->~__shared_weak_count) = 0;
  uint64_t v17 = (std::__shared_weak_count *)operator new(0x20uLL);
  v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE2F9060;
  v17->__shared_owners_ = 0;
  v17->__shared_weak_owners_ = 0;
  v17[1].__vftable = v16;
  if (a3 == -1)
  {
    handler[0] = MEMORY[0x1E4F143A8];
    handler[1] = 1174405120;
    handler[2] = ___ZNK3ctu20DispatchTimerService19createDispatchTimerEP16dispatch_queue_sRKNSt3__15tupleIJNS_8TimeTypeENS3_6chrono8durationIxNS3_5ratioILl1ELl1000000EEEEEEEEy11qos_class_tU13block_pointerFvvE_block_invoke;
    handler[3] = &__block_descriptor_tmp_19;
    handler[4] = a5;
    dispatch_object_t object = v15;
    if (v15) {
      dispatch_retain(v15);
    }
    dispatch_source_set_event_handler(v15, handler);
    if (object) {
      dispatch_release(object);
    }
  }
  else
  {
    dispatch_source_set_event_handler(v15, a5);
  }
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 1174405120;
  v21[2] = ___ZNK3ctu20DispatchTimerService19createDispatchTimerEP16dispatch_queue_sRKNSt3__15tupleIJNS_8TimeTypeENS3_6chrono8durationIxNS3_5ratioILl1ELl1000000EEEEEEEEy11qos_class_tU13block_pointerFvvE_block_invoke_3;
  v21[3] = &__block_descriptor_tmp_4;
  v21[4] = v16;
  xpc_object_t v22 = v17;
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  dispatch_source_set_cancel_handler(v15, v21);
  dispatch_time_t DispatchTime = ctu::DispatchTimerService::makeDispatchTime(v18, a2);
  dispatch_source_set_timer(v15, DispatchTime, a3, 5uLL);
  if (a4) {
    dispatch_set_qos_class();
  }
  uint64_t v20 = operator new(0x20uLL);
  atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *uint64_t v20 = &unk_1EE2F6768;
  v20[1] = v15;
  v20[2] = v16;
  v20[3] = v17;
  atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  dispatch_activate(v15);
  std::__shared_weak_count::__release_weak(v17);
  *a6 = v20;
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v17);
}

void sub_1920529F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  if (v14) {
    dispatch_release(v14);
  }
  _Unwind_Resume(a1);
}

dispatch_time_t ctu::DispatchTimerService::makeDispatchTime(uint64_t a1, char *a2)
{
  unint64_t v2 = *a2;
  if (v2 <= 2) {
    return dispatch_time(qword_1920BEBE8[v2], 1000 * *((void *)a2 + 1));
  }
  return result;
}

void *__destroy_helper_block_e8_32c27_ZTSNSt3__18functionIFvvEEE(uint64_t a1)
{
  return std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
}

void __destroy_helper_block_e8_32c27_ZTSNSt3__110shared_ptrIvEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void __destroy_helper_block_e8_32b40c22_ZTSN8dispatch6sourceE(uint64_t a1)
{
  unint64_t v2 = *(NSObject **)(a1 + 40);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 32);

  _Block_object_dispose(v3, 7);
}

void ___ZNK3ctu20DispatchTimerService19createDispatchTimerEP16dispatch_queue_sRKNSt3__15tupleIJNS_8TimeTypeENS3_6chrono8durationIxNS3_5ratioILl1ELl1000000EEEEEEEEy11qos_class_tU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  unint64_t v2 = *(NSObject **)(a1 + 40);

  dispatch_source_cancel(v2);
}

uint64_t ___ZN3ctu12TimerService22createOneShotTimerImplENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_5tupleIJNS_8TimeTypeENS1_6chrono8durationIxNS1_5ratioILl1ELl1000000EEEEEEEE11qos_class_tNS1_8functionIFvvEEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  unint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
}

void std::__shared_ptr_pointer<BOOL *,std::shared_ptr<void>::__shared_ptr_default_delete<void,BOOL>,std::allocator<BOOL>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 24);
  if (v1) {
    operator delete(v1);
  }
}

void std::__function::__func<ctu::RestModuleState::getValueOnce(std::string &&,std::function<void ()(xpc::object)> &&)::$_0,std::allocator<std::function<void ()(xpc::object)> &>,xpc::object>::operator()(uint64_t a1, void **a2)
{
  uint64_t v3 = *a2;
  *a2 = xpc_null_create();
  xpc_object_t v4 = xpc_null_create();
  xpc_object_t v12 = v3;
  uint64_t v5 = MEMORY[0x1E4F14590];
  if (v3 && MEMORY[0x192FEE1B0](v3) == v5)
  {
    xpc_retain(v3);
    xpc_object_t v6 = v3;
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t v12 = v6;
  }
  if (MEMORY[0x192FEE1B0](v6) == v5)
  {
    object[0] = &v12;
    object[1] = "v";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v11);
    uint64_t v7 = v11;
    xpc_object_t v11 = v4;
    xpc_release(v4);
    xpc_object_t v11 = 0;
    xpc_object_t v6 = v12;
    xpc_object_t v4 = v7;
  }
  xpc_release(v6);
  object[0] = v4;
  xpc_object_t v8 = xpc_null_create();
  uint64_t v9 = *(void *)(a1 + 32);
  if (!v9) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, xpc_object_t *))(*(void *)v9 + 48))(v9, object);
  xpc_release(object[0]);
  object[0] = 0;
  xpc_release(v8);
  xpc_release(v3);
}

void sub_192052CFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v13);
  xpc_release(v12);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void ctu::rest::RestDispatchConnector::get(uint64_t a1, void **a2, std::__shared_weak_count **a3, NSObject **a4, uint64_t a5)
{
  xpc_object_t v10 = xpc_null_create();
  xpc_object_t v11 = a3[1];
  v12[0] = *a3;
  v12[1] = v11;
  uint64_t v13 = v10;
  *a3 = 0;
  a3[1] = 0;
  ctu::rest::RestDispatchConnector::send_with_reply(a1, "get", a2, &v13, v12, a4, a5);
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
  xpc_release(v10);
}

void sub_192052E98(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  xpc_release(v1);
  _Unwind_Resume(a1);
}

void ctu::RestModule::getPropertyOnce(uint64_t **a1, uint64_t a2, uint64_t a3)
{
}

BOOL ctu::ReplyCallbackRestResourceContext::sendReplyWithValue(ctu::ReplyCallbackRestResourceContext *this, void **a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 8);
  if (v2)
  {
    uint64_t v5 = *((void *)this + 9);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v9 = *((void *)this + 3);
      xpc_object_t v10 = (void *)(v9 + 8);
      if (*(char *)(v9 + 31) < 0) {
        xpc_object_t v10 = (void *)*v10;
      }
      xpc::object::to_string(a2, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 136315650;
      size_t v15 = v10;
      __int16 v16 = 2048;
      uint64_t v17 = v9;
      __int16 v18 = 2080;
      xpc_object_t v19 = p_p;
      _os_log_debug_impl(&dword_192046000, v5, OS_LOG_TYPE_DEBUG, "[conn %s (%p)] Sending reply: %s", buf, 0x20u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    xpc_object_t v6 = *a2;
    xpc_object_t object = v6;
    if (v6) {
      xpc_retain(v6);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    uint64_t v7 = *((void *)this + 8);
    if (!v7) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, xpc_object_t *))(*(void *)v7 + 48))(v7, &object);
    xpc_release(object);
  }
  return v2 != 0;
}

void sub_19205304C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
}

uint64_t ctu::PropertyRestResource::handleMessage_Resource_GET(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, size_t a5, void *a6, size_t a7)
{
  xpc_object_t object = xpc_null_create();
  if (*(unsigned char *)(a1 + 8))
  {
    if (a4)
    {
      std::string::basic_string[abi:ne180100](&__p, a4, a5);
    }
    else
    {
      std::string __p = 0;
      uint64_t v23 = 0;
      uint64_t v24 = 0;
    }
    boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>>::find((uint64_t)&v25, (void ***)(a1 + 16), &__p);
    uint64_t v13 = v25;
    if (SHIBYTE(v24) < 0) {
      operator delete(__p);
    }
    if (v13 != *(void *)(a1 + 16) + 32 * *(void *)(a1 + 24))
    {
      uint64_t v14 = *(void *)(v13 + 24);
      xpc_object_t v15 = *(xpc_object_t *)(v14 + 24);
      if (v15) {
        xpc_retain(*(xpc_object_t *)(v14 + 24));
      }
      else {
        xpc_object_t v15 = xpc_null_create();
      }
      xpc_object_t v16 = object;
      xpc_object_t object = v15;
      xpc_release(v16);
      if (a7)
      {
        if (a6)
        {
          std::string::basic_string[abi:ne180100](&__p, a6, a7);
        }
        else
        {
          std::string __p = 0;
          uint64_t v23 = 0;
          uint64_t v24 = 0;
        }
        xpc::get_subpath(&object, (uint64_t)&__p, &v20);
        xpc_object_t v18 = v20;
        xpc_object_t v17 = object;
        xpc_object_t v20 = object;
        xpc_object_t object = v18;
        xpc_release(v17);
        xpc_object_t v20 = 0;
        if (SHIBYTE(v24) < 0) {
          operator delete(__p);
        }
      }
    }
    (*(void (**)(uint64_t, xpc_object_t *))(*(void *)a2 + 32))(a2, &object);
  }
  else
  {
    (*(void (**)(uint64_t, xpc_object_t *))(*(void *)a2 + 32))(a2, &object);
  }
  xpc_release(object);
  return 1;
}

void sub_19205321C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
}

uint64_t ctu::PropertyRestResource::handleRestMessage_GET(ctu::PropertyRestResource *this, ctu::RestResourceContext *a2, const ctu::PathView *a3)
{
  size_t v14 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v12 = v5;
  long long v13 = v5;
  long long v6 = *((_OWORD *)a3 + 1);
  v11[0] = *(_OWORD *)a3;
  v11[1] = v6;
  switch((int)v12)
  {
    case 1:
      ctu::PropertyRestResource::handleMessage_Root_GET(this, a2);
      break;
    case 2:
      ctu::PropertyRestResource::handleMessage_Meta_GET(v7, a2);
      break;
    case 3:
      ctu::PropertyRestResource::handleMessage_Meta_Watchers_GET(this, a2);
      break;
    case 4:
      ctu::PropertyRestResource::handleMessage_Meta_Watched_GET(this, a2);
      break;
    case 5:
      ctu::PropertyRestResource::handleMessage_Meta_Watched_Meta_Watchers_GET(this, a2);
      break;
    case 6:
      ctu::PropertyRestResource::handleMessage_DumpState_GET(this, a2);
      break;
    case 7:
      ctu::PropertyRestResource::handleMessage_Resource_GET((uint64_t)this, (uint64_t)a2, v8, *((void **)&v12 + 1), v13, *((void **)&v13 + 1), v14);
      break;
    case 8:
      ctu::PropertyRestResource::handleMessage_Resource_Meta_GET(v7, a2);
      break;
    case 9:
      ctu::PropertyRestResource::handleMessage_Resource_Watchers_GET((uint64_t)this, (uint64_t)a2, v8, *((void **)&v12 + 1), v13);
      break;
    default:
      xpc_object_t object = xpc_null_create();
      (*(void (**)(ctu::RestResourceContext *, xpc_object_t *))(*(void *)a2 + 32))(a2, &object);
      xpc_release(object);
      break;
  }
  return 1;
}

void sub_1920533C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void ctu::RestModuleState::getValueOnce(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1[7];
  if (v5 && ((*(uint64_t (**)(uint64_t))(*(void *)v5 + 32))(v5) & 1) != 0)
  {
    uint64_t v7 = a1[7];
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v8 = (const char *)a2;
    }
    else {
      uint64_t v8 = *(const char **)a2;
    }
    xpc_object_t v19 = xpc_string_create(v8);
    if (!v19) {
      xpc_object_t v19 = xpc_null_create();
    }
    uint64_t v9 = (std::__shared_weak_count *)a1[1];
    if (!v9 || (uint64_t v10 = *a1, (v11 = std::__shared_weak_count::lock(v9)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    long long v12 = v11;
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    long long v13 = std::__shared_weak_count::lock(v12);
    size_t v14 = v13;
    if (v13)
    {
      atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_weak(v12);
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    else
    {
      std::__shared_weak_count::__release_weak(v12);
      uint64_t v10 = 0;
    }
    uint64_t v17 = v10;
    xpc_object_t v18 = v14;
    std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)v21, a3);
    uint64_t v23 = 0;
    xpc_object_t v16 = operator new(0x28uLL);
    *xpc_object_t v16 = &unk_1EE2F8348;
    std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)(v16 + 1), (uint64_t)v21);
    uint64_t v23 = v16;
    (*(void (**)(uint64_t, xpc_object_t *, uint64_t *, uint64_t *, void *))(*(void *)v7 + 72))(v7, &v19, &v17, a1 + 2, v22);
    std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100](v22);
    std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100](v21);
    if (v18) {
      std::__shared_weak_count::__release_weak(v18);
    }
    xpc_release(v19);
  }
  else
  {
    xpc_object_t object = xpc_null_create();
    uint64_t v15 = *(void *)(a3 + 24);
    if (!v15) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, xpc_object_t *))(*(void *)v15 + 48))(v15, &object);
    xpc_release(object);
  }
}

void sub_192053600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, xpc_object_t object, xpc_object_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ctu::DispatchTimer::~DispatchTimer(ctu::DispatchTimer *this)
{
  *(void *)this = &unk_1EE2F6768;
  ctu::DispatchTimer::cancel(this);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *((void *)this + 1);
  if (v3) {
    dispatch_release(v3);
  }
}

{
  void *v1;
  uint64_t vars8;

  ctu::DispatchTimer::~DispatchTimer(this);

  operator delete(v1);
}

void ctu::DispatchTimer::cancel(ctu::DispatchTimer *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    dispatch_source_cancel(v2);
    uint64_t v3 = *((void *)this + 1);
    *((void *)this + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
    if (v3)
    {
      dispatch_release(v3);
    }
  }
}

uint64_t _TelephonyUtilDebugPrintError(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if ((_TelephonyUtilDebugFlags & 7) != 0) {
    return gDelegate(result, a2, &a9);
  }
  return result;
}

std::string *ctu::binary@<X0>(ctu *this@<X0>, unint64_t a2@<X8>)
{
  unsigned int v2 = this;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  do
  {
    if (v2) {
      xpc_object_t v4 = "1";
    }
    else {
      xpc_object_t v4 = "0";
    }
    dispatch_time_t result = std::string::append((std::string *)a2, v4, 1uLL);
    BOOL v11 = v2 > 1;
    v2 >>= 1;
  }
  while (v11);
  int v6 = *(char *)(a2 + 23);
  BOOL v7 = v6 < 0;
  if (v6 >= 0) {
    unint64_t v8 = a2;
  }
  else {
    unint64_t v8 = *(void *)a2;
  }
  if (v7) {
    uint64_t v9 = *(void *)(a2 + 8);
  }
  else {
    uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  uint64_t v10 = (unsigned char *)(v8 + v9 - 1);
  if (v9) {
    BOOL v11 = (unint64_t)v10 > v8;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    unint64_t v12 = v8 + 1;
    do
    {
      char v13 = *(unsigned char *)(v12 - 1);
      *(unsigned char *)(v12 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = *v10;
      *v10-- = v13;
    }
    while (v12++ < (unint64_t)v10);
  }
  return result;
}

{
  return ctu::binary((ctu *)this, a2);
}

{
  return ctu::binary((ctu *)this, a2);
}

{
  unsigned int v2;
  const std::string::value_type *v4;
  std::string *result;
  int v6;
  BOOL v7;
  unint64_t v8;
  uint64_t v9;
  unsigned char *v10;
  BOOL v11;
  unint64_t v12;
  char v13;

  unsigned int v2 = this;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  do
  {
    if (v2) {
      xpc_object_t v4 = "1";
    }
    else {
      xpc_object_t v4 = "0";
    }
    dispatch_time_t result = std::string::append((std::string *)a2, v4, 1uLL);
    BOOL v11 = v2 > 1;
    v2 >>= 1;
  }
  while (v11);
  int v6 = *(char *)(a2 + 23);
  BOOL v7 = v6 < 0;
  if (v6 >= 0) {
    unint64_t v8 = a2;
  }
  else {
    unint64_t v8 = *(void *)a2;
  }
  if (v7) {
    uint64_t v9 = *(void *)(a2 + 8);
  }
  else {
    uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  uint64_t v10 = (unsigned char *)(v8 + v9 - 1);
  if (v9) {
    BOOL v11 = (unint64_t)v10 > v8;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    unint64_t v12 = v8 + 1;
    do
    {
      char v13 = *(unsigned char *)(v12 - 1);
      *(unsigned char *)(v12 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = *v10;
      *v10-- = v13;
    }
    while (v12++ < (unint64_t)v10);
  }
  return result;
}

{
  return ctu::binary((ctu *)(unsigned __int16)this, a2);
}

{
  unsigned int v2;
  const std::string::value_type *v4;
  std::string *result;
  int v6;
  BOOL v7;
  unint64_t v8;
  uint64_t v9;
  unsigned char *v10;
  BOOL v11;
  unint64_t v12;
  char v13;

  unsigned int v2 = this;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  do
  {
    if (v2) {
      xpc_object_t v4 = "1";
    }
    else {
      xpc_object_t v4 = "0";
    }
    dispatch_time_t result = std::string::append((std::string *)a2, v4, 1uLL);
    BOOL v11 = v2 > 1;
    v2 >>= 1;
  }
  while (v11);
  int v6 = *(char *)(a2 + 23);
  BOOL v7 = v6 < 0;
  if (v6 >= 0) {
    unint64_t v8 = a2;
  }
  else {
    unint64_t v8 = *(void *)a2;
  }
  if (v7) {
    uint64_t v9 = *(void *)(a2 + 8);
  }
  else {
    uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  uint64_t v10 = (unsigned char *)(v8 + v9 - 1);
  if (v9) {
    BOOL v11 = (unint64_t)v10 > v8;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    unint64_t v12 = v8 + 1;
    do
    {
      char v13 = *(unsigned char *)(v12 - 1);
      *(unsigned char *)(v12 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = *v10;
      *v10-- = v13;
    }
    while (v12++ < (unint64_t)v10);
  }
  return result;
}

void sub_192053850(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_192053934(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_192053A10(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *ctu::binary@<X0>(unint64_t this@<X0>, unint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  do
  {
    if (this) {
      xpc_object_t v4 = "1";
    }
    else {
      xpc_object_t v4 = "0";
    }
    dispatch_time_t result = std::string::append((std::string *)a2, v4, 1uLL);
    BOOL v11 = this > 1;
    this >>= 1;
  }
  while (v11);
  int v6 = *(char *)(a2 + 23);
  BOOL v7 = v6 < 0;
  if (v6 >= 0) {
    unint64_t v8 = a2;
  }
  else {
    unint64_t v8 = *(void *)a2;
  }
  if (v7) {
    uint64_t v9 = *(void *)(a2 + 8);
  }
  else {
    uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  uint64_t v10 = (unsigned char *)(v8 + v9 - 1);
  if (v9) {
    BOOL v11 = (unint64_t)v10 > v8;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    unint64_t v12 = v8 + 1;
    do
    {
      char v13 = *(unsigned char *)(v12 - 1);
      *(unsigned char *)(v12 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = *v10;
      *v10-- = v13;
    }
    while (v12++ < (unint64_t)v10);
  }
  return result;
}

{
  const std::string::value_type *v4;
  std::string *result;
  int v6;
  BOOL v7;
  unint64_t v8;
  uint64_t v9;
  unsigned char *v10;
  BOOL v11;
  unint64_t v12;
  char v13;

  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  do
  {
    if (this) {
      xpc_object_t v4 = "1";
    }
    else {
      xpc_object_t v4 = "0";
    }
    dispatch_time_t result = std::string::append((std::string *)a2, v4, 1uLL);
    BOOL v11 = this > 1;
    this >>= 1;
  }
  while (v11);
  int v6 = *(char *)(a2 + 23);
  BOOL v7 = v6 < 0;
  if (v6 >= 0) {
    unint64_t v8 = a2;
  }
  else {
    unint64_t v8 = *(void *)a2;
  }
  if (v7) {
    uint64_t v9 = *(void *)(a2 + 8);
  }
  else {
    uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  uint64_t v10 = (unsigned char *)(v8 + v9 - 1);
  if (v9) {
    BOOL v11 = (unint64_t)v10 > v8;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    unint64_t v12 = v8 + 1;
    do
    {
      char v13 = *(unsigned char *)(v12 - 1);
      *(unsigned char *)(v12 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = *v10;
      *v10-- = v13;
    }
    while (v12++ < (unint64_t)v10);
  }
  return result;
}

void sub_192053AE8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_192053BC0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void ctu::binary0(ctu *this@<X0>, std::string *a2@<X8>)
{
  unsigned int v2 = this;
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::string::resize(a2, 8uLL, 48);
  if (v2)
  {
    int v4 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
    BOOL v5 = v4 < 0;
    int v6 = (std::string *)a2->__r_.__value_.__r.__words[0];
    if (v4 >= 0) {
      int v6 = a2;
    }
    std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    if (v5) {
      std::string::size_type size = a2->__r_.__value_.__l.__size_;
    }
    unint64_t v8 = (char *)v6 + size - 1;
    do
    {
      if (v2) {
        *unint64_t v8 = 49;
      }
      --v8;
      BOOL v9 = v2 > 1;
      v2 >>= 1;
    }
    while (v9);
  }
}

{
  ctu::binary0((ctu *)this, a2);
}

{
  ctu::binary0((ctu *)this, a2);
}

{
  unsigned int v2;
  int v4;
  BOOL v5;
  std::string *v6;
  std::string::size_type size;
  unsigned char *v8;
  BOOL v9;

  unsigned int v2 = this;
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::string::resize(a2, 0x10uLL, 48);
  if (v2)
  {
    int v4 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
    BOOL v5 = v4 < 0;
    int v6 = (std::string *)a2->__r_.__value_.__r.__words[0];
    if (v4 >= 0) {
      int v6 = a2;
    }
    std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    if (v5) {
      std::string::size_type size = a2->__r_.__value_.__l.__size_;
    }
    unint64_t v8 = (char *)v6 + size - 1;
    do
    {
      if (v2) {
        *unint64_t v8 = 49;
      }
      --v8;
      BOOL v9 = v2 > 1;
      v2 >>= 1;
    }
    while (v9);
  }
}

{
  ctu::binary0((ctu *)(unsigned __int16)this, a2);
}

{
  unsigned int v2;
  int v4;
  BOOL v5;
  std::string *v6;
  std::string::size_type size;
  unsigned char *v8;
  BOOL v9;

  unsigned int v2 = this;
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::string::resize(a2, 0x20uLL, 48);
  if (v2)
  {
    int v4 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
    BOOL v5 = v4 < 0;
    int v6 = (std::string *)a2->__r_.__value_.__r.__words[0];
    if (v4 >= 0) {
      int v6 = a2;
    }
    std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    if (v5) {
      std::string::size_type size = a2->__r_.__value_.__l.__size_;
    }
    unint64_t v8 = (char *)v6 + size - 1;
    do
    {
      if (v2) {
        *unint64_t v8 = 49;
      }
      --v8;
      BOOL v9 = v2 > 1;
      v2 >>= 1;
    }
    while (v9);
  }
}

void sub_192053C60(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_192053D0C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_192053DB0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void ctu::binary0(unint64_t this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::string::resize(a2, 0x40uLL, 48);
  if (this)
  {
    int v4 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
    BOOL v5 = v4 < 0;
    int v6 = (std::string *)a2->__r_.__value_.__r.__words[0];
    if (v4 >= 0) {
      int v6 = a2;
    }
    std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    if (v5) {
      std::string::size_type size = a2->__r_.__value_.__l.__size_;
    }
    unint64_t v8 = (char *)v6 + size - 1;
    do
    {
      if (this) {
        *unint64_t v8 = 49;
      }
      --v8;
      BOOL v9 = this > 1;
      this >>= 1;
    }
    while (v9);
  }
}

{
  int v4;
  BOOL v5;
  std::string *v6;
  std::string::size_type size;
  unsigned char *v8;
  BOOL v9;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::string::resize(a2, 0x40uLL, 48);
  if (this)
  {
    int v4 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
    BOOL v5 = v4 < 0;
    int v6 = (std::string *)a2->__r_.__value_.__r.__words[0];
    if (v4 >= 0) {
      int v6 = a2;
    }
    std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    if (v5) {
      std::string::size_type size = a2->__r_.__value_.__l.__size_;
    }
    unint64_t v8 = (char *)v6 + size - 1;
    do
    {
      if (this) {
        *unint64_t v8 = 49;
      }
      --v8;
      BOOL v9 = this > 1;
      this >>= 1;
    }
    while (v9);
  }
}

void sub_192053E50(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_192053EF0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::bitfield(unsigned int a1, unsigned int a2)
{
  if ((BYTE1(a2) - a2) > 7u) {
    return 0;
  }
  int v2 = 0;
  int v3 = (a2 >> 8) - a2 + 1;
  do
  {
    int v2 = (2 * v2) | 1;
    --v3;
  }
  while ((_BYTE)v3);
  return v2 & (a1 >> a2);
}

{
  int v2;
  int v3;

  if ((BYTE1(a2) - a2) > 0xFu) {
    return 0;
  }
  int v2 = 0;
  int v3 = (a2 >> 8) - a2 + 1;
  do
  {
    int v2 = (2 * v2) | 1;
    --v3;
  }
  while ((_BYTE)v3);
  return v2 & (a1 >> a2);
}

{
  int v2;
  int v3;

  if ((BYTE1(a2) - a2) > 0x1Fu) {
    return 0;
  }
  int v2 = 0;
  int v3 = (a2 >> 8) - a2 + 1;
  do
  {
    int v2 = (2 * v2) | 1;
    --v3;
  }
  while ((_BYTE)v3);
  return v2 & (a1 >> a2);
}

{
  int v2;
  int v3;

  if ((BYTE1(a2) - a2) > 0x1Fu) {
    return 0;
  }
  int v2 = 0;
  int v3 = (a2 >> 8) - a2 + 1;
  do
  {
    int v2 = (2 * v2) | 1;
    --v3;
  }
  while ((_BYTE)v3);
  return v2 & (a1 >> a2);
}

uint64_t ctu::bitfield(unsigned __int8 a1, unsigned int a2)
{
  if ((BYTE1(a2) - a2) > 7u) {
    return 0;
  }
  int v2 = 0;
  int v3 = (a2 >> 8) - a2 + 1;
  do
  {
    int v2 = (2 * v2) | 1;
    --v3;
  }
  while ((_BYTE)v3);
  return v2 & (a1 >> a2);
}

{
  int v2;
  int v3;

  if ((BYTE1(a2) - a2) > 7u) {
    return 0;
  }
  int v2 = 0;
  int v3 = (a2 >> 8) - a2 + 1;
  do
  {
    int v2 = (2 * v2) | 1;
    --v3;
  }
  while ((_BYTE)v3);
  return v2 & (a1 >> a2);
}

uint64_t ctu::bitfield(unsigned __int16 a1, unsigned int a2)
{
  if ((BYTE1(a2) - a2) > 0xFu) {
    return 0;
  }
  int v2 = 0;
  int v3 = (a2 >> 8) - a2 + 1;
  do
  {
    int v2 = (2 * v2) | 1;
    --v3;
  }
  while ((_BYTE)v3);
  return v2 & (a1 >> a2);
}

uint64_t ctu::bitfield(unint64_t a1, unsigned int a2)
{
  if ((BYTE1(a2) - a2) > 0x3Fu) {
    return 0;
  }
  uint64_t v2 = 0;
  int v3 = (a2 >> 8) - a2 + 1;
  do
  {
    uint64_t v2 = (2 * v2) | 1;
    --v3;
  }
  while ((_BYTE)v3);
  return v2 & (a1 >> a2);
}

{
  uint64_t v2;
  int v3;

  if ((BYTE1(a2) - a2) > 0x3Fu) {
    return 0;
  }
  uint64_t v2 = 0;
  int v3 = (a2 >> 8) - a2 + 1;
  do
  {
    uint64_t v2 = (2 * v2) | 1;
    --v3;
  }
  while ((_BYTE)v3);
  return v2 & (a1 >> a2);
}

{
  uint64_t v2;
  int v3;

  if ((BYTE1(a2) - a2) > 0x3Fu) {
    return 0;
  }
  uint64_t v2 = 0;
  int v3 = (a2 >> 8) - a2 + 1;
  do
  {
    uint64_t v2 = (2 * v2) | 1;
    --v3;
  }
  while ((_BYTE)v3);
  return v2 & (a1 >> a2);
}

{
  uint64_t v2;
  int v3;

  if ((BYTE1(a2) - a2) > 0x3Fu) {
    return 0;
  }
  uint64_t v2 = 0;
  int v3 = (a2 >> 8) - a2 + 1;
  do
  {
    uint64_t v2 = (2 * v2) | 1;
    --v3;
  }
  while ((_BYTE)v3);
  return v2 & (a1 >> a2);
}

void ctu::bitfieldPrettyPrint(unsigned int a1@<W0>, unsigned __int16 a2@<W1>, std::string::value_type a3@<W2>, unint64_t a4@<X8>)
{
}

{
  ctu::bitfieldPrettyPrint(a1, a2, a3, a4);
}

void ctu::to_bitfieldPrettyPrint<unsigned char>(unsigned int a1@<W0>, unint64_t a2@<X1>, std::string::value_type a3@<W2>, unint64_t a4@<X8>)
{
  unsigned int v4 = a2;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if ((((a2 >> 8) - a2) & 0xF8) == 0)
  {
    unsigned int v6 = a2;
    if ((BYTE1(a2) - a2) > 7u)
    {
      int v9 = 0;
    }
    else
    {
      int v7 = 0;
      int v8 = (a2 >> 8) - a2 + 1;
      do
      {
        int v7 = (2 * v7) | 1;
        --v8;
      }
      while ((_BYTE)v8);
      int v9 = v7 & (a1 >> a2);
    }
    std::string::resize((std::string *)a4, 8uLL, a3);
    if (BYTE1(v4) >= v6)
    {
      int v10 = 1;
      unsigned int v11 = v4 >> 8;
      do
      {
        if ((v10 & v9) != 0) {
          char v12 = 49;
        }
        else {
          char v12 = 48;
        }
        if (*(char *)(a4 + 23) >= 0) {
          unint64_t v13 = a4;
        }
        else {
          unint64_t v13 = *(void *)a4;
        }
        *(unsigned char *)(v13 + v4) = v12;
        int v10 = 2 * v10;
        ++v4;
      }
      while (v4 <= v11);
    }
    int v14 = *(char *)(a4 + 23);
    BOOL v15 = v14 < 0;
    if (v14 >= 0) {
      unint64_t v16 = a4;
    }
    else {
      unint64_t v16 = *(void *)a4;
    }
    if (v15) {
      uint64_t v17 = *(void *)(a4 + 8);
    }
    else {
      uint64_t v17 = *(unsigned __int8 *)(a4 + 23);
    }
    xpc_object_t v18 = (unsigned char *)(v16 + v17 - 1);
    if (v17) {
      BOOL v19 = (unint64_t)v18 > v16;
    }
    else {
      BOOL v19 = 0;
    }
    if (v19)
    {
      unint64_t v20 = v16 + 1;
      do
      {
        char v21 = *(unsigned char *)(v20 - 1);
        *(unsigned char *)(v20 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = *v18;
        *v18-- = v21;
      }
      while (v20++ < (unint64_t)v18);
    }
  }
}

void sub_19205436C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void ctu::bitfieldPrettyPrint(unsigned __int8 a1@<W0>, unsigned __int16 a2@<W1>, std::string::value_type a3@<W2>, unint64_t a4@<X8>)
{
}

{
  ctu::to_bitfieldPrettyPrint<unsigned char>(a1, a2, a3, a4);
}

void ctu::bitfieldPrettyPrint(std::string::value_type __c@<W2>, unsigned int a2@<W0>, unsigned __int16 a3@<W1>, std::string *a4@<X8>)
{
}

void ctu::to_bitfieldPrettyPrint<unsigned short>(std::string *this, unsigned int a2, unint64_t a3, std::string::value_type __c)
{
  unsigned int v4 = a3;
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  if ((((a3 >> 8) - a3) & 0xF0) == 0)
  {
    unsigned int v6 = a3;
    if ((BYTE1(a3) - a3) > 0xFu)
    {
      LOBYTE(v9) = 0;
    }
    else
    {
      int v7 = 0;
      int v8 = (a3 >> 8) - a3 + 1;
      do
      {
        int v7 = (2 * v7) | 1;
        --v8;
      }
      while ((_BYTE)v8);
      int v9 = v7 & (a2 >> a3);
    }
    std::string::resize(this, 0x10uLL, __c);
    if (BYTE1(v4) >= v6)
    {
      char v10 = 1;
      unsigned int v11 = v4 >> 8;
      do
      {
        if ((v10 & v9) != 0) {
          char v12 = 49;
        }
        else {
          char v12 = 48;
        }
        if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v13 = this;
        }
        else {
          unint64_t v13 = (std::string *)this->__r_.__value_.__r.__words[0];
        }
        v13->__r_.__value_.__s.__data_[v4] = v12;
        v10 *= 2;
        ++v4;
      }
      while (v4 <= v11);
    }
    int v14 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
    BOOL v15 = v14 < 0;
    if (v14 >= 0) {
      unint64_t v16 = this;
    }
    else {
      unint64_t v16 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    if (v15) {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
    }
    else {
      std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    }
    xpc_object_t v18 = (std::string *)((char *)v16 + size - 1);
    if (size) {
      BOOL v19 = v18 > v16;
    }
    else {
      BOOL v19 = 0;
    }
    if (v19)
    {
      unint64_t v20 = &v16->__r_.__value_.__s.__data_[1];
      do
      {
        std::string::value_type v21 = *(v20 - 1);
        *(v20 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v18->__r_.__value_.__s.__data_[0];
        v18->__r_.__value_.__s.__data_[0] = v21;
        xpc_object_t v18 = (std::string *)((char *)v18 - 1);
      }
      while (v20++ < (char *)v18);
    }
  }
}

void sub_1920544F0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void ctu::bitfieldPrettyPrint(std::string::value_type __c@<W2>, unsigned __int16 a2@<W0>, unsigned __int16 a3@<W1>, std::string *a4@<X8>)
{
}

void ctu::bitfieldPrettyPrint(unsigned int a1@<W0>, int a2@<W1>, std::string::value_type a3@<W2>, unint64_t a4@<X8>)
{
  unint64_t v5 = (unsigned __int16)a2;
  unsigned int v6 = BYTE1(a2);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if (((BYTE1(a2) - (_BYTE)a2) & 0xE0) == 0)
  {
    int v7 = a2;
    unsigned int v8 = a2;
    if ((BYTE1(a2) - a2) > 0x1Fu)
    {
      LOBYTE(v1ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
    }
    else
    {
      int v9 = 0;
      int v10 = BYTE1(a2) - (unsigned __int16)a2 + 1;
      do
      {
        int v9 = (2 * v9) | 1;
        --v10;
      }
      while ((_BYTE)v10);
      int v11 = v9 & (a1 >> a2);
    }
    std::string::resize((std::string *)a4, 0x20uLL, a3);
    if (v8 <= v6)
    {
      char v12 = 1;
      do
      {
        if ((v12 & v11) != 0) {
          char v13 = 49;
        }
        else {
          char v13 = 48;
        }
        if (*(char *)(a4 + 23) >= 0) {
          unint64_t v14 = a4;
        }
        else {
          unint64_t v14 = *(void *)a4;
        }
        *(unsigned char *)(v14 + v7) = v13;
        v12 *= 2;
        ++v7;
      }
      while ((v5 >> 8) >= v7);
    }
    int v15 = *(char *)(a4 + 23);
    BOOL v16 = v15 < 0;
    if (v15 >= 0) {
      unint64_t v17 = a4;
    }
    else {
      unint64_t v17 = *(void *)a4;
    }
    if (v16) {
      uint64_t v18 = *(void *)(a4 + 8);
    }
    else {
      uint64_t v18 = *(unsigned __int8 *)(a4 + 23);
    }
    BOOL v19 = (unsigned char *)(v17 + v18 - 1);
    if (v18) {
      BOOL v20 = (unint64_t)v19 > v17;
    }
    else {
      BOOL v20 = 0;
    }
    if (v20)
    {
      unint64_t v21 = v17 + 1;
      do
      {
        char v22 = *(unsigned char *)(v21 - 1);
        *(unsigned char *)(v21 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = *v19;
        *v19-- = v22;
      }
      while (v21++ < (unint64_t)v19);
    }
  }
}

void sub_192054658(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void ctu::bitfieldPrettyPrint(unint64_t a1@<X0>, int a2@<W1>, std::string::value_type a3@<W2>, unint64_t a4@<X8>)
{
  unint64_t v5 = (unsigned __int16)a2;
  unsigned int v6 = BYTE1(a2);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if (((BYTE1(a2) - (_BYTE)a2) & 0xC0) == 0)
  {
    int v7 = a2;
    if ((BYTE1(a2) - a2) > 0x3Fu)
    {
      LOBYTE(v10) = 0;
    }
    else
    {
      uint64_t v8 = 0;
      int v9 = BYTE1(a2) - (unsigned __int16)a2 + 1;
      do
      {
        uint64_t v8 = (2 * v8) | 1;
        --v9;
      }
      while ((_BYTE)v9);
      uint64_t v10 = v8 & (a1 >> a2);
    }
    std::string::resize((std::string *)a4, 0x40uLL, a3);
    if (v6 >= v5)
    {
      char v11 = 1;
      do
      {
        if ((v11 & v10) != 0) {
          char v12 = 49;
        }
        else {
          char v12 = 48;
        }
        if (*(char *)(a4 + 23) >= 0) {
          unint64_t v13 = a4;
        }
        else {
          unint64_t v13 = *(void *)a4;
        }
        *(unsigned char *)(v13 + v7) = v12;
        v11 *= 2;
        ++v7;
      }
      while ((v5 >> 8) >= v7);
    }
    int v14 = *(char *)(a4 + 23);
    BOOL v15 = v14 < 0;
    if (v14 >= 0) {
      unint64_t v16 = a4;
    }
    else {
      unint64_t v16 = *(void *)a4;
    }
    if (v15) {
      uint64_t v17 = *(void *)(a4 + 8);
    }
    else {
      uint64_t v17 = *(unsigned __int8 *)(a4 + 23);
    }
    uint64_t v18 = (unsigned char *)(v16 + v17 - 1);
    if (v17) {
      BOOL v19 = (unint64_t)v18 > v16;
    }
    else {
      BOOL v19 = 0;
    }
    if (v19)
    {
      unint64_t v20 = v16 + 1;
      do
      {
        char v21 = *(unsigned char *)(v20 - 1);
        *(unsigned char *)(v20 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = *v18;
        *v18-- = v21;
      }
      while (v20++ < (unint64_t)v18);
    }
  }
}

{
  unint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char v11;
  char v12;
  unint64_t v13;
  int v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  unsigned char *v18;
  BOOL v19;
  unint64_t v20;
  char v21;

  unint64_t v5 = (unsigned __int16)a2;
  unsigned int v6 = BYTE1(a2);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if (((BYTE1(a2) - (_BYTE)a2) & 0xC0) == 0)
  {
    int v7 = a2;
    if ((BYTE1(a2) - a2) > 0x3Fu)
    {
      LOBYTE(v10) = 0;
    }
    else
    {
      uint64_t v8 = 0;
      int v9 = BYTE1(a2) - (unsigned __int16)a2 + 1;
      do
      {
        uint64_t v8 = (2 * v8) | 1;
        --v9;
      }
      while ((_BYTE)v9);
      uint64_t v10 = v8 & (a1 >> a2);
    }
    std::string::resize((std::string *)a4, 0x40uLL, a3);
    if (v6 >= v5)
    {
      char v11 = 1;
      do
      {
        if ((v11 & v10) != 0) {
          char v12 = 49;
        }
        else {
          char v12 = 48;
        }
        if (*(char *)(a4 + 23) >= 0) {
          unint64_t v13 = a4;
        }
        else {
          unint64_t v13 = *(void *)a4;
        }
        *(unsigned char *)(v13 + v7) = v12;
        v11 *= 2;
        ++v7;
      }
      while ((v5 >> 8) >= v7);
    }
    int v14 = *(char *)(a4 + 23);
    BOOL v15 = v14 < 0;
    if (v14 >= 0) {
      unint64_t v16 = a4;
    }
    else {
      unint64_t v16 = *(void *)a4;
    }
    if (v15) {
      uint64_t v17 = *(void *)(a4 + 8);
    }
    else {
      uint64_t v17 = *(unsigned __int8 *)(a4 + 23);
    }
    uint64_t v18 = (unsigned char *)(v16 + v17 - 1);
    if (v17) {
      BOOL v19 = (unint64_t)v18 > v16;
    }
    else {
      BOOL v19 = 0;
    }
    if (v19)
    {
      unint64_t v20 = v16 + 1;
      do
      {
        char v21 = *(unsigned char *)(v20 - 1);
        *(unsigned char *)(v20 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = *v18;
        *v18-- = v21;
      }
      while (v20++ < (unint64_t)v18);
    }
  }
}

void sub_1920547B4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void ctu::bitfieldPrettyPrint(unint64_t a1@<X0>, unsigned __int16 a2@<W1>, std::string::value_type a3@<W2>, unint64_t a4@<X8>)
{
}

{
  ctu::bitfieldPrettyPrint(a1, a2, a3, a4);
}

void sub_192054910(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E5743E88, MEMORY[0x1E4FBA1C8]);
}

void sub_192054994(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  dispatch_time_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D0] + 16);
  return result;
}

uint64_t ctu::MapRestResource::MapRestResource(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1EE2F6888;
  std::__function::__value_func<std::unique_ptr<ctu::RestResourceBase> ()(std::string const&,xpc::object)>::__value_func[abi:ne180100](a1 + 8, a2);
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return a1;
}

{
  *(void *)a1 = &unk_1EE2F6888;
  std::__function::__value_func<std::unique_ptr<ctu::RestResourceBase> ()(std::string const&,xpc::object)>::__value_func[abi:ne180100](a1 + 8, a2);
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return a1;
}

void ctu::MapRestResource::~MapRestResource(ctu::MapRestResource *this)
{
  *(void *)this = &unk_1EE2F6888;
  boost::container::vector<std::weak_ptr<ctu::RestResourceConnection>,boost::container::new_allocator<std::weak_ptr<ctu::RestResourceConnection>>,void>::~vector((void *)this + 8);
  uint64_t v2 = *((void *)this + 6);
  if (v2)
  {
    int v3 = (uint64_t *)(*((void *)this + 5) + 24);
    do
    {
      uint64_t v4 = *v3;
      uint64_t *v3 = 0;
      if (v4) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
      if (*((char *)v3 - 1) < 0) {
        operator delete((void *)*(v3 - 3));
      }
      v3 += 4;
      --v2;
    }
    while (v2);
  }
  if (*((void *)this + 7)) {
    operator delete(*((void **)this + 5));
  }
  unint64_t v5 = (ctu::MapRestResource *)*((void *)this + 4);
  if (v5 == (ctu::MapRestResource *)((char *)this + 8))
  {
    (*(void (**)(char *))(*((void *)this + 1) + 32))((char *)this + 8);
  }
  else if (v5)
  {
    (*(void (**)(ctu::MapRestResource *))(*(void *)v5 + 40))(v5);
  }
}

{
  void *v1;
  uint64_t vars8;

  ctu::MapRestResource::~MapRestResource(this);

  operator delete(v1);
}

uint64_t ctu::MapRestResource::handleRestMessage_GET(ctu::MapRestResource *this, ctu::RestResourceContext *a2, const ctu::PathView *a3)
{
  uint64_t v5 = *((void *)a3 + 3);
  if (!v5)
  {
    ctu::MapRestResource::handleMessage_Root_GET(this, a2);
    return 1;
  }
  if (v5 == 1)
  {
    int v7 = **((unsigned __int8 **)a3 + 2);
    if (v7 == 42)
    {
      v26[0] = 0;
      v26[1] = 0;
      uint64_t v27 = 0;
      __p.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v11 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v11 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v29 = v11;
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v11;
      long long v28 = v11;
      ctu::ReplyDictRestResourceContextDecorator::ReplyDictRestResourceContextDecorator((ctu::ReplyDictRestResourceContextDecorator *)&v28, a2);
      uint64_t v12 = *((void *)this + 6);
      if (v12)
      {
        uint64_t v13 = *((void *)this + 5);
        uint64_t v14 = v13 + 32 * v12;
        do
        {
          std::string::operator=(&__p, (const std::string *)v13);
          *(void *)&long long v15 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v15 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
          long long v31 = v15;
          long long v32 = v15;
          if (*((void *)a3 + 3))
          {
            unint64_t v16 = *(unsigned __int8 **)a3;
            unint64_t v17 = *((void *)a3 + 2) - *(void *)a3;
            unint64_t v18 = v17 - 1;
            if (v17 > 1)
            {
              unint64_t v17 = *((void *)a3 + 1);
              if (v18 < v17) {
                unint64_t v17 = v18;
              }
            }
            else if (v17 >= *((void *)a3 + 1))
            {
              unint64_t v17 = *((void *)a3 + 1);
            }
          }
          else
          {
            unint64_t v16 = *(unsigned __int8 **)a3;
            unint64_t v17 = *((void *)a3 + 1);
          }
          v25[0] = v16;
          v25[1] = v17;
          ctu::splice_path_with_head<ctu::llvm::StringRef,std::string &,char const(&)[2]>((uint64_t)v26, (uint64_t)v25, v13, "*", (uint64_t)&v31);
          ctu::PathView::advance((uint64_t)&v31, 1);
          (*(void (**)(void, long long *, long long *))(**(void **)(v13 + 24) + 16))(*(void *)(v13 + 24), &v28, &v31);
          v13 += 32;
        }
        while (v13 != v14);
      }
      *(void *)&long long v28 = &unk_1EE2F72E8;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (*((void *)&v29 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v29 + 1));
      }
      if (SHIBYTE(v27) < 0) {
        operator delete(v26[0]);
      }
      return 1;
    }
    if (v7 == 95)
    {
      long long v8 = *((_OWORD *)a3 + 1);
      long long v31 = *(_OWORD *)a3;
      long long v32 = v8;
      int v9 = (ctu::MapRestResource *)ctu::PathView::advance((uint64_t)&v31, 1);
      if (*((void *)&v32 + 1))
      {
        if (*((void *)&v32 + 1) == 3)
        {
          if (*(_WORD *)v32 == 27745 && *(unsigned char *)(v32 + 2) == 108)
          {
            __p.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAAAALL;
            *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
            *((void *)&v20 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
            long long v29 = v20;
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
            long long v28 = v20;
            ctu::ReplyDictRestResourceContextDecorator::ReplyDictRestResourceContextDecorator((ctu::ReplyDictRestResourceContextDecorator *)&v28, a2);
            uint64_t v21 = *((void *)this + 6);
            if (v21)
            {
              uint64_t v22 = *((void *)this + 5);
              uint64_t v23 = v22 + 32 * v21;
              do
              {
                std::string::operator=(&__p, (const std::string *)v22);
                (*(void (**)(void, long long *, long long *))(**(void **)(v22 + 24) + 16))(*(void *)(v22 + 24), &v28, &v31);
                v22 += 32;
              }
              while (v22 != v23);
            }
            ctu::ReplyDictRestResourceContextDecorator::~ReplyDictRestResourceContextDecorator((void **)&v28);
            return 1;
          }
        }
        else if (*((void *)&v32 + 1) == 6)
        {
          if (*(_DWORD *)v32 == 1768189805 && *(_WORD *)(v32 + 4) == 31078) {
            return 1;
          }
        }
        else if (*((void *)&v32 + 1) == 8 && *(void *)v32 == 0x7372656863746177)
        {
          if ((void)v31 + *((void *)&v31 + 1) == (void)v32 + 8
            || (void)v32 + 9 == (void)v31 + *((void *)&v31 + 1))
          {
            ctu::MapRestResource::handleMessage_Watchers_GET(this, a2);
          }
          return 1;
        }
        return 0;
      }
      ctu::MapRestResource::handleMessage_Meta_GET(v9, a2);
      return 1;
    }
  }

  return ctu::MapRestResource::handleMessage_Resource((void ***)this, a2, a3);
}

void sub_192054F28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
}

uint64_t ctu::MapRestResource::handleMessage_Root_GET(ctu::MapRestResource *this, ctu::RestResourceContext *a2)
{
  ctu::MapRestResource::getResourceList(this, &object);
  xpc_object_t v5 = object;
  if (object) {
    xpc_retain(object);
  }
  else {
    xpc_object_t v5 = xpc_null_create();
  }
  (*(void (**)(ctu::RestResourceContext *, xpc_object_t *))(*(void *)a2 + 32))(a2, &v5);
  xpc_release(v5);
  xpc_object_t v5 = 0;
  xpc_release(object);
  return 1;
}

void sub_192055004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, xpc_object_t object)
{
}

uint64_t ctu::MapRestResource::handleMessage_Meta_GET(ctu::MapRestResource *this, ctu::RestResourceContext *a2)
{
  xpc::array_creator::array_creator((xpc::array_creator *)&object);
  xpc::array_creator::operator()<char const*>("watchers", &object, &v5);
  xpc_release(object);
  xpc_object_t v3 = v5;
  xpc_object_t v5 = xpc_null_create();
  xpc_release(v5);
  xpc_object_t object = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(ctu::RestResourceContext *, xpc_object_t *))(*(void *)a2 + 32))(a2, &object);
  xpc_release(object);
  xpc_release(v3);
  return 1;
}

void sub_1920550F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

uint64_t ctu::MapRestResource::handleMessage_Watchers_GET(ctu::MapRestResource *this, ctu::RestResourceContext *a2)
{
  xpc_object_t v4 = xpc_array_create(0, 0);
  if (v4 || (xpc_object_t v4 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x192FEE1B0](v4) == MEMORY[0x1E4F14568])
    {
      xpc_retain(v4);
      xpc_object_t v5 = v4;
    }
    else
    {
      xpc_object_t v5 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t v4 = 0;
  }
  xpc_release(v4);
  if (*((void *)this + 9))
  {
    unsigned int v6 = (uint64_t *)*((void *)this + 8);
    do
    {
      int v7 = (std::__shared_weak_count *)v6[1];
      if (v7)
      {
        long long v8 = std::__shared_weak_count::lock(v7);
        if (v8)
        {
          uint64_t v9 = *v6;
          if (*v6)
          {
            uint64_t v12 = *(const char **)(v9 + 8);
            uint64_t v10 = v9 + 8;
            long long v11 = v12;
            if (*(char *)(v10 + 23) >= 0) {
              uint64_t v13 = (const char *)v10;
            }
            else {
              uint64_t v13 = v11;
            }
            xpc_object_t v14 = xpc_string_create(v13);
            if (!v14) {
              xpc_object_t v14 = xpc_null_create();
            }
            xpc_array_append_value(v5, v14);
            xpc_release(v14);
            v6 += 2;
LABEL_20:
            std::__shared_weak_count::__release_shared[abi:ne180100](v8);
            continue;
          }
        }
      }
      else
      {
        long long v8 = 0;
      }
      xpc_object_t object = v6;
      boost::container::vector<std::weak_ptr<ctu::RestResourceConnection>,boost::container::new_allocator<std::weak_ptr<ctu::RestResourceConnection>>,void>::erase((void *)this + 8, (uint64_t *)&object, &v16);
      unsigned int v6 = v16;
      if (v8) {
        goto LABEL_20;
      }
    }
    while (v6 != (uint64_t *)(*((void *)this + 8) + 16 * *((void *)this + 9)));
  }
  xpc_object_t object = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(ctu::RestResourceContext *, xpc_object_t *))(*(void *)a2 + 32))(a2, &object);
  xpc_release(object);
  xpc_release(v5);
  return 1;
}

void sub_1920552F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

void ctu::ReplyDictRestResourceContextDecorator::~ReplyDictRestResourceContextDecorator(void **this)
{
  *this = &unk_1EE2F72E8;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  uint64_t v2 = (std::__shared_weak_count *)this[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *this = &unk_1EE2F72E8;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  uint64_t v2 = (std::__shared_weak_count *)this[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(this);
}

uint64_t ctu::splice_path_with_head<ctu::llvm::StringRef,std::string &,char const(&)[2]>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X8>)
{
  memset(&__dst, 170, sizeof(__dst));
  uint64_t v10 = *(void **)a2;
  if (v10) {
    std::string::basic_string[abi:ne180100](&__dst, v10, *(void *)(a2 + 8));
  }
  else {
    memset(&__dst, 0, sizeof(__dst));
  }
  int v11 = *(char *)(a3 + 23);
  if (v11 >= 0) {
    uint64_t v12 = (unsigned char *)a3;
  }
  else {
    uint64_t v12 = *(unsigned char **)a3;
  }
  if (v11 >= 0) {
    size_t v13 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    size_t v13 = *(void *)(a3 + 8);
  }
  ctu::path_join_impl(&__dst, v12, v13);
  size_t v14 = strlen(a4);
  ctu::path_join_impl(&__dst, a4, v14);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
  unint64_t v15 = __dst.__r_.__value_.__r.__words[2];
  *(void *)(a1 + 16) = *((void *)&__dst.__r_.__value_.__l + 2);
  *(void *)&long long v16 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v16 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)a5 = v16;
  *(_OWORD *)(a5 + 16) = v16;
  unint64_t v17 = HIBYTE(v15);
  if ((v17 & 0x80u) == 0) {
    unint64_t v18 = (void *)a1;
  }
  else {
    unint64_t v18 = *(void **)a1;
  }
  if ((v17 & 0x80u) == 0) {
    unint64_t v19 = v17;
  }
  else {
    unint64_t v19 = *(void *)(a1 + 8);
  }
  long long v20 = ctu::PathView::PathView((void *)a5, (uint64_t)v18, v19);
  return ctu::PathView::skip(v20, *(unsigned char **)a2, *(void *)(a2 + 8));
}

void sub_1920554B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::MapRestResource::handleMessage_Resource(void ***this, ctu::RestResourceContext *a2, const ctu::PathView *a3)
{
  xpc_object_t v5 = (void *)*((void *)a3 + 2);
  size_t v6 = *((void *)a3 + 3);
  long long v7 = *((_OWORD *)a3 + 1);
  v10[0] = *(_OWORD *)a3;
  v10[1] = v7;
  ctu::PathView::advance((uint64_t)v10, 1);
  if (v5)
  {
    std::string::basic_string[abi:ne180100](__p, v5, v6);
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v12 = 0;
  }
  boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>>::find((uint64_t)&v13, this + 5, __p);
  uint64_t v8 = v13;
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[0]);
  }
  if ((void **)v8 == &this[5][4 * (void)this[6]]) {
    return 0;
  }
  else {
    return (*(uint64_t (**)(void, ctu::RestResourceContext *, _OWORD *))(**(void **)(v8 + 24) + 16))(*(void *)(v8 + 24), a2, v10);
  }
}

uint64_t ctu::MapRestResource::handleRestMessage_SET(void ***this, ctu::RestResourceContext *a2, const ctu::PathView *a3)
{
  uint64_t v3 = *((void *)a3 + 3);
  if (!v3) {
    return 1;
  }
  if (v3 == 1 && **((unsigned char **)a3 + 2) == 95)
  {
    long long v4 = *((_OWORD *)a3 + 1);
    long long v8 = *(_OWORD *)a3;
    long long v9 = v4;
    uint64_t v5 = 1;
    ctu::PathView::advance((uint64_t)&v8, 1);
    if (*((void *)&v9 + 1))
    {
      if (*((void *)&v9 + 1) == 6) {
        return *(_DWORD *)v9 == 1768189805 && *(_WORD *)(v9 + 4) == 31078;
      }
      if (*((void *)&v9 + 1) == 8) {
        return *(void *)v9 == 0x7372656863746177;
      }
      return 0;
    }
    return v5;
  }

  return ctu::MapRestResource::handleMessage_Resource(this, a2, a3);
}

uint64_t ctu::MapRestResource::handleRestMessage_POP(void ***this, ctu::RestResourceContext *a2, const ctu::PathView *a3)
{
  uint64_t v6 = *((void *)a3 + 3);
  if (v6 == 1)
  {
    if (**((unsigned char **)a3 + 2) == 95)
    {
      long long v8 = *((_OWORD *)a3 + 1);
      long long v11 = *(_OWORD *)a3;
      long long v12 = v8;
      uint64_t v7 = 1;
      ctu::PathView::advance((uint64_t)&v11, 1);
      if (*((void *)&v12 + 1))
      {
        if (*((void *)&v12 + 1) == 6
          && (*(_DWORD *)v12 == 1768189805 ? (BOOL v9 = *(unsigned __int16 *)(v12 + 4) == 31078) : (BOOL v9 = 0), v9))
        {
          uint64_t v7 = 1;
          ctu::PathView::advance((uint64_t)&v11, 1);
          ctu::MapRestResource::handleMessage_Modify_POP(this, a2, a3, (const ctu::PathView *)&v11);
        }
        else
        {
          return 0;
        }
      }
      return v7;
    }
  }
  else if (!v6)
  {
    ctu::MapRestResource::handleMessage_Root_POP((ctu::MapRestResource *)this, a2);
    return 1;
  }

  return ctu::MapRestResource::handleMessage_Resource(this, a2, a3);
}

uint64_t ctu::MapRestResource::handleMessage_Root_POP(ctu::MapRestResource *this, ctu::RestResourceContext *a2)
{
  (**(void (***)(uint64_t *__return_ptr, ctu::RestResourceContext *))a2)((uint64_t *)&v10, a2);
  uint64_t v3 = (void *)*((void *)this + 8);
  while (v3 != (void *)(*((void *)this + 8) + 16 * *((void *)this + 9)))
  {
    long long v4 = (std::__shared_weak_count *)v3[1];
    if (v4)
    {
      uint64_t v5 = std::__shared_weak_count::lock(v4);
      if (v5)
      {
        uint64_t v6 = (void *)*v3;
        if (*v3)
        {
          v3 += 2 * (v6 != v10);
          if (v6 == v10) {
            int v7 = 3;
          }
          else {
            int v7 = 0;
          }
LABEL_11:
          std::__shared_weak_count::__release_shared[abi:ne180100](v5);
          int v8 = v7;
          goto LABEL_12;
        }
      }
    }
    else
    {
      uint64_t v5 = 0;
    }
    uint64_t v13 = v3;
    boost::container::vector<std::weak_ptr<ctu::RestResourceConnection>,boost::container::new_allocator<std::weak_ptr<ctu::RestResourceConnection>>,void>::erase((void *)this + 8, (uint64_t *)&v13, &v12);
    int v7 = 0;
    int v8 = 0;
    uint64_t v3 = v12;
    if (v5) {
      goto LABEL_11;
    }
LABEL_12:
    if (v8) {
      break;
    }
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (v3 != (void *)(*((void *)this + 8) + 16 * *((void *)this + 9)))
  {
    uint64_t v10 = v3;
    boost::container::vector<std::weak_ptr<ctu::RestResourceConnection>,boost::container::new_allocator<std::weak_ptr<ctu::RestResourceConnection>>,void>::erase((void *)this + 8, (uint64_t *)&v10, &v13);
  }
  return 1;
}

void sub_1920558D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::MapRestResource::handleMessage_Modify_POP(void ***this, ctu::RestResourceContext *a2, const ctu::PathView *a3, const ctu::PathView *a4)
{
  size_t v7 = *((void *)a4 + 3);
  if (v7)
  {
    int v8 = (char *)*((void *)a4 + 2);
    BOOL v9 = (char *)(*(void *)a4 + *((void *)a4 + 1));
    if (v9 != &v8[v7] && &v8[v7 + 1] != v9) {
      return 1;
    }
  }
  else
  {
    int v8 = (char *)*((void *)a4 + 2);
  }
  if (v8) {
    std::string::basic_string[abi:ne180100](__p, v8, v7);
  }
  else {
    memset(__p, 0, sizeof(__p));
  }
  boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>>::find((uint64_t)&v29, this + 5, __p);
  long long v11 = (long long *)v29;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v12 = (uint64_t)&this[5][4 * (void)this[6]];
  if (v11 != (long long *)v12)
  {
    uint64_t v13 = (char *)(v11 + 2);
    while (v13 != (char *)v12)
    {
      boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>::operator=((uint64_t)v11, v11 + 2);
      uint64_t v13 = (char *)(v11 + 4);
      v11 += 2;
    }
    uint64_t v14 = *(void *)(v12 - 8);
    *(void *)(v12 - 8) = 0;
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
    if (*(char *)(v12 - 9) < 0) {
      operator delete(*(void **)(v12 - 32));
    }
    this[6] = (void **)((char *)this[6] - 1);
    memset(__p, 170, sizeof(__p));
    if (*((void *)a3 + 3))
    {
      unint64_t v15 = *(void **)a3;
      unint64_t v16 = *((void *)a3 + 2) - *(void *)a3;
      if (v16 > 1)
      {
        if (v16 - 1 >= *((void *)a3 + 1)) {
          size_t v17 = *((void *)a3 + 1);
        }
        else {
          size_t v17 = v16 - 1;
        }
        if (!v15) {
          goto LABEL_34;
        }
      }
      else
      {
        if (v16 >= *((void *)a3 + 1)) {
          size_t v17 = *((void *)a3 + 1);
        }
        else {
          size_t v17 = *((void *)a3 + 2) - *(void *)a3;
        }
        if (!v15) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      unint64_t v15 = *(void **)a3;
      size_t v17 = *((void *)a3 + 1);
      if (!*(void *)a3)
      {
LABEL_34:
        memset(__p, 0, sizeof(__p));
        goto LABEL_35;
      }
    }
    std::string::basic_string[abi:ne180100](__p, v15, v17);
LABEL_35:
    xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    ctu::MapRestResource::getResourceList((ctu::MapRestResource *)this, &object);
    if (!this[9])
    {
LABEL_59:
      xpc_release(object);
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      return 1;
    }
    unint64_t v18 = this[8];
    while (1)
    {
      unint64_t v19 = (std::__shared_weak_count *)v18[1];
      if (!v19) {
        break;
      }
      long long v20 = std::__shared_weak_count::lock(v19);
      if (!v20) {
        goto LABEL_53;
      }
      uint64_t v21 = (char *)*v18;
      if (!*v18) {
        goto LABEL_53;
      }
      if (v21[31] >= 0) {
        uint64_t v22 = v21 + 8;
      }
      else {
        uint64_t v22 = (const char *)*((void *)v21 + 1);
      }
      xpc_object_t v29 = xpc_string_create(v22);
      if (!v29) {
        xpc_object_t v29 = xpc_null_create();
      }
      if (SHIBYTE(__p[2]) >= 0) {
        uint64_t v23 = __p;
      }
      else {
        uint64_t v23 = (void **)__p[0];
      }
      xpc_object_t v28 = xpc_string_create((const char *)v23);
      if (!v28) {
        xpc_object_t v28 = xpc_null_create();
      }
      xpc_object_t v27 = object;
      if (object) {
        xpc_retain(object);
      }
      else {
        xpc_object_t v27 = xpc_null_create();
      }
      (*(void (**)(ctu::RestResourceContext *, char *, xpc_object_t *, xpc_object_t *, xpc_object_t *))(*(void *)a2 + 48))(a2, v21, &v29, &v28, &v27);
      xpc_release(v27);
      xpc_release(v28);
      xpc_release(v29);
      v18 += 2;
LABEL_57:
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
LABEL_58:
      if (v18 == &this[8][2 * (void)this[9]]) {
        goto LABEL_59;
      }
    }
    long long v20 = 0;
LABEL_53:
    xpc_object_t v29 = v18;
    boost::container::vector<std::weak_ptr<ctu::RestResourceConnection>,boost::container::new_allocator<std::weak_ptr<ctu::RestResourceConnection>>,void>::erase(this + 8, (uint64_t *)&v29, &v28);
    unint64_t v18 = (void **)v28;
    if (!v20) {
      goto LABEL_58;
    }
    goto LABEL_57;
  }
  return 1;
}

void sub_192055BF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, xpc_object_t object, xpc_object_t a18, xpc_object_t a19)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::MapRestResource::handleRestMessage_PUSH(ctu::MapRestResource *this, ctu::RestResourceContext *a2, const ctu::PathView *a3)
{
  uint64_t v6 = *((void *)a3 + 3);
  if (v6 == 1)
  {
    if (**((unsigned char **)a3 + 2) == 95)
    {
      long long v8 = *((_OWORD *)a3 + 1);
      long long v11 = *(_OWORD *)a3;
      long long v12 = v8;
      uint64_t v7 = 1;
      ctu::PathView::advance((uint64_t)&v11, 1);
      if (*((void *)&v12 + 1))
      {
        if (*((void *)&v12 + 1) == 6
          && (*(_DWORD *)v12 == 1768189805 ? (BOOL v9 = *(unsigned __int16 *)(v12 + 4) == 31078) : (BOOL v9 = 0), v9))
        {
          uint64_t v7 = 1;
          ctu::PathView::advance((uint64_t)&v11, 1);
          ctu::MapRestResource::handleMessage_Modify_PUSH(this, a2, a3, (const ctu::PathView *)&v11);
        }
        else
        {
          return 0;
        }
      }
      return v7;
    }
  }
  else if (!v6)
  {
    ctu::MapRestResource::handleMessage_Root_PUSH(this, a2, a3);
    return 1;
  }

  return ctu::MapRestResource::handleMessage_Resource((void ***)this, a2, a3);
}

uint64_t ctu::MapRestResource::handleMessage_Root_PUSH(ctu::MapRestResource *this, ctu::RestResourceContext *a2, const ctu::PathView *a3)
{
  (**(void (***)(__n128 *__return_ptr, ctu::RestResourceContext *))a2)(&v19, a2);
  if (!v19.n128_u64[0]) {
    goto LABEL_34;
  }
  __n128 string = v19;
  if (v19.n128_u64[1]) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19.n128_u64[1] + 16), 1uLL, memory_order_relaxed);
  }
  boost::container::dtl::flat_tree<std::weak_ptr<ctu::RestResourceConnection>,boost::move_detail::identity<std::weak_ptr<ctu::RestResourceConnection>>,std::owner_less<std::weak_ptr<ctu::RestResourceConnection>>,void>::insert_unique((uint64_t *)this + 8, &string, (__n128 **)v18);
  if (string.n128_u64[1]) {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)string.n128_u64[1]);
  }
  unint64_t v6 = v19.n128_u64[0];
  uint64_t v7 = (const char *)(v19.n128_u64[0] + 8);
  if (*(char *)(v19.n128_u64[0] + 31) < 0) {
    uint64_t v7 = *(const char **)v7;
  }
  v18[0] = xpc_string_create(v7);
  if (!v18[0]) {
    v18[0] = xpc_null_create();
  }
  if (*((void *)a3 + 3))
  {
    long long v8 = *(void **)a3;
    unint64_t v9 = *((void *)a3 + 2) - *(void *)a3;
    if (v9 > 1)
    {
      if (v9 - 1 >= *((void *)a3 + 1)) {
        size_t v10 = *((void *)a3 + 1);
      }
      else {
        size_t v10 = v9 - 1;
      }
      if (!v8) {
        goto LABEL_25;
      }
    }
    else
    {
      if (v9 >= *((void *)a3 + 1)) {
        size_t v10 = *((void *)a3 + 1);
      }
      else {
        size_t v10 = *((void *)a3 + 2) - *(void *)a3;
      }
      if (!v8) {
        goto LABEL_25;
      }
    }
LABEL_18:
    std::string::basic_string[abi:ne180100](&string, v8, v10);
    if (v16 >= 0) {
      p___n128 string = &string;
    }
    else {
      p___n128 string = (__n128 *)string.n128_u64[0];
    }
    goto LABEL_26;
  }
  long long v8 = *(void **)a3;
  size_t v10 = *((void *)a3 + 1);
  if (*(void *)a3) {
    goto LABEL_18;
  }
LABEL_25:
  __n128 string = 0uLL;
  p___n128 string = &string;
  uint64_t v16 = 0;
LABEL_26:
  xpc_object_t v17 = xpc_string_create((const char *)p_string);
  if (!v17) {
    xpc_object_t v17 = xpc_null_create();
  }
  ctu::MapRestResource::getResourceList(this, &object);
  xpc_object_t v14 = object;
  if (object) {
    xpc_retain(object);
  }
  else {
    xpc_object_t v14 = xpc_null_create();
  }
  (*(void (**)(ctu::RestResourceContext *, unint64_t, xpc_object_t *, xpc_object_t *, xpc_object_t *))(*(void *)a2 + 48))(a2, v6, v18, &v17, &v14);
  xpc_release(v14);
  xpc_object_t v14 = 0;
  xpc_release(object);
  xpc_release(v17);
  xpc_object_t v17 = 0;
  if (SHIBYTE(v16) < 0) {
    operator delete((void *)string.n128_u64[0]);
  }
  xpc_release(v18[0]);
LABEL_34:
  if (v19.n128_u64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v19.n128_u64[1]);
  }
  return 1;
}

void sub_192055FA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, xpc_object_t a10, void *__p, std::__shared_weak_count *a12, int a13, __int16 a14, char a15, char a16, xpc_object_t a17, xpc_object_t object)
{
  xpc_release(object);
  long long v20 = *(std::__shared_weak_count **)(v18 - 40);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  _Unwind_Resume(a1);
}

uint64_t ctu::MapRestResource::handleMessage_Modify_PUSH(ctu::MapRestResource *this, ctu::RestResourceContext *a2, const ctu::PathView *a3, const ctu::PathView *a4)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  size_t v7 = *((void *)a4 + 3);
  if (!v7)
  {
    long long v8 = (char *)*((void *)a4 + 2);
    goto LABEL_8;
  }
  long long v8 = (char *)*((void *)a4 + 2);
  unint64_t v9 = (char *)(*(void *)a4 + *((void *)a4 + 1));
  if (v9 == &v8[v7] || &v8[v7 + 1] == v9)
  {
LABEL_8:
    memset(__dst, 170, sizeof(__dst));
    if (v8) {
      std::string::basic_string[abi:ne180100](__dst, v8, v7);
    }
    else {
      memset(__dst, 0, sizeof(__dst));
    }
    xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    (*(void (**)(xpc_object_t *__return_ptr, ctu::RestResourceContext *))(*(void *)a2 + 24))(&object, a2);
    xpc_object_t v46 = object;
    unint64_t v47 = 0xAAAAAAAAAAAAAAAALL;
    if (object) {
      xpc_retain(object);
    }
    else {
      xpc_object_t v46 = xpc_null_create();
    }
    uint64_t v11 = *((void *)this + 4);
    if (!v11) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(unint64_t *__return_ptr))(*(void *)v11 + 48))(&v47);
    xpc_release(v46);
    if (!v47) {
      goto LABEL_99;
    }
    uint64_t v12 = *((void *)this + 5);
    unint64_t v14 = *((void *)this + 6);
    uint64_t v13 = (void ***)((char *)this + 40);
    if (v14)
    {
      unint64_t v15 = (void **)*((void *)this + 5);
      do
      {
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v15[4 * (v14 >> 1)], __dst) & 0x80u) == 0)
        {
          v14 >>= 1;
        }
        else
        {
          v15 += 4 * (v14 >> 1) + 4;
          v14 += ~(v14 >> 1);
        }
      }
      while (v14);
      uint64_t v12 = *((void *)this + 5);
      uint64_t v16 = *((void *)this + 6);
    }
    else
    {
      uint64_t v16 = 0;
      unint64_t v15 = (void **)*((void *)this + 5);
    }
    if (v15 != (void **)(v12 + 32 * v16)
      && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__dst, v15) & 0x80) == 0)
    {
LABEL_55:
      unint64_t v33 = v47;
      unint64_t v47 = 0;
      dispatch_object_t v34 = v15[3];
      v15[3] = (void *)v33;
      if (v34) {
        (*(void (**)(void *))(*(void *)v34 + 8))(v34);
      }
      memset(__p, 170, sizeof(__p));
      if (*((void *)a3 + 3))
      {
        v35 = *(void **)a3;
        unint64_t v36 = *((void *)a3 + 2) - *(void *)a3;
        if (v36 > 1)
        {
          if (v36 - 1 >= *((void *)a3 + 1)) {
            size_t v37 = *((void *)a3 + 1);
          }
          else {
            size_t v37 = v36 - 1;
          }
          if (!v35) {
            goto LABEL_70;
          }
        }
        else
        {
          if (v36 >= *((void *)a3 + 1)) {
            size_t v37 = *((void *)a3 + 1);
          }
          else {
            size_t v37 = *((void *)a3 + 2) - *(void *)a3;
          }
          if (!v35) {
            goto LABEL_70;
          }
        }
      }
      else
      {
        v35 = *(void **)a3;
        size_t v37 = *((void *)a3 + 1);
        if (!*(void *)a3)
        {
LABEL_70:
          memset(__p, 0, sizeof(__p));
          goto LABEL_71;
        }
      }
      std::string::basic_string[abi:ne180100](__p, v35, v37);
LABEL_71:
      xpc_object_t v53 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      ctu::MapRestResource::getResourceList(this, &v53);
      if (*((void *)this + 9))
      {
        unint64_t v38 = (uint64_t *)*((void *)this + 8);
        while (1)
        {
          unint64_t v39 = (std::__shared_weak_count *)v38[1];
          if (!v39) {
            break;
          }
          unint64_t v40 = std::__shared_weak_count::lock(v39);
          if (!v40) {
            goto LABEL_89;
          }
          uint64_t v41 = *v38;
          if (!*v38) {
            goto LABEL_89;
          }
          if (*(char *)(v41 + 31) >= 0) {
            v42 = (const char *)(v41 + 8);
          }
          else {
            v42 = *(const char **)(v41 + 8);
          }
          *(void *)v50 = xpc_string_create(v42);
          if (!*(void *)v50) {
            *(void *)v50 = xpc_null_create();
          }
          if (SHIBYTE(__p[2]) >= 0) {
            unint64_t v43 = __p;
          }
          else {
            unint64_t v43 = (void **)__p[0];
          }
          v51[0] = xpc_string_create((const char *)v43);
          if (!v51[0]) {
            v51[0] = xpc_null_create();
          }
          xpc_object_t v54 = v53;
          if (v53) {
            xpc_retain(v53);
          }
          else {
            xpc_object_t v54 = xpc_null_create();
          }
          (*(void (**)(ctu::RestResourceContext *, uint64_t, unsigned char *, xpc_object_t *, xpc_object_t *))(*(void *)a2 + 48))(a2, v41, v50, v51, &v54);
          xpc_release(v54);
          xpc_release(v51[0]);
          xpc_release(*(xpc_object_t *)v50);
          v38 += 2;
LABEL_93:
          std::__shared_weak_count::__release_shared[abi:ne180100](v40);
LABEL_94:
          if (v38 == (uint64_t *)(*((void *)this + 8) + 16 * *((void *)this + 9))) {
            goto LABEL_95;
          }
        }
        unint64_t v40 = 0;
LABEL_89:
        *(void *)v50 = v38;
        boost::container::vector<std::weak_ptr<ctu::RestResourceConnection>,boost::container::new_allocator<std::weak_ptr<ctu::RestResourceConnection>>,void>::erase((void *)this + 8, (uint64_t *)v50, v51);
        unint64_t v38 = (uint64_t *)v51[0];
        if (!v40) {
          goto LABEL_94;
        }
        goto LABEL_93;
      }
LABEL_95:
      xpc_release(v53);
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      unint64_t v44 = v47;
      unint64_t v47 = 0;
      if (v44) {
        (*(void (**)(unint64_t))(*(void *)v44 + 8))(v44);
      }
LABEL_99:
      xpc_release(object);
      if (SHIBYTE(__dst[2]) < 0) {
        operator delete(__dst[0]);
      }
      return 1;
    }
    *(void *)&long long v17 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v17 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)v50 = v17;
    *(_OWORD *)&v50[16] = v17;
    if (SHIBYTE(__dst[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v50, (const std::string::value_type *)__dst[0], (std::string::size_type)__dst[1]);
    }
    else
    {
      *(_OWORD *)v50 = *(_OWORD *)__dst;
      *(void **)&v50[16] = __dst[2];
    }
    *(_OWORD *)std::string __p = *(_OWORD *)v50;
    uint64_t v18 = *(void **)&v50[16];
    memset(v50, 0, sizeof(v50));
    __p[2] = v18;
    uint64_t v56 = 0;
    v51[0] = __p;
    v51[1] = (char *)this + 40;
    v52 = 0;
    __n128 v19 = (void **)*((void *)this + 5);
    long long v20 = &v19[4 * *((void *)this + 6)];
    if (v20 != v15)
    {
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, v15) & 0x80) == 0)
      {
        xpc_object_t v53 = v20;
        if (!boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>>::priv_insert_unique_prepare(v15, (void ***)&v53, __p, &v52))goto LABEL_44; {
LABEL_39:
        }
        uint64_t v22 = v52;
        uint64_t v23 = *((void *)this + 6);
        if (*((void *)this + 7) == v23)
        {
          boost::container::vector<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>,boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>*,boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>>(&v54, (char *)this + 40, (long long *)v52, (long long *)__p);
          goto LABEL_47;
        }
        uint64_t v24 = (uint64_t)&(*v13)[4 * v23];
        if ((void **)v24 == v52)
        {
          long long v29 = *(_OWORD *)__p;
          v52[2] = __p[2];
          *(_OWORD *)uint64_t v22 = v29;
          memset(__p, 0, sizeof(__p));
          uint64_t v30 = v56;
          uint64_t v56 = 0;
          *(void *)(v24 + 24) = v30;
          ++*((void *)this + 6);
        }
        else
        {
          uint64_t v25 = v24 - 32;
          *(_OWORD *)uint64_t v24 = *(_OWORD *)(v24 - 32);
          *(void *)(v24 - 32) = 0;
          *(void *)(v24 - 24) = 0;
          uint64_t v26 = *(void *)(v24 - 16);
          uint64_t v27 = *(void *)(v24 - 8);
          *(void *)(v24 - 16) = 0;
          *(void *)(v24 - 8) = 0;
          *(void *)(v24 + 16) = v26;
          *(void *)(v24 + 24) = v27;
          ++*((void *)this + 6);
          if ((void **)(v24 - 32) != v22)
          {
            do
            {
              xpc_object_t v28 = (void **)(v25 - 32);
              boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>::operator=(v25, (long long *)(v25 - 32));
              uint64_t v25 = (uint64_t)v28;
            }
            while (v28 != v22);
          }
          boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>::operator=((uint64_t)v22, (long long *)__p);
        }
LABEL_46:
        xpc_object_t v54 = v22;
LABEL_47:
        uint64_t v31 = v56;
        uint64_t v56 = 0;
        if (v31) {
          (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
        }
        if (SHIBYTE(__p[2]) < 0) {
          operator delete(__p[0]);
        }
        unint64_t v15 = (void **)v54;
        uint64_t v32 = *(void *)&v50[24];
        *(void *)&v50[24] = 0;
        if (v32) {
          (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
        }
        if ((v50[23] & 0x80000000) != 0) {
          operator delete(*(void **)v50);
        }
        goto LABEL_55;
      }
      __n128 v19 = *v13;
    }
    v52 = v15;
    if (v19 == v15) {
      goto LABEL_39;
    }
    uint64_t v21 = v15 - 4;
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v21, __p) & 0x80) != 0) {
      goto LABEL_39;
    }
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, v21) & 0x80) != 0)
    {
      xpc_object_t v54 = v21;
      if (boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>>::priv_insert_unique_prepare(v19, (void ***)&v54, __p, &v52))
      {
        goto LABEL_39;
      }
    }
    else
    {
      v52 = v21;
    }
LABEL_44:
    uint64_t v22 = v52;
    goto LABEL_46;
  }
  return 1;
}

void sub_1920566A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, uint64_t a10, xpc_object_t object, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, xpc_object_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,xpc_object_t a23,uint64_t a24,uint64_t a25,xpc_object_t a26,xpc_object_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  xpc_release(object);
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t ctu::MapRestResource::handleRestMessage_NOTIFY(void ***this, ctu::RestResourceContext *a2, const ctu::PathView *a3)
{
  if (*((void *)a3 + 3)) {
    return ctu::MapRestResource::handleMessage_Resource(this, a2, a3);
  }
  else {
    return 0;
  }
}

void ctu::MapRestResource::getResourceList(ctu::MapRestResource *this@<X0>, xpc_object_t *a2@<X8>)
{
  *a2 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_array_create(0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x192FEE1B0](v5) == MEMORY[0x1E4F14568])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  uint64_t v7 = *((void *)this + 6);
  if (v7)
  {
    long long v8 = (long long *)*((void *)this + 5);
    uint64_t v9 = 32 * v7;
    do
    {
      if (*((char *)v8 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v8, *((void *)v8 + 1));
      }
      else
      {
        long long v10 = *v8;
        __p.__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v10;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      xpc_object_t v12 = xpc_string_create((const char *)p_p);
      if (!v12) {
        xpc_object_t v12 = xpc_null_create();
      }
      xpc_array_append_value(*a2, v12);
      xpc_release(v12);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      v8 += 2;
      v9 -= 32;
    }
    while (v9);
  }
}

void sub_192056950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  xpc::array::~array(v14);
  _Unwind_Resume(a1);
}

void xpc::array::~array(xpc_object_t *this)
{
  *this = 0;
}

void *boost::container::vector<std::weak_ptr<ctu::RestResourceConnection>,boost::container::new_allocator<std::weak_ptr<ctu::RestResourceConnection>>,void>::~vector(void *a1)
{
  uint64_t v2 = a1[1];
  if (v2)
  {
    uint64_t v3 = (std::__shared_weak_count **)(*a1 + 8);
    do
    {
      if (*v3) {
        std::__shared_weak_count::__release_weak(*v3);
      }
      v3 += 2;
      --v2;
    }
    while (v2);
  }
  if (a1[2]) {
    operator delete((void *)*a1);
  }
  return a1;
}

void __clang_call_terminate(void *a1)
{
}

uint64_t boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__function::__value_func<std::unique_ptr<ctu::RestResourceBase> ()(std::string const&,xpc::object)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);

  operator delete(v1);
}

uint64_t *boost::container::dtl::value_destructor<boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>,boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>::~value_destructor(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 24);
  *(void *)(v2 + 24) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  return a1;
}

BOOL boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>>::priv_insert_unique_prepare(void **a1, void ***a2, void **a3, void ***a4)
{
  uint64_t v7 = a1;
  if (*a2 != a1)
  {
    unint64_t v8 = ((char *)*a2 - (char *)a1) >> 5;
    do
    {
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v7[4 * (v8 >> 1)], a3) & 0x80u) == 0)
      {
        v8 >>= 1;
      }
      else
      {
        v7 += 4 * (v8 >> 1) + 4;
        v8 += ~(v8 >> 1);
      }
    }
    while (v8);
  }
  *a4 = v7;
  return v7 == *a2
      || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, v7) & 0x80u) != 0;
}

void boost::container::vector<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>,boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>*,boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>>(void *a1, char *a2, long long *a3, long long *a4)
{
  unint64_t v4 = *((void *)a2 + 2);
  unint64_t v5 = 0x3FFFFFFFFFFFFFFLL;
  unint64_t v6 = *((void *)a2 + 1) + 1;
  if (0x3FFFFFFFFFFFFFFLL - v4 < v6 - v4) {
    goto LABEL_29;
  }
  unint64_t v7 = v4 >> 61;
  unint64_t v8 = 8 * v4;
  if (v7 > 4) {
    uint64_t v9 = -1;
  }
  else {
    uint64_t v9 = v8;
  }
  unint64_t v10 = v8 / 5;
  if (v7) {
    unint64_t v10 = v9;
  }
  if (v10 < 0x3FFFFFFFFFFFFFFLL) {
    unint64_t v5 = v10;
  }
  unint64_t v11 = v6 <= v5 ? v5 : *((void *)a2 + 1) + 1;
  if (v11 >> 58) {
LABEL_29:
  }
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
  uint64_t v16 = *(char **)a2;
  long long v17 = (char *)operator new(32 * v11);
  uint64_t v18 = v17;
  __n128 v19 = *(char **)a2;
  uint64_t v20 = *(void *)a2 + 32 * *((void *)a2 + 1);
  uint64_t v21 = v17;
  if (*(long long **)a2 != a3)
  {
    uint64_t v22 = *(char **)a2;
    uint64_t v21 = v17;
    do
    {
      long long v23 = *(_OWORD *)v22;
      *((void *)v21 + 2) = *((void *)v22 + 2);
      *(_OWORD *)uint64_t v21 = v23;
      *(void *)uint64_t v22 = 0;
      *((void *)v22 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
      uint64_t v24 = *((void *)v22 + 3);
      *((void *)v22 + 2) = 0;
      *((void *)v22 + 3) = 0;
      *((void *)v21 + 3) = v24;
      v21 += 32;
      v22 += 32;
    }
    while (v22 != (char *)a3);
  }
  long long v25 = *a4;
  *((void *)v21 + 2) = *((void *)a4 + 2);
  *(_OWORD *)uint64_t v21 = v25;
  *(void *)a4 = 0;
  *((void *)a4 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
  uint64_t v26 = *((void *)a4 + 3);
  *((void *)a4 + 2) = 0;
  *((void *)a4 + 3) = 0;
  *((void *)v21 + 3) = v26;
  if ((long long *)v20 != a3)
  {
    uint64_t v27 = v21 + 56;
    xpc_object_t v28 = a3;
    do
    {
      long long v29 = *v28;
      *(v27 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = *((void *)v28 + 2);
      *(_OWORD *)(v27 - 3) = v29;
      *(void *)xpc_object_t v28 = 0;
      *((void *)v28 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
      uint64_t v30 = *((void *)v28 + 3);
      *((void *)v28 + 2) = 0;
      *((void *)v28 + 3) = 0;
      void *v27 = v30;
      v27 += 4;
      v28 += 2;
    }
    while (v28 != (long long *)v20);
  }
  if (v19)
  {
    uint64_t v31 = *((void *)a2 + 1);
    if (v31)
    {
      uint64_t v32 = (uint64_t *)(v19 + 24);
      do
      {
        uint64_t v33 = *v32;
        uint64_t *v32 = 0;
        if (v33) {
          (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
        }
        if (*((char *)v32 - 1) < 0) {
          operator delete((void *)*(v32 - 3));
        }
        v32 += 4;
        --v31;
      }
      while (v31);
    }
    operator delete(*(void **)a2);
  }
  uint64_t v34 = *((void *)a2 + 1) + 1;
  *(void *)a2 = v18;
  *((void *)a2 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v34;
  *((void *)a2 + 2) = v11;
  *a1 = &v18[(char *)a3 - v16];
}

uint64_t boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>::operator=(uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  uint64_t v5 = *((void *)a2 + 3);
  *((void *)a2 + 3) = 0;
  uint64_t v6 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return a1;
}

void boost::container::throw_length_error(boost::container *this, const char *a2)
{
  exception = __cxa_allocate_exception(0x10uLL);
  void *exception = &unk_1EE2F7ED0;
  exception[1] = this;
}

void boost::container::out_of_range::~out_of_range(std::exception *this)
{
  std::exception::~exception(this);

  operator delete(v1);
}

const char *boost::container::exception::what(boost::container::exception *this)
{
  if (*((void *)this + 1)) {
    return (const char *)*((void *)this + 1);
  }
  else {
    return "unknown boost::container exception";
  }
}

void xpc::array_creator::operator()<char const*>(char *string@<X1>, xpc_object_t *a2@<X0>, xpc_object_t *a3@<X8>)
{
  xpc_object_t v5 = xpc_string_create(string);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc_array_append_value(*a2, v5);
  xpc_object_t v6 = *a2;
  *a3 = *a2;
  if (v6) {
    xpc_retain(v6);
  }
  else {
    *a3 = xpc_null_create();
  }
  xpc_release(v5);
}

void sub_192056FF4(_Unwind_Exception *a1)
{
  xpc_release(v1);
  _Unwind_Resume(a1);
}

xpc::array_creator *xpc::array_creator::array_creator(xpc::array_creator *this)
{
  xpc_object_t v2 = xpc_array_create(0, 0);
  if (v2 || (xpc_object_t v2 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x192FEE1B0](v2) == MEMORY[0x1E4F14568])
    {
      xpc_retain(v2);
      xpc_object_t v3 = v2;
    }
    else
    {
      xpc_object_t v3 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    xpc_object_t v2 = 0;
  }
  xpc_release(v2);
  *(void *)this = v3;
  xpc_object_t v4 = xpc_null_create();
  xpc_release(v4);
  return this;
}

void boost::container::vector<std::weak_ptr<ctu::RestResourceConnection>,boost::container::new_allocator<std::weak_ptr<ctu::RestResourceConnection>>,void>::erase(void *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *a2;
  uint64_t v6 = *a1 + 16 * a1[1];
  for (uint64_t i = *a2 + 16; i != v6; i += 16)
  {
    long long v8 = *(_OWORD *)i;
    *(void *)uint64_t i = 0;
    *(void *)(i + 8) = 0;
    uint64_t v9 = *(std::__shared_weak_count **)(i - 8);
    *(_OWORD *)(i - 16) = v8;
    if (v9) {
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  unint64_t v10 = *(std::__shared_weak_count **)(v6 - 8);
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  --a1[1];
  *a3 = v5;
}

void boost::container::dtl::flat_tree<std::weak_ptr<ctu::RestResourceConnection>,boost::move_detail::identity<std::weak_ptr<ctu::RestResourceConnection>>,std::owner_less<std::weak_ptr<ctu::RestResourceConnection>>,void>::insert_unique(uint64_t *a1@<X0>, __n128 *a2@<X1>, __n128 **a3@<X8>)
{
  *a3 = 0;
  a3[1] = (__n128 *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v6 = (__n128 *)*a1;
  uint64_t v5 = a1[1];
  unint64_t v7 = (__n128 *)(*a1 + 16 * v5);
  if (v5)
  {
    unint64_t v8 = a1[1];
    do
    {
      unint64_t v9 = v8 >> 1;
      unint64_t v10 = &v6[v8 >> 1];
      unint64_t v11 = v10->n128_u64[1];
      xpc_object_t v12 = v10 + 1;
      v8 += ~(v8 >> 1);
      if (v11 >= a2->n128_u64[1]) {
        unint64_t v8 = v9;
      }
      else {
        uint64_t v6 = v12;
      }
    }
    while (v8);
  }
  if (v6 == v7)
  {
    *((unsigned char *)a3 + 8) = 1;
    if (a1[2] != v5)
    {
      *unint64_t v7 = *a2;
      a2->n128_u64[0] = 0;
      a2->n128_u64[1] = 0;
      ++a1[1];
      goto LABEL_20;
    }
    goto LABEL_21;
  }
  unint64_t v13 = a2->n128_u64[1];
  unint64_t v14 = v6->n128_u64[1];
  *((unsigned char *)a3 + 8) = v13 < v14;
  if (v13 < v14)
  {
    if (a1[2] != v5)
    {
      unint64_t v15 = v7 - 1;
      *unint64_t v7 = v7[-1];
      v7[-1].n128_u64[1] = 0;
      v7[-1].n128_u64[0] = 0;
      ++a1[1];
      if (&v7[-1] != v6)
      {
        uint64_t v16 = v7 - 1;
        do
        {
          __n128 v17 = v16[-1];
          --v16;
          v15[-1].n128_u64[1] = 0;
          v16->n128_u64[0] = 0;
          uint64_t v18 = (std::__shared_weak_count *)v15->n128_u64[1];
          *unint64_t v15 = v17;
          if (v18) {
            std::__shared_weak_count::__release_weak(v18);
          }
          unint64_t v15 = v16;
        }
        while (v16 != v6);
      }
      __n128 v19 = *a2;
      a2->n128_u64[0] = 0;
      a2->n128_u64[1] = 0;
      uint64_t v20 = (std::__shared_weak_count *)v6->n128_u64[1];
      *uint64_t v6 = v19;
      if (v20) {
        std::__shared_weak_count::__release_weak(v20);
      }
      goto LABEL_17;
    }
LABEL_21:
    boost::container::vector<std::weak_ptr<ctu::RestResourceConnection>,boost::container::new_allocator<std::weak_ptr<ctu::RestResourceConnection>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<std::weak_ptr<ctu::RestResourceConnection>>,std::weak_ptr<ctu::RestResourceConnection>*,std::weak_ptr<ctu::RestResourceConnection>>>(a1, v6, (const char *)1, a2, &v21);
    unint64_t v7 = v21;
    goto LABEL_20;
  }
LABEL_17:
  unint64_t v7 = v6;
LABEL_20:
  *a3 = v7;
}

void boost::container::vector<std::weak_ptr<ctu::RestResourceConnection>,boost::container::new_allocator<std::weak_ptr<ctu::RestResourceConnection>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<std::weak_ptr<ctu::RestResourceConnection>>,std::weak_ptr<ctu::RestResourceConnection>*,std::weak_ptr<ctu::RestResourceConnection>>>(uint64_t *a1@<X0>, __n128 *a2@<X1>, const char *a3@<X2>, __n128 *a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = *a1;
  unint64_t v11 = boost::container::vector_alloc_holder<boost::container::new_allocator<std::weak_ptr<ctu::RestResourceConnection>>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>((uint64_t)a1, a3);
  if (v11 >> 59) {
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", v12);
  }
  uint64_t v13 = v11;
  unint64_t v14 = (__n128 *)operator new(16 * v11);
  boost::container::vector<std::weak_ptr<ctu::RestResourceConnection>,boost::container::new_allocator<std::weak_ptr<ctu::RestResourceConnection>>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<std::weak_ptr<ctu::RestResourceConnection>>,std::weak_ptr<ctu::RestResourceConnection>*,std::weak_ptr<ctu::RestResourceConnection>>>((uint64_t)a1, v14, v13, a2, (uint64_t)a3, a4);
  *a5 = (char *)a2 + *a1 - v10;
}

unint64_t boost::container::vector_alloc_holder<boost::container::new_allocator<std::weak_ptr<ctu::RestResourceConnection>>,unsigned long,boost::move_detail::integral_constant<unsigned int,1u>>::next_capacity<boost::container::growth_factor_60>(uint64_t a1, const char *a2)
{
  unint64_t v2 = 0x7FFFFFFFFFFFFFFLL;
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  if (0x7FFFFFFFFFFFFFFLL - v4 < (unint64_t)&a2[v3 - v4]) {
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
  }
  unint64_t v5 = v4 >> 61;
  unint64_t v6 = 8 * v4;
  if (v5 > 4) {
    uint64_t v7 = -1;
  }
  else {
    uint64_t v7 = v6;
  }
  unint64_t v8 = v6 / 5;
  if (v5) {
    unint64_t v8 = v7;
  }
  unint64_t v9 = &a2[v3];
  if (v8 < 0x7FFFFFFFFFFFFFFLL) {
    unint64_t v2 = v8;
  }
  if ((unint64_t)v9 <= v2) {
    return v2;
  }
  else {
    return (unint64_t)v9;
  }
}

void boost::container::vector<std::weak_ptr<ctu::RestResourceConnection>,boost::container::new_allocator<std::weak_ptr<ctu::RestResourceConnection>>,void>::priv_insert_forward_range_new_allocation<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<std::weak_ptr<ctu::RestResourceConnection>>,std::weak_ptr<ctu::RestResourceConnection>*,std::weak_ptr<ctu::RestResourceConnection>>>(uint64_t a1, __n128 *a2, uint64_t a3, __n128 *a4, uint64_t a5, __n128 *a6)
{
  uint64_t v10 = *(__n128 **)a1;
  boost::container::uninitialized_move_and_insert_alloc<boost::container::new_allocator<std::weak_ptr<ctu::RestResourceConnection>>,std::weak_ptr<ctu::RestResourceConnection>*,std::weak_ptr<ctu::RestResourceConnection>*,boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<std::weak_ptr<ctu::RestResourceConnection>>,std::weak_ptr<ctu::RestResourceConnection>*,std::weak_ptr<ctu::RestResourceConnection>>>(a1, *(__n128 **)a1, a4, (__n128 *)(*(void *)a1 + 16 * *(void *)(a1 + 8)), a2, a5, a6);
  if (v10)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    if (v11)
    {
      xpc_object_t v12 = (std::__shared_weak_count **)&v10->n128_u64[1];
      do
      {
        if (*v12) {
          std::__shared_weak_count::__release_weak(*v12);
        }
        v12 += 2;
        --v11;
      }
      while (v11);
    }
    operator delete(*(void **)a1);
  }
  uint64_t v13 = *(void *)(a1 + 8) + a5;
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = v13;
  *(void *)(a1 + 16) = a3;
}

void sub_192057470(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 boost::container::uninitialized_move_and_insert_alloc<boost::container::new_allocator<std::weak_ptr<ctu::RestResourceConnection>>,std::weak_ptr<ctu::RestResourceConnection>*,std::weak_ptr<ctu::RestResourceConnection>*,boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<std::weak_ptr<ctu::RestResourceConnection>>,std::weak_ptr<ctu::RestResourceConnection>*,std::weak_ptr<ctu::RestResourceConnection>>>(uint64_t a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5, uint64_t a6, __n128 *a7)
{
  while (a2 != a3)
  {
    *a5++ = *a2;
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    ++a2;
  }
  __n128 result = *a7;
  *a5 = *a7;
  a7->n128_u64[0] = 0;
  a7->n128_u64[1] = 0;
  if (a3 != a4)
  {
    unint64_t v8 = &a5[a6];
    do
    {
      __n128 result = *a3;
      *v8++ = *a3;
      a3->n128_u64[0] = 0;
      a3->n128_u64[1] = 0;
      ++a3;
    }
    while (a3 != a4);
  }
  return result;
}

void *ctu::getDescUtil@<X0>(void *this@<X0>, const char *const *a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  if ((a3 & 0x80000000) == 0 && (int)a2 > a3) {
    return std::string::basic_string[abi:ne180100]<0>(a4, (char *)this[a3]);
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  return this;
}

void ctu::logBitFieldWithDesc(unsigned int (***a1)(void, uint64_t), unsigned int a2, unsigned __int16 *a3, uint64_t a4)
{
  if ((**a1)(a1, 20))
  {
    uint64_t v17 = 0;
    memset(v16, 0, sizeof(v16));
    ctu::LogMessageBuffer::appendString(v16, "              ");
    ctu::to_bitfieldPrettyPrint<unsigned char>(a2, *a3, 45, (unint64_t)v14);
    ctu::LogMessageBuffer::appendString(v16, (uint64_t)v14);
    ctu::LogMessageBuffer::appendString(v16, "    ");
    unsigned int v8 = *a3;
    if ((BYTE1(v8) - v8) > 7u)
    {
      int v11 = 0;
    }
    else
    {
      int v9 = 0;
      int v10 = (v8 >> 8) - v8 + 1;
      do
      {
        int v9 = (2 * v9) | 1;
        --v10;
      }
      while ((_BYTE)v10);
      int v11 = v9 & (a2 >> v8);
    }
    std::function<std::string ()(int)>::operator()(a4, v11);
    ctu::LogMessageBuffer::appendString(v16, (uint64_t)&__p);
    if (v13 < 0) {
      operator delete(__p);
    }
    if (v15 < 0) {
      operator delete(v14[0]);
    }
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog((uint64_t)a1, 20, (ctu::LogMessageBuffer *)v16);
    ctu::LogMessageBuffer::~LogMessageBuffer((ctu::LogMessageBuffer *)v16);
  }
}

{
  void *__p[2];
  char v9;
  std::string v10[2];
  uint64_t v11;

  if ((**a1)(a1, 20))
  {
    int v11 = 0;
    memset(v10, 0, sizeof(v10));
    ctu::LogMessageBuffer::appendString(v10, "              ");
    ctu::to_bitfieldPrettyPrint<unsigned char>(a2, *a3, 45, (unint64_t)__p);
    ctu::LogMessageBuffer::appendString(v10, (uint64_t)__p);
    ctu::LogMessageBuffer::appendString(v10, "    ");
    ctu::LogMessageBuffer::appendString(v10, a4);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog((uint64_t)a1, 20, (ctu::LogMessageBuffer *)v10);
    ctu::LogMessageBuffer::~LogMessageBuffer((ctu::LogMessageBuffer *)v10);
  }
}

void sub_192057644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  ctu::LogMessageBuffer::~LogMessageBuffer((ctu::LogMessageBuffer *)&a21);
  _Unwind_Resume(a1);
}

uint64_t std::function<std::string ()(int)>::operator()(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

void sub_1920577D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

uint64_t ctu::getBitFieldPrintWithDesc@<X0>(unsigned int a1@<W0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  unint64_t v34 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
  v33[7] = v8;
  v33[8] = v8;
  v33[5] = v8;
  v33[6] = v8;
  void v33[3] = v8;
  v33[4] = v8;
  v33[1] = v8;
  v33[2] = v8;
  long long v32 = v8;
  v33[0] = v8;
  *(_OWORD *)uint64_t v30 = v8;
  long long v31 = v8;
  v29[2] = v8;
  v29[3] = v8;
  v29[0] = v8;
  v29[1] = v8;
  long long v28 = v8;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v28);
  int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"              ", 14);
  ctu::to_bitfieldPrettyPrint<unsigned char>(a1, *a2, 45, (unint64_t)v26);
  if ((v27 & 0x80u) == 0) {
    int v10 = v26;
  }
  else {
    int v10 = (void **)v26[0];
  }
  if ((v27 & 0x80u) == 0) {
    uint64_t v11 = v27;
  }
  else {
    uint64_t v11 = (uint64_t)v26[1];
  }
  xpc_object_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
  char v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"    ", 4);
  unsigned int v14 = *a2;
  if ((BYTE1(v14) - v14) > 7u)
  {
    int v17 = 0;
  }
  else
  {
    int v15 = 0;
    int v16 = (v14 >> 8) - v14 + 1;
    do
    {
      int v15 = (2 * v15) | 1;
      --v16;
    }
    while ((_BYTE)v16);
    int v17 = v15 & (a1 >> v14);
  }
  std::function<std::string ()(int)>::operator()(a3, v17);
  if ((v25 & 0x80u) == 0) {
    uint64_t v18 = __p;
  }
  else {
    uint64_t v18 = (void **)__p[0];
  }
  if ((v25 & 0x80u) == 0) {
    uint64_t v19 = v25;
  }
  else {
    uint64_t v19 = (uint64_t)__p[1];
  }
  uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v18, v19);
  std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(void *)(*v20 - 24)));
  uint64_t v21 = std::locale::use_facet(&v35, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
  std::locale::~locale(&v35);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v25 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v27 < 0) {
    operator delete(v26[0]);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v29 + 8, a4);
  *(void *)&long long v28 = *MEMORY[0x1E4FBA408];
  uint64_t v22 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)&v29[-1] + *(void *)(v28 - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  *(void *)&v29[0] = v22;
  *((void *)&v29[0] + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v31) < 0) {
    operator delete(v30[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x192FED350](v33);
}

{
  long long v8;
  void *v9;
  void **v10;
  uint64_t v11;
  void *v12;
  void *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *__p[2];
  unsigned __int8 v20;
  long long v21;
  _OWORD v22[4];
  void *v23[2];
  long long v24;
  long long v25;
  _OWORD v26[9];
  unint64_t v27;

  unsigned __int8 v27 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
  v26[7] = v8;
  v26[8] = v8;
  v26[5] = v8;
  v26[6] = v8;
  v26[3] = v8;
  xpc_object_t v26[4] = v8;
  v26[1] = v8;
  v26[2] = v8;
  unsigned __int8 v25 = v8;
  v26[0] = v8;
  *(_OWORD *)long long v23 = v8;
  uint64_t v24 = v8;
  v22[2] = v8;
  void v22[3] = v8;
  v22[0] = v8;
  v22[1] = v8;
  uint64_t v21 = v8;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v21);
  int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"              ", 14);
  ctu::to_bitfieldPrettyPrint<unsigned char>(a1, *a2, 45, (unint64_t)__p);
  if ((v20 & 0x80u) == 0) {
    int v10 = __p;
  }
  else {
    int v10 = (void **)__p[0];
  }
  if ((v20 & 0x80u) == 0) {
    uint64_t v11 = v20;
  }
  else {
    uint64_t v11 = (uint64_t)__p[1];
  }
  xpc_object_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
  char v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"    ", 4);
  unsigned int v14 = *(char *)(a3 + 23);
  if (v14 >= 0) {
    int v15 = a3;
  }
  else {
    int v15 = *(void *)a3;
  }
  if (v14 >= 0) {
    int v16 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    int v16 = *(void *)(a3 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v15, v16);
  if ((char)v20 < 0) {
    operator delete(__p[0]);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v22 + 8, a4);
  *(void *)&uint64_t v21 = *MEMORY[0x1E4FBA408];
  int v17 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)&v22[-1] + *(void *)(v21 - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  *(void *)&v22[0] = v17;
  *((void *)&v22[0] + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v24) < 0) {
    operator delete(v23[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x192FED350](v26);
}

void sub_192057B24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA488] + 104;
  *(void *)(a1 + 128) = MEMORY[0x1E4FBA488] + 104;
  uint64_t v3 = a1 + 16;
  uint64_t v4 = MEMORY[0x1E4FBA488] + 64;
  *(void *)(a1 + 16) = MEMORY[0x1E4FBA488] + 64;
  unint64_t v5 = (void *)MEMORY[0x1E4FBA408];
  uint64_t v6 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  uint64_t v7 = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + *(void *)(v7 - 24)) = v6;
  *(void *)(a1 + 8) = 0;
  long long v8 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  uint64_t v9 = MEMORY[0x1E4FBA488] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  uint64_t v10 = v5[5];
  uint64_t v11 = v5[4];
  *(void *)(a1 + 16) = v11;
  *(void *)(v3 + *(void *)(v11 - 24)) = v10;
  uint64_t v12 = v5[1];
  *(void *)a1 = v12;
  *(void *)(a1 + *(void *)(v12 - 24)) = v5[6];
  *(void *)a1 = v9;
  *(void *)(a1 + 128) = v2;
  *(void *)(a1 + 16) = v4;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 24) = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_192057E30(_Unwind_Exception *a1)
{
  std::iostream::~basic_iostream();
  MEMORY[0x192FED350](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA408];
  uint64_t v3 = *MEMORY[0x1E4FBA408];
  *(void *)a1 = *MEMORY[0x1E4FBA408];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x192FED350](a1 + 128);
  return a1;
}

void sub_1920581C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

void ctu::getBytedumpPrettyPrint(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  if (*(char *)(a1 + 23) >= 0) {
    std::string::size_type v4 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    std::string::size_type v4 = *(void *)(a1 + 8);
  }
  if (v4 >= 0x11)
  {
    __int16 v5 = 0;
    std::string::size_type v6 = 0;
    do
    {
      ctu::hex0((ctu *)v5, &v31);
      uint64_t v7 = std::string::append(&v31, "    ", 4uLL);
      long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v32.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string(&v29, (const std::string *)a1, v6, 0x10uLL, (std::allocator<char> *)&v36);
      ctu::getPrettyByteLine(&__p, (uint64_t *)&v29);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      uint64_t v11 = std::string::append(&v32, (const std::string::value_type *)p_p, size);
      long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      v33.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      char v13 = std::string::append(&v33, "\n", 1uLL);
      long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      int64_t v35 = v13->__r_.__value_.__r.__words[2];
      long long v34 = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      if (v35 >= 0) {
        int v15 = (const std::string::value_type *)&v34;
      }
      else {
        int v15 = (const std::string::value_type *)v34;
      }
      if (v35 >= 0) {
        std::string::size_type v16 = HIBYTE(v35);
      }
      else {
        std::string::size_type v16 = *((void *)&v34 + 1);
      }
      std::string::append(a2, v15, v16);
      if (SHIBYTE(v35) < 0) {
        operator delete((void *)v34);
      }
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v33.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v29.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v32.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v31.__r_.__value_.__l.__data_);
      }
      v6 += 16;
      v4 -= 16;
      v5 += 8;
    }
    while (v4 > 0x10);
    if (v4) {
      goto LABEL_32;
    }
LABEL_55:
    uint64_t v25 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    int v26 = (char)v25;
    std::string::size_type v27 = (std::string::size_type)a2 + v25;
    if (v26 >= 0)
    {
      long long v28 = a2;
    }
    else
    {
      std::string::size_type v27 = a2->__r_.__value_.__r.__words[0] + a2->__r_.__value_.__l.__size_;
      long long v28 = (std::string *)a2->__r_.__value_.__r.__words[0];
    }
    std::string::erase(a2, v27 - (void)v28, 1uLL);
    return;
  }
  std::string::size_type v6 = 0;
  if (!v4) {
    goto LABEL_55;
  }
LABEL_32:
  ctu::hex0((ctu *)(__int16)((int)v6 >> 1), &v32);
  int v17 = std::string::append(&v32, "    ", 4uLL);
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string(&__p, (const std::string *)a1, v6, v4, (std::allocator<char> *)&v29);
  ctu::getPrettyByteLine(&v31, (uint64_t *)&__p);
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v19 = &v31;
  }
  else {
    uint64_t v19 = (std::string *)v31.__r_.__value_.__r.__words[0];
  }
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v20 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v20 = v31.__r_.__value_.__l.__size_;
  }
  uint64_t v21 = std::string::append(&v33, (const std::string::value_type *)v19, v20);
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  int64_t v35 = v21->__r_.__value_.__r.__words[2];
  long long v34 = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (v35 >= 0) {
    long long v23 = (const std::string::value_type *)&v34;
  }
  else {
    long long v23 = (const std::string::value_type *)v34;
  }
  if (v35 >= 0) {
    std::string::size_type v24 = HIBYTE(v35);
  }
  else {
    std::string::size_type v24 = *((void *)&v34 + 1);
  }
  std::string::append(a2, v23, v24);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
}

void sub_192058520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (*(char *)(v40 + 23) < 0) {
    operator delete(*(void **)v40);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::getPrettyByteLine(std::string *a1, uint64_t *a2)
{
  std::string::size_type v4 = operator new(0x38uLL);
  __int16 v5 = v4;
  v4[2] = 0;
  *((unsigned char *)v4 + 24) = 0;
  *std::string::size_type v4 = &unk_1EE2F69F0;
  v12[0] = v4;
  v12[1] = v4;
  LODWORD(v6) = *((unsigned __int8 *)a2 + 23);
  if ((v6 & 0x80u) == 0) {
    uint64_t v7 = a2;
  }
  else {
    uint64_t v7 = (uint64_t *)*a2;
  }
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = a2[1];
  }
  *((_DWORD *)v4 + 2) = v6;
  v4[4] = v7;
  v4[5] = 0;
  v4[6] = (int)v6;
  do
  {
    (*(void (**)(void *))(*v5 + 24))(v5);
    __int16 v5 = (void *)v5[2];
  }
  while (v5);
  ctu::TextConverter::pushConversion(v12, 1, 0, 0x7FFFFFFF, 0);
  memset(&__p, 170, sizeof(__p));
  ctu::TextConverter::readChars((ctu::TextConverter *)v12, 0x7FFFFFFFLL, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = (ctu *)&__p;
  }
  else {
    p_p = (ctu *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  ctu::hex_sp(p_p, size, a1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  while (1)
  {
    uint64_t result = v12[0];
    if (!v12[0]) {
      break;
    }
    v12[0] = *(void *)(v12[0] + 16);
    (*(void (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1920587A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  while (1)
  {
    uint64_t v17 = a16;
    if (!a16) {
      break;
    }
    a16 = *(void *)(a16 + 16);
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  _Unwind_Resume(exception_object);
}

void ctu::getBytePrettyPrint(__int16 a1@<W0>, ctu *a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  ctu::hex0((ctu *)a1, &v27);
  uint64_t v7 = std::string::append(&v27, "    ", 4uLL);
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  ctu::hex0(a2, &v26);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v9 = &v26;
  }
  else {
    uint64_t v9 = (std::string *)v26.__r_.__value_.__r.__words[0];
  }
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v26.__r_.__value_.__l.__size_;
  }
  uint64_t v11 = std::string::append(&v28, (const std::string::value_type *)v9, size);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  char v13 = std::string::append(&v29, "    ", 4uLL);
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  ctu::binary0(a2, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v16 = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v17 = std::string::append(&v30, (const std::string::value_type *)p_p, v16);
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  uint64_t v19 = std::string::append(&v31, "    ", 4uLL);
  long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  int v21 = *(char *)(a3 + 23);
  if (v21 >= 0) {
    long long v22 = (const std::string::value_type *)a3;
  }
  else {
    long long v22 = *(const std::string::value_type **)a3;
  }
  if (v21 >= 0) {
    std::string::size_type v23 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v23 = *(void *)(a3 + 8);
  }
  std::string::size_type v24 = std::string::append(&v32, v22, v23);
  *a4 = *v24;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
}

void sub_192058A30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (*(char *)(v47 - 57) < 0) {
    operator delete(*(void **)(v47 - 80));
  }
  if (*(char *)(v47 - 89) < 0) {
    operator delete(*(void **)(v47 - 112));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void ctu::getBytesPrettyPrint(__int16 a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  ctu::hex0((ctu *)a1, &v22);
  uint64_t v7 = std::string::append(&v22, "    ", 4uLL);
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  uint64_t v9 = *(void *)(a2 + 8);
  if (v9 == *(void *)a2) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = *(ctu **)a2;
  }
  ctu::hex_sp(v10, v9 - *(void *)a2, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  char v13 = std::string::append(&v23, (const std::string::value_type *)p_p, size);
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  int v15 = std::string::append(&v24, "    ", 4uLL);
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  int v17 = *(char *)(a3 + 23);
  if (v17 >= 0) {
    long long v18 = (const std::string::value_type *)a3;
  }
  else {
    long long v18 = *(const std::string::value_type **)a3;
  }
  if (v17 >= 0) {
    std::string::size_type v19 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v19 = *(void *)(a3 + 8);
  }
  long long v20 = std::string::append(&v25, v18, v19);
  *a4 = *v20;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
}

void sub_192058C68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void ctu::getBytesPrettyPrint(__int16 a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  ctu::hex0((ctu *)a1, &v20);
  uint64_t v7 = std::string::append(&v20, "    ", 4uLL);
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  ctu::getPrettyByteLine(&__p, a2);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v11 = std::string::append(&v21, (const std::string::value_type *)p_p, size);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  char v13 = std::string::append(&v22, "    ", 4uLL);
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  int v15 = *(char *)(a3 + 23);
  if (v15 >= 0) {
    long long v16 = (const std::string::value_type *)a3;
  }
  else {
    long long v16 = *(const std::string::value_type **)a3;
  }
  if (v15 >= 0) {
    std::string::size_type v17 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v17 = *(void *)(a3 + 8);
  }
  long long v18 = std::string::append(&v23, v16, v17);
  *a4 = *v18;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
}

void sub_192058E50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::getBytedumpPrettyPrintBinary@<X0>(ctu *this@<X0>, const unsigned __int8 *a2@<X1>, std::string *a3@<X8>)
{
  int v3 = (int)a2;
  uint64_t v6 = operator new(0x38uLL);
  void v6[2] = 0;
  *((unsigned char *)v6 + 24) = 0;
  *uint64_t v6 = &unk_1EE2F69F0;
  v9[0] = v6;
  v9[1] = v6;
  *((_DWORD *)v6 + 2) = v3;
  v6[4] = this;
  v6[5] = 0;
  v6[6] = v3;
  do
  {
    (*(void (**)(void *))(*v6 + 24))(v6);
    uint64_t v6 = (void *)v6[2];
  }
  while (v6);
  ctu::TextConverter::pushConversion(v9, 0, 0, 0x7FFFFFFF, 0);
  ctu::TextConverter::readChars((ctu::TextConverter *)v9, 0x7FFFFFFFLL, &__p);
  ctu::getBytedumpPrettyPrint((uint64_t)&__p, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  while (1)
  {
    uint64_t result = v9[0];
    if (!v9[0]) {
      break;
    }
    v9[0] = *(void *)(v9[0] + 16);
    (*(void (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_192058FF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  while (1)
  {
    uint64_t v17 = a16;
    if (!a16) {
      break;
    }
    a16 = *(void *)(a16 + 16);
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  _Unwind_Resume(exception_object);
}

void ctu::logStraddlingBitField(unsigned int (***a1)(void, uint64_t), int a2, signed int a3, uint64_t *a4, __int16 a5, uint64_t a6)
{
  _OWORD v29[4] = *MEMORY[0x1E4F143B8];
  int v7 = a2 - a3;
  if (a2 - a3 > -8)
  {
    signed int v9 = a3;
    do
    {
      int v10 = v7 >= 0 ? v7 : v7 + 7;
      unint64_t v11 = (v10 >> 3);
      uint64_t v12 = *a4;
      if (a4[1] - *a4 <= v11) {
        break;
      }
      unsigned int v13 = v7 - (v10 & 0xFFFFFFF8);
      unsigned int v14 = 8 - v13;
      char v15 = 7 - v13;
      if (v9 <= (int)(8 - v13))
      {
        if (v9 != 8)
        {
          if (!v13)
          {
            unsigned int v18 = (**a1)(a1, 20);
            uint64_t v12 = *a4;
            if (v18)
            {
              uint64_t v28 = 0;
              long long v27 = 0u;
              memset(v26, 0, sizeof(v26));
              std::string::size_type v19 = (ctu *)*(unsigned __int8 *)(v12 + v11);
              std::string::basic_string[abi:ne180100]<0>(v23, "");
              ctu::getBytePrettyPrint(v11 + a5, v19, (uint64_t)v23, &__p);
              ctu::LogMessageBuffer::appendString((std::string *)v26, (uint64_t)&__p);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              if (v24 < 0) {
                operator delete(v23[0]);
              }
              ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog((uint64_t)a1, 20, (ctu::LogMessageBuffer *)v26);
              ctu::LogMessageBuffer::~LogMessageBuffer((ctu::LogMessageBuffer *)v26);
              uint64_t v12 = *a4;
            }
          }
          unsigned int v20 = *(unsigned __int8 *)(v12 + v11);
          v26[0] = v15 - v9 + 1;
          v26[1] = v15;
          ctu::logBitFieldWithDesc(a1, v20, (unsigned __int16 *)v26, a6);
          return;
        }
        if (!(**a1)(a1, 20)) {
          return;
        }
        uint64_t v28 = 0;
        long long v27 = 0u;
        memset(v26, 0, sizeof(v26));
        ctu::getBytePrettyPrint(v11 + a5, (ctu *)*(unsigned __int8 *)(*a4 + v11), a6, &__p);
        ctu::LogMessageBuffer::appendString((std::string *)v26, (uint64_t)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog((uint64_t)a1, 20, (ctu::LogMessageBuffer *)v26);
        goto LABEL_19;
      }
      if (v13)
      {
        unsigned int v16 = *(unsigned __int8 *)(v12 + v11);
        v26[0] = v15 - v14 + 1;
        v26[1] = 7 - v13;
        v29[0] = &unk_1EE2F83F8;
        v29[3] = v29;
        ctu::logBitFieldWithDesc(a1, v16, (unsigned __int16 *)v26, (uint64_t)v29);
        std::__function::__value_func<std::string ()(int)>::~__value_func[abi:ne180100](v29);
      }
      else if ((**a1)(a1, 20))
      {
        uint64_t v28 = 0;
        long long v27 = 0u;
        memset(v26, 0, sizeof(v26));
        uint64_t v17 = (ctu *)*(unsigned __int8 *)(*a4 + v11);
        std::string::basic_string[abi:ne180100]<0>(v23, "");
        ctu::getBytePrettyPrint(v11 + a5, v17, (uint64_t)v23, &__p);
        ctu::LogMessageBuffer::appendString((std::string *)v26, (uint64_t)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v24 < 0) {
          operator delete(v23[0]);
        }
        ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog((uint64_t)a1, 20, (ctu::LogMessageBuffer *)v26);
        ctu::LogMessageBuffer::~LogMessageBuffer((ctu::LogMessageBuffer *)v26);
      }
      v7 += v14;
      v9 -= v14;
    }
    while (v7 >= -7);
  }
  if ((**a1)(a1, 20))
  {
    uint64_t v28 = 0;
    long long v27 = 0u;
    memset(v26, 0, sizeof(v26));
    ctu::LogMessageBuffer::appendString((std::string *)v26, "Invalid current byte position");
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog((uint64_t)a1, 20, (ctu::LogMessageBuffer *)v26);
LABEL_19:
    ctu::LogMessageBuffer::~LogMessageBuffer((ctu::LogMessageBuffer *)v26);
  }
}

void sub_192059428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

uint64_t ctu::getStraddlingBitFieldPrint@<X0>(int a1@<W0>, signed int a2@<W1>, uint64_t *a3@<X2>, __int16 a4@<W3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  v58[4] = *MEMORY[0x1E4F143B8];
  unint64_t v56 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v9 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
  v55[7] = v9;
  v55[8] = v9;
  v55[5] = v9;
  v55[6] = v9;
  v55[3] = v9;
  v55[4] = v9;
  v55[1] = v9;
  v55[2] = v9;
  long long v54 = v9;
  v55[0] = v9;
  *(_OWORD *)v52 = v9;
  long long v53 = v9;
  xpc_object_t v51[2] = v9;
  v51[3] = v9;
  v51[0] = v9;
  v51[1] = v9;
  long long v50 = v9;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v50);
  for (int i = a1 - a2; i >= -7; a2 = v17)
  {
    int v11 = i >= 0 ? i : i + 7;
    unint64_t v12 = (v11 >> 3);
    uint64_t v13 = *a3;
    if (a3[1] - *a3 <= v12) {
      break;
    }
    unsigned int v14 = i - (v11 & 0xFFFFFFF8);
    unsigned int v15 = 8 - v14;
    char v16 = 7 - v14;
    signed int v17 = a2 - (8 - v14);
    if (a2 <= (int)(8 - v14))
    {
      if (a2 == 8)
      {
        ctu::getBytePrettyPrint(v12 + a4, (ctu *)*(unsigned __int8 *)(v13 + v12), a5, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        long long v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)p_p, size);
        std::ios_base::getloc((const std::ios_base *)((char *)v34 + *(void *)(*v34 - 24)));
        int64_t v35 = std::locale::use_facet(&v47, MEMORY[0x1E4FBA258]);
        ((void (*)(const std::locale::facet *, uint64_t))v35->__vftable[2].~facet_0)(v35, 10);
        std::locale::~locale(&v47);
        std::ostream::put();
        std::ostream::flush();
      }
      else
      {
        if (!v14)
        {
          char v36 = (ctu *)*(unsigned __int8 *)(v13 + v12);
          std::string::basic_string[abi:ne180100]<0>(&v47, "");
          ctu::getBytePrettyPrint(v12 + a4, v36, (uint64_t)&v47, &__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v37 = &__p;
          }
          else {
            size_t v37 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v38 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v38 = __p.__r_.__value_.__l.__size_;
          }
          unint64_t v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)v37, v38);
          std::ios_base::getloc((const std::ios_base *)((char *)v39 + *(void *)(*v39 - 24)));
          uint64_t v40 = std::locale::use_facet(&v57, MEMORY[0x1E4FBA258]);
          ((void (*)(const std::locale::facet *, uint64_t))v40->__vftable[2].~facet_0)(v40, 10);
          std::locale::~locale(&v57);
          std::ostream::put();
          std::ostream::flush();
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (v48 < 0) {
            operator delete(v47.__locale_);
          }
          uint64_t v13 = *a3;
        }
        unsigned int v41 = *(unsigned __int8 *)(v13 + v12);
        LOBYTE(v47.__locale_) = v16 - a2 + 1;
        BYTE1(v47.__locale_) = v16;
        ctu::getBitFieldPrintWithDesc(v41, (unsigned __int16 *)&v47, a5, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v42 = &__p;
        }
        else {
          v42 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v43 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v43 = __p.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)v42, v43);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      goto LABEL_29;
    }
    if (v14)
    {
      unsigned int v18 = *(unsigned __int8 *)(v13 + v12);
      LOBYTE(v57.__locale_) = v16 - v15 + 1;
      BYTE1(v57.__locale_) = 7 - v14;
      v58[0] = &unk_1EE2F45F0;
      v58[3] = v58;
      ctu::getBitFieldPrintWithDesc(v18, (unsigned __int16 *)&v57, (uint64_t)v58, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v19 = &__p;
      }
      else {
        std::string::size_type v19 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v20 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v20 = __p.__r_.__value_.__l.__size_;
      }
      std::string v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)v19, v20);
      std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(void *)(*v21 - 24)));
      std::string v22 = std::locale::use_facet(&v47, MEMORY[0x1E4FBA258]);
      ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
      std::locale::~locale(&v47);
      std::ostream::put();
      std::ostream::flush();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::__function::__value_func<std::string ()(int)>::~__value_func[abi:ne180100](v58);
    }
    else
    {
      std::string v23 = (ctu *)*(unsigned __int8 *)(v13 + v12);
      std::string::basic_string[abi:ne180100]<0>(&v47, "");
      ctu::getBytePrettyPrint(v12 + a4, v23, (uint64_t)&v47, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        char v24 = &__p;
      }
      else {
        char v24 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v25 = __p.__r_.__value_.__l.__size_;
      }
      std::string v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)v24, v25);
      std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(void *)(*v26 - 24)));
      long long v27 = std::locale::use_facet(&v57, MEMORY[0x1E4FBA258]);
      ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
      std::locale::~locale(&v57);
      std::ostream::put();
      std::ostream::flush();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v48 < 0) {
        operator delete(v47.__locale_);
      }
    }
    i += v15;
  }
  uint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"Invalid current byte position", 29);
  std::ios_base::getloc((const std::ios_base *)((char *)v28 + *(void *)(*v28 - 24)));
  std::string v29 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v29->__vftable[2].~facet_0)(v29, 10);
  std::locale::~locale((std::locale *)&__p);
  std::ostream::put();
  std::ostream::flush();
LABEL_29:
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v51 + 8, a6);
  *(void *)&long long v50 = *MEMORY[0x1E4FBA408];
  uint64_t v30 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)&v51[-1] + *(void *)(v50 - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  *(void *)&v51[0] = v30;
  *((void *)&v51[0] + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v53) < 0) {
    operator delete(v52[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x192FED350](v55);
}

void sub_192059B98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, std::locale a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    uint64_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_out_of_range[abi:ne180100]()
{
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E5743E90, MEMORY[0x1E4FBA1D0]);
}

void sub_192059D98(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
  return result;
}

void *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  v13[0] = 0xAAAAAAAAAAAAAAAALL;
  v13[1] = 0xAAAAAAAAAAAAAAAALL;
  MEMORY[0x192FED100](v13, a1);
  if (LOBYTE(v13[0]))
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      int v10 = std::locale::use_facet(&v14, MEMORY[0x1E4FBA258]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x192FED110](v13);
  return a1;
}

void sub_192059F24(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  MEMORY[0x192FED110](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x192059F04);
}

void sub_192059F78(_Unwind_Exception *a1)
{
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if (v12 >= 1)
    {
      memset(__p, 170, sizeof(__p));
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      uint64_t v13 = SHIBYTE(__p[2]) >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96))(v6, v13, v12);
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0;
      }
    }
    uint64_t v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v15) == v15) {
      *(void *)(a5 + 24) = 0;
    }
    else {
      return 0;
    }
  }
  return v6;
}

void sub_19205A104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::basic_string[abi:ne180100](void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

uint64_t std::stringbuf::str[abi:ne180100]<std::allocator<char>>@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = std::stringbuf::view[abi:ne180100](a1);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = (const void *)result;
  size_t v6 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    int v9 = operator new(v7 + 1);
    a2[1] = v6;
    a2[2] = v8 | 0x8000000000000000;
    *a2 = v9;
    a2 = v9;
  }
  else
  {
    *((unsigned char *)a2 + 23) = v4;
    if (!v4) {
      goto LABEL_9;
    }
  }
  uint64_t result = (uint64_t)memmove(a2, v5, v6);
LABEL_9:
  *((unsigned char *)a2 + v6) = 0;
  return result;
}

uint64_t std::stringbuf::view[abi:ne180100](uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 96);
  if ((v1 & 0x10) != 0)
  {
    unint64_t v3 = *(void *)(a1 + 48);
    if (*(void *)(a1 + 88) < v3) {
      *(void *)(a1 + 88) = v3;
    }
    return *(void *)(a1 + 40);
  }
  else if ((v1 & 8) != 0)
  {
    return *(void *)(a1 + 16);
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ctu::logStraddlingBitField(ctu::StaticLogger const&,int,int,std::vector<unsigned char> const&,unsigned long,std::string const&)::$_0,std::allocator<ctu::logStraddlingBitField(ctu::StaticLogger const&,int,int,std::vector<unsigned char> const&,unsigned long,std::string const&)::$_0>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EE2F83F8;
  return result;
}

void std::__function::__func<ctu::logStraddlingBitField(ctu::StaticLogger const&,int,int,std::vector<unsigned char> const&,unsigned long,std::string const&)::$_0,std::allocator<ctu::logStraddlingBitField(ctu::StaticLogger const&,int,int,std::vector<unsigned char> const&,unsigned long,std::string const&)::$_0>,std::string ()(int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE2F83F8;
}

void *std::__function::__func<ctu::logStraddlingBitField(ctu::StaticLogger const&,int,int,std::vector<unsigned char> const&,unsigned long,std::string const&)::$_0,std::allocator<ctu::logStraddlingBitField(ctu::StaticLogger const&,int,int,std::vector<unsigned char> const&,unsigned long,std::string const&)::$_0>,std::string ()(int)>::operator()@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

uint64_t std::__function::__func<ctu::logStraddlingBitField(ctu::StaticLogger const&,int,int,std::vector<unsigned char> const&,unsigned long,std::string const&)::$_0,std::allocator<ctu::logStraddlingBitField(ctu::StaticLogger const&,int,int,std::vector<unsigned char> const&,unsigned long,std::string const&)::$_0>,std::string ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ctu::logStraddlingBitField(ctu::StaticLogger const&,int,int,std::vector<unsigned char> const&,unsigned long,std::string const&)::$_0,std::allocator<ctu::logStraddlingBitField(ctu::StaticLogger const&,int,int,std::vector<unsigned char> const&,unsigned long,std::string const&)::$_0>,std::string ()(int)>::target_type()
{
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

void *std::__function::__value_func<std::string ()(int)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<ctu::getStraddlingBitFieldPrint(int,int,std::vector<unsigned char> const&,unsigned long,std::string const&)::$_0,std::allocator<ctu::getStraddlingBitFieldPrint(int,int,std::vector<unsigned char> const&,unsigned long,std::string const&)::$_0>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EE2F45F0;
  return result;
}

void std::__function::__func<ctu::getStraddlingBitFieldPrint(int,int,std::vector<unsigned char> const&,unsigned long,std::string const&)::$_0,std::allocator<ctu::getStraddlingBitFieldPrint(int,int,std::vector<unsigned char> const&,unsigned long,std::string const&)::$_0>,std::string ()(int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE2F45F0;
}

void *std::__function::__func<ctu::getStraddlingBitFieldPrint(int,int,std::vector<unsigned char> const&,unsigned long,std::string const&)::$_0,std::allocator<ctu::getStraddlingBitFieldPrint(int,int,std::vector<unsigned char> const&,unsigned long,std::string const&)::$_0>,std::string ()(int)>::operator()@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

uint64_t std::__function::__func<ctu::getStraddlingBitFieldPrint(int,int,std::vector<unsigned char> const&,unsigned long,std::string const&)::$_0,std::allocator<ctu::getStraddlingBitFieldPrint(int,int,std::vector<unsigned char> const&,unsigned long,std::string const&)::$_0>,std::string ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ctu::getStraddlingBitFieldPrint(int,int,std::vector<unsigned char> const&,unsigned long,std::string const&)::$_0,std::allocator<ctu::getStraddlingBitFieldPrint(int,int,std::vector<unsigned char> const&,unsigned long,std::string const&)::$_0>,std::string ()(int)>::target_type()
{
}

BOOL ctu::Compression::Compress(uint64_t a1, unint64_t *a2)
{
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v13.state = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v13.avail_in = v4;
  v13.reserved = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v13.data_type = v4;
  *(_OWORD *)&v13.total_out = v4;
  *(_OWORD *)&v13.next_out = v4;
  *(_OWORD *)&v13.zfree = 0uLL;
  v13.next_in = *(Bytef **)a1;
  v13.avail_in = *(_DWORD *)(a1 + 8) - LODWORD(v13.next_in);
  int v5 = deflateInit2_(&v13, -1, 8, 31, 8, 0, "1.2.12", 112);
  BOOL result = 0;
  if (!v5)
  {
    uint64_t v7 = *(Bytef **)a1;
    if (*(void *)(a1 + 8) == *(void *)a1) {
      return 0;
    }
    a2[1] = *a2;
    uint64_t v8 = 2 * (*(void *)(a1 + 8) - (void)v7);
    if (v8 != -12) {
      std::vector<unsigned char>::__append(a2, v8 + 12);
    }
    do
    {
      unint64_t v9 = *a2;
      v13.next_out = (Bytef *)(*a2 + v13.total_out);
      v13.avail_out = *((_DWORD *)a2 + 2) - (LODWORD(v13.total_out) + v9);
      int v10 = deflate(&v13, 4);
    }
    while (!v10);
    int v11 = v10;
    uLong v12 = a2[1] - *a2;
    if (v13.total_out <= v12)
    {
      if (v13.total_out < v12) {
        a2[1] = *a2 + v13.total_out;
      }
    }
    else
    {
      std::vector<unsigned char>::__append(a2, v13.total_out - v12);
    }
    return v11 == 1 && deflateEnd(&v13) == 0;
  }
  return result;
}

BOOL ctu::Compression::Decompress(uint64_t a1, unint64_t *a2)
{
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v18.state = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v18.avail_in = v4;
  v18.reserved = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v18.data_type = v4;
  *(_OWORD *)&v18.uLong total_out = v4;
  *(_OWORD *)&v18.next_out = v4;
  *(_OWORD *)&v18.zfree = 0uLL;
  v18.next_in = *(Bytef **)a1;
  v18.avail_in = *(_DWORD *)(a1 + 8) - LODWORD(v18.next_in);
  if (inflateInit2_(&v18, 47, "1.2.12", 112)) {
    return 0;
  }
  unint64_t v6 = *(void *)(a1 + 8) - *(void *)a1;
  if (!v6) {
    return 0;
  }
  size_t v7 = v6 >> 1;
  a2[1] = *a2;
  if ((v6 >> 1) + v6) {
    std::vector<unsigned char>::__append(a2, (v6 >> 1) + v6);
  }
  uLong total_out = v18.total_out;
  uLong v9 = -v18.total_out;
  while (1)
  {
    uLong v10 = v18.total_out;
    if (!v18.avail_in) {
      break;
    }
    unint64_t v12 = *a2;
    unint64_t v11 = a2[1];
    uLong v13 = v11 - *a2;
    if (v18.total_out - total_out >= v13)
    {
      uLong v14 = v13 + v7;
      if (v13 >= v13 + v7)
      {
        if (v13 > v13 + v7)
        {
          LODWORD(v1ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v12 + v14;
          a2[1] = v12 + v14;
        }
      }
      else
      {
        std::vector<unsigned char>::__append(a2, v7);
        uLong v10 = v18.total_out;
        unint64_t v12 = *a2;
        unint64_t v11 = a2[1];
      }
    }
    v18.next_out = (Bytef *)(v12 + v10 + v9);
    v18.avail_out = total_out - (v12 + v10) + v11;
    int v15 = inflate(&v18, 0);
    if (v15)
    {
      if (v15 != 1) {
        return 0;
      }
      uLong v10 = v18.total_out;
      break;
    }
  }
  uLong v16 = v10 - total_out;
  unint64_t v17 = a2[1] - *a2;
  if (v16 <= v17)
  {
    if (v16 < v17) {
      a2[1] = *a2 + v16;
    }
  }
  else
  {
    std::vector<unsigned char>::__append(a2, v16 - v17);
  }
  return inflateEnd(&v18) == 0;
}

BOOL ctu::Compression::Decompress(uint64_t a1)
{
  v7.reserved = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v7.data_type = v2;
  *(_OWORD *)&v7.state = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v7.uLong total_out = v2;
  *(_OWORD *)&v7.next_out = v2;
  *(_OWORD *)&v7.avail_in = v2;
  uint64_t v3 = operator new(0x4000uLL);
  bzero(v3, 0x4000uLL);
  *(_OWORD *)&v7.zfree = 0uLL;
  v7.next_in = *(Bytef **)a1;
  v7.avail_in = *(_DWORD *)(a1 + 8) - LODWORD(v7.next_in);
  if (!inflateInit2_(&v7, 47, "1.2.12", 112) && *(void *)(a1 + 8) != *(void *)a1)
  {
    while (1)
    {
      v7.next_out = (Bytef *)v3;
      v7.avail_out = 0x4000;
      if (inflate(&v7, 0) == -2) {
        break;
      }
      unint64_t v6 = (void *)std::ostream::write();
      if ((*((unsigned char *)v6 + *(void *)(*v6 - 24) + 32) & 5) != 0) {
        break;
      }
      if (v7.avail_out)
      {
        BOOL v4 = inflateEnd(&v7) == 0;
        goto LABEL_3;
      }
    }
  }
  BOOL v4 = 0;
LABEL_3:
  operator delete(v3);
  return v4;
}

void sub_19205A928(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

const __CFData *ctu::Compression::Decompress@<X0>(void *a1@<X0>, CFDataRef *a2@<X1>, CFDataRef *a3@<X8>)
{
  CFDataRef result = *a2;
  if (*a2) {
    unint64_t v6 = ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get;
  }
  else {
    unint64_t v6 = 0;
  }
  if (!v6) {
    goto LABEL_6;
  }
  memset(&strm.data_type, 0, 24);
  memset(&strm.avail_in, 0, 56);
  strm.zalloc = (alloc_func)ctu::Compression::Decompress(__CFAllocator const*,ctu::cf::CFSharedRef<__CFData const> const&)::$_0::__invoke;
  strm.zfree = (free_func)ctu::Compression::Decompress(__CFAllocator const*,ctu::cf::CFSharedRef<__CFData const> const&)::$_1::__invoke;
  strm.opaque = a1;
  BytePtr = (Bytef *)CFDataGetBytePtr(result);
  unint64_t Length = CFDataGetLength(*a2);
  strm.next_in = BytePtr;
  strm.avail_in = Length;
  CFDataRef result = (const __CFData *)inflateInit2_(&strm, 47, "1.2.12", 112);
  if (result) {
    goto LABEL_6;
  }
  if (Length)
  {
    CFTypeRef v21 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
    CFTypeRef cf = a1;
    if (a1)
    {
      CFRetain(a1);
      CFTypeRef v10 = cf;
      CFTypeRef v21 = cf;
      CFRetain(cf);
    }
    else
    {
      CFTypeRef v10 = 0;
      CFTypeRef v21 = 0;
    }
    ctu::SharedRef<__CFAllocator const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFAllocator const>::~SharedRef(&cf);
    CFTypeRef cf = 0;
    z_stream v18 = 0;
    uint64_t v19 = 0;
    std::string::size_type v20 = v10;
    if (v10) {
      CFRetain(v10);
    }
    unint64_t v11 = Length >> 1;
    if ((Length >> 1) + Length) {
      std::vector<unsigned char,ctu::cf::allocator_adapter<unsigned char>>::__append((char **)&cf, (Length >> 1) + Length);
    }
    do
    {
      if (!strm.avail_in) {
        goto LABEL_25;
      }
      unint64_t v12 = v18 - (unsigned char *)cf;
      if (strm.total_out >= v18 - (unsigned char *)cf)
      {
        if (v12 >= v12 + v11)
        {
          if (v12 > v12 + v11) {
            v18 += v11;
          }
        }
        else
        {
          std::vector<unsigned char,ctu::cf::allocator_adapter<unsigned char>>::__append((char **)&cf, Length >> 1);
        }
      }
      if (!strm.avail_out)
      {
        strm.next_out = (Bytef *)cf + strm.total_out;
        strm.avail_out = v18 - (LODWORD(strm.total_out) + cf);
      }
      int v13 = inflate(&strm, 0);
    }
    while (!v13);
    if (v13 != 1)
    {
LABEL_26:
      CFDataRef v14 = 0;
      goto LABEL_32;
    }
LABEL_25:
    if (inflateEnd(&strm)) {
      goto LABEL_26;
    }
    int v15 = (const UInt8 *)cf;
    uLong v16 = v18;
    if (strm.total_out <= v18 - (unsigned char *)cf)
    {
      if (strm.total_out < v18 - (unsigned char *)cf)
      {
        uLong v16 = (char *)cf + strm.total_out;
        z_stream v18 = (char *)cf + strm.total_out;
      }
    }
    else
    {
      std::vector<unsigned char,ctu::cf::allocator_adapter<unsigned char>>::__append((char **)&cf, strm.total_out - (v18 - (unsigned char *)cf));
      int v15 = (const UInt8 *)cf;
      uLong v16 = v18;
    }
    CFDataRef v14 = CFDataCreate((CFAllocatorRef)a1, v15, v16 - (char *)v15);
LABEL_32:
    *a3 = v14;
    std::vector<unsigned char,ctu::cf::allocator_adapter<unsigned char>>::__destroy_vector::operator()[abi:ne180100]((uint64_t)&cf);
    ctu::SharedRef<__CFAllocator const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFAllocator const>::~SharedRef(&v20);
    return (const __CFData *)ctu::SharedRef<__CFAllocator const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFAllocator const>::~SharedRef(&v21);
  }
  else
  {
LABEL_6:
    *a3 = 0;
  }
  return result;
}

void sub_19205AB8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  std::vector<unsigned char,ctu::cf::allocator_adapter<unsigned char>>::__destroy_vector::operator()[abi:ne180100]((uint64_t)va);
  ctu::SharedRef<__CFAllocator const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFAllocator const>::~SharedRef(v2);
  ctu::SharedRef<__CFAllocator const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFAllocator const>::~SharedRef((const void **)va1);
  _Unwind_Resume(a1);
}

uint64_t ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get(uint64_t a1)
{
  return *(void *)a1;
}

void std::vector<unsigned char>::__append(unint64_t *a1, size_t a2)
{
  int v5 = (char *)a1[1];
  uint64_t v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    unint64_t v6 = *a1;
    uint64_t v7 = &v5[-*a1];
    unint64_t v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v10 = v8;
    }
    if (v10) {
      unint64_t v11 = (unint64_t)operator new(v10);
    }
    else {
      unint64_t v11 = 0;
    }
    unint64_t v12 = &v7[v11];
    int v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      unint64_t v11 = (unint64_t)v12;
    }
    else
    {
      CFDataRef v14 = &v5[~v6];
      do
      {
        char v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      int v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

void std::vector<unsigned char>::__throw_length_error[abi:ne180100]()
{
}

void *ctu::Compression::Decompress(__CFAllocator const*,ctu::cf::CFSharedRef<__CFData const> const&)::$_0::__invoke(const __CFAllocator *a1, int a2, int a3)
{
  return CFAllocatorAllocate(a1, (a3 * a2), 0);
}

const void **ctu::SharedRef<__CFAllocator const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFAllocator const>::~SharedRef(const void **a1)
{
  long long v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void std::vector<unsigned char,ctu::cf::allocator_adapter<unsigned char>>::__append(char **a1, size_t a2)
{
  unint64_t v6 = a1 + 1;
  uint64_t v4 = a1[1];
  int v5 = v6[1];
  if (v5 - v4 >= a2)
  {
    if (a2)
    {
      unint64_t v12 = &v4[a2];
      bzero(v4, a2);
      uint64_t v4 = v12;
    }
    a1[1] = v4;
  }
  else
  {
    uint64_t v7 = (char *)(v4 - *a1);
    unint64_t v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = v5 - *a1;
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      CFIndex v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      CFIndex v10 = v8;
    }
    if (v10) {
      unint64_t v11 = CFAllocatorAllocate((CFAllocatorRef)a1[3], v10, 0);
    }
    else {
      unint64_t v11 = 0;
    }
    int v13 = &v7[(void)v11];
    CFDataRef v14 = (char *)v11 + v10;
    char v15 = &v13[a2];
    bzero(v13, a2);
    unint64_t v17 = *a1;
    uLong v16 = a1[1];
    if (v16 != *a1)
    {
      do
      {
        char v18 = *--v16;
        *--int v13 = v18;
      }
      while (v16 != v17);
      uLong v16 = *a1;
    }
    *a1 = v13;
    a1[1] = v15;
    a1[2] = v14;
    if (v16) {
      CFAllocatorDeallocate((CFAllocatorRef)a1[3], v16);
    }
  }
}

void std::vector<unsigned char,ctu::cf::allocator_adapter<unsigned char>>::__destroy_vector::operator()[abi:ne180100](uint64_t a1)
{
  int v1 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v1;
    CFAllocatorDeallocate(*(CFAllocatorRef *)(a1 + 24), v1);
  }
}

uint64_t TelephonyUtilWriteToCompletion(int __fd, char *__buf, size_t __nbyte, _DWORD *a4)
{
  *a4 = 0;
  if (!__nbyte) {
    return 0;
  }
  unsigned int v5 = __nbyte;
  while (1)
  {
    ssize_t v8 = write(__fd, __buf, v5);
    if (v8 < 0) {
      break;
    }
    *a4 += v8;
    __buf += v8;
    v5 -= v8;
    if (!v5) {
      return 0;
    }
  }
  return *__error();
}

ssize_t TelephonyUtilUnblockableReadWithTimeout(int a1, unsigned int a2, void *a3, unsigned int a4, unsigned int a5)
{
  unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  if (a1 < 0) {
    return 4294967287;
  }
  memset(&v15, 0, sizeof(v15));
  if (__darwin_check_fd_set_overflow(a1, &v15, 0)) {
    v15.fds_bits[a1 >> 5] |= 1 << a1;
  }
  if ((a2 & 0x80000000) == 0 && __darwin_check_fd_set_overflow(a2, &v15, 0)) {
    v15.fds_bits[a2 >> 5] |= 1 << a2;
  }
  if (a5 == -1)
  {
    CFIndex v10 = 0;
  }
  else
  {
    unint64_t v13 = a5 / 0x3E8uLL;
    LODWORD(v14) = 1000 * (a5 % 0x3E8);
    CFIndex v10 = (timeval *)&v13;
  }
  if (a1 <= (int)a2) {
    unsigned int v12 = a2;
  }
  else {
    unsigned int v12 = a1;
  }
  ssize_t result = select(v12 + 1, &v15, 0, 0, v10);
  if ((int)result >= 1)
  {
    if ((a2 & 0x80000000) == 0
      && __darwin_check_fd_set_overflow(a2, &v15, 0)
      && ((v15.fds_bits[a2 >> 5] >> a2) & 1) != 0)
    {
      return 0;
    }
    else
    {
      return read(a1, a3, a4);
    }
  }
  return result;
}

BOOL TelephonyUtilUnblockableReadToCompletionWithTimeout(int a1, unsigned int a2, char *a3, unsigned int a4, unsigned int a5)
{
  do
  {
    unsigned int v9 = a4;
    if (!a4) {
      break;
    }
    int v10 = TelephonyUtilUnblockableReadWithTimeout(a1, a2, a3, a4, a5);
    a3 += v10;
    a4 = v9 - v10;
  }
  while (v10 > 0);
  return v9 == 0;
}

uint64_t TelephonyUtilLogGetBufferSize(int a1)
{
  return (146 * ((a1 + 31) >> 5)) | 1;
}

uint64_t TelephonyUtilLogBinaryToBuffer(unsigned char *a1, unsigned int a2, unsigned __int8 *a3, int a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (a4 < 1)
  {
    uint64_t v6 = 0;
    *a1 = 0;
  }
  else
  {
    uint64_t v5 = 0;
    LODWORD(v6) = 0;
    uint64_t v7 = a4;
    int v8 = a4;
    uint64_t v22 = a4;
    while (1)
    {
      int v9 = v8 - 32;
      if (v8 >= 32) {
        int v8 = 32;
      }
      memset(&v25[14], 0, 32);
      if (v8 <= 1) {
        uint64_t v10 = 1;
      }
      else {
        uint64_t v10 = v8;
      }
      memset(v25, 0, 224);
      if (v5 >= v7)
      {
        LODWORD(v1ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
        int v15 = 0;
      }
      else
      {
        uint64_t v11 = 0;
        unsigned int v12 = a3;
        do
        {
          unsigned int v13 = *v12++;
          unint64_t v14 = (char *)v25 + v11;
          *unint64_t v14 = str_18[(unint64_t)v13 >> 4];
          v14[1] = str_18[v13 & 0xF];
          v11 += 3;
          v14[2] = 32;
        }
        while (v10 + 2 * v10 != v11);
        int v15 = v10;
      }
      unsigned int v16 = 3 * (33 - v15);
      memset((char *)v25 + v11, 32, v16);
      unsigned int v17 = v16 + v11;
      uint64_t v7 = v22;
      if (v5 < v22)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          char v19 = a3[i];
          if ((v19 - 32) > 0x5Eu || a3[i] == 92 || a3[i] == 37) {
            char v19 = 46;
          }
          *((unsigned char *)v25 + v17 + i) = v19;
        }
        v17 += i;
      }
      *(_WORD *)((char *)v25 + (int)v17) = 10;
      uint64_t v6 = (snprintf(&a1[v6], a2 - v6, "%04x  %s", v5, (const char *)v25) + v6);
      if (v6 >= a2) {
        break;
      }
      v5 += 32;
      a3 += 32;
      int v8 = v9;
      if ((int)v5 >= a4) {
        return v6;
      }
    }
    return a2;
  }
  return v6;
}

uint64_t TelephonyUtilDecodeHexWithDefault(int a1, unsigned int a2)
{
  unsigned int v2 = a1 - 48;
  if ((a1 - 97) >= 6) {
    unsigned int v3 = a2;
  }
  else {
    unsigned int v3 = a1 - 87;
  }
  if ((a1 - 65) <= 5) {
    unsigned int v4 = a1 - 55;
  }
  else {
    unsigned int v4 = v3;
  }
  if (v2 <= 9) {
    return v2;
  }
  else {
    return v4;
  }
}

uint64_t TelephonyUtilEncodeHex(uint64_t result, unsigned char *a2, unsigned char *a3)
{
  *a2 = str_18[(unint64_t)result >> 4];
  *a3 = str_18[result & 0xF];
  return result;
}

uint64_t TelephonyUtilBinToHexGetBufferSize(int a1)
{
  return (2 * a1) | 1u;
}

uint64_t TelephonyUtilBinToHex(unsigned char *a1, unint64_t a2, unsigned __int8 *a3, unint64_t a4)
{
  if (((2 * a4) | 1) <= a2) {
    unint64_t v4 = a4;
  }
  else {
    unint64_t v4 = (a2 - 1) >> 1;
  }
  uint64_t v5 = a1;
  if (v4)
  {
    uint64_t v6 = a1;
    do
    {
      unsigned int v7 = *a3++;
      char v8 = str_18[v7 & 0xF];
      *uint64_t v6 = str_18[(unint64_t)v7 >> 4];
      uint64_t v5 = v6 + 2;
      v6[1] = v8;
      v6 += 2;
      --v4;
    }
    while (v4);
  }
  *uint64_t v5 = 0;
  return (v5 - a1 + 1);
}

uint64_t TelephonyUtilHexToBin(unsigned char *a1, uint64_t a2, char *__s)
{
  unsigned int v6 = strlen(__s);
  LODWORD(v7) = v6 >> 1;
  uint64_t v8 = v6 & 1;
  if (a2 - v8 >= (unint64_t)(v6 >> 1)) {
    uint64_t v7 = v7;
  }
  else {
    uint64_t v7 = (a2 - v8);
  }
  if (v6)
  {
    int v9 = *__s;
    unsigned int v10 = v9 - 48;
    unsigned int v11 = v9 - 65;
    if ((v9 - 97) >= 6) {
      char v12 = 0;
    }
    else {
      char v12 = v9 - 87;
    }
    char v13 = v9 - 55;
    if (v11 > 5) {
      char v13 = v12;
    }
    if (v10 < 0xA) {
      char v13 = v10;
    }
    *a1 = v13;
  }
  int v14 = v6 & 1;
  if (v7)
  {
    int v15 = &__s[v8];
    unsigned int v16 = &a1[v8];
    unsigned int v17 = (unsigned __int8 *)(v15 + 1);
    uint64_t v18 = v7;
    do
    {
      int v19 = *(v17 - 1);
      unsigned int v20 = v19 - 48;
      unsigned int v21 = v19 - 65;
      if ((v19 - 97) >= 6) {
        char v22 = 0;
      }
      else {
        char v22 = v19 - 87;
      }
      char v23 = v19 - 55;
      if (v21 > 5) {
        char v23 = v22;
      }
      if (v20 < 0xA) {
        char v23 = v20;
      }
      char v24 = 16 * v23;
      int v26 = *v17;
      v17 += 2;
      char v25 = v26;
      unsigned int v27 = v26 - 48;
      unsigned int v28 = v26 - 65;
      char v29 = v26 - 87;
      if ((v26 - 97) >= 6) {
        char v30 = 0;
      }
      else {
        char v30 = v29;
      }
      char v31 = v25 - 55;
      if (v28 > 5) {
        char v31 = v30;
      }
      if (v27 < 0xA) {
        char v31 = v27;
      }
      *v16++ = v31 | v24;
      --v18;
    }
    while (v18);
  }
  return (v7 + v14);
}

uint64_t TelephonyUtilParseHardwareModel(unsigned char *a1, uint64_t a2)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)(a2 + 8) = 0;
  *(void *)a2 = 0;
  if (!*a1) {
    return 0;
  }
  *(_OWORD *)__s = 0u;
  long long v40 = 0u;
  __strlcpy_chk();
  size_t v3 = strlen(__s);
  if (!v3)
  {
    unsigned int v10 = "received zero-length string parameter\n";
    goto LABEL_20;
  }
  if (v3 >> 31)
  {
    unsigned int v10 = "received string with length exceeding maximum int value";
LABEL_20:
    _TelephonyUtilDebugPrintError((uint64_t)"stripLongPrefix", (uint64_t)v10, v4, v5, v6, v7, v8, v9, v37);
    char v23 = "aborting because stripLongPrefix failed\n";
LABEL_21:
    _TelephonyUtilDebugPrintError((uint64_t)"TelephonyUtilParseHardwareModel", (uint64_t)v23, v17, v18, v19, v20, v21, v22, v37);
    return 0;
  }
  uint64_t v11 = 0;
  *(_OWORD *)__endptr = 0u;
  long long v42 = 0u;
  int v12 = -1;
  unsigned int v10 = "aborting to prevent out-of-bounds access while copying suffix (non-numeric) characters\n";
  char v13 = "received string parameter with no suffix (non-numeric) characters\n";
  while (1)
  {
    int v14 = __s[(v3 + v12)];
    if ((v14 - 48) <= 9) {
      break;
    }
    if (v11 == 32) {
      goto LABEL_20;
    }
    *((unsigned char *)__endptr + v1ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v14;
    --v12;
    if (v3 == ++v11)
    {
LABEL_10:
      unsigned int v10 = v13;
      goto LABEL_20;
    }
  }
  if ((int)v3 - (int)v11 < 1)
  {
    unsigned int v10 = "received string parameter without non-numeric prefix\n";
    goto LABEL_20;
  }
  int v15 = -1 - v11;
  unsigned int v10 = "aborting to prevent out-of-bounds access while copying numeric characters\n";
  char v13 = "received string parameter without non-numeric prefix\n";
  while (1)
  {
    char v16 = __s[(v3 + v15)];
    if ((v16 - 48) > 9) {
      break;
    }
    if (v11 == 32) {
      goto LABEL_20;
    }
    *((unsigned char *)__endptr + v1ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v16;
    --v15;
    if (v3 == ++v11) {
      goto LABEL_10;
    }
  }
  if ((v11 & 0xFFFFFFE0) != 0)
  {
    unsigned int v10 = "aborting to prevent out-of-bounds access while copying 1-character alphabetical prefix\n";
    goto LABEL_20;
  }
  *((unsigned char *)__endptr + v1ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v16;
  char v25 = __s;
  __memset_chk();
  uint64_t v26 = v11;
  do
    *v25++ = *((unsigned char *)__endptr + v26--);
  while (v26 != -1);
  __s[v11 + 1] = 0;
  __endptr[0] = 0;
  __darwin_ct_rune_t v27 = __s[0];
  *(unsigned char *)(a2 + 4) = __s[0];
  __darwin_ct_rune_t v28 = __toupper(v27);
  *(unsigned char *)(a2 + 4) = v28;
  if (((v28 << 24) - 1509949441) <= 0xE6FFFFFE)
  {
    char v23 = "detected hardware model info string without alphabetical prefix\n";
    goto LABEL_21;
  }
  *__error() = 0;
  *(_DWORD *)a2 = strtoul(&__s[1], __endptr, 10);
  if (*__error())
  {
    uint64_t v38 = *__error();
    _TelephonyUtilDebugPrintError((uint64_t)"TelephonyUtilParseHardwareModel", (uint64_t)"strtoul failed with error no %d\n", v29, v30, v31, v32, v33, v34, v38);
    return 0;
  }
  int64_t v35 = __endptr[0];
  if (!*__endptr[0])
  {
    *(_DWORD *)(a2 + 8) = 0;
    return 1;
  }
  if (!strncasecmp("SIM", __endptr[0], 3uLL))
  {
    *(_DWORD *)(a2 + 8) = 3;
    goto LABEL_48;
  }
  if (!strncasecmp("FPGA", v35, 4uLL))
  {
    *(_DWORD *)(a2 + 8) = 4;
    return 1;
  }
  if (!strncasecmp("AP", v35 + 1, 2uLL))
  {
    *(_DWORD *)(a2 + 8) = 2;
    goto LABEL_48;
  }
  if (!strncasecmp("AP", v35, 2uLL))
  {
    *(_DWORD *)(a2 + 8) = 2;
    return 1;
  }
  if (!strncasecmp("DEV", v35 + 1, 3uLL))
  {
    int v36 = 1;
LABEL_47:
    *(_DWORD *)(a2 + 8) = v36;
    goto LABEL_48;
  }
  if (!strncasecmp("DEV", v35, 3uLL))
  {
    uint64_t result = 1;
    *(_DWORD *)(a2 + 8) = 1;
    return result;
  }
  if (!strncasecmp("Mac", v35 + 1, 3uLL))
  {
    int v36 = 5;
    goto LABEL_47;
  }
  if (strncasecmp("Mac", v35, 3uLL))
  {
LABEL_48:
    __strlcpy_chk();
    *(unsigned char *)(a2 + 5) = __tolower(*(char *)(a2 + 5));
    *(unsigned char *)(a2 + 6) = __tolower(*(char *)(a2 + 6));
    return 1;
  }
  *(_DWORD *)(a2 + 8) = 5;
  return 1;
}

uint64_t TelephonyUtilIsInternalBuild()
{
  if (_TUQueryBuildInformationOnce != -1) {
    dispatch_once(&_TUQueryBuildInformationOnce, &__block_literal_global_34);
  }
  return _TUIsInternalBuildCached;
}

uint64_t TelephonyUtilIsCarrierBuild()
{
  if (_TUQueryBuildInformationOnce != -1) {
    dispatch_once(&_TUQueryBuildInformationOnce, &__block_literal_global_34);
  }
  return _TUIsCarrierBuildCached;
}

uint64_t TelephonyUtilIsDesenseBuild()
{
  if (_TUQueryBuildInformationOnce != -1) {
    dispatch_once(&_TUQueryBuildInformationOnce, &__block_literal_global_34);
  }
  return _MergedGlobals;
}

uint64_t TelephonyUtilIsVendorBuild()
{
  if (_TUQueryBuildInformationOnce != -1) {
    dispatch_once(&_TUQueryBuildInformationOnce, &__block_literal_global_34);
  }
  return byte_1EB465329;
}

uint64_t TelephonyUtilIsRestoreOS()
{
  if (_TUQueryBuildInformationOnce != -1) {
    dispatch_once(&_TUQueryBuildInformationOnce, &__block_literal_global_34);
  }
  return byte_1EB46532A;
}

uint64_t TelephonyUtilTraceAllowed()
{
  if (_TUQueryBuildInformationOnce != -1) {
    dispatch_once(&_TUQueryBuildInformationOnce, &__block_literal_global_34);
  }
  if (_TUIsInternalBuildCached & 1) != 0 || (_TUIsCarrierBuildCached & 1) != 0 || (_MergedGlobals) {
    return 1;
  }
  else {
    return byte_1EB465329;
  }
}

unint64_t TelephonyUtilGetSystemTime()
{
  v1.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&v1.tv_usec = 0xAAAAAAAAAAAAAAAALL;
  gettimeofday(&v1, 0);
  return 1000 * v1.tv_sec + v1.tv_usec / 0x3E8uLL;
}

uint64_t TelephonyUtilSystemMachTime()
{
  if (!qword_1EB465338)
  {
    mach_timebase_info info = (mach_timebase_info)0xAAAAAAAAAAAAAAAALL;
    mach_timebase_info(&info);
    if (info.denom)
    {
      uint32_t denom = info.denom;
      uint32_t numer = info.numer;
      do
      {
        uint32_t v2 = denom;
        uint32_t denom = numer % denom;
        uint32_t numer = v2;
      }
      while (denom);
    }
    else
    {
      uint32_t v2 = info.numer;
    }
    unsigned int v3 = 1000000;
    uint32_t v4 = info.numer / v2;
    do
    {
      uint32_t v5 = v4;
      uint32_t v4 = v3;
      unsigned int v3 = v5 % v3;
    }
    while (v3);
    qword_1EB465330 = info.numer / v2 / v4;
    qword_1EB465338 = 0xF4240 / v4 * (unint64_t)(info.denom / v2);
  }
  return qword_1EB465330 * mach_absolute_time() / qword_1EB465338;
}

uint64_t TelephonyUtilGetSystemWakeReason(void *a1, size_t a2, BOOL *a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  *(_OWORD *)__s1 = 0u;
  long long v10 = 0u;
  size_t __n = 0;
  int v6 = sysctlbyname("kern.wakereason", 0, &__n, 0, 0);
  uint64_t result = 0;
  if (!v6 && __n && __n <= 0x100)
  {
    if (a1 && __n > a2)
    {
      return 0;
    }
    else
    {
      sysctlbyname("kern.wakereason", __s1, &__n, 0, 0);
      if (a3) {
        *a3 = strstr(__s1, "baseband") != 0;
      }
      if (a1) {
        memcpy(a1, __s1, __n);
      }
      return 1;
    }
  }
  return result;
}

size_t TelephonyUtilStrlcpy(void *a1, char *__s1, size_t __n)
{
  size_t v6 = strnlen(__s1, __n);
  size_t v7 = v6;
  if (v6 >= __n)
  {
    if (__n)
    {
      size_t v8 = __n - 1;
      memcpy(a1, __s1, v8);
      *((unsigned char *)a1 + v8) = 0;
    }
  }
  else
  {
    memcpy(a1, __s1, v6 + 1);
  }
  return v7;
}

uint64_t TelephonyUtilRunCommand(uint64_t a1, uint64_t a2)
{
  v4[1] = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  v3[0] = a1;
  v3[1] = a2;
  v3[4] = 0;
  v3[5] = 0xAAAAAAAAAAAAAA00;
  void v3[2] = v4;
  v3[3] = 0;
  if (TelephonyUtilRunCommandExt((uint64_t)v3)) {
    return 0;
  }
  else {
    return 22;
  }
}

uint64_t TelephonyUtilRunCommandExt(uint64_t a1)
{
  pid_t v6 = 0;
  if (!a1)
  {
    syslog(3, "%s: parameter cannot be NULL.\n");
    return 0;
  }
  if (!*(void *)a1)
  {
    syslog(3, "%s: command cannot be NULL\n");
    return 0;
  }
  uint32_t v2 = *(char *const **)(a1 + 8);
  if (!v2)
  {
    syslog(3, "%s: argument cannot be NULL\n");
    return 0;
  }
  unsigned int v3 = *(char *const **)(a1 + 16);
  if (!v3)
  {
    syslog(3, "%s: environment cannot be NULL\n");
    return 0;
  }
  if (posix_spawn(&v6, *(const char **)a1, *(const posix_spawn_file_actions_t **)(a1 + 24), *(const posix_spawnattr_t **)(a1 + 32), v2, v3))
  {
    syslog(3, "%s: spawning %s failed! ret: %d\n");
    return 0;
  }
  if (!*(unsigned char *)(a1 + 40))
  {
    int v5 = -1431655766;
    waitpid(v6, &v5, 0);
  }
  return v6;
}

uint64_t TelephonyUtilIsBBPlatformSimulationEnabled()
{
  if (qword_1EB465340 != -1) {
    dispatch_once(&qword_1EB465340, &__block_literal_global);
  }
  return byte_1EB46532B;
}

void __TelephonyUtilIsBBPlatformSimulationEnabled_block_invoke()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (_TUQueryBuildInformationOnce != -1) {
    dispatch_once(&_TUQueryBuildInformationOnce, &__block_literal_global_34);
  }
  if (_TUIsInternalBuildCached == 1)
  {
    if (qword_1EB465348 != -1) {
      dispatch_once(&qword_1EB465348, &__block_literal_global_60);
    }
    if (byte_1EB46532C)
    {
      CFPropertyListRef v0 = CFPreferencesCopyValue(@"EnableBBSimulation", @"/private/var/wireless/Library/Preferences/com.apple.AppleBasebandManager.plist", (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
      if (v0)
      {
        byte_1EB46532B = v0 == (CFPropertyListRef)*MEMORY[0x1E4F1CFD0];
        CFRelease(v0);
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEBUG))
        {
          if (byte_1EB46532B) {
            timeval v1 = "enabled";
          }
          else {
            timeval v1 = "disabled";
          }
          int v4 = 136315138;
          int v5 = v1;
          _os_log_debug_impl(&dword_192046000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEBUG, "BBSimulation %s", (uint8_t *)&v4, 0xCu);
        }
        return;
      }
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      LOWORD(v4) = 0;
      uint32_t v2 = MEMORY[0x1E4F14500];
      unsigned int v3 = "BBSimulation disabled due to key not set";
    }
    else
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      LOWORD(v4) = 0;
      uint32_t v2 = MEMORY[0x1E4F14500];
      unsigned int v3 = "Platform Simulation disabled due to 'libRemoteTelephonyTransport' not found";
    }
    _os_log_impl(&dword_192046000, v2, OS_LOG_TYPE_DEFAULT, v3, (uint8_t *)&v4, 2u);
  }
}

void __TelephonyUtilQueryBuildInformation_block_invoke()
{
  v15[1] = *(const void **)MEMORY[0x1E4F143B8];
  v15[0] = @"ReleaseType";
  CFArrayRef v0 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v15, 1, MEMORY[0x1E4F1D510]);
  if (v0)
  {
    CFArrayRef v1 = v0;
    uint32_t v2 = dlopen("/usr/lib/libMobileGestalt.dylib", 1);
    if (!v2) {
      goto LABEL_25;
    }
    unsigned int v3 = (uint64_t (*)(CFArrayRef, void))dlsym(v2, "MGCopyMultipleAnswers");
    if (!v3) {
      goto LABEL_25;
    }
    CFDictionaryRef v4 = (const __CFDictionary *)v3(v1, 0);
    if (!v4) {
      goto LABEL_25;
    }
    CFDictionaryRef v5 = v4;
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v4, @"ReleaseType");
    if (!Value)
    {
LABEL_24:
      CFRelease(v5);
LABEL_25:
      CFRelease(v1);
      return;
    }
    CFStringRef v7 = Value;
    CFTypeID v8 = CFGetTypeID(Value);
    if (v8 == CFStringGetTypeID() && CFEqual(v7, @"Vendor"))
    {
      long long v14 = &byte_1EB465329;
    }
    else
    {
      CFTypeID v9 = CFGetTypeID(v7);
      if (v9 == CFStringGetTypeID() && CFEqual(v7, @"Carrier"))
      {
        long long v14 = &_TUIsCarrierBuildCached;
      }
      else
      {
        CFTypeID v10 = CFGetTypeID(v7);
        if (v10 != CFStringGetTypeID() || CFStringCompare(v7, @"Internal", 0))
        {
          CFTypeID v11 = CFGetTypeID(v7);
          if (v11 == CFStringGetTypeID() && CFEqual(v7, @"Desense"))
          {
            long long v14 = &_MergedGlobals;
            goto LABEL_23;
          }
          CFTypeID v12 = CFGetTypeID(v7);
          if (v12 != CFStringGetTypeID() || CFStringCompare(v7, @"NonUI", 0))
          {
            CFTypeID v13 = CFGetTypeID(v7);
            if (v13 != CFStringGetTypeID() || CFStringCompare(v7, @"Restore", 0)) {
              goto LABEL_24;
            }
            long long v14 = &byte_1EB46532A;
            goto LABEL_23;
          }
        }
        long long v14 = &_TUIsInternalBuildCached;
      }
    }
LABEL_23:
    *long long v14 = 1;
    goto LABEL_24;
  }
}

void *__isRTDylibPresent_block_invoke()
{
  uint64_t v0 = 0;
  for (char i = 1; ; char i = 0)
  {
    char v2 = i;
    uint64_t result = dlopen(off_1E5744318[v0], 1);
    if (result) {
      break;
    }
    uint64_t v0 = 1;
    if ((v2 & 1) == 0) {
      return result;
    }
  }
  byte_1EB46532C = 1;

  return (void *)dlclose(result);
}

ctu::MallocZone *ctu::MallocZone::MallocZone(ctu::MallocZone *this, const char *a2, vm_size_t start_size)
{
  zone = malloc_create_zone(start_size, 0);
  *(void *)this = zone;
  uint64_t v6 = operator new(0x20uLL);
  *uint64_t v6 = &unk_1EE2F8C00;
  v6[1] = 0;
  void v6[2] = 0;
  void v6[3] = zone;
  *((void *)this + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v6;
  *((void *)this + 2) = a2;
  malloc_set_zone_name(zone, a2);
  return this;
}

void sub_19205C470(_Unwind_Exception *exception_object)
{
  unsigned int v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::MallocZone::get(ctu::MallocZone *this)
{
  return *(void *)this;
}

void *ctu::MallocZone::MallocZone(void *result)
{
  *uint64_t result = 0;
  result[1] = 0;
  result[2] = 0;
  return result;
}

{
  *uint64_t result = 0;
  result[1] = 0;
  result[2] = 0;
  return result;
}

void *ctu::MallocZone::operator=(void *a1)
{
  char v2 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  a1[2] = 0;
  return a1;
}

void *ctu::MallocZone::malloc(malloc_zone_t **this, size_t a2)
{
  return malloc_zone_malloc(*this, a2);
}

void *ctu::MallocZone::calloc(malloc_zone_t **this, size_t a2, size_t a3)
{
  return malloc_zone_calloc(*this, a2, a3);
}

void *ctu::MallocZone::valloc(malloc_zone_t **this, size_t a2)
{
  return malloc_zone_valloc(*this, a2);
}

void *ctu::MallocZone::realloc(malloc_zone_t **this, void *a2, size_t a3)
{
  return malloc_zone_realloc(*this, a2, a3);
}

void *ctu::MallocZone::memalign(malloc_zone_t **this, size_t a2, size_t a3)
{
  return malloc_zone_memalign(*this, a2, a3);
}

void ctu::MallocZone::free(malloc_zone_t **this, void *a2)
{
}

uint64_t ctu::MallocZone::getName(ctu::MallocZone *this)
{
  return *((void *)this + 2);
}

BOOL ctu::MallocZone::operator==(void *a1, void *a2)
{
  return *a1 == *a2;
}

void std::__shared_ptr_pointer<_malloc_zone_t *,ctu::MallocZone::MallocZone(char const*,unsigned long)::$_0,std::allocator<_malloc_zone_t>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<_malloc_zone_t *,ctu::MallocZone::MallocZone(char const*,unsigned long)::$_0,std::allocator<_malloc_zone_t>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<_malloc_zone_t *,ctu::MallocZone::MallocZone(char const*,unsigned long)::$_0,std::allocator<_malloc_zone_t>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void *ctu::RestModule::RestModule(void *this)
{
  *this = 0;
  this[1] = 0;
  return this;
}

{
  *this = 0;
  this[1] = 0;
  return this;
}

std::__shared_weak_count_vtbl **ctu::RestModule::RestModule(std::__shared_weak_count_vtbl **a1, long long *a2, NSObject **a3, NSObject **a4)
{
  return a1;
}

{
  ctu::RestModuleState::create(a2, a3, a4, a1);
  return a1;
}

void ctu::RestModuleState::create(long long *a1@<X0>, NSObject **a2@<X1>, NSObject **a3@<X2>, std::__shared_weak_count_vtbl **a4@<X8>)
{
  CFTypeID v8 = (std::__shared_weak_count_vtbl *)operator new(0x68uLL);
  ctu::RestModuleState::RestModuleState((uint64_t)v8, a1, a2, a3);
  *a4 = v8;
  CFTypeID v9 = (std::__shared_weak_count *)operator new(0x20uLL);
  v9->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE2F8CE0;
  v9->__shared_owners_ = 0;
  v9->__shared_weak_owners_ = 0;
  v9[1].__vftable = v8;
  a4[1] = (std::__shared_weak_count_vtbl *)v9;
  CFTypeID v10 = (std::__shared_weak_count *)v8->~__shared_weak_count_0;
  if (v10)
  {
    if (v10->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v8->~__shared_weak_size_t count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
    v8->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
    std::__shared_weak_count::__release_weak(v10);
  }
  else
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v8->~__shared_weak_size_t count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
    v8->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
  }

  std::__shared_weak_count::__release_shared[abi:ne180100](v9);
}

void sub_19205C72C(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[2], v1, (dispatch_function_t)std::shared_ptr<ctu::RestModuleState> ctu::SharedSynchronizable<ctu::RestModuleState>::make_shared_ptr<ctu::RestModuleState>(ctu::RestModuleState*)::{lambda(ctu::RestModuleState*)#1}::operator() const(ctu::RestModuleState*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_19205C754(_Unwind_Exception *a1)
{
}

std::__shared_weak_count_vtbl **ctu::RestModule::RestModule(std::__shared_weak_count_vtbl **a1, NSObject **a2, uint64_t a3)
{
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v9 = *(std::string *)a3;
  }
  CFDictionaryRef v5 = *a2;
  CFTypeID v8 = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  CFStringRef v7 = 0;
  ctu::RestModuleState::create((long long *)&v9, &v8, &v7, a1);
  if (v5) {
    dispatch_release(v5);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  return a1;
}

{
  NSObject *v5;
  NSObject *v7;
  NSObject *v8;
  std::string v9;

  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v9 = *(std::string *)a3;
  }
  CFDictionaryRef v5 = *a2;
  CFTypeID v8 = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  CFStringRef v7 = 0;
  ctu::RestModuleState::create((long long *)&v9, &v8, &v7, a1);
  if (v5) {
    dispatch_release(v5);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_19205C850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (v16) {
    dispatch_release(v16);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19205C918(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (v16) {
    dispatch_release(v16);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ctu::RestModule::registerAsRequestSink(uint64_t *a1, uint64_t a2, void *a3)
{
}

void ctu::RestModuleState::addRequestHandler(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 16));
  uint64_t v6 = *(uint64_t **)(a1 + 96);
  if (!v6)
  {
    CFStringRef v7 = operator new(0x18uLL);
    v7[1] = 0;
    v7[2] = 0;
    *CFStringRef v7 = 0;
    std::unique_ptr<boost::container::flat_map<std::string,std::function<void ()(xpc::object,std::shared_ptr<xpc::object>)>,std::less<std::string>,void>>::reset[abi:ne180100]((void *)(a1 + 96), (uint64_t)v7);
    uint64_t v6 = *(uint64_t **)(a1 + 96);
  }
  uint64_t v8 = a3[3];
  if (v8)
  {
    uint64_t v34 = (char *)0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v9 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
    v33[0] = v9;
    v33[1] = v9;
    long long v32 = v9;
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v32, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      uint64_t v8 = a3[3];
      if (!v8) {
        goto LABEL_13;
      }
    }
    else
    {
      long long v32 = *(_OWORD *)a2;
      *(void *)&v33[0] = *(void *)(a2 + 16);
    }
    if ((void *)v8 == a3)
    {
      uint64_t v34 = (char *)v33 + 8;
      (*(void (**)(void *, char *))(*a3 + 24))(a3, (char *)v33 + 8);
LABEL_25:
      object[0] = &v32;
      object[1] = v6;
      uint64_t v17 = *v6;
      unint64_t v18 = v6[1];
      uint64_t v19 = *v6 + 56 * v18;
      while (v18)
      {
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(v17 + 56 * (v18 >> 1)), (void **)&v32) & 0x80u) == 0)
        {
          v18 >>= 1;
        }
        else
        {
          v17 += 56 * (v18 >> 1) + 56;
          v18 += ~(v18 >> 1);
        }
      }
      if (v17 == v19)
      {
        LOBYTE(v2ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 1;
      }
      else
      {
        unsigned int v20 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v32, (void **)v17);
        unsigned int v21 = (v20 >> 7) & 1 | 0xAAAAAA00;
        if ((v20 & 0x80) == 0)
        {
LABEL_40:
          std::__function::__value_func<void ()(xpc::object,std::shared_ptr<xpc::object>)>::~__value_func[abi:ne180100]((void *)v33 + 1);
          if (SBYTE7(v33[0]) < 0) {
            operator delete((void *)v32);
          }
          if ((_BYTE)v21)
          {
            uint64_t v27 = *(void *)(a1 + 56);
            if (v27 && (*(unsigned int (**)(uint64_t))(*(void *)v27 + 32))(v27))
            {
              uint64_t v28 = *(void *)(a1 + 56);
              if (*(char *)(a2 + 23) >= 0) {
                uint64_t v29 = (const char *)a2;
              }
              else {
                uint64_t v29 = *(const char **)a2;
              }
              *(void *)&long long v32 = xpc_string_create(v29);
              if (!(void)v32) {
                *(void *)&long long v32 = xpc_null_create();
              }
              object[0] = xpc_null_create();
              (*(void (**)(uint64_t, long long *, xpc_object_t *))(*(void *)v28 + 48))(v28, &v32, object);
              xpc_release(object[0]);
              xpc_release((xpc_object_t)v32);
            }
          }
          else
          {
            std::__function::__value_func<void ()(xpc::object,std::shared_ptr<xpc::object>)>::operator=[abi:ne180100]((void *)(v17 + 24), (uint64_t)a3);
          }
          return;
        }
      }
      uint64_t v22 = v6[1];
      if (v6[2] == v22)
      {
        boost::container::vector<boost::container::dtl::pair<std::string,std::function<void ()(xpc::object,std::shared_ptr<xpc::object>)>>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::function<void ()(xpc::object,std::shared_ptr<xpc::object>)>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<std::string,std::function<void ()(xpc::object,std::shared_ptr<xpc::object>)>>>,boost::container::dtl::pair<std::string,std::function<void ()(xpc::object,std::shared_ptr<xpc::object>)>>*,boost::container::dtl::pair<std::string,std::function<void ()(xpc::object,std::shared_ptr<xpc::object>)>>>>(&v31, (char *)v6, (long long *)v17, &v32);
        uint64_t v17 = v31;
      }
      else
      {
        uint64_t v23 = *v6;
        uint64_t v24 = *v6 + 56 * v22;
        if (v24 == v17)
        {
          long long v26 = v32;
          *(void *)(v17 + 16) = *(void *)&v33[0];
          *(_OWORD *)uint64_t v17 = v26;
          *(void *)&v33[0] = 0;
          long long v32 = 0uLL;
          std::__function::__value_func<void ()(xpc::object,std::shared_ptr<xpc::object>)>::__value_func[abi:ne180100](v23 + 56 * v22 + 24, (uint64_t)v33 + 8);
          ++v6[1];
        }
        else
        {
          uint64_t v25 = v24 - 56;
          *(_OWORD *)uint64_t v24 = *(_OWORD *)(v24 - 56);
          *(void *)(v24 + 16) = *(void *)(v24 - 40);
          *(void *)(v24 - 48) = 0;
          *(void *)(v24 - 40) = 0;
          *(void *)(v24 - 56) = 0;
          std::__function::__value_func<void ()(xpc::object,std::shared_ptr<xpc::object>)>::__value_func[abi:ne180100](v23 + 56 * v22 + 24, v24 - 32);
          ++v6[1];
          for (; v25 != v17; v25 -= 56)
            boost::container::dtl::pair<std::string,std::function<void ()(xpc::object,std::shared_ptr<xpc::object>)>>::operator=(v25, (long long *)(v25 - 56));
          boost::container::dtl::pair<std::string,std::function<void ()(xpc::object,std::shared_ptr<xpc::object>)>>::operator=(v17, &v32);
        }
      }
      goto LABEL_40;
    }
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 16))(v8);
LABEL_13:
    uint64_t v34 = (char *)v8;
    goto LABEL_25;
  }
  *(void *)&long long v32 = 0xAAAAAAAAAAAAAAAALL;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::function<void ()(xpc::object)>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::function<void ()(xpc::object)>>>>::find((uint64_t)&v32, (void ***)v6, (void **)a2);
  uint64_t v10 = *v6 + 56 * v6[1];
  uint64_t v11 = v32;
  if ((void)v32 != v10)
  {
    uint64_t v12 = v32 + 56;
    while (v12 != v10)
    {
      uint64_t v13 = v11 + 56;
      uint64_t v12 = boost::container::dtl::pair<std::string,std::function<void ()(xpc::object,std::shared_ptr<xpc::object>)>>::operator=(v11, (long long *)(v11 + 56))+ 112;
      uint64_t v11 = v13;
    }
    std::__function::__value_func<void ()(xpc::object,std::shared_ptr<xpc::object>)>::~__value_func[abi:ne180100]((void *)(v10 - 32));
    if (*(char *)(v10 - 33) < 0) {
      operator delete(*(void **)(v10 - 56));
    }
    --v6[1];
    uint64_t v14 = *(void *)(a1 + 56);
    if (v14 && (*(unsigned int (**)(uint64_t))(*(void *)v14 + 32))(v14))
    {
      uint64_t v15 = *(void *)(a1 + 56);
      if (*(char *)(a2 + 23) >= 0) {
        long long v16 = (const char *)a2;
      }
      else {
        long long v16 = *(const char **)a2;
      }
      *(void *)&long long v32 = xpc_string_create(v16);
      if (!(void)v32) {
        *(void *)&long long v32 = xpc_null_create();
      }
      object[0] = xpc_null_create();
      (*(void (**)(uint64_t, long long *, xpc_object_t *))(*(void *)v15 + 56))(v15, &v32, object);
      xpc_release(object[0]);
      xpc_release((xpc_object_t)v32);
    }
  }
}

void sub_19205CE20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object, uint64_t a13, uint64_t a14, xpc_object_t __p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
}

void *ctu::RestModule::deregisterAsRequestSink(uint64_t *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  v4[3] = 0;
  ctu::RestModuleState::addRequestHandler(v2, a2, v4);
  return std::__function::__value_func<void ()(xpc::object,std::shared_ptr<xpc::object>)>::~__value_func[abi:ne180100](v4);
}

void sub_19205CF34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(xpc::object,std::shared_ptr<xpc::object>)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *ctu::RestModule::registerAsRequestSink(uint64_t *a1, uint64_t a2, void *aBlock)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a1;
  if (aBlock)
  {
    v6[0] = &unk_1EE2F7F80;
    v6[1] = _Block_copy(aBlock);
    CFStringRef v7 = v6;
    ctu::RestModuleState::addRequestHandler(v4, a2, v6);
  }
  else
  {
    CFStringRef v7 = 0;
    ctu::RestModuleState::addRequestHandler(v4, a2, v6);
  }
  return std::__function::__value_func<void ()(xpc::object,std::shared_ptr<xpc::object>)>::~__value_func[abi:ne180100](v6);
}

void sub_19205D000(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(xpc::object,std::shared_ptr<xpc::object>)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *ctu::RestModule::getPropertyOnce(uint64_t **a1, uint64_t a2, void *aBlock)
{
  v7[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a1;
  if (aBlock) {
    CFDictionaryRef v5 = _Block_copy(aBlock);
  }
  else {
    CFDictionaryRef v5 = 0;
  }
  v7[0] = &unk_1EE2F7F28;
  v7[1] = v5;
  v7[3] = v7;
  ctu::RestModuleState::getValueOnce(v4, a2, (uint64_t)v7);
  return std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100](v7);
}

void sub_19205D0D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ctu::RestModule::unobserveProperty(uint64_t *a1, uint64_t a2)
{
}

void ctu::RestModuleState::removeSubscription(uint64_t a1, uint64_t a2)
{
  xpc_object_t v12 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::function<void ()(xpc::object)>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::function<void ()(xpc::object)>>>>::find((uint64_t)&v12, (void ***)(a1 + 72), (void **)a2);
  uint64_t v4 = (char *)(*(void *)(a1 + 72) + 56 * *(void *)(a1 + 80));
  CFDictionaryRef v5 = (char *)v12;
  if (v12 != v4)
  {
    uint64_t v6 = (char *)v12 + 56;
    while (v6 != v4)
    {
      CFStringRef v7 = v5 + 56;
      uint64_t v6 = (char *)(boost::container::dtl::pair<std::string,std::function<void ()(xpc::object)>>::operator=((uint64_t)v5, (long long *)(v5 + 56))+ 112);
      CFDictionaryRef v5 = v7;
    }
    std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100]((void *)v4 - 4);
    if (*(v4 - 33) < 0) {
      operator delete(*((void **)v4 - 7));
    }
    --*(void *)(a1 + 80);
    uint64_t v8 = *(void *)(a1 + 56);
    if (v8 && (*(unsigned int (**)(uint64_t))(*(void *)v8 + 32))(v8))
    {
      uint64_t v9 = *(void *)(a1 + 56);
      if (*(char *)(a2 + 23) >= 0) {
        uint64_t v10 = (const char *)a2;
      }
      else {
        uint64_t v10 = *(const char **)a2;
      }
      xpc_object_t v12 = xpc_string_create(v10);
      if (!v12) {
        xpc_object_t v12 = xpc_null_create();
      }
      xpc_object_t object = xpc_null_create();
      (*(void (**)(uint64_t, xpc_object_t *, xpc_object_t *))(*(void *)v9 + 56))(v9, &v12, &object);
      xpc_release(object);
      xpc_release(v12);
    }
  }
}

void sub_19205D258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, xpc_object_t a10)
{
}

void *ctu::RestModule::observeProperty(uint64_t *a1, uint64_t a2, void *aBlock)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a1;
  if (aBlock)
  {
    v6[0] = &unk_1EE2F7F28;
    v6[1] = _Block_copy(aBlock);
    CFStringRef v7 = v6;
    ctu::RestModuleState::addSubscription(v4, a2, (uint64_t)v6, 0);
  }
  else
  {
    CFStringRef v7 = 0;
    ctu::RestModuleState::addSubscription(v4, a2, (uint64_t)v6, 0);
  }
  return std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100](v6);
}

void sub_19205D344(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void ctu::RestModuleState::addSubscription(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 16));
  if (*(void *)(a3 + 24))
  {
    unint64_t v27 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v8 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
    v26[0] = v8;
    v26[1] = v8;
    long long v25 = v8;
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v25, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else
    {
      long long v25 = *(_OWORD *)a2;
      *(void *)&v26[0] = *(void *)(a2 + 16);
    }
    uint64_t v9 = (uint64_t *)(a1 + 72);
    std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)v26 + 8, a3);
    object[0] = &v25;
    object[1] = (xpc_object_t)(a1 + 72);
    uint64_t v10 = *(void *)(a1 + 72);
    unint64_t v11 = *(void *)(a1 + 80);
    uint64_t v12 = v10 + 56 * v11;
    while (v11)
    {
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(v10 + 56 * (v11 >> 1)), (void **)&v25) & 0x80u) == 0)
      {
        v11 >>= 1;
      }
      else
      {
        v10 += 56 * (v11 >> 1) + 56;
        v11 += ~(v11 >> 1);
      }
    }
    if (v10 == v12)
    {
      LOBYTE(v14) = 1;
    }
    else
    {
      unsigned int v13 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v25, (void **)v10);
      unsigned int v14 = (v13 >> 7) & 1 | 0xAAAAAA00;
      if ((v13 & 0x80) == 0)
      {
LABEL_23:
        std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100]((void *)v26 + 1);
        if (SBYTE7(v26[0]) < 0) {
          operator delete((void *)v25);
        }
        if ((_BYTE)v14 || a4)
        {
          uint64_t v20 = *(void *)(a1 + 56);
          if (v20)
          {
            if ((*(unsigned int (**)(uint64_t))(*(void *)v20 + 32))(v20))
            {
              uint64_t v21 = *(void *)(a1 + 56);
              if (*(char *)(a2 + 23) >= 0) {
                uint64_t v22 = (const char *)a2;
              }
              else {
                uint64_t v22 = *(const char **)a2;
              }
              *(void *)&long long v25 = xpc_string_create(v22);
              if (!(void)v25) {
                *(void *)&long long v25 = xpc_null_create();
              }
              object[0] = xpc_null_create();
              (*(void (**)(uint64_t, long long *, xpc_object_t *))(*(void *)v21 + 48))(v21, &v25, object);
              xpc_release(object[0]);
              xpc_release((xpc_object_t)v25);
            }
          }
        }
        return;
      }
    }
    uint64_t v15 = *(void *)(a1 + 80);
    if (*(void *)(a1 + 88) == v15)
    {
      boost::container::vector<boost::container::dtl::pair<std::string,std::function<void ()(xpc::object)>>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::function<void ()(xpc::object)>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<std::string,std::function<void ()(xpc::object)>>>,boost::container::dtl::pair<std::string,std::function<void ()(xpc::object)>>*,boost::container::dtl::pair<std::string,std::function<void ()(xpc::object)>>>>(&v24, (char *)(a1 + 72), (long long *)v10, &v25);
    }
    else
    {
      uint64_t v16 = *v9;
      uint64_t v17 = *v9 + 56 * v15;
      if (v17 == v10)
      {
        long long v19 = v25;
        *(void *)(v10 + 16) = *(void *)&v26[0];
        *(_OWORD *)uint64_t v10 = v19;
        *(void *)&v26[0] = 0;
        long long v25 = 0uLL;
        std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100](v16 + 56 * v15 + 24, (uint64_t)v26 + 8);
        ++*(void *)(a1 + 80);
      }
      else
      {
        uint64_t v18 = v17 - 56;
        *(_OWORD *)uint64_t v17 = *(_OWORD *)(v17 - 56);
        *(void *)(v17 + 16) = *(void *)(v17 - 40);
        *(void *)(v17 - 48) = 0;
        *(void *)(v17 - 40) = 0;
        *(void *)(v17 - 56) = 0;
        std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100](v16 + 56 * v15 + 24, v17 - 32);
        ++*(void *)(a1 + 80);
        for (; v18 != v10; v18 -= 56)
          boost::container::dtl::pair<std::string,std::function<void ()(xpc::object)>>::operator=(v18, (long long *)(v18 - 56));
        boost::container::dtl::pair<std::string,std::function<void ()(xpc::object)>>::operator=(v10, &v25);
      }
    }
    goto LABEL_23;
  }

  ctu::RestModuleState::removeSubscription(a1, a2);
}

void sub_19205D6D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object, uint64_t a13, uint64_t a14, xpc_object_t a15)
{
}

void ctu::RestModule::observeProperty(uint64_t *a1, uint64_t a2, uint64_t a3)
{
}

{
  ctu::RestModuleState::addSubscription(*a1, a2, a3, 1);
}

void *ctu::RestModule::observeEvent(uint64_t *a1, uint64_t a2, void *aBlock)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a1;
  if (aBlock)
  {
    v6[0] = &unk_1EE2F7F28;
    v6[1] = _Block_copy(aBlock);
    CFStringRef v7 = v6;
    ctu::RestModuleState::addSubscription(v4, a2, (uint64_t)v6, 0);
  }
  else
  {
    CFStringRef v7 = 0;
    ctu::RestModuleState::addSubscription(v4, a2, (uint64_t)v6, 0);
  }
  return std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100](v6);
}

void sub_19205D80C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *ctu::RestModule::unobserveEvent(uint64_t *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  v4[3] = 0;
  ctu::RestModuleState::addSubscription(v2, a2, (uint64_t)v4, 0);
  return std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100](v4);
}

void sub_19205D8A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void ctu::RestModule::observeEvent(uint64_t *a1, uint64_t a2, uint64_t a3)
{
}

void *ctu::RestModule::sendRequest(uint64_t **a1, uint64_t a2, uint64_t a3, void *aBlock)
{
  v9[4] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a1;
  if (aBlock) {
    CFStringRef v7 = _Block_copy(aBlock);
  }
  else {
    CFStringRef v7 = 0;
  }
  v9[0] = &unk_1EE2F7F28;
  v9[1] = v7;
  v9[3] = v9;
  ctu::RestModuleState::sendRequest(v6, a2, a3, (uint64_t)v9);
  return std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100](v9);
}

void sub_19205D97C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ctu::RestModule::sendRawGet(uint64_t **a1, uint64_t a2, uint64_t a3)
{
}

void ctu::RestModuleState::sendRawGet(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  object[4] = *(xpc_object_t *)MEMORY[0x1E4F143B8];
  uint64_t v5 = a1[7];
  if (v5 && ((*(uint64_t (**)(uint64_t))(*(void *)v5 + 32))(v5) & 1) != 0)
  {
    if (*(char *)(a2 + 23) >= 0) {
      CFStringRef v7 = (const char *)a2;
    }
    else {
      CFStringRef v7 = *(const char **)a2;
    }
    object[0] = xpc_string_create(v7);
    if (!object[0]) {
      object[0] = xpc_null_create();
    }
    uint64_t v8 = (std::__shared_weak_count *)a1[1];
    if (!v8 || (uint64_t v9 = a1[7], v10 = *a1, (v11 = std::__shared_weak_count::lock(v8)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v12 = v11;
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    unsigned int v13 = std::__shared_weak_count::lock(v12);
    unsigned int v14 = v13;
    if (v13)
    {
      atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_weak(v12);
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    else
    {
      std::__shared_weak_count::__release_weak(v12);
      uint64_t v10 = 0;
    }
    uint64_t v22 = v10;
    uint64_t v23 = v14;
    (*(void (**)(uint64_t, xpc_object_t *, uint64_t *, uint64_t *, uint64_t))(*(void *)v9 + 72))(v9, object, &v22, a1 + 2, a3);
    if (v23) {
      std::__shared_weak_count::__release_weak(v23);
    }
    xpc_release(object[0]);
  }
  else
  {
    std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)object, a3);
    uint64_t v15 = (std::__shared_weak_count *)a1[1];
    if (!v15 || (uint64_t v16 = *a1, (v17 = std::__shared_weak_count::lock(v15)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v18 = v17;
    long long v19 = operator new(0x20uLL);
    std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)v19, (uint64_t)object);
    uint64_t v20 = a1[2];
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v21 = operator new(0x18uLL);
    void *v21 = v19;
    v21[1] = v16;
    v21[2] = v18;
    uint64_t v24 = 0;
    long long v25 = 0;
    dispatch_async_f(v20, v21, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<ctu::RestModuleState>::execute_wrapped<ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0>(ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<std::function<void ()(xpc::object)> &&,std::default_delete<std::function<void ()(xpc::object)> &&>>)::{lambda(void *)#1}::__invoke);
    std::unique_ptr<void ctu::SharedSynchronizable<ctu::RestModuleState>::execute_wrapped<ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0>(ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0 &&)::{lambda(void)#1},std::default_delete<ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0>>::~unique_ptr[abi:ne180100](&v24);
    std::unique_ptr<void ctu::SharedSynchronizable<ctu::RestModuleState>::execute_wrapped<ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0>(ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0 &&)::{lambda(void)#1},std::default_delete<ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0>>::~unique_ptr[abi:ne180100](&v25);
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100](object);
  }
}

void sub_19205DBCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ctu::RestModule::sendRawSet(uint64_t *a1, uint64_t a2, uint64_t a3)
{
}

void ctu::RestModuleState::sendRawSet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 56);
  if (v4 && (*(unsigned int (**)(uint64_t))(*(void *)v4 + 32))(v4))
  {
    if (*(char *)(a2 + 23) >= 0) {
      CFStringRef v7 = (const char *)a2;
    }
    else {
      CFStringRef v7 = *(const char **)a2;
    }
    xpc_object_t object = xpc_string_create(v7);
    if (!object) {
      xpc_object_t object = xpc_null_create();
    }
    (*(void (**)(void, xpc_object_t *, uint64_t))(**(void **)(a1 + 56) + 40))(*(void *)(a1 + 56), &object, a3);
    xpc_release(object);
  }
}

void sub_19205DCF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void ctu::RestModule::sendRawPush(uint64_t *a1, uint64_t a2, uint64_t a3)
{
}

void ctu::RestModuleState::sendRawPush(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 56);
  if (v4 && (*(unsigned int (**)(uint64_t))(*(void *)v4 + 32))(v4))
  {
    if (*(char *)(a2 + 23) >= 0) {
      CFStringRef v7 = (const char *)a2;
    }
    else {
      CFStringRef v7 = *(const char **)a2;
    }
    xpc_object_t object = xpc_string_create(v7);
    if (!object) {
      xpc_object_t object = xpc_null_create();
    }
    (*(void (**)(void, xpc_object_t *, uint64_t))(**(void **)(a1 + 56) + 48))(*(void *)(a1 + 56), &object, a3);
    xpc_release(object);
  }
}

void sub_19205DDE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void ctu::RestModule::sendRawPop(uint64_t *a1, uint64_t a2, uint64_t a3)
{
}

void ctu::RestModuleState::sendRawPop(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 56);
  if (v4 && (*(unsigned int (**)(uint64_t))(*(void *)v4 + 32))(v4))
  {
    if (*(char *)(a2 + 23) >= 0) {
      CFStringRef v7 = (const char *)a2;
    }
    else {
      CFStringRef v7 = *(const char **)a2;
    }
    xpc_object_t object = xpc_string_create(v7);
    if (!object) {
      xpc_object_t object = xpc_null_create();
    }
    (*(void (**)(void, xpc_object_t *, uint64_t))(**(void **)(a1 + 56) + 56))(*(void *)(a1 + 56), &object, a3);
    xpc_release(object);
  }
}

void sub_19205DED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void ctu::RestModule::sendRawNotify(uint64_t *a1, uint64_t a2, uint64_t a3)
{
}

void ctu::RestModuleState::sendRawNotify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 56);
  if (v4 && (*(unsigned int (**)(uint64_t))(*(void *)v4 + 32))(v4))
  {
    if (*(char *)(a2 + 23) >= 0) {
      CFStringRef v7 = (const char *)a2;
    }
    else {
      CFStringRef v7 = *(const char **)a2;
    }
    xpc_object_t object = xpc_string_create(v7);
    if (!object) {
      xpc_object_t object = xpc_null_create();
    }
    (*(void (**)(void, xpc_object_t *, uint64_t))(**(void **)(a1 + 56) + 64))(*(void *)(a1 + 56), &object, a3);
    xpc_release(object);
  }
}

void sub_19205DFC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void ctu::RestModule::connect(uint64_t *a1, xpc_object_t *a2)
{
  uint64_t v2 = *a1;
  xpc_object_t object = *a2;
  *a2 = xpc_null_create();
  ctu::rest::RestXpcConnector::create(&object, &v4);
  ctu::RestModuleState::connect(v2, &v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  xpc_release(object);
}

void sub_19205E048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  xpc_release(object);
  _Unwind_Resume(a1);
}

void ctu::RestModuleState::connect(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (!*a2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "RestModule::connect cannot be called with a null connector");
    __cxa_throw(exception, (struct type_info *)off_1E5743EA0, MEMORY[0x1E4FBA1E8]);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v4 || (uint64_t v6 = *(void *)a1, (v7 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v8 = v7;
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  std::string::operator=((std::string *)(v2 + 32), (const std::string *)(a1 + 32));
  uint64_t v9 = operator new(0x30uLL);
  v9[1] = 0;
  void v9[2] = 0;
  *uint64_t v9 = &unk_1EE2F8AE8;
  v9[3] = &unk_1EE2F7928;
  v9[4] = v6;
  void v9[5] = v8;
  uint64_t v10 = *(std::__shared_weak_count **)(v2 + 64);
  *(void *)(v2 + 56) = v9 + 3;
  *(void *)(v2 + 64) = v9;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  xpc_object_t v11 = *(xpc_object_t *)(v2 + 24);
  if (v11) {
    xpc_retain(*(xpc_object_t *)(v2 + 24));
  }
  else {
    xpc_object_t v11 = xpc_null_create();
  }
  uint64_t v12 = *(NSObject **)(a1 + 16);
  if (v12) {
    dispatch_retain(*(dispatch_object_t *)(a1 + 16));
  }
  unsigned int v13 = *(std::__shared_weak_count **)(v2 + 16);
  if (!v13 || (uint64_t v14 = *(void *)(v2 + 8), (v15 = std::__shared_weak_count::lock(v13)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v16 = v15;
  atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v24 = v11;
  if (v11) {
    xpc_retain(v11);
  }
  else {
    xpc_object_t v24 = xpc_null_create();
  }
  uint64_t v17 = (_xpc_connection_s **)(v2 + 72);
  ctu::XpcClientHelper::setServer_internal(v17, &v24);
  xpc_release(v24);
  if (MEMORY[0x192FEE1B0](*v17) == MEMORY[0x1E4F14578])
  {
    uint64_t v18 = *v17;
    handler[0] = MEMORY[0x1E4F143A8];
    handler[1] = 1174405120;
    handler[2] = ___ZN3ctu15XpcClientHelper9setServerINS_4rest16RestXpcConnectorEEEvN3xpc10connectionEN8dispatch5queueENSt3__18weak_ptrIT_EE_block_invoke;
    handler[3] = &__block_descriptor_tmp_12;
    handler[4] = v17;
    void handler[5] = v14;
    uint64_t v22 = v16;
    atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v23 = v18;
    xpc_connection_set_event_handler(v18, handler);
    xpc_connection_set_target_queue(v18, v12);
    xpc_connection_resume(v18);
    if (v22) {
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  std::__shared_weak_count::__release_weak(v16);
  std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  if (v12) {
    dispatch_release(v12);
  }
  xpc_release(v11);
  long long v20 = *(_OWORD *)a2;
  *a2 = 0;
  a2[1] = 0;
  ctu::RestModuleState::connectCommon(a1, (uint64_t *)&v20);
  if (*((void *)&v20 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
  }
}

{
  uint64_t v2;
  std::__shared_weak_count *v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  void *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  NSObject *v12;
  std::__shared_weak_count *v13;
  std::logic_error *exception;
  long long v15;
  uint64_t vars8;

  uint64_t v2 = *a2;
  if (!*a2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "RestModule::connect cannot be called with a null connector");
    __cxa_throw(exception, (struct type_info *)off_1E5743EA0, MEMORY[0x1E4FBA1E8]);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v4 || (uint64_t v6 = *(void *)a1, (v7 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v8 = v7;
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  std::string::operator=((std::string *)(v2 + 32), (const std::string *)(a1 + 32));
  uint64_t v9 = operator new(0x30uLL);
  v9[1] = 0;
  void v9[2] = 0;
  *uint64_t v9 = &unk_1EE2F8AE8;
  v9[3] = &unk_1EE2F7928;
  v9[4] = v6;
  void v9[5] = v8;
  uint64_t v10 = *(std::__shared_weak_count **)(v2 + 80);
  *(void *)(v2 + 72) = v9 + 3;
  *(void *)(v2 + 80) = v9;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  xpc_object_t v11 = *(void *)(a1 + 16);
  if (v11) {
    dispatch_retain(*(dispatch_object_t *)(a1 + 16));
  }
  uint64_t v12 = *(NSObject **)(v2 + 56);
  *(void *)(v2 + 56) = v11;
  if (v12) {
    dispatch_release(v12);
  }
  uint64_t v15 = *(_OWORD *)a2;
  *a2 = 0;
  a2[1] = 0;
  ctu::RestModuleState::connectCommon(a1, (uint64_t *)&v15);
  unsigned int v13 = (std::__shared_weak_count *)*((void *)&v15 + 1);
  if (*((void *)&v15 + 1))
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
}

void sub_19205E310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    std::__shared_weak_count::__release_weak(a18);
  }
  std::__shared_weak_count::__release_weak(v20);
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  if (v19) {
    dispatch_release(v19);
  }
  xpc_release(v18);
  _Unwind_Resume(a1);
}

void ctu::RestModule::connect(uint64_t *a1, uint64_t *a2)
{
}

{
  ctu::RestModuleState::connect(*a1, a2);
}

void sub_19205E54C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

uint64_t ctu::RestModule::disconnect(ctu::RestModule *this)
{
  uint64_t result = *(void *)(*(void *)this + 56);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

uint64_t ctu::RestModuleState::disconnect(ctu::RestModuleState *this)
{
  uint64_t result = *((void *)this + 7);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

uint64_t ctu::RestModule::isConnected(ctu::RestModule *this)
{
  uint64_t result = *(void *)(*(void *)this + 56);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 32))();
  }
  return result;
}

uint64_t ctu::RestModuleState::isConnected(ctu::RestModuleState *this)
{
  uint64_t result = *((void *)this + 7);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 32))();
  }
  return result;
}

uint64_t ctu::RestModule::flush@<X0>(ctu::RestModuleState **this@<X0>, dispatch_group_t *a2@<X8>)
{
  return ctu::RestModuleState::flush(*this, a2);
}

uint64_t ctu::RestModuleState::flush@<X0>(ctu::RestModuleState *this@<X0>, dispatch_group_t *a2@<X8>)
{
  *a2 = dispatch_group_create();
  return (*(uint64_t (**)(void, dispatch_group_t *))(**((void **)this + 7) + 24))(*((void *)this + 7), a2);
}

void sub_19205E6AC(_Unwind_Exception *exception_object)
{
  if (*v1) {
    dispatch_release(*v1);
  }
  _Unwind_Resume(exception_object);
}

void ctu::RestModule::getWeakHandle(ctu::RestModule *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  *a2 = this;
  a2[1] = v4;
}

void ctu::RestModule::getQueue(ctu::RestModule *this@<X0>, NSObject **a2@<X8>)
{
  uint64_t v2 = *(NSObject **)(*(void *)this + 16);
  *a2 = v2;
  if (v2) {
    dispatch_retain(v2);
  }
}

uint64_t ctu::RestModuleState::RestModuleState(uint64_t a1, long long *a2, NSObject **a3, NSObject **a4)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  CFStringRef v7 = *a3;
  *(void *)(a1 + 16) = *a3;
  if (v7) {
    dispatch_retain(v7);
  }
  uint64_t v8 = *a4;
  *(void *)(a1 + 24) = *a4;
  if (v8) {
    dispatch_retain(v8);
  }
  uint64_t v9 = (std::string *)(a1 + 32);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v10 = *a2;
    *(void *)(a1 + 48) = *((void *)a2 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  return a1;
}

void sub_19205E7C4(_Unwind_Exception *a1)
{
  ctu::SharedSynchronizable<ctu::RestModuleState>::~SharedSynchronizable(v1);
  _Unwind_Resume(a1);
}

void *ctu::SharedSynchronizable<ctu::RestModuleState>::~SharedSynchronizable(void *a1)
{
  uint64_t v2 = a1[3];
  if (v2) {
    dispatch_release(v2);
  }
  unsigned int v3 = a1[2];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

std::logic_error *std::invalid_argument::invalid_argument[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
  return result;
}

uint64_t ctu::RestModuleState::getName(ctu::RestModuleState *this)
{
  return (uint64_t)this + 32;
}

void ctu::RestModuleState::connectCommon(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  xpc_object_t v19 = xpc_string_create("/connections");
  if (!v19) {
    xpc_object_t v19 = xpc_null_create();
  }
  xpc_object_t object = xpc_null_create();
  (*(void (**)(uint64_t, xpc_object_t *, xpc_object_t *))(*(void *)v4 + 48))(v4, &v19, &object);
  xpc_release(object);
  xpc_release(v19);
  uint64_t v5 = *(uint64_t **)(a1 + 96);
  if (v5)
  {
    uint64_t v6 = v5[1];
    if (v6)
    {
      uint64_t v7 = *v5;
      uint64_t v8 = 56 * v6;
      do
      {
        uint64_t v9 = (const char *)v7;
        if (*(char *)(v7 + 23) < 0) {
          uint64_t v9 = *(const char **)v7;
        }
        uint64_t v10 = *a2;
        xpc_object_t v19 = xpc_string_create(v9);
        if (!v19) {
          xpc_object_t v19 = xpc_null_create();
        }
        xpc_object_t object = xpc_null_create();
        (*(void (**)(uint64_t, xpc_object_t *, xpc_object_t *))(*(void *)v10 + 48))(v10, &v19, &object);
        xpc_release(object);
        xpc_release(v19);
        v7 += 56;
        v8 -= 56;
      }
      while (v8);
    }
  }
  uint64_t v11 = *(void *)(a1 + 80);
  if (v11)
  {
    uint64_t v12 = *(void *)(a1 + 72);
    uint64_t v13 = 56 * v11;
    do
    {
      uint64_t v14 = (const char *)v12;
      if (*(char *)(v12 + 23) < 0) {
        uint64_t v14 = *(const char **)v12;
      }
      uint64_t v15 = *a2;
      xpc_object_t v19 = xpc_string_create(v14);
      if (!v19) {
        xpc_object_t v19 = xpc_null_create();
      }
      xpc_object_t object = xpc_null_create();
      (*(void (**)(uint64_t, xpc_object_t *, xpc_object_t *))(*(void *)v15 + 48))(v15, &v19, &object);
      xpc_release(object);
      xpc_release(v19);
      v12 += 56;
      v13 -= 56;
    }
    while (v13);
  }
  long long v16 = *(_OWORD *)a2;
  *a2 = 0;
  a2[1] = 0;
  uint64_t v17 = *(std::__shared_weak_count **)(a1 + 64);
  *(_OWORD *)(a1 + 56) = v16;
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
}

void sub_19205EA4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, xpc_object_t a10)
{
}

uint64_t ctu::RestModuleState::handleMessage()
{
  return 0;
}

void *std::__function::__value_func<void ()(xpc::object,std::shared_ptr<xpc::object>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<dispatch::block<void({block_pointer})(xpc::object,std::shared_ptr<xpc::object>)>,std::allocator<dispatch::block<void({block_pointer})(xpc::object,std::shared_ptr<xpc::object>)>>,void ()(xpc::object,std::shared_ptr<xpc::object>)>::~__func(void *a1)
{
  *a1 = &unk_1EE2F7F80;
  uint64_t v2 = (const void *)a1[1];
  if (v2) {
    _Block_release(v2);
  }
  return a1;
}

void std::__function::__func<dispatch::block<void({block_pointer})(xpc::object,std::shared_ptr<xpc::object>)>,std::allocator<dispatch::block<void({block_pointer})(xpc::object,std::shared_ptr<xpc::object>)>>,void ()(xpc::object,std::shared_ptr<xpc::object>)>::~__func(void *__p)
{
  *std::string __p = &unk_1EE2F7F80;
  uint64_t v2 = (const void *)__p[1];
  if (v2) {
    _Block_release(v2);
  }

  operator delete(__p);
}

void *std::__function::__func<dispatch::block<void({block_pointer})(xpc::object,std::shared_ptr<xpc::object>)>,std::allocator<dispatch::block<void({block_pointer})(xpc::object,std::shared_ptr<xpc::object>)>>,void ()(xpc::object,std::shared_ptr<xpc::object>)>::__clone(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 8);
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = &unk_1EE2F7F80;
  std::__compressed_pair_elem<dispatch::block<void({block_pointer})(xpc::object,std::shared_ptr<xpc::object>)>,0,false>::__compressed_pair_elem[abi:ne180100]<dispatch::block<void({block_pointer})(xpc::object,std::shared_ptr<xpc::object>)> const&,0ul>(v2 + 1, v1);
  return v2;
}

void *std::__function::__func<dispatch::block<void({block_pointer})(xpc::object,std::shared_ptr<xpc::object>)>,std::allocator<dispatch::block<void({block_pointer})(xpc::object,std::shared_ptr<xpc::object>)>>,void ()(xpc::object,std::shared_ptr<xpc::object>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE2F7F80;
  return std::__compressed_pair_elem<dispatch::block<void({block_pointer})(xpc::object,std::shared_ptr<xpc::object>)>,0,false>::__compressed_pair_elem[abi:ne180100]<dispatch::block<void({block_pointer})(xpc::object,std::shared_ptr<xpc::object>)> const&,0ul>(a2 + 1, (void **)(a1 + 8));
}

void std::__function::__func<dispatch::block<void({block_pointer})(xpc::object,std::shared_ptr<xpc::object>)>,std::allocator<dispatch::block<void({block_pointer})(xpc::object,std::shared_ptr<xpc::object>)>>,void ()(xpc::object,std::shared_ptr<xpc::object>)>::destroy(uint64_t a1)
{
}

void std::__function::__func<dispatch::block<void({block_pointer})(xpc::object,std::shared_ptr<xpc::object>)>,std::allocator<dispatch::block<void({block_pointer})(xpc::object,std::shared_ptr<xpc::object>)>>,void ()(xpc::object,std::shared_ptr<xpc::object>)>::destroy_deallocate(const void **a1)
{
  std::__function::__alloc_func<dispatch::block<void({block_pointer})(xpc::object,std::shared_ptr<xpc::object>)>,std::allocator<dispatch::block<void({block_pointer})(xpc::object,std::shared_ptr<xpc::object>)>>,void ()(xpc::object,std::shared_ptr<xpc::object>)>::destroy[abi:ne180100](a1[1]);

  operator delete(a1);
}

void std::__function::__func<dispatch::block<void({block_pointer})(xpc::object,std::shared_ptr<xpc::object>)>,std::allocator<dispatch::block<void({block_pointer})(xpc::object,std::shared_ptr<xpc::object>)>>,void ()(xpc::object,std::shared_ptr<xpc::object>)>::operator()(uint64_t a1, xpc_object_t *a2, long long *a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  xpc_object_t object = *a2;
  *a2 = xpc_null_create();
  long long v5 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
  (*(void (**)(uint64_t, xpc_object_t *, long long *))(v4 + 16))(v4, &object, &v5);
  if (*((void *)&v5 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v5 + 1));
  }
  xpc_release(object);
}

void sub_19205ED64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, xpc_object_t object)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<dispatch::block<void({block_pointer})(xpc::object,std::shared_ptr<xpc::object>)>,std::allocator<dispatch::block<void({block_pointer})(xpc::object,std::shared_ptr<xpc::object>)>>,void ()(xpc::object,std::shared_ptr<xpc::object>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<dispatch::block<void({block_pointer})(xpc::object,std::shared_ptr<xpc::object>)>,std::allocator<dispatch::block<void({block_pointer})(xpc::object,std::shared_ptr<xpc::object>)>>,void ()(xpc::object,std::shared_ptr<xpc::object>)>::target_type()
{
}

void *std::__compressed_pair_elem<dispatch::block<void({block_pointer})(xpc::object,std::shared_ptr<xpc::object>)>,0,false>::__compressed_pair_elem[abi:ne180100]<dispatch::block<void({block_pointer})(xpc::object,std::shared_ptr<xpc::object>)> const&,0ul>(void *a1, void **a2)
{
  unsigned int v3 = *a2;
  if (*a2) {
    unsigned int v3 = _Block_copy(v3);
  }
  *a1 = v3;
  return a1;
}

void std::__function::__alloc_func<dispatch::block<void({block_pointer})(xpc::object,std::shared_ptr<xpc::object>)>,std::allocator<dispatch::block<void({block_pointer})(xpc::object,std::shared_ptr<xpc::object>)>>,void ()(xpc::object,std::shared_ptr<xpc::object>)>::destroy[abi:ne180100](const void *a1)
{
  if (a1) {
    _Block_release(a1);
  }
}

void *std::__function::__func<dispatch::block<void({block_pointer})(xpc::object)>,std::allocator<dispatch::block<void({block_pointer})(xpc::object)>>,void ()(xpc::object)>::~__func(void *a1)
{
  *a1 = &unk_1EE2F7F28;
  uint64_t v2 = (const void *)a1[1];
  if (v2) {
    _Block_release(v2);
  }
  return a1;
}

void std::__function::__func<dispatch::block<void({block_pointer})(xpc::object)>,std::allocator<dispatch::block<void({block_pointer})(xpc::object)>>,void ()(xpc::object)>::~__func(void *__p)
{
  *std::string __p = &unk_1EE2F7F28;
  uint64_t v2 = (const void *)__p[1];
  if (v2) {
    _Block_release(v2);
  }

  operator delete(__p);
}

void *std::__function::__func<dispatch::block<void({block_pointer})(xpc::object)>,std::allocator<dispatch::block<void({block_pointer})(xpc::object)>>,void ()(xpc::object)>::__clone(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 8);
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = &unk_1EE2F7F28;
  std::__compressed_pair_elem<dispatch::block<void({block_pointer})(xpc::object)>,0,false>::__compressed_pair_elem[abi:ne180100]<dispatch::block<void({block_pointer})(xpc::object)> const&,0ul>(v2 + 1, v1);
  return v2;
}

void *std::__function::__func<dispatch::block<void({block_pointer})(xpc::object)>,std::allocator<dispatch::block<void({block_pointer})(xpc::object)>>,void ()(xpc::object)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE2F7F28;
  return std::__compressed_pair_elem<dispatch::block<void({block_pointer})(xpc::object)>,0,false>::__compressed_pair_elem[abi:ne180100]<dispatch::block<void({block_pointer})(xpc::object)> const&,0ul>(a2 + 1, (void **)(a1 + 8));
}

void std::__function::__func<dispatch::block<void({block_pointer})(xpc::object)>,std::allocator<dispatch::block<void({block_pointer})(xpc::object)>>,void ()(xpc::object)>::destroy(uint64_t a1)
{
}

void std::__function::__func<dispatch::block<void({block_pointer})(xpc::object)>,std::allocator<dispatch::block<void({block_pointer})(xpc::object)>>,void ()(xpc::object)>::destroy_deallocate(const void **a1)
{
  std::__function::__alloc_func<dispatch::block<void({block_pointer})(xpc::object)>,std::allocator<dispatch::block<void({block_pointer})(xpc::object)>>,void ()(xpc::object)>::destroy[abi:ne180100](a1[1]);

  operator delete(a1);
}

void std::__function::__func<dispatch::block<void({block_pointer})(xpc::object)>,std::allocator<dispatch::block<void({block_pointer})(xpc::object)>>,void ()(xpc::object)>::operator()(uint64_t a1, xpc_object_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  xpc_object_t object = *a2;
  *a2 = xpc_null_create();
  (*(void (**)(uint64_t, xpc_object_t *))(v2 + 16))(v2, &object);
  xpc_release(object);
}

void sub_19205F000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

uint64_t std::__function::__func<dispatch::block<void({block_pointer})(xpc::object)>,std::allocator<dispatch::block<void({block_pointer})(xpc::object)>>,void ()(xpc::object)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<dispatch::block<void({block_pointer})(xpc::object)>,std::allocator<dispatch::block<void({block_pointer})(xpc::object)>>,void ()(xpc::object)>::target_type()
{
}

void *std::__compressed_pair_elem<dispatch::block<void({block_pointer})(xpc::object)>,0,false>::__compressed_pair_elem[abi:ne180100]<dispatch::block<void({block_pointer})(xpc::object)> const&,0ul>(void *a1, void **a2)
{
  unsigned int v3 = *a2;
  if (*a2) {
    unsigned int v3 = _Block_copy(v3);
  }
  *a1 = v3;
  return a1;
}

void std::__function::__alloc_func<dispatch::block<void({block_pointer})(xpc::object)>,std::allocator<dispatch::block<void({block_pointer})(xpc::object)>>,void ()(xpc::object)>::destroy[abi:ne180100](const void *a1)
{
  if (a1) {
    _Block_release(a1);
  }
}

void std::__shared_ptr_pointer<ctu::RestModuleState *,std::shared_ptr<ctu::RestModuleState> ctu::SharedSynchronizable<ctu::RestModuleState>::make_shared_ptr<ctu::RestModuleState>(ctu::RestModuleState*)::{lambda(ctu::RestModuleState *)#1},std::allocator<ctu::RestModuleState>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<ctu::RestModuleState *,std::shared_ptr<ctu::RestModuleState> ctu::SharedSynchronizable<ctu::RestModuleState>::make_shared_ptr<ctu::RestModuleState>(ctu::RestModuleState*)::{lambda(ctu::RestModuleState *)#1},std::allocator<ctu::RestModuleState>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<ctu::RestModuleState *,std::shared_ptr<ctu::RestModuleState> ctu::SharedSynchronizable<ctu::RestModuleState>::make_shared_ptr<ctu::RestModuleState>(ctu::RestModuleState*)::{lambda(ctu::RestModuleState *)#1},std::allocator<ctu::RestModuleState>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::shared_ptr<ctu::RestModuleState> ctu::SharedSynchronizable<ctu::RestModuleState>::make_shared_ptr<ctu::RestModuleState>(ctu::RestModuleState*)::{lambda(ctu::RestModuleState*)#1}::operator() const(ctu::RestModuleState*)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  if (a1)
  {
    std::unique_ptr<boost::container::flat_map<std::string,std::function<void ()(xpc::object,std::shared_ptr<xpc::object>)>,std::less<std::string>,void>>::reset[abi:ne180100]((void *)(a1 + 96), 0);
    uint64_t v2 = *(void *)(a1 + 80);
    if (v2)
    {
      unsigned int v3 = (void *)(*(void *)(a1 + 72) + 24);
      do
      {
        std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100](v3);
        if (*((char *)v3 - 1) < 0) {
          operator delete((void *)*(v3 - 3));
        }
        v3 += 7;
        --v2;
      }
      while (v2);
    }
    if (*(void *)(a1 + 88)) {
      operator delete(*(void **)(a1 + 72));
    }
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 64);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    if (*(char *)(a1 + 55) < 0) {
      operator delete(*(void **)(a1 + 32));
    }
    long long v5 = ctu::SharedSynchronizable<ctu::RestModuleState>::~SharedSynchronizable((void *)a1);
    operator delete(v5);
  }
}

void std::unique_ptr<boost::container::flat_map<std::string,std::function<void ()(xpc::object,std::shared_ptr<xpc::object>)>,std::less<std::string>,void>>::reset[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v2 = (void *)*a1;
  *a1 = a2;
  if (v2)
  {
    uint64_t v3 = v2[1];
    if (v3)
    {
      uint64_t v4 = (void *)(*v2 + 24);
      do
      {
        std::__function::__value_func<void ()(xpc::object,std::shared_ptr<xpc::object>)>::~__value_func[abi:ne180100](v4);
        if (*((char *)v4 - 1) < 0) {
          operator delete((void *)*(v4 - 3));
        }
        v4 += 7;
        --v3;
      }
      while (v3);
    }
    if (v2[2]) {
      operator delete((void *)*v2);
    }
    operator delete(v2);
  }
}

void std::__throw_bad_weak_ptr[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x1E4FBA438] + 16;
  __cxa_throw(exception, MEMORY[0x1E4FBA2E0], MEMORY[0x1E4FBA208]);
}

void std::__shared_ptr_emplace<ctu::rest::RestConnectorDelegate<ctu::RestModuleState>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE2F8AE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ctu::rest::RestConnectorDelegate<ctu::RestModuleState>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE2F8AE8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<ctu::rest::RestConnectorDelegate<ctu::RestModuleState>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t ctu::rest::RestConnectorDelegate<ctu::RestModuleState>::~RestConnectorDelegate(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void ctu::rest::RestConnectorDelegate<ctu::RestModuleState>::~RestConnectorDelegate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

uint64_t ctu::rest::RestConnectorDelegate<ctu::RestModuleState>::handleMessage(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = std::__shared_weak_count::lock(v1);
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
  }
  return 0;
}

void ctu::rest::RestConnectorDelegate<ctu::RestModuleState>::reset(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void ___ZN3ctu15XpcClientHelper9setServerINS_4rest16RestXpcConnectorEEEvN3xpc10connectionEN8dispatch5queueENSt3__18weak_ptrIT_EE_block_invoke(void *a1, xpc_object_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    long long v5 = (void *)a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = a1[5];
      if (!v8)
      {
LABEL_18:
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        return;
      }
      uint64_t v9 = MEMORY[0x192FEE1B0](a2);
      uint64_t v10 = MEMORY[0x1E4F14590];
      if (v9 != MEMORY[0x1E4F14590])
      {
        if (v9 == MEMORY[0x1E4F145A8] && *v5 == a1[7])
        {
          if (a2) {
            xpc_retain(a2);
          }
          else {
            a2 = xpc_null_create();
          }
          xpc_release(a2);
        }
        goto LABEL_18;
      }
      if (a2)
      {
        xpc_retain(a2);
        xpc_object_t object = a2;
      }
      else
      {
        a2 = xpc_null_create();
        xpc_object_t object = a2;
        if (!a2)
        {
          xpc_object_t v11 = xpc_null_create();
          a2 = 0;
          goto LABEL_16;
        }
      }
      if (MEMORY[0x192FEE1B0](a2) == v10)
      {
        xpc_retain(a2);
LABEL_17:
        ctu::rest::RestXpcConnector::handleMessage(v8, &object);
        xpc_release(object);
        xpc_object_t object = 0;
        xpc_release(a2);
        goto LABEL_18;
      }
      xpc_object_t v11 = xpc_null_create();
LABEL_16:
      xpc_object_t object = v11;
      goto LABEL_17;
    }
  }
}

void sub_19205F554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v11);
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c52_ZTSNSt3__18weak_ptrIN3ctu4rest16RestXpcConnectorEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c52_ZTSNSt3__18weak_ptrIN3ctu4rest16RestXpcConnectorEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void *std::__function::__func<ctu::RestModuleState::getValueOnce(std::string &&,std::function<void ()(xpc::object)> &&)::$_0,std::allocator<std::function<void ()(xpc::object)> &>,xpc::object>::~__func(void *a1)
{
  *a1 = &unk_1EE2F8348;
  std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<ctu::RestModuleState::getValueOnce(std::string &&,std::function<void ()(xpc::object)> &&)::$_0,std::allocator<std::function<void ()(xpc::object)> &>,xpc::object>::~__func(void *a1)
{
  *a1 = &unk_1EE2F8348;
  std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

uint64_t std::__function::__func<ctu::RestModuleState::getValueOnce(std::string &&,std::function<void ()(xpc::object)> &&)::$_0,std::allocator<std::function<void ()(xpc::object)> &>,xpc::object>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE2F8348;
  return std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<ctu::RestModuleState::getValueOnce(std::string &&,std::function<void ()(xpc::object)> &&)::$_0,std::allocator<std::function<void ()(xpc::object)> &>,xpc::object>::destroy(uint64_t a1)
{
  return std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

uint64_t std::__function::__func<ctu::RestModuleState::getValueOnce(std::string &&,std::function<void ()(xpc::object)> &&)::$_0,std::allocator<std::function<void ()(xpc::object)> &>,xpc::object>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ctu::RestModuleState::getValueOnce(std::string &&,std::function<void ()(xpc::object)> &&)::$_0,std::allocator<std::function<void ()(xpc::object)> &>,xpc::object>::target_type()
{
}

void *std::__function::__func<ctu::RestModuleState::sendRequest(std::string &&,xpc::object &&,std::function<void ()(xpc)> &&)::$_0,std::allocator<std::function<void ()(xpc)>>,xpc::object &&>::~__func(void *a1)
{
  *a1 = &unk_1EE2F4388;
  std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<ctu::RestModuleState::sendRequest(std::string &&,xpc::object &&,std::function<void ()(xpc)> &&)::$_0,std::allocator<std::function<void ()(xpc)>>,xpc::object &&>::~__func(void *a1)
{
  *a1 = &unk_1EE2F4388;
  std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

uint64_t std::__function::__func<ctu::RestModuleState::sendRequest(std::string &&,xpc::object &&,std::function<void ()(xpc)> &&)::$_0,std::allocator<std::function<void ()(xpc)>>,xpc::object &&>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE2F4388;
  return std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<ctu::RestModuleState::sendRequest(std::string &&,xpc::object &&,std::function<void ()(xpc)> &&)::$_0,std::allocator<std::function<void ()(xpc)>>,xpc::object &&>::destroy(uint64_t a1)
{
  return std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

uint64_t std::__function::__func<ctu::RestModuleState::sendRequest(std::string &&,xpc::object &&,std::function<void ()(xpc)> &&)::$_0,std::allocator<std::function<void ()(xpc)>>,xpc::object &&>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ctu::RestModuleState::sendRequest(std::string &&,xpc::object &&,std::function<void ()(xpc)> &&)::$_0,std::allocator<std::function<void ()(xpc)>>,xpc::object &&>::target_type()
{
}

uint64_t *boost::container::dtl::value_destructor<boost::container::new_allocator<boost::container::dtl::pair<std::string,std::function<void ()(xpc::object)>>>,boost::container::dtl::pair<std::string,std::function<void ()(xpc::object)>>>::~value_destructor(uint64_t *a1)
{
  uint64_t v2 = *a1;
  std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100]((void *)(*a1 + 24));
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  return a1;
}

void boost::container::vector<boost::container::dtl::pair<std::string,std::function<void ()(xpc::object)>>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::function<void ()(xpc::object)>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<std::string,std::function<void ()(xpc::object)>>>,boost::container::dtl::pair<std::string,std::function<void ()(xpc::object)>>*,boost::container::dtl::pair<std::string,std::function<void ()(xpc::object)>>>>(void *a1, char *a2, long long *a3, long long *a4)
{
  unint64_t v4 = *((void *)a2 + 2);
  unint64_t v5 = *((void *)a2 + 1) + 1;
  if (0x249249249249249 - v4 < v5 - v4) {
    goto LABEL_27;
  }
  unint64_t v6 = v4 >> 61;
  unint64_t v7 = 8 * v4;
  if (v6 > 4) {
    uint64_t v8 = -1;
  }
  else {
    uint64_t v8 = v7;
  }
  unint64_t v9 = v7 / 5;
  if (v6) {
    unint64_t v9 = v8;
  }
  if (v9 >= 0x249249249249249) {
    unint64_t v9 = 0x249249249249249;
  }
  unint64_t v10 = v5 <= v9 ? v9 : *((void *)a2 + 1) + 1;
  if (v10 > 0x249249249249249) {
LABEL_27:
  }
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
  uint64_t v14 = *(char **)a2;
  uint64_t v15 = (char *)operator new(56 * v10);
  long long v16 = v15;
  uint64_t v17 = *(char **)a2;
  uint64_t v18 = *(void *)a2 + 56 * *((void *)a2 + 1);
  xpc_object_t v19 = v15;
  if (*(long long **)a2 != a3)
  {
    long long v20 = *(long long **)a2;
    xpc_object_t v19 = v15;
    do
    {
      long long v21 = *v20;
      *((void *)v19 + 2) = *((void *)v20 + 2);
      *(_OWORD *)xpc_object_t v19 = v21;
      *((void *)v20 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
      *((void *)v20 + 2) = 0;
      *(void *)long long v20 = 0;
      std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)(v19 + 24), (uint64_t)v20 + 24);
      long long v20 = (long long *)((char *)v20 + 56);
      v19 += 56;
    }
    while (v20 != a3);
  }
  long long v22 = *a4;
  *((void *)v19 + 2) = *((void *)a4 + 2);
  *(_OWORD *)xpc_object_t v19 = v22;
  *((void *)a4 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
  *((void *)a4 + 2) = 0;
  *(void *)a4 = 0;
  std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)(v19 + 24), (uint64_t)a4 + 24);
  if ((long long *)v18 != a3)
  {
    uint64_t v23 = (uint64_t)(v19 + 80);
    xpc_object_t v24 = a3;
    do
    {
      long long v25 = *v24;
      *(void *)(v23 - 8) = *((void *)v24 + 2);
      *(_OWORD *)(v23 - 24) = v25;
      *((void *)v24 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
      *((void *)v24 + 2) = 0;
      *(void *)xpc_object_t v24 = 0;
      uint64_t v26 = std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100](v23, (uint64_t)v24 + 24);
      xpc_object_t v24 = (long long *)((char *)v24 + 56);
      uint64_t v23 = v26 + 56;
    }
    while (v24 != (long long *)v18);
  }
  if (v17)
  {
    uint64_t v27 = *((void *)a2 + 1);
    if (v27)
    {
      uint64_t v28 = v17 + 24;
      do
      {
        std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100](v28);
        if (*((char *)v28 - 1) < 0) {
          operator delete((void *)*(v28 - 3));
        }
        v28 += 7;
        --v27;
      }
      while (v27);
    }
    operator delete(*(void **)a2);
  }
  uint64_t v29 = *((void *)a2 + 1) + 1;
  *(void *)a2 = v16;
  *((void *)a2 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v29;
  *((void *)a2 + 2) = v10;
  *a1 = &v16[(char *)a3 - v14];
}

uint64_t boost::container::dtl::pair<std::string,std::function<void ()(xpc::object)>>::operator=(uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  unint64_t v6 = (long long **)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 48);
  unint64_t v7 = (long long *)(a1 + 24);
  *(void *)(a1 + 48) = 0;
  if (v5 == a1 + 24)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 32))(a1 + 24);
  }
  else if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
  }
  uint64_t v8 = a2 + 3;
  unint64_t v9 = (long long *)*((void *)a2 + 6);
  if (v9)
  {
    if (v9 == (long long *)((char *)a2 + 24))
    {
      *unint64_t v6 = v7;
      (*(void (**)(void, uint64_t))(*(void *)*v8 + 24))(*v8, a1 + 24);
      return a1;
    }
    *unint64_t v6 = v9;
  }
  else
  {
    uint64_t v8 = (void *)(a1 + 48);
  }
  *uint64_t v8 = 0;
  return a1;
}

uint64_t *boost::container::dtl::value_destructor<boost::container::new_allocator<boost::container::dtl::pair<std::string,std::function<void ()(xpc::object,std::shared_ptr<xpc::object>)>>>,boost::container::dtl::pair<std::string,std::function<void ()(xpc::object,std::shared_ptr<xpc::object>)>>>::~value_destructor(uint64_t *a1)
{
  uint64_t v2 = *a1;
  std::__function::__value_func<void ()(xpc::object,std::shared_ptr<xpc::object>)>::~__value_func[abi:ne180100]((void *)(*a1 + 24));
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  return a1;
}

void boost::container::vector<boost::container::dtl::pair<std::string,std::function<void ()(xpc::object,std::shared_ptr<xpc::object>)>>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::function<void ()(xpc::object,std::shared_ptr<xpc::object>)>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<std::string,std::function<void ()(xpc::object,std::shared_ptr<xpc::object>)>>>,boost::container::dtl::pair<std::string,std::function<void ()(xpc::object,std::shared_ptr<xpc::object>)>>*,boost::container::dtl::pair<std::string,std::function<void ()(xpc::object,std::shared_ptr<xpc::object>)>>>>(void *a1, char *a2, long long *a3, long long *a4)
{
  unint64_t v4 = *((void *)a2 + 2);
  unint64_t v5 = *((void *)a2 + 1) + 1;
  if (0x249249249249249 - v4 < v5 - v4) {
    goto LABEL_27;
  }
  unint64_t v6 = v4 >> 61;
  unint64_t v7 = 8 * v4;
  if (v6 > 4) {
    uint64_t v8 = -1;
  }
  else {
    uint64_t v8 = v7;
  }
  unint64_t v9 = v7 / 5;
  if (v6) {
    unint64_t v9 = v8;
  }
  if (v9 >= 0x249249249249249) {
    unint64_t v9 = 0x249249249249249;
  }
  unint64_t v10 = v5 <= v9 ? v9 : *((void *)a2 + 1) + 1;
  if (v10 > 0x249249249249249) {
LABEL_27:
  }
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
  uint64_t v14 = *(char **)a2;
  uint64_t v15 = (char *)operator new(56 * v10);
  long long v16 = v15;
  uint64_t v17 = *(char **)a2;
  uint64_t v18 = *(void *)a2 + 56 * *((void *)a2 + 1);
  xpc_object_t v19 = v15;
  if (*(long long **)a2 != a3)
  {
    long long v20 = *(long long **)a2;
    xpc_object_t v19 = v15;
    do
    {
      long long v21 = *v20;
      *((void *)v19 + 2) = *((void *)v20 + 2);
      *(_OWORD *)xpc_object_t v19 = v21;
      *((void *)v20 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
      *((void *)v20 + 2) = 0;
      *(void *)long long v20 = 0;
      std::__function::__value_func<void ()(xpc::object,std::shared_ptr<xpc::object>)>::__value_func[abi:ne180100]((uint64_t)(v19 + 24), (uint64_t)v20 + 24);
      long long v20 = (long long *)((char *)v20 + 56);
      v19 += 56;
    }
    while (v20 != a3);
  }
  long long v22 = *a4;
  *((void *)v19 + 2) = *((void *)a4 + 2);
  *(_OWORD *)xpc_object_t v19 = v22;
  *((void *)a4 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
  *((void *)a4 + 2) = 0;
  *(void *)a4 = 0;
  std::__function::__value_func<void ()(xpc::object,std::shared_ptr<xpc::object>)>::__value_func[abi:ne180100]((uint64_t)(v19 + 24), (uint64_t)a4 + 24);
  if ((long long *)v18 != a3)
  {
    uint64_t v23 = (uint64_t)(v19 + 80);
    xpc_object_t v24 = a3;
    do
    {
      long long v25 = *v24;
      *(void *)(v23 - 8) = *((void *)v24 + 2);
      *(_OWORD *)(v23 - 24) = v25;
      *((void *)v24 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
      *((void *)v24 + 2) = 0;
      *(void *)xpc_object_t v24 = 0;
      uint64_t v26 = std::__function::__value_func<void ()(xpc::object,std::shared_ptr<xpc::object>)>::__value_func[abi:ne180100](v23, (uint64_t)v24 + 24);
      xpc_object_t v24 = (long long *)((char *)v24 + 56);
      uint64_t v23 = v26 + 56;
    }
    while (v24 != (long long *)v18);
  }
  if (v17)
  {
    uint64_t v27 = *((void *)a2 + 1);
    if (v27)
    {
      uint64_t v28 = v17 + 24;
      do
      {
        std::__function::__value_func<void ()(xpc::object,std::shared_ptr<xpc::object>)>::~__value_func[abi:ne180100](v28);
        if (*((char *)v28 - 1) < 0) {
          operator delete((void *)*(v28 - 3));
        }
        v28 += 7;
        --v27;
      }
      while (v27);
    }
    operator delete(*(void **)a2);
  }
  uint64_t v29 = *((void *)a2 + 1) + 1;
  *(void *)a2 = v16;
  *((void *)a2 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v29;
  *((void *)a2 + 2) = v10;
  *a1 = &v16[(char *)a3 - v14];
}

uint64_t std::__function::__value_func<void ()(xpc::object,std::shared_ptr<xpc::object>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

uint64_t boost::container::dtl::pair<std::string,std::function<void ()(xpc::object,std::shared_ptr<xpc::object>)>>::operator=(uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  std::__function::__value_func<void ()(xpc::object,std::shared_ptr<xpc::object>)>::operator=[abi:ne180100]((void *)(a1 + 24), (uint64_t)a2 + 24);
  return a1;
}

void *std::__function::__value_func<void ()(xpc::object,std::shared_ptr<xpc::object>)>::operator=[abi:ne180100](void *a1, uint64_t a2)
{
  long long v4 = (void *)a1[3];
  a1[3] = 0;
  if (v4 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  uint64_t v5 = *(void *)(a2 + 24);
  if (v5)
  {
    if (v5 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v5;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void **dispatch::async<void ctu::SharedSynchronizable<ctu::RestModuleState>::execute_wrapped<ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0>(ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<std::function<void ()(xpc::object)> &&,std::default_delete<std::function<void ()(xpc::object)> &&>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v5 = a1;
  uint64_t v1 = (void *)*a1;
  xpc_object_t object = xpc_null_create();
  uint64_t v2 = v1[3];
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, xpc_object_t *))(*(void *)v2 + 48))(v2, &object);
  xpc_release(object);
  uint64_t v3 = std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100](v1);
  operator delete(v3);
  return std::unique_ptr<void ctu::SharedSynchronizable<ctu::RestModuleState>::execute_wrapped<ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0>(ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0 &&)::{lambda(void)#1},std::default_delete<ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0>>::~unique_ptr[abi:ne180100](&v5);
}

void sub_19205FFC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  uint64_t v12 = std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100](v10);
  operator delete(v12);
  std::unique_ptr<void ctu::SharedSynchronizable<ctu::RestModuleState>::execute_wrapped<ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0>(ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0 &&)::{lambda(void)#1},std::default_delete<ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0>>::~unique_ptr[abi:ne180100]((void **)&a9);
  _Unwind_Resume(a1);
}

std::string *ctu::operator<<(std::string *a1, void *a2)
{
  if (a2) {
    uint64_t v3 = (const char *)[a2 UTF8String];
  }
  else {
    uint64_t v3 = "<nil>";
  }
  return ctu::LogMessageBuffer::appendString(a1, v3);
}

std::string *ctu::operator<<(std::string *this, void *a2)
{
  if (a2)
  {
    long long v4 = (void *)MEMORY[0x192FEDBB0]();
    ctu::LogMessageBuffer::appendString(this, (const char *)[((id)objc_msgSend(a2, "stringValue")) UTF8String]);
  }
  else
  {
    ctu::LogMessageBuffer::appendString(this, "<nil>");
  }
  return this;
}

__n128 ctu::LogMessageBuffer::createWithNSFormat@<Q0>(ctu::LogMessageBuffer *this@<X0>, uint64_t a2@<X8>, ...)
{
  va_start(va, a2);
  *(void *)(a2 + 48) = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 32) = v3;
  *(_OWORD *)a2 = v3;
  ctu::LogMessageBuffer::vCreateWithNSFormat(this, (NSString *)va, a2);
  return result;
}

void ctu::LogMessageBuffer::vCreateWithNSFormat(ctu::LogMessageBuffer *this@<X0>, NSString *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = (void *)[[NSString alloc] initWithFormat:this arguments:a2];
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(void *)(a3 + 48) = 0;
  std::string::__assign_external((std::string *)a3, (const std::string::value_type *)[v5 UTF8String]);
}

void sub_19206015C(_Unwind_Exception *a1)
{
  ctu::LogMessageBuffer::~LogMessageBuffer(v1);
  _Unwind_Resume(a1);
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    unint64_t v10 = this->__r_.__value_.__r.__words[2];
    unint64_t v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __n)
    {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    unint64_t v6 = HIBYTE(v10);
    unint64_t v7 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    unint64_t v7 = this;
    if (__n > 0x16)
    {
      std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      unint64_t v9 = 22;
LABEL_6:
      std::string::__grow_by_and_replace(this, v9, __n - v9, size, 0, size, __n, __s);
      return this;
    }
  }
  if (__n)
  {
    memmove(v7, __s, __n);
    LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0) {
    this->__r_.__value_.__l.__size_ = __n;
  }
  else {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
  }
  v7->__r_.__value_.__s.__data_[__n] = 0;
  return this;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s)
{
  size_t v4 = strlen(__s);

  return std::string::__assign_external(this, __s, v4);
}

std::string *ctu::to_rle@<X0>(ctu *this@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  return ctu::to_rle(a3);
}

void sub_1920602B4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *ctu::to_rle(std::string *a1)
{
  std::string::size_type v2 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
  {
    long long v3 = (unsigned __int8 *)a1->__r_.__value_.__r.__words[0];
    std::string::size_type size = a1->__r_.__value_.__l.__size_;
  }
  else
  {
    long long v3 = (unsigned __int8 *)a1;
    std::string::size_type size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  }
  uint64_t v5 = 0;
  xpc_object_t v19 = v3;
  unint64_t v6 = &v3[size];
  uint64_t v17 = 0;
  uint64_t v18 = v6;
  v16[0] = &v17;
  v16[1] = &v19;
  unint64_t v7 = v3;
  std::string v16[2] = a1;
  void v16[3] = &v18;
  if ((v2 & 0x80) != 0) {
    goto LABEL_6;
  }
LABEL_5:
  uint64_t v8 = (unsigned __int8 *)a1 + v2;
  unint64_t v9 = a1;
  std::string::size_type v10 = v2;
  while (v7 != v8)
  {
    if (v6 == (unsigned __int8 *)((char *)v9 + v10) || *v6 == *v7)
    {
      uint64_t v17 = ++v5;
    }
    else
    {
      ctu::to_rle(std::string &)::$_0::operator()((uint64_t)v16);
      uint64_t v17 = 1;
      std::string::size_type v2 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
      uint64_t v5 = 1;
    }
    uint64_t v18 = v3;
    unint64_t v6 = v7++;
    ++v3;
    if ((v2 & 0x80) == 0) {
      goto LABEL_5;
    }
LABEL_6:
    unint64_t v9 = (std::string *)a1->__r_.__value_.__r.__words[0];
    std::string::size_type v10 = a1->__r_.__value_.__l.__size_;
    uint64_t v8 = (unsigned __int8 *)(a1->__r_.__value_.__r.__words[0] + v10);
  }
  ctu::to_rle(std::string &)::$_0::operator()((uint64_t)v16);
  uint64_t v11 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  int v12 = (char)v11;
  uint64_t v13 = (unsigned __int8 *)a1 + v11;
  if (v12 >= 0)
  {
    std::string::size_type v14 = (std::string::size_type)a1;
  }
  else
  {
    uint64_t v13 = (unsigned __int8 *)(a1->__r_.__value_.__r.__words[0] + a1->__r_.__value_.__l.__size_);
    std::string::size_type v14 = a1->__r_.__value_.__r.__words[0];
  }
  return std::string::erase(a1, (std::string::size_type)&v19[-v14], v13 - v19);
}

void ctu::to_rle(std::string &)::$_0::operator()(uint64_t a1)
{
  std::string::size_type v2 = **(void **)a1;
  if (v2 < 5)
  {
    std::string::size_type v14 = *(std::string **)(a1 + 16);
    std::string::size_type v15 = *(void *)(a1 + 16);
    if (SHIBYTE(v14->__r_.__value_.__r.__words[2]) < 0) {
      std::string::size_type v15 = v14->__r_.__value_.__r.__words[0];
    }
    std::string::replace(v14, **(void **)(a1 + 8) - v15, v2, v2, ***(unsigned char ***)(a1 + 24));
    **(void **)(a1 + 8) += **(void **)a1;
  }
  else
  {
    long long v3 = *(void **)(a1 + 8);
    size_t v4 = (unsigned char *)(*v3)++;
    *size_t v4 = 60;
    memset(&v16, 170, sizeof(v16));
    std::to_string(&v16, **(void **)a1);
    uint64_t v5 = *(std::string **)(a1 + 16);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v16.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v16.__r_.__value_.__l.__size_;
    }
    std::string::size_type v7 = *(void *)(a1 + 16);
    if (SHIBYTE(v5->__r_.__value_.__r.__words[2]) < 0) {
      std::string::size_type v7 = v5->__r_.__value_.__r.__words[0];
    }
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v8 = &v16;
    }
    else {
      uint64_t v8 = (std::string *)v16.__r_.__value_.__r.__words[0];
    }
    std::string::replace(v5, **(void **)(a1 + 8) - v7, size, (const std::string::value_type *)v8, size);
    std::string::size_type v9 = HIBYTE(v16.__r_.__value_.__r.__words[2]);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v9 = v16.__r_.__value_.__l.__size_;
    }
    std::string::size_type v10 = *(void **)(a1 + 8);
    uint64_t v11 = (unsigned char *)(*v10 + v9);
    void *v10 = v11 + 1;
    unsigned char *v11 = 62;
    LOBYTE(v1ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = ***(unsigned char ***)(a1 + 24);
    int v12 = *(void **)(a1 + 8);
    uint64_t v13 = (unsigned char *)(*v12)++;
    unsigned char *v13 = (_BYTE)v11;
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v16.__r_.__value_.__l.__data_);
    }
  }
}

void sub_19206055C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ctu::from_rle(std::string *this@<X0>, std::string *a2@<X8>)
{
  memset(&v14, 0, sizeof(v14));
  BOOL v3 = (this->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
  std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0) {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
  }
  if (size)
  {
    std::string::size_type v6 = 0;
    std::string::size_type v7 = 1;
    do
    {
      if (v3) {
        uint64_t v8 = (std::string *)this->__r_.__value_.__r.__words[0];
      }
      else {
        uint64_t v8 = this;
      }
      int v9 = v8->__r_.__value_.__s.__data_[v6];
      if (v9 == 60)
      {
        std::string::size_type v10 = std::string::find(this, 62, v6);
        if (v10 == -1) {
          goto LABEL_18;
        }
        std::string::size_type v11 = v10;
        memset(&__str, 170, sizeof(__str));
        std::string::basic_string(&__str, this, v6 + 1, v10 - v6, (std::allocator<char> *)&v15);
        std::string::size_type v7 = std::stoi(&__str, 0, 10);
        std::string::size_type v6 = v11 + 1;
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        std::string::append(&v14, v7, v9);
        ++v6;
        std::string::size_type v7 = 1;
      }
      BOOL v3 = (this->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
      std::string::size_type v12 = HIBYTE(this->__r_.__value_.__r.__words[2]);
      if ((v12 & 0x80u) != 0) {
        std::string::size_type v12 = this->__r_.__value_.__l.__size_;
      }
    }
    while (v6 < v12);
  }
  *a2 = v14;
  a2 = &v14;
LABEL_18:
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
}

void sub_192060714()
{
}

BOOL TelephonyUtilRingBufferInitialize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  a9.i32[0] = a3;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(a9);
  v9.i16[0] = vaddlv_u8(v9);
  unsigned int v10 = v9.i32[0];
  if (v9.i32[0] >= 2u)
  {
    _TelephonyUtilDebugPrint((uint64_t)"TelephonyUtilRingBufferInitialize", (uint64_t)"Capacity %u is not a power of two\n", a3, a4, a5, a6, a7, a8, a3);
  }
  else
  {
    *(void *)a1 = a2;
    *(_DWORD *)(a1 + 12) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 8) = a3;
  }
  return v10 < 2;
}

uint64_t TelephonyUtilRingBufferReset(uint64_t result)
{
  *(_DWORD *)(result + 12) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t TelephonyUtilRingBufferGetLinearWriteRemaining(_DWORD *a1)
{
  int v2 = a1[2];
  int v1 = a1[3];
  unsigned int v3 = (v2 - 1) & v1;
  unsigned int v4 = a1[4];
  if (v3 > ((v2 - 1) & v4) || v4 == v1) {
    int v6 = a1[2];
  }
  else {
    int v6 = (v2 - 1) & v4;
  }
  return v6 - v3;
}

uint64_t TelephonyUtilRingBufferGetSize(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 16));
}

uint64_t TelephonyUtilRingBufferGetLinearReadRemaining(_DWORD *a1)
{
  int v1 = a1[4];
  int v2 = a1[2];
  int v3 = (v2 - 1) & v1;
  unsigned int v4 = a1[3] - v1;
  unsigned int v5 = v2 - v3;
  if (v5 >= v4) {
    return v4;
  }
  else {
    return v5;
  }
}

size_t TelephonyUtilRingBufferInsertRaw(uint64_t a1, const void *a2, unsigned int a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v4 = *(_DWORD *)(a1 + 12);
  uint64_t v6 = (v5 - 1) & v4;
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (v6 > ((v5 - 1) & v7) || v7 == v4) {
    int v9 = *(_DWORD *)(a1 + 8);
  }
  else {
    int v9 = (v5 - 1) & v7;
  }
  unsigned int v10 = v9 - v6;
  if (v10 >= a3) {
    size_t v11 = a3;
  }
  else {
    size_t v11 = v10;
  }
  memcpy((void *)(*(void *)a1 + v6), a2, v11);
  *(_DWORD *)(a1 + 12) += v11;
  return v11;
}

ssize_t TelephonyUtilRingBufferInsertFDUnblockable(uint64_t a1, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  int v7 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 12);
  uint64_t v8 = (v7 - 1) & v6;
  unsigned int v9 = *(_DWORD *)(a1 + 16);
  if (v8 > ((v7 - 1) & v9) || v9 == v6) {
    int v11 = *(_DWORD *)(a1 + 8);
  }
  else {
    int v11 = (v7 - 1) & v9;
  }
  unsigned int v12 = v11 - v8;
  if (v12 < a4) {
    a4 = v12;
  }
  ssize_t result = TelephonyUtilUnblockableReadWithTimeout(a2, a3, (void *)(*(void *)a1 + v8), a4, a5);
  if ((int)result >= 1) {
    *(_DWORD *)(a1 + 12) += result;
  }
  return result;
}

uint64_t TelephonyUtilRingBufferInsertTransport(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned int *, void, uint64_t, void))(a2 + 8);
  if (!v4) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v14 = -1431655766;
  unsigned int v7 = *(_DWORD *)(a1 + 12);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  int v8 = *(_DWORD *)(a1 + 8);
  uint64_t v9 = (v8 - 1) & v7;
  BOOL v10 = v9 > ((v8 - 1) & v6) || v6 == v7;
  int v11 = v10 ? *(_DWORD *)(a1 + 8) : (v8 - 1) & v6;
  unsigned int v12 = v11 - v9;
  a3 = v12 >= a3 ? a3 : v12;
  if (!v4(a2, *(void *)a1 + v9, a3, &v14, 0, a4, 0)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = v14;
  *(_DWORD *)(a1 + 12) += v14;
  return result;
}

uint64_t TelephonyUtilRingBufferLinearize(char **a1)
{
  int v2 = *((_DWORD *)a1 + 2);
  unsigned int v3 = *((_DWORD *)a1 + 3);
  size_t v4 = (v2 - 1) & v3;
  int v5 = *((_DWORD *)a1 + 4);
  unsigned int v6 = (v2 - 1) & v5;
  int v7 = v3 - v5;
  if (v4 <= v6)
  {
    size_t v8 = v2 - v6;
    uint64_t result = (uint64_t)malloc(v8);
    if (!result) {
      return result;
    }
    BOOL v10 = (void *)result;
    int v11 = *a1;
    memcpy((void *)result, &(*a1)[v6], v8);
    memmove(&v11[v8], v11, v4);
    memcpy(*a1, v10, v8);
    free(v10);
  }
  else if (v6)
  {
    memmove(*a1, &(*a1)[v6], v3 - v5);
  }
  *((_DWORD *)a1 + 3) = v7;
  *((_DWORD *)a1 + 4) = 0;
  return 1;
}

uint64_t TelephonyUtilRingBufferExtractPrivate(uint64_t a1, uint64_t (*a2)(uint64_t *, uint64_t, uint64_t), uint64_t a3, unsigned int a4)
{
  uint64_t v21 = a3;
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  int v7 = *(_DWORD *)(a1 + 8);
  unsigned int v8 = *(_DWORD *)(a1 + 12) - v6;
  uint64_t v9 = (v7 - 1) & v6;
  unsigned int v10 = v7 - v9;
  if (v8 >= a4) {
    uint64_t v11 = a4;
  }
  else {
    uint64_t v11 = v8;
  }
  if (v10 >= v8) {
    uint64_t v12 = v8;
  }
  else {
    uint64_t v12 = v10;
  }
  uint64_t v13 = *(void *)a1 + v9;
  if (v10 > v8 || v11 <= v12)
  {
    uint64_t v15 = a2(&v21, v13, v11);
    if ((v15 & 0x80000000) != 0) {
      return v15;
    }
    goto LABEL_18;
  }
  uint64_t v15 = a2(&v21, v13, v12);
  if ((v15 & 0x80000000) == 0)
  {
    int v16 = a2(&v21, *(void *)a1, (v11 - v12));
    int v17 = v16 >= 0 ? v15 : 0;
    uint64_t v15 = (v17 + v16);
    if ((v15 & 0x80000000) == 0)
    {
LABEL_18:
      int v18 = *(_DWORD *)(a1 + 12);
      int v19 = *(_DWORD *)(a1 + 16) + v11;
      *(_DWORD *)(a1 + 16) = v19;
      if (v19 == v18)
      {
        *(_DWORD *)(a1 + 12) = 0;
        *(_DWORD *)(a1 + 16) = 0;
      }
    }
  }
  return v15;
}

uint64_t TelephonyUtilRingBufferExtractRaw(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return TelephonyUtilRingBufferExtractPrivate(a1, (uint64_t (*)(uint64_t *, uint64_t, uint64_t))TelephonyUtilRingBufferExtractRawFunc, a2, a3);
}

size_t TelephonyUtilRingBufferExtractRawFunc(void **a1, const void *a2, size_t __n)
{
  *a1 = (char *)*a1 + __n;
  return __n;
}

uint64_t TelephonyUtilRingBufferExtractFD(uint64_t a1, int a2, unsigned int a3)
{
  return TelephonyUtilRingBufferExtractPrivate(a1, (uint64_t (*)(uint64_t *, uint64_t, uint64_t))TelephonyUtilRingBufferExtractFDFunc, a2, a3);
}

uint64_t TelephonyUtilRingBufferExtractFDFunc(int *a1, char *a2, size_t a3)
{
  int v3 = *a1;
  unsigned int v5 = -1431655766;
  LODWORD(result) = TelephonyUtilWriteToCompletion(v3, a2, a3, &v5);
  if (result) {
    return result;
  }
  else {
    return v5;
  }
}

uint64_t TelephonyUtilRingBufferSkip(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 12);
  int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = (v2 - v3);
  if (v4 <= a2 || (v5 = v3 + a2, *(_DWORD *)(a1 + 16) = v5, uint64_t v4 = a2, v5 == v2))
  {
    *(_DWORD *)(a1 + 12) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    return v4;
  }
  return a2;
}

uint64_t ctu::RestResourceBase::installSubResource()
{
  return 0;
}

uint64_t ctu::RestResource::handleRestMessage_GET(ctu::RestResource *this, ctu::RestResourceContext *a2, const ctu::PathView *a3)
{
  return 0;
}

uint64_t ctu::RestResource::handleRestMessage_SET(ctu::RestResource *this, ctu::RestResourceContext *a2, const ctu::PathView *a3)
{
  return 0;
}

uint64_t ctu::RestResource::handleRestMessage_PUSH(ctu::RestResource *this, ctu::RestResourceContext *a2, const ctu::PathView *a3)
{
  return 0;
}

uint64_t ctu::RestResource::handleRestMessage_POP(ctu::RestResource *this, ctu::RestResourceContext *a2, const ctu::PathView *a3)
{
  return 0;
}

uint64_t ctu::RestResource::handleRestMessage_NOTIFY(ctu::RestResource *this, ctu::RestResourceContext *a2, const ctu::PathView *a3)
{
  return 0;
}

const char *ctu::rest::asString(unsigned int a1)
{
  if (a1 > 2) {
    return "???";
  }
  else {
    return off_1E5744328[a1];
  }
}

double ctu::rest::AssertionHandle::AssertionHandle(ctu::rest::AssertionHandle *this, char a2)
{
  *((void *)this + 7) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0u;
  *(void *)&double result = 0x100000000;
  *((void *)this + 8) = 0x100000000;
  *((unsigned char *)this + 72) = a2;
  return result;
}

{
  double result;

  *((void *)this + 7) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0u;
  *(void *)&double result = 0x100000000;
  *((void *)this + 8) = 0x100000000;
  *((unsigned char *)this + 72) = a2;
  return result;
}

void ctu::rest::AssertionHandle::~AssertionHandle(ctu::rest::AssertionHandle *this)
{
  std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100]((void *)this + 4);
  int v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void ctu::rest::AssertionHandle::create(uint64_t a1@<X0>, const std::string *a2@<X1>, char a3@<W2>, void *a4@<X8>)
{
  *a4 = 0xAAAAAAAAAAAAAAAALL;
  a4[1] = 0xAAAAAAAAAAAAAAAALL;
  unsigned int v8 = (char *)operator new(0x68uLL);
  *((void *)v8 + 2) = 0;
  *((void *)v8 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
  *(void *)unsigned int v8 = &unk_1EE2F8AB0;
  *((void *)v8 + 10) = 0;
  *((void *)v8 + 5) = 0;
  *((void *)v8 + 6) = 0;
  *((void *)v8 + 1ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0x100000000;
  v8[96] = a3;
  *a4 = v8 + 24;
  a4[1] = v8;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v8 + 1, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit((atomic_ullong *volatile)v8 + 2, 1uLL, memory_order_relaxed);
  *((void *)v8 + 3) = v8 + 24;
  *((void *)v8 + 4) = v8;
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v8);
  atomic_fetch_add_explicit((atomic_ullong *volatile)v8 + 2, 1uLL, memory_order_relaxed);
  uint64_t v9 = (char *)operator new(0x50uLL);
  unsigned int v10 = v9;
  *((void *)v9 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
  *((void *)v9 + 2) = 0;
  *(void *)uint64_t v9 = &unk_1EE2F8A78;
  *(_OWORD *)(v9 + 24) = 0u;
  uint64_t v11 = (ctu::rest::AssertionHandle::SubscriptionHandle *)(v9 + 24);
  *(_OWORD *)(v9 + 40) = 0u;
  *(_OWORD *)(v9 + 56) = 0u;
  *((void *)v9 + 9) = 0;
  uint64_t v12 = *(std::__shared_weak_count **)(a1 + 8);
  if (v12)
  {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    uint64_t v13 = (std::__shared_weak_count *)*((void *)v10 + 4);
    *((void *)v10 + 3) = a1;
    *((void *)v10 + 4) = v12;
    if (v13) {
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  else
  {
    *((void *)v9 + 3) = a1;
    *((void *)v9 + 4) = 0;
  }
  unsigned int v14 = (std::__shared_weak_count *)*((void *)v10 + 6);
  *((void *)v10 + 5) = v8 + 24;
  *((void *)v10 + 6) = v8;
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  std::string::operator=((std::string *)(v10 + 56), a2);
  uint64_t v15 = (std::__shared_weak_count *)*((void *)v8 + 6);
  *((void *)v8 + 5) = v11;
  *((void *)v8 + 6) = v10;
  if (v15)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    uint64_t v11 = (ctu::rest::AssertionHandle::SubscriptionHandle *)*((void *)v8 + 5);
  }
  ctu::rest::AssertionHandle::SubscriptionHandle::subscribe(v11);
}

void sub_192060E98(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void ctu::rest::AssertionHandle::SubscriptionHandle::subscribe(ctu::rest::AssertionHandle::SubscriptionHandle *this)
{
  v9[4] = *MEMORY[0x1E4F143B8];
  int v2 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v2)
  {
    int v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      int v5 = *(uint64_t **)this;
      if (*(void *)this)
      {
        if (*((char *)this + 55) < 0) {
          std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 4), *((void *)this + 5));
        }
        else {
          std::string __p = *(std::string *)((char *)this + 32);
        }
        uint64_t v7 = *((void *)this + 2);
        uint64_t v6 = *((void *)this + 3);
        if (v6) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 16), 1uLL, memory_order_relaxed);
        }
        v9[0] = &unk_1EE2F84A8;
        v9[1] = v7;
        void v9[2] = v6;
        v9[3] = v9;
        ctu::RestModuleState::addSubscription(*v5, (uint64_t)&__p, (uint64_t)v9, 1);
        std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100](v9);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_192060FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void ctu::rest::AssertionHandle::updateState(ctu::rest::AssertionHandle *this, xpc_object_t *a2)
{
  ctu::rest::read_rest_value((_DWORD *)this + 16, a2);
  int v3 = *((_DWORD *)this + 17);
  if (v3)
  {
    if (v3 == 2)
    {
      uint64_t v4 = *((void *)this + 7);
      if (v4)
      {
        std::function<void ()(BOOL)>::operator()(v4, 1);
      }
    }
  }
  else
  {
    uint64_t v5 = *((void *)this + 7);
    if (v5) {
      std::function<void ()(BOOL)>::operator()(v5, 0);
    }
    if (*((unsigned char *)this + 72))
    {
      uint64_t v6 = (ctu::rest::AssertionHandle::SubscriptionHandle *)*((void *)this + 2);
      if (v6)
      {
        ctu::rest::AssertionHandle::SubscriptionHandle::subscribe(v6);
      }
    }
  }
}

void ctu::rest::read_rest_value(_DWORD *a1, xpc_object_t *a2)
{
  xpc_object_t v3 = *a2;
  xpc_object_t v10 = v3;
  uint64_t v4 = MEMORY[0x1E4F14590];
  if (v3 && MEMORY[0x192FEE1B0](v3) == v4)
  {
    xpc_retain(v3);
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    xpc_object_t v10 = v3;
  }
  if (MEMORY[0x192FEE1B0](v3) == v4)
  {
    uint64_t v7 = &v10;
    unsigned int v8 = "generation";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&v7, &object);
    *a1 = xpc::dyn_cast_or_default(&object, 0);
    xpc_release(object);
    uint64_t v7 = &v10;
    unsigned int v8 = "state";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&v7, &object);
    uint64_t v5 = MEMORY[0x192FEE1B0](object);
    if (v5 == MEMORY[0x1E4F145F0])
    {
      int v11 = a1[1];
      ctu::rest::detail::read_enum_string_value((ctu::rest::detail *)&v11, &object, v6);
      a1[1] = v11;
    }
    else if (v5 == MEMORY[0x1E4F14570] || v5 == MEMORY[0x1E4F145C0] || v5 == MEMORY[0x1E4F145F8])
    {
      a1[1] = xpc::dyn_cast_or_default(&object, 0);
    }
    xpc_release(object);
    xpc_object_t v3 = v10;
  }
  else
  {
    *(void *)a1 = 0;
  }
  xpc_release(v3);
}

void sub_192061218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t a12, xpc_object_t object)
{
}

uint64_t std::function<void ()(BOOL)>::operator()(uint64_t a1, char a2)
{
  char v3 = a2;
  if (!a1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, char *))(*(void *)a1 + 48))(a1, &v3);
}

void *ctu::rest::AssertionHandle::setHandler_impl(uint64_t a1, void *a2)
{
  void v10[3] = *MEMORY[0x1E4F143B8];
  char v3 = (void *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      uint64_t v9 = v8;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v8);
    }
    else
    {
      uint64_t v9 = (void *)(*(uint64_t (**)(void *))(*v3 + 16))(v3);
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v4 = a1 + 32;
  if (v8 != (void *)(a1 + 32))
  {
    uint64_t v5 = v9;
    uint64_t v6 = *(void *)(a1 + 56);
    if (v9 == v8)
    {
      if (v6 == v4)
      {
        memset(v10, 170, 24);
        (*(void (**)(void *, void *))(v8[0] + 24))(v8, v10);
        (*(void (**)(void *))(*v9 + 32))(v9);
        uint64_t v9 = 0;
        (*(void (**)(void, void *))(**(void **)(a1 + 56) + 24))(*(void *)(a1 + 56), v8);
        (*(void (**)(void))(**(void **)(a1 + 56) + 32))(*(void *)(a1 + 56));
        *(void *)(a1 + 56) = 0;
        uint64_t v9 = v8;
        (*(void (**)(void *, uint64_t))(v10[0] + 24))(v10, a1 + 32);
        (*(void (**)(void *))(v10[0] + 32))(v10);
      }
      else
      {
        (*(void (**)(void *, uint64_t))(v8[0] + 24))(v8, a1 + 32);
        (*(void (**)(void *))(*v9 + 32))(v9);
        uint64_t v9 = *(void **)(a1 + 56);
      }
      *(void *)(a1 + 56) = v4;
    }
    else if (v6 == v4)
    {
      (*(void (**)(uint64_t, void *))(*(void *)v4 + 24))(a1 + 32, v8);
      (*(void (**)(void))(**(void **)(a1 + 56) + 32))(*(void *)(a1 + 56));
      *(void *)(a1 + 56) = v9;
      uint64_t v9 = v8;
    }
    else
    {
      uint64_t v9 = *(void **)(a1 + 56);
      *(void *)(a1 + 56) = v5;
    }
  }
  return std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](v8);
}

void sub_1920615CC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void ctu::rest::AssertionHandle::cancel(ctu::rest::AssertionHandle *this)
{
  int v2 = (std::__shared_weak_count *)*((void *)this + 3);
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *((_DWORD *)this + 17) = 0;
}

void ctu::rest::write_rest_value(unsigned int *a1@<X0>, xpc_object_t *a2@<X8>)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    xpc_object_t v16 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t v16 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x192FEE1B0](v5) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  xpc_object_t v16 = v6;
LABEL_9:
  xpc_release(v5);
  xpc_object_t object = xpc_int64_create(*a1);
  if (!object) {
    xpc_object_t object = xpc_null_create();
  }
  uint64_t v12 = &v16;
  uint64_t v13 = "generation";
  xpc::dict::object_proxy::operator=((uint64_t)&v12, &object, &v15);
  xpc_release(v15);
  xpc_object_t v15 = 0;
  xpc_release(object);
  xpc_object_t object = 0;
  uint64_t v7 = (int)a1[1];
  if (v7 > 2) {
    unsigned int v8 = "???";
  }
  else {
    unsigned int v8 = off_1E5744328[v7];
  }
  xpc::string((xpc *)"%lld:%s", &v10, (int)a1[1], v8);
  uint64_t v12 = &v16;
  uint64_t v13 = "state";
  xpc::dict::object_proxy::operator=((uint64_t)&v12, &v10, &v11);
  xpc_release(v11);
  xpc_object_t v11 = 0;
  xpc_release(v10);
  xpc_object_t v10 = 0;
  xpc_object_t v9 = v16;
  *a2 = v16;
  if (v9) {
    xpc_retain(v9);
  }
  else {
    *a2 = xpc_null_create();
  }
  xpc_release(v16);
}

void sub_1920617AC(_Unwind_Exception *a1)
{
  xpc_release(*(xpc_object_t *)(v1 - 40));
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ctu::rest::AssertionHandle::SubscriptionHandle>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE2F8A78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ctu::rest::AssertionHandle::SubscriptionHandle>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE2F8A78;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<ctu::rest::AssertionHandle::SubscriptionHandle>::__on_zero_shared(uint64_t a1)
{
  int v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
  {
    char v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      xpc_object_t v4 = v3;
      xpc_object_t v5 = *(uint64_t **)(a1 + 24);
      if (v5)
      {
        if (*(char *)(a1 + 79) < 0) {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 56), *(void *)(a1 + 64));
        }
        else {
          std::string __p = *(std::string *)(a1 + 56);
        }
        ctu::RestModuleState::removeSubscription(*v5, (uint64_t)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  xpc_object_t v6 = *(std::__shared_weak_count **)(a1 + 48);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 32);
  if (v7)
  {
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_192061924(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  __clang_call_terminate(a1);
}

void *std::__function::__func<ctu::rest::AssertionHandle::SubscriptionHandle::subscribe(void)::{lambda(xpc::object)#1},std::allocator<ctu::rest::AssertionHandle::SubscriptionHandle::subscribe(void)::{lambda(xpc::object)#1}>,void ()(xpc::object)>::~__func(void *a1)
{
  *a1 = &unk_1EE2F84A8;
  int v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<ctu::rest::AssertionHandle::SubscriptionHandle::subscribe(void)::{lambda(xpc::object)#1},std::allocator<ctu::rest::AssertionHandle::SubscriptionHandle::subscribe(void)::{lambda(xpc::object)#1}>,void ()(xpc::object)>::~__func(void *__p)
{
  *std::string __p = &unk_1EE2F84A8;
  int v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void *std::__function::__func<ctu::rest::AssertionHandle::SubscriptionHandle::subscribe(void)::{lambda(xpc::object)#1},std::allocator<ctu::rest::AssertionHandle::SubscriptionHandle::subscribe(void)::{lambda(xpc::object)#1}>,void ()(xpc::object)>::__clone(uint64_t a1)
{
  double result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *double result = &unk_1EE2F84A8;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<ctu::rest::AssertionHandle::SubscriptionHandle::subscribe(void)::{lambda(xpc::object)#1},std::allocator<ctu::rest::AssertionHandle::SubscriptionHandle::subscribe(void)::{lambda(xpc::object)#1}>,void ()(xpc::object)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1EE2F84A8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<ctu::rest::AssertionHandle::SubscriptionHandle::subscribe(void)::{lambda(xpc::object)#1},std::allocator<ctu::rest::AssertionHandle::SubscriptionHandle::subscribe(void)::{lambda(xpc::object)#1}>,void ()(xpc::object)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<ctu::rest::AssertionHandle::SubscriptionHandle::subscribe(void)::{lambda(xpc::object)#1},std::allocator<ctu::rest::AssertionHandle::SubscriptionHandle::subscribe(void)::{lambda(xpc::object)#1}>,void ()(xpc::object)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<ctu::rest::AssertionHandle::SubscriptionHandle::subscribe(void)::{lambda(xpc::object)#1},std::allocator<ctu::rest::AssertionHandle::SubscriptionHandle::subscribe(void)::{lambda(xpc::object)#1}>,void ()(xpc::object)>::operator()(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v3 = *a2;
  xpc_object_t v8 = *a2;
  *a2 = xpc_null_create();
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    xpc_object_t v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      xpc_object_t v6 = v5;
      uint64_t v7 = *(ctu::rest::AssertionHandle **)(a1 + 8);
      if (v7) {
        ctu::rest::AssertionHandle::updateState(v7, &v8);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
  xpc_release(v3);
}

void sub_192061B58(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  xpc_release(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<ctu::rest::AssertionHandle::SubscriptionHandle::subscribe(void)::{lambda(xpc::object)#1},std::allocator<ctu::rest::AssertionHandle::SubscriptionHandle::subscribe(void)::{lambda(xpc::object)#1}>,void ()(xpc::object)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ctu::rest::AssertionHandle::SubscriptionHandle::subscribe(void)::{lambda(xpc::object)#1},std::allocator<ctu::rest::AssertionHandle::SubscriptionHandle::subscribe(void)::{lambda(xpc::object)#1}>,void ()(xpc::object)>::target_type()
{
}

void *std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__shared_ptr_emplace<ctu::rest::AssertionHandle>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE2F8AB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ctu::rest::AssertionHandle>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE2F8AB0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<ctu::rest::AssertionHandle>::__on_zero_shared(uint64_t a1)
{
}

uint64_t TelephonyUtilTransportFree(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(a1 + 48);
  if (!v1) {
    return 1;
  }
  uint64_t result = v1();
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = 0;
  return result;
}

BOOL _TelephonyUtilTransportFDIsValid(uint64_t a1)
{
  return **(_DWORD **)(a1 + 80) >= 0;
}

double TelephonyUtilTransportCreateWithFD(uint64_t a1, int a2)
{
  *(void *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  uint64_t v4 = malloc(0xCuLL);
  *(void *)(a1 + 80) = v4;
  if (v4)
  {
    xpc_object_t v11 = v4;
    if (pipe(v4 + 1) < 0)
    {
      uint64_t v13 = __error();
      unsigned int v14 = strerror(*v13);
      _TelephonyUtilDebugPrint((uint64_t)"TelephonyUtilTransportCreateWithFDPrivate", (uint64_t)"Failed to create pipe FD's, err = %s (%u)\n", v15, v16, v17, v18, v19, v20, (uint64_t)v14);
      free(v11);
      *(void *)(a1 + 80) = 0;
      double result = 0.0;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)(a1 + 64) = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)a1 = 0u;
    }
    else
    {
      _DWORD *v11 = a2;
      *(void *)a1 = _TelephonyUtilTransportFDWrite;
      *(void *)(a1 + 8) = _TelephonyUtilTransportFDRead;
      *(void *)(a1 + 16) = _TelephonyUtilTransportFDUnblockRead;
      *(void *)(a1 + 24) = _TelephonyUtilTransportFDFlushRead;
      *(void *)(a1 + 48) = TelephonyUtilTransportFreeFD;
      *(void *)(a1 + 56) = _TelephonyUtilTransportFDIsValid;
    }
  }
  else
  {
    _TelephonyUtilDebugPrint((uint64_t)"TelephonyUtilTransportCreateWithFD", (uint64_t)"Out of memory!\n", v5, v6, v7, v8, v9, v10, v21);
  }
  return result;
}

uint64_t _TelephonyUtilTransportFDWrite(uint64_t a1, void *__buf, size_t __nbyte, _DWORD *a4, int a5, uint64_t a6, uint64_t a7)
{
  if (a7) {
    __TUAssertTrigger("!dDtor");
  }
  int v8 = **(_DWORD **)(a1 + 80);
  if (!a5)
  {
    int v16 = write(v8, __buf, __nbyte);
    if (v16 < 0)
    {
      uint64_t v18 = __error();
      uint64_t v26 = strerror(*v18);
      _TelephonyUtilDebugPrint((uint64_t)"_TelephonyUtilTransportFDWrite", (uint64_t)"write returned %s (%u)\n", v19, v20, v21, v22, v23, v24, (uint64_t)v26);
      return 0;
    }
    *a4 = v16;
    return 1;
  }
  int v9 = TelephonyUtilWriteToCompletion(v8, (char *)__buf, __nbyte, a4);
  if (!v9) {
    return 1;
  }
  long long v25 = strerror(v9);
  _TelephonyUtilDebugPrint((uint64_t)"_TelephonyUtilTransportFDWrite", (uint64_t)"write to completion returned %s (%u)\n", v10, v11, v12, v13, v14, v15, (uint64_t)v25);
  return 0;
}

uint64_t _TelephonyUtilTransportFDRead(uint64_t a1, char *a2, unsigned int a3, unsigned int *a4, int a5, unsigned int a6, uint64_t a7)
{
  unsigned int v9 = a3;
  uint64_t v10 = a2;
  if (a7) {
    __TUAssertTrigger("!dDtor");
  }
  uint64_t v11 = *(void *)(a1 + 80);
  int v12 = *(_DWORD *)v11;
  unsigned int v13 = *(_DWORD *)(v11 + 4);
  if (a5)
  {
    unsigned int v14 = a3;
    while (v14)
    {
      int v15 = TelephonyUtilUnblockableReadWithTimeout(v12, v13, v10, v14, a6);
      v10 += v15;
      v14 -= v15;
      if (v15 <= 0) {
        goto LABEL_11;
      }
    }
  }
  else
  {
    unsigned int v16 = TelephonyUtilUnblockableReadWithTimeout(*(_DWORD *)v11, *(_DWORD *)(v11 + 4), a2, a3, a6);
    if ((v16 & 0x80000000) != 0)
    {
LABEL_11:
      uint64_t v18 = __error();
      uint64_t v19 = strerror(*v18);
      _TelephonyUtilDebugPrint((uint64_t)"_TelephonyUtilTransportFDRead", (uint64_t)"read returned %s (%u)\n", v20, v21, v22, v23, v24, v25, (uint64_t)v19);
      uint64_t result = 0;
      unsigned int v9 = 0;
      goto LABEL_12;
    }
    unsigned int v9 = v16;
  }
  uint64_t result = 1;
LABEL_12:
  *a4 = v9;
  return result;
}

BOOL _TelephonyUtilTransportFDUnblockRead(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 80);
  char __buf = 0;
  return write(*(_DWORD *)(v1 + 8), &__buf, 1uLL) == 1;
}

uint64_t _TelephonyUtilTransportFDFlushRead(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  memset(__b, 170, sizeof(__b));
  do
  {
    unsigned int v3 = -1431655766;
    uint64_t result = _TelephonyUtilTransportFDRead(a1, __b, 0x400u, &v3, 0, 0, 0);
  }
  while ((result & 1) != 0 && v3);
  return result;
}

uint64_t TelephonyUtilTransportFreeFD(uint64_t a1)
{
  uint64_t v1 = *(_DWORD **)(a1 + 80);
  if (v1)
  {
    int v2 = v1[2];
    if (v2 >= 1)
    {
      close(v2);
      v1[2] = -1;
    }
    int v3 = v1[1];
    if (v3 >= 1) {
      close(v3);
    }
    free(v1);
  }
  return 1;
}

BOOL ctu::isProcessRunning(const void **a1)
{
  __std::string::size_type size = 0;
  if (!sysctl(ctu::isProcessRunning(std::string const&)::kNames, 3u, 0, &__size, 0, 0))
  {
    uint64_t v10 = (char *)malloc(__size);
    if (!v10)
    {
      int v8 = "malloc failed for proc list";
      goto LABEL_3;
    }
    uint64_t v11 = v10;
    if (sysctl(ctu::isProcessRunning(std::string const&)::kNames, 3u, v10, &__size, 0, 0))
    {
      int v12 = __error();
      _TelephonyUtilDebugPrint((uint64_t)"isProcessRunning", (uint64_t)"second sysctl() failed with err = %d", v13, v14, v15, v16, v17, v18, *v12);
    }
    else if (__size >= 0x288)
    {
      uint64_t v19 = 0;
      size_t v20 = __size / 0x288;
      size_t v35 = __size / 0x288;
      if (__size / 0x288 <= 1) {
        size_t v20 = 1;
      }
      size_t v34 = v20;
      uint64_t v21 = v11 + 243;
      BOOL v9 = 1;
      do
      {
        memset(v36, 170, sizeof(v36));
        std::string::basic_string[abi:ne180100]<0>(v36, v21);
        int v22 = SHIBYTE(v36[2]);
        uint64_t v23 = (void *)v36[0];
        if (v36[2] >= 0) {
          size_t v24 = HIBYTE(v36[2]);
        }
        else {
          size_t v24 = v36[1];
        }
        int v25 = *((char *)a1 + 23);
        if (v25 < 0)
        {
          if (v24 == -1) {
LABEL_42:
          }
            std::string::__throw_out_of_range[abi:ne180100]();
          uint64_t v27 = *a1;
          if ((unint64_t)a1[1] >= 0x10) {
            unint64_t v26 = 16;
          }
          else {
            unint64_t v26 = (unint64_t)a1[1];
          }
        }
        else
        {
          if (v24 == -1) {
            goto LABEL_42;
          }
          if ((v25 & 0xF0) != 0) {
            unint64_t v26 = 16;
          }
          else {
            unint64_t v26 = *((unsigned __int8 *)a1 + 23);
          }
          uint64_t v27 = a1;
        }
        if (v36[2] >= 0) {
          uint64_t v28 = v36;
        }
        else {
          uint64_t v28 = (void *)v36[0];
        }
        if (v26 >= v24) {
          size_t v29 = v24;
        }
        else {
          size_t v29 = v26;
        }
        BOOL v30 = memcmp(v27, v28, v29) == 0;
        BOOL v31 = v26 == v24 && v30;
        if (v22 < 0) {
          operator delete(v23);
        }
        if (v31) {
          break;
        }
        BOOL v9 = ++v19 < v35;
        v21 += 648;
      }
      while (v34 != v19);
      goto LABEL_40;
    }
    BOOL v9 = 0;
LABEL_40:
    free(v11);
    return v9;
  }
  uint64_t v33 = *__error();
  int v8 = "first sysctl() failed with err = %d";
LABEL_3:
  _TelephonyUtilDebugPrint((uint64_t)"isProcessRunning", (uint64_t)v8, v2, v3, v4, v5, v6, v7, v33);
  return 0;
}

void sub_192062394(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TelephonyUtilDebugSetFlags(uint64_t result)
{
  _TelephonyUtilDebugFlags = result;
  return result;
}

__n128 TelephonyUtilDebugRegisterDelegate(__n128 *a1)
{
  __n128 result = *a1;
  gDelegate = *a1;
  return result;
}

double TelephonyUtilDebugSetDefaults()
{
  double result = *(double *)&gDelegateDefault;
  gDelegate = gDelegateDefault;
  _TelephonyUtilDebugFlags = 10;
  return result;
}

uint64_t _TelephonyUtilDebugPrintBinary()
{
  if ((_TelephonyUtilDebugFlags & 8) != 0) {
    return off_1EB4652D0();
  }
  return result;
}

uint64_t _TelephonyUtilUARTTransportConfigureFlowControl(uint64_t a1, int a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(int **)(a1 + 80);
  uint64_t v26 = 0;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  if (ioctl(*v3, 0x40487413uLL, &v22))
  {
    uint64_t v4 = __error();
    size_t v20 = strerror(*v4);
    _TelephonyUtilDebugPrint((uint64_t)"_TelephonyUtilUARTTransportConfigureFlowControl", (uint64_t)"Failed to get termios options, ret = %s (%u)\n", v5, v6, v7, v8, v9, v10, (uint64_t)v20);
    return 0;
  }
  *(void *)&long long v22 = v22 & 0xFFFFFFFFFFFFF0CCLL | 1;
  *((void *)&v22 + 1) &= ~1uLL;
  uint64_t v11 = 51968;
  if (a2) {
    uint64_t v11 = 248576;
  }
  *(void *)&long long v23 = v23 & 0xFFFFFFFFFFFC20FFLL | v11;
  *((void *)&v23 + 1) &= 0xFFFFFFFFFFFFFA77;
  if (ioctl(*v3, 0x80487414uLL, &v22))
  {
    int v12 = __error();
    uint64_t v21 = strerror(*v12);
    _TelephonyUtilDebugPrint((uint64_t)"_TelephonyUtilUARTTransportConfigureFlowControl", (uint64_t)"Failed to set termios options, ret = %s (%u)\n", v13, v14, v15, v16, v17, v18, (uint64_t)v21);
    return 0;
  }
  return 1;
}

BOOL _TelephonyUtilUARTTransportConfigureBaudRate(uint64_t a1, unsigned int a2)
{
  unsigned int v12 = a2;
  int v2 = ioctl(**(_DWORD **)(a1 + 80), 0x80085402uLL, &v12);
  if (v2)
  {
    uint64_t v3 = __error();
    uint64_t v4 = v12;
    strerror(*v3);
    _TelephonyUtilDebugPrint((uint64_t)"_TelephonyUtilUARTTransportConfigureBaudRate", (uint64_t)"Failed to configure baud of %u, err = %s (%u)\n", v5, v6, v7, v8, v9, v10, v4);
  }
  return v2 == 0;
}

BOOL _TelephonyUtilUARTTransportConfigureVMIN(uint64_t a1, unsigned int a2)
{
  unsigned int v12 = a2;
  int v2 = ioctl(**(_DWORD **)(a1 + 80), 0x80085408uLL, &v12);
  if (v2)
  {
    uint64_t v3 = __error();
    uint64_t v4 = v12;
    strerror(*v3);
    _TelephonyUtilDebugPrint((uint64_t)"_TelephonyUtilUARTTransportConfigureVMIN", (uint64_t)"Failed to configure VMIN of %u, err = %s (%u)\n", v5, v6, v7, v8, v9, v10, v4);
  }
  return v2 == 0;
}

BOOL _TelephonyUtilUARTTransportConfigureRxQueueSize(uint64_t a1, unsigned int a2)
{
  unsigned int v12 = a2;
  int v2 = ioctl(**(_DWORD **)(a1 + 80), 0x80085409uLL, &v12);
  if (v2)
  {
    uint64_t v3 = __error();
    uint64_t v4 = v12;
    strerror(*v3);
    _TelephonyUtilDebugPrint((uint64_t)"_TelephonyUtilUARTTransportConfigureRxQueueSize", (uint64_t)"Failed to configure RX Queue size of %u, err = %s (%u)\n", v5, v6, v7, v8, v9, v10, v4);
  }
  return v2 == 0;
}

BOOL _TelephonyUtilUARTTransportWrite(uint64_t a1, char *__buf, size_t __nbyte, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a7) {
    __TUAssertTrigger("!dDtor");
  }
  int v7 = TelephonyUtilWriteToCompletion(**(_DWORD **)(a1 + 80), __buf, __nbyte, a4);
  int v8 = v7;
  if (v7)
  {
    uint64_t v9 = strerror(v7);
    _TelephonyUtilDebugPrint((uint64_t)"_TelephonyUtilUARTTransportWrite", (uint64_t)"write to completion returned %s (%u)\n", v10, v11, v12, v13, v14, v15, (uint64_t)v9);
  }
  return v8 == 0;
}

uint64_t TelephonyUtilTransportCreateWithUARTTimeout(uint64_t (**a1)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, char a5, int a6, uint64_t a7), unsigned int *a2)
{
  uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t, int, uint64_t, char, int, uint64_t))malloc(0x200uLL);
  a1[10] = v4;
  if (v4)
  {
    uint64_t v11 = v4;
    _TelephonyUtilDebugPrint((uint64_t)"TelephonyUtilTransportCreateWithUARTTimeout", (uint64_t)"Creating with baud %u, Rx Queue size %u, local queue size %u\n", v5, v6, v7, v8, v9, v10, a2[64]);
    *((_OWORD *)v11 + 30) = 0u;
    *((_OWORD *)v11 + 3ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0u;
    *((_OWORD *)v11 + 28) = 0u;
    *((_OWORD *)v11 + 29) = 0u;
    *((_OWORD *)v11 + 26) = 0u;
    *((_OWORD *)v11 + 27) = 0u;
    *((_OWORD *)v11 + 24) = 0u;
    *((_OWORD *)v11 + 25) = 0u;
    *((_OWORD *)v11 + 22) = 0u;
    *((_OWORD *)v11 + 23) = 0u;
    *((_OWORD *)v11 + 20) = 0u;
    *((_OWORD *)v11 + 2ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0u;
    *((_OWORD *)v11 + 18) = 0u;
    *((_OWORD *)v11 + 19) = 0u;
    *((_OWORD *)v11 + 16) = 0u;
    *((_OWORD *)v11 + 17) = 0u;
    *((_OWORD *)v11 + 14) = 0u;
    *((_OWORD *)v11 + 15) = 0u;
    *((_OWORD *)v11 + 12) = 0u;
    *((_OWORD *)v11 + 13) = 0u;
    *((_OWORD *)v11 + 10) = 0u;
    *((_OWORD *)v11 + 1ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0u;
    *((_OWORD *)v11 + 8) = 0u;
    *((_OWORD *)v11 + 9) = 0u;
    *((_OWORD *)v11 + 6) = 0u;
    *((_OWORD *)v11 + 7) = 0u;
    *((_OWORD *)v11 + 4) = 0u;
    *((_OWORD *)v11 + 5) = 0u;
    *((_OWORD *)v11 + 2) = 0u;
    *((_OWORD *)v11 + 3) = 0u;
    *(_OWORD *)uint64_t v11 = 0u;
    *((_OWORD *)v11 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0u;
    *a1 = _TelephonyUtilUARTTransportWithTimeoutWrite;
    a1[1] = (uint64_t (*)(uint64_t, uint64_t, int, uint64_t, char, int, uint64_t))_TelephonyUtilUARTTransportWithTimeoutRead;
    a1[2] = (uint64_t (*)(uint64_t, uint64_t, int, uint64_t, char, int, uint64_t))_TelephonyUtilUARTTransportWithTimeoutUnblockRead;
    a1[3] = (uint64_t (*)(uint64_t, uint64_t, int, uint64_t, char, int, uint64_t))_TelephonyUtilUARTTransportWithTimeoutFlushRead;
    a1[6] = (uint64_t (*)(uint64_t, uint64_t, int, uint64_t, char, int, uint64_t))_TelephonyUtilUARTTransportWithTimeoutFree;
    a1[7] = (uint64_t (*)(uint64_t, uint64_t, int, uint64_t, char, int, uint64_t))_TelephonyUtilUARTTransportWithTimeoutIsValid;
    pthread_mutex_init((pthread_mutex_t *)((char *)v11 + 280), 0);
    pthread_mutex_lock((pthread_mutex_t *)((char *)v11 + 280));
    pthread_cond_init((pthread_cond_t *)((char *)v11 + 344), 0);
    pthread_cond_init((pthread_cond_t *)((char *)v11 + 416), 0);
    memcpy((char *)v11 + 8, a2, 0x110uLL);
    uint64_t Internal = _TelephonyUtilTransportUARTWithTimeoutCreateInternal(a1, v12, v13, v14, v15, v16, v17, v18);
    pthread_mutex_unlock((pthread_mutex_t *)((char *)v11 + 280));
    return Internal;
  }
  else
  {
    _TelephonyUtilDebugPrint((uint64_t)"TelephonyUtilTransportCreateWithUARTTimeout", (uint64_t)"Out of memory!\n", v5, v6, v7, v8, v9, v10, v21);
    return 0;
  }
}

uint64_t _TelephonyUtilUARTTransportWithTimeoutWrite(uint64_t a1, uint64_t a2, int a3, uint64_t a4, char a5, int a6, uint64_t a7)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (a7) {
    __TUAssertTrigger("!dDtor");
  }
  uint64_t v12 = *(void *)(a1 + 80);
  pthread_mutex_lock((pthread_mutex_t *)(v12 + 280));
  *(void *)&long long v13 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v13 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
  int v20 = -1431655766;
  v22[0] = v13;
  v22[2] = v13;
  long long v23 = v13;
  v22[1] = v13;
  uint64_t v18 = a2;
  int v19 = a3;
  uint64_t v21 = a4;
  LOBYTE(v22[0]) = a5;
  DWORD1(v22[0]) = a6;
  BYTE8(v23) = 0;
  uint64_t v24 = 0;
  pthread_cond_init((pthread_cond_t *)((char *)v22 + 8), 0);
  uint64_t v14 = *(void *)(v12 + 464);
  if (v14)
  {
    do
    {
      uint64_t v15 = v14;
      uint64_t v14 = *(void *)(v14 + 88);
    }
    while (v14);
    uint64_t v16 = (void *)(v15 + 88);
  }
  else
  {
    uint64_t v16 = (void *)(v12 + 464);
  }
  *uint64_t v16 = &v18;
  pthread_cond_signal((pthread_cond_t *)(v12 + 416));
  while (v18)
    pthread_cond_wait((pthread_cond_t *)((char *)v22 + 8), (pthread_mutex_t *)(v12 + 280));
  pthread_cond_destroy((pthread_cond_t *)((char *)v22 + 8));
  pthread_mutex_unlock((pthread_mutex_t *)(v12 + 280));
  return BYTE8(v23);
}

BOOL _TelephonyUtilUARTTransportWithTimeoutRead(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int *a4, int a5, unsigned int a6, uint64_t a7)
{
  unsigned int v9 = a3;
  if (a7) {
    __TUAssertTrigger("!dDtor");
  }
  if (a5) {
    unsigned int v11 = a3;
  }
  else {
    unsigned int v11 = 1;
  }
  uint64_t v12 = *(void *)(a1 + 80);
  v23.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v23.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  if (a6 != -1)
  {
    v23.tv_sec = a6 / 0x3E8uLL;
    v23.tv_nsec = 1000000 * (a6 % 0x3E8);
  }
  *a4 = 0;
  pthread_mutex_lock((pthread_mutex_t *)(v12 + 280));
  if (*a4 < v11)
  {
    do
    {
      ++*(_DWORD *)(v12 + 504);
      do
      {
        while (1)
        {
          int v13 = *(_DWORD *)(v12 + 392);
          int v14 = v13 & 4;
          if (*(_DWORD *)(v12 + 492) != *(_DWORD *)(v12 + 496) || v14 != 0)
          {
            int v16 = 0;
            goto LABEL_19;
          }
          if (a6 != -1) {
            break;
          }
          pthread_cond_wait((pthread_cond_t *)(v12 + 344), (pthread_mutex_t *)(v12 + 280));
        }
      }
      while (!pthread_cond_timedwait_relative_np((pthread_cond_t *)(v12 + 344), (pthread_mutex_t *)(v12 + 280), &v23));
      int v13 = *(_DWORD *)(v12 + 392);
      int v14 = v13 & 4;
      int v16 = 1;
LABEL_19:
      int v17 = *(_DWORD *)(v12 + 504);
      if (v14) {
        int v18 = 1;
      }
      else {
        int v18 = v16;
      }
      *(_DWORD *)(v12 + 504) = v17 - 1;
      if (v17 == 1) {
        *(_DWORD *)(v12 + 392) = v13 & 0xFFFFFFFB;
      }
      unsigned int Raw = TelephonyUtilRingBufferExtractRaw(v12 + 480, a2, v9);
      v9 -= Raw;
      a2 += Raw;
      unsigned int v20 = *a4 + Raw;
      *a4 = v20;
      if (v20 >= v11) {
        int v21 = 1;
      }
      else {
        int v21 = v18;
      }
    }
    while (v21 != 1);
  }
  pthread_mutex_unlock((pthread_mutex_t *)(v12 + 280));
  return *a4 >= v11;
}

uint64_t _TelephonyUtilUARTTransportWithTimeoutUnblockRead(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 80);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 280));
  *(_DWORD *)(v1 + 392) |= 4u;
  pthread_cond_signal((pthread_cond_t *)(v1 + 344));
  pthread_mutex_unlock((pthread_mutex_t *)(v1 + 280));
  return 1;
}

uint64_t _TelephonyUtilUARTTransportWithTimeoutFlushRead(void *a1)
{
  int v2 = (pthread_mutex_t *)(a1[10] + 280);
  pthread_mutex_lock(v2);
  _TelephonyUtilDebugPrint((uint64_t)"_TelephonyUtilUARTTransportWithTimeoutFlushRead", (uint64_t)"Flushing\n", v3, v4, v5, v6, v7, v8, v18);
  _TelephonyUtilUARTTransportWithTimeoutFreeInternal((uint64_t)a1);
  uint64_t Internal = _TelephonyUtilTransportUARTWithTimeoutCreateInternal(a1, v9, v10, v11, v12, v13, v14, v15);
  pthread_mutex_unlock(v2);
  return Internal;
}

uint64_t _TelephonyUtilUARTTransportWithTimeoutFree(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 80);
  if (v8)
  {
    _TelephonyUtilDebugPrint((uint64_t)"_TelephonyUtilUARTTransportWithTimeoutFree", (uint64_t)"Freeing\n", a3, a4, a5, a6, a7, a8, v11);
    pthread_mutex_lock((pthread_mutex_t *)(v8 + 280));
    _TelephonyUtilUARTTransportWithTimeoutFreeInternal(a1);
    pthread_cond_destroy((pthread_cond_t *)(v8 + 344));
    pthread_cond_destroy((pthread_cond_t *)(v8 + 416));
    pthread_mutex_unlock((pthread_mutex_t *)(v8 + 280));
    pthread_mutex_destroy((pthread_mutex_t *)(v8 + 280));
    free((void *)v8);
  }
  return 1;
}

uint64_t _TelephonyUtilUARTTransportWithTimeoutIsValid(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 80);
  if (v1)
  {
    int v2 = (pthread_mutex_t *)(v1 + 280);
    pthread_mutex_lock((pthread_mutex_t *)(v1 + 280));
    if (*(void *)(v1 + 400)) {
      uint64_t v1 = *(void *)(v1 + 408) != 0;
    }
    else {
      uint64_t v1 = 0;
    }
    pthread_mutex_unlock(v2);
  }
  return v1;
}

uint64_t _TelephonyUtilTransportUARTWithTimeoutCreateInternal(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = a1[10];
  *(_DWORD *)(v8 + 392) = 0;
  uint64_t v9 = *(unsigned int *)(v8 + 272);
  if (v9 > 0x20000)
  {
    _TelephonyUtilDebugPrint((uint64_t)"_TelephonyUtilTransportUARTWithTimeoutCreateInternal", (uint64_t)"Receive queue size %u exceeds max %u\n", a3, a4, a5, a6, a7, a8, *(unsigned int *)(v8 + 272));
    return 0;
  }
  uint64_t result = (uint64_t)malloc(*(unsigned int *)(v8 + 272));
  *(void *)(v8 + 472) = result;
  if (!result) {
    return result;
  }
  uint64_t result = TelephonyUtilRingBufferInitialize(v8 + 480, result, v9, v12, v13, v14, v15, v16, v17);
  if (!result) {
    return result;
  }
  *(void *)&long long v18 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v18 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v57 = v18;
  long long v58 = v18;
  long long v55 = v18;
  long long v56 = v18;
  long long v53 = v18;
  long long v54 = v18;
  long long v51 = v18;
  long long v52 = v18;
  long long v49 = v18;
  long long v50 = v18;
  long long v47 = v18;
  long long v48 = v18;
  long long v45 = v18;
  long long v46 = v18;
  *(_OWORD *)std::string __str = v18;
  long long v44 = v18;
  if (!*(unsigned char *)(v8 + 8) || !strcmp((const char *)(v8 + 8), "debug")) {
    strncpy(__str, "/dev/uart.debug", 0x100uLL);
  }
  else {
    snprintf(__str, 0x100uLL, "%s", (const char *)(v8 + 8));
  }
  *(_DWORD *)(v8 + 4) = 1;
  int v19 = open(__str, 2);
  *(_DWORD *)uint64_t v8 = v19;
  if (v19 <= 0)
  {
    uint64_t v27 = __error();
    strerror(*v27);
    _TelephonyUtilDebugPrint((uint64_t)"_TelephonyUtilTransportUARTWithTimeoutCreateInternal", (uint64_t)"failed to open node (%s), ret = %s(%u)\n", v28, v29, v30, v31, v32, v33, (uint64_t)__str);
    return 0;
  }
  uint64_t result = _TelephonyUtilUARTTransportConfigureFlowControl((uint64_t)a1, *(unsigned char *)(v8 + 276) == 0);
  if (result)
  {
    uint64_t result = _TelephonyUtilUARTTransportConfigureVMIN((uint64_t)a1, 1u);
    if (result)
    {
      uint64_t result = _TelephonyUtilUARTTransportConfigureBaudRate((uint64_t)a1, *(_DWORD *)(v8 + 264));
      if (result)
      {
        uint64_t result = _TelephonyUtilUARTTransportConfigureRxQueueSize((uint64_t)a1, *(_DWORD *)(v8 + 268));
        if (result)
        {
          if (pthread_create((pthread_t *)(v8 + 400), 0, (void *(__cdecl *)(void *))_TelephonyUtilUARTTransportWithTimeoutReadWorker, a1))
          {
            unsigned int v20 = __error();
            unsigned int v41 = strerror(*v20);
            _TelephonyUtilDebugPrint((uint64_t)"_TelephonyUtilTransportUARTWithTimeoutCreateInternal", (uint64_t)"Failed to launch read worker, ret = %s(%u)\n", v21, v22, v23, v24, v25, v26, (uint64_t)v41);
          }
          else
          {
            if (!pthread_create((pthread_t *)(v8 + 408), 0, (void *(__cdecl *)(void *))_TelephonyUtilUARTTransportWithTimeoutWriteWorker, a1))return 1; {
            size_t v34 = __error();
            }
            long long v42 = strerror(*v34);
            _TelephonyUtilDebugPrint((uint64_t)"_TelephonyUtilTransportUARTWithTimeoutCreateInternal", (uint64_t)"Failed to launch write worker, ret = %s(%u)\n", v35, v36, v37, v38, v39, v40, (uint64_t)v42);
          }
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t _TelephonyUtilUARTTransportWithTimeoutFreeInternal(uint64_t a1)
{
  uint64_t v1 = *(unsigned int **)(a1 + 80);
  v1[98] |= 3u;
  _TelephonyUtilUARTTransportConfigureVMIN(a1, 0);
  pthread_cond_signal((pthread_cond_t *)(v1 + 104));
  pthread_mutex_unlock((pthread_mutex_t *)(v1 + 70));
  uint64_t v13 = (void *)0xAAAAAAAAAAAAAAAALL;
  pthread_join(*((pthread_t *)v1 + 51), &v13);
  pthread_join(*((pthread_t *)v1 + 50), &v13);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 70));
  int v2 = (void *)*((void *)v1 + 59);
  if (v2) {
    free(v2);
  }
  for (uint64_t i = *((void *)v1 + 58); i; *((void *)v1 + 58) = i)
  {
    *(void *)uint64_t i = 0;
    *(unsigned char *)(i + 80) = 0;
    pthread_cond_signal((pthread_cond_t *)(i + 32));
    uint64_t i = *(void *)(*((void *)v1 + 58) + 88);
  }
  uint64_t result = *v1;
  if ((int)result >= 1)
  {
    uint64_t result = close(result);
    if (result)
    {
      uint64_t v5 = __error();
      uint64_t v6 = strerror(*v5);
      return _TelephonyUtilDebugPrint((uint64_t)"_TelephonyUtilUARTTransportWithTimeoutFreeInternal", (uint64_t)"Failed to close, err = %s(%u)\n", v7, v8, v9, v10, v11, v12, (uint64_t)v6);
    }
  }
  return result;
}

uint64_t _TelephonyUtilUARTTransportWithTimeoutReadWorker()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(v0 + 80);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 280));
  int v2 = *(_DWORD *)(v1 + 392);
  do
  {
    if ((v2 & 2) != 0) {
      break;
    }
    memset(__b, 170, sizeof(__b));
    unsigned int v3 = *(_DWORD *)(v1 + 488) - *(_DWORD *)(v1 + 492) + *(_DWORD *)(v1 + 496);
    size_t v4 = v3 >= 0x1000 ? 4096 : v3;
    pthread_mutex_unlock((pthread_mutex_t *)(v1 + 280));
    LODWORD(v4) = read(**(_DWORD **)(v0 + 80), __b, v4);
    pthread_mutex_lock((pthread_mutex_t *)(v1 + 280));
    if ((v4 & 0x80000000) != 0) {
      break;
    }
    unsigned int v5 = *(_DWORD *)(v1 + 492);
    int v6 = *(_DWORD *)(v1 + 488);
    uint64_t v7 = (v6 - 1) & v5;
    unsigned int v8 = *(_DWORD *)(v1 + 496);
    BOOL v9 = v7 > ((v6 - 1) & v8) || v8 == v5;
    int v10 = v9 ? *(_DWORD *)(v1 + 488) : (v6 - 1) & v8;
    unsigned int v11 = v10 - v7;
    size_t v4 = v11 >= v4 ? v4 : v11;
    memcpy((void *)(*(void *)(v1 + 480) + v7), __b, v4);
    *(_DWORD *)(v1 + 492) += v4;
    pthread_cond_broadcast((pthread_cond_t *)(v1 + 344));
    int v2 = *(_DWORD *)(v1 + 392);
  }
  while ((v2 & 2) == 0);
  pthread_mutex_unlock((pthread_mutex_t *)(v1 + 280));
  return 0;
}

uint64_t _TelephonyUtilUARTTransportWithTimeoutWriteWorker(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  pthread_mutex_lock((pthread_mutex_t *)(v2 + 280));
  while (1)
  {
    while (1)
    {
      uint64_t v3 = *(void *)(v2 + 464);
      if (v3) {
        goto LABEL_6;
      }
      if ((*(unsigned char *)(v2 + 392) & 2) != 0) {
        break;
      }
      pthread_cond_wait((pthread_cond_t *)(v2 + 416), (pthread_mutex_t *)(v2 + 280));
    }
    uint64_t v3 = 0;
LABEL_6:
    if ((*(unsigned char *)(v2 + 392) & 2) != 0) {
      break;
    }
    *(void *)(v2 + 464) = *(void *)(v3 + 88);
    *(unsigned char *)(v3 + 80) = _TelephonyUtilUARTTransportWrite(a1, *(char **)v3, *(unsigned int *)(v3 + 8), *(_DWORD **)(v3 + 16), *(unsigned __int8 *)(v3 + 24), 0xFFFFFFFFLL, 0);
    *(void *)uint64_t v3 = 0;
    pthread_cond_broadcast((pthread_cond_t *)(v3 + 32));
  }
  pthread_mutex_unlock((pthread_mutex_t *)(v2 + 280));
  return 0;
}

BOOL TelephonyUtilTransportCreateWithFile(uint64_t a1, char *__filename, char *__mode)
{
  unsigned int v5 = fopen(__filename, __mode);
  int v6 = v5;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = 0;
  if (v5)
  {
    *(void *)(a1 + 80) = v5;
    *(void *)a1 = _TelephonyUtilTransportFileWrite;
    *(void *)(a1 + 8) = _TelephonyUtilTransportFileRead;
    *(void *)(a1 + 16) = _TelephonyUtilTransportFileUnblockRead;
    *(void *)(a1 + 24) = _TelephonyUtilTransportFileFlushRead;
    *(void *)(a1 + 48) = TelephonyUtilTransportFileFree;
    *(void *)(a1 + 56) = _TelephonyUtilTransportFileIsValid;
  }
  else
  {
    uint64_t v7 = __error();
    strerror(*v7);
    _TelephonyUtilDebugPrint((uint64_t)"TelephonyUtilTransportCreateWithFile", (uint64_t)"Failed to open file %s, args %s, err = %s (%u)\n", v8, v9, v10, v11, v12, v13, (uint64_t)__filename);
  }
  return v6 != 0;
}

uint64_t _TelephonyUtilTransportFileWrite(uint64_t a1, void *__ptr, size_t __size, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v8 = __size;
  if (a7) {
    __TUAssertTrigger("!dDtor");
  }
  uint64_t v9 = *(FILE **)(a1 + 80);
  *a4 = 0;
  if (__size)
  {
    if (fwrite(__ptr, __size, 1uLL, v9) != 1)
    {
      _TelephonyUtilDebugPrint((uint64_t)"_TelephonyUtilTransportFileWrite", (uint64_t)"Failed to write\n", v10, v11, v12, v13, v14, v15, v24);
      return 0;
    }
    if (fflush(v9))
    {
      uint64_t v16 = __error();
      uint64_t v25 = strerror(*v16);
      _TelephonyUtilDebugPrint((uint64_t)"_TelephonyUtilTransportFileWrite", (uint64_t)"failed to flush, err = %s (%u)\n", v17, v18, v19, v20, v21, v22, (uint64_t)v25);
      return 0;
    }
    *a4 = v8;
  }
  return 1;
}

uint64_t _TelephonyUtilTransportFileRead(uint64_t a1, char *__ptr, size_t __nitems, _DWORD *a4, char a5, uint64_t a6, uint64_t a7)
{
  unsigned int v9 = __nitems;
  if (a7) {
    __TUAssertTrigger("!dDtor");
  }
  uint64_t v11 = *(FILE **)(a1 + 80);
  *a4 = 0;
  while (1)
  {
    size_t v12 = fread(__ptr, 1uLL, v9, v11);
    if (!v12) {
      break;
    }
    size_t v13 = v12;
    *a4 += v12;
    uint64_t result = 1;
    v9 -= v13;
    if (v9)
    {
      __ptr += v13;
      if (a5) {
        continue;
      }
    }
    return result;
  }
  if (feof(v11)) {
    return 1;
  }
  uint64_t v15 = __error();
  uint64_t v16 = strerror(*v15);
  _TelephonyUtilDebugPrint((uint64_t)"_TelephonyUtilTransportFileRead", (uint64_t)"failed to read, err = %s (%u)\n", v17, v18, v19, v20, v21, v22, (uint64_t)v16);
  uint64_t result = 0;
  *a4 = 0;
  return result;
}

uint64_t _TelephonyUtilTransportFileUnblockRead(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _TelephonyUtilDebugPrint((uint64_t)"_TelephonyUtilTransportFileUnblockRead", (uint64_t)"Not Supported\n", a3, a4, a5, a6, a7, a8, vars0);
  return 0;
}

uint64_t _TelephonyUtilTransportFileFlushRead(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _TelephonyUtilDebugPrint((uint64_t)"_TelephonyUtilTransportFileFlushRead", (uint64_t)"Not Supported\n", a3, a4, a5, a6, a7, a8, vars0);
  return 0;
}

uint64_t TelephonyUtilTransportFileFree(uint64_t a1)
{
  uint64_t v2 = *(FILE **)(a1 + 80);
  if (v2)
  {
    fclose(v2);
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(void *)(a1 + 80) = 0;
  }
  return 1;
}

BOOL _TelephonyUtilTransportFileIsValid(uint64_t a1)
{
  return *(void *)(a1 + 80) != 0;
}

const void *ctu::cf::map_adapter::copyCFStringRef(ctu::cf::map_adapter *this, const __CFString *a2)
{
  uint64_t v2 = (const void *)(**(uint64_t (***)(ctu::cf::map_adapter *, const __CFString *))this)(this, a2);
  uint64_t v3 = v2;
  if (v2)
  {
    CFTypeID v4 = CFGetTypeID(v2);
    if (v4 != CFStringGetTypeID())
    {
      CFRelease(v3);
      return 0;
    }
  }
  return v3;
}

const void *ctu::cf::map_adapter::copyCFBooleanRef(ctu::cf::map_adapter *this, const __CFString *a2)
{
  uint64_t v2 = (const void *)(**(uint64_t (***)(ctu::cf::map_adapter *, const __CFString *))this)(this, a2);
  uint64_t v3 = v2;
  if (v2)
  {
    CFTypeID v4 = CFGetTypeID(v2);
    if (v4 != CFBooleanGetTypeID())
    {
      CFRelease(v3);
      return 0;
    }
  }
  return v3;
}

const void *ctu::cf::map_adapter::copyCFNumberRef(ctu::cf::map_adapter *this, const __CFString *a2)
{
  uint64_t v2 = (const void *)(**(uint64_t (***)(ctu::cf::map_adapter *, const __CFString *))this)(this, a2);
  uint64_t v3 = v2;
  if (v2)
  {
    CFTypeID v4 = CFGetTypeID(v2);
    if (v4 != CFNumberGetTypeID())
    {
      CFRelease(v3);
      return 0;
    }
  }
  return v3;
}

void ctu::cf::map_adapter::getString(uint64_t (***a1)(void)@<X0>, std::string *a2@<X2>, std::string *a3@<X8>)
{
  memset(&__p, 0, sizeof(__p));
  unsigned int v5 = (__CFString *)(**a1)(a1);
  if (v5 && (char v6 = ctu::cf::assign(&__p, v5), CFRelease(v5), (v6 & 1) != 0))
  {
    int v7 = 1;
    p_p = &__p;
  }
  else
  {
    int v7 = 0;
    p_p = a2;
  }
  if (SHIBYTE(p_p->__r_.__value_.__r.__words[2]) < 0)
  {
    BOOL v9 = v7 == 0;
    uint64_t v10 = &__p;
    if (v9) {
      uint64_t v10 = a2;
    }
    std::string::__init_copy_ctor_external(a3, p_p->__r_.__value_.__l.__data_, v10->__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)&p_p->__r_.__value_.__l.__data_;
    a3->__r_.__value_.__r.__words[2] = p_p->__r_.__value_.__r.__words[2];
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1920638D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL ctu::cf::map_adapter::getBool(ctu::cf::map_adapter *this, const __CFString *a2, BOOL a3)
{
  BOOL v3 = a3;
  BOOL v9 = a3;
  CFTypeID v4 = (const void *)(**(uint64_t (***)(ctu::cf::map_adapter *, const __CFString *))this)(this, a2);
  if (v4)
  {
    unsigned int v5 = v4;
    CFTypeID v6 = CFGetTypeID(v4);
    if (v6 == CFBooleanGetTypeID())
    {
      ctu::cf::assign((ctu::cf *)&v9, v5, v7);
      BOOL v3 = v9;
    }
    CFRelease(v5);
  }
  return v3;
}

BOOL ctu::cf::map_adapter::getBoolLoosely(ctu::cf::map_adapter *this, const __CFString *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  char v8 = a3;
  CFStringRef v4 = (const __CFString *)(**(uint64_t (***)(ctu::cf::map_adapter *, const __CFString *))this)(this, a2);
  if (v4)
  {
    CFStringRef v6 = v4;
    ctu::cf::assign_loosely((ctu::cf *)&v8, v4, v5);
    CFRelease(v6);
    return v8 != 0;
  }
  return v3;
}

const __CFString *ctu::cf::map_adapter::getIntLoosely(ctu::cf::map_adapter *this, const __CFString *a2)
{
  unsigned int v5 = 0;
  CFStringRef result = (const __CFString *)(**(uint64_t (***)(ctu::cf::map_adapter *, const __CFString *))this)(this, a2);
  if (result)
  {
    CFStringRef v4 = result;
    ctu::cf::assign_loosely((ctu::cf *)&v5, result, v3);
    CFRelease(v4);
    return (const __CFString *)v5;
  }
  return result;
}

double ctu::cf::map_adapter::getDoubleLoosely(ctu::cf::map_adapter *this, const __CFString *a2)
{
  double v6 = 0.0;
  CFStringRef v2 = (const __CFString *)(**(uint64_t (***)(ctu::cf::map_adapter *, const __CFString *))this)(this, a2);
  if (!v2) {
    return 0.0;
  }
  CFStringRef v4 = v2;
  ctu::cf::assign_loosely((ctu::cf *)&v6, v2, v3);
  CFRelease(v4);
  return v6;
}

ctu::cf::MakeCFString *ctu::cf::MakeCFString::MakeCFString(ctu::cf::MakeCFString *this, const char *a2)
{
  *(void *)this = CFStringCreateWithCString(0, a2, 0x8000100u);
  return this;
}

{
  *(void *)this = CFStringCreateWithCString(0, a2, 0x8000100u);
  return this;
}

void ctu::cf::MakeCFString::~MakeCFString(const void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

ctu::cf::MakeCFString *ctu::cf::MakeCFString::MakeCFString(ctu::cf::MakeCFString *this, const void **a2)
{
  uint64_t v3 = *a2;
  *(void *)this = *a2;
  if (v3) {
    CFRetain(v3);
  }
  return this;
}

{
  const void *v3;

  uint64_t v3 = *a2;
  *(void *)this = *a2;
  if (v3) {
    CFRetain(v3);
  }
  return this;
}

CFTypeRef *ctu::cf::MakeCFString::operator=(CFTypeRef *a1, const void **a2)
{
  if (a1 != a2)
  {
    CFRelease(*a1);
    CFStringRef v4 = *a2;
    *a1 = *a2;
    CFRetain(v4);
  }
  return a1;
}

uint64_t ctu::cf::dict_adapter::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CFStringRef v4 = *(const void **)(a1 + 8);
    if (v4) {
      CFRelease(v4);
    }
    unsigned int v5 = *(const void **)(a2 + 8);
    *(void *)(a1 + 8) = v5;
    if (v5) {
      CFRetain(v5);
    }
  }
  return a1;
}

ctu::cf::plist_adapter *ctu::cf::plist_adapter::plist_adapter(ctu::cf::plist_adapter *this, CFTypeRef cf, CFTypeRef a3)
{
  *(void *)this = &unk_1EE2F71C0;
  *((void *)this + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = cf;
  *((void *)this + 2) = a3;
  if (cf)
  {
    CFRetain(cf);
    a3 = (CFTypeRef)*((void *)this + 2);
  }
  if (a3) {
    CFRetain(a3);
  }
  return this;
}

ctu::cf::plist_adapter *ctu::cf::plist_adapter::plist_adapter(ctu::cf::plist_adapter *this, const ctu::cf::plist_adapter *a2)
{
  CFStringRef v4 = (const void *)*((void *)a2 + 1);
  uint64_t v3 = (const void *)*((void *)a2 + 2);
  *(void *)this = &unk_1EE2F71C0;
  *((void *)this + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v4;
  *((void *)this + 2) = v3;
  if (v4)
  {
    CFRetain(v4);
    uint64_t v3 = (const void *)*((void *)this + 2);
  }
  if (v3) {
    CFRetain(v3);
  }
  return this;
}

uint64_t ctu::cf::plist_adapter::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CFStringRef v4 = *(const void **)(a1 + 8);
    if (v4) {
      CFRelease(v4);
    }
    unsigned int v5 = *(const void **)(a1 + 16);
    if (v5) {
      CFRelease(v5);
    }
    CFBooleanRef v7 = *(const void **)(a2 + 8);
    double v6 = *(const void **)(a2 + 16);
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v6;
    if (v7)
    {
      CFRetain(v7);
      double v6 = *(const void **)(a1 + 16);
    }
    if (v6) {
      CFRetain(v6);
    }
  }
  return a1;
}

void ctu::cf::plist_adapter::~plist_adapter(ctu::cf::plist_adapter *this)
{
  *(void *)this = &unk_1EE2F71C0;
  CFStringRef v2 = (const void *)*((void *)this + 1);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)*((void *)this + 2);
  if (v3) {
    CFRelease(v3);
  }
}

{
  void *v1;
  uint64_t vars8;

  ctu::cf::plist_adapter::~plist_adapter(this);

  operator delete(v1);
}

CFPropertyListRef ctu::cf::plist_adapter::copyCFTypeRef(ctu::cf::plist_adapter *this, CFStringRef key)
{
  CFStringRef v2 = (const __CFString *)*((void *)this + 1);
  if (v2) {
    return CFPreferencesCopyValue(key, v2, *((CFStringRef *)this + 2), (CFStringRef)*MEMORY[0x1E4F1D3E0]);
  }
  else {
    return 0;
  }
}

BOOL ctu::cf::convert_copy(ctu::cf *this, const __CFString **a2, const char *a3, CFAllocatorRef alloc, const __CFAllocator *a5)
{
  CFStringRef v6 = CFStringCreateWithCString(alloc, (const char *)a2, (CFStringEncoding)a3);
  *(void *)this = v6;
  return v6 != 0;
}

BOOL ctu::cf::convert_copy(CFDataRef *a1, uint64_t a2, int a3, CFAllocatorRef allocator, CFAllocatorRef bytesDeallocator)
{
  char v8 = *(const UInt8 **)(a2 + 40);
  CFIndex v9 = *(unsigned int *)(a2 + 32);
  if (a3)
  {
    CFDataRef v10 = CFDataCreate(allocator, v8, v9);
    if (!v10) {
      return v10 != 0;
    }
    goto LABEL_5;
  }
  CFDataRef v10 = CFDataCreateWithBytesNoCopy(allocator, v8, v9, bytesDeallocator);
  if (v10) {
LABEL_5:
  }
    *a1 = v10;
  return v10 != 0;
}

BOOL ctu::cf::convert_copy(CFDataRef *a1, uint64_t a2)
{
  CFDataRef v3 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *(const UInt8 **)a2, *(void *)(a2 + 8) - *(void *)a2);
  *a1 = v3;
  return v3 != 0;
}

uint64_t ctu::cf::assign(uint64_t a1, CFErrorRef err)
{
  if (!err) {
    return 0;
  }
  CFStringRef v3 = CFErrorCopyDescription(err);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v10 = 0;
  uint64_t v4 = ctu::cf::assign((uint64_t)__p, v3);
  CFRelease(v3);
  if (v4)
  {
    unsigned int v5 = *(void **)a1;
    CFStringRef v6 = *(void **)(a1 + 8);
    uint64_t v7 = *(void *)(a1 + 16);
    *(_OWORD *)a1 = *(_OWORD *)__p;
    *(void *)(a1 + 16) = v10;
    __p[0] = v5;
    __p[1] = v6;
    uint64_t v10 = v7;
    if (v7 < 0) {
      goto LABEL_7;
    }
  }
  else if (v10 < 0)
  {
LABEL_7:
    operator delete(__p[0]);
  }
  return v4;
}

void sub_1920642DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL ctu::cf::assign(std::string *a1, CFURLRef url, Boolean resolveAgainstBase)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
  v7[30] = v4;
  v7[31] = v4;
  v7[28] = v4;
  v7[29] = v4;
  v7[26] = v4;
  v7[27] = v4;
  v7[24] = v4;
  v7[25] = v4;
  v7[22] = v4;
  v7[23] = v4;
  v7[20] = v4;
  v7[21] = v4;
  v7[18] = v4;
  v7[19] = v4;
  v7[16] = v4;
  v7[17] = v4;
  v7[14] = v4;
  v7[15] = v4;
  v7[12] = v4;
  v7[13] = v4;
  v7[10] = v4;
  v7[11] = v4;
  v7[8] = v4;
  v7[9] = v4;
  v7[6] = v4;
  v7[7] = v4;
  v7[4] = v4;
  void v7[5] = v4;
  v7[2] = v4;
  v7[3] = v4;
  v7[0] = v4;
  v7[1] = v4;
  int v5 = CFURLGetFileSystemRepresentation(url, resolveAgainstBase, (UInt8 *)v7, 512);
  if (v5) {
    std::string::__assign_external(a1, (const std::string::value_type *)v7);
  }
  return v5 != 0;
}

BOOL ctu::cf::copy(CFErrorRef err, __CFError *a2, const __CFString **a3)
{
  if (err) {
    *(void *)a2 = CFErrorCopyDescription(err);
  }
  return err != 0;
}

uint64_t ctu::cf::assign(uint64_t a1, const __CFLocale *a2, CFDateFormatterStyle a3, CFDateFormatterStyle a4, CFAllocatorRef allocator, CFAbsoluteTime a6)
{
  CFDateFormatterRef v9 = CFDateFormatterCreate(allocator, a2, a3, a4);
  if (!v9) {
    return 0;
  }
  CFDateFormatterRef v14 = v9;
  CFStringRef StringWithAbsoluteTime = CFDateFormatterCreateStringWithAbsoluteTime(allocator, v9, a6);
  CFStringRef v13 = StringWithAbsoluteTime;
  if (StringWithAbsoluteTime) {
    uint64_t v11 = ctu::cf::assign(a1, StringWithAbsoluteTime);
  }
  else {
    uint64_t v11 = 0;
  }
  ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef((const void **)&v13);
  ctu::SharedRef<__CFDateFormatter,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDateFormatter>::~SharedRef((const void **)&v14);
  return v11;
}

void sub_1920644A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

uint64_t ctu::cf::assign_loosely(ctu::cf *this, const __CFString *cf, const void *a3)
{
  if (!cf) {
    return 0;
  }
  CFTypeID v5 = CFGetTypeID(cf);
  if (v5 == CFBooleanGetTypeID())
  {
    BOOL v6 = CFBooleanGetValue((CFBooleanRef)cf) == 0;
LABEL_6:
    char v8 = !v6;
    *(unsigned char *)this = v8;
    return 1;
  }
  CFTypeID v7 = CFGetTypeID(cf);
  if (v7 == CFNumberGetTypeID())
  {
    int valuePtr = -1431655766;
    CFNumberGetValue((CFNumberRef)cf, kCFNumberIntType, &valuePtr);
    BOOL v6 = valuePtr == 0;
    goto LABEL_6;
  }
  CFTypeID v10 = CFGetTypeID(cf);
  if (v10 != CFStringGetTypeID()) {
    return 0;
  }
  uint64_t v9 = 1;
  if (CFStringCompare(cf, @"YES", 1uLL) == kCFCompareEqualTo
    || CFStringCompare(cf, @"TRUE", 1uLL) == kCFCompareEqualTo)
  {
    *(unsigned char *)this = 1;
    return v9;
  }
  if (CFStringCompare(cf, @"NO", 1uLL) && CFStringCompare(cf, @"FALSE", 1uLL)) {
    return 0;
  }
  *(unsigned char *)this = 0;
  return 1;
}

BOOL ctu::cf::assign_loosely(ctu::cf *this, const __CFString *cf, const void *a3)
{
  *(_DWORD *)this = 0;
  if (cf)
  {
    CFTypeID v5 = CFGetTypeID(cf);
    if (v5 == CFNumberGetTypeID()) {
      return CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt32Type, this) != 0;
    }
    CFTypeID v7 = CFGetTypeID(cf);
    if (v7 == CFStringGetTypeID())
    {
      IntCFStringRef Value = CFStringGetIntValue(cf);
LABEL_8:
      *(_DWORD *)this = IntValue;
      return 1;
    }
    CFTypeID v9 = CFGetTypeID(cf);
    if (v9 == CFBooleanGetTypeID())
    {
      IntCFStringRef Value = CFBooleanGetValue((CFBooleanRef)cf);
      goto LABEL_8;
    }
  }
  return 0;
}

{
  CFTypeID v5;
  CFTypeID v7;
  uint64_t IntValue;
  CFTypeID v9;

  *(void *)this = 0;
  if (cf)
  {
    CFTypeID v5 = CFGetTypeID(cf);
    if (v5 == CFNumberGetTypeID()) {
      return CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt64Type, this) != 0;
    }
    CFTypeID v7 = CFGetTypeID(cf);
    if (v7 == CFStringGetTypeID())
    {
      IntCFStringRef Value = CFStringGetIntValue(cf);
LABEL_8:
      *(void *)this = IntValue;
      return 1;
    }
    CFTypeID v9 = CFGetTypeID(cf);
    if (v9 == CFBooleanGetTypeID())
    {
      IntCFStringRef Value = CFBooleanGetValue((CFBooleanRef)cf);
      goto LABEL_8;
    }
  }
  return 0;
}

{
  CFTypeID v5;
  CFTypeID v7;
  double DoubleValue;
  CFTypeID v9;

  *(void *)this = 0;
  if (cf)
  {
    CFTypeID v5 = CFGetTypeID(cf);
    if (v5 == CFNumberGetTypeID()) {
      return CFNumberGetValue((CFNumberRef)cf, kCFNumberDoubleType, this) != 0;
    }
    CFTypeID v7 = CFGetTypeID(cf);
    if (v7 == CFStringGetTypeID())
    {
      DoubleCFStringRef Value = CFStringGetDoubleValue(cf);
LABEL_8:
      *(double *)this = DoubleValue;
      return 1;
    }
    CFTypeID v9 = CFGetTypeID(cf);
    if (v9 == CFBooleanGetTypeID())
    {
      DoubleCFStringRef Value = (double)CFBooleanGetValue((CFBooleanRef)cf);
      goto LABEL_8;
    }
  }
  return 0;
}

const void **ctu::cf::show@<X0>(CFTypeRef cf@<X0>, uint64_t a2@<X8>)
{
  return ctu::cf::show((const void **)1, cf, a2);
}

const void **ctu::cf::show@<X0>(const void **this@<X0>, CFTypeRef cf@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 8) = 0;
  CFTypeID v5 = (void *)(a3 + 8);
  *(void *)a3 = 0;
  *(void *)(a3 + 16) = 0;
  if (cf)
  {
    CFTypeRef v6 = cf;
    if (this)
    {
      *(void *)&long long v25 = CFCopyDescription(cf);
      memset(v27, 0, 24);
      ctu::cf::assign((uint64_t)v27, (const __CFString *)v25);
LABEL_4:
      uint64_t v7 = *(void *)v27;
      *CFTypeID v5 = *(void *)&v27[8];
      *(void *)((char *)v5 + 7) = *(void *)&v27[15];
      char v8 = v27[23];
      *(void *)a3 = v7;
      *(unsigned char *)(a3 + 23) = v8;
      return ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef((const void **)&v25);
    }
    CFTypeID v9 = CFGetTypeID(cf);
    CFTypeID TypeID = CFDictionaryGetTypeID();
    CFTypeID v11 = CFGetTypeID(v6);
    if (v9 == TypeID)
    {
      CFTypeID v12 = CFDictionaryGetTypeID();
      unint64_t v42 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v13 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v13 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v40 = v13;
      long long v41 = v13;
      if (v11 != v12) {
        CFTypeRef v6 = 0;
      }
      long long v38 = v13;
      long long v39 = v13;
      long long v36 = v13;
      long long v37 = v13;
      long long v34 = v13;
      long long v35 = v13;
      long long v33 = v13;
      long long v31 = v13;
      long long v32 = v13;
      long long v29 = v13;
      *(_OWORD *)std::string __p = v13;
      *(_OWORD *)&v27[16] = v13;
      long long v28 = v13;
      *(_OWORD *)uint64_t v27 = v13;
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"CFDictionary(", 13);
      CFDictionaryGetCount((CFDictionaryRef)v6);
      CFDateFormatterRef v14 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" keys)", 6);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v27[8], &v25);
    }
    else
    {
      CFTypeID v15 = CFArrayGetTypeID();
      CFTypeID v16 = CFGetTypeID(v6);
      if (v11 == v15)
      {
        CFTypeID v17 = CFArrayGetTypeID();
        unint64_t v42 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v18 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v18 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v40 = v18;
        long long v41 = v18;
        if (v16 != v17) {
          CFTypeRef v6 = 0;
        }
        long long v38 = v18;
        long long v39 = v18;
        long long v36 = v18;
        long long v37 = v18;
        long long v34 = v18;
        long long v35 = v18;
        long long v33 = v18;
        long long v31 = v18;
        long long v32 = v18;
        long long v29 = v18;
        *(_OWORD *)std::string __p = v18;
        *(_OWORD *)&v27[16] = v18;
        long long v28 = v18;
        *(_OWORD *)uint64_t v27 = v18;
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"CFArray(", 8);
        CFArrayGetCount((CFArrayRef)v6);
        uint64_t v19 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" elements)", 10);
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v27[8], &v25);
      }
      else
      {
        if (v16 != CFDataGetTypeID())
        {
          *(void *)&long long v25 = CFCopyDescription(v6);
          memset(v27, 0, 24);
          ctu::cf::assign((uint64_t)v27, (const __CFString *)v25);
          goto LABEL_4;
        }
        CFTypeID v20 = CFGetTypeID(v6);
        CFTypeID v21 = CFDataGetTypeID();
        unint64_t v42 = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&long long v22 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v22 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v40 = v22;
        long long v41 = v22;
        if (v20 != v21) {
          CFTypeRef v6 = 0;
        }
        long long v38 = v22;
        long long v39 = v22;
        long long v36 = v22;
        long long v37 = v22;
        long long v34 = v22;
        long long v35 = v22;
        long long v33 = v22;
        long long v31 = v22;
        long long v32 = v22;
        long long v29 = v22;
        *(_OWORD *)std::string __p = v22;
        *(_OWORD *)&v27[16] = v22;
        long long v28 = v22;
        *(_OWORD *)uint64_t v27 = v22;
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"CFData(", 7);
        CFDataGetLength((CFDataRef)v6);
        uint64_t v23 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" bytes)", 7);
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v27[8], &v25);
      }
    }
    *(_OWORD *)a3 = v25;
    uint64_t v24 = (void *)MEMORY[0x1E4FBA418];
    *(void *)(a3 + 16) = v26;
    *(void *)uint64_t v27 = *v24;
    *(void *)&v27[*(void *)(*(void *)v27 - 24)] = v24[3];
    *(void *)&v27[8] = MEMORY[0x1E4FBA470] + 16;
    if (SHIBYTE(v31) < 0) {
      operator delete(__p[1]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (const void **)MEMORY[0x192FED350](&v33);
  }
  else
  {
    *(unsigned char *)(a3 + 23) = 4;
    strcpy((char *)a3, "NULL");
  }
  return this;
}

void sub_192064C48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef(&a10);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA498] + 64;
  *(void *)(a1 + 112) = MEMORY[0x1E4FBA498] + 64;
  uint64_t v3 = *(void *)(MEMORY[0x1E4FBA418] + 16);
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA418] + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  CFTypeID v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 8));
  uint64_t v6 = MEMORY[0x1E4FBA498] + 24;
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)a1 = v6;
  *(void *)(a1 + 112) = v2;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_192064E1C(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x192FED350](v1);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA418];
  uint64_t v3 = *MEMORY[0x1E4FBA418];
  *(void *)a1 = *MEMORY[0x1E4FBA418];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FED350](a1 + 112);
  return a1;
}

const void **ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **ctu::SharedRef<__CFDateFormatter,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDateFormatter>::~SharedRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void ctu::tokenize(std::string *this@<X0>, std::string::value_type __c@<W1>, std::string::size_type __pos@<X2>, uint64_t *a4@<X8>)
{
  std::string::size_type v8 = 0;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  do
  {
    std::string::size_type v9 = std::string::find(this, __c, __pos);
    memset(&v14, 170, sizeof(v14));
    std::string::basic_string(&v14, this, v8, v9 - v8, (std::allocator<char> *)&v13);
    unint64_t v10 = a4[1];
    if (v10 >= a4[2])
    {
      uint64_t v12 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a4, (long long *)&v14);
    }
    else
    {
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)a4[1], v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v11 = *(_OWORD *)&v14.__r_.__value_.__l.__data_;
        *(void *)(v10 + 16) = *((void *)&v14.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v10 = v11;
      }
      uint64_t v12 = v10 + 24;
      a4[1] = v10 + 24;
    }
    a4[1] = v12;
    std::string::size_type v8 = v9 + 1;
    if (__pos <= v9 + 1) {
      __pos = v9 + 1;
    }
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v14.__r_.__value_.__l.__data_);
    }
  }
  while (v9 != -1);
}

void sub_1920650B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  v15[1] = v16;
  if (a15 < 0) {
    operator delete(__p);
  }
  std::string __p = v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t ctu::count_trailing_zeroes(ctu *this, const unsigned __int8 *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v3 = 0;
  uint64_t result = a2;
  for (uint64_t i = (char *)this - 1; !i[a2]; --i)
  {
    if (a2 == ++v3) {
      return result;
    }
  }
  return v3;
}

void ctu::assign(std::string *a1, unsigned __int8 *a2, unsigned int a3, int a4, int a5)
{
  unsigned int v6 = a3;
  if (a5)
  {
    if (a3)
    {
      unsigned int v9 = 0;
      unsigned int v10 = a3;
      long long v11 = a2 - 1;
      while (!v11[a3])
      {
        --v11;
        if (a3 == ++v9) {
          goto LABEL_9;
        }
      }
      unsigned int v10 = v9;
    }
    else
    {
      unsigned int v10 = 0;
    }
LABEL_9:
    unsigned int v6 = a3 - v10;
  }
  if (a4) {
    int v12 = 146 * ((v6 + 31) >> 5);
  }
  else {
    int v12 = 2 * v6;
  }
  __s = 0;
  CFTypeID v17 = 0;
  uint64_t v18 = 0;
  if (v12 == -2)
  {
    std::string v14 = 0;
  }
  else
  {
    std::vector<char>::__vallocate[abi:ne180100](&__s, (v12 + 2));
    char v13 = (char *)v17;
    bzero(v17, (v12 + 2));
    CFTypeID v17 = &v13[v12 + 2];
    std::string v14 = __s;
  }
  unint64_t v15 = v12 | 1u;
  if (a4) {
    TelephonyUtilLogBinaryToBuffer(v14, v15, a2, v6);
  }
  else {
    TelephonyUtilBinToHex(v14, v15, a2, v6);
  }
  std::string::__assign_external(a1, __s);
  if (__s)
  {
    CFTypeID v17 = __s;
    operator delete(__s);
  }
}

void sub_192065258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::assign(unsigned char *a1, char *a2, int a3)
{
  uint64_t v3 = a3;
  if (a2[23] >= 0) {
    uint64_t v4 = a2;
  }
  else {
    uint64_t v4 = *(char **)a2;
  }
  return TelephonyUtilHexToBin(a1, v3, v4);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E4FBA350], MEMORY[0x1E4FBA1F8]);
}

uint64_t std::vector<std::string>::__push_back_slow_path<std::string const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9) {
    unsigned int v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  }
  else {
    unsigned int v10 = 0;
  }
  std::__split_buffer<std::string>::pointer end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    std::__split_buffer<std::string>::pointer end = __v.__end_;
  }
  else
  {
    long long v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  uint64_t v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_1920653F0(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  std::__split_buffer<std::string>::pointer end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  int64_t value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

void std::vector<std::string>::__throw_length_error[abi:ne180100]()
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = a7;
  long long v13 = v14;
  v12[0] = a1;
  v12[1] = &v13;
  void v12[2] = &v14;
  v12[3] = 0xAAAAAAAAAAAAAA01;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((void *)&v14 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v9;
  }
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 24;
  }
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      unint64_t v5 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        unint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

void ctu::RestResourceConnection::~RestResourceConnection(void **this)
{
  *this = &unk_1EE2F6FB0;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

void ctu::XpcRestResourceConnection::~XpcRestResourceConnection(xpc_object_t *this)
{
  *this = &unk_1EE2F7110;
  xpc_release(this[4]);
  this[4] = 0;
  *this = &unk_1EE2F6FB0;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  void *v1;
  uint64_t vars8;

  ctu::XpcRestResourceConnection::~XpcRestResourceConnection(this);

  operator delete(v1);
}

__n128 ctu::DispatchRestResourceConnection::DispatchRestResourceConnection(uint64_t a1, long long *a2, __n128 *a3)
{
  *(void *)a1 = &unk_1EE2F6FB0;
  long long v3 = *a2;
  *(void *)(a1 + 24) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 8) = v3;
  *((void *)a2 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *(void *)a1 = &unk_1EE2F71E8;
  __n128 result = *a3;
  *(__n128 *)(a1 + 32) = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  return result;
}

{
  long long v3;
  __n128 result;

  *(void *)a1 = &unk_1EE2F6FB0;
  long long v3 = *a2;
  *(void *)(a1 + 24) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 8) = v3;
  *((void *)a2 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *(void *)a1 = &unk_1EE2F71E8;
  __n128 result = *a3;
  *(__n128 *)(a1 + 32) = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  return result;
}

const void **ctu::DispatchRestResourceConnection::sendWithReply(xpc::dict,dispatch_queue_s *,void({block_pointer})(void *))const::$_0::~$_0(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    _Block_release(v2);
  }
  return a1;
}

uint64_t ctu::RestResourceConnection::isUsingXpcConnection(ctu::RestResourceConnection *this, _xpc_connection_s *a2)
{
  return 0;
}

void ctu::XpcRestResourceConnection::send(uint64_t a1, xpc_object_t *a2)
{
}

void ctu::XpcRestResourceConnection::sendWithReply(uint64_t a1, xpc_object_t *a2, NSObject *a3, void *a4)
{
}

BOOL ctu::XpcRestResourceConnection::isUsingXpcConnection(ctu::XpcRestResourceConnection *this, _xpc_connection_s *a2)
{
  return *((void *)this + 4) == (void)a2;
}

void ctu::DispatchRestResourceConnection::~DispatchRestResourceConnection(ctu::DispatchRestResourceConnection *this)
{
  *(void *)this = &unk_1EE2F71E8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EE2F6FB0;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE2F71E8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1EE2F6FB0;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }

  operator delete(this);
}

void *std::__function::__func<ctu::DispatchRestResourceConnection::sendWithReply(xpc::dict,dispatch_queue_s *,void({block_pointer})(void *))::$_0,std::allocator<ctu::DispatchRestResourceConnection::sendWithReply(xpc::dict,dispatch_queue_s *,void({block_pointer})(void *))::$_0>,void ()(xpc::object)>::~__func(void *a1)
{
  *a1 = &unk_1EE2F8558;
  uint64_t v2 = (const void *)a1[1];
  if (v2) {
    _Block_release(v2);
  }
  return a1;
}

void std::__function::__func<ctu::DispatchRestResourceConnection::sendWithReply(xpc::dict,dispatch_queue_s *,void({block_pointer})(void *))::$_0,std::allocator<ctu::DispatchRestResourceConnection::sendWithReply(xpc::dict,dispatch_queue_s *,void({block_pointer})(void *))::$_0>,void ()(xpc::object)>::~__func(void *__p)
{
  *std::string __p = &unk_1EE2F8558;
  uint64_t v2 = (const void *)__p[1];
  if (v2) {
    _Block_release(v2);
  }

  operator delete(__p);
}

void *std::__function::__func<ctu::DispatchRestResourceConnection::sendWithReply(xpc::dict,dispatch_queue_s *,void({block_pointer})(void *))::$_0,std::allocator<ctu::DispatchRestResourceConnection::sendWithReply(xpc::dict,dispatch_queue_s *,void({block_pointer})(void *))::$_0>,void ()(xpc::object)>::__clone(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 8);
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = &unk_1EE2F8558;
  std::__compressed_pair_elem<ctu::DispatchRestResourceConnection::sendWithReply(xpc::dict,dispatch_queue_s *,void({block_pointer})(void *))::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<ctu::DispatchRestResourceConnection::sendWithReply(xpc::dict,dispatch_queue_s *,void({block_pointer})(void *))::$_0 const&,0ul>(v2 + 1, v1);
  return v2;
}

void std::__function::__func<ctu::DispatchRestResourceConnection::sendWithReply(xpc::dict,dispatch_queue_s *,void({block_pointer})(void *))::$_0,std::allocator<ctu::DispatchRestResourceConnection::sendWithReply(xpc::dict,dispatch_queue_s *,void({block_pointer})(void *))::$_0>,void ()(xpc::object)>::destroy_deallocate(const void **a1)
{
  std::__function::__alloc_func<ctu::DispatchRestResourceConnection::sendWithReply(xpc::dict,dispatch_queue_s *,void({block_pointer})(void *))::$_0,std::allocator<ctu::DispatchRestResourceConnection::sendWithReply(xpc::dict,dispatch_queue_s *,void({block_pointer})(void *))::$_0>,void ()(xpc::object)>::destroy[abi:ne180100](a1[1]);

  operator delete(a1);
}

uint64_t std::__function::__func<ctu::DispatchRestResourceConnection::sendWithReply(xpc::dict,dispatch_queue_s *,void({block_pointer})(void *))::$_0,std::allocator<ctu::DispatchRestResourceConnection::sendWithReply(xpc::dict,dispatch_queue_s *,void({block_pointer})(void *))::$_0>,void ()(xpc::object)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ctu::DispatchRestResourceConnection::sendWithReply(xpc::dict,dispatch_queue_s *,void({block_pointer})(void *))::$_0,std::allocator<ctu::DispatchRestResourceConnection::sendWithReply(xpc::dict,dispatch_queue_s *,void({block_pointer})(void *))::$_0>,void ()(xpc::object)>::target_type()
{
}

CFAllocatorRef ctu::cf::create_allocator@<X0>(ctu::cf *this@<X0>, const ctu::MallocZone *a2@<X1>, CFAllocatorRef *a3@<X8>)
{
  memset(&context, 0, 24);
  uint64_t v7 = operator new(0x18uLL);
  uint64_t v8 = *((void *)this + 1);
  *uint64_t v7 = *(void *)this;
  v7[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  v7[2] = *((void *)this + 2);
  context.mach_timebase_info info = v7;
  CFAllocatorRef result = CFAllocatorCreate(a2, &context);
  *a3 = result;
  return result;
}

CFStringRef anonymous namespace'::sMallocZoneCopyDescription(_anonymous_namespace_ *this, const void *a2)
{
  return CFStringCreateWithFormat(0, 0, @"<Allocator %p: %s>", this, *((void *)this + 2));
}

void anonymous namespace'::sMallocZoneRelease(_anonymous_namespace_ *this, const void *a2)
{
  if (this)
  {
    long long v3 = (std::__shared_weak_count *)*((void *)this + 1);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    operator delete(this);
  }
}

void *anonymous namespace'::sMallocZoneAllocate(size_t size, uint64_t a2, malloc_zone_t **a3, void *a4)
{
  return malloc_zone_malloc(*a3, size);
}

void *anonymous namespace'::sMallocZoneReallocate(_anonymous_namespace_ *this, size_t size, uint64_t a3, malloc_zone_t **a4, void *a5)
{
  return malloc_zone_realloc(*a4, this, size);
}

void anonymous namespace'::sMallocZoneDeallocate(_anonymous_namespace_ *this, malloc_zone_t **a2, void *a3)
{
}

uint64_t ctu::concurrency::Monitor::Monitor(uint64_t a1, const void **a2)
{
  *(void *)a1 = &unk_1EE2F65B8;
  ctu::concurrency::PriorityQueue::PriorityQueue((dispatch_object_t *)(a1 + 8), a2);
  *(void *)(a1 + 32) = dispatch_group_create();
  return a1;
}

{
  *(void *)a1 = &unk_1EE2F65B8;
  ctu::concurrency::PriorityQueue::PriorityQueue((dispatch_object_t *)(a1 + 8), a2);
  *(void *)(a1 + 32) = dispatch_group_create();
  return a1;
}

void *ctu::concurrency::Monitor::Monitor(void *a1, uint64_t a2)
{
  *a1 = &unk_1EE2F65B8;
  ctu::concurrency::PriorityQueue::PriorityQueue((uint64_t)(a1 + 1), a2 + 8);
  unint64_t v4 = *(NSObject **)(a2 + 32);
  a1[4] = v4;
  dispatch_retain(v4);
  return a1;
}

{
  NSObject *v4;

  *a1 = &unk_1EE2F65B8;
  ctu::concurrency::PriorityQueue::PriorityQueue((uint64_t)(a1 + 1), a2 + 8);
  unint64_t v4 = *(NSObject **)(a2 + 32);
  a1[4] = v4;
  dispatch_retain(v4);
  return a1;
}

void ctu::concurrency::Monitor::~Monitor(dispatch_object_t *this)
{
  *this = (dispatch_object_t)&unk_1EE2F65B8;
  dispatch_release(this[4]);
  ctu::concurrency::PriorityQueue::~PriorityQueue(this + 1);
}

{
  *this = (dispatch_object_t)&unk_1EE2F65B8;
  dispatch_release(this[4]);
  ctu::concurrency::PriorityQueue::~PriorityQueue(this + 1);
}

{
  uint64_t vars8;

  *this = (dispatch_object_t)&unk_1EE2F65B8;
  dispatch_release(this[4]);
  ctu::concurrency::PriorityQueue::~PriorityQueue(this + 1);

  operator delete(this);
}

void ctu::concurrency::Monitor::executeBlock(uint64_t a1, void *a2, int a3)
{
}

{
  ctu::concurrency::PriorityQueue::addBlock((NSObject **)(a1 + 8), *(dispatch_group_t *)(a1 + 32), a2, a3);
}

void ctu::concurrency::Monitor::executeBlock(uint64_t a1, NSObject *a2, void *a3, int a4)
{
}

{
  ctu::concurrency::PriorityQueue::addBlock((NSObject **)(a1 + 8), a2, a3, a4);
}

void ctu::concurrency::Monitor::executeBlockAndWait(uint64_t a1, void *a2, int a3, dispatch_time_t a4)
{
  if (a4 == -1)
  {
    uint64_t v9 = (dispatch_object_t *)(a1 + 8);
    ctu::concurrency::PriorityQueue::addBlockSync(v9, a2, a3);
  }
  else
  {
    uint64_t v8 = dispatch_group_create();
    ctu::concurrency::PriorityQueue::addBlock((NSObject **)(a1 + 8), v8, a2, a3);
    dispatch_group_wait(v8, a4);
    dispatch_release(v8);
  }
}

{
  NSObject *v8;
  dispatch_object_t *v9;
  uint64_t vars8;

  if (a4 == -1)
  {
    uint64_t v9 = (dispatch_object_t *)(a1 + 8);
    ctu::concurrency::PriorityQueue::addBlockSync(v9, a2, a3);
  }
  else
  {
    uint64_t v8 = dispatch_group_create();
    ctu::concurrency::PriorityQueue::addBlock((NSObject **)(a1 + 8), v8, a2, a3);
    dispatch_group_wait(v8, a4);
    dispatch_release(v8);
  }
}

intptr_t ctu::concurrency::Monitor::waitForCompletion(dispatch_group_t *this, dispatch_time_t a2)
{
  return dispatch_group_wait(this[4], a2);
}

{
  return dispatch_group_wait(this[4], a2);
}

void ctu::concurrency::Monitor::notifyOnCompletion(uint64_t a1, NSObject *a2, void *a3, int a4)
{
}

{
  ctu::concurrency::PriorityQueue::notifyOn((NSObject **)(a1 + 8), a2, a3, a4);
}

void ctu::concurrency::Monitor::suspend(dispatch_object_t *this)
{
}

void ctu::concurrency::Monitor::resume(dispatch_object_t *this)
{
}

void ctu::concurrency::Monitor::suspendAndExecute(uint64_t a1, uint64_t a2)
{
  dispatch_suspend(*(dispatch_object_t *)(a1 + 24));
  (*(void (**)(uint64_t))(a2 + 16))(a2);
  unint64_t v4 = *(NSObject **)(a1 + 24);

  dispatch_resume(v4);
}

xpc_object_t *ctu::rest::data_view::data_view(xpc_object_t *a1, xpc_object_t *a2)
{
  *a1 = xpc_null_create();
  if (MEMORY[0x192FEE1B0](*a2) != MEMORY[0x1E4F145D8] && MEMORY[0x192FEE1B0](*a2) == MEMORY[0x1E4F14580])
  {
    xpc_object_t v4 = *a2;
    *a2 = xpc_null_create();
    xpc_object_t v5 = *a1;
    *a1 = v4;
    xpc_release(v5);
  }
  return a1;
}

void sub_192066214(_Unwind_Exception *a1)
{
  xpc_release(*v1);
  xpc_object_t *v1 = 0;
  _Unwind_Resume(a1);
}

xpc_object_t *ctu::rest::data_view::data_view(xpc_object_t *this, CFTypeRef cf)
{
  xpc_object_t v4 = cf;
  if (cf) {
    CFRetain(cf);
  }
  ctu::rest::data_view::data_view(this, (CFDataRef *)&v4);
  ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::~SharedRef(&v4);
  return this;
}

{
  const void *v4;

  xpc_object_t v4 = cf;
  if (cf) {
    CFRetain(cf);
  }
  ctu::rest::data_view::data_view(this, (CFDataRef *)&v4);
  ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::~SharedRef(&v4);
  return this;
}

void sub_192066288(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::~SharedRef((const void **)va);
  _Unwind_Resume(a1);
}

xpc_object_t *ctu::rest::data_view::data_view(xpc_object_t *a1, CFDataRef *a2)
{
  *a1 = xpc_null_create();
  if (*a2) {
    xpc_object_t v4 = ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get;
  }
  else {
    xpc_object_t v4 = 0;
  }
  if (v4)
  {
    qos_class_t v5 = qos_class_self();
    global_queue = dispatch_get_global_queue(v5, 0);
    BytePtr = CFDataGetBytePtr(*a2);
    CFIndex Length = CFDataGetLength(*a2);
    destructor[0] = MEMORY[0x1E4F143A8];
    destructor[1] = 1174405120;
    destructor[2] = ___ZN3ctu4rest9data_viewC2ENS_2cf11CFSharedRefIK8__CFDataEE_block_invoke;
    destructor[3] = &__block_descriptor_tmp_13;
    ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::SharedRef(&v14, (const void **)a2);
    uint64_t v9 = dispatch_data_create(BytePtr, Length, global_queue, destructor);
    xpc_object_t v10 = xpc_data_create_with_dispatch_data(v9);
    if (!v10) {
      xpc_object_t v10 = xpc_null_create();
    }
    xpc_object_t v11 = *a1;
    *a1 = v10;
    xpc_release(v11);
    dispatch_release(v9);
    ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::~SharedRef(&v14);
  }
  return a1;
}

void sub_1920663D0(_Unwind_Exception *a1)
{
  ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::~SharedRef(v2);
  xpc_release(*v1);
  xpc_object_t *v1 = 0;
  _Unwind_Resume(a1);
}

void sub_192066458(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::~SharedRef((const void **)va);
  _Unwind_Resume(a1);
}

const void **__copy_helper_block_e8_32c38_ZTSN3ctu2cf11CFSharedRefIK8__CFDataEE(uint64_t a1, uint64_t a2)
{
  return ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::SharedRef((const void **)(a1 + 32), (const void **)(a2 + 32));
}

const void **__destroy_helper_block_e8_32c38_ZTSN3ctu2cf11CFSharedRefIK8__CFDataEE(uint64_t a1)
{
  return ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::~SharedRef((const void **)(a1 + 32));
}

xpc_object_t *ctu::rest::data_view::data_view(xpc_object_t *a1, uint64_t a2)
{
  *a1 = xpc_null_create();
  if (*(void *)a2 != *(void *)(a2 + 8))
  {
    qos_class_t v4 = qos_class_self();
    global_queue = dispatch_get_global_queue(v4, 0);
    unsigned int v6 = dispatch_data_create(*(const void **)a2, *(void *)(a2 + 8) - *(void *)a2, global_queue, &__block_literal_global_1);
    xpc_object_t v7 = xpc_data_create_with_dispatch_data(v6);
    if (!v7) {
      xpc_object_t v7 = xpc_null_create();
    }
    xpc_object_t v8 = *a1;
    *a1 = v7;
    xpc_release(v8);
    dispatch_release(v6);
  }
  return a1;
}

{
  const void *v4;
  uint64_t v5;
  void *v6;
  qos_class_t v7;
  NSObject *global_queue;
  NSObject *v9;
  xpc_object_t v10;
  xpc_object_t v11;
  void destructor[5];

  *a1 = xpc_null_create();
  qos_class_t v4 = *(const void **)a2;
  qos_class_t v5 = *(void *)(a2 + 8);
  if (*(void *)a2 != v5)
  {
    unsigned int v6 = operator new(0x18uLL);
    *unsigned int v6 = v4;
    v6[1] = v5;
    void v6[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    xpc_object_t v7 = qos_class_self();
    global_queue = dispatch_get_global_queue(v7, 0);
    destructor[0] = MEMORY[0x1E4F143A8];
    destructor[1] = 0x40000000;
    destructor[2] = ___ZN3ctu4rest9data_viewC2EONSt3__16vectorIhNS2_9allocatorIhEEEE_block_invoke;
    destructor[3] = &__block_descriptor_tmp_2;
    void destructor[4] = v6;
    uint64_t v9 = dispatch_data_create(v4, v5 - (void)v4, global_queue, destructor);
    xpc_object_t v10 = xpc_data_create_with_dispatch_data(v9);
    if (!v10) {
      xpc_object_t v10 = xpc_null_create();
    }
    xpc_object_t v11 = *a1;
    *a1 = v10;
    xpc_release(v11);
    dispatch_release(v9);
  }
  return a1;
}

void sub_19206651C(_Unwind_Exception *a1)
{
  xpc_release(*v1);
  xpc_object_t *v1 = 0;
  _Unwind_Resume(a1);
}

void sub_192066658(_Unwind_Exception *a1)
{
  xpc_release(*v1);
  xpc_object_t *v1 = 0;
  _Unwind_Resume(a1);
}

void ___ZN3ctu4rest9data_viewC2EONSt3__16vectorIhNS2_9allocatorIhEEEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void ***)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = *v1;
    if (*v1)
    {
      v1[1] = v2;
      operator delete(v2);
    }
    operator delete(v1);
  }
}

const void *ctu::rest::data_view::data(ctu::rest::data_view *this)
{
  if (MEMORY[0x192FEE1B0](*(void *)this) == MEMORY[0x1E4F145D8]) {
    return 0;
  }
  uint64_t v2 = *(void **)this;

  return xpc_data_get_bytes_ptr(v2);
}

size_t ctu::rest::data_view::size(ctu::rest::data_view *this)
{
  if (MEMORY[0x192FEE1B0](*(void *)this) == MEMORY[0x1E4F145D8]) {
    return 0;
  }
  uint64_t v2 = *(void **)this;

  return xpc_data_get_length(v2);
}

BOOL ctu::rest::data_view::operator BOOL(void *a1)
{
  return MEMORY[0x192FEE1B0](*a1) != MEMORY[0x1E4F145D8];
}

void ctu::rest::read_rest_value(void **a1, void **a2)
{
  long long v3 = *a2;
  xpc_object_t v6 = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t v6 = xpc_null_create();
  }
  ctu::rest::data_view::data_view(&object, &v6);
  xpc_object_t v4 = object;
  xpc_object_t object = xpc_null_create();
  qos_class_t v5 = *a1;
  *a1 = v4;
  xpc_release(v5);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v6);
}

void sub_192066848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
}

xpc_object_t ctu::rest::write_rest_value@<X0>(void **this@<X0>, void *a2@<X8>)
{
  long long v3 = *this;
  *a2 = v3;
  if (v3) {
    return xpc_retain(v3);
  }
  xpc_object_t result = xpc_null_create();
  *a2 = result;
  return result;
}

BOOL ctu::rest::convert_copy(ctu::rest *this, const __CFData **a2, const ctu::rest::data_view *a3, const __CFAllocator *a4)
{
  uint64_t v7 = MEMORY[0x192FEE1B0](*a2);
  uint64_t v8 = MEMORY[0x1E4F145D8];
  if (v7 != MEMORY[0x1E4F145D8])
  {
    uint64_t v9 = (const UInt8 *)ctu::rest::data_view::data((ctu::rest::data_view *)a2);
    CFIndex v10 = ctu::rest::data_view::size((ctu::rest::data_view *)a2);
    *(void *)this = CFDataCreateWithBytesNoCopy(a3, v9, v10, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
  }
  return v7 != v8;
}

const void **ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::~SharedRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::SharedRef(const void **a1, const void **a2)
{
  long long v3 = *a2;
  *a1 = *a2;
  if (v3) {
    CFRetain(v3);
  }
  return a1;
}

void ctu::XpcClientHelper::~XpcClientHelper(xpc_object_t *this)
{
  *this = 0;
}

void ctu::XpcClientHelper::setServer(void *a1)
{
  xpc_object_t object = xpc_null_create();
  ctu::XpcClientHelper::setServer_internal(a1, &object);
  xpc_release(object);
}

void sub_192066A24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void ___ZN3ctu15XpcClientHelper18setServer_internalEN3xpc10connectionE_block_invoke(uint64_t a1)
{
}

xpc_object_t __copy_helper_block_e8_32c22_ZTSN3xpc10connectionE(uint64_t a1, uint64_t a2)
{
  long long v3 = *(void **)(a2 + 32);
  *(void *)(a1 + 32) = v3;
  if (v3) {
    return xpc_retain(v3);
  }
  xpc_object_t result = xpc_null_create();
  *(void *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c22_ZTSN3xpc10connectionE(uint64_t a1)
{
  *(void *)(a1 + 32) = 0;
}

void ctu::XpcClientHelper::flush(_xpc_connection_s **this, const group *a2)
{
  if (MEMORY[0x192FEE1B0](*this) == MEMORY[0x1E4F14578])
  {
    gr_name = a2->gr_name;
    if (gr_name)
    {
      dispatch_retain((dispatch_object_t)gr_name);
      dispatch_group_enter((dispatch_group_t)gr_name);
    }
    qos_class_t v5 = *this;
    barrier[0] = MEMORY[0x1E4F143A8];
    barrier[1] = 1174405120;
    barrier[2] = ___ZNK3ctu15XpcClientHelper5flushERKN8dispatch5groupE_block_invoke;
    barrier[3] = &__block_descriptor_tmp_1_0;
    dispatch_group_t group = (dispatch_group_t)gr_name;
    if (gr_name)
    {
      dispatch_retain((dispatch_object_t)gr_name);
      dispatch_group_enter(group);
    }
    xpc_connection_send_barrier(v5, barrier);
    if (group)
    {
      dispatch_group_leave(group);
      if (group) {
        dispatch_release(group);
      }
    }
    if (gr_name)
    {
      dispatch_group_leave((dispatch_group_t)gr_name);
      dispatch_release((dispatch_object_t)gr_name);
    }
  }
}

void sub_192066BB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, dispatch_group_t group)
{
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  if (v14)
  {
    dispatch_group_leave(v14);
    dispatch_release(v14);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_32c30_ZTSN8dispatch13group_sessionE(uint64_t a1, uint64_t a2)
{
  long long v3 = *(NSObject **)(a2 + 32);
  *(void *)(a1 + 32) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    xpc_object_t v4 = *(NSObject **)(a1 + 32);
    if (v4)
    {
      dispatch_group_enter(v4);
    }
  }
}

void __destroy_helper_block_e8_32c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 32);
  if (v2)
  {
    dispatch_group_leave(v2);
    long long v3 = *(NSObject **)(a1 + 32);
    if (v3)
    {
      dispatch_release(v3);
    }
  }
}

double ctu::PropertyRestResource::PropertyRestResource(ctu::PropertyRestResource *this, char a2)
{
  *(void *)this = &unk_1EE2F6D80;
  *((unsigned char *)this + 8) = a2;
  double result = 0.0;
  *((_OWORD *)this + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((void *)this + 10) = 0;
  return result;
}

{
  double result;

  *(void *)this = &unk_1EE2F6D80;
  *((unsigned char *)this + 8) = a2;
  double result = 0.0;
  *((_OWORD *)this + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((void *)this + 10) = 0;
  return result;
}

void ctu::PropertyRestResource::~PropertyRestResource(ctu::PropertyRestResource *this)
{
  *(void *)this = &unk_1EE2F6D80;
  boost::container::vector<std::weak_ptr<ctu::RestResourceConnection>,boost::container::new_allocator<std::weak_ptr<ctu::RestResourceConnection>>,void>::~vector((void *)this + 8);
  boost::container::vector<std::weak_ptr<ctu::RestResourceConnection>,boost::container::new_allocator<std::weak_ptr<ctu::RestResourceConnection>>,void>::~vector((void *)this + 5);
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    long long v3 = (void **)(*((void *)this + 2) + 24);
    do
    {
      std::unique_ptr<ctu::PropertyRestResourceState>::reset[abi:ne180100](v3, 0);
      if (*((char *)v3 - 1) < 0) {
        operator delete(*(v3 - 3));
      }
      v3 += 4;
      --v2;
    }
    while (v2);
  }
  if (*((void *)this + 4)) {
    operator delete(*((void **)this + 2));
  }
}

{
  void *v1;
  uint64_t vars8;

  ctu::PropertyRestResource::~PropertyRestResource(this);

  operator delete(v1);
}

uint64_t ctu::PropertyRestResource::handleMessage_Root_GET(ctu::PropertyRestResource *this, ctu::RestResourceContext *a2)
{
  ctu::PropertyRestResource::getResourceArray(this, &object);
  xpc_object_t v5 = object;
  if (object) {
    xpc_retain(object);
  }
  else {
    xpc_object_t v5 = xpc_null_create();
  }
  (*(void (**)(ctu::RestResourceContext *, xpc_object_t *))(*(void *)a2 + 32))(a2, &v5);
  xpc_release(v5);
  xpc_object_t v5 = 0;
  xpc_release(object);
  return 1;
}

void sub_192066E80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, xpc_object_t object)
{
}

uint64_t ctu::PropertyRestResource::handleMessage_Meta_GET(ctu::PropertyRestResource *this, ctu::RestResourceContext *a2)
{
  xpc::array_creator::array_creator((xpc::array_creator *)&object);
  xpc::array_creator::operator()<char const*>("watchers", &object, &v5);
  xpc_release(object);
  xpc::array_creator::operator()<char const*>("watched", &v5, &v6);
  xpc_object_t v3 = v6;
  xpc_object_t v6 = xpc_null_create();
  xpc_release(v6);
  xpc_object_t v6 = 0;
  xpc_release(v5);
  xpc_object_t object = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(ctu::RestResourceContext *, xpc_object_t *))(*(void *)a2 + 32))(a2, &object);
  xpc_release(object);
  xpc_release(v3);
  return 1;
}

void sub_192066F8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, uint64_t a11, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v12);
  _Unwind_Resume(a1);
}

uint64_t ctu::PropertyRestResource::handleMessage_Meta_Watchers_GET(ctu::PropertyRestResource *this, ctu::RestResourceContext *a2)
{
  ctu::rest::WatchableRestResourceHelper::getWatcherNames((ctu::PropertyRestResource *)((char *)this + 40), &object);
  xpc_object_t v5 = object;
  if (object) {
    xpc_retain(object);
  }
  else {
    xpc_object_t v5 = xpc_null_create();
  }
  (*(void (**)(ctu::RestResourceContext *, xpc_object_t *))(*(void *)a2 + 32))(a2, &v5);
  xpc_release(v5);
  xpc_object_t v5 = 0;
  xpc_release(object);
  return 1;
}

void sub_192067088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, xpc_object_t object)
{
}

uint64_t ctu::PropertyRestResource::handleMessage_Meta_Watched_GET(ctu::PropertyRestResource *this, ctu::RestResourceContext *a2)
{
  ctu::PropertyRestResource::getWatchedResourceArray(this, &object);
  xpc_object_t v5 = object;
  if (object) {
    xpc_retain(object);
  }
  else {
    xpc_object_t v5 = xpc_null_create();
  }
  (*(void (**)(ctu::RestResourceContext *, xpc_object_t *))(*(void *)a2 + 32))(a2, &v5);
  xpc_release(v5);
  xpc_object_t v5 = 0;
  xpc_release(object);
  return 1;
}

void sub_19206714C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, xpc_object_t object)
{
}

uint64_t ctu::PropertyRestResource::handleMessage_Meta_Watched_Meta_Watchers_GET(ctu::PropertyRestResource *this, ctu::RestResourceContext *a2)
{
  ctu::rest::WatchableRestResourceHelper::getWatcherNames((ctu::PropertyRestResource *)((char *)this + 64), &object);
  xpc_object_t v5 = object;
  if (object) {
    xpc_retain(object);
  }
  else {
    xpc_object_t v5 = xpc_null_create();
  }
  (*(void (**)(ctu::RestResourceContext *, xpc_object_t *))(*(void *)a2 + 32))(a2, &v5);
  xpc_release(v5);
  xpc_object_t v5 = 0;
  xpc_release(object);
  return 1;
}

void sub_192067214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, xpc_object_t object)
{
}

uint64_t ctu::PropertyRestResource::handleMessage_DumpState_GET(ctu::PropertyRestResource *this, ctu::RestResourceContext *a2)
{
  if (*((unsigned char *)this + 8))
  {
    __p.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v3 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v9 = v3;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v3;
    long long v8 = v3;
    ctu::ReplyDictRestResourceContextDecorator::ReplyDictRestResourceContextDecorator((ctu::ReplyDictRestResourceContextDecorator *)&v8, a2);
    uint64_t v4 = *((void *)this + 3);
    if (v4)
    {
      xpc_object_t v5 = (const std::string *)*((void *)this + 2);
      xpc_object_t v6 = (const std::string *)((char *)v5 + 32 * v4);
      do
      {
        std::string::operator=(&__p, v5);
        ctu::ReplyDictRestResourceContextDecorator::sendReplyWithValue((uint64_t)&v8, (void **)(v5[1].__r_.__value_.__r.__words[0] + 24));
        xpc_object_t v5 = (const std::string *)((char *)v5 + 32);
      }
      while (v5 != v6);
    }
    *(void *)&long long v8 = &unk_1EE2F72E8;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (*((void *)&v9 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v9 + 1));
    }
  }
  return 1;
}

void sub_192067310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t ctu::PropertyRestResource::handleMessage_Resource_Meta_GET(ctu::PropertyRestResource *this, ctu::RestResourceContext *a2)
{
  xpc::array_creator::array_creator((xpc::array_creator *)&object);
  xpc::array_creator::operator()<char const*>("watchers", &object, &v5);
  xpc_release(object);
  xpc_object_t v3 = v5;
  xpc_object_t v5 = xpc_null_create();
  xpc_release(v5);
  xpc_object_t object = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(ctu::RestResourceContext *, xpc_object_t *))(*(void *)a2 + 32))(a2, &object);
  xpc_release(object);
  xpc_release(v3);
  return 1;
}

void sub_1920673E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

uint64_t ctu::PropertyRestResource::handleMessage_Resource_Watchers_GET(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, size_t a5)
{
  xpc_object_t v9 = xpc_null_create();
  if (a4)
  {
    std::string::basic_string[abi:ne180100](__p, a4, a5);
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v16 = 0;
  }
  boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>>::find((uint64_t)&v17, (void ***)(a1 + 16), __p);
  uint64_t v10 = v17;
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  if (v10 == *(void *)(a1 + 16) + 32 * *(void *)(a1 + 24))
  {
    xpc_object_t v12 = xpc_array_create(0, 0);
    if (v12 || (xpc_object_t v12 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x192FEE1B0](v12) == MEMORY[0x1E4F14568])
      {
        xpc_retain(v12);
        xpc_object_t v11 = v12;
      }
      else
      {
        xpc_object_t v11 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v11 = xpc_null_create();
      xpc_object_t v12 = 0;
    }
    xpc_release(v12);
    xpc_object_t v13 = xpc_null_create();
    xpc_release(v9);
    xpc_release(v13);
  }
  else
  {
    ctu::rest::WatchableRestResourceHelper::getWatcherNames(*(ctu::rest::WatchableRestResourceHelper **)(v10 + 24), __p);
    xpc_object_t v11 = __p[0];
    __p[0] = xpc_null_create();
    xpc_release(v9);
    xpc_release(__p[0]);
  }
  __p[0] = v11;
  if (v11) {
    xpc_retain(v11);
  }
  else {
    __p[0] = xpc_null_create();
  }
  (*(void (**)(uint64_t, void **))(*(void *)a2 + 32))(a2, __p);
  xpc_release(__p[0]);
  xpc_release(v11);
  return 1;
}

void sub_1920675F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
  xpc_release(v9);
  _Unwind_Resume(a1);
}

uint64_t ctu::PropertyRestResource::handleRestMessage_POP(ctu::PropertyRestResource *this, ctu::RestResourceContext *a2, const ctu::PathView *a3)
{
  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v10 = v6;
  long long v11 = v6;
  long long v7 = *((_OWORD *)a3 + 1);
  v9[0] = *(_OWORD *)a3;
  v9[1] = v7;
  uint64_t result = 1;
  switch((int)v10)
  {
    case 1:
      ctu::PropertyRestResource::handleMessage_Root_POP(this, a2);
      goto LABEL_6;
    case 2:
    case 3:
    case 5:
    case 8:
    case 9:
      return result;
    case 4:
      ctu::PropertyRestResource::handleMessage_Meta_Watched_POP(this, a2);
      goto LABEL_6;
    case 7:
      ctu::PropertyRestResource::handleMessage_Resource_POP((void ***)this, a2, a3, *((void **)&v10 + 1), v11);
LABEL_6:
      uint64_t result = 1;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t ctu::PropertyRestResource::handleMessage_Root_POP(ctu::PropertyRestResource *this, ctu::RestResourceContext *a2)
{
  uint64_t v2 = (void *)((char *)this + 40);
  (**(void (***)(uint64_t *__return_ptr, ctu::RestResourceContext *))a2)(&v4, a2);
  ctu::rest::WatchableRestResourceHelper::removeWatcher(v2, &v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return 1;
}

void sub_1920677A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::PropertyRestResource::handleMessage_Meta_Watched_POP(ctu::PropertyRestResource *this, ctu::RestResourceContext *a2)
{
  uint64_t v2 = (void *)((char *)this + 64);
  (**(void (***)(uint64_t *__return_ptr, ctu::RestResourceContext *))a2)(&v4, a2);
  ctu::rest::WatchableRestResourceHelper::removeWatcher(v2, &v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return 1;
}

void sub_19206782C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::PropertyRestResource::handleMessage_Resource_POP(void ***a1, ctu::RestResourceContext *a2, const ctu::PathView *a3, void *a4, size_t a5)
{
  long long v8 = a1 + 2;
  if (a4)
  {
    std::string::basic_string[abi:ne180100](&__p, a4, a5);
  }
  else
  {
    std::string __p = 0;
    unint64_t v15 = 0;
    uint64_t v16 = 0;
  }
  boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>>::find((uint64_t)&v17, v8, &__p);
  uint64_t v9 = v17;
  if (SHIBYTE(v16) < 0) {
    operator delete(__p);
  }
  if ((void **)v9 != &a1[2][4 * (void)a1[3]])
  {
    long long v10 = *(void **)(v9 + 24);
    uint64_t v11 = v10[1];
    (**(void (***)(void **__return_ptr, ctu::RestResourceContext *))a2)(&__p, a2);
    int v12 = ctu::rest::WatchableRestResourceHelper::removeWatcher(v10, &__p);
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
    if (v12 && (v11 != 0) != (*(void *)(*(void *)(v9 + 24) + 8) != 0)) {
      ctu::PropertyRestResource::sendWatchedResourcesNotification((ctu::PropertyRestResource *)a1, a2, a3);
    }
  }
  return 1;
}

void sub_192067964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::PropertyRestResource::handleRestMessage_PUSH(ctu::PropertyRestResource *this, ctu::RestResourceContext *a2, const ctu::PathView *a3)
{
  unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v14 = v6;
  long long v15 = v6;
  long long v7 = *((_OWORD *)a3 + 1);
  v13[0] = *(_OWORD *)a3;
  v13[1] = v7;
  uint64_t result = 1;
  switch((int)v14)
  {
    case 1:
      long long v9 = *((_OWORD *)a3 + 1);
      v12[0] = *(_OWORD *)a3;
      v12[1] = v9;
      ctu::PropertyRestResource::handleMessage_Root_PUSH((uint64_t *)this, (uint64_t)a2, (void **)v12);
      goto LABEL_6;
    case 2:
    case 3:
    case 5:
    case 8:
    case 9:
      return result;
    case 4:
      long long v10 = *((_OWORD *)a3 + 1);
      v11[0] = *(_OWORD *)a3;
      v11[1] = v10;
      ctu::PropertyRestResource::handleMessage_Meta_Watched_PUSH((uint64_t *)this, (uint64_t)a2, (void **)v11);
      goto LABEL_6;
    case 7:
      ctu::PropertyRestResource::handleMessage_Resource_PUSH((void ***)this, a2, (uint64_t)a3, *((unsigned char **)&v14 + 1), v15);
LABEL_6:
      uint64_t result = 1;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t ctu::PropertyRestResource::handleMessage_Root_PUSH(uint64_t *a1, uint64_t a2, void **a3)
{
  (**(void (***)(unint64_t *__return_ptr, uint64_t))a2)(&v21, a2);
  if (!v21) {
    goto LABEL_34;
  }
  unint64_t v19 = v21;
  CFTypeID v20 = v22;
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(string, 170, sizeof(string));
  boost::container::dtl::flat_tree<std::weak_ptr<ctu::RestResourceConnection>,boost::move_detail::identity<std::weak_ptr<ctu::RestResourceConnection>>,std::owner_less<std::weak_ptr<ctu::RestResourceConnection>>,void>::emplace_unique<std::shared_ptr<ctu::RestResourceConnection>>(a1 + 5, &v19, (__n128 **)string);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  ctu::PathView::advance((uint64_t)a3, 1);
  unint64_t v6 = v21;
  long long v7 = (const char *)(v21 + 8);
  if (*(char *)(v21 + 31) < 0) {
    long long v7 = *(const char **)v7;
  }
  xpc_object_t v18 = xpc_string_create(v7);
  if (!v18) {
    xpc_object_t v18 = xpc_null_create();
  }
  if (a3[3])
  {
    long long v8 = *a3;
    unint64_t v9 = (unsigned char *)a3[2] - (unsigned char *)*a3;
    if (v9 > 1)
    {
      if (v9 - 1 >= (unint64_t)a3[1]) {
        size_t v10 = (size_t)a3[1];
      }
      else {
        size_t v10 = v9 - 1;
      }
      if (!v8) {
        goto LABEL_25;
      }
    }
    else
    {
      if (v9 >= (unint64_t)a3[1]) {
        size_t v10 = (size_t)a3[1];
      }
      else {
        size_t v10 = (unsigned char *)a3[2] - (unsigned char *)*a3;
      }
      if (!v8) {
        goto LABEL_25;
      }
    }
LABEL_18:
    std::string::basic_string[abi:ne180100](string, v8, v10);
    if (v16 >= 0) {
      uint64_t v11 = string;
    }
    else {
      uint64_t v11 = *(char **)string;
    }
    goto LABEL_26;
  }
  long long v8 = *a3;
  size_t v10 = (size_t)a3[1];
  if (*a3) {
    goto LABEL_18;
  }
LABEL_25:
  memset(string, 0, sizeof(string));
  uint64_t v11 = string;
  uint64_t v16 = 0;
LABEL_26:
  xpc_object_t v17 = xpc_string_create(v11);
  if (!v17) {
    xpc_object_t v17 = xpc_null_create();
  }
  ctu::PropertyRestResource::getResourceArray((ctu::PropertyRestResource *)a1, &object);
  xpc_object_t v14 = object;
  if (object) {
    xpc_retain(object);
  }
  else {
    xpc_object_t v14 = xpc_null_create();
  }
  (*(void (**)(uint64_t, unint64_t, xpc_object_t *, xpc_object_t *, xpc_object_t *))(*(void *)a2 + 48))(a2, v6, &v18, &v17, &v14);
  xpc_release(v14);
  xpc_object_t v14 = 0;
  xpc_release(object);
  xpc_release(v17);
  xpc_object_t v17 = 0;
  if (SHIBYTE(v16) < 0) {
    operator delete(*(void **)string);
  }
  xpc_release(v18);
LABEL_34:
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  return 1;
}

void sub_192067CA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, xpc_object_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, xpc_object_t a18, xpc_object_t object, uint64_t a20,uint64_t a21)
{
  xpc_release(object);
  uint64_t v23 = *(std::__shared_weak_count **)(v21 - 40);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  _Unwind_Resume(a1);
}

uint64_t ctu::PropertyRestResource::handleMessage_Meta_Watched_PUSH(uint64_t *a1, uint64_t a2, void **a3)
{
  (**(void (***)(unint64_t *__return_ptr, uint64_t))a2)(&v21, a2);
  if (!v21) {
    goto LABEL_34;
  }
  unint64_t v19 = v21;
  CFTypeID v20 = v22;
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(string, 170, sizeof(string));
  boost::container::dtl::flat_tree<std::weak_ptr<ctu::RestResourceConnection>,boost::move_detail::identity<std::weak_ptr<ctu::RestResourceConnection>>,std::owner_less<std::weak_ptr<ctu::RestResourceConnection>>,void>::emplace_unique<std::shared_ptr<ctu::RestResourceConnection>>(a1 + 8, &v19, (__n128 **)string);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  ctu::PathView::advance((uint64_t)a3, 2);
  xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  ctu::PropertyRestResource::getWatchedResourceArray((ctu::PropertyRestResource *)a1, &object);
  unint64_t v6 = v21;
  long long v7 = (const char *)(v21 + 8);
  if (*(char *)(v21 + 31) < 0) {
    long long v7 = *(const char **)v7;
  }
  xpc_object_t v17 = xpc_string_create(v7);
  if (!v17) {
    xpc_object_t v17 = xpc_null_create();
  }
  if (a3[3])
  {
    long long v8 = *a3;
    unint64_t v9 = (unsigned char *)a3[2] - (unsigned char *)*a3;
    if (v9 > 1)
    {
      if (v9 - 1 >= (unint64_t)a3[1]) {
        size_t v10 = (size_t)a3[1];
      }
      else {
        size_t v10 = v9 - 1;
      }
      if (!v8) {
        goto LABEL_25;
      }
    }
    else
    {
      if (v9 >= (unint64_t)a3[1]) {
        size_t v10 = (size_t)a3[1];
      }
      else {
        size_t v10 = (unsigned char *)a3[2] - (unsigned char *)*a3;
      }
      if (!v8) {
        goto LABEL_25;
      }
    }
LABEL_18:
    std::string::basic_string[abi:ne180100](string, v8, v10);
    if (v15 >= 0) {
      uint64_t v11 = string;
    }
    else {
      uint64_t v11 = *(char **)string;
    }
    goto LABEL_26;
  }
  long long v8 = *a3;
  size_t v10 = (size_t)a3[1];
  if (*a3) {
    goto LABEL_18;
  }
LABEL_25:
  memset(string, 0, sizeof(string));
  uint64_t v11 = string;
  uint64_t v15 = 0;
LABEL_26:
  xpc_object_t v16 = xpc_string_create(v11);
  if (!v16) {
    xpc_object_t v16 = xpc_null_create();
  }
  xpc_object_t v13 = object;
  if (object) {
    xpc_retain(object);
  }
  else {
    xpc_object_t v13 = xpc_null_create();
  }
  (*(void (**)(uint64_t, unint64_t, xpc_object_t *, xpc_object_t *, xpc_object_t *))(*(void *)a2 + 48))(a2, v6, &v17, &v16, &v13);
  xpc_release(v13);
  xpc_release(v16);
  xpc_object_t v16 = 0;
  if (SHIBYTE(v15) < 0) {
    operator delete(*(void **)string);
  }
  xpc_release(v17);
  xpc_release(object);
LABEL_34:
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  return 1;
}

void sub_192067F70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, xpc_object_t a17, xpc_object_t object, xpc_object_t a19, uint64_t a20,uint64_t a21)
{
  xpc_release(object);
  xpc_release(a19);
  uint64_t v23 = *(std::__shared_weak_count **)(v21 - 40);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  _Unwind_Resume(a1);
}

uint64_t ctu::PropertyRestResource::handleMessage_Resource_PUSH(void ***a1, ctu::RestResourceContext *a2, uint64_t a3, unsigned char *a4, size_t a5)
{
  size_t v10 = a1 + 2;
  if (a4) {
    std::string::basic_string[abi:ne180100](__p, a4, a5);
  }
  else {
    memset(__p, 0, 24);
  }
  boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>>::find((uint64_t)&v32, v10, (void **)__p);
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if (a4) {
      goto LABEL_6;
    }
  }
  else if (a4)
  {
LABEL_6:
    std::string::basic_string[abi:ne180100](__p, a4, a5);
    goto LABEL_9;
  }
  memset(__p, 0, 24);
LABEL_9:
  BOOL v11 = ctu::PropertyRestResource::createIfNotPresent((uint64_t)a1, (uint64_t)__p, &v32);
  BOOL v12 = v11;
  if ((__p[23] & 0x80000000) == 0)
  {
    if (!v11) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  operator delete(*(void **)__p);
  if (v12)
  {
LABEL_11:
    long long v13 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)std::string __p = *(_OWORD *)a3;
    *(_OWORD *)&__p[16] = v13;
    ctu::PathView::advance((uint64_t)__p, -2);
    ctu::PropertyRestResource::sendResourcesNotification((ctu::PropertyRestResource *)a1, a2, (const ctu::PathView *)__p);
  }
LABEL_12:
  (**(void (***)(unint64_t *__return_ptr, ctu::RestResourceContext *))a2)(&v29, a2);
  if (v29)
  {
    uint64_t v14 = v32;
    uint64_t v15 = *(ctu::rest::WatchableRestResourceHelper **)(v32 + 24);
    uint64_t v16 = *((void *)v15 + 1);
    ctu::rest::WatchableRestResourceHelper::cleanupExpired(v15);
    xpc_object_t v17 = *(uint64_t **)(v14 + 24);
    unint64_t v27 = v29;
    long long v28 = v30;
    if (v30) {
      atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    memset(__p, 170, 16);
    boost::container::dtl::flat_tree<std::weak_ptr<ctu::RestResourceConnection>,boost::move_detail::identity<std::weak_ptr<ctu::RestResourceConnection>>,std::owner_less<std::weak_ptr<ctu::RestResourceConnection>>,void>::emplace_unique<std::shared_ptr<ctu::RestResourceConnection>>(v17, &v27, (__n128 **)__p);
    if (v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v28);
    }
    if ((v16 != 0) != (*(void *)(*(void *)(v14 + 24) + 8) != 0)) {
      ctu::PropertyRestResource::sendWatchedResourcesNotification((ctu::PropertyRestResource *)a1, a2, (const ctu::PathView *)a3);
    }
    if (*((unsigned char *)a1 + 8))
    {
      if (*(void *)(a3 + 24))
      {
        xpc_object_t v18 = *(void **)a3;
        unint64_t v19 = *(void *)(a3 + 16) - *(void *)a3;
        if (v19 > 1)
        {
          if (v19 - 1 >= *(void *)(a3 + 8)) {
            size_t v20 = *(void *)(a3 + 8);
          }
          else {
            size_t v20 = v19 - 1;
          }
        }
        else if (v19 >= *(void *)(a3 + 8))
        {
          size_t v20 = *(void *)(a3 + 8);
        }
        else
        {
          size_t v20 = *(void *)(a3 + 16) - *(void *)a3;
        }
      }
      else
      {
        xpc_object_t v18 = *(void **)a3;
        size_t v20 = *(void *)(a3 + 8);
      }
      memset(__p, 170, 24);
      if (v18) {
        std::string::basic_string[abi:ne180100](__p, v18, v20);
      }
      else {
        memset(__p, 0, 24);
      }
      ctu::path_join_impl((std::string *)__p, a4, a5);
      unint64_t v21 = v29;
      long long v22 = (const char *)(v29 + 8);
      if (*(char *)(v29 + 31) < 0) {
        long long v22 = *(const char **)v22;
      }
      xpc_object_t v26 = xpc_string_create(v22);
      if (!v26) {
        xpc_object_t v26 = xpc_null_create();
      }
      if (__p[23] >= 0) {
        uint64_t v23 = __p;
      }
      else {
        uint64_t v23 = *(const char **)__p;
      }
      xpc_object_t object = xpc_string_create(v23);
      if (!object) {
        xpc_object_t object = xpc_null_create();
      }
      (*(void (**)(ctu::RestResourceContext *, unint64_t, xpc_object_t *, xpc_object_t *, uint64_t))(*(void *)a2 + 48))(a2, v21, &v26, &object, *(void *)(v14 + 24) + 24);
      xpc_release(object);
      xpc_release(v26);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }
  }
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  return 1;
}

void sub_19206830C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, xpc_object_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::PropertyRestResource::handleRestMessage_NOTIFY(ctu::PropertyRestResource *this, ctu::RestResourceContext *a2, const ctu::PathView *a3)
{
  return 0;
}

void ctu::PropertyRestResource::getResourceArray(ctu::PropertyRestResource *this@<X0>, xpc_object_t *a2@<X8>)
{
  *a2 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_array_create(0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x192FEE1B0](v5) == MEMORY[0x1E4F14568])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  uint64_t v7 = *((void *)this + 3);
  if (v7)
  {
    long long v8 = (long long *)*((void *)this + 2);
    uint64_t v9 = 32 * v7;
    do
    {
      if (*((char *)v8 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v8, *((void *)v8 + 1));
      }
      else
      {
        long long v10 = *v8;
        __p.__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v10;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      xpc_object_t v12 = xpc_string_create((const char *)p_p);
      if (!v12) {
        xpc_object_t v12 = xpc_null_create();
      }
      xpc_array_append_value(*a2, v12);
      xpc_release(v12);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      v8 += 2;
      v9 -= 32;
    }
    while (v9);
  }
}

void sub_1920684FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  xpc::array::~array(v14);
  _Unwind_Resume(a1);
}

uint64_t ctu::PropertyRestResource::handleDroppedConnection(uint64_t a1, ctu::RestResourceContext *a2, _OWORD *a3, void *a4)
{
  ctu::rest::WatchableRestResourceHelper::removeWatcher((void *)(a1 + 40), a4);
  ctu::rest::WatchableRestResourceHelper::removeWatcher((void *)(a1 + 64), a4);
  long long v8 = a3[1];
  v16[0] = *a3;
  v16[1] = v8;
  uint64_t result = ctu::PathView::advance((uint64_t)v16, 1);
  uint64_t v10 = *(void *)(a1 + 24);
  if (v10)
  {
    BOOL v11 = *(void ***)(a1 + 16);
    uint64_t v12 = 32 * v10;
    do
    {
      int v13 = *((char *)v11 + 23);
      if (v13 >= 0) {
        uint64_t v14 = v11;
      }
      else {
        uint64_t v14 = *v11;
      }
      if (v13 >= 0) {
        size_t v15 = *((unsigned __int8 *)v11 + 23);
      }
      else {
        size_t v15 = (size_t)v11[1];
      }
      uint64_t result = ctu::PropertyRestResource::handleMessage_Resource_POP((void ***)a1, a2, (const ctu::PathView *)v16, v14, v15);
      v11 += 4;
      v12 -= 32;
    }
    while (v12);
  }
  return result;
}

void ctu::PropertyRestResource::getWatchedResourceArray(ctu::PropertyRestResource *this@<X0>, xpc_object_t *a2@<X8>)
{
  *a2 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_array_create(0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x192FEE1B0](v5) == MEMORY[0x1E4F14568])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  uint64_t v7 = *((void *)this + 3);
  if (v7)
  {
    uint64_t v8 = *((void *)this + 2);
    uint64_t v9 = v8 + 32 * v7;
    do
    {
      uint64_t v10 = *(uint64_t **)(v8 + 24);
      uint64_t v11 = v10[1];
      if (v11)
      {
        uint64_t v12 = *v10;
        uint64_t v13 = 16 * v11;
        uint64_t v14 = v12 + 8;
        while (!*(void *)v14 || *(void *)(*(void *)v14 + 8) == -1)
        {
          v14 += 16;
          v13 -= 16;
          if (!v13) {
            goto LABEL_22;
          }
        }
        size_t v15 = (const char *)v8;
        if (*(char *)(v8 + 23) < 0) {
          size_t v15 = *(const char **)v8;
        }
        xpc_object_t v16 = xpc_string_create(v15);
        if (!v16) {
          xpc_object_t v16 = xpc_null_create();
        }
        xpc_array_append_value(*a2, v16);
        xpc_release(v16);
      }
LABEL_22:
      v8 += 32;
    }
    while (v8 != v9);
  }
}

void sub_192068730(_Unwind_Exception *a1)
{
  xpc_release(v2);
  xpc::array::~array(v1);
  _Unwind_Resume(a1);
}

void ctu::PropertyRestResource::sendWatchedResourcesNotification(ctu::PropertyRestResource *this, ctu::RestResourceContext *a2, const ctu::PathView *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (*((void *)this + 9))
  {
    if (*((void *)a3 + 3))
    {
      xpc_object_t v5 = *(void **)a3;
      unint64_t v6 = *((void *)a3 + 2) - *(void *)a3;
      if (v6 > 1)
      {
        if (v6 - 1 >= *((void *)a3 + 1)) {
          size_t v7 = *((void *)a3 + 1);
        }
        else {
          size_t v7 = v6 - 1;
        }
      }
      else if (v6 >= *((void *)a3 + 1))
      {
        size_t v7 = *((void *)a3 + 1);
      }
      else
      {
        size_t v7 = *((void *)a3 + 2) - *(void *)a3;
      }
    }
    else
    {
      xpc_object_t v5 = *(void **)a3;
      size_t v7 = *((void *)a3 + 1);
    }
    memset(&__p, 170, sizeof(__p));
    if (v5) {
      std::string::basic_string[abi:ne180100](&__p, v5, v7);
    }
    else {
      memset(&__p, 0, sizeof(__p));
    }
    ctu::path_join_impl(&__p, "_", 1uLL);
    ctu::path_join_impl(&__p, "watched", 7uLL);
    xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    ctu::PropertyRestResource::getWatchedResourceArray(this, &object);
    uint64_t v12 = 0;
    uint64_t v8 = operator new(0x20uLL);
    *uint64_t v8 = &unk_1EE2F4490;
    v8[1] = a2;
    void v8[2] = &__p;
    void v8[3] = &object;
    uint64_t v12 = v8;
    ctu::rest::WatchableRestResourceHelper::map((void *)this + 8, (uint64_t)v11);
    std::__function::__value_func<void ()(ctu::RestResourceConnection const&)>::~__value_func[abi:ne180100](v11);
    xpc_release(object);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1920688BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
}

void ctu::PropertyRestResource::sendResourcesNotification(ctu::PropertyRestResource *this, ctu::RestResourceContext *a2, const ctu::PathView *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (*((void *)this + 6))
  {
    memset(__p, 170, sizeof(__p));
    if (*((void *)a3 + 3))
    {
      xpc_object_t v5 = *(void **)a3;
      unint64_t v6 = *((void *)a3 + 2) - *(void *)a3;
      if (v6 > 1)
      {
        if (v6 - 1 >= *((void *)a3 + 1)) {
          size_t v7 = *((void *)a3 + 1);
        }
        else {
          size_t v7 = v6 - 1;
        }
        if (!v5) {
          goto LABEL_15;
        }
      }
      else
      {
        if (v6 >= *((void *)a3 + 1)) {
          size_t v7 = *((void *)a3 + 1);
        }
        else {
          size_t v7 = *((void *)a3 + 2) - *(void *)a3;
        }
        if (!v5) {
          goto LABEL_15;
        }
      }
    }
    else
    {
      xpc_object_t v5 = *(void **)a3;
      size_t v7 = *((void *)a3 + 1);
      if (!v5)
      {
LABEL_15:
        memset(__p, 0, sizeof(__p));
LABEL_16:
        xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
        ctu::PropertyRestResource::getResourceArray(this, &object);
        uint64_t v12 = 0;
        uint64_t v8 = operator new(0x20uLL);
        *uint64_t v8 = &unk_1EE2F43E0;
        v8[1] = a2;
        void v8[2] = __p;
        void v8[3] = &object;
        uint64_t v12 = v8;
        ctu::rest::WatchableRestResourceHelper::map((void *)this + 5, (uint64_t)v11);
        std::__function::__value_func<void ()(ctu::RestResourceConnection const&)>::~__value_func[abi:ne180100](v11);
        xpc_release(object);
        if (SHIBYTE(__p[2]) < 0) {
          operator delete(__p[0]);
        }
        return;
      }
    }
    std::string::basic_string[abi:ne180100](__p, v5, v7);
    goto LABEL_16;
  }
}

void sub_192068A5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
}

void std::unique_ptr<ctu::PropertyRestResourceState>::reset[abi:ne180100](void **a1, void *a2)
{
  xpc_object_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    xpc_object_t v4 = boost::container::vector<std::weak_ptr<ctu::RestResourceConnection>,boost::container::new_allocator<std::weak_ptr<ctu::RestResourceConnection>>,void>::~vector(v3);
    operator delete(v4);
  }
}

__n128 std::__function::__func<ctu::PropertyRestResource::handleMessage_Resource_SET(ctu::RestResourceContext &,ctu::PathView const&,ctu::llvm::StringRef,ctu::llvm::StringRef)::$_0,std::allocator<ctu::PropertyRestResource::handleMessage_Resource_SET(ctu::RestResourceContext &,ctu::PathView const&,ctu::llvm::StringRef,ctu::llvm::StringRef)::$_0>,void ()(ctu::RestResourceConnection const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EE2F4438;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<ctu::PropertyRestResource::handleMessage_Resource_SET(ctu::RestResourceContext &,ctu::PathView const&,ctu::llvm::StringRef,ctu::llvm::StringRef)::$_0,std::allocator<ctu::PropertyRestResource::handleMessage_Resource_SET(ctu::RestResourceContext &,ctu::PathView const&,ctu::llvm::StringRef,ctu::llvm::StringRef)::$_0>,void ()(ctu::RestResourceConnection const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE2F4438;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<ctu::PropertyRestResource::handleMessage_Resource_SET(ctu::RestResourceContext &,ctu::PathView const&,ctu::llvm::StringRef,ctu::llvm::StringRef)::$_0,std::allocator<ctu::PropertyRestResource::handleMessage_Resource_SET(ctu::RestResourceContext &,ctu::PathView const&,ctu::llvm::StringRef,ctu::llvm::StringRef)::$_0>,void ()(ctu::RestResourceConnection const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ctu::PropertyRestResource::handleMessage_Resource_SET(ctu::RestResourceContext &,ctu::PathView const&,ctu::llvm::StringRef,ctu::llvm::StringRef)::$_0,std::allocator<ctu::PropertyRestResource::handleMessage_Resource_SET(ctu::RestResourceContext &,ctu::PathView const&,ctu::llvm::StringRef,ctu::llvm::StringRef)::$_0>,void ()(ctu::RestResourceConnection const&)>::target_type()
{
}

__n128 std::__function::__func<ctu::PropertyRestResource::sendResourcesNotification(ctu::RestResourceContext &,ctu::PathView const&)::$_0,std::allocator<ctu::PropertyRestResource::sendResourcesNotification(ctu::RestResourceContext &,ctu::PathView const&)::$_0>,void ()(ctu::RestResourceConnection const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EE2F43E0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<ctu::PropertyRestResource::sendResourcesNotification(ctu::RestResourceContext &,ctu::PathView const&)::$_0,std::allocator<ctu::PropertyRestResource::sendResourcesNotification(ctu::RestResourceContext &,ctu::PathView const&)::$_0>,void ()(ctu::RestResourceConnection const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE2F43E0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ctu::PropertyRestResource::sendResourcesNotification(ctu::RestResourceContext &,ctu::PathView const&)::$_0,std::allocator<ctu::PropertyRestResource::sendResourcesNotification(ctu::RestResourceContext &,ctu::PathView const&)::$_0>,void ()(ctu::RestResourceConnection const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(char *)(a2 + 31) >= 0) {
    xpc_object_t v5 = (const char *)(a2 + 8);
  }
  else {
    xpc_object_t v5 = *(const char **)(a2 + 8);
  }
  xpc_object_t v10 = xpc_string_create(v5);
  if (!v10) {
    xpc_object_t v10 = xpc_null_create();
  }
  unint64_t v6 = *(const char **)(a1 + 16);
  if (v6[23] < 0) {
    unint64_t v6 = *(const char **)v6;
  }
  xpc_object_t v9 = xpc_string_create(v6);
  if (!v9) {
    xpc_object_t v9 = xpc_null_create();
  }
  size_t v7 = **(void ***)(a1 + 24);
  xpc_object_t object = v7;
  if (v7) {
    xpc_retain(v7);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *, xpc_object_t *, xpc_object_t *))(*(void *)v4 + 48))(v4, a2, &v10, &v9, &object);
  xpc_release(object);
  xpc_release(v9);
  xpc_release(v10);
}

void sub_192068D6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, xpc_object_t a11, xpc_object_t a12)
{
}

uint64_t std::__function::__func<ctu::PropertyRestResource::sendResourcesNotification(ctu::RestResourceContext &,ctu::PathView const&)::$_0,std::allocator<ctu::PropertyRestResource::sendResourcesNotification(ctu::RestResourceContext &,ctu::PathView const&)::$_0>,void ()(ctu::RestResourceConnection const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ctu::PropertyRestResource::sendResourcesNotification(ctu::RestResourceContext &,ctu::PathView const&)::$_0,std::allocator<ctu::PropertyRestResource::sendResourcesNotification(ctu::RestResourceContext &,ctu::PathView const&)::$_0>,void ()(ctu::RestResourceConnection const&)>::target_type()
{
}

__n128 std::__function::__func<ctu::PropertyRestResource::sendWatchedResourcesNotification(ctu::RestResourceContext &,ctu::PathView const&)::$_0,std::allocator<ctu::PropertyRestResource::sendWatchedResourcesNotification(ctu::RestResourceContext &,ctu::PathView const&)::$_0>,void ()(ctu::RestResourceConnection const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EE2F4490;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<ctu::PropertyRestResource::sendWatchedResourcesNotification(ctu::RestResourceContext &,ctu::PathView const&)::$_0,std::allocator<ctu::PropertyRestResource::sendWatchedResourcesNotification(ctu::RestResourceContext &,ctu::PathView const&)::$_0>,void ()(ctu::RestResourceConnection const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE2F4490;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<ctu::PropertyRestResource::sendWatchedResourcesNotification(ctu::RestResourceContext &,ctu::PathView const&)::$_0,std::allocator<ctu::PropertyRestResource::sendWatchedResourcesNotification(ctu::RestResourceContext &,ctu::PathView const&)::$_0>,void ()(ctu::RestResourceConnection const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(char *)(a2 + 31) >= 0) {
    xpc_object_t v5 = (const char *)(a2 + 8);
  }
  else {
    xpc_object_t v5 = *(const char **)(a2 + 8);
  }
  xpc_object_t v10 = xpc_string_create(v5);
  if (!v10) {
    xpc_object_t v10 = xpc_null_create();
  }
  unint64_t v6 = *(const char **)(a1 + 16);
  if (v6[23] < 0) {
    unint64_t v6 = *(const char **)v6;
  }
  xpc_object_t v9 = xpc_string_create(v6);
  if (!v9) {
    xpc_object_t v9 = xpc_null_create();
  }
  size_t v7 = **(void ***)(a1 + 24);
  xpc_object_t object = v7;
  if (v7) {
    xpc_retain(v7);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *, xpc_object_t *, xpc_object_t *))(*(void *)v4 + 48))(v4, a2, &v10, &v9, &object);
  xpc_release(object);
  xpc_release(v9);
  xpc_release(v10);
}

void sub_192068F90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, xpc_object_t a11, xpc_object_t a12)
{
}

uint64_t std::__function::__func<ctu::PropertyRestResource::sendWatchedResourcesNotification(ctu::RestResourceContext &,ctu::PathView const&)::$_0,std::allocator<ctu::PropertyRestResource::sendWatchedResourcesNotification(ctu::RestResourceContext &,ctu::PathView const&)::$_0>,void ()(ctu::RestResourceConnection const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ctu::PropertyRestResource::sendWatchedResourcesNotification(ctu::RestResourceContext &,ctu::PathView const&)::$_0,std::allocator<ctu::PropertyRestResource::sendWatchedResourcesNotification(ctu::RestResourceContext &,ctu::PathView const&)::$_0>,void ()(ctu::RestResourceConnection const&)>::target_type()
{
}

uint64_t *boost::container::dtl::value_destructor<boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::PropertyRestResourceState>>>,boost::container::dtl::pair<std::string,std::unique_ptr<ctu::PropertyRestResourceState>>>::~value_destructor(uint64_t *a1)
{
  uint64_t v2 = *a1;
  std::unique_ptr<ctu::PropertyRestResourceState>::reset[abi:ne180100]((void **)(*a1 + 24), 0);
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  return a1;
}

void boost::container::vector<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::PropertyRestResourceState>>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::PropertyRestResourceState>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::PropertyRestResourceState>>>,boost::container::dtl::pair<std::string,std::unique_ptr<ctu::PropertyRestResourceState>>*,boost::container::dtl::pair<std::string,std::unique_ptr<ctu::PropertyRestResourceState>>>>(void *a1, char *a2, long long *a3, long long *a4)
{
  unint64_t v4 = *((void *)a2 + 2);
  unint64_t v5 = 0x3FFFFFFFFFFFFFFLL;
  unint64_t v6 = *((void *)a2 + 1) + 1;
  if (0x3FFFFFFFFFFFFFFLL - v4 < v6 - v4) {
    goto LABEL_27;
  }
  unint64_t v7 = v4 >> 61;
  unint64_t v8 = 8 * v4;
  if (v7 > 4) {
    uint64_t v9 = -1;
  }
  else {
    uint64_t v9 = v8;
  }
  unint64_t v10 = v8 / 5;
  if (v7) {
    unint64_t v10 = v9;
  }
  if (v10 < 0x3FFFFFFFFFFFFFFLL) {
    unint64_t v5 = v10;
  }
  unint64_t v11 = v6 <= v5 ? v5 : *((void *)a2 + 1) + 1;
  if (v11 >> 58) {
LABEL_27:
  }
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
  xpc_object_t v16 = *(char **)a2;
  xpc_object_t v17 = (char *)operator new(32 * v11);
  xpc_object_t v18 = v17;
  unint64_t v19 = *(char **)a2;
  uint64_t v20 = *(void *)a2 + 32 * *((void *)a2 + 1);
  unint64_t v21 = v17;
  if (*(long long **)a2 != a3)
  {
    long long v22 = *(char **)a2;
    unint64_t v21 = v17;
    do
    {
      long long v23 = *(_OWORD *)v22;
      *((void *)v21 + 2) = *((void *)v22 + 2);
      *(_OWORD *)unint64_t v21 = v23;
      *(void *)long long v22 = 0;
      *((void *)v22 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
      uint64_t v24 = *((void *)v22 + 3);
      *((void *)v22 + 2) = 0;
      *((void *)v22 + 3) = 0;
      *((void *)v21 + 3) = v24;
      v21 += 32;
      v22 += 32;
    }
    while (v22 != (char *)a3);
  }
  long long v25 = *a4;
  *((void *)v21 + 2) = *((void *)a4 + 2);
  *(_OWORD *)unint64_t v21 = v25;
  *(void *)a4 = 0;
  *((void *)a4 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
  uint64_t v26 = *((void *)a4 + 3);
  *((void *)a4 + 2) = 0;
  *((void *)a4 + 3) = 0;
  *((void *)v21 + 3) = v26;
  if ((long long *)v20 != a3)
  {
    unint64_t v27 = v21 + 56;
    long long v28 = a3;
    do
    {
      long long v29 = *v28;
      *(v27 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = *((void *)v28 + 2);
      *(_OWORD *)(v27 - 3) = v29;
      *(void *)long long v28 = 0;
      *((void *)v28 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
      uint64_t v30 = *((void *)v28 + 3);
      *((void *)v28 + 2) = 0;
      *((void *)v28 + 3) = 0;
      void *v27 = v30;
      v27 += 4;
      v28 += 2;
    }
    while (v28 != (long long *)v20);
  }
  if (v19)
  {
    uint64_t v31 = *((void *)a2 + 1);
    if (v31)
    {
      uint64_t v32 = (void **)(v19 + 24);
      do
      {
        std::unique_ptr<ctu::PropertyRestResourceState>::reset[abi:ne180100](v32, 0);
        if (*((char *)v32 - 1) < 0) {
          operator delete(*(v32 - 3));
        }
        v32 += 4;
        --v31;
      }
      while (v31);
    }
    operator delete(*(void **)a2);
  }
  uint64_t v33 = *((void *)a2 + 1) + 1;
  *(void *)a2 = v18;
  *((void *)a2 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v33;
  *((void *)a2 + 2) = v11;
  *a1 = &v18[(char *)a3 - v16];
}

uint64_t boost::container::dtl::pair<std::string,std::unique_ptr<ctu::PropertyRestResourceState>>::operator=(uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  unint64_t v5 = (void *)*((void *)a2 + 3);
  *((void *)a2 + 3) = 0;
  std::unique_ptr<ctu::PropertyRestResourceState>::reset[abi:ne180100]((void **)(a1 + 24), v5);
  return a1;
}

dispatch_object_t *ctu::concurrency::PriorityQueue::PriorityQueue(dispatch_object_t *a1, const void **a2)
{
  if (*((char *)a2 + 23) >= 0) {
    size_t v4 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v4 = (size_t)a2[1];
  }
  memset(__p, 170, sizeof(__p));
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v4 + 7);
  if (SHIBYTE(__p[2]) >= 0) {
    unint64_t v5 = __p;
  }
  else {
    unint64_t v5 = (void **)__p[0];
  }
  if (v4)
  {
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = *a2;
    }
    memmove(v5, v6, v4);
  }
  strcpy((char *)v5 + v4, ".normal");
  if (SHIBYTE(__p[2]) >= 0) {
    unint64_t v7 = __p;
  }
  else {
    unint64_t v7 = (void **)__p[0];
  }
  dispatch_queue_t v8 = dispatch_queue_create((const char *)v7, 0);
  *a1 = v8;
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if (v8) {
      goto LABEL_17;
    }
LABEL_51:
    __TUAssertTrigger("fNormalQueue");
  }
  operator delete(__p[0]);
  if (!*a1) {
    goto LABEL_51;
  }
LABEL_17:
  if (*((char *)a2 + 23) >= 0) {
    size_t v9 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v9 = (size_t)a2[1];
  }
  memset(__p, 170, sizeof(__p));
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v9 + 8);
  if (SHIBYTE(__p[2]) >= 0) {
    unint64_t v10 = __p;
  }
  else {
    unint64_t v10 = (void **)__p[0];
  }
  if (v9)
  {
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v11 = a2;
    }
    else {
      unint64_t v11 = *a2;
    }
    memmove(v10, v11, v9);
  }
  strcpy((char *)v10 + v9, ".highest");
  if (SHIBYTE(__p[2]) >= 0) {
    uint64_t v12 = __p;
  }
  else {
    uint64_t v12 = (void **)__p[0];
  }
  dispatch_queue_t v13 = dispatch_queue_create((const char *)v12, 0);
  a1[1] = v13;
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if (v13) {
      goto LABEL_33;
    }
LABEL_53:
    __TUAssertTrigger("fHighestQueue");
  }
  operator delete(__p[0]);
  if (!a1[1]) {
    goto LABEL_53;
  }
LABEL_33:
  if (*((char *)a2 + 23) >= 0) {
    size_t v14 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v14 = (size_t)a2[1];
  }
  memset(__p, 170, sizeof(__p));
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v14 + 5);
  if (SHIBYTE(__p[2]) >= 0) {
    size_t v15 = __p;
  }
  else {
    size_t v15 = (void **)__p[0];
  }
  if (v14)
  {
    if (*((char *)a2 + 23) >= 0) {
      xpc_object_t v16 = a2;
    }
    else {
      xpc_object_t v16 = *a2;
    }
    memmove(v15, v16, v14);
  }
  strcpy((char *)v15 + v14, ".work");
  if (SHIBYTE(__p[2]) >= 0) {
    xpc_object_t v17 = __p;
  }
  else {
    xpc_object_t v17 = (void **)__p[0];
  }
  xpc_object_t v18 = dispatch_queue_create((const char *)v17, 0);
  a1[2] = v18;
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    xpc_object_t v18 = a1[2];
  }
  dispatch_set_target_queue(*a1, v18);
  dispatch_set_target_queue(a1[1], a1[2]);
  return a1;
}

uint64_t ctu::concurrency::PriorityQueue::PriorityQueue(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  xpc_object_t v3 = *(NSObject **)(a2 + 16);
  *(void *)(a1 + 16) = v3;
  dispatch_retain(v3);
  dispatch_retain(*(dispatch_object_t *)(a1 + 8));
  dispatch_retain(*(dispatch_object_t *)a1);
  return a1;
}

void ctu::concurrency::PriorityQueue::~PriorityQueue(dispatch_object_t *this)
{
}

void ctu::concurrency::PriorityQueue::addBlock(NSObject **a1, void *a2, int a3)
{
  if (a3 == 1) {
    ctu::concurrency::PriorityQueue::addHighestPriorityBlock(a1, a2);
  }
  else {
    dispatch_async(*a1, a2);
  }
}

void ctu::concurrency::PriorityQueue::addHighestPriorityBlock(NSObject **a1, const void *a2)
{
  size_t v4 = *a1;
  dispatch_retain(*a1);
  dispatch_suspend(v4);
  unint64_t v5 = _Block_copy(a2);
  unint64_t v6 = a1[1];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1107296256;
  v7[2] = ___ZNK3ctu11concurrency13PriorityQueue23addHighestPriorityBlockEU13block_pointerFvvE_block_invoke;
  v7[3] = &__block_descriptor_tmp_12;
  v7[4] = v5;
  void v7[5] = v4;
  dispatch_async(v6, v7);
}

void ctu::concurrency::PriorityQueue::addBlockSync(dispatch_object_t *a1, void *a2, int a3)
{
  if (a3 == 1) {
    ctu::concurrency::PriorityQueue::addHighestPriorityBlockSync(a1, a2);
  }
  else {
    dispatch_sync(*a1, a2);
  }
}

void ctu::concurrency::PriorityQueue::addHighestPriorityBlockSync(dispatch_object_t *a1, void *a2)
{
  dispatch_suspend(*a1);
  dispatch_sync(a1[1], a2);
  size_t v4 = *a1;

  dispatch_resume(v4);
}

void ctu::concurrency::PriorityQueue::addBlock(NSObject **a1, dispatch_group_t group, void *a3, int a4)
{
  if (a4 == 1) {
    ctu::concurrency::PriorityQueue::addHighestPriorityBlock(a1, group, a3);
  }
  else {
    dispatch_group_async(group, *a1, a3);
  }
}

void ctu::concurrency::PriorityQueue::addHighestPriorityBlock(NSObject **a1, NSObject *a2, const void *a3)
{
  unint64_t v6 = *a1;
  dispatch_retain(*a1);
  dispatch_suspend(v6);
  unint64_t v7 = _Block_copy(a3);
  dispatch_queue_t v8 = a1[1];
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 1107296256;
  _OWORD v9[2] = ___ZNK3ctu11concurrency13PriorityQueue23addHighestPriorityBlockEP16dispatch_group_sU13block_pointerFvvE_block_invoke;
  v9[3] = &__block_descriptor_tmp_9_1;
  v9[4] = v7;
  void v9[5] = v6;
  dispatch_group_async(a2, v8, v9);
}

void ctu::concurrency::PriorityQueue::notifyOn(NSObject **a1, dispatch_group_t group, void *aBlock, int a4)
{
  if (a4 == 1)
  {
    unint64_t v6 = _Block_copy(aBlock);
    global_queue = dispatch_get_global_queue(2, 0);
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 1107296256;
    _OWORD v9[2] = ___ZNK3ctu11concurrency13PriorityQueue8notifyOnEP16dispatch_group_sU13block_pointerFvvENS1_8PriorityE_block_invoke;
    v9[3] = &__block_descriptor_tmp_15;
    v9[4] = v6;
    void v9[5] = a1;
    dispatch_group_notify(group, global_queue, v9);
  }
  else
  {
    dispatch_queue_t v8 = *a1;
    dispatch_group_notify(group, v8, aBlock);
  }
}

void ___ZNK3ctu11concurrency13PriorityQueue8notifyOnEP16dispatch_group_sU13block_pointerFvvENS1_8PriorityE_block_invoke(uint64_t a1)
{
  ctu::concurrency::PriorityQueue::addHighestPriorityBlock(*(NSObject ***)(a1 + 40), *(const void **)(a1 + 32));
  uint64_t v2 = *(const void **)(a1 + 32);

  _Block_release(v2);
}

void __copy_helper_block_e8_32b(uint64_t a1, uint64_t a2)
{
}

void __destroy_helper_block_e8_32b(uint64_t a1)
{
}

void ___ZNK3ctu11concurrency13PriorityQueue23addHighestPriorityBlockEP16dispatch_group_sU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  _Block_release(*(const void **)(a1 + 32));
  dispatch_resume(*(dispatch_object_t *)(a1 + 40));
  uint64_t v2 = *(NSObject **)(a1 + 40);

  dispatch_release(v2);
}

void ___ZNK3ctu11concurrency13PriorityQueue23addHighestPriorityBlockEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  _Block_release(*(const void **)(a1 + 32));
  dispatch_resume(*(dispatch_object_t *)(a1 + 40));
  uint64_t v2 = *(NSObject **)(a1 + 40);

  dispatch_release(v2);
}

void ctu::concurrency::PriorityQueue::suspend(dispatch_object_t *this)
{
}

void ctu::concurrency::PriorityQueue::resume(dispatch_object_t *this)
{
}

void ctu::concurrency::PriorityQueue::assertSynchronized(dispatch_queue_t *this)
{
}

void **ctu::XpcServerHelper::XpcServerHelper(void **a1, void **a2)
{
  xpc_object_t v3 = *a2;
  *a1 = *a2;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    *a1 = xpc_null_create();
  }
  return a1;
}

void ctu::XpcServerHelper::~XpcServerHelper(xpc_connection_t *this)
{
  xpc_object_t v2 = xpc_null_create();
  xpc_object_t v3 = v2;
  ctu::XpcServerHelper::setListener(this, &v3);
  xpc_release(v2);
  xpc_release(*this);
  *this = 0;
}

void ctu::XpcServerHelper::setListener(xpc_connection_t *a1, xpc_object_t *a2)
{
  if (MEMORY[0x192FEE1B0](*a1) == MEMORY[0x1E4F14578]) {
    xpc_connection_cancel(*a1);
  }
  xpc_object_t v4 = *a2;
  if (v4) {
    xpc_retain(v4);
  }
  else {
    xpc_object_t v4 = xpc_null_create();
  }
  xpc_connection_t v5 = *a1;
  *a1 = (xpc_connection_t)v4;
  xpc_release(v5);
}

void ctu::XpcServerHelper::flush(_xpc_connection_s **this, const group *a2)
{
  if (MEMORY[0x192FEE1B0](*this) == MEMORY[0x1E4F14578])
  {
    gr_name = a2->gr_name;
    if (gr_name)
    {
      dispatch_retain((dispatch_object_t)gr_name);
      dispatch_group_enter((dispatch_group_t)gr_name);
    }
    xpc_connection_t v5 = *this;
    barrier[0] = MEMORY[0x1E4F143A8];
    barrier[1] = 1174405120;
    barrier[2] = ___ZNK3ctu15XpcServerHelper5flushERKN8dispatch5groupE_block_invoke;
    barrier[3] = &__block_descriptor_tmp_16;
    dispatch_group_t group = (dispatch_group_t)gr_name;
    if (gr_name)
    {
      dispatch_retain((dispatch_object_t)gr_name);
      dispatch_group_enter(group);
    }
    xpc_connection_send_barrier(v5, barrier);
    if (group)
    {
      dispatch_group_leave(group);
      if (group) {
        dispatch_release(group);
      }
    }
    if (gr_name)
    {
      dispatch_group_leave((dispatch_group_t)gr_name);
      dispatch_release((dispatch_object_t)gr_name);
    }
  }
}

void sub_192069B9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, dispatch_group_t group)
{
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  if (v14)
  {
    dispatch_group_leave(v14);
    dispatch_release(v14);
  }
  _Unwind_Resume(exception_object);
}

void _rest_api_misuse(const char *a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v1 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v1 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v10 = v1;
  long long v11 = v1;
  long long v8 = v1;
  long long v9 = v1;
  long long v6 = v1;
  long long v7 = v1;
  long long v4 = v1;
  long long v5 = v1;
  *(_OWORD *)std::string __str = v1;
  long long v3 = v1;
  snprintf(__str, 0xA0uLL, "REST API Misuse: %s", a1);
  qword_1E9300BC8 = (uint64_t)__str;
  abort();
}

os_log_t ___ZN3ctu16sGetResXpcLoggerEv_block_invoke()
{
  os_log_t result = os_log_create("com.apple.commcenter", "rest.xpc");
  _MergedGlobals_1 = (uint64_t)result;
  return result;
}

std::string *ctu::RestXpcListener::Configuration::Configuration(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  return this;
}

{
  long long v3;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  return this;
}

uint64_t ctu::RestXpcListener::Configuration::isEntitled(const char *a1, void *a2)
{
  if (MEMORY[0x192FEE1B0](*a2) != MEMORY[0x1E4F14578]) {
    return 0;
  }
  if (a1[23] < 0)
  {
    if (*((void *)a1 + 1))
    {
LABEL_5:
      memset(v11, 0, sizeof(v11));
      xpc_connection_get_audit_token();
      long long v4 = (void *)xpc_copy_entitlement_for_token();
      uint64_t v5 = MEMORY[0x1E4F14590];
      if (v4 || (long long v4 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x192FEE1B0](v4) == v5)
        {
          xpc_retain(v4);
          xpc_object_t v6 = v4;
        }
        else
        {
          xpc_object_t v6 = xpc_null_create();
        }
      }
      else
      {
        xpc_object_t v6 = xpc_null_create();
        long long v4 = 0;
      }
      xpc_release(v4);
      if (MEMORY[0x192FEE1B0](v6) != v5) {
        goto LABEL_18;
      }
      if (a1[23] < 0) {
        a1 = *(const char **)a1;
      }
      if (xpc_dictionary_get_value(v6, a1)
        && (xpc_object_t v9 = xpc_dictionary_get_value(v6, a1), MEMORY[0x192FEE1B0](v9) == MEMORY[0x1E4F14570]))
      {
        xpc_object_t value = xpc_dictionary_get_value(v6, a1);
        BOOL v3 = xpc_BOOL_get_value(value);
      }
      else
      {
LABEL_18:
        BOOL v3 = 0;
      }
      xpc_release(v6);
      return v3;
    }
  }
  else if (a1[23])
  {
    goto LABEL_5;
  }
  if (qword_1EB465368 != -1) {
    dispatch_once(&qword_1EB465368, &__block_literal_global_2);
  }
  long long v7 = _MergedGlobals_1;
  if (os_log_type_enabled((os_log_t)_MergedGlobals_1, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v11[0]) = 0;
    _os_log_debug_impl(&dword_192046000, v7, OS_LOG_TYPE_DEBUG, "Entitlement policy not used by RestXpcListener. Clients always allowed", (uint8_t *)v11, 2u);
  }
  return 1;
}

void sub_192069EF8(_Unwind_Exception *a1)
{
  xpc_release(v1);
  _Unwind_Resume(a1);
}

void ctu::RestXpcListener::create(xpc_object_t *a1@<X0>, dispatch_object_t *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  long long v8 = operator new(0x68uLL);
  xpc_object_t v13 = *a1;
  *a1 = xpc_null_create();
  dispatch_object_t object = *a2;
  *a2 = 0;
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  ctu::RestXpcListener::RestXpcListener((uint64_t)v8, &v13, &object, (long long *)&__p);
  *a4 = v8;
  xpc_object_t v9 = (std::__shared_weak_count *)operator new(0x20uLL);
  v9->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE2F8D18;
  v9->__shared_owners_ = 0;
  v9->__shared_weak_owners_ = 0;
  v9[1].__vftable = (std::__shared_weak_count_vtbl *)v8;
  a4[1] = v9;
  long long v10 = (std::__shared_weak_count *)*((void *)v8 + 2);
  if (v10)
  {
    if (v10->__shared_owners_ != -1) {
      goto LABEL_9;
    }
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)v8 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v8;
    *((void *)v8 + 2) = v9;
    std::__shared_weak_count::__release_weak(v10);
  }
  else
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)v8 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v8;
    *((void *)v8 + 2) = v9;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v9);
LABEL_9:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (object) {
    dispatch_release(object);
  }
  xpc_release(v13);
}

void sub_19206A074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, dispatch_object_t object, xpc_object_t a17)
{
  if (object) {
    dispatch_release(object);
  }
  xpc_release(a17);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void xpc::connection::~connection(xpc_object_t *this)
{
  *this = 0;
}

uint64_t ctu::RestXpcListener::RestXpcListener(uint64_t a1, xpc_object_t *a2, void *a3, long long *a4)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EE2F68E8;
  *(void *)(a1 + 24) = *a2;
  *a2 = xpc_null_create();
  *(void *)(a1 + 32) = *a3;
  *a3 = 0;
  long long v7 = (std::string *)(a1 + 40);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v8 = *a4;
    *(void *)(a1 + 56) = *((void *)a4 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  *(void *)(a1 + 64) = 0;
  xpc_object_t v9 = xpc_null_create();
  long long v11 = v9;
  ctu::XpcServerHelper::XpcServerHelper((void **)(a1 + 72), &v11);
  xpc_release(v9);
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  return a1;
}

void sub_19206A214(_Unwind_Exception *a1)
{
  long long v4 = *(NSObject **)(v1 + 32);
  if (v4) {
    dispatch_release(v4);
  }
  xpc::connection::~connection(v2);
  uint64_t v5 = *(std::__shared_weak_count **)(v1 + 16);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  _Unwind_Resume(a1);
}

void ctu::RestXpcListener::weak_from_this(ctu::RestXpcListener *this@<X0>, void *a2@<X8>)
{
  BOOL v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (!v3 || (v5 = *((void *)this + 1), (xpc_object_t v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  *a2 = v5;
  a2[1] = v6;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);

  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
}

void ctu::RestXpcListener::createConnector(xpc_connection_t *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::RestXpcListener::createPeerConnection(this, &object);
  ctu::rest::RestXpcConnector::create(&object, a2);
  xpc_release(object);
}

void sub_19206A2F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void ctu::RestXpcListener::createPeerConnection(xpc_connection_t *this@<X0>, void *a2@<X8>)
{
  ctu::RestXpcListener::getXpcEndpoint(this, &v7);
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v3 = xpc_null_create();
  *a2 = v3;
  long long v4 = v7;
  if (MEMORY[0x192FEE1B0](v7) == MEMORY[0x1E4F145A0])
  {
    uint64_t v5 = xpc_connection_create_from_endpoint(v4);
    if (!v5) {
      uint64_t v5 = xpc_null_create();
    }
    xpc_object_t v6 = xpc_null_create();
    *a2 = v5;
    xpc_release(v3);
    xpc_release(v6);
  }
  xpc_release(v4);
}

void ctu::RestXpcListener::startListening(ctu::RestXpcListener *this)
{
  xpc_object_t v2 = (xpc_object_t)*((void *)this + 3);
  xpc_object_t v9 = v2;
  if (v2)
  {
    xpc_retain(v2);
  }
  else
  {
    xpc_object_t v2 = xpc_null_create();
    xpc_object_t v9 = v2;
  }
  xpc_object_t v3 = (xpc_connection_t *)((char *)this + 72);
  ctu::XpcServerHelper::setListener((xpc_connection_t *)this + 9, &v9);
  xpc_release(v2);
  long long v4 = *((void *)this + 4);
  if (v4) {
    dispatch_retain(*((dispatch_object_t *)this + 4));
  }
  ctu::RestXpcListener::weak_from_this(this, &v7);
  if (MEMORY[0x192FEE1B0](*v3) == MEMORY[0x1E4F14578])
  {
    xpc_object_t v6 = *v3;
    handler[0] = MEMORY[0x1E4F143A8];
    handler[1] = 1174405120;
    handler[2] = ___ZN3ctu15XpcServerHelper13startListenerINS_15RestXpcListenerEEEvN8dispatch5queueENSt3__18weak_ptrIT_EE_block_invoke;
    handler[3] = &__block_descriptor_tmp_18_0;
    uint64_t v5 = v8;
    handler[4] = v3;
    void handler[5] = v7;
    long long v11 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v12 = v6;
    xpc_connection_set_event_handler(v6, handler);
    xpc_connection_set_target_queue(*v3, v4);
    xpc_connection_resume(*v3);
    if (v11) {
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    uint64_t v5 = v8;
  }
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  if (v4) {
    dispatch_release(v4);
  }
}

void sub_19206A528(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a19)
  {
    std::__shared_weak_count::__release_weak(a19);
    if (!v20)
    {
LABEL_3:
      if (!v19) {
LABEL_8:
      }
        _Unwind_Resume(exception_object);
LABEL_7:
      dispatch_release(v19);
      goto LABEL_8;
    }
  }
  else if (!v20)
  {
    goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v20);
  if (!v19) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void *ctu::RestXpcListener::getXpcEndpoint@<X0>(xpc_connection_t *this@<X0>, void *a2@<X8>)
{
  os_log_t result = xpc_endpoint_create(this[3]);
  *a2 = result;
  if (!result)
  {
    os_log_t result = xpc_null_create();
    *a2 = result;
  }
  return result;
}

void *ctu::RestXpcListener::getOrCreateResourceConnection_sync(void *a1, void **a2, uint64_t a3)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (void *)a1[10];
  unint64_t v6 = a1[11];
  uint64_t v7 = (char *)(a1 + 10);
  if (v6)
  {
    long long v8 = *a2;
    xpc_object_t v9 = &v5[3 * v6];
    do
    {
      unint64_t v10 = v6 >> 1;
      long long v11 = &v5[3 * (v6 >> 1)];
      unint64_t v13 = *v11;
      uint64_t v12 = v11 + 3;
      v6 += ~(v6 >> 1);
      if (v13 >= (unint64_t)v8) {
        unint64_t v6 = v10;
      }
      else {
        uint64_t v5 = v12;
      }
    }
    while (v6);
    if (v5 != v9 && *v5 <= (unint64_t)v8) {
      return v5 + 1;
    }
  }
  std::allocate_shared[abi:ne180100]<ctu::XpcRestResourceConnection,std::allocator<ctu::XpcRestResourceConnection>,xpc::connection const&,std::string,void>(a2, a3, &v44);
  size_t v14 = *a2;
  xpc_object_t v16 = (void *)a1[10];
  unint64_t v15 = a1[11];
  xpc_object_t v17 = &v16[3 * v15];
  if (!v15) {
    goto LABEL_16;
  }
  do
  {
    unint64_t v18 = v15 >> 1;
    unint64_t v19 = &v16[3 * (v15 >> 1)];
    unint64_t v21 = *v19;
    uint64_t v20 = v19 + 3;
    v15 += ~(v15 >> 1);
    if (v21 >= (unint64_t)v14) {
      unint64_t v15 = v18;
    }
    else {
      xpc_object_t v16 = v20;
    }
  }
  while (v15);
  if (v16 == v17 || (xpc_object_t v17 = v16, *v16 > (unint64_t)v14))
  {
LABEL_16:
    if (v14) {
      xpc_retain(v14);
    }
    else {
      size_t v14 = xpc_null_create();
    }
    unint64_t v50 = 0xAAAAAAAAAAAAAAAALL;
    long long v51 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
    xpc_object_t object = v14;
    xpc_object_t v22 = xpc_null_create();
    unint64_t v50 = 0;
    long long v51 = 0;
    uint64_t v46 = 0;
    long long v47 = 0;
    xpc_object_t v45 = v22;
    v48[1] = &object;
    v48[2] = v7;
    uint64_t v24 = (void *)a1[10];
    uint64_t v23 = a1[11];
    uint64_t v25 = (uint64_t)&v24[3 * v23];
    if ((void *)v25 == v17 || *v17 > (unint64_t)object)
    {
      if (v24 == v17) {
        goto LABEL_40;
      }
      uint64_t v26 = v17 - 3;
      unint64_t v27 = *(v17 - 3);
      if (v27 < (unint64_t)object) {
        goto LABEL_40;
      }
      v17 -= 3;
      if (v27 <= (unint64_t)object)
      {
        uint64_t v24 = v26;
LABEL_47:
        xpc_object_t v17 = v24;
        goto LABEL_48;
      }
      if (v26 != v24)
      {
        unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * (v26 - v24);
        do
        {
          unint64_t v29 = v28 >> 1;
          uint64_t v30 = &v24[3 * (v28 >> 1)];
          unint64_t v32 = *v30;
          uint64_t v31 = v30 + 3;
          v28 += ~(v28 >> 1);
          if (v32 >= (unint64_t)object) {
            unint64_t v28 = v29;
          }
          else {
            uint64_t v24 = v31;
          }
        }
        while (v28);
      }
      if (v24 == v26)
      {
LABEL_40:
        if (a1[12] == v23)
        {
          boost::container::vector<boost::container::dtl::pair<xpc::connection,std::shared_ptr<ctu::XpcRestResourceConnection>>,boost::container::new_allocator<boost::container::dtl::pair<xpc::connection,std::shared_ptr<ctu::XpcRestResourceConnection>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<xpc::connection,std::shared_ptr<ctu::XpcRestResourceConnection>>>,boost::container::dtl::pair<xpc::connection,std::shared_ptr<ctu::XpcRestResourceConnection>>*,boost::container::dtl::pair<xpc::connection,std::shared_ptr<ctu::XpcRestResourceConnection>>>>(v48, v7, (uint64_t)v17, (uint64_t)&object);
          goto LABEL_49;
        }
        if ((void *)v25 == v17)
        {
          uint64_t v40 = boost::container::dtl::pair<xpc::connection,std::shared_ptr<ctu::XpcRestResourceConnection>>::pair(v25, (uint64_t)&object);
          ++a1[11];
          xpc_object_t v17 = (void *)v40;
        }
        else
        {
          uint64_t v38 = v25 - 24;
          boost::container::dtl::pair<xpc::connection,std::shared_ptr<ctu::XpcRestResourceConnection>>::pair(v25, v25 - 24);
          ++a1[11];
          for (; (void *)v38 != v17; v38 -= 24)
            boost::container::dtl::pair<xpc::connection,std::shared_ptr<ctu::XpcRestResourceConnection>>::operator=(v38, (xpc_object_t *)(v38 - 24));
          boost::container::dtl::pair<xpc::connection,std::shared_ptr<ctu::XpcRestResourceConnection>>::operator=((uint64_t)v17, &object);
        }
LABEL_48:
        v48[0] = v17;
LABEL_49:
        if (v51) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v51);
        }
        xpc_release(object);
        xpc_object_t v16 = (void *)v48[0];
        if (v47) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v47);
        }
        xpc_release(v45);
        goto LABEL_54;
      }
    }
    else
    {
      unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((v25 - (uint64_t)v17) >> 3);
      uint64_t v24 = v17;
      do
      {
        unint64_t v34 = v33 >> 1;
        long long v35 = &v24[3 * (v33 >> 1)];
        unint64_t v37 = *v35;
        long long v36 = v35 + 3;
        v33 += ~(v33 >> 1);
        if (v37 >= (unint64_t)object) {
          unint64_t v33 = v34;
        }
        else {
          uint64_t v24 = v36;
        }
      }
      while (v33);
      xpc_object_t v17 = (void *)v25;
      if (v24 == (void *)v25) {
        goto LABEL_40;
      }
    }
    xpc_object_t v17 = v24;
    if (*v24 <= (unint64_t)object) {
      goto LABEL_47;
    }
    goto LABEL_40;
  }
LABEL_54:
  long long v41 = v44;
  unint64_t v42 = (std::__shared_weak_count *)v16[2];
  long long v44 = 0uLL;
  *(_OWORD *)(v16 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v41;
  long long v39 = v16 + 1;
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  if (*((void *)&v44 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v44 + 1));
  }
  return v39;
}

void sub_19206A930(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  boost::container::dtl::value_destructor<boost::container::new_allocator<boost::container::dtl::pair<xpc::connection,std::shared_ptr<ctu::XpcRestResourceConnection>>>,boost::container::dtl::pair<xpc::connection,std::shared_ptr<ctu::XpcRestResourceConnection>>>::~value_destructor((xpc_object_t **)va1);
  boost::container::dtl::pair<xpc::connection,std::shared_ptr<ctu::XpcRestResourceConnection>>::~pair((uint64_t)va);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  _Unwind_Resume(a1);
}

unint64_t ctu::RestXpcListener::getResourceConnection_sync@<X0>(unint64_t this@<X0>, const xpc::connection *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v3 = *(void *)(this + 88);
  if (!v3) {
    goto LABEL_9;
  }
  uint64_t v4 = *(unint64_t **)(this + 80);
  unint64_t v5 = *(void *)a2;
  uint64_t v6 = &v4[3 * v3];
  do
  {
    unint64_t v7 = v3 >> 1;
    uint64_t v8 = &v4[3 * (v3 >> 1)];
    unint64_t v10 = *v8;
    xpc_object_t v9 = v8 + 3;
    this = ~(v3 >> 1);
    v3 += this;
    if (v10 >= v5) {
      unint64_t v3 = v7;
    }
    else {
      uint64_t v4 = v9;
    }
  }
  while (v3);
  if (v4 != v6 && *v4 <= v5)
  {
    unint64_t v12 = v4[1];
    unint64_t v11 = v4[2];
    *a3 = v12;
    a3[1] = v11;
    if (v11) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
LABEL_9:
    *a3 = 0;
    a3[1] = 0;
  }
  return this;
}

BOOL ctu::RestXpcListener::handleNewClient(uint64_t a1, xpc_connection_t *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (MEMORY[0x192FEE1B0](*a2) == MEMORY[0x1E4F14578])
  {
    pid_t pid = xpc_connection_get_pid(*a2);
    unint64_t v7 = *a2;
    unint64_t v15 = v7;
    if (v7)
    {
      xpc_retain(v7);
    }
    else
    {
      unint64_t v7 = xpc_null_create();
      unint64_t v15 = v7;
    }
    char isEntitled = ctu::RestXpcListener::Configuration::isEntitled((const char *)(a1 + 40), &v15);
    xpc_release(v7);
    unint64_t v15 = 0;
    if (isEntitled)
    {
      xpc_object_t v9 = *a2;
      if (*a2) {
        xpc_retain(*a2);
      }
      else {
        xpc_object_t v9 = (_xpc_connection_s *)xpc_null_create();
      }
      unint64_t v11 = *(NSObject **)(a1 + 32);
      if (v11) {
        dispatch_retain(*(dispatch_object_t *)(a1 + 32));
      }
      ctu::RestXpcListener::weak_from_this((ctu::RestXpcListener *)a1, &v13);
      *(void *)buf = MEMORY[0x1E4F143A8];
      uint64_t v17 = 1174405120;
      unint64_t v18 = ___ZNK3ctu15XpcServerHelper12acceptClientINS_15RestXpcListenerEEEvN3xpc10connectionEN8dispatch5queueENSt3__18weak_ptrIT_EE_block_invoke;
      unint64_t v19 = &__block_descriptor_tmp_27_0;
      unint64_t v12 = v14;
      uint64_t v20 = v13;
      unint64_t v21 = v14;
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      xpc_object_t v22 = v9;
      xpc_connection_set_event_handler(v9, buf);
      xpc_connection_set_target_queue(v9, v11);
      xpc_connection_resume(v9);
      if (v21) {
        std::__shared_weak_count::__release_weak(v21);
      }
      if (v12) {
        std::__shared_weak_count::__release_weak(v12);
      }
      if (v11) {
        dispatch_release(v11);
      }
      xpc_release(v9);
      return 1;
    }
    else
    {
      if (qword_1EB465368 != -1) {
        dispatch_once(&qword_1EB465368, &__block_literal_global_2);
      }
      unint64_t v10 = _MergedGlobals_1;
      BOOL result = os_log_type_enabled((os_log_t)_MergedGlobals_1, OS_LOG_TYPE_INFO);
      if (result)
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = pid;
        _os_log_impl(&dword_192046000, v10, OS_LOG_TYPE_INFO, "Client [%d] is not entitled and thus is rejected", buf, 8u);
        return 0;
      }
    }
  }
  else
  {
    if (qword_1EB465368 != -1) {
      dispatch_once(&qword_1EB465368, &__block_literal_global_2);
    }
    uint64_t v4 = _MergedGlobals_1;
    BOOL result = os_log_type_enabled((os_log_t)_MergedGlobals_1, OS_LOG_TYPE_ERROR);
    if (result)
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_192046000, v4, OS_LOG_TYPE_ERROR, "New REST XPC client has no valid connection", buf, 2u);
      return 0;
    }
  }
  return result;
}

void sub_19206AC98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void ctu::RestXpcListener::handleClientMessage(ctu::RestXpcListener *this, void **a2, xpc_object_t *a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (xpc_dictionary_get_value(*a3, "r"))
  {
    v17[0] = a3;
    v17[1] = "a";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)v17, &object);
    uint64_t v20 = 0;
    unint64_t v21 = 0;
    uint64_t v22 = 0;
    xpc::dyn_cast_or_default(&object, (uint64_t)&v20, &__p);
    ResourceConnection_sync = ctu::RestXpcListener::getOrCreateResourceConnection_sync(this, a2, (uint64_t)&__p);
    uint64_t v8 = *ResourceConnection_sync;
    unint64_t v7 = (std::__shared_weak_count *)ResourceConnection_sync[1];
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    xpc_release(object);
    v17[0] = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    ctu::rest::createReply(a3, (_anonymous_namespace_ *)v17);
    uint64_t v9 = MEMORY[0x192FEE1B0](v17[0]);
    uint64_t v10 = *((void *)this + 8);
    if (v9 == MEMORY[0x1E4F14590])
    {
      uint64_t v20 = v8;
      unint64_t v21 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      xpc_object_t v12 = *a3;
      xpc_object_t v15 = v12;
      if (v12) {
        xpc_retain(v12);
      }
      else {
        xpc_object_t v15 = xpc_null_create();
      }
      xpc_object_t v13 = v17[0];
      if (v17[0]) {
        xpc_retain(v17[0]);
      }
      else {
        xpc_object_t v13 = xpc_null_create();
      }
      uint64_t v24 = 0;
      v23[0] = &unk_1EE2F83A0;
      v23[1] = v13;
      xpc_object_t v14 = xpc_null_create();
      uint64_t v24 = v23;
      (*(void (**)(uint64_t, uint64_t *, xpc_object_t *, void *))(*(void *)v10 + 24))(v10, &v20, &v15, v23);
      std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100](v23);
      xpc_release(v14);
      xpc_release(v15);
      xpc_object_t v15 = 0;
    }
    else
    {
      uint64_t v20 = v8;
      unint64_t v21 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      xpc_object_t v11 = *a3;
      xpc_object_t v16 = v11;
      if (v11) {
        xpc_retain(v11);
      }
      else {
        xpc_object_t v16 = xpc_null_create();
      }
      (*(void (**)(uint64_t, uint64_t *, xpc_object_t *))(*(void *)v10 + 16))(v10, &v20, &v16);
      xpc_release(v16);
      xpc_object_t v16 = 0;
    }
    if (v21) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v21);
    }
    xpc_release(v17[0]);
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_19206AF98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, xpc_object_t a10, xpc_object_t a11, uint64_t a12, xpc_object_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ctu::RestXpcListener::handleClientError(void *a1, const xpc::connection *a2, xpc_object_t *a3)
{
  uint64_t v6 = a1[8];
  ctu::RestXpcListener::getResourceConnection_sync((unint64_t)a1, a2, (unint64_t *)&v19);
  long long v20 = v19;
  long long v19 = 0uLL;
  xpc_object_t object = *a3;
  *a3 = xpc_null_create();
  (*(void (**)(uint64_t, long long *, xpc_object_t *))(*(void *)v6 + 32))(v6, &v20, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  if (*((void *)&v20 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
  }
  unint64_t v7 = a1[11];
  if (v7)
  {
    unint64_t v8 = *(void *)a2;
    uint64_t v9 = a1[10];
    uint64_t v10 = v9 + 24 * v7;
    do
    {
      unint64_t v11 = v7 >> 1;
      xpc_object_t v12 = (unint64_t *)(v9 + 24 * (v7 >> 1));
      unint64_t v14 = *v12;
      xpc_object_t v13 = v12 + 3;
      v7 += ~(v7 >> 1);
      if (v14 >= v8) {
        unint64_t v7 = v11;
      }
      else {
        uint64_t v9 = (uint64_t)v13;
      }
    }
    while (v7);
    if (v9 != v10 && *(void *)v9 <= v8)
    {
      uint64_t v15 = v9 + 24;
      while (v15 != v10)
      {
        uint64_t v16 = v9 + 24;
        uint64_t v15 = boost::container::dtl::pair<xpc::connection,std::shared_ptr<ctu::XpcRestResourceConnection>>::operator=(v9, (xpc_object_t *)(v9 + 24))+ 48;
        uint64_t v9 = v16;
      }
      uint64_t v17 = *(std::__shared_weak_count **)(v10 - 8);
      if (v17) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      }
      xpc_release(*(xpc_object_t *)(v10 - 24));
      *(void *)(v10 - 24) = 0;
      --a1[11];
    }
  }
}

void sub_19206B1C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(a1);
}

void ctu::RestDispatchListener::create(NSObject **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = operator new(0x50uLL);
  unint64_t v5 = *a1;
  unint64_t v8 = *a1;
  *a1 = 0;
  *a2 = ctu::RestDispatchListener::RestDispatchListener((uint64_t)v4, &v8);
  uint64_t v6 = (std::__shared_weak_count *)operator new(0x20uLL);
  v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE2F8DC0;
  v6->__shared_owners_ = 0;
  v6->__shared_weak_owners_ = 0;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  a2[1] = (uint64_t)v6;
  unint64_t v7 = (std::__shared_weak_count *)*((void *)v4 + 2);
  if (!v7)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)v4 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v4;
    *((void *)v4 + 2) = v6;
    goto LABEL_9;
  }
  if (v7->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)v4 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v4;
    *((void *)v4 + 2) = v6;
    std::__shared_weak_count::__release_weak(v7);
LABEL_9:
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    if (!v5) {
      return;
    }
    goto LABEL_4;
  }
  if (!v5) {
    return;
  }
LABEL_4:

  dispatch_release(v5);
}

void sub_19206B300(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  if (v1) {
    dispatch_release(v1);
  }
  _Unwind_Resume(a1);
}

uint64_t ctu::RestDispatchListener::RestDispatchListener(uint64_t a1, NSObject **a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EE2F65D8;
  unint64_t v3 = *a2;
  *(void *)(a1 + 24) = *a2;
  if (v3) {
    dispatch_retain(v3);
  }
  *(void *)a1 = &unk_1EE2F6DE0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = &unk_1EE2F6E20;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  return a1;
}

uint64_t ctu::RestDispatchListener::createConnector@<X0>(ctu::RestDispatchListener *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::rest::RestDispatchConnector::create(a2);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (!v4 || (v5 = *a2, uint64_t v6 = *((void *)this + 1), (v7 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  unint64_t v8 = v7;
  p_shared_weak_owners = &v7->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  uint64_t v10 = operator new(0x18uLL);
  void *v10 = &unk_1EE2F78F0;
  v10[1] = v6;
  _OWORD v10[2] = v8;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_weak(v8);
  uint64_t result = *(void *)(v5 + 64);
  *(void *)(v5 + 64) = v10;
  if (result)
  {
    xpc_object_t v12 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v12();
  }
  return result;
}

void sub_19206B4E0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_weak(v2);
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 8);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(a1);
}

uint64_t ctu::RestDispatchListener::getResourceConnection_sync@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v3 = *(void *)(result + 64);
  if (!v3) {
    goto LABEL_9;
  }
  uint64_t v4 = *(unint64_t **)(result + 56);
  uint64_t v5 = &v4[3 * v3];
  do
  {
    unint64_t v6 = v3 >> 1;
    unint64_t v7 = &v4[3 * (v3 >> 1)];
    unint64_t v9 = *v7;
    unint64_t v8 = v7 + 3;
    v3 += ~(v3 >> 1);
    if (v9 >= a2) {
      unint64_t v3 = v6;
    }
    else {
      uint64_t v4 = v8;
    }
  }
  while (v3);
  if (v4 != v5 && *v4 <= a2)
  {
    unint64_t v11 = v4[1];
    unint64_t v10 = v4[2];
    *a3 = v11;
    a3[1] = v10;
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
LABEL_9:
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

void non-virtual thunk to'ctu::RestDispatchListener::handleClientMessage(uint64_t a1, long long *a2, xpc_object_t *a3)
{
}

void non-virtual thunk to'ctu::RestDispatchListener::handleClientMessageWithReply(uint64_t a1, uint64_t a2, xpc_object_t *a3, uint64_t a4)
{
}

void ctu::RestDispatchListener::handleClientError(void *a1, uint64_t a2, xpc_object_t *a3)
{
  xpc_object_t v5 = *a3;
  *a3 = xpc_null_create();
  unint64_t v6 = (std::__shared_weak_count *)a1[2];
  if (!v6 || (uint64_t v7 = a1[1], (v8 = std::__shared_weak_count::lock(v6)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  unint64_t v9 = v8;
  unint64_t v10 = operator new(0x18uLL);
  void *v10 = a1;
  v10[1] = a2;
  _OWORD v10[2] = v5;
  xpc_object_t v11 = xpc_null_create();
  xpc_object_t v12 = a1[3];
  atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  xpc_object_t v13 = operator new(0x18uLL);
  void *v13 = v10;
  v13[1] = v7;
  _OWORD v13[2] = v9;
  unint64_t v14 = 0;
  uint64_t v15 = 0;
  dispatch_async_f(v12, v13, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<ctu::RestDispatchListener>::execute_wrapped<ctu::RestDispatchListener::handleClientError(ctu::rest::RestConnectorSourceBase const*,xpc::object)::$_0>(ctu::RestDispatchListener::handleClientError(ctu::rest::RestConnectorSourceBase const*,xpc::object)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ctu::RestDispatchListener::handleClientError(ctu::rest::RestConnectorSourceBase const*,xpc::object)::$_0,dispatch_queue_s *::default_delete<ctu::RestDispatchListener::handleClientError(ctu::rest::RestConnectorSourceBase const*,xpc::object)::$_0>>)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<void ctu::SharedSynchronizable<ctu::RestModuleState>::execute_wrapped<ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0>(ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0 &&)::{lambda(void)#1},std::default_delete<ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0>>::~unique_ptr[abi:ne180100](&v14);
  std::unique_ptr<void ctu::SharedSynchronizable<ctu::RestModuleState>::execute_wrapped<ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0>(ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0 &&)::{lambda(void)#1},std::default_delete<ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0>>::~unique_ptr[abi:ne180100](&v15);
  std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  xpc_release(v11);
}

void non-virtual thunk to'ctu::RestDispatchListener::handleClientError(uint64_t a1, uint64_t a2, xpc_object_t *a3)
{
}

void ctu::RestXpcListener::~RestXpcListener(ctu::RestXpcListener *this)
{
  ctu::RestXpcListener::~RestXpcListener(this);

  operator delete(v1);
}

{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  NSObject *v6;
  std::__shared_weak_count *v7;

  *(void *)this = &unk_1EE2F68E8;
  uint64_t v2 = *((void *)this + 11);
  if (v2)
  {
    unint64_t v3 = *((void *)this + 10);
    do
    {
      uint64_t v4 = *(std::__shared_weak_count **)(v3 + 16);
      if (v4) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      }
      xpc_release(*(xpc_object_t *)v3);
      *(void *)unint64_t v3 = 0;
      v3 += 24;
      --v2;
    }
    while (v2);
  }
  if (*((void *)this + 12)) {
    operator delete(*((void **)this + 10));
  }
  ctu::XpcServerHelper::~XpcServerHelper((xpc_connection_t *)this + 9);
  xpc_object_t v5 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  unint64_t v6 = *((void *)this + 4);
  if (v6) {
    dispatch_release(v6);
  }
  xpc_release(*((xpc_object_t *)this + 3));
  *((void *)this + 3) = 0;
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
}

void ctu::RestDispatchListener::~RestDispatchListener(ctu::RestDispatchListener *this)
{
  *(void *)this = &unk_1EE2F6DE0;
  *((void *)this + 5) = &unk_1EE2F6E20;
  boost::container::vector<boost::container::dtl::pair<ctu::rest::RestConnectorSourceBase const*,std::shared_ptr<ctu::DispatchRestResourceConnection>>,boost::container::new_allocator<boost::container::dtl::pair<ctu::rest::RestConnectorSourceBase const*,std::shared_ptr<ctu::DispatchRestResourceConnection>>>,void>::~vector((void *)this + 7);
  uint64_t v2 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  ctu::SharedSynchronizable<ctu::RestModuleState>::~SharedSynchronizable((void *)this + 1);
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE2F6DE0;
  *((void *)this + 5) = &unk_1EE2F6E20;
  boost::container::vector<boost::container::dtl::pair<ctu::rest::RestConnectorSourceBase const*,std::shared_ptr<ctu::DispatchRestResourceConnection>>,boost::container::new_allocator<boost::container::dtl::pair<ctu::rest::RestConnectorSourceBase const*,std::shared_ptr<ctu::DispatchRestResourceConnection>>>,void>::~vector((void *)this + 7);
  uint64_t v2 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  ctu::SharedSynchronizable<ctu::RestModuleState>::~SharedSynchronizable((void *)this + 1);

  operator delete(this);
}

void non-virtual thunk to'ctu::RestDispatchListener::~RestDispatchListener(ctu::RestDispatchListener *this)
{
  *((void *)this - 5) = &unk_1EE2F6DE0;
  *(void *)this = &unk_1EE2F6E20;
  boost::container::vector<boost::container::dtl::pair<ctu::rest::RestConnectorSourceBase const*,std::shared_ptr<ctu::DispatchRestResourceConnection>>,boost::container::new_allocator<boost::container::dtl::pair<ctu::rest::RestConnectorSourceBase const*,std::shared_ptr<ctu::DispatchRestResourceConnection>>>,void>::~vector((void *)this + 2);
  uint64_t v2 = *((void *)this + 1);
  *((void *)this + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  ctu::SharedSynchronizable<ctu::RestModuleState>::~SharedSynchronizable((void *)this - 4);
}

{
  char *v2;
  uint64_t v3;
  uint64_t vars8;

  uint64_t v2 = (char *)this - 40;
  *((void *)this - 5) = &unk_1EE2F6DE0;
  *(void *)this = &unk_1EE2F6E20;
  boost::container::vector<boost::container::dtl::pair<ctu::rest::RestConnectorSourceBase const*,std::shared_ptr<ctu::DispatchRestResourceConnection>>,boost::container::new_allocator<boost::container::dtl::pair<ctu::rest::RestConnectorSourceBase const*,std::shared_ptr<ctu::DispatchRestResourceConnection>>>,void>::~vector((void *)this + 2);
  unint64_t v3 = *((void *)this + 1);
  *((void *)this + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  ctu::SharedSynchronizable<ctu::RestModuleState>::~SharedSynchronizable((void *)this - 4);

  operator delete(v2);
}

uint64_t boost::container::dtl::pair<xpc::connection,std::shared_ptr<ctu::XpcRestResourceConnection>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  xpc_release(*(xpc_object_t *)a1);
  *(void *)a1 = 0;
  return a1;
}

void *boost::container::vector<boost::container::dtl::pair<ctu::rest::RestConnectorSourceBase const*,std::shared_ptr<ctu::DispatchRestResourceConnection>>,boost::container::new_allocator<boost::container::dtl::pair<ctu::rest::RestConnectorSourceBase const*,std::shared_ptr<ctu::DispatchRestResourceConnection>>>,void>::~vector(void *a1)
{
  uint64_t v2 = a1[1];
  if (v2)
  {
    unint64_t v3 = (std::__shared_weak_count **)(*a1 + 16);
    do
    {
      if (*v3) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*v3);
      }
      v3 += 3;
      --v2;
    }
    while (v2);
  }
  if (a1[2]) {
    operator delete((void *)*a1);
  }
  return a1;
}

void std::__shared_ptr_pointer<ctu::RestXpcListener *,std::shared_ptr<ctu::RestXpcListener>::__shared_ptr_default_delete<ctu::RestXpcListener,ctu::RestXpcListener>,std::allocator<ctu::RestXpcListener>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<ctu::RestXpcListener *,std::shared_ptr<ctu::RestXpcListener>::__shared_ptr_default_delete<ctu::RestXpcListener,ctu::RestXpcListener>,std::allocator<ctu::RestXpcListener>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<ctu::RestXpcListener *,std::shared_ptr<ctu::RestXpcListener>::__shared_ptr_default_delete<ctu::RestXpcListener,ctu::RestXpcListener>,std::allocator<ctu::RestXpcListener>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void ___ZN3ctu15XpcServerHelper13startListenerINS_15RestXpcListenerEEEvN8dispatch5queueENSt3__18weak_ptrIT_EE_block_invoke(void *a1, xpc_object_t a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (!v3) {
    return;
  }
  xpc_object_t v5 = (void *)a1[4];
  unint64_t v6 = std::__shared_weak_count::lock(v3);
  if (!v6) {
    return;
  }
  uint64_t v7 = v6;
  uint64_t v8 = a1[5];
  if (v8)
  {
    uint64_t v9 = MEMORY[0x192FEE1B0](a2);
    uint64_t v10 = MEMORY[0x1E4F14578];
    if (v9 != MEMORY[0x1E4F14578])
    {
      if (v9 == MEMORY[0x1E4F145A8] && *v5 == a1[7])
      {
        if (a2) {
          xpc_retain(a2);
        }
        else {
          a2 = xpc_null_create();
        }
        xpc_release(a2);
      }
      goto LABEL_22;
    }
    if (a2)
    {
      xpc_retain(a2);
      xpc_connection_t v14 = (xpc_connection_t)a2;
      xpc_object_t v11 = (_xpc_connection_s *)a2;
    }
    else
    {
      xpc_object_t v11 = (_xpc_connection_s *)xpc_null_create();
      xpc_connection_t v14 = v11;
      if (!v11)
      {
        xpc_object_t v12 = (_xpc_connection_s *)xpc_null_create();
        xpc_object_t v11 = 0;
        goto LABEL_17;
      }
    }
    if (MEMORY[0x192FEE1B0](v11) == v10)
    {
      xpc_retain(v11);
      xpc_object_t v12 = v11;
      goto LABEL_18;
    }
    xpc_object_t v12 = (_xpc_connection_s *)xpc_null_create();
LABEL_17:
    xpc_connection_t v14 = v12;
LABEL_18:
    BOOL v13 = ctu::RestXpcListener::handleNewClient(v8, &v14);
    xpc_release(v12);
    xpc_connection_t v14 = 0;
    xpc_release(v11);
    if (!v13) {
      xpc_connection_cancel((xpc_connection_t)a2);
    }
  }
LABEL_22:

  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
}

void sub_19206BD20(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c46_ZTSNSt3__18weak_ptrIN3ctu15RestXpcListenerEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c46_ZTSNSt3__18weak_ptrIN3ctu15RestXpcListenerEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

xpc_object_t **boost::container::dtl::value_destructor<boost::container::new_allocator<boost::container::dtl::pair<xpc::connection,std::shared_ptr<ctu::XpcRestResourceConnection>>>,boost::container::dtl::pair<xpc::connection,std::shared_ptr<ctu::XpcRestResourceConnection>>>::~value_destructor(xpc_object_t **a1)
{
  uint64_t v2 = *a1;
  unint64_t v3 = (std::__shared_weak_count *)(*a1)[2];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  xpc_release(*v2);
  xpc_object_t *v2 = 0;
  return a1;
}

uint64_t boost::container::dtl::pair<xpc::connection,std::shared_ptr<ctu::XpcRestResourceConnection>>::pair(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)a2 = xpc_null_create();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  return a1;
}

void boost::container::vector<boost::container::dtl::pair<xpc::connection,std::shared_ptr<ctu::XpcRestResourceConnection>>,boost::container::new_allocator<boost::container::dtl::pair<xpc::connection,std::shared_ptr<ctu::XpcRestResourceConnection>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<xpc::connection,std::shared_ptr<ctu::XpcRestResourceConnection>>>,boost::container::dtl::pair<xpc::connection,std::shared_ptr<ctu::XpcRestResourceConnection>>*,boost::container::dtl::pair<xpc::connection,std::shared_ptr<ctu::XpcRestResourceConnection>>>>(void *a1, char *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)a2 + 2);
  unint64_t v5 = *((void *)a2 + 1) + 1;
  if (0x555555555555555 - v4 < v5 - v4) {
    goto LABEL_26;
  }
  unint64_t v6 = v4 >> 61;
  unint64_t v7 = 8 * v4;
  if (v6 > 4) {
    uint64_t v8 = -1;
  }
  else {
    uint64_t v8 = v7;
  }
  unint64_t v9 = v7 / 5;
  if (v6) {
    unint64_t v9 = v8;
  }
  if (v9 >= 0x555555555555555) {
    unint64_t v9 = 0x555555555555555;
  }
  unint64_t v10 = v5 <= v9 ? v9 : *((void *)a2 + 1) + 1;
  if (v10 > 0x555555555555555) {
LABEL_26:
  }
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
  uint64_t v15 = *(void *)a2;
  uint64_t v16 = (char *)operator new(24 * v10);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)a2;
  uint64_t v19 = *(void *)a2 + 24 * *((void *)a2 + 1);
  if (*(void *)a2 != a3)
  {
    uint64_t v20 = *(void *)a2;
    do
    {
      uint64_t v21 = boost::container::dtl::pair<xpc::connection,std::shared_ptr<ctu::XpcRestResourceConnection>>::pair((uint64_t)v16, v20);
      v20 += 24;
      uint64_t v16 = (char *)(v21 + 24);
    }
    while (v20 != a3);
  }
  uint64_t v22 = boost::container::dtl::pair<xpc::connection,std::shared_ptr<ctu::XpcRestResourceConnection>>::pair((uint64_t)v16, a4);
  if (v19 != a3)
  {
    uint64_t v23 = v22 + 24;
    uint64_t v24 = a3;
    do
    {
      uint64_t v25 = boost::container::dtl::pair<xpc::connection,std::shared_ptr<ctu::XpcRestResourceConnection>>::pair(v23, v24);
      v24 += 24;
      uint64_t v23 = v25 + 24;
    }
    while (v24 != v19);
  }
  if (v18)
  {
    for (uint64_t i = *((void *)a2 + 1); i; --i)
    {
      unint64_t v27 = *(std::__shared_weak_count **)(v18 + 16);
      if (v27) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v27);
      }
      xpc_release(*(xpc_object_t *)v18);
      *(void *)uint64_t v18 = 0;
      v18 += 24;
    }
    operator delete(*(void **)a2);
  }
  uint64_t v28 = *((void *)a2 + 1) + 1;
  *(void *)a2 = v17;
  *((void *)a2 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v28;
  *((void *)a2 + 2) = v10;
  *a1 = &v17[a3 - v15];
}

uint64_t boost::container::dtl::pair<xpc::connection,std::shared_ptr<ctu::XpcRestResourceConnection>>::operator=(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v4 = *a2;
  *a2 = xpc_null_create();
  unint64_t v5 = *(void **)a1;
  *(void *)a1 = v4;
  xpc_release(v5);
  long long v6 = *(_OWORD *)(a2 + 1);
  a2[1] = 0;
  a2[2] = 0;
  unint64_t v7 = *(std::__shared_weak_count **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = v6;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  return a1;
}

void *std::allocate_shared[abi:ne180100]<ctu::XpcRestResourceConnection,std::allocator<ctu::XpcRestResourceConnection>,xpc::connection const&,std::string,void>@<X0>(void **a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  long long v6 = operator new(0x40uLL);
  uint64_t result = std::__shared_ptr_emplace<ctu::XpcRestResourceConnection>::__shared_ptr_emplace[abi:ne180100]<xpc::connection const&,std::string,std::allocator<ctu::XpcRestResourceConnection>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_19206C060(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<ctu::XpcRestResourceConnection>::__shared_ptr_emplace[abi:ne180100]<xpc::connection const&,std::string,std::allocator<ctu::XpcRestResourceConnection>,0>(void *a1, void **a2, uint64_t a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EE2F8A08;
  std::construct_at[abi:ne180100]<ctu::XpcRestResourceConnection,xpc::connection const&,std::string,ctu::XpcRestResourceConnection*>((uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_19206C0BC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ctu::XpcRestResourceConnection>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE2F8A08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ctu::XpcRestResourceConnection>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE2F8A08;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<ctu::XpcRestResourceConnection>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::construct_at[abi:ne180100]<ctu::XpcRestResourceConnection,xpc::connection const&,std::string,ctu::XpcRestResourceConnection*>(uint64_t a1, void **a2, uint64_t a3)
{
  unint64_t v5 = *a2;
  xpc_object_t object = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  *(_OWORD *)std::string __p = *(_OWORD *)a3;
  uint64_t v8 = *(void *)(a3 + 16);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  ctu::XpcRestResourceConnection::XpcRestResourceConnection(a1, &object, (long long *)__p);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[0]);
  }
  xpc_release(object);
  return a1;
}

void sub_19206C1EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, xpc_object_t object)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t ctu::XpcRestResourceConnection::XpcRestResourceConnection(uint64_t a1, xpc_object_t *a2, long long *a3)
{
  *(void *)a1 = &unk_1EE2F6FB0;
  long long v4 = *a3;
  *(void *)(a1 + 24) = *((void *)a3 + 2);
  *(_OWORD *)(a1 + 8) = v4;
  *((void *)a3 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
  *((void *)a3 + 2) = 0;
  *(void *)a3 = 0;
  *(void *)a1 = &unk_1EE2F7110;
  *(void *)(a1 + 32) = *a2;
  *a2 = xpc_null_create();
  return a1;
}

void ___ZNK3ctu15XpcServerHelper12acceptClientINS_15RestXpcListenerEEEvN3xpc10connectionEN8dispatch5queueENSt3__18weak_ptrIT_EE_block_invoke(void *a1, xpc_object_t a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a1[5];
  if (v3)
  {
    unint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      long long v6 = v5;
      unint64_t v7 = (ctu::RestXpcListener *)a1[4];
      if (!v7)
      {
LABEL_24:
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        return;
      }
      uint64_t v8 = MEMORY[0x192FEE1B0](a2);
      uint64_t v9 = MEMORY[0x1E4F14590];
      if (v8 != MEMORY[0x1E4F14590])
      {
        if (v8 == MEMORY[0x1E4F145A8])
        {
          xpc_object_t v10 = (xpc_object_t)a1[6];
          xpc_object_t v14 = v10;
          if (v10)
          {
            xpc_retain(v10);
          }
          else
          {
            xpc_object_t v10 = xpc_null_create();
            xpc_object_t v14 = v10;
          }
          xpc_object_t object = a2;
          if (a2) {
            xpc_retain(a2);
          }
          else {
            xpc_object_t object = xpc_null_create();
          }
          ctu::RestXpcListener::handleClientError(v7, (const xpc::connection *)&v14, &object);
          xpc_release(object);
          xpc_release(v10);
        }
        goto LABEL_24;
      }
      xpc_object_t v11 = (void *)a1[6];
      xpc_object_t v16 = v11;
      if (v11)
      {
        xpc_retain(v11);
        if (a2)
        {
LABEL_10:
          xpc_retain(a2);
          xpc_object_t v15 = a2;
          goto LABEL_13;
        }
      }
      else
      {
        xpc_object_t v16 = xpc_null_create();
        if (a2) {
          goto LABEL_10;
        }
      }
      a2 = xpc_null_create();
      xpc_object_t v15 = a2;
      if (!a2)
      {
        xpc_object_t v12 = xpc_null_create();
        a2 = 0;
        goto LABEL_22;
      }
LABEL_13:
      if (MEMORY[0x192FEE1B0](a2) == v9)
      {
        xpc_retain(a2);
LABEL_23:
        ctu::RestXpcListener::handleClientMessage(v7, &v16, &v15);
        xpc_release(v15);
        xpc_object_t v15 = 0;
        xpc_release(a2);
        xpc_release(v16);
        goto LABEL_24;
      }
      xpc_object_t v12 = xpc_null_create();
LABEL_22:
      xpc_object_t v15 = v12;
      goto LABEL_23;
    }
  }
}

void sub_19206C434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, xpc_object_t a11, xpc_object_t a12)
{
  xpc_release(object);
  xpc_release(v13);
  std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c46_ZTSNSt3__18weak_ptrIN3ctu15RestXpcListenerEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c46_ZTSNSt3__18weak_ptrIN3ctu15RestXpcListenerEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t std::__function::__func<ctu::RestXpcListener::handleClientMessage(xpc::connection const&,xpc::dict const&)::$_0,std::allocator<ctu::RestXpcListener::handleClientMessage(xpc::connection const&,xpc::dict const&)::$_0>,void ()(xpc::object)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1EE2F83A0;
  xpc_release(*(xpc_object_t *)(a1 + 8));
  *(void *)(a1 + 8) = 0;
  return a1;
}

void std::__function::__func<ctu::RestXpcListener::handleClientMessage(xpc::connection const&,xpc::dict const&)::$_0,std::allocator<ctu::RestXpcListener::handleClientMessage(xpc::connection const&,xpc::dict const&)::$_0>,void ()(xpc::object)>::~__func(xpc_object_t *a1)
{
  *a1 = &unk_1EE2F83A0;
  xpc_release(a1[1]);

  operator delete(a1);
}

void **std::__function::__func<ctu::RestXpcListener::handleClientMessage(xpc::connection const&,xpc::dict const&)::$_0,std::allocator<ctu::RestXpcListener::handleClientMessage(xpc::connection const&,xpc::dict const&)::$_0>,void ()(xpc::object)>::__clone(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 8);
  uint64_t v2 = (void **)operator new(0x10uLL);
  xpc_object_t *v2 = &unk_1EE2F83A0;
  std::__compressed_pair_elem<ctu::RestXpcListener::handleClientMessage(xpc::connection const&,xpc::dict const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<ctu::RestXpcListener::handleClientMessage(xpc::connection const&,xpc::dict const&)::$_0 const&,0ul>(v2 + 1, v1);
  return v2;
}

void **std::__function::__func<ctu::RestXpcListener::handleClientMessage(xpc::connection const&,xpc::dict const&)::$_0,std::allocator<ctu::RestXpcListener::handleClientMessage(xpc::connection const&,xpc::dict const&)::$_0>,void ()(xpc::object)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE2F83A0;
  return std::__compressed_pair_elem<ctu::RestXpcListener::handleClientMessage(xpc::connection const&,xpc::dict const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<ctu::RestXpcListener::handleClientMessage(xpc::connection const&,xpc::dict const&)::$_0 const&,0ul>((void **)(a2 + 8), (void **)(a1 + 8));
}

void std::__function::__func<ctu::RestXpcListener::handleClientMessage(xpc::connection const&,xpc::dict const&)::$_0,std::allocator<ctu::RestXpcListener::handleClientMessage(xpc::connection const&,xpc::dict const&)::$_0>,void ()(xpc::object)>::destroy(uint64_t a1)
{
}

void std::__function::__func<ctu::RestXpcListener::handleClientMessage(xpc::connection const&,xpc::dict const&)::$_0,std::allocator<ctu::RestXpcListener::handleClientMessage(xpc::connection const&,xpc::dict const&)::$_0>,void ()(xpc::object)>::destroy_deallocate(xpc_object_t *a1)
{
  std::__function::__alloc_func<ctu::RestXpcListener::handleClientMessage(xpc::connection const&,xpc::dict const&)::$_0,std::allocator<ctu::RestXpcListener::handleClientMessage(xpc::connection const&,xpc::dict const&)::$_0>,void ()(xpc::object)>::destroy[abi:ne180100](a1 + 1);

  operator delete(a1);
}

void std::__function::__func<ctu::RestXpcListener::handleClientMessage(xpc::connection const&,xpc::dict const&)::$_0,std::allocator<ctu::RestXpcListener::handleClientMessage(xpc::connection const&,xpc::dict const&)::$_0>,void ()(xpc::object)>::operator()(uint64_t a1, void **a2)
{
  unint64_t v3 = *a2;
  *a2 = xpc_null_create();
  unint64_t v5 = *(void **)(a1 + 8);
  long long v4 = (xpc_object_t *)(a1 + 8);
  remote_connection = xpc_dictionary_get_remote_connection(v5);
  if (remote_connection)
  {
    xpc_object_t v11 = v3;
    uint64_t v7 = MEMORY[0x1E4F14590];
    if (v3 && MEMORY[0x192FEE1B0](v3) == v7)
    {
      xpc_retain(v3);
      xpc_object_t v8 = v3;
    }
    else
    {
      xpc_object_t v8 = xpc_null_create();
      xpc_object_t v11 = v8;
    }
    if (MEMORY[0x192FEE1B0](v8) == v7)
    {
      v9[0] = &v11;
      v9[1] = "v";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)v9, &object);
      ctu::rest::updateReplyValue((uint64_t)v4, &object);
      xpc_release(object);
      xpc_object_t v8 = v11;
    }
    xpc_release(v8);
    xpc_connection_send_message(remote_connection, *v4);
  }
  xpc_release(v3);
}

void sub_19206C754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, xpc_object_t a12)
{
  xpc_release(object);
  xpc_release(a12);
  xpc_release(v12);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<ctu::RestXpcListener::handleClientMessage(xpc::connection const&,xpc::dict const&)::$_0,std::allocator<ctu::RestXpcListener::handleClientMessage(xpc::connection const&,xpc::dict const&)::$_0>,void ()(xpc::object)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ctu::RestXpcListener::handleClientMessage(xpc::connection const&,xpc::dict const&)::$_0,std::allocator<ctu::RestXpcListener::handleClientMessage(xpc::connection const&,xpc::dict const&)::$_0>,void ()(xpc::object)>::target_type()
{
}

void **std::__compressed_pair_elem<ctu::RestXpcListener::handleClientMessage(xpc::connection const&,xpc::dict const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<ctu::RestXpcListener::handleClientMessage(xpc::connection const&,xpc::dict const&)::$_0 const&,0ul>(void **a1, void **a2)
{
  unint64_t v3 = *a2;
  *a1 = *a2;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    *a1 = xpc_null_create();
  }
  return a1;
}

void std::__function::__alloc_func<ctu::RestXpcListener::handleClientMessage(xpc::connection const&,xpc::dict const&)::$_0,std::allocator<ctu::RestXpcListener::handleClientMessage(xpc::connection const&,xpc::dict const&)::$_0>,void ()(xpc::object)>::destroy[abi:ne180100](xpc_object_t *a1)
{
  *a1 = 0;
}

void std::__shared_ptr_pointer<ctu::RestDispatchListener *,std::shared_ptr<ctu::RestDispatchListener>::__shared_ptr_default_delete<ctu::RestDispatchListener,ctu::RestDispatchListener>,std::allocator<ctu::RestDispatchListener>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<ctu::RestDispatchListener *,std::shared_ptr<ctu::RestDispatchListener>::__shared_ptr_default_delete<ctu::RestDispatchListener,ctu::RestDispatchListener>,std::allocator<ctu::RestDispatchListener>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<ctu::RestDispatchListener *,std::shared_ptr<ctu::RestDispatchListener>::__shared_ptr_default_delete<ctu::RestDispatchListener,ctu::RestDispatchListener>,std::allocator<ctu::RestDispatchListener>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void *ctu::rest::RestConnectorSink<ctu::RestDispatchListener>::~RestConnectorSink(void *a1)
{
  *a1 = &unk_1EE2F78F0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void ctu::rest::RestConnectorSink<ctu::RestDispatchListener>::~RestConnectorSink(void *__p)
{
  *std::string __p = &unk_1EE2F78F0;
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void ctu::rest::RestConnectorSink<ctu::RestDispatchListener>::handleClientError(uint64_t a1, uint64_t a2, xpc_object_t *a3)
{
  long long v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      xpc_object_t v8 = v7;
      uint64_t v9 = *(void *)(a1 + 8);
      if (v9)
      {
        xpc_object_t object = *a3;
        *a3 = xpc_null_create();
        (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(*(void *)v9 + 40))(v9, a2, &object);
        xpc_release(object);
        xpc_object_t object = 0;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void sub_19206CA64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

void boost::container::vector<boost::container::dtl::pair<ctu::rest::RestConnectorSourceBase const*,std::shared_ptr<ctu::DispatchRestResourceConnection>>,boost::container::new_allocator<boost::container::dtl::pair<ctu::rest::RestConnectorSourceBase const*,std::shared_ptr<ctu::DispatchRestResourceConnection>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<ctu::rest::RestConnectorSourceBase const*,std::shared_ptr<ctu::DispatchRestResourceConnection>>>,boost::container::dtl::pair<ctu::rest::RestConnectorSourceBase const*,std::shared_ptr<ctu::DispatchRestResourceConnection>>*,boost::container::dtl::pair<ctu::rest::RestConnectorSourceBase const*,std::shared_ptr<ctu::DispatchRestResourceConnection>>>>(void *a1, char *a2, void *a3, uint64_t a4)
{
  unint64_t v4 = *((void *)a2 + 2);
  unint64_t v5 = *((void *)a2 + 1) + 1;
  if (0x555555555555555 - v4 < v5 - v4) {
    goto LABEL_27;
  }
  unint64_t v6 = v4 >> 61;
  unint64_t v7 = 8 * v4;
  if (v6 > 4) {
    uint64_t v8 = -1;
  }
  else {
    uint64_t v8 = v7;
  }
  unint64_t v9 = v7 / 5;
  if (v6) {
    unint64_t v9 = v8;
  }
  if (v9 >= 0x555555555555555) {
    unint64_t v9 = 0x555555555555555;
  }
  unint64_t v10 = v5 <= v9 ? v9 : *((void *)a2 + 1) + 1;
  if (v10 > 0x555555555555555) {
LABEL_27:
  }
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
  xpc_object_t v15 = *(void **)a2;
  xpc_object_t v16 = (char *)operator new(24 * v10);
  uint64_t v17 = v16;
  uint64_t v18 = *(char **)a2;
  uint64_t v19 = *(void *)a2 + 24 * *((void *)a2 + 1);
  uint64_t v20 = v16;
  if (*(void **)a2 != a3)
  {
    uint64_t v21 = *(void **)a2;
    uint64_t v20 = v16;
    do
    {
      *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
      *((void *)v20 + 2) = v21[2];
      v21[1] = 0;
      v21[2] = 0;
      v20 += 24;
      v21 += 3;
    }
    while (v21 != a3);
  }
  *(_OWORD *)uint64_t v20 = *(_OWORD *)a4;
  *((void *)v20 + 2) = *(void *)(a4 + 16);
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if ((void *)v19 != a3)
  {
    uint64_t v22 = v20 + 40;
    uint64_t v23 = a3;
    do
    {
      *((_OWORD *)v22 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = *(_OWORD *)v23;
      *uint64_t v22 = v23[2];
      v22 += 3;
      v23[1] = 0;
      xpc_object_t v23[2] = 0;
      v23 += 3;
    }
    while (v23 != (void *)v19);
  }
  if (v18)
  {
    uint64_t v24 = *((void *)a2 + 1);
    if (v24)
    {
      uint64_t v25 = (std::__shared_weak_count **)(v18 + 16);
      do
      {
        if (*v25) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*v25);
        }
        v25 += 3;
        --v24;
      }
      while (v24);
    }
    operator delete(*(void **)a2);
  }
  uint64_t v26 = *((void *)a2 + 1) + 1;
  *(void *)a2 = v17;
  *((void *)a2 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v26;
  *((void *)a2 + 2) = v10;
  *a1 = &v17[(char *)a3 - (char *)v15];
}

void std::__shared_ptr_emplace<ctu::DispatchRestResourceConnection>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE2F8A40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ctu::DispatchRestResourceConnection>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE2F8A40;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<ctu::DispatchRestResourceConnection>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *std::__function::__func<ctu::RestDispatchListener::handleClientMessageWithReply(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict,std::function<void ()(xpc::object)>)::$_0::operator() const(void)::{lambda(xpc::object)#1},std::allocator<ctu::RestDispatchListener::handleClientMessageWithReply(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict,std::function<void ()(xpc::object)>)::$_0::operator() const(void)::{lambda(xpc::object)#1}>,void ()(xpc::object)>::~__func(void *a1)
{
  *a1 = &unk_1EE2F4C78;
  std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<ctu::RestDispatchListener::handleClientMessageWithReply(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict,std::function<void ()(xpc::object)>)::$_0::operator() const(void)::{lambda(xpc::object)#1},std::allocator<ctu::RestDispatchListener::handleClientMessageWithReply(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict,std::function<void ()(xpc::object)>)::$_0::operator() const(void)::{lambda(xpc::object)#1}>,void ()(xpc::object)>::~__func(void *a1)
{
  *a1 = &unk_1EE2F4C78;
  std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

void *std::__function::__func<ctu::RestDispatchListener::handleClientMessageWithReply(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict,std::function<void ()(xpc::object)>)::$_0::operator() const(void)::{lambda(xpc::object)#1},std::allocator<ctu::RestDispatchListener::handleClientMessageWithReply(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict,std::function<void ()(xpc::object)>)::$_0::operator() const(void)::{lambda(xpc::object)#1}>,void ()(xpc::object)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  void *v2 = &unk_1EE2F4C78;
  std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_19206CD9C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<ctu::RestDispatchListener::handleClientMessageWithReply(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict,std::function<void ()(xpc::object)>)::$_0::operator() const(void)::{lambda(xpc::object)#1},std::allocator<ctu::RestDispatchListener::handleClientMessageWithReply(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict,std::function<void ()(xpc::object)>)::$_0::operator() const(void)::{lambda(xpc::object)#1}>,void ()(xpc::object)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE2F4C78;
  return std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<ctu::RestDispatchListener::handleClientMessageWithReply(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict,std::function<void ()(xpc::object)>)::$_0::operator() const(void)::{lambda(xpc::object)#1},std::allocator<ctu::RestDispatchListener::handleClientMessageWithReply(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict,std::function<void ()(xpc::object)>)::$_0::operator() const(void)::{lambda(xpc::object)#1}>,void ()(xpc::object)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

uint64_t std::__function::__func<ctu::RestDispatchListener::handleClientMessageWithReply(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict,std::function<void ()(xpc::object)>)::$_0::operator() const(void)::{lambda(xpc::object)#1},std::allocator<ctu::RestDispatchListener::handleClientMessageWithReply(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict,std::function<void ()(xpc::object)>)::$_0::operator() const(void)::{lambda(xpc::object)#1}>,void ()(xpc::object)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ctu::RestDispatchListener::handleClientMessageWithReply(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict,std::function<void ()(xpc::object)>)::$_0::operator() const(void)::{lambda(xpc::object)#1},std::allocator<ctu::RestDispatchListener::handleClientMessageWithReply(std::shared_ptr<ctu::rest::RestConnectorSourceBase const>,xpc::dict,std::function<void ()(xpc::object)>)::$_0::operator() const(void)::{lambda(xpc::object)#1}>,void ()(xpc::object)>::target_type()
{
}

void **dispatch::async<void ctu::SharedSynchronizable<ctu::RestDispatchListener>::execute_wrapped<ctu::RestDispatchListener::handleClientError(ctu::rest::RestConnectorSourceBase const*,xpc::object)::$_0>(ctu::RestDispatchListener::handleClientError(ctu::rest::RestConnectorSourceBase const*,xpc::object)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ctu::RestDispatchListener::handleClientError(ctu::rest::RestConnectorSourceBase const*,xpc::object)::$_0,dispatch_queue_s *::default_delete<ctu::RestDispatchListener::handleClientError(ctu::rest::RestConnectorSourceBase const*,xpc::object)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v1 = *a1;
  uint64_t v19 = a1;
  uint64_t v20 = (xpc_object_t *)v1;
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 48);
  ctu::RestDispatchListener::getResourceConnection_sync(*(void *)v1, *(void *)(v1 + 8), (unint64_t *)&v22);
  long long v23 = v22;
  long long v22 = 0uLL;
  unint64_t v4 = *(void **)(v1 + 16);
  xpc_object_t object = v4;
  if (v4) {
    xpc_retain(v4);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(uint64_t, long long *, xpc_object_t *))(*(void *)v3 + 32))(v3, &v23, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  if (*((void *)&v23 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v23 + 1));
  }
  unint64_t v5 = v2[8];
  if (v5)
  {
    unint64_t v6 = *(void *)(v1 + 8);
    unint64_t v7 = (unint64_t *)v2[7];
    uint64_t v8 = &v7[3 * v5];
    do
    {
      unint64_t v9 = v5 >> 1;
      unint64_t v10 = &v7[3 * (v5 >> 1)];
      unint64_t v12 = *v10;
      xpc_object_t v11 = v10 + 3;
      v5 += ~(v5 >> 1);
      if (v12 >= v6) {
        unint64_t v5 = v9;
      }
      else {
        unint64_t v7 = v11;
      }
    }
    while (v5);
    if (v7 != v8 && *v7 <= v6)
    {
      if (v7 + 3 != v8)
      {
        BOOL v13 = v7 + 4;
        do
        {
          xpc_object_t v14 = (std::__shared_weak_count *)*(v13 - 2);
          *(v13 - 4) = *(v13 - 1);
          long long v15 = *(_OWORD *)v13;
          void *v13 = 0;
          v13[1] = 0;
          *(_OWORD *)(v13 - 3) = v15;
          if (v14) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v14);
          }
          xpc_object_t v16 = v13 + 2;
          v13 += 3;
        }
        while (v16 != v8);
      }
      uint64_t v17 = (std::__shared_weak_count *)*(v8 - 1);
      if (v17) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      }
      --v2[8];
    }
  }
  std::unique_ptr<ctu::RestDispatchListener::handleClientError(ctu::rest::RestConnectorSourceBase const*,xpc::object)::$_0,std::default_delete<ctu::RestDispatchListener::handleClientError(ctu::rest::RestConnectorSourceBase const*,xpc::object)::$_0>>::~unique_ptr[abi:ne180100](&v20);
  return std::unique_ptr<void ctu::SharedSynchronizable<ctu::RestModuleState>::execute_wrapped<ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0>(ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0 &&)::{lambda(void)#1},std::default_delete<ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0>>::~unique_ptr[abi:ne180100](&v19);
}

void sub_19206CFA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, xpc_object_t *a11, xpc_object_t object, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  xpc_object_t object = 0;
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  std::unique_ptr<ctu::RestDispatchListener::handleClientError(ctu::rest::RestConnectorSourceBase const*,xpc::object)::$_0,std::default_delete<ctu::RestDispatchListener::handleClientError(ctu::rest::RestConnectorSourceBase const*,xpc::object)::$_0>>::~unique_ptr[abi:ne180100](&a11);
  std::unique_ptr<void ctu::SharedSynchronizable<ctu::RestModuleState>::execute_wrapped<ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0>(ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0 &&)::{lambda(void)#1},std::default_delete<ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

xpc_object_t **std::unique_ptr<ctu::RestDispatchListener::handleClientError(ctu::rest::RestConnectorSourceBase const*,xpc::object)::$_0,std::default_delete<ctu::RestDispatchListener::handleClientError(ctu::rest::RestConnectorSourceBase const*,xpc::object)::$_0>>::~unique_ptr[abi:ne180100](xpc_object_t **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    xpc_release(v2[2]);
    operator delete(v2);
  }
  return a1;
}

void __TUAssertTrigger(const char *a1)
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, a1);
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_19206D070(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

long long *__TUAssertGetReason()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_2, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_2))
  {
    uint64_t v1 = getprogname();
    std::string::basic_string[abi:ne180100]<0>(&v5, " crashed");
    size_t v2 = strlen(v1);
    uint64_t v3 = std::string::insert(&v5, 0, v1, v2);
    long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    unk_1EB465388 = *((void *)&v3->__r_.__value_.__l + 2);
    xmmword_1EB465378 = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v5.__r_.__value_.__l.__data_);
    }
    __cxa_atexit(MEMORY[0x1E4FBA210], &xmmword_1EB465378, &dword_192046000);
    __cxa_guard_release(&_MergedGlobals_2);
  }
  if (byte_1EB46538F >= 0) {
    return &xmmword_1EB465378;
  }
  else {
    return (long long *)xmmword_1EB465378;
  }
}

void sub_19206D174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&_MergedGlobals_2);
  _Unwind_Resume(a1);
}

void TelephonyBasebandWatchdogStart(NSObject **a1, unsigned int a2, void *a3)
{
  global_queue = dispatch_get_global_queue(-2, 0);
  unint64_t v7 = dispatch_source_create(MEMORY[0x1E4F14490], 1uLL, 0, global_queue);
  dispatch_time_t v8 = dispatch_time(0, 1000000 * a2);
  dispatch_source_set_event_handler(v7, a3);
  dispatch_source_set_timer(v7, v8, 0xFFFFFFFFFFFFFFFFLL, 500000 * a2);
  dispatch_activate(v7);
  *a1 = v7;
}

void TelephonyBasebandWatchdogStop(dispatch_object_t *a1)
{
  size_t v2 = *a1;
  if (!v2) {
    __TUAssertTrigger("context->source");
  }
  dispatch_source_cancel(v2);
  dispatch_release(*a1);
  *a1 = 0;
}

void TelephonyBasebandWatchdogStartWithStackshot(NSObject **a1, unsigned int a2, uint64_t a3)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  void v3[2] = __TelephonyBasebandWatchdogStartWithStackshot_block_invoke;
  v3[3] = &__block_descriptor_tmp_2;
  v3[4] = a3;
  unsigned int v4 = a2;
  TelephonyBasebandWatchdogStart(a1, a2, v3);
}

void __TelephonyBasebandWatchdogStartWithStackshot_block_invoke(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v1 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v1 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v24 = v1;
  long long v25 = v1;
  long long v22 = v1;
  long long v23 = v1;
  long long v20 = v1;
  long long v21 = v1;
  long long v18 = v1;
  long long v19 = v1;
  long long v16 = v1;
  long long v17 = v1;
  long long v14 = v1;
  long long v15 = v1;
  long long v12 = v1;
  long long v13 = v1;
  *(_OWORD *)std::string __str = v1;
  long long v11 = v1;
  snprintf(__str, 0x100uLL, "Telephony operation timeout at '%s', timeout %u\n", *(const char **)(a1 + 32), *(_DWORD *)(a1 + 40));
  _TelephonyUtilDebugPrint((uint64_t)"TelephonyBasebandWatchdogStartWithStackshot_block_invoke", (uint64_t)"Telephony watchdog fired: %s\n", v2, v3, v4, v5, v6, v7, (uint64_t)__str);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315138;
    unint64_t v9 = __str;
    _os_log_error_impl(&dword_192046000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Telephony watchdog fired: %s\n", buf, 0xCu);
  }
}

const void **ctu::Http::HttpResponse::getResponseData@<X0>(ctu::Http::HttpResponse *this@<X0>, void *a2@<X8>)
{
  CFDataRef theData = (CFDataRef)0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(CFDataRef *__return_ptr))(*(void *)this + 40))(&theData);
  if (theData) {
    uint64_t v3 = ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    BytePtr = CFDataGetBytePtr(theData);
    CFIndex Length = CFDataGetLength(theData);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    if (Length)
    {
      std::vector<char>::__vallocate[abi:ne180100](a2, Length);
      uint64_t v6 = (char *)a2[1];
      memmove(v6, BytePtr, Length);
      a2[1] = &v6[Length];
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  return ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::~SharedRef((const void **)&theData);
}

void sub_19206D50C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
  }
  ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::~SharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void *ctu::Http::asString@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 5) {
    uint64_t v2 = "????";
  }
  else {
    uint64_t v2 = off_1E5744368[a1];
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v2);
}

std::string *ctu::Http::asString@<X0>(uint64_t __val@<X1>, int a2@<W0>, std::string *a3@<X8>)
{
  if (!a2) {
    return std::to_string(a3, __val);
  }
  if (__val > -1105)
  {
    switch(__val)
    {
      case -1022:
        uint64_t v3 = "App Transport Security Requires Secure Connection";
        return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
      case -1021:
        uint64_t v3 = "Request Body Stream Exhausted";
        return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
      case -1020:
        uint64_t v3 = "Data Not Allowed";
        return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
      case -1019:
        uint64_t v3 = "Call Is Active";
        return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
      case -1018:
        uint64_t v3 = "International Roaming Off";
        return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
      case -1017:
        uint64_t v3 = "Cannot Parse Response";
        return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
      case -1016:
        uint64_t v3 = "Cannot Decode Content Data";
        return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
      case -1015:
        uint64_t v3 = "Cannot Decode Raw Data";
        return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
      case -1014:
        uint64_t v3 = "Zero Byte Resource";
        return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
      case -1013:
        uint64_t v3 = "User Authentication Required";
        return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
      case -1012:
        uint64_t v3 = "User Cancelled Authentication";
        return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
      case -1011:
        uint64_t v3 = "Bad Server Response";
        return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
      case -1010:
        uint64_t v3 = "Redirect To Non Existent Location";
        return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
      case -1009:
        uint64_t v3 = "Not Connected To Internet";
        return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
      case -1008:
      case -1005:
      case -999:
      case -998:
        return std::to_string(a3, __val);
      case -1007:
        uint64_t v3 = "HTTP Too Many Redirects";
        return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
      case -1006:
        uint64_t v3 = "DNS Lookup Failed";
        return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
      case -1004:
        uint64_t v3 = "Cannot Connect To Host";
        return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
      case -1003:
        uint64_t v3 = "Cannot Find Host";
        return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
      case -1002:
        uint64_t v3 = "Unsupported URL";
        return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
      case -1001:
        uint64_t v3 = "Timeout";
        return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
      case -1000:
        uint64_t v3 = "Bad URL";
        return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
      case -997:
        uint64_t v3 = "Background Session Was Disconnected";
        return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
      case -996:
        uint64_t v3 = "Background Session In Use By Another Process";
        return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
      case -995:
        uint64_t v3 = "Background Session Requires Shared Container";
        return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
      default:
        switch(__val)
        {
          case -1104:
            uint64_t v3 = "File Outside Safe Area";
            return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
          case -1103:
            uint64_t v3 = "Data Length Exceeds Maximum";
            return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
          case -1102:
            uint64_t v3 = "No Permissions To Read File";
            return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
          case -1101:
            uint64_t v3 = "File Is Directory";
            return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
          case -1100:
            uint64_t v3 = "File Does Not Exist";
            return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
          default:
            return std::to_string(a3, __val);
        }
    }
  }
  switch(__val)
  {
    case -3007:
      uint64_t v3 = "Download Decoding Failed To Complete";
      break;
    case -3006:
      uint64_t v3 = "Download Decoding Failed Mid Stream";
      break;
    case -3005:
      uint64_t v3 = "Cannot Move File";
      break;
    case -3004:
      uint64_t v3 = "Cannot Remove File";
      break;
    case -3003:
      uint64_t v3 = "Cannot Write To File";
      break;
    case -3002:
      uint64_t v3 = "Cannot Close File";
      break;
    case -3001:
      uint64_t v3 = "Cannot Open File";
      break;
    case -3000:
      uint64_t v3 = "Cannot Create File";
      break;
    default:
      JUMPOUT(0);
  }
  return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, v3);
}

void ctu::Http::asString(ctu::Http *this@<X0>, std::string *a2@<X8>)
{
  int v2 = (int)this;
  uint64_t v4 = (void *)MEMORY[0x192FEDBB0]();
  memset(&v5, 0, sizeof(v5));
  ctu::cf::assign(&v5, (__CFString *)[MEMORY[0x1E4F28D20] localizedStringForStatusCode:v2]);
  *a2 = v5;
}

void sub_19206D988(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::runtime_error *ctu::ResultIsEmptyError::ResultIsEmptyError(std::runtime_error *this)
{
  uint64_t result = std::runtime_error::runtime_error(this, "ResultIsEmptyError: the result was never set with a success or error value");
  result->__vftable = (std::runtime_error_vtbl *)&unk_1EE2F6A20;
  return result;
}

{
  std::runtime_error *result;

  uint64_t result = std::runtime_error::runtime_error(this, "ResultIsEmptyError: the result was never set with a success or error value");
  result->__vftable = (std::runtime_error_vtbl *)&unk_1EE2F6A20;
  return result;
}

void ctu::ResultIsEmptyError::~ResultIsEmptyError(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);

  operator delete(v1);
}

std::runtime_error *ctu::ResultIsNotError::ResultIsNotError(std::runtime_error *this)
{
  uint64_t result = std::runtime_error::runtime_error(this, "ResultIsNotError: cannot return an error unless it was an error");
  result->__vftable = (std::runtime_error_vtbl *)&unk_1EE2F6960;
  return result;
}

{
  std::runtime_error *result;

  uint64_t result = std::runtime_error::runtime_error(this, "ResultIsNotError: cannot return an error unless it was an error");
  result->__vftable = (std::runtime_error_vtbl *)&unk_1EE2F6960;
  return result;
}

void ctu::ResultIsNotError::~ResultIsNotError(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);

  operator delete(v1);
}

std::runtime_error *ctu::ResultIsError::ResultIsError(std::runtime_error *this)
{
  uint64_t result = std::runtime_error::runtime_error(this, "ResultIsError: cannot return a result because the operation was an error");
  result->__vftable = (std::runtime_error_vtbl *)&unk_1EE2F6798;
  return result;
}

{
  std::runtime_error *result;

  uint64_t result = std::runtime_error::runtime_error(this, "ResultIsError: cannot return a result because the operation was an error");
  result->__vftable = (std::runtime_error_vtbl *)&unk_1EE2F6798;
  return result;
}

void ctu::ResultIsError::~ResultIsError(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);

  operator delete(v1);
}

uint64_t ctu::Clock::now_in_nanoseconds(ctu::Clock *this)
{
  if (ctu::Clock::now_in_nanoseconds(void)::sOnce != -1) {
    dispatch_once(&ctu::Clock::now_in_nanoseconds(void)::sOnce, &__block_literal_global_3);
  }
  mach_timespec_t cur_time = (mach_timespec_t)0xAAAAAAAAAAAAAAAALL;
  if (ctu::Clock::now_in_nanoseconds(void)::sKern)
  {
    syslog(3, "Returning trivial time since clock service is unavailable\n");
    return 0;
  }
  if (clock_get_time(ctu::Clock::now_in_nanoseconds(void)::server, &cur_time))
  {
    syslog(3, "Failed to get time from clock service (error = %d); returning trivial time\n");
    return 0;
  }
  return cur_time.tv_nsec + 1000000000 * cur_time.tv_sec;
}

void ___ZN3ctu5Clock18now_in_nanosecondsEv_block_invoke()
{
  kern_return_t clock_service;

  host_t v0 = MEMORY[0x192FEDA20]();
  clock_service = host_get_clock_service(v0, 1, (clock_serv_t *)&ctu::Clock::now_in_nanoseconds(void)::server);
  ctu::Clock::now_in_nanoseconds(void)::sKern = clock_service;
  if (clock_service) {
    syslog(3, "Failed to get clock service (error = %d)\n", clock_service);
  }
}

BOOL ctu::rest::WatchableRestResourceHelper::hasWatchers(ctu::rest::WatchableRestResourceHelper *this)
{
  return *((void *)this + 1) != 0;
}

uint64_t ctu::rest::WatchableRestResourceHelper::hasActiveWatchers(ctu::rest::WatchableRestResourceHelper *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = 16 * v1;
  for (uint64_t i = *(void *)this + 8; !*(void *)i || *(void *)(*(void *)i + 8) == -1; i += 16)
  {
    v2 -= 16;
    if (!v2) {
      return 0;
    }
  }
  return 1;
}

void ctu::rest::WatchableRestResourceHelper::cleanupExpired(ctu::rest::WatchableRestResourceHelper *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (v1)
  {
    uint64_t v3 = *(void *)this;
    uint64_t v4 = *(void *)this;
    do
    {
      uint64_t v5 = *(void *)(v4 + 8);
      if (!v5 || *(void *)(v5 + 8) == -1)
      {
        uint64_t v7 = v4;
        boost::container::vector<std::weak_ptr<ctu::RestResourceConnection>,boost::container::new_allocator<std::weak_ptr<ctu::RestResourceConnection>>,void>::erase(this, &v7, &v6);
        uint64_t v4 = v6;
        uint64_t v3 = *(void *)this;
        uint64_t v1 = *((void *)this + 1);
      }
      else
      {
        v4 += 16;
      }
    }
    while (v4 != v3 + 16 * v1);
  }
}

void ctu::rest::WatchableRestResourceHelper::getWatcherNames(ctu::rest::WatchableRestResourceHelper *this@<X0>, xpc_object_t *a2@<X8>)
{
  *a2 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_array_create(0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x192FEE1B0](v5) == MEMORY[0x1E4F14568])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  uint64_t v7 = *((void *)this + 1);
  if (v7)
  {
    uint64_t v8 = 16 * v7;
    unint64_t v9 = (std::__shared_weak_count **)(*(void *)this + 8);
    do
    {
      if (*v9)
      {
        unint64_t v10 = std::__shared_weak_count::lock(*v9);
        if (v10)
        {
          long long v11 = v10;
          uint64_t v12 = (uint64_t)*(v9 - 1);
          if (v12)
          {
            long long v13 = (const char *)(v12 + 8);
            if (*(char *)(v12 + 31) < 0) {
              long long v13 = *(const char **)v13;
            }
            xpc_object_t v14 = xpc_string_create(v13);
            if (!v14) {
              xpc_object_t v14 = xpc_null_create();
            }
            xpc_array_append_value(*a2, v14);
            xpc_release(v14);
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        }
      }
      v9 += 2;
      v8 -= 16;
    }
    while (v8);
  }
}

void sub_19206DEA0(_Unwind_Exception *a1)
{
  xpc_release(v3);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  xpc::array::~array(v1);
  _Unwind_Resume(a1);
}

uint64_t ctu::rest::WatchableRestResourceHelper::addWatcher(uint64_t *a1, unint64_t *a2)
{
  uint64_t v3 = (__n128 *)0xAAAAAAAAAAAAAAAALL;
  unint64_t v4 = 0xAAAAAAAAAAAAAAAALL;
  boost::container::dtl::flat_tree<std::weak_ptr<ctu::RestResourceConnection>,boost::move_detail::identity<std::weak_ptr<ctu::RestResourceConnection>>,std::owner_less<std::weak_ptr<ctu::RestResourceConnection>>,void>::emplace_unique<std::shared_ptr<ctu::RestResourceConnection>>(a1, a2, &v3);
  return v4;
}

uint64_t ctu::rest::WatchableRestResourceHelper::removeWatcher(void *a1, void *a2)
{
  uint64_t v2 = a1[1];
  if (!v2) {
    return 0;
  }
  xpc_object_t v5 = (void *)*a1;
  uint64_t v6 = 16 * v2;
  while (1)
  {
    uint64_t v7 = (std::__shared_weak_count *)v5[1];
    if (!v7) {
      goto LABEL_8;
    }
    uint64_t v8 = std::__shared_weak_count::lock(v7);
    if (!v8) {
      goto LABEL_8;
    }
    unint64_t v9 = v8;
    if (*v5)
    {
      if (*v5 == *a2) {
        break;
      }
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
LABEL_8:
    v5 += 2;
    v6 -= 16;
    if (!v6) {
      return 0;
    }
  }
  uint64_t v12 = v5;
  boost::container::vector<std::weak_ptr<ctu::RestResourceConnection>,boost::container::new_allocator<std::weak_ptr<ctu::RestResourceConnection>>,void>::erase(a1, (uint64_t *)&v12, &v11);
  std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  return 1;
}

void sub_19206DFAC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void ctu::rest::WatchableRestResourceHelper::removeWatchers(ctu::rest::WatchableRestResourceHelper *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = *((void *)this + 1);
  if (v4)
  {
    uint64_t v5 = 16 * v4;
    uint64_t v6 = (std::__shared_weak_count **)(*(void *)this + 8);
    while (1)
    {
      *(void *)&long long v8 = 0;
      if (*v6) {
        break;
      }
LABEL_11:
      v6 += 2;
      v5 -= 16;
      if (!v5) {
        goto LABEL_12;
      }
    }
    uint64_t v7 = std::__shared_weak_count::lock(*v6);
    *((void *)&v8 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v7;
    if (v7)
    {
      *(void *)&long long v8 = *(v6 - 1);
      if (!(void)v8)
      {
LABEL_9:
        if (v7) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        }
        goto LABEL_11;
      }
    }
    else if (!(void)v8)
    {
      goto LABEL_9;
    }
    std::vector<std::shared_ptr<ctu::RestResourceConnection>>::emplace_back<std::shared_ptr<ctu::RestResourceConnection> const>(a2, &v8);
    uint64_t v7 = (std::__shared_weak_count *)*((void *)&v8 + 1);
    goto LABEL_9;
  }
LABEL_12:
  boost::container::vector<std::weak_ptr<ctu::RestResourceConnection>,boost::container::new_allocator<std::weak_ptr<ctu::RestResourceConnection>>,void>::priv_destroy_all(this);
}

void sub_19206E06C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::vector<std::shared_ptr<ctu::RestResourceConnection>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::vector<std::shared_ptr<ctu::RestResourceConnection>>::emplace_back<std::shared_ptr<ctu::RestResourceConnection> const>(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = a1 + 2;
  unint64_t v5 = v6;
  uint64_t v7 = (void *)*(v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v19[4] = v4;
    xpc_object_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ctu::RestResourceConnection>>>((uint64_t)v4, v13);
    long long v15 = &v14[16 * v10];
    v19[0] = v14;
    v19[1] = v15;
    v19[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)long long v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v19[2] = v15 + 16;
    std::vector<std::shared_ptr<ctu::RestResourceConnection>>::__swap_out_circular_buffer(a1, v19);
    unint64_t v9 = (void *)a1[1];
    std::__split_buffer<std::shared_ptr<ctu::RestResourceConnection>>::~__split_buffer(v19);
  }
  else
  {
    *uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return v9 - 2;
}

void sub_19206E19C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<ctu::RestResourceConnection>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<ctu::RestResourceConnection>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<ctu::RestResourceConnection>>,std::reverse_iterator<std::shared_ptr<ctu::RestResourceConnection>*>,std::reverse_iterator<std::shared_ptr<ctu::RestResourceConnection>*>,std::reverse_iterator<std::shared_ptr<ctu::RestResourceConnection>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ctu::RestResourceConnection>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<ctu::RestResourceConnection>>,std::reverse_iterator<std::shared_ptr<ctu::RestResourceConnection>*>,std::reverse_iterator<std::shared_ptr<ctu::RestResourceConnection>*>,std::reverse_iterator<std::shared_ptr<ctu::RestResourceConnection>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = a7;
  long long v13 = v14;
  v12[0] = a1;
  v12[1] = &v13;
  _OWORD v12[2] = &v14;
  v12[3] = 0xAAAAAAAAAAAAAA01;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v14 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v14;
  }
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<ctu::RestResourceConnection>>,std::reverse_iterator<std::shared_ptr<ctu::RestResourceConnection>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<ctu::RestResourceConnection>>,std::reverse_iterator<std::shared_ptr<ctu::RestResourceConnection>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<ctu::RestResourceConnection>>,std::reverse_iterator<std::shared_ptr<ctu::RestResourceConnection>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<ctu::RestResourceConnection>>,std::reverse_iterator<std::shared_ptr<ctu::RestResourceConnection>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 += 16;
  }
}

void **std::__split_buffer<std::shared_ptr<ctu::RestResourceConnection>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::shared_ptr<ctu::RestResourceConnection>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 16;
    uint64_t v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 16;
    }
  }
}

void std::vector<std::shared_ptr<ctu::RestResourceConnection>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::shared_ptr<ctu::RestResourceConnection>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::shared_ptr<ctu::RestResourceConnection>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  a1[1] = v2;
}

void boost::container::dtl::flat_tree<std::weak_ptr<ctu::RestResourceConnection>,boost::move_detail::identity<std::weak_ptr<ctu::RestResourceConnection>>,std::owner_less<std::weak_ptr<ctu::RestResourceConnection>>,void>::emplace_unique<std::shared_ptr<ctu::RestResourceConnection>>(uint64_t *a1@<X0>, unint64_t *a2@<X1>, __n128 **a3@<X8>)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = a2[1];
  v4.n128_u64[0] = *a2;
  v4.n128_u64[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  boost::container::dtl::flat_tree<std::weak_ptr<ctu::RestResourceConnection>,boost::move_detail::identity<std::weak_ptr<ctu::RestResourceConnection>>,std::owner_less<std::weak_ptr<ctu::RestResourceConnection>>,void>::insert_unique(a1, &v4, a3);
  if (v4.n128_u64[1]) {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4.n128_u64[1]);
  }
}

void sub_19206E514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_weak(a11);
  }
  _Unwind_Resume(exception_object);
}

void boost::container::vector<std::weak_ptr<ctu::RestResourceConnection>,boost::container::new_allocator<std::weak_ptr<ctu::RestResourceConnection>>,void>::priv_destroy_all(void *a1)
{
  uint64_t v2 = a1[1];
  if (v2)
  {
    unint64_t v3 = (std::__shared_weak_count **)(*a1 + 8);
    do
    {
      if (*v3) {
        std::__shared_weak_count::__release_weak(*v3);
      }
      v3 += 2;
      --v2;
    }
    while (v2);
  }
  a1[1] = 0;
}

uint64_t TelephonyCapabilitiesRadioGetSafeResetTime()
{
  if (_TelephonyRadiosGetRadioInternal_sOnce != -1) {
    dispatch_once(&_TelephonyRadiosGetRadioInternal_sOnce, &__block_literal_global_4);
  }
  if ((sTelephonyRadio - 1) > 0x10) {
    return 0;
  }
  else {
    return dword_1920BDEDC[sTelephonyRadio - 1];
  }
}

uint64_t _TelephonyRadiosDetermineRadio(uint64_t a1)
{
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  uint64_t result = __strlcpy_chk();
  sTelephonyHardwareConfig = *(_DWORD *)(a1 + 8);
  if (*(void *)a1 == 0x5500000063)
  {
    sTelephonyProduct = 0;
LABEL_182:
    sTelephonyRadio = 0;
    sTelephonyRadioVendor = 0;
    return result;
  }
  if (*(void *)a1 != 0x4A00000063)
  {
    if (*(void *)a1 == 0x4A00000080)
    {
      unint64_t v2 = 0x1EB465000;
      int v3 = 38;
      goto LABEL_184;
    }
    if (*(void *)a1 == 0x4A00000079)
    {
      unint64_t v4 = 0x1EB465000;
      int v5 = 52;
LABEL_183:
      *(_DWORD *)(v4 + 732) = v5;
      unint64_t v22 = 0x1EB465000;
      int v23 = 3;
      goto LABEL_187;
    }
    if (*(void *)a1 == 0x4A000000D0)
    {
      unint64_t v4 = 0x1EB465000uLL;
      int v5 = 53;
      goto LABEL_183;
    }
    if (*(void *)a1 == 0x4A00000048)
    {
      unint64_t v2 = 0x1EB465000uLL;
      int v3 = 57;
      goto LABEL_184;
    }
    if (*(void *)a1 == 0x4E0000008DLL)
    {
      int v8 = 60;
LABEL_185:
      sTelephonyProduct = v8;
      unint64_t v9 = 0x1EB465000;
      int v10 = 4;
LABEL_190:
      *(_DWORD *)(v9 + 736) = v10;
      unint64_t v7 = 0x1EB465000uLL;
      int v6 = 2;
      goto LABEL_191;
    }
    if (*(void *)a1 == 0x4400000014)
    {
      unint64_t v11 = 0x1EB465000;
      int v12 = 62;
LABEL_186:
      *(_DWORD *)(v11 + 732) = v12;
      unint64_t v22 = 0x1EB465000uLL;
      int v23 = 5;
      goto LABEL_187;
    }
    if (*(void *)a1 == 0x4400000015)
    {
      unint64_t v11 = 0x1EB465000;
      int v12 = 63;
      goto LABEL_186;
    }
    if (*(void *)a1 == 0x4400000016)
    {
      unint64_t v11 = 0x1EB465000uLL;
      int v12 = 64;
      goto LABEL_186;
    }
    if (*(void *)a1 == 0x44000000C9)
    {
      unint64_t v13 = 0x1EB465000;
      int v14 = 65;
LABEL_188:
      *(_DWORD *)(v13 + 732) = v14;
      unint64_t v9 = 0x1EB465000;
      int v10 = 6;
      goto LABEL_190;
    }
    if (*(void *)a1 == 0x44000000D3)
    {
      unint64_t v13 = 0x1EB465000;
      int v14 = 66;
      goto LABEL_188;
    }
    if (*(void *)a1 == 0x44000000DDLL)
    {
      unint64_t v13 = 0x1EB465000uLL;
      int v14 = 67;
      goto LABEL_188;
    }
    if (*(void *)a1 == 0x4A00000048)
    {
      unint64_t v2 = 0x1EB465000;
      int v3 = 68;
      goto LABEL_184;
    }
    if (*(void *)a1 == 0x4400000141)
    {
      unint64_t v15 = 0x1EB465000;
      int v16 = 79;
LABEL_189:
      *(_DWORD *)(v15 + 732) = v16;
      unint64_t v9 = 0x1EB465000uLL;
      int v10 = 7;
      goto LABEL_190;
    }
    if (*(void *)a1 == 0x440000014BLL)
    {
      unint64_t v15 = 0x1EB465000;
      int v16 = 80;
      goto LABEL_189;
    }
    if (*(void *)a1 == 0x4A0000013ELL)
    {
      unint64_t v15 = 0x1EB465000;
      int v16 = 82;
      goto LABEL_189;
    }
    if (*(void *)a1 == 0x4A00000141)
    {
      unint64_t v15 = 0x1EB465000;
      int v16 = 83;
      goto LABEL_189;
    }
    if (*(void *)a1 == 0x4E00000349)
    {
      unint64_t v15 = 0x1EB465000;
      int v16 = 84;
      goto LABEL_189;
    }
    if (*(void *)a1 == 0x4E00000092)
    {
      int v8 = 87;
      goto LABEL_185;
    }
    if (*(void *)a1 == 0x4A000000D3)
    {
      unint64_t v15 = 0x1EB465000;
      int v16 = 89;
      goto LABEL_189;
    }
    if (*(void *)a1 == 0x4A000000DALL)
    {
      unint64_t v15 = 0x1EB465000;
      int v16 = 90;
      goto LABEL_189;
    }
    if (*(void *)a1 == 0x4E00000068)
    {
      unint64_t v17 = 0x1EB465000;
      int v18 = 91;
LABEL_192:
      *(_DWORD *)(v17 + 732) = v18;
      unint64_t v9 = 0x1EB465000;
      int v10 = 8;
      goto LABEL_190;
    }
    if (*(void *)a1 == 0x44000001A5)
    {
      unint64_t v17 = 0x1EB465000;
      int v18 = 92;
      goto LABEL_192;
    }
    if (*(void *)a1 == 0x44000001AFLL)
    {
      unint64_t v17 = 0x1EB465000;
      int v18 = 93;
      goto LABEL_192;
    }
    if (*(void *)a1 == 0x4A000000ACLL)
    {
      unint64_t v15 = 0x1EB465000uLL;
      int v16 = 94;
      goto LABEL_189;
    }
    if (*(void *)a1 == 0x4A000001A5)
    {
      unint64_t v17 = 0x1EB465000;
      int v18 = 95;
      goto LABEL_192;
    }
    if (*(void *)a1 == 0x4A000001A2)
    {
      unint64_t v17 = 0x1EB465000;
      int v18 = 96;
      goto LABEL_192;
    }
    if (*(void *)a1 == 0x440000004FLL)
    {
      unint64_t v17 = 0x1EB465000uLL;
      int v18 = 97;
      goto LABEL_192;
    }
    if (*(void *)a1 == 0x4400000034)
    {
      int v19 = 99;
LABEL_193:
      sTelephonyProduct = v19;
      unint64_t v22 = 0x1EB465000;
      int v23 = 9;
      goto LABEL_187;
    }
    if (*(void *)a1 == 0x4400000035)
    {
      int v19 = 100;
      goto LABEL_193;
    }
    if (*(void *)a1 == 0x4400000036)
    {
      int v19 = 102;
      goto LABEL_193;
    }
    if (*(void *)a1 == 0x4E0000008ELL)
    {
      int v8 = 103;
      goto LABEL_185;
    }
    if (*(void *)a1 == 0x4E0000009ELL)
    {
      int v8 = 105;
      goto LABEL_185;
    }
    if (*(void *)a1 == 0x4A00000134)
    {
      unint64_t v17 = 0x1EB465000;
      int v18 = 107;
      goto LABEL_192;
    }
    if (*(void *)a1 == 0x4A00000206)
    {
      int v19 = 108;
      goto LABEL_193;
    }
    if (*(void *)a1 == 0x4A0000020BLL)
    {
      int v19 = 110;
      goto LABEL_193;
    }
    if (*(void *)a1 == 0x4A000000ACLL)
    {
      unint64_t v15 = 0x1EB465000;
      int v16 = 112;
      goto LABEL_189;
    }
    if (*(void *)a1 == 0x4400000010)
    {
      unint64_t v20 = 0x1EB465000;
      int v21 = 114;
LABEL_194:
      *(_DWORD *)(v20 + 732) = v21;
      unint64_t v22 = 0x1EB465000;
      int v23 = 10;
      goto LABEL_187;
    }
    if (*(void *)a1 == 0x4400000011)
    {
      unint64_t v20 = 0x1EB465000;
      int v21 = 115;
      goto LABEL_194;
    }
    if (*(void *)a1 == 0x440000003FLL)
    {
      unint64_t v20 = 0x1EB465000;
      int v21 = 116;
      goto LABEL_194;
    }
    if (*(void *)a1 == 0x4400000040)
    {
      unint64_t v20 = 0x1EB465000;
      int v21 = 117;
      goto LABEL_194;
    }
    if (*(void *)a1 == 0x4E000000BCLL)
    {
      int v8 = 118;
      goto LABEL_185;
    }
    if (*(void *)a1 == 0x4A00000137)
    {
      unint64_t v20 = 0x1EB465000;
      int v21 = 120;
      goto LABEL_194;
    }
    if (*(void *)a1 == 0x4A000000B6)
    {
      unint64_t v15 = 0x1EB465000;
      int v16 = 122;
      goto LABEL_189;
    }
    if (*(void *)a1 == 0x4A00000198)
    {
      unint64_t v20 = 0x1EB465000uLL;
      int v21 = 123;
      goto LABEL_194;
    }
    if (*(void *)a1 == 0x4400000031)
    {
      sTelephonyProduct = 124;
      unint64_t v22 = 0x1EB465000;
      int v23 = 11;
LABEL_187:
      *(_DWORD *)(v22 + 736) = v23;
      unint64_t v7 = 0x1EB465000;
      int v6 = 1;
      goto LABEL_191;
    }
    if (*(void *)a1 == 0x4A0000026ALL)
    {
      unint64_t v24 = 0x1EB465000;
      int v25 = 125;
LABEL_195:
      *(_DWORD *)(v24 + 732) = v25;
      unint64_t v22 = 0x1EB465000;
      int v23 = 12;
      goto LABEL_187;
    }
    if (*(void *)a1 == 0x4A0000026DLL)
    {
      unint64_t v24 = 0x1EB465000;
      int v25 = 126;
      goto LABEL_195;
    }
    if (*(void *)a1 == 0x4E00000095)
    {
      int v8 = 127;
      goto LABEL_185;
    }
    if (*(void *)a1 == 0x4E000000C6)
    {
      int v8 = 129;
      goto LABEL_185;
    }
    if (*(void *)a1 == 0x4E000000C7)
    {
      int v8 = 131;
      goto LABEL_185;
    }
    if (*(void *)a1 == 0x440000001BLL)
    {
      unint64_t v24 = 0x1EB465000;
      int v25 = 132;
      goto LABEL_195;
    }
    if (*(void *)a1 == 0x440000001CLL)
    {
      unint64_t v24 = 0x1EB465000;
      int v25 = 133;
      goto LABEL_195;
    }
    if (*(void *)a1 == 0x4400000049)
    {
      unint64_t v24 = 0x1EB465000;
      int v25 = 134;
      goto LABEL_195;
    }
    if (*(void *)a1 == 0x440000004ALL)
    {
      unint64_t v24 = 0x1EB465000uLL;
      int v25 = 135;
      goto LABEL_195;
    }
    if (*(void *)a1 == 0x4A00000110)
    {
      unint64_t v20 = 0x1EB465000;
      int v21 = 136;
      goto LABEL_194;
    }
    if (*(void *)a1 == 0x4A000001FCLL)
    {
      unint64_t v26 = 0x1EB465000;
      int v27 = 137;
LABEL_196:
      *(_DWORD *)(v26 + 732) = v27;
      unint64_t v22 = 0x1EB465000;
      int v23 = 13;
      goto LABEL_187;
    }
    if (*(void *)a1 == 0x4A0000021ALL)
    {
      unint64_t v26 = 0x1EB465000;
      int v27 = 138;
      goto LABEL_196;
    }
    if (*(void *)a1 == 0x4E000000D0)
    {
      int v8 = 139;
      goto LABEL_185;
    }
    if (*(void *)a1 == 0x4E000000D2)
    {
      int v8 = 141;
      goto LABEL_185;
    }
    if (*(void *)a1 == 0x4400000025)
    {
      unint64_t v26 = 0x1EB465000;
      int v27 = 142;
      goto LABEL_196;
    }
    if (*(void *)a1 == 0x4400000026)
    {
      unint64_t v26 = 0x1EB465000;
      int v27 = 143;
      goto LABEL_196;
    }
    if (*(void *)a1 == 0x4400000053)
    {
      unint64_t v26 = 0x1EB465000;
      int v27 = 144;
      goto LABEL_196;
    }
    if (*(void *)a1 == 0x4400000054)
    {
      unint64_t v26 = 0x1EB465000;
      int v27 = 145;
      goto LABEL_196;
    }
    if (*(void *)a1 == 0x4A0000019BLL)
    {
      unint64_t v26 = 0x1EB465000;
      int v27 = 146;
      goto LABEL_196;
    }
    if (*(void *)a1 == 0x4A000002CELL)
    {
      unint64_t v26 = 0x1EB465000;
      int v27 = 147;
      goto LABEL_196;
    }
    if (*(void *)a1 == 0x4A000002D1)
    {
      unint64_t v26 = 0x1EB465000uLL;
      int v27 = 148;
      goto LABEL_196;
    }
    if (*(void *)a1 == 0x440000002FLL)
    {
      unint64_t v28 = 0x1EB465000;
      int v29 = 149;
LABEL_197:
      *(_DWORD *)(v28 + 732) = v29;
      unint64_t v22 = 0x1EB465000;
      int v23 = 17;
      goto LABEL_187;
    }
    if (*(void *)a1 == 0x4400000030)
    {
      unint64_t v28 = 0x1EB465000;
      int v29 = 150;
      goto LABEL_197;
    }
    if (*(void *)a1 == 0x440000005DLL)
    {
      unint64_t v28 = 0x1EB465000;
      int v29 = 151;
      goto LABEL_197;
    }
    if (*(void *)a1 == 0x440000005ELL)
    {
      unint64_t v28 = 0x1EB465000uLL;
      int v29 = 152;
      goto LABEL_197;
    }
    if (*(void *)a1 == 0x4E000000DALL)
    {
      int v8 = 153;
      goto LABEL_185;
    }
    if (*(void *)a1 == 0x4E000000E6)
    {
      unint64_t v30 = 0x1EB465000uLL;
      int v31 = 155;
      goto LABEL_198;
    }
    if (*(void *)a1 == 0x560000003BLL)
    {
      int v32 = 156;
    }
    else
    {
      if (*(void *)a1 == 0x4A000001E2)
      {
        unint64_t v26 = 0x1EB465000;
        int v27 = 157;
        goto LABEL_196;
      }
      if (*(void *)a1 == 0x4A00000260)
      {
        unint64_t v26 = 0x1EB465000;
        int v27 = 158;
        goto LABEL_196;
      }
      if (*(void *)a1 == 0x4A0000027ELL)
      {
        unint64_t v26 = 0x1EB465000;
        int v27 = 159;
        goto LABEL_196;
      }
      if (*(void *)a1 == 0x5400001FAELL)
      {
        int v32 = 200;
      }
      else if (*(void *)a1 == 0x4300000FA0)
      {
        int v32 = 201;
      }
      else if (*(void *)a1 == 0x54000002E6)
      {
        int v32 = 202;
      }
      else
      {
        if (*(void *)a1 != 0x4300000FA0)
        {
          switch(*(void *)a1)
          {
            case 0x5400001FB8:
              unint64_t v35 = 0x1EB465000;
              int v36 = 207;
              break;
            case 0x4300000FB4:
              unint64_t v35 = 0x1EB465000uLL;
              int v36 = 208;
              break;
            case 0x5400000481:
              int v8 = 209;
              goto LABEL_185;
            case 0x54000004D0:
              unint64_t v30 = 0x1EB465000;
              int v31 = 211;
LABEL_198:
              *(_DWORD *)(v30 + 732) = v31;
              sTelephonyRadio = 16;
              unint64_t v7 = 0x1EB465000;
              int v6 = 4;
              goto LABEL_191;
            case 0x54000007EELL:
              unint64_t v26 = 0x1EB465000;
              int v27 = 212;
              goto LABEL_196;
            default:
              switch(*(void *)a1)
              {
                case 0x5700000063:
                  unint64_t v37 = 0x1EB465000;
                  int v38 = 0x8000;
                  break;
                case 0x5000000063:
                  unint64_t v37 = 0x1EB465000;
                  int v38 = 32769;
                  break;
                case 0x4D00000040:
                  unint64_t v37 = 0x1EB465000uLL;
                  int v38 = 32770;
                  break;
                default:
                  sTelephonyProduct = 0;
                  sTelephonyRadio = 0;
                  sTelephonyRadioVendor = 0;
                  sTelephonyHardwareConfig = 0;
                  return result;
              }
              *(_DWORD *)(v37 + 732) = v38;
              goto LABEL_182;
          }
          *(_DWORD *)(v35 + 732) = v36;
          unint64_t v33 = 0x1EB465000;
          int v34 = 15;
LABEL_200:
          *(_DWORD *)(v33 + 736) = v34;
          unint64_t v7 = 0x1EB465000;
          int v6 = 3;
          goto LABEL_191;
        }
        int v32 = 204;
      }
    }
    sTelephonyProduct = v32;
    unint64_t v33 = 0x1EB465000uLL;
    int v34 = 14;
    goto LABEL_200;
  }
  unint64_t v2 = 0x1EB465000;
  int v3 = 33;
LABEL_184:
  *(_DWORD *)(v2 + 732) = v3;
  int v6 = 1;
  sTelephonyRadio = 1;
  unint64_t v7 = 0x1EB465000;
LABEL_191:
  *(_DWORD *)(v7 + 740) = v6;
  return result;
}

uint64_t TelephonyRadiosDetermineRadio(uint64_t a1)
{
  return sTelephonyRadio;
}

uint64_t TelephonyRadiosGetProduct()
{
  if (_TelephonyRadiosGetRadioInternal_sOnce != -1) {
    dispatch_once(&_TelephonyRadiosGetRadioInternal_sOnce, &__block_literal_global_4);
  }
  return sTelephonyProduct;
}

uint64_t TelephonyRadiosGetHardwareConfig()
{
  if (_TelephonyRadiosGetRadioInternal_sOnce != -1) {
    dispatch_once(&_TelephonyRadiosGetRadioInternal_sOnce, &__block_literal_global_4);
  }
  return sTelephonyHardwareConfig;
}

uint64_t ctu::llvm::StringRef::compare_lower(uint64_t a1, const char *a2, unint64_t a3)
{
  unint64_t v3 = a3;
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4 < a3) {
    a3 = *(void *)(a1 + 8);
  }
  LODWORD(result) = ascii_strncasecmp(*(const char **)a1, a2, a3);
  if (v4 < v3) {
    unsigned int v6 = -1;
  }
  else {
    unsigned int v6 = 1;
  }
  if (v4 == v3) {
    unsigned int v6 = 0;
  }
  if (result) {
    return result;
  }
  else {
    return v6;
  }
}

uint64_t ascii_strncasecmp(const char *a1, const char *a2, uint64_t a3)
{
  if (!a3) {
    return 0;
  }
  while (1)
  {
    int v4 = *(unsigned __int8 *)a1++;
    unsigned __int8 v3 = v4;
    unsigned __int8 v5 = v4 + 32;
    if ((v4 - 65) < 0x1A) {
      unsigned __int8 v3 = v5;
    }
    int v7 = *(unsigned __int8 *)a2++;
    unsigned __int8 v6 = v7;
    unsigned __int8 v8 = v7 + 32;
    if ((v7 - 65) < 0x1A) {
      unsigned __int8 v6 = v8;
    }
    if (v3 != v6) {
      break;
    }
    if (!--a3) {
      return 0;
    }
  }
  if (v3 < v6) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 1;
  }
}

BOOL ctu::llvm::StringRef::startswith_lower(uint64_t a1, const char *a2, unint64_t a3)
{
  return *(void *)(a1 + 8) >= a3 && ascii_strncasecmp(*(const char **)a1, a2, a3) == 0;
}

BOOL ctu::llvm::StringRef::endswith_lower(void *a1, const char *a2, unint64_t a3)
{
  unint64_t v3 = a1[1];
  return v3 >= a3 && ascii_strncasecmp((const char *)(*a1 + v3 - a3), a2, a3) == 0;
}

uint64_t ctu::llvm::StringRef::compare_numeric(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5 = a1[1];
  if (v5 >= a3) {
    unint64_t v6 = a3;
  }
  else {
    unint64_t v6 = a1[1];
  }
  if (v6)
  {
    uint64_t v7 = a2;
    unint64_t v8 = 0;
    unint64_t v9 = v6 + 1;
    uint64_t v10 = *a1;
    uint64_t v11 = -(uint64_t)v6;
    uint64_t v12 = a2 + 1;
    uint64_t v13 = *a1 + 1;
    do
    {
      unsigned int v14 = *(unsigned __int8 *)(v10 + v8);
      unsigned int v15 = *(unsigned __int8 *)(v7 + v8);
      if (v14 - 48 > 9 || v15 - 48 > 9)
      {
        unint64_t v17 = v8;
        if (v14 != v15)
        {
          if (v14 < v15) {
            return 0xFFFFFFFFLL;
          }
          else {
            return 1;
          }
        }
      }
      else
      {
        uint64_t v18 = 0;
        uint64_t v19 = v13;
        uint64_t v20 = v12;
        do
        {
          if (!(v11 + v8 + v18))
          {
            unint64_t v17 = v6;
            unint64_t v27 = v9;
            goto LABEL_33;
          }
          unint64_t v21 = v8 + v18 + 1;
          int v22 = v21 < v5 && *(unsigned __int8 *)(v19 + v8) - 48 < 0xA;
          if (v21 >= a3)
          {
            int v25 = 5;
            unsigned int v24 = 1;
          }
          else
          {
            unsigned int v23 = (*(unsigned char *)(v20 + v8) - 48);
            v22 ^= v23 < 0xA;
            if (v23 < 0xA) {
              unsigned int v24 = -1;
            }
            else {
              unsigned int v24 = 1;
            }
            int v25 = 0;
          }
          if (v22) {
            uint64_t v3 = v24;
          }
          else {
            uint64_t v3 = v3;
          }
          if (v22) {
            int v26 = 1;
          }
          else {
            int v26 = v25;
          }
          ++v18;
          ++v20;
          ++v19;
        }
        while (!v26);
        if (v26 != 5) {
          return v3;
        }
        unint64_t v27 = v8 + v18;
        unint64_t v17 = v27 - 1;
LABEL_33:
        if (v27 != v8)
        {
          uint64_t v28 = v10;
          uint64_t v29 = v7;
          unint64_t v33 = v6;
          int v30 = memcmp((const void *)(v10 + v8), (const void *)(v7 + v8), v27 - v8);
          unint64_t v6 = v33;
          uint64_t v7 = v29;
          uint64_t v10 = v28;
          if (v30) {
            return (v30 >> 31) | 1u;
          }
        }
      }
      unint64_t v8 = v17 + 1;
    }
    while (v17 + 1 != v6);
  }
  if (v5 < a3) {
    unsigned int v31 = -1;
  }
  else {
    unsigned int v31 = 1;
  }
  if (v5 == a3) {
    return 0;
  }
  else {
    return v31;
  }
}

void *ctu::llvm::StringRef::lower@<X0>(ctu::llvm::StringRef *this@<X0>, void *a2@<X8>)
{
  memset(a2, 170, 24);
  uint64_t result = std::string::basic_string[abi:ne180100](a2, *((void *)this + 1), 0);
  uint64_t v4 = *((void *)this + 1);
  if (v4)
  {
    for (uint64_t i = 0; i != v4; ++i)
    {
      int v6 = *(unsigned __int8 *)(*(void *)this + i);
      if ((v6 - 65) < 0x1A) {
        LOBYTE(v6) = v6 + 32;
      }
      if (*((char *)result + 23) >= 0) {
        uint64_t v7 = result;
      }
      else {
        uint64_t v7 = (void *)*result;
      }
      *((unsigned char *)v7 + i) = v6;
    }
  }
  return result;
}

void *ctu::llvm::StringRef::upper@<X0>(ctu::llvm::StringRef *this@<X0>, void *a2@<X8>)
{
  memset(a2, 170, 24);
  uint64_t result = std::string::basic_string[abi:ne180100](a2, *((void *)this + 1), 0);
  uint64_t v4 = *((void *)this + 1);
  if (v4)
  {
    for (uint64_t i = 0; i != v4; ++i)
    {
      int v6 = *(unsigned __int8 *)(*(void *)this + i);
      if ((v6 - 97) < 0x1A) {
        LOBYTE(v6) = v6 - 32;
      }
      if (*((char *)result + 23) >= 0) {
        uint64_t v7 = result;
      }
      else {
        uint64_t v7 = (void *)*result;
      }
      *((unsigned char *)v7 + i) = v6;
    }
  }
  return result;
}

uint64_t ctu::llvm::StringRef::find(uint64_t *a1, unsigned __int8 *a2, size_t a3, unint64_t a4)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = a1[1];
  unint64_t v5 = v4 - a3;
  if (v4 < a3) {
    return -1;
  }
  unint64_t v6 = a4;
  if (a3 - 256 >= 0xFFFFFFFFFFFFFF01 && v4 > 0xF)
  {
    size_t v9 = v4 - a4;
    if (v4 > a4)
    {
      int8x16_t v21 = vdupq_n_s8(a3);
      int8x16_t v22 = v21;
      v20[12] = v21;
      v20[13] = v21;
      v20[10] = v21;
      v20[11] = v21;
      v20[8] = v21;
      v20[9] = v21;
      v20[6] = v21;
      v20[7] = v21;
      xpc_object_t v20[4] = v21;
      v20[5] = v21;
      v20[2] = v21;
      v20[3] = v21;
      v20[0] = v21;
      v20[1] = v21;
      size_t v10 = a3 - 1;
      if (a3 != 1)
      {
        uint64_t v11 = 0;
        size_t v12 = a3 - 1;
        do
          *((unsigned char *)v20 + a2[v11++]) = v12--;
        while (v10 != v11);
      }
      if (v9 >= a3)
      {
        uint64_t v13 = *a1;
        while (1)
        {
          unint64_t v14 = v6 >= v4 ? v4 : v6;
          if (a3 <= v4 - v14 && (!a3 || !memcmp((const void *)(v13 + v14), a2, a3))) {
            break;
          }
          uint64_t v15 = *((unsigned __int8 *)v20 + *(unsigned __int8 *)(v13 + v6 + v10));
          v9 -= v15;
          v6 += v15;
          if (v9 < a3) {
            return -1;
          }
        }
        return v6;
      }
    }
    return -1;
  }
  unint64_t v16 = v5 + 1;
  if (v5 + 1 <= a4) {
    return -1;
  }
  uint64_t v17 = *a1;
  while (1)
  {
    unint64_t v18 = v6 >= v4 ? v4 : v6;
    if (a3 <= v4 - v18 && (!a3 || !memcmp((const void *)(v17 + v18), a2, a3))) {
      break;
    }
    if (v16 == ++v6) {
      return -1;
    }
  }
  return v6;
}

size_t ctu::llvm::StringRef::rfind(uint64_t *a1, void *__s2, size_t __n)
{
  size_t v3 = a1[1];
  size_t v4 = v3 - __n;
  if (v3 < __n) {
    return -1;
  }
  size_t v5 = v4 + 1;
  if (v4 == -1) {
    return -1;
  }
  uint64_t v9 = *a1;
  while (1)
  {
    --v5;
    size_t v10 = v4 >= v3 ? v3 : v4;
    if (__n <= v3 - v10)
    {
      if (!__n) {
        return v4;
      }
      if (!memcmp((const void *)(v9 + v10), __s2, __n)) {
        break;
      }
    }
    if (--v4 == -1) {
      return v4;
    }
  }
  return v5;
}

uint64_t ctu::llvm::StringRef::find_first_of(void *a1, unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  for (; a3; --a3)
  {
    unsigned int v4 = *a2++;
    *(void *)((char *)&v7 + (((unint64_t)v4 >> 3) & 0x18)) |= 1 << v4;
  }
  unint64_t v5 = a1[1];
  if (v5 <= a4) {
    return -1;
  }
  while (((*(void *)((char *)&v7 + (((unint64_t)*(unsigned __int8 *)(*a1 + a4) >> 3) & 0x18)) >> *(unsigned char *)(*a1 + a4)) & 1) == 0)
  {
    if (v5 == ++a4) {
      return -1;
    }
  }
  return a4;
}

unint64_t ctu::llvm::StringRef::find_first_not_of(ctu::llvm::StringRef *this, unsigned __int8 a2, unint64_t a3)
{
  unint64_t v3 = *((void *)this + 1);
  if (v3 <= a3) {
    return -1;
  }
  while (*(unsigned __int8 *)(*(void *)this + a3) == a2)
  {
    if (v3 == ++a3) {
      return -1;
    }
  }
  return a3;
}

uint64_t ctu::llvm::StringRef::find_first_not_of(void *a1, unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  for (; a3; --a3)
  {
    unsigned int v4 = *a2++;
    *(void *)((char *)&v7 + (((unint64_t)v4 >> 3) & 0x18)) |= 1 << v4;
  }
  unint64_t v5 = a1[1];
  if (v5 <= a4) {
    return -1;
  }
  while (((*(void *)((char *)&v7 + (((unint64_t)*(unsigned __int8 *)(*a1 + a4) >> 3) & 0x18)) >> *(unsigned char *)(*a1 + a4)) & 1) != 0)
  {
    if (v5 == ++a4) {
      return -1;
    }
  }
  return a4;
}

uint64_t ctu::llvm::StringRef::find_last_of(void *a1, unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  for (; a3; --a3)
  {
    unsigned int v4 = *a2++;
    *(void *)((char *)&v10 + (((unint64_t)v4 >> 3) & 0x18)) |= 1 << v4;
  }
  if (a4 >= a1[1]) {
    unint64_t v5 = a1[1];
  }
  else {
    unint64_t v5 = a4;
  }
  while (v5)
  {
    unint64_t v6 = v5 - 1;
    unint64_t v7 = *(unsigned __int8 *)(*a1 + v5 - 1);
    uint64_t v8 = *(void *)((char *)&v10 + ((v7 >> 3) & 0x18)) >> v7;
    unint64_t v5 = v6;
    if (v8) {
      return v6;
    }
  }
  return -1;
}

unint64_t ctu::llvm::StringRef::find_last_not_of(ctu::llvm::StringRef *this, unsigned __int8 a2, unint64_t a3)
{
  if (a3 >= *((void *)this + 1)) {
    unint64_t v3 = *((void *)this + 1);
  }
  else {
    unint64_t v3 = a3;
  }
  while (v3)
  {
    unint64_t v4 = v3 - 1;
    int v5 = *(unsigned __int8 *)(*(void *)this + v3-- - 1);
    if (v5 != a2) {
      return v4;
    }
  }
  return -1;
}

uint64_t ctu::llvm::StringRef::find_last_not_of(void *a1, unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  for (; a3; --a3)
  {
    unsigned int v4 = *a2++;
    *(void *)((char *)&v10 + (((unint64_t)v4 >> 3) & 0x18)) |= 1 << v4;
  }
  if (a4 >= a1[1]) {
    unint64_t v5 = a1[1];
  }
  else {
    unint64_t v5 = a4;
  }
  while (v5)
  {
    unint64_t v6 = v5 - 1;
    unint64_t v7 = *(unsigned __int8 *)(*a1 + v5 - 1);
    uint64_t v8 = *(void *)((char *)&v10 + ((v7 >> 3) & 0x18)) >> v7;
    unint64_t v5 = v6;
    if ((v8 & 1) == 0) {
      return v6;
    }
  }
  return -1;
}

void ctu::llvm::StringRef::split(long long *a1, void **a2, unsigned __int8 *a3, size_t a4, int a5, uint64_t a6)
{
  long long v49 = *a1;
  uint64_t v6 = v49;
  if ((void)v49)
  {
    int v8 = a5;
    int v12 = 0;
    uint64_t v47 = (uint64_t)(a2 + 2);
    unint64_t v13 = *((void *)&v49 + 1);
    while (v8 < 0 || v12 < v8)
    {
      unint64_t v14 = ctu::llvm::StringRef::find((uint64_t *)&v49, a3, a4, 0);
      if (v14 >= v13) {
        unint64_t v15 = v13;
      }
      else {
        unint64_t v15 = v14;
      }
      unint64_t v16 = v14 + a4;
      if (v14 + a4 >= v13) {
        unint64_t v16 = v13;
      }
      uint64_t v17 = v6 + v16;
      unint64_t v18 = v13 - v16;
      uint64_t v19 = v6;
      if (v14 == -1) {
        unint64_t v20 = v13;
      }
      else {
        unint64_t v20 = v15;
      }
      if (v14 == -1) {
        uint64_t v6 = 0;
      }
      else {
        uint64_t v6 = v17;
      }
      if (v14 == -1) {
        unint64_t v13 = 0;
      }
      else {
        unint64_t v13 = v18;
      }
      if ((a6 & 1) != 0 || v20)
      {
        int8x16_t v22 = a2[1];
        unint64_t v21 = (unint64_t)a2[2];
        if ((unint64_t)v22 >= v21)
        {
          unsigned int v24 = a3;
          uint64_t v25 = a6;
          uint64_t v26 = ((char *)v22 - (unsigned char *)*a2) >> 4;
          unint64_t v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 60) {
            goto LABEL_60;
          }
          uint64_t v28 = v21 - (void)*a2;
          if (v28 >> 3 > v27) {
            unint64_t v27 = v28 >> 3;
          }
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v29 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v29 = v27;
          }
          if (v29) {
            int v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ctu::RestResourceConnection>>>(v47, v29);
          }
          else {
            int v30 = 0;
          }
          unsigned int v31 = &v30[16 * v26];
          *(void *)unsigned int v31 = v19;
          *((void *)v31 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v20;
          unint64_t v33 = (char *)*a2;
          int v32 = (char *)a2[1];
          int v34 = v31;
          a6 = v25;
          if (v32 != *a2)
          {
            do
            {
              *((_OWORD *)v34 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = *((_OWORD *)v32 - 1);
              v34 -= 16;
              v32 -= 16;
            }
            while (v32 != v33);
            int v32 = (char *)*a2;
          }
          a3 = v24;
          uint64_t v23 = v31 + 16;
          *a2 = v34;
          a2[1] = v31 + 16;
          a2[2] = &v30[16 * v29];
          int v8 = a5;
          if (v32) {
            operator delete(v32);
          }
        }
        else
        {
          *int8x16_t v22 = v19;
          v22[1] = v20;
          uint64_t v23 = v22 + 2;
        }
        a2[1] = v23;
      }
      *(void *)&long long v49 = v6;
      *((void *)&v49 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v13;
      ++v12;
      if (!v6) {
        return;
      }
    }
    if (v13 || a6)
    {
      int v36 = a2[1];
      unint64_t v35 = (unint64_t)a2[2];
      if ((unint64_t)v36 >= v35)
      {
        uint64_t v38 = ((char *)v36 - (unsigned char *)*a2) >> 4;
        unint64_t v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 60) {
LABEL_60:
        }
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        uint64_t v40 = v35 - (void)*a2;
        if (v40 >> 3 > v39) {
          unint64_t v39 = v40 >> 3;
        }
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v41 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v41 = v39;
        }
        if (v41) {
          unint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ctu::RestResourceConnection>>>(v47, v41);
        }
        else {
          unint64_t v42 = 0;
        }
        uint64_t v43 = &v42[16 * v38];
        long long v44 = &v42[16 * v41];
        *(_OWORD *)uint64_t v43 = v49;
        unint64_t v37 = v43 + 16;
        uint64_t v46 = (char *)*a2;
        xpc_object_t v45 = (char *)a2[1];
        if (v45 != *a2)
        {
          do
          {
            *((_OWORD *)v43 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = *((_OWORD *)v45 - 1);
            v43 -= 16;
            v45 -= 16;
          }
          while (v45 != v46);
          xpc_object_t v45 = (char *)*a2;
        }
        *a2 = v43;
        a2[1] = v37;
        a2[2] = v44;
        if (v45) {
          operator delete(v45);
        }
      }
      else
      {
        *int v36 = v49;
        unint64_t v37 = v36 + 1;
      }
      a2[1] = v37;
    }
  }
}

uint64_t ctu::llvm::StringRef::count(uint64_t *a1, const void *a2, size_t a3)
{
  unint64_t v3 = a1[1];
  size_t v4 = v3 - a3;
  if (v3 < a3 || v4 == -1) {
    return 0;
  }
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  uint64_t v9 = *a1;
  size_t v10 = v4 + 1;
  do
  {
    if (v8 >= v3) {
      unint64_t v11 = v3;
    }
    else {
      unint64_t v11 = v8;
    }
    if (a3 <= v3 - v11 && (!a3 || !memcmp((const void *)(v9 + v11), a2, a3))) {
      ++v7;
    }
    ++v8;
  }
  while (v10 != v8);
  return v7;
}

uint64_t ctu::llvm::getAsUnsignedInteger(_WORD *a1, unint64_t a2, unsigned int a3, unint64_t *a4)
{
  if (a3)
  {
LABEL_2:
    if (!a2) {
      return 1;
    }
    goto LABEL_13;
  }
  if (a2 < 2)
  {
    if (!a2) {
      return 1;
    }
    goto LABEL_10;
  }
  switch(*a1)
  {
    case 0x7830:
      ++a1;
      a3 = 16;
LABEL_29:
      a2 -= 2;
      goto LABEL_2;
    case 0x6230:
      ++a1;
      a3 = 2;
      goto LABEL_29;
    case 0x6F30:
      ++a1;
      a3 = 8;
      goto LABEL_29;
  }
LABEL_10:
  if (*(unsigned char *)a1 == 48) {
    a3 = 8;
  }
  else {
    a3 = 10;
  }
LABEL_13:
  unint64_t v5 = 0;
  *a4 = 0;
  while (*(char *)a1 >= 48)
  {
    unsigned int v6 = *(unsigned __int8 *)a1;
    if (v6 >= 0x3A)
    {
      if (v6 < 0x61)
      {
        if (v6 - 65 > 0x19) {
          return 1;
        }
        int v7 = -55;
      }
      else
      {
        if (v6 >= 0x7B) {
          return 1;
        }
        int v7 = -87;
      }
    }
    else
    {
      int v7 = -48;
    }
    unsigned int v8 = v7 + v6;
    if (v8 >= a3) {
      break;
    }
    unint64_t v9 = v5 * a3 + v8;
    *a4 = v9;
    if (v9 / a3 < v5) {
      break;
    }
    a1 = (_WORD *)((char *)a1 + 1);
    unint64_t v5 = v9;
    if (!--a2) {
      return 0;
    }
  }
  return 1;
}

uint64_t ctu::llvm::getAsSignedInteger(_WORD *a1, unint64_t a2, unsigned int a3, uint64_t *a4)
{
  uint64_t v8 = 0xAAAAAAAAAAAAAAAALL;
  if (a2 && *(unsigned char *)a1 == 45)
  {
    if (ctu::llvm::getAsUnsignedInteger((_WORD *)((char *)a1 + 1), a2 - 1, a3, (unint64_t *)&v8)) {
      return 1;
    }
    uint64_t v5 = -v8;
    if (-v8 >= 0 && v8 != 0) {
      return 1;
    }
    goto LABEL_8;
  }
  char AsUnsignedInteger = ctu::llvm::getAsUnsignedInteger(a1, a2, a3, (unint64_t *)&v8);
  uint64_t result = 1;
  if ((AsUnsignedInteger & 1) == 0)
  {
    uint64_t v5 = v8;
    if ((v8 & 0x8000000000000000) == 0)
    {
LABEL_8:
      uint64_t result = 0;
      *a4 = v5;
    }
  }
  return result;
}

void *ctu::llvm::operator<<(void *a1, uint64_t a2)
{
  size_t v4 = *(void **)a2;
  if (v4)
  {
    std::string::basic_string[abi:ne180100](&__p, v4, *(void *)(a2 + 8));
    unsigned int v5 = HIBYTE(v14);
    unsigned int v6 = (void **)__p;
    uint64_t v7 = v13;
  }
  else
  {
    uint64_t v7 = 0;
    unsigned int v6 = 0;
    unsigned int v5 = 0;
    std::string __p = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
  }
  if ((v5 & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = v6;
  }
  if ((v5 & 0x80u) == 0) {
    uint64_t v9 = v5;
  }
  else {
    uint64_t v9 = v7;
  }
  size_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)p_p, v9);
  if (SHIBYTE(v14) < 0) {
    operator delete(__p);
  }
  return v10;
}

void sub_1920726BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::asChronoString@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t v21 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
  v20[7] = v4;
  v20[8] = v4;
  v20[5] = v4;
  v20[6] = v4;
  v20[3] = v4;
  xpc_object_t v20[4] = v4;
  v20[1] = v4;
  v20[2] = v4;
  long long v19 = v4;
  v20[0] = v4;
  *(_OWORD *)std::string __p = v4;
  long long v18 = v4;
  _OWORD v16[2] = v4;
  void v16[3] = v4;
  v16[0] = v4;
  v16[1] = v4;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  if (a1 > 86399)
  {
    unsigned int v5 = (void *)std::ostream::operator<<();
    char v22 = 100;
    unsigned int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)&v22, 1);
    uint64_t v7 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v6, 32);
    *(void *)((char *)v7 + *(void *)(*v7 - 24) + 24) = 2;
LABEL_4:
    uint64_t v8 = (void *)std::ostream::operator<<();
    char v22 = 104;
    uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)&v22, 1);
    size_t v10 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, 32);
    *(void *)((char *)v10 + *(void *)(*v10 - 24) + 24) = 2;
LABEL_5:
    unint64_t v11 = (void *)std::ostream::operator<<();
    char v22 = 109;
    int v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)&v22, 1);
    uint64_t v13 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v12, 32);
    *(void *)((char *)v13 + *(void *)(*v13 - 24) + 24) = 2;
    goto LABEL_6;
  }
  if (a1 >= 3600) {
    goto LABEL_4;
  }
  if (a1 >= 60) {
    goto LABEL_5;
  }
LABEL_6:
  uint64_t v14 = (void *)std::ostream::operator<<();
  char v22 = 115;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v22, 1);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v16 + 8, a2);
  *(void *)&v16[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v16 + *(void *)(*(void *)&v16[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v16[0] + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x192FED350](v20);
}

void sub_1920729A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::operator<<[abi:ne180100]<std::char_traits<char>>(void *a1, char a2)
{
  long long v4 = (char *)a1 + *(void *)(*a1 - 24);
  if (*((_DWORD *)v4 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
    unsigned int v5 = std::locale::use_facet(&v8, MEMORY[0x1E4FBA258]);
    int v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32);
    std::locale::~locale(&v8);
    *((_DWORD *)v4 + 36) = v6;
  }
  *((_DWORD *)v4 + 36) = a2;
  return a1;
}

void sub_192072A88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

double ctu::asChronoString@<D0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = a1 % 1000000000;
  memset(v26, 170, sizeof(v26));
  ctu::asChronoString(a1 / 1000000000, v26);
  if (!v3)
  {
    double result = *(double *)v26;
    *(_OWORD *)a2 = *(_OWORD *)v26;
    a2[2] = *(void *)&v26[16];
    return result;
  }
  unint64_t v25 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
  v24[7] = v4;
  v24[8] = v4;
  v24[5] = v4;
  v24[6] = v4;
  void v24[3] = v4;
  v24[4] = v4;
  v24[1] = v4;
  v24[2] = v4;
  long long v23 = v4;
  v24[0] = v4;
  *(_OWORD *)std::string __p = v4;
  long long v22 = v4;
  v20[2] = v4;
  v20[3] = v4;
  v20[0] = v4;
  v20[1] = v4;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v20);
  if (v26[23] >= 0) {
    unsigned int v5 = v26;
  }
  else {
    unsigned int v5 = *(unsigned char **)v26;
  }
  if (v26[23] >= 0) {
    uint64_t v6 = v26[23];
  }
  else {
    uint64_t v6 = *(void *)&v26[8];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v5, v6);
  uint64_t v7 = v3 % 1000000 % 1000;
  unint64_t v8 = v3 % 1000000 + 999;
  if ((unint64_t)(v3 + 999999) <= 0x1E847E && (v8 <= 0x7CE ? (BOOL v9 = v7 == 0) : (BOOL v9 = 0), v9)
    || ((char v27 = 46,
         size_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)&v27, 1),
         unint64_t v11 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, 48),
         *(void *)((char *)v11 + *(void *)(*v11 - 24) + 24) = 3,
         std::ostream::operator<<(),
         v8 <= 0x7CE)
      ? (BOOL v12 = v7 == 0)
      : (BOOL v12 = 0),
        v12))
  {
    long long v18 = "ms";
LABEL_20:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v18, 2);
    goto LABEL_21;
  }
  char v27 = 95;
  uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)&v27, 1);
  uint64_t v14 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, 48);
  *(void *)((char *)v14 + *(void *)(*v14 - 24) + 24) = 3;
  std::ostream::operator<<();
  if (!v7)
  {
    long long v18 = "us";
    goto LABEL_20;
  }
  char v27 = 95;
  unint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)&v27, 1);
  unint64_t v16 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v15, 48);
  *(void *)((char *)v16 + *(void *)(*v16 - 24) + 24) = 3;
  uint64_t v17 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"ns", 2);
LABEL_21:
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v20 + 8, a2);
  *(void *)&v20[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v20 + *(void *)(*(void *)&v20[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v20[0] + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v22) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FED350](v24);
  if ((v26[23] & 0x80000000) != 0) {
    operator delete(*(void **)v26);
  }
  return result;
}

void sub_192072E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  if (*(char *)(v9 - 73) < 0) {
    operator delete(*(void **)(v9 - 96));
  }
  _Unwind_Resume(a1);
}

uint64_t TelephonyCapabilitiesSetHardwareModelFromString(unsigned char *a1)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAAALL;
  int v3 = -1431655766;
  uint64_t result = TelephonyUtilParseHardwareModel(a1, (uint64_t)&v2);
  if (result)
  {
    sTelephonyCapabilitiesHardwareModelInfo = v2;
    dword_1EB465310 = v3;
  }
  else
  {
    dword_1EB465310 = 0;
    sTelephonyCapabilitiesHardwareModelInfo = 0;
  }
  return result;
}

uint64_t TelephonyCapabilitiesSetHardwareModelFromTelephonyProduct(int a1)
{
  if (a1 < 0x8000)
  {
    switch(a1)
    {
      case 33:
        char v1 = 97;
        char v2 = 74;
        goto LABEL_133;
      case 38:
        char v1 = 0;
        char v2 = 74;
        int v3 = 128;
        goto LABEL_136;
      case 52:
        char v1 = 0;
        char v2 = 74;
        int v3 = 121;
        goto LABEL_136;
      case 53:
        char v1 = 0;
        char v2 = 74;
        goto LABEL_96;
      case 57:
        char v1 = 115;
        goto LABEL_23;
      case 60:
        char v1 = 98;
        goto LABEL_14;
      case 61:
        char v1 = 115;
LABEL_14:
        char v2 = 78;
        int v3 = 141;
        goto LABEL_136;
      case 62:
        char v1 = 0;
        char v2 = 68;
        int v3 = 20;
        goto LABEL_136;
      case 63:
        char v1 = 0;
        char v2 = 68;
        int v3 = 21;
        goto LABEL_136;
      case 64:
        char v1 = 0;
        char v2 = 68;
        int v3 = 22;
        goto LABEL_136;
      case 65:
        char v1 = 0;
        char v2 = 68;
        int v3 = 201;
        goto LABEL_136;
      case 66:
        char v1 = 0;
        char v2 = 68;
        goto LABEL_36;
      case 67:
        char v1 = 0;
        char v2 = 68;
        int v3 = 221;
        goto LABEL_136;
      case 68:
        char v1 = 116;
        goto LABEL_23;
      case 73:
        char v1 = 98;
LABEL_23:
        char v2 = 74;
        int v3 = 72;
        goto LABEL_136;
      case 79:
        char v1 = 0;
        char v2 = 68;
        goto LABEL_30;
      case 80:
        char v1 = 0;
        goto LABEL_27;
      case 81:
        char v1 = 112;
LABEL_27:
        char v2 = 68;
        int v3 = 331;
        goto LABEL_136;
      case 82:
        char v1 = 0;
        char v2 = 74;
        int v3 = 318;
        goto LABEL_136;
      case 83:
        char v1 = 0;
        char v2 = 74;
LABEL_30:
        int v3 = 321;
        goto LABEL_136;
      case 84:
        char v1 = 0;
        char v2 = 78;
        int v3 = 841;
        goto LABEL_136;
      case 87:
        char v1 = 115;
        goto LABEL_34;
      case 88:
        char v1 = 98;
LABEL_34:
        char v2 = 78;
        int v3 = 146;
        goto LABEL_136;
      case 89:
        char v1 = 0;
        char v2 = 74;
LABEL_36:
        int v3 = 211;
        goto LABEL_136;
      case 90:
        char v1 = 0;
        char v2 = 74;
        goto LABEL_112;
      case 91:
        char v1 = 0;
        char v2 = 78;
        int v3 = 104;
        goto LABEL_136;
      case 92:
        char v1 = 0;
        char v2 = 68;
        goto LABEL_43;
      case 93:
        char v1 = 0;
        char v2 = 68;
        int v3 = 431;
        goto LABEL_136;
      case 94:
        char v1 = 0;
        goto LABEL_65;
      case 95:
        char v1 = 0;
        char v2 = 74;
LABEL_43:
        int v3 = 421;
        goto LABEL_136;
      case 96:
        char v1 = 0;
        char v2 = 74;
        int v3 = 418;
        goto LABEL_136;
      case 97:
        char v1 = 0;
        char v2 = 68;
        int v3 = 79;
        goto LABEL_136;
      case 99:
        char v1 = 103;
        char v2 = 68;
        int v3 = 52;
        goto LABEL_136;
      case 100:
        char v1 = 103;
        goto LABEL_49;
      case 101:
        char v1 = 112;
LABEL_49:
        char v2 = 68;
        int v3 = 53;
        goto LABEL_136;
      case 102:
        char v1 = 112;
        char v2 = 68;
        int v3 = 54;
        goto LABEL_136;
      case 103:
        char v1 = 115;
        goto LABEL_53;
      case 104:
        char v1 = 98;
LABEL_53:
        char v2 = 78;
        int v3 = 142;
        goto LABEL_136;
      case 105:
        char v1 = 115;
        goto LABEL_56;
      case 106:
        char v1 = 98;
LABEL_56:
        char v2 = 78;
        int v3 = 158;
        goto LABEL_136;
      case 107:
        char v1 = 0;
        char v2 = 74;
        int v3 = 308;
        goto LABEL_136;
      case 108:
        char v1 = 0;
        goto LABEL_60;
      case 109:
        char v1 = 120;
LABEL_60:
        char v2 = 74;
        int v3 = 518;
        goto LABEL_136;
      case 110:
        char v1 = 0;
        goto LABEL_63;
      case 111:
        char v1 = 120;
LABEL_63:
        char v2 = 74;
        int v3 = 523;
        goto LABEL_136;
      case 112:
        char v1 = 97;
LABEL_65:
        char v2 = 74;
        int v3 = 172;
        goto LABEL_136;
      case 114:
        char v1 = 0;
        char v2 = 68;
        int v3 = 16;
        goto LABEL_136;
      case 115:
        char v1 = 0;
        char v2 = 68;
        int v3 = 17;
        goto LABEL_136;
      case 116:
        char v1 = 0;
        char v2 = 68;
        int v3 = 63;
        goto LABEL_136;
      case 117:
        char v1 = 0;
        char v2 = 68;
        goto LABEL_135;
      case 118:
        char v1 = 115;
        goto LABEL_72;
      case 119:
        char v1 = 98;
LABEL_72:
        char v2 = 78;
        int v3 = 188;
        goto LABEL_136;
      case 120:
        char v1 = 0;
        char v2 = 74;
        int v3 = 311;
        goto LABEL_136;
      case 122:
        char v1 = 0;
        char v2 = 74;
        int v3 = 182;
        goto LABEL_136;
      case 123:
        char v1 = 0;
        char v2 = 74;
        int v3 = 408;
        goto LABEL_136;
      case 124:
        char v1 = 0;
        char v2 = 68;
        int v3 = 49;
        goto LABEL_136;
      case 125:
        char v1 = 0;
        char v2 = 74;
        int v3 = 618;
        goto LABEL_136;
      case 126:
        char v1 = 0;
        char v2 = 74;
        int v3 = 621;
        goto LABEL_136;
      case 127:
        char v1 = 115;
        goto LABEL_81;
      case 128:
        char v1 = 98;
LABEL_81:
        char v2 = 78;
        int v3 = 149;
        goto LABEL_136;
      case 129:
        char v1 = 115;
        goto LABEL_84;
      case 130:
        char v1 = 98;
LABEL_84:
        char v2 = 78;
        int v3 = 198;
        goto LABEL_136;
      case 131:
        char v1 = 0;
        char v2 = 78;
        int v3 = 199;
        goto LABEL_136;
      case 132:
        char v1 = 0;
        char v2 = 68;
        int v3 = 27;
        goto LABEL_136;
      case 133:
        char v1 = 0;
        char v2 = 68;
        int v3 = 28;
        goto LABEL_136;
      case 134:
        char v1 = 0;
        char v2 = 68;
        int v3 = 73;
        goto LABEL_136;
      case 135:
        char v1 = 0;
        char v2 = 68;
        int v3 = 74;
        goto LABEL_136;
      case 136:
        char v1 = 0;
        char v2 = 74;
        int v3 = 272;
        goto LABEL_136;
      case 137:
        char v1 = 0;
        char v2 = 74;
        int v3 = 508;
        goto LABEL_136;
      case 138:
        char v1 = 0;
        char v2 = 74;
        int v3 = 538;
        goto LABEL_136;
      case 139:
        char v1 = 115;
        goto LABEL_95;
      case 140:
        char v1 = 98;
LABEL_95:
        char v2 = 78;
LABEL_96:
        int v3 = 208;
        goto LABEL_136;
      case 141:
        char v1 = 0;
        char v2 = 78;
        int v3 = 210;
        goto LABEL_136;
      case 142:
        char v1 = 0;
        char v2 = 68;
        int v3 = 37;
        goto LABEL_136;
      case 143:
        char v1 = 0;
        char v2 = 68;
        int v3 = 38;
        goto LABEL_136;
      case 144:
        char v1 = 0;
        char v2 = 68;
        int v3 = 83;
        goto LABEL_136;
      case 145:
        char v1 = 0;
        char v2 = 68;
        int v3 = 84;
        goto LABEL_136;
      case 146:
        char v1 = 0;
        char v2 = 74;
        int v3 = 411;
        goto LABEL_136;
      case 147:
        char v1 = 0;
        char v2 = 74;
        int v3 = 718;
        goto LABEL_136;
      case 148:
        char v1 = 0;
        char v2 = 74;
        int v3 = 721;
        goto LABEL_136;
      case 149:
        char v1 = 0;
        char v2 = 68;
        int v3 = 47;
        goto LABEL_136;
      case 150:
        char v1 = 0;
        char v2 = 68;
        int v3 = 48;
        goto LABEL_136;
      case 151:
        char v1 = 0;
        char v2 = 68;
        int v3 = 93;
        goto LABEL_136;
      case 152:
        char v1 = 0;
        char v2 = 68;
        int v3 = 94;
        goto LABEL_136;
      case 153:
        char v1 = 115;
        goto LABEL_111;
      case 154:
        char v1 = 98;
LABEL_111:
        char v2 = 78;
LABEL_112:
        int v3 = 218;
        goto LABEL_136;
      case 155:
        char v1 = 0;
        char v2 = 78;
        int v3 = 230;
        goto LABEL_136;
      case 156:
        char v1 = 0;
        char v2 = 86;
        int v3 = 59;
        goto LABEL_136;
      case 157:
        char v1 = 0;
        char v2 = 74;
        int v3 = 482;
        goto LABEL_136;
      case 158:
        char v1 = 0;
        char v2 = 74;
        int v3 = 608;
        goto LABEL_136;
      case 159:
        char v1 = 0;
        char v2 = 74;
        int v3 = 638;
        goto LABEL_136;
      case 200:
        char v1 = 120;
        char v2 = 84;
        int v3 = 8110;
        goto LABEL_136;
      case 201:
        char v1 = 0;
        goto LABEL_126;
      case 202:
        char v1 = 0;
        goto LABEL_122;
      case 203:
        char v1 = 120;
LABEL_122:
        char v2 = 84;
        int v3 = 742;
        goto LABEL_136;
      case 204:
        char v1 = 98;
        goto LABEL_126;
      case 205:
        char v1 = 107;
        goto LABEL_126;
      case 206:
        char v1 = 118;
LABEL_126:
        char v2 = 67;
        int v3 = 4000;
        break;
      case 207:
        char v1 = 120;
        char v2 = 84;
        int v3 = 8120;
        goto LABEL_136;
      case 208:
        char v1 = 0;
        char v2 = 67;
        int v3 = 4020;
        goto LABEL_136;
      case 209:
        char v1 = 0;
        char v2 = 84;
        int v3 = 1153;
        goto LABEL_136;
      case 211:
        char v1 = 0;
        char v2 = 84;
        int v3 = 1232;
        goto LABEL_136;
      case 212:
        char v1 = 0;
        char v2 = 84;
        int v3 = 2030;
        goto LABEL_136;
      default:
        goto LABEL_137;
    }
    goto LABEL_136;
  }
  switch(a1)
  {
    case 32768:
      char v1 = 104;
      char v2 = 87;
      goto LABEL_133;
    case 32770:
      char v1 = 100;
      char v2 = 77;
LABEL_135:
      int v3 = 64;
      goto LABEL_136;
    case 32769:
      char v1 = 100;
      char v2 = 80;
LABEL_133:
      int v3 = 99;
LABEL_136:
      LODWORD(sTelephonyCapabilitiesHardwareModelInfo) = v3;
      BYTE4(sTelephonyCapabilitiesHardwareModelInfo) = v2;
      BYTE5(sTelephonyCapabilitiesHardwareModelInfo) = v1;
      HIWORD(sTelephonyCapabilitiesHardwareModelInfo) = 0;
      dword_1EB465310 = 0;
      return 1;
  }
LABEL_137:
  uint64_t result = 0;
  dword_1EB465310 = 0;
  sTelephonyCapabilitiesHardwareModelInfo = 0;
  return result;
}

uint64_t *TelephonyCapabilitiesGetHardwareModel()
{
  if (TelephonyCapabilitiesGetHardwareModel_sOnce != -1) {
    dispatch_once(&TelephonyCapabilitiesGetHardwareModel_sOnce, &__block_literal_global_5);
  }
  return &sTelephonyCapabilitiesHardwareModelInfo;
}

void __TelephonyCapabilitiesGetHardwareModel_block_invoke()
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  memset(v21, 0, sizeof(v21));
  host_t v0 = dlopen("/usr/lib/libMobileGestalt.dylib", 1);
  if (!v0)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_47;
    }
    *(_WORD *)buf = 0;
    uint64_t v6 = MEMORY[0x1E4F14500];
    uint64_t v7 = "Failed to load MobileGestalt library";
    goto LABEL_13;
  }
  char v1 = (uint64_t (*)(__CFString *, void))dlsym(v0, "MGCopyAnswer");
  if (!v1)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_47;
    }
    *(_WORD *)buf = 0;
    uint64_t v6 = MEMORY[0x1E4F14500];
    uint64_t v7 = "Unable to find MGCopyAnswer function";
    goto LABEL_13;
  }
  char v2 = v1;
  CFBooleanRef v3 = (const __CFBoolean *)v1(@"IsVirtualDevice", 0);
  if (!v3)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_192046000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEBUG, "Unable to determine whether this is a virtual device", buf, 2u);
    }
    goto LABEL_47;
  }
  CFBooleanRef v4 = v3;
  if (CFBooleanGetValue(v3) == 1)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_192046000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEBUG, "Detected virtual device, so treating it as unknown Telephony product", buf, 2u);
    }
    dword_1EB465310 = 0;
    sTelephonyCapabilitiesHardwareModelInfo = 0;
    CFStringRef v5 = (const __CFString *)v4;
    goto LABEL_8;
  }
  CFRelease(v4);
  CFBooleanRef v9 = (const __CFBoolean *)v2(@"HasBaseband", 0);
  if (!v9)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_47;
    }
    *(_WORD *)buf = 0;
    uint64_t v6 = MEMORY[0x1E4F14500];
    uint64_t v7 = "Unable to determine whether device has baseband";
    goto LABEL_13;
  }
  CFBooleanRef v10 = v9;
  int Value = CFBooleanGetValue(v9);
  CFRelease(v10);
  if (!Value)
  {
    CFStringRef v15 = (const __CFString *)v2(@"DeviceName", 0);
    if (v15)
    {
      CFStringRef v13 = v15;
      CFTypeID v16 = CFGetTypeID(v15);
      if (v16 != CFStringGetTypeID())
      {
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_46;
        }
        *(_WORD *)buf = 0;
        uint64_t v17 = MEMORY[0x1E4F14500];
        long long v18 = "Detected unexpected type in the MobileGestalt device name";
        goto LABEL_45;
      }
      if (CFStringCompare(@"iPad", v13, 0))
      {
        if (CFStringCompare(@"Apple Watch", v13, 0))
        {
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            goto LABEL_46;
          }
          *(_WORD *)buf = 0;
          uint64_t v17 = MEMORY[0x1E4F14500];
          long long v18 = "Detected an unsupported non-baseband device";
LABEL_45:
          _os_log_error_impl(&dword_192046000, v17, OS_LOG_TYPE_ERROR, v18, buf, 2u);
          goto LABEL_46;
        }
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_debug_impl(&dword_192046000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEBUG, "Detected a WiFi Watch", buf, 2u);
        }
        char v19 = 104;
        char v20 = 87;
      }
      else
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_debug_impl(&dword_192046000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEBUG, "Detected a WiFi iPad", buf, 2u);
        }
        char v19 = 100;
        char v20 = 80;
      }
      LODWORD(sTelephonyCapabilitiesHardwareModelInfo) = 99;
      BYTE4(sTelephonyCapabilitiesHardwareModelInfo) = v20;
      BYTE5(sTelephonyCapabilitiesHardwareModelInfo) = v19;
      HIWORD(sTelephonyCapabilitiesHardwareModelInfo) = 0;
      dword_1EB465310 = 0;
      CFStringRef v5 = v13;
LABEL_8:
      CFRelease(v5);
      return;
    }
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_47;
    }
    *(_WORD *)buf = 0;
    uint64_t v6 = MEMORY[0x1E4F14500];
    uint64_t v7 = "Unable to determine the device name";
LABEL_13:
    uint32_t v8 = 2;
LABEL_14:
    _os_log_error_impl(&dword_192046000, v6, OS_LOG_TYPE_ERROR, v7, buf, v8);
    goto LABEL_47;
  }
  CFStringRef v12 = (const __CFString *)v2(@"HWModelStr", 0);
  if (!v12)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_47;
    }
    *(_WORD *)buf = 0;
    uint64_t v6 = MEMORY[0x1E4F14500];
    uint64_t v7 = "Unable to determine the hardware model string";
    goto LABEL_13;
  }
  CFStringRef v13 = v12;
  CFTypeID v14 = CFGetTypeID(v12);
  if (v14 != CFStringGetTypeID())
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_46;
    }
    *(_WORD *)buf = 0;
    uint64_t v17 = MEMORY[0x1E4F14500];
    long long v18 = "Detected unexpected type in the MobileGestalt hardware model string";
    goto LABEL_45;
  }
  if (!CFStringGetCString(v13, (char *)v21, 32, 0x600u))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      uint64_t v17 = MEMORY[0x1E4F14500];
      long long v18 = "Unable to copy MobileGestalt hardware model string into local buffer";
      goto LABEL_45;
    }
LABEL_46:
    CFRelease(v13);
    goto LABEL_47;
  }
  CFRelease(v13);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = v21;
    _os_log_debug_impl(&dword_192046000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEBUG, "Detected a baseband device with hardware model string '%s'", buf, 0xCu);
  }
  memset(buf, 170, 12);
  if (TelephonyUtilParseHardwareModel(v21, (uint64_t)buf))
  {
    sTelephonyCapabilitiesHardwareModelInfo = *(void *)buf;
    dword_1EB465310 = *(_DWORD *)&buf[8];
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_192046000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEBUG, "Successfully set the hardware model info", buf, 2u);
    }
    return;
  }
  dword_1EB465310 = 0;
  sTelephonyCapabilitiesHardwareModelInfo = 0;
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = v21;
    uint64_t v6 = MEMORY[0x1E4F14500];
    uint64_t v7 = "Failed to set hardware model info based on hardware model string '%s'";
    uint32_t v8 = 12;
    goto LABEL_14;
  }
LABEL_47:
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    LOWORD(v21[0]) = 0;
    _os_log_error_impl(&dword_192046000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Treating device as unknown Telephony product due error determining hardware model info from MobileGestalt query", (uint8_t *)v21, 2u);
  }
  dword_1EB465310 = 0;
  sTelephonyCapabilitiesHardwareModelInfo = 0;
}

uint64_t TelephonyCapabilitiesSetHardwareModel(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  dword_1EB465310 = *(_DWORD *)(result + 8);
  sTelephonyCapabilitiesHardwareModelInfo = v1;
  return result;
}

uint64_t TelephonyCapabilitiesRadioCoreDumpCaptureTime()
{
  if (_TelephonyRadiosGetRadioInternal_sOnce != -1) {
    dispatch_once(&_TelephonyRadiosGetRadioInternal_sOnce, &__block_literal_global_4);
  }
  if ((sTelephonyRadioVendor - 1) > 3) {
    return 240000;
  }
  else {
    return dword_1920BDF30[sTelephonyRadioVendor - 1];
  }
}

uint64_t TelephonyCapabilitiesRadioCoreDumpSupportsSPMISignalling()
{
  if (_TelephonyRadiosGetRadioInternal_sOnce != -1) {
    dispatch_once(&_TelephonyRadiosGetRadioInternal_sOnce, &__block_literal_global_4);
  }
  return ((sTelephonyProduct - 156) < 0x35) & (0x18700000000001uLL >> (sTelephonyProduct
                                                                                                 + 100));
}

BOOL ctu::fs::file_exists(const char *a1)
{
  v1.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v1.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v3.st_blkstd::string::size_type size = v1;
  *(timespec *)v3.st_qspare = v1;
  v3.st_birthtimespec = v1;
  *(timespec *)&v3.st_std::string::size_type size = v1;
  v3.st_mtimespec = v1;
  v3.st_ctimespec = v1;
  *(timespec *)&v3.st_uid = v1;
  v3.st_atimespec = v1;
  *(timespec *)&v3.st_dev = v1;
  return stat(a1, &v3) == 0;
}

BOOL ctu::fs::is_directory(const char *a1)
{
  v1.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v1.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v4.st_blkstd::string::size_type size = v1;
  *(timespec *)v4.st_qspare = v1;
  v4.st_birthtimespec = v1;
  *(timespec *)&v4.st_std::string::size_type size = v1;
  v4.st_mtimespec = v1;
  v4.st_ctimespec = v1;
  *(timespec *)&v4.st_uid = v1;
  v4.st_atimespec = v1;
  *(timespec *)&v4.st_dev = v1;
  return !stat(a1, &v4) && (v4.st_mode & 0xF000) == 0x4000;
}

BOOL ctu::fs::create_directory(char *a1, size_t a2, mode_t a3, int a4)
{
  v8.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v8.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&__dst.st_blkstd::string::size_type size = v8;
  *(timespec *)__dst.st_qspare = v8;
  __dst.st_birthtimespec = v8;
  *(timespec *)&__dst.st_std::string::size_type size = v8;
  __dst.st_ctimespec = v8;
  __dst.st_atimespec = v8;
  __dst.st_mtimespec = v8;
  *(timespec *)&__dst.st_dev = v8;
  *(timespec *)&__dst.st_uid = v8;
  if (!stat(a1, &__dst) && (__dst.st_mode & 0xF000) == 0x4000) {
    return 1;
  }
  if (!a4) {
    return ctu::fs::_create_directory(a1, a2, a3);
  }
  memset(&__str, 170, sizeof(__str));
  std::string::basic_string[abi:ne180100]<0>(&__str, "/");
  memset(v26, 170, sizeof(v26));
  if (a1) {
    std::string::basic_string[abi:ne180100](&__dst, a1, a2);
  }
  else {
    memset(&__dst, 0, 24);
  }
  ctu::tokenize((std::string *)&__dst, 47, 0, v26);
  if (SHIBYTE(__dst.st_gid) < 0) {
    operator delete(*(void **)&__dst.st_dev);
  }
  memset(&v25, 0, sizeof(v25));
  if (*a1 == 47) {
    std::string::operator=(&v25, &__str);
  }
  uint64_t v10 = v26[0];
  if (v26[1] == v26[0])
  {
LABEL_42:
    uint64_t v9 = 1;
  }
  else
  {
    uint64_t v11 = 0;
    unsigned int v12 = 1;
    while (1)
    {
      if (v12 != 1)
      {
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_str = &__str;
        }
        else {
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __str.__r_.__value_.__l.__size_;
        }
        std::string::append(&v25, (const std::string::value_type *)p_str, size);
        uint64_t v10 = v26[0];
      }
      uint64_t v15 = v10 + 24 * v11;
      int v16 = *(char *)(v15 + 23);
      uint64_t v17 = v16 >= 0 ? (const std::string::value_type *)v15 : *(const std::string::value_type **)v15;
      std::string::size_type v18 = v16 >= 0 ? *(unsigned __int8 *)(v15 + 23) : *(void *)(v15 + 8);
      std::string::append(&v25, v17, v18);
      char v19 = (v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v25
          : (std::string *)v25.__r_.__value_.__r.__words[0];
      v20.tv_sec = 0xAAAAAAAAAAAAAAAALL;
      v20.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
      *(timespec *)&__dst.st_blkstd::string::size_type size = v20;
      *(timespec *)__dst.st_qspare = v20;
      __dst.st_birthtimespec = v20;
      *(timespec *)&__dst.st_std::string::size_type size = v20;
      __dst.st_ctimespec = v20;
      __dst.st_atimespec = v20;
      __dst.st_mtimespec = v20;
      *(timespec *)&__dst.st_dev = v20;
      *(timespec *)&__dst.st_uid = v20;
      if (stat((const char *)v19, &__dst) || (__dst.st_mode & 0xF000) != 0x4000)
      {
        unint64_t v21 = (v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v25
            : (std::string *)v25.__r_.__value_.__r.__words[0];
        uint64_t v22 = (v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? HIBYTE(v25.__r_.__value_.__r.__words[2])
            : v25.__r_.__value_.__l.__size_;
        if (!ctu::fs::_create_directory((const char *)v21, v22, a3)) {
          break;
        }
      }
      uint64_t v11 = v12;
      uint64_t v10 = v26[0];
      if (0xAAAAAAAAAAAAAAABLL * ((v26[1] - v26[0]) >> 3) <= v12++) {
        goto LABEL_42;
      }
    }
    uint64_t v9 = 0;
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  *(void *)&__dst.st_dev = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__dst);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return v9;
}

void sub_19207427C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::string __p = &a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(a1);
}

BOOL ctu::fs::_create_directory(const char *a1, uint64_t a2, mode_t a3)
{
  int v3 = mkdir(a1, a3);
  if (v3)
  {
    __error();
    __error();
    stat v4 = __error();
    strerror(*v4);
    _TelephonyUtilDebugPrint((uint64_t)"_create_directory", (uint64_t)"%s: Failed to make the directory: %s with mode: 0x%x, error: %d(0x%x) (%s)", v5, v6, v7, v8, v9, v10, (uint64_t)"_create_directory");
  }
  return v3 == 0;
}

BOOL ctu::fs::iterate_folder(const char *a1, uint64_t a2, uint64_t a3)
{
  stat v4 = opendir(a1);
  uint64_t v5 = v4;
  if (!v4)
  {
    uint64_t v8 = "%s: Failed to open the directory: %s, error: %d(0x%x) (%s)";
    goto LABEL_8;
  }
  uint64_t v6 = readdir(v4);
  if (v6)
  {
    uint64_t v7 = v6;
    do
    {
      (*(void (**)(uint64_t, dirent *))(a3 + 16))(a3, v7);
      uint64_t v7 = readdir(v5);
    }
    while (v7);
  }
  if (closedir(v5))
  {
    uint64_t v8 = "%s: Failed to close the directory: %s, error: %d(0x%x) (%s)";
LABEL_8:
    __error();
    __error();
    uint64_t v9 = __error();
    strerror(*v9);
    _TelephonyUtilDebugPrint((uint64_t)"iterate_folder", (uint64_t)v8, v10, v11, v12, v13, v14, v15, (uint64_t)"iterate_folder");
  }
  return v5 != 0;
}

BOOL ctu::fs::read_folder(const char *a1, uint64_t a2, uint64_t a3, char a4)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  void v5[2] = ___ZN3ctu2fs11read_folderENS_4llvm9StringRefERNSt3__16vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEb_block_invoke;
  v5[3] = &__block_descriptor_tmp_6;
  char v6 = a4;
  v5[4] = a3;
  return ctu::fs::iterate_folder(a1, a2, (uint64_t)v5);
}

void ___ZN3ctu2fs11read_folderENS_4llvm9StringRefERNSt3__16vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEb_block_invoke(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 20) != 4 || *(unsigned char *)(a1 + 40))
  {
    uint64_t v2 = *(void *)(a1 + 32);
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)(a2 + 21));
    unint64_t v3 = *(void *)(v2 + 8);
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3 >= v4)
    {
      unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - *(void *)v2) >> 3);
      unint64_t v7 = v6 + 1;
      if (v6 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - *(void *)v2) >> 3);
      if (2 * v8 > v7) {
        unint64_t v7 = 2 * v8;
      }
      if (v8 >= 0x555555555555555) {
        unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v9 = v7;
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)(v2 + 16);
      if (v9) {
        uint64_t v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v2 + 16, v9);
      }
      else {
        uint64_t v10 = 0;
      }
      uint64_t v11 = v10 + v6;
      __v.__first_ = v10;
      __v.__begin_ = v11;
      __v.__end_cap_.__value_ = &v10[v9];
      long long v12 = *(_OWORD *)__p;
      v11->__r_.__value_.__r.__words[2] = v16;
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
      __p[1] = 0;
      std::string::size_type v16 = 0;
      __p[0] = 0;
      __v.__end_ = v11 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)v2, &__v);
      uint64_t v13 = *(void *)(v2 + 8);
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      int v14 = SHIBYTE(v16);
      *(void *)(v2 + 8) = v13;
      if (v14 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v5 = *(_OWORD *)__p;
      *(void *)(v3 + 16) = v16;
      *(_OWORD *)unint64_t v3 = v5;
      *(void *)(v2 + 8) = v3 + 24;
    }
  }
}

void sub_192074608(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, std::__split_buffer<std::string> *a7, uint64_t a8, void *__pa, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__pa);
  }
  _Unwind_Resume(__p);
}

uint64_t ctu::fs::memory_mapped_file::memory_mapped_file(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = a4;
  *(void *)(a1 + 28) = 0xFFFFFFFFLL;
  *(void *)(a1 + 40) = 0;
  ctu::fs::memory_mapped_file::load((ctu::fs::memory_mapped_file *)a1);
  return a1;
}

{
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = a4;
  *(void *)(a1 + 28) = 0xFFFFFFFFLL;
  *(void *)(a1 + 40) = 0;
  ctu::fs::memory_mapped_file::load((ctu::fs::memory_mapped_file *)a1);
  return a1;
}

uint64_t ctu::fs::memory_mapped_file::load(ctu::fs::memory_mapped_file *this)
{
  int v2 = *((_DWORD *)this + 6);
  if (v2 == 3) {
    int v3 = open(*((const char **)this + 1), 2);
  }
  else {
    int v3 = open(*((const char **)this + 1), v2 == 2);
  }
  if (v3 < 0)
  {
    __error();
    __error();
    uint64_t v22 = __error();
    strerror(*v22);
    return _TelephonyUtilDebugPrint((uint64_t)"load", (uint64_t)"%s: Failed to open the file: %s, error: %d(0x%x) (%s)", v23, v24, v25, v26, v27, v28, (uint64_t)"load");
  }
  else
  {
    int v4 = v3;
    off_t v5 = lseek(v3, 0, 2);
    if (v5 >= 1)
    {
      *((_DWORD *)this + 8) = v5;
      if (!lseek(v4, 0, 0))
      {
        *__error() = 0;
        uint64_t result = (uint64_t)mmap(0, *((unsigned int *)this + 8), *((_DWORD *)this + 6) & 3, 2, v4, 0);
        *((void *)this + 5) = result;
        if (result != 0xFFFFFFFFLL && result != 0)
        {
          *((_DWORD *)this + 7) = v4;
          return result;
        }
        unint64_t v8 = __error();
        strerror(*v8);
        _TelephonyUtilDebugPrint((uint64_t)"load", (uint64_t)"%s: Failed to map, error: %d(0x%x) (%s)", v9, v10, v11, v12, v13, v14, (uint64_t)"load");
      }
    }
    uint64_t result = close(v4);
    if (result)
    {
      __error();
      __error();
      uint64_t v15 = __error();
      strerror(*v15);
      return _TelephonyUtilDebugPrint((uint64_t)"load", (uint64_t)"%s: Failed to close the file: %s, error: %d(0x%x) (%s)", v16, v17, v18, v19, v20, v21, (uint64_t)"load");
    }
  }
  return result;
}

void ctu::fs::memory_mapped_file::~memory_mapped_file(ctu::fs::memory_mapped_file *this)
{
}

{
  ctu::fs::memory_mapped_file::unload(this);
}

uint64_t ctu::fs::memory_mapped_file::unload(ctu::fs::memory_mapped_file *this)
{
  int v2 = (void *)*((void *)this + 5);
  if (v2) {
    BOOL v3 = v2 == (void *)0xFFFFFFFFLL;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3 && munmap(v2, *((unsigned int *)this + 8)))
  {
    int v4 = __error();
    strerror(*v4);
    _TelephonyUtilDebugPrint((uint64_t)"unload", (uint64_t)"%s: Failed to unmap, error: %d(0x%x) (%s)", v5, v6, v7, v8, v9, v10, (uint64_t)"unload");
  }
  uint64_t result = *((unsigned int *)this + 7);
  if ((result & 0x80000000) == 0)
  {
    uint64_t result = close(result);
    if (result)
    {
      __error();
      __error();
      uint64_t v12 = __error();
      strerror(*v12);
      uint64_t result = _TelephonyUtilDebugPrint((uint64_t)"unload", (uint64_t)"%s: Failed to close a file: %s, error: %d(0x%x) (%s)", v13, v14, v15, v16, v17, v18, (uint64_t)"unload");
    }
    *((_DWORD *)this + 7) = -1;
  }
  return result;
}

uint64_t ctu::fs::memory_mapped_file::getIOFlags(ctu::fs::memory_mapped_file *this)
{
  int v1 = *((_DWORD *)this + 6);
  if (v1 == 3) {
    return 2;
  }
  else {
    return v1 == 2;
  }
}

uint64_t ctu::fs::memory_mapped_file::getProtectionFlags(ctu::fs::memory_mapped_file *this)
{
  return *((_DWORD *)this + 6) & 3;
}

uint64_t ctu::fs::write_to_completion(ctu::fs *this, char *__buf, size_t __nbyte)
{
  if (!__nbyte) {
    return 1;
  }
  size_t v3 = __nbyte;
  int v5 = (int)this;
  while (1)
  {
    ssize_t v6 = write(v5, __buf, v3);
    if (v6 < 0) {
      break;
    }
    __buf += v6;
    v3 -= v6;
    if (!v3) {
      return 1;
    }
  }
  __error();
  __error();
  uint64_t v8 = __error();
  strerror(*v8);
  _TelephonyUtilDebugPrint((uint64_t)"write_to_completion", (uint64_t)"%s: Failed to write, error: %d(0x%x) (%s)", v9, v10, v11, v12, v13, v14, (uint64_t)"write_to_completion");
  return 0;
}

uint64_t ctu::fs::open_file(const char *a1, uint64_t a2, int a3, unsigned int a4)
{
  uint64_t v4 = open(a1, a3, a4);
  if ((v4 & 0x80000000) != 0)
  {
    __error();
    __error();
    int v5 = __error();
    strerror(*v5);
    _TelephonyUtilDebugPrint((uint64_t)"open_file", (uint64_t)"%s: Failed to open the file: %s, error: %d(0x%x) (%s)", v6, v7, v8, v9, v10, v11, (uint64_t)"open_file");
  }
  return v4;
}

BOOL ctu::fs::close_file(ctu::fs *this)
{
  int v1 = (int)this;
  do
  {
    int v2 = close(v1);
    if (!v2) {
      break;
    }
    __error();
    __error();
    size_t v3 = __error();
    strerror(*v3);
    _TelephonyUtilDebugPrint((uint64_t)"close_file", (uint64_t)"%s: Failed to close a file, error: %d(0x%x) (%s)", v4, v5, v6, v7, v8, v9, (uint64_t)"close_file");
  }
  while (*__error() == 4);
  return v2 == 0;
}

BOOL ctu::fs::copy_file(const char *a1, uint64_t a2, const char *a3, uint64_t a4, int a5)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  size_t v8 = strlen(a1);
  uint64_t v9 = ctu::fs::open_file(a1, v8, 0, 0x1A4u);
  if ((v9 & 0x80000000) != 0) {
    return 0;
  }
  uint64_t v10 = (ctu::fs *)v9;
  size_t v11 = strlen(a3);
  uint64_t v12 = ctu::fs::open_file(a3, v11, 514, 0x1A4u);
  if ((v12 & 0x80000000) != 0)
  {
    int v16 = 0;
  }
  else
  {
    uint64_t v13 = (ctu::fs *)v12;
    while (1)
    {
      memset(__b, 170, sizeof(__b));
      ssize_t v14 = read((int)v10, __b, 0x400uLL);
      if (v14 < 0)
      {
        __error();
        __error();
        uint64_t v17 = __error();
        strerror(*v17);
        _TelephonyUtilDebugPrint((uint64_t)"copy_file", (uint64_t)"%s: Failed to read the file: %s, error: %d(0x%x) (%s)", v18, v19, v20, v21, v22, v23, (uint64_t)"copy_file");
LABEL_16:
        int v16 = 0;
        goto LABEL_17;
      }
      if (!v14) {
        break;
      }
      if ((ctu::fs::write_to_completion(v13, __b, v14) & 1) == 0) {
        goto LABEL_16;
      }
    }
    if (a5)
    {
      *(void *)&long long v24 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v24 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)&__b[112] = v24;
      *(_OWORD *)&__b[128] = v24;
      *(_OWORD *)&__b[80] = v24;
      *(_OWORD *)&__b[96] = v24;
      *(_OWORD *)&__b[48] = v24;
      *(_OWORD *)&__b[64] = v24;
      *(_OWORD *)&__b[16] = v24;
      *(_OWORD *)&__b[32] = v24;
      *(_OWORD *)__b = v24;
      if (fstat((int)v10, (stat *)__b))
      {
        __error();
        __error();
        uint64_t v25 = __error();
        strerror(*v25);
        _TelephonyUtilDebugPrint((uint64_t)"copy_file", (uint64_t)"%s: Failed to get stats the source file: %s, error: %d(0x%x) (%s)", v26, v27, v28, v29, v30, v31, (uint64_t)"copy_file");
        goto LABEL_16;
      }
      if (fchmod((int)v13, *(mode_t *)&__b[4]))
      {
        __error();
        __error();
        int v32 = __error();
        strerror(*v32);
        _TelephonyUtilDebugPrint((uint64_t)"copy_file", (uint64_t)"%s: Failed to change mode the destination file: %s, error: %d(0x%x) (%s)", v33, v34, v35, v36, v37, v38, (uint64_t)"copy_file");
        goto LABEL_16;
      }
    }
    int v16 = 1;
LABEL_17:
    ctu::fs::close_file(v13);
  }
  ctu::fs::close_file(v10);
  return v16 != 0;
}

BOOL ctu::fs::load_file(void *a1, size_t a2, unint64_t *a3)
{
  __b[72] = *MEMORY[0x1E4F143B8];
  memset(__b, 170, 0x240uLL);
  if (a1)
  {
    std::string::basic_string[abi:ne180100](__p, a1, a2);
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v32 = 0;
  }
  uint64_t v6 = MEMORY[0x1E4FBA460] + 64;
  __b[53] = MEMORY[0x1E4FBA460] + 64;
  uint64_t v7 = (void *)MEMORY[0x1E4FBA3F8];
  uint64_t v8 = *(void *)(MEMORY[0x1E4FBA3F8] + 16);
  __b[0] = *(void *)(MEMORY[0x1E4FBA3F8] + 8);
  *(void *)((char *)__b + *(void *)(__b[0] - 24)) = v8;
  __b[1] = 0;
  uint64_t v9 = (std::ios_base *)((char *)__b + *(void *)(__b[0] - 24));
  std::ios_base::init(v9, &__b[2]);
  uint64_t v10 = MEMORY[0x1E4FBA460] + 24;
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  __b[0] = v10;
  __b[53] = v6;
  MEMORY[0x192FED070](&__b[2]);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)__b + *(void *)(__b[0] - 24)), *(_DWORD *)((char *)&__b[4] + *(void *)(__b[0] - 24)) | 4);
  }
  if (SHIBYTE(v32) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = 0;
  if (__b[17]
    && ((file_size = ctu::fs::get_file_size((uint64_t)__b, __p), (uint64_t v12 = (char *)__p[0]) != 0)
      ? (BOOL v13 = file_size)
      : (BOOL v13 = 0),
        v13 && !*(_DWORD *)((char *)&__b[4] + *(void *)(__b[0] - 24))))
  {
    unint64_t v17 = *a3;
    unint64_t v16 = a3[1];
    uint64_t v18 = (char *)(v16 - *a3);
    uint64_t v19 = (char *)((char *)__p[0] - (char *)v18);
    if (__p[0] <= v18)
    {
      if (__p[0] < v18) {
        a3[1] = (unint64_t)__p[0] + v17;
      }
    }
    else
    {
      unint64_t v20 = a3[2];
      if (v20 - v16 >= (unint64_t)v19)
      {
        bzero((void *)a3[1], (char *)__p[0] - (char *)v18);
        a3[1] = (unint64_t)&v19[v16];
      }
      else
      {
        if (((unint64_t)__p[0] & 0x8000000000000000) != 0) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v21 = v20 - v17;
        uint64_t v22 = (void *)(2 * v21);
        if ((void *)(2 * v21) <= __p[0]) {
          uint64_t v22 = __p[0];
        }
        if (v21 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v23 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v23 = (size_t)v22;
        }
        size_t v29 = v23;
        unint64_t v24 = (unint64_t)operator new(v23);
        uint64_t v28 = (char *)(v24 + v29);
        uint64_t v30 = &v12[v24];
        uint64_t v25 = &v18[v24];
        bzero(v25, (size_t)v19);
        if (v16 == v17)
        {
          unint64_t v24 = (unint64_t)v25;
        }
        else
        {
          uint64_t v26 = (char *)(~v17 + v16);
          do
          {
            char v27 = *(unsigned char *)--v16;
            (v26--)[v24] = v27;
          }
          while (v16 != v17);
          unint64_t v16 = v17;
        }
        *a3 = v24;
        a3[1] = (unint64_t)v30;
        a3[2] = (unint64_t)v28;
        if (v16) {
          operator delete((void *)v16);
        }
      }
    }
    std::istream::read();
    BOOL v14 = __b[1] == (int)v12;
    if (!std::filebuf::close()) {
      std::ios_base::clear((std::ios_base *)((char *)__b + *(void *)(__b[0] - 24)), *(_DWORD *)((char *)&__b[4] + *(void *)(__b[0] - 24)) | 4);
    }
  }
  else
  {
    BOOL v14 = 0;
  }
  __b[0] = *v7;
  *(void *)((char *)__b + *(void *)(__b[0] - 24)) = v7[3];
  MEMORY[0x192FED080](&__b[2]);
  std::istream::~istream();
  MEMORY[0x192FED350](&__b[53]);
  return v14;
}

void sub_1920751CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
}

BOOL ctu::fs::get_file_size(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 136);
  if (v2)
  {
    std::istream::tellg();
    std::istream::seekg();
    std::istream::tellg();
    *a2 = v5;
    std::istream::seekg();
  }
  return v2 != 0;
}

void *std::ifstream::~ifstream(void *a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA3F8];
  uint64_t v3 = *MEMORY[0x1E4FBA3F8];
  *a1 = *MEMORY[0x1E4FBA3F8];
  *(void *)((char *)a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  MEMORY[0x192FED080](a1 + 2);
  std::istream::~istream();
  MEMORY[0x192FED350](a1 + 53);
  return a1;
}

BOOL ctu::fs::get_file_size(uint64_t a1, uint64_t a2, void *a3)
{
  v11[72] = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 0;
  }
  memset(&v11[1], 170, 0x238uLL);
  uint64_t v4 = MEMORY[0x1E4FBA460] + 64;
  v11[53] = MEMORY[0x1E4FBA460] + 64;
  uint64_t v5 = (void *)MEMORY[0x1E4FBA3F8];
  uint64_t v6 = *(void *)(MEMORY[0x1E4FBA3F8] + 16);
  v11[0] = *(void *)(MEMORY[0x1E4FBA3F8] + 8);
  *(void *)((char *)v11 + *(void *)(v11[0] - 24)) = v6;
  v11[1] = 0;
  uint64_t v7 = (std::ios_base *)((char *)v11 + *(void *)(v11[0] - 24));
  std::ios_base::init(v7, &v11[2]);
  uint64_t v8 = MEMORY[0x1E4FBA460] + 24;
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  v11[0] = v8;
  v11[53] = v4;
  MEMORY[0x192FED070](&v11[2]);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)v11 + *(void *)(v11[0] - 24)), *(_DWORD *)((char *)&v11[4] + *(void *)(v11[0] - 24)) | 4);
  }
  if (v11[17])
  {
    file_std::string::size_type size = ctu::fs::get_file_size((uint64_t)v11, a3);
    if (!std::filebuf::close()) {
      std::ios_base::clear((std::ios_base *)((char *)v11 + *(void *)(v11[0] - 24)), *(_DWORD *)((char *)&v11[4] + *(void *)(v11[0] - 24)) | 4);
    }
  }
  else
  {
    file_std::string::size_type size = 0;
  }
  v11[0] = *v5;
  *(void *)((char *)v11 + *(void *)(v11[0] - 24)) = v5[3];
  MEMORY[0x192FED080](&v11[2]);
  std::istream::~istream();
  MEMORY[0x192FED350](&v11[53]);
  return file_size;
}

void sub_192075688(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x192FED350](v1);
  _Unwind_Resume(a1);
}

void ctu::fs::get_base_name(void *a1@<X0>, size_t a2@<X1>, std::string *a3@<X8>)
{
  memset(v6, 170, sizeof(v6));
  if (a1) {
    std::string::basic_string[abi:ne180100](&__p, a1, a2);
  }
  else {
    memset(&__p, 0, sizeof(__p));
  }
  ctu::tokenize(&__p, 47, 0, v6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*(char *)(v6[1] - 1) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)(v6[1] - 24), *(void *)(v6[1] - 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(v6[1] - 24);
    a3->__r_.__value_.__r.__words[2] = *(void *)(v6[1] - 8);
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v4;
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_192075784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::string __p = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void ctu::fs::get_unique_filename(void *a1@<X0>, size_t a2@<X1>, void *a3@<X8>)
{
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v79[16] = v6;
  *(_OWORD *)&v79[32] = v6;
  long long v78 = v6;
  *(_OWORD *)v79 = v6;
  std::regex_traits<char>::regex_traits((std::regex_traits<char> *)&v78);
  memset(&v79[8], 0, 40);
  if (std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>((uint64_t)&v78, "^([/_\\-[:alnum:]]*)(.*)", "") != "")std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>(); {
  memset(v77, 170, sizeof(v77));
  }
  ctu::fs::get_dir_name(a1, a2, (uint64_t)v77);
  memset(&v76, 170, sizeof(v76));
  ctu::fs::get_base_name(a1, a2, &v76);
  memset(&v75, 170, sizeof(v75));
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v75, v76.__r_.__value_.__l.__data_, v76.__r_.__value_.__l.__size_);
  }
  else {
    std::string v75 = v76;
  }
  v68 = a3;
  unsigned int i = 0;
  while (1)
  {
    int v8 = SHIBYTE(v77[2]);
    if (SHIBYTE(v77[2]) >= 0) {
      size_t v9 = HIBYTE(v77[2]);
    }
    else {
      size_t v9 = (size_t)v77[1];
    }
    memset(v82, 170, 24);
    std::string::basic_string[abi:ne180100]((uint64_t)v82, v9 + 1);
    if ((v82[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v10 = v82;
    }
    else {
      uint64_t v10 = (std::string *)v82[0].__r_.__value_.__r.__words[0];
    }
    if (v9)
    {
      if (v8 >= 0) {
        size_t v11 = v77;
      }
      else {
        size_t v11 = (void **)v77[0];
      }
      memmove(v10, v11, v9);
    }
    *(_WORD *)((char *)&v10->__r_.__value_.__l.__data_ + v9) = 47;
    if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v12 = &v75;
    }
    else {
      uint64_t v12 = (std::string *)v75.__r_.__value_.__r.__words[0];
    }
    if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v75.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v75.__r_.__value_.__l.__size_;
    }
    BOOL v14 = std::string::append(v82, (const std::string::value_type *)v12, size);
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    __p.__pregex_ = (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__begin_.__i_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__pregex_) >= 0) {
      p_p = (const char *)&__p;
    }
    else {
      p_p = __p.__begin_.__i_;
    }
    v17.__darwin_time_t tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v17.uint64_t tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    *(timespec *)&v81.st_blkstd::string::size_type size = v17;
    *(timespec *)v81.st_qspare = v17;
    v81.st_birthtimespec = v17;
    *(timespec *)&v81.st_std::string::size_type size = v17;
    v81.st_mtimespec = v17;
    v81.st_ctimespec = v17;
    *(timespec *)&v81.st_uid = v17;
    v81.st_atimespec = v17;
    *(timespec *)&v81.st_dev = v17;
    int v18 = stat(p_p, &v81);
    if (SHIBYTE(__p.__pregex_) < 0) {
      operator delete((void *)__p.__begin_.__i_);
    }
    if (SHIBYTE(v82[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v82[0].__r_.__value_.__l.__data_);
    }
    if (v18)
    {
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)v77, (const void **)&v75.__r_.__value_.__l.__data_, v68);
      goto LABEL_128;
    }
    std::string::size_type v19 = HIBYTE(v75.__r_.__value_.__r.__words[2]);
    if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v20 = (std::sub_match<const char *> *)&v75;
    }
    else {
      unint64_t v20 = (std::sub_match<const char *> *)v75.__r_.__value_.__r.__words[0];
    }
    if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v19 = v75.__r_.__value_.__l.__size_;
    }
    *(void *)&long long v21 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v21 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v81.st_birthtimespec.uint64_t tv_nsec = v21;
    v81.st_ctimespec.__darwin_time_t tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v81.st_atimespec.uint64_t tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    memset(&v81.st_mtimespec, 0, 17);
    memset(&v81.st_ctimespec.tv_nsec, 0, 17);
    LOBYTE(v81.st_size) = 0;
    v81.st_blocks = 0;
    memset(&v81, 0, 41);
    int v22 = std::regex_match[abi:ne180100]<std::__wrap_iter<char const*>,std::allocator<std::sub_match<std::__wrap_iter<char const*>>>,char,std::regex_traits<char>>(v20, (std::sub_match<const char *> *)((char *)v20 + v19), (uint64_t)&v81, (uint64_t)&v78);
    if (*(void *)&v81.st_dev) {
      operator delete(*(void **)&v81.st_dev);
    }
    if (!v22) {
      break;
    }
    ++i;
    memset(v74, 170, 24);
    std::to_string((std::string *)&__p, i);
    size_t v23 = std::string::insert((std::string *)&__p, 0, "$1-", 3uLL);
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    *(void *)&v81.st_uid = *((void *)&v23->__r_.__value_.__l + 2);
    *(_OWORD *)&v81.st_dev = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    uint64_t v25 = std::string::append((std::string *)&v81, "$2", 2uLL);
    long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v74[2] = (void *)v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)v74 = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v81.st_gid) < 0) {
      operator delete(*(void **)&v81.st_dev);
    }
    if (SHIBYTE(__p.__pregex_) < 0) {
      operator delete((void *)__p.__begin_.__i_);
    }
    memset(&v73, 0, sizeof(v73));
    if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v27 = &v76;
    }
    else {
      char v27 = (std::string *)v76.__r_.__value_.__r.__words[0];
    }
    if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v28 = HIBYTE(v76.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v28 = v76.__r_.__value_.__l.__size_;
    }
    size_t v29 = v74;
    if (SHIBYTE(v74[2]) < 0) {
      size_t v29 = (void **)v74[0];
    }
    __s = (char *)v29;
    *(void *)&long long v30 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v30 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v81.st_gen = v30;
    v81.st_std::string::size_type size = 0xAAAAAAAAAAAAAAAALL;
    v81.st_ctimespec.uint64_t tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    *(&v81.st_rdev + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = -1431655766;
    *(void *)&v81.st_dev = v27;
    v81.st_ino = (__darwin_ino64_t)v27 + v28;
    *(void *)&v81.st_uid = &v78;
    v81.dev_t st_rdev = 0;
    memset(&v81.st_birthtimespec, 0, 17);
    memset(&v81.st_blocks, 0, 17);
    LOBYTE(v81.st_qspare[0]) = 0;
    v81.st_qspare[1] = 0;
    memset(&v81.st_atimespec, 0, 41);
    *(_OWORD *)&__p.__match_.__prefix_.second.__i_ = v30;
    __p.__match_.__unmatched_.second.__i_ = (std::__wrap_iter<const char *>::iterator_type)0xAAAAAAAAAAAAAAAALL;
    __p.__match_.__matches_.__end_ = (std::vector<std::ssub_match>::pointer)0xAAAAAAAAAAAAAAAALL;
    memset(&__p.__match_.__matches_.__end_cap_, 0, 17);
    memset(&__p.__match_.__unmatched_.matched, 0, 17);
    __p.__match_.__prefix_.matched = 0;
    __p.__match_.__suffix_.first.__i_ = 0;
    memset(&__p, 0, 41);
    std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)&v78, (std::sub_match<const char *> *)v27, (std::sub_match<const char *> *)((char *)v27 + v28), (std::vector<std::csub_match> *)&__p, 0);
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((uint64_t)&v81.st_atimespec, (uint64_t)v27, (uint64_t)v27 + v28, (uint64_t *)&__p, 0);
    if (__p.__begin_.__i_) {
      operator delete((void *)__p.__begin_.__i_);
    }
    *(void *)&long long v31 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v31 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&__p.__match_.__suffix_.matched = v31;
    *(void *)&__p.__match_.__prefix_.matched = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&__p.__match_.__unmatched_.matched = 0xAAAAAAAAAAAAAAAALL;
    *((_DWORD *)&__p.__flags_ + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = -1431655766;
    memset(&__p.__match_.__prefix_, 0, 17);
    memset(&__p.__match_.__suffix_, 0, 17);
    __p.__match_.__ready_ = 0;
    __p.__match_.__position_start_.__i_ = 0;
    memset(&__p.__match_, 0, 41);
    memset(&__p, 0, 28);
    if (std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==((const std::regex_iterator<std::__wrap_iter<const char *>, char> *)&v81, &__p))
    {
      for (; v28; --v28)
      {
        std::string::push_back(&v73, v27->__r_.__value_.__s.__data_[0]);
        char v27 = (std::string *)((char *)v27 + 1);
      }
      goto LABEL_120;
    }
    unsigned int v69 = i;
    uint64_t v32 = 0;
    st_blocks = 0;
    size_t v71 = strlen(__s);
    uint64_t v34 = (unsigned __int8 *)&__s[v71];
    while (!std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==((const std::regex_iterator<std::__wrap_iter<const char *>, char> *)&v81, &__p))
    {
      __darwin_time_t tv_sec = v81.st_birthtimespec.tv_sec;
      uint64_t tv_nsec = v81.st_birthtimespec.tv_nsec;
      if (v81.st_birthtimespec.tv_sec != v81.st_birthtimespec.tv_nsec)
      {
        uint64_t v37 = (std::string::value_type *)v81.st_birthtimespec.tv_sec;
        do
          std::string::push_back(&v73, *v37++);
        while (v37 != (std::string::value_type *)tv_nsec);
      }
      uint64_t v38 = (std::string::value_type **)v81.st_atimespec.tv_sec;
      if (v71)
      {
        uint64_t v32 = *(std::string::value_type **)&v81.st_blksize;
        st_blocks = (std::string::value_type *)v81.st_blocks;
        uint64_t v39 = v81.st_atimespec.tv_nsec;
        unint64_t v72 = 0xAAAAAAAAAAAAAAABLL * ((v81.st_atimespec.tv_nsec - v81.st_atimespec.tv_sec) >> 3);
        uint64_t v40 = (unsigned __int8 *)__s;
        while (1)
        {
          int v41 = *v40;
          if (v41 == 36)
          {
            unint64_t v42 = v40 + 1;
            if (v40 + 1 != v34)
            {
              int v43 = (char)*v42;
              int v41 = *v42;
              if (v43 > 38)
              {
                if (v43 == 39)
                {
                  if (st_blocks != v32)
                  {
                    long long v57 = st_blocks;
                    do
                      std::string::push_back(&v73, *v57++);
                    while (v57 != v32);
                  }
                  goto LABEL_94;
                }
                if (v43 == 96)
                {
                  if (tv_sec != tv_nsec)
                  {
                    uint64_t v46 = (std::string::value_type *)tv_sec;
                    do
                      std::string::push_back(&v73, *v46++);
                    while (v46 != (std::string::value_type *)tv_nsec);
                  }
                  goto LABEL_94;
                }
              }
              else
              {
                if (v43 == 36)
                {
                  ++v40;
                  goto LABEL_93;
                }
                if (v43 == 38)
                {
                  xpc_object_t v45 = *v38;
                  long long v44 = v38[1];
                  while (v45 != v44)
                    std::string::push_back(&v73, *v45++);
                  goto LABEL_94;
                }
              }
              if ((v41 - 48) <= 9)
              {
                unint64_t v47 = *v42 - 48;
                if (v40 + 2 != v34)
                {
                  uint64_t v48 = v40[2];
                  unsigned int v49 = v48 - 48;
                  uint64_t v50 = v48 + 10 * (int)v47 - 48;
                  if (v49 > 9)
                  {
                    unint64_t v42 = v40 + 1;
                  }
                  else
                  {
                    unint64_t v47 = v50;
                    unint64_t v42 = v40 + 2;
                  }
                }
                long long v51 = &v38[3 * (int)v47];
                BOOL v52 = v72 > v47;
                p_uint64_t tv_nsec = &v81.st_mtimespec.tv_nsec;
                if (v52) {
                  p_uint64_t tv_nsec = (uint64_t *)v51;
                }
                long long v54 = (std::string::value_type *)*p_tv_nsec;
                p_st_ctimespec = (timespec *)(v51 + 1);
                if (!v52) {
                  p_st_ctimespec = &v81.st_ctimespec;
                }
                long long v56 = (std::string::value_type *)p_st_ctimespec->tv_sec;
                while (v54 != v56)
                  std::string::push_back(&v73, *v54++);
                goto LABEL_94;
              }
            }
            LOBYTE(v4ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 36;
          }
LABEL_93:
          std::string::push_back(&v73, v41);
          unint64_t v42 = v40;
LABEL_94:
          uint64_t v40 = v42 + 1;
          if (v42 + 1 == v34) {
            goto LABEL_101;
          }
        }
      }
      uint64_t v32 = *(std::string::value_type **)&v81.st_blksize;
      st_blocks = (std::string::value_type *)v81.st_blocks;
      uint64_t v39 = v81.st_atimespec.tv_nsec;
LABEL_101:
      dev_t st_rdev = v81.st_rdev;
      int v59 = v81.st_rdev | 0x800;
      v81.st_rdev |= 0x800u;
      v60 = &v81.st_mtimespec.tv_nsec;
      if ((std::string::value_type **)v39 != v38) {
        v60 = (uint64_t *)v38;
      }
      v61 = (timespec *)(v38 + 1);
      if ((std::string::value_type **)v39 == v38) {
        v61 = &v81.st_ctimespec;
      }
      v62 = (std::sub_match<const char *> *)v61->tv_sec;
      st_ino = (std::sub_match<const char *> *)v81.st_ino;
      if (*v60 != v61->tv_sec) {
        goto LABEL_106;
      }
      if ((std::sub_match<const char *> *)v81.st_ino == v62)
      {
LABEL_115:
        if (v38) {
          operator delete(v38);
        }
        LOBYTE(v81.st_qspare[0]) = 0;
        memset(&v81.st_atimespec, 0, 41);
        memset(&v81.st_birthtimespec, 0, 17);
        memset(&v81.st_blocks, 0, 17);
        v81.st_qspare[1] = 0;
      }
      else
      {
        *(void *)&long long v66 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v66 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v88 = v66;
        unint64_t v85 = 0xAAAAAAAAAAAAAA00;
        v82[1].__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAAAALL;
        uint64_t v83 = 0;
        uint64_t v84 = 0;
        uint64_t v86 = 0;
        uint64_t v87 = 0;
        LOBYTE(v88) = 0;
        BYTE8(v88) = 0;
        uint64_t v89 = 0;
        memset(v82, 0, 41);
        char v67 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(*(uint64_t *)&v81.st_uid, v62, (std::sub_match<const char *> *)v81.st_ino, (std::vector<std::csub_match> *)v82, st_rdev | 0x860u);
        std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((uint64_t)&v81.st_atimespec, (uint64_t)v62, (uint64_t)st_ino, (uint64_t *)v82, 1);
        if (v82[0].__r_.__value_.__r.__words[0]) {
          operator delete(v82[0].__r_.__value_.__l.__data_);
        }
        if ((v67 & 1) == 0)
        {
          v62 = (std::sub_match<const char *> *)((char *)v62 + 1);
          int v59 = v81.st_rdev;
          st_ino = (std::sub_match<const char *> *)v81.st_ino;
LABEL_106:
          v81.dev_t st_rdev = v59 | 0x80;
          *(void *)&long long v64 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v64 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
          long long v88 = v64;
          unint64_t v85 = 0xAAAAAAAAAAAAAA00;
          v82[1].__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAAAALL;
          uint64_t v83 = 0;
          uint64_t v84 = 0;
          uint64_t v86 = 0;
          uint64_t v87 = 0;
          LOBYTE(v88) = 0;
          BYTE8(v88) = 0;
          uint64_t v89 = 0;
          memset(v82, 0, 41);
          char v65 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(*(uint64_t *)&v81.st_uid, v62, st_ino, (std::vector<std::csub_match> *)v82, v59 | 0x80u);
          std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((uint64_t)&v81.st_atimespec, (uint64_t)v62, (uint64_t)st_ino, (uint64_t *)v82, (v59 & 0x800) != 0);
          if (v82[0].__r_.__value_.__r.__words[0]) {
            operator delete(v82[0].__r_.__value_.__l.__data_);
          }
          if ((v65 & 1) == 0)
          {
            uint64_t v38 = (std::string::value_type **)v81.st_atimespec.tv_sec;
            goto LABEL_115;
          }
        }
      }
    }
    for (unsigned int i = v69; st_blocks != v32; ++st_blocks)
      std::string::push_back(&v73, *st_blocks);
LABEL_120:
    if (v81.st_atimespec.tv_sec) {
      operator delete((void *)v81.st_atimespec.tv_sec);
    }
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v75.__r_.__value_.__l.__data_);
    }
    std::string v75 = v73;
    if (SHIBYTE(v74[2]) < 0) {
      operator delete(v74[0]);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v68, "");
LABEL_128:
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v75.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v76.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v77[2]) < 0) {
    operator delete(v77[0]);
  }
  if (*(void *)&v79[32]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v79[32]);
  }
  std::locale::~locale((std::locale *)&v78);
}

void sub_192076190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,std::locale a57)
{
  if (a50 < 0) {
    operator delete(__p);
  }
  if (a56 < 0) {
    operator delete(a51);
  }
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a57);
  _Unwind_Resume(a1);
}

void ctu::fs::get_dir_name(void *a1@<X0>, size_t a2@<X1>, uint64_t a3@<X8>)
{
  v14[0] = (uint64_t)a1;
  v14[1] = a2;
  if (a2)
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    memset(&__p, 170, sizeof(__p));
    ctu::fs::get_base_name(a1, a2, &__p);
    char v6 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = __p.__r_.__value_.__l.__size_;
    }
    size_t v9 = ctu::llvm::StringRef::rfind(v14, p_p, size);
    if (v9 != -1)
    {
      if (a1)
      {
        if (v9 >= a2) {
          size_t v10 = a2;
        }
        else {
          size_t v10 = v9;
        }
        std::string::basic_string[abi:ne180100](&v11, a1, v10);
        char v6 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else
      {
        long long v11 = 0uLL;
        uint64_t v12 = 0;
      }
      *(_OWORD *)a3 = v11;
      *(void *)(a3 + 16) = v12;
    }
    if (v6 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else if (a1)
  {
    *(unsigned char *)(a3 + 23) = 0;
    *(unsigned char *)a3 = 0;
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
}

void sub_1920763EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::basic_regex<char,std::regex_traits<char>>::~basic_regex(std::locale *this)
{
  locale = this[6].__locale_;
  if (locale) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)locale);
  }

  std::locale::~locale(this);
}

void *ctu::fs::get_unique_pathname@<X0>(char *a1@<X0>, size_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  v6.__darwin_time_t tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v6.uint64_t tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v19.st_blksize_t size = v6;
  *(timespec *)v19.st_qspare = v6;
  v19.st_birthtimespec = v6;
  *(timespec *)&v19.st_size_t size = v6;
  v19.st_mtimespec = v6;
  v19.st_ctimespec = v6;
  *(timespec *)&v19.st_uid = v6;
  v19.st_atimespec = v6;
  *(timespec *)&v19.st_dev = v6;
  uint64_t result = (void *)stat(a1, &v19);
  if (result)
  {
    if (a1)
    {
      return std::string::basic_string[abi:ne180100]((void *)a3, a1, a2);
    }
    else
    {
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
    }
  }
  else
  {
    for (int i = 1; ; ++i)
    {
      v9.__darwin_time_t tv_sec = 0xAAAAAAAAAAAAAAAALL;
      v9.uint64_t tv_nsec = 0xAAAAAAAAAAAAAAAALL;
      timespec v25 = v9;
      timespec v26 = v9;
      timespec v23 = v9;
      timespec v24 = v9;
      timespec v21 = v9;
      timespec v22 = v9;
      *(timespec *)v19.st_qspare = v9;
      timespec v20 = v9;
      *(timespec *)&v19.st_size_t size = v9;
      *(timespec *)&v19.st_blksize_t size = v9;
      v19.st_ctimespec = v9;
      v19.st_birthtimespec = v9;
      v19.st_atimespec = v9;
      v19.st_mtimespec = v9;
      *(timespec *)&v19.st_dev = v9;
      *(timespec *)&v19.st_uid = v9;
      snprintf((char *)&v19, 0x100uLL, "-%u", i);
      memset((void *)a3, 170, 24);
      if (a1) {
        std::string::basic_string[abi:ne180100](&__dst, a1, a2);
      }
      else {
        memset(&__dst, 0, 24);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&v19);
      if ((v17 & 0x80u) == 0) {
        size_t v10 = __p;
      }
      else {
        size_t v10 = (void **)__p[0];
      }
      if ((v17 & 0x80u) == 0) {
        std::string::size_type v11 = v17;
      }
      else {
        std::string::size_type v11 = (std::string::size_type)__p[1];
      }
      uint64_t v12 = std::string::append((std::string *)&__dst, (const std::string::value_type *)v10, v11);
      long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      *(void *)(a3 + 16) = *((void *)&v12->__r_.__value_.__l + 2);
      *(_OWORD *)a3 = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      if ((char)v17 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(__dst.st_gid) < 0) {
        operator delete(*(void **)&__dst.st_dev);
      }
      BOOL v14 = *(char *)(a3 + 23) >= 0 ? (const char *)a3 : *(const char **)a3;
      v15.__darwin_time_t tv_sec = 0xAAAAAAAAAAAAAAAALL;
      v15.uint64_t tv_nsec = 0xAAAAAAAAAAAAAAAALL;
      *(timespec *)&__dst.st_blksize_t size = v15;
      *(timespec *)__dst.st_qspare = v15;
      __dst.st_birthtimespec = v15;
      *(timespec *)&__dst.st_size_t size = v15;
      __dst.st_mtimespec = v15;
      __dst.st_ctimespec = v15;
      *(timespec *)&__dst.st_uid = v15;
      __dst.st_atimespec = v15;
      *(timespec *)&__dst.st_dev = v15;
      uint64_t result = (void *)stat(v14, &__dst);
      if (result) {
        break;
      }
      if (*(char *)(a3 + 23) < 0) {
        operator delete(*(void **)a3);
      }
    }
  }
  return result;
}

void sub_192076630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
}

uint64_t ctu::fs::remove_file(const std::__fs::filesystem::path *a1, std::error_code *a2)
{
  if (!remove(a1, a2)) {
    return 1;
  }
  __error();
  __error();
  uint64_t v3 = __error();
  strerror(*v3);
  _TelephonyUtilDebugPrint((uint64_t)"remove_file", (uint64_t)"%s: Failed to remove the file: %s, error: %d(0x%x) (%s)", v4, v5, v6, v7, v8, v9, (uint64_t)"remove_file");
  if (!unlink((const char *)a1)) {
    return 1;
  }
  __error();
  __error();
  size_t v10 = __error();
  strerror(*v10);
  _TelephonyUtilDebugPrint((uint64_t)"remove_file", (uint64_t)"%s: Failed to unlink the file: %s, error: %d(0x%x) (%s)", v11, v12, v13, v14, v15, v16, (uint64_t)"remove_file");
  return 0;
}

uint64_t ctu::fs::remove_dir(std::__fs::filesystem::path *a1, std::error_code *a2)
{
  v4.__darwin_time_t tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v4.uint64_t tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v6.st_blksize_t size = v4;
  *(timespec *)v6.st_qspare = v4;
  v6.st_birthtimespec = v4;
  *(timespec *)&v6.st_size_t size = v4;
  v6.st_mtimespec = v4;
  v6.st_ctimespec = v4;
  *(timespec *)&v6.st_uid = v4;
  v6.st_atimespec = v4;
  *(timespec *)&v6.st_dev = v4;
  if (stat((const char *)a1, &v6)) {
    return 1;
  }
  uint64_t result = ctu::fs::remove_directory_contents((char *)a1, (size_t)a2);
  if (result) {
    return ctu::fs::remove_file(a1, a2);
  }
  return result;
}

uint64_t ctu::fs::remove_directory_contents(char *a1, size_t a2)
{
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  *(void *)&v40.st_dev = MEMORY[0x1E4F143A8];
  v40.st_ino = 0x40000000;
  *(void *)&v40.st_uid = ___ZN3ctu2fs11read_folderENS_4llvm9StringRefERNSt3__16vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEb_block_invoke;
  *(void *)&v40.dev_t st_rdev = &__block_descriptor_tmp_6;
  LOBYTE(v40.st_atimespec.tv_nsec) = 1;
  v40.st_atimespec.__darwin_time_t tv_sec = (__darwin_time_t)&v37;
  ctu::fs::iterate_folder(a1, a2, (uint64_t)&v40);
  uint64_t v4 = v38;
  if (v37 != v38)
  {
    uint64_t v5 = v37 + 24;
    char v6 = 1;
    while (1)
    {
      memset(&v36, 170, sizeof(v36));
      if (*(char *)(v5 - 1) < 0)
      {
        std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)(v5 - 24), *(void *)(v5 - 16));
      }
      else
      {
        long long v7 = *(_OWORD *)(v5 - 24);
        v36.__r_.__value_.__r.__words[2] = *(void *)(v5 - 8);
        *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v7;
      }
      std::string::size_type size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v36.__r_.__value_.__l.__size_;
      }
      if (size == 2)
      {
        if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v10 = &v36;
        }
        else {
          size_t v10 = (std::string *)v36.__r_.__value_.__r.__words[0];
        }
        if (LOWORD(v10->__r_.__value_.__l.__data_) == 11822) {
          goto LABEL_69;
        }
      }
      else if (size == 1)
      {
        uint64_t v9 = (v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? &v36
           : (std::string *)v36.__r_.__value_.__r.__words[0];
        if (v9->__r_.__value_.__s.__data_[0] == 46) {
          goto LABEL_69;
        }
      }
      memset(__p, 170, 24);
      if (a1) {
        std::string::basic_string[abi:ne180100](&__dst, a1, a2);
      }
      else {
        memset(&__dst, 0, sizeof(__dst));
      }
      uint64_t v11 = std::string::append(&__dst, "/", 1uLL);
      long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      *(void *)&v40.st_uid = *((void *)&v11->__r_.__value_.__l + 2);
      *(_OWORD *)&v40.st_dev = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v13 = &v36;
      }
      else {
        uint64_t v13 = (std::string *)v36.__r_.__value_.__r.__words[0];
      }
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v14 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v14 = v36.__r_.__value_.__l.__size_;
      }
      uint64_t v15 = std::string::append((std::string *)&v40, (const std::string::value_type *)v13, v14);
      long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      __p[2] = (void *)v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v40.st_gid) < 0) {
        operator delete(*(void **)&v40.st_dev);
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p[2]) >= 0) {
        unsigned __int8 v17 = __p;
      }
      else {
        unsigned __int8 v17 = (void **)__p[0];
      }
      v18.__darwin_time_t tv_sec = 0xAAAAAAAAAAAAAAAALL;
      v18.uint64_t tv_nsec = 0xAAAAAAAAAAAAAAAALL;
      *(timespec *)&v40.st_blkstd::string::size_type size = v18;
      *(timespec *)v40.st_qspare = v18;
      v40.st_birthtimespec = v18;
      *(timespec *)&v40.st_std::string::size_type size = v18;
      v40.st_mtimespec = v18;
      v40.st_ctimespec = v18;
      *(timespec *)&v40.st_uid = v18;
      v40.st_atimespec = v18;
      *(timespec *)&v40.st_dev = v18;
      if (stat((const char *)v17, &v40) || (v40.st_mode & 0xF000) != 0x4000)
      {
        if (SHIBYTE(__p[2]) >= 0) {
          stat v19 = (const std::__fs::filesystem::path *)__p;
        }
        else {
          stat v19 = (const std::__fs::filesystem::path *)__p[0];
        }
        if (SHIBYTE(__p[2]) >= 0) {
          timespec v20 = (std::error_code *)HIBYTE(__p[2]);
        }
        else {
          timespec v20 = (std::error_code *)__p[1];
        }
        char v21 = ctu::fs::remove_file(v19, v20);
      }
      else
      {
        if (a1) {
          std::string::basic_string[abi:ne180100](&v33, a1, a2);
        }
        else {
          memset(&v33, 0, sizeof(v33));
        }
        timespec v22 = std::string::append(&v33, "/", 1uLL);
        long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        __dst.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          timespec v24 = &v36;
        }
        else {
          timespec v24 = (std::string *)v36.__r_.__value_.__r.__words[0];
        }
        if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v25 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v25 = v36.__r_.__value_.__l.__size_;
        }
        timespec v26 = std::string::append(&__dst, (const std::string::value_type *)v24, v25);
        long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        *(void *)&v40.st_uid = *((void *)&v26->__r_.__value_.__l + 2);
        *(_OWORD *)&v40.st_dev = v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        if ((v40.st_gid & 0x80000000) == 0) {
          std::string::size_type v28 = &v40;
        }
        else {
          std::string::size_type v28 = *(stat **)&v40.st_dev;
        }
        if ((v40.st_gid & 0x80000000) == 0) {
          __darwin_ino64_t st_gid_high = HIBYTE(v40.st_gid);
        }
        else {
          __darwin_ino64_t st_gid_high = v40.st_ino;
        }
        char v21 = ctu::fs::remove_dir(v28, st_gid_high);
        if (SHIBYTE(v40.st_gid) < 0) {
          operator delete(*(void **)&v40.st_dev);
        }
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v33.__r_.__value_.__l.__data_);
        }
      }
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      char v30 = 1;
      if ((v21 & 1) == 0)
      {
        char v6 = 0;
        goto LABEL_71;
      }
      char v6 = 1;
LABEL_69:
      char v30 = 0;
LABEL_71:
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v36.__r_.__value_.__l.__data_);
      }
      if (v5 == v4) {
        char v31 = 1;
      }
      else {
        char v31 = v30;
      }
      v5 += 24;
      if (v31) {
        goto LABEL_79;
      }
    }
  }
  char v6 = 1;
LABEL_79:
  *(void *)&v40.st_dev = &v37;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
  return v6 & 1;
}

void sub_192076B6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  a30 = &a36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  _Unwind_Resume(a1);
}

uint64_t ctu::fs::rename(const std::__fs::filesystem::path *a1, uint64_t a2, std::__fs::filesystem::path *a3, size_t a4)
{
  if (!a2) {
    return 0;
  }
  if (a2 == 2)
  {
    if (LOWORD(a1->__pn_.__r_.__value_.__l.__data_) != 11822 && a4 != 0)
    {
      if (a4 == 2)
      {
LABEL_17:
        long long v7 = "..";
LABEL_18:
        uint64_t result = memcmp(a3, v7, a4);
        if (!result) {
          return result;
        }
        goto LABEL_19;
      }
      if (a4 != 1)
      {
LABEL_19:
        rename(a1, a3, (std::error_code *)a3);
        if (!v9) {
          return 1;
        }
        __error();
        __error();
        size_t v10 = __error();
        strerror(*v10);
        _TelephonyUtilDebugPrint((uint64_t)"rename", (uint64_t)"%s: Failed to rename %s -> %s. error: %d(0x%x)(%s)", v11, v12, v13, v14, v15, v16, (uint64_t)"rename");
        return 0;
      }
LABEL_15:
      long long v7 = ".";
      goto LABEL_18;
    }
  }
  else if ((a2 != 1 || a1->__pn_.__r_.__value_.__s.__data_[0] != 46) && a4)
  {
    if (a4 != 1)
    {
      if (a4 != 2) {
        goto LABEL_19;
      }
      goto LABEL_17;
    }
    goto LABEL_15;
  }
  return 0;
}

void ctu::fs::rename_directory_unique(const std::__fs::filesystem::path *a1@<X0>, char *a2@<X2>, size_t a3@<X3>, void *a4@<X8>)
{
  v8.__darwin_time_t tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v8.uint64_t tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v20.st_blkstd::string::size_type size = v8;
  *(timespec *)v20.st_qspare = v8;
  v20.st_birthtimespec = v8;
  *(timespec *)&v20.st_std::string::size_type size = v8;
  v20.st_mtimespec = v8;
  v20.st_ctimespec = v8;
  *(timespec *)&v20.st_uid = v8;
  v20.st_atimespec = v8;
  *(timespec *)&v20.st_dev = v8;
  if (stat((const char *)a1, &v20) || (v20.st_mode & 0xF000) != 0x4000) {
    goto LABEL_13;
  }
  ctu::fs::get_unique_pathname(a2, a3, (uint64_t)&v20);
  if ((v20.st_gid & 0x80000000) == 0) {
    size_t v10 = &v20;
  }
  else {
    size_t v10 = *(stat **)&v20.st_dev;
  }
  if ((v20.st_gid & 0x80000000) == 0) {
    __darwin_ino64_t st_gid_high = HIBYTE(v20.st_gid);
  }
  else {
    __darwin_ino64_t st_gid_high = v20.st_ino;
  }
  if (SHIBYTE(v20.st_gid) < 0) {
    operator delete(*(void **)&v20.st_dev);
  }
  rename(a1, (const std::__fs::filesystem::path *)v10, v9);
  if (v12)
  {
    __error();
    __error();
    uint64_t v13 = __error();
    strerror(*v13);
    _TelephonyUtilDebugPrint((uint64_t)"rename_directory_unique", (uint64_t)"%s: Failed to rename %s -> %s. error: %d(0x%x)(%s)", v14, v15, v16, v17, v18, v19, (uint64_t)"rename_directory_unique");
LABEL_13:
    std::string::basic_string[abi:ne180100]<0>(a4, "");
    return;
  }
  if (v10)
  {
    std::string::basic_string[abi:ne180100](a4, v10, st_gid_high);
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
}

BOOL ctu::fs::chmod(const char *a1, uint64_t a2, mode_t a3)
{
  int v3 = chmod(a1, a3);
  if (v3)
  {
    __error();
    __error();
    uint64_t v4 = __error();
    strerror(*v4);
    _TelephonyUtilDebugPrint((uint64_t)"chmod", (uint64_t)"%s: Failed to chmod %s as mode(0x%x). error: %d(0x%x)(%s)", v5, v6, v7, v8, v9, v10, (uint64_t)"chmod");
  }
  return v3 == 0;
}

uint64_t ctu::fs::get_filtered_files(const char *a1, uint64_t a2, uint64_t a3, std::vector<std::string> *a4)
{
  uint64_t v6 = opendir(a1);
  if (!v6)
  {
    __error();
    __error();
    stat v40 = __error();
    strerror(*v40);
    _TelephonyUtilDebugPrint((uint64_t)"get_filtered_files", (uint64_t)"%s: Failed to open the directory: %s, error: %d(0x%x) (%s)", v41, v42, v43, v44, v45, v46, (uint64_t)"get_filtered_files");
    goto LABEL_34;
  }
  uint64_t v7 = v6;
  uint64_t v8 = readdir(v6);
  for (i = 0; v8; uint64_t v8 = readdir(v7))
  {
    d_name = v8->d_name;
    std::string::basic_string[abi:ne180100]<0>(v48, v8->d_name);
    uint64_t v11 = (char *)HIBYTE(v49);
    if (v49 >= 0) {
      int v12 = (std::sub_match<const char *> *)v48;
    }
    else {
      int v12 = (std::sub_match<const char *> *)v48[0];
    }
    if (v49 < 0) {
      uint64_t v11 = (char *)v48[1];
    }
    *(void *)&long long v13 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v13 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v57 = v13;
    unint64_t v54 = 0xAAAAAAAAAAAAAA00;
    *(void *)&v51[24] = 0xAAAAAAAAAAAAAAAALL;
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    uint64_t v55 = 0;
    uint64_t v56 = 0;
    LOBYTE(v57) = 0;
    BYTE8(v57) = 0;
    uint64_t v58 = 0;
    *(_OWORD *)std::string __p = 0u;
    memset(v51, 0, 25);
    int v14 = std::regex_match[abi:ne180100]<std::__wrap_iter<char const*>,std::allocator<std::sub_match<std::__wrap_iter<char const*>>>,char,std::regex_traits<char>>(v12, (std::sub_match<const char *> *)&v11[(void)v12], (uint64_t)__p, a3);
    if (__p[0]) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v49) < 0)
    {
      operator delete(v48[0]);
      if (v14)
      {
LABEL_14:
        std::string::basic_string[abi:ne180100]<0>(v48, d_name);
        std::vector<std::string>::pointer end = a4->__end_;
        xpc_object_t value = a4->__end_cap_.__value_;
        if (end >= value)
        {
          unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)a4->__begin_) >> 3);
          unint64_t v19 = v18 + 1;
          if (v18 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)a4->__begin_) >> 3);
          if (2 * v20 > v19) {
            unint64_t v19 = 2 * v20;
          }
          if (v20 >= 0x555555555555555) {
            unint64_t v21 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v21 = v19;
          }
          *(void *)&v51[16] = &a4->__end_cap_;
          if (v21) {
            timespec v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&a4->__end_cap_, v21);
          }
          else {
            timespec v22 = 0;
          }
          long long v23 = &v22[24 * v18];
          __p[0] = v22;
          __p[1] = v23;
          *(void *)&v51[8] = &v22[24 * v21];
          long long v24 = *(_OWORD *)v48;
          *((void *)v23 + 2) = v49;
          *(_OWORD *)long long v23 = v24;
          v48[1] = 0;
          int64_t v49 = 0;
          v48[0] = 0;
          *(void *)long long v51 = v23 + 24;
          std::vector<std::string>::__swap_out_circular_buffer(a4, (std::__split_buffer<std::string> *)__p);
          std::string::size_type v25 = a4->__end_;
          std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)__p);
          int v26 = SHIBYTE(v49);
          a4->__end_ = v25;
          if (v26 < 0) {
            operator delete(v48[0]);
          }
        }
        else
        {
          long long v17 = *(_OWORD *)v48;
          end->__r_.__value_.__r.__words[2] = v49;
          *(_OWORD *)&end->__r_.__value_.__l.__data_ = v17;
          a4->__end_ = end + 1;
        }
        char i = 1;
      }
    }
    else if (v14)
    {
      goto LABEL_14;
    }
  }
  if (closedir(v7))
  {
    __error();
    __error();
    std::string v33 = __error();
    strerror(*v33);
    _TelephonyUtilDebugPrint((uint64_t)"get_filtered_files", (uint64_t)"%s: Failed to close the directory: %s, error: %d(0x%x) (%s)", v34, v35, v36, v37, v38, v39, (uint64_t)"get_filtered_files");
    if (i) {
      return 1;
    }
LABEL_34:
    _TelephonyUtilDebugPrint((uint64_t)"get_filtered_files", (uint64_t)"%s: Find no content in %s", v27, v28, v29, v30, v31, v32, (uint64_t)"get_filtered_files");
    return 0;
  }
  if ((i & 1) == 0) {
    goto LABEL_34;
  }
  return 1;
}

void sub_19207720C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::__split_buffer<std::string> *a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ctu::fs::get_last_number_in_unique_path(void *a1@<X0>, size_t a2@<X1>, void *a3@<X8>)
{
  memset(&__dst, 170, sizeof(__dst));
  if (a1) {
    std::string::basic_string[abi:ne180100](&__dst, a1, a2);
  }
  else {
    memset(&__dst, 0, sizeof(__dst));
  }
  memset(v62, 170, sizeof(v62));
  std::string::basic_string[abi:ne180100]<0>(v62, "/");
  size_t v4 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  char v5 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  std::string::size_type size = __dst.__r_.__value_.__l.__size_;
  std::string::size_type v6 = __dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_dst = &__dst;
  }
  else {
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v9 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v9 = __dst.__r_.__value_.__l.__size_;
  }
  if (SHIBYTE(v62[2]) >= 0) {
    uint64_t v10 = v62;
  }
  else {
    uint64_t v10 = (void **)v62[0];
  }
  if (SHIBYTE(v62[2]) >= 0) {
    size_t v11 = HIBYTE(v62[2]);
  }
  else {
    size_t v11 = (size_t)v62[1];
  }
  int v12 = (char *)&p_dst[-1].__r_.__value_.__r.__words[2] + 7;
  while (v9)
  {
    std::string::size_type v13 = v9;
    if (v11)
    {
      int v14 = memchr(v10, v12[v9], v11);
      std::string::size_type v9 = v13 - 1;
      if (v14) {
        continue;
      }
    }
    std::string::erase(&__dst, v13, 0xFFFFFFFFFFFFFFFFLL);
    size_t v4 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    std::string::size_type size = __dst.__r_.__value_.__l.__size_;
    std::string::size_type v6 = __dst.__r_.__value_.__r.__words[0];
    char v5 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    break;
  }
  unint64_t v60 = 0xAAAAAAAAAAAAAAAALL;
  int64_t v61 = 0xAAAAAAAAAAAAAAAALL;
  if (v5 >= 0) {
    uint64_t v15 = &__dst;
  }
  else {
    uint64_t v15 = (std::string *)v6;
  }
  if (v5 >= 0) {
    size_t v16 = v4;
  }
  else {
    size_t v16 = size;
  }
  int v59 = (char *)0xAAAAAAAAAAAAAAAALL;
  ctu::fs::get_dir_name(v15, v16, (uint64_t)&v59);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v17 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v17 = __dst.__r_.__value_.__l.__size_;
  }
  if (!v17) {
    goto LABEL_80;
  }
  unint64_t v18 = HIBYTE(v61);
  if (v61 < 0) {
    unint64_t v18 = v60;
  }
  if (!v18)
  {
LABEL_80:
    if (a1)
    {
      std::string::basic_string[abi:ne180100](a3, a1, a2);
    }
    else
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
    }
    goto LABEL_119;
  }
  memset(&v58, 170, sizeof(v58));
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v19 = &__dst;
  }
  else {
    unint64_t v19 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  ctu::fs::get_base_name(v19, v17, &v58);
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v20 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v20 = v58.__r_.__value_.__l.__size_;
  }
  memset(v57, 170, sizeof(v57));
  std::string::basic_string[abi:ne180100]((uint64_t)v57, v20 + 13);
  if (SHIBYTE(v57[2]) >= 0) {
    unint64_t v21 = v57;
  }
  else {
    unint64_t v21 = (void **)v57[0];
  }
  if (v20)
  {
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      timespec v22 = &v58;
    }
    else {
      timespec v22 = (std::string *)v58.__r_.__value_.__r.__words[0];
    }
    memmove(v21, v22, v20);
  }
  strcpy((char *)v21 + v20, "-[[:alnum:]]*");
  *(void *)&long long v23 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v23 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v56[1].__ct_ = v23;
  *(_OWORD *)&v56[2].__loc_.__locale_ = v23;
  *(_OWORD *)&v56[0].__loc_.__locale_ = v23;
  *(_OWORD *)&v56[0].__col_ = v23;
  std::regex_traits<char>::regex_traits(v56);
  memset(&v56[1], 0, 40);
  long long v24 = (char *)HIBYTE(v57[2]);
  if (SHIBYTE(v57[2]) >= 0) {
    std::string::size_type v25 = (char *)v57;
  }
  else {
    std::string::size_type v25 = (char *)v57[0];
  }
  if (SHIBYTE(v57[2]) < 0) {
    long long v24 = (char *)v57[1];
  }
  if (&v24[(void)v25] != std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>((uint64_t)v56, v25, &v24[(void)v25]))std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>(); {
  memset(&v55, 0, sizeof(v55));
  }
  if (v61 >= 0) {
    int v26 = (const char *)&v59;
  }
  else {
    int v26 = v59;
  }
  if (v61 >= 0) {
    uint64_t v27 = HIBYTE(v61);
  }
  else {
    uint64_t v27 = v60;
  }
  std::locale::locale(&v50, &v56[0].__loc_);
  long long v51 = *(_OWORD *)&v56[0].__ct_;
  std::regex_traits<char> v52 = v56[1];
  locale = (std::__shared_weak_count *)v56[2].__loc_.__locale_;
  if (v56[2].__loc_.__locale_) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v56[2].__loc_.__locale_ + 1, 1uLL, memory_order_relaxed);
  }
  ct = v56[2].__ct_;
  if (ctu::fs::get_filtered_files(v26, v27, (uint64_t)&v50, &v55))
  {
    std::vector<std::string>::pointer begin = v55.__begin_;
    std::vector<std::string>::pointer end = v55.__end_;
    if (locale) {
      std::__shared_weak_count::__release_shared[abi:ne180100](locale);
    }
    std::locale::~locale(&v50);
    if (begin != end)
    {
      uint64_t v30 = v55.__begin_;
      std::vector<std::string>::pointer v31 = v55.__end_;
      if (v55.__begin_ == v55.__end_)
      {
        unsigned int v32 = 0;
      }
      else
      {
        unsigned int v32 = 0;
        do
        {
          memset(&v49, 170, sizeof(v49));
          ctu::tokenize(v30, 45, 0, (uint64_t *)&v49);
          memset(&v48, 170, sizeof(v48));
          if (*(char *)(v49.__r_.__value_.__l.__size_ - 1) < 0)
          {
            std::string::__init_copy_ctor_external(&v48, *(const std::string::value_type **)(v49.__r_.__value_.__l.__size_ - 24), *(void *)(v49.__r_.__value_.__l.__size_ - 16));
          }
          else
          {
            long long v33 = *(_OWORD *)(v49.__r_.__value_.__l.__size_ - 24);
            v48.__r_.__value_.__r.__words[2] = *(void *)(v49.__r_.__value_.__l.__size_ - 8);
            *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v33;
          }
          if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v34 = &v48;
          }
          else {
            uint64_t v34 = (std::string *)v48.__r_.__value_.__r.__words[0];
          }
          unsigned int v35 = strtol((const char *)v34, 0, 0);
          if (v32 <= v35) {
            unsigned int v32 = v35;
          }
          if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v48.__r_.__value_.__l.__data_);
          }
          v48.__r_.__value_.__r.__words[0] = (std::string::size_type)&v49;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
          ++v30;
        }
        while (v30 != v31);
      }
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v36 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v36 = __dst.__r_.__value_.__l.__size_;
      }
      memset(&v48, 170, sizeof(v48));
      std::string::basic_string[abi:ne180100]((uint64_t)&v48, v36 + 1);
      if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v37 = &v48;
      }
      else {
        uint64_t v37 = (std::string *)v48.__r_.__value_.__r.__words[0];
      }
      if (v36)
      {
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v38 = &__dst;
        }
        else {
          uint64_t v38 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        }
        memmove(v37, v38, v36);
      }
      *(_WORD *)((char *)&v37->__r_.__value_.__l.__data_ + v36) = 45;
      std::to_string(&v47, v32);
      if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v39 = &v47;
      }
      else {
        uint64_t v39 = (std::string *)v47.__r_.__value_.__r.__words[0];
      }
      if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v40 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v40 = v47.__r_.__value_.__l.__size_;
      }
      uint64_t v41 = std::string::append(&v48, (const std::string::value_type *)v39, v40);
      long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v42;
      v41->__r_.__value_.__l.__size_ = 0;
      v41->__r_.__value_.__r.__words[2] = 0;
      v41->__r_.__value_.__r.__words[0] = 0;
      uint64_t v43 = std::string::append(&v49, "/", 1uLL);
      long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
      a3[2] = *((void *)&v43->__r_.__value_.__l + 2);
      *(_OWORD *)a3 = v44;
      v43->__r_.__value_.__l.__size_ = 0;
      v43->__r_.__value_.__r.__words[2] = 0;
      v43->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v49.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v47.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v48.__r_.__value_.__l.__data_);
      }
      goto LABEL_113;
    }
  }
  else
  {
    if (locale) {
      std::__shared_weak_count::__release_shared[abi:ne180100](locale);
    }
    std::locale::~locale(&v50);
  }
  if (a1)
  {
    std::string::basic_string[abi:ne180100](a3, a1, a2);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
LABEL_113:
  v49.__r_.__value_.__r.__words[0] = (std::string::size_type)&v55;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v49);
  if (v56[2].__loc_.__locale_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v56[2].__loc_.__locale_);
  }
  std::locale::~locale(&v56[0].__loc_);
  if (SHIBYTE(v57[2]) < 0) {
    operator delete(v57[0]);
  }
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
LABEL_119:
  if (SHIBYTE(v61) < 0) {
    operator delete(v59);
  }
  if (SHIBYTE(v62[2]) < 0) {
    operator delete(v62[0]);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_192077808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,std::locale a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,std::locale a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  std::string __p = &a39;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a42);
  if (*(char *)(v48 - 193) < 0) {
    operator delete(*(void **)(v48 - 216));
  }
  if (*(char *)(v48 - 169) < 0) {
    operator delete(*(void **)(v48 - 192));
  }
  if (*(char *)(v48 - 145) < 0) {
    operator delete(*(void **)(v48 - 168));
  }
  if (*(char *)(v48 - 121) < 0) {
    operator delete(*(void **)(v48 - 144));
  }
  if (*(char *)(v48 - 97) < 0) {
    operator delete(*(void **)(v48 - 120));
  }
  _Unwind_Resume(a1);
}

BOOL ctu::fs::get_partition_info(const char *a1, uint64_t a2, void *a3, void *a4, unint64_t *a5)
{
  if (!a2) {
    return 0;
  }
  memset(&v19, 0, sizeof(v19));
  int v8 = statvfs(a1, &v19);
  BOOL v9 = v8 == 0;
  if (v8)
  {
    __error();
    __error();
    uint64_t v10 = __error();
    strerror(*v10);
    _TelephonyUtilDebugPrint((uint64_t)"get_partition_info", (uint64_t)"%s: Failed to get stats the source file: %s, error: %d(0x%x) (%s)", v11, v12, v13, v14, v15, v16, (uint64_t)"get_partition_info");
  }
  else
  {
    *a5 = v19.f_frsize;
    uint64_t f_bavail = v19.f_bavail;
    *a3 = v19.f_blocks;
    *a4 = f_bavail;
  }
  return v9;
}

std::regex_traits<char> *__cdecl std::regex_traits<char>::regex_traits(std::regex_traits<char> *this)
{
  uint64_t v2 = (const std::locale *)MEMORY[0x192FED2D0]();
  this->__ct_ = (const std::ctype<char> *)std::locale::use_facet(v2, MEMORY[0x1E4FBA258]);
  this->__col_ = (const std::collate<char> *)std::locale::use_facet(&this->__loc_, MEMORY[0x1E4FBA280]);
  return this;
}

void sub_192077A58(_Unwind_Exception *a1)
{
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(uint64_t a1, char *a2, char *a3)
{
  std::string::size_type v6 = operator new(8uLL);
  *std::string::size_type v6 = &unk_1EE2F8638;
  uint64_t v7 = operator new(0x10uLL);
  v7[1] = v6;
  std::shared_ptr<std::__empty_state<char>>::reset[abi:ne180100]<std::__empty_state<char>,void>((void *)(a1 + 40), (uint64_t)v7);
  int v8 = *(std::__owns_one_state<char> **)(a1 + 40);
  *(void *)(a1 + 56) = v8;
  unsigned int v9 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v9 > 0x3F)
  {
    switch(v9)
    {
      case 0x40u:
LABEL_14:
        return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>((std::basic_regex<char> *)a1, a2, a3);
      case 0x80u:
        uint64_t v13 = (char *)memchr(a2, 10, a3 - a2);
        if (v13) {
          uint64_t v14 = v13;
        }
        else {
          uint64_t v14 = a3;
        }
        if (v14 == a2)
        {
          timespec v22 = (std::__node<char> *)operator new(0x10uLL);
          first = v8->__first_;
          v22[1].__vftable = (std::__node<char>_vtbl *)first;
          v8->__first_ = v22;
          *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
        }
        else
        {
          std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>((std::basic_regex<char> *)a1, a2, v14);
        }
        if (v14 != a3) {
          ++v14;
        }
        while (v14 != a3)
        {
          long long v24 = (char *)memchr(v14, 10, a3 - v14);
          if (v24) {
            std::string::size_type v25 = v24;
          }
          else {
            std::string::size_type v25 = a3;
          }
          int v26 = *(std::__owns_one_state<char> **)(a1 + 56);
          if (v25 == v14)
          {
            uint64_t v27 = (std::__node<char> *)operator new(0x10uLL);
            uint64_t v28 = v26->__first_;
            v27[1].__vftable = (std::__node<char>_vtbl *)v28;
            v26->__first_ = v27;
            *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
          }
          else
          {
            std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>((std::basic_regex<char> *)a1, v14, v25);
          }
          std::basic_regex<char,std::regex_traits<char>>::__push_alternation((std::basic_regex<char> *)a1, v8, v26);
          if (v25 == a3) {
            uint64_t v14 = v25;
          }
          else {
            uint64_t v14 = v25 + 1;
          }
        }
        break;
      case 0x100u:
        uint64_t v10 = (char *)memchr(a2, 10, a3 - a2);
        if (v10) {
          uint64_t v11 = v10;
        }
        else {
          uint64_t v11 = a3;
        }
        if (v11 == a2)
        {
          uint64_t v15 = (std::__node<char> *)operator new(0x10uLL);
          uint64_t v16 = v8->__first_;
          v15[1].__vftable = (std::__node<char>_vtbl *)v16;
          v8->__first_ = v15;
          *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
        }
        else
        {
          std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>((std::basic_regex<char> *)a1, a2, v11);
        }
        if (v11 != a3) {
          ++v11;
        }
        while (v11 != a3)
        {
          size_t v17 = (char *)memchr(v11, 10, a3 - v11);
          if (v17) {
            unint64_t v18 = v17;
          }
          else {
            unint64_t v18 = a3;
          }
          statvfs v19 = *(std::__owns_one_state<char> **)(a1 + 56);
          if (v18 == v11)
          {
            size_t v20 = (std::__node<char> *)operator new(0x10uLL);
            unint64_t v21 = v19->__first_;
            v20[1].__vftable = (std::__node<char>_vtbl *)v21;
            v19->__first_ = v20;
            *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
          }
          else
          {
            std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>((std::basic_regex<char> *)a1, v11, v18);
          }
          std::basic_regex<char,std::regex_traits<char>>::__push_alternation((std::basic_regex<char> *)a1, v8, v19);
          if (v18 == a3) {
            uint64_t v11 = v18;
          }
          else {
            uint64_t v11 = v18 + 1;
          }
        }
        break;
      default:
        goto LABEL_55;
    }
    return a3;
  }
  else if (v9)
  {
    if (v9 != 16)
    {
      if (v9 != 32) {
LABEL_55:
      }
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>();
      goto LABEL_14;
    }
    return std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>((std::basic_regex<char> *)a1, a2, a3);
  }
  else
  {
    return std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)a2, a3);
  }
}

void sub_192077DEC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x192FECF60](exception, 17);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_192077E64(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::shared_ptr<std::__empty_state<char>>::reset[abi:ne180100]<std::__empty_state<char>,void>(void *a1, uint64_t a2)
{
  size_t v4 = operator new(0x20uLL);
  *size_t v4 = &unk_1EE2F8FF0;
  v4[1] = 0;
  void v4[2] = 0;
  v4[3] = a2;
  char v5 = (std::__shared_weak_count *)a1[1];
  *a1 = a2;
  a1[1] = v4;
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_192077EF0(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, char *a3)
{
  std::vector<std::string>::pointer end = a1->__end_;
  uint64_t v7 = a2;
  do
  {
    int v8 = v7;
    uint64_t v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, v7, a3);
  }
  while (v7 != v8);
  if (v8 == a2)
  {
    unsigned int v9 = (std::__node<char> *)operator new(0x10uLL);
    uint64_t v10 = a1->__end_;
    first = v10->__first_;
    v9[1].__vftable = (std::__node<char>_vtbl *)first;
    v10->__first_ = v9;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  }
  while (v8 != (unsigned __int8 *)a3)
  {
    if (*v8 != 124) {
      return (char *)v8;
    }
    uint64_t v12 = a1->__end_;
    uint64_t v13 = v8 + 1;
    uint64_t v14 = v8 + 1;
    do
    {
      int v8 = v14;
      uint64_t v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, v14, a3);
    }
    while (v14 != v8);
    if (v8 == v13)
    {
      uint64_t v15 = (std::__node<char> *)operator new(0x10uLL);
      uint64_t v16 = a1->__end_;
      size_t v17 = v16->__first_;
      v15[1].__vftable = (std::__node<char>_vtbl *)v17;
      v16->__first_ = v15;
      a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v12);
  }
  return a3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  int v3 = a2;
  if (a2 == a3) {
    return a2;
  }
  size_t v4 = a3;
  if (*a2 == 94)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(this);
    ++v3;
  }
  if (v3 != v4)
  {
    do
    {
      std::string::size_type v6 = v3;
      int v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(this, v3, v4);
    }
    while (v3 != v6);
    if (v6 != v4)
    {
      if (v6 + 1 != v4 || *v6 != 36) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(this);
    }
  }
  return v4;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  int v3 = a3;
  std::vector<std::string>::pointer end = a1->__end_;
  uint64_t v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(a1, a2, a3);
  if (v7 == (unsigned __int8 *)a2) {
LABEL_9:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  int v8 = v7;
  while (v8 != (unsigned __int8 *)v3)
  {
    if (*v8 != 124) {
      return (char *)v8;
    }
    unsigned int v9 = a1->__end_;
    uint64_t v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(a1, (char *)v8 + 1, v3);
    if (v10 == v8 + 1) {
      goto LABEL_9;
    }
    int v8 = v10;
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return v3;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x192FECF60](exception, 14);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_192078200(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__end_state<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

void std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void (__cdecl ***std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__empty_state<char>::~__empty_state(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

void std::__empty_state<char>::__exec(const std::__empty_state<char> *this, std::__empty_state<char>::__state *a2)
{
  a2->__do_ = -994;
  a2->__node_ = this->__first_;
}

void std::__owns_one_state<char>::~__owns_one_state(std::__owns_one_state<char> *this)
{
  first = this->__first_;
  if (first) {
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  }
}

{
  std::__node<char> *first;
  uint64_t vars8;

  first = this->__first_;
  if (first) {
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  }

  operator delete(this);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_alternation(std::basic_regex<char> *this, std::__owns_one_state<char> *__sa, std::__owns_one_state<char> *__sb)
{
  std::string::size_type v6 = (std::__node<char> *)operator new(0x18uLL);
  first = __sb->__first_;
  v6[1].__vftable = (std::__node<char>_vtbl *)__sa->__first_;
  v6[2].__vftable = (std::__node<char>_vtbl *)first;
  v6->__vftable = (std::__node<char>_vtbl *)&unk_1EE2F8608;
  __sa->__first_ = v6;
  __sb->__first_ = 0;
  int v8 = (std::__node<char> *)operator new(0x10uLL);
  unsigned int v9 = this->__end_->__first_;
  v8[1].__vftable = (std::__node<char>_vtbl *)v9;
  __sb->__first_ = v8;
  this->__end_->__first_ = 0;
  uint64_t v10 = (std::__node<char> *)operator new(0x10uLL);
  uint64_t v11 = __sb->__first_;
  v10->__vftable = (std::__node<char>_vtbl *)&unk_1EE2F9098;
  v10[1].__vftable = (std::__node<char>_vtbl *)v11;
  this->__end_->__first_ = v10;
  this->__end_ = (std::__owns_one_state<char> *)__sb->__first_;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(std::basic_regex<char> *this, unsigned __int8 *a2, char *a3)
{
  if (a2 == (unsigned __int8 *)a3) {
    return a2;
  }
  int v6 = (char)*a2;
  int v7 = *a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 == (unsigned __int8 *)a3) {
        goto LABEL_32;
      }
      int v17 = a2[1];
      if (v17 == 66)
      {
        BOOL v18 = 1;
      }
      else
      {
        if (v17 != 98) {
          goto LABEL_32;
        }
        BOOL v18 = 0;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(this, v18);
      return a2 + 2;
    }
    if (v6 != 94) {
      goto LABEL_32;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(this);
    return a2 + 1;
  }
  if (v6 == 36)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(this);
    return a2 + 1;
  }
  BOOL v9 = v6 == 40;
  int v8 = (char *)(a2 + 1);
  BOOL v9 = !v9 || v8 == a3;
  if (!v9)
  {
    BOOL v9 = *v8 == 63;
    uint64_t v10 = (char *)(a2 + 2);
    if (v9 && v10 != a3)
    {
      int v12 = *v10;
      if (v12 == 33)
      {
        *(void *)&long long v19 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v19 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v47.__loop_count_ = v19;
        *(_OWORD *)&v47.__start_.__cntrl_ = v19;
        *(_OWORD *)&v47.__traits_.__loc_.__locale_ = v19;
        *(_OWORD *)&v47.__traits_.__col_ = v19;
        std::regex_traits<char>::regex_traits(&v47.__traits_);
        memset(&v47.__flags_, 0, 40);
        v47.__flags_ = this->__flags_;
        uint64_t v14 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v47, a2 + 3, a3);
        marked_size_t count = v47.__marked_count_;
        std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v47, 1, this->__marked_count_);
        this->__marked_count_ += marked_count;
        if (v14 == a3 || *v14 != 41) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
      }
      else
      {
        if (v12 != 61) {
          goto LABEL_32;
        }
        *(void *)&long long v13 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v13 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v47.__loop_count_ = v13;
        *(_OWORD *)&v47.__start_.__cntrl_ = v13;
        *(_OWORD *)&v47.__traits_.__loc_.__locale_ = v13;
        *(_OWORD *)&v47.__traits_.__col_ = v13;
        std::regex_traits<char>::regex_traits(&v47.__traits_);
        memset(&v47.__flags_, 0, 40);
        v47.__flags_ = this->__flags_;
        uint64_t v14 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v47, a2 + 3, a3);
        unsigned int v15 = v47.__marked_count_;
        std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v47, 0, this->__marked_count_);
        this->__marked_count_ += v15;
        if (v14 == a3 || *v14 != 41) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
      }
      std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&v47.__traits_.__loc_);
      uint64_t result = (unsigned __int8 *)(v14 + 1);
      if (v14 + 1 != (char *)a2) {
        return result;
      }
      int v7 = *a2;
    }
  }
LABEL_32:
  std::vector<std::string>::pointer end = this->__end_;
  unsigned int v22 = this->__marked_count_;
  if ((char)v7 <= 91)
  {
    uint64_t result = a2;
    switch((char)v7)
    {
      case '$':
      case ')':
        return result;
      case '%':
      case '&':
      case '\'':
      case ',':
      case '-':
        goto LABEL_60;
      case '(':
        if (a2 + 1 == (unsigned __int8 *)a3) {
          goto LABEL_100;
        }
        if (a2 + 2 != (unsigned __int8 *)a3 && a2[1] == 63 && a2[2] == 58)
        {
          p_open_size_t count = &this->__open_count_;
          ++this->__open_count_;
          long long v24 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, a2 + 3, a3);
          if (v24 == a3) {
            goto LABEL_100;
          }
          std::string::size_type v25 = v24;
          if (*v24 != 41) {
            goto LABEL_100;
          }
        }
        else
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(this);
          unsigned int v33 = this->__marked_count_;
          p_open_size_t count = &this->__open_count_;
          ++this->__open_count_;
          uint64_t v34 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, a2 + 1, a3);
          if (v34 == a3 || (std::string::size_type v25 = v34, *v34 != 41)) {
LABEL_100:
          }
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
          std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(this, v33);
        }
        --*p_open_count;
        uint64_t v27 = (unsigned __int8 *)(v25 + 1);
        goto LABEL_57;
      case '*':
      case '+':
        goto LABEL_66;
      case '.':
        std::vector<std::string>::pointer v31 = (std::__node<char> *)operator new(0x10uLL);
        first = end->__first_;
        v31->__vftable = (std::__node<char>_vtbl *)&unk_1EE2F90C8;
        v31[1].__vftable = (std::__node<char>_vtbl *)first;
        end->__first_ = v31;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
        goto LABEL_61;
      default:
        if ((char)v7 == 91)
        {
          uint64_t v27 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, (char *)a2, a3);
          goto LABEL_57;
        }
        if ((char)v7 != 63) {
          goto LABEL_60;
        }
        goto LABEL_66;
    }
  }
  uint64_t v26 = ((char)v7 - 92);
  if (v26 > 0x21) {
    goto LABEL_60;
  }
  if (((1 << (v7 - 92)) & 0x300000006) != 0) {
    return a2;
  }
  if ((char)v7 != 92)
  {
    if (v26 == 31) {
LABEL_66:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
LABEL_60:
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v7);
LABEL_61:
    uint64_t v27 = a2 + 1;
    goto LABEL_62;
  }
  if (v7 != 92) {
    return a2;
  }
  uint64_t v28 = a2 + 1;
  if (a2 + 1 == (unsigned __int8 *)a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  int v29 = *v28;
  unsigned int v30 = v29 - 48;
  if (v29 != 48)
  {
    if ((v29 - 49) <= 8)
    {
      uint64_t v27 = a2 + 2;
      if (a2 + 2 == (unsigned __int8 *)a3)
      {
        uint64_t v27 = (unsigned __int8 *)a3;
      }
      else
      {
        while (1)
        {
          int v36 = *v27;
          if ((v36 - 48) > 9) {
            break;
          }
          if (v30 >= 0x19999999) {
            goto LABEL_101;
          }
          ++v27;
          unsigned int v30 = v36 + 10 * v30 - 48;
          if (v27 == (unsigned __int8 *)a3)
          {
            uint64_t v27 = (unsigned __int8 *)a3;
            break;
          }
        }
        if (!v30) {
LABEL_101:
        }
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
      }
      if (v30 > v22) {
        goto LABEL_101;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, v30);
      if (v27 != v28)
      {
LABEL_57:
        uint64_t result = a2;
        if (v27 == a2) {
          return result;
        }
        goto LABEL_62;
      }
      LOBYTE(v29) = *v28;
    }
    if ((char)v29 > 99)
    {
      if ((char)v29 == 119)
      {
        uint64_t v37 = this;
        BOOL v38 = 0;
        goto LABEL_91;
      }
      if ((char)v29 == 115)
      {
        uint64_t v45 = this;
        BOOL v46 = 0;
LABEL_97:
        started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v45, v46);
        int v42 = started->__mask_ | 0x4000;
        goto LABEL_98;
      }
      if ((char)v29 != 100)
      {
LABEL_92:
        long long v44 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(this, a2 + 1, (unsigned __int8 *)a3, 0);
        if (v44 == v28) {
          uint64_t v27 = a2;
        }
        else {
          uint64_t v27 = v44;
        }
        goto LABEL_57;
      }
      uint64_t v39 = this;
      BOOL v40 = 0;
    }
    else
    {
      if ((char)v29 != 68)
      {
        if ((char)v29 != 83)
        {
          if ((char)v29 == 87)
          {
            uint64_t v37 = this;
            BOOL v38 = 1;
LABEL_91:
            uint64_t v43 = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v37, v38);
            v43->__mask_ |= 0x500u;
            std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v43, 95);
            goto LABEL_99;
          }
          goto LABEL_92;
        }
        uint64_t v45 = this;
        BOOL v46 = 1;
        goto LABEL_97;
      }
      uint64_t v39 = this;
      BOOL v40 = 1;
    }
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v39, v40);
    int v42 = started->__mask_ | 0x400;
LABEL_98:
    started->__mask_ = v42;
    goto LABEL_99;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v30);
LABEL_99:
  uint64_t v27 = a2 + 2;
LABEL_62:
  size_t v35 = this->__marked_count_ + 1;

  return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)this, v27, (unsigned __int8 *)a3, end, v22 + 1, v35);
}

void sub_192078B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t a5, size_t a6)
{
  if (a2 == a3) {
    return a2;
  }
  unsigned int v6 = a6;
  unsigned int v7 = a5;
  uint64_t v10 = a1;
  int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  int v12 = (char)*a2;
  if (v12 > 62)
  {
    if (v12 == 63)
    {
      long long v13 = a2 + 1;
      if (v11) {
        BOOL v20 = 1;
      }
      else {
        BOOL v20 = v13 == a3;
      }
      if (!v20 && *v13 == 63)
      {
        long long v13 = a2 + 2;
        a5 = a5;
        a6 = a6;
        size_t v14 = 0;
        size_t v18 = 1;
        goto LABEL_33;
      }
      a5 = a5;
      a6 = a6;
      size_t v14 = 0;
      size_t v18 = 1;
      goto LABEL_45;
    }
    if (v12 != 123) {
      return a2;
    }
    LODWORD(__max) = -1431655766;
    unsigned int v15 = a2 + 1;
    uint64_t v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(a2 + 1, a3, (int *)&__max);
    if (v16 != v15)
    {
      if (v16 != a3)
      {
        int v17 = (char)*v16;
        if (v17 != 44)
        {
          if (v17 == 125)
          {
            long long v13 = v16 + 1;
            if (!v11 && v13 != a3 && *v13 == 63)
            {
              long long v13 = v16 + 2;
              size_t v14 = (int)__max;
              a5 = v7;
              a6 = v6;
              a1 = v10;
              size_t v18 = (int)__max;
LABEL_33:
              unint64_t v21 = __s;
              BOOL v22 = 0;
LABEL_46:
              std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v14, v18, v21, a5, a6, v22);
              return v13;
            }
            size_t v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            size_t v18 = (int)__max;
LABEL_45:
            unint64_t v21 = __s;
            BOOL v22 = 1;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
        long long v23 = v16 + 1;
        if (v16 + 1 == a3) {
          goto LABEL_58;
        }
        if (*v23 == 125)
        {
          long long v13 = v16 + 2;
          if (!v11 && v13 != a3 && *v13 == 63)
          {
            long long v13 = v16 + 3;
            size_t v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            goto LABEL_26;
          }
          size_t v14 = (int)__max;
          a5 = v7;
          a6 = v6;
          a1 = v10;
LABEL_36:
          size_t v18 = -1;
          goto LABEL_45;
        }
        int v27 = -1;
        std::string::size_type v25 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v16 + 1, a3, &v27);
        if (v25 != v23 && v25 != a3 && *v25 == 125)
        {
          size_t v18 = v27;
          size_t v14 = (int)__max;
          if (v27 >= (int)__max)
          {
            long long v13 = v25 + 1;
            BOOL v22 = 1;
            if (!v11 && v13 != a3)
            {
              int v26 = v25[1];
              BOOL v22 = v26 != 63;
              if (v26 == 63) {
                long long v13 = v25 + 2;
              }
            }
            a5 = v7;
            a6 = v6;
            a1 = v10;
            unint64_t v21 = __s;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
LABEL_58:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  if (v12 == 42)
  {
    long long v13 = a2 + 1;
    if (v11) {
      BOOL v19 = 1;
    }
    else {
      BOOL v19 = v13 == a3;
    }
    if (!v19 && *v13 == 63)
    {
      long long v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      size_t v14 = 0;
      goto LABEL_26;
    }
    a5 = a5;
    a6 = a6;
    size_t v14 = 0;
    goto LABEL_36;
  }
  if (v12 == 43)
  {
    long long v13 = a2 + 1;
    if (!v11 && v13 != a3 && *v13 == 63)
    {
      long long v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      size_t v14 = 1;
LABEL_26:
      size_t v18 = -1;
      goto LABEL_33;
    }
    a5 = a5;
    a6 = a6;
    size_t v14 = 1;
    goto LABEL_36;
  }
  return a2;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(std::basic_regex<char> *this)
{
  uint64_t v2 = (std::__node<char> *)operator new(0x18uLL);
  BOOL v3 = (this->__flags_ & 0x5F0) == 1024;
  std::vector<std::string>::pointer end = this->__end_;
  first = end->__first_;
  v2->__vftable = (std::__node<char>_vtbl *)&unk_1EE2F88D0;
  v2[1].__vftable = (std::__node<char>_vtbl *)first;
  LOBYTE(v2[2].__vftable) = v3;
  end->__first_ = v2;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(std::basic_regex<char> *this)
{
  uint64_t v2 = (std::__node<char> *)operator new(0x18uLL);
  BOOL v3 = (this->__flags_ & 0x5F0) == 1024;
  std::vector<std::string>::pointer end = this->__end_;
  first = end->__first_;
  v2->__vftable = (std::__node<char>_vtbl *)&unk_1EE2F8930;
  v2[1].__vftable = (std::__node<char>_vtbl *)first;
  LOBYTE(v2[2].__vftable) = v3;
  end->__first_ = v2;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(std::basic_regex<char> *this, BOOL a2)
{
  size_t v4 = (char *)operator new(0x30uLL);
  first = this->__end_->__first_;
  *(void *)size_t v4 = &unk_1EE2F8728;
  *((void *)v4 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = first;
  std::locale::locale((std::locale *)v4 + 2, &this->__traits_.__loc_);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)&this->__traits_.__ct_;
  v4[40] = a2;
  this->__end_->__first_ = (std::__node<char> *)v4;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(std::basic_regex<char> *this, const std::basic_regex<char> *a2, BOOL a3, unsigned int a4)
{
  int v8 = (char *)operator new(0x58uLL);
  first = this->__end_->__first_;
  *(void *)int v8 = &unk_1EE2F8668;
  *((void *)v8 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = first;
  std::locale::locale((std::locale *)v8 + 2, &a2->__traits_.__loc_);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)&a2->__traits_.__ct_;
  *(_OWORD *)(v8 + 40) = *(_OWORD *)&a2->__flags_;
  cntrl = a2->__start_.__cntrl_;
  *((void *)v8 + 7) = a2->__start_.__ptr_;
  *((void *)v8 + 8) = cntrl;
  if (cntrl) {
    atomic_fetch_add_explicit(&cntrl->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)v8 + 9) = a2->__end_;
  *((_DWORD *)v8 + 20) = a4;
  v8[84] = a3;
  this->__end_->__first_ = (std::__node<char> *)v8;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x192FECF60](exception, 6);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_192079114(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

uint64_t std::__l_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 92))
  {
    if (*(void *)(a2 + 16) != *(void *)(a2 + 8) || (*(unsigned char *)(a2 + 88) & 1) != 0)
    {
LABEL_12:
      uint64_t v4 = 0;
      *(_DWORD *)a2 = -993;
      goto LABEL_13;
    }
  }
  else
  {
    if (!*(unsigned char *)(result + 16)) {
      goto LABEL_12;
    }
    int v2 = *(unsigned __int8 *)(*(void *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10) {
      goto LABEL_12;
    }
  }
  *(_DWORD *)a2 = -994;
  uint64_t v4 = *(void *)(result + 8);
LABEL_13:
  *(void *)(a2 + 80) = v4;
  return result;
}

void (__cdecl ***std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  int v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

uint64_t std::__r_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(unsigned char *)(a2 + 88) & 2) == 0
    || *(unsigned char *)(result + 16) && ((v3 = *v2, v3 != 13) ? (BOOL v4 = v3 == 10) : (BOOL v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    uint64_t v5 = *(void *)(result + 8);
  }
  else
  {
    uint64_t v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(void *)(a2 + 80) = v5;
  return result;
}

std::locale *std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EE2F8728;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EE2F8728;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  operator delete(a1);
}

uint64_t std::__word_boundary<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 **)(a2 + 8);
  int v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3) {
    goto LABEL_17;
  }
  BOOL v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 == v3)
  {
    if ((*(unsigned char *)(a2 + 88) & 8) == 0)
    {
      uint64_t v6 = *(v3 - 1);
      goto LABEL_13;
    }
LABEL_17:
    int v10 = 0;
    goto LABEL_25;
  }
  if (v4 == v2)
  {
    int v5 = *(_DWORD *)(a2 + 88);
    if ((v5 & 0x80) == 0)
    {
      if ((v5 & 4) == 0)
      {
        uint64_t v6 = *v2;
LABEL_13:
        if (v6 == 95
          || (v6 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
        {
          int v10 = 1;
          goto LABEL_25;
        }
        goto LABEL_17;
      }
      goto LABEL_17;
    }
  }
  uint64_t v7 = *(v4 - 1);
  uint64_t v8 = *v4;
  int v9 = v7 == 95 || (v7 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v7) & 0x500) != 0;
  int v11 = v8 == 95
     || (v8 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v8) & 0x500) != 0;
  int v10 = v9 != v11;
LABEL_25:
  if (*(unsigned __int8 *)(result + 40) == v10)
  {
    uint64_t v12 = 0;
    int v13 = -993;
  }
  else
  {
    uint64_t v12 = *(void *)(result + 8);
    int v13 = -994;
  }
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + 80) = v12;
  return result;
}

void (__cdecl ***std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1EE2F8668;
  int v2 = (std::locale *)(a1 + 2);
  int v3 = (std::__shared_weak_count *)a1[8];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::locale::~locale(v2);
  BOOL v4 = a1[1];
  if (v4) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  }
  return a1;
}

void std::__lookahead<char,std::regex_traits<char>>::~__lookahead(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EE2F8668;
  int v2 = a1 + 2;
  locale = (std::__shared_weak_count *)a1[8].__locale_;
  if (locale) {
    std::__shared_weak_count::__release_shared[abi:ne180100](locale);
  }
  std::locale::~locale(v2);
  BOOL v4 = a1[1].__locale_;
  if (v4) {
    (*(void (**)(std::locale::__imp *))(*(void *)v4 + 8))(v4);
  }

  operator delete(a1);
}

void std::__lookahead<char,std::regex_traits<char>>::__exec(uint64_t a1, uint64_t a2)
{
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v20 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v22 = 0xAAAAAAAAAAAAAA00;
  long long v24 = v4;
  uint64_t v21 = 0;
  long long v23 = 0uLL;
  LOBYTE(v24) = 0;
  BYTE8(v24) = 0;
  uint64_t v25 = 0;
  memset(&__p, 0, sizeof(__p));
  std::vector<std::csub_match>::size_type v5 = (*(_DWORD *)(a1 + 44) + 1);
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)&long long v19 = *(void *)(a2 + 24);
  *((void *)&v19 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v19;
  LOBYTE(v20) = 0;
  std::vector<std::sub_match<char const*>>::assign(&__p, v5, (std::vector<std::csub_match>::const_reference)&v19);
  *((void *)&v20 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v6;
  uint64_t v21 = v6;
  LOBYTE(v22) = 0;
  long long v23 = v19;
  LOBYTE(v24) = v20;
  uint64_t v25 = v6;
  BYTE8(v24) = 1;
  uint64_t v7 = *(const char **)(a2 + 16);
  if (*(unsigned char *)(a2 + 92)) {
    BOOL v8 = v7 == *(const char **)(a2 + 8);
  }
  else {
    BOOL v8 = 0;
  }
  char v9 = v8;
  if (*(unsigned __int8 *)(a1 + 84) == std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1 + 16, v7, *(const char **)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v9))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
    std::vector<std::csub_match>::pointer begin = __p.__begin_;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(a1 + 8);
  std::vector<std::csub_match>::pointer begin = __p.__begin_;
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
  if (v11 < 2)
  {
LABEL_13:
    if (!begin) {
      return;
    }
    goto LABEL_14;
  }
  int v12 = 0;
  int v13 = *(_DWORD *)(a1 + 80);
  uint64_t v14 = *(void *)(a2 + 32);
  unint64_t v15 = 1;
  do
  {
    uint64_t v16 = &begin[v15];
    uint64_t v17 = v14 + 24 * (v13 + v12);
    *(std::pair<const char *, const char *> *)uint64_t v17 = v16->std::pair<const char *, const char *>;
    *(unsigned char *)(v17 + 16) = v16->matched;
    unint64_t v15 = (v12 + 2);
    ++v12;
  }
  while (v11 > v15);
LABEL_14:

  operator delete(begin);
}

void sub_1920798D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  int64x2_t v43 = 0uLL;
  unint64_t v44 = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    __x.second = a3;
    *(void *)&__x.matched = 0xAAAAAAAAAAAAAA00;
    __x.first = a3;
    *(_DWORD *)uint64_t v41 = 0;
    memset(&v41[8], 0, 85);
    v43.i64[1] = (uint64_t)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(&v43, (uint64_t)v41);
    if (*(void *)&v41[56]) {
      operator delete(*(void **)&v41[56]);
    }
    if (*(void *)&v41[32]) {
      operator delete(*(void **)&v41[32]);
    }
    uint64_t v39 = a4;
    uint64_t v13 = v43.i64[1];
    *(_DWORD *)(v43.i64[1] - 96) = 0;
    *(void *)(v13 - 88) = a2;
    *(void *)(v13 - 80) = a2;
    *(void *)(v13 - 72) = a3;
    std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v13 - 64), *(unsigned int *)(a1 + 28), &__x);
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)(v43.i64[1] - 40), *(unsigned int *)(a1 + 32));
    uint64_t v14 = v43.i64[1];
    *(void *)(v43.i64[1] - 16) = v6;
    *(_DWORD *)(v14 - 8) = a5;
    *(unsigned char *)(v14 - 4) = a6;
    BOOL v40 = a3;
    signed int v15 = a3 - a2;
    unsigned int v16 = 1;
    while (2)
    {
      if ((v16 & 0xFFF) != 0 || (int)(v16 >> 12) < v15)
      {
        size_t v18 = (void *)(v14 - 16);
        uint64_t v17 = *(void *)(v14 - 16);
        long long v19 = (_OWORD *)(v14 - 96);
        if (v17) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 16))(v17, v14 - 96);
        }
        switch(*(_DWORD *)v19)
        {
          case 0xFFFFFC18:
            long long v20 = *(const char **)(v14 - 80);
            if ((a5 & 0x20) != 0 && v20 == a2 || (a5 & 0x1000) != 0 && v20 != v40) {
              goto LABEL_16;
            }
            uint64_t v30 = *v39;
            *(void *)uint64_t v30 = a2;
            *(void *)(v30 + 8) = v20;
            *(unsigned char *)(v30 + 16) = 1;
            uint64_t v31 = *(void *)(v14 - 64);
            uint64_t v32 = *(void *)(v14 - 56) - v31;
            if (v32)
            {
              unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * (v32 >> 3);
              uint64_t v34 = (unsigned char *)(v31 + 16);
              unsigned int v35 = 1;
              do
              {
                uint64_t v36 = v30 + 24 * v35;
                *(_OWORD *)uint64_t v36 = *((_OWORD *)v34 - 1);
                char v37 = *v34;
                v34 += 24;
                *(unsigned char *)(v36 + 16) = v37;
              }
              while (v33 > v35++);
            }
            uint64_t v28 = 1;
            goto LABEL_25;
          case 0xFFFFFC1D:
          case 0xFFFFFC1E:
          case 0xFFFFFC21:
            goto LABEL_23;
          case 0xFFFFFC1F:
LABEL_16:
            uint64_t v21 = v43.i64[1] - 96;
            std::__destroy_at[abi:ne180100]<std::__state<char>,0>((void *)(v43.i64[1] - 96));
            v43.i64[1] = v21;
            goto LABEL_23;
          case 0xFFFFFC20:
            *(void *)&long long v22 = 0xAAAAAAAAAAAAAAAALL;
            *((void *)&v22 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
            *(_OWORD *)&v41[64] = v22;
            *(_OWORD *)&v41[80] = v22;
            *(_OWORD *)&v41[32] = v22;
            *(_OWORD *)&v41[48] = v22;
            *(_OWORD *)uint64_t v41 = v22;
            *(_OWORD *)&v41[16] = v22;
            long long v23 = *(_OWORD *)(v14 - 80);
            *(_OWORD *)uint64_t v41 = *v19;
            *(_OWORD *)&v41[16] = v23;
            memset(&v41[32], 0, 24);
            std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v41[32], *(long long **)(v14 - 64), *(long long **)(v14 - 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v14 - 56) - *(void *)(v14 - 64)) >> 3));
            memset(&v41[56], 0, 24);
            std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(&v41[56], *(long long **)(v14 - 40), *(long long **)(v14 - 32), (uint64_t)(*(void *)(v14 - 32) - *(void *)(v14 - 40)) >> 4);
            uint64_t v24 = *v18;
            *(void *)&v41[85] = *(void *)(v14 - 11);
            *(void *)&v41[80] = v24;
            (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v18 + 24))(*v18, 1, v14 - 96);
            (*(void (**)(void, void, unsigned char *))(**(void **)&v41[80] + 24))(*(void *)&v41[80], 0, v41);
            uint64_t v25 = v43.i64[1];
            if (v43.i64[1] >= v44)
            {
              v43.i64[1] = (uint64_t)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(&v43, (uint64_t)v41);
              if (*(void *)&v41[56])
              {
                *(void *)&v41[64] = *(void *)&v41[56];
                operator delete(*(void **)&v41[56]);
              }
            }
            else
            {
              long long v26 = *(_OWORD *)&v41[16];
              *(_OWORD *)v43.i64[1] = *(_OWORD *)v41;
              *(_OWORD *)(v25 + 16) = v26;
              *(void *)(v25 + 32) = 0;
              *(void *)(v25 + 40) = 0;
              *(void *)(v25 + 48) = 0;
              *(void *)(v25 + 56) = 0;
              *(_OWORD *)(v25 + 32) = *(_OWORD *)&v41[32];
              *(void *)(v25 + 48) = *(void *)&v41[48];
              memset(&v41[32], 0, 24);
              *(void *)(v25 + 64) = 0;
              *(void *)(v25 + 72) = 0;
              *(_OWORD *)(v25 + 56) = *(_OWORD *)&v41[56];
              *(void *)(v25 + 72) = *(void *)&v41[72];
              memset(&v41[56], 0, 24);
              uint64_t v27 = *(void *)&v41[80];
              *(void *)(v25 + 85) = *(void *)&v41[85];
              *(void *)(v25 + 80) = v27;
              v43.i64[1] = v25 + 96;
            }
            if (*(void *)&v41[32])
            {
              *(void *)&v41[40] = *(void *)&v41[32];
              operator delete(*(void **)&v41[32]);
            }
LABEL_23:
            uint64_t v14 = v43.i64[1];
            ++v16;
            if (v43.i64[0] == v43.i64[1]) {
              goto LABEL_24;
            }
            continue;
          default:
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
        }
      }
      break;
    }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
  }
LABEL_24:
  uint64_t v28 = 0;
LABEL_25:
  *(void *)uint64_t v41 = &v43;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v41);
  return v28;
}

void sub_192079CD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  std::__state<char>::~__state(&a11);
  a11 = v16 - 112;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  _Unwind_Resume(a1);
}

void std::vector<std::sub_match<char const*>>::assign(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __u)
{
  xpc_object_t value = this->__end_cap_.__value_;
  std::vector<std::csub_match>::pointer begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3) >= __n)
  {
    std::vector<std::csub_match>::pointer end = this->__end_;
    std::vector<std::csub_match>::size_type v16 = end - begin;
    if (v16 >= __n) {
      std::vector<std::csub_match>::size_type v17 = __n;
    }
    else {
      std::vector<std::csub_match>::size_type v17 = end - begin;
    }
    if (v17)
    {
      size_t v18 = begin;
      do
      {
        *v18++ = *__u;
        --v17;
      }
      while (v17);
    }
    if (__n <= v16)
    {
      this->__end_ = &begin[__n];
    }
    else
    {
      long long v19 = &end[__n - v16];
      std::vector<std::csub_match>::size_type v20 = 24 * __n - 24 * v16;
      do
      {
        std::pair<const char *, const char *> v21 = __u->std::pair<const char *, const char *>;
        *(void *)&end->matched = *(void *)&__u->matched;
        end->std::pair<const char *, const char *> = v21;
        ++end;
        v20 -= 24;
      }
      while (v20);
      this->__end_ = v19;
    }
  }
  else
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      xpc_object_t value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    if (__n > 0xAAAAAAAAAAAAAAALL) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)value >> 3);
    std::vector<std::csub_match>::size_type v9 = 2 * v8;
    if (2 * v8 <= __n) {
      std::vector<std::csub_match>::size_type v9 = __n;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v9;
    }
    std::vector<std::sub_match<char const*>>::__vallocate[abi:ne180100](this, v10);
    std::vector<std::csub_match>::pointer v11 = this->__end_;
    int v12 = &v11[__n];
    std::vector<std::csub_match>::size_type v13 = 24 * __n;
    do
    {
      std::pair<const char *, const char *> v14 = __u->std::pair<const char *, const char *>;
      *(void *)&v11->matched = *(void *)&__u->matched;
      v11->std::pair<const char *, const char *> = v14;
      ++v11;
      v13 -= 24;
    }
    while (v13);
    this->__end_ = v12;
  }
}

char *std::vector<std::sub_match<char const*>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a1);
}

void *std::__state<char>::~__state(void *a1)
{
  int v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  int v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::vector<std::sub_match<char const*>>::resize(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __sz, std::vector<std::csub_match>::const_reference __x)
{
  std::vector<std::csub_match>::pointer begin = this->__begin_;
  std::vector<std::csub_match>::pointer end = this->__end_;
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
  unint64_t v8 = __sz - v7;
  if (__sz <= v7)
  {
    if (__sz < v7) {
      this->__end_ = &begin[__sz];
    }
  }
  else
  {
    xpc_object_t value = this->__end_cap_.__value_;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= v8)
    {
      uint64_t v25 = &end[v8];
      std::vector<std::csub_match>::size_type v26 = 24 * __sz - 8 * (((char *)end - (char *)this->__begin_) >> 3);
      do
      {
        std::pair<const char *, const char *> v27 = __x->std::pair<const char *, const char *>;
        *(void *)&end->matched = *(void *)&__x->matched;
        end->std::pair<const char *, const char *> = v27;
        ++end;
        v26 -= 24;
      }
      while (v26);
      this->__end_ = v25;
    }
    else
    {
      if (__sz > 0xAAAAAAAAAAAAAAALL) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3);
      std::vector<std::csub_match>::size_type v12 = 2 * v11;
      if (2 * v11 <= __sz) {
        std::vector<std::csub_match>::size_type v12 = __sz;
      }
      if (v11 >= 0x555555555555555) {
        unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v13 = v12;
      }
      std::pair<const char *, const char *> v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(v13);
      std::vector<std::csub_match>::size_type v16 = (std::sub_match<const char *> *)&v14[24 * v7];
      std::vector<std::csub_match>::size_type v17 = (std::sub_match<const char *> *)&v14[24 * __sz];
      size_t v18 = v16;
      std::vector<std::csub_match>::size_type v19 = 24 * __sz - 24 * v7;
      do
      {
        std::pair<const char *, const char *> v20 = __x->std::pair<const char *, const char *>;
        v18[1].first = *(const char **)&__x->matched;
        *size_t v18 = v20;
        size_t v18 = (std::pair<const char *, const char *> *)((char *)v18 + 24);
        v19 -= 24;
      }
      while (v19);
      std::pair<const char *, const char *> v21 = (std::sub_match<const char *> *)&v14[24 * v15];
      std::vector<std::csub_match>::pointer v23 = this->__begin_;
      long long v22 = this->__end_;
      if (v22 != this->__begin_)
      {
        do
        {
          std::pair<const char *, const char *> v24 = v22[-1].std::pair<const char *, const char *>;
          *(void *)&v16[-1].matched = *(void *)&v22[-1].matched;
          v16[-1].std::pair<const char *, const char *> = v24;
          --v16;
          --v22;
        }
        while (v22 != v23);
        long long v22 = this->__begin_;
      }
      this->__begin_ = v16;
      this->__end_ = v17;
      this->__end_cap_.__value_ = v21;
      if (v22)
      {
        operator delete(v22);
      }
    }
  }
}

void std::vector<std::pair<unsigned long,char const*>>::resize(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __sz)
{
  std::vector<std::pair<unsigned long, const char *>>::pointer begin = this->__begin_;
  std::vector<std::pair<unsigned long, const char *>>::pointer end = this->__end_;
  std::vector<std::pair<unsigned long, const char *>>::size_type v5 = end - this->__begin_;
  if (__sz <= v5)
  {
    if (__sz >= v5) {
      return;
    }
    size_t v18 = &begin[__sz];
    goto LABEL_19;
  }
  std::vector<std::pair<unsigned long, const char *>>::size_type v6 = __sz - v5;
  xpc_object_t value = this->__end_cap_.__value_;
  if (__sz - v5 <= value - end)
  {
    bzero(this->__end_, 16 * v6);
    size_t v18 = &end[v6];
LABEL_19:
    this->__end_ = v18;
    return;
  }
  if (__sz >> 60) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = (char *)value - (char *)begin;
  std::vector<std::pair<unsigned long, const char *>>::size_type v9 = v8 >> 3;
  if (v8 >> 3 <= __sz) {
    std::vector<std::pair<unsigned long, const char *>>::size_type v9 = __sz;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v9;
  }
  unint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>(v10);
  std::vector<std::csub_match>::size_type v12 = (std::pair<unsigned long, const char *> *)&v11[16 * v5];
  std::pair<const char *, const char *> v14 = (std::pair<unsigned long, const char *> *)&v11[16 * v13];
  bzero(v12, 16 * v6);
  uint64_t v15 = &v12[v6];
  std::vector<std::pair<unsigned long, const char *>>::pointer v17 = this->__begin_;
  std::vector<std::csub_match>::size_type v16 = this->__end_;
  if (v16 != this->__begin_)
  {
    do
    {
      v12[-1] = v16[-1];
      --v12;
      --v16;
    }
    while (v16 != v17);
    std::vector<std::csub_match>::size_type v16 = this->__begin_;
  }
  this->__begin_ = v12;
  this->__end_ = v15;
  this->__end_cap_.__value_ = v14;
  if (v16)
  {
    operator delete(v16);
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x192FECF60](exception, 12);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_19207A288(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x192FECF60](exception, 16);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_19207A2E0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(int64x2_t *a1, uint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((a1->i64[1] - a1->i64[0]) >> 5);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x2AAAAAAAAAAAAAALL) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 5) > v3) {
    unint64_t v3 = 0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 5);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1].i64[0] - a1->i64[0]) >> 5) >= 0x155555555555555) {
    unint64_t v6 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v3;
  }
  std::pair<const char *, const char *> v27 = a1 + 1;
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v7 = (char *)operator new(96 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  uint64_t v24 = 0;
  v25.i64[0] = 0;
  uint64_t v8 = &v7[96 * v2];
  long long v9 = *(_OWORD *)(a2 + 16);
  unint64_t v10 = &v7[96 * v6];
  *(_OWORD *)uint64_t v8 = *(_OWORD *)a2;
  *((_OWORD *)v8 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v9;
  *((_OWORD *)v8 + 2) = *(_OWORD *)(a2 + 32);
  *((void *)v8 + 6) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(v8 + 85) = *(void *)(a2 + 85);
  uint64_t v11 = *(void *)(a2 + 72);
  uint64_t v12 = *(void *)(a2 + 80);
  *((void *)v8 + 9) = 0;
  *((void *)v8 + 10) = v12;
  *(_OWORD *)(v8 + 56) = *(_OWORD *)(a2 + 56);
  *((void *)v8 + 9) = v11;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  uint64_t v13 = v8 + 96;
  v25.i64[1] = (uint64_t)(v8 + 96);
  std::vector<std::csub_match>::size_type v26 = v10;
  uint64_t v15 = a1->i64[0];
  unint64_t v14 = a1->u64[1];
  if (v14 == a1->i64[0])
  {
    int64x2_t v21 = vdupq_n_s64(v14);
  }
  else
  {
    uint64_t v16 = 0;
    do
    {
      std::vector<std::pair<unsigned long, const char *>>::pointer v17 = &v8[v16];
      uint64_t v18 = v14 + v16;
      long long v19 = *(_OWORD *)(v14 + v16 - 80);
      *((_OWORD *)v17 - 6) = *(_OWORD *)(v14 + v16 - 96);
      *((_OWORD *)v17 - 5) = v19;
      *((void *)v17 - 7) = 0;
      *((void *)v17 - 6) = 0;
      *((void *)v17 - 8) = 0;
      *((_OWORD *)v17 - 4) = *(_OWORD *)(v14 + v16 - 64);
      *((void *)v17 - 6) = *(void *)(v14 + v16 - 48);
      *(void *)(v18 - 64) = 0;
      *(void *)(v18 - 56) = 0;
      *(void *)(v18 - 48) = 0;
      *((void *)v17 - 5) = 0;
      *((void *)v17 - 4) = 0;
      *((void *)v17 - 3) = 0;
      *(_OWORD *)(v17 - 40) = *(_OWORD *)(v14 + v16 - 40);
      *((void *)v17 - 3) = *(void *)(v14 + v16 - 24);
      *(void *)(v18 - 40) = 0;
      *(void *)(v18 - 32) = 0;
      *(void *)(v18 - 24) = 0;
      uint64_t v20 = *(void *)(v14 + v16 - 16);
      *(void *)(v17 - 1ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = *(void *)(v14 + v16 - 11);
      *((void *)v17 - 2) = v20;
      v16 -= 96;
    }
    while (v14 + v16 != v15);
    int64x2_t v21 = *a1;
    v8 += v16;
    uint64_t v13 = (char *)v25.i64[1];
    unint64_t v10 = v26;
  }
  a1->i64[0] = (uint64_t)v8;
  a1->i64[1] = (uint64_t)v13;
  int64x2_t v25 = v21;
  long long v22 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v10;
  std::vector<std::csub_match>::size_type v26 = v22;
  uint64_t v24 = v21.i64[0];
  std::__split_buffer<std::__state<char>>::~__split_buffer((uint64_t)&v24);
  return v13;
}

void std::__destroy_at[abi:ne180100]<std::__state<char>,0>(void *a1)
{
  unint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
}

uint64_t std::__split_buffer<std::__state<char>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 96;
    std::__destroy_at[abi:ne180100]<std::__state<char>,0>((void *)(i - 96));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>(unint64_t a1)
{
  if (a1 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a1);
}

char *std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = std::vector<std::sub_match<char const*>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2;
      *(void *)(v7 + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v7 = v8;
      v7 += 24;
      a2 = (long long *)((char *)a2 + 24);
    }
    *((void *)v6 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v7;
  }
  return result;
}

void sub_19207A604(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = (_OWORD *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v7;
  }
  return result;
}

void sub_19207A678(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    std::vector<std::pair<unsigned long, const char *>>::size_type v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 12;
        std::__destroy_at[abi:ne180100]<std::__state<char>,0>(v4);
      }
      while (v4 != v2);
      std::vector<std::pair<unsigned long, const char *>>::size_type v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(uint64_t a1, char *a2, char *a3)
{
  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3) {
      goto LABEL_139;
    }
    uint64_t v5 = (uint64_t)(a2[1] == 94 ? a2 + 2 : a2 + 1);
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list((std::basic_regex<char> *)a1, a2[1] == 94);
    if ((char *)v5 == a3) {
      goto LABEL_139;
    }
    uint64_t v7 = (uint64_t)started;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *(unsigned char *)v5 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)started, 93);
      ++v5;
    }
    if ((char *)v5 == a3) {
      goto LABEL_139;
    }
    BOOL v40 = a3 - 4;
    while (1)
    {
      long long v8 = (char *)v5;
      long long v9 = a3;
      if ((char *)v5 == a3) {
        goto LABEL_117;
      }
      int v10 = *(unsigned __int8 *)v5;
      long long v9 = (char *)v5;
      if (v10 == 93) {
        goto LABEL_117;
      }
      uint64_t v11 = 0;
      v43[0] = 0;
      v43[1] = 0;
      unint64_t v44 = 0;
      uint64_t v12 = 0;
      long long v9 = (char *)v5;
      if ((char *)(v5 + 1) != a3 && v10 == 91)
      {
        int v13 = *(unsigned __int8 *)(v5 + 1);
        switch(v13)
        {
          case '.':
            long long v9 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, (char *)(v5 + 2), a3, (uint64_t)v43);
            uint64_t v12 = (void *)HIBYTE(v44);
            uint64_t v11 = v43[1];
            break;
          case ':':
            if ((uint64_t)&a3[-v5 - 2] < 2) {
              goto LABEL_138;
            }
            for (unint64_t i = 0; *(unsigned char *)(v5 + i + 2) != 58 || *(unsigned char *)(v5 + i + 3) != 93; ++i)
            {
              if (&v40[-v5] == (char *)i) {
                goto LABEL_138;
              }
            }
            uint64_t v18 = (char *)(v5 + i + 2);
            if (v18 == a3) {
LABEL_138:
            }
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
            int v19 = *(_DWORD *)(a1 + 24);
            memset(__p, 170, sizeof(__p));
            std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, (char *)(v5 + 2), v18, i);
            uint64_t v20 = (char *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) >= 0) {
              int64x2_t v21 = __p;
            }
            else {
              int64x2_t v21 = (void **)__p[0];
            }
            if (SHIBYTE(__p[2]) < 0) {
              uint64_t v20 = (char *)__p[1];
            }
            (*(void (**)(void, void **, char *))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), v21, &v20[(void)v21]);
            if (SHIBYTE(__p[2]) >= 0) {
              long long v22 = __p;
            }
            else {
              long long v22 = (void **)__p[0];
            }
            std::regex_traits<char>::char_class_type classname = std::__get_classname((const char *)v22, v19 & 1);
            if (SHIBYTE(__p[2]) < 0) {
              operator delete(__p[0]);
            }
            if (!classname) {
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
            }
            char v24 = 0;
            *(_DWORD *)(v7 + 160) |= classname;
            goto LABEL_113;
          case '=':
            if ((uint64_t)&a3[-v5 - 2] < 2) {
              goto LABEL_138;
            }
            for (unint64_t i = 0; *(unsigned char *)(v5 + i + 2) != 61 || *(unsigned char *)(v5 + i + 3) != 93; ++i)
            {
              if (&v40[-v5] == (char *)i) {
                goto LABEL_138;
              }
            }
            int64x2_t v25 = (char *)(v5 + i + 2);
            if (v25 == a3) {
              goto LABEL_138;
            }
            memset(__p, 170, sizeof(__p));
            std::regex_traits<char>::__lookup_collatename<char const*>((uint64_t)__p, a1, (char *)(v5 + 2), v25);
            if (SHIBYTE(__p[2]) < 0)
            {
              std::vector<std::csub_match>::size_type v26 = (char *)__p[1];
              if (!__p[1]) {
LABEL_140:
              }
                std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
              memset(v45, 170, sizeof(v45));
              std::pair<const char *, const char *> v27 = (char *)__p[0];
            }
            else
            {
              std::vector<std::csub_match>::size_type v26 = (char *)HIBYTE(__p[2]);
              if (!HIBYTE(__p[2])) {
                goto LABEL_140;
              }
              std::pair<const char *, const char *> v27 = (char *)__p;
              memset(v45, 170, sizeof(v45));
            }
            std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(v45, a1, v27, &v26[(void)v27]);
            int v29 = (void *)HIBYTE(v45[2]);
            if (SHIBYTE(v45[2]) < 0) {
              int v29 = v45[1];
            }
            if (v29)
            {
              std::__bracket_expression<char,std::regex_traits<char>>::__add_equivalence[abi:ne180100]((void *)v7, (uint64_t)v45);
            }
            else
            {
              uint64_t v30 = (void *)HIBYTE(__p[2]);
              if (SHIBYTE(__p[2]) < 0) {
                uint64_t v30 = __p[1];
              }
              if (v30 == (void *)2)
              {
                if (SHIBYTE(__p[2]) >= 0) {
                  char v37 = __p;
                }
                else {
                  char v37 = (void **)__p[0];
                }
                std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v7, *(char *)v37, *((char *)v37 + 1));
              }
              else
              {
                if (v30 != (void *)1) {
                  std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
                }
                if (SHIBYTE(__p[2]) >= 0) {
                  uint64_t v31 = __p;
                }
                else {
                  uint64_t v31 = (void **)__p[0];
                }
                std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, *(char *)v31);
              }
            }
            if (SHIBYTE(v45[2]) < 0) {
              operator delete(v45[0]);
            }
            if (SHIBYTE(__p[2]) < 0) {
              operator delete(__p[0]);
            }
            char v24 = 0;
LABEL_113:
            v5 += i + 4;
            unsigned int v35 = v8;
            goto LABEL_114;
          default:
            uint64_t v11 = 0;
            uint64_t v12 = 0;
            long long v9 = (char *)v5;
            break;
        }
      }
      uint64_t v5 = *(_DWORD *)(a1 + 24) & 0x1F0;
      if ((char)v12 >= 0) {
        uint64_t v11 = v12;
      }
      if (!v11)
      {
        if ((*(_DWORD *)(a1 + 24) & 0x1B0 | 0x40) == 0x40)
        {
          int v15 = *v9;
          if (v15 == 92)
          {
            uint64_t v16 = v9 + 1;
            if ((*(_DWORD *)(a1 + 24) & 0x1F0) != 0) {
              std::vector<std::pair<unsigned long, const char *>>::pointer v17 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v16, a3, (uint64_t *)v43);
            }
            else {
              std::vector<std::pair<unsigned long, const char *>>::pointer v17 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)v16, (unsigned __int8 *)a3, (uint64_t)v43, v7);
            }
            long long v9 = v17;
            goto LABEL_79;
          }
        }
        else
        {
          LOBYTE(v15) = *v9;
        }
        if ((char)v12 < 0)
        {
          uint64_t v28 = (void **)v43[0];
          v43[1] = (void *)1;
        }
        else
        {
          HIBYTE(v44) = 1;
          uint64_t v28 = v43;
        }
        *(unsigned char *)uint64_t v28 = v15;
        *((unsigned char *)v28 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
        ++v9;
      }
LABEL_79:
      if (v9 != a3)
      {
        int v32 = *v9;
        if (v32 != 93)
        {
          uint64_t v34 = v9 + 1;
          if (v9 + 1 != a3 && v32 == 45 && *v34 != 93)
          {
            memset(__p, 0, sizeof(__p));
            unsigned int v35 = v9 + 2;
            if (v9 + 2 != a3 && *v34 == 91 && *v35 == 46)
            {
              uint64_t v36 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, v9 + 3, a3, (uint64_t)__p);
              goto LABEL_123;
            }
            if ((v5 | 0x40) == 0x40)
            {
              LODWORD(v34) = *v34;
              if (v34 == 92)
              {
                if (v5) {
                  uint64_t v36 = (uint64_t)std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v9 + 2, a3, (uint64_t *)__p);
                }
                else {
                  uint64_t v36 = (uint64_t)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)v9 + 2, (unsigned __int8 *)a3, (uint64_t)__p, v7);
                }
LABEL_123:
                unsigned int v35 = (char *)v36;
LABEL_124:
                *(_OWORD *)uint64_t v45 = *(_OWORD *)v43;
                BOOL v38 = v44;
                v43[1] = 0;
                unint64_t v44 = 0;
                *(_OWORD *)uint64_t v41 = *(_OWORD *)__p;
                int v42 = __p[2];
                v43[0] = 0;
                v45[2] = v38;
                memset(__p, 0, sizeof(__p));
                std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](v7, (char *)v45, (char *)v41);
                if (SHIBYTE(v42) < 0) {
                  operator delete(v41[0]);
                }
                if (SHIBYTE(v45[2]) < 0) {
                  operator delete(v45[0]);
                }
                if (SHIBYTE(__p[2]) < 0) {
                  operator delete(__p[0]);
                }
                char v24 = 1;
LABEL_114:
                if (SHIBYTE(v44) < 0) {
                  operator delete(v43[0]);
                }
                long long v9 = v35;
                if ((v24 & 1) == 0) {
                  goto LABEL_118;
                }
                goto LABEL_117;
              }
            }
            else
            {
              LOBYTE(v34) = *v34;
            }
            HIBYTE(__p[2]) = 1;
            LOWORD(__p[0]) = v34;
            goto LABEL_124;
          }
        }
      }
      if (SHIBYTE(v44) < 0)
      {
        if (v43[1])
        {
          if (v43[1] == (void *)1)
          {
            unint64_t v33 = (void **)v43[0];
LABEL_88:
            std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, *(char *)v33);
LABEL_99:
            char v24 = 1;
            unsigned int v35 = v9;
            goto LABEL_114;
          }
          unint64_t v33 = (void **)v43[0];
LABEL_98:
          std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v7, *(char *)v33, *((char *)v33 + 1));
          goto LABEL_99;
        }
        operator delete(v43[0]);
      }
      else if (HIBYTE(v44))
      {
        unint64_t v33 = v43;
        if (HIBYTE(v44) == 1) {
          goto LABEL_88;
        }
        goto LABEL_98;
      }
LABEL_117:
      uint64_t v5 = (uint64_t)v9;
LABEL_118:
      if ((char *)v5 == v8)
      {
        if (v8 != a3)
        {
          if (*v8 == 45)
          {
            std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, 45);
            ++v8;
          }
          if (v8 != a3 && *v8 == 93) {
            return v8 + 1;
          }
        }
LABEL_139:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
      }
    }
  }
  return a2;
}

void sub_19207AE10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(std::basic_regex<char> *this)
{
  if ((this->__flags_ & 2) == 0)
  {
    unint64_t v2 = (std::__node<char> *)operator new(0x18uLL);
    unsigned int v3 = this->__marked_count_ + 1;
    this->__marked_count_ = v3;
    std::vector<std::pair<unsigned long, const char *>>::pointer end = this->__end_;
    first = end->__first_;
    v2->__vftable = (std::__node<char>_vtbl *)&unk_1EE2F9128;
    v2[1].__vftable = (std::__node<char>_vtbl *)first;
    LODWORD(v2[2].__vftable) = v3;
    end->__first_ = v2;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
  }
}

void std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(std::basic_regex<char> *this, unsigned int a2)
{
  if ((this->__flags_ & 2) == 0)
  {
    uint64_t v4 = (std::__node<char> *)operator new(0x18uLL);
    std::vector<std::pair<unsigned long, const char *>>::pointer end = this->__end_;
    first = end->__first_;
    v4->__vftable = (std::__node<char>_vtbl *)&unk_1EE2F90F8;
    v4[1].__vftable = (std::__node<char>_vtbl *)first;
    LODWORD(v4[2].__vftable) = a2;
    end->__first_ = v4;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x192FECF60](exception, 11);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_19207AFB0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  unint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  unint64_t v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x192FECF60](exception, 3);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_19207B0F0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t *a4)
{
  uint64_t v4 = a2;
  if (a2 != a3)
  {
    uint64_t v5 = *a2;
    std::basic_regex<char>::value_type v6 = v5;
    if ((char)v5 > 109)
    {
      switch((char)v5)
      {
        case 'n':
          if (!a4)
          {
            std::basic_regex<char>::value_type v6 = 10;
            goto LABEL_67;
          }
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((unsigned char *)a4 + 23) = 1;
          }
          __int16 v16 = 10;
          goto LABEL_79;
        case 'r':
          if (!a4)
          {
            std::basic_regex<char>::value_type v6 = 13;
            goto LABEL_67;
          }
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((unsigned char *)a4 + 23) = 1;
          }
          __int16 v16 = 13;
          goto LABEL_79;
        case 't':
          if (!a4)
          {
            std::basic_regex<char>::value_type v6 = 9;
            goto LABEL_67;
          }
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((unsigned char *)a4 + 23) = 1;
          }
          __int16 v16 = 9;
          goto LABEL_79;
        case 'u':
          if (v4 + 1 != a3)
          {
            int v7 = v4[1];
            if ((v7 & 0xF8) == 0x30 || (v7 & 0xFE) == 0x38 || (v7 | 0x20u) - 97 < 6)
            {
              v4 += 2;
              if (v4 != a3)
              {
                int v8 = *v4;
                if ((v8 & 0xF8) == 0x30 || (v8 & 0xFE) == 0x38 || (v8 | 0x20u) - 97 < 6) {
                  goto LABEL_27;
                }
              }
            }
          }
          goto LABEL_89;
        case 'v':
          if (!a4)
          {
            std::basic_regex<char>::value_type v6 = 11;
            goto LABEL_67;
          }
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((unsigned char *)a4 + 23) = 1;
          }
          __int16 v16 = 11;
          break;
        case 'x':
LABEL_27:
          if (v4 + 1 == a3) {
            goto LABEL_89;
          }
          unsigned __int8 v9 = v4[1];
          char v10 = -48;
          if ((v9 & 0xF8) == 0x30 || (v9 & 0xFE) == 0x38) {
            goto LABEL_32;
          }
          v9 |= 0x20u;
          if ((v9 - 97) >= 6u) {
            goto LABEL_89;
          }
          char v10 = -87;
LABEL_32:
          if (v4 + 2 == a3) {
            goto LABEL_89;
          }
          unsigned __int8 v11 = v4[2];
          char v12 = -48;
          if ((v11 & 0xF8) == 0x30 || (v11 & 0xFE) == 0x38) {
            goto LABEL_37;
          }
          v11 |= 0x20u;
          if ((v11 - 97) >= 6u) {
            goto LABEL_89;
          }
          char v12 = -87;
LABEL_37:
          std::basic_regex<char>::value_type v13 = v11 + 16 * (v9 + v10) + v12;
          if (a4)
          {
            if (*((char *)a4 + 23) < 0)
            {
              a4[1] = 1;
              a4 = (uint64_t *)*a4;
            }
            else
            {
              *((unsigned char *)a4 + 23) = 1;
            }
            *(unsigned char *)a4 = v13;
            *((unsigned char *)a4 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
          }
          else
          {
            std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v13);
          }
          v4 += 3;
          return v4;
        default:
          goto LABEL_51;
      }
      goto LABEL_79;
    }
    if ((char)v5 == 48)
    {
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 0;
        return ++v4;
      }
      std::basic_regex<char>::value_type v6 = 0;
      goto LABEL_67;
    }
    if ((char)v5 != 99)
    {
      if ((char)v5 == 102)
      {
        if (a4)
        {
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((unsigned char *)a4 + 23) = 1;
          }
          __int16 v16 = 12;
LABEL_79:
          *(_WORD *)a4 = v16;
          return ++v4;
        }
        std::basic_regex<char>::value_type v6 = 12;
LABEL_67:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v6);
        return ++v4;
      }
LABEL_51:
      if ((char)v5 != 95 && ((char)v5 < 0 || (a1->__traits_.__ct_->__tab_[v5] & 0x500) == 0))
      {
        if (a4)
        {
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((unsigned char *)a4 + 23) = 1;
          }
          *(unsigned char *)a4 = v5;
          *((unsigned char *)a4 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
          return ++v4;
        }
        goto LABEL_67;
      }
LABEL_89:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    }
    if (v4 + 1 == a3) {
      goto LABEL_89;
    }
    unsigned __int8 v14 = v4[1];
    if (((v14 & 0xDF) - 65) > 0x19u) {
      goto LABEL_89;
    }
    std::basic_regex<char>::value_type v15 = v14 & 0x1F;
    if (a4)
    {
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(unsigned char *)a4 = v15;
      *((unsigned char *)a4 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v15);
    }
    v4 += 2;
  }
  return v4;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_char(std::basic_regex<char> *this, std::basic_regex<char>::value_type __c)
{
  uint64_t v2 = __c;
  std::basic_regex<_CharT, _Traits>::flag_type flags = this->__flags_;
  if (flags)
  {
    int v8 = (char *)operator new(0x30uLL);
    first = this->__end_->__first_;
    *(void *)int v8 = &unk_1EE2F8870;
    *((void *)v8 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = first;
    std::locale::locale((std::locale *)v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    v8[40] = ((uint64_t (*)(const std::ctype<char> *, uint64_t))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v2);
LABEL_6:
    this->__end_->__first_ = (std::__node<char> *)v8;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    int v8 = (char *)operator new(0x30uLL);
    char v10 = this->__end_->__first_;
    *(void *)int v8 = &unk_1EE2F8900;
    *((void *)v8 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v10;
    std::locale::locale((std::locale *)v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    v8[40] = v2;
    goto LABEL_6;
  }
  uint64_t v5 = (std::__node<char> *)operator new(0x18uLL);
  std::vector<std::pair<unsigned long, const char *>>::pointer end = this->__end_;
  int v7 = end->__first_;
  v5->__vftable = (std::__node<char>_vtbl *)&unk_1EE2F86C8;
  v5[1].__vftable = (std::__node<char>_vtbl *)v7;
  LOBYTE(v5[2].__vftable) = v2;
  end->__first_ = v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void sub_19207B634(_Unwind_Exception *a1)
{
  std::locale::~locale(v2);
  uint64_t v4 = v1[1];
  if (v4) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x192FECF60](exception, 4);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_19207B6E0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(std::basic_regex<char> *this, int __i)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags = this->__flags_;
  if (flags)
  {
    int v8 = (std::locale *)operator new(0x30uLL);
    unsigned __int8 v9 = v8;
    v8[1].__locale_ = (std::locale::__imp *)this->__end_->__first_;
    char v10 = (std::locale::__imp *)&unk_1EE2F8758;
LABEL_6:
    v8->__locale_ = v10;
    std::locale::locale(v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)&v9[3].__locale_ = *(_OWORD *)&this->__traits_.__ct_;
    LODWORD(v9[5].__locale_) = __i;
    this->__end_->__first_ = (std::__node<char> *)v9;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    int v8 = (std::locale *)operator new(0x30uLL);
    unsigned __int8 v9 = v8;
    v8[1].__locale_ = (std::locale::__imp *)this->__end_->__first_;
    char v10 = (std::locale::__imp *)&unk_1EE2F8840;
    goto LABEL_6;
  }
  uint64_t v5 = (std::__node<char> *)operator new(0x18uLL);
  std::vector<std::pair<unsigned long, const char *>>::pointer end = this->__end_;
  first = end->__first_;
  v5->__vftable = (std::__node<char>_vtbl *)&unk_1EE2F7EF8;
  v5[1].__vftable = (std::__node<char>_vtbl *)first;
  LODWORD(v5[2].__vftable) = __i;
  end->__first_ = v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

std::locale *std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EE2F8870;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EE2F8870;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  operator delete(a1);
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (uint64_t v4 = result,
        uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(result + 24) + 40))(*(void *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    uint64_t v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(void *)(a2 + 16);
    uint64_t v5 = *(void *)(v4 + 8);
  }
  *(void *)(a2 + 80) = v5;
  return result;
}

std::locale *std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EE2F8900;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EE2F8900;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  operator delete(a1);
}

uint64_t std::__match_char_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 80) = v3;
  return result;
}

void (__cdecl ***std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_char<char>::~__match_char(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

uint64_t std::__match_char<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 80) = v3;
  return result;
}

std::locale *std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EE2F8758;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EE2F8758;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  operator delete(a1);
}

uint64_t std::__back_ref_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (*(unsigned char *)(v3 + 16))
  {
    uint64_t v4 = *(void *)(v3 + 8) - *(void *)v3;
    uint64_t v5 = *(void *)(a2 + 16);
    if (*(void *)(a2 + 24) - v5 >= v4)
    {
      uint64_t v7 = result;
      if (v4 < 1)
      {
LABEL_9:
        *(_DWORD *)a2 = -994;
        *(void *)(a2 + 16) = v5 + v4;
        uint64_t v6 = *(void *)(v7 + 8);
        goto LABEL_10;
      }
      uint64_t v8 = 0;
      while (1)
      {
        int v9 = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), *(char *)(*(void *)v3 + v8));
        uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), *(char *)(*(void *)(a2 + 16) + v8));
        if (v9 != result) {
          break;
        }
        if (v4 == ++v8)
        {
          uint64_t v5 = *(void *)(a2 + 16);
          goto LABEL_9;
        }
      }
    }
  }
  uint64_t v6 = 0;
  *(_DWORD *)a2 = -993;
LABEL_10:
  *(void *)(a2 + 80) = v6;
  return result;
}

std::locale *std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EE2F8840;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EE2F8840;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  operator delete(a1);
}

uint64_t std::__back_ref_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(result + 40) - 1;
  uint64_t v3 = *(void *)(a2 + 32);
  if (*(unsigned char *)(v3 + 24 * v2 + 16))
  {
    uint64_t v4 = (unsigned __int8 **)(v3 + 24 * v2);
    uint64_t v5 = *v4;
    uint64_t v6 = v4[1] - *v4;
    uint64_t v7 = *(void *)(a2 + 16);
    if (*(void *)(a2 + 24) - v7 >= v6)
    {
      if (v6 < 1)
      {
LABEL_8:
        *(_DWORD *)a2 = -994;
        *(void *)(a2 + 16) = v7 + v6;
        uint64_t v8 = *(void *)(result + 8);
        goto LABEL_9;
      }
      uint64_t v9 = v6;
      char v10 = *(unsigned __int8 **)(a2 + 16);
      while (1)
      {
        int v12 = *v5++;
        int v11 = v12;
        int v13 = *v10++;
        if (v11 != v13) {
          break;
        }
        if (!--v9) {
          goto LABEL_8;
        }
      }
    }
  }
  uint64_t v8 = 0;
  *(_DWORD *)a2 = -993;
LABEL_9:
  *(void *)(a2 + 80) = v8;
  return result;
}

void (__cdecl ***std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  unsigned int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__back_ref<char>::~__back_ref(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  unsigned int v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

unsigned int *std::__back_ref<char>::__exec(unsigned int *result, uint64_t a2)
{
  unint64_t v2 = result[4];
  uint64_t v3 = *(void *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a2 + 40) - v3) >> 3) < v2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  unsigned int v5 = v2 - 1;
  if (*(unsigned char *)(v3 + 24 * v5 + 16)
    && (uint64_t v6 = result,
        uint64_t v7 = v3 + 24 * v5,
        uint64_t result = *(unsigned int **)v7,
        int64_t v8 = *(void *)(v7 + 8) - *(void *)v7,
        uint64_t v9 = *(void *)(a2 + 16),
        *(void *)(a2 + 24) - v9 >= v8)
    && (uint64_t result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !result))
  {
    *(_DWORD *)a2 = -994;
    *(void *)(a2 + 16) = v9 + v8;
    uint64_t v10 = *((void *)v6 + 1);
  }
  else
  {
    uint64_t v10 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(void *)(a2 + 80) = v10;
  return result;
}

std::__bracket_expression<char, std::regex_traits<char>> *__cdecl std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(std::basic_regex<char> *this, BOOL __negate)
{
  uint64_t v4 = (char *)operator new(0xB0uLL);
  first = this->__end_->__first_;
  unsigned int flags_low = LOBYTE(this->__flags_);
  char v7 = flags_low & 1;
  int v8 = (flags_low >> 3) & 1;
  *((void *)v4 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = first;
  std::locale::locale((std::locale *)v4 + 2, &this->__traits_.__loc_);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)&this->__traits_.__ct_;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *(_OWORD *)(v4 + 152) = 0u;
  v4[168] = __negate;
  v4[169] = v7;
  v4[170] = v8;
  std::locale::locale(&v13, (const std::locale *)v4 + 2);
  std::locale::name(&v14, &v13);
  std::string::size_type size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v14.__r_.__value_.__l.__size_;
  }
  if (size == 1)
  {
    uint64_t v10 = (std::string *)v14.__r_.__value_.__r.__words[0];
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v10 = &v14;
    }
    BOOL v11 = v10->__r_.__value_.__s.__data_[0] != 67;
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_9;
    }
  }
  else
  {
    BOOL v11 = 1;
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
LABEL_9:
    }
      operator delete(v14.__r_.__value_.__l.__data_);
  }
  std::locale::~locale(&v13);
  v4[171] = v11;
  this->__end_->__first_ = (std::__node<char> *)v4;
  this->__end_ = (std::__owns_one_state<char> *)v4;
  return (std::__bracket_expression<char, std::regex_traits<char>> *)v4;
}

void sub_19207C368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  std::locale::~locale((std::locale *)&a9);
  a10 = v10 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  std::basic_regex<char>::value_type v15 = (void *)v10[14];
  if (v15)
  {
    v10[15] = v15;
    operator delete(v15);
  }
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  __int16 v16 = (void *)v10[8];
  if (v16)
  {
    v10[9] = v16;
    operator delete(v16);
  }
  std::vector<std::pair<unsigned long, const char *>>::pointer v17 = *v13;
  if (*v13)
  {
    v10[6] = v17;
    operator delete(v17);
  }
  std::locale::~locale(v12);
  void *v10 = v11;
  uint64_t v18 = v10[1];
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  if (*(unsigned char *)(a1 + 169))
  {
    char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
    unsigned int v5 = *(unsigned char **)(a1 + 48);
    unint64_t v4 = *(void *)(a1 + 56);
    if ((unint64_t)v5 >= v4)
    {
      uint64_t v6 = (unint64_t *)(a1 + 40);
      unint64_t v7 = *(void *)(a1 + 40);
      int v8 = &v5[-v7];
      uint64_t v9 = (uint64_t)&v5[-v7 + 1];
      if (v9 >= 0)
      {
        unint64_t v10 = v4 - v7;
        if (2 * v10 > v9) {
          uint64_t v9 = 2 * v10;
        }
        if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v11 = v9;
        }
        if (v11) {
          int v12 = operator new(v11);
        }
        else {
          int v12 = 0;
        }
        uint64_t v20 = &v8[(void)v12];
        int64x2_t v21 = (char *)v12 + v11;
        v8[(void)v12] = v2;
        uint64_t v19 = (uint64_t)&v8[(void)v12 + 1];
        if (v5 != (unsigned char *)v7)
        {
          long long v22 = &v5[~v7];
          do
          {
            char v23 = *--v5;
            (v22--)[(void)v12] = v23;
          }
          while (v5 != (unsigned char *)v7);
LABEL_45:
          unsigned int v5 = (unsigned char *)*v6;
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    goto LABEL_22;
  }
  uint64_t v6 = (unint64_t *)(a1 + 40);
  unsigned int v5 = *(unsigned char **)(a1 + 48);
  unint64_t v13 = *(void *)(a1 + 56);
  if (!*(unsigned char *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v13)
    {
      unint64_t v24 = *v6;
      int64x2_t v25 = &v5[-*v6];
      unint64_t v26 = (unint64_t)(v25 + 1);
      if ((uint64_t)(v25 + 1) >= 0)
      {
        unint64_t v27 = v13 - v24;
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v28 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v28 = v26;
        }
        if (v28) {
          int v12 = operator new(v28);
        }
        else {
          int v12 = 0;
        }
        uint64_t v20 = &v25[(void)v12];
        int64x2_t v21 = (char *)v12 + v28;
        v25[(void)v12] = v2;
        uint64_t v19 = (uint64_t)&v25[(void)v12 + 1];
        if (v5 != (unsigned char *)v24)
        {
          uint64_t v31 = &v5[~v24];
          do
          {
            char v32 = *--v5;
            (v31--)[(void)v12] = v32;
          }
          while (v5 != (unsigned char *)v24);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    *unsigned int v5 = v2;
    uint64_t v19 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v13) {
    goto LABEL_22;
  }
  unint64_t v14 = *v6;
  std::basic_regex<char>::value_type v15 = &v5[-*v6];
  unint64_t v16 = (unint64_t)(v15 + 1);
  if ((uint64_t)(v15 + 1) < 0) {
    goto LABEL_50;
  }
  unint64_t v17 = v13 - v14;
  if (2 * v17 > v16) {
    unint64_t v16 = 2 * v17;
  }
  if (v17 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v18 = v16;
  }
  if (v18) {
    int v12 = operator new(v18);
  }
  else {
    int v12 = 0;
  }
  uint64_t v20 = &v15[(void)v12];
  int64x2_t v21 = (char *)v12 + v18;
  v15[(void)v12] = v2;
  uint64_t v19 = (uint64_t)&v15[(void)v12 + 1];
  if (v5 != (unsigned char *)v14)
  {
    int v29 = &v5[~v14];
    do
    {
      char v30 = *--v5;
      (v29--)[(void)v12] = v30;
    }
    while (v5 != (unsigned char *)v14);
    goto LABEL_45;
  }
LABEL_46:
  int v12 = v20;
LABEL_47:
  *(void *)(a1 + 40) = v12;
  *(void *)(a1 + 48) = v19;
  *(void *)(a1 + 56) = v21;
  if (v5) {
    operator delete(v5);
  }
LABEL_49:
  *(void *)(a1 + 48) = v19;
}

void std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  uint64_t v1 = std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(a1);

  operator delete(v1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__exec(const std::__bracket_expression<char, std::regex_traits<char>> *this, std::__bracket_expression<char, std::regex_traits<char>>::__state *a2)
{
  current = a2->__current_;
  last = a2->__last_;
  if (current == last)
  {
    uint64_t v11 = 0;
    BOOL negate = this->__negate_;
LABEL_175:
    int v86 = negate;
    goto LABEL_176;
  }
  if (!this->__might_have_digraph_ || current + 1 == last) {
    goto LABEL_35;
  }
  char v6 = *current;
  LOBYTE(v88) = *current;
  char v7 = current[1];
  HIBYTE(v88) = v7;
  if (this->__icase_)
  {
    LOBYTE(v88) = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v6);
    HIBYTE(v88) = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v7);
  }
  __s.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  __s.__r_.__value_.__r.__words[2] = 0x2AAAAAAAAAAAAAALL;
  __s.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAA00AAAALL;
  LOWORD(__s.__r_.__value_.__l.__data_) = v88;
  std::__get_collation_name(&v89, (const char *)&__s);
  std::string __p = v89;
  std::string::size_type size = HIBYTE(v89.__r_.__value_.__r.__words[2]);
  int v9 = SHIBYTE(v89.__r_.__value_.__r.__words[2]);
  if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v89.__r_.__value_.__l.__size_;
  }
  if (size) {
    goto LABEL_9;
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    unint64_t v10 = (void *)__s.__r_.__value_.__r.__words[0];
    if (__s.__r_.__value_.__l.__size_ >= 3)
    {
LABEL_11:
      operator delete(v10);
      goto LABEL_15;
    }
LABEL_68:
    (*(void (**)(std::string *__return_ptr))(*(void *)this->__traits_.__col_ + 32))(&v89);
    if (v9 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = v89;
    if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
    {
      if (__p.__r_.__value_.__l.__size_ != 1 && __p.__r_.__value_.__l.__size_ != 12)
      {
        *__p.__r_.__value_.__l.__data_ = 0;
        __p.__r_.__value_.__l.__size_ = 0;
        goto LABEL_9;
      }
    }
    else if (HIBYTE(v89.__r_.__value_.__r.__words[2]) != 12 && HIBYTE(v89.__r_.__value_.__r.__words[2]) != 1)
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
LABEL_9:
      if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_15;
      }
      unint64_t v10 = (void *)__s.__r_.__value_.__r.__words[0];
      goto LABEL_11;
    }
    std::string::operator=(&__p, &__s);
    goto LABEL_9;
  }
  if (HIBYTE(__s.__r_.__value_.__r.__words[2]) < 3u) {
    goto LABEL_68;
  }
LABEL_15:
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((unsigned char *)&__p.__r_.__value_.__s + 23)) {
      goto LABEL_17;
    }
LABEL_35:
    int v86 = 0;
    uint64_t v11 = 1;
    goto LABEL_36;
  }
  std::string::size_type v22 = __p.__r_.__value_.__l.__size_;
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v22) {
    goto LABEL_35;
  }
LABEL_17:
  std::vector<std::pair<char, char>>::pointer begin = this->__digraphs_.__begin_;
  uint64_t v14 = (char *)this->__digraphs_.__end_ - (char *)begin;
  if (v14)
  {
    uint64_t v15 = v14 >> 1;
    if ((unint64_t)(v14 >> 1) <= 1) {
      uint64_t v15 = 1;
    }
    p_second = &begin->second;
    do
    {
      if (v88 == *(p_second - 1) && HIBYTE(v88) == *p_second) {
        goto LABEL_183;
      }
      p_second += 2;
      --v15;
    }
    while (v15);
  }
  if (!this->__collate_ || this->__ranges_.__begin_ == this->__ranges_.__end_)
  {
    int v86 = 0;
LABEL_117:
    if (this->__equivalences_.__begin_ == this->__equivalences_.__end_) {
      goto LABEL_147;
    }
    memset(&__s, 170, sizeof(__s));
    std::regex_traits<char>::__transform_primary<char *>(&__s, (uint64_t)&this->__traits_, (char *)&v88, (char *)&v89);
    std::vector<std::string>::pointer v55 = this->__equivalences_.__begin_;
    uint64_t v56 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    int64_t v57 = (char *)this->__equivalences_.__end_ - (char *)v55;
    if (!v57)
    {
LABEL_145:
      if ((v56 & 0x80) != 0) {
LABEL_146:
      }
        operator delete(__s.__r_.__value_.__l.__data_);
      goto LABEL_147;
    }
    unint64_t v58 = 0;
    unint64_t v59 = v57 / 24;
    size_t v61 = __s.__r_.__value_.__l.__size_;
    unint64_t v60 = (const void *)__s.__r_.__value_.__r.__words[0];
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v62 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v62 = __s.__r_.__value_.__l.__size_;
    }
    if (v59 <= 1) {
      uint64_t v63 = 1;
    }
    else {
      uint64_t v63 = v57 / 24;
    }
    for (BOOL i = 1; ; BOOL i = v58 < v59)
    {
      char v65 = &v55[v58];
      std::string::size_type v66 = HIBYTE(v65->__r_.__value_.__r.__words[2]);
      int v67 = (char)v66;
      if ((v66 & 0x80u) != 0) {
        std::string::size_type v66 = v65->__r_.__value_.__l.__size_;
      }
      if (v62 != v66) {
        goto LABEL_138;
      }
      v68 = v67 >= 0 ? &v55[v58] : (std::string *)v65->__r_.__value_.__r.__words[0];
      if ((v56 & 0x80) == 0) {
        break;
      }
      BOOL v85 = i;
      v70 = v55;
      size_t v71 = v60;
      size_t v72 = v61;
      if (!memcmp(v60, v68, v61))
      {
        operator delete(__s.__r_.__value_.__l.__data_);
        if (v85) {
          goto LABEL_183;
        }
LABEL_144:
        int v86 = 1;
LABEL_147:
        if ((char)v88 < 0)
        {
          neg_std::regex_traits<char>::char_class_type mask = this->__neg_mask_;
          goto LABEL_160;
        }
        std::regex_traits<char>::char_class_type mask = this->__mask_;
        tab = this->__traits_.__ct_->__tab_;
        std::ctype_base::mask v75 = tab[v88];
        if ((v75 & mask) == 0 && (v88 != 95 || (mask & 0x80) == 0)
          || SHIBYTE(v88) < 0
          || (tab[HIBYTE(v88)] & mask) == 0 && ((mask & 0x80) == 0 || HIBYTE(v88) != 95))
        {
          neg_std::regex_traits<char>::char_class_type mask = this->__neg_mask_;
          if ((neg_mask & v75) != 0 || v88 == 95 && (neg_mask & 0x80) != 0) {
            goto LABEL_164;
          }
LABEL_160:
          if (SHIBYTE(v88) < 0) {
            goto LABEL_183;
          }
          if ((this->__traits_.__ct_->__tab_[HIBYTE(v88)] & neg_mask) != 0
            || (int v77 = 1, HIBYTE(v88) == 95) && (neg_mask & 0x80) != 0)
          {
LABEL_164:
            int v77 = v86;
          }
LABEL_184:
          int v86 = v77;
LABEL_185:
          uint64_t v11 = 2;
          goto LABEL_176;
        }
LABEL_183:
        int v77 = 1;
        goto LABEL_184;
      }
      ++v58;
      size_t v61 = v72;
      unint64_t v60 = v71;
      std::vector<std::string>::pointer v55 = v70;
      if (v58 == v63) {
        goto LABEL_146;
      }
LABEL_142:
      ;
    }
    if (!v56)
    {
LABEL_143:
      if (i) {
        goto LABEL_183;
      }
      goto LABEL_144;
    }
    uint64_t v69 = 0;
    while (__s.__r_.__value_.__s.__data_[v69] == v68->__r_.__value_.__s.__data_[v69])
    {
      if (v56 == ++v69) {
        goto LABEL_143;
      }
    }
LABEL_138:
    if (++v58 == v63) {
      goto LABEL_145;
    }
    goto LABEL_142;
  }
  memset(&__s, 170, sizeof(__s));
  std::regex_traits<char>::transform<char *>((uint64_t)&__s, (uint64_t)&this->__traits_, (char *)&v88, (char *)&v89);
  size_t v18 = this->__ranges_.__begin_;
  if (this->__ranges_.__end_ == v18)
  {
LABEL_33:
    int v86 = 0;
    char v21 = 1;
  }
  else
  {
    unint64_t v19 = 0;
    uint64_t v20 = 3;
    while ((int)(std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v18->first.__r_.__value_.__r.__words[v20 - 3], (void **)&__s.__r_.__value_.__l.__data_) << 24) > 0xFFFFFF|| (int)(std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__s, (void **)((char *)&this->__ranges_.__begin_->first.__r_.__value_.__l.__data_ + v20 * 8)) << 24) >= 0x1000000)
    {
      ++v19;
      size_t v18 = this->__ranges_.__begin_;
      v20 += 6;
      if (v19 >= 0xAAAAAAAAAAAAAAABLL * (((char *)this->__ranges_.__end_ - (char *)v18) >> 4)) {
        goto LABEL_33;
      }
    }
    char v21 = 0;
    int v86 = 1;
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  if ((v86 & 1) == 0) {
    goto LABEL_117;
  }
  if ((v21 & 1) == 0) {
    goto LABEL_185;
  }
  uint64_t v11 = 2;
LABEL_36:
  unsigned __int8 v23 = *a2->__current_;
  v89.__r_.__value_.__s.__data_[0] = v23;
  if (this->__icase_)
  {
    unsigned __int8 v23 = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, (char)v23);
    v89.__r_.__value_.__s.__data_[0] = v23;
  }
  std::vector<char>::pointer v24 = this->__chars_.__begin_;
  unint64_t v25 = this->__chars_.__end_ - v24;
  if (v25)
  {
    if (v25 <= 1) {
      unint64_t v25 = 1;
    }
    do
    {
      int v26 = *v24++;
      if (v26 == v23) {
        goto LABEL_174;
      }
    }
    while (--v25);
  }
  std::regex_traits<char>::char_class_type v27 = this->__neg_mask_;
  if (v27 || this->__neg_chars_.__begin_ != this->__neg_chars_.__end_)
  {
    if ((v23 & 0x80) != 0 || (this->__traits_.__ct_->__tab_[v23] & v27) == 0)
    {
      int v29 = (v27 >> 7) & 1;
      char v28 = v23 == 95 ? v29 : 0;
    }
    else
    {
      char v28 = 1;
    }
    std::vector<char>::pointer end = this->__neg_chars_.__end_;
    std::vector<char>::pointer v31 = (std::vector<char>::pointer)memchr(this->__neg_chars_.__begin_, (char)v23, end - this->__neg_chars_.__begin_);
    char v32 = v31 ? v31 : end;
    if ((v28 & 1) == 0 && v32 == end)
    {
LABEL_174:
      BOOL negate = 1;
      goto LABEL_175;
    }
  }
  std::vector<std::pair<std::string, std::string>>::pointer v33 = this->__ranges_.__begin_;
  std::vector<std::pair<std::string, std::string>>::pointer v34 = this->__ranges_.__end_;
  if (v33 != v34)
  {
    memset(&__s, 170, sizeof(__s));
    if (this->__collate_)
    {
      std::regex_traits<char>::transform<char *>((uint64_t)&__s, (uint64_t)&this->__traits_, (char *)&v89, &v89.__r_.__value_.__s.__data_[1]);
      std::vector<std::pair<std::string, std::string>>::pointer v33 = this->__ranges_.__begin_;
      std::vector<std::pair<std::string, std::string>>::pointer v34 = this->__ranges_.__end_;
    }
    else
    {
      *((unsigned char *)&__s.__r_.__value_.__s + 23) = 1;
      LOWORD(__s.__r_.__value_.__l.__data_) = v23;
    }
    if (v34 == v33)
    {
LABEL_66:
      char v37 = 0;
    }
    else
    {
      unint64_t v35 = 0;
      uint64_t v36 = 3;
      while ((int)(std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v33->first.__r_.__value_.__r.__words[v36 - 3], (void **)&__s.__r_.__value_.__l.__data_) << 24) > 0xFFFFFF|| (int)(std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__s, (void **)((char *)&this->__ranges_.__begin_->first.__r_.__value_.__l.__data_+ v36 * 8)) << 24) >= 0x1000000)
      {
        ++v35;
        std::vector<std::pair<std::string, std::string>>::pointer v33 = this->__ranges_.__begin_;
        v36 += 6;
        if (v35 >= 0xAAAAAAAAAAAAAAABLL * (((char *)this->__ranges_.__end_ - (char *)v33) >> 4)) {
          goto LABEL_66;
        }
      }
      char v37 = 1;
      int v86 = 1;
    }
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__s.__r_.__value_.__l.__data_);
    }
    if (v37) {
      goto LABEL_176;
    }
  }
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
  {
LABEL_169:
    if (v89.__r_.__value_.__s.__data_[0] < 0) {
      goto LABEL_176;
    }
    std::regex_traits<char>::char_class_type v78 = this->__mask_;
    if ((this->__traits_.__ct_->__tab_[v89.__r_.__value_.__s.__data_[0]] & v78) == 0)
    {
      int v79 = (v78 >> 7) & 1;
      if (v89.__r_.__value_.__s.__data_[0] != 95) {
        int v79 = 0;
      }
      if (v79 != 1) {
        goto LABEL_176;
      }
    }
    goto LABEL_174;
  }
  memset(&__s, 170, sizeof(__s));
  std::regex_traits<char>::__transform_primary<char *>(&__s, (uint64_t)&this->__traits_, (char *)&v89, &v89.__r_.__value_.__s.__data_[1]);
  std::vector<std::string>::pointer v38 = this->__equivalences_.__begin_;
  uint64_t v39 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  int64_t v40 = (char *)this->__equivalences_.__end_ - (char *)v38;
  if (!v40)
  {
    if ((*((unsigned char *)&__s.__r_.__value_.__s + 23) & 0x80) != 0) {
      operator delete(__s.__r_.__value_.__l.__data_);
    }
    goto LABEL_169;
  }
  uint64_t v84 = v11;
  unint64_t v41 = 0;
  unint64_t v42 = v40 / 24;
  size_t v44 = __s.__r_.__value_.__l.__size_;
  int64x2_t v43 = (const void *)__s.__r_.__value_.__r.__words[0];
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v45 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v45 = __s.__r_.__value_.__l.__size_;
  }
  if (v42 <= 1) {
    uint64_t v46 = 1;
  }
  else {
    uint64_t v46 = v40 / 24;
  }
  for (BOOL j = 1; ; BOOL j = v41 < v42)
  {
    uint64_t v48 = &v38[v41];
    std::string::size_type v49 = HIBYTE(v48->__r_.__value_.__r.__words[2]);
    int v50 = (char)v49;
    if ((v49 & 0x80u) != 0) {
      std::string::size_type v49 = v48->__r_.__value_.__l.__size_;
    }
    if (v45 == v49) {
      break;
    }
LABEL_99:
    if (++v41 == v46)
    {
      if ((v39 & 0x80) != 0) {
LABEL_167:
      }
        operator delete(__s.__r_.__value_.__l.__data_);
      uint64_t v11 = v84;
      goto LABEL_169;
    }
LABEL_103:
    ;
  }
  if (v50 >= 0) {
    long long v51 = &v38[v41];
  }
  else {
    long long v51 = (std::string *)v48->__r_.__value_.__r.__words[0];
  }
  if ((v39 & 0x80) == 0)
  {
    if (!v39)
    {
LABEL_104:
      int v86 = 1;
      uint64_t v11 = v84;
      if (!j) {
        goto LABEL_169;
      }
      goto LABEL_176;
    }
    uint64_t v52 = 0;
    while (__s.__r_.__value_.__s.__data_[v52] == v51->__r_.__value_.__s.__data_[v52])
    {
      if (v39 == ++v52) {
        goto LABEL_104;
      }
    }
    goto LABEL_99;
  }
  BOOL v82 = j;
  uint64_t v83 = v38;
  uint64_t v53 = v43;
  size_t v54 = v44;
  if (memcmp(v43, v51, v44))
  {
    ++v41;
    size_t v44 = v54;
    int64x2_t v43 = v53;
    std::vector<std::string>::pointer v38 = v83;
    if (v41 == v46) {
      goto LABEL_167;
    }
    goto LABEL_103;
  }
  operator delete(__s.__r_.__value_.__l.__data_);
  int v86 = 1;
  uint64_t v11 = v84;
  if (!v82) {
    goto LABEL_169;
  }
LABEL_176:
  if (v86 == this->__negate_)
  {
    first = 0;
    int v81 = -993;
  }
  else
  {
    a2->__current_ += v11;
    first = this->__first_;
    int v81 = -995;
  }
  a2->__do_ = v81;
  a2->__node_ = first;
}

void sub_19207CFDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  char v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unsigned int v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::__destroy_at[abi:ne180100]<std::pair<std::string,std::string>,0>(v4);
      }
      while ((void *)v4 != v2);
      unsigned int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    char v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t std::pair<std::string,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

std::locale *std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  char v7 = a1 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  char v7 = a1 + 11;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  uint64_t v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  uint64_t v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  unsigned int v5 = a1[1].__locale_;
  if (v5) {
    (*(void (**)(std::locale::__imp *))(*(void *)v5 + 8))(v5);
  }
  return a1;
}

void std::regex_traits<char>::transform<char *>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  memset(__p, 170, sizeof(__p));
  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a3, a4, a4 - a3);
  unsigned int v5 = (char *)HIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0) {
    char v6 = __p;
  }
  else {
    char v6 = (void **)__p[0];
  }
  if (SHIBYTE(__p[2]) < 0) {
    unsigned int v5 = (char *)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a2 + 16) + 32))(*(void *)(a2 + 16), v6, &v5[(void)v6]);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_19207D2D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::__init_with_size[abi:ne180100]<char *,char *>(void *result, char *a2, char *a3, unint64_t a4)
{
  uint64_t v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a4 > 0x16)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v8 = a4 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t result = operator new(v8 + 1);
    v4[1] = a4;
    void v4[2] = v9 | 0x8000000000000000;
    *uint64_t v4 = result;
    uint64_t v4 = result;
  }
  else
  {
    *((unsigned char *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    char v10 = *a2++;
    *(unsigned char *)uint64_t v4 = v10;
    uint64_t v4 = (void *)((char *)v4 + 1);
  }
  *(unsigned char *)uint64_t v4 = 0;
  return result;
}

void std::regex_traits<char>::__transform_primary<char *>(void *a1, uint64_t a2, char *a3, char *a4)
{
  memset(__p, 170, sizeof(__p));
  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a3, a4, a4 - a3);
  memset(a1, 170, 24);
  char v6 = (char *)HIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0) {
    char v7 = __p;
  }
  else {
    char v7 = (void **)__p[0];
  }
  if (SHIBYTE(__p[2]) < 0) {
    char v6 = (char *)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a2 + 16) + 32))(*(void *)(a2 + 16), v7, &v6[(void)v7]);
  uint64_t v8 = *((unsigned __int8 *)a1 + 23);
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = a1[1];
  }
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0) {
        char v10 = a1;
      }
      else {
        char v10 = (unsigned char *)*a1;
      }
      v10[11] = v10[3];
    }
    else if (v9 < 0)
    {
      *(unsigned char *)*a1 = 0;
      a1[1] = 0;
    }
    else
    {
      *(unsigned char *)a1 = 0;
      *((unsigned char *)a1 + 23) = 0;
    }
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_19207D4AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x192FECF60](exception, 5);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_19207D50C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_15;
  }
  for (uint64_t i = 0; a2[i] != 46 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i) {
      goto LABEL_15;
    }
  }
  if (&a2[i] == a3) {
LABEL_15:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<char const*>((uint64_t)&v10, a1, a2, &a2[i]);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(_OWORD *)a4 = v10;
  unint64_t v7 = v11;
  *(void *)(a4 + 16) = v11;
  unint64_t v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0) {
    unint64_t v8 = *(void *)(a4 + 8);
  }
  if (v8 - 1 >= 2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  return (uint64_t)&a2[i + 2];
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  if (a2 == a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  int v6 = (char)*a2;
  if (v6 > 97)
  {
    if (v6 > 114)
    {
      if (v6 != 115)
      {
        if (v6 != 119) {
          goto LABEL_25;
        }
        *(_DWORD *)(a5 + 160) |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
        return a2 + 1;
      }
      int v8 = *(_DWORD *)(a5 + 160) | 0x4000;
    }
    else
    {
      if (v6 == 98)
      {
        if (*(char *)(a4 + 23) < 0)
        {
          *(void *)(a4 + 8) = 1;
          a4 = *(void *)a4;
        }
        else
        {
          *(unsigned char *)(a4 + 23) = 1;
        }
        *(_WORD *)a4 = 8;
        return a2 + 1;
      }
      if (v6 != 100) {
        goto LABEL_25;
      }
      int v8 = *(_DWORD *)(a5 + 160) | 0x400;
    }
    *(_DWORD *)(a5 + 160) = v8;
    return a2 + 1;
  }
  if (v6 <= 82)
  {
    if (!*a2)
    {
      if (*(char *)(a4 + 23) < 0)
      {
        *(void *)(a4 + 8) = 1;
        a4 = *(void *)a4;
      }
      else
      {
        *(unsigned char *)(a4 + 23) = 1;
      }
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
      return a2 + 1;
    }
    if (v6 == 68)
    {
      int v7 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_22:
      *(_DWORD *)(a5 + 164) = v7;
      return a2 + 1;
    }
    goto LABEL_25;
  }
  if (v6 == 83)
  {
    int v7 = *(_DWORD *)(a5 + 164) | 0x4000;
    goto LABEL_22;
  }
  if (v6 == 87)
  {
    *(_DWORD *)(a5 + 164) |= 0x500u;
    std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5);
    return a2 + 1;
  }
LABEL_25:

  return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, a2, a3, (uint64_t *)a4);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>(std::basic_regex<char> *a1, char *a2, char *a3, uint64_t *a4)
{
  if (a2 == a3) {
LABEL_80:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  int v5 = *a2;
  std::basic_regex<char>::value_type v6 = *a2;
  if (v5 > 97)
  {
    switch(*a2)
    {
      case 'n':
        if (!a4)
        {
          std::basic_regex<char>::value_type v7 = 10;
          break;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        __int16 v13 = 10;
        goto LABEL_77;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_25;
      case 'r':
        if (!a4)
        {
          std::basic_regex<char>::value_type v7 = 13;
          break;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        __int16 v13 = 13;
        goto LABEL_77;
      case 't':
        if (!a4)
        {
          std::basic_regex<char>::value_type v7 = 9;
          break;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        __int16 v13 = 9;
        goto LABEL_77;
      case 'v':
        if (!a4)
        {
          std::basic_regex<char>::value_type v7 = 11;
          break;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        __int16 v13 = 11;
        goto LABEL_77;
      default:
        if (v5 == 98)
        {
          if (a4)
          {
            if (*((char *)a4 + 23) < 0)
            {
              a4[1] = 1;
              a4 = (uint64_t *)*a4;
            }
            else
            {
              *((unsigned char *)a4 + 23) = 1;
            }
            __int16 v13 = 8;
            goto LABEL_77;
          }
          std::basic_regex<char>::value_type v7 = 8;
        }
        else
        {
          if (v5 != 102) {
            goto LABEL_25;
          }
          if (a4)
          {
            if (*((char *)a4 + 23) < 0)
            {
              a4[1] = 1;
              a4 = (uint64_t *)*a4;
            }
            else
            {
              *((unsigned char *)a4 + 23) = 1;
            }
            __int16 v13 = 12;
            goto LABEL_77;
          }
          std::basic_regex<char>::value_type v7 = 12;
        }
        break;
    }
LABEL_62:
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
    return a2 + 1;
  }
  if (v5 > 91)
  {
    if (v5 == 92)
    {
LABEL_16:
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(unsigned char *)a4 = v6;
        *((unsigned char *)a4 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
        return a2 + 1;
      }
      std::basic_regex<char>::value_type v7 = *a2;
      goto LABEL_62;
    }
    if (v5 != 97) {
      goto LABEL_25;
    }
    if (a4)
    {
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      __int16 v13 = 7;
LABEL_77:
      *(_WORD *)a4 = v13;
      return a2 + 1;
    }
    std::basic_regex<char>::value_type v7 = 7;
    goto LABEL_62;
  }
  if (v5 == 34 || v5 == 47) {
    goto LABEL_16;
  }
LABEL_25:
  if ((v6 & 0xF8) != 0x30) {
    goto LABEL_80;
  }
  std::basic_regex<char>::value_type v8 = v5 - 48;
  int v9 = a2 + 1;
  if (a2 + 1 != a3)
  {
    if ((*v9 & 0xF8) != 0x30) {
      goto LABEL_49;
    }
    std::basic_regex<char>::value_type v8 = *v9 + 8 * v8 - 48;
    if (a2 + 2 != a3)
    {
      char v10 = a2[2];
      int v11 = v10 & 0xF8;
      std::basic_regex<char>::value_type v12 = v10 + 8 * v8 - 48;
      if (v11 == 48) {
        int v9 = a2 + 3;
      }
      else {
        int v9 = a2 + 2;
      }
      if (v11 == 48) {
        std::basic_regex<char>::value_type v8 = v12;
      }
      goto LABEL_49;
    }
  }
  int v9 = a3;
LABEL_49:
  if (a4)
  {
    if (*((char *)a4 + 23) < 0)
    {
      a4[1] = 1;
      a4 = (uint64_t *)*a4;
    }
    else
    {
      *((unsigned char *)a4 + 23) = 1;
    }
    *(unsigned char *)a4 = v8;
    *((unsigned char *)a4 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v8);
  }
  return v9;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](uint64_t a1, char *a2, char *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2;
  if (*(unsigned char *)(a1 + 170))
  {
    if (*(unsigned char *)(a1 + 169))
    {
      for (unint64_t i = 0; ; ++i)
      {
        unint64_t v7 = v4[23] < 0 ? *((void *)v4 + 1) : v4[23];
        if (i >= v7) {
          break;
        }
        std::basic_regex<char>::value_type v8 = v4;
        if (v4[23] < 0) {
          std::basic_regex<char>::value_type v8 = *(char **)v4;
        }
        char v9 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v8[i]);
        char v10 = v4;
        if (v4[23] < 0) {
          char v10 = *(char **)v4;
        }
        v10[i] = v9;
      }
      for (unint64_t j = 0; ; ++j)
      {
        unint64_t v12 = v3[23] < 0 ? *((void *)v3 + 1) : v3[23];
        if (j >= v12) {
          break;
        }
        __int16 v13 = v3;
        if (v3[23] < 0) {
          __int16 v13 = *(char **)v3;
        }
        char v14 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v13[j]);
        uint64_t v15 = v3;
        if (v3[23] < 0) {
          uint64_t v15 = *(char **)v3;
        }
        v15[j] = v14;
      }
    }
    else
    {
      for (unint64_t k = 0; ; ++k)
      {
        unint64_t v18 = a2[23] < 0 ? *((void *)a2 + 1) : a2[23];
        if (k >= v18) {
          break;
        }
        unint64_t v19 = a2;
        if (a2[23] < 0) {
          unint64_t v19 = *(char **)a2;
        }
        uint64_t v20 = a2;
        if (a2[23] < 0) {
          uint64_t v20 = *(char **)a2;
        }
        v20[k] = v19[k];
      }
      for (unint64_t m = 0; ; ++m)
      {
        unint64_t v22 = a3[23] < 0 ? *((void *)a3 + 1) : a3[23];
        if (m >= v22) {
          break;
        }
        unsigned __int8 v23 = a3;
        if (a3[23] < 0) {
          unsigned __int8 v23 = *(char **)a3;
        }
        std::vector<char>::pointer v24 = a3;
        if (a3[23] < 0) {
          std::vector<char>::pointer v24 = *(char **)a3;
        }
        v24[m] = v23[m];
      }
    }
    if (v4[23] < 0)
    {
      int v26 = v4;
      uint64_t v4 = *(char **)v4;
      uint64_t v25 = *((void *)v26 + 1);
    }
    else
    {
      uint64_t v25 = v4[23];
    }
    std::regex_traits<char>::transform<std::__wrap_iter<char *>>((uint64_t)&v39, a1 + 16, v4, &v4[v25]);
    if (v3[23] < 0)
    {
      char v28 = v3;
      uint64_t v3 = *(char **)v3;
      uint64_t v27 = *((void *)v28 + 1);
    }
    else
    {
      uint64_t v27 = v3[23];
    }
    std::regex_traits<char>::transform<std::__wrap_iter<char *>>((uint64_t)v37, a1 + 16, v3, &v3[v27]);
    *(_OWORD *)unint64_t v41 = v39;
    uint64_t v42 = v40;
    uint64_t v40 = 0;
    *(_OWORD *)std::string __p = *(_OWORD *)v37;
    uint64_t v44 = v38;
    v37[0] = 0;
    v37[1] = 0;
    uint64_t v38 = 0;
    long long v39 = 0uLL;
    std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100]((void **)(a1 + 88), (long long *)v41);
    if (SHIBYTE(v44) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v42) < 0) {
      operator delete(v41[0]);
    }
    if (SHIBYTE(v38) < 0) {
      operator delete(v37[0]);
    }
    if (SHIBYTE(v40) < 0)
    {
      int v29 = (void *)v39;
LABEL_79:
      operator delete(v29);
    }
  }
  else
  {
    if (a2[23] < 0) {
      uint64_t v16 = *((void *)a2 + 1);
    }
    else {
      uint64_t v16 = a2[23];
    }
    if (v16 != 1 || (a3[23] < 0 ? (uint64_t v30 = *((void *)a3 + 1)) : (uint64_t v30 = a3[23]), v30 != 1)) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>();
    }
    if (*(unsigned char *)(a1 + 169))
    {
      std::vector<char>::pointer v31 = a2;
      if (a2[23] < 0) {
        std::vector<char>::pointer v31 = *(char **)a2;
      }
      char v32 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *v31);
      std::vector<std::pair<std::string, std::string>>::pointer v33 = v4;
      if (v4[23] < 0) {
        std::vector<std::pair<std::string, std::string>>::pointer v33 = *(unsigned char **)v4;
      }
      *std::vector<std::pair<std::string, std::string>>::pointer v33 = v32;
      std::vector<std::pair<std::string, std::string>>::pointer v34 = v3;
      if (v3[23] < 0) {
        std::vector<std::pair<std::string, std::string>>::pointer v34 = *(char **)v3;
      }
      char v35 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *v34);
      uint64_t v36 = v3;
      if (v3[23] < 0) {
        uint64_t v36 = *(unsigned char **)v3;
      }
      *uint64_t v36 = v35;
    }
    *(_OWORD *)unint64_t v41 = *(_OWORD *)v4;
    uint64_t v42 = *((void *)v4 + 2);
    *((void *)v4 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
    *((void *)v4 + 2) = 0;
    *(void *)uint64_t v4 = 0;
    *(_OWORD *)std::string __p = *(_OWORD *)v3;
    uint64_t v44 = *((void *)v3 + 2);
    *(void *)uint64_t v3 = 0;
    *((void *)v3 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
    *((void *)v3 + 2) = 0;
    std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100]((void **)(a1 + 88), (long long *)v41);
    if (SHIBYTE(v44) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v42) < 0)
    {
      int v29 = v41[0];
      goto LABEL_79;
    }
  }
}

void sub_19207DE78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 169))
  {
    __int16 v6 = a2 | (unsigned __int16)((_WORD)a3 << 8);
    std::basic_regex<char>::value_type v8 = *(_WORD **)(a1 + 120);
    unint64_t v16 = *(void *)(a1 + 128);
    if (*(unsigned char *)(a1 + 170))
    {
      if ((unint64_t)v8 < v16) {
        goto LABEL_24;
      }
      uint64_t v17 = *(void *)(a1 + 112);
      uint64_t v18 = (uint64_t)v8 - v17;
      if ((uint64_t)v8 - v17 > -3)
      {
        uint64_t v19 = v18 >> 1;
        unint64_t v20 = v16 - v17;
        if (v20 <= (v18 >> 1) + 1) {
          unint64_t v21 = v19 + 1;
        }
        else {
          unint64_t v21 = v20;
        }
        if (v20 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v22 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v22 = v21;
        }
        if (v22) {
          uint64_t v22 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v22);
        }
        else {
          uint64_t v23 = 0;
        }
        uint64_t v25 = (_WORD *)(v22 + 2 * v19);
        uint64_t v26 = v22 + 2 * v23;
        *uint64_t v25 = v6;
        std::vector<char>::pointer v24 = v25 + 1;
        char v37 = *(char **)(a1 + 112);
        uint64_t v27 = *(char **)(a1 + 120);
        if (v27 == v37) {
          goto LABEL_46;
        }
        do
        {
          __int16 v38 = *((_WORD *)v27 - 1);
          v27 -= 2;
          *--uint64_t v25 = v38;
        }
        while (v27 != v37);
        goto LABEL_45;
      }
    }
    else
    {
      if ((unint64_t)v8 < v16) {
        goto LABEL_24;
      }
      uint64_t v30 = *(void *)(a1 + 112);
      uint64_t v31 = (uint64_t)v8 - v30;
      if ((uint64_t)v8 - v30 > -3)
      {
        uint64_t v32 = v31 >> 1;
        unint64_t v33 = v16 - v30;
        if (v33 <= (v31 >> 1) + 1) {
          unint64_t v34 = v32 + 1;
        }
        else {
          unint64_t v34 = v33;
        }
        if (v33 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v35 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v35 = v34;
        }
        if (v35) {
          uint64_t v35 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v35);
        }
        else {
          uint64_t v36 = 0;
        }
        uint64_t v25 = (_WORD *)(v35 + 2 * v32);
        uint64_t v26 = v35 + 2 * v36;
        *uint64_t v25 = v6;
        std::vector<char>::pointer v24 = v25 + 1;
        long long v39 = *(char **)(a1 + 112);
        uint64_t v27 = *(char **)(a1 + 120);
        if (v27 == v39) {
          goto LABEL_46;
        }
        do
        {
          __int16 v40 = *((_WORD *)v27 - 1);
          v27 -= 2;
          *--uint64_t v25 = v40;
        }
        while (v27 != v39);
        goto LABEL_45;
      }
    }
LABEL_49:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unsigned __int8 v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
  __int16 v6 = v5 | (unsigned __int16)((*(unsigned __int16 (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a3) << 8);
  std::basic_regex<char>::value_type v8 = *(_WORD **)(a1 + 120);
  unint64_t v7 = *(void *)(a1 + 128);
  if ((unint64_t)v8 < v7)
  {
LABEL_24:
    *std::basic_regex<char>::value_type v8 = v6;
    std::vector<char>::pointer v24 = v8 + 1;
    goto LABEL_48;
  }
  uint64_t v9 = *(void *)(a1 + 112);
  uint64_t v10 = (uint64_t)v8 - v9;
  if ((uint64_t)v8 - v9 <= -3) {
    goto LABEL_49;
  }
  uint64_t v11 = v10 >> 1;
  unint64_t v12 = v7 - v9;
  if (v12 <= (v10 >> 1) + 1) {
    unint64_t v13 = v11 + 1;
  }
  else {
    unint64_t v13 = v12;
  }
  if (v12 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v14 = v13;
  }
  if (v14) {
    uint64_t v14 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v14);
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v25 = (_WORD *)(v14 + 2 * v11);
  uint64_t v26 = v14 + 2 * v15;
  *uint64_t v25 = v6;
  std::vector<char>::pointer v24 = v25 + 1;
  char v28 = *(char **)(a1 + 112);
  uint64_t v27 = *(char **)(a1 + 120);
  if (v27 == v28) {
    goto LABEL_46;
  }
  do
  {
    __int16 v29 = *((_WORD *)v27 - 1);
    v27 -= 2;
    *--uint64_t v25 = v29;
  }
  while (v27 != v28);
LABEL_45:
  uint64_t v27 = *(char **)(a1 + 112);
LABEL_46:
  *(void *)(a1 + 112) = v25;
  *(void *)(a1 + 120) = v24;
  *(void *)(a1 + 128) = v26;
  if (v27) {
    operator delete(v27);
  }
LABEL_48:
  *(void *)(a1 + 120) = v24;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x192FECF60](exception, 1);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_19207E144(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::__add_equivalence[abi:ne180100](void *a1, uint64_t a2)
{
  unint64_t v3 = a1[18];
  if (v3 >= a1[19])
  {
    uint64_t result = std::vector<std::string>::__push_back_slow_path<std::string const&>(a1 + 17, (long long *)a2);
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)a1[18], *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else
    {
      long long v4 = *(_OWORD *)a2;
      *(void *)(v3 + 16) = *(void *)(a2 + 16);
      *(_OWORD *)unint64_t v3 = v4;
    }
    uint64_t result = v3 + 24;
    a1[18] = v3 + 24;
  }
  a1[18] = result;
  return result;
}

void sub_19207E1C8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 144) = v2;
  _Unwind_Resume(a1);
}

void std::regex_traits<char>::__lookup_collatename<char const*>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  memset(&__s, 170, sizeof(__s));
  std::string::__init_with_size[abi:ne180100]<char *,char *>(&__s, a3, a4, a4 - a3);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
    if (!__s.__r_.__value_.__l.__size_) {
      goto LABEL_10;
    }
  }
  else
  {
    if (!*((unsigned char *)&__s.__r_.__value_.__s + 23)) {
      return;
    }
    p_s = &__s;
  }
  std::__get_collation_name(&v11, (const char *)p_s);
  *(_OWORD *)a1 = *(_OWORD *)&v11.__r_.__value_.__l.__data_;
  unint64_t v7 = v11.__r_.__value_.__r.__words[2];
  *(void *)(a1 + 16) = *((void *)&v11.__r_.__value_.__l + 2);
  unint64_t v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0) {
    unint64_t v8 = *(void *)(a1 + 8);
  }
  if (v8) {
    goto LABEL_8;
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
    if (__s.__r_.__value_.__l.__size_ < 3) {
      goto LABEL_16;
    }
LABEL_10:
    operator delete(p_s);
    return;
  }
  if (HIBYTE(__s.__r_.__value_.__r.__words[2]) < 3u)
  {
LABEL_16:
    (*(void (**)(std::string *__return_ptr))(**(void **)(a2 + 16) + 32))(&v11);
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    *(std::string *)a1 = v11;
    if (*(char *)(a1 + 23) < 0)
    {
      uint64_t v10 = *(void *)(a1 + 8);
      if (v10 != 1 && v10 != 12)
      {
        **(unsigned char **)a1 = 0;
        *(void *)(a1 + 8) = 0;
        goto LABEL_8;
      }
    }
    else
    {
      int v9 = *(unsigned __int8 *)(a1 + 23);
      if (v9 != 12 && v9 != 1)
      {
        *(unsigned char *)a1 = 0;
        *(unsigned char *)(a1 + 23) = 0;
LABEL_8:
        if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          return;
        }
        p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
        goto LABEL_10;
      }
    }
    std::string::operator=((std::string *)a1, &__s);
    goto LABEL_8;
  }
}

void sub_19207E360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0) {
    operator delete(*(void **)v17);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(void *a1, uint64_t a2, char *a3, char *a4)
{
  memset(__p, 170, sizeof(__p));
  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a3, a4, a4 - a3);
  memset(a1, 170, 24);
  __int16 v6 = (char *)HIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0) {
    unint64_t v7 = __p;
  }
  else {
    unint64_t v7 = (void **)__p[0];
  }
  if (SHIBYTE(__p[2]) < 0) {
    __int16 v6 = (char *)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a2 + 16) + 32))(*(void *)(a2 + 16), v7, &v6[(void)v7]);
  uint64_t v8 = *((unsigned __int8 *)a1 + 23);
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = a1[1];
  }
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0) {
        uint64_t v10 = a1;
      }
      else {
        uint64_t v10 = (unsigned char *)*a1;
      }
      v10[11] = v10[3];
    }
    else if (v9 < 0)
    {
      *(unsigned char *)*a1 = 0;
      a1[1] = 0;
    }
    else
    {
      *(unsigned char *)a1 = 0;
      *((unsigned char *)a1 + 23) = 0;
    }
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_19207E4A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x192FECF60](exception, 2);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_19207E508(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 169))
  {
    char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), 95);
    char v3 = v2;
    unsigned __int8 v5 = *(unsigned char **)(a1 + 72);
    unint64_t v4 = *(void *)(a1 + 80);
    if ((unint64_t)v5 < v4)
    {
      *unsigned __int8 v5 = v2;
      uint64_t v6 = (uint64_t)(v5 + 1);
LABEL_32:
      *(void *)(a1 + 72) = v6;
      return;
    }
    unint64_t v16 = *(void *)(a1 + 64);
    uint64_t v17 = &v5[-v16];
    uint64_t v18 = (uint64_t)&v5[-v16 + 1];
    if (v18 >= 0)
    {
      unint64_t v19 = v4 - v16;
      if (2 * v19 > v18) {
        uint64_t v18 = 2 * v19;
      }
      if (v19 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v20 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v20 = v18;
      }
      if (v20) {
        unint64_t v21 = operator new(v20);
      }
      else {
        unint64_t v21 = 0;
      }
      uint64_t v23 = &v21[v20];
      v17[(void)v21] = v3;
      uint64_t v6 = (uint64_t)&v17[(void)v21 + 1];
      if (v5 == (unsigned char *)v16)
      {
        unint64_t v21 = &v17[(void)v21];
      }
      else
      {
        std::vector<char>::pointer v24 = &v5[~v16];
        do
        {
          char v25 = *--v5;
          (v24--)[(void)v21] = v25;
        }
        while (v5 != (unsigned char *)v16);
        unsigned __int8 v5 = *(unsigned char **)(a1 + 64);
      }
      *(void *)(a1 + 64) = v21;
      *(void *)(a1 + 72) = v6;
      *(void *)(a1 + 80) = v23;
      if (v5) {
        operator delete(v5);
      }
      goto LABEL_32;
    }
LABEL_55:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v7 = (unint64_t *)(a1 + 64);
  int v9 = *(unsigned char **)(a1 + 72);
  unint64_t v8 = *(void *)(a1 + 80);
  if (*(unsigned char *)(a1 + 170))
  {
    if ((unint64_t)v9 >= v8)
    {
      unint64_t v10 = *v7;
      std::string v11 = &v9[-*v7];
      unint64_t v12 = (unint64_t)(v11 + 1);
      if ((uint64_t)(v11 + 1) < 0) {
        goto LABEL_55;
      }
      unint64_t v13 = v8 - v10;
      if (2 * v13 > v12) {
        unint64_t v12 = 2 * v13;
      }
      if (v13 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v14 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v14 = v12;
      }
      if (v14) {
        uint64_t v15 = operator new(v14);
      }
      else {
        uint64_t v15 = 0;
      }
      uint64_t v31 = &v11[(void)v15];
      uint64_t v32 = (char *)v15 + v14;
      v11[(void)v15] = 95;
      uint64_t v22 = (uint64_t)&v11[(void)v15 + 1];
      if (v9 != (unsigned char *)v10)
      {
        unint64_t v33 = &v9[~v10];
        do
        {
          char v34 = *--v9;
          (v33--)[(void)v15] = v34;
        }
        while (v9 != (unsigned char *)v10);
LABEL_50:
        int v9 = (unsigned char *)*v7;
        goto LABEL_52;
      }
      goto LABEL_51;
    }
  }
  else if ((unint64_t)v9 >= v8)
  {
    unint64_t v26 = *v7;
    uint64_t v27 = &v9[-*v7];
    unint64_t v28 = (unint64_t)(v27 + 1);
    if ((uint64_t)(v27 + 1) < 0) {
      goto LABEL_55;
    }
    unint64_t v29 = v8 - v26;
    if (2 * v29 > v28) {
      unint64_t v28 = 2 * v29;
    }
    if (v29 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v30 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v30 = v28;
    }
    if (v30) {
      uint64_t v15 = operator new(v30);
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v31 = &v27[(void)v15];
    uint64_t v32 = (char *)v15 + v30;
    v27[(void)v15] = 95;
    uint64_t v22 = (uint64_t)&v27[(void)v15 + 1];
    if (v9 != (unsigned char *)v26)
    {
      uint64_t v35 = &v9[~v26];
      do
      {
        char v36 = *--v9;
        (v35--)[(void)v15] = v36;
      }
      while (v9 != (unsigned char *)v26);
      goto LABEL_50;
    }
LABEL_51:
    uint64_t v15 = v31;
LABEL_52:
    *(void *)(a1 + 64) = v15;
    *(void *)(a1 + 72) = v22;
    *(void *)(a1 + 80) = v32;
    if (v9) {
      operator delete(v9);
    }
    goto LABEL_54;
  }
  *int v9 = 95;
  uint64_t v22 = (uint64_t)(v9 + 1);
LABEL_54:
  *(void *)(a1 + 72) = v22;
}

void std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](void **a1, long long *a2)
{
  unint64_t v4 = (char *)a1[1];
  unsigned __int8 v5 = (char *)a1[2];
  if (v4 >= v5)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (unsigned char *)*a1) >> 4);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0x555555555555555) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*a1) >> 4);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v12 = 0x555555555555555;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 > 0x555555555555555) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v13 = (char *)operator new(48 * v12);
    }
    else
    {
      unint64_t v13 = 0;
    }
    size_t v14 = &v13[48 * v9];
    *(_OWORD *)size_t v14 = *a2;
    *((void *)v14 + 2) = *((void *)a2 + 2);
    long long v15 = *(long long *)((char *)a2 + 24);
    *((void *)a2 + 2) = 0;
    *((void *)a2 + 3) = 0;
    *(void *)a2 = 0;
    *((void *)a2 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
    *(_OWORD *)(v14 + 24) = v15;
    *((void *)v14 + 5) = *((void *)a2 + 5);
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    unint64_t v16 = (char *)*a1;
    uint64_t v17 = (char *)a1[1];
    if (v17 == *a1)
    {
      unint64_t v8 = v14 + 48;
      *a1 = v14;
      a1[1] = v14 + 48;
      a1[2] = &v13[48 * v12];
    }
    else
    {
      uint64_t v18 = &v13[48 * v9];
      do
      {
        long long v19 = *((_OWORD *)v17 - 3);
        *((void *)v18 - 4) = *((void *)v17 - 4);
        *((_OWORD *)v18 - 3) = v19;
        *((void *)v17 - 5) = 0;
        *((void *)v17 - 4) = 0;
        *((void *)v17 - 6) = 0;
        long long v20 = *(_OWORD *)(v17 - 24);
        *((void *)v18 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = *((void *)v17 - 1);
        *(_OWORD *)(v18 - 24) = v20;
        v18 -= 48;
        *((void *)v17 - 2) = 0;
        *((void *)v17 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
        *((void *)v17 - 3) = 0;
        v17 -= 48;
      }
      while (v17 != v16);
      uint64_t v17 = (char *)*a1;
      uint64_t v21 = (uint64_t)a1[1];
      unint64_t v8 = v14 + 48;
      *a1 = v18;
      a1[1] = v14 + 48;
      a1[2] = &v13[48 * v12];
      while ((char *)v21 != v17)
      {
        v21 -= 48;
        std::__destroy_at[abi:ne180100]<std::pair<std::string,std::string>,0>(v21);
      }
    }
    if (v17) {
      operator delete(v17);
    }
  }
  else
  {
    long long v6 = *a2;
    *((void *)v4 + 2) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v4 = v6;
    *((void *)a2 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v7 = *(long long *)((char *)a2 + 24);
    *((void *)v4 + 5) = *((void *)a2 + 5);
    *(_OWORD *)(v4 + 24) = v7;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    unint64_t v8 = v4 + 48;
  }
  a1[1] = v8;
}

void std::regex_traits<char>::transform<std::__wrap_iter<char *>>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  memset(__p, 170, sizeof(__p));
  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a3, a4, a4 - a3);
  unsigned __int8 v5 = (char *)HIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0) {
    long long v6 = __p;
  }
  else {
    long long v6 = (void **)__p[0];
  }
  if (SHIBYTE(__p[2]) < 0) {
    unsigned __int8 v5 = (char *)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a2 + 16) + 32))(*(void *)(a2 + 16), v6, &v5[(void)v6]);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_19207EA20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x192FECF60](exception, 9);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_19207EA80(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(uint64_t a1)
{
  if (a1 < 0) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(2 * a1);
}

void (__cdecl ***std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  char v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  char v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

uint64_t std::__begin_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(*(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(void *)(a2 + 16);
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void (__cdecl ***std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  char v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  char v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

uint64_t std::__end_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  uint64_t v2 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(void *)(v2 + 8) = *(void *)(a2 + 16);
  *(unsigned char *)(v2 + 16) = 1;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_loop(std::basic_regex<char> *this, size_t __min, size_t __max, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end, BOOL __greedy)
{
  int v8 = __mexp_end;
  int v9 = __mexp_begin;
  size_t v14 = operator new(0x10uLL);
  std::vector<char>::pointer end = this->__end_;
  first = end->__first_;
  v14[1] = first;
  end->__first_ = 0;
  uint64_t v17 = operator new(0x38uLL);
  loop_size_t count = this->__loop_count_;
  *((void *)v17 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = __s->__first_;
  *((void *)v17 + 2) = v14;
  *(void *)uint64_t v17 = &unk_1EE2F9158;
  *((void *)v17 + 3) = __min;
  *((void *)v17 + 4) = __max;
  *((_DWORD *)v17 + 10) = loop_count;
  *((_DWORD *)v17 + 1ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v9;
  *((_DWORD *)v17 + 12) = v8;
  *((unsigned char *)v17 + 52) = __greedy;
  __s->__first_ = 0;
  long long v19 = (std::__node<char> *)operator new(0x10uLL);
  v19->__vftable = (std::__node<char>_vtbl *)&unk_1EE2F87E8;
  v19[1].__vftable = (std::__node<char>_vtbl *)v17;
  this->__end_->__first_ = v19;
  this->__end_ = (std::__owns_one_state<char> *)*((void *)v17 + 2);
  __s->__first_ = (std::__node<char> *)v17;
  this->__loop_count_ = loop_count + 1;
}

void sub_19207EE14(_Unwind_Exception *a1)
{
  char v3 = std::__owns_two_states<char>::~__owns_two_states(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(unsigned __int8 *result, unsigned __int8 *a2, int *a3)
{
  if (result != a2)
  {
    int v3 = *result;
    if ((v3 & 0xF8) == 0x30 || (v3 & 0xFE) == 0x38)
    {
      int v4 = v3 - 48;
      *a3 = v4;
      if (++result == a2)
      {
        return a2;
      }
      else
      {
        while (1)
        {
          int v5 = *result;
          if ((v5 & 0xF8) != 0x30 && (v5 & 0xFE) != 0x38) {
            break;
          }
          if (v4 >= 214748364) {
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
          }
          int v4 = v5 + 10 * v4 - 48;
          *a3 = v4;
          if (++result == a2) {
            return a2;
          }
        }
      }
    }
  }
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x192FECF60](exception, 8);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_19207EF1C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x192FECF60](exception, 7);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_19207EF74(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = std::__owns_two_states<char>::~__owns_two_states(a1);

  operator delete(v1);
}

unsigned int *std::__loop<char>::__exec(unsigned int *result, void *a2)
{
  uint64_t v2 = result[10];
  uint64_t v3 = a2[7];
  int v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 == -991)
  {
    unint64_t v5 = *v4 + 1;
    *int v4 = v5;
    unint64_t v6 = *((void *)result + 3);
    unint64_t v7 = *((void *)result + 4);
    BOOL v8 = v5 < v7;
    if (v5 < v7 && v5 >= v6)
    {
      uint64_t v10 = *(void *)(v3 + 16 * v2 + 8);
      BOOL v8 = v5 < v7 && v10 != a2[2];
    }
    if (!v8 || v5 < v6)
    {
      *(_DWORD *)a2 = -994;
      if (!v8) {
        goto LABEL_25;
      }
LABEL_22:
      a2[10] = *((void *)result + 1);
      return std::__loop<char>::__init_repeat[abi:ne180100](result, a2);
    }
    goto LABEL_23;
  }
  *int v4 = 0;
  if (*((void *)result + 4))
  {
    if (*((void *)result + 3))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_22;
    }
LABEL_23:
    *(_DWORD *)a2 = -992;
    return result;
  }
  *(_DWORD *)a2 = -994;
LABEL_25:
  a2[10] = *((void *)result + 2);
  return result;
}

unsigned int *std::__loop<char>::__exec_split(unsigned int *result, int a2, void *a3)
{
  *(_DWORD *)a3 = -994;
  if (*((unsigned __int8 *)result + 52) == a2)
  {
    a3[10] = *((void *)result + 2);
  }
  else
  {
    a3[10] = *((void *)result + 1);
    return std::__loop<char>::__init_repeat[abi:ne180100](result, a3);
  }
  return result;
}

void std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = std::__owns_two_states<char>::~__owns_two_states(a1);

  operator delete(v1);
}

void (__cdecl ***std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1EE2F87B8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  uint64_t v3 = a1[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }
  return a1;
}

unsigned int *std::__loop<char>::__init_repeat[abi:ne180100](unsigned int *result, void *a2)
{
  unsigned int v2 = result[11];
  *(void *)(a2[7] + 16 * result[10] + 8) = a2[2];
  unsigned int v3 = result[12];
  if (v2 != v3)
  {
    uint64_t v4 = v2 - 1;
    uint64_t v5 = a2[3];
    uint64_t v6 = v3 - 1 - v4;
    unint64_t v7 = (unsigned char *)(a2[4] + 24 * v4 + 16);
    do
    {
      *((void *)v7 - 2) = v5;
      *((void *)v7 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v5;
      *unint64_t v7 = 0;
      v7 += 24;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t std::__repeat_one_loop<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = std::__owns_two_states<char>::~__owns_two_states(a1);

  operator delete(v1);
}

void std::__alternate<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t std::__alternate<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)a3 = -994;
  uint64_t v3 = 8;
  if (a2) {
    uint64_t v3 = 16;
  }
  *(void *)(a3 + 80) = *(void *)(result + v3);
  return result;
}

uint64_t std::__empty_non_own_state<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x192FECF60](exception, 15);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_19207F2A0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  uint64_t v3 = a2;
  if (a2 != a3)
  {
    std::vector<char>::pointer end = a1->__end_;
    marked_size_t count = a1->__marked_count_;
    int v9 = (unsigned __int8 *)(a2 + 1);
    int v8 = *a2;
    if (a2 + 1 != a3 || v8 != 36)
    {
      if ((v8 - 46) > 0x2E || ((1 << (v8 - 46)) & 0x600000000001) == 0)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v8);
        goto LABEL_32;
      }
      if (v9 == (unsigned __int8 *)a3 || v8 != 92)
      {
        if (v8 == 46)
        {
          uint64_t v18 = (std::__node<char> *)operator new(0x10uLL);
          first = end->__first_;
          v18->__vftable = (std::__node<char>_vtbl *)&unk_1EE2F8698;
          v18[1].__vftable = (std::__node<char>_vtbl *)first;
          end->__first_ = v18;
          a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
          goto LABEL_32;
        }
      }
      else
      {
        int v17 = (char)*v9;
        if ((v17 - 36) <= 0x3A && ((1 << (v17 - 36)) & 0x580000000000441) != 0)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v17);
          int v9 = (unsigned __int8 *)(v3 + 2);
          goto LABEL_32;
        }
      }
    }
    uint64_t v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)a1, a2, a3);
    unint64_t v11 = v10;
    if (v10 == v3 && v10 != a3)
    {
      if (v9 == (unsigned __int8 *)a3 || *v3 != 92) {
        return v3;
      }
      int v12 = *v9;
      if (v12 == 40)
      {
        uint64_t v13 = (uint64_t)(v3 + 2);
        std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
        unsigned int v14 = a1->__marked_count_;
        do
        {
          long long v15 = (char *)v13;
          uint64_t v13 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(a1, v13, a3);
        }
        while ((char *)v13 != v15);
        if (v15 == a3 || v15 + 1 == a3 || *v15 != 92 || v15[1] != 41) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
        unint64_t v11 = v15 + 2;
        std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, v14);
      }
      else
      {
        BOOL v20 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(a1, v12);
        uint64_t v21 = 2;
        if (!v20) {
          uint64_t v21 = 0;
        }
        unint64_t v11 = &v3[v21];
      }
    }
    int v9 = (unsigned __int8 *)v11;
    if (v11 != v3)
    {
LABEL_32:
      if (v9 == (unsigned __int8 *)a3) {
        return a3;
      }
      size_t v22 = a1->__marked_count_ + 1;
      int v23 = *v9;
      if (v23 == 42)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, 0, 0xFFFFFFFFFFFFFFFFLL, end, marked_count + 1, a1->__marked_count_ + 1, 1);
        return (char *)(v9 + 1);
      }
      if (v9 + 1 == (unsigned __int8 *)a3 || v23 != 92 || v9[1] != 123) {
        return (char *)v9;
      }
      int v33 = 0;
      std::vector<char>::pointer v24 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v9 + 2, (unsigned __int8 *)a3, &v33);
      if (v24 == v9 + 2) {
LABEL_48:
      }
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
      if (v24 != (unsigned __int8 *)a3)
      {
        char v25 = (char *)(v24 + 1);
        int v26 = *v24;
        if (v26 == 44)
        {
          int v32 = -1;
          uint64_t v27 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v24 + 1, (unsigned __int8 *)a3, &v32);
          if (v27 != (unsigned __int8 *)a3 && v27 + 1 != (unsigned __int8 *)a3 && *v27 == 92 && v27[1] == 125)
          {
            size_t v29 = v32;
            size_t v28 = v33;
            if (v32 == -1)
            {
              size_t v29 = -1;
            }
            else if (v32 < v33)
            {
              goto LABEL_48;
            }
            uint64_t v3 = (char *)&v27[2 * (v27[1] == 125)];
            size_t v30 = a1;
LABEL_56:
            std::basic_regex<char,std::regex_traits<char>>::__push_loop(v30, v28, v29, end, marked_count + 1, v22, 1);
            return v3;
          }
        }
        else if (v25 != a3 && v26 == 92 && *v25 == 125)
        {
          uint64_t v3 = (char *)(v24 + 2);
          size_t v28 = v33;
          size_t v30 = a1;
          size_t v29 = v33;
          goto LABEL_56;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
  }
  return v3;
}

void (__cdecl ***std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  unsigned int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_any<char>::~__match_any(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  unsigned int v2 = __p[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }

  operator delete(__p);
}

uint64_t std::__match_any<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(unsigned char **)(a2 + 16);
  if (v2 == *(unsigned char **)(a2 + 24) || !*v2)
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 80) = v3;
  return result;
}

BOOL std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(std::basic_regex<char> *this, char a2)
{
  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8) {
    return 0;
  }
  if (a2 - 48 > this->__marked_count_) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, a2 - 48);
  return 1;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  uint64_t v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, a2, a3);
  if (v6 == (unsigned __int8 *)a2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  }
  do
  {
    unint64_t v7 = v6;
    uint64_t v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, (char *)v6, a3);
  }
  while (v6 != v7);
  return v7;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  std::vector<char>::pointer end = this->__end_;
  marked_size_t count = this->__marked_count_;
  if (a2 == a3)
  {
LABEL_24:
    unsigned int v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
    goto LABEL_25;
  }
  int v8 = *a2;
  int v9 = *a2;
  uint64_t v10 = (v8 - 36);
  if (v10 > 0x3A) {
    goto LABEL_13;
  }
  if (((1 << (v8 - 36)) & 0x5800000080004D1) == 0)
  {
    if (v10 == 5)
    {
      if (this->__open_count_) {
        goto LABEL_4;
      }
LABEL_14:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v9);
LABEL_32:
      unint64_t v11 = (unsigned __int8 *)(a2 + 1);
      goto LABEL_37;
    }
LABEL_13:
    if ((v8 - 123) < 2) {
      goto LABEL_4;
    }
    goto LABEL_14;
  }
LABEL_4:
  unint64_t v11 = (unsigned __int8 *)(a2 + 1);
  if (a2 + 1 == a3 || v9 != 92)
  {
LABEL_22:
    if (v9 == 46)
    {
      int v17 = (std::__node<char> *)operator new(0x10uLL);
      uint64_t v18 = this->__end_;
      first = v18->__first_;
      v17->__vftable = (std::__node<char>_vtbl *)&unk_1EE2F8698;
      v17[1].__vftable = (std::__node<char>_vtbl *)first;
      v18->__first_ = v17;
      this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      goto LABEL_37;
    }
    goto LABEL_24;
  }
  int v12 = (char)*v11;
  char v13 = *v11;
  if (((v12 - 36) > 0x3A || ((1 << (v12 - 36)) & 0x5800000080004F1) == 0)
    && (v12 - 123) >= 3)
  {
    if ((this->__flags_ & 0x1F0) == 0x40)
    {
      unsigned int v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>(this, a2 + 1, a3, 0);
    }
    else
    {
      BOOL v15 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(this, v13);
      uint64_t v16 = 2;
      if (!v15) {
        uint64_t v16 = 0;
      }
      unsigned int v14 = &a2[v16];
    }
    if (v14 != a2)
    {
LABEL_25:
      if (v14 == a2 && v14 != a3)
      {
        int v20 = *a2;
        if (v20 == 36)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(this);
          goto LABEL_32;
        }
        if (v20 != 40)
        {
          if (v20 == 94)
          {
            std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(this);
            goto LABEL_32;
          }
          return (unsigned __int8 *)a2;
        }
        std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(this);
        unsigned int v21 = this->__marked_count_;
        ++this->__open_count_;
        size_t v22 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(this, a2 + 1, a3);
        if (v22 == a3 || (int v23 = v22, *v22 != 41)) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
        std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(this, v21);
        --this->__open_count_;
        unsigned int v14 = v23 + 1;
      }
      unint64_t v11 = (unsigned __int8 *)v14;
      if (v14 != a2) {
        goto LABEL_37;
      }
      return (unsigned __int8 *)a2;
    }
    int v9 = *a2;
    goto LABEL_22;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v13);
  unint64_t v11 = (unsigned __int8 *)(a2 + 2);
LABEL_37:
  size_t v24 = this->__marked_count_ + 1;

  return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)this, v11, (unsigned __int8 *)a3, end, marked_count + 1, v24);
}

uint64_t std::regex_match[abi:ne180100]<std::__wrap_iter<char const*>,std::allocator<std::sub_match<std::__wrap_iter<char const*>>>,char,std::regex_traits<char>>(std::sub_match<const char *> *a1, std::sub_match<const char *> *a2, uint64_t a3, uint64_t a4)
{
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v11 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v13 = 0xAAAAAAAAAAAAAA00;
  long long v15 = v7;
  uint64_t v12 = 0;
  long long v14 = 0uLL;
  LOBYTE(v15) = 0;
  BYTE8(v15) = 0;
  uint64_t v16 = 0;
  memset(__p, 0, sizeof(__p));
  int v8 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(a4, a1, a2, (std::vector<std::csub_match> *)__p, 4160);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(a3, (uint64_t)a1, (uint64_t)a2, (uint64_t *)__p, 0);
  if (*(void *)__p) {
    operator delete(*(void **)__p);
  }
  if (!v8) {
    return 0;
  }
  if (!*(unsigned char *)(a3 + 88)) {
    return 1;
  }
  uint64_t result = 0;
  *(void *)(a3 + 8) = *(void *)a3;
  return result;
}

void sub_19207FBAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(uint64_t a1, std::sub_match<const char *> *a2, std::sub_match<const char *> *a3, std::vector<std::csub_match> *this, int a5)
{
  if ((a5 & 0x80) != 0) {
    int v9 = a5 & 0xFFA;
  }
  else {
    int v9 = a5;
  }
  int v10 = *(_DWORD *)(a1 + 28);
  this[1].__begin_ = a3;
  long long v11 = (const std::vector<std::csub_match>::value_type *)&this[1];
  this[1].__end_ = a3;
  LOBYTE(this[1].__end_cap_.__value_) = 0;
  std::vector<std::sub_match<char const*>>::assign(this, (v10 + 1), (std::vector<std::csub_match>::const_reference)&this[1]);
  this[2].__begin_ = a2;
  this[2].__end_ = a2;
  LOBYTE(this[2].__end_cap_.__value_) = 0;
  *(std::pair<const char *, const char *> *)&this[3].__begin_ = v11->std::pair<const char *, const char *>;
  LOBYTE(this[3].__end_cap_.__value_) = this[1].__end_cap_.__value_;
  if ((v9 & 0x800) == 0) {
    this[4].__end_ = a2;
  }
  LOBYTE(this[4].__begin_) = 1;
  if (!std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a2, (const char *)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0))
  {
    if (a2 == a3 || (v9 & 0x40) != 0) {
      goto LABEL_18;
    }
    int v18 = v9 | 0x80;
    long long v19 = (char *)&a2->first + 1;
    if (v19 != (const char *)a3)
    {
      do
      {
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
        int v20 = std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, v19, (const char *)a3, (uint64_t *)this, v18, 0);
        std::vector<std::csub_match>::pointer begin = this->__begin_;
        std::vector<std::csub_match>::pointer end = this->__end_;
        if (v20) {
          goto LABEL_8;
        }
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3), v11);
      }
      while (++v19 != (const char *)a3);
    }
    std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
    if (!std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a3, (const char *)a3, (uint64_t *)this, v18, 0))
    {
LABEL_18:
      uint64_t result = 0;
      this->__end_ = this->__begin_;
      return result;
    }
  }
  std::vector<std::csub_match>::pointer begin = this->__begin_;
  std::vector<std::csub_match>::pointer end = this->__end_;
LABEL_8:
  if (end == begin) {
    long long v14 = v11;
  }
  else {
    long long v14 = begin;
  }
  first = (std::sub_match<const char *> *)v14->first;
  this[2].__end_ = (std::vector<std::csub_match>::pointer)v14->first;
  LOBYTE(this[2].__end_cap_.__value_) = this[2].__begin_ != first;
  second = (std::sub_match<const char *> *)v14->second;
  this[3].__begin_ = second;
  LOBYTE(this[3].__end_cap_.__value_) = second != this[3].__end_;
  return 1;
}

void std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, char a5)
{
  char v5 = a5;
  uint64_t v10 = a4[6];
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
  unint64_t v13 = *(char **)a1;
  uint64_t v12 = *(char **)(a1 + 8);
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v12[-*(void *)a1] >> 3);
  unint64_t v15 = v11 - v14;
  if (v11 <= v14)
  {
    size_t v22 = *(char **)(a1 + 8);
    if (v11 >= v14) {
      goto LABEL_24;
    }
    size_t v22 = &v13[8 * ((a4[1] - *a4) >> 3)];
    goto LABEL_20;
  }
  uint64_t v16 = *(void *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v16 - (uint64_t)v12) >> 3) >= v15)
  {
    size_t v22 = &v12[24 * v15];
    uint64_t v27 = 8 * ((a4[1] - *a4) >> 3) - 8 * ((uint64_t)&v12[-*(void *)a1] >> 3);
    do
    {
      *(void *)uint64_t v12 = 0;
      *((void *)v12 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
      v12[16] = 0;
      v12 += 24;
      v27 -= 24;
    }
    while (v27);
LABEL_20:
    *(void *)(a1 + 8) = v22;
    goto LABEL_24;
  }
  if (v11 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((v16 - (uint64_t)v13) >> 3);
  unint64_t v18 = 0x5555555555555556 * ((v16 - (uint64_t)v13) >> 3);
  if (v18 <= v11) {
    unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
  }
  if (v17 >= 0x555555555555555) {
    unint64_t v19 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v19 = v18;
  }
  if (v19 > 0xAAAAAAAAAAAAAAALL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  int v20 = (char *)operator new(24 * v19);
  unsigned int v21 = &v20[24 * v14];
  size_t v22 = &v20[24 * v11];
  int v23 = v21;
  uint64_t v24 = 24 * v11 - 24 * v14;
  do
  {
    *(void *)int v23 = 0;
    *((void *)v23 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
    v23[16] = 0;
    v23 += 24;
    v24 -= 24;
  }
  while (v24);
  char v25 = &v20[24 * v19];
  if (v12 == v13)
  {
    char v5 = a5;
  }
  else
  {
    char v5 = a5;
    do
    {
      long long v26 = *(_OWORD *)(v12 - 24);
      *((void *)v21 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = *((void *)v12 - 1);
      *(_OWORD *)(v21 - 24) = v26;
      v21 -= 24;
      v12 -= 24;
    }
    while (v12 != v13);
    uint64_t v12 = v13;
  }
  *(void *)a1 = v21;
  *(void *)(a1 + 8) = v22;
  *(void *)(a1 + 16) = v25;
  if (v12)
  {
    operator delete(v12);
    size_t v22 = *(char **)(a1 + 8);
  }
LABEL_24:
  size_t v28 = *(char **)a1;
  if (v22 != *(char **)a1)
  {
    uint64_t v29 = 0;
    unint64_t v30 = 0;
    uint64_t v32 = *a4;
    uint64_t v31 = a4[1];
    do
    {
      unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((v31 - v32) >> 3);
      char v34 = (void *)(v32 + v29);
      if (v33 <= v30) {
        uint64_t v35 = a4 + 3;
      }
      else {
        uint64_t v35 = v34;
      }
      *(void *)&v28[v29] = a2 + *v35 - v10;
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v30) {
        char v36 = a4 + 3;
      }
      else {
        char v36 = (uint64_t *)(*a4 + v29);
      }
      *(void *)(*(void *)a1 + v29 + 8) = a2 + v36[1] - v10;
      uint64_t v32 = *a4;
      uint64_t v31 = a4[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v31 - *a4) >> 3) <= v30) {
        char v37 = a4 + 3;
      }
      else {
        char v37 = (uint64_t *)(*a4 + v29);
      }
      char v38 = *((unsigned char *)v37 + 16);
      size_t v28 = *(char **)a1;
      uint64_t v39 = *(void *)(a1 + 8);
      *(unsigned char *)(*(void *)a1 + v29 + 16) = v38;
      ++v30;
      v29 += 24;
    }
    while (v30 < 0xAAAAAAAAAAAAAAABLL * ((v39 - (uint64_t)v28) >> 3));
  }
  *(void *)(a1 + 24) = a3;
  *(void *)(a1 + 32) = a3;
  *(unsigned char *)(a1 + 40) = 0;
  uint64_t v40 = a2 + a4[6] - v10;
  *(void *)(a1 + 48) = v40;
  *(void *)(a1 + 56) = a2 + a4[7] - v10;
  *(unsigned char *)(a1 + 64) = *((unsigned char *)a4 + 64);
  *(void *)(a1 + 72) = a2 + a4[9] - v10;
  *(void *)(a1 + 80) = a2 + a4[10] - v10;
  *(unsigned char *)(a1 + 88) = *((unsigned char *)a4 + 88);
  if ((v5 & 1) == 0) {
    *(void *)(a1 + 104) = v40;
  }
  *(unsigned char *)(a1 + 96) = *((unsigned char *)a4 + 96);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  int v7 = a5;
  uint64_t v10 = a2;
  if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0)
  {
    __int16 v168 = a5;
    if (*(_DWORD *)(a1 + 28))
    {
      v172[0] = 0;
      v172[1] = 0;
      *(void *)&long long v173 = 0;
      uint64_t v12 = *(void *)(a1 + 40);
      if (v12)
      {
        __x.second = a3;
        *(void *)&__x.matched = 0xAAAAAAAAAAAAAA00;
        __x.first = a3;
        *(_DWORD *)v175 = 0;
        memset(&v175[8], 0, 85);
        v172[1] = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((int64x2_t *)v172, (uint64_t)v175);
        if (*(void *)&v175[56]) {
          operator delete(*(void **)&v175[56]);
        }
        if (*(void *)&v175[32]) {
          operator delete(*(void **)&v175[32]);
        }
        v153 = a4;
        unint64_t v13 = v172[1];
        *((_DWORD *)v172[1] - 24) = 0;
        *(v13 - 1ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v10;
        *(v13 - 10) = v10;
        v166 = a3;
        *(v13 - 9) = a3;
        std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v13 - 8), *(unsigned int *)(a1 + 28), &__x);
        std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)((char *)v172[1] - 40), *(unsigned int *)(a1 + 32));
        v160 = 0;
        v162 = 0;
        v157 = 0;
        uint64_t v159 = 0;
        v155 = 0;
        v156 = 0;
        v169 = 0;
        char v14 = 0;
        unsigned int v15 = 0;
        v164 = v10;
        uint64_t v16 = (const char *)(a3 - v10);
        unint64_t v17 = v172[1];
        *((void *)v172[1] - 2) = v12;
        *(v17 - 2) = v7;
        *((unsigned char *)v17 - 4) = a6;
        do
        {
          BOOL v18 = (++v15 & 0xFFF) != 0 || (int)(v15 >> 12) < (int)v16;
          if (!v18) {
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
          }
          int v20 = v17 - 4;
          uint64_t v19 = *((void *)v17 - 2);
          unsigned int v21 = v17 - 24;
          if (v19) {
            (*(void (**)(uint64_t, _DWORD *))(*(void *)v19 + 16))(v19, v17 - 24);
          }
          switch(*(_DWORD *)v21)
          {
            case 0xFFFFFC18:
              size_t v22 = (const char *)*((void *)v17 - 10);
              if ((v168 & 0x20) != 0 && v22 == v164 || (v168 & 0x1000) != 0 && v22 != v166) {
                goto LABEL_21;
              }
              unint64_t v30 = v169;
              if ((v14 & ((uint64_t)v169 >= (uint64_t)&v22[-*((void *)v17 - 11)])) == 0)
              {
                v170 = &v22[-*((void *)v17 - 11)];
                uint64_t v32 = (long long *)*((void *)v17 - 8);
                uint64_t v31 = (long long *)*((void *)v17 - 7);
                unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * (((char *)v31 - (char *)v32) >> 3);
                if (0xAAAAAAAAAAAAAAABLL * ((v159 - (uint64_t)v162) >> 3) >= v33)
                {
                  char v38 = v157;
                  uint64_t v40 = (uint64_t)v155;
                  if (0xAAAAAAAAAAAAAAABLL * ((v157 - v162) >> 3) >= v33)
                  {
                    unint64_t v41 = v156;
                    if (v32 == v31)
                    {
                      int v50 = v162;
                    }
                    else
                    {
                      std::string::size_type v49 = v162;
                      int v50 = v162;
                      do
                      {
                        *(_OWORD *)std::string::size_type v49 = *v32;
                        v49[16] = *((unsigned char *)v32 + 16);
                        v50 += 24;
                        uint64_t v32 = (long long *)((char *)v32 + 24);
                        v49 += 24;
                      }
                      while (v32 != v31);
                    }
                    int64_t v48 = v50 - v162;
                    char v38 = v162;
                  }
                  else
                  {
                    int64x2_t v43 = (long long *)((char *)v32 + 8 * ((v157 - v162) >> 3));
                    unint64_t v41 = v156;
                    if (v157 != v162)
                    {
                      uint64_t v44 = v162;
                      do
                      {
                        *(_OWORD *)uint64_t v44 = *v32;
                        v44[16] = *((unsigned char *)v32 + 16);
                        uint64_t v32 = (long long *)((char *)v32 + 24);
                        v44 += 24;
                      }
                      while (v32 != v43);
                    }
                    std::string::size_type v45 = v157;
                    if (v43 != v31)
                    {
                      uint64_t v46 = v157;
                      do
                      {
                        long long v47 = *v43;
                        *((void *)v46 + 2) = *((void *)v43 + 2);
                        *(_OWORD *)uint64_t v46 = v47;
                        v46 += 24;
                        int64x2_t v43 = (long long *)((char *)v43 + 24);
                        v45 += 24;
                      }
                      while (v43 != v31);
                    }
                    int64_t v48 = v45 - v157;
                  }
                }
                else
                {
                  if (v162)
                  {
                    operator delete(v162);
                    uint64_t v159 = 0;
                  }
                  if (v33 > 0xAAAAAAAAAAAAAAALL) {
                    goto LABEL_218;
                  }
                  unint64_t v34 = 0x5555555555555556 * (v159 >> 3);
                  if (v34 <= v33) {
                    unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * (((char *)v31 - (char *)v32) >> 3);
                  }
                  unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * (v159 >> 3) >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v34;
                  if (v35 > 0xAAAAAAAAAAAAAAALL) {
LABEL_218:
                  }
                    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                  char v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(v35);
                  char v38 = v36;
                  uint64_t v39 = v36;
                  if (v32 == v31)
                  {
                    uint64_t v40 = (uint64_t)v155;
                    unint64_t v41 = v156;
                  }
                  else
                  {
                    uint64_t v40 = (uint64_t)v155;
                    unint64_t v41 = v156;
                    do
                    {
                      long long v42 = *v32;
                      *((void *)v39 + 2) = *((void *)v32 + 2);
                      *(_OWORD *)uint64_t v39 = v42;
                      v39 += 24;
                      uint64_t v32 = (long long *)((char *)v32 + 24);
                    }
                    while (v32 != v31);
                  }
                  uint64_t v159 = (uint64_t)&v36[24 * v37];
                  int64_t v48 = v39 - v36;
                  v162 = v36;
                }
                uint64_t v52 = (char *)*((void *)v17 - 5);
                long long v51 = (char *)*((void *)v17 - 4);
                unint64_t v53 = (v51 - v52) >> 4;
                if (v53 <= (v40 - (uint64_t)v160) >> 4)
                {
                  unint64_t v61 = (v41 - v160) >> 4;
                  if (v61 >= v53)
                  {
                    if (v52 == v51)
                    {
                      uint64_t v69 = v160;
                      unint64_t v30 = v170;
                    }
                    else
                    {
                      v68 = v160;
                      uint64_t v69 = v160;
                      unint64_t v30 = v170;
                      do
                      {
                        *(void *)v68 = *(void *)v52;
                        *((void *)v68 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = *((void *)v52 + 1);
                        v69 += 16;
                        v52 += 16;
                        v68 += 16;
                      }
                      while (v52 != v51);
                    }
                    int64_t v67 = v69 - v160;
                    unint64_t v41 = v160;
                  }
                  else
                  {
                    std::string::size_type v62 = &v52[16 * v61];
                    if (v41 != v160)
                    {
                      uint64_t v63 = v160;
                      do
                      {
                        *(void *)uint64_t v63 = *(void *)v52;
                        *((void *)v63 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = *((void *)v52 + 1);
                        v52 += 16;
                        v63 += 16;
                      }
                      while (v52 != v62);
                    }
                    unint64_t v30 = v170;
                    long long v64 = v41;
                    if (v62 != v51)
                    {
                      char v65 = v41;
                      do
                      {
                        long long v66 = *(_OWORD *)v62;
                        v62 += 16;
                        *(_OWORD *)char v65 = v66;
                        v65 += 16;
                        v64 += 16;
                      }
                      while (v62 != v51);
                    }
                    int64_t v67 = v64 - v41;
                  }
                }
                else
                {
                  int64_t v158 = v48;
                  size_t v54 = v38;
                  if (v160)
                  {
                    operator delete(v160);
                    uint64_t v40 = 0;
                  }
                  if (v51 - v52 < 0) {
                    goto LABEL_217;
                  }
                  uint64_t v55 = v40 >> 3;
                  if (v40 >> 3 <= v53) {
                    uint64_t v55 = (v51 - v52) >> 4;
                  }
                  unint64_t v56 = (unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v55;
                  if (v56 >> 60) {
LABEL_217:
                  }
                    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                  int64_t v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>(v56);
                  unint64_t v59 = v57;
                  while (v52 != v51)
                  {
                    long long v60 = *(_OWORD *)v52;
                    v52 += 16;
                    *(_OWORD *)unint64_t v59 = v60;
                    v59 += 16;
                  }
                  unint64_t v41 = v57;
                  v155 = &v57[16 * v58];
                  int64_t v67 = v59 - v57;
                  v160 = v57;
                  char v38 = v54;
                  unint64_t v30 = v170;
                  int64_t v48 = v158;
                }
                v157 = &v38[v48];
                v156 = &v41[v67];
              }
              v70 = v172[1];
              if (v30 == v16)
              {
                size_t v71 = v172[0];
                while (v70 != v71)
                {
                  v70 -= 12;
                  std::__destroy_at[abi:ne180100]<std::__state<char>,0>(v70);
                }
                v172[1] = v71;
                char v14 = 1;
                v169 = v16;
              }
              else
              {
                v169 = v30;
                size_t v72 = (char *)v172[1] - 96;
                std::__destroy_at[abi:ne180100]<std::__state<char>,0>((void *)v172[1] - 12);
                v172[1] = v72;
                char v14 = 1;
              }
              break;
            case 0xFFFFFC1D:
            case 0xFFFFFC1E:
            case 0xFFFFFC21:
              break;
            case 0xFFFFFC1F:
LABEL_21:
              int v23 = (char *)v172[1] - 96;
              std::__destroy_at[abi:ne180100]<std::__state<char>,0>((void *)v172[1] - 12);
              v172[1] = v23;
              break;
            case 0xFFFFFC20:
              *(void *)&long long v24 = 0xAAAAAAAAAAAAAAAALL;
              *((void *)&v24 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
              *(_OWORD *)&v175[64] = v24;
              *(_OWORD *)&v175[80] = v24;
              *(_OWORD *)&v175[32] = v24;
              *(_OWORD *)&v175[48] = v24;
              *(_OWORD *)v175 = v24;
              *(_OWORD *)&v175[16] = v24;
              long long v25 = *((_OWORD *)v17 - 5);
              *(_OWORD *)v175 = *v21;
              *(_OWORD *)&v175[16] = v25;
              memset(&v175[32], 0, 24);
              std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v175[32], *((long long **)v17 - 8), *((long long **)v17 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v17 - 7) - *((void *)v17 - 8)) >> 3));
              memset(&v175[56], 0, 24);
              std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(&v175[56], *((long long **)v17 - 5), *((long long **)v17 - 4), (uint64_t)(*((void *)v17 - 4) - *((void *)v17 - 5)) >> 4);
              uint64_t v26 = *v20;
              *(void *)&v175[85] = *(void *)((char *)v17 - 11);
              *(void *)&v175[80] = v26;
              (*(void (**)(void, uint64_t, _DWORD *))(*(void *)*v20 + 24))(*v20, 1, v17 - 24);
              (*(void (**)(void, void, unsigned char *))(**(void **)&v175[80] + 24))(*(void *)&v175[80], 0, v175);
              uint64_t v27 = (char *)v172[1];
              if (v172[1] >= (void *)v173)
              {
                v172[1] = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((int64x2_t *)v172, (uint64_t)v175);
                if (*(void *)&v175[56])
                {
                  *(void *)&v175[64] = *(void *)&v175[56];
                  operator delete(*(void **)&v175[56]);
                }
              }
              else
              {
                long long v28 = *(_OWORD *)&v175[16];
                *(_OWORD *)v172[1] = *(_OWORD *)v175;
                *((_OWORD *)v27 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v28;
                *((void *)v27 + 4) = 0;
                *((void *)v27 + 5) = 0;
                *((void *)v27 + 6) = 0;
                *((void *)v27 + 7) = 0;
                *((_OWORD *)v27 + 2) = *(_OWORD *)&v175[32];
                *((void *)v27 + 6) = *(void *)&v175[48];
                memset(&v175[32], 0, 24);
                *((void *)v27 + 8) = 0;
                *((void *)v27 + 9) = 0;
                *(_OWORD *)(v27 + 56) = *(_OWORD *)&v175[56];
                *((void *)v27 + 9) = *(void *)&v175[72];
                memset(&v175[56], 0, 24);
                uint64_t v29 = *(void *)&v175[80];
                *(void *)(v27 + 85) = *(void *)&v175[85];
                *((void *)v27 + 10) = v29;
                v172[1] = v27 + 96;
              }
              if (*(void *)&v175[32])
              {
                *(void *)&v175[40] = *(void *)&v175[32];
                operator delete(*(void **)&v175[32]);
              }
              break;
            default:
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
          }
          unint64_t v17 = v172[1];
        }
        while (v172[0] != v172[1]);
        if (v14)
        {
          uint64_t v74 = *v153;
          std::ctype_base::mask v75 = v162;
          *(void *)uint64_t v74 = v164;
          *(void *)(v74 + 8) = &v169[(void)v164];
          *(unsigned char *)(v74 + 16) = 1;
          if (v157 != v162)
          {
            std::string v76 = v162 + 16;
            unsigned int v77 = 1;
            do
            {
              uint64_t v78 = v74 + 24 * v77;
              *(_OWORD *)uint64_t v78 = *((_OWORD *)v76 - 1);
              char v79 = *v76;
              v76 += 24;
              *(unsigned char *)(v78 + 16) = v79;
              BOOL v18 = 0xAAAAAAAAAAAAAAABLL * ((v157 - v162) >> 3) > v77++;
            }
            while (v18);
          }
        }
        else
        {
          std::ctype_base::mask v75 = v162;
        }
        if (v160) {
          operator delete(v160);
        }
        if (v75) {
          operator delete(v75);
        }
      }
      else
      {
        char v14 = 0;
      }
      *(void *)v175 = v172;
      std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v175);
    }
    else
    {
      long long v173 = 0u;
      int64x2_t v174 = 0u;
      *(_OWORD *)v172 = 0u;
      uint64_t v80 = *(void *)(a1 + 40);
      if (v80)
      {
        *(_DWORD *)v175 = 0;
        memset(&v175[8], 0, 85);
        std::deque<std::__state<char>>::push_back(v172, (uint64_t)v175);
        if (*(void *)&v175[56]) {
          operator delete(*(void **)&v175[56]);
        }
        if (*(void *)&v175[32]) {
          operator delete(*(void **)&v175[32]);
        }
        v154 = a4;
        int v81 = v172[1];
        unint64_t v82 = v174.i64[1] + v174.i64[0] - 1;
        unint64_t v83 = v82 / 0x2A;
        uint64_t v84 = *((void *)v172[1] + v82 / 0x2A);
        unint64_t v85 = 3 * (v82 % 0x2A);
        uint64_t v86 = v84 + 32 * v85;
        *(_DWORD *)uint64_t v86 = 0;
        *(void *)(v86 + 8) = v10;
        *(void *)(v81[v83] + 32 * v85 + 16) = v10;
        *(void *)(v81[v83] + 32 * v85 + 24) = a3;
        std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)(v81[v83] + 32 * v85 + 56), *(unsigned int *)(a1 + 32));
        v161 = 0;
        char v163 = 0;
        unsigned int v87 = 0;
        v167 = a3;
        v171 = (const char *)(a3 - v10);
        uint64_t v88 = v174.i64[1];
        std::string v89 = v172[1];
        unint64_t v90 = v174.i64[1] + v174.i64[0] - 1;
        unint64_t v91 = v90 / 0x2A;
        unint64_t v92 = 3 * (v90 % 0x2A);
        *(void *)(*((void *)v172[1] + v91) + 32 * v92 + 80) = v80;
        uint64_t v93 = v89[v91] + 32 * v92;
        *(_DWORD *)(v93 + 88) = v7;
        *(unsigned char *)(v93 + 92) = a6;
        while (2)
        {
          if ((++v87 & 0xFFF) == 0 && (int)(v87 >> 12) >= (int)v171) {
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
          }
          unint64_t v95 = v88 + v174.i64[0] - 1;
          uint64_t v96 = *((void *)v172[1] + v95 / 0x2A);
          unint64_t v97 = v95 % 0x2A;
          uint64_t v98 = v96 + 96 * (v95 % 0x2A);
          v100 = (void *)(v98 + 80);
          uint64_t v99 = *(void *)(v98 + 80);
          if (v99) {
            (*(void (**)(uint64_t, unint64_t))(*(void *)v99 + 16))(v99, v96 + 96 * v97);
          }
          switch(*(_DWORD *)v98)
          {
            case 0xFFFFFC18:
              v101 = *(const char **)(v96 + 96 * v97 + 16);
              BOOL v102 = (v7 & 0x1000) == 0 || v101 == v167;
              char v103 = v102;
              BOOL v104 = v101 != v10 || (v7 & 0x20) == 0;
              if (!v104 || (v103 & 1) == 0) {
                goto LABEL_201;
              }
              uint64_t v105 = (uint64_t)&v101[-*(void *)(v96 + 96 * v97 + 8)];
              v106 = v161;
              if ((v163 & ((uint64_t)v161 >= v105)) == 0) {
                v106 = (const char *)v105;
              }
              if (v106 != v171)
              {
                v161 = v106;
                std::deque<std::__state<char>>::pop_back(v172);
                char v163 = 1;
                goto LABEL_202;
              }
              v107 = (void **)v172[1];
              v108 = (unsigned char *)v173;
              if ((void *)v173 == v172[1])
              {
                v108 = v172[1];
              }
              else
              {
                v109 = (char *)v172[1] + 8 * (v174.i64[0] / 0x2AuLL);
                v110 = (void *)(*v109 + 96 * (v174.i64[0] % 0x2AuLL));
                unint64_t v111 = *((void *)v172[1] + (v174.i64[1] + v174.i64[0]) / 0x2AuLL)
                     + 96 * ((v174.i64[1] + v174.i64[0]) % 0x2AuLL);
                if (v110 != (void *)v111)
                {
                  do
                  {
                    std::__destroy_at[abi:ne180100]<std::__state<char>,0>(v110);
                    v110 += 12;
                    if ((void *)((char *)v110 - *v109) == (void *)4032)
                    {
                      v112 = (void *)v109[1];
                      ++v109;
                      v110 = v112;
                    }
                  }
                  while (v110 != (void *)v111);
                  v107 = (void **)v172[1];
                  v108 = (unsigned char *)v173;
                }
                LOWORD(v7) = v168;
              }
              v174.i64[1] = 0;
              unint64_t v143 = v108 - (unsigned char *)v107;
              if (v143 >= 0x11)
              {
                do
                {
                  operator delete(*v107);
                  v107 = (void **)((char *)v172[1] + 8);
                  v172[1] = v107;
                  unint64_t v143 = v173 - (void)v107;
                }
                while ((void)v173 - (void)v107 > 0x10uLL);
              }
              if (v143 >> 3 == 1)
              {
                uint64_t v144 = 21;
              }
              else
              {
                if (v143 >> 3 != 2) {
                  goto LABEL_189;
                }
                uint64_t v144 = 42;
              }
              v174.i64[0] = v144;
LABEL_189:
              char v163 = 1;
              v161 = v171;
LABEL_202:
              uint64_t v88 = v174.i64[1];
              if (v174.i64[1]) {
                continue;
              }
              if ((v163 & 1) == 0) {
                goto LABEL_205;
              }
              uint64_t v152 = *v154;
              *(void *)uint64_t v152 = v10;
              *(void *)(v152 + 8) = &v161[(void)v10];
              char v14 = 1;
              *(unsigned char *)(v152 + 16) = 1;
              break;
            case 0xFFFFFC19:
            case 0xFFFFFC1E:
            case 0xFFFFFC21:
              goto LABEL_202;
            case 0xFFFFFC1D:
              unint64_t v113 = v174.i64[0];
              v114 = (char *)v172[1];
              v115 = (char *)v173;
              if (!v174.i64[0])
              {
                unint64_t v119 = (uint64_t)(v173 - (unint64_t)v172[1]) >> 3;
                uint64_t v120 = 42 * v119 - 1;
                if ((void *)v173 == v172[1]) {
                  uint64_t v120 = 0;
                }
                if ((unint64_t)(v120 - v174.i64[1]) < 0x2A)
                {
                  if (v119 >= (uint64_t)(*((void *)&v173 + 1) - (unint64_t)v172[0]) >> 3)
                  {
                    if (*((void **)&v173 + 1) == v172[0]) {
                      unint64_t v121 = 1;
                    }
                    else {
                      unint64_t v121 = (uint64_t)(*((void *)&v173 + 1) - (unint64_t)v172[0]) >> 2;
                    }
                    *(void *)&v175[32] = (char *)&v173 + 8;
                    *(void *)v175 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v121);
                    *(void *)&v175[8] = *(void *)v175;
                    *(void *)&v175[16] = *(void *)v175;
                    *(void *)&v175[24] = *(void *)v175 + 8 * v122;
                    v165 = v10;
                    __x.first = (const char *)operator new(0xFC0uLL);
                    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(v175, &__x);
                    v123 = (uint64_t *)v172[1];
                    v124 = *(char **)&v175[16];
                    for (LOWORD(v7) = v168; v123 != (uint64_t *)v173; *(void *)&v175[16] += 8)
                    {
                      if (v124 == *(char **)&v175[24])
                      {
                        v125 = *(char **)&v175[8];
                        v126 = *(void **)v175;
                        if (*(void *)&v175[8] <= *(void *)v175)
                        {
                          if (v124 == *(char **)v175) {
                            unint64_t v133 = 1;
                          }
                          else {
                            unint64_t v133 = (uint64_t)&v124[-*(void *)v175] >> 2;
                          }
                          v134 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v133);
                          uint64_t v136 = v124 - v125;
                          BOOL v102 = v124 == v125;
                          v124 = &v134[8 * (v133 >> 2)];
                          if (!v102)
                          {
                            v124 = &v134[8 * (v133 >> 2) + (v136 & 0xFFFFFFFFFFFFFFF8)];
                            uint64_t v137 = 8 * (v136 >> 3);
                            v138 = &v134[8 * (v133 >> 2)];
                            do
                            {
                              uint64_t v139 = *(void *)v125;
                              v125 += 8;
                              *(void *)v138 = v139;
                              v138 += 8;
                              v137 -= 8;
                            }
                            while (v137);
                          }
                          *(void *)v175 = v134;
                          *(void *)&v175[8] = &v134[8 * (v133 >> 2)];
                          *(void *)&v175[16] = v124;
                          *(void *)&v175[24] = &v134[8 * v135];
                          if (v126) {
                            operator delete(v126);
                          }
                        }
                        else
                        {
                          uint64_t v127 = (uint64_t)(*(void *)&v175[8] - *(void *)v175) >> 3;
                          if (v127 >= -1) {
                            uint64_t v128 = v127 + 1;
                          }
                          else {
                            uint64_t v128 = v127 + 2;
                          }
                          uint64_t v129 = *(void *)&v175[8] - 8 * (v128 >> 1);
                          size_t v130 = (size_t)&v124[-*(void *)&v175[8]];
                          if (v124 != *(char **)&v175[8])
                          {
                            v131 = (void *)(*(void *)&v175[8] - 8 * (v128 >> 1));
                            memmove(v131, *(const void **)&v175[8], v130);
                            uint64_t v129 = (uint64_t)v131;
                            v124 = v125;
                          }
                          v132 = &v124[-8 * (v128 >> 1)];
                          v124 = (char *)(v129 + v130);
                          *(void *)&v175[8] = v132;
                          *(void *)&v175[16] = v129 + v130;
                        }
                        LOWORD(v7) = v168;
                      }
                      uint64_t v140 = *v123++;
                      *(void *)v124 = v140;
                      v124 = (char *)(*(void *)&v175[16] + 8);
                    }
                    v141 = v172[0];
                    *(_OWORD *)v172 = *(_OWORD *)v175;
                    *(void *)&long long v173 = v124;
                    *((void *)&v173 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = *(void *)&v175[24];
                    uint64_t v142 = 21;
                    if (&v124[-*(void *)&v175[8]] != (char *)8) {
                      uint64_t v142 = v174.i64[0] + 42;
                    }
                    v174.i64[0] = v142;
                    uint64_t v10 = v165;
                    if (v141) {
                      operator delete(v141);
                    }
                  }
                  else
                  {
                    if (v172[1] == v172[0])
                    {
                      *(void *)v175 = operator new(0xFC0uLL);
                      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(v172, v175);
                      *(void *)v175 = *(void *)(v173 - 8);
                      *(void *)&long long v173 = v173 - 8;
                    }
                    else
                    {
                      *(void *)v175 = operator new(0xFC0uLL);
                    }
                    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)v172, v175);
                    uint64_t v145 = 21;
                    if ((void)v173 - (unint64_t)v172[1] != 8) {
                      uint64_t v145 = v174.i64[0] + 42;
                    }
                    v174.i64[0] = v145;
                  }
                }
                else
                {
                  v174.i64[0] = 42;
                  *(void *)v175 = *(void *)(v173 - 8);
                  *(void *)&long long v173 = v173 - 8;
                  std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)v172, v175);
                }
                unint64_t v113 = v174.i64[0];
                v114 = (char *)v172[1];
                v115 = (char *)v173;
              }
              v146 = &v114[8 * (v113 / 0x2A)];
              unint64_t v147 = *(void *)v146 + 96 * (v113 % 0x2A);
              if (v115 == v114) {
                uint64_t v148 = 0;
              }
              else {
                uint64_t v148 = v147;
              }
              if (v148 == *(void *)v146) {
                uint64_t v148 = *((void *)v146 - 1) + 4032;
              }
              long long v149 = *(_OWORD *)(v98 + 16);
              *(_OWORD *)(v148 - 96) = *(_OWORD *)v98;
              *(_OWORD *)(v148 - 80) = v149;
              uint64_t v150 = v96 + 96 * v97;
              *(void *)(v148 - 56) = 0;
              *(void *)(v148 - 48) = 0;
              *(void *)(v148 - 64) = 0;
              *(_OWORD *)(v148 - 64) = *(_OWORD *)(v150 + 32);
              *(void *)(v148 - 48) = *(void *)(v150 + 48);
              *(void *)(v150 + 32) = 0;
              *(void *)(v150 + 40) = 0;
              *(void *)(v150 + 48) = 0;
              *(void *)(v148 - 40) = 0;
              *(void *)(v148 - 32) = 0;
              *(void *)(v148 - 24) = 0;
              *(_OWORD *)(v148 - 40) = *(_OWORD *)(v150 + 56);
              *(void *)(v148 - 24) = *(void *)(v150 + 72);
              *(void *)(v150 + 56) = 0;
              *(void *)(v150 + 64) = 0;
              *(void *)(v150 + 72) = 0;
              uint64_t v151 = *v100;
              *(void *)(v148 - 1ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = *(void *)(v98 + 85);
              *(void *)(v148 - 16) = v151;
              int64x2_t v174 = vaddq_s64(v174, (int64x2_t)xmmword_1920BDF40);
              goto LABEL_201;
            case 0xFFFFFC1F:
LABEL_201:
              std::deque<std::__state<char>>::pop_back(v172);
              goto LABEL_202;
            case 0xFFFFFC20:
              *(void *)&long long v116 = 0xAAAAAAAAAAAAAAAALL;
              *((void *)&v116 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
              *(_OWORD *)&v175[64] = v116;
              *(_OWORD *)&v175[80] = v116;
              *(_OWORD *)&v175[32] = v116;
              *(_OWORD *)&v175[48] = v116;
              *(_OWORD *)v175 = v116;
              *(_OWORD *)&v175[16] = v116;
              long long v117 = *(_OWORD *)(v98 + 16);
              *(_OWORD *)v175 = *(_OWORD *)v98;
              *(_OWORD *)&v175[16] = v117;
              memset(&v175[32], 0, 24);
              std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v175[32], *(long long **)(v96 + 96 * v97 + 32), *(long long **)(v96 + 96 * v97 + 40), 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(void *)(v96 + 96 * v97 + 40) - *(void *)(v96 + 96 * v97 + 32)) >> 3));
              memset(&v175[56], 0, 24);
              std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(&v175[56], *(long long **)(v96 + 96 * v97 + 56), *(long long **)(v96 + 96 * v97 + 64), (uint64_t)(*(void *)(v96 + 96 * v97 + 64) - *(void *)(v96 + 96 * v97 + 56)) >> 4);
              uint64_t v118 = *v100;
              *(void *)&v175[85] = *(void *)(v98 + 85);
              *(void *)&v175[80] = v118;
              (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v100 + 24))(*v100, 1, v98);
              (*(void (**)(void, void, unsigned char *))(**(void **)&v175[80] + 24))(*(void *)&v175[80], 0, v175);
              std::deque<std::__state<char>>::push_back(v172, (uint64_t)v175);
              if (*(void *)&v175[56])
              {
                *(void *)&v175[64] = *(void *)&v175[56];
                operator delete(*(void **)&v175[56]);
              }
              if (*(void *)&v175[32])
              {
                *(void *)&v175[40] = *(void *)&v175[32];
                operator delete(*(void **)&v175[32]);
              }
              goto LABEL_202;
            default:
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
          }
          break;
        }
      }
      else
      {
LABEL_205:
        char v14 = 0;
      }
      std::deque<std::__state<char>>::~deque[abi:ne180100]((uint64_t)v172);
    }
    return v14 & 1;
  }
  else
  {
    return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, a2, a3, a4, a5, a6);
  }
}

void sub_19208113C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  operator delete(v37);
  if (__p) {
    operator delete(__p);
  }
  std::deque<std::__state<char>>::~deque[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

__n128 std::deque<std::__state<char>>::push_back(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1[1];
  char v5 = (char *)a1[2];
  unint64_t v6 = (v5 - v4) >> 3;
  if (v5 == v4) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = 42 * v6 - 1;
  }
  unint64_t v8 = a1[4];
  unint64_t v9 = a1[5] + v8;
  if (v7 == v9)
  {
    if (v8 < 0x2A)
    {
      int v23 = (char *)a1[3];
      uint64_t v24 = (uint64_t)&v23[-*a1];
      if (v6 >= v24 >> 3)
      {
        if (v23 == (char *)*a1) {
          unint64_t v25 = 1;
        }
        else {
          unint64_t v25 = v24 >> 2;
        }
        unsigned int v87 = a1 + 3;
        unint64_t v83 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v25);
        uint64_t v84 = &v83[8 * v6];
        unint64_t v85 = v84;
        uint64_t v86 = &v83[8 * v26];
        unint64_t v82 = operator new(0xFC0uLL);
        std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(&v83, &v82);
        long long v28 = v83;
        uint64_t v27 = v84;
        uint64_t v29 = v85;
        unint64_t v30 = v86;
        uint64_t v31 = a1[2];
        if (v31 == a1[1])
        {
          long long v47 = v84;
        }
        else
        {
          do
          {
            if (v27 == v28)
            {
              if (v29 >= v30)
              {
                if (v30 == v27) {
                  unint64_t v37 = 1;
                }
                else {
                  unint64_t v37 = (v30 - v27) >> 2;
                }
                char v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v37);
                long long v28 = v38;
                uint64_t v32 = &v38[(2 * v37 + 6) & 0xFFFFFFFFFFFFFFF8];
                uint64_t v41 = v29 - v27;
                BOOL v40 = v29 == v27;
                uint64_t v29 = v32;
                if (!v40)
                {
                  uint64_t v29 = &v32[v41 & 0xFFFFFFFFFFFFFFF8];
                  uint64_t v42 = 8 * (v41 >> 3);
                  int64x2_t v43 = v32;
                  uint64_t v44 = v27;
                  do
                  {
                    uint64_t v45 = *(void *)v44;
                    v44 += 8;
                    *(void *)int64x2_t v43 = v45;
                    v43 += 8;
                    v42 -= 8;
                  }
                  while (v42);
                }
                unint64_t v30 = &v38[8 * v39];
                if (v27) {
                  operator delete(v27);
                }
              }
              else
              {
                uint64_t v33 = (v30 - v29) >> 3;
                if (v33 >= -1) {
                  uint64_t v34 = v33 + 1;
                }
                else {
                  uint64_t v34 = v33 + 2;
                }
                uint64_t v35 = v34 >> 1;
                uint64_t v32 = &v27[8 * (v34 >> 1)];
                char v36 = v27;
                if (v29 != v27)
                {
                  memmove(v32, v27, v29 - v27);
                  char v36 = v29;
                }
                uint64_t v29 = &v36[8 * v35];
                long long v28 = v27;
              }
            }
            else
            {
              uint64_t v32 = v27;
            }
            uint64_t v46 = *(void *)(v31 - 8);
            v31 -= 8;
            *((void *)v32 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v46;
            long long v47 = v32 - 8;
            uint64_t v27 = v47;
          }
          while (v31 != a1[1]);
        }
        std::string::size_type v62 = (char *)*a1;
        *a1 = v28;
        a1[1] = v47;
        a1[2] = v29;
        a1[3] = v30;
        if (v62) {
          operator delete(v62);
        }
        goto LABEL_54;
      }
      if (v23 != v5)
      {
        unint64_t v83 = (char *)operator new(0xFC0uLL);
        std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(a1, &v83);
LABEL_54:
        uint64_t v4 = (char *)a1[1];
        unint64_t v9 = a1[5] + a1[4];
        goto LABEL_55;
      }
      unint64_t v83 = (char *)operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)a1, &v83);
      unint64_t v59 = (void *)a1[1];
      char v5 = (char *)a1[2];
      uint64_t v61 = *v59;
      long long v60 = (char *)(v59 + 1);
      uint64_t v11 = v61;
      a1[1] = v60;
      if (v5 == (char *)a1[3])
      {
        uint64_t v67 = (uint64_t)&v60[-*a1];
        if ((unint64_t)v60 > *a1)
        {
          uint64_t v68 = v67 >> 3;
          BOOL v15 = v67 >> 3 < -1;
          uint64_t v69 = (v67 >> 3) + 2;
          if (v15) {
            uint64_t v70 = v69;
          }
          else {
            uint64_t v70 = v68 + 1;
          }
          uint64_t v71 = -(v70 >> 1);
          uint64_t v72 = v70 >> 1;
          std::string v73 = &v60[-8 * v72];
          int64_t v74 = v5 - v60;
          if (v5 != v60)
          {
            memmove(&v60[-8 * v72], v60, v5 - v60);
            long long v60 = (char *)a1[1];
          }
          char v5 = &v73[v74];
          size_t v22 = &v60[8 * v71];
          goto LABEL_14;
        }
        if (v5 == (char *)*a1) {
          unint64_t v75 = 1;
        }
        else {
          unint64_t v75 = (uint64_t)&v5[-*a1] >> 2;
        }
        std::string::size_type v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v75);
        int v50 = &v49[8 * (v75 >> 2)];
        uint64_t v52 = &v49[8 * v76];
        unsigned int v77 = (uint64_t *)a1[1];
        char v5 = v50;
        uint64_t v78 = a1[2] - (void)v77;
        if (v78)
        {
          char v5 = &v50[v78 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v79 = 8 * (v78 >> 3);
          uint64_t v80 = &v49[8 * (v75 >> 2)];
          do
          {
            uint64_t v81 = *v77++;
            *(void *)uint64_t v80 = v81;
            v80 += 8;
            v79 -= 8;
          }
          while (v79);
        }
LABEL_47:
        uint64_t v58 = (char *)*a1;
        *a1 = v49;
        a1[1] = v50;
        a1[2] = v5;
        a1[3] = v52;
        if (v58)
        {
          operator delete(v58);
          char v5 = (char *)a1[2];
        }
      }
    }
    else
    {
      a1[4] = v8 - 42;
      uint64_t v12 = *(void *)v4;
      uint64_t v10 = v4 + 8;
      uint64_t v11 = v12;
      a1[1] = v10;
      if (v5 == (char *)a1[3])
      {
        uint64_t v13 = (uint64_t)&v10[-*a1];
        if ((unint64_t)v10 > *a1)
        {
          uint64_t v14 = v13 >> 3;
          BOOL v15 = v13 >> 3 < -1;
          uint64_t v16 = (v13 >> 3) + 2;
          if (v15) {
            uint64_t v17 = v16;
          }
          else {
            uint64_t v17 = v14 + 1;
          }
          uint64_t v18 = -(v17 >> 1);
          uint64_t v19 = v17 >> 1;
          int v20 = &v10[-8 * v19];
          int64_t v21 = v5 - v10;
          if (v5 != v10)
          {
            memmove(&v10[-8 * v19], v10, v5 - v10);
            char v5 = (char *)a1[1];
          }
          size_t v22 = &v5[8 * v18];
          char v5 = &v20[v21];
LABEL_14:
          a1[1] = v22;
          a1[2] = v5;
          goto LABEL_50;
        }
        if (v5 == (char *)*a1) {
          unint64_t v48 = 1;
        }
        else {
          unint64_t v48 = (uint64_t)&v5[-*a1] >> 2;
        }
        std::string::size_type v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v48);
        int v50 = &v49[8 * (v48 >> 2)];
        uint64_t v52 = &v49[8 * v51];
        unint64_t v53 = (uint64_t *)a1[1];
        char v5 = v50;
        uint64_t v54 = a1[2] - (void)v53;
        if (v54)
        {
          char v5 = &v50[v54 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v55 = 8 * (v54 >> 3);
          unint64_t v56 = &v49[8 * (v48 >> 2)];
          do
          {
            uint64_t v57 = *v53++;
            *(void *)unint64_t v56 = v57;
            v56 += 8;
            v55 -= 8;
          }
          while (v55);
        }
        goto LABEL_47;
      }
    }
LABEL_50:
    *(void *)char v5 = v11;
    a1[2] += 8;
    goto LABEL_54;
  }
LABEL_55:
  unint64_t v63 = *(void *)&v4[8 * (v9 / 0x2A)] + 96 * (v9 % 0x2A);
  long long v64 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)unint64_t v63 = *(_OWORD *)a2;
  *(_OWORD *)(v63 + 16) = v64;
  *(void *)(v63 + 40) = 0;
  *(void *)(v63 + 48) = 0;
  *(void *)(v63 + 32) = 0;
  *(_OWORD *)(v63 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(v63 + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(v63 + 56) = 0;
  *(void *)(v63 + 64) = 0;
  *(void *)(v63 + 72) = 0;
  __n128 result = *(__n128 *)(a2 + 56);
  *(__n128 *)(v63 + 56) = result;
  *(void *)(v63 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  uint64_t v66 = *(void *)(a2 + 80);
  *(void *)(v63 + 85) = *(void *)(a2 + 85);
  *(void *)(v63 + 80) = v66;
  ++a1[5];
  return result;
}

void sub_192081734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  operator delete(v10);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::deque<std::__state<char>>::pop_back(void *a1)
{
  unint64_t v2 = a1[5] + a1[4] - 1;
  std::__destroy_at[abi:ne180100]<std::__state<char>,0>((void *)(*(void *)(a1[1] + 8 * (v2 / 0x2A))
                                                                 + 96 * (v2 % 0x2A)));
  uint64_t v3 = a1[2];
  BOOL v4 = v3 == a1[1];
  uint64_t v5 = 42 * ((v3 - a1[1]) >> 3) - 1;
  uint64_t v7 = a1[4];
  uint64_t v6 = a1[5];
  a1[5] = v6 - 1;
  if (v4) {
    uint64_t v5 = 0;
  }
  if ((unint64_t)(v5 - (v6 + v7) - 83) <= 0xFFFFFFFFFFFFFFABLL)
  {
    operator delete(*(void **)(v3 - 8));
    a1[2] -= 8;
  }
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(void *a1, void *a2)
{
  BOOL v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      int v20 = (uint64_t *)a1[1];
      BOOL v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        BOOL v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v22 = 8 * (v21 >> 3);
        int v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)int v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        BOOL v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        BOOL v4 = (char *)a1[1];
      }
      BOOL v15 = &v4[8 * v11];
      BOOL v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)BOOL v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front(uint64_t a1, void *a2)
{
  BOOL v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = (v7 - v4) >> 2;
      }
      uint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      BOOL v15 = *(uint64_t **)(a1 + 8);
      unint64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        unint64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        BOOL v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(unint64_t a1)
{
  if (a1 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a1);
}

uint64_t std::deque<std::__state<char>>::~deque[abi:ne180100](uint64_t a1)
{
  unint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    BOOL v4 = (void *)(a1 + 40);
    uint64_t v3 = *(void ***)(a1 + 8);
  }
  else
  {
    BOOL v4 = (void *)(a1 + 40);
    unint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = &v2[v5 / 0x2A];
    uint64_t v7 = (char *)*v6 + 96 * (v5 % 0x2A);
    unint64_t v8 = (unint64_t)v2[(*(void *)(a1 + 40) + v5) / 0x2A] + 96 * ((*(void *)(a1 + 40) + v5) % 0x2A);
    if (v7 != (char *)v8)
    {
      do
      {
        std::__destroy_at[abi:ne180100]<std::__state<char>,0>(v7);
        v7 += 96;
        if (v7 - (unsigned char *)*v6 == 4032)
        {
          uint64_t v9 = (char *)v6[1];
          ++v6;
          uint64_t v7 = v9;
        }
      }
      while (v7 != (char *)v8);
      unint64_t v2 = *(void ***)(a1 + 8);
      uint64_t v3 = *(void ***)(a1 + 16);
    }
  }
  *BOOL v4 = 0;
  unint64_t v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      unint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 21;
    goto LABEL_14;
  }
  if (v11 == 2)
  {
    uint64_t v12 = 42;
LABEL_14:
    *(void *)(a1 + 32) = v12;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v13 = *v2++;
      operator delete(v13);
    }
    while (v2 != v3);
    uint64_t v15 = *(void *)(a1 + 8);
    uint64_t v14 = *(void *)(a1 + 16);
    if (v14 != v15) {
      *(void *)(a1 + 16) = v14 + ((v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

BOOL std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(const std::regex_iterator<std::__wrap_iter<const char *>, char> *this, const std::regex_iterator<std::__wrap_iter<const char *>, char> *__x)
{
  p_match = &this->__match_;
  std::vector<std::ssub_match>::pointer begin = this->__match_.__matches_.__begin_;
  std::vector<std::csub_match>::pointer end = p_match->__matches_.__end_;
  uint64_t v9 = &__x->__match_;
  std::vector<std::ssub_match>::pointer v7 = __x->__match_.__matches_.__begin_;
  unint64_t v8 = v9->__matches_.__end_;
  BOOL v10 = v8 == v7 && end == begin;
  if (end != begin && v8 != v7) {
    return this->__begin_.__i_ == __x->__begin_.__i_
  }
        && this->__end_.__i_ == __x->__end_.__i_
        && this->__pregex_ == __x->__pregex_
        && this->__flags_ == __x->__flags_
        && std::sub_match<std::__wrap_iter<char const*>>::compare[abi:ne180100]((uint64_t)begin, (uint64_t)v7) == 0;
  return v10;
}

uint64_t std::sub_match<std::__wrap_iter<char const*>>::compare[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 16))
  {
    std::string::__init_with_size[abi:ne180100]<char *,char *>(&__p, *(char **)a1, *(char **)(a1 + 8), *(void *)(a1 + 8) - *(void *)a1);
  }
  else
  {
    std::string __p = 0;
    size_t v19 = 0;
    uint64_t v20 = 0;
  }
  if (*(unsigned char *)(a2 + 16))
  {
    std::string::__init_with_size[abi:ne180100]<char *,char *>(&v15, *(char **)a2, *(char **)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
    unsigned int v3 = HIBYTE(v17);
    unint64_t v5 = v15;
    size_t v4 = v16;
  }
  else
  {
    size_t v4 = 0;
    unint64_t v5 = 0;
    unsigned int v3 = 0;
    uint64_t v15 = 0;
    size_t v16 = 0;
    uint64_t v17 = 0;
  }
  char v6 = HIBYTE(v20);
  if (v20 >= 0) {
    size_t v7 = HIBYTE(v20);
  }
  else {
    size_t v7 = v19;
  }
  if (v20 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  if ((v3 & 0x80u) == 0) {
    size_t v9 = v3;
  }
  else {
    size_t v9 = v4;
  }
  if ((v3 & 0x80u) == 0) {
    BOOL v10 = (void **)&v15;
  }
  else {
    BOOL v10 = v5;
  }
  if (v9 >= v7) {
    size_t v11 = v7;
  }
  else {
    size_t v11 = v9;
  }
  unsigned int v12 = memcmp(p_p, v10, v11);
  if ((v3 & 0x80) != 0)
  {
    operator delete(v5);
    if ((v20 & 0x8000000000000000) == 0) {
      goto LABEL_24;
    }
  }
  else if ((v6 & 0x80) == 0)
  {
    goto LABEL_24;
  }
  operator delete(__p);
LABEL_24:
  unsigned int v13 = v9 < v7;
  if (v7 < v9) {
    unsigned int v13 = -1;
  }
  if (v12) {
    return v12;
  }
  else {
    return v13;
  }
}

void sub_192081DA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  char v6 = operator new(8uLL);
  *char v6 = &unk_1EE2F8638;
  size_t v7 = operator new(0x10uLL);
  v7[1] = v6;
  std::shared_ptr<std::__empty_state<char>>::reset[abi:ne180100]<std::__empty_state<char>,void>((void *)(a1 + 40), (uint64_t)v7);
  unint64_t v8 = *(std::__owns_one_state<char> **)(a1 + 40);
  *(void *)(a1 + 56) = v8;
  unsigned int v9 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v9 > 0x3F)
  {
    switch(v9)
    {
      case 0x40u:
LABEL_14:
        return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, a3);
      case 0x80u:
        uint64_t v15 = (char *)memchr(a2, 10, a3 - a2);
        if (v15) {
          size_t v16 = v15;
        }
        else {
          size_t v16 = a3;
        }
        if (v16 == a2)
        {
          uint64_t v17 = (std::__node<char> *)operator new(0x10uLL);
          first = v8->__first_;
          v17[1].__vftable = (std::__node<char>_vtbl *)first;
          v8->__first_ = v17;
          *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
        }
        else
        {
          std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, v16);
        }
        if (v16 != a3) {
          ++v16;
        }
        while (v16 != a3)
        {
          uint64_t v24 = (char *)memchr(v16, 10, a3 - v16);
          if (v24) {
            unint64_t v25 = v24;
          }
          else {
            unint64_t v25 = a3;
          }
          uint64_t v26 = *(std::__owns_one_state<char> **)(a1 + 56);
          if (v25 == v16)
          {
            uint64_t v27 = (std::__node<char> *)operator new(0x10uLL);
            long long v28 = v26->__first_;
            v27[1].__vftable = (std::__node<char>_vtbl *)v28;
            v26->__first_ = v27;
            *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
          }
          else
          {
            std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v16, v25);
          }
          std::basic_regex<char,std::regex_traits<char>>::__push_alternation((std::basic_regex<char> *)a1, v8, v26);
          if (v25 == a3) {
            size_t v16 = v25;
          }
          else {
            size_t v16 = v25 + 1;
          }
        }
        break;
      case 0x100u:
        BOOL v10 = (char *)memchr(a2, 10, a3 - a2);
        if (v10) {
          size_t v11 = v10;
        }
        else {
          size_t v11 = a3;
        }
        if (v11 == a2)
        {
          unsigned int v12 = (std::__node<char> *)operator new(0x10uLL);
          unsigned int v13 = v8->__first_;
          v12[1].__vftable = (std::__node<char>_vtbl *)v13;
          v8->__first_ = v12;
          *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
        }
        else
        {
          std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, v11);
        }
        if (v11 != a3) {
          ++v11;
        }
        while (v11 != a3)
        {
          size_t v19 = (char *)memchr(v11, 10, a3 - v11);
          if (v19) {
            uint64_t v20 = v19;
          }
          else {
            uint64_t v20 = a3;
          }
          uint64_t v21 = *(std::__owns_one_state<char> **)(a1 + 56);
          if (v20 == v11)
          {
            uint64_t v22 = (std::__node<char> *)operator new(0x10uLL);
            int v23 = v21->__first_;
            v22[1].__vftable = (std::__node<char>_vtbl *)v23;
            v21->__first_ = v22;
            *(void *)(a1 + 56) = *(void *)(*(void *)(a1 + 56) + 8);
          }
          else
          {
            std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v11, v20);
          }
          std::basic_regex<char,std::regex_traits<char>>::__push_alternation((std::basic_regex<char> *)a1, v8, v21);
          if (v20 == a3) {
            size_t v11 = v20;
          }
          else {
            size_t v11 = v20 + 1;
          }
        }
        break;
      default:
        goto LABEL_55;
    }
    return a3;
  }
  else if (v9)
  {
    if (v9 != 16)
    {
      if (v9 != 32) {
LABEL_55:
      }
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>();
      goto LABEL_14;
    }
    return std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, a3);
  }
  else
  {
    return std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (unsigned __int8 *)a2, a3);
  }
}

void sub_19208213C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, char *a3)
{
  std::vector<std::csub_match>::pointer end = a1->__end_;
  size_t v7 = a2;
  do
  {
    unint64_t v8 = v7;
    size_t v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<std::__wrap_iter<char const*>>(a1, v7, a3);
  }
  while (v8 != v7);
  if (v8 == a2)
  {
    unsigned int v9 = (std::__node<char> *)operator new(0x10uLL);
    BOOL v10 = a1->__end_;
    first = v10->__first_;
    v9[1].__vftable = (std::__node<char>_vtbl *)first;
    v10->__first_ = v9;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  }
  if (v8 != a3)
  {
    while (*v8 == 124)
    {
      unsigned int v12 = a1->__end_;
      unsigned int v13 = v8 + 1;
      uint64_t v14 = v8 + 1;
      do
      {
        unint64_t v8 = v14;
        uint64_t v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<std::__wrap_iter<char const*>>(a1, v14, a3);
      }
      while (v8 != v14);
      if (v13 == v8)
      {
        uint64_t v15 = (std::__node<char> *)operator new(0x10uLL);
        size_t v16 = a1->__end_;
        uint64_t v17 = v16->__first_;
        v15[1].__vftable = (std::__node<char>_vtbl *)v17;
        v16->__first_ = v15;
        a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v12);
      if (v8 == a3) {
        return a3;
      }
    }
  }
  return v8;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, char *a2, char *a3)
{
  unsigned int v3 = a2;
  if (a2 == a3) {
    return a2;
  }
  size_t v4 = a3;
  if (*a2 == 94)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(this);
    ++v3;
  }
  if (v3 != v4)
  {
    do
    {
      char v6 = v3;
      unsigned int v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<std::__wrap_iter<char const*>>(this, v3, v4);
    }
    while (v6 != v3);
    if (v6 != v4)
    {
      if (v6 + 1 != v4 || *v6 != 36) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(this);
    }
  }
  return v4;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  std::vector<std::csub_match>::pointer end = a1->__end_;
  size_t v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v7 == (unsigned __int8 *)a2) {
LABEL_9:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  unint64_t v8 = v7;
  while (v8 != (unsigned __int8 *)a3)
  {
    if (*v8 != 124) {
      return (char *)v8;
    }
    unsigned int v9 = a1->__end_;
    BOOL v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<std::__wrap_iter<char const*>>(a1, (char *)v8 + 1, a3);
    if (v8 + 1 == v10) {
      goto LABEL_9;
    }
    unint64_t v8 = v10;
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return a3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_term<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, unsigned __int8 *a2, char *a3)
{
  if (a2 == (unsigned __int8 *)a3) {
    return a2;
  }
  int v6 = (char)*a2;
  int v7 = *a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 == (unsigned __int8 *)a3) {
        goto LABEL_33;
      }
      int v18 = a2[1];
      if (v18 == 66)
      {
        BOOL v19 = 1;
      }
      else
      {
        if (v18 != 98) {
          goto LABEL_33;
        }
        BOOL v19 = 0;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(this, v19);
      uint64_t v16 = 2;
      return &a2[v16];
    }
    if (v6 != 94) {
      goto LABEL_33;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(this);
LABEL_21:
    uint64_t v16 = 1;
    return &a2[v16];
  }
  if (v6 == 36)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(this);
    goto LABEL_21;
  }
  BOOL v9 = v6 == 40;
  unint64_t v8 = (char *)(a2 + 1);
  BOOL v9 = !v9 || v8 == a3;
  if (!v9)
  {
    BOOL v9 = *v8 == 63;
    BOOL v10 = (char *)(a2 + 2);
    if (v9 && v10 != a3)
    {
      int v12 = *v10;
      if (v12 == 33)
      {
        *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v20 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v47.__loop_count_ = v20;
        *(_OWORD *)&v47.__start_.__cntrl_ = v20;
        *(_OWORD *)&v47.__traits_.__loc_.__locale_ = v20;
        *(_OWORD *)&v47.__traits_.__col_ = v20;
        std::regex_traits<char>::regex_traits(&v47.__traits_);
        memset(&v47.__flags_, 0, 40);
        v47.__flags_ = this->__flags_;
        uint64_t v14 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v47, a2 + 3, a3);
        marked_size_t count = v47.__marked_count_;
        std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v47, 1, this->__marked_count_);
        this->__marked_count_ += marked_count;
        if (v14 == a3 || *v14 != 41) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
      }
      else
      {
        if (v12 != 61) {
          goto LABEL_33;
        }
        *(void *)&long long v13 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v13 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v47.__loop_count_ = v13;
        *(_OWORD *)&v47.__start_.__cntrl_ = v13;
        *(_OWORD *)&v47.__traits_.__loc_.__locale_ = v13;
        *(_OWORD *)&v47.__traits_.__col_ = v13;
        std::regex_traits<char>::regex_traits(&v47.__traits_);
        memset(&v47.__flags_, 0, 40);
        v47.__flags_ = this->__flags_;
        uint64_t v14 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v47, a2 + 3, a3);
        unsigned int v15 = v47.__marked_count_;
        std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v47, 0, this->__marked_count_);
        this->__marked_count_ += v15;
        if (v14 == a3 || *v14 != 41) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
      }
      std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&v47.__traits_.__loc_);
      __n128 result = (unsigned __int8 *)(v14 + 1);
      if (v14 + 1 != (char *)a2) {
        return result;
      }
      int v7 = *a2;
    }
  }
LABEL_33:
  std::vector<std::csub_match>::pointer end = this->__end_;
  unsigned int v23 = this->__marked_count_;
  if ((char)v7 <= 91)
  {
    __n128 result = a2;
    switch((char)v7)
    {
      case '$':
      case ')':
        return result;
      case '%':
      case '&':
      case '\'':
      case ',':
      case '-':
        goto LABEL_58;
      case '(':
        if (a2 + 1 == (unsigned __int8 *)a3) {
          goto LABEL_99;
        }
        if (a2 + 2 != (unsigned __int8 *)a3 && a2[1] == 63 && a2[2] == 58)
        {
          ++this->__open_count_;
          uint64_t v24 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(this, a2 + 3, a3);
          if (v24 != a3 && *v24 == 41)
          {
            --this->__open_count_;
            unint64_t v25 = (unsigned __int8 *)(v24 + 1);
            goto LABEL_94;
          }
LABEL_99:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
        std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(this);
        unsigned int v33 = this->__marked_count_;
        ++this->__open_count_;
        uint64_t v34 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(this, a2 + 1, a3);
        if (v34 == a3) {
          goto LABEL_99;
        }
        uint64_t v35 = v34;
        if (*v34 != 41) {
          goto LABEL_99;
        }
        std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(this, v33);
        --this->__open_count_;
        unint64_t v25 = (unsigned __int8 *)(v35 + 1);
        goto LABEL_94;
      case '*':
      case '+':
        goto LABEL_60;
      case '.':
        unint64_t v30 = (std::__node<char> *)operator new(0x10uLL);
        first = end->__first_;
        v30->__vftable = (std::__node<char>_vtbl *)&unk_1EE2F90C8;
        v30[1].__vftable = (std::__node<char>_vtbl *)first;
        end->__first_ = v30;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
        unint64_t v25 = a2 + 1;
        unsigned int v32 = v23;
        goto LABEL_96;
      default:
        if ((char)v7 == 91)
        {
          unint64_t v25 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, (char *)a2, a3);
          goto LABEL_94;
        }
        if ((char)v7 != 63) {
          goto LABEL_58;
        }
        goto LABEL_60;
    }
  }
  uint64_t v26 = ((char)v7 - 92);
  if (v26 <= 0x21)
  {
    if (((1 << (v7 - 92)) & 0x300000006) != 0) {
      return a2;
    }
    if ((char)v7 == 92)
    {
      unint64_t v25 = a2;
      if (v7 != 92) {
        goto LABEL_94;
      }
      uint64_t v27 = a2 + 1;
      if (a2 + 1 == (unsigned __int8 *)a3) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
      }
      int v28 = *v27;
      unsigned int v29 = v28 - 48;
      if (v28 == 48)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v29);
LABEL_93:
        unint64_t v25 = a2 + 2;
        goto LABEL_94;
      }
      if ((v28 - 49) <= 8)
      {
        unint64_t v25 = a2 + 2;
        if (a2 + 2 == (unsigned __int8 *)a3)
        {
          unint64_t v25 = (unsigned __int8 *)a3;
        }
        else
        {
          while (1)
          {
            int v36 = *v25;
            if ((v36 - 48) > 9) {
              break;
            }
            if (v29 >= 0x19999999) {
              goto LABEL_100;
            }
            ++v25;
            unsigned int v29 = v36 + 10 * v29 - 48;
            if (v25 == (unsigned __int8 *)a3)
            {
              unint64_t v25 = (unsigned __int8 *)a3;
              break;
            }
          }
          if (!v29) {
LABEL_100:
          }
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
        }
        if (v29 > v23) {
          goto LABEL_100;
        }
        std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, v29);
        if (v27 != v25) {
          goto LABEL_94;
        }
        LOBYTE(v28) = *v27;
      }
      if ((char)v28 > 99)
      {
        if ((char)v28 == 119)
        {
          unint64_t v37 = this;
          BOOL v38 = 0;
          goto LABEL_85;
        }
        if ((char)v28 == 115)
        {
          uint64_t v45 = this;
          BOOL v46 = 0;
LABEL_91:
          started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v45, v46);
          int v42 = started->__mask_ | 0x4000;
          goto LABEL_92;
        }
        if ((char)v28 != 100) {
          goto LABEL_86;
        }
        uint64_t v39 = this;
        BOOL v40 = 0;
      }
      else
      {
        if ((char)v28 != 68)
        {
          if ((char)v28 != 83)
          {
            if ((char)v28 == 87)
            {
              unint64_t v37 = this;
              BOOL v38 = 1;
LABEL_85:
              int64x2_t v43 = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v37, v38);
              v43->__mask_ |= 0x500u;
              std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v43, 95);
              goto LABEL_93;
            }
LABEL_86:
            uint64_t v44 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(this, a2 + 1, (unsigned __int8 *)a3, 0);
            if (v27 == v44) {
              unint64_t v25 = a2;
            }
            else {
              unint64_t v25 = v44;
            }
LABEL_94:
            __n128 result = a2;
            if (v25 == a2) {
              return result;
            }
            goto LABEL_95;
          }
          uint64_t v45 = this;
          BOOL v46 = 1;
          goto LABEL_91;
        }
        uint64_t v39 = this;
        BOOL v40 = 1;
      }
      started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v39, v40);
      int v42 = started->__mask_ | 0x400;
LABEL_92:
      started->__mask_ = v42;
      goto LABEL_93;
    }
    if (v26 == 31) {
LABEL_60:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
  }
LABEL_58:
  std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v7);
  unint64_t v25 = a2 + 1;
LABEL_95:
  unsigned int v32 = this->__marked_count_;
LABEL_96:

  return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)this, v25, (unsigned __int8 *)a3, end, v23 + 1, v32 + 1);
}

void sub_1920829E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t a5, size_t a6)
{
  if (a2 == a3) {
    return a2;
  }
  unsigned int v6 = a6;
  unsigned int v7 = a5;
  uint64_t v10 = a1;
  int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  int v12 = (char)*a2;
  if (v12 > 62)
  {
    if (v12 == 63)
    {
      long long v13 = a2 + 1;
      if (v11) {
        BOOL v20 = 1;
      }
      else {
        BOOL v20 = v13 == a3;
      }
      if (!v20 && *v13 == 63)
      {
        long long v13 = a2 + 2;
        a5 = a5;
        a6 = a6;
        size_t v14 = 0;
        size_t v18 = 1;
        goto LABEL_33;
      }
      a5 = a5;
      a6 = a6;
      size_t v14 = 0;
      size_t v18 = 1;
      goto LABEL_45;
    }
    long long v13 = a2;
    if (v12 != 123) {
      return v13;
    }
    LODWORD(__max) = -1431655766;
    unsigned int v15 = a2 + 1;
    uint64_t v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(a2 + 1, a3, (int *)&__max);
    if (v15 != v16)
    {
      if (v16 != a3)
      {
        int v17 = (char)*v16;
        if (v17 != 44)
        {
          if (v17 == 125)
          {
            long long v13 = v16 + 1;
            if (!v11 && v13 != a3 && *v13 == 63)
            {
              long long v13 = v16 + 2;
              size_t v14 = (int)__max;
              a5 = v7;
              a6 = v6;
              a1 = v10;
              size_t v18 = (int)__max;
LABEL_33:
              uint64_t v21 = __s;
              BOOL v22 = 0;
LABEL_46:
              std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v14, v18, v21, a5, a6, v22);
              return v13;
            }
            size_t v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            size_t v18 = (int)__max;
LABEL_45:
            uint64_t v21 = __s;
            BOOL v22 = 1;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
        unsigned int v23 = v16 + 1;
        if (v16 + 1 == a3) {
          goto LABEL_58;
        }
        if (*v23 == 125)
        {
          long long v13 = v16 + 2;
          if (!v11 && v13 != a3 && *v13 == 63)
          {
            long long v13 = v16 + 3;
            size_t v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            goto LABEL_26;
          }
          size_t v14 = (int)__max;
          a5 = v7;
          a6 = v6;
          a1 = v10;
LABEL_36:
          size_t v18 = -1;
          goto LABEL_45;
        }
        int v27 = -1;
        unint64_t v25 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v16 + 1, a3, &v27);
        if (v23 != v25 && v25 != a3 && *v25 == 125)
        {
          size_t v18 = v27;
          size_t v14 = (int)__max;
          if (v27 >= (int)__max)
          {
            long long v13 = v25 + 1;
            BOOL v22 = 1;
            if (!v11 && v13 != a3)
            {
              int v26 = v25[1];
              BOOL v22 = v26 != 63;
              if (v26 == 63) {
                long long v13 = v25 + 2;
              }
            }
            a5 = v7;
            a6 = v6;
            a1 = v10;
            uint64_t v21 = __s;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
LABEL_58:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  if (v12 == 42)
  {
    long long v13 = a2 + 1;
    if (v11) {
      BOOL v19 = 1;
    }
    else {
      BOOL v19 = v13 == a3;
    }
    if (!v19 && *v13 == 63)
    {
      long long v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      size_t v14 = 0;
      goto LABEL_26;
    }
    a5 = a5;
    a6 = a6;
    size_t v14 = 0;
    goto LABEL_36;
  }
  long long v13 = a2;
  if (v12 == 43)
  {
    long long v13 = a2 + 1;
    if (!v11 && v13 != a3 && *v13 == 63)
    {
      long long v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      size_t v14 = 1;
LABEL_26:
      size_t v18 = -1;
      goto LABEL_33;
    }
    a5 = a5;
    a6 = a6;
    size_t v14 = 1;
    goto LABEL_36;
  }
  return v13;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3) {
      goto LABEL_140;
    }
    uint64_t v5 = (uint64_t)(a2[1] == 94 ? a2 + 2 : a2 + 1);
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list((std::basic_regex<char> *)a1, a2[1] == 94);
    if ((char *)v5 == a3) {
      goto LABEL_140;
    }
    uint64_t v7 = (uint64_t)started;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *(unsigned char *)v5 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)started, 93);
      ++v5;
    }
    if ((char *)v5 == a3) {
      goto LABEL_140;
    }
    uint64_t v40 = 4 - (void)a3;
    while (1)
    {
      unint64_t v8 = (char *)v5;
      if ((char *)v5 == a3)
      {
        uint64_t v10 = a3;
        goto LABEL_118;
      }
      int v9 = *(unsigned __int8 *)v5;
      uint64_t v10 = (char *)v5;
      if (v9 != 93) {
        break;
      }
LABEL_118:
      uint64_t v5 = (uint64_t)v10;
LABEL_119:
      if (v8 == (char *)v5)
      {
        if (v8 != a3)
        {
          if (*v8 == 45)
          {
            std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, 45);
            ++v8;
          }
          if (v8 != a3 && *v8 == 93) {
            return v8 + 1;
          }
        }
LABEL_140:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
      }
    }
    int v11 = 0;
    v43[0] = 0;
    v43[1] = 0;
    uint64_t v44 = 0;
    int v12 = 0;
    uint64_t v10 = (char *)v5;
    if ((char *)(v5 + 1) != a3 && v9 == 91)
    {
      int v13 = *(unsigned __int8 *)(v5 + 1);
      switch(v13)
      {
        case '.':
          uint64_t v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(a1, (char *)(v5 + 2), a3, (uint64_t)v43);
          int v12 = (void *)HIBYTE(v44);
          int v11 = v43[1];
          break;
        case ':':
          if ((uint64_t)&a3[-v5 - 2] < 2) {
            goto LABEL_139;
          }
          for (unint64_t i = 0; *(unsigned char *)(v5 + i + 2) != 58 || *(unsigned char *)(v5 + i + 3) != 93; ++i)
          {
            if (!(v40 + v5 + i)) {
              goto LABEL_139;
            }
          }
          size_t v18 = (char *)(v5 + i + 2);
          if (v18 == a3) {
LABEL_139:
          }
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
          int v19 = *(_DWORD *)(a1 + 24);
          memset(__p, 170, sizeof(__p));
          std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, (char *)(v5 + 2), v18, i);
          BOOL v20 = (char *)HIBYTE(__p[2]);
          if (SHIBYTE(__p[2]) >= 0) {
            uint64_t v21 = __p;
          }
          else {
            uint64_t v21 = (void **)__p[0];
          }
          if (SHIBYTE(__p[2]) < 0) {
            BOOL v20 = (char *)__p[1];
          }
          (*(void (**)(void, void **, char *))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), v21, &v20[(void)v21]);
          if (SHIBYTE(__p[2]) >= 0) {
            BOOL v22 = __p;
          }
          else {
            BOOL v22 = (void **)__p[0];
          }
          std::regex_traits<char>::char_class_type classname = std::__get_classname((const char *)v22, v19 & 1);
          if (SHIBYTE(__p[2]) < 0) {
            operator delete(__p[0]);
          }
          if (!classname) {
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
          }
          char v24 = 0;
          *(_DWORD *)(v7 + 160) |= classname;
          goto LABEL_114;
        case '=':
          if ((uint64_t)&a3[-v5 - 2] < 2) {
            goto LABEL_139;
          }
          for (unint64_t i = 0; *(unsigned char *)(v5 + i + 2) != 61 || *(unsigned char *)(v5 + i + 3) != 93; ++i)
          {
            if (!(v40 + v5 + i)) {
              goto LABEL_139;
            }
          }
          unint64_t v25 = (char *)(v5 + i + 2);
          if (v25 == a3) {
            goto LABEL_139;
          }
          memset(__p, 170, sizeof(__p));
          std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>((uint64_t)__p, a1, (char *)(v5 + 2), v25);
          if (SHIBYTE(__p[2]) < 0)
          {
            int v26 = (char *)__p[1];
            if (!__p[1]) {
LABEL_141:
            }
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
            memset(v45, 170, sizeof(v45));
            int v27 = (char *)__p[0];
          }
          else
          {
            int v26 = (char *)HIBYTE(__p[2]);
            if (!HIBYTE(__p[2])) {
              goto LABEL_141;
            }
            int v27 = (char *)__p;
            memset(v45, 170, sizeof(v45));
          }
          std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(v45, a1, v27, &v26[(void)v27]);
          unsigned int v29 = (void *)HIBYTE(v45[2]);
          if (SHIBYTE(v45[2]) < 0) {
            unsigned int v29 = v45[1];
          }
          if (v29)
          {
            std::__bracket_expression<char,std::regex_traits<char>>::__add_equivalence[abi:ne180100]((void *)v7, (uint64_t)v45);
          }
          else
          {
            unint64_t v30 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0) {
              unint64_t v30 = __p[1];
            }
            if (v30 == (void *)2)
            {
              if (SHIBYTE(__p[2]) >= 0) {
                unint64_t v37 = __p;
              }
              else {
                unint64_t v37 = (void **)__p[0];
              }
              std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v7, *(char *)v37, *((char *)v37 + 1));
            }
            else
            {
              if (v30 != (void *)1) {
                std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
              }
              if (SHIBYTE(__p[2]) >= 0) {
                uint64_t v31 = __p;
              }
              else {
                uint64_t v31 = (void **)__p[0];
              }
              std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, *(char *)v31);
            }
          }
          if (SHIBYTE(v45[2]) < 0) {
            operator delete(v45[0]);
          }
          if (SHIBYTE(__p[2]) < 0) {
            operator delete(__p[0]);
          }
          char v24 = 0;
LABEL_114:
          v5 += i + 4;
          uint64_t v35 = v8;
          goto LABEL_115;
        default:
          int v11 = 0;
          int v12 = 0;
          uint64_t v10 = (char *)v5;
          break;
      }
    }
    uint64_t v5 = *(_DWORD *)(a1 + 24) & 0x1F0;
    if ((char)v12 >= 0) {
      int v11 = v12;
    }
    if (!v11)
    {
      if ((*(_DWORD *)(a1 + 24) & 0x1B0 | 0x40) == 0x40)
      {
        int v15 = *v10;
        if (v15 == 92)
        {
          uint64_t v16 = v10 + 1;
          if ((*(_DWORD *)(a1 + 24) & 0x1F0) != 0) {
            int v17 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v16, a3, (uint64_t *)v43);
          }
          else {
            int v17 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (unsigned __int8 *)v16, (unsigned __int8 *)a3, (uint64_t)v43, v7);
          }
          uint64_t v10 = v17;
          goto LABEL_80;
        }
      }
      else
      {
        LOBYTE(v15) = *v10;
      }
      if ((char)v12 < 0)
      {
        int v28 = (void **)v43[0];
        v43[1] = (void *)1;
      }
      else
      {
        HIBYTE(v44) = 1;
        int v28 = v43;
      }
      *(unsigned char *)int v28 = v15;
      *((unsigned char *)v28 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
      ++v10;
    }
LABEL_80:
    if (v10 != a3)
    {
      int v32 = *v10;
      if (v32 != 93)
      {
        uint64_t v34 = v10 + 1;
        if (v10 + 1 != a3 && v32 == 45 && *v34 != 93)
        {
          memset(__p, 0, sizeof(__p));
          uint64_t v35 = v10 + 2;
          if (v10 + 2 != a3 && *v34 == 91 && *v35 == 46)
          {
            int v36 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(a1, v10 + 3, a3, (uint64_t)__p);
            goto LABEL_124;
          }
          if ((v5 | 0x40) == 0x40)
          {
            LODWORD(v34) = *v34;
            if (v34 == 92)
            {
              if (v5) {
                int v36 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v10 + 2, a3, (uint64_t *)__p);
              }
              else {
                int v36 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (unsigned __int8 *)v10 + 2, (unsigned __int8 *)a3, (uint64_t)__p, v7);
              }
LABEL_124:
              uint64_t v35 = v36;
LABEL_125:
              *(_OWORD *)uint64_t v45 = *(_OWORD *)v43;
              BOOL v38 = v44;
              v43[1] = 0;
              uint64_t v44 = 0;
              *(_OWORD *)uint64_t v41 = *(_OWORD *)__p;
              int v42 = __p[2];
              v43[0] = 0;
              v45[2] = v38;
              memset(__p, 0, sizeof(__p));
              std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](v7, (char *)v45, (char *)v41);
              if (SHIBYTE(v42) < 0) {
                operator delete(v41[0]);
              }
              if (SHIBYTE(v45[2]) < 0) {
                operator delete(v45[0]);
              }
              if (SHIBYTE(__p[2]) < 0) {
                operator delete(__p[0]);
              }
              char v24 = 1;
LABEL_115:
              if (SHIBYTE(v44) < 0) {
                operator delete(v43[0]);
              }
              uint64_t v10 = v35;
              if ((v24 & 1) == 0) {
                goto LABEL_119;
              }
              goto LABEL_118;
            }
          }
          else
          {
            LOBYTE(v34) = *v34;
          }
          HIBYTE(__p[2]) = 1;
          LOWORD(__p[0]) = v34;
          goto LABEL_125;
        }
      }
    }
    if (SHIBYTE(v44) < 0)
    {
      if (v43[1])
      {
        if (v43[1] == (void *)1)
        {
          unsigned int v33 = (void **)v43[0];
LABEL_89:
          std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, *(char *)v33);
LABEL_100:
          char v24 = 1;
          uint64_t v35 = v10;
          goto LABEL_115;
        }
        unsigned int v33 = (void **)v43[0];
LABEL_99:
        std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v7, *(char *)v33, *((char *)v33 + 1));
        goto LABEL_100;
      }
      operator delete(v43[0]);
    }
    else if (HIBYTE(v44))
    {
      unsigned int v33 = v43;
      if (HIBYTE(v44) == 1) {
        goto LABEL_89;
      }
      goto LABEL_99;
    }
    goto LABEL_118;
  }
  return a2;
}

void sub_1920833F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t *a4)
{
  size_t v4 = a2;
  if (a2 != a3)
  {
    uint64_t v5 = *a2;
    std::basic_regex<char>::value_type v6 = v5;
    if ((char)v5 > 109)
    {
      switch((char)v5)
      {
        case 'n':
          if (!a4)
          {
            std::basic_regex<char>::value_type v6 = 10;
            goto LABEL_69;
          }
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((unsigned char *)a4 + 23) = 1;
          }
          __int16 v16 = 10;
          goto LABEL_81;
        case 'r':
          if (!a4)
          {
            std::basic_regex<char>::value_type v6 = 13;
            goto LABEL_69;
          }
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((unsigned char *)a4 + 23) = 1;
          }
          __int16 v16 = 13;
          goto LABEL_81;
        case 't':
          if (!a4)
          {
            std::basic_regex<char>::value_type v6 = 9;
            goto LABEL_69;
          }
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((unsigned char *)a4 + 23) = 1;
          }
          __int16 v16 = 9;
          goto LABEL_81;
        case 'u':
          if (v4 + 1 != a3)
          {
            int v7 = v4[1];
            if ((v7 & 0xF8) == 0x30 || (v7 & 0xFE) == 0x38 || (v7 | 0x20u) - 97 < 6)
            {
              v4 += 2;
              if (v4 != a3)
              {
                int v8 = *v4;
                if ((v8 & 0xF8) == 0x30 || (v8 & 0xFE) == 0x38 || (v8 | 0x20u) - 97 < 6) {
                  goto LABEL_27;
                }
              }
            }
          }
          goto LABEL_91;
        case 'v':
          if (!a4)
          {
            std::basic_regex<char>::value_type v6 = 11;
            goto LABEL_69;
          }
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((unsigned char *)a4 + 23) = 1;
          }
          __int16 v16 = 11;
          break;
        case 'x':
LABEL_27:
          if (v4 + 1 == a3) {
            goto LABEL_91;
          }
          unsigned __int8 v9 = v4[1];
          char v10 = -48;
          if ((v9 & 0xF8) == 0x30 || (v9 & 0xFE) == 0x38) {
            goto LABEL_32;
          }
          v9 |= 0x20u;
          if ((v9 - 97) >= 6u) {
            goto LABEL_91;
          }
          char v10 = -87;
LABEL_32:
          if (v4 + 2 == a3) {
            goto LABEL_91;
          }
          unsigned __int8 v11 = v4[2];
          char v12 = -48;
          if ((v11 & 0xF8) == 0x30 || (v11 & 0xFE) == 0x38) {
            goto LABEL_37;
          }
          v11 |= 0x20u;
          if ((v11 - 97) >= 6u) {
            goto LABEL_91;
          }
          char v12 = -87;
LABEL_37:
          std::basic_regex<char>::value_type v13 = v11 + 16 * (v9 + v10) + v12;
          if (a4)
          {
            if (*((char *)a4 + 23) < 0)
            {
              a4[1] = 1;
              a4 = (uint64_t *)*a4;
            }
            else
            {
              *((unsigned char *)a4 + 23) = 1;
            }
            *(unsigned char *)a4 = v13;
            *((unsigned char *)a4 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
          }
          else
          {
            std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v13);
          }
          v4 += 3;
          return v4;
        default:
          goto LABEL_53;
      }
      goto LABEL_81;
    }
    if ((char)v5 == 48)
    {
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 0;
        return ++v4;
      }
      std::basic_regex<char>::value_type v6 = 0;
      goto LABEL_69;
    }
    if ((char)v5 != 99)
    {
      if ((char)v5 == 102)
      {
        if (a4)
        {
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((unsigned char *)a4 + 23) = 1;
          }
          __int16 v16 = 12;
LABEL_81:
          *(_WORD *)a4 = v16;
          return ++v4;
        }
        std::basic_regex<char>::value_type v6 = 12;
LABEL_69:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v6);
        return ++v4;
      }
LABEL_53:
      if ((char)v5 != 95 && ((char)v5 < 0 || (a1->__traits_.__ct_->__tab_[v5] & 0x500) == 0))
      {
        if (a4)
        {
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((unsigned char *)a4 + 23) = 1;
          }
          *(unsigned char *)a4 = v5;
          *((unsigned char *)a4 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
          return ++v4;
        }
        goto LABEL_69;
      }
LABEL_91:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    }
    if (v4 + 1 == a3) {
      goto LABEL_91;
    }
    if ((char)v4[1] < 65) {
      goto LABEL_91;
    }
    unsigned int v14 = v4[1];
    if (v14 >= 0x5B && (v14 - 97) > 0x19u) {
      goto LABEL_91;
    }
    std::basic_regex<char>::value_type v15 = v14 & 0x1F;
    if (a4)
    {
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      *(unsigned char *)a4 = v15;
      *((unsigned char *)a4 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v15);
    }
    v4 += 2;
  }
  return v4;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_15;
  }
  uint64_t v5 = a3 - 2;
  std::basic_regex<char>::value_type v6 = a2;
  int v7 = a2;
  for (i = a2; ; int v7 = i)
  {
    int v9 = *i++;
    if (v9 == 46 && *i == 93) {
      break;
    }
    if (a2 == v5) {
      goto LABEL_15;
    }
    ++v6;
    --v5;
  }
  if (v7 == a3) {
LABEL_15:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>((uint64_t)&v13, a1, a2, v6);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(_OWORD *)a4 = v13;
  unint64_t v10 = v14;
  *(void *)(a4 + 16) = v14;
  unint64_t v11 = HIBYTE(v10);
  if ((v11 & 0x80u) != 0) {
    unint64_t v11 = *(void *)(a4 + 8);
  }
  if (v11 - 1 >= 2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  return v6 + 2;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  if (a2 == a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  int v6 = (char)*a2;
  if (v6 > 97)
  {
    if (v6 > 114)
    {
      if (v6 != 115)
      {
        if (v6 != 119) {
          return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, a2, a3, (uint64_t *)a4);
        }
        *(_DWORD *)(a5 + 160) |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
        return a2 + 1;
      }
      int v8 = *(_DWORD *)(a5 + 160) | 0x4000;
    }
    else
    {
      if (v6 == 98)
      {
        if (*(char *)(a4 + 23) < 0)
        {
          *(void *)(a4 + 8) = 1;
          a4 = *(void *)a4;
        }
        else
        {
          *(unsigned char *)(a4 + 23) = 1;
        }
        *(_WORD *)a4 = 8;
        return a2 + 1;
      }
      if (v6 != 100) {
        return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, a2, a3, (uint64_t *)a4);
      }
      int v8 = *(_DWORD *)(a5 + 160) | 0x400;
    }
    *(_DWORD *)(a5 + 160) = v8;
    return a2 + 1;
  }
  if (v6 <= 82)
  {
    if (!*a2)
    {
      if (*(char *)(a4 + 23) < 0)
      {
        *(void *)(a4 + 8) = 1;
        a4 = *(void *)a4;
      }
      else
      {
        *(unsigned char *)(a4 + 23) = 1;
      }
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
      return a2 + 1;
    }
    if (v6 == 68)
    {
      int v7 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_22:
      *(_DWORD *)(a5 + 164) = v7;
      return a2 + 1;
    }
    return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, a2, a3, (uint64_t *)a4);
  }
  if (v6 == 83)
  {
    int v7 = *(_DWORD *)(a5 + 164) | 0x4000;
    goto LABEL_22;
  }
  if (v6 != 87) {
    return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, a2, a3, (uint64_t *)a4);
  }
  *(_DWORD *)(a5 + 164) |= 0x500u;
  std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5);
  return a2 + 1;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3, uint64_t *a4)
{
  if (a2 == a3) {
LABEL_80:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  int v5 = *a2;
  std::basic_regex<char>::value_type v6 = *a2;
  if (v5 > 97)
  {
    switch(*a2)
    {
      case 'n':
        if (!a4)
        {
          std::basic_regex<char>::value_type v7 = 10;
          break;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        __int16 v13 = 10;
        goto LABEL_77;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_25;
      case 'r':
        if (!a4)
        {
          std::basic_regex<char>::value_type v7 = 13;
          break;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        __int16 v13 = 13;
        goto LABEL_77;
      case 't':
        if (!a4)
        {
          std::basic_regex<char>::value_type v7 = 9;
          break;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        __int16 v13 = 9;
        goto LABEL_77;
      case 'v':
        if (!a4)
        {
          std::basic_regex<char>::value_type v7 = 11;
          break;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        __int16 v13 = 11;
        goto LABEL_77;
      default:
        if (v5 == 98)
        {
          if (a4)
          {
            if (*((char *)a4 + 23) < 0)
            {
              a4[1] = 1;
              a4 = (uint64_t *)*a4;
            }
            else
            {
              *((unsigned char *)a4 + 23) = 1;
            }
            __int16 v13 = 8;
            goto LABEL_77;
          }
          std::basic_regex<char>::value_type v7 = 8;
        }
        else
        {
          if (v5 != 102) {
            goto LABEL_25;
          }
          if (a4)
          {
            if (*((char *)a4 + 23) < 0)
            {
              a4[1] = 1;
              a4 = (uint64_t *)*a4;
            }
            else
            {
              *((unsigned char *)a4 + 23) = 1;
            }
            __int16 v13 = 12;
            goto LABEL_77;
          }
          std::basic_regex<char>::value_type v7 = 12;
        }
        break;
    }
LABEL_62:
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
    return a2 + 1;
  }
  if (v5 > 91)
  {
    if (v5 == 92)
    {
LABEL_16:
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((unsigned char *)a4 + 23) = 1;
        }
        *(unsigned char *)a4 = v6;
        *((unsigned char *)a4 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
        return a2 + 1;
      }
      std::basic_regex<char>::value_type v7 = *a2;
      goto LABEL_62;
    }
    if (v5 != 97) {
      goto LABEL_25;
    }
    if (a4)
    {
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((unsigned char *)a4 + 23) = 1;
      }
      __int16 v13 = 7;
LABEL_77:
      *(_WORD *)a4 = v13;
      return a2 + 1;
    }
    std::basic_regex<char>::value_type v7 = 7;
    goto LABEL_62;
  }
  if (v5 == 34 || v5 == 47) {
    goto LABEL_16;
  }
LABEL_25:
  if ((v6 & 0xF8) != 0x30) {
    goto LABEL_80;
  }
  std::basic_regex<char>::value_type v8 = v5 - 48;
  int v9 = a2 + 1;
  if (a2 + 1 != a3)
  {
    if ((*v9 & 0xF8) != 0x30) {
      goto LABEL_49;
    }
    std::basic_regex<char>::value_type v8 = *v9 + 8 * v8 - 48;
    if (a2 + 2 != a3)
    {
      char v10 = a2[2];
      int v11 = v10 & 0xF8;
      std::basic_regex<char>::value_type v12 = v10 + 8 * v8 - 48;
      if (v11 == 48) {
        int v9 = a2 + 3;
      }
      else {
        int v9 = a2 + 2;
      }
      if (v11 == 48) {
        std::basic_regex<char>::value_type v8 = v12;
      }
      goto LABEL_49;
    }
  }
  int v9 = a3;
LABEL_49:
  if (a4)
  {
    if (*((char *)a4 + 23) < 0)
    {
      a4[1] = 1;
      a4 = (uint64_t *)*a4;
    }
    else
    {
      *((unsigned char *)a4 + 23) = 1;
    }
    *(unsigned char *)a4 = v8;
    *((unsigned char *)a4 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v8);
  }
  return v9;
}

void std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  memset(&__s, 170, sizeof(__s));
  std::string::__init_with_size[abi:ne180100]<char *,char *>(&__s, a3, a4, a4 - a3);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
    if (!__s.__r_.__value_.__l.__size_) {
      goto LABEL_10;
    }
  }
  else
  {
    if (!*((unsigned char *)&__s.__r_.__value_.__s + 23)) {
      return;
    }
    p_s = &__s;
  }
  std::__get_collation_name(&v11, (const char *)p_s);
  *(_OWORD *)a1 = *(_OWORD *)&v11.__r_.__value_.__l.__data_;
  unint64_t v7 = v11.__r_.__value_.__r.__words[2];
  *(void *)(a1 + 16) = *((void *)&v11.__r_.__value_.__l + 2);
  unint64_t v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0) {
    unint64_t v8 = *(void *)(a1 + 8);
  }
  if (v8) {
    goto LABEL_8;
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
    if (__s.__r_.__value_.__l.__size_ < 3) {
      goto LABEL_16;
    }
LABEL_10:
    operator delete(p_s);
    return;
  }
  if (HIBYTE(__s.__r_.__value_.__r.__words[2]) < 3u)
  {
LABEL_16:
    (*(void (**)(std::string *__return_ptr))(**(void **)(a2 + 16) + 32))(&v11);
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    *(std::string *)a1 = v11;
    if (*(char *)(a1 + 23) < 0)
    {
      uint64_t v10 = *(void *)(a1 + 8);
      if (v10 != 1 && v10 != 12)
      {
        **(unsigned char **)a1 = 0;
        *(void *)(a1 + 8) = 0;
        goto LABEL_8;
      }
    }
    else
    {
      int v9 = *(unsigned __int8 *)(a1 + 23);
      if (v9 != 12 && v9 != 1)
      {
        *(unsigned char *)a1 = 0;
        *(unsigned char *)(a1 + 23) = 0;
LABEL_8:
        if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          return;
        }
        p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
        goto LABEL_10;
      }
    }
    std::string::operator=((std::string *)a1, &__s);
    goto LABEL_8;
  }
}

void sub_192083F80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0) {
    operator delete(*(void **)v17);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  unsigned int v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  std::vector<std::csub_match>::pointer end = a1->__end_;
  marked_size_t count = a1->__marked_count_;
  int v9 = a2 + 1;
  int v8 = *a2;
  if (a2 + 1 == a3 && v8 == 36) {
    goto LABEL_4;
  }
  if ((v8 - 46) > 0x2E || ((1 << (v8 - 46)) & 0x600000000001) == 0)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v8);
    goto LABEL_17;
  }
  if (v9 != a3 && v8 == 92)
  {
    int v12 = *v9;
    if ((v12 - 36) <= 0x3A && ((1 << (v12 - 36)) & 0x580000000000441) != 0)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v12);
      uint64_t v10 = v3 + 2;
      goto LABEL_18;
    }
  }
  if (*a2 == 46)
  {
    __int16 v13 = (std::__node<char> *)operator new(0x10uLL);
    unint64_t v14 = a1->__end_;
    first = v14->__first_;
    v13->__vftable = (std::__node<char>_vtbl *)&unk_1EE2F8698;
    v13[1].__vftable = (std::__node<char>_vtbl *)first;
    v14->__first_ = v13;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
LABEL_17:
    uint64_t v10 = v3 + 1;
    goto LABEL_18;
  }
LABEL_4:
  uint64_t v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)a1, a2, a3);
LABEL_18:
  if (v3 == v10)
  {
    if (v9 == a3 || *v3 != 92) {
      return v3;
    }
    int v18 = *v9;
    if (v18 == 40)
    {
      uint64_t v19 = (uint64_t)(v3 + 2);
      std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
      unsigned int v20 = a1->__marked_count_;
      do
      {
        uint64_t v21 = (char *)v19;
        uint64_t v19 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<std::__wrap_iter<char const*>>(a1, v19, a3);
      }
      while (v21 != (char *)v19);
      if (v21 == a3 || v21 + 1 == a3 || *v21 != 92 || v21[1] != 41) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      }
      uint64_t v10 = v21 + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, v20);
    }
    else
    {
      BOOL v30 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(a1, v18);
      uint64_t v31 = 2;
      if (!v30) {
        uint64_t v31 = 0;
      }
      uint64_t v10 = &v3[v31];
    }
  }
  if (v10 != v3)
  {
    if (v10 == a3) {
      return a3;
    }
    size_t v16 = a1->__marked_count_ + 1;
    int v17 = *v10;
    if (v17 == 42)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, 0, 0xFFFFFFFFFFFFFFFFLL, end, marked_count + 1, a1->__marked_count_ + 1, 1);
      return ++v10;
    }
    if (v10 + 1 == a3 || v17 != 92 || v10[1] != 123) {
      return v10;
    }
    unsigned int v23 = (unsigned __int8 *)(v10 + 2);
    int v34 = 0;
    char v24 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v23, (unsigned __int8 *)a3, &v34);
    if (v23 == v24) {
LABEL_48:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
    if (v24 != (unsigned __int8 *)a3)
    {
      unint64_t v25 = (char *)(v24 + 1);
      int v26 = *v24;
      if (v26 == 44)
      {
        int v33 = -1;
        int v27 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v24 + 1, (unsigned __int8 *)a3, &v33);
        if (v27 != (unsigned __int8 *)a3 && v27 + 1 != (unsigned __int8 *)a3 && *v27 == 92 && v27[1] == 125)
        {
          size_t v29 = v33;
          size_t v28 = v34;
          if (v33 == -1)
          {
            size_t v29 = -1;
          }
          else if (v33 < v34)
          {
            goto LABEL_48;
          }
          uint64_t v10 = (char *)&v27[2 * (v27[1] == 125)];
          int v32 = a1;
LABEL_58:
          std::basic_regex<char,std::regex_traits<char>>::__push_loop(v32, v28, v29, end, marked_count + 1, v16, 1);
          return v10;
        }
      }
      else if (v25 != a3 && v26 == 92 && *v25 == 125)
      {
        uint64_t v10 = (char *)(v24 + 2);
        size_t v28 = v34;
        int v32 = a1;
        size_t v29 = v34;
        goto LABEL_58;
      }
    }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
  }
  return v3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  std::basic_regex<char>::value_type v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v6 == (unsigned __int8 *)a2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  }
  do
  {
    unint64_t v7 = v6;
    std::basic_regex<char>::value_type v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, (char *)v6, a3);
  }
  while (v7 != v6);
  return v7;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, char *a2, char *a3)
{
  std::vector<std::csub_match>::pointer end = this->__end_;
  marked_size_t count = this->__marked_count_;
  if (a2 == a3)
  {
LABEL_24:
    unint64_t v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, a2, a3);
    goto LABEL_25;
  }
  int v8 = *a2;
  int v9 = *a2;
  uint64_t v10 = (v8 - 36);
  if (v10 > 0x3A) {
    goto LABEL_13;
  }
  if (((1 << (v8 - 36)) & 0x5800000080004D1) == 0)
  {
    if (v10 == 5)
    {
      if (this->__open_count_) {
        goto LABEL_4;
      }
LABEL_14:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v9);
LABEL_32:
      std::string v11 = (unsigned __int8 *)(a2 + 1);
      goto LABEL_37;
    }
LABEL_13:
    if ((v8 - 123) < 2) {
      goto LABEL_4;
    }
    goto LABEL_14;
  }
LABEL_4:
  std::string v11 = (unsigned __int8 *)(a2 + 1);
  if (a2 + 1 == a3 || v9 != 92)
  {
LABEL_22:
    if (v9 == 46)
    {
      int v17 = (std::__node<char> *)operator new(0x10uLL);
      int v18 = this->__end_;
      first = v18->__first_;
      v17->__vftable = (std::__node<char>_vtbl *)&unk_1EE2F8698;
      v17[1].__vftable = (std::__node<char>_vtbl *)first;
      v18->__first_ = v17;
      this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      goto LABEL_37;
    }
    goto LABEL_24;
  }
  int v12 = (char)*v11;
  char v13 = *v11;
  if (((v12 - 36) > 0x3A || ((1 << (v12 - 36)) & 0x5800000080004F1) == 0)
    && (v12 - 123) >= 3)
  {
    if ((this->__flags_ & 0x1F0) == 0x40)
    {
      unint64_t v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>(this, a2 + 1, a3, 0);
    }
    else
    {
      BOOL v15 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(this, v13);
      uint64_t v16 = 2;
      if (!v15) {
        uint64_t v16 = 0;
      }
      unint64_t v14 = &a2[v16];
    }
    if (v14 != a2)
    {
LABEL_25:
      if (v14 == a2 && v14 != a3)
      {
        int v20 = *a2;
        if (v20 == 36)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(this);
          goto LABEL_32;
        }
        if (v20 != 40)
        {
          if (v20 == 94)
          {
            std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(this);
            goto LABEL_32;
          }
          return (unsigned __int8 *)a2;
        }
        std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(this);
        unsigned int v21 = this->__marked_count_;
        ++this->__open_count_;
        BOOL v22 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(this, a2 + 1, a3);
        if (v22 == a3 || (unsigned int v23 = v22, *v22 != 41)) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
        std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(this, v21);
        --this->__open_count_;
        unint64_t v14 = v23 + 1;
      }
      std::string v11 = (unsigned __int8 *)v14;
      if (v14 != a2) {
        goto LABEL_37;
      }
      return (unsigned __int8 *)a2;
    }
    int v9 = *a2;
    goto LABEL_22;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v13);
  std::string v11 = (unsigned __int8 *)(a2 + 2);
LABEL_37:
  size_t v24 = this->__marked_count_ + 1;

  return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)this, v11, (unsigned __int8 *)a3, end, marked_count + 1, v24);
}

BOOL ctu::install_termination_handler()
{
  unint64_t v0 = atomic_load(&_MergedGlobals_3);
  if (!v0)
  {
    uint64_t v2 = 0;
    atomic_compare_exchange_strong((atomic_ullong *volatile)&_MergedGlobals_3, (unint64_t *)&v2, (unint64_t)v1);
  }
  return v0 == 0;
}

void anonymous namespace'::log_termination_info_then_continue_crashing(_anonymous_namespace_ *this)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  atomic_load(&_MergedGlobals_3);
  memset(v4, 170, 24);
  ctu::backtrace_string(0, v4);
  v3.__ptr_ = (void *)0xAAAAAAAAAAAAAAAALL;
  std::current_exception();
  std::exception_ptr::exception_ptr(&v2, &v3);
  v1.__ptr_ = &v2;
  std::rethrow_exception(v1);
  __break(1u);
}

void sub_1920847E8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::exception_ptr a10, std::exception_ptr a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,long long buf,int a23,__int16 a24,__int16 a25,void *a26)
{
  if (a2)
  {
    std::exception_ptr::~exception_ptr(&a10);
    if (a2 == 4)
    {
      size_t v28 = (_anonymous_namespace_ *)__cxa_begin_catch(a1);
      if (os_log_type_enabled((os_log_t)qword_1EB465398, OS_LOG_TYPE_ERROR)) {
        boost::current_exception_diagnostic_information();
      }
    }
    else if (a2 == 3)
    {
      size_t v29 = (_anonymous_namespace_ *)__cxa_begin_catch(a1);
      if (os_log_type_enabled((os_log_t)qword_1EB465398, OS_LOG_TYPE_ERROR)) {
        boost::current_exception_diagnostic_information();
      }
    }
    else
    {
      BOOL v30 = (_anonymous_namespace_ *)__cxa_begin_catch(a1);
      uint64_t v31 = qword_1EB465398;
      BOOL v32 = os_log_type_enabled((os_log_t)qword_1EB465398, OS_LOG_TYPE_ERROR);
      if (a2 == 2)
      {
        if (v32)
        {
          uint64_t v33 = [(_anonymous_namespace_ *)v30 userInfo];
          p_p = &__p;
          if (a17 < 0) {
            p_p = __p;
          }
          LODWORD(buf) = 138543874;
          *(void *)((char *)&buf + 4) = v33;
          WORD6(buf) = 2114;
          *(void *)((char *)&buf + 14) = v30;
          a25 = 2082;
          a26 = p_p;
          _os_log_error_impl(&dword_192046000, v31, OS_LOG_TYPE_ERROR, "Uncaught ObjC exception! Diagnostics follow, then crashing!\n========== Diagnostic info:\nuserInfo = %{public}@\n%{public}@\n========== Backtrace:\n%{public}s\n", (uint8_t *)&buf, 0x20u);
        }
      }
      else if (v32)
      {
        uint64_t v35 = &__p;
        if (a17 < 0) {
          uint64_t v35 = __p;
        }
        LODWORD(buf) = 136446210;
        *(void *)((char *)&buf + 4) = v35;
        _os_log_error_impl(&dword_192046000, v31, OS_LOG_TYPE_ERROR, "Uncaught exception of unknown type (it's not C++ or ObjC)! Crashing! ========== Backtrace:\n%{public}s\n==========", (uint8_t *)&buf, 0xCu);
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x19208475CLL);
  }
  _Unwind_Resume(a1);
}

void anonymous namespace'::sGetLogger(_anonymous_namespace_ *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB4653A0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB4653A0))
  {
    qword_1EB465398 = (uint64_t)os_log_create("com.apple.telephony.util", "terminate");
    __cxa_guard_release(&qword_1EB4653A0);
  }
}

void boost::current_exception_diagnostic_information()
{
}

void sub_192084B48(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,long long a21,long long a22,long long a23,long long a24,void *a25,uint64_t a26,long long a27,long long a28,long long a29,long long a30,long long a31,long long a32,long long a33,long long a34,long long a35,long long a36,long long a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
}

void sub_1920851B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
}

uint64_t (*anonymous namespace'::continue_crashing_with_system_termination_handler(uint64_t (*this)(void), void (*a2)(void)))(void)
{
  if (this) {
    return (uint64_t (*)(void))this();
  }
  return this;
}

uint64_t boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 32))(result);
  }
  *a1 = a2;
  if (a2)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 24);
    return v5(a2);
  }
  return result;
}

uint64_t boost::exception_detail::error_info_container_impl::diagnostic_information(boost::exception_detail::error_info_container_impl *this, const char *a2)
{
  if (a2)
  {
    unint64_t v21 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v4 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
    v20[7] = v4;
    v20[8] = v4;
    v20[5] = v4;
    v20[6] = v4;
    v20[3] = v4;
    _OWORD v20[4] = v4;
    v20[1] = v4;
    v20[2] = v4;
    long long v19 = v4;
    v20[0] = v4;
    *(_OWORD *)int v17 = v4;
    long long v18 = v4;
    _OWORD v16[2] = v4;
    void v16[3] = v4;
    v16[0] = v4;
    v16[1] = v4;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
    size_t v5 = strlen(a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)a2, v5);
    std::basic_regex<char>::value_type v6 = (boost::exception_detail::error_info_container_impl *)*((void *)this + 1);
    if (v6 != (boost::exception_detail::error_info_container_impl *)((char *)this + 16))
    {
      do
      {
        (***((void (****)(unsigned char *__return_ptr))v6 + 5))(__p);
        if (__p[23] >= 0) {
          unint64_t v7 = __p;
        }
        else {
          unint64_t v7 = *(unsigned char **)__p;
        }
        if (__p[23] >= 0) {
          uint64_t v8 = __p[23];
        }
        else {
          uint64_t v8 = *(void *)&__p[8];
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v7, v8);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        int v9 = (boost::exception_detail::error_info_container_impl *)*((void *)v6 + 1);
        if (v9)
        {
          do
          {
            uint64_t v10 = v9;
            int v9 = *(boost::exception_detail::error_info_container_impl **)v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            uint64_t v10 = (boost::exception_detail::error_info_container_impl *)*((void *)v6 + 2);
            BOOL v11 = *(void *)v10 == (void)v6;
            std::basic_regex<char>::value_type v6 = v10;
          }
          while (!v11);
        }
        std::basic_regex<char>::value_type v6 = v10;
      }
      while (v10 != (boost::exception_detail::error_info_container_impl *)((char *)this + 16));
    }
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v16 + 8, __p);
    uint64_t v12 = *(void *)__p;
    long long v13 = *(_OWORD *)&__p[8];
    *(void *)&__p[16] = *((void *)this + 6);
    *(_OWORD *)std::string __p = *((_OWORD *)this + 2);
    *((void *)this + 4) = v12;
    *(_OWORD *)((char *)this + 40) = v13;
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    *(void *)&v16[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v16 + *(void *)(*(void *)&v16[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    *((void *)&v16[0] + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = MEMORY[0x1E4FBA470] + 16;
    if (SHIBYTE(v18) < 0) {
      operator delete(v17[1]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x192FED350](v20);
  }
  uint64_t result = (uint64_t)this + 32;
  if (*((char *)this + 55) < 0) {
    return *(void *)result;
  }
  return result;
}

void sub_192085560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
}

void *boost::exception_detail::error_info_container_impl::get@<X0>(void *result@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  long long v4 = result + 2;
  size_t v5 = (void *)result[2];
  if (!v5) {
    goto LABEL_12;
  }
  uint64_t v6 = *a2;
  unint64_t v7 = result + 2;
  do
  {
    uint64_t v8 = v5[4];
    if (v8 == v6)
    {
      unint64_t v7 = v5;
    }
    else
    {
      uint64_t result = (void *)strcmp((const char *)(*(void *)(v8 + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(v6 + 8) & 0x7FFFFFFFFFFFFFFFLL));
      if ((int)result < 0) {
        ++v5;
      }
      else {
        unint64_t v7 = v5;
      }
    }
    size_t v5 = (void *)*v5;
  }
  while (v5);
  if (v4 != v7
    && ((uint64_t v9 = v7[4], v9 == v6)
     || (uint64_t result = (void *)strcmp((const char *)(*(void *)(v6 + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(v9 + 8) & 0x7FFFFFFFFFFFFFFFLL)), (result & 0x80000000) == 0)))
  {
    uint64_t v10 = v7[6];
    *a3 = v7[5];
    return boost::detail::shared_count::shared_count(a3 + 1, v10);
  }
  else
  {
LABEL_12:
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

void boost::exception_detail::error_info_container_impl::set(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v6 = (uint64_t **)(a1 + 8);
  uint64_t v7 = *a3;
  uint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v8 = (uint64_t **)std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__find_equal<boost::exception_detail::type_info_>(a1 + 8, &v17, v7);
  uint64_t v9 = *v8;
  if (!*v8)
  {
    uint64_t v10 = v8;
    unint64_t v16 = 0xAAAAAAAAAAAAAA01;
    uint64_t v9 = (uint64_t *)operator new(0x38uLL);
    *((void *)&v15 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = a1 + 16;
    uint64_t v11 = *a3;
    void v9[5] = 0;
    void v9[6] = 0;
    v9[4] = v11;
    std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__insert_node_at(v6, v17, v10, v9);
    *(void *)&long long v15 = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,void *>>>>::reset[abi:ne180100]((uint64_t *)&v15);
  }
  uint64_t v12 = a2[1];
  *(void *)&long long v15 = *a2;
  long long v13 = (boost::detail::shared_count *)boost::detail::shared_count::shared_count((void *)&v15 + 1, v12);
  long long v14 = *(_OWORD *)(v9 + 5);
  *(_OWORD *)(v9 + 5) = v15;
  long long v15 = v14;
  boost::detail::shared_count::~shared_count(v13);
  if (*(char *)(a1 + 55) < 0)
  {
    **(unsigned char **)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 32) = 0;
    *(unsigned char *)(a1 + 55) = 0;
  }
}

uint64_t boost::exception_detail::error_info_container_impl::add_ref(uint64_t this)
{
  return this;
}

BOOL boost::exception_detail::error_info_container_impl::release(boost::exception_detail::error_info_container_impl *this)
{
  int v1 = *((_DWORD *)this + 14) - 1;
  *((_DWORD *)this + 14) = v1;
  if (this && !v1)
  {
    if (*((char *)this + 55) < 0) {
      operator delete(*((void **)this + 4));
    }
    std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::destroy(*((void **)this + 2));
    operator delete(this);
  }
  return v1 == 0;
}

void boost::exception_detail::error_info_container_impl::clone(boost::exception_detail::error_info_container_impl *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  long long v4 = (char *)operator new(0x40uLL);
  *((void *)v4 + 2) = 0;
  uint64_t v5 = (uint64_t)(v4 + 16);
  *((void *)v4 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v4 + 16;
  uint64_t v6 = (uint64_t **)(v4 + 8);
  *(void *)long long v4 = &unk_1EE2F7E00;
  *((void *)v4 + 3) = 0;
  *((void *)v4 + 4) = 0;
  *((void *)v4 + 5) = 0;
  *((void *)v4 + 6) = 0;
  *((_DWORD *)v4 + 14) = 0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt(a2, (uint64_t)v4);
  uint64_t v7 = (boost::exception_detail::error_info_container_impl *)*((void *)this + 1);
  if (v7 != (boost::exception_detail::error_info_container_impl *)((char *)this + 16))
  {
    do
    {
      unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
      uint64_t v20 = 0xAAAAAAAAAAAAAAAALL;
      uint64_t v8 = (*(uint64_t (**)(void))(**((void **)v7 + 5) + 8))(*((void *)v7 + 5));
      unint64_t v19 = v8;
      uint64_t v20 = 0;
      uint64_t v9 = (char *)operator new(0x58uLL);
      *(void *)uint64_t v9 = &unk_1EE2F7E40;
      *((void *)v9 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0x100000001;
      pthread_mutex_init((pthread_mutex_t *)(v9 + 16), 0);
      *(void *)uint64_t v9 = &unk_1EE2F7E88;
      *((void *)v9 + 10) = v8;
      uint64_t v10 = v20;
      uint64_t v20 = (uint64_t)v9;
      v21[0] = v10;
      boost::detail::shared_count::~shared_count((boost::detail::shared_count *)v21);
      uint64_t v17 = *((void *)v7 + 4);
      *(void *)&long long v18 = v19;
      boost::detail::shared_count::shared_count((void *)&v18 + 1, v20);
      uint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
      uint64_t v11 = (uint64_t **)std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__find_equal<boost::exception_detail::type_info_>((uint64_t)v6, &v22, v17);
      if (!*v11)
      {
        uint64_t v12 = v11;
        _OWORD v21[2] = 0xAAAAAAAAAAAAAA01;
        long long v13 = (char *)operator new(0x38uLL);
        v21[1] = v5;
        *((void *)v13 + 4) = v17;
        *(_OWORD *)(v13 + 40) = v18;
        long long v18 = 0uLL;
        std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__insert_node_at(v6, v22, v12, (uint64_t *)v13);
        v21[0] = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,void *>>>>::reset[abi:ne180100](v21);
      }
      boost::detail::shared_count::~shared_count((boost::detail::shared_count *)((char *)&v18 + 8));
      boost::detail::shared_count::~shared_count((boost::detail::shared_count *)&v20);
      long long v14 = (boost::exception_detail::error_info_container_impl *)*((void *)v7 + 1);
      if (v14)
      {
        do
        {
          long long v15 = v14;
          long long v14 = *(boost::exception_detail::error_info_container_impl **)v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          long long v15 = (boost::exception_detail::error_info_container_impl *)*((void *)v7 + 2);
          BOOL v16 = *(void *)v15 == (void)v7;
          uint64_t v7 = v15;
        }
        while (!v16);
      }
      uint64_t v7 = v15;
    }
    while (v15 != (boost::exception_detail::error_info_container_impl *)((char *)this + 16));
  }
}

void sub_192085A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
}

void *boost::detail::shared_count::shared_count(void *a1, uint64_t a2)
{
  *a1 = a2;
  if (a2)
  {
    long long v4 = (pthread_mutex_t *)(a2 + 16);
    pthread_mutex_lock((pthread_mutex_t *)(a2 + 16));
    ++*(_DWORD *)(a2 + 8);
    pthread_mutex_unlock(v4);
  }
  return a1;
}

void *std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__find_equal<boost::exception_detail::type_info_>(uint64_t a1, void *a2, uint64_t a3)
{
  long long v4 = (void *)(a1 + 8);
  uint64_t v5 = *(void **)(a1 + 8);
  if (v5)
  {
    uint64_t v7 = v5[4];
    if (v7 != a3)
    {
      uint64_t v8 = (const char *)(*(void *)(a3 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      do
      {
        uint64_t v9 = (const char *)(*(void *)(v7 + 8) & 0x7FFFFFFFFFFFFFFFLL);
        if (strcmp(v8, v9) < 0)
        {
          uint64_t v10 = (void *)*v5;
          long long v4 = v5;
          if (!*v5) {
            break;
          }
        }
        else
        {
          if ((strcmp(v9, v8) & 0x80000000) == 0) {
            break;
          }
          long long v4 = v5 + 1;
          uint64_t v10 = (void *)v5[1];
          if (!v10) {
            break;
          }
        }
        uint64_t v7 = v10[4];
        uint64_t v5 = v10;
      }
      while (v7 != a3);
    }
  }
  else
  {
    uint64_t v5 = (void *)(a1 + 8);
  }
  *a2 = v5;
  return v4;
}

uint64_t *std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  uint64_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      std::exception_ptr v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      std::exception_ptr v3 = (uint64_t *)v2[2];
      long long v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (int v8 = *(unsigned __int8 *)(v7 + 24), v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            uint64_t v9 = (uint64_t **)a2[2];
          }
          else
          {
            uint64_t v9 = (uint64_t **)v2[1];
            uint64_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              _OWORD v10[2] = (uint64_t)v2;
              std::exception_ptr v3 = (uint64_t *)v2[2];
            }
            void v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *uint64_t v9 = v2;
            v2[2] = (uint64_t)v9;
            std::exception_ptr v3 = v9[2];
            std::exception_ptr v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          uint64_t *v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (int v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          uint64_t *v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            std::exception_ptr v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          std::exception_ptr v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        std::exception_ptr v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        uint64_t *v2 = (uint64_t)v3;
LABEL_27:
        void v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      *uint64_t v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,void *>>>>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  if (v1)
  {
    if (*((unsigned char *)a1 + 16)) {
      boost::detail::shared_count::~shared_count((boost::detail::shared_count *)(v1 + 48));
    }
    operator delete((void *)v1);
  }
}

void boost::detail::shared_count::~shared_count(boost::detail::shared_count *this)
{
  uint64_t v1 = *(void *)this;
  if (*(void *)this)
  {
    pthread_mutex_lock((pthread_mutex_t *)(v1 + 16));
    int v2 = *(_DWORD *)(v1 + 8) - 1;
    *(_DWORD *)(v1 + 8) = v2;
    pthread_mutex_unlock((pthread_mutex_t *)(v1 + 16));
    if (!v2)
    {
      (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
      pthread_mutex_lock((pthread_mutex_t *)(v1 + 16));
      int v3 = *(_DWORD *)(v1 + 12) - 1;
      *(_DWORD *)(v1 + 12) = v3;
      pthread_mutex_unlock((pthread_mutex_t *)(v1 + 16));
      if (!v3) {
        (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
      }
    }
  }
}

void std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::destroy(*a1);
    std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::destroy(a1[1]);
    boost::detail::shared_count::~shared_count((boost::detail::shared_count *)(a1 + 6));
    operator delete(a1);
  }
}

void boost::detail::sp_counted_impl_p<boost::exception_detail::error_info_base>::~sp_counted_impl_p(boost::detail::sp_counted_base *a1)
{
  boost::detail::sp_counted_base::~sp_counted_base(a1);

  operator delete(v1);
}

uint64_t boost::detail::sp_counted_impl_p<boost::exception_detail::error_info_base>::dispose(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 80);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 24))();
  }
  return result;
}

uint64_t boost::detail::sp_counted_base::destroy(uint64_t this)
{
  if (this) {
    return (*(uint64_t (**)(void))(*(void *)this + 8))();
  }
  return this;
}

uint64_t boost::detail::sp_counted_impl_p<boost::exception_detail::error_info_base>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::exception_detail::error_info_base>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::exception_detail::error_info_base>::get_untyped_deleter()
{
  return 0;
}

void boost::detail::sp_counted_base::~sp_counted_base(boost::detail::sp_counted_base *this)
{
  *(void *)this = &unk_1EE2F7E40;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 16));
}

uint64_t *boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2)) {
    *a1 = 0;
  }
  return a1;
}

void ctu::RequestRestResourceState::dumpState(ctu::RequestRestResourceState *this@<X0>, void *a2@<X8>)
{
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x192FEE1B0](v5) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 1);
  if (!v7)
  {
    int v8 = 0;
    goto LABEL_18;
  }
  int v8 = std::__shared_weak_count::lock(v7);
  if (!v8 || (uint64_t v9 = *(void *)this) == 0)
  {
LABEL_18:
    uint64_t v12 = a2;
    uint64_t v13 = "provider";
    xpc::dict::object_proxy::operator=((uint64_t)&v12, &v11);
    xpc_release(v11);
    xpc_object_t v11 = 0;
    if (!v8) {
      return;
    }
    goto LABEL_19;
  }
  uint64_t v10 = (const char *)(v9 + 8);
  if (*(char *)(v9 + 31) < 0) {
    uint64_t v10 = *(const char **)v10;
  }
  xpc_object_t v14 = xpc_string_create(v10);
  if (!v14) {
    xpc_object_t v14 = xpc_null_create();
  }
  uint64_t v12 = a2;
  uint64_t v13 = "provider";
  xpc::dict::object_proxy::operator=((uint64_t)&v12, &v14, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v14);
  xpc_object_t v14 = 0;
LABEL_19:
  std::__shared_weak_count::__release_shared[abi:ne180100](v8);
}

void xpc::dict::object_proxy::operator=(uint64_t a1@<X0>, xpc_object_t *a2@<X8>)
{
  xpc_object_t object = xpc_null_create();
  xpc::dict::object_proxy::operator=(a1, &object, a2);
  xpc_release(object);
}

void *ctu::RequestRestResource::RequestRestResource(void *this)
{
  *this = &unk_1EE2F6AA8;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = &unk_1EE2F6AA8;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

void ctu::RequestRestResource::~RequestRestResource(ctu::RequestRestResource *this)
{
  *(void *)this = &unk_1EE2F6AA8;
  boost::container::vector<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RequestRestResourceState>>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RequestRestResourceState>>>,void>::~vector((void *)this + 1);
}

{
  *(void *)this = &unk_1EE2F6AA8;
  boost::container::vector<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RequestRestResourceState>>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RequestRestResourceState>>>,void>::~vector((void *)this + 1);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EE2F6AA8;
  boost::container::vector<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RequestRestResourceState>>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RequestRestResourceState>>>,void>::~vector((void *)this + 1);

  operator delete(this);
}

uint64_t ctu::RequestRestResource::handleMessage_Root_GET(ctu::RequestRestResource *this, ctu::RestResourceContext *a2)
{
  ctu::RequestRestResource::getResourceArray(this, &object);
  xpc_object_t v5 = object;
  if (object) {
    xpc_retain(object);
  }
  else {
    xpc_object_t v5 = xpc_null_create();
  }
  (*(void (**)(ctu::RestResourceContext *, xpc_object_t *))(*(void *)a2 + 32))(a2, &v5);
  xpc_release(v5);
  xpc_object_t v5 = 0;
  xpc_release(object);
  return 1;
}

void sub_192086414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, xpc_object_t object)
{
}

uint64_t ctu::RequestRestResource::handleMessage_RootDumpState_GET(ctu::RequestRestResource *this, ctu::RestResourceContext *a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    xpc_object_t v15 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t v15 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x192FEE1B0](v5) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  xpc_object_t v15 = v6;
LABEL_9:
  xpc_release(v5);
  uint64_t v7 = *((void *)this + 2);
  if (v7)
  {
    int v8 = (void **)*((void *)this + 1);
    uint64_t v9 = 32 * v7;
    do
    {
      ctu::RequestRestResourceState::dumpState((ctu::RequestRestResourceState *)v8[3], &v13);
      uint64_t v10 = v8;
      if (*((char *)v8 + 23) < 0) {
        uint64_t v10 = *v8;
      }
      v12[0] = &v15;
      v12[1] = v10;
      xpc::dict::object_proxy::operator=((uint64_t)v12, &v13, &object);
      xpc_release(object);
      xpc_object_t object = 0;
      xpc_release(v13);
      xpc_object_t v13 = 0;
      v8 += 4;
      v9 -= 32;
    }
    while (v9);
  }
  v12[0] = v15;
  if (v15) {
    xpc_retain(v15);
  }
  else {
    v12[0] = xpc_null_create();
  }
  (*(void (**)(ctu::RestResourceContext *, xpc_object_t *))(*(void *)a2 + 32))(a2, v12);
  xpc_release(v12[0]);
  xpc_release(v15);
  return 1;
}

void sub_1920865B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t a14)
{
}

uint64_t ctu::RequestRestResource::handleMessage_Resource_Provider_GET(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, size_t a5)
{
  xpc_object_t v9 = xpc_array_create(0, 0);
  if (v9 || (xpc_object_t v9 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x192FEE1B0](v9) == MEMORY[0x1E4F14568])
    {
      xpc_retain(v9);
      xpc_object_t v10 = v9;
    }
    else
    {
      xpc_object_t v10 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v10 = xpc_null_create();
    xpc_object_t v9 = 0;
  }
  xpc_release(v9);
  if (a4)
  {
    std::string::basic_string[abi:ne180100](__p, a4, a5);
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v21 = 0;
  }
  boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>>::find((uint64_t)&v22, (void ***)(a1 + 8), __p);
  uint64_t v11 = v22;
  if (SHIBYTE(v21) < 0) {
    operator delete(__p[0]);
  }
  if (v11 != *(void *)(a1 + 8) + 32 * *(void *)(a1 + 16))
  {
    uint64_t v12 = *(uint64_t **)(v11 + 24);
    xpc_object_t v13 = (std::__shared_weak_count *)v12[1];
    if (v13)
    {
      xpc_object_t v14 = std::__shared_weak_count::lock(v13);
      if (v14)
      {
        xpc_object_t v15 = v14;
        uint64_t v16 = *v12;
        if (*v12)
        {
          uint64_t v17 = (const char *)(v16 + 8);
          if (*(char *)(v16 + 31) < 0) {
            uint64_t v17 = *(const char **)v17;
          }
          xpc_object_t v18 = xpc_string_create(v17);
          if (!v18) {
            xpc_object_t v18 = xpc_null_create();
          }
          xpc_array_append_value(v10, v18);
          xpc_release(v18);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
    }
  }
  __p[0] = v10;
  if (v10) {
    xpc_retain(v10);
  }
  else {
    __p[0] = xpc_null_create();
  }
  (*(void (**)(uint64_t, void **))(*(void *)a2 + 32))(a2, __p);
  xpc_release(__p[0]);
  xpc_release(v10);
  return 1;
}

void sub_1920867B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
  xpc_release(v11);
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  xpc_release(v9);
  _Unwind_Resume(a1);
}

uint64_t ctu::RequestRestResource::handleRestMessage_SET(ctu::RequestRestResource *this, ctu::RestResourceContext *a2, const ctu::PathView *a3)
{
  return 1;
}

BOOL ctu::RequestRestResource::handleRestMessage_POP(ctu::RequestRestResource *this, ctu::RestResourceContext *a2, const ctu::PathView *a3)
{
  memset(v10, 170, sizeof(v10));
  long long v5 = *((_OWORD *)a3 + 1);
  v9[0] = *(_OWORD *)a3;
  v9[1] = v5;
  int v7 = (int)v10[0];
  if (LODWORD(v10[0]) == 3) {
    ctu::RequestRestResource::handleMessage_Resource_POP((uint64_t)this, (void (***)(void **__return_ptr, void))a2, v6, v10[1], (size_t)v10[2]);
  }
  return v7 == 3;
}

uint64_t ctu::RequestRestResource::handleMessage_Resource_POP(uint64_t a1, void (***a2)(void **__return_ptr, void), uint64_t a3, void *a4, size_t a5)
{
  int v7 = (void ***)(a1 + 8);
  if (a4)
  {
    std::string::basic_string[abi:ne180100](&__p, a4, a5);
  }
  else
  {
    std::string __p = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
  }
  boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>>::find((uint64_t)&v18, v7, &__p);
  uint64_t v8 = v18;
  if (SHIBYTE(v17) < 0) {
    operator delete(__p);
  }
  if (v8 != *(void *)(a1 + 8) + 32 * *(void *)(a1 + 16))
  {
    uint64_t v9 = *(void *)(v8 + 24);
    (**a2)(&__p, a2);
    xpc_object_t v10 = *(std::__shared_weak_count **)(v9 + 8);
    uint64_t v11 = v16;
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    if (v11 == v10)
    {
      uint64_t v12 = *(void **)(v8 + 24);
      xpc_object_t v13 = (std::__shared_weak_count *)v12[1];
      void *v12 = 0;
      v12[1] = 0;
      if (v13) {
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  return 1;
}

BOOL ctu::RequestRestResource::handleRestMessage_PUSH(ctu::RequestRestResource *this, ctu::RestResourceContext *a2, const ctu::PathView *a3)
{
  memset(v10, 170, sizeof(v10));
  long long v5 = *((_OWORD *)a3 + 1);
  v9[0] = *(_OWORD *)a3;
  v9[1] = v5;
  int v7 = (int)v10[0];
  if (LODWORD(v10[0]) == 3) {
    ctu::RequestRestResource::handleMessage_Resource_PUSH(this, (void (***)(void **__return_ptr, void))a2, v6, v10[1], (size_t)v10[2]);
  }
  return v7 == 3;
}

uint64_t ctu::RequestRestResource::handleMessage_Resource_PUSH(void *a1, void (***a2)(void **__return_ptr, void), uint64_t a3, void *a4, size_t a5)
{
  uint64_t v9 = (void ***)(a1 + 1);
  if (a4)
  {
    std::string::basic_string[abi:ne180100](&__p, a4, a5);
  }
  else
  {
    std::string __p = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
  }
  boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>>::find((uint64_t)&v15, v9, &__p);
  if (SHIBYTE(v18) < 0)
  {
    operator delete(__p);
    if (a4) {
      goto LABEL_6;
    }
  }
  else if (a4)
  {
LABEL_6:
    std::string::basic_string[abi:ne180100](&__p, a4, a5);
    goto LABEL_9;
  }
  std::string __p = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
LABEL_9:
  ctu::RequestRestResource::createIfNotPresent(a1, (uint64_t)&__p, &v15);
  if (SHIBYTE(v18) < 0) {
    operator delete(__p);
  }
  (**a2)(&__p, a2);
  xpc_object_t v10 = __p;
  if (__p)
  {
    uint64_t v11 = *(void **)(v15 + 24);
    uint64_t v12 = v17;
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    xpc_object_t v13 = (std::__shared_weak_count *)v11[1];
    void *v11 = v10;
    v11[1] = v12;
    if (v13) {
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  return 1;
}

void sub_192086B5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::RequestRestResource::handleRestMessage_NOTIFY(ctu::RequestRestResource *this, ctu::RestResourceContext *a2, const ctu::PathView *a3)
{
  return 0;
}

void ctu::RequestRestResource::getResourceArray(ctu::RequestRestResource *this@<X0>, xpc_object_t *a2@<X8>)
{
  *a2 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_array_create(0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x192FEE1B0](v5) == MEMORY[0x1E4F14568])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  uint64_t v7 = *((void *)this + 2);
  if (v7)
  {
    uint64_t v8 = (long long *)*((void *)this + 1);
    uint64_t v9 = 32 * v7;
    do
    {
      if (*((char *)v8 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v8, *((void *)v8 + 1));
      }
      else
      {
        long long v10 = *v8;
        __p.__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v10;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      xpc_object_t v12 = xpc_string_create((const char *)p_p);
      if (!v12) {
        xpc_object_t v12 = xpc_null_create();
      }
      xpc_array_append_value(*a2, v12);
      xpc_release(v12);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      v8 += 2;
      v9 -= 32;
    }
    while (v9);
  }
}

void sub_192086CD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  xpc::array::~array(v14);
  _Unwind_Resume(a1);
}

BOOL ctu::RequestRestResource::createIfNotPresent(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1[1];
  unint64_t v5 = a1[2];
  xpc_object_t v4 = a1 + 1;
  uint64_t v6 = v3 + 32 * v5;
  uint64_t v7 = *a3;
  if (*a3 == v6)
  {
    uint64_t v11 = operator new(0x10uLL);
    void *v11 = 0;
    v11[1] = 0;
    v22[0] = v11;
    *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v12 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)size_t v24 = v12;
    *(_OWORD *)&v24[16] = v12;
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v24, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      uint64_t v3 = a1[1];
      unint64_t v5 = a1[2];
    }
    else
    {
      *(_OWORD *)size_t v24 = *(_OWORD *)a2;
      *(void *)&v24[16] = *(void *)(a2 + 16);
    }
    v22[0] = 0;
    *(void *)&v24[24] = v11;
    v22[1] = v24;
    v22[2] = v4;
    uint64_t v13 = v3 + 32 * v5;
    while (v5)
    {
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(v3 + 32 * (v5 >> 1)), (void **)v24) & 0x80u) == 0)
      {
        v5 >>= 1;
      }
      else
      {
        v3 += 32 * (v5 >> 1) + 32;
        v5 += ~(v5 >> 1);
      }
    }
    if (v3 == v13
      || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v24, (void **)v3) & 0x80) != 0)
    {
      uint64_t v14 = a1[2];
      if (a1[3] == v14)
      {
        boost::container::vector<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RequestRestResourceState>>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RequestRestResourceState>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RequestRestResourceState>>>,boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RequestRestResourceState>>*,boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RequestRestResourceState>>>>(&v23, (char *)v4, (long long *)v3, (long long *)v24);
        uint64_t v3 = v23;
      }
      else
      {
        uint64_t v15 = *v4 + 32 * v14;
        if (v15 == v3)
        {
          long long v20 = *(_OWORD *)v24;
          *(void *)(v3 + 16) = *(void *)&v24[16];
          *(_OWORD *)uint64_t v3 = v20;
          memset(v24, 0, sizeof(v24));
          *(void *)(v15 + 24) = *(void *)&v24[24];
          ++a1[2];
        }
        else
        {
          uint64_t v16 = v15 - 32;
          *(_OWORD *)uint64_t v15 = *(_OWORD *)(v15 - 32);
          *(void *)(v15 - 32) = 0;
          *(void *)(v15 - 24) = 0;
          uint64_t v17 = *(void *)(v15 - 16);
          uint64_t v18 = *(void *)(v15 - 8);
          *(void *)(v15 - 16) = 0;
          *(void *)(v15 - 8) = 0;
          *(void *)(v15 + 16) = v17;
          *(void *)(v15 + 24) = v18;
          ++a1[2];
          if (v15 - 32 != v3)
          {
            do
            {
              uint64_t v19 = v16 - 32;
              boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RequestRestResourceState>>::operator=(v16, (long long *)(v16 - 32));
              uint64_t v16 = v19;
            }
            while (v19 != v3);
          }
          boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RequestRestResourceState>>::operator=(v3, (long long *)v24);
        }
      }
    }
    std::unique_ptr<ctu::RequestRestResourceState>::reset[abi:ne180100]((void **)&v24[24], 0);
    if ((v24[23] & 0x80000000) != 0) {
      operator delete(*(void **)v24);
    }
    *a3 = v3;
    std::unique_ptr<ctu::RequestRestResourceState>::reset[abi:ne180100](v22, 0);
  }
  return v7 == v6;
}

void sub_192086FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  xpc_object_t v4 = va_arg(va1, void *);
  boost::container::dtl::value_destructor<boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RequestRestResourceState>>>,boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RequestRestResourceState>>>::~value_destructor((uint64_t *)va1);
  std::unique_ptr<ctu::RequestRestResourceState>::reset[abi:ne180100]((void **)va, 0);
  _Unwind_Resume(a1);
}

void *boost::container::vector<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RequestRestResourceState>>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RequestRestResourceState>>>,void>::~vector(void *a1)
{
  uint64_t v2 = a1[1];
  if (v2)
  {
    uint64_t v3 = (void **)(*a1 + 24);
    do
    {
      std::unique_ptr<ctu::RequestRestResourceState>::reset[abi:ne180100](v3, 0);
      if (*((char *)v3 - 1) < 0) {
        operator delete(*(v3 - 3));
      }
      v3 += 4;
      --v2;
    }
    while (v2);
  }
  if (a1[2]) {
    operator delete((void *)*a1);
  }
  return a1;
}

void std::unique_ptr<ctu::RequestRestResourceState>::reset[abi:ne180100](void **a1, void *a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    uint64_t v3 = (std::__shared_weak_count *)v2[1];
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    operator delete(v2);
  }
}

uint64_t *boost::container::dtl::value_destructor<boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RequestRestResourceState>>>,boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RequestRestResourceState>>>::~value_destructor(uint64_t *a1)
{
  uint64_t v2 = *a1;
  std::unique_ptr<ctu::RequestRestResourceState>::reset[abi:ne180100]((void **)(*a1 + 24), 0);
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  return a1;
}

void boost::container::vector<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RequestRestResourceState>>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RequestRestResourceState>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RequestRestResourceState>>>,boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RequestRestResourceState>>*,boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RequestRestResourceState>>>>(void *a1, char *a2, long long *a3, long long *a4)
{
  unint64_t v4 = *((void *)a2 + 2);
  unint64_t v5 = 0x3FFFFFFFFFFFFFFLL;
  unint64_t v6 = *((void *)a2 + 1) + 1;
  if (0x3FFFFFFFFFFFFFFLL - v4 < v6 - v4) {
    goto LABEL_27;
  }
  unint64_t v7 = v4 >> 61;
  unint64_t v8 = 8 * v4;
  if (v7 > 4) {
    uint64_t v9 = -1;
  }
  else {
    uint64_t v9 = v8;
  }
  unint64_t v10 = v8 / 5;
  if (v7) {
    unint64_t v10 = v9;
  }
  if (v10 < 0x3FFFFFFFFFFFFFFLL) {
    unint64_t v5 = v10;
  }
  unint64_t v11 = v6 <= v5 ? v5 : *((void *)a2 + 1) + 1;
  if (v11 >> 58) {
LABEL_27:
  }
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
  uint64_t v16 = *(char **)a2;
  uint64_t v17 = (char *)operator new(32 * v11);
  uint64_t v18 = v17;
  uint64_t v19 = *(char **)a2;
  uint64_t v20 = *(void *)a2 + 32 * *((void *)a2 + 1);
  uint64_t v21 = v17;
  if (*(long long **)a2 != a3)
  {
    uint64_t v22 = *(char **)a2;
    uint64_t v21 = v17;
    do
    {
      long long v23 = *(_OWORD *)v22;
      *((void *)v21 + 2) = *((void *)v22 + 2);
      *(_OWORD *)uint64_t v21 = v23;
      *(void *)uint64_t v22 = 0;
      *((void *)v22 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
      uint64_t v24 = *((void *)v22 + 3);
      *((void *)v22 + 2) = 0;
      *((void *)v22 + 3) = 0;
      *((void *)v21 + 3) = v24;
      v21 += 32;
      v22 += 32;
    }
    while (v22 != (char *)a3);
  }
  long long v25 = *a4;
  *((void *)v21 + 2) = *((void *)a4 + 2);
  *(_OWORD *)uint64_t v21 = v25;
  *(void *)a4 = 0;
  *((void *)a4 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
  uint64_t v26 = *((void *)a4 + 3);
  *((void *)a4 + 2) = 0;
  *((void *)a4 + 3) = 0;
  *((void *)v21 + 3) = v26;
  if ((long long *)v20 != a3)
  {
    int v27 = v21 + 56;
    size_t v28 = a3;
    do
    {
      long long v29 = *v28;
      *(v27 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = *((void *)v28 + 2);
      *(_OWORD *)(v27 - 3) = v29;
      *(void *)size_t v28 = 0;
      *((void *)v28 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
      uint64_t v30 = *((void *)v28 + 3);
      *((void *)v28 + 2) = 0;
      *((void *)v28 + 3) = 0;
      void *v27 = v30;
      v27 += 4;
      v28 += 2;
    }
    while (v28 != (long long *)v20);
  }
  if (v19)
  {
    uint64_t v31 = *((void *)a2 + 1);
    if (v31)
    {
      BOOL v32 = (void **)(v19 + 24);
      do
      {
        std::unique_ptr<ctu::RequestRestResourceState>::reset[abi:ne180100](v32, 0);
        if (*((char *)v32 - 1) < 0) {
          operator delete(*(v32 - 3));
        }
        v32 += 4;
        --v31;
      }
      while (v31);
    }
    operator delete(*(void **)a2);
  }
  uint64_t v33 = *((void *)a2 + 1) + 1;
  *(void *)a2 = v18;
  *((void *)a2 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v33;
  *((void *)a2 + 2) = v11;
  *a1 = &v18[(char *)a3 - v16];
}

uint64_t boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RequestRestResourceState>>::operator=(uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  unint64_t v5 = (void *)*((void *)a2 + 3);
  *((void *)a2 + 3) = 0;
  std::unique_ptr<ctu::RequestRestResourceState>::reset[abi:ne180100]((void **)(a1 + 24), v5);
  return a1;
}

double mav_buffer_queue_create()
{
  unint64_t v0 = operator new(0x38uLL);
  double result = 0.0;
  *unint64_t v0 = 0u;
  v0[1] = 0u;
  v0[2] = 0u;
  *((_DWORD *)v0 + 12) = 0;
  return result;
}

void mav_buffer_queue_free(void **__p)
{
  if (!__p) {
    return;
  }
  uint64_t v2 = (void **)__p[1];
  uint64_t v3 = (void **)__p[2];
  __p[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)__p[2];
      uint64_t v2 = (void **)((char *)__p[1] + 8);
      __p[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_10;
    }
    uint64_t v6 = 512;
  }
  __p[4] = (void *)v6;
LABEL_10:
  if (v2 != v3)
  {
    do
    {
      unint64_t v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = __p[1];
    unint64_t v8 = __p[2];
    if (v8 != v9) {
      __p[2] = &v8[(v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8];
    }
  }
  if (*__p) {
    operator delete(*__p);
  }

  operator delete(__p);
}

uint64_t mav_buffer_queue_enqueue_internal(uint64_t a1, dispatch_data_t *a2)
{
  dispatch_data_t v4 = *a2;
  int size = dispatch_data_get_size(*a2);
  uint64_t v6 = *(char **)(a1 + 16);
  unint64_t v7 = *(char **)(a1 + 8);
  uint64_t v8 = v6 - v7;
  *(_DWORD *)(a1 + 48) += size;
  if (v6 == v7) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = ((v6 - v7) << 6) - 1;
  }
  unint64_t v11 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  unint64_t v12 = v10 + v11;
  if (v9 == v10 + v11)
  {
    if (v11 < 0x200)
    {
      uint64_t v26 = v8 >> 3;
      int v27 = *(char **)(a1 + 24);
      size_t v28 = *(char **)a1;
      uint64_t v29 = (uint64_t)&v27[-*(void *)a1];
      if (v8 >> 3 >= (unint64_t)(v29 >> 3))
      {
        uint64_t v32 = v29 >> 2;
        if (v27 == v28) {
          unint64_t v33 = 1;
        }
        else {
          unint64_t v33 = v32;
        }
        int v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v33);
        uint64_t v36 = v35;
        unint64_t v37 = operator new(0x1000uLL);
        BOOL v38 = &v34[8 * v26];
        uint64_t v39 = &v34[8 * v36];
        if (v26 == v36)
        {
          uint64_t v40 = 8 * v26;
          if (v8 < 1)
          {
            uint64_t v76 = v37;
            uint64_t v77 = v40 >> 2;
            if (v6 == v7) {
              unint64_t v78 = 1;
            }
            else {
              unint64_t v78 = v77;
            }
            uint64_t v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v78);
            BOOL v38 = &v79[8 * (v78 >> 2)];
            uint64_t v39 = &v79[8 * v80];
            if (v34) {
              operator delete(v34);
            }
            int v34 = v79;
            unint64_t v37 = v76;
          }
          else
          {
            uint64_t v41 = v40 >> 3;
            if (v41 >= -1) {
              unint64_t v42 = v41 + 1;
            }
            else {
              unint64_t v42 = v41 + 2;
            }
            v38 -= 8 * (v42 >> 1);
          }
        }
        *(void *)BOOL v38 = v37;
        uint64_t v81 = v38 + 8;
        for (uint64_t i = *(void *)(a1 + 16); i != *(void *)(a1 + 8); i -= 8)
        {
          if (v38 == v34)
          {
            if (v81 >= v39)
            {
              if (v39 == v34) {
                unint64_t v87 = 1;
              }
              else {
                unint64_t v87 = (v39 - v34) >> 2;
              }
              uint64_t v88 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v87);
              unint64_t v90 = v88;
              BOOL v38 = &v88[(2 * v87 + 6) & 0xFFFFFFFFFFFFFFF8];
              uint64_t v92 = v81 - v34;
              BOOL v91 = v81 == v34;
              uint64_t v81 = v38;
              if (!v91)
              {
                uint64_t v81 = &v38[v92 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v93 = 8 * (v92 >> 3);
                v94 = v38;
                unint64_t v95 = (uint64_t *)v34;
                do
                {
                  uint64_t v96 = *v95++;
                  *(void *)v94 = v96;
                  v94 += 8;
                  v93 -= 8;
                }
                while (v93);
              }
              uint64_t v39 = &v88[8 * v89];
              if (v34) {
                operator delete(v34);
              }
              int v34 = v90;
            }
            else
            {
              uint64_t v83 = (v39 - v81) >> 3;
              if (v83 >= -1) {
                uint64_t v84 = v83 + 1;
              }
              else {
                uint64_t v84 = v83 + 2;
              }
              uint64_t v85 = v84 >> 1;
              BOOL v38 = &v34[8 * (v84 >> 1)];
              uint64_t v86 = v34;
              if (v81 != v34)
              {
                memmove(v38, v34, v81 - v34);
                uint64_t v86 = v81;
              }
              uint64_t v81 = &v86[8 * v85];
            }
          }
          uint64_t v97 = *(void *)(i - 8);
          *((void *)v38 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v97;
          v38 -= 8;
        }
        uint64_t v98 = *(char **)a1;
        *(void *)a1 = v34;
        *(void *)(a1 + 8) = v38;
        *(void *)(a1 + 16) = v81;
        *(void *)(a1 + 24) = v39;
        if (v98) {
          operator delete(v98);
        }
        goto LABEL_36;
      }
      uint64_t v30 = operator new(0x1000uLL);
      uint64_t v31 = v30;
      if (v27 == v6)
      {
        if (v7 == v28)
        {
          if (v6 == v7) {
            unint64_t v54 = 1;
          }
          else {
            unint64_t v54 = (v27 - v7) >> 2;
          }
          uint64_t v55 = 2 * v54;
          unint64_t v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v54);
          unint64_t v7 = &v56[(v55 + 6) & 0xFFFFFFFFFFFFFFF8];
          uint64_t v58 = *(uint64_t **)(a1 + 8);
          unint64_t v59 = v7;
          uint64_t v60 = *(void *)(a1 + 16) - (void)v58;
          if (v60)
          {
            unint64_t v59 = &v7[v60 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v61 = 8 * (v60 >> 3);
            std::string::size_type v62 = &v56[(v55 + 6) & 0xFFFFFFFFFFFFFFF8];
            do
            {
              uint64_t v63 = *v58++;
              *(void *)std::string::size_type v62 = v63;
              v62 += 8;
              v61 -= 8;
            }
            while (v61);
          }
          long long v64 = *(char **)a1;
          *(void *)a1 = v56;
          *(void *)(a1 + 8) = v7;
          *(void *)(a1 + 16) = v59;
          *(void *)(a1 + 24) = &v56[8 * v57];
          if (v64)
          {
            operator delete(v64);
            unint64_t v7 = *(char **)(a1 + 8);
          }
        }
        *((void *)v7 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v31;
        char v65 = *(char **)(a1 + 8);
        uint64_t v66 = *(char **)(a1 + 16);
        *(void *)(a1 + 8) = v65 - 8;
        uint64_t v67 = *((void *)v65 - 1);
        *(void *)(a1 + 8) = v65;
        if (v66 == *(char **)(a1 + 24))
        {
          uint64_t v68 = (uint64_t)&v65[-*(void *)a1];
          if ((unint64_t)v65 <= *(void *)a1)
          {
            if (v66 == *(char **)a1) {
              unint64_t v99 = 1;
            }
            else {
              unint64_t v99 = (uint64_t)&v66[-*(void *)a1] >> 2;
            }
            v100 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v99);
            BOOL v102 = &v100[8 * (v99 >> 2)];
            char v103 = *(uint64_t **)(a1 + 8);
            uint64_t v66 = v102;
            uint64_t v104 = *(void *)(a1 + 16) - (void)v103;
            if (v104)
            {
              uint64_t v66 = &v102[v104 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v105 = 8 * (v104 >> 3);
              v106 = &v100[8 * (v99 >> 2)];
              do
              {
                uint64_t v107 = *v103++;
                *(void *)v106 = v107;
                v106 += 8;
                v105 -= 8;
              }
              while (v105);
            }
            v108 = *(char **)a1;
            *(void *)a1 = v100;
            *(void *)(a1 + 8) = v102;
            *(void *)(a1 + 16) = v66;
            *(void *)(a1 + 24) = &v100[8 * v101];
            if (v108)
            {
              operator delete(v108);
              uint64_t v66 = *(char **)(a1 + 16);
            }
          }
          else
          {
            uint64_t v69 = v68 >> 3;
            BOOL v18 = v68 >> 3 < -1;
            uint64_t v70 = (v68 >> 3) + 2;
            if (v18) {
              uint64_t v71 = v70;
            }
            else {
              uint64_t v71 = v69 + 1;
            }
            uint64_t v72 = -(v71 >> 1);
            uint64_t v73 = v71 >> 1;
            int64_t v74 = &v65[-8 * v73];
            int64_t v75 = v66 - v65;
            if (v66 != v65)
            {
              memmove(&v65[-8 * v73], v65, v66 - v65);
              char v65 = *(char **)(a1 + 8);
            }
            uint64_t v66 = &v74[v75];
            *(void *)(a1 + 8) = &v65[8 * v72];
            *(void *)(a1 + 16) = &v74[v75];
          }
        }
        *(void *)uint64_t v66 = v67;
      }
      else
      {
        *(void *)uint64_t v6 = v30;
      }
    }
    else
    {
      *(void *)(a1 + 32) = v11 - 512;
      uint64_t v15 = *(void *)v7;
      uint64_t v13 = v7 + 8;
      uint64_t v14 = v15;
      *(void *)(a1 + 8) = v13;
      if (v6 == *(char **)(a1 + 24))
      {
        uint64_t v16 = (uint64_t)&v13[-*(void *)a1];
        if ((unint64_t)v13 <= *(void *)a1)
        {
          if (v6 == *(char **)a1) {
            unint64_t v43 = 1;
          }
          else {
            unint64_t v43 = (uint64_t)&v6[-*(void *)a1] >> 2;
          }
          uint64_t v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v43);
          BOOL v46 = &v44[8 * (v43 >> 2)];
          std::basic_regex<char> v47 = *(uint64_t **)(a1 + 8);
          uint64_t v6 = v46;
          uint64_t v48 = *(void *)(a1 + 16) - (void)v47;
          if (v48)
          {
            uint64_t v6 = &v46[v48 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v49 = 8 * (v48 >> 3);
            int v50 = &v44[8 * (v43 >> 2)];
            do
            {
              uint64_t v51 = *v47++;
              *(void *)int v50 = v51;
              v50 += 8;
              v49 -= 8;
            }
            while (v49);
          }
          uint64_t v52 = *(char **)a1;
          *(void *)a1 = v44;
          *(void *)(a1 + 8) = v46;
          *(void *)(a1 + 16) = v6;
          *(void *)(a1 + 24) = &v44[8 * v45];
          if (v52)
          {
            operator delete(v52);
            uint64_t v6 = *(char **)(a1 + 16);
          }
        }
        else
        {
          uint64_t v17 = v16 >> 3;
          BOOL v18 = v16 >> 3 < -1;
          uint64_t v19 = (v16 >> 3) + 2;
          if (v18) {
            uint64_t v20 = v19;
          }
          else {
            uint64_t v20 = v17 + 1;
          }
          uint64_t v21 = -(v20 >> 1);
          uint64_t v22 = v20 >> 1;
          long long v23 = &v13[-8 * v22];
          int64_t v24 = v6 - v13;
          if (v6 != v13)
          {
            memmove(&v13[-8 * v22], v13, v6 - v13);
            uint64_t v6 = *(char **)(a1 + 8);
          }
          long long v25 = &v6[8 * v21];
          uint64_t v6 = &v23[v24];
          *(void *)(a1 + 8) = v25;
          *(void *)(a1 + 16) = &v23[v24];
        }
      }
      *(void *)uint64_t v6 = v14;
    }
    *(void *)(a1 + 16) += 8;
LABEL_36:
    unint64_t v7 = *(char **)(a1 + 8);
    uint64_t v10 = *(void *)(a1 + 40);
    unint64_t v12 = *(void *)(a1 + 32) + v10;
    dispatch_data_t v4 = *a2;
  }
  *(void *)(*(void *)&v7[(v12 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v12 & 0x1FF)) = v4;
  *(void *)(a1 + 40) = v10 + 1;
  *a2 = 0;
  return 0;
}

void sub_1920878F0(_Unwind_Exception *a1)
{
  operator delete(v2);
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

uint64_t mav_buffer_queue_dequeue_internal(uint64_t a1, NSObject **a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2)
  {
    unint64_t v4 = *(void *)(a1 + 32);
    unint64_t v5 = *(NSObject **)(*(void *)(*(void *)(a1 + 8) + ((v4 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v4 & 0x1FF));
    *a2 = v5;
    *(_DWORD *)(a1 + 48) -= dispatch_data_get_size(v5);
    *(void *)(a1 + 32) = v4 + 1;
    *(void *)(a1 + 40) = v2 - 1;
    std::deque<void *>::__maybe_remove_front_spare[abi:ne180100](a1, 1);
    if (*(void *)(a1 + 40))
    {
      std::deque<void *>::__maybe_remove_front_spare[abi:ne180100](a1, 0);
      uint64_t v7 = *(void *)(a1 + 8);
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v8 = ((v6 - v7) << 6) - 1;
      if (v6 == v7) {
        uint64_t v8 = 0;
      }
      if ((unint64_t)(v8 - (*(void *)(a1 + 40) + *(void *)(a1 + 32))) >= 0x200)
      {
        operator delete(*(void **)(v6 - 8));
        uint64_t v7 = *(void *)(a1 + 8);
        uint64_t v6 = *(void *)(a1 + 16) - 8;
        *(void *)(a1 + 16) = v6;
      }
    }
    else
    {
      uint64_t v7 = *(void *)(a1 + 16);
      if (v7 != *(void *)(a1 + 8))
      {
        do
        {
          operator delete(*(void **)(v7 - 8));
          uint64_t v9 = *(void *)(a1 + 8);
          uint64_t v7 = *(void *)(a1 + 16) - 8;
          *(void *)(a1 + 16) = v7;
        }
        while (v7 != v9);
      }
      *(void *)(a1 + 32) = 0;
      uint64_t v6 = v7;
    }
    unint64_t v10 = (v6 - v7) >> 3;
    if (v10 < (uint64_t)(*(void *)(a1 + 24) - *(void *)a1) >> 3)
    {
      if (v6 == v7)
      {
        uint64_t v14 = 0;
        unint64_t v11 = 0;
      }
      else
      {
        unint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v10);
        uint64_t v12 = *(void *)(a1 + 8);
        uint64_t v6 = *(void *)(a1 + 16);
        uint64_t v14 = &v11[8 * v13];
        uint64_t v15 = v6 - v12;
        if (v6 != v12)
        {
          uint64_t v16 = 0;
          uint64_t v17 = 8 * (v15 >> 3);
          do
          {
            *(void *)&v11[v16] = *(void *)(v12 + v16);
            v16 += 8;
          }
          while (v17 != v16);
          uint64_t v6 = *(void *)(a1 + 8);
          uint64_t v18 = *(void *)(a1 + 16);
LABEL_18:
          uint64_t v19 = v18 - v6;
          uint64_t v20 = *(void **)a1;
          *(void *)a1 = v11;
          *(void *)(a1 + 8) = v11;
          *(void *)(a1 + 16) = &v11[v19];
          *(void *)(a1 + 24) = v14;
          if (v20) {
            operator delete(v20);
          }
          return 0;
        }
      }
      uint64_t v18 = v6;
      goto LABEL_18;
    }
  }
  return 0;
}

void sub_192087AAC(void *a1)
{
}

BOOL mav_buffer_queue_empty_internal(uint64_t a1)
{
  return *(void *)(a1 + 40) == 0;
}

uint64_t mav_buffer_queue_front_internal(void *a1, void *a2)
{
  uint64_t v2 = a1[5];
  if (v2) {
    uint64_t v2 = *(void *)(*(void *)(a1[1] + ((a1[4] >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (a1[4] & 0x1FFLL));
  }
  *a2 = v2;
  return 0;
}

uint64_t mav_buffer_queue_get_size_internal(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

void std::deque<void *>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, char a2)
{
  unint64_t v3 = *(void *)(a1 + 32);
  if (v3 < 0x200) {
    a2 = 1;
  }
  if (v3 > 0x3FF || (a2 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 512;
  }
}

void *mav_linked_list_init(void *result)
{
  *double result = 0;
  result[1] = 0;
  result[2] = 0;
  return result;
}

uint64_t *mav_linked_list_insert_front(uint64_t *result, void *a2)
{
  int v2 = *((_DWORD *)result + 4);
  if (v2)
  {
    uint64_t v3 = *result;
    *a2 = *result;
    a2[1] = 0;
    *(void *)(v3 + 8) = a2;
    *double result = (uint64_t)a2;
    int v4 = v2 + 1;
  }
  else
  {
    *double result = (uint64_t)a2;
    result[1] = (uint64_t)a2;
    int v4 = 1;
    *a2 = 0;
    a2[1] = 0;
  }
  a2[2] = result;
  *((_DWORD *)result + 4) = v4;
  return result;
}

uint64_t mav_linked_list_insert_back(uint64_t result, void *a2)
{
  int v2 = *(_DWORD *)(result + 16);
  if (v2)
  {
    uint64_t v3 = *(void **)(result + 8);
    *a2 = 0;
    a2[1] = v3;
    void *v3 = a2;
    *(void *)(result + 8) = a2;
    int v4 = v2 + 1;
  }
  else
  {
    *(void *)double result = a2;
    *(void *)(result + 8) = a2;
    int v4 = 1;
    *a2 = 0;
    a2[1] = 0;
  }
  a2[2] = result;
  *(_DWORD *)(result + 16) = v4;
  return result;
}

void *mav_linked_list_remove_front(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  int v2 = (void *)a1;
  *(_DWORD *)(a1 + 16) = v1 - 1;
  double result = *(void **)a1;
  int v4 = (void *)*result;
  void *v2 = *result;
  if (v4) {
    int v2 = v4;
  }
  v2[1] = 0;
  return result;
}

uint64_t mav_linked_list_remove_back(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  int v2 = (void *)a1;
  *(_DWORD *)(a1 + 16) = v1 - 1;
  uint64_t result = *(void *)(a1 + 8);
  int v4 = *(void **)(result + 8);
  v2[1] = v4;
  if (v4) {
    int v2 = v4;
  }
  void *v2 = 0;
  return result;
}

void ctu::path_join_impl(std::string *a1, char *__s)
{
  if (__s)
  {
    size_t v4 = strlen(__s);
    ctu::path_join_impl(a1, __s, v4);
  }
}

__n128 ctu::path_join_impl(std::string *this, uint64_t a2)
{
  int v4 = *(char *)(a2 + 23);
  if (v4 < 0)
  {
    if (!*(void *)(a2 + 8)) {
      return result;
    }
    unint64_t v5 = *(unsigned char **)a2;
  }
  else
  {
    unint64_t v5 = (unsigned char *)a2;
    if (!*(unsigned char *)(a2 + 23)) {
      return result;
    }
  }
  if (*v5 == 47)
  {
    if ((*((unsigned char *)&this->__r_.__value_.__s + 23) & 0x80) != 0) {
      goto LABEL_27;
    }
LABEL_28:
    __n128 result = *(__n128 *)a2;
    this->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
    *(__n128 *)&this->__r_.__value_.__l.__data_ = result;
    *(unsigned char *)(a2 + 23) = 0;
    *(unsigned char *)a2 = 0;
    return result;
  }
  if ((*((unsigned char *)&this->__r_.__value_.__s + 23) & 0x80) != 0)
  {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    if (!size)
    {
LABEL_27:
      operator delete(this->__r_.__value_.__l.__data_);
      goto LABEL_28;
    }
  }
  else
  {
    if (!*((unsigned char *)&this->__r_.__value_.__s + 23)) {
      goto LABEL_28;
    }
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  }
  if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v7 = this;
  }
  else {
    uint64_t v7 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  if (v7->__r_.__value_.__s.__data_[size - 1] != 47)
  {
    std::string::push_back(this, 47);
    LOBYTE(v4) = *(unsigned char *)(a2 + 23);
  }
  if ((v4 & 0x80u) == 0) {
    uint64_t v8 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v8 = *(const std::string::value_type **)a2;
  }
  if ((v4 & 0x80u) == 0) {
    std::string::size_type v9 = v4;
  }
  else {
    std::string::size_type v9 = *(void *)(a2 + 8);
  }

  std::string::append(this, v8, v9);
  return result;
}

void ctu::dirname(char *a1@<X0>, size_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)std::string __p = v4;
  long long v7 = v4;
  *(_OWORD *)unint64_t v5 = v4;
  ctu::path_split(a1, a2, (uint64_t)v5);
  if (SHIBYTE(__p[0]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a3, (const std::string::value_type *)v5[0], (std::string::size_type)v5[1]);
  }
  else
  {
    *(_OWORD *)a3 = *(_OWORD *)v5;
    *(void **)(a3 + 16) = __p[0];
  }
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v5[0]);
  }
}

void sub_192087E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double ctu::PathView::PathView(ctu::PathView *this)
{
  double result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0u;
  return result;
}

{
  double result;

  double result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0u;
  return result;
}

uint64_t ctu::PathView::current(ctu::PathView *this)
{
  return *((void *)this + 2);
}

BOOL ctu::PathView::operator BOOL(uint64_t a1)
{
  return *(void *)(a1 + 24) != 0;
}

BOOL ctu::PathView::hasTail(ctu::PathView *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *((void *)this + 2) + v1;
  uint64_t v3 = *(void *)this + *((void *)this + 1);
  return v3 != v2 && v2 + 1 != v3;
}

uint64_t ctu::PathView::tail(ctu::PathView *this)
{
  long long v4 = (char *)this + 16;
  uint64_t result = *((void *)this + 2);
  uint64_t v3 = *((void *)v4 + 1);
  if (v3)
  {
    uint64_t v5 = result + v3;
    if (*(void *)this + *((void *)this + 1) == v5) {
      return v5;
    }
    else {
      return v5 + 1;
    }
  }
  return result;
}

uint64_t ctu::PathView::head(ctu::PathView *this)
{
  return *(void *)this;
}

BOOL ctu::PathView::hasHead(ctu::PathView *this)
{
  uint64_t v1 = (unsigned char *)*((void *)this + 2);
  uint64_t v2 = *(unsigned char **)this;
  uint64_t v3 = (uint64_t)&v1[-*(void *)this];
  if (v3 > 1) {
    return 1;
  }
  if (v3 == 1 && *v2 == 47) {
    return 0;
  }
  return v1 != v2;
}

uint64_t ctu::PathView::skip(uint64_t *a1, unsigned char *a2, size_t __n)
{
  if (a1[3]) {
    BOOL v3 = __n == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3) {
    return 0;
  }
  size_t v4 = __n;
  if (*a2 == 47)
  {
    size_t v4 = __n - 1;
    if (__n == 1) {
      return 0;
    }
    ++a2;
  }
  if (a2[v4 - 1] == 47)
  {
    if (v4 - 1 < v4) {
      --v4;
    }
    if (!v4) {
      return 0;
    }
  }
  uint64_t v7 = a1[1];
  uint64_t v6 = a1[2];
  uint64_t v8 = *a1;
  size_t v9 = *a1 + v7 - v6;
  if (v9 < v4 || memcmp((const void *)a1[2], a2, v4)) {
    return 0;
  }
  if (v4 >= v9) {
    size_t v11 = v9;
  }
  else {
    size_t v11 = v4;
  }
  uint64_t v12 = (unsigned char *)(v6 + v11);
  if (v9 > v4)
  {
    if (*v12 == 47)
    {
      unint64_t v13 = v9 - v11;
      if (v9 - v11 < 2)
      {
LABEL_24:
        unint64_t v14 = -1;
      }
      else
      {
        unint64_t v14 = 0;
        size_t v15 = ~v6 + v7 + v8 - v11;
        uint64_t v16 = v11 + v6 + 1;
        while (1)
        {
          int v17 = *(unsigned __int8 *)(v16 + v14++);
          if (v17 == 47) {
            break;
          }
          if (v15 == v14) {
            goto LABEL_24;
          }
        }
      }
      if (v14 < v13) {
        unint64_t v13 = v14;
      }
      ++v12;
      unint64_t v18 = v13 - 1;
      goto LABEL_29;
    }
    return 0;
  }
  unint64_t v18 = 0;
LABEL_29:
  a1[2] = (uint64_t)v12;
  a1[3] = v18;
  return 1;
}

uint64_t TelephonyCapabilitiesRadioFusingCertIDFromSerialNumber()
{
  if (_TelephonyRadiosGetRadioInternal_sOnce != -1) {
    dispatch_once(&_TelephonyRadiosGetRadioInternal_sOnce, &__block_literal_global_4);
  }
  return 0;
}

uint64_t TelephonyCapabilitiesRadioFusingCertIDFromPublicKeyHash()
{
  if (_TelephonyRadiosGetRadioInternal_sOnce != -1) {
    dispatch_once(&_TelephonyRadiosGetRadioInternal_sOnce, &__block_literal_global_4);
  }
  return (sTelephonyRadioVendor < 5) & (0x16u >> sTelephonyRadioVendor);
}

uint64_t TelephonyCapabilitiesRadioFusingDefaultCertID()
{
  if (_TelephonyRadiosGetRadioInternal_sOnce != -1) {
    dispatch_once(&_TelephonyRadiosGetRadioInternal_sOnce, &__block_literal_global_4);
  }
  if (sTelephonyProduct > 201)
  {
    if (sTelephonyProduct == 212) {
      return 3557748310;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t result = 3425784744;
    switch(sTelephonyProduct)
    {
      case 73:
      case 120:
      case 123:
      case 136:
        return result;
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case 88:
      case 89:
      case 90:
      case 91:
      case 92:
      case 93:
      case 94:
      case 95:
      case 96:
      case 97:
      case 98:
      case 103:
      case 104:
      case 105:
      case 106:
      case 107:
      case 112:
      case 113:
      case 118:
      case 119:
      case 121:
      case 122:
      case 127:
      case 128:
      case 129:
      case 130:
      case 131:
      case 139:
      case 140:
      case 141:
      case 153:
      case 154:
      case 155:
      case 156:
        return 0;
      case 99:
      case 100:
      case 101:
      case 102:
      case 108:
      case 109:
      case 110:
      case 111:
      case 114:
      case 115:
      case 116:
      case 117:
      case 124:
      case 125:
      case 126:
      case 132:
      case 133:
      case 134:
      case 135:
      case 137:
      case 138:
      case 142:
      case 143:
      case 144:
      case 145:
      case 146:
      case 147:
      case 148:
      case 149:
      case 150:
      case 151:
      case 152:
      case 157:
      case 158:
      case 159:
        return 3557748310;
      default:
        if ((sTelephonyProduct - 52) >= 2) {
          return 0;
        }
        break;
    }
  }
  return result;
}

uint64_t xpc::dyn_cast_or_default@<X0>(xpc_object_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (MEMORY[0x192FEE1B0](*a1) == MEMORY[0x1E4F14580] && (bytes_ptr = xpc_data_get_bytes_ptr(*a1)) != 0)
  {
    size_t v11 = bytes_ptr;
    uint64_t result = xpc_data_get_length(*a1);
    if (result < 1)
    {
      unint64_t v14 = 0;
      unint64_t v13 = 0;
    }
    else
    {
      size_t v12 = result;
      unint64_t v13 = (char *)operator new(result);
      unint64_t v14 = &v13[v12];
      uint64_t result = (uint64_t)memcpy(v13, v11, v12);
    }
    *a3 = v13;
    a3[1] = v14;
    a3[2] = v14;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    uint64_t v6 = *(const void **)a2;
    uint64_t v7 = *(void *)(a2 + 8);
    size_t v8 = v7 - *(void *)a2;
    return (uint64_t)std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a3, v6, v7, v8);
  }
  return result;
}

void xpc::dyn_cast_or_default(xpc_object_t *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  if (MEMORY[0x192FEE1B0](*a1) == MEMORY[0x1E4F14580])
  {
    size_t v12 = 0;
    uint64_t v13 = 0;
    size_t v11 = (uint64_t *)&v12;
    bytes_ptr = (unsigned __int8 *)xpc_data_get_bytes_ptr(*a1);
    if (bytes_ptr)
    {
      for (size_t i = xpc_data_get_length(*a1); i; --i)
      {
        std::__tree<unsigned char>::__emplace_hint_unique_key_args<unsigned char,unsigned char const&>((uint64_t *)&v11, (uint64_t *)&v12, *bytes_ptr, *bytes_ptr);
        ++bytes_ptr;
      }
      size_t v8 = v12;
      *a3 = (uint64_t)v11;
      a3[1] = (uint64_t)v8;
      size_t v9 = a3 + 1;
      uint64_t v10 = v13;
      a3[2] = v13;
      if (v10)
      {
        void v8[2] = v9;
        size_t v11 = (uint64_t *)&v12;
        size_t v12 = 0;
        uint64_t v13 = 0;
        size_t v8 = 0;
      }
      else
      {
        *a3 = (uint64_t)v9;
      }
    }
    else
    {
      std::set<unsigned char>::set[abi:ne180100](a3, a2);
      size_t v8 = v12;
    }
    std::__tree<unsigned char>::destroy(v8);
  }
  else
  {
    std::set<unsigned char>::set[abi:ne180100](a3, a2);
  }
}

void sub_192088530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

BOOL xpc::is_logically_false(xpc_object_t *a1)
{
  return MEMORY[0x192FEE1B0](*a1) != MEMORY[0x1E4F14590] || xpc_dictionary_get_count(*a1) == 0;
}

BOOL xpc::is_logically_false(xpc_object_t *this, const xpc::array *a2)
{
  return MEMORY[0x192FEE1B0](*this, a2) != MEMORY[0x1E4F14568] || xpc_array_get_count(*this) == 0;
}

void xpc::auto_reply::deleter_with_conn(xpc_object_t *a1, xpc_connection_t *a2)
{
  if (a1)
  {
    if (MEMORY[0x192FEE1B0](*a1) == MEMORY[0x1E4F14590] && MEMORY[0x192FEE1B0](*a2) == MEMORY[0x1E4F14578]) {
      xpc_connection_send_message(*a2, *a1);
    }
    xpc_release(*a1);
    operator delete(a1);
  }
}

void *std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<char>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1920886DC(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__tree<unsigned char>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<unsigned char>::destroy(*a1);
    std::__tree<unsigned char>::destroy(a1[1]);
    operator delete(a1);
  }
}

uint64_t *std::set<unsigned char>::set[abi:ne180100](uint64_t *a1, void *a2)
{
  a1[1] = 0;
  BOOL v3 = a1 + 1;
  a1[2] = 0;
  *a1 = (uint64_t)(a1 + 1);
  size_t v4 = a2 + 1;
  uint64_t v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      std::__tree<unsigned char>::__emplace_hint_unique_key_args<unsigned char,unsigned char const&>(a1, v3, *((unsigned char *)v5 + 25), *((unsigned char *)v5 + 25));
      uint64_t v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          uint64_t v5 = v7;
        }
        while (!v8);
      }
      uint64_t v5 = v7;
    }
    while (v7 != v4);
  }
  return a1;
}

void sub_1920887DC(_Unwind_Exception *a1)
{
  std::__tree<unsigned char>::destroy(*v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<unsigned char>::__emplace_hint_unique_key_args<unsigned char,unsigned char const&>(uint64_t *result, uint64_t *a2, unsigned __int8 a3, char a4)
{
  uint64_t v5 = a2;
  uint64_t v6 = result;
  uint64_t v7 = (uint64_t **)(result + 1);
  if (result + 1 != a2)
  {
    unsigned int v8 = *((unsigned __int8 *)a2 + 25);
    if (v8 <= a3)
    {
      if (v8 >= a3) {
        return result;
      }
      uint64_t v13 = a2 + 1;
      size_t v12 = (uint64_t *)a2[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          size_t v12 = (uint64_t *)*v12;
          uint64_t v5 = v13;
          unint64_t v14 = v13;
        }
        while (v12);
      }
      else
      {
        unint64_t v14 = a2;
        do
        {
          uint64_t v20 = v14;
          unint64_t v14 = (uint64_t *)v14[2];
        }
        while ((uint64_t *)*v14 != v20);
      }
      if (v14 == (uint64_t *)v7) {
        goto LABEL_42;
      }
      if (*((unsigned __int8 *)v14 + 25) > a3) {
        goto LABEL_42;
      }
      uint64_t v21 = *v7;
      uint64_t v13 = result + 1;
      uint64_t v5 = result + 1;
      if (!*v7) {
        goto LABEL_42;
      }
      while (1)
      {
        while (1)
        {
          uint64_t v5 = v21;
          unsigned int v22 = *((unsigned __int8 *)v21 + 25);
          if (v22 <= a3) {
            break;
          }
          uint64_t v21 = (uint64_t *)*v21;
          uint64_t v13 = v5;
          if (!*v5) {
            goto LABEL_42;
          }
        }
        if (v22 >= a3) {
          return result;
        }
        uint64_t v21 = (uint64_t *)v21[1];
        if (!v21)
        {
LABEL_30:
          uint64_t v13 = v5 + 1;
          goto LABEL_42;
        }
      }
    }
  }
  uint64_t v9 = *a2;
  if ((uint64_t *)*result == a2)
  {
    size_t v11 = a2;
  }
  else
  {
    if (v9)
    {
      uint64_t v10 = (uint64_t *)*a2;
      do
      {
        size_t v11 = v10;
        uint64_t v10 = (uint64_t *)v10[1];
      }
      while (v10);
    }
    else
    {
      size_t v15 = a2;
      do
      {
        size_t v11 = (uint64_t *)v15[2];
        BOOL v16 = *v11 == (void)v15;
        size_t v15 = v11;
      }
      while (v16);
    }
    if (*((unsigned __int8 *)v11 + 25) >= a3)
    {
      unint64_t v18 = *v7;
      uint64_t v13 = result + 1;
      uint64_t v5 = result + 1;
      if (!*v7) {
        goto LABEL_42;
      }
      while (1)
      {
        while (1)
        {
          uint64_t v5 = v18;
          unsigned int v19 = *((unsigned __int8 *)v18 + 25);
          if (v19 <= a3) {
            break;
          }
          unint64_t v18 = (uint64_t *)*v18;
          uint64_t v13 = v5;
          if (!*v5) {
            goto LABEL_42;
          }
        }
        if (v19 >= a3) {
          return result;
        }
        unint64_t v18 = (uint64_t *)v18[1];
        if (!v18) {
          goto LABEL_30;
        }
      }
    }
  }
  if (v9) {
    int v17 = v11;
  }
  else {
    int v17 = a2;
  }
  if (v9) {
    uint64_t v13 = v11 + 1;
  }
  else {
    uint64_t v13 = a2;
  }
  if (!*v13)
  {
    uint64_t v5 = v17;
LABEL_42:
    long long v23 = operator new(0x20uLL);
    v23[25] = a4;
    *(void *)long long v23 = 0;
    *((void *)v23 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
    *((void *)v23 + 2) = v5;
    uint64_t *v13 = (uint64_t)v23;
    uint64_t v24 = *(void *)*v6;
    if (v24)
    {
      *uint64_t v6 = v24;
      long long v25 = (uint64_t *)*v13;
    }
    else
    {
      long long v25 = (uint64_t *)v23;
    }
    uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v6[1], v25);
    ++v6[2];
  }
  return result;
}

void ctu::rest::detail::read_raw_binary_value(char *a1, size_t a2, xpc_object_t *a3)
{
  if (MEMORY[0x192FEE1B0](*a3) != MEMORY[0x1E4F14580]
    || (size_t length = xpc_data_get_length(*a3), (bytes_ptr = xpc_data_get_bytes_ptr(*a3)) == 0))
  {
    uint64_t v6 = a1;
    size_t v7 = a2;
LABEL_3:
    bzero(v6, v7);
    return;
  }
  if (length >= a2) {
    size_t v10 = a2;
  }
  else {
    size_t v10 = length;
  }
  memcpy(a1, bytes_ptr, v10);
  size_t v7 = a2 - length;
  if (a2 > length)
  {
    uint64_t v6 = &a1[length];
    goto LABEL_3;
  }
}

xpc_object_t ctu::rest::detail::write_enum_string_value@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  if (*((char *)a2 + 23) >= 0) {
    BOOL v3 = a2;
  }
  else {
    BOOL v3 = (uint64_t *)*a2;
  }
  return xpc::string((xpc *)"%lld:%s", a3, a1, v3);
}

{
  uint64_t *v3;

  if (*((char *)a2 + 23) >= 0) {
    BOOL v3 = a2;
  }
  else {
    BOOL v3 = (uint64_t *)*a2;
  }
  return xpc::string((xpc *)"%llu:%s", a3, a1, v3);
}

void sub_192088B98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_192088C2C(void *a1)
{
}

void sub_192088C38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_192088CCC(void *a1)
{
}

void sub_192088CD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_192088D6C(void *a1)
{
}

void sub_192088D78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_192088E0C(void *a1)
{
}

void sub_192088E18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_192088EAC(void *a1)
{
}

void sub_192088EB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_192088F4C(void *a1)
{
}

void sub_192088F58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_192088FEC(void *a1)
{
}

void sub_192088FF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19208908C(void *a1)
{
}

void sub_192089098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::xpc_to_cf@<X0>(void *a1@<X8>)
{
  uint64_t result = _CFXPCCreateCFObjectFromXPCObject();
  *a1 = result;
  return result;
}

std::runtime_error *ctu::IllegalTimerParamsException::IllegalTimerParamsException(std::runtime_error *this, const char *a2)
{
  uint64_t result = std::runtime_error::runtime_error(this, a2);
  result->__vftable = (std::runtime_error_vtbl *)&unk_1EE2F7148;
  return result;
}

{
  std::runtime_error *result;

  uint64_t result = std::runtime_error::runtime_error(this, a2);
  result->__vftable = (std::runtime_error_vtbl *)&unk_1EE2F7148;
  return result;
}

void ctu::IllegalTimerParamsException::~IllegalTimerParamsException(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);

  operator delete(v1);
}

void ctu::TimerService::scheduleAfterImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  global_queue = dispatch_get_global_queue(0, 0);
  size_t v11 = global_queue;
  if (global_queue) {
    dispatch_retain(global_queue);
  }
  if (a5) {
    size_t v12 = _Block_copy(a5);
  }
  else {
    size_t v12 = 0;
  }
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v16 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  aBlocunint64_t k = v12;
  dispatch_object_t object = v11;
  (*(void (**)(uint64_t, void **, uint64_t, uint64_t, dispatch_object_t *, void **))(*(void *)a1 + 8))(a1, __p, a3, a4, &object, &aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (object) {
    dispatch_release(object);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
}

void sub_192089280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, dispatch_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (object) {
    dispatch_release(object);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ctu::TimerService::createOneShotTimerImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, intptr_t identifier, const void *a6)
{
  global_queue = dispatch_get_global_queue(identifier, 0);
  uint64_t v13 = global_queue;
  if (global_queue) {
    dispatch_retain(global_queue);
  }
  if (a6) {
    unint64_t v14 = _Block_copy(a6);
  }
  else {
    unint64_t v14 = 0;
  }
  uint64_t v18 = *(void *)(a2 + 16);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  aBlocunint64_t k = v14;
  dispatch_object_t object = v13;
  (*(void (**)(uint64_t, void **, uint64_t, uint64_t, intptr_t, dispatch_object_t *, void **))(*(void *)a1 + 16))(a1, __p, a3, a4, identifier, &object, &aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (object) {
    dispatch_release(object);
  }
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1920893D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, dispatch_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (object) {
    dispatch_release(object);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ctu::TimerService::createPeriodicTimerImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, intptr_t identifier, const void *a6)
{
  global_queue = dispatch_get_global_queue(identifier, 0);
  uint64_t v13 = global_queue;
  if (global_queue) {
    dispatch_retain(global_queue);
  }
  if (a6) {
    unint64_t v14 = _Block_copy(a6);
  }
  else {
    unint64_t v14 = 0;
  }
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v18 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  aBlocunint64_t k = v14;
  dispatch_object_t object = v13;
  (*(void (**)(uint64_t, void **, uint64_t, uint64_t, intptr_t, dispatch_object_t *, void **))(*(void *)a1 + 24))(a1, __p, a3, a4, identifier, &object, &aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (object) {
    dispatch_release(object);
  }
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[0]);
  }
}

void sub_192089520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, dispatch_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (object) {
    dispatch_release(object);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *ctu::TimerService::scheduleAfterImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v19[4] = *MEMORY[0x1E4F143B8];
  global_queue = dispatch_get_global_queue(0, 0);
  size_t v11 = global_queue;
  if (global_queue) {
    dispatch_retain(global_queue);
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN3ctu12TimerService17scheduleAfterImplENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_5tupleIJNS_8TimeTypeENS1_6chrono8durationIxNS1_5ratioILl1ELl1000000EEEEEEEENS1_8functionIFvvEEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_17;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v19, a5);
  size_t v12 = _Block_copy(aBlock);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v17 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  unint64_t v14 = v12;
  dispatch_object_t object = v11;
  (*(void (**)(uint64_t, void **, uint64_t, uint64_t, dispatch_object_t *, void **))(*(void *)a1 + 8))(a1, __p, a3, a4, &object, &v14);
  if (v14) {
    _Block_release(v14);
  }
  if (object) {
    dispatch_release(object);
  }
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
  return std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v19);
}

void sub_1920896D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, dispatch_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN3ctu12TimerService17scheduleAfterImplENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_5tupleIJNS_8TimeTypeENS1_6chrono8durationIxNS1_5ratioILl1ELl1000000EEEEEEEENS1_8functionIFvvEEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t __copy_helper_block_e8_32c27_ZTSNSt3__18functionIFvvEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
}

void *ctu::TimerService::createOneShotTimerImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, intptr_t identifier, uint64_t a6)
{
  void v21[4] = *MEMORY[0x1E4F143B8];
  global_queue = dispatch_get_global_queue(identifier, 0);
  uint64_t v13 = global_queue;
  if (global_queue) {
    dispatch_retain(global_queue);
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN3ctu12TimerService22createOneShotTimerImplENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_5tupleIJNS_8TimeTypeENS1_6chrono8durationIxNS1_5ratioILl1ELl1000000EEEEEEEE11qos_class_tNS1_8functionIFvvEEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_3_0;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v21, a6);
  unint64_t v14 = _Block_copy(aBlock);
  uint64_t v19 = *(void *)(a2 + 16);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v16 = v14;
  dispatch_object_t object = v13;
  (*(void (**)(uint64_t, void **, uint64_t, uint64_t, intptr_t, dispatch_object_t *, void **))(*(void *)a1 + 16))(a1, __p, a3, a4, identifier, &object, &v16);
  if (v16) {
    _Block_release(v16);
  }
  if (object) {
    dispatch_release(object);
  }
  if (SHIBYTE(v19) < 0) {
    operator delete(__p[0]);
  }
  return std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v21);
}

void sub_192089930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, dispatch_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *ctu::TimerService::createPeriodicTimerImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, intptr_t identifier, uint64_t a6)
{
  void v21[4] = *MEMORY[0x1E4F143B8];
  global_queue = dispatch_get_global_queue(identifier, 0);
  uint64_t v13 = global_queue;
  if (global_queue) {
    dispatch_retain(global_queue);
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN3ctu12TimerService23createPeriodicTimerImplENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_5tupleIJNS_8TimeTypeENS1_6chrono8durationIxNS1_5ratioILl1ELl1000000EEEEEEEE11qos_class_tNS1_8functionIFvvEEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_6_0;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v21, a6);
  unint64_t v14 = _Block_copy(aBlock);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v19 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v16 = v14;
  dispatch_object_t object = v13;
  (*(void (**)(uint64_t, void **, uint64_t, uint64_t, intptr_t, dispatch_object_t *, void **))(*(void *)a1 + 24))(a1, __p, a3, a4, identifier, &object, &v16);
  if (v16) {
    _Block_release(v16);
  }
  if (object) {
    dispatch_release(object);
  }
  if (SHIBYTE(v19) < 0) {
    operator delete(__p[0]);
  }
  return std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v21);
}

void sub_192089B2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, dispatch_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN3ctu12TimerService23createPeriodicTimerImplENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_5tupleIJNS_8TimeTypeENS1_6chrono8durationIxNS1_5ratioILl1ELl1000000EEEEEEEE11qos_class_tNS1_8functionIFvvEEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

void ctu::TimerService::createPeriodicTimerImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, NSObject **a5, void **a6)
{
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v10 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v6 = *a5;
  *a5 = 0;
  aBlocunint64_t k = *a6;
  dispatch_object_t object = v6;
  *a6 = 0;
  (*(void (**)(uint64_t, void **, uint64_t, uint64_t, void, dispatch_object_t *, void **))(*(void *)a1 + 24))(a1, __p, a3, a4, 0, &object, &aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (object) {
    dispatch_release(object);
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
}

void sub_192089C94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, dispatch_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (object) {
    dispatch_release(object);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void ctu::Gestalt::create_default_global(void *a1@<X8>)
{
  uint64_t v3 = operator new(0x20uLL);
  v3[1] = 0;
  void v3[2] = 0;
  void *v3 = &unk_1EE2F8960;
  v3[3] = &unk_1EE2F6428;
  *a1 = v3 + 3;
  a1[1] = v3;
}

void std::__shared_ptr_emplace<anonymous namespace'::GestaltIos>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE2F8960;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<anonymous namespace'::GestaltIos>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE2F8960;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<anonymous namespace'::GestaltIos>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 160))();
}

const void **anonymous namespace'::GestaltIos::getBuildVersion@<X0>(std::string *a1@<X8>)
{
}

const void **anonymous namespace'::GestaltIos::getProductVersion@<X0>(std::string *a1@<X8>)
{
}

uint64_t anonymous namespace'::GestaltIos::isInternalBuild(_anonymous_namespace_::GestaltIos *this)
{
  if (_TUQueryBuildInformationOnce != -1) {
    dispatch_once(&_TUQueryBuildInformationOnce, &__block_literal_global_34);
  }
  return _TUIsInternalBuildCached;
}

uint64_t anonymous namespace'::GestaltIos::isCarrierBuild(_anonymous_namespace_::GestaltIos *this)
{
  if (_TUQueryBuildInformationOnce != -1) {
    dispatch_once(&_TUQueryBuildInformationOnce, &__block_literal_global_34);
  }
  return _TUIsCarrierBuildCached;
}

uint64_t anonymous namespace'::GestaltIos::isInternalOrCarrierBuild(_anonymous_namespace_::GestaltIos *this)
{
  if ((*(uint64_t (**)(_anonymous_namespace_::GestaltIos *))(*(void *)this + 16))(this)) {
    return 1;
  }
  uint64_t v3 = *(uint64_t (**)(_anonymous_namespace_::GestaltIos *))(*(void *)this + 24);

  return v3(this);
}

const void **anonymous namespace'::GestaltIos::getHardwareModelName@<X0>(std::string *a1@<X8>)
{
}

const void **anonymous namespace'::GestaltIos::getProductType@<X0>(std::string *a1@<X8>)
{
}

const void **anonymous namespace'::GestaltIos::getModelNumber@<X0>(std::string *a1@<X8>)
{
}

const void **anonymous namespace'::GestaltIos::getRegionInfo@<X0>(std::string *a1@<X8>)
{
}

const void **anonymous namespace'::GestaltIos::getRegionCode@<X0>(std::string *a1@<X8>)
{
}

const void **anonymous namespace'::GestaltIos::getUniqueDeviceID@<X0>(std::string *a1@<X8>)
{
}

unint64_t anonymous namespace'::GestaltIos::hasBaseband(_anonymous_namespace_::GestaltIos *this)
{
}

unint64_t anonymous namespace'::GestaltIos::isRestoreMode(_anonymous_namespace_::GestaltIos *this)
{
}

uint64_t **anonymous namespace'::GestaltIos::getDeviceMaterial@<X0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  int v9 = 1;
  *((_DWORD *)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t **)a1, 1u, &v9)+ 8) = MGValueAs;
  int v9 = 1;
  int v4 = *((_DWORD *)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t **)a1, 1u, &v9)+ 8);
  int v8 = 2;
  *((_DWORD *)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t **)a1, 2u, &v8)+ 8) = v4;
  int v9 = 3;
  *((_DWORD *)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t **)a1, 3u, &v9)+ 8) = v5;
  int v9 = 4;
  uint64_t result = std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t **)a1, 4u, &v9);
  *((_DWORD *)result + 8) = v6;
  return result;
}

void sub_19208A13C(_Unwind_Exception *a1)
{
  std::__tree<unsigned char>::destroy(*v1);
  _Unwind_Resume(a1);
}

const void **anonymous namespace'::GestaltIos::getNVRAMVar@<X0>(void *a1@<X8>)
{
  a1[1] = 0;
  uint64_t v3 = a1 + 1;
  a1[2] = 0;
  *a1 = a1 + 1;
  CFTypeRef cf = 0;
  if (off_1EB4653B0)
  {
    int v4 = (const void *)off_1EB4653B0(@"NVRAMDictionary", 0);
    int v5 = cf;
    CFTypeRef cf = v4;
    uint64_t v20 = v5;
    ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef((const void **)&v20);
    int v6 = cf ? ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::get : 0;
    if (v6 && cf != 0)
    {
      CFTypeID v8 = CFGetTypeID(cf);
      if (v8 == CFDictionaryGetTypeID())
      {
        uint64_t v21 = 0;
        uint64_t v22 = 0;
        context[1] = &v21;
        uint64_t v20 = &v21;
        context[0] = &v20;
        CFDictionaryApplyFunction((CFDictionaryRef)cf, (CFDictionaryApplierFunction)ctu::cf::_Applier_InsertMapDefault<std::string,std::string,std::insert_iterator<std::map<std::string,std::string>>>, context);
        uint64_t v10 = (void *)*a1;
        int v9 = (void *)a1[1];
        size_t v11 = v21;
        *a1 = v20;
        a1[1] = v11;
        uint64_t v20 = v10;
        uint64_t v21 = v9;
        uint64_t v12 = a1[2];
        uint64_t v13 = v22;
        a1[2] = v22;
        uint64_t v22 = v12;
        unint64_t v14 = v11 + 2;
        if (v13) {
          size_t v15 = v14;
        }
        else {
          size_t v15 = a1;
        }
        *size_t v15 = v3;
        if (v12) {
          uint64_t v16 = v9 + 2;
        }
        else {
          uint64_t v16 = &v20;
        }
        *uint64_t v16 = &v21;
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v9);
      }
    }
  }
  return ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&cf);
}

void sub_19208A29C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a13);
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&a9);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*v13);
  _Unwind_Resume(a1);
}

BOOL anonymous namespace'::GestaltIos::isEoS(_anonymous_namespace_::GestaltIos *this)
{
    return 0;
  CFTypeRef cf = 0;
  if (off_1EB4653B0)
  {
    uint64_t v2 = (const void *)off_1EB4653B0(@"EOSHalleyConfiguration", 0);
    CFTypeRef v3 = cf;
    CFTypeRef cf = v2;
    uint64_t v10 = v3;
    ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&v10);
    CFTypeRef v4 = cf;
  }
  else
  {
    CFTypeRef v4 = 0;
  }
  if (v4) {
    int v5 = ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::get;
  }
  else {
    int v5 = 0;
  }
  int v6 = -1;
  if (v5)
  {
    LODWORD(v10) = -1;
    if (v4)
    {
      CFTypeID v7 = CFGetTypeID(v4);
      if (v7 == CFNumberGetTypeID())
      {
        ctu::cf::assign((ctu::cf *)&v10, v4, v8);
        int v6 = (int)v10;
      }
      else
      {
        int v6 = -1;
      }
    }
  }
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&cf);
  return v6 == 0;
}

void sub_19208A3AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void *___ZN12_GLOBAL__N_130ensureMobileGestaltDylibLoadedEv_block_invoke()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  strcpy(v1, "/usr/lib/libMobileGestalt.dylib");
  uint64_t result = dlopen(v1, 1);
  _MergedGlobals_4 = (uint64_t)result;
  if (result)
  {
    uint64_t result = dlsym(result, "MGCopyAnswer");
    off_1EB4653B0 = (uint64_t (*)(void, void))result;
  }
  return result;
}

const void **anonymous namespace'::GestaltIos::getMGValue<std::string>(std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  CFNumberRef v8 = 0;
  if (off_1EB4653B0)
  {
    CFTypeRef v3 = (__CFString *)off_1EB4653B0(a2, 0);
    CFTypeRef v4 = v8;
    CFNumberRef v8 = v3;
    int v9 = v4;
    ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef((const void **)&v9);
    int v5 = v8;
  }
  else
  {
    int v5 = 0;
  }
  if (v5) {
    int v6 = ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::get;
  }
  else {
    int v6 = 0;
  }
  if (v6) {
    ctu::cf::assign(a1, v5);
  }
  return ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef((const void **)&v8);
}

void sub_19208A4E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&a9);
  if (*(char *)(v9 + 23) < 0) {
    operator delete(*(void **)v9);
  }
  _Unwind_Resume(a1);
}

uint64_t ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::get(uint64_t a1)
{
  return *(void *)a1;
}

const void **ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

unint64_t anonymous namespace'::GestaltIos::getMGValueAsNumber<BOOL>(uint64_t a1)
{
  CFTypeRef cf = 0;
  if (off_1EB4653B0)
  {
    uint64_t v1 = (const void *)off_1EB4653B0(a1, 0);
    CFTypeRef v2 = cf;
    CFTypeRef cf = v1;
    uint64_t v9 = v2;
    ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&v9);
    unint64_t v3 = (unint64_t)cf;
  }
  else
  {
    unint64_t v3 = 0;
  }
  if (v3) {
    CFTypeRef v4 = ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::get;
  }
  else {
    CFTypeRef v4 = 0;
  }
  if (!v4) {
    goto LABEL_11;
  }
  LOBYTE(v9) = 0;
  if (v3)
  {
    CFTypeID v5 = CFGetTypeID((CFTypeRef)v3);
    if (v5 == CFBooleanGetTypeID())
    {
      ctu::cf::assign((ctu::cf *)&v9, (CFTypeRef)v3, v6);
      unint64_t v3 = (_BYTE)v9 != 0;
      goto LABEL_12;
    }
LABEL_11:
    unint64_t v3 = 0;
  }
LABEL_12:
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&cf);
  return v3;
}

void sub_19208A608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

unint64_t anonymous namespace'::GestaltIos::getMGValueAsNumber<int>(uint64_t a1)
{
  CFTypeRef cf = 0;
  if (off_1EB4653B0)
  {
    uint64_t v1 = (const void *)off_1EB4653B0(a1, 0);
    CFTypeRef v2 = cf;
    CFTypeRef cf = v1;
    uint64_t v9 = v2;
    ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&v9);
    unint64_t v3 = (unint64_t)cf;
  }
  else
  {
    unint64_t v3 = 0;
  }
  if (v3) {
    CFTypeRef v4 = ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::get;
  }
  else {
    CFTypeRef v4 = 0;
  }
  if (!v4) {
    goto LABEL_11;
  }
  LODWORD(v9) = 0;
  if (v3)
  {
    CFTypeID v5 = CFGetTypeID((CFTypeRef)v3);
    if (v5 == CFNumberGetTypeID())
    {
      ctu::cf::assign((ctu::cf *)&v9, (CFTypeRef)v3, v6);
      unint64_t v3 = v9;
      goto LABEL_12;
    }
LABEL_11:
    unint64_t v3 = 0;
  }
LABEL_12:
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&cf);
  return v3;
}

void sub_19208A6D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

uint64_t **std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  CFNumberRef v6 = a1 + 1;
  CFTypeID v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        CFTypeID v7 = (uint64_t **)v5;
        unsigned int v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2) {
          break;
        }
        CFTypeID v5 = *v7;
        CFNumberRef v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      CFTypeID v5 = v7[1];
      if (!v5)
      {
        CFNumberRef v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    CFTypeID v7 = a1 + 1;
LABEL_9:
    uint64_t v9 = (uint64_t *)v7;
    CFTypeID v7 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v7 + 7) = *a3;
    *((_DWORD *)v7 + 8) = 0;
    *CFTypeID v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *CFNumberRef v6 = (uint64_t *)v7;
    uint64_t v10 = (uint64_t *)**a1;
    size_t v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      size_t v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void ctu::cf::_Applier_InsertMapDefault<std::string,std::string,std::insert_iterator<std::map<std::string,std::string>>>(__CFString *cf, __CFString *a2, uint64_t *a3)
{
  *(_OWORD *)size_t v28 = 0u;
  long long v29 = 0u;
  *(_OWORD *)int v27 = 0u;
  if (!ctu::cf::assign((std::string *)v27, cf)) {
    goto LABEL_39;
  }
  ctu::cf::assign((std::string *)&v28[1], a2);
  std::pair<std::string const,std::string>::pair[abi:ne180100]<std::string,std::string,0>(&v24, (long long *)v27);
  uint64_t v5 = *a3;
  CFNumberRef v6 = (void *)a3[1];
  unint64_t v32 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v33 = 0xAAAAAAAAAAAAAAAALL;
  if ((void *)(v5 + 8) == v6
    || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v24, (void **)v6 + 4) & 0x80) != 0)
  {
    unsigned int v8 = v6;
    if (*(void **)v5 == v6) {
      goto LABEL_18;
    }
    uint64_t v9 = (void *)*v6;
    if (*v6)
    {
      do
      {
        unsigned int v8 = v9;
        uint64_t v9 = (void *)v9[1];
      }
      while (v9);
    }
    else
    {
      uint64_t v13 = v6;
      do
      {
        unsigned int v8 = (void *)v13[2];
        BOOL v14 = *v8 == (void)v13;
        uint64_t v13 = v8;
      }
      while (v14);
    }
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8 + 4, (void **)&v24.__r_.__value_.__l.__data_) & 0x80) != 0)
    {
LABEL_18:
      if (!*v6)
      {
        unint64_t v33 = (unint64_t)v6;
LABEL_24:
        unint64_t v31 = 0xAAAAAAAAAAAAAA00;
        uint64_t v16 = (char *)operator new(0x50uLL);
        v30[0] = v16;
        v30[1] = v5 + 8;
        uint64_t v17 = (std::string *)(v16 + 32);
        if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v17, v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
          uint64_t v18 = (uint64_t *)v30[0];
        }
        else
        {
          *(_OWORD *)&v17->__r_.__value_.__l.__data_ = *(_OWORD *)&v24.__r_.__value_.__l.__data_;
          *((void *)v16 + 6) = *((void *)&v24.__r_.__value_.__l + 2);
          uint64_t v18 = (uint64_t *)v16;
        }
        *(_OWORD *)(v16 + ++*(_DWORD *)(this + 56) = *(_OWORD *)__p;
        *((void *)v16 + 9) = v26;
        __p[1] = 0;
        uint64_t v26 = 0;
        __p[0] = 0;
        LOBYTE(v3ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 1;
        unint64_t v19 = v33;
        *uint64_t v18 = 0;
        v18[1] = 0;
        xpc_object_t v18[2] = v19;
        *CFNumberRef v6 = v18;
        uint64_t v20 = **(void **)v5;
        if (v20)
        {
          *(void *)uint64_t v5 = v20;
          uint64_t v18 = (uint64_t *)*v6;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v5 + 8), v18);
        ++*(void *)(v5 + 16);
        size_t v15 = (void *)v30[0];
        v30[0] = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v30, 0);
        goto LABEL_30;
      }
      unint64_t v33 = (unint64_t)v8;
      CFTypeID v7 = v8 + 1;
      goto LABEL_20;
    }
  }
  else
  {
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v6 + 4, (void **)&v24.__r_.__value_.__l.__data_) & 0x80) == 0)
    {
      unint64_t v32 = (unint64_t)v6;
      unint64_t v33 = (unint64_t)v6;
      CFTypeID v7 = &v32;
      goto LABEL_21;
    }
    CFTypeID v7 = v6 + 1;
    unint64_t v10 = v6[1];
    if (v10)
    {
      size_t v11 = (void *)v6[1];
      do
      {
        uint64_t v12 = v11;
        size_t v11 = (void *)*v11;
      }
      while (v11);
    }
    else
    {
      long long v23 = v6;
      do
      {
        uint64_t v12 = (void *)v23[2];
        BOOL v14 = *v12 == (void)v23;
        long long v23 = v12;
      }
      while (!v14);
    }
    if (v12 == (void *)(v5 + 8)) {
      goto LABEL_50;
    }
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v24, (void **)v12 + 4) & 0x80) != 0)
    {
      unint64_t v10 = *v7;
LABEL_50:
      if (v10)
      {
        unint64_t v33 = (unint64_t)v12;
        CFTypeID v7 = v12;
      }
      else
      {
        unint64_t v33 = (unint64_t)v6;
      }
      goto LABEL_20;
    }
  }
  CFTypeID v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(v5, &v33, (void **)&v24.__r_.__value_.__l.__data_);
LABEL_20:
  CFNumberRef v6 = (void *)*v7;
LABEL_21:
  size_t v15 = v6;
  CFNumberRef v6 = v7;
  if (!v15) {
    goto LABEL_24;
  }
LABEL_30:
  a3[1] = (uint64_t)v15;
  uint64_t v21 = (void *)v15[1];
  if (v21)
  {
    do
    {
      uint64_t v22 = v21;
      uint64_t v21 = (void *)*v21;
    }
    while (v21);
  }
  else
  {
    do
    {
      uint64_t v22 = (void *)v15[2];
      BOOL v14 = *v22 == (void)v15;
      size_t v15 = v22;
    }
    while (!v14);
  }
  a3[1] = (uint64_t)v22;
  if (SHIBYTE(v26) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
LABEL_39:
  if (SHIBYTE(v29) < 0) {
    operator delete(v28[1]);
  }
  if (SHIBYTE(v28[0]) < 0) {
    operator delete(v27[0]);
  }
}

void sub_19208AAA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v15 - 88, 0);
  std::pair<std::string,std::string>::~pair((uint64_t)&a9);
  std::pair<std::string,std::string>::~pair((uint64_t)&a15);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::string>::pair[abi:ne180100]<std::string,std::string,0>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  uint64_t v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_19208AB58(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(uint64_t a1, void *a2, void **a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  long long v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        CFTypeID v7 = v4;
        unsigned int v8 = v4 + 4;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, (void **)v4 + 4) & 0x80) == 0) {
          break;
        }
        long long v4 = (void *)*v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, a3) & 0x80) == 0) {
        break;
      }
      uint64_t v5 = v7 + 1;
      long long v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    CFTypeID v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  CFTypeRef v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string,std::string>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string,std::string>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void ctu::backtrace_string(ctu *this@<X0>, std::string *a2@<X8>)
{
  memset(__p, 170, sizeof(__p));
  ctu::capture_backtrace((ctu *)0x40, (uint64_t)__p);
  memset(&v4, 170, sizeof(v4));
  ctu::symbolicate_frames((void *const *)__p[0] + (void)this, (void **)((((char *)__p[1] - (char *)__p[0]) >> 3) - (void)this), &v4);
  ctu::join<std::__wrap_iter<std::string *>>(v4.__begin_, v4.__end_, "\n", 1uLL, a2);
  long long v6 = &v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v6);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_19208AD5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  *(void *)(v14 - 40) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 40));
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ctu::capture_backtrace(ctu *this@<X0>, uint64_t a2@<X8>)
{
  int v2 = (int)this;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  std::vector<void *>::resize(a2, (unint64_t)this);
  int v4 = backtrace(*(void ***)a2, v2);
  std::vector<void *>::resize(a2, v4);
}

void sub_19208ADE0(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void ctu::symbolicate_frames(void *const *this@<X0>, void **a2@<X1>, std::vector<std::string> *a3@<X8>)
{
  unint64_t v3 = a2;
  uint64_t v5 = backtrace_symbols(this, (int)a2);
  a3->__end_ = 0;
  a3->__end_cap_.__value_ = 0;
  a3->__begin_ = 0;
  std::vector<std::string>::reserve(a3, (std::vector<std::string>::size_type)v3);
  if (v3)
  {
    std::vector<std::csub_match>::pointer end = a3->__end_;
    CFTypeID v7 = v5;
    do
    {
      if (end >= a3->__end_cap_.__value_)
      {
        std::vector<std::csub_match>::pointer end = (std::string *)std::vector<std::string>::__emplace_back_slow_path<char *&>((uint64_t *)a3, v7);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(end++, *v7);
        a3->__end_ = end;
      }
      a3->__end_ = end;
      ++v7;
      unint64_t v3 = (void **)((char *)v3 - 1);
    }
    while (v3);
  }
  if (v5)
  {
    operator delete(v5);
  }
}

void sub_19208AED8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (v2) {
    operator delete(v2);
  }
  _Unwind_Resume(a1);
}

void std::vector<std::string>::reserve(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  xpc_object_t value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3) < __n)
  {
    if (__n >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (char *)this->__end_ - (char *)this->__begin_;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)p_end_cap;
    __v.__first_ = (std::__split_buffer<std::string>::pointer)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)p_end_cap, __n);
    __v.__begin_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_cap_.__value_ = &__v.__first_[v6];
    std::vector<std::string>::__swap_out_circular_buffer(this, &__v);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
}

void sub_19208AFB8(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void std::vector<void *>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<void *>::__append((char **)a1, a2 - v2);
  }
}

uint64_t std::vector<std::string>::__emplace_back_slow_path<char *&>(uint64_t *a1, char **a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9) {
    unint64_t v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  __v.__first_ = v10;
  __v.__begin_ = v10 + v4;
  __v.__end_ = __v.__begin_;
  __v.__end_cap_.__value_ = &v10[v9];
  std::string::basic_string[abi:ne180100]<0>(__v.__begin_->__r_.__value_.__r.__words, *a2);
  __v.__end_ = __v.__begin_ + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  uint64_t v11 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v11;
}

void sub_19208B0F0(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void std::vector<void *>::__append(char **a1, unint64_t a2)
{
  unint64_t v5 = a1[1];
  unint64_t v4 = a1[2];
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(a1[1], 8 * a2);
      v5 += 8 * a2;
    }
    a1[1] = v5;
  }
  else
  {
    uint64_t v6 = *a1;
    uint64_t v7 = v5 - *a1;
    unint64_t v8 = a2 + (v7 >> 3);
    if (v8 >> 61) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = v4 - v6;
    if (v9 >> 2 > v8) {
      unint64_t v8 = v9 >> 2;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v11 = (char *)operator new(8 * v10);
    }
    else
    {
      uint64_t v11 = 0;
    }
    uint64_t v12 = &v11[8 * (v7 >> 3)];
    uint64_t v13 = &v11[8 * v10];
    bzero(v12, 8 * a2);
    uint64_t v14 = &v12[8 * a2];
    if (v5 != v6)
    {
      do
      {
        uint64_t v15 = *((void *)v5 - 1);
        v5 -= 8;
        *((void *)v12 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v15;
        v12 -= 8;
      }
      while (v5 != v6);
      unint64_t v5 = *a1;
    }
    *a1 = v12;
    a1[1] = v14;
    a1[2] = v13;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

std::string *ctu::join<std::__wrap_iter<std::string *>>@<X0>(std::string *__str@<X0>, std::string *a2@<X1>, void *a3@<X2>, size_t a4@<X3>, std::string *a5@<X8>)
{
  a5->__r_.__value_.__r.__words[0] = 0;
  a5->__r_.__value_.__l.__size_ = 0;
  a5->__r_.__value_.__r.__words[2] = 0;
  if (__str != a2)
  {
    unint64_t v8 = __str;
    std::string __str = std::string::operator=(a5, __str);
    for (size_t i = v8 + 1; i != a2; ++i)
    {
      if (a3)
      {
        std::string::basic_string[abi:ne180100](&__p, a3, a4);
        std::string::size_type v11 = HIBYTE(v21);
        uint64_t v12 = (void **)__p;
        std::string::size_type v13 = v20;
      }
      else
      {
        std::string::size_type v13 = 0;
        uint64_t v12 = 0;
        std::string::size_type v11 = 0;
        std::string __p = 0;
        std::string::size_type v20 = 0;
        uint64_t v21 = 0;
      }
      if ((v11 & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = v12;
      }
      if ((v11 & 0x80u) == 0) {
        std::string::size_type v15 = v11;
      }
      else {
        std::string::size_type v15 = v13;
      }
      std::string::append(a5, (const std::string::value_type *)p_p, v15);
      if (SHIBYTE(v21) < 0) {
        operator delete(__p);
      }
      int v16 = SHIBYTE(i->__r_.__value_.__r.__words[2]);
      if (v16 >= 0) {
        uint64_t v17 = (const std::string::value_type *)i;
      }
      else {
        uint64_t v17 = (const std::string::value_type *)i->__r_.__value_.__r.__words[0];
      }
      if (v16 >= 0) {
        std::string::size_type size = HIBYTE(i->__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = i->__r_.__value_.__l.__size_;
      }
      std::string __str = std::string::append(a5, v17, size);
    }
  }
  return __str;
}

void sub_19208B320(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

void ctu::TreeRestResource::handleDroppedConnection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v8 = *(void *)(a1 + 8);
    uint64_t v9 = 40 * v4;
    do
    {
      unint64_t v10 = *(void **)a3;
      size_t v11 = *(void *)(a3 + 8);
      memset(&__p, 170, sizeof(__p));
      if (v10) {
        std::string::basic_string[abi:ne180100](&__p, v10, v11);
      }
      else {
        memset(&__p, 0, sizeof(__p));
      }
      int v12 = *(char *)(v8 + 23);
      if (v12 >= 0) {
        std::string::size_type v13 = (unsigned char *)v8;
      }
      else {
        std::string::size_type v13 = *(unsigned char **)v8;
      }
      if (v12 >= 0) {
        size_t v14 = *(unsigned __int8 *)(v8 + 23);
      }
      else {
        size_t v14 = *(void *)(v8 + 8);
      }
      ctu::path_join_impl(&__p, v13, v14);
      uint64_t v15 = *(void *)(v8 + 24);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      ctu::PathView::PathView(v18, (uint64_t)p_p, size);
      (*(void (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v15 + 32))(v15, a2, v18, a4);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      v8 += 40;
      v9 -= 40;
    }
    while (v9);
  }
}

void sub_19208B478(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::TreeRestResource::handleRestMessage_GET(ctu::TreeRestResource *this, ctu::RestResourceContext *a2, const ctu::PathView *a3)
{
  xpc_object_t v5 = xpc_array_create(0, 0);
  if (v5 || (xpc_object_t v5 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x192FEE1B0](v5) == MEMORY[0x1E4F14568])
    {
      xpc_retain(v5);
      xpc_object_t v6 = v5;
    }
    else
    {
      xpc_object_t v6 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t v5 = 0;
  }
  xpc_release(v5);
  uint64_t v7 = *((void *)this + 2);
  if (v7)
  {
    uint64_t v8 = (long long *)*((void *)this + 1);
    uint64_t v9 = 40 * v7;
    do
    {
      if (*((char *)v8 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v8, *((void *)v8 + 1));
      }
      else
      {
        long long v10 = *v8;
        __p.__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v10;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      xpc_object_t v12 = xpc_string_create((const char *)p_p);
      if (!v12) {
        xpc_object_t v12 = xpc_null_create();
      }
      xpc_array_append_value(v6, v12);
      xpc_release(v12);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v8 = (long long *)((char *)v8 + 40);
      v9 -= 40;
    }
    while (v9);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
  if (v6) {
    xpc_retain(v6);
  }
  else {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  (*(void (**)(ctu::RestResourceContext *, std::string *))(*(void *)a2 + 32))(a2, &__p);
  xpc_release(__p.__r_.__value_.__l.__data_);
  xpc_release(v6);
  return 1;
}

void sub_19208B638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  xpc_release(object);
  xpc_release(v14);
  _Unwind_Resume(a1);
}

uint64_t ctu::TreeRestResource::handleMessage_DumpState(uint64_t a1, ctu::RestResourceContext *a2, uint64_t *a3)
{
  (*(void (**)(xpc_object_t *__return_ptr, ctu::RestResourceContext *))(*(void *)a2 + 16))(object, a2);
  int v7 = ctu::rest::asOperation(object, v6);
  xpc_release(object[0]);
  if (v7 == 2)
  {
    v22[0] = 0;
    v22[1] = 0;
    uint64_t v23 = 0;
    __p.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v8 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v20 = v8;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
    *(_OWORD *)dispatch_object_t object = v8;
    ctu::ReplyDictRestResourceContextDecorator::ReplyDictRestResourceContextDecorator((ctu::ReplyDictRestResourceContextDecorator *)object, a2);
    uint64_t v9 = *(void *)(a1 + 16);
    if (v9)
    {
      uint64_t v10 = *(void *)(a1 + 8);
      uint64_t v11 = v10 + 40 * v9;
      do
      {
        std::string::operator=(&__p, (const std::string *)v10);
        *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v12 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
        v18[0] = v12;
        v18[1] = v12;
        if (a3[3])
        {
          uint64_t v13 = *a3;
          unint64_t v14 = a3[2] - *a3;
          unint64_t v15 = v14 - 1;
          if (v14 > 1)
          {
            unint64_t v14 = a3[1];
            if (v15 < v14) {
              unint64_t v14 = v15;
            }
          }
          else if (v14 >= a3[1])
          {
            unint64_t v14 = a3[1];
          }
        }
        else
        {
          uint64_t v13 = *a3;
          unint64_t v14 = a3[1];
        }
        v17[0] = v13;
        v17[1] = v14;
        ctu::splice_path_with_head<ctu::llvm::StringRef,std::string &,char const(&)[2]>((uint64_t)v22, (uint64_t)v17, v10, "*", (uint64_t)v18);
        ctu::PathView::advance((uint64_t)v18, 1);
        (*(void (**)(void, xpc_object_t *, _OWORD *))(**(void **)(v10 + 24) + 16))(*(void *)(v10 + 24), object, v18);
        v10 += 40;
      }
      while (v10 != v11);
    }
    object[0] = &unk_1EE2F72E8;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (*((void *)&v20 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
    }
    if (SHIBYTE(v23) < 0) {
      operator delete(v22[0]);
    }
  }
  return 1;
}

void sub_19208B880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, xpc_object_t object)
{
}

uint64_t ctu::TreeRestResource::installSubResource(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  size_t v4 = a2[3];
  if (!v4) {
    return 0;
  }
  int v7 = (char *)a2[2];
  long long v8 = (char *)(*a2 + a2[1]);
  if (v8 == &v7[v4])
  {
    uint64_t v9 = (char *)(a1 + 8);
  }
  else
  {
    uint64_t v9 = (char *)(a1 + 8);
    if (&v7[v4 + 1] != v8)
    {
      if (v7)
      {
        std::string::basic_string[abi:ne180100](__p, v7, v4);
      }
      else
      {
        __p[0] = 0;
        __p[1] = 0;
        *(void *)uint64_t v26 = 0;
      }
      boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::shared_ptr<ctu::RestResourceBase>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::shared_ptr<ctu::RestResourceBase>>>>::find((uint64_t)v23, (void ***)(a1 + 8), __p);
      uint64_t v21 = v23[0];
      if ((v26[7] & 0x80000000) != 0) {
        operator delete(__p[0]);
      }
      if (v21 != *(void *)(a1 + 8) + 40 * *(void *)(a1 + 16))
      {
        long long v22 = *((_OWORD *)a2 + 1);
        *(_OWORD *)std::string __p = *(_OWORD *)a2;
        *(_OWORD *)uint64_t v26 = v22;
        ctu::PathView::advance((uint64_t)__p, 1);
        return (*(uint64_t (**)(void, void **, uint64_t))(**(void **)(v21 + 24) + 24))(*(void *)(v21 + 24), __p, a3);
      }
      return 0;
    }
  }
  *(void *)&v26[16] = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)std::string __p = v10;
  *(_OWORD *)uint64_t v26 = v10;
  if (v7)
  {
    std::string::basic_string[abi:ne180100](__p, v7, v4);
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    *(void *)uint64_t v26 = 0;
  }
  *(_OWORD *)&v26[8] = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  v23[0] = __p;
  v23[1] = v9;
  uint64_t v11 = *(void *)(a1 + 8);
  unint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = v11 + 40 * v12;
  while (v12)
  {
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(v11 + 40 * (v12 >> 1)), __p) & 0x80u) == 0)
    {
      v12 >>= 1;
    }
    else
    {
      v11 += 40 * (v12 >> 1) + 40;
      v12 += ~(v12 >> 1);
    }
  }
  if (v11 == v13
    || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, (void **)v11) & 0x80) != 0)
  {
    uint64_t v14 = *(void *)(a1 + 16);
    if (*(void *)(a1 + 24) == v14)
    {
      boost::container::vector<boost::container::dtl::pair<std::string,std::shared_ptr<ctu::RestResourceBase>>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::shared_ptr<ctu::RestResourceBase>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<std::string,std::shared_ptr<ctu::RestResourceBase>>>,boost::container::dtl::pair<std::string,std::shared_ptr<ctu::RestResourceBase>>*,boost::container::dtl::pair<std::string,std::shared_ptr<ctu::RestResourceBase>>>>(&v24, v9, (long long *)v11, (long long *)__p);
    }
    else
    {
      uint64_t v15 = *(void *)v9;
      uint64_t v16 = *(void *)v9 + 40 * v14;
      if (v16 == v11)
      {
        long long v19 = *(_OWORD *)__p;
        *(void *)(v11 + 16) = *(void *)v26;
        *(_OWORD *)uint64_t v11 = v19;
        __p[1] = 0;
        *(void *)uint64_t v26 = 0;
        __p[0] = 0;
        *(_OWORD *)(v15 + 40 * v14 + 24) = *(_OWORD *)&v26[8];
        *(void *)&v26[8] = 0;
        *(void *)&v26[16] = 0;
        ++*(void *)(a1 + 16);
      }
      else
      {
        uint64_t v17 = v16 - 40;
        *(_OWORD *)uint64_t v16 = *(_OWORD *)(v16 - 40);
        *(void *)(v16 + 16) = *(void *)(v16 - 24);
        *(void *)(v16 - 40) = 0;
        *(void *)(v16 - 32) = 0;
        *(_OWORD *)(v15 + 40 * v14 + 24) = *(_OWORD *)(v16 - 16);
        *(void *)(v16 - 24) = 0;
        *(void *)(v16 - 16) = 0;
        *(void *)(v16 - 8) = 0;
        ++*(void *)(a1 + 16);
        if (v16 - 40 != v11)
        {
          do
          {
            uint64_t v18 = v17 - 40;
            boost::container::dtl::pair<std::string,std::shared_ptr<ctu::RestResourceBase>>::operator=(v17, (long long *)(v17 - 40));
            uint64_t v17 = v18;
          }
          while (v18 != v11);
        }
        boost::container::dtl::pair<std::string,std::shared_ptr<ctu::RestResourceBase>>::operator=(v11, (long long *)__p);
      }
    }
  }
  if (*(void *)&v26[16]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v26[16]);
  }
  if ((v26[7] & 0x80000000) != 0) {
    operator delete(__p[0]);
  }
  return 1;
}

void sub_19208BBBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  boost::container::dtl::value_destructor<boost::container::new_allocator<boost::container::dtl::pair<std::string,std::shared_ptr<ctu::RestResourceBase>>>,boost::container::dtl::pair<std::string,std::shared_ptr<ctu::RestResourceBase>>>::~value_destructor((uint64_t *)va);
  _Unwind_Resume(a1);
}

void ctu::TreeRestResource::~TreeRestResource(ctu::TreeRestResource *this)
{
  *(void *)this = &unk_1EE2F6988;
  boost::container::vector<boost::container::dtl::pair<std::string,std::shared_ptr<ctu::RestResourceBase>>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::shared_ptr<ctu::RestResourceBase>>>,void>::~vector((void *)this + 1);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EE2F6988;
  boost::container::vector<boost::container::dtl::pair<std::string,std::shared_ptr<ctu::RestResourceBase>>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::shared_ptr<ctu::RestResourceBase>>>,void>::~vector((void *)this + 1);

  operator delete(this);
}

void *boost::container::vector<boost::container::dtl::pair<std::string,std::shared_ptr<ctu::RestResourceBase>>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::shared_ptr<ctu::RestResourceBase>>>,void>::~vector(void *a1)
{
  uint64_t v2 = a1[1];
  if (v2)
  {
    uint64_t v3 = (std::__shared_weak_count **)(*a1 + 32);
    do
    {
      if (*v3) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*v3);
      }
      if (*((char *)v3 - 9) < 0) {
        operator delete(*(v3 - 4));
      }
      v3 += 5;
      --v2;
    }
    while (v2);
  }
  if (a1[2]) {
    operator delete((void *)*a1);
  }
  return a1;
}

uint64_t *boost::container::dtl::value_destructor<boost::container::new_allocator<boost::container::dtl::pair<std::string,std::shared_ptr<ctu::RestResourceBase>>>,boost::container::dtl::pair<std::string,std::shared_ptr<ctu::RestResourceBase>>>::~value_destructor(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(std::__shared_weak_count **)(*a1 + 32);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  return a1;
}

void boost::container::vector<boost::container::dtl::pair<std::string,std::shared_ptr<ctu::RestResourceBase>>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::shared_ptr<ctu::RestResourceBase>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<std::string,std::shared_ptr<ctu::RestResourceBase>>>,boost::container::dtl::pair<std::string,std::shared_ptr<ctu::RestResourceBase>>*,boost::container::dtl::pair<std::string,std::shared_ptr<ctu::RestResourceBase>>>>(void *a1, char *a2, long long *a3, long long *a4)
{
  unint64_t v4 = *((void *)a2 + 2);
  unint64_t v5 = *((void *)a2 + 1) + 1;
  if (0x333333333333333 - v4 < v5 - v4) {
    goto LABEL_29;
  }
  unint64_t v6 = v4 >> 61;
  unint64_t v7 = 8 * v4;
  if (v6 > 4) {
    uint64_t v8 = -1;
  }
  else {
    uint64_t v8 = v7;
  }
  unint64_t v9 = v7 / 5;
  if (v6) {
    unint64_t v9 = v8;
  }
  if (v9 >= 0x333333333333333) {
    unint64_t v9 = 0x333333333333333;
  }
  unint64_t v10 = v5 <= v9 ? v9 : *((void *)a2 + 1) + 1;
  if (v10 > 0x333333333333333) {
LABEL_29:
  }
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
  uint64_t v15 = *(char **)a2;
  uint64_t v16 = (char *)operator new(40 * v10);
  uint64_t v17 = v16;
  uint64_t v18 = *(char **)a2;
  uint64_t v19 = *(void *)a2 + 40 * *((void *)a2 + 1);
  long long v20 = v16;
  if (*(long long **)a2 != a3)
  {
    uint64_t v21 = *(long long **)a2;
    long long v20 = v16;
    do
    {
      long long v22 = *v21;
      *((void *)v20 + 2) = *((void *)v21 + 2);
      *(_OWORD *)long long v20 = v22;
      *((void *)v21 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
      *((void *)v21 + 2) = 0;
      *(void *)uint64_t v21 = 0;
      *(_OWORD *)(v20 + 24) = *(long long *)((char *)v21 + 24);
      *((void *)v21 + 3) = 0;
      *((void *)v21 + 4) = 0;
      v20 += 40;
      uint64_t v21 = (long long *)((char *)v21 + 40);
    }
    while (v21 != a3);
  }
  long long v23 = *a4;
  *((void *)v20 + 2) = *((void *)a4 + 2);
  *(_OWORD *)long long v20 = v23;
  *((void *)a4 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
  *((void *)a4 + 2) = 0;
  *(void *)a4 = 0;
  *(_OWORD *)(v20 + 24) = *(long long *)((char *)a4 + 24);
  *((void *)a4 + 3) = 0;
  *((void *)a4 + 4) = 0;
  if ((long long *)v19 != a3)
  {
    uint64_t v24 = v20 + 64;
    long long v25 = a3;
    do
    {
      long long v26 = *v25;
      *((void *)v24 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = *((void *)v25 + 2);
      *(_OWORD *)((char *)v24 - 24) = v26;
      *((void *)v25 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
      *((void *)v25 + 2) = 0;
      *(void *)long long v25 = 0;
      _OWORD *v24 = *(long long *)((char *)v25 + 24);
      uint64_t v24 = (_OWORD *)((char *)v24 + 40);
      *((void *)v25 + 3) = 0;
      *((void *)v25 + 4) = 0;
      long long v25 = (long long *)((char *)v25 + 40);
    }
    while (v25 != (long long *)v19);
  }
  if (v18)
  {
    uint64_t v27 = *((void *)a2 + 1);
    if (v27)
    {
      size_t v28 = (std::__shared_weak_count **)(v18 + 32);
      do
      {
        if (*v28) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*v28);
        }
        if (*((char *)v28 - 9) < 0) {
          operator delete(*(v28 - 4));
        }
        v28 += 5;
        --v27;
      }
      while (v27);
    }
    operator delete(*(void **)a2);
  }
  uint64_t v29 = *((void *)a2 + 1) + 1;
  *(void *)a2 = v17;
  *((void *)a2 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v29;
  *((void *)a2 + 2) = v10;
  *a1 = &v17[(char *)a3 - v15];
}

uint64_t boost::container::dtl::pair<std::string,std::shared_ptr<ctu::RestResourceBase>>::operator=(uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  long long v5 = *(long long *)((char *)a2 + 24);
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  unint64_t v6 = *(std::__shared_weak_count **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = v5;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return a1;
}

uint64_t ctu::ReplyCallbackRestResourceContext::ReplyCallbackRestResourceContext(ctu::os::OSSharedRef<os_log_s>,xpc::dict const&,dispatch::queue const&,std::shared_ptr<ctu::RestResourceConnection> const&,std::function<void ()(xpc::object)>)::$_0::~$_0(uint64_t a1)
{
  *(void *)a1 = 0;
  return a1;
}

void *ctu::ReplyCallbackRestResourceContext::ReplyCallbackRestResourceContext(void *a1, uint64_t a2, NSObject **a3, void *a4, uint64_t a5)
{
  v11[4] = *MEMORY[0x1E4F143B8];
  unint64_t v10 = 0;
  std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)v11, a5);
  ctu::ReplyCallbackRestResourceContext::ReplyCallbackRestResourceContext(a1, &v10, a2, a3, a4, (uint64_t)v11);
  std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100](v11);
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v10);
  return a1;
}

{
  void *v10;
  void v11[5];

  v11[4] = *MEMORY[0x1E4F143B8];
  unint64_t v10 = 0;
  std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)v11, a5);
  ctu::ReplyCallbackRestResourceContext::ReplyCallbackRestResourceContext(a1, &v10, a2, a3, a4, (uint64_t)v11);
  std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100](v11);
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v10);
  return a1;
}

void sub_19208C054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10)
{
}

void sub_19208C118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10)
{
}

uint64_t ctu::ReplyCallbackRestResourceContext::getAuthorResource@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 32);
  *a2 = *(void *)(this + 24);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t ctu::ReplyCallbackRestResourceContext::redirect()
{
  return 0;
}

ctu::ReplyDictRestResourceContextDecorator *ctu::ReplyDictRestResourceContextDecorator::ReplyDictRestResourceContextDecorator(ctu::ReplyDictRestResourceContextDecorator *this, ctu::RestResourceContext *a2)
{
  *(void *)this = &unk_1EE2F72E8;
  *((void *)this + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = a2;
  *((_OWORD *)this + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0u;
  uint64_t v3 = (void ***)((char *)this + 16);
  *((_OWORD *)this + 2) = 0u;
  *((void *)this + 6) = 0;
  (*(void (**)(long long *__return_ptr, ctu::RestResourceContext *))(*(void *)a2 + 40))(&v11, a2);
  long long v4 = v11;
  long long v11 = 0uLL;
  long long v5 = (std::__shared_weak_count *)*((void *)this + 3);
  *((_OWORD *)this + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v4;
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    if (*((void *)&v11 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v11 + 1));
    }
  }
  if (MEMORY[0x192FEE1B0](**v3) == MEMORY[0x1E4F145D8])
  {
    xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
    if (v6 || (xpc_object_t v6 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x192FEE1B0](v6) == MEMORY[0x1E4F14590])
      {
        xpc_retain(v6);
        xpc_object_t v7 = v6;
      }
      else
      {
        xpc_object_t v7 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v7 = xpc_null_create();
      xpc_object_t v6 = 0;
    }
    xpc_release(v6);
    if (v7)
    {
      xpc_retain(v7);
      xpc_object_t v8 = v7;
    }
    else
    {
      xpc_object_t v8 = xpc_null_create();
    }
    unint64_t v9 = **v3;
    *std::__shared_weak_count *v3 = v8;
    xpc_release(v9);
    xpc_release(v7);
  }
  return this;
}

void sub_19208C2E4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*(void **)(v1 + 32));
  }
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 24);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

std::string *ctu::ReplyDictRestResourceContextDecorator::pushScope(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 32), a2);
}

BOOL ctu::ReplyDictRestResourceContextDecorator::sendReplyWithValue(uint64_t a1, void **a2)
{
  if (*(char *)(a1 + 55) < 0)
  {
    uint64_t v4 = *(void *)(a1 + 40);
    if (!v4) {
      return v4 != 0;
    }
  }
  else
  {
    uint64_t v4 = *(unsigned __int8 *)(a1 + 55);
    if (!*(unsigned char *)(a1 + 55)) {
      return v4 != 0;
    }
  }
  long long v5 = **(void ***)(a1 + 16);
  xpc_object_t v12 = v5;
  if (v5 && MEMORY[0x192FEE1B0](v5) == MEMORY[0x1E4F14590]) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t v12 = xpc_null_create();
  }
  xpc_object_t v6 = *a2;
  xpc_object_t v10 = v6;
  if (v6) {
    xpc_retain(v6);
  }
  else {
    xpc_object_t v10 = xpc_null_create();
  }
  xpc_object_t v7 = (void *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0) {
    xpc_object_t v7 = (void *)*v7;
  }
  v9[0] = &v12;
  v9[1] = v7;
  xpc::dict::object_proxy::operator=((uint64_t)v9, &v10, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v10);
  xpc_object_t v10 = 0;
  xpc_release(v12);
  return v4 != 0;
}

void ctu::ReplyDictRestResourceContextDecorator::takeAutoReplyValue(ctu::ReplyDictRestResourceContextDecorator *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x48uLL);
  long long v5 = (std::__shared_weak_count *)v4;
  *uint64_t v4 = &unk_1EE2F8B58;
  v4[1] = 0;
  uint64_t v7 = *((void *)this + 2);
  uint64_t v6 = *((void *)this + 3);
  std::string v4[2] = 0;
  v4[3] = v7;
  v4[4] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  xpc_object_t v8 = (std::string *)(v4 + 5);
  if (*((char *)this + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *((const std::string::value_type **)this + 4), *((void *)this + 5));
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *((_OWORD *)this + 2);
    v5[2].__shared_owners_ = *((void *)this + 6);
  }
  v5[2].__shared_weak_owners_ = (uint64_t)xpc_null_create();
  *a2 = (char *)v5 + 64;
  a2[1] = v5;
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);

  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
}

void sub_19208C4FC(_Unwind_Exception *a1)
{
  shared_owners = (std::__shared_weak_count *)v1[1].__shared_owners_;
  if (shared_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_owners);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

uint64_t ctu::ReplyDictRestResourceContextDecorator::getAuthorResource(ctu::ReplyDictRestResourceContextDecorator *this)
{
  return (***((uint64_t (****)(void))this + 1))(*((void *)this + 1));
}

uint64_t ctu::ReplyDictRestResourceContextDecorator::getRestAuthor(ctu::ReplyDictRestResourceContextDecorator *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 8))();
}

uint64_t ctu::ReplyDictRestResourceContextDecorator::getRestOperation(ctu::ReplyDictRestResourceContextDecorator *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 16))();
}

uint64_t ctu::ReplyDictRestResourceContextDecorator::getRestValue(ctu::ReplyDictRestResourceContextDecorator *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 24))();
}

uint64_t ctu::ReplyDictRestResourceContextDecorator::redirect(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 64))();
}

uint64_t ctu::ReplyDictRestResourceContextDecorator::sendNotify(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))();
}

uint64_t ctu::ReplyDictRestResourceContextDecorator::sendGet(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))();
}

void ctu::ReplyCallbackRestResourceContext::~ReplyCallbackRestResourceContext(void **this)
{
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 9);
  std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100](this + 5);
  uint64_t v2 = (std::__shared_weak_count *)this[4];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = this[2];
  if (v3) {
    dispatch_release(v3);
  }
}

{
  std::__shared_weak_count *v2;
  NSObject *v3;
  uint64_t vars8;

  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 9);
  std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100](this + 5);
  uint64_t v2 = (std::__shared_weak_count *)this[4];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = this[2];
  if (v3) {
    dispatch_release(v3);
  }

  operator delete(this);
}

void std::__shared_ptr_emplace<anonymous namespace'::createAutoReplyValueInsideOuterReply(std::shared_ptr<xpc::object> const&,std::string const&)::AutoReplier,std::allocator<anonymous namespace'::createAutoReplyValueInsideOuterReply(std::shared_ptr<xpc::object> const&,std::string const&)::AutoReplier>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE2F8B58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<anonymous namespace'::createAutoReplyValueInsideOuterReply(std::shared_ptr<xpc::object> const&,std::string const&)::AutoReplier,std::allocator<anonymous namespace'::createAutoReplyValueInsideOuterReply(std::shared_ptr<xpc::object> const&,std::string const&)::AutoReplier>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE2F8B58;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<anonymous namespace'::createAutoReplyValueInsideOuterReply(std::shared_ptr<xpc::object> const&,std::string const&)::AutoReplier,std::allocator<anonymous namespace'::createAutoReplyValueInsideOuterReply(std::shared_ptr<xpc::object> const&,std::string const&)::AutoReplier>>::__on_zero_shared(uint64_t a1)
{
  xpc_object_t v2 = **(xpc_object_t **)(a1 + 24);
  xpc_object_t v10 = v2;
  uint64_t v3 = MEMORY[0x1E4F14590];
  if (v2 && MEMORY[0x192FEE1B0](v2) == v3)
  {
    xpc_retain(v2);
  }
  else
  {
    xpc_object_t v2 = xpc_null_create();
    xpc_object_t v10 = v2;
  }
  if (MEMORY[0x192FEE1B0](v2) == v3)
  {
    uint64_t v4 = *(void **)(a1 + 64);
    xpc_object_t v8 = v4;
    if (v4) {
      xpc_retain(v4);
    }
    else {
      xpc_object_t v8 = xpc_null_create();
    }
    long long v5 = (void *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0) {
      long long v5 = (void *)*v5;
    }
    v7[0] = &v10;
    v7[1] = v5;
    xpc::dict::object_proxy::operator=((uint64_t)v7, &v8, &object);
    xpc_release(object);
    xpc_object_t object = 0;
    xpc_release(v8);
    xpc_object_t v8 = 0;
    xpc_object_t v2 = v10;
  }
  xpc_release(v2);
  xpc_release(*(xpc_object_t *)(a1 + 64));
  *(void *)(a1 + 64) = 0;
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 32);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

uint64_t std::__function::__func<ctu::ReplyCallbackRestResourceContext::ReplyCallbackRestResourceContext(ctu::os::OSSharedRef<os_log_s>,xpc::dict const&,dispatch::queue const&,std::shared_ptr<ctu::RestResourceConnection> const&,std::function<void ()(xpc::object)>)::$_0,std::allocator<ctu::ReplyCallbackRestResourceContext::ReplyCallbackRestResourceContext(ctu::os::OSSharedRef<os_log_s>,xpc::dict const&,dispatch::queue const&,std::shared_ptr<ctu::RestResourceConnection> const&,std::function<void ()(xpc::object)>)::$_0>,void ()(xpc::object)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1EE2F8450;
  std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100]((void *)(a1 + 16));
  xpc_release(*(xpc_object_t *)(a1 + 8));
  *(void *)(a1 + 8) = 0;
  return a1;
}

void std::__function::__func<ctu::ReplyCallbackRestResourceContext::ReplyCallbackRestResourceContext(ctu::os::OSSharedRef<os_log_s>,xpc::dict const&,dispatch::queue const&,std::shared_ptr<ctu::RestResourceConnection> const&,std::function<void ()(xpc::object)>)::$_0,std::allocator<ctu::ReplyCallbackRestResourceContext::ReplyCallbackRestResourceContext(ctu::os::OSSharedRef<os_log_s>,xpc::dict const&,dispatch::queue const&,std::shared_ptr<ctu::RestResourceConnection> const&,std::function<void ()(xpc::object)>)::$_0>,void ()(xpc::object)>::~__func(void *a1)
{
  *(void *)a1 = &unk_1EE2F8450;
  std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100]((void *)a1 + 2);
  xpc_release(*((xpc_object_t *)a1 + 1));

  operator delete(a1);
}

void **std::__function::__func<ctu::ReplyCallbackRestResourceContext::ReplyCallbackRestResourceContext(ctu::os::OSSharedRef<os_log_s>,xpc::dict const&,dispatch::queue const&,std::shared_ptr<ctu::RestResourceConnection> const&,std::function<void ()(xpc::object)>)::$_0,std::allocator<ctu::ReplyCallbackRestResourceContext::ReplyCallbackRestResourceContext(ctu::os::OSSharedRef<os_log_s>,xpc::dict const&,dispatch::queue const&,std::shared_ptr<ctu::RestResourceConnection> const&,std::function<void ()(xpc::object)>)::$_0>,void ()(xpc::object)>::__clone(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 8);
  xpc_object_t v2 = (void **)operator new(0x30uLL);
  std::__shared_weak_count *v2 = &unk_1EE2F8450;
  std::__compressed_pair_elem<ctu::ReplyCallbackRestResourceContext::ReplyCallbackRestResourceContext(ctu::os::OSSharedRef<os_log_s>,xpc::dict const&,dispatch::queue const&,std::shared_ptr<ctu::RestResourceConnection> const&,std::function<void ()(xpc::object)>)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<ctu::ReplyCallbackRestResourceContext::ReplyCallbackRestResourceContext(ctu::os::OSSharedRef<os_log_s>,xpc::dict const&,dispatch::queue const&,std::shared_ptr<ctu::RestResourceConnection> const&,std::function<void ()(xpc::object)>)::$_0 const&,0ul>(v2 + 1, v1);
  return v2;
}

void sub_19208C9FC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void **std::__function::__func<ctu::ReplyCallbackRestResourceContext::ReplyCallbackRestResourceContext(ctu::os::OSSharedRef<os_log_s>,xpc::dict const&,dispatch::queue const&,std::shared_ptr<ctu::RestResourceConnection> const&,std::function<void ()(xpc::object)>)::$_0,std::allocator<ctu::ReplyCallbackRestResourceContext::ReplyCallbackRestResourceContext(ctu::os::OSSharedRef<os_log_s>,xpc::dict const&,dispatch::queue const&,std::shared_ptr<ctu::RestResourceConnection> const&,std::function<void ()(xpc::object)>)::$_0>,void ()(xpc::object)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE2F8450;
  return std::__compressed_pair_elem<ctu::ReplyCallbackRestResourceContext::ReplyCallbackRestResourceContext(ctu::os::OSSharedRef<os_log_s>,xpc::dict const&,dispatch::queue const&,std::shared_ptr<ctu::RestResourceConnection> const&,std::function<void ()(xpc::object)>)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<ctu::ReplyCallbackRestResourceContext::ReplyCallbackRestResourceContext(ctu::os::OSSharedRef<os_log_s>,xpc::dict const&,dispatch::queue const&,std::shared_ptr<ctu::RestResourceConnection> const&,std::function<void ()(xpc::object)>)::$_0 const&,0ul>((void **)(a2 + 8), (void **)(a1 + 8));
}

void std::__function::__func<ctu::ReplyCallbackRestResourceContext::ReplyCallbackRestResourceContext(ctu::os::OSSharedRef<os_log_s>,xpc::dict const&,dispatch::queue const&,std::shared_ptr<ctu::RestResourceConnection> const&,std::function<void ()(xpc::object)>)::$_0,std::allocator<ctu::ReplyCallbackRestResourceContext::ReplyCallbackRestResourceContext(ctu::os::OSSharedRef<os_log_s>,xpc::dict const&,dispatch::queue const&,std::shared_ptr<ctu::RestResourceConnection> const&,std::function<void ()(xpc::object)>)::$_0>,void ()(xpc::object)>::destroy(uint64_t a1)
{
}

uint64_t std::__function::__func<ctu::ReplyCallbackRestResourceContext::ReplyCallbackRestResourceContext(ctu::os::OSSharedRef<os_log_s>,xpc::dict const&,dispatch::queue const&,std::shared_ptr<ctu::RestResourceConnection> const&,std::function<void ()(xpc::object)>)::$_0,std::allocator<ctu::ReplyCallbackRestResourceContext::ReplyCallbackRestResourceContext(ctu::os::OSSharedRef<os_log_s>,xpc::dict const&,dispatch::queue const&,std::shared_ptr<ctu::RestResourceConnection> const&,std::function<void ()(xpc::object)>)::$_0>,void ()(xpc::object)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ctu::ReplyCallbackRestResourceContext::ReplyCallbackRestResourceContext(ctu::os::OSSharedRef<os_log_s>,xpc::dict const&,dispatch::queue const&,std::shared_ptr<ctu::RestResourceConnection> const&,std::function<void ()(xpc::object)>)::$_0,std::allocator<ctu::ReplyCallbackRestResourceContext::ReplyCallbackRestResourceContext(ctu::os::OSSharedRef<os_log_s>,xpc::dict const&,dispatch::queue const&,std::shared_ptr<ctu::RestResourceConnection> const&,std::function<void ()(xpc::object)>)::$_0>,void ()(xpc::object)>::target_type()
{
}

void **std::__compressed_pair_elem<ctu::ReplyCallbackRestResourceContext::ReplyCallbackRestResourceContext(ctu::os::OSSharedRef<os_log_s>,xpc::dict const&,dispatch::queue const&,std::shared_ptr<ctu::RestResourceConnection> const&,std::function<void ()(xpc::object)>)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<ctu::ReplyCallbackRestResourceContext::ReplyCallbackRestResourceContext(ctu::os::OSSharedRef<os_log_s>,xpc::dict const&,dispatch::queue const&,std::shared_ptr<ctu::RestResourceConnection> const&,std::function<void ()(xpc::object)>)::$_0 const&,0ul>(void **a1, void **a2)
{
  uint64_t v4 = *a2;
  *a1 = *a2;
  if (v4) {
    xpc_retain(v4);
  }
  else {
    *a1 = xpc_null_create();
  }
  std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
  return a1;
}

void sub_19208CAE0(_Unwind_Exception *a1)
{
  xpc_release(*v1);
  xpc_object_t *v1 = 0;
  _Unwind_Resume(a1);
}

uint64_t _TelephonyCapabilitiesRadioPreferencesOverrideProfile()
{
  return 0;
}

uint64_t ctu::TelephonyUtilRadioFusingInferFusingStateFromSerialNumber()
{
  if (_TelephonyRadiosGetRadioInternal_sOnce != -1) {
    dispatch_once(&_TelephonyRadiosGetRadioInternal_sOnce, &__block_literal_global_4);
  }
  return 0;
}

uint64_t ctu::TelephonyUtilRadioFusingInferFusingStateFromSerialNumber(ctu *this, const unsigned int *a2)
{
  if (_TelephonyRadiosGetRadioInternal_sOnce != -1) {
    dispatch_once(&_TelephonyRadiosGetRadioInternal_sOnce, &__block_literal_global_4);
  }
  return 0;
}

uint64_t ctu::TelephonyUtilRadioFusingInferFusingStateFromCertID(ctu *this, const unsigned int *a2)
{
  uint64_t result = TelephonyCapabilitiesRadioFusingCertIDFromPublicKeyHash();
  if (result)
  {
    int v4 = *(_DWORD *)this;
    if (v4)
    {
      if (v4 == TelephonyCapabilitiesRadioFusingDefaultCertID()) {
        return 1;
      }
      else {
        return 3;
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

void ctu::base64::encode(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = 0;
  uint64_t v3 = (void *)(a2 + 8);
  *(void *)a2 = 0;
  *(void *)(a2 + 16) = 0;
  if (*a1 != a1[1])
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
    ctu::ns::AutoPool::AutoPool((ctu::ns::AutoPool *)&v9);
    long long v5 = (void *)[MEMORY[0x1E4F1C9B8] dataWithBytesNoCopy:*a1 length:a1[1] - *a1 freeWhenDone:0];
    if (v5)
    {
      CFStringRef v6 = (const __CFString *)[v5 base64EncodedStringWithOptions:0];
      uint64_t v10 = 0;
      long long v11 = 0uLL;
      ctu::cf::assign((uint64_t)&v10, v6);
      uint64_t v7 = v10;
      void *v3 = v11;
      *(void *)((char *)v3 + 7) = *(void *)((char *)&v11 + 7);
      char v8 = HIBYTE(v11);
      *(void *)a2 = v7;
      *(unsigned char *)(a2 + 23) = v8;
    }
    ctu::ns::AutoPool::~AutoPool((void **)&v9);
  }
}

void sub_19208CCA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  ctu::ns::AutoPool::~AutoPool((void **)&a9);
  _Unwind_Resume(a1);
}

void ctu::base64::decode(uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = *((unsigned __int8 *)a1 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = a1[1];
  }
  if (v3)
  {
    unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
    ctu::ns::AutoPool::AutoPool((ctu::ns::AutoPool *)&v14);
    id v5 = [NSString alloc];
    int v6 = *((char *)a1 + 23);
    if (v6 >= 0) {
      uint64_t v7 = a1;
    }
    else {
      uint64_t v7 = (uint64_t *)*a1;
    }
    if (v6 >= 0) {
      uint64_t v8 = *((unsigned __int8 *)a1 + 23);
    }
    else {
      uint64_t v8 = a1[1];
    }
    id v9 = (id)[v5 initWithBytesNoCopy:v7 length:v8 encoding:4 freeWhenDone:0];
    if (v9)
    {
      id v10 = (id)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBase64EncodedString:v9 options:1];
      long long v11 = v10;
      if (v10)
      {
        size_t v12 = [v10 length];
        if (v12)
        {
          std::vector<unsigned char>::__append(a2, v12);
          unint64_t v13 = *a2;
        }
        else
        {
          unint64_t v13 = 0;
        }
        [v11 getBytes:v13 length:[v11 length]];
      }
    }
    ctu::ns::AutoPool::~AutoPool((void **)&v14);
  }
}

void sub_19208CDE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::ns::AutoPool::~AutoPool((void **)va);
  int v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

BOOL ctu::DispatchTimer::isExpired(ctu::DispatchTimer *this)
{
  return !*((void *)this + 1) || (uint64_t v1 = *((void *)this + 3)) == 0 || *(void *)(v1 + 8) == -1;
}

uint64_t ctu::DispatchTimerService::create@<X0>(void *a1@<X0>, std::__shared_weak_count_vtbl **a2@<X8>)
{
  *a2 = (std::__shared_weak_count_vtbl *)0xAAAAAAAAAAAAAAAALL;
  a2[1] = (std::__shared_weak_count_vtbl *)0xAAAAAAAAAAAAAAAALL;
  int v4 = (std::__shared_weak_count_vtbl *)operator new(0x30uLL);
  id v5 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  v4->~__shared_weak_size_t count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&unk_1EE2F6688;
  ctu::SharedLoggable<ctu::DispatchTimerService,ctu::OsLogLogger>::SharedLoggable<char const(&)[6]>(&v4->~__shared_weak_count_0);
  v4->~__shared_weak_size_t count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&unk_1EE2F6C60;
  *a2 = v4;
  a2[1] = (std::__shared_weak_count_vtbl *)0xAAAAAAAAAAAAAAAALL;
  int v6 = (std::__shared_weak_count *)operator new(0x20uLL);
  v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE2F8D88;
  v6->__shared_owners_ = 0;
  v6->__shared_weak_owners_ = 0;
  v6[1].__vftable = v4;
  a2[1] = (std::__shared_weak_count_vtbl *)v6;
  on_zero_shared = (std::__shared_weak_count *)v4->__on_zero_shared;
  if (on_zero_shared)
  {
    if (on_zero_shared->__shared_owners_ != -1) {
      goto LABEL_6;
    }
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v4->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v4;
    v4->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v6;
    std::__shared_weak_count::__release_weak(on_zero_shared);
  }
  else
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v4->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v4;
    v4->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v6;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
LABEL_6:
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return (*((uint64_t (**)(std::__shared_weak_count_vtbl *))v4->~__shared_weak_count + 7))(v4);
}

void sub_19208CF7C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *ctu::DispatchTimerService::DispatchTimerService(void *a1)
{
  *a1 = &unk_1EE2F6688;
  ctu::SharedLoggable<ctu::DispatchTimerService,ctu::OsLogLogger>::SharedLoggable<char const(&)[6]>(a1 + 1);
  *a1 = &unk_1EE2F6C60;
  return a1;
}

{
  *a1 = &unk_1EE2F6688;
  ctu::SharedLoggable<ctu::DispatchTimerService,ctu::OsLogLogger>::SharedLoggable<char const(&)[6]>(a1 + 1);
  *a1 = &unk_1EE2F6C60;
  return a1;
}

ctu::DispatchTimerService *ctu::DispatchTimerService::DispatchTimerService(ctu::DispatchTimerService *this)
{
  *(void *)this = &unk_1EE2F6688;
  ctu::SharedLoggable<ctu::DispatchTimerService,ctu::OsLogLogger>::SharedLoggable<char const(&)[6]>((void *)this + 1);
  *(void *)this = &unk_1EE2F6C60;
  return this;
}

{
  *(void *)this = &unk_1EE2F6688;
  ctu::SharedLoggable<ctu::DispatchTimerService,ctu::OsLogLogger>::SharedLoggable<char const(&)[6]>((void *)this + 1);
  *(void *)this = &unk_1EE2F6C60;
  return this;
}

void *ctu::SharedLoggable<ctu::DispatchTimerService,ctu::OsLogLogger>::SharedLoggable<char const(&)[6]>(void *a1)
{
  uint64_t v2 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_UTILITY, 0);
  uint64_t v3 = dispatch_queue_create("DispatchTimerService", v2);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = v3;
  if (v3)
  {
    int v4 = v3;
    dispatch_retain(v3);
    a1[3] = 0;
    dispatch_release(v4);
  }
  else
  {
    a1[3] = 0;
  }
  a1[4] = os_log_create("com.apple.telephony", "timer");
  return a1;
}

void ctu::DispatchTimerService::~DispatchTimerService(void **this)
{
  uint64_t v1 = this + 1;
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 5);
  ctu::SharedSynchronizable<ctu::RestModuleState>::~SharedSynchronizable(v1);
}

{
  void *v1;

  uint64_t v1 = this + 1;
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 5);
  ctu::SharedSynchronizable<ctu::RestModuleState>::~SharedSynchronizable(v1);
}

{
  void *v2;
  uint64_t vars8;

  uint64_t v2 = this + 1;
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 5);
  ctu::SharedSynchronizable<ctu::RestModuleState>::~SharedSynchronizable(v2);

  operator delete(this);
}

uint64_t ctu::DispatchTimerService::dispatchClockID(uint64_t a1, unsigned __int8 *a2)
{
  int v2 = *a2;
  uint64_t v3 = 1;
  if (v2 == 2) {
    uint64_t v3 = 2;
  }
  if (v2 == 1) {
    return 3;
  }
  else {
    return v3;
  }
}

void ctu::DispatchTimerService::scheduleAfterImpl(uint64_t a1, uint64_t a2, char a3, uint64_t a4, NSObject **a5, void **a6)
{
  dispatch_time_t v8 = dispatch_time(qword_1920BEBE8[a3], 1000 * a4);
  id v9 = *a5;
  id v10 = *a6;

  dispatch_after(v8, v9, v10);
}

void __copy_helper_block_e8_32b40c22_ZTSN8dispatch6sourceE(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 32), *(const void **)(a2 + 32), 7);
  int v4 = *(NSObject **)(a2 + 40);
  *(void *)(a1 + 40) = v4;
  if (v4)
  {
    dispatch_retain(v4);
  }
}

void ctu::DispatchTimerService::createOneShotTimerImpl(uint64_t a1@<X2>, uint64_t a2@<X3>, int a3@<W4>, dispatch_queue_t *a4@<X5>, void **a5@<X6>, void *a6@<X8>)
{
  v6[0] = a1;
  v6[1] = a2;
  ctu::DispatchTimerService::createDispatchTimer(*a4, (char *)v6, 0xFFFFFFFFFFFFFFFFLL, a3, *a5, a6);
}

void std::__shared_ptr_pointer<ctu::DispatchTimerService *,std::shared_ptr<ctu::DispatchTimerService> ctu::SharedSynchronizable<ctu::DispatchTimerService>::make_shared_ptr<ctu::DispatchTimerService>(ctu::DispatchTimerService*)::{lambda(ctu::DispatchTimerService *)#1},std::allocator<ctu::DispatchTimerService>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<ctu::DispatchTimerService *,std::shared_ptr<ctu::DispatchTimerService> ctu::SharedSynchronizable<ctu::DispatchTimerService>::make_shared_ptr<ctu::DispatchTimerService>(ctu::DispatchTimerService*)::{lambda(ctu::DispatchTimerService *)#1},std::allocator<ctu::DispatchTimerService>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<ctu::DispatchTimerService *,std::shared_ptr<ctu::DispatchTimerService> ctu::SharedSynchronizable<ctu::DispatchTimerService>::make_shared_ptr<ctu::DispatchTimerService>(ctu::DispatchTimerService*)::{lambda(ctu::DispatchTimerService *)#1},std::allocator<ctu::DispatchTimerService>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<ctu::DispatchTimerService> ctu::SharedSynchronizable<ctu::DispatchTimerService>::make_shared_ptr<ctu::DispatchTimerService>(ctu::DispatchTimerService*)::{lambda(ctu::DispatchTimerService*)#1}::operator() const(ctu::DispatchTimerService*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 72))();
  }
  return result;
}

void std::__shared_ptr_pointer<BOOL *,std::shared_ptr<void>::__shared_ptr_default_delete<void,BOOL>,std::allocator<BOOL>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<BOOL *,std::shared_ptr<void>::__shared_ptr_default_delete<void,BOOL>,std::allocator<BOOL>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void *ctu::Http::HttpSession::create@<X0>(ctu::Http::HttpSession_impl *a1@<X8>)
{
  return ctu::Http::HttpSession_impl::createSession(a1);
}

void *ctu::Http::HttpSession_impl::createSession(ctu::Http::HttpSession_impl *this)
{
  int v2 = (char *)operator new(0xB0uLL);
  *(void *)int v2 = &unk_1EE2F7570;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + ++*(_DWORD *)(this + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 8ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0u;
  *((void *)v2 + 14) = 0;
  *((void *)v2 + 15) = 0;
  *((void *)v2 + 13) = 0;
  *(void *)(v2 + 125) = 0;
  *(_OWORD *)(v2 + 152) = 0u;
  *(void *)(v2 + 165) = 0;
  uint64_t v3 = objc_opt_new();
  *((void *)v2 + 2) = v3;
  [v3 setMaxConcurrentOperationCount:1];
  uint64_t result = operator new(0x20uLL);
  *uint64_t result = &unk_1EE2F8DF8;
  result[1] = 0;
  result[2] = 0;
  result[3] = v2;
  *(void *)this = v2;
  *((void *)this + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = result;
  return result;
}

void sub_19208D5A0(void *a1)
{
  __cxa_begin_catch(a1);
  ctu::Http::HttpSession_impl::Deleter::operator()(v1);
  __cxa_rethrow();
}

void sub_19208D5B4(_Unwind_Exception *a1)
{
}

void ctu::Http::HttpSession_impl::Deleter::operator()(uint64_t a1)
{
  if (a1)
  {
    v1[0] = MEMORY[0x1E4F143A8];
    v1[1] = 3221225472;
    v1[2] = ___ZN3ctu4Http16HttpSession_impl7DeleterclEPS1__block_invoke;
    v1[3] = &__block_descriptor_40_e5_v8__0l;
    v1[4] = a1;
    ctu::Http::HttpSession_impl::addOperation(a1, (uint64_t)v1);
  }
}

void ctu::Http::HttpSession_impl::addOperation(uint64_t a1, uint64_t a2)
{
  unint64_t v6 = 0xAAAAAAAAAAAAAAAALL;
  ctu::ns::AutoPool::AutoPool((ctu::ns::AutoPool *)&v6);
  uint64_t v4 = [MEMORY[0x1E4F28B48] blockOperationWithBlock:a2];
  id v5 = *(void **)(a1 + 16);
  if (v5) {
    [v5 addOperation:v4];
  }
  ctu::ns::AutoPool::~AutoPool((void **)&v6);
}

void sub_19208D704(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::ns::AutoPool::~AutoPool((void **)va);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3ctu4Http16HttpSession_impl7DeleterclEPS1__block_invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 136))();
  }
  return result;
}

void ctu::Http::HttpSession_impl::~HttpSession_impl(ctu::Http::HttpSession_impl *this)
{
  *(void *)this = &unk_1EE2F7570;
  int v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    [v2 invalidateAndCancel];
    int v2 = (void *)*((void *)this + 1);
  }

  *((void *)this + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
  *((void *)this + 3) = 0;

  *((void *)this + 2) = 0;
  ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef((const void **)this + 20);
  if (*((char *)this + 159) < 0) {
    operator delete(*((void **)this + 17));
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef((const void **)this + 11);
  if (*((char *)this + 87) < 0) {
    operator delete(*((void **)this + 8));
  }
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef((const void **)this + 4);
}

{
  void *v1;
  uint64_t vars8;

  ctu::Http::HttpSession_impl::~HttpSession_impl(this);

  operator delete(v1);
}

uint64_t ctu::Http::HttpSession_impl::setSSLProtocolLimitation(uint64_t this, SSLProtocol a2, SSLProtocol a3)
{
  *(_DWORD *)(this + 124) = a2;
  *(_DWORD *)(this + 128) = a3;
  return this;
}

uint64_t ctu::Http::HttpSession_impl::setSharedConfiguration(uint64_t this, char a2)
{
  *(unsigned char *)(this + 132) = a2;
  return this;
}

std::string *ctu::Http::HttpSession_impl::setBackgroundConfiguration(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 136), a2);
}

void ctu::Http::HttpSession_impl::setBackgroundConfigurationWithUniqueIdentifier(ctu::Http::HttpSession_impl *this)
{
  int v2 = objc_opt_new();
  std::string::__assign_external((std::string *)((char *)this + 136), (const std::string::value_type *)[((id)objc_msgSend(v2, "UUIDString")) UTF8String]);
}

const void **ctu::Http::HttpSession_impl::setProxyServer(const void **result, uint64_t a2, unsigned int a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    uint64_t v4 = result;
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::size_type v5 = *(void *)(a2 + 8);
      if (!v5) {
        return result;
      }
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, v5);
    }
    else
    {
      if (!*(unsigned char *)(a2 + 23)) {
        return result;
      }
      std::string __p = *(std::string *)a2;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string v20 = __p;
    }
    CFDictionaryRef v18 = 0;
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&valuePtr, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
    }
    else {
      std::string valuePtr = v20;
    }
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_std::string valuePtr = &valuePtr;
    }
    else {
      p_std::string valuePtr = (std::string *)valuePtr.__r_.__value_.__r.__words[0];
    }
    if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex size = HIBYTE(valuePtr.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex size = valuePtr.__r_.__value_.__l.__size_;
    }
    CFStringRef v9 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const UInt8 *)p_valuePtr, size, 0x8000100u, 0);
    if (v9)
    {
      CFDictionaryRef v10 = v18;
      CFDictionaryRef v18 = (CFDictionaryRef)v9;
      std::string::size_type v19 = (std::string::size_type)v10;
      ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef((const void **)&v19);
    }
    if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(valuePtr.__r_.__value_.__l.__data_);
    }
    std::string::size_type v17 = (std::string::size_type)v18;
    CFDictionaryRef v18 = 0;
    ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef((const void **)&v18);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    v20.__r_.__value_.__r.__words[0] = 0;
    valuePtr.__r_.__value_.__r.__words[0] = a3;
    CFNumberRef v11 = CFNumberCreate(v6, kCFNumberLongLongType, &valuePtr);
    if (v11)
    {
      std::string::size_type v12 = v20.__r_.__value_.__r.__words[0];
      v20.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
      valuePtr.__r_.__value_.__r.__words[0] = v12;
      ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)&valuePtr.__r_.__value_.__l.__data_);
    }
    std::string::size_type v13 = v20.__r_.__value_.__r.__words[0];
    std::string::size_type v19 = v20.__r_.__value_.__r.__words[0];
    v20.__r_.__value_.__r.__words[0] = 0;
    ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)&v20.__r_.__value_.__l.__data_);
    std::string::size_type v14 = *MEMORY[0x1E4F190E0];
    valuePtr.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4F190D8];
    valuePtr.__r_.__value_.__l.__size_ = v14;
    uint64_t v15 = *MEMORY[0x1E4F190C8];
    valuePtr.__r_.__value_.__r.__words[2] = *MEMORY[0x1E4F190C0];
    uint64_t v23 = v15;
    v20.__r_.__value_.__r.__words[0] = v17;
    v20.__r_.__value_.__l.__size_ = v13;
    v20.__r_.__value_.__r.__words[2] = v17;
    std::string::size_type v21 = v13;
    CFDictionaryRef v18 = CFDictionaryCreate(v6, (const void **)&valuePtr.__r_.__value_.__l.__data_, (const void **)&v20.__r_.__value_.__l.__data_, 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::operator=(v4 + 4, (CFTypeRef *)&v18);
    ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef((const void **)&v18);
    ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)&v19);
    return ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef((const void **)&v17);
  }
  return result;
}

void sub_19208DAFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, int a16, const void *a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(a1);
}

uint64_t ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get(uint64_t a1)
{
  return *(void *)a1;
}

const void **ctu::Http::HttpSession_impl::setProxySettings(uint64_t a1, CFTypeRef *a2)
{
  return ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::operator=((const void **)(a1 + 32), a2);
}

const void **ctu::Http::HttpSession_impl::setTLSPolicyName(const void **this, const __CFString *a2)
{
  if (a2) {
    return ctu::cf::CFSharedRef<__CFString const>::operator=(this + 20, a2);
  }
  return this;
}

const void **ctu::cf::CFSharedRef<__CFString const>::operator=(const void **a1, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  uint64_t v4 = *a1;
  *a1 = cf;
  CFAllocatorRef v6 = v4;
  ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef(&v6);
  return a1;
}

const void **ctu::Http::HttpSession_impl::setServiceType(const void **this, const __CFString *a2)
{
  return ctu::cf::CFSharedRef<__CFString const>::operator=(this + 11, a2);
}

std::string *ctu::Http::HttpSession_impl::setSourceIdentifier(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 40), a2);
}

std::string *ctu::Http::HttpSession_impl::setSourceApplicationBundleIdentifier(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 64), a2);
}

uint64_t ctu::Http::HttpSession_impl::setOnDemand(uint64_t this, char a2)
{
  *(unsigned char *)(this + 96) = a2;
  return this;
}

void ctu::Http::HttpSession_impl::setAllowCellularAccess(ctu::Http::HttpSession_impl *this, char a2)
{
  uint64_t v4 = operator new(1uLL);
  *uint64_t v4 = a2;
  std::string::size_type v5 = operator new(0x20uLL);
  *std::string::size_type v5 = &unk_1EE2F9028;
  v5[1] = 0;
  void v5[2] = 0;
  v5[3] = v4;
  CFAllocatorRef v6 = (std::__shared_weak_count *)*((void *)this + 14);
  *((void *)this + 13) = v4;
  *((void *)this + 14) = v5;
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_19208DCA4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t ctu::Http::HttpSession_impl::setConnectionCacheCellPurgeTimeout(uint64_t this, int a2)
{
  *(_DWORD *)(this + 120) = a2;
  return this;
}

uint64_t ctu::Http::HttpSession_impl::setWaitForConnectivityTimeout(uint64_t this, int a2)
{
  *(_DWORD *)(this + 168) = a2;
  return this;
}

uint64_t ctu::Http::HttpSession_impl::setAllowUltraConstrained(uint64_t this, char a2)
{
  *(unsigned char *)(this + 172) = a2;
  return this;
}

void ctu::Http::HttpSession_impl::getBackgroundIdentifier(ctu::Http::HttpSession_impl *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 159) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 17), *((void *)this + 18));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 136);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 19);
  }
}

void ctu::Http::HttpRequest::create(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  CFDictionaryRef v10 = *(const void **)a4;
  if (!*(void *)a4)
  {
    ctu::Http::HttpSession_impl::createSession((ctu::Http::HttpSession_impl *)&v20);
    CFNumberRef v11 = *(std::__shared_weak_count **)(a4 + 8);
    std::string::size_type v12 = (const void *)v20;
    *(_OWORD *)a4 = v20;
    if (v11)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      CFDictionaryRef v10 = *(const void **)a4;
    }
    else
    {
      CFDictionaryRef v10 = v12;
    }
  }
  std::string::size_type v13 = *(std::__shared_weak_count **)(a4 + 8);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::size_type v14 = operator new(0xE0uLL);
  uint64_t v15 = v14;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = v14 + 1;
  uint64_t v14[2] = 0;
  v14[3] = 0;
  *std::string::size_type v14 = &unk_1EE2F7610;
  v14[1] = &unk_1EE2F7760;
  if (v10
  {
    v15[4] = v17;
    void v15[5] = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    v15[4] = 0;
    void v15[5] = 0;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v15 + 2, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *((_OWORD *)v15 + 3) = *(_OWORD *)a2;
    v15[8] = *(void *)(a2 + 16);
  }
  v15[13] = 0;
  *(_OWORD *)(v15 + 1ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0u;
  *(_OWORD *)(v15 + 9) = 0u;
  *((_DWORD *)v15 + 28) = a1;
  std::map<std::string,std::string,ctu::Http::case_insensitive_key_comparer,std::allocator<std::pair<std::string const,std::string>>>::map[abi:ne180100](v15 + 15, a3);
  v15[18] = 0x403E000000000000;
  *(_OWORD *)(v15 + 19) = 0u;
  *(_OWORD *)(v15 + 2ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0u;
  *(_OWORD *)(v15 + 23) = 0u;
  v15[25] = 6;
  v15[26] = 0;
  *((unsigned char *)v15 + 216) = 0;
  CFDictionaryRef v18 = (std::__shared_weak_count *)operator new(0x20uLL);
  v18->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE2F8E30;
  v18->__shared_owners_ = 0;
  v18->__shared_weak_owners_ = 0;
  v18[1].__vftable = (std::__shared_weak_count_vtbl *)v15;
  std::string::size_type v19 = (std::__shared_weak_count *)v15[3];
  if (v19)
  {
    if (v19->__shared_owners_ != -1) {
      goto LABEL_22;
    }
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v18->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v15[2] = v16;
    v15[3] = v18;
    std::__shared_weak_count::__release_weak(v19);
  }
  else
  {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v18->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v15[2] = v16;
    v15[3] = v18;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v18);
LABEL_22:
  if (v13)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  *a5 = v15;
  a5[1] = v18;
}

{
  void (***v10)(void *__return_ptr);
  std::__shared_weak_count *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  char v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  void v18[2];

  if (*(void *)a4
  {
    CFNumberRef v11 = *(std::__shared_weak_count **)(a4 + 8);
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (**v10)(v18);
    std::string::size_type v12 = v18[0];
    std::string::size_type v13 = (std::__shared_weak_count *)v18[1];
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    uint64_t v16 = v12;
    std::string::size_type v17 = v13;
    if (v13)
    {
      std::string::size_type v14 = 0;
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v15 = v13;
      goto LABEL_11;
    }
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    std::string::size_type v17 = 0;
  }
  std::string::size_type v14 = 1;
LABEL_11:
  ctu::Http::HttpRequest::create(a1, a2, a3, (uint64_t)&v16, a5);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if ((v14 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
}

void sub_19208DF68(_Unwind_Exception *exception_object)
{
  uint64_t v4 = (std::__shared_weak_count *)v2[5];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  std::string::size_type v5 = (std::__shared_weak_count *)v2[3];
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  operator delete(v2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_19208E024()
{
  if (!v0) {
    JUMPOUT(0x19208E000);
  }
  JUMPOUT(0x19208DFF8);
}

void sub_19208E17C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

void ctu::Http::HttpSessionRequest::Deleter::operator()(uint64_t a1)
{
  if (a1)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = ___ZN3ctu4Http18HttpSessionRequest7DeleterclEPS1__block_invoke;
    v2[3] = &__block_descriptor_40_e5_v8__0l;
    v2[4] = a1;
    uint64_t v1 = *(void *)(a1 + 32);
    if (v1) {
      ctu::Http::HttpSession_impl::addOperation(v1, (uint64_t)v2);
    }
  }
}

uint64_t ___ZN3ctu4Http18HttpSessionRequest7DeleterclEPS1__block_invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 256))();
  }
  return result;
}

uint64_t ctu::Http::HttpSessionRequest::getHttpSession@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 40);
  *a2 = *(void *)(this + 32);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void ctu::Http::asString(unsigned int a1@<W0>, void *a2@<X8>)
{
  unint64_t v5 = 0xAAAAAAAAAAAAAAAALL;
  ctu::ns::AutoPool::AutoPool((ctu::ns::AutoPool *)&v5);
  if (a1 > 7) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = off_1E57443B8[a1];
  }
  std::string::basic_string[abi:ne180100]<0>(a2, (char *)[(__CFString *)v4 cStringUsingEncoding:4]);
  ctu::ns::AutoPool::~AutoPool((void **)&v5);
}

void sub_19208E2EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::ns::AutoPool::~AutoPool((void **)va);
  _Unwind_Resume(a1);
}

void ctu::Http::HttpSessionRequest::~HttpSessionRequest(ctu::Http::HttpSessionRequest *this)
{
  *(void *)this = &unk_1EE2F7610;
  *((void *)this + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = &unk_1EE2F7760;
  uint64_t v2 = *(void **)(*((void *)this + 4) + 24);
  if (v2)
  {
    uint64_t v3 = (void *)*((void *)this + 24);
    if (v3) {
      [v2 removeCallbackFor:[v3 taskIdentifier]];
    }
  }

  *((void *)this + 24) = 0;
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 5);
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }

  unint64_t v5 = (const void *)*((void *)this + 23);
  if (v5) {
    _Block_release(v5);
  }
  CFAllocatorRef v6 = (const void *)*((void *)this + 22);
  if (v6) {
    _Block_release(v6);
  }
  uint64_t v7 = (const void *)*((void *)this + 21);
  if (v7) {
    _Block_release(v7);
  }
  dispatch_time_t v8 = (const void *)*((void *)this + 20);
  if (v8) {
    _Block_release(v8);
  }
  CFStringRef v9 = *((void *)this + 19);
  if (v9) {
    dispatch_release(v9);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,ctu::Http::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 120, *((void **)this + 16));
  ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::~SharedRef((const void **)this + 13);
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef((const void **)this + 12);
  CFDictionaryRef v10 = (void *)*((void *)this + 9);
  if (v10)
  {
    *((void *)this + 10) = v10;
    operator delete(v10);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  CFNumberRef v11 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  std::string::size_type v12 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
}

{
  void *v1;
  uint64_t vars8;

  ctu::Http::HttpSessionRequest::~HttpSessionRequest(this);

  operator delete(v1);
}

void non-virtual thunk to'ctu::Http::HttpSessionRequest::~HttpSessionRequest(ctu::Http::HttpSessionRequest *this)
{
}

{
  void *v1;
  uint64_t vars8;

  ctu::Http::HttpSessionRequest::~HttpSessionRequest((ctu::Http::HttpSessionRequest *)((char *)this - 8));

  operator delete(v1);
}

void ctu::Http::HttpSessionRequest::start(void *a1, uint64_t a2)
{
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3321888768;
  _OWORD v11[2] = ___ZN3ctu4Http18HttpSessionRequest5startENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE_block_invoke;
  void v11[3] = &__block_descriptor_80_e8_32c112_ZTSKZN3ctu4Http18HttpSessionRequest5startENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3__0_e5_v8__0l;
  uint64_t v4 = a1[2];
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  *(void *)&long long v8 = a1;
  *((void *)&v8 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v4;
  if (!v3 || (CFAllocatorRef v6 = std::__shared_weak_count::lock(v3), (v9 = v6) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    CFAllocatorRef v6 = v9;
    long long v12 = v8;
    std::string::size_type v13 = v9;
    if (!v9) {
      goto LABEL_7;
    }
  }
  else
  {
    std::string __p = *(std::string *)a2;
    *(void *)&long long v12 = a1;
    *((void *)&v12 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v4;
    std::string::size_type v13 = v6;
  }
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_7:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v14, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v14 = __p;
  }
  uint64_t v7 = a1[4];
  if (v7) {
    ctu::Http::HttpSession_impl::addOperation(v7, (uint64_t)v11);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
}

void sub_19208E618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21)
{
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  ctu::Http::HttpSessionRequest::start(std::string)::$_0::~$_0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ___ZN3ctu4Http18HttpSessionRequest5startENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(char *)(a1 + 79) < 0) {
    std::string::__init_copy_ctor_external(&v69, *(const std::string::value_type **)(a1 + 56), *(void *)(a1 + 64));
  }
  else {
    std::string v69 = *(std::string *)(a1 + 56);
  }
  std::string::size_type v4 = *(void *)(a1 + 40);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v70 = 0xAAAAAAAAAAAAAAAALL;
  ctu::ns::AutoPool::AutoPool((ctu::ns::AutoPool *)&v70);
  uint64_t v5 = *(void *)(v2 + 32);
  if (!v5 || !*(void *)(v2 + 152) || !*(void *)(v2 + 160) || !*(void *)(v5 + 16)) {
    goto LABEL_179;
  }
  CFAllocatorRef v6 = (const std::string::value_type **)(v2 + 48);
  if (*(char *)(v2 + 71) < 0)
  {
    std::string::size_type v7 = *(void *)(v2 + 56);
    if (!v7) {
      goto LABEL_80;
    }
    CFStringRef URLString = (CFStringRef)0xAAAAAAAAAAAAAAAALL;
    std::string::__init_copy_ctor_external(&v74, *v6, v7);
  }
  else
  {
    if (!*(unsigned char *)(v2 + 71)) {
      goto LABEL_80;
    }
    *(_OWORD *)&v74.__r_.__value_.__l.__data_ = *(_OWORD *)v6;
    v74.__r_.__value_.__r.__words[2] = *(void *)(v2 + 64);
    CFStringRef URLString = (CFStringRef)0xAAAAAAAAAAAAAAAALL;
  }
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v76, v74.__r_.__value_.__l.__data_, v74.__r_.__value_.__l.__size_);
  }
  else {
    std::string v76 = v74;
  }
  CFStringRef v78 = 0;
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v77, v76.__r_.__value_.__l.__data_, v76.__r_.__value_.__l.__size_);
  }
  else {
    std::string v77 = v76;
  }
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    CFStringRef v9 = &v77;
  }
  else {
    CFStringRef v9 = (std::string *)v77.__r_.__value_.__r.__words[0];
  }
  if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    CFIndex size = HIBYTE(v77.__r_.__value_.__r.__words[2]);
  }
  else {
    CFIndex size = v77.__r_.__value_.__l.__size_;
  }
  CFStringRef v11 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const UInt8 *)v9, size, 0x8000100u, 0);
  if (v11)
  {
    CFStringRef v12 = v78;
    CFStringRef v78 = v11;
    v79[0] = v12;
    ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef(v79);
  }
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v77.__r_.__value_.__l.__data_);
  }
  CFStringRef URLString = v78;
  CFStringRef v78 = 0;
  ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef((const void **)&v78);
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v76.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v74.__r_.__value_.__l.__data_);
  }
  if (URLString) {
    std::string::size_type v13 = ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get;
  }
  else {
    std::string::size_type v13 = 0;
  }
  if (v13)
  {
    CFURLRef v73 = (CFURLRef)0xAAAAAAAAAAAAAAAALL;
    CFURLRef v73 = CFURLCreateWithString(v8, URLString, 0);
    if (v73) {
      std::string v14 = ctu::SharedRef<__CFURL const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFURL const>::get;
    }
    else {
      std::string v14 = 0;
    }
    if (!v14)
    {
      uint64_t v16 = 0;
      int v36 = 2;
      goto LABEL_101;
    }
    id v15 = objc_alloc(MEMORY[0x1E4F28E88]);
    uint64_t v16 = (void *)[v15 initWithURL:v73 cachePolicy:1 timeoutInterval:*(double *)(v2 + 144)];
    if (!v16)
    {
      int v36 = 3;
      goto LABEL_101;
    }
    std::string::basic_string[abi:ne180100]<0>(&v77, "Connection");
    std::string::size_type v17 = (void *)(v2 + 120);
    uint64_t v18 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,ctu::Http::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(v2 + 120, (uint64_t)&v77);
    std::string::size_type v19 = (void *)(v2 + 128);
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v77.__r_.__value_.__l.__data_);
    }
    if (v19 != (void *)v18) {
      [MEMORY[0x1E4F290C0] setProperty:MEMORY[0x1E4F1CC38] forKey:*MEMORY[0x1E4F18F30] inRequest:v16];
    }
    CFTypeRef cf = 0;
    Mutable = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!Mutable) {
      goto LABEL_98;
    }
    std::string::size_type v21 = (void *)*v17;
    if ((void *)*v17 != v19)
    {
      do
      {
        v79[0] = 0;
        int v22 = *((char *)v21 + 55);
        if (v22 >= 0) {
          uint64_t v23 = (const UInt8 *)(v21 + 4);
        }
        else {
          uint64_t v23 = (const UInt8 *)v21[4];
        }
        if (v22 >= 0) {
          CFIndex v24 = *((unsigned __int8 *)v21 + 55);
        }
        else {
          CFIndex v24 = v21[5];
        }
        CFStringRef v25 = CFStringCreateWithBytes(v8, v23, v24, 0x8000100u, 0);
        CFStringRef v78 = 0;
        v79[0] = v25;
        int v26 = *((char *)v21 + 79);
        if (v26 >= 0) {
          uint64_t v27 = (const UInt8 *)(v21 + 7);
        }
        else {
          uint64_t v27 = (const UInt8 *)v21[7];
        }
        if (v26 >= 0) {
          CFIndex v28 = *((unsigned __int8 *)v21 + 79);
        }
        else {
          CFIndex v28 = v21[8];
        }
        CFStringRef v29 = CFStringCreateWithBytes(v8, v27, v28, 0x8000100u, 0);
        CFStringRef v78 = v29;
        v77.__r_.__value_.__l.__data_ = (std::string::pointer)v79[0];
        if (v79[0]) {
          CFRetain(v79[0]);
        }
        v76.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
        if (v29)
        {
          CFRetain(v29);
          if (v77.__r_.__value_.__r.__words[0]) {
            CFDictionaryAddValue(Mutable, v77.__r_.__value_.__l.__data_, v29);
          }
        }
        ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)&v76.__r_.__value_.__l.__data_);
        ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)&v77.__r_.__value_.__l.__data_);
        ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)&v78);
        ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(v79);
        uint64_t v30 = (void *)v21[1];
        if (v30)
        {
          do
          {
            unint64_t v31 = v30;
            uint64_t v30 = (void *)*v30;
          }
          while (v30);
        }
        else
        {
          do
          {
            unint64_t v31 = (void *)v21[2];
            BOOL v32 = *v31 == (void)v21;
            std::string::size_type v21 = v31;
          }
          while (!v32);
        }
        std::string::size_type v21 = v31;
      }
      while (v31 != v19);
    }
    CFTypeRef v33 = cf;
    CFTypeRef cf = Mutable;
    v77.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
    ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::~SharedRef((const void **)&v77.__r_.__value_.__l.__data_);
    if (!(cf
         ? ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get
         : 0))
      goto LABEL_98;
    CFTypeRef v71 = cf;
    if (cf)
    {
      CFRetain(cf);
      uint64_t v35 = v71;
    }
    else
    {
      uint64_t v35 = 0;
    }
    [v16 setAllHTTPHeaderFields:v35];
    ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::~SharedRef(&v71);
    uint64_t v37 = *(int *)(v2 + 112);
    if (v37 > 7) {
      BOOL v38 = 0;
    }
    else {
      BOOL v38 = off_1E57443B8[v37];
    }
    [v16 setHTTPMethod:v38];
    if (*(_DWORD *)(v2 + 112) != 3 || *(void *)(v2 + 72) == *(void *)(v2 + 80))
    {
      int v36 = 1;
      goto LABEL_100;
    }
    std::string::basic_string[abi:ne180100]<0>(&v77, "CONTENT-ENCODING");
    uint64_t v39 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,ctu::Http::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(v2 + 120, (uint64_t)&v77);
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v77.__r_.__value_.__l.__data_);
    }
    if (v19 == (void *)v39) {
      goto LABEL_95;
    }
    MEMORY[0x192FED2D0](&v76);
    boost::algorithm::to_upper_copy<std::string>(&v77, v39 + 56, (std::locale *)&v76);
    int v40 = std::string::compare(&v77, "GZIP");
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v77.__r_.__value_.__l.__data_);
    }
    std::locale::~locale((std::locale *)&v76);
    if (v40)
    {
LABEL_95:
      uint64_t v41 = [MEMORY[0x1E4F1C9B8] dataWithBytes:*(void *)(v2 + 72) length:*(void *)(v2 + 80) - *(void *)(v2 + 72)];
      int v36 = 1;
    }
    else
    {
      memset(&v77, 0, sizeof(v77));
      BOOL v68 = ctu::Compression::Compress(v2 + 72, (unint64_t *)&v77);
      if (v68)
      {
        uint64_t v41 = [MEMORY[0x1E4F1C9B8] dataWithBytes:v77.__r_.__value_.__r.__words[0] length:v77.__r_.__value_.__l.__size_ - v77.__r_.__value_.__r.__words[0]];
        int v36 = 1;
      }
      else
      {
        uint64_t v41 = 0;
        int v36 = 3;
      }
      if (v77.__r_.__value_.__r.__words[0])
      {
        v77.__r_.__value_.__l.__size_ = v77.__r_.__value_.__r.__words[0];
        operator delete(v77.__r_.__value_.__l.__data_);
      }
      if (!v68) {
        goto LABEL_100;
      }
    }
    if (v41) {
      [v16 setHTTPBody:v41];
    }
    else {
LABEL_98:
    }
      int v36 = 3;
LABEL_100:
    ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::~SharedRef(&cf);
LABEL_101:
    ctu::SharedRef<__CFURL const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFURL const>::~SharedRef((const void **)&v73);
    ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef((const void **)&URLString);
    if (v36 != 1)
    {
      if (v16) {

      }
      goto LABEL_180;
    }
    if (!v16) {
      goto LABEL_183;
    }
    id v42 = v16;
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    {
      if (!v69.__r_.__value_.__l.__size_) {
        goto LABEL_111;
      }
      unint64_t v43 = (std::string *)v69.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (!*((unsigned char *)&v69.__r_.__value_.__s + 23)) {
        goto LABEL_111;
      }
      unint64_t v43 = &v69;
    }
    [v16 setBoundInterfaceIdentifier:[NSString stringWithCString:v43 encoding:4]];
LABEL_111:
    uint64_t v44 = *(void *)(v2 + 32);
    id v45 = *(id *)(v44 + 8);
    if (v45) {
      goto LABEL_170;
    }
    BOOL v46 = (void *)(v44 + 136);
    if (*(char *)(v44 + 159) < 0)
    {
      if (!*(void *)(v44 + 144)) {
        goto LABEL_118;
      }
      BOOL v46 = (void *)*v46;
    }
    else if (!*(unsigned char *)(v44 + 159))
    {
LABEL_118:
      if (*(unsigned char *)(v44 + 132)) {
        uint64_t v48 = (void *)[MEMORY[0x1E4F290F0] defaultSessionConfiguration];
      }
      else {
        uint64_t v48 = (void *)[MEMORY[0x1E4F290F0] ephemeralSessionConfiguration];
      }
      goto LABEL_121;
    }
    uint64_t v47 = [NSString stringWithFormat:@"%s", v46];
    uint64_t v48 = (void *)[MEMORY[0x1E4F290F0] backgroundSessionConfigurationWithIdentifier:v47];
LABEL_121:
    uint64_t v49 = v48;
    uint64_t v50 = *(void *)(v2 + 32);
    if (*(void *)(v50 + 160)) {
      uint64_t v51 = ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get;
    }
    else {
      uint64_t v51 = 0;
    }
    if (v51)
    {
      [v48 set_tlsTrustPinningPolicyName:];
      uint64_t v50 = *(void *)(v2 + 32);
    }
    if (*(unsigned char *)(v50 + 172))
    {
      [v49 _setAllowsUCA:1];
      uint64_t v50 = *(void *)(v2 + 32);
    }
    if (*(void *)(v50 + 88)) {
      uint64_t v52 = ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get;
    }
    else {
      uint64_t v52 = 0;
    }
    if (v52)
    {
      [v49 set_CTDataConnectionServiceType:];
      uint64_t v50 = *(void *)(v2 + 32);
    }
    if (*(void *)(v50 + 32)) {
      unint64_t v53 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    }
    else {
      unint64_t v53 = 0;
    }
    if (v53)
    {
      [v49 setConnectionProxyDictionary:];
    }
    else
    {
      CFStringRef v57 = *(const __CFString **)(v50 + 88);
      if (v57) {
        uint64_t v58 = ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get;
      }
      else {
        uint64_t v58 = 0;
      }
      if (v58 && CFStringCompare(v57, @"kCTDataConnectionServiceTypeInternet", 0)) {
        [v49 setConnectionProxyDictionary:MEMORY[0x1E4F1CC08]];
      }
    }
    uint64_t v54 = *(void *)(v2 + 32);
    if (*(_DWORD *)(v54 + 124))
    {
      [v49 setTLSMinimumSupportedProtocol:];
      uint64_t v54 = *(void *)(v2 + 32);
    }
    if (*(_DWORD *)(v54 + 128))
    {
      [v49 setTLSMaximumSupportedProtocol:];
      uint64_t v54 = *(void *)(v2 + 32);
    }
    uint64_t v55 = *(unsigned __int8 **)(v54 + 104);
    if (v55)
    {
      [v49 setAllowsCellularAccess:*v55];
      uint64_t v54 = *(void *)(v2 + 32);
    }
    unint64_t v56 = (void *)(v54 + 40);
    if (*(char *)(v54 + 63) < 0)
    {
      if (!*(void *)(v54 + 48)) {
        goto LABEL_156;
      }
      unint64_t v56 = (void *)*v56;
    }
    else if (!*(unsigned char *)(v54 + 63))
    {
LABEL_156:
      unint64_t v59 = (void *)(v54 + 64);
      if (*(char *)(v54 + 87) < 0)
      {
        if (!*(void *)(v54 + 72))
        {
LABEL_162:
          unsigned int v60 = *(_DWORD *)(v54 + 120);
          if (v60)
          {
            [v49 set_connectionCacheCellPurgeTimeout:(double)v60];
            uint64_t v54 = *(void *)(v2 + 32);
          }
          if (*(_DWORD *)(v54 + 168))
          {
            [v49 setWaitsForConnectivity:1];
            LODWORD(v6ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = *(_DWORD *)(*(void *)(v2 + 32) + 168);
            [v49 setTimeoutIntervalForResource:(double)v61];
          }
          uint64_t v62 = objc_opt_new();
          uint64_t v63 = *(void *)(v2 + 32);
          *(void *)(v63 + 24) = v62;
          if (v62)
          {
            id v45 = (id)[MEMORY[0x1E4F290E0] sessionWithConfiguration:v49 delegate:v62 delegateQueue:*(void *)(v63 + 16)];
            uint64_t v63 = *(void *)(v2 + 32);
            *(void *)(v63 + 8) = v45;
          }
          else
          {
            id v45 = *(id *)(v63 + 8);
          }
          if (v45)
          {
LABEL_170:
            id v64 = (id)[v45 dataTaskWithRequest:v16];
            *(void *)(v2 + 192) = v64;
            if (v64)
            {
              char v65 = *(void **)(*(void *)(v2 + 32) + 24);
              v77.__r_.__value_.__r.__words[0] = v4;
              v77.__r_.__value_.__l.__size_ = (std::string::size_type)v3;
              if (v3)
              {
                atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
                id v64 = *(id *)(v2 + 192);
              }
              [v65 addCallbackHandler:&v77 for:[v64 taskIdentifier]];
              if (v77.__r_.__value_.__l.__size_) {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v77.__r_.__value_.__l.__size_);
              }

              if (*(unsigned char *)(v2 + 216)) {
                *(void *)(v2 + 208) = [v16 mutableCopy];
              }
              [*(id *)(v2 + 192) resume];
              goto LABEL_183;
            }
            goto LABEL_179;
          }

          *(void *)(*(void *)(v2 + 32) + 24) = 0;
LABEL_179:
          int v36 = 3;
          goto LABEL_180;
        }
        unint64_t v59 = (void *)*v59;
      }
      else if (!*(unsigned char *)(v54 + 87))
      {
        goto LABEL_162;
      }
      [v49 set_sourceApplicationBundleIdentifier:[NSString stringWithCString:v59 encoding:[NSString defaultCStringEncoding]]];
      uint64_t v54 = *(void *)(v2 + 32);
      goto LABEL_162;
    }
    [v49 set_sourceApplicationSecondaryIdentifier:[NSString stringWithCString:v56 encoding:[NSString defaultCStringEncoding]]];
    uint64_t v54 = *(void *)(v2 + 32);
    goto LABEL_156;
  }
  ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef((const void **)&URLString);
LABEL_80:
  int v36 = 2;
LABEL_180:
  uint64_t v66 = (ctu::Http::HttpResponseConcrete *)operator new(0x68uLL);
  ctu::Http::HttpResponseConcrete::HttpResponseConcrete(v66, 0);
  uint64_t v67 = (std::__shared_weak_count *)operator new(0x20uLL);
  v67->__shared_owners_ = 0;
  v67->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE2F8EA0;
  v67->__shared_weak_owners_ = 0;
  v67[1].__vftable = (std::__shared_weak_count_vtbl *)v66;
  *((_DWORD *)v66 + 2) = v36;
  v77.__r_.__value_.__r.__words[0] = (std::string::size_type)v66;
  v77.__r_.__value_.__l.__size_ = (std::string::size_type)v67;
  atomic_fetch_add_explicit(&v67->__shared_owners_, 1uLL, memory_order_relaxed);
  (*(void (**)(uint64_t, std::string *))(*(void *)v2 + 288))(v2, &v77);
  if (v77.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v77.__r_.__value_.__l.__size_);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v67);
LABEL_183:
  ctu::ns::AutoPool::~AutoPool((void **)&v70);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v69.__r_.__value_.__l.__data_);
  }
}

void sub_19208F0D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, __int16 a19, char a20,char a21,int a22,const void *a23,const void *a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,const void *a31,std::locale a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  int v40 = *(void **)(v38 - 128);
  if (v40)
  {
    *(void *)(v38 - 120) = v40;
    operator delete(v40);
  }
  ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::~SharedRef(&a23);
  ctu::SharedRef<__CFURL const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFURL const>::~SharedRef(&a24);
  ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef(&a31);
  ctu::ns::AutoPool::~AutoPool(&a18);
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_19208F288()
{
  if (!v0) {
    JUMPOUT(0x19208F270);
  }
  JUMPOUT(0x19208F268);
}

void __copy_helper_block_e8_32c112_ZTSKZN3ctu4Http18HttpSessionRequest5startENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3__0(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v3 = *(void *)(a2 + 48);
  *(void *)(a1 + 48) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::size_type v4 = (std::string *)(a1 + 56);
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
}

void sub_19208F304(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c112_ZTSKZN3ctu4Http18HttpSessionRequest5startENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3__0(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

uint64_t ctu::Http::HttpSessionRequest::start(std::string)::$_0::~$_0(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

uint64_t ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t ctu::SharedRef<__CFURL const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFURL const>::get(uint64_t a1)
{
  return *(void *)a1;
}

void boost::algorithm::to_upper_copy<std::string>(std::string *a1, uint64_t a2, std::locale *this)
{
  int v3 = *(char *)(a2 + 23);
  if (v3 >= 0) {
    std::string::size_type v4 = (char *)a2;
  }
  else {
    std::string::size_type v4 = *(char **)a2;
  }
  if (v3 >= 0) {
    uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v5 = *(void *)(a2 + 8);
  }
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = 0;
  if (v5)
  {
    CFAllocatorRef v8 = (std::locale::id *)MEMORY[0x1E4FBA258];
    do
    {
      char v9 = *v4;
      CFDictionaryRef v10 = std::locale::use_facet(this, v8);
      std::string::value_type v11 = ((uint64_t (*)(const std::locale::facet *, void))v10->__vftable[1].~facet)(v10, v9);
      std::string::push_back(a1, v11);
      ++v4;
      --v5;
    }
    while (v5);
  }
}

void sub_19208F474(void *a1)
{
  __cxa_begin_catch(a1);
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  __cxa_rethrow();
}

void sub_19208F490(_Unwind_Exception *a1)
{
}

void ctu::Http::HttpSessionRequest::handleResponse_sync(uint64_t a1, uint64_t *a2)
{
  std::string::size_type v4 = *(const void **)(a1 + 160);
  if (v4) {
    uint64_t v5 = _Block_copy(v4);
  }
  else {
    uint64_t v5 = 0;
  }
  CFAllocatorRef v6 = *(NSObject **)(a1 + 152);
  if (v6 && *(void *)(a1 + 160))
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3321888768;
    block[2] = ___ZN3ctu4Http18HttpSessionRequest19handleResponse_syncENSt3__110shared_ptrINS0_12HttpResponseEEE_block_invoke;
    block[3] = &__block_descriptor_56_e8_32c89_ZTSN8dispatch5blockIU13block_pointerFvNSt3__110shared_ptrIN3ctu4Http12HttpResponseEEEEEE40c51_ZTSNSt3__110shared_ptrIN3ctu4Http12HttpResponseEEE_e5_v8__0l;
    if (v5) {
      std::string::size_type v7 = _Block_copy(v5);
    }
    else {
      std::string::size_type v7 = 0;
    }
    uint64_t v9 = *a2;
    CFAllocatorRef v8 = (std::__shared_weak_count *)a2[1];
    aBlocunint64_t k = v7;
    uint64_t v12 = v9;
    std::string::size_type v13 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    dispatch_async(v6, block);
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
  }
  if (v5) {
    _Block_release(v5);
  }
}

void ___ZN3ctu4Http18HttpSessionRequest19handleResponse_syncENSt3__110shared_ptrINS0_12HttpResponseEEE_block_invoke(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v4 = a1[5];
  int v3 = (std::__shared_weak_count *)a1[6];
  uint64_t v5 = v4;
  CFAllocatorRef v6 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(v2 + 16))(v2, &v5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_19208F614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void *__copy_helper_block_e8_32c89_ZTSN8dispatch5blockIU13block_pointerFvNSt3__110shared_ptrIN3ctu4Http12HttpResponseEEEEEE40c51_ZTSNSt3__110shared_ptrIN3ctu4Http12HttpResponseEEE(void *a1, void *a2)
{
  uint64_t result = (void *)a2[4];
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  uint64_t v6 = a2[5];
  uint64_t v5 = a2[6];
  a1[4] = result;
  a1[5] = v6;
  a1[6] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c89_ZTSN8dispatch5blockIU13block_pointerFvNSt3__110shared_ptrIN3ctu4Http12HttpResponseEEEEEE40c51_ZTSNSt3__110shared_ptrIN3ctu4Http12HttpResponseEEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  int v3 = *(const void **)(a1 + 32);
  if (v3) {
    _Block_release(v3);
  }
}

void non-virtual thunk to'ctu::Http::HttpSessionRequest::handleResponse_sync(uint64_t a1, uint64_t *a2)
{
}

void ctu::Http::HttpSessionRequest::handleDataSent_sync(ctu::Http::HttpSessionRequest *this, int a2, int a3, int a4)
{
  CFAllocatorRef v8 = (const void *)*((void *)this + 22);
  if (v8) {
    uint64_t v9 = _Block_copy(v8);
  }
  else {
    uint64_t v9 = 0;
  }
  CFDictionaryRef v10 = *((void *)this + 19);
  if (v10 && *((void *)this + 22))
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3321888768;
    block[2] = ___ZN3ctu4Http18HttpSessionRequest19handleDataSent_syncEiii_block_invoke;
    block[3] = &__block_descriptor_52_e8_32c45_ZTSN8dispatch5blockIU13block_pointerFviiiEEE_e5_v8__0l;
    std::string::value_type v11 = v9 ? _Block_copy(v9) : 0;
    aBlocunint64_t k = v11;
    int v14 = a2;
    int v15 = a3;
    int v16 = a4;
    dispatch_async(v10, block);
    if (aBlock) {
      _Block_release(aBlock);
    }
  }
  if (v9) {
    _Block_release(v9);
  }
}

uint64_t ___ZN3ctu4Http18HttpSessionRequest19handleDataSent_syncEiii_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44), *(unsigned int *)(a1 + 48));
}

void *__copy_helper_block_e8_32c45_ZTSN8dispatch5blockIU13block_pointerFviiiEEE(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)(a2 + 32);
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  *(void *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c45_ZTSN8dispatch5blockIU13block_pointerFviiiEEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  if (v1) {
    _Block_release(v1);
  }
}

void non-virtual thunk to'ctu::Http::HttpSessionRequest::handleDataSent_sync(ctu::Http::HttpSessionRequest *this, int a2, int a3, int a4)
{
}

void ctu::Http::HttpSessionRequest::handleDataReceived_sync(ctu::Http::HttpSessionRequest *this, int a2, int a3)
{
  uint64_t v6 = (const void *)*((void *)this + 21);
  if (v6) {
    std::string::size_type v7 = _Block_copy(v6);
  }
  else {
    std::string::size_type v7 = 0;
  }
  CFAllocatorRef v8 = *((void *)this + 19);
  if (v8 && *((void *)this + 21))
  {
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3321888768;
    _OWORD v10[2] = ___ZN3ctu4Http18HttpSessionRequest23handleDataReceived_syncEii_block_invoke;
    void v10[3] = &__block_descriptor_48_e8_32c44_ZTSN8dispatch5blockIU13block_pointerFviiEEE_e5_v8__0l;
    uint64_t v9 = v7 ? _Block_copy(v7) : 0;
    aBlocunint64_t k = v9;
    int v12 = a2;
    int v13 = a3;
    dispatch_async(v8, v10);
    if (aBlock) {
      _Block_release(aBlock);
    }
  }
  if (v7) {
    _Block_release(v7);
  }
}

uint64_t ___ZN3ctu4Http18HttpSessionRequest23handleDataReceived_syncEii_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44));
}

void *__copy_helper_block_e8_32c44_ZTSN8dispatch5blockIU13block_pointerFviiEEE(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)(a2 + 32);
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  *(void *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c44_ZTSN8dispatch5blockIU13block_pointerFviiEEE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  if (v1) {
    _Block_release(v1);
  }
}

void non-virtual thunk to'ctu::Http::HttpSessionRequest::handleDataReceived_sync(ctu::Http::HttpSessionRequest *this, int a2, int a3)
{
}

uint64_t ctu::Http::HttpSessionRequest::setProxyServer(uint64_t a1)
{
  return (***(uint64_t (****)(void))(a1 + 32))(*(void *)(a1 + 32));
}

const void **ctu::Http::HttpSessionRequest::setProxySettings(uint64_t a1, const void **a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *a2;
  uint64_t v5 = v3;
  if (v3) {
    CFRetain(v3);
  }
  (*(void (**)(uint64_t, const void **))(*(void *)v2 + 8))(v2, &v5);
  return ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(&v5);
}

void sub_19208FA4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t ctu::Http::HttpSessionRequest::setSSLProtocolLimitation(ctu::Http::HttpSessionRequest *this, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)this + 4) + 16))(*((void *)this + 4), a2, a3);
}

uint64_t ctu::Http::HttpSessionRequest::setSharedConfiguration(ctu::Http::HttpSessionRequest *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 4) + 24))();
}

uint64_t ctu::Http::HttpSessionRequest::setBackgroundConfiguration(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 32))();
}

uint64_t ctu::Http::HttpSessionRequest::setBackgroundConfigurationWithUniqueIdentifier(ctu::Http::HttpSessionRequest *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 4) + 40))();
}

uint64_t ctu::Http::HttpSessionRequest::setTLSPolicyName(uint64_t this, const __CFString *a2)
{
  if (a2) {
    return (*(uint64_t (**)(void))(**(void **)(this + 32) + 48))();
  }
  return this;
}

uint64_t ctu::Http::HttpSessionRequest::setServiceType(ctu::Http::HttpSessionRequest *this, const __CFString *a2)
{
  return (*(uint64_t (**)(void, const __CFString *))(**((void **)this + 4) + 56))(*((void *)this + 4), a2);
}

uint64_t ctu::Http::HttpSessionRequest::setSourceIdentifier(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 64))();
}

uint64_t ctu::Http::HttpSessionRequest::setSourceApplicationBundleIdentifier(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 72))();
}

uint64_t ctu::Http::HttpSessionRequest::setOnDemand(ctu::Http::HttpSessionRequest *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 4) + 80))();
}

uint64_t ctu::Http::HttpSessionRequest::setAllowCellularAccess(ctu::Http::HttpSessionRequest *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 4) + 88))();
}

uint64_t ctu::Http::HttpSessionRequest::getTLSNegotiatedCipherSuite(ctu::Http::HttpSessionRequest *this)
{
  uint64_t v1 = (void *)*((void *)this + 24);
  if (v1) {
    return [v1 _TLSNegotiatedCipherSuite];
  }
  else {
    return 0xFFFFLL;
  }
}

uint64_t ctu::Http::HttpSessionRequest::setConnectionCacheCellPurgeTimeout(ctu::Http::HttpSessionRequest *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 4) + 96))();
}

uint64_t ctu::Http::HttpSessionRequest::setWaitForConnectivityTimeout(ctu::Http::HttpSessionRequest *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 4) + 112))();
}

uint64_t ctu::Http::HttpSessionRequest::setAllowUltraConstrained(ctu::Http::HttpSessionRequest *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 4) + 120))();
}

uint64_t ctu::Http::HttpSessionRequest::setRedirection(uint64_t this, char a2)
{
  *(unsigned char *)(this + 216) = a2;
  return this;
}

uint64_t ctu::Http::HttpSessionRequest::setMaxAllowedRedirects(uint64_t this, int a2)
{
  if ((a2 & 0x80000000) == 0) {
    *(_DWORD *)(this + 200) = a2;
  }
  return this;
}

NSURLRequest *ctu::Http::HttpSessionRequest::handleWillSendRequest_sync(ctu::Http::HttpSessionRequest *this, NSURLRequest *a2, NSURLResponse *a3)
{
  int v3 = *((_DWORD *)this + 51);
  if (v3 >= *((_DWORD *)this + 50)) {
    return 0;
  }
  uint64_t v4 = a2;
  if (a3 && *((unsigned char *)this + 216) && *((void *)this + 26))
  {
    uint64_t v6 = [(NSURLRequest *)a2 URL];
    uint64_t v4 = (NSURLRequest *)(id)[*((id *)this + 26) mutableCopy];
    [(NSURLRequest *)v4 setURL:v6];
    int v3 = *((_DWORD *)this + 51);
  }
  *((_DWORD *)this + 5ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v3 + 1;
  return v4;
}

NSURLRequest *non-virtual thunk to'ctu::Http::HttpSessionRequest::handleWillSendRequest_sync(ctu::Http::HttpSessionRequest *this, NSURLRequest *a2, NSURLResponse *a3)
{
  return ctu::Http::HttpSessionRequest::handleWillSendRequest_sync((ctu::Http::HttpSessionRequest *)((char *)this - 8), a2, a3);
}

void ctu::Http::HttpSessionRequest::registerCallbackQueue(ctu::Http::HttpSessionRequest *this, dispatch_object_t object)
{
  if (object) {
    dispatch_retain(object);
  }
  uint64_t v4 = *((void *)this + 19);
  *((void *)this + 19) = object;
  if (v4)
  {
    dispatch_release(v4);
  }
}

void ctu::Http::HttpSessionRequest::registerCompletionCodeblock(uint64_t a1, void *aBlock)
{
  if (aBlock) {
    int v3 = _Block_copy(aBlock);
  }
  else {
    int v3 = 0;
  }
  uint64_t v4 = *(const void **)(a1 + 160);
  *(void *)(a1 + 160) = v3;
  if (v4) {
    _Block_release(v4);
  }
}

void ctu::Http::HttpSessionRequest::registerDataReceiveCodeblock(uint64_t a1, void *aBlock)
{
  if (aBlock) {
    int v3 = _Block_copy(aBlock);
  }
  else {
    int v3 = 0;
  }
  uint64_t v4 = *(const void **)(a1 + 168);
  *(void *)(a1 + 168) = v3;
  if (v4) {
    _Block_release(v4);
  }
}

void ctu::Http::HttpSessionRequest::registerDataSendCodeblock(uint64_t a1, void *aBlock)
{
  if (aBlock) {
    int v3 = _Block_copy(aBlock);
  }
  else {
    int v3 = 0;
  }
  uint64_t v4 = *(const void **)(a1 + 176);
  *(void *)(a1 + 176) = v3;
  if (v4) {
    _Block_release(v4);
  }
}

void *ctu::Http::HttpSessionRequest::setRequestBody(void *result, const void **a2)
{
  uint64_t v2 = result + 9;
  if (result + 9 != a2)
  {
    int v3 = result;
    uint64_t v4 = (char *)*a2;
    uint64_t v5 = (char *)a2[1];
    size_t v6 = v5 - (unsigned char *)*a2;
    unint64_t v7 = result[11];
    CFAllocatorRef v8 = (char *)result[9];
    if (v7 - (unint64_t)v8 >= v6)
    {
      std::string::value_type v11 = (unsigned char *)result[10];
      size_t v12 = v11 - v8;
      if (v11 - v8 < v6)
      {
        int v13 = &v4[v12];
        if (v11 != v8)
        {
          uint64_t result = memmove((void *)result[9], *a2, v12);
          CFAllocatorRef v8 = (char *)v3[10];
        }
        if (v5 != v13) {
          uint64_t result = memmove(v8, v13, v5 - v13);
        }
        int v14 = &v8[v5 - v13];
        goto LABEL_21;
      }
    }
    else
    {
      if (v8)
      {
        result[10] = v8;
        operator delete(v8);
        unint64_t v7 = 0;
        void *v2 = 0;
        v2[1] = 0;
        v2[2] = 0;
      }
      if ((v6 & 0x8000000000000000) != 0) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = 2 * v7;
      if (2 * v7 <= v6) {
        uint64_t v9 = v6;
      }
      if (v7 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v10 = v9;
      }
      uint64_t result = std::vector<char>::__vallocate[abi:ne180100](v2, v10);
      CFAllocatorRef v8 = (char *)v3[10];
    }
    if (v5 != v4) {
      uint64_t result = memmove(v8, v4, v6);
    }
    int v14 = &v8[v6];
LABEL_21:
    v3[10] = v14;
  }
  return result;
}

const void **ctu::Http::HttpSessionRequest::setClientCert(ctu::Http::HttpSessionRequest *this, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  uint64_t v4 = (const void *)*((void *)this + 12);
  *((void *)this + 12) = cf;
  size_t v6 = v4;
  return ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(&v6);
}

const void **ctu::Http::HttpSessionRequest::setServerPinnedCerts(ctu::Http::HttpSessionRequest *this, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  uint64_t v4 = (const void *)*((void *)this + 13);
  *((void *)this + 13) = cf;
  size_t v6 = v4;
  return ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::~SharedRef(&v6);
}

uint64_t ctu::Http::HttpSessionRequest::setTimeout(uint64_t this, double a2)
{
  *(double *)(this + 144) = a2;
  return this;
}

void ctu::Http::HttpSessionRequest::setValidateCertsCallback(uint64_t a1, void *aBlock)
{
  if (aBlock) {
    int v3 = _Block_copy(aBlock);
  }
  else {
    int v3 = 0;
  }
  uint64_t v4 = *(const void **)(a1 + 184);
  *(void *)(a1 + 184) = v3;
  if (v4) {
    _Block_release(v4);
  }
}

void *ctu::Http::HttpSessionRequest::getClientCert@<X0>(CFTypeRef *this@<X0>, void *a2@<X8>)
{
  return ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::SharedRef(a2, this[12]);
}

void *ctu::Http::HttpSessionRequest::getServerPinnedCerts@<X0>(CFTypeRef *this@<X0>, void *a2@<X8>)
{
  return ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::SharedRef(a2, this[13]);
}

uint64_t ctu::Http::HttpSessionRequest::executeValidateCertsCallback(ctu::Http::HttpSessionRequest *this, __SecTrust *a2)
{
  uint64_t v2 = *((void *)this + 23);
  if (v2) {
    return (*(uint64_t (**)(uint64_t, __SecTrust *))(v2 + 16))(v2, a2);
  }
  else {
    return 1;
  }
}

void *non-virtual thunk to'ctu::Http::HttpSessionRequest::getClientCert@<X0>(CFTypeRef *this@<X0>, void *a2@<X8>)
{
  return ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::SharedRef(a2, this[11]);
}

void *non-virtual thunk to'ctu::Http::HttpSessionRequest::getServerPinnedCerts@<X0>(CFTypeRef *this@<X0>, void *a2@<X8>)
{
  return ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::SharedRef(a2, this[12]);
}

uint64_t non-virtual thunk to'ctu::Http::HttpSessionRequest::executeValidateCertsCallback(ctu::Http::HttpSessionRequest *this, __SecTrust *a2)
{
  uint64_t v2 = *((void *)this + 22);
  if (v2) {
    return (*(uint64_t (**)(uint64_t, __SecTrust *))(v2 + 16))(v2, a2);
  }
  else {
    return 1;
  }
}

const void **ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::operator=(const void **a1, CFTypeRef *a2)
{
  if (a1 != a2)
  {
    CFTypeRef v3 = *a2;
    if (*a2) {
      CFRetain(*a2);
    }
    uint64_t v4 = *a1;
    *a1 = v3;
    size_t v6 = v4;
    ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(&v6);
  }
  return a1;
}

void *ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::SharedRef(void *a1, CFTypeRef cf)
{
  *a1 = cf;
  if (cf) {
    CFRetain(cf);
  }
  return a1;
}

const void **ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::~SharedRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get(uint64_t a1)
{
  return *(void *)a1;
}

const void **ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::~SharedRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

const void **ctu::SharedRef<__CFURL const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFURL const>::~SharedRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void *ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::SharedRef(void *a1, CFTypeRef cf)
{
  *a1 = cf;
  if (cf) {
    CFRetain(cf);
  }
  return a1;
}

uint64_t *std::map<std::string,std::string,ctu::Http::case_insensitive_key_comparer,std::allocator<std::pair<std::string const,std::string>>>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::string,ctu::Http::case_insensitive_key_comparer,std::allocator<std::pair<std::string const,std::string>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(a1, *(long long **)a2, (long long *)(a2 + 8));
  return a1;
}

void sub_192090304(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,ctu::Http::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::string,ctu::Http::case_insensitive_key_comparer,std::allocator<std::pair<std::string const,std::string>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(uint64_t *result, long long *a2, long long *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    size_t v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,ctu::Http::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(v5, v6, (uint64_t)(v4 + 2), v4 + 2);
      unint64_t v7 = (long long *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          CFAllocatorRef v8 = v7;
          unint64_t v7 = *(long long **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          CFAllocatorRef v8 = (long long *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,ctu::Http::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(uint64_t **a1, uint64_t *a2, uint64_t a3, long long *a4)
{
  std::string::value_type v11 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  size_t v12 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  size_t v6 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,ctu::Http::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  unint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    CFAllocatorRef v8 = (uint64_t **)v6;
    memset(v10, 170, sizeof(v10));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,ctu::Http::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>((uint64_t)a1, a4, v10);
    std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    unint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,ctu::Http::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, uint64_t a5)
{
  BOOL v9 = a1 + 1;
  if (a1 + 1 == (uint64_t **)a2
    || (*(char *)(a5 + 23) >= 0 ? (std::string::value_type v11 = (const char *)a5) : (std::string::value_type v11 = *(const char **)a5),
        *((char *)a2 + 55) >= 0 ? (size_t v12 = (const char *)(a2 + 4)) : (size_t v12 = (const char *)a2[4]),
        strcasecmp(v11, v12) < 0))
  {
    int v13 = (uint64_t *)*a2;
    if (*a1 == a2)
    {
      int v15 = a2;
LABEL_29:
      if (v13)
      {
        *a3 = v15;
        return v15 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v13)
    {
      int v14 = (uint64_t *)*a2;
      do
      {
        int v15 = v14;
        int v14 = (uint64_t *)v14[1];
      }
      while (v14);
    }
    else
    {
      uint64_t v18 = a2;
      do
      {
        int v15 = (uint64_t *)v18[2];
        BOOL v19 = *v15 == (void)v18;
        uint64_t v18 = v15;
      }
      while (v19);
    }
    if (*((char *)v15 + 55) >= 0) {
      long long v20 = (const char *)(v15 + 4);
    }
    else {
      long long v20 = (const char *)v15[4];
    }
    if (*(char *)(a5 + 23) >= 0) {
      std::string::size_type v21 = (const char *)a5;
    }
    else {
      std::string::size_type v21 = *(const char **)a5;
    }
    if (strcasecmp(v20, v21) < 0) {
      goto LABEL_29;
    }
  }
  else
  {
    if ((strcasecmp(v12, v11) & 0x80000000) == 0)
    {
      *a3 = a2;
      *a4 = a2;
      return (uint64_t *)a4;
    }
    uint64_t v16 = a2[1];
    if (v16)
    {
      std::string::size_type v17 = (uint64_t *)a2[1];
      do
      {
        a4 = (uint64_t **)v17;
        std::string::size_type v17 = (uint64_t *)*v17;
      }
      while (v17);
    }
    else
    {
      int v22 = a2;
      do
      {
        a4 = (uint64_t **)v22[2];
        BOOL v19 = *a4 == v22;
        int v22 = (uint64_t *)a4;
      }
      while (!v19);
    }
    if (a4 == v9
      || (*((char *)a4 + 55) >= 0 ? (uint64_t v23 = (const char *)(a4 + 4)) : (uint64_t v23 = (const char *)a4[4]),
          strcasecmp(v11, v23) < 0))
    {
      if (v16)
      {
        *a3 = (uint64_t *)a4;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
      return (uint64_t *)a4;
    }
  }

  return std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,ctu::Http::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, a3, a5);
}

std::string *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,ctu::Http::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  memset(a3, 170, 24);
  size_t v6 = (char *)operator new(0x50uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  uint64_t result = std::pair<std::string const,std::string>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_1920906A4(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,ctu::Http::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    if (*(char *)(a3 + 23) >= 0) {
      size_t v6 = (const char *)a3;
    }
    else {
      size_t v6 = *(const char **)a3;
    }
    do
    {
      while (1)
      {
        unint64_t v7 = v4;
        size_t v10 = (void *)v4[4];
        CFAllocatorRef v8 = v4 + 4;
        BOOL v9 = v10;
        std::string::value_type v11 = (const char *)(*((char *)v8 + 23) >= 0 ? v8 : v9);
        if ((strcasecmp(v6, v11) & 0x80000000) == 0) {
          break;
        }
        uint64_t v4 = (void *)*v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_15;
        }
      }
      if ((strcasecmp(v11, v6) & 0x80000000) == 0) {
        break;
      }
      uint64_t v5 = v7 + 1;
      uint64_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    unint64_t v7 = (void *)(a1 + 8);
  }
LABEL_15:
  *a2 = v7;
  return v5;
}

std::string *std::pair<std::string const,std::string>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  uint64_t v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_1920907E4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,ctu::Http::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,ctu::Http::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,ctu::Http::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string,std::string>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__shared_ptr_pointer<ctu::Http::HttpSession_impl *,ctu::Http::HttpSession_impl::Deleter,std::allocator<ctu::Http::HttpSession_impl>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<ctu::Http::HttpSession_impl *,ctu::Http::HttpSession_impl::Deleter,std::allocator<ctu::Http::HttpSession_impl>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<ctu::Http::HttpSession_impl *,ctu::Http::HttpSession_impl::Deleter,std::allocator<ctu::Http::HttpSession_impl>>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

void std::__shared_ptr_pointer<BOOL *,std::shared_ptr<BOOL>::__shared_ptr_default_delete<BOOL,BOOL>,std::allocator<BOOL>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<BOOL *,std::shared_ptr<BOOL>::__shared_ptr_default_delete<BOOL,BOOL>,std::allocator<BOOL>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 24);
  if (v1) {
    operator delete(v1);
  }
}

uint64_t std::__shared_ptr_pointer<BOOL *,std::shared_ptr<BOOL>::__shared_ptr_default_delete<BOOL,BOOL>,std::allocator<BOOL>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<ctu::Http::HttpSessionRequest *,ctu::Http::HttpSessionRequest::Deleter,std::allocator<ctu::Http::HttpSessionRequest>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<ctu::Http::HttpSessionRequest *,ctu::Http::HttpSessionRequest::Deleter,std::allocator<ctu::Http::HttpSessionRequest>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<ctu::Http::HttpSessionRequest *,ctu::Http::HttpSessionRequest::Deleter,std::allocator<ctu::Http::HttpSessionRequest>>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

void std::__shared_ptr_pointer<ctu::Http::HttpResponseConcrete *,std::shared_ptr<ctu::Http::HttpResponseConcrete>::__shared_ptr_default_delete<ctu::Http::HttpResponseConcrete,ctu::Http::HttpResponseConcrete>,std::allocator<ctu::Http::HttpResponseConcrete>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<ctu::Http::HttpResponseConcrete *,std::shared_ptr<ctu::Http::HttpResponseConcrete>::__shared_ptr_default_delete<ctu::Http::HttpResponseConcrete,ctu::Http::HttpResponseConcrete>,std::allocator<ctu::Http::HttpResponseConcrete>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<ctu::Http::HttpResponseConcrete *,std::shared_ptr<ctu::Http::HttpResponseConcrete>::__shared_ptr_default_delete<ctu::Http::HttpResponseConcrete,ctu::Http::HttpResponseConcrete>,std::allocator<ctu::Http::HttpResponseConcrete>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,ctu::Http::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  long long v4 = *(char *)(a2 + 23) >= 0 ? (const char *)a2 : *(const char **)a2;
  uint64_t v5 = a1 + 8;
  do
  {
    if (*(char *)(v3 + 55) >= 0) {
      long long v6 = (const char *)(v3 + 32);
    }
    else {
      long long v6 = *(const char **)(v3 + 32);
    }
    int v7 = strcasecmp(v6, v4);
    CFAllocatorRef v8 = (uint64_t *)(v3 + 8);
    if (v7 >= 0)
    {
      CFAllocatorRef v8 = (uint64_t *)v3;
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v2 == v5) {
    return v2;
  }
  BOOL v9 = *(char *)(v5 + 55) >= 0 ? (const char *)(v5 + 32) : *(const char **)(v5 + 32);
  if (strcasecmp(v4, v9) < 0) {
    return v2;
  }
  return v5;
}

void ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(const void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

void ctu::Http::HttpResponseConcrete::~HttpResponseConcrete(ctu::Http::HttpResponseConcrete *this)
{
  *(void *)this = &unk_1EE2F77B8;
  ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::~SharedRef((const void **)this + 11);
  ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::~SharedRef((const void **)this + 10);
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,ctu::Http::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 16, *((void **)this + 3));
}

{
  void *v1;
  uint64_t vars8;

  ctu::Http::HttpResponseConcrete::~HttpResponseConcrete(this);

  operator delete(v1);
}

ctu::Http::HttpResponseConcrete *ctu::Http::HttpResponseConcrete::HttpResponseConcrete(ctu::Http::HttpResponseConcrete *this, NSHTTPURLResponse *a2)
{
  *(void *)this = &unk_1EE2F77B8;
  *((void *)this + 3) = 0;
  uint64_t v3 = (char *)this + 24;
  *((void *)this + 2) = (char *)this + 24;
  long long v4 = (char *)this + 16;
  *((_DWORD *)this + 2) = 0;
  *((void *)this + 4) = 0;
  *((_DWORD *)this + 10) = -1;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_WORD *)this + 48) = -1;
  if (a2)
  {
    long long v6 = [(NSHTTPURLResponse *)a2 allHeaderFields];
    BOOL v19 = 0;
    uint64_t v20 = 0;
    context[1] = &v19;
    uint64_t v18 = &v19;
    context[0] = &v18;
    if (v6)
    {
      CFDictionaryApplyFunction((CFDictionaryRef)v6, (CFDictionaryApplierFunction)ctu::cf::_Applier_InsertMapDefault<std::string,std::string,std::insert_iterator<std::map<std::string,std::string,ctu::Http::case_insensitive_key_comparer,std::allocator<std::pair<std::string const,std::string>>>>>, context);
      CFAllocatorRef v8 = (void *)*((void *)this + 2);
      int v7 = (void *)*((void *)this + 3);
      BOOL v9 = v19;
      *((void *)this + 2) = v18;
      *((void *)this + 3) = v9;
      uint64_t v18 = v8;
      BOOL v19 = v7;
      uint64_t v10 = *((void *)this + 4);
      uint64_t v11 = v20;
      *((void *)this + 4) = v20;
      uint64_t v20 = v10;
      size_t v12 = v9 + 2;
      if (v11) {
        int v13 = v12;
      }
      else {
        int v13 = v4;
      }
      void *v13 = v3;
      BOOL v14 = v10 == 0;
      int v15 = &v18;
      if (!v14) {
        int v15 = v7 + 2;
      }
      *int v15 = &v19;
    }
    else
    {
      int v7 = 0;
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,ctu::Http::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v18, v7);
    *((_DWORD *)this + 10) = [(NSHTTPURLResponse *)a2 statusCode];
  }
  return this;
}

void sub_192090D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,ctu::Http::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a12, a13);
  ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::~SharedRef((const void **)(v13 + 88));
  ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::~SharedRef(v15);
  if (*(char *)(v13 + 79) < 0) {
    operator delete(*(void **)(v13 + 56));
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,ctu::Http::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v14, *v16);
  _Unwind_Resume(a1);
}

const void **ctu::cf::CFSharedRef<__CFData const>::operator=(const void **a1, CFTypeRef *a2)
{
  CFTypeRef v3 = *a2;
  if (*a2) {
    CFRetain(*a2);
  }
  long long v4 = *a1;
  *a1 = v3;
  long long v6 = v4;
  ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::~SharedRef(&v6);
  return a1;
}

unint64_t ctu::Http::HttpResponseConcrete::getResponseString@<X0>(ctu::Http::HttpResponseConcrete *this@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = *((void *)this + 10);
  if (result) {
    uint64_t v5 = ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get;
  }
  else {
    uint64_t v5 = 0;
  }
  if (!v5)
  {
    *(void *)a2 = 0;
    *((void *)a2 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
    *((void *)a2 + 2) = 0;
    return result;
  }
  BytePtr = CFDataGetBytePtr((CFDataRef)result);
  unint64_t result = CFDataGetLength(*((CFDataRef *)this + 10));
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unint64_t v7 = result;
  if (result >= 0x17)
  {
    uint64_t v8 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v8 = result | 7;
    }
    uint64_t v9 = v8 + 1;
    unint64_t result = (unint64_t)operator new(v8 + 1);
    *((void *)a2 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v7;
    *((void *)a2 + 2) = v9 | 0x8000000000000000;
    *(void *)a2 = result;
    a2 = (unsigned char *)result;
    goto LABEL_13;
  }
  a2[23] = result;
  if (result)
  {
    do
    {
LABEL_13:
      char v10 = *BytePtr++;
      *a2++ = v10;
      --v7;
    }
    while (v7);
  }
  *a2 = 0;
  return result;
}

const void **ctu::cf::CFSharedRef<__CFError>::operator=(const void **a1, CFTypeRef *a2)
{
  CFTypeRef v3 = *a2;
  if (*a2) {
    CFRetain(*a2);
  }
  long long v4 = *a1;
  *a1 = v3;
  long long v6 = v4;
  ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::~SharedRef(&v6);
  return a1;
}

uint64_t ctu::Http::HttpResponseConcrete::getResult(ctu::Http::HttpResponseConcrete *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t ctu::Http::HttpResponseConcrete::getHttpResponseCode(ctu::Http::HttpResponseConcrete *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t ctu::Http::HttpResponseConcrete::getRawErrorCode(ctu::Http::HttpResponseConcrete *this)
{
  return *((void *)this + 6);
}

const void **ctu::Http::HttpResponseConcrete::getResponseCFData@<X0>(const void **this@<X0>, const void **a2@<X8>)
{
  return ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::SharedRef(a2, this + 10);
}

uint64_t *ctu::Http::HttpResponseConcrete::getResponseHeaders@<X0>(ctu::Http::HttpResponseConcrete *this@<X0>, uint64_t *a2@<X8>)
{
  return std::map<std::string,std::string,ctu::Http::case_insensitive_key_comparer,std::allocator<std::pair<std::string const,std::string>>>::map[abi:ne180100](a2, (uint64_t)this + 16);
}

void ctu::Http::HttpResponseConcrete::getResponseStatusLine(ctu::Http::HttpResponseConcrete *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 79) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 7), *((void *)this + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 56);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 9);
  }
}

CFTypeRef ctu::Http::HttpResponseConcrete::getErrorRef@<X0>(ctu::Http::HttpResponseConcrete *this@<X0>, void *a2@<X8>)
{
  CFTypeRef result = (CFTypeRef)*((void *)this + 11);
  *a2 = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

uint64_t ctu::Http::HttpResponseConcrete::getTLSNegotiatedCipherSuite(ctu::Http::HttpResponseConcrete *this)
{
  return *((unsigned __int16 *)this + 48);
}

const void **ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::~SharedRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void ctu::cf::_Applier_InsertMapDefault<std::string,std::string,std::insert_iterator<std::map<std::string,std::string,ctu::Http::case_insensitive_key_comparer,std::allocator<std::pair<std::string const,std::string>>>>>(__CFString *cf, __CFString *a2, uint64_t a3)
{
  *(_OWORD *)BOOL v19 = 0u;
  long long v20 = 0u;
  *(_OWORD *)uint64_t v18 = 0u;
  if (ctu::cf::assign((std::string *)v18, cf))
  {
    ctu::cf::assign((std::string *)&v19[1], a2);
    std::pair<std::string const,std::string>::pair[abi:ne180100]<std::string,std::string,0>(&v15, (long long *)v18);
    long long v6 = *(uint64_t ***)a3;
    uint64_t v5 = *(uint64_t **)(a3 + 8);
    uint64_t v23 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    CFIndex v24 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    unint64_t v7 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,ctu::Http::case_insensitive_key_comparer,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(v6, v5, &v24, &v23, (uint64_t)&v15);
    uint64_t v8 = *v7;
    if (!*v7)
    {
      unint64_t v22 = 0xAAAAAAAAAAAAAA00;
      uint64_t v9 = (char *)operator new(0x50uLL);
      v21[0] = v9;
      v21[1] = v6 + 1;
      char v10 = (std::string *)(v9 + 32);
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v10, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
        uint64_t v11 = (uint64_t *)v21[0];
      }
      else
      {
        *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)&v15.__r_.__value_.__l.__data_;
        *((void *)v9 + 6) = *((void *)&v15.__r_.__value_.__l + 2);
        uint64_t v11 = (uint64_t *)v9;
      }
      *(_OWORD *)(v9 + ++*(_DWORD *)(this + 56) = *(_OWORD *)__p;
      *((void *)v9 + 9) = v17;
      __p[1] = 0;
      uint64_t v17 = 0;
      __p[0] = 0;
      LOBYTE(v22) = 1;
      std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__insert_node_at(v6, (uint64_t)v24, v7, v11);
      uint64_t v8 = (uint64_t *)v21[0];
      v21[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v21, 0);
    }
    *(void *)(a3 + 8) = v8;
    size_t v12 = (uint64_t *)v8[1];
    if (v12)
    {
      do
      {
        uint64_t v13 = v12;
        size_t v12 = (uint64_t *)*v12;
      }
      while (v12);
    }
    else
    {
      do
      {
        uint64_t v13 = (uint64_t *)v8[2];
        BOOL v14 = *v13 == (void)v8;
        uint64_t v8 = v13;
      }
      while (!v14);
    }
    *(void *)(a3 + 8) = v13;
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(v20) < 0) {
    operator delete(v19[1]);
  }
  if (SHIBYTE(v19[0]) < 0) {
    operator delete(v18[0]);
  }
}

void sub_192091168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v15 - 72, 0);
  std::pair<std::string,std::string>::~pair((uint64_t)&a9);
  std::pair<std::string,std::string>::~pair((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void *ctu::ns::AutoPool::AutoPool(void *result, void *a2)
{
  *CFTypeRef result = *a2;
  *a2 = 0;
  return result;
}

{
  *CFTypeRef result = *a2;
  *a2 = 0;
  return result;
}

void **ctu::ns::AutoPool::operator=(void **a1, void **a2)
{
  CFTypeRef v3 = *a2;
  *a2 = 0;
  long long v4 = *a1;
  *a1 = v3;
  long long v6 = v4;
  ctu::ns::AutoPool::~AutoPool(&v6);
  return a1;
}

uint64_t *ctu::ns::swap(uint64_t *this, ctu::ns::AutoPool *a2, ctu::ns::AutoPool *a3)
{
  uint64_t v3 = *this;
  *this = *(void *)a2;
  *(void *)a2 = v3;
  return this;
}

std::string *ctu::LogMessageBuffer::LogMessageBuffer(std::string *this, std::string *__str)
{
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = 0u;
  p_CFIndex size = (uint64_t *)&this[1].__r_.__value_.__l.__size_;
  this[2].__r_.__value_.__r.__words[0] = 0;
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this->__r_.__value_.__r.__words[2] = 0u;
  std::string::pointer data = __str[1].__r_.__value_.__l.__data_;
  if (data)
  {
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)(data + 8), &v19);
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      operator delete(this->__r_.__value_.__l.__data_);
    }
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v19;
    this->__r_.__value_.__r.__words[2] = v20;
  }
  else
  {
    std::string::operator=(this, __str);
  }
  if (this != __str)
  {
    CFIndex size = (long long *)__str[1].__r_.__value_.__l.__size_;
    long long v6 = (long long *)__str[1].__r_.__value_.__r.__words[2];
    std::string::pointer v8 = this[2].__r_.__value_.__l.__data_;
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v6 - (char *)size) >> 3);
    char v10 = (std::string *)this[1].__r_.__value_.__l.__size_;
    if (0xAAAAAAAAAAAAAAABLL * ((v8 - (std::string::pointer)v10) >> 3) < v9)
    {
      if (v10)
      {
        std::vector<std::string>::__clear[abi:ne180100](p_size);
        operator delete((void *)*p_size);
        std::string::pointer v8 = 0;
        *p_CFIndex size = 0;
        p_size[1] = 0;
        p_size[2] = 0;
      }
      if (v9 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)v8 >> 3);
      uint64_t v12 = 2 * v11;
      if (2 * v11 <= v9) {
        uint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)v6 - (char *)size) >> 3);
      }
      if (v11 >= 0x555555555555555) {
        unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v13 = v12;
      }
      std::vector<std::string>::__vallocate[abi:ne180100](p_size, v13);
      BOOL v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&this[2], size, v6, (std::string *)this[1].__r_.__value_.__r.__words[2]);
      goto LABEL_19;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(this[1].__r_.__value_.__r.__words[2] - (void)v10) >> 3) < v9)
    {
      uint64_t v15 = (std::string *)((char *)size + 8 * ((uint64_t)(this[1].__r_.__value_.__r.__words[2] - (void)v10) >> 3));
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>((std::string *)size, v15, v10);
      BOOL v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&this[2], (long long *)v15, v6, (std::string *)this[1].__r_.__value_.__r.__words[2]);
LABEL_19:
      this[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v14;
      return this;
    }
    uint64_t v16 = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>((std::string *)size, (std::string *)v6, v10);
    for (size_t i = (std::string *)this[1].__r_.__value_.__r.__words[2]; i != v16; --i)
    {
      if (SHIBYTE(i[-1].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(i[-1].__r_.__value_.__l.__data_);
      }
    }
    this[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v16;
  }
  return this;
}

void sub_192091454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 40) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  uint64_t v12 = *(void *)(v9 + 24);
  *(void *)(v9 + 24) = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  if (*(char *)(v9 + 23) < 0) {
    operator delete(*(void **)v9);
  }
  _Unwind_Resume(a1);
}

uint64_t ctu::LogMessageBuffer::LogMessageBuffer(uint64_t a1, ctu::LogMessageBuffer *a2)
{
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  ctu::LogMessageBuffer::swap((ctu::LogMessageBuffer *)a1, a2);
  return a1;
}

{
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  ctu::LogMessageBuffer::swap((ctu::LogMessageBuffer *)a1, a2);
  return a1;
}

__n128 ctu::LogMessageBuffer::createWithFormat@<Q0>(ctu::LogMessageBuffer *this@<X0>, uint64_t a2@<X8>, ...)
{
  va_start(va, a2);
  *(void *)(a2 + 48) = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 32) = v3;
  *(_OWORD *)a2 = v3;
  ctu::LogMessageBuffer::vCreateWithFormat(this, va, a2);
  return result;
}

BOOL ctu::LogMessageBuffer::empty(ctu::LogMessageBuffer *this)
{
  if (*((void *)this + 3)) {
    return 0;
  }
  if (*((char *)this + 23) < 0) {
    uint64_t v2 = *((void *)this + 1);
  }
  else {
    uint64_t v2 = *((unsigned __int8 *)this + 23);
  }
  return v2 == 0;
}

uint64_t ctu::LogMessageBuffer::takeMetadata(ctu::LogMessageBuffer *this)
{
  return (uint64_t)this + 32;
}

uint64_t ctu::LogMessageBuffer::operator std::ostream &(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (!result)
  {
    long long v3 = (uint64_t *)operator new(0x108uLL);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v3);
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v3;
    if (v4)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      long long v3 = *(uint64_t **)(a1 + 24);
    }
    uint64_t v5 = *v3;
    *(_DWORD *)((char *)v3 + *(void *)(*v3 - 24) + 8) &= ~0x1000u;
    *(_DWORD *)((char *)v3 + *(void *)(v5 - 24) + 8) |= 1u;
    int v6 = *(char *)(a1 + 23);
    if (v6 >= 0) {
      uint64_t v7 = a1;
    }
    else {
      uint64_t v7 = *(void *)a1;
    }
    if (v6 >= 0) {
      uint64_t v8 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      uint64_t v8 = *(void *)(a1 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, v7, v8);
    return *(void *)(a1 + 24);
  }
  return result;
}

void sub_1920916AC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *ctu::LogMessageBuffer::appendString(std::string *this, uint64_t a2)
{
  std::string::pointer data = this[1].__r_.__value_.__l.__data_;
  std::string::size_type v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    std::string::size_type v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    std::string::size_type v5 = v4;
  }
  if (data) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(data, a2, v5);
  }
  else {
    std::string::append(this, (const std::string::value_type *)a2, v5);
  }
  return this;
}

std::string *ctu::LogMessageBuffer::appendString(std::string *this, const char *__s)
{
  std::string::pointer data = this[1].__r_.__value_.__l.__data_;
  size_t v5 = strlen(__s);
  if (data) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(data, (uint64_t)__s, v5);
  }
  else {
    std::string::append(this, __s, v5);
  }
  return this;
}

std::string *ctu::LogMessageBuffer::appendChar(std::string *this, std::string::value_type a2)
{
  std::string::pointer data = this[1].__r_.__value_.__l.__data_;
  if (data)
  {
    std::string::value_type v5 = a2;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(data, (uint64_t)&v5, 1);
  }
  else
  {
    std::string::push_back(this, a2);
  }
  return this;
}

uint64_t ctu::LogMessageBuffer::addMetaData(uint64_t a1, long long *a2)
{
  unint64_t v6 = *(void *)(a1 + 48);
  std::string::size_type v4 = (std::allocator<std::string> *)(a1 + 48);
  unint64_t v5 = v6;
  unint64_t v7 = *((void *)v4 - 1);
  if (v7 >= v6)
  {
    uint64_t v10 = (std::vector<std::string> *)((char *)v4 - 16);
    uint64_t v11 = *((void *)v4 - 2);
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - v11) >> 3);
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - v11) >> 3);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x555555555555555) {
      unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v15 = v13;
    }
    __v.__end_cap_.__value_ = v4;
    if (v15) {
      uint64_t v16 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)v4, v15);
    }
    else {
      uint64_t v16 = 0;
    }
    uint64_t v17 = v16 + v12;
    __v.__first_ = v16;
    __v.__begin_ = v17;
    __v.__end_cap_.__value_ = &v16[v15];
    long long v18 = *a2;
    v17->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
    *((void *)a2 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    __v.__end_ = v17 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(v10, &__v);
    unint64_t v9 = *(void *)(a1 + 40);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    *((void *)a2 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    unint64_t v9 = v7 + 24;
    *(void *)(a1 + 40) = v7 + 24;
  }
  *(void *)(a1 + 40) = v9;
  return a1;
}

{
  std::allocator<std::string> *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  long long v8;
  unint64_t v9;
  std::vector<std::string> *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  std::string *v16;
  std::string *v17;
  long long v18;
  std::__split_buffer<std::string> __v;

  unint64_t v6 = *(void *)(a1 + 48);
  std::string::size_type v4 = (std::allocator<std::string> *)(a1 + 48);
  unint64_t v5 = v6;
  unint64_t v7 = *((void *)v4 - 1);
  if (v7 >= v6)
  {
    uint64_t v10 = (std::vector<std::string> *)((char *)v4 - 16);
    uint64_t v11 = *((void *)v4 - 2);
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - v11) >> 3);
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - v11) >> 3);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x555555555555555) {
      unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v15 = v13;
    }
    __v.__end_cap_.__value_ = v4;
    if (v15) {
      uint64_t v16 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)v4, v15);
    }
    else {
      uint64_t v16 = 0;
    }
    uint64_t v17 = v16 + v12;
    __v.__first_ = v16;
    __v.__begin_ = v17;
    __v.__end_cap_.__value_ = &v16[v15];
    long long v18 = *a2;
    v17->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
    *((void *)a2 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    __v.__end_ = v17 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(v10, &__v);
    unint64_t v9 = *(void *)(a1 + 40);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    *((void *)a2 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    unint64_t v9 = v7 + 24;
    *(void *)(a1 + 40) = v7 + 24;
  }
  *(void *)(a1 + 40) = v9;
  return a1;
}

void sub_1920918F4(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void sub_192091A38(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

__n128 ctu::LogMessageBuffer::merge(ctu::LogMessageBuffer *this, const ctu::LogMessageBuffer *a2)
{
  ctu::LogMessageBuffer::str(this);
  uint64_t v4 = *((void *)a2 + 3);
  if (v4)
  {
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>(v4 + 8, &__p);
    if (SHIBYTE(__p.__end_) >= 0) {
      std::__split_buffer<std::string>::pointer p_p = (std::__split_buffer<std::string>::pointer)&__p;
    }
    else {
      std::__split_buffer<std::string>::pointer p_p = __p.__first_;
    }
    if (SHIBYTE(__p.__end_) >= 0) {
      std::string::size_type end_high = HIBYTE(__p.__end_);
    }
    else {
      std::string::size_type end_high = (std::string::size_type)__p.__begin_;
    }
    std::string::append((std::string *)this, (const std::string::value_type *)p_p, end_high);
    if (SHIBYTE(__p.__end_) < 0) {
      operator delete(__p.__first_);
    }
  }
  else
  {
    int v8 = *((char *)a2 + 23);
    if (v8 >= 0) {
      unint64_t v9 = (const std::string::value_type *)a2;
    }
    else {
      unint64_t v9 = *(const std::string::value_type **)a2;
    }
    if (v8 >= 0) {
      std::string::size_type v10 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      std::string::size_type v10 = *((void *)a2 + 1);
    }
    std::string::append((std::string *)this, v9, v10);
  }
  uint64_t v11 = (long long *)*((void *)a2 + 4);
  unint64_t v12 = (long long *)*((void *)a2 + 5);
  if ((char *)v12 - (char *)v11 >= 1)
  {
    uint64_t v13 = *((void *)this + 4);
    unint64_t v14 = (std::string *)*((void *)this + 5);
    uint64_t v15 = ((char *)v12 - (char *)v11) / 24;
    uint64_t v16 = *((void *)this + 6);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v16 - (uint64_t)v14) >> 3)) >= v15)
    {
      if (v15 <= 0)
      {
        CFStringRef v25 = (long long *)((char *)v11 + 24 * v15);
        int v26 = (__n128 *)*((void *)this + 5);
        uint64_t v27 = &v14[v15];
        CFIndex v28 = (__n128 *)((char *)v26 - 24 * v15);
        CFStringRef v29 = v26;
        if (v28 < (__n128 *)v14)
        {
          CFStringRef v29 = (__n128 *)*((void *)this + 5);
          do
          {
            __n128 result = *v28;
            v29[1].n128_u64[0] = v28[1].n128_u64[0];
            *CFStringRef v29 = result;
            CFStringRef v29 = (__n128 *)((char *)v29 + 24);
            v28->n128_u64[1] = 0;
            v28[1].n128_u64[0] = 0;
            v28->n128_u64[0] = 0;
            CFIndex v28 = (__n128 *)((char *)v28 + 24);
          }
          while (v28 < (__n128 *)v14);
        }
        *((void *)this + 5) = v29;
        if (v26 != (__n128 *)v27)
        {
          unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * (((char *)v26 - (char *)v27) >> 3);
          unint64_t v31 = &v26[-2].n128_i8[8];
          uint64_t v32 = v30;
          do
          {
            if (v31[23] < 0) {
              operator delete(*(void **)v31);
            }
            CFTypeRef v33 = (__n128 *)&v14[v32 - 1];
            __n128 result = *v33;
            *((void *)v31 + 2) = *((void *)&v14[v32 - 1].__r_.__value_.__l + 2);
            *(__n128 *)unint64_t v31 = result;
            v31 -= 24;
            *((unsigned char *)&v14[v32 - 1].__r_.__value_.__s + 23) = 0;
            v33->n128_u8[0] = 0;
            --v32;
          }
          while (v32 * 24);
        }
        for (; v11 != v25; ++v14)
        {
          std::string::operator=(v14, (const std::string *)v11);
          uint64_t v11 = (long long *)((char *)v11 + 24);
        }
      }
      else
      {
        v47[0] = *((void *)this + 5);
        std::__split_buffer<std::string>::pointer v49 = v14;
        __p.__first_ = (std::__split_buffer<std::string>::pointer)((char *)this + 48);
        __p.__begin_ = (std::__split_buffer<std::string>::pointer)&v49;
        __p.__end_ = (std::__split_buffer<std::string>::pointer)v47;
        __p.__end_cap_.__value_ = (std::string *)0xAAAAAAAAAAAAAA00;
        unint64_t v22 = v14;
        if (v11 != v12)
        {
          uint64_t v23 = v11;
          do
          {
            if (*((char *)v23 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(v22, *(const std::string::value_type **)v23, *((void *)v23 + 1));
              unint64_t v22 = (std::string *)v47[0];
            }
            else
            {
              long long v24 = *v23;
              v22->__r_.__value_.__r.__words[2] = *((void *)v23 + 2);
              *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v24;
            }
            uint64_t v23 = (long long *)((char *)v23 + 24);
            v47[0] = ++v22;
          }
          while (v23 != v12);
        }
        LOBYTE(__p.__end_cap_.__value_) = 1;
        std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&__p);
        *((void *)this + 5) = v22;
      }
    }
    else
    {
      unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v14 - v13) >> 3);
      if (v17 + v15 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((v16 - v13) >> 3);
      uint64_t v19 = 2 * v18;
      if (2 * v18 <= v17 + v15) {
        uint64_t v19 = v17 + v15;
      }
      if (v18 >= 0x555555555555555) {
        unint64_t v20 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v20 = v19;
      }
      __p.__end_cap_.__value_ = (std::allocator<std::string> *)((char *)this + 48);
      if (v20) {
        std::string::size_type v21 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)this + 48, v20);
      }
      else {
        std::string::size_type v21 = 0;
      }
      int v34 = v21 + v17;
      __p.__first_ = v21;
      __p.__begin_ = v34;
      __p.__end_ = v34;
      __p.__end_cap_.__value_ = &v21[v20];
      uint64_t v35 = 3 * v15;
      int v36 = &v34[v15];
      uint64_t v37 = 8 * v35;
      do
      {
        if (*((char *)v11 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v34, *(const std::string::value_type **)v11, *((void *)v11 + 1));
        }
        else
        {
          long long v38 = *v11;
          v34->__r_.__value_.__r.__words[2] = *((void *)v11 + 2);
          *(_OWORD *)&v34->__r_.__value_.__l.__data_ = v38;
        }
        ++v34;
        uint64_t v11 = (long long *)((char *)v11 + 24);
        v37 -= 24;
      }
      while (v37);
      __p.__end_ = v36;
      std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)this + 48, (uint64_t)v14, (uint64_t)v14, *((void *)this + 4), *((void *)this + 4), (uint64_t)__p.__begin_, (uint64_t)__p.__begin_);
      __p.__begin_ = v39;
      int v40 = (std::string *)*((void *)this + 5);
      std::__split_buffer<std::string>::pointer end = __p.__end_;
      std::__split_buffer<std::string>::pointer v48 = __p.__end_;
      std::__split_buffer<std::string>::pointer v49 = __p.__end_;
      v47[0] = (char *)this + 48;
      v47[1] = &v48;
      v47[2] = &v49;
      v47[3] = 0xAAAAAAAAAAAAAA01;
      if (v40 != v14)
      {
        do
        {
          long long v42 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
          end->__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
          *(_OWORD *)&end->__r_.__value_.__l.__data_ = v42;
          ++end;
          v14->__r_.__value_.__l.__size_ = 0;
          v14->__r_.__value_.__r.__words[2] = 0;
          v14->__r_.__value_.__r.__words[0] = 0;
          ++v14;
        }
        while (v14 != v40);
        std::__split_buffer<std::string>::pointer v49 = end;
      }
      std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v47);
      long long v43 = *((_OWORD *)this + 2);
      xpc_object_t value = __p.__end_cap_.__value_;
      *((void *)this + 4) = __p.__begin_;
      *((void *)this + 5) = end;
      *(_OWORD *)&__p.__begin_ = v43;
      id v45 = (std::string *)*((void *)this + 6);
      *((void *)this + 6) = value;
      __p.__end_cap_.__value_ = v45;
      __p.__first_ = (std::__split_buffer<std::string>::pointer)v43;
      std::__split_buffer<std::string>::~__split_buffer(&__p);
    }
  }
  return result;
}

void sub_192091E58(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

long long *ctu::LogMessageBuffer::merge(uint64_t a1, uint64_t a2)
{
  ctu::LogMessageBuffer::str((ctu::LogMessageBuffer *)a1);
  ctu::LogMessageBuffer::str((ctu::LogMessageBuffer *)a2);
  int v4 = *(char *)(a2 + 23);
  if (v4 >= 0) {
    unint64_t v5 = (const std::string::value_type *)a2;
  }
  else {
    unint64_t v5 = *(const std::string::value_type **)a2;
  }
  if (v4 >= 0) {
    std::string::size_type v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v6 = *(void *)(a2 + 8);
  }
  std::string::append((std::string *)a1, v5, v6);
  unint64_t v7 = *(long long **)(a2 + 32);
  int v8 = *(long long **)(a2 + 40);

  return std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>,std::back_insert_iterator<std::vector<std::string>>,0>(v7, v8, (std::vector<std::string> *)(a1 + 32));
}

uint64_t ctu::operator<<(uint64_t a1)
{
  return a1;
}

{
  ctu::LogMessageBuffer::operator std::ostream &(a1);
  std::ostream::operator<<();
  return a1;
}

{
  ctu::LogMessageBuffer::operator std::ostream &(a1);
  std::ostream::operator<<();
  return a1;
}

{
  ctu::LogMessageBuffer::operator std::ostream &(a1);
  std::ostream::operator<<();
  return a1;
}

{
  ctu::LogMessageBuffer::operator std::ostream &(a1);
  std::ostream::operator<<();
  return a1;
}

{
  ctu::LogMessageBuffer::operator std::ostream &(a1);
  std::ostream::operator<<();
  return a1;
}

{
  ctu::LogMessageBuffer::operator std::ostream &(a1);
  std::ostream::operator<<();
  return a1;
}

{
  ctu::LogMessageBuffer::operator std::ostream &(a1);
  std::ostream::operator<<();
  return a1;
}

{
  ctu::LogMessageBuffer::operator std::ostream &(a1);
  std::ostream::operator<<();
  return a1;
}

std::string *ctu::operator<<(std::string *a1, int a2)
{
  if (a2) {
    uint64_t v2 = "true";
  }
  else {
    uint64_t v2 = "false";
  }
  return ctu::LogMessageBuffer::appendString(a1, v2);
}

uint64_t ctu::operator<<(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)std::__split_buffer<std::string> __p = *(_OWORD *)a2;
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  ctu::LogMessageBuffer::addMetaData(a1, (long long *)__p);
  if (SHIBYTE(v5) < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

{
  ctu::LogMessageBuffer::merge(a1, a2);
  return a1;
}

void sub_192092174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::operator<<(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4 = ctu::LogMessageBuffer::operator std::ostream &(a1);
  a2(v4);
  return a1;
}

uint64_t ctu::operator<<(uint64_t a1, void (*a2)(char *))
{
  uint64_t v4 = (char *)ctu::LogMessageBuffer::operator std::ostream &(a1);
  a2(&v4[*(void *)(*(void *)v4 - 24)]);
  return a1;
}

ctu::LogMessageBuffer *ctu::operator<<(ctu::LogMessageBuffer *a1, const ctu::LogMessageBuffer *a2)
{
  return a1;
}

char *std::vector<std::string>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  uint64_t v4 = this;
  uint64_t v11 = this;
  unint64_t v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  void v9[2] = &v12;
  unint64_t v10 = 0xAAAAAAAAAAAAAA00;
  if (a2 != a3)
  {
    std::string::size_type v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      std::string::size_type v6 = (long long *)((char *)v6 + 24);
      unint64_t v12 = ++v4;
    }
    while (v6 != a3);
  }
  LOBYTE(v10) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_19209235C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0) {
      operator delete(*(void **)(v1 - 24));
    }
    v1 -= 24;
  }
}

std::string *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(std::string *__str, std::string *a2, std::string *this)
{
  if (__str != a2)
  {
    uint64_t v5 = __str;
    do
      std::string::operator=(this++, v5++);
    while (v5 != a2);
  }
  return this;
}

long long *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>,std::back_insert_iterator<std::vector<std::string>>,0>(long long *a1, long long *a2, std::vector<std::string> *a3)
{
  long long v3 = a1;
  std::string::size_type v6 = a3;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v4 = a2;
  do
  {
    std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100](&v6, v3);
    long long v3 = (long long *)((char *)v3 + 24);
  }
  while (v3 != v4);
  return v4;
}

std::vector<std::string> **std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100](std::vector<std::string> **a1, long long *a2)
{
  uint64_t v4 = *a1;
  std::vector<std::string>::pointer end = (*a1)->__end_;
  std::string::size_type v6 = *a1;
  xpc_object_t value = v6->__end_cap_.__value_;
  p_end_cap = (std::allocator<std::string> *)&v6->__end_cap_;
  int v8 = value;
  if (end >= value)
  {
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)v4->__begin_) >> 3);
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)v4->__begin_) >> 3);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x555555555555555) {
      unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v15 = v13;
    }
    __v.__end_cap_.__value_ = p_end_cap;
    if (v15) {
      uint64_t v16 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)p_end_cap, v15);
    }
    else {
      uint64_t v16 = 0;
    }
    unint64_t v17 = v16 + v12;
    __v.__first_ = v16;
    __v.__begin_ = v17;
    __v.__end_cap_.__value_ = &v16[v15];
    long long v18 = *a2;
    v17->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
    *((void *)a2 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    __v.__end_ = v17 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(v4, &__v);
    uint64_t v11 = v4->__end_;
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
  else
  {
    long long v10 = *a2;
    end->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v10;
    *((void *)a2 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    uint64_t v11 = end + 1;
    v4->__end_ = end + 1;
  }
  v4->__end_ = v11;
  return a1;
}

void sub_1920925E0(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void anonymous namespace'::XpcDescriptionGenerator::describe_double(std::string **this, xpc_object_t xdouble)
{
  double value = xpc_double_get_value(xdouble);
  uint64_t v4 = *this;
  std::to_string(&v7, value);
  if ((v7.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v5 = &v7;
  }
  else {
    uint64_t v5 = (std::string *)v7.__r_.__value_.__r.__words[0];
  }
  if ((v7.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v7.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v7.__r_.__value_.__l.__size_;
  }
  std::string::append(v4, (const std::string::value_type *)v5, size);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
}

void sub_192092664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *anonymous namespace'::XpcDescriptionGenerator::describe_date(std::string **this, xpc_object_t xdate)
{
  void v9[3] = *MEMORY[0x1E4F143B8];
  time_t v7 = xpc_date_get_value(xdate) / 0x3B9ACA00uLL;
  v6.tm_zone = (char *)0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v6.tm_mon = v3;
  *(_OWORD *)&v6.tm_isdst = v3;
  *(_OWORD *)&v6.tm_sec = v3;
  localtime_r(&v7, &v6);
  memset(v9, 170, 22);
  *(void *)std::string __s = 0xAAAAAAAAAAAAAAAALL;
  strftime(__s, 0x1EuLL, "%F %T %Z", &v6);
  size_t v4 = strlen(__s);
  return std::string::append(*this, __s, v4);
}

void anonymous namespace'::XpcDescriptionGenerator::describe_error(std::string **this, xpc_object_t xdict)
{
  __n128 string = xpc_dictionary_get_string(xdict, (const char *)*MEMORY[0x1E4F14530]);
  std::string::append(*this, "XPC_ERROR(", 0xAuLL);
  size_t v4 = strlen(string);
  std::string::append(*this, string, v4);
  uint64_t v5 = *this;

  std::string::push_back(v5, 41);
}

void xpc::object::describe(xpc::object *this@<X0>, void *a2@<X8>)
{
  long long v3 = (char *)MEMORY[0x192FEE0A0](*(void *)this);
  memset(a2, 170, 24);
  std::string::basic_string[abi:ne180100]<0>(a2, v3);

  free(v3);
}

xpc_object_t ctu::LogWriter::getFullConfig@<X0>(void *a1@<X8>)
{
  xpc_object_t result = xpc_null_create();
  *a1 = result;
  return result;
}

uint64_t ctu::LogWriter::getSimpleConfig(ctu::LogWriter *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 56))();
}

uint64_t ctu::LogWriter::write(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 24))(a1, *a2);
}

__n128 ctu::LogMessage::LogMessage(uint64_t a1, uint64_t a2, char a3, long long *a4, long long *a5, __n128 *a6)
{
  *(void *)a1 = &unk_1EE2F64E8;
  *(void *)(a1 + 8) = a2;
  *(unsigned char *)(a1 + 16) = a3;
  long long v6 = *a4;
  *(void *)(a1 + 40) = *((void *)a4 + 2);
  *(_OWORD *)(a1 + 24) = v6;
  *((void *)a4 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
  *((void *)a4 + 2) = 0;
  *(void *)a4 = 0;
  long long v7 = *a5;
  *(void *)(a1 + 64) = *((void *)a5 + 2);
  *(_OWORD *)(a1 + 48) = v7;
  *((void *)a5 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
  *((void *)a5 + 2) = 0;
  *(void *)a5 = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  __n128 result = *a6;
  *(__n128 *)(a1 + 72) = *a6;
  *(void *)(a1 + 88) = a6[1].n128_u64[0];
  a6->n128_u64[0] = 0;
  a6->n128_u64[1] = 0;
  a6[1].n128_u64[0] = 0;
  return result;
}

{
  long long v6;
  long long v7;
  __n128 result;

  *(void *)a1 = &unk_1EE2F64E8;
  *(void *)(a1 + 8) = a2;
  *(unsigned char *)(a1 + 16) = a3;
  long long v6 = *a4;
  *(void *)(a1 + 40) = *((void *)a4 + 2);
  *(_OWORD *)(a1 + 24) = v6;
  *((void *)a4 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
  *((void *)a4 + 2) = 0;
  *(void *)a4 = 0;
  long long v7 = *a5;
  *(void *)(a1 + 64) = *((void *)a5 + 2);
  *(_OWORD *)(a1 + 48) = v7;
  *((void *)a5 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
  *((void *)a5 + 2) = 0;
  *(void *)a5 = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  __n128 result = *a6;
  *(__n128 *)(a1 + 72) = *a6;
  *(void *)(a1 + 88) = a6[1].n128_u64[0];
  a6->n128_u64[0] = 0;
  a6->n128_u64[1] = 0;
  a6[1].n128_u64[0] = 0;
  return result;
}

void ctu::LogMessage::~LogMessage(void **this)
{
  *this = &unk_1EE2F64E8;
  uint64_t v2 = this + 9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
}

{
  void *v1;
  uint64_t vars8;

  ctu::LogMessage::~LogMessage(this);

  operator delete(v1);
}

uint64_t ctu::LogServer::create@<X0>(long long *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = 0;
  ctu::LogServer::create(a1, &v4, a2);
  uint64_t result = v4;
  if (v4)
  {
    long long v3 = *(uint64_t (**)(void))(*(void *)v4 + 8);
    return v3();
  }
  return result;
}

void sub_192092AC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::LogServer::create@<X0>(long long *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  long long v6 = operator new(0xE0uLL);
  uint64_t v7 = *a2;
  *a2 = 0;
  uint64_t v12 = v7;
  ctu::LogServer::LogServer((uint64_t)v6, a1, &v12);
  *a3 = v6;
  int v8 = (std::__shared_weak_count *)operator new(0x20uLL);
  v8->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE2F8F80;
  v8->__shared_owners_ = 0;
  v8->__shared_weak_owners_ = 0;
  v8[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
  a3[1] = v8;
  unint64_t v9 = (std::__shared_weak_count *)*((void *)v6 + 2);
  if (v9)
  {
    if (v9->__shared_owners_ != -1) {
      goto LABEL_6;
    }
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)v6 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v6;
    *((void *)v6 + 2) = v8;
    std::__shared_weak_count::__release_weak(v9);
  }
  else
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)v6 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v6;
    *((void *)v6 + 2) = v8;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v8);
LABEL_6:
  uint64_t result = v12;
  if (v12)
  {
    uint64_t v11 = *(uint64_t (**)(void))(*(void *)v12 + 8);
    return v11();
  }
  return result;
}

void sub_192092C30(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<ctu::LogServer> ctu::SharedSynchronizable<ctu::LogServer>::make_shared_ptr<ctu::LogServer>(ctu::LogServer*)::{lambda(ctu::LogServer*)#1}::operator() const(ctu::LogServer*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_192092C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t ctu::LogServer::LogServer(uint64_t a1, long long *a2)
{
  uint64_t v4 = 0;
  ctu::LogServer::LogServer(a1, a2, &v4);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v4;

  uint64_t v4 = 0;
  ctu::LogServer::LogServer(a1, a2, &v4);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

void sub_192092D1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::LogServer::LogServer(uint64_t a1, long long *a2, uint64_t *a3)
{
  long long v6 = __p;
  std::operator+<char>();
  if (v22 < 0) {
    long long v6 = (void **)__p[0];
  }
  uint64_t v7 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_UTILITY, 0);
  int v8 = dispatch_queue_create((const char *)v6, v7);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = v8;
  if (v8)
  {
    unint64_t v9 = v8;
    dispatch_retain(v8);
    *(void *)(a1 + 32) = 0;
    dispatch_release(v9);
  }
  else
  {
    *(void *)(a1 + 32) = 0;
  }
  if (SHIBYTE(v22) < 0) {
    operator delete(__p[0]);
  }
  *(void *)a1 = &unk_1EE2F7C68;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v10 = *a2;
    *(void *)(a1 + ++*(_DWORD *)(this + 56) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 40) = v10;
  }
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  uint64_t v11 = operator new(0x58uLL);
  std::string::basic_string[abi:ne180100]<0>(v19, "");
  ctu::LoggerTree::LoggerTree((uint64_t)v11, (long long *)v19);
  *(void *)(a1 + 80) = v11;
  if (v20 < 0) {
    operator delete(v19[0]);
  }
  std::operator+<char>();
  uint64_t v12 = std::string::append(&v18, "::writers", 9uLL);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  int64_t v22 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::__split_buffer<std::string> __p = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  unint64_t v14 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  if (v22 >= 0) {
    unint64_t v15 = __p;
  }
  else {
    unint64_t v15 = (void **)__p[0];
  }
  *(void *)(a1 + 88) = dispatch_queue_create((const char *)v15, v14);
  if (SHIBYTE(v22) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  uint64_t v16 = *a3;
  *a3 = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 96) = v16;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 850045863;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(unsigned char *)(a1 + 216) = 0;
  atomic_store(v16 != 0, (unsigned __int8 *)(a1 + 216));
  ctu::LoggerTree::updateParentLogLevel(*(void *)(a1 + 80), 40);
  return a1;
}

void sub_192092F90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21)
{
  ctu::SharedSynchronizable<ctu::RestModuleState>::~SharedSynchronizable(v21);
  _Unwind_Resume(a1);
}

void sub_1920930E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void ctu::LogServer::~LogServer(ctu::LogServer *this)
{
  *(void *)this = &unk_1EE2F7C68;
  uint64_t v5 = (void **)((char *)this + 192);
  std::vector<std::shared_ptr<ctu::LogMessage>>::__destroy_vector::operator()[abi:ne180100](&v5);
  std::mutex::~mutex((std::mutex *)this + 2);
  uint64_t v5 = (void **)((char *)this + 104);
  std::vector<std::shared_ptr<ctu::RestResourceConnection>>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v2 = *((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  long long v3 = *((void *)this + 11);
  if (v3) {
    dispatch_release(v3);
  }
  std::unique_ptr<ctu::LoggerTree>::reset[abi:ne180100]((ctu::LoggerTree **)this + 10);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  ctu::SharedSynchronizable<ctu::RestModuleState>::~SharedSynchronizable((void *)this + 1);
}

{
  void *v1;
  uint64_t vars8;

  ctu::LogServer::~LogServer(this);

  operator delete(v1);
}

uint64_t ctu::LogServer::getName(ctu::LogServer *this)
{
  return (uint64_t)this + 40;
}

void ctu::LogServer::updateConfig(void *a1, void **a2)
{
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 1174405120;
  void v9[2] = ___ZN3ctu9LogServer12updateConfigEN3xpc4dictE_block_invoke;
  void v9[3] = &__block_descriptor_tmp_20;
  long long v3 = *a2;
  void v9[4] = a1;
  xpc_object_t object = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (!v4 || (v5 = a1[1], (long long v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  int v8 = a1[3];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableINS_9LogServerEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &__block_descriptor_tmp_17;
  block[5] = v5;
  uint64_t v12 = v7;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = v9;
  dispatch_async(v8, block);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  xpc_release(object);
}

void ___ZN3ctu9LogServer12updateConfigEN3xpc4dictE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  xpc_object_t v7 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v6[0] = a1 + 40;
  v6[1] = (uint64_t)"kDomainLogLevels";
  xpc::dict::object_proxy::operator xpc::dict((uint64_t)v6, &v7);
  if (MEMORY[0x192FEE1B0](v7) == MEMORY[0x1E4F14590])
  {
    uint64_t v2 = *(void *)(v1 + 80);
    xpc_object_t v3 = v7;
    xpc_object_t v5 = v7;
    if (v7)
    {
      xpc_retain(v7);
    }
    else
    {
      xpc_object_t v3 = xpc_null_create();
      xpc_object_t v5 = v3;
    }
    ctu::LoggerTree::updateLogLevels(v2, &v5);
    xpc_release(v3);
    xpc_object_t v5 = 0;
  }
  v6[0] = 0xAAAAAAAAAAAAAAAALL;
  v6[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::LoggerTree::commitConfigUpdate(v6, *(ctu::LoggerTree **)(v1 + 80));
  long long v4 = *(_OWORD *)v6;
  std::atomic_store[abi:ne180100]<std::vector<std::pair<std::string,ctu::LogLevel>> const>((uint64_t *)(v1 + 64), (uint64_t *)&v4);
  if (*((void *)&v4 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v4 + 1));
  }
  xpc_release(v7);
}

void sub_192093454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  unint64_t v14 = v12;
  xpc_release(v14);
  xpc_release(*(xpc_object_t *)(v13 - 40));
  _Unwind_Resume(a1);
}

void xpc::dict::object_proxy::operator xpc::dict(uint64_t a1@<X0>, void *a2@<X8>)
{
  xpc_object_t value = xpc_dictionary_get_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8));
  if (value)
  {
    xpc_object_t v4 = value;
    xpc_retain(value);
    *a2 = v4;
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    *a2 = v4;
    if (!v4)
    {
      xpc_object_t v5 = xpc_null_create();
      xpc_object_t v4 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x192FEE1B0](v4) != MEMORY[0x1E4F14590])
  {
    xpc_object_t v5 = xpc_null_create();
LABEL_8:
    *a2 = v5;
    goto LABEL_9;
  }
  xpc_retain(v4);
LABEL_9:
  xpc_release(v4);
}

void xpc::dict::~dict(xpc_object_t *this)
{
  *this = 0;
}

void std::atomic_store[abi:ne180100]<std::vector<std::pair<std::string,ctu::LogLevel>> const>(uint64_t *a1, uint64_t *a2)
{
  sp_mut = std::__get_sp_mut(a1);
  std::__sp_mut::lock(sp_mut);
  uint64_t v5 = *a1;
  *a1 = *a2;
  *a2 = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[1];
  a2[1] = v6;

  std::__sp_mut::unlock(sp_mut);
}

xpc_object_t __copy_helper_block_e8_40c15_ZTSN3xpc4dictE(uint64_t a1, uint64_t a2)
{
  xpc_object_t v3 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = v3;
  if (v3) {
    return xpc_retain(v3);
  }
  xpc_object_t result = xpc_null_create();
  *(void *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_40c15_ZTSN3xpc4dictE(uint64_t a1)
{
  *(void *)(a1 + 40) = 0;
}

void ctu::LogServer::start(ctu::LogServer *this)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  std::string v4[2] = ___ZN3ctu9LogServer5startEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_5;
  v4[4] = this;
  uint64_t v5 = v4;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableINS_9LogServerEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_18;
  void block[4] = (char *)this + 8;
  block[5] = &v5;
  xpc_object_t v3 = (char *)this + 24;
  uint64_t v2 = *((void *)this + 3);
  if (*((void *)v3 + 1)) {
    dispatch_async_and_wait(v2, block);
  }
  else {
    dispatch_sync(v2, block);
  }
  atomic_store(1u, (unsigned __int8 *)this + 216);
}

void ___ZN3ctu9LogServer5startEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
  ctu::LoggerTree::commitConfigUpdate((uint64_t *)&v4, *(ctu::LoggerTree **)(v1 + 80));
  long long v3 = v4;
  std::atomic_store[abi:ne180100]<std::vector<std::pair<std::string,ctu::LogLevel>> const>((uint64_t *)(v1 + 64), (uint64_t *)&v3);
  if (*((void *)&v3 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v3 + 1));
  }
  uint64_t v2 = *(NSObject **)(v1 + 88);
  uint64_t v5 = v1;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZN8dispatch9sync_implIZN3ctu9LogServer20flushStartupMessagesEvE3__0EEvP16dispatch_queue_sOT_NSt3__117integral_constantIbLb1EEE_block_invoke;
  block[3] = &__block_descriptor_tmp_29;
  void block[4] = &v5;
  dispatch_sync(v2, block);
}

void sub_1920937E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void ctu::LogServer::flushStartupMessages(NSObject **this)
{
  uint64_t v2 = (ctu::LogServer *)this;
  uint64_t v1 = this[11];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZN8dispatch9sync_implIZN3ctu9LogServer20flushStartupMessagesEvE3__0EEvP16dispatch_queue_sOT_NSt3__117integral_constantIbLb1EEE_block_invoke;
  block[3] = &__block_descriptor_tmp_29;
  void block[4] = &v2;
  dispatch_sync(v1, block);
}

uint64_t ctu::LogServer::setEnabled(uint64_t this, unsigned __int8 a2)
{
  return this;
}

uint64_t ctu::LogServer::getEnabled(ctu::LogServer *this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)this + 216);
  return v1 & 1;
}

void ctu::LogServer::close(ctu::LogServer *this)
{
  atomic_store(0, (unsigned __int8 *)this + 216);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (!v2 || (v3 = *((void *)this + 1), (long long v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  uint64_t v6 = *((void *)this + 11);
  xpc_object_t v7 = operator new(0x18uLL);
  *xpc_object_t v7 = v3;
  v7[1] = v5;
  void v7[2] = this;

  dispatch_async_f(v6, v7, (dispatch_function_t)dispatch::async<ctu::LogServer,ctu::LogServer::close(void)::$_0>(std::shared_ptr<ctu::LogServer>,dispatch_queue_s *,ctu::LogServer::close(void)::$_0 &&)::{lambda(void *)#1}::__invoke);
}

void ctu::LogServer::debugFlush(ctu::LogServer *this)
{
  uint64_t v3 = &__block_literal_global_7;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableINS_9LogServerEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_18;
  void block[4] = (char *)this + 8;
  void block[5] = &v3;
  uint64_t v2 = (char *)this + 24;
  unsigned __int8 v1 = *((void *)this + 3);
  if (*((void *)v2 + 1)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
}

void ctu::LogServer::flush(ctu::LogServer *this@<X0>, NSObject **a2@<X8>)
{
  long long v4 = dispatch_group_create();
  uint64_t v5 = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v5);
    dispatch_release(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 2);
  if (!v6 || (uint64_t v7 = *((void *)this + 1), (v8 = std::__shared_weak_count::lock(v6)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  unint64_t v9 = v8;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(v5);
  }
  long long v10 = *((void *)this + 11);
  uint64_t v11 = operator new(0x20uLL);
  void *v11 = v7;
  v11[1] = v9;
  _OWORD v11[2] = this;
  void v11[3] = v5;
  dispatch_async_f(v10, v11, (dispatch_function_t)dispatch::async<ctu::LogServer const,ctu::LogServer::flush(void)::$_0>(std::shared_ptr<ctu::LogServer const>,dispatch_queue_s *,ctu::LogServer::flush(void)::$_0 &&)::{lambda(void *)#1}::__invoke);
  *a2 = v5;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_leave(v5);
    dispatch_release(v5);
  }
}

void sub_192093AAC(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    dispatch_group_leave(v1);
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

void ctu::LogServer::fillLoggerFullConfig_sync(ctu::LoggerTree **this, xpc::dict *a2)
{
}

void ctu::LogServer::fillLoggerSimpleConfig_sync(ctu::LoggerTree **this, xpc::dict *a2)
{
}

void ctu::LogServer::fillLogWriterFullConfig_sync(ctu::LogServer *this, xpc::dict *a2)
{
  xpc_object_t v4 = xpc_array_create(0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    xpc_object_t object = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t object = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x192FEE1B0](v5) == MEMORY[0x1E4F14568])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  xpc_object_t object = v6;
LABEL_9:
  xpc_release(v5);
  v10[0] = this;
  v10[1] = &object;
  uint64_t v7 = *((void *)this + 11);
  blocunint64_t k = (xpc::dict *)MEMORY[0x1E4F143A8];
  uint64_t v13 = 0x40000000;
  unint64_t v14 = ___ZN8dispatch9sync_implIZNK3ctu9LogServer28fillLogWriterFullConfig_syncERN3xpc4dictEE3__0EEvP16dispatch_queue_sOT_NSt3__117integral_constantIbLb1EEE_block_invoke;
  unint64_t v15 = &__block_descriptor_tmp_20;
  uint64_t v16 = v10;
  dispatch_sync(v7, &block);
  xpc_object_t v8 = object;
  if (object) {
    xpc_retain(object);
  }
  else {
    xpc_object_t v8 = xpc_null_create();
  }
  blocunint64_t k = a2;
  uint64_t v13 = (uint64_t)"kLogWriters";
  xpc::dict::object_proxy::operator=((uint64_t)&block, &v8, &v9);
  xpc_release(v9);
  xpc_object_t v9 = 0;
  xpc_release(v8);
  xpc_object_t v8 = 0;
  xpc_release(object);
}

void ctu::LogServer::fillLogWriterSimpleConfig_sync(ctu::LogServer *this, xpc::dict *a2)
{
  xpc_object_t v4 = xpc_array_create(0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    xpc_object_t object = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t object = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x192FEE1B0](v5) == MEMORY[0x1E4F14568])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  xpc_object_t object = v6;
LABEL_9:
  xpc_release(v5);
  v10[0] = this;
  v10[1] = &object;
  uint64_t v7 = *((void *)this + 11);
  blocunint64_t k = (xpc::dict *)MEMORY[0x1E4F143A8];
  uint64_t v13 = 0x40000000;
  unint64_t v14 = ___ZN8dispatch9sync_implIZNK3ctu9LogServer30fillLogWriterSimpleConfig_syncERN3xpc4dictEE3__0EEvP16dispatch_queue_sOT_NSt3__117integral_constantIbLb1EEE_block_invoke;
  unint64_t v15 = &__block_descriptor_tmp_21;
  uint64_t v16 = v10;
  dispatch_sync(v7, &block);
  xpc_object_t v8 = object;
  if (object) {
    xpc_retain(object);
  }
  else {
    xpc_object_t v8 = xpc_null_create();
  }
  blocunint64_t k = a2;
  uint64_t v13 = (uint64_t)"kLogWriters";
  xpc::dict::object_proxy::operator=((uint64_t)&block, &v8, &v9);
  xpc_release(v9);
  xpc_object_t v9 = 0;
  xpc_release(v8);
  xpc_object_t v8 = 0;
  xpc_release(object);
}

void ctu::LogServer::getConfig(ctu::LogServer *this@<X0>, xpc_object_t *a2@<X8>)
{
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 0x40000000;
  v2[2] = ___ZNK3ctu9LogServer9getConfigEv_block_invoke;
  v2[3] = &__block_descriptor_tmp_9;
  v2[4] = this;
  uint64_t v3 = v2;
  ctu::SharedSynchronizable<ctu::LogServer>::execute_wrapped_sync<xpc::dict({block_pointer})(void)>(a2, (uint64_t)this + 8, (uint64_t)&v3);
}

uint64_t ___ZNK3ctu9LogServer9getConfigEv_block_invoke@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 32);
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x192FEE1B0](v5) != MEMORY[0x1E4F14590])
  {
    xpc_object_t v6 = xpc_null_create();
LABEL_8:
    *a2 = v6;
    goto LABEL_9;
  }
  xpc_retain(v5);
LABEL_9:
  xpc_release(v5);
  (*(void (**)(uint64_t, void *))(*(void *)v3 + 40))(v3, a2);
  return (*(uint64_t (**)(uint64_t, void *))(*(void *)v3 + 24))(v3, a2);
}

void sub_192093F9C(_Unwind_Exception *a1)
{
  xpc::dict::~dict(v1);
  _Unwind_Resume(a1);
}

void ctu::LogServer::getSimpleConfig(ctu::LogServer *this@<X0>, xpc_object_t *a2@<X8>)
{
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 0x40000000;
  v2[2] = ___ZNK3ctu9LogServer15getSimpleConfigEv_block_invoke;
  v2[3] = &__block_descriptor_tmp_10;
  v2[4] = this;
  uint64_t v3 = v2;
  ctu::SharedSynchronizable<ctu::LogServer>::execute_wrapped_sync<xpc::dict({block_pointer})(void)>(a2, (uint64_t)this + 8, (uint64_t)&v3);
}

uint64_t ___ZNK3ctu9LogServer15getSimpleConfigEv_block_invoke@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 32);
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x192FEE1B0](v5) != MEMORY[0x1E4F14590])
  {
    xpc_object_t v6 = xpc_null_create();
LABEL_8:
    *a2 = v6;
    goto LABEL_9;
  }
  xpc_retain(v5);
LABEL_9:
  xpc_release(v5);
  (*(void (**)(uint64_t, void *))(*(void *)v3 + 48))(v3, a2);
  return (*(uint64_t (**)(uint64_t, void *))(*(void *)v3 + 32))(v3, a2);
}

void sub_192094134(_Unwind_Exception *a1)
{
  xpc::dict::~dict(v1);
  _Unwind_Resume(a1);
}

void ctu::LogServer::addWriter(void *a1, uint64_t *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (!v3 || (v5 = a1[1], (xpc_object_t v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  long long v10 = a1[11];
  uint64_t v11 = operator new(0x28uLL);
  void *v11 = v5;
  v11[1] = v7;
  _OWORD v11[2] = a1;
  void v11[3] = v8;
  void v11[4] = v9;

  dispatch_async_f(v10, v11, (dispatch_function_t)dispatch::async<ctu::LogServer,ctu::LogServer::addWriter(std::shared_ptr<ctu::LogWriter>)::$_0>(std::shared_ptr<ctu::LogServer>,dispatch_queue_s *,ctu::LogServer::addWriter(std::shared_ptr<ctu::LogWriter>)::$_0 &&)::{lambda(void *)#1}::__invoke);
}

void ctu::LogServer::registerLogger(void *a1, uint64_t a2, void *a3)
{
  uint64_t CurrentLogLevel = ctu::LogServer::getCurrentLogLevel((uint64_t)a1, (void *)a2);
  if (CurrentLogLevel) {
    (*(void (**)(void, uint64_t))(*(void *)*a3 + 16))(*a3, CurrentLogLevel);
  }
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  uint64_t v7 = (std::__shared_weak_count *)a3[1];
  uint64_t v18 = *a3;
  uint64_t v19 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (std::__shared_weak_count *)a1[2];
  if (!v8 || (uint64_t v9 = a1[1], (v10 = std::__shared_weak_count::lock(v8)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v11 = v10;
  uint64_t v12 = operator new(0x30uLL);
  void *v12 = a1;
  uint64_t v13 = (std::string *)(v12 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v13, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v12[3] = *((void *)&__p.__r_.__value_.__l + 2);
  }
  unint64_t v14 = v19;
  void v12[4] = v18;
  void v12[5] = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v15 = a1[3];
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v16 = operator new(0x18uLL);
  *uint64_t v16 = v12;
  v16[1] = v9;
  _OWORD v16[2] = v11;
  char v20 = 0;
  std::string::size_type v21 = 0;
  dispatch_async_f(v15, v16, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<ctu::LogServer>::execute_wrapped<ctu::LogServer::registerLogger(std::string const&,std::shared_ptr<ctu::TrackedLogger> const&)::$_0>(ctu::LogServer::registerLogger(std::string const&,std::shared_ptr<ctu::TrackedLogger> const&)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ctu::LogServer::registerLogger(std::string const&,std::shared_ptr<ctu::TrackedLogger> const&)::$_0,std::default_delete<ctu::LogServer::registerLogger(std::string const&,std::shared_ptr<ctu::TrackedLogger> const&)::$_0>>)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<void ctu::SharedSynchronizable<ctu::RestModuleState>::execute_wrapped<ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0>(ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0 &&)::{lambda(void)#1},std::default_delete<ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0>>::~unique_ptr[abi:ne180100](&v20);
  std::unique_ptr<void ctu::SharedSynchronizable<ctu::RestModuleState>::execute_wrapped<ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0>(ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0 &&)::{lambda(void)#1},std::default_delete<ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0>>::~unique_ptr[abi:ne180100](&v21);
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

uint64_t ctu::LogServer::getCurrentLogLevel(uint64_t a1, void *a2)
{
  sp_mut = std::__get_sp_mut((const void *)(a1 + 64));
  std::__sp_mut::lock(sp_mut);
  xpc_object_t v6 = *(uint64_t **)(a1 + 64);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::__sp_mut::unlock(sp_mut);
  if (!v6)
  {
LABEL_56:
    uint64_t v29 = 0;
    if (!v5) {
      return v29;
    }
LABEL_57:
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    return v29;
  }
  int v7 = *((char *)a2 + 23);
  size_t v8 = a2[1];
  if (v7 >= 0)
  {
    size_t v9 = v7;
  }
  else
  {
    a2 = (void *)*a2;
    size_t v9 = v8;
  }
  uint64_t v10 = *v6;
  uint64_t v11 = v6[1];
  uint64_t v31 = v11;
  uint64_t v32 = v5;
  uint64_t v33 = *v6;
  do
  {
    if (!v9) {
      break;
    }
    uint64_t v12 = v10;
    if (v11 != v10)
    {
      unint64_t v13 = (v11 - v10) >> 5;
      uint64_t v12 = v33;
      do
      {
        uint64_t v14 = v12 + 32 * (v13 >> 1);
        int v15 = *(char *)(v14 + 23);
        if (v15 >= 0) {
          size_t v16 = *(unsigned __int8 *)(v14 + 23);
        }
        else {
          size_t v16 = *(void *)(v14 + 8);
        }
        if (v16 >= v9) {
          size_t v17 = v9;
        }
        else {
          size_t v17 = v16;
        }
        if (v17
          && (v15 >= 0 ? (uint64_t v18 = (const void *)(v12 + 32 * (v13 >> 1))) : (uint64_t v18 = *(const void **)v14),
              (int v19 = memcmp(v18, a2, v17)) != 0))
        {
          int v20 = (v19 >> 31) | 1;
        }
        else
        {
          if (v9 > v16) {
            int v20 = -1;
          }
          else {
            int v20 = 1;
          }
          if (v9 == v16) {
            int v20 = 0;
          }
        }
        if (v20 == -1) {
          v13 += ~(v13 >> 1);
        }
        else {
          v13 >>= 1;
        }
        if (v20 == -1) {
          uint64_t v12 = v14 + 32;
        }
      }
      while (v13);
    }
    if (v12 != v11)
    {
      uint64_t v21 = *(unsigned __int8 *)(v12 + 23);
      int v22 = (char)v21;
      if ((v21 & 0x80u) != 0) {
        uint64_t v21 = *(void *)(v12 + 8);
      }
      if (v21 == v9)
      {
        uint64_t v23 = v22 >= 0 ? (const void *)v12 : *(const void **)v12;
        if (!memcmp(v23, a2, v9))
        {
          uint64_t v10 = v12;
          uint64_t v5 = v32;
          goto LABEL_60;
        }
      }
    }
    size_t v24 = v9;
    do
    {
      if (!v24)
      {
        size_t v27 = v9;
        goto LABEL_49;
      }
      size_t v25 = v24 - 1;
      int v26 = *((unsigned __int8 *)a2 + --v24);
    }
    while (v26 != 46);
    size_t v27 = v25 >= v9 ? v9 : v25;
LABEL_49:
    uint64_t v11 = v12;
    BOOL v28 = v9 == v27;
    size_t v9 = v27;
    uint64_t v10 = v33;
  }
  while (!v28);
  uint64_t v5 = v32;
  if (v10 == v31) {
    goto LABEL_56;
  }
  if (*(char *)(v10 + 23) < 0)
  {
    if (*(void *)(v10 + 8)) {
      goto LABEL_56;
    }
  }
  else if (*(unsigned char *)(v10 + 23))
  {
    goto LABEL_56;
  }
LABEL_60:
  uint64_t v29 = *(unsigned __int8 *)(v10 + 24);
  if (v5) {
    goto LABEL_57;
  }
  return v29;
}

uint64_t ctu::LogServer::getCurrentLogLevelSlow(uint64_t a1, uint64_t a2)
{
  v5[0] = a1;
  v5[1] = a2;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  void v6[2] = ___ZNK3ctu20SharedSynchronizableINS_9LogServerEE20execute_wrapped_syncIZNKS1_22getCurrentLogLevelSlowERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSE__block_invoke;
  uint64_t v6[3] = &__block_descriptor_tmp_26;
  v6[4] = a1 + 8;
  v6[5] = v5;
  int v7 = v6;
  uint64_t v3 = a1 + 24;
  uint64_t v2 = *(NSObject **)(a1 + 24);
  if (*(void *)(v3 + 8))
  {
    unsigned __int8 v14 = -86;
    blocunint64_t k = MEMORY[0x1E4F143A8];
    uint64_t v9 = 0x40000000;
    uint64_t v10 = ___ZN8dispatch19async_and_wait_implIRU13block_pointerFN3ctu8LogLevelEvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS6_17integral_constantIbLb0EEE_block_invoke;
    uint64_t v11 = &__block_descriptor_tmp_28;
    uint64_t v12 = &v14;
    unint64_t v13 = &v7;
    dispatch_async_and_wait(v2, &block);
  }
  else
  {
    unsigned __int8 v14 = -86;
    blocunint64_t k = MEMORY[0x1E4F143A8];
    uint64_t v9 = 0x40000000;
    uint64_t v10 = ___ZN8dispatch9sync_implIRU13block_pointerFN3ctu8LogLevelEvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS6_17integral_constantIbLb0EEE_block_invoke;
    uint64_t v11 = &__block_descriptor_tmp_27;
    uint64_t v12 = &v14;
    unint64_t v13 = &v7;
    dispatch_sync(v2, &block);
  }
  return v14;
}

void ctu::LogServer::log(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(a1 + 216));
  if (v2)
  {
    uint64_t v5 = (std::mutex *)(a1 + 128);
    std::mutex::lock((std::mutex *)(a1 + 128));
    uint64_t v6 = *(void *)(a1 + 192);
    uint64_t v7 = *(void *)(a1 + 200);
    std::vector<std::shared_ptr<ctu::LogMessage>>::emplace_back<std::shared_ptr<ctu::LogMessage>>((char **)(a1 + 192), a2);
    std::mutex::unlock(v5);
    if (v6 == v7)
    {
      ctu::LogServer::handleLogMessages((ctu::LogServer *)a1);
    }
  }
}

void sub_192094768(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

char *std::vector<std::shared_ptr<ctu::LogMessage>>::emplace_back<std::shared_ptr<ctu::LogMessage>>(char **a1, uint64_t a2)
{
  unint64_t v4 = (unint64_t)a1[2];
  uint64_t v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = (v5 - *a1) >> 4;
    if ((unint64_t)(v7 + 1) >> 60) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = v4 - (void)*a1;
    uint64_t v9 = v8 >> 3;
    if (v8 >> 3 <= (unint64_t)(v7 + 1)) {
      uint64_t v9 = v7 + 1;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v9;
    }
    int v22 = a1 + 2;
    if (v10 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v11 = (char *)operator new(16 * v10);
    uint64_t v12 = &v11[16 * v7];
    *(_OWORD *)uint64_t v12 = *(_OWORD *)a2;
    uint64_t v6 = v12 + 16;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    unsigned __int8 v14 = *a1;
    unint64_t v13 = a1[1];
    if (v13 == *a1)
    {
      int64x2_t v16 = vdupq_n_s64((unint64_t)v13);
    }
    else
    {
      do
      {
        long long v15 = *((_OWORD *)v13 - 1);
        v13 -= 16;
        *((_OWORD *)v12 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v15;
        v12 -= 16;
        *(void *)unint64_t v13 = 0;
        *((void *)v13 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
      }
      while (v13 != v14);
      int64x2_t v16 = *(int64x2_t *)a1;
    }
    *a1 = v12;
    a1[1] = v6;
    int64x2_t v20 = v16;
    size_t v17 = a1[2];
    a1[2] = &v11[16 * v10];
    uint64_t v21 = v17;
    uint64_t v19 = v16.i64[0];
    std::__split_buffer<std::shared_ptr<ctu::LogMessage>>::~__split_buffer((uint64_t)&v19);
  }
  else
  {
    *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
    uint64_t v6 = v5 + 16;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  a1[1] = v6;
  return v6 - 16;
}

void ctu::LogServer::handleLogMessages(ctu::LogServer *this)
{
  unsigned __int8 v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (!v2 || (v3 = *((void *)this + 1), (unint64_t v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v5 = v4;
  uint64_t v6 = *((void *)this + 11);
  uint64_t v7 = operator new(0x18uLL);
  *uint64_t v7 = v3;
  v7[1] = v5;
  void v7[2] = this;

  dispatch_async_f(v6, v7, (dispatch_function_t)dispatch::async<ctu::LogServer,ctu::LogServer::handleLogMessages(void)::$_0>(std::shared_ptr<ctu::LogServer>,dispatch_queue_s *,ctu::LogServer::handleLogMessages(void)::$_0 &&)::{lambda(void *)#1}::__invoke);
}

void *ctu::ScopedLogFlusher::ScopedLogFlusher(void *result, void *a2)
{
  uint64_t v2 = a2[1];
  *xpc_object_t result = *a2;
  result[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  result[2] = 5000;
  return result;
}

{
  uint64_t v2;

  uint64_t v2 = a2[1];
  *xpc_object_t result = *a2;
  result[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  result[2] = 5000;
  return result;
}

void *ctu::ScopedLogFlusher::ScopedLogFlusher(void *result, void *a2, uint64_t a3)
{
  uint64_t v3 = a2[1];
  *xpc_object_t result = *a2;
  result[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  result[2] = a3;
  return result;
}

{
  uint64_t v3;

  uint64_t v3 = a2[1];
  *xpc_object_t result = *a2;
  result[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  result[2] = a3;
  return result;
}

void ctu::ScopedLogFlusher::~ScopedLogFlusher(ctu::ScopedLogFlusher *this)
{
  uint64_t v2 = *(ctu::LogServer **)this;
  if (v2)
  {
    uint64_t v6 = 0xAAAAAAAAAAAAAAAALL;
    ctu::LogServer::flush(v2, &v6);
    uint64_t v3 = v6;
    if (v6)
    {
      dispatch_time_t v4 = dispatch_time(0, 1000000 * *((void *)this + 2));
      dispatch_group_wait(v3, v4);
      dispatch_release(v3);
    }
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void std::vector<std::shared_ptr<ctu::LogMessage>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  unsigned __int8 v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    dispatch_time_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = (std::__shared_weak_count *)*((void *)v4 - 1);
        if (v6) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        }
        v4 -= 16;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<std::shared_ptr<ctu::LogMessage>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 16;
    dispatch_time_t v4 = *(std::__shared_weak_count **)(v2 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 16;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__shared_ptr_pointer<ctu::LogServer *,std::shared_ptr<ctu::LogServer> ctu::SharedSynchronizable<ctu::LogServer>::make_shared_ptr<ctu::LogServer>(ctu::LogServer*)::{lambda(ctu::LogServer *)#1},std::allocator<ctu::LogServer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<ctu::LogServer *,std::shared_ptr<ctu::LogServer> ctu::SharedSynchronizable<ctu::LogServer>::make_shared_ptr<ctu::LogServer>(ctu::LogServer*)::{lambda(ctu::LogServer *)#1},std::allocator<ctu::LogServer>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<ctu::LogServer *,std::shared_ptr<ctu::LogServer> ctu::SharedSynchronizable<ctu::LogServer>::make_shared_ptr<ctu::LogServer>(ctu::LogServer*)::{lambda(ctu::LogServer *)#1},std::allocator<ctu::LogServer>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<ctu::LogServer> ctu::SharedSynchronizable<ctu::LogServer>::make_shared_ptr<ctu::LogServer>(ctu::LogServer*)::{lambda(ctu::LogServer*)#1}::operator() const(ctu::LogServer*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

void std::unique_ptr<ctu::LoggerTree>::reset[abi:ne180100](ctu::LoggerTree **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    ctu::LoggerTree::~LoggerTree(v2);
    operator delete(v3);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableINS_9LogServerEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void __copy_helper_block_e8_32b40c43_ZTSNSt3__110shared_ptrIKN3ctu9LogServerEEE(void *a1, uint64_t a2)
{
  _Block_object_assign(a1 + 4, *(const void **)(a2 + 32), 7);
  uint64_t v4 = *(void *)(a2 + 48);
  a1[5] = *(void *)(a2 + 40);
  a1[6] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
}

void __destroy_helper_block_e8_32b40c43_ZTSNSt3__110shared_ptrIKN3ctu9LogServerEEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(const void **)(a1 + 32);

  _Block_object_dispose(v3, 7);
}

void *___ZNK3ctu20SharedSynchronizableINS_9LogServerEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

void **dispatch::async<ctu::LogServer,ctu::LogServer::close(void)::$_0>(std::shared_ptr<ctu::LogServer>,dispatch_queue_s *,ctu::LogServer::close(void)::$_0 &&)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v6 = a1;
  uint64_t v1 = a1[2];
  uint64_t v3 = *(void *)(v1 + 104);
  uint64_t v4 = *(void *)(v1 + 112);
  uint64_t v2 = (uint64_t *)(v1 + 104);
  while (v3 != v4)
  {
    (*(void (**)(void))(**(void **)v3 + 16))();
    v3 += 16;
  }
  std::vector<std::shared_ptr<ctu::RestResourceConnection>>::__clear[abi:ne180100](v2);
  return std::unique_ptr<std::pair<std::shared_ptr<ctu::LogServer>,ctu::LogServer::close(void)::$_0>>::~unique_ptr[abi:ne180100](&v6);
}

void sub_192094D48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::pair<std::shared_ptr<ctu::LogServer>,ctu::LogServer::close(void)::$_0>>::~unique_ptr[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void **std::unique_ptr<std::pair<std::shared_ptr<ctu::LogServer>,ctu::LogServer::close(void)::$_0>>::~unique_ptr[abi:ne180100](void **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = (std::__shared_weak_count *)v2[1];
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    operator delete(v2);
  }
  return a1;
}

void **dispatch::async<ctu::LogServer const,ctu::LogServer::flush(void)::$_0>(std::shared_ptr<ctu::LogServer const>,dispatch_queue_s *,ctu::LogServer::flush(void)::$_0 &&)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v8 = a1;
  uint64_t v1 = a1[2];
  uint64_t v2 = *(uint64_t **)(v1 + 104);
  for (size_t i = *(uint64_t **)(v1 + 112); v2 != i; v2 += 2)
  {
    uint64_t v5 = *v2;
    uint64_t v6 = a1[3];
    dispatch_group_t group = v6;
    if (v6)
    {
      dispatch_retain(v6);
      if (group) {
        dispatch_group_enter(group);
      }
    }
    (*(void (**)(uint64_t, dispatch_group_t *))(*(void *)v5 + 40))(v5, &group);
    if (group)
    {
      dispatch_group_leave(group);
      if (group) {
        dispatch_release(group);
      }
    }
  }
  return std::unique_ptr<std::pair<std::shared_ptr<ctu::LogServer const>,ctu::LogServer::flush(void)::$_0>>::~unique_ptr[abi:ne180100](&v8);
}

void sub_192094E5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_group_t group)
{
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  std::unique_ptr<std::pair<std::shared_ptr<ctu::LogServer const>,ctu::LogServer::flush(void)::$_0>>::~unique_ptr[abi:ne180100]((void **)&a9);
  _Unwind_Resume(a1);
}

void **std::unique_ptr<std::pair<std::shared_ptr<ctu::LogServer const>,ctu::LogServer::flush(void)::$_0>>::~unique_ptr[abi:ne180100](void **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = v2[3];
    if (v3)
    {
      dispatch_group_leave(v3);
      uint64_t v4 = v2[3];
      if (v4) {
        dispatch_release(v4);
      }
    }
    uint64_t v5 = (std::__shared_weak_count *)v2[1];
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    operator delete(v2);
  }
  return a1;
}

void ___ZN8dispatch9sync_implIZNK3ctu9LogServer28fillLogWriterFullConfig_syncERN3xpc4dictEE3__0EEvP16dispatch_queue_sOT_NSt3__117integral_constantIbLb1EEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(xpc_object_t ***)(a1 + 32);
  uint64_t v2 = (char *)(*v1)[13];
  uint64_t v3 = (char *)(*v1)[14];
  if (v2 != v3)
  {
    uint64_t v4 = MEMORY[0x1E4F14590];
    do
    {
      xpc_object_t value = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      (*(void (**)(xpc_object_t *__return_ptr))(**(void **)v2 + 56))(&value);
      if (MEMORY[0x192FEE1B0](value) == v4) {
        xpc_array_append_value(*v1[1], value);
      }
      xpc_release(value);
      v2 += 16;
    }
    while (v2 != v3);
  }
}

void sub_192094FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void ___ZN8dispatch9sync_implIZNK3ctu9LogServer30fillLogWriterSimpleConfig_syncERN3xpc4dictEE3__0EEvP16dispatch_queue_sOT_NSt3__117integral_constantIbLb1EEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(xpc_object_t ***)(a1 + 32);
  uint64_t v2 = (char *)(*v1)[13];
  uint64_t v3 = (char *)(*v1)[14];
  if (v2 != v3)
  {
    uint64_t v4 = MEMORY[0x1E4F14590];
    do
    {
      xpc_object_t value = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      (*(void (**)(xpc_object_t *__return_ptr))(**(void **)v2 + 48))(&value);
      if (MEMORY[0x192FEE1B0](value) == v4) {
        xpc_array_append_value(*v1[1], value);
      }
      xpc_release(value);
      v2 += 16;
    }
    while (v2 != v3);
  }
}

void sub_192095074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void ctu::SharedSynchronizable<ctu::LogServer>::execute_wrapped_sync<xpc::dict({block_pointer})(void)>(xpc_object_t *a1, uint64_t a2, uint64_t a3)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  void v5[2] = ___ZNK3ctu20SharedSynchronizableINS_9LogServerEE20execute_wrapped_syncIU13block_pointerFN3xpc4dictEvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
  v5[3] = &__block_descriptor_tmp_22;
  v5[4] = a2;
  void v5[5] = a3;
  uint64_t v6 = v5;
  uint64_t v4 = *(NSObject **)(a2 + 16);
  if (*(void *)(a2 + 24))
  {
    *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    *a1 = xpc_null_create();
    blocunint64_t k = MEMORY[0x1E4F143A8];
    uint64_t v8 = 0x40000000;
    uint64_t v9 = ___ZN8dispatch19async_and_wait_implIRU13block_pointerFN3xpc4dictEvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS6_17integral_constantIbLb0EEE_block_invoke;
    unint64_t v10 = &__block_descriptor_tmp_24;
    uint64_t v11 = a1;
    uint64_t v12 = &v6;
    dispatch_async_and_wait(v4, &block);
  }
  else
  {
    *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    *a1 = xpc_null_create();
    blocunint64_t k = MEMORY[0x1E4F143A8];
    uint64_t v8 = 0x40000000;
    uint64_t v9 = ___ZN8dispatch9sync_implIRU13block_pointerFN3xpc4dictEvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS6_17integral_constantIbLb0EEE_block_invoke;
    unint64_t v10 = &__block_descriptor_tmp_23;
    uint64_t v11 = a1;
    uint64_t v12 = &v6;
    dispatch_sync(v4, &block);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableINS_9LogServerEE20execute_wrapped_syncIU13block_pointerFN3xpc4dictEvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
}

void ___ZN8dispatch9sync_implIRU13block_pointerFN3xpc4dictEvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS6_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  (*(void (**)(xpc_object_t *__return_ptr))(**(void **)(a1 + 40) + 16))(&object);
  uint64_t v2 = *(void ***)(a1 + 32);
  xpc_object_t v3 = object;
  xpc_object_t object = xpc_null_create();
  uint64_t v4 = *v2;
  char *v2 = v3;
  xpc_release(v4);
  xpc_release(object);
}

void ___ZN8dispatch19async_and_wait_implIRU13block_pointerFN3xpc4dictEvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS6_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  (*(void (**)(xpc_object_t *__return_ptr))(**(void **)(a1 + 40) + 16))(&object);
  uint64_t v2 = *(void ***)(a1 + 32);
  xpc_object_t v3 = object;
  xpc_object_t object = xpc_null_create();
  uint64_t v4 = *v2;
  char *v2 = v3;
  xpc_release(v4);
  xpc_release(object);
}

void **dispatch::async<ctu::LogServer,ctu::LogServer::addWriter(std::shared_ptr<ctu::LogWriter>)::$_0>(std::shared_ptr<ctu::LogServer>,dispatch_queue_s *,ctu::LogServer::addWriter(std::shared_ptr<ctu::LogWriter>)::$_0 &&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v19 = (void *)a1;
  uint64_t v1 = *(void **)(a1 + 16);
  long long v2 = *(_OWORD *)(a1 + 24);
  uint64_t v4 = (char *)v1[14];
  unint64_t v3 = v1[15];
  if ((unint64_t)v4 >= v3)
  {
    uint64_t v6 = (char *)v1[13];
    uint64_t v7 = (v4 - v6) >> 4;
    unint64_t v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) >> 60) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    long long v18 = *(_OWORD *)(a1 + 24);
    uint64_t v9 = v3 - (void)v6;
    if (v9 >> 3 > v8) {
      unint64_t v8 = v9 >> 3;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v11 = (char *)operator new(16 * v10);
    uint64_t v12 = &v11[16 * v7];
    *(_OWORD *)uint64_t v12 = v18;
    if (*((void *)&v18 + 1))
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 1uLL, memory_order_relaxed);
      uint64_t v6 = (char *)v1[13];
      uint64_t v4 = (char *)v1[14];
    }
    unint64_t v13 = &v11[16 * v10];
    uint64_t v5 = v12 + 16;
    if (v4 == v6)
    {
      v1[13] = v12;
      v1[14] = v5;
      v1[15] = v13;
    }
    else
    {
      do
      {
        long long v14 = *((_OWORD *)v4 - 1);
        v4 -= 16;
        *((_OWORD *)v12 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v14;
        v12 -= 16;
        *(void *)uint64_t v4 = 0;
        *((void *)v4 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
      }
      while (v4 != v6);
      uint64_t v6 = (char *)v1[13];
      long long v15 = (char *)v1[14];
      v1[13] = v12;
      v1[14] = v5;
      v1[15] = v13;
      while (v15 != v6)
      {
        int64x2_t v16 = (std::__shared_weak_count *)*((void *)v15 - 1);
        if (v16) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v16);
        }
        v15 -= 16;
      }
    }
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *(_OWORD *)uint64_t v4 = v2;
    if (*((void *)&v2 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v2 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v5 = v4 + 16;
  }
  v1[14] = v5;
  return std::unique_ptr<std::pair<std::shared_ptr<ctu::LogServer>,ctu::LogServer::addWriter(std::shared_ptr<ctu::LogWriter>)::$_0>>::~unique_ptr[abi:ne180100](&v19);
}

void sub_192095428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::pair<std::shared_ptr<ctu::LogServer>,ctu::LogServer::addWriter(std::shared_ptr<ctu::LogWriter>)::$_0>>::~unique_ptr[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void **std::unique_ptr<std::pair<std::shared_ptr<ctu::LogServer>,ctu::LogServer::addWriter(std::shared_ptr<ctu::LogWriter>)::$_0>>::~unique_ptr[abi:ne180100](void **a1)
{
  long long v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    unint64_t v3 = (std::__shared_weak_count *)v2[4];
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    uint64_t v4 = (std::__shared_weak_count *)v2[1];
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    operator delete(v2);
  }
  return a1;
}

void **dispatch::async<void ctu::SharedSynchronizable<ctu::LogServer>::execute_wrapped<ctu::LogServer::registerLogger(std::string const&,std::shared_ptr<ctu::TrackedLogger> const&)::$_0>(ctu::LogServer::registerLogger(std::string const&,std::shared_ptr<ctu::TrackedLogger> const&)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ctu::LogServer::registerLogger(std::string const&,std::shared_ptr<ctu::TrackedLogger> const&)::$_0,std::default_delete<ctu::LogServer::registerLogger(std::string const&,std::shared_ptr<ctu::TrackedLogger> const&)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v1 = *a1;
  unint64_t v3 = a1;
  uint64_t v4 = v1;
  ctu::LoggerTree::insertAt(*(void *)(*(void *)v1 + 80), (long long *)(v1 + 8), (void *)(v1 + 32));
  std::unique_ptr<ctu::LogServer::registerLogger(std::string const&,std::shared_ptr<ctu::TrackedLogger> const&)::$_0,std::default_delete<ctu::LogServer::registerLogger(std::string const&,std::shared_ptr<ctu::TrackedLogger> const&)::$_0>>::~unique_ptr[abi:ne180100](&v4);
  return std::unique_ptr<void ctu::SharedSynchronizable<ctu::RestModuleState>::execute_wrapped<ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0>(ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0 &&)::{lambda(void)#1},std::default_delete<ctu::RestModuleState::sendRawGet(std::string &&,std::function<void ()(xpc::object)> &&)::$_0>>::~unique_ptr[abi:ne180100](&v3);
}

void sub_1920954D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10)
{
}

uint64_t *std::unique_ptr<ctu::LogServer::registerLogger(std::string const&,std::shared_ptr<ctu::TrackedLogger> const&)::$_0,std::default_delete<ctu::LogServer::registerLogger(std::string const&,std::shared_ptr<ctu::TrackedLogger> const&)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    unint64_t v3 = *(std::__shared_weak_count **)(v2 + 40);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    if (*(char *)(v2 + 31) < 0) {
      operator delete(*(void **)(v2 + 8));
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t ___ZNK3ctu20SharedSynchronizableINS_9LogServerEE20execute_wrapped_syncIZNKS1_22getCurrentLogLevelSlowERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSE__block_invoke(uint64_t a1)
{
  return ctu::LogServer::getCurrentLogLevel(**(void **)(a1 + 40), *(void **)(*(void *)(a1 + 40) + 8));
}

uint64_t ___ZN8dispatch9sync_implIRU13block_pointerFN3ctu8LogLevelEvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS6_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(unsigned char **)(a1 + 32) = result;
  return result;
}

uint64_t ___ZN8dispatch19async_and_wait_implIRU13block_pointerFN3ctu8LogLevelEvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS6_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(unsigned char **)(a1 + 32) = result;
  return result;
}

uint64_t ___ZN8dispatch9sync_implIZN3ctu9LogServer20flushStartupMessagesEvE3__0EEvP16dispatch_queue_sOT_NSt3__117integral_constantIbLb1EEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 32);
  uint64_t v2 = *v1;
  uint64_t result = *(void *)(*v1 + 96);
  if (result)
  {
    *(void *)&unsigned long long v4 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v4 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
    unsigned long long v61 = v4;
    unsigned long long v62 = v4;
    *(_OWORD *)std::string __p = v4;
    (*(void (**)(void **__return_ptr))(*(void *)result + 64))(__p);
    if (*(uint64_t *)(*(void *)(v2 + 96) + 80) >= 1)
    {
      *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v5 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
      v58[2] = v5;
      long long v59 = v5;
      v58[0] = v5;
      v58[1] = v5;
      ctu::StaticLogger::StaticLogger((ctu::StaticLogger *)v58);
      uint64_t v6 = *(std::__shared_weak_count **)(v2 + 16);
      if (!v6 || (uint64_t v7 = *(void *)(v2 + 8), (v8 = std::__shared_weak_count::lock(v6)) == 0)) {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      uint64_t v9 = v8;
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v10 = (std::__shared_weak_count *)*((void *)&v59 + 1);
      *(void *)&long long v59 = v7;
      *((void *)&v59 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v9;
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      std::string::operator=((std::string *)((char *)v58 + 8), (const std::string *)(v2 + 40));
      uint64_t v57 = 0;
      memset(v56, 0, sizeof(v56));
      ctu::LogMessageBuffer::appendString(v56, "Note: ");
      ctu::LogMessageBuffer::operator std::ostream &((uint64_t)v56);
      std::ostream::operator<<();
      ctu::LogMessageBuffer::appendString(v56, " log messages dropped prior to log start");
      *(void *)&long long v55 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v55 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
      ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::buildMessage((uint64_t)v58, 40, (ctu::LogMessageBuffer *)v56, &v55);
      unint64_t v11 = v62;
      uint64_t v12 = (char *)__p[1];
      unint64_t v13 = (char *)v61;
      if (!(void)v62)
      {
        unint64_t v14 = 32 * (v61 - (unint64_t)__p[1]) - 1;
        if ((void *)v61 == __p[1]) {
          unint64_t v14 = 0;
        }
        if (v14 - *((void *)&v62 + 1) < 0x100)
        {
          if ((unint64_t)v61 - (unint64_t)__p[1] >= *((void *)&v61 + 1) - (unint64_t)__p[0])
          {
            if (*((void **)&v61 + 1) == __p[0]) {
              unint64_t v15 = 1;
            }
            else {
              unint64_t v15 = (uint64_t)(*((void *)&v61 + 1) - (unint64_t)__p[0]) >> 2;
            }
            uint64_t v68 = (uint64_t)&v61 + 8;
            id v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ctu::LogMessage> *>>((uint64_t)&v61 + 8, v15);
            char v65 = v64;
            uint64_t v66 = v64;
            uint64_t v67 = &v64[8 * v16];
            uint64_t v63 = operator new(0x1000uLL);
            std::__split_buffer<std::shared_ptr<ctu::LogMessage> *,std::allocator<std::shared_ptr<ctu::LogMessage> *> &>::push_back(&v64, &v63);
            size_t v17 = (char *)__p[1];
            long long v18 = v66;
            if (__p[1] == (void *)v61)
            {
              uint64_t v37 = (char *)__p[1];
            }
            else
            {
              do
              {
                if (v18 == v67)
                {
                  uint64_t v19 = v65 - v64;
                  if (v65 <= v64)
                  {
                    if (v18 == v64) {
                      unint64_t v27 = 1;
                    }
                    else {
                      unint64_t v27 = (v18 - v64) >> 2;
                    }
                    BOOL v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ctu::LogMessage> *>>(v68, v27);
                    unint64_t v30 = v65;
                    long long v18 = &v28[8 * (v27 >> 2)];
                    uint64_t v31 = v66 - v65;
                    if (v66 != v65)
                    {
                      long long v18 = &v28[8 * (v27 >> 2) + (v31 & 0xFFFFFFFFFFFFFFF8)];
                      uint64_t v32 = 8 * (v31 >> 3);
                      uint64_t v33 = &v28[8 * (v27 >> 2)];
                      do
                      {
                        uint64_t v34 = *(void *)v30;
                        v30 += 8;
                        *(void *)uint64_t v33 = v34;
                        v33 += 8;
                        v32 -= 8;
                      }
                      while (v32);
                    }
                    uint64_t v35 = v64;
                    id v64 = v28;
                    char v65 = &v28[8 * (v27 >> 2)];
                    uint64_t v66 = v18;
                    uint64_t v67 = &v28[8 * v29];
                    if (v35)
                    {
                      operator delete(v35);
                      long long v18 = v66;
                    }
                  }
                  else
                  {
                    uint64_t v20 = v19 >> 3;
                    BOOL v21 = v19 >> 3 < -1;
                    uint64_t v22 = (v19 >> 3) + 2;
                    if (v21) {
                      uint64_t v23 = v22;
                    }
                    else {
                      uint64_t v23 = v20 + 1;
                    }
                    size_t v24 = &v65[-8 * (v23 >> 1)];
                    int64_t v25 = v18 - v65;
                    if (v18 != v65)
                    {
                      memmove(&v65[-8 * (v23 >> 1)], v65, v18 - v65);
                      long long v18 = v65;
                    }
                    int v26 = &v18[-8 * (v23 >> 1)];
                    long long v18 = &v24[v25];
                    char v65 = v26;
                    uint64_t v66 = &v24[v25];
                  }
                }
                uint64_t v36 = *(void *)v17;
                v17 += 8;
                *(void *)long long v18 = v36;
                long long v18 = v66 + 8;
                v66 += 8;
              }
              while (v17 != (char *)v61);
              uint64_t v37 = (char *)__p[1];
            }
            uint64_t v39 = (char *)__p[0];
            int v40 = (char *)*((void *)&v61 + 1);
            __p[0] = v64;
            __p[1] = v65;
            id v64 = v39;
            char v65 = v37;
            *(void *)&unsigned long long v61 = v18;
            *((void *)&v61 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v67;
            uint64_t v66 = v17;
            uint64_t v67 = v40;
            BOOL v41 = (char *)(v18 - (char *)__p[1]) == (char *)8;
            uint64_t v42 = 128;
            if (!v41) {
              uint64_t v42 = v62 + 256;
            }
            *(void *)&unsigned long long v62 = v42;
            if (v17 != v37) {
              uint64_t v66 = &v17[(v37 - v17 + 7) & 0xFFFFFFFFFFFFFFF8];
            }
            if (v39) {
              operator delete(v39);
            }
          }
          else
          {
            if (__p[1] == __p[0])
            {
              id v64 = (char *)operator new(0x1000uLL);
              std::__split_buffer<std::shared_ptr<ctu::LogMessage> *,std::allocator<std::shared_ptr<ctu::LogMessage> *>>::push_back(__p, &v64);
              id v64 = *(char **)(v61 - 8);
              *(void *)&unsigned long long v61 = v61 - 8;
            }
            else
            {
              id v64 = (char *)operator new(0x1000uLL);
            }
            std::__split_buffer<std::shared_ptr<ctu::LogMessage> *,std::allocator<std::shared_ptr<ctu::LogMessage> *>>::push_front((uint64_t)__p, &v64);
            uint64_t v38 = 128;
            if ((void)v61 - (unint64_t)__p[1] != 8) {
              uint64_t v38 = v62 + 256;
            }
            *(void *)&unsigned long long v62 = v38;
          }
        }
        else
        {
          *(void *)&unsigned long long v62 = 256;
          id v64 = *(char **)(v61 - 8);
          *(void *)&unsigned long long v61 = v61 - 8;
          std::__split_buffer<std::shared_ptr<ctu::LogMessage> *,std::allocator<std::shared_ptr<ctu::LogMessage> *>>::push_front((uint64_t)__p, &v64);
        }
        unint64_t v11 = v62;
        uint64_t v12 = (char *)__p[1];
        unint64_t v13 = (char *)v61;
      }
      long long v43 = &v12[8 * (v11 >> 8)];
      if (v13 == v12) {
        uint64_t v44 = 0;
      }
      else {
        uint64_t v44 = *(void *)v43 + 16 * v11;
      }
      if (v44 == *(void *)v43) {
        uint64_t v44 = *((void *)v43 - 1) + 4096;
      }
      *(_OWORD *)(v44 - 16) = v55;
      unsigned long long v62 = __PAIR128__(*((unint64_t *)&v62 + 1), v11 - 1) + __PAIR128__(1, 0);
      ctu::LogMessageBuffer::~LogMessageBuffer((ctu::LogMessageBuffer *)v56);
      ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase((ctu::LoggerCommonBase *)v58);
    }
    if ((void *)v61 != __p[1])
    {
      id v45 = (char **)((char *)__p[1] + 8 * ((unint64_t)v62 >> 8));
      BOOL v46 = *v45;
      uint64_t v47 = &(*v45)[16 * v62];
      uint64_t v48 = *(void *)((char *)__p[1] + (((*((void *)&v62 + 1) + (void)v62) >> 5) & 0x7FFFFFFFFFFFFF8))
          + 16 * (BYTE8(v62) + v62);
      while (v47 != (char *)v48)
      {
        std::__split_buffer<std::string>::pointer v49 = *(uint64_t **)(v2 + 104);
        uint64_t v50 = *(uint64_t **)(v2 + 112);
        if (v49 != v50)
        {
          do
          {
            uint64_t v51 = *v49;
            uint64_t v52 = *((void *)v47 + 1);
            *(void *)&v58[0] = *(void *)v47;
            *((void *)&v58[0] + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v52;
            if (v52) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v52 + 8), 1uLL, memory_order_relaxed);
            }
            (*(void (**)(uint64_t, _OWORD *))(*(void *)v51 + 32))(v51, v58);
            if (*((void *)&v58[0] + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v58[0] + 1));
            }
            v49 += 2;
          }
          while (v49 != v50);
          BOOL v46 = *v45;
        }
        v47 += 16;
        if (v47 - v46 == 4096)
        {
          unint64_t v53 = v45[1];
          ++v45;
          BOOL v46 = v53;
          uint64_t v47 = v53;
        }
      }
    }
    uint64_t v54 = *(void *)(v2 + 96);
    *(void *)(v2 + 96) = 0;
    if (v54) {
      (*(void (**)(uint64_t))(*(void *)v54 + 8))(v54);
    }
    return std::deque<std::shared_ptr<ctu::LogMessage>>::~deque[abi:ne180100](__p);
  }
  return result;
}

void sub_192095B0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  operator delete(v27);
  uint64_t v31 = *(void *)(v28 - 96);
  uint64_t v30 = *(void *)(v28 - 88);
  if (v30 != v31) {
    *(void *)(v28 - 88) = v30 + ((v31 - v30 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  uint64_t v32 = *(void **)(v28 - 104);
  if (v32) {
    operator delete(v32);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  ctu::LogMessageBuffer::~LogMessageBuffer((ctu::LogMessageBuffer *)&a11);
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase((ctu::LoggerCommonBase *)&a19);
  std::deque<std::shared_ptr<ctu::LogMessage>>::~deque[abi:ne180100](&a27);
  _Unwind_Resume(a1);
}

void std::__split_buffer<std::shared_ptr<ctu::LogMessage> *,std::allocator<std::shared_ptr<ctu::LogMessage> *>>::push_front(uint64_t a1, void *a2)
{
  unsigned long long v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = a1 + 24;
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    unint64_t v8 = *(unsigned char **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4) {
        unint64_t v12 = 1;
      }
      else {
        unint64_t v12 = (v7 - v4) >> 2;
      }
      uint64_t v13 = 2 * v12;
      unint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ctu::LogMessage> *>>(v6, v12);
      long long v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v16 = *(uint64_t **)(a1 + 8);
      size_t v17 = v5;
      uint64_t v18 = *(void *)(a1 + 16) - (void)v16;
      if (v18)
      {
        size_t v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = v5;
        do
        {
          uint64_t v21 = *v16++;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      uint64_t v22 = *(char **)a1;
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        long long v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v9 = (v7 - v8) >> 3;
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = v10 >> 1;
      long long v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        unsigned long long v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    long long v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

void std::__split_buffer<std::shared_ptr<ctu::LogMessage> *,std::allocator<std::shared_ptr<ctu::LogMessage> *>>::push_back(void *a1, void *a2)
{
  long long v5 = (char *)a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  uint64_t v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    uint64_t v7 = (char *)a1[1];
    uint64_t v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v18 = 1;
      }
      else {
        unint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ctu::LogMessage> *>>(v4, v18);
      uint64_t v21 = &v19[8 * (v18 >> 2)];
      uint64_t v22 = (uint64_t *)a1[1];
      uint64_t v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        uint64_t v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v24 = 8 * (v23 >> 3);
        int64_t v25 = &v19[8 * (v18 >> 2)];
        do
        {
          uint64_t v26 = *v22++;
          *(void *)int64_t v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      unint64_t v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        uint64_t v6 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v9 = v8 >> 3;
      BOOL v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      uint64_t v14 = v12 >> 1;
      uint64_t v15 = &v7[-8 * v14];
      int64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        uint64_t v6 = (char *)a1[1];
      }
      size_t v17 = &v6[8 * v13];
      uint64_t v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(void *)uint64_t v6 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<std::shared_ptr<ctu::LogMessage> *,std::allocator<std::shared_ptr<ctu::LogMessage> *> &>::push_back(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    long long v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      size_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ctu::LogMessage> *>>(a1[4], v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      int64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)uint64_t v4 = *a2;
  a1[2] += 8;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ctu::LogMessage> *>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a2);
}

uint64_t std::deque<std::shared_ptr<ctu::LogMessage>>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  unint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    uint64_t v4 = a1 + 5;
    unint64_t v3 = (void **)a1[1];
  }
  else
  {
    uint64_t v4 = a1 + 5;
    unint64_t v5 = a1[4];
    uint64_t v6 = &v2[v5 >> 8];
    uint64_t v7 = (uint64_t)*v6;
    uint64_t v8 = (uint64_t)*v6 + 16 * v5;
    uint64_t v9 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*((unsigned char *)a1 + 40) + v5);
    if (v8 != v9)
    {
      do
      {
        uint64_t v10 = *(std::__shared_weak_count **)(v8 + 8);
        if (v10)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
          uint64_t v7 = (uint64_t)*v6;
        }
        v8 += 16;
        if (v8 - v7 == 4096)
        {
          uint64_t v11 = (uint64_t)v6[1];
          ++v6;
          uint64_t v7 = v11;
          uint64_t v8 = v11;
        }
      }
      while (v8 != v9);
      uint64_t v2 = (void **)a1[1];
      unint64_t v3 = (void **)a1[2];
    }
  }
  *uint64_t v4 = 0;
  unint64_t v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      unint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v12 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v13 = v12 >> 3;
  if (v13 == 1)
  {
    uint64_t v14 = 128;
  }
  else
  {
    if (v13 != 2) {
      goto LABEL_18;
    }
    uint64_t v14 = 256;
  }
  a1[4] = v14;
LABEL_18:
  while (v2 != v3)
  {
    uint64_t v15 = *v2++;
    operator delete(v15);
  }

  return std::__split_buffer<std::shared_ptr<ctu::LogMessage> *,std::allocator<std::shared_ptr<ctu::LogMessage> *>>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<std::shared_ptr<ctu::LogMessage> *,std::allocator<std::shared_ptr<ctu::LogMessage> *>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  uint64_t v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

void **dispatch::async<ctu::LogServer,ctu::LogServer::handleLogMessages(void)::$_0>(std::shared_ptr<ctu::LogServer>,dispatch_queue_s *,ctu::LogServer::handleLogMessages(void)::$_0 &&)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v10 = a1;
  uint64_t v1 = a1[2];
  memset(v12, 0, sizeof(v12));
  std::mutex::lock((std::mutex *)(v1 + 128));
  uint64_t v2 = *(long long **)(v1 + 192);
  long long v9 = *(_OWORD *)(v1 + 200);
  *(void *)unint64_t v12 = v2;
  *(_OWORD *)(v1 + 192) = 0uLL;
  *(_OWORD *)&v12[8] = v9;
  *(void *)(v1 + 208) = 0;
  std::mutex::unlock((std::mutex *)(v1 + 128));
  if (*(void *)(v1 + 96))
  {
    for (; v2 != (long long *)v9; ++v2)
    {
      uint64_t v3 = *(void *)(v1 + 96);
      long long v11 = *v2;
      *(void *)uint64_t v2 = 0;
      *((void *)v2 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
      (*(void (**)(uint64_t, long long *))(*(void *)v3 + 32))(v3, &v11);
      if (*((void *)&v11 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v11 + 1));
      }
    }
  }
  else
  {
    for (; v2 != (long long *)v9; ++v2)
    {
      uint64_t v4 = *(uint64_t **)(v1 + 104);
      unint64_t v5 = *(uint64_t **)(v1 + 112);
      while (v4 != v5)
      {
        uint64_t v6 = *v4;
        uint64_t v7 = *((void *)v2 + 1);
        *(void *)&long long v11 = *(void *)v2;
        *((void *)&v11 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v7;
        if (v7) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, long long *))(*(void *)v6 + 32))(v6, &v11);
        if (*((void *)&v11 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v11 + 1));
        }
        v4 += 2;
      }
    }
  }
  unint64_t v13 = (void **)v12;
  std::vector<std::shared_ptr<ctu::LogMessage>>::__destroy_vector::operator()[abi:ne180100](&v13);
  return std::unique_ptr<std::pair<std::shared_ptr<ctu::LogServer>,ctu::LogServer::close(void)::$_0>>::~unique_ptr[abi:ne180100](&v10);
}

void sub_19209623C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, char a15)
{
  *(void *)(v15 - ++*(_DWORD *)(this + 56) = &a15;
  std::vector<std::shared_ptr<ctu::LogMessage>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v15 - 56));
  std::unique_ptr<std::pair<std::shared_ptr<ctu::LogServer>,ctu::LogServer::close(void)::$_0>>::~unique_ptr[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

const char *ctu::asString(int a1)
{
  if (a1 > 49)
  {
    if (a1 <= 79)
    {
      if (a1 == 50) {
        return "Notice";
      }
      if (a1 == 70) {
        return "Warn";
      }
    }
    else
    {
      switch(a1)
      {
        case 80:
          return "Error";
        case 100:
          return "Fatal";
        case 255:
          return "Never";
      }
    }
  }
  else if (a1 <= 9)
  {
    if (!a1) {
      return "Unset";
    }
    if (a1 == 1) {
      return "Always";
    }
  }
  else
  {
    switch(a1)
    {
      case 10:
        return "Trace";
      case 20:
        return "Debug";
      case 40:
        return "Info";
    }
  }
  return "???";
}

uint64_t ctu::asChar(int a1)
{
  if (a1 > 49)
  {
    if (a1 > 79)
    {
      if (a1 == 100) {
        return 70;
      }
      if (a1 == 80) {
        return 69;
      }
    }
    else
    {
      if (a1 == 50) {
        return 78;
      }
      if (a1 == 70) {
        return 87;
      }
    }
    return 63;
  }
  if (a1 == 10) {
    return 84;
  }
  if (a1 != 20)
  {
    if (a1 == 40) {
      return 73;
    }
    return 63;
  }
  return 68;
}

ctu::OsLogContext *ctu::OsLogContext::OsLogContext(ctu::OsLogContext *this, os_log_s *a2, const char *a3)
{
  *(void *)this = a3;
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::SharedRef((void *)this + 1, a2);
  return this;
}

{
  *(void *)this = a3;
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::SharedRef((void *)this + 1, a2);
  return this;
}

void *ctu::operator<<(void *a1, int a2)
{
  uint64_t v3 = ctu::asString(a2);
  size_t v4 = strlen(v3);

  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
}

uint64_t ctu::combine(uint64_t result, unsigned int a2)
{
  if (a2) {
    BOOL v2 = result == 255;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    return result;
  }
  else {
    return a2;
  }
}

uint64_t ctu::max(uint64_t result, unsigned int a2)
{
  if (result <= a2) {
    return a2;
  }
  else {
    return result;
  }
}

uint64_t ctu::TrackedLogger::registerLoggerToServer(void *a1)
{
  return (**(uint64_t (***)(void))*a1)(*a1);
}

uint64_t ctu::LoggerCommonBase::LoggerCommonBase(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1EE2F6910;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), *(char **)a2);
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::SharedRef((void *)(a1 + 32), *(void **)(a2 + 8));
  *(_WORD *)(a1 + 40) = 0;
  return a1;
}

{
  long long v4;
  void *v5;
  void *v7;

  *(void *)a1 = &unk_1EE2F6910;
  size_t v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v4;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::SharedRef((void *)(a1 + 32), *(void **)(a2 + 32));
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  unint64_t v5 = *(void **)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  uint64_t v7 = v5;
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v7);
  return a1;
}

uint64_t ctu::LoggerCommonBase::LoggerCommonBase(uint64_t a1, long long *a2, void *object)
{
  *(void *)a1 = &unk_1EE2F6910;
  unint64_t v5 = (std::string *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v6 = *a2;
    v5->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::SharedRef((void *)(a1 + 32), object);
  *(_WORD *)(a1 + 40) = 0;
  return a1;
}

void ctu::LoggerCommonBase::~LoggerCommonBase(void **this)
{
  *this = &unk_1EE2F6910;
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 4);
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

ctu::LoggerCommonBase *ctu::LoggerCommonBase::LoggerCommonBase(ctu::LoggerCommonBase *this, const ctu::LoggerCommonBase *a2)
{
  *(void *)this = &unk_1EE2F6910;
  size_t v4 = (std::string *)((char *)this + 8);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    long long v5 = *(_OWORD *)((char *)a2 + 8);
    v4->__r_.__value_.__r.__words[2] = *((void *)a2 + 3);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::SharedRef((void *)this + 4, *((void **)a2 + 4));
  *((_WORD *)this + 20) = *((_WORD *)a2 + 20);
  return this;
}

uint64_t ctu::LoggerCommonBase::operator=(uint64_t a1, const ctu::LoggerCommonBase *a2)
{
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v10[16] = v3;
  long long v11 = v3;
  *(_OWORD *)uint64_t v10 = v3;
  ctu::LoggerCommonBase::LoggerCommonBase((ctu::LoggerCommonBase *)v10, a2);
  uint64_t v4 = *(void *)(a1 + 8);
  long long v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)&v10[8];
  uint64_t v6 = *(void *)&v10[24];
  *(void *)&v10[8] = v4;
  *(_OWORD *)&v10[16] = v5;
  uint64_t v7 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = 0;
  if (v10 != (unsigned char *)a1)
  {
    unint64_t v13 = 0;
    *(void *)(a1 + 32) = v11;
    *(void *)&long long v11 = 0;
    ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v13);
  }
  unint64_t v13 = (void *)v11;
  *(void *)&long long v11 = v7;
  unint64_t v12 = 0;
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v13);
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v12);
  __int16 v8 = *(_WORD *)(a1 + 40);
  *(_WORD *)(a1 + 40) = WORD4(v11);
  WORD4(v1ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v8;
  ctu::LoggerCommonBase::~LoggerCommonBase((void **)v10);
  return a1;
}

uint64_t ctu::LoggerCommonBase::operator=(uint64_t a1, uint64_t a2)
{
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v10[16] = v3;
  long long v11 = v3;
  *(_OWORD *)uint64_t v10 = v3;
  ctu::LoggerCommonBase::LoggerCommonBase((uint64_t)v10, a2);
  uint64_t v4 = *(void *)(a1 + 8);
  long long v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)&v10[8];
  uint64_t v6 = *(void *)&v10[24];
  *(void *)&v10[8] = v4;
  *(_OWORD *)&v10[16] = v5;
  uint64_t v7 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = 0;
  if (v10 != (unsigned char *)a1)
  {
    unint64_t v13 = 0;
    *(void *)(a1 + 32) = v11;
    *(void *)&long long v11 = 0;
    ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v13);
  }
  unint64_t v13 = (void *)v11;
  *(void *)&long long v11 = v7;
  unint64_t v12 = 0;
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v13);
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v12);
  __int16 v8 = *(_WORD *)(a1 + 40);
  *(_WORD *)(a1 + 40) = WORD4(v11);
  WORD4(v1ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v8;
  ctu::LoggerCommonBase::~LoggerCommonBase((void **)v10);
  return a1;
}

uint64_t ctu::LoggerCommonBase::getLogDomain(ctu::LoggerCommonBase *this)
{
  return (uint64_t)this + 8;
}

uint64_t ctu::LoggerCommonBase::getLocalLogLevel(ctu::LoggerCommonBase *this)
{
  return *((unsigned __int8 *)this + 40);
}

uint64_t ctu::LoggerCommonBase::getInheritedLogLevel(ctu::LoggerCommonBase *this)
{
  return *((unsigned __int8 *)this + 41);
}

uint64_t ctu::LoggerCommonBase::setInheritedLogLevel(uint64_t result, char a2)
{
  *(unsigned char *)(result + 4ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = a2;
  return result;
}

BOOL ctu::LoggerCommonBase::enabled(uint64_t a1, unsigned int a2)
{
  unsigned int v2 = *(unsigned __int8 *)(a1 + 41);
  if (*(unsigned char *)(a1 + 40)) {
    BOOL v3 = v2 == 255;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3) {
    unsigned int v2 = *(unsigned __int8 *)(a1 + 40);
  }
  return a2 >= v2;
}

uint64_t ctu::LoggerCommonBase::setLogLevel(uint64_t result, char a2)
{
  *(unsigned char *)(result + 40) = a2;
  return result;
}

void ctu::Logger::create(NSObject **a1@<X0>, void (****a2)(void)@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, std::__shared_weak_count_vtbl **a5@<X8>)
{
  *a5 = (std::__shared_weak_count_vtbl *)0xAAAAAAAAAAAAAAAALL;
  a5[1] = (std::__shared_weak_count_vtbl *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v10 = (std::__shared_weak_count_vtbl *)operator new(0x70uLL);
  long long v11 = (void *)a4[1];
  uint64_t v18 = *a4;
  uint64_t v19 = v11;
  if (v11)
  {
    os_retain(v11);
    unint64_t v12 = (const void *(__cdecl **)(const std::__shared_weak_count *__hidden, const std::type_info *))a4[1];
  }
  else
  {
    unint64_t v12 = 0;
  }
  a4[1] = 0;
  p_get_deleter = v12;
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef((void **)&p_get_deleter);
  ctu::Logger::Logger(v10, a1, a2, a3, &v18);
  *a5 = v10;
  unint64_t v13 = (std::__shared_weak_count *)operator new(0x20uLL);
  v13->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE2F8F48;
  v13->__shared_owners_ = 0;
  v13->__shared_weak_owners_ = 0;
  v13[1].__vftable = v10;
  a5[1] = (std::__shared_weak_count_vtbl *)v13;
  uint64_t v14 = (std::__shared_weak_count *)v10[2].~__shared_weak_count;
  if (v14)
  {
    if (v14->__shared_owners_ != -1) {
      goto LABEL_9;
    }
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v10[1].__on_zero_shared_weaunint64_t k = (void (__cdecl *)(std::__shared_weak_count *__hidden))v10;
    v10[2].~__shared_weak_size_t count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v13;
    std::__shared_weak_count::__release_weak(v14);
  }
  else
  {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v10[1].__on_zero_shared_weaunint64_t k = (void (__cdecl *)(std::__shared_weak_count *__hidden))v10;
    v10[2].~__shared_weak_size_t count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v13;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v13);
LABEL_9:
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v19);
  uint64_t v15 = *a2;
  p_get_deleter = &v10[1].__get_deleter;
  size_t v17 = v13;
  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  (**v15)();
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
}

void sub_192096C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

void *ctu::Logger::Logger(void *a1, NSObject **a2, void *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10 = (void *)a5[1];
  uint64_t v14 = *a5;
  uint64_t v15 = v10;
  if (v10)
  {
    os_retain(v10);
    long long v11 = (void *)a5[1];
  }
  else
  {
    long long v11 = 0;
  }
  a5[1] = 0;
  unint64_t v16 = v11;
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v16);
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::LoggerBase((uint64_t)a1, (uint64_t)&v14, a3);
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v15);
  a1[9] = 0;
  a1[10] = 0;
  a1[8] = &unk_1EE2F67C0;
  unint64_t v12 = *a2;
  a1[11] = *a2;
  if (v12) {
    dispatch_retain(v12);
  }
  a1[12] = 0;
  a1[13] = a4;
  *a1 = &unk_1EE2F7AE8;
  a1[8] = &unk_1EE2F7B28;
  return a1;
}

void sub_192096DBC(_Unwind_Exception *a1)
{
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(v1);
  _Unwind_Resume(a1);
}

uint64_t ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::LoggerBase(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v7 = *(char **)a2;
  uint64_t v6 = *(void **)(a2 + 8);
  xpc_object_t object = v6;
  if (v6)
  {
    os_retain(v6);
    __int16 v8 = *(void **)(a2 + 8);
  }
  else
  {
    __int16 v8 = 0;
  }
  *(void *)(a2 + 8) = 0;
  unint64_t v12 = v8;
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v12);
  *(void *)a1 = &unk_1EE2F6910;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), v7);
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::SharedRef((void *)(a1 + 32), object);
  *(_WORD *)(a1 + 40) = 0;
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&object);
  *(void *)a1 = &unk_1EE2F6530;
  *(void *)(a1 + 48) = *a3;
  uint64_t v9 = a3[1];
  *(void *)(a1 + ++*(_DWORD *)(this + 56) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void sub_192096EC8(_Unwind_Exception *a1)
{
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(v1);
  _Unwind_Resume(a1);
}

void ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase(ctu::LoggerCommonBase *this)
{
  *(void *)this = &unk_1EE2F6530;
  unsigned int v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  ctu::LoggerCommonBase::~LoggerCommonBase((void **)this);
}

uint64_t ctu::Logger::getName(ctu::Logger *this)
{
  return *((void *)this + 13);
}

void ctu::Logger::updateTrackedConfig(void *a1, char a2)
{
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 0x40000000;
  void v8[2] = ___ZN3ctu6Logger19updateTrackedConfigENS_8LogLevelE_block_invoke;
  void v8[3] = &__block_descriptor_tmp_9;
  v8[4] = a1;
  char v9 = a2;
  BOOL v3 = (std::__shared_weak_count *)a1[10];
  if (!v3 || (uint64_t v4 = a1[9], (v5 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v6 = v5;
  uint64_t v7 = a1[11];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableINS_6LoggerEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &__block_descriptor_tmp_27_1;
  void block[5] = v4;
  long long v11 = v6;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = v8;
  dispatch_async(v7, block);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
}

uint64_t ___ZN3ctu6Logger19updateTrackedConfigENS_8LogLevelE_block_invoke(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 4ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = *(unsigned char *)(result + 40);
  return result;
}

void non-virtual thunk to'ctu::Logger::updateTrackedConfig(uint64_t a1, char a2)
{
}

void *ctu::Logger::getTrackedLoggerName@<X0>(char **this@<X0>, void *a2@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a2, this[13]);
}

void *non-virtual thunk to'ctu::Logger::getTrackedLoggerName@<X0>(char **this@<X0>, void *a2@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a2, this[5]);
}

uint64_t ctu::Logger::getTrackedLogLevel(ctu::Logger *this)
{
  return *((unsigned __int8 *)this + 40);
}

uint64_t non-virtual thunk to'ctu::Logger::getTrackedLogLevel(ctu::Logger *this)
{
  return *((unsigned __int8 *)this - 24);
}

void ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase(ctu::LoggerCommonBase *a1)
{
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase(a1);

  operator delete(v1);
}

void ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::buildMessage(uint64_t a1@<X0>, char a2@<W1>, ctu::LogMessageBuffer *a3@<X2>, void *a4@<X8>)
{
  __int16 v8 = (void *)ctu::Clock::now_in_nanoseconds((ctu::Clock *)a1);
  if (*(char *)(a1 + 31) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else {
    std::string __p = *(std::string *)(a1 + 8);
  }
  ctu::LogMessageBuffer::str(a3);
  v10[0] = &unk_1EE2F64E8;
  v10[1] = v8;
  char v11 = a2;
  std::string v12 = __p;
  memset(&__p, 0, sizeof(__p));
  long long v13 = *(_OWORD *)a3;
  uint64_t v14 = *((void *)a3 + 2);
  *(void *)a3 = 0;
  *((void *)a3 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
  *((void *)a3 + 2) = 0;
  long long v15 = *((_OWORD *)a3 + 2);
  uint64_t v16 = *((void *)a3 + 6);
  *((void *)a3 + 4) = 0;
  *((void *)a3 + 5) = 0;
  *((void *)a3 + 6) = 0;
  std::allocate_shared[abi:ne180100]<ctu::LogMessage,std::allocator<ctu::LogMessage>,ctu::LogMessage,void>((const ctu::LogMessage *)v10, a4);
  ctu::LogMessage::~LogMessage(v10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1920971DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog(uint64_t a1, char a2, ctu::LogMessageBuffer *a3)
{
  uint64_t v4 = *(void *)(a1 + 48);
  BOOL v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v4)
  {
    unsigned __int8 v5 = atomic_load((unsigned __int8 *)(v4 + 216));
    if (v5)
    {
      ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::buildMessage(a1, a2, a3, &v6);
      ctu::LogServer::log(v4, (uint64_t)&v6);
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
    }
  }
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_19209727C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

void *ctu::OsLogLogger::OsLogLogger(void *a1, void **a2)
{
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::SharedRef(a1, *a2);
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v6 = v4;
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v6);
  return a1;
}

{
  void *v4;
  void *v6;

  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::SharedRef(a1, *a2);
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v6 = v4;
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v6);
  return a1;
}

void **ctu::OsLogLogger::operator=(void **a1, void **a2)
{
  BOOL v3 = *a2;
  if (*a2) {
    os_retain(*a2);
  }
  uint64_t v4 = *a1;
  *a1 = 0;
  if (&v6 != a1)
  {
    __int16 v8 = 0;
    *a1 = v3;
    uint64_t v6 = 0;
    ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v8);
    BOOL v3 = v6;
  }
  uint64_t v7 = 0;
  __int16 v8 = v3;
  uint64_t v6 = v4;
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v8);
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v7);
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v6);
  return a1;
}

{
  void *v4;
  void *v5;
  void *v6;
  void *v8;
  void *v9;
  void *v10;

  uint64_t v4 = *a2;
  if (*a2)
  {
    os_retain(*a2);
    unsigned __int8 v5 = *a2;
  }
  else
  {
    unsigned __int8 v5 = 0;
  }
  *a2 = 0;
  uint64_t v10 = v5;
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v10);
  uint64_t v6 = *a1;
  *a1 = 0;
  if (&v8 != a1)
  {
    uint64_t v10 = 0;
    *a1 = v4;
    __int16 v8 = 0;
    ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v10);
    uint64_t v4 = v8;
  }
  char v9 = 0;
  uint64_t v10 = v4;
  __int16 v8 = v6;
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v10);
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v9);
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v8);
  return a1;
}

ctu::StaticLogger *ctu::StaticLogger::StaticLogger(ctu::StaticLogger *this)
{
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_12);
  ctu::LoggerCommonBase::LoggerCommonBase((uint64_t)this, (long long *)__p, MEMORY[0x1E4F14500]);
  *(void *)this = &unk_1EE2F6530;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  *(void *)this = &unk_1EE2F6660;
  return this;
}

void sub_192097578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::LoggerBase(uint64_t a1, long long *a2, void *a3)
{
  uint64_t result = (void *)ctu::LoggerCommonBase::LoggerCommonBase(a1, a2, MEMORY[0x1E4F14500]);
  *uint64_t result = &unk_1EE2F6530;
  uint64_t v5 = a3[1];
  result[6] = *a3;
  result[7] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void ctu::StaticLogger::~StaticLogger(ctu::StaticLogger *this)
{
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase(this);

  operator delete(v1);
}

uint64_t ctu::StaticLogger::StaticLogger(uint64_t a1, long long *a2, void *a3)
{
  char v4 = ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::LoggerBase(a1, a2, a3);
  *char v4 = &unk_1EE2F6660;
  uint64_t v5 = v4[6];
  if (v5) {
    *(unsigned char *)(a1 + 4ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = ctu::LogServer::getCurrentLogLevel(v5, (void *)(a1 + 8));
  }
  return a1;
}

void sub_192097680(_Unwind_Exception *a1)
{
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase(v1);
  _Unwind_Resume(a1);
}

uint64_t ctu::StaticLogger::updateLogLevel(ctu::StaticLogger *this)
{
  uint64_t result = *((void *)this + 6);
  if (result)
  {
    uint64_t result = ctu::LogServer::getCurrentLogLevel(result, (void *)this + 1);
    *((unsigned char *)this + 4ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = result;
  }
  return result;
}

uint64_t ctu::StaticLogger::StaticLogger(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = (void *)a2[1];
  uint64_t v10 = *a2;
  char v11 = v6;
  if (v6)
  {
    os_retain(v6);
    uint64_t v7 = (void *)a2[1];
  }
  else
  {
    uint64_t v7 = 0;
  }
  a2[1] = 0;
  std::string v12 = v7;
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v12);
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::LoggerBase(a1, (uint64_t)&v10, a3);
  ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(&v11);
  *(void *)a1 = &unk_1EE2F6660;
  uint64_t v8 = *(void *)(a1 + 48);
  if (v8) {
    *(unsigned char *)(a1 + 4ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = ctu::LogServer::getCurrentLogLevel(v8, (void *)(a1 + 8));
  }
  return a1;
}

void sub_192097784(_Unwind_Exception *a1)
{
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase(v1);
  _Unwind_Resume(a1);
}

ctu::LoggerCommonBase *ctu::StaticLogger::StaticLogger(ctu::LoggerCommonBase *a1, const ctu::LoggerCommonBase *a2)
{
  uint64_t result = ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::LoggerBase(a1, a2);
  *(void *)uint64_t result = &unk_1EE2F6660;
  return result;
}

{
  ctu::LoggerCommonBase *result;

  uint64_t result = ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::LoggerBase(a1, a2);
  *(void *)uint64_t result = &unk_1EE2F6660;
  return result;
}

ctu::LoggerCommonBase *ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::LoggerBase(ctu::LoggerCommonBase *a1, const ctu::LoggerCommonBase *a2)
{
  uint64_t result = ctu::LoggerCommonBase::LoggerCommonBase(a1, a2);
  *(void *)uint64_t result = &unk_1EE2F6530;
  uint64_t v4 = *((void *)a2 + 7);
  *((void *)result + 6) = *((void *)a2 + 6);
  *((void *)result + 7) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

std::string *ctu::StaticLogger::setLogDomain(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 8), a2);
}

void ctu::destr_function(ctu *this, void *a2)
{
  if (this)
  {
    BOOL v3 = *(void **)this;
    if (v3)
    {
      *((void *)this + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v3;
      operator delete(v3);
    }
    operator delete(this);
  }
}

void ctu::initThreadId(ctu *this)
{
  if ((_MergedGlobals_5 & 1) == 0)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB4653C0, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_1EB4653C0))
    {
      __cxa_atexit(MEMORY[0x1E4FBA268], &ctu::initThreadId(void)::g_pages_mutex, &dword_192046000);
      __cxa_guard_release(&qword_1EB4653C0);
    }
    std::mutex::lock(&ctu::initThreadId(void)::g_pages_mutex);
    if ((_MergedGlobals_5 & 1) == 0)
    {
      pthread_key_create((pthread_key_t *)&qword_1EB4653C8, (void (__cdecl *)(void *))ctu::destr_function);
      _MergedGlobals_5 = 1;
    }
    std::mutex::unlock(&ctu::initThreadId(void)::g_pages_mutex);
  }
}

uint64_t ctu::getPthreadKey(ctu *this)
{
  return qword_1EB4653C8;
}

void ctu::TagVector::push_back(ctu::TagVector *this, int a2)
{
  uint64_t v5 = (_DWORD *)*((void *)this + 1);
  unint64_t v4 = *((void *)this + 2);
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = *(_DWORD **)this;
    uint64_t v8 = ((uint64_t)v5 - *(void *)this) >> 2;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 62) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v4 - (void)v7;
    if (v10 >> 1 > v9) {
      unint64_t v9 = v10 >> 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      std::string v12 = (char *)operator new(4 * v11);
    }
    else
    {
      std::string v12 = 0;
    }
    long long v13 = &v12[4 * v8];
    *(_DWORD *)long long v13 = a2;
    uint64_t v6 = v13 + 4;
    while (v5 != v7)
    {
      int v14 = *--v5;
      *((_DWORD *)v13 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v14;
      v13 -= 4;
    }
    *(void *)this = v13;
    *((void *)this + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v6;
    *((void *)this + 2) = &v12[4 * v11];
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    *uint64_t v5 = a2;
    uint64_t v6 = v5 + 1;
  }
  *((void *)this + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v6;
  ++*((_DWORD *)this + 6);
}

uint64_t ctu::TagVector::pop_back(uint64_t this)
{
  *(void *)(this + 8) -= 4;
  int v1 = *(_DWORD *)(this + 24);
  if (v1) {
    *(_DWORD *)(this + 24) = v1 - 1;
  }
  return this;
}

void ctu::TagVector::getTagLabel(ctu::TagVector *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  unint64_t v22 = 0;
  uint64_t v3 = *((void *)this + 1);
  if (v3 == *(void *)this)
  {
    long long v13 = 0;
    std::string v12 = 0;
  }
  else
  {
    do
    {
      memset(&v19, 170, sizeof(v19));
      unsigned int v5 = *(_DWORD *)(v3 - 4);
      v3 -= 4;
      std::to_string(&v19, v5);
      if (*((_DWORD *)this + 6))
      {
        if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t size = HIBYTE(v19.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t size = v19.__r_.__value_.__l.__size_;
        }
        memset(&v18, 170, sizeof(v18));
        std::string::basic_string[abi:ne180100]((uint64_t)&v18, size + 1);
        if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v7 = &v18;
        }
        else {
          uint64_t v7 = (std::string *)v18.__r_.__value_.__r.__words[0];
        }
        if (size)
        {
          if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v8 = &v19;
          }
          else {
            uint64_t v8 = (std::string *)v19.__r_.__value_.__r.__words[0];
          }
          memmove(v7, v8, size);
        }
        *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + size) = 43;
        if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v19.__r_.__value_.__l.__data_);
        }
        std::string v19 = v18;
        --*((_DWORD *)this + 6);
      }
      unint64_t v9 = v21;
      if ((unint64_t)v21 >= v22)
      {
        unint64_t v11 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v20, (long long *)&v19);
      }
      else
      {
        if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v21, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
        }
        else
        {
          long long v10 = *(_OWORD *)&v19.__r_.__value_.__l.__data_;
          v21->__r_.__value_.__r.__words[2] = v19.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
        }
        unint64_t v11 = v9 + 1;
      }
      uint64_t v21 = v11;
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v19.__r_.__value_.__l.__data_);
      }
    }
    while (v3 != *(void *)this);
    std::string v12 = v20;
    long long v13 = v21;
    if (v20 != v21)
    {
      int v14 = v21 - 1;
      if (&v21[-1] > v20)
      {
        do
        {
          std::string::size_type v15 = v12->__r_.__value_.__r.__words[0];
          long long v16 = *(_OWORD *)&v12->__r_.__value_.__r.__words[1];
          long long v17 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
          v12->__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v17;
          ++v12;
          v14->__r_.__value_.__r.__words[0] = v15;
          *(_OWORD *)&v14->__r_.__value_.__r.__words[1] = v16;
          --v14;
        }
        while (v12 < v14);
        std::string v12 = v20;
        long long v13 = v21;
      }
    }
  }
  ctu::join<std::__wrap_iter<std::string *>>(v12, v13, ",", 1uLL, a2);
  v19.__r_.__value_.__r.__words[0] = (std::string::size_type)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
}

void sub_192097CB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21)
{
  std::string __p = &a20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void ctu::Logger::~Logger(ctu::Logger *this)
{
  ctu::SharedSynchronizable<ctu::RestModuleState>::~SharedSynchronizable((void *)this + 9);

  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase(this);
}

{
  void *v2;
  uint64_t vars8;

  ctu::SharedSynchronizable<ctu::RestModuleState>::~SharedSynchronizable((void *)this + 9);
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase(this);

  operator delete(v2);
}

void non-virtual thunk to'ctu::Logger::~Logger(ctu::Logger *this)
{
  int v1 = (ctu::Logger *)((char *)this - 64);
  ctu::SharedSynchronizable<ctu::RestModuleState>::~SharedSynchronizable((void *)this + 1);

  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase(v1);
}

{
  ctu::LoggerCommonBase *v1;
  void *v2;
  uint64_t vars8;

  int v1 = (ctu::Logger *)((char *)this - 64);
  ctu::SharedSynchronizable<ctu::RestModuleState>::~SharedSynchronizable((void *)this + 1);
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase(v1);

  operator delete(v2);
}

void std::__shared_ptr_pointer<ctu::Logger *,std::shared_ptr<ctu::Logger> ctu::SharedSynchronizable<ctu::Logger>::make_shared_ptr<ctu::Logger>(ctu::Logger*)::{lambda(ctu::Logger *)#1},std::allocator<ctu::Logger>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<ctu::Logger *,std::shared_ptr<ctu::Logger> ctu::SharedSynchronizable<ctu::Logger>::make_shared_ptr<ctu::Logger>(ctu::Logger*)::{lambda(ctu::Logger *)#1},std::allocator<ctu::Logger>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<ctu::Logger *,std::shared_ptr<ctu::Logger> ctu::SharedSynchronizable<ctu::Logger>::make_shared_ptr<ctu::Logger>(ctu::Logger*)::{lambda(ctu::Logger *)#1},std::allocator<ctu::Logger>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<ctu::Logger> ctu::SharedSynchronizable<ctu::Logger>::make_shared_ptr<ctu::Logger>(ctu::Logger*)::{lambda(ctu::Logger*)#1}::operator() const(ctu::Logger*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

uint64_t ___ZNK3ctu20SharedSynchronizableINS_6LoggerEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void __copy_helper_block_e8_32b40c40_ZTSNSt3__110shared_ptrIKN3ctu6LoggerEEE(void *a1, uint64_t a2)
{
  _Block_object_assign(a1 + 4, *(const void **)(a2 + 32), 7);
  uint64_t v4 = *(void *)(a2 + 48);
  a1[5] = *(void *)(a2 + 40);
  a1[6] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
}

void __destroy_helper_block_e8_32b40c40_ZTSNSt3__110shared_ptrIKN3ctu6LoggerEEE(uint64_t a1)
{
  unsigned int v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(const void **)(a1 + 32);

  _Block_object_dispose(v3, 7);
}

void *std::allocate_shared[abi:ne180100]<ctu::LogMessage,std::allocator<ctu::LogMessage>,ctu::LogMessage,void>@<X0>(const ctu::LogMessage *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x78uLL);
  uint64_t result = std::__shared_ptr_emplace<ctu::LogMessage>::__shared_ptr_emplace[abi:ne180100]<ctu::LogMessage,std::allocator<ctu::LogMessage>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_192097F9C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<ctu::LogMessage>::__shared_ptr_emplace[abi:ne180100]<ctu::LogMessage,std::allocator<ctu::LogMessage>,0>(void *a1, const ctu::LogMessage *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EE2F8998;
  ctu::LogMessage::LogMessage((ctu::LogMessage *)(a1 + 3), a2);
  return a1;
}

void sub_192097FF8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ctu::LogMessage>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE2F8998;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ctu::LogMessage>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE2F8998;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<ctu::LogMessage>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

ctu::LogMessage *ctu::LogMessage::LogMessage(ctu::LogMessage *this, const ctu::LogMessage *a2)
{
  *(void *)this = &unk_1EE2F64E8;
  uint64_t v4 = *((void *)a2 + 1);
  *((unsigned char *)this + 16) = *((unsigned char *)a2 + 16);
  *((void *)this + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v4;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 1, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(_OWORD *)((char *)a2 + 24);
    *((void *)this + 5) = *((void *)a2 + 5);
    *(_OWORD *)((char *)this + 24) = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 2, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v6 = *((_OWORD *)a2 + 3);
    *((void *)this + 8) = *((void *)a2 + 8);
    *((_OWORD *)this + 3) = v6;
  }
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 1ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
  uint64_t v8 = (long long *)*((void *)a2 + 9);
  uint64_t v7 = (long long *)*((void *)a2 + 10);
  if (v7 != v8)
  {
    std::vector<std::string>::__vallocate[abi:ne180100]((void *)this + 9, 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)v8) >> 3));
    *((void *)this + 10) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)this + 88, v8, v7, *((std::string **)this + 10));
  }
  return this;
}

void sub_1920981B8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::XpcServer::XpcServer(uint64_t a1, uint64_t a2, xpc_object_t *a3, NSObject **a4)
{
  uint64_t v7 = (void *)(a1 + 8);
  uint64_t v8 = *a4;
  dispatch_object_t object = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  ctu::SharedSynchronizable<ctu::XpcServer>::SharedSynchronizable(v7, a2, 0, &object);
  if (object) {
    dispatch_release(object);
  }
  *(void *)a1 = &unk_1EE2F7DC8;
  unint64_t v9 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    long long v10 = *(_OWORD *)a2;
    *(void *)(a1 + ++*(_DWORD *)(this + 56) = *(void *)(a2 + 16);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  xpc_object_t v11 = *a3;
  long long v13 = v11;
  if (v11)
  {
    xpc_retain(v11);
  }
  else
  {
    xpc_object_t v11 = xpc_null_create();
    long long v13 = v11;
  }
  ctu::XpcServerHelper::XpcServerHelper((void **)(a1 + 64), &v13);
  xpc_release(v11);
  return a1;
}

void sub_1920982EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  ctu::SharedSynchronizable<ctu::RestModuleState>::~SharedSynchronizable(v10);
  _Unwind_Resume(a1);
}

void *ctu::SharedSynchronizable<ctu::XpcServer>::SharedSynchronizable(void *a1, uint64_t a2, dispatch_queue_attr_t attr, dispatch_object_t *a4)
{
  if (*(char *)(a2 + 23) >= 0) {
    long long v6 = (const char *)a2;
  }
  else {
    long long v6 = *(const char **)a2;
  }
  uint64_t v7 = *a4;
  if (*a4)
  {
    dispatch_retain(*a4);
    dispatch_retain(v7);
    uint64_t v8 = dispatch_queue_create_with_target_V2(v6, attr, v7);
  }
  else
  {
    uint64_t v8 = dispatch_queue_create(v6, attr);
  }
  unint64_t v9 = v8;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  a1[3] = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  if (v9) {
    dispatch_release(v9);
  }
  if (v7)
  {
    dispatch_release(v7);
    dispatch_release(v7);
  }
  return a1;
}

void ctu::XpcServer::~XpcServer(ctu::XpcServer *this)
{
  *(void *)this = &unk_1EE2F7DC8;
  ctu::XpcServerHelper::~XpcServerHelper((xpc_connection_t *)this + 8);
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  ctu::SharedSynchronizable<ctu::RestModuleState>::~SharedSynchronizable((void *)this + 1);
}

void ctu::XpcServer::setListener_sync(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v4 = *a2;
  xpc_object_t v3 = v4;
  *a2 = xpc_null_create();
  ctu::XpcServerHelper::setListener((xpc_connection_t *)(a1 + 64), &v4);
  xpc_release(v3);
}

void sub_1920984A0(_Unwind_Exception *a1)
{
  xpc_release(v1);
  _Unwind_Resume(a1);
}

uint64_t ctu::XpcServer::getListener_sync(ctu::XpcServer *this)
{
  return (uint64_t)this + 64;
}

void ctu::XpcServer::startListener_sync(ctu::XpcServer *this)
{
  unsigned int v2 = (void *)((char *)this + 8);
  xpc_object_t v3 = *((void *)this + 3);
  dispatch_object_t object = v3;
  if (v3) {
    dispatch_retain(v3);
  }
  std::shared_ptr<ctu::XpcServer>::shared_ptr[abi:ne180100]<ctu::XpcServer,void>(&v8, v2);
  xpc_object_t v4 = v9;
  uint64_t v5 = v8;
  long long v6 = v9;
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  ctu::XpcServerHelper::startListener<ctu::XpcServer>((xpc_connection_t *)this + 8, &object, &v5);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  if (object) {
    dispatch_release(object);
  }
}

void sub_192098550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, dispatch_object_t object)
{
  if (a11) {
    std::__shared_weak_count::__release_weak(a11);
  }
  if (object) {
    dispatch_release(object);
  }
  _Unwind_Resume(exception_object);
}

void ctu::XpcServerHelper::startListener<ctu::XpcServer>(xpc_connection_t *a1, dispatch_queue_t *a2, uint64_t *a3)
{
  if (MEMORY[0x192FEE1B0](*a1) == MEMORY[0x1E4F14578])
  {
    long long v6 = *a1;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 1174405120;
    void v9[2] = ___ZN3ctu15XpcServerHelper13startListenerINS_9XpcServerEEEvN8dispatch5queueENSt3__18weak_ptrIT_EE_block_invoke;
    void v9[3] = &__block_descriptor_tmp_21;
    uint64_t v8 = *a3;
    uint64_t v7 = (std::__shared_weak_count *)a3[1];
    void v9[4] = a1;
    void v9[5] = v8;
    long long v10 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    xpc_object_t v11 = v6;
    xpc_connection_set_event_handler(v6, v9);
    xpc_connection_set_target_queue(*a1, *a2);
    xpc_connection_resume(*a1);
    if (v10) {
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_19209865C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  _Unwind_Resume(exception_object);
}

void ctu::XpcServer::handleListenerError(void (***a1)(void, xpc_object_t *), void **a2)
{
  xpc_object_t v3 = *a2;
  xpc_object_t object = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (**a1)(a1, &object);
  xpc_release(object);
}

void sub_1920986F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void ctu::XpcServer::handleClientMessage(uint64_t a1, xpc_object_t *a2, void **a3, uint64_t *a4)
{
}

void ctu::XpcServer::handleClientError(uint64_t a1, void **a2, void **a3)
{
  uint64_t v5 = *a2;
  xpc_object_t v8 = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t v8 = xpc_null_create();
  }
  long long v6 = *a3;
  xpc_object_t object = v6;
  if (v6) {
    xpc_retain(v6);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(uint64_t, xpc_object_t *, xpc_object_t *))(*(void *)a1 + 16))(a1, &v8, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v8);
}

void sub_1920987CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, xpc_object_t a10)
{
}

uint64_t __copy_helper_block_e8_40c39_ZTSNSt3__18weak_ptrIN3ctu9XpcServerEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c39_ZTSNSt3__18weak_ptrIN3ctu9XpcServerEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void __destroy_helper_block_e8_32c39_ZTSNSt3__18weak_ptrIN3ctu9XpcServerEEE56c70_ZTSN8dispatch5blockIU13block_pointerFvN3xpc10connectionENS1_4dictEEEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 56);
  if (v2) {
    _Block_release(v2);
  }
  xpc_object_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

double ctu::MemoryBufferedLogWriter::create@<D0>(ctu::MemoryBufferedLogWriter *this@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  long long v6 = (char *)operator new(0x58uLL);
  *(void *)long long v6 = &unk_1EE2F7050;
  double result = 0.0;
  *(_OWORD *)(v6 + 8) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  *((void *)v6 + 7) = this;
  *((void *)v6 + 8) = a2;
  *((void *)v6 + 9) = 0;
  *((void *)v6 + 10) = 0;
  *a3 = v6;
  return result;
}

double ctu::MemoryBufferedLogWriter::MemoryBufferedLogWriter(ctu::MemoryBufferedLogWriter *this, uint64_t a2, uint64_t a3)
{
  *(void *)this = &unk_1EE2F7050;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 7) = a2;
  *((void *)this + 8) = a3;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  return result;
}

{
  double result;

  *(void *)this = &unk_1EE2F7050;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 7) = a2;
  *((void *)this + 8) = a3;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  return result;
}

void ctu::MemoryBufferedLogWriter::~MemoryBufferedLogWriter(ctu::MemoryBufferedLogWriter *this)
{
  *(void *)this = &unk_1EE2F7050;
  std::deque<std::shared_ptr<ctu::LogMessage>>::~deque[abi:ne180100]((void *)this + 1);
}

{
  *(void *)this = &unk_1EE2F7050;
  std::deque<std::shared_ptr<ctu::LogMessage>>::~deque[abi:ne180100]((void *)this + 1);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EE2F7050;
  std::deque<std::shared_ptr<ctu::LogMessage>>::~deque[abi:ne180100]((void *)this + 1);

  operator delete(this);
}

__n128 ctu::MemoryBufferedLogWriter::drain@<Q0>(ctu::MemoryBufferedLogWriter *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = *(_OWORD *)((char *)this + 8);
  uint64_t v2 = *((void *)this + 4);
  *(void *)(a2 + 16) = *((void *)this + 3);
  *(void *)(a2 + 24) = v2;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  __n128 result = *(__n128 *)((char *)this + 40);
  *(__n128 *)(a2 + 32) = result;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  return result;
}

uint64_t ctu::MemoryBufferedLogWriter::getDroppedMessageCount(ctu::MemoryBufferedLogWriter *this)
{
  return *((void *)this + 10);
}

void ctu::MemoryBufferedLogWriter::dropFrontMessage(ctu::MemoryBufferedLogWriter *this)
{
  unint64_t v2 = *((void *)this + 5);
  uint64_t v3 = *(void *)(*((void *)this + 2) + ((v2 >> 5) & 0x7FFFFFFFFFFFFF8));
  uint64_t v4 = *(void *)(v3 + 16 * v2);
  if (*(char *)(v4 + 71) < 0) {
    uint64_t v5 = *(void *)(v4 + 56);
  }
  else {
    uint64_t v5 = *(unsigned __int8 *)(v4 + 71);
  }
  *((void *)this + 9) -= v5;
  long long v6 = *(std::__shared_weak_count **)(v3 + 16 * v2 + 8);
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    unint64_t v2 = *((void *)this + 5);
  }
  uint64_t v7 = *((void *)this + 6) - 1;
  unint64_t v8 = v2 + 1;
  *((void *)this + 5) = v8;
  *((void *)this + 6) = v7;
  if (v8 >= 0x200)
  {
    operator delete(**((void ***)this + 2));
    *((void *)this + 2) += 8;
    *((void *)this + 5) -= 256;
  }
  ++*((void *)this + 10);
}

void ctu::MemoryBufferedLogWriter::write(ctu::MemoryBufferedLogWriter *this, void *a2)
{
  uint64_t v4 = *((void *)this + 7);
  if (v4 >= 1 && *((void *)this + 6) >= (unint64_t)v4)
  {
    do
      ctu::MemoryBufferedLogWriter::dropFrontMessage(this);
    while (*((void *)this + 6) >= *((void *)this + 7));
  }
  uint64_t v5 = *((void *)this + 8);
  if (v5 >= 1 && *((void *)this + 9) >= v5)
  {
    do
      ctu::MemoryBufferedLogWriter::dropFrontMessage(this);
    while (*((void *)this + 9) >= *((void *)this + 8));
  }
  uint64_t v6 = *a2;
  if (*(char *)(*a2 + 71) < 0) {
    uint64_t v7 = *(void *)(v6 + 56);
  }
  else {
    uint64_t v7 = *(unsigned __int8 *)(*a2 + 71);
  }
  unint64_t v8 = (char *)*((void *)this + 3);
  unint64_t v9 = (char *)*((void *)this + 2);
  uint64_t v10 = v8 - v9;
  *((void *)this + 9) += v7;
  if (v8 == v9) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = 32 * (v8 - v9) - 1;
  }
  unint64_t v12 = *((void *)this + 5);
  unint64_t v13 = *((void *)this + 6) + v12;
  if (v11 == v13)
  {
    int v14 = (void *)((char *)this + 8);
    if (v12 < 0x100)
    {
      uint64_t v29 = v10 >> 3;
      uint64_t v30 = (char *)*((void *)this + 4);
      uint64_t v31 = (char *)*((void *)this + 1);
      if (v10 >> 3 >= (unint64_t)((v30 - v31) >> 3))
      {
        if (v30 == v31) {
          unint64_t v32 = 1;
        }
        else {
          unint64_t v32 = (v30 - v31) >> 2;
        }
        uint64_t v88 = (uint64_t)this + 32;
        std::string __p = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ctu::LogMessage> *>>((uint64_t)this + 32, v32);
        __src = (char *)__p + 8 * v29;
        *(void *)&long long v87 = __src;
        *((void *)&v87 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = (char *)__p + 8 * v33;
        uint64_t v84 = operator new(0x1000uLL);
        std::__split_buffer<std::shared_ptr<ctu::LogMessage> *,std::allocator<std::shared_ptr<ctu::LogMessage> *> &>::push_back(&__p, &v84);
        uint64_t v34 = (char *)*((void *)this + 3);
        uint64_t v35 = (char *)__src;
        if (v34 == *((char **)this + 2))
        {
          uint64_t v51 = (char *)*((void *)this + 3);
        }
        else
        {
          do
          {
            if (v35 == __p)
            {
              if ((unint64_t)v87 >= *((void *)&v87 + 1))
              {
                if (*((char **)&v87 + 1) == v35) {
                  unint64_t v40 = 1;
                }
                else {
                  unint64_t v40 = (uint64_t)(*((void *)&v87 + 1) - (void)v35) >> 2;
                }
                BOOL v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ctu::LogMessage> *>>(v88, v40);
                uint64_t v36 = &v41[(2 * v40 + 6) & 0xFFFFFFFFFFFFFFF8];
                long long v43 = (uint64_t *)__src;
                uint64_t v44 = v36;
                uint64_t v45 = v87 - (void)__src;
                if ((void *)v87 != __src)
                {
                  uint64_t v44 = &v36[v45 & 0xFFFFFFFFFFFFFFF8];
                  uint64_t v46 = 8 * (v45 >> 3);
                  uint64_t v47 = v36;
                  do
                  {
                    uint64_t v48 = *v43++;
                    *(void *)uint64_t v47 = v48;
                    v47 += 8;
                    v46 -= 8;
                  }
                  while (v46);
                }
                std::__split_buffer<std::string>::pointer v49 = __p;
                std::string __p = v41;
                __src = v36;
                *(void *)&long long v87 = v44;
                *((void *)&v87 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = &v41[8 * v42];
                if (v49)
                {
                  operator delete(v49);
                  uint64_t v36 = (char *)__src;
                }
              }
              else
              {
                uint64_t v37 = (uint64_t)(*((void *)&v87 + 1) - v87) >> 3;
                if (v37 >= -1) {
                  uint64_t v38 = v37 + 1;
                }
                else {
                  uint64_t v38 = v37 + 2;
                }
                uint64_t v39 = v38 >> 1;
                uint64_t v36 = &v35[8 * (v38 >> 1)];
                if ((char *)v87 != v35)
                {
                  memmove(&v35[8 * (v38 >> 1)], v35, v87 - (void)v35);
                  uint64_t v35 = (char *)v87;
                }
                __src = v36;
                *(void *)&long long v87 = &v35[8 * v39];
              }
            }
            else
            {
              uint64_t v36 = v35;
            }
            uint64_t v50 = *((void *)v34 - 1);
            v34 -= 8;
            *((void *)v36 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v50;
            uint64_t v35 = (char *)__src - 8;
            __src = (char *)__src - 8;
          }
          while (v34 != *((char **)this + 2));
          uint64_t v51 = (char *)*((void *)this + 3);
        }
        uint64_t v66 = (void *)*((void *)this + 1);
        *((void *)this + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = __p;
        *((void *)this + 2) = v35;
        std::string __p = v66;
        __src = v34;
        uint64_t v67 = *((void *)this + 4);
        *(_OWORD *)((char *)this + 24) = v87;
        *(void *)&long long v87 = v51;
        *((void *)&v87 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v67;
        if (v51 != v34) {
          *(void *)&long long v87 = &v51[(v34 - v51 + 7) & 0xFFFFFFFFFFFFFFF8];
        }
        if (v66) {
          operator delete(v66);
        }
        goto LABEL_65;
      }
      if (v30 != v8)
      {
        std::string __p = operator new(0x1000uLL);
        std::__split_buffer<std::shared_ptr<ctu::LogMessage> *,std::allocator<std::shared_ptr<ctu::LogMessage> *>>::push_back((void *)this + 1, &__p);
LABEL_65:
        unint64_t v9 = (char *)*((void *)this + 2);
        unint64_t v13 = *((void *)this + 6) + *((void *)this + 5);
        uint64_t v6 = *a2;
        goto LABEL_66;
      }
      std::string __p = operator new(0x1000uLL);
      std::__split_buffer<std::shared_ptr<ctu::LogMessage> *,std::allocator<std::shared_ptr<ctu::LogMessage> *>>::push_front((uint64_t)this + 8, &__p);
      uint64_t v63 = (void *)*((void *)this + 2);
      unint64_t v8 = (char *)*((void *)this + 3);
      uint64_t v65 = *v63;
      id v64 = (char *)(v63 + 1);
      uint64_t v17 = v65;
      *((void *)this + 2) = v64;
      if (v8 == *((char **)this + 4))
      {
        uint64_t v69 = (uint64_t)&v64[-*v14];
        if ((unint64_t)v64 > *v14)
        {
          uint64_t v70 = v69 >> 3;
          BOOL v21 = v69 >> 3 < -1;
          uint64_t v71 = (v69 >> 3) + 2;
          if (v21) {
            uint64_t v72 = v71;
          }
          else {
            uint64_t v72 = v70 + 1;
          }
          uint64_t v73 = -(v72 >> 1);
          uint64_t v74 = v72 >> 1;
          int64_t v75 = &v64[-8 * v74];
          int64_t v76 = v8 - v64;
          if (v8 != v64)
          {
            memmove(&v64[-8 * v74], v64, v8 - v64);
            id v64 = (char *)*((void *)this + 2);
          }
          unint64_t v8 = &v75[v76];
          uint64_t v28 = &v64[8 * v73];
          goto LABEL_23;
        }
        if (v8 == (char *)*v14) {
          unint64_t v77 = 1;
        }
        else {
          unint64_t v77 = (uint64_t)&v8[-*v14] >> 2;
        }
        unint64_t v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ctu::LogMessage> *>>((uint64_t)this + 32, v77);
        uint64_t v54 = &v53[8 * (v77 >> 2)];
        unint64_t v56 = &v53[8 * v78];
        uint64_t v79 = (uint64_t *)*((void *)this + 2);
        unint64_t v8 = v54;
        uint64_t v80 = *((void *)this + 3) - (void)v79;
        if (v80)
        {
          unint64_t v8 = &v54[v80 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v81 = 8 * (v80 >> 3);
          unint64_t v82 = &v53[8 * (v77 >> 2)];
          do
          {
            uint64_t v83 = *v79++;
            *(void *)unint64_t v82 = v83;
            v82 += 8;
            v81 -= 8;
          }
          while (v81);
        }
LABEL_56:
        unsigned long long v62 = (void *)*((void *)this + 1);
        *((void *)this + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v53;
        *((void *)this + 2) = v54;
        *((void *)this + 3) = v8;
        *((void *)this + 4) = v56;
        if (v62)
        {
          operator delete(v62);
          unint64_t v8 = (char *)*((void *)this + 3);
        }
      }
    }
    else
    {
      std::string::size_type v15 = (char *)*((void *)this + 4);
      *((void *)this + 5) = v12 - 256;
      uint64_t v18 = *(void *)v9;
      long long v16 = v9 + 8;
      uint64_t v17 = v18;
      *((void *)this + 2) = v16;
      if (v8 == v15)
      {
        uint64_t v19 = (uint64_t)&v16[-*v14];
        if ((unint64_t)v16 > *v14)
        {
          uint64_t v20 = v19 >> 3;
          BOOL v21 = v19 >> 3 < -1;
          uint64_t v22 = (v19 >> 3) + 2;
          if (v21) {
            uint64_t v23 = v22;
          }
          else {
            uint64_t v23 = v20 + 1;
          }
          uint64_t v24 = -(v23 >> 1);
          uint64_t v25 = v23 >> 1;
          uint64_t v26 = &v16[-8 * v25];
          int64_t v27 = v8 - v16;
          if (v8 != v16)
          {
            memmove(&v16[-8 * v25], v16, v8 - v16);
            unint64_t v8 = (char *)*((void *)this + 2);
          }
          uint64_t v28 = &v8[8 * v24];
          unint64_t v8 = &v26[v27];
LABEL_23:
          *((void *)this + 2) = v28;
          *((void *)this + 3) = v8;
          goto LABEL_59;
        }
        if (v8 == (char *)*v14) {
          unint64_t v52 = 1;
        }
        else {
          unint64_t v52 = (uint64_t)&v8[-*v14] >> 2;
        }
        unint64_t v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ctu::LogMessage> *>>((uint64_t)this + 32, v52);
        uint64_t v54 = &v53[8 * (v52 >> 2)];
        unint64_t v56 = &v53[8 * v55];
        uint64_t v57 = (uint64_t *)*((void *)this + 2);
        unint64_t v8 = v54;
        uint64_t v58 = *((void *)this + 3) - (void)v57;
        if (v58)
        {
          unint64_t v8 = &v54[v58 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v59 = 8 * (v58 >> 3);
          unsigned int v60 = &v53[8 * (v52 >> 2)];
          do
          {
            uint64_t v61 = *v57++;
            *(void *)unsigned int v60 = v61;
            v60 += 8;
            v59 -= 8;
          }
          while (v59);
        }
        goto LABEL_56;
      }
    }
LABEL_59:
    *(void *)unint64_t v8 = v17;
    *((void *)this + 3) += 8;
    goto LABEL_65;
  }
LABEL_66:
  uint64_t v68 = (void *)(*(void *)&v9[(v13 >> 5) & 0x7FFFFFFFFFFFFF8] + 16 * v13);
  void *v68 = v6;
  v68[1] = a2[1];
  *a2 = 0;
  a2[1] = 0;
  ++*((void *)this + 6);
}

void sub_192099008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  operator delete(v12);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t ctu::XpcClient::XpcClient(uint64_t a1, char *label, NSObject **a3)
{
  uint64_t v4 = label;
  if (label[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)label, *((void *)label + 1));
    if (v4[23] < 0) {
      uint64_t v4 = *(char **)v4;
    }
  }
  else
  {
    std::string v9 = *(std::string *)label;
  }
  uint64_t v6 = dispatch_queue_create(v4, 0);
  unint64_t v8 = v6;
  ctu::XpcClient::XpcClient(a1, (long long *)&v9, &v8, a3);
  if (v6) {
    dispatch_release(v6);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  return a1;
}

void ctu::XpcClient::~XpcClient(void **this)
{
  *this = &unk_1EE2F7D30;
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  ctu::XpcClientHelper::~XpcClientHelper(this + 5);
  ctu::SharedSynchronizable<ctu::RestModuleState>::~SharedSynchronizable(this + 1);
}

void ctu::XpcClient::handleServerError(void (***a1)(void, xpc_object_t *), void **a2)
{
  uint64_t v3 = *a2;
  xpc_object_t object = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (**a1)(a1, &object);
  xpc_release(object);
}

void sub_1920991EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void __destroy_helper_block_e8_40c39_ZTSNSt3__18weak_ptrIN3ctu9XpcClientEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t TelephonyUtilWriteStackshot(uint64_t a1, int a2)
{
  return TelephonyUtilWriteStackshotWithExcCode(a1, a2, -783217523);
}

uint64_t TelephonyUtilWriteStackshotWithExcCode(uint64_t a1, int a2, int a3)
{
  uint64_t v5 = a3;
  id v6 = objc_alloc_init(MEMORY[0x1E4F28B28]);
  if (qword_1EB4653E8 != -1) {
    dispatch_once(&qword_1EB4653E8, &__block_literal_global_8);
  }
  uint64_t v7 = [NSString stringWithCString:a1 encoding:4];
  uint64_t v14 = v7;
  if (a2)
  {
    std::string::size_type v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_MergedGlobals_6;
    if (_MergedGlobals_6)
    {
      uint64_t v16 = getpid();
      if (v15(v16, v5, v14)) {
        goto LABEL_10;
      }
    }
LABEL_9:
    _TelephonyUtilDebugPrint((uint64_t)"TelephonyUtilWriteStackshotWithExcCode", (uint64_t)"Failed to do stack shot/simulate crash, reason '%s', asCrash %u\n", v8, v9, v10, v11, v12, v13, a1);
    goto LABEL_10;
  }
  if (!off_1EB4653D8 || (off_1EB4653D8(v7, v5) & 1) == 0) {
    goto LABEL_9;
  }
LABEL_10:

  return [v6 drain];
}

void TelephonyUtilTriggerNMI()
{
  if (_TUQueryBuildInformationOnce != -1) {
    dispatch_once(&_TUQueryBuildInformationOnce, &__block_literal_global_34);
  }
  if (_TUIsInternalBuildCached == 1)
  {
    JUMPOUT(0x192FEDDE0);
  }
}

void *__TelephonyUtilLoadCrashSupport_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = dlopen("/System/Library/PrivateFrameworks/CrashReporterSupport.framework/CrashReporterSupport", 1);
  qword_1EB4653E0 = (uint64_t)v9;
  if (v9)
  {
    off_1EB4653D8 = (uint64_t (*)(void, void))dlsym(v9, "WriteStackshotReport");
    __n128 result = dlsym((void *)qword_1EB4653E0, "SimulateCrash");
    _MergedGlobals_6 = result;
  }
  else
  {
    return (void *)_TelephonyUtilDebugPrint((uint64_t)"TelephonyUtilLoadCrashSupport_block_invoke", (uint64_t)"Unable to load CrashReporterSupport framework.\n", v10, v11, v12, v13, v14, v15, a9);
  }
  return result;
}

const char *ctu::rest::asString(int a1)
{
  if ((a1 - 1) > 5) {
    return "?";
  }
  else {
    return off_1E5744560[a1 - 1];
  }
}

void ctu::rest::createReply(xpc_object_t *this@<X0>, _anonymous_namespace_ *a2@<X8>)
{
  *(void *)a2 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)a2 = xpc_null_create();
  uint64_t v5 = MEMORY[0x192FEE1B0](*this);
  uint64_t v6 = MEMORY[0x1E4F14590];
  if (v5 == MEMORY[0x1E4F14590])
  {
    xpc_object_t reply = xpc_dictionary_create_reply(*this);
    if (reply || (xpc_object_t reply = xpc_null_create()) != 0)
    {
      if (MEMORY[0x192FEE1B0](reply) == v6)
      {
        xpc_retain(reply);
        xpc_object_t v8 = reply;
      }
      else
      {
        xpc_object_t v8 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v8 = xpc_null_create();
      xpc_object_t reply = 0;
    }
    xpc_object_t v9 = xpc_null_create();
    uint64_t v10 = *(void **)a2;
    *(void *)a2 = v8;
    xpc_release(v10);
    xpc_release(v9);
    xpc_release(reply);
    if (MEMORY[0x192FEE1B0](*(void *)a2) == v6)
    {
    }
  }
}

void sub_19209957C(_Unwind_Exception *a1)
{
  xpc::dict::~dict(v1);
  _Unwind_Resume(a1);
}

void ctu::rest::createReplyWithValue(xpc_object_t *a1@<X0>, xpc_object_t *a2@<X1>, _anonymous_namespace_ *a3@<X8>)
{
  *(void *)a3 = 0xAAAAAAAAAAAAAAAALL;
  ctu::rest::createReply(a1, a3);
  if (MEMORY[0x192FEE1B0](*(void *)a3) == MEMORY[0x1E4F14590]) {
    ctu::rest::updateReplyValue((uint64_t)a3, a2);
  }
}

void sub_1920995F4(_Unwind_Exception *a1)
{
  xpc::dict::~dict(v1);
  _Unwind_Resume(a1);
}

void ctu::rest::createPingMessage(void *a1@<X8>)
{
  *a1 = 0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v4 = v3;
  if (v3)
  {
    *a1 = v3;
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    *a1 = v4;
    if (!v4)
    {
      xpc_object_t v5 = xpc_null_create();
      xpc_object_t v4 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x192FEE1B0](v4) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v4);
    goto LABEL_9;
  }
  xpc_object_t v5 = xpc_null_create();
LABEL_8:
  *a1 = v5;
LABEL_9:
  xpc_release(v4);
  xpc_object_t v7 = xpc_string_create("ping");
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  v6[0] = a1;
  v6[1] = "o";
  xpc::dict::object_proxy::operator=((uint64_t)v6, &v7, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v7);
}

void ctu::rest::createAutoReplyValue(xpc_object_t *this@<X0>, void *a2@<X8>)
{
  xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  ctu::rest::createReply(this, (_anonymous_namespace_ *)&object);
  if (MEMORY[0x192FEE1B0](object) == MEMORY[0x1E4F14590]
    && (xpc_connection_t remote_connection = xpc_dictionary_get_remote_connection(*this)) != 0)
  {
    uint64_t v6 = (std::__shared_weak_count *)operator new(0x30uLL);
    v6->__shared_owners_ = 0;
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE2F8B90;
    v6[1].__vftable = (std::__shared_weak_count_vtbl *)xpc_null_create();
    v6[1].__shared_owners_ = (uint64_t)remote_connection;
    xpc_retain(remote_connection);
    v6[1].__shared_weak_owners_ = (uint64_t)object;
    xpc_object_t object = xpc_null_create();
    *a2 = v6 + 1;
    a2[1] = v6;
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  xpc_release(object);
}

void sub_192099804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void ctu::rest::RestXpcConnector::create(xpc_object_t *a1@<X0>, uint64_t *a2@<X8>)
{
  if (MEMORY[0x192FEE1B0](*a1) == MEMORY[0x1E4F14578])
  {
    xpc_object_t v4 = operator new(0x50uLL);
    xpc_object_t object = *a1;
    *a1 = xpc_null_create();
    ctu::rest::RestXpcConnector::RestXpcConnector((uint64_t)v4, &object);
    std::shared_ptr<ctu::rest::RestXpcConnector>::shared_ptr[abi:ne180100]<ctu::rest::RestXpcConnector,void>(a2, (uint64_t)v4);
    xpc_release(object);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

void sub_1920998EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

uint64_t ctu::rest::RestXpcConnector::RestXpcConnector(uint64_t a1, xpc_object_t *a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EE2F7888;
  *(void *)(a1 + 24) = *a2;
  *a2 = xpc_null_create();
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 72) = xpc_null_create();
  return a1;
}

void ctu::rest::RestXpcConnector::~RestXpcConnector(xpc_object_t *this)
{
  ctu::XpcClientHelper::~XpcClientHelper(this + 9);
  unint64_t v2 = (std::__shared_weak_count *)this[8];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  xpc_release(this[3]);
  this[3] = 0;
  xpc_object_t v3 = (std::__shared_weak_count *)this[2];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
}

{
  void *v1;
  uint64_t vars8;

  ctu::rest::RestXpcConnector::~RestXpcConnector(this);

  operator delete(v1);
}

BOOL ctu::rest::RestXpcConnector::isConnected(ctu::rest::RestXpcConnector *this)
{
  return MEMORY[0x192FEE1B0](*((void *)this + 9)) == MEMORY[0x1E4F14578];
}

void ctu::rest::RestXpcConnector::disconnect(ctu::rest::RestXpcConnector *this)
{
  uint64_t v2 = *((void *)this + 7);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }

  ctu::XpcClientHelper::setServer((void *)this + 9);
}

void ctu::rest::RestXpcConnector::flush(_xpc_connection_s **this, const group *a2)
{
  gr_name = a2->gr_name;
  if (a2->gr_name)
  {
    dispatch_retain((dispatch_object_t)a2->gr_name);
    dispatch_group_enter((dispatch_group_t)gr_name);
  }
  xpc_object_t v5 = xpc_string_create("");
  uint64_t v11 = v5;
  if (!v5)
  {
    xpc_object_t v5 = xpc_null_create();
    uint64_t v11 = v5;
  }
  xpc_object_t v6 = xpc_string_create("");
  uint64_t v10 = v6;
  if (!v6)
  {
    xpc_object_t v6 = xpc_null_create();
    uint64_t v10 = v6;
  }
  global_queue = dispatch_get_global_queue(0, 0);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 1174405120;
  void v8[2] = ___ZNK3ctu4rest16RestXpcConnector5flushERKN8dispatch5groupE_block_invoke;
  void v8[3] = &__block_descriptor_tmp_23;
  dispatch_group_t group = (dispatch_group_t)gr_name;
  if (gr_name)
  {
    dispatch_retain((dispatch_object_t)gr_name);
    dispatch_group_enter(group);
  }
  ctu::rest::RestXpcConnector::send_with_reply((uint64_t)this, "ping", &v11, &v10, global_queue, v8);
  xpc_release(v6);
  xpc_release(v5);
  ctu::XpcClientHelper::flush(this + 9, a2);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  if (gr_name)
  {
    dispatch_group_leave((dispatch_group_t)gr_name);
    dispatch_release((dispatch_object_t)gr_name);
  }
}

void sub_192099C1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, dispatch_group_t group)
{
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  if (v14)
  {
    dispatch_group_leave(v14);
    dispatch_release(v14);
  }
  _Unwind_Resume(exception_object);
}

void ctu::rest::RestXpcConnector::send_with_reply(uint64_t a1, char *string, void **a3, void **a4, NSObject *a5, void *a6)
{
  xpc_object_t message = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v11 = xpc_string_create(string);
  uint64_t v15 = v11;
  if (!v11)
  {
    xpc_object_t v11 = xpc_null_create();
    uint64_t v15 = v11;
  }
  uint64_t v12 = (const char *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0) {
    uint64_t v12 = *(const char **)v12;
  }
  xpc_object_t v13 = xpc_string_create(v12);
  uint64_t v14 = v13;
  if (!v13)
  {
    xpc_object_t v13 = xpc_null_create();
    uint64_t v14 = v13;
  }
  ctu::rest::createRestMessage(&v15, &v14, a3, a4, &message);
  xpc_release(v13);
  xpc_release(v11);
  xpc_connection_send_message_with_reply(*(xpc_connection_t *)(a1 + 72), message, a5, a6);
  xpc_release(message);
}

void sub_192099D90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
}

void ctu::rest::RestXpcConnector::send(uint64_t a1, char *string, void **a3, void **a4)
{
  xpc_object_t message = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v7 = xpc_string_create(string);
  xpc_object_t v11 = v7;
  if (!v7)
  {
    xpc_object_t v7 = xpc_null_create();
    xpc_object_t v11 = v7;
  }
  xpc_object_t v8 = (const char *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0) {
    xpc_object_t v8 = *(const char **)v8;
  }
  xpc_object_t v9 = xpc_string_create(v8);
  uint64_t v10 = v9;
  if (!v9)
  {
    xpc_object_t v9 = xpc_null_create();
    uint64_t v10 = v9;
  }
  ctu::rest::createRestMessage(&v11, &v10, a3, a4, &message);
  xpc_release(v9);
  xpc_release(v7);
  xpc_connection_send_message(*(xpc_connection_t *)(a1 + 72), message);
  xpc_release(message);
}

void sub_192099E98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
}

void ctu::rest::RestXpcConnector::send_with_reply(uint64_t a1, char *a2, void **a3, void **a4, uint64_t *a5, NSObject **a6, uint64_t a7)
{
  uint64_t v14 = operator new(0x20uLL);
  uint64_t v15 = std::__function::__value_func<void ()(xpc::object)>::__value_func[abi:ne180100]((uint64_t)v14, a7);
  uint64_t v16 = *a6;
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 1174405120;
  v19[2] = ___ZNK3ctu4rest16RestXpcConnector15send_with_replyEPKcRKN3xpc6objectES7_NSt3__18weak_ptrIKvEERKN8dispatch5queueEONS8_8functionIFvS5_EEE_block_invoke;
  v19[3] = &__block_descriptor_tmp_14;
  uint64_t v18 = *a5;
  uint64_t v17 = (std::__shared_weak_count *)a5[1];
  v19[4] = v15;
  void v19[5] = v18;
  uint64_t v20 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::rest::RestXpcConnector::send_with_reply(a1, a2, a3, a4, v16, v19);
  if (v20) {
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_192099FB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  _Unwind_Resume(exception_object);
}

void ___ZNK3ctu4rest16RestXpcConnector15send_with_replyEPKcRKN3xpc6objectES7_NSt3__18weak_ptrIKvEERKN8dispatch5queueEONS8_8functionIFvS5_EEE_block_invoke(void *a1, void *a2)
{
  xpc_object_t v3 = (void *)a1[4];
  xpc_object_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    xpc_object_t v6 = std::__shared_weak_count::lock(v4);
    if (v6)
    {
      xpc_object_t v7 = v6;
      if (a1[5])
      {
        uint64_t v8 = a1[4];
        xpc_object_t object = a2;
        if (a2) {
          xpc_retain(a2);
        }
        else {
          xpc_object_t object = xpc_null_create();
        }
        uint64_t v9 = *(void *)(v8 + 24);
        if (!v9) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, xpc_object_t *))(*(void *)v9 + 48))(v9, &object);
        xpc_release(object);
        xpc_object_t object = 0;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
  if (v3)
  {
    uint64_t v10 = std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100](v3);
    operator delete(v10);
  }
}

void sub_19209A0A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  if (v10)
  {
    xpc_object_t v13 = std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100](v10);
    operator delete(v13);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c25_ZTSNSt3__18weak_ptrIKvEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c25_ZTSNSt3__18weak_ptrIKvEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ctu::rest::RestXpcConnector::set(uint64_t a1, void **a2, void **a3)
{
}

void ctu::rest::RestXpcConnector::push(uint64_t a1, void **a2, void **a3)
{
}

void ctu::rest::RestXpcConnector::pop(uint64_t a1, void **a2, void **a3)
{
}

void ctu::rest::RestXpcConnector::notify(uint64_t a1, void **a2, void **a3)
{
}

void ctu::rest::RestXpcConnector::get(uint64_t a1, void **a2, void **a3, uint64_t *a4, NSObject **a5, uint64_t a6)
{
  xpc_object_t v6 = (std::__shared_weak_count *)a4[1];
  v7[0] = *a4;
  v7[1] = (uint64_t)v6;
  *a4 = 0;
  a4[1] = 0;
  ctu::rest::RestXpcConnector::send_with_reply(a1, "get", a2, a3, v7, a5, a6);
  if (v6)
  {
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_19209A1CC(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

void ctu::rest::RestXpcConnector::get(uint64_t a1, void **a2, uint64_t *a3, NSObject **a4, uint64_t a5)
{
  xpc_object_t v10 = xpc_null_create();
  xpc_object_t v11 = (std::__shared_weak_count *)a3[1];
  v12[0] = *a3;
  v12[1] = (uint64_t)v11;
  xpc_object_t v13 = v10;
  *a3 = 0;
  a3[1] = 0;
  ctu::rest::RestXpcConnector::send_with_reply(a1, "get", a2, &v13, v12, a4, a5);
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
  xpc_release(v10);
}

void sub_19209A288(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  xpc_release(v1);
  _Unwind_Resume(a1);
}

void ctu::rest::RestXpcConnector::handleMessage(uint64_t a1, void *a2)
{
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56)) & 1) == 0)
  {
    xpc_object_t v4 = *(std::__shared_weak_count **)(a1 + 64);
    uint64_t v6 = *(void *)(a1 + 56);
    xpc_object_t v7 = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char v5 = ctu::rest::RestConnector::visitIfNotifyMessage<std::shared_ptr<ctu::rest::RestConnectorDelegateBase>>(a2, &v6);
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    if ((v5 & 1) == 0
      && (ctu::rest::RestXpcConnector::visitIfGetMessage<ctu::rest::RestXpcConnector*>(a2, a1) & 1) == 0)
    {
      ctu::rest::RestXpcConnector::handlePingOperation((xpc_connection_t *)a1, (const xpc::dict *)a2);
    }
  }
}

void sub_19209A368(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::rest::RestXpcConnector::visitIfGetMessage<ctu::rest::RestXpcConnector*>(void *a1, uint64_t a2)
{
  xpc_object_t v11 = a1;
  uint64_t v12 = "o";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)&v11, object);
  int v5 = ctu::rest::asOperation(object, v4);
  xpc_release(object[0]);
  if (v5 != 2) {
    return 0;
  }
  xpc_object_t v11 = a1;
  uint64_t v12 = "r";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)&v11, &v10);
  object[0] = a1;
  object[1] = "v";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)object, &v9);
  uint64_t Message = ctu::rest::RestXpcConnector::handleGetMessage(a2, (xpc_object_t *)a1, (uint64_t)&v10, (uint64_t)&v9);
  xpc_release(v9);
  xpc_release(v10);
  return Message;
}

void sub_19209A454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, uint64_t a10, xpc_object_t object, xpc_object_t a12)
{
}

BOOL ctu::rest::RestXpcConnector::handlePingOperation(xpc_connection_t *this, const xpc::dict *a2)
{
  message[0] = a2;
  message[1] = "o";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)message, &object);
  int v5 = ctu::rest::asOperation(&object, v4);
  xpc_release(object);
  if (v5 != 6) {
    return 0;
  }
  message[0] = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  ctu::rest::createReply((xpc_object_t *)a2, (_anonymous_namespace_ *)message);
  uint64_t v6 = MEMORY[0x192FEE1B0](message[0]);
  BOOL v7 = v6 == MEMORY[0x1E4F14590];
  if (v6 == MEMORY[0x1E4F14590]) {
    xpc_connection_send_message(this[9], message[0]);
  }
  xpc_release(message[0]);
  return v7;
}

void sub_19209A554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, xpc_object_t a12)
{
}

uint64_t ctu::rest::RestXpcConnector::handleGetMessage(uint64_t a1, xpc_object_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 56);
  xpc_object_t v7 = *a2;
  if (*a2) {
    xpc_retain(*a2);
  }
  else {
    xpc_object_t v7 = xpc_null_create();
  }
  uint64_t v12 = 0;
  xpc_object_t v10 = &unk_1EE2F8500;
  xpc_object_t v11 = v7;
  if (v7) {
    xpc_retain(v7);
  }
  else {
    xpc_object_t v11 = xpc_null_create();
  }
  uint64_t v12 = &v10;
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void **))(*(void *)v6 + 24))(v6, a3, a4, &v10);
  std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100](&v10);
  xpc_release(v7);
  return v8;
}

void sub_19209A694(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t *ctu::rest::RestDispatchConnector::create@<X0>(uint64_t *a1@<X8>)
{
  xpc_object_t v3 = operator new(0x58uLL);
  v3[1] = 0;
  void v3[2] = 0;
  void *v3 = &unk_1EE2F79A0;
  v3[3] = &unk_1EE2F7A18;
  *((_OWORD *)v3 + 2) = 0u;
  *((_OWORD *)v3 + 3) = 0u;
  *((_OWORD *)v3 + 4) = 0u;
  v3[10] = 0;

  return std::shared_ptr<ctu::rest::RestDispatchConnector>::shared_ptr[abi:ne180100]<ctu::rest::RestDispatchConnector,void>(a1, (uint64_t)v3);
}

double ctu::rest::RestDispatchConnector::RestDispatchConnector(ctu::rest::RestDispatchConnector *this)
{
  *((void *)this + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1EE2F79A0;
  *((void *)this + 3) = &unk_1EE2F7A18;
  double result = 0.0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((void *)this + 10) = 0;
  return result;
}

{
  double result;

  *((void *)this + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1EE2F79A0;
  *((void *)this + 3) = &unk_1EE2F7A18;
  double result = 0.0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((void *)this + 10) = 0;
  return result;
}

void ctu::rest::RestDispatchConnector::~RestDispatchConnector(void **this)
{
  ctu::rest::RestDispatchConnector::disconnect((ctu::rest::RestDispatchConnector *)this);
  uint64_t v2 = (std::__shared_weak_count *)this[10];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  xpc_object_t v3 = this[8];
  this[8] = 0;
  if (v3) {
    (*(void (**)(void *))(*(void *)v3 + 8))(v3);
  }
  xpc_object_t v4 = this[7];
  if (v4) {
    dispatch_release(v4);
  }
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  int v5 = (std::__shared_weak_count *)this[2];
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
}

{
  void *v1;
  uint64_t vars8;

  ctu::rest::RestDispatchConnector::~RestDispatchConnector(this);

  operator delete(v1);
}

uint64_t ctu::rest::RestDispatchConnector::disconnect(ctu::rest::RestDispatchConnector *this)
{
  uint64_t result = *((void *)this + 9);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
  }
  uint64_t v3 = *((void *)this + 8);
  if (v3)
  {
    xpc_object_t object = xpc_null_create();
    (*(void (**)(uint64_t, char *, xpc_object_t *))(*(void *)v3 + 32))(v3, (char *)this + 24, &object);
    xpc_release(object);
    xpc_object_t object = 0;
    uint64_t result = *((void *)this + 8);
    *((void *)this + 8) = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    *((void *)this + 8) = 0;
  }
  return result;
}

void sub_19209A974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void non-virtual thunk to'ctu::rest::RestDispatchConnector::~RestDispatchConnector(void **this)
{
}

{
  void *v1;
  uint64_t vars8;

  ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3);

  operator delete(v1);
}

void ctu::rest::RestDispatchConnector::flush(ctu::rest::RestDispatchConnector *this, const group *a2)
{
  void v11[4] = *MEMORY[0x1E4F143B8];
  gr_name = a2->gr_name;
  if (a2->gr_name)
  {
    dispatch_retain((dispatch_object_t)a2->gr_name);
    dispatch_group_enter((dispatch_group_t)gr_name);
  }
  global_queue = dispatch_get_global_queue(0, 0);
  int v5 = global_queue;
  xpc_object_t v10 = global_queue;
  if (global_queue) {
    dispatch_retain(global_queue);
  }
  xpc_object_t v6 = xpc_string_create("");
  xpc_object_t v9 = v6;
  if (!v6)
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t v9 = v6;
  }
  xpc_object_t v7 = xpc_string_create("");
  uint64_t v8 = v7;
  if (!v7)
  {
    xpc_object_t v7 = xpc_null_create();
    uint64_t v8 = v7;
  }
  if (gr_name)
  {
    dispatch_retain((dispatch_object_t)gr_name);
    dispatch_group_enter((dispatch_group_t)gr_name);
  }
  v11[0] = &unk_1EE2F4C20;
  v11[1] = gr_name;
  void v11[3] = v11;
  ctu::rest::RestDispatchConnector::send_with_reply((uint64_t)this, "ping", &v9, &v8, &v10, (uint64_t)v11);
  std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100](v11);
  xpc_release(v7);
  xpc_release(v6);
  if (v5) {
    dispatch_release(v5);
  }
  if (gr_name)
  {
    dispatch_group_leave((dispatch_group_t)gr_name);
    dispatch_release((dispatch_object_t)gr_name);
  }
}

void sub_19209AB68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

dispatch_object_t *ctu::rest::RestDispatchConnector::flush(dispatch::group const&)const::$_0::~$_0(dispatch_object_t *a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    dispatch_group_leave(v2);
    if (*a1) {
      dispatch_release(*a1);
    }
  }
  return a1;
}

uint64_t ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,dispatch::queue const&,std::function<void ()(xpc::object)> &&)const::$_1::~$_1(uint64_t a1)
{
  std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100]((void *)(a1 + 16));
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  xpc_release(*(xpc_object_t *)a1);
  *(void *)a1 = 0;
  return a1;
}

uint64_t ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,std::weak_ptr<void const>,dispatch::queue const&,std::function<void ()(xpc::object)> &&)const::$_0::~$_0(uint64_t a1)
{
  std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100]((void *)(a1 + 16));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void ctu::rest::RestDispatchConnector::push(uint64_t a1, void **a2, void **a3)
{
}

void ctu::rest::RestDispatchConnector::pop(uint64_t a1, void **a2, void **a3)
{
}

void ctu::rest::RestDispatchConnector::notify(uint64_t a1, void **a2, void **a3)
{
}

void **ctu::rest::XpcConnectorServer::XpcConnectorServer(void **this)
{
  xpc_object_t v2 = xpc_null_create();
  xpc_object_t v4 = v2;
  ctu::XpcServerHelper::XpcServerHelper(this, &v4);
  xpc_release(v2);
  return this;
}

BOOL ctu::rest::XpcConnectorServer::isListening(ctu::rest::XpcConnectorServer *this)
{
  return MEMORY[0x192FEE1B0](*(void *)this) == MEMORY[0x1E4F14578];
}

void std::__shared_ptr_emplace<ctu::rest::createAutoReplyValue(xpc::dict const&)::AutoReplyHelper,std::allocator<ctu::rest::createAutoReplyValue(xpc::dict const&)::AutoReplyHelper>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE2F8B90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ctu::rest::createAutoReplyValue(xpc::dict const&)::AutoReplyHelper,std::allocator<ctu::rest::createAutoReplyValue(xpc::dict const&)::AutoReplyHelper>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE2F8B90;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<ctu::rest::createAutoReplyValue(xpc::dict const&)::AutoReplyHelper,std::allocator<ctu::rest::createAutoReplyValue(xpc::dict const&)::AutoReplyHelper>>::__on_zero_shared(uint64_t a1)
{
  xpc_object_t v2 = (xpc_object_t *)(a1 + 24);
  xpc_object_t v3 = *(xpc_object_t *)(a1 + 24);
  if (v3 && MEMORY[0x192FEE1B0](*(void *)(a1 + 24)) == MEMORY[0x1E4F14590]) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t v3 = xpc_null_create();
  }
  if (MEMORY[0x192FEE1B0](*v2) != MEMORY[0x1E4F145D8]) {
    ctu::rest::updateReplyValue(a1 + 40, v2);
  }
  xpc_connection_send_message(*(xpc_connection_t *)(a1 + 32), *(xpc_object_t *)(a1 + 40));
  xpc_release(v3);
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(void *)(a1 + 40) = 0;
  xpc_release(*(xpc_object_t *)(a1 + 32));
  *(void *)(a1 + 32) = 0;
  xpc_release(*(xpc_object_t *)(a1 + 24));
  xpc_object_t *v2 = 0;
}

void std::__shared_ptr_emplace<ctu::rest::createAutoReplyWithAction(std::function<void ()(xpc::object)> &&)::AutoReplier,std::allocator<std::function<void ()(xpc::object)> &&>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE2F8BC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ctu::rest::createAutoReplyWithAction(std::function<void ()(xpc::object)> &&)::AutoReplier,std::allocator<std::function<void ()(xpc::object)> &&>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE2F8BC8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t *std::shared_ptr<ctu::rest::RestXpcConnector>::shared_ptr[abi:ne180100]<ctu::rest::RestXpcConnector,void>(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  xpc_object_t v4 = operator new(0x20uLL);
  *xpc_object_t v4 = &unk_1EE2F8ED8;
  v4[1] = 0;
  std::string v4[2] = 0;
  v4[3] = a2;
  a1[1] = (uint64_t)v4;
  if (a2) {
    int v5 = (void *)(a2 + 8);
  }
  else {
    int v5 = 0;
  }
  std::shared_ptr<ctu::rest::RestXpcConnector>::__enable_weak_this[abi:ne180100]<ctu::rest::RestXpcConnector,ctu::rest::RestXpcConnector,void>((uint64_t)a1, v5, a2);
  return a1;
}

void sub_19209AF6C(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    ctu::rest::RestXpcConnector::~RestXpcConnector(v1);
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::shared_ptr<ctu::rest::RestXpcConnector>::__enable_weak_this[abi:ne180100]<ctu::rest::RestXpcConnector,ctu::rest::RestXpcConnector,void>(uint64_t a1, void *a2, uint64_t a3)
{
  if (a2)
  {
    xpc_object_t v4 = (std::__shared_weak_count *)a2[1];
    if (!v4 || v4->__shared_owners_ == -1)
    {
      int v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
      {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        xpc_object_t v4 = (std::__shared_weak_count *)a2[1];
      }
      *a2 = a3;
      a2[1] = v5;
      if (v4) {
        std::__shared_weak_count::__release_weak(v4);
      }
      if (v5)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
    }
  }
}

void std::__shared_ptr_pointer<ctu::rest::RestXpcConnector *,std::shared_ptr<ctu::rest::RestXpcConnector>::__shared_ptr_default_delete<ctu::rest::RestXpcConnector,ctu::rest::RestXpcConnector>,std::allocator<ctu::rest::RestXpcConnector>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<ctu::rest::RestXpcConnector *,std::shared_ptr<ctu::rest::RestXpcConnector>::__shared_ptr_default_delete<ctu::rest::RestXpcConnector,ctu::rest::RestXpcConnector>,std::allocator<ctu::rest::RestXpcConnector>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(xpc_object_t **)(a1 + 24);
  if (v1)
  {
    ctu::rest::RestXpcConnector::~RestXpcConnector(v1);
    operator delete(v2);
  }
}

uint64_t std::__shared_ptr_pointer<ctu::rest::RestXpcConnector *,std::shared_ptr<ctu::rest::RestXpcConnector>::__shared_ptr_default_delete<ctu::rest::RestXpcConnector,ctu::rest::RestXpcConnector>,std::allocator<ctu::rest::RestXpcConnector>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<ctu::rest::RestXpcConnector::handleGetMessage(xpc::dict const&,xpc::object const&,xpc::object const&)::$_0,std::allocator<ctu::rest::RestXpcConnector::handleGetMessage(xpc::dict const&,xpc::object const&,xpc::object const&)::$_0>,void ()(xpc::object)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1EE2F8500;
  xpc_release(*(xpc_object_t *)(a1 + 8));
  *(void *)(a1 + 8) = 0;
  return a1;
}

void std::__function::__func<ctu::rest::RestXpcConnector::handleGetMessage(xpc::dict const&,xpc::object const&,xpc::object const&)::$_0,std::allocator<ctu::rest::RestXpcConnector::handleGetMessage(xpc::dict const&,xpc::object const&,xpc::object const&)::$_0>,void ()(xpc::object)>::~__func(xpc_object_t *a1)
{
  *a1 = &unk_1EE2F8500;
  xpc_release(a1[1]);

  operator delete(a1);
}

void **std::__function::__func<ctu::rest::RestXpcConnector::handleGetMessage(xpc::dict const&,xpc::object const&,xpc::object const&)::$_0,std::allocator<ctu::rest::RestXpcConnector::handleGetMessage(xpc::dict const&,xpc::object const&,xpc::object const&)::$_0>,void ()(xpc::object)>::__clone(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 8);
  xpc_object_t v2 = (void **)operator new(0x10uLL);
  void *v2 = &unk_1EE2F8500;
  std::__compressed_pair_elem<ctu::rest::RestXpcConnector::handleGetMessage(xpc::dict const&,xpc::object const&,xpc::object const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<ctu::rest::RestXpcConnector::handleGetMessage(xpc::dict const&,xpc::object const&,xpc::object const&)::$_0 const&,0ul>(v2 + 1, v1);
  return v2;
}

void **std::__function::__func<ctu::rest::RestXpcConnector::handleGetMessage(xpc::dict const&,xpc::object const&,xpc::object const&)::$_0,std::allocator<ctu::rest::RestXpcConnector::handleGetMessage(xpc::dict const&,xpc::object const&,xpc::object const&)::$_0>,void ()(xpc::object)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE2F8500;
  return std::__compressed_pair_elem<ctu::rest::RestXpcConnector::handleGetMessage(xpc::dict const&,xpc::object const&,xpc::object const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<ctu::rest::RestXpcConnector::handleGetMessage(xpc::dict const&,xpc::object const&,xpc::object const&)::$_0 const&,0ul>((void **)(a2 + 8), (void **)(a1 + 8));
}

void std::__function::__func<ctu::rest::RestXpcConnector::handleGetMessage(xpc::dict const&,xpc::object const&,xpc::object const&)::$_0,std::allocator<ctu::rest::RestXpcConnector::handleGetMessage(xpc::dict const&,xpc::object const&,xpc::object const&)::$_0>,void ()(xpc::object)>::destroy(uint64_t a1)
{
}

void std::__function::__func<ctu::rest::RestXpcConnector::handleGetMessage(xpc::dict const&,xpc::object const&,xpc::object const&)::$_0,std::allocator<ctu::rest::RestXpcConnector::handleGetMessage(xpc::dict const&,xpc::object const&,xpc::object const&)::$_0>,void ()(xpc::object)>::destroy_deallocate(xpc_object_t *a1)
{
  std::__function::__alloc_func<ctu::rest::RestXpcConnector::handleGetMessage(xpc::dict const&,xpc::object const&,xpc::object const&)::$_0,std::allocator<ctu::rest::RestXpcConnector::handleGetMessage(xpc::dict const&,xpc::object const&,xpc::object const&)::$_0>,void ()(xpc::object)>::destroy[abi:ne180100](a1 + 1);

  operator delete(a1);
}

void std::__function::__func<ctu::rest::RestXpcConnector::handleGetMessage(xpc::dict const&,xpc::object const&,xpc::object const&)::$_0,std::allocator<ctu::rest::RestXpcConnector::handleGetMessage(xpc::dict const&,xpc::object const&,xpc::object const&)::$_0>,void ()(xpc::object)>::operator()(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v2 = *a2;
  xpc_object_t v5 = *a2;
  xpc_object_t v3 = (xpc_object_t *)(a1 + 8);
  *a2 = xpc_null_create();
  xpc_object_t message = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  ctu::rest::createReplyWithValue(v3, &v5, (_anonymous_namespace_ *)&message);
  if (MEMORY[0x192FEE1B0](message) == MEMORY[0x1E4F14590])
  {
    xpc_connection_t remote_connection = xpc_dictionary_get_remote_connection(*v3);
    if (remote_connection) {
      xpc_connection_send_message(remote_connection, message);
    }
  }
  xpc_release(message);
  xpc_release(v2);
}

void sub_19209B2C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<ctu::rest::RestXpcConnector::handleGetMessage(xpc::dict const&,xpc::object const&,xpc::object const&)::$_0,std::allocator<ctu::rest::RestXpcConnector::handleGetMessage(xpc::dict const&,xpc::object const&,xpc::object const&)::$_0>,void ()(xpc::object)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ctu::rest::RestXpcConnector::handleGetMessage(xpc::dict const&,xpc::object const&,xpc::object const&)::$_0,std::allocator<ctu::rest::RestXpcConnector::handleGetMessage(xpc::dict const&,xpc::object const&,xpc::object const&)::$_0>,void ()(xpc::object)>::target_type()
{
}

void **std::__compressed_pair_elem<ctu::rest::RestXpcConnector::handleGetMessage(xpc::dict const&,xpc::object const&,xpc::object const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<ctu::rest::RestXpcConnector::handleGetMessage(xpc::dict const&,xpc::object const&,xpc::object const&)::$_0 const&,0ul>(void **a1, void **a2)
{
  xpc_object_t v3 = *a2;
  *a1 = *a2;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    *a1 = xpc_null_create();
  }
  return a1;
}

void std::__function::__alloc_func<ctu::rest::RestXpcConnector::handleGetMessage(xpc::dict const&,xpc::object const&,xpc::object const&)::$_0,std::allocator<ctu::rest::RestXpcConnector::handleGetMessage(xpc::dict const&,xpc::object const&,xpc::object const&)::$_0>,void ()(xpc::object)>::destroy[abi:ne180100](xpc_object_t *a1)
{
  *a1 = 0;
}

uint64_t *std::shared_ptr<ctu::rest::RestDispatchConnector>::shared_ptr[abi:ne180100]<ctu::rest::RestDispatchConnector,void>(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  xpc_object_t v4 = operator new(0x20uLL);
  *xpc_object_t v4 = &unk_1EE2F8F10;
  v4[1] = 0;
  std::string v4[2] = 0;
  v4[3] = a2;
  a1[1] = (uint64_t)v4;
  if (a2) {
    xpc_object_t v5 = (void *)(a2 + 8);
  }
  else {
    xpc_object_t v5 = 0;
  }
  std::shared_ptr<ctu::rest::RestXpcConnector>::__enable_weak_this[abi:ne180100]<ctu::rest::RestXpcConnector,ctu::rest::RestXpcConnector,void>((uint64_t)a1, v5, a2);
  return a1;
}

void sub_19209B430(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    ctu::rest::RestDispatchConnector::~RestDispatchConnector(v1);
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<ctu::rest::RestDispatchConnector *,std::shared_ptr<ctu::rest::RestDispatchConnector>::__shared_ptr_default_delete<ctu::rest::RestDispatchConnector,ctu::rest::RestDispatchConnector>,std::allocator<ctu::rest::RestDispatchConnector>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<ctu::rest::RestDispatchConnector *,std::shared_ptr<ctu::rest::RestDispatchConnector>::__shared_ptr_default_delete<ctu::rest::RestDispatchConnector,ctu::rest::RestDispatchConnector>,std::allocator<ctu::rest::RestDispatchConnector>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(void ***)(a1 + 24);
  if (v1)
  {
    ctu::rest::RestDispatchConnector::~RestDispatchConnector(v1);
    operator delete(v2);
  }
}

uint64_t std::__shared_ptr_pointer<ctu::rest::RestDispatchConnector *,std::shared_ptr<ctu::rest::RestDispatchConnector>::__shared_ptr_default_delete<ctu::rest::RestDispatchConnector,ctu::rest::RestDispatchConnector>,std::allocator<ctu::rest::RestDispatchConnector>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ctu::rest::RestDispatchConnector::flush(dispatch::group const&)::$_0,std::allocator<ctu::rest::RestDispatchConnector::flush(dispatch::group const&)::$_0>,void ()(xpc::object)>::~__func(void *a1)
{
  *a1 = &unk_1EE2F4C20;
  xpc_object_t v2 = a1[1];
  if (v2)
  {
    dispatch_group_leave(v2);
    xpc_object_t v3 = a1[1];
    if (v3) {
      dispatch_release(v3);
    }
  }
  return a1;
}

void std::__function::__func<ctu::rest::RestDispatchConnector::flush(dispatch::group const&)::$_0,std::allocator<ctu::rest::RestDispatchConnector::flush(dispatch::group const&)::$_0>,void ()(xpc::object)>::~__func(void *__p)
{
  *std::string __p = &unk_1EE2F4C20;
  xpc_object_t v2 = __p[1];
  if (v2)
  {
    dispatch_group_leave(v2);
    xpc_object_t v3 = __p[1];
    if (v3) {
      dispatch_release(v3);
    }
  }

  operator delete(__p);
}

dispatch_group_t *std::__function::__func<ctu::rest::RestDispatchConnector::flush(dispatch::group const&)::$_0,std::allocator<ctu::rest::RestDispatchConnector::flush(dispatch::group const&)::$_0>,void ()(xpc::object)>::__clone(uint64_t a1)
{
  uint64_t v1 = (NSObject **)(a1 + 8);
  xpc_object_t v2 = (dispatch_group_t *)operator new(0x10uLL);
  dispatch_group_t *v2 = (dispatch_group_t)&unk_1EE2F4C20;
  std::__compressed_pair_elem<ctu::rest::RestDispatchConnector::flush(dispatch::group const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<ctu::rest::RestDispatchConnector::flush(dispatch::group const&)::$_0 const&,0ul>(v2 + 1, v1);
  return v2;
}

dispatch_group_t *std::__function::__func<ctu::rest::RestDispatchConnector::flush(dispatch::group const&)::$_0,std::allocator<ctu::rest::RestDispatchConnector::flush(dispatch::group const&)::$_0>,void ()(xpc::object)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE2F4C20;
  return std::__compressed_pair_elem<ctu::rest::RestDispatchConnector::flush(dispatch::group const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<ctu::rest::RestDispatchConnector::flush(dispatch::group const&)::$_0 const&,0ul>((dispatch_group_t *)(a2 + 8), (NSObject **)(a1 + 8));
}

void std::__function::__func<ctu::rest::RestDispatchConnector::flush(dispatch::group const&)::$_0,std::allocator<ctu::rest::RestDispatchConnector::flush(dispatch::group const&)::$_0>,void ()(xpc::object)>::destroy(uint64_t a1)
{
}

void std::__function::__func<ctu::rest::RestDispatchConnector::flush(dispatch::group const&)::$_0,std::allocator<ctu::rest::RestDispatchConnector::flush(dispatch::group const&)::$_0>,void ()(xpc::object)>::destroy_deallocate(NSObject **a1)
{
  std::__function::__alloc_func<ctu::rest::RestDispatchConnector::flush(dispatch::group const&)::$_0,std::allocator<ctu::rest::RestDispatchConnector::flush(dispatch::group const&)::$_0>,void ()(xpc::object)>::destroy[abi:ne180100](a1 + 1);

  operator delete(a1);
}

void std::__function::__func<ctu::rest::RestDispatchConnector::flush(dispatch::group const&)::$_0,std::allocator<ctu::rest::RestDispatchConnector::flush(dispatch::group const&)::$_0>,void ()(xpc::object)>::operator()(uint64_t a1, void **a2)
{
  xpc_object_t v2 = *a2;
  *a2 = xpc_null_create();
  xpc_release(v2);
}

uint64_t std::__function::__func<ctu::rest::RestDispatchConnector::flush(dispatch::group const&)::$_0,std::allocator<ctu::rest::RestDispatchConnector::flush(dispatch::group const&)::$_0>,void ()(xpc::object)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ctu::rest::RestDispatchConnector::flush(dispatch::group const&)::$_0,std::allocator<ctu::rest::RestDispatchConnector::flush(dispatch::group const&)::$_0>,void ()(xpc::object)>::target_type()
{
}

dispatch_group_t *std::__compressed_pair_elem<ctu::rest::RestDispatchConnector::flush(dispatch::group const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<ctu::rest::RestDispatchConnector::flush(dispatch::group const&)::$_0 const&,0ul>(dispatch_group_t *a1, NSObject **a2)
{
  xpc_object_t v3 = *a2;
  *a1 = *a2;
  if (v3)
  {
    dispatch_retain(v3);
    if (*a1) {
      dispatch_group_enter(*a1);
    }
  }
  return a1;
}

void std::__function::__alloc_func<ctu::rest::RestDispatchConnector::flush(dispatch::group const&)::$_0,std::allocator<ctu::rest::RestDispatchConnector::flush(dispatch::group const&)::$_0>,void ()(xpc::object)>::destroy[abi:ne180100](NSObject **a1)
{
  xpc_object_t v2 = *a1;
  if (v2)
  {
    dispatch_group_leave(v2);
    xpc_object_t v3 = *a1;
    if (*a1)
    {
      dispatch_release(v3);
    }
  }
}

void dispatch::async<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_0>(dispatch_queue_s *,std::unique_ptr<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_0,std::default_delete<std::unique_ptr>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  xpc_object_t object = (xpc_object_t)MEMORY[0x1E4F14528];
  xpc_retain(MEMORY[0x1E4F14528]);
  uint64_t v2 = a1[3];
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, xpc_object_t *))(*(void *)v2 + 48))(v2, &object);
  xpc_release(object);
  xpc_object_t v3 = std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100](a1);
  operator delete(v3);
}

void sub_19209B81C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  uint64_t v12 = std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100](v10);
  operator delete(v12);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_1,std::allocator<std::function<void ()(xpc::object)> &&>,void ()(xpc::object)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1EE2F4B70;
  std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100]((void *)(a1 + 24));
  uint64_t v2 = *(NSObject **)(a1 + 16);
  if (v2) {
    dispatch_release(v2);
  }
  xpc_release(*(xpc_object_t *)(a1 + 8));
  *(void *)(a1 + 8) = 0;
  return a1;
}

void std::__function::__func<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_1,std::allocator<std::function<void ()(xpc::object)> &&>,void ()(xpc::object)>::~__func(void *a1)
{
  *(void *)a1 = &unk_1EE2F4B70;
  std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100]((void *)a1 + 3);
  uint64_t v2 = *((void *)a1 + 2);
  if (v2) {
    dispatch_release(v2);
  }
  xpc_release(*((xpc_object_t *)a1 + 1));

  operator delete(a1);
}

xpc_object_t *std::__function::__func<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_1,std::allocator<std::function<void ()(xpc::object)> &&>,void ()(xpc::object)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE2F4B70;
  return std::__compressed_pair_elem<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<std::function<void ()(xpc::object)> && const&,0ul>((xpc_object_t *)(a2 + 8), a1 + 8);
}

void std::__function::__func<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_1,std::allocator<std::function<void ()(xpc::object)> &&>,void ()(xpc::object)>::destroy(uint64_t a1)
{
}

uint64_t std::__function::__func<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_1,std::allocator<std::function<void ()(xpc::object)> &&>,void ()(xpc::object)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_1,std::allocator<std::function<void ()(xpc::object)> &&>,void ()(xpc::object)>::target_type()
{
}

void *std::__function::__func<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,std::weak_ptr<void const>,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_0,std::allocator<std::function<void ()(xpc::object)> &&>,void ()(xpc::object)>::~__func(void *a1)
{
  *a1 = &unk_1EE2F4B18;
  std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100](a1 + 3);
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,std::weak_ptr<void const>,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_0,std::allocator<std::function<void ()(xpc::object)> &&>,void ()(xpc::object)>::~__func(void *a1)
{
  *a1 = &unk_1EE2F4B18;
  std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100](a1 + 3);
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(a1);
}

void *std::__function::__func<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,std::weak_ptr<void const>,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_0,std::allocator<std::function<void ()(xpc::object)> &&>,void ()(xpc::object)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE2F4B18;
  return std::__compressed_pair_elem<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,std::weak_ptr<void const>,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<std::function<void ()(xpc::object)> && const&,0ul>(a2 + 1, (void *)(a1 + 8));
}

void std::__function::__func<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,std::weak_ptr<void const>,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_0,std::allocator<std::function<void ()(xpc::object)> &&>,void ()(xpc::object)>::destroy(uint64_t a1)
{
}

uint64_t std::__function::__func<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,std::weak_ptr<void const>,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_0,std::allocator<std::function<void ()(xpc::object)> &&>,void ()(xpc::object)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ctu::rest::RestDispatchConnector::send_with_reply(char const*,xpc::object const&,xpc::object const&,std::weak_ptr<void const>,dispatch::queue const&,std::function<void ()(xpc::object)> &&)::$_0,std::allocator<std::function<void ()(xpc::object)> &&>,void ()(xpc::object)>::target_type()
{
}

uint64_t std::__function::__func<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0,std::allocator<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0>,void ()(xpc::object)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1EE2F4BC8;
  std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100]((void *)(a1 + 24));
  uint64_t v2 = *(NSObject **)(a1 + 16);
  if (v2) {
    dispatch_release(v2);
  }
  xpc_release(*(xpc_object_t *)(a1 + 8));
  *(void *)(a1 + 8) = 0;
  return a1;
}

void std::__function::__func<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0,std::allocator<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0>,void ()(xpc::object)>::~__func(void *a1)
{
  *(void *)a1 = &unk_1EE2F4BC8;
  std::__function::__value_func<void ()(xpc::object)>::~__value_func[abi:ne180100]((void *)a1 + 3);
  uint64_t v2 = *((void *)a1 + 2);
  if (v2) {
    dispatch_release(v2);
  }
  xpc_release(*((xpc_object_t *)a1 + 1));

  operator delete(a1);
}

xpc_object_t *std::__function::__func<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0,std::allocator<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0>,void ()(xpc::object)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = (xpc_object_t *)operator new(0x38uLL);
  xpc_object_t *v2 = &unk_1EE2F4BC8;
  ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)const::$_0::$_0(v2 + 1, v1);
  return v2;
}

void sub_19209BBDC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

xpc_object_t *std::__function::__func<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0,std::allocator<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0>,void ()(xpc::object)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE2F4BC8;
  return ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)const::$_0::$_0((xpc_object_t *)(a2 + 8), a1 + 8);
}

void std::__function::__func<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0,std::allocator<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0>,void ()(xpc::object)>::destroy(uint64_t a1)
{
}

uint64_t std::__function::__func<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0,std::allocator<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0>,void ()(xpc::object)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0,std::allocator<ctu::rest::RestDispatchConnector::handleMessageWithReply(xpc::dict,dispatch::queue const&,std::function<void ()(xpc::object)>)::$_0>,void ()(xpc::object)>::target_type()
{
}

void sub_19209BDFC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_19209C45C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  operator delete(v10);
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

void std::shared_ptr<ctu::Http::HttpResponse>::reset[abi:ne180100]<ctu::Http::HttpResponseConcrete,void>(void *a1, uint64_t a2)
{
  xpc_object_t v4 = operator new(0x20uLL);
  *xpc_object_t v4 = &unk_1EE2F8E68;
  v4[1] = 0;
  std::string v4[2] = 0;
  v4[3] = a2;
  xpc_object_t v5 = (std::__shared_weak_count *)a1[1];
  *a1 = a2;
  a1[1] = v4;
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_19209C500(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_19209C760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  operator delete(v14);
  std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(a1);
}

void sub_19209C8AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

void sub_19209C9AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

void sub_19209CE3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(a1);
}

uint64_t ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get(uint64_t a1)
{
  return *(void *)a1;
}

void sub_19209CFC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<SessionTaskContext *,std::shared_ptr<SessionTaskContext>::__shared_ptr_default_delete<SessionTaskContext,SessionTaskContext>,std::allocator<SessionTaskContext>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<SessionTaskContext *,std::shared_ptr<SessionTaskContext>::__shared_ptr_default_delete<SessionTaskContext,SessionTaskContext>,std::allocator<SessionTaskContext>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(SessionTaskContext **)(a1 + 24);
  if (v1)
  {
    SessionTaskContext::~SessionTaskContext(v1);
    operator delete(v2);
  }
}

uint64_t std::__shared_ptr_pointer<SessionTaskContext *,std::shared_ptr<SessionTaskContext>::__shared_ptr_default_delete<SessionTaskContext,SessionTaskContext>,std::allocator<SessionTaskContext>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void SessionTaskContext::~SessionTaskContext(SessionTaskContext *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  xpc_object_t v3 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void std::__tree<std::__value_type<unsigned long,std::shared_ptr<SessionTaskContext>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<SessionTaskContext>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<SessionTaskContext>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned long,std::shared_ptr<SessionTaskContext>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<SessionTaskContext>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<SessionTaskContext>>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned long,std::shared_ptr<SessionTaskContext>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<SessionTaskContext>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<SessionTaskContext>>>>::destroy(a1[1]);
    uint64_t v2 = (std::__shared_weak_count *)a1[6];
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
    operator delete(a1);
  }
}

void std::__shared_ptr_pointer<ctu::Http::HttpResponseConcrete *,std::shared_ptr<ctu::Http::HttpResponse>::__shared_ptr_default_delete<ctu::Http::HttpResponse,ctu::Http::HttpResponseConcrete>,std::allocator<ctu::Http::HttpResponseConcrete>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<ctu::Http::HttpResponseConcrete *,std::shared_ptr<ctu::Http::HttpResponse>::__shared_ptr_default_delete<ctu::Http::HttpResponse,ctu::Http::HttpResponseConcrete>,std::allocator<ctu::Http::HttpResponseConcrete>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<ctu::Http::HttpResponseConcrete *,std::shared_ptr<ctu::Http::HttpResponse>::__shared_ptr_default_delete<ctu::Http::HttpResponse,ctu::Http::HttpResponseConcrete>,std::allocator<ctu::Http::HttpResponseConcrete>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

BOOL ctu::starts_with(const void *a1, size_t a2, const void *a3, size_t a4)
{
  if (a2 < a4) {
    return 0;
  }
  if (a4) {
    return memcmp(a1, a3, a4) == 0;
  }
  return 1;
}

BOOL ctu::ends_with(uint64_t a1, size_t a2, const void *a3, size_t a4)
{
  if (a2 < a4) {
    return 0;
  }
  if (a4) {
    return memcmp((const void *)(a1 + a2 - a4), a3, a4) == 0;
  }
  return 1;
}

double ctu::partition@<D0>(char *a1@<X0>, size_t a2@<X1>, unsigned __int8 *a3@<X2>, size_t a4@<X3>, uint64_t a5@<X8>)
{
  v17[0] = (uint64_t)a1;
  v17[1] = a2;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(void *)(a5 + 64) = 0;
  unint64_t v10 = ctu::llvm::StringRef::find(v17, a3, a4, 0);
  if (v10 == -1)
  {
    if (a1)
    {
      std::string::basic_string[abi:ne180100](&__dst, a1, a2);
    }
    else
    {
      long long __dst = 0uLL;
      uint64_t v16 = 0;
    }
    double result = *(double *)&__dst;
    *(_OWORD *)a5 = __dst;
    *(void *)(a5 + 16) = v16;
  }
  else
  {
    unint64_t v11 = v10;
    if (a1)
    {
      if (v10 >= a2) {
        size_t v12 = a2;
      }
      else {
        size_t v12 = v10;
      }
      std::string::basic_string[abi:ne180100](&__dst, a1, v12);
    }
    else
    {
      long long __dst = 0uLL;
      uint64_t v16 = 0;
    }
    *(_OWORD *)a5 = __dst;
    *(void *)(a5 + 16) = v16;
    if (a3)
    {
      std::string::basic_string[abi:ne180100](&__dst, a3, a4);
    }
    else
    {
      long long __dst = 0uLL;
      uint64_t v16 = 0;
    }
    *(_OWORD *)(a5 + 24) = __dst;
    *(void *)(a5 + 40) = v16;
    if (a1)
    {
      size_t v13 = v11 + a4;
      if (v11 + a4 >= a2) {
        size_t v13 = a2;
      }
      std::string::basic_string[abi:ne180100](&__dst, &a1[v13], a2 - v13);
    }
    else
    {
      long long __dst = 0uLL;
      uint64_t v16 = 0;
    }
    double result = *(double *)&__dst;
    *(_OWORD *)(a5 + 48) = __dst;
    *(void *)(a5 + 64) = v16;
  }
  return result;
}

void sub_19209D3DC(_Unwind_Exception *a1)
{
  std::tuple<std::string,std::string,std::string>::~tuple(v1);
  _Unwind_Resume(a1);
}

uint64_t std::tuple<std::string,std::string,std::string>::~tuple(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t ctu::split_any@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, char **a5@<X8>)
{
  v28[0] = a1;
  v28[1] = a2;
  a5[2] = 0;
  unint64_t v10 = a5 + 2;
  *a5 = 0;
  a5[1] = 0;
  unint64_t first_not_of = ctu::llvm::StringRef::find_first_not_of(v28, a3, a4, 0);
  uint64_t result = ctu::llvm::StringRef::find_first_of(v28, a3, a4, first_not_of);
  if ((first_not_of & result) != 0xFFFFFFFFFFFFFFFFLL)
  {
    unint64_t v13 = result;
    uint64_t v14 = 0;
    do
    {
      if (v13 == -1) {
        unint64_t v15 = a2;
      }
      else {
        unint64_t v15 = v13;
      }
      unint64_t v16 = v15 - first_not_of;
      uint64_t v17 = a1 + first_not_of;
      if ((unint64_t)v14 >= *v10)
      {
        uint64_t v18 = (v14 - *a5) >> 4;
        if ((unint64_t)(v18 + 1) >> 60) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = *v10 - (void)*a5;
        uint64_t v20 = v19 >> 3;
        if (v19 >> 3 <= (unint64_t)(v18 + 1)) {
          uint64_t v20 = v18 + 1;
        }
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v21 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v20;
        }
        uint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ctu::RestResourceConnection>>>((uint64_t)v10, v21);
        uint64_t v24 = &v22[16 * v18];
        *(void *)uint64_t v24 = v17;
        *((void *)v24 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v16;
        uint64_t v26 = *a5;
        uint64_t v25 = a5[1];
        int64_t v27 = v24;
        if (v25 != *a5)
        {
          do
          {
            *((_OWORD *)v27 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = *((_OWORD *)v25 - 1);
            v27 -= 16;
            v25 -= 16;
          }
          while (v25 != v26);
          uint64_t v25 = *a5;
        }
        uint64_t v14 = v24 + 16;
        *a5 = v27;
        a5[1] = v24 + 16;
        a5[2] = &v22[16 * v23];
        if (v25) {
          operator delete(v25);
        }
      }
      else
      {
        *(void *)uint64_t v14 = v17;
        *((void *)v14 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v16;
        v14 += 16;
      }
      a5[1] = v14;
      unint64_t first_not_of = ctu::llvm::StringRef::find_first_not_of(v28, a3, a4, v13);
      uint64_t result = ctu::llvm::StringRef::find_first_of(v28, a3, a4, first_not_of);
      unint64_t v13 = result;
    }
    while ((first_not_of & result) != 0xFFFFFFFFFFFFFFFFLL);
  }
  return result;
}

void sub_19209D5FC(_Unwind_Exception *exception_object)
{
  xpc_object_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::split_any_copy@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, std::vector<std::string> *a5@<X8>)
{
  uint64_t v23 = a1;
  unint64_t v24 = a2;
  a5->__end_cap_.__value_ = 0;
  p_end_cap = (std::allocator<std::string> *)&a5->__end_cap_;
  a5->__begin_ = 0;
  a5->__end_ = 0;
  unint64_t first_not_of = ctu::llvm::StringRef::find_first_not_of(&v23, a3, a4, 0);
  uint64_t result = ctu::llvm::StringRef::find_first_of(&v23, a3, a4, first_not_of);
  if ((first_not_of & result) != 0xFFFFFFFFFFFFFFFFLL)
  {
    unint64_t v11 = result;
    size_t v12 = 0;
    do
    {
      size_t v13 = v11 - first_not_of;
      uint64_t v14 = v23;
      if (first_not_of >= v24) {
        unint64_t v15 = v24;
      }
      else {
        unint64_t v15 = first_not_of;
      }
      unint64_t v16 = (void *)(v23 + v15);
      if (v13 >= v24 - v15) {
        size_t v17 = v24 - v15;
      }
      else {
        size_t v17 = v13;
      }
      if ((unint64_t)v12 >= *(void *)p_end_cap)
      {
        unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)a5->__begin_) >> 3);
        unint64_t v19 = v18 + 1;
        if (v18 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * ((uint64_t)(*(void *)p_end_cap - (unint64_t)a5->__begin_) >> 3) > v19) {
          unint64_t v19 = 0x5555555555555556 * ((uint64_t)(*(void *)p_end_cap - (unint64_t)a5->__begin_) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)p_end_cap - (unint64_t)a5->__begin_) >> 3) >= 0x555555555555555) {
          unint64_t v20 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v20 = v19;
        }
        __v.__end_cap_.__value_ = p_end_cap;
        if (v20) {
          unint64_t v21 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)p_end_cap, v20);
        }
        else {
          unint64_t v21 = 0;
        }
        std::__split_buffer<std::string>::pointer end = v21 + v18;
        __v.__first_ = v21;
        __v.__begin_ = end;
        __v.__end_ = end;
        __v.__end_cap_.__value_ = &v21[v20];
        if (v14)
        {
          std::string::basic_string[abi:ne180100](end, v16, v17);
          std::__split_buffer<std::string>::pointer end = __v.__end_;
        }
        else
        {
          end->__r_.__value_.__r.__words[0] = 0;
          end->__r_.__value_.__l.__size_ = 0;
          end->__r_.__value_.__r.__words[2] = 0;
        }
        __v.__end_ = end + 1;
        std::vector<std::string>::__swap_out_circular_buffer(a5, &__v);
        size_t v12 = a5->__end_;
        std::__split_buffer<std::string>::~__split_buffer(&__v);
      }
      else
      {
        if (v23)
        {
          std::string::basic_string[abi:ne180100](v12, (void *)(v23 + v15), v17);
        }
        else
        {
          v12->__r_.__value_.__r.__words[0] = 0;
          v12->__r_.__value_.__l.__size_ = 0;
          v12->__r_.__value_.__r.__words[2] = 0;
        }
        a5->__end_ = ++v12;
      }
      a5->__end_ = v12;
      unint64_t first_not_of = ctu::llvm::StringRef::find_first_not_of(&v23, a3, a4, v11);
      uint64_t result = ctu::llvm::StringRef::find_first_of(&v23, a3, a4, first_not_of);
      unint64_t v11 = result;
    }
    while ((first_not_of & result) != 0xFFFFFFFFFFFFFFFFLL);
  }
  return result;
}

void sub_19209D824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__split_buffer<std::string> *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11)
{
  *(void *)(v11 + 8) = v12;
  a11 = (void **)v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

void ctu::py_escape(char *a1@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  uint64_t v6 = a1[23];
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a1 + 1);
  }
  uint64_t v7 = 2;
  if (!a2) {
    uint64_t v7 = 0;
  }
  std::string::reserve(a3, v6 + v7);
  if (a2) {
    std::string::push_back(a3, 34);
  }
  int v8 = a1[23];
  if (v8 >= 0) {
    xpc_object_t v9 = a1;
  }
  else {
    xpc_object_t v9 = *(char **)a1;
  }
  if (v8 >= 0) {
    uint64_t v10 = a1[23];
  }
  else {
    uint64_t v10 = *((void *)a1 + 1);
  }
  if (v10)
  {
    uint64_t v11 = MEMORY[0x1E4F14390];
    do
    {
      uint64_t v12 = (ctu *)*v9;
      if ((int)v12 > 33)
      {
        switch(v12)
        {
          case '""':
            std::string::push_back(a3, 92);
            LOBYTE(v12) = 34;
            goto LABEL_32;
          case '\'':
            std::string::push_back(a3, 92);
            LOBYTE(v12) = 39;
            goto LABEL_32;
          case '\\':
            std::string::push_back(a3, 92);
            goto LABEL_32;
        }
      }
      else
      {
        switch(v12)
        {
          case 9:
            std::string::push_back(a3, 92);
            LOBYTE(v12) = 116;
            goto LABEL_32;
          case 0xA:
            std::string::push_back(a3, 92);
            LOBYTE(v12) = 110;
            goto LABEL_32;
          case 0xD:
            std::string::push_back(a3, 92);
            LOBYTE(v12) = 114;
            goto LABEL_32;
        }
      }
      if ((v12 & 0x80000000) != 0) {
        int v13 = __maskrune(*v9, 0x40000uLL);
      }
      else {
        int v13 = *(_DWORD *)(v11 + 4 * v12 + 60) & 0x40000;
      }
      if (!v13)
      {
        std::string::push_back(a3, 92);
        std::string::push_back(a3, 120);
        ctu::hex0(v12, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::__split_buffer<std::string>::pointer p_p = &__p;
        }
        else {
          std::__split_buffer<std::string>::pointer p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        std::string::append(a3, (const std::string::value_type *)p_p, size);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        goto LABEL_33;
      }
LABEL_32:
      std::string::push_back(a3, (std::string::value_type)v12);
LABEL_33:
      ++v9;
      --v10;
    }
    while (v10);
  }
  if (a2) {
    std::string::push_back(a3, 34);
  }
}

void sub_19209DA68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

void ctu::replace_copy(char *__s@<X1>, uint64_t a2@<X0>, size_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, std::string *a6@<X8>)
{
  uint64_t v10 = a6;
  memset(a6, 170, sizeof(std::string));
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a6, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&a6->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a6->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
  }
  std::string::size_type size = v10->__r_.__value_.__l.__size_;
  if ((v10->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    std::string::size_type v12 = HIBYTE(v10->__r_.__value_.__r.__words[2]);
  }
  else
  {
    uint64_t v10 = (std::string *)v10->__r_.__value_.__r.__words[0];
    std::string::size_type v12 = size;
  }
  for (; v12; --v12)
  {
    int v13 = (char *)memchr(__s, v10->__r_.__value_.__s.__data_[0], a3);
    if (v13) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = &__s[a3];
    }
    uint64_t v15 = v14 - __s;
    if (v15 < a5 && v15 != a3) {
      v10->__r_.__value_.__s.__data_[0] = *(unsigned char *)(a4 + v15);
    }
    uint64_t v10 = (std::string *)((char *)v10 + 1);
  }
}

unsigned char *ctu::replace(unsigned char *result, char *__s, size_t a3, uint64_t a4, uint64_t a5)
{
  int v5 = (char)result[23];
  if (v5 >= 0) {
    uint64_t v6 = result;
  }
  else {
    uint64_t v6 = *(unsigned char **)result;
  }
  if (v5 >= 0) {
    uint64_t v7 = result[23];
  }
  else {
    uint64_t v7 = *((void *)result + 1);
  }
  if (v7)
  {
    std::string::size_type v12 = &__s[a3];
    do
    {
      uint64_t result = memchr(__s, (char)*v6, a3);
      if (result) {
        uint64_t v14 = result;
      }
      else {
        uint64_t v14 = v12;
      }
      uint64_t v15 = v14 - __s;
      if (v15 < a5 && v15 != a3) {
        *uint64_t v6 = *(unsigned char *)(a4 + v15);
      }
      ++v6;
      --v7;
    }
    while (v7);
  }
  return result;
}

void ctu::XpcJetsamAssertion::create_default_global(std::__shared_weak_count_vtbl **a1@<X8>)
{
  xpc_object_t v3 = (std::__shared_weak_count_vtbl *)operator new(0x30uLL);
  v3->~__shared_weak_size_t count = 0;
  v3->~__shared_weak_count_0 = 0;
  LODWORD(v3->__on_zero_shared) = 0;
  v3->__on_zero_shared_weaunint64_t k = 0;
  v3[1].~__shared_weak_size_t count = 0;
  v3->__get_deleter = 0;
  *a1 = v3;
  xpc_object_t v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_weak_owners_ = 0;
  v4->__shared_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE2F8D50;
  v4[1].__vftable = v3;
  a1[1] = (std::__shared_weak_count_vtbl *)v4;
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  v3->~__shared_weak_size_t count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v3;
  v3->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v4;

  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
}

void sub_19209DCC8(_Unwind_Exception *a1)
{
  std::default_delete<ctu::XpcJetsamAssertion>::operator()[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t ctu::XpcJetsamAssertion::XpcJetsamAssertion(uint64_t this)
{
  *(void *)this = 0;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  *(void *)(this + 32) = 0;
  *(void *)(this + 40) = 0;
  *(void *)(this + 24) = 0;
  return this;
}

{
  *(void *)this = 0;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  *(void *)(this + 32) = 0;
  *(void *)(this + 40) = 0;
  *(void *)(this + 24) = 0;
  return this;
}

void ctu::XpcJetsamAssertion::createActivity(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v17[2] = *MEMORY[0x1E4F143B8];
  int v5 = (std::__shared_weak_count *)a1[1];
  if (!v5 || (uint64_t v7 = *a1, (v8 = std::__shared_weak_count::lock(v5)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v9 = v8;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  uint64_t v10 = (char *)operator new(0x20uLL);
  uint64_t v11 = *(void *)a2;
  v17[0] = *(void *)(a2 + 8);
  *(void *)((char *)v17 + 7) = *(void *)(a2 + 15);
  int v12 = *(char *)(a2 + 23);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v13 = v17[0];
  *(void *)uint64_t v10 = v11;
  *((void *)v10 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v13;
  *(void *)(v10 + 15) = *(void *)((char *)v17 + 7);
  v10[23] = v12;
  if ((v12 & 0x80000000) == 0 || (uint64_t v14 = v11) != 0) {
    uint64_t v14 = os_transaction_create();
  }
  *((void *)v10 + ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = v14;
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v15 = (std::__shared_weak_count *)operator new(0x30uLL);
  v15->__shared_weak_owners_ = 0;
  v15->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE2F4CD0;
  v15->__shared_owners_ = 0;
  v15[1].__vftable = (std::__shared_weak_count_vtbl *)v10;
  v15[1].__shared_owners_ = v7;
  v15[1].__shared_weak_owners_ = (uint64_t)v9;
  *(void *)&long long v16 = v10;
  *((void *)&v16 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v15;
  atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  ctu::XpcJetsamAssertion::addActivity((uint64_t)a1, &v16);
  std::__shared_weak_count::__release_weak(v15);
  *a3 = v10;
  a3[1] = v15;

  std::__shared_weak_count::__release_weak(v9);
}

void sub_19209DE74(_Unwind_Exception *a1)
{
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  operator delete((void *)v2);
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void ctu::XpcJetsamAssertion::addActivity(uint64_t a1, long long *a2)
{
  long long v18 = *a2;
  xpc_object_t v3 = (std::__shared_weak_count *)*((void *)a2 + 1);
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)a2 + 1) + 16), 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  int v5 = *(char **)(a1 + 32);
  unint64_t v4 = *(void *)(a1 + 40);
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = *(char **)(a1 + 24);
    uint64_t v8 = (v5 - v7) >> 4;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v4 - (void)v7;
    if (v10 >> 3 > v9) {
      unint64_t v9 = v10 >> 3;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int v12 = (char *)operator new(16 * v11);
    uint64_t v13 = &v12[16 * v8];
    *(_OWORD *)uint64_t v13 = v18;
    if (v3)
    {
      atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v7 = *(char **)(a1 + 24);
      int v5 = *(char **)(a1 + 32);
    }
    uint64_t v14 = &v12[16 * v11];
    uint64_t v6 = v13 + 16;
    if (v5 == v7)
    {
      *(void *)(a1 + 24) = v13;
      *(void *)(a1 + 32) = v6;
      *(void *)(a1 + 40) = v14;
    }
    else
    {
      do
      {
        long long v15 = *((_OWORD *)v5 - 1);
        v5 -= 16;
        *((_OWORD *)v13 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v15;
        v13 -= 16;
        *(void *)int v5 = 0;
        *((void *)v5 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
      }
      while (v5 != v7);
      uint64_t v7 = *(char **)(a1 + 24);
      long long v16 = *(char **)(a1 + 32);
      *(void *)(a1 + 24) = v13;
      *(void *)(a1 + 32) = v6;
      *(void *)(a1 + 40) = v14;
      while (v16 != v7)
      {
        size_t v17 = (std::__shared_weak_count *)*((void *)v16 - 1);
        if (v17) {
          std::__shared_weak_count::__release_weak(v17);
        }
        v16 -= 16;
      }
    }
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    *(void *)int v5 = v18;
    *((void *)v5 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v3;
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v6 = v5 + 16;
  }
  *(void *)(a1 + 32) = v6;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 16));
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void ctu::XpcJetsamAssertion::tidyUp(os_unfair_lock_s *this)
{
  uint64_t v2 = this + 4;
  os_unfair_lock_lock(this + 4);
  xpc_object_t v3 = *(uint64_t **)&this[6]._os_unfair_lock_opaque;
  unint64_t v4 = *(uint64_t **)&this[8]._os_unfair_lock_opaque;
  if (v3 != v4)
  {
    int v5 = v3 + 2;
    while (1)
    {
      uint64_t v6 = *(v5 - 1);
      if (!v6 || *(void *)(v6 + 8) == -1) {
        break;
      }
      BOOL v7 = v5 == v4;
      v5 += 2;
      if (v7) {
        goto LABEL_24;
      }
    }
    uint64_t v8 = v5 - 2;
    if (v5 - 2 != v4 && v5 != v4)
    {
      do
      {
        uint64_t v9 = v5[1];
        if (v9 && *(void *)(v9 + 8) != -1)
        {
          uint64_t v10 = *v5;
          *int v5 = 0;
          v5[1] = 0;
          unint64_t v11 = (std::__shared_weak_count *)v8[1];
          *uint64_t v8 = v10;
          v8[1] = v9;
          if (v11) {
            std::__shared_weak_count::__release_weak(v11);
          }
          v8 += 2;
        }
        v5 += 2;
      }
      while (v5 != v4);
      unint64_t v4 = *(uint64_t **)&this[8]._os_unfair_lock_opaque;
    }
    if (v8 != v4)
    {
      while (v4 != v8)
      {
        int v12 = (std::__shared_weak_count *)*(v4 - 1);
        if (v12) {
          std::__shared_weak_count::__release_weak(v12);
        }
        v4 -= 2;
      }
      *(void *)&this[8]._os_unfair_lock_opaque = v8;
    }
  }
LABEL_24:

  os_unfair_lock_unlock(v2);
}

uint64_t ctu::XpcJetsamAssertion::getAssertionCount(os_unfair_lock_s *this)
{
  uint64_t v2 = this + 4;
  os_unfair_lock_lock(this + 4);
  uint64_t v3 = (uint64_t)(*(void *)&this[8]._os_unfair_lock_opaque - *(void *)&this[6]._os_unfair_lock_opaque) >> 4;
  os_unfair_lock_unlock(v2);
  return v3;
}

void ctu::XpcJetsamAssertion::dumpState(os_unfair_lock_s *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = this + 4;
  os_unfair_lock_lock(this + 4);
  ctu::XpcJetsamAssertion::dumpState_sync((ctu::XpcJetsamAssertion *)this, a2);

  os_unfair_lock_unlock(v4);
}

void ctu::XpcJetsamAssertion::dumpState_sync(ctu::XpcJetsamAssertion *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (long long **)*((void *)this + 3);
  unint64_t v4 = (long long **)*((void *)this + 4);
  memset(&__p, 0, sizeof(__p));
  if (v3 == v4)
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    goto LABEL_40;
  }
  int v5 = (std::__shared_weak_count *)v3[1];
  if (v5)
  {
    uint64_t v6 = std::__shared_weak_count::lock(v5);
    if (v6)
    {
      BOOL v7 = *v3;
      if (*v3)
      {
        if (*((char *)v7 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)v7, *((void *)v7 + 1));
        }
        else
        {
          long long v8 = *v7;
          v18.__r_.__value_.__r.__words[2] = *((void *)v7 + 2);
          *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v8;
        }
        uint64_t v9 = 1;
        goto LABEL_13;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&v18, "<expired>");
  uint64_t v9 = 0;
  if (v6) {
LABEL_13:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string __p = v18;
  for (size_t i = v3 + 2; i != v4; i += 2)
  {
    *((unsigned char *)&v18.__r_.__value_.__s + 2ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = 1;
    LOWORD(v18.__r_.__value_.__l.__data_) = 44;
    std::string::append(&__p, (const std::string::value_type *)&v18, 1uLL);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
    unint64_t v11 = (std::__shared_weak_count *)i[1];
    if (v11)
    {
      int v12 = std::__shared_weak_count::lock(v11);
      if (v12)
      {
        uint64_t v13 = *i;
        if (*i)
        {
          ++v9;
          if (*((char *)v13 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)v13, *((void *)v13 + 1));
          }
          else
          {
            long long v14 = *v13;
            v18.__r_.__value_.__r.__words[2] = *((void *)v13 + 2);
            *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v14;
          }
LABEL_26:
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
          goto LABEL_27;
        }
      }
    }
    else
    {
      int v12 = 0;
    }
    std::string::basic_string[abi:ne180100]<0>(&v18, "<expired>");
    if (v12) {
      goto LABEL_26;
    }
LABEL_27:
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v15 = &v18;
    }
    else {
      long long v15 = (std::string *)v18.__r_.__value_.__r.__words[0];
    }
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v18.__r_.__value_.__l.__size_;
    }
    std::string::append(&__p, (const std::string::value_type *)v15, size);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  if (v9)
  {
    std::operator+<char>();
    *(std::string *)a2 = v18;
    goto LABEL_41;
  }
LABEL_40:
  *(unsigned char *)(a2 + 2ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = 13;
  strcpy((char *)a2, "No Assertions");
LABEL_41:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_19209E51C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<ctu::XpcJetsamAssertion *,std::shared_ptr<ctu::XpcJetsamAssertion>::__shared_ptr_default_delete<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion>,std::allocator<ctu::XpcJetsamAssertion>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<ctu::XpcJetsamAssertion *,std::shared_ptr<ctu::XpcJetsamAssertion>::__shared_ptr_default_delete<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion>,std::allocator<ctu::XpcJetsamAssertion>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<ctu::XpcJetsamAssertion *,std::shared_ptr<ctu::XpcJetsamAssertion>::__shared_ptr_default_delete<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion>,std::allocator<ctu::XpcJetsamAssertion>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::default_delete<ctu::XpcJetsamAssertion>::operator()[abi:ne180100](void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p[3];
    if (v2)
    {
      uint64_t v3 = __p[4];
      unint64_t v4 = (void *)__p[3];
      if (v3 != v2)
      {
        do
        {
          int v5 = *(std::__shared_weak_count **)(v3 - 8);
          if (v5) {
            std::__shared_weak_count::__release_weak(v5);
          }
          v3 -= 16;
        }
        while (v3 != v2);
        unint64_t v4 = (void *)__p[3];
      }
      __p[4] = v2;
      operator delete(v4);
    }
    uint64_t v6 = (std::__shared_weak_count *)__p[1];
    if (v6) {
      std::__shared_weak_count::__release_weak(v6);
    }
    operator delete(__p);
  }
}

void std::__shared_ptr_pointer<ctu::XpcJetsamAssertion::Activity *,ctu::XpcJetsamAssertion::createActivity(std::string)::$_0,std::allocator<ctu::XpcJetsamAssertion::Activity>>::~__shared_ptr_pointer(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE2F4CD0;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }

  std::__shared_weak_count::~__shared_weak_count(this);
}

{
  std::__shared_weak_count *shared_weak_owners;
  void *v3;
  uint64_t vars8;

  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE2F4CD0;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  std::__shared_weak_count::~__shared_weak_count(this);

  operator delete(v3);
}

void std::__shared_ptr_pointer<ctu::XpcJetsamAssertion::Activity *,ctu::XpcJetsamAssertion::createActivity(std::string)::$_0,std::allocator<ctu::XpcJetsamAssertion::Activity>>::__on_zero_shared(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = (std::__shared_weak_count *)a1[5];
  if (v3)
  {
    unint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      int v5 = (os_unfair_lock_s *)a1[4];
      if (v5) {
        ctu::XpcJetsamAssertion::tidyUp(v5);
      }
    }
  }
  else
  {
    unint64_t v4 = 0;
  }
  if (v2)
  {
    ctu::SharedRef<os_transaction_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_transaction_s>::~SharedRef((void **)(v2 + 24));
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    operator delete((void *)v2);
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v6 = (std::__shared_weak_count *)a1[5];
  if (v6)
  {
    std::__shared_weak_count::__release_weak(v6);
  }
}

uint64_t std::__shared_ptr_pointer<ctu::XpcJetsamAssertion::Activity *,ctu::XpcJetsamAssertion::createActivity(std::string)::$_0,std::allocator<ctu::XpcJetsamAssertion::Activity>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

void **ctu::SharedRef<os_transaction_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_transaction_s>::~SharedRef(void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    os_release(v2);
  }
  return a1;
}

void ctu::ConnectionRestResource::~ConnectionRestResource(ctu::ConnectionRestResource *this)
{
  *(void *)this = &unk_1EE2F6F48;
  boost::container::vector<std::shared_ptr<ctu::RestResourceConnection>,boost::container::new_allocator<std::shared_ptr<ctu::RestResourceConnection>>,void>::~vector((void *)this + 1);
}

{
  *(void *)this = &unk_1EE2F6F48;
  boost::container::vector<std::shared_ptr<ctu::RestResourceConnection>,boost::container::new_allocator<std::shared_ptr<ctu::RestResourceConnection>>,void>::~vector((void *)this + 1);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EE2F6F48;
  boost::container::vector<std::shared_ptr<ctu::RestResourceConnection>,boost::container::new_allocator<std::shared_ptr<ctu::RestResourceConnection>>,void>::~vector((void *)this + 1);

  operator delete(this);
}

void ctu::ConnectionRestResource::handleDroppedConnection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void ctu::ConnectionRestResource::eraseConnection(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    unint64_t v4 = *(long long **)(a1 + 8);
    int v5 = &v4[v2];
    unint64_t v6 = *(void *)(a2 + 8);
    do
    {
      unint64_t v7 = v2 >> 1;
      long long v8 = &v4[v2 >> 1];
      unint64_t v9 = *((void *)v8 + 1);
      uint64_t v10 = v8 + 1;
      v2 += ~(v2 >> 1);
      if (v9 >= v6) {
        unint64_t v2 = v7;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    while (v2);
    if (v4 != v5 && v6 >= *((void *)v4 + 1))
    {
      unint64_t v11 = v4 + 1;
      if (v5 != v4 + 1)
      {
        do
        {
          long long v12 = *v11;
          *(void *)unint64_t v11 = 0;
          *((void *)v11 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
          uint64_t v13 = (std::__shared_weak_count *)*((void *)v11 - 1);
          *(v11 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v12;
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
          ++v11;
        }
        while (v11 != v5);
        unint64_t v4 = v11 - 1;
      }
      BOOL v14 = v5 == v4;
      uint64_t v15 = v5 - v4;
      if (!v14)
      {
        long long v16 = (std::__shared_weak_count **)v4 + 1;
        uint64_t v17 = v15;
        do
        {
          if (*v16) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*v16);
          }
          v16 += 2;
          --v17;
        }
        while (v17);
      }
      *(void *)(a1 + 16) -= v15;
    }
  }
}

void **ctu::ConnectionRestResource::getAllConnectionsForXpcConnection@<X0>(void **this@<X0>, const xpc::connection *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unint64_t v4 = this[2];
  if (v4)
  {
    unint64_t v6 = this[1];
    uint64_t v7 = 16 * (void)v4;
    do
    {
      this = (void **)(*(uint64_t (**)(void, void))(*(void *)*v6 + 32))(*v6, *(void *)a2);
      if (this)
      {
        long long v8 = (void *)a3[1];
        unint64_t v9 = a3[2];
        if ((unint64_t)v8 >= v9)
        {
          uint64_t v12 = ((uint64_t)v8 - *a3) >> 4;
          unint64_t v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 60) {
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v14 = v9 - *a3;
          if (v14 >> 3 > v13) {
            unint64_t v13 = v14 >> 3;
          }
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v15 = v13;
          }
          _OWORD v20[4] = a3 + 2;
          long long v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ctu::RestResourceConnection>>>((uint64_t)(a3 + 2), v15);
          uint64_t v17 = &v16[16 * v12];
          v20[0] = v16;
          v20[1] = v17;
          v20[3] = &v16[16 * v18];
          long long v19 = *(_OWORD *)v6;
          *(_OWORD *)uint64_t v17 = *(_OWORD *)v6;
          if (*((void *)&v19 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v19 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          v20[2] = v17 + 16;
          std::vector<std::shared_ptr<ctu::RestResourceConnection>>::__swap_out_circular_buffer(a3, v20);
          unint64_t v11 = (void *)a3[1];
          this = std::__split_buffer<std::shared_ptr<ctu::RestResourceConnection>>::~__split_buffer(v20);
        }
        else
        {
          *long long v8 = *v6;
          uint64_t v10 = v6[1];
          v8[1] = v10;
          if (v10) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
          }
          unint64_t v11 = v8 + 2;
          a3[1] = (uint64_t)(v8 + 2);
        }
        a3[1] = (uint64_t)v11;
      }
      v6 += 2;
      v7 -= 16;
    }
    while (v7);
  }
  return this;
}

void sub_19209EBB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t ctu::ConnectionRestResource::handleMessage(ctu::ConnectionRestResource *this, ctu::RestResourceContext *a2, const ctu::PathView *a3)
{
  uint64_t v6 = *((void *)a3 + 3);
  if (v6 == 1)
  {
    if (**((unsigned char **)a3 + 2) == 42)
    {
      (*(void (**)(xpc_object_t *__return_ptr, ctu::RestResourceContext *))(*(void *)a2 + 16))(&object, a2);
      int v9 = ctu::rest::asOperation(&object, v8);
      xpc_release(object);
      if (v9 == 2) {
        return (*(uint64_t (**)(ctu::ConnectionRestResource *, ctu::RestResourceContext *, const ctu::PathView *))(*(void *)this + 40))(this, a2, a3);
      }
      else {
        return 0;
      }
    }
    return 1;
  }
  if (v6) {
    return 1;
  }

  return ctu::RestResource::handleMessage(this, a2, a3);
}

void sub_19209ECF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

uint64_t ctu::ConnectionRestResource::handleRestMessage_GET(ctu::ConnectionRestResource *this, ctu::RestResourceContext *a2, const ctu::PathView *a3)
{
  xpc_object_t v5 = xpc_array_create(0, 0);
  if (v5 || (xpc_object_t v5 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x192FEE1B0](v5) == MEMORY[0x1E4F14568])
    {
      xpc_retain(v5);
      xpc_object_t v6 = v5;
    }
    else
    {
      xpc_object_t v6 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t v5 = 0;
  }
  xpc_release(v5);
  uint64_t v7 = *((void *)this + 2);
  if (v7)
  {
    long long v8 = (uint64_t *)*((void *)this + 1);
    uint64_t v9 = 16 * v7;
    do
    {
      uint64_t v10 = *v8;
      if (*(char *)(*v8 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v10 + 8), *(void *)(v10 + 16));
      }
      else
      {
        long long v11 = *(_OWORD *)(v10 + 8);
        __p.__r_.__value_.__r.__words[2] = *(void *)(v10 + 24);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v11;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::__split_buffer<std::string>::pointer p_p = &__p;
      }
      else {
        std::__split_buffer<std::string>::pointer p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      xpc_object_t v13 = xpc_string_create((const char *)p_p);
      if (!v13) {
        xpc_object_t v13 = xpc_null_create();
      }
      xpc_array_append_value(v6, v13);
      xpc_release(v13);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      v8 += 2;
      v9 -= 16;
    }
    while (v9);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
  if (v6) {
    xpc_retain(v6);
  }
  else {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  }
  (*(void (**)(ctu::RestResourceContext *, std::string *))(*(void *)a2 + 32))(a2, &__p);
  xpc_release(__p.__r_.__value_.__l.__data_);
  xpc_release(v6);
  return 1;
}

void sub_19209EEA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  xpc_release(object);
  xpc_release(v14);
  _Unwind_Resume(a1);
}

uint64_t ctu::ConnectionRestResource::handleRestMessage_POP(ctu::ConnectionRestResource *this, ctu::RestResourceContext *a2, const ctu::PathView *a3)
{
  (**(void (***)(uint64_t *__return_ptr, ctu::RestResourceContext *))a2)(&v5, a2);
  ctu::ConnectionRestResource::eraseConnection((uint64_t)this, (uint64_t)&v5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return 1;
}

uint64_t ctu::ConnectionRestResource::handleRestMessage_PUSH(ctu::ConnectionRestResource *this, ctu::RestResourceContext *a2, const ctu::PathView *a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  unint64_t v34 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v35 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  (**(void (***)(unint64_t *__return_ptr, ctu::RestResourceContext *))a2)(&v34, a2);
  uint64_t v5 = (char *)*((void *)this + 1);
  uint64_t v4 = *((void *)this + 2);
  xpc_object_t v6 = &v5[16 * v4];
  uint64_t v7 = v35;
  long long v8 = v5;
  if (v4)
  {
    long long v8 = (char *)*((void *)this + 1);
    unint64_t v9 = *((void *)this + 2);
    do
    {
      unint64_t v10 = v9 >> 1;
      long long v11 = &v8[16 * (v9 >> 1)];
      unint64_t v12 = *((void *)v11 + 1);
      xpc_object_t v13 = v11 + 16;
      v9 += ~(v9 >> 1);
      if (v12 >= (unint64_t)v35) {
        unint64_t v9 = v10;
      }
      else {
        long long v8 = v13;
      }
    }
    while (v9);
    if (v8 == v6)
    {
      unint64_t v14 = v34;
      unint64_t v36 = v34;
      uint64_t v37 = v35;
      unint64_t v34 = 0;
      uint64_t v35 = 0;
      long long v8 = &v5[16 * v4];
      goto LABEL_19;
    }
    if ((unint64_t)v35 >= *((void *)v8 + 1)) {
      goto LABEL_48;
    }
  }
  unint64_t v14 = v34;
  unint64_t v36 = v34;
  uint64_t v37 = v35;
  unint64_t v34 = 0;
  uint64_t v35 = 0;
  if (v6 != v8 && *((void *)v8 + 1) <= (unint64_t)v7)
  {
    unint64_t v15 = (v6 - v8) >> 4;
    do
    {
      unint64_t v16 = v15 >> 1;
      uint64_t v17 = &v8[16 * (v15 >> 1)];
      unint64_t v18 = *((void *)v17 + 1);
      long long v19 = v17 + 16;
      v15 += ~(v15 >> 1);
      if (v18 >= (unint64_t)v7) {
        unint64_t v15 = v16;
      }
      else {
        long long v8 = v19;
      }
    }
    while (v15);
    if (v8 == v6)
    {
      long long v8 = &v5[16 * v4];
      goto LABEL_35;
    }
    goto LABEL_32;
  }
LABEL_19:
  if (v5 == v8)
  {
    long long v8 = v5;
    goto LABEL_35;
  }
  unint64_t v20 = v8 - 16;
  unint64_t v21 = *((void *)v8 - 1);
  if (v21 < (unint64_t)v7) {
    goto LABEL_35;
  }
  if (v21 > (unint64_t)v7)
  {
    if (v20 == v5)
    {
      long long v8 = v5;
    }
    else
    {
      unint64_t v22 = (v20 - v5) >> 4;
      long long v8 = v5;
      do
      {
        unint64_t v23 = v22 >> 1;
        unint64_t v24 = &v8[16 * (v22 >> 1)];
        unint64_t v25 = *((void *)v24 + 1);
        uint64_t v26 = v24 + 16;
        v22 += ~(v22 >> 1);
        if (v25 >= (unint64_t)v7) {
          unint64_t v22 = v23;
        }
        else {
          long long v8 = v26;
        }
      }
      while (v22);
    }
    if (v8 == v20)
    {
      long long v8 = v20;
      goto LABEL_35;
    }
LABEL_32:
    if (*((void *)v8 + 1) <= (unint64_t)v7) {
      goto LABEL_45;
    }
LABEL_35:
    if (*((void *)this + 3) == v4)
    {
      boost::container::vector<std::shared_ptr<ctu::RestResourceConnection>,boost::container::new_allocator<std::shared_ptr<ctu::RestResourceConnection>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<std::shared_ptr<ctu::RestResourceConnection>>,std::shared_ptr<ctu::RestResourceConnection>*,std::shared_ptr<ctu::RestResourceConnection>>>(&v33, (char *)this + 8, v8, (uint64_t)&v36);
    }
    else if (v6 == v8)
    {
      *(void *)xpc_object_t v6 = v14;
      *(void *)&v5[16 * v4 + 8] = v7;
      unint64_t v36 = 0;
      uint64_t v37 = 0;
      *((void *)this + 2) = v4 + 1;
    }
    else
    {
      int64_t v27 = v6 - 16;
      *(_OWORD *)xpc_object_t v6 = *((_OWORD *)v6 - 1);
      *((void *)v6 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
      *((void *)v6 - 2) = 0;
      ++*((void *)this + 2);
      if (v6 - 16 != v8)
      {
        uint64_t v28 = v6 - 16;
        do
        {
          long long v29 = *((_OWORD *)v28 - 1);
          v28 -= 16;
          *((void *)v27 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
          *(void *)uint64_t v28 = 0;
          uint64_t v30 = (std::__shared_weak_count *)*((void *)v27 + 1);
          *(_OWORD *)int64_t v27 = v29;
          if (v30) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v30);
          }
          int64_t v27 = v28;
        }
        while (v28 != v8);
      }
      unint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v31 = (std::__shared_weak_count *)*((void *)v8 + 1);
      *(void *)long long v8 = v14;
      *((void *)v8 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v7;
      if (v31) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v31);
      }
    }
  }
LABEL_45:
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  uint64_t v7 = v35;
LABEL_48:
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  return 1;
}

void sub_19209F23C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

void ctu::ConnectionRestResource::pingAllConnections(ctu::ConnectionRestResource *this@<X0>, NSObject **a2@<X8>)
{
  uint64_t v4 = dispatch_group_create();
  uint64_t v5 = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v5);
    dispatch_release(v5);
  }
  xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  ctu::rest::createPingMessage(&object);
  uint64_t v6 = *((void *)this + 2);
  if (v6)
  {
    uint64_t v7 = (uint64_t *)*((void *)this + 1);
    uint64_t v8 = 16 * v6;
    do
    {
      uint64_t v9 = *v7;
      xpc_object_t v13 = object;
      if (object) {
        xpc_retain(object);
      }
      else {
        xpc_object_t v13 = xpc_null_create();
      }
      dispatch_queue_global_t global_queue = dispatch_get_global_queue(0, 0);
      v11[0] = MEMORY[0x1E4F143A8];
      v11[1] = 1174405120;
      _OWORD v11[2] = ___ZNK3ctu22ConnectionRestResource18pingAllConnectionsEv_block_invoke;
      void v11[3] = &__block_descriptor_tmp_24;
      dispatch_group_t group = v5;
      if (v5)
      {
        dispatch_retain(v5);
        if (group) {
          dispatch_group_enter(group);
        }
      }
      (*(void (**)(uint64_t, xpc_object_t *, dispatch_queue_global_t, void *))(*(void *)v9 + 24))(v9, &v13, global_queue, v11);
      xpc_release(v13);
      xpc_object_t v13 = 0;
      if (group)
      {
        dispatch_group_leave(group);
        if (group) {
          dispatch_release(group);
        }
      }
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  *a2 = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  xpc_release(object);
  if (v5)
  {
    dispatch_group_leave(v5);
    dispatch_release(v5);
  }
}

void sub_19209F428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, dispatch_group_t group, xpc_object_t object, xpc_object_t a16)
{
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  xpc_release(object);
  xpc_release(a16);
  if (v16)
  {
    dispatch_group_leave(v16);
    dispatch_release(v16);
  }
  _Unwind_Resume(a1);
}

void *boost::container::vector<std::shared_ptr<ctu::RestResourceConnection>,boost::container::new_allocator<std::shared_ptr<ctu::RestResourceConnection>>,void>::~vector(void *a1)
{
  uint64_t v2 = a1[1];
  if (v2)
  {
    uint64_t v3 = (std::__shared_weak_count **)(*a1 + 8);
    do
    {
      if (*v3) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*v3);
      }
      v3 += 2;
      --v2;
    }
    while (v2);
  }
  if (a1[2]) {
    operator delete((void *)*a1);
  }
  return a1;
}

void boost::container::vector<std::shared_ptr<ctu::RestResourceConnection>,boost::container::new_allocator<std::shared_ptr<ctu::RestResourceConnection>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<std::shared_ptr<ctu::RestResourceConnection>>,std::shared_ptr<ctu::RestResourceConnection>*,std::shared_ptr<ctu::RestResourceConnection>>>(void *a1, char *a2, void *a3, uint64_t a4)
{
  unint64_t v4 = *((void *)a2 + 2);
  unint64_t v5 = 0x7FFFFFFFFFFFFFFLL;
  unint64_t v6 = *((void *)a2 + 1) + 1;
  if (0x7FFFFFFFFFFFFFFLL - v4 < v6 - v4) {
    goto LABEL_27;
  }
  unint64_t v7 = v4 >> 61;
  unint64_t v8 = 8 * v4;
  if (v7 > 4) {
    uint64_t v9 = -1;
  }
  else {
    uint64_t v9 = v8;
  }
  unint64_t v10 = v8 / 5;
  if (v7) {
    unint64_t v10 = v9;
  }
  if (v10 < 0x7FFFFFFFFFFFFFFLL) {
    unint64_t v5 = v10;
  }
  unint64_t v11 = v6 <= v5 ? v5 : *((void *)a2 + 1) + 1;
  if (v11 >> 59) {
LABEL_27:
  }
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
  unint64_t v16 = *(void **)a2;
  uint64_t v17 = operator new(16 * v11);
  unint64_t v18 = v17;
  long long v19 = *(char **)a2;
  uint64_t v20 = *(void *)a2 + 16 * *((void *)a2 + 1);
  unint64_t v21 = v17;
  if (*(void **)a2 != a3)
  {
    unint64_t v22 = *(void **)a2;
    unint64_t v21 = v17;
    do
    {
      *v21++ = *(_OWORD *)v22;
      *unint64_t v22 = 0;
      v22[1] = 0;
      v22 += 2;
    }
    while (v22 != a3);
  }
  _OWORD *v21 = *(_OWORD *)a4;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  if ((void *)v20 != a3)
  {
    unint64_t v23 = v21 + 1;
    unint64_t v24 = a3;
    do
    {
      *v23++ = *(_OWORD *)v24;
      void *v24 = 0;
      v24[1] = 0;
      v24 += 2;
    }
    while (v24 != (void *)v20);
  }
  if (v19)
  {
    uint64_t v25 = *((void *)a2 + 1);
    if (v25)
    {
      uint64_t v26 = (std::__shared_weak_count **)(v19 + 8);
      do
      {
        if (*v26) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*v26);
        }
        v26 += 2;
        --v25;
      }
      while (v25);
    }
    operator delete(*(void **)a2);
  }
  uint64_t v27 = *((void *)a2 + 1) + 1;
  *(void *)a2 = v18;
  *((void *)a2 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v27;
  *((void *)a2 + 2) = v11;
  *a1 = (char *)v18 + (char *)a3 - (char *)v16;
}

uint64_t ctu::LoggerTree::LoggerTree(uint64_t a1, long long *a2)
{
  uint64_t v3 = (std::string *)(a1 + 48);
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  *(_WORD *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  return a1;
}

void sub_19209F6BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = v10 + 3;
  std::vector<std::weak_ptr<ctu::TrackedLogger>>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = v10;
  std::vector<ctu::LoggerTree>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void ctu::LoggerTree::~LoggerTree(ctu::LoggerTree *this)
{
  uint64_t v2 = (void *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v2) {
    operator delete(v2);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  uint64_t v3 = (void **)((char *)this + 24);
  std::vector<std::weak_ptr<ctu::TrackedLogger>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)this;
  std::vector<ctu::LoggerTree>::__destroy_vector::operator()[abi:ne180100](&v3);
}

__n128 ctu::LoggerTree::LoggerTree(__n128 *a1, uint64_t a2)
{
  a1->n128_u64[0] = 0;
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  *a1 = *(__n128 *)a2;
  a1[1].n128_u64[0] = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  a1[1].n128_u64[1] = 0;
  a1[2].n128_u64[0] = 0;
  a1[2].n128_u64[1] = 0;
  *(__n128 *)((char *)a1 + 24) = *(__n128 *)(a2 + 24);
  a1[2].n128_u64[1] = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  __n128 result = *(__n128 *)(a2 + 48);
  a1[4].n128_u64[0] = *(void *)(a2 + 64);
  a1[3] = result;
  *(void *)(a2 + ++*(_DWORD *)(this + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 48) = 0;
  a1[4].n128_u16[4] = *(_WORD *)(a2 + 72);
  unint64_t v3 = *(void *)(a2 + 80);
  *(void *)(a2 + 80) = 0;
  a1[5].n128_u64[0] = v3;
  return result;
}

char **ctu::LoggerTree::operator=(char **a1, uint64_t a2)
{
  long long v4 = *a1;
  if (*a1)
  {
    unint64_t v5 = a1[1];
    unint64_t v6 = v4;
    if (v5 != v4)
    {
      do
        ctu::LoggerTree::~LoggerTree((ctu::LoggerTree *)(v5 - 88));
      while (v5 != v4);
      unint64_t v6 = *a1;
    }
    a1[1] = v4;
    operator delete(v6);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(char **)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  unint64_t v7 = (void **)(a1 + 3);
  if (a1[3])
  {
    std::vector<std::weak_ptr<ctu::TrackedLogger>>::__clear[abi:ne180100]((uint64_t *)a1 + 3);
    operator delete(*v7);
    *unint64_t v7 = 0;
    a1[4] = 0;
    a1[5] = 0;
  }
  *(_OWORD *)(a1 + ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = *(_OWORD *)(a2 + 24);
  a1[5] = *(char **)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  unint64_t v8 = (void **)(a1 + 6);
  if (*((char *)a1 + 71) < 0) {
    operator delete(*v8);
  }
  long long v9 = *(_OWORD *)(a2 + 48);
  a1[8] = *(char **)(a2 + 64);
  *(_OWORD *)unint64_t v8 = v9;
  *(unsigned char *)(a2 + 7ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
  *(unsigned char *)(a2 + 48) = 0;
  *((_WORD *)a1 + 36) = *(_WORD *)(a2 + 72);
  unint64_t v10 = *(char **)(a2 + 80);
  *(void *)(a2 + 80) = 0;
  unint64_t v11 = a1[10];
  a1[10] = v10;
  if (v11) {
    operator delete(v11);
  }
  return a1;
}

uint64_t ctu::LoggerTree::tidyUp(ctu::LoggerTree *this)
{
  long long v4 = (uint64_t *)*((void *)this + 3);
  uint64_t v2 = (uint64_t *)*((void *)this + 4);
  unint64_t v3 = (char *)this + 24;
  if (v4 != v2)
  {
    unint64_t v5 = v2 - 2;
    unint64_t v6 = (char *)*((void *)this + 3);
    while (1)
    {
      uint64_t v7 = v4[1];
      if (!v7 || *(void *)(v7 + 8) == -1) {
        break;
      }
      v4 += 2;
      v6 += 16;
      if (v4 == v2)
      {
        long long v4 = (uint64_t *)*((void *)this + 4);
        goto LABEL_18;
      }
    }
    if (v4 != v5)
    {
      uint64_t v8 = (char *)v5 - v6;
      long long v9 = v5;
      while (1)
      {
        uint64_t v10 = v9[1];
        if (v10)
        {
          if (*(void *)(v10 + 8) != -1) {
            break;
          }
        }
        v9 -= 2;
        v5 -= 2;
        v8 -= 16;
        if (v4 == v9) {
          goto LABEL_18;
        }
      }
      uint64_t v11 = (v8 >> 4) + 1;
      if (v8 < 33)
      {
        unint64_t v12 = 0;
        uint64_t v14 = 0;
      }
      else
      {
        unint64_t v12 = std::get_temporary_buffer[abi:ne180100]<std::weak_ptr<ctu::TrackedLogger>>((v8 >> 4) + 1);
        uint64_t v14 = v13;
      }
      long long v4 = std::__stable_partition_impl<std::_ClassicAlgPolicy,ctu::LoggerTree::tidyUp(void)::$_0 &,std::__wrap_iter<std::weak_ptr<ctu::TrackedLogger> *>,long,std::pair<std::weak_ptr<ctu::TrackedLogger> *,long>>(v6, v5, v11, v12, v14);
      if (v12) {
        operator delete(v12);
      }
    }
  }
LABEL_18:
  unint64_t v15 = (long long *)*((void *)this + 4);

  return std::vector<std::weak_ptr<ctu::TrackedLogger>>::erase((uint64_t)v3, (uint64_t)v4, v15);
}

uint64_t std::vector<std::weak_ptr<ctu::TrackedLogger>>::erase(uint64_t a1, uint64_t a2, long long *a3)
{
  if ((long long *)a2 != a3)
  {
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::weak_ptr<ctu::TrackedLogger> *,std::weak_ptr<ctu::TrackedLogger> *,std::weak_ptr<ctu::TrackedLogger> *>((uint64_t)&v10, a3, *(long long **)(a1 + 8), a2);
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        uint64_t v8 = *(std::__shared_weak_count **)(v7 - 8);
        if (v8) {
          std::__shared_weak_count::__release_weak(v8);
        }
        v7 -= 16;
      }
      while (v7 != v6);
    }
    *(void *)(a1 + 8) = v6;
  }
  return a2;
}

uint64_t ctu::LoggerTree::insertAt(uint64_t a1, long long *a2, void *a3)
{
  uint64_t v4 = ctu::LoggerTree::getOrCreateFromPath(a1, a2);
  ctu::LoggerTree::tidyUp((ctu::LoggerTree *)v4);
  long long v5 = *(_OWORD *)a3;
  uint64_t v6 = a3[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 16), 1uLL, memory_order_relaxed);
  }
  unint64_t v7 = *(void *)(v4 + 40);
  uint64_t v8 = *(void **)(v4 + 32);
  if ((unint64_t)v8 >= v7)
  {
    long long v26 = v5;
    uint64_t v10 = *(void *)(v4 + 24);
    uint64_t v11 = ((uint64_t)v8 - v10) >> 4;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60) {
      std::vector<ctu::LoggerTree>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = v7 - v10;
    if (v13 >> 3 > v12) {
      unint64_t v12 = v13 >> 3;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    uint64_t v30 = v4 + 40;
    unint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<ctu::RestResourceConnection>>>(v4 + 40, v14);
    uint64_t v17 = &v15[16 * v11];
    *(_OWORD *)uint64_t v17 = v26;
    long long v9 = v17 + 16;
    long long v19 = *(void **)(v4 + 24);
    unint64_t v18 = *(void **)(v4 + 32);
    if (v18 == v19)
    {
      int64x2_t v21 = vdupq_n_s64((unint64_t)v18);
    }
    else
    {
      do
      {
        long long v20 = *((_OWORD *)v18 - 1);
        v18 -= 2;
        *((_OWORD *)v17 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v20;
        v17 -= 16;
        *unint64_t v18 = 0;
        v18[1] = 0;
      }
      while (v18 != v19);
      int64x2_t v21 = *(int64x2_t *)(v4 + 24);
    }
    *(void *)(v4 + 24) = v17;
    *(void *)(v4 + 32) = v9;
    int64x2_t v28 = v21;
    uint64_t v22 = *(void *)(v4 + 40);
    *(void *)(v4 + 40) = &v15[16 * v16];
    uint64_t v29 = v22;
    uint64_t v27 = v21.i64[0];
    std::__split_buffer<std::weak_ptr<ctu::TrackedLogger>>::~__split_buffer((void **)&v27);
  }
  else
  {
    *uint64_t v8 = v5;
    v8[1] = v6;
    long long v9 = v8 + 2;
    *(void *)(v4 + 32) = v8 + 2;
  }
  *(void *)(v4 + 32) = v9;
  if (*(unsigned char *)(v4 + 72)) {
    BOOL v23 = *(unsigned __int8 *)(v4 + 73) == 255;
  }
  else {
    BOOL v23 = 1;
  }
  if (v23) {
    uint64_t v24 = *(unsigned __int8 *)(v4 + 73);
  }
  else {
    uint64_t v24 = *(unsigned __int8 *)(v4 + 72);
  }
  return (*(uint64_t (**)(void, uint64_t))(*(void *)*a3 + 16))(*a3, v24);
}

void sub_19209FBF0(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::LoggerTree::getOrCreateFromPath(uint64_t a1, long long *a2)
{
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__str_16 = v3;
  *(_OWORD *)&__str_16[16] = v3;
  long long __str = v3;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&__str, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long __str = *a2;
    *(void *)__str_16 = *((void *)a2 + 2);
  }
  std::string::basic_string[abi:ne180100]<0>(&__str_16[8], (char *)&str_7);
  while (1)
  {
    uint64_t v4 = __str_16[7];
    char v5 = __str_16[7];
    uint64_t v6 = *((void *)&__str + 1);
    size_t v7 = __str_16[7] >= 0 ? __str_16[7] : *((void *)&__str + 1);
    if (!v7) {
      break;
    }
    uint64_t v8 = __str_16[7] >= 0 ? &__str : (long long *)__str;
    long long v9 = memchr(v8, 46, v7);
    if (!v9) {
      break;
    }
    std::string::size_type v10 = v9 - (unsigned char *)v8;
    if (v10)
    {
      if (v10 != -1)
      {
        std::string::basic_string(&v78, (const std::string *)&__str, v10 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v92);
        if ((__str_16[31] & 0x80000000) != 0) {
          operator delete(*(void **)&__str_16[8]);
        }
        *(std::string *)&__str_16[8] = v78;
        std::string::resize((std::string *)&__str, v10, 0);
        uint64_t v4 = __str_16[7];
        uint64_t v6 = *((void *)&__str + 1);
        char v5 = __str_16[7];
      }
      break;
    }
    std::string::erase((std::string *)&__str, 0, 1uLL);
  }
  if (v5 >= 0) {
    uint64_t v11 = v4;
  }
  else {
    uint64_t v11 = v6;
  }
  if (v11)
  {
    uint64_t v13 = *(void *)a1;
    uint64_t v12 = *(void *)(a1 + 8);
    uint64_t v14 = *(void *)a1;
    if (*(void *)a1 == v12)
    {
LABEL_41:
      if (v14 != v12)
      {
LABEL_107:
        a1 = ctu::LoggerTree::getOrCreateFromPath(v14, &__str_16[8]);
        goto LABEL_108;
      }
    }
    else
    {
      if (v5 >= 0) {
        p_str = &__str;
      }
      else {
        p_str = (long long *)__str;
      }
      uint64_t v14 = *(void *)a1;
      do
      {
        uint64_t v16 = *(unsigned __int8 *)(v14 + 71);
        if ((v16 & 0x80u) == 0) {
          uint64_t v17 = *(unsigned __int8 *)(v14 + 71);
        }
        else {
          uint64_t v17 = *(void *)(v14 + 56);
        }
        if (v17 == v11)
        {
          if ((v16 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)(v14 + 48), p_str, *(void *)(v14 + 56))) {
              goto LABEL_41;
            }
          }
          else
          {
            if (!*(unsigned char *)(v14 + 71)) {
              goto LABEL_41;
            }
            uint64_t v18 = 0;
            while (*(unsigned __int8 *)(v14 + v18 + 48) == *((unsigned __int8 *)p_str + v18))
            {
              if (v16 == ++v18) {
                goto LABEL_41;
              }
            }
          }
        }
        v14 += 88;
      }
      while (v14 != v12);
    }
    if (v13 != v12)
    {
      unint64_t v19 = 0x2E8BA2E8BA2E8BA3 * ((v12 - v13) >> 3);
      do
      {
        unint64_t v20 = v13 + 88 * (v19 >> 1);
        int v21 = (char)std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(v20 + 48), (void **)&__str);
        if (v21 >= 0) {
          v19 >>= 1;
        }
        else {
          v19 += ~(v19 >> 1);
        }
        if (v21 < 0) {
          uint64_t v13 = v20 + 88;
        }
      }
      while (v19);
      char v5 = __str_16[7];
      uint64_t v12 = v13;
    }
    if (v5 < 0)
    {
      std::string::__init_copy_ctor_external(&v77, (const std::string::value_type *)__str, *((std::string::size_type *)&__str + 1));
    }
    else
    {
      *(_OWORD *)&v77.__r_.__value_.__l.__data_ = __str;
      v77.__r_.__value_.__r.__words[2] = *(void *)__str_16;
    }
    ctu::LoggerTree::LoggerTree((uint64_t)&v78, (long long *)&v77);
    uint64_t v22 = *(void *)a1;
    unint64_t v23 = *(void *)(a1 + 8);
    uint64_t v24 = v12 - *(void *)a1;
    uint64_t v25 = v24 / 88;
    uint64_t v14 = *(void *)a1 + 88 * (v24 / 88);
    unint64_t v26 = *(void *)(a1 + 16);
    if (v23 >= v26)
    {
      unint64_t v32 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v23 - v22) >> 3) + 1;
      if (v32 > 0x2E8BA2E8BA2E8BALL) {
        std::vector<ctu::LoggerTree>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v33 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v26 - v22) >> 3);
      if (2 * v33 > v32) {
        unint64_t v32 = 2 * v33;
      }
      if (v33 >= 0x1745D1745D1745DLL) {
        unint64_t v34 = 0x2E8BA2E8BA2E8BALL;
      }
      else {
        unint64_t v34 = v32;
      }
      uint64_t v91 = a1 + 16;
      if (v34) {
        unint64_t v34 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<ctu::LoggerTree>>(v34);
      }
      else {
        uint64_t v35 = 0;
      }
      unint64_t v39 = v34 + 88 * v25;
      unint64_t v87 = v34;
      uint64_t v88 = (__n128 *)v39;
      uint64_t v89 = v39;
      unint64_t v90 = v34 + 88 * v35;
      if (v25 == v35)
      {
        if (v24 < 1)
        {
          if (v12 == v22) {
            unint64_t v43 = 1;
          }
          else {
            unint64_t v43 = 2 * v25;
          }
          v92[4] = a1 + 16;
          uint64_t v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ctu::LoggerTree>>(v43);
          uint64_t v46 = v44;
          uint64_t v47 = (__n128 *)&v44[88 * (v43 >> 2)];
          uint64_t v48 = &v44[88 * v45];
          std::__split_buffer<std::string>::pointer v49 = v88;
          uint64_t v50 = v89;
          uint64_t v51 = v88;
          unint64_t v52 = (char *)v47;
          if ((__n128 *)v89 != v88)
          {
            uint64_t v74 = &v44[88 * v45];
            uint64_t v53 = (v89 - (uint64_t)v88) / 88;
            unint64_t v52 = (char *)v47 + 88 * v53;
            uint64_t v54 = 88 * v53;
            uint64_t v55 = (__n128 *)&v44[88 * (v43 >> 2)];
            uint64_t v56 = (uint64_t)v88;
            do
            {
              ctu::LoggerTree::LoggerTree(v55, v56);
              uint64_t v55 = (__n128 *)(v57 + 88);
              v56 += 88;
              v54 -= 88;
            }
            while (v54);
            uint64_t v51 = (__n128 *)v50;
            uint64_t v48 = v74;
          }
          unint64_t v58 = v87;
          unint64_t v59 = v90;
          unint64_t v87 = (unint64_t)v46;
          uint64_t v88 = v47;
          v92[0] = v58;
          v92[1] = v49;
          uint64_t v89 = (uint64_t)v52;
          unint64_t v90 = (unint64_t)v48;
          v92[2] = v51;
          v92[3] = v59;
          std::__split_buffer<ctu::LoggerTree>::~__split_buffer((uint64_t)v92);
          unint64_t v39 = v89;
        }
        else
        {
          uint64_t v40 = v25 + 2;
          if (v25 >= -1) {
            uint64_t v40 = v25 + 1;
          }
          v39 -= 88 * (v40 >> 1);
          uint64_t v88 = (__n128 *)v39;
          uint64_t v89 = v39;
        }
      }
      *(void *)(v39 + 16) = 0;
      *(void *)(v39 + 24) = 0;
      *(void *)unint64_t v39 = 0;
      *(void *)(v39 + 8) = 0;
      *(std::string *)unint64_t v39 = v78;
      *(_OWORD *)&v78.__r_.__value_.__l.__data_ = 0uLL;
      *(void *)(v39 + 32) = 0;
      *(void *)(v39 + 40) = 0;
      *(_OWORD *)(v39 + 24) = v79;
      *(void *)(v39 + 40) = v80;
      v78.__r_.__value_.__r.__words[2] = 0;
      long long v79 = 0uLL;
      uint64_t v80 = 0;
      long long v60 = v81;
      *(void *)(v39 + 64) = v82;
      *(_OWORD *)(v39 + 48) = v60;
      long long v81 = 0uLL;
      *(_WORD *)(v39 + 72) = v83;
      uint64_t v61 = v84;
      uint64_t v82 = 0;
      uint64_t v84 = 0;
      *(void *)(v39 + 80) = v61;
      uint64_t v62 = (uint64_t)v88;
      uint64_t v63 = (__n128 *)(v89 + 88);
      v89 += 88;
      uint64_t v64 = *(void *)a1;
      if (*(void *)a1 == v14)
      {
        uint64_t v66 = v88;
      }
      else
      {
        uint64_t v65 = v14;
        uint64_t v66 = v88;
        do
        {
          uint64_t v66 = (__n128 *)((char *)v66 - 88);
          v65 -= 88;
          ctu::LoggerTree::LoggerTree(v66, v65);
        }
        while (v65 != v64);
        uint64_t v63 = (__n128 *)v89;
      }
      uint64_t v88 = v66;
      uint64_t v67 = *(void *)(a1 + 8);
      if (v67 != v14)
      {
        do
        {
          ctu::LoggerTree::LoggerTree(v63, v14);
          v14 += 88;
          uint64_t v63 = (__n128 *)(v68 + 88);
        }
        while (v14 != v67);
        uint64_t v66 = v88;
        uint64_t v14 = *(void *)(a1 + 8);
      }
      uint64_t v69 = *(void *)a1;
      *(void *)a1 = v66;
      *(void *)(a1 + 8) = v63;
      unint64_t v70 = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v90;
      uint64_t v89 = v14;
      unint64_t v90 = v70;
      unint64_t v87 = v69;
      uint64_t v88 = (__n128 *)v69;
      std::__split_buffer<ctu::LoggerTree>::~__split_buffer((uint64_t)&v87);
      uint64_t v14 = v62;
    }
    else if (v14 == v23)
    {
      *(void *)uint64_t v14 = 0;
      *(void *)(v14 + 8) = 0;
      *(void *)(v14 + 16) = 0;
      *(std::string *)uint64_t v14 = v78;
      memset(&v78, 0, sizeof(v78));
      uint64_t v36 = v22 + 88 * v25;
      *(void *)(v36 + 24) = 0;
      *(void *)(v36 + 32) = 0;
      *(void *)(v36 + 40) = 0;
      *(_OWORD *)(v36 + 24) = v79;
      *(void *)(v36 + 40) = v80;
      long long v79 = 0uLL;
      uint64_t v80 = 0;
      long long v37 = v81;
      *(void *)(v36 + 64) = v82;
      *(_OWORD *)(v36 + 48) = v37;
      uint64_t v82 = 0;
      long long v81 = 0uLL;
      *(_WORD *)(v36 + 72) = v83;
      uint64_t v38 = v84;
      uint64_t v84 = 0;
      *(void *)(v36 + 80) = v38;
      *(void *)(a1 + 8) = v14 + 88;
    }
    else
    {
      uint64_t v27 = v14 + 88;
      int64x2_t v28 = (char **)(v23 - 88);
      if (v23 < 0x58)
      {
        uint64_t v30 = *(__n128 **)(a1 + 8);
      }
      else
      {
        unint64_t v29 = v23 - 88;
        uint64_t v30 = *(__n128 **)(a1 + 8);
        do
        {
          ctu::LoggerTree::LoggerTree(v30, v29);
          v29 += 88;
          uint64_t v30 = (__n128 *)(v31 + 88);
        }
        while (v29 < v23);
      }
      *(void *)(a1 + 8) = v30;
      if (v23 != v27)
      {
        uint64_t v41 = 8 * ((uint64_t)(v23 - v27) >> 3);
        uint64_t v42 = v22 + 88 * v25 - 88;
        do
        {
          ctu::LoggerTree::operator=(v28, v42 + v41);
          v28 -= 11;
          v41 -= 88;
        }
        while (v41);
      }
      ctu::LoggerTree::operator=((char **)v14, (uint64_t)&v78);
    }
    ctu::LoggerTree::~LoggerTree((ctu::LoggerTree *)&v78);
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v77.__r_.__value_.__l.__data_);
    }
    if (*(unsigned char *)(a1 + 72)) {
      BOOL v71 = *(unsigned __int8 *)(a1 + 73) == 255;
    }
    else {
      BOOL v71 = 1;
    }
    if (v71) {
      int v72 = *(unsigned __int8 *)(a1 + 73);
    }
    else {
      int v72 = *(unsigned __int8 *)(a1 + 72);
    }
    ctu::LoggerTree::updateParentLogLevel(v14, v72);
    ctu::LoggerTree::commitConfigUpdate(&v75, (ctu::LoggerTree *)v14);
    if (v76) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v76);
    }
    goto LABEL_107;
  }
LABEL_108:
  if ((__str_16[31] & 0x80000000) != 0) {
    operator delete(*(void **)&__str_16[8]);
  }
  if ((__str_16[7] & 0x80000000) != 0) {
    operator delete((void *)__str);
  }
  return a1;
}

void sub_1920A02F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  std::__split_buffer<ctu::LoggerTree>::~__split_buffer(v37 - 168);
  ctu::LoggerTree::~LoggerTree((ctu::LoggerTree *)&a20);
  if (a18 < 0) {
    operator delete(__p);
  }
  std::pair<std::string,std::string>::~pair((uint64_t)&a32);
  _Unwind_Resume(a1);
}

char *ctu::LoggerTree::updateParentLogLevel(uint64_t a1, int a2)
{
  __n128 result = *(char **)(a1 + 80);
  uint64_t v4 = (unsigned __int8 *)(a1 + 73);
  if (result) {
    uint64_t v4 = (unsigned __int8 *)(result + 1);
  }
  if (*v4 != a2)
  {
    char v5 = a2;
    if (!result)
    {
      __n128 result = (char *)operator new(2uLL);
      *(void *)(a1 + 80) = result;
      *(_WORD *)__n128 result = *(_WORD *)(a1 + 72);
    }
    result[1] = v5;
  }
  return result;
}

void ctu::LoggerTree::commitConfigUpdate(uint64_t *__return_ptr a1@<X8>, ctu::LoggerTree *this@<X0>)
{
  ctu::LoggerTree::commitConfigUpdate_impl(this);
  uint64_t v4 = (char *)operator new(0x30uLL);
  *((void *)v4 + ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = 0;
  *((void *)v4 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)uint64_t v4 = &unk_1EE2F8B20;
  *((void *)v4 + 4) = 0;
  *((void *)v4 + 5) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_7);
  ctu::LoggerTree::appendLevels((const std::string *)this, (const void **)__p, (int64x2_t *)(v4 + 24));
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *a1 = (uint64_t)(v4 + 24);
  a1[1] = (uint64_t)v4;
}

void sub_1920A0470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void ctu::LoggerTree::updateLogLevels(uint64_t a1, void *a2)
{
  if (MEMORY[0x192FEE1B0](*a2) == MEMORY[0x1E4F14590])
  {
    uint64_t v12 = 0;
    uint64_t v13 = &v12;
    uint64_t v14 = 0x4002000000;
    unint64_t v15 = __Block_byref_object_copy_;
    v18[0] = 0;
    v18[1] = 0;
    uint64_t v16 = __Block_byref_object_dispose_;
    uint64_t v17 = v18;
    uint64_t v4 = (void *)*a2;
    applier[0] = MEMORY[0x1E4F143A8];
    applier[1] = 1107296256;
    applier[2] = ___ZN3ctu10LoggerTree15updateLogLevelsEN3xpc4dictE_block_invoke;
    applier[3] = &__block_descriptor_tmp_25;
    applier[4] = &v12;
    xpc_dictionary_apply(v4, applier);
    char v5 = (long long *)v13[5];
    char v6 = (long long *)(v13 + 6);
    if (v5 != (long long *)(v13 + 6))
    {
      do
      {
        uint64_t v7 = ctu::LoggerTree::getOrCreateFromPath(a1, v5 + 2);
        ctu::LoggerTree::updateLocalLogLevel(v7, *((unsigned __int8 *)v5 + 56));
        uint64_t v8 = (long long *)*((void *)v5 + 1);
        if (v8)
        {
          do
          {
            long long v9 = v8;
            uint64_t v8 = *(long long **)v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            long long v9 = (long long *)*((void *)v5 + 2);
            BOOL v10 = *(void *)v9 == (void)v5;
            char v5 = v9;
          }
          while (!v10);
        }
        char v5 = v9;
      }
      while (v9 != v6);
    }
    _Block_object_dispose(&v12, 8);
    std::__tree<std::__value_type<std::string,ctu::LogLevel>,std::__map_value_compare<std::string,std::__value_type<std::string,ctu::LogLevel>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ctu::LogLevel>>>::destroy((uint64_t)&v17, v18[0]);
  }
}

void sub_1920A05FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char *a21)
{
  _Block_object_dispose(&a15, 8);
  std::__tree<std::__value_type<std::string,ctu::LogLevel>,std::__map_value_compare<std::string,std::__value_type<std::string,ctu::LogLevel>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ctu::LogLevel>>>::destroy(v21, a21);
  _Unwind_Resume(a1);
}

void *__Block_byref_object_copy_(void *result, void *a2)
{
  result[5] = a2[5];
  uint64_t v2 = a2 + 6;
  uint64_t v3 = a2[6];
  result[6] = v3;
  uint64_t v4 = result + 6;
  uint64_t v5 = a2[7];
  result[7] = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    a2[5] = v2;
    void *v2 = 0;
    a2[7] = 0;
  }
  else
  {
    result[5] = v4;
  }
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

uint64_t ___ZN3ctu10LoggerTree15updateLogLevelsEN3xpc4dictE_block_invoke(uint64_t a1, char *a2, xpc_object_t object)
{
  xpc_object_t objecta = object;
  if (object) {
    xpc_retain(object);
  }
  else {
    xpc_object_t objecta = xpc_null_create();
  }
  char v5 = xpc::dyn_cast_or_default(&objecta, 0);
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  uint64_t v8 = (uint64_t **)(v6 + 48);
  uint64_t v7 = *(uint64_t **)(v6 + 48);
  if (!v7)
  {
    long long v9 = (uint64_t **)(v6 + 48);
LABEL_12:
    uint64_t v11 = (uint64_t *)operator new(0x40uLL);
    v11[6] = v16;
    *((_OWORD *)v11 + 2) = *(_OWORD *)__p;
    __p[1] = 0;
    uint64_t v16 = 0;
    __p[0] = 0;
    *((unsigned char *)v11 + ++*(_DWORD *)(this + 56) = 0;
    uint64_t *v11 = 0;
    v11[1] = 0;
    _OWORD v11[2] = (uint64_t)v9;
    *uint64_t v8 = v11;
    uint64_t v12 = **(void **)(v6 + 40);
    uint64_t v13 = v11;
    if (v12)
    {
      *(void *)(v6 + 40) = v12;
      uint64_t v13 = *v8;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v6 + 48), v13);
    ++*(void *)(v6 + 56);
    goto LABEL_15;
  }
  while (1)
  {
    while (1)
    {
      long long v9 = (uint64_t **)v7;
      BOOL v10 = v7 + 4;
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, (void **)v7 + 4) & 0x80) == 0) {
        break;
      }
      uint64_t v7 = *v9;
      uint64_t v8 = v9;
      if (!*v9) {
        goto LABEL_12;
      }
    }
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, __p) & 0x80) == 0) {
      break;
    }
    uint64_t v8 = v9 + 1;
    uint64_t v7 = v9[1];
    if (!v7) {
      goto LABEL_12;
    }
  }
  uint64_t v11 = *v8;
  if (!*v8) {
    goto LABEL_12;
  }
LABEL_15:
  *((unsigned char *)v11 + ++*(_DWORD *)(this + 56) = v5;
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  xpc_release(objecta);
  return 1;
}

void sub_1920A07D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, xpc_object_t object)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  xpc_release(object);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32r(uint64_t a1, uint64_t a2)
{
}

void __destroy_helper_block_e8_32r(uint64_t a1)
{
}

unsigned __int8 *ctu::LoggerTree::updateLocalLogLevel(uint64_t a1, int a2)
{
  __n128 result = *(unsigned __int8 **)(a1 + 80);
  uint64_t v4 = (unsigned __int8 *)(a1 + 72);
  if (result) {
    uint64_t v4 = result;
  }
  if (*v4 != a2)
  {
    unsigned __int8 v5 = a2;
    if (!result)
    {
      __n128 result = (unsigned __int8 *)operator new(2uLL);
      *(void *)(a1 + 80) = result;
      *(_WORD *)__n128 result = *(_WORD *)(a1 + 72);
    }
    *__n128 result = v5;
  }
  return result;
}

void ctu::LoggerTree::appendLevels(const std::string *a1, const void **a2, int64x2_t *a3)
{
  v38[2] = *MEMORY[0x1E4F143B8];
  int v5 = a1[3].__r_.__value_.__s.__data_[0];
  memset(&__p, 0, sizeof(__p));
  if (*((char *)a2 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  if (!v6)
  {
    if (SHIBYTE(a1[2].__r_.__value_.__r.__words[2]) < 0)
    {
      if (!a1[2].__r_.__value_.__l.__size_)
      {
LABEL_22:
        if (a1[3].__r_.__value_.__s.__data_[1] == 255 || v5 == 0) {
          int v5 = a1[3].__r_.__value_.__s.__data_[1];
        }
      }
    }
    else if (!*((unsigned char *)&a1[2].__r_.__value_.__s + 23))
    {
      goto LABEL_22;
    }
    std::string::operator=(&__p, a1 + 2);
    goto LABEL_28;
  }
  memset(&v35, 170, sizeof(v35));
  uint64_t v8 = &v35;
  std::string::basic_string[abi:ne180100]((uint64_t)&v35, v6 + 1);
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v8 = (std::string *)v35.__r_.__value_.__r.__words[0];
  }
  if (*((char *)a2 + 23) >= 0) {
    long long v9 = a2;
  }
  else {
    long long v9 = *a2;
  }
  memmove(v8, v9, v6);
  *(_WORD *)((char *)&v8->__r_.__value_.__l.__data_ + v6) = 46;
  int v10 = SHIBYTE(a1[2].__r_.__value_.__r.__words[2]);
  if (v10 >= 0) {
    std::string::pointer data = (const std::string::value_type *)&a1[2];
  }
  else {
    std::string::pointer data = a1[2].__r_.__value_.__l.__data_;
  }
  if (v10 >= 0) {
    std::string::size_type size = HIBYTE(a1[2].__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = a1[2].__r_.__value_.__l.__size_;
  }
  uint64_t v13 = std::string::append(&v35, data, size);
  std::string::size_type v14 = v13->__r_.__value_.__r.__words[0];
  v38[0] = v13->__r_.__value_.__l.__size_;
  *(void *)((char *)v38 + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
  char v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __p.__r_.__value_.__r.__words[0] = v14;
  __p.__r_.__value_.__l.__size_ = v38[0];
  *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v38 + 7);
  *((unsigned char *)&__p.__r_.__value_.__s + 2ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = v15;
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
LABEL_28:
  if (v5)
  {
    unint64_t v17 = a3[1].u64[0];
    unint64_t v18 = a3->u64[1];
    if (v18 >= v17)
    {
      unint64_t v20 = a3->i64[0];
      uint64_t v21 = (uint64_t)(v18 - a3->i64[0]) >> 5;
      unint64_t v22 = v21 + 1;
      if ((unint64_t)(v21 + 1) >> 59) {
        std::vector<ctu::LoggerTree>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v23 = v17 - v20;
      if (v23 >> 4 > v22) {
        unint64_t v22 = v23 >> 4;
      }
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v24 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v24 = v22;
      }
      uint64_t v37 = a3 + 1;
      if (v24)
      {
        if (v24 >> 59) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v25 = operator new(32 * v24);
      }
      else
      {
        uint64_t v25 = 0;
      }
      uint64_t v27 = (std::string *)&v25[32 * v21];
      v35.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
      v35.__r_.__value_.__l.__size_ = (std::string::size_type)v27;
      v35.__r_.__value_.__r.__words[2] = (std::string::size_type)v27;
      uint64_t v36 = &v25[32 * v24];
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v27, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        unint64_t v20 = a3->i64[0];
        unint64_t v18 = a3->u64[1];
        int64x2_t v28 = (char *)v35.__r_.__value_.__r.__words[2];
        uint64_t v27 = (std::string *)v35.__r_.__value_.__l.__size_;
      }
      else
      {
        std::string *v27 = __p;
        int64x2_t v28 = &v25[32 * v21];
      }
      v25[32 * v21 + 24] = v5;
      unint64_t v26 = v28 + 32;
      v35.__r_.__value_.__r.__words[2] = (std::string::size_type)(v28 + 32);
      if (v18 == v20)
      {
        int64x2_t v30 = vdupq_n_s64(v20);
      }
      else
      {
        do
        {
          long long v29 = *(_OWORD *)(v18 - 32);
          v27[-1].__r_.__value_.__l.__size_ = *(void *)(v18 - 16);
          *(_OWORD *)&v27[-2].__r_.__value_.__r.__words[2] = v29;
          *(void *)(v18 - 24) = 0;
          *(void *)(v18 - 16) = 0;
          *(void *)(v18 - 32) = 0;
          v27[-1].__r_.__value_.__s.__data_[16] = *(unsigned char *)(v18 - 8);
          uint64_t v27 = (std::string *)((char *)v27 - 32);
          v18 -= 32;
        }
        while (v18 != v20);
        int64x2_t v30 = *a3;
        unint64_t v26 = (char *)v35.__r_.__value_.__r.__words[2];
      }
      a3->i64[0] = (uint64_t)v27;
      a3->i64[1] = (uint64_t)v26;
      *(int64x2_t *)&v35.__r_.__value_.__r.__words[1] = v30;
      uint64_t v31 = (char *)a3[1].i64[0];
      a3[1].i64[0] = (uint64_t)v36;
      uint64_t v36 = v31;
      v35.__r_.__value_.__r.__words[0] = v30.i64[0];
      std::__split_buffer<std::pair<std::string,ctu::LogLevel>>::~__split_buffer((uint64_t)&v35);
    }
    else
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)a3->i64[1], __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v19 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(void *)(v18 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v18 = v19;
      }
      *(unsigned char *)(v18 + 24) = v5;
      unint64_t v26 = (char *)(v18 + 32);
      a3->i64[1] = v18 + 32;
    }
    a3->i64[1] = (uint64_t)v26;
  }
  std::string::size_type v33 = a1->__r_.__value_.__r.__words[0];
  std::string::size_type v32 = a1->__r_.__value_.__l.__size_;
  while (v33 != v32)
  {
    ctu::LoggerTree::appendLevels(v33, &__p, a3);
    v33 += 88;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1920A0BF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ctu::LoggerTree::commitConfigUpdate_impl(ctu::LoggerTree *this)
{
  uint64_t v2 = (unsigned __int8 *)*((void *)this + 10);
  if (v2)
  {
    unsigned int v3 = v2[1];
    unsigned int v4 = *v2;
    if (v4) {
      BOOL v5 = v3 == 255;
    }
    else {
      BOOL v5 = 1;
    }
    if (v5) {
      uint64_t v6 = v3;
    }
    else {
      uint64_t v6 = v4;
    }
    if (*((unsigned char *)this + 72)) {
      BOOL v7 = *((unsigned __int8 *)this + 73) == 255;
    }
    else {
      BOOL v7 = 1;
    }
    if (v7) {
      int v8 = *((unsigned __int8 *)this + 73);
    }
    else {
      int v8 = *((unsigned __int8 *)this + 72);
    }
    if (v8 != v6)
    {
      uint64_t v14 = *(void *)this;
      uint64_t v15 = *((void *)this + 1);
      while (v14 != v15)
      {
        ctu::LoggerTree::updateParentLogLevel(v14, v6);
        v14 += 88;
      }
      uint64_t v16 = (void *)*((void *)this + 3);
      unint64_t v17 = (void *)*((void *)this + 4);
      while (v16 != v17)
      {
        unint64_t v18 = (std::__shared_weak_count *)v16[1];
        if (v18)
        {
          long long v19 = std::__shared_weak_count::lock(v18);
          if (v19)
          {
            unint64_t v20 = v19;
            if (*v16) {
              (*(void (**)(void, uint64_t))(*(void *)*v16 + 16))(*v16, v6);
            }
            std::__shared_weak_count::__release_shared[abi:ne180100](v20);
          }
        }
        v16 += 2;
      }
    }
    long long v9 = (char *)*((void *)this + 10);
    if (v9) {
      int v10 = (unsigned char *)*((void *)this + 10);
    }
    else {
      int v10 = (char *)this + 72;
    }
    *((unsigned char *)this + 72) = *v10;
    if (v9) {
      uint64_t v11 = v9 + 1;
    }
    else {
      uint64_t v11 = (char *)this + 73;
    }
    *((unsigned char *)this + 7ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = *v11;
    *((void *)this + 10) = 0;
    if (v9) {
      operator delete(v9);
    }
  }
  uint64_t v13 = *(ctu::LoggerTree **)this;
  uint64_t v12 = (ctu::LoggerTree *)*((void *)this + 1);
  while (v13 != v12)
  {
    ctu::LoggerTree::commitConfigUpdate(&v21, v13);
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
    uint64_t v13 = (ctu::LoggerTree *)((char *)v13 + 88);
  }
}

void sub_1920A0DA8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void ctu::LoggerTree::getSimpleConfig(ctu::LoggerTree *this, xpc::dict *a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    xpc_object_t v16 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t v16 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x192FEE1B0](v5) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  xpc_object_t v16 = v6;
LABEL_9:
  xpc_release(v5);
  uint64_t v14 = a2;
  uint64_t v15 = "kDomainLogLevels";
  xpc::dict::object_proxy::operator=((uint64_t)&v14, &v16, &v17);
  xpc_release(v17);
  xpc_object_t v17 = 0;
  xpc_release(v16);
  xpc_object_t v16 = 0;
  xpc_object_t v7 = xpc_array_create(0, 0);
  xpc_object_t v8 = v7;
  if (v7)
  {
    xpc_object_t v12 = v7;
  }
  else
  {
    xpc_object_t v8 = xpc_null_create();
    xpc_object_t v12 = v8;
    if (!v8)
    {
      xpc_object_t v9 = xpc_null_create();
      xpc_object_t v8 = 0;
      goto LABEL_16;
    }
  }
  if (MEMORY[0x192FEE1B0](v8) == MEMORY[0x1E4F14568])
  {
    xpc_retain(v8);
    goto LABEL_17;
  }
  xpc_object_t v9 = xpc_null_create();
LABEL_16:
  xpc_object_t v12 = v9;
LABEL_17:
  xpc_release(v8);
  uint64_t v14 = a2;
  uint64_t v15 = "kLoggers";
  xpc::dict::object_proxy::operator=((uint64_t)&v14, &v12, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v12);
  xpc_object_t v12 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_7);
  ctu::LoggerTree::getConfig((uint64_t *)this, (std::string::size_type)__p, (std::string::size_type)a2, 0);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1920A0F70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ctu::LoggerTree::getConfig(uint64_t *a1, std::string::size_type a2, std::string::size_type a3, uint64_t a4)
{
  if ((a4 & 1) != 0 || *((unsigned char *)a1 + 72))
  {
    object[0] = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    __p.__r_.__value_.__r.__words[0] = a3;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)"kDomainLogLevels";
    xpc::dict::object_proxy::operator xpc::dict((uint64_t)&__p, object);
    if (*((unsigned char *)a1 + 72)) {
      BOOL v8 = *((unsigned __int8 *)a1 + 73) == 255;
    }
    else {
      BOOL v8 = 1;
    }
    if (v8) {
      int64_t v9 = *((unsigned __int8 *)a1 + 73);
    }
    else {
      int64_t v9 = *((unsigned __int8 *)a1 + 72);
    }
    xpc_object_t v37 = xpc_int64_create(v9);
    if (!v37) {
      xpc_object_t v37 = xpc_null_create();
    }
    std::string::size_type v10 = a2;
    if (*(char *)(a2 + 23) < 0) {
      std::string::size_type v10 = *(void *)a2;
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)object;
    __p.__r_.__value_.__l.__size_ = v10;
    xpc::dict::object_proxy::operator=((uint64_t)&__p, &v37, &v38);
    xpc_release(v38);
    xpc_object_t v38 = 0;
    xpc_release(v37);
    xpc_object_t v37 = 0;
    xpc_release(object[0]);
  }
  xpc_object_t v36 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  __p.__r_.__value_.__r.__words[0] = a3;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)"kLoggers";
  xpc::dict::object_proxy::operator xpc::array((uint64_t)&__p, &v36);
  xpc_object_t v12 = (void *)a1[3];
  char v11 = (void *)a1[4];
  while (v12 != v11)
  {
    uint64_t v13 = (std::__shared_weak_count *)v12[1];
    if (v13)
    {
      uint64_t v14 = std::__shared_weak_count::lock(v13);
      if (v14)
      {
        uint64_t v15 = v14;
        uint64_t v16 = *v12;
        if (*v12)
        {
          unsigned int v17 = (*(uint64_t (**)(void))(*(void *)v16 + 40))(*v12);
          unsigned int v18 = v17;
          if ((a4 & 1) != 0 || v17)
          {
            xpc_object_t value = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
            xpc_object_t v19 = xpc_dictionary_create(0, 0, 0);
            xpc_object_t v20 = v19;
            if (v19)
            {
              xpc_object_t value = v19;
              goto LABEL_24;
            }
            xpc_object_t v20 = xpc_null_create();
            xpc_object_t value = v20;
            if (v20)
            {
LABEL_24:
              if (MEMORY[0x192FEE1B0](v20) != MEMORY[0x1E4F14590])
              {
                xpc_object_t v21 = xpc_null_create();
                goto LABEL_28;
              }
              xpc_retain(v20);
            }
            else
            {
              xpc_object_t v21 = xpc_null_create();
              xpc_object_t v20 = 0;
LABEL_28:
              xpc_object_t value = v21;
            }
            xpc_release(v20);
            (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v16 + 32))(&__p, v16);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::__split_buffer<std::string>::pointer p_p = &__p;
            }
            else {
              std::__split_buffer<std::string>::pointer p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            xpc_object_t v33 = xpc_string_create((const char *)p_p);
            if (!v33) {
              xpc_object_t v33 = xpc_null_create();
            }
            object[0] = &value;
            object[1] = "kLoggerName";
            xpc::dict::object_proxy::operator=((uint64_t)object, &v33, &v34);
            xpc_release(v34);
            xpc_object_t v34 = 0;
            xpc_release(v33);
            xpc_object_t v33 = 0;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            xpc_object_t v29 = xpc_int64_create(v18);
            if (!v29) {
              xpc_object_t v29 = xpc_null_create();
            }
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&value;
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)"kLoggerLevel";
            xpc::dict::object_proxy::operator=((uint64_t)&__p, &v29, &v30);
            xpc_release(v30);
            xpc_object_t v30 = 0;
            xpc_release(v29);
            xpc_object_t v29 = 0;
            uint64_t v23 = (const char *)a2;
            if (*(char *)(a2 + 23) < 0) {
              uint64_t v23 = *(const char **)a2;
            }
            xpc_object_t v27 = xpc_string_create(v23);
            if (!v27) {
              xpc_object_t v27 = xpc_null_create();
            }
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&value;
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)"kLoggerDomain";
            xpc::dict::object_proxy::operator=((uint64_t)&__p, &v27, &v28);
            xpc_release(v28);
            xpc_object_t v28 = 0;
            xpc_release(v27);
            xpc_object_t v27 = 0;
            xpc_array_append_value(v36, value);
            xpc_release(value);
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
    }
    v12 += 2;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    if (!*(void *)(a2 + 8)) {
      goto LABEL_50;
    }
    goto LABEL_49;
  }
  if (*(unsigned char *)(a2 + 23)) {
LABEL_49:
  }
    std::string::push_back((std::string *)a2, 46);
LABEL_50:
  uint64_t v25 = *a1;
  for (uint64_t i = a1[1]; v25 != i; v25 += 88)
  {
    memset(&__p, 170, sizeof(__p));
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a2, (const void **)(v25 + 48), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v26, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string v26 = __p;
    }
    ctu::LoggerTree::getConfig(v25, &v26, a3, a4);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v26.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  xpc_release(v36);
}

void sub_1920A13D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,xpc_object_t object)
{
  xpc_release(*(xpc_object_t *)(v29 - 104));
  _Unwind_Resume(a1);
}

void ctu::LoggerTree::getFullConfig(ctu::LoggerTree *this, xpc::dict *a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    xpc_object_t v16 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t v16 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x192FEE1B0](v5) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  xpc_object_t v16 = v6;
LABEL_9:
  xpc_release(v5);
  uint64_t v14 = a2;
  uint64_t v15 = "kDomainLogLevels";
  xpc::dict::object_proxy::operator=((uint64_t)&v14, &v16, &v17);
  xpc_release(v17);
  xpc_object_t v17 = 0;
  xpc_release(v16);
  xpc_object_t v16 = 0;
  xpc_object_t v7 = xpc_array_create(0, 0);
  xpc_object_t v8 = v7;
  if (v7)
  {
    xpc_object_t v12 = v7;
  }
  else
  {
    xpc_object_t v8 = xpc_null_create();
    xpc_object_t v12 = v8;
    if (!v8)
    {
      xpc_object_t v9 = xpc_null_create();
      xpc_object_t v8 = 0;
      goto LABEL_16;
    }
  }
  if (MEMORY[0x192FEE1B0](v8) == MEMORY[0x1E4F14568])
  {
    xpc_retain(v8);
    goto LABEL_17;
  }
  xpc_object_t v9 = xpc_null_create();
LABEL_16:
  xpc_object_t v12 = v9;
LABEL_17:
  xpc_release(v8);
  uint64_t v14 = a2;
  uint64_t v15 = "kLoggers";
  xpc::dict::object_proxy::operator=((uint64_t)&v14, &v12, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v12);
  xpc_object_t v12 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_7);
  ctu::LoggerTree::getConfig((uint64_t *)this, (std::string::size_type)__p, (std::string::size_type)a2, 1);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1920A1658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void xpc::dict::object_proxy::operator xpc::array(uint64_t a1@<X0>, void *a2@<X8>)
{
  xpc_object_t value = xpc_dictionary_get_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8));
  if (value)
  {
    xpc_object_t v4 = value;
    xpc_retain(value);
    *a2 = v4;
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    *a2 = v4;
    if (!v4)
    {
      xpc_object_t v5 = xpc_null_create();
      xpc_object_t v4 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x192FEE1B0](v4) != MEMORY[0x1E4F14568])
  {
    xpc_object_t v5 = xpc_null_create();
LABEL_8:
    *a2 = v5;
    goto LABEL_9;
  }
  xpc_retain(v4);
LABEL_9:
  xpc_release(v4);
}

void std::vector<std::weak_ptr<ctu::TrackedLogger>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::weak_ptr<ctu::TrackedLogger>>::__clear[abi:ne180100]((uint64_t *)v2);
    unsigned int v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::weak_ptr<ctu::TrackedLogger>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    xpc_object_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  a1[1] = v2;
}

void std::vector<ctu::LoggerTree>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    xpc_object_t v4 = (char *)v1[1];
    xpc_object_t v5 = v2;
    if (v4 != v2)
    {
      do
        ctu::LoggerTree::~LoggerTree((ctu::LoggerTree *)(v4 - 88));
      while (v4 != v2);
      xpc_object_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<ctu::LoggerTree>::__throw_length_error[abi:ne180100]()
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<ctu::LoggerTree>>(unint64_t a1)
{
  if (a1 >= 0x2E8BA2E8BA2E8BBLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(88 * a1);
}

long long *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::weak_ptr<ctu::TrackedLogger> *,std::weak_ptr<ctu::TrackedLogger> *,std::weak_ptr<ctu::TrackedLogger> *>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  xpc_object_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      long long v7 = *v5;
      *(void *)xpc_object_t v5 = 0;
      *((void *)v5 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
      xpc_object_t v8 = *(std::__shared_weak_count **)(a4 + 8);
      *(_OWORD *)a4 = v7;
      if (v8) {
        std::__shared_weak_count::__release_weak(v8);
      }
      ++v5;
      a4 += 16;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void **std::__split_buffer<std::weak_ptr<ctu::TrackedLogger>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::weak_ptr<ctu::TrackedLogger>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 16;
    xpc_object_t v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_weak(v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 16;
    }
  }
}

uint64_t std::__split_buffer<ctu::LoggerTree>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 88;
    ctu::LoggerTree::~LoggerTree((ctu::LoggerTree *)(i - 88));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__split_buffer<std::pair<std::string,ctu::LogLevel>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void ***)(a1 + 8);
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      xpc_object_t v4 = v2 - 4;
      *(void *)(a1 + 16) = v2 - 4;
      if (*((char *)v2 - 9) < 0)
      {
        operator delete(*v4);
        xpc_object_t v4 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::get_temporary_buffer[abi:ne180100]<std::weak_ptr<ctu::TrackedLogger>>(uint64_t a1)
{
  if (a1 < 1) {
    return 0;
  }
  if (a1 >= 0x7FFFFFFFFFFFFFFLL) {
    unint64_t v1 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v1 = a1;
  }
  uint64_t v2 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
  while (1)
  {
    __n128 result = operator new(16 * v1, v2);
    if (result) {
      break;
    }
    BOOL v4 = v1 > 1;
    v1 >>= 1;
    if (!v4) {
      return 0;
    }
  }
  return result;
}

uint64_t *std::__stable_partition_impl<std::_ClassicAlgPolicy,ctu::LoggerTree::tidyUp(void)::$_0 &,std::__wrap_iter<std::weak_ptr<ctu::TrackedLogger> *>,long,std::pair<std::weak_ptr<ctu::TrackedLogger> *,long>>(void *a1, void *a2, uint64_t a3, _OWORD *a4, uint64_t a5)
{
  xpc_object_t v6 = a1;
  if (a3 == 3)
  {
    std::string::size_type v10 = a1 + 3;
    uint64_t v11 = a1[3];
    if (!v11 || *(void *)(v11 + 8) == -1)
    {
      uint64_t v13 = (uint64_t)(a1 + 2);
      uint64_t v22 = a1[2];
      a1[2] = *a2;
      *a2 = v22;
      uint64_t v23 = a1[3];
      a1[3] = a2[1];
      a2[1] = v23;
      uint64_t v24 = *a1;
      *a1 = a1[2];
      a1[2] = v24;
      xpc_object_t v9 = a1 + 1;
      goto LABEL_18;
    }
    long long v12 = *(_OWORD *)a1;
    *a1 = a1[2];
    a1[1] = v11;
    *((_OWORD *)a1 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v12;
    a1[2] = *a2;
    xpc_object_t v9 = a1 + 3;
    *a2 = v12;
    std::string::size_type v10 = a2 + 1;
LABEL_7:
    uint64_t v13 = (uint64_t)a2;
LABEL_18:
    uint64_t v25 = *v9;
    *xpc_object_t v9 = *v10;
    uint64_t *v10 = v25;
    return (uint64_t *)v13;
  }
  if (a3 == 2)
  {
    uint64_t v8 = *a1;
    *a1 = *a2;
    xpc_object_t v9 = a1 + 1;
    *a2 = v8;
    std::string::size_type v10 = a2 + 1;
    goto LABEL_7;
  }
  if (a5 >= a3)
  {
    *a4 = *(_OWORD *)a1;
    xpc_object_t v27 = a4 + 1;
    *a1 = 0;
    a1[1] = 0;
    xpc_object_t v28 = a1 + 2;
    unint64_t v29 = 1;
    if (a1 + 2 == a2)
    {
      xpc_object_t v33 = a1;
    }
    else
    {
      do
      {
        uint64_t v30 = v28[1];
        if (!v30 || *(void *)(v30 + 8) == -1)
        {
          void *v27 = *v28;
          v27[1] = v30;
          v27 += 2;
          void *v28 = 0;
          v28[1] = 0;
          ++v29;
        }
        else
        {
          uint64_t v31 = *v28;
          void *v28 = 0;
          v28[1] = 0;
          std::string::size_type v32 = (std::__shared_weak_count *)v6[1];
          *xpc_object_t v6 = v31;
          v6[1] = v30;
          if (v32) {
            std::__shared_weak_count::__release_weak(v32);
          }
          v6 += 2;
        }
        v28 += 2;
      }
      while (v28 != a2);
      xpc_object_t v33 = v28 - 2;
    }
    uint64_t v41 = *a2;
    uint64_t v42 = v33[3];
    *a2 = 0;
    a2[1] = 0;
    unint64_t v43 = (std::__shared_weak_count *)v6[1];
    *xpc_object_t v6 = v41;
    v6[1] = v42;
    if (v43) {
      std::__shared_weak_count::__release_weak(v43);
    }
    uint64_t v13 = (uint64_t)(v6 + 2);
    if (v27 > (void *)a4)
    {
      uint64_t v44 = (std::__shared_weak_count **)(v6 + 3);
      uint64_t v45 = a4;
      do
      {
        long long v46 = *v45;
        *(void *)uint64_t v45 = 0;
        *((void *)v45 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
        uint64_t v47 = *v44;
        *(_OWORD *)(v44 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v46;
        if (v47) {
          std::__shared_weak_count::__release_weak(v47);
        }
        ++v45;
        v44 += 2;
      }
      while (v45 < (_OWORD *)v27);
    }
    if (v29)
    {
      unint64_t v48 = 0;
      std::__split_buffer<std::string>::pointer v49 = (std::__shared_weak_count **)a4 + 1;
      do
      {
        if (*v49) {
          std::__shared_weak_count::__release_weak(*v49);
        }
        ++v48;
        v49 += 2;
      }
      while (v48 < v29);
    }
  }
  else
  {
    if (a3 >= 0) {
      uint64_t v16 = a3;
    }
    else {
      uint64_t v16 = a3 + 1;
    }
    uint64_t v17 = v16 >> 1;
    unsigned int v18 = &a1[2 * (v16 >> 1)];
    uint64_t v19 = 2 * (v16 >> 1);
    for (uint64_t i = v17; ; --i)
    {
      uint64_t v21 = a1[v19 - 1];
      if (v21)
      {
        if (*(void *)(v21 + 8) != -1) {
          break;
        }
      }
      v19 -= 2;
      if (!(v19 * 8))
      {
        xpc_object_t v34 = a1;
        goto LABEL_31;
      }
    }
    xpc_object_t v34 = (uint64_t *)std::__stable_partition_impl<std::_ClassicAlgPolicy,ctu::LoggerTree::tidyUp(void)::$_0 &,std::__wrap_iter<std::weak_ptr<ctu::TrackedLogger> *>,long,std::pair<std::weak_ptr<ctu::TrackedLogger> *,long>>(a1, &a1[v19 - 2], i, a4, a5);
LABEL_31:
    uint64_t v35 = a3 - v17;
    xpc_object_t v36 = &v6[2 * v17];
    xpc_object_t v38 = v36 + 1;
    uint64_t v37 = v36[1];
    if (v37)
    {
      uint64_t v13 = (uint64_t)(a2 + 2);
      unint64_t v39 = v36 + 2;
      do
      {
        if (*(void *)(v37 + 8) == -1) {
          break;
        }
        if (v39 == a2) {
          goto LABEL_53;
        }
        --v35;
        uint64_t v37 = v39[1];
        v39 += 2;
      }
      while (v37);
      uint64_t v40 = v39 - 2;
    }
    else
    {
      uint64_t v40 = v18;
    }
    uint64_t v13 = std::__stable_partition_impl<std::_ClassicAlgPolicy,ctu::LoggerTree::tidyUp(void)::$_0 &,std::__wrap_iter<std::weak_ptr<ctu::TrackedLogger> *>,long,std::pair<std::weak_ptr<ctu::TrackedLogger> *,long>>(v40, a2, v35, a4, a5);
LABEL_53:
    if (v34 != v18)
    {
      if (v18 == (uint64_t *)v13)
      {
        return v34;
      }
      else
      {
        uint64_t v50 = *v34;
        *xpc_object_t v34 = *v18;
        *unsigned int v18 = v50;
        uint64_t v51 = v18 + 2;
        uint64_t v52 = v34[1];
        v34[1] = *v38;
        uint64_t *v38 = v52;
        uint64_t v53 = v34 + 2;
        while (v51 != (uint64_t *)v13)
        {
          if (v53 == v18) {
            unsigned int v18 = v51;
          }
          uint64_t v54 = *v53;
          *uint64_t v53 = *v51;
          uint64_t *v51 = v54;
          uint64_t v55 = v53[1];
          v53[1] = v51[1];
          v51[1] = v55;
          v53 += 2;
          v51 += 2;
        }
        if (v53 == v18)
        {
          return v18;
        }
        else
        {
          uint64_t v56 = v53;
          uint64_t v57 = v18;
          do
          {
            while (1)
            {
              uint64_t v58 = *v56;
              uint64_t *v56 = *v57;
              *uint64_t v57 = v58;
              uint64_t v59 = v56[1];
              v56[1] = v57[1];
              v57[1] = v59;
              v56 += 2;
              v57 += 2;
              if (v57 == (uint64_t *)v13) {
                break;
              }
              if (v56 == v18) {
                unsigned int v18 = v57;
              }
            }
            uint64_t v57 = v18;
          }
          while (v56 != v18);
          return v53;
        }
      }
    }
  }
  return (uint64_t *)v13;
}

void std::__tree<std::__value_type<std::string,ctu::LogLevel>,std::__map_value_compare<std::string,std::__value_type<std::string,ctu::LogLevel>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ctu::LogLevel>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,ctu::LogLevel>,std::__map_value_compare<std::string,std::__value_type<std::string,ctu::LogLevel>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ctu::LogLevel>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<std::string,ctu::LogLevel>,std::__map_value_compare<std::string,std::__value_type<std::string,ctu::LogLevel>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ctu::LogLevel>>>::destroy(a1, *((void *)a2 + 1));
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }
}

void std::__shared_ptr_emplace<std::vector<std::pair<std::string,ctu::LogLevel>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE2F8B20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<std::pair<std::string,ctu::LogLevel>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE2F8B20;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<std::vector<std::pair<std::string,ctu::LogLevel>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    BOOL v4 = *(void **)(a1 + 24);
    if (v3 != v1)
    {
      do
      {
        if (*(char *)(v3 - 9) < 0) {
          operator delete(*(void **)(v3 - 32));
        }
        v3 -= 32;
      }
      while (v3 != v1);
      BOOL v4 = *(void **)(a1 + 24);
    }
    *(void *)(a1 + 32) = v1;
    operator delete(v4);
  }
}

uint64_t ctu::serial::configure(ctu::serial *this, unsigned int a2, cc_t a3, cc_t a4, int a5)
{
  int v9 = (int)this;
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  v38.c_ospeed = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v38.c_cc = v10;
  *(_OWORD *)&v38.c_cc[16] = v10;
  *(_OWORD *)&v38.c_iflag = v10;
  *(_OWORD *)&v38.c_cflag = v10;
  if (tcgetattr((int)this, &v38))
  {
    uint64_t v11 = __error();
    uint64_t v12 = *v11;
    uint64_t v13 = strerror(*v11);
    _TelephonyUtilDebugPrint((uint64_t)"configure", (uint64_t)"Failed get attributes, err = %s (%d)\n", v14, v15, v16, v17, v18, v19, (uint64_t)v13);
  }
  else if (cfsetspeed(&v38, a2))
  {
    xpc_object_t v20 = __error();
    uint64_t v12 = *v20;
    xpc_object_t v36 = strerror(*v20);
    _TelephonyUtilDebugPrint((uint64_t)"configure", (uint64_t)"Failed set speed, err = %s (%d)\n", v21, v22, v23, v24, v25, v26, (uint64_t)v36);
  }
  else
  {
    cfmakeraw(&v38);
    v38.c_iflag = v38.c_iflag & 0xFFFFFFFFFFFFF0CCLL | 1;
    v38.c_oflag &= ~1uLL;
    v38.c_cc[16] = a3;
    v38.c_cc[17] = a4;
    uint64_t v27 = 51968;
    if (a5) {
      uint64_t v27 = 248576;
    }
    v38.c_cflag = v38.c_cflag & 0xFFFFFFFFFFFC20FFLL | v27;
    v38.c_lflag &= 0xFFFFFFFFFFFFFA77;
    if (tcsetattr(v9, 0, &v38))
    {
      xpc_object_t v28 = __error();
      uint64_t v12 = *v28;
      uint64_t v37 = strerror(*v28);
      _TelephonyUtilDebugPrint((uint64_t)"configure", (uint64_t)"Failed set attributes, err = %s (%d)", v29, v30, v31, v32, v33, v34, (uint64_t)v37);
    }
    else
    {
      return 0;
    }
  }
  return v12;
}

const char *ctu::asString(unsigned int a1)
{
  if (a1 > 3) {
    return "Unknown";
  }
  else {
    return off_1E57446B0[a1];
  }
}

{
  if (a1 > 4) {
    return "Unknown";
  }
  else {
    return off_1E57446D0[a1];
  }
}

uint64_t ctu::TextTransform::reset(uint64_t this)
{
  *(unsigned char *)(this + 24) = 0;
  return this;
}

ctu::TextConverter *ctu::TextConverter::TextConverter(ctu::TextConverter *this)
{
  uint64_t v2 = operator new(0x38uLL);
  v2[2] = 0;
  *((void *)v2 + 2) = 0;
  *((unsigned char *)v2 + 24) = 0;
  *(void *)uint64_t v2 = &unk_1EE2F69F0;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 6) = 0;
  *((void *)v2 + 4) = 0;
  *(void *)this = v2;
  *((void *)this + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v2;
  return this;
}

{
  _DWORD *v2;

  uint64_t v2 = operator new(0x38uLL);
  v2[2] = 0;
  *((void *)v2 + 2) = 0;
  *((unsigned char *)v2 + 24) = 0;
  *(void *)uint64_t v2 = &unk_1EE2F69F0;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 6) = 0;
  *((void *)v2 + 4) = 0;
  *(void *)this = v2;
  *((void *)this + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v2;
  return this;
}

void ctu::TextConverter::~TextConverter(ctu::TextConverter *this)
{
  uint64_t v2 = *(void **)this;
  if (v2)
  {
    do
    {
      *(void *)this = v2[2];
      (*(void (**)(void *))(*v2 + 8))(v2);
      uint64_t v2 = *(void **)this;
    }
    while (*(void *)this);
  }
}

{
  void *v2;

  uint64_t v2 = *(void **)this;
  if (v2)
  {
    do
    {
      *(void *)this = v2[2];
      (*(void (**)(void *))(*v2 + 8))(v2);
      uint64_t v2 = *(void **)this;
    }
    while (*(void *)this);
  }
}

uint64_t ctu::TextConverter::popConversion(ctu::TextConverter *this)
{
  uint64_t v1 = *(void *)this;
  *(void *)this = *(void *)(*(void *)this + 16);
  return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 8))(v1);
}

uint64_t ctu::TextConverter::setSource(uint64_t this, const char *a2, int a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(_DWORD *)(v3 + 8) = a3;
  *(void *)(v3 + 32) = a2;
  *(void *)(v3 + 40) = 0;
  *(void *)(v3 + 48) = a3;
  BOOL v4 = *(void **)this;
  if (*(void *)this)
  {
    do
    {
      this = (*(uint64_t (**)(void *))(*v4 + 24))(v4);
      BOOL v4 = (void *)v4[2];
    }
    while (v4);
  }
  return this;
}

_DWORD *ctu::TextConverter::pushConversion(void *a1, int a2, int a3, int a4, int a5)
{
  switch(a2)
  {
    case 0:
      __n128 result = operator new(0x28uLL);
      int v9 = (_DWORD *)*a1;
      result[2] = 0;
      *((void *)result + 2) = v9;
      *((unsigned char *)result + 24) = 0;
      long long v10 = &unk_1EE2F6C30;
      goto LABEL_25;
    case 1:
      __n128 result = operator new(0x20uLL);
      uint64_t v11 = (_DWORD *)*a1;
      result[2] = 0;
      *((void *)result + 2) = v11;
      *((unsigned char *)result + 24) = 0;
      uint64_t v12 = &unk_1EE2F6CF0;
      goto LABEL_29;
    case 2:
      __n128 result = operator new(0x20uLL);
      uint64_t v13 = (_DWORD *)*a1;
      result[2] = 0;
      *((void *)result + 2) = v13;
      *((unsigned char *)result + 24) = 0;
      uint64_t v12 = &unk_1EE2F6C00;
      goto LABEL_29;
    case 3:
      __n128 result = operator new(0x40uLL);
      uint64_t v14 = (_DWORD *)*a1;
      result[2] = 0;
      *((void *)result + 2) = v14;
      *((unsigned char *)result + 24) = 0;
      *(void *)__n128 result = &unk_1EE2F6BD0;
      result[13] = 0;
      result[14] = 0;
      goto LABEL_30;
    case 4:
      __n128 result = operator new(0x28uLL);
      uint64_t v15 = (_DWORD *)*a1;
      result[2] = 0;
      *((void *)result + 2) = v15;
      *((unsigned char *)result + 24) = 0;
      *(void *)__n128 result = &unk_1EE2F6588;
      result[7] = 0;
      result[8] = 0;
      result[9] = (7 - a3) % 7;
      goto LABEL_30;
    case 5:
      __n128 result = operator new(0x30uLL);
      uint64_t v16 = (_DWORD *)*a1;
      result[2] = 0;
      *((void *)result + 2) = v16;
      *((unsigned char *)result + 24) = 0;
      *(void *)__n128 result = &unk_1EE2F7D00;
      result[7] = a3;
      *((void *)result + 4) = 0;
      goto LABEL_23;
    case 6:
      __n128 result = operator new(0x30uLL);
      uint64_t v17 = (_DWORD *)*a1;
      result[2] = 0;
      *((void *)result + 2) = v17;
      *((unsigned char *)result + 24) = 0;
      result[7] = a3;
      *((void *)result + 4) = 0;
      *((_WORD *)result + 20) = 0;
      uint64_t v12 = &unk_1EE2F6558;
      goto LABEL_29;
    case 7:
      __n128 result = operator new(0x28uLL);
      uint64_t v18 = (_DWORD *)*a1;
      result[2] = 0;
      *((void *)result + 2) = v18;
      *((unsigned char *)result + 24) = 0;
      *(void *)__n128 result = &unk_1EE2F6BA0;
      result[7] = -1;
      result[8] = a3;
      goto LABEL_30;
    case 8:
      __n128 result = operator new(0x28uLL);
      xpc_object_t v20 = (_DWORD *)*a1;
      result[2] = 0;
      *((void *)result + 2) = v20;
      *((unsigned char *)result + 24) = 0;
      *(void *)__n128 result = &unk_1EE2F6A78;
      result[7] = a3;
      result[8] = a5;
      goto LABEL_30;
    case 9:
      __n128 result = operator new(0x20uLL);
      uint64_t v21 = (_DWORD *)*a1;
      result[2] = 0;
      *((void *)result + 2) = v21;
      *((unsigned char *)result + 24) = 0;
      uint64_t v12 = &unk_1EE2F6D50;
      goto LABEL_29;
    case 10:
      __n128 result = operator new(0x30uLL);
      uint64_t v22 = (_DWORD *)*a1;
      result[2] = 0;
      *((void *)result + 2) = v22;
      *((unsigned char *)result + 24) = 0;
      *(void *)__n128 result = &unk_1EE2F6E58;
      *((void *)result + 4) = 0;
      result[10] = 0;
      goto LABEL_30;
    case 11:
      __n128 result = operator new(0x20uLL);
      uint64_t v23 = (_DWORD *)*a1;
      result[2] = 0;
      *((void *)result + 2) = v23;
      *((unsigned char *)result + 24) = 0;
      uint64_t v24 = &unk_1EE2F6B70;
      goto LABEL_16;
    case 12:
      __n128 result = operator new(0x20uLL);
      uint64_t v25 = (_DWORD *)*a1;
      result[2] = 0;
      *((void *)result + 2) = v25;
      *((unsigned char *)result + 24) = 0;
      uint64_t v24 = &unk_1EE2F6A48;
LABEL_16:
      *(void *)__n128 result = v24;
      *((_WORD *)result + 1ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = a3;
      goto LABEL_30;
    case 13:
      __n128 result = operator new(0x20uLL);
      uint64_t v26 = (_DWORD *)*a1;
      result[2] = 0;
      *((void *)result + 2) = v26;
      *((unsigned char *)result + 24) = 0;
      uint64_t v12 = &unk_1EE2F6D20;
      goto LABEL_29;
    case 14:
      __n128 result = operator new(0x20uLL);
      uint64_t v27 = (_DWORD *)*a1;
      result[2] = 0;
      *((void *)result + 2) = v27;
      *((unsigned char *)result + 24) = 0;
      uint64_t v12 = &unk_1EE2F6CC0;
      goto LABEL_29;
    case 15:
      __n128 result = operator new(0x30uLL);
      xpc_object_t v28 = (_DWORD *)*a1;
      result[2] = 0;
      *((void *)result + 2) = v28;
      *((unsigned char *)result + 24) = 0;
      *(void *)__n128 result = &unk_1EE2F7220;
      result[7] = 0;
      result[8] = 0;
      if (a3 <= 0) {
        int v29 = -(-a3 & 7);
      }
      else {
        int v29 = a3 & 7;
      }
      result[9] = v29;
LABEL_23:
      *((unsigned char *)result + 40) = 0;
      goto LABEL_30;
    case 16:
      __n128 result = operator new(0x28uLL);
      uint64_t v30 = (_DWORD *)*a1;
      result[2] = 0;
      *((void *)result + 2) = v30;
      *((unsigned char *)result + 24) = 0;
      long long v10 = &unk_1EE2F7250;
LABEL_25:
      *(void *)__n128 result = v10;
      result[7] = 0;
      result[8] = 0;
      goto LABEL_30;
    case 17:
      __n128 result = operator new(0x20uLL);
      uint64_t v31 = (_DWORD *)*a1;
      result[2] = 0;
      *((void *)result + 2) = v31;
      *((unsigned char *)result + 24) = 0;
      uint64_t v12 = &unk_1EE2F6F18;
      goto LABEL_29;
    case 18:
      __n128 result = operator new(0x20uLL);
      uint64_t v32 = (_DWORD *)*a1;
      result[2] = 0;
      *((void *)result + 2) = v32;
      *((unsigned char *)result + 24) = 0;
      uint64_t v12 = &unk_1EE2F6E88;
      goto LABEL_29;
    case 19:
      __n128 result = operator new(0x20uLL);
      uint64_t v33 = (_DWORD *)*a1;
      result[2] = 0;
      *((void *)result + 2) = v33;
      *((unsigned char *)result + 24) = 0;
      uint64_t v12 = &unk_1EE2F70A8;
LABEL_29:
      *(void *)__n128 result = v12;
LABEL_30:
      *a1 = result;
      break;
    default:
      __n128 result = (_DWORD *)*a1;
      break;
  }
  result[2] = a4;
  return result;
}

uint64_t ctu::TextConverter::nextCode(ctu::TextConverter *this)
{
  return (*(uint64_t (**)(void))(**(void **)this + 16))();
}

BOOL ctu::TextConverter::exceptionOccurred(ctu::TextConverter *this)
{
  uint64_t v1 = *(void *)this;
  do
  {
    int v2 = *(unsigned __int8 *)(v1 + 24);
    if (*(unsigned char *)(v1 + 24)) {
      break;
    }
    uint64_t v1 = *(void *)(v1 + 16);
  }
  while (v1);
  return v2 != 0;
}

void ctu::TextConverter::readChars(ctu::TextConverter *this@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  if (a2)
  {
    uint64_t v3 = a2;
    do
    {
      int v6 = (*(uint64_t (**)(void))(**(void **)this + 16))();
      if (v6 == -1) {
        break;
      }
      std::string::push_back(a3, v6);
      --v3;
    }
    while (v3);
  }
}

void sub_1920A2A18(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::TextConverter::getSourceCount(ctu::TextConverter *this)
{
  return *(void *)(*((void *)this + 1) + 40);
}

uint64_t ctu::TextConverter::getSourceAvailableCount(ctu::TextConverter *this)
{
  return *(void *)(*((void *)this + 1) + 48) - *(void *)(*((void *)this + 1) + 40);
}

void ctu::TextConverter::getBytesToCurrentOffset(ctu::TextConverter *this@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v4 = *((void *)this + 1);
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  a3->__r_.__value_.__r.__words[0] = 0;
  if (*(void *)(v4 + 32))
  {
    unint64_t v5 = *(void *)(v4 + 40);
    unint64_t v6 = v5 - a2;
    if (((v5 - a2) & 0x8000000000000000) == 0)
    {
      while (v6 < v5)
      {
        std::string::push_back(a3, *(unsigned char *)(*(void *)(v4 + 32) + v6++));
        unint64_t v5 = *(void *)(v4 + 40);
      }
    }
  }
}

void sub_1920A2ABC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void ctu::TextConverter::getBytesFromCurrentOffset(ctu::TextConverter *this@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v4 = (void *)*((void *)this + 1);
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  a3->__r_.__value_.__r.__words[0] = 0;
  if (v4[4])
  {
    uint64_t v5 = a2;
    uint64_t v6 = v4[5];
    if (v6 < v6 + a2 && (unint64_t)(v6 + a2) < v4[6])
    {
      do
      {
        std::string::push_back(a3, *(unsigned char *)(v4[4] + v6++));
        --v5;
      }
      while (v5);
    }
  }
}

void sub_1920A2B48(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::BinaryToHexTransform::nextCode(ctu::BinaryToHexTransform *this)
{
  int v1 = *((_DWORD *)this + 2);
  if (!v1) {
    return 0xFFFFFFFFLL;
  }
  *((_DWORD *)this + 2) = v1 - 1;
  uint64_t result = *((unsigned int *)this + 7);
  if (result == -1) {
    return result;
  }
  int v4 = *((_DWORD *)this + 8);
  if (v4)
  {
    *((_DWORD *)this + 8) = v4 - 1;
    if (v4 != 2) {
      return ctu::kHexDigits[result & 0xF];
    }
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 2) + 16))(*((void *)this + 2));
    *((_DWORD *)this + 7) = result;
    if (result == -1) {
      return result;
    }
    *((_DWORD *)this + 8) = 1;
  }
  LODWORD(result) = result >> 4;
  return ctu::kHexDigits[result & 0xF];
}

uint64_t ctu::BinaryToHexTransform::reset(uint64_t this)
{
  *(_DWORD *)(this + 28) = 0;
  *(_DWORD *)(this + 32) = 0;
  *(unsigned char *)(this + 24) = 0;
  return this;
}

uint64_t ctu::HexToBinaryTransform::nextCode(ctu::HexToBinaryTransform *this)
{
  int v1 = *((_DWORD *)this + 2);
  if (!v1) {
    return 0xFFFFFFFFLL;
  }
  *((_DWORD *)this + 2) = v1 - 1;
  int v3 = (*(uint64_t (**)(void))(**((void **)this + 2) + 16))(*((void *)this + 2));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 16))(*((void *)this + 2));
  if (v3 == -1 || v4 == -1) {
    return 0xFFFFFFFFLL;
  }
  if (v3 - 65 >= 6) {
    int v7 = 0;
  }
  else {
    int v7 = (char)v3 - 55;
  }
  if (v3 - 97 <= 5) {
    int v7 = (char)v3 - 87;
  }
  if (v3 - 48 <= 9) {
    int v7 = (char)v3 - 48;
  }
  int v8 = 16 * v7;
  if (v4 - 65 >= 6) {
    int v9 = 0;
  }
  else {
    int v9 = (char)v4 - 55;
  }
  if (v4 - 97 <= 5) {
    int v9 = (char)v4 - 87;
  }
  if (v4 - 48 <= 9) {
    int v9 = (char)v4 - 48;
  }
  return v9 | v8;
}

uint64_t ctu::Utf8ToUcs2Transform::nextCode(ctu::Utf8ToUcs2Transform *this)
{
  int v1 = *((_DWORD *)this + 2);
  if (!v1) {
    return 0xFFFFFFFFLL;
  }
  *((_DWORD *)this + 2) = v1 - 1;
  uint64_t v3 = (*(uint64_t (**)(void))(**((void **)this + 2) + 16))(*((void *)this + 2));
  uint64_t v4 = v3;
  if (v3 != -1 && (v3 & 0x80) != 0)
  {
    if ((v3 & 0x20) == 0)
    {
      int v5 = (*(uint64_t (**)(void))(**((void **)this + 2) + 16))(*((void *)this + 2));
      if (v5 == -1) {
        return 0xFFFFFFFFLL;
      }
      else {
        return v5 & 0x3F | ((v4 & 0x1F) << 6);
      }
    }
    if ((v3 & 0x10) == 0)
    {
      int v6 = (*(uint64_t (**)(void))(**((void **)this + 2) + 16))(*((void *)this + 2));
      int v7 = (*(uint64_t (**)(void))(**((void **)this + 2) + 16))(*((void *)this + 2));
      if (v6 != -1 && v7 != -1) {
        return ((v4 & 0xF) << 12) | ((v6 & 0x3F) << 6) | v7 & 0x3F;
      }
      return 0xFFFFFFFFLL;
    }
    if ((v3 & 8) != 0)
    {
      if ((v3 & 4) != 0)
      {
        if ((v3 & 2) != 0) {
          return 0;
        }
        int v21 = (*(uint64_t (**)(void))(**((void **)this + 2) + 16))(*((void *)this + 2));
        int v22 = (*(uint64_t (**)(void))(**((void **)this + 2) + 16))(*((void *)this + 2));
        int v23 = (*(uint64_t (**)(void))(**((void **)this + 2) + 16))(*((void *)this + 2));
        int v24 = (*(uint64_t (**)(void))(**((void **)this + 2) + 16))(*((void *)this + 2));
        int v11 = (*(uint64_t (**)(void))(**((void **)this + 2) + 16))(*((void *)this + 2));
        if (v21 == -1 || v22 == -1 || v23 == -1 || v24 == -1 || v11 == -1) {
          return 0xFFFFFFFFLL;
        }
        int v14 = ((v4 & 1) << 30) | ((v21 & 0x3F) << 24) | ((v22 & 0x3F) << 18) | ((v23 & 0x3F) << 12) | ((v24 & 0x3F) << 6);
      }
      else
      {
        int v15 = (*(uint64_t (**)(void))(**((void **)this + 2) + 16))(*((void *)this + 2));
        int v16 = (*(uint64_t (**)(void))(**((void **)this + 2) + 16))(*((void *)this + 2));
        int v17 = (*(uint64_t (**)(void))(**((void **)this + 2) + 16))(*((void *)this + 2));
        int v11 = (*(uint64_t (**)(void))(**((void **)this + 2) + 16))(*((void *)this + 2));
        if (v15 == -1 || v16 == -1 || v17 == -1 || v11 == -1) {
          return 0xFFFFFFFFLL;
        }
        int v14 = ((v4 & 3) << 24) | ((v15 & 0x3F) << 18) | ((v16 & 0x3F) << 12) | ((v17 & 0x3F) << 6);
      }
    }
    else
    {
      int v9 = (*(uint64_t (**)(void))(**((void **)this + 2) + 16))(*((void *)this + 2));
      int v10 = (*(uint64_t (**)(void))(**((void **)this + 2) + 16))(*((void *)this + 2));
      int v11 = (*(uint64_t (**)(void))(**((void **)this + 2) + 16))(*((void *)this + 2));
      if (v9 == -1 || v10 == -1 || v11 == -1) {
        return 0xFFFFFFFFLL;
      }
      int v14 = ((v4 & 7) << 18) | ((v9 & 0x3F) << 12) | ((v10 & 0x3F) << 6);
    }
    unsigned int v30 = v14 & 0xFFFFFFC0 | v11 & 0x3F;
    int v31 = v30 - 0x10000;
    unsigned int v32 = v30 - 64513;
    if (v31 >= 0) {
      unsigned int v32 = v31;
    }
    return ((v32 >> 10 << 16) - 671088640) | (v31 - (v32 & 0xFFFFFC00) + 56320);
  }
  return v4;
}

uint64_t ctu::Ucs2ToUtf8Transform::nextCode(ctu::Ucs2ToUtf8Transform *this)
{
  int v1 = *((_DWORD *)this + 2);
  if (!v1) {
    return 0xFFFFFFFFLL;
  }
  *((_DWORD *)this + 2) = v1 - 1;
  int v3 = *((_DWORD *)this + 13);
  if (*((_DWORD *)this + 14) == v3)
  {
    uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 2) + 16))(*((void *)this + 2));
    if (result == -1) {
      return result;
    }
    unsigned int v5 = ((result >> 6) & 0x3FFFC00) + (unsigned __int16)result - 56613888;
    if (result >> 26 != 54) {
      unsigned int v5 = result;
    }
    if ((v5 & 0x7C000000) != 0)
    {
      *(int8x16_t *)((char *)this + 28) = vorrq_s8(vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)vdupq_n_s32(v5), (uint32x4_t)xmmword_1920C0390), (int8x16_t)xmmword_1920C03A0), (int8x16_t)xmmword_1920C03B0);
      *((_DWORD *)this + 1ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = (v5 >> 6) & 0x3F | 0x80;
      *((_DWORD *)this + 12) = v5 & 0x3F | 0x80;
      int v6 = 6;
    }
    else if ((v5 & 0x3E00000) != 0)
    {
      *(int8x16_t *)((char *)this + 28) = vorrq_s8(vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)vdupq_n_s32(v5), (uint32x4_t)xmmword_1920C03C0), (int8x16_t)xmmword_1920C03D0), (int8x16_t)xmmword_1920C03E0);
      *((_DWORD *)this + 1ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v5 & 0x3F | 0x80;
      int v6 = 5;
    }
    else if ((v5 & 0x1F0000) != 0)
    {
      *(int8x8_t *)((char *)this + 28) = vorr_s8(vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v5), (uint32x2_t)0xFFFFFFF4FFFFFFEELL), (int8x8_t)0x3F00000007), (int8x8_t)0x80000000F0);
      *((_DWORD *)this + 9) = (v5 >> 6) & 0x3F | 0x80;
      *((_DWORD *)this + 10) = v5 & 0x3F | 0x80;
      int v6 = 4;
    }
    else if ((v5 & 0xF800) != 0)
    {
      *(int8x8_t *)((char *)this + 28) = vorr_s8(vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v5), (uint32x2_t)0xFFFFFFFAFFFFFFF4), (int8x8_t)0x3F0000000FLL), (int8x8_t)0x80000000E0);
      *((_DWORD *)this + 9) = v5 & 0x3F | 0x80;
      int v6 = 3;
    }
    else if ((v5 & 0xFF80) != 0)
    {
      *((_DWORD *)this + 7) = (v5 >> 6) & 0x1F | 0xC0;
      *((_DWORD *)this + 8) = v5 & 0x3F | 0x80;
      int v6 = 2;
    }
    else
    {
      *((_DWORD *)this + 7) = (char)v5;
      int v6 = 1;
    }
    int v3 = 0;
    *((_DWORD *)this + 14) = v6;
  }
  *((_DWORD *)this + 1ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = v3 + 1;
  return *((unsigned int *)this + v3 + 7);
}

uint64_t ctu::Ucs2ToUtf8Transform::reset(uint64_t this)
{
  *(_DWORD *)(this + 52) = 0;
  *(_DWORD *)(this + ++*(_DWORD *)(this + 56) = 0;
  *(unsigned char *)(this + 24) = 0;
  return this;
}

uint64_t ctu::SmsPacker::nextCode(ctu::SmsPacker *this)
{
  int v1 = *((_DWORD *)this + 2);
  if (!v1) {
    return 0xFFFFFFFFLL;
  }
  *((_DWORD *)this + 2) = v1 - 1;
  if (*((unsigned char *)this + 40))
  {
    int v3 = *((_DWORD *)this + 9);
    goto LABEL_8;
  }
  if (!*((_DWORD *)this + 7))
  {
    int v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 16))(*((void *)this + 2));
    *((_DWORD *)this + 8) = v4;
    if (v4 != -1) {
      goto LABEL_7;
    }
    return 0xFFFFFFFFLL;
  }
  *((_DWORD *)this + 8) = 0;
LABEL_7:
  int v3 = (*(uint64_t (**)(void))(**((void **)this + 2) + 16))(*((void *)this + 2));
  *((_DWORD *)this + 9) = v3;
  *((unsigned char *)this + 40) = 1;
LABEL_8:
  int v5 = *((_DWORD *)this + 8);
  if (v5 == -1 && v3 == -1) {
    return 0xFFFFFFFFLL;
  }
  int v7 = *((_DWORD *)this + 7);
  int v8 = v5 >> v7;
  int v9 = (v3 << (7 - v7));
  if (v3 == -1) {
    int v9 = 0;
  }
  uint64_t v10 = v9 | v8;
  *((_DWORD *)this + 7) = v7 + 1;
  if (v7 == 6)
  {
    *((_DWORD *)this + 7) = 0;
    int v11 = (*(uint64_t (**)(void))(**((void **)this + 2) + 16))(*((void *)this + 2));
    *((_DWORD *)this + 8) = v11;
    if (v11 == -1) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  *((_DWORD *)this + 8) = v3;
  if (v3 != -1)
  {
LABEL_19:
    int v11 = (*(uint64_t (**)(void))(**((void **)this + 2) + 16))(*((void *)this + 2));
LABEL_20:
    *((_DWORD *)this + 9) = v11;
  }
  return v10;
}

uint64_t ctu::SmsPacker::reset(uint64_t this)
{
  *(unsigned char *)(this + 24) = 0;
  *(void *)(this + 28) = 0;
  *(void *)(this + 3ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = 0;
  return this;
}

uint64_t ctu::SmsUnpacker::nextCode(ctu::SmsUnpacker *this)
{
  int v1 = *((_DWORD *)this + 2);
  if (!v1) {
    return 0xFFFFFFFFLL;
  }
  *((_DWORD *)this + 2) = v1 - 1;
  int v3 = *((_DWORD *)this + 8);
  if (v3 >= 7)
  {
    int v6 = *((_DWORD *)this + 7);
LABEL_10:
    uint64_t result = v6 & 0x7F;
    *((_DWORD *)this + 7) = v6 >> 7;
    *((_DWORD *)this + 8) = v3 - 7;
  }
  else
  {
    while (1)
    {
      uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 2) + 16))(*((void *)this + 2));
      if (result == -1) {
        break;
      }
      int v5 = *((_DWORD *)this + 8);
      int v6 = *((_DWORD *)this + 7) | (result << v5);
      int v3 = v5 + 8;
      *((_DWORD *)this + 7) = v6;
      *((_DWORD *)this + 8) = v3;
      int v7 = *((_DWORD *)this + 9);
      if (v7)
      {
        v6 >>= v7;
        v3 -= v7;
        *((_DWORD *)this + 7) = v6;
        *((void *)this + 4) = v3;
      }
      if (v3 >= 7) {
        goto LABEL_10;
      }
    }
  }
  return result;
}

uint64_t ctu::SmsUnpacker::reset(uint64_t this)
{
  *(_DWORD *)(this + 28) = 0;
  *(_DWORD *)(this + 32) = 0;
  *(unsigned char *)(this + 24) = 0;
  return this;
}

uint64_t ctu::UssdPacker::nextCode(ctu::UssdPacker *this)
{
  uint64_t result = ctu::SmsPacker::nextCode(this);
  if (result != -1)
  {
    if (*((_DWORD *)this + 8) == -1)
    {
      if ((result & 0xFFFFFFFE) == 0x1A && !*((unsigned char *)this + 41)) {
        *((_DWORD *)this + 8) = 13;
      }
    }
    else if (*((_DWORD *)this + 9) == -1 && *((_DWORD *)this + 7) == 6)
    {
      *((_DWORD *)this + 9) = 13;
      *((unsigned char *)this + 4ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 1;
    }
  }
  return result;
}

uint64_t ctu::UssdPacker::reset(uint64_t this)
{
  *(unsigned char *)(this + 24) = 0;
  *(void *)(this + 28) = 0;
  *(void *)(this + 3ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = 0;
  return this;
}

uint64_t ctu::C2KSmsPackedToUnpackedTransform::nextCode(ctu::C2KSmsPackedToUnpackedTransform *this)
{
  int v1 = *((_DWORD *)this + 2);
  if (!v1) {
    return 0xFFFFFFFFLL;
  }
  int v3 = v1 - 1;
  *((_DWORD *)this + 2) = v3;
  if (!*((unsigned char *)this + 40) && *((_DWORD *)this + 9))
  {
    if (v3)
    {
      uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 2) + 16))(*((void *)this + 2));
      *((_DWORD *)this + 7) = result;
      if (result == -1) {
        return result;
      }
      *((_DWORD *)this + 8) = 8 - *((_DWORD *)this + 9);
      goto LABEL_3;
    }
    return 0xFFFFFFFFLL;
  }
LABEL_3:
  *((unsigned char *)this + 40) = 1;
  int v4 = *((_DWORD *)this + 8);
  if (v4 >= 7)
  {
    int v6 = *((_DWORD *)this + 7);
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 2) + 16))(*((void *)this + 2));
    if (result == -1) {
      return result;
    }
    int v4 = *((_DWORD *)this + 8) + 8;
    int v6 = result | (*((_DWORD *)this + 7) << 8);
    *((_DWORD *)this + 7) = v6;
  }
  int v7 = v4 - 7;
  uint64_t result = (v6 >> v7) & 0x7F;
  *((_DWORD *)this + 8) = v7;
  return result;
}

uint64_t ctu::C2KSmsPackedToUnpackedTransform::reset(uint64_t this)
{
  *(_DWORD *)(this + 28) = 0;
  *(_DWORD *)(this + 32) = 0;
  *(unsigned char *)(this + 40) = 0;
  *(unsigned char *)(this + 24) = 0;
  return this;
}

uint64_t ctu::C2KSmsUnpackedToPackedTransform::nextCode(ctu::C2KSmsUnpackedToPackedTransform *this)
{
  int v1 = *((_DWORD *)this + 2);
  if (!v1) {
    return 0xFFFFFFFFLL;
  }
  *((_DWORD *)this + 2) = v1 - 1;
  int v3 = *((_DWORD *)this + 8);
  if (v3 >= 8)
  {
    int v7 = *((_DWORD *)this + 7);
LABEL_8:
    int v9 = v3 - 8;
    uint64_t result = (v7 >> v9);
    *((_DWORD *)this + 8) = v9;
  }
  else
  {
    while (1)
    {
      int v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 16))(*((void *)this + 2));
      int v5 = *((_DWORD *)this + 7);
      if (v4 == -1) {
        break;
      }
      int v6 = *((_DWORD *)this + 8);
      int v3 = v6 + 7;
      int v7 = v4 & 0x7F | (v5 << 7);
      *((_DWORD *)this + 7) = v7;
      *((_DWORD *)this + 8) = v6 + 7;
      if (v6 >= 1) {
        goto LABEL_8;
      }
    }
    uint64_t result = (v5 << (8 - *((_DWORD *)this + 8)));
    *((_DWORD *)this + 2) = 0;
  }
  return result;
}

uint64_t ctu::C2KSmsUnpackedToPackedTransform::reset(uint64_t this)
{
  *(_DWORD *)(this + 28) = 0;
  *(_DWORD *)(this + 32) = 0;
  *(unsigned char *)(this + 24) = 0;
  return this;
}

uint64_t ctu::Ucs2ToAscii7Transform::nextCode(ctu::Ucs2ToAscii7Transform *this)
{
  int v1 = *((_DWORD *)this + 2);
  if (!v1) {
    return 0xFFFFFFFFLL;
  }
  *((_DWORD *)this + 2) = v1 - 1;
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 2) + 16))(*((void *)this + 2));
  if (result != -1 && result >= 0x80)
  {
    *((unsigned char *)this + 24) = 1;
    return 32;
  }
  return result;
}

uint64_t ctu::Ascii7ToUcs2Transform::nextCode(ctu::Ascii7ToUcs2Transform *this)
{
  int v1 = *((_DWORD *)this + 2);
  if (!v1) {
    return 0xFFFFFFFFLL;
  }
  *((_DWORD *)this + 2) = v1 - 1;
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 16))();
}

uint64_t ctu::ISOLatin1ToUcs2Transform::nextCode(ctu::ISOLatin1ToUcs2Transform *this)
{
  int v1 = *((_DWORD *)this + 2);
  if (!v1) {
    return 0xFFFFFFFFLL;
  }
  *((_DWORD *)this + 2) = v1 - 1;
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 16))();
}

uint64_t ctu::Ucs2ToGsm7Transform::nextCode(ctu::Ucs2ToGsm7Transform *this)
{
  int v1 = *((_DWORD *)this + 2);
  if (!v1) {
    return 0xFFFFFFFFLL;
  }
  *((_DWORD *)this + 2) = v1 - 1;
  uint64_t result = *((unsigned int *)this + 7);
  if (result == -1)
  {
    uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 2) + 16))(*((void *)this + 2));
    if (result != -1)
    {
      uint64_t result = ctu::ucs2ToGsm7(result, *((_DWORD *)this + 8));
      if (result == 255)
      {
        *((unsigned char *)this + 24) = 1;
        return 32;
      }
      else if (result >= 0x80)
      {
        *((_DWORD *)this + 7) = result & 0x7F;
        return 27;
      }
    }
  }
  else
  {
    *((_DWORD *)this + 7) = -1;
  }
  return result;
}

uint64_t ctu::ucs2ToGsm7(unsigned int a1, unsigned int a2)
{
  if ((a1 & 0x80000000) != 0) {
    return 255;
  }
  if (a1 < 0x100 || a1 <= 0x17F && a2 == 2)
  {
    if (a2 == 3) {
      unsigned int v2 = 0;
    }
    else {
      unsigned int v2 = a2;
    }
    int v3 = (char *)*(&ctu::kUcs2ToGsm7Tables + v2) + a1;
    return *v3;
  }
  unsigned int v5 = a1 - 896;
  if (a1 - 896 <= 0x4F && a2 == 3)
  {
    int v6 = (char *)&ctu::kUcs2ToGsm7FullGreek;
LABEL_15:
    int v3 = &v6[v5];
    return *v3;
  }
  unsigned int v5 = a1 - 912;
  if (a1 - 912 <= 0x1F)
  {
    int v6 = (char *)&ctu::kUcs2ToGsm7Greek;
    goto LABEL_15;
  }
  if (a1 != 8364) {
    return 255;
  }
  else {
    return 229;
  }
}

uint64_t ctu::Ucs2ToGsm7Transform::reset(uint64_t this)
{
  *(_DWORD *)(this + 28) = -1;
  *(unsigned char *)(this + 24) = 0;
  return this;
}

uint64_t ctu::Gsm7ToUcs2Transform::nextCode(ctu::Gsm7ToUcs2Transform *this)
{
  do
  {
    int v2 = *((_DWORD *)this + 2);
    if (!v2) {
      return 0xFFFFFFFFLL;
    }
    *((_DWORD *)this + 2) = v2 - 1;
    uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 2) + 16))(*((void *)this + 2));
    if (result == -1) {
      return result;
    }
  }
  while ((result & 0x80) != 0);
  uint64_t v4 = (uint64_t)*(&ctu::kGsm7ToUcs2Tables + *((unsigned int *)this + 8));
  if (result != 27) {
    return *(__int16 *)(v4 + 2 * (int)result);
  }
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 2) + 16))(*((void *)this + 2));
  if (result != -1)
  {
    int v5 = (unsigned __int16)ctu::kGsm7ExtendedToUcs2Tables[*((unsigned int *)this + 7)][(int)result];
    if (v5 == 32) {
      LOWORD(v5) = *(_WORD *)(v4 + 2 * (int)result);
    }
    return (__int16)v5;
  }
  return result;
}

uint64_t ctu::OctetToGsm7Transform::nextCode(ctu::OctetToGsm7Transform *this)
{
  int v2 = this;
  do
  {
    if (*((unsigned char *)v2 + 24)) {
      return 0xFFFFFFFFLL;
    }
    int v2 = (ctu::OctetToGsm7Transform *)*((void *)v2 + 2);
  }
  while (v2);
  int v3 = *((_DWORD *)this + 2);
  if (!v3) {
    return 0xFFFFFFFFLL;
  }
  *((_DWORD *)this + 2) = v3 - 1;
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 2) + 16))(*((void *)this + 2));
  if (result != -1 && (result & 0x80) != 0) {
    *((unsigned char *)this + 24) = 1;
  }
  return result;
}

uint64_t ctu::OctetToUcs2Transform::nextCode(ctu::OctetToUcs2Transform *this)
{
  int v1 = *((_DWORD *)this + 2);
  if (!v1) {
    return 0xFFFFFFFFLL;
  }
  *((_DWORD *)this + 2) = v1 - 1;
  uint64_t v3 = (*(uint64_t (**)(void))(**((void **)this + 2) + 16))(*((void *)this + 2));
  if (v3 != -1)
  {
    unsigned int v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 16))(*((void *)this + 2));
    if (v4 == -1) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v3 = v4 | (v3 << 8);
    if (v3 >> 10 == 54)
    {
      int v5 = (*(uint64_t (**)(void))(**((void **)this + 2) + 16))(*((void *)this + 2));
      if (v5 != -1)
      {
        int v6 = v5;
        unsigned int v7 = (*(uint64_t (**)(void))(**((void **)this + 2) + 16))(*((void *)this + 2));
        if (v7 != -1) {
          return (v6 << 8) | (v3 << 16) | v7;
        }
      }
      return 0xFFFFFFFFLL;
    }
  }
  return v3;
}

uint64_t ctu::Ucs2ToOctetTransform::nextCode(uint64_t this)
{
  int v1 = *(_DWORD *)(this + 8);
  if (!v1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v2 = this;
  *(_DWORD *)(this + 8) = v1 - 1;
  uint64_t v3 = *(void *)(this + 32);
  if (!v3)
  {
    this = (*(uint64_t (**)(void))(**(void **)(this + 16) + 16))(*(void *)(this + 16));
    *(_DWORD *)(v2 + 40) = this;
    if (this == -1) {
      return this;
    }
    if (this >> 27 == 27)
    {
      *(void *)(v2 + 32) = 3;
      return BYTE3(this);
    }
    *(void *)(v2 + 32) = 1;
    return BYTE1(this);
  }
  *(void *)(this + 32) = v3 - 1;
  switch(v3)
  {
    case 2:
      LODWORD(this) = *(_DWORD *)(this + 40);
      return BYTE1(this);
    case 3:
      return *(unsigned __int8 *)(this + 42);
    case 4:
      LODWORD(this) = *(_DWORD *)(this + 40);
      return BYTE3(this);
  }
  return *(unsigned __int8 *)(this + 40);
}

uint64_t ctu::Ucs2ToOctetTransform::reset(uint64_t this)
{
  *(void *)(this + 32) = 0;
  *(_DWORD *)(this + 40) = 0;
  *(unsigned char *)(this + 24) = 0;
  return this;
}

uint64_t ctu::Ucs2ToAdn8Transform::nextCode(ctu::Ucs2ToAdn8Transform *this)
{
  int v1 = *((_DWORD *)this + 2);
  if (!v1) {
    return 0xFFFFFFFFLL;
  }
  *((_DWORD *)this + 2) = v1 - 1;
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 2) + 16))(*((void *)this + 2));
  if (result != -1)
  {
    if ((int)result > 255)
    {
      int v4 = result - *((unsigned __int16 *)this + 13);
      if (v4 >= 128) {
        return 32;
      }
      else {
        return v4 | 0x80u;
      }
    }
    else
    {
      return ctu::kUcs2ToGsm7Latin1[(int)result];
    }
  }
  return result;
}

uint64_t ctu::Ucs2ToAdn8Transform::reset(uint64_t this)
{
  *(unsigned char *)(this + 24) = 0;
  return this;
}

uint64_t ctu::Adn8ToUcs2Transform::nextCode(ctu::Adn8ToUcs2Transform *this)
{
  int v1 = *((_DWORD *)this + 2);
  if (!v1) {
    return 0xFFFFFFFFLL;
  }
  *((_DWORD *)this + 2) = v1 - 1;
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 2) + 16))(*((void *)this + 2));
  if (result == -1) {
    return result;
  }
  if ((int)result > 127) {
    return (result & 0x7F) + *((unsigned __int16 *)this + 13);
  }
  if (result == 27)
  {
    uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 2) + 16))(*((void *)this + 2));
    if (result == -1) {
      return result;
    }
    int v4 = ctu::kGsm7ExtendedToUcs2;
  }
  else
  {
    int v4 = (const __int16 *)&ctu::kGsm7ToUcs2;
  }
  return v4[(int)result];
}

uint64_t ctu::Adn8ToUcs2Transform::reset(uint64_t this)
{
  *(unsigned char *)(this + 24) = 0;
  return this;
}

uint64_t ctu::EucKRToUcs2Transform::nextCode(ctu::EucKRToUcs2Transform *this)
{
  int v1 = *((_DWORD *)this + 2);
  if (!v1) {
    return 0xFFFFFFFFLL;
  }
  *((_DWORD *)this + 2) = v1 - 1;
  int v3 = (*(uint64_t (**)(void))(**((void **)this + 2) + 16))(*((void *)this + 2));
  if (v3 == -1) {
    return 0xFFFFFFFFLL;
  }
  char v11 = -86;
  UInt8 bytes = v3;
  if (v3 >= 128)
  {
    int v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 16))(*((void *)this + 2));
    if (v4 != -1)
    {
      char v11 = v4;
      CFIndex v5 = 2;
      goto LABEL_8;
    }
    return 0xFFFFFFFFLL;
  }
  CFIndex v5 = 1;
LABEL_8:
  CFStringRef v7 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], &bytes, v5, 0x422u, 0);
  if (!v7) {
    return 9633;
  }
  CFStringRef v8 = v7;
  uint64_t CharacterAtIndex = CFStringGetCharacterAtIndex(v7, 0);
  CFRelease(v8);
  return CharacterAtIndex;
}

uint64_t ctu::OctetSourceBuffer::nextCode(ctu::OctetSourceBuffer *this)
{
  int v1 = *((_DWORD *)this + 2);
  if (!v1) {
    return 0xFFFFFFFFLL;
  }
  *((_DWORD *)this + 2) = v1 - 1;
  uint64_t v2 = *((void *)this + 4);
  uint64_t v3 = *((void *)this + 5);
  *((void *)this + 5) = v3 + 1;
  return *(unsigned __int8 *)(v2 + v3);
}

uint64_t ctu::OctetSourceBuffer::reset(uint64_t this)
{
  *(void *)(this + 40) = 0;
  *(unsigned char *)(this + 24) = 0;
  return this;
}

uint64_t ctu::TextConverter::decodeHexString(ctu::TextConverter *this, const char *a2)
{
  for (uint64_t i = 0; a2; --a2)
  {
    int v3 = 16 * i;
    int v5 = *(char *)this;
    this = (ctu::TextConverter *)((char *)this + 1);
    int v4 = v5;
    unsigned int v6 = v5 - 48;
    unsigned int v7 = v5 - 97;
    unsigned int v8 = v5 - 55;
    if ((v5 - 65) >= 6) {
      unsigned int v9 = 0;
    }
    else {
      unsigned int v9 = v8;
    }
    unsigned int v10 = v4 - 87;
    if (v7 > 5) {
      unsigned int v10 = v9;
    }
    if (v6 <= 9) {
      unsigned int v10 = v6;
    }
    uint64_t i = v10 | v3;
  }
  return i;
}

uint64_t ctu::TextConverter::getGsm7EncodedSize(unsigned int a1, unsigned int a2)
{
  if (ctu::ucs2ToGsm7(a1, a2) >= 0x80) {
    return 14;
  }
  else {
    return 7;
  }
}

uint64_t ctu::TextConverter::countCharactersInUtf8Message(ctu::TextConverter *this, const char *a2)
{
  int v2 = (int)a2;
  int v4 = operator new(0x38uLL);
  std::string v4[2] = 0;
  *((unsigned char *)v4 + 24) = 0;
  *int v4 = &unk_1EE2F69F0;
  *((_DWORD *)v4 + 2) = v2;
  v4[4] = this;
  void v4[5] = 0;
  v4[6] = v2;
  int v5 = v4;
  do
  {
    (*(void (**)(void *))(*v5 + 24))(v5);
    int v5 = (void *)v5[2];
  }
  while (v5);
  unsigned int v6 = operator new(0x20uLL);
  uint64_t v7 = 0;
  void v6[2] = v4;
  *((unsigned char *)v6 + 24) = 0;
  unsigned int v8 = (uint64_t (**)(void *))&unk_1EE2F6C00;
  *unsigned int v6 = &unk_1EE2F6C00;
  *((_DWORD *)v6 + 2) = 0x7FFFFFFF;
  while (1)
  {
    unsigned int v9 = v8[2](v6);
    if (v9 == -1) {
      break;
    }
    if (v9 >> 26 == 54) {
      uint64_t v10 = 2;
    }
    else {
      uint64_t v10 = 1;
    }
    v7 += v10;
    unsigned int v8 = (uint64_t (**)(void *))*v6;
  }
  do
  {
    char v11 = (void *)v6[2];
    (*(void (**)(void *))(*v6 + 8))(v6);
    unsigned int v6 = v11;
  }
  while (v11);
  return v7;
}

void sub_1920A4270(_Unwind_Exception *a1)
{
  do
  {
    int v3 = (void *)v1[2];
    (*(void (**)(void *))(*v1 + 8))(v1);
    int v1 = v3;
  }
  while (v3);
  _Unwind_Resume(a1);
}

uint64_t ctu::TextConverter::countSeptetsInMessage(uint64_t a1, int a2, int a3)
{
  unsigned int v6 = operator new(0x38uLL);
  void v6[2] = 0;
  *((unsigned char *)v6 + 24) = 0;
  *unsigned int v6 = &unk_1EE2F69F0;
  *((_DWORD *)v6 + 2) = a2;
  v6[4] = a1;
  v6[5] = 0;
  void v6[6] = a2;
  uint64_t v7 = v6;
  do
  {
    (*(void (**)(void *))(*v7 + 24))(v7);
    uint64_t v7 = (void *)v7[2];
  }
  while (v7);
  unsigned int v8 = operator new(0x20uLL);
  void v8[2] = v6;
  *((unsigned char *)v8 + 24) = 0;
  *unsigned int v8 = &unk_1EE2F6C00;
  *((_DWORD *)v8 + 2) = 0x7FFFFFFF;
  unsigned int v9 = operator new(0x28uLL);
  uint64_t v10 = 0;
  void v9[2] = v8;
  *((unsigned char *)v9 + 24) = 0;
  char v11 = (unsigned int (**)(void *))&unk_1EE2F6BA0;
  *unsigned int v9 = &unk_1EE2F6BA0;
  *((_DWORD *)v9 + 7) = -1;
  *((_DWORD *)v9 + 8) = a3;
  *((_DWORD *)v9 + 2) = 0x7FFFFFFF;
  while (v11[2](v9) != -1)
  {
    ++v10;
    char v11 = (unsigned int (**)(void *))*v9;
  }
  do
  {
    uint64_t v12 = (void *)v9[2];
    (*(void (**)(void *))(*v9 + 8))(v9);
    unsigned int v9 = v12;
  }
  while (v12);
  return v10;
}

void sub_1920A4458(_Unwind_Exception *a1)
{
  do
  {
    int v3 = (void *)v1[2];
    (*(void (**)(void *))(*v1 + 8))(v1);
    int v1 = v3;
  }
  while (v3);
  _Unwind_Resume(a1);
}

uint64_t ctu::TextConverter::decodeSmsDataCodingScheme(unsigned int a1, int *a2, int *a3, BOOL *a4, BOOL *a5, unsigned char *a6, BOOL *a7, unsigned char *a8, unsigned int (***a9)(void, uint64_t))
{
  uint64_t result = 0;
  v30[4] = *MEMORY[0x1E4F143B8];
  *a2 = 4;
  *a6 = 0;
  if (a1 <= 0xFF)
  {
    if ((a1 & 0x80) == 0)
    {
      unsigned __int16 v20 = 1798;
      v30[0] = &unk_1EE2F7FD8;
      v30[3] = v30;
      ctu::logBitFieldWithDesc(a9, a1, &v20, (uint64_t)v30);
      std::__function::__value_func<std::string ()(int)>::~__value_func[abi:ne180100](v30);
      *a4 = (a1 & 0x40) != 0;
      *a5 = (a1 & 0x20) != 0;
      unsigned __int16 v20 = 1285;
      v29[0] = &unk_1EE2F8030;
      v29[3] = v29;
      ctu::logBitFieldWithDesc(a9, a1, &v20, (uint64_t)v29);
      std::__function::__value_func<std::string ()(int)>::~__value_func[abi:ne180100](v29);
      ctu::decodeGeneralDataCodingIndication(a1, a2, a3, a9);
      return 1;
    }
    if ((a1 & 0xFFFFFFC0) == 0x80)
    {
      unsigned __int16 v20 = 1796;
      v28[0] = &unk_1EE2F8088;
      v28[3] = v28;
      ctu::logBitFieldWithDesc(a9, a1, &v20, (uint64_t)v28);
      std::__function::__value_func<std::string ()(int)>::~__value_func[abi:ne180100](v28);
      unsigned __int16 v20 = 770;
      v27[0] = &unk_1EE2F80E0;
      void v27[3] = v27;
      ctu::logBitFieldWithDesc(a9, a1, &v20, (uint64_t)v27);
      std::__function::__value_func<std::string ()(int)>::~__value_func[abi:ne180100](v27);
      unsigned __int16 v20 = 256;
      v26[0] = &unk_1EE2F8138;
      uint64_t v26[3] = v26;
      ctu::logBitFieldWithDesc(a9, a1, &v20, (uint64_t)v26);
      std::__function::__value_func<std::string ()(int)>::~__value_func[abi:ne180100](v26);
      if ((a1 & 0xC) == 4)
      {
        int v15 = 3;
LABEL_17:
        *a3 = v15;
        return 1;
      }
    }
    else
    {
      unsigned int v19 = a1 >> 4;
      if ((a1 & 0xFFFFFFE0) == 0xC0 || v19 == 14)
      {
        unsigned __int16 v20 = 1796;
        v25[0] = &unk_1EE2F8190;
        v25[3] = v25;
        ctu::logBitFieldWithDesc(a9, a1, &v20, (uint64_t)v25);
        std::__function::__value_func<std::string ()(int)>::~__value_func[abi:ne180100](v25);
        unsigned __int16 v20 = 771;
        v24[0] = &unk_1EE2F81E8;
        void v24[3] = v24;
        ctu::logBitFieldWithDesc(a9, a1, &v20, (uint64_t)v24);
        std::__function::__value_func<std::string ()(int)>::~__value_func[abi:ne180100](v24);
        unsigned __int16 v20 = 514;
        v23[0] = &unk_1EE2F8240;
        void v23[3] = v23;
        ctu::logBitFieldWithDesc(a9, a1, &v20, (uint64_t)v23);
        std::__function::__value_func<std::string ()(int)>::~__value_func[abi:ne180100](v23);
        unsigned __int16 v20 = 256;
        v22[0] = &unk_1EE2F8298;
        _OWORD v22[3] = v22;
        ctu::logBitFieldWithDesc(a9, a1, &v20, (uint64_t)v22);
        std::__function::__value_func<std::string ()(int)>::~__value_func[abi:ne180100](v22);
        if (v19 == 12) {
          *a8 = 1;
        }
        if ((a1 & 3) == 0)
        {
          *a6 = 1;
          *a7 = (a1 & 8) != 0;
        }
        int v15 = 2 * (v19 == 14);
        goto LABEL_17;
      }
      if (v19 == 15)
      {
        unsigned __int16 v20 = 1796;
        v21[0] = &unk_1EE2F82F0;
        uint64_t v21[3] = v21;
        ctu::logBitFieldWithDesc(a9, a1, &v20, (uint64_t)v21);
        std::__function::__value_func<std::string ()(int)>::~__value_func[abi:ne180100](v21);
        ctu::decodeDataCodingMessageHandling(a1, a2, a3, a9);
        return 1;
      }
    }
    return 0;
  }
  return result;
}

void sub_1920A4900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__function::__value_func<std::string ()(int)>::~__value_func[abi:ne180100](va);
  _Unwind_Resume(a1);
}

void sub_1920A4980()
{
}

void *ctu::decodeGeneralDataCodingIndication(unsigned int a1, int *a2, int *a3, unsigned int (***a4)(void, uint64_t))
{
  v14[4] = *MEMORY[0x1E4F143B8];
  unsigned __int16 v10 = 1028;
  v14[0] = &unk_1EE2F4858;
  v14[3] = v14;
  ctu::logBitFieldWithDesc(a4, a1, &v10, (uint64_t)v14);
  std::__function::__value_func<std::string ()(int)>::~__value_func[abi:ne180100](v14);
  if ((a1 & 0x10) != 0)
  {
    *a2 = a1 & 3;
    unsigned __int16 v10 = 256;
    v13[0] = &unk_1EE2F48B0;
    v13[3] = v13;
    ctu::logBitFieldWithDesc(a4, a1, &v10, (uint64_t)v13);
    unsigned int v8 = v13;
  }
  else
  {
    *a2 = 4;
    unsigned __int16 v10 = 256;
    v12[0] = &unk_1EE2F4908;
    v12[3] = v12;
    ctu::logBitFieldWithDesc(a4, a1, &v10, (uint64_t)v12);
    unsigned int v8 = v12;
  }
  std::__function::__value_func<std::string ()(int)>::~__value_func[abi:ne180100](v8);
  *a3 = (a1 >> 2) & 3;
  unsigned __int16 v10 = 770;
  v11[0] = &unk_1EE2F4960;
  void v11[3] = v11;
  ctu::logBitFieldWithDesc(a4, a1, &v10, (uint64_t)v11);
  return std::__function::__value_func<std::string ()(int)>::~__value_func[abi:ne180100](v11);
}

void sub_1920A4B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  std::__function::__value_func<std::string ()(int)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *ctu::decodeDataCodingMessageHandling(unsigned int a1, int *a2, int *a3, unsigned int (***a4)(void, uint64_t))
{
  void v13[4] = *MEMORY[0x1E4F143B8];
  unsigned __int16 v10 = 771;
  v13[0] = &unk_1EE2F4648;
  v13[3] = v13;
  unsigned int v8 = a1;
  ctu::logBitFieldWithDesc(a4, a1, &v10, (uint64_t)v13);
  std::__function::__value_func<std::string ()(int)>::~__value_func[abi:ne180100](v13);
  unsigned __int16 v10 = 514;
  v12[0] = &unk_1EE2F46A0;
  v12[3] = v12;
  ctu::logBitFieldWithDesc(a4, v8, &v10, (uint64_t)v12);
  std::__function::__value_func<std::string ()(int)>::~__value_func[abi:ne180100](v12);
  *a3 = (a1 >> 2) & 1;
  unsigned __int16 v10 = 256;
  v11[0] = &unk_1EE2F46F8;
  void v11[3] = v11;
  ctu::logBitFieldWithDesc(a4, a1, &v10, (uint64_t)v11);
  uint64_t result = std::__function::__value_func<std::string ()(int)>::~__value_func[abi:ne180100](v11);
  *a2 = a1 & 3;
  return result;
}

void sub_1920A4CC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<std::string ()(int)>::~__value_func[abi:ne180100](va);
  _Unwind_Resume(a1);
}

uint64_t ctu::TextConverter::decodeSmsDataCodingScheme(unsigned int a1, unsigned int *a2, _DWORD *a3, BOOL *a4, BOOL *a5, unsigned char *a6, BOOL *a7, unsigned char *a8, std::string *a9)
{
  uint64_t result = 0;
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  *a2 = 4;
  *a6 = 0;
  if (a1 <= 0xFF)
  {
    if ((a1 & 0x80) == 0)
    {
      LOWORD(v70) = 1798;
      v65[0] = &unk_1EE2F4018;
      v65[3] = v65;
      ctu::getBitFieldPrintWithDesc(a1, (unsigned __int16 *)&v70, (uint64_t)v65, &v74);
      if ((v76 & 0x80u) == 0) {
        int v15 = (const std::string::value_type *)&v74;
      }
      else {
        int v15 = v74;
      }
      if ((v76 & 0x80u) == 0) {
        std::string::size_type v16 = v76;
      }
      else {
        std::string::size_type v16 = v75;
      }
      std::string::append(a9, v15, v16);
      if ((char)v76 < 0) {
        operator delete(v74);
      }
      std::__function::__value_func<std::string ()(int)>::~__value_func[abi:ne180100](v65);
      *a4 = (a1 & 0x40) != 0;
      *a5 = (a1 & 0x20) != 0;
      LOWORD(v70) = 1285;
      v64[0] = &unk_1EE2F4070;
      v64[3] = v64;
      ctu::getBitFieldPrintWithDesc(a1, (unsigned __int16 *)&v70, (uint64_t)v64, &v74);
      if ((v76 & 0x80u) == 0) {
        int v17 = (const std::string::value_type *)&v74;
      }
      else {
        int v17 = v74;
      }
      if ((v76 & 0x80u) == 0) {
        std::string::size_type v18 = v76;
      }
      else {
        std::string::size_type v18 = v75;
      }
      std::string::append(a9, v17, v18);
      if ((char)v76 < 0) {
        operator delete(v74);
      }
      std::__function::__value_func<std::string ()(int)>::~__value_func[abi:ne180100](v64);
      LOWORD(v66) = 1028;
      uint64_t v74 = (std::string::value_type *)&unk_1EE2F49B8;
      std::string v77 = (void **)&v74;
      ctu::getBitFieldPrintWithDesc(a1, (unsigned __int16 *)&v66, (uint64_t)&v74, &v70);
      if ((v72 & 0x80u) == 0) {
        unsigned int v19 = (const std::string::value_type *)&v70;
      }
      else {
        unsigned int v19 = v70;
      }
      if ((v72 & 0x80u) == 0) {
        std::string::size_type v20 = v72;
      }
      else {
        std::string::size_type v20 = v71;
      }
      std::string::append(a9, v19, v20);
      if ((char)v72 < 0) {
        operator delete(v70);
      }
      std::__function::__value_func<std::string ()(int)>::~__value_func[abi:ne180100](&v74);
      if ((a1 & 0x10) != 0)
      {
        *a2 = a1 & 3;
        LOWORD(__p) = 256;
        unint64_t v70 = (std::string::value_type *)&unk_1EE2F4A10;
        uint64_t v73 = (void **)&v70;
        ctu::getBitFieldPrintWithDesc(a1, (unsigned __int16 *)&__p, (uint64_t)&v70, &v66);
        if ((v68 & 0x80u) == 0) {
          int v21 = (const std::string::value_type *)&v66;
        }
        else {
          int v21 = v66;
        }
        if ((v68 & 0x80u) == 0) {
          std::string::size_type v22 = v68;
        }
        else {
          std::string::size_type v22 = v67;
        }
      }
      else
      {
        *a2 = 4;
        LOWORD(__p) = 256;
        unint64_t v70 = (std::string::value_type *)&unk_1EE2F4A68;
        uint64_t v73 = (void **)&v70;
        ctu::getBitFieldPrintWithDesc(a1, (unsigned __int16 *)&__p, (uint64_t)&v70, &v66);
        if ((v68 & 0x80u) == 0) {
          int v21 = (const std::string::value_type *)&v66;
        }
        else {
          int v21 = v66;
        }
        if ((v68 & 0x80u) == 0) {
          std::string::size_type v22 = v68;
        }
        else {
          std::string::size_type v22 = v67;
        }
      }
      std::string::append(a9, v21, v22);
      if ((char)v68 < 0) {
        operator delete(v66);
      }
      std::__function::__value_func<std::string ()(int)>::~__value_func[abi:ne180100](&v70);
      *a3 = (a1 >> 2) & 3;
      unsigned __int16 v52 = 770;
      uint64_t v66 = (std::string::value_type *)&unk_1EE2F4AC0;
      uint64_t v69 = (void **)&v66;
      ctu::getBitFieldPrintWithDesc(a1, &v52, (uint64_t)&v66, &__p);
      if ((v55 & 0x80u) == 0) {
        std::__split_buffer<std::string>::pointer p_p = (const std::string::value_type *)&__p;
      }
      else {
        std::__split_buffer<std::string>::pointer p_p = (const std::string::value_type *)__p;
      }
      if ((v55 & 0x80u) == 0) {
        std::string::size_type v43 = v55;
      }
      else {
        std::string::size_type v43 = v54;
      }
      std::string::append(a9, p_p, v43);
      if ((char)v55 < 0) {
        operator delete(__p);
      }
      std::__function::__value_func<std::string ()(int)>::~__value_func[abi:ne180100](&v66);
      return 1;
    }
    if ((a1 & 0xFFFFFFC0) == 0x80)
    {
      LOWORD(v70) = 1796;
      v63[0] = &unk_1EE2F40C8;
      v63[3] = v63;
      ctu::getBitFieldPrintWithDesc(a1, (unsigned __int16 *)&v70, (uint64_t)v63, &v74);
      if ((v76 & 0x80u) == 0) {
        int v23 = (const std::string::value_type *)&v74;
      }
      else {
        int v23 = v74;
      }
      if ((v76 & 0x80u) == 0) {
        std::string::size_type v24 = v76;
      }
      else {
        std::string::size_type v24 = v75;
      }
      std::string::append(a9, v23, v24);
      if ((char)v76 < 0) {
        operator delete(v74);
      }
      std::__function::__value_func<std::string ()(int)>::~__value_func[abi:ne180100](v63);
      LOWORD(v70) = 770;
      v62[0] = &unk_1EE2F4120;
      v62[3] = v62;
      ctu::getBitFieldPrintWithDesc(a1, (unsigned __int16 *)&v70, (uint64_t)v62, &v74);
      if ((v76 & 0x80u) == 0) {
        uint64_t v25 = (const std::string::value_type *)&v74;
      }
      else {
        uint64_t v25 = v74;
      }
      if ((v76 & 0x80u) == 0) {
        std::string::size_type v26 = v76;
      }
      else {
        std::string::size_type v26 = v75;
      }
      std::string::append(a9, v25, v26);
      if ((char)v76 < 0) {
        operator delete(v74);
      }
      std::__function::__value_func<std::string ()(int)>::~__value_func[abi:ne180100](v62);
      LOWORD(v70) = 256;
      v61[0] = &unk_1EE2F4178;
      v61[3] = v61;
      ctu::getBitFieldPrintWithDesc(a1, (unsigned __int16 *)&v70, (uint64_t)v61, &v74);
      if ((v76 & 0x80u) == 0) {
        uint64_t v27 = (const std::string::value_type *)&v74;
      }
      else {
        uint64_t v27 = v74;
      }
      if ((v76 & 0x80u) == 0) {
        std::string::size_type v28 = v76;
      }
      else {
        std::string::size_type v28 = v75;
      }
      std::string::append(a9, v27, v28);
      if ((char)v76 < 0) {
        operator delete(v74);
      }
      std::__function::__value_func<std::string ()(int)>::~__value_func[abi:ne180100](v61);
      if ((a1 & 0xC) == 4)
      {
        int v29 = 3;
LABEL_152:
        *a3 = v29;
        return 1;
      }
    }
    else
    {
      unsigned int v33 = a1 >> 4;
      if ((a1 & 0xFFFFFFE0) == 0xC0 || v33 == 14)
      {
        LOWORD(v70) = 1796;
        v60[0] = &unk_1EE2F41D0;
        v60[3] = v60;
        ctu::getBitFieldPrintWithDesc(a1, (unsigned __int16 *)&v70, (uint64_t)v60, &v74);
        if ((v76 & 0x80u) == 0) {
          uint64_t v44 = (const std::string::value_type *)&v74;
        }
        else {
          uint64_t v44 = v74;
        }
        if ((v76 & 0x80u) == 0) {
          std::string::size_type v45 = v76;
        }
        else {
          std::string::size_type v45 = v75;
        }
        std::string::append(a9, v44, v45);
        if ((char)v76 < 0) {
          operator delete(v74);
        }
        std::__function::__value_func<std::string ()(int)>::~__value_func[abi:ne180100](v60);
        LOWORD(v70) = 771;
        v59[0] = &unk_1EE2F4228;
        v59[3] = v59;
        ctu::getBitFieldPrintWithDesc(a1, (unsigned __int16 *)&v70, (uint64_t)v59, &v74);
        if ((v76 & 0x80u) == 0) {
          long long v46 = (const std::string::value_type *)&v74;
        }
        else {
          long long v46 = v74;
        }
        if ((v76 & 0x80u) == 0) {
          std::string::size_type v47 = v76;
        }
        else {
          std::string::size_type v47 = v75;
        }
        std::string::append(a9, v46, v47);
        if ((char)v76 < 0) {
          operator delete(v74);
        }
        std::__function::__value_func<std::string ()(int)>::~__value_func[abi:ne180100](v59);
        LOWORD(v70) = 514;
        v58[0] = &unk_1EE2F4280;
        _OWORD v58[3] = v58;
        ctu::getBitFieldPrintWithDesc(a1, (unsigned __int16 *)&v70, (uint64_t)v58, &v74);
        if ((v76 & 0x80u) == 0) {
          unint64_t v48 = (const std::string::value_type *)&v74;
        }
        else {
          unint64_t v48 = v74;
        }
        if ((v76 & 0x80u) == 0) {
          std::string::size_type v49 = v76;
        }
        else {
          std::string::size_type v49 = v75;
        }
        std::string::append(a9, v48, v49);
        if ((char)v76 < 0) {
          operator delete(v74);
        }
        std::__function::__value_func<std::string ()(int)>::~__value_func[abi:ne180100](v58);
        LOWORD(v70) = 256;
        v57[0] = &unk_1EE2F42D8;
        v57[3] = v57;
        ctu::getBitFieldPrintWithDesc(a1, (unsigned __int16 *)&v70, (uint64_t)v57, &v74);
        if ((v76 & 0x80u) == 0) {
          uint64_t v50 = (const std::string::value_type *)&v74;
        }
        else {
          uint64_t v50 = v74;
        }
        if ((v76 & 0x80u) == 0) {
          std::string::size_type v51 = v76;
        }
        else {
          std::string::size_type v51 = v75;
        }
        std::string::append(a9, v50, v51);
        if ((char)v76 < 0) {
          operator delete(v74);
        }
        std::__function::__value_func<std::string ()(int)>::~__value_func[abi:ne180100](v57);
        if (v33 == 12) {
          *a8 = 1;
        }
        if ((a1 & 3) == 0)
        {
          *a6 = 1;
          *a7 = (a1 & 8) != 0;
        }
        int v29 = 2 * (v33 == 14);
        goto LABEL_152;
      }
      if (v33 == 15)
      {
        LOWORD(v70) = 1796;
        v56[0] = &unk_1EE2F4330;
        std::regex_traits<char> v56[3] = v56;
        ctu::getBitFieldPrintWithDesc(a1, (unsigned __int16 *)&v70, (uint64_t)v56, &v74);
        if ((v76 & 0x80u) == 0) {
          uint64_t v34 = (const std::string::value_type *)&v74;
        }
        else {
          uint64_t v34 = v74;
        }
        if ((v76 & 0x80u) == 0) {
          std::string::size_type v35 = v76;
        }
        else {
          std::string::size_type v35 = v75;
        }
        std::string::append(a9, v34, v35);
        if ((char)v76 < 0) {
          operator delete(v74);
        }
        std::__function::__value_func<std::string ()(int)>::~__value_func[abi:ne180100](v56);
        LOWORD(v66) = 771;
        uint64_t v74 = (std::string::value_type *)&unk_1EE2F4750;
        std::string v77 = (void **)&v74;
        ctu::getBitFieldPrintWithDesc(a1, (unsigned __int16 *)&v66, (uint64_t)&v74, &v70);
        if ((v72 & 0x80u) == 0) {
          xpc_object_t v36 = (const std::string::value_type *)&v70;
        }
        else {
          xpc_object_t v36 = v70;
        }
        if ((v72 & 0x80u) == 0) {
          std::string::size_type v37 = v72;
        }
        else {
          std::string::size_type v37 = v71;
        }
        std::string::append(a9, v36, v37);
        if ((char)v72 < 0) {
          operator delete(v70);
        }
        std::__function::__value_func<std::string ()(int)>::~__value_func[abi:ne180100](&v74);
        LOWORD(__p) = 514;
        unint64_t v70 = (std::string::value_type *)&unk_1EE2F47A8;
        uint64_t v73 = (void **)&v70;
        ctu::getBitFieldPrintWithDesc(a1, (unsigned __int16 *)&__p, (uint64_t)&v70, &v66);
        if ((v68 & 0x80u) == 0) {
          termios v38 = (const std::string::value_type *)&v66;
        }
        else {
          termios v38 = v66;
        }
        if ((v68 & 0x80u) == 0) {
          std::string::size_type v39 = v68;
        }
        else {
          std::string::size_type v39 = v67;
        }
        std::string::append(a9, v38, v39);
        if ((char)v68 < 0) {
          operator delete(v66);
        }
        std::__function::__value_func<std::string ()(int)>::~__value_func[abi:ne180100](&v70);
        *a3 = (a1 >> 2) & 1;
        unsigned __int16 v52 = 256;
        uint64_t v66 = (std::string::value_type *)&unk_1EE2F4800;
        uint64_t v69 = (void **)&v66;
        ctu::getBitFieldPrintWithDesc(a1, &v52, (uint64_t)&v66, &__p);
        if ((v55 & 0x80u) == 0) {
          uint64_t v40 = (const std::string::value_type *)&__p;
        }
        else {
          uint64_t v40 = (const std::string::value_type *)__p;
        }
        if ((v55 & 0x80u) == 0) {
          std::string::size_type v41 = v55;
        }
        else {
          std::string::size_type v41 = v54;
        }
        std::string::append(a9, v40, v41);
        if ((char)v55 < 0) {
          operator delete(__p);
        }
        std::__function::__value_func<std::string ()(int)>::~__value_func[abi:ne180100](&v66);
        *a2 = a1 & 3;
        return 1;
      }
    }
    return 0;
  }
  return result;
}

void sub_1920A5678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__function::__value_func<std::string ()(int)>::~__value_func[abi:ne180100]((void *)(v44 - 192));
  _Unwind_Resume(a1);
}

uint64_t ctu::TextConverter::decodeCbsDataCodingScheme(unsigned int a1, int *a2, int *a3, unsigned char *a4)
{
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v12 = v8;
  long long v13 = v8;
  v11[0] = v8;
  v11[1] = v8;
  ctu::StaticLogger::StaticLogger((ctu::StaticLogger *)v11);
  uint64_t v9 = 0;
  BYTE8(v12) = -1;
  *a4 = 0;
  *a2 = 4;
  if (a1 <= 0xFF)
  {
    if ((a1 & 0xF0) != 0)
    {
      if (a1 == 17)
      {
        *a3 = 2;
        goto LABEL_7;
      }
      if (a1 == 16)
      {
        *a3 = 0;
LABEL_7:
        uint64_t v9 = 1;
        *a4 = 1;
        goto LABEL_13;
      }
      if (a1 - 33 <= 2)
      {
        *a3 = 2;
LABEL_12:
        uint64_t v9 = 1;
        goto LABEL_13;
      }
      if ((a1 & 0xE0 | 0x10) != 0x30)
      {
        if ((a1 & 0xC0) == 0x40)
        {
          ctu::decodeGeneralDataCodingIndication(a1, a2, a3, (unsigned int (***)(void, uint64_t))v11);
        }
        else
        {
          if ((a1 & 0xF0) != 0xF0)
          {
            uint64_t v9 = 0;
            goto LABEL_13;
          }
          ctu::decodeDataCodingMessageHandling(a1, a2, a3, (unsigned int (***)(void, uint64_t))v11);
        }
        goto LABEL_12;
      }
    }
    *a3 = 0;
    goto LABEL_12;
  }
LABEL_13:
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase((ctu::LoggerCommonBase *)v11);
  return v9;
}

void sub_1920A59A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t ctu::TextConverter::decodeCbsDataCodingScheme(unsigned __int8 a1, unsigned __int8 *a2)
{
  if (a1 >= 0x10u && a1 - 32 > 4) {
    return 0;
  }
  *a2 = a1;
  return 1;
}

void *ctu::asString@<X0>(int a1@<W0>, void *a2@<X8>)
{
  memset(a2, 170, 24);
  uint64_t result = std::string::basic_string[abi:ne180100]<0>(a2, "DCS:INVALID LANGUAGE");
  switch(a1)
  {
    case 0:
      if (*((char *)result + 23) < 0)
      {
        result[1] = 10;
        uint64_t result = (void *)*result;
      }
      else
      {
        *((unsigned char *)result + 2ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = 10;
      }
      *((_WORD *)result + 4) = 28257;
      int v4 = "DCS:German";
      goto LABEL_84;
    case 1:
      if (*((char *)result + 23) < 0)
      {
        result[1] = 11;
        uint64_t result = (void *)*result;
      }
      else
      {
        *((unsigned char *)result + 2ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = 11;
      }
      *(_DWORD *)((char *)result + 7) = 1752394092;
      int v5 = "DCS:English";
      goto LABEL_87;
    case 2:
      if (*((char *)result + 23) < 0)
      {
        result[1] = 11;
        uint64_t result = (void *)*result;
      }
      else
      {
        *((unsigned char *)result + 2ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = 11;
      }
      *(_DWORD *)((char *)result + 7) = 1851877740;
      int v5 = "DCS:Italian";
      goto LABEL_87;
    case 3:
      if (*((char *)result + 23) < 0)
      {
        result[1] = 10;
        uint64_t result = (void *)*result;
      }
      else
      {
        *((unsigned char *)result + 2ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = 10;
      }
      *((_WORD *)result + 4) = 26723;
      int v4 = "DCS:French";
      goto LABEL_84;
    case 4:
      if (*((char *)result + 23) < 0)
      {
        result[1] = 11;
        uint64_t result = (void *)*result;
      }
      else
      {
        *((unsigned char *)result + 2ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = 11;
      }
      *(_DWORD *)((char *)result + 7) = 1752394094;
      int v5 = "DCS:Spanish";
      goto LABEL_87;
    case 5:
      if (*((char *)result + 23) < 0)
      {
        result[1] = 9;
        uint64_t result = (void *)*result;
      }
      else
      {
        *((unsigned char *)result + 2ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = 9;
      }
      *((unsigned char *)result + 8) = 104;
      unsigned int v6 = "DCS:Dutch";
      goto LABEL_79;
    case 6:
      if (*((char *)result + 23) < 0)
      {
        result[1] = 11;
        uint64_t result = (void *)*result;
      }
      else
      {
        *((unsigned char *)result + 2ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = 11;
      }
      *(_DWORD *)((char *)result + 7) = 1752394084;
      int v5 = "DCS:Swedish";
      goto LABEL_87;
    case 7:
      if (*((char *)result + 23) < 0)
      {
        result[1] = 10;
        uint64_t result = (void *)*result;
      }
      else
      {
        *((unsigned char *)result + 2ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = 10;
      }
      *((_WORD *)result + 4) = 26739;
      int v4 = "DCS:Danish";
      goto LABEL_84;
    case 8:
      if (*((char *)result + 23) < 0)
      {
        result[1] = 14;
        uint64_t result = (void *)*result;
      }
      else
      {
        *((unsigned char *)result + 2ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = 14;
      }
      uint64_t v7 = "DCS:Portuguese";
      goto LABEL_66;
    case 9:
      if (*((char *)result + 23) < 0)
      {
        result[1] = 11;
        uint64_t result = (void *)*result;
      }
      else
      {
        *((unsigned char *)result + 2ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = 11;
      }
      *(_DWORD *)((char *)result + 7) = 1752394094;
      int v5 = "DCS:Finnish";
      goto LABEL_87;
    case 10:
      if (*((char *)result + 23) < 0)
      {
        result[1] = 14;
        uint64_t result = (void *)*result;
      }
      else
      {
        *((unsigned char *)result + 2ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = 14;
      }
      uint64_t v7 = "DCS:Norweigian";
LABEL_66:
      *uint64_t result = *(void *)v7;
      *(void *)((char *)result + 6) = *(void *)(v7 + 6);
      long long v8 = (char *)result + 14;
      goto LABEL_91;
    case 11:
      if (*((char *)result + 23) < 0)
      {
        result[1] = 9;
        uint64_t result = (void *)*result;
      }
      else
      {
        *((unsigned char *)result + 2ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = 9;
      }
      *((unsigned char *)result + 8) = 107;
      unsigned int v6 = "DCS:Greek";
      goto LABEL_79;
    case 12:
      if (*((char *)result + 23) < 0)
      {
        result[1] = 11;
        uint64_t result = (void *)*result;
      }
      else
      {
        *((unsigned char *)result + 2ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = 11;
      }
      *(_DWORD *)((char *)result + 7) = 1752394091;
      int v5 = "DCS:Turkish";
      goto LABEL_87;
    case 13:
      if (*((char *)result + 23) < 0)
      {
        result[1] = 13;
        uint64_t result = (void *)*result;
      }
      else
      {
        *((unsigned char *)result + 2ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = 13;
      }
      uint64_t v9 = "DCS:Hungarian";
      goto LABEL_90;
    case 14:
      if (*((char *)result + 23) < 0)
      {
        result[1] = 10;
        uint64_t result = (void *)*result;
      }
      else
      {
        *((unsigned char *)result + 2ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = 10;
      }
      *((_WORD *)result + 4) = 26739;
      int v4 = "DCS:Polish";
      goto LABEL_84;
    case 15:
      if (*((char *)result + 23) < 0)
      {
        result[1] = 15;
        uint64_t result = (void *)*result;
      }
      else
      {
        *((unsigned char *)result + 2ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = 15;
      }
      qmemcpy(result, "DCS:Unspecified", 15);
      long long v8 = (char *)result + 15;
      goto LABEL_91;
    case 32:
      if (*((char *)result + 23) < 0)
      {
        result[1] = 9;
        uint64_t result = (void *)*result;
      }
      else
      {
        *((unsigned char *)result + 2ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = 9;
      }
      *((unsigned char *)result + 8) = 104;
      unsigned int v6 = "DCS:Czech";
LABEL_79:
      *uint64_t result = *(void *)v6;
      long long v8 = (char *)result + 9;
      goto LABEL_91;
    case 33:
      if (*((char *)result + 23) < 0)
      {
        result[1] = 10;
        uint64_t result = (void *)*result;
      }
      else
      {
        *((unsigned char *)result + 2ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = 10;
      }
      *((_WORD *)result + 4) = 30565;
      int v4 = "DCS:Hebrew";
      goto LABEL_84;
    case 34:
      if (*((char *)result + 23) < 0)
      {
        result[1] = 10;
        uint64_t result = (void *)*result;
      }
      else
      {
        *((unsigned char *)result + 2ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = 10;
      }
      *((_WORD *)result + 4) = 25449;
      int v4 = "DCS:Arabic";
LABEL_84:
      *uint64_t result = *(void *)v4;
      long long v8 = (char *)result + 10;
      goto LABEL_91;
    case 35:
      if (*((char *)result + 23) < 0)
      {
        result[1] = 11;
        uint64_t result = (void *)*result;
      }
      else
      {
        *((unsigned char *)result + 2ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = 11;
      }
      *(_DWORD *)((char *)result + 7) = 1851877747;
      int v5 = "DCS:Russian";
LABEL_87:
      *uint64_t result = *(void *)v5;
      long long v8 = (char *)result + 11;
      goto LABEL_91;
    case 36:
      if (*((char *)result + 23) < 0)
      {
        result[1] = 13;
        uint64_t result = (void *)*result;
      }
      else
      {
        *((unsigned char *)result + 2ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = 13;
      }
      uint64_t v9 = "DCS:Icelandic";
LABEL_90:
      *uint64_t result = *(void *)v9;
      *(void *)((char *)result + 5) = *(void *)(v9 + 5);
      long long v8 = (char *)result + 13;
LABEL_91:
      *long long v8 = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_0,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_0>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EE2F4858;
  return result;
}

void std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_0,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_0>,std::string ()(int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE2F4858;
}

void *std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_0,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_0>,std::string ()(int)>::operator()@<X0>(unsigned int *a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  if (v2 <= 1) {
    return std::string::basic_string[abi:ne180100]<0>(a2, off_1E5744600[v2]);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

uint64_t std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_0,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_0>,std::string ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_0,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_0>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_1,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_1>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EE2F48B0;
  return result;
}

void std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_1,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_1>,std::string ()(int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE2F48B0;
}

void *std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_1,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_1>,std::string ()(int)>::operator()@<X0>(unsigned int *a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  if (v2 <= 3) {
    return std::string::basic_string[abi:ne180100]<0>(a2, off_1E5744640[v2]);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

uint64_t std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_1,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_1>,std::string ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_1,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_1>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_2,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_2>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EE2F4908;
  return result;
}

void std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_2,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_2>,std::string ()(int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE2F4908;
}

void *std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_2,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_2>,std::string ()(int)>::operator()@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "Class unspecified");
}

uint64_t std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_2,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_2>,std::string ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_2,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_2>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_3,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_3>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EE2F4960;
  return result;
}

void std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_3,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_3>,std::string ()(int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE2F4960;
}

void *std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_3,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_3>,std::string ()(int)>::operator()@<X0>(unsigned int *a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  if (v2 <= 3) {
    return std::string::basic_string[abi:ne180100]<0>(a2, off_1E5744610[v2]);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

uint64_t std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_3,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_3>,std::string ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_3,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_3>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_0,std::allocator<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_0>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EE2F4648;
  return result;
}

void std::__function::__func<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_0,std::allocator<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_0>,std::string ()(int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE2F4648;
}

void *std::__function::__func<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_0,std::allocator<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_0>,std::string ()(int)>::operator()@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "Reserved");
}

uint64_t std::__function::__func<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_0,std::allocator<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_0>,std::string ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_0,std::allocator<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_0>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_1,std::allocator<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_1>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EE2F46A0;
  return result;
}

void std::__function::__func<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_1,std::allocator<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_1>,std::string ()(int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE2F46A0;
}

void *std::__function::__func<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_1,std::allocator<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_1>,std::string ()(int)>::operator()@<X0>(unsigned int *a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  if (v2 <= 1) {
    return std::string::basic_string[abi:ne180100]<0>(a2, off_1E5744630[v2]);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

uint64_t std::__function::__func<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_1,std::allocator<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_1>,std::string ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_1,std::allocator<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_1>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_2,std::allocator<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_2>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EE2F46F8;
  return result;
}

void std::__function::__func<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_2,std::allocator<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_2>,std::string ()(int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE2F46F8;
}

void *std::__function::__func<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_2,std::allocator<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_2>,std::string ()(int)>::operator()@<X0>(unsigned int *a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  if (v2 <= 3) {
    return std::string::basic_string[abi:ne180100]<0>(a2, off_1E5744640[v2]);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

uint64_t std::__function::__func<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_2,std::allocator<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_2>,std::string ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_2,std::allocator<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,ctu::StaticLogger const&)::$_2>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_0,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_0>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EE2F49B8;
  return result;
}

void std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_0,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_0>,std::string ()(int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE2F49B8;
}

void *std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_0,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_0>,std::string ()(int)>::operator()@<X0>(unsigned int *a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  if (v2 <= 1) {
    return std::string::basic_string[abi:ne180100]<0>(a2, off_1E5744600[v2]);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

uint64_t std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_0,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_0>,std::string ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_0,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_0>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_1,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_1>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EE2F4A10;
  return result;
}

void std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_1,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_1>,std::string ()(int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE2F4A10;
}

void *std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_1,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_1>,std::string ()(int)>::operator()@<X0>(unsigned int *a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  if (v2 <= 3) {
    return std::string::basic_string[abi:ne180100]<0>(a2, off_1E5744640[v2]);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

uint64_t std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_1,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_1>,std::string ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_1,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_1>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_2,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_2>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EE2F4A68;
  return result;
}

void std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_2,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_2>,std::string ()(int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE2F4A68;
}

void *std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_2,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_2>,std::string ()(int)>::operator()@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "Class unspecified");
}

uint64_t std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_2,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_2>,std::string ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_2,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_2>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_3,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_3>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EE2F4AC0;
  return result;
}

void std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_3,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_3>,std::string ()(int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE2F4AC0;
}

void *std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_3,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_3>,std::string ()(int)>::operator()@<X0>(unsigned int *a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  if (v2 <= 3) {
    return std::string::basic_string[abi:ne180100]<0>(a2, off_1E5744610[v2]);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

uint64_t std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_3,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_3>,std::string ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_3,std::allocator<ctu::decodeGeneralDataCodingIndication(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_3>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_0,std::allocator<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_0>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EE2F4750;
  return result;
}

void std::__function::__func<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_0,std::allocator<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_0>,std::string ()(int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE2F4750;
}

void *std::__function::__func<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_0,std::allocator<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_0>,std::string ()(int)>::operator()@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "Reserved");
}

uint64_t std::__function::__func<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_0,std::allocator<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_0>,std::string ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_0,std::allocator<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_0>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_1,std::allocator<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_1>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EE2F47A8;
  return result;
}

void std::__function::__func<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_1,std::allocator<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_1>,std::string ()(int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE2F47A8;
}

void *std::__function::__func<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_1,std::allocator<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_1>,std::string ()(int)>::operator()@<X0>(unsigned int *a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  if (v2 <= 1) {
    return std::string::basic_string[abi:ne180100]<0>(a2, off_1E5744630[v2]);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

uint64_t std::__function::__func<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_1,std::allocator<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_1>,std::string ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_1,std::allocator<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_1>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_2,std::allocator<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_2>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EE2F4800;
  return result;
}

void std::__function::__func<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_2,std::allocator<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_2>,std::string ()(int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE2F4800;
}

void *std::__function::__func<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_2,std::allocator<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_2>,std::string ()(int)>::operator()@<X0>(unsigned int *a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  if (v2 <= 3) {
    return std::string::basic_string[abi:ne180100]<0>(a2, off_1E5744640[v2]);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

uint64_t std::__function::__func<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_2,std::allocator<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_2>,std::string ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_2,std::allocator<ctu::decodeDataCodingMessageHandling(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,std::string &)::$_2>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_0,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_0>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EE2F7FD8;
  return result;
}

void std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_0,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_0>,std::string ()(int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE2F7FD8;
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_0,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_0>,std::string ()(int)>::operator()@<X0>(unsigned int *a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  if (v2 <= 1) {
    return std::string::basic_string[abi:ne180100]<0>(a2, off_1E5744660[v2]);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

uint64_t std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_0,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_0>,std::string ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_0,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_0>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_1,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_1>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EE2F8030;
  return result;
}

void std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_1,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_1>,std::string ()(int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE2F8030;
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_1,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_1>,std::string ()(int)>::operator()@<X0>(unsigned int *a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  if (v2 <= 1) {
    return std::string::basic_string[abi:ne180100]<0>(a2, off_1E5744670[v2]);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

uint64_t std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_1,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_1>,std::string ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_1,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_1>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_2,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_2>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EE2F8088;
  return result;
}

void std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_2,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_2>,std::string ()(int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE2F8088;
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_2,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_2>,std::string ()(int)>::operator()@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "Reserved");
}

uint64_t std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_2,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_2>,std::string ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_2,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_2>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_3,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_3>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EE2F80E0;
  return result;
}

void std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_3,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_3>,std::string ()(int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE2F80E0;
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_3,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_3>,std::string ()(int)>::operator()@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  if (*a1 == 1) {
    uint64_t v2 = "kKSC5601 encoding";
  }
  else {
    uint64_t v2 = "Reserved";
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v2);
}

uint64_t std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_3,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_3>,std::string ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_3,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_3>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_4,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_4>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EE2F8138;
  return result;
}

void std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_4,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_4>,std::string ()(int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE2F8138;
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_4,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_4>,std::string ()(int)>::operator()@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "Reserved");
}

uint64_t std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_4,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_4>,std::string ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_4,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_4>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_5,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_5>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EE2F8190;
  return result;
}

void std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_5,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_5>,std::string ()(int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE2F8190;
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_5,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_5>,std::string ()(int)>::operator()@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = "Message Waiting Indication group: Store message (UCS2)";
  if (*a1 == 13) {
    uint64_t v2 = "Message waiting indication group: Store message (GSM-7)";
  }
  if (*a1 == 12) {
    int v3 = "Message waiting indication group: Discard message";
  }
  else {
    int v3 = (char *)v2;
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v3);
}

uint64_t std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_5,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_5>,std::string ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_5,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_5>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_6,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_6>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EE2F81E8;
  return result;
}

void std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_6,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_6>,std::string ()(int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE2F81E8;
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_6,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_6>,std::string ()(int)>::operator()@<X0>(unsigned int *a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  if (v2 <= 1) {
    return std::string::basic_string[abi:ne180100]<0>(a2, off_1E5744680[v2]);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

uint64_t std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_6,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_6>,std::string ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_6,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_6>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_7,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_7>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EE2F8240;
  return result;
}

void std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_7,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_7>,std::string ()(int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE2F8240;
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_7,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_7>,std::string ()(int)>::operator()@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "Reserved");
}

uint64_t std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_7,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_7>,std::string ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_7,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_7>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_8,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_8>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EE2F8298;
  return result;
}

void std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_8,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_8>,std::string ()(int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE2F8298;
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_8,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_8>,std::string ()(int)>::operator()@<X0>(unsigned int *a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  if (v2 <= 3) {
    return std::string::basic_string[abi:ne180100]<0>(a2, off_1E5744690[v2]);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

uint64_t std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_8,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_8>,std::string ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_8,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_8>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_9,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_9>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EE2F82F0;
  return result;
}

void std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_9,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_9>,std::string ()(int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE2F82F0;
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_9,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_9>,std::string ()(int)>::operator()@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "Data coding/message class");
}

uint64_t std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_9,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_9>,std::string ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_9,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,ctu::StaticLogger const&)::$_9>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_0,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_0>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EE2F4018;
  return result;
}

void std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_0,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_0>,std::string ()(int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE2F4018;
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_0,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_0>,std::string ()(int)>::operator()@<X0>(unsigned int *a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  if (v2 <= 1) {
    return std::string::basic_string[abi:ne180100]<0>(a2, off_1E5744660[v2]);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

uint64_t std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_0,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_0>,std::string ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_0,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_0>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_1,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_1>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EE2F4070;
  return result;
}

void std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_1,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_1>,std::string ()(int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE2F4070;
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_1,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_1>,std::string ()(int)>::operator()@<X0>(unsigned int *a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  if (v2 <= 1) {
    return std::string::basic_string[abi:ne180100]<0>(a2, off_1E5744670[v2]);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

uint64_t std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_1,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_1>,std::string ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_1,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_1>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_2,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_2>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EE2F40C8;
  return result;
}

void std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_2,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_2>,std::string ()(int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE2F40C8;
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_2,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_2>,std::string ()(int)>::operator()@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "Reserved");
}

uint64_t std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_2,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_2>,std::string ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_2,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_2>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_3,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_3>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EE2F4120;
  return result;
}

void std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_3,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_3>,std::string ()(int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE2F4120;
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_3,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_3>,std::string ()(int)>::operator()@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  if (*a1 == 1) {
    uint64_t v2 = "kKSC5601 encoding";
  }
  else {
    uint64_t v2 = "Reserved";
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v2);
}

uint64_t std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_3,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_3>,std::string ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_3,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_3>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_4,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_4>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EE2F4178;
  return result;
}

void std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_4,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_4>,std::string ()(int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE2F4178;
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_4,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_4>,std::string ()(int)>::operator()@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "Reserved");
}

uint64_t std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_4,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_4>,std::string ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_4,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_4>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_5,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_5>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EE2F41D0;
  return result;
}

void std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_5,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_5>,std::string ()(int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE2F41D0;
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_5,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_5>,std::string ()(int)>::operator()@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = "Message Waiting Indication group: Store message (UCS2)";
  if (*a1 == 13) {
    uint64_t v2 = "Message waiting indication group: Store message (GSM-7)";
  }
  if (*a1 == 12) {
    int v3 = "Message waiting indication group: Discard message";
  }
  else {
    int v3 = (char *)v2;
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v3);
}

uint64_t std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_5,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_5>,std::string ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_5,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_5>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_6,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_6>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EE2F4228;
  return result;
}

void std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_6,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_6>,std::string ()(int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE2F4228;
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_6,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_6>,std::string ()(int)>::operator()@<X0>(unsigned int *a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  if (v2 <= 1) {
    return std::string::basic_string[abi:ne180100]<0>(a2, off_1E5744680[v2]);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

uint64_t std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_6,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_6>,std::string ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_6,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_6>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_7,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_7>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EE2F4280;
  return result;
}

void std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_7,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_7>,std::string ()(int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE2F4280;
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_7,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_7>,std::string ()(int)>::operator()@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "Reserved");
}

uint64_t std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_7,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_7>,std::string ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_7,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_7>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_8,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_8>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EE2F42D8;
  return result;
}

void std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_8,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_8>,std::string ()(int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE2F42D8;
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_8,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_8>,std::string ()(int)>::operator()@<X0>(unsigned int *a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  if (v2 <= 3) {
    return std::string::basic_string[abi:ne180100]<0>(a2, off_1E5744690[v2]);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

uint64_t std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_8,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_8>,std::string ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_8,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_8>,std::string ()(int)>::target_type()
{
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_9,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_9>,std::string ()(int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EE2F4330;
  return result;
}

void std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_9,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_9>,std::string ()(int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE2F4330;
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_9,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_9>,std::string ()(int)>::operator()@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "Data coding/message class");
}

uint64_t std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_9,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_9>,std::string ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_9,std::allocator<ctu::TextConverter::decodeSmsDataCodingScheme(int,ctu::TextConverter::MessageClass &,ctu::TextConverter::MessageEncoding &,BOOL &,BOOL &,BOOL &,BOOL &,BOOL &,std::string &)::$_9>,std::string ()(int)>::target_type()
{
}

void ctu::hex(ctu *this@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  if (a2 >= 1)
  {
    int v3 = this;
    int v5 = (ctu *)((char *)this + a2);
    do
    {
      if (*(unsigned __int8 *)v3 >= 0xA0u) {
        char v6 = 87;
      }
      else {
        char v6 = 48;
      }
      std::string::push_back(a3, v6 + (*(unsigned char *)v3 >> 4));
      unsigned int v7 = *(unsigned char *)v3 & 0xF;
      if (v7 >= 0xA) {
        char v8 = 87;
      }
      else {
        char v8 = 48;
      }
      std::string::push_back(a3, v8 + v7);
      int v3 = (ctu *)((char *)v3 + 1);
    }
    while (v3 < v5);
  }
}

void sub_1920A7D20(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void ctu::hex(ctu **a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = v2 - *a1;
  if (v2 == *a1) {
    int v4 = 0;
  }
  else {
    int v4 = *a1;
  }
  ctu::hex(v4, v3, a2);
}

void ctu::hex_sp(ctu **a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = v2 - *a1;
  if (v2 == *a1) {
    int v4 = 0;
  }
  else {
    int v4 = *a1;
  }
  ctu::hex_sp(v4, v3, a2);
}

void sub_1920A7E10(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1920A7EE0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void ctu::hex(unint64_t this@<X0>, unint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  do
  {
    if ((this & 0xF) >= 0xA) {
      char v4 = 87;
    }
    else {
      char v4 = 48;
    }
    std::string::push_back((std::string *)a2, v4 + (this & 0xF));
    BOOL v10 = this > 0xF;
    this >>= 4;
  }
  while (v10);
  int v5 = *(char *)(a2 + 23);
  BOOL v6 = v5 < 0;
  if (v5 >= 0) {
    unint64_t v7 = a2;
  }
  else {
    unint64_t v7 = *(void *)a2;
  }
  if (v6) {
    uint64_t v8 = *(void *)(a2 + 8);
  }
  else {
    uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  uint64_t v9 = (unsigned char *)(v7 + v8 - 1);
  if (v8) {
    BOOL v10 = (unint64_t)v9 > v7;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    unint64_t v11 = v7 + 1;
    do
    {
      char v12 = *(unsigned char *)(v11 - 1);
      *(unsigned char *)(v11 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = *v9;
      *v9-- = v12;
    }
    while (v11++ < (unint64_t)v9);
  }
}

{
  char v4;
  int v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unsigned char *v9;
  BOOL v10;
  unint64_t v11;
  char v12;

  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  do
  {
    if ((this & 0xF) >= 0xA) {
      char v4 = 87;
    }
    else {
      char v4 = 48;
    }
    std::string::push_back((std::string *)a2, v4 + (this & 0xF));
    BOOL v10 = this > 0xF;
    this >>= 4;
  }
  while (v10);
  int v5 = *(char *)(a2 + 23);
  BOOL v6 = v5 < 0;
  if (v5 >= 0) {
    unint64_t v7 = a2;
  }
  else {
    unint64_t v7 = *(void *)a2;
  }
  if (v6) {
    uint64_t v8 = *(void *)(a2 + 8);
  }
  else {
    uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  uint64_t v9 = (unsigned char *)(v7 + v8 - 1);
  if (v8) {
    BOOL v10 = (unint64_t)v9 > v7;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    unint64_t v11 = v7 + 1;
    do
    {
      char v12 = *(unsigned char *)(v11 - 1);
      *(unsigned char *)(v11 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = *v9;
      *v9-- = v12;
    }
    while (v11++ < (unint64_t)v9);
  }
}

{
  char v4;
  int v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unsigned char *v9;
  BOOL v10;
  unint64_t v11;
  char v12;

  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  do
  {
    if ((this & 0xF) >= 0xA) {
      char v4 = 87;
    }
    else {
      char v4 = 48;
    }
    std::string::push_back((std::string *)a2, v4 + (this & 0xF));
    BOOL v10 = this > 0xF;
    this >>= 4;
  }
  while (v10);
  int v5 = *(char *)(a2 + 23);
  BOOL v6 = v5 < 0;
  if (v5 >= 0) {
    unint64_t v7 = a2;
  }
  else {
    unint64_t v7 = *(void *)a2;
  }
  if (v6) {
    uint64_t v8 = *(void *)(a2 + 8);
  }
  else {
    uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  uint64_t v9 = (unsigned char *)(v7 + v8 - 1);
  if (v8) {
    BOOL v10 = (unint64_t)v9 > v7;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    unint64_t v11 = v7 + 1;
    do
    {
      char v12 = *(unsigned char *)(v11 - 1);
      *(unsigned char *)(v11 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = *v9;
      *v9-- = v12;
    }
    while (v11++ < (unint64_t)v9);
  }
}

{
  char v4;
  int v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  unsigned char *v9;
  BOOL v10;
  unint64_t v11;
  char v12;

  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  do
  {
    if ((this & 0xF) >= 0xA) {
      char v4 = 87;
    }
    else {
      char v4 = 48;
    }
    std::string::push_back((std::string *)a2, v4 + (this & 0xF));
    BOOL v10 = this > 0xF;
    this >>= 4;
  }
  while (v10);
  int v5 = *(char *)(a2 + 23);
  BOOL v6 = v5 < 0;
  if (v5 >= 0) {
    unint64_t v7 = a2;
  }
  else {
    unint64_t v7 = *(void *)a2;
  }
  if (v6) {
    uint64_t v8 = *(void *)(a2 + 8);
  }
  else {
    uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  uint64_t v9 = (unsigned char *)(v7 + v8 - 1);
  if (v8) {
    BOOL v10 = (unint64_t)v9 > v7;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    unint64_t v11 = v7 + 1;
    do
    {
      char v12 = *(unsigned char *)(v11 - 1);
      *(unsigned char *)(v11 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = *v9;
      *v9-- = v12;
    }
    while (v11++ < (unint64_t)v9);
  }
}

void sub_1920A7FB0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1920A8080(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1920A8150(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1920A8220(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1920A82F0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1920A83C0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1920A8490(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1920A8560(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void ctu::hex0(ctu *this@<X0>, std::string *a2@<X8>)
{
  unsigned int v2 = this;
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::string::resize(a2, 2uLL, 48);
  if (v2)
  {
    int v4 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
    BOOL v5 = v4 < 0;
    BOOL v6 = (std::string *)a2->__r_.__value_.__r.__words[0];
    if (v4 >= 0) {
      BOOL v6 = a2;
    }
    std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    if (v5) {
      std::string::size_type size = a2->__r_.__value_.__l.__size_;
    }
    uint64_t v8 = (uint64_t)v6 + size;
    if ((v2 & 0xF) >= 0xA) {
      char v9 = 87;
    }
    else {
      char v9 = 48;
    }
    *(unsigned char *)(v8 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v9 + (v2 & 0xF);
    if (v2 >= 0xA0) {
      char v10 = 87;
    }
    else {
      char v10 = 48;
    }
    *(unsigned char *)(v8 - 2) = v10 + (v2 >> 4);
  }
}

{
  int v2;
  int v4;
  BOOL v5;
  std::string *v6;
  std::string::size_type size;
  unsigned char *v8;
  unsigned int v9;
  char v10;
  char v11;

  unsigned int v2 = (int)this;
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::string::resize(a2, 4uLL, 48);
  if (v2)
  {
    int v4 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
    BOOL v5 = v4 < 0;
    BOOL v6 = (std::string *)a2->__r_.__value_.__r.__words[0];
    if (v4 >= 0) {
      BOOL v6 = a2;
    }
    std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    if (v5) {
      std::string::size_type size = a2->__r_.__value_.__l.__size_;
    }
    uint64_t v8 = (char *)v6 + size - 1;
    do
    {
      char v9 = (unsigned __int16)v2;
      if ((v2 & 0xFu) >= 0xA) {
        char v10 = 87;
      }
      else {
        char v10 = 48;
      }
      *uint64_t v8 = v10 + (v2 & 0xF);
      if (v2 >= 0xA0u) {
        unint64_t v11 = 87;
      }
      else {
        unint64_t v11 = 48;
      }
      *(v8 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v11 + (v2 >> 4);
      LOWORD(v2) = BYTE1(v2);
      v8 -= 2;
    }
    while (v9 >= 0x100);
  }
}

{
  unsigned int v2;
  int v4;
  BOOL v5;
  std::string *v6;
  std::string::size_type size;
  unsigned char *v8;
  char v9;
  char v10;
  BOOL v11;

  unsigned int v2 = this;
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::string::resize(a2, 8uLL, 48);
  if (v2)
  {
    int v4 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
    BOOL v5 = v4 < 0;
    BOOL v6 = (std::string *)a2->__r_.__value_.__r.__words[0];
    if (v4 >= 0) {
      BOOL v6 = a2;
    }
    std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    if (v5) {
      std::string::size_type size = a2->__r_.__value_.__l.__size_;
    }
    uint64_t v8 = (char *)v6 + size - 1;
    do
    {
      if ((v2 & 0xF) >= 0xA) {
        char v9 = 87;
      }
      else {
        char v9 = 48;
      }
      *uint64_t v8 = v9 + (v2 & 0xF);
      if (v2 >= 0xA0u) {
        char v10 = 87;
      }
      else {
        char v10 = 48;
      }
      *(v8 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v10 + (v2 >> 4);
      v8 -= 2;
      unint64_t v11 = v2 >= 0x100;
      v2 >>= 8;
    }
    while (v11);
  }
}

{
  unsigned __int8 v2;
  int v4;
  BOOL v5;
  std::string *v6;
  std::string::size_type size;
  uint64_t v8;
  char v9;
  char v10;

  unsigned int v2 = this;
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::string::resize(a2, 2uLL, 48);
  if (v2)
  {
    int v4 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
    BOOL v5 = v4 < 0;
    BOOL v6 = (std::string *)a2->__r_.__value_.__r.__words[0];
    if (v4 >= 0) {
      BOOL v6 = a2;
    }
    std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    if (v5) {
      std::string::size_type size = a2->__r_.__value_.__l.__size_;
    }
    uint64_t v8 = (uint64_t)v6 + size;
    if ((v2 & 0xFu) >= 0xA) {
      char v9 = 87;
    }
    else {
      char v9 = 48;
    }
    *(unsigned char *)(v8 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v9 + (v2 & 0xF);
    if (v2 >= 0xA0u) {
      char v10 = 87;
    }
    else {
      char v10 = 48;
    }
    *(unsigned char *)(v8 - 2) = v10 + (v2 >> 4);
  }
}

{
  unsigned __int8 v2;
  int v4;
  BOOL v5;
  std::string *v6;
  std::string::size_type size;
  uint64_t v8;
  char v9;
  char v10;

  unsigned int v2 = this;
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::string::resize(a2, 2uLL, 48);
  if (v2)
  {
    int v4 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
    BOOL v5 = v4 < 0;
    BOOL v6 = (std::string *)a2->__r_.__value_.__r.__words[0];
    if (v4 >= 0) {
      BOOL v6 = a2;
    }
    std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    if (v5) {
      std::string::size_type size = a2->__r_.__value_.__l.__size_;
    }
    uint64_t v8 = (uint64_t)v6 + size;
    if ((v2 & 0xFu) >= 0xA) {
      char v9 = 87;
    }
    else {
      char v9 = 48;
    }
    *(unsigned char *)(v8 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v9 + (v2 & 0xF);
    if (v2 >= 0xA0u) {
      char v10 = 87;
    }
    else {
      char v10 = 48;
    }
    *(unsigned char *)(v8 - 2) = v10 + (v2 >> 4);
  }
}

{
  int v2;
  int v4;
  BOOL v5;
  std::string *v6;
  std::string::size_type size;
  unsigned char *v8;
  unsigned int v9;
  char v10;
  char v11;

  unsigned int v2 = (int)this;
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::string::resize(a2, 4uLL, 48);
  if (v2)
  {
    int v4 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
    BOOL v5 = v4 < 0;
    BOOL v6 = (std::string *)a2->__r_.__value_.__r.__words[0];
    if (v4 >= 0) {
      BOOL v6 = a2;
    }
    std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    if (v5) {
      std::string::size_type size = a2->__r_.__value_.__l.__size_;
    }
    uint64_t v8 = (char *)v6 + size - 1;
    do
    {
      char v9 = (unsigned __int16)v2;
      if ((v2 & 0xFu) >= 0xA) {
        char v10 = 87;
      }
      else {
        char v10 = 48;
      }
      *uint64_t v8 = v10 + (v2 & 0xF);
      if (v2 >= 0xA0u) {
        unint64_t v11 = 87;
      }
      else {
        unint64_t v11 = 48;
      }
      *(v8 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v11 + (v2 >> 4);
      LOWORD(v2) = BYTE1(v2);
      v8 -= 2;
    }
    while (v9 >= 0x100);
  }
}

{
  unsigned int v2;
  int v4;
  BOOL v5;
  std::string *v6;
  std::string::size_type size;
  unsigned char *v8;
  char v9;
  char v10;
  BOOL v11;

  unsigned int v2 = this;
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::string::resize(a2, 8uLL, 48);
  if (v2)
  {
    int v4 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
    BOOL v5 = v4 < 0;
    BOOL v6 = (std::string *)a2->__r_.__value_.__r.__words[0];
    if (v4 >= 0) {
      BOOL v6 = a2;
    }
    std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    if (v5) {
      std::string::size_type size = a2->__r_.__value_.__l.__size_;
    }
    uint64_t v8 = (char *)v6 + size - 1;
    do
    {
      if ((v2 & 0xF) >= 0xA) {
        char v9 = 87;
      }
      else {
        char v9 = 48;
      }
      *uint64_t v8 = v9 + (v2 & 0xF);
      if (v2 >= 0xA0u) {
        char v10 = 87;
      }
      else {
        char v10 = 48;
      }
      *(v8 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v10 + (v2 >> 4);
      v8 -= 2;
      unint64_t v11 = v2 >= 0x100;
      v2 >>= 8;
    }
    while (v11);
  }
}

void sub_1920A8604(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1920A86C4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1920A8784(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void ctu::hex0(unint64_t this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::string::resize(a2, 0x10uLL, 48);
  if (this)
  {
    int v4 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
    BOOL v5 = v4 < 0;
    BOOL v6 = (std::string *)a2->__r_.__value_.__r.__words[0];
    if (v4 >= 0) {
      BOOL v6 = a2;
    }
    std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    if (v5) {
      std::string::size_type size = a2->__r_.__value_.__l.__size_;
    }
    uint64_t v8 = (char *)v6 + size - 1;
    do
    {
      if ((this & 0xF) >= 0xA) {
        char v9 = 87;
      }
      else {
        char v9 = 48;
      }
      *uint64_t v8 = v9 + (this & 0xF);
      if (this >= 0xA0u) {
        char v10 = 87;
      }
      else {
        char v10 = 48;
      }
      *(v8 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v10 + (this >> 4);
      v8 -= 2;
      BOOL v11 = this >= 0x100;
      this >>= 8;
    }
    while (v11);
  }
}

{
  int v4;
  BOOL v5;
  std::string *v6;
  std::string::size_type size;
  unsigned char *v8;
  char v9;
  char v10;
  BOOL v11;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::string::resize(a2, 0x10uLL, 48);
  if (this)
  {
    int v4 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
    BOOL v5 = v4 < 0;
    BOOL v6 = (std::string *)a2->__r_.__value_.__r.__words[0];
    if (v4 >= 0) {
      BOOL v6 = a2;
    }
    std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    if (v5) {
      std::string::size_type size = a2->__r_.__value_.__l.__size_;
    }
    uint64_t v8 = (char *)v6 + size - 1;
    do
    {
      if ((this & 0xF) >= 0xA) {
        char v9 = 87;
      }
      else {
        char v9 = 48;
      }
      *uint64_t v8 = v9 + (this & 0xF);
      if (this >= 0xA0u) {
        char v10 = 87;
      }
      else {
        char v10 = 48;
      }
      *(v8 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v10 + (this >> 4);
      v8 -= 2;
      BOOL v11 = this >= 0x100;
      this >>= 8;
    }
    while (v11);
  }
}

{
  int v4;
  BOOL v5;
  std::string *v6;
  std::string::size_type size;
  unsigned char *v8;
  char v9;
  char v10;
  BOOL v11;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::string::resize(a2, 0x10uLL, 48);
  if (this)
  {
    int v4 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
    BOOL v5 = v4 < 0;
    BOOL v6 = (std::string *)a2->__r_.__value_.__r.__words[0];
    if (v4 >= 0) {
      BOOL v6 = a2;
    }
    std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    if (v5) {
      std::string::size_type size = a2->__r_.__value_.__l.__size_;
    }
    uint64_t v8 = (char *)v6 + size - 1;
    do
    {
      if ((this & 0xF) >= 0xA) {
        char v9 = 87;
      }
      else {
        char v9 = 48;
      }
      *uint64_t v8 = v9 + (this & 0xF);
      if (this >= 0xA0u) {
        char v10 = 87;
      }
      else {
        char v10 = 48;
      }
      *(v8 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v10 + (this >> 4);
      v8 -= 2;
      BOOL v11 = this >= 0x100;
      this >>= 8;
    }
    while (v11);
  }
}

{
  int v4;
  BOOL v5;
  std::string *v6;
  std::string::size_type size;
  unsigned char *v8;
  char v9;
  char v10;
  BOOL v11;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::string::resize(a2, 0x10uLL, 48);
  if (this)
  {
    int v4 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
    BOOL v5 = v4 < 0;
    BOOL v6 = (std::string *)a2->__r_.__value_.__r.__words[0];
    if (v4 >= 0) {
      BOOL v6 = a2;
    }
    std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    if (v5) {
      std::string::size_type size = a2->__r_.__value_.__l.__size_;
    }
    uint64_t v8 = (char *)v6 + size - 1;
    do
    {
      if ((this & 0xF) >= 0xA) {
        char v9 = 87;
      }
      else {
        char v9 = 48;
      }
      *uint64_t v8 = v9 + (this & 0xF);
      if (this >= 0xA0u) {
        char v10 = 87;
      }
      else {
        char v10 = 48;
      }
      *(v8 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v10 + (this >> 4);
      v8 -= 2;
      BOOL v11 = this >= 0x100;
      this >>= 8;
    }
    while (v11);
  }
}

void sub_1920A8844(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1920A8904(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1920A89AC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1920A8A54(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1920A8B14(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1920A8BD4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1920A8C94(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1920A8D54(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

double ctu::parse_hex@<D0>(char *a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t v4 = *((void *)a1 + 1);
  if (a1[23] >= 0)
  {
    uint64_t v5 = a1[23];
  }
  else
  {
    a1 = *(char **)a1;
    uint64_t v5 = v4;
  }
  return ctu::parse_hex(a1, v5, a2, a3);
}

double ctu::parse_hex@<D0>(char *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (a3 == 2)
  {
    uint64_t v5 = a2;
    uint64_t v6 = 0;
  }
  else
  {
    if (a3 == 1)
    {
      uint64_t v5 = a2;
      uint64_t v6 = 0;
      uint64_t v7 = 1;
      goto LABEL_8;
    }
    if (a3) {
      return result;
    }
    uint64_t v5 = a2;
    uint64_t v6 = 1;
  }
  uint64_t v7 = 0;
LABEL_8:
  ctu::parse_hex_impl((ctu *)&v10, a1, v5, v6, v7);
  uint64_t v8 = v11;
  double result = *(double *)&v10;
  *(_OWORD *)a4 = v10;
  a4[2] = v8;
  return result;
}

void ctu::parse_hex_impl(ctu *this, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = a4;
  uint64_t v7 = a2;
  char v9 = 0;
  *(void *)this = 0;
  *((void *)this + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
  *((void *)this + 2) = 0;
  long long v10 = &a2[a3];
  uint64_t v11 = MEMORY[0x1E4F14390];
  if (!a4) {
    goto LABEL_9;
  }
LABEL_2:
  if (v7 == v10)
  {
LABEL_9:
    while (v7 != v10)
    {
LABEL_10:
      int v14 = *(unsigned __int8 *)v7;
      unsigned int v15 = v14 - 48;
      unsigned int v16 = v14 - 97;
      if ((v14 - 65) >= 6) {
        char v17 = -1;
      }
      else {
        char v17 = v14 - 55;
      }
      char v18 = v14 - 87;
      if (v16 > 5) {
        char v18 = v17;
      }
      if (v15 < 0xA) {
        char v18 = v15;
      }
      if (v7 + 1 == v10) {
        goto LABEL_51;
      }
      unsigned int v19 = v7 + 2;
      int v20 = *((unsigned __int8 *)v7 + 1);
      unsigned int v21 = v20 - 48;
      unsigned int v22 = v20 - 97;
      if ((v20 - 65) >= 6) {
        char v23 = -1;
      }
      else {
        char v23 = v20 - 55;
      }
      char v24 = v20 - 87;
      if (v22 > 5) {
        char v24 = v23;
      }
      if (v21 < 0xA) {
        char v24 = v21;
      }
      if (a5 && v19 != v10 && (v7[2] != 32 || (unsigned int v19 = v7 + 3, v7 + 3 == v10)) || v18 == -1 || v24 == -1)
      {
LABEL_51:
        *((void *)this + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = *(void *)this;
        return;
      }
      char v25 = v24 | (16 * v18);
      unint64_t v26 = *((void *)this + 2);
      if ((unint64_t)v9 >= v26)
      {
        uint64_t v28 = v6;
        uint64_t v29 = a5;
        unint64_t v30 = *(void *)this;
        int v31 = &v9[-*(void *)this];
        unint64_t v32 = (unint64_t)(v31 + 1);
        if ((uint64_t)(v31 + 1) < 0) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v33 = v26 - v30;
        if (2 * v33 > v32) {
          unint64_t v32 = 2 * v33;
        }
        if (v33 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v34 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v34 = v32;
        }
        if (v34) {
          std::string::size_type v35 = (char *)operator new(v34);
        }
        else {
          std::string::size_type v35 = 0;
        }
        xpc_object_t v36 = &v31[(void)v35];
        std::string::size_type v37 = &v31[(void)v35];
        unsigned char *v37 = v25;
        uint64_t v27 = v37 + 1;
        if (v9 != (unsigned char *)v30)
        {
          termios v38 = &v9[~v30];
          do
          {
            char v39 = *--v9;
            (v38--)[(void)v35] = v39;
          }
          while (v9 != (unsigned char *)v30);
          char v9 = *(unsigned char **)this;
          xpc_object_t v36 = v35;
        }
        *(void *)this = v36;
        *((void *)this + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v27;
        *((void *)this + 2) = &v35[v34];
        a5 = v29;
        if (v9) {
          operator delete(v9);
        }
        uint64_t v6 = v28;
        uint64_t v11 = MEMORY[0x1E4F14390];
      }
      else
      {
        *char v9 = v25;
        uint64_t v27 = v9 + 1;
      }
      *((void *)this + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v27;
      char v9 = v27;
      uint64_t v7 = v19;
      if (v6) {
        goto LABEL_2;
      }
    }
  }
  else
  {
    do
    {
      unsigned int v12 = *v7;
      if ((v12 & 0x80000000) != 0) {
        int v13 = __maskrune(v12, 0x4000uLL);
      }
      else {
        int v13 = *(_DWORD *)(v11 + 4 * v12 + 60) & 0x4000;
      }
      if (!v13) {
        goto LABEL_10;
      }
      ++v7;
    }
    while (v7 != v10);
  }
}

void sub_1920A9078(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::Gestalt::getSysctlAsString@<X0>(const char *a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  size_t __n = 0;
  uint64_t result = sysctlbyname(a1, 0, &__n, 0, 0);
  if (!result && __n)
  {
    std::string::resize((std::string *)a2, __n, 0);
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v6 = (void *)a2;
    }
    else {
      uint64_t v6 = *(void **)a2;
    }
    return sysctlbyname(a1, v6, &__n, 0, 0);
  }
  return result;
}

void sub_1920A9134(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::Gestalt::isIPhone(ctu::Gestalt *this)
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu7Gestalt8isIPhoneEv_block_invoke;
  block[3] = &__block_descriptor_tmp_10;
  void block[4] = this;
  if (qword_1EB4653F8 != -1) {
    dispatch_once(&qword_1EB4653F8, block);
  }
  return _MergedGlobals_7;
}

void ___ZNK3ctu7Gestalt8isIPhoneEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = v11;
  (*(void (**)(void *__return_ptr))(**(void **)(a1 + 32) + 48))(v11);
  uint64_t v2 = v12;
  int v3 = (char)v12;
  uint64_t v4 = (void *)v11[0];
  if ((v12 & 0x80u) != 0)
  {
    uint64_t v2 = v11[1];
    uint64_t v1 = (void *)v11[0];
  }
  uint64_t v5 = (char *)v1 + v2;
  if (v2 >= 6)
  {
    uint64_t v6 = v1;
    do
    {
      uint64_t v7 = (char *)memchr(v6, 105, v2 - 5);
      if (!v7) {
        break;
      }
      if (*(_DWORD *)v7 == 1869107305 && *((_WORD *)v7 + 2) == 25966) {
        goto LABEL_12;
      }
      uint64_t v6 = v7 + 1;
      uint64_t v2 = v5 - (unsigned char *)v6;
    }
    while (v5 - (unsigned char *)v6 > 5);
  }
  uint64_t v7 = v5;
LABEL_12:
  BOOL v10 = v7 != v5 && v7 - (char *)v1 != -1;
  _MergedGlobals_7 = v10;
  if (v3 < 0) {
    operator delete(v4);
  }
}

uint64_t ctu::Gestalt::isIPad(ctu::Gestalt *this)
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu7Gestalt6isIPadEv_block_invoke;
  block[3] = &__block_descriptor_tmp_3;
  void block[4] = this;
  if (qword_1EB465400 != -1) {
    dispatch_once(&qword_1EB465400, block);
  }
  return byte_1EB4653F1;
}

void ___ZNK3ctu7Gestalt6isIPadEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = v10;
  (*(void (**)(void *__return_ptr))(**(void **)(a1 + 32) + 48))(v10);
  uint64_t v2 = v11;
  int v3 = (char)v11;
  uint64_t v4 = (void *)v10[0];
  if ((v11 & 0x80u) != 0)
  {
    uint64_t v2 = v10[1];
    uint64_t v1 = (void *)v10[0];
  }
  uint64_t v5 = (char *)v1 + v2;
  if (v2 >= 4)
  {
    uint64_t v6 = v1;
    do
    {
      uint64_t v7 = (char *)memchr(v6, 105, v2 - 3);
      if (!v7) {
        break;
      }
      if (*(_DWORD *)v7 == 1684099177) {
        goto LABEL_9;
      }
      uint64_t v6 = v7 + 1;
      uint64_t v2 = v5 - (unsigned char *)v6;
    }
    while (v5 - (unsigned char *)v6 > 3);
  }
  uint64_t v7 = v5;
LABEL_9:
  BOOL v9 = v7 != v5 && v7 - (char *)v1 != -1;
  byte_1EB4653F1 = v9;
  if (v3 < 0) {
    operator delete(v4);
  }
}

uint64_t ctu::Gestalt::isWatch(ctu::Gestalt *this)
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu7Gestalt7isWatchEv_block_invoke;
  block[3] = &__block_descriptor_tmp_5_0;
  void block[4] = this;
  if (qword_1EB465408 != -1) {
    dispatch_once(&qword_1EB465408, block);
  }
  return byte_1EB4653F2;
}

void ___ZNK3ctu7Gestalt7isWatchEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = v11;
  (*(void (**)(void *__return_ptr))(**(void **)(a1 + 32) + 48))(v11);
  uint64_t v2 = v12;
  int v3 = (char)v12;
  uint64_t v4 = (void *)v11[0];
  if ((v12 & 0x80u) != 0)
  {
    uint64_t v2 = v11[1];
    uint64_t v1 = (void *)v11[0];
  }
  uint64_t v5 = (char *)v1 + v2;
  if (v2 >= 5)
  {
    uint64_t v6 = v1;
    do
    {
      uint64_t v7 = (char *)memchr(v6, 87, v2 - 4);
      if (!v7) {
        break;
      }
      if (*(_DWORD *)v7 == 1668571479 && v7[4] == 104) {
        goto LABEL_12;
      }
      uint64_t v6 = v7 + 1;
      uint64_t v2 = v5 - (unsigned char *)v6;
    }
    while (v5 - (unsigned char *)v6 > 4);
  }
  uint64_t v7 = v5;
LABEL_12:
  BOOL v10 = v7 != v5 && v7 - (char *)v1 != -1;
  byte_1EB4653F2 = v10;
  if (v3 < 0) {
    operator delete(v4);
  }
}

uint64_t ctu::Gestalt::isMac(ctu::Gestalt *this)
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu7Gestalt5isMacEv_block_invoke;
  block[3] = &__block_descriptor_tmp_7;
  void block[4] = this;
  if (qword_1EB465410 != -1) {
    dispatch_once(&qword_1EB465410, block);
  }
  return byte_1EB4653F3;
}

void ___ZNK3ctu7Gestalt5isMacEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = v11;
  (*(void (**)(void *__return_ptr))(**(void **)(a1 + 32) + 48))(v11);
  uint64_t v2 = v12;
  int v3 = (char)v12;
  uint64_t v4 = (void *)v11[0];
  if ((v12 & 0x80u) != 0)
  {
    uint64_t v2 = v11[1];
    uint64_t v1 = (void *)v11[0];
  }
  uint64_t v5 = (char *)v1 + v2;
  if (v2 >= 3)
  {
    uint64_t v6 = v1;
    do
    {
      uint64_t v7 = (char *)memchr(v6, 77, v2 - 2);
      if (!v7) {
        break;
      }
      if (*(_WORD *)v7 == 24909 && v7[2] == 99) {
        goto LABEL_12;
      }
      uint64_t v6 = v7 + 1;
      uint64_t v2 = v5 - (unsigned char *)v6;
    }
    while (v5 - (unsigned char *)v6 > 2);
  }
  uint64_t v7 = v5;
LABEL_12:
  BOOL v10 = v7 != v5 && v7 - (char *)v1 != -1;
  byte_1EB4653F3 = v10;
  if (v3 < 0) {
    operator delete(v4);
  }
}

std::string *ctu::appendLabelIfBitSet(std::string *result, void *a2, char *__s, uint64_t a4, char *a5)
{
  if ((*a2 & a4) != 0)
  {
    uint64_t v7 = result;
    *a2 &= ~a4;
    std::string::size_type size = HIBYTE(result->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) != 0) {
      std::string::size_type size = result->__r_.__value_.__l.__size_;
    }
    if (__s && size)
    {
      size_t v9 = strlen(__s);
      std::string::append(v7, __s, v9);
    }
    size_t v10 = strlen(a5);
    return std::string::append(v7, a5, v10);
  }
  return result;
}

{
  std::string *v7;
  std::string::size_type size;
  size_t v9;
  size_t v10;
  uint64_t vars8;

  if ((*a2 & a4) != 0)
  {
    uint64_t v7 = result;
    *a2 &= ~a4;
    std::string::size_type size = HIBYTE(result->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) != 0) {
      std::string::size_type size = result->__r_.__value_.__l.__size_;
    }
    if (__s && size)
    {
      size_t v9 = strlen(__s);
      std::string::append(v7, __s, v9);
    }
    size_t v10 = strlen(a5);
    return std::string::append(v7, a5, v10);
  }
  return result;
}

void ctu::appendLeftoverBits(std::string *a1, ctu *this, char *a3)
{
  unsigned __int8 v12 = this;
  if (this)
  {
    ctu::hex((unint64_t)this, (unint64_t)&v9);
    uint64_t v6 = std::string::insert(&v9, 0, "0x", 2uLL);
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    int64_t v11 = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    if (v11 >= 0) {
      uint64_t v8 = (char *)__p;
    }
    else {
      uint64_t v8 = (char *)__p[0];
    }
    ctu::appendLabelIfBitSet(a1, &v12, a3, (uint64_t)this, v8);
    if (SHIBYTE(v11) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v9.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1920A996C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void xpc::get_subpath(xpc_object_t *a1@<X0>, uint64_t a2@<X1>, xpc_object_t *a3@<X8>)
{
  memset(v23, 170, sizeof(v23));
  char v5 = *(unsigned char *)(a2 + 23);
  if (v5 >= 0) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = *(void *)a2;
  }
  if (v5 >= 0) {
    unint64_t v7 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    unint64_t v7 = *(void *)(a2 + 8);
  }
  ctu::split_any(v6, v7, ".", 1, v23);
  xpc_object_t v8 = *a1;
  *a3 = *a1;
  if (v8)
  {
    xpc_retain(v8);
  }
  else
  {
    xpc_object_t v8 = xpc_null_create();
    *a3 = v8;
  }
  std::string v9 = v23[0];
  size_t v10 = v23[1];
  if (v23[0] == v23[1]) {
    goto LABEL_48;
  }
  uint64_t v11 = MEMORY[0x1E4F14590];
  uint64_t v12 = MEMORY[0x1E4F14568];
  while (1)
  {
    uint64_t v13 = MEMORY[0x192FEE1B0](v8);
    if (v13 == v11)
    {
      xpc_object_t object = v8;
      if (v8 && MEMORY[0x192FEE1B0](v8) == v11) {
        xpc_retain(v8);
      }
      else {
        xpc_object_t object = xpc_null_create();
      }
      if (*(void *)v9)
      {
        std::string::basic_string[abi:ne180100](&__p, *(void **)v9, *((void *)v9 + 1));
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::__split_buffer<std::string>::pointer p_p = &__p;
        }
        else {
          std::__split_buffer<std::string>::pointer p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
      }
      else
      {
        memset(&__p, 0, sizeof(__p));
        std::__split_buffer<std::string>::pointer p_p = &__p;
      }
      v20[0] = &object;
      v20[1] = p_p;
      xpc::dict::object_proxy::operator xpc::object((uint64_t)v20, &v21);
      xpc_object_t v17 = v21;
      *a3 = v21;
      xpc_object_t v21 = v8;
      xpc_release(v8);
      xpc_object_t v21 = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      xpc_release(object);
      goto LABEL_42;
    }
    if (v13 != v12) {
      break;
    }
    if (v8 && MEMORY[0x192FEE1B0](v8) == v12)
    {
      xpc_retain(v8);
      xpc_object_t v14 = v8;
    }
    else
    {
      xpc_object_t v14 = xpc_null_create();
    }
    if (*(void *)v9) {
      std::string::basic_string[abi:ne180100](&__p, *(void **)v9, *((void *)v9 + 1));
    }
    else {
      memset(&__p, 0, sizeof(__p));
    }
    unint64_t v15 = std::stoul(&__p, 0, 10);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (MEMORY[0x192FEE1B0](v14) == v12 && v15 < xpc_array_get_count(v14))
    {
      xpc_object_t value = xpc_array_get_value(v14, v15);
      xpc_object_t v17 = value;
      if (value) {
        xpc_retain(value);
      }
      else {
        xpc_object_t v17 = xpc_null_create();
      }
      *a3 = v17;
      xpc_release(v8);
    }
    else
    {
      xpc_object_t v17 = xpc_null_create();
      *a3 = v17;
      xpc_release(v8);
    }
    xpc_release(v14);
LABEL_42:
    v9 += 16;
    xpc_object_t v8 = v17;
    if (v9 == v10) {
      goto LABEL_47;
    }
  }
  *a3 = xpc_null_create();
  xpc_release(v8);
LABEL_47:
  std::string v9 = v23[0];
LABEL_48:
  if (v9)
  {
    v23[1] = v9;
    operator delete(v9);
  }
}

void sub_1920A9C9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, xpc_object_t object, void *__p, uint64_t a20)
{
  xpc_release(v21);
  xpc_release(*v20);
  *int v20 = 0;
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ctu::StagedLogger::~StagedLogger(ctu::StagedLogger *this)
{
  uint64_t v2 = (ctu::StagedLogger *)((char *)this + 64);
  if (*((void *)this + 11)) {
    goto LABEL_6;
  }
  if (*((char *)this + 87) < 0)
  {
    if (!*((void *)this + 9)) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (*((unsigned char *)this + 87)) {
LABEL_6:
  }
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog((uint64_t)this, *((unsigned char *)this + 120), (ctu::StagedLogger *)((char *)this + 64));
LABEL_7:
  ctu::LogMessageBuffer::~LogMessageBuffer(v2);

  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase(this);
}

long long *ctu::StagedLogger::forceLog(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v5 = *(unsigned __int8 *)(a1 + 120);
  if (a2 > v5) {
    LOBYTE(v5) = a2;
  }
  *(unsigned char *)(a1 + 120) = v5;
  appended = (std::string *)(a1 + 64);
  if (!*(void *)(a1 + 88))
  {
    if (*(char *)(a1 + 87) < 0)
    {
      if (!*(void *)(a1 + 72)) {
        goto LABEL_13;
      }
    }
    else if (!*(unsigned char *)(a1 + 87))
    {
      goto LABEL_13;
    }
  }
  if (*(void *)(a3 + 24)) {
    goto LABEL_12;
  }
  uint64_t v7 = *(unsigned __int8 *)(a3 + 23);
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a3 + 8);
  }
  if (v7) {
LABEL_12:
  }
    appended = ctu::LogMessageBuffer::appendChar(appended, 10);
LABEL_13:

  return ctu::LogMessageBuffer::merge((uint64_t)appended, a3);
}

void ctu::AssertionRestResourceState::createNotifyWithState(uint64_t a1@<X0>, unsigned int a2@<W1>, xpc_object_t *a3@<X8>)
{
  v3[0] = *(_DWORD *)(a1 + 16);
  v3[1] = a2;
  ctu::rest::write_rest_value(v3, a3);
}

void ctu::AssertionRestResourceState::createNotifyForProvider(ctu::AssertionRestResourceState *this@<X0>, xpc_object_t *a2@<X8>)
{
  v7[0] = *((_DWORD *)this + 4);
  uint64_t v2 = *((void *)this + 4);
  if (v2)
  {
    uint64_t v3 = 16 * v2;
    uint64_t v4 = *((void *)this + 3) + 8;
    while (!*(void *)v4 || *(void *)(*(void *)v4 + 8) == -1)
    {
      v4 += 16;
      v3 -= 16;
      if (!v3) {
        goto LABEL_6;
      }
    }
    LODWORD(v5) = 1;
  }
  else
  {
LABEL_6:
    uint64_t v5 = *((void *)this + 7);
    if (v5)
    {
      v5 *= 16;
      uint64_t v6 = *((void *)this + 6) + 8;
      while (!*(void *)v6 || *(void *)(*(void *)v6 + 8) == -1)
      {
        v6 += 16;
        v5 -= 16;
        if (!v5) {
          goto LABEL_14;
        }
      }
      LODWORD(v5) = 2;
    }
  }
LABEL_14:
  v7[1] = v5;
  ctu::rest::write_rest_value(v7, a2);
}

void ctu::AssertionRestResourceState::dumpState(ctu::AssertionRestResourceState *this@<X0>, void *a2@<X8>)
{
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x192FEE1B0](v5) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  xpc_object_t v22 = xpc_int64_create(*((unsigned int *)this + 4));
  if (!v22) {
    xpc_object_t v22 = xpc_null_create();
  }
  int v20 = a2;
  xpc_object_t v21 = "generation";
  xpc::dict::object_proxy::operator=((uint64_t)&v20, &v22, &v23);
  xpc_release(v23);
  xpc_object_t v23 = 0;
  xpc_release(v22);
  xpc_object_t v22 = 0;
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v7)
  {
    xpc_object_t v8 = std::__shared_weak_count::lock(v7);
    if (v8)
    {
      uint64_t v9 = *(void *)this;
      if (*(void *)this)
      {
        size_t v10 = (const char *)(v9 + 8);
        if (*(char *)(v9 + 31) < 0) {
          size_t v10 = *(const char **)v10;
        }
        xpc_object_t v18 = xpc_string_create(v10);
        if (!v18) {
          xpc_object_t v18 = xpc_null_create();
        }
        int v20 = a2;
        xpc_object_t v21 = "provider";
        xpc::dict::object_proxy::operator=((uint64_t)&v20, &v18, &object);
        xpc_release(object);
        xpc_object_t object = 0;
        xpc_release(v18);
        xpc_object_t v18 = 0;
        goto LABEL_21;
      }
    }
  }
  else
  {
    xpc_object_t v8 = 0;
  }
  int v20 = a2;
  xpc_object_t v21 = "provider";
  xpc::dict::object_proxy::operator=((uint64_t)&v20, &v17);
  xpc_release(v17);
  xpc_object_t v17 = 0;
  if (v8) {
LABEL_21:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  ctu::AssertionRestResourceState::dumpState(void)const::$_0::operator()(&v15, (void *)this + 3);
  int v20 = a2;
  xpc_object_t v21 = "waiting";
  xpc::dict::object_proxy::operator=((uint64_t)&v20, &v15, &v16);
  xpc_release(v16);
  xpc_object_t v16 = 0;
  xpc_release(v15);
  xpc_object_t v15 = 0;
  ctu::AssertionRestResourceState::dumpState(void)const::$_0::operator()(&v13, (void *)this + 6);
  int v20 = a2;
  xpc_object_t v21 = "granted";
  xpc::dict::object_proxy::operator=((uint64_t)&v20, &v13, &v14);
  xpc_release(v14);
  xpc_object_t v14 = 0;
  xpc_release(v13);
  xpc_object_t v13 = 0;
  ctu::AssertionRestResourceState::dumpState(void)const::$_0::operator()(&v11, (void *)this + 9);
  int v20 = a2;
  xpc_object_t v21 = "revoked";
  xpc::dict::object_proxy::operator=((uint64_t)&v20, &v11, &v12);
  xpc_release(v12);
  xpc_object_t v12 = 0;
  xpc_release(v11);
}

void sub_1920AA1D8(_Unwind_Exception *a1)
{
  xpc::dict::~dict(v1);
  _Unwind_Resume(a1);
}

void *ctu::AssertionRestResourceState::dumpState(void)const::$_0::operator()(void *a1, void *a2)
{
  void v8[4] = *MEMORY[0x1E4F143B8];
  *a1 = 0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_array_create(0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    *a1 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a1 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x192FEE1B0](v5) != MEMORY[0x1E4F14568])
  {
    xpc_object_t v6 = xpc_null_create();
LABEL_8:
    *a1 = v6;
    goto LABEL_9;
  }
  xpc_retain(v5);
LABEL_9:
  xpc_release(v5);
  v8[0] = &unk_1EE2F85B0;
  v8[1] = a1;
  void v8[3] = v8;
  ctu::rest::WatchableRestResourceHelper::map(a2, (uint64_t)v8);
  return std::__function::__value_func<void ()(ctu::RestResourceConnection const&)>::~__value_func[abi:ne180100](v8);
}

void sub_1920AA2F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t ctu::AssertionRestResource::AssertionRestResource(uint64_t this)
{
  *(void *)this = &unk_1EE2F6EB8;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(unsigned char *)(this + 32) = 0;
  return this;
}

{
  *(void *)this = &unk_1EE2F6EB8;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(unsigned char *)(this + 32) = 0;
  return this;
}

uint64_t ctu::AssertionRestResource::AssertionRestResource(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EE2F6EB8;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(unsigned char *)(result + 32) = 1;
  return result;
}

{
  *(void *)uint64_t result = &unk_1EE2F6EB8;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(unsigned char *)(result + 32) = 1;
  return result;
}

void ctu::AssertionRestResource::~AssertionRestResource(ctu::AssertionRestResource *this)
{
  *(void *)this = &unk_1EE2F6EB8;
  boost::container::vector<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::AssertionRestResourceState>>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::AssertionRestResourceState>>>,void>::~vector((void *)this + 1);
}

{
  *(void *)this = &unk_1EE2F6EB8;
  boost::container::vector<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::AssertionRestResourceState>>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::AssertionRestResourceState>>>,void>::~vector((void *)this + 1);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EE2F6EB8;
  boost::container::vector<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::AssertionRestResourceState>>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::AssertionRestResourceState>>>,void>::~vector((void *)this + 1);

  operator delete(this);
}

uint64_t ctu::AssertionRestResource::handleRestMessage_GET(ctu::AssertionRestResource *this, ctu::RestResourceContext *a2, const ctu::PathView *a3)
{
  memset(v11, 170, sizeof(v11));
  long long v5 = *((_OWORD *)a3 + 1);
  v10[0] = *(_OWORD *)a3;
  v10[1] = v5;
  switch(LODWORD(v11[0]))
  {
    case 1:
      ctu::AssertionRestResource::handleMessage_Root_GET(this, a2);
      break;
    case 2:
      ctu::AssertionRestResource::handleMessage_DumpState_GET(this, a2);
      break;
    case 3:
      ctu::AssertionRestResource::handleMessage_Resource_GET((uint64_t)v6, (uint64_t)a2);
      break;
    case 4:
      ctu::AssertionRestResource::handleMessage_Resource_Granted_GET((uint64_t)this, (uint64_t)a2, v11[1], (size_t)v11[2]);
      break;
    case 5:
      ctu::AssertionRestResource::handleMessage_Resource_Revoked_GET((uint64_t)this, (uint64_t)a2, v11[1], (size_t)v11[2]);
      break;
    case 6:
      ctu::AssertionRestResource::handleMessage_Resource_Waiting_GET((uint64_t)this, (uint64_t)a2, v11[1], (size_t)v11[2]);
      break;
    case 7:
      ctu::AssertionRestResource::handleMessage_Resource_Provider_GET((uint64_t)this, (uint64_t)a2, v7, v11[1], (size_t)v11[2]);
      break;
    default:
      xpc_object_t object = xpc_null_create();
      (*(void (**)(ctu::RestResourceContext *, xpc_object_t *))(*(void *)a2 + 32))(a2, &object);
      xpc_release(object);
      break;
  }
  return 1;
}

void sub_1920AA5F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

uint64_t ctu::AssertionRestResource::handleMessage_Root_GET(ctu::AssertionRestResource *this, ctu::RestResourceContext *a2)
{
  ctu::AssertionRestResource::getResourceArray(this, &object);
  xpc_object_t v5 = object;
  if (object) {
    xpc_retain(object);
  }
  else {
    xpc_object_t v5 = xpc_null_create();
  }
  (*(void (**)(ctu::RestResourceContext *, xpc_object_t *))(*(void *)a2 + 32))(a2, &v5);
  xpc_release(v5);
  xpc_object_t v5 = 0;
  xpc_release(object);
  return 1;
}

void sub_1920AA6C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, xpc_object_t object)
{
}

uint64_t ctu::AssertionRestResource::handleMessage_DumpState_GET(ctu::AssertionRestResource *this, ctu::RestResourceContext *a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    xpc_object_t v15 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t v15 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x192FEE1B0](v5) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  xpc_object_t v15 = v6;
LABEL_9:
  xpc_release(v5);
  uint64_t v7 = *((void *)this + 2);
  if (v7)
  {
    xpc_object_t v8 = (void **)*((void *)this + 1);
    uint64_t v9 = 32 * v7;
    do
    {
      ctu::AssertionRestResourceState::dumpState((ctu::AssertionRestResourceState *)v8[3], &v13);
      size_t v10 = v8;
      if (*((char *)v8 + 23) < 0) {
        size_t v10 = *v8;
      }
      v12[0] = &v15;
      v12[1] = v10;
      xpc::dict::object_proxy::operator=((uint64_t)v12, &v13, &object);
      xpc_release(object);
      xpc_object_t object = 0;
      xpc_release(v13);
      xpc_object_t v13 = 0;
      v8 += 4;
      v9 -= 32;
    }
    while (v9);
  }
  v12[0] = v15;
  if (v15) {
    xpc_retain(v15);
  }
  else {
    v12[0] = xpc_null_create();
  }
  (*(void (**)(ctu::RestResourceContext *, xpc_object_t *))(*(void *)a2 + 32))(a2, v12);
  xpc_release(v12[0]);
  xpc_release(v15);
  return 1;
}

void sub_1920AA864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t a14)
{
}

uint64_t ctu::AssertionRestResource::handleMessage_Resource_GET(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (xpc_object_t *)xpc::array_creator::array_creator((xpc::array_creator *)&v11);
  xpc::array_creator::operator()<char const*>("grant", v3, &v6);
  xpc_release(v11);
  xpc::array_creator::operator()<char const*>("revoke", &v6, &v7);
  xpc::array_creator::operator()<char const*>("granted", &v7, &v8);
  xpc::array_creator::operator()<char const*>("revoked", &v8, &object);
  xpc::array_creator::operator()<char const*>("waiting", &object, &v10);
  xpc_object_t v4 = v10;
  xpc_object_t v10 = xpc_null_create();
  xpc_release(v10);
  xpc_object_t v10 = 0;
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v8);
  xpc_object_t v8 = 0;
  xpc_release(v7);
  xpc_object_t v7 = 0;
  xpc_release(v6);
  xpc_object_t v11 = v4;
  if (v4) {
    xpc_retain(v4);
  }
  else {
    xpc_object_t v11 = xpc_null_create();
  }
  (*(void (**)(uint64_t, xpc_object_t *))(*(void *)a2 + 32))(a2, &v11);
  xpc_release(v11);
  xpc_release(v4);
  return 1;
}

void sub_1920AA9E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, xpc_object_t a10, xpc_object_t a11, xpc_object_t object)
{
  xpc_release(*(xpc_object_t *)(v13 - 24));
  xpc_release(v12);
  _Unwind_Resume(a1);
}

uint64_t ctu::AssertionRestResource::handleMessage_Resource_Granted_GET(uint64_t a1, uint64_t a2, void *a3, size_t a4)
{
  void v18[4] = *MEMORY[0x1E4F143B8];
  xpc_object_t v8 = xpc_array_create(0, 0);
  xpc_object_t v9 = v8;
  if (v8)
  {
    xpc_object_t object = v8;
  }
  else
  {
    xpc_object_t v9 = xpc_null_create();
    xpc_object_t object = v9;
    if (!v9)
    {
      xpc_object_t v10 = xpc_null_create();
      xpc_object_t v9 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x192FEE1B0](v9) == MEMORY[0x1E4F14568])
  {
    xpc_retain(v9);
    goto LABEL_9;
  }
  xpc_object_t v10 = xpc_null_create();
LABEL_8:
  xpc_object_t object = v10;
LABEL_9:
  xpc_release(v9);
  if (a3)
  {
    std::string::basic_string[abi:ne180100](__p, a3, a4);
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v16 = 0;
  }
  boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>>::find((uint64_t)&v17, (void ***)(a1 + 8), __p);
  uint64_t v11 = v17;
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  if (v11 != *(void *)(a1 + 8) + 32 * *(void *)(a1 + 16))
  {
    uint64_t v12 = *(void *)(v11 + 24);
    v18[0] = &unk_1EE2F44E8;
    v18[1] = &object;
    v18[3] = v18;
    ctu::rest::WatchableRestResourceHelper::map((void *)(v12 + 48), (uint64_t)v18);
    std::__function::__value_func<void ()(ctu::RestResourceConnection const&)>::~__value_func[abi:ne180100](v18);
  }
  __p[0] = object;
  if (object) {
    xpc_retain(object);
  }
  else {
    __p[0] = xpc_null_create();
  }
  (*(void (**)(uint64_t, void **))(*(void *)a2 + 32))(a2, __p);
  xpc_release(__p[0]);
  xpc_release(object);
  return 1;
}

void sub_1920AAC64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, xpc_object_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t ctu::AssertionRestResource::handleMessage_Resource_Revoked_GET(uint64_t a1, uint64_t a2, void *a3, size_t a4)
{
  void v18[4] = *MEMORY[0x1E4F143B8];
  xpc_object_t v8 = xpc_array_create(0, 0);
  xpc_object_t v9 = v8;
  if (v8)
  {
    xpc_object_t object = v8;
  }
  else
  {
    xpc_object_t v9 = xpc_null_create();
    xpc_object_t object = v9;
    if (!v9)
    {
      xpc_object_t v10 = xpc_null_create();
      xpc_object_t v9 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x192FEE1B0](v9) == MEMORY[0x1E4F14568])
  {
    xpc_retain(v9);
    goto LABEL_9;
  }
  xpc_object_t v10 = xpc_null_create();
LABEL_8:
  xpc_object_t object = v10;
LABEL_9:
  xpc_release(v9);
  if (a3)
  {
    std::string::basic_string[abi:ne180100](__p, a3, a4);
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v16 = 0;
  }
  boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>>::find((uint64_t)&v17, (void ***)(a1 + 8), __p);
  uint64_t v11 = v17;
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  if (v11 != *(void *)(a1 + 8) + 32 * *(void *)(a1 + 16))
  {
    uint64_t v12 = *(void *)(v11 + 24);
    v18[0] = &unk_1EE2F4540;
    v18[1] = &object;
    v18[3] = v18;
    ctu::rest::WatchableRestResourceHelper::map((void *)(v12 + 72), (uint64_t)v18);
    std::__function::__value_func<void ()(ctu::RestResourceConnection const&)>::~__value_func[abi:ne180100](v18);
  }
  __p[0] = object;
  if (object) {
    xpc_retain(object);
  }
  else {
    __p[0] = xpc_null_create();
  }
  (*(void (**)(uint64_t, void **))(*(void *)a2 + 32))(a2, __p);
  xpc_release(__p[0]);
  xpc_release(object);
  return 1;
}

void sub_1920AAE98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, xpc_object_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t ctu::AssertionRestResource::handleMessage_Resource_Waiting_GET(uint64_t a1, uint64_t a2, void *a3, size_t a4)
{
  void v18[4] = *MEMORY[0x1E4F143B8];
  xpc_object_t v8 = xpc_array_create(0, 0);
  xpc_object_t v9 = v8;
  if (v8)
  {
    xpc_object_t object = v8;
  }
  else
  {
    xpc_object_t v9 = xpc_null_create();
    xpc_object_t object = v9;
    if (!v9)
    {
      xpc_object_t v10 = xpc_null_create();
      xpc_object_t v9 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x192FEE1B0](v9) == MEMORY[0x1E4F14568])
  {
    xpc_retain(v9);
    goto LABEL_9;
  }
  xpc_object_t v10 = xpc_null_create();
LABEL_8:
  xpc_object_t object = v10;
LABEL_9:
  xpc_release(v9);
  if (a3)
  {
    std::string::basic_string[abi:ne180100](__p, a3, a4);
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v16 = 0;
  }
  boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>>::find((uint64_t)&v17, (void ***)(a1 + 8), __p);
  uint64_t v11 = v17;
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  if (v11 != *(void *)(a1 + 8) + 32 * *(void *)(a1 + 16))
  {
    uint64_t v12 = *(void *)(v11 + 24);
    v18[0] = &unk_1EE2F4598;
    v18[1] = &object;
    v18[3] = v18;
    ctu::rest::WatchableRestResourceHelper::map((void *)(v12 + 24), (uint64_t)v18);
    std::__function::__value_func<void ()(ctu::RestResourceConnection const&)>::~__value_func[abi:ne180100](v18);
  }
  __p[0] = object;
  if (object) {
    xpc_retain(object);
  }
  else {
    __p[0] = xpc_null_create();
  }
  (*(void (**)(uint64_t, void **))(*(void *)a2 + 32))(a2, __p);
  xpc_release(__p[0]);
  xpc_release(object);
  return 1;
}

void sub_1920AB0CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, xpc_object_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t ctu::AssertionRestResource::handleMessage_Resource_Provider_GET(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, size_t a5)
{
  xpc_object_t v9 = xpc_array_create(0, 0);
  if (v9 || (xpc_object_t v9 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x192FEE1B0](v9) == MEMORY[0x1E4F14568])
    {
      xpc_retain(v9);
      xpc_object_t v10 = v9;
    }
    else
    {
      xpc_object_t v10 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v10 = xpc_null_create();
    xpc_object_t v9 = 0;
  }
  xpc_release(v9);
  if (a4)
  {
    std::string::basic_string[abi:ne180100](__p, a4, a5);
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v21 = 0;
  }
  boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>>::find((uint64_t)&v22, (void ***)(a1 + 8), __p);
  uint64_t v11 = v22;
  if (SHIBYTE(v21) < 0) {
    operator delete(__p[0]);
  }
  if (v11 != *(void *)(a1 + 8) + 32 * *(void *)(a1 + 16))
  {
    uint64_t v12 = *(uint64_t **)(v11 + 24);
    uint64_t v13 = (std::__shared_weak_count *)v12[1];
    if (v13)
    {
      xpc_object_t v14 = std::__shared_weak_count::lock(v13);
      if (v14)
      {
        xpc_object_t v15 = v14;
        uint64_t v16 = *v12;
        if (*v12)
        {
          uint64_t v17 = (const char *)(v16 + 8);
          if (*(char *)(v16 + 31) < 0) {
            uint64_t v17 = *(const char **)v17;
          }
          xpc_object_t v18 = xpc_string_create(v17);
          if (!v18) {
            xpc_object_t v18 = xpc_null_create();
          }
          xpc_array_append_value(v10, v18);
          xpc_release(v18);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
    }
  }
  __p[0] = v10;
  if (v10) {
    xpc_retain(v10);
  }
  else {
    __p[0] = xpc_null_create();
  }
  (*(void (**)(uint64_t, void **))(*(void *)a2 + 32))(a2, __p);
  xpc_release(__p[0]);
  xpc_release(v10);
  return 1;
}

void sub_1920AB2F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
  xpc_release(v11);
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  xpc_release(v9);
  _Unwind_Resume(a1);
}

uint64_t ctu::AssertionRestResource::handleRestMessage_SET(void ***this, ctu::RestResourceContext *a2, const ctu::PathView *a3)
{
  memset(v9, 170, sizeof(v9));
  long long v6 = *((_OWORD *)a3 + 1);
  v8[0] = *(_OWORD *)a3;
  v8[1] = v6;
  if (LODWORD(v9[0]) == 5)
  {
    ctu::AssertionRestResource::handleMessage_Resource_Revoked_SET(this, a2, a3, v9[1], (size_t)v9[2]);
    return 1;
  }
  if (LODWORD(v9[0]) == 4)
  {
    ctu::AssertionRestResource::handleMessage_Resource_Granted_SET((uint64_t)this, a2, a3, v9[1], (size_t)v9[2]);
    return 1;
  }
  return 0;
}

uint64_t ctu::AssertionRestResource::handleMessage_Resource_Granted_SET(uint64_t a1, ctu::RestResourceContext *a2, _OWORD *a3, void *a4, size_t a5)
{
  xpc_object_t v8 = (void ***)(a1 + 8);
  if (a4)
  {
    std::string::basic_string[abi:ne180100](__p, a4, a5);
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    *(void *)&long long v33 = 0;
  }
  boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>>::find((uint64_t)&v25, v8, __p);
  xpc_object_t v9 = v25;
  if (SBYTE7(v33) < 0) {
    operator delete(__p[0]);
  }
  if (v9 != (void **)(*(void *)(a1 + 8) + 32 * *(void *)(a1 + 16)))
  {
    (*(void (**)(void **__return_ptr, ctu::RestResourceContext *))(*(void *)a2 + 24))(__p, a2);
    int v10 = xpc::dyn_cast_or_default(__p, 0);
    xpc_release(__p[0]);
    if (*((_DWORD *)v9[3] + 4) == v10)
    {
      long long v11 = a3[1];
      *(_OWORD *)std::string __p = *a3;
      long long v33 = v11;
      ctu::PathView::advance((uint64_t)__p, 1);
      xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      LODWORD(v25) = *((_DWORD *)v9[3] + 4);
      HIDWORD(v25) = 2;
      ctu::rest::write_rest_value((unsigned int *)&v25, &object);
      uint64_t v12 = (char *)v9[3];
      ctu::rest::WatchableRestResourceHelper::removeWatchers((ctu::rest::WatchableRestResourceHelper *)(v12 + 24), &v29);
      uint64_t v13 = v29;
      uint64_t v14 = v30;
      if (v29 != v30)
      {
        xpc_object_t v15 = (uint64_t *)(v12 + 48);
        do
        {
          uint64_t v27 = *(const ctu::RestResourceConnection **)v13;
          uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
          uint64_t v28 = v16;
          if (v16) {
            atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          char v25 = (void **)0xAAAAAAAAAAAAAAAALL;
          unint64_t v26 = 0xAAAAAAAAAAAAAAAALL;
          boost::container::dtl::flat_tree<std::weak_ptr<ctu::RestResourceConnection>,boost::move_detail::identity<std::weak_ptr<ctu::RestResourceConnection>>,std::owner_less<std::weak_ptr<ctu::RestResourceConnection>>,void>::emplace_unique<std::shared_ptr<ctu::RestResourceConnection>>(v15, (unint64_t *)&v27, (__n128 **)&v25);
          int v17 = v26;
          if (v28) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v28);
          }
          if (v17)
          {
            if (*((void *)&v33 + 1))
            {
              xpc_object_t v18 = __p[0];
              if ((unint64_t)v33 - (unint64_t)__p[0] > 1)
              {
                if ((void *)(v33 - (unint64_t)__p[0] - 1) >= __p[1]) {
                  unsigned int v19 = __p[1];
                }
                else {
                  unsigned int v19 = (void *)(v33 - (unint64_t)__p[0] - 1);
                }
              }
              else if ((void *)(v33 - (unint64_t)__p[0]) >= __p[1])
              {
                unsigned int v19 = __p[1];
              }
              else
              {
                unsigned int v19 = (void *)(v33 - (unint64_t)__p[0]);
              }
            }
            else
            {
              xpc_object_t v18 = __p[0];
              unsigned int v19 = __p[1];
            }
            int v20 = (ctu::AssertionRestResource *)ctu::PathView::PathView(&v25, (uint64_t)v18, (unint64_t)v19);
            ctu::AssertionRestResource::notifyWatcherWithState(v20, a2, (const ctu::PathView *)&v25, *(const ctu::RestResourceConnection **)v13, (const xpc::object *)&object);
          }
          v13 += 16;
        }
        while (v13 != v14);
      }
      char v25 = (void **)&v29;
      std::vector<std::shared_ptr<ctu::RestResourceConnection>>::__destroy_vector::operator()[abi:ne180100](&v25);
      if (*((void *)&v33 + 1))
      {
        uint64_t v21 = __p[0];
        if ((unint64_t)v33 - (unint64_t)__p[0] > 1)
        {
          if ((void *)(v33 - (unint64_t)__p[0] - 1) >= __p[1]) {
            uint64_t v22 = __p[1];
          }
          else {
            uint64_t v22 = (void *)(v33 - (unint64_t)__p[0] - 1);
          }
        }
        else if ((void *)(v33 - (unint64_t)__p[0]) >= __p[1])
        {
          uint64_t v22 = __p[1];
        }
        else
        {
          uint64_t v22 = (void *)(v33 - (unint64_t)__p[0]);
        }
      }
      else
      {
        uint64_t v21 = __p[0];
        uint64_t v22 = __p[1];
      }
      xpc_object_t v23 = (ctu::AssertionRestResource *)ctu::PathView::PathView(&v25, (uint64_t)v21, (unint64_t)v22);
      ctu::AssertionRestResource::notifyProvider(v23, a2, (const ctu::PathView *)&v25, (const ctu::AssertionRestResourceState *)v9[3]);
      xpc_release(object);
    }
  }
  return 1;
}

void sub_1920AB67C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, xpc_object_t object, xpc_object_t a19)
{
}

uint64_t ctu::AssertionRestResource::handleMessage_Resource_Revoked_SET(void ***a1, ctu::RestResourceContext *a2, _OWORD *a3, void *a4, size_t a5)
{
  xpc_object_t v8 = a1 + 1;
  if (a4)
  {
    std::string::basic_string[abi:ne180100](__p, a4, a5);
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    *(void *)&long long v17 = 0;
  }
  boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>>::find((uint64_t)v15, v8, __p);
  uint64_t v9 = v15[0];
  if (SBYTE7(v17) < 0) {
    operator delete(__p[0]);
  }
  if ((void **)v9 != &a1[1][4 * (void)a1[2]])
  {
    (*(void (**)(void **__return_ptr, ctu::RestResourceContext *))(*(void *)a2 + 24))(__p, a2);
    int v10 = xpc::dyn_cast_or_default(__p, 0);
    xpc_release(__p[0]);
    if (*(_DWORD *)(*(void *)(v9 + 24) + 16) == v10)
    {
      long long v11 = a3[1];
      *(_OWORD *)std::string __p = *a3;
      long long v17 = v11;
      ctu::PathView::advance((uint64_t)__p, 1);
      if (*((void *)&v17 + 1))
      {
        uint64_t v12 = __p[0];
        if ((unint64_t)v17 - (unint64_t)__p[0] > 1)
        {
          if ((void *)(v17 - (unint64_t)__p[0] - 1) >= __p[1]) {
            uint64_t v13 = __p[1];
          }
          else {
            uint64_t v13 = (void *)(v17 - (unint64_t)__p[0] - 1);
          }
        }
        else if ((void *)(v17 - (unint64_t)__p[0]) >= __p[1])
        {
          uint64_t v13 = __p[1];
        }
        else
        {
          uint64_t v13 = (void *)(v17 - (unint64_t)__p[0]);
        }
      }
      else
      {
        uint64_t v12 = __p[0];
        uint64_t v13 = __p[1];
      }
      ctu::PathView::PathView(v15, (uint64_t)v12, (unint64_t)v13);
      ctu::AssertionRestResource::startNewGeneration((ctu::AssertionRestResource *)a1, a2, (const ctu::PathView *)v15, *(ctu::AssertionRestResourceState **)(v9 + 24));
    }
  }
  return 1;
}

void sub_1920AB840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t object)
{
}

void ctu::AssertionRestResource::notifyWatcherWithState(ctu::AssertionRestResource *this, ctu::RestResourceContext *a2, const ctu::PathView *a3, const ctu::RestResourceConnection *a4, const xpc::object *a5)
{
  xpc_object_t v14 = xpc_null_create();
  if (*(void *)a3)
  {
    std::string::basic_string[abi:ne180100](string, *(void **)a3, *((void *)a3 + 1));
    if (v12 >= 0) {
      uint64_t v9 = string;
    }
    else {
      uint64_t v9 = *(char **)string;
    }
  }
  else
  {
    *(void *)__n128 string = 0;
    uint64_t v11 = 0;
    uint64_t v9 = string;
    uint64_t v12 = 0;
  }
  xpc_object_t object = xpc_string_create(v9);
  if (!object) {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(ctu::RestResourceContext *, const ctu::RestResourceConnection *, xpc_object_t *, xpc_object_t *, const xpc::object *))(*(void *)a2 + 48))(a2, a4, &v14, &object, a5);
  xpc_release(object);
  xpc_object_t object = 0;
  if (SHIBYTE(v12) < 0) {
    operator delete(*(void **)string);
  }
  xpc_release(v14);
}

void sub_1920AB948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, xpc_object_t a16, xpc_object_t object)
{
}

void ctu::AssertionRestResource::notifyProvider(ctu::AssertionRestResource *this, ctu::RestResourceContext *a2, const ctu::PathView *a3, const ctu::AssertionRestResourceState *a4)
{
  xpc_object_t v4 = (std::__shared_weak_count *)*((void *)a4 + 1);
  if (v4)
  {
    xpc_object_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(void *)a4;
      if (*(void *)a4)
      {
        uint64_t v11 = *(void **)a3;
        size_t v12 = *((void *)a3 + 1);
        memset(&__p, 170, sizeof(__p));
        if (v11) {
          std::string::basic_string[abi:ne180100](&__p, v11, v12);
        }
        else {
          memset(&__p, 0, sizeof(__p));
        }
        ctu::path_join_impl(&__p, "provider", 8uLL);
        xpc_object_t v16 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
        ctu::AssertionRestResourceState::createNotifyForProvider(a4, &v16);
        xpc_object_t v15 = xpc_null_create();
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::__split_buffer<std::string>::pointer p_p = &__p;
        }
        else {
          std::__split_buffer<std::string>::pointer p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        xpc_object_t object = xpc_string_create((const char *)p_p);
        if (!object) {
          xpc_object_t object = xpc_null_create();
        }
        (*(void (**)(ctu::RestResourceContext *, uint64_t, xpc_object_t *, xpc_object_t *, xpc_object_t *))(*(void *)a2 + 48))(a2, v10, &v15, &object, &v16);
        xpc_release(object);
        xpc_release(v15);
        xpc_release(v16);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
  }
}

void sub_1920ABAE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, xpc_object_t a10, xpc_object_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  _Unwind_Resume(a1);
}

void ctu::AssertionRestResource::startNewGeneration(ctu::AssertionRestResource *this, ctu::RestResourceContext *a2, const ctu::PathView *a3, ctu::AssertionRestResourceState *a4)
{
  v11[0] = a4;
  v11[1] = this;
  void v11[2] = a2;
  void v11[3] = a3;
  ctu::AssertionRestResource::startNewGeneration(ctu::RestResourceContext &,ctu::PathView const&,ctu::AssertionRestResourceState &)const::$_0::operator()(v11, (ctu::AssertionRestResourceState *)((char *)a4 + 48));
  if (!*((unsigned char *)this + 32)) {
    ctu::AssertionRestResource::startNewGeneration(ctu::RestResourceContext &,ctu::PathView const&,ctu::AssertionRestResourceState &)const::$_0::operator()(v11, (ctu::AssertionRestResourceState *)((char *)a4 + 24));
  }
  int v9 = *((_DWORD *)a4 + 4);
  if ((v9 + 1) > 1) {
    int v10 = v9 + 1;
  }
  else {
    int v10 = 1;
  }
  *((_DWORD *)a4 + 4) = v10;

  ctu::AssertionRestResource::notifyProvider(v8, a2, a3, a4);
}

uint64_t ctu::AssertionRestResource::handleRestMessage_POP(void ***this, ctu::RestResourceContext *a2, const ctu::PathView *a3)
{
  memset(v10, 170, sizeof(v10));
  long long v6 = *((_OWORD *)a3 + 1);
  v9[0] = *(_OWORD *)a3;
  v9[1] = v6;
  if (LODWORD(v10[0]) == 7)
  {
    ctu::AssertionRestResource::handleMessage_Resource_Provider_POP((uint64_t)this, (void (***)(void **__return_ptr, void))a2, v7, v10[1], (size_t)v10[2]);
    return 1;
  }
  if (LODWORD(v10[0]) == 3)
  {
    ctu::AssertionRestResource::handleMessage_Resource_POP(this, a2, a3, v10[1], (size_t)v10[2]);
    return 1;
  }
  return 0;
}

uint64_t ctu::AssertionRestResource::handleMessage_Resource_POP(void ***a1, ctu::RestResourceContext *a2, const ctu::PathView *a3, void *a4, size_t a5)
{
  xpc_object_t v8 = a1 + 1;
  if (a4)
  {
    std::string::basic_string[abi:ne180100](&__p, a4, a5);
  }
  else
  {
    std::string __p = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
  }
  boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>>::find((uint64_t)&v24, v8, &__p);
  uint64_t v9 = v24;
  if (SHIBYTE(v23) < 0) {
    operator delete(__p);
  }
  if ((void **)v9 != &a1[1][4 * (void)a1[2]])
  {
    (**(void (***)(void **__return_ptr, ctu::RestResourceContext *))a2)(&__p, a2);
    if (!__p)
    {
LABEL_25:
      if (v22) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      }
      return 1;
    }
    int v10 = ctu::rest::WatchableRestResourceHelper::removeWatcher((void *)(*(void *)(v9 + 24) + 48), &__p);
    uint64_t v11 = *(void **)(v9 + 24);
    if (v10)
    {
      uint64_t v12 = v11[7];
      if (v12)
      {
        uint64_t v13 = 16 * v12;
        uint64_t v14 = v11[6] + 8;
        while (!*(void *)v14 || *(void *)(*(void *)v14 + 8) == -1)
        {
          v14 += 16;
          v13 -= 16;
          if (!v13) {
            goto LABEL_21;
          }
        }
        goto LABEL_22;
      }
    }
    else
    {
      int v15 = ctu::rest::WatchableRestResourceHelper::removeWatcher(v11 + 3, &__p);
      uint64_t v11 = *(void **)(v9 + 24);
      if (!v15)
      {
LABEL_22:
        int v19 = 0;
LABEL_23:
        ctu::rest::WatchableRestResourceHelper::removeWatcher(v11 + 9, &__p);
        if (v19) {
          ctu::AssertionRestResource::startNewGeneration((ctu::AssertionRestResource *)a1, a2, a3, *(ctu::AssertionRestResourceState **)(v9 + 24));
        }
        goto LABEL_25;
      }
      uint64_t v16 = v11[4];
      if (v16)
      {
        uint64_t v17 = 16 * v16;
        uint64_t v18 = v11[3] + 8;
        while (!*(void *)v18 || *(void *)(*(void *)v18 + 8) == -1)
        {
          v18 += 16;
          v17 -= 16;
          if (!v17) {
            goto LABEL_21;
          }
        }
        goto LABEL_22;
      }
    }
LABEL_21:
    int v19 = 1;
    goto LABEL_23;
  }
  return 1;
}

void sub_1920ABE2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::AssertionRestResource::handleMessage_Resource_Provider_POP(uint64_t a1, void (***a2)(void **__return_ptr, void), uint64_t a3, void *a4, size_t a5)
{
  uint64_t v7 = (void ***)(a1 + 8);
  if (a4)
  {
    std::string::basic_string[abi:ne180100](&__p, a4, a5);
  }
  else
  {
    std::string __p = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
  }
  boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>>::find((uint64_t)&v18, v7, &__p);
  uint64_t v8 = v18;
  if (SHIBYTE(v17) < 0) {
    operator delete(__p);
  }
  if (v8 != *(void *)(a1 + 8) + 32 * *(void *)(a1 + 16))
  {
    uint64_t v9 = *(void *)(v8 + 24);
    (**a2)(&__p, a2);
    int v10 = *(std::__shared_weak_count **)(v9 + 8);
    uint64_t v11 = v16;
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    if (v11 == v10)
    {
      uint64_t v12 = *(void **)(v8 + 24);
      uint64_t v13 = (std::__shared_weak_count *)v12[1];
      void *v12 = 0;
      v12[1] = 0;
      if (v13) {
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  return 1;
}

uint64_t ctu::AssertionRestResource::handleRestMessage_PUSH(ctu::AssertionRestResource *this, ctu::RestResourceContext *a2, const ctu::PathView *a3)
{
  memset(v9, 170, sizeof(v9));
  long long v6 = *((_OWORD *)a3 + 1);
  v8[0] = *(_OWORD *)a3;
  v8[1] = v6;
  if (LODWORD(v9[0]) == 7)
  {
    ctu::AssertionRestResource::handleMessage_Resource_Provider_PUSH(this, a2, (long long *)a3, v9[1], (size_t)v9[2]);
    return 1;
  }
  if (LODWORD(v9[0]) == 3)
  {
    ctu::AssertionRestResource::handleMessage_Resource_PUSH((uint64_t)this, a2, a3, v9[1], (size_t)v9[2]);
    return 1;
  }
  return 0;
}

uint64_t ctu::AssertionRestResource::handleMessage_Resource_PUSH(uint64_t a1, ctu::RestResourceContext *a2, const ctu::PathView *a3, void *a4, size_t a5)
{
  (**(void (***)(ctu::RestResourceConnection **__return_ptr, ctu::RestResourceContext *))a2)(&v32, a2);
  if (v32)
  {
    if (a4)
    {
      std::string::basic_string[abi:ne180100](&__p, a4, a5);
    }
    else
    {
      std::string __p = 0;
      unint64_t v35 = 0;
      uint64_t v36 = 0;
    }
    boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>>::find((uint64_t)&v31, (void ***)(a1 + 8), &__p);
    if (SHIBYTE(v36) < 0)
    {
      operator delete(__p);
      if (a4) {
        goto LABEL_7;
      }
    }
    else if (a4)
    {
LABEL_7:
      std::string::basic_string[abi:ne180100](&__p, a4, a5);
      goto LABEL_10;
    }
    std::string __p = 0;
    unint64_t v35 = 0;
    uint64_t v36 = 0;
LABEL_10:
    ctu::AssertionRestResource::createIfNotPresent((void *)a1, (uint64_t)&__p, &v31);
    if (SHIBYTE(v36) < 0) {
      operator delete(__p);
    }
    uint64_t v10 = v31;
    uint64_t v11 = *(void **)(v31 + 24);
    uint64_t v12 = v11[7];
    if (v12)
    {
      uint64_t v13 = 16 * v12;
      uint64_t v14 = v11[6] + 8;
      while (!*(void *)v14 || *(void *)(*(void *)v14 + 8) == -1)
      {
        v14 += 16;
        v13 -= 16;
        if (!v13) {
          goto LABEL_17;
        }
      }
      if (!*(unsigned char *)(a1 + 32))
      {
        uint64_t v29 = v32;
        uint64_t v30 = v33;
        if (v33) {
          atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string __p = (void *)0xAAAAAAAAAAAAAAAALL;
        unint64_t v35 = 0xAAAAAAAAAAAAAAAALL;
        boost::container::dtl::flat_tree<std::weak_ptr<ctu::RestResourceConnection>,boost::move_detail::identity<std::weak_ptr<ctu::RestResourceConnection>>,std::owner_less<std::weak_ptr<ctu::RestResourceConnection>>,void>::emplace_unique<std::shared_ptr<ctu::RestResourceConnection>>(v11 + 6, (unint64_t *)&v29, (__n128 **)&__p);
        int v24 = v35;
        if (v30) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v30);
        }
        if (v24)
        {
          xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
          LODWORD(__p) = *(_DWORD *)(*(void *)(v10 + 24) + 16);
          HIDWORD(__p) = 2;
          ctu::rest::write_rest_value((unsigned int *)&__p, &object);
          ctu::AssertionRestResource::notifyWatcherWithState(v25, a2, a3, v32, (const xpc::object *)&object);
          xpc_release(object);
        }
LABEL_33:
        ctu::rest::WatchableRestResourceHelper::removeWatcher((void *)(*(void *)(v10 + 24) + 72), &v32);
        goto LABEL_34;
      }
      int v15 = 1;
    }
    else
    {
LABEL_17:
      int v15 = 0;
    }
    uint64_t v18 = v11[3];
    uint64_t v17 = v11[4];
    uint64_t v16 = v11 + 3;
    if (v17)
    {
      uint64_t v19 = 16 * v17;
      uint64_t v20 = v18 + 8;
      while (!*(void *)v20 || *(void *)(*(void *)v20 + 8) == -1)
      {
        v20 += 16;
        v19 -= 16;
        if (!v19) {
          goto LABEL_23;
        }
      }
      int v21 = 1;
    }
    else
    {
LABEL_23:
      int v21 = 0;
    }
    unint64_t v26 = v32;
    uint64_t v27 = v33;
    if (v33) {
      atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string __p = (void *)0xAAAAAAAAAAAAAAAALL;
    unint64_t v35 = 0xAAAAAAAAAAAAAAAALL;
    boost::container::dtl::flat_tree<std::weak_ptr<ctu::RestResourceConnection>,boost::move_detail::identity<std::weak_ptr<ctu::RestResourceConnection>>,std::owner_less<std::weak_ptr<ctu::RestResourceConnection>>,void>::emplace_unique<std::shared_ptr<ctu::RestResourceConnection>>(v16, (unint64_t *)&v26, (__n128 **)&__p);
    uint64_t v22 = (ctu::AssertionRestResource *)v27;
    if (v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v27);
    }
    if (((v15 | v21) & 1) == 0) {
      ctu::AssertionRestResource::notifyProvider(v22, a2, a3, *(const ctu::AssertionRestResourceState **)(v10 + 24));
    }
    goto LABEL_33;
  }
LABEL_34:
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  return 1;
}

void sub_1920AC264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(a1);
}

void sub_1920AC2C4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1920AC2B0);
}

uint64_t ctu::AssertionRestResource::handleMessage_Resource_Provider_PUSH(void *a1, ctu::RestResourceContext *a2, long long *a3, void *a4, size_t a5)
{
  uint64_t v10 = (void ***)(a1 + 1);
  if (a4)
  {
    std::string::basic_string[abi:ne180100](__p, a4, a5);
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    *(void *)&long long v26 = 0;
  }
  boost::container::dtl::flat_tree<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>,boost::container::dtl::select1st<std::string>,std::less<std::string>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::RestResourceBase>>>>::find((uint64_t)&v29, v10, __p);
  if (SBYTE7(v26) < 0)
  {
    operator delete(__p[0]);
    if (a4) {
      goto LABEL_6;
    }
  }
  else if (a4)
  {
LABEL_6:
    std::string::basic_string[abi:ne180100](__p, a4, a5);
    goto LABEL_9;
  }
  __p[0] = 0;
  __p[1] = 0;
  *(void *)&long long v26 = 0;
LABEL_9:
  ctu::AssertionRestResource::createIfNotPresent(a1, (uint64_t)__p, &v29);
  if (SBYTE7(v26) < 0) {
    operator delete(__p[0]);
  }
  (**(void (***)(uint64_t *__return_ptr, ctu::RestResourceContext *))a2)(&v27, a2);
  uint64_t v11 = v27;
  if (v27)
  {
    uint64_t v12 = v29;
    uint64_t v13 = *(void **)(v29 + 24);
    uint64_t v14 = (std::__shared_weak_count *)v13[1];
    if (v14) {
      BOOL v15 = v14->__shared_owners_ == -1;
    }
    else {
      BOOL v15 = 1;
    }
    uint64_t v16 = v28;
    if (v28)
    {
      atomic_fetch_add_explicit(&v28->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v14 = (std::__shared_weak_count *)v13[1];
    }
    void *v13 = v11;
    v13[1] = v16;
    if (v14) {
      std::__shared_weak_count::__release_weak(v14);
    }
    if (v15)
    {
      *(void *)&long long v17 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v17 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)std::string __p = v17;
      long long v26 = v17;
      long long v18 = a3[1];
      long long v23 = *a3;
      long long v24 = v18;
      ctu::PathView::advance((uint64_t)&v23, 1);
      if (*((void *)&v24 + 1))
      {
        uint64_t v19 = v23;
        if ((void)v24 - (void)v23 > 1uLL)
        {
          if ((unint64_t)(v24 - v23 - 1) >= *((void *)&v23 + 1)) {
            unint64_t v20 = *((void *)&v23 + 1);
          }
          else {
            unint64_t v20 = v24 - v23 - 1;
          }
        }
        else if ((void)v24 - (void)v23 >= *((void *)&v23 + 1))
        {
          unint64_t v20 = *((void *)&v23 + 1);
        }
        else
        {
          unint64_t v20 = v24 - v23;
        }
      }
      else
      {
        unint64_t v20 = *((void *)&v23 + 1);
        uint64_t v19 = v23;
      }
      int v21 = (ctu::AssertionRestResource *)ctu::PathView::PathView(__p, v19, v20);
      ctu::AssertionRestResource::notifyProvider(v21, a2, (const ctu::PathView *)__p, *(const ctu::AssertionRestResourceState **)(v12 + 24));
    }
  }
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  return 1;
}

void sub_1920AC4B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::AssertionRestResource::handleRestMessage_NOTIFY(ctu::AssertionRestResource *this, ctu::RestResourceContext *a2, const ctu::PathView *a3)
{
  return 0;
}

void ctu::AssertionRestResource::getResourceArray(ctu::AssertionRestResource *this@<X0>, xpc_object_t *a2@<X8>)
{
  *a2 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v4 = xpc_array_create(0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x192FEE1B0](v5) == MEMORY[0x1E4F14568])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  uint64_t v7 = *((void *)this + 2);
  if (v7)
  {
    uint64_t v8 = (long long *)*((void *)this + 1);
    uint64_t v9 = 32 * v7;
    do
    {
      if (*((char *)v8 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v8, *((void *)v8 + 1));
      }
      else
      {
        long long v10 = *v8;
        __p.__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v10;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::__split_buffer<std::string>::pointer p_p = &__p;
      }
      else {
        std::__split_buffer<std::string>::pointer p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      xpc_object_t v12 = xpc_string_create((const char *)p_p);
      if (!v12) {
        xpc_object_t v12 = xpc_null_create();
      }
      xpc_array_append_value(*a2, v12);
      xpc_release(v12);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      v8 += 2;
      v9 -= 32;
    }
    while (v9);
  }
}

void sub_1920AC640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  xpc::array::~array(v14);
  _Unwind_Resume(a1);
}

BOOL ctu::AssertionRestResource::createIfNotPresent(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1[1];
  unint64_t v5 = a1[2];
  xpc_object_t v4 = (char *)(a1 + 1);
  uint64_t v6 = v3 + 32 * v5;
  uint64_t v7 = *a3;
  if (*a3 == v6)
  {
    uint64_t v11 = (char *)operator new(0x60uLL);
    *((void *)v11 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
    *((void *)v11 + 2) = 0;
    *(void *)uint64_t v11 = 0;
    *((_DWORD *)v11 + 4) = 1;
    *(_OWORD *)(v11 + 24) = 0u;
    *(_OWORD *)(v11 + 40) = 0u;
    *(_OWORD *)(v11 + ++*(_DWORD *)(this + 56) = 0u;
    *(_OWORD *)(v11 + 72) = 0u;
    *((void *)v11 + 1ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
    *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v12 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)long long v24 = v12;
    *(_OWORD *)&v24[16] = v12;
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v24, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      uint64_t v3 = a1[1];
      unint64_t v5 = a1[2];
    }
    else
    {
      *(_OWORD *)long long v24 = *(_OWORD *)a2;
      *(void *)&v24[16] = *(void *)(a2 + 16);
    }
    *(void *)&v24[24] = v11;
    uint64_t v13 = v3 + 32 * v5;
    while (v5)
    {
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(v3 + 32 * (v5 >> 1)), (void **)v24) & 0x80u) == 0)
      {
        v5 >>= 1;
      }
      else
      {
        v3 += 32 * (v5 >> 1) + 32;
        v5 += ~(v5 >> 1);
      }
    }
    if (v3 == v13
      || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v24, (void **)v3) & 0x80) != 0)
    {
      uint64_t v14 = a1[2];
      if (a1[3] == v14)
      {
        boost::container::vector<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::AssertionRestResourceState>>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::AssertionRestResourceState>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::AssertionRestResourceState>>>,boost::container::dtl::pair<std::string,std::unique_ptr<ctu::AssertionRestResourceState>>*,boost::container::dtl::pair<std::string,std::unique_ptr<ctu::AssertionRestResourceState>>>>(&v23, v4, (long long *)v3, (long long *)v24);
        uint64_t v3 = v23;
      }
      else
      {
        uint64_t v15 = *(void *)v4 + 32 * v14;
        if (v15 == v3)
        {
          long long v20 = *(_OWORD *)v24;
          *(void *)(v3 + 16) = *(void *)&v24[16];
          *(_OWORD *)uint64_t v3 = v20;
          memset(v24, 0, sizeof(v24));
          *(void *)(v15 + 24) = *(void *)&v24[24];
          ++a1[2];
        }
        else
        {
          uint64_t v16 = v15 - 32;
          *(_OWORD *)uint64_t v15 = *(_OWORD *)(v15 - 32);
          *(void *)(v15 - 32) = 0;
          *(void *)(v15 - 24) = 0;
          uint64_t v17 = *(void *)(v15 - 16);
          uint64_t v18 = *(void *)(v15 - 8);
          *(void *)(v15 - 16) = 0;
          *(void *)(v15 - 8) = 0;
          *(void *)(v15 + 16) = v17;
          *(void *)(v15 + 24) = v18;
          ++a1[2];
          if (v15 - 32 != v3)
          {
            do
            {
              uint64_t v19 = v16 - 32;
              boost::container::dtl::pair<std::string,std::unique_ptr<ctu::AssertionRestResourceState>>::operator=(v16, (long long *)(v16 - 32));
              uint64_t v16 = v19;
            }
            while (v19 != v3);
          }
          boost::container::dtl::pair<std::string,std::unique_ptr<ctu::AssertionRestResourceState>>::operator=(v3, (long long *)v24);
        }
      }
    }
    int v21 = *(void **)&v24[24];
    *(void *)&v24[24] = 0;
    if (v21) {
      std::default_delete<ctu::AssertionRestResourceState>::operator()[abi:ne180100](v21);
    }
    if ((v24[23] & 0x80000000) != 0) {
      operator delete(*(void **)v24);
    }
    *a3 = v3;
  }
  return v7 == v6;
}

void sub_1920AC8D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  boost::container::dtl::value_destructor<boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::AssertionRestResourceState>>>,boost::container::dtl::pair<std::string,std::unique_ptr<ctu::AssertionRestResourceState>>>::~value_destructor((uint64_t *)va);
  _Unwind_Resume(a1);
}

void ctu::AssertionRestResource::startNewGeneration(ctu::RestResourceContext &,ctu::PathView const&,ctu::AssertionRestResourceState &)const::$_0::operator()(ctu::RestResourceContext **a1, ctu::rest::WatchableRestResourceHelper *this)
{
  memset(v11, 170, sizeof(v11));
  ctu::rest::WatchableRestResourceHelper::removeWatchers(this, v11);
  if (v11[0] != v11[1])
  {
    xpc_object_t object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    uint64_t v13 = (void **)*((unsigned int *)*a1 + 4);
    ctu::rest::write_rest_value((unsigned int *)&v13, &object);
    uint64_t v3 = v11[0];
    for (uint64_t i = v11[1]; v3 != i; v3 += 16)
    {
      unint64_t v5 = *a1;
      uint64_t v9 = *(const ctu::RestResourceConnection **)v3;
      uint64_t v6 = *(std::__shared_weak_count **)(v3 + 8);
      long long v10 = v6;
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v13 = (void **)0xAAAAAAAAAAAAAAAALL;
      unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
      boost::container::dtl::flat_tree<std::weak_ptr<ctu::RestResourceConnection>,boost::move_detail::identity<std::weak_ptr<ctu::RestResourceConnection>>,std::owner_less<std::weak_ptr<ctu::RestResourceConnection>>,void>::emplace_unique<std::shared_ptr<ctu::RestResourceConnection>>((uint64_t *)v5 + 9, (unint64_t *)&v9, (__n128 **)&v13);
      int v7 = v14;
      uint64_t v8 = (ctu::AssertionRestResource *)v10;
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
      if (v7) {
        ctu::AssertionRestResource::notifyWatcherWithState(v8, a1[2], a1[3], *(const ctu::RestResourceConnection **)v3, (const xpc::object *)&object);
      }
    }
    xpc_release(object);
  }
  uint64_t v13 = (void **)v11;
  std::vector<std::shared_ptr<ctu::RestResourceConnection>>::__destroy_vector::operator()[abi:ne180100](&v13);
}

void sub_1920ACA10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *object)
{
  xpc_object_t object = &a11;
  std::vector<std::shared_ptr<ctu::RestResourceConnection>>::__destroy_vector::operator()[abi:ne180100]((void ***)&object);
  _Unwind_Resume(a1);
}

void ctu::AssertionRestResource::handleDroppedConnection(ctu::AssertionRestResource *a1, ctu::RestResourceContext *a2, uint64_t a3, void *a4)
{
  uint64_t v4 = *((void *)a1 + 2);
  if (v4)
  {
    uint64_t v9 = *((void *)a1 + 1);
    uint64_t v10 = v9 + 32 * v4;
    do
    {
      int v11 = ctu::rest::WatchableRestResourceHelper::removeWatcher((void *)(*(void *)(v9 + 24) + 24), a4);
      long long v12 = *(void **)(v9 + 24);
      if (v11)
      {
        uint64_t v13 = v12[4];
        if (!v13)
        {
LABEL_9:
          int v16 = 1;
          goto LABEL_11;
        }
        uint64_t v14 = 16 * v13;
        uint64_t v15 = v12[3] + 8;
        while (!*(void *)v15 || *(void *)(*(void *)v15 + 8) == -1)
        {
          v15 += 16;
          v14 -= 16;
          if (!v14) {
            goto LABEL_9;
          }
        }
      }
      int v16 = 0;
LABEL_11:
      int v17 = ctu::rest::WatchableRestResourceHelper::removeWatcher(v12 + 6, a4);
      uint64_t v18 = *(void **)(v9 + 24);
      if (v17)
      {
        uint64_t v19 = v18[7];
        if (v19)
        {
          uint64_t v20 = 16 * v19;
          uint64_t v21 = v18[6] + 8;
          while (!*(void *)v21 || *(void *)(*(void *)v21 + 8) == -1)
          {
            v21 += 16;
            v20 -= 16;
            if (!v20) {
              goto LABEL_17;
            }
          }
          ctu::rest::WatchableRestResourceHelper::removeWatcher(v18 + 9, a4);
          goto LABEL_37;
        }
LABEL_17:
        ctu::rest::WatchableRestResourceHelper::removeWatcher(v18 + 9, a4);
LABEL_19:
        uint64_t v22 = *(void **)a3;
        size_t v23 = *(void *)(a3 + 8);
        memset(&__p, 170, sizeof(__p));
        if (v22) {
          std::string::basic_string[abi:ne180100](&__p, v22, v23);
        }
        else {
          memset(&__p, 0, sizeof(__p));
        }
        int v24 = *(char *)(v9 + 23);
        if (v24 >= 0) {
          uint64_t v25 = (unsigned char *)v9;
        }
        else {
          uint64_t v25 = *(unsigned char **)v9;
        }
        if (v24 >= 0) {
          size_t v26 = *(unsigned __int8 *)(v9 + 23);
        }
        else {
          size_t v26 = *(void *)(v9 + 8);
        }
        ctu::path_join_impl(&__p, v25, v26);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::__split_buffer<std::string>::pointer p_p = &__p;
        }
        else {
          std::__split_buffer<std::string>::pointer p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        ctu::PathView::PathView(v29, (uint64_t)p_p, size);
        ctu::AssertionRestResource::startNewGeneration(a1, a2, (const ctu::PathView *)v29, *(ctu::AssertionRestResourceState **)(v9 + 24));
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        goto LABEL_37;
      }
      ctu::rest::WatchableRestResourceHelper::removeWatcher(v18 + 9, a4);
      if (v16) {
        goto LABEL_19;
      }
LABEL_37:
      v9 += 32;
    }
    while (v9 != v10);
  }
}

void sub_1920ACC24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<ctu::AssertionRestResourceState::dumpState(void)::$_0::operator() const(ctu::rest::WatchableRestResourceHelper const&)::{lambda(ctu::RestResourceConnection const&)#1},std::allocator<ctu::AssertionRestResourceState::dumpState(void)::$_0::operator() const(ctu::rest::WatchableRestResourceHelper const&)::{lambda(ctu::RestResourceConnection const&)#1}>,void ()(ctu::RestResourceConnection const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EE2F85B0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ctu::AssertionRestResourceState::dumpState(void)::$_0::operator() const(ctu::rest::WatchableRestResourceHelper const&)::{lambda(ctu::RestResourceConnection const&)#1},std::allocator<ctu::AssertionRestResourceState::dumpState(void)::$_0::operator() const(ctu::rest::WatchableRestResourceHelper const&)::{lambda(ctu::RestResourceConnection const&)#1}>,void ()(ctu::RestResourceConnection const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE2F85B0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<ctu::AssertionRestResourceState::dumpState(void)::$_0::operator() const(ctu::rest::WatchableRestResourceHelper const&)::{lambda(ctu::RestResourceConnection const&)#1},std::allocator<ctu::AssertionRestResourceState::dumpState(void)::$_0::operator() const(ctu::rest::WatchableRestResourceHelper const&)::{lambda(ctu::RestResourceConnection const&)#1}>,void ()(ctu::RestResourceConnection const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(xpc_object_t **)(a1 + 8);
  unint64_t v5 = *(const char **)(a2 + 8);
  uint64_t v3 = a2 + 8;
  uint64_t v4 = v5;
  if (*(char *)(v3 + 23) >= 0) {
    uint64_t v6 = (const char *)v3;
  }
  else {
    uint64_t v6 = v4;
  }
  xpc_object_t v7 = xpc_string_create(v6);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_array_append_value(*v2, v7);
  xpc_release(v7);
}

void sub_1920ACD20(_Unwind_Exception *a1)
{
  xpc_release(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<ctu::AssertionRestResourceState::dumpState(void)::$_0::operator() const(ctu::rest::WatchableRestResourceHelper const&)::{lambda(ctu::RestResourceConnection const&)#1},std::allocator<ctu::AssertionRestResourceState::dumpState(void)::$_0::operator() const(ctu::rest::WatchableRestResourceHelper const&)::{lambda(ctu::RestResourceConnection const&)#1}>,void ()(ctu::RestResourceConnection const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ctu::AssertionRestResourceState::dumpState(void)::$_0::operator() const(ctu::rest::WatchableRestResourceHelper const&)::{lambda(ctu::RestResourceConnection const&)#1},std::allocator<ctu::AssertionRestResourceState::dumpState(void)::$_0::operator() const(ctu::rest::WatchableRestResourceHelper const&)::{lambda(ctu::RestResourceConnection const&)#1}>,void ()(ctu::RestResourceConnection const&)>::target_type()
{
}

void *boost::container::vector<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::AssertionRestResourceState>>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::AssertionRestResourceState>>>,void>::~vector(void *a1)
{
  uint64_t v2 = a1[1];
  if (v2)
  {
    uint64_t v3 = (void **)(*a1 + 24);
    do
    {
      uint64_t v4 = *v3;
      xpc_object_t *v3 = 0;
      if (v4) {
        std::default_delete<ctu::AssertionRestResourceState>::operator()[abi:ne180100](v4);
      }
      if (*((char *)v3 - 1) < 0) {
        operator delete(*(v3 - 3));
      }
      v3 += 4;
      --v2;
    }
    while (v2);
  }
  if (a1[2]) {
    operator delete((void *)*a1);
  }
  return a1;
}

void *std::__function::__func<ctu::AssertionRestResource::handleMessage_Resource_Granted_GET(ctu::RestResourceContext &,ctu::llvm::StringRef)::$_0,std::allocator<ctu::AssertionRestResource::handleMessage_Resource_Granted_GET(ctu::RestResourceContext &,ctu::llvm::StringRef)::$_0>,void ()(ctu::RestResourceConnection const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EE2F44E8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ctu::AssertionRestResource::handleMessage_Resource_Granted_GET(ctu::RestResourceContext &,ctu::llvm::StringRef)::$_0,std::allocator<ctu::AssertionRestResource::handleMessage_Resource_Granted_GET(ctu::RestResourceContext &,ctu::llvm::StringRef)::$_0>,void ()(ctu::RestResourceConnection const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE2F44E8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<ctu::AssertionRestResource::handleMessage_Resource_Granted_GET(ctu::RestResourceContext &,ctu::llvm::StringRef)::$_0,std::allocator<ctu::AssertionRestResource::handleMessage_Resource_Granted_GET(ctu::RestResourceContext &,ctu::llvm::StringRef)::$_0>,void ()(ctu::RestResourceConnection const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(xpc_object_t **)(a1 + 8);
  unint64_t v5 = *(const char **)(a2 + 8);
  uint64_t v3 = a2 + 8;
  uint64_t v4 = v5;
  if (*(char *)(v3 + 23) >= 0) {
    uint64_t v6 = (const char *)v3;
  }
  else {
    uint64_t v6 = v4;
  }
  xpc_object_t v7 = xpc_string_create(v6);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_array_append_value(*v2, v7);
  xpc_release(v7);
}

void sub_1920ACEDC(_Unwind_Exception *a1)
{
  xpc_release(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<ctu::AssertionRestResource::handleMessage_Resource_Granted_GET(ctu::RestResourceContext &,ctu::llvm::StringRef)::$_0,std::allocator<ctu::AssertionRestResource::handleMessage_Resource_Granted_GET(ctu::RestResourceContext &,ctu::llvm::StringRef)::$_0>,void ()(ctu::RestResourceConnection const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ctu::AssertionRestResource::handleMessage_Resource_Granted_GET(ctu::RestResourceContext &,ctu::llvm::StringRef)::$_0,std::allocator<ctu::AssertionRestResource::handleMessage_Resource_Granted_GET(ctu::RestResourceContext &,ctu::llvm::StringRef)::$_0>,void ()(ctu::RestResourceConnection const&)>::target_type()
{
}

void *std::__function::__func<ctu::AssertionRestResource::handleMessage_Resource_Revoked_GET(ctu::RestResourceContext &,ctu::llvm::StringRef)::$_0,std::allocator<ctu::AssertionRestResource::handleMessage_Resource_Revoked_GET(ctu::RestResourceContext &,ctu::llvm::StringRef)::$_0>,void ()(ctu::RestResourceConnection const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EE2F4540;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ctu::AssertionRestResource::handleMessage_Resource_Revoked_GET(ctu::RestResourceContext &,ctu::llvm::StringRef)::$_0,std::allocator<ctu::AssertionRestResource::handleMessage_Resource_Revoked_GET(ctu::RestResourceContext &,ctu::llvm::StringRef)::$_0>,void ()(ctu::RestResourceConnection const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE2F4540;
  a2[1] = v2;
  return result;
}

void std::__function::__func<ctu::AssertionRestResource::handleMessage_Resource_Revoked_GET(ctu::RestResourceContext &,ctu::llvm::StringRef)::$_0,std::allocator<ctu::AssertionRestResource::handleMessage_Resource_Revoked_GET(ctu::RestResourceContext &,ctu::llvm::StringRef)::$_0>,void ()(ctu::RestResourceConnection const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(xpc_object_t **)(a1 + 8);
  unint64_t v5 = *(const char **)(a2 + 8);
  uint64_t v3 = a2 + 8;
  uint64_t v4 = v5;
  if (*(char *)(v3 + 23) >= 0) {
    uint64_t v6 = (const char *)v3;
  }
  else {
    uint64_t v6 = v4;
  }
  xpc_object_t v7 = xpc_string_create(v6);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_array_append_value(*v2, v7);
  xpc_release(v7);
}

void sub_1920AD020(_Unwind_Exception *a1)
{
  xpc_release(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<ctu::AssertionRestResource::handleMessage_Resource_Revoked_GET(ctu::RestResourceContext &,ctu::llvm::StringRef)::$_0,std::allocator<ctu::AssertionRestResource::handleMessage_Resource_Revoked_GET(ctu::RestResourceContext &,ctu::llvm::StringRef)::$_0>,void ()(ctu::RestResourceConnection const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ctu::AssertionRestResource::handleMessage_Resource_Revoked_GET(ctu::RestResourceContext &,ctu::llvm::StringRef)::$_0,std::allocator<ctu::AssertionRestResource::handleMessage_Resource_Revoked_GET(ctu::RestResourceContext &,ctu::llvm::StringRef)::$_0>,void ()(ctu::RestResourceConnection const&)>::target_type()
{
}

void *std::__function::__func<ctu::AssertionRestResource::handleMessage_Resource_Waiting_GET(ctu::RestResourceContext &,ctu::llvm::StringRef)::$_0,std::allocator<ctu::AssertionRestResource::handleMessage_Resource_Waiting_GET(ctu::RestResourceContext &,ctu::llvm::StringRef)::$_0>,void ()(ctu::RestResourceConnection const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EE2F4598;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ctu::AssertionRestResource::handleMessage_Resource_Waiting_GET(ctu::RestResourceContext &,ctu::llvm::StringRef)::$_0,std::allocator<ctu::AssertionRestResource::handleMessage_Resource_Waiting_GET(ctu::RestResourceContext &,ctu::llvm::StringRef)::$_0>,void ()(ctu::RestResourceConnection const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE2F4598;
  a2[1] = v2;
  return result;
}

void std::__function::__func<ctu::AssertionRestResource::handleMessage_Resource_Waiting_GET(ctu::RestResourceContext &,ctu::llvm::StringRef)::$_0,std::allocator<ctu::AssertionRestResource::handleMessage_Resource_Waiting_GET(ctu::RestResourceContext &,ctu::llvm::StringRef)::$_0>,void ()(ctu::RestResourceConnection const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(xpc_object_t **)(a1 + 8);
  unint64_t v5 = *(const char **)(a2 + 8);
  uint64_t v3 = a2 + 8;
  uint64_t v4 = v5;
  if (*(char *)(v3 + 23) >= 0) {
    uint64_t v6 = (const char *)v3;
  }
  else {
    uint64_t v6 = v4;
  }
  xpc_object_t v7 = xpc_string_create(v6);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  xpc_array_append_value(*v2, v7);
  xpc_release(v7);
}

void sub_1920AD164(_Unwind_Exception *a1)
{
  xpc_release(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<ctu::AssertionRestResource::handleMessage_Resource_Waiting_GET(ctu::RestResourceContext &,ctu::llvm::StringRef)::$_0,std::allocator<ctu::AssertionRestResource::handleMessage_Resource_Waiting_GET(ctu::RestResourceContext &,ctu::llvm::StringRef)::$_0>,void ()(ctu::RestResourceConnection const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ctu::AssertionRestResource::handleMessage_Resource_Waiting_GET(ctu::RestResourceContext &,ctu::llvm::StringRef)::$_0,std::allocator<ctu::AssertionRestResource::handleMessage_Resource_Waiting_GET(ctu::RestResourceContext &,ctu::llvm::StringRef)::$_0>,void ()(ctu::RestResourceConnection const&)>::target_type()
{
}

void std::default_delete<ctu::AssertionRestResourceState>::operator()[abi:ne180100](void *a1)
{
  boost::container::vector<std::weak_ptr<ctu::RestResourceConnection>,boost::container::new_allocator<std::weak_ptr<ctu::RestResourceConnection>>,void>::~vector(a1 + 9);
  boost::container::vector<std::weak_ptr<ctu::RestResourceConnection>,boost::container::new_allocator<std::weak_ptr<ctu::RestResourceConnection>>,void>::~vector(a1 + 6);
  boost::container::vector<std::weak_ptr<ctu::RestResourceConnection>,boost::container::new_allocator<std::weak_ptr<ctu::RestResourceConnection>>,void>::~vector(a1 + 3);
  uint64_t v2 = (std::__shared_weak_count *)a1[1];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(a1);
}

uint64_t *boost::container::dtl::value_destructor<boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::AssertionRestResourceState>>>,boost::container::dtl::pair<std::string,std::unique_ptr<ctu::AssertionRestResourceState>>>::~value_destructor(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void **)(*a1 + 24);
  *(void *)(v2 + 24) = 0;
  if (v3) {
    std::default_delete<ctu::AssertionRestResourceState>::operator()[abi:ne180100](v3);
  }
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  return a1;
}

void boost::container::vector<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::AssertionRestResourceState>>,boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::AssertionRestResourceState>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<std::string,std::unique_ptr<ctu::AssertionRestResourceState>>>,boost::container::dtl::pair<std::string,std::unique_ptr<ctu::AssertionRestResourceState>>*,boost::container::dtl::pair<std::string,std::unique_ptr<ctu::AssertionRestResourceState>>>>(void *a1, char *a2, long long *a3, long long *a4)
{
  unint64_t v4 = *((void *)a2 + 2);
  unint64_t v5 = 0x3FFFFFFFFFFFFFFLL;
  unint64_t v6 = *((void *)a2 + 1) + 1;
  if (0x3FFFFFFFFFFFFFFLL - v4 < v6 - v4) {
    goto LABEL_29;
  }
  unint64_t v7 = v4 >> 61;
  unint64_t v8 = 8 * v4;
  if (v7 > 4) {
    uint64_t v9 = -1;
  }
  else {
    uint64_t v9 = v8;
  }
  unint64_t v10 = v8 / 5;
  if (v7) {
    unint64_t v10 = v9;
  }
  if (v10 < 0x3FFFFFFFFFFFFFFLL) {
    unint64_t v5 = v10;
  }
  unint64_t v11 = v6 <= v5 ? v5 : *((void *)a2 + 1) + 1;
  if (v11 >> 58) {
LABEL_29:
  }
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
  int v16 = *(char **)a2;
  int v17 = (char *)operator new(32 * v11);
  uint64_t v18 = v17;
  uint64_t v19 = *(char **)a2;
  uint64_t v20 = *(void *)a2 + 32 * *((void *)a2 + 1);
  uint64_t v21 = v17;
  if (*(long long **)a2 != a3)
  {
    uint64_t v22 = *(char **)a2;
    uint64_t v21 = v17;
    do
    {
      long long v23 = *(_OWORD *)v22;
      *((void *)v21 + 2) = *((void *)v22 + 2);
      *(_OWORD *)uint64_t v21 = v23;
      *(void *)uint64_t v22 = 0;
      *((void *)v22 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
      uint64_t v24 = *((void *)v22 + 3);
      *((void *)v22 + 2) = 0;
      *((void *)v22 + ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = 0;
      *((void *)v21 + ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = v24;
      v21 += 32;
      v22 += 32;
    }
    while (v22 != (char *)a3);
  }
  long long v25 = *a4;
  *((void *)v21 + 2) = *((void *)a4 + 2);
  *(_OWORD *)uint64_t v21 = v25;
  *(void *)a4 = 0;
  *((void *)a4 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
  uint64_t v26 = *((void *)a4 + 3);
  *((void *)a4 + 2) = 0;
  *((void *)a4 + ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = 0;
  *((void *)v21 + ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = v26;
  if ((long long *)v20 != a3)
  {
    uint64_t v27 = v21 + 56;
    uint64_t v28 = a3;
    do
    {
      long long v29 = *v28;
      *(v27 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = *((void *)v28 + 2);
      *(_OWORD *)(v27 - ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = v29;
      *(void *)uint64_t v28 = 0;
      *((void *)v28 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
      uint64_t v30 = *((void *)v28 + 3);
      *((void *)v28 + 2) = 0;
      *((void *)v28 + ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = 0;
      void *v27 = v30;
      v27 += 4;
      v28 += 2;
    }
    while (v28 != (long long *)v20);
  }
  if (v19)
  {
    uint64_t v31 = *((void *)a2 + 1);
    if (v31)
    {
      unint64_t v32 = (void **)(v19 + 24);
      do
      {
        long long v33 = *v32;
        ctu::RestResourceConnection *v32 = 0;
        if (v33) {
          std::default_delete<ctu::AssertionRestResourceState>::operator()[abi:ne180100](v33);
        }
        if (*((char *)v32 - 1) < 0) {
          operator delete(*(v32 - 3));
        }
        v32 += 4;
        --v31;
      }
      while (v31);
    }
    operator delete(*(void **)a2);
  }
  uint64_t v34 = *((void *)a2 + 1) + 1;
  *(void *)a2 = v18;
  *((void *)a2 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v34;
  *((void *)a2 + 2) = v11;
  *a1 = &v18[(char *)a3 - v16];
}

uint64_t boost::container::dtl::pair<std::string,std::unique_ptr<ctu::AssertionRestResourceState>>::operator=(uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + 2ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = 0;
  *(unsigned char *)a2 = 0;
  uint64_t v5 = *((void *)a2 + 3);
  *((void *)a2 + ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = 0;
  unint64_t v6 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v5;
  if (v6) {
    std::default_delete<ctu::AssertionRestResourceState>::operator()[abi:ne180100](v6);
  }
  return a1;
}

void ctu::LoggerBase<ctu::DummyLogServer>::~LoggerBase(void **a1)
{
  ctu::LoggerCommonBase::~LoggerCommonBase(a1);

  operator delete(v1);
}

uint64_t ctu::LoggerBase<ctu::DummyLogServer>::enabled()
{
  return 1;
}

void ctu::XpcLogger::create(NSObject **a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, std::__shared_weak_count_vtbl **a5@<X8>)
{
  *a5 = (std::__shared_weak_count_vtbl *)0xAAAAAAAAAAAAAAAALL;
  a5[1] = (std::__shared_weak_count_vtbl *)0xAAAAAAAAAAAAAAAALL;
  unint64_t v10 = (std::__shared_weak_count_vtbl *)operator new(0x80uLL);
  unint64_t v11 = *a1;
  long long v25 = *a1;
  *a1 = 0;
  *(_OWORD *)std::string __p = *(_OWORD *)a3;
  uint64_t v24 = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  ctu::XpcLogger::XpcLogger(v10, &v25, a2, (long long *)__p);
  *a5 = v10;
  long long v12 = (std::__shared_weak_count *)operator new(0x20uLL);
  v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE2F8FB8;
  v12->__shared_owners_ = 0;
  v12->__shared_weak_owners_ = 0;
  v12[1].__vftable = v10;
  a5[1] = (std::__shared_weak_count_vtbl *)v12;
  get_deleter = (std::__shared_weak_count *)v10[1].__get_deleter;
  if (get_deleter)
  {
    if (get_deleter->__shared_owners_ != -1) {
      goto LABEL_6;
    }
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v10[1].__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))&v10[1].~__shared_weak_count_0;
    v10[1].__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v12;
    std::__shared_weak_count::__release_weak(get_deleter);
  }
  else
  {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v10[1].__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))&v10[1].~__shared_weak_count_0;
    v10[1].__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v12;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v12);
LABEL_6:
  if (SHIBYTE(v24) < 0) {
    operator delete(__p[0]);
  }
  if (v11) {
    dispatch_release(v11);
  }
  if (MEMORY[0x192FEE1B0](*a4) == MEMORY[0x1E4F145A0])
  {
    atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v20[0] = MEMORY[0x1E4F143A8];
    v20[1] = 1174405120;
    void v20[2] = ___ZN3ctu9XpcLogger6createEN8dispatch5queueEPKcNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEN3xpc8endpointE_block_invoke;
    v20[3] = &__block_descriptor_tmp_26;
    _OWORD v20[4] = v10;
    uint64_t v21 = v12;
    atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v14 = (void *)*a4;
    xpc_object_t object = v14;
    if (v14) {
      xpc_retain(v14);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    uint64_t v15 = (std::__shared_weak_count *)v10[1].__get_deleter;
    if (!v15 || (on_zero_shared = v10[1].__on_zero_shared, (int v17 = std::__shared_weak_count::lock(v15)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v18 = v17;
    on_zero_shared_weaunint64_t k = v10[1].__on_zero_shared_weak;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 1174405120;
    block[2] = ___ZNK3ctu20SharedSynchronizableINS_9XpcClientEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
    block[3] = &__block_descriptor_tmp_17_0;
    void block[5] = on_zero_shared;
    uint64_t v27 = v18;
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    void block[4] = v20;
    dispatch_async(on_zero_shared_weak, block);
    if (v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v27);
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    xpc_release(object);
    xpc_object_t object = 0;
    if (v21) {
      std::__shared_weak_count::__release_weak(v21);
    }
    std::__shared_weak_count::__release_weak(v12);
  }
}

void sub_1920AD758()
{
}

void sub_1920AD7A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  __cxa_end_catch();
  if (a22 < 0)
  {
    operator delete(__p);
    if (!v22) {
      goto LABEL_3;
    }
  }
  else if (!v22)
  {
    goto LABEL_3;
  }
  dispatch_release(v22);
LABEL_3:
  _Unwind_Resume(a1);
}

void ___ZN3ctu9XpcLogger6createEN8dispatch5queueEPKcNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEN3xpc8endpointE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      long long v4 = v3;
      uint64_t v5 = *(void *)(a1 + 32);
      if (v5)
      {
        xpc_object_t v6 = xpc_null_create();
        xpc_object_t v9 = v6;
        if (MEMORY[0x192FEE1B0](*(void *)(a1 + 48)) == MEMORY[0x1E4F145A0])
        {
          unint64_t v7 = xpc_connection_create_from_endpoint(*(xpc_endpoint_t *)(a1 + 48));
          if (!v7) {
            unint64_t v7 = xpc_null_create();
          }
          xpc_object_t v8 = xpc_null_create();
          xpc_object_t v9 = v7;
          xpc_release(v6);
          xpc_release(v8);
        }
        else
        {
          unint64_t v7 = v6;
        }
        ctu::XpcLogger::init_sync(v5, &v9);
        xpc_release(v7);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1920AD904(_Unwind_Exception *a1)
{
  xpc_release(v2);
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void ctu::XpcLogger::init_sync(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v16 = *a2;
  xpc_object_t v3 = v16;
  if (v16)
  {
    xpc_retain(v16);
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    xpc_object_t v16 = v3;
  }
  ctu::XpcClient::setServer_sync(a1 + 48, &v16);
  xpc_release(v3);
  xpc_object_t v16 = 0;
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    xpc_object_t v15 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t v15 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_11;
    }
  }
  if (MEMORY[0x192FEE1B0](v5) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v5);
    goto LABEL_12;
  }
  xpc_object_t v6 = xpc_null_create();
LABEL_11:
  xpc_object_t v15 = v6;
LABEL_12:
  xpc_release(v5);
  unint64_t v7 = (const char *)(a1 + 96);
  if (*(char *)(a1 + 119) < 0) {
    unint64_t v7 = *(const char **)v7;
  }
  xpc_object_t v13 = xpc_string_create(v7);
  if (!v13) {
    xpc_object_t v13 = xpc_null_create();
  }
  unint64_t v11 = &v15;
  long long v12 = "kLoggerName";
  xpc::dict::object_proxy::operator=((uint64_t)&v11, &v13, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v13);
  xpc_object_t v13 = 0;
  if (*(char *)(a1 + 31) >= 0) {
    xpc_object_t v8 = (const char *)(a1 + 8);
  }
  else {
    xpc_object_t v8 = *(const char **)(a1 + 8);
  }
  xpc_object_t v9 = xpc_string_create(v8);
  if (!v9) {
    xpc_object_t v9 = xpc_null_create();
  }
  unint64_t v11 = &v15;
  long long v12 = "kLoggerDomain";
  xpc::dict::object_proxy::operator=((uint64_t)&v11, &v9, &v10);
  xpc_release(v10);
  xpc_object_t v10 = 0;
  xpc_release(v9);
  xpc_object_t v9 = 0;
  xpc_connection_send_message(*(xpc_connection_t *)(a1 + 88), v15);
  xpc_release(v15);
}

void sub_1920ADAE0(_Unwind_Exception *a1)
{
  xpc_release(*(xpc_object_t *)(v1 - 32));
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_32c39_ZTSNSt3__18weak_ptrIN3ctu9XpcLoggerEEE48c19_ZTSN3xpc8endpointE(void *a1, void *a2)
{
  uint64_t v3 = a2[5];
  a1[4] = a2[4];
  a1[5] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  xpc_object_t v4 = (void *)a2[6];
  a1[6] = v4;
  if (v4) {
    return xpc_retain(v4);
  }
  xpc_object_t result = xpc_null_create();
  a1[6] = result;
  return result;
}

void __destroy_helper_block_e8_32c39_ZTSNSt3__18weak_ptrIN3ctu9XpcLoggerEEE48c19_ZTSN3xpc8endpointE(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 48));
  *(void *)(a1 + 48) = 0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void *ctu::XpcLogger::XpcLogger(void *a1, NSObject **a2, char *a3, long long *a4)
{
  unint64_t v7 = (void *)ctu::LoggerCommonBase::LoggerCommonBase((uint64_t)a1, a4, MEMORY[0x1E4F14500]);
  *unint64_t v7 = &unk_1EE2F6508;
  uint64_t v8 = (uint64_t)(v7 + 6);
  std::string::basic_string[abi:ne180100]<0>(__p, a3);
  xpc_object_t v10 = 0;
  ctu::XpcClient::XpcClient(v8, (long long *)__p, a2, &v10);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  *a1 = &unk_1EE2F7D60;
  a1[6] = &unk_1EE2F7D98;
  a1[15] = 0;
  return a1;
}

void sub_1920ADCC0(_Unwind_Exception *a1)
{
  ctu::LoggerCommonBase::~LoggerCommonBase(v1);
  _Unwind_Resume(a1);
}

void ctu::XpcLogger::setInvalidationCallback(void *a1, uint64_t a2)
{
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 1107296256;
  _OWORD v8[2] = ___ZN3ctu9XpcLogger23setInvalidationCallbackEU13block_pointerFvvE_block_invoke;
  void v8[3] = &__block_descriptor_tmp_1_1;
  void v8[4] = a2;
  void v8[5] = a1;
  uint64_t v3 = (std::__shared_weak_count *)a1[8];
  if (!v3 || (uint64_t v4 = a1[7], (v5 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v6 = v5;
  unint64_t v7 = a1[9];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableINS_9XpcClientEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &__block_descriptor_tmp_17_0;
  void block[5] = v4;
  xpc_object_t v10 = v6;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = v8;
  dispatch_async(v7, block);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
}

uint64_t ___ZN3ctu9XpcLogger23setInvalidationCallbackEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  uint64_t v4 = a1 + 32;
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(v4 + 8);
  if (v2) {
    uint64_t v2 = _Block_copy(v2);
  }
  xpc_object_t v5 = *(const void **)(v3 + 120);
  *(void *)(v3 + 120) = v2;
  if (v5) {
    _Block_release(v5);
  }
  uint64_t result = MEMORY[0x192FEE1B0](*(void *)(v3 + 88));
  if (result != MEMORY[0x1E4F14578])
  {
    unint64_t v7 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);
    return v7();
  }
  return result;
}

void ctu::XpcLogger::handleServerError_sync(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 120);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  xpc_object_t v3 = xpc_null_create();
  xpc_object_t v4 = v3;
  ctu::XpcClient::setServer_sync(a1 + 48, &v4);
  xpc_release(v3);
}

void sub_1920ADED4(_Unwind_Exception *a1)
{
  xpc_release(v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'ctu::XpcLogger::handleServerError_sync(uint64_t a1)
{
}

void ctu::XpcLogger::handleMessage_sync(uint64_t a1, xpc_object_t *a2)
{
  if (xpc_dictionary_get_value(*a2, "kLoggerLevel"))
  {
    v5[0] = a2;
    v5[1] = "kLoggerLevel";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)v5, &object);
    char v4 = xpc::dyn_cast_or_default(&object, 0);
    xpc_release(object);
    *(unsigned char *)(a1 + 4ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v4;
  }
}

void sub_1920ADF74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
}

void non-virtual thunk to'ctu::XpcLogger::handleMessage_sync(uint64_t a1, xpc_object_t *a2)
{
}

void ctu::XpcLogger::forceLog(void *a1, unsigned int a2, uint64_t a3)
{
  xpc_object_t v36 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v7 = v6;
  if (v6)
  {
    xpc_object_t v36 = v6;
  }
  else
  {
    xpc_object_t v7 = xpc_null_create();
    xpc_object_t v36 = v7;
    if (!v7)
    {
      xpc_object_t v8 = xpc_null_create();
      xpc_object_t v7 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x192FEE1B0](v7) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v7);
    goto LABEL_9;
  }
  xpc_object_t v8 = xpc_null_create();
LABEL_8:
  xpc_object_t v36 = v8;
LABEL_9:
  xpc_release(v7);
  xpc_object_t v34 = xpc_int64_create(a2);
  if (!v34) {
    xpc_object_t v34 = xpc_null_create();
  }
  blocunint64_t k = &v36;
  termios v38 = "kLogMessageLevel";
  xpc::dict::object_proxy::operator=((uint64_t)&block, &v34, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v34);
  xpc_object_t v34 = 0;
  ctu::LogMessageBuffer::str((ctu::LogMessageBuffer *)a3);
  if (*(char *)(a3 + 23) >= 0) {
    xpc_object_t v9 = (const char *)a3;
  }
  else {
    xpc_object_t v9 = *(const char **)a3;
  }
  xpc_object_t v32 = xpc_string_create(v9);
  if (!v32) {
    xpc_object_t v32 = xpc_null_create();
  }
  blocunint64_t k = &v36;
  termios v38 = "kLogMessage";
  xpc::dict::object_proxy::operator=((uint64_t)&block, &v32, &v33);
  xpc_release(v33);
  xpc_object_t v33 = 0;
  xpc_release(v32);
  xpc_object_t v32 = 0;
  int64_t v11 = ctu::Clock::now_in_nanoseconds(v10);
  xpc_object_t v30 = xpc_int64_create(v11);
  if (!v30) {
    xpc_object_t v30 = xpc_null_create();
  }
  blocunint64_t k = &v36;
  termios v38 = "kLogMessageTimestamp";
  xpc::dict::object_proxy::operator=((uint64_t)&block, &v30, &v31);
  xpc_release(v31);
  xpc_object_t v31 = 0;
  xpc_release(v30);
  xpc_object_t v30 = 0;
  uint64_t v28 = *(void *)(a3 + 32);
  uint64_t v12 = v28;
  long long v29 = *(_OWORD *)(a3 + 40);
  uint64_t v13 = v29;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 32) = 0;
  if (v12 != v13)
  {
    xpc_object_t v14 = xpc_array_create(0, 0);
    if (v14 || (xpc_object_t v14 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x192FEE1B0](v14) == MEMORY[0x1E4F14568])
      {
        xpc_retain(v14);
        xpc_object_t v15 = v14;
      }
      else
      {
        xpc_object_t v15 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v15 = xpc_null_create();
      xpc_object_t v14 = 0;
    }
    xpc_release(v14);
    for (uint64_t i = v28; i != (void)v29; i += 24)
    {
      int v17 = (const char *)i;
      if (*(char *)(i + 23) < 0) {
        int v17 = *(const char **)i;
      }
      xpc_object_t v18 = xpc_string_create(v17);
      if (!v18) {
        xpc_object_t v18 = xpc_null_create();
      }
      xpc_array_append_value(v15, v18);
      xpc_release(v18);
    }
    xpc_object_t v26 = v15;
    if (v15) {
      xpc_retain(v15);
    }
    else {
      xpc_object_t v26 = xpc_null_create();
    }
    blocunint64_t k = &v36;
    termios v38 = "kLogMessageMetadata";
    xpc::dict::object_proxy::operator=((uint64_t)&block, &v26, &v27);
    xpc_release(v27);
    xpc_object_t v27 = 0;
    xpc_release(v26);
    xpc_object_t v26 = 0;
    xpc_release(v15);
  }
  v24[0] = MEMORY[0x1E4F143A8];
  v24[1] = 1174405120;
  v24[2] = ___ZNK3ctu9XpcLogger8forceLogENS_8LogLevelEONS_16LogMessageBufferE_block_invoke;
  void v24[3] = &__block_descriptor_tmp_9_2;
  void v24[4] = a1;
  xpc_object_t v25 = v36;
  if (v36) {
    xpc_retain(v36);
  }
  else {
    xpc_object_t v25 = xpc_null_create();
  }
  uint64_t v19 = (std::__shared_weak_count *)a1[8];
  if (!v19 || (uint64_t v20 = a1[7], (v21 = std::__shared_weak_count::lock(v19)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v22 = v21;
  long long v23 = a1[9];
  blocunint64_t k = (void **)MEMORY[0x1E4F143A8];
  termios v38 = (const char *)1174405120;
  char v39 = ___ZNK3ctu20SharedSynchronizableINS_9XpcClientEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  uint64_t v40 = &__block_descriptor_tmp_17_0;
  uint64_t v42 = v20;
  std::string::size_type v43 = v22;
  atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  std::string::size_type v41 = v24;
  dispatch_async(v23, &block);
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  xpc_release(v25);
  xpc_object_t v25 = 0;
  blocunint64_t k = (void **)&v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&block);
  xpc_release(v36);
}

void sub_1920AE414(_Unwind_Exception *a1)
{
  xpc_release(*(xpc_object_t *)(v1 - 128));
  _Unwind_Resume(a1);
}

void ___ZNK3ctu9XpcLogger8forceLogENS_8LogLevelEONS_16LogMessageBufferE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (MEMORY[0x192FEE1B0](*(void *)(v2 + 88)) == MEMORY[0x1E4F14578])
  {
    xpc_object_t v3 = *(_xpc_connection_s **)(v2 + 88);
    char v4 = *(void **)(a1 + 40);
    xpc_connection_send_message(v3, v4);
  }
}

void ctu::XpcLogger::setLogLevel(uint64_t a1, unsigned int a2)
{
  *(unsigned char *)(a1 + 40) = a2;
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    xpc_object_t v16 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t v16 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x192FEE1B0](v5) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  xpc_object_t v16 = v6;
LABEL_9:
  xpc_release(v5);
  xpc_object_t v14 = xpc_int64_create(a2);
  if (!v14) {
    xpc_object_t v14 = xpc_null_create();
  }
  blocunint64_t k = &v16;
  uint64_t v18 = (uint64_t)"kLoggerLevel";
  xpc::dict::object_proxy::operator=((uint64_t)&block, &v14, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v14);
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 1174405120;
  xpc_object_t v12[2] = ___ZN3ctu9XpcLogger11setLogLevelENS_8LogLevelE_block_invoke;
  v12[3] = &__block_descriptor_tmp_12_0;
  void v12[4] = a1;
  xpc_object_t v13 = v16;
  xpc_object_t v14 = 0;
  if (v16) {
    xpc_retain(v16);
  }
  else {
    xpc_object_t v13 = xpc_null_create();
  }
  xpc_object_t v7 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v7 || (uint64_t v8 = *(void *)(a1 + 56), (v9 = std::__shared_weak_count::lock(v7)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v10 = v9;
  int64_t v11 = *(NSObject **)(a1 + 72);
  blocunint64_t k = (xpc_object_t *)MEMORY[0x1E4F143A8];
  uint64_t v18 = 1174405120;
  uint64_t v19 = ___ZNK3ctu20SharedSynchronizableINS_9XpcClientEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  uint64_t v20 = &__block_descriptor_tmp_17_0;
  uint64_t v22 = v8;
  long long v23 = v10;
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v21 = v12;
  dispatch_async(v11, &block);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  xpc_release(v13);
  xpc_object_t v13 = 0;
  xpc_release(v16);
}

void ___ZN3ctu9XpcLogger11setLogLevelENS_8LogLevelE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (MEMORY[0x192FEE1B0](*(void *)(v2 + 88)) == MEMORY[0x1E4F14578])
  {
    xpc_object_t v3 = *(_xpc_connection_s **)(v2 + 88);
    xpc_object_t v4 = *(void **)(a1 + 40);
    xpc_connection_send_message(v3, v4);
  }
}

void ctu::XpcLogger::~XpcLogger(ctu::XpcLogger *this)
{
  *(void *)this = &unk_1EE2F7D60;
  uint64_t v2 = (void **)((char *)this + 48);
  *((void *)this + 6) = &unk_1EE2F7D98;
  xpc_object_t v3 = (const void *)*((void *)this + 15);
  if (v3) {
    _Block_release(v3);
  }
  ctu::XpcClient::~XpcClient(v2);

  ctu::LoggerCommonBase::~LoggerCommonBase((void **)this);
}

{
  void **v2;
  const void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_1EE2F7D60;
  uint64_t v2 = (void **)((char *)this + 48);
  *((void *)this + 6) = &unk_1EE2F7D98;
  xpc_object_t v3 = (const void *)*((void *)this + 15);
  if (v3) {
    _Block_release(v3);
  }
  ctu::XpcClient::~XpcClient(v2);
  ctu::LoggerCommonBase::~LoggerCommonBase((void **)this);

  operator delete(v4);
}

void non-virtual thunk to'ctu::XpcLogger::~XpcLogger(ctu::XpcLogger *this)
{
  uint64_t v2 = (void **)((char *)this - 48);
  *((void *)this - 6) = &unk_1EE2F7D60;
  *(void *)this = &unk_1EE2F7D98;
  xpc_object_t v3 = (const void *)*((void *)this + 9);
  if (v3) {
    _Block_release(v3);
  }
  ctu::XpcClient::~XpcClient((void **)this);

  ctu::LoggerCommonBase::~LoggerCommonBase(v2);
}

{
  void **v2;
  const void *v3;
  void *v4;
  uint64_t vars8;

  uint64_t v2 = (void **)((char *)this - 48);
  *((void *)this - 6) = &unk_1EE2F7D60;
  *(void *)this = &unk_1EE2F7D98;
  xpc_object_t v3 = (const void *)*((void *)this + 9);
  if (v3) {
    _Block_release(v3);
  }
  ctu::XpcClient::~XpcClient((void **)this);
  ctu::LoggerCommonBase::~LoggerCommonBase(v2);

  operator delete(v4);
}

void std::__shared_ptr_pointer<ctu::XpcLogger *,std::shared_ptr<ctu::XpcLogger> ctu::SharedSynchronizable<ctu::XpcClient>::make_shared_ptr<ctu::XpcLogger>(ctu::XpcLogger*)::{lambda(ctu::XpcLogger *)#1},std::allocator<ctu::XpcLogger>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<ctu::XpcLogger *,std::shared_ptr<ctu::XpcLogger> ctu::SharedSynchronizable<ctu::XpcClient>::make_shared_ptr<ctu::XpcLogger>(ctu::XpcLogger*)::{lambda(ctu::XpcLogger *)#1},std::allocator<ctu::XpcLogger>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<ctu::XpcLogger *,std::shared_ptr<ctu::XpcLogger> ctu::SharedSynchronizable<ctu::XpcClient>::make_shared_ptr<ctu::XpcLogger>(ctu::XpcLogger*)::{lambda(ctu::XpcLogger *)#1},std::allocator<ctu::XpcLogger>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<ctu::XpcLogger> ctu::SharedSynchronizable<ctu::XpcClient>::make_shared_ptr<ctu::XpcLogger>(ctu::XpcLogger*)::{lambda(ctu::XpcLogger*)#1}::operator() const(ctu::XpcLogger*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

uint64_t ___ZNK3ctu20SharedSynchronizableINS_9XpcClientEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void __copy_helper_block_e8_32b40c43_ZTSNSt3__110shared_ptrIKN3ctu9XpcClientEEE(void *a1, uint64_t a2)
{
  _Block_object_assign(a1 + 4, *(const void **)(a2 + 32), 7);
  uint64_t v4 = *(void *)(a2 + 48);
  a1[5] = *(void *)(a2 + 40);
  a1[6] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
}

void __destroy_helper_block_e8_32b40c43_ZTSNSt3__110shared_ptrIKN3ctu9XpcClientEEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  xpc_object_t v3 = *(const void **)(a1 + 32);

  _Block_object_dispose(v3, 7);
}

void ctu::XpcLoggerProxy::create(void *a1@<X0>, xpc_object_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  *a5 = 0xAAAAAAAAAAAAAAAALL;
  a5[1] = 0xAAAAAAAAAAAAAAAALL;
  int64_t v11 = (void (***)(void))*a1;
  xpc_object_t v10 = (std::__shared_weak_count *)a1[1];
  uint64_t v12 = (std::__shared_weak_count *)operator new(0x80uLL);
  v12->__shared_owners_ = 0;
  v12->__shared_weak_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE2F89D0;
  int v17 = v11;
  uint64_t v18 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  xpc_object_t v13 = *a2;
  xpc_object_t v16 = v13;
  if (v13)
  {
    xpc_retain(v13);
  }
  else
  {
    xpc_object_t v13 = xpc_null_create();
    xpc_object_t v16 = v13;
  }
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v15 = *(std::string *)a3;
  }
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string v14 = *(std::string *)a4;
  }
  ctu::XpcLoggerProxy::XpcLoggerProxy((uint64_t)&v12[1], &v17, &v16, (long long *)&v15, (long long *)&v14);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  xpc_release(v13);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  *a5 = v12 + 1;
  a5[1] = v12;
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  (**(void (***)(void))*a1)(*a1);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
}

void sub_1920AECA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  xpc_release(v27);
  if (a26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a26);
  }
  std::__shared_weak_count::~__shared_weak_count(v26);
  operator delete(v29);
  _Unwind_Resume(a1);
}

uint64_t ctu::XpcLoggerProxy::XpcLoggerProxy(uint64_t a1, void *a2, void **a3, long long *a4, long long *a5)
{
  uint64_t v8 = (std::string *)ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::LoggerBase(a1, a5, a2);
  v8->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EE2F6800;
  v8[2].__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1EE2F6848;
  xpc_object_t v9 = v8 + 3;
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v10 = *a4;
    v9->__r_.__value_.__r.__words[2] = *((void *)a4 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  int64_t v11 = *a3;
  *(void *)(a1 + 96) = *a3;
  if (v11) {
    xpc_retain(v11);
  }
  else {
    *(void *)(a1 + 96) = xpc_null_create();
  }
  return a1;
}

void sub_1920AEDEC(_Unwind_Exception *a1)
{
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase(v1);
  _Unwind_Resume(a1);
}

void ctu::XpcLoggerProxy::updateTrackedConfig(uint64_t a1, unsigned int a2)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    xpc_object_t message = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t message = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x192FEE1B0](v5) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  xpc_object_t message = v6;
LABEL_9:
  xpc_release(v5);
  xpc_object_t v8 = xpc_int64_create(a2);
  if (!v8) {
    xpc_object_t v8 = xpc_null_create();
  }
  v7[0] = &message;
  v7[1] = "kLoggerLevel";
  xpc::dict::object_proxy::operator=((uint64_t)v7, &v8, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v8);
  xpc_object_t v8 = 0;
  xpc_connection_send_message(*(xpc_connection_t *)(a1 + 96), message);
  xpc_release(message);
}

void sub_1920AEF1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t object)
{
}

void non-virtual thunk to'ctu::XpcLoggerProxy::updateTrackedConfig(uint64_t a1, unsigned int a2)
{
}

void ctu::XpcLoggerProxy::getTrackedLoggerName(ctu::XpcLoggerProxy *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 95) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 9), *((void *)this + 10));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 72);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 11);
  }
}

void non-virtual thunk to'ctu::XpcLoggerProxy::getTrackedLoggerName(ctu::XpcLoggerProxy *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 1), *((void *)this + 2));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 3);
  }
}

uint64_t ctu::XpcLoggerProxy::getTrackedLogLevel(ctu::XpcLoggerProxy *this)
{
  return *((unsigned __int8 *)this + 40);
}

uint64_t non-virtual thunk to'ctu::XpcLoggerProxy::getTrackedLogLevel(ctu::XpcLoggerProxy *this)
{
  return *((unsigned __int8 *)this - 24);
}

void ctu::XpcLoggerProxy::handleMessage(ctu::XpcLoggerProxy *this, xpc_object_t *a2)
{
  xpc_object_t v20 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  *(void *)int v17 = a2;
  *(void *)&v17[8] = "kLogMessage";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)v17, &v20);
  if (MEMORY[0x192FEE1B0](v20) != MEMORY[0x1E4F145D8])
  {
    uint64_t v5 = *((void *)this + 6);
    xpc_object_t v4 = (std::__shared_weak_count *)*((void *)this + 7);
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v5)
    {
      uint64_t v19 = 0;
      long long v18 = 0u;
      memset(v17, 0, sizeof(v17));
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      xpc::dyn_cast_or_default(&v20, (uint64_t)&v21, &__p);
      ctu::LogMessageBuffer::appendString((std::string *)v17, (uint64_t)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      __p.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
      uint64_t v21 = a2;
      uint64_t v22 = "kLogMessageMetadata";
      xpc::dict::object_proxy::operator xpc::array((uint64_t)&v21, &__p);
      if (MEMORY[0x192FEE1B0](__p.__r_.__value_.__r.__words[0]) == MEMORY[0x1E4F14568])
      {
        applier[0] = MEMORY[0x1E4F143A8];
        applier[1] = 0x40000000;
        applier[2] = ___ZN3ctu14XpcLoggerProxy13handleMessageERKN3xpc4dictE_block_invoke;
        applier[3] = &__block_descriptor_tmp_11;
        applier[4] = v17;
        xpc_array_apply(__p.__r_.__value_.__l.__data_, applier);
      }
      uint64_t v21 = a2;
      uint64_t v22 = "kLogMessageTimestamp";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&v21, &object);
      uint64_t v6 = xpc::dyn_cast_or_default(&object, 0);
      xpc_release(object);
      if (!v6) {
        uint64_t v6 = ctu::Clock::now_in_nanoseconds(v7);
      }
      uint64_t v21 = a2;
      uint64_t v22 = "kLogMessageLevel";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&v21, &object);
      char v8 = xpc::dyn_cast_or_default(&object, 0);
      xpc_release(object);
      xpc_object_t v9 = (char *)operator new(0x60uLL);
      if (*((char *)this + 31) < 0) {
        std::string::__init_copy_ctor_external(&v13, *((const std::string::value_type **)this + 1), *((void *)this + 2));
      }
      else {
        std::string v13 = *(std::string *)((char *)this + 8);
      }
      ctu::LogMessageBuffer::str((ctu::LogMessageBuffer *)v17);
      *(void *)xpc_object_t v9 = &unk_1EE2F64E8;
      *((void *)v9 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v6;
      v9[16] = v8;
      *((std::string *)v9 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v13;
      memset(&v13, 0, sizeof(v13));
      *((_OWORD *)v9 + ctu::rest::RestDispatchConnector::~RestDispatchConnector(this - 3) = *(_OWORD *)v17;
      *((void *)v9 + 8) = *(void *)&v17[16];
      *(_OWORD *)int v17 = 0uLL;
      *(_OWORD *)(v9 + 72) = v18;
      *((void *)v9 + 1ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v19;
      *(void *)&v17[16] = 0;
      long long v18 = 0uLL;
      uint64_t v19 = 0;
      long long v10 = (std::__shared_weak_count *)operator new(0x20uLL);
      v10->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE2F8C70;
      v10->__shared_owners_ = 0;
      v10->__shared_weak_owners_ = 0;
      v10[1].__vftable = (std::__shared_weak_count_vtbl *)v9;
      int64_t v11 = v9;
      uint64_t v12 = v10;
      ctu::LogServer::log(v5, (uint64_t)&v11);
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      xpc_release(__p.__r_.__value_.__l.__data_);
      ctu::LogMessageBuffer::~LogMessageBuffer((ctu::LogMessageBuffer *)v17);
    }
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  if (xpc_dictionary_get_value(*a2, "kLoggerLevel"))
  {
    *(void *)int v17 = a2;
    *(void *)&v17[8] = "kLoggerLevel";
    xpc::dict::object_proxy::operator xpc::object((uint64_t)v17, &v21);
    *((unsigned char *)this + 40) = xpc::dyn_cast_or_default((xpc_object_t *)&v21, 0);
    xpc_release(v21);
  }
  xpc_release(v20);
}

void sub_1920AF2E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, xpc_object_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,xpc_object_t object,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  operator delete(v30);
  xpc_release(object);
  ctu::LogMessageBuffer::~LogMessageBuffer((ctu::LogMessageBuffer *)&a29);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  xpc_release(*(xpc_object_t *)(v31 - 96));
  _Unwind_Resume(a1);
}

uint64_t ___ZN3ctu14XpcLoggerProxy13handleMessageERKN3xpc4dictE_block_invoke(uint64_t a1, int a2, xpc_object_t object)
{
  uint64_t v3 = *(void *)(a1 + 32);
  xpc_object_t v6 = object;
  if (object)
  {
    xpc_object_t v4 = object;
    xpc_retain(object);
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t v6 = v4;
  }
  memset(v9, 0, sizeof(v9));
  xpc::dyn_cast_or_default(&v6, (uint64_t)v9, &v7);
  std::string __p = v7;
  memset(&v7, 0, sizeof(v7));
  ctu::operator<<(v3, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  xpc_release(v4);
  return 1;
}

void sub_1920AF4DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  xpc_release(v21);
  _Unwind_Resume(a1);
}

void ctu::XpcLogServer::create(long long *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, std::__shared_weak_count_vtbl **a4@<X8>)
{
  *a4 = (std::__shared_weak_count_vtbl *)0xAAAAAAAAAAAAAAAALL;
  a4[1] = (std::__shared_weak_count_vtbl *)0xAAAAAAAAAAAAAAAALL;
  char v8 = (std::__shared_weak_count_vtbl *)operator new(0xA8uLL);
  long long v14 = *a1;
  *(void *)a1 = 0;
  *((void *)a1 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
  *(_OWORD *)std::string __p = *(_OWORD *)a3;
  uint64_t v13 = *(void *)(a3 + 16);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  ctu::XpcLogServer::XpcLogServer(v8, &v14, a2, (long long *)__p);
  *a4 = v8;
  xpc_object_t v9 = (std::__shared_weak_count *)operator new(0x20uLL);
  v9->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE2F8CA8;
  v9->__shared_owners_ = 0;
  v9->__shared_weak_owners_ = 0;
  v9[1].__vftable = v8;
  a4[1] = (std::__shared_weak_count_vtbl *)v9;
  on_zero_shared = (std::__shared_weak_count *)v8->__on_zero_shared;
  if (on_zero_shared)
  {
    if (on_zero_shared->__shared_owners_ != -1) {
      goto LABEL_6;
    }
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v8->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
    v8->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v9;
    std::__shared_weak_count::__release_weak(on_zero_shared);
  }
  else
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v8->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
    v8->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v9;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v9);
LABEL_6:
  if (SHIBYTE(v13) < 0) {
    operator delete(__p[0]);
  }
  if (*((void *)&v14 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v14 + 1));
  }
  if (v8[3].~__shared_weak_count_0)
  {
    std::shared_ptr<ctu::XpcServer>::shared_ptr[abi:ne180100]<ctu::XpcServer,void>(&v15, &v8->~__shared_weak_count_0);
    if (v15) {
      uint64_t v11 = v15 + 72;
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v15 = v11;
    (**(void (***)(void))v8[3].~__shared_weak_count_0)();
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
  }
}

void sub_1920AF6C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  _Unwind_Resume(a1);
}

void *ctu::XpcLogServer::XpcLogServer(void *a1, void *a2, char *__s, long long *a4)
{
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  xpc_object_t v7 = xpc_null_create();
  xpc_object_t v9 = 0;
  xpc_object_t v10 = v7;
  ctu::XpcServer::XpcServer((uint64_t)a1, (uint64_t)__p, &v10, &v9);
  xpc_release(v7);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  a1[9] = &unk_1EE2F7C28;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::LoggerBase((uint64_t)(a1 + 10), a4, a2);
  *a1 = &unk_1EE2F66E8;
  a1[9] = &unk_1EE2F6728;
  a1[19] = 0;
  a1[20] = 0;
  a1[18] = 0;
  return a1;
}

void sub_1920AF854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  ctu::XpcServer::~XpcServer(v17);
  _Unwind_Resume(a1);
}

void ctu::XpcLogServer::startListeningOn(void *a1, void **a2)
{
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 1174405120;
  _OWORD v9[2] = ___ZN3ctu12XpcLogServer16startListeningOnEN3xpc10connectionE_block_invoke;
  void v9[3] = &__block_descriptor_tmp_7_0;
  uint64_t v3 = *a2;
  void v9[4] = a1;
  xpc_object_t object = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  xpc_object_t v4 = (std::__shared_weak_count *)a1[2];
  if (!v4 || (v5 = a1[1], (xpc_object_t v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v7 = v6;
  char v8 = a1[3];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableINS_9XpcServerEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &__block_descriptor_tmp_37;
  void block[5] = v5;
  char v12 = v7;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = v9;
  dispatch_async(v8, block);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  xpc_release(object);
}

void ___ZN3ctu12XpcLogServer16startListeningOnEN3xpc10connectionE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(ctu::XpcServer **)(a1 + 32);
  uint64_t v1 = *(void **)(a1 + 40);
  xpc_object_t object = v1;
  if (v1) {
    xpc_retain(v1);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  ctu::XpcServer::setListener_sync((uint64_t)v2, &object);
  xpc_release(object);

  ctu::XpcServer::startListener_sync(v2);
}

void sub_1920AFA40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

xpc_object_t __copy_helper_block_e8_40c22_ZTSN3xpc10connectionE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = v3;
  if (v3) {
    return xpc_retain(v3);
  }
  xpc_object_t result = xpc_null_create();
  *(void *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_40c22_ZTSN3xpc10connectionE(uint64_t a1)
{
  *(void *)(a1 + 40) = 0;
}

void ctu::XpcLogServer::getEndpoint(ctu::XpcLogServer *this@<X0>, xpc_object_t *a2@<X8>)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  std::string v4[2] = ___ZNK3ctu12XpcLogServer11getEndpointEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_9_0;
  v4[4] = this;
  uint64_t v5 = v4;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  void v6[2] = ___ZNK3ctu20SharedSynchronizableINS_9XpcServerEE20execute_wrapped_syncIU13block_pointerFN3xpc8endpointEvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
  uint64_t v6[3] = &__block_descriptor_tmp_38;
  v6[4] = (char *)this + 8;
  v6[5] = &v5;
  xpc_object_t v7 = v6;
  uint64_t v3 = *((void *)this + 3);
  if (*((void *)this + 4))
  {
    *a2 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    *a2 = xpc_null_create();
    blocunint64_t k = MEMORY[0x1E4F143A8];
    uint64_t v9 = 0x40000000;
    xpc_object_t v10 = ___ZN8dispatch19async_and_wait_implIRU13block_pointerFN3xpc8endpointEvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS6_17integral_constantIbLb0EEE_block_invoke;
    uint64_t v11 = &__block_descriptor_tmp_40;
    char v12 = a2;
    uint64_t v13 = &v7;
    dispatch_async_and_wait(v3, &block);
  }
  else
  {
    *a2 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    *a2 = xpc_null_create();
    blocunint64_t k = MEMORY[0x1E4F143A8];
    uint64_t v9 = 0x40000000;
    xpc_object_t v10 = ___ZN8dispatch9sync_implIRU13block_pointerFN3xpc8endpointEvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS6_17integral_constantIbLb0EEE_block_invoke;
    uint64_t v11 = &__block_descriptor_tmp_39;
    char v12 = a2;
    uint64_t v13 = &v7;
    dispatch_sync(v3, &block);
  }
}

void *___ZNK3ctu12XpcLogServer11getEndpointEv_block_invoke@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  xpc_object_t result = xpc_endpoint_create(*(xpc_connection_t *)(*(void *)(a1 + 32) + 64));
  *a2 = result;
  if (!result)
  {
    xpc_object_t result = xpc_null_create();
    *a2 = result;
  }
  return result;
}

void ctu::XpcLogServer::handleServerError_sync(uint64_t a1, xpc::object *a2)
{
  uint64_t v3 = a1 + 80;
  if ((**(unsigned int (***)(uint64_t, uint64_t))(a1 + 80))(a1 + 80, 40))
  {
    uint64_t v7 = 0;
    memset(v6, 0, sizeof(v6));
    ctu::LogMessageBuffer::appendString(v6, "Server error: ");
    xpc::object::describe(a2, __p);
    ctu::LogMessageBuffer::appendString(v6, (uint64_t)__p);
    if (v5 < 0) {
      operator delete(__p[0]);
    }
    ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog(v3, 40, (ctu::LogMessageBuffer *)v6);
    ctu::LogMessageBuffer::~LogMessageBuffer((ctu::LogMessageBuffer *)v6);
  }
}

void sub_1920AFD64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  ctu::LogMessageBuffer::~LogMessageBuffer((ctu::LogMessageBuffer *)&a16);
  _Unwind_Resume(a1);
}

void ctu::XpcLogServer::handleNewClient_sync(uint64_t a1@<X0>, void **a2@<X8>)
{
  v3[0] = 0;
  v3[1] = v3;
  unsigned int v3[2] = 0x3802000000;
  v3[3] = __Block_byref_object_copy__0;
  void v3[5] = 0;
  xpc_object_t v4 = 0;
  v3[4] = __Block_byref_object_dispose__0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = ___ZN3ctu12XpcLogServer20handleNewClient_syncEN3xpc10connectionE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_19;
  void aBlock[4] = v3;
  aBlock[5] = a1;
  *a2 = _Block_copy(aBlock);
  _Block_object_dispose(v3, 8);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

__n128 __Block_byref_object_copy__0(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void ___ZN3ctu12XpcLogServer20handleNewClient_syncEN3xpc10connectionE_block_invoke(uint64_t a1, xpc_connection_t *a2, xpc_object_t *a3)
{
  char v5 = *(ctu::XpcLoggerProxy **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  if (v5)
  {
    ctu::XpcLoggerProxy::handleMessage(v5, a3);
    return;
  }
  uint64_t v7 = *(void *)(a1 + 40);
  memset(&v45, 170, sizeof(v45));
  v44.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  v44.__r_.__value_.__l.__size_ = (std::string::size_type)"kLoggerName";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)&v44, v42);
  memset(v39, 0, 24);
  xpc::dyn_cast_or_default(v42, (uint64_t)v39, &v45);
  xpc_release(v42[0]);
  memset(&v44, 170, sizeof(v44));
  v42[0] = a3;
  v42[1] = "kLoggerDomain";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)v42, &v43);
  memset(v39, 0, 24);
  xpc::dyn_cast_or_default(&v43, (uint64_t)v39, &v44);
  xpc_release(v43);
  std::string::size_type size = HIBYTE(v45.__r_.__value_.__r.__words[2]);
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v45.__r_.__value_.__l.__size_;
  }
  if (!size) {
    goto LABEL_18;
  }
  std::string::size_type v9 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v9 = v44.__r_.__value_.__l.__size_;
  }
  if (v9)
  {
    char v10 = (*(uint64_t (**)(uint64_t, std::string *, std::string *))(*(void *)v7 + 40))(v7, &v45, &v44);
    uint64_t v11 = **(unsigned int (***)(uint64_t, uint64_t))(v7 + 80);
    if (v10)
    {
      if (v11(v7 + 80, 40))
      {
        uint64_t v41 = 0;
        long long v40 = 0u;
        memset(v39, 0, sizeof(v39));
        ctu::LogMessageBuffer::appendString((std::string *)v39, "Got client checkin for client '");
        ctu::LogMessageBuffer::appendString((std::string *)v39, (uint64_t)&v45);
        ctu::LogMessageBuffer::appendString((std::string *)v39, "' in domain '");
        ctu::LogMessageBuffer::appendString((std::string *)v39, (uint64_t)&v44);
        ctu::LogMessageBuffer::appendString((std::string *)v39, "'");
        ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog(v7 + 80, 40, (ctu::LogMessageBuffer *)v39);
        ctu::LogMessageBuffer::~LogMessageBuffer((ctu::LogMessageBuffer *)v39);
      }
      char v12 = *(std::__shared_weak_count **)(v7 + 136);
      v38[0] = *(void *)(v7 + 128);
      v38[1] = v12;
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      xpc_connection_t v13 = *a2;
      xpc_connection_t v37 = v13;
      if (v13)
      {
        xpc_retain(v13);
      }
      else
      {
        xpc_connection_t v13 = (xpc_connection_t)xpc_null_create();
        xpc_connection_t v37 = v13;
      }
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v36, v45.__r_.__value_.__l.__data_, v45.__r_.__value_.__l.__size_);
      }
      else {
        std::string v36 = v45;
      }
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v35, v44.__r_.__value_.__l.__data_, v44.__r_.__value_.__l.__size_);
      }
      else {
        std::string v35 = v44;
      }
      ctu::XpcLoggerProxy::create(v38, (xpc_object_t *)&v37, (uint64_t)&v36, (uint64_t)&v35, v39);
      uint64_t v16 = *(void *)(*(void *)(a1 + 32) + 8);
      long long v17 = *(_OWORD *)v39;
      *(_OWORD *)char v39 = 0uLL;
      long long v18 = *(std::__shared_weak_count **)(v16 + 48);
      *(_OWORD *)(v16 + 40) = v17;
      if (v18) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      }
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v35.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v36.__r_.__value_.__l.__data_);
      }
      xpc_release(v13);
      xpc_connection_t v37 = 0;
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      long long v19 = *(_OWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
      uint64_t v21 = *(char **)(v7 + 152);
      unint64_t v20 = *(void *)(v7 + 160);
      if ((unint64_t)v21 >= v20)
      {
        uint64_t v23 = *(char **)(v7 + 144);
        uint64_t v24 = (v21 - v23) >> 4;
        unint64_t v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) >> 60) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        long long v34 = v19;
        uint64_t v26 = v20 - (void)v23;
        if (v26 >> 3 > v25) {
          unint64_t v25 = v26 >> 3;
        }
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v27 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v27 = v25;
        }
        if (v27 >> 60) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v28 = (char *)operator new(16 * v27);
        long long v29 = &v28[16 * v24];
        *(_OWORD *)long long v29 = v34;
        if (*((void *)&v34 + 1))
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v34 + 1) + 8), 1uLL, memory_order_relaxed);
          uint64_t v23 = *(char **)(v7 + 144);
          uint64_t v21 = *(char **)(v7 + 152);
        }
        xpc_object_t v30 = &v28[16 * v27];
        uint64_t v22 = v29 + 16;
        if (v21 == v23)
        {
          *(void *)(v7 + 144) = v29;
          *(void *)(v7 + 152) = v22;
          *(void *)(v7 + 160) = v30;
        }
        else
        {
          do
          {
            long long v31 = *((_OWORD *)v21 - 1);
            v21 -= 16;
            *((_OWORD *)v29 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v31;
            v29 -= 16;
            *(void *)uint64_t v21 = 0;
            *((void *)v21 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
          }
          while (v21 != v23);
          uint64_t v23 = *(char **)(v7 + 144);
          xpc_object_t v32 = *(char **)(v7 + 152);
          *(void *)(v7 + 144) = v29;
          *(void *)(v7 + 152) = v22;
          *(void *)(v7 + 160) = v30;
          while (v32 != v23)
          {
            xpc_object_t v33 = (std::__shared_weak_count *)*((void *)v32 - 1);
            if (v33) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v33);
            }
            v32 -= 16;
          }
        }
        if (v23) {
          operator delete(v23);
        }
      }
      else
      {
        *(_OWORD *)uint64_t v21 = v19;
        if (*((void *)&v19 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v19 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v22 = v21 + 16;
      }
      *(void *)(v7 + 152) = v22;
      goto LABEL_24;
    }
    if (v11(v7 + 80, 40))
    {
      uint64_t v41 = 0;
      long long v40 = 0u;
      memset(v39, 0, sizeof(v39));
      ctu::LogMessageBuffer::appendString((std::string *)v39, "Request DENIED for new logger '");
      ctu::LogMessageBuffer::appendString((std::string *)v39, (uint64_t)&v45);
      ctu::LogMessageBuffer::appendString((std::string *)v39, "' in domain '");
      ctu::LogMessageBuffer::appendString((std::string *)v39, (uint64_t)&v44);
      ctu::LogMessageBuffer::appendString((std::string *)v39, "'");
      ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog(v7 + 80, 40, (ctu::LogMessageBuffer *)v39);
      goto LABEL_22;
    }
  }
  else
  {
LABEL_18:
    uint64_t v15 = *(unsigned int (***)(uint64_t, uint64_t))(v7 + 80);
    uint64_t v14 = v7 + 80;
    if ((*v15)(v14, 80))
    {
      uint64_t v41 = 0;
      long long v40 = 0u;
      memset(v39, 0, sizeof(v39));
      ctu::LogMessageBuffer::appendString((std::string *)v39, "Got request for new logger, but check in failed");
      ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog(v14, 80, (ctu::LogMessageBuffer *)v39);
LABEL_22:
      ctu::LogMessageBuffer::~LogMessageBuffer((ctu::LogMessageBuffer *)v39);
    }
  }
  xpc_connection_cancel(*a2);
LABEL_24:
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
}

void sub_1920B03CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  xpc_release(v27);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  if (*(char *)(v29 - 73) < 0) {
    operator delete(*(void **)(v29 - 96));
  }
  if (*(char *)(v29 - 49) < 0) {
    operator delete(*(void **)(v29 - 72));
  }
  _Unwind_Resume(a1);
}

void ctu::XpcLogServer::handleClientError_sync(void *a1, xpc_object_t *a2, xpc::object *a3)
{
  xpc_object_t v6 = (long long *)a1[18];
  uint64_t v7 = (long long *)a1[19];
  if (v6 == v7) {
    goto LABEL_18;
  }
  while (!xpc_equal(*a2, *(xpc_object_t *)(*(void *)v6 + 96)))
  {
    if (++v6 == v7)
    {
      xpc_object_t v6 = v7;
      break;
    }
  }
  if (v6 == (long long *)a1[19])
  {
LABEL_18:
    uint64_t v14 = (unsigned int (**)(uint64_t, uint64_t))a1[10];
    uint64_t v13 = (uint64_t)(a1 + 10);
    if ((*v14)(v13, 80))
    {
      uint64_t v19 = 0;
      long long v18 = 0u;
      memset(v17, 0, sizeof(v17));
      ctu::LogMessageBuffer::appendString((std::string *)v17, "Got client error for conn ");
      ctu::LogMessageBuffer::operator std::ostream &((uint64_t)v17);
      std::ostream::operator<<();
      ctu::LogMessageBuffer::appendString((std::string *)v17, ", but no client found: ");
      xpc::object::describe(a3, __p);
      ctu::LogMessageBuffer::appendString((std::string *)v17, (uint64_t)__p);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
      ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog(v13, 80, (ctu::LogMessageBuffer *)v17);
      ctu::LogMessageBuffer::~LogMessageBuffer((ctu::LogMessageBuffer *)v17);
    }
  }
  else
  {
    if ((*(unsigned int (**)(void *, uint64_t))a1[10])(a1 + 10, 20))
    {
      uint64_t v19 = 0;
      long long v18 = 0u;
      memset(v17, 0, sizeof(v17));
      ctu::LogMessageBuffer::appendString((std::string *)v17, "Client disconnected (");
      ctu::LogMessageBuffer::operator std::ostream &((uint64_t)v17);
      std::ostream::operator<<();
      ctu::LogMessageBuffer::appendString((std::string *)v17, ": ");
      ctu::LogMessageBuffer::appendString((std::string *)v17, *(void *)v6 + 72);
      ctu::LogMessageBuffer::appendString((std::string *)v17, ")");
      ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::forceLog((uint64_t)(a1 + 10), 20, (ctu::LogMessageBuffer *)v17);
      ctu::LogMessageBuffer::~LogMessageBuffer((ctu::LogMessageBuffer *)v17);
    }
    char v8 = v6 + 1;
    std::string::size_type v9 = (long long *)a1[19];
    if (v6 + 1 != v9)
    {
      do
      {
        long long v10 = *v8;
        *(void *)char v8 = 0;
        *((void *)v8 + ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = 0;
        uint64_t v11 = (std::__shared_weak_count *)*((void *)v8 - 1);
        *(v8 - ctu::SharedRef<os_log_s,ctu::os::os_retain_functor,ctu::os::os_release_functor,os_log_s>::~SharedRef(this + 1) = v10;
        if (v11) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        }
        ++v8;
      }
      while (v8 != v9);
      xpc_object_t v6 = v8 - 1;
      char v8 = (long long *)a1[19];
    }
    while (v8 != v6)
    {
      char v12 = (std::__shared_weak_count *)*((void *)v8 - 1);
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      --v8;
    }
    a1[19] = v6;
  }
}

void sub_1920B06EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  ctu::LogMessageBuffer::~LogMessageBuffer((ctu::LogMessageBuffer *)&a16);
  _Unwind_Resume(a1);
}

uint64_t ctu::XpcLogServer::handleNewLogger_sync()
{
  return 1;
}

void ctu::XpcLoggerProxy::~XpcLoggerProxy(ctu::XpcLoggerProxy *this)
{
  *(void *)this = &unk_1EE2F6800;
  *((void *)this + 8) = &unk_1EE2F6848;
  xpc_release(*((xpc_object_t *)this + 12));
  *((void *)this + 12) = 0;
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }

  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase(this);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE2F6800;
  *((void *)this + 8) = &unk_1EE2F6848;
  xpc_release(*((xpc_object_t *)this + 12));
  *((void *)this + 12) = 0;
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase(this);

  operator delete(v2);
}

void non-virtual thunk to'ctu::XpcLoggerProxy::~XpcLoggerProxy(ctu::XpcLoggerProxy *this)
{
  uint64_t v2 = (ctu::XpcLoggerProxy *)((char *)this - 64);
  *((void *)this - 8) = &unk_1EE2F6800;
  *(void *)this = &unk_1EE2F6848;
  xpc_release(*((xpc_object_t *)this + 4));
  *((void *)this + 4) = 0;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }

  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase(v2);
}

{
  ctu::LoggerCommonBase *v2;
  void *v3;
  uint64_t vars8;

  uint64_t v2 = (ctu::XpcLoggerProxy *)((char *)this - 64);
  *((void *)this - 8) = &unk_1EE2F6800;
  *(void *)this = &unk_1EE2F6848;
  xpc_release(*((xpc_object_t *)this + 4));
  *((void *)this + 4) = 0;
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase(v2);

  operator delete(v3);
}

void ctu::XpcLogServer::~XpcLogServer(ctu::XpcLogServer *this)
{
  *(void *)this = &unk_1EE2F66E8;
  *((void *)this + 9) = &unk_1EE2F6728;
  uint64_t v2 = (void **)((char *)this + 144);
  std::vector<std::shared_ptr<ctu::LogMessage>>::__destroy_vector::operator()[abi:ne180100](&v2);
  *((void *)this + 9) = &unk_1EE2F7C28;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase((ctu::XpcLogServer *)((char *)this + 80));

  ctu::XpcServer::~XpcServer(this);
}

{
  void *v2;
  void **v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE2F66E8;
  *((void *)this + 9) = &unk_1EE2F6728;
  uint64_t v3 = (void **)((char *)this + 144);
  std::vector<std::shared_ptr<ctu::LogMessage>>::__destroy_vector::operator()[abi:ne180100](&v3);
  *((void *)this + 9) = &unk_1EE2F7C28;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase((ctu::XpcLogServer *)((char *)this + 80));
  ctu::XpcServer::~XpcServer(this);

  operator delete(v2);
}

void non-virtual thunk to'ctu::XpcLogServer::~XpcLogServer(ctu::XpcLogServer *this)
{
  uint64_t v2 = (ctu::XpcLogServer *)((char *)this - 72);
  *((void *)this - 9) = &unk_1EE2F66E8;
  *(void *)this = &unk_1EE2F6728;
  uint64_t v3 = (void **)((char *)this + 72);
  std::vector<std::shared_ptr<ctu::LogMessage>>::__destroy_vector::operator()[abi:ne180100](&v3);
  *(void *)this = &unk_1EE2F7C28;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase((ctu::XpcLogServer *)((char *)this + 8));

  ctu::XpcServer::~XpcServer(v2);
}

{
  ctu::XpcServer *v2;
  void *v3;
  void **v4;
  uint64_t vars8;

  uint64_t v2 = (ctu::XpcLogServer *)((char *)this - 72);
  *((void *)this - 9) = &unk_1EE2F66E8;
  *(void *)this = &unk_1EE2F6728;
  xpc_object_t v4 = (void **)((char *)this + 72);
  std::vector<std::shared_ptr<ctu::LogMessage>>::__destroy_vector::operator()[abi:ne180100](&v4);
  *(void *)this = &unk_1EE2F7C28;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase((ctu::XpcLogServer *)((char *)this + 8));
  ctu::XpcServer::~XpcServer(v2);

  operator delete(v3);
}

uint64_t ctu::Loggable<ctu::XpcLogServer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig(uint64_t result, char a2)
{
  *(unsigned char *)(result + 49) = a2;
  return result;
}

void ctu::Loggable<ctu::XpcLogServer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(char *)(a1 - 9) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(a1 - 32), *(void *)(a1 - 24));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 - 32);
    a2->__r_.__value_.__r.__words[2] = *(void *)(a1 - 16);
  }
}

uint64_t ctu::Loggable<ctu::XpcLogServer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 48);
}

void *ctu::Loggable<ctu::XpcLogServer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1EE2F7C28;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase((ctu::LoggerCommonBase *)(a1 + 1));
  return a1;
}

void ctu::Loggable<ctu::XpcLogServer,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(void *a1)
{
  *a1 = &unk_1EE2F7C28;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase((ctu::LoggerCommonBase *)(a1 + 1));

  operator delete(a1);
}

void std::__shared_ptr_emplace<ctu::XpcLoggerProxy>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE2F89D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ctu::XpcLoggerProxy>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE2F89D0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<ctu::XpcLoggerProxy>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

void std::__shared_ptr_pointer<ctu::LogMessage *,std::shared_ptr<ctu::LogMessage>::__shared_ptr_default_delete<ctu::LogMessage,ctu::LogMessage>,std::allocator<ctu::LogMessage>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<ctu::LogMessage *,std::shared_ptr<ctu::LogMessage>::__shared_ptr_default_delete<ctu::LogMessage,ctu::LogMessage>,std::allocator<ctu::LogMessage>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<ctu::LogMessage *,std::shared_ptr<ctu::LogMessage>::__shared_ptr_default_delete<ctu::LogMessage,ctu::LogMessage>,std::allocator<ctu::LogMessage>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<ctu::XpcLogServer *,std::shared_ptr<ctu::XpcLogServer> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ctu::XpcLogServer>(ctu::XpcLogServer*)::{lambda(ctu::XpcLogServer *)#1},std::allocator<ctu::XpcLogServer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_pointer<ctu::XpcLogServer *,std::shared_ptr<ctu::XpcLogServer> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ctu::XpcLogServer>(ctu::XpcLogServer*)::{lambda(ctu::XpcLogServer *)#1},std::allocator<ctu::XpcLogServer>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<ctu::XpcLogServer *,std::shared_ptr<ctu::XpcLogServer> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ctu::XpcLogServer>(ctu::XpcLogServer*)::{lambda(ctu::XpcLogServer *)#1},std::allocator<ctu::XpcLogServer>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<ctu::XpcLogServer> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ctu::XpcLogServer>(ctu::XpcLogServer*)::{lambda(ctu::XpcLogServer*)#1}::operator() const(ctu::XpcLogServer*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 32))();
  }
  return result;
}

uint64_t ___ZNK3ctu20SharedSynchronizableINS_9XpcServerEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void __copy_helper_block_e8_32b40c43_ZTSNSt3__110shared_ptrIKN3ctu9XpcServerEEE(void *a1, uint64_t a2)
{
  _Block_object_assign(a1 + 4, *(const void **)(a2 + 32), 7);
  uint64_t v4 = *(void *)(a2 + 48);
  a1[5] = *(void *)(a2 + 40);
  a1[6] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
}

void __destroy_helper_block_e8_32b40c43_ZTSNSt3__110shared_ptrIKN3ctu9XpcServerEEE(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(const void **)(a1 + 32);

  _Block_object_dispose(v3, 7);
}

uint64_t ___ZNK3ctu20SharedSynchronizableINS_9XpcServerEE20execute_wrapped_syncIU13block_pointerFN3xpc8endpointEvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
}

void ___ZN8dispatch9sync_implIRU13block_pointerFN3xpc8endpointEvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS6_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  (*(void (**)(xpc_object_t *__return_ptr))(**(void **)(a1 + 40) + 16))(&object);
  uint64_t v2 = *(void ***)(a1 + 32);
  xpc_object_t v3 = object;
  xpc_object_t object = xpc_null_create();
  uint64_t v4 = *v2;
  std::__shared_weak_count *v2 = v3;
  xpc_release(v4);
  xpc_release(object);
}

void ___ZN8dispatch19async_and_wait_implIRU13block_pointerFN3xpc8endpointEvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS6_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  (*(void (**)(xpc_object_t *__return_ptr))(**(void **)(a1 + 40) + 16))(&object);
  uint64_t v2 = *(void ***)(a1 + 32);
  xpc_object_t v3 = object;
  xpc_object_t object = xpc_null_create();
  uint64_t v4 = *v2;
  std::__shared_weak_count *v2 = v3;
  xpc_release(v4);
  xpc_release(object);
}

void *__cdecl CFAllocatorAllocate(CFAllocatorRef allocator, CFIndex size, CFOptionFlags hint)
{
  return (void *)MEMORY[0x1F40D70E8](allocator, size, hint);
}

CFAllocatorRef CFAllocatorCreate(CFAllocatorRef allocator, CFAllocatorContext *context)
{
  return (CFAllocatorRef)MEMORY[0x1F40D70F8](allocator, context);
}

void CFAllocatorDeallocate(CFAllocatorRef allocator, void *ptr)
{
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x1F40D7170](allocator, values, numValues, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1F40D71B8](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1F40D71D8]();
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1F40D7420]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1F40D7430](BOOLean);
}

CFStringRef CFCopyDescription(CFTypeRef cf)
{
  return (CFStringRef)MEMORY[0x1F40D77A8](cf);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1F40D77E8](allocator, bytes, length);
}

CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return (CFDataRef)MEMORY[0x1F40D7818](allocator, bytes, length, bytesDeallocator);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1F40D7830](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1F40D7850](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x1F40D7860]();
}

CFDateFormatterRef CFDateFormatterCreate(CFAllocatorRef allocator, CFLocaleRef locale, CFDateFormatterStyle dateStyle, CFDateFormatterStyle timeStyle)
{
  return (CFDateFormatterRef)MEMORY[0x1F40D78B0](allocator, locale, dateStyle, timeStyle);
}

CFStringRef CFDateFormatterCreateStringWithAbsoluteTime(CFAllocatorRef allocator, CFDateFormatterRef formatter, CFAbsoluteTime at)
{
  return (CFStringRef)MEMORY[0x1F40D78D8](allocator, formatter, at);
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7978](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D7998](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x1F40D79C0](theDict);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1F40D7A00]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1F40D7A10](theDict, key);
}

CFStringRef CFErrorCopyDescription(CFErrorRef err)
{
  return (CFStringRef)MEMORY[0x1F40D7A80](err);
}

CFTypeID CFErrorGetTypeID(void)
{
  return MEMORY[0x1F40D7AC0]();
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1F40D7B80](cf);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1F40D7D80](allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1F40D7E10]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1F40D7E20](number, theType, valuePtr);
}

CFPropertyListRef CFPreferencesCopyValue(CFStringRef key, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7ED0](key, applicationID, userName, hostName);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1F40D8048](cf);
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1F40D8388](theString1, theString2, compareOptions);
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x1F40D8438](alloc, bytes, numBytes, *(void *)&encoding, isExternalRepresentation);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1F40D8448](alloc, cStr, *(void *)&encoding);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x1F40D8490](alloc, formatOptions, format);
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return MEMORY[0x1F40D8500](theString, range.location, range.length, *(void *)&encoding, lossByte, isExternalRepresentation, buffer, maxBufLen);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1F40D8510](theString, buffer, bufferSize, *(void *)&encoding);
}

UniChar CFStringGetCharacterAtIndex(CFStringRef theString, CFIndex idx)
{
  return MEMORY[0x1F40D8528](theString, idx);
}

double CFStringGetDoubleValue(CFStringRef str)
{
  MEMORY[0x1F40D8548](str);
  return result;
}

SInt32 CFStringGetIntValue(CFStringRef str)
{
  return MEMORY[0x1F40D8568](str);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1F40D8578](theString);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1F40D85F0]();
}

CFURLRef CFURLCreateWithString(CFAllocatorRef allocator, CFStringRef URLString, CFURLRef baseURL)
{
  return (CFURLRef)MEMORY[0x1F40D88C0](allocator, URLString, baseURL);
}

Boolean CFURLGetFileSystemRepresentation(CFURLRef url, Boolean resolveAgainstBase, UInt8 *buffer, CFIndex maxBufLen)
{
  return MEMORY[0x1F40D8908](url, resolveAgainstBase, buffer, maxBufLen);
}

CFTypeID CFURLGetTypeID(void)
{
  return MEMORY[0x1F40D8928]();
}

CFTypeID SecIdentityGetTypeID(void)
{
  return MEMORY[0x1F40F6DD0]();
}

OSStatus SecTrustEvaluate(SecTrustRef trust, SecTrustResultType *result)
{
  return MEMORY[0x1F40F71F0](trust, result);
}

OSStatus SecTrustSetAnchorCertificates(SecTrustRef trust, CFArrayRef anchorCertificates)
{
  return MEMORY[0x1F40F7258](trust, anchorCertificates);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1F40C9A70](aBlock);
}

void _Block_object_assign(void *a1, const void *a2, const int a3)
{
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

uint64_t _CFXPCCreateCFObjectFromXPCObject()
{
  return MEMORY[0x1F40D9438]();
}

uint64_t _CFXPCCreateXPCObjectFromCFObject()
{
  return MEMORY[0x1F40D9450]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

std::string::size_type std::string::find(const std::string *this, std::string::value_type __c, std::string::size_type __pos)
{
  return MEMORY[0x1F417E380](this, __c, __pos);
}

int std::string::compare(const std::string *this, const std::string::value_type *__s)
{
  return MEMORY[0x1F417E390](this, __s);
}

std::string *__cdecl std::locale::name(std::string *__return_ptr retstr, const std::locale *this)
{
  return (std::string *)MEMORY[0x1F417E400](retstr, this);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x1F417E408](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x1F417E418](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1F417E448](this, a2);
}

std::exception_ptr *__cdecl std::exception_ptr::exception_ptr(std::exception_ptr *this, const std::exception_ptr *a2)
{
  return (std::exception_ptr *)MEMORY[0x1F417E4A0](this, a2);
}

void std::exception_ptr::~exception_ptr(std::exception_ptr *this)
{
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x1F417E4B8](this, a2);
}

{
  return (std::runtime_error *)MEMORY[0x1F417E4D0](this, a2);
}

void std::runtime_error::~runtime_error(std::runtime_error *this)
{
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1F417E530](this);
}

std::regex_error *__cdecl std::regex_error::regex_error(std::regex_error *this, std::regex_constants::error_type __ecode)
{
  return (std::regex_error *)MEMORY[0x1F417E550](this, *(void *)&__ecode);
}

std::__sp_mut *__cdecl std::__get_sp_mut(const void *a1)
{
  return (std::__sp_mut *)MEMORY[0x1F417E580](a1);
}

void std::string::__grow_by_and_replace(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add, const std::string::value_type *__p_new_stuff)
{
}

std::string *__cdecl std::string::erase(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E5A0](this, __pos, __n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E5C0](this, __s, __n);
}

std::string *__cdecl std::string::append(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  return (std::string *)MEMORY[0x1F417E5D0](this, __n, __c);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E608](this, __pos, __s, __n);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
}

std::string *__cdecl std::string::replace(std::string *this, std::string::size_type __pos, std::string::size_type __n1, const std::string::value_type *__s, std::string::size_type __n2)
{
  return (std::string *)MEMORY[0x1F417E628](this, __pos, __n1, __s, __n2);
}

std::string *__cdecl std::string::replace(std::string *this, std::string::size_type __pos, std::string::size_type __n1, std::string::size_type __n2, std::string::value_type __c)
{
  return (std::string *)MEMORY[0x1F417E638](this, __pos, __n1, __n2, __c);
}

void std::string::reserve(std::string *this, std::string::size_type __requested_capacity)
{
}

void std::string::__grow_by(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add)
{
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n, std::allocator<char> *__a)
{
  return (std::string *)MEMORY[0x1F417E660](this, __str, __pos, __n, __a);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x1F417E670](this, __str);
}

uint64_t std::filebuf::open()
{
  return MEMORY[0x1F417E728]();
}

uint64_t std::filebuf::close()
{
  return MEMORY[0x1F417E730]();
}

uint64_t std::filebuf::basic_filebuf()
{
  return MEMORY[0x1F417E740]();
}

uint64_t std::filebuf::~filebuf()
{
  return MEMORY[0x1F417E748]();
}

uint64_t std::istream::read()
{
  return MEMORY[0x1F417E768]();
}

uint64_t std::istream::seekg()
{
  return MEMORY[0x1F417E780]();
}

uint64_t std::istream::tellg()
{
  return MEMORY[0x1F417E788]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x1F417E7C0]();
}

uint64_t std::ostream::put()
{
  return MEMORY[0x1F417E830]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x1F417E838]();
}

uint64_t std::ostream::write()
{
  return MEMORY[0x1F417E840]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x1F417E848]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x1F417E850]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x1F417E860]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x1F417E868]();
}

{
  return MEMORY[0x1F417E880]();
}

{
  return MEMORY[0x1F417E890]();
}

{
  return MEMORY[0x1F417E898]();
}

{
  return MEMORY[0x1F417E8A0]();
}

{
  return MEMORY[0x1F417E8A8]();
}

{
  return MEMORY[0x1F417E8B0]();
}

{
  return MEMORY[0x1F417E8C8]();
}

{
  return MEMORY[0x1F417E8D0]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x1F417E940]();
}

std::regex_traits<char>::char_class_type std::__get_classname(const char *__s, BOOL __icase)
{
  return MEMORY[0x1F417E960](__s, __icase);
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x1F417E978]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x1F417E980]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x1F417EA90](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

std::string *__cdecl std::__get_collation_name(std::string *__return_ptr retstr, const char *__s)
{
  return (std::string *)MEMORY[0x1F417EAA8](retstr, __s);
}

int std::stoi(const std::string *__str, size_t *__idx, int __base)
{
  return MEMORY[0x1F417EBE0](__str, __idx, *(void *)&__base);
}

uint64_t std::stol(const std::string *__str, size_t *__idx, int __base)
{
  return MEMORY[0x1F417EBE8](__str, __idx, *(void *)&__base);
}

void std::mutex::lock(std::mutex *this)
{
}

void std::mutex::unlock(std::mutex *this)
{
}

void std::mutex::~mutex(std::mutex *this)
{
}

uint64_t std::stoll(const std::string *__str, size_t *__idx, int __base)
{
  return MEMORY[0x1F417EC18](__str, __idx, *(void *)&__base);
}

unint64_t std::stoul(const std::string *__str, size_t *__idx, int __base)
{
  return MEMORY[0x1F417EC20](__str, __idx, *(void *)&__base);
}

std::chrono::steady_clock::time_point std::chrono::steady_clock::now(void)
{
  return (std::chrono::steady_clock::time_point)MEMORY[0x1F417EC90]();
}

std::locale *__cdecl std::locale::locale(std::locale *this, const std::locale *a2)
{
  return (std::locale *)MEMORY[0x1F417ECE0](this, a2);
}

std::locale *__cdecl std::locale::locale(std::locale *this)
{
  return (std::locale *)MEMORY[0x1F417ECE8](this);
}

void std::locale::~locale(std::locale *this)
{
}

unint64_t std::stoull(const std::string *__str, size_t *__idx, int __base)
{
  return MEMORY[0x1F417ED00](__str, __idx, *(void *)&__base);
}

void std::__sp_mut::lock(std::__sp_mut *this)
{
}

void std::__sp_mut::unlock(std::__sp_mut *this)
{
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x1F417EE40]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, double __val)
{
  return (std::string *)MEMORY[0x1F417EE58](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x1F417EE78](retstr, *(void *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, uint64_t __val)
{
  return (std::string *)MEMORY[0x1F417EE80](retstr, __val);
}

{
  return (std::string *)MEMORY[0x1F417EE90](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x1F417EE88](retstr, __val);
}

{
  return (std::string *)MEMORY[0x1F417EE98](retstr, __val);
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x1F417EEA0]();
}

void std::exception::~exception(std::exception *this)
{
}

std::terminate_handler std::set_terminate(std::terminate_handler a1)
{
  return (std::terminate_handler)MEMORY[0x1F417EEF8](a1);
}

std::exception_ptr std::current_exception(void)
{
  return (std::exception_ptr)MEMORY[0x1F417EF08]();
}

void std::rethrow_exception(std::exception_ptr a1)
{
}

void std::terminate(void)
{
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz, const std::nothrow_t *a2)
{
  while (1)
    ;
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1F417EF30](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x1F40C9B60](lpfunc, obj, lpdso_handle);
}

void __cxa_bad_typeid(void)
{
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1F417EF48](a1);
}

char *__cxa_demangle(const char *lpmangled, char *lpout, size_t *lpoutlen, int *lpstatus)
{
  return (char *)MEMORY[0x1F417EF58](lpmangled, lpout, lpoutlen, lpstatus);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_guard_abort(__guard *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1F417EF80](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_rethrow(void)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

int __darwin_check_fd_set_overflow(int a1, const void *a2, int a3)
{
  return MEMORY[0x1F40C9B68](*(void *)&a1, a2, *(void *)&a3);
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x1F417EFA8](lpsrc, lpstype, lpdtype, s2d);
}

int *__error(void)
{
  return (int *)MEMORY[0x1F40C9B88]();
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1F40C9C18](*(void *)&a1, a2);
}

uint64_t __memset_chk()
{
  return MEMORY[0x1F40C9C38]();
}

uint64_t __strlcpy_chk()
{
  return MEMORY[0x1F40C9CD8]();
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1F40C9CF8](*(void *)&a1);
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1F40C9D00](*(void *)&a1);
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void abort(void)
{
}

int backtrace(void **a1, int a2)
{
  return MEMORY[0x1F40CA4F8](a1, *(void *)&a2);
}

char **__cdecl backtrace_symbols(void *const *a1, int a2)
{
  return (char **)MEMORY[0x1F40CA508](a1, *(void *)&a2);
}

void bzero(void *a1, size_t a2)
{
}

void cfmakeraw(termios *a1)
{
}

int cfsetspeed(termios *a1, speed_t a2)
{
  return MEMORY[0x1F40CB380](a1, a2);
}

int chmod(const char *a1, mode_t a2)
{
  return MEMORY[0x1F40CB3A0](a1, a2);
}

kern_return_t clock_get_time(clock_serv_t clock_serv, mach_timespec_t *cur_time)
{
  return MEMORY[0x1F40CB3C0](*(void *)&clock_serv, cur_time);
}

int close(int a1)
{
  return MEMORY[0x1F40CB3F8](*(void *)&a1);
}

int closedir(DIR *a1)
{
  return MEMORY[0x1F40CB400](a1);
}

int deflate(z_streamp strm, int flush)
{
  return MEMORY[0x1F4182BD0](strm, *(void *)&flush);
}

int deflateEnd(z_streamp strm)
{
  return MEMORY[0x1F4182BE0](strm);
}

int deflateInit2_(z_streamp strm, int level, int method, int windowBits, int memLevel, int strategy, const char *version, int stream_size)
{
  return MEMORY[0x1F4182BE8](strm, *(void *)&level, *(void *)&method, *(void *)&windowBits, *(void *)&memLevel, *(void *)&strategy, version, *(void *)&stream_size);
}

void dispatch_activate(dispatch_object_t object)
{
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_async_and_wait(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
}

void dispatch_barrier_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
}

dispatch_data_t dispatch_data_create(const void *buffer, size_t size, dispatch_queue_t queue, dispatch_block_t destructor)
{
  return (dispatch_data_t)MEMORY[0x1F40CBA10](buffer, size, queue, destructor);
}

size_t dispatch_data_get_size(dispatch_data_t data)
{
  return MEMORY[0x1F40CBA48](data);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1F40CBA60](identifier, flags);
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1F40CBA88]();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBAC0](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBB8](attr, *(void *)&qos_class, *(void *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBC0](label, attr);
}

dispatch_queue_t dispatch_queue_create_with_target_V2(const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBD0](label, attr, target);
}

void dispatch_release(dispatch_object_t object)
{
}

void dispatch_resume(dispatch_object_t object)
{
}

void dispatch_retain(dispatch_object_t object)
{
}

uint64_t dispatch_set_qos_class()
{
  return MEMORY[0x1F40CBC68]();
}

void dispatch_set_target_queue(dispatch_object_t object, dispatch_queue_t queue)
{
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1F40CBC98](type, handle, mask, queue);
}

void dispatch_source_set_cancel_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
}

void dispatch_suspend(dispatch_object_t object)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1F40CBD30](when, delta);
}

int dlclose(void *__handle)
{
  return MEMORY[0x1F40CBDA8](__handle);
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1F40CBDB8](__path, *(void *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1F40CBDC8](__handle, __symbol);
}

int fchmod(int a1, mode_t a2)
{
  return MEMORY[0x1F40CC028](*(void *)&a1, a2);
}

int fclose(FILE *a1)
{
  return MEMORY[0x1F40CC050](a1);
}

int feof(FILE *a1)
{
  return MEMORY[0x1F40CC098](a1);
}

int fflush(FILE *a1)
{
  return MEMORY[0x1F40CC0C8](a1);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1F40CC1C0](__filename, __mode);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1F40CC200](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x1F40CC2B8](*(void *)&a1, a2);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1F40CC338](__ptr, __size, __nitems, __stream);
}

pid_t getpid(void)
{
  return MEMORY[0x1F40CC4A0]();
}

const char *getprogname(void)
{
  return (const char *)MEMORY[0x1F40CC4C0]();
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x1F40CC568](a1, a2);
}

kern_return_t host_get_clock_service(host_t host, clock_id_t clock_id, clock_serv_t *clock_serv)
{
  return MEMORY[0x1F40CC5F0](*(void *)&host, *(void *)&clock_id, clock_serv);
}

int inflate(z_streamp strm, int flush)
{
  return MEMORY[0x1F4182CB0](strm, *(void *)&flush);
}

int inflateEnd(z_streamp strm)
{
  return MEMORY[0x1F4182CB8](strm);
}

int inflateInit2_(z_streamp strm, int windowBits, const char *version, int stream_size)
{
  return MEMORY[0x1F4182CC8](strm, *(void *)&windowBits, version, *(void *)&stream_size);
}

int ioctl(int a1, unint64_t a2, ...)
{
  return MEMORY[0x1F40CC690](*(void *)&a1, a2);
}

tm *__cdecl localtime_r(const time_t *a1, tm *a2)
{
  return (tm *)MEMORY[0x1F40CC870](a1, a2);
}

off_t lseek(int a1, off_t a2, int a3)
{
  return MEMORY[0x1F40CC8F8](*(void *)&a1, a2, *(void *)&a3);
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x1F40CC910]();
}

mach_port_t mach_host_self(void)
{
  return MEMORY[0x1F40CC950]();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x1F40CCA60](info);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1F40CCB10](__size);
}

malloc_zone_t *__cdecl malloc_create_zone(vm_size_t start_size, unsigned int flags)
{
  return (malloc_zone_t *)MEMORY[0x1F40CCB20](start_size, *(void *)&flags);
}

void malloc_destroy_zone(malloc_zone_t *zone)
{
}

size_t malloc_good_size(size_t size)
{
  return MEMORY[0x1F40CCB58](size);
}

void malloc_set_zone_name(malloc_zone_t *zone, const char *name)
{
}

void *__cdecl malloc_zone_calloc(malloc_zone_t *zone, size_t num_items, size_t size)
{
  return (void *)MEMORY[0x1F40CCBF8](zone, num_items, size);
}

void malloc_zone_free(malloc_zone_t *zone, void *ptr)
{
}

void *__cdecl malloc_zone_malloc(malloc_zone_t *zone, size_t size)
{
  return (void *)MEMORY[0x1F40CCC18](zone, size);
}

void *__cdecl malloc_zone_memalign(malloc_zone_t *zone, size_t alignment, size_t size)
{
  return (void *)MEMORY[0x1F40CCC20](zone, alignment, size);
}

void *__cdecl malloc_zone_realloc(malloc_zone_t *zone, void *ptr, size_t size)
{
  return (void *)MEMORY[0x1F40CCC30](zone, ptr, size);
}

void *__cdecl malloc_zone_valloc(malloc_zone_t *zone, size_t size)
{
  return (void *)MEMORY[0x1F40CCC50](zone, size);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCD8](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1F40CCCE8](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD20](__b, *(void *)&__c, __len);
}

int mkdir(const char *a1, mode_t a2)
{
  return MEMORY[0x1F40CCDD0](a1, a2);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x1F40CCE40](a1, a2, *(void *)&a3, *(void *)&a4, *(void *)&a5, a6);
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x1F40CCE88](a1, a2);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1F4181638](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1F4181648]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1F4181660](a1);
}

{
  MEMORY[0x1F4181668](context);
}

{
  return (void *)MEMORY[0x1F4181670]();
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1F41817B0]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1F41817B8]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1F41817C0]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1F41818B0](a1);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1F40CD0E0](a1, *(void *)&a2);
}

DIR *__cdecl opendir(const char *a1)
{
  return (DIR *)MEMORY[0x1F40CD120](a1);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1F40CD360](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1F40CD3B8](oslog, type);
}

void os_release(void *object)
{
}

void *__cdecl os_retain(void *object)
{
  return (void *)MEMORY[0x1F40CD548](object);
}

uint64_t os_transaction_create()
{
  return MEMORY[0x1F40CD5A0]();
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

BOOL os_unfair_lock_trylock(os_unfair_lock_t lock)
{
  return MEMORY[0x1F40CD5F0](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

int pipe(int a1[2])
{
  return MEMORY[0x1F40CD760](a1);
}

int posix_spawn(pid_t *a1, const char *a2, const posix_spawn_file_actions_t *a3, const posix_spawnattr_t *a4, char *const __argv[], char *const __envp[])
{
  return MEMORY[0x1F40CD790](a1, a2, a3, a4, __argv, __envp);
}

int pthread_cond_broadcast(pthread_cond_t *a1)
{
  return MEMORY[0x1F40CD978](a1);
}

int pthread_cond_destroy(pthread_cond_t *a1)
{
  return MEMORY[0x1F40CD980](a1);
}

int pthread_cond_init(pthread_cond_t *a1, const pthread_condattr_t *a2)
{
  return MEMORY[0x1F40CD988](a1, a2);
}

int pthread_cond_signal(pthread_cond_t *a1)
{
  return MEMORY[0x1F40CD990](a1);
}

int pthread_cond_timedwait_relative_np(pthread_cond_t *a1, pthread_mutex_t *a2, const timespec *a3)
{
  return MEMORY[0x1F40CD9A0](a1, a2, a3);
}

int pthread_cond_wait(pthread_cond_t *a1, pthread_mutex_t *a2)
{
  return MEMORY[0x1F40CD9A8](a1, a2);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x1F40CD9B8](a1, a2, a3, a4);
}

int pthread_join(pthread_t a1, void **a2)
{
  return MEMORY[0x1F40CDA38](a1, a2);
}

int pthread_key_create(pthread_key_t *a1, void (__cdecl *a2)(void *))
{
  return MEMORY[0x1F40CDA40](a1, a2);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA78](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1F40CDA80](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA88](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA98](a1);
}

qos_class_t qos_class_self(void)
{
  return MEMORY[0x1F40CDBD8]();
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x1F40CDC50](*(void *)&a1, a2, a3);
}

dirent *__cdecl readdir(DIR *a1)
{
  return (dirent *)MEMORY[0x1F40CDC60](a1);
}

int reboot_np(int howto, const char *message)
{
  return MEMORY[0x1F40CDCB0](*(void *)&howto, message);
}

BOOL remove(const std::__fs::filesystem::path *__p, std::error_code *__ec)
{
  return MEMORY[0x1F40CDD10](__p, __ec);
}

void rename(const std::__fs::filesystem::path *__from, const std::__fs::filesystem::path *__to, std::error_code *__ec)
{
}

int select(int a1, fd_set *a2, fd_set *a3, fd_set *a4, timeval *a5)
{
  return MEMORY[0x1F40CDED8](*(void *)&a1, a2, a3, a4, a5);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1F40CE080](__str, __size, __format);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1F40CE110](a1, a2);
}

int statvfs(const char *a1, statvfs *a2)
{
  return MEMORY[0x1F40CE120](a1, a2);
}

int strcasecmp(const char *a1, const char *a2)
{
  return MEMORY[0x1F40CE138](a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1F40CE158](__s1, __s2);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1F40CE188](*(void *)&__errnum);
}

size_t strftime(char *a1, size_t a2, const char *a3, const tm *a4)
{
  return MEMORY[0x1F40CE198](a1, a2, a3, a4);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1F40CE1C8](__s);
}

int strncasecmp(const char *a1, const char *a2, size_t a3)
{
  return MEMORY[0x1F40CE1D8](a1, a2, a3);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x1F40CE1F8](__dst, __src, __n);
}

size_t strnlen(const char *__s1, size_t __n)
{
  return MEMORY[0x1F40CE208](__s1, __n);
}

char *__cdecl strstr(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x1F40CE258](__s1, __s2);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1F40CE2A0](__str, __endptr, *(void *)&__base);
}

unint64_t strtoul(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1F40CE2E0](__str, __endptr, *(void *)&__base);
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return MEMORY[0x1F40CE3C0](a1, *(void *)&a2, a3, a4, a5, a6);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x1F40CE3D0](a1, a2, a3, a4, a5);
}

void syslog(int a1, const char *a2, ...)
{
}

int tcgetattr(int a1, termios *a2)
{
  return MEMORY[0x1F40CE4E8](*(void *)&a1, a2);
}

int tcsetattr(int a1, int a2, const termios *a3)
{
  return MEMORY[0x1F40CE4F8](*(void *)&a1, *(void *)&a2, a3);
}

int unlink(const char *a1)
{
  return MEMORY[0x1F40CE5E0](a1);
}

void uuid_unparse_lower(const uuid_t uu, uuid_string_t out)
{
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x1F40CE790](__str, __size, __format, a4);
}

pid_t waitpid(pid_t a1, int *a2, int a3)
{
  return MEMORY[0x1F40CE7C8](*(void *)&a1, a2, *(void *)&a3);
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return MEMORY[0x1F40CE928](*(void *)&__fd, __buf, __nbyte);
}

void xpc_array_append_value(xpc_object_t xarray, xpc_object_t value)
{
}

BOOL xpc_array_apply(xpc_object_t xarray, xpc_array_applier_t applier)
{
  return MEMORY[0x1F40CEA18](xarray, applier);
}

xpc_object_t xpc_array_create(xpc_object_t *objects, size_t count)
{
  return (xpc_object_t)MEMORY[0x1F40CEA30](objects, count);
}

size_t xpc_array_get_count(xpc_object_t xarray)
{
  return MEMORY[0x1F40CEA58](xarray);
}

xpc_object_t xpc_array_get_value(xpc_object_t xarray, size_t index)
{
  return (xpc_object_t)MEMORY[0x1F40CEAA8](xarray, index);
}

BOOL xpc_BOOL_get_value(xpc_object_t xBOOL)
{
  return MEMORY[0x1F40CEB18](xBOOL);
}

void xpc_connection_cancel(xpc_connection_t connection)
{
}

xpc_connection_t xpc_connection_create_from_endpoint(xpc_endpoint_t endpoint)
{
  return (xpc_connection_t)MEMORY[0x1F40CEBC0](endpoint);
}

uint64_t xpc_connection_get_audit_token()
{
  return MEMORY[0x1F40CEBE8]();
}

pid_t xpc_connection_get_pid(xpc_connection_t connection)
{
  return MEMORY[0x1F40CEC20](connection);
}

void xpc_connection_resume(xpc_connection_t connection)
{
}

void xpc_connection_send_barrier(xpc_connection_t connection, dispatch_block_t barrier)
{
}

void xpc_connection_send_message(xpc_connection_t connection, xpc_object_t message)
{
}

void xpc_connection_send_message_with_reply(xpc_connection_t connection, xpc_object_t message, dispatch_queue_t replyq, xpc_handler_t handler)
{
}

void xpc_connection_set_event_handler(xpc_connection_t connection, xpc_handler_t handler)
{
}

void xpc_connection_set_target_queue(xpc_connection_t connection, dispatch_queue_t targetq)
{
}

char *__cdecl xpc_copy_description(xpc_object_t object)
{
  return (char *)MEMORY[0x1F40CED28](object);
}

uint64_t xpc_copy_entitlement_for_token()
{
  return MEMORY[0x1F40CED38]();
}

xpc_object_t xpc_data_create_with_dispatch_data(dispatch_data_t ddata)
{
  return (xpc_object_t)MEMORY[0x1F40CEDA0](ddata);
}

const void *__cdecl xpc_data_get_bytes_ptr(xpc_object_t xdata)
{
  return (const void *)MEMORY[0x1F40CEDB0](xdata);
}

size_t xpc_data_get_length(xpc_object_t xdata)
{
  return MEMORY[0x1F40CEDC0](xdata);
}

int64_t xpc_date_get_value(xpc_object_t xdate)
{
  return MEMORY[0x1F40CEDF0](xdate);
}

BOOL xpc_dictionary_apply(xpc_object_t xdict, xpc_dictionary_applier_t applier)
{
  return MEMORY[0x1F40CEE08](xdict, applier);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x1F40CEE20](keys, values, count);
}

xpc_object_t xpc_dictionary_create_reply(xpc_object_t original)
{
  return (xpc_object_t)MEMORY[0x1F40CEE40](original);
}

size_t xpc_dictionary_get_count(xpc_object_t xdict)
{
  return MEMORY[0x1F40CEE88](xdict);
}

xpc_connection_t xpc_dictionary_get_remote_connection(xpc_object_t xdict)
{
  return (xpc_connection_t)MEMORY[0x1F40CEEE0](xdict);
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return (const char *)MEMORY[0x1F40CEEF0](xdict, key);
}

xpc_object_t xpc_dictionary_get_value(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x1F40CEF10](xdict, key);
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
}

double xpc_double_get_value(xpc_object_t xdouble)
{
  MEMORY[0x1F40CEFF8](xdouble);
  return result;
}

xpc_endpoint_t xpc_endpoint_create(xpc_connection_t connection)
{
  return (xpc_endpoint_t)MEMORY[0x1F40CF018](connection);
}

BOOL xpc_equal(xpc_object_t object1, xpc_object_t object2)
{
  return MEMORY[0x1F40CF040](object1, object2);
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x1F40CF148](object);
}

xpc_object_t xpc_int64_create(int64_t value)
{
  return (xpc_object_t)MEMORY[0x1F40CF188](value);
}

int64_t xpc_int64_get_value(xpc_object_t xint)
{
  return MEMORY[0x1F40CF190](xint);
}

xpc_object_t xpc_null_create(void)
{
  return (xpc_object_t)MEMORY[0x1F40CF208]();
}

void xpc_release(xpc_object_t object)
{
}

xpc_object_t xpc_retain(xpc_object_t object)
{
  return (xpc_object_t)MEMORY[0x1F40CF248](object);
}

xpc_object_t xpc_string_create(const char *string)
{
  return (xpc_object_t)MEMORY[0x1F40CF290](string);
}

xpc_object_t xpc_string_create_with_format_and_arguments(const char *fmt, va_list ap)
{
  return (xpc_object_t)MEMORY[0x1F40CF2B0](fmt, ap);
}

size_t xpc_string_get_length(xpc_object_t xstring)
{
  return MEMORY[0x1F40CF2B8](xstring);
}

const char *__cdecl xpc_string_get_string_ptr(xpc_object_t xstring)
{
  return (const char *)MEMORY[0x1F40CF2C8](xstring);
}

uint64_t xpc_uint64_get_value(xpc_object_t xuint)
{
  return MEMORY[0x1F40CF330](xuint);
}

const uint8_t *__cdecl xpc_uuid_get_bytes(xpc_object_t xuuid)
{
  return (const uint8_t *)MEMORY[0x1F40CF368](xuuid);
}