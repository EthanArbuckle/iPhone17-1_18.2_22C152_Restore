__CFDictionary *sub_19D70FCC0()
{
  uint64_t v0;
  uint64_t v1;
  const char *v2;
  char *v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  char *v11;
  NSObject *v12;
  const char *v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  __CFDictionary *Mutable;
  CFNumberRef v31;
  CFNumberRef v32;
  CFNumberRef v33;
  CFNumberRef v34;
  CFNumberRef v35;
  CFNumberRef v36;
  CFNumberRef v37;
  CFNumberRef v38;
  const char *v39;
  char *v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int *v47;
  char *v48;
  unsigned char buf[12];
  __int16 v51;
  char *v52;
  statfs v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E4F143B8];
  memset(&v53, 0, 512);
  if (statfs("/", &v53) == -1)
  {
    v2 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    v3 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v3) {
      v2 = v3 + 1;
    }
    v4 = __error();
    strerror(*v4);
    _MGLog((uint64_t)v2, 4120, @"statfs(%s): %s", v5, v6, v7, v8, v9, (char)"/");
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
      return 0;
    }
    v10 = __error();
    v11 = strerror(*v10);
    *(_DWORD *)buf = 136315394;
    *(void *)&buf[4] = "/";
    v51 = 2080;
    v52 = v11;
    v12 = MEMORY[0x1E4F14500];
    goto LABEL_21;
  }
  v0 = sub_19D7101F0((const char *)&v53);
  v1 = v0 + v53.f_bavail * v53.f_bsize;
  bzero(&v53, 0x878uLL);
  if (statfs("/mnt4", &v53) == -1)
  {
    v13 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    v14 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v14) {
      v13 = v14 + 1;
    }
    v15 = __error();
    strerror(*v15);
    _MGLog((uint64_t)v13, 4133, @"statfs(%s): %s", v16, v17, v18, v19, v20, (char)"/mnt4");
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      v21 = __error();
      v22 = strerror(*v21);
      *(_DWORD *)buf = 136315394;
      *(void *)&buf[4] = "/mnt4";
      v51 = 2080;
      v52 = v22;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "statfs(%s): %s", buf, 0x16u);
    }
  }
  else
  {
    v1 += sub_19D7101F0((const char *)&v53);
  }
  bzero(&v53, 0x878uLL);
  if (statfs("/private/var", &v53) == -1)
  {
    v39 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    v40 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v40) {
      v39 = v40 + 1;
    }
    v41 = __error();
    strerror(*v41);
    _MGLog((uint64_t)v39, 4143, @"statfs(%s): %s", v42, v43, v44, v45, v46, (char)"/private/var");
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
      return 0;
    }
    v47 = __error();
    v48 = strerror(*v47);
    *(_DWORD *)buf = 136315394;
    *(void *)&buf[4] = "/private/var";
    v51 = 2080;
    v52 = v48;
    v12 = MEMORY[0x1E4F14500];
LABEL_21:
    _os_log_impl(&dword_19D70E000, v12, OS_LOG_TYPE_DEFAULT, "statfs(%s): %s", buf, 0x16u);
    return 0;
  }
  v23 = v53.f_blocks * v53.f_bsize - v0;
  v24 = v23 - sub_19D7101F0((const char *)&v53);
  v25 = sub_19D710358();
  v26 = v53.f_bavail * v53.f_bsize;
  v27 = v26 >= 0xC800000;
  v28 = v26 - 209715200;
  if (v27) {
    v29 = v28;
  }
  else {
    v29 = 0;
  }
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  *(void *)buf = v0;
  v31 = CFNumberCreate(0, kCFNumberSInt64Type, buf);
  CFDictionarySetValue(Mutable, @"TotalSystemCapacity", v31);
  CFRelease(v31);
  *(void *)buf = 0;
  v32 = CFNumberCreate(0, kCFNumberSInt64Type, buf);
  CFDictionarySetValue(Mutable, @"TotalSystemAvailable", v32);
  CFRelease(v32);
  *(void *)buf = v23;
  v33 = CFNumberCreate(0, kCFNumberSInt64Type, buf);
  CFDictionarySetValue(Mutable, @"TotalDataCapacity", v33);
  CFRelease(v33);
  *(void *)buf = v24;
  v34 = CFNumberCreate(0, kCFNumberSInt64Type, buf);
  CFDictionarySetValue(Mutable, @"TotalDataAvailable", v34);
  CFRelease(v34);
  *(void *)buf = v25;
  v35 = CFNumberCreate(0, kCFNumberSInt64Type, buf);
  CFDictionarySetValue(Mutable, @"TotalDiskCapacity", v35);
  CFRelease(v35);
  *(void *)buf = 209715200;
  v36 = CFNumberCreate(0, kCFNumberSInt64Type, buf);
  CFDictionarySetValue(Mutable, @"AmountDataReserved", v36);
  CFRelease(v36);
  *(void *)buf = v29;
  v37 = CFNumberCreate(0, kCFNumberSInt64Type, buf);
  CFDictionarySetValue(Mutable, @"AmountDataAvailable", v37);
  CFRelease(v37);
  *(void *)buf = v1;
  v38 = CFNumberCreate(0, kCFNumberSInt64Type, buf);
  CFDictionarySetValue(Mutable, @"AmountRestoreAvailable", v38);
  CFRelease(v38);
  return Mutable;
}

uint64_t sub_19D7101F0(const char *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  v14[2] = 0;
  v14[0] = 5;
  v14[1] = 2155872256;
  memset(v13, 0, 12);
  v2 = (unsigned int *)(a1 + 88);
  if (!getattrlist(a1 + 88, v14, v13, 0xCuLL, 0)) {
    return *(void *)((char *)v13 + 4);
  }
  int v3 = *__error();
  v4 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  v5 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v5) {
    v4 = v5 + 1;
  }
  strerror(v3);
  _MGLog((uint64_t)v4, 4089, @"getattrlist(%s, ATTR_VOL_SPACEUSED): %s", v6, v7, v8, v9, v10, (char)v2);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    v11 = strerror(v3);
    *(_DWORD *)buf = 136315394;
    v16 = v2;
    __int16 v17 = 2080;
    v18 = v11;
    _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "getattrlist(%s, ATTR_VOL_SPACEUSED): %s", buf, 0x16u);
  }
  if (v3 == 45) {
    return (*((void *)a1 + 1) - *((void *)a1 + 2)) * *(unsigned int *)a1;
  }
  else {
    return -1;
  }
}

uint64_t sub_19D710358()
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t valuePtr = -1;
  mach_port_t v0 = *MEMORY[0x1E4F2EEF0];
  CFDictionaryRef v1 = IOBSDNameMatching(*MEMORY[0x1E4F2EEF0], 0, "disk0");
  io_service_t MatchingService = IOServiceGetMatchingService(v0, v1);
  if (MatchingService)
  {
    io_object_t v3 = MatchingService;
    CFNumberRef CFProperty = (const __CFNumber *)IORegistryEntryCreateCFProperty(MatchingService, @"Size", (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
    if (!CFProperty)
    {
      v24 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v24) {
        v30 = v24 + 1;
      }
      else {
        v30 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      }
      _MGLog((uint64_t)v30, 3973, @"%s: No kIOMediaSizeKey found for disk0!", v25, v26, v27, v28, v29, (char)"SInt64 NANDSize(void)");
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        v40 = "SInt64 NANDSize(void)";
        _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%s: No kIOMediaSizeKey found for disk0!", buf, 0xCu);
      }
      goto LABEL_28;
    }
    CFNumberRef v5 = CFProperty;
    CFTypeID v6 = CFGetTypeID(CFProperty);
    if (v6 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue(v5, kCFNumberSInt64Type, &valuePtr)) {
        goto LABEL_27;
      }
      uint64_t v7 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      v13 = v7 ? v7 + 1 : "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      _MGLog((uint64_t)v13, 3966, @"%s: Could not get SInt64 value for kIOMediaSizeKey!", v8, v9, v10, v11, v12, (char)"SInt64 NANDSize(void)");
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_27;
      }
      *(_DWORD *)buf = 136315138;
      v40 = "SInt64 NANDSize(void)";
      v14 = MEMORY[0x1E4F14500];
      v15 = "%s: Could not get SInt64 value for kIOMediaSizeKey!";
    }
    else
    {
      v31 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v31) {
        v37 = v31 + 1;
      }
      else {
        v37 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      }
      _MGLog((uint64_t)v37, 3969, @"%s: kIOMediaSizeKey for disk0 not a CFNumber!", v32, v33, v34, v35, v36, (char)"SInt64 NANDSize(void)");
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_27;
      }
      *(_DWORD *)buf = 136315138;
      v40 = "SInt64 NANDSize(void)";
      v14 = MEMORY[0x1E4F14500];
      v15 = "%s: kIOMediaSizeKey for disk0 not a CFNumber!";
    }
    _os_log_impl(&dword_19D70E000, v14, OS_LOG_TYPE_DEFAULT, v15, buf, 0xCu);
LABEL_27:
    CFRelease(v5);
LABEL_28:
    IOObjectRelease(v3);
    return valuePtr;
  }
  v16 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v16) {
    v22 = v16 + 1;
  }
  else {
    v22 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  }
  _MGLog((uint64_t)v22, 3958, @"%s: IOServiceGetMatchingService() for disk0 failed!", v17, v18, v19, v20, v21, (char)"SInt64 NANDSize(void)");
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    v40 = "SInt64 NANDSize(void)";
    _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%s: IOServiceGetMatchingService() for disk0 failed!", buf, 0xCu);
  }
  return -1;
}

BOOL sub_19D71065C(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"VasUgeSzVyHdB27g2XpN0g", a2);
}

BOOL sub_19D710684(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"TF31PAB6aO8KAbPyNKSxKA", a2);
}

BOOL sub_19D7106AC(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"re6Zb+zwFKJNlkQTUeT+/w", a2);
}

BOOL sub_19D7106D4(uint64_t a1, uint64_t a2, __CFString **a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  int v6 = sandbox_check();
  int v7 = v6;
  if (a3 && v6)
  {
    bzero(buffer, 0x401uLL);
    Mutable = CFStringCreateMutable(0, 0);
    *a3 = Mutable;
    uint64_t v9 = sub_19D7107C8(a1, buffer, 1025);
    CFStringAppendFormat(Mutable, 0, @"pid %d (%s) does not have sandbox access for %@", a1, v9, a2);
  }
  return v7 == 0;
}

const char *sub_19D7107C8(int a1, void *buffer, int buffersize)
{
  if (proc_pidinfo(a1, 11, 1uLL, buffer, buffersize)) {
    return "unknown pid";
  }
  CFNumberRef v5 = rindex((const char *)buffer, 47);
  if (v5) {
    return v5 + 1;
  }
  else {
    return (const char *)buffer;
  }
}

void sub_19D710820(const __CFDictionary *a1, uint64_t a2)
{
  if (a1)
  {
    CFIndex Count = CFDictionaryGetCount(a1);
    CFNumberRef v5 = (const void **)malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
    CFDictionaryGetKeysAndValues(a1, v5, 0);
    CFIndex v6 = Count - 1;
    if (Count >= 1)
    {
      int v7 = v5;
      do
      {
        char v11 = 0;
        uint64_t v8 = *v7++;
        Value = CFDictionaryGetValue(a1, v8);
        (*(void (**)(uint64_t, const void *, const void *, char *))(a2 + 16))(a2, v8, Value, &v11);
        if (v11) {
          BOOL v10 = 1;
        }
        else {
          BOOL v10 = v6 == 0;
        }
        --v6;
      }
      while (!v10);
    }
    free(v5);
  }
}

void sub_19D7108F8(uint64_t a1, const char **a2, const void *a3, unsigned char *a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = sub_19D710B44(a2);
  if (!v8)
  {
    uint64_t v19 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
    if (v19) {
      uint64_t v25 = v19 + 1;
    }
    else {
      uint64_t v25 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
    }
    _MGLog((uint64_t)v25, 177, @"cache extra has invalid question %@", v20, v21, v22, v23, v24, (char)a2);
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_15;
    }
    *(_DWORD *)buf = 138412290;
    uint64_t v36 = a2;
    uint64_t v17 = MEMORY[0x1E4F14500];
    uint64_t v18 = "cache extra has invalid question %@";
LABEL_13:
    uint32_t v26 = 12;
LABEL_14:
    _os_log_impl(&dword_19D70E000, v17, OS_LOG_TYPE_DEFAULT, v18, buf, v26);
LABEL_15:
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
LABEL_16:
    *a4 = 1;
    return;
  }
  uint64_t v9 = v8;
  if (((_BYTE)v8[19] & 0x10) == 0)
  {
    BOOL v10 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
    if (v10) {
      v16 = v10 + 1;
    }
    else {
      v16 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
    }
    _MGLog((uint64_t)v16, 182, @"%@ is not precacheable", v11, v12, v13, v14, v15, (char)a2);
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_15;
    }
    *(_DWORD *)buf = 138412290;
    uint64_t v36 = a2;
    uint64_t v17 = MEMORY[0x1E4F14500];
    uint64_t v18 = "%@ is not precacheable";
    goto LABEL_13;
  }
  if (*((unsigned __int16 *)v8 + 77) >= 0x28Eu)
  {
    uint64_t v27 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
    if (v27) {
      uint64_t v33 = v27 + 1;
    }
    else {
      uint64_t v33 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
    }
    _MGLog((uint64_t)v33, 187, @"index %d is illegal", v28, v29, v30, v31, v32, *((_WORD *)v9 + 77));
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_15;
    }
    int v34 = *((__int16 *)v9 + 77);
    *(_DWORD *)buf = 67109120;
    LODWORD(v36) = v34;
    uint64_t v17 = MEMORY[0x1E4F14500];
    uint64_t v18 = "index %d is illegal";
    uint32_t v26 = 8;
    goto LABEL_14;
  }
  if (*(unsigned char *)(a1 + 40))
  {
    qword_1EB2178A8[*((__int16 *)v8 + 77)] = CFRetain(a3);
    a4 = (char *)&qword_1EB2178A8[654] + *((__int16 *)v9 + 77);
    goto LABEL_16;
  }
}

const char **sub_19D710B44(const char **a1)
{
  return sub_19D710FBC(a1, 1);
}

uint64_t MGIsDeviceOneOfType(const UInt8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1) {
    return 0;
  }
  if (MGIsDeviceOfType(a1)) {
    return 1;
  }
  uint64_t v12 = (const UInt8 **)&a9;
  do
  {
    BOOL v10 = v12++;
    BOOL v9 = *v10 != 0;
  }
  while (*v10 && !MGIsDeviceOfType(*v10));
  return v9;
}

const void *sub_19D710BBC(const char **a1, unsigned int *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  sub_19D711424(0);
  if (!sub_19D710FBC(a1, 1))
  {
    sub_19D711424(5);
    uint64_t v8 = 0;
    unsigned int v6 = 0;
    goto LABEL_14;
  }
  v4 = sub_19D710FBC(a1, 1);
  if (!v4)
  {
    unsigned int v6 = 0;
LABEL_7:
    if (qword_1E9449400 != -1) {
      dispatch_once(&qword_1E9449400, &unk_1EEF8FD20);
    }
    if (!CFSetContainsValue((CFSetRef)qword_1E94493F8, a1)) {
      goto LABEL_13;
    }
    uint64_t v8 = sub_19D73A01C(a1);
    if (!v8 || (sub_19D7119B4((uint64_t)a1, v8, v6) & 1) != 0) {
      goto LABEL_14;
    }
LABEL_12:
    CFRelease(v8);
    sub_19D711424(7);
LABEL_13:
    uint64_t v8 = 0;
    goto LABEL_14;
  }
  uint64_t v5 = (uint64_t)v4;
  unsigned int v6 = *((_DWORD *)v4 + 39);
  int v7 = sub_19D711488((uint64_t)v4);
  if (v7)
  {
    uint64_t v8 = v7;
    goto LABEL_14;
  }
  if (!*(void *)(v5 + 8)) {
    goto LABEL_7;
  }
  if ((byte_1E9449440 & 1) == 0)
  {
    uint64_t v10 = getpid();
    if (sub_19D71171C((uint64_t *)v5, v10, 0))
    {
      if (qword_1EB2173F8 != -1) {
        dispatch_once(&qword_1EB2173F8, &unk_1EEF8FD40);
      }
      if ((byte_1E9449440 & 1) == 0)
      {
        sub_19D711424(0);
        uint64_t v12 = (uint64_t (*)(const char **))*((void *)off_1E9449170 + 29);
        if (!v12) {
          uint64_t v12 = (uint64_t (*)(const char **))sub_19D71A930(29, 2);
        }
        uint64_t v8 = (const void *)v12(a1);
        if (v8 && (sub_19D7119B4((uint64_t)a1, v8, v6) & 1) == 0)
        {
          CFRelease(v8);
          sub_19D711424(7);
          uint64_t v8 = 0;
        }
        if (sub_19D718A00() == 9)
        {
          uint64_t v13 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
          uint64_t v19 = v13 ? v13 + 1 : "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
          _MGLog((uint64_t)v19, 774, @"no access to %@ (see <rdar://problem/11744455>)", v14, v15, v16, v17, v18, (char)a1);
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            *(void *)&uint8_t buf[4] = a1;
            _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "no access to %@ (see <rdar://problem/11744455>)", buf, 0xCu);
          }
        }
LABEL_46:
        if (!v8) {
          goto LABEL_14;
        }
        goto LABEL_47;
      }
    }
  }
  if (*(unsigned char *)(v5 + 152))
  {
    switch(v6)
    {
      case 5u:
        *(_DWORD *)buf = (*(uint64_t (**)(void))(v5 + 8))();
        CFNumberType v11 = kCFNumberSInt32Type;
        break;
      case 6u:
        *(void *)buf = (*(uint64_t (**)(void))(v5 + 8))();
        CFNumberType v11 = kCFNumberSInt64Type;
        break;
      case 7u:
        *(_DWORD *)buf = (*(float (**)(void))(v5 + 8))();
        CFNumberType v11 = kCFNumberFloat32Type;
        break;
      case 0xBu:
        int v20 = (*(uint64_t (**)(void))(v5 + 8))();
        uint64_t v21 = (const void **)MEMORY[0x1E4F1CFD0];
        if (!v20) {
          uint64_t v21 = (const void **)MEMORY[0x1E4F1CFC8];
        }
        uint64_t v8 = *v21;
        goto LABEL_46;
      default:
        uint64_t v22 = sub_19D71EF70("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
        _MGLog((uint64_t)v22, 809, @"can't convert type %d for %@", v23, v24, v25, v26, v27, v6);
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109378;
          *(_DWORD *)&uint8_t buf[4] = v6;
          *(_WORD *)&buf[8] = 2112;
          *(void *)&buf[10] = a1;
          _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "can't convert type %d for %@", buf, 0x12u);
        }
        goto LABEL_13;
    }
    uint64_t v8 = CFNumberCreate(0, v11, buf);
    goto LABEL_46;
  }
  uint64_t v8 = (const void *)(*(uint64_t (**)(void))(v5 + 8))();
  if (!v8) {
    goto LABEL_14;
  }
  if ((sub_19D7119B4((uint64_t)a1, v8, v6) & 1) == 0) {
    goto LABEL_12;
  }
LABEL_47:
  if (*(__int16 *)(v5 + 154) != -1) {
    sub_19D711C6C(v5, (const __CFBoolean *)v8);
  }
LABEL_14:
  if (a2) {
    *a2 = v6;
  }
  return v8;
}

const char **sub_19D710FBC(const char **result, int a2)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  if (!result) {
    return result;
  }
  io_object_t v3 = result;
  __int16 v35 = 0;
  long long v33 = 0u;
  long long v34 = 0u;
  *(_OWORD *)buffer = 0u;
  long long v32 = 0u;
  if (!CFStringGetCString((CFStringRef)result, buffer, 66, 0x8000100u))
  {
    if (!a2) {
      return 0;
    }
    unsigned int v6 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    uint64_t v12 = v6 ? v6 + 1 : "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    _MGLog((uint64_t)v12, 252, @"string %@ is too long to be a valid gestalt question", v7, v8, v9, v10, v11, (char)v3);
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
      return 0;
    }
    *(_DWORD *)__str = 138412290;
    uint64_t v37 = v3;
    uint64_t v13 = MEMORY[0x1E4F14500];
    uint64_t v14 = "string %@ is too long to be a valid gestalt question";
LABEL_29:
    _os_log_impl(&dword_19D70E000, v13, OS_LOG_TYPE_DEFAULT, v14, (uint8_t *)__str, 0xCu);
    return 0;
  }
  int v4 = strlen(buffer);
  result = sub_19D7112FC((unsigned __int8 *)buffer, v4);
  if (result) {
    return result;
  }
  long long v29 = 0u;
  long long v30 = 0u;
  CC_LONG v5 = snprintf(__str, 0x5EuLL, "%s%s", "MGCopyAnswer", buffer);
  if ((v5 & 0x80000000) != 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)md = 136315138;
      v39 = buffer;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Obfuscation error for %s", md, 0xCu);
    }
  }
  else
  {
    CC_MD5(__str, v5, md);
    if (!CNEncode())
    {
      BYTE6(v30) = 0;
      result = sub_19D7112FC((unsigned __int8 *)&v29, 22);
      goto LABEL_22;
    }
  }
  if ((a2 & 1) == 0) {
    return 0;
  }
  uint64_t v15 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v15) {
    uint64_t v21 = v15 + 1;
  }
  else {
    uint64_t v21 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  }
  _MGLog((uint64_t)v21, 265, @"failed to transform %@", v16, v17, v18, v19, v20, (char)v3);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__str = 138412290;
    uint64_t v37 = v3;
    _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "failed to transform %@", (uint8_t *)__str, 0xCu);
  }
  result = 0;
LABEL_22:
  if (!result && a2)
  {
    uint64_t v22 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v22) {
      uint64_t v28 = v22 + 1;
    }
    else {
      uint64_t v28 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog((uint64_t)v28, 270, @"string %@ is not a valid gestalt question", v23, v24, v25, v26, v27, (char)v3);
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
      return 0;
    }
    *(_DWORD *)__str = 138412290;
    uint64_t v37 = v3;
    uint64_t v13 = MEMORY[0x1E4F14500];
    uint64_t v14 = "string %@ is not a valid gestalt question";
    goto LABEL_29;
  }
  return result;
}

const UInt8 *MGIsDeviceOfType(const UInt8 *result)
{
  if (result)
  {
    CFDictionaryRef v1 = result;
    result = sub_19D7115BC();
    if (result) {
      return (const UInt8 *)(*(void *)v1 == *(void *)result
    }
                          && *((void *)v1 + 1) == *((void *)result + 1)
                          && *((_DWORD *)v1 + 4) == (unint64_t)*((unsigned int *)result + 4));
  }
  return result;
}

const char **sub_19D7112FC(unsigned __int8 *a1, int a2)
{
  if (a2 != 22) {
    return 0;
  }
  int v3 = word_19D779450[a1[11] + 4];
  unsigned int v5 = a1[1];
  int v4 = (const char *)(a1 + 1);
  uint64_t v6 = *a1;
  unsigned int v7 = v3 + word_19D779450[v5 + 1] + word_19D779450[v6] + 22;
  if (v7 > 0x8E2) {
    return 0;
  }
  uint64_t v8 = (const char **)((char *)&unk_1EEF36798 + 160 * v7);
  uint64_t v9 = *v8;
  if (!*v8 || v6 != *(unsigned __int8 *)v9 || strcmp(v4, v9 + 1)) {
    return 0;
  }
  return v8;
}

BOOL MGGetBoolAnswer(const char **a1)
{
  unsigned int v5 = 0;
  v2 = sub_19D710BBC(a1, &v5);
  if (v5 != 11 && sub_19D718A00() != 5) {
    sub_19D76F128(&v5, (uint64_t)a1, v2);
  }
  if (!v2) {
    return 0;
  }
  BOOL v3 = v2 == (const void *)*MEMORY[0x1E4F1CFD0];
  CFRelease(v2);
  return v3;
}

uint64_t sub_19D711424(int a1)
{
  if (qword_1EB217560 != -1) {
    dispatch_once(&qword_1EB217560, &unk_1EEF36778);
  }
  pthread_key_t v2 = qword_1EB217558;

  return pthread_setspecific(v2, (const void *)a1);
}

void *sub_19D711488(uint64_t a1)
{
  if (qword_1EB217550 != -1) {
    dispatch_once(&qword_1EB217550, &unk_1EEF8F638);
  }
  if (*(unsigned __int16 *)(a1 + 154) > 0x28Du) {
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1EB217440);
  uint64_t v3 = *(__int16 *)(a1 + 154);
  if (*((unsigned char *)&unk_1EB2178A8 + v3 + 5232))
  {
    switch(*(_DWORD *)(a1 + 156))
    {
      case 5:
        int v4 = (char *)&unk_1EB2178A8 + 8 * v3;
        CFNumberType v5 = kCFNumberSInt32Type;
        goto LABEL_11;
      case 6:
        int v4 = (char *)&unk_1EB2178A8 + 8 * v3;
        CFNumberType v5 = kCFNumberSInt64Type;
        goto LABEL_11;
      case 7:
        int v4 = (char *)&unk_1EB2178A8 + 8 * v3;
        CFNumberType v5 = kCFNumberFloat32Type;
LABEL_11:
        uint64_t v6 = CFNumberCreate(0, v5, v4);
        goto LABEL_13;
      case 0xB:
        if (*((unsigned char *)&unk_1EB2178A8 + 8 * v3)) {
          uint64_t v8 = (void **)MEMORY[0x1E4F1CFD0];
        }
        else {
          uint64_t v8 = (void **)MEMORY[0x1E4F1CFC8];
        }
        pthread_key_t v2 = *v8;
        break;
      default:
        uint64_t v6 = (void *)CFRetain(*((CFTypeRef *)&unk_1EB2178A8 + v3));
LABEL_13:
        pthread_key_t v2 = v6;
        break;
    }
  }
  else
  {
    pthread_key_t v2 = 0;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1EB217440);
  return v2;
}

const UInt8 *sub_19D7115BC()
{
  if (qword_1EB217448 != -1) {
    dispatch_once(&qword_1EB217448, &unk_1EEF8F578);
  }
  result = (const UInt8 *)qword_1EB217450;
  if (qword_1EB217450)
  {
    return CFDataGetBytePtr((CFDataRef)result);
  }
  return result;
}

void _MGLog(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFStringRef v10 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"libMobileGestalt %s:%d: %@", a1, a2, a3, 0);
  CFStringRef v11 = CFStringCreateWithFormatAndArguments(v9, 0, v10, &a9);
  CFIndex Length = CFStringGetLength(v11);
  CFIndex v13 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
  uint64_t v14 = (char *)malloc_type_calloc(1uLL, v13, 0xBF105376uLL);
  if (v14)
  {
    if (CFStringGetCString(v11, v14, v13, 0x8000100u) == 1 && off_1E9449380 != 0) {
      off_1E9449380(v14);
    }
  }
  if (v10) {
    CFRelease(v10);
  }
  if (v11) {
    CFRelease(v11);
  }
  free(v14);
}

uint64_t sub_19D71171C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (byte_1E9449440) {
    goto LABEL_15;
  }
  if (a1[18])
  {
    getpid();
    if (sandbox_check())
    {
      if (qword_1EB217428 != -1) {
        dispatch_once(&qword_1EB217428, &unk_1EEF8F6F8);
      }
      uint64_t v6 = qword_1EB217420;
      if (!os_log_type_enabled((os_log_t)qword_1EB217420, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_15;
      }
      uint64_t v7 = *a1;
      *(_DWORD *)buf = 136315138;
      uint64_t v19 = v7;
      uint64_t v8 = "elided IOKit fast path for key: %s";
      goto LABEL_14;
    }
    if (qword_1EB217428 != -1) {
      dispatch_once(&qword_1EB217428, &unk_1EEF8F6F8);
    }
    uint64_t v12 = qword_1EB217420;
    BOOL v13 = os_log_type_enabled((os_log_t)qword_1EB217420, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (v13)
    {
      uint64_t v14 = *a1;
      *(_DWORD *)buf = 136315138;
      uint64_t v19 = v14;
      uint64_t v15 = "taking IOKit fast path for key: %s";
LABEL_27:
      _os_log_impl(&dword_19D70E000, v12, OS_LOG_TYPE_DEFAULT, v15, buf, 0xCu);
      return 0;
    }
  }
  else
  {
    if ((a1[19] & 0x20) == 0)
    {
LABEL_15:
      if ((a1[19] & 2) != 0) {
        return 1;
      }
      CFStringRef v10 = (uint64_t (*)(uint64_t, uint64_t))a1[2];
      if (v10) {
        return v10(a2, a3);
      }
      return 0;
    }
    getpid();
    if (sandbox_check())
    {
      if (qword_1EB217428 != -1) {
        dispatch_once(&qword_1EB217428, &unk_1EEF8F6F8);
      }
      uint64_t v6 = qword_1EB217420;
      if (!os_log_type_enabled((os_log_t)qword_1EB217420, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_15;
      }
      uint64_t v9 = *a1;
      *(_DWORD *)buf = 136315138;
      uint64_t v19 = v9;
      uint64_t v8 = "elided platform fast path for key: %s";
LABEL_14:
      _os_log_impl(&dword_19D70E000, v6, OS_LOG_TYPE_DEFAULT, v8, buf, 0xCu);
      goto LABEL_15;
    }
    if (qword_1EB217428 != -1) {
      dispatch_once(&qword_1EB217428, &unk_1EEF8F6F8);
    }
    uint64_t v12 = qword_1EB217420;
    BOOL v16 = os_log_type_enabled((os_log_t)qword_1EB217420, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (v16)
    {
      uint64_t v17 = *a1;
      *(_DWORD *)buf = 136315138;
      uint64_t v19 = v17;
      uint64_t v15 = "taking platform fast path for key: %s";
      goto LABEL_27;
    }
  }
  return result;
}

uint64_t sub_19D7119B4(uint64_t a1, CFTypeRef cf, unsigned int a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (qword_1EB217548 != -1) {
    dispatch_once(&qword_1EB217548, &unk_1EEF8FD60);
  }
  uint64_t result = 1;
  switch(a3)
  {
    case 0u:
    case 1u:
      return result;
    case 5u:
      uint64_t v7 = a1;
      CFTypeRef v8 = cf;
      int v9 = 5;
      CFNumberType v10 = kCFNumberSInt32Type;
      goto LABEL_10;
    case 6u:
      uint64_t v7 = a1;
      CFTypeRef v8 = cf;
      int v9 = 6;
      CFNumberType v10 = kCFNumberSInt64Type;
      goto LABEL_10;
    case 7u:
      uint64_t v7 = a1;
      CFTypeRef v8 = cf;
      int v9 = 7;
      CFNumberType v10 = kCFNumberFloat32Type;
      goto LABEL_10;
    case 8u:
      uint64_t v7 = a1;
      CFTypeRef v8 = cf;
      int v9 = 8;
      CFNumberType v10 = kCFNumberFloat64Type;
LABEL_10:
      uint64_t result = sub_19D711DDC(v7, v8, v9, v10);
      break;
    default:
      CFTypeID v11 = CFGetTypeID(cf);
      CFTypeID v12 = qword_1EB217458[a3];
      if (v11 == v12)
      {
        uint64_t result = 1;
      }
      else
      {
        CFStringRef v13 = CFCopyTypeIDDescription(v11);
        CFStringRef v14 = CFCopyTypeIDDescription(v12);
        uint64_t v15 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
        if (v15) {
          uint64_t v21 = v15 + 1;
        }
        else {
          uint64_t v21 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
        }
        _MGLog((uint64_t)v21, 600, @"Value for %@ has incorrect type (should be %@, is %@)", v16, v17, v18, v19, v20, a1);
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412802;
          uint64_t v23 = a1;
          __int16 v24 = 2112;
          CFStringRef v25 = v14;
          __int16 v26 = 2112;
          CFStringRef v27 = v13;
          _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Value for %@ has incorrect type (should be %@, is %@)", buf, 0x20u);
        }
        CFRelease(v13);
        CFRelease(v14);
        uint64_t result = 0;
      }
      break;
  }
  return result;
}

uint64_t MGGetSInt64Answer(const char **a1, uint64_t a2)
{
  uint64_t v4 = a2;
  if (sub_19D712B14(a1, 5, 6, kCFNumberSInt64Type, &v4)) {
    return v4;
  }
  else {
    return a2;
  }
}

void sub_19D711C6C(uint64_t a1, const __CFBoolean *a2)
{
  if (*(unsigned __int16 *)(a1 + 154) <= 0x28Du)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&unk_1EB217440);
    uint64_t v4 = *(__int16 *)(a1 + 154);
    if (!*((unsigned char *)&unk_1EB2178A8 + v4 + 5232))
    {
      switch(*(_DWORD *)(a1 + 156))
      {
        case 5:
          CFNumberType v5 = (char *)&unk_1EB2178A8 + 8 * v4;
          CFNumberRef v6 = a2;
          CFNumberType v7 = kCFNumberSInt32Type;
          goto LABEL_7;
        case 6:
          CFNumberType v5 = (char *)&unk_1EB2178A8 + 8 * v4;
          CFNumberRef v6 = a2;
          CFNumberType v7 = kCFNumberSInt64Type;
          goto LABEL_7;
        case 7:
          CFNumberType v5 = (char *)&unk_1EB2178A8 + 8 * v4;
          CFNumberRef v6 = a2;
          CFNumberType v7 = kCFNumberFloat32Type;
LABEL_7:
          CFNumberGetValue(v6, v7, v5);
          break;
        case 0xB:
          *((unsigned char *)&unk_1EB2178A8 + 8 * *(__int16 *)(a1 + 154)) = CFBooleanGetValue(a2) != 0;
          break;
        default:
          *((void *)&unk_1EB2178A8 + *(__int16 *)(a1 + 154)) = CFRetain(a2);
          break;
      }
      *((unsigned char *)&unk_1EB2178A8 + *(__int16 *)(a1 + 154) + 5232) = 1;
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&unk_1EB217440);
  }
}

uint64_t sub_19D711D9C()
{
  mach_port_t v0 = (uint64_t (*)(void))*((void *)off_1E9449170 + 38);
  if (!v0) {
    mach_port_t v0 = (uint64_t (*)(void))sub_19D71A930(38, 2);
  }

  return v0();
}

uint64_t sub_19D711DDC(uint64_t a1, CFTypeRef cf, int a3, CFNumberType a4)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  CFTypeID v8 = CFGetTypeID(cf);
  if (v8 != CFNumberGetTypeID())
  {
    CFTypeID v10 = CFGetTypeID(cf);
    CFStringRef v11 = CFCopyTypeIDDescription(v10);
    CFTypeID v12 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v12) {
      uint64_t v18 = v12 + 1;
    }
    else {
      uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog((uint64_t)v18, 549, @"Value for %@ has incorrect type (should be CFNumber, is %@)", v13, v14, v15, v16, v17, a1);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      int valuePtr = 138412546;
      uint64_t v35 = a1;
      __int16 v36 = 2112;
      CFStringRef v37 = v11;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Value for %@ has incorrect type (should be CFNumber, is %@)", (uint8_t *)&valuePtr, 0x16u);
    }
    CFRelease(v11);
    return 0;
  }
  if (CFNumberGetValue((CFNumberRef)cf, a4, &valuePtr)) {
    return 1;
  }
  uint64_t v19 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v19) {
    CFStringRef v25 = v19 + 1;
  }
  else {
    CFStringRef v25 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  }
  uint64_t v26 = qword_1E5962B30[a3];
  _MGLog((uint64_t)v25, 556, @"Value %@ for %@ cannot be represented as %s", v20, v21, v22, v23, v24, (char)cf);
  BOOL v27 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (v27)
  {
    *(_DWORD *)buf = 138412802;
    CFTypeRef v29 = cf;
    __int16 v30 = 2112;
    uint64_t v31 = a1;
    __int16 v32 = 2080;
    uint64_t v33 = v26;
    _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Value %@ for %@ cannot be represented as %s", buf, 0x20u);
    return 0;
  }
  return result;
}

BOOL sub_19D711FD4(uint64_t a1, const void *a2)
{
  CFDictionaryRef v3 = (const __CFDictionary *)sub_19D71230C();
  if (!v3) {
    return 0;
  }
  CFDictionaryRef v4 = v3;
  BOOL v5 = CFDictionaryGetValue(v3, a2) == (const void *)*MEMORY[0x1E4F1CFD0];
  CFRelease(v4);
  return v5;
}

__CFString *sub_19D712030(const __CFData *a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return @"ffffffffffffffffffffffffffffffffffffffff";
  }
  BytePtr = CFDataGetBytePtr(a1);
  CFIndex Length = CFDataGetLength(a1);
  if (Length == 20)
  {
    CFStringRef v4 = CFStringCreateWithFormat(0, 0, @"%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x", *BytePtr, BytePtr[1], BytePtr[2], BytePtr[3], BytePtr[4], BytePtr[5], BytePtr[6], BytePtr[7], BytePtr[8], BytePtr[9], BytePtr[10], BytePtr[11], BytePtr[12], BytePtr[13], BytePtr[14], BytePtr[15],
           BytePtr[16],
           BytePtr[17],
           BytePtr[18],
           BytePtr[19]);
    if (!v4)
    {
      BOOL v5 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v5) {
        CFStringRef v11 = v5 + 1;
      }
      else {
        CFStringRef v11 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      }
      _MGLog((uint64_t)v11, 3482, @"copyHex20String failed", v6, v7, v8, v9, v10, buf[0]);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "copyHex20String failed", buf, 2u);
      }
      CFStringRef v4 = 0;
    }
  }
  else
  {
    size_t v12 = Length;
    CFStringRef v4 = CFStringCreateFromExternalRepresentation(0, a1, 0x8000100u);
    if (!v4)
    {
      MEMORY[0x1F4188790]();
      memcpy(&buf[-((v12 + 16) & 0xFFFFFFFFFFFFFFF0)], BytePtr, v12);
      buf[v12 - ((v12 + 16) & 0xFFFFFFFFFFFFFFF0)] = 0;
      uint64_t v13 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v13) {
        uint64_t v19 = v13 + 1;
      }
      else {
        uint64_t v19 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      }
      _MGLog((uint64_t)v19, 3491, @"CFStringCreateFromExternalRepresentation %s failed", v14, v15, v16, v17, v18, (char)&buf[-((v12 + 16) & 0xF0)]);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        uint64_t v22 = &buf[-((v12 + 16) & 0xFFFFFFFFFFFFFFF0)];
        _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "CFStringCreateFromExternalRepresentation %s failed", buf, 0xCu);
      }
      CFStringRef v4 = @"FFFFFFFF-FFFFFFFFFFFFFFFF";
    }
  }
  CFRelease(a1);
  return (__CFString *)v4;
}

__CFString *sub_19D7122C4()
{
  CFDataRef v0 = (const __CFData *)sub_19D710BBC((const char **)@"nFRqKto/RuQAV1P+0/qkBA", 0);

  return sub_19D712030(v0);
}

BOOL sub_19D7122F8()
{
  return sub_19D711FD4(@"NoVOIP", @"RegionalBehaviorNoVOIP");
}

uint64_t sub_19D71230C()
{
  if (qword_1EB2173E8 != -1) {
    dispatch_once(&qword_1EB2173E8, &unk_1EEF8F598);
  }
  uint64_t v0 = qword_1EB2173E0;
  if (qword_1EB2173E0) {
    CFRetain((CFTypeRef)qword_1EB2173E0);
  }
  return v0;
}

BOOL sub_19D712368(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"nFRqKto/RuQAV1P+0/qkBA", a2);
}

BOOL sub_19D712390(char *a1, const __CFString *a2, int a3)
{
  return sub_19D7123B8(a1, a2, a3, 0, 0) != 0;
}

uint64_t sub_19D7123B8(char *a1, const __CFString *a2, int a3, uint64_t a4, int a5)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  CFTypeRef v9 = sub_19D717CF8(a1, a2, a3);
  if (v9)
  {
    uint64_t v10 = v9;
    CFTypeID v11 = CFGetTypeID(v9);
    if (v11 == CFNumberGetTypeID())
    {
      unsigned int valuePtr = 0;
      if (CFNumberGetValue((CFNumberRef)v10, kCFNumberIntType, &valuePtr))
      {
        a4 = valuePtr;
LABEL_31:
        CFRelease(v10);
        return a4;
      }
      uint64_t v31 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c", 47);
      if (v31) {
        CFStringRef v37 = v31 + 1;
      }
      else {
        CFStringRef v37 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
      }
      _MGLog((uint64_t)v37, 462, @"Error getting int value for key %@ (%@)!", v32, v33, v34, v35, v36, (char)a2);
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_31;
      }
      *(_DWORD *)buf = 138412546;
      CFTypeID v49 = (CFTypeID)a2;
      __int16 v50 = 2112;
      v51 = (void *)v10;
      CFTypeRef v29 = MEMORY[0x1E4F14500];
      __int16 v30 = "Error getting int value for key %@ (%@)!";
    }
    else
    {
      CFTypeID v19 = CFGetTypeID(v10);
      if (v19 == CFDataGetTypeID())
      {
        CFTypeID v20 = CFGetTypeID(v10);
        if (v20 == CFDataGetTypeID() && CFDataGetLength((CFDataRef)v10) == 4)
        {
          a4 = *(unsigned int *)CFDataGetBytePtr((CFDataRef)v10);
          goto LABEL_31;
        }
        v39 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c", 47);
        if (v39) {
          v45 = v39 + 1;
        }
        else {
          v45 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
        }
        _MGLog((uint64_t)v45, 468, @"value for %@ property of %s is invalid (%@)", v40, v41, v42, v43, v44, (char)a2);
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_31;
        }
        *(_DWORD *)buf = 138412802;
        CFTypeID v49 = (CFTypeID)a2;
        __int16 v50 = 2080;
        v51 = a1;
        __int16 v52 = 2112;
        v53 = v10;
        CFTypeRef v29 = MEMORY[0x1E4F14500];
        __int16 v30 = "value for %@ property of %s is invalid (%@)";
        uint32_t v38 = 32;
LABEL_30:
        _os_log_impl(&dword_19D70E000, v29, OS_LOG_TYPE_DEFAULT, v30, buf, v38);
        goto LABEL_31;
      }
      uint64_t v21 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
      uint64_t v22 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c", 47);
      if (v22) {
        uint64_t v21 = v22 + 1;
      }
      char v23 = CFGetTypeID(v10);
      _MGLog((uint64_t)v21, 472, @"invalid CFTypeID %lu for key %@", v24, v25, v26, v27, v28, v23);
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_31;
      }
      *(_DWORD *)buf = 134218242;
      CFTypeID v49 = CFGetTypeID(v10);
      __int16 v50 = 2112;
      v51 = (void *)a2;
      CFTypeRef v29 = MEMORY[0x1E4F14500];
      __int16 v30 = "invalid CFTypeID %lu for key %@";
    }
    uint32_t v38 = 22;
    goto LABEL_30;
  }
  if (a5)
  {
    size_t v12 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c", 47);
    uint64_t v18 = v12
        ? v12 + 1
        : "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
    _MGLog((uint64_t)v18, 477, @"missing value for property %@", v13, v14, v15, v16, v17, (char)a2);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      CFTypeID v49 = (CFTypeID)a2;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "missing value for property %@", buf, 0xCu);
    }
  }
  return a4;
}

CFNumberRef sub_19D7126F8()
{
  return sub_19D717F48("IODeviceTree:/chosen", @"M+eWZ6Zk/aJIsnIrv4zdAg", 117);
}

CFStringRef sub_19D712710(int a1, char *a2, const __CFString *a3)
{
  CFStringRef result = (CFStringRef)sub_19D7128AC(a1, a2, a3);
  if (result)
  {
    CFStringRef v5 = result;
    CFStringRef v6 = sub_19D717DB4(result, (uint64_t)a3);
    CFRelease(v5);
    return v6;
  }
  return result;
}

const void *sub_19D712754()
{
  return sub_19D710BBC((const char **)@"ZApuwHXWV8RCz0iVzMnqLw", 0);
}

const void *MGGetStringAnswer(const char **a1)
{
  unsigned int v5 = 0;
  CFDictionaryRef v1 = sub_19D710BBC(a1, &v5);
  pthread_key_t v2 = v1;
  if (v1)
  {
    CFTypeID v3 = CFGetTypeID(v1);
    if (v3 != CFStringGetTypeID())
    {
      CFRelease(v2);
      return 0;
    }
  }
  return v2;
}

BOOL MobileGestalt_get_isSimulator()
{
  return MGGetBoolAnswer((const char **)@"ulMliLomP737aAOJ/w/evA");
}

BOOL MobileGestalt_get_cellularDataCapability()
{
  return MGGetBoolAnswer((const char **)@"L5al7b+7JATD/izSJeH0aQ");
}

BOOL MobileGestalt_get_iPadCapability()
{
  return MGGetBoolAnswer((const char **)@"uKc7FPnEO++lVhHWHFlGbQ");
}

CFTypeRef sub_19D7128AC(int a1, char *a2, const __CFString *a3)
{
  io_registry_entry_t v4 = sub_19D712908(a1, a2);
  if (!v4) {
    return 0;
  }
  io_object_t v5 = v4;
  CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(v4, a3, (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  IOObjectRelease(v5);
  return CFProperty;
}

uint64_t sub_19D712908(int a1, char *name)
{
  if (a1) {
    CFMutableDictionaryRef v2 = IOServiceNameMatching(name);
  }
  else {
    CFMutableDictionaryRef v2 = IOServiceMatching(name);
  }
  CFDictionaryRef v3 = v2;
  if (v2)
  {
    mach_port_t v4 = *MEMORY[0x1E4F2EEF0];
    return IOServiceGetMatchingService(v4, v3);
  }
  else
  {
    CFStringRef v6 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c", 47);
    if (v6) {
      size_t v12 = v6 + 1;
    }
    else {
      size_t v12 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
    }
    _MGLog((uint64_t)v12, 90, @"Can't create matching dict", v7, v8, v9, v10, v11, v13[0]);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Can't create matching dict", v13, 2u);
    }
    return 0;
  }
}

BOOL MobileGestalt_get_pearlIDCapability()
{
  return MGGetBoolAnswer((const char **)@"8olRm6C1xqr7AJGpLRnpSw");
}

uint64_t sub_19D7129F4()
{
  return pthread_key_create((pthread_key_t *)&qword_1EB217558, 0);
}

const UInt8 *sub_19D712A04()
{
  CFStringRef result = sub_19D7115BC();
  if (result)
  {
    uint64_t v1 = 0;
    for (i = &qword_19D7745F0; ; i += 4)
    {
      BOOL v3 = *(void *)result == *i && *((void *)result + 1) == i[1];
      if (v3 && *((_DWORD *)result + 4) == (unint64_t)*((unsigned int *)i + 4)) {
        break;
      }
      if (++v1 == 463) {
        return result;
      }
    }
    dword_1EB217374 = v1;
  }
  return result;
}

uint64_t sub_19D712A68()
{
  return sub_19D714E38(1);
}

BOOL MGGetFloat32Answer(const char **a1, float a2)
{
  float v3 = a2;
  return sub_19D712B14(a1, 7, 7, kCFNumberFloat32Type, &v3);
}

uint64_t MGGetSInt32Answer(const char **a1, unsigned int a2)
{
  unsigned int v4 = a2;
  if (sub_19D712B14(a1, 5, 5, kCFNumberSInt32Type, &v4)) {
    return v4;
  }
  else {
    return a2;
  }
}

BOOL sub_19D712B14(const char **a1, int a2, int a3, CFNumberType a4, void *a5)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  unsigned int v24 = 0;
  CFNumberRef v10 = (const __CFNumber *)sub_19D710BBC(a1, &v24);
  if (v24 != a2 && v24 != a3)
  {
    uint64_t v14 = sub_19D71EF70("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
    uint64_t v15 = qword_1E5962B30[a2];
    uint64_t v16 = qword_1E5962B30[a3];
    _MGLog((uint64_t)v14, 992, @"%@ does not return %s or %s, actually returns %s", v17, v18, v19, v20, v21, (char)a1);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v23 = qword_1E5962B30[v24];
      *(_DWORD *)buf = 138413058;
      uint64_t v26 = a1;
      __int16 v27 = 2080;
      uint64_t v28 = v15;
      __int16 v29 = 2080;
      uint64_t v30 = v16;
      __int16 v31 = 2080;
      uint64_t v32 = v23;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%@ does not return %s or %s, actually returns %s", buf, 0x2Au);
    }
    abort();
  }
  CFNumberRef v12 = v10;
  if (v10)
  {
    if (!CFNumberGetValue(v10, a4, a5)) {
      sub_19D76F1F4(a2, (uint64_t)a1, (uint64_t)v12);
    }
    CFRelease(v12);
  }
  return v12 != 0;
}

void sub_19D712C90()
{
  CFDataRef v0 = (const __CFData *)sub_19D717CF8("IODeviceTree:/product", @"product-id", 0);
  qword_1EB217450 = (uint64_t)v0;
  if (!v0 || (CFDataRef v1 = v0, v2 = CFGetTypeID(v0), v2 != CFDataGetTypeID()) || CFDataGetLength(v1) != 20)
  {
    float v3 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/device_map.c", 47);
    if (v3) {
      uint64_t v9 = v3 + 1;
    }
    else {
      uint64_t v9 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/device_map.c";
    }
    _MGLog((uint64_t)v9, 58, @"invalid product id '%@'", v4, v5, v6, v7, v8, qword_1EB217450);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT)) {
      sub_19D76F0A0();
    }
    if (qword_1EB217450) {
      CFRelease((CFTypeRef)qword_1EB217450);
    }
    qword_1EB217450 = 0;
  }
}

uint64_t sub_19D712D68()
{
  if (sub_19D714D40() == 6 || sub_19D7175F4((BOOL)@"H4"))
  {
    uint64_t v0 = MEMORY[0x1E4F1CFC8];
  }
  else
  {
    BOOL v1 = sub_19D7175F4((BOOL)@"H5");
    uint64_t v0 = MEMORY[0x1E4F1CFC8];
    if (!v1) {
      uint64_t v0 = MEMORY[0x1E4F1CFD0];
    }
  }
  return *(void *)v0;
}

float MobileGestalt_get_mainScreenScale(void *a1)
{
  id v1 = a1;
  int valuePtr = -1082130432;
  CFTypeID v2 = MGCopyAnswer((const char **)@"SNfDJgQFV2Xj7+WnozcJPw");
  if (v2)
  {
    float v3 = v2;
    CFTypeID v4 = CFGetTypeID(v2);
    if (v4 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v3, kCFNumberFloat32Type, &valuePtr))
      {
LABEL_10:
        CFRelease(v3);
        float v6 = *(float *)&valuePtr;
        goto LABEL_11;
      }
      uint64_t v5 = [v1 log];
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      uint64_t v5 = [v1 log];
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_19D771D78(v5, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_10;
  }
  float v6 = -1.0;
LABEL_11:

  return v6;
}

__CFString *sub_19D712EC0()
{
  CFStringRef result = (__CFString *)sub_19D7155AC(@"ReleaseType", 0);
  if (!result)
  {
    if (os_variant_has_internal_content()) {
      return @"Internal";
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t _MGCacheValid()
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (unlink("/var/mobile/Library/Caches/com.apple.MobileGestalt.plist"))
  {
    if (*__error() != 2)
    {
      uint64_t v0 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
      id v1 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
      if (v1) {
        uint64_t v0 = v1 + 1;
      }
      CFTypeID v2 = __error();
      char v3 = strerror(*v2);
      _MGLog((uint64_t)v0, 225, @"Failed to delete legacy gestalt cache: %s", v4, v5, v6, v7, v8, v3);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = __error();
        uint64_t v10 = strerror(*v9);
        *(_DWORD *)buf = 136315138;
        unsigned int v24 = v10;
        uint64_t v11 = MEMORY[0x1E4F14500];
        uint64_t v12 = "Failed to delete legacy gestalt cache: %s";
        uint32_t v13 = 12;
LABEL_12:
        _os_log_impl(&dword_19D70E000, v11, OS_LOG_TYPE_DEFAULT, v12, buf, v13);
      }
    }
  }
  else
  {
    uint64_t v14 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
    if (v14) {
      uint64_t v20 = v14 + 1;
    }
    else {
      uint64_t v20 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
    }
    _MGLog((uint64_t)v20, 228, @"Successfully deleted legacy gestalt cache", v15, v16, v17, v18, v19, v22);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      uint64_t v11 = MEMORY[0x1E4F14500];
      uint64_t v12 = "Successfully deleted legacy gestalt cache";
      uint32_t v13 = 2;
      goto LABEL_12;
    }
  }
  return sub_19D714E38(0);
}

uint64_t sub_19D713080()
{
  unsigned int v0 = sub_19D714D40() - 1;
  if (v0 < 0xC) {
    return (uint64_t)*(&off_1E5963110 + (int)v0);
  }
  CFTypeID v2 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v2) {
    uint64_t v8 = v2 + 1;
  }
  else {
    uint64_t v8 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  }
  _MGLog((uint64_t)v8, 2264, @"Unknown DeviceClass", v3, v4, v5, v6, v7, v9);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT)) {
    sub_19D76F334();
  }
  return 0;
}

const void *sub_19D713108()
{
  uint64_t v103 = *MEMORY[0x1E4F143B8];
  if (sub_19D714D40() == 6) {
    return (const void *)*MEMORY[0x1E4F1CFC8];
  }
  if (sub_19D714D40() == 2) {
    return (const void *)*MEMORY[0x1E4F1CFC8];
  }
  if (sub_19D714D40() == 7) {
    return (const void *)*MEMORY[0x1E4F1CFC8];
  }
  int v102 = 1789837692;
  long long v101 = xmmword_19D778B18;
  int v100 = -1239654590;
  long long v99 = xmmword_19D778B40;
  int v98 = -1579092758;
  long long v97 = xmmword_19D778B68;
  int v96 = 48355600;
  long long v95 = xmmword_19D778B2C;
  int v94 = -679691073;
  long long v93 = xmmword_19D778B54;
  int v92 = 1430379884;
  long long v91 = xmmword_19D778B7C;
  if (MGIsDeviceOneOfType((const UInt8 *)&v101, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v99)) {
    return (const void *)*MEMORY[0x1E4F1CFC8];
  }
  int v90 = -121925081;
  long long v89 = xmmword_19D778D5C;
  if (MGIsDeviceOneOfType((const UInt8 *)&v89, v7, v8, v9, v10, v11, v12, v13, 0)) {
    return (const void *)*MEMORY[0x1E4F1CFC8];
  }
  int v88 = 414393924;
  long long v87 = xmmword_19D7791D0;
  int v86 = 897736383;
  long long v85 = xmmword_19D7791E4;
  int v84 = -996295886;
  long long v83 = xmmword_19D7791F8;
  int v82 = -453987047;
  long long v81 = xmmword_19D77920C;
  if (MGIsDeviceOneOfType((const UInt8 *)&v87, v14, v15, v16, v17, v18, v19, v20, (uint64_t)&v85)) {
    return (const void *)*MEMORY[0x1E4F1CFC8];
  }
  int v80 = 1602014129;
  long long v79 = xmmword_19D778BCC;
  int v78 = -810116762;
  long long v77 = xmmword_19D778BE0;
  int v76 = -1195351767;
  long long v75 = xmmword_19D778BF4;
  int v74 = -199226823;
  long long v73 = xmmword_19D7792AC;
  int v72 = 1412427398;
  long long v71 = xmmword_19D7792C0;
  int v70 = -1283070668;
  long long v69 = xmmword_19D779298;
  int v68 = 160260070;
  long long v67 = xmmword_19D7792D4;
  if (MGIsDeviceOneOfType((const UInt8 *)&v79, v21, v22, v23, v24, v25, v26, v27, (uint64_t)&v77)) {
    return (const void *)*MEMORY[0x1E4F1CFC8];
  }
  int v66 = 28030256;
  long long v65 = xmmword_19D778C58;
  int v64 = 1214363620;
  long long v63 = xmmword_19D778C6C;
  int v62 = -798153473;
  long long v61 = xmmword_19D778AC8;
  int v60 = -776721724;
  long long v59 = xmmword_19D778ADC;
  int v58 = -1403227947;
  long long v57 = xmmword_19D779108;
  int v56 = 729118884;
  long long v55 = xmmword_19D77911C;
  int v54 = 1046806126;
  long long v53 = xmmword_19D779130;
  int v52 = -188760945;
  long long v51 = xmmword_19D779144;
  int v50 = -489993439;
  long long v49 = xmmword_19D779158;
  int v48 = 886875686;
  long long v47 = xmmword_19D77916C;
  if (MGIsDeviceOneOfType((const UInt8 *)&v65, v28, v29, v30, v31, v32, v33, v34, (uint64_t)&v63)) {
    return (const void *)*MEMORY[0x1E4F1CFC8];
  }
  int v46 = -350584140;
  long long v45 = xmmword_19D779180;
  int v44 = -1418383976;
  long long v43 = xmmword_19D779194;
  if (MGIsDeviceOneOfType((const UInt8 *)&v45, v35, v36, v37, v38, v39, v40, v41, (uint64_t)&v43)) {
    return (const void *)*MEMORY[0x1E4F1CFC8];
  }
  else {
    return sub_19D710BBC((const char **)@"pFpC81KCZegLf4FenQZ2OA", 0);
  }
}

void sub_19D713610()
{
  uint64_t v99 = *MEMORY[0x1E4F143B8];
  __int16 v98 = 0;
  long long v97 = 0u;
  long long v96 = 0u;
  *(_OWORD *)buffer = 0u;
  memcpy(__dst, "/Library/RegionFeatures/RegionFeatures_", sizeof(__dst));
  memcpy(v93, "/System/Library/RegionFeatures/RegionFeatures_", sizeof(v93));
  memset(&v88, 0, sizeof(v88));
  uint64_t v0 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGSWBehaviors.c";
  if (stat("/Library/RegionFeatures", &v88) || (v88.st_mode & 0xF000) != 0x4000)
  {
    uint64_t v2 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGSWBehaviors.c", 47);
    if (v2) {
      uint64_t v8 = v2 + 1;
    }
    else {
      uint64_t v8 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGSWBehaviors.c";
    }
    _MGLog((uint64_t)v8, 96, @"RegionFeatures directory not found, using legacy path", v3, v4, v5, v6, v7, v86);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "RegionFeatures directory not found, using legacy path", buf, 2u);
    }
    uint64_t v1 = v93;
  }
  else
  {
    uint64_t v1 = __dst;
  }
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  int v11 = sub_19D714D40();
  uint64_t v12 = (const void **)MEMORY[0x1E4F1CFC8];
  if (v11 == 4)
  {
    uint64_t v13 = 0;
    CFStringRef v14 = 0;
    CFDataRef v15 = 0;
    uint64_t v16 = (const void **)MEMORY[0x1E4F1CFC8];
    goto LABEL_46;
  }
  CFDataRef v17 = (const __CFData *)sub_19D717CF8("IODeviceTree:/chosen", @"software-behavior", 0);
  CFDataRef v15 = v17;
  if (!v17 || (CFTypeID v18 = CFGetTypeID(v17), v18 != CFDataGetTypeID()) || CFDataGetLength(v15) <= 3)
  {
    uint64_t v20 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGSWBehaviors.c", 47);
    if (v20) {
      uint64_t v26 = v20 + 1;
    }
    else {
      uint64_t v26 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGSWBehaviors.c";
    }
    _MGLog((uint64_t)v26, 113, @"Could not get software behavior data from the registry\n", v21, v22, v23, v24, v25, v86);
    int v19 = 0;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Could not get software behavior data from the registry\n", buf, 2u);
      int v19 = 0;
    }
LABEL_22:
    CFDictionarySetValue(Mutable, @"SwBHValid", *v12);
    CFStringRef v27 = (const __CFString *)MGCopyAnswer((const char **)@"h63QSdBCiT/z0WU6rdQv6Q");
    CFStringRef v14 = v27;
    if (!v27 || !CFStringGetCString(v27, buffer, 50, 0x8000100u))
    {
      uint64_t v41 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGSWBehaviors.c", 47);
      if (v41) {
        long long v47 = v41 + 1;
      }
      else {
        long long v47 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGSWBehaviors.c";
      }
      _MGLog((uint64_t)v47, 127, @"Could not convert region code\n", v42, v43, v44, v45, v46, v86);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Could not convert region code\n", buf, 2u);
      }
      goto LABEL_39;
    }
    int v28 = strlen(buffer);
    buffer[v28] = 9;
    int v29 = v28 + 1;
    buffer[v28 + 1] = 0;
    unsigned int v30 = sub_19D714D40() - 1;
    if (v30 < 0xB && ((0x477u >> v30) & 1) != 0)
    {
      __strcat_chk();
      int v54 = fopen(v1, "r");
      if (v54)
      {
        uint64_t v13 = v54;
        while (1)
        {
          if (feof(v13)) {
            goto LABEL_33;
          }
          if (!fgets(v1, 1024, v13)) {
            break;
          }
          if (!strncmp(v1, buffer, v29))
          {
            int v87 = 0;
            if (sscanf(v1, "%*s\t0x%x", &v87) == 1)
            {
              int v19 = v87;
              goto LABEL_33;
            }
            int v78 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGSWBehaviors.c", 47);
            if (v78) {
              int v84 = v78 + 1;
            }
            else {
              int v84 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGSWBehaviors.c";
            }
            _MGLog((uint64_t)v84, 184, @"Error parsing line: '%s'\n", v79, v80, v81, v82, v83, (char)v1);
            BOOL v85 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT);
            uint64_t v12 = (const void **)MEMORY[0x1E4F1CFC8];
            if (v85)
            {
              *(_DWORD *)buf = 136315138;
              *(void *)&uint8_t buf[4] = v1;
              int v76 = MEMORY[0x1E4F14500];
              long long v77 = "Error parsing line: '%s'\n";
              goto LABEL_81;
            }
            goto LABEL_40;
          }
        }
        int v65 = feof(v13);
        uint64_t v12 = (const void **)MEMORY[0x1E4F1CFC8];
        if (!v65)
        {
          int v66 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGSWBehaviors.c", 47);
          if (v66) {
            uint64_t v0 = v66 + 1;
          }
          long long v67 = __error();
          char v68 = strerror(*v67);
          _MGLog((uint64_t)v0, 176, @"Error reading file: %s\n", v69, v70, v71, v72, v73, v68);
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
          {
            int v74 = __error();
            long long v75 = strerror(*v74);
            *(_DWORD *)buf = 136315138;
            *(void *)&uint8_t buf[4] = v75;
            int v76 = MEMORY[0x1E4F14500];
            long long v77 = "Error reading file: %s\n";
LABEL_81:
            _os_log_impl(&dword_19D70E000, v76, OS_LOG_TYPE_DEFAULT, v77, buf, 0xCu);
            goto LABEL_40;
          }
        }
        goto LABEL_40;
      }
      long long v55 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGSWBehaviors.c", 47);
      if (v55) {
        int v56 = v55 + 1;
      }
      else {
        int v56 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGSWBehaviors.c";
      }
      long long v57 = __error();
      strerror(*v57);
      _MGLog((uint64_t)v56, 169, @"Could not open %s: %s\n", v58, v59, v60, v61, v62, (char)v1);
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_32;
      }
      long long v63 = __error();
      int v64 = strerror(*v63);
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = v1;
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = v64;
      uint64_t v38 = MEMORY[0x1E4F14500];
      uint64_t v39 = "Could not open %s: %s\n";
      uint32_t v40 = 22;
    }
    else
    {
      uint64_t v31 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGSWBehaviors.c", 47);
      if (v31) {
        uint64_t v37 = v31 + 1;
      }
      else {
        uint64_t v37 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGSWBehaviors.c";
      }
      _MGLog((uint64_t)v37, 162, @"device class not supported", v32, v33, v34, v35, v36, v86);
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
LABEL_32:
        uint64_t v13 = 0;
LABEL_33:
        uint64_t v12 = (const void **)MEMORY[0x1E4F1CFC8];
        goto LABEL_40;
      }
      *(_WORD *)buf = 0;
      uint64_t v38 = MEMORY[0x1E4F14500];
      uint64_t v39 = "device class not supported";
      uint32_t v40 = 2;
    }
    _os_log_impl(&dword_19D70E000, v38, OS_LOG_TYPE_DEFAULT, v39, buf, v40);
    goto LABEL_32;
  }
  int v19 = *(_DWORD *)CFDataGetBytePtr(v15);
  if ((v19 & 1) == 0) {
    goto LABEL_22;
  }
  CFDictionarySetValue(Mutable, @"SwBHValid", (const void *)*MEMORY[0x1E4F1CFD0]);
  CFStringRef v14 = 0;
LABEL_39:
  uint64_t v13 = 0;
LABEL_40:
  if (v19)
  {
    int v48 = v19;
    long long v49 = v12;
    *(void *)&uint8_t buf[4] = 0;
    *(_DWORD *)&buf[12] = 0;
    *(_DWORD *)buf = v48;
    CFDataRef v50 = CFDataCreate(v9, buf, 16);
    CFDictionarySetValue(Mutable, @"SoftwareBehavior", v50);
    CFRelease(v50);
    *(void *)buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[8] = 0x40000000;
    *(void *)&buf[16] = sub_19D713DE4;
    int v90 = &unk_1E5962910;
    long long v91 = Mutable;
    int v92 = v48;
    long long v51 = off_1E5962938;
    uint64_t v52 = -10;
    uint64_t v16 = (const void **)MEMORY[0x1E4F1CFD0];
    do
    {
      (*(void (**)(unsigned char *, void, void, __CFString *))&buf[16])(buf, (v52 + 11), *(v51 - 1), *v51);
      v51 += 2;
    }
    while (!__CFADD__(v52++, 1));
    uint64_t v12 = v49;
  }
  else
  {
    uint64_t v16 = (const void **)MEMORY[0x1E4F1CFC8];
  }
LABEL_46:
  CFDictionarySetValue(Mutable, @"RegionalBehaviorValid", *v16);
  if (sub_19D713E18(@"CH")) {
    CFDictionarySetValue(Mutable, @"RegionalBehaviorGB18030", (const void *)*MEMORY[0x1E4F1CFD0]);
  }
  if (sub_19D713E18(@"KH")) {
    CFDictionarySetValue(Mutable, @"RegionalBehaviorNoPasscodeLocationTiles", (const void *)*MEMORY[0x1E4F1CFD0]);
  }
  if (sub_19D714D40() == 7) {
    CFDictionarySetValue(Mutable, @"RegionalBehaviorEUVolumeLimit", *v12);
  }
  if (v15) {
    CFRelease(v15);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (v13) {
    fclose(v13);
  }
  qword_1EB2173E0 = (uint64_t)Mutable;
}

void sub_19D713DE4(uint64_t a1, char a2, int a3, void *key)
{
  if ((*(_DWORD *)(a1 + 40) >> a2)) {
    uint64_t v4 = (const void **)MEMORY[0x1E4F1CFD0];
  }
  else {
    uint64_t v4 = (const void **)MEMORY[0x1E4F1CFC8];
  }
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), key, *v4);
}

BOOL sub_19D713E18(__CFString *a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  uint64_t v1 = a1;
  if (CFEqual(a1, @"<GERMANY>"))
  {
    if (qword_1EB217418 != -1) {
      dispatch_once(&qword_1EB217418, &unk_1EEF366D8);
    }
    uint64_t v2 = @"D";
    if (dword_1EB217378 == 1)
    {
      uint64_t v3 = @"ZD";
      int v4 = 1;
      BOOL v5 = 1;
      uint64_t v1 = @"DN";
    }
    else
    {
      if (dword_1EB217378 == 3 || dword_1EB217378 == 2)
      {
        int v4 = 0;
        uint64_t v3 = 0;
        BOOL v5 = dword_1EB217378 == 2;
        if (dword_1EB217378 != 2) {
          uint64_t v2 = 0;
        }
      }
      else
      {
        if (dword_1EB217378 != 6)
        {
          uint64_t v22 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c", 47);
          if (v22) {
            int v28 = v22 + 1;
          }
          else {
            int v28 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c";
          }
          _MGLog((uint64_t)v28, 856, @"Unsupported device type for Germany Region Code check", v23, v24, v25, v26, v27, v29);
          BOOL v9 = 0;
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
            return v9;
          }
          *(_WORD *)buf = 0;
          CFTypeID v18 = MEMORY[0x1E4F14500];
          int v19 = "Unsupported device type for Germany Region Code check";
          uint32_t v20 = 2;
          goto LABEL_27;
        }
        int v4 = 0;
        uint64_t v3 = 0;
        BOOL v5 = 1;
      }
      uint64_t v1 = @"FD";
    }
  }
  else
  {
    int v4 = 0;
    uint64_t v3 = 0;
    BOOL v5 = 0;
    uint64_t v2 = 0;
  }
  uint64_t v6 = MGCopyAnswer((const char **)@"h63QSdBCiT/z0WU6rdQv6Q");
  if (!v6)
  {
    int v11 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c", 47);
    if (v11) {
      CFDataRef v17 = v11 + 1;
    }
    else {
      CFDataRef v17 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c";
    }
    _MGLog((uint64_t)v17, 872, @"Could not get region code; assuming device is not in region %@",
      v12,
      v13,
      v14,
      v15,
      v16,
      (char)v1);
    BOOL v9 = 0;
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
      return v9;
    }
    *(_DWORD *)buf = 138412290;
    uint64_t v31 = v1;
    CFTypeID v18 = MEMORY[0x1E4F14500];
    int v19 = "Could not get region code; assuming device is not in region %@";
    uint32_t v20 = 12;
LABEL_27:
    _os_log_impl(&dword_19D70E000, v18, OS_LOG_TYPE_DEFAULT, v19, buf, v20);
    return 0;
  }
  uint64_t v7 = v6;
  int v8 = CFEqual(v1, v6);
  BOOL v9 = v8 != 0;
  if (v8) {
    int v10 = 0;
  }
  else {
    int v10 = v4;
  }
  if (v10 == 1) {
    BOOL v9 = CFEqual(v3, v7) != 0;
  }
  if (v5 && !v9) {
    BOOL v9 = CFEqual(v2, v7) != 0;
  }
  CFRelease(v7);
  return v9;
}

CFNumberRef sub_19D7140D0(unsigned int a1)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (sub_19D714D40() == 4)
  {
    if (a1 > 6) {
      goto LABEL_6;
    }
    if (((1 << a1) & 6) != 0)
    {
      int v36 = -1;
      *(_DWORD *)buf = -1;
      uint64_t v23 = (unsigned int (*)(uint8_t *, int *))*((void *)off_1E9449170 + 34);
      if (!v23) {
        uint64_t v23 = (unsigned int (*)(uint8_t *, int *))sub_19D71A930(34, 2);
      }
      if (!v23(buf, &v36)) {
        return 0;
      }
      if (a1 == 1) {
        uint64_t v24 = buf;
      }
      else {
        uint64_t v24 = (uint8_t *)&v36;
      }
      return CFNumberCreate(0, kCFNumberSInt32Type, v24);
    }
    if (((1 << a1) & 0x30) == 0)
    {
      if (((1 << a1) & 0x48) != 0) {
        return 0;
      }
LABEL_6:
      uint64_t v2 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGIOMFBSupport.c", 47);
      if (v2) {
        int v8 = v2 + 1;
      }
      else {
        int v8 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGIOMFBSupport.c";
      }
      _MGLog((uint64_t)v8, 229, @"request for unknown screen param %d", v3, v4, v5, v6, v7, a1);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT)) {
        sub_19D76F020(a1);
      }
      return 0;
    }
  }
  CFDataRef v9 = (const __CFData *)MGCopyAnswer((const char **)@"oBbtJ8x+s1q0OkaiocPuog");
  CFDataRef v10 = v9;
  if (v9)
  {
    CFTypeID v11 = CFGetTypeID(v9);
    if (v11 == CFDataGetTypeID() && CFDataGetLength(v10) == 24)
    {
      BytePtr = CFDataGetBytePtr(v10);
      uint64_t v13 = BytePtr;
      switch(a1)
      {
        case 1u:
          int v14 = *(_DWORD *)BytePtr;
          goto LABEL_44;
        case 2u:
          uint64_t v13 = BytePtr + 4;
          int v14 = *((_DWORD *)BytePtr + 1);
          goto LABEL_44;
        case 3u:
          uint64_t v13 = BytePtr + 8;
          int v14 = *((_DWORD *)BytePtr + 2);
          goto LABEL_44;
        case 4u:
          uint64_t v13 = BytePtr + 12;
          float v33 = *((float *)BytePtr + 3);
          goto LABEL_41;
        case 5u:
          uint64_t v13 = BytePtr + 16;
          float v33 = *((float *)BytePtr + 4);
LABEL_41:
          if (v33 == -1.0) {
            goto LABEL_47;
          }
          CFNumberType v34 = kCFNumberFloatType;
          goto LABEL_46;
        case 6u:
          uint64_t v13 = BytePtr + 20;
          int v14 = *((_DWORD *)BytePtr + 5);
LABEL_44:
          if (v14 == -1) {
            goto LABEL_47;
          }
          CFNumberType v34 = kCFNumberSInt32Type;
LABEL_46:
          CFNumberRef v22 = CFNumberCreate(0, v34, v13);
          break;
        default:
          uint64_t v26 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGIOMFBSupport.c", 47);
          if (v26) {
            uint64_t v32 = v26 + 1;
          }
          else {
            uint64_t v32 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGIOMFBSupport.c";
          }
          _MGLog((uint64_t)v32, 258, @"request for unknown screen param %d", v27, v28, v29, v30, v31, a1);
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            unsigned int v38 = a1;
            _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "request for unknown screen param %d", buf, 8u);
          }
LABEL_47:
          CFNumberRef v22 = 0;
          break;
      }
LABEL_22:
      CFRelease(v10);
      return v22;
    }
  }
  uint64_t v15 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGIOMFBSupport.c", 47);
  if (v15) {
    uint64_t v21 = v15 + 1;
  }
  else {
    uint64_t v21 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGIOMFBSupport.c";
  }
  _MGLog((uint64_t)v21, 236, @"failed to get static screen info", v16, v17, v18, v19, v20, v35);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "failed to get static screen info", buf, 2u);
  }
  CFNumberRef v22 = 0;
  if (v10) {
    goto LABEL_22;
  }
  return v22;
}

id MobileGestalt_copy_uniqueDeviceID_obj()
{
  uint64_t v0 = (void *)MGCopyAnswer((const char **)@"re6Zb+zwFKJNlkQTUeT+/w");

  return v0;
}

id MobileGestalt_copy_productVersion_obj()
{
  uint64_t v0 = (void *)MGCopyAnswer((const char **)@"qNNddlUK+B/YlooNoymwgA");

  return v0;
}

uint64_t MobileGestalt_get_deviceClassNumber(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  uint64_t v3 = MGCopyAnswer((const char **)@"mtrAoWJ3gsq+I90ZnQ0vQw");
  if (v3)
  {
    uint64_t v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      uint64_t v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      uint64_t v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D770680(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

const void *MGCopyAnswer(const char **a1)
{
  return sub_19D710BBC(a1, 0);
}

uint64_t sub_19D714558()
{
  uint64_t result = MGGetBoolAnswer((const char **)@"AJFQheZDyUbvI6RmBMT9Cg");
  if (result)
  {
    BOOL v1 = sub_19D7145C8("IODeviceTree:/product/facetime", @"bitrate-3g", 0);
    uint64_t result = 0;
    if (v1)
    {
      BOOL v2 = 0;
      uint64_t result = sub_19D714950(@"AllowFaceTimeOverCellular", &v2);
      if (!v2) {
        return sub_19D714600();
      }
    }
  }
  return result;
}

BOOL sub_19D7145C8(char *a1, const __CFString *a2, int a3)
{
  CFTypeRef v3 = sub_19D717CF8(a1, a2, a3);
  CFTypeRef v4 = v3;
  if (v3) {
    CFRelease(v3);
  }
  return v4 != 0;
}

uint64_t sub_19D714600()
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (sub_19D714D40() == 4) {
    return 1;
  }
  BOOL v34 = 0;
  BOOL v1 = sub_19D714950(@"AllowsFaceTime", &v34);
  if (v34) {
    return v1;
  }
  CFDictionaryRef v2 = (const __CFDictionary *)sub_19D715CD8("/System/Library/CoreServices/OverrideSoftwareBehaviors.plist");
  uint64_t v0 = sub_19D714DA4();
  CFTypeRef v3 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v3) {
    uint64_t v9 = v3 + 1;
  }
  else {
    uint64_t v9 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  }
  _MGLog((uint64_t)v9, 4399, @"Determined that voip capability is: %d", v4, v5, v6, v7, v8, v0);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)int v36 = v0;
    _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Determined that voip capability is: %d", buf, 8u);
  }
  if (v2)
  {
    uint64_t v10 = sub_19D710BBC((const char **)@"h63QSdBCiT/z0WU6rdQv6Q", 0);
    if (v10)
    {
      uint64_t v11 = v10;
      if (CFDictionaryContainsKey(v2, v10))
      {
        CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v2, v11);
        if (Value)
        {
          CFDictionaryRef v13 = Value;
          CFTypeID v14 = CFGetTypeID(Value);
          if (v14 == CFDictionaryGetTypeID())
          {
            if (CFDictionaryContainsKey(v13, @"voip"))
            {
              uint64_t v15 = CFDictionaryGetValue(v13, @"voip");
              if (v15)
              {
                uint64_t v16 = v15;
                CFTypeID v17 = CFGetTypeID(v15);
                if (v17 == CFBooleanGetTypeID() && v16 == (const void *)*MEMORY[0x1E4F1CFD0])
                {
                  uint64_t v18 = sub_19D71EF70("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
                  _MGLog((uint64_t)v18, 4426, @"Found the override for regionCode: %@", v19, v20, v21, v22, v23, (char)v11);
                  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 138412290;
                    *(void *)int v36 = v11;
                    _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Found the override for regionCode: %@", buf, 0xCu);
                  }
                  char v33 = 0;
                  LODWORD(v0) = sub_19D714950(@"AllowsVoIP", (BOOL *)&v33);
                  uint64_t v24 = (uint64_t (*)(__CFString *))*((void *)off_1E9449170 + 40);
                  if (!v24) {
                    uint64_t v24 = (uint64_t (*)(__CFString *))sub_19D71A930(40, 2);
                  }
                  int v25 = v24(@"disablevoipforlocale");
                  uint64_t v26 = sub_19D71EF70("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
                  _MGLog((uint64_t)v26, 4441, @"Determined carrier_override_present: %d, carrier_override: %d, springboard_locale_override: %d ", v27, v28, v29, v30, v31, v33);
                  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 67109632;
                    *(_DWORD *)int v36 = v33;
                    *(_WORD *)&v36[4] = 1024;
                    *(_DWORD *)&v36[6] = v0;
                    __int16 v37 = 1024;
                    int v38 = v25;
                    _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Determined carrier_override_present: %d, carrier_override: %d, springboard_locale_override: %d ", buf, 0x14u);
                  }
                  if (v33) {
                    uint64_t v0 = v0;
                  }
                  else {
                    uint64_t v0 = v25 ^ 1u;
                  }
                }
              }
            }
          }
        }
      }
      CFRelease(v11);
    }
    CFRelease(@"voip");
    CFRelease(v2);
  }
  return v0;
}

BOOL sub_19D714950(uint64_t a1, BOOL *a2)
{
  __int16 v7 = 0;
  if (!a2) {
    sub_19D76EFF4();
  }
  BOOL v4 = 1;
  if (sub_19D7149E0(a1, 1, (BOOL *)&v7 + 1))
  {
    BOOL v5 = 0;
  }
  else
  {
    BOOL v4 = sub_19D7149E0(a1, 2, (BOOL *)&v7);
    BOOL v5 = (_BYTE)v7 != 0;
  }
  if (HIBYTE(v7)) {
    BOOL v5 = 1;
  }
  *a2 = v5;
  return v4;
}

BOOL sub_19D7149E0(uint64_t a1, uint64_t a2, BOOL *a3)
{
  __int16 v11 = 0;
  if (!a3) {
    sub_19D76EFC8();
  }
  CFStringRef v6 = CFStringCreateWithFormat(0, 0, @"com.apple.carrier_%d", a2);
  BOOL v7 = sub_19D714ADC(@"/var/mobile/Library/Carrier Bundles", (uint64_t)v6, a1, (unsigned char *)&v11 + 1);
  if (v6) {
    CFRelease(v6);
  }
  if (v7)
  {
    BOOL v8 = 1;
  }
  else
  {
    CFStringRef v9 = CFStringCreateWithFormat(0, 0, @"com.apple.country.carrier_%d", a2);
    BOOL v8 = sub_19D714ADC(@"/var/mobile/Library/CountryBundles/", (uint64_t)v9, a1, &v11);
    if (v9) {
      CFRelease(v9);
    }
  }
  *a3 = (HIBYTE(v11) | v11) != 0;
  return v8;
}

BOOL sub_19D714ADC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  if (!a4) {
    sub_19D76EF9C();
  }
  *a4 = 0;
  CFBooleanRef v5 = (const __CFBoolean *)_CFPreferencesCopyValueWithContainer();
  if (!v5) {
    return 0;
  }
  CFBooleanRef v6 = v5;
  CFTypeID v7 = CFGetTypeID(v5);
  if (v7 == CFBooleanGetTypeID())
  {
    *a4 = 1;
    BOOL v8 = CFBooleanGetValue(v6) != 0;
  }
  else
  {
    BOOL v8 = 0;
  }
  CFRelease(v6);
  return v8;
}

__CFString *sub_19D714B88()
{
  if (sub_19D714D40() == 3)
  {
    if (dyld_program_sdk_at_least()) {
      return @"iPadOS";
    }
    else {
      return @"iOS";
    }
  }
  if ((sub_19D714D40() == 1 || sub_19D714D40() == 2 || sub_19D714D40() == 3)
    && !sub_19D714D84())
  {
    return @"iOS";
  }
  if (sub_19D714D40() == 6) {
    return @"watchOS";
  }
  if (sub_19D714D40() == 8) {
    return @"bridgeOS";
  }
  if (sub_19D714D40() == 4 || sub_19D714D40() == 7)
  {
    BOOL v1 = sub_19D710BBC((const char **)@"h63QSdBCiT/z0WU6rdQv6Q", 0);
    CFLocaleRef v2 = CFLocaleCopyCurrent();
    CFTypeRef Value = CFLocaleGetValue(v2, (CFLocaleKey)*MEMORY[0x1E4F1D1F0]);
    if (v1 && CFEqual(v1, @"CH"))
    {
      uint64_t v0 = @"Apple TVOS";
    }
    else
    {
      if (Value && CFEqual(Value, @"CH")) {
        uint64_t v0 = @"Apple TVOS";
      }
      else {
        uint64_t v0 = @"tvOS";
      }
      if (!v1) {
        goto LABEL_25;
      }
    }
    CFRelease(v1);
LABEL_25:
    if (v2) {
      CFRelease(v2);
    }
    return v0;
  }
  if (sub_19D714D40() == 11) {
    return @"visionOS";
  }

  return (__CFString *)sub_19D710BBC((const char **)@"ivIu8YTDnBSrYv/SN4G8Ag", 0);
}

uint64_t sub_19D714D40()
{
  if (qword_1EB217418 != -1) {
    dispatch_once(&qword_1EB217418, &unk_1EEF366D8);
  }
  return dword_1EB217378;
}

BOOL sub_19D714D84()
{
  return _CFMZEnabled() != 0;
}

uint64_t sub_19D714DA4()
{
  BOOL v2 = 0;
  uint64_t result = sub_19D714950(@"AllowsVoIP", &v2);
  if (!v2)
  {
    if (MGGetBoolAnswer((const char **)@"6MnVtR+c9LeR46bMxvR5Yw"))
    {
      if (MGGetBoolAnswer((const char **)@"L5al7b+7JATD/izSJeH0aQ"))
      {
        return 0;
      }
      else
      {
        BOOL v1 = (uint64_t (*)(__CFString *))*((void *)off_1E9449170 + 40);
        if (!v1) {
          BOOL v1 = (uint64_t (*)(__CFString *))sub_19D71A930(40, 2);
        }
        return v1(@"voip");
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t sub_19D714E38(int a1)
{
  uint64_t v116 = *MEMORY[0x1E4F143B8];
  uint64_t v108 = 0;
  v109 = &v108;
  uint64_t v110 = 0x2000000000;
  char v111 = 0;
  CFDictionaryRef v2 = (const __CFDictionary *)sub_19D715CD8("/private/var/containers/Shared/SystemGroup/systemgroup.com.apple.mobilegestaltcache/Library/Caches/com.apple.MobileGestalt.plist");
  if (!v2) {
    goto LABEL_84;
  }
  CFDictionaryRef v3 = v2;
  BOOL v4 = (__CFString *)sub_19D7155AC((const void *)*MEMORY[0x1E4F1CD10], 1);
  if (!v4)
  {
    uint64_t v19 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
    if (v19) {
      int v25 = v19 + 1;
    }
    else {
      int v25 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
    }
    _MGLog((uint64_t)v25, 61, @"can't validate cache version since _kCFSystemVersionBuildVersionKey is missing", v20, v21, v22, v23, v24, v105);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "can't validate cache version since _kCFSystemVersionBuildVersionKey is missing", buf, 2u);
    }
    goto LABEL_83;
  }
  CFBooleanRef v5 = v4;
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v3, @"CacheExtra");
  if (!Value)
  {
    uint64_t v26 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
    if (v26) {
      uint64_t v32 = v26 + 1;
    }
    else {
      uint64_t v32 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
    }
    _MGLog((uint64_t)v32, 68, @"cache extra is missing", v27, v28, v29, v30, v31, v105);
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_23;
    }
    *(_WORD *)buf = 0;
    CFTypeID v17 = MEMORY[0x1E4F14500];
    uint64_t v18 = "cache extra is missing";
    goto LABEL_22;
  }
  CFDictionaryRef v7 = Value;
  unint64_t v8 = (unint64_t)sub_19D7155AC(@"ReleaseType", 0);
  unint64_t v9 = (unint64_t)CFDictionaryGetValue(v7, @"9UCjT7Qfi4xLVvPAKIzTCQ");
  if (v8 | v9)
  {
    if (!v8 && v9)
    {
      uint64_t v10 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
      if (v10) {
        uint64_t v16 = v10 + 1;
      }
      else {
        uint64_t v16 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
      }
      _MGLog((uint64_t)v16, 113, @"moving from non-GM to release, invalidate cache", v11, v12, v13, v14, v15, v105);
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_23;
      }
      *(_WORD *)buf = 0;
      CFTypeID v17 = MEMORY[0x1E4F14500];
      uint64_t v18 = "moving from non-GM to release, invalidate cache";
LABEL_22:
      _os_log_impl(&dword_19D70E000, v17, OS_LOG_TYPE_DEFAULT, v18, buf, 2u);
LABEL_23:
      unint64_t v8 = 0;
      goto LABEL_82;
    }
    if (v8 && !v9)
    {
      char v33 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
      if (v33) {
        uint64_t v39 = v33 + 1;
      }
      else {
        uint64_t v39 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
      }
      _MGLog((uint64_t)v39, 118, @"moving from release to non-GM, invalidate cache", v34, v35, v36, v37, v38, v105);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        uint32_t v40 = MEMORY[0x1E4F14500];
        uint64_t v41 = "moving from release to non-GM, invalidate cache";
LABEL_80:
        uint32_t v95 = 2;
        goto LABEL_81;
      }
      goto LABEL_82;
    }
    if (v8 && v9 && !CFEqual((CFTypeRef)v9, (CFTypeRef)v8))
    {
      long long v96 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
      if (v96) {
        int v102 = v96 + 1;
      }
      else {
        int v102 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
      }
      _MGLog((uint64_t)v102, 128, @"we're switching release types, invalidate cache", v97, v98, v99, v100, v101, v105);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        uint32_t v40 = MEMORY[0x1E4F14500];
        uint64_t v41 = "we're switching release types, invalidate cache";
        goto LABEL_80;
      }
      goto LABEL_82;
    }
  }
  uint64_t v42 = CFDictionaryGetValue(v3, @"CacheVersion");
  if (v42)
  {
    CFIndex v43 = (CFIndex)v42;
    if (CFEqual(v42, v5))
    {
      uint64_t v44 = CFDictionaryGetValue(v3, @"CacheUUID");
      if (!v44)
      {
        int v74 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
        if (v74) {
          uint64_t v80 = v74 + 1;
        }
        else {
          uint64_t v80 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
        }
        _MGLog((uint64_t)v80, 147, @"can't validate cache since uuid is missing", v75, v76, v77, v78, v79, v105);
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          uint32_t v40 = MEMORY[0x1E4F14500];
          uint64_t v41 = "can't validate cache since uuid is missing";
          goto LABEL_80;
        }
        goto LABEL_82;
      }
      CFIndex v45 = (CFIndex)v44;
      if (CFEqual(v44, @"940618A9-9D74-47FE-B6EA-8D86CDA7774C"))
      {
        CFDataRef v46 = (const __CFData *)CFDictionaryGetValue(v3, @"CacheData");
        if (v46 && (CFDataRef v47 = v46, v48 = CFGetTypeID(v46), v48 == CFDataGetTypeID()) && CFDataGetLength(v47) == 5886)
        {
          if (a1)
          {
            os_unfair_lock_lock((os_unfair_lock_t)&unk_1EB217440);
            BytePtr = CFDataGetBytePtr(v47);
            memcpy(qword_1EB2178A8, BytePtr, 0x16FEuLL);
          }
          *((unsigned char *)v109 + 24) = 1;
          v106[0] = MEMORY[0x1E4F143A8];
          v106[1] = 0x40000000;
          v106[2] = sub_19D7108F8;
          v106[3] = &unk_1E5963600;
          char v107 = a1;
          v106[4] = &v108;
          sub_19D710820(v7, (uint64_t)v106);
          if (a1)
          {
            CFDataRef v50 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
            long long v51 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
            if (v51) {
              CFDataRef v50 = v51 + 1;
            }
            char Length = CFDataGetLength(v47);
            CFDictionaryGetCount(v7);
            _MGLog((uint64_t)v50, 205, @"Cache loaded with %zu pre-cached in CacheData and %ld items in CacheExtra.", v53, v54, v55, v56, v57, Length);
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
            {
              CFIndex v58 = CFDataGetLength(v47);
              CFIndex Count = CFDictionaryGetCount(v7);
              *(_DWORD *)buf = 134218240;
              CFIndex v113 = v58;
              __int16 v114 = 2048;
              v115 = (__CFString *)Count;
              _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Cache loaded with %zu pre-cached in CacheData and %ld items in CacheExtra.", buf, 0x16u);
            }
            os_unfair_lock_unlock((os_unfair_lock_t)&unk_1EB217440);
          }
        }
        else
        {
          uint64_t v81 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
          if (v81) {
            int v87 = v81 + 1;
          }
          else {
            int v87 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
          }
          _MGLog((uint64_t)v87, 158, @"cache data is invalid", v82, v83, v84, v85, v86, v105);
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            uint32_t v40 = MEMORY[0x1E4F14500];
            uint64_t v41 = "cache data is invalid";
            goto LABEL_80;
          }
        }
        goto LABEL_82;
      }
      stat v88 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
      if (v88) {
        int v94 = v88 + 1;
      }
      else {
        int v94 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
      }
      _MGLog((uint64_t)v94, 152, @"cache UUID %@ doesn't match build UUID %@", v89, v90, v91, v92, v93, v45);
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_82;
      }
      *(_DWORD *)buf = 138412546;
      CFIndex v113 = v45;
      __int16 v114 = 2112;
      v115 = @"940618A9-9D74-47FE-B6EA-8D86CDA7774C";
      uint32_t v40 = MEMORY[0x1E4F14500];
      uint64_t v41 = "cache UUID %@ doesn't match build UUID %@";
    }
    else
    {
      long long v67 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
      if (v67) {
        uint64_t v73 = v67 + 1;
      }
      else {
        uint64_t v73 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
      }
      _MGLog((uint64_t)v73, 141, @"cache %@ doesn't match OS %@", v68, v69, v70, v71, v72, v43);
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_82;
      }
      *(_DWORD *)buf = 138412546;
      CFIndex v113 = v43;
      __int16 v114 = 2112;
      v115 = v5;
      uint32_t v40 = MEMORY[0x1E4F14500];
      uint64_t v41 = "cache %@ doesn't match OS %@";
    }
    uint32_t v95 = 22;
LABEL_81:
    _os_log_impl(&dword_19D70E000, v40, OS_LOG_TYPE_DEFAULT, v41, buf, v95);
    goto LABEL_82;
  }
  uint64_t v60 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
  if (v60) {
    int v66 = v60 + 1;
  }
  else {
    int v66 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
  }
  _MGLog((uint64_t)v66, 136, @"can't validate cache version since cacheVers is missing", v61, v62, v63, v64, v65, v105);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    uint32_t v40 = MEMORY[0x1E4F14500];
    uint64_t v41 = "can't validate cache version since cacheVers is missing";
    goto LABEL_80;
  }
LABEL_82:
  CFRelease(v3);
  CFRelease(v5);
  CFDictionaryRef v3 = (const __CFDictionary *)v8;
  if (v8) {
LABEL_83:
  }
    CFRelease(v3);
LABEL_84:
  uint64_t v103 = *((unsigned __int8 *)v109 + 24);
  _Block_object_dispose(&v108, 8);
  return v103;
}

const void *sub_19D7155AC(const void *a1, int a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef v4 = (const __CFDictionary *)_CFCopySystemVersionDictionary();
  if (v4)
  {
    CFDictionaryRef v5 = v4;
    CFDictionaryRef Value = CFDictionaryGetValue(v4, a1);
    CFDictionaryRef v7 = Value;
    if (Value)
    {
      CFRetain(Value);
    }
    else if (a2)
    {
      uint64_t v15 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c", 47);
      if (v15) {
        uint64_t v21 = v15 + 1;
      }
      else {
        uint64_t v21 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c";
      }
      _MGLog((uint64_t)v21, 297, @"Could not lookup %@ from system version dictionary", v16, v17, v18, v19, v20, (char)a1);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        int v25 = a1;
        _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Could not lookup %@ from system version dictionary", buf, 0xCu);
      }
    }
    CFRelease(v5);
  }
  else
  {
    if (a2)
    {
      unint64_t v8 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c", 47);
      uint64_t v14 = v8 ? v8 + 1 : "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c";
      _MGLog((uint64_t)v14, 302, @"Could not load the system version dictionary", v9, v10, v11, v12, v13, v23);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Could not load the system version dictionary", buf, 2u);
      }
    }
    return 0;
  }
  return v7;
}

const void *sub_19D715738(const char *a1, int a2)
{
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  memset(&v87, 0, sizeof(v87));
  CFErrorRef error = 0;
  int v4 = open(a1, 0);
  if (v4 == -1)
  {
    if (!a2)
    {
      uint64_t v17 = 0;
      unint64_t v8 = 0;
      goto LABEL_43;
    }
    uint64_t v20 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c";
    uint64_t v21 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c", 47);
    if (v21) {
      uint64_t v20 = v21 + 1;
    }
    uint64_t v22 = __error();
    strerror(*v22);
    _MGLog((uint64_t)v20, 74, @"Could not open %s: %s", v23, v24, v25, v26, v27, (char)a1);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v28 = __error();
      uint64_t v29 = strerror(*v28);
      *(_DWORD *)buf = 136315394;
      CFErrorRef v89 = (CFErrorRef)a1;
      __int16 v90 = 2080;
      uint64_t v91 = v29;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Could not open %s: %s", buf, 0x16u);
    }
    unint64_t v8 = 0;
    goto LABEL_40;
  }
  int v5 = v4;
  if (fstat(v4, &v87) == -1)
  {
    if (!a2) {
      goto LABEL_38;
    }
    uint64_t v30 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c";
    uint64_t v31 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c", 47);
    if (v31) {
      uint64_t v30 = v31 + 1;
    }
    uint64_t v32 = __error();
    strerror(*v32);
    _MGLog((uint64_t)v30, 82, @"Could not fstat %s: %s", v33, v34, v35, v36, v37, (char)a1);
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_38;
    }
    uint64_t v38 = __error();
    uint64_t v39 = strerror(*v38);
    *(_DWORD *)buf = 136315394;
    CFErrorRef v89 = (CFErrorRef)a1;
    __int16 v90 = 2080;
    uint64_t v91 = v39;
    uint32_t v40 = MEMORY[0x1E4F14500];
    uint64_t v41 = "Could not fstat %s: %s";
    uint32_t v42 = 22;
    goto LABEL_37;
  }
  off_t st_size = v87.st_size;
  CFDictionaryRef v7 = (UInt8 *)malloc_type_malloc(v87.st_size, 0xB719480CuLL);
  if (!v7)
  {
    if (!a2) {
      goto LABEL_38;
    }
    CFIndex v43 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c", 47);
    long long v49 = v43 ? v43 + 1 : "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c";
    _MGLog((uint64_t)v49, 92, @"Could not malloc buffer for file data", v44, v45, v46, v47, v48, v85);
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_38;
    }
    *(_WORD *)buf = 0;
    uint32_t v40 = MEMORY[0x1E4F14500];
    uint64_t v41 = "Could not malloc buffer for file data";
    uint32_t v42 = 2;
LABEL_37:
    _os_log_impl(&dword_19D70E000, v40, OS_LOG_TYPE_DEFAULT, v41, buf, v42);
LABEL_38:
    unint64_t v8 = 0;
    goto LABEL_39;
  }
  unint64_t v8 = v7;
  if (read(v5, v7, st_size) == st_size)
  {
    CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFDataRef v10 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v8, st_size, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
    if (v10)
    {
      CFDataRef v11 = v10;
      CFPropertyListRef v12 = CFPropertyListCreateWithData(v9, v10, 0, 0, &error);
      if (v12)
      {
        uint64_t v13 = v12;
        CFTypeID v14 = CFGetTypeID(v12);
        CFTypeID TypeID = CFDictionaryGetTypeID();
        BOOL v16 = v14 == TypeID;
        if (v14 == TypeID) {
          uint64_t v17 = v13;
        }
        else {
          uint64_t v17 = 0;
        }
        if (v16) {
          uint64_t v18 = 0;
        }
        else {
          uint64_t v18 = v13;
        }
        if (v16 || a2 == 0)
        {
          uint64_t v13 = v18;
        }
        else
        {
          uint64_t v78 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c", 47);
          if (v78) {
            uint64_t v84 = v78 + 1;
          }
          else {
            uint64_t v84 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c";
          }
          _MGLog((uint64_t)v84, 126, @"File contents are not a CFDictionary", v79, v80, v81, v82, v83, v85);
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "File contents are not a CFDictionary", buf, 2u);
          }
          uint64_t v17 = 0;
        }
      }
      else
      {
        if (a2)
        {
          uint64_t v71 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c", 47);
          uint64_t v77 = v71 ? v71 + 1 : "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c";
          _MGLog((uint64_t)v77, 119, @"Could not create dictionary from file contents: %@", v72, v73, v74, v75, v76, (char)error);
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            CFErrorRef v89 = error;
            _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Could not create dictionary from file contents: %@", buf, 0xCu);
          }
        }
        uint64_t v17 = 0;
        uint64_t v13 = 0;
      }
      close(v5);
      CFRelease(v11);
      if (v13) {
        CFRelease(v13);
      }
      goto LABEL_41;
    }
    if (!a2) {
      goto LABEL_39;
    }
    uint64_t v64 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c", 47);
    uint64_t v70 = v64 ? v64 + 1 : "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c";
    _MGLog((uint64_t)v70, 107, @"Could not create CFData with file data", v65, v66, v67, v68, v69, v85);
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_39;
    }
    *(_WORD *)buf = 0;
    uint64_t v61 = MEMORY[0x1E4F14500];
    uint64_t v62 = "Could not create CFData with file data";
    uint32_t v63 = 2;
  }
  else
  {
    if (!a2) {
      goto LABEL_39;
    }
    long long v51 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c";
    uint64_t v52 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c", 47);
    if (v52) {
      long long v51 = v52 + 1;
    }
    uint64_t v53 = __error();
    strerror(*v53);
    _MGLog((uint64_t)v51, 99, @"Could not read %s: %s", v54, v55, v56, v57, v58, (char)a1);
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_39;
    }
    uint64_t v59 = __error();
    uint64_t v60 = strerror(*v59);
    *(_DWORD *)buf = 136315394;
    CFErrorRef v89 = (CFErrorRef)a1;
    __int16 v90 = 2080;
    uint64_t v91 = v60;
    uint64_t v61 = MEMORY[0x1E4F14500];
    uint64_t v62 = "Could not read %s: %s";
    uint32_t v63 = 22;
  }
  _os_log_impl(&dword_19D70E000, v61, OS_LOG_TYPE_DEFAULT, v62, buf, v63);
LABEL_39:
  close(v5);
LABEL_40:
  uint64_t v17 = 0;
LABEL_41:
  if (error)
  {
    CFRelease(error);
    CFErrorRef error = 0;
  }
LABEL_43:
  free(v8);
  return v17;
}

const void *sub_19D715CD8(const char *a1)
{
  return sub_19D715738(a1, 1);
}

const void *_MGServerCopyAnswerWithError(uint64_t a1, const char **a2, unsigned int *a3, CFTypeRef *a4)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  if ((byte_1E9449440 & 1) == 0)
  {
    uint64_t v15 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v15) {
      uint64_t v21 = v15 + 1;
    }
    else {
      uint64_t v21 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog((uint64_t)v21, 355, @"_MGServerCopyAnswer(%@) called outside of server", v16, v17, v18, v19, v20, (char)a2);
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_32;
    }
    *(_DWORD *)buf = 138412290;
    CFTypeRef v56 = a2;
    uint64_t v22 = MEMORY[0x1E4F14500];
    uint64_t v23 = "_MGServerCopyAnswer(%@) called outside of server";
    uint32_t v24 = 12;
    goto LABEL_31;
  }
  unint64_t v8 = (uint64_t (*)(uint64_t))*((void *)off_1E9449170 + 35);
  if (!v8) {
    unint64_t v8 = (uint64_t (*)(uint64_t))sub_19D71A930(35, 2);
  }
  uint64_t v9 = v8(a1);
  CFDataRef v10 = (uint64_t *)sub_19D710FBC(a2, 1);
  if (v10)
  {
    CFDataRef v11 = v10;
    if (sub_19D71171C(v10, v9, (uint64_t)&cf))
    {
      CFPropertyListRef v12 = (uint64_t (*)(uint64_t, CFTypeRef *))v11[3];
      if (!v12 || (v12(a1, &cf) & 1) != 0)
      {
        uint64_t v13 = sub_19D710BBC(a2, 0);
        unsigned int v14 = sub_19D718A00();
        goto LABEL_33;
      }
      uint64_t v39 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v39) {
        uint64_t v45 = v39 + 1;
      }
      else {
        uint64_t v45 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      }
      _MGLog((uint64_t)v45, 375, @"server_access_check denied access to question %@ for pid %d", v40, v41, v42, v43, v44, (char)a2);
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 138412546;
      CFTypeRef v56 = a2;
      __int16 v57 = 1024;
      int v58 = v9;
      uint64_t v22 = MEMORY[0x1E4F14500];
      uint64_t v23 = "server_access_check denied access to question %@ for pid %d";
    }
    else
    {
      uint64_t v32 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v32) {
        uint64_t v38 = v32 + 1;
      }
      else {
        uint64_t v38 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      }
      _MGLog((uint64_t)v38, 368, @"server asked to answer non-server question %@ for pid %d", v33, v34, v35, v36, v37, (char)a2);
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_32;
      }
      *(_DWORD *)buf = 138412546;
      CFTypeRef v56 = a2;
      __int16 v57 = 1024;
      int v58 = v9;
      uint64_t v22 = MEMORY[0x1E4F14500];
      uint64_t v23 = "server asked to answer non-server question %@ for pid %d";
    }
    uint32_t v24 = 18;
LABEL_31:
    _os_log_impl(&dword_19D70E000, v22, OS_LOG_TYPE_DEFAULT, v23, buf, v24);
LABEL_32:
    uint64_t v13 = 0;
    unsigned int v14 = 9;
    goto LABEL_33;
  }
  uint64_t v25 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v25) {
    uint64_t v31 = v25 + 1;
  }
  else {
    uint64_t v31 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  }
  _MGLog((uint64_t)v31, 363, @"server asked to answer unknown question %@ for pid %d", v26, v27, v28, v29, v30, (char)a2);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    CFTypeRef v56 = a2;
    __int16 v57 = 1024;
    int v58 = v9;
    _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "server asked to answer unknown question %@ for pid %d", buf, 0x12u);
  }
  uint64_t v13 = 0;
  unsigned int v14 = 5;
LABEL_33:
  if (a4)
  {
    *a4 = cf;
  }
  else if (cf)
  {
    uint64_t v46 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v46) {
      uint64_t v52 = v46 + 1;
    }
    else {
      uint64_t v52 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog((uint64_t)v52, 389, @"%@", v47, v48, v49, v50, v51, (char)cf);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      CFTypeRef v56 = cf;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
    }
    CFRelease(cf);
  }
  if (a3) {
    *a3 = v14;
  }
  return v13;
}

BOOL sub_19D7160B4(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"re6Zb+zwFKJNlkQTUeT+/w", 85, a2);
}

BOOL sub_19D7160C8(uint64_t a1, const void *a2, int a3, CFMutableStringRef *a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  bzero(buffer, 0x401uLL);
  unint64_t v8 = (uint64_t (*)(uint64_t, const char *))*((void *)off_1E9449170 + 30);
  if (!v8) {
    unint64_t v8 = (uint64_t (*)(uint64_t, const char *))sub_19D71A930(30, 2);
  }
  CFArrayRef v9 = (const __CFArray *)v8(a1, "com.apple.private.MobileGestalt.AllowedProtectedKeys");
  CFArrayRef v10 = v9;
  if (!v9) {
    goto LABEL_16;
  }
  CFTypeID v11 = CFGetTypeID(v9);
  if (v11 != CFArrayGetTypeID())
  {
    uint64_t v13 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    unsigned int v14 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v14) {
      uint64_t v13 = v14 + 1;
    }
    uint64_t v15 = (uint64_t (*)(uint64_t))*((void *)off_1E9449170 + 35);
    if (!v15) {
      uint64_t v15 = (uint64_t (*)(uint64_t))sub_19D71A930(35, 2);
    }
    char v16 = v15(a1);
    _MGLog((uint64_t)v13, 462, @"pid %d entitlement is not an array", v17, v18, v19, v20, v21, v16);
    BOOL v12 = 0;
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
LABEL_17:
      if (!a4) {
        goto LABEL_34;
      }
      goto LABEL_18;
    }
    uint64_t v22 = (uint64_t (*)(uint64_t))*((void *)off_1E9449170 + 35);
    if (!v22) {
      uint64_t v22 = (uint64_t (*)(uint64_t))sub_19D71A930(35, 2);
    }
    *(_DWORD *)buf = 67109120;
    int v35 = v22(a1);
    _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "pid %d entitlement is not an array", buf, 8u);
LABEL_16:
    BOOL v12 = 0;
    goto LABEL_17;
  }
  v38.length = CFArrayGetCount(v10);
  v38.location = 0;
  if (CFArrayContainsValue(v10, v38, a2))
  {
    BOOL v12 = 1;
    if (!a4) {
      goto LABEL_34;
    }
  }
  else
  {
    BOOL v12 = sub_19D7163B0((BOOL)v10, a2, a3);
    if (!a4) {
      goto LABEL_34;
    }
  }
LABEL_18:
  uint64_t v23 = (uint64_t (*)(uint64_t))*((void *)off_1E9449170 + 35);
  if (!v23) {
    uint64_t v23 = (uint64_t (*)(uint64_t))sub_19D71A930(35, 2);
  }
  uint64_t v24 = v23(a1);
  if (!v12)
  {
    if (*a4)
    {
      CFStringAppendFormat(*a4, 0, @" and IS NOT appropriately entitled", v30);
      goto LABEL_34;
    }
    Mutable = CFStringCreateMutable(0, 0);
    *a4 = Mutable;
    uint64_t v32 = sub_19D7107C8(v24, buffer, 1025);
    uint64_t v33 = a2;
    uint64_t v31 = v24;
    CFStringRef v28 = @"pid %d (%s) IS NOT appropriately entitled to fetch %@";
    goto LABEL_33;
  }
  BOOL v25 = MGGetBoolAnswer((const char **)@"LBJfwOEzExRxzlAnSuI7eg");
  uint64_t v26 = *a4;
  if (v25)
  {
    if (v26)
    {
      CFStringAppendFormat(v26, 0, @" but IS appropriately entitled; NO SANDBOX BUGS need be filed", v30);
      goto LABEL_34;
    }
    Mutable = CFStringCreateMutable(0, 0);
    *a4 = Mutable;
    uint64_t v32 = sub_19D7107C8(v24, buffer, 1025);
    uint64_t v33 = a2;
    uint64_t v31 = v24;
    CFStringRef v28 = @"pid %d (%s) IS appropriately entitled to fetch %@";
LABEL_33:
    CFStringAppendFormat(Mutable, 0, v28, v31, v32, v33);
    goto LABEL_34;
  }
  if (v26) {
    CFRelease(v26);
  }
  *a4 = 0;
LABEL_34:
  if (v10) {
    CFRelease(v10);
  }
  return v12;
}

BOOL sub_19D7163B0(BOOL result, const void *a2, int a3)
{
  if (result)
  {
    CFArrayRef v5 = (const __CFArray *)result;
    CFTypeID v6 = CFGetTypeID((CFTypeRef)result);
    if (v6 == CFArrayGetTypeID() && (Count = CFArrayGetCount(v5), CFIndex v8 = Count - 1, Count >= 1))
    {
      CFIndex v9 = 0;
      do
      {
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v5, v9);
        uint64_t result = sub_19D7183B0(ValueAtIndex, a2, a3);
        if (result) {
          break;
        }
      }
      while (v8 != v9++);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL sub_19D71644C()
{
  uint64_t v0 = sub_19D712EC0();
  if (v0)
  {
    CFStringRef v7 = v0;
    BOOL v8 = sub_19D7168F8((BOOL)v0, @"Internal", v1, v2, v3, v4, v5, v6, @"Lite Internal");
    uint64_t v15 = v8 | sub_19D7168F8((BOOL)@"Internal", v7, v9, v10, v11, v12, v13, v14, 0);
    CFRelease(v7);
    return v15;
  }
  else
  {
    return MGGetBoolAnswer((const char **)@"Oji6HRoPi7rH7HPdWVakuw");
  }
}

__CFDictionary *sub_19D7164FC()
{
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    uint64_t v40 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v40) {
      uint64_t v46 = v40 + 1;
    }
    else {
      uint64_t v46 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog((uint64_t)v46, 8276, @"Allocation failed for IOSurface dictionary.", v41, v42, v43, v44, v45, v58);
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
      return Mutable;
    }
    __int16 v60 = 0;
    uint64_t v47 = MEMORY[0x1E4F14500];
    uint64_t v48 = "Allocation failed for IOSurface dictionary.";
    uint64_t v49 = (uint8_t *)&v60;
LABEL_36:
    _os_log_impl(&dword_19D70E000, v47, OS_LOG_TYPE_DEFAULT, v48, v49, 2u);
    return Mutable;
  }
  CFStringRef v1 = sub_19D717650();
  if (!v1)
  {
    uint64_t v50 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v50) {
      CFTypeRef v56 = v50 + 1;
    }
    else {
      CFTypeRef v56 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog((uint64_t)v56, 8282, @"Failed to get current SOC Generation string", v51, v52, v53, v54, v55, v58);
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
      return Mutable;
    }
    *(_WORD *)buf = 0;
    uint64_t v47 = MEMORY[0x1E4F14500];
    uint64_t v48 = "Failed to get current SOC Generation string";
    uint64_t v49 = buf;
    goto LABEL_36;
  }
  CFStringRef v8 = v1;
  uint64_t v9 = (const void *)*MEMORY[0x1E4F1CFC8];
  BOOL v10 = sub_19D7168F8((BOOL)v1, @"H10", v2, v3, v4, v5, v6, v7, @"H11");
  uint64_t v11 = (const void *)*MEMORY[0x1E4F1CFD0];
  if (v10) {
    uint64_t v12 = (const void *)*MEMORY[0x1E4F1CFD0];
  }
  else {
    uint64_t v12 = v9;
  }
  CFDictionaryAddValue(Mutable, @"media-compression", v12);
  if (sub_19D7168F8((BOOL)v8, @"H11", v13, v14, v15, v16, v17, v18, @"H12")) {
    uint64_t v19 = v11;
  }
  else {
    uint64_t v19 = v9;
  }
  CFDictionaryAddValue(Mutable, @"buffer-compression", v19);
  if (sub_19D7168F8((BOOL)v8, @"H12", v20, v21, v22, v23, v24, v25, @"H11")
    || (int v26 = sub_19D7174E8(), v27 = v11, v26))
  {
    uint64_t v27 = v9;
  }
  CFDictionaryAddValue(Mutable, @"universal-buffer-compression", v27);
  if (sub_19D7168F8((BOOL)v8, @"H13", v28, v29, v30, v31, v32, v33, @"H12")
    || (int v34 = sub_19D7174E8(), v35 = v11, v34))
  {
    int v35 = v9;
  }
  CFDictionaryAddValue(Mutable, @"universal-lossy-buffer-compression", v35);
  BOOL v36 = sub_19D716960((BOOL)@"H15");
  if (sub_19D716960((BOOL)@"M11") || v36) {
    uint64_t v37 = v11;
  }
  else {
    uint64_t v37 = v9;
  }
  CFDictionaryAddValue(Mutable, @"universal-multislice-buffer-compression", v37);
  BOOL v38 = sub_19D716960((BOOL)@"H16");
  uint64_t v39 = v9;
  if (v38)
  {
    if (sub_19D71ACF0((BOOL)@"t8130", 0)) {
      uint64_t v39 = v9;
    }
    else {
      uint64_t v39 = v11;
    }
  }
  CFDictionaryAddValue(Mutable, @"universal-pARGB10101010-buffer-compression", v39);
  if (sub_19D716960((BOOL)@"H17") && !sub_19D71ACF0((BOOL)@"t8140", 0)) {
    uint64_t v9 = v11;
  }
  CFDictionaryAddValue(Mutable, @"universal-buffer-compression-requires-plane-alignment-2048", v9);
  CFRelease(v8);
  return Mutable;
}

BOOL sub_19D7168F8(BOOL stringToFind, CFStringRef theString, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (stringToFind)
  {
    CFStringRef v9 = (const __CFString *)stringToFind;
    uint64_t v13 = (CFStringRef *)&a9;
    do
    {
      CFIndex location = CFStringFind(theString, v9, 0).location;
      BOOL v11 = location == -1;
      stringToFind = location != -1;
      if (!v11) {
        break;
      }
      uint64_t v12 = v13++;
      theString = *v12;
    }
    while (*v12);
  }
  return stringToFind;
}

BOOL sub_19D716960(BOOL a1)
{
  BOOL v1 = a1;
  if (a1)
  {
    CFStringRef v2 = sub_19D717650();
    if (v2)
    {
      CFStringRef v3 = v2;
      unsigned __int8 CharacterAtIndex = CFStringGetCharacterAtIndex(v2, 0);
      if (CFStringGetCharacterAtIndex((CFStringRef)v1, 0) != CharacterAtIndex)
      {
        BOOL v1 = 0;
      }
      else
      {
        int v5 = sub_19D7169F4(v3);
        BOOL v1 = v5 >= (int)sub_19D7169F4((const __CFString *)v1);
      }
      CFRelease(v3);
    }
    else
    {
      return 0;
    }
  }
  return v1;
}

uint64_t sub_19D7169F4(const __CFString *a1)
{
  v5.length = CFStringGetLength(a1) - 1;
  v5.CFIndex location = 1;
  CFStringRef v2 = CFStringCreateWithSubstring(0, a1, v5);
  IntCFDictionaryRef Value = CFStringGetIntValue(v2);
  if (v2) {
    CFRelease(v2);
  }
  return IntValue;
}

CFDataRef sub_19D716A48()
{
  uint64_t v158 = *MEMORY[0x1E4F143B8];
  *(void *)md = 0;
  uint64_t v156 = 0;
  int v157 = 0;
  uint64_t valuePtr = 0;
  uint64_t v152 = 0;
  if (sub_19D7174E8())
  {
    CFDataRef v0 = (const __CFData *)sub_19D710BBC((const char **)@"sjGZBQzow3yV/IOa0wCeoQ", 0);
    if (v0)
    {
      CFDataRef v1 = v0;
      CFNumberRef v2 = 0;
      CFStringRef v3 = 0;
LABEL_38:
      uint64_t v31 = 0;
      CFNumberRef v10 = 0;
      uint64_t v14 = &stru_1EEF93EC0;
      CFStringRef v8 = &stru_1EEF93EC0;
      goto LABEL_129;
    }
  }
  int v4 = sub_19D71752C();
  if (v4 <= 0)
  {
    if (MGGetBoolAnswer((const char **)@"AJFQheZDyUbvI6RmBMT9Cg"))
    {
      uint64_t v13 = (__CFString *)sub_19D710BBC((const char **)@"QZgogo2DypSAZfkRW4dP/A", 0);
      if (!v13)
      {
        uint64_t v72 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
        if (v72) {
          uint64_t v78 = v72 + 1;
        }
        else {
          uint64_t v78 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
        }
        _MGLog((uint64_t)v78, 3321, @"Could not get IMEI", v73, v74, v75, v76, v77, v149);
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Could not get IMEI", buf, 2u);
        }
        CFNumberRef v10 = 0;
        uint64_t v31 = 0;
        CFDataRef v1 = 0;
        CFStringRef v3 = 0;
        CFNumberRef v2 = 0;
        CFStringRef v8 = &stru_1EEF93EC0;
        goto LABEL_87;
      }
      uint64_t v14 = v13;
      CFNumberRef v2 = 0;
      CFStringRef v8 = &stru_1EEF93EC0;
    }
    else
    {
      CFNumberRef v2 = 0;
      CFStringRef v8 = &stru_1EEF93EC0;
      uint64_t v14 = &stru_1EEF93EC0;
    }
    goto LABEL_24;
  }
  unsigned int v5 = v4;
  CFNumberRef v6 = (const __CFNumber *)sub_19D710BBC((const char **)@"TF31PAB6aO8KAbPyNKSxKA", 0);
  if (!v6)
  {
    uint64_t v15 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v15) {
      uint64_t v21 = v15 + 1;
    }
    else {
      uint64_t v21 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog((uint64_t)v21, 3329, @"Could not get unique chip ID", v16, v17, v18, v19, v20, v149);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Could not get unique chip ID", buf, 2u);
    }
    CFNumberRef v2 = 0;
    goto LABEL_37;
  }
  CFNumberRef v2 = v6;
  if (!CFNumberGetValue(v6, kCFNumberSInt64Type, &valuePtr))
  {
    int v34 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v34) {
      uint64_t v40 = v34 + 1;
    }
    else {
      uint64_t v40 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog((uint64_t)v40, 3333, @"Could not extract ECID as integer", v35, v36, v37, v38, v39, v149);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Could not extract ECID as integer", buf, 2u);
    }
LABEL_37:
    CFStringRef v3 = 0;
    CFDataRef v1 = 0;
    goto LABEL_38;
  }
  char v149 = valuePtr;
  CFStringRef v7 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%qi");
  if (!v7)
  {
    uint64_t v48 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v48) {
      uint64_t v54 = v48 + 1;
    }
    else {
      uint64_t v54 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog((uint64_t)v54, 3339, @"CFStringCreateWithFormat failed", v49, v50, v51, v52, v53, v149);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "CFStringCreateWithFormat failed", buf, 2u);
    }
    CFStringRef v8 = 0;
    goto LABEL_103;
  }
  CFStringRef v8 = (__CFString *)v7;
  if (v5 == 2)
  {
    CFNumberRef v9 = (const __CFNumber *)sub_19D710BBC((const char **)@"566JrJVMlDfnslGpwUzNlQ", 0);
    if (v9)
    {
      CFNumberRef v10 = v9;
      if (CFNumberGetValue(v9, kCFNumberSInt64Type, &v152))
      {
        char v150 = v152;
        CFStringRef v11 = CFStringCreateWithFormat(0, 0, @"%08llX-%016llX");
        if (v11)
        {
          CFStringRef v3 = v11;
          CFDataRef ExternalRepresentation = CFStringCreateExternalRepresentation(0, v11, 0x8000100u, 0xFFu);
          if (ExternalRepresentation)
          {
            CFDataRef v1 = ExternalRepresentation;
LABEL_127:
            uint64_t v31 = 0;
            goto LABEL_128;
          }
          v142 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
          if (v142) {
            v148 = v142 + 1;
          }
          else {
            v148 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
          }
          _MGLog((uint64_t)v148, 3425, @"CFStringCreateExternalRepresentation failed", v143, v144, v145, v146, v147, v150);
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "CFStringCreateExternalRepresentation failed", buf, 2u);
          }
LABEL_126:
          CFDataRef v1 = 0;
          goto LABEL_127;
        }
        v128 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
        if (v128) {
          v134 = v128 + 1;
        }
        else {
          v134 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
        }
        _MGLog((uint64_t)v134, 3420, @"Could not create CFString", v129, v130, v131, v132, v133, v150);
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
        {
LABEL_125:
          CFStringRef v3 = 0;
          goto LABEL_126;
        }
        *(_WORD *)buf = 0;
        v117 = MEMORY[0x1E4F14500];
        v118 = "Could not create CFString";
      }
      else
      {
        uint64_t v110 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
        if (v110) {
          uint64_t v116 = v110 + 1;
        }
        else {
          uint64_t v116 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
        }
        _MGLog((uint64_t)v116, 3350, @"Could not extract ECID as integer", v111, v112, v113, v114, v115, v149);
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_125;
        }
        *(_WORD *)buf = 0;
        v117 = MEMORY[0x1E4F14500];
        v118 = "Could not extract ECID as integer";
      }
      _os_log_impl(&dword_19D70E000, v117, OS_LOG_TYPE_DEFAULT, v118, buf, 2u);
      goto LABEL_125;
    }
    long long v96 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v96) {
      int v102 = v96 + 1;
    }
    else {
      int v102 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog((uint64_t)v102, 3346, @"Could not get ChipID", v97, v98, v99, v100, v101, v149);
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
LABEL_103:
      CFStringRef v3 = 0;
      CFDataRef v1 = 0;
      uint64_t v31 = 0;
      CFNumberRef v10 = 0;
LABEL_128:
      uint64_t v14 = &stru_1EEF93EC0;
      goto LABEL_129;
    }
    *(_WORD *)buf = 0;
    uint64_t v69 = MEMORY[0x1E4F14500];
    uint64_t v70 = "Could not get ChipID";
    uint32_t v71 = 2;
LABEL_102:
    _os_log_impl(&dword_19D70E000, v69, OS_LOG_TYPE_DEFAULT, v70, buf, v71);
    goto LABEL_103;
  }
  if (v5 >= 3)
  {
    uint64_t v62 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v62) {
      uint64_t v68 = v62 + 1;
    }
    else {
      uint64_t v68 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog((uint64_t)v68, 3354, @"Unsupported UDID version %d", v63, v64, v65, v66, v67, v5);
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_103;
    }
    *(_DWORD *)buf = 67109120;
    unsigned int v154 = v5;
    uint64_t v69 = MEMORY[0x1E4F14500];
    uint64_t v70 = "Unsupported UDID version %d";
    uint32_t v71 = 8;
    goto LABEL_102;
  }
  uint64_t v14 = &stru_1EEF93EC0;
LABEL_24:
  uint64_t v22 = sub_19D710BBC((const char **)@"VasUgeSzVyHdB27g2XpN0g", 0);
  if (!v22)
  {
    uint64_t v41 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v41) {
      uint64_t v47 = v41 + 1;
    }
    else {
      uint64_t v47 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog((uint64_t)v47, 3363, @"Could not get serial number", v42, v43, v44, v45, v46, v149);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Could not get serial number", buf, 2u);
    }
    goto LABEL_56;
  }
  uint64_t v23 = v22;
  uint64_t v24 = sub_19D710BBC((const char **)@"gI6iODv8MZuiP0IA+efJCw", 0);
  if (!v24)
  {
    uint64_t v55 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v55) {
      uint64_t v61 = v55 + 1;
    }
    else {
      uint64_t v61 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog((uint64_t)v61, 3372, @"Could not get wifi address", v56, v57, v58, v59, v60, v149);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Could not get wifi address", buf, 2u);
    }
    CFRelease(v23);
LABEL_56:
    uint64_t v31 = 0;
    CFDataRef v1 = 0;
    CFStringRef v3 = 0;
    goto LABEL_85;
  }
  uint64_t v25 = v24;
  int v26 = sub_19D710BBC((const char **)@"k5lVWbXuiZHLA17KGiVUAA", 0);
  if (!v26)
  {
    uint64_t v79 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v79) {
      char v85 = v79 + 1;
    }
    else {
      char v85 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog((uint64_t)v85, 3382, @"Could not get bluetooth address", v80, v81, v82, v83, v84, v149);
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_81;
    }
    *(_WORD *)buf = 0;
    uint64_t v86 = MEMORY[0x1E4F14500];
    stat v87 = "Could not get bluetooth address";
    goto LABEL_80;
  }
  CFStringRef v27 = CFStringCreateWithFormat(0, 0, @"%@%@%@%@%@");
  if (!v27)
  {
    stat v88 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v88) {
      int v94 = v88 + 1;
    }
    else {
      int v94 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog((uint64_t)v94, 3395, @"Could not create a mutable CFString", v89, v90, v91, v92, v93, (char)v23);
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_81;
    }
    *(_WORD *)buf = 0;
    uint64_t v86 = MEMORY[0x1E4F14500];
    stat v87 = "Could not create a mutable CFString";
LABEL_80:
    _os_log_impl(&dword_19D70E000, v86, OS_LOG_TYPE_DEFAULT, v87, buf, 2u);
LABEL_81:
    CFStringRef v3 = 0;
LABEL_82:
    CFDataRef v1 = 0;
    uint64_t v31 = 0;
    goto LABEL_83;
  }
  CFStringRef v3 = v27;
  CFIndex Length = CFStringGetLength(v27);
  CFIndex v29 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
  uint64_t v30 = (char *)malloc_type_calloc(1uLL, v29, 0xC28D5A82uLL);
  if (!v30)
  {
    uint64_t v103 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v103) {
      v109 = v103 + 1;
    }
    else {
      v109 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog((uint64_t)v109, 3402, @"calloc failed", v104, v105, v106, v107, v108, (char)v23);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "calloc failed", buf, 2u);
    }
    goto LABEL_82;
  }
  uint64_t v31 = v30;
  if (CFStringGetCString(v3, v30, v29, 0x8000100u))
  {
    CC_LONG v32 = strlen(v31);
    CC_SHA1(v31, v32, md);
    CFDataRef v33 = CFDataCreate(0, md, 20);
    if (v33)
    {
      CFDataRef v1 = v33;
      goto LABEL_83;
    }
    v135 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v135) {
      v141 = v135 + 1;
    }
    else {
      v141 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog((uint64_t)v141, 3413, @"CFDataCreate failed", v136, v137, v138, v139, v140, (char)v23);
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_137;
    }
    *(_WORD *)buf = 0;
    v126 = MEMORY[0x1E4F14500];
    v127 = "CFDataCreate failed";
  }
  else
  {
    v119 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v119) {
      v125 = v119 + 1;
    }
    else {
      v125 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog((uint64_t)v125, 3406, @"couldn't extract string to hash", v120, v121, v122, v123, v124, (char)v23);
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_137;
    }
    *(_WORD *)buf = 0;
    v126 = MEMORY[0x1E4F14500];
    v127 = "couldn't extract string to hash";
  }
  _os_log_impl(&dword_19D70E000, v126, OS_LOG_TYPE_DEFAULT, v127, buf, 2u);
LABEL_137:
  CFDataRef v1 = 0;
LABEL_83:
  CFRelease(v23);
  CFRelease(v25);
  if (v26) {
    CFRelease(v26);
  }
LABEL_85:
  CFNumberRef v10 = 0;
  if (!v14)
  {
    if (!v8) {
      goto LABEL_88;
    }
    goto LABEL_87;
  }
LABEL_129:
  CFRelease(v14);
  if (v8) {
LABEL_87:
  }
    CFRelease(v8);
LABEL_88:
  if (v2) {
    CFRelease(v2);
  }
  if (v3) {
    CFRelease(v3);
  }
  if (v10) {
    CFRelease(v10);
  }
  if (v31) {
    free(v31);
  }
  return v1;
}

uint64_t sub_19D7174E8()
{
  if (qword_1EB2173D8 != -1) {
    dispatch_once(&qword_1EB2173D8, &unk_1EEF8F698);
  }
  return byte_1EB2173C0;
}

uint64_t sub_19D71752C()
{
  if (qword_1EB2173F0 != -1) {
    dispatch_once(&qword_1EB2173F0, &unk_1EEF36758);
  }
  return dword_1EB217370;
}

uint64_t sub_19D717570()
{
  if (sub_19D714D40() == 6
    || sub_19D7175F4((BOOL)@"H6")
    || sub_19D7175F4((BOOL)@"H5")
    || sub_19D7175F4((BOOL)@"H7"))
  {
    uint64_t v0 = MEMORY[0x1E4F1CFC8];
  }
  else
  {
    BOOL v2 = sub_19D7175F4((BOOL)@"H4");
    uint64_t v0 = MEMORY[0x1E4F1CFC8];
    if (!v2) {
      uint64_t v0 = MEMORY[0x1E4F1CFD0];
    }
  }
  return *(void *)v0;
}

BOOL sub_19D7175F4(BOOL a1)
{
  CFStringRef v2 = sub_19D717650();
  if (!v2) {
    return 0;
  }
  CFStringRef v3 = v2;
  if (a1) {
    a1 = CFStringCompare(v2, (CFStringRef)a1, 1uLL) == kCFCompareEqualTo;
  }
  CFRelease(v3);
  return a1;
}

CFStringRef sub_19D717650()
{
  CFDataRef v0 = (const __CFData *)sub_19D717CF8("IODeviceTree:/arm-io", @"soc-generation", 0);
  CFDataRef v1 = v0;
  if (v0)
  {
    CFTypeID v2 = CFGetTypeID(v0);
    if (v2 == CFDataGetTypeID() && CFDataGetLength(v1) >= 1)
    {
      BytePtr = (const char *)CFDataGetBytePtr(v1);
      CFStringRef v4 = CFStringCreateWithCString(0, BytePtr, 0x8000100u);
LABEL_11:
      CFRelease(v1);
      return v4;
    }
  }
  unsigned int v5 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c", 47);
  if (v5) {
    CFStringRef v11 = v5 + 1;
  }
  else {
    CFStringRef v11 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c";
  }
  _MGLog((uint64_t)v11, 414, @"Failed to copyDeviceTreeProperty(IODeviceTree:/arm-io soc-generation)", v6, v7, v8, v9, v10, v13[0]);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Failed to copyDeviceTreeProperty(IODeviceTree:/arm-io soc-generation)", v13, 2u);
  }
  CFStringRef v4 = 0;
  CFStringRef result = 0;
  if (v1) {
    goto LABEL_11;
  }
  return result;
}

__CFDictionary *sub_19D717764()
{
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    int valuePtr = 32401;
    int v32 = 2;
    int v30 = 0;
    CFStringRef v2 = sub_19D718160();
    if (dyld_get_active_platform() == 6)
    {
      CFStringRef v3 = sub_19D732BC4();
      CFNumberRef v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      CFNumberRef v5 = CFNumberCreate(0, kCFNumberIntType, &v32);
      CFNumberRef v6 = CFNumberCreate(0, kCFNumberIntType, &v30);
      if (v3)
      {
        CFDictionaryAddValue(Mutable, @"ArtworkDeviceProductDescription", v3);
        CFRelease(v3);
      }
      CFDictionaryAddValue(Mutable, @"ArtworkDeviceIdiom", @"pad");
      CFRelease(@"pad");
      if (v4)
      {
        CFDictionaryAddValue(Mutable, @"ArtworkDeviceSubType", v4);
        CFRelease(v4);
      }
      if (v5)
      {
        CFDictionaryAddValue(Mutable, @"ArtworkDeviceScaleFactor", v5);
        CFRelease(v5);
      }
      if (v2)
      {
        CFDictionaryAddValue(Mutable, @"ArtworkDisplayGamut", v2);
        CFRelease(v2);
      }
      CFDictionaryAddValue(Mutable, @"ArtworkDynamicDisplayMode", @"0");
      CFRelease(@"0");
      if (v6)
      {
        CFDictionaryAddValue(Mutable, @"DevicePerformanceMemoryClass", v6);
        CFRelease(v6);
      }
      CFDictionaryAddValue(Mutable, @"GraphicsFeatureSetClass", @"APPLE4");
      CFRelease(@"APPLE4");
      CFDictionaryAddValue(Mutable, @"GraphicsFeatureSetFallbacks", @"APPLE3:APPLE3v1:APPLE2:APPLE1:GLES2,0");
      CFRelease(@"APPLE3:APPLE3v1:APPLE2:APPLE1:GLES2,0");
      CFDictionaryAddValue(Mutable, @"CompatibleDeviceFallback", @"0");
      uint64_t v7 = @"0";
    }
    else
    {
      CFAllocatorRef v29 = v0;
      CFStringRef v15 = sub_19D717CB4("IODeviceTree:/product", @"product-description", 0);
      CFStringRef v16 = sub_19D717CB4("IODeviceTree:/product", @"artwork-device-idiom", 0);
      CFNumberRef v17 = sub_19D717F48("IODeviceTree:/product", @"artwork-device-subtype", 0);
      CFNumberRef v18 = sub_19D717F48("IODeviceTree:/product", @"artwork-scale-factor", 0);
      CFStringRef v19 = sub_19D717CB4("IODeviceTree:/product", @"artwork-dynamic-displaymode", 0);
      CFNumberRef v20 = sub_19D717F48("IODeviceTree:/product", @"device-perf-memory-class", 0);
      CFStringRef valuea = sub_19D717CB4("IODeviceTree:/product", @"graphics-featureset-class", 0);
      CFStringRef v21 = sub_19D717CB4("IODeviceTree:/product", @"graphics-featureset-fallbacks", 0);
      CFStringRef v22 = sub_19D717CB4("IODeviceTree:/product", @"compatible-device-fallback", 0);
      if (v15)
      {
        CFDictionaryAddValue(Mutable, @"ArtworkDeviceProductDescription", v15);
        CFRelease(v15);
      }
      if (v16)
      {
        CFDictionaryAddValue(Mutable, @"ArtworkDeviceIdiom", v16);
        CFRelease(v16);
      }
      if (v17)
      {
        CFDictionaryAddValue(Mutable, @"ArtworkDeviceSubType", v17);
        CFRelease(v17);
      }
      if (v18)
      {
        CFDictionaryAddValue(Mutable, @"ArtworkDeviceScaleFactor", v18);
        CFRelease(v18);
      }
      if (v2)
      {
        CFDictionaryAddValue(Mutable, @"ArtworkDisplayGamut", v2);
        CFRelease(v2);
      }
      if (v19)
      {
        CFDictionaryAddValue(Mutable, @"ArtworkDynamicDisplayMode", v19);
        CFRelease(v19);
      }
      if (v20)
      {
        CFDictionaryAddValue(Mutable, @"DevicePerformanceMemoryClass", v20);
        CFRelease(v20);
      }
      if (valuea)
      {
        CFDictionaryAddValue(Mutable, @"GraphicsFeatureSetClass", valuea);
        CFRelease(valuea);
      }
      CFAllocatorRef v0 = v29;
      if (v21)
      {
        CFDictionaryAddValue(Mutable, @"GraphicsFeatureSetFallbacks", v21);
        CFRelease(v21);
      }
      if (!v22) {
        goto LABEL_40;
      }
      CFDictionaryAddValue(Mutable, @"CompatibleDeviceFallback", v22);
      uint64_t v7 = (__CFString *)v22;
    }
    CFRelease(v7);
LABEL_40:
    if (!CFDictionaryGetValue(Mutable, @"ArtworkDeviceScaleFactor"))
    {
      *(_DWORD *)buf = -1082130432;
      BOOL v23 = sub_19D712B14((const char **)@"SNfDJgQFV2Xj7+WnozcJPw", 7, 7, kCFNumberFloat32Type, buf);
      float v24 = *(float *)buf;
      if (!v23) {
        float v24 = -1.0;
      }
      *(float *)buf = v24;
      CFNumberRef v25 = CFNumberCreate(v0, kCFNumberFloatType, buf);
      CFDictionarySetValue(Mutable, @"ArtworkDeviceScaleFactor", v25);
      if (v25) {
        CFRelease(v25);
      }
    }
    return Mutable;
  }
  uint64_t v8 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v8) {
    uint64_t v14 = v8 + 1;
  }
  else {
    uint64_t v14 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  }
  _MGLog((uint64_t)v14, 5781, @"Failed to create dictionary", v9, v10, v11, v12, v13, value);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Failed to create dictionary", buf, 2u);
  }
  return Mutable;
}

CFStringRef sub_19D717CB4(char *a1, const __CFString *a2, int a3)
{
  CFStringRef result = (CFStringRef)sub_19D717CF8(a1, a2, a3);
  if (result)
  {
    CFStringRef v5 = result;
    CFStringRef v6 = sub_19D717DB4(result, (uint64_t)a2);
    CFRelease(v5);
    return v6;
  }
  return result;
}

CFTypeRef sub_19D717CF8(char *path, const __CFString *a2, int a3)
{
  io_registry_entry_t v5 = IORegistryEntryFromPath(*MEMORY[0x1E4F2EEF0], path);
  if (v5)
  {
    io_registry_entry_t v6 = v5;
    if (!a3)
    {
      CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(v5, a2, 0, 0);
      goto LABEL_7;
    }
    CFTypeRef v7 = IORegistryEntryCreateCFProperty(v5, @"IORegistryEntryPropertyKeys", 0, 0);
    if (v7)
    {
      uint64_t v8 = v7;
      CFTypeRef CFProperty = sub_19D7182D0(v6, v7, a2, a3);
      CFRelease(v8);
LABEL_7:
      IOObjectRelease(v6);
      return CFProperty;
    }
  }
  return 0;
}

CFStringRef sub_19D717DB4(const void *a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 == CFStringGetTypeID())
  {
    return (CFStringRef)CFRetain(a1);
  }
  CFTypeID v6 = CFGetTypeID(a1);
  if (v6 != CFDataGetTypeID() || CFDataGetLength((CFDataRef)a1) < 1)
  {
    uint64_t v10 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c", 47);
    if (v10) {
      CFStringRef v16 = v10 + 1;
    }
    else {
      CFStringRef v16 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
    }
    _MGLog((uint64_t)v16, 552, @"Unexpected type returned for key %@.", v11, v12, v13, v14, v15, a2);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT)) {
      sub_19D76F584(a2);
    }
    return 0;
  }
  BytePtr = (const char *)CFDataGetBytePtr((CFDataRef)a1);
  if (BytePtr[CFDataGetLength((CFDataRef)a1) - 1])
  {
    uint64_t v8 = CFDataGetBytePtr((CFDataRef)a1);
    CFIndex Length = CFDataGetLength((CFDataRef)a1);
    return CFStringCreateWithBytes(0, v8, Length, 0x8000100u, 0);
  }
  else
  {
    return CFStringCreateWithCString(0, BytePtr, 0x8000100u);
  }
}

CFNumberRef sub_19D717F48(char *a1, const __CFString *a2, int a3)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  CFDataRef v5 = (const __CFData *)sub_19D717CF8(a1, a2, a3);
  if (v5)
  {
    CFDataRef v6 = v5;
    CFTypeID v7 = CFGetTypeID(v5);
    if (v7 == CFDataGetTypeID())
    {
      CFIndex Length = CFDataGetLength(v6);
      if ((unint64_t)(Length - 1) <= 3)
      {
        BytePtr = CFDataGetBytePtr(v6);
        CFNumberType v10 = kCFNumberSInt32Type;
LABEL_15:
        CFNumberRef v11 = CFNumberCreate(0, v10, BytePtr);
        goto LABEL_16;
      }
      if ((unint64_t)(Length - 1) <= 7)
      {
        BytePtr = CFDataGetBytePtr(v6);
        CFNumberType v10 = kCFNumberSInt64Type;
        goto LABEL_15;
      }
      CFIndex v23 = Length;
      float v24 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c", 47);
      if (v24) {
        int v30 = v24 + 1;
      }
      else {
        int v30 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
      }
      _MGLog((uint64_t)v30, 513, @"can't create number from data %s %@ of length %llu\n", v25, v26, v27, v28, v29, (char)a1);
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
LABEL_12:
        CFNumberRef v11 = 0;
LABEL_16:
        CFRelease(v6);
        return v11;
      }
      *(_DWORD *)buf = 136315650;
      int v32 = a1;
      __int16 v33 = 2112;
      CFStringRef v34 = a2;
      __int16 v35 = 2048;
      CFIndex v36 = v23;
      CFStringRef v19 = MEMORY[0x1E4F14500];
      CFNumberRef v20 = "can't create number from data %s %@ of length %llu\n";
      uint32_t v21 = 32;
    }
    else
    {
      uint64_t v12 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c", 47);
      if (v12) {
        CFNumberRef v18 = v12 + 1;
      }
      else {
        CFNumberRef v18 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
      }
      _MGLog((uint64_t)v18, 516, @"can't create number from %s %@", v13, v14, v15, v16, v17, (char)a1);
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_12;
      }
      *(_DWORD *)buf = 136315394;
      int v32 = a1;
      __int16 v33 = 2112;
      CFStringRef v34 = a2;
      CFStringRef v19 = MEMORY[0x1E4F14500];
      CFNumberRef v20 = "can't create number from %s %@";
      uint32_t v21 = 22;
    }
    _os_log_impl(&dword_19D70E000, v19, OS_LOG_TYPE_DEFAULT, v20, buf, v21);
    goto LABEL_12;
  }
  return 0;
}

CFStringRef sub_19D718160()
{
  int active_platform = dyld_get_active_platform();
  CFStringRef result = @"P3";
  if (active_platform != 6)
  {
    CFStringRef result = sub_19D717CB4("IODeviceTree:/product", @"artwork-display-gamut", 0);
    if (!result)
    {
      if (sub_19D71D6A4()) {
        return @"P3";
      }
      else {
        return 0;
      }
    }
  }
  return result;
}

CFTypeRef sub_19D7182D0(io_registry_entry_t a1, CFTypeRef cf, const void *a3, int a4)
{
  if (!cf) {
    return 0;
  }
  CFTypeID v8 = CFGetTypeID(cf);
  if (v8 != CFArrayGetTypeID()) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount((CFArrayRef)cf);
  if (Count < 1) {
    return 0;
  }
  CFIndex v10 = Count;
  CFIndex v11 = 0;
  while (1)
  {
    CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)cf, v11);
    if (sub_19D7183B0(ValueAtIndex, a3, a4)) {
      break;
    }
    if (v10 == ++v11) {
      return 0;
    }
  }

  return IORegistryEntryCreateCFProperty(a1, ValueAtIndex, 0, 0);
}

BOOL sub_19D7183B0(const __CFString *a1, const void *a2, int a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    CFTypeID v6 = CFGetTypeID(a1);
    if (v6 == CFStringGetTypeID())
    {
      if (CFStringGetLength(a1))
      {
        if (CFStringGetCharacterAtIndex(a1, 0) == a3)
        {
          CFTypeID v7 = sub_19D718564(a1);
          if (v7)
          {
            CFTypeID v8 = v7;
            *(_OWORD *)cStr = 0u;
            long long v15 = 0u;
            CC_LONG v9 = snprintf(__str, 0x5EuLL, "%s%s", "MGCopyAnswer", v7);
            if ((v9 & 0x80000000) != 0)
            {
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)md = 136315138;
                CFNumberRef v18 = v8;
                _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Obfuscation error for %s", md, 0xCu);
              }
            }
            else
            {
              CC_MD5(__str, v9, md);
              if (!CNEncode())
              {
                BYTE6(v15) = 0;
                CFStringRef v10 = CFStringCreateWithCString(0, cStr, 0x8000100u);
                if (v10)
                {
                  CFStringRef v11 = v10;
                  BOOL v12 = CFEqual(a2, v10) != 0;
                  CFRelease(v11);
LABEL_15:
                  free(v8);
                  return v12;
                }
              }
            }
            BOOL v12 = 0;
            goto LABEL_15;
          }
        }
      }
    }
  }
  return 0;
}

char *sub_19D718564(const __CFString *a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  CFIndex Length = CFStringGetLength(a1);
  CFIndex v3 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
  CFTypeID v4 = (char *)malloc_type_malloc(v3, 0xD62C06AuLL);
  if (!v4)
  {
    uint64_t v13 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c", 47);
    if (v13) {
      uint64_t v19 = v13 + 1;
    }
    else {
      uint64_t v19 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c";
    }
    _MGLog((uint64_t)v19, 920, @"failed to allocate string buffer", v14, v15, v16, v17, v18, v21);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "failed to allocate string buffer", buf, 2u);
    }
    return 0;
  }
  CFDataRef v5 = v4;
  if (!CFStringGetCString(a1, v4, v3, 0x8000100u))
  {
    CFTypeID v6 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c", 47);
    if (v6) {
      BOOL v12 = v6 + 1;
    }
    else {
      BOOL v12 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c";
    }
    _MGLog((uint64_t)v12, 924, @"CFStringGetCString failed for '%@'", v7, v8, v9, v10, v11, (char)a1);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      CFStringRef v23 = a1;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "CFStringGetCString failed for '%@'", buf, 0xCu);
    }
    free(v5);
    return 0;
  }
  return v5;
}

const void *MGCopyAnswerWithError(const char **a1, uint64_t a2, _DWORD *a3)
{
  CFTypeID v4 = sub_19D710BBC(a1, 0);
  if (a3) {
    *a3 = sub_19D718A00();
  }
  return v4;
}

void *sub_19D718A00()
{
  if (qword_1EB217560 != -1) {
    dispatch_once(&qword_1EB217560, &unk_1EEF36778);
  }
  return pthread_getspecific(qword_1EB217558);
}

BOOL MobileGestalt_get_wapiCapability()
{
  return MGGetBoolAnswer((const char **)@"hiHut/WR+B9Lx/vd0WyeNg");
}

BOOL MobileGestalt_get_greenTeaDeviceCapability()
{
  return MGGetBoolAnswer((const char **)@"iyfxmLogGVIaH7aEgqwcIA");
}

BOOL MobileGestalt_get_ringerButtonCapability()
{
  return MGGetBoolAnswer((const char **)@"cT44WE1EohiwRzhsZ8xEsw");
}

BOOL MobileGestalt_get_researchFuse()
{
  return MGGetBoolAnswer((const char **)@"XYlJKKkj2hztRP1NWWnhlw");
}

BOOL MobileGestalt_get_personalHotspotCapability()
{
  return MGGetBoolAnswer((const char **)@"wlxZYdEZITDTzgs/OnnV+Q");
}

BOOL MobileGestalt_get_deviceSupportsClosedLoopHaptics()
{
  return MGGetBoolAnswer((const char **)@"gqDnklGQnpv5ilgh5uHckw");
}

BOOL MobileGestalt_get_deviceSupportsApplePencil()
{
  return MGGetBoolAnswer((const char **)@"yhHcB0iH0d1XzPO/CFd3ow");
}

BOOL MobileGestalt_get_bluetoothCapability()
{
  return MGGetBoolAnswer((const char **)@"XSLlJd/8sMyXO0qtvvUTBQ");
}

BOOL MobileGestalt_get_assistantCapability()
{
  return MGGetBoolAnswer((const char **)@"xOJfWykLmQCc8lKlzMlrLA");
}

BOOL MobileGestalt_get_accessibilityCapability()
{
  return MGGetBoolAnswer((const char **)@"16N2bLOzcgJEsZToEX21Zg");
}

BOOL MobileGestalt_get_internalBuild()
{
  return MGGetBoolAnswer((const char **)@"LBJfwOEzExRxzlAnSuI7eg");
}

uint64_t MGGetProductType()
{
  if (qword_1EB217400 != -1) {
    dispatch_once(&qword_1EB217400, &unk_1EEF8F678);
  }
  if (dword_1EB217374 == -1) {
    return -1;
  }
  else {
    return qword_19D7745F0[4 * dword_1EB217374 + 3];
  }
}

OS_MobileGestalt *MobileGestalt_get_current_device()
{
  CFAllocatorRef v0 = objc_alloc_init(OS_MobileGestalt);

  return v0;
}

uint64_t _MGGetFastPathLog()
{
  if (qword_1EB217428 != -1) {
    dispatch_once(&qword_1EB217428, &unk_1EEF8F6F8);
  }
  return qword_1EB217420;
}

BOOL MGIsQuestionValid(const char **a1)
{
  return sub_19D710FBC(a1, 0) != 0;
}

BOOL MobileGestalt_get_deviceSupportsGenerativeModelSystems()
{
  return MGGetBoolAnswer((const char **)@"A62OafQ85EJAiiqKn4agtg");
}

BOOL MobileGestalt_get_deviceSupportsAlwaysOnTime()
{
  return MGGetBoolAnswer((const char **)@"j8/Omm6s1lsmTDFsXjsBfA");
}

BOOL MobileGestalt_get_appleInternalInstallCapability()
{
  return MGGetBoolAnswer((const char **)@"EqrsVvjcYDdxHBiQmGhAWw");
}

uint64_t MGRegisterForUpdates(const __CFArray *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = sub_19D71F610;
  v5[3] = &unk_1E5962BC0;
  v5[4] = a4;
  return MGRegisterForBulkUpdates(a1, a2, a3, (uint64_t)v5);
}

uint64_t MGRegisterForBulkUpdates(const __CFArray *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  CFIndex Count = CFArrayGetCount(a1);
  if (Count >= 1)
  {
    Mutable = 0;
    CFIndex v9 = 0;
    uint64_t v10 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    do
    {
      CFStringRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(a1, v9);
      if (!sub_19D710FBC((const char **)ValueAtIndex, 1))
      {
        if (!Mutable) {
          Mutable = CFArrayCreateMutable(0, 0, v10);
        }
        CFArrayAppendValue(Mutable, ValueAtIndex);
      }
      ++v9;
    }
    while (Count != v9);
    if (Mutable)
    {
      BOOL v12 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v12) {
        uint64_t v18 = v12 + 1;
      }
      else {
        uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      }
      _MGLog((uint64_t)v18, 1127, @"no registration performed because invalid questions were passed in: %@", v13, v14, v15, v16, v17, (char)Mutable);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v68 = Mutable;
        _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "no registration performed because invalid questions were passed in: %@", buf, 0xCu);
      }
      CFRelease(Mutable);
      return -1;
    }
  }
  uint64_t v19 = (uint64_t (*)(uint64_t, uint64_t))*((void *)off_1E9449170 + 33);
  if (!v19) {
    uint64_t v19 = (uint64_t (*)(uint64_t, uint64_t))sub_19D71A930(33, 2);
  }
  uint64_t v20 = v19(a3, a4);
  if (!v20)
  {
    uint64_t v50 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v50) {
      uint64_t v56 = v50 + 1;
    }
    else {
      uint64_t v56 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog((uint64_t)v56, 1134, @"failed to create notification object", v51, v52, v53, v54, v55, v66);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "failed to create notification object", buf, 2u);
    }
    return -1;
  }
  uint64_t v21 = v20;
  if (Count >= 1)
  {
    for (CFIndex i = 0; i != Count; ++i)
    {
      CFStringRef v23 = (const char **)CFArrayGetValueAtIndex(a1, i);
      uint64_t v24 = sub_19D710FBC(v23, 1);
      if (*((_DWORD *)v24 + 8))
      {
        uint64_t v25 = 0;
        uint64_t v26 = v24 + 9;
        while (1)
        {
          uint64_t v27 = (char *)v26 + 4 * v25;
          uint64_t v28 = *((unsigned int *)v27 - 10);
          if (v28)
          {
            uint64_t v29 = (uint64_t (*)(uint64_t, uint64_t, const char *, const char **))*((void *)off_1E9449170 + 46);
            if (!v29)
            {
              uint64_t v29 = (uint64_t (*)(uint64_t, uint64_t, const char *, const char **))sub_19D71A930(46, 2);
              uint64_t v28 = *((unsigned int *)v27 - 10);
            }
            if ((v29(v21, v28, v26[v25], v23) & 1) == 0) {
              break;
            }
          }
          if (++v25 == 9) {
            goto LABEL_37;
          }
        }
        uint64_t v57 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
        if (v57) {
          uint64_t v63 = v57 + 1;
        }
        else {
          uint64_t v63 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
        }
        _MGLog((uint64_t)v63, 1153, @"notification registration for %@ failed", v58, v59, v60, v61, v62, (char)v23);
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          uint64_t v68 = v23;
          uint64_t v48 = MEMORY[0x1E4F14500];
          uint64_t v49 = "notification registration for %@ failed";
LABEL_56:
          _os_log_impl(&dword_19D70E000, v48, OS_LOG_TYPE_DEFAULT, v49, buf, 0xCu);
        }
        goto LABEL_57;
      }
      char v30 = *((unsigned char *)v24 + 152);
      uint64_t v31 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v31) {
        uint64_t v37 = v31 + 1;
      }
      else {
        uint64_t v37 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      }
      if ((v30 & 8) != 0)
      {
        _MGLog((uint64_t)v37, 1144, @"%@ is static and will never generate a notification", v32, v33, v34, v35, v36, (char)v23);
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          uint64_t v68 = v23;
          uint64_t v38 = MEMORY[0x1E4F14500];
          uint64_t v39 = "%@ is static and will never generate a notification";
          goto LABEL_36;
        }
      }
      else
      {
        _MGLog((uint64_t)v37, 1146, @"%@ cannot generate notifications yet", v32, v33, v34, v35, v36, (char)v23);
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          uint64_t v68 = v23;
          uint64_t v38 = MEMORY[0x1E4F14500];
          uint64_t v39 = "%@ cannot generate notifications yet";
LABEL_36:
          _os_log_impl(&dword_19D70E000, v38, OS_LOG_TYPE_DEFAULT, v39, buf, 0xCu);
        }
      }
LABEL_37:
      ;
    }
  }
  uint64_t v40 = (uint64_t (*)(uint64_t))*((void *)off_1E9449170 + 49);
  if (!v40) {
    uint64_t v40 = (uint64_t (*)(uint64_t))sub_19D71A930(49, 2);
  }
  if ((v40(v21) & 1) == 0)
  {
    uint64_t v41 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v41) {
      uint64_t v47 = v41 + 1;
    }
    else {
      uint64_t v47 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog((uint64_t)v47, 1163, @"can't start notifications for %@", v42, v43, v44, v45, v46, (char)a1);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v68 = a1;
      uint64_t v48 = MEMORY[0x1E4F14500];
      uint64_t v49 = "can't start notifications for %@";
      goto LABEL_56;
    }
LABEL_57:
    uint64_t v64 = (void (*)(uint64_t))*((void *)off_1E9449170 + 28);
    if (!v64) {
      uint64_t v64 = (void (*)(uint64_t))sub_19D71A930(28, 2);
    }
    v64(v21);
    return -1;
  }
  return v21;
}

const char **_MGServerQuestionIsPlatform(const char **a1)
{
  CFStringRef result = sub_19D710FBC(a1, 1);
  if (result) {
    return (const char **)(((_BYTE)result[19] & 0x20) == 0);
  }
  return result;
}

__CFDictionary *MGCopyMultipleAnswers(const __CFArray *a1, const __CFDictionary *a2)
{
  CFIndex Count = CFArrayGetCount(a1);
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Count >= 1)
  {
    for (CFIndex i = 0; i != Count; ++i)
    {
      CFStringRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(a1, i);
      if (a2) {
        CFDictionaryGetValue(a2, ValueAtIndex);
      }
      uint64_t v8 = sub_19D710BBC((const char **)ValueAtIndex, 0);
      if (v8)
      {
        CFIndex v9 = v8;
        CFDictionaryAddValue(Mutable, ValueAtIndex, v8);
        CFRelease(v9);
      }
    }
  }
  return Mutable;
}

uint64_t MGCancelNotifications(uint64_t result)
{
  if ((unint64_t)(result + 1) >= 2)
  {
    uint64_t v2 = result;
    CFIndex v3 = (uint64_t (*)(uint64_t))*((void *)off_1E9449170 + 28);
    if (!v3) {
      CFIndex v3 = (uint64_t (*)(uint64_t))sub_19D71A930(28, 2);
    }
    return v3(v2);
  }
  return result;
}

BOOL sub_19D7192F0(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"VasUgeSzVyHdB27g2XpN0g", 83, a2);
}

uint64_t sub_19D719304()
{
  if (qword_1EB217408 != -1) {
    dispatch_once(&qword_1EB217408, &unk_1EEF8F6D8);
  }
  return qword_1EB217410;
}

uint64_t sub_19D719348()
{
  return MGGetSInt64Answer((const char **)@"DeviceMemorySize", 0);
}

BOOL sub_19D719358()
{
  return sub_19D714D40() == 3;
}

char *sub_19D719378(const char *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  *(_OWORD *)__s1 = 0u;
  long long v7 = 0u;
  size_t v3 = 128;
  if (sysctlbyname(a1, __s1, &v3, 0, 0) != -1) {
    return strdup(__s1);
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    CFDataRef v5 = a1;
    _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Could not lookup %s", buf, 0xCu);
  }
  return 0;
}

CFStringRef sub_19D719460()
{
  CFStringRef result = SCDynamicStoreCopyComputerName(0, 0);
  if (!result)
  {
    uint64_t v1 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v1) {
      long long v7 = v1 + 1;
    }
    else {
      long long v7 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog((uint64_t)v7, 5689, @"Failed to get Computer Name, returning device name", v2, v3, v4, v5, v6, v8[0]);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long v8 = 0;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Failed to get Computer Name, returning device name", v8, 2u);
    }
    return (CFStringRef)sub_19D710BBC((const char **)@"vme9Buk6XiWFCXoHApxNFA", 0);
  }
  return result;
}

const void *sub_19D719510()
{
  int v0 = sub_19D7123B8("IODeviceTree:/arm-io/disp0", @"supports-apt", 0, 0xFFFFFFFFLL, 0);
  if ((v0 & 0x80000000) == 0)
  {
    uint64_t v1 = MEMORY[0x1E4F1CFD0];
    if (!v0) {
      uint64_t v1 = MEMORY[0x1E4F1CFC8];
    }
    return *(const void **)v1;
  }
  CFTypeRef v2 = sub_19D7128AC(0, "AppleCLCD", @"APTDevice");
  if (!v2)
  {
LABEL_8:
    uint64_t v1 = MEMORY[0x1E4F1CFC8];
    return *(const void **)v1;
  }
  uint64_t v3 = v2;
  CFTypeID TypeID = CFBooleanGetTypeID();
  if (TypeID != CFGetTypeID(v3))
  {
    CFRelease(v3);
    goto LABEL_8;
  }
  return v3;
}

BOOL sub_19D7195BC()
{
  return sub_19D7145C8("IODeviceTree:/product/camera", @"P+UqVuzQzn3nwHSiSeDmyw", 108);
}

CFStringRef sub_19D7195D4()
{
  return sub_19D712710(0, "IOPlatformExpertDevice", @"region-info");
}

CFTypeRef sub_19D7195EC()
{
  CFStringRef v0 = (const __CFString *)sub_19D710BBC((const char **)@"zHeENZu+wbg7PUprwNwBWg", 0);
  if (v0)
  {
    CFStringRef v1 = v0;
    CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v0, @"/");
    if (ArrayBySeparatingStrings)
    {
      CFArrayRef v3 = ArrayBySeparatingStrings;
      if (CFArrayGetCount(ArrayBySeparatingStrings) < 2)
      {
        CFTypeRef v5 = 0;
      }
      else
      {
        CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v3, 0);
        CFTypeRef v5 = CFRetain(ValueAtIndex);
      }
      CFRelease(v3);
    }
    else
    {
      CFTypeRef v5 = 0;
    }
    CFRelease(v1);
  }
  else
  {
    uint64_t v6 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v6) {
      long long v12 = v6 + 1;
    }
    else {
      long long v12 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog((uint64_t)v12, 2115, @"Could not retrieve region info", v7, v8, v9, v10, v11, v14[0]);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Could not retrieve region info", v14, 2u);
    }
    return 0;
  }
  return v5;
}

const char *sub_19D71970C()
{
  CFStringRef result = (const char *)sub_19D719304();
  if (result)
  {
    return (const char *)CFStringCreateWithCString(0, result, 0x8000100u);
  }
  return result;
}

uint64_t sub_19D719750()
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (uint64_t (*)(void))*((void *)off_1E9449170 + 95);
  if (!v0) {
    CFStringRef v0 = (uint64_t (*)(void))sub_19D71A930(95, 2);
  }
  unsigned int v1 = v0(0);
  unsigned int v2 = v1;
  if (v1 < 4) {
    return (6u >> (v1 & 0xF)) & 1;
  }
  uint64_t v4 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v4) {
    uint64_t v10 = v4 + 1;
  }
  else {
    uint64_t v10 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  }
  _MGLog((uint64_t)v10, 4665, @"MKBGetDeviceLockState returned unknown state %d", v5, v6, v7, v8, v9, v2);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    unsigned int v12 = v2;
    _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "MKBGetDeviceLockState returned unknown state %d", buf, 8u);
  }
  return 1;
}

BOOL sub_19D719868()
{
  return sub_19D712390("IODeviceTree:/product", @"fxnMXVRwuznDzWhoDCxb2A", 111);
}

uint64_t sub_19D719880()
{
  return 1;
}

uint64_t sub_19D719888()
{
  return sub_19D71AA14((uint64_t)"IODeviceTree:/arm-io", @"4k6Wv56SWfITjzet+hIHMQ", 109);
}

uint64_t sub_19D7198A0()
{
  uint64_t v0 = *MEMORY[0x1E4F1CFC8];
  unsigned int v1 = (const void *)sub_19D713080();
  if (v1)
  {
    unsigned int v2 = v1;
    if (!CFEqual(v1, @"Watch") && sub_19D7175F4((BOOL)@"H4")) {
      uint64_t v0 = *MEMORY[0x1E4F1CFD0];
    }
    CFRelease(v2);
  }
  return v0;
}

CFNumberRef sub_19D719910()
{
  return sub_19D7140D0(1u);
}

CFNumberRef sub_19D719918()
{
  return sub_19D7140D0(4u);
}

CFNumberRef sub_19D719920()
{
  return sub_19D7140D0(2u);
}

uint64_t sub_19D719928()
{
  int v0 = sub_19D714D40();
  if (v0 == 2)
  {
    CFArrayRef v3 = @"iPod";
  }
  else
  {
    if (v0 == 4)
    {
      unsigned int v1 = (uint64_t (*)(const char *, __CFString *, __CFString *, void))*((void *)off_1E9449170 + 31);
      if (!v1) {
        unsigned int v1 = (uint64_t (*)(const char *, __CFString *, __CFString *, void))sub_19D71A930(31, 2);
      }
      return v1("/Applications/PineBoard.app", @"DeviceName", @"Apple TV", 0);
    }
    CFArrayRef v3 = sub_19D719F48();
  }
  uint64_t v4 = (uint64_t (*)(const char *, __CFString *, void, __CFString *))*((void *)off_1E9449170 + 31);
  if (!v4) {
    uint64_t v4 = (uint64_t (*)(const char *, __CFString *, void, __CFString *))sub_19D71A930(31, 2);
  }
  uint64_t v5 = v4("/System/Library/CoreServices/SpringBoard.app", v3, 0, @"SpringBoard");
  if (v5)
  {
    uint64_t v6 = v5;
    CFRelease(v3);
    return v6;
  }
  return (uint64_t)v3;
}

BOOL sub_19D719A18()
{
  return sub_19D712390("IODeviceTree:/product", @"KN7t4gQkyj5X66dBpmh9HQ", 108);
}

BOOL sub_19D719A30()
{
  return sub_19D7145C8("IODeviceTree:/product", @"g1gP4TOlkv84ezeaZrUgFg", 116);
}

BOOL sub_19D719A48()
{
  CFStringRef v0 = sub_19D718160();
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  BOOL v2 = CFEqual(v0, @"P3") != 0;
  CFRelease(v1);
  return v2;
}

BOOL sub_19D719A98()
{
  return sub_19D71AA8C(@"baseband", 0);
}

CFStringRef sub_19D719AA8()
{
  return sub_19D712710(0, "IOPlatformExpertDevice", @"platform-name");
}

BOOL sub_19D719AC0()
{
  BOOL result = MGGetBoolAnswer((const char **)@"yRZv0s7Dpj8ZBk0S+0+nMA");
  if (result)
  {
    return sub_19D713E18(@"CH");
  }
  return result;
}

uint64_t sub_19D719B04()
{
  if (sub_19D714D40() == 1 || sub_19D714D40() == 2 || sub_19D714D40() == 3) {
    BOOL v0 = sub_19D7145C8("IODeviceTree:/product/camera", @"photos-live-video-rendering", 0);
  }
  else {
    BOOL v0 = sub_19D714D40() == 11;
  }
  uint64_t v1 = MEMORY[0x1E4F1CFD0];
  if (!v0) {
    uint64_t v1 = MEMORY[0x1E4F1CFC8];
  }
  return *(void *)v1;
}

BOOL sub_19D719B80()
{
  return (sub_19D7174E8() & 1) == 0 && (unint64_t)sub_19D719348() >> 33 != 0;
}

uint64_t sub_19D719BB4()
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  if (sub_19D714D40() != 3) {
    goto LABEL_4;
  }
  int v66 = 1789837692;
  long long v65 = xmmword_19D778B18;
  int v64 = -1239654590;
  long long v63 = xmmword_19D778B40;
  int v62 = -1579092758;
  long long v61 = xmmword_19D778B68;
  int v60 = 48355600;
  long long v59 = xmmword_19D778B2C;
  int v58 = -679691073;
  long long v57 = xmmword_19D778B54;
  int v56 = 1430379884;
  long long v55 = xmmword_19D778B7C;
  if ((MGIsDeviceOneOfType((const UInt8 *)&v65, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v63) & 1) != 0
    || (int v54 = -926344036,
        long long v53 = xmmword_19D778B90,
        int v52 = -954998212,
        long long v51 = xmmword_19D778BA4,
        int v50 = 436612651,
        long long v49 = xmmword_19D778BB8,
        (MGIsDeviceOneOfType((const UInt8 *)&v53, v7, v8, v9, v10, v11, v12, v13, (uint64_t)&v51) & 1) != 0))
  {
LABEL_4:
    uint64_t v21 = MEMORY[0x1E4F1CFC8];
  }
  else
  {
    int v48 = 1602014129;
    long long v47 = xmmword_19D778BCC;
    int v46 = -810116762;
    long long v45 = xmmword_19D778BE0;
    int v44 = -1195351767;
    long long v43 = xmmword_19D778BF4;
    int v42 = -199226823;
    long long v41 = xmmword_19D7792AC;
    int v40 = 1412427398;
    long long v39 = xmmword_19D7792C0;
    int v38 = -1283070668;
    long long v37 = xmmword_19D779298;
    int v36 = 160260070;
    long long v35 = xmmword_19D7792D4;
    char v23 = MGIsDeviceOneOfType((const UInt8 *)&v47, v14, v15, v16, v17, v18, v19, v20, (uint64_t)&v45);
    uint64_t v21 = MEMORY[0x1E4F1CFC8];
    if ((v23 & 1) == 0)
    {
      int v34 = -1639077591;
      long long v33 = xmmword_19D778AF0;
      int v32 = 338555555;
      long long v31 = xmmword_19D778B04;
      if (!MGIsDeviceOneOfType((const UInt8 *)&v33, v24, v25, v26, v27, v28, v29, v30, (uint64_t)&v31)) {
        uint64_t v21 = MEMORY[0x1E4F1CFD0];
      }
    }
  }
  return *(void *)v21;
}

BOOL sub_19D719F00()
{
  if (sub_19D71AC0C(@"APPLE2")) {
    return 1;
  }

  return sub_19D71AC0C(@"MTL2,2");
}

__CFString *sub_19D719F48()
{
  unsigned int v0 = sub_19D714D40() - 1;
  if (v0 > 0xA) {
    return @"Unknown";
  }
  else {
    return *(&off_1E59630B8 + (int)v0);
  }
}

float sub_19D719F84()
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  CFDataRef v0 = (const __CFData *)sub_19D71A230("IODeviceTree:/product", @"display-corner-radius", 0);
  CFDataRef v1 = v0;
  if (v0)
  {
    if (CFDataGetLength(v0) == 8)
    {
      BytePtr = (unsigned int *)CFDataGetBytePtr(v1);
      unsigned int v10 = BytePtr[1];
      if (v10) {
        float v11 = (float)*BytePtr / (float)v10;
      }
      else {
        float v11 = 0.0;
      }
    }
    else
    {
      uint64_t v19 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      uint64_t v20 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v20) {
        uint64_t v19 = v20 + 1;
      }
      char Length = CFDataGetLength(v1);
      _MGLog((uint64_t)v19, 7951, @"Property copyDeviceTreeProperty(IODeviceTree:/product display-corner-radius) had an unexpected size of %zu instead of %zu.", v22, v23, v24, v25, v26, Length);
      float v11 = 0.0;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218240;
        CFIndex v42 = CFDataGetLength(v1);
        __int16 v43 = 2048;
        uint64_t v44 = 8;
        _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Property copyDeviceTreeProperty(IODeviceTree:/product display-corner-radius) had an unexpected size of %zu instead of %zu.", buf, 0x16u);
      }
    }
    if ((int)v11) {
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v12 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v12) {
      uint64_t v18 = v12 + 1;
    }
    else {
      uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog((uint64_t)v18, 7942, @"Failed to copyDeviceTreeProperty(IODeviceTree:/product display-corner-radius)", v13, v14, v15, v16, v17, v35);
    float v11 = 0.0;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Failed to copyDeviceTreeProperty(IODeviceTree:/product display-corner-radius)", buf, 2u);
    }
  }
  int v40 = -337121064;
  long long v39 = xmmword_19D779220;
  int v38 = 450980336;
  long long v37 = xmmword_19D779234;
  if (MGIsDeviceOneOfType((const UInt8 *)&v39, v3, v4, v5, v6, v7, v8, v9, (uint64_t)&v37))
  {
    uint64_t v27 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v27) {
      long long v33 = v27 + 1;
    }
    else {
      long long v33 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog((uint64_t)v33, 7965, @"DeviceCornerRadius fallback to legacy fixed value.", v28, v29, v30, v31, v32, v36);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "DeviceCornerRadius fallback to legacy fixed value.", buf, 2u);
    }
    float v11 = 39.0;
  }
  if (v1) {
LABEL_24:
  }
    CFRelease(v1);
  return v11;
}

const void *sub_19D71A230(char *a1, const __CFString *a2, int a3)
{
  CFTypeRef v3 = sub_19D717CF8(a1, a2, a3);
  uint64_t v4 = v3;
  if (v3)
  {
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 != CFDataGetTypeID())
    {
      CFRelease(v4);
      return 0;
    }
  }
  return v4;
}

const void *sub_19D71A280()
{
  return sub_19D710BBC((const char **)@"AJFQheZDyUbvI6RmBMT9Cg", 0);
}

CFNumberRef sub_19D71A290()
{
  return sub_19D717F48("IODeviceTree:/chosen", @"/l0Kz2akvSvEHTNmZeY0nQ", 99);
}

BOOL sub_19D71A2A8()
{
  return sub_19D7145C8("IODeviceTree:/product", @"4vrSNeBZwJrQrZOQJG0uwQ", 115);
}

uint64_t sub_19D71A2C0()
{
  BOOL v0 = sub_19D7145C8("IODeviceTree:/product", @"assistant", 0);
  uint64_t v1 = MEMORY[0x1E4F1CFD0];
  if (!v0) {
    uint64_t v1 = MEMORY[0x1E4F1CFC8];
  }
  return *(void *)v1;
}

const void *sub_19D71A308()
{
  return sub_19D710BBC((const char **)@"LBJfwOEzExRxzlAnSuI7eg", 0);
}

uint64_t sub_19D71A318()
{
  int v2 = 0;
  size_t v1 = 4;
  uint64_t result = sysctlbyname("kern.hv_vmm_present", &v2, &v1, 0, 0);
  if (!result) {
    byte_1EB2173C0 = v2 != 0;
  }
  return result;
}

void sub_19D71A374()
{
  BOOL v0 = (uint64_t (*)())*((void *)off_1E9449170 + 29);
  if (!v0) {
    BOOL v0 = (uint64_t (*)())sub_19D71A930(29, 2);
  }
  if (v0 == sub_19D71EFC0)
  {
    size_t v1 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v1) {
      uint64_t v7 = v1 + 1;
    }
    else {
      uint64_t v7 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog((uint64_t)v7, 752, @"_MGSCopyAnswerFromServer can't be loaded", v2, v3, v4, v5, v6, v8[0]);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "_MGSCopyAnswerFromServer can't be loaded", v8, 2u);
    }
    byte_1E9449440 = 1;
  }
}

uint64_t sub_19D71A440()
{
  uint64_t result = sub_19D7123B8("IODeviceTree:/product", @"udid-version", 0, 0xFFFFFFFFLL, 1);
  dword_1EB217370 = result;
  return result;
}

char *sub_19D71A47C()
{
  uint64_t result = sub_19D719378("hw.product");
  qword_1EB217410 = (uint64_t)result;
  return result;
}

void sub_19D71A4A4()
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  BOOL v0 = (const char *)sub_19D719304();
  size_t v1 = v0;
  if (!v0)
  {
LABEL_14:
    if (dword_1EB217378 != -1) {
      return;
    }
    uint64_t v3 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c", 47);
    if (v3) {
      uint64_t v9 = v3 + 1;
    }
    else {
      uint64_t v9 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c";
    }
    _MGLog((uint64_t)v9, 394, @"Did not recognize DeviceClass: %s", v4, v5, v6, v7, v8, (char)v1);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      float v11 = v1;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Did not recognize DeviceClass: %s", buf, 0xCu);
    }
LABEL_20:
    int v2 = 2;
    goto LABEL_31;
  }
  if (!strncmp(v0, "iPhone", 6uLL))
  {
    int v2 = 1;
    goto LABEL_31;
  }
  if (!strncmp(v1, "iPod", 4uLL)) {
    goto LABEL_20;
  }
  if (!strncmp(v1, "iPad", 4uLL))
  {
    int v2 = 3;
    goto LABEL_31;
  }
  if (!strncmp(v1, "AppleTV", 7uLL))
  {
    int v2 = 4;
    goto LABEL_31;
  }
  int v2 = 5;
  if (strncmp(v1, "iFPGA", 5uLL))
  {
    if (!strncmp(v1, "Watch", 5uLL))
    {
      int v2 = 6;
      goto LABEL_31;
    }
    if (!strncmp(v1, "AudioAccessory", 0xEuLL))
    {
      int v2 = 7;
      goto LABEL_31;
    }
    if (!strncmp(v1, "iBridge", 7uLL))
    {
      int v2 = 8;
      goto LABEL_31;
    }
    if (!strncmp(v1, "AppleDisplay", 0xCuLL))
    {
      int v2 = 10;
      goto LABEL_31;
    }
    if (!strncmp(v1, "RealityDevice", 0xDuLL))
    {
      int v2 = 11;
      goto LABEL_31;
    }
    if (!strncmp(v1, "ComputeModule", 0xDuLL))
    {
      int v2 = 12;
      goto LABEL_31;
    }
    if (!strncmp(v1, "Mac", 3uLL))
    {
      int v2 = 9;
      goto LABEL_31;
    }
    goto LABEL_14;
  }
LABEL_31:
  dword_1EB217378 = v2;
}

CFTypeID sub_19D71A710()
{
  qword_1EB217468 = CFDictionaryGetTypeID();
  qword_1EB217470 = CFArrayGetTypeID();
  qword_1EB217478 = CFNumberGetTypeID();
  qword_1EB217480 = CFNumberGetTypeID();
  qword_1EB217488 = CFNumberGetTypeID();
  qword_1EB217490 = CFNumberGetTypeID();
  qword_1EB217498 = CFNumberGetTypeID();
  qword_1EB2174A0 = CFStringGetTypeID();
  qword_1EB2174A8 = CFDataGetTypeID();
  CFTypeID result = CFBooleanGetTypeID();
  qword_1EB2174B0 = result;
  return result;
}

void sub_19D71A784()
{
  if (getenv("DISABLE_GESTALT_DLOPEN"))
  {
    BOOL v0 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v0) {
      uint64_t v6 = v0 + 1;
    }
    else {
      uint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog((uint64_t)v6, 202, @"disabling external functions", v1, v2, v3, v4, v5, v17[0]);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "disabling external functions", buf, 2u);
    }
  }
  else
  {
    uint64_t v7 = dlopen("/usr/lib/libMobileGestaltExtensions.dylib", 1);
    if (v7)
    {
      uint64_t v8 = (void (*)(void *, uint64_t (*)(int), pthread_mutex_t *))dlsym(v7, "_MGSSetLazyFuncs");
      if (v8)
      {
        v8(off_1E9449170, sub_19D711424, &stru_1EB217380);
        uint64_t v9 = &byte_1EB217430;
        goto LABEL_17;
      }
    }
  }
  if (byte_1EB217430) {
    return;
  }
  unsigned int v10 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v10) {
    uint64_t v16 = v10 + 1;
  }
  else {
    uint64_t v16 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  }
  _MGLog((uint64_t)v16, 215, @"couldn't load support library", v11, v12, v13, v14, v15, v17[0]);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "couldn't load support library", v17, 2u);
  }
  uint64_t v9 = &byte_1E9449440;
LABEL_17:
  *uint64_t v9 = 1;
}

os_log_t sub_19D71A900()
{
  os_log_t result = os_log_create("com.apple.MobileGestalt", "fast-path");
  qword_1EB217420 = (uint64_t)result;
  return result;
}

uint64_t sub_19D71A930(uint64_t a1, uint64_t a2)
{
  if (qword_1EB217438 != -1) {
    dispatch_once(&qword_1EB217438, &unk_1EEF8F5D8);
  }
  if (byte_1EB217430 == 1)
  {
    uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t))*((void *)off_1E9449170 + 41);
    return v4(a1, a2);
  }
  else
  {
    pthread_mutex_lock(&stru_1EB217380);
    uint64_t v6 = (uint64_t (*)())&unk_1E9449448;
    if (a2 != 1) {
      uint64_t v6 = 0;
    }
    if (a2 == 2) {
      uint64_t v7 = sub_19D71EFC0;
    }
    else {
      uint64_t v7 = v6;
    }
    *((void *)off_1E9449170 + (int)a1) = v7;
    pthread_mutex_unlock(&stru_1EB217380);
    return (uint64_t)v7;
  }
}

uint64_t sub_19D71AA14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = objc_opt_new();
  if ([v5 createTreeIterator:"IODeviceTree"]
    && (io_object_t v6 = [v5 copyDeviceTreeStructureNext:a2 withFirstChar:a3]) != 0)
  {
    IOObjectRelease(v6);
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

BOOL sub_19D71AA8C(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef v3 = (const __CFDictionary *)sub_19D71AB98(a1, a2);
  if (!v3) {
    return 0;
  }
  CFDictionaryRef v4 = v3;
  CFIndex Count = CFDictionaryGetCount(v3);
  BOOL v6 = Count > 0;
  if (Count >= 1)
  {
    uint64_t v7 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitHelper.m", 47);
    if (v7) {
      uint64_t v13 = v7 + 1;
    }
    else {
      uint64_t v13 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitHelper.m";
    }
    _MGLog((uint64_t)v13, 631, @"Node %@ found", v8, v9, v10, v11, v12, a1);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v16 = a1;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Node %@ found", buf, 0xCu);
    }
  }
  CFRelease(v4);
  return v6;
}

uint64_t sub_19D71AB98(uint64_t a1, uint64_t a2)
{
  CFDictionaryRef v4 = objc_opt_new();
  if ([v4 createTreeIterator:"IODeviceTree"]) {
    uint64_t v5 = [v4 deviceTreeNodeIsPresent:a1 withExactName:1 withNodeClass:a2];
  }
  else {
    uint64_t v5 = 0;
  }

  return v5;
}

BOOL sub_19D71AC0C(const __CFString *a1)
{
  uint64_t v2 = sub_19D717764();
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v2, @"GraphicsFeatureSetClass");
  CFStringRef v4 = (const __CFString *)CFDictionaryGetValue(v2, @"GraphicsFeatureSetFallbacks");
  if (!a1 || !Value) {
    goto LABEL_7;
  }
  CFStringRef v5 = v4;
  BOOL v6 = 1;
  if (CFStringCompare(Value, a1, 1uLL) == kCFCompareEqualTo) {
    goto LABEL_8;
  }
  if (v5)
  {
    CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v5, @":");
    v9.length = CFArrayGetCount(ArrayBySeparatingStrings);
    v9.CFIndex location = 0;
    BOOL v6 = CFArrayContainsValue(ArrayBySeparatingStrings, v9, a1) != 0;
    if (ArrayBySeparatingStrings) {
      CFRelease(ArrayBySeparatingStrings);
    }
  }
  else
  {
LABEL_7:
    BOOL v6 = 0;
  }
LABEL_8:
  if (v2) {
    CFRelease(v2);
  }
  return v6;
}

BOOL sub_19D71ACF0(BOOL a1, int a2)
{
  BOOL v2 = a1;
  if (a1)
  {
    CFStringRef v4 = (const __CFString *)MGCopyAnswer((const char **)@"5pYKlGnYYBzGvAlIU8RjEQ");
    if (v4)
    {
      CFStringRef v5 = v4;
      CFTypeID v6 = CFGetTypeID(v4);
      if (v6 == CFStringGetTypeID())
      {
        if (a2) {
          BOOL v2 = sub_19D7183B0(v5, (const void *)v2, a2);
        }
        else {
          BOOL v2 = CFEqual((CFTypeRef)v2, v5) != 0;
        }
      }
      else
      {
        BOOL v2 = 0;
      }
      CFRelease(v5);
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

__CFString *sub_19D71ADD8()
{
  uint64_t v483 = *MEMORY[0x1E4F143B8];
  int v482 = 1223847566;
  *(_OWORD *)buf = xmmword_19D774484;
  if (MGIsDeviceOfType(buf))
  {
    BOOL v0 = MGCopyAnswer((const char **)@"97JDvERpVwO+GHtthIh7hA");
    if (v0)
    {
      uint64_t v1 = v0;
      BOOL v2 = @"A";
      if (!CFEqual(@"A3081", v0))
      {
        if (!CFEqual(@"A3286", v1))
        {
          if (!CFEqual(@"A3287", v1))
          {
            CFDictionaryRef v3 = @"A3288";
LABEL_44:
            int v9 = CFEqual(v3, v1);
            uint64_t v10 = @"D";
LABEL_45:
            if (v9) {
              BOOL v2 = v10;
            }
            goto LABEL_47;
          }
          goto LABEL_37;
        }
        goto LABEL_23;
      }
LABEL_47:
      CFRelease(v1);
      return v2;
    }
    return @"A";
  }
  int v480 = 185580364;
  long long v479 = xmmword_19D774498;
  if (MGIsDeviceOfType((const UInt8 *)&v479))
  {
    CFStringRef v4 = MGCopyAnswer((const char **)@"97JDvERpVwO+GHtthIh7hA");
    if (v4)
    {
      uint64_t v1 = v4;
      BOOL v2 = @"A";
      if (CFEqual(@"A3082", v4)) {
        goto LABEL_47;
      }
      if (!CFEqual(@"A3289", v1))
      {
        if (!CFEqual(@"A3290", v1))
        {
          CFDictionaryRef v3 = @"A3291";
          goto LABEL_44;
        }
        goto LABEL_37;
      }
LABEL_23:
      BOOL v2 = @"B";
      goto LABEL_47;
    }
    return @"A";
  }
  int v478 = 1214880059;
  long long v477 = xmmword_19D7744AC;
  if (MGIsDeviceOfType((const UInt8 *)&v477))
  {
    CFStringRef v5 = MGCopyAnswer((const char **)@"97JDvERpVwO+GHtthIh7hA");
    if (!v5) {
      return @"A";
    }
    uint64_t v1 = v5;
    BOOL v2 = @"A";
    if (CFEqual(@"A3083", v5)) {
      goto LABEL_47;
    }
    if (CFEqual(@"A3292", v1)) {
      goto LABEL_23;
    }
    if (!CFEqual(@"A3293", v1))
    {
      CFDictionaryRef v3 = @"A3294";
      goto LABEL_44;
    }
LABEL_37:
    BOOL v2 = @"C";
    goto LABEL_47;
  }
  int v476 = 426359977;
  long long v475 = xmmword_19D7744C0;
  if (MGIsDeviceOfType((const UInt8 *)&v475))
  {
    CFTypeID v6 = MGCopyAnswer((const char **)@"97JDvERpVwO+GHtthIh7hA");
    if (!v6) {
      return @"A";
    }
    uint64_t v1 = v6;
    BOOL v2 = @"A";
    if (CFEqual(@"A3084", v6)) {
      goto LABEL_47;
    }
    if (CFEqual(@"A3295", v1)) {
      goto LABEL_23;
    }
    if (!CFEqual(@"A3296", v1))
    {
      CFDictionaryRef v3 = @"A3297";
      goto LABEL_44;
    }
    goto LABEL_37;
  }
  int v474 = -773054213;
  long long v473 = xmmword_19D7744D4;
  if (MGIsDeviceOfType((const UInt8 *)&v473)) {
    return @"A";
  }
  int v472 = -1204420428;
  long long v471 = xmmword_19D7744E8;
  if (MGIsDeviceOfType((const UInt8 *)&v471))
  {
    uint64_t v7 = MGCopyAnswer((const char **)@"97JDvERpVwO+GHtthIh7hA");
    if (!v7) {
      return @"A";
    }
    uint64_t v1 = v7;
    BOOL v2 = @"A";
    if (CFEqual(@"A2995", v7)) {
      goto LABEL_47;
    }
    uint64_t v8 = @"A2996";
LABEL_30:
    int v9 = CFEqual(v8, v1);
    uint64_t v10 = @"B";
    goto LABEL_45;
  }
  int v470 = 958549802;
  long long v469 = xmmword_19D7744FC;
  if (MGIsDeviceOfType((const UInt8 *)&v469)) {
    return @"A";
  }
  int v468 = -12497897;
  long long v467 = xmmword_19D774510;
  if (MGIsDeviceOfType((const UInt8 *)&v467))
  {
    uint64_t v11 = MGCopyAnswer((const char **)@"97JDvERpVwO+GHtthIh7hA");
    if (!v11) {
      return @"A";
    }
    uint64_t v1 = v11;
    BOOL v2 = @"A";
    if (CFEqual(@"A2903", v11)) {
      goto LABEL_47;
    }
    uint64_t v8 = @"A2904";
    goto LABEL_30;
  }
  int v466 = 1377540371;
  long long v465 = xmmword_19D774524;
  if (MGIsDeviceOfType((const UInt8 *)&v465)) {
    return @"A";
  }
  int v464 = -518121279;
  long long v463 = xmmword_19D774538;
  if (MGIsDeviceOfType((const UInt8 *)&v463))
  {
    uint64_t v12 = MGCopyAnswer((const char **)@"97JDvERpVwO+GHtthIh7hA");
    if (!v12) {
      return @"A";
    }
    uint64_t v1 = v12;
    BOOL v2 = @"A";
    if (CFEqual(@"A2899", v12)) {
      goto LABEL_47;
    }
    uint64_t v8 = @"A2900";
    goto LABEL_30;
  }
  int v462 = 802516499;
  long long v461 = xmmword_19D77454C;
  if (MGIsDeviceOfType((const UInt8 *)&v461)) {
    return @"A";
  }
  int v460 = -1919324456;
  long long v459 = xmmword_19D774560;
  if (MGIsDeviceOfType((const UInt8 *)&v459))
  {
    uint64_t v14 = MGCopyAnswer((const char **)@"97JDvERpVwO+GHtthIh7hA");
    if (!v14) {
      return @"A";
    }
    uint64_t v1 = v14;
    BOOL v2 = @"A";
    if (CFEqual(@"A2837", v14)) {
      goto LABEL_47;
    }
    uint64_t v8 = @"A3006";
    goto LABEL_30;
  }
  int v458 = 1127969586;
  long long v457 = xmmword_19D774574;
  if (MGIsDeviceOfType((const UInt8 *)&v457)) {
    return @"A";
  }
  int v456 = 1292009573;
  long long v455 = xmmword_19D774588;
  if (MGIsDeviceOfType((const UInt8 *)&v455))
  {
    uint64_t v22 = MGCopyAnswer((const char **)@"97JDvERpVwO+GHtthIh7hA");
    if (!v22) {
      return @"A";
    }
    uint64_t v1 = v22;
    BOOL v2 = @"A";
    if (CFEqual(@"A2926", v22)) {
      goto LABEL_47;
    }
    uint64_t v8 = @"A3007";
    goto LABEL_30;
  }
  int v454 = -1403227947;
  long long v453 = xmmword_19D773D90;
  int v452 = 729118884;
  long long v451 = xmmword_19D773DA4;
  long long v449 = xmmword_19D773DB8;
  int v450 = -489993439;
  long long v447 = xmmword_19D773DCC;
  int v448 = 886875686;
  if (MGIsDeviceOneOfType((const UInt8 *)&v453, v15, v16, v17, v18, v19, v20, v21, (uint64_t)&v451))
  {
    uint64_t v30 = MGCopyAnswer((const char **)@"97JDvERpVwO+GHtthIh7hA");
    if (!v30) {
      return @"A";
    }
    uint64_t v31 = v30;
    if (CFEqual(@"A1633", v30) || CFEqual(@"A1634", v31)) {
      goto LABEL_357;
    }
    if (!CFEqual(@"A1687", v31) && !CFEqual(@"A1688", v31))
    {
      if (CFEqual(@"A1690", v31) || CFEqual(@"A1691", v31)) {
        goto LABEL_67;
      }
      if (CFEqual(@"A1699", v31))
      {
LABEL_74:
        uint64_t v32 = @"C";
        goto LABEL_358;
      }
      long long v41 = @"A1700";
      goto LABEL_73;
    }
LABEL_81:
    uint64_t v32 = @"B";
    goto LABEL_358;
  }
  int v446 = 1046806126;
  long long v445 = xmmword_19D773DE0;
  int v444 = -188760945;
  long long v443 = xmmword_19D773DF4;
  if (MGIsDeviceOneOfType((const UInt8 *)&v445, v23, v24, v25, v26, v27, v28, v29, (uint64_t)&v443))
  {
    int v40 = MGCopyAnswer((const char **)@"97JDvERpVwO+GHtthIh7hA");
    if (!v40) {
      return @"A";
    }
    uint64_t v31 = v40;
    if (CFEqual(@"A1662", v40)) {
      goto LABEL_357;
    }
    if (CFEqual(@"A1723", v31)) {
      goto LABEL_81;
    }
    long long v41 = @"A1724";
    goto LABEL_73;
  }
  int v442 = -1527788847;
  long long v441 = xmmword_19D773E08;
  int v440 = 1532898719;
  long long v439 = xmmword_19D773E1C;
  if (MGIsDeviceOneOfType((const UInt8 *)&v441, v33, v34, v35, v36, v37, v38, v39, (uint64_t)&v439))
  {
    long long v49 = MGCopyAnswer((const char **)@"97JDvERpVwO+GHtthIh7hA");
    if (!v49) {
      return @"A";
    }
    uint64_t v31 = v49;
    if (CFEqual(@"A1673", v49) || CFEqual(@"A1674", v31)) {
      goto LABEL_357;
    }
    int v50 = @"A1675";
    goto LABEL_80;
  }
  int v438 = -350584140;
  long long v437 = xmmword_19D773E30;
  int v436 = -1418383976;
  long long v435 = xmmword_19D773E44;
  int v434 = 368778837;
  long long v433 = xmmword_19D773E58;
  int v432 = -1213485500;
  long long v431 = xmmword_19D773E6C;
  if (MGIsDeviceOneOfType((const UInt8 *)&v437, v42, v43, v44, v45, v46, v47, v48, (uint64_t)&v435))
  {
    int v58 = MGCopyAnswer((const char **)@"97JDvERpVwO+GHtthIh7hA");
    if (!v58) {
      return @"A";
    }
    uint64_t v31 = v58;
    if (CFEqual(@"A1660", v58)
      || CFEqual(@"A1661", v31)
      || CFEqual(@"A1778", v31)
      || CFEqual(@"A1784", v31))
    {
      goto LABEL_357;
    }
    if (CFEqual(@"A1779", v31) || CFEqual(@"A1785", v31)) {
      goto LABEL_81;
    }
    if (CFEqual(@"A1780", v31)) {
      goto LABEL_74;
    }
    long long v41 = @"A1786";
    goto LABEL_73;
  }
  int v430 = 996646949;
  long long v429 = xmmword_19D773E80;
  int v428 = -563086000;
  long long v427 = xmmword_19D773E94;
  if (MGIsDeviceOneOfType((const UInt8 *)&v429, v51, v52, v53, v54, v55, v56, v57, (uint64_t)&v427))
  {
    int v66 = MGCopyAnswer((const char **)@"97JDvERpVwO+GHtthIh7hA");
    if (!v66) {
      return @"A";
    }
    uint64_t v31 = v66;
    if (CFEqual(@"A1701", v66) || CFEqual(@"A1709", v31)) {
      goto LABEL_357;
    }
    int v50 = @"A1852";
    goto LABEL_80;
  }
  int v426 = -1022451852;
  long long v425 = xmmword_19D773EA8;
  int v424 = 1729782187;
  long long v423 = xmmword_19D773EBC;
  if (MGIsDeviceOneOfType((const UInt8 *)&v425, v59, v60, v61, v62, v63, v64, v65, (uint64_t)&v423))
  {
    uint64_t v74 = MGCopyAnswer((const char **)@"97JDvERpVwO+GHtthIh7hA");
    if (!v74) {
      return @"A";
    }
    uint64_t v31 = v74;
    if (CFEqual(@"A1670", v74) || CFEqual(@"A1671", v31)) {
      goto LABEL_357;
    }
    int v50 = @"A1821";
    goto LABEL_80;
  }
  int v422 = 414393924;
  long long v421 = xmmword_19D773ED0;
  int v420 = 897736383;
  long long v419 = xmmword_19D773EE4;
  if (MGIsDeviceOneOfType((const UInt8 *)&v421, v67, v68, v69, v70, v71, v72, v73, (uint64_t)&v419))
  {
    uint64_t v82 = MGCopyAnswer((const char **)@"97JDvERpVwO+GHtthIh7hA");
    if (!v82) {
      return @"A";
    }
    uint64_t v31 = v82;
    if (CFEqual(@"A1863", v82) || CFEqual(@"A1905", v31)) {
      goto LABEL_357;
    }
    if (CFEqual(@"A1906", v31)) {
      goto LABEL_81;
    }
    if (CFEqual(@"A1907", v31)) {
      goto LABEL_74;
    }
    long long v41 = @"A1908";
    goto LABEL_73;
  }
  int v418 = -996295886;
  long long v417 = xmmword_19D773EF8;
  int v416 = -453987047;
  long long v415 = xmmword_19D773F0C;
  if (MGIsDeviceOneOfType((const UInt8 *)&v417, v75, v76, v77, v78, v79, v80, v81, (uint64_t)&v415))
  {
    uint64_t v90 = MGCopyAnswer((const char **)@"97JDvERpVwO+GHtthIh7hA");
    if (!v90) {
      return @"A";
    }
    uint64_t v31 = v90;
    if (CFEqual(@"A1864", v90) || CFEqual(@"A1897", v31)) {
      goto LABEL_357;
    }
    if (CFEqual(@"A1898", v31)) {
      goto LABEL_81;
    }
    if (CFEqual(@"A1899", v31)) {
      goto LABEL_74;
    }
    long long v41 = @"A1900";
    goto LABEL_73;
  }
  int v414 = -337121064;
  long long v413 = xmmword_19D773F20;
  int v412 = 450980336;
  long long v411 = xmmword_19D773F34;
  if (MGIsDeviceOneOfType((const UInt8 *)&v413, v83, v84, v85, v86, v87, v88, v89, (uint64_t)&v411))
  {
    uint64_t v98 = MGCopyAnswer((const char **)@"97JDvERpVwO+GHtthIh7hA");
    if (!v98) {
      return @"A";
    }
    uint64_t v31 = v98;
    if (CFEqual(@"A1865", v98) || CFEqual(@"A1901", v31)) {
      goto LABEL_357;
    }
    if (CFEqual(@"A1902", v31)) {
      goto LABEL_81;
    }
    if (CFEqual(@"A1903", v31)) {
      goto LABEL_74;
    }
    long long v41 = @"A1904";
    goto LABEL_73;
  }
  int v410 = -232427879;
  long long v409 = xmmword_19D773F48;
  int v408 = -427474227;
  long long v407 = xmmword_19D773F5C;
  int v406 = 1477534141;
  long long v405 = xmmword_19D773F70;
  int v404 = -1843102369;
  long long v403 = xmmword_19D773F84;
  if (MGIsDeviceOneOfType((const UInt8 *)&v409, v91, v92, v93, v94, v95, v96, v97, (uint64_t)&v407))
  {
    uint64_t v106 = MGCopyAnswer((const char **)@"97JDvERpVwO+GHtthIh7hA");
    if (!v106) {
      return @"A";
    }
    uint64_t v31 = v106;
    if (CFEqual(@"A1920", v106) || CFEqual(@"A1921", v31) || CFEqual(@"A1984", v31)) {
      goto LABEL_357;
    }
    if (CFEqual(@"A2098", v31) || CFEqual(@"A2102", v31) || CFEqual(@"A2106", v31)) {
      goto LABEL_81;
    }
    if (CFEqual(@"A2099", v31) || CFEqual(@"A2103", v31) || CFEqual(@"A2107", v31)) {
      goto LABEL_74;
    }
    if (CFEqual(@"A2100", v31) || CFEqual(@"A2104", v31) || CFEqual(@"A2108", v31)) {
      goto LABEL_67;
    }
    if (!CFEqual(@"A2097", v31) && !CFEqual(@"A2101", v31))
    {
      uint64_t v107 = @"A2105";
      goto LABEL_290;
    }
LABEL_291:
    uint64_t v32 = @"E";
    goto LABEL_358;
  }
  int v402 = 2030516999;
  long long v401 = xmmword_19D773F98;
  int v400 = -1276010597;
  long long v399 = xmmword_19D773FAC;
  int v398 = -762483149;
  long long v397 = xmmword_19D773FC0;
  int v396 = -1926937532;
  long long v395 = xmmword_19D773FD4;
  int v394 = -1902732724;
  long long v393 = xmmword_19D773FE8;
  int v392 = -342357580;
  long long v391 = xmmword_19D773FFC;
  int v390 = 300442574;
  long long v389 = xmmword_19D774010;
  int v388 = -1294188889;
  long long v387 = xmmword_19D774024;
  if (MGIsDeviceOneOfType((const UInt8 *)&v401, v99, v100, v101, v102, v103, v104, v105, (uint64_t)&v399))
  {
    uint64_t v115 = MGCopyAnswer((const char **)@"97JDvERpVwO+GHtthIh7hA");
    if (!v115) {
      return @"A";
    }
    uint64_t v31 = v115;
    if (CFEqual(@"A1876", v115)
      || CFEqual(@"A1895", v31)
      || CFEqual(@"A1934", v31)
      || CFEqual(@"A1980", v31))
    {
      goto LABEL_357;
    }
    if (CFEqual(@"A2013", v31) || CFEqual(@"A2014", v31)) {
      goto LABEL_81;
    }
    if (CFEqual(@"A1979", v31)) {
      goto LABEL_74;
    }
    long long v41 = @"A1983";
    goto LABEL_73;
  }
  int v386 = 1278131292;
  long long v385 = xmmword_19D774038;
  int v384 = -1841712216;
  long long v383 = xmmword_19D77404C;
  int v382 = 659506830;
  long long v381 = xmmword_19D774060;
  int v380 = 213746202;
  long long v379 = xmmword_19D774074;
  if (MGIsDeviceOneOfType((const UInt8 *)&v385, v108, v109, v110, v111, v112, v113, v114, (uint64_t)&v383))
  {
    uint64_t v123 = MGCopyAnswer((const char **)@"97JDvERpVwO+GHtthIh7hA");
    if (!v123) {
      return @"A";
    }
    uint64_t v31 = v123;
    if (CFEqual(@"A2133", v123)
      || CFEqual(@"A2126", v31)
      || CFEqual(@"A2152", v31)
      || CFEqual(@"A2153", v31))
    {
      goto LABEL_357;
    }
    if (CFEqual(@"A2124", v31) || CFEqual(@"A2123", v31)) {
      goto LABEL_81;
    }
    if (CFEqual(@"A2125", v31)) {
      goto LABEL_74;
    }
    long long v41 = @"A2154";
    goto LABEL_73;
  }
  int v378 = -61007701;
  long long v377 = xmmword_19D774088;
  int v376 = -235416490;
  long long v375 = xmmword_19D77409C;
  int v374 = -820493242;
  long long v373 = xmmword_19D7740B0;
  if (MGIsDeviceOneOfType((const UInt8 *)&v377, v116, v117, v118, v119, v120, v121, v122, (uint64_t)&v375))
  {
    uint64_t v131 = MGCopyAnswer((const char **)@"97JDvERpVwO+GHtthIh7hA");
    if (!v131) {
      return @"A";
    }
    uint64_t v31 = v131;
    if (CFEqual(@"A2160", v131) || CFEqual(@"A2161", v31) || CFEqual(@"A2111", v31)) {
      goto LABEL_357;
    }
    if (CFEqual(@"A2215", v31) || CFEqual(@"A2218", v31) || CFEqual(@"A2221", v31)) {
      goto LABEL_81;
    }
    if (CFEqual(@"A2216", v31) || CFEqual(@"A2219", v31) || CFEqual(@"A2222", v31)) {
      goto LABEL_74;
    }
    if (CFEqual(@"A2217", v31) || CFEqual(@"A2220", v31)) {
      goto LABEL_67;
    }
    uint64_t v132 = @"A2223";
LABEL_188:
    if (!CFEqual(v132, v31)) {
      goto LABEL_357;
    }
    goto LABEL_67;
  }
  int v372 = -1157300313;
  long long v371 = xmmword_19D7740C4;
  int v370 = -2132668294;
  long long v369 = xmmword_19D7740D8;
  if (MGIsDeviceOneOfType((const UInt8 *)&v371, v124, v125, v126, v127, v128, v129, v130, (uint64_t)&v369))
  {
    uint64_t v133 = MGCopyAnswer((const char **)@"97JDvERpVwO+GHtthIh7hA");
    if (!v133) {
      return @"A";
    }
    uint64_t v31 = v133;
    if (CFEqual(@"A2197", v133) || CFEqual(@"A2200", v31)) {
      goto LABEL_357;
    }
    if (CFEqual(@"A2198", v31)) {
      goto LABEL_81;
    }
    long long v41 = @"A2199";
    goto LABEL_73;
  }
  int v368 = -121925081;
  long long v367 = xmmword_19D7740EC;
  if (MGIsDeviceOfType((const UInt8 *)&v367))
  {
    v141 = MGCopyAnswer((const char **)@"97JDvERpVwO+GHtthIh7hA");
    if (!v141) {
      return @"A";
    }
    uint64_t v31 = v141;
    if (CFEqual(@"A2275", v141)) {
      goto LABEL_357;
    }
    if (CFEqual(@"A2296", v31)) {
      goto LABEL_81;
    }
    if (CFEqual(@"A2297", v31)) {
      goto LABEL_74;
    }
    uint64_t v132 = @"A2298";
    goto LABEL_188;
  }
  int v366 = 1126727276;
  long long v365 = xmmword_19D774100;
  int v364 = 300130091;
  long long v363 = xmmword_19D774114;
  int v362 = 343814884;
  long long v361 = xmmword_19D774128;
  int v360 = -1675932945;
  long long v359 = xmmword_19D77413C;
  if (MGIsDeviceOneOfType((const UInt8 *)&v365, v134, v135, v136, v137, v138, v139, v140, (uint64_t)&v363))
  {
    char v149 = MGCopyAnswer((const char **)@"97JDvERpVwO+GHtthIh7hA");
    if (!v149) {
      return @"A";
    }
    uint64_t v31 = v149;
    if (CFEqual(@"A2228", v149)
      || CFEqual(@"A2068", v31)
      || CFEqual(@"A2229", v31)
      || CFEqual(@"A2069", v31))
    {
      goto LABEL_357;
    }
    if (CFEqual(@"A2230", v31) || CFEqual(@"A2232", v31)) {
      goto LABEL_81;
    }
    if (CFEqual(@"A2231", v31)) {
      goto LABEL_74;
    }
    long long v41 = @"A2233";
    goto LABEL_73;
  }
  int v358 = 372777383;
  long long v357 = xmmword_19D774150;
  int v356 = -858079590;
  long long v355 = xmmword_19D774164;
  if (MGIsDeviceOneOfType((const UInt8 *)&v357, v142, v143, v144, v145, v146, v147, v148, (uint64_t)&v355))
  {
    int v157 = MGCopyAnswer((const char **)@"97JDvERpVwO+GHtthIh7hA");
    if (!v157) {
      return @"A";
    }
    uint64_t v31 = v157;
    if (CFEqual(@"A2270", v157) || CFEqual(@"A2428", v31)) {
      goto LABEL_357;
    }
    if (CFEqual(@"A2429", v31)) {
      goto LABEL_81;
    }
    long long v41 = @"A2430";
    goto LABEL_73;
  }
  int v354 = 345196535;
  long long v353 = xmmword_19D774178;
  int v352 = 440949464;
  long long v351 = xmmword_19D77418C;
  if (MGIsDeviceOneOfType((const UInt8 *)&v353, v150, v151, v152, v153, v154, v155, v156, (uint64_t)&v351))
  {
    v165 = MGCopyAnswer((const char **)@"97JDvERpVwO+GHtthIh7hA");
    if (!v165) {
      return @"A";
    }
    uint64_t v31 = v165;
    if (CFEqual(@"A2316", v165) || CFEqual(@"A2324", v31)) {
      goto LABEL_357;
    }
    if (CFEqual(@"A2072", v31)) {
      goto LABEL_81;
    }
    long long v41 = @"A2325";
    goto LABEL_73;
  }
  int v350 = 1071957977;
  long long v349 = xmmword_19D7741A0;
  int v348 = 438437663;
  long long v347 = xmmword_19D7741B4;
  int v346 = -382792827;
  long long v345 = xmmword_19D7741C8;
  int v344 = 1575123478;
  long long v343 = xmmword_19D7741DC;
  if (MGIsDeviceOneOfType((const UInt8 *)&v349, v158, v159, v160, v161, v162, v163, v164, (uint64_t)&v347))
  {
    v173 = MGCopyAnswer((const char **)@"97JDvERpVwO+GHtthIh7hA");
    if (!v173) {
      return @"A";
    }
    uint64_t v31 = v173;
    if (CFEqual(@"A2176", v173)
      || CFEqual(@"A2172", v31)
      || CFEqual(@"A2341", v31)
      || CFEqual(@"A2342", v31))
    {
      goto LABEL_357;
    }
    if (CFEqual(@"A2398", v31)
      || CFEqual(@"A2402", v31)
      || CFEqual(@"A2406", v31)
      || CFEqual(@"A2410", v31))
    {
      goto LABEL_81;
    }
    if (CFEqual(@"A2399", v31)
      || CFEqual(@"A2403", v31)
      || CFEqual(@"A2407", v31)
      || CFEqual(@"A2411", v31))
    {
      goto LABEL_74;
    }
    if (CFEqual(@"A2400", v31)
      || CFEqual(@"A2404", v31)
      || CFEqual(@"A2408", v31)
      || CFEqual(@"A2412", v31))
    {
      goto LABEL_67;
    }
    if (CFEqual(@"A2401", v31) || CFEqual(@"A2405", v31) || CFEqual(@"A2409", v31)) {
      goto LABEL_291;
    }
    uint64_t v107 = @"A2413";
    goto LABEL_290;
  }
  int v342 = -695298128;
  long long v341 = xmmword_19D7741F0;
  int v340 = 804488105;
  long long v339 = xmmword_19D774204;
  int v338 = 1614584579;
  long long v337 = xmmword_19D774218;
  int v336 = 324288768;
  long long v335 = xmmword_19D77422C;
  int v334 = 460218192;
  long long v333 = xmmword_19D774240;
  int v332 = 2144905009;
  long long v331 = xmmword_19D774254;
  int v330 = 127894440;
  long long v329 = xmmword_19D774268;
  int v328 = 1070997468;
  long long v327 = xmmword_19D77427C;
  if (MGIsDeviceOneOfType((const UInt8 *)&v341, v166, v167, v168, v169, v170, v171, v172, (uint64_t)&v339))
  {
    v181 = MGCopyAnswer((const char **)@"97JDvERpVwO+GHtthIh7hA");
    if (v181)
    {
      uint64_t v31 = v181;
      if (CFEqual(@"A2377", v181) || CFEqual(@"A2301", v31) || CFEqual(@"A2378", v31)) {
        goto LABEL_357;
      }
      uint64_t v32 = @"A";
      if (CFEqual(@"A2379", v31)) {
        goto LABEL_358;
      }
      if (CFEqual(@"A2459", v31) || CFEqual(@"A2461", v31)) {
        goto LABEL_81;
      }
      if (CFEqual(@"A2460", v31))
      {
LABEL_243:
        uint64_t v32 = @"C";
        goto LABEL_358;
      }
      v263 = @"A2462";
LABEL_341:
      if (CFEqual(v263, v31)) {
        uint64_t v32 = @"C";
      }
      goto LABEL_358;
    }
    goto LABEL_359;
  }
  int v326 = 123138233;
  long long v325 = xmmword_19D774290;
  int v324 = 681511593;
  long long v323 = xmmword_19D7742A4;
  int v322 = 713503427;
  long long v321 = xmmword_19D7742B8;
  int v320 = -1632750650;
  long long v319 = xmmword_19D7742CC;
  if (MGIsDeviceOneOfType((const UInt8 *)&v325, v174, v175, v176, v177, v178, v179, v180, (uint64_t)&v323))
  {
    v189 = MGCopyAnswer((const char **)@"97JDvERpVwO+GHtthIh7hA");
    if (!v189) {
      return @"A";
    }
    uint64_t v31 = v189;
    if (CFEqual(@"A2481", v189)
      || CFEqual(@"A2482", v31)
      || CFEqual(@"A2483", v31)
      || CFEqual(@"A2484", v31))
    {
      goto LABEL_357;
    }
    if (CFEqual(@"A2626", v31)
      || CFEqual(@"A2631", v31)
      || CFEqual(@"A2636", v31)
      || CFEqual(@"A2641", v31))
    {
      goto LABEL_81;
    }
    if (CFEqual(@"A2628", v31)
      || CFEqual(@"A2633", v31)
      || CFEqual(@"A2638", v31)
      || CFEqual(@"A2643", v31))
    {
      goto LABEL_74;
    }
    if (CFEqual(@"A2629", v31)
      || CFEqual(@"A2634", v31)
      || CFEqual(@"A2639", v31)
      || CFEqual(@"A2644", v31))
    {
      goto LABEL_67;
    }
    if (CFEqual(@"A2630", v31) || CFEqual(@"A2635", v31) || CFEqual(@"A2640", v31)) {
      goto LABEL_291;
    }
    uint64_t v107 = @"A2645";
    goto LABEL_290;
  }
  int v318 = -212523443;
  long long v317 = xmmword_19D7742E0;
  int v316 = 646100384;
  long long v315 = xmmword_19D7742F4;
  if (MGIsDeviceOneOfType((const UInt8 *)&v317, v182, v183, v184, v185, v186, v187, v188, (uint64_t)&v315))
  {
    v197 = MGCopyAnswer((const char **)@"97JDvERpVwO+GHtthIh7hA");
    if (!v197) {
      return @"A";
    }
    uint64_t v31 = v197;
    if (CFEqual(@"A2602", v197) || CFEqual(@"A2603", v31)) {
      goto LABEL_357;
    }
    if (CFEqual(@"A2604", v31)) {
      goto LABEL_81;
    }
    long long v41 = @"A2605";
    goto LABEL_73;
  }
  int v314 = 688565114;
  long long v313 = xmmword_19D774308;
  int v312 = -493418906;
  long long v311 = xmmword_19D77431C;
  if (MGIsDeviceOneOfType((const UInt8 *)&v313, v190, v191, v192, v193, v194, v195, v196, (uint64_t)&v311))
  {
    v205 = MGCopyAnswer((const char **)@"97JDvERpVwO+GHtthIh7hA");
    if (!v205) {
      return @"A";
    }
    uint64_t v31 = v205;
    if (CFEqual(@"A2567", v205) || CFEqual(@"A2568", v31)) {
      goto LABEL_357;
    }
    if (CFEqual(@"A2569", v31)) {
      goto LABEL_81;
    }
    long long v41 = @"A2714";
LABEL_73:
    if (CFEqual(v41, v31)) {
      goto LABEL_74;
    }
LABEL_357:
    uint64_t v32 = @"A";
    goto LABEL_358;
  }
  int v310 = -545612308;
  long long v309 = xmmword_19D774330;
  int v308 = 1178062702;
  long long v307 = xmmword_19D774344;
  if (MGIsDeviceOneOfType((const UInt8 *)&v309, v198, v199, v200, v201, v202, v203, v204, (uint64_t)&v307))
  {
    v206 = MGCopyAnswer((const char **)@"97JDvERpVwO+GHtthIh7hA");
    if (!v206) {
      return @"A";
    }
    uint64_t v31 = v206;
    if (CFEqual(@"A2588", v206) || CFEqual(@"A2589", v31)) {
      goto LABEL_357;
    }
    int v50 = @"A2591";
LABEL_80:
    if (!CFEqual(v50, v31)) {
      goto LABEL_357;
    }
    goto LABEL_81;
  }
  int v306 = -1431778695;
  long long v305 = xmmword_19D774358;
  if (MGIsDeviceOfType((const UInt8 *)&v305))
  {
    v214 = MGCopyAnswer((const char **)@"97JDvERpVwO+GHtthIh7hA");
    if (!v214) {
      return @"A";
    }
    uint64_t v31 = v214;
    if (CFEqual(@"A2595", v214)) {
      goto LABEL_357;
    }
    if (CFEqual(@"A2782", v31)) {
      goto LABEL_81;
    }
    if (CFEqual(@"A2783", v31)) {
      goto LABEL_74;
    }
    if (CFEqual(@"A2784", v31))
    {
LABEL_67:
      uint64_t v32 = @"D";
LABEL_358:
      CFRelease(v31);
      return v32;
    }
    uint64_t v107 = @"A2785";
LABEL_290:
    if (!CFEqual(v107, v31)) {
      goto LABEL_357;
    }
    goto LABEL_291;
  }
  int v304 = 533419158;
  long long v303 = xmmword_19D77436C;
  int v302 = 1106979518;
  long long v301 = xmmword_19D774380;
  if (MGIsDeviceOneOfType((const UInt8 *)&v303, v207, v208, v209, v210, v211, v212, v213, (uint64_t)&v301))
  {
    v222 = MGCopyAnswer((const char **)@"97JDvERpVwO+GHtthIh7hA");
    if (!v222) {
      return @"A";
    }
    uint64_t v31 = v222;
    if (CFEqual(@"A2649", v222) || CFEqual(@"A2632", v31)) {
      goto LABEL_357;
    }
    if (CFEqual(@"A2881", v31) || CFEqual(@"A2885", v31)) {
      goto LABEL_81;
    }
    if (CFEqual(@"A2882", v31) || CFEqual(@"A2886", v31)) {
      goto LABEL_74;
    }
    if (CFEqual(@"A2883", v31) || CFEqual(@"A2887", v31)) {
      goto LABEL_67;
    }
    if (CFEqual(@"A2884", v31)) {
      goto LABEL_291;
    }
    uint64_t v107 = @"A2888";
    goto LABEL_290;
  }
  int v300 = -1820426635;
  long long v299 = xmmword_19D774394;
  int v298 = -937652876;
  long long v297 = xmmword_19D7743A8;
  if (MGIsDeviceOneOfType((const UInt8 *)&v299, v215, v216, v217, v218, v219, v220, v221, (uint64_t)&v297))
  {
    v230 = MGCopyAnswer((const char **)@"97JDvERpVwO+GHtthIh7hA");
    if (!v230) {
      return @"A";
    }
    uint64_t v31 = v230;
    if (CFEqual(@"A2650", v230) || CFEqual(@"A2651", v31)) {
      goto LABEL_357;
    }
    if (CFEqual(@"A2889", v31) || CFEqual(@"A2893", v31)) {
      goto LABEL_81;
    }
    if (CFEqual(@"A2890", v31) || CFEqual(@"A2894", v31)) {
      goto LABEL_74;
    }
    if (CFEqual(@"A2891", v31) || CFEqual(@"A2895", v31)) {
      goto LABEL_67;
    }
    if (CFEqual(@"A2892", v31)) {
      goto LABEL_291;
    }
    uint64_t v107 = @"A2896";
    goto LABEL_290;
  }
  int v296 = -609570151;
  long long v295 = xmmword_19D7743BC;
  if (MGIsDeviceOneOfType((const UInt8 *)&v295, v223, v224, v225, v226, v227, v228, v229, 0))
  {
    v238 = MGCopyAnswer((const char **)@"97JDvERpVwO+GHtthIh7hA");
    if (!v238) {
      return @"A";
    }
    uint64_t v31 = v238;
    if (CFEqual(@"A2846", v238)) {
      goto LABEL_357;
    }
    if (CFEqual(@"A3089", v31)) {
      goto LABEL_81;
    }
    if (CFEqual(@"A3090", v31)) {
      goto LABEL_74;
    }
    uint64_t v132 = @"A3092";
    goto LABEL_188;
  }
  int v294 = -874769875;
  long long v293 = xmmword_19D7743D0;
  if (MGIsDeviceOneOfType((const UInt8 *)&v293, v231, v232, v233, v234, v235, v236, v237, 0))
  {
    v246 = MGCopyAnswer((const char **)@"97JDvERpVwO+GHtthIh7hA");
    if (!v246) {
      return @"A";
    }
    uint64_t v31 = v246;
    if (CFEqual(@"A2847", v246)) {
      goto LABEL_357;
    }
    if (CFEqual(@"A3093", v31)) {
      goto LABEL_81;
    }
    if (CFEqual(@"A3094", v31)) {
      goto LABEL_74;
    }
    uint64_t v132 = @"A3096";
    goto LABEL_188;
  }
  int v292 = 1874287171;
  long long v291 = xmmword_19D7743E4;
  if (MGIsDeviceOneOfType((const UInt8 *)&v291, v239, v240, v241, v242, v243, v244, v245, 0))
  {
    v254 = MGCopyAnswer((const char **)@"97JDvERpVwO+GHtthIh7hA");
    if (!v254) {
      return @"A";
    }
    uint64_t v31 = v254;
    if (CFEqual(@"A2848", v254)) {
      goto LABEL_357;
    }
    if (CFEqual(@"A3101", v31)) {
      goto LABEL_81;
    }
    if (CFEqual(@"A3102", v31)) {
      goto LABEL_74;
    }
    uint64_t v132 = @"A3104";
    goto LABEL_188;
  }
  int v290 = -781324731;
  long long v289 = xmmword_19D7743F8;
  if (MGIsDeviceOneOfType((const UInt8 *)&v289, v247, v248, v249, v250, v251, v252, v253, 0))
  {
    v262 = MGCopyAnswer((const char **)@"97JDvERpVwO+GHtthIh7hA");
    if (!v262) {
      return @"A";
    }
    uint64_t v31 = v262;
    if (CFEqual(@"A2849", v262)) {
      goto LABEL_357;
    }
    if (CFEqual(@"A3105", v31)) {
      goto LABEL_81;
    }
    if (CFEqual(@"A3106", v31)) {
      goto LABEL_74;
    }
    uint64_t v132 = @"A3108";
    goto LABEL_188;
  }
  int v288 = -340360463;
  long long v287 = xmmword_19D77440C;
  int v286 = 1605231531;
  long long v285 = xmmword_19D774420;
  if (MGIsDeviceOneOfType((const UInt8 *)&v287, v255, v256, v257, v258, v259, v260, v261, (uint64_t)&v285))
  {
    v271 = MGCopyAnswer((const char **)@"97JDvERpVwO+GHtthIh7hA");
    if (v271)
    {
      uint64_t v31 = v271;
      if (CFEqual(@"A2696", v271)) {
        goto LABEL_357;
      }
      uint64_t v32 = @"A";
      if (CFEqual(@"A2757", v31)) {
        goto LABEL_358;
      }
      if (!CFEqual(@"A2777", v31))
      {
        if (CFEqual(@"A3162", v31)) {
          uint64_t v32 = @"C";
        }
        goto LABEL_358;
      }
      goto LABEL_81;
    }
  }
  else
  {
    int v284 = 1878025452;
    long long v283 = xmmword_19D774434;
    int v282 = 1725957070;
    long long v281 = xmmword_19D774448;
    if (!MGIsDeviceOneOfType((const UInt8 *)&v283, v264, v265, v266, v267, v268, v269, v270, (uint64_t)&v281))return @"A"; {
    v272 = MGCopyAnswer((const char **)@"97JDvERpVwO+GHtthIh7hA");
    }
    if (v272)
    {
      uint64_t v31 = v272;
      if (CFEqual(@"A2759", v272) || CFEqual(@"A2435", v31) || CFEqual(@"A2436", v31)) {
        goto LABEL_357;
      }
      uint64_t v32 = @"A";
      if (CFEqual(@"A2764", v31)) {
        goto LABEL_358;
      }
      if (CFEqual(@"A2761", v31) || CFEqual(@"A2437", v31)) {
        goto LABEL_81;
      }
      if (CFEqual(@"A2762", v31)) {
        goto LABEL_243;
      }
      v263 = @"A2766";
      goto LABEL_341;
    }
  }
LABEL_359:
  v273 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/variants.c", 47);
  if (v273) {
    v279 = v273 + 1;
  }
  else {
    v279 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/variants.c";
  }
  _MGLog((uint64_t)v279, 2561, @"unknown variant\n", v274, v275, v276, v277, v278, v280);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "unknown variant\n", buf, 2u);
  }
  return 0;
}

void *MGSetLogHandler(void *result)
{
  off_1E9449380 = result;
  return result;
}

const void *sub_19D71D520(const __CFDictionary *a1, const void *a2, int a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    CFStringRef Value = CFDictionaryGetValue(a1, a2);
    uint64_t v7 = Value;
    if (Value)
    {
      CFRetain(Value);
    }
    else if (a3)
    {
      uint64_t v15 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c", 47);
      if (v15) {
        uint64_t v21 = v15 + 1;
      }
      else {
        uint64_t v21 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c";
      }
      _MGLog((uint64_t)v21, 319, @"Could not lookup %@ from dictionary", v16, v17, v18, v19, v20, (char)a2);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v25 = a2;
        _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Could not lookup %@ from dictionary", buf, 0xCu);
      }
    }
    CFRelease(a1);
  }
  else
  {
    if (a3)
    {
      uint64_t v8 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c", 47);
      uint64_t v14 = v8 ? v8 + 1 : "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c";
      _MGLog((uint64_t)v14, 324, @"No dictionary provided", v9, v10, v11, v12, v13, v23);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "No dictionary provided", buf, 2u);
      }
    }
    return 0;
  }
  return v7;
}

uint64_t sub_19D71D6A4()
{
  return 0;
}

void sub_19D71D6AC(const __CFArray *a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t Count = CFArrayGetCount(a1);
    CFStringRef v5 = (const void **)malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
    v9.CFIndex location = 0;
    v9.length = Count;
    CFArrayGetValues(a1, v9, v5);
    if (Count >= 1)
    {
      CFTypeID v6 = v5;
      do
      {
        uint64_t v7 = (uint64_t)*v6++;
        (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a2, v7);
        --Count;
      }
      while (Count);
    }
    free(v5);
  }
}

CFDataRef sub_19D71D75C(CFDataRef theData)
{
  CFDataRef v1 = theData;
  if (theData)
  {
    uint64_t Length = CFDataGetLength(theData);
    BytePtr = CFDataGetBytePtr(v1);
    if (Length < 2) {
      return 0;
    }
    CFStringRef v4 = (const char *)BytePtr;
    uint64_t v5 = 0;
    while (!BytePtr[Length - 1 + v5])
    {
      --v5;
      if (!(Length + v5)) {
        return 0;
      }
    }
    uint64_t v6 = Length + v5;
    if (!(Length + v5)) {
      return 0;
    }
    if (v6 >= 1)
    {
      uint64_t v7 = 0;
      uint64_t v8 = MEMORY[0x1E4F14390];
      do
      {
        uint64_t v9 = v4[v7];
        if (!(v4[v7] < 0 ? __maskrune(v9, 0x40000uLL) : *(_DWORD *)(v8 + 4 * v9 + 60) & 0x40000)) {
          return 0;
        }
      }
      while (v6 != ++v7);
    }
    if (v5)
    {
      CFStringRef v11 = CFStringCreateWithCString(0, v4, 0x8000100u);
      CFStringRef v12 = v11;
      if (v5 == -1) {
        CFStringRef v13 = CFStringCreateWithFormat(0, 0, @"%@\\0", v11);
      }
      else {
        CFStringRef v13 = CFStringCreateWithFormat(0, 0, @"%@ (%llux\\0)", v11, -v5);
      }
    }
    else
    {
      CFStringRef v12 = CFStringCreateWithBytes(0, (const UInt8 *)v4, Length, 0x8000100u, 0);
      CFStringRef v13 = CFStringCreateWithFormat(0, 0, @"%@", v12);
    }
    CFDataRef v1 = (const __CFData *)v13;
    CFRelease(v12);
  }
  return v1;
}

uint64_t sub_19D71D8BC(char *a1, const void *a2, unsigned char *a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (a3) {
    *a3 = 0;
  }
  if (!access(a1, 4))
  {
    CFDictionaryRef v7 = (const __CFDictionary *)sub_19D715738(a1, 1);
    if (v7)
    {
      CFDictionaryRef v8 = v7;
      CFStringRef Value = CFDictionaryGetValue(v7, a2);
      uint64_t v6 = (uint64_t)Value;
      if (Value)
      {
        CFTypeID v10 = CFGetTypeID(Value);
        if (v10 == CFBooleanGetTypeID())
        {
          BOOL v11 = CFBooleanGetValue((CFBooleanRef)v6) == 0;
        }
        else
        {
          if (v10 != CFNumberGetTypeID())
          {
            CFStringRef v12 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c", 47);
            if (v12) {
              uint64_t v18 = v12 + 1;
            }
            else {
              uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c";
            }
            _MGLog((uint64_t)v18, 739, @"illegal type for %@ in %s", v13, v14, v15, v16, v17, (char)a2);
            uint64_t v6 = 0;
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
            {
              int valuePtr = 138412546;
              uint64_t v21 = a2;
              __int16 v22 = 2080;
              char v23 = a1;
              _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "illegal type for %@ in %s", (uint8_t *)&valuePtr, 0x16u);
              uint64_t v6 = 0;
            }
            goto LABEL_21;
          }
          int valuePtr = 0;
          CFNumberGetValue((CFNumberRef)v6, kCFNumberIntType, &valuePtr);
          BOOL v11 = valuePtr == 0;
        }
        uint64_t v6 = !v11;
        if (a3) {
          *a3 = 1;
        }
      }
LABEL_21:
      CFRelease(v8);
      return v6;
    }
  }
  return 0;
}

CFPropertyListRef sub_19D71DA6C(CFStringRef prefsID, const __CFString *a2)
{
  CFDictionaryRef v3 = SCPreferencesCreate(0, @"MobileGestalt", prefsID);
  if (!v3) {
    return 0;
  }
  CFStringRef v4 = v3;
  CFPropertyListRef Value = SCPreferencesGetValue(v3, a2);
  CFPropertyListRef v6 = Value;
  if (Value) {
    CFRetain(Value);
  }
  CFRelease(v4);
  return v6;
}

uint64_t sub_19D71DAD4()
{
  kern_return_t v1;
  mach_error_t v2;
  const char *v3;
  char *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  mach_msg_type_number_t host_info_outCnt;
  integer_t host_info_out[2];
  uint8_t buf[4];
  char *v16;
  uint64_t v17;

  uint64_t v17 = *MEMORY[0x1E4F143B8];
  *(void *)host_info_out = 0;
  host_info_outCnt = 2;
  host_t v0 = MEMORY[0x19F3AA570]();
  CFDataRef v1 = host_info(v0, 12, host_info_out, &host_info_outCnt);
  if (v1)
  {
    BOOL v2 = v1;
    CFDictionaryRef v3 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c";
    CFStringRef v4 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c", 47);
    if (v4) {
      CFDictionaryRef v3 = v4 + 1;
    }
    uint64_t v5 = mach_error_string(v2);
    _MGLog((uint64_t)v3, 908, @"host_info failed: %s", v6, v7, v8, v9, v10, v5);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      BOOL v11 = mach_error_string(v2);
      *(_DWORD *)buf = 136315138;
      uint64_t v16 = v11;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "host_info failed: %s", buf, 0xCu);
    }
  }
  return *(void *)host_info_out;
}

BOOL sub_19D71DBE0(const char *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  BOOL v2 = NXGetArchInfoFromName(a1);
  if (v2)
  {
    CFDictionaryRef v3 = v2;
    uint64_t v4 = sub_19D71DAD4();
    *(void *)&fat_archs.cputype = *(void *)&v3->cputype;
    *(void *)&fat_archs.offset = 0;
    fat_archs.align = 0;
    return NXFindBestFatArch(v4, SHIDWORD(v4), &fat_archs, 1u) != 0;
  }
  else
  {
    CFPropertyListRef v6 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c", 47);
    if (v6) {
      CFStringRef v12 = v6 + 1;
    }
    else {
      CFStringRef v12 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c";
    }
    _MGLog((uint64_t)v12, 1011, @"arch %s unknown", v7, v8, v9, v10, v11, (char)a1);
    BOOL v13 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT);
    BOOL result = 0;
    if (v13)
    {
      fat_archs.cputype = 136315138;
      *(void *)&fat_archs.cpusubtype = a1;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "arch %s unknown", (uint8_t *)&fat_archs, 0xCu);
      return 0;
    }
  }
  return result;
}

BOOL sub_19D71DCF8(const __CFString *a1)
{
  CFStringRef v2 = (const __CFString *)MGGetStringAnswer((const char **)@"k7QIBwZJJOVw+Sej/8h8VA");
  if (!v2) {
    return 0;
  }
  CFStringRef v3 = v2;
  BOOL v4 = CFEqual(v2, a1);
  CFRelease(v3);
  return v4;
}

BOOL sub_19D71DD54(const char *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  int v2 = access(a1, 0);
  if (v2 && *__error() != 2)
  {
    CFStringRef v3 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c";
    BOOL v4 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c", 47);
    if (v4) {
      CFStringRef v3 = v4 + 1;
    }
    __error();
    _MGLog((uint64_t)v3, 1043, @"access(2) %s: %{errno}d", v5, v6, v7, v8, v9, (char)a1);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      int v10 = *__error();
      *(_DWORD *)buf = 136315394;
      BOOL v13 = a1;
      __int16 v14 = 1024;
      int v15 = v10;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "access(2) %s: %{errno}d", buf, 0x12u);
    }
  }
  return v2 == 0;
}

__CFString *sub_19D71DE74(int a1)
{
  if ((a1 - 1) > 7) {
    CFDataRef v1 = @"Invalid Key";
  }
  else {
    CFDataRef v1 = off_1E5962870[a1 - 1];
  }
  CFRetain(v1);
  return v1;
}

__CFString *sub_19D71DEC0(int a1)
{
  CFDataRef v1 = @"MGS_SIM_NULL_STATUS";
  if (a1 == 2) {
    CFDataRef v1 = @"MGS_SIM_TRAY_STATUS";
  }
  if (a1 == 1) {
    int v2 = @"MGS_SIM_STATUS";
  }
  else {
    int v2 = v1;
  }
  CFRetain(v2);
  return v2;
}

CFDataRef sub_19D71DF10()
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  int v0 = sub_19D7123B8("IODeviceTree:/chosen", @"display-scale", 0, 0, 1);
  int v1 = sub_19D7123B8("IODeviceTree:/chosen", @"display-rotation", 0, 0xFFFFFFFFLL, 1);
  if (v1 == -1) {
    float v2 = -1.0;
  }
  else {
    float v2 = (double)((360 - v1) % 360) * 0.0174532925;
  }
  if (sub_19D714D40() != 4 && sub_19D714D40() != 8 && sub_19D714D40() != 10)
  {
    *(void *)bytes = 0;
    uint64_t v16 = 0;
    int MainDisplay = IOMobileFramebufferGetMainDisplay();
    if (MainDisplay)
    {
      int v5 = MainDisplay;
      uint64_t v6 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGIOMFBSupport.c", 47);
      if (v6) {
        CFStringRef v12 = v6 + 1;
      }
      else {
        CFStringRef v12 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGIOMFBSupport.c";
      }
      _MGLog((uint64_t)v12, 64, @"IOMobileFramebufferGetMainDisplay failed: %d\n", v7, v8, v9, v10, v11, v5);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        int v14 = v5;
        _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "IOMobileFramebufferGetMainDisplay failed: %d\n", buf, 8u);
      }
    }
  }
  memset(bytes, 255, sizeof(bytes));
  LODWORD(v16) = -1;
  *((float *)&v16 + 1) = (float)v0;
  float v17 = v2;
  int v18 = -1;
  return CFDataCreate(0, bytes, 24);
}

uint64_t sub_19D71E9EC()
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  int MainDisplay = IOMobileFramebufferGetMainDisplay();
  if (MainDisplay)
  {
    int v1 = MainDisplay;
    float v2 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGIOMFBSupport.c", 47);
    if (v2) {
      uint64_t v8 = v2 + 1;
    }
    else {
      uint64_t v8 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGIOMFBSupport.c";
    }
    _MGLog((uint64_t)v8, 278, @"IOMobileFramebufferGetMainDisplay failed: %d\n", v3, v4, v5, v6, v7, v1);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      int v11 = v1;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "IOMobileFramebufferGetMainDisplay failed: %d\n", buf, 8u);
    }
  }
  return 0;
}

uint64_t sub_19D71EBB4()
{
  if (qword_1EB217448 != -1) {
    dispatch_once(&qword_1EB217448, &unk_1EEF8F578);
  }
  return qword_1EB217450;
}

BOOL sub_19D71EBF8()
{
  if (qword_1EB217400 != -1) {
    dispatch_once(&qword_1EB217400, &unk_1EEF8F678);
  }
  return dword_1EB217374 != -1 && BYTE4(qword_19D7745F0[4 * dword_1EB217374 + 2]) != 0;
}

const void *sub_19D71EC64()
{
  CFDictionaryRef v0 = (const __CFDictionary *)sub_19D71230C();
  if (!v0) {
    return 0;
  }
  CFDictionaryRef v1 = v0;
  CFPropertyListRef Value = CFDictionaryGetValue(v0, @"SoftwareBehavior");
  uint64_t v3 = Value;
  if (Value) {
    CFRetain(Value);
  }
  CFRelease(v1);
  return v3;
}

uint64_t sub_19D71ECBC()
{
  if (qword_1E9449408 != -1) {
    dispatch_once(&qword_1E9449408, &unk_1EEF8F5B8);
  }
  return qword_1E9449410;
}

char *sub_19D71ED00()
{
  BOOL result = sub_19D719378("hw.target");
  qword_1E9449410 = (uint64_t)result;
  return result;
}

uint64_t sub_19D71ED28()
{
  if (qword_1E9449438 != -1) {
    dispatch_once(&qword_1E9449438, &unk_1EEF8F758);
  }
  return qword_1E9449428;
}

char *sub_19D71ED6C()
{
  BOOL result = sub_19D719378("hw.osenvironment");
  qword_1E9449428 = (uint64_t)result;
  return result;
}

uint64_t sub_19D71ED94()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  size_t v3 = 8;
  uint64_t v4 = 0;
  if (sysctlbyname("hw.memsize_physical", &v4, &v3, 0, 0) != -1) {
    return v4;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    CFDictionaryRef v1 = __error();
    float v2 = strerror(*v1);
    *(_DWORD *)buf = 136315138;
    uint64_t v6 = v2;
    _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "sysctlbyname: %s", buf, 0xCu);
  }
  return 0;
}

BOOL sub_19D71EE6C()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  int v5 = 255;
  size_t v4 = 4;
  if (sysctlbyname("kern.exclaves_status", &v5, &v4, 0, 0) != -1) {
    return v5 == 1;
  }
  BOOL v1 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT);
  BOOL result = 0;
  if (v1)
  {
    float v2 = __error();
    size_t v3 = strerror(*v2);
    *(_DWORD *)buf = 136315138;
    uint64_t v7 = v3;
    _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "sysctlbyname(kern.exclaves_status): %s", buf, 0xCu);
    return 0;
  }
  return result;
}

void *sub_19D71EF5C(_DWORD *a1)
{
  *a1 = 2275;
  return &unk_1EEF36798;
}

const char *sub_19D71EF70(char *__s1)
{
  BOOL v1 = __s1;
  if (__s1)
  {
    if (strcmp(__s1, "/"))
    {
      float v2 = rindex(v1, 47);
      if (v2) {
        return v2 + 1;
      }
    }
  }
  return v1;
}

uint64_t sub_19D71EFC0()
{
  CFDictionaryRef v0 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v0) {
    uint64_t v6 = v0 + 1;
  }
  else {
    uint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  }
  _MGLog((uint64_t)v6, 185, @"called dummy function!", v1, v2, v3, v4, v5, v8[0]);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "called dummy function!", v8, 2u);
  }
  return 0;
}

void _MGSetServer()
{
  byte_1E9449440 = 1;
}

uint64_t _MGWriteCacheOnHelper()
{
  CFDictionaryRef v0 = (uint64_t (*)(void))*((void *)off_1E9449170 + 44);
  if (!v0) {
    CFDictionaryRef v0 = (uint64_t (*)(void))sub_19D71A930(44, 2);
  }

  return v0();
}

uint64_t _MGWriteRebuildCacheSentinel()
{
  CFDictionaryRef v0 = (uint64_t (*)(void))*((void *)off_1E9449170 + 48);
  if (!v0) {
    CFDictionaryRef v0 = (uint64_t (*)(void))sub_19D71A930(48, 2);
  }

  return v0();
}

uint64_t MGSetAnswer(const char **a1, const void *a2)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  if (a1 && a2)
  {
    uint64_t v4 = sub_19D710FBC(a1, 1);
    if (v4 && ((_BYTE)v4[19] & 4) != 0)
    {
      uint64_t v5 = SCPreferencesCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], @"com.apple.mobilegestalt.plist", @"com.apple.mobilegestalt.plist");
      if (v5)
      {
        uint64_t v6 = v5;
        if (SCPreferencesLock(v5, 1u))
        {
          if (SCPreferencesSetValue(v6, (CFStringRef)a1, a2))
          {
            if (SCPreferencesCommitChanges(v6))
            {
              if (SCPreferencesApplyChanges(v6))
              {
                SCPreferencesUnlock(v6);
                uint64_t v7 = 0;
LABEL_11:
                CFRelease(v6);
                return v7;
              }
              uint64_t v47 = sub_19D71EF70("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
              _MGLog((uint64_t)v47, 897, @"Could not apply changes to SCPreferences", v48, v49, v50, v51, v52, v53);
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                uint64_t v33 = MEMORY[0x1E4F14500];
                uint64_t v34 = "Could not apply changes to SCPreferences";
                goto LABEL_29;
              }
LABEL_30:
              uint64_t v7 = 2;
              goto LABEL_11;
            }
            long long v41 = sub_19D71EF70("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
            _MGLog((uint64_t)v41, 896, @"Could not commit changes to SCPreferences", v42, v43, v44, v45, v46, v53);
            if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_30;
            }
            *(_WORD *)buf = 0;
            uint64_t v33 = MEMORY[0x1E4F14500];
            uint64_t v34 = "Could not commit changes to SCPreferences";
          }
          else
          {
            uint64_t v35 = sub_19D71EF70("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
            _MGLog((uint64_t)v35, 895, @"Could not write value to SCPreferences", v36, v37, v38, v39, v40, v53);
            if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_30;
            }
            *(_WORD *)buf = 0;
            uint64_t v33 = MEMORY[0x1E4F14500];
            uint64_t v34 = "Could not write value to SCPreferences";
          }
        }
        else
        {
          uint64_t v27 = sub_19D71EF70("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
          _MGLog((uint64_t)v27, 894, @"Could not acquire SCPreferences lock", v28, v29, v30, v31, v32, v53);
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_30;
          }
          *(_WORD *)buf = 0;
          uint64_t v33 = MEMORY[0x1E4F14500];
          uint64_t v34 = "Could not acquire SCPreferences lock";
        }
LABEL_29:
        uint64_t v7 = 2;
        _os_log_impl(&dword_19D70E000, v33, OS_LOG_TYPE_DEFAULT, v34, buf, 2u);
        goto LABEL_11;
      }
      uint64_t v21 = sub_19D71EF70("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
      _MGLog((uint64_t)v21, 891, @"Could not create SCPreferences session", v22, v23, v24, v25, v26, v53);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        uint64_t v7 = 2;
        _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Could not create SCPreferences session", buf, 2u);
        return v7;
      }
    }
    else
    {
      int v15 = sub_19D71EF70("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
      _MGLog((uint64_t)v15, 887, @"Key %@ is not settable", v16, v17, v18, v19, v20, (char)a1);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v55 = a1;
        _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Key %@ is not settable", buf, 0xCu);
      }
    }
    return 2;
  }
  uint64_t v9 = sub_19D71EF70("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
  _MGLog((uint64_t)v9, 886, @"Question and answer must both be non-null", v10, v11, v12, v13, v14, v53);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Question and answer must both be non-null", buf, 2u);
  }
  return 3;
}

const void *_MGCopyAnswerWithMode(const char **a1, int a2)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    uint64_t v11 = sub_19D71EF70("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
    _MGLog((uint64_t)v11, 925, @"failed to create options", v12, v13, v14, v15, v16, v23[0]);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "failed to create options", buf, 2u);
    }
    return 0;
  }
  CFMutableDictionaryRef v6 = Mutable;
  int valuePtr = a2;
  CFNumberRef v7 = CFNumberCreate(v4, kCFNumberIntType, &valuePtr);
  if (!v7)
  {
    uint64_t v17 = sub_19D71EF70("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
    _MGLog((uint64_t)v17, 929, @"failed to create CFNumber for mode", v18, v19, v20, v21, v22, v23[0]);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "failed to create CFNumber for mode", v23, 2u);
    }
    CFRelease(v6);
    return 0;
  }
  CFNumberRef v8 = v7;
  CFDictionarySetValue(v6, @"QueryMode", v7);
  uint64_t v9 = sub_19D710BBC(a1, 0);
  CFRelease(v6);
  CFRelease(v8);
  return v9;
}

void sub_19D71F610(uint64_t a1, const __CFArray *a2, uint64_t a3)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = sub_19D71F688;
  v3[3] = &unk_1E5962B98;
  v3[4] = *(void *)(a1 + 32);
  v3[5] = a3;
  sub_19D71D6AC(a2, (uint64_t)v3);
}

uint64_t sub_19D71F688(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), a2, *(void *)(a1 + 40));
}

CFNumberRef sub_19D71F69C(const __CFString *a1, const char **a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  CFNumberRef result = sub_19D717F48("IODeviceTree:/product", a1, 0);
  if (!result)
  {
    uint64_t v5 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v5) {
      uint64_t v11 = v5 + 1;
    }
    else {
      uint64_t v11 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog((uint64_t)v11, 6227, @"No %@ size defined. Assuming display size", v6, v7, v8, v9, v10, (char)a1);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      CFStringRef v13 = a1;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "No %@ size defined. Assuming display size", buf, 0xCu);
    }
    return (CFNumberRef)sub_19D710BBC(a2, 0);
  }
  return result;
}

CFStringRef sub_19D71F79C()
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  CFDataRef v0 = (const __CFData *)sub_19D710BBC((const char **)@"PxEDp0oOasJ92F/V7YBa8A", 0);
  unsigned int v1 = sub_19D718A00();
  if (v0) {
    BOOL v2 = v1 == 0;
  }
  else {
    BOOL v2 = 0;
  }
  if (v2)
  {
    if (CFDataGetLength(v0) > 16)
    {
      BytePtr = CFDataGetBytePtr(v0);
      CFStringRef v11 = CFStringCreateWithBytes(0, BytePtr, 17, 0x600u, 0);
      uint64_t v21 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v21) {
        uint64_t v27 = v21 + 1;
      }
      else {
        uint64_t v27 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      }
      _MGLog((uint64_t)v27, 8465, @"Copy ScreenSerialNumber: cfScreenSN %@", v22, v23, v24, v25, v26, (char)v11);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        CFIndex v30 = (CFIndex)v11;
        _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Copy ScreenSerialNumber: cfScreenSN %@", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v12 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      CFStringRef v13 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v13) {
        uint64_t v12 = v13 + 1;
      }
      char Length = CFDataGetLength(v0);
      _MGLog((uint64_t)v12, 8461, @"RawPanelSerialNumber Invalid Length: %ld", v15, v16, v17, v18, v19, Length);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        CFIndex v30 = CFDataGetLength(v0);
        _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "RawPanelSerialNumber Invalid Length: %ld", buf, 0xCu);
      }
      sub_19D711424(7);
      CFStringRef v11 = 0;
    }
    goto LABEL_23;
  }
  unsigned int v3 = v1;
  CFAllocatorRef v4 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v4) {
    uint64_t v10 = v4 + 1;
  }
  else {
    uint64_t v10 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  }
  _MGLog((uint64_t)v10, 8468, @"Failed Copy ScreenSerialNumber: cfScreenSN %@, error %d", v5, v6, v7, v8, v9, 0);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    CFIndex v30 = 0;
    __int16 v31 = 1024;
    unsigned int v32 = v3;
    _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Failed Copy ScreenSerialNumber: cfScreenSN %@, error %d", buf, 0x12u);
  }
  CFStringRef v11 = 0;
  if (v0) {
LABEL_23:
  }
    CFRelease(v0);
  return v11;
}

BOOL sub_19D71FA0C()
{
  return sub_19D7145C8("IODeviceTree:/product", @"ch7KBY7aSsznfICVzjFldw", 101);
}

CFNumberRef sub_19D71FA24()
{
  return sub_19D7140D0(6u);
}

CFTypeRef sub_19D71FA2C()
{
  return sub_19D7357B0(@"BackCameraModuleSerialNumString");
}

BOOL sub_19D71FA38(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"nWFV2qG2TjSuH7vZFCdi4w", a2);
}

BOOL sub_19D71FA60(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"nWFV2qG2TjSuH7vZFCdi4w", 82, a2);
}

uint64_t sub_19D71FA74()
{
  if (sub_19D7175F4((BOOL)@"M9")
    || sub_19D7175F4((BOOL)@"M10")
    || sub_19D7175F4((BOOL)@"H9")
    || sub_19D7175F4((BOOL)@"H10"))
  {
    return 0;
  }
  if (sub_19D7175F4((BOOL)@"H11") || sub_19D7175F4((BOOL)@"H12")) {
    return 1;
  }
  if (sub_19D716960((BOOL)@"H13")) {
    return 2;
  }
  return 0;
}

BOOL sub_19D71FB10()
{
  return sub_19D7145C8("IODeviceTree:/product/camera", @"vTKPWiAZkQifTv/4/uOnQQ", 102);
}

BOOL sub_19D71FB28()
{
  return sub_19D7145C8("IODeviceTree:/buttons", @"Ov9G2lRzQYbUyBYJ0KCMhA", 102);
}

uint64_t sub_19D71FB40()
{
  uint64_t result = sub_19D714D40();
  if (result != 1) {
    return sub_19D714D40() == 3;
  }
  return result;
}

BOOL sub_19D71FB6C()
{
  return sub_19D7145C8("IODeviceTree:/product/maps", @"1z6Kk4xUAVLdaBPGugsDSA", 110);
}

const void *sub_19D71FB84()
{
  return sub_19D71A230("IODeviceTree:/product/audio", @"EuGnCiDhD1LBnMc96k/GQQ", 115);
}

uint64_t sub_19D71FB9C()
{
  return 1;
}

uint64_t sub_19D71FBA4()
{
  if (MGGetBoolAnswer((const char **)@"sigsyX/a/CpMjoZnrgwIgg")) {
    return 1;
  }
  if (sub_19D714D40() == 7) {
    return 0;
  }
  if (!sub_19D7175F4((BOOL)@"H9"))
  {
    unsigned int v1 = MGGetStringAnswer((const char **)@"5pYKlGnYYBzGvAlIU8RjEQ");
    if (v1)
    {
      BOOL v2 = v1;
      BOOL v0 = CFEqual(v1, @"s8001") != 0;
      CFRelease(v2);
      return v0;
    }
    return 0;
  }
  return 1;
}

CFNumberRef sub_19D71FC30()
{
  int valuePtr = 0;
  CFNumberRef v0 = sub_19D717F48("IODeviceTree:/buttons", @"home-button-type", 0);
  if (v0)
  {
    CFNumberRef v1 = v0;
    if (!CFNumberGetValue(v0, kCFNumberSInt32Type, &valuePtr)) {
      int valuePtr = 0;
    }
    CFRelease(v1);
  }
  return CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
}

uint64_t sub_19D71FCAC()
{
  int v1 = 0;
  LODWORD(result) = sub_19D712B14((const char **)@"eW5H/Gwg0uqbMqFot70pYg", 5, 5, kCFNumberSInt32Type, &v1);
  if (v1 > 1) {
    return result;
  }
  else {
    return 0;
  }
}

uint64_t sub_19D71FCF4()
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (sub_19D714D40() == 7
    || sub_19D714D40() == 4
    || sub_19D714D40() == 3
    || sub_19D714D40() == 2
    || sub_19D714D40() == 1
    || sub_19D714D40() == 11
    || sub_19D714D40() == 8)
  {
    uint64_t v7 = MEMORY[0x1E4F1CFC8];
  }
  else
  {
    int v13 = 368885834;
    long long v12 = xmmword_19D779054;
    int v11 = -526227167;
    long long v10 = xmmword_19D77907C;
    int v9 = MGIsDeviceOneOfType((const UInt8 *)&v12, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v10);
    uint64_t v7 = MEMORY[0x1E4F1CFC8];
    if (!v9) {
      uint64_t v7 = MEMORY[0x1E4F1CFD0];
    }
  }
  return *(void *)v7;
}

BOOL sub_19D71FE00()
{
  return sub_19D712390("IODeviceTree:/chosen", @"E3qwwdwgUSy6FV6VC+Uf3A", 114);
}

uint64_t sub_19D71FE18()
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (sub_19D714D40() == 7
    || sub_19D714D40() == 4
    || sub_19D714D40() == 3
    || sub_19D714D40() == 2
    || sub_19D714D40() == 1
    || sub_19D714D40() == 11
    || sub_19D714D40() == 8)
  {
    uint64_t v7 = MEMORY[0x1E4F1CFC8];
  }
  else
  {
    int v13 = 368885834;
    long long v12 = xmmword_19D779054;
    int v11 = -526227167;
    long long v10 = xmmword_19D77907C;
    int v9 = MGIsDeviceOneOfType((const UInt8 *)&v12, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v10);
    uint64_t v7 = MEMORY[0x1E4F1CFC8];
    if (!v9) {
      uint64_t v7 = MEMORY[0x1E4F1CFD0];
    }
  }
  return *(void *)v7;
}

BOOL sub_19D71FF24()
{
  return sub_19D7145C8("IODeviceTree:/product/camera", @"ItOvlwIhFj2aCXL4wk3ijg", 102);
}

BOOL sub_19D71FF3C()
{
  return sub_19D7145C8("IODeviceTree:/product", @"2ViNo1fbaEkg2vdTmCiW7g", 112);
}

uint64_t sub_19D71FF54()
{
  int v0 = sub_19D7123B8("IODeviceTree:/product", @"multiuser-sessions", 0, 0, 1);
  uint64_t v1 = MEMORY[0x1E4F1CFC8];
  if (v0) {
    uint64_t v1 = MEMORY[0x1E4F1CFD0];
  }
  return *(void *)v1;
}

BOOL sub_19D71FFA4()
{
  if (sub_19D714D40() != 3) {
    return 0;
  }

  return sub_19D73A594(1, "AWCSMahiDeviceInfo");
}

CFNumberRef sub_19D71FFEC()
{
  return sub_19D717F48("IODeviceTree:/product/camera", @"IUvPFaILUl3l0684dR0AlA", 102);
}

CFTypeRef sub_19D720004()
{
  return sub_19D7128AC(1, "rose", @"ChipID");
}

BOOL sub_19D72001C(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"nhGhVMyvrWYe9U2ltAUImg", a2);
}

BOOL sub_19D720044(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"nhGhVMyvrWYe9U2ltAUImg", 65, a2);
}

BOOL sub_19D720058()
{
  return !sub_19D7145C8("IODeviceTree:/product", @"oTuH4/axV9s11/jKxB2z2A", 117);
}

CFNumberRef sub_19D720088()
{
  BOOL v2 = 0;
  if (sub_19D740514(@"edmd", &v2))
  {
    int v3 = 1;
    p_int valuePtr = &v3;
    return CFNumberCreate(0, kCFNumberSInt32Type, p_valuePtr);
  }
  if (v2)
  {
    int valuePtr = 0;
    p_int valuePtr = &valuePtr;
    return CFNumberCreate(0, kCFNumberSInt32Type, p_valuePtr);
  }
  return 0;
}

uint64_t sub_19D7200F0()
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  CFTypeRef v0 = sub_19D7128AC(0, "IOPMPowerSource", @"BatteryInstalled");
  if (v0)
  {
    uint64_t v1 = v0;
    CFTypeID TypeID = CFBooleanGetTypeID();
    if (TypeID == CFGetTypeID(v1))
    {
      if (CFBooleanGetValue((CFBooleanRef)v1))
      {
        CFRelease(v1);
        return 1;
      }
      uint64_t v20 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v20) {
        uint64_t v26 = v20 + 1;
      }
      else {
        uint64_t v26 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      }
      _MGLog((uint64_t)v26, 2982, @"BatteryInstalledKey: false", v21, v22, v23, v24, v25, v39);
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_21;
      }
      *(_WORD *)buf = 0;
      uint64_t v17 = MEMORY[0x1E4F14500];
      uint64_t v18 = "BatteryInstalledKey: false";
      uint32_t v19 = 2;
    }
    else
    {
      long long v10 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v10) {
        uint64_t v16 = v10 + 1;
      }
      else {
        uint64_t v16 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      }
      _MGLog((uint64_t)v16, 2985, @"Unsupported type %@ from copyIORegistryServiceProperty BatteryInstalledKey", v11, v12, v13, v14, v15, (char)v1);
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_21;
      }
      *(_DWORD *)buf = 138412290;
      uint64_t v42 = v1;
      uint64_t v17 = MEMORY[0x1E4F14500];
      uint64_t v18 = "Unsupported type %@ from copyIORegistryServiceProperty BatteryInstalledKey";
      uint32_t v19 = 12;
    }
    _os_log_impl(&dword_19D70E000, v17, OS_LOG_TYPE_DEFAULT, v18, buf, v19);
LABEL_21:
    CFRelease(v1);
    goto LABEL_22;
  }
  int v3 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v3) {
    int v9 = v3 + 1;
  }
  else {
    int v9 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  }
  _MGLog((uint64_t)v9, 2989, @"No PowerSource service property BatteryInstalledKey", v4, v5, v6, v7, v8, v39);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "No PowerSource service property BatteryInstalledKey", buf, 2u);
  }
LABEL_22:
  mach_port_t v27 = *MEMORY[0x1E4F2EEF0];
  CFDictionaryRef v28 = IOServiceMatching("AppleHDQGasGaugeControl");
  io_service_t MatchingService = IOServiceGetMatchingService(v27, v28);
  if (MatchingService)
  {
    IOObjectRelease(MatchingService);
    return 1;
  }
  __int16 v31 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v31) {
    uint64_t v37 = v31 + 1;
  }
  else {
    uint64_t v37 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  }
  _MGLog((uint64_t)v37, 2999, @"No service matching AppleHDQGasGaugeControl", v32, v33, v34, v35, v36, v40);
  BOOL v38 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (v38)
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "No service matching AppleHDQGasGaugeControl", buf, 2u);
    return 0;
  }
  return result;
}

BOOL sub_19D72039C()
{
  return *MEMORY[0x1E4F1CFD0] != 0;
}

__CFArray *sub_19D7203B4()
{
  return sub_19D73B62C(@"decoding");
}

CFStringRef sub_19D7203C0()
{
  CFDataRef v0 = (const __CFData *)sub_19D710BBC((const char **)@"eZS2J+wspyGxqNYZeZ/sbA", 0);
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  CFTypeID v2 = CFGetTypeID(v0);
  if (v2 != CFDataGetTypeID() || CFDataGetLength(v1) < 6) {
    goto LABEL_9;
  }
  CFIndex Length = CFDataGetLength(v1);
  BytePtr = CFDataGetBytePtr(v1);
  CFMutableStringRef Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, @"%02x", *BytePtr);
  if (Length >= 2)
  {
    CFIndex v6 = Length - 1;
    uint64_t v7 = (unsigned __int8 *)(BytePtr + 1);
    do
    {
      unsigned int v8 = *v7++;
      CFStringAppendFormat(Mutable, 0, @":%02x", v8);
      --v6;
    }
    while (v6);
  }
  if (Mutable)
  {
    CFStringRef Copy = CFStringCreateCopy(0, Mutable);
    CFRelease(Mutable);
  }
  else
  {
LABEL_9:
    CFStringRef Copy = 0;
  }
  CFRelease(v1);
  return Copy;
}

BOOL sub_19D7204E0(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"gI6iODv8MZuiP0IA+efJCw", a2);
}

BOOL sub_19D720508(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"gI6iODv8MZuiP0IA+efJCw", 87, a2);
}

CFNumberRef sub_19D72051C()
{
  return sub_19D717F48("IODeviceTree:/product/audio", @"7pq6UGJM2TaOP2brCspvyA", 97);
}

BOOL sub_19D720534()
{
  return sub_19D7145C8("IODeviceTree:/product/camera", @"PxLTGkQx9GkeYcJKOaZguA", 118);
}

CFNumberRef sub_19D72054C()
{
  return sub_19D717F48("IODeviceTree:/product/audio", @"jkRyJt34tZOjsO1YhVc0mw", 115);
}

CFNumberRef sub_19D720564()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  if (sub_19D714D40() == 4)
  {
    int valuePtr = 1;
    int v3 = 1839812531;
    long long v2 = xmmword_19D7789B0;
    if ((MGIsDeviceOfType((const UInt8 *)&v2) & 1) == 0) {
      int valuePtr = 2;
    }
    return CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  }
  else
  {
    return (CFNumberRef)sub_19D710BBC((const char **)@"SNfDJgQFV2Xj7+WnozcJPw", 0);
  }
}

BOOL sub_19D720640()
{
  return sub_19D7145C8("IODeviceTree:/product", @"MWpHV1VYKXmaKqhgbmTWCg", 112);
}

BOOL sub_19D720658()
{
  return sub_19D7145C8("IODeviceTree:/product/camera", @"KLB4sM/KC38QT+dTuDC/aA", 114);
}

const void *sub_19D720670()
{
  return sub_19D7393B4((unint64_t)@"ChipSerialNo", 0);
}

BOOL sub_19D720680(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"Nmhz54v5ZLqj2I4NPFIFqQ", a2);
}

BOOL sub_19D7206A8(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"Nmhz54v5ZLqj2I4NPFIFqQ", 66, a2);
}

BOOL sub_19D7206BC()
{
  return !sub_19D7145C8("IODeviceTree:/product", @"MvBKQ+GSnR3DjkovgNL+3w", 97);
}

BOOL sub_19D7206EC()
{
  return sub_19D7145C8("IODeviceTree:/product", @"JljZ8PqQJB8QlFC2NsgOPw", 101);
}

__CFString *sub_19D720704()
{
  if (sub_19D714D40() == 11) {
    return @"Apple Vision Pro";
  }

  return sub_19D719F48();
}

CFTypeRef sub_19D720744()
{
  if (!MGGetBoolAnswer((const char **)@"AJFQheZDyUbvI6RmBMT9Cg")) {
    return 0;
  }
  int v12 = -1;
  BOOL v0 = sub_19D712B14((const char **)@"XQBHOWjPt2P+uNqlLm1P7A", 5, 5, kCFNumberSInt32Type, &v12);
  CFTypeRef result = 0;
  if (v0 && v12 >= 2)
  {
    uint64_t v2 = *((void *)off_1E9449170 + 10);
    if (!v2) {
      uint64_t v2 = sub_19D71A930(10, 2);
    }
    CFTypeID TypeID = CFDictionaryGetTypeID();
    CFTypeRef result = sub_19D739338((uint64_t)"_CTServerConnectionCopyFirmwareSecurityInfo", v2, TypeID);
    if (!result)
    {
      uint64_t v4 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v4) {
        long long v10 = v4 + 1;
      }
      else {
        long long v10 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      }
      _MGLog((uint64_t)v10, 4883, @"_CTServerConnectionCopyFirmwareSecurityInfo returned NULL", v5, v6, v7, v8, v9, v11[0]);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v11 = 0;
        _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "_CTServerConnectionCopyFirmwareSecurityInfo returned NULL", v11, 2u);
      }
      return 0;
    }
  }
  return result;
}

__CFString *sub_19D720860()
{
  uint64_t v0 = sub_19D73E2D0(0x434C4347u);
  if (v0) {
    return (__CFString *)CFStringCreateWithFormat(0, 0, @"%d", v0);
  }
  if (MGGetBoolAnswer((const char **)@"XkfGVYlrkBQJgaGabHESJQ"))
  {
    return (__CFString *)sub_19D735850((const char **)@"8/tysfSvORoyVg9IE901oQ");
  }
  else
  {
    unsigned int v2 = sub_19D7358CC();
    if (v2 <= 8) {
      return *(&off_1E5962C28 + 2 * v2);
    }
    else {
      return @"unknown";
    }
  }
}

BOOL sub_19D720904()
{
  if (sub_19D714D40() != 1) {
    return (unint64_t)sub_19D719348() >> 33
  }
        && (sub_19D716960((BOOL)@"H14") || sub_19D71ACF0((BOOL)@"t8103", 0));
  return sub_19D716960((BOOL)@"H16") && (unint64_t)sub_19D719348() >> 33;
}

BOOL sub_19D720980()
{
  if (MGGetBoolAnswer((const char **)@"TTZrMo1OOEUELa7asaQ7xg")) {
    return 1;
  }

  return MGGetBoolAnswer((const char **)@"7W2eNk/f6uewC8N58mlRrQ");
}

uint64_t sub_19D7209C8()
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  memset(&v15, 0, 512);
  if (statfs("/private/var", &v15) != -1) {
    return LOBYTE(v15.f_flags) >> 7;
  }
  CFDataRef v1 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  unsigned int v2 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v2) {
    CFDataRef v1 = v2 + 1;
  }
  int v3 = __error();
  strerror(*v3);
  _MGLog((uint64_t)v1, 3737, @"Could not statfs %s: %s", v4, v5, v6, v7, v8, (char)"/private/var");
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = __error();
    long long v10 = strerror(*v9);
    *(_DWORD *)buf = 136315394;
    int v12 = "/private/var";
    __int16 v13 = 2080;
    uint64_t v14 = v10;
    _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Could not statfs %s: %s", buf, 0x16u);
  }
  sub_19D711424(6);
  return 0;
}

uint64_t sub_19D720B3C()
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (sub_19D714D40() != 6) {
    return 0;
  }
  int v11 = -1092155788;
  long long v10 = xmmword_19D778848;
  int v9 = 763775061;
  long long v8 = xmmword_19D77885C;
  return MGIsDeviceOneOfType((const UInt8 *)&v10, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v8);
}

const void *sub_19D720E4C()
{
  return sub_19D710BBC((const char **)@"oOV1jhJbdV3AddkcCg0AEA", 0);
}

uint64_t sub_19D720E5C()
{
  uint64_t v0 = (uint64_t (*)(void))*((void *)off_1E9449170 + 32);
  if (!v0) {
    uint64_t v0 = (uint64_t (*)(void))sub_19D71A930(32, 2);
  }

  return v0();
}

BOOL sub_19D720E9C(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"frZQaeyWLUvLjeuEK43hmg", a2);
}

BOOL sub_19D720EC4(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"frZQaeyWLUvLjeuEK43hmg", 73, a2);
}

uint64_t sub_19D720ED8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  int v14 = 1244490093;
  long long v13 = xmmword_19D778988;
  int v12 = 1377801277;
  long long v11 = xmmword_19D77899C;
  int v8 = MGIsDeviceOneOfType((const UInt8 *)&v13, a2, a3, a4, a5, a6, a7, a8, (uint64_t)&v11);
  uint64_t v9 = MEMORY[0x1E4F1CFD0];
  if (!v8) {
    uint64_t v9 = MEMORY[0x1E4F1CFC8];
  }
  return *(void *)v9;
}

uint64_t sub_19D720F84()
{
  uint64_t v0 = (const void *)sub_19D742FB8((uint64_t)"IODeviceTree:/arm-io", @"multi-touch", 0, @"force-supported", 0);
  if (!v0) {
    return *MEMORY[0x1E4F1CFC8];
  }
  uint64_t v1 = *MEMORY[0x1E4F1CFD0];
  CFRelease(v0);
  return v1;
}

__CFString *sub_19D720FEC()
{
  CFDataRef v0 = (const __CFData *)sub_19D743040((uint64_t)"IODeviceTree:", @"wlan", 0, @"wifi-module-sn", 0);
  if (!v0)
  {
    CFDataRef v1 = (const __CFData *)sub_19D7128AC(1, "AppleBCMWLANBusInterfacePCIe", @"wifi-module-sn");
    if (v1)
    {
      CFDataRef v0 = v1;
      CFTypeID TypeID = CFDataGetTypeID();
      if (TypeID == CFGetTypeID(v0))
      {
        CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
        BytePtr = CFDataGetBytePtr(v0);
        CFIndex Length = CFDataGetLength(v0);
        if (Length >= 1)
        {
          CFIndex v6 = Length;
          do
          {
            unsigned int v7 = *BytePtr++;
            CFStringAppendFormat(Mutable, 0, @"%02X", v7);
            --v6;
          }
          while (v6);
        }
LABEL_21:
        CFRelease(v0);
        return Mutable;
      }
      CFTypeID v15 = CFStringGetTypeID();
      if (v15 != CFGetTypeID(v0))
      {
        uint64_t v16 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
        if (v16) {
          uint64_t v22 = v16 + 1;
        }
        else {
          uint64_t v22 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
        }
        _MGLog((uint64_t)v22, 5975, @"Unsupported type.", v17, v18, v19, v20, v21, v24);
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t v25 = 0;
          _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Unsupported type.", v25, 2u);
        }
        CFMutableStringRef Mutable = 0;
        goto LABEL_21;
      }
    }
    else
    {
      int v8 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v8) {
        int v14 = v8 + 1;
      }
      else {
        int v14 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      }
      _MGLog((uint64_t)v14, 5961, @"Failed to retrieve data AppleBCMWLANBusInterfacePCIe:wifi-module-sn", v9, v10, v11, v12, v13, v24);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Failed to retrieve data AppleBCMWLANBusInterfacePCIe:wifi-module-sn", buf, 2u);
      }
      return 0;
    }
  }
  return (__CFString *)v0;
}

BOOL sub_19D7211F4(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"XrPbSCNx9X7Lyw9oGPgMDQ", a2);
}

BOOL sub_19D72121C(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"XrPbSCNx9X7Lyw9oGPgMDQ", 87, a2);
}

BOOL sub_19D721230()
{
  CFDataRef v0 = (uint64_t (*)(void))*((void *)off_1E9449170 + 1);
  if (!v0) {
    CFDataRef v0 = (uint64_t (*)(void))sub_19D71A930(1, 2);
  }
  CFArrayRef v1 = (const __CFArray *)v0();
  if (!v1) {
    return 0;
  }
  CFArrayRef v2 = v1;
  CFIndex Count = CFArrayGetCount(v1);
  uint64_t v4 = (const void **)*((void *)off_1E9449170 + 70);
  if (!v4) {
    uint64_t v4 = (const void **)sub_19D71A930(70, 1);
  }
  v7.CFIndex location = 0;
  v7.length = Count;
  BOOL v5 = CFArrayContainsValue(v2, v7, *v4) != 0;
  CFRelease(v2);
  return v5;
}

uint64_t sub_19D7212CC()
{
  uint64_t v0 = *MEMORY[0x1E4F1CFC8];
  CFArrayRef v1 = (const void *)sub_19D713080();
  if (v1)
  {
    CFArrayRef v2 = v1;
    if (!CFEqual(v1, @"AppleTV")
      && !CFEqual(v2, @"Watch")
      && (sub_19D7175F4((BOOL)@"H8") || sub_19D7175F4((BOOL)@"H9")
                                             || sub_19D7175F4((BOOL)@"H10")))
    {
      uint64_t v0 = *MEMORY[0x1E4F1CFD0];
    }
    CFRelease(v2);
  }
  return v0;
}

CFNumberRef sub_19D72136C()
{
  return sub_19D717F48("IODeviceTree:/product/camera", @"lvmEUCUwik8sO0yGU1rBOA", 114);
}

CFNumberRef sub_19D721384()
{
  return sub_19D717F48("IODeviceTree:/product/camera", @"smT9LjRW3acTT7WTS/XqyQ", 102);
}

uint64_t sub_19D72139C()
{
  uint64_t v0 = (uint64_t (*)(void))*((void *)off_1E9449170 + 45);
  if (!v0) {
    uint64_t v0 = (uint64_t (*)(void))sub_19D71A930(45, 2);
  }

  return v0();
}

CFDataRef sub_19D7213DC()
{
  memset(v1, 0, sizeof(v1));
  if (sub_19D7359F8((uint64_t)v1)) {
    return CFDataCreate(0, (const UInt8 *)v1, 32);
  }
  else {
    return 0;
  }
}

CFStringRef sub_19D721424()
{
  return sub_19D717CB4("IODeviceTree:/product", @"5iilxso47rYJZGnXklkYYg", 102);
}

BOOL sub_19D72143C()
{
  return !sub_19D7145C8("IODeviceTree:/product", @"TucF/tpjeAln1I0f3g0K3w", 100);
}

uint64_t sub_19D72146C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  int v55 = 28030256;
  long long v54 = xmmword_19D778C58;
  int v53 = 1214363620;
  long long v52 = xmmword_19D778C6C;
  if (MGIsDeviceOneOfType((const UInt8 *)&v54, a2, a3, a4, a5, a6, a7, a8, (uint64_t)&v52)) {
    goto LABEL_5;
  }
  int v51 = 886875686;
  long long v50 = xmmword_19D77916C;
  int v49 = -489993439;
  long long v48 = xmmword_19D779158;
  int v47 = -1403227947;
  long long v46 = xmmword_19D779108;
  int v45 = 729118884;
  long long v44 = xmmword_19D77911C;
  int v43 = 1046806126;
  long long v42 = xmmword_19D779130;
  int v41 = -188760945;
  long long v40 = xmmword_19D779144;
  if (MGIsDeviceOneOfType((const UInt8 *)&v50, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v48)) {
    goto LABEL_5;
  }
  int v39 = -798153473;
  long long v38 = xmmword_19D778AC8;
  int v37 = -776721724;
  long long v36 = xmmword_19D778ADC;
  if (MGIsDeviceOneOfType((const UInt8 *)&v38, v15, v16, v17, v18, v19, v20, v21, (uint64_t)&v36)
    || (int v35 = -38605833,
        long long v34 = xmmword_19D778C08,
        int v33 = -894965712,
        long long v32 = xmmword_19D778C1C,
        MGIsDeviceOneOfType((const UInt8 *)&v34, v22, v23, v24, v25, v26, v27, v28, (uint64_t)&v32)))
  {
LABEL_5:
    uint64_t v29 = MEMORY[0x1E4F1CFC8];
  }
  else
  {
    int v31 = sub_19D714D40();
    uint64_t v29 = MEMORY[0x1E4F1CFC8];
    if (v31 == 1) {
      uint64_t v29 = MEMORY[0x1E4F1CFD0];
    }
  }
  return *(void *)v29;
}

BOOL sub_19D7216E8()
{
  return sub_19D712390("IODeviceTree:/chosen", @"GnhnHyRVCC8LUClgElhKXA", 101);
}

CFNumberRef sub_19D721700()
{
  if (sub_19D714D40() != 1) {
    return 0;
  }
  int valuePtr = 1050253722;
  return CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
}

const void *sub_19D72174C()
{
  return sub_19D7393B4((unint64_t)@"ChipID", 0);
}

BOOL sub_19D72175C(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"eNgz35a7iZnVeEMwsBQZew", a2);
}

BOOL sub_19D721784(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"eNgz35a7iZnVeEMwsBQZew", 66, a2);
}

const void *sub_19D721798()
{
  return sub_19D710BBC((const char **)@"E9a3UzlfYjWEB9viQCHNAA", 0);
}

CFTypeRef sub_19D7217A8()
{
  uint64_t v0 = *((void *)off_1E9449170 + 12);
  if (!v0) {
    uint64_t v0 = sub_19D71A930(12, 2);
  }
  CFTypeID TypeID = CFStringGetTypeID();

  return sub_19D739338((uint64_t)"_CTServerConnectionCopyFirmwareVersion", v0, TypeID);
}

BOOL sub_19D721808()
{
  return sub_19D7145C8("IODeviceTree:/product/audio", @"i6wlxJoKNXBiVXJHJ1EHBg", 115);
}

BOOL sub_19D721820()
{
  return sub_19D7145C8("IODeviceTree:/product", @"VrWzQGQK9Fbp/RqeQ08VzA", 99);
}

uint64_t sub_19D721838()
{
  return 0;
}

BOOL sub_19D721840()
{
  return sub_19D7145C8("IODeviceTree:/product", @"P1uSdgM/fIttMsA/+q6k4w", 119);
}

BOOL sub_19D721858()
{
  return sub_19D7145C8("IODeviceTree:/product", @"Wft7kODl9Y2uX/sb47GoEA", 115);
}

uint64_t sub_19D721870()
{
  uint64_t result = sub_19D714D40();
  if (result != 1) {
    return sub_19D714D40() == 3;
  }
  return result;
}

const void *sub_19D72189C()
{
  CFDictionaryRef v0 = (const __CFDictionary *)_CFCopySupplementalVersionDictionary();

  return sub_19D71D520(v0, @"ProductBuildVersion", 1);
}

BOOL sub_19D7218D0()
{
  return sub_19D712390("IODeviceTree:/product", @"fucd7llSuoCNHrrvLS1QQg", 119);
}

CFTypeRef sub_19D7218E8()
{
  return sub_19D735FA8(@"SavageUID");
}

BOOL sub_19D7218F4(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"FNvQ6lBvJIUcYBzQ8ggOUQ", a2);
}

BOOL sub_19D72191C(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"FNvQ6lBvJIUcYBzQ8ggOUQ", 83, a2);
}

__CFArray *sub_19D721930()
{
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableStringRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  switch(sub_19D714D40())
  {
    case 1u:
    case 2u:
      int v2 = 1;
      goto LABEL_13;
    case 3u:
    case 9u:
      *(_DWORD *)uint64_t v15 = 1;
      CFNumberRef v3 = CFNumberCreate(v0, kCFNumberIntType, v15);
      CFArrayAppendValue(Mutable, v3);
      CFRelease(v3);
      int v2 = 2;
      goto LABEL_13;
    case 4u:
      int v2 = 3;
      goto LABEL_13;
    case 6u:
      int v2 = 4;
      goto LABEL_13;
    case 7u:
      int v2 = 5;
      goto LABEL_13;
    case 0xBu:
      *(_DWORD *)uint64_t v15 = 1;
      CFNumberRef v11 = CFNumberCreate(v0, kCFNumberIntType, v15);
      CFArrayAppendValue(Mutable, v11);
      CFRelease(v11);
      *(_DWORD *)uint64_t v15 = 2;
      CFNumberRef v12 = CFNumberCreate(v0, kCFNumberIntType, v15);
      CFArrayAppendValue(Mutable, v12);
      CFRelease(v12);
      int v2 = 7;
LABEL_13:
      *(_DWORD *)uint64_t v15 = v2;
      CFNumberRef v13 = CFNumberCreate(v0, kCFNumberIntType, v15);
      CFArrayAppendValue(Mutable, v13);
      CFRelease(v13);
      break;
    default:
      uint64_t v4 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v4) {
        uint64_t v10 = v4 + 1;
      }
      else {
        uint64_t v10 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      }
      _MGLog((uint64_t)v10, 3080, @"Could not determine DTProductType", v5, v6, v7, v8, v9, v15[0]);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v15 = 0;
        _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Could not determine DTProductType", v15, 2u);
      }
      break;
  }
  return Mutable;
}

uint64_t sub_19D721B38()
{
  return sub_19D742F30((uint64_t)"IODeviceTree:/arm-io", @"4k6Wv56SWfITjzet+hIHMQ", 109, @"8kcKPCGGyCpf66MMl5TVkA", 109);
}

CFTypeRef sub_19D721B5C()
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  CFTypeRef v44 = 0;
  CFTypeRef cf = 0;
  if (qword_1E9449450 != -1) {
    dispatch_once(&qword_1E9449450, &unk_1EEF8FC60);
  }
  if (off_1E9449460) {
    BOOL v0 = off_1E9449458 == 0;
  }
  else {
    BOOL v0 = 1;
  }
  if (!v0 && off_1E9449468 != 0)
  {
    int v10 = off_1E9449468(0, 0);
    CFTypeRef v9 = 0;
    if (v10 == 1) {
      goto LABEL_53;
    }
    CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFNumberRef v12 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
    CFNumberRef v13 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
    CFMutableStringRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFMutableDictionaryRef v15 = CFDictionaryCreateMutable(v11, 0, v12, v13);
    CFMutableDictionaryRef v16 = v15;
    if (Mutable) {
      BOOL v17 = v15 == 0;
    }
    else {
      BOOL v17 = 1;
    }
    if (v17)
    {
      uint64_t v18 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v18) {
        uint64_t v24 = v18 + 1;
      }
      else {
        uint64_t v24 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      }
      _MGLog((uint64_t)v24, 7633, @"Unable to create options and savageOptions", v19, v20, v21, v22, v23, v43);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Unable to create options and savageOptions", buf, 2u);
      }
      sub_19D711424(8);
      CFTypeRef v9 = 0;
      uint64_t v25 = 0;
      if (!Mutable) {
        goto LABEL_49;
      }
    }
    else
    {
      CFDictionarySetValue(Mutable, @"Options", v15);
      uint64_t v26 = off_1E9449458(Mutable, 0, "Savage", &v44);
      if (v26)
      {
        uint64_t v25 = (const void *)v26;
        if (off_1E9449460(v26, @"queryInfo", 0, &cf, &v44)) {
          BOOL v27 = cf == 0;
        }
        else {
          BOOL v27 = 1;
        }
        if (v27)
        {
          uint64_t v28 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
          if (v28) {
            long long v34 = v28 + 1;
          }
          else {
            long long v34 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
          }
          _MGLog((uint64_t)v34, 7647, @"SavageUpdaterExecCmd failed: %@", v29, v30, v31, v32, v33, (char)v44);
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            CFTypeRef v47 = v44;
            _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "SavageUpdaterExecCmd failed: %@", buf, 0xCu);
          }
          CFTypeRef v9 = 0;
        }
        else
        {
          CFTypeRef v9 = CFRetain(cf);
        }
      }
      else
      {
        int v35 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
        if (v35) {
          int v41 = v35 + 1;
        }
        else {
          int v41 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
        }
        _MGLog((uint64_t)v41, 7641, @"SavageUpdaterCreate failed: %@", v36, v37, v38, v39, v40, (char)v44);
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          CFTypeRef v47 = v44;
          _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "SavageUpdaterCreate failed: %@", buf, 0xCu);
        }
        sub_19D711424(8);
        CFTypeRef v9 = 0;
        uint64_t v25 = 0;
      }
    }
    CFRelease(Mutable);
LABEL_49:
    if (v16) {
      CFRelease(v16);
    }
    if (v25) {
      CFRelease(v25);
    }
    goto LABEL_53;
  }
  int v2 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v2) {
    uint64_t v8 = v2 + 1;
  }
  else {
    uint64_t v8 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  }
  _MGLog((uint64_t)v8, 7622, @"Unable to dlsym() Savage symbols", v3, v4, v5, v6, v7, v43);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Unable to dlsym() Savage symbols", buf, 2u);
  }
  CFTypeRef v9 = 0;
LABEL_53:
  if (v44)
  {
    CFRelease(v44);
    CFTypeRef v44 = 0;
  }
  if (cf) {
    CFRetain(cf);
  }
  return v9;
}

BOOL sub_19D721F4C(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"Fhqq6Bhy/XnCEBRAe3TI+g", a2);
}

BOOL sub_19D721F74(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"Fhqq6Bhy/XnCEBRAe3TI+g", 83, a2);
}

BOOL sub_19D721F88()
{
  return sub_19D712390("IODeviceTree:/product", @"Zg7DduDoSCy6vY6mhy3n2w", 105);
}

BOOL sub_19D721FA0(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"nFRqKto/RuQAV1P+0/qkBA", 85, a2);
}

uint64_t sub_19D721FB4()
{
  BOOL v0 = sub_19D7145C8("IODeviceTree:/product", @"display-mirroring", 0);
  uint64_t v1 = MEMORY[0x1E4F1CFD0];
  if (!v0) {
    uint64_t v1 = MEMORY[0x1E4F1CFC8];
  }
  return *(void *)v1;
}

CFStringRef sub_19D721FFC()
{
  return sub_19D717CB4("IODeviceTree:/product", @"BGIXXp6VsbLlQg+8+0sBAA", 99);
}

CFNumberRef sub_19D722014()
{
  return sub_19D717F48("IODeviceTree:/product", @"UYZtXbMcIyMRZQ9pjDxRvA", 117);
}

uint64_t sub_19D72202C()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2000000000;
  uint64_t v7 = 0;
  CFDictionaryRef v0 = IOBSDNameMatching(*MEMORY[0x1E4F2EEF0], 0, "disk0");
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = sub_19D7360FC;
  v3[3] = &unk_1E5962CF8;
  v3[4] = &v4;
  sub_19D73A45C(v0, (uint64_t)v3);
  uint64_t v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

CFStringRef sub_19D7220EC()
{
  return sub_19D717CB4("IODeviceTree:/product", @"Qt+S0J/SXrcfymyfJWvCCQ", 114);
}

BOOL sub_19D722104(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"O8mk69g6k/CbfeET9LtqQA", a2);
}

BOOL sub_19D72212C(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"O8mk69g6k/CbfeET9LtqQA", 82, a2);
}

BOOL sub_19D722140()
{
  return sub_19D712390("IODeviceTree:/product", @"ZrKzmIA8JSV7qJtGrX3yIw", 101);
}

uint64_t sub_19D722158()
{
  return sub_19D742EA0((uint64_t)"IODeviceTree:", @"RaX3KBmG7H9fUOEtLK/I6w", 115, @"edlvEg0UXOGErRDpk7O5Fg", 99);
}

BOOL sub_19D72217C()
{
  return sub_19D7145C8("IODeviceTree:/product/camera", @"IMlsLCL69XUZau9QyPnxeQ", 114);
}

BOOL sub_19D722194()
{
  return sub_19D7145C8("IODeviceTree:/product", @"lUryPpLkvlffpEKiNnEchA", 115);
}

BOOL sub_19D7221AC()
{
  return sub_19D7145C8("IODeviceTree:/product", @"n/G0fQIQiom+pb4tHA4Mmw", 100);
}

BOOL sub_19D7221C4()
{
  return sub_19D7145C8("IODeviceTree:/product/camera", @"yPSUYPhrVLHnvX0TUugiwg", 114);
}

uint64_t sub_19D7221DC()
{
  return (unsigned __int16)sub_19D73B274(1, "sgx", @"opengl-standard", 768) << 8;
}

BOOL sub_19D722210()
{
  return sub_19D7145C8("IODeviceTree:/product/maps", @"LXP9TbNYtZrIKOktGXez2Q", 51);
}

uint64_t sub_19D722228(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  int v14 = -38605833;
  long long v13 = xmmword_19D778C08;
  int v12 = -894965712;
  long long v11 = xmmword_19D778C1C;
  if ((MGIsDeviceOneOfType((const UInt8 *)&v13, a2, a3, a4, a5, a6, a7, a8, (uint64_t)&v11) & 1) != 0
    || sub_19D714D40() == 4
    || sub_19D714D40() == 6
    || sub_19D714D40() == 3)
  {
    uint64_t v8 = MEMORY[0x1E4F1CFC8];
  }
  else
  {
    int v10 = sub_19D714D40();
    uint64_t v8 = MEMORY[0x1E4F1CFC8];
    if (v10 != 2 && sub_19D714D40() != 11) {
      uint64_t v8 = MEMORY[0x1E4F1CFD0];
    }
  }
  return *(void *)v8;
}

uint64_t sub_19D722320()
{
  return 1;
}

BOOL sub_19D722328()
{
  return sub_19D712390("IODeviceTree:/product", @"MlDJggkQz38CLQh3AVv7VQ", 115);
}

BOOL sub_19D722340()
{
  return sub_19D711FD4(@"EUVolumeLimit", @"RegionalBehaviorEUVolumeLimit");
}

BOOL sub_19D722354()
{
  return sub_19D7145C8("IODeviceTree:/product", @"l1MfXa14uBR9cvO8D9wc9w", 117);
}

__CFString *sub_19D72236C()
{
  unsigned int v3 = 0;
  if (sub_19D712B14((const char **)@"NJsxTSI2WuD+13rxShXX9w", 5, 5, kCFNumberSInt32Type, &v3) && v3 != 0) {
    return (__CFString *)CFStringCreateWithFormat(0, 0, @"%d", v3);
  }
  if (MGGetBoolAnswer((const char **)@"XkfGVYlrkBQJgaGabHESJQ")) {
    return (__CFString *)sub_19D735850((const char **)@"TXZxlSojLMQyLqusm9aa/g");
  }
  unsigned int v2 = sub_19D736168();
  if (v2 <= 8) {
    return *(&off_1E5962C28 + 2 * v2);
  }
  else {
    return @"unknown";
  }
}

CFNumberRef sub_19D72241C()
{
  return sub_19D717F48("IODeviceTree:/product/facetime", @"S5Bf9bF00BTHrySCydAkdg", 98);
}

const void *sub_19D722434()
{
  if (MGGetBoolAnswer((const char **)@"AJFQheZDyUbvI6RmBMT9Cg"))
  {
    return sub_19D71A230("IODeviceTree:/baseband", @"function-bb_ap_time_sync", 0);
  }
  else
  {
    return (const void *)sub_19D742FB8((uint64_t)"IODeviceTree:", @"gps", 0, @"function-gps_time-mark", 0);
  }
}

BOOL sub_19D7224B4()
{
  return sub_19D7145C8("IODeviceTree:/product", @"b/KizANb5o/dWqSP2GC23g", 112);
}

BOOL sub_19D7224CC()
{
  return sub_19D712390("IODeviceTree:/product/haptics", @"XKpK5v7PGzbe7igjloNBpQ", 99);
}

CFDataRef sub_19D7224E4()
{
  if (!MGGetBoolAnswer((const char **)@"8DHlxr5ECKhTSL3HmlZQGQ")
    && (CFDataRef v0 = (const __CFData *)sub_19D73A888("fillmore")) != 0
    || (CFDataRef v0 = sub_19D72297C()) != 0)
  {
    if (CFDataGetLength(v0) == 6)
    {
      char v14 = 0;
      *(_WORD *)buffer = 0;
      *(_WORD *)bytes = -257;
      CFMutableStringRef Mutable = CFDataCreateMutable(0, 0);
      v15.CFIndex location = 0;
      v15.length = 3;
      CFDataGetBytes(v0, v15, buffer);
      CFDataAppendBytes(Mutable, buffer, 3);
      char v14 = 0;
      *(_WORD *)buffer = 0;
      CFDataAppendBytes(Mutable, bytes, 2);
      v16.CFIndex location = 3;
      v16.length = 3;
      CFDataGetBytes(v0, v16, buffer);
      CFDataAppendBytes(Mutable, buffer, 3);
      CFDataRef Copy = CFDataCreateCopy(0, Mutable);
      CFRelease(v0);
      if (Mutable) {
        CFRelease(Mutable);
      }
      return Copy;
    }
    else if (CFDataGetLength(v0) != 8)
    {
      unsigned int v3 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      uint64_t v4 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v4) {
        unsigned int v3 = v4 + 1;
      }
      char Length = CFDataGetLength(v0);
      _MGLog((uint64_t)v3, 1596, @"TMAC address has unexpected length %zu", v6, v7, v8, v9, v10, Length);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT)) {
        sub_19D76F2B0(v0);
      }
    }
  }
  return v0;
}

BOOL sub_19D72266C(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"yF2IQrYS4yyREV4ZkbLysw", a2);
}

BOOL sub_19D722694(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"yF2IQrYS4yyREV4ZkbLysw", 84, a2);
}

BOOL sub_19D7226A8()
{
  return sub_19D714D40() != 7 && sub_19D714D40() != 11;
}

BOOL sub_19D7226DC()
{
  return sub_19D711FD4(@"VolumeLimit", @"RegionalBehaviorVolumeLimit");
}

CFStringRef sub_19D7226F0()
{
  return sub_19D712710(1, "baseband", @"baseband-board-snum");
}

BOOL sub_19D722708(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"ToJGxfcjkIerYyeL2e8c4A", a2);
}

BOOL sub_19D722730(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"ToJGxfcjkIerYyeL2e8c4A", 66, a2);
}

const void *sub_19D722744()
{
  CFDictionaryRef v0 = (const __CFDictionary *)sub_19D710BBC((const char **)@"qOwiNS0eFEq9oi3MNsgxWg", 0);
  if (!v0) {
    return 0;
  }
  CFDictionaryRef v1 = v0;
  CFPropertyListRef Value = CFDictionaryGetValue(v0, @"Nonce");
  unsigned int v3 = Value;
  if (Value) {
    CFRetain(Value);
  }
  CFRelease(v1);
  return v3;
}

BOOL sub_19D7227A8()
{
  return sub_19D714D40() != 4;
}

uint64_t sub_19D7227C8()
{
  return *MEMORY[0x1E4F1CFC8];
}

uint64_t sub_19D7227D8()
{
  unint64_t v0 = sub_19D719348();
  uint64_t v1 = MEMORY[0x1E4F1CFD0];
  if (v0 <= 0x40000000) {
    uint64_t v1 = MEMORY[0x1E4F1CFC8];
  }
  return *(void *)v1;
}

CFNumberRef sub_19D722810()
{
  return sub_19D717F48("IODeviceTree:/chosen", @"QD3Nde07fjdK0R0KTbczEA", 98);
}

__CFString *sub_19D722828()
{
  CFDataRef v0 = sub_19D716A48();

  return sub_19D712030(v0);
}

BOOL sub_19D722850(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"RNcdWbM8+dO5tx82A+YCcQ", a2);
}

BOOL sub_19D722878(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"RNcdWbM8+dO5tx82A+YCcQ", 80, a2);
}

BOOL sub_19D72288C()
{
  return sub_19D714D40() != 4;
}

CFTypeRef sub_19D7228AC()
{
  uint64_t v0 = *((void *)off_1E9449170 + 7);
  if (!v0) {
    uint64_t v0 = sub_19D71A930(7, 2);
  }
  CFTypeID TypeID = CFDictionaryGetTypeID();

  return sub_19D739338((uint64_t)"_CTServerConnectionCopyFirmwareManifestData", v0, TypeID);
}

BOOL sub_19D72290C()
{
  float v3 = 0.0;
  BOOL v0 = sub_19D712B14((const char **)@"main-screen-scale", 7, 7, kCFNumberFloat32Type, &v3);
  float v1 = v3;
  if (!v0) {
    float v1 = 0.0;
  }
  return v1 > 1.0;
}

BOOL sub_19D722964()
{
  return sub_19D712390("IODeviceTree:/product/camera", @"DCy89X5oErFAps95GX38mQ", 108);
}

CFDataRef sub_19D72297C()
{
  CFDataRef v0 = (const __CFData *)sub_19D742FB8((uint64_t)"IODeviceTree", @"fillmore", 0, @"local-mac-address", 0);
  if (v0
    || (CFDataRef v0 = (const __CFData *)sub_19D742FB8((uint64_t)"IODeviceTree", @"wlan", 0, @"local-mac-address", 0)) != 0)
  {
    CFIndex Length = CFDataGetLength(v0);
    CFRelease(v0);
  }
  else
  {
    CFIndex Length = 8;
  }

  return sub_19D73E07C(0x544D6163u, Length);
}

BOOL sub_19D722A28(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"lU5WxNTusw4lrrBSEBiZeQ", a2);
}

BOOL sub_19D722A50(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"lU5WxNTusw4lrrBSEBiZeQ", 84, a2);
}

CFNumberRef sub_19D722A64()
{
  return sub_19D717F48("IODeviceTree:/product/camera", @"lY6RKv6ri6kfBeJCWilmmQ", 102);
}

CFDataRef sub_19D722A7C()
{
  return sub_19D73BAD8("AppleSEPManager", 0x2Au, 0, 0, 0x8000uLL);
}

BOOL sub_19D722A98(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"r5pA2qLgR86BQKwgMjPWzg", a2);
}

BOOL sub_19D722AC0(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"r5pA2qLgR86BQKwgMjPWzg", 76, a2);
}

BOOL sub_19D722AD4()
{
  return sub_19D7145C8("IODeviceTree:/product", @"9Bp5z20HsA1f7dqvelXKXA", 115);
}

BOOL sub_19D722AEC()
{
  BOOL result = sub_19D716960((BOOL)@"H15");
  if (result) {
    return !sub_19D71ACF0((BOOL)@"t8120", 0);
  }
  return result;
}

uint64_t sub_19D722B24()
{
  return *MEMORY[0x1E4F1CFC8];
}

uint64_t sub_19D722B34()
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (sub_19D7175F4((BOOL)@"H6")
    || sub_19D714D40() == 4
    || sub_19D714D40() == 6
    || sub_19D714D40() == 2
    || sub_19D714D40() == 7
    || sub_19D7175F4((BOOL)@"H8")
    || sub_19D7175F4((BOOL)@"H7")
    || sub_19D7175F4((BOOL)@"H9"))
  {
    uint64_t v7 = MEMORY[0x1E4F1CFC8];
  }
  else
  {
    int v13 = 414393924;
    long long v12 = xmmword_19D7791D0;
    int v11 = 897736383;
    long long v10 = xmmword_19D7791E4;
    int v9 = MGIsDeviceOneOfType((const UInt8 *)&v12, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v10);
    uint64_t v7 = MEMORY[0x1E4F1CFC8];
    if (!v9) {
      uint64_t v7 = MEMORY[0x1E4F1CFD0];
    }
  }
  return *(void *)v7;
}

CFTypeRef sub_19D722C5C()
{
  CFTypeRef v0 = sub_19D7128AC(1, "als", @"prox-calibration");
  if (!v0)
  {
LABEL_4:
    CFTypeRef v1 = sub_19D7128AC(1, "multi-touch", @"prox-calibration");
    if (!v1) {
      goto LABEL_8;
    }
    goto LABEL_5;
  }
  CFTypeRef v1 = v0;
  CFTypeID v2 = CFGetTypeID(v0);
  if (v2 != CFDataGetTypeID())
  {
    CFRelease(v1);
    goto LABEL_4;
  }
LABEL_5:
  CFTypeID v3 = CFGetTypeID(v1);
  if (v3 == CFDataGetTypeID()) {
    return v1;
  }
  CFRelease(v1);
LABEL_8:

  return sub_19D7128AC(1, "prox", @"prox-calibration");
}

BOOL sub_19D722D28(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"6UUmcaeT7rJoyUVmoPJd4A", a2);
}

BOOL sub_19D722D50(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"6UUmcaeT7rJoyUVmoPJd4A", 80, a2);
}

CFStringRef sub_19D722D64()
{
  return sub_19D717CB4("IODeviceTree:/product", @"MfLtAGqrSIJgBHzuir/DoA", 99);
}

BOOL sub_19D722D7C(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"OWi11Urd09rDmPVy1z5dOQ", a2);
}

BOOL sub_19D722DA4(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"OWi11Urd09rDmPVy1z5dOQ", 67, a2);
}

CFNumberRef sub_19D722DB8()
{
  return sub_19D717F48("IODeviceTree:/product/camera", @"oxH8p7+EaUzhkc2edrXsQQ", 97);
}

uint64_t sub_19D722DD0()
{
  return sub_19D73E2D0(0x434C4347u);
}

const void *sub_19D722DE0()
{
  return sub_19D710BBC((const char **)@"9s45ldrCC1WF+7b6C4H2BA", 0);
}

__CFString *sub_19D722DF0()
{
  CFTypeRef v0 = sub_19D71ADD8();
  CFTypeRef v1 = v0;
  if (v0) {
    CFRetain(v0);
  }
  return v1;
}

BOOL sub_19D722E24()
{
  return sub_19D712390("IODeviceTree:/chosen", @"nudr7/i2XcxAX6widrWShg", 99);
}

CFTypeRef sub_19D722E3C()
{
  uint64_t v0 = *((void *)off_1E9449170 + 8);
  if (!v0) {
    uint64_t v0 = sub_19D71A930(8, 2);
  }
  CFTypeID TypeID = CFDictionaryGetTypeID();

  return sub_19D739338((uint64_t)"_CTServerConnectionCopyFirmwareManifestStatus", v0, TypeID);
}

BOOL sub_19D722E9C()
{
  return sub_19D712390("IODeviceTree:/product", @"LDmYwbIay7HexqftCTLDNg", 114);
}

const void *sub_19D722EB4()
{
  CFDictionaryRef v0 = (const __CFDictionary *)sub_19D743150(0, @"AppleLisaHIDEventDriver", 0, @"HIDEventServiceProperties", 0);
  if (v0)
  {
    CFDictionaryRef v1 = v0;
    CFTypeID v2 = CFGetTypeID(v0);
    if (v2 == CFDictionaryGetTypeID())
    {
      CFPropertyListRef Value = CFDictionaryGetValue(v1, @"RotateToWakeSupported");
      uint64_t v4 = Value;
      if (!Value)
      {
LABEL_7:
        CFRelease(v1);
        goto LABEL_9;
      }
      CFTypeID v5 = CFGetTypeID(Value);
      if (v5 == CFBooleanGetTypeID())
      {
        CFRetain(v4);
        goto LABEL_7;
      }
    }
    uint64_t v4 = 0;
    goto LABEL_7;
  }
  uint64_t v4 = 0;
LABEL_9:
  if (v4) {
    return v4;
  }
  else {
    return (const void *)*MEMORY[0x1E4F1CFC8];
  }
}

BOOL sub_19D722F78()
{
  return sub_19D7145C8("IODeviceTree:/product", @"RyXm3yMC4ejlFvwlEI509w", 104);
}

uint64_t sub_19D722F90()
{
  uint64_t v0 = *MEMORY[0x1E4F1CFC8];
  if (sub_19D714D40() == 3
    && !sub_19D7175F4((BOOL)@"H4")
    && !sub_19D7175F4((BOOL)@"H5")
    && !sub_19D7175F4((BOOL)@"H6")
    && sub_19D710358() > 0x773593FFFLL)
  {
    return *MEMORY[0x1E4F1CFD0];
  }
  return v0;
}

BOOL sub_19D72301C()
{
  if (sub_19D714D40() != 3 || (unint64_t)sub_19D719348() >> 31 < 3) {
    return 0;
  }

  return sub_19D716960((BOOL)@"H13");
}

CFNumberRef sub_19D723070()
{
  return sub_19D717F48("IODeviceTree:/product", @"7qHcAWI5X9b1SiyYIg/Byw", 117);
}

CFNumberRef sub_19D723088()
{
  if (!sub_19D7175F4((BOOL)@"H6")
    && !sub_19D7175F4((BOOL)@"H8")
    && !sub_19D7175F4((BOOL)@"H5")
    && !sub_19D7175F4((BOOL)@"H7")
    && !sub_19D7175F4((BOOL)@"H9")
    && sub_19D714D40() != 4
    && sub_19D714D40() != 6)
  {
    sub_19D7175F4((BOOL)@"H4");
  }
  int valuePtr = 1065353216;
  return CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
}

uint64_t sub_19D723130()
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if (sub_19D714D40() == 1 || sub_19D714D40() == 2 || sub_19D714D40() == 3)
  {
    int v41 = -350584140;
    long long v40 = xmmword_19D779180;
    int v39 = 368778837;
    long long v38 = xmmword_19D7791A8;
    int v37 = -1418383976;
    long long v36 = xmmword_19D779194;
    int v35 = -1213485500;
    long long v34 = xmmword_19D7791BC;
    if (MGIsDeviceOneOfType((const UInt8 *)&v40, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v38)
      || (int v33 = 897736383,
          long long v32 = xmmword_19D7791E4,
          int v31 = -453987047,
          long long v30 = xmmword_19D77920C,
          int v29 = 450980336,
          long long v28 = xmmword_19D779234,
          MGIsDeviceOneOfType((const UInt8 *)&v32, v7, v8, v9, v10, v11, v12, v13, (uint64_t)&v30)))
    {
      uint64_t v21 = MEMORY[0x1E4F1CFD0];
    }
    else
    {
      int v27 = 414393924;
      long long v26 = xmmword_19D7791D0;
      int v25 = -996295886;
      long long v24 = xmmword_19D7791F8;
      int v22 = MGIsDeviceOneOfType((const UInt8 *)&v26, v14, v15, v16, v17, v18, v19, v20, (uint64_t)&v24);
      uint64_t v21 = MEMORY[0x1E4F1CFD0];
      if (!v22) {
        uint64_t v21 = MEMORY[0x1E4F1CFC8];
      }
    }
  }
  else
  {
    uint64_t v21 = MEMORY[0x1E4F1CFC8];
  }
  return *(void *)v21;
}

BOOL sub_19D723344()
{
  return sub_19D714D40() == 1;
}

const void *sub_19D723364()
{
  return sub_19D710BBC((const char **)@"ZgIjA7Nwd2jSo13lhDO1Iw", 0);
}

CFNumberRef sub_19D723374()
{
  if (sub_19D71ACF0((BOOL)@"r/++Z94rbTcHrTtZ/rCU4w", 115)) {
    goto LABEL_2;
  }
  if (sub_19D7175F4((BOOL)@"M10"))
  {
LABEL_4:
    int v0 = 42;
    goto LABEL_8;
  }
  if (sub_19D7175F4((BOOL)@"H9") || sub_19D7175F4((BOOL)@"H10")) {
    goto LABEL_7;
  }
  if (sub_19D7175F4((BOOL)@"H1")) {
    goto LABEL_18;
  }
  if (sub_19D7175F4((BOOL)@"M8")) {
    goto LABEL_4;
  }
  if (sub_19D7175F4((BOOL)@"H2")) {
    goto LABEL_18;
  }
  if (sub_19D7175F4((BOOL)@"M9")) {
    goto LABEL_4;
  }
  if (sub_19D7175F4((BOOL)@"H3")) {
    goto LABEL_18;
  }
  if (sub_19D71ACF0((BOOL)@"aIJva0DAnD6KdrSpPF11xQ", 115))
  {
LABEL_2:
    int v0 = 50;
    goto LABEL_8;
  }
  if (sub_19D7175F4((BOOL)@"H4")) {
    goto LABEL_18;
  }
  if (sub_19D7175F4((BOOL)@"H11")) {
    goto LABEL_7;
  }
  if (sub_19D7175F4((BOOL)@"H5"))
  {
LABEL_18:
    int v0 = 41;
    goto LABEL_8;
  }
  if (sub_19D71ACF0((BOOL)@"3Hj0jFscGt094g65Fag7eQ", 116)) {
    goto LABEL_7;
  }
  if (sub_19D7175F4((BOOL)@"H6")) {
    goto LABEL_4;
  }
  if (sub_19D71ACF0((BOOL)@"NKo9tzEYqtHAfQYMFsc66Q", 115))
  {
LABEL_7:
    int v0 = 51;
    goto LABEL_8;
  }
  if (sub_19D71ACF0((BOOL)@"zDBaE8nqtDP8hY4pOa6iMw", 116)) {
    int v0 = 50;
  }
  else {
    int v0 = 52;
  }
LABEL_8:
  int valuePtr = v0;
  return CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
}

uint64_t sub_19D7234F4()
{
  if (sub_19D7175F4((BOOL)@"H6")
    || sub_19D7175F4((BOOL)@"H8")
    || sub_19D714D40() == 6
    || sub_19D714D40() == 7
    || sub_19D7175F4((BOOL)@"H5")
    || sub_19D7175F4((BOOL)@"H7"))
  {
    uint64_t v0 = MEMORY[0x1E4F1CFC8];
  }
  else
  {
    BOOL v2 = sub_19D7175F4((BOOL)@"H4");
    uint64_t v0 = MEMORY[0x1E4F1CFC8];
    if (!v2) {
      uint64_t v0 = MEMORY[0x1E4F1CFD0];
    }
  }
  return *(void *)v0;
}

CFNumberRef sub_19D723594()
{
  return sub_19D717F48("IODeviceTree:/product/camera", @"Q4b8YIwPgnznT5hs4qXjaA", 114);
}

BOOL sub_19D7235AC()
{
  return sub_19D7145C8("IODeviceTree:/product/camera", @"YcNAX0Gc6KejQPKSrA9kvg", 102);
}

uint64_t sub_19D7235C4()
{
  return sub_19D71AA14((uint64_t)"IODeviceTree:/", @"v7h4TrJdmukTl8gpzVl3DQ", 103);
}

uint64_t sub_19D7235DC()
{
  if (sub_19D714D40() != 11)
  {
    uint64_t result = sub_19D714D40();
    if (result == 1) {
      return result;
    }
    if (sub_19D714D40() != 2 && sub_19D714D40() != 3) {
      return sub_19D714D40() == 4;
    }
  }
  return 1;
}

uint64_t sub_19D723634()
{
  return sub_19D743388(@"wlan.nan.enabled");
}

uint64_t sub_19D723640()
{
  return sub_19D71AA14((uint64_t)"IODeviceTree:/", @"RaX3KBmG7H9fUOEtLK/I6w", 115);
}

BOOL sub_19D723658(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"TF31PAB6aO8KAbPyNKSxKA", 85, a2);
}

BOOL sub_19D72366C()
{
  return sub_19D7145C8("IODeviceTree:/product/camera", @"lICl1+LV8GYEzQPilmyIXg", 114);
}

const void *sub_19D723684()
{
  return sub_19D71A230("IODeviceTree:/product", @"2aIAScwtFNCz+Y7WesMOCA", 109);
}

BOOL sub_19D72369C(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"TqrlqJOZiAuRx8Qu3SVr+Q", a2);
}

BOOL sub_19D7236C4(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"TqrlqJOZiAuRx8Qu3SVr+Q", 83, a2);
}

__CFArray *sub_19D7236D8()
{
  CFMutableStringRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  uint64_t v1 = sub_19D710BBC((const char **)@"HMpTbnbcAb+mQDi8O71h6Q", 0);
  if (!v1)
  {
    uint64_t v3 = 0;
    if (!Mutable) {
      return v3;
    }
    goto LABEL_3;
  }
  BOOL v2 = v1;
  CFArrayAppendValue(Mutable, v1);
  uint64_t v3 = sub_19D736264(Mutable, 3u);
  CFRelease(v2);
  if (Mutable) {
LABEL_3:
  }
    CFRelease(Mutable);
  return v3;
}

BOOL sub_19D72376C(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"niQFEBBY7JaauAIosAyQQg", a2);
}

BOOL sub_19D723794(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"niQFEBBY7JaauAIosAyQQg", 77, a2);
}

CFStringRef sub_19D7237A8()
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  CFNumberRef v0 = (const __CFNumber *)sub_19D710BBC((const char **)@"eNgz35a7iZnVeEMwsBQZew", 0);
  CFNumberRef v1 = v0;
  unsigned int valuePtr = 0;
  if (v0)
  {
    CFNumberGetValue(v0, kCFNumberSInt32Type, &valuePtr);
    uint64_t v2 = valuePtr;
  }
  else
  {
    uint64_t v2 = 0;
  }
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFStringRef v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%X", v2);
  CFDataRef v5 = (const __CFData *)sub_19D710BBC((const char **)@"Nmhz54v5ZLqj2I4NPFIFqQ", 0);
  CFMutableStringRef Mutable = CFStringCreateMutable(v3, 0);
  if (v5)
  {
    BytePtr = CFDataGetBytePtr(v5);
    CFIndex Length = CFDataGetLength(v5);
    if (Length >= 1)
    {
      CFIndex v9 = Length;
      do
      {
        unsigned int v10 = *BytePtr++;
        CFStringAppendFormat(Mutable, 0, @"%02X", v10);
        --v9;
      }
      while (v9);
    }
  }
  MEMORY[0x1F4188790]();
  v16[0] = 0x3030303030303030;
  CFIndex v11 = CFStringGetLength(Mutable);
  CFIndex v12 = CFStringGetLength(v4);
  if (v1 && v5)
  {
    CFStringRef v13 = CFStringCreateWithFormat(v3, 0, @"%*.*s%@-%*.*s%@", (8 - v12) & ~((8 - v12) >> 63), (8 - v12) & ~((8 - v12) >> 63), v16, v4, (8 - v11) & ~((8 - v11) >> 63), (8 - v11) & ~((8 - v11) >> 63), v16, Mutable);
  }
  else
  {
    CFStringRef v13 = 0;
    CFStringRef v14 = 0;
    if (!v1) {
      goto LABEL_13;
    }
  }
  CFRelease(v1);
  CFStringRef v14 = v13;
LABEL_13:
  if (v4) {
    CFRelease(v4);
  }
  if (v5) {
    CFRelease(v5);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v14;
}

BOOL sub_19D7239BC(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"vIccod02kDxScKF5s2h6OA", a2);
}

BOOL sub_19D7239E4(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"vIccod02kDxScKF5s2h6OA", 66, a2);
}

BOOL sub_19D7239F8()
{
  if (MGGetBoolAnswer((const char **)@"ZEU7pCEskBhjQ4AOMuALDw")) {
    return 1;
  }
  if (sub_19D714D40() == 7) {
    return 0;
  }

  return sub_19D7175F4((BOOL)@"H8");
}

CFTypeRef sub_19D723A54()
{
  return sub_19D739990(1, 1, 1);
}

BOOL sub_19D723A64(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"lHMDJnC58naUz2rOCJyVIw", a2);
}

BOOL sub_19D723A8C(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"lHMDJnC58naUz2rOCJyVIw", 73, a2);
}

uint64_t sub_19D723AA0()
{
  int v0 = sub_19D714D40();
  uint64_t v1 = MEMORY[0x1E4F1CFD0];
  if (v0 != 1) {
    uint64_t v1 = MEMORY[0x1E4F1CFC8];
  }
  return *(void *)v1;
}

void *sub_19D723AD4()
{
  int v0 = sub_19D710BBC((const char **)@"qNNddlUK+B/YlooNoymwgA", 0);
  if (!v0) {
    return 0;
  }
  uint64_t v1 = v0;
  CFDictionaryRef v2 = (const __CFDictionary *)_CFCopySupplementalVersionDictionary();
  CFAllocatorRef v3 = sub_19D71D520(v2, @"ProductVersionExtra", 1);
  if (v3)
  {
    CFStringRef v4 = v3;
    CFDataRef v5 = (void *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%@ %@", v1, v3);
    CFRelease(v1);
    uint64_t v1 = v4;
  }
  else
  {
    CFDataRef v5 = (void *)CFRetain(v1);
  }
  CFRelease(v1);
  return v5;
}

CFTypeRef sub_19D723B88()
{
  return sub_19D739990(5, 1, 0);
}

BOOL sub_19D723B98(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"heP+NTlvkhJ2zzWIUznawA", a2);
}

BOOL sub_19D723BC0(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"heP+NTlvkhJ2zzWIUznawA", 77, a2);
}

CFStringRef sub_19D723BD4()
{
  return sub_19D717CB4("IODeviceTree:/chosen", @"MQoTKg93BM8ZhBaB3WUPdw", 102);
}

BOOL sub_19D723BEC()
{
  return sub_19D711FD4(@"Valid", @"RegionalBehaviorValid");
}

__CFDictionary *sub_19D723C00()
{
  if (sub_19D714D84()) {
    return 0;
  }
  CFMutableStringRef Mutable = CFDictionaryCreateMutable(0, 6, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  for (uint64_t i = 0; i != 6; ++i)
  {
    CFDictionaryRef v2 = (const char **)off_1E5962D18[i];
    CFAllocatorRef v3 = sub_19D710BBC(v2, 0);
    if (v3)
    {
      CFStringRef v4 = v3;
      CFDictionarySetValue(Mutable, v2, v3);
      CFRelease(v4);
    }
  }
  if (!CFDictionaryGetCount(Mutable))
  {
    CFRelease(Mutable);
    return 0;
  }
  return Mutable;
}

BOOL sub_19D723CB8()
{
  return sub_19D712390("IODeviceTree:/product/audio", @"twWCmmM9I0dxwv7Zs9v48Q", 97);
}

BOOL sub_19D723CD0()
{
  return sub_19D712390("IODeviceTree:/product", @"AOIh1l3cIyDXlP4KB/084A", 105);
}

CFNumberRef sub_19D723CE8()
{
  int valuePtr = 0;
  CFBooleanRef v0 = (const __CFBoolean *)sub_19D743150(0, @"AppleSPUHIDDriver", 0, @"SupportHDRCompass", 0);
  if (v0)
  {
    CFBooleanRef v1 = v0;
    CFTypeID v2 = CFGetTypeID(v0);
    if (v2 == CFBooleanGetTypeID())
    {
      int Value = CFBooleanGetValue(v1);
      int valuePtr = 2 * (Value != 0);
      CFRelease(v1);
      if (Value) {
        return CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      }
    }
    else
    {
      CFRelease(v1);
    }
  }
  if (MGGetBoolAnswer((const char **)@"aCQx2Qq/TChnNAq1rr6Egw")) {
    int valuePtr = 1;
  }
  return CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
}

BOOL sub_19D723DA8()
{
  return sub_19D712390("IODeviceTree:/product/camera", @"bmYssgjtQNKMy3Zhf8N+2w", 115);
}

BOOL sub_19D723DC4()
{
  return sub_19D712390("IODeviceTree:/product/audio", @"NsUsZwajdZDN+suOIwkPvg", 115);
}

uint64_t sub_19D723DDC()
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (sub_19D714D40() == 4)
  {
    int v22 = 1839812531;
    long long v21 = xmmword_19D7789B0;
    int v20 = -435113336;
    long long v19 = xmmword_19D7789C4;
    if (!MGIsDeviceOneOfType((const UInt8 *)&v21, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v19)) {
      return 1;
    }
  }
  uint64_t result = sub_19D714D40();
  if (result != 1)
  {
    if (sub_19D714D40() == 3)
    {
      int v18 = 401945557;
      long long v17 = xmmword_19D7792FC;
      int v16 = 317289457;
      long long v15 = xmmword_19D7792E8;
      return MGIsDeviceOneOfType((const UInt8 *)&v17, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v15) ^ 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

const void *sub_19D724008()
{
  return sub_19D71A230("IODeviceTree:/product/audio", @"4eFYRO4KDf8py/Zf3iHWZw", 115);
}

BOOL sub_19D724020()
{
  return sub_19D716960((BOOL)@"H13");
}

CFTypeRef sub_19D72402C()
{
  return sub_19D739EE0(0);
}

BOOL sub_19D724034(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"H5TSt7Pu4zNCD5RvHuk5CQ", a2);
}

BOOL sub_19D72405C(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"H5TSt7Pu4zNCD5RvHuk5CQ", 80, a2);
}

CFTypeRef sub_19D724070()
{
  return sub_19D739990(6, 1, 0);
}

BOOL sub_19D724080(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"RXyKSjeF239SL2vOcru01A", a2);
}

BOOL sub_19D7240A8(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"RXyKSjeF239SL2vOcru01A", 77, a2);
}

__CFArray *sub_19D7240BC()
{
  CFMutableStringRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  uint64_t v1 = sub_19D710BBC((const char **)@"r5pA2qLgR86BQKwgMjPWzg", 0);
  if (!v1)
  {
    uint64_t v3 = 0;
    if (!Mutable) {
      return v3;
    }
    goto LABEL_3;
  }
  uint64_t v2 = v1;
  CFArrayAppendValue(Mutable, v1);
  uint64_t v3 = sub_19D736264(Mutable, 4u);
  CFRelease(v2);
  if (Mutable) {
LABEL_3:
  }
    CFRelease(Mutable);
  return v3;
}

BOOL sub_19D724150(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"juE6wCsjVG4bfAhgHcUVcQ", a2);
}

BOOL sub_19D724178(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"juE6wCsjVG4bfAhgHcUVcQ", 77, a2);
}

const void *sub_19D72418C()
{
  return sub_19D71A230("IODeviceTree:/arm-io/marconi-wifi", @"PNIwPfoxY6URyv3kSma5Aw", 119);
}

uint64_t sub_19D7241A4()
{
  return sub_19D742F30((uint64_t)"IODeviceTree:/", @"OmiBcaNEpjOcuQrO5/Yrbw", 100, @"us1armjE6TKGvh2WIrNgEQ", 97);
}

CFStringRef sub_19D7241C8()
{
  return sub_19D717CB4("IODeviceTree:/", @"NsIeRLGugrogpTZiayi1VA", 99);
}

uint64_t sub_19D7241E0()
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (sub_19D714D40() == 4
    || sub_19D714D40() == 2
    || sub_19D714D40() == 3
    || sub_19D714D40() == 1
    || sub_19D714D40() == 7
    || sub_19D714D40() == 11)
  {
    uint64_t v7 = MEMORY[0x1E4F1CFC8];
  }
  else
  {
    int v13 = 368885834;
    long long v12 = xmmword_19D779054;
    int v11 = -414334491;
    long long v10 = xmmword_19D779068;
    int v9 = MGIsDeviceOneOfType((const UInt8 *)&v12, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v10);
    uint64_t v7 = MEMORY[0x1E4F1CFC8];
    if (!v9) {
      uint64_t v7 = MEMORY[0x1E4F1CFD0];
    }
  }
  return *(void *)v7;
}

BOOL sub_19D724370()
{
  return sub_19D714D40() != 4;
}

BOOL sub_19D724390()
{
  uint64_t v0 = sub_19D712EC0();
  if (!v0) {
    return 0;
  }
  uint64_t v1 = v0;
  BOOL v2 = CFEqual(v0, @"Restore") != 0;
  CFRelease(v1);
  return v2;
}

CFNumberRef sub_19D7243E0()
{
  int valuePtr = 0;
  CFNumberRef result = sub_19D717F48("IODeviceTree:/options", @"emu", 0);
  if (result)
  {
    CFNumberRef v1 = result;
    CFNumberGetValue(result, kCFNumberIntType, &valuePtr);
    CFRelease(v1);
    return (const __CFNumber *)(valuePtr != 0);
  }
  return result;
}

const void *sub_19D724448()
{
  return sub_19D7155AC(@"SystemImageID", 1);
}

CFNumberRef sub_19D724458()
{
  return sub_19D717F48("IODeviceTree:/chosen", @"b5K3g59Aj+Cc982n9FQv8A", 100);
}

BOOL sub_19D724470()
{
  return sub_19D714D40() != 7;
}

BOOL sub_19D724490()
{
  return sub_19D7145C8("IODeviceTree:/product/camera", @"ZT0Z0SqGF/esuJWDmk8mGw", 115);
}

uint64_t sub_19D7244A8()
{
  CFNumberRef v0 = sub_19D717F48("IODeviceTree:/buttons", @"home-button-type", 0);
  if (v0)
  {
    CFNumberRef v1 = v0;
    int valuePtr = 0;
    if (CFNumberGetValue(v0, kCFNumberSInt32Type, &valuePtr)) {
      BOOL v2 = valuePtr == 1;
    }
    else {
      BOOL v2 = 0;
    }
    char v3 = v2;
    CFRelease(v1);
    uint64_t v4 = MEMORY[0x1E4F1CFD0];
    if ((v3 & 1) == 0) {
      uint64_t v4 = MEMORY[0x1E4F1CFC8];
    }
  }
  else
  {
    uint64_t v4 = MEMORY[0x1E4F1CFC8];
  }
  return *(void *)v4;
}

BOOL sub_19D72453C()
{
  return sub_19D7145C8("IODeviceTree:/product", @"v1/EHDarbU55OfoXm2EiGA", 115);
}

CFNumberRef sub_19D724554()
{
  int v9 = 0;
  int valuePtr = -1;
  CFDataRef v0 = (const __CFData *)sub_19D71A230("IODeviceTree:/chosen", @"marketing-software-behavior", 0);
  if (!v0) {
    return CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &v9);
  }
  CFDataRef v1 = v0;
  BytePtr = CFDataGetBytePtr(v0);
  if (BytePtr && (char v3 = BytePtr, v4 = CFGetTypeID(v1), v4 == CFDataGetTypeID()) && CFDataGetLength(v1) >= 4)
  {
    int v5 = v3[2];
    if ((v5 - 1) >= 2) {
      int v5 = 0;
    }
    int valuePtr = v5;
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFNumberRef v7 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
    if (v7) {
      goto LABEL_11;
    }
  }
  else
  {
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  }
  CFNumberRef v7 = CFNumberCreate(v6, kCFNumberSInt32Type, &v9);
LABEL_11:
  CFRelease(v1);
  return v7;
}

CFDataRef sub_19D724664()
{
  return sub_19D73B858("AppleSEPManager", 0xFu, 0, 0, 0x14uLL);
}

CFStringRef sub_19D724680()
{
  CFDataRef v0 = (const __CFData *)sub_19D710BBC((const char **)@"X7SF9XDG+CBhoPIXA1YlCg", 0);
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  CFTypeID v2 = CFGetTypeID(v0);
  if (v2 != CFDataGetTypeID() || CFDataGetLength(v1) < 6) {
    goto LABEL_9;
  }
  CFIndex Length = CFDataGetLength(v1);
  BytePtr = CFDataGetBytePtr(v1);
  CFMutableStringRef Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, @"%02x", *BytePtr);
  if (Length >= 2)
  {
    CFIndex v6 = Length - 1;
    CFNumberRef v7 = (unsigned __int8 *)(BytePtr + 1);
    do
    {
      unsigned int v8 = *v7++;
      CFStringAppendFormat(Mutable, 0, @":%02x", v8);
      --v6;
    }
    while (v6);
  }
  if (Mutable)
  {
    CFStringRef Copy = CFStringCreateCopy(0, Mutable);
    CFRelease(Mutable);
  }
  else
  {
LABEL_9:
    CFStringRef Copy = 0;
  }
  CFRelease(v1);
  return Copy;
}

BOOL sub_19D7247A0(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"0rbLl0hXmTehfEduXfeJYQ", a2);
}

BOOL sub_19D7247C8(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"0rbLl0hXmTehfEduXfeJYQ", 84, a2);
}

uint64_t sub_19D7247DC()
{
  BOOL v0 = sub_19D7145C8("IODeviceTree:/product", @"disable-globe-map", 0);
  if ((unint64_t)sub_19D719348() >> 29 < 5 || v0) {
    uint64_t v2 = MEMORY[0x1E4F1CFC8];
  }
  else {
    uint64_t v2 = MEMORY[0x1E4F1CFD0];
  }
  return *(void *)v2;
}

BOOL sub_19D724840()
{
  return sub_19D714D40() == 7;
}

BOOL sub_19D724860()
{
  return sub_19D7145C8("IODeviceTree:/product", @"3hD7TZt4FFvCgra7E8PkWw", 99);
}

uint64_t sub_19D724878()
{
  int v1 = 0;
  LODWORD(result) = sub_19D712B14((const char **)@"gme55xrmjlSlBkahnZq36A", 5, 5, kCFNumberSInt32Type, &v1);
  if (v1 > 0) {
    return result;
  }
  else {
    return 0;
  }
}

CFNumberRef sub_19D7248C0()
{
  return sub_19D717F48("IODeviceTree:/product/camera", @"iifCuJmggYlB4hLzc0Zoiw", 114);
}

CFNumberRef sub_19D7248D8()
{
  mach_port_t v0 = *MEMORY[0x1E4F2EEF0];
  CFDictionaryRef v1 = IOServiceMatching("IOPlatformExpertDevice");
  io_service_t MatchingService = IOServiceGetMatchingService(v0, v1);
  if (!MatchingService) {
    return 0;
  }
  CFDataRef v3 = (const __CFData *)IORegistryEntrySearchCFProperty(MatchingService, "IODeviceTree", @"ane-type", (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1u);
  if (!v3) {
    return 0;
  }
  CFDataRef v4 = v3;
  BytePtr = CFDataGetBytePtr(v3);
  CFNumberRef v6 = CFNumberCreate(0, kCFNumberSInt32Type, BytePtr);
  CFRelease(v4);
  return v6;
}

CFStringRef sub_19D724974()
{
  long long v1 = 0u;
  long long v2 = 0u;
  if (sub_19D7359F8((uint64_t)&v1)) {
    return CFStringCreateWithFormat(0, 0, @"{ x: %f, y: %f, width: %f, height: %f }", v1, v2);
  }
  else {
    return 0;
  }
}

CFNumberRef sub_19D7249D0()
{
  return sub_19D717F48("IODeviceTree:/chosen", @"F6wqOqCR9tpYWyB1taxxnw", 98);
}

CFNumberRef sub_19D7249E8()
{
  return sub_19D717F48("IODeviceTree:/product/facetime", @"yeaE9+OrN2WJlWkDroMtZg", 98);
}

uint64_t sub_19D724A00()
{
  return sub_19D742EA0((uint64_t)"IODeviceTree:", @"RaX3KBmG7H9fUOEtLK/I6w", 115, @"hLzlRnTuKAcQLWtNwCFSfg", 110);
}

BOOL sub_19D724A24()
{
  return sub_19D7145C8("IODeviceTree:/product", @"ESA7FmyB3KbJFNBAsBejcg", 117);
}

uint64_t sub_19D724A3C()
{
  CFStringRef v0 = sub_19D717CB4("IODeviceTree:/", @"model-config", 0);
  uint64_t v1 = *MEMORY[0x1E4F1CFC8];
  if (v0)
  {
    CFStringRef v2 = v0;
    if (CFStringFind(v0, @"NED=1", 0).location != -1) {
      uint64_t v1 = *MEMORY[0x1E4F1CFD0];
    }
    CFRelease(v2);
  }
  return v1;
}

BOOL sub_19D724AB4()
{
  return sub_19D712390("IODeviceTree:/arm-io/isp", @"X9NA3D+PguwY0i0Uffl07Q", 99);
}

uint64_t sub_19D724ACC()
{
  CFStringRef v0 = sub_19D712EC0();
  if (!v0) {
    return 1;
  }
  CFStringRef v1 = v0;
  BOOL v2 = !CFEqual(v0, @"NonUI")
    && !CFEqual(v1, @"VendorNonUI")
    && !CFEqual(v1, @"Darwin")
    && !CFEqual(v1, @"Darwin Internal")
    && CFStringHasPrefix(v1, @"Darwin") == 0;
  CFRelease(v1);
  return v2;
}

uint64_t sub_19D724B74()
{
  return 0;
}

const void *sub_19D724B7C()
{
  return sub_19D710BBC((const char **)@"s8TgWYc7BjtSNbtuycqauw", 0);
}

uint64_t sub_19D724B8C()
{
  return 1;
}

uint64_t sub_19D724B94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  int v10 = -1431778695;
  long long v9 = xmmword_19D778E10;
  if (MGIsDeviceOneOfType((const UInt8 *)&v9, a2, a3, a4, a5, a6, a7, a8, 0)) {
    return *MEMORY[0x1E4F1CFD0];
  }
  else {
    return sub_19D733EB4();
  }
}

uint64_t sub_19D724C1C()
{
  uint64_t v124 = *MEMORY[0x1E4F143B8];
  if (sub_19D714D40() == 1 && MGGetBoolAnswer((const char **)@"BWoQXWXYITrPRpFyc9xTLw"))
  {
    uint64_t v7 = MEMORY[0x1E4F1CFD0];
  }
  else
  {
    int v123 = -1022451852;
    long long v122 = xmmword_19D779388;
    int v121 = 1729782187;
    long long v120 = xmmword_19D77939C;
    int v119 = -1527788847;
    long long v118 = xmmword_19D779324;
    int v117 = 1532898719;
    long long v116 = xmmword_19D779310;
    if (MGIsDeviceOneOfType((const UInt8 *)&v122, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v120)) {
      goto LABEL_13;
    }
    int v115 = -1579092758;
    long long v114 = xmmword_19D778B68;
    int v113 = 1430379884;
    long long v112 = xmmword_19D778B7C;
    if (MGIsDeviceOneOfType((const UInt8 *)&v114, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v112)) {
      goto LABEL_13;
    }
    int v111 = 1032708406;
    long long v110 = xmmword_19D778C80;
    int v109 = 729903963;
    long long v108 = xmmword_19D778C94;
    int v107 = 1275676051;
    long long v106 = xmmword_19D779374;
    int v105 = 1908474541;
    long long v104 = xmmword_19D779360;
    if (MGIsDeviceOneOfType((const UInt8 *)&v110, v15, v16, v17, v18, v19, v20, v21, (uint64_t)&v108)) {
      goto LABEL_13;
    }
    int v103 = 1789837692;
    long long v102 = xmmword_19D778B18;
    int v101 = 48355600;
    long long v100 = xmmword_19D778B2C;
    int v99 = -1239654590;
    long long v98 = xmmword_19D778B40;
    int v97 = -679691073;
    long long v96 = xmmword_19D778B54;
    if (MGIsDeviceOneOfType((const UInt8 *)&v102, v22, v23, v24, v25, v26, v27, v28, (uint64_t)&v100)) {
      goto LABEL_13;
    }
    int v95 = -926344036;
    long long v94 = xmmword_19D778B90;
    int v93 = -954998212;
    long long v92 = xmmword_19D778BA4;
    int v91 = 436612651;
    long long v90 = xmmword_19D778BB8;
    if (MGIsDeviceOneOfType((const UInt8 *)&v94, v29, v30, v31, v32, v33, v34, v35, (uint64_t)&v92)) {
      goto LABEL_13;
    }
    int v89 = 1602014129;
    long long v88 = xmmword_19D778BCC;
    int v87 = 317289457;
    long long v86 = xmmword_19D7792E8;
    int v85 = -199226823;
    long long v84 = xmmword_19D7792AC;
    int v83 = 1412427398;
    long long v82 = xmmword_19D7792C0;
    if (MGIsDeviceOneOfType((const UInt8 *)&v88, v36, v37, v38, v39, v40, v41, v42, (uint64_t)&v86)) {
      goto LABEL_13;
    }
    if (sub_19D714D40() != 3) {
      goto LABEL_13;
    }
    int v81 = 996646949;
    long long v80 = xmmword_19D77934C;
    int v79 = -563086000;
    long long v78 = xmmword_19D779338;
    if (MGIsDeviceOneOfType((const UInt8 *)&v80, v43, v44, v45, v46, v47, v48, v49, (uint64_t)&v78)) {
      goto LABEL_13;
    }
    int v77 = -810116762;
    long long v76 = xmmword_19D778BE0;
    int v75 = 401945557;
    long long v74 = xmmword_19D7792FC;
    int v73 = -1283070668;
    long long v72 = xmmword_19D779298;
    int v71 = 160260070;
    long long v70 = xmmword_19D7792D4;
    if (MGIsDeviceOneOfType((const UInt8 *)&v76, v50, v51, v52, v53, v54, v55, v56, (uint64_t)&v74))
    {
LABEL_13:
      uint64_t v7 = MEMORY[0x1E4F1CFC8];
    }
    else
    {
      int v69 = -1195351767;
      long long v68 = xmmword_19D778BF4;
      int v67 = -1639077591;
      long long v66 = xmmword_19D778AF0;
      int v65 = MGIsDeviceOneOfType((const UInt8 *)&v68, v57, v58, v59, v60, v61, v62, v63, (uint64_t)&v66);
      uint64_t v7 = MEMORY[0x1E4F1CFC8];
      if (!v65) {
        uint64_t v7 = MEMORY[0x1E4F1CFD0];
      }
    }
  }
  return *(void *)v7;
}

CFDataRef sub_19D72510C()
{
  memset(v1, 0, sizeof(v1));
  if (sub_19D73645C(@"ringer-button-location", 0, (uint64_t *)v1)) {
    return CFDataCreate(0, (const UInt8 *)v1, 32);
  }
  else {
    return 0;
  }
}

BOOL sub_19D725160()
{
  return sub_19D7145C8("IODeviceTree:/product", @"eKgHzGQ9HnWdPKX7W16OAg", 117);
}

BOOL sub_19D725178()
{
  return sub_19D7145C8("IODeviceTree:/arm-io/isp", @"+fgL2ovGydvB5CWd1JI1qg", 104);
}

BOOL sub_19D725190()
{
  return sub_19D714D40() == 3;
}

CFTypeRef sub_19D7251B0()
{
  if (!sub_19D7174E8()) {
    return 0;
  }

  return sub_19D7128AC(0, "AppleVirtualPlatformARMPE", @"UDID");
}

BOOL sub_19D7251FC(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"sjGZBQzow3yV/IOa0wCeoQ", a2);
}

BOOL sub_19D725224(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"sjGZBQzow3yV/IOa0wCeoQ", 86, a2);
}

uint64_t sub_19D725238()
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (sub_19D714D40() != 6) {
    return 0;
  }
  uint64_t result = sub_19D716960((BOOL)@"M11");
  if (result)
  {
    int v11 = 1530338216;
    long long v10 = xmmword_19D7790A4;
    int v9 = 406601745;
    long long v8 = xmmword_19D7790B8;
    return MGIsDeviceOneOfType((const UInt8 *)&v10, v1, v2, v3, v4, v5, v6, v7, (uint64_t)&v8) ^ 1;
  }
  return result;
}

BOOL sub_19D725338(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"X7SF9XDG+CBhoPIXA1YlCg", a2);
}

BOOL sub_19D725360(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"X7SF9XDG+CBhoPIXA1YlCg", 84, a2);
}

uint64_t sub_19D725374()
{
  return sub_19D736824("CIO");
}

uint64_t sub_19D725380()
{
  BOOL v0 = sub_19D7145C8("IODeviceTree:/product/camera", @"post-effects", 0);
  uint64_t v1 = MEMORY[0x1E4F1CFD0];
  if (!v0) {
    uint64_t v1 = MEMORY[0x1E4F1CFC8];
  }
  return *(void *)v1;
}

const void *sub_19D7253C8()
{
  return sub_19D71A230("IODeviceTree:/product/audio", @"I6rd1SCXpRqBMDTPBbcWzA", 109);
}

CFArrayRef sub_19D7253E0()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  v1[0] = xmmword_1E5962D70;
  v1[1] = *(_OWORD *)off_1E5962D80;
  uint64_t v2 = @"KP";
  return CFArrayCreate(0, (const void **)v1, 5, 0);
}

CFTypeRef sub_19D725454()
{
  if (!MGGetBoolAnswer((const char **)@"AJFQheZDyUbvI6RmBMT9Cg")) {
    return 0;
  }
  int v12 = -1;
  BOOL v0 = sub_19D712B14((const char **)@"XQBHOWjPt2P+uNqlLm1P7A", 5, 5, kCFNumberSInt32Type, &v12);
  CFTypeRef result = 0;
  if (v0 && v12 >= 2)
  {
    uint64_t v2 = *((void *)off_1E9449170 + 16);
    if (!v2) {
      uint64_t v2 = sub_19D71A930(16, 2);
    }
    CFTypeID TypeID = CFDictionaryGetTypeID();
    CFTypeRef result = sub_19D739338((uint64_t)"_CTServerConnectionCopyPostponementStatus", v2, TypeID);
    if (!result)
    {
      uint64_t v4 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v4) {
        long long v10 = v4 + 1;
      }
      else {
        long long v10 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      }
      _MGLog((uint64_t)v10, 4869, @"_CTServerConnectionCopyPostponementStatus returned NULL", v5, v6, v7, v8, v9, v11[0]);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int v11 = 0;
        _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "_CTServerConnectionCopyPostponementStatus returned NULL", v11, 2u);
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_19D725570()
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (sub_19D714D40() == 4
    || sub_19D714D40() == 1
    || sub_19D714D40() == 3
    || sub_19D714D40() == 2
    || sub_19D714D40() == 7
    || sub_19D714D40() == 11)
  {
    uint64_t v7 = MEMORY[0x1E4F1CFC8];
  }
  else
  {
    int v13 = 368885834;
    long long v12 = xmmword_19D779054;
    int v11 = -526227167;
    long long v10 = xmmword_19D77907C;
    int v9 = MGIsDeviceOneOfType((const UInt8 *)&v12, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v10);
    uint64_t v7 = MEMORY[0x1E4F1CFC8];
    if (!v9) {
      uint64_t v7 = MEMORY[0x1E4F1CFD0];
    }
  }
  return *(void *)v7;
}

float sub_19D725704()
{
  if (sub_19D714D40() == 3 && !MGGetBoolAnswer((const char **)@"lSpe1QHIya0aeNrjLTtaJA")) {
    return 0.42;
  }
  else {
    return 0.0;
  }
}

BOOL sub_19D725744()
{
  return sub_19D711FD4(@"NTSC", @"RegionalBehaviorNTSC");
}

BOOL sub_19D725758()
{
  return sub_19D7145C8("IODeviceTree:/product/maps", @"v/BP9Nx/zfo9bKi9JR2p+g", 51);
}

__CFString *sub_19D725770()
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (sub_19D714D84()) {
    return @"iPad";
  }
  uint64_t v1 = SCPreferencesCreate(0, @"MobileGestalt", 0);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  if (SCPreferencesLock(v1, 1u))
  {
    CFStringRef v0 = SCDynamicStoreCopyComputerName(0, 0);
    SCPreferencesUnlock(v2);
  }
  else
  {
    uint64_t v3 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    uint64_t v4 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v4) {
      uint64_t v3 = v4 + 1;
    }
    int v5 = SCError();
    char v6 = SCErrorString(v5);
    _MGLog((uint64_t)v3, 4686, @"SCPreferencesLock: %s", v7, v8, v9, v10, v11, v6);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      int v12 = SCError();
      *(_DWORD *)buf = 136315138;
      uint64_t v15 = SCErrorString(v12);
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "SCPreferencesLock: %s", buf, 0xCu);
    }
    CFStringRef v0 = SCDynamicStoreCopyComputerName(0, 0);
  }
  CFRelease(v2);
  return (__CFString *)v0;
}

BOOL sub_19D7258D0(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"9/J7LY7zuYSGW1BcSTRpOw", a2);
}

BOOL sub_19D7258F8(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"9/J7LY7zuYSGW1BcSTRpOw", 83, a2);
}

BOOL sub_19D72590C()
{
  return sub_19D7145C8("IODeviceTree:/buttons", @"Ah5yfSlY2yycIQb92HbmrA", 102);
}

CFDataRef sub_19D725924()
{
  return sub_19D73B858("AppleMobileApNonce", 0xC8u, 0, 0, 0x20uLL);
}

const void *sub_19D725940()
{
  CFDictionaryRef v0 = (const __CFDictionary *)_CFCopySupplementalVersionDictionary();

  return sub_19D71D520(v0, @"ProductVersionExtra", 1);
}

CFNumberRef sub_19D725974()
{
  return sub_19D717F48("IODeviceTree:/baseband", @"5dyhCh3dm1vSOaNK+US1Qw", 101);
}

BOOL sub_19D72598C(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"qWG594bTi87edQCSYxlLeA", a2);
}

BOOL sub_19D7259B4(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"qWG594bTi87edQCSYxlLeA", 69, a2);
}

BOOL sub_19D7259C8()
{
  return sub_19D7145C8("IODeviceTree:/product/camera", @"voS/bmBAz0Y1eNLoN8x9/Q", 112);
}

BOOL sub_19D7259E0()
{
  return sub_19D711FD4(@"ShutterClick", @"RegionalBehaviorShutterClick");
}

CFNumberRef sub_19D7259F4()
{
  return sub_19D717F48("IODeviceTree:/product", @"6Y9R9JVBWd2wTX5ZdDGsWA", 97);
}

uint64_t sub_19D725A0C()
{
  BOOL v0 = sub_19D7145C8("IODeviceTree:/product/camera", @"flash", 0);
  uint64_t v1 = MEMORY[0x1E4F1CFD0];
  if (!v0) {
    uint64_t v1 = MEMORY[0x1E4F1CFC8];
  }
  return *(void *)v1;
}

uint64_t sub_19D725A54()
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  if (sub_19D714D40() == 1 || sub_19D714D40() == 2 || sub_19D714D40() == 3)
  {
    int v70 = -489993439;
    long long v69 = xmmword_19D779158;
    int v68 = 886875686;
    long long v67 = xmmword_19D77916C;
    if (MGIsDeviceOneOfType((const UInt8 *)&v69, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v67)) {
      goto LABEL_8;
    }
    int v66 = 28030256;
    long long v65 = xmmword_19D778C58;
    int v64 = 1214363620;
    long long v63 = xmmword_19D778C6C;
    int v62 = -798153473;
    long long v61 = xmmword_19D778AC8;
    if (MGIsDeviceOneOfType((const UInt8 *)&v65, v7, v8, v9, v10, v11, v12, v13, (uint64_t)&v63)) {
      goto LABEL_8;
    }
    int v60 = -776721724;
    long long v59 = xmmword_19D778ADC;
    int v58 = 729118884;
    long long v57 = xmmword_19D77911C;
    int v56 = -1403227947;
    long long v55 = xmmword_19D779108;
    int v54 = 1046806126;
    long long v53 = xmmword_19D779130;
    int v52 = -188760945;
    long long v51 = xmmword_19D779144;
    if (MGIsDeviceOneOfType((const UInt8 *)&v59, v14, v15, v16, v17, v18, v19, v20, (uint64_t)&v57)) {
      goto LABEL_8;
    }
    int v50 = -350584140;
    long long v49 = xmmword_19D779180;
    int v48 = 368778837;
    long long v47 = xmmword_19D7791A8;
    int v46 = -1418383976;
    long long v45 = xmmword_19D779194;
    int v44 = -1213485500;
    long long v43 = xmmword_19D7791BC;
    if (MGIsDeviceOneOfType((const UInt8 *)&v49, v21, v22, v23, v24, v25, v26, v27, (uint64_t)&v47))
    {
LABEL_8:
      uint64_t v35 = MEMORY[0x1E4F1CFC8];
    }
    else
    {
      int v42 = -38605833;
      long long v41 = xmmword_19D778C08;
      int v40 = -894965712;
      long long v39 = xmmword_19D778C1C;
      int v38 = MGIsDeviceOneOfType((const UInt8 *)&v41, v28, v29, v30, v31, v32, v33, v34, (uint64_t)&v39);
      uint64_t v35 = MEMORY[0x1E4F1CFC8];
      if (!v38) {
        uint64_t v35 = MEMORY[0x1E4F1CFD0];
      }
    }
  }
  else
  {
    int v37 = sub_19D714D40();
    uint64_t v35 = MEMORY[0x1E4F1CFD0];
    if (v37 != 6) {
      uint64_t v35 = MEMORY[0x1E4F1CFC8];
    }
  }
  return *(void *)v35;
}

CFTypeRef sub_19D725D9C()
{
  return sub_19D739C38(2, 0, 1);
}

BOOL sub_19D725DAC()
{
  return sub_19D7145C8("IODeviceTree:/product/camera", @"SKBEzVsOS9Wr/WlkVtlUMQ", 102);
}

CFNumberRef sub_19D725DC4()
{
  return sub_19D717F48("IODeviceTree:/product/facetime", @"+U0jSj4F2EfE+Vqj22IavA", 116);
}

CFTypeRef sub_19D725DDC()
{
  return sub_19D7357B0(@"FrontCameraModuleSerialNumString");
}

BOOL sub_19D725DE8(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"qlcdNkarcGLcbW3HvBhwaA", a2);
}

BOOL sub_19D725E10(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"qlcdNkarcGLcbW3HvBhwaA", 70, a2);
}

uint64_t sub_19D725E24()
{
  return 1;
}

CFTypeRef sub_19D725E2C()
{
  return sub_19D739990(3, 0, 2);
}

BOOL sub_19D725E3C(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"xOEH0P1H/1jmYe2t54+5cQ", a2);
}

BOOL sub_19D725E64(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"xOEH0P1H/1jmYe2t54+5cQ", 77, a2);
}

CFNumberRef sub_19D725E78()
{
  CFNumberRef result = (CFNumberRef)sub_19D742F30((uint64_t)"IODeviceTree:/arm-io", @"mesa", 0, @"mesaType", 0);
  if (!result)
  {
    if (MGGetBoolAnswer((const char **)@"HV7WDiidgMf7lwAu++Lk5w"))
    {
      int valuePtr = 0;
      return CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL sub_19D725EF0()
{
  return sub_19D714D40() == 1;
}

BOOL sub_19D725F10()
{
  return !sub_19D7145C8("IODeviceTree:/product/maps", @"2lNKobEIQqX50ohy1JBqCA", 110);
}

CFTypeRef sub_19D725F40()
{
  CFTypeID TypeID = CFBooleanGetTypeID();

  return sub_19D738F78((uint64_t)"copyWifiCallingSecondaryDeviceCapability", (uint64_t)&unk_1EEF8FC80, TypeID);
}

BOOL sub_19D725F7C()
{
  return sub_19D712390("IODeviceTree:/chosen", @"grEfqkFsEkgnJH1nl9sodw", 101);
}

CFTypeRef sub_19D725F94()
{
  return sub_19D7128AC(1, "wlan", @"wifi-antenna-sku-info");
}

uint64_t sub_19D725FAC()
{
  int v3 = -1;
  BOOL v0 = sub_19D712B14((const char **)@"eJGhnVvylF3dMOHBKJzeiw", 5, 5, kCFNumberSInt32Type, &v3);
  if (v0 && v3 > 0) {
    uint64_t v1 = MEMORY[0x1E4F1CFD0];
  }
  else {
    uint64_t v1 = MEMORY[0x1E4F1CFC8];
  }
  return *(void *)v1;
}

const void *sub_19D726014()
{
  return sub_19D710BBC((const char **)@"A62OafQ85EJAiiqKn4agtg", 0);
}

BOOL sub_19D726024()
{
  return sub_19D7145C8("IODeviceTree:/buttons", @"MzxVeXMzucmEMx2lw8Pg1Q", 111);
}

BOOL sub_19D72603C()
{
  return sub_19D7145C8("IODeviceTree:/product/camera", @"JQr1mcESYcN648vrcZPJEA", 102);
}

BOOL sub_19D726054()
{
  return sub_19D714D40() != 4;
}

BOOL sub_19D726074()
{
  return sub_19D7145C8("IODeviceTree:/product/camera", @"sBBgbCSIQcUOXwgaDW/Xew", 97);
}

CFStringRef sub_19D72608C()
{
  CFDataRef v0 = (const __CFData *)sub_19D710BBC((const char **)@"jSDzacs4RYWnWxn142UBLQ", 0);
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  CFTypeID v2 = CFGetTypeID(v0);
  if (v2 != CFDataGetTypeID() || CFDataGetLength(v1) < 6) {
    goto LABEL_9;
  }
  CFIndex Length = CFDataGetLength(v1);
  BytePtr = CFDataGetBytePtr(v1);
  CFMutableStringRef Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, @"%02x", *BytePtr);
  if (Length >= 2)
  {
    CFIndex v6 = Length - 1;
    uint64_t v7 = (unsigned __int8 *)(BytePtr + 1);
    do
    {
      unsigned int v8 = *v7++;
      CFStringAppendFormat(Mutable, 0, @":%02x", v8);
      --v6;
    }
    while (v6);
  }
  if (Mutable)
  {
    CFStringRef Copy = CFStringCreateCopy(0, Mutable);
    CFRelease(Mutable);
  }
  else
  {
LABEL_9:
    CFStringRef Copy = 0;
  }
  CFRelease(v1);
  return Copy;
}

BOOL sub_19D7261AC(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"k5lVWbXuiZHLA17KGiVUAA", a2);
}

BOOL sub_19D7261D4(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"k5lVWbXuiZHLA17KGiVUAA", 66, a2);
}

BOOL sub_19D7261E8()
{
  return sub_19D71DBE0("armv7s");
}

BOOL sub_19D7261F4()
{
  return sub_19D7145C8("IODeviceTree:/arm-io/isp", @"aHrkhDFY/f2ophZ5/MqX0w", 102);
}

CFDataRef sub_19D72620C()
{
  if (MGGetBoolAnswer((const char **)@"8DHlxr5ECKhTSL3HmlZQGQ")
    || (CFDataRef result = (CFDataRef)sub_19D71A230("IODeviceTree:/chosen", @"mac-address-bluetooth0", 0)) == 0
    && (CFDataRef result = (CFDataRef)sub_19D73A888("bluetooth")) == 0)
  {
    return sub_19D73E598(0x424D6163u);
  }
  return result;
}

BOOL sub_19D72627C(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"jSDzacs4RYWnWxn142UBLQ", a2);
}

BOOL sub_19D7262A4(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"jSDzacs4RYWnWxn142UBLQ", 66, a2);
}

uint64_t sub_19D7262B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  int v37 = -526227167;
  long long v36 = xmmword_19D77907C;
  int v35 = -1509831889;
  long long v34 = xmmword_19D779090;
  if (MGIsDeviceOneOfType((const UInt8 *)&v36, a2, a3, a4, a5, a6, a7, a8, (uint64_t)&v34)
    || (int v33 = 289690957,
        long long v32 = xmmword_19D778CA8,
        int v31 = 586720268,
        long long v30 = xmmword_19D778CBC,
        MGIsDeviceOneOfType((const UInt8 *)&v32, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v30)))
  {
    uint64_t v15 = MEMORY[0x1E4F1CFC8];
  }
  else if (sub_19D714D40() == 6)
  {
    int v29 = 368885834;
    long long v28 = xmmword_19D779054;
    int v27 = -414334491;
    long long v26 = xmmword_19D779068;
    int v24 = MGIsDeviceOneOfType((const UInt8 *)&v28, v17, v18, v19, v20, v21, v22, v23, (uint64_t)&v26);
    uint64_t v15 = MEMORY[0x1E4F1CFC8];
    if (!v24) {
      uint64_t v15 = MEMORY[0x1E4F1CFD0];
    }
  }
  else
  {
    int v25 = sub_19D714D40();
    uint64_t v15 = MEMORY[0x1E4F1CFD0];
    if (v25 == 7) {
      uint64_t v15 = MEMORY[0x1E4F1CFC8];
    }
  }
  return *(void *)v15;
}

uint64_t sub_19D726434()
{
  int v0 = sub_19D7174E8();
  uint64_t v1 = MEMORY[0x1E4F1CFD0];
  if (!v0) {
    uint64_t v1 = MEMORY[0x1E4F1CFC8];
  }
  return *(void *)v1;
}

CFTypeRef sub_19D726468()
{
  return sub_19D7128AC(1, "AppleOceanComputeMCU", @"Carrier Slot");
}

CFNumberRef sub_19D726480()
{
  return sub_19D717F48("IODeviceTree:/product/camera", @"vmZuX/fdqt3gKhonHYLyUw", 97);
}

uint64_t sub_19D726498()
{
  return sub_19D73E2D0(0x43474D74u);
}

BOOL sub_19D7264A4()
{
  return sub_19D7145C8("IODeviceTree:/product/haptics", @"OtnrTIhWBtyPo45BcApMTw", 115);
}

const void *sub_19D7264BC()
{
  return sub_19D710BBC((const char **)@"V2Ykm/0M3CA6nyNhwNInsg", 0);
}

uint64_t sub_19D7264CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  int v14 = -337121064;
  long long v13 = xmmword_19D779220;
  int v12 = 450980336;
  long long v11 = xmmword_19D779234;
  int v8 = MGIsDeviceOneOfType((const UInt8 *)&v13, a2, a3, a4, a5, a6, a7, a8, (uint64_t)&v11);
  uint64_t v9 = MEMORY[0x1E4F1CFD0];
  if (!v8) {
    uint64_t v9 = MEMORY[0x1E4F1CFC8];
  }
  return *(void *)v9;
}

CFStringRef sub_19D726578()
{
  return sub_19D717CB4("IODeviceTree:/chosen", @"cganRwxlDnONJx4WeDI0kQ", 102);
}

BOOL sub_19D726590()
{
  return sub_19D7145C8("IODeviceTree:/arm-io/aop", @"hh/NoWpEoq1VF4lGDdPUpw", 114);
}

uint64_t sub_19D7265A8()
{
  if (MGGetBoolAnswer((const char **)@"mtHZd1H8XJ2DMVtNVUSkag") && sub_19D713E18(@"CH")) {
    uint64_t v0 = MEMORY[0x1E4F1CFD0];
  }
  else {
    uint64_t v0 = MEMORY[0x1E4F1CFC8];
  }
  return *(void *)v0;
}

CFNumberRef sub_19D7265F4()
{
  uint64_t v8 = 0x1A80000000;
  uint64_t valuePtr = 0x400000000;
  uint64_t v7 = 0xC00000000;
  uint64_t v0 = sub_19D710358();
  uint64_t v1 = v0;
  if (v0 < 0x2540BE4001)
  {
    if (v0 < 0xEE6B28001)
    {
      CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      if (v1 < 0x773594001) {
        p_uint64_t valuePtr = &valuePtr;
      }
      else {
        p_uint64_t valuePtr = &v7;
      }
    }
    else
    {
      CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      p_uint64_t valuePtr = &v8;
    }
  }
  else
  {
    uint64_t v5 = v0 - 0x380000000;
    CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    p_uint64_t valuePtr = &v5;
  }
  return CFNumberCreate(v2, kCFNumberSInt64Type, p_valuePtr);
}

BOOL sub_19D7266C4()
{
  return sub_19D714D40() != 4;
}

BOOL sub_19D7266E8(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"67x5O+zO+JwnGgmKlq+qdA", a2);
}

BOOL sub_19D726710(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"67x5O+zO+JwnGgmKlq+qdA", 68, a2);
}

CFTypeRef sub_19D726724()
{
  return sub_19D735FA8(@"SavageSNUM");
}

BOOL sub_19D726730(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"LE2kQ7U1iM32AmlhYvlagg", a2);
}

BOOL sub_19D726758(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"LE2kQ7U1iM32AmlhYvlagg", 83, a2);
}

uint64_t sub_19D72676C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  int v29 = -38605833;
  long long v28 = xmmword_19D778C08;
  int v27 = -894965712;
  long long v26 = xmmword_19D778C1C;
  int v25 = -2101636455;
  long long v24 = xmmword_19D778C30;
  int v23 = -1955568593;
  long long v22 = xmmword_19D778C44;
  if (MGIsDeviceOneOfType((const UInt8 *)&v28, a2, a3, a4, a5, a6, a7, a8, (uint64_t)&v26)
    || sub_19D714D40() == 6)
  {
    uint64_t v15 = MEMORY[0x1E4F1CFC8];
  }
  else
  {
    int v21 = -926344036;
    long long v20 = xmmword_19D778B90;
    int v19 = -954998212;
    long long v18 = xmmword_19D778BA4;
    int v16 = MGIsDeviceOneOfType((const UInt8 *)&v20, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v18);
    uint64_t v15 = MEMORY[0x1E4F1CFC8];
    if (!v16) {
      uint64_t v15 = MEMORY[0x1E4F1CFD0];
    }
  }
  return *(void *)v15;
}

uint64_t sub_19D7268EC()
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (sub_19D714D40() != 6) {
    return 0;
  }
  int v11 = -2085056298;
  long long v10 = xmmword_19D778A64;
  int v9 = 1860682089;
  long long v8 = xmmword_19D778A50;
  return MGIsDeviceOneOfType((const UInt8 *)&v10, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v8) ^ 1;
}

BOOL sub_19D726AF0()
{
  CFPropertyListRef v0 = sub_19D71DA6C(@"com.apple.radios.plist", @"AirplaneMode");
  CFPropertyListRef v1 = v0;
  CFPropertyListRef v2 = (CFPropertyListRef)*MEMORY[0x1E4F1CFD0];
  if (v0) {
    CFRelease(v0);
  }
  return v1 == v2;
}

CFNumberRef sub_19D726B44()
{
  return sub_19D717F48("IODeviceTree:/chosen", @"xXBT4e92qXwQo3SYmACj3w", 100);
}

BOOL sub_19D726B5C(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"Z/TJS0IaLyq10dcSvUTGPg", a2);
}

BOOL sub_19D726B84(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"Z/TJS0IaLyq10dcSvUTGPg", 68, a2);
}

CFNumberRef sub_19D726B98()
{
  return sub_19D7140D0(3u);
}

BOOL sub_19D726BA0()
{
  return sub_19D7145C8("IODeviceTree:/chosen", @"U1fcnNYCEu9uH1bg3/6PKQ", 105);
}

uint64_t sub_19D726BB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  int v36 = -414334491;
  long long v35 = xmmword_19D779068;
  int v34 = -1509831889;
  long long v33 = xmmword_19D779090;
  if (MGIsDeviceOneOfType((const UInt8 *)&v35, a2, a3, a4, a5, a6, a7, a8, (uint64_t)&v33)
    || (int v32 = 289690957,
        long long v31 = xmmword_19D778CA8,
        int v30 = 586720268,
        long long v29 = xmmword_19D778CBC,
        MGIsDeviceOneOfType((const UInt8 *)&v31, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v29))
    || sub_19D714D40() != 6)
  {
    uint64_t v23 = MEMORY[0x1E4F1CFC8];
  }
  else
  {
    int v28 = 368885834;
    long long v27 = xmmword_19D779054;
    int v26 = -526227167;
    long long v25 = xmmword_19D77907C;
    int v22 = MGIsDeviceOneOfType((const UInt8 *)&v27, v15, v16, v17, v18, v19, v20, v21, (uint64_t)&v25);
    uint64_t v23 = MEMORY[0x1E4F1CFC8];
    if (!v22) {
      uint64_t v23 = MEMORY[0x1E4F1CFD0];
    }
  }
  return *(void *)v23;
}

uint64_t sub_19D726D14()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (sub_19D714D40() == 7) {
    return 3;
  }
  if (sub_19D714D40() == 4)
  {
    int v16 = 1839812531;
    long long v15 = xmmword_19D7789B0;
    if ((MGIsDeviceOfType((const UInt8 *)&v15) & 1) == 0)
    {
      int v14 = -435113336;
      long long v13 = xmmword_19D7789C4;
      if (MGIsDeviceOfType((const UInt8 *)&v13)) {
        return 3;
      }
      else {
        return 5;
      }
    }
    return 1;
  }
  if (sub_19D714D40() == 6)
  {
    if (!sub_19D716960((BOOL)@"M9")) {
      return 1;
    }
    uint64_t v0 = 2;
    if (!sub_19D7175F4((BOOL)@"M9"))
    {
      if (sub_19D7175F4((BOOL)@"M10")) {
        return 2;
      }
      else {
        return 3;
      }
    }
  }
  else
  {
    int v12 = 317289457;
    long long v11 = xmmword_19D7792E8;
    int v10 = 401945557;
    long long v9 = xmmword_19D7792FC;
    if (MGIsDeviceOneOfType((const UInt8 *)&v11, v1, v2, v3, v4, v5, v6, v7, (uint64_t)&v9)) {
      return 3;
    }
    else {
      return 4;
    }
  }
  return v0;
}

const void *sub_19D726F58()
{
  return sub_19D7155AC(@"BuildID", 1);
}

BOOL sub_19D726F68()
{
  if (sub_19D714D40() != 3) {
    return 0;
  }

  return sub_19D71AA8C(@"baseband", 0);
}

BOOL sub_19D726FB4(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"U/nyu97+Q5SFY9yJKJTuSA", a2);
}

BOOL sub_19D726FDC(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"U/nyu97+Q5SFY9yJKJTuSA", 84, a2);
}

BOOL sub_19D726FF0()
{
  return sub_19D7145C8("IODeviceTree:/product/camera", @"DIXX7JMbm7glu49f+xi4zQ", 108);
}

BOOL sub_19D727008()
{
  return sub_19D712390("IODeviceTree:/product/camera", @"gk8sn5Vi0s088gEvssfbOg", 102);
}

BOOL sub_19D727024(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"0D3qCmmfJ/i1mpmjOsV7EA", a2);
}

BOOL sub_19D72704C(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"0D3qCmmfJ/i1mpmjOsV7EA", 83, a2);
}

BOOL sub_19D727060()
{
  return sub_19D714D40() != 4;
}

BOOL sub_19D727080()
{
  return !sub_19D713E18(@"TU");
}

BOOL sub_19D7270A4()
{
  return sub_19D712390("IODeviceTree:/product/audio", @"ieuwDGiHrHoYRjSl6gT+1A", 115);
}

BOOL sub_19D7270BC()
{
  return sub_19D711FD4(@"ChinaBrick", @"RegionalBehaviorChinaBrick");
}

CFNumberRef sub_19D7270D0()
{
  return sub_19D717F48("IODeviceTree:/product/camera", @"qAAQUPLjf+Hl4UM3WY2qgw", 102);
}

CFStringRef sub_19D7270E8()
{
  return sub_19D717CB4("IODeviceTree:/product", @"vq2wpvLzyYLEApQs9cs52A", 112);
}

BOOL sub_19D727100(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"YVNo6vlMjhgQ9yGYV8gatw", a2);
}

BOOL sub_19D727128(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"YVNo6vlMjhgQ9yGYV8gatw", 80, a2);
}

uint64_t sub_19D72713C()
{
  uint64_t valuePtr = 0;
  CFTypeRef v0 = IOPSCopyPowerSourcesInfo();
  if (!v0)
  {
    int v68 = sub_19D71EF70("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
    _MGLog((uint64_t)v68, 3643, @"Could not get power source info", v69, v70, v71, v72, v73, v80[0]);
    uint64_t v43 = 0;
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
      return v43;
    }
    *(_WORD *)long long v80 = 0;
    _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Could not get power source info", v80, 2u);
    return 0;
  }
  uint64_t v1 = v0;
  CFArrayRef v2 = IOPSCopyPowerSourcesList(v0);
  if (!v2)
  {
    long long v74 = sub_19D71EF70("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
    _MGLog((uint64_t)v74, 3646, @"Could not get list of power sources", v75, v76, v77, v78, v79, v80[0]);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long v80 = 0;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Could not get list of power sources", v80, 2u);
    }
    CFRelease(v1);
    return 0;
  }
  CFArrayRef v3 = v2;
  if (CFArrayGetCount(v2) < 1)
  {
LABEL_55:
    uint64_t v43 = 0;
    goto LABEL_56;
  }
  CFIndex v4 = 0;
  uint64_t v5 = MEMORY[0x1E4F14500];
  while (1)
  {
    CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v3, v4);
    CFDictionaryRef v7 = IOPSGetPowerSourceDescription(v1, ValueAtIndex);
    if (!v7)
    {
      long long v13 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v13) {
        uint64_t v19 = v13 + 1;
      }
      else {
        uint64_t v19 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      }
      _MGLog((uint64_t)v19, 3656, @"Could not get dictionary for power source", v14, v15, v16, v17, v18, v80[0]);
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_36;
      }
      *(_WORD *)long long v80 = 0;
      uint64_t v20 = v5;
      uint64_t v21 = "Could not get dictionary for power source";
LABEL_35:
      _os_log_impl(&dword_19D70E000, v20, OS_LOG_TYPE_DEFAULT, v21, v80, 2u);
      goto LABEL_36;
    }
    CFDictionaryRef v8 = v7;
    int Value = CFDictionaryGetValue(v7, @"Power Source State");
    if (!Value)
    {
      int v22 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v22) {
        int v28 = v22 + 1;
      }
      else {
        int v28 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      }
      _MGLog((uint64_t)v28, 3663, @"No kIOPSPowerSourceStateKey in power source dictionary", v23, v24, v25, v26, v27, v80[0]);
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_36;
      }
      *(_WORD *)long long v80 = 0;
      uint64_t v20 = v5;
      uint64_t v21 = "No kIOPSPowerSourceStateKey in power source dictionary";
      goto LABEL_35;
    }
    if (CFEqual(Value, @"AC Power")) {
      goto LABEL_38;
    }
    CFNumberRef v10 = (const __CFNumber *)CFDictionaryGetValue(v8, @"Current Capacity");
    if (!v10)
    {
      long long v29 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v29) {
        long long v35 = v29 + 1;
      }
      else {
        long long v35 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      }
      _MGLog((uint64_t)v35, 3678, @"No kIOPSCurrentCapacityKey in power source dictionary", v30, v31, v32, v33, v34, v80[0]);
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_36;
      }
      *(_WORD *)long long v80 = 0;
      uint64_t v20 = v5;
      uint64_t v21 = "No kIOPSCurrentCapacityKey in power source dictionary";
      goto LABEL_35;
    }
    if (!CFNumberGetValue(v10, kCFNumberFloatType, &valuePtr))
    {
      int v44 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v44) {
        int v50 = v44 + 1;
      }
      else {
        int v50 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      }
      _MGLog((uint64_t)v50, 3683, @"Could not convert CFNumber to float", v45, v46, v47, v48, v49, v80[0]);
      uint64_t v43 = 0;
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_56;
      }
      *(_WORD *)long long v80 = 0;
      long long v51 = MEMORY[0x1E4F14500];
      int v52 = "Could not convert CFNumber to float";
LABEL_54:
      _os_log_impl(&dword_19D70E000, v51, OS_LOG_TYPE_DEFAULT, v52, v80, 2u);
      goto LABEL_55;
    }
    CFNumberRef v11 = (const __CFNumber *)CFDictionaryGetValue(v8, @"Max Capacity");
    if (!v11)
    {
      int v36 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v36) {
        int v42 = v36 + 1;
      }
      else {
        int v42 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      }
      _MGLog((uint64_t)v42, 3690, @"No kIOPSMaxCapacityKey in power source dictionary", v37, v38, v39, v40, v41, v80[0]);
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_36;
      }
      *(_WORD *)long long v80 = 0;
      uint64_t v20 = v5;
      uint64_t v21 = "No kIOPSMaxCapacityKey in power source dictionary";
      goto LABEL_35;
    }
    if (!CFNumberGetValue(v11, kCFNumberFloatType, (char *)&valuePtr + 4))
    {
      long long v53 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v53) {
        long long v59 = v53 + 1;
      }
      else {
        long long v59 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      }
      _MGLog((uint64_t)v59, 3695, @"Could not convert CFNumber to float", v54, v55, v56, v57, v58, v80[0]);
      uint64_t v43 = 0;
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_56;
      }
      *(_WORD *)long long v80 = 0;
      long long v51 = MEMORY[0x1E4F14500];
      int v52 = "Could not convert CFNumber to float";
      goto LABEL_54;
    }
    if (*((float *)&valuePtr + 1) == 0.0) {
      break;
    }
    float v12 = sub_19D73264C() + -0.05;
    if ((float)(*(float *)&valuePtr / *((float *)&valuePtr + 1)) >= v12)
    {
LABEL_38:
      uint64_t v43 = 1;
      goto LABEL_56;
    }
LABEL_36:
    if (CFArrayGetCount(v3) <= ++v4) {
      goto LABEL_55;
    }
  }
  int v60 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v60) {
    int v66 = v60 + 1;
  }
  else {
    int v66 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  }
  _MGLog((uint64_t)v66, 3699, @"Battery max capacity is reported as 0", v61, v62, v63, v64, v65, v80[0]);
  uint64_t v43 = 0;
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long v80 = 0;
    long long v51 = MEMORY[0x1E4F14500];
    int v52 = "Battery max capacity is reported as 0";
    goto LABEL_54;
  }
LABEL_56:
  CFRelease(v1);
  CFRelease(v3);
  return v43;
}

BOOL sub_19D727614()
{
  if (sub_19D7174E8())
  {
    CFDataRef v0 = sub_19D72FBCC();
    if (v0)
    {
      CFDataRef v1 = v0;
      CFTypeID v2 = CFGetTypeID(v0);
      if (v2 == CFDataGetTypeID() && CFDataGetLength(v1) >= 6)
      {
        BytePtr = CFDataGetBytePtr(v1);
        if (*BytePtr)
        {
          BOOL v4 = 1;
        }
        else
        {
          unint64_t v14 = 0;
          do
          {
            unint64_t v15 = v14;
            if (v14 == 5) {
              break;
            }
            ++v14;
          }
          while (!BytePtr[v15 + 1]);
          BOOL v4 = v15 < 5;
        }
      }
      else
      {
        BOOL v4 = 0;
      }
      CFRelease(v1);
      return v4;
    }
    return 0;
  }
  if (MGGetBoolAnswer((const char **)@"kjKnJNt7HY90iN6rpbSeFQ")) {
    return 0;
  }
  uint64_t v5 = (uint64_t (*)())*((void *)off_1E9449170 + 97);
  if (!v5) {
    uint64_t v5 = (uint64_t (*)())sub_19D71A930(97, 2);
  }
  if (v5 == sub_19D71EFC0)
  {
    mach_port_t v8 = *MEMORY[0x1E4F2EEF0];
    CFDictionaryRef v9 = IOServiceMatching("IOPlatformExpertDevice");
    io_service_t MatchingService = IOServiceGetMatchingService(v8, v9);
    if (MatchingService)
    {
      io_object_t v11 = MatchingService;
      BOOL v4 = 1;
      CFDataRef v12 = (const __CFData *)IORegistryEntrySearchCFProperty(MatchingService, "IODeviceTree", @"no-sdio-devices", (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1u);
      if (v12)
      {
        CFDataRef v13 = v12;
        *(_DWORD *)buffer = 0;
        v17.CFIndex location = 0;
        v17.length = 4;
        CFDataGetBytes(v12, v17, buffer);
        BOOL v4 = *(_DWORD *)buffer == 0;
        CFRelease(v13);
      }
      IOObjectRelease(v11);
    }
    else
    {
      return 1;
    }
  }
  else
  {
    uint64_t v6 = (unsigned int (*)(void))*((void *)off_1E9449170 + 97);
    if (!v6) {
      uint64_t v6 = (unsigned int (*)(void))sub_19D71A930(97, 2);
    }
    return v6() != 0;
  }
  return v4;
}

BOOL sub_19D7277D4()
{
  return sub_19D714D40() != 7;
}

CFTypeRef sub_19D7277F4()
{
  return sub_19D739990(1, 1, 0);
}

BOOL sub_19D727804(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"j4dedPnpeXouudM1+j3dsQ", a2);
}

BOOL sub_19D72782C(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"j4dedPnpeXouudM1+j3dsQ", 73, a2);
}

CFTypeRef sub_19D727840()
{
  return sub_19D7128AC(0, "AppleEmbeddedNVMeController", @"Serial Number");
}

BOOL sub_19D727858(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"PcQWbThCb7iLEW+EoqZdEQ", a2);
}

BOOL sub_19D727880(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"PcQWbThCb7iLEW+EoqZdEQ", 78, a2);
}

BOOL sub_19D727894()
{
  return !MGGetBoolAnswer((const char **)@"s+gaKNe68Gs3PfqKrZhi1w");
}

BOOL sub_19D7278B8()
{
  return sub_19D71DCF8(@"arm64e");
}

BOOL sub_19D7278C4()
{
  return sub_19D7145C8("IODeviceTree:/product/camera", @"LWxSM4CmFZMwzYclSh43gg", 114);
}

const void *sub_19D7278DC()
{
  return sub_19D71A230("IODeviceTree:/arm-io/disp0", @"t56wS9db+T2F2bxBpYSX8Q", 101);
}

BOOL sub_19D7278F4(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"yPqGUljqvtItkM6XMCZaQw", a2);
}

BOOL sub_19D72791C(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"yPqGUljqvtItkM6XMCZaQw", 68, a2);
}

uint64_t sub_19D727930()
{
  if (sub_19D714D40() == 3 || sub_19D714D40() == 4)
  {
    uint64_t v0 = MEMORY[0x1E4F1CFC8];
  }
  else
  {
    int v2 = sub_19D714D40();
    uint64_t v3 = MEMORY[0x1E4F1CFC8];
    uint64_t v0 = MEMORY[0x1E4F1CFC8];
    if (v2 != 2)
    {
      int v4 = sub_19D714D40();
      uint64_t v0 = MEMORY[0x1E4F1CFD0];
      if (v4 != 1 && sub_19D714D40() != 6) {
        uint64_t v0 = v3;
      }
    }
  }
  return *(void *)v0;
}

uint64_t sub_19D7279AC()
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (sub_19D714D40() != 6) {
    return 0;
  }
  int v11 = -338255497;
  long long v10 = xmmword_19D7789D8;
  int v9 = 152704997;
  long long v8 = xmmword_19D7789EC;
  return MGIsDeviceOneOfType((const UInt8 *)&v10, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v8) ^ 1;
}

BOOL sub_19D727A98()
{
  uint64_t v0 = sub_19D712EC0();
  BOOL v7 = sub_19D7168F8((BOOL)v0, @"Internal", v1, v2, v3, v4, v5, v6, @"Lite Internal");
  if (v0) {
    CFRelease(v0);
  }
  return v7;
}

CFNumberRef sub_19D727AFC()
{
  return sub_19D717F48("IODeviceTree:/baseband", @"50/CmBTX6jhkb8Z61hzwhQ", 99);
}

CFDataRef sub_19D727B14()
{
  return sub_19D73BAD8("AppleSEPManager", 0x2Bu, 0, 0, 0x8000uLL);
}

BOOL sub_19D727B30(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"HMpTbnbcAb+mQDi8O71h6Q", a2);
}

BOOL sub_19D727B58(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"HMpTbnbcAb+mQDi8O71h6Q", 76, a2);
}

uint64_t sub_19D727B6C()
{
  uint64_t v0 = *MEMORY[0x1E4F1CFC8];
  CFDataRef v1 = (const __CFData *)sub_19D71A230("IODeviceTree:/buttons", @"button-names", 0);
  if (v1)
  {
    CFDataRef v2 = v1;
    int64_t Length = CFDataGetLength(v1);
    BytePtr = CFDataGetBytePtr(v2);
    if (Length >= 1)
    {
      uint64_t v5 = (const char *)BytePtr;
      uint64_t v6 = &BytePtr[Length];
      while (strncmp(v5, "app", Length))
      {
        size_t v7 = strnlen(v5, Length);
        v5 += v7 + 1;
        Length -= v7 + 1;
        if (v5 >= (const char *)v6) {
          goto LABEL_8;
        }
      }
      uint64_t v0 = *MEMORY[0x1E4F1CFD0];
    }
LABEL_8:
    CFRelease(v2);
  }
  return v0;
}

BOOL sub_19D727C3C()
{
  int v0 = sub_19D714D40();
  if (_CFMZEnabled()) {
    return 0;
  }
  int v2 = sub_19D714D40();
  BOOL result = 1;
  if (v2 != 1 && v0 != 3) {
    return sub_19D714D40() == 2
  }
        || sub_19D714D40() == 6
        || sub_19D714D40() == 11;
  return result;
}

BOOL sub_19D727CB8()
{
  int valuePtr = 69;
  int v0 = (uint64_t (*)(void, void))*((void *)off_1E9449170 + 100);
  if (!v0) {
    int v0 = (uint64_t (*)(void, void))sub_19D71A930(100, 2);
  }
  CFAllocatorRef v1 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v2 = v0(*MEMORY[0x1E4F1CF80], 0);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = (const void *)v2;
  uint64_t v4 = (uint64_t (*)(const void *))*((void *)off_1E9449170 + 99);
  if (!v4) {
    uint64_t v4 = (uint64_t (*)(const void *))sub_19D71A930(99, 2);
  }
  CFArrayRef v5 = (const __CFArray *)v4(v3);
  if (!v5)
  {
    CFRelease(v3);
    return 0;
  }
  CFArrayRef v6 = v5;
  if (!CFArrayGetCount(v5))
  {
    CFArrayRef v10 = 0;
LABEL_18:
    CFNumberRef v11 = 0;
    goto LABEL_19;
  }
  size_t v7 = (uint64_t (*)(const void *, void))*((void *)off_1E9449170 + 98);
  if (!v7) {
    size_t v7 = (uint64_t (*)(const void *, void))sub_19D71A930(98, 2);
  }
  CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v6, 0);
  int v9 = (void *)*((void *)off_1E9449170 + 103);
  if (!v9) {
    int v9 = (void *)sub_19D71A930(103, 1);
  }
  CFArrayRef v10 = (const __CFArray *)v7(ValueAtIndex, *v9);
  if (!v10) {
    goto LABEL_18;
  }
  CFNumberRef v11 = CFNumberCreate(v1, kCFNumberSInt32Type, &valuePtr);
  if (!v11)
  {
LABEL_19:
    BOOL v12 = 0;
    goto LABEL_20;
  }
  v15.length = CFArrayGetCount(v10);
  v15.CFIndex location = 0;
  BOOL v12 = CFArrayContainsValue(v10, v15, v11) != 0;
LABEL_20:
  CFRelease(v3);
  CFRelease(v6);
  if (v10) {
    CFRelease(v10);
  }
  if (v11) {
    CFRelease(v11);
  }
  return v12;
}

CFMutableArrayRef sub_19D727E48()
{
  CFMutableArrayRef result = CFArrayCreateMutable(0, 0, 0);
  if (result)
  {
    CFAllocatorRef v1 = result;
    if (sub_19D7145C8("IODeviceTree:/product", @"nfc-express", 0)) {
      CFArrayAppendValue(v1, @"nfc-express");
    }
    if (sub_19D7145C8("IODeviceTree:/product", @"alisha", 0)) {
      CFArrayAppendValue(v1, @"alisha");
    }
    if (sub_19D7145C8("IODeviceTree:/product", @"find-my", 0)) {
      CFArrayAppendValue(v1, @"find-my");
    }
    CFArrayRef Copy = CFArrayCreateCopy(0, v1);
    CFRelease(v1);
    return Copy;
  }
  return result;
}

uint64_t sub_19D727F1C()
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (sub_19D714D40() != 1) {
    return 0;
  }
  uint64_t result = MGGetBoolAnswer((const char **)@"8S7ydMJ4DlCUF38/hI/fJA");
  if (result)
  {
    int v11 = -232427879;
    long long v10 = xmmword_19D779284;
    int v9 = -427474227;
    long long v8 = xmmword_19D77925C;
    return MGIsDeviceOneOfType((const UInt8 *)&v10, v1, v2, v3, v4, v5, v6, v7, (uint64_t)&v8) ^ 1;
  }
  return result;
}

BOOL sub_19D728110()
{
  int v0 = sub_19D712EC0();
  BOOL v7 = sub_19D7168F8((BOOL)v0, @"Desense", v1, v2, v3, v4, v5, v6, 0);
  if (v0) {
    CFRelease(v0);
  }
  return v7;
}

const void *sub_19D728160()
{
  return sub_19D71A230("IODeviceTree:/chosen", @"kQ8nm82jb5iTBUwT2M3aIQ", 109);
}

BOOL sub_19D728178(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"5MXFoiW2zgxfIbaaTb/wvA", a2);
}

BOOL sub_19D7281A0(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"5MXFoiW2zgxfIbaaTb/wvA", 83, a2);
}

BOOL sub_19D7281B4()
{
  return sub_19D711FD4(@"GB18030", @"RegionalBehaviorGB18030");
}

const void *sub_19D7281C8()
{
  return sub_19D710BBC((const char **)@"8S7ydMJ4DlCUF38/hI/fJA", 0);
}

CFNumberRef sub_19D7281D8()
{
  int valuePtr = 0;
  CFNumberRef result = sub_19D717F48("IODeviceTree:/product/camera", @"front-max-burst-length", 0);
  if (!result)
  {
    if (MGGetBoolAnswer((const char **)@"plaYa8bKJaAF5Erc5nvZ+g")
      || MGGetBoolAnswer((const char **)@"Ty5/C8UDfdjcdR853kulmA"))
    {
      int valuePtr = 999;
    }
    return CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  }
  return result;
}

uint64_t sub_19D72824C()
{
  uint64_t v139 = *MEMORY[0x1E4F143B8];
  if (sub_19D714D40() == 1)
  {
    int v138 = -232427879;
    long long v137 = xmmword_19D779284;
    int v136 = -427474227;
    long long v135 = xmmword_19D77925C;
    int v134 = 1477534141;
    long long v133 = xmmword_19D779270;
    int v132 = -1843102369;
    long long v131 = xmmword_19D779248;
    int v130 = -820493242;
    long long v129 = xmmword_19D778D20;
    int v128 = -61007701;
    long long v127 = xmmword_19D778D34;
    int v126 = -235416490;
    long long v125 = xmmword_19D778D48;
    int v124 = -121925081;
    long long v123 = xmmword_19D778D5C;
    int v122 = 1071957977;
    long long v121 = xmmword_19D778D70;
    int v120 = 438437663;
    long long v119 = xmmword_19D778D84;
    int v118 = -382792827;
    long long v117 = xmmword_19D778D98;
    int v116 = 1575123478;
    long long v115 = xmmword_19D778DAC;
    int v114 = 123138233;
    long long v113 = xmmword_19D778DC0;
    int v112 = 681511593;
    long long v111 = xmmword_19D778DD4;
    int v110 = 713503427;
    long long v109 = xmmword_19D778DE8;
    int v108 = -1632750650;
    long long v107 = xmmword_19D778DFC;
    int v106 = -1431778695;
    long long v105 = xmmword_19D778E10;
    BOOL v7 = &v135;
    long long v8 = &v137;
    return MGIsDeviceOneOfType((const UInt8 *)v8, v0, v1, v2, v3, v4, v5, v6, (uint64_t)v7) ^ 1;
  }
  if (sub_19D714D40() == 3)
  {
    int v104 = -1022451852;
    long long v103 = xmmword_19D779388;
    int v102 = 1729782187;
    long long v101 = xmmword_19D77939C;
    int v100 = 996646949;
    long long v99 = xmmword_19D77934C;
    int v98 = -563086000;
    long long v97 = xmmword_19D779338;
    int v96 = 317289457;
    long long v95 = xmmword_19D7792E8;
    int v94 = 401945557;
    long long v93 = xmmword_19D7792FC;
    int v92 = -1157300313;
    long long v91 = xmmword_19D778E24;
    int v90 = -2132668294;
    long long v89 = xmmword_19D778E38;
    int v88 = 2030516999;
    long long v87 = xmmword_19D7793B0;
    int v86 = -1276010597;
    long long v85 = xmmword_19D7793C4;
    int v84 = -762483149;
    long long v83 = xmmword_19D7793D8;
    int v82 = -1926937532;
    long long v81 = xmmword_19D7793EC;
    int v80 = -1902732724;
    long long v79 = xmmword_19D779400;
    int v78 = -342357580;
    long long v77 = xmmword_19D779414;
    int v76 = 300442574;
    long long v75 = xmmword_19D779428;
    int v74 = -1294188889;
    long long v73 = xmmword_19D77943C;
    int v72 = 1126727276;
    long long v71 = xmmword_19D778E4C;
    int v70 = 300130091;
    long long v69 = xmmword_19D778E60;
    int v68 = 343814884;
    long long v67 = xmmword_19D778E74;
    int v66 = -1675932945;
    long long v65 = xmmword_19D778E88;
    int v64 = 1278131292;
    long long v63 = xmmword_19D778E9C;
    int v62 = -1841712216;
    long long v61 = xmmword_19D778EB0;
    int v60 = 659506830;
    long long v59 = xmmword_19D778EC4;
    int v58 = 213746202;
    long long v57 = xmmword_19D778ED8;
    int v56 = 372777383;
    long long v55 = xmmword_19D778EEC;
    int v54 = -858079590;
    long long v53 = xmmword_19D778F00;
    int v52 = -212523443;
    long long v51 = xmmword_19D778F14;
    int v50 = 646100384;
    long long v49 = xmmword_19D778F28;
    int v48 = 345196535;
    long long v47 = xmmword_19D778F3C;
    int v46 = 440949464;
    long long v45 = xmmword_19D778F50;
    int v44 = -545612308;
    long long v43 = xmmword_19D778F64;
    int v42 = 1178062702;
    long long v41 = xmmword_19D778F78;
    int v40 = -695298128;
    long long v39 = xmmword_19D778F8C;
    int v38 = 804488105;
    long long v37 = xmmword_19D778FA0;
    int v36 = 1614584579;
    long long v35 = xmmword_19D778FB4;
    int v34 = 324288768;
    long long v33 = xmmword_19D778FC8;
    int v32 = 460218192;
    long long v31 = xmmword_19D778FDC;
    int v30 = 2144905009;
    long long v29 = xmmword_19D778FF0;
    int v28 = 127894440;
    long long v27 = xmmword_19D779004;
    int v26 = 1070997468;
    long long v25 = xmmword_19D779018;
    int v24 = 688565114;
    long long v23 = xmmword_19D77902C;
    int v22 = -493418906;
    long long v21 = xmmword_19D779040;
    BOOL v7 = &v101;
    long long v8 = &v103;
    return MGIsDeviceOneOfType((const UInt8 *)v8, v0, v1, v2, v3, v4, v5, v6, (uint64_t)v7) ^ 1;
  }
  uint64_t result = 0;
  if (sub_19D714D40() == 6 && sub_19D716960((BOOL)@"M11"))
  {
    int v20 = 1530338216;
    long long v19 = xmmword_19D7790A4;
    int v18 = 406601745;
    long long v17 = xmmword_19D7790B8;
    if (!MGIsDeviceOneOfType((const UInt8 *)&v19, v10, v11, v12, v13, v14, v15, v16, (uint64_t)&v17)) {
      return 1;
    }
  }
  return result;
}

CFStringRef sub_19D728B50()
{
  CFDataRef v0 = (const __CFData *)sub_19D710BBC((const char **)@"aOq/O8u9f/bpWUnKco+xgA", 0);
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  CFTypeID v2 = CFGetTypeID(v0);
  if (v2 != CFDataGetTypeID() || CFDataGetLength(v1) < 6) {
    goto LABEL_9;
  }
  CFIndex Length = CFDataGetLength(v1);
  BytePtr = CFDataGetBytePtr(v1);
  CFMutableStringRef Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, @"%02x", *BytePtr);
  if (Length >= 2)
  {
    CFIndex v6 = Length - 1;
    BOOL v7 = (unsigned __int8 *)(BytePtr + 1);
    do
    {
      unsigned int v8 = *v7++;
      CFStringAppendFormat(Mutable, 0, @":%02x", v8);
      --v6;
    }
    while (v6);
  }
  if (Mutable)
  {
    CFStringRef Copy = CFStringCreateCopy(0, Mutable);
    CFRelease(Mutable);
  }
  else
  {
LABEL_9:
    CFStringRef Copy = 0;
  }
  CFRelease(v1);
  return Copy;
}

BOOL sub_19D728C70(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"VG9TCKNqNLCHk0J6zTkuVQ", a2);
}

BOOL sub_19D728C98(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"VG9TCKNqNLCHk0J6zTkuVQ", 69, a2);
}

BOOL sub_19D728CAC()
{
  return sub_19D7145C8("IODeviceTree:/product", @"0vvGMT0ltmG03nFfaXxoHg", 115);
}

const char *sub_19D728CC4()
{
  uint64_t result = (const char *)sub_19D71ECBC();
  if (result)
  {
    return (const char *)CFStringCreateWithCString(0, result, 0x8000100u);
  }
  return result;
}

CFStringRef sub_19D728D08()
{
  return sub_19D717CB4("IODeviceTree:/product", @"pdFo85PUvIiT4FjAT6Amcw", 98);
}

BOOL sub_19D728D20()
{
  return sub_19D7145C8("IODeviceTree:/product/audio", @"supports-spatial-facetime", 0);
}

uint64_t sub_19D728D38()
{
  int v1 = 0;
  LODWORD(result) = sub_19D712B14((const char **)@"eW5H/Gwg0uqbMqFot70pYg", 5, 5, kCFNumberSInt32Type, &v1);
  if (v1 > 0) {
    return result;
  }
  else {
    return 0;
  }
}

uint64_t sub_19D728D80()
{
  uint64_t v196 = *MEMORY[0x1E4F143B8];
  if (sub_19D714D40() == 7) {
    goto LABEL_16;
  }
  if (sub_19D714D40() == 4) {
    goto LABEL_16;
  }
  int v195 = 1789837692;
  long long v194 = xmmword_19D778B18;
  int v193 = -1239654590;
  long long v192 = xmmword_19D778B40;
  int v191 = -1579092758;
  long long v190 = xmmword_19D778B68;
  int v189 = 48355600;
  long long v188 = xmmword_19D778B2C;
  int v187 = -679691073;
  long long v186 = xmmword_19D778B54;
  int v185 = 1430379884;
  long long v184 = xmmword_19D778B7C;
  if (MGIsDeviceOneOfType((const UInt8 *)&v194, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v192)) {
    goto LABEL_16;
  }
  int v183 = -1527788847;
  long long v182 = xmmword_19D779324;
  int v181 = 1532898719;
  long long v180 = xmmword_19D779310;
  int v179 = 1275676051;
  long long v178 = xmmword_19D779374;
  int v177 = 1908474541;
  long long v176 = xmmword_19D779360;
  if (MGIsDeviceOneOfType((const UInt8 *)&v182, v7, v8, v9, v10, v11, v12, v13, (uint64_t)&v180)) {
    goto LABEL_16;
  }
  int v175 = 1711910369;
  long long v174 = xmmword_19D778CF8;
  int v173 = -1282800328;
  long long v172 = xmmword_19D778D0C;
  int v171 = -2092955395;
  long long v170 = xmmword_19D778CD0;
  int v169 = 674998600;
  long long v168 = xmmword_19D778CE4;
  if (MGIsDeviceOneOfType((const UInt8 *)&v174, v14, v15, v16, v17, v18, v19, v20, (uint64_t)&v172)) {
    goto LABEL_16;
  }
  int v167 = -414334491;
  long long v166 = xmmword_19D779068;
  int v165 = -1509831889;
  long long v164 = xmmword_19D779090;
  int v163 = 289690957;
  long long v162 = xmmword_19D778CA8;
  int v161 = 586720268;
  long long v160 = xmmword_19D778CBC;
  if (MGIsDeviceOneOfType((const UInt8 *)&v166, v21, v22, v23, v24, v25, v26, v27, (uint64_t)&v164)) {
    goto LABEL_16;
  }
  int v159 = 470738981;
  long long v158 = xmmword_19D778A28;
  int v157 = 710807826;
  long long v156 = xmmword_19D778A3C;
  int v155 = 1860682089;
  long long v154 = xmmword_19D778A50;
  int v153 = -2085056298;
  long long v152 = xmmword_19D778A64;
  if (MGIsDeviceOneOfType((const UInt8 *)&v158, v28, v29, v30, v31, v32, v33, v34, (uint64_t)&v156)) {
    goto LABEL_16;
  }
  if (sub_19D714D40() == 8) {
    goto LABEL_16;
  }
  int v151 = -1403227947;
  long long v150 = xmmword_19D779108;
  int v149 = 729118884;
  long long v148 = xmmword_19D77911C;
  int v147 = 1046806126;
  long long v146 = xmmword_19D779130;
  int v145 = -188760945;
  long long v144 = xmmword_19D779144;
  if (MGIsDeviceOneOfType((const UInt8 *)&v150, v35, v36, v37, v38, v39, v40, v41, (uint64_t)&v148)) {
    goto LABEL_16;
  }
  int v143 = -1639077591;
  long long v142 = xmmword_19D778AF0;
  int v141 = 338555555;
  long long v140 = xmmword_19D778B04;
  int v139 = 1032708406;
  long long v138 = xmmword_19D778C80;
  int v137 = 729903963;
  long long v136 = xmmword_19D778C94;
  if (MGIsDeviceOneOfType((const UInt8 *)&v142, v42, v43, v44, v45, v46, v47, v48, (uint64_t)&v140)) {
    goto LABEL_16;
  }
  int v135 = 28030256;
  long long v134 = xmmword_19D778C58;
  int v133 = 1214363620;
  long long v132 = xmmword_19D778C6C;
  int v131 = -798153473;
  long long v130 = xmmword_19D778AC8;
  int v129 = -776721724;
  long long v128 = xmmword_19D778ADC;
  int v127 = -489993439;
  long long v126 = xmmword_19D779158;
  int v125 = 886875686;
  long long v124 = xmmword_19D77916C;
  if (MGIsDeviceOneOfType((const UInt8 *)&v134, v49, v50, v51, v52, v53, v54, v55, (uint64_t)&v132)) {
    goto LABEL_16;
  }
  int v123 = -350584140;
  long long v122 = xmmword_19D779180;
  int v121 = 368778837;
  long long v120 = xmmword_19D7791A8;
  int v119 = -1418383976;
  long long v118 = xmmword_19D779194;
  int v117 = -1213485500;
  long long v116 = xmmword_19D7791BC;
  if (MGIsDeviceOneOfType((const UInt8 *)&v122, v56, v57, v58, v59, v60, v61, v62, (uint64_t)&v120)) {
    goto LABEL_16;
  }
  int v115 = -199226823;
  long long v114 = xmmword_19D7792AC;
  int v113 = 1412427398;
  long long v112 = xmmword_19D7792C0;
  int v111 = -1283070668;
  long long v110 = xmmword_19D779298;
  int v109 = 160260070;
  long long v108 = xmmword_19D7792D4;
  if (MGIsDeviceOneOfType((const UInt8 *)&v114, v63, v64, v65, v66, v67, v68, v69, (uint64_t)&v112)) {
    goto LABEL_16;
  }
  int v107 = 317289457;
  long long v106 = xmmword_19D7792E8;
  int v105 = 401945557;
  long long v104 = xmmword_19D7792FC;
  if (MGIsDeviceOneOfType((const UInt8 *)&v106, v70, v71, v72, v73, v74, v75, v76, (uint64_t)&v104)
    || (int v103 = 1602014129,
        long long v102 = xmmword_19D778BCC,
        int v101 = -810116762,
        long long v100 = xmmword_19D778BE0,
        int v99 = -1195351767,
        long long v98 = xmmword_19D778BF4,
        MGIsDeviceOneOfType((const UInt8 *)&v102, v77, v78, v79, v80, v81, v82, v83, (uint64_t)&v100)))
  {
LABEL_16:
    uint64_t v91 = MEMORY[0x1E4F1CFC8];
  }
  else
  {
    int v97 = -1022451852;
    long long v96 = xmmword_19D779388;
    int v95 = 1729782187;
    long long v94 = xmmword_19D77939C;
    int v93 = MGIsDeviceOneOfType((const UInt8 *)&v96, v84, v85, v86, v87, v88, v89, v90, (uint64_t)&v94);
    uint64_t v91 = MEMORY[0x1E4F1CFC8];
    if (!v93) {
      uint64_t v91 = MEMORY[0x1E4F1CFD0];
    }
  }
  return *(void *)v91;
}

uint64_t sub_19D72958C()
{
  return 1;
}

const void *sub_19D729594()
{
  return sub_19D710BBC((const char **)@"ZApuwHXWV8RCz0iVzMnqLw", 0);
}

CFTypeRef sub_19D7295A4()
{
  return sub_19D7128AC(1, "AppleOceanComputeMCU", @"Carrier ID");
}

const void *sub_19D7295BC()
{
  return sub_19D710BBC((const char **)@"AJFQheZDyUbvI6RmBMT9Cg", 0);
}

BOOL sub_19D7295CC()
{
  return sub_19D7145C8("IODeviceTree:/product", @"H4f1y1sEDUUUROeb4FZJ4A", 110);
}

BOOL sub_19D7295E4()
{
  return *MEMORY[0x1E4F1CFD0] != 0;
}

CFTypeRef sub_19D7295FC()
{
  return sub_19D7128AC(0, "IOPMPowerSource", @"IsCharging");
}

uint64_t sub_19D729614()
{
  return 1;
}

CFArrayRef sub_19D72961C()
{
  values[3] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  int v18 = 0;
  sub_19D736A80(&v16, @"front-cam-offset-from-center");
  if (HIDWORD(v17))
  {
    int valuePtr = 0;
    CFNumberRef v0 = CFNumberCreate(0, kCFNumberSInt32Type, &v18);
    CFNumberRef v1 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    CFNumberRef v2 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    CFNumberRef v3 = v2;
    if (v0 && v1 && v2)
    {
      values[0] = v0;
      values[1] = v1;
      values[2] = v2;
      CFArrayRef v4 = CFArrayCreate(0, (const void **)values, 3, MEMORY[0x1E4F1D510]);
    }
    else
    {
      CFArrayRef v4 = 0;
      CFArrayRef v12 = 0;
      if (!v0)
      {
LABEL_14:
        if (v1) {
          CFRelease(v1);
        }
        if (v3) {
          CFRelease(v3);
        }
        return v12;
      }
    }
    CFRelease(v0);
    CFArrayRef v12 = v4;
    goto LABEL_14;
  }
  uint64_t v5 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v5) {
    uint64_t v11 = v5 + 1;
  }
  else {
    uint64_t v11 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  }
  _MGLog((uint64_t)v11, 7912, @"Unexpected camera_offset scale, malformed data provided", v6, v7, v8, v9, v10, v14);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(values[0]) = 0;
    _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Unexpected camera_offset scale, malformed data provided", (uint8_t *)values, 2u);
  }
  return 0;
}

BOOL sub_19D7297BC()
{
  return sub_19D7145C8("IODeviceTree:/product/camera", @"R1AF5xVFhlNjSbjBZJqQeA", 114);
}

uint64_t sub_19D7297D8()
{
  int v1 = 0;
  LODWORD(result) = sub_19D712B14((const char **)@"ND6ZSbBBgMgwtMfh+OL5Wg", 5, 5, kCFNumberSInt32Type, &v1);
  if (v1 > 1) {
    return result;
  }
  else {
    return 0;
  }
}

const void *sub_19D729820()
{
  CFTypeRef v0 = sub_19D73BEC8();
  int v1 = v0;
  if (v0 && (CFTypeID v2 = CFGetTypeID(v0), v2 == CFDataGetTypeID()) && CFDataGetLength((CFDataRef)v1) > 23)
  {
    if (*(_DWORD *)CFDataGetBytePtr((CFDataRef)v1) != 1396926055)
    {
      CFNumberRef v3 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v3) {
        uint64_t v9 = v3 + 1;
      }
      else {
        uint64_t v9 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      }
      _MGLog((uint64_t)v9, 4557, @"syscfg data appears to be uninitialized", v4, v5, v6, v7, v8, v18[0]);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int v18 = 0;
        _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "syscfg data appears to be uninitialized", v18, 2u);
      }
LABEL_16:
      CFRelease(v1);
      return 0;
    }
  }
  else
  {
    uint64_t v10 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v10) {
      uint64_t v16 = v10 + 1;
    }
    else {
      uint64_t v16 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog((uint64_t)v16, 4550, @"invalid syscfg data", v11, v12, v13, v14, v15, v18[0]);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "invalid syscfg data", buf, 2u);
    }
    if (v1) {
      goto LABEL_16;
    }
  }
  return v1;
}

BOOL sub_19D729984(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"0Y4fmR6ZHZPxDZFfPtBnRQ", a2);
}

BOOL sub_19D7299AC(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"0Y4fmR6ZHZPxDZFfPtBnRQ", 83, a2);
}

__CFString *sub_19D7299C0()
{
  CFDataRef v0 = (const __CFData *)sub_19D710BBC((const char **)@"nFRqKto/RuQAV1P+0/qkBA", 0);

  return sub_19D712030(v0);
}

BOOL sub_19D7299F4(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"0KHhsv2F/BGA9AppFljmKg", a2);
}

BOOL sub_19D729A1C(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"0KHhsv2F/BGA9AppFljmKg", 65, a2);
}

BOOL sub_19D729A30()
{
  return sub_19D7145C8("IODeviceTree:/product", @"kT9JwUR2xPCTHTdgvG3UdA", 116);
}

CFNumberRef sub_19D729A48()
{
  return sub_19D717F48("IODeviceTree:/product", @"e9aZViEIJ/riA4pRfg1ihg", 100);
}

BOOL sub_19D729A60()
{
  return sub_19D712390("IODeviceTree:/product", @"LL1FDn5UwIi7sIDnL19gxA", 98);
}

BOOL sub_19D729A78()
{
  return sub_19D711FD4(@"GoogleMail", @"RegionalBehaviorGoogleMail");
}

CFStringRef sub_19D729A8C()
{
  return sub_19D717CB4("IODeviceTree:/product", @"gJ3kBkjdqJ04oSsOmC97aw", 112);
}

CFTypeRef sub_19D729AA8()
{
  uint64_t v0 = *((void *)off_1E9449170 + 15);
  if (!v0) {
    uint64_t v0 = sub_19D71A930(15, 2);
  }
  CFTypeID TypeID = CFStringGetTypeID();

  return sub_19D739338((uint64_t)"_CTServerConnectionCopyMobileSubscriberNetworkCode", v0, TypeID);
}

uint64_t sub_19D729B08()
{
  uint64_t v0 = MEMORY[0x1E4F1CFC8];
  int v4 = -1;
  BOOL v1 = sub_19D712B14((const char **)@"+97cHA72jHlHqQnIkgGBYg", 5, 5, kCFNumberSInt32Type, &v4);
  if (v1 && v4 == 2) {
    uint64_t v2 = MEMORY[0x1E4F1CFD0];
  }
  else {
    uint64_t v2 = v0;
  }
  return *(void *)v2;
}

uint64_t sub_19D729B78()
{
  BOOL v0 = sub_19D716960((BOOL)@"H6");
  uint64_t v1 = MEMORY[0x1E4F1CFD0];
  if (!v0 && sub_19D714D40() != 11) {
    uint64_t v1 = MEMORY[0x1E4F1CFC8];
  }
  return *(void *)v1;
}

const void *sub_19D729BC4()
{
  return sub_19D71A230("IODeviceTree:/chosen", @"MXZ7vg7hul895QdsLUBJFA", 98);
}

BOOL sub_19D729BDC(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"Qq9/Mya05P4ToEr1pMpGGg", a2);
}

BOOL sub_19D729C04(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"Qq9/Mya05P4ToEr1pMpGGg", 66, a2);
}

uint64_t sub_19D729C18()
{
  int v4 = -1;
  BOOL v0 = sub_19D712B14((const char **)@"UDftNoVOBIs9cSeia57q1A", 5, 5, kCFNumberSInt32Type, &v4);
  int v1 = v4;
  if (!v0) {
    int v1 = -1;
  }
  if (v1) {
    unsigned int v2 = 2;
  }
  else {
    unsigned int v2 = 1;
  }
  if (v1 == -1) {
    return 0;
  }
  else {
    return v2;
  }
}

CFTypeRef sub_19D729C78()
{
  return sub_19D735FA8(@"JasperSNUM");
}

BOOL sub_19D729C84(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"dJvRNnysMoubdy0ZCK2aRQ", a2);
}

BOOL sub_19D729CAC(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"dJvRNnysMoubdy0ZCK2aRQ", 74, a2);
}

BOOL sub_19D729CC0()
{
  BOOL v0 = (unsigned int (*)(void))*((void *)off_1E9449170 + 95);
  if (!v0) {
    BOOL v0 = (unsigned int (*)(void))sub_19D71A930(95, 2);
  }
  return v0(0) != 3;
}

CFTypeRef sub_19D729D04()
{
  return sub_19D7128AC(0, "IOPMPowerSource", @"FullyCharged");
}

BOOL sub_19D729D1C()
{
  return (sub_19D714D40() == 3 || sub_19D714D40() == 1 || sub_19D714D40() == 2)
      && !sub_19D7175F4((BOOL)@"H5")
      && !sub_19D7175F4((BOOL)@"H4");
}

CFNumberRef sub_19D729D80()
{
  if (sub_19D714D40() != 1 && sub_19D714D40() != 3) {
    return 0;
  }
  int valuePtr = 1080033280;
  return CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
}

BOOL sub_19D729DD4()
{
  return sub_19D714D40() != 8
      && sub_19D714D40() != 6
      && sub_19D714D40() != 7
      && !sub_19D7175F4((BOOL)@"H4")
      && !sub_19D7175F4((BOOL)@"H5")
      && !sub_19D7175F4((BOOL)@"H6")
      && !sub_19D7175F4((BOOL)@"H7");
}

uint64_t sub_19D729E58()
{
  return 1;
}

uint64_t sub_19D729E60()
{
  return 0;
}

__CFString *sub_19D729E68()
{
  int v0 = sub_19D714D40() - 1;
  uint64_t result = @"iPhone";
  switch(v0)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = @"iPod";
      break;
    case 2:
      uint64_t result = @"iPad";
      break;
    case 3:
      uint64_t result = (__CFString *)sub_19D710BBC((const char **)@"+VIu65zA5EW4ztayJXvOUg", 0);
      break;
    case 5:
      uint64_t result = @"Watch";
      break;
    case 6:
      uint64_t result = @"HomePod";
      break;
    case 7:
      uint64_t result = @"Bridge";
      break;
    case 8:
      uint64_t result = @"Mac";
      break;
    case 10:
      uint64_t result = @"Vision";
      break;
    default:
      uint64_t result = @"Unknown";
      break;
  }
  return result;
}

CFDataRef sub_19D729F60()
{
  if (MGGetBoolAnswer((const char **)@"8DHlxr5ECKhTSL3HmlZQGQ")
    || (CFDataRef result = (CFDataRef)sub_19D7128AC(1, "aqc-a", @"extlom-mac-address")) == 0)
  {
    return sub_19D73E598(0x454D6132u);
  }
  return result;
}

BOOL sub_19D729FC0(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"5Y72WwdS5NYHdc00gEZ/DQ", a2);
}

BOOL sub_19D729FE8(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"5Y72WwdS5NYHdc00gEZ/DQ", 69, a2);
}

CFNumberRef sub_19D729FFC()
{
  return sub_19D717F48("IODeviceTree:/product/camera", @"Q2y7EshBFzIifIPKAPVBBA", 99);
}

BOOL sub_19D72A014()
{
  return sub_19D7145C8("IODeviceTree:/product/camera", @"bG+mTz0gYzxMfCms9/WzlQ", 114);
}

const void *sub_19D72A02C()
{
  return sub_19D71A230("IODeviceTree:/chosen", @"5/NbwB1egBxY8gECPU4nPA", 104);
}

BOOL sub_19D72A044()
{
  return sub_19D742D94(@"dcp", 0);
}

CFTypeRef sub_19D72A054()
{
  return sub_19D739990(7, 1, 2);
}

BOOL sub_19D72A064(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"zPHFWx4ZItDiTXNT2onrWQ", a2);
}

BOOL sub_19D72A08C(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"zPHFWx4ZItDiTXNT2onrWQ", 77, a2);
}

BOOL sub_19D72A0A0()
{
  return sub_19D714D40() == 10;
}

CFDataRef sub_19D72A0C0()
{
  memset(v1, 0, sizeof(v1));
  if (sub_19D736D94(@"volume-up-button-location", 0, v1)) {
    return CFDataCreate(0, (const UInt8 *)v1, 32);
  }
  else {
    return 0;
  }
}

CFNumberRef sub_19D72A114()
{
  return sub_19D717F48("IODeviceTree:/product", @"7zSkleuS91WkyAuEEH7p2g", 115);
}

uint64_t sub_19D72A12C()
{
  int v1 = 0;
  LODWORD(result) = sub_19D712B14((const char **)@"eW5H/Gwg0uqbMqFot70pYg", 5, 5, kCFNumberSInt32Type, &v1);
  if (v1 > 0) {
    return result;
  }
  else {
    return 0;
  }
}

uint64_t sub_19D72A174()
{
  uint64_t result = sub_19D714D40();
  if (result != 1) {
    return sub_19D714D40() == 2;
  }
  return result;
}

uint64_t sub_19D72A1A0()
{
  BOOL v0 = sub_19D712390("IODeviceTree:/product", @"disable-chamois", 0);
  int v1 = sub_19D714D40();
  uint64_t v2 = MEMORY[0x1E4F1CFC8];
  if (v1 == 3 && !v0)
  {
    if ((sub_19D7174E8() & 1) != 0
      || (unint64_t)sub_19D719348() >> 33
      && (sub_19D716960((BOOL)@"H14") || sub_19D71ACF0((BOOL)@"t8103", 0)))
    {
      uint64_t v2 = MEMORY[0x1E4F1CFD0];
    }
    else
    {
      uint64_t v2 = MEMORY[0x1E4F1CFC8];
    }
  }
  return *(void *)v2;
}

uint64_t sub_19D72A240()
{
  CFDataRef v0 = (const __CFData *)sub_19D717CF8("IODeviceTree:/chosen", @"housing-color", 0);
  uint64_t v1 = sub_19D73E414(v0);
  if (v0) {
    CFRelease(v0);
  }
  return v1;
}

uint64_t sub_19D72A290()
{
  CFDataRef v0 = (const __CFData *)sub_19D717CF8("IODeviceTree:/chosen", @"cover-glass-material", 0);
  uint64_t v1 = sub_19D73E414(v0);
  if (v0) {
    CFRelease(v0);
  }
  return v1;
}

CFTypeRef sub_19D72A2E0()
{
  return sub_19D739C38(1, 0, 0);
}

CFNumberRef sub_19D72A2F0()
{
  CFDataRef v0 = (const __CFData *)sub_19D710BBC((const char **)@"91LyMcx4z1w3SGVeqteMnA", 0);
  CFDataRef v1 = v0;
  if (v0)
  {
    CFTypeID v2 = CFGetTypeID(v0);
    if (v2 == CFDataGetTypeID() && CFDataGetLength(v1) > 11)
    {
      BytePtr = CFDataGetBytePtr(v1);
      CFNumberRef v4 = CFNumberCreate(0, kCFNumberSInt32Type, BytePtr + 4);
LABEL_11:
      CFRelease(v1);
      return v4;
    }
  }
  uint64_t v5 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v5) {
    uint64_t v11 = v5 + 1;
  }
  else {
    uint64_t v11 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  }
  _MGLog((uint64_t)v11, 5039, @"failed to fetch region sku", v6, v7, v8, v9, v10, v13[0]);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "failed to fetch region sku", v13, 2u);
  }
  CFNumberRef v4 = 0;
  CFNumberRef result = 0;
  if (v1) {
    goto LABEL_11;
  }
  return result;
}

BOOL sub_19D72A3F8()
{
  if (sub_19D714D40() != 6) {
    return 0;
  }

  return sub_19D716960((BOOL)@"M11");
}

BOOL sub_19D72A43C()
{
  return sub_19D714D40() != 4;
}

BOOL sub_19D72A45C()
{
  return sub_19D712390("IODeviceTree:/product", @"RIJvT6s+kyJKsCvHFbcwwA", 104);
}

uint64_t sub_19D72A474()
{
  return sub_19D742EA0((uint64_t)"IODeviceTree:/arm-io", @"y66yh6E28lG6AIdLLwEvSQ", 100, @"yhZxZlqgBWwf4bN9t6fFyA", 97);
}

CFTypeRef sub_19D72A498()
{
  return sub_19D73A700(0, "AppleBatteryAuth", @"IDSN");
}

BOOL sub_19D72A4B0(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"OyENNqRhuo8+RHkpbr/82A", a2);
}

BOOL sub_19D72A4D8(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"OyENNqRhuo8+RHkpbr/82A", 82, a2);
}

uint64_t sub_19D72A4EC()
{
  memset(&v3, 0, sizeof(v3));
  int v0 = stat("/AppleInternal/Library/PreferenceBundles/Internal Settings.bundle", &v3);
  LOBYTE(v3.st_dev) = 0;
  uint64_t result = sub_19D71D8BC("/var/mobile/Library/Preferences/com.apple.springboard.plist", @"SBAllowSensitiveUI", &v3);
  if (!LOBYTE(v3.st_dev))
  {
    BOOL v2 = v0 == 0;
    LODWORD(result) = sub_19D71D8BC("/System/Library/CoreServices/SBTeaLeafOverrides.plist", @"SBAllowSensitiveUI", &v3);
    if (LOBYTE(v3.st_dev)) {
      return result;
    }
    else {
      return v2;
    }
  }
  return result;
}

BOOL sub_19D72A58C()
{
  memset(&v1, 0, sizeof(v1));
  return !stat("/System/Library/CoreServices/SpringBoard.app", &v1) || *__error() != 2;
}

uint64_t sub_19D72A5F0()
{
  return 0;
}

uint64_t sub_19D72A5F8()
{
  return sub_19D71AA14((uint64_t)"IODeviceTree:/arm-io", @"znvmheFkjr6hiqIK9TrCVw", 112);
}

uint64_t sub_19D72A610()
{
  return sub_19D71AA14((uint64_t)"IODeviceTree:/arm-io", @"lNtvJFI6kdcchIbskQDzaA", 98);
}

CFTypeRef sub_19D72A628()
{
  uint64_t v0 = *((void *)off_1E9449170 + 13);
  if (!v0) {
    uint64_t v0 = sub_19D71A930(13, 2);
  }
  CFTypeID TypeID = CFStringGetTypeID();

  return sub_19D739338((uint64_t)"_CTServerConnectionCopyLastKnownMobileSubscriberCountryCode", v0, TypeID);
}

uint64_t sub_19D72A688()
{
  return 0;
}

BOOL sub_19D72A690()
{
  return !sub_19D7145C8("IODeviceTree:/product", @"D3LeXyjrxDFYSi6pWFEL4A", 117);
}

BOOL sub_19D72A6C0()
{
  return !MGGetBoolAnswer((const char **)@"yRZv0s7Dpj8ZBk0S+0+nMA") || !sub_19D713E18(@"CH");
}

CFDataRef sub_19D72A6FC()
{
  memset(v1, 0, sizeof(v1));
  if (sub_19D736D94(@"volume-down-button-location", 0, v1)) {
    return CFDataCreate(0, (const UInt8 *)v1, 32);
  }
  else {
    return 0;
  }
}

CFDataRef sub_19D72A750()
{
  memset(v1, 0, sizeof(v1));
  if (sub_19D736D94(@"camera-button-location", 1, v1)) {
    return CFDataCreate(0, (const UInt8 *)v1, 32);
  }
  else {
    return 0;
  }
}

BOOL sub_19D72A7A4()
{
  return sub_19D7145C8("IODeviceTree:/product", @"h9v96tCehBWUil/aJ7UrcA", 117);
}

uint64_t sub_19D72A7BC()
{
  if (sub_19D714D40() == 3)
  {
    BOOL v0 = sub_19D71ACF0((BOOL)@"t8027", 0);
    uint64_t v1 = MEMORY[0x1E4F1CFD0];
    if (!v0) {
      uint64_t v1 = MEMORY[0x1E4F1CFC8];
    }
  }
  else
  {
    uint64_t v1 = MEMORY[0x1E4F1CFC8];
  }
  return *(void *)v1;
}

BOOL sub_19D72A814()
{
  return sub_19D714D40() != 6
      && sub_19D714D40() != 8
      && sub_19D714D40() != 7
      && !sub_19D7175F4((BOOL)@"H1")
      && !sub_19D7175F4((BOOL)@"H2")
      && !sub_19D7175F4((BOOL)@"H3")
      && !sub_19D7175F4((BOOL)@"H4")
      && !sub_19D7175F4((BOOL)@"H5")
      && !sub_19D7175F4((BOOL)@"H6");
}

uint64_t sub_19D72A8B4()
{
  if (MGGetBoolAnswer((const char **)@"j8/Omm6s1lsmTDFsXjsBfA")) {
    return 1;
  }

  return sub_19D742EA0((uint64_t)"IODeviceTree:/arm-io", @"disp0", 0, @"always-on-device", 0);
}

CFNumberRef sub_19D72A914()
{
  return sub_19D717F48("IODeviceTree:/product/camera", @"Sr1Bmb3uoIfgKyaZguG0Gw", 102);
}

uint64_t sub_19D72A92C()
{
  BOOL v0 = sub_19D7145C8("IODeviceTree:/product", @"dictation", 0);
  uint64_t v1 = MEMORY[0x1E4F1CFD0];
  if (!v0) {
    uint64_t v1 = MEMORY[0x1E4F1CFC8];
  }
  return *(void *)v1;
}

const void *sub_19D72A974()
{
  return sub_19D71A230("IODeviceTree:/product", @"lOIgg/0YE73mNKAiUbUiWQ", 114);
}

BOOL sub_19D72A98C(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"PxEDp0oOasJ92F/V7YBa8A", a2);
}

BOOL sub_19D72A9B4(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"PxEDp0oOasJ92F/V7YBa8A", 82, a2);
}

uint64_t sub_19D72A9C8()
{
  return 0;
}

CFDataRef sub_19D72A9D0()
{
  if (MGGetBoolAnswer((const char **)@"8DHlxr5ECKhTSL3HmlZQGQ")
    || (CFDataRef result = (CFDataRef)sub_19D71A230("IODeviceTree:/arm-io/isp", @"pearl-calibration-data", 0)) == 0)
  {
    return sub_19D73E074(0x5072434Cu);
  }
  return result;
}

uint64_t sub_19D72AA30()
{
  int v0 = sub_19D714D40();
  uint64_t v1 = MEMORY[0x1E4F1CFD0];
  uint64_t v2 = MEMORY[0x1E4F1CFD0];
  if (v0 != 3)
  {
    if (sub_19D714D40() == 6)
    {
      uint64_t v2 = MEMORY[0x1E4F1CFC8];
    }
    else
    {
      int v3 = sub_19D714D40();
      uint64_t v2 = MEMORY[0x1E4F1CFC8];
      if (v3 != 4 && sub_19D714D40() != 2) {
        uint64_t v2 = v1;
      }
    }
  }
  return *(void *)v2;
}

uint64_t sub_19D72AAA0()
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (sub_19D714D40() == 4
    || sub_19D714D40() == 2
    || sub_19D714D40() == 3
    || sub_19D714D40() == 1
    || sub_19D714D40() == 7
    || sub_19D714D40() == 11)
  {
    uint64_t v7 = MEMORY[0x1E4F1CFC8];
  }
  else
  {
    int v13 = 368885834;
    long long v12 = xmmword_19D779054;
    int v11 = -414334491;
    long long v10 = xmmword_19D779068;
    int v9 = MGIsDeviceOneOfType((const UInt8 *)&v12, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v10);
    uint64_t v7 = MEMORY[0x1E4F1CFD0];
    if (!v9) {
      uint64_t v7 = MEMORY[0x1E4F1CFC8];
    }
  }
  return *(void *)v7;
}

BOOL sub_19D72ABE4()
{
  return sub_19D712390("IODeviceTree:/product/camera", @"gukw/2mRLE2GyqXJFEu7ng", 114);
}

const void *sub_19D72ABFC()
{
  return sub_19D710BBC((const char **)@"lwHRTZNO5Jq87pVlzdNGIA", 0);
}

BOOL sub_19D72AC0C()
{
  return sub_19D742C60(@"avd", @"ads-present");
}

uint64_t sub_19D72AC20()
{
  return sub_19D71AA14((uint64_t)"IODeviceTree:/", @"brr2lQq9584zVkiuALaADA", 115);
}

BOOL sub_19D72AC38()
{
  return sub_19D71DBE0("arm64");
}

CFTypeRef sub_19D72AC44()
{
  return sub_19D739990(2, 1, 1);
}

BOOL sub_19D72AC54(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"xRyzf9zFE/ycr/wJPweZvQ", a2);
}

BOOL sub_19D72AC7C(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"xRyzf9zFE/ycr/wJPweZvQ", 73, a2);
}

BOOL sub_19D72AC90()
{
  return sub_19D7145C8("IODeviceTree:/product", @"dUipfYkyvM80t4IkmMBVgQ", 119);
}

const void *sub_19D72ACA8()
{
  return sub_19D71A230("IODeviceTree:/product", @"is3zjHrEdiF6J/boqghy9A", 109);
}

BOOL sub_19D72ACC0(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"8QNz35Yxm0KqxP1JiE0HIw", a2);
}

BOOL sub_19D72ACE8(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"8QNz35Yxm0KqxP1JiE0HIw", 80, a2);
}

CFTypeRef sub_19D72ACFC()
{
  return sub_19D7357B0(@"FrontIRCameraModuleSerialNumString");
}

BOOL sub_19D72AD08(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"2kuITg6XPwXl8zbpx+hoCw", a2);
}

BOOL sub_19D72AD30(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"2kuITg6XPwXl8zbpx+hoCw", 70, a2);
}

CFNumberRef sub_19D72AD44()
{
  return sub_19D717F48("IODeviceTree:/product", @"W7MyZ3Yxoy1qD6FrI0mLUQ", 82);
}

CFNumberRef sub_19D72AD5C()
{
  int v4 = 1;
  CFNumberRef v0 = sub_19D717F48("IODeviceTree:/product", @"activation-protocol-version", 0);
  if (v0)
  {
    CFNumberRef v1 = v0;
    int valuePtr = 1;
    if (CFNumberGetValue(v0, kCFNumberSInt32Type, &valuePtr) && valuePtr == 2) {
      int v4 = 2;
    }
    CFRelease(v1);
  }
  return CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &v4);
}

uint64_t sub_19D72ADEC()
{
  return 1;
}

CFDataRef sub_19D72ADF4()
{
  memset(v1, 0, sizeof(v1));
  if (sub_19D735BA4((uint64_t *)v1)) {
    return CFDataCreate(0, (const UInt8 *)v1, 32);
  }
  else {
    return 0;
  }
}

uint64_t sub_19D72AE3C()
{
  uint64_t result = sub_19D714D40();
  if (result != 1)
  {
    if (sub_19D714D40() == 6)
    {
      return MGGetBoolAnswer((const char **)@"AJFQheZDyUbvI6RmBMT9Cg");
    }
    else
    {
      return 0;
    }
  }
  return result;
}

CFStringRef sub_19D72AE8C()
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  CFIndex numBytes = 128;
  *(void *)connect = 0;
  if ((sub_19D73A1BC("AppleBiometricServices", &connect[1], connect) & 1) == 0)
  {
    int v13 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v13) {
      uint64_t v19 = v13 + 1;
    }
    else {
      uint64_t v19 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog((uint64_t)v19, 5340, @"failed to connect to service %s", v14, v15, v16, v17, v18, (char)"AppleBiometricServices");
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_14;
    }
    *(_DWORD *)buf = 136315138;
    uint64_t v52 = "AppleBiometricServices";
    int v11 = MEMORY[0x1E4F14500];
    long long v12 = "failed to connect to service %s";
    goto LABEL_12;
  }
  int v46 = 0;
  size_t v45 = 4;
  mach_error_t v0 = sub_19D736E8C(connect[0], 27, &v46, &v45);
  if (v0)
  {
    mach_error_t v1 = v0;
    uint64_t v2 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    uint64_t v3 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v3) {
      uint64_t v2 = v3 + 1;
    }
    char v4 = mach_error_string(v1);
    _MGLog((uint64_t)v2, 5350, @"Failed to query Mesa provisioning state: %s", v5, v6, v7, v8, v9, v4);
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_14;
    }
    long long v10 = mach_error_string(v1);
    *(_DWORD *)buf = 136315138;
    uint64_t v52 = v10;
    int v11 = MEMORY[0x1E4F14500];
    long long v12 = "Failed to query Mesa provisioning state: %s";
    goto LABEL_12;
  }
  if (!v46)
  {
    mach_error_t v34 = sub_19D736E8C(connect[0], 1, 0, 0);
    if (v34)
    {
      mach_error_t v35 = v34;
      uint64_t v36 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      uint64_t v37 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v37) {
        uint64_t v36 = v37 + 1;
      }
      char v38 = mach_error_string(v35);
      _MGLog((uint64_t)v36, 5357, @"Failed to reset sensor: %s", v39, v40, v41, v42, v43, v38);
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_14;
      }
      uint64_t v44 = mach_error_string(v35);
      *(_DWORD *)buf = 136315138;
      uint64_t v52 = v44;
      int v11 = MEMORY[0x1E4F14500];
      long long v12 = "Failed to reset sensor: %s";
LABEL_12:
      uint64_t v20 = buf;
LABEL_13:
      _os_log_impl(&dword_19D70E000, v11, OS_LOG_TYPE_DEFAULT, v12, v20, 0xCu);
LABEL_14:
      CFStringRef v21 = 0;
      goto LABEL_15;
    }
  }
  mach_error_t v23 = sub_19D736E8C(connect[0], 54, buf, (size_t *)&numBytes);
  if (v23)
  {
    mach_error_t v24 = v23;
    uint64_t v25 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    uint64_t v26 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v26) {
      uint64_t v25 = v26 + 1;
    }
    char v27 = mach_error_string(v24);
    _MGLog((uint64_t)v25, 5364, @"Failed to query Mesa module serial number: %s", v28, v29, v30, v31, v32, v27);
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_14;
    }
    uint64_t v33 = mach_error_string(v24);
    int v49 = 136315138;
    uint64_t v50 = v33;
    int v11 = MEMORY[0x1E4F14500];
    long long v12 = "Failed to query Mesa module serial number: %s";
    uint64_t v20 = (uint8_t *)&v49;
    goto LABEL_13;
  }
  CFStringRef v21 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], buf, numBytes, 0x8000100u, 0);
LABEL_15:
  if (connect[0]) {
    IOServiceClose(connect[0]);
  }
  if (connect[1]) {
    IOObjectRelease(connect[1]);
  }
  return v21;
}

BOOL sub_19D72B1C0(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"jWdMTTxiAZc+KNO6Bz2jNg", a2);
}

BOOL sub_19D72B1E8(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"jWdMTTxiAZc+KNO6Bz2jNg", 77, a2);
}

uint64_t sub_19D72B1FC()
{
  int v0 = sub_19D736FBC(3);
  return v0 | sub_19D736FBC(6);
}

uint64_t sub_19D72B230()
{
  return 0;
}

uint64_t sub_19D72B238()
{
  return sub_19D742F30((uint64_t)"IODeviceTree:", @"NkQOJZ1xdFk5SV55PFKlIg", 119, @"/cMWdoU/88pcjJ1egxmIYw", 119);
}

CFStringRef sub_19D72B25C()
{
  unsigned int v0 = sub_19D7123B8("IODeviceTree:/product", @"itunes-min-ver", 0, 0xFFFFFFFFLL, 1);
  if (v0 != -1) {
    return CFStringCreateWithFormat(0, 0, @"%d.%d.%d", HIWORD(v0), BYTE1(v0), v0);
  }
  uint64_t v2 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v2) {
    uint64_t v8 = v2 + 1;
  }
  else {
    uint64_t v8 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  }
  _MGLog((uint64_t)v8, 4281, @"couldn't get itunes-min-ver\n", v3, v4, v5, v6, v7, v9);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "couldn't get itunes-min-ver\n", buf, 2u);
  }
  return 0;
}

CFNumberRef sub_19D72B344()
{
  return sub_19D717F48("IODeviceTree:/chosen", @"HhLXszMhK6bb9TP4sqVQWQ", 101);
}

BOOL sub_19D72B35C()
{
  return sub_19D7145C8("IODeviceTree:/product/audio", @"cq/jTAQ8zJab+ibcGUzJew", 109);
}

uint64_t sub_19D72B374()
{
  return 0;
}

BOOL sub_19D72B37C()
{
  BOOL result = sub_19D727A98();
  if (result) {
    return !sub_19D71644C();
  }
  return result;
}

BOOL sub_19D72B3A0()
{
  return sub_19D7145C8("IODeviceTree:/product/camera", @"R1tbjTooZCgq2KmzlTaX+g", 102);
}

uint64_t sub_19D72B3B8()
{
  if (os_variant_is_darwinos()
    && (sub_19D71644C() || sub_19D712390("IODeviceTree:/product", @"analytics-opt-in", 0)))
  {
    uint64_t v0 = MEMORY[0x1E4F1CFD0];
  }
  else
  {
    uint64_t v0 = MEMORY[0x1E4F1CFC8];
  }
  return *(void *)v0;
}

BOOL sub_19D72B418()
{
  return sub_19D712390("IODeviceTree:/product/camera", @"AzZxA+yTHLc+/XimTirrVw", 112);
}

uint64_t sub_19D72B430()
{
  BOOL v0 = sub_19D7145C8("IODeviceTree:/product", @"location-reminders", 0);
  uint64_t v1 = MEMORY[0x1E4F1CFD0];
  if (!v0) {
    uint64_t v1 = MEMORY[0x1E4F1CFC8];
  }
  return *(void *)v1;
}

uint64_t sub_19D72B478()
{
  return sub_19D7123B8("IODeviceTree:/product/camera", @"video-cap", 0, 0, 1);
}

uint64_t sub_19D72B498()
{
  BOOL v0 = sub_19D71AA8C(@"rose", 0);
  uint64_t v1 = MEMORY[0x1E4F1CFD0];
  if (!v0) {
    uint64_t v1 = MEMORY[0x1E4F1CFC8];
  }
  return *(void *)v1;
}

CFTypeRef sub_19D72B4D8()
{
  return sub_19D735FA8(@"SavageChipID");
}

BOOL sub_19D72B4E4(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"m9OWD0Y4Br0TZHUl6rGcOg", a2);
}

BOOL sub_19D72B50C(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"m9OWD0Y4Br0TZHUl6rGcOg", 83, a2);
}

CFDataRef sub_19D72B520()
{
  return sub_19D73B858("AppleMobileApNonce", 0xCAu, 0, 0, 8uLL);
}

BOOL sub_19D72B53C()
{
  return sub_19D7145C8("IODeviceTree:/arm-io/isp", @"IFHQSJ65DoElWQl/+eCfNQ", 102);
}

BOOL sub_19D72B554()
{
  return sub_19D7145C8("IODeviceTree:/product", @"RN4AimpWqqD2JZCB67qtvQ", 99);
}

BOOL sub_19D72B56C()
{
  memset(&v1, 0, sizeof(v1));
  return stat("/AppleInternal/Library/PreferenceBundles/Internal Settings.bundle", &v1) == 0;
}

uint64_t sub_19D72B5B8()
{
  uint64_t result = sub_19D714D40();
  if (result != 1) {
    return sub_19D714D40() == 2;
  }
  return result;
}

uint64_t sub_19D72B5E4()
{
  return 0;
}

CFStringRef sub_19D72B5EC()
{
  return sub_19D717CB4("IODeviceTree:/chosen", @"3sF/uRq+X+mZ2zGHSJOwpw", 99);
}

BOOL sub_19D72B604()
{
  return sub_19D712390("IODeviceTree:/product", @"6PkKE66MnKm0yiOIQLknEg", 97);
}

BOOL sub_19D72B61C()
{
  return sub_19D7145C8("IODeviceTree:/product/camera", @"+xJ6RaQ6PDSsLjib8r5fgg", 112);
}

BOOL sub_19D72B634()
{
  return sub_19D7145C8("IODeviceTree:/arm-io/sep", @"jw9WzWmThYzveJbsV+GZMA", 115);
}

uint64_t sub_19D72B64C()
{
  uint64_t result = sub_19D742FB8((uint64_t)"IODeviceTree", @"ipd", 0, @"kblang-calibration", 0);
  if (!result)
  {
    return sub_19D742FB8((uint64_t)"IODeviceTree", @"keyboard", 0, @"kblang-calibration", 0);
  }
  return result;
}

CFNumberRef sub_19D72B6C0()
{
  return sub_19D737130(1);
}

BOOL sub_19D72B6C8()
{
  return sub_19D7145C8("IODeviceTree:/product", @"u3c0R+31Df4SUTHrICQkTg", 104);
}

uint64_t sub_19D72B6E0()
{
  return *MEMORY[0x1E4F1CFC8];
}

__CFString *sub_19D72B6F0()
{
  if (!MGGetBoolAnswer((const char **)@"AJFQheZDyUbvI6RmBMT9Cg"))
  {
    uint64_t v4 = @"NoTelephonyCapabilty";
    goto LABEL_12;
  }
  BOOL v0 = sub_19D710BBC((const char **)@"vaiFeAcMTIDXMSxTr8JwCw", 0);
  if (v0)
  {
    stat v1 = v0;
    uint64_t v2 = (CFTypeRef *)*((void *)off_1E9449170 + 68);
    if (!v2) {
      uint64_t v2 = (CFTypeRef *)sub_19D71A930(68, 1);
    }
    if (CFEqual(v1, *v2)) {
      goto LABEL_9;
    }
    uint64_t v3 = (CFTypeRef *)*((void *)off_1E9449170 + 65);
    if (!v3) {
      uint64_t v3 = (CFTypeRef *)sub_19D71A930(65, 1);
    }
    if (CFEqual(v1, *v3))
    {
LABEL_9:
      uint64_t v4 = @"BBInfoAvailable";
LABEL_10:
      CFRelease(v1);
      goto LABEL_12;
    }
    uint64_t v6 = (CFTypeRef *)*((void *)off_1E9449170 + 67);
    if (!v6) {
      uint64_t v6 = (CFTypeRef *)sub_19D71A930(67, 1);
    }
    if (CFEqual(v1, *v6))
    {
LABEL_16:
      uint64_t v4 = @"BBNotReady";
      goto LABEL_10;
    }
    uint64_t v7 = (CFTypeRef *)*((void *)off_1E9449170 + 66);
    if (!v7) {
      uint64_t v7 = (CFTypeRef *)sub_19D71A930(66, 1);
    }
    if (!CFEqual(v1, *v7))
    {
      uint64_t v8 = (CFTypeRef *)*((void *)off_1E9449170 + 69);
      if (!v8) {
        uint64_t v8 = (CFTypeRef *)sub_19D71A930(69, 1);
      }
      if (CFEqual(v1, *v8))
      {
        uint64_t v4 = @"BBRejectedTicket";
        goto LABEL_10;
      }
      char v9 = (CFTypeRef *)*((void *)off_1E9449170 + 74);
      if (!v9) {
        char v9 = (CFTypeRef *)sub_19D71A930(74, 1);
      }
      if (CFEqual(v1, *v9)) {
        goto LABEL_9;
      }
      long long v10 = (CFTypeRef *)*((void *)off_1E9449170 + 73);
      if (!v10) {
        long long v10 = (CFTypeRef *)sub_19D71A930(73, 1);
      }
      if (CFEqual(v1, *v10)) {
        goto LABEL_16;
      }
      int v11 = (CFTypeRef *)*((void *)off_1E9449170 + 71);
      if (!v11) {
        int v11 = (CFTypeRef *)sub_19D71A930(71, 1);
      }
      if (!CFEqual(v1, *v11))
      {
        long long v12 = (CFTypeRef *)*((void *)off_1E9449170 + 72);
        if (!v12) {
          long long v12 = (CFTypeRef *)sub_19D71A930(72, 1);
        }
        if (CFEqual(v1, *v12)) {
          uint64_t v4 = @"SIMNotInserted";
        }
        else {
          uint64_t v4 = @"Other-CheckLogs";
        }
        goto LABEL_10;
      }
    }
    uint64_t v4 = @"BBError";
    goto LABEL_10;
  }
  int v13 = sub_19D71EF70("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
  _MGLog((uint64_t)v13, 4902, @"No status in postponement info for copyBasebandStatusKey", v14, v15, v16, v17, v18, v19[0]);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v19 = 0;
    _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "No status in postponement info for copyBasebandStatusKey", v19, 2u);
  }
  uint64_t v4 = @"BBNotAnswering";
LABEL_12:
  CFRetain(v4);
  return v4;
}

__CFArray *sub_19D72B974()
{
  CFMutableStringRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    stat v1 = sub_19D7314AC();
    CFStringRef v2 = sub_19D717CB4("IODeviceTree:/product", @"compatible-app-variant", 0);
    CFStringRef v3 = sub_19D717CB4("IODeviceTree:/product", @"compatible-device-fallback", 0);
    if (v2 && CFStringCompare(v2, @"0", 0))
    {
      uint64_t v4 = v2;
      if (v1)
      {
        CFArrayAppendValue(Mutable, v1);
        uint64_t v4 = v2;
      }
    }
    else
    {
      uint64_t v4 = v1;
      if (!v1) {
        goto LABEL_13;
      }
    }
    CFArrayAppendValue(Mutable, v4);
LABEL_13:
    if (v3 && CFStringCompare(v3, @"0", 0)) {
      CFArrayAppendValue(Mutable, v3);
    }
    if (v1) {
      CFRelease(v1);
    }
    if (v2) {
      CFRelease(v2);
    }
    if (v3) {
      CFRelease(v3);
    }
    return Mutable;
  }
  uint64_t v5 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v5) {
    int v11 = v5 + 1;
  }
  else {
    int v11 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  }
  _MGLog((uint64_t)v11, 5704, @"Failed to create array", v6, v7, v8, v9, v10, v13[0]);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v13 = 0;
    _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Failed to create array", v13, 2u);
  }
  return Mutable;
}

BOOL sub_19D72BB0C()
{
  return sub_19D7145C8("IODeviceTree:/product", @"a13V9f9x26JcQCfczZAVAw", 117);
}

CFNumberRef sub_19D72BB24()
{
  return sub_19D717F48("IODeviceTree:/product/camera", @"Q/BI7GKNZY13TpxbqA8nhQ", 114);
}

BOOL sub_19D72BB3C()
{
  return sub_19D7145C8("IODeviceTree:/product", @"X9cK3qXzcFCrVpE258P2lQ", 104);
}

BOOL sub_19D72BB54()
{
  return sub_19D7145C8("IODeviceTree:/product/camera", @"aCuWsar9Ayou7Vfkh7fdLw", 102);
}

uint64_t sub_19D72BB6C()
{
  BOOL v0 = (uint64_t (*)(void))*((void *)off_1E9449170 + 26);
  if (!v0) {
    BOOL v0 = (uint64_t (*)(void))sub_19D71A930(26, 2);
  }

  return v0();
}

BOOL sub_19D72BBAC(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"MWduuAGptrl7qIzWqBmOqQ", a2);
}

BOOL sub_19D72BBD4(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"MWduuAGptrl7qIzWqBmOqQ", 65, a2);
}

CFStringRef sub_19D72BBE8()
{
  return sub_19D717CB4("IODeviceTree:/", @"Fam17Ufz3CiHdZPcma0AeQ", 114);
}

BOOL sub_19D72BC00()
{
  return !MGGetBoolAnswer((const char **)@"yRZv0s7Dpj8ZBk0S+0+nMA") || !sub_19D713E18(@"CH");
}

const void *sub_19D72BC3C()
{
  return sub_19D7155AC((const void *)*MEMORY[0x1E4F1CD10], 1);
}

BOOL sub_19D72BC50()
{
  return sub_19D7145C8("IODeviceTree:/product/camera", @"mm4/5+X4Z+eStXyipfwWVQ", 114);
}

BOOL sub_19D72BC68()
{
  if (sub_19D714D40() == 7) {
    return 0;
  }
  if (sub_19D716960((BOOL)@"M9")) {
    return 1;
  }

  return sub_19D716960((BOOL)@"H10");
}

BOOL sub_19D72BCC4()
{
  return sub_19D7145C8("IODeviceTree:/arm-io/mtp", @"hh/NoWpEoq1VF4lGDdPUpw", 114);
}

CFNumberRef sub_19D72BCDC()
{
  return sub_19D717F48("IODeviceTree:/product/facetime", @"K0tZN4PayAx7RgB0M+oohw", 98);
}

uint64_t sub_19D72BCF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  int v14 = -38605833;
  long long v13 = xmmword_19D778C08;
  int v12 = -894965712;
  long long v11 = xmmword_19D778C1C;
  if ((MGIsDeviceOneOfType((const UInt8 *)&v13, a2, a3, a4, a5, a6, a7, a8, (uint64_t)&v11) & 1) != 0
    || sub_19D714D40() == 6
    || sub_19D714D40() == 4)
  {
    uint64_t v8 = MEMORY[0x1E4F1CFC8];
  }
  else
  {
    int v10 = sub_19D714D40();
    uint64_t v8 = MEMORY[0x1E4F1CFC8];
    if (v10 != 3 && sub_19D714D40() != 11) {
      uint64_t v8 = MEMORY[0x1E4F1CFD0];
    }
  }
  return *(void *)v8;
}

BOOL sub_19D72BEAC()
{
  return sub_19D712390("IODeviceTree:/product", @"KFwMMyiMoa8pLgGLwo78Vw", 104);
}

BOOL sub_19D72BEC8()
{
  return sub_19D7145C8("IODeviceTree:/product", @"SMgTCc2v9AU2ziIHRX8qww", 104);
}

BOOL sub_19D72BEE0()
{
  return sub_19D7145C8("IODeviceTree:/arm-io/sep", @"aNZeCyuWxI6SE/KwZ129wA", 110);
}

CFDataRef sub_19D72BEF8()
{
  if (MGGetBoolAnswer((const char **)@"8DHlxr5ECKhTSL3HmlZQGQ"))
  {
    return sub_19D73E598(0x424D6332u);
  }
  else
  {
    return (CFDataRef)sub_19D71A230("IODeviceTree:/product", @"mac-address-bluetooth1", 0);
  }
}

BOOL sub_19D72BF60(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"HzddeW2/HtdBNAc5tsFtDg", a2);
}

BOOL sub_19D72BF88(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"HzddeW2/HtdBNAc5tsFtDg", 83, a2);
}

BOOL sub_19D72BF9C()
{
  return sub_19D7145C8("IODeviceTree:/product/camera", @"CUMH6bG4DFnu7ZREp5YkUQ", 106);
}

BOOL sub_19D72BFB4()
{
  BOOL result = MGGetBoolAnswer((const char **)@"nv4RoLkNoPT0/rsO8Yaiew");
  if (result) {
    return !MGGetBoolAnswer((const char **)@"2pxKjejpRGpWvUE+3yp5mQ");
  }
  return result;
}

BOOL sub_19D72BFE8()
{
  return sub_19D7145C8("IODeviceTree:/baseband", @"BYYil6kIk8Hm5lRuA1k8Tw", 112);
}

uint64_t sub_19D72C000()
{
  return 1;
}

BOOL sub_19D72C008()
{
  return sub_19D711FD4(@"NoWiFi", @"RegionalBehaviorNoWiFi");
}

BOOL sub_19D72C01C()
{
  return sub_19D712390("IODeviceTree:/product/camera", @"bmYssgjtQNKMy3Zhf8N+2w", 115);
}

uint64_t sub_19D72C034(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  int v14 = 368885834;
  long long v13 = xmmword_19D779054;
  int v12 = -526227167;
  long long v11 = xmmword_19D77907C;
  if ((MGIsDeviceOneOfType((const UInt8 *)&v13, a2, a3, a4, a5, a6, a7, a8, (uint64_t)&v11) & 1) != 0
    || sub_19D714D40() == 3)
  {
    uint64_t v8 = MEMORY[0x1E4F1CFC8];
  }
  else
  {
    int v10 = sub_19D714D40();
    uint64_t v8 = MEMORY[0x1E4F1CFC8];
    if (v10 != 4 && sub_19D714D40() != 2) {
      uint64_t v8 = MEMORY[0x1E4F1CFD0];
    }
  }
  return *(void *)v8;
}

CFTypeRef sub_19D72C158()
{
  return sub_19D7128AC(0, "IOPMPowerSource", @"ExternalChargeCapable");
}

CFTypeRef sub_19D72C170()
{
  return sub_19D739990(8, 1, 2);
}

BOOL sub_19D72C180(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"rkFHO5dZmWxy3QdOx7r7kA", a2);
}

BOOL sub_19D72C1A8(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"rkFHO5dZmWxy3QdOx7r7kA", 77, a2);
}

CFStringRef sub_19D72C1BC()
{
  CFStringRef v0 = (const __CFString *)sub_19D7430C8((uint64_t)":/arm-io/wlan", @"AppleOLYHAL", 0, @"ModuleInfo", 0);
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0, v0, @" ");
  if (CFArrayGetCount(ArrayBySeparatingStrings) < 1)
  {
LABEL_6:
    CFStringRef v5 = 0;
  }
  else
  {
    CFIndex v3 = 0;
    while (1)
    {
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, v3);
      if (CFStringFind(ValueAtIndex, @"chip=", 0).location != -1) {
        break;
      }
      if (++v3 >= CFArrayGetCount(ArrayBySeparatingStrings)) {
        goto LABEL_6;
      }
    }
    CFIndex Length = CFStringGetLength(@"chip=");
    v8.length = CFStringGetLength(ValueAtIndex) - Length - 2;
    v8.CFIndex location = Length + 1;
    CFStringRef v5 = CFStringCreateWithSubstring(0, ValueAtIndex, v8);
  }
  CFRelease(ArrayBySeparatingStrings);
  CFRelease(v1);
  return v5;
}

BOOL sub_19D72C2D8()
{
  return sub_19D712390("IODeviceTree:/chosen", @"tOLVnZop4m/g5/iuC7zlUw", 101);
}

BOOL sub_19D72C2F0()
{
  return sub_19D7145C8("IODeviceTree:/product", @"wlxZYdEZITDTzgs/OnnV+Q", 112);
}

const void *sub_19D72C308()
{
  return sub_19D710BBC((const char **)@"7l0BaQsNxJCanoeHMJ2huA", 0);
}

CFNumberRef sub_19D72C318()
{
  return sub_19D717F48("IODeviceTree:/product", @"j/8nlHWXO3OvKHQHgl905Q", 102);
}

uint64_t sub_19D72C330(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  int v35 = 1602014129;
  long long v34 = xmmword_19D778BCC;
  int v33 = -810116762;
  long long v32 = xmmword_19D778BE0;
  int v31 = -1195351767;
  long long v30 = xmmword_19D778BF4;
  int v29 = -199226823;
  long long v28 = xmmword_19D7792AC;
  int v27 = 1412427398;
  long long v26 = xmmword_19D7792C0;
  int v25 = -1283070668;
  long long v24 = xmmword_19D779298;
  int v23 = 160260070;
  long long v22 = xmmword_19D7792D4;
  if (MGIsDeviceOneOfType((const UInt8 *)&v34, a2, a3, a4, a5, a6, a7, a8, (uint64_t)&v32)
    || sub_19D714D40() == 6)
  {
    uint64_t v15 = MEMORY[0x1E4F1CFC8];
  }
  else
  {
    int v21 = -926344036;
    long long v20 = xmmword_19D778B90;
    int v19 = -954998212;
    long long v18 = xmmword_19D778BA4;
    int v16 = MGIsDeviceOneOfType((const UInt8 *)&v20, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v18);
    uint64_t v15 = MEMORY[0x1E4F1CFC8];
    if (!v16) {
      uint64_t v15 = MEMORY[0x1E4F1CFD0];
    }
  }
  return *(void *)v15;
}

BOOL sub_19D72C518()
{
  return sub_19D7145C8("IODeviceTree:/product/camera", @"5QM8apssQbhm2ZrUx5g5Tw", 112);
}

BOOL sub_19D72C530()
{
  return sub_19D7145C8("IODeviceTree:/product", @"hK/qlAUuu8u6SvIRkKmjQQ", 103);
}

CFTypeRef sub_19D72C548()
{
  uint64_t v0 = *((void *)off_1E9449170 + 20);
  if (!v0) {
    uint64_t v0 = sub_19D71A930(20, 2);
  }
  CFTypeID TypeID = CFStringGetTypeID();

  return sub_19D739338((uint64_t)"_CTServerConnectionGetActiveWirelessTechnology", v0, TypeID);
}

uint64_t sub_19D72C5A8()
{
  if (sub_19D714D40() == 1
    || sub_19D714D40() == 2
    || sub_19D714D40() == 3
    || sub_19D714D40() == 6)
  {
    uint64_t v0 = MEMORY[0x1E4F1CFC8];
    BOOL v1 = sub_19D712390("IODeviceTree:/product", @"disable-spoken-messages", 0);
    uint64_t v2 = MEMORY[0x1E4F1CFD0];
    if (v1) {
      uint64_t v2 = v0;
    }
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4F1CFC8];
  }
  return *(void *)v2;
}

BOOL sub_19D72C634()
{
  if (sub_19D714D40() != 6) {
    return 0;
  }

  return sub_19D716960((BOOL)@"M11");
}

uint64_t sub_19D72C678()
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  if (sub_19D714D40() == 7) {
    goto LABEL_10;
  }
  if (sub_19D714D40() == 4) {
    goto LABEL_10;
  }
  if (sub_19D714D40() == 3) {
    goto LABEL_10;
  }
  if (sub_19D714D40() == 2) {
    goto LABEL_10;
  }
  if (sub_19D714D40() == 6) {
    goto LABEL_10;
  }
  if (sub_19D714D40() == 11) {
    goto LABEL_10;
  }
  if (sub_19D714D40() == 8) {
    goto LABEL_10;
  }
  int v47 = 28030256;
  long long v46 = xmmword_19D778C58;
  int v45 = 1214363620;
  long long v44 = xmmword_19D778C6C;
  int v43 = -798153473;
  long long v42 = xmmword_19D778AC8;
  int v41 = -776721724;
  long long v40 = xmmword_19D778ADC;
  int v39 = -489993439;
  long long v38 = xmmword_19D779158;
  int v37 = 886875686;
  long long v36 = xmmword_19D77916C;
  if (MGIsDeviceOneOfType((const UInt8 *)&v46, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v44)) {
    goto LABEL_10;
  }
  int v35 = -1403227947;
  long long v34 = xmmword_19D779108;
  int v33 = 729118884;
  long long v32 = xmmword_19D77911C;
  int v31 = 1046806126;
  long long v30 = xmmword_19D779130;
  int v29 = -188760945;
  long long v28 = xmmword_19D779144;
  if (MGIsDeviceOneOfType((const UInt8 *)&v34, v7, v8, v9, v10, v11, v12, v13, (uint64_t)&v32))
  {
LABEL_10:
    uint64_t v21 = MEMORY[0x1E4F1CFC8];
  }
  else
  {
    int v27 = -350584140;
    long long v26 = xmmword_19D779180;
    int v25 = 368778837;
    long long v24 = xmmword_19D7791A8;
    int v23 = MGIsDeviceOneOfType((const UInt8 *)&v26, v14, v15, v16, v17, v18, v19, v20, (uint64_t)&v24);
    uint64_t v21 = MEMORY[0x1E4F1CFC8];
    if (!v23) {
      uint64_t v21 = MEMORY[0x1E4F1CFD0];
    }
  }
  return *(void *)v21;
}

uint64_t sub_19D72C934()
{
  uint64_t v20 = 0;
  uint64_t v21 = &v20;
  uint64_t v22 = 0x2000000000;
  uint64_t v23 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = &v16;
  uint64_t v18 = 0x2000000000;
  char v19 = 0;
  uint64_t v0 = 0;
  if (sub_19D7174E8()) {
    goto LABEL_17;
  }
  CFMutableDictionaryRef v1 = IOServiceMatching("AppleOLYHAL");
  CFRetain(v1);
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 0x40000000;
  v15[2] = sub_19D737340;
  v15[3] = &unk_1E5962DE8;
  v15[4] = &v16;
  v15[5] = &v20;
  sub_19D73A45C(v1, (uint64_t)v15);
  if (!*((unsigned char *)v17 + 24))
  {
    CFRetain(v1);
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 0x40000000;
    v14[2] = sub_19D7373C0;
    void v14[3] = &unk_1E5962E10;
    v14[4] = &v16;
    v14[5] = &v20;
    sub_19D73AEC8((uint64_t)v1, 5, (uint64_t)v14, 0);
  }
  if (!v21[3])
  {
    int v2 = *((unsigned __int8 *)v17 + 24);
    uint64_t v3 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v3) {
      uint64_t v9 = v3 + 1;
    }
    else {
      uint64_t v9 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    if (v2)
    {
      _MGLog((uint64_t)v9, 3802, @"failed to fetch wifi vendor (no vendor-id)", v4, v5, v6, v7, v8, v13[0]);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v13 = 0;
        uint64_t v10 = MEMORY[0x1E4F14500];
        uint64_t v11 = "failed to fetch wifi vendor (no vendor-id)";
LABEL_13:
        _os_log_impl(&dword_19D70E000, v10, OS_LOG_TYPE_DEFAULT, v11, v13, 2u);
      }
    }
    else
    {
      _MGLog((uint64_t)v9, 3804, @"failed to fetch wifi vendor (no AppleOLYHAL node)", v4, v5, v6, v7, v8, v13[0]);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v13 = 0;
        uint64_t v10 = MEMORY[0x1E4F14500];
        uint64_t v11 = "failed to fetch wifi vendor (no AppleOLYHAL node)";
        goto LABEL_13;
      }
    }
  }
  if (v1) {
    CFRelease(v1);
  }
  uint64_t v0 = v21[3];
LABEL_17:
  _Block_object_dispose(&v16, 8);
  _Block_object_dispose(&v20, 8);
  return v0;
}

CFStringRef sub_19D72CB6C()
{
  return sub_19D717CB4("IODeviceTree:/product", @"0/QVFV5/X0h5iDjrdYYcog", 112);
}

BOOL sub_19D72CB84()
{
  return sub_19D7145C8("IODeviceTree:/product", @"PgQhOQ4/ZYPLM6mgAoPm4A", 97);
}

CFTypeRef sub_19D72CB9C()
{
  BOOL v0 = sub_19D7145C8("IODeviceTree:/product", @"bluetooth-le", 0);
  CFMutableDictionaryRef v1 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
  if (!v0) {
    CFMutableDictionaryRef v1 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
  }
  CFTypeRef v2 = *v1;
  if (*v1) {
    CFRetain(*v1);
  }
  return v2;
}

uint64_t sub_19D72CBFC()
{
  if (sub_19D714D40() == 4)
  {
    BOOL v0 = sub_19D712390("IODeviceTree:/product", @"builtin-remote", 0);
    uint64_t v1 = MEMORY[0x1E4F1CFC8];
    if (!v0) {
      uint64_t v1 = MEMORY[0x1E4F1CFD0];
    }
  }
  else
  {
    uint64_t v1 = MEMORY[0x1E4F1CFC8];
  }
  return *(void *)v1;
}

BOOL sub_19D72CC5C()
{
  return sub_19D7145C8("IODeviceTree:/buttons", @"NlddTE7HnMJiw5OzTqbrYA", 102);
}

BOOL sub_19D72CC74()
{
  BOOL v0 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  uint64_t v1 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  values = Mutable;
  LODWORD(v9) = 65280;
  CFNumberRef v3 = CFNumberCreate(0, kCFNumberSInt32Type, &v9);
  CFDictionarySetValue(Mutable, @"PrimaryUsagePage", v3);
  CFRelease(v3);
  LODWORD(v9) = 4;
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberSInt32Type, &v9);
  CFDictionarySetValue(Mutable, @"PrimaryUsage", v4);
  CFRelease(v4);
  uint64_t v9 = @"IOPropertyMatch";
  CFDictionaryRef v5 = CFDictionaryCreate(0, (const void **)&v9, (const void **)&values, 1, v0, v1);
  CFRelease(values);
  io_service_t MatchingService = IOServiceGetMatchingService(*MEMORY[0x1E4F2EEF0], v5);
  io_service_t v7 = MatchingService;
  if (MatchingService) {
    IOObjectRelease(MatchingService);
  }
  return v7 != 0;
}

CFNumberRef sub_19D72CD9C()
{
  return sub_19D717F48("IODeviceTree:/product", @"Ini7+h7Q4ZZctfFM9+KTBw", 112);
}

BOOL sub_19D72CDB4()
{
  return sub_19D7145C8("IODeviceTree:/product", @"RN/FxX/3jy6LWaEIPR8qpA", 99);
}

uint64_t sub_19D72CDCC()
{
  if (MGGetBoolAnswer((const char **)@"j8/Omm6s1lsmTDFsXjsBfA")) {
    return 1;
  }

  return sub_19D742EA0((uint64_t)"IODeviceTree:/arm-io", @"disp0", 0, @"always-on-device-flipbook", 0);
}

BOOL sub_19D72CE2C()
{
  return *MEMORY[0x1E4F1CFD0] != 0;
}

const void *sub_19D72CE44()
{
  return sub_19D710BBC((const char **)@"QVwCp3Lu9RLnxw7LO9DBfQ", 0);
}

CFMutableDictionaryRef sub_19D72CE54()
{
  uint64_t v86 = *MEMORY[0x1E4F143B8];
  if (sub_19D714D40() == 6 || sub_19D714D40() == 7 || sub_19D714D40() == 4) {
    return 0;
  }
  long long v84 = xmmword_19D779670;
  long long v85 = xmmword_19D779660;
  long long v82 = xmmword_19D779690;
  long long v83 = xmmword_19D779680;
  long long v80 = xmmword_19D7796B0;
  long long v81 = xmmword_19D7796A0;
  long long v78 = xmmword_19D7796D0;
  long long v79 = xmmword_19D7796C0;
  long long v76 = xmmword_19D7796E0;
  long long v77 = xmmword_19D7797D0;
  long long v74 = xmmword_19D7797D0;
  long long v75 = xmmword_19D7796F0;
  long long v72 = xmmword_19D779700;
  long long v73 = xmmword_19D7797B0;
  long long v70 = xmmword_19D779710;
  long long v71 = xmmword_19D7797B0;
  long long v68 = xmmword_19D779720;
  long long v69 = xmmword_19D7797D0;
  long long v66 = xmmword_19D779740;
  long long v67 = xmmword_19D779730;
  long long v64 = xmmword_19D779760;
  long long v65 = xmmword_19D779750;
  long long v62 = xmmword_19D779780;
  long long v63 = xmmword_19D779770;
  long long v60 = xmmword_19D779790;
  long long v61 = xmmword_19D7797B0;
  long long v58 = xmmword_19D7797A0;
  long long v59 = xmmword_19D7797D0;
  long long v57 = xmmword_19D7797B0;
  long long v55 = xmmword_19D7797D0;
  long long v56 = xmmword_19D7797C0;
  long long v53 = xmmword_19D7797F0;
  long long v54 = xmmword_19D7797E0;
  long long v51 = xmmword_19D779810;
  long long v52 = xmmword_19D779800;
  long long v49 = xmmword_19D779830;
  long long v50 = xmmword_19D779820;
  long long v48 = xmmword_19D779840;
  int v42 = -1;
  int valuePtr = 0;
  BOOL v2 = MGGetBoolAnswer((const char **)@"DeviceSupportsReverseZoom");
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (v2) {
    CFIndex v4 = 4;
  }
  else {
    CFIndex v4 = 2;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFNumberRef v5 = sub_19D717F48("IODeviceTree:/product", @"artwork-device-subtype", 0);
    CFNumberRef v6 = sub_19D717F48("IODeviceTree:/product", @"artwork-scale-factor", 0);
    if (v5)
    {
      if (CFNumberGetValue(v5, kCFNumberSInt32Type, &valuePtr))
      {
        if (!v6 || !CFNumberGetValue(v6, kCFNumberSInt32Type, &v42))
        {
LABEL_104:
          CFRelease(v5);
LABEL_105:
          if (!v6) {
            return Mutable;
          }
LABEL_106:
          CFRelease(v6);
          return Mutable;
        }
        if (v42 == 2 && valuePtr == 2688)
        {
          int valuePtr = 1792;
LABEL_17:
          io_service_t v7 = 0;
          uint64_t v8 = 0;
          uint64_t v9 = &v75;
          uint64_t v10 = &v76;
          goto LABEL_18;
        }
        if (valuePtr > 2435)
        {
          if (valuePtr <= 2731)
          {
            if (valuePtr > 2555)
            {
              switch(valuePtr)
              {
                case 2556:
                  io_service_t v7 = 0;
                  uint64_t v8 = 0;
                  uint64_t v9 = &v61;
                  uint64_t v10 = &v62;
                  goto LABEL_18;
                case 2622:
                  io_service_t v7 = 0;
                  uint64_t v8 = 0;
                  uint64_t v9 = &v57;
                  uint64_t v10 = &v58;
                  goto LABEL_18;
                case 2688:
                  io_service_t v7 = 0;
                  uint64_t v8 = 0;
                  uint64_t v9 = &v77;
                  uint64_t v10 = &v78;
                  goto LABEL_18;
              }
              goto LABEL_92;
            }
            if (valuePtr != 2436)
            {
              if (valuePtr == 2532)
              {
                io_service_t v7 = 0;
                uint64_t v8 = 0;
                uint64_t v9 = &v71;
                uint64_t v10 = &v72;
                goto LABEL_18;
              }
              goto LABEL_92;
            }
LABEL_80:
            io_service_t v7 = 0;
            uint64_t v8 = 0;
            uint64_t v9 = &v73;
            uint64_t v10 = &v74;
            goto LABEL_18;
          }
          if (valuePtr > 2777)
          {
            switch(valuePtr)
            {
              case 2778:
                io_service_t v7 = 0;
                uint64_t v8 = 0;
                uint64_t v9 = &v69;
                uint64_t v10 = &v70;
                goto LABEL_18;
              case 2796:
                io_service_t v7 = 0;
                uint64_t v8 = 0;
                uint64_t v9 = &v59;
                uint64_t v10 = &v60;
                goto LABEL_18;
              case 2868:
                io_service_t v7 = 0;
                uint64_t v8 = 0;
                uint64_t v9 = &v55;
                uint64_t v10 = &v56;
                goto LABEL_18;
            }
            goto LABEL_92;
          }
          if (valuePtr == 2732)
          {
            uint64_t v8 = 0;
            if (v2) {
              io_service_t v7 = &v79;
            }
            else {
              io_service_t v7 = 0;
            }
            uint64_t v9 = &v80;
            uint64_t v10 = &v81;
LABEL_18:
            CFDataRef v11 = (const __CFData *)sub_19D71E9EC();
            CFDataRef v12 = v11;
            if (v11)
            {
              if (CFDataGetLength(v11) >= 16)
              {
                BytePtr = (double *)CFDataGetBytePtr(v12);
                if (valuePtr == 2732)
                {
                  uint64_t v14 = BytePtr;
                  if (BytePtr[1] > *BytePtr)
                  {
                    int v15 = *((_DWORD *)v10 + 1);
                    *((_DWORD *)v10 + 1) = *((_DWORD *)v10 + 3);
                    *((_DWORD *)v10 + 3) = v15;
                    int v16 = *((_DWORD *)v9 + 1);
                    *((_DWORD *)v9 + 1) = *((_DWORD *)v9 + 3);
                    *((_DWORD *)v9 + 3) = v16;
                    if (v7)
                    {
                      int v17 = *((_DWORD *)v7 + 1);
                      *((_DWORD *)v7 + 1) = *((_DWORD *)v7 + 3);
                      *((_DWORD *)v7 + 3) = v17;
                    }
                    uint64_t v18 = sub_19D71EF70("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
                    _MGLog((uint64_t)v18, 2046, @"copyAvailableDisplayZoomSizes: Changed landscape to portrait for %dx%d", v19, v20, v21, v22, v23, (int)v14[1]);
                    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
                    {
                      int v24 = (int)v14[1];
                      int v25 = (int)*v14;
                      *(_DWORD *)buf = 67109376;
                      int v45 = v24;
                      __int16 v46 = 1024;
                      int v47 = v25;
                      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "copyAvailableDisplayZoomSizes: Changed landscape to portrait for %dx%d", buf, 0xEu);
                    }
                  }
                }
              }
            }
            long long v26 = sub_19D737434((uint64_t)v10);
            if (v26)
            {
              int v27 = v26;
              long long v28 = sub_19D737434((uint64_t)v9);
              if (v28)
              {
                int v29 = v28;
                if (v7)
                {
                  long long v30 = sub_19D737434((uint64_t)v7);
                  if (!v30)
                  {
                    CFRelease(Mutable);
                    int v31 = 0;
LABEL_59:
                    CFMutableDictionaryRef Mutable = 0;
                    goto LABEL_69;
                  }
                }
                else
                {
                  long long v30 = 0;
                }
                if (v8)
                {
                  int v31 = sub_19D737434((uint64_t)v8);
                  if (!v31)
                  {
                    CFRelease(Mutable);
                    goto LABEL_59;
                  }
                }
                else
                {
                  int v31 = 0;
                }
                CFDictionarySetValue(Mutable, @"default", v27);
                CFDictionarySetValue(Mutable, @"zoomed", v29);
                if (v7) {
                  CFDictionarySetValue(Mutable, @"dense", v30);
                }
                if (v8) {
                  CFDictionarySetValue(Mutable, @"denser", v31);
                }
LABEL_69:
                CFRelease(v29);
                CFRelease(v27);
                if (v30) {
                  CFRelease(v30);
                }
                if (!v31) {
                  goto LABEL_73;
                }
                goto LABEL_72;
              }
              CFRelease(Mutable);
              CFMutableDictionaryRef Mutable = 0;
              int v31 = v27;
            }
            else
            {
              int v31 = Mutable;
              CFMutableDictionaryRef Mutable = 0;
            }
LABEL_72:
            CFRelease(v31);
LABEL_73:
            CFRelease(v5);
            if (v12) {
              CFRelease(v12);
            }
            goto LABEL_106;
          }
          if (valuePtr == 2752)
          {
            BOOL v33 = !v2;
            if (v2) {
              io_service_t v7 = &v49;
            }
            else {
              io_service_t v7 = 0;
            }
            if (v33) {
              uint64_t v8 = 0;
            }
            else {
              uint64_t v8 = &v48;
            }
            uint64_t v9 = &v51;
            uint64_t v10 = &v50;
            goto LABEL_18;
          }
LABEL_92:
          long long v34 = sub_19D71EF70("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
          _MGLog((uint64_t)v34, 2022, @"Unsupported artwork-device-subtype %d", v35, v36, v37, v38, v39, valuePtr);
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            int v45 = valuePtr;
            _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Unsupported artwork-device-subtype %d", buf, 8u);
          }
          goto LABEL_100;
        }
        if (valuePtr <= 2223)
        {
          if (valuePtr > 569)
          {
            if (valuePtr == 570)
            {
              io_service_t v7 = 0;
              uint64_t v8 = 0;
              uint64_t v9 = &v82;
              uint64_t v10 = &v83;
              goto LABEL_18;
            }
            if (valuePtr == 1792) {
              goto LABEL_17;
            }
            goto LABEL_92;
          }
          if (valuePtr != 568)
          {
            if (valuePtr == 569)
            {
              io_service_t v7 = 0;
              uint64_t v8 = 0;
              uint64_t v9 = &v84;
              uint64_t v10 = &v85;
              goto LABEL_18;
            }
            goto LABEL_92;
          }
        }
        else
        {
          if (valuePtr > 2359)
          {
            switch(valuePtr)
            {
              case 2360:
                if (v2)
                {
                  uint64_t v8 = &v63;
                  uint64_t v9 = &v64;
                  uint64_t v10 = &v65;
                  io_service_t v7 = &v64;
                  goto LABEL_18;
                }
                goto LABEL_100;
              case 2388:
                if (v2)
                {
                  uint64_t v8 = &v66;
                  uint64_t v9 = &v67;
                  uint64_t v10 = &v68;
                  io_service_t v7 = &v67;
                  goto LABEL_18;
                }
                goto LABEL_100;
              case 2420:
                if (v2)
                {
                  uint64_t v8 = &v52;
                  uint64_t v9 = &v53;
                  uint64_t v10 = &v54;
                  io_service_t v7 = &v53;
                  goto LABEL_18;
                }
                goto LABEL_100;
            }
            goto LABEL_92;
          }
          if (valuePtr != 2224)
          {
            if (valuePtr == 2340) {
              goto LABEL_80;
            }
            goto LABEL_92;
          }
        }
LABEL_100:
        CFArrayRef v40 = CFArrayCreate(v3, 0, 0, MEMORY[0x1E4F1D510]);
        if (v40)
        {
          CFArrayRef v41 = v40;
          CFDictionarySetValue(Mutable, @"default", v40);
          CFDictionarySetValue(Mutable, @"zoomed", v41);
        }
        else
        {
          CFArrayRef v41 = Mutable;
          CFMutableDictionaryRef Mutable = 0;
        }
        CFRelease(v41);
        goto LABEL_104;
      }
      CFRelease(Mutable);
      CFNumberRef v32 = v5;
    }
    else
    {
      CFNumberRef v32 = Mutable;
    }
    CFRelease(v32);
    CFMutableDictionaryRef Mutable = 0;
    goto LABEL_105;
  }
  return Mutable;
}

CFNumberRef sub_19D72D6F4()
{
  return sub_19D717F48("IODeviceTree:/product/camera", @"cmkS/KVB6ubxH76sLbumbw", 114);
}

CFNumberRef sub_19D72D70C()
{
  return sub_19D717F48("IODeviceTree:/chosen", @"4JalTKSe5a9I+mb00ATvag", 100);
}

__CFString *sub_19D72D724()
{
  if (sub_19D714D84()) {
    return @"iOS";
  }
  uint64_t v1 = (const void *)*MEMORY[0x1E4F1CD18];

  return (__CFString *)sub_19D7155AC(v1, 1);
}

const void *sub_19D72D770()
{
  return sub_19D710BBC((const char **)@"mtHZd1H8XJ2DMVtNVUSkag", 0);
}

BOOL sub_19D72D780()
{
  return !sub_19D7145C8("IODeviceTree:/product", @"wAbB2fAjUqUc6lNBelfWMA", 110);
}

uint64_t sub_19D72D7B0()
{
  return 0;
}

uint64_t sub_19D72D7B8()
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (sub_19D714D40() != 3 && sub_19D714D40() != 1 && sub_19D714D40() != 2) {
    return 0;
  }
  int v11 = 1032708406;
  long long v10 = xmmword_19D778C80;
  int v9 = 729903963;
  long long v8 = xmmword_19D778C94;
  return MGIsDeviceOneOfType((const UInt8 *)&v10, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v8) ^ 1;
}

BOOL sub_19D72D8BC()
{
  return sub_19D714D40() == 6;
}

uint64_t sub_19D72D8DC()
{
  return sub_19D736FBC(1);
}

uint64_t sub_19D72D8E4()
{
  uint64_t result = sub_19D714D40();
  if (result != 1) {
    return sub_19D714D40() == 3;
  }
  return result;
}

BOOL sub_19D72D910()
{
  return sub_19D7145C8("IODeviceTree:/product", @"8bY/L3i3rmxrl4ZjFZZpgQ", 115);
}

const void *sub_19D72D928()
{
  return sub_19D7155AC(@"MarketingVersion", 1);
}

BOOL sub_19D72D938()
{
  return sub_19D7374BC(1);
}

CFStringRef sub_19D72D940()
{
  CFDataRef v0 = (const __CFData *)sub_19D710BBC((const char **)@"5MXFoiW2zgxfIbaaTb/wvA", 0);
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  CFTypeID v2 = CFGetTypeID(v0);
  if (v2 != CFDataGetTypeID() || CFDataGetLength(v1) < 6) {
    goto LABEL_9;
  }
  CFIndex Length = CFDataGetLength(v1);
  BytePtr = CFDataGetBytePtr(v1);
  CFMutableStringRef Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, @"%02x", *BytePtr);
  if (Length >= 2)
  {
    CFIndex v6 = Length - 1;
    io_service_t v7 = (unsigned __int8 *)(BytePtr + 1);
    do
    {
      unsigned int v8 = *v7++;
      CFStringAppendFormat(Mutable, 0, @":%02x", v8);
      --v6;
    }
    while (v6);
  }
  if (Mutable)
  {
    CFStringRef Copy = CFStringCreateCopy(0, Mutable);
    CFRelease(Mutable);
  }
  else
  {
LABEL_9:
    CFStringRef Copy = 0;
  }
  CFRelease(v1);
  return Copy;
}

BOOL sub_19D72DA60(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"BQwz+BT9b5mS7OPh2WGD6A", a2);
}

BOOL sub_19D72DA88(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"BQwz+BT9b5mS7OPh2WGD6A", 83, a2);
}

CFNumberRef sub_19D72DA9C()
{
  return sub_19D717F48("IODeviceTree:/chosen", @"+VTSncKV5ykgl9KAsuHFFg", 115);
}

uint64_t sub_19D72DAB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  int v58 = -526227167;
  long long v57 = xmmword_19D77907C;
  int v56 = -1509831889;
  long long v55 = xmmword_19D779090;
  if (MGIsDeviceOneOfType((const UInt8 *)&v57, a2, a3, a4, a5, a6, a7, a8, (uint64_t)&v55)) {
    goto LABEL_6;
  }
  int v54 = 289690957;
  long long v53 = xmmword_19D778CA8;
  int v52 = 586720268;
  long long v51 = xmmword_19D778CBC;
  if (MGIsDeviceOneOfType((const UInt8 *)&v53, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v51)) {
    goto LABEL_6;
  }
  if (sub_19D714D40() != 6) {
    goto LABEL_6;
  }
  int v50 = 368885834;
  long long v49 = xmmword_19D779054;
  int v48 = -414334491;
  long long v47 = xmmword_19D779068;
  if (MGIsDeviceOneOfType((const UInt8 *)&v49, v15, v16, v17, v18, v19, v20, v21, (uint64_t)&v47)
    || (int v46 = -2092955395,
        long long v45 = xmmword_19D778CD0,
        int v44 = 674998600,
        long long v43 = xmmword_19D778CE4,
        MGIsDeviceOneOfType((const UInt8 *)&v45, v22, v23, v24, v25, v26, v27, v28, (uint64_t)&v43)))
  {
LABEL_6:
    uint64_t v36 = MEMORY[0x1E4F1CFC8];
  }
  else
  {
    int v42 = 1711910369;
    long long v41 = xmmword_19D778CF8;
    int v40 = -1282800328;
    long long v39 = xmmword_19D778D0C;
    int v38 = MGIsDeviceOneOfType((const UInt8 *)&v41, v29, v30, v31, v32, v33, v34, v35, (uint64_t)&v39);
    uint64_t v36 = MEMORY[0x1E4F1CFC8];
    if (!v38) {
      uint64_t v36 = MEMORY[0x1E4F1CFD0];
    }
  }
  return *(void *)v36;
}

uint64_t sub_19D72DCB0()
{
  return sub_19D742EA0((uint64_t)"IODeviceTree:/", @"4k6Wv56SWfITjzet+hIHMQ", 109, @"9f5ODNAt2gufqSI82eYnLw", 99);
}

BOOL sub_19D72DCD4()
{
  return sub_19D714D40() == 3;
}

uint64_t sub_19D72DCF4()
{
  return sub_19D73E2D0(0x42474D74u);
}

BOOL sub_19D72DD04(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"hfs43coKE3iWlCwnqPgBpg", a2);
}

BOOL sub_19D72DD2C(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"hfs43coKE3iWlCwnqPgBpg", 73, a2);
}

BOOL sub_19D72DD40()
{
  return sub_19D7145C8("IODeviceTree:/product/camera", @"npI2l0ybDY9Um4z/T8K/Sg", 100);
}

CFStringRef sub_19D72DD58()
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (qword_1E9449420 != -1) {
    dispatch_once(&qword_1E9449420, &unk_1EEF8FCA0);
  }
  if (!off_1E9449418)
  {
    uint64_t v10 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v10) {
      uint64_t v16 = v10 + 1;
    }
    else {
      uint64_t v16 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog((uint64_t)v16, 8155, @"dlsym NfRestoreCopyUniqueFDRKey failed", v11, v12, v13, v14, v15, v28);
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
      return 0;
    }
    *(_WORD *)buf = 0;
    uint64_t v17 = MEMORY[0x1E4F14500];
    uint64_t v18 = "dlsym NfRestoreCopyUniqueFDRKey failed";
    uint32_t v19 = 2;
    goto LABEL_22;
  }
  uint64_t v29 = 0;
  CFDataRef v0 = (const char *)off_1E9449418(sub_19D737720, &v29, 0);
  if (!v0)
  {
    uint64_t v20 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v20) {
      uint64_t v26 = v20 + 1;
    }
    else {
      uint64_t v26 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog((uint64_t)v26, 8151, @"NfRestoreCopyUniqueFDRKey failed %@", v21, v22, v23, v24, v25, v29);
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
      return 0;
    }
    *(_DWORD *)buf = 138412290;
    uint64_t v31 = v29;
    uint64_t v17 = MEMORY[0x1E4F14500];
    uint64_t v18 = "NfRestoreCopyUniqueFDRKey failed %@";
    uint32_t v19 = 12;
LABEL_22:
    _os_log_impl(&dword_19D70E000, v17, OS_LOG_TYPE_DEFAULT, v18, buf, v19);
    return 0;
  }
  CFDataRef v1 = (char *)v0;
  CFStringRef v2 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v0, 0x8000100u);
  if (!v2)
  {
    uint64_t v3 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v3) {
      uint64_t v9 = v3 + 1;
    }
    else {
      uint64_t v9 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog((uint64_t)v9, 8147, @"CFStringCreateWithCString failed", v4, v5, v6, v7, v8, v28);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "CFStringCreateWithCString failed", buf, 2u);
    }
  }
  free(v1);
  return v2;
}

const void *sub_19D72DFA0()
{
  return sub_19D710BBC((const char **)@"6iI7/9cVUGIjdrSvIXEt4A", 0);
}

BOOL sub_19D72DFB0()
{
  return *MEMORY[0x1E4F1CFD0] != 0;
}

BOOL sub_19D72DFC8()
{
  return sub_19D712390("IODeviceTree:/product", @"8Wunmi1SpU1MxfBxkv3KOw", 100);
}

uint64_t sub_19D72DFE0()
{
  CFDataRef v0 = (uint64_t (*)(void))*((void *)off_1E9449170 + 36);
  if (!v0) {
    CFDataRef v0 = (uint64_t (*)(void))sub_19D71A930(36, 2);
  }

  return v0();
}

const void *sub_19D72E020()
{
  return sub_19D71A230("IODeviceTree:/arm-io/disp0", @"Zhoou87qmFpFwcFsm7Jlyg", 118);
}

CFStringRef sub_19D72E038()
{
  return sub_19D717CB4("IODeviceTree:/product", @"kc+QzHP4Frf2NvP+mclQ2A", 119);
}

uint64_t sub_19D72E050()
{
  return 1;
}

uint64_t sub_19D72E058(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  int v14 = 368885834;
  long long v13 = xmmword_19D779054;
  int v12 = -526227167;
  long long v11 = xmmword_19D77907C;
  if (MGIsDeviceOneOfType((const UInt8 *)&v13, a2, a3, a4, a5, a6, a7, a8, (uint64_t)&v11))
  {
    uint64_t v8 = MEMORY[0x1E4F1CFC8];
  }
  else
  {
    int v9 = sub_19D714D40();
    uint64_t v8 = MEMORY[0x1E4F1CFC8];
    if (v9 == 6) {
      uint64_t v8 = MEMORY[0x1E4F1CFD0];
    }
  }
  return *(void *)v8;
}

BOOL sub_19D72E1A8()
{
  return sub_19D7145C8("IODeviceTree:/product", @"c2ZyLSF00uEyREloINiqVA", 104);
}

BOOL sub_19D72E1C0()
{
  CFStringRef v0 = sub_19D717CB4("IODeviceTree:/chosen", @"osenvironment", 0);
  if (v0)
  {
    CFStringRef v1 = v0;
    CFComparisonResult v2 = CFStringCompare(v0, @"diagnostics", 0);
    CFRelease(v1);
    if (v2 == kCFCompareEqualTo) {
      return 1;
    }
  }

  return sub_19D7145C8("IODeviceTree:/product", @"boot-ios-diagnostics", 0);
}

uint64_t sub_19D72E250()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_19D72E258()
{
  uint64_t result = sub_19D714D40();
  if (result != 1) {
    return sub_19D714D40() == 2
  }
        || sub_19D714D40() == 3
        || sub_19D714D40() == 6;
  return result;
}

BOOL sub_19D72E2A4()
{
  if (sub_19D713E18(@"CH")) {
    return 1;
  }

  return sub_19D713E18(@"<GERMANY>");
}

uint64_t sub_19D72E2EC()
{
  CFDataRef v0 = (const __CFData *)sub_19D717CF8("IODeviceTree:/chosen", @"housing-color", 0);
  uint64_t v1 = sub_19D73E560(v0);
  if (v0) {
    CFRelease(v0);
  }
  return v1;
}

const void *sub_19D72E33C()
{
  return sub_19D710BBC((const char **)@"BOYfUi496moe56A0RWFbqQ", 0);
}

__CFDictionary *sub_19D72E34C()
{
  CFMutableStringRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef v1 = sub_19D73A5CC(1, "als");
  if (v1)
  {
    CFMutableDictionaryRef v2 = v1;
    CFDictionaryAddValue(Mutable, @"als", v1);
    CFRelease(v2);
  }
  CFMutableDictionaryRef v3 = sub_19D73A5CC(1, "multi-touch");
  if (v3)
  {
    CFMutableDictionaryRef v4 = v3;
    CFDictionaryAddValue(Mutable, @"multi-touch", v3);
    CFRelease(v4);
  }
  CFMutableDictionaryRef v5 = sub_19D73A5CC(1, "prox");
  if (v5)
  {
    CFMutableDictionaryRef v6 = v5;
    CFDictionaryAddValue(Mutable, @"prox", v5);
    CFRelease(v6);
  }
  return Mutable;
}

BOOL sub_19D72E428(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"5mvQIwu3Mqqw/zOKmwGkWw", a2);
}

BOOL sub_19D72E450(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"5mvQIwu3Mqqw/zOKmwGkWw", 80, a2);
}

uint64_t sub_19D72E464()
{
  return sub_19D742FB8((uint64_t)"IODeviceTree:", @"tristar", 0, @"esn", 0);
}

BOOL sub_19D72E488(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"o60T6wXe1DDaO4a4gw10TA", a2);
}

BOOL sub_19D72E4B0(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"o60T6wXe1DDaO4a4gw10TA", 84, a2);
}

CFTypeRef sub_19D72E4C4()
{
  return sub_19D735FA8(@"YonkersSNUM");
}

BOOL sub_19D72E4D0(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"67Dsh4G8EGQp4WbPDfS/Xw", a2);
}

BOOL sub_19D72E4F8(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"67Dsh4G8EGQp4WbPDfS/Xw", 89, a2);
}

BOOL sub_19D72E50C()
{
  return sub_19D7145C8("IODeviceTree:/buttons", @"/ZdBovdn5DLfkQkSAuAskw", 115);
}

CFNumberRef sub_19D72E524()
{
  return sub_19D717F48("IODeviceTree:/product", @"1HWDBfJwBJZ8TDHcPDafmQ", 101);
}

unint64_t sub_19D72E53C()
{
  return (unint64_t)sub_19D71DAD4() >> 32;
}

BOOL sub_19D72E558()
{
  if (sub_19D714D40() != 1 || !sub_19D712390("IODeviceTree:/product", @"supports-lotx", 0)) {
    return 0;
  }

  return sub_19D737810();
}

const void *sub_19D72E5B0()
{
  return sub_19D710BBC((const char **)@"4uzgAFPkzKUmlZG5HpFIkg", 0);
}

BOOL sub_19D72E5C0()
{
  return sub_19D712390("IODeviceTree:/product", @"FuR7SfqQmxpRW5MyqMm7FQ", 108);
}

BOOL sub_19D72E5D8()
{
  if (sub_19D714D40() != 6) {
    return 0;
  }

  return sub_19D716960((BOOL)@"M10");
}

uint64_t sub_19D72E61C()
{
  return 1;
}

BOOL sub_19D72E624()
{
  CFDataRef v0 = sub_19D72620C();
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  CFTypeID v2 = CFGetTypeID(v0);
  if (v2 == CFDataGetTypeID() && CFDataGetLength(v1) >= 6)
  {
    BytePtr = CFDataGetBytePtr(v1);
    if (*BytePtr)
    {
      BOOL v4 = 1;
    }
    else
    {
      unint64_t v6 = 0;
      do
      {
        unint64_t v7 = v6;
        if (v6 == 5) {
          break;
        }
        ++v6;
      }
      while (!BytePtr[v7 + 1]);
      BOOL v4 = v7 < 5;
    }
  }
  else
  {
    BOOL v4 = 0;
  }
  CFRelease(v1);
  return v4;
}

CFNumberRef sub_19D72E6CC()
{
  CFNumberRef result = sub_19D717F48("IODeviceTree:/product", @"builtin-mics", 0);
  if (!result)
  {
    int valuePtr = 0;
    return CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  }
  return result;
}

uint64_t sub_19D72E714()
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  if (qword_1E9449360 != -1) {
    dispatch_once(&qword_1E9449360, &unk_1EEF8FCC0);
  }
  if (off_1E9449350) {
    BOOL v0 = off_1E9449358 == 0;
  }
  else {
    BOOL v0 = 1;
  }
  if (v0)
  {
    CFDataRef v1 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v1) {
      unint64_t v7 = v1 + 1;
    }
    else {
      unint64_t v7 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog((uint64_t)v7, 5270, @"Unable to dlsym AMFDRCreateWithOptions and AMFDRSealingMapVerifySealing", v2, v3, v4, v5, v6, v38);
    uint64_t v8 = 0;
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
      return v8;
    }
    *(_WORD *)buf = 0;
    int v9 = MEMORY[0x1E4F14500];
    uint64_t v10 = "Unable to dlsym AMFDRCreateWithOptions and AMFDRSealingMapVerifySealing";
LABEL_27:
    _os_log_impl(&dword_19D70E000, v9, OS_LOG_TYPE_DEFAULT, v10, buf, 2u);
    return 0;
  }
  uint64_t v11 = *MEMORY[0x1E4F1CF80];
  CFMutableStringRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    uint64_t v23 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v23) {
      uint64_t v29 = v23 + 1;
    }
    else {
      uint64_t v29 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog((uint64_t)v29, 5252, @"CFDictionaryCreateMutable failed", v24, v25, v26, v27, v28, v38);
    uint64_t v8 = 0;
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
      return v8;
    }
    *(_WORD *)buf = 0;
    int v9 = MEMORY[0x1E4F14500];
    uint64_t v10 = "CFDictionaryCreateMutable failed";
    goto LABEL_27;
  }
  long long v13 = Mutable;
  CFDictionarySetValue(Mutable, @"DataStore", @"Local");
  uint64_t v14 = off_1E9449350(v11, v13);
  if (v14)
  {
    uint64_t v15 = (const void *)v14;
    uint64_t v8 = off_1E9449358(v14, &cf);
    if ((v8 & 1) == 0)
    {
      uint64_t v16 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      uint64_t v22 = v16 ? v16 + 1 : "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      _MGLog((uint64_t)v22, 5265, @"AMFDRSealingMapVerifySealing failed: %@", v17, v18, v19, v20, v21, (char)cf);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        CFTypeRef v41 = cf;
        _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "AMFDRSealingMapVerifySealing failed: %@", buf, 0xCu);
      }
    }
    CFRelease(v15);
  }
  else
  {
    uint64_t v30 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v30) {
      uint64_t v36 = v30 + 1;
    }
    else {
      uint64_t v36 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog((uint64_t)v36, 5260, @"AMFDRCreateWithOptions failed", v31, v32, v33, v34, v35, v38);
    uint64_t v8 = 0;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "AMFDRCreateWithOptions failed", buf, 2u);
      uint64_t v8 = 0;
    }
  }
  CFRelease(v13);
  if (cf) {
    CFRelease(cf);
  }
  return v8;
}

BOOL sub_19D72EA1C()
{
  return sub_19D712390("IODeviceTree:/product/audio", @"J/a5Y6rhDH0gVkYtWUylOA", 115);
}

BOOL sub_19D72EA34()
{
  if (sub_19D714D40() != 6) {
    return 0;
  }

  return sub_19D716960((BOOL)@"M11");
}

__CFArray *sub_19D72EA78()
{
  return sub_19D73B62C(@"encoding");
}

const void *sub_19D72EA84()
{
  BOOL v0 = (const void *)sub_19D71EBB4();
  CFDataRef v1 = v0;
  if (v0) {
    CFRetain(v0);
  }
  return v1;
}

BOOL sub_19D72EAB8()
{
  return !sub_19D7145C8("IODeviceTree:/product", @"/ej/HWmqnKV/QQptXhUZmg", 110);
}

uint64_t sub_19D72EAEC()
{
  return sub_19D742EA0((uint64_t)"IODeviceTree:/", @"M2qC9+75568xA1E3I+r+dg", 115, @"lFFadhW8h/hfpcu601hyqg", 104);
}

CFTypeRef sub_19D72EB10()
{
  return sub_19D7128AC(0, "IOSDIOIoCardDevice", @"IOSDIOProductInfo1");
}

uint64_t sub_19D72EB28()
{
  uint64_t v0 = 1;
  if (!sub_19D73A594(1, "aop-smart-cover"))
  {
    uint64_t v0 = 0;
    if (sub_19D7145C8("IODeviceTree:/buttons", @"function-button_halleffect", 0))
    {
      CFDataRef v1 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v1) {
        unint64_t v7 = v1 + 1;
      }
      else {
        unint64_t v7 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      }
      _MGLog((uint64_t)v7, 8170, @"HallEffectSensorCability true using function-button_halleffect", v2, v3, v4, v5, v6, v9[0]);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int v9 = 0;
        _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "HallEffectSensorCability true using function-button_halleffect", v9, 2u);
      }
      return 1;
    }
  }
  return v0;
}

const void *sub_19D72EBF8()
{
  return sub_19D71A230("IODeviceTree:/product", @"GvmsjQ/68T7do2CJxUhMig", 98);
}

BOOL sub_19D72EC10(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"IAJzgzhEVk3SMNuEhChs2w", a2);
}

BOOL sub_19D72EC38(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"IAJzgzhEVk3SMNuEhChs2w", 82, a2);
}

BOOL sub_19D72EC4C()
{
  return sub_19D7145C8("IODeviceTree:/product", @"bhPjDx/0UDk9mzia6ksZ+A", 110);
}

CFDictionaryRef sub_19D72EC64()
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (sub_19D714D40() != 4) {
    return 0;
  }
  *(_DWORD *)buf = 0;
  if (sub_19D712B14((const char **)@"g7YQ1Djxh4YiKlEeaoGhzg", 5, 5, kCFNumberSInt32Type, buf)) {
    int v0 = *(_DWORD *)buf;
  }
  else {
    int v0 = 0;
  }
  *(_DWORD *)buf = 0;
  if (sub_19D712B14((const char **)@"OjzOua0LkOegX7pQdgMksw", 5, 5, kCFNumberSInt32Type, buf)) {
    int v1 = *(_DWORD *)buf;
  }
  else {
    int v1 = 0;
  }
  if (v0 < v1)
  {
    uint64_t v2 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    uint64_t v8 = v2 ? v2 + 1 : "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    _MGLog((uint64_t)v8, 4728, @"%dx%d not in landscape mode", v3, v4, v5, v6, v7, v0);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v0;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v1;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%dx%d not in landscape mode", buf, 0xEu);
    }
  }
  int v9 = @"4:3";
  if (v1)
  {
    if ((float)((float)v0 / (float)v1) > 1.5) {
      int v9 = @"16:9";
    }
  }
  *(_OWORD *)buf = xmmword_1E5962F68;
  long long v14 = *(_OWORD *)&off_1E5962F78;
  long long v15 = xmmword_1E5962F88;
  values[0] = v9;
  values[1] = @"OFF";
  values[2] = @"ScaleToFit";
  values[3] = @"DisplayPort";
  uint64_t v10 = (void *)*MEMORY[0x1E4F1CFC8];
  values[4] = @"NTSC";
  values[5] = v10;
  return CFDictionaryCreate(0, (const void **)buf, (const void **)values, 6, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
}

uint64_t sub_19D72EE58()
{
  if (sub_19D714D40() == 6 || sub_19D7175F4((BOOL)@"H6") || sub_19D7175F4((BOOL)@"H5"))
  {
    uint64_t v0 = MEMORY[0x1E4F1CFC8];
  }
  else
  {
    BOOL v2 = sub_19D7175F4((BOOL)@"H4");
    uint64_t v0 = MEMORY[0x1E4F1CFC8];
    if (!v2) {
      uint64_t v0 = MEMORY[0x1E4F1CFD0];
    }
  }
  return *(void *)v0;
}

BOOL sub_19D72EECC()
{
  if (sub_19D742C60(@"isp", @"camera-front")) {
    return 1;
  }

  return sub_19D712390("IODeviceTree:/arm-io/isp", @"X9NA3D+PguwY0i0Uffl07Q", 99);
}

CFNumberRef sub_19D72EF28()
{
  return sub_19D717F48("IODeviceTree:/arm-io/aop/iop-aop-nub/als", @"SIC/2YcTF6ydv8Hfcn9THw", 97);
}

uint64_t sub_19D72EF40()
{
  int v1 = 0;
  LODWORD(result) = sub_19D712B14((const char **)@"ND6ZSbBBgMgwtMfh+OL5Wg", 5, 5, kCFNumberSInt32Type, &v1);
  if (v1 > 0) {
    return result;
  }
  else {
    return 0;
  }
}

CFNumberRef sub_19D72EF88()
{
  return sub_19D71F69C(@"screen-capture-width", (const char **)@"g7YQ1Djxh4YiKlEeaoGhzg");
}

BOOL sub_19D72EF9C()
{
  mach_port_t v0 = *MEMORY[0x1E4F2EEF0];
  CFDictionaryRef v1 = IOServiceMatching("AppleJPEGDriver");
  io_service_t MatchingService = IOServiceGetMatchingService(v0, v1);
  io_service_t v3 = MatchingService;
  if (MatchingService) {
    IOObjectRelease(MatchingService);
  }
  return v3 != 0;
}

BOOL sub_19D72EFF4()
{
  return !sub_19D7145C8("IODeviceTree:/product", @"PTfO3r9syJ45k+OItTlD3Q", 117);
}

BOOL sub_19D72F024()
{
  return sub_19D712390("IODeviceTree:/chosen", @"WbcphnnzI6Yb5r/AzwiyUA", 109);
}

__CFString *sub_19D72F03C()
{
  uint64_t valuePtr = 0;
  CFNumberRef v0 = (const __CFNumber *)sub_19D710BBC((const char **)@"TF31PAB6aO8KAbPyNKSxKA", 0);
  if (!v0) {
    return @"0000000000000000";
  }
  CFNumberRef v1 = v0;
  CFNumberGetValue(v0, kCFNumberLongLongType, &valuePtr);
  CFStringRef v2 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%qu", valuePtr);
  CFRelease(v1);
  return (__CFString *)v2;
}

BOOL sub_19D72F0C8(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"6WdGcQGw4VLzrgxJo+bcrw", a2);
}

BOOL sub_19D72F0F0(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"6WdGcQGw4VLzrgxJo+bcrw", 85, a2);
}

uint64_t sub_19D72F104()
{
  uint64_t v0 = *MEMORY[0x1E4F1CFC8];
  if (sub_19D7145C8("IODeviceTree:/product", @"is-muse", 0))
  {
    if (!sub_19D7123B8("IODeviceTree:/product", @"chip-role", 0, 1, 1)) {
      return *MEMORY[0x1E4F1CFD0];
    }
  }
  else
  {
    CFNumberRef v1 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v1) {
      uint64_t v7 = v1 + 1;
    }
    else {
      uint64_t v7 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog((uint64_t)v7, 8441, @"muse not set on product node", v2, v3, v4, v5, v6, v9[0]);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v9 = 0;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "muse not set on product node", v9, 2u);
    }
  }
  return v0;
}

CFNumberRef sub_19D72F1F8()
{
  int valuePtr = 0;
  CFDictionaryRef v0 = (const __CFDictionary *)sub_19D710BBC((const char **)@"NVRAMDictionary", 0);
  if (!v0)
  {
    long long v14 = sub_19D71EF70("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
    _MGLog((uint64_t)v14, 6129, @"Could not copy NVRAMDictionary", v15, v16, v17, v18, v19, v27[0]);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Could not copy NVRAMDictionary", buf, 2u);
    }
    return 0;
  }
  CFDictionaryRef v1 = v0;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v0, @"IsServicePart");
  CFNumberRef v3 = Value;
  if (!Value)
  {
LABEL_23:
    CFDictionaryRef v12 = v1;
    goto LABEL_24;
  }
  CFTypeID v4 = CFGetTypeID(Value);
  if (v4 != CFDataGetTypeID())
  {
    if (v4 == CFStringGetTypeID())
    {
      CFNumberRef v9 = 0;
      goto LABEL_8;
    }
    if (v4 == CFNumberGetTypeID())
    {
      CFNumberGetValue(v3, kCFNumberSInt32Type, &valuePtr);
      long long v13 = (const __CFNumber **)MEMORY[0x1E4F1CFD0];
      if (valuePtr != 1) {
        long long v13 = (const __CFNumber **)MEMORY[0x1E4F1CFC8];
      }
      CFNumberRef v3 = *v13;
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  BytePtr = CFDataGetBytePtr(v3);
  CFIndex Length = CFDataGetLength(v3);
  CFStringRef v8 = CFStringCreateWithBytes(v5, BytePtr, Length, 0x8000100u, 0);
  if (!v8)
  {
    uint64_t v20 = sub_19D71EF70("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
    _MGLog((uint64_t)v20, 6140, @"Could not create string", v21, v22, v23, v24, v25, v27[0]);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      v27[0] = 0;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Could not create string", (uint8_t *)v27, 2u);
    }
LABEL_22:
    CFNumberRef v3 = 0;
    goto LABEL_23;
  }
  CFNumberRef v3 = (const __CFNumber *)v8;
  CFStringGetTypeID();
  CFNumberRef v9 = v3;
LABEL_8:
  CFComparisonResult v10 = CFStringCompare((CFStringRef)v3, @"true", 0);
  uint64_t v11 = (const __CFNumber **)MEMORY[0x1E4F1CFD0];
  if (v10 && CFStringCompare((CFStringRef)v3, @"1", 0)) {
    uint64_t v11 = (const __CFNumber **)MEMORY[0x1E4F1CFC8];
  }
  CFNumberRef v3 = *v11;
  CFRelease(v1);
  if (v9)
  {
    CFDictionaryRef v12 = v9;
LABEL_24:
    CFRelease(v12);
  }
  return v3;
}

BOOL sub_19D72F438()
{
  return sub_19D712390("IODeviceTree:/product", @"supports-lotx", 0);
}

CFTypeRef sub_19D72F450()
{
  CFTypeID TypeID = CFBooleanGetTypeID();

  return sub_19D738F78((uint64_t)"copyDeviceSupportsTethering", (uint64_t)&unk_1EEF8FCE0, TypeID);
}

const void *sub_19D72F48C()
{
  if (sub_19D714D84()) {
    CFDictionaryRef v0 = @"iOSSupportVersion";
  }
  else {
    CFDictionaryRef v0 = (__CFString *)*MEMORY[0x1E4F1CD30];
  }

  return sub_19D7155AC(v0, 1);
}

BOOL sub_19D72F4D4()
{
  return sub_19D7145C8("IODeviceTree:/product/camera", @"IvdL59ITgJvhb5ptpLbqRg", 114);
}

BOOL sub_19D72F4EC()
{
  return !sub_19D713E18(@"KH");
}

uint64_t sub_19D72F510()
{
  int v1 = 0;
  LODWORD(result) = sub_19D712B14((const char **)@"wOVK1nhmiAawowdbIwgyaQ", 5, 5, kCFNumberSInt32Type, &v1);
  if (v1 > 59) {
    return result;
  }
  else {
    return 0;
  }
}

const void *sub_19D72F558()
{
  return sub_19D710BBC((const char **)@"HV7WDiidgMf7lwAu++Lk5w", 0);
}

CFNumberRef sub_19D72F568()
{
  if (!sub_19D7175F4((BOOL)@"H4") && sub_19D714D40() != 4) {
    sub_19D714D40();
  }
  int valuePtr = 1065353216;
  return CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
}

CFTypeRef sub_19D72F5BC()
{
  return sub_19D7128AC(1, "rose", @"ECID");
}

BOOL sub_19D72F5D4(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"CPiqZJJPocpjc5C5qe1tiw", a2);
}

BOOL sub_19D72F5FC(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"CPiqZJJPocpjc5C5qe1tiw", 65, a2);
}

BOOL sub_19D72F610()
{
  if (sub_19D714D40() != 6) {
    return 0;
  }
  BOOL v0 = !sub_19D7145C8("IODeviceTree:/product/haptics", @"pre-warm-disabled", 0)
    || !sub_19D712390("IODeviceTree:/product/haptics", @"pre-warm-disabled", 0);
  CFRelease(@"pre-warm-disabled");
  return v0;
}

uint64_t sub_19D72F690()
{
  BOOL v0 = (uint64_t (*)(void))*((void *)off_1E9449170 + 43);
  if (!v0) {
    BOOL v0 = (uint64_t (*)(void))sub_19D71A930(43, 2);
  }

  return v0();
}

__CFString *sub_19D72F6D4()
{
  CFStringRef v0 = sub_19D712710(0, "IOPlatformExpertDevice", @"IOPlatformSerialNumber");
  if (v0)
  {
    CFTypeRef v1 = v0;
    if (CFStringGetLength(v0)) {
      goto LABEL_14;
    }
    CFRelease(v1);
  }
  if (!MGGetBoolAnswer((const char **)@"8DHlxr5ECKhTSL3HmlZQGQ"))
  {
    CFTypeRef v1 = 0;
    goto LABEL_14;
  }
  CFDataRef v2 = sub_19D73E074(0x53724E6Du);
  CFStringRef v3 = sub_19D717DB4(v2, @"SrNm");
  if (v3)
  {
    CFStringRef v4 = v3;
    if (CFStringGetLength(v3) < 1) {
      CFTypeRef v1 = 0;
    }
    else {
      CFTypeRef v1 = CFRetain(v4);
    }
    CFRelease(v4);
    if (v2) {
      goto LABEL_13;
    }
  }
  else
  {
    CFTypeRef v1 = 0;
    if (v2) {
LABEL_13:
    }
      CFRelease(v2);
  }
LABEL_14:
  if (v1) {
    return (__CFString *)v1;
  }
  else {
    return &stru_1EEF93EC0;
  }
}

CFNumberRef sub_19D72F7B4()
{
  return sub_19D71F69C(@"screen-capture-height", (const char **)@"OjzOua0LkOegX7pQdgMksw");
}

CFTypeRef sub_19D72F7C8()
{
  uint64_t v0 = *((void *)off_1E9449170 + 11);
  if (!v0) {
    uint64_t v0 = sub_19D71A930(11, 2);
  }
  CFTypeID TypeID = CFDictionaryGetTypeID();

  return sub_19D739338((uint64_t)"_CTServerConnectionCopyFirmwareUpdateInfo", v0, TypeID);
}

uint64_t sub_19D72F828()
{
  unsigned int v0 = sub_19D738A24();
  uint64_t v1 = MEMORY[0x1E4F1CFD0];
  if (!v0) {
    uint64_t v1 = MEMORY[0x1E4F1CFC8];
  }
  return *(void *)v1;
}

CFTypeRef sub_19D72F85C()
{
  return sub_19D735FA8(@"YonkersChipID");
}

BOOL sub_19D72F868(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"2/q9qmqGigMfkzY830Zf2g", a2);
}

BOOL sub_19D72F890(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"2/q9qmqGigMfkzY830Zf2g", 89, a2);
}

BOOL sub_19D72F8A4()
{
  return !sub_19D7145C8("IODeviceTree:/product", @"bbyFCcrPE+k6ZXIVbXSFUw", 117);
}

CFDictionaryRef sub_19D72F8D4()
{
  return sub_19D73B3CC(@"pref-encoding");
}

CFTypeRef sub_19D72F8E0()
{
  uint64_t v0 = *((void *)off_1E9449170 + 9);
  if (!v0) {
    uint64_t v0 = sub_19D71A930(9, 2);
  }
  CFTypeID TypeID = CFDictionaryGetTypeID();

  return sub_19D739338((uint64_t)"_CTServerConnectionCopyFirmwarePreflightInfo", v0, TypeID);
}

BOOL sub_19D72F940()
{
  return sub_19D7145C8("IODeviceTree:/product", @"4+ntrbAfaq8rQKPfQo16CQ", 115);
}

uint64_t sub_19D72F958()
{
  int valuePtr = 0;
  uint64_t v0 = *((void *)off_1E9449170 + 6);
  if (!v0) {
    uint64_t v0 = sub_19D71A930(6, 2);
  }
  CFTypeID TypeID = CFNumberGetTypeID();
  CFNumberRef v2 = (const __CFNumber *)sub_19D739338((uint64_t)"_CTServerConnectionCopyDualSimCapability", v0, TypeID);
  if (!v2) {
    return 0;
  }
  CFNumberRef v3 = v2;
  if (CFNumberGetValue(v2, kCFNumberIntType, &valuePtr)) {
    BOOL v4 = valuePtr == 3;
  }
  else {
    BOOL v4 = 1;
  }
  uint64_t v5 = !v4;
  CFRelease(v3);
  return v5;
}

CFStringRef sub_19D72F9F0()
{
  return sub_19D717CB4("IODeviceTree:/product", @"tAryHM5IUMkdtvVqqu1tcA", 97);
}

BOOL sub_19D72FA08(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"UCLOC2TKe3vRkId34ubKWw", a2);
}

BOOL sub_19D72FA30(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"UCLOC2TKe3vRkId34ubKWw", 65, a2);
}

uint64_t sub_19D72FA44()
{
  if (!sub_19D716960((BOOL)@"H13")) {
    return 0;
  }
  if (sub_19D71ACF0((BOOL)@"t8103", 0)
    || sub_19D71ACF0((BOOL)@"t6000", 0)
    || sub_19D71ACF0((BOOL)@"t6001", 0))
  {
    return 1;
  }
  uint64_t v0 = 1;
  if (!sub_19D71ACF0((BOOL)@"t6002", 0))
  {
    if (sub_19D71ACF0((BOOL)@"t8110", 0)) {
      return 1;
    }
    else {
      return 2;
    }
  }
  return v0;
}

uint64_t sub_19D72FAF0()
{
  return sub_19D742EA0((uint64_t)"IODeviceTree:/arm-io", @"h0OUwg53vKp+IPdzLG4NrA", 109, @"aNZeCyuWxI6SE/KwZ129wA", 110);
}

uint64_t sub_19D72FB18()
{
  return 1;
}

CFDataRef sub_19D72FB20()
{
  memset(v1, 0, sizeof(v1));
  if (sub_19D736D94(@"ringer-button-location", 0, v1)) {
    return CFDataCreate(0, (const UInt8 *)v1, 32);
  }
  else {
    return 0;
  }
}

uint64_t sub_19D72FB74()
{
  return 0;
}

BOOL sub_19D72FB7C()
{
  return sub_19D7145C8("IODeviceTree:/product", @"hRBbURJnULvXsPGk42A8Ng", 115);
}

BOOL sub_19D72FB94()
{
  return sub_19D7145C8("IODeviceTree:/product/camera", @"9RreaA6rTvewPbqQy5ldRg", 102);
}

BOOL sub_19D72FBAC()
{
  return sub_19D714D40() != 4;
}

CFDataRef sub_19D72FBCC()
{
  if (MGGetBoolAnswer((const char **)@"8DHlxr5ECKhTSL3HmlZQGQ")
    || (CFDataRef result = (CFDataRef)sub_19D71A230("IODeviceTree:/chosen", @"mac-address-wifi0", 0)) == 0
    && (CFDataRef result = (CFDataRef)sub_19D73A888("sdio")) == 0
    && (CFDataRef result = (CFDataRef)sub_19D73A888("wlan")) == 0
    && (CFDataRef result = (CFDataRef)sub_19D73A888("marconi-wifi")) == 0
    && ((sub_19D7174E8() & 1) != 0 || (CFDataRef result = (CFDataRef)sub_19D73A89C()) == 0))
  {
    return sub_19D73E598(0x574D6163u);
  }
  return result;
}

BOOL sub_19D72FC70(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"eZS2J+wspyGxqNYZeZ/sbA", a2);
}

BOOL sub_19D72FC98(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"eZS2J+wspyGxqNYZeZ/sbA", 87, a2);
}

BOOL sub_19D72FCAC()
{
  return sub_19D712390("IODeviceTree:/backlight", @"ZcPQWuQwUJtMR5Oj99uc8w", 115);
}

__CFArray *sub_19D72FCC4()
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableStringRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (!Mutable) {
    return Mutable;
  }
  CFDataRef v2 = (const __CFData *)sub_19D71A230("IODeviceTree:/product", @"strict-wake-vendor-id", 0);
  CFDataRef v3 = v2;
  if (!v2)
  {
    LODWORD(v5) = 0;
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_10;
    }
    WORD2(valuePtr) = 0;
    uint64_t v6 = MEMORY[0x1E4F14500];
    uint64_t v7 = "kIODeviceTreePlane :/product strict-wake-vendor-id not found";
    goto LABEL_9;
  }
  CFTypeID v4 = CFGetTypeID(v2);
  if (v4 == CFDataGetTypeID())
  {
    unint64_t v5 = (unint64_t)(int)CFDataGetLength(v3) >> 2;
    goto LABEL_10;
  }
  LODWORD(v5) = 0;
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    WORD2(valuePtr) = 0;
    uint64_t v6 = MEMORY[0x1E4F14500];
    uint64_t v7 = "Unexpected type at kIODeviceTreePlane :/product strict-wake-vendor-id";
LABEL_9:
    _os_log_impl(&dword_19D70E000, v6, OS_LOG_TYPE_DEFAULT, v7, (uint8_t *)&valuePtr + 4, 2u);
    LODWORD(v5) = 0;
  }
LABEL_10:
  CFDataRef v8 = (const __CFData *)sub_19D71A230("IODeviceTree:/product", @"strict-wake-product-id", 0);
  CFDataRef v9 = v8;
  if (!v8)
  {
    LODWORD(v11) = 0;
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_18;
    }
    WORD2(valuePtr) = 0;
    CFDictionaryRef v12 = MEMORY[0x1E4F14500];
    long long v13 = "kIODeviceTreePlane :/product strict-wake-product-id not found";
LABEL_17:
    _os_log_impl(&dword_19D70E000, v12, OS_LOG_TYPE_DEFAULT, v13, (uint8_t *)&valuePtr + 4, 2u);
    LODWORD(v11) = 0;
    goto LABEL_18;
  }
  CFTypeID v10 = CFGetTypeID(v8);
  if (v10 != CFDataGetTypeID())
  {
    LODWORD(v11) = 0;
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_18;
    }
    WORD2(valuePtr) = 0;
    CFDictionaryRef v12 = MEMORY[0x1E4F14500];
    long long v13 = "Unexpected type at kIODeviceTreePlane :/product strict-wake-product-id";
    goto LABEL_17;
  }
  unint64_t v11 = (unint64_t)(int)CFDataGetLength(v9) >> 2;
LABEL_18:
  if (v5 == v11)
  {
    if ((int)v5 >= 1)
    {
      CFIndex v14 = 0;
      uint64_t v15 = 4 * v5;
      uint64_t v16 = MEMORY[0x1E4F14500];
      do
      {
        *(void *)buffer = 0;
        v29.CFIndex location = v14;
        v29.length = 4;
        CFDataGetBytes(v9, v29, &buffer[4]);
        v30.CFIndex location = v14;
        v30.length = 4;
        CFDataGetBytes(v3, v30, buffer);
        uint64_t valuePtr = *(void *)buffer;
        CFMutableDictionaryRef v17 = CFDictionaryCreateMutable(v0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (v17)
        {
          uint64_t v18 = v17;
          CFNumberRef v19 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)&valuePtr + 4);
          if (v19)
          {
            CFDictionaryAddValue(v18, @"productID", v19);
          }
          else if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uint64_t v23 = 0;
            _os_log_impl(&dword_19D70E000, v16, OS_LOG_TYPE_DEFAULT, "Failed to create product CF Number", v23, 2u);
          }
          CFNumberRef v20 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
          if (v20)
          {
            CFDictionaryAddValue(v18, @"vendorID", v20);
          }
          else if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uint64_t v23 = 0;
            _os_log_impl(&dword_19D70E000, v16, OS_LOG_TYPE_DEFAULT, "Failed to create vendor CF Number", v23, 2u);
          }
          CFArrayAppendValue(Mutable, v18);
          CFRelease(v18);
          if (v20) {
            CFRelease(v20);
          }
          if (v19) {
            CFRelease(v19);
          }
        }
        else
        {
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uint64_t v23 = 0;
            _os_log_impl(&dword_19D70E000, v16, OS_LOG_TYPE_DEFAULT, "Failed to create the pair dictionary", v23, 2u);
          }
          CFArrayAppendValue(Mutable, 0);
        }
        v14 += 4;
      }
      while (v15 != v14);
    }
  }
  else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    HIDWORD(valuePtr) = 67109376;
    int v25 = v5;
    __int16 v26 = 1024;
    int v27 = v11;
    _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Array length mismatch! Vendor length %d vs Product length %d", (uint8_t *)&valuePtr + 4, 0xEu);
  }
  if (v3) {
    CFRelease(v3);
  }
  if (v9) {
    CFRelease(v9);
  }
  return Mutable;
}

uint64_t sub_19D730134()
{
  return sub_19D71AA14((uint64_t)"IODeviceTree:/product", @"6S9CvPHPtzHQqKudHSfsag", 104);
}

uint64_t sub_19D73014C()
{
  return 1;
}

BOOL sub_19D730154()
{
  return sub_19D7145C8("IODeviceTree:/product", @"QY61T8CLLwG/yu92ScTYtw", 115);
}

CFStringRef sub_19D73016C()
{
  CFStringRef result = sub_19D712710(0, "AppleHapticsSupportArcEEPROM", @"ArcSerialNumber");
  if (!result)
  {
    CFStringRef result = sub_19D712710(0, "AppleAD5860", @"arc-sn");
    if (!result)
    {
      return sub_19D717CB4("IODeviceTree:/product", @"arc-module-serial-num", 0);
    }
  }
  return result;
}

BOOL sub_19D7301E0(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"KzUQgIyBRinkweVMNUCOWA", a2);
}

BOOL sub_19D730208(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"KzUQgIyBRinkweVMNUCOWA", 65, a2);
}

BOOL sub_19D73021C()
{
  return sub_19D712390("IODeviceTree:/product/audio", @"2v9hQi8xVAKZZVCMd/YhjQ", 115);
}

CFNumberRef sub_19D730234()
{
  return sub_19D717F48("IODeviceTree:/product/camera", @"86GizkmSK+IxgCtUMOp2NA", 102);
}

CFTypeRef sub_19D73024C()
{
  uint64_t v0 = *((void *)off_1E9449170 + 5);
  if (!v0) {
    uint64_t v0 = sub_19D71A930(5, 2);
  }
  CFTypeID TypeID = CFArrayGetTypeID();

  return sub_19D739338((uint64_t)"_CTServerConnectionCopyCarrierBundleInfoArray", v0, TypeID);
}

BOOL sub_19D7302AC(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"475wW3fne+tyzGr4wleUSQ", a2);
}

BOOL sub_19D7302D4(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"475wW3fne+tyzGr4wleUSQ", 67, a2);
}

uint64_t sub_19D7302E8()
{
  uint64_t result = sub_19D714D40();
  if (result != 1) {
    return sub_19D714D40() == 2;
  }
  return result;
}

CFStringRef sub_19D730314()
{
  return sub_19D717CB4("IODeviceTree:/", @"FQHZ8VqG8mVzDQ+g085l8w", 116);
}

CFTypeRef sub_19D73032C()
{
  return sub_19D7357B0(@"FrontIRStructuredLightProjectorSerialNumString");
}

BOOL sub_19D730338(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"wH7fRq4TDdYG2pN1KDQW/A", a2);
}

BOOL sub_19D730360(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"wH7fRq4TDdYG2pN1KDQW/A", 70, a2);
}

uint64_t sub_19D730374()
{
  return sub_19D73E2D0(0x456E4D74u);
}

CFStringRef sub_19D730380()
{
  CFDataRef v0 = (const __CFData *)sub_19D710BBC((const char **)@"5Y72WwdS5NYHdc00gEZ/DQ", 0);
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  CFTypeID v2 = CFGetTypeID(v0);
  if (v2 != CFDataGetTypeID() || CFDataGetLength(v1) < 6) {
    goto LABEL_9;
  }
  CFIndex Length = CFDataGetLength(v1);
  BytePtr = CFDataGetBytePtr(v1);
  CFMutableStringRef Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, @"%02x", *BytePtr);
  if (Length >= 2)
  {
    CFIndex v6 = Length - 1;
    uint64_t v7 = (unsigned __int8 *)(BytePtr + 1);
    do
    {
      unsigned int v8 = *v7++;
      CFStringAppendFormat(Mutable, 0, @":%02x", v8);
      --v6;
    }
    while (v6);
  }
  if (Mutable)
  {
    CFStringRef Copy = CFStringCreateCopy(0, Mutable);
    CFRelease(Mutable);
  }
  else
  {
LABEL_9:
    CFStringRef Copy = 0;
  }
  CFRelease(v1);
  return Copy;
}

BOOL sub_19D7304A0(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"WAfNjeiwOd/k6+VU6D6SIQ", a2);
}

BOOL sub_19D7304C8(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"WAfNjeiwOd/k6+VU6D6SIQ", 69, a2);
}

CFStringRef sub_19D7304DC()
{
  return sub_19D717CB4("IODeviceTree:/chosen", @"0jjK6IVSQzA8doQeSwmujA", 115);
}

CFTypeRef sub_19D7304F4()
{
  return sub_19D7357B0(@"BackSuperWideCameraModuleSerialNumString");
}

BOOL sub_19D730500(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"UZfUiD1Aqy3GOwg72SQcLQ", a2);
}

BOOL sub_19D730528(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"UZfUiD1Aqy3GOwg72SQcLQ", 82, a2);
}

BOOL sub_19D73053C()
{
  return sub_19D7145C8("IODeviceTree:/product", @"CzGP5+8jQECJMH4h+z4TYA", 111);
}

CFNumberRef sub_19D730554()
{
  return sub_19D737130(0);
}

BOOL sub_19D73055C()
{
  return sub_19D712390("IODeviceTree:/product", @"Lrs7l5cKWJ1Gk5ZzgMAKyQ", 115);
}

uint64_t sub_19D730574()
{
  return 0;
}

BOOL sub_19D73057C()
{
  return sub_19D7145C8("IODeviceTree:/arm-io/i2c0/audio0", @"KWr9OM2iqeLQEhaHS0UshQ", 97);
}

uint64_t sub_19D730594()
{
  return sub_19D736824("DisplayPort");
}

BOOL sub_19D7305A0()
{
  return sub_19D7145C8("IODeviceTree:/product", @"fb+1apeTeouqt+fo3nZ6sg", 117);
}

uint64_t sub_19D7305B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  int v12 = -1157300313;
  long long v11 = xmmword_19D778E24;
  int v10 = -2132668294;
  long long v9 = xmmword_19D778E38;
  return MGIsDeviceOneOfType((const UInt8 *)&v11, a2, a3, a4, a5, a6, a7, a8, (uint64_t)&v9);
}

BOOL sub_19D7306D8()
{
  return sub_19D712390("IODeviceTree:/backlight", @"/wG6EG34fRtAsZoLk/8YIw", 115);
}

BOOL sub_19D7306F0()
{
  return sub_19D7145C8("IODeviceTree:/product/camera", @"dbYxhQWXkJhjp8uPhoMDvw", 112);
}

CFNumberRef sub_19D730708()
{
  return sub_19D717F48("IODeviceTree:/product/camera", @"Lu6Mgo1O0+EoGMk1OtnMRg", 114);
}

uint64_t sub_19D730720()
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (sub_19D714D40() == 6)
  {
    int v13 = 368885834;
    long long v12 = xmmword_19D779054;
    int v11 = -526227167;
    long long v10 = xmmword_19D77907C;
    int v7 = MGIsDeviceOneOfType((const UInt8 *)&v12, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v10);
    uint64_t v8 = MEMORY[0x1E4F1CFD0];
    if (!v7) {
      uint64_t v8 = MEMORY[0x1E4F1CFC8];
    }
  }
  else
  {
    uint64_t v8 = MEMORY[0x1E4F1CFC8];
  }
  return *(void *)v8;
}

CFNumberRef sub_19D7307E4()
{
  if (!sub_19D7175F4((BOOL)@"H6")
    && !sub_19D7175F4((BOOL)@"H8")
    && !sub_19D7175F4((BOOL)@"H5")
    && !sub_19D7175F4((BOOL)@"H7")
    && !sub_19D7175F4((BOOL)@"H9")
    && sub_19D714D40() != 4
    && sub_19D714D40() != 6)
  {
    sub_19D7175F4((BOOL)@"H4");
  }
  int valuePtr = 1065353216;
  return CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
}

BOOL sub_19D73088C()
{
  return sub_19D712390("IODeviceTree:/backlight", @"ldJQht23DQY8SUXKJhUvPw", 117);
}

CFDataRef sub_19D7308A4()
{
  CFDataRef result = (CFDataRef)sub_19D71A230("IODeviceTree:/chosen", @"mac-address-ethernet0", 0);
  if (!result)
  {
    CFDataRef result = (CFDataRef)sub_19D73A888("ethernet");
    if (!result)
    {
      return sub_19D73E598(0x454D6163u);
    }
  }
  return result;
}

BOOL sub_19D730904(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"aOq/O8u9f/bpWUnKco+xgA", a2);
}

BOOL sub_19D73092C(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"aOq/O8u9f/bpWUnKco+xgA", 69, a2);
}

CFTypeRef sub_19D730940()
{
  return sub_19D739990(4, 1, 0);
}

BOOL sub_19D730950(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"inECTnNyR97XWxm7jU8uqA", a2);
}

BOOL sub_19D730978(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"inECTnNyR97XWxm7jU8uqA", 77, a2);
}

CFTypeRef sub_19D73098C()
{
  return sub_19D735FA8(@"YonkersUID");
}

BOOL sub_19D730998(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"bwLsbkp4shhHuNB5VpRa8w", a2);
}

BOOL sub_19D7309C0(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"bwLsbkp4shhHuNB5VpRa8w", 89, a2);
}

BOOL sub_19D7309D8()
{
  return sub_19D712390("IODeviceTree:/product/audio", @"HdWhWK8BN8j/O9k8/OHblQ", 115);
}

uint64_t sub_19D7309F0()
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (sub_19D714D40() == 7
    || sub_19D714D40() == 4
    || sub_19D714D40() == 3
    || sub_19D714D40() == 2
    || sub_19D714D40() == 1
    || sub_19D714D40() == 11
    || sub_19D714D40() == 8)
  {
    uint64_t v7 = MEMORY[0x1E4F1CFC8];
  }
  else
  {
    int v13 = 368885834;
    long long v12 = xmmword_19D779054;
    int v11 = -526227167;
    long long v10 = xmmword_19D77907C;
    int v9 = MGIsDeviceOneOfType((const UInt8 *)&v12, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v10);
    uint64_t v7 = MEMORY[0x1E4F1CFC8];
    if (!v9) {
      uint64_t v7 = MEMORY[0x1E4F1CFD0];
    }
  }
  return *(void *)v7;
}

const void *sub_19D730AFC()
{
  return sub_19D71A230("IODeviceTree:/", @"b/k0ZT2f/WGV2qJSyPJHoQ", 99);
}

BOOL sub_19D730B14(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"SmUPjD77AHIMCLny9nawdw", a2);
}

BOOL sub_19D730B3C(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"SmUPjD77AHIMCLny9nawdw", 67, a2);
}

BOOL sub_19D730B50()
{
  return sub_19D73A850(1, "sgx", @"procedural-antialiasing");
}

__CFString *sub_19D730B68()
{
  return @"Non-Mac";
}

BOOL sub_19D730B74()
{
  return sub_19D7145C8("IODeviceTree:/product", @"bxQyyA/qJ3QQXTiHBsW2eg", 111);
}

BOOL sub_19D730B8C()
{
  return sub_19D7145C8("IODeviceTree:/product", @"xgs6iXf0KFHUJ9d4FKaRYg", 115);
}

uint64_t sub_19D730BA4()
{
  return sub_19D742EA0((uint64_t)"IODeviceTree:", @"RaX3KBmG7H9fUOEtLK/I6w", 115, @"XyppJjhSQE2982ZYgXlh2g", 115);
}

CFNumberRef sub_19D730BC8()
{
  int v9 = 0;
  int valuePtr = -1;
  CFDataRef v0 = (const __CFData *)sub_19D71A230("IODeviceTree:/chosen", @"marketing-software-behavior", 0);
  if (!v0) {
    return CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &v9);
  }
  CFDataRef v1 = v0;
  BytePtr = CFDataGetBytePtr(v0);
  if (BytePtr && (uint64_t v3 = BytePtr, v4 = CFGetTypeID(v1), v4 == CFDataGetTypeID()) && CFDataGetLength(v1) >= 4)
  {
    int v5 = v3[3];
    if ((v5 - 1) >= 2) {
      int v5 = 0;
    }
    int valuePtr = v5;
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFNumberRef v7 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
    if (v7) {
      goto LABEL_11;
    }
  }
  else
  {
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  }
  CFNumberRef v7 = CFNumberCreate(v6, kCFNumberSInt32Type, &v9);
LABEL_11:
  CFRelease(v1);
  return v7;
}

BOOL sub_19D730CD8()
{
  return sub_19D712390("IODeviceTree:/product/audio", @"0gkWjKWKuS2gqzTaFHKxqw", 115);
}

uint64_t sub_19D730CF0()
{
  if (sub_19D714D40() == 3) {
    return 10;
  }
  else {
    return 20;
  }
}

CFDictionaryRef sub_19D730D18()
{
  return sub_19D73B3CC(@"pref-decoding");
}

uint64_t sub_19D730D24()
{
  BOOL v0 = sub_19D7145C8("IODeviceTree:/product/camera", @"auto-focus", 0);
  uint64_t v1 = MEMORY[0x1E4F1CFD0];
  if (!v0) {
    uint64_t v1 = MEMORY[0x1E4F1CFC8];
  }
  return *(void *)v1;
}

CFTypeRef sub_19D730D6C()
{
  return sub_19D7128AC(0, "IOPMPowerSource", @"Serial");
}

BOOL sub_19D730D84(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"DcQNvnO5Uhpc1jjGIrzyng", a2);
}

BOOL sub_19D730DAC(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"DcQNvnO5Uhpc1jjGIrzyng", 66, a2);
}

uint64_t sub_19D730DC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  int v58 = 1602014129;
  long long v57 = xmmword_19D778BCC;
  int v56 = -810116762;
  long long v55 = xmmword_19D778BE0;
  int v54 = -1195351767;
  long long v53 = xmmword_19D778BF4;
  int v52 = 1789837692;
  long long v51 = xmmword_19D778B18;
  int v50 = -1239654590;
  long long v49 = xmmword_19D778B40;
  int v48 = -1579092758;
  long long v47 = xmmword_19D778B68;
  int v46 = 48355600;
  long long v45 = xmmword_19D778B2C;
  int v44 = -679691073;
  long long v43 = xmmword_19D778B54;
  int v42 = 1430379884;
  long long v41 = xmmword_19D778B7C;
  if (MGIsDeviceOneOfType((const UInt8 *)&v57, a2, a3, a4, a5, a6, a7, a8, (uint64_t)&v55)) {
    goto LABEL_7;
  }
  if (sub_19D714D40() == 6) {
    goto LABEL_7;
  }
  if (sub_19D714D40() == 4) {
    goto LABEL_7;
  }
  if (sub_19D714D40() == 7) {
    goto LABEL_7;
  }
  if (sub_19D714D40() == 8) {
    goto LABEL_7;
  }
  int v40 = -38605833;
  long long v39 = xmmword_19D778C08;
  int v38 = -894965712;
  long long v37 = xmmword_19D778C1C;
  int v36 = -2101636455;
  long long v35 = xmmword_19D778C30;
  int v34 = -1955568593;
  long long v33 = xmmword_19D778C44;
  int v32 = 28030256;
  long long v31 = xmmword_19D778C58;
  int v30 = 1214363620;
  long long v29 = xmmword_19D778C6C;
  if (MGIsDeviceOneOfType((const UInt8 *)&v39, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v37))
  {
LABEL_7:
    uint64_t v22 = MEMORY[0x1E4F1CFC8];
  }
  else
  {
    int v28 = -926344036;
    long long v27 = xmmword_19D778B90;
    int v26 = -954998212;
    long long v25 = xmmword_19D778BA4;
    int v24 = MGIsDeviceOneOfType((const UInt8 *)&v27, v15, v16, v17, v18, v19, v20, v21, (uint64_t)&v25);
    uint64_t v22 = MEMORY[0x1E4F1CFC8];
    if (!v24) {
      uint64_t v22 = MEMORY[0x1E4F1CFD0];
    }
  }
  return *(void *)v22;
}

BOOL sub_19D7310E4()
{
  return sub_19D7145C8("IODeviceTree:/arm-io/aop2", @"hh/NoWpEoq1VF4lGDdPUpw", 114);
}

CFStringRef sub_19D7310FC()
{
  CFDataRef v0 = (const __CFData *)sub_19D710BBC((const char **)@"HzddeW2/HtdBNAc5tsFtDg", 0);
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  CFTypeID v2 = CFGetTypeID(v0);
  if (v2 != CFDataGetTypeID() || CFDataGetLength(v1) < 6) {
    goto LABEL_9;
  }
  CFIndex Length = CFDataGetLength(v1);
  BytePtr = CFDataGetBytePtr(v1);
  CFMutableStringRef Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, @"%02x", *BytePtr);
  if (Length >= 2)
  {
    CFIndex v6 = Length - 1;
    CFNumberRef v7 = (unsigned __int8 *)(BytePtr + 1);
    do
    {
      unsigned int v8 = *v7++;
      CFStringAppendFormat(Mutable, 0, @":%02x", v8);
      --v6;
    }
    while (v6);
  }
  if (Mutable)
  {
    CFStringRef Copy = CFStringCreateCopy(0, Mutable);
    CFRelease(Mutable);
  }
  else
  {
LABEL_9:
    CFStringRef Copy = 0;
  }
  CFRelease(v1);
  return Copy;
}

BOOL sub_19D73121C(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"8bOgXKgqoLvqV/XeSomAfA", a2);
}

BOOL sub_19D731244(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"8bOgXKgqoLvqV/XeSomAfA", 83, a2);
}

const void *sub_19D731258()
{
  return sub_19D710BBC((const char **)@"H97G3GzDYb4wY5kwJ0AKfQ", 0);
}

BOOL sub_19D731268()
{
  memset(&v1, 0, sizeof(v1));
  return stat("/System/Library/PrivateFrameworks/Sharing.framework", &v1) == 0;
}

CFStringRef sub_19D7312B4()
{
  if (sub_19D71752C())
  {
    return (CFStringRef)sub_19D739990(2, 0, 0);
  }
  else
  {
    return sub_19D712710(1, "baseband", @"device-imei");
  }
}

BOOL sub_19D731318(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"QZgogo2DypSAZfkRW4dP/A", a2);
}

BOOL sub_19D731340(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"QZgogo2DypSAZfkRW4dP/A", 73, a2);
}

BOOL sub_19D731354()
{
  if (MGGetBoolAnswer((const char **)@"cBy4BcYs5YWtFHbBpt4C6A")) {
    return 1;
  }
  if (sub_19D73A850(1, "vibrator", @"name")) {
    return 1;
  }
  if (sub_19D73A850(1, "audio-actuator*", @"name")) {
    return 1;
  }
  BOOL result = sub_19D73A850(1, "maggie-arc", @"name");
  if (result) {
    return 1;
  }
  return result;
}

CFDataRef sub_19D7313D0()
{
  memset(v1, 0, sizeof(v1));
  if (sub_19D73645C(@"volume-down-button-location", 0, (uint64_t *)v1)) {
    return CFDataCreate(0, (const UInt8 *)v1, 32);
  }
  else {
    return 0;
  }
}

const void *sub_19D731424()
{
  return sub_19D71A230("IODeviceTree:/chosen", @"/2V8H9h/+z0UxNUr9aRLeQ", 98);
}

BOOL sub_19D73143C()
{
  return sub_19D714D40() == 1;
}

BOOL sub_19D73145C()
{
  BOOL result = MGGetBoolAnswer((const char **)@"BWoQXWXYITrPRpFyc9xTLw");
  if (result) {
    return sub_19D714D40() == 3
  }
        || sub_19D714D40() == 4
        || sub_19D714D40() == 1;
  return result;
}

const char *sub_19D7314AC()
{
  BOOL result = (const char *)sub_19D717CB4("IODeviceTree:/product", @"thinning-product-type", 0);
  if (!result)
  {
    return sub_19D71970C();
  }
  return result;
}

BOOL sub_19D7314F4()
{
  return sub_19D7145C8("IODeviceTree:/product", @"W5kTfIuxkKpHVdWTk42C9A", 110);
}

uint64_t sub_19D73150C()
{
  return sub_19D71AA14((uint64_t)"IODeviceTree:/", @"JOlwW/P8Cw3CDCoFunq8og", 112);
}

CFStringRef sub_19D731524()
{
  return sub_19D717CB4("IODeviceTree:/product", @"mobiledevice-min-ver", 0);
}

CFNumberRef sub_19D73153C()
{
  return sub_19D717F48("IODeviceTree:/product/facetime", @"RrhB72r1de9N65EG4pgqJw", 116);
}

BOOL sub_19D731554()
{
  return sub_19D712390("IODeviceTree:/product", @"+q5wYk81dLM2qjufnC0phw", 115);
}

uint64_t sub_19D73156C()
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (sub_19D714D40() != 6) {
    return 0;
  }
  uint64_t result = MGGetBoolAnswer((const char **)@"magnetometer");
  if (result)
  {
    int v11 = -1742178852;
    long long v10 = xmmword_19D778A78;
    int v9 = 2146530832;
    long long v8 = xmmword_19D778A8C;
    return MGIsDeviceOneOfType((const UInt8 *)&v10, v1, v2, v3, v4, v5, v6, v7, (uint64_t)&v8) ^ 1;
  }
  return result;
}

CFArrayRef sub_19D731668()
{
  v7[0] = 0;
  v7[1] = 0;
  int v8 = 0;
  sub_19D736A80(v7, @"front-cam-offset-from-center");
  return sub_19D737BE4((unsigned int *)v7, 1, v0, v1, v2, v3, v4, v5);
}

BOOL sub_19D7316A8()
{
  return sub_19D712390("IODeviceTree:/chosen", @"GO5/TJivIXtQkTkFWkRc9A", 99);
}

BOOL sub_19D7316C0()
{
  return sub_19D7145C8("IODeviceTree:/", @"P1djMN/L3B6otgGpO9WYkw", 115);
}

CFStringRef sub_19D7316D8()
{
  uint64_t v0 = NXGetLocalArchInfo();
  if (v0 && (name = v0->name) != 0)
  {
    return CFStringCreateWithCString(0, name, 0x8000100u);
  }
  else
  {
    unint64_t v3 = sub_19D71DAD4();
    return CFStringCreateWithFormat(0, 0, @"%d-%d", v3, HIDWORD(v3));
  }
}

CFStringRef sub_19D73174C()
{
  return sub_19D717CB4("IODeviceTree:/product", @"e+pTfaabi1k1kfdk2vl1Kw", 108);
}

BOOL sub_19D731764(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"2xSqkUxsVWmOBWk6StVOfQ", a2);
}

BOOL sub_19D73178C(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"2xSqkUxsVWmOBWk6StVOfQ", 76, a2);
}

CFStringRef sub_19D7317A0()
{
  CFDataRef v0 = (const __CFData *)sub_19D710BBC((const char **)@"yF2IQrYS4yyREV4ZkbLysw", 0);
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  CFTypeID v2 = CFGetTypeID(v0);
  if (v2 != CFDataGetTypeID() || CFDataGetLength(v1) < 6) {
    goto LABEL_9;
  }
  CFIndex Length = CFDataGetLength(v1);
  BytePtr = CFDataGetBytePtr(v1);
  CFMutableStringRef Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, @"%02x", *BytePtr);
  if (Length >= 2)
  {
    CFIndex v6 = Length - 1;
    uint64_t v7 = (unsigned __int8 *)(BytePtr + 1);
    do
    {
      unsigned int v8 = *v7++;
      CFStringAppendFormat(Mutable, 0, @":%02x", v8);
      --v6;
    }
    while (v6);
  }
  if (Mutable)
  {
    CFStringRef Copy = CFStringCreateCopy(0, Mutable);
    CFRelease(Mutable);
  }
  else
  {
LABEL_9:
    CFStringRef Copy = 0;
  }
  CFRelease(v1);
  return Copy;
}

BOOL sub_19D7318C0(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"W/xqvBX9L07XHb0BOtYycQ", a2);
}

BOOL sub_19D7318E8(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"W/xqvBX9L07XHb0BOtYycQ", 84, a2);
}

uint64_t sub_19D7318FC()
{
  if (MGGetBoolAnswer((const char **)@"XFtUsQP3AyqT4CazSb5VCw")) {
    return 1;
  }

  return sub_19D71D8BC("/var/mobile/Library/Preferences/com.apple.MobileGestalt.plist", @"EnableStark", 0);
}

uint64_t sub_19D731950()
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (sub_19D714D40() == 4
    || sub_19D714D40() == 1
    || sub_19D714D40() == 3
    || sub_19D714D40() == 2
    || sub_19D714D40() == 7
    || sub_19D714D40() == 11)
  {
    uint64_t v7 = MEMORY[0x1E4F1CFC8];
  }
  else
  {
    int v13 = 368885834;
    long long v12 = xmmword_19D779054;
    int v11 = -526227167;
    long long v10 = xmmword_19D77907C;
    int v9 = MGIsDeviceOneOfType((const UInt8 *)&v12, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v10);
    uint64_t v7 = MEMORY[0x1E4F1CFC8];
    if (!v9) {
      uint64_t v7 = MEMORY[0x1E4F1CFD0];
    }
  }
  return *(void *)v7;
}

CFDataRef sub_19D731AE0()
{
  return sub_19D73E074(0x53414745u);
}

uint64_t sub_19D731AEC()
{
  return sub_19D71AA14((uint64_t)"IODeviceTree:/", @"N6PmkZnK1VRMvFokb0jS/Q", 102);
}

BOOL sub_19D731B04()
{
  return sub_19D7145C8("IODeviceTree:/product/camera", @"rt/G6Vk3NTGWs5N9WEjztQ", 102);
}

CFStringRef sub_19D731B1C()
{
  return sub_19D717CB4("IODeviceTree:/", @"model-number", 0);
}

uint64_t sub_19D731B34()
{
  return 1;
}

CFTypeRef sub_19D731B40()
{
  return sub_19D7128AC(1, "compass", @"compass-calibration");
}

BOOL sub_19D731B58(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"qb//mYg6KeTmjv8w4ZAMIg", a2);
}

BOOL sub_19D731B80(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"qb//mYg6KeTmjv8w4ZAMIg", 67, a2);
}

CFTypeRef sub_19D731B94()
{
  CFTypeID TypeID = CFBooleanGetTypeID();

  return sub_19D738F78((uint64_t)"copyWiFiCallingCapability", (uint64_t)&unk_1EEF8FD00, TypeID);
}

CFTypeRef sub_19D731BD0()
{
  return sub_19D7128AC(1, "baseband", @"region-sku");
}

uint64_t sub_19D731BE8()
{
  int v1 = 0;
  LODWORD(result) = sub_19D712B14((const char **)@"ErupMbaQrM6KypD4K0kTDQ", 5, 5, kCFNumberSInt32Type, &v1);
  if (v1 >= 196608) {
    return result;
  }
  else {
    return 0;
  }
}

uint64_t sub_19D731C30()
{
  return 1;
}

CFTypeRef sub_19D731C38()
{
  return sub_19D739C38(2, 0, 0);
}

CFNumberRef sub_19D731C48()
{
  return sub_19D717F48("IODeviceTree:/product/camera", @"LMvmpCFM38ZaFeEy4r7nNQ", 99);
}

CFDataRef sub_19D731C60()
{
  memset(v1, 0, sizeof(v1));
  if (sub_19D73645C(@"volume-up-button-location", 0, (uint64_t *)v1)) {
    return CFDataCreate(0, (const UInt8 *)v1, 32);
  }
  else {
    return 0;
  }
}

uint64_t sub_19D731CB4()
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  int v0 = IOPSGetPercentRemaining();
  if (v0)
  {
    int v1 = v0;
    uint64_t v2 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v2) {
      unsigned int v8 = v2 + 1;
    }
    else {
      unsigned int v8 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog((uint64_t)v8, 4193, @"Failed to get battery level with error %03X", v3, v4, v5, v6, v7, v1);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      int v11 = v1;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Failed to get battery level with error %03X", buf, 8u);
    }
  }
  return 101;
}

uint64_t sub_19D731DA4()
{
  return sub_19D73E2D0(0x436C4247u);
}

CFNumberRef sub_19D731DB0()
{
  uint64_t valuePtr = 0;
  CFDictionaryRef v0 = (const __CFDictionary *)sub_19D742BEC(@"avd", @"AppleARMIODevice");
  if (v0)
  {
    CFDictionaryRef v1 = v0;
    CFTypeRef cf = 0;
    if (CFDictionaryGetValueIfPresent(v0, @"decode-samples-per-second", &cf))
    {
      CFTypeID v2 = CFGetTypeID(cf);
      if (v2 == CFDataGetTypeID())
      {
        uint64_t v3 = *(int *)CFDataGetBytePtr((CFDataRef)cf);
        if (v3) {
          uint64_t valuePtr = v3 << 16;
        }
      }
    }
    CFRelease(v1);
  }
  return CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
}

BOOL sub_19D731E54()
{
  return sub_19D712390("IODeviceTree:/product/camera", @"g7yZjVHqRxbfXOqns+Sm9w", 102);
}

uint64_t sub_19D731E6C()
{
  return *MEMORY[0x1E4F1CFD0];
}

uint64_t sub_19D731E7C()
{
  return sub_19D71DAD4();
}

uint64_t sub_19D731E94()
{
  return *MEMORY[0x1E4F1CFD0];
}

uint64_t sub_19D731EA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  int v101 = -798153473;
  long long v100 = xmmword_19D778AC8;
  int v99 = -776721724;
  long long v98 = xmmword_19D778ADC;
  int v97 = -1639077591;
  long long v96 = xmmword_19D778AF0;
  int v95 = 338555555;
  long long v94 = xmmword_19D778B04;
  if (MGIsDeviceOneOfType((const UInt8 *)&v100, a2, a3, a4, a5, a6, a7, a8, (uint64_t)&v98)) {
    goto LABEL_9;
  }
  if (sub_19D714D40() == 4) {
    goto LABEL_9;
  }
  if (sub_19D714D40() == 6) {
    goto LABEL_9;
  }
  if (sub_19D714D40() == 2) {
    goto LABEL_9;
  }
  int v93 = 1789837692;
  long long v92 = xmmword_19D778B18;
  int v91 = 48355600;
  long long v90 = xmmword_19D778B2C;
  int v89 = -1239654590;
  long long v88 = xmmword_19D778B40;
  int v87 = -679691073;
  long long v86 = xmmword_19D778B54;
  int v85 = -1579092758;
  long long v84 = xmmword_19D778B68;
  int v83 = 1430379884;
  long long v82 = xmmword_19D778B7C;
  if (MGIsDeviceOneOfType((const UInt8 *)&v92, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v90)) {
    goto LABEL_9;
  }
  int v81 = -926344036;
  long long v80 = xmmword_19D778B90;
  int v79 = -954998212;
  long long v78 = xmmword_19D778BA4;
  int v77 = 436612651;
  long long v76 = xmmword_19D778BB8;
  if (MGIsDeviceOneOfType((const UInt8 *)&v80, v15, v16, v17, v18, v19, v20, v21, (uint64_t)&v78)) {
    goto LABEL_9;
  }
  int v75 = 1602014129;
  long long v74 = xmmword_19D778BCC;
  int v73 = -810116762;
  long long v72 = xmmword_19D778BE0;
  int v71 = -1195351767;
  long long v70 = xmmword_19D778BF4;
  int v69 = -199226823;
  long long v68 = xmmword_19D7792AC;
  int v67 = 1412427398;
  long long v66 = xmmword_19D7792C0;
  int v65 = -1283070668;
  long long v64 = xmmword_19D779298;
  int v63 = 160260070;
  long long v62 = xmmword_19D7792D4;
  if (MGIsDeviceOneOfType((const UInt8 *)&v74, v22, v23, v24, v25, v26, v27, v28, (uint64_t)&v72)) {
    goto LABEL_9;
  }
  int v61 = -38605833;
  long long v60 = xmmword_19D778C08;
  int v59 = -894965712;
  long long v58 = xmmword_19D778C1C;
  int v57 = -2101636455;
  long long v56 = xmmword_19D778C30;
  int v55 = -1955568593;
  long long v54 = xmmword_19D778C44;
  int v53 = 28030256;
  long long v52 = xmmword_19D778C58;
  int v51 = 1214363620;
  long long v50 = xmmword_19D778C6C;
  if (MGIsDeviceOneOfType((const UInt8 *)&v60, v29, v30, v31, v32, v33, v34, v35, (uint64_t)&v58))
  {
LABEL_9:
    uint64_t v43 = MEMORY[0x1E4F1CFC8];
  }
  else
  {
    int v49 = 1032708406;
    long long v48 = xmmword_19D778C80;
    int v47 = 729903963;
    long long v46 = xmmword_19D778C94;
    int v45 = MGIsDeviceOneOfType((const UInt8 *)&v48, v36, v37, v38, v39, v40, v41, v42, (uint64_t)&v46);
    uint64_t v43 = MEMORY[0x1E4F1CFC8];
    if (!v45) {
      uint64_t v43 = MEMORY[0x1E4F1CFD0];
    }
  }
  return *(void *)v43;
}

CFNumberRef sub_19D73236C()
{
  return sub_19D717F48("IODeviceTree:/arm-io/aop/iop-aop-nub/als", @"uNNFSosc1xQM/7bwlrqLXA", 109);
}

uint64_t sub_19D732384()
{
  CFDictionaryRef v0 = (uint64_t (*)(__CFString *))*((void *)off_1E9449170 + 90);
  if (!v0) {
    CFDictionaryRef v0 = (uint64_t (*)(__CFString *))sub_19D71A930(90, 2);
  }

  return v0(@"SupportedKeyboards");
}

BOOL sub_19D7323D0()
{
  return sub_19D714D40() != 4;
}

uint64_t sub_19D7323F0()
{
  return sub_19D742EA0((uint64_t)"IODeviceTree:/arm-io", @"4k6Wv56SWfITjzet+hIHMQ", 109, @"3uw7204ET4Vk1Cl4iJiNqQ", 116);
}

BOOL sub_19D732414()
{
  return sub_19D7145C8("IODeviceTree:/product/camera", @"RR4G+l3k5mfFFr6Igw88kQ", 97);
}

uint64_t sub_19D73242C()
{
  int v0 = sub_19D7389CC();
  uint64_t v1 = MEMORY[0x1E4F1CFD0];
  if (!v0) {
    uint64_t v1 = MEMORY[0x1E4F1CFC8];
  }
  return *(void *)v1;
}

CFStringRef sub_19D732460()
{
  return sub_19D717CB4("IODeviceTree:/product", @"dW6ROVcD3o5ACa4jvALJ6A", 100);
}

CFMutableDictionaryRef sub_19D732478()
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionaryRef v1 = IOServiceNameMatching("compass");
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = sub_19D737E58;
  v3[3] = &unk_1E5962FD8;
  v3[4] = Mutable;
  sub_19D73A45C(v1, (uint64_t)v3);
  return Mutable;
}

BOOL sub_19D73251C(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"aoAKcHLuTUp/o3squcJkhA", a2);
}

BOOL sub_19D732544(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"aoAKcHLuTUp/o3squcJkhA", 67, a2);
}

BOOL sub_19D732558()
{
  return !sub_19D7145C8("IODeviceTree:/product/maps", @"pxqIJ789zCoOILWO6cQ52Q", 110);
}

BOOL sub_19D73258C(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"nZUUCFZgomfWUIPGGzNAqg", a2);
}

BOOL sub_19D7325B4(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"nZUUCFZgomfWUIPGGzNAqg", 83, a2);
}

CFNumberRef sub_19D7325C8()
{
  return sub_19D717F48("IODeviceTree:/product/camera", @"D6PT05dEJ0f9Ayk7Yi92RA", 102);
}

BOOL sub_19D7325E0()
{
  return sub_19D712390("IODeviceTree:/product/audio", @"PT6XKHaOkrxhQTpTVI8Rlw", 115);
}

BOOL sub_19D7325F8()
{
  if (sub_19D7145C8("IODeviceTree:/product", @"supports-meteor", 0)) {
    return 1;
  }

  return MGGetBoolAnswer((const char **)@"noqTy5fUbyK03UHxWigBBQ");
}

float sub_19D73264C()
{
  float valuePtr = 0.0;
  CFNumberRef v0 = (const __CFNumber *)CFPreferencesCopyAppValue(@"RequiredBatteryLevelForSoftwareUpdate", (CFStringRef)*MEMORY[0x1E4F1D3D8]);
  if (!v0) {
    return 0.5;
  }
  CFNumberRef v1 = v0;
  CFTypeID v2 = CFGetTypeID(v0);
  if (v2 != CFNumberGetTypeID() || !CFNumberGetValue(v1, kCFNumberFloat32Type, &valuePtr)) {
    float valuePtr = 0.5;
  }
  CFRelease(v1);
  return valuePtr;
}

uint64_t sub_19D7326D8()
{
  return sub_19D71AA14((uint64_t)"IODeviceTree:/", @"aL9+NE29t3Wm2lEAE+atZQ", 118);
}

uint64_t sub_19D7326F0()
{
  CFNumberRef v0 = (uint64_t (*)(void))*((void *)off_1E9449170 + 39);
  if (!v0) {
    CFNumberRef v0 = (uint64_t (*)(void))sub_19D71A930(39, 2);
  }

  return v0();
}

uint64_t sub_19D732730()
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  BOOL v0 = sub_19D7175F4((BOOL)@"H4");
  uint64_t v8 = MEMORY[0x1E4F1CFC8];
  if (!v0)
  {
    int v13 = 368885834;
    long long v12 = xmmword_19D779054;
    int v11 = -526227167;
    long long v10 = xmmword_19D77907C;
    if (!MGIsDeviceOneOfType((const UInt8 *)&v12, v1, v2, v3, v4, v5, v6, v7, (uint64_t)&v10)) {
      uint64_t v8 = MEMORY[0x1E4F1CFD0];
    }
  }
  return *(void *)v8;
}

uint64_t sub_19D732838()
{
  return sub_19D742F30((uint64_t)"IODeviceTree:/arm-io", @"RaX3KBmG7H9fUOEtLK/I6w", 115, @"aNFMPe3XMOjAHDzk1h0eeA", 101);
}

uint64_t sub_19D73285C()
{
  int v0 = sub_19D738990();
  uint64_t v1 = MEMORY[0x1E4F1CFD0];
  if (!v0) {
    uint64_t v1 = MEMORY[0x1E4F1CFC8];
  }
  return *(void *)v1;
}

uint64_t sub_19D732890()
{
  uint64_t result = sub_19D714D40();
  if (result != 1) {
    return sub_19D714D40() == 6 || sub_19D714D40() == 2;
  }
  return result;
}

CFDataRef sub_19D7328D0()
{
  memset(v1, 0, sizeof(v1));
  if (sub_19D73645C(@"camera-button-location", 1, (uint64_t *)v1)) {
    return CFDataCreate(0, (const UInt8 *)v1, 32);
  }
  else {
    return 0;
  }
}

const void *sub_19D732924()
{
  return sub_19D7393B4((unint64_t)@"CertID", (unint64_t)@"GoldCertID");
}

CFNumberRef sub_19D732938()
{
  return sub_19D7140D0(5u);
}

CFStringRef sub_19D732940()
{
  return sub_19D712710(0, "IOPlatformExpertDevice", @"mlb-serial-number");
}

BOOL sub_19D732958(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"Q1Ty5w8gxMWHx3p4lQ1fhA", a2);
}

BOOL sub_19D732980(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"Q1Ty5w8gxMWHx3p4lQ1fhA", 77, a2);
}

uint64_t sub_19D732994()
{
  CFDataRef v0 = (const __CFData *)sub_19D71A230("IODeviceTree:/product", @"cover-glass", 0);
  if (v0)
  {
    CFDataRef v1 = v0;
    if (CFDataGetLength(v0) == 8)
    {
      BytePtr = CFDataGetBytePtr(v1);
      if (BytePtr)
      {
        uint64_t v3 = *((unsigned int *)BytePtr + 1);
        if ((int)v3 < 3) {
          goto LABEL_26;
        }
        uint64_t v4 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
        long long v10 = v4 ? v4 + 1 : "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
        _MGLog((uint64_t)v10, 5426, @"Invlid glass type", v5, v6, v7, v8, v9, v36);
        uint64_t v3 = 0;
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_26;
        }
        __int16 v36 = 0;
        int v11 = MEMORY[0x1E4F14500];
        long long v12 = "Invlid glass type";
        int v13 = (uint8_t *)&v36;
      }
      else
      {
        uint64_t v28 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
        if (v28) {
          uint64_t v34 = v28 + 1;
        }
        else {
          uint64_t v34 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
        }
        _MGLog((uint64_t)v34, 5419, @"CFDataGetBytePtr", v29, v30, v31, v32, v33, v36);
        uint64_t v3 = 0;
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_26;
        }
        *(_WORD *)uint64_t v37 = 0;
        int v11 = MEMORY[0x1E4F14500];
        long long v12 = "CFDataGetBytePtr";
        int v13 = v37;
      }
    }
    else
    {
      uint64_t v21 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v21) {
        uint64_t v27 = v21 + 1;
      }
      else {
        uint64_t v27 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      }
      _MGLog((uint64_t)v27, 5413, @"I/O Invalid data returned", v22, v23, v24, v25, v26, v36);
      uint64_t v3 = 0;
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_26;
      }
      __int16 v38 = 0;
      int v11 = MEMORY[0x1E4F14500];
      long long v12 = "I/O Invalid data returned";
      int v13 = (uint8_t *)&v38;
    }
    _os_log_impl(&dword_19D70E000, v11, OS_LOG_TYPE_DEFAULT, v12, v13, 2u);
    uint64_t v3 = 0;
LABEL_26:
    CFRelease(v1);
    return v3;
  }
  uint64_t v14 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v14) {
    uint64_t v20 = v14 + 1;
  }
  else {
    uint64_t v20 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  }
  _MGLog((uint64_t)v20, 5408, @"copyDataFromDeviceTree failed", v15, v16, v17, v18, v19, v36);
  uint64_t v3 = 0;
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "copyDataFromDeviceTree failed", buf, 2u);
    return 0;
  }
  return v3;
}

CFStringRef sub_19D732BC4()
{
  if (sub_19D714D40() == 4)
  {
    return (CFStringRef)sub_19D710BBC((const char **)@"+VIu65zA5EW4ztayJXvOUg", 0);
  }
  else
  {
    CFDataRef v1 = (const __CFData *)sub_19D717CF8("IODeviceTree:/product", @"product-name", 0);
    if (!v1) {
      return 0;
    }
    CFDataRef v2 = v1;
    CFTypeID v3 = CFGetTypeID(v1);
    if (v3 == CFDataGetTypeID() && CFDataGetLength(v2) >= 1)
    {
      BytePtr = (const char *)CFDataGetBytePtr(v2);
      CFStringRef v5 = CFStringCreateWithCString(0, BytePtr, 0x8000100u);
    }
    else
    {
      CFStringRef v5 = 0;
    }
    CFRelease(v2);
    return v5;
  }
}

CFTypeRef sub_19D732C94()
{
  return sub_19D7357B0(@"BackTeleCameraModuleSerialNumString");
}

BOOL sub_19D732CA0(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"cm399FbDqnv8IOFoeBLWYg", a2);
}

BOOL sub_19D732CC8(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"cm399FbDqnv8IOFoeBLWYg", 82, a2);
}

BOOL sub_19D732CDC()
{
  return !sub_19D7145C8("IODeviceTree:/product", @"lR7sjp4tOz3cMWoEMlZrLA", 117);
}

BOOL sub_19D732D0C()
{
  return sub_19D712390("IODeviceTree:/product/camera", @"OCKVZEIuMz4sxhLz7vmQ5w", 115);
}

CFNumberRef sub_19D732D24()
{
  return sub_19D717F48("IODeviceTree:/product/haptics", @"Mif7940cFpfaXIAHwkYgHQ", 112);
}

BOOL sub_19D732D3C()
{
  CFNumberRef v0 = sub_19D717F48("IODeviceTree:/chosen", @"development-cert", 0);
  int valuePtr = 0;
  if (!v0) {
    return 1;
  }
  CFNumberRef v1 = v0;
  CFNumberGetValue(v0, kCFNumberIntType, &valuePtr);
  CFRelease(v1);
  return valuePtr == 0;
}

BOOL sub_19D732DAC()
{
  return sub_19D7145C8("IODeviceTree:/buttons", @"sad18VQX7AeS+291aKhJlw", 102);
}

CFNumberRef sub_19D732DC4()
{
  return sub_19D717F48("IODeviceTree:/product/facetime", @"7ot70MKj7EdRIEEi91jlcg", 98);
}

BOOL sub_19D732DDC()
{
  return sub_19D712390("IODeviceTree:/chosen", @"lMKshPs7fX9YxDSOEXnoiw", 101);
}

CFNumberRef sub_19D732DF4()
{
  return sub_19D717F48("IODeviceTree:/product/camera", @"I83EgnDEGxinSKU4QAykmA", 114);
}

BOOL sub_19D732E0C()
{
  return sub_19D712390("IODeviceTree:/product/audio", @"vQg8hRTy1PC2j9L+8Jd+vg", 115);
}

const void *sub_19D732E24()
{
  return sub_19D710BBC((const char **)@"IMLaTlxS7ITtwfbRfPYWuA", 0);
}

BOOL sub_19D732E34()
{
  return sub_19D742C60(@"isp", @"camera-front");
}

uint64_t sub_19D732E48()
{
  int v1 = 0;
  LODWORD(result) = sub_19D712B14((const char **)@"61xs1bQ+9eTk8tlRvG9UKw", 5, 5, kCFNumberSInt32Type, &v1);
  if (v1 > 0) {
    return result;
  }
  else {
    return 0;
  }
}

BOOL sub_19D732E90()
{
  return sub_19D7145C8("IODeviceTree:/product/camera", @"EJRyIpTkLz2+Lb6XWy10bQ", 112);
}

uint64_t sub_19D732EA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  int v58 = -414334491;
  long long v57 = xmmword_19D779068;
  int v56 = -1509831889;
  long long v55 = xmmword_19D779090;
  if (MGIsDeviceOneOfType((const UInt8 *)&v57, a2, a3, a4, a5, a6, a7, a8, (uint64_t)&v55)) {
    goto LABEL_6;
  }
  int v54 = 289690957;
  long long v53 = xmmword_19D778CA8;
  int v52 = 586720268;
  long long v51 = xmmword_19D778CBC;
  if (MGIsDeviceOneOfType((const UInt8 *)&v53, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v51)) {
    goto LABEL_6;
  }
  if (sub_19D714D40() != 6) {
    goto LABEL_6;
  }
  int v50 = 368885834;
  long long v49 = xmmword_19D779054;
  int v48 = -526227167;
  long long v47 = xmmword_19D77907C;
  if (MGIsDeviceOneOfType((const UInt8 *)&v49, v15, v16, v17, v18, v19, v20, v21, (uint64_t)&v47)
    || (int v46 = -2092955395,
        long long v45 = xmmword_19D778CD0,
        int v44 = 674998600,
        long long v43 = xmmword_19D778CE4,
        MGIsDeviceOneOfType((const UInt8 *)&v45, v22, v23, v24, v25, v26, v27, v28, (uint64_t)&v43)))
  {
LABEL_6:
    uint64_t v36 = MEMORY[0x1E4F1CFC8];
  }
  else
  {
    int v42 = 1711910369;
    long long v41 = xmmword_19D778CF8;
    int v40 = -1282800328;
    long long v39 = xmmword_19D778D0C;
    int v38 = MGIsDeviceOneOfType((const UInt8 *)&v41, v29, v30, v31, v32, v33, v34, v35, (uint64_t)&v39);
    uint64_t v36 = MEMORY[0x1E4F1CFC8];
    if (!v38) {
      uint64_t v36 = MEMORY[0x1E4F1CFD0];
    }
  }
  return *(void *)v36;
}

BOOL sub_19D7330A4()
{
  memset(&v1, 0, sizeof(v1));
  return stat("/System/Library/PrivateFrameworks/Sharing.framework", &v1) == 0;
}

uint64_t sub_19D7330F0()
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  if (sub_19D714D40() == 1)
  {
    int v59 = 414393924;
    long long v58 = xmmword_19D7791D0;
    int v57 = 897736383;
    long long v56 = xmmword_19D7791E4;
    int v55 = -996295886;
    long long v54 = xmmword_19D7791F8;
    int v53 = -453987047;
    long long v52 = xmmword_19D77920C;
    int v51 = -337121064;
    long long v50 = xmmword_19D779220;
    int v49 = 450980336;
    long long v48 = xmmword_19D779234;
    int v47 = -232427879;
    long long v46 = xmmword_19D779284;
    int v45 = -427474227;
    long long v44 = xmmword_19D77925C;
    int v43 = 1477534141;
    long long v42 = xmmword_19D779270;
    int v41 = -1843102369;
    long long v40 = xmmword_19D779248;
    int v39 = -820493242;
    long long v38 = xmmword_19D778D20;
    int v37 = -61007701;
    long long v36 = xmmword_19D778D34;
    int v35 = -235416490;
    long long v34 = xmmword_19D778D48;
    int v33 = -121925081;
    long long v32 = xmmword_19D778D5C;
    int v31 = 1071957977;
    long long v30 = xmmword_19D778D70;
    int v29 = 438437663;
    long long v28 = xmmword_19D778D84;
    int v27 = -382792827;
    long long v26 = xmmword_19D778D98;
    int v25 = 1575123478;
    long long v24 = xmmword_19D778DAC;
    int v23 = 123138233;
    long long v22 = xmmword_19D778DC0;
    int v21 = 681511593;
    long long v20 = xmmword_19D778DD4;
    int v19 = 713503427;
    long long v18 = xmmword_19D778DE8;
    int v17 = -1632750650;
    long long v16 = xmmword_19D778DFC;
    int v15 = -1431778695;
    long long v14 = xmmword_19D778E10;
    uint64_t v7 = &v56;
    uint64_t v8 = &v58;
    return MGIsDeviceOneOfType((const UInt8 *)v8, v0, v1, v2, v3, v4, v5, v6, (uint64_t)v7) ^ 1;
  }
  if (sub_19D714D40() == 3)
  {
    int v13 = -1527788847;
    long long v12 = xmmword_19D779324;
    int v11 = 1532898719;
    long long v10 = xmmword_19D779310;
    uint64_t v7 = &v10;
    uint64_t v8 = &v12;
    return MGIsDeviceOneOfType((const UInt8 *)v8, v0, v1, v2, v3, v4, v5, v6, (uint64_t)v7) ^ 1;
  }
  return 0;
}

CFTypeRef sub_19D733B1C()
{
  return sub_19D739EE0(1);
}

BOOL sub_19D733B24(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"SZy8T5ma/+a0wJc0ntiaaA", a2);
}

BOOL sub_19D733B4C(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"SZy8T5ma/+a0wJc0ntiaaA", 80, a2);
}

__CFDictionary *sub_19D733B60()
{
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  for (uint64_t i = 0; i != 8; ++i)
  {
    CFStringRef v3 = off_1E5962FF8[i];
    CFStringRef v4 = sub_19D717CB4("IODeviceTree:/options", v3, 0);
    if (v4)
    {
      CFStringRef v5 = v4;
      uint64_t v6 = CFNumberFormatterCreate(v0, 0, kCFNumberFormatterNoStyle);
      CFNumberRef NumberFromString = CFNumberFormatterCreateNumberFromString(v0, v6, v5, 0, 1uLL);
      if (NumberFromString)
      {
        CFNumberRef v8 = NumberFromString;
        CFDictionarySetValue(Mutable, v3, NumberFromString);
        CFRelease(v8);
      }
      CFRelease(v6);
      CFRelease(v5);
    }
  }
  return Mutable;
}

uint64_t sub_19D733C68()
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (sub_19D714D40() == 7)
  {
    uint64_t v7 = MEMORY[0x1E4F1CFC8];
  }
  else
  {
    int v13 = 368885834;
    long long v12 = xmmword_19D779054;
    int v11 = -526227167;
    long long v10 = xmmword_19D77907C;
    int v8 = MGIsDeviceOneOfType((const UInt8 *)&v12, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v10);
    uint64_t v7 = MEMORY[0x1E4F1CFC8];
    if (!v8) {
      uint64_t v7 = MEMORY[0x1E4F1CFD0];
    }
  }
  return *(void *)v7;
}

BOOL sub_19D733D2C()
{
  return sub_19D7145C8("IODeviceTree:/product", @"SLu4aVo/V1CulJ7eyTDh1w", 101);
}

BOOL sub_19D733D44()
{
  return sub_19D71AA8C(@"twodbl", 0);
}

BOOL sub_19D733D54()
{
  return sub_19D712390("IODeviceTree:/product", @"4OThI5F+/uP2oXUpdDxGnw", 115);
}

CFNumberRef sub_19D733D6C()
{
  return sub_19D717F48("IODeviceTree:/product/camera", @"knoZzQDWpu6OQWS7wgRWLg", 114);
}

uint64_t sub_19D733D84()
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (sub_19D714D40() == 4
    || sub_19D714D40() == 1
    || sub_19D714D40() == 3
    || sub_19D714D40() == 2
    || sub_19D714D40() == 7
    || sub_19D714D40() == 11)
  {
    uint64_t v7 = MEMORY[0x1E4F1CFC8];
  }
  else
  {
    int v13 = 368885834;
    long long v12 = xmmword_19D779054;
    int v11 = -526227167;
    long long v10 = xmmword_19D77907C;
    int v9 = MGIsDeviceOneOfType((const UInt8 *)&v12, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v10);
    uint64_t v7 = MEMORY[0x1E4F1CFC8];
    if (!v9) {
      uint64_t v7 = MEMORY[0x1E4F1CFD0];
    }
  }
  return *(void *)v7;
}

BOOL sub_19D733E84()
{
  return sub_19D7145C8("IODeviceTree:/product", @"1oUugT++JJx5gOVyB2la7w", 115);
}

BOOL sub_19D733E9C()
{
  return sub_19D7145C8("IODeviceTree:/product/camera", @"flgGiGu1dR1hEWcC1cTLTw", 114);
}

uint64_t sub_19D733EB4()
{
  if (sub_19D738A24() || MGGetBoolAnswer((const char **)@"OysterCapability"))
  {
    uint64_t v0 = MEMORY[0x1E4F1CFD0];
  }
  else
  {
    CFNumberRef v2 = sub_19D725E78();
    if (v2)
    {
      CFNumberRef v3 = v2;
      int valuePtr = -1;
      if (CFNumberGetValue(v2, kCFNumberSInt32Type, &valuePtr)) {
        BOOL v4 = valuePtr == 2;
      }
      else {
        BOOL v4 = 0;
      }
      char v5 = v4;
      CFRelease(v3);
      uint64_t v0 = MEMORY[0x1E4F1CFD0];
      if ((v5 & 1) == 0) {
        uint64_t v0 = MEMORY[0x1E4F1CFC8];
      }
    }
    else
    {
      uint64_t v0 = MEMORY[0x1E4F1CFC8];
    }
  }
  return *(void *)v0;
}

BOOL sub_19D733F5C()
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  int v14 = 0;
  size_t v13 = 4;
  if (sysctlbyname("hw.cpu64bit_capable", &v14, &v13, 0, 0) != -1) {
    return v14 != 0;
  }
  uint64_t v1 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  CFNumberRef v2 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v2) {
    uint64_t v1 = v2 + 1;
  }
  CFNumberRef v3 = __error();
  char v4 = strerror(*v3);
  _MGLog((uint64_t)v1, 1393, @"sysctlbyname: %s", v5, v6, v7, v8, v9, v4);
  BOOL v10 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT);
  BOOL result = 0;
  if (v10)
  {
    int v11 = __error();
    long long v12 = strerror(*v11);
    *(_DWORD *)buf = 136315138;
    long long v16 = v12;
    _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "sysctlbyname: %s", buf, 0xCu);
    return 0;
  }
  return result;
}

const void *sub_19D734090()
{
  return sub_19D71A230("IODeviceTree:/chosen", @"jJ+5tnncQBcHo5T26MI5jA", 100);
}

CFStringRef sub_19D7340A8()
{
  CFDataRef v0 = (const __CFData *)sub_19D710BBC((const char **)@"IAJzgzhEVk3SMNuEhChs2w", 0);
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  CFTypeID v2 = CFGetTypeID(v0);
  if (v2 != CFDataGetTypeID() || CFDataGetLength(v1) < 6) {
    goto LABEL_9;
  }
  CFIndex Length = CFDataGetLength(v1);
  BytePtr = CFDataGetBytePtr(v1);
  CFMutableStringRef Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, @"%02x", *BytePtr);
  if (Length >= 2)
  {
    CFIndex v6 = Length - 1;
    uint64_t v7 = (unsigned __int8 *)(BytePtr + 1);
    do
    {
      unsigned int v8 = *v7++;
      CFStringAppendFormat(Mutable, 0, @":%02x", v8);
      --v6;
    }
    while (v6);
  }
  if (Mutable)
  {
    CFStringRef Copy = CFStringCreateCopy(0, Mutable);
    CFRelease(Mutable);
  }
  else
  {
LABEL_9:
    CFStringRef Copy = 0;
  }
  CFRelease(v1);
  return Copy;
}

BOOL sub_19D7341C8(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"uAIY4Jb2A7Fy2aLrlDU1gg", a2);
}

BOOL sub_19D7341F0(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"uAIY4Jb2A7Fy2aLrlDU1gg", 82, a2);
}

CFMutableDictionaryRef sub_19D734204()
{
  kern_return_t v2;
  mach_error_t v3;
  const char *v4;
  char *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  char v21;
  CFMutableDictionaryRef properties;
  uint8_t buf[4];
  char *v24;
  uint64_t v25;

  int v25 = *MEMORY[0x1E4F143B8];
  properties = 0;
  io_registry_entry_t v0 = IORegistryEntryFromPath(*MEMORY[0x1E4F2EEF0], "IODeviceTree:/options");
  if (v0)
  {
    io_object_t v1 = v0;
    CFTypeID v2 = IORegistryEntryCreateCFProperties(v0, &properties, (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
    if (v2)
    {
      CFNumberRef v3 = v2;
      char v4 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      uint64_t v5 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v5) {
        char v4 = v5 + 1;
      }
      CFIndex v6 = mach_error_string(v3);
      _MGLog((uint64_t)v4, 8001, @"IORegistryEntryCreateCFProperties failed %s", v7, v8, v9, v10, v11, v6);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        long long v12 = mach_error_string(v3);
        *(_DWORD *)buf = 136315138;
        long long v24 = v12;
        _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "IORegistryEntryCreateCFProperties failed %s", buf, 0xCu);
      }
    }
    IOObjectRelease(v1);
    return properties;
  }
  else
  {
    int v14 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v14) {
      long long v20 = v14 + 1;
    }
    else {
      long long v20 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog((uint64_t)v20, 8005, @"IORegistryEntryFromPath(IODeviceTree:/options) failed", v15, v16, v17, v18, v19, v21);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "IORegistryEntryFromPath(IODeviceTree:/options) failed", buf, 2u);
    }
    return 0;
  }
}

uint64_t sub_19D7343B0()
{
  int v0 = sub_19D714D40();
  uint64_t v1 = MEMORY[0x1E4F1CFC8];
  if (v0 != 4 && sub_19D714D40() != 6) {
    uint64_t v1 = MEMORY[0x1E4F1CFD0];
  }
  return *(void *)v1;
}

BOOL sub_19D7343F8()
{
  return sub_19D711FD4(@"NoPasscodeLocationTiles", @"RegionalBehaviorNoPasscodeLocationTiles");
}

CFTypeRef sub_19D73440C()
{
  if (!MGGetBoolAnswer((const char **)@"AJFQheZDyUbvI6RmBMT9Cg"))
  {
    uint64_t v7 = (CFTypeRef *)*((void *)off_1E9449170 + 65);
    if (!v7) {
      uint64_t v7 = (CFTypeRef *)sub_19D71A930(65, 1);
    }
    CFTypeRef v6 = *v7;
    if (*v7)
    {
      CFRetain(*v7);
      return v6;
    }
    int v11 = sub_19D71EF70("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
    _MGLog((uint64_t)v11, 4852, @"no Postponement status available", v12, v13, v14, v15, v16, v38);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      __int16 v38 = 0;
      uint64_t v17 = MEMORY[0x1E4F14500];
      long long v18 = "no Postponement status available";
      int v19 = (uint8_t *)&v38;
LABEL_28:
      _os_log_impl(&dword_19D70E000, v17, OS_LOG_TYPE_DEFAULT, v18, v19, 2u);
    }
    return 0;
  }
  int v42 = -1;
  if (sub_19D712B14((const char **)@"XQBHOWjPt2P+uNqlLm1P7A", 5, 5, kCFNumberSInt32Type, &v42) && v42 >= 2)
  {
    uint64_t v0 = *((void *)off_1E9449170 + 16);
    if (!v0) {
      uint64_t v0 = sub_19D71A930(16, 2);
    }
    CFTypeID TypeID = CFDictionaryGetTypeID();
    CFDictionaryRef v2 = (const __CFDictionary *)sub_19D739338((uint64_t)"_CTServerConnectionCopyPostponementStatus", v0, TypeID);
    if (v2)
    {
      CFDictionaryRef v3 = v2;
      char v4 = (const void **)*((void *)off_1E9449170 + 64);
      if (!v4) {
        char v4 = (const void **)sub_19D71A930(64, 1);
      }
      CFNumberRef Value = CFDictionaryGetValue(v3, *v4);
      CFTypeRef v6 = Value;
      if (Value)
      {
        CFRetain(Value);
      }
      else
      {
        long long v26 = sub_19D71EF70("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
        _MGLog((uint64_t)v26, 4840, @"No status in postponement info", v27, v28, v29, v30, v31, v38);
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "No status in postponement info", buf, 2u);
        }
      }
      CFRelease(v3);
      return v6;
    }
    long long v20 = sub_19D71EF70("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
    _MGLog((uint64_t)v20, 4836, @"_CTServerConnectionCopyPostponementStatus returned NULL", v21, v22, v23, v24, v25, v38);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      __int16 v41 = 0;
      uint64_t v17 = MEMORY[0x1E4F14500];
      long long v18 = "_CTServerConnectionCopyPostponementStatus returned NULL";
      int v19 = (uint8_t *)&v41;
      goto LABEL_28;
    }
    return 0;
  }
  uint64_t v8 = *((void *)off_1E9449170 + 22);
  if (!v8) {
    uint64_t v8 = sub_19D71A930(22, 2);
  }
  CFTypeID v9 = CFStringGetTypeID();
  CFTypeRef v6 = sub_19D739338((uint64_t)"_CTServerConnectionGetSIMStatus", v8, v9);
  if (!v6)
  {
    long long v32 = sub_19D71EF70("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
    _MGLog((uint64_t)v32, 4846, @"no sim status available", v33, v34, v35, v36, v37, v38);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v39 = 0;
      uint64_t v17 = MEMORY[0x1E4F14500];
      long long v18 = "no sim status available";
      int v19 = v39;
      goto LABEL_28;
    }
    return 0;
  }
  return v6;
}

CFStringRef sub_19D7346D4()
{
  CFDataRef v0 = (const __CFData *)sub_19D710BBC((const char **)@"lU5WxNTusw4lrrBSEBiZeQ", 0);
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  CFTypeID v2 = CFGetTypeID(v0);
  if (v2 != CFDataGetTypeID() || CFDataGetLength(v1) < 6) {
    goto LABEL_9;
  }
  CFIndex Length = CFDataGetLength(v1);
  BytePtr = CFDataGetBytePtr(v1);
  CFMutableStringRef Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, @"%02x", *BytePtr);
  if (Length >= 2)
  {
    CFIndex v6 = Length - 1;
    uint64_t v7 = (unsigned __int8 *)(BytePtr + 1);
    do
    {
      unsigned int v8 = *v7++;
      CFStringAppendFormat(Mutable, 0, @":%02x", v8);
      --v6;
    }
    while (v6);
  }
  if (Mutable)
  {
    CFStringRef Copy = CFStringCreateCopy(0, Mutable);
    CFRelease(Mutable);
  }
  else
  {
LABEL_9:
    CFStringRef Copy = 0;
  }
  CFRelease(v1);
  return Copy;
}

BOOL sub_19D7347F4(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"AGrtXj3nqzz8KFfFHK7/sA", a2);
}

BOOL sub_19D73481C(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"AGrtXj3nqzz8KFfFHK7/sA", 84, a2);
}

const void *sub_19D734830()
{
  return sub_19D710BBC((const char **)@"MTa8c+pEdbK0tHGXP06xOw", 0);
}

BOOL sub_19D734840()
{
  return sub_19D712390("IODeviceTree:/product/camera", @"OJTdSHEAfpOvV6m6o+Ou1w", 109);
}

BOOL sub_19D734858()
{
  return sub_19D7374BC(2);
}

CFStringRef sub_19D734860()
{
  CFDataRef v0 = (const __CFData *)sub_19D710BBC((const char **)@"TqrlqJOZiAuRx8Qu3SVr+Q", 0);
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  CFTypeID v2 = CFGetTypeID(v0);
  if (v2 != CFDataGetTypeID() || CFDataGetLength(v1) < 6) {
    goto LABEL_9;
  }
  CFIndex Length = CFDataGetLength(v1);
  BytePtr = CFDataGetBytePtr(v1);
  CFMutableStringRef Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, @"%02x", *BytePtr);
  if (Length >= 2)
  {
    CFIndex v6 = Length - 1;
    uint64_t v7 = (unsigned __int8 *)(BytePtr + 1);
    do
    {
      unsigned int v8 = *v7++;
      CFStringAppendFormat(Mutable, 0, @":%02x", v8);
      --v6;
    }
    while (v6);
  }
  if (Mutable)
  {
    CFStringRef Copy = CFStringCreateCopy(0, Mutable);
    CFRelease(Mutable);
  }
  else
  {
LABEL_9:
    CFStringRef Copy = 0;
  }
  CFRelease(v1);
  return Copy;
}

BOOL sub_19D734980(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"7VoVaBmSuokzovhUkiDx6Q", a2);
}

BOOL sub_19D7349A8(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"7VoVaBmSuokzovhUkiDx6Q", 83, a2);
}

uint64_t sub_19D7349BC()
{
  return sub_19D743040(0, @"wlan", 0, @"FirmwareVersion", 0);
}

uint64_t sub_19D7349DC()
{
  return sub_19D71AA14((uint64_t)"IODeviceTree:/arm-io", @"mH5IrpyGkVtmgdqs68KHRg", 103);
}

BOOL sub_19D7349F4()
{
  return sub_19D712390("IODeviceTree:/product/audio", @"8Kc1MRjWTfDiGKX6E/9XqQ", 108);
}

BOOL sub_19D734A0C()
{
  return sub_19D712390("IODeviceTree:/product/audio", @"BjJV766k5l7T4e9KHEKuBw", 119);
}

CFStringRef sub_19D734A24()
{
  CFDataRef v0 = (const __CFData *)sub_19D710BBC((const char **)@"8QNz35Yxm0KqxP1JiE0HIw", 0);
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  CFTypeID v2 = CFGetTypeID(v0);
  if (v2 != CFDataGetTypeID() || CFDataGetLength(v1) < 6) {
    goto LABEL_9;
  }
  CFIndex Length = CFDataGetLength(v1);
  BytePtr = CFDataGetBytePtr(v1);
  CFMutableStringRef Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, @"%02x", *BytePtr);
  if (Length >= 2)
  {
    CFIndex v6 = Length - 1;
    uint64_t v7 = (unsigned __int8 *)(BytePtr + 1);
    do
    {
      unsigned int v8 = *v7++;
      CFStringAppendFormat(Mutable, 0, @":%02x", v8);
      --v6;
    }
    while (v6);
  }
  if (Mutable)
  {
    CFStringRef Copy = CFStringCreateCopy(0, Mutable);
    CFRelease(Mutable);
  }
  else
  {
LABEL_9:
    CFStringRef Copy = 0;
  }
  CFRelease(v1);
  return Copy;
}

BOOL sub_19D734B44(uint64_t a1, __CFString **a2)
{
  return !sub_19D7106D4(a1, @"d27R2IjPvpwp+MX/kUbJ2w", a2);
}

BOOL sub_19D734B6C(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19D7160C8(a1, @"d27R2IjPvpwp+MX/kUbJ2w", 80, a2);
}

CFTypeRef sub_19D734B80()
{
  return sub_19D739C38(1, 0, 1);
}

uint64_t sub_19D734B90()
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = *MEMORY[0x1E4F1CFC8];
  if (sub_19D714D40() == 6)
  {
    int v9 = 368885834;
    long long v8 = xmmword_19D779054;
    if ((MGIsDeviceOfType((const UInt8 *)&v8) & 1) == 0)
    {
      int v7 = -414334491;
      long long v6 = xmmword_19D779068;
      if ((MGIsDeviceOfType((const UInt8 *)&v6) & 1) == 0)
      {
        int v5 = -526227167;
        long long v4 = xmmword_19D77907C;
        if ((MGIsDeviceOfType((const UInt8 *)&v4) & 1) == 0)
        {
          int v3 = -1509831889;
          long long v2 = xmmword_19D779090;
          if (!MGIsDeviceOfType((const UInt8 *)&v2)) {
            return *MEMORY[0x1E4F1CFD0];
          }
        }
      }
    }
  }
  return v0;
}

BOOL sub_19D734CAC()
{
  return sub_19D712390("IODeviceTree:/product", @"supports-lotx", 0);
}

uint64_t sub_19D734CC4()
{
  return sub_19D71AA14((uint64_t)"IODeviceTree:/arm-io", @"rwnje21oPXH375umjxV6YQ", 97);
}

uint64_t sub_19D734CDC()
{
  uint64_t v0 = (uint64_t (*)(void))*((void *)off_1E9449170 + 37);
  if (!v0) {
    uint64_t v0 = (uint64_t (*)(void))sub_19D71A930(37, 2);
  }

  return v0();
}

uint64_t sub_19D734D24()
{
  BOOL v0 = sub_19D71DD54("/usr/libexec/lockdownd");
  uint64_t v1 = MEMORY[0x1E4F1CFD0];
  if (!v0 && !sub_19D71DD54("/usr/libexec/lockdownd.internal")) {
    uint64_t v1 = MEMORY[0x1E4F1CFC8];
  }
  return *(void *)v1;
}

uint64_t sub_19D734D78()
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t result = sub_19D714D40();
  if (result != 1)
  {
    if (sub_19D714D40() == 6)
    {
      uint64_t result = sub_19D716960((BOOL)@"M11");
      if (result)
      {
        int v11 = 1530338216;
        long long v10 = xmmword_19D7790A4;
        int v9 = 406601745;
        long long v8 = xmmword_19D7790B8;
        return MGIsDeviceOneOfType((const UInt8 *)&v10, v1, v2, v3, v4, v5, v6, v7, (uint64_t)&v8) ^ 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_19D734EA4()
{
  BOOL v0 = (uint64_t (*)(void))*((void *)off_1E9449170 + 50);
  if (!v0) {
    BOOL v0 = (uint64_t (*)(void))sub_19D71A930(50, 2);
  }

  return v0();
}

CFArrayRef sub_19D734EE4()
{
  uint64_t v120 = *MEMORY[0x1E4F143B8];
  if (sub_19D714D40() != 1)
  {
    if (sub_19D714D40() != 3) {
      goto LABEL_30;
    }
    int v79 = -1283070668;
    long long v78 = xmmword_19D779298;
    int v77 = -199226823;
    long long v76 = xmmword_19D7792AC;
    int v75 = 1412427398;
    long long v74 = xmmword_19D7792C0;
    int v73 = 160260070;
    long long v72 = xmmword_19D7792D4;
    int v71 = 317289457;
    long long v70 = xmmword_19D7792E8;
    int v69 = 401945557;
    long long v68 = xmmword_19D7792FC;
    uint64_t v7 = MGIsDeviceOneOfType((const UInt8 *)&v78, v17, v18, v19, v20, v21, v22, v23, (uint64_t)&v76);
    if (v7)
    {
      uint64_t v24 = 0x147AE0000000;
    }
    else
    {
      int v67 = 1532898719;
      long long v66 = xmmword_19D779310;
      int v65 = -1527788847;
      long long v64 = xmmword_19D779324;
      uint64_t v7 = MGIsDeviceOneOfType((const UInt8 *)&v66, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v64);
      if (v7)
      {
        uint64_t v24 = 0x17AE20000000;
      }
      else
      {
        int v63 = -563086000;
        long long v62 = xmmword_19D779338;
        int v61 = 996646949;
        long long v60 = xmmword_19D77934C;
        uint64_t v7 = MGIsDeviceOneOfType((const UInt8 *)&v62, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v60);
        if (v7)
        {
          uint64_t v16 = 0x405CC3D700000000;
          goto LABEL_29;
        }
        int v59 = 1908474541;
        long long v58 = xmmword_19D779360;
        int v57 = 1275676051;
        long long v56 = xmmword_19D779374;
        uint64_t v7 = MGIsDeviceOneOfType((const UInt8 *)&v58, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v56);
        if (v7
          || (int v55 = -1022451852,
              long long v54 = xmmword_19D779388,
              int v53 = 1729782187,
              long long v52 = xmmword_19D77939C,
              uint64_t v7 = MGIsDeviceOneOfType((const UInt8 *)&v54, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v52),
              v7))
        {
          uint64_t v16 = 0x4061A6B860000000;
          goto LABEL_29;
        }
        int v51 = 2030516999;
        long long v50 = xmmword_19D7793B0;
        int v49 = -1276010597;
        long long v48 = xmmword_19D7793C4;
        int v47 = -762483149;
        long long v46 = xmmword_19D7793D8;
        int v45 = -1926937532;
        long long v44 = xmmword_19D7793EC;
        uint64_t v7 = MGIsDeviceOneOfType((const UInt8 *)&v50, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v48);
        if (!v7)
        {
          int v43 = -1902732724;
          long long v42 = xmmword_19D779400;
          int v41 = -342357580;
          long long v40 = xmmword_19D779414;
          int v39 = 300442574;
          long long v38 = xmmword_19D779428;
          int v37 = -1294188889;
          long long v36 = xmmword_19D77943C;
          uint64_t v7 = MGIsDeviceOneOfType((const UInt8 *)&v42, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v40);
          if (v7)
          {
            uint64_t v16 = 0x405FE8B440000000;
            goto LABEL_29;
          }
          goto LABEL_30;
        }
        uint64_t v24 = 0xC7EFA0000000;
      }
    }
    uint64_t v16 = v24 & 0xFFFFFFFFFFFFLL | 0x405B000000000000;
    goto LABEL_29;
  }
  int v119 = -1403227947;
  long long v118 = xmmword_19D779108;
  int v117 = 729118884;
  long long v116 = xmmword_19D77911C;
  uint64_t v7 = MGIsDeviceOneOfType((const UInt8 *)&v118, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v116);
  if (v7)
  {
    uint64_t v15 = 0xF5C600000000;
LABEL_4:
    uint64_t v16 = v15 & 0xFFFFFFFFFFFFLL | 0x4051000000000000;
    goto LABEL_29;
  }
  int v115 = 1046806126;
  long long v114 = xmmword_19D779130;
  int v113 = -188760945;
  long long v112 = xmmword_19D779144;
  uint64_t v7 = MGIsDeviceOneOfType((const UInt8 *)&v114, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v112);
  if (v7)
  {
    uint64_t v16 = 0x404B4820A0000000;
    goto LABEL_29;
  }
  int v111 = -489993439;
  long long v110 = xmmword_19D779158;
  int v109 = 886875686;
  long long v108 = xmmword_19D77916C;
  uint64_t v7 = MGIsDeviceOneOfType((const UInt8 *)&v110, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v108);
  if (v7)
  {
    uint64_t v25 = 0x191680000000;
LABEL_15:
    uint64_t v16 = v25 & 0xFFFFFFFFFFFFLL | 0x404F000000000000;
    goto LABEL_29;
  }
  int v107 = -350584140;
  long long v106 = xmmword_19D779180;
  int v105 = -1418383976;
  long long v104 = xmmword_19D779194;
  uint64_t v7 = MGIsDeviceOneOfType((const UInt8 *)&v106, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v104);
  if (v7) {
    goto LABEL_27;
  }
  int v103 = 368778837;
  long long v102 = xmmword_19D7791A8;
  int v101 = -1213485500;
  long long v100 = xmmword_19D7791BC;
  uint64_t v7 = MGIsDeviceOneOfType((const UInt8 *)&v102, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v100);
  if (v7) {
    goto LABEL_35;
  }
  int v99 = 414393924;
  long long v98 = xmmword_19D7791D0;
  int v97 = 897736383;
  long long v96 = xmmword_19D7791E4;
  uint64_t v7 = MGIsDeviceOneOfType((const UInt8 *)&v98, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v96);
  if (v7)
  {
LABEL_27:
    uint64_t v26 = 0x7D0B60000000;
LABEL_28:
    uint64_t v16 = v26 & 0xFFFFFFFFFFFFLL | 0x404D000000000000;
    goto LABEL_29;
  }
  int v95 = -996295886;
  long long v94 = xmmword_19D7791F8;
  int v93 = -453987047;
  long long v92 = xmmword_19D77920C;
  uint64_t v7 = MGIsDeviceOneOfType((const UInt8 *)&v94, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v92);
  if (v7)
  {
LABEL_35:
    uint64_t v15 = 0x28D0E0000000;
    goto LABEL_4;
  }
  int v91 = -337121064;
  long long v90 = xmmword_19D779220;
  int v89 = 450980336;
  long long v88 = xmmword_19D779234;
  uint64_t v7 = MGIsDeviceOneOfType((const UInt8 *)&v90, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v88);
  if (v7)
  {
    uint64_t v16 = 0x404E1484E0000000;
    goto LABEL_29;
  }
  int v87 = -1843102369;
  long long v86 = xmmword_19D779248;
  uint64_t v7 = MGIsDeviceOneOfType((const UInt8 *)&v86, v8, v9, v10, v11, v12, v13, v14, 0);
  if (v7)
  {
    uint64_t v25 = 0x49BA0000000;
    goto LABEL_15;
  }
  int v85 = -427474227;
  long long v84 = xmmword_19D77925C;
  int v83 = 1477534141;
  long long v82 = xmmword_19D779270;
  uint64_t v7 = MGIsDeviceOneOfType((const UInt8 *)&v84, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v82);
  if (v7)
  {
    uint64_t v16 = 0x4050BC3960000000;
LABEL_29:
    CFArrayRef result = sub_19D737CF0(v7, v8, v9, v10, v11, v12, v13, v14, v16);
    if (result) {
      return result;
    }
    goto LABEL_30;
  }
  int v81 = -232427879;
  long long v80 = xmmword_19D779284;
  uint64_t v7 = MGIsDeviceOneOfType((const UInt8 *)&v80, v8, v9, v10, v11, v12, v13, v14, 0);
  if (v7)
  {
    uint64_t v26 = 0xFB0200000000;
    goto LABEL_28;
  }
LABEL_30:
  v34[0] = 0;
  v34[1] = 0;
  int v35 = 0;
  sub_19D736A80(v34, @"rear-cam-offset-from-center");
  return sub_19D737BE4((unsigned int *)v34, 0, v28, v29, v30, v31, v32, v33);
}

CFTypeRef sub_19D73578C()
{
  return sub_19D7128AC(0, "IOSDIOIoCardDevice", @"IOSDIOManufacturerTuple");
}

uint64_t sub_19D7357A4()
{
  return sub_19D743388(@"wlan.lowlatency");
}

CFTypeRef sub_19D7357B0(const __CFString *a1)
{
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  mach_port_t v4 = *MEMORY[0x1E4F2EEF0];
  do
  {
    uint64_t v5 = off_1E5962BE0[v2];
    CFDictionaryRef v6 = IOServiceMatching(v5);
    io_service_t MatchingService = IOServiceGetMatchingService(v4, v6);
    if (MatchingService)
    {
      IOObjectRelease(MatchingService);
      uint64_t v3 = (char *)v5;
    }
    ++v2;
  }
  while (v2 != 9);
  if (v3)
  {
    CFTypeRef result = sub_19D7128AC(1, v3, a1);
    if (result) {
      return result;
    }
    sub_19D711424(12);
  }
  return 0;
}

CFStringRef sub_19D735850(const char **a1)
{
  int v3 = -1;
  BOOL v1 = sub_19D712B14(a1, 5, 5, kCFNumberSInt32Type, &v3);
  CFStringRef result = @"unknown";
  if (v1 && v3 != -1) {
    return CFStringCreateWithFormat(0, 0, @"#%02x%02x%02x", BYTE2(v3), BYTE1(v3), v3);
  }
  return result;
}

uint64_t sub_19D7358CC()
{
  uint64_t v0 = sub_19D71970C();
  CFDataRef v1 = sub_19D735968();
  CFDataRef v2 = v1;
  if (!v1 || (CFTypeID v3 = CFGetTypeID(v1), v3 != CFDataGetTypeID()) || CFDataGetLength(v2) < 1)
  {
    sub_19D711424(1);
    uint64_t v4 = 0xFFFFFFFFLL;
    if (!v0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v4 = *CFDataGetBytePtr(v2);
  if (v0) {
LABEL_7:
  }
    CFRelease(v0);
LABEL_8:
  if (v2) {
    CFRelease(v2);
  }
  return v4;
}

CFDataRef sub_19D735968()
{
  CFDataRef v0 = (const __CFData *)sub_19D7128AC(1, "als", @"als-colorCfg");
  if (v0)
  {
    CFDataRef v1 = v0;
    CFTypeID v2 = CFGetTypeID(v0);
    if (v2 == CFDataGetTypeID() && CFDataGetLength(v1) > 0) {
      return v1;
    }
    CFRelease(v1);
  }

  return sub_19D73E074(0x436C7243u);
}

uint64_t sub_19D7359F8(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  CFDataRef v2 = (const __CFData *)sub_19D710BBC((const char **)@"oBbtJ8x+s1q0OkaiocPuog", 0);
  if (!v2) {
    return 0;
  }
  CFDataRef v3 = v2;
  CFTypeID v4 = CFGetTypeID(v2);
  if (v4 == CFDataGetTypeID() && CFDataGetLength(v3) == 24)
  {
    int v29 = -337121064;
    long long v28 = xmmword_19D779220;
    int v27 = 450980336;
    long long v26 = xmmword_19D779234;
    if (MGIsDeviceOneOfType((const UInt8 *)&v28, v5, v6, v7, v8, v9, v10, v11, (uint64_t)&v26))
    {
      BytePtr = CFDataGetBytePtr(v3);
      float v13 = *((float *)BytePtr + 3);
      double v14 = (float)((float)*(int *)BytePtr / v13);
      double v15 = v13;
      *(double *)a1 = v14;
      *(double *)(a1 + 8) = round(522.149562 / v15 * v15 / v15);
      *(void *)(a1 + 16) = 0;
      *(double *)(a1 + 24) = round(294.333002 / v15 * v15 / v15);
      uint64_t v16 = 1;
    }
    else
    {
      float64x2_t v24 = 0u;
      float64x2_t v25 = 0u;
      uint64_t v16 = sub_19D735BA4((uint64_t *)&v24);
      if (v16)
      {
        uint64_t v18 = (int32x2_t *)CFDataGetBytePtr(v3);
        uint64_t v19 = (const float *)&v18[1] + 1;
        float32x2_t v20 = vld1_dup_f32(v19);
        float64x2_t v21 = vcvtq_f64_f32(vdiv_f32(vcvt_f32_s32(*v18), v20));
        float64x2_t v22 = vmulq_f64(v24, v21);
        float64x2_t v23 = vmulq_f64(v25, v21);
        *(float64x2_t *)a1 = v22;
        *(float64x2_t *)(a1 + 16) = v23;
      }
    }
  }
  else
  {
    uint64_t v16 = 0;
  }
  CFRelease(v3);
  return v16;
}

uint64_t sub_19D735BA4(uint64_t *a1)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  *a1 = 0;
  a1[1] = 0;
  __asm { FMOV            V0.2D, #1.0 }
  *((_OWORD *)a1 + 1) = _Q0;
  CFDataRef v7 = (const __CFData *)sub_19D717CF8("IODeviceTree:/product", @"side-button-location", 0);
  if (v7)
  {
    CFDataRef v8 = v7;
    CFIndex Length = CFDataGetLength(v7);
    uint64_t v10 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v10) {
      uint64_t v16 = v10 + 1;
    }
    else {
      uint64_t v16 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog((uint64_t)v16, 7201, @"Size of side-button-location %lu", v11, v12, v13, v14, v15, Length);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(void *)long long v64 = Length;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Size of side-button-location %lu", buf, 0xCu);
    }
    if (Length == 20)
    {
      BytePtr = CFDataGetBytePtr(v8);
      uint64_t v18 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v18) {
        float64x2_t v24 = v18 + 1;
      }
      else {
        float64x2_t v24 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      }
      _MGLog((uint64_t)v24, 7214, @"Button info %d - %d - %d - %d - %d", v19, v20, v21, v22, v23, *(_DWORD *)BytePtr);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v25 = *(_DWORD *)BytePtr;
        int v26 = *((_DWORD *)BytePtr + 1);
        int v27 = *((_DWORD *)BytePtr + 2);
        int v28 = *((_DWORD *)BytePtr + 3);
        int v29 = *((_DWORD *)BytePtr + 4);
        *(_DWORD *)buf = 67110144;
        *(_DWORD *)long long v64 = v25;
        *(_WORD *)&v64[4] = 1024;
        *(_DWORD *)&v64[6] = v26;
        LOWORD(v65) = 1024;
        *(_DWORD *)((char *)&v65 + 2) = v27;
        HIWORD(v65) = 1024;
        *(_DWORD *)long long v66 = v28;
        *(_WORD *)&v66[4] = 1024;
        *(_DWORD *)&v66[6] = v29;
        _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Button info %d - %d - %d - %d - %d", buf, 0x20u);
      }
      if (sub_19D714D40() == 1)
      {
        *a1 = 0x3FF0000000000000;
        float v30 = (float)*((unsigned int *)BytePtr + 1);
        *((double *)a1 + 1) = (float)((float)*((unsigned int *)BytePtr + 2) / v30);
        a1[2] = 0;
        double v31 = (float)((float)*((unsigned int *)BytePtr + 3) / v30);
      }
      else
      {
        if (sub_19D714D40() != 3)
        {
LABEL_30:
          long long v50 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
          if (v50) {
            long long v56 = v50 + 1;
          }
          else {
            long long v56 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
          }
          _MGLog((uint64_t)v56, 7232, @"Normalized Rect %f - %f - %f - %f", v51, v52, v53, v54, v55, *(_OWORD *)a1);
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v57 = *a1;
            uint64_t v58 = a1[1];
            uint64_t v59 = a1[2];
            uint64_t v60 = a1[3];
            *(_DWORD *)buf = 134218752;
            *(void *)long long v64 = v57;
            *(_WORD *)&v64[8] = 2048;
            uint64_t v65 = v58;
            *(_WORD *)long long v66 = 2048;
            *(void *)&v66[2] = v59;
            __int16 v67 = 2048;
            uint64_t v68 = v60;
            _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Normalized Rect %f - %f - %f - %f", buf, 0x2Au);
          }
          CFRelease(v8);
          return 1;
        }
        unsigned int v48 = *(_DWORD *)BytePtr;
        unsigned int v49 = *((_DWORD *)BytePtr + 3);
        *(double *)a1 = (float)((float)(*(_DWORD *)BytePtr - (*((_DWORD *)BytePtr + 2) + v49))
                              / (float)*(unsigned int *)BytePtr);
        a1[1] = 0;
        *((double *)a1 + 2) = (float)((float)v49 / (float)v48);
        double v31 = 0.0;
      }
      *((double *)a1 + 3) = v31;
      goto LABEL_30;
    }
    int v41 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v41) {
      int v47 = v41 + 1;
    }
    else {
      int v47 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog((uint64_t)v47, 7210, @"Property copyDeviceTreeProperty(IODeviceTree:/product side-button-location) had unexpected size", v42, v43, v44, v45, v46, v62);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Property copyDeviceTreeProperty(IODeviceTree:/product side-button-location) had unexpected size", buf, 2u);
    }
    CFRelease(v8);
    return 0;
  }
  uint64_t v32 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v32) {
    long long v38 = v32 + 1;
  }
  else {
    long long v38 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  }
  _MGLog((uint64_t)v38, 7195, @"Failed to copyDeviceTreeProperty(IODeviceTree:/product side-button-location)", v33, v34, v35, v36, v37, v61);
  BOOL v39 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (v39)
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Failed to copyDeviceTreeProperty(IODeviceTree:/product side-button-location)", buf, 2u);
    return 0;
  }
  return result;
}

CFTypeRef sub_19D735FA8(const __CFString *a1)
{
  uint64_t v2 = 0;
  while (1)
  {
    CFTypeRef v3 = sub_19D7128AC(1, off_1E5962CB8[v2], a1);
    if (v3) {
      break;
    }
    if (++v2 == 3)
    {
      sub_19D711424(12);
      return v3;
    }
  }
  return v3;
}

void sub_19D73600C()
{
  CFDataRef v0 = dlopen("/usr/lib/updaters/libSavageUpdater_iOS.dylib", 1);
  if (v0)
  {
    CFDataRef v1 = v0;
    off_1E9449460 = (uint64_t (*)(void, void, void, void, void))dlsym(v0, "SavageUpdaterExecCommand");
    off_1E9449458 = (uint64_t (*)(void, void, void, void))dlsym(v1, "SavageUpdaterCreate");
    off_1E9449468 = (uint64_t (*)(void, void))dlsym(v1, "SavageUpdaterIsDone");
  }
  else
  {
    uint64_t v2 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v2) {
      CFDataRef v8 = v2 + 1;
    }
    else {
      CFDataRef v8 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog((uint64_t)v8, 7617, @"Unable to dlopen(/usr/lib/updaters/libSavageUpdater_iOS.dylib)", v3, v4, v5, v6, v7, v9[0]);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Unable to dlopen(/usr/lib/updaters/libSavageUpdater_iOS.dylib)", v9, 2u);
    }
  }
}

CFTypeRef sub_19D7360FC(uint64_t a1, io_registry_entry_t entry, unsigned char *a3)
{
  CFTypeRef result = IORegistryEntryCreateCFProperty(entry, @"Content", (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    *a3 = 1;
  }
  return result;
}

uint64_t sub_19D736168()
{
  CFDataRef v0 = (const __CFData *)sub_19D7128AC(1, "als", @"noMultiColorSupport");
  CFDataRef v1 = v0;
  if (v0)
  {
    CFTypeID v2 = CFGetTypeID(v0);
    if (v2 != CFDataGetTypeID() || CFDataGetLength(v1) != 4 || *(_DWORD *)CFDataGetBytePtr(v1))
    {
      uint64_t v3 = 0xFFFFFFFFLL;
      goto LABEL_12;
    }
  }
  CFDataRef v4 = sub_19D735968();
  if (!v4)
  {
    sub_19D711424(1);
    uint64_t v3 = 0xFFFFFFFFLL;
    if (!v1) {
      return v3;
    }
    goto LABEL_12;
  }
  CFDataRef v5 = v4;
  CFTypeID v6 = CFGetTypeID(v4);
  if (v6 == CFDataGetTypeID() && CFDataGetLength(v5) > 1)
  {
    uint64_t v3 = CFDataGetBytePtr(v5)[1];
  }
  else
  {
    sub_19D711424(1);
    uint64_t v3 = 0xFFFFFFFFLL;
  }
  CFRelease(v5);
  if (v1) {
LABEL_12:
  }
    CFRelease(v1);
  return v3;
}

__CFArray *sub_19D736264(__CFArray *Copy, uint32_t a2)
{
  v25[1] = *MEMORY[0x1E4F143B8];
  int v4 = sub_19D7123B8("IODeviceTree:/product", @"lynx-count", 0, 1, 1);
  if (v4 >= 2)
  {
    uint64_t v5 = 1;
    CFTypeID v6 = MEMORY[0x1E4F14500];
    do
    {
      v25[0] = v5;
      CFDataRef v7 = sub_19D73BAD8("AppleCyrus", a2, v25, 1u, 0x10000uLL);
      if (v7)
      {
        CFDataRef v8 = v7;
        CFArrayAppendValue(Copy, v7);
        CFRelease(v8);
      }
      else
      {
        uint64_t v9 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
        if (v9) {
          uint64_t v15 = v9 + 1;
        }
        else {
          uint64_t v15 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
        }
        _MGLog((uint64_t)v15, 5090, @"Lynx entry is NULL - not adding.", v10, v11, v12, v13, v14, v24[0]);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)float64x2_t v24 = 0;
          _os_log_impl(&dword_19D70E000, v6, OS_LOG_TYPE_DEFAULT, "Lynx entry is NULL - not adding.", v24, 2u);
        }
      }
      ++v5;
    }
    while (v4 != v5);
  }
  if (Copy) {
    CFStringRef Copy = CFArrayCreateCopy(0, Copy);
  }
  if (CFArrayGetCount(Copy) != v4)
  {
    uint64_t v16 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v16) {
      uint64_t v22 = v16 + 1;
    }
    else {
      uint64_t v22 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog((uint64_t)v22, 5100, @"Lynx count in resulting array does not match published count", v17, v18, v19, v20, v21, v24[0]);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)float64x2_t v24 = 0;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Lynx count in resulting array does not match published count", v24, 2u);
    }
  }
  return Copy;
}

BOOL sub_19D73645C(const __CFString *a1, int a2, uint64_t *a3)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  if (!a3)
  {
    uint64_t v45 = sub_19D71EF70("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
    _MGLog((uint64_t)v45, 7307, @"outRect is NULL", v46, v47, v48, v49, v50, v68);
    BOOL v14 = 0;
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
      return v14;
    }
    *(_WORD *)buf = 0;
    uint64_t v51 = MEMORY[0x1E4F14500];
    uint64_t v52 = "outRect is NULL";
    uint32_t v53 = 2;
LABEL_26:
    _os_log_impl(&dword_19D70E000, v51, OS_LOG_TYPE_DEFAULT, v52, buf, v53);
    return 0;
  }
  *a3 = 0;
  a3[1] = 0;
  __asm { FMOV            V0.2D, #1.0 }
  *((_OWORD *)a3 + 1) = _Q0;
  CFDataRef v11 = (const __CFData *)sub_19D717CF8("IODeviceTree:/product", a1, 0);
  if (!v11)
  {
    uint64_t v54 = sub_19D71EF70("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
    _MGLog((uint64_t)v54, 7315, @"Failed to copy EDT property for %@", v55, v56, v57, v58, v59, (char)a1);
    BOOL v14 = 0;
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
      return v14;
    }
    *(_DWORD *)buf = 138412290;
    *(void *)long long v70 = a1;
    uint64_t v51 = MEMORY[0x1E4F14500];
    uint64_t v52 = "Failed to copy EDT property for %@";
    uint32_t v53 = 12;
    goto LABEL_26;
  }
  CFDataRef v12 = v11;
  CFIndex Length = CFDataGetLength(v11);
  BOOL v14 = Length == 20;
  if (Length == 20)
  {
    BytePtr = CFDataGetBytePtr(v12);
    uint64_t v16 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v16) {
      uint64_t v22 = v16 + 1;
    }
    else {
      uint64_t v22 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog((uint64_t)v22, 7323, @"Button info %d - %d - %d - %d - %d", v17, v18, v19, v20, v21, *(_DWORD *)BytePtr);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      int v23 = *(_DWORD *)BytePtr;
      int v24 = *((_DWORD *)BytePtr + 1);
      int v25 = *((_DWORD *)BytePtr + 2);
      int v26 = *((_DWORD *)BytePtr + 3);
      int v27 = *((_DWORD *)BytePtr + 4);
      *(_DWORD *)buf = 67110144;
      *(_DWORD *)long long v70 = v23;
      *(_WORD *)&v70[4] = 1024;
      *(_DWORD *)&v70[6] = v24;
      LOWORD(v71) = 1024;
      *(_DWORD *)((char *)&v71 + 2) = v25;
      HIWORD(v71) = 1024;
      *(_DWORD *)long long v72 = v26;
      *(_WORD *)&v72[4] = 1024;
      *(_DWORD *)&v72[6] = v27;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Button info %d - %d - %d - %d - %d", buf, 0x20u);
    }
    if (sub_19D714D40() == 1)
    {
      double v28 = 1.0;
      if (!a2) {
        double v28 = 0.0;
      }
      *(double *)a3 = v28;
      float v29 = (float)*((unsigned int *)BytePtr + 1);
      *((double *)a3 + 1) = (float)((float)*((unsigned int *)BytePtr + 2) / v29);
      a3[2] = 0;
      *((double *)a3 + 3) = (float)((float)*((unsigned int *)BytePtr + 3) / v29);
    }
    float v30 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v30) {
      uint64_t v36 = v30 + 1;
    }
    else {
      uint64_t v36 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog((uint64_t)v36, 7339, @"Normalized Rect %f - %f - %f - %f", v31, v32, v33, v34, v35, *(_OWORD *)a3);
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    uint64_t v37 = *a3;
    CFStringRef v38 = (const __CFString *)a3[1];
    uint64_t v39 = a3[2];
    uint64_t v40 = a3[3];
    *(_DWORD *)buf = 134218752;
    *(void *)long long v70 = v37;
    *(_WORD *)&v70[8] = 2048;
    CFStringRef v71 = v38;
    *(_WORD *)long long v72 = 2048;
    *(void *)&v72[2] = v39;
    __int16 v73 = 2048;
    uint64_t v74 = v40;
    int v41 = MEMORY[0x1E4F14500];
    uint64_t v42 = "Normalized Rect %f - %f - %f - %f";
    uint32_t v43 = 42;
  }
  else
  {
    CFIndex v60 = Length;
    char v61 = sub_19D71EF70("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
    _MGLog((uint64_t)v61, 7320, @"Unexpected size %lu for %@", v62, v63, v64, v65, v66, v60);
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    *(_DWORD *)buf = 134218242;
    *(void *)long long v70 = v60;
    *(_WORD *)&v70[8] = 2112;
    CFStringRef v71 = a1;
    int v41 = MEMORY[0x1E4F14500];
    uint64_t v42 = "Unexpected size %lu for %@";
    uint32_t v43 = 22;
  }
  _os_log_impl(&dword_19D70E000, v41, OS_LOG_TYPE_DEFAULT, v42, buf, v43);
LABEL_20:
  CFRelease(v12);
  return v14;
}

uint64_t sub_19D736824(char *cStr)
{
  uint64_t v6 = 0;
  CFDataRef v7 = &v6;
  uint64_t v8 = 0x2000000000;
  char v9 = 0;
  CFStringRef v1 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], cStr, 0x8000100u);
  CFDictionaryRef v2 = IOServiceMatching("IOPort");
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = sub_19D736900;
  v5[3] = &unk_1E5962D50;
  v5[4] = &v6;
  void v5[5] = v1;
  sub_19D73A45C(v2, (uint64_t)v5);
  if (v1) {
    CFRelease(v1);
  }
  uint64_t v3 = *((unsigned __int8 *)v7 + 24);
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_19D736900(uint64_t a1, io_registry_entry_t entry, unsigned char *a3)
{
  CFArrayRef CFProperty = (const __CFArray *)IORegistryEntryCreateCFProperty(entry, @"TransportsSupported", (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  if (CFProperty)
  {
    CFArrayRef v6 = CFProperty;
    if (CFArrayGetCount(CFProperty) >= 1)
    {
      v8.length = CFArrayGetCount(v6);
      v8.CFIndex location = 0;
      if (CFArrayContainsValue(v6, v8, *(const void **)(a1 + 40)))
      {
        *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
        if (a3) {
          *a3 = 1;
        }
      }
    }
    CFRelease(v6);
  }
}

uint64_t sub_19D7369C0(uint64_t a1, uint64_t a2, void *a3)
{
  char v12 = 0;
  CFTypeRef cf = 0;
  uint64_t v5 = off_1E9449170;
  CFArrayRef v6 = (uint64_t (*)(uint64_t, void, char *, CFTypeRef *))*((void *)off_1E9449170 + 4);
  if (!v6)
  {
    CFArrayRef v6 = (uint64_t (*)(uint64_t, void, char *, CFTypeRef *))sub_19D71A930(4, 2);
    uint64_t v5 = off_1E9449170;
  }
  CFDataRef v7 = (void *)v5[55];
  if (!v7) {
    CFDataRef v7 = (void *)sub_19D71A930(55, 1);
  }
  uint64_t v8 = v6(a2, *v7, &v12, &cf);
  if (cf) {
    CFRelease(cf);
  }
  char v9 = (void *)MEMORY[0x1E4F1CFD0];
  if (!v12) {
    char v9 = (void *)MEMORY[0x1E4F1CFC8];
  }
  *a3 = *v9;
  return v8;
}

void sub_19D736A80(void *a1, const __CFString *a2)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    uint64_t v8 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v8) {
      BOOL v14 = v8 + 1;
    }
    else {
      BOOL v14 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog((uint64_t)v14, 7734, @"Offset_struct was nil", v9, v10, v11, v12, v13, v39);
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_WORD *)buf = 0;
    uint64_t v15 = MEMORY[0x1E4F14500];
    uint64_t v16 = "Offset_struct was nil";
    uint32_t v17 = 2;
LABEL_15:
    _os_log_impl(&dword_19D70E000, v15, OS_LOG_TYPE_DEFAULT, v16, buf, v17);
    return;
  }
  CFDataRef v4 = (const __CFData *)sub_19D71A230("IODeviceTree:/product", a2, 0);
  if (!v4)
  {
    uint64_t v18 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v18) {
      int v24 = v18 + 1;
    }
    else {
      int v24 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog((uint64_t)v24, 7741, @"Failed to copyDeviceTreeProperty(IODeviceTree:/product %@)", v19, v20, v21, v22, v23, (char)a2);
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_DWORD *)buf = 138412290;
    *(void *)&uint8_t buf[4] = a2;
    uint64_t v15 = MEMORY[0x1E4F14500];
    uint64_t v16 = "Failed to copyDeviceTreeProperty(IODeviceTree:/product %@)";
    uint32_t v17 = 12;
    goto LABEL_15;
  }
  CFDataRef v5 = v4;
  if (CFDataGetLength(v4) == 20)
  {
    BytePtr = CFDataGetBytePtr(v5);
    size_t Length = CFDataGetLength(v5);
    memcpy(a1, BytePtr, Length);
  }
  else
  {
    CFIndex v25 = CFDataGetLength(v5);
    int v26 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    int v27 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v27) {
      int v26 = v27 + 1;
    }
    if (v25 == 16)
    {
      _MGLog((uint64_t)v26, 7750, @"Taking legacy CameraOffset_2D path", v28, v29, v30, v31, v32, v39);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Taking legacy CameraOffset_2D path", buf, 2u);
      }
      *(void *)buf = 0;
      *(void *)&buf[8] = 0;
      CFDataGetBytePtr(v5);
      CFDataGetLength(v5);
      __memcpy_chk();
      uint64_t v33 = *(void *)&buf[8];
      *a1 = *(void *)buf;
      *((_DWORD *)a1 + 2) = 0;
      *(void *)((char *)a1 + 12) = v33;
    }
    else
    {
      CFDataGetLength(v5);
      _MGLog((uint64_t)v26, 7760, @"Property copyDeviceTreeProperty(IODeviceTree:/product %@) had an unexpected size of %zu instead of %zu or %zu.", v34, v35, v36, v37, v38, (char)a2);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138413058;
        *(void *)&uint8_t buf[4] = a2;
        *(_WORD *)&uint8_t buf[12] = 2048;
        *(void *)&buf[14] = CFDataGetLength(v5);
        __int16 v41 = 2048;
        uint64_t v42 = 20;
        __int16 v43 = 2048;
        uint64_t v44 = 16;
        _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Property copyDeviceTreeProperty(IODeviceTree:/product %@) had an unexpected size of %zu instead of %zu or %zu.", buf, 0x2Au);
      }
    }
  }
  CFRelease(v5);
}

uint64_t sub_19D736D94(const __CFString *a1, int a2, float64x2_t *a3)
{
  CFDataRef v6 = (const __CFData *)sub_19D710BBC((const char **)@"oBbtJ8x+s1q0OkaiocPuog", 0);
  if (!v6) {
    return 0;
  }
  CFDataRef v7 = v6;
  CFTypeID v8 = CFGetTypeID(v6);
  if (v8 == CFDataGetTypeID())
  {
    float64x2_t v17 = 0u;
    float64x2_t v18 = 0u;
    if (CFDataGetLength(v7) == 24 && sub_19D73645C(a1, a2, (uint64_t *)&v17))
    {
      BytePtr = (int32x2_t *)CFDataGetBytePtr(v7);
      uint64_t v10 = (const float *)&BytePtr[1] + 1;
      float32x2_t v11 = vld1_dup_f32(v10);
      float64x2_t v12 = vcvtq_f64_f32(vdiv_f32(vcvt_f32_s32(*BytePtr), v11));
      float64x2_t v13 = vmulq_f64(v17, v12);
      float64x2_t v14 = vmulq_f64(v18, v12);
      *a3 = v13;
      a3[1] = v14;
      uint64_t v15 = 1;
    }
    else
    {
      uint64_t v15 = 0;
    }
  }
  else
  {
    uint64_t v15 = 0;
    float64x2_t v17 = 0u;
    float64x2_t v18 = 0u;
  }
  CFRelease(v7);
  return v15;
}

uint64_t sub_19D736E8C(mach_port_t a1, char a2, void *a3, size_t *a4)
{
  if (a4) {
    size_t v8 = *a4;
  }
  else {
    size_t v8 = 0;
  }
  size_t outputStructCnt = v8;
  uint64_t v9 = malloc_type_malloc(8uLL, 0xD1370CC7uLL);
  uint64_t v10 = v9;
  if (v9)
  {
    *uint64_t v9 = 1296256323;
    *((unsigned char *)v9 + 4) = a2;
    *((unsigned char *)v9 + 5) = 0;
    uint64_t v11 = IOConnectCallStructMethod(a1, 0, v9, 8uLL, a3, &outputStructCnt);
    if (a4) {
      *a4 = outputStructCnt;
    }
  }
  else
  {
    float64x2_t v12 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v12) {
      float64x2_t v18 = v12 + 1;
    }
    else {
      float64x2_t v18 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog((uint64_t)v18, 5307, @"Failed to allocate Mesa command object", v13, v14, v15, v16, v17, v20[0]);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Failed to allocate Mesa command object", v20, 2u);
    }
    uint64_t v11 = 0xFFFFFFFFLL;
  }
  free(v10);
  return v11;
}

uint64_t sub_19D736FBC(int a1)
{
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2000000000;
  char v11 = 0;
  CFDictionaryRef v2 = IOServiceMatching("IOAccessoryManager");
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = sub_19D737078;
  v5[3] = &unk_1E5962DC0;
  int v6 = 255;
  int v7 = a1;
  v5[4] = &v8;
  sub_19D73A45C(v2, (uint64_t)v5);
  uint64_t v3 = *((unsigned __int8 *)v9 + 24);
  _Block_object_dispose(&v8, 8);
  return v3;
}

void sub_19D737078(uint64_t a1, io_registry_entry_t entry, unsigned char *a3)
{
  CFNumberRef CFProperty = (const __CFNumber *)IORegistryEntryCreateCFProperty(entry, @"IOAccessoryManagerType", (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  if (CFProperty)
  {
    CFNumberRef v6 = CFProperty;
    CFTypeID v7 = CFGetTypeID(CFProperty);
    if (v7 == CFNumberGetTypeID())
    {
      int valuePtr = 0;
      CFNumberGetValue(v6, kCFNumberSInt32Type, &valuePtr);
      if ((*(_DWORD *)(a1 + 40) & valuePtr) == *(_DWORD *)(a1 + 44))
      {
        *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
        *a3 = 1;
      }
    }
    CFRelease(v6);
  }
}

CFNumberRef sub_19D737130(int a1)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  int valuePtr = -1;
  CFDataRef v2 = (const __CFData *)sub_19D717CF8("IODeviceTree:/product", @"device-colors", 0);
  if (v2)
  {
    CFDataRef v3 = v2;
    CFTypeID v4 = CFGetTypeID(v2);
    if (v4 == CFDataGetTypeID() && CFDataGetLength(v3) == 16)
    {
      BytePtr = CFDataGetBytePtr(v3);
      uint64_t v6 = 8;
      if (a1) {
        uint64_t v6 = 4;
      }
      uint64_t v7 = 5;
      if (!a1) {
        uint64_t v7 = 9;
      }
      uint64_t v8 = 10;
      if (a1) {
        uint64_t v8 = 6;
      }
      int v9 = BytePtr[v8];
      int v10 = BytePtr[v7];
      int v11 = BytePtr[v6];
      int v12 = BytePtr[1];
      if (v12 == 2)
      {
        int v13 = (v9 << 16) | (v10 << 8) | v11;
        goto LABEL_19;
      }
      if (v12 == 1)
      {
        int v13 = v9 | (v10 << 8) | (v11 << 16);
LABEL_19:
        int valuePtr = v13;
LABEL_26:
        CFRelease(v3);
        goto LABEL_27;
      }
      uint64_t v15 = BytePtr;
      uint64_t v16 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v16) {
        uint64_t v22 = v16 + 1;
      }
      else {
        uint64_t v22 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      }
      _MGLog((uint64_t)v22, 2936, @"unknown dclr version %u.%u", v17, v18, v19, v20, v21, v15[1]);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        int v23 = v15[1];
        int v24 = *v15;
        *(_DWORD *)buf = 67109376;
        int v28 = v23;
        __int16 v29 = 1024;
        int v30 = v24;
        _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "unknown dclr version %u.%u", buf, 0xEu);
      }
    }
    int v13 = -1;
    goto LABEL_26;
  }
  if (a1) {
    unsigned int v14 = sub_19D736168();
  }
  else {
    unsigned int v14 = sub_19D7358CC();
  }
  if (v14 > 8) {
    return 0;
  }
  int v13 = *((_DWORD *)&off_1E5962C28 + 4 * v14 + 2);
  int valuePtr = v13;
LABEL_27:
  if (v13 != -1) {
    return CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  }
  return 0;
}

CFTypeRef sub_19D737340(uint64_t a1, io_registry_entry_t entry, unsigned char *a3)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  CFTypeRef result = IORegistryEntrySearchCFProperty(entry, "IOService", @"vendor-id", 0, 3u);
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)) {
    *a3 = 1;
  }
  return result;
}

BOOL sub_19D7373C0(uint64_t a1, io_registry_entry_t entry)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = IORegistryEntrySearchCFProperty(entry, "IOService", @"vendor-id", 0, 3u);
  return *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) != 0;
}

__CFArray *sub_19D737434(uint64_t a1)
{
  CFMutableStringRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    for (uint64_t i = 0; i != 16; i += 4)
    {
      CFNumberRef v4 = CFNumberCreate(0, kCFNumberIntType, (const void *)(a1 + i));
      CFArrayAppendValue(Mutable, v4);
      CFRelease(v4);
    }
  }
  return Mutable;
}

BOOL sub_19D7374BC(int a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (sub_19D71644C())
  {
    os_parse_boot_arg_int();
    os_parse_boot_arg_int();
  }
  if (a1 == 1)
  {
    CFDataRef v2 = "manta-b";
    return sub_19D73A594(1, v2);
  }
  if (a1 == 2)
  {
    CFDataRef v2 = "manta-c";
    return sub_19D73A594(1, v2);
  }
  CFDataRef v3 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v3) {
    int v9 = v3 + 1;
  }
  else {
    int v9 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  }
  _MGLog((uint64_t)v9, 9124, @"Invalid compute hardware type: %d", v4, v5, v6, v7, v8, a1);
  BOOL v10 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT);
  BOOL result = 0;
  if (v10)
  {
    *(_DWORD *)buf = 67109120;
    LODWORD(v13) = a1;
    _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Invalid compute hardware type: %d", buf, 8u);
    return 0;
  }
  return result;
}

void *sub_19D7376D0()
{
  BOOL result = dlopen("/System/Library/PrivateFrameworks/NearField.framework/NearField", 261);
  if (result || (BOOL result = dlopen("/usr/lib/libnfrestore.dylib", 261)) != 0)
  {
    BOOL result = dlsym(result, "NfRestoreCopyUniqueFDRKey");
    off_1E9449418 = (uint64_t (*)(void, void, void))result;
  }
  return result;
}

void sub_19D737720(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  vsnprintf(__str, 0x400uLL, a3, &a9);
  int v9 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v9) {
    uint64_t v15 = v9 + 1;
  }
  else {
    uint64_t v15 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  }
  _MGLog((uint64_t)v15, 8114, @"(NfRestore): %s", v10, v11, v12, v13, v14, (char)__str);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    uint64_t v17 = __str;
    _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "(NfRestore): %s", buf, 0xCu);
  }
}

BOOL sub_19D737810()
{
  CFLocaleRef v0 = CFLocaleCopyCurrent();
  if (!v0)
  {
    uint64_t v12 = sub_19D71EF70("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
    _MGLog((uint64_t)v12, 8982, @"locale is NULL", v13, v14, v15, v16, v17, v39);
    BOOL v10 = 0;
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
      return v10;
    }
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "locale is NULL", buf, 2u);
    return 0;
  }
  CFLocaleRef v1 = v0;
  CFStringRef Value = (const __CFString *)CFLocaleGetValue(v0, (CFLocaleKey)*MEMORY[0x1E4F1D1F0]);
  if (!Value)
  {
    uint64_t v18 = sub_19D71EF70("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
    _MGLog((uint64_t)v18, 8984, @"country code is NULL", v19, v20, v21, v22, v23, v39);
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_22;
    }
    __int16 v41 = 0;
    int v24 = MEMORY[0x1E4F14500];
    CFIndex v25 = "country code is NULL";
    int v26 = (uint8_t *)&v41;
LABEL_21:
    _os_log_impl(&dword_19D70E000, v24, OS_LOG_TYPE_DEFAULT, v25, v26, 2u);
    goto LABEL_22;
  }
  CFStringRef v3 = Value;
  CFTypeID v4 = CFGetTypeID(Value);
  if (v4 != CFStringGetTypeID())
  {
    int v27 = sub_19D71EF70("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
    _MGLog((uint64_t)v27, 8985, @"country code is unpexpected type", v28, v29, v30, v31, v32, v39);
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_22;
    }
    __int16 v40 = 0;
    int v24 = MEMORY[0x1E4F14500];
    CFIndex v25 = "country code is unpexpected type";
    int v26 = (uint8_t *)&v40;
    goto LABEL_21;
  }
  uint64_t v5 = sub_19D718564(v3);
  if (!v5)
  {
    uint64_t v33 = sub_19D71EF70("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
    _MGLog((uint64_t)v33, 8987, @"failed to copy country code", v34, v35, v36, v37, v38, v39);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      __int16 v39 = 0;
      int v24 = MEMORY[0x1E4F14500];
      CFIndex v25 = "failed to copy country code";
      int v26 = (uint8_t *)&v39;
      goto LABEL_21;
    }
LABEL_22:
    CFRelease(v1);
    return 0;
  }
  uint64_t v6 = v5;
  if (!strcmp(v5, "AT"))
  {
    BOOL v10 = 1;
  }
  else
  {
    unint64_t v7 = 0;
    do
    {
      unint64_t v8 = v7;
      if (v7 == 30) {
        break;
      }
      int v9 = strcmp(v6, off_1E5962E50[v7 + 1]);
      unint64_t v7 = v8 + 1;
    }
    while (v9);
    BOOL v10 = v8 < 0x1E;
  }
  CFRelease(v1);
  free(v6);
  return v10;
}

void sub_19D737A60()
{
  CFLocaleRef v0 = dlopen("/usr/lib/libFDR.dylib", 1);
  if (v0)
  {
    CFLocaleRef v1 = v0;
    off_1E9449350 = (uint64_t (*)(void, void))dlsym(v0, "AMFDRCreateWithOptions");
    off_1E9449358 = (uint64_t (*)(void, void))dlsym(v1, "AMFDRSealingMapVerifySealing");
  }
  else
  {
    CFDataRef v2 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v2) {
      unint64_t v8 = v2 + 1;
    }
    else {
      unint64_t v8 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog((uint64_t)v8, 5246, @"Unable to dlopen /usr/lib/libFDR.dylib", v3, v4, v5, v6, v7, v9[0]);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v9 = 0;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Unable to dlopen /usr/lib/libFDR.dylib", v9, 2u);
    }
  }
}

uint64_t sub_19D737B38(uint64_t a1, uint64_t a2, void *a3)
{
  char v11 = 0;
  int v10 = 0;
  uint64_t v5 = off_1E9449170;
  uint64_t v6 = (uint64_t (*)(uint64_t, void, char *, int *))*((void *)off_1E9449170 + 21);
  if (!v6)
  {
    uint64_t v6 = (uint64_t (*)(uint64_t, void, char *, int *))sub_19D71A930(21, 2);
    uint64_t v5 = off_1E9449170;
  }
  uint64_t v7 = (void *)v5[56];
  if (!v7) {
    uint64_t v7 = (void *)sub_19D71A930(56, 1);
  }
  uint64_t result = v6(a2, *v7, &v11, &v10);
  int v9 = (void *)MEMORY[0x1E4F1CFD0];
  if (v10 < 0) {
    int v9 = (void *)MEMORY[0x1E4F1CFC8];
  }
  *a3 = *v9;
  return result;
}

CFArrayRef sub_19D737BE4(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = a1[3];
  if (v8)
  {
    int v9 = a1[1];
    if ((*a1 & 0x80000000) == 0) {
      unsigned int v10 = *a1;
    }
    else {
      unsigned int v10 = -*a1;
    }
    if (v9 >= 0) {
      unsigned int v11 = a1[1];
    }
    else {
      unsigned int v11 = -v9;
    }
    if (v10 > v11) {
      int v12 = 1;
    }
    else {
      int v12 = a2;
    }
    if (v12) {
      int v13 = *a1;
    }
    else {
      int v13 = a1[1];
    }
    float v14 = (double)v13 / (double)v8;
    return sub_19D737CF0((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8, COERCE__INT64(v14));
  }
  else
  {
    uint64_t v16 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v16) {
      uint64_t v22 = v16 + 1;
    }
    else {
      uint64_t v22 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    }
    _MGLog((uint64_t)v22, 7793, @"Unexpected camera_offset scale, malformed data provided", v17, v18, v19, v20, v21, v23);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Unexpected camera_offset scale, malformed data provided", buf, 2u);
    }
    return 0;
  }
}

CFArrayRef sub_19D737CF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v18 = (double *)&a9;
  CFMutableStringRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  int v10 = 3;
  do
  {
    unsigned int v11 = v18++;
    float v12 = *v11;
    float valuePtr = v12;
    CFNumberRef v13 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
    if (v13)
    {
      CFNumberRef v14 = v13;
      CFArrayAppendValue(Mutable, v13);
      CFRelease(v14);
    }
    --v10;
  }
  while (v10);
  if (!Mutable) {
    return 0;
  }
  CFArrayRef Copy = CFArrayCreateCopy(0, Mutable);
  CFRelease(Mutable);
  return Copy;
}

uint64_t sub_19D737DB4(uint64_t a1, uint64_t a2, void *a3)
{
  char v10 = 0;
  uint64_t v5 = off_1E9449170;
  uint64_t v6 = (uint64_t (*)(uint64_t, void, char *))*((void *)off_1E9449170 + 3);
  if (!v6)
  {
    uint64_t v6 = (uint64_t (*)(uint64_t, void, char *))sub_19D71A930(3, 2);
    uint64_t v5 = off_1E9449170;
  }
  uint64_t v7 = (void *)v5[54];
  if (!v7) {
    uint64_t v7 = (void *)sub_19D71A930(54, 1);
  }
  uint64_t result = v6(a2, *v7, &v10);
  int v9 = (void *)MEMORY[0x1E4F1CFD0];
  if (!v10) {
    int v9 = (void *)MEMORY[0x1E4F1CFC8];
  }
  *a3 = *v9;
  return result;
}

void sub_19D737E58(uint64_t a1, uint64_t a2)
{
  io_registry_entry_t v2 = a2;
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  long long v58 = 0u;
  long long v59 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  *(_OWORD *)uint64_t v28 = 0u;
  long long v29 = 0u;
  if (!MEMORY[0x19F3AA070](a2, "IOService", v28))
  {
    uint64_t v4 = v28;
    if (*(unsigned __int16 *)v28 != 47)
    {
      uint64_t v5 = rindex(v28, 47);
      if (v5) {
        uint64_t v4 = v5 + 1;
      }
    }
    uint64_t v6 = index(v4, 64);
    if (v6) {
      *uint64_t v6 = 0;
    }
    CFStringRef v7 = CFStringCreateWithCString(0, v4, 0x8000100u);
    if (CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), v7))
    {
      unsigned int v8 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v8) {
        CFNumberRef v14 = v8 + 1;
      }
      else {
        CFNumberRef v14 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      }
      _MGLog((uint64_t)v14, 4220, @"already have calibration data for %@\n", v9, v10, v11, v12, v13, (char)v7);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        int v27 = (char *)v7;
        uint64_t v15 = MEMORY[0x1E4F14500];
        uint64_t v16 = "already have calibration data for %@\n";
LABEL_13:
        _os_log_impl(&dword_19D70E000, v15, OS_LOG_TYPE_DEFAULT, v16, buf, 0xCu);
      }
    }
    else
    {
      CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(v2, @"compass-calibration", 0, 0);
      if (CFProperty)
      {
        uint64_t v17 = CFProperty;
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), v7, CFProperty);
        if (!v7)
        {
LABEL_16:
          if (v17) {
            CFRelease(v17);
          }
          return;
        }
LABEL_15:
        CFRelease(v7);
        goto LABEL_16;
      }
      uint64_t v19 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v19) {
        CFIndex v25 = v19 + 1;
      }
      else {
        CFIndex v25 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      }
      _MGLog((uint64_t)v25, 4226, @"couldn't get calibration data for %s\n", v20, v21, v22, v23, v24, (char)v28);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        int v27 = v28;
        uint64_t v15 = MEMORY[0x1E4F14500];
        uint64_t v16 = "couldn't get calibration data for %s\n";
        goto LABEL_13;
      }
    }
    uint64_t v17 = 0;
    if (!v7) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
}

void sub_19D7380B8()
{
  CFMutableStringRef Mutable = CFSetCreateMutable(0, 0, MEMORY[0x1E4F1D548]);
  CFLocaleRef v1 = off_1E9449170;
  io_registry_entry_t v2 = (void *)*((void *)off_1E9449170 + 52);
  if (!v2)
  {
    io_registry_entry_t v2 = (void *)sub_19D71A930(52, 1);
    CFLocaleRef v1 = off_1E9449170;
  }
  if (*v2)
  {
    uint64_t v3 = (const void **)v1[52];
    if (!v3) {
      uint64_t v3 = (const void **)sub_19D71A930(52, 1);
    }
    CFSetAddValue(Mutable, *v3);
    CFLocaleRef v1 = off_1E9449170;
  }
  uint64_t v4 = (void *)v1[53];
  if (!v4)
  {
    uint64_t v4 = (void *)sub_19D71A930(53, 1);
    CFLocaleRef v1 = off_1E9449170;
  }
  if (*v4)
  {
    uint64_t v5 = (const void **)v1[53];
    if (!v5) {
      uint64_t v5 = (const void **)sub_19D71A930(53, 1);
    }
    CFSetAddValue(Mutable, *v5);
    CFLocaleRef v1 = off_1E9449170;
  }
  uint64_t v6 = (void *)v1[76];
  if (!v6)
  {
    uint64_t v6 = (void *)sub_19D71A930(76, 1);
    CFLocaleRef v1 = off_1E9449170;
  }
  if (*v6)
  {
    CFStringRef v7 = (const void **)v1[76];
    if (!v7) {
      CFStringRef v7 = (const void **)sub_19D71A930(76, 1);
    }
    CFSetAddValue(Mutable, *v7);
    CFLocaleRef v1 = off_1E9449170;
  }
  unsigned int v8 = (void *)v1[77];
  if (!v8)
  {
    unsigned int v8 = (void *)sub_19D71A930(77, 1);
    CFLocaleRef v1 = off_1E9449170;
  }
  if (*v8)
  {
    uint64_t v9 = (const void **)v1[77];
    if (!v9) {
      uint64_t v9 = (const void **)sub_19D71A930(77, 1);
    }
    CFSetAddValue(Mutable, *v9);
    CFLocaleRef v1 = off_1E9449170;
  }
  uint64_t v10 = (void *)v1[78];
  if (!v10)
  {
    uint64_t v10 = (void *)sub_19D71A930(78, 1);
    CFLocaleRef v1 = off_1E9449170;
  }
  if (*v10)
  {
    uint64_t v11 = (const void **)v1[78];
    if (!v11) {
      uint64_t v11 = (const void **)sub_19D71A930(78, 1);
    }
    CFSetAddValue(Mutable, *v11);
    CFLocaleRef v1 = off_1E9449170;
  }
  uint64_t v12 = (void *)v1[79];
  if (!v12)
  {
    uint64_t v12 = (void *)sub_19D71A930(79, 1);
    CFLocaleRef v1 = off_1E9449170;
  }
  if (*v12)
  {
    uint64_t v13 = (const void **)v1[79];
    if (!v13) {
      uint64_t v13 = (const void **)sub_19D71A930(79, 1);
    }
    CFSetAddValue(Mutable, *v13);
    CFLocaleRef v1 = off_1E9449170;
  }
  CFNumberRef v14 = (void *)v1[80];
  if (!v14)
  {
    CFNumberRef v14 = (void *)sub_19D71A930(80, 1);
    CFLocaleRef v1 = off_1E9449170;
  }
  if (*v14)
  {
    uint64_t v15 = (const void **)v1[80];
    if (!v15) {
      uint64_t v15 = (const void **)sub_19D71A930(80, 1);
    }
    CFSetAddValue(Mutable, *v15);
    CFLocaleRef v1 = off_1E9449170;
  }
  uint64_t v16 = (void *)v1[84];
  if (!v16)
  {
    uint64_t v16 = (void *)sub_19D71A930(84, 1);
    CFLocaleRef v1 = off_1E9449170;
  }
  if (*v16)
  {
    uint64_t v17 = (const void **)v1[84];
    if (!v17) {
      uint64_t v17 = (const void **)sub_19D71A930(84, 1);
    }
    CFSetAddValue(Mutable, *v17);
    CFLocaleRef v1 = off_1E9449170;
  }
  uint64_t v18 = (void *)v1[85];
  if (!v18)
  {
    uint64_t v18 = (void *)sub_19D71A930(85, 1);
    CFLocaleRef v1 = off_1E9449170;
  }
  if (*v18)
  {
    uint64_t v19 = (const void **)v1[85];
    if (!v19) {
      uint64_t v19 = (const void **)sub_19D71A930(85, 1);
    }
    CFSetAddValue(Mutable, *v19);
    CFLocaleRef v1 = off_1E9449170;
  }
  uint64_t v20 = (void *)v1[86];
  if (!v20)
  {
    uint64_t v20 = (void *)sub_19D71A930(86, 1);
    CFLocaleRef v1 = off_1E9449170;
  }
  if (*v20)
  {
    uint64_t v21 = (const void **)v1[86];
    if (!v21) {
      uint64_t v21 = (const void **)sub_19D71A930(86, 1);
    }
    CFSetAddValue(Mutable, *v21);
    CFLocaleRef v1 = off_1E9449170;
  }
  uint64_t v22 = (void *)v1[87];
  if (!v22)
  {
    uint64_t v22 = (void *)sub_19D71A930(87, 1);
    CFLocaleRef v1 = off_1E9449170;
  }
  if (*v22)
  {
    uint64_t v23 = (const void **)v1[87];
    if (!v23) {
      uint64_t v23 = (const void **)sub_19D71A930(87, 1);
    }
    CFSetAddValue(Mutable, *v23);
    CFLocaleRef v1 = off_1E9449170;
  }
  uint64_t v24 = (void *)v1[88];
  if (!v24)
  {
    uint64_t v24 = (void *)sub_19D71A930(88, 1);
    CFLocaleRef v1 = off_1E9449170;
  }
  if (*v24)
  {
    CFIndex v25 = (const void **)v1[88];
    if (!v25) {
      CFIndex v25 = (const void **)sub_19D71A930(88, 1);
    }
    CFSetAddValue(Mutable, *v25);
    CFLocaleRef v1 = off_1E9449170;
  }
  int v26 = (void *)v1[89];
  if (!v26) {
    int v26 = (void *)sub_19D71A930(89, 1);
  }
  if (*v26)
  {
    int v27 = (const void **)*((void *)off_1E9449170 + 89);
    if (!v27) {
      int v27 = (const void **)sub_19D71A930(89, 1);
    }
    CFSetAddValue(Mutable, *v27);
  }
  qword_1E94493F8 = (uint64_t)Mutable;
}

void *sub_19D738490()
{
  if (!sub_19D738B5C()) {
    return 0;
  }
  CFLocaleRef v0 = (void *)sub_19D738B5C();
  if (v0) {
    CFLocaleRef v0 = (void *)sub_19D7385C4();
  }
  CFLocaleRef v1 = [objc_msgSend(objc_msgSend(v0, "embeddedSecureElement"), "info")];
  uint64_t v2 = objc_opt_new();
  uint64_t v3 = (void *)v2;
  if (v1 && v2)
  {
    uint64_t v4 = [v1 OSVersion];
    uint64_t v5 = [v1 firmwareVersion];
    uint64_t v6 = [v1 hardwareVersion];
    uint64_t v7 = [NSNumber numberWithUnsignedInteger:v5];
    [v3 setObject:v7 forKeyedSubscript:@"FirmwareVersion"];
    uint64_t v8 = [NSNumber numberWithUnsignedInteger:v6];
    [v3 setObject:v8 forKeyedSubscript:@"HardwareVersion"];
    uint64_t v9 = [NSNumber numberWithUnsignedInteger:v4];
    [v3 setObject:v9 forKeyedSubscript:@"OSVersion"];
  }
  return v3;
}

uint64_t sub_19D7385C4()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x3052000000;
  uint64_t v6 = sub_19D738CA0;
  uint64_t v7 = sub_19D738CB0;
  uint64_t v0 = qword_1E9449378;
  uint64_t v8 = qword_1E9449378;
  if (!qword_1E9449378)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 3221225472;
    v2[2] = sub_19D738CBC;
    v2[3] = &unk_1E59631B0;
    v2[4] = &v3;
    sub_19D738CBC((uint64_t)v2);
    uint64_t v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_19D73869C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_19D7386B4()
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id result = (id)sub_19D738B5C();
  if (result)
  {
    if (sub_19D738B5C())
    {
      uint64_t v14 = 0;
      uint64_t v15 = &v14;
      uint64_t v16 = 0x3052000000;
      uint64_t v17 = sub_19D738CA0;
      uint64_t v18 = sub_19D738CB0;
      CFLocaleRef v1 = (void *)qword_1E9449370;
      uint64_t v19 = qword_1E9449370;
      if (!qword_1E9449370)
      {
        v13[0] = MEMORY[0x1E4F143A8];
        v13[1] = 3221225472;
        void v13[2] = sub_19D738D58;
        v13[3] = &unk_1E59631B0;
        v13[4] = &v14;
        sub_19D738D58((uint64_t)v13);
        CFLocaleRef v1 = (void *)v15[5];
      }
      _Block_object_dispose(&v14, 8);
    }
    else
    {
      CFLocaleRef v1 = 0;
    }
    id result = (id)[v1 sharedHardwareManager];
    if (result)
    {
      uint64_t v2 = (void *)[result secureElements];
      uint64_t v3 = v2;
      if (!v2) {
        return 0;
      }
      id result = (id)[v2 count];
      if (!result) {
        return result;
      }
      long long v11 = 0u;
      long long v12 = 0u;
      long long v9 = 0u;
      long long v10 = 0u;
      uint64_t v4 = [v3 countByEnumeratingWithState:&v9 objects:v20 count:16];
      if (v4)
      {
        uint64_t v5 = *(void *)v10;
        while (2)
        {
          uint64_t v6 = 0;
          do
          {
            if (*(void *)v10 != v5) {
              objc_enumerationMutation(v3);
            }
            uint64_t v7 = (void *)[*(id *)(*((void *)&v9 + 1) + 8 * v6) info];
            uint64_t v8 = v7;
            if (v7 && [v7 personalisable]) {
              return (id)[v8 manifestQuery];
            }
            ++v6;
          }
          while (v4 != v6);
          uint64_t v4 = [v3 countByEnumeratingWithState:&v9 objects:v20 count:16];
          id result = 0;
          if (v4) {
            continue;
          }
          break;
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

void sub_19D7388B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_19D7388D8()
{
  if (!sub_19D738B5C()) {
    return 0;
  }
  uint64_t v0 = (void *)sub_19D738B5C();
  if (v0) {
    uint64_t v0 = (void *)sub_19D7385C4();
  }
  CFLocaleRef v1 = [objc_msgSend((id)objc_msgSend(v0, "embeddedSecureElement"), "info")
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (void *)[v1 serialNumber];
  id v3 = v2;
  return v2;
}

void *sub_19D738934()
{
  if (!sub_19D738B5C()) {
    return 0;
  }
  uint64_t v0 = (void *)sub_19D738B5C();
  if (v0) {
    uint64_t v0 = (void *)sub_19D7385C4();
  }
  CFLocaleRef v1 = [objc_msgSend((id)objc_msgSend(v0, "icefallSecureElement"), "info");
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (void *)[v1 serialNumber];
  id v3 = v2;
  return v2;
}

uint64_t sub_19D738990()
{
  uint64_t result = sub_19D738B5C();
  if (result)
  {
    CFLocaleRef v1 = (void *)sub_19D738B5C();
    if (v1) {
      CFLocaleRef v1 = (void *)sub_19D7385C4();
    }
    return [v1 icefallSecureElement] != 0;
  }
  return result;
}

uint64_t sub_19D7389CC()
{
  if (!sub_19D738B5C()) {
    return 0;
  }
  uint64_t v0 = (void *)sub_19D738B5C();
  if (v0) {
    uint64_t v0 = (void *)sub_19D7385C4();
  }
  uint64_t v1 = [[(id)objc_msgSend(v0, "icefallSecureElement") info];
  if (!v1) {
    return 0;
  }

  return MEMORY[0x1F4181798](v1, sel_restrictedMode);
}

void *sub_19D738A24()
{
  uint64_t result = (void *)sub_19D738DB0();
  if (result)
  {
    if (sub_19D738DB0())
    {
      uint64_t v4 = 0;
      uint64_t v5 = &v4;
      uint64_t v6 = 0x3052000000;
      uint64_t v7 = sub_19D738CA0;
      uint64_t v8 = sub_19D738CB0;
      uint64_t v1 = (void *)qword_1EB2173D0;
      uint64_t v9 = qword_1EB2173D0;
      if (!qword_1EB2173D0)
      {
        v3[0] = MEMORY[0x1E4F143A8];
        v3[1] = 3221225472;
        v3[2] = sub_19D738EF4;
        v3[3] = &unk_1E59631B0;
        v3[4] = &v4;
        sub_19D738EF4((uint64_t)v3);
        uint64_t v1 = (void *)v5[5];
      }
      _Block_object_dispose(&v4, 8);
    }
    else
    {
      uint64_t v1 = 0;
    }
    uint64_t result = (void *)[v1 availableDevices];
    if (result)
    {
      uint64_t v2 = result;
      uint64_t result = (void *)[result count];
      if (result) {
        return (void *)([v2 firstObject].type == 2);
      }
    }
  }
  return result;
}

void sub_19D738B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_19D738B5C()
{
  if (!qword_1E9449348) {
    qword_1E9449348 = _sl_dlopen();
  }
  return qword_1E9449348;
}

uint64_t sub_19D738C2C()
{
  uint64_t result = _sl_dlopen();
  qword_1E9449348 = result;
  return result;
}

void sub_19D738CA0(uint64_t a1, uint64_t a2)
{
}

void sub_19D738CB0(uint64_t a1)
{
}

Class sub_19D738CBC(uint64_t a1)
{
  sub_19D738D14();
  Class result = objc_getClass("NFSecureElement");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    sub_19D76F37C();
  }
  qword_1E9449378 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

void sub_19D738D14()
{
  uint64_t v0 = 0;
  if (!sub_19D738B5C()) {
    sub_19D76F3E4(&v0);
  }
}

Class sub_19D738D58(uint64_t a1)
{
  sub_19D738D14();
  Class result = objc_getClass("NFHardwareManager");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    sub_19D76F44C();
  }
  qword_1E9449370 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

uint64_t sub_19D738DB0()
{
  if (!qword_1EB2173C8) {
    qword_1EB2173C8 = _sl_dlopen();
  }
  return qword_1EB2173C8;
}

uint64_t sub_19D738E80()
{
  uint64_t result = _sl_dlopen();
  qword_1EB2173C8 = result;
  return result;
}

Class sub_19D738EF4(uint64_t a1)
{
  id v3 = 0;
  if (!sub_19D738DB0()) {
    sub_19D76F4B4(&v3);
  }
  Class result = objc_getClass("BKDeviceManager");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)) {
    sub_19D76F51C();
  }
  qword_1EB2173D0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  return result;
}

CFTypeRef sub_19D738F78(uint64_t a1, uint64_t a2, CFTypeID a3)
{
  v59[2] = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  uint64_t v6 = (uint64_t (*)(uint64_t, __CFString *, dispatch_queue_global_t, void))*((void *)off_1E9449170 + 19);
  if (!v6) {
    uint64_t v6 = (uint64_t (*)(uint64_t, __CFString *, dispatch_queue_global_t, void))sub_19D71A930(19, 2);
  }
  uint64_t v7 = *MEMORY[0x1E4F1CF80];
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(0, 0);
  uint64_t v9 = v6(v7, @"com.apple.mobilegestalt", global_queue, 0);
  if (v9)
  {
    long long v10 = (const void *)v9;
    unint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *))(a2 + 16))(a2, v9, &cf);
    int v12 = v11;
    if (!v11)
    {
      if (cf)
      {
        CFTypeID v23 = CFGetTypeID(cf);
        if (v23 == a3)
        {
          CFTypeRef v22 = cf;
          CFTypeRef cf = 0;
          goto LABEL_27;
        }
        CFTypeID v43 = v23;
        CFStringRef v44 = CFCopyTypeIDDescription(a3);
        CFStringRef v45 = CFCopyTypeIDDescription(v43);
        long long v46 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c", 47);
        if (v46) {
          long long v52 = v46 + 1;
        }
        else {
          long long v52 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c";
        }
        _MGLog((uint64_t)v52, 67, @"%s: CommCenter result should have been %@ but was %@", v47, v48, v49, v50, v51, a1);
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          uint64_t v56 = a1;
          __int16 v57 = 2112;
          *(void *)long long v58 = v44;
          *(_WORD *)&v58[8] = 2112;
          v59[0] = v45;
          _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%s: CommCenter result should have been %@ but was %@", buf, 0x20u);
        }
        if (v44) {
          CFRelease(v44);
        }
        if (v45) {
          CFRelease(v45);
        }
LABEL_26:
        CFTypeRef v22 = 0;
LABEL_27:
        CFRelease(v10);
        if (cf) {
          CFRelease(cf);
        }
        return v22;
      }
      long long v36 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c", 47);
      if (v36) {
        long long v42 = v36 + 1;
      }
      else {
        long long v42 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c";
      }
      _MGLog((uint64_t)v42, 58, @"%s: CommCenter failed to provide info but returned no error", v37, v38, v39, v40, v41, a1);
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_26;
      }
      *(_DWORD *)buf = 136315138;
      uint64_t v56 = a1;
      long long v32 = MEMORY[0x1E4F14500];
      long long v33 = "%s: CommCenter failed to provide info but returned no error";
      uint32_t v34 = 12;
LABEL_25:
      _os_log_impl(&dword_19D70E000, v32, OS_LOG_TYPE_DEFAULT, v33, buf, v34);
      goto LABEL_26;
    }
    unint64_t v13 = HIDWORD(v11);
    if (v11 == 2)
    {
      uint64_t v14 = mach_error_string(SHIDWORD(v11));
    }
    else
    {
      if (v11 != 1)
      {
        uint64_t v24 = "Unknown";
        goto LABEL_20;
      }
      uint64_t v14 = strerror(SHIDWORD(v11));
    }
    uint64_t v24 = v14;
LABEL_20:
    CFIndex v25 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c", 47);
    if (v25) {
      long long v31 = v25 + 1;
    }
    else {
      long long v31 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c";
    }
    _MGLog((uint64_t)v31, 53, @"%s: CommCenter error: %d:%d (%s)", v26, v27, v28, v29, v30, a1);
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_26;
    }
    *(_DWORD *)buf = 136315906;
    uint64_t v56 = a1;
    __int16 v57 = 1024;
    *(_DWORD *)long long v58 = v12;
    *(_WORD *)&v58[4] = 1024;
    *(_DWORD *)&v58[6] = v13;
    LOWORD(v59[0]) = 2080;
    *(void *)((char *)v59 + 2) = v24;
    long long v32 = MEMORY[0x1E4F14500];
    long long v33 = "%s: CommCenter error: %d:%d (%s)";
    uint32_t v34 = 34;
    goto LABEL_25;
  }
  uint64_t v15 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c", 47);
  if (v15) {
    uint64_t v21 = v15 + 1;
  }
  else {
    uint64_t v21 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c";
  }
  _MGLog((uint64_t)v21, 41, @"could not establish connection to CommCenter", v16, v17, v18, v19, v20, v53);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "could not establish connection to CommCenter", buf, 2u);
  }
  return 0;
}

CFTypeRef sub_19D739338(uint64_t a1, uint64_t a2, CFTypeID a3)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = sub_19D7393A4;
  v4[3] = &unk_1E59631E8;
  v4[4] = a2;
  return sub_19D738F78(a1, (uint64_t)v4, a3);
}

uint64_t sub_19D7393A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 32))(a2, a3);
}

const void *sub_19D7393B4(unint64_t a1, unint64_t a2)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  if (a1 | a2)
  {
    CFDictionaryRef theDict = 0;
    if (!MGGetBoolAnswer((const char **)@"8DHlxr5ECKhTSL3HmlZQGQ"))
    {
      uint64_t v4 = (const char *)sub_19D71ED28();
      if (v4)
      {
        CFStringRef v5 = CFStringCreateWithCString(0, v4, 0x8000100u);
        if (v5)
        {
          CFStringRef v6 = v5;
          byte_1E9449490 = CFEqual(v5, @"darwinos-ramdisk");
          CFRelease(v6);
        }
      }
      if (!byte_1E9449490) {
        goto LABEL_26;
      }
      if (qword_1E94494A0 != -1) {
        dispatch_once(&qword_1E94494A0, &unk_1EEF8F718);
      }
      if (!qword_1E9449498)
      {
LABEL_26:
        uint64_t v20 = *((void *)off_1E9449170 + 10);
        if (!v20) {
          uint64_t v20 = sub_19D71A930(10, 2);
        }
        CFTypeID TypeID = CFDictionaryGetTypeID();
        *(void *)buf = MEMORY[0x1E4F143A8];
        *(void *)&buf[8] = 0x40000000;
        *(void *)&uint8_t buf[16] = sub_19D7393A4;
        uint64_t v60 = &unk_1E59631E8;
        uint64_t v61 = v20;
        CFDictionaryRef v22 = (const __CFDictionary *)sub_19D738F78((uint64_t)"_CTServerConnectionCopyFirmwareSecurityInfo", (uint64_t)buf, TypeID);
        CFDictionaryRef theDict = v22;
        if (!v22) {
          goto LABEL_48;
        }
        goto LABEL_29;
      }
    }
    if (qword_1E9449488 != -1) {
      dispatch_once(&qword_1E9449488, &unk_1EEF8F5F8);
    }
    if (!off_1E9449470) {
      goto LABEL_48;
    }
    if (!off_1E9449478) {
      goto LABEL_48;
    }
    if (!off_1E9449480) {
      goto LABEL_48;
    }
    uint64_t v7 = off_1E9449470();
    if (!v7) {
      goto LABEL_48;
    }
    uint64_t v8 = (const void *)v7;
    CFDictionaryRef v9 = CFDictionaryCreate(0, 0, 0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!v9)
    {
LABEL_47:
      CFRelease(v8);
      CFDictionaryRef v22 = theDict;
      if (!theDict)
      {
LABEL_48:
        uint64_t v41 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c", 47);
        if (v41) {
          uint64_t v47 = v41 + 1;
        }
        else {
          uint64_t v47 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c";
        }
        _MGLog((uint64_t)v47, 198, @"No CT security info dictionary", v42, v43, v44, v45, v46, v56);
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "No CT security info dictionary", buf, 2u);
        }
        return 0;
      }
LABEL_29:
      CFStringRef Value = CFDictionaryGetValue(v22, (const void *)a1);
      if (Value)
      {
LABEL_30:
        CFRetain(Value);
LABEL_62:
        CFRelease(theDict);
        return Value;
      }
      if (a2)
      {
        CFStringRef Value = CFDictionaryGetValue(theDict, (const void *)a2);
        if (Value) {
          goto LABEL_30;
        }
        uint64_t v24 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c", 47);
        if (v24) {
          uint64_t v30 = v24 + 1;
        }
        else {
          uint64_t v30 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c";
        }
        _MGLog((uint64_t)v30, 189, @"No %@ or %@ in CT security info dictionary", v25, v26, v27, v28, v29, a1);
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
        {
LABEL_61:
          CFStringRef Value = 0;
          goto LABEL_62;
        }
        *(_DWORD *)buf = 138412546;
        *(void *)&uint8_t buf[4] = a1;
        *(_WORD *)&uint8_t buf[12] = 2112;
        *(void *)&buf[14] = a2;
        long long v31 = MEMORY[0x1E4F14500];
        long long v32 = "No %@ or %@ in CT security info dictionary";
        uint32_t v33 = 22;
      }
      else
      {
        uint64_t v49 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c", 47);
        if (v49) {
          long long v55 = v49 + 1;
        }
        else {
          long long v55 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c";
        }
        _MGLog((uint64_t)v55, 185, @"No %@ in CT security info dictionary", v50, v51, v52, v53, v54, a1);
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_61;
        }
        *(_DWORD *)buf = 138412290;
        *(void *)&uint8_t buf[4] = a1;
        long long v31 = MEMORY[0x1E4F14500];
        long long v32 = "No %@ in CT security info dictionary";
        uint32_t v33 = 12;
      }
      _os_log_impl(&dword_19D70E000, v31, OS_LOG_TYPE_DEFAULT, v32, buf, v33);
      goto LABEL_61;
    }
    CFDictionaryRef v10 = v9;
    CFTypeRef cf = 0;
    if (!off_1E9449478(v8, v9, &cf) || cf)
    {
      uint32_t v34 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c", 47);
      if (v34) {
        uint64_t v40 = v34 + 1;
      }
      else {
        uint64_t v40 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c";
      }
      _MGLog((uint64_t)v40, 163, @"BBUpdaterSetOptions failed: %@", v35, v36, v37, v38, v39, (char)cf);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        *(void *)&uint8_t buf[4] = cf;
        uint64_t v18 = MEMORY[0x1E4F14500];
        uint64_t v19 = "BBUpdaterSetOptions failed: %@";
        goto LABEL_43;
      }
    }
    else
    {
      if (off_1E9449480(v8, @"CopyIdentifier", &theDict, &cf) && !cf)
      {
LABEL_46:
        CFRelease(v10);
        goto LABEL_47;
      }
      unint64_t v11 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c", 47);
      if (v11) {
        uint64_t v17 = v11 + 1;
      }
      else {
        uint64_t v17 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c";
      }
      _MGLog((uint64_t)v17, 167, @"BBUpdaterExecCommand(CopyIdentifier) failed: %@", v12, v13, v14, v15, v16, (char)cf);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        *(void *)&uint8_t buf[4] = cf;
        uint64_t v18 = MEMORY[0x1E4F14500];
        uint64_t v19 = "BBUpdaterExecCommand(CopyIdentifier) failed: %@";
LABEL_43:
        _os_log_impl(&dword_19D70E000, v18, OS_LOG_TYPE_DEFAULT, v19, buf, 0xCu);
      }
    }
    if (cf) {
      CFRelease(cf);
    }
    goto LABEL_46;
  }
  return 0;
}

void sub_19D7398F8()
{
  if (qword_1E94494A0 != -1) {
    dispatch_once(&qword_1E94494A0, &unk_1EEF8F718);
  }
  uint64_t v0 = (void *)qword_1E9449498;
  if (qword_1E9449498)
  {
    off_1E9449470 = (uint64_t (*)(void))dlsym((void *)qword_1E9449498, "BBUpdaterExtremeCreate");
    off_1E9449478 = (uint64_t (*)(void, void, void))dlsym(v0, "BBUpdaterSetOptions");
    off_1E9449480 = (uint64_t (*)(void, void, void, void))dlsym(v0, "BBUpdaterExecCommand");
  }
}

CFTypeRef sub_19D739990(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  CFStringRef v6 = sub_19D71DE74(a1);
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))*((void *)off_1E9449170 + 27);
  if (!v7) {
    uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))sub_19D71A930(27, 2);
  }
  CFStringRef v8 = (const __CFString *)v7(a1, a3);
  CFStringRef v9 = v8;
  if (!v8)
  {
    uint64_t v12 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c", 47);
    if (v12) {
      uint64_t v18 = v12 + 1;
    }
    else {
      uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c";
    }
    _MGLog((uint64_t)v18, 217, @"No %@ in CT mobile equipment info dictionary", v13, v14, v15, v16, v17, (char)v6);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v39 = v6;
      uint64_t v19 = MEMORY[0x1E4F14500];
      uint64_t v20 = "No %@ in CT mobile equipment info dictionary";
LABEL_16:
      _os_log_impl(&dword_19D70E000, v19, OS_LOG_TYPE_DEFAULT, v20, buf, 0xCu);
    }
LABEL_23:
    CFTypeRef v11 = 0;
    if (!v6) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (!a2) {
    goto LABEL_8;
  }
  CFTypeID v10 = CFGetTypeID(v8);
  if (v10 != CFStringGetTypeID())
  {
    CFTypeID v21 = CFGetTypeID(v9);
    CFStringRef v22 = CFCopyTypeIDDescription(v21);
    CFTypeID v23 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c", 47);
    if (v23) {
      uint64_t v29 = v23 + 1;
    }
    else {
      uint64_t v29 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c";
    }
    _MGLog((uint64_t)v29, 224, @"Non-string (%@) for %@ in CT mobile equipment info dictionary (%@)", v24, v25, v26, v27, v28, (char)v22);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412802;
      uint64_t v39 = (__CFString *)v22;
      __int16 v40 = 2112;
      uint64_t v41 = v6;
      __int16 v42 = 2112;
      CFStringRef v43 = v9;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Non-string (%@) for %@ in CT mobile equipment info dictionary (%@)", buf, 0x20u);
    }
    CFRelease(v22);
    goto LABEL_23;
  }
  if (!CFStringGetLength(v9))
  {
    long long v31 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c", 47);
    if (v31) {
      uint64_t v37 = v31 + 1;
    }
    else {
      uint64_t v37 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c";
    }
    _MGLog((uint64_t)v37, 229, @"Empty string for %@ in CT mobile equipment info dictionary", v32, v33, v34, v35, v36, (char)v6);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v39 = v6;
      uint64_t v19 = MEMORY[0x1E4F14500];
      uint64_t v20 = "Empty string for %@ in CT mobile equipment info dictionary";
      goto LABEL_16;
    }
    goto LABEL_23;
  }
LABEL_8:
  CFTypeRef v11 = CFRetain(v9);
  if (v6) {
LABEL_24:
  }
    CFRelease(v6);
LABEL_25:
  if (v9) {
    CFRelease(v9);
  }
  return v11;
}

CFTypeRef sub_19D739C38(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  CFStringRef v6 = sub_19D71DEC0(a1);
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))*((void *)off_1E9449170 + 47);
  if (!v7) {
    uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))sub_19D71A930(47, 2);
  }
  CFStringRef v8 = (const __CFString *)v7(a1, a3);
  CFStringRef v9 = v8;
  if (!v8)
  {
    uint64_t v12 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c", 47);
    if (v12) {
      uint64_t v18 = v12 + 1;
    }
    else {
      uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c";
    }
    _MGLog((uint64_t)v18, 257, @"No %@ sim status interface", v13, v14, v15, v16, v17, (char)v6);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v39 = v6;
      uint64_t v19 = MEMORY[0x1E4F14500];
      uint64_t v20 = "No %@ sim status interface";
LABEL_16:
      _os_log_impl(&dword_19D70E000, v19, OS_LOG_TYPE_DEFAULT, v20, buf, 0xCu);
    }
LABEL_23:
    CFTypeRef v11 = 0;
    if (!v6) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (!a2) {
    goto LABEL_8;
  }
  CFTypeID v10 = CFGetTypeID(v8);
  if (v10 != CFStringGetTypeID())
  {
    CFTypeID v21 = CFGetTypeID(v9);
    CFStringRef v22 = CFCopyTypeIDDescription(v21);
    CFTypeID v23 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c", 47);
    if (v23) {
      uint64_t v29 = v23 + 1;
    }
    else {
      uint64_t v29 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c";
    }
    _MGLog((uint64_t)v29, 264, @"Non-string (%@) for %@ in SIM status interface (%@)", v24, v25, v26, v27, v28, (char)v22);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412802;
      uint64_t v39 = (__CFString *)v22;
      __int16 v40 = 2112;
      uint64_t v41 = v6;
      __int16 v42 = 2112;
      CFStringRef v43 = v9;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Non-string (%@) for %@ in SIM status interface (%@)", buf, 0x20u);
    }
    CFRelease(v22);
    goto LABEL_23;
  }
  if (!CFStringGetLength(v9))
  {
    long long v31 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c", 47);
    if (v31) {
      uint64_t v37 = v31 + 1;
    }
    else {
      uint64_t v37 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c";
    }
    _MGLog((uint64_t)v37, 269, @"Empty string for %@ in in SIM status interface", v32, v33, v34, v35, v36, (char)v6);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v39 = v6;
      uint64_t v19 = MEMORY[0x1E4F14500];
      uint64_t v20 = "Empty string for %@ in in SIM status interface";
      goto LABEL_16;
    }
    goto LABEL_23;
  }
LABEL_8:
  CFTypeRef v11 = CFRetain(v9);
  if (v6) {
LABEL_24:
  }
    CFRelease(v6);
LABEL_25:
  if (v9) {
    CFRelease(v9);
  }
  return v11;
}

CFTypeRef sub_19D739EE0(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (uint64_t (*)(uint64_t))*((void *)off_1E9449170 + 42);
  if (!v2) {
    uint64_t v2 = (uint64_t (*)(uint64_t))sub_19D71A930(42, 2);
  }
  id v3 = (const void *)v2(a1);
  if (v3)
  {
    uint64_t v4 = v3;
    CFTypeRef v5 = CFRetain(v3);
    CFRelease(v4);
    return v5;
  }
  else
  {
    uint64_t v7 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c", 47);
    if (v7) {
      uint64_t v13 = v7 + 1;
    }
    else {
      uint64_t v13 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c";
    }
    _MGLog((uint64_t)v13, 290, @"Empty phone number for slot %ld.", v8, v9, v10, v11, v12, a1);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      uint64_t v15 = a1;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Empty phone number for slot %ld.", buf, 0xCu);
    }
    return 0;
  }
}

const void *sub_19D73A01C(const void *a1)
{
  CFTypeID TypeID = CFDictionaryGetTypeID();
  CFDictionaryRef v3 = (const __CFDictionary *)sub_19D738F78((uint64_t)"copyCTCapabilities", (uint64_t)&unk_1EEF8F738, TypeID);
  if (!v3) {
    return 0;
  }
  CFDictionaryRef v4 = v3;
  CFStringRef Value = CFDictionaryGetValue(v3, a1);
  CFStringRef v6 = Value;
  if (Value) {
    CFRetain(Value);
  }
  CFRelease(v4);
  return v6;
}

void sub_19D73A08C()
{
  qword_1E9449498 = (uint64_t)dlopen("/usr/lib/libBBUpdaterDynamic.dylib", 1);
  if (!qword_1E9449498)
  {
    uint64_t v0 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c", 47);
    if (v0) {
      CFStringRef v6 = v0 + 1;
    }
    else {
      CFStringRef v6 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c";
    }
    _MGLog((uint64_t)v6, 103, @"Unable to dlopen /usr/lib/libBBUpdaterDynamic.dylib", v1, v2, v3, v4, v5, v7[0]);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Unable to dlopen /usr/lib/libBBUpdaterDynamic.dylib", v7, 2u);
    }
  }
}

uint64_t sub_19D73A138(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  char v8 = 0;
  uint64_t v5 = (uint64_t (*)(uint64_t, CFTypeRef *, char *))*((void *)off_1E9449170 + 17);
  if (!v5) {
    uint64_t v5 = (uint64_t (*)(uint64_t, CFTypeRef *, char *))sub_19D71A930(17, 2);
  }
  uint64_t v6 = v5(a2, a3, &v8);
  if (!v8)
  {
    if (*a3) {
      CFRelease(*a3);
    }
    *a3 = 0;
  }
  return v6;
}

uint64_t sub_19D73A1BC(const char *a1, io_service_t *a2, io_connect_t *a3)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  io_connect_t connect = 0;
  CFDictionaryRef v6 = IOServiceMatching(a1);
  if (v6)
  {
    io_service_t MatchingService = IOServiceGetMatchingService(*MEMORY[0x1E4F2EEF0], v6);
    if (MatchingService)
    {
      io_service_t v8 = MatchingService;
      if (IOServiceOpen(MatchingService, *MEMORY[0x1E4F14960], 0, &connect))
      {
        uint64_t v9 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c", 47);
        if (v9) {
          uint64_t v15 = v9 + 1;
        }
        else {
          uint64_t v15 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
        }
        _MGLog((uint64_t)v15, 28, @"IOServiceOpen failed for class '%s'", v10, v11, v12, v13, v14, (char)a1);
        BOOL v16 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT);
        uint64_t result = 0;
        if (v16)
        {
          *(_DWORD *)buf = 136315138;
          __int16 v40 = a1;
          uint64_t v18 = MEMORY[0x1E4F14500];
          uint64_t v19 = "IOServiceOpen failed for class '%s'";
LABEL_14:
          uint32_t v28 = 12;
LABEL_20:
          _os_log_impl(&dword_19D70E000, v18, OS_LOG_TYPE_DEFAULT, v19, buf, v28);
          return 0;
        }
      }
      else
      {
        *a2 = v8;
        *a3 = connect;
        return 1;
      }
    }
    else
    {
      uint64_t v29 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c", 47);
      if (v29) {
        uint64_t v35 = v29 + 1;
      }
      else {
        uint64_t v35 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
      }
      _MGLog((uint64_t)v35, 26, @"IOServiceGetMatchingService failed", v30, v31, v32, v33, v34, v37);
      BOOL v36 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0;
      if (v36)
      {
        *(_WORD *)buf = 0;
        uint64_t v18 = MEMORY[0x1E4F14500];
        uint64_t v19 = "IOServiceGetMatchingService failed";
        uint32_t v28 = 2;
        goto LABEL_20;
      }
    }
  }
  else
  {
    uint64_t v20 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c", 47);
    if (v20) {
      uint64_t v26 = v20 + 1;
    }
    else {
      uint64_t v26 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
    }
    _MGLog((uint64_t)v26, 24, @"IOServiceMatching failed for %s", v21, v22, v23, v24, v25, (char)a1);
    BOOL v27 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (v27)
    {
      *(_DWORD *)buf = 136315138;
      __int16 v40 = a1;
      uint64_t v18 = MEMORY[0x1E4F14500];
      uint64_t v19 = "IOServiceMatching failed for %s";
      goto LABEL_14;
    }
  }
  return result;
}

uint64_t sub_19D73A3EC(io_iterator_t iterator, uint64_t a2)
{
  char v6 = 0;
  do
  {
    uint64_t result = IOIteratorNext(iterator);
    if (!result) {
      break;
    }
    io_object_t v5 = result;
    (*(void (**)(uint64_t, uint64_t, char *))(a2 + 16))(a2, result, &v6);
    uint64_t result = IOObjectRelease(v5);
  }
  while (!v6);
  return result;
}

void sub_19D73A45C(CFDictionaryRef matching, uint64_t a2)
{
  kern_return_t MatchingServices;
  io_iterator_t v4;
  BOOL v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint8_t v13[12];
  io_iterator_t existing;

  existing = 0;
  if (matching)
  {
    MatchingServices = IOServiceGetMatchingServices(*MEMORY[0x1E4F2EEF0], matching, &existing);
    uint64_t v4 = existing;
    if (MatchingServices) {
      io_object_t v5 = 1;
    }
    else {
      io_object_t v5 = existing == 0;
    }
    if (!v5)
    {
      sub_19D73A3EC(existing, a2);
      uint64_t v4 = existing;
    }
    if (v4) {
      IOObjectRelease(v4);
    }
  }
  else
  {
    char v6 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c", 47);
    if (v6) {
      uint64_t v12 = v6 + 1;
    }
    else {
      uint64_t v12 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
    }
    _MGLog((uint64_t)v12, 56, @"called with a NULL matching dictionary", v7, v8, v9, v10, v11, v13[0]);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "called with a NULL matching dictionary", v13, 2u);
    }
  }
}

uint64_t sub_19D73A53C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  io_object_t object = 0;
  int v4 = MEMORY[0x19F3AA050](a1, a2, &object);
  uint64_t result = object;
  if (!v4 && object)
  {
    sub_19D73A3EC(object, a3);
    uint64_t result = object;
  }
  if (result) {
    return IOObjectRelease(result);
  }
  return result;
}

BOOL sub_19D73A594(int a1, char *a2)
{
  io_object_t v2 = sub_19D712908(a1, a2);
  io_object_t v3 = v2;
  if (v2) {
    IOObjectRelease(v2);
  }
  return v3 != 0;
}

CFMutableDictionaryRef sub_19D73A5CC(int a1, char *a2)
{
  kern_return_t v5;
  mach_error_t v6;
  const char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  CFMutableDictionaryRef properties;
  uint8_t buf[4];
  char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  uint64_t v21 = *MEMORY[0x1E4F143B8];
  io_registry_entry_t v3 = sub_19D712908(a1, a2);
  if (!v3) {
    return 0;
  }
  io_object_t v4 = v3;
  properties = 0;
  io_object_t v5 = IORegistryEntryCreateCFProperties(v3, &properties, 0, 0);
  if (v5)
  {
    char v6 = v5;
    uint64_t v7 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
    io_service_t v8 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c", 47);
    if (v8) {
      uint64_t v7 = v8 + 1;
    }
    mach_error_string(v6);
    _MGLog((uint64_t)v7, 134, @"IORegistryEntryCreateCFProperties failed for '%s': %s", v9, v10, v11, v12, v13, (char)a2);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = mach_error_string(v6);
      *(_DWORD *)buf = 136315394;
      uint64_t v18 = a2;
      uint64_t v19 = 2080;
      uint64_t v20 = v14;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "IORegistryEntryCreateCFProperties failed for '%s': %s", buf, 0x16u);
    }
  }
  IOObjectRelease(v4);
  return properties;
}

CFTypeRef sub_19D73A700(int a1, char *a2, const __CFString *a3)
{
  io_registry_entry_t v4 = sub_19D712908(a1, a2);
  if (!v4) {
    return 0;
  }
  io_object_t v5 = v4;
  CFTypeRef v6 = IORegistryEntrySearchCFProperty(v4, "IOService", a3, (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1u);
  IOObjectRelease(v5);
  return v6;
}

uint64_t sub_19D73A764()
{
  uint64_t result = sub_19D73A7A8("AppleAuthCPRelay");
  if (!result)
  {
    return sub_19D73A7A8("AppleAuthCPAID");
  }
  return result;
}

uint64_t sub_19D73A7A8(const char *a1)
{
  uint64_t v5 = 0;
  CFTypeRef v6 = &v5;
  uint64_t v7 = 0x2000000000;
  uint64_t v8 = 0;
  CFDictionaryRef v1 = IOServiceMatching(a1);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = sub_19D73BC38;
  v4[3] = &unk_1E5963338;
  v4[4] = &v5;
  sub_19D73A45C(v1, (uint64_t)v4);
  uint64_t v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

BOOL sub_19D73A850(int a1, char *a2, const __CFString *a3)
{
  CFTypeRef v3 = sub_19D7128AC(a1, a2, a3);
  CFTypeRef v4 = v3;
  if (v3) {
    CFRelease(v3);
  }
  return v4 != 0;
}

CFTypeRef sub_19D73A888(char *a1)
{
  return sub_19D7128AC(1, a1, @"local-mac-address");
}

uint64_t sub_19D73A89C()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2000000000;
  uint64_t v7 = 0;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = sub_19D73A954;
  v3[3] = &unk_1E5963298;
  v3[4] = &v4;
  CFMutableDictionaryRef v0 = IOServiceMatching("IONetworkController");
  sub_19D73AEC8((uint64_t)v0, 5, (uint64_t)v3, 0);
  uint64_t v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

BOOL sub_19D73A954(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  io_object_t v14 = 0;
  int v3 = MEMORY[0x19F3AA030](a2, "IOService", 3, &v14);
  if (v3)
  {
    int v4 = v3;
    uint64_t v5 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c", 47);
    if (v5) {
      uint64_t v11 = v5 + 1;
    }
    else {
      uint64_t v11 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
    }
    _MGLog((uint64_t)v11, 258, @"unable to create parent iterator: 0x%x\n", v6, v7, v8, v9, v10, v4);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      int v16 = v4;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "unable to create parent iterator: 0x%x\n", buf, 8u);
    }
  }
  else
  {
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 0x40000000;
    void v13[2] = sub_19D73AACC;
    v13[3] = &unk_1E5963270;
    v13[4] = *(void *)(a1 + 32);
    sub_19D73A3EC(v14, (uint64_t)v13);
    IOObjectRelease(v14);
  }
  return *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) != 0;
}

void sub_19D73AACC(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  io_registry_entry_t v4 = a2;
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  memset(v18, 0, sizeof(v18));
  int v6 = MEMORY[0x19F3AA060](a2, v18);
  if (v6)
  {
    int v7 = v6;
    uint64_t v8 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c", 47);
    if (v8) {
      io_object_t v14 = v8 + 1;
    }
    else {
      io_object_t v14 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
    }
    _MGLog((uint64_t)v14, 250, @"unable to get parent entry's name: 0x%x\n", v9, v10, v11, v12, v13, v7);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      int v17 = v7;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "unable to get parent entry's name: 0x%x\n", buf, 8u);
    }
  }
  else if (!(LODWORD(v18[0]) ^ 0x6F696473 | BYTE4(v18[0])) {
         || !(LODWORD(v18[0]) ^ 0x6E616C77 | BYTE4(v18[0]))
  }
         || (*(void *)&v18[0] == 0x2D696E6F6372616DLL
           ? (BOOL v15 = *(void *)((char *)v18 + 5) == 0x696669772D696ELL)
           : (BOOL v15 = 0),
             !v15))
  {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = IORegistryEntryCreateCFProperty(v4, @"local-mac-address", (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  }
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    *a3 = 1;
  }
}

void sub_19D73AC88(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = dispatch_semaphore_create(0);
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(0, 0);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = sub_19D73AD50;
  block[3] = &unk_1E59632C0;
  int v11 = a1;
  block[4] = a2;
  block[5] = a3;
  block[6] = a4;
  block[7] = v8;
  dispatch_async(global_queue, block);
  dispatch_semaphore_wait(v8, 0xFFFFFFFFFFFFFFFFLL);
  dispatch_release(v8);
}

intptr_t sub_19D73AD50(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  Current = CFRunLoopGetCurrent();
  CFRunLoopAddCommonMode(Current, @"MobileGestaltRunLoopMode");
  if ((*(unsigned int (**)(void))(*(void *)(a1 + 32) + 16))())
  {
    do
    {
      do
        CFRunLoopRunResult v3 = CFRunLoopRunInMode(@"MobileGestaltRunLoopMode", (double)*(int *)(a1 + 64), 1u);
      while (v3 == kCFRunLoopRunHandledSource);
      CFRunLoopRunResult v4 = v3;
      uint64_t v5 = *(void *)(a1 + 40);
    }
    while (v5 && ((*(uint64_t (**)(void))(v5 + 16))() & 1) != 0);
    int v6 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c", 47);
    if (v6) {
      uint64_t v12 = v6 + 1;
    }
    else {
      uint64_t v12 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
    }
    _MGLog((uint64_t)v12, 309, @"giving up waiting for match - runloop result is %d\n", v7, v8, v9, v10, v11, v4);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      CFRunLoopRunResult v16 = v4;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "giving up waiting for match - runloop result is %d\n", buf, 8u);
    }
  }
  uint64_t v13 = *(void *)(a1 + 48);
  if (v13) {
    (*(void (**)(void))(v13 + 16))();
  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 56));
}

void sub_19D73AEC8(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  v7[0] = 0;
  v7[1] = v7;
  void v7[2] = 0x2000000000;
  int v8 = 0;
  v6[0] = 0;
  v6[1] = v6;
  v6[2] = 0x2000000000;
  v6[3] = 0;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = sub_19D73AFCC;
  v5[3] = &unk_1E59632E8;
  v5[4] = a3;
  void v5[5] = v6;
  void v5[6] = v7;
  v5[7] = a1;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = sub_19D73B214;
  v4[3] = &unk_1E5963310;
  v4[4] = v6;
  void v4[5] = v7;
  sub_19D73AC88(a2, (uint64_t)v5, a4, (uint64_t)v4);
  _Block_object_dispose(v6, 8);
  _Block_object_dispose(v7, 8);
}

BOOL sub_19D73AFCC(uint64_t a1, void *a2)
{
  kern_return_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  io_iterator_t v14;
  uint8_t buf[8];
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, unsigned char *);
  void *v19;
  void *v20;
  uint64_t v21;

  uint64_t v21 = *MEMORY[0x1E4F143B8];
  *a2 = *(void *)(a1 + 32);
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = IONotificationPortCreate(*MEMORY[0x1E4F2EEF0]);
  Current = CFRunLoopGetCurrent();
  RunLoopSource = IONotificationPortGetRunLoopSource(*(IONotificationPortRef *)(*(void *)(*(void *)(a1 + 40) + 8)
                                                                              + 24));
  CFRunLoopAddSource(Current, RunLoopSource, @"MobileGestaltRunLoopMode");
  int v6 = IOServiceAddMatchingNotification(*(IONotificationPortRef *)(*(void *)(*(void *)(a1 + 40) + 8) + 24), "IOServiceMatched", *(CFDictionaryRef *)(a1 + 56), (IOServiceMatchingCallback)sub_19D73B1A0, a2, (io_iterator_t *)(*(void *)(*(void *)(a1 + 48) + 8) + 24));
  if (v6)
  {
    uint64_t v7 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c", 47);
    if (v7) {
      uint64_t v13 = v7 + 1;
    }
    else {
      uint64_t v13 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
    }
    _MGLog((uint64_t)v13, 349, @"unable to register for match notifications: 0x%x\n", v8, v9, v10, v11, v12, v6);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v6;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "unable to register for match notifications: 0x%x\n", buf, 8u);
    }
  }
  else
  {
    io_object_t v14 = *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
    *(void *)buf = MEMORY[0x1E4F143A8];
    uint64_t v17 = 0x40000000;
    uint64_t v18 = sub_19D73BD10;
    uint64_t v19 = &unk_1E5963358;
    uint64_t v20 = a2;
    sub_19D73A3EC(v14, (uint64_t)buf);
  }
  return v6 == 0;
}

uint64_t sub_19D73B1A0(uint64_t a1, io_iterator_t iterator)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = sub_19D73BD10;
  v3[3] = &unk_1E5963358;
  v3[4] = a1;
  return sub_19D73A3EC(iterator, (uint64_t)v3);
}

uint64_t sub_19D73B214(uint64_t a1)
{
  uint64_t v2 = *(IONotificationPort **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (v2) {
    IONotificationPortDestroy(v2);
  }
  uint64_t result = *(unsigned int *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  if (result)
  {
    return IOObjectRelease(result);
  }
  return result;
}

uint64_t sub_19D73B274(int a1, char *a2, const __CFString *a3, uint64_t a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  CFDataRef v7 = (const __CFData *)sub_19D7128AC(a1, a2, a3);
  CFDataRef v8 = v7;
  if (v7)
  {
    CFTypeID v9 = CFGetTypeID(v7);
    if (v9 == CFDataGetTypeID() && CFDataGetLength(v8) == 4)
    {
      a4 = *(unsigned int *)CFDataGetBytePtr(v8);
LABEL_11:
      CFRelease(v8);
      return a4;
    }
  }
  uint64_t v10 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c", 47);
  if (v10) {
    CFRunLoopRunResult v16 = v10 + 1;
  }
  else {
    CFRunLoopRunResult v16 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
  }
  _MGLog((uint64_t)v16, 596, @"value for %@ property of %s is invalid (%@)", v11, v12, v13, v14, v15, (char)a3);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412802;
    CFStringRef v19 = a3;
    __int16 v20 = 2080;
    uint64_t v21 = a2;
    __int16 v22 = 2112;
    CFDataRef v23 = v8;
    _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "value for %@ property of %s is invalid (%@)", buf, 0x20u);
  }
  if (v8) {
    goto LABEL_11;
  }
  return a4;
}

CFDictionaryRef sub_19D73B3CC(const __CFString *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  CFDataRef v2 = (const __CFData *)sub_19D717CF8("IODeviceTree:/product/facetime", a1, 0);
  CFDataRef v3 = v2;
  if (v2)
  {
    CFTypeID v4 = CFGetTypeID(v2);
    if (v4 == CFDataGetTypeID() && CFDataGetLength(v3) == 8)
    {
      BytePtr = (unsigned __int16 *)CFDataGetBytePtr(v3);
      CFDictionaryRef v6 = sub_19D73B520(BytePtr);
LABEL_11:
      CFRelease(v3);
      return v6;
    }
  }
  CFDataRef v7 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c", 47);
  if (v7) {
    uint64_t v13 = v7 + 1;
  }
  else {
    uint64_t v13 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
  }
  _MGLog((uint64_t)v13, 662, @"unexpected %@ property %@", v8, v9, v10, v11, v12, (char)a1);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    CFStringRef v16 = a1;
    __int16 v17 = 2112;
    CFDataRef v18 = v3;
    _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "unexpected %@ property %@", buf, 0x16u);
  }
  CFDictionaryRef v6 = 0;
  CFDictionaryRef result = 0;
  if (v3) {
    goto LABEL_11;
  }
  return result;
}

CFDictionaryRef sub_19D73B520(unsigned __int16 *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  int v1 = *a1;
  int v2 = a1[2];
  int v9 = a1[3];
  int valuePtr = v1;
  int v8 = v2;
  CFNumberRef v3 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberIntType, &v9);
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberIntType, &v8);
  *(_OWORD *)keys = xmmword_1E5963378;
  uint64_t v13 = @"f";
  values[0] = v3;
  values[1] = v4;
  values[2] = v5;
  CFDictionaryRef v6 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, 3, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFRelease(v3);
  CFRelease(v4);
  CFRelease(v5);
  return v6;
}

__CFArray *sub_19D73B62C(const __CFString *a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  CFDataRef v2 = (const __CFData *)sub_19D717CF8("IODeviceTree:/product/facetime", a1, 0);
  CFDataRef v3 = v2;
  if (v2 && (CFTypeID v4 = CFGetTypeID(v2), v4 == CFDataGetTypeID()))
  {
    CFIndex Length = CFDataGetLength(v3);
    if ((Length & 7) != 0)
    {
      CFDictionaryRef v6 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c", 47);
      if (v6) {
        uint64_t v12 = v6 + 1;
      }
      else {
        uint64_t v12 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
      }
      _MGLog((uint64_t)v12, 689, @"%@ property has unexpected length %lu", v7, v8, v9, v10, v11, (char)a1);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412546;
        CFStringRef v27 = a1;
        __int16 v28 = 2048;
        CFIndex v29 = Length;
        _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%@ property has unexpected length %lu", buf, 0x16u);
      }
      CFMutableStringRef Mutable = 0;
      goto LABEL_17;
    }
    CFMutableStringRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    BytePtr = CFDataGetBytePtr(v3);
    if (Length < 1)
    {
LABEL_17:
      CFRelease(v3);
      return Mutable;
    }
    CFDataRef v23 = BytePtr;
    for (CFIndex i = 0; i < Length; i += 8)
    {
      CFDictionaryRef v25 = sub_19D73B520((unsigned __int16 *)&v23[i]);
      CFArrayAppendValue(Mutable, v25);
      CFRelease(v25);
    }
  }
  else
  {
    uint64_t v14 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c", 47);
    if (v14) {
      __int16 v20 = v14 + 1;
    }
    else {
      __int16 v20 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
    }
    _MGLog((uint64_t)v20, 683, @"Could not read %@ data property", v15, v16, v17, v18, v19, (char)a1);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      CFStringRef v27 = a1;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Could not read %@ data property", buf, 0xCu);
    }
    CFMutableStringRef Mutable = 0;
  }
  if (v3) {
    goto LABEL_17;
  }
  return Mutable;
}

CFDataRef sub_19D73B858(const char *a1, uint32_t a2, const void *a3, size_t a4, size_t a5)
{
  return sub_19D73B870(a1, a2, 0, 0, a3, a4, a5);
}

CFDataRef sub_19D73B870(const char *a1, uint32_t a2, const uint64_t *a3, uint32_t a4, const void *a5, size_t a6, size_t a7)
{
  kern_return_t v15;
  mach_error_t v16;
  const char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  CFDataRef v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  mach_port_t connection[2];
  CFIndex length;
  uint8_t buf[4];
  const char *v37;
  __int16 v38;
  uint32_t v39;
  __int16 v40;
  char *v41;
  uint64_t v42;

  __int16 v42 = *MEMORY[0x1E4F143B8];
  *(void *)connection = 0;
  length = a7;
  if (sub_19D73A1BC(a1, &connection[1], connection))
  {
    outputStruct = malloc_type_malloc(a7, 0x6AE770A1uLL);
    uint64_t v15 = IOConnectCallMethod(connection[0], a2, a3, a4, a5, a6, 0, 0, outputStruct, (size_t *)&length);
    if (v15)
    {
      uint64_t v16 = v15;
      uint64_t v17 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
      uint64_t v18 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c", 47);
      if (v18) {
        uint64_t v17 = v18 + 1;
      }
      mach_error_string(v16);
      _MGLog((uint64_t)v17, 739, @"IOConnectCallMethod(%s,%u) failed: %s", v19, v20, v21, v22, v23, (char)a1);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v24 = mach_error_string(v16);
        *(_DWORD *)buf = 136315650;
        char v37 = a1;
        uint64_t v38 = 1024;
        uint64_t v39 = a2;
        __int16 v40 = 2080;
        uint64_t v41 = v24;
        _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "IOConnectCallMethod(%s,%u) failed: %s", buf, 0x1Cu);
      }
      CFDictionaryRef v25 = 0;
    }
    else
    {
      CFDictionaryRef v25 = CFDataCreateWithBytesNoCopy(0, (const UInt8 *)outputStruct, length, (CFAllocatorRef)*MEMORY[0x1E4F1CF90]);
    }
  }
  else
  {
    uint64_t v26 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c", 47);
    if (v26) {
      uint64_t v32 = v26 + 1;
    }
    else {
      uint64_t v32 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
    }
    _MGLog((uint64_t)v32, 721, @"unable to connect to service %s", v27, v28, v29, v30, v31, (char)a1);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      char v37 = a1;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "unable to connect to service %s", buf, 0xCu);
    }
    CFDictionaryRef v25 = 0;
    outputStruct = 0;
  }
  if (connection[0]) {
    IOServiceClose(connection[0]);
  }
  if (connection[1]) {
    IOObjectRelease(connection[1]);
  }
  if (outputStruct && !v25) {
    free(outputStruct);
  }
  return v25;
}

CFDataRef sub_19D73BAD8(const char *a1, uint32_t a2, const uint64_t *a3, uint32_t a4, size_t a5)
{
  return sub_19D73B870(a1, a2, a3, a4, 0, 0, a5);
}

BOOL sub_19D73BAE8()
{
  CFTypeRef v0 = IOPSCopyPowerSourcesInfo();
  if (v0)
  {
    int v1 = v0;
    CFArrayRef v2 = IOPSCopyPowerSourcesList(v0);
    if (v2)
    {
      CFArrayRef v3 = v2;
      CFIndex Count = CFArrayGetCount(v2);
      if (Count < 1)
      {
        BOOL v7 = 0;
      }
      else
      {
        CFIndex v5 = Count;
        CFIndex v6 = 0;
        BOOL v7 = 1;
        do
        {
          CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v3, v6);
          if (ValueAtIndex)
          {
            CFDictionaryRef v9 = IOPSGetPowerSourceDescription(v1, ValueAtIndex);
            if (v9)
            {
              CFDictionaryRef v10 = v9;
              CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(v9, @"Is Present");
              if (Value)
              {
                CFBooleanRef v12 = Value;
                CFTypeID v13 = CFGetTypeID(Value);
                if (v13 == CFBooleanGetTypeID())
                {
                  if (CFBooleanGetValue(v12))
                  {
                    CFStringRef v14 = (const __CFString *)CFDictionaryGetValue(v10, @"Type");
                    if (v14)
                    {
                      CFStringRef v15 = v14;
                      CFTypeID v16 = CFGetTypeID(v14);
                      if (v16 == CFStringGetTypeID()
                        && CFEqual(v15, @"InternalBattery"))
                      {
                        break;
                      }
                    }
                  }
                }
              }
            }
          }
          BOOL v7 = ++v6 < v5;
        }
        while (v5 != v6);
      }
      CFRelease(v3);
    }
    else
    {
      BOOL v7 = 0;
    }
    CFRelease(v1);
  }
  else
  {
    return 0;
  }
  return v7;
}

void sub_19D73BC38(uint64_t a1, io_registry_entry_t entry, unsigned char *a3)
{
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFNumberRef CFProperty = (const __CFNumber *)IORegistryEntryCreateCFProperty(entry, @"flags", (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  if (CFProperty)
  {
    CFNumberRef v8 = CFProperty;
    CFTypeID v9 = CFGetTypeID(CFProperty);
    if (v9 == CFNumberGetTypeID())
    {
      int valuePtr = 0;
      CFNumberGetValue(v8, kCFNumberSInt32Type, &valuePtr);
      if ((~valuePtr & 0x30000) == 0)
      {
        *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = IORegistryEntryCreateCFProperty(entry, @"IDSN", v6, 0);
        *a3 = 1;
      }
    }
    CFRelease(v8);
  }
}

uint64_t sub_19D73BD10(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 16))();
  *(unsigned char *)(*(void *)(a1 + 32) + 8) = result;
  if (result) {
    *a3 = 1;
  }
  return result;
}

CFTypeRef sub_19D73BD5C()
{
  return sub_19D73BD68(@"AppleDiagnosticData");
}

CFTypeRef sub_19D73BD68(const __CFString *a1)
{
  CFTypeRef v2 = sub_19D7128AC(0, "AppleDiagnosticDataAccess", a1);
  if (!v2)
  {
    CFTypeRef v2 = sub_19D7128AC(0, "AppleDiagnosticDataAccessReadOnly", a1);
    if (!v2)
    {
      CFBooleanRef v12 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
      if (v12) {
        uint64_t v18 = v12 + 1;
      }
      else {
        uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      }
      _MGLog((uint64_t)v18, 122, @"Unable to read diagnostic data from service", v13, v14, v15, v16, v17, v19[0]);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Unable to read diagnostic data from service", buf, 2u);
      }
      return 0;
    }
  }
  CFTypeID v3 = CFGetTypeID(v2);
  if (v3 != CFDataGetTypeID())
  {
    CFTypeID v4 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    if (v4) {
      CFDictionaryRef v10 = v4 + 1;
    }
    else {
      CFDictionaryRef v10 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    }
    _MGLog((uint64_t)v10, 129, @"diagnostic data isn't chicken, it's beef!", v5, v6, v7, v8, v9, v19[0]);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "diagnostic data isn't chicken, it's beef!", v19, 2u);
    }
    CFRelease(v2);
    return 0;
  }
  return v2;
}

CFTypeRef sub_19D73BEC8()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2000000000;
  uint64_t v7 = 0;
  uint64_t v7 = sub_19D71A230("IODeviceTree:/chosen", @"syscfg-v2-data", 0);
  CFTypeRef v0 = (CFTypeRef)v5[3];
  if (!v0)
  {
    CFTypeRef v0 = sub_19D73BD68(@"AppleDiagnosticDataSysCfg");
    v5[3] = (uint64_t)v0;
    if (!v0)
    {
      if (sub_19D7174E8())
      {
        CFTypeRef v0 = 0;
      }
      else
      {
        CFTypeRef v0 = (CFTypeRef)v5[3];
        if (!v0)
        {
          CFMutableDictionaryRef v1 = IOServiceMatching("AppleDiagnosticDataAccessReadOnly");
          v3[0] = MEMORY[0x1E4F143A8];
          v3[1] = 0x40000000;
          v3[2] = sub_19D73BFE4;
          v3[3] = &unk_1E5963398;
          v3[4] = &v4;
          sub_19D73AEC8((uint64_t)v1, 5, (uint64_t)v3, 0);
          CFTypeRef v0 = (CFTypeRef)v5[3];
        }
      }
    }
  }
  _Block_object_dispose(&v4, 8);
  return v0;
}

uint64_t sub_19D73BFE4(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = sub_19D73BD68(@"AppleDiagnosticDataSysCfg");
  return 1;
}

const void *sub_19D73C020()
{
  if (!sub_19D7174E8()) {
    return 0;
  }

  return sub_19D71A230("IODeviceTree:/chosen", @"syscfg-vmpv-data", 0);
}

__CFData *sub_19D73C06C(unsigned int a1)
{
  kern_return_t v2;
  kern_return_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  NSObject *v11;
  const char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint32_t v20;
  __CFData *Mutable;
  kern_return_t v22;
  kern_return_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  char v46;
  uint32_t outputCnt;
  uint64_t output;
  mach_port_t connection[2];
  uint8_t buf[4];
  uint32_t v51;
  __int16 v52;
  int v53;
  __int16 v54;
  int v55;
  __int16 v56;
  int v57;
  __int16 v58;
  kern_return_t v59;
  uint64_t v60[3];
  uint64_t input[2];

  input[1] = *MEMORY[0x1E4F143B8];
  *(void *)connection = 0;
  if ((sub_19D73A1BC("AppleNVMeEAN", &connection[1], connection) & 1) == 0)
  {
    uint64_t v13 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    if (v13) {
      uint64_t v19 = v13 + 1;
    }
    else {
      uint64_t v19 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    }
    _MGLog((uint64_t)v19, 188, @"Could not open EAN service and connect", v14, v15, v16, v17, v18, v46);
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_28;
    }
    *(_WORD *)buf = 0;
    uint64_t v11 = MEMORY[0x1E4F14500];
    CFBooleanRef v12 = "Could not open EAN service and connect";
    __int16 v20 = 2;
    goto LABEL_27;
  }
  input[0] = a1;
  output = 0;
  outputCnt = 1;
  CFTypeRef v2 = IOConnectCallScalarMethod(connection[0], 3u, input, 1u, &output, &outputCnt);
  if (v2)
  {
    CFTypeID v3 = v2;
    uint64_t v4 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    if (v4) {
      CFDictionaryRef v10 = v4 + 1;
    }
    else {
      CFDictionaryRef v10 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    }
    _MGLog((uint64_t)v10, 206, @"Could not get size of EAN data (IOConnectCallScalarMethod kAppleNVMeEANGetSize returned 0x%X)", v5, v6, v7, v8, v9, v3);
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_28;
    }
    *(_DWORD *)buf = 67109120;
    uint64_t v51 = v3;
    uint64_t v11 = MEMORY[0x1E4F14500];
    CFBooleanRef v12 = "Could not get size of EAN data (IOConnectCallScalarMethod kAppleNVMeEANGetSize returned 0x%X)";
    goto LABEL_26;
  }
  if (outputCnt != 1)
  {
    uint64_t v31 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    if (v31) {
      char v37 = v31 + 1;
    }
    else {
      char v37 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    }
    _MGLog((uint64_t)v37, 213, @"Expected 1 output value for kAppleNVMeEANGetSize but got %d", v32, v33, v34, v35, v36, outputCnt);
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_28;
    }
    *(_DWORD *)buf = 67109120;
    uint64_t v51 = outputCnt;
    uint64_t v11 = MEMORY[0x1E4F14500];
    CFBooleanRef v12 = "Expected 1 output value for kAppleNVMeEANGetSize but got %d";
LABEL_26:
    __int16 v20 = 8;
LABEL_27:
    _os_log_impl(&dword_19D70E000, v11, OS_LOG_TYPE_DEFAULT, v12, buf, v20);
LABEL_28:
    CFMutableStringRef Mutable = 0;
    goto LABEL_29;
  }
  if (!output)
  {
    uint64_t v39 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    if (v39) {
      uint64_t v45 = v39 + 1;
    }
    else {
      uint64_t v45 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    }
    _MGLog((uint64_t)v45, 223, @"Size of EAN image '%c%c%c%c' is zero. Returning NULL", v40, v41, v42, v43, v44, SHIBYTE(a1));
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_28;
    }
    *(_DWORD *)buf = 67109888;
    uint64_t v51 = HIBYTE(a1);
    uint64_t v52 = 1024;
    uint64_t v53 = BYTE2(a1);
    uint64_t v54 = 1024;
    long long v55 = BYTE1(a1);
    char v56 = 1024;
    __int16 v57 = a1;
    uint64_t v11 = MEMORY[0x1E4F14500];
    CFBooleanRef v12 = "Size of EAN image '%c%c%c%c' is zero. Returning NULL";
    __int16 v20 = 26;
    goto LABEL_27;
  }
  CFMutableStringRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], output);
  CFDataSetLength(Mutable, output);
  v60[0] = a1;
  v60[1] = (uint64_t)CFDataGetMutableBytePtr(Mutable);
  v60[2] = output;
  __int16 v22 = IOConnectCallScalarMethod(connection[0], 4u, v60, 3u, 0, 0);
  if (v22)
  {
    CFDataRef v23 = v22;
    uint64_t v24 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    uint64_t v30 = v24
        ? v24 + 1
        : "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    _MGLog((uint64_t)v30, 246, @"Could not read EAN image '%c%c%c%c' (IOConnectCallScalarMethod kAppleNVMeEANRead returned 0x%X)", v25, v26, v27, v28, v29, SHIBYTE(a1));
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67110144;
      uint64_t v51 = HIBYTE(a1);
      uint64_t v52 = 1024;
      uint64_t v53 = BYTE2(a1);
      uint64_t v54 = 1024;
      long long v55 = BYTE1(a1);
      char v56 = 1024;
      __int16 v57 = a1;
      long long v58 = 1024;
      long long v59 = v23;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Could not read EAN image '%c%c%c%c' (IOConnectCallScalarMethod kAppleNVMeEANRead returned 0x%X)", buf, 0x20u);
    }
  }
LABEL_29:
  if (connection[0]) {
    IOServiceClose(connection[0]);
  }
  if (connection[1]) {
    IOObjectRelease(connection[1]);
  }
  return Mutable;
}

__CFData *sub_19D73C470(unsigned int a1)
{
  CFMutableDictionaryRef v1 = sub_19D73C06C(a1);
  CFTypeRef v2 = v1;
  if (v1)
  {
    CFIndex v3 = sub_19D73C4B0(v1);
    CFDataSetLength(v2, v3);
  }
  return v2;
}

CFIndex sub_19D73C4B0(const __CFData *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  v15[0] = CFDataGetBytePtr(a1);
  v15[1] = CFDataGetLength(a1);
  unint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  int v2 = sub_19D757218((uint64_t)v15, &v12, 0);
  if (!v2) {
    return v13 - v15[0] + v14;
  }
  int v3 = v2;
  uint64_t v4 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
  if (v4) {
    CFDictionaryRef v10 = v4 + 1;
  }
  else {
    CFDictionaryRef v10 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
  }
  _MGLog((uint64_t)v10, 1225, @"Failed to DERDecode the buffer with status: %d", v5, v6, v7, v8, v9, v3);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    int v17 = v3;
    _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Failed to DERDecode the buffer with status: %d", buf, 8u);
  }
  return CFDataGetLength(a1);
}

const void *sub_19D73C5D8()
{
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1E9449388);
  uint64_t v0 = qword_1E9449368;
  CFMutableDictionaryRef v1 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
  if (v1) {
    uint64_t v7 = v1 + 1;
  }
  else {
    uint64_t v7 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
  }
  if (v0)
  {
    _MGLog((uint64_t)v7, 302, @"%s returning previously initialized sysconfig dictionary", v2, v3, v4, v5, v6, (char)"CFDictionaryRef copySyscfgDictionary(void)");
    BOOL v8 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEBUG);
    if (v8) {
      sub_19D76F6FC(v8, v9, v10, v11, v12, v13, v14, v15);
    }
    CFArrayRef Copy = CFRetain((CFTypeRef)qword_1E9449368);
    goto LABEL_56;
  }
  _MGLog((uint64_t)v7, 307, @"%s creating new sysconfig dictionary", v2, v3, v4, v5, v6, (char)"CFDictionaryRef copySyscfgDictionary(void)");
  BOOL v17 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEBUG);
  if (v17) {
    sub_19D76F680(v17, v18, v19, v20, v21, v22, v23, v24);
  }
  CFDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v79 = 0;
  CFTypeRef cf = 0;
  unsigned int v78 = 0;
  long long v72 = (CFTypeRef *)sub_19D73CB28(&v78, (unsigned __int8 *)&v79);
  v77[0] = MEMORY[0x1E4F143A8];
  v77[1] = 0x40000000;
  v77[2] = sub_19D73D200;
  v77[3] = &unk_1E59633B8;
  v77[4] = Mutable;
  unsigned int v71 = v78;
  if (v78)
  {
    uint64_t v26 = MEMORY[0x1E4F14500];
    uint64_t v28 = v78;
    CFStringRef v27 = v72;
    do
    {
      int v29 = *((unsigned __int8 *)v27 + 16);
      uint64_t v30 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
      if (v30) {
        BOOL v36 = v30 + 1;
      }
      else {
        BOOL v36 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      }
      if (!v29)
      {
        _MGLog((uint64_t)v36, 336, @"%s skipping: %@. It is not allowed to be loaded.", v31, v32, v33, v34, v35, (char)"CFDictionaryRef copySyscfgDictionary(void)");
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
        {
          CFTypeRef v38 = v27[1];
          *(_DWORD *)buf = 136315394;
          long long v82 = "CFDictionaryRef copySyscfgDictionary(void)";
          __int16 v83 = 2112;
          CFTypeRef v84 = v38;
          _os_log_debug_impl(&dword_19D70E000, v26, OS_LOG_TYPE_DEBUG, "%s skipping: %@. It is not allowed to be loaded.", buf, 0x16u);
        }
        goto LABEL_35;
      }
      _MGLog((uint64_t)v36, 345, @"%s enumerating: %@", v31, v32, v33, v34, v35, (char)"CFDictionaryRef copySyscfgDictionary(void)");
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
      {
        CFTypeRef v47 = v27[1];
        *(_DWORD *)buf = 136315394;
        long long v82 = "CFDictionaryRef copySyscfgDictionary(void)";
        __int16 v83 = 2112;
        CFTypeRef v84 = v47;
        _os_log_debug_impl(&dword_19D70E000, v26, OS_LOG_TYPE_DEBUG, "%s enumerating: %@", buf, 0x16u);
      }
      unsigned int v37 = *(_DWORD *)v27;
      if (*(_DWORD *)v27 == 1986883702)
      {
        if ((sub_19D73DC50((uint64_t)v77) & 1) == 0) {
          goto LABEL_30;
        }
      }
      else if (v37 == 1936023916)
      {
        if ((sub_19D73D7DC((uint64_t)&v79, (uint64_t)v77) & 1) == 0) {
          goto LABEL_30;
        }
      }
      else if (v37 == 1094992961)
      {
        if (!sub_19D73D400((uint64_t)v77)) {
          goto LABEL_30;
        }
      }
      else if ((sub_19D73DC9C((uint64_t)&v79, (unsigned int *)v27, (uint64_t)v77) & 1) == 0)
      {
LABEL_30:
        uint64_t v39 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
        if (v39) {
          uint64_t v45 = v39 + 1;
        }
        else {
          uint64_t v45 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
        }
        _MGLog((uint64_t)v45, 373, @"%s enumeration of %@ failed.", v40, v41, v42, v43, v44, (char)"CFDictionaryRef copySyscfgDictionary(void)");
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          CFTypeRef v46 = v27[1];
          *(_DWORD *)buf = 136315394;
          long long v82 = "CFDictionaryRef copySyscfgDictionary(void)";
          __int16 v83 = 2112;
          CFTypeRef v84 = v46;
          _os_log_impl(&dword_19D70E000, v26, OS_LOG_TYPE_DEFAULT, "%s enumeration of %@ failed.", buf, 0x16u);
        }
      }
LABEL_35:
      v27 += 3;
      --v28;
    }
    while (v28);
  }
  v73[0] = MEMORY[0x1E4F143A8];
  v73[1] = 0x40000000;
  uint64_t v74 = sub_19D73DEF8;
  uint64_t v75 = &unk_1E59633D8;
  CFDictionaryRef v76 = Mutable;
  if (Mutable)
  {
    CFIndex Count = CFDictionaryGetCount(Mutable);
    uint64_t v49 = (const void **)malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
    CFDictionaryGetKeysAndValues(Mutable, v49, 0);
    CFIndex v50 = Count - 1;
    if (Count >= 1)
    {
      uint64_t v51 = v49;
      do
      {
        buf[0] = 0;
        uint64_t v52 = *v51++;
        CFBooleanRef Value = CFDictionaryGetValue(Mutable, v52);
        ((void (*)(void *, const void *, const void *, uint8_t *))v74)(v73, v52, Value, buf);
        if (buf[0]) {
          BOOL v54 = 1;
        }
        else {
          BOOL v54 = v50 == 0;
        }
        --v50;
      }
      while (!v54);
    }
    free(v49);
  }
  CFArrayRef Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], Mutable);
  sub_19D73E008(v72, v71);
  if (cf) {
    CFRelease(cf);
  }
  CFTypeRef cf = 0;
  LODWORD(v79) = 0;
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (MGGetBoolAnswer((const char **)@"8DHlxr5ECKhTSL3HmlZQGQ"))
  {
    long long v55 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    if (v55) {
      uint64_t v61 = v55 + 1;
    }
    else {
      uint64_t v61 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    }
    _MGLog((uint64_t)v61, 399, @"%s not caching sysconfig dictionary because device is in RestoreOS", v56, v57, v58, v59, v60, (char)"CFDictionaryRef copySyscfgDictionary(void)");
    BOOL v62 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEBUG);
    if (v62) {
      sub_19D76F604(v62, v63, v64, v65, v66, v67, v68, v69);
    }
  }
  else
  {
    qword_1E9449368 = (uint64_t)CFRetain(Copy);
  }
LABEL_56:
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1E9449388);
  return Copy;
}

void *sub_19D73CB28(_DWORD *a1, unsigned __int8 *a2)
{
  uint64_t v93 = *MEMORY[0x1E4F143B8];
  uint64_t v85 = 0;
  CFTypeRef cf = 0;
  if (a2) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = (unsigned __int8 *)&v85;
  }
  *((void *)v3 + 1) = 0;
  *(_DWORD *)uint64_t v3 = 0;
  if (!sub_19D73F83C())
  {
    uint64_t v22 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    if (v22) {
      uint64_t v28 = v22 + 1;
    }
    else {
      uint64_t v28 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    }
    _MGLog((uint64_t)v28, 663, @"EAN is not supported on this device. Building default policy.", v23, v24, v25, v26, v27, v82);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "EAN is not supported on this device. Building default policy.", buf, 2u);
    }
    *a1 = 0;
    goto LABEL_34;
  }
  CFDataRef v4 = (const __CFData *)sub_19D717CF8("IODeviceTree:/chosen", @"syscfg-erly-kbgs-allow-load", 0);
  CFDataRef v5 = (const __CFData *)sub_19D717CF8("IODeviceTree:/chosen", @"syscfg-erly-kbgs-data-class", 0);
  CFDataRef v6 = (const __CFData *)sub_19D717CF8("IODeviceTree:/chosen", @"syscfg-erly-kbgs-allow-unsealed", 0);
  CFDataRef v7 = v6;
  if (v4 && v5 && v6)
  {
    CFIndex Length = CFDataGetLength(v4);
    if (Length != CFDataGetLength(v5) || (CFIndex v9 = CFDataGetLength(v4), v9 != CFDataGetLength(v7)))
    {
      CFTypeRef v47 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
      if (v47) {
        uint64_t v48 = v47 + 1;
      }
      else {
        uint64_t v48 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      }
      char v49 = CFDataGetLength(v4);
      CFDataGetLength(v5);
      CFDataGetLength(v7);
      _MGLog((uint64_t)v48, 690, @"Lengths of 'syscfg-erly-kbgs-*' were not equal. earlyKeyBagsAllowLoad (%d) earlyKeyBagsDataClasses (%d) earlyKeyBagsAllowUnsealed (%d)", v50, v51, v52, v53, v54, v49);
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_54;
      }
      int v55 = CFDataGetLength(v4);
      int v56 = CFDataGetLength(v5);
      int v57 = CFDataGetLength(v7);
      *(_DWORD *)buf = 67109632;
      int v88 = v55;
      __int16 v89 = 1024;
      int v90 = v56;
      __int16 v91 = 1024;
      int v92 = v57;
      uint64_t v19 = MEMORY[0x1E4F14500];
      uint64_t v20 = "Lengths of 'syscfg-erly-kbgs-*' were not equal. earlyKeyBagsAllowLoad (%d) earlyKeyBagsDataClasses (%d) earl"
            "yKeyBagsAllowUnsealed (%d)";
      uint32_t v21 = 20;
      goto LABEL_53;
    }
    if (CFDataGetLength(v4) <= 0)
    {
      uint64_t v58 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
      if (v58) {
        uint64_t v64 = v58 + 1;
      }
      else {
        uint64_t v64 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      }
      _MGLog((uint64_t)v64, 696, @"Length of 'syscfg-erly-kbgs-allow-load' was 0", v59, v60, v61, v62, v63, v82);
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_54;
      }
      *(_WORD *)buf = 0;
      uint64_t v19 = MEMORY[0x1E4F14500];
      uint64_t v20 = "Length of 'syscfg-erly-kbgs-allow-load' was 0";
    }
    else
    {
      if ((CFDataGetLength(v4) & 3) != 0)
      {
        uint64_t v10 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
        if (v10) {
          uint64_t v11 = v10 + 1;
        }
        else {
          uint64_t v11 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
        }
        char v12 = CFDataGetLength(v4);
        _MGLog((uint64_t)v11, 702, @"Length of 'syscfg-erly-kbgs-allow-load' (%d) was not a multiple of (%d)", v13, v14, v15, v16, v17, v12);
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_54;
        }
        int v18 = CFDataGetLength(v4);
        *(_DWORD *)buf = 67109376;
        int v88 = v18;
        __int16 v89 = 1024;
        int v90 = 4;
        uint64_t v19 = MEMORY[0x1E4F14500];
        uint64_t v20 = "Length of 'syscfg-erly-kbgs-allow-load' (%d) was not a multiple of (%d)";
        uint32_t v21 = 14;
LABEL_53:
        _os_log_impl(&dword_19D70E000, v19, OS_LOG_TYPE_DEFAULT, v20, buf, v21);
LABEL_54:
        LODWORD(v37) = 0;
        BOOL v36 = 0;
        goto LABEL_55;
      }
      BytePtr = CFDataGetBytePtr(v4);
      uint64_t v66 = CFDataGetBytePtr(v5);
      uint64_t v67 = CFDataGetBytePtr(v7);
      if (sub_19D73E704(v3))
      {
        CFTypeRef v84 = (int *)v67;
        unint64_t v37 = (unint64_t)CFDataGetLength(v4) >> 2;
        BOOL v36 = malloc_type_calloc(v37, 0x18uLL, 0x10600407F5F6BDAuLL);
        if (v37)
        {
          __int16 v83 = (int *)BytePtr;
          uint64_t v68 = 0;
          do
          {
            unsigned int v69 = *(_DWORD *)v66;
            long long v70 = v66 + 4;
            unsigned int v71 = (char *)&v36[v68];
            LODWORD(v36[v68]) = v69;
            *(_DWORD *)buf = bswap32(v69);
            *((void *)v71 + 1) = CFStringCreateWithBytes(0, buf, 4, 0x8000100u, 0);
            int v72 = *v83++;
            v71[16] = sub_19D73E5A0(v72, v3);
            int v73 = *v84++;
            BOOL v74 = (sub_19D73E5A0(v73, v3) & 1) != 0 || v3[1] != 0;
            v71[17] = v74;
            v68 += 3;
            uint64_t v66 = v70;
          }
          while (3 * v37 != v68);
        }
        goto LABEL_55;
      }
      uint64_t v75 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
      if (v75) {
        int v81 = v75 + 1;
      }
      else {
        int v81 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      }
      _MGLog((uint64_t)v81, 711, @"Failed to copy APTicket properties. Falling back to default policy.", v76, v77, v78, v79, v80, v82);
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_54;
      }
      *(_WORD *)buf = 0;
      uint64_t v19 = MEMORY[0x1E4F14500];
      uint64_t v20 = "Failed to copy APTicket properties. Falling back to default policy.";
    }
    uint32_t v21 = 2;
    goto LABEL_53;
  }
  int v29 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
  if (v29) {
    uint64_t v35 = v29 + 1;
  }
  else {
    uint64_t v35 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
  }
  _MGLog((uint64_t)v35, 676, @"Failed to copy required 'syscfg-erly-kbgs-*' properties from the EDT", v30, v31, v32, v33, v34, v82);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Failed to copy required 'syscfg-erly-kbgs-*' properties from the EDT", buf, 2u);
  }
  BOOL v36 = 0;
  LODWORD(v37) = 0;
  if (!v4)
  {
    if (!v5) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
LABEL_55:
  CFRelease(v4);
  if (v5) {
LABEL_30:
  }
    CFRelease(v5);
LABEL_31:
  if (v7) {
    CFRelease(v7);
  }
  *a1 = v37;
  if (!v36)
  {
LABEL_34:
    CFTypeRef v38 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    if (v38) {
      uint64_t v44 = v38 + 1;
    }
    else {
      uint64_t v44 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    }
    _MGLog((uint64_t)v44, 621, @"Creating default MGSysConfigPolicy", v39, v40, v41, v42, v43, v82);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Creating default MGSysConfigPolicy", buf, 2u);
    }
    if (sub_19D7174E8()) {
      size_t v45 = 2;
    }
    else {
      size_t v45 = 1;
    }
    BOOL v36 = malloc_type_calloc(v45, 0x18uLL, 0x10600407F5F6BDAuLL);
    *(_DWORD *)BOOL v36 = 1094992961;
    *(_DWORD *)buf = 1094992961;
    v36[1] = CFStringCreateWithBytes(0, buf, 4, 0x8000100u, 0);
    *((_WORD *)v36 + 8) = 257;
    if (sub_19D7174E8())
    {
      *((_DWORD *)v36 + 6) = 1986883702;
      *(_DWORD *)buf = 1987079542;
      v36[4] = CFStringCreateWithBytes(0, buf, 4, 0x8000100u, 0);
      *((_WORD *)v36 + 20) = 257;
    }
    *((void *)v3 + 1) = 0;
    *(_DWORD *)uint64_t v3 = 0;
    *a1 = v45;
  }
  if (cf) {
    CFRelease(cf);
  }
  return v36;
}

void sub_19D73D200(uint64_t a1, unsigned int a2, unsigned int a3, const UInt8 *a4, CFIndex a5)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)bytes = bswap32(a3);
  CFStringRef v10 = CFStringCreateWithBytes(0, bytes, 4, 0x8000100u, 0);
  CFDataRef v11 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a4, a5);
  if (v10)
  {
    if (!CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), v10))
    {
      *(_DWORD *)bytes = bswap32(a2);
      CFStringRef v12 = CFStringCreateWithBytes(0, bytes, 4, 0x8000100u, 0);
      uint64_t v13 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
      if (v13) {
        uint64_t v19 = v13 + 1;
      }
      else {
        uint64_t v19 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      }
      _MGLog((uint64_t)v19, 324, @"Appending syscfg key (0x%X): %@ from %@", v14, v15, v16, v17, v18, a3);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEBUG)) {
        sub_19D76F778((uint64_t)v10, (uint64_t)v12, a3);
      }
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), v10, v11);
      if (v12) {
        CFRelease(v12);
      }
    }
    CFRelease(v10);
  }
  else
  {
    uint64_t v20 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    if (v20) {
      uint64_t v26 = v20 + 1;
    }
    else {
      uint64_t v26 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    }
    _MGLog((uint64_t)v26, 318, @"Failed to convert syscfg key 0x%X to string", v21, v22, v23, v24, v25, a3);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)bytes = 67109120;
      unsigned int v28 = a3;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Failed to convert syscfg key 0x%X to string", bytes, 8u);
    }
  }
  if (v11) {
    CFRelease(v11);
  }
}

BOOL sub_19D73D400(uint64_t a1)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  CFDataRef v2 = (const __CFData *)sub_19D73BEC8();
  if (!v2) {
    return 0;
  }
  CFDataRef v3 = v2;
  unint64_t Length = CFDataGetLength(v2);
  if (Length <= 0x17)
  {
    CFDataRef v5 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    if (v5) {
      CFDataRef v11 = v5 + 1;
    }
    else {
      CFDataRef v11 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    }
    _MGLog((uint64_t)v11, 825, @"syscfg length %lu is too small, header size %lu\n", v6, v7, v8, v9, v10, Length);
    BOOL v12 = 0;
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_36;
    }
    *(_DWORD *)buf = 134218240;
    *(void *)uint64_t v53 = Length;
    *(_WORD *)&v53[8] = 2048;
    uint64_t v54 = 24;
    uint64_t v13 = MEMORY[0x1E4F14500];
    uint64_t v14 = "syscfg length %lu is too small, header size %lu\n";
    uint32_t v15 = 22;
    goto LABEL_21;
  }
  BytePtr = CFDataGetBytePtr(v3);
  if (*(_DWORD *)BytePtr != 1396926055)
  {
    uint64_t v26 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    if (v26) {
      uint64_t v32 = v26 + 1;
    }
    else {
      uint64_t v32 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    }
    _MGLog((uint64_t)v32, 834, @"syscfg is not initialized!\n", v27, v28, v29, v30, v31, v50);
    BOOL v12 = 0;
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_36;
    }
    *(_WORD *)buf = 0;
    uint64_t v13 = MEMORY[0x1E4F14500];
    uint64_t v14 = "syscfg is not initialized!\n";
    uint32_t v15 = 2;
LABEL_21:
    _os_log_impl(&dword_19D70E000, v13, OS_LOG_TYPE_DEFAULT, v14, buf, v15);
    BOOL v12 = 0;
    goto LABEL_36;
  }
  uint64_t v17 = BytePtr;
  uint64_t v18 = *((unsigned int *)BytePtr + 5);
  if (Length < 20 * (unint64_t)v18 + 24)
  {
    uint64_t v19 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    if (v19) {
      uint64_t v25 = v19 + 1;
    }
    else {
      uint64_t v25 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    }
    _MGLog((uint64_t)v25, 845, @"syscfg length %lu is too small, should be at least %lu to contain %u entries\n", v20, v21, v22, v23, v24, Length);
    BOOL v12 = 0;
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_36;
    }
    *(_DWORD *)buf = 134218496;
    *(void *)uint64_t v53 = Length;
    *(_WORD *)&v53[8] = 2048;
    uint64_t v54 = 20 * v18 + 24;
    LOWORD(v55) = 1024;
    *(_DWORD *)((char *)&v55 + 2) = v18;
    uint64_t v13 = MEMORY[0x1E4F14500];
    uint64_t v14 = "syscfg length %lu is too small, should be at least %lu to contain %u entries\n";
    uint32_t v15 = 28;
    goto LABEL_21;
  }
  if (!v18)
  {
LABEL_34:
    int v40 = 1;
    goto LABEL_35;
  }
  uint64_t v33 = 0;
  uint64_t v34 = (unsigned int *)(BytePtr + 36);
  while (1)
  {
    char v51 = 0;
    uint64_t v35 = *(v34 - 3);
    BOOL v36 = v34 - 2;
    if (v35 == 1129206850) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned int *, uint64_t, char *))(a1 + 16))(a1, 1094992961, v35, v36, 16, &v51);
LABEL_32:
    if (!v51)
    {
      ++v33;
      v34 += 5;
      if (v18 != v33) {
        continue;
      }
    }
    goto LABEL_34;
  }
  int v37 = *(v34 - 1);
  unint64_t v38 = *v34;
  if (Length >= v38 && Length >= (v37 + v38))
  {
    (*(void (**)(uint64_t, uint64_t, void, const UInt8 *, void, char *))(a1 + 16))(a1, 1094992961, *v36, &v17[v38], *(v34 - 1), &v51);
    goto LABEL_32;
  }
  uint64_t v42 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
  if (v42) {
    uint64_t v48 = v42 + 1;
  }
  else {
    uint64_t v48 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
  }
  _MGLog((uint64_t)v48, 866, @"syscfg entry %u offset %u, len %u is out of range; syscfg length is %lu\n",
    v43,
    v44,
    v45,
    v46,
    v47,
    v33);
  BOOL v49 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT);
  int v40 = 0;
  if (v49)
  {
    *(_DWORD *)buf = 67109888;
    *(_DWORD *)uint64_t v53 = v33;
    *(_WORD *)&v53[4] = 1024;
    *(_DWORD *)&v53[6] = v38;
    LOWORD(v54) = 1024;
    *(_DWORD *)((char *)&v54 + 2) = v37;
    HIWORD(v54) = 2048;
    unint64_t v55 = Length;
    _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "syscfg entry %u offset %u, len %u is out of range; syscfg length is %lu\n",
      buf,
      0x1Eu);
    int v40 = 0;
  }
LABEL_35:
  BOOL v12 = v40 != 0;
LABEL_36:
  CFRelease(v3);
  return v12;
}

uint64_t sub_19D73D7DC(uint64_t a1, uint64_t a2)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  CFDataRef v4 = sub_19D73C470(0x74727374u);
  CFDataRef v5 = sub_19D73C470(0x7365616Cu);
  if (!v5)
  {
    uint64_t v22 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    if (v22) {
      uint64_t v28 = v22 + 1;
    }
    else {
      uint64_t v28 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    }
    _MGLog((uint64_t)v28, 1059, @"failed to copy EAN data for 'seal' - non-fatal.", v23, v24, v25, v26, v27, v55);
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_25;
    }
    *(_WORD *)buf = 0;
    uint64_t v19 = MEMORY[0x1E4F14500];
    uint64_t v20 = "failed to copy EAN data for 'seal' - non-fatal.";
    goto LABEL_23;
  }
  if (MGGetBoolAnswer((const char **)@"8DHlxr5ECKhTSL3HmlZQGQ") || sub_19D73F46C(a1, v5, v4))
  {
    if (qword_1E94493E8 != -1) {
      dispatch_once(&qword_1E94493E8, &unk_1EEF8F618);
    }
    uint64_t v6 = (unsigned int *)qword_1E94493D8;
    if (qword_1E94493D8)
    {
      uint64_t v7 = dword_1E94493E0;
      memset(v60, 0, sizeof(v60));
      uint64_t v61 = 0;
      BytePtr = CFDataGetBytePtr(v5);
      CFIndex Length = CFDataGetLength(v5);
      int v10 = sub_19D760728((uint64_t)BytePtr, Length, (uint64_t)v60);
      if (!v10)
      {
        if (v7)
        {
          uint64_t v45 = MEMORY[0x1E4F14500];
          do
          {
            uint64_t v56 = 0;
            uint64_t v57 = 0;
            sub_19D75FFA4((uint64_t)v60, 1296125520, *v6, &v57, &v56);
            if (v46)
            {
              *(_DWORD *)buf = bswap32(*v6);
              CFStringRef v47 = CFStringCreateWithBytes(0, buf, 4, 0x8000100u, 0);
              uint64_t v48 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
              if (v48) {
                uint64_t v54 = v48 + 1;
              }
              else {
                uint64_t v54 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
              }
              _MGLog((uint64_t)v54, 1113, @"Sealing manifest property '%@' did not exist in the sealing manifest", v49, v50, v51, v52, v53, (char)v47);
              if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138412290;
                CFStringRef v59 = v47;
                _os_log_impl(&dword_19D70E000, v45, OS_LOG_TYPE_DEFAULT, "Sealing manifest property '%@' did not exist in the sealing manifest", buf, 0xCu);
              }
              if (v47) {
                CFRelease(v47);
              }
            }
            else
            {
              buf[0] = 0;
              (*(void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint8_t *))(a2 + 16))(a2, 1936023916, *v6, v57, v56, buf);
              if (buf[0]) {
                goto LABEL_25;
              }
            }
            ++v6;
            --v7;
          }
          while (v7);
        }
        goto LABEL_25;
      }
      int v11 = v10;
      BOOL v12 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
      if (v12) {
        uint64_t v18 = v12 + 1;
      }
      else {
        uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      }
      _MGLog((uint64_t)v18, 1086, @"Failed to initialize Img4 manifest with status: 0x%X", v13, v14, v15, v16, v17, v11);
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
LABEL_25:
        uint64_t v36 = 1;
        goto LABEL_26;
      }
      *(_DWORD *)buf = 67109120;
      LODWORD(v59) = v11;
      uint64_t v19 = MEMORY[0x1E4F14500];
      uint64_t v20 = "Failed to initialize Img4 manifest with status: 0x%X";
      uint32_t v21 = 8;
LABEL_24:
      _os_log_impl(&dword_19D70E000, v19, OS_LOG_TYPE_DEFAULT, v20, buf, v21);
      goto LABEL_25;
    }
    uint64_t v29 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    if (v29) {
      uint64_t v35 = v29 + 1;
    }
    else {
      uint64_t v35 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    }
    _MGLog((uint64_t)v35, 1077, @"Failed to copy sealing manifest allowlist.", v30, v31, v32, v33, v34, v55);
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_25;
    }
    *(_WORD *)buf = 0;
    uint64_t v19 = MEMORY[0x1E4F14500];
    uint64_t v20 = "Failed to copy sealing manifest allowlist.";
LABEL_23:
    uint32_t v21 = 2;
    goto LABEL_24;
  }
  unint64_t v38 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
  if (v38) {
    uint64_t v44 = v38 + 1;
  }
  else {
    uint64_t v44 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
  }
  _MGLog((uint64_t)v44, 1068, @"_sealingManifestTrusted returned false", v39, v40, v41, v42, v43, v55);
  uint64_t v36 = 0;
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "_sealingManifestTrusted returned false", buf, 2u);
    uint64_t v36 = 0;
  }
LABEL_26:
  if (v4) {
    CFRelease(v4);
  }
  if (v5) {
    CFRelease(v5);
  }
  return v36;
}

CFDataRef sub_19D73DC50(uint64_t a1)
{
  CFDataRef result = (const __CFData *)sub_19D73C020();
  if (result)
  {
    CFDataRef v3 = result;
    uint64_t v4 = sub_19D73E9C8(result, 1986883702, a1);
    CFRelease(v3);
    return (const __CFData *)v4;
  }
  return result;
}

uint64_t sub_19D73DC9C(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a2;
  uint64_t v7 = sub_19D73C470(*a2);
  uint64_t v8 = sub_19D73C470(0x74727374u);
  uint64_t v9 = sub_19D73C470(0x7365616Cu);
  if (v7)
  {
    CFDataRef v10 = sub_19D73EC88((uint64_t)a2, a1, v7, v9, v8);
    if (v10)
    {
      CFDataRef v11 = v10;
      if (qword_1E94493C8 != -1) {
        dispatch_once(&qword_1E94493C8, &unk_1EEF8F6B8);
      }
      uint64_t v12 = sub_19D73E9C8(v11, v6, a3);
      CFRelease(v11);
    }
    else
    {
      uint64_t v20 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
      if (v20) {
        uint64_t v26 = v20 + 1;
      }
      else {
        uint64_t v26 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      }
      _MGLog((uint64_t)v26, 1034, @"_decodeFDRDataClass returned NULL", v21, v22, v23, v24, v25, v28);
      uint64_t v12 = 0;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "_decodeFDRDataClass returned NULL", buf, 2u);
        uint64_t v12 = 0;
      }
    }
    CFRelease(v7);
    if (v8) {
LABEL_19:
    }
      CFRelease(v8);
  }
  else
  {
    uint64_t v13 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    if (v13) {
      uint64_t v19 = v13 + 1;
    }
    else {
      uint64_t v19 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    }
    _MGLog((uint64_t)v19, 1025, @"failed to copy EAN data for key %c%c%c%c - non fatal", v14, v15, v16, v17, v18, SBYTE3(v6));
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109888;
      unsigned int v30 = BYTE3(v6);
      __int16 v31 = 1024;
      int v32 = BYTE2(v6);
      __int16 v33 = 1024;
      int v34 = BYTE1(v6);
      __int16 v35 = 1024;
      int v36 = v6;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "failed to copy EAN data for key %c%c%c%c - non fatal", buf, 0x1Au);
    }
    uint64_t v12 = 1;
    if (v8) {
      goto LABEL_19;
    }
  }
  if (v9) {
    CFRelease(v9);
  }
  return v12;
}

void sub_19D73DEF8(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  CFTypeID TypeID = CFDataGetTypeID();
  if (TypeID == CFGetTypeID(a3) && !CFDataGetLength((CFDataRef)a3))
  {
    uint64_t v7 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    if (v7) {
      uint64_t v13 = v7 + 1;
    }
    else {
      uint64_t v13 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    }
    _MGLog((uint64_t)v13, 386, @"Removing zero length key: %@", v8, v9, v10, v11, v12, (char)a2);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v15 = a2;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Removing zero length key: %@", buf, 0xCu);
    }
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 32), a2);
  }
}

void sub_19D73E008(CFTypeRef *a1, unsigned int a2)
{
  if (a2)
  {
    uint64_t v3 = a2;
    uint64_t v4 = a1 + 1;
    do
    {
      CFDataRef v5 = v4 - 1;
      if (*v4) {
        CFRelease(*v4);
      }
      CFTypeRef *v5 = 0;
      CFTypeRef *v4 = 0;
      v4 += 3;
      v5[2] = 0;
      --v3;
    }
    while (v3);
  }

  free(a1);
}

CFDataRef sub_19D73E074(unsigned int a1)
{
  return sub_19D73E07C(a1, -1);
}

CFDataRef sub_19D73E07C(unsigned int a1, CFIndex a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (MGGetBoolAnswer((const char **)@"8DHlxr5ECKhTSL3HmlZQGQ"))
  {
    CFDictionaryRef v4 = (const __CFDictionary *)sub_19D73C5D8();
  }
  else
  {
    int v27 = 0;
    CFDictionaryRef v4 = (const __CFDictionary *)MGCopyAnswerWithError((const char **)@"9/J7LY7zuYSGW1BcSTRpOw", 0, &v27);
    if (!v4)
    {
      CFDataRef v5 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
      uint64_t v11 = v5
          ? v5 + 1
          : "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      _MGLog((uint64_t)v11, 567, @"Failed to copy the SysCfgDict MG key with error: %d", v6, v7, v8, v9, v10, v27);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v29) = v27;
        _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Failed to copy the SysCfgDict MG key with error: %d", buf, 8u);
      }
    }
  }
  if (!v4) {
    return 0;
  }
  *(_DWORD *)buf = bswap32(a1);
  CFStringRef v12 = CFStringCreateWithBytes(0, buf, 4, 0x8000100u, 0);
  CFDataRef Value = (const __CFData *)CFDictionaryGetValue(v4, v12);
  if (!Value)
  {
    uint64_t v20 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    if (v20) {
      uint64_t v26 = v20 + 1;
    }
    else {
      uint64_t v26 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    }
    _MGLog((uint64_t)v26, 586, @"Failed to find key %@", v21, v22, v23, v24, v25, (char)v12);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      CFStringRef v29 = v12;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Failed to find key %@", buf, 0xCu);
    }
    CFDataRef v18 = 0;
    if (!v12) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  CFDataRef v14 = Value;
  CFIndex Length = CFDataGetLength(Value);
  if ((a2 & 0x8000000000000000) == 0)
  {
    if (Length >= a2) {
      goto LABEL_15;
    }
    CFIndex Length = CFDataGetLength(v14);
  }
  a2 = Length;
LABEL_15:
  CFAllocatorRef v16 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  BytePtr = CFDataGetBytePtr(v14);
  CFDataRef v18 = CFDataCreate(v16, BytePtr, a2);
  if (v12) {
LABEL_16:
  }
    CFRelease(v12);
LABEL_17:
  CFRelease(v4);
  return v18;
}

uint64_t sub_19D73E2D0(unsigned int a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  CFDataRef v2 = sub_19D73E07C(a1, -1);
  if (v2)
  {
    CFDataRef v3 = v2;
    long long buf = 0uLL;
    sub_19D73E440(v2, &buf);
    uint64_t v4 = HIDWORD(buf);
    CFRelease(v3);
  }
  else
  {
    CFDataRef v5 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    unsigned int v11 = HIBYTE(a1);
    if (v5) {
      CFStringRef v12 = v5 + 1;
    }
    else {
      CFStringRef v12 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    }
    int v13 = BYTE2(a1);
    int v14 = BYTE1(a1);
    int v15 = a1;
    _MGLog((uint64_t)v12, 435, @"no value found for key %c%c%c%c", v6, v7, v8, v9, v10, SHIBYTE(a1));
    uint64_t v4 = 0;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(void *)&long long buf = __PAIR64__(v11, 67109888);
      WORD4(buf) = 1024;
      *(_DWORD *)((char *)&buf + 10) = v13;
      HIWORD(buf) = 1024;
      int v18 = v14;
      __int16 v19 = 1024;
      int v20 = v15;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "no value found for key %c%c%c%c", (uint8_t *)&buf, 0x1Au);
      return 0;
    }
  }
  return v4;
}

uint64_t sub_19D73E414(const __CFData *a1)
{
  long long v2 = 0uLL;
  sub_19D73E440(a1, &v2);
  return HIDWORD(v2);
}

void sub_19D73E440(const __CFData *a1, _OWORD *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    BytePtr = CFDataGetBytePtr(a1);
    if (BytePtr && (v5 = BytePtr, CFTypeID v6 = CFGetTypeID(a1), v6 == CFDataGetTypeID()) && CFDataGetLength(a1) == 16)
    {
      *a2 = *(_OWORD *)v5;
    }
    else
    {
      uint64_t v7 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
      if (v7) {
        int v13 = v7 + 1;
      }
      else {
        int v13 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      }
      _MGLog((uint64_t)v13, 459, @"failed to get to cookSyscfgColorData %@", v8, v9, v10, v11, v12, (char)a1);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412290;
        CFDataRef v15 = a1;
        _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "failed to get to cookSyscfgColorData %@", buf, 0xCu);
      }
    }
  }
}

uint64_t sub_19D73E560(const __CFData *a1)
{
  long long v2 = 0uLL;
  sub_19D73E440(a1, &v2);
  if (v2 == 2) {
    return DWORD2(v2);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

CFDataRef sub_19D73E598(unsigned int a1)
{
  return sub_19D73E07C(a1, 6);
}

uint64_t sub_19D73E5A0(int a1, unsigned __int8 *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1 <= 1702060896)
  {
    if (!a1) {
      return 0;
    }
    if (a1 == 1) {
      return 1;
    }
  }
  else
  {
    switch(a1)
    {
      case 1702060897:
        int v3 = a2[3];
        return v3 != 0;
      case 1717663091:
        int v3 = a2[1];
        return v3 != 0;
      case 1718838113:
        int v3 = a2[2];
        return v3 != 0;
    }
  }
  CFDataRef v5 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
  if (v5) {
    uint64_t v11 = v5 + 1;
  }
  else {
    uint64_t v11 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
  }
  _MGLog((uint64_t)v11, 612, @"%s unexpected policy criteria: (0x%X)", v6, v7, v8, v9, v10, (char)"_Bool _policyCriteriaCheck(uint32_t, const MGAPTicket_s *)");
  BOOL v12 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (v12)
  {
    *(_DWORD *)long long buf = 136315394;
    int v14 = "_Bool _policyCriteriaCheck(uint32_t, const MGAPTicket_s *)";
    __int16 v15 = 1024;
    int v16 = a1;
    _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%s unexpected policy criteria: (0x%X)", buf, 0x12u);
    return 0;
  }
  return result;
}

uint64_t sub_19D73E704(_OWORD *a1)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  cf[0] = 0;
  cf[1] = 0;
  long long v2 = sub_19D73C470(0x6170746Bu);
  memset(v31, 0, 3);
  if (v2)
  {
    int v3 = v2;
    if (sub_19D73F888(v2, (unsigned int *)"suafacsfacse", 3, (BOOL *)v31, 0, (CFDataRef *)&cf[1]))
    {
      BYTE1(cf[0]) = v31[0];
      WORD1(cf[0]) = *(_WORD *)((char *)v31 + 1);
      uint64_t v4 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
      if (v4) {
        uint64_t v10 = v4 + 1;
      }
      else {
        uint64_t v10 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      }
      if (BYTE1(cf[0])) {
        uint64_t v11 = "YES";
      }
      else {
        uint64_t v11 = "NO";
      }
      _MGLog((uint64_t)v10, 1378, @"APTicketProperties: {\n\tfaus: %s\n\tfsca: %s\n\tesca: %s\n\ttrustObject: %@\n}", v5, v6, v7, v8, v9, (char)v11);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        if (BYTE1(cf[0])) {
          BOOL v12 = "YES";
        }
        else {
          BOOL v12 = "NO";
        }
        if (BYTE2(cf[0])) {
          int v13 = "YES";
        }
        else {
          int v13 = "NO";
        }
        if (BYTE3(cf[0])) {
          int v14 = "YES";
        }
        else {
          int v14 = "NO";
        }
        *(_DWORD *)long long buf = 136315906;
        int v34 = v12;
        __int16 v35 = 2080;
        int v36 = v13;
        __int16 v37 = 2080;
        unint64_t v38 = v14;
        __int16 v39 = 2112;
        CFTypeRef v40 = cf[1];
        _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "APTicketProperties: {\n\tfaus: %s\n\tfsca: %s\n\tesca: %s\n\ttrustObject: %@\n}", buf, 0x2Au);
      }
      LOBYTE(cf[0]) = 1;
      if (cf[1]) {
        CFRetain(cf[1]);
      }
      *a1 = *(_OWORD *)cf;
    }
    else
    {
      uint64_t v22 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
      if (v22) {
        char v28 = v22 + 1;
      }
      else {
        char v28 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      }
      _MGLog((uint64_t)v28, 1361, @"Failed to decode 'aptk'", v23, v24, v25, v26, v27, v30);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Failed to decode 'aptk'", buf, 2u);
      }
    }
    CFRelease(v3);
    if (cf[1]) {
      CFRelease(cf[1]);
    }
  }
  else
  {
    __int16 v15 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    if (v15) {
      uint64_t v21 = v15 + 1;
    }
    else {
      uint64_t v21 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    }
    _MGLog((uint64_t)v21, 1353, @"Failed to copy 'aptk' from EAN", v16, v17, v18, v19, v20, v30);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Failed to copy 'aptk' from EAN", buf, 2u);
    }
  }
  return LOBYTE(cf[0]);
}

uint64_t sub_19D73E9C8(const __CFData *a1, uint64_t a2, uint64_t a3)
{
  CFIndex Length = CFDataGetLength(a1);
  if (Length < 0x100000000)
  {
    unsigned int v17 = Length;
    BytePtr = CFDataGetBytePtr(a1);
    uint64_t v19 = sub_19D75DC58((uint64_t)BytePtr, v17);
    if (v19)
    {
      uint64_t v20 = (void *)v19;
      uint64_t v21 = sub_19D75EEA4(v19);
      if (v21)
      {
        uint64_t v22 = (unsigned int *)v21;
        char v14 = 1;
        do
        {
          char v47 = 0;
          *(void *)long long buf = 0;
          uint64_t v46 = 0;
          uint64_t v23 = sub_19D75E6D4(v22);
          int v24 = sub_19D75E700((uint64_t)v22, (uint64_t)buf);
          BOOL v25 = sub_19D75E6E0((BOOL)v22);
          uint64_t v26 = (const char *)sub_19D75E6F4((uint64_t)v22);
          if (v24)
          {
            (*(void (**)(uint64_t, uint64_t, unsigned int *, void, void, char *))(a3 + 16))(a3, a2, v23, *(void *)buf, v46, &v47);
          }
          else
          {
            uint64_t v27 = v26;
            if (v26)
            {
              size_t v28 = strlen(v26);
              (*(void (**)(uint64_t, uint64_t, unsigned int *, const char *, size_t, char *))(a3 + 16))(a3, a2, v23, v27, v28, &v47);
            }
            else if (v25)
            {
              (*(void (**)(uint64_t, uint64_t, unsigned int *, void, void, char *))(a3 + 16))(a3, a2, v23, 0, 0, &v47);
            }
            else
            {
              CFStringRef v29 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
              if (v29) {
                __int16 v35 = v29 + 1;
              }
              else {
                __int16 v35 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
              }
              _MGLog((uint64_t)v35, 941, @"Unexpected libSysConfig3 payload state", v30, v31, v32, v33, v34, v44[0]);
              char v14 = 0;
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)uint64_t v44 = 0;
                _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Unexpected libSysConfig3 payload state", v44, 2u);
                char v14 = 0;
              }
            }
          }
          if (v47) {
            break;
          }
          uint64_t v22 = (unsigned int *)sub_19D75E76C((uint64_t)v22);
        }
        while (v22);
      }
      else
      {
        char v14 = 1;
      }
      sub_19D75EE0C(v20);
    }
    else
    {
      int v36 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
      if (v36) {
        uint64_t v42 = v36 + 1;
      }
      else {
        uint64_t v42 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      }
      _MGLog((uint64_t)v42, 909, @"decodeSysConfig3 returned NULL", v37, v38, v39, v40, v41, v44[0]);
      char v14 = 0;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        __int16 v15 = MEMORY[0x1E4F14500];
        uint64_t v16 = "decodeSysConfig3 returned NULL";
        goto LABEL_29;
      }
    }
  }
  else
  {
    uint64_t v7 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    if (v7) {
      int v13 = v7 + 1;
    }
    else {
      int v13 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    }
    _MGLog((uint64_t)v13, 896, @"SysConfig data greater than UINT32_MAX", v8, v9, v10, v11, v12, v44[0]);
    char v14 = 0;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      __int16 v15 = MEMORY[0x1E4F14500];
      uint64_t v16 = "SysConfig data greater than UINT32_MAX";
LABEL_29:
      _os_log_impl(&dword_19D70E000, v15, OS_LOG_TYPE_DEFAULT, v16, buf, 2u);
      char v14 = 0;
    }
  }
  return v14 & 1;
}

CFDataRef sub_19D73EC88(uint64_t a1, uint64_t a2, const __CFData *a3, const __CFData *a4, const __CFData *a5)
{
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  if (qword_1E94493A0 != -1) {
    dispatch_once(&qword_1E94493A0, &unk_1EEF366F8);
  }
  if (off_1E9449398)
  {
    memset(length, 0, sizeof(length));
    CFTypeRef cf = 0;
    *(_DWORD *)bytes = bswap32(*(_DWORD *)a1);
    CFStringRef v10 = CFStringCreateWithBytes(0, bytes, 4, 0x8000100u, 0);
    if (qword_1E94493A0 != -1) {
      dispatch_once(&qword_1E94493A0, &unk_1EEF366F8);
    }
    CFStringRef v11 = (const __CFString *)off_1E9449398(@"seal", &cf);
    if (qword_1E94493A0 != -1) {
      dispatch_once(&qword_1E94493A0, &unk_1EEF366F8);
    }
    CFStringRef v12 = (const __CFString *)off_1E9449398(v10, &cf);
    CFDataRef v13 = *(const __CFData **)(a2 + 8);
    if (MGGetBoolAnswer((const char **)@"8DHlxr5ECKhTSL3HmlZQGQ") || *(unsigned char *)(a1 + 17)) {
      uint64_t v14 = 14;
    }
    else {
      uint64_t v14 = 0;
    }
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v57 = v14;
      if (!v11) {
        CFStringRef v11 = (const __CFString *)CFRetain(@"UNKNOWN");
      }
      if (!v12) {
        CFStringRef v12 = (const __CFString *)CFRetain(@"UNKNOWN");
      }
      CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFDataRef ExternalRepresentation = CFStringCreateExternalRepresentation((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v10, 0x8000100u, 0x20u);
      CFDataRef v17 = CFStringCreateExternalRepresentation(v15, v11, 0x8000100u, 0x20u);
      CFAllocatorRef allocator = v15;
      CFDataRef v18 = CFStringCreateExternalRepresentation(v15, v12, 0x8000100u, 0x20u);
      if (qword_1E94493C0 != -1) {
        dispatch_once(&qword_1E94493C0, &unk_1EEF36738);
      }
      long long v83 = 0u;
      uint64_t v84 = 0;
      long long v82 = 0u;
      long long v81 = 0u;
      long long v80 = 0u;
      long long v79 = 0u;
      long long v78 = 0u;
      long long v77 = 0u;
      long long v76 = 0u;
      long long v75 = 0u;
      long long v74 = 0u;
      long long v73 = 0u;
      long long v72 = 0u;
      long long v71 = 0u;
      long long v69 = 0u;
      long long v70 = 0u;
      long long v67 = 0u;
      long long v68 = 0u;
      BytePtr = CFDataGetBytePtr(a3);
      LODWORD(v67) = CFDataGetLength(a3);
      if (a5)
      {
        *((void *)&v67 + 1) = CFDataGetBytePtr(a5);
        int v19 = CFDataGetLength(a5);
      }
      else
      {
        int v19 = 0;
        *((void *)&v67 + 1) = 0;
      }
      LODWORD(v68) = v19;
      if (a4)
      {
        *((void *)&v68 + 1) = CFDataGetBytePtr(a4);
        int v35 = CFDataGetLength(a4);
      }
      else
      {
        int v35 = 0;
        *((void *)&v68 + 1) = 0;
      }
      LODWORD(v69) = v35;
      if (v13)
      {
        *((void *)&v69 + 1) = CFDataGetBytePtr(v13);
        int v36 = CFDataGetLength(v13);
      }
      else
      {
        int v36 = 0;
        *((void *)&v69 + 1) = 0;
      }
      LODWORD(v70) = v36;
      if (ExternalRepresentation)
      {
        *((void *)&v70 + 1) = CFDataGetBytePtr(ExternalRepresentation);
        int v37 = CFDataGetLength(ExternalRepresentation);
      }
      else
      {
        int v37 = 0;
        *((void *)&v70 + 1) = 0;
      }
      LODWORD(v71) = v37;
      if (v18)
      {
        *((void *)&v71 + 1) = CFDataGetBytePtr(v18);
        int v38 = CFStringGetLength(v12);
      }
      else
      {
        int v38 = 0;
        *((void *)&v71 + 1) = 0;
      }
      LODWORD(v72) = v38;
      if (v17)
      {
        *((void *)&v72 + 1) = CFDataGetBytePtr(v17);
        int v39 = CFDataGetLength(v17);
      }
      else
      {
        int v39 = 0;
        *((void *)&v72 + 1) = 0;
      }
      LODWORD(v73) = v39;
      *((void *)&v73 + 1) = 0;
      LODWORD(v74) = 0;
      *((void *)&v74 + 1) = 0;
      LODWORD(v75) = 0;
      *((void *)&v75 + 1) = v57;
      *((void *)&v80 + 1) = 0;
      LODWORD(v81) = 0;
      *((void *)&v81 + 1) = 0;
      LODWORD(v82) = 0;
      *((void *)&v82 + 1) = 0;
      LODWORD(v83) = 0;
      *((void *)&v83 + 1) = 0;
      LODWORD(v84) = 0;
      long long v76 = 0u;
      long long v77 = 0u;
      long long v78 = 0u;
      long long v79 = 0u;
      LODWORD(v80) = 0;
      uint64_t v40 = sub_19D75BB50((uint64_t *)&BytePtr, &length[1], length);
      uint64_t v41 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
      if (v41) {
        char v47 = v41 + 1;
      }
      else {
        char v47 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      }
      _MGLog((uint64_t)v47, 1483, @"%s AMFDRDecodeTrustEvaluation status 0x%llX for dataClass '%@'", v42, v43, v44, v45, v46, (char)"CFDataRef _decodeFDRDataClass(const MGSysConfigPolicy_s *, const MGAPTicket_s *, CFDataRef, CFDataRef, CFDataRef)");
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)bytes = 136315650;
        uint64_t v61 = "CFDataRef _decodeFDRDataClass(const MGSysConfigPolicy_s *, const MGAPTicket_s *, CFDataRef, CFDataRef, CFDataRef)";
        __int16 v62 = 2048;
        uint64_t v63 = (uint64_t (*)(void, void))v40;
        __int16 v64 = 2112;
        CFStringRef v65 = v10;
        _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "%s AMFDRDecodeTrustEvaluation status 0x%llX for dataClass '%@'", bytes, 0x20u);
      }
      uint64_t v48 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
      if (v48) {
        uint64_t v54 = v48 + 1;
      }
      else {
        uint64_t v54 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      }
      if (v40)
      {
        _MGLog((uint64_t)v54, 1490, @"%s AMFDRDecodeTrustEvaluation status 0x%llX for dataClass '%@'. Critical error, skipping data class.", v49, v50, v51, v52, v53, (char)"CFDataRef _decodeFDRDataClass(const MGSysConfigPolicy_s *, const MGAPTicket_s *, CFDataRef, CFDataRef, CFDataRef)");
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)bytes = 136315650;
          uint64_t v61 = "CFDataRef _decodeFDRDataClass(const MGSysConfigPolicy_s *, const MGAPTicket_s *, CFDataRef, CFDataRef, CFDataRef)";
          __int16 v62 = 2048;
          uint64_t v63 = (uint64_t (*)(void, void))v40;
          __int16 v64 = 2112;
          CFStringRef v65 = v10;
          _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "%s AMFDRDecodeTrustEvaluation status 0x%llX for dataClass '%@'. Critical error, skipping data class.", bytes, 0x20u);
        }
        CFDataRef v27 = 0;
      }
      else
      {
        _MGLog((uint64_t)v54, 1497, @"%s attempting to create CFData with %p and length: %d", v49, v50, v51, v52, v53, (char)"CFDataRef _decodeFDRDataClass(const MGSysConfigPolicy_s *, const MGAPTicket_s *, CFDataRef, CFDataRef, CFDataRef)");
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)bytes = 136315650;
          uint64_t v61 = "CFDataRef _decodeFDRDataClass(const MGSysConfigPolicy_s *, const MGAPTicket_s *, CFDataRef, CFDataRef, CFDataRef)";
          __int16 v62 = 2048;
          uint64_t v63 = *(uint64_t (**)(void, void))&length[1];
          __int16 v64 = 1024;
          LODWORD(v65) = length[0];
          _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "%s attempting to create CFData with %p and length: %d", bytes, 0x1Cu);
        }
        CFDataRef v27 = 0;
        if (*(void *)&length[1] && length[0]) {
          CFDataRef v27 = CFDataCreate(allocator, *(const UInt8 **)&length[1], length[0]);
        }
      }
    }
    else
    {
      size_t v28 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
      if (v28) {
        uint64_t v34 = v28 + 1;
      }
      else {
        uint64_t v34 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      }
      _MGLog((uint64_t)v34, 1436, @"%s dataClass '%@' is not allowed to load.", v29, v30, v31, v32, v33, (char)"CFDataRef _decodeFDRDataClass(const MGSysConfigPolicy_s *, const MGAPTicket_s *, CFDataRef, CFDataRef, CFDataRef)");
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)bytes = 136315394;
        uint64_t v61 = "CFDataRef _decodeFDRDataClass(const MGSysConfigPolicy_s *, const MGAPTicket_s *, CFDataRef, CFDataRef, CFDataRef)";
        __int16 v62 = 2112;
        uint64_t v63 = (uint64_t (*)(void, void))v10;
        _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%s dataClass '%@' is not allowed to load.", bytes, 0x16u);
      }
      CFDataRef v27 = 0;
      CFDataRef ExternalRepresentation = 0;
      CFDataRef v17 = 0;
      CFDataRef v18 = 0;
    }
    if (v10) {
      CFRelease(v10);
    }
    if (v11) {
      CFRelease(v11);
    }
    if (v12) {
      CFRelease(v12);
    }
    if (ExternalRepresentation) {
      CFRelease(ExternalRepresentation);
    }
    if (v18) {
      CFRelease(v18);
    }
    if (v17) {
      CFRelease(v17);
    }
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    uint64_t v20 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    uint64_t v21 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    if (v21) {
      uint64_t v20 = v21 + 1;
    }
    if (qword_1E94493A0 != -1) {
      dispatch_once(&qword_1E94493A0, &unk_1EEF366F8);
    }
    _MGLog((uint64_t)v20, 1402, @"%s Unable to find required libFDR symbols. _AMFDRSealingMapCopyInstanceForClass_fn %p", v22, v23, v24, v25, v26, (char)"CFDataRef _decodeFDRDataClass(const MGSysConfigPolicy_s *, const MGAPTicket_s *, CFDataRef, CFDataRef, CFDataRef)");
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      if (qword_1E94493A0 != -1) {
        dispatch_once(&qword_1E94493A0, &unk_1EEF366F8);
      }
      *(_DWORD *)bytes = 136315394;
      uint64_t v61 = "CFDataRef _decodeFDRDataClass(const MGSysConfigPolicy_s *, const MGAPTicket_s *, CFDataRef, CFDataRef, CFDataRef)";
      __int16 v62 = 2048;
      uint64_t v63 = off_1E9449398;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%s Unable to find required libFDR symbols. _AMFDRSealingMapCopyInstanceForClass_fn %p", bytes, 0x16u);
    }
    return 0;
  }
  return v27;
}

BOOL sub_19D73F46C(uint64_t a1, const __CFData *a2, const __CFData *a3)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  if (qword_1E94493A0 != -1) {
    dispatch_once(&qword_1E94493A0, &unk_1EEF366F8);
  }
  if (off_1E9449398)
  {
    uint64_t v33 = 0;
    int v32 = 0;
    CFTypeRef cf = 0;
    CFStringRef v6 = (const __CFString *)off_1E9449398(@"seal", &cf);
    CFDataRef v7 = *(const __CFData **)(a1 + 8);
    if (!v6) {
      CFStringRef v6 = (const __CFString *)CFRetain(@"UNKNOWN");
    }
    CFStringRef v8 = v6;
    CFDataRef ExternalRepresentation = CFStringCreateExternalRepresentation((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v6, 0x8000100u, 0x20u);
    if (qword_1E94493C0 != -1) {
      dispatch_once(&qword_1E94493C0, &unk_1EEF36738);
    }
    long long v52 = 0u;
    uint64_t v53 = 0;
    long long v51 = 0u;
    long long v50 = 0u;
    long long v49 = 0u;
    long long v48 = 0u;
    long long v47 = 0u;
    long long v46 = 0u;
    long long v45 = 0u;
    long long v44 = 0u;
    long long v43 = 0u;
    long long v42 = 0u;
    long long v41 = 0u;
    long long v40 = 0u;
    long long v39 = 0u;
    long long v38 = 0u;
    long long v37 = 0u;
    *(_OWORD *)&uint8_t buf[8] = 0u;
    *(void *)long long buf = CFDataGetBytePtr(a2);
    *(_DWORD *)&uint8_t buf[8] = CFDataGetLength(a2);
    if (a3)
    {
      *(void *)&uint8_t buf[16] = CFDataGetBytePtr(a3);
      int Length = CFDataGetLength(a3);
    }
    else
    {
      int Length = 0;
      *(void *)&uint8_t buf[16] = 0;
    }
    LODWORD(v37) = Length;
    if (v7)
    {
      *((void *)&v38 + 1) = CFDataGetBytePtr(v7);
      int v19 = CFDataGetLength(v7);
    }
    else
    {
      int v19 = 0;
      *((void *)&v38 + 1) = 0;
    }
    LODWORD(v39) = v19;
    if (ExternalRepresentation)
    {
      *((void *)&v41 + 1) = CFDataGetBytePtr(ExternalRepresentation);
      int v20 = CFDataGetLength(ExternalRepresentation);
    }
    else
    {
      int v20 = 0;
      *((void *)&v41 + 1) = 0;
    }
    LODWORD(v42) = v20;
    *((void *)&v44 + 1) = 128;
    uint64_t v21 = sub_19D75BB50((uint64_t *)buf, &v33, &v32);
    BOOL v18 = v21 == 0;
    if (v21)
    {
      uint64_t v22 = v21;
      uint64_t v23 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
      uint64_t v29 = v23
          ? v23 + 1
          : "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      _MGLog((uint64_t)v29, 1774, @"Manifest trust evaluation failed with status 0x%llX", v24, v25, v26, v27, v28, v22);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t v34 = 134217984;
        uint64_t v35 = v22;
        _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Manifest trust evaluation failed with status 0x%llX", v34, 0xCu);
      }
    }
    if (v8) {
      CFRelease(v8);
    }
    if (ExternalRepresentation) {
      CFRelease(ExternalRepresentation);
    }
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    CFStringRef v11 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    CFStringRef v12 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    if (v12) {
      CFStringRef v11 = v12 + 1;
    }
    if (qword_1E94493A0 != -1) {
      dispatch_once(&qword_1E94493A0, &unk_1EEF366F8);
    }
    _MGLog((uint64_t)v11, 1728, @"%s Unable to find required libFDR symbols. _AMFDRSealingMapCopyInstanceForClass_fn %p", v13, v14, v15, v16, v17, (char)"_Bool _sealingManifestTrusted(const MGAPTicket_s *, CFDataRef, CFDataRef)");
    BOOL v18 = 0;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      if (qword_1E94493A0 != -1) {
        dispatch_once(&qword_1E94493A0, &unk_1EEF366F8);
      }
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = "_Bool _sealingManifestTrusted(const MGAPTicket_s *, CFDataRef, CFDataRef)";
      *(_WORD *)&uint8_t buf[12] = 2048;
      *(void *)&buf[14] = off_1E9449398;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%s Unable to find required libFDR symbols. _AMFDRSealingMapCopyInstanceForClass_fn %p", buf, 0x16u);
      return 0;
    }
  }
  return v18;
}

BOOL sub_19D73F83C()
{
  CFTypeRef v0 = sub_19D717CF8("IODeviceTree:/defaults", @"ean-storage-present", 0);
  CFTypeRef v1 = v0;
  if (v0) {
    CFRelease(v0);
  }
  return v1 != 0;
}

uint64_t sub_19D73F888(const __CFData *a1, unsigned int *a2, uint64_t a3, BOOL *a4, BOOL *a5, CFDataRef *a6)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  CFDataRef v11 = (const __CFData *)sub_19D717CF8("IODeviceTree:/chosen/secure-boot-hashes", @"sfr-manifest-hash", 0);
  CFDataRef v12 = (const __CFData *)sub_19D717CF8("IODeviceTree:/chosen", @"crypto-hash-method", 0);
  CFDataRef v13 = v12;
  if (v12)
  {
    CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    BytePtr = CFDataGetBytePtr(v12);
    uint64_t v16 = (const char *)CFDataGetBytePtr(v13);
    size_t Length = CFDataGetLength(v13);
    size_t v18 = strnlen(v16, Length);
    CFStringRef v19 = CFStringCreateWithBytes(v14, BytePtr, v18, 0x8000100u, 0);
    if (v11) {
      goto LABEL_6;
    }
  }
  else
  {
    CFStringRef v19 = 0;
    if (v11) {
      goto LABEL_6;
    }
  }
  CFDataRef v11 = (const __CFData *)sub_19D717CF8("IODeviceTree:/chosen", @"boot-manifest-hash", 0);
  if (v11)
  {
LABEL_6:
    if (v13)
    {
      if (v19)
      {
        if ((sub_19D73FDE8(a1, v11, v19) & 1) == 0)
        {
          long long v49 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
          if (v49) {
            char v55 = v49 + 1;
          }
          else {
            char v55 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
          }
          _MGLog((uint64_t)v55, 1291, @"%s APTicket verification failed!", v50, v51, v52, v53, v54, (char)"_Bool _decodeAPTicket(CFDataRef, uint32_t *, size_t, _Bool *, _Bool *, CFDataRef *)");
          uint64_t v31 = 0;
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_34;
          }
          *(_DWORD *)long long buf = 136315138;
          *(void *)long long v81 = "_Bool _decodeAPTicket(CFDataRef, uint32_t *, size_t, _Bool *, _Bool *, CFDataRef *)";
          int v32 = MEMORY[0x1E4F14500];
          uint64_t v33 = "%s APTicket verification failed!";
          uint32_t v34 = 12;
          goto LABEL_32;
        }
        uint64_t v83 = 0;
        memset(v82, 0, sizeof(v82));
        int v20 = CFDataGetBytePtr(a1);
        CFIndex v21 = CFDataGetLength(a1);
        int v22 = sub_19D760728((uint64_t)v20, v21, (uint64_t)v82);
        if (v22)
        {
          int v23 = v22;
          uint64_t v24 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
          if (v24) {
            uint64_t v30 = v24 + 1;
          }
          else {
            uint64_t v30 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
          }
          _MGLog((uint64_t)v30, 1301, @"Img4DecodeInitManifest failed with code %d (0x%X)", v25, v26, v27, v28, v29, v23);
          uint64_t v31 = 0;
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_34;
          }
          *(_DWORD *)long long buf = 67109376;
          *(_DWORD *)long long v81 = v23;
          *(_WORD *)&v81[4] = 1024;
          *(_DWORD *)&v81[6] = v23;
          int v32 = MEMORY[0x1E4F14500];
          uint64_t v33 = "Img4DecodeInitManifest failed with code %d (0x%X)";
LABEL_15:
          uint32_t v34 = 14;
LABEL_32:
          _os_log_impl(&dword_19D70E000, v32, OS_LOG_TYPE_DEFAULT, v33, buf, v34);
LABEL_33:
          uint64_t v31 = 0;
LABEL_34:
          CFRelease(v11);
          goto LABEL_35;
        }
        if (a3)
        {
          __int16 v64 = a5;
          do
          {
            unsigned int v65 = *a2++;
            int v66 = sub_19D75FE80((uint64_t)v82, 0, v65, a4);
            if (a5) {
              *__int16 v64 = v66 == 0;
            }
            ++v64;
            ++a4;
            --a3;
          }
          while (a3);
        }
        if (a6)
        {
          CFIndex v78 = 0;
          long long v79 = 0;
          sub_19D75FFA4((uint64_t)v82, 1718903152, 1145525076, &v79, &v78);
          if (v67)
          {
            int v68 = v67;
            long long v69 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
            if (v69) {
              long long v75 = v69 + 1;
            }
            else {
              long long v75 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
            }
            _MGLog((uint64_t)v75, 1322, @"Img4DecodeInitManifest failed get trust object digest with code %d (0x%X)", v70, v71, v72, v73, v74, v68);
            if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_33;
            }
            *(_DWORD *)long long buf = 67109376;
            *(_DWORD *)long long v81 = v68;
            *(_WORD *)&v81[4] = 1024;
            *(_DWORD *)&v81[6] = v68;
            int v32 = MEMORY[0x1E4F14500];
            uint64_t v33 = "Img4DecodeInitManifest failed get trust object digest with code %d (0x%X)";
            goto LABEL_15;
          }
          *a6 = CFDataCreate(0, v79, v78);
        }
        uint64_t v31 = 1;
        goto LABEL_34;
      }
      long long v42 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
      if (v42) {
        long long v48 = v42 + 1;
      }
      else {
        long long v48 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      }
      _MGLog((uint64_t)v48, 1283, @"Unable to copy the cryptoHashMethodStr", v43, v44, v45, v46, v47, v76);
      uint64_t v31 = 0;
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_34;
      }
      *(_WORD *)long long buf = 0;
      int v32 = MEMORY[0x1E4F14500];
      uint64_t v33 = "Unable to copy the cryptoHashMethodStr";
    }
    else
    {
      uint64_t v35 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
      if (v35) {
        long long v41 = v35 + 1;
      }
      else {
        long long v41 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      }
      _MGLog((uint64_t)v41, 1277, @"Unable to copy the cryptoHashMethod", v36, v37, v38, v39, v40, v76);
      uint64_t v31 = 0;
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_34;
      }
      *(_WORD *)long long buf = 0;
      int v32 = MEMORY[0x1E4F14500];
      uint64_t v33 = "Unable to copy the cryptoHashMethod";
    }
    uint32_t v34 = 2;
    goto LABEL_32;
  }
  uint64_t v57 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
  if (v57) {
    uint64_t v63 = v57 + 1;
  }
  else {
    uint64_t v63 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
  }
  _MGLog((uint64_t)v63, 1271, @"Unable to copy the bootManifestHash", v58, v59, v60, v61, v62, v76);
  uint64_t v31 = 0;
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Unable to copy the bootManifestHash", buf, 2u);
    uint64_t v31 = 0;
  }
LABEL_35:
  if (v13) {
    CFRelease(v13);
  }
  if (v19) {
    CFRelease(v19);
  }
  return v31;
}

uint64_t sub_19D73FDE8(const __CFData *a1, const __CFData *a2, CFStringRef theString1)
{
  uint64_t v109 = *MEMORY[0x1E4F143B8];
  if (CFEqual(theString1, @"sha1"))
  {
    BytePtr = (char *)CFDataGetBytePtr(a1);
    size_t Length = CFDataGetLength(a1);
    int v21 = sub_19D761B30(BytePtr, Length, (uint64_t)__s1);
    unsigned int v22 = 20;
    int v23 = off_1EEF8FBF0;
    if (!v21)
    {
LABEL_15:
      if (v22 == CFDataGetLength(a2))
      {
        uint32_t v34 = CFDataGetBytePtr(a2);
        if (memcmp(__s1, v34, v22))
        {
          uint64_t v35 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
          if (v35) {
            long long v41 = v35 + 1;
          }
          else {
            long long v41 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
          }
          _MGLog((uint64_t)v41, 1691, @"The APTicket and boot manifest digest do not match!", v36, v37, v38, v39, v40, v74);
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "The APTicket and boot manifest digest do not match!", buf, 2u);
          }
          if (!MGGetBoolAnswer((const char **)@"8DHlxr5ECKhTSL3HmlZQGQ"))
          {
            BOOL v42 = sub_19D712390("IODeviceTree:/chosen", @"mix-n-match-prevention-status", 0);
            uint64_t result = 0;
            if (v42) {
              return result;
            }
          }
          uint64_t v108 = 0;
          long long v106 = 0u;
          long long v107 = 0u;
          long long v104 = 0u;
          long long v105 = 0u;
          long long v102 = 0u;
          long long v103 = 0u;
          long long v100 = 0u;
          long long v101 = 0u;
          long long v98 = 0u;
          long long v99 = 0u;
          long long v96 = 0u;
          long long v97 = 0u;
          long long v94 = 0u;
          long long v95 = 0u;
          long long v92 = 0u;
          long long v93 = 0u;
          long long v90 = 0u;
          long long v91 = 0u;
          long long v88 = 0u;
          long long v89 = 0u;
          long long v86 = 0u;
          long long v87 = 0u;
          long long v84 = 0u;
          long long v85 = 0u;
          long long v82 = 0u;
          long long v83 = 0u;
          memset(buf, 0, sizeof(buf));
          v80[0] = MGGetSInt64Answer((const char **)@"566JrJVMlDfnslGpwUzNlQ", 0);
          v80[1] = MGGetSInt64Answer((const char **)@"TF31PAB6aO8KAbPyNKSxKA", 0);
          uint64_t v43 = CFDataGetBytePtr(a1);
          CFIndex v44 = CFDataGetLength(a1);
          int v45 = sub_19D760728((uint64_t)v43, v44, (uint64_t)buf);
          if (v45)
          {
            int v46 = v45;
            uint64_t v47 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
            if (v47) {
              uint64_t v53 = v47 + 1;
            }
            else {
              uint64_t v53 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
            }
            _MGLog((uint64_t)v53, 1629, @"%s failed Img4DecodeInitManifest with error %d", v48, v49, v50, v51, v52, (char)"_Bool _verifyAPTicketIsAppleSigned(CFDataRef, const Img4DecodeImplementation *)");
            BOOL v54 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT);
            uint64_t result = 0;
            if (!v54) {
              return result;
            }
            int v76 = 136315394;
            long long v77 = "_Bool _verifyAPTicketIsAppleSigned(CFDataRef, const Img4DecodeImplementation *)";
            __int16 v78 = 1024;
            int v79 = v46;
            uint64_t v15 = MEMORY[0x1E4F14500];
            uint64_t v16 = "%s failed Img4DecodeInitManifest with error %d";
            goto LABEL_43;
          }
          sub_19D76087C(0x72667461u, (uint64_t)buf, (uint64_t)sub_19D740F0C, (uint64_t)v23, (uint64_t)v80);
          if (v64)
          {
            int v65 = v64;
            int v66 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
            if (v66) {
              uint64_t v72 = v66 + 1;
            }
            else {
              uint64_t v72 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
            }
            _MGLog((uint64_t)v72, 1637, @"%s failed Img4DecodePerformTrustEvaluation with error %d", v67, v68, v69, v70, v71, (char)"_Bool _verifyAPTicketIsAppleSigned(CFDataRef, const Img4DecodeImplementation *)");
            BOOL v73 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT);
            uint64_t result = 0;
            if (!v73) {
              return result;
            }
            int v76 = 136315394;
            long long v77 = "_Bool _verifyAPTicketIsAppleSigned(CFDataRef, const Img4DecodeImplementation *)";
            __int16 v78 = 1024;
            int v79 = v65;
            uint64_t v15 = MEMORY[0x1E4F14500];
            uint64_t v16 = "%s failed Img4DecodePerformTrustEvaluation with error %d";
LABEL_43:
            uint64_t v17 = (uint8_t *)&v76;
            uint32_t v18 = 18;
            goto LABEL_35;
          }
        }
        return 1;
      }
      char v55 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      uint64_t v56 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
      if (v56) {
        char v55 = v56 + 1;
      }
      CFDataGetLength(a2);
      _MGLog((uint64_t)v55, 1678, @"The APTicket boot manifest digest lengths did not match %d != %d", v57, v58, v59, v60, v61, v22);
      BOOL v62 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0;
      if (!v62) {
        return result;
      }
      int v63 = CFDataGetLength(a2);
      *(_DWORD *)long long buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v22;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v63;
      uint64_t v15 = MEMORY[0x1E4F14500];
      uint64_t v16 = "The APTicket boot manifest digest lengths did not match %d != %d";
LABEL_34:
      uint64_t v17 = buf;
      uint32_t v18 = 14;
      goto LABEL_35;
    }
LABEL_9:
    uint64_t v24 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    if (v24) {
      uint64_t v30 = v24 + 1;
    }
    else {
      uint64_t v30 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    }
    _MGLog((uint64_t)v30, 1672, @"Failed to digest APTicket with error %d (0x%X)", v25, v26, v27, v28, v29, v21);
    BOOL v31 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (!v31) {
      return result;
    }
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v21;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = v21;
    uint64_t v15 = MEMORY[0x1E4F14500];
    uint64_t v16 = "Failed to digest APTicket with error %d (0x%X)";
    goto LABEL_34;
  }
  if (CFEqual(theString1, @"sha2-384"))
  {
    int v32 = (char *)CFDataGetBytePtr(a1);
    size_t v33 = CFDataGetLength(a1);
    int v21 = sub_19D761BDC(v32, v33, (uint64_t)__s1);
    unsigned int v22 = 48;
    int v23 = off_1EEF8FC28;
    if (!v21) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }
  CFStringRef v6 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
  if (v6) {
    CFDataRef v12 = v6 + 1;
  }
  else {
    CFDataRef v12 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
  }
  _MGLog((uint64_t)v12, 1665, @"Crypto hash method is '%@'. Current support is for hash methods '%@' and '%@'", v7, v8, v9, v10, v11, (char)theString1);
  BOOL v13 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (v13)
  {
    *(_DWORD *)long long buf = 138412802;
    *(void *)&uint8_t buf[4] = theString1;
    *(_WORD *)&uint8_t buf[12] = 2112;
    *(void *)&buf[14] = @"sha1";
    *(_WORD *)&unsigned char buf[22] = 2112;
    *(void *)&unsigned char buf[24] = @"sha2-384";
    uint64_t v15 = MEMORY[0x1E4F14500];
    uint64_t v16 = "Crypto hash method is '%@'. Current support is for hash methods '%@' and '%@'";
    uint64_t v17 = buf;
    uint32_t v18 = 32;
LABEL_35:
    _os_log_impl(&dword_19D70E000, v15, OS_LOG_TYPE_DEFAULT, v16, v17, v18);
    return 0;
  }
  return result;
}

void sub_19D740370()
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  CFDataRef v0 = (const __CFData *)sub_19D717CF8("IODeviceTree:/chosen", @"syscfg-seal-keys-allowed", 0);
  qword_1E94493F0 = (uint64_t)v0;
  if (v0)
  {
    if (CFDataGetLength(v0) <= 0)
    {
      uint64_t v11 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
      if (v11) {
        uint64_t v17 = v11 + 1;
      }
      else {
        uint64_t v17 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      }
      _MGLog((uint64_t)v17, 1530, @"syscfg-seal-keys-allowed was zero length", v12, v13, v14, v15, v16, v18);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        uint64_t v8 = MEMORY[0x1E4F14500];
        uint64_t v9 = "syscfg-seal-keys-allowed was zero length";
        uint32_t v10 = 2;
        goto LABEL_14;
      }
    }
    else if ((CFDataGetLength((CFDataRef)qword_1E94493F0) & 3) != 0)
    {
      CFTypeRef v1 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
      if (v1) {
        uint64_t v7 = v1 + 1;
      }
      else {
        uint64_t v7 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      }
      _MGLog((uint64_t)v7, 1536, @"syscfg-seal-keys-allowed was not a multiple of %d", v2, v3, v4, v5, v6, 4);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 67109120;
        int v20 = 4;
        uint64_t v8 = MEMORY[0x1E4F14500];
        uint64_t v9 = "syscfg-seal-keys-allowed was not a multiple of %d";
        uint32_t v10 = 8;
LABEL_14:
        _os_log_impl(&dword_19D70E000, v8, OS_LOG_TYPE_DEFAULT, v9, buf, v10);
      }
    }
    else
    {
      qword_1E94493D8 = (uint64_t)CFDataGetBytePtr((CFDataRef)qword_1E94493F0);
      dword_1E94493E0 = (unint64_t)CFDataGetLength((CFDataRef)qword_1E94493F0) >> 2;
    }
  }
}

BOOL sub_19D740514(const __CFString *a1, BOOL *a2)
{
  uint64_t v86 = *MEMORY[0x1E4F143B8];
  BOOL v81 = 0;
  char v80 = 0;
  *(_DWORD *)buffer = 0;
  if (!a1)
  {
    uint64_t v25 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    if (v25) {
      BOOL v31 = v25 + 1;
    }
    else {
      BOOL v31 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    }
    _MGLog((uint64_t)v31, 1827, @"entitlement is NULL", v26, v27, v28, v29, v30, v77);
    BOOL v23 = 0;
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
      return v23;
    }
    *(_WORD *)__s = 0;
    int v32 = MEMORY[0x1E4F14500];
    size_t v33 = "entitlement is NULL";
LABEL_58:
    _os_log_impl(&dword_19D70E000, v32, OS_LOG_TYPE_DEFAULT, v33, __s, 2u);
    return 0;
  }
  if (CFStringGetLength(a1) != 4)
  {
    uint32_t v34 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    if (v34) {
      uint64_t v40 = v34 + 1;
    }
    else {
      uint64_t v40 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    }
    _MGLog((uint64_t)v40, 1828, @"invalid entitlement length", v35, v36, v37, v38, v39, v77);
    BOOL v23 = 0;
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
      return v23;
    }
    *(_WORD *)__s = 0;
    int v32 = MEMORY[0x1E4F14500];
    size_t v33 = "invalid entitlement length";
    goto LABEL_58;
  }
  if (!CFStringGetCString(a1, buffer, 5, 0x8000100u))
  {
    long long v41 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    if (v41) {
      uint64_t v47 = v41 + 1;
    }
    else {
      uint64_t v47 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    }
    _MGLog((uint64_t)v47, 1829, @"failed to get entitlement string", v42, v43, v44, v45, v46, v77);
    BOOL v23 = 0;
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
      return v23;
    }
    *(_WORD *)__s = 0;
    int v32 = MEMORY[0x1E4F14500];
    size_t v33 = "failed to get entitlement string";
    goto LABEL_58;
  }
  unsigned int v78 = bswap32(*(unsigned int *)buffer);
  long long v82 = 0;
  bzero(__s, 0x400uLL);
  if (sub_19D741264() && sub_19D741334())
  {
    uint64_t v4 = (uint64_t (*)(uint64_t, UInt8 *, uint64_t))sub_19D741334();
    if (!v4) {
      sub_19D76F80C();
    }
    uint64_t v5 = v4(2, __s, 1024);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
      if (v7) {
        uint64_t v13 = v7 + 1;
      }
      else {
        uint64_t v13 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      }
      _MGLog((uint64_t)v13, 1796, @"failed to locate AP ticket: %ld", v8, v9, v10, v11, v12, v6);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 134217984;
        uint64_t v84 = v6;
        uint64_t v14 = MEMORY[0x1E4F14500];
        uint64_t v15 = "failed to locate AP ticket: %ld";
        uint32_t v16 = 12;
LABEL_42:
        _os_log_impl(&dword_19D70E000, v14, OS_LOG_TYPE_DEFAULT, v15, buf, v16);
        goto LABEL_17;
      }
      goto LABEL_17;
    }
  }
  else
  {
    __strlcpy_chk();
  }
  CFAllocatorRef v17 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  size_t v18 = strlen((const char *)__s);
  CFURLRef v19 = CFURLCreateFromFileSystemRepresentation((CFAllocatorRef)*MEMORY[0x1E4F1CF80], __s, v18, 0);
  if (v19)
  {
    CFURLRef v20 = v19;
    int v21 = sub_19D761FCC(v17, (CFTypeRef *)&v82, v19);
    if (v21)
    {
      int v55 = v21;
      uint64_t v56 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
      BOOL v62 = v56
          ? v56 + 1
          : "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      _MGLog((uint64_t)v62, 1805, @"failed to read AP ticket: %d", v57, v58, v59, v60, v61, v55);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 67109120;
        LODWORD(v84) = v55;
        _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "failed to read AP ticket: %d", buf, 8u);
      }
    }
    CFRelease(v20);
    unsigned int v22 = v82;
    if (v82) {
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v48 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    if (v48) {
      BOOL v54 = v48 + 1;
    }
    else {
      BOOL v54 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    }
    _MGLog((uint64_t)v54, 1802, @"failed to create path URL", v49, v50, v51, v52, v53, v77);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      uint64_t v14 = MEMORY[0x1E4F14500];
      uint64_t v15 = "failed to create path URL";
      uint32_t v16 = 2;
      goto LABEL_42;
    }
  }
LABEL_17:
  unsigned int v22 = sub_19D73C470(0x6170746Bu);
  if (!v22)
  {
    uint64_t v70 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    if (v70) {
      int v76 = v70 + 1;
    }
    else {
      int v76 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    }
    _MGLog((uint64_t)v76, 1841, @"failed to obtain APTicket", v71, v72, v73, v74, v75, v77);
    BOOL v23 = 0;
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
      return v23;
    }
    *(_WORD *)__s = 0;
    int v32 = MEMORY[0x1E4F14500];
    size_t v33 = "failed to obtain APTicket";
    goto LABEL_58;
  }
LABEL_18:
  if (sub_19D73F888(v22, &v78, 1, &v81, a2, 0))
  {
    BOOL v23 = v81;
  }
  else
  {
    int v63 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    if (v63) {
      uint64_t v69 = v63 + 1;
    }
    else {
      uint64_t v69 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    }
    _MGLog((uint64_t)v69, 1845, @"failed to decode APTicket", v64, v65, v66, v67, v68, v77);
    BOOL v23 = 0;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__s = 0;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "failed to decode APTicket", __s, 2u);
      BOOL v23 = 0;
    }
  }
  CFRelease(v22);
  return v23;
}

uint64_t sub_19D740A50()
{
  return sub_19D75DA8C((uint64_t)sub_19D740A64);
}

void sub_19D740A64(int a1, char *__format, ...)
{
  va_start(va, __format);
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  vsnprintf(__str, 0xFFuLL, __format, va);
  if (a1 == 1)
  {
    CFAllocatorRef v17 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    if (v17) {
      BOOL v23 = v17 + 1;
    }
    else {
      BOOL v23 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    }
    _MGLog((uint64_t)v23, 508, @"%s", v18, v19, v20, v21, v22, (char)__str);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 136315138;
      uint32_t v34 = __str;
      uint64_t v24 = MEMORY[0x1E4F14500];
      os_log_type_t v25 = OS_LOG_TYPE_INFO;
LABEL_18:
      _os_log_impl(&dword_19D70E000, v24, v25, "%s", buf, 0xCu);
    }
  }
  else
  {
    if (!a1)
    {
      uint64_t v3 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
      if (v3) {
        uint64_t v9 = v3 + 1;
      }
      else {
        uint64_t v9 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      }
      _MGLog((uint64_t)v9, 504, @"%s", v4, v5, v6, v7, v8, (char)__str);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEBUG)) {
        sub_19D76F830((uint64_t)__str, v10, v11, v12, v13, v14, v15, v16);
      }
      return;
    }
    uint64_t v26 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    if (v26) {
      int v32 = v26 + 1;
    }
    else {
      int v32 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    }
    _MGLog((uint64_t)v32, 513, @"%s", v27, v28, v29, v30, v31, (char)__str);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      uint32_t v34 = __str;
      uint64_t v24 = MEMORY[0x1E4F14500];
      os_log_type_t v25 = OS_LOG_TYPE_DEFAULT;
      goto LABEL_18;
    }
  }
}

void *sub_19D740C3C()
{
  if (qword_1E94493B8 != -1) {
    dispatch_once(&qword_1E94493B8, &unk_1EEF36718);
  }
  uint64_t result = (void *)qword_1E94493B0;
  if (qword_1E94493B0)
  {
    uint64_t result = dlsym((void *)qword_1E94493B0, "AMFDRSealingMapCopyInstanceForClass");
    off_1E9449398 = (uint64_t (*)(void, void))result;
  }
  return result;
}

void sub_19D740C98()
{
  qword_1E94493B0 = (uint64_t)dlopen("/usr/lib/libFDR.dylib", 1);
  if (!qword_1E94493B0)
  {
    CFDataRef v0 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    if (v0) {
      uint64_t v6 = v0 + 1;
    }
    else {
      uint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    }
    _MGLog((uint64_t)v6, 1161, @"Unable to dlopen /usr/lib/libFDR.dylib", v1, v2, v3, v4, v5, v7[0]);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Unable to dlopen /usr/lib/libFDR.dylib", v7, 2u);
    }
  }
}

void *sub_19D740D44()
{
  return sub_19D757BC8(sub_19D740D58);
}

void sub_19D740D58(unsigned int a1, uint64_t a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (a1 >= 5)
  {
    if (a1 - 5 >= 2)
    {
      if (a1 == 7)
      {
        uint64_t v19 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
        os_log_type_t v25 = v19
            ? v19 + 1
            : "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
        _MGLog((uint64_t)v25, 1144, @"%s", v20, v21, v22, v23, v24, a2);
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEBUG)) {
          sub_19D76F830(a2, v26, v27, v28, v29, v30, v31, v32);
        }
      }
    }
    else
    {
      uint64_t v12 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
      if (v12) {
        uint64_t v18 = v12 + 1;
      }
      else {
        uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      }
      _MGLog((uint64_t)v18, 1140, @"%s", v13, v14, v15, v16, v17, a2);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 136315138;
        uint64_t v34 = a2;
        uint64_t v10 = MEMORY[0x1E4F14500];
        os_log_type_t v11 = OS_LOG_TYPE_INFO;
        goto LABEL_13;
      }
    }
  }
  else
  {
    uint64_t v3 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    if (v3) {
      uint64_t v9 = v3 + 1;
    }
    else {
      uint64_t v9 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    }
    _MGLog((uint64_t)v9, 1135, @"%s", v4, v5, v6, v7, v8, a2);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      uint64_t v34 = a2;
      uint64_t v10 = MEMORY[0x1E4F14500];
      os_log_type_t v11 = OS_LOG_TYPE_DEFAULT;
LABEL_13:
      _os_log_impl(&dword_19D70E000, v10, v11, "%s", buf, 0xCu);
    }
  }
}

uint64_t sub_19D740F0C(unsigned int a1, uint64_t a2, int a3, uint64_t *a4)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  unint64_t v40 = 0;
  if (a4)
  {
    if (!a3)
    {
      uint64_t v14 = *a4;
      uint64_t v15 = a4[1];
      if (a1 == 1162037572 || a1 == 1128810832)
      {
        uint64_t v16 = sub_19D7600F0(a2, a1, &v40);
        if (v16)
        {
          uint64_t v4 = v16;
          uint64_t v17 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
          if (v17) {
            uint64_t v23 = v17 + 1;
          }
          else {
            uint64_t v23 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
          }
          _MGLog((uint64_t)v23, 1591, @"%s failed to decode Img4 property tag: 0x%X with error %d", v18, v19, v20, v21, v22, (char)"int _APTicketPropertyCallback(uint32_t, const Img4Property *, uint32_t, void *)");
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 136315650;
            uint64_t v42 = "int _APTicketPropertyCallback(uint32_t, const Img4Property *, uint32_t, void *)";
            __int16 v43 = 1024;
            *(_DWORD *)uint64_t v44 = a1;
            *(_WORD *)&v44[4] = 1024;
            *(_DWORD *)&v44[6] = v4;
            _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%s failed to decode Img4 property tag: 0x%X with error %d", buf, 0x18u);
          }
          return v4;
        }
        if (a1 == 1162037572)
        {
          if (v40 != v15)
          {
            size_t v33 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
            if (v33) {
              uint64_t v39 = v33 + 1;
            }
            else {
              uint64_t v39 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
            }
            _MGLog((uint64_t)v39, 1607, @"%s Img4 UniqueChipID (0x%llX) did not match real UniqueChipID (0x%llX)", v34, v35, v36, v37, v38, (char)"int _APTicketPropertyCallback(uint32_t, const Img4Property *, uint32_t, void *)");
            if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
              return 1;
            }
            *(_DWORD *)long long buf = 136315650;
            uint64_t v42 = "int _APTicketPropertyCallback(uint32_t, const Img4Property *, uint32_t, void *)";
            __int16 v43 = 2048;
            *(void *)uint64_t v44 = v40;
            *(_WORD *)&v44[8] = 2048;
            uint64_t v45 = v15;
            uint64_t v31 = MEMORY[0x1E4F14500];
            uint64_t v32 = "%s Img4 UniqueChipID (0x%llX) did not match real UniqueChipID (0x%llX)";
            goto LABEL_33;
          }
        }
        else if (a1 == 1128810832 && v40 != v14)
        {
          uint64_t v24 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
          if (v24) {
            uint64_t v30 = v24 + 1;
          }
          else {
            uint64_t v30 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
          }
          _MGLog((uint64_t)v30, 1599, @"%s Img4 ChipID (0x%llX) did not match real ChipID (0x%llX)", v25, v26, v27, v28, v29, (char)"int _APTicketPropertyCallback(uint32_t, const Img4Property *, uint32_t, void *)");
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
            return 1;
          }
          *(_DWORD *)long long buf = 136315650;
          uint64_t v42 = "int _APTicketPropertyCallback(uint32_t, const Img4Property *, uint32_t, void *)";
          __int16 v43 = 2048;
          *(void *)uint64_t v44 = v40;
          *(_WORD *)&v44[8] = 2048;
          uint64_t v45 = v14;
          uint64_t v31 = MEMORY[0x1E4F14500];
          uint64_t v32 = "%s Img4 ChipID (0x%llX) did not match real ChipID (0x%llX)";
LABEL_33:
          _os_log_impl(&dword_19D70E000, v31, OS_LOG_TYPE_DEFAULT, v32, buf, 0x20u);
          return 1;
        }
      }
    }
    return 0;
  }
  uint64_t v5 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
  if (v5) {
    os_log_type_t v11 = v5 + 1;
  }
  else {
    os_log_type_t v11 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
  }
  _MGLog((uint64_t)v11, 1576, @"%s context was NULL", v6, v7, v8, v9, v10, (char)"int _APTicketPropertyCallback(uint32_t, const Img4Property *, uint32_t, void *)");
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315138;
    uint64_t v42 = "int _APTicketPropertyCallback(uint32_t, const Img4Property *, uint32_t, void *)";
    _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%s context was NULL", buf, 0xCu);
  }
  return 6;
}

uint64_t sub_19D741264()
{
  if (!qword_1E9449390) {
    qword_1E9449390 = _sl_dlopen();
  }
  return qword_1E9449390;
}

uint64_t sub_19D741334()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2000000000;
  uint64_t v0 = qword_1E94493D0;
  uint64_t v6 = qword_1E94493D0;
  if (!qword_1E94493D0)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 0x40000000;
    v2[2] = sub_19D74145C;
    v2[3] = &unk_1E59634D8;
    v2[4] = &v3;
    sub_19D74145C((uint64_t)v2);
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t sub_19D7413E8()
{
  uint64_t result = _sl_dlopen();
  qword_1E9449390 = result;
  return result;
}

void *sub_19D74145C(uint64_t a1)
{
  uint64_t v2 = (void *)sub_19D741264();
  if (!v2)
  {
    uint64_t v4 = (void *)abort_report_np();
    free(v4);
  }
  uint64_t result = dlsym(v2, "lookupPathForPersonalizedData");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1E94493D0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_19D7414E8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

uint64_t sub_19D742880()
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (sub_19D742B28()) {
    return 1;
  }
  uint64_t v0 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitHelper.m", 47);
  if (v0) {
    uint64_t v6 = v0 + 1;
  }
  else {
    uint64_t v6 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitHelper.m";
  }
  _MGLog((uint64_t)v6, 530, @"IOKit is busy, waiting 5s", v1, v2, v3, v4, v5, v26);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "IOKit is busy, waiting 5s", buf, 2u);
  }
  sleep(5u);
  if (sub_19D742B28()) {
    return 1;
  }
  uint64_t v8 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitHelper.m", 47);
  if (v8) {
    uint64_t v14 = v8 + 1;
  }
  else {
    uint64_t v14 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitHelper.m";
  }
  _MGLog((uint64_t)v14, 538, @"IOKit did not stop, getting busy services", v9, v10, v11, v12, v13, v27);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "IOKit did not stop, getting busy services", buf, 2u);
  }
  uint64_t v15 = objc_opt_new();
  if ([v15 createTreeIterator:"IOService"])
  {
    CFArrayRef v16 = (const __CFArray *)[v15 iteratorCopyBusyServiceNames];
    if (CFArrayGetCount(v16) >= 1)
    {
      CFIndex v17 = 0;
      uint64_t v18 = MEMORY[0x1E4F14500];
      do
      {
        CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v16, v17);
        CFTypeID v20 = CFGetTypeID(ValueAtIndex);
        if (v20 == CFStringGetTypeID() && os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 138412290;
          uint64_t v29 = ValueAtIndex;
          _os_log_impl(&dword_19D70E000, v18, OS_LOG_TYPE_DEFAULT, "IOKit is busy with %@", buf, 0xCu);
        }
        ++v17;
      }
      while (v17 < CFArrayGetCount(v16));
    }
    if (CFArrayGetCount(v16) > 0)
    {
      CFIndex Count = CFArrayGetCount(v16);
      uint64_t v22 = CFArrayGetValueAtIndex(v16, Count - 1);
      CFTypeID v23 = CFGetTypeID(v22);
      CFTypeID TypeID = CFStringGetTypeID();
      BOOL v25 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT);
      if (v23 == TypeID)
      {
        if (v25) {
          sub_19D76F8A4((uint64_t)v22);
        }
      }
      else if (v25)
      {
        sub_19D76F924((uint64_t)v22);
      }
    }
    CFRelease(v16);
  }

  return 0;
}

BOOL sub_19D742B28()
{
  kern_return_t v0;
  BOOL v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint8_t v10[12];
  uint32_t busyState;

  busyState = -1;
  uint64_t v0 = IOKitGetBusyState(*MEMORY[0x1E4F2EEF0], &busyState);
  uint64_t v1 = (v0 | busyState) == 0;
  if (!(v0 | busyState))
  {
    uint64_t v2 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitHelper.m", 47);
    if (v2) {
      uint64_t v8 = v2 + 1;
    }
    else {
      uint64_t v8 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitHelper.m";
    }
    _MGLog((uint64_t)v8, 517, @"IOKit is ready", v3, v4, v5, v6, v7, v10[0]);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "IOKit is ready", v10, 2u);
    }
  }
  return v1;
}

uint64_t sub_19D742BEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = objc_opt_new();
  if ([v4 createTreeIterator:"IODeviceTree"]) {
    uint64_t v5 = [v4 deviceTreeNodeIsPresent:a1 withExactName:0 withNodeClass:a2];
  }
  else {
    uint64_t v5 = 0;
  }

  return v5;
}

BOOL sub_19D742C60(uint64_t a1, const void *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef v4 = (const __CFDictionary *)sub_19D742BEC(a1, 0);
  if (!v4) {
    return 0;
  }
  CFDictionaryRef v5 = v4;
  CFDataRef Value = CFDictionaryGetValue(v4, a2);
  BOOL v7 = Value != 0;
  uint64_t v8 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitHelper.m", 47);
  if (v8) {
    uint64_t v14 = v8 + 1;
  }
  else {
    uint64_t v14 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitHelper.m";
  }
  _MGLog((uint64_t)v14, 593, @"Property %@[%@] found %@", v9, v10, v11, v12, v13, a1);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412802;
    uint64_t v17 = a1;
    __int16 v18 = 2112;
    uint64_t v19 = a2;
    __int16 v20 = 2112;
    uint64_t v21 = Value;
    _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Property %@[%@] found %@", buf, 0x20u);
  }
  CFRelease(v5);
  return v7;
}

BOOL sub_19D742D94(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef v3 = (const __CFDictionary *)sub_19D742BEC(a1, a2);
  if (!v3) {
    return 0;
  }
  CFDictionaryRef v4 = v3;
  CFIndex Count = CFDictionaryGetCount(v3);
  BOOL v6 = Count > 0;
  if (Count >= 1)
  {
    BOOL v7 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitHelper.m", 47);
    if (v7) {
      uint64_t v13 = v7 + 1;
    }
    else {
      uint64_t v13 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitHelper.m";
    }
    _MGLog((uint64_t)v13, 607, @"Node %@ found", v8, v9, v10, v11, v12, a1);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v16 = a1;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Node %@ found", buf, 0xCu);
    }
  }
  CFRelease(v4);
  return v6;
}

uint64_t sub_19D742EA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = objc_opt_new();
  if ([v9 createTreeIterator:"IODeviceTree"]
    && (uint64_t v10 = (const void *)[v9 copyDeviceTreeProperty:a2 withFirstChar:a3 propertyName:a4 withPropertyFirstChar:a5]) != 0)
  {
    CFRelease(v10);
    uint64_t v11 = 1;
  }
  else
  {
    uint64_t v11 = 0;
  }

  return v11;
}

uint64_t sub_19D742F30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = objc_opt_new();
  if ([v9 createTreeIterator:"IODeviceTree"]) {
    uint64_t v10 = [v9 copyNumberFromDeviceTree:a2 withFirstChar:a3 propertyName:a4 withPropertyFirstChar:a5];
  }
  else {
    uint64_t v10 = 0;
  }

  return v10;
}

uint64_t sub_19D742FB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = objc_opt_new();
  if ([v9 createTreeIterator:"IODeviceTree"]) {
    uint64_t v10 = [v9 copyDataFromDeviceTree:a2 withFirstChar:a3 propertyName:a4 withPropertyFirstChar:a5];
  }
  else {
    uint64_t v10 = 0;
  }

  return v10;
}

uint64_t sub_19D743040(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = objc_opt_new();
  if ([v9 createTreeIterator:"IODeviceTree"]) {
    uint64_t v10 = [v9 copyStringFromDeviceTree:a2 withFirstChar:a3 propertyName:a4 withPropertyFirstChar:a5];
  }
  else {
    uint64_t v10 = 0;
  }

  return v10;
}

uint64_t sub_19D7430C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = objc_opt_new();
  if ([v9 createTreeIterator:"IOService"]) {
    uint64_t v10 = [v9 copyStringFromServiceTree:a2 withFirstChar:a3 propertyName:a4 withPropertyFirstChar:a5];
  }
  else {
    uint64_t v10 = 0;
  }

  return v10;
}

uint64_t sub_19D743150(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = objc_opt_new();
  if ([v9 createTreeIterator:"IOService"]) {
    uint64_t v10 = [v9 copyPropertyFromServiceTree:a2 withFirstChar:a3 propertyName:a4 withPropertyFirstChar:a5];
  }
  else {
    uint64_t v10 = 0;
  }

  return v10;
}

void *sub_19D7431D8()
{
  id v0 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  uint64_t v1 = v0;
  if (v0)
  {
    uint64_t v2 = sub_19D742F30((uint64_t)v0, @"Ai0zsJQ3+sTFkU6/lLbd5A", 111, @"yeQy+rgNoD7+YIY6mSVOhg", 101);
    CFDictionaryRef v3 = (const void *)v2;
    if (v2)
    {
      CFDictionaryRef v4 = [NSNumber numberWithInteger:1];
      [v1 setObject:v3 forKey:v4];
    }
    uint64_t v5 = sub_19D742F30(v2, @"Ai0zsJQ3+sTFkU6/lLbd5A", 111, @"UF3CoK9RCYXfTyzttoxNDQ", 101);
    BOOL v6 = (const void *)v5;
    if (v5)
    {
      BOOL v7 = [NSNumber numberWithInteger:2];
      [v1 setObject:v6 forKey:v7];
    }
    uint64_t v8 = sub_19D742F30(v5, @"Ai0zsJQ3+sTFkU6/lLbd5A", 111, @"mug/QuG6jZ3CYR9p7OWQaw", 98);
    uint64_t v9 = (const void *)v8;
    if (v8)
    {
      uint64_t v10 = [NSNumber numberWithInteger:4];
      [v1 setObject:v9 forKey:v10];
    }
    uint64_t v11 = (const void *)sub_19D742F30(v8, @"4k6Wv56SWfITjzet+hIHMQ", 109, @"sYxZdpH3i8nwjZNet0QuAw", 102);
    if (v11)
    {
      uint64_t v12 = [NSNumber numberWithInteger:3];
      [v1 setObject:v11 forKey:v12];
    }
    if (v3) {
      CFRelease(v3);
    }
    if (v6) {
      CFRelease(v6);
    }
    if (v9) {
      CFRelease(v9);
    }
    if (v11) {
      CFRelease(v11);
    }
    id v13 = v1;
  }

  return v1;
}

uint64_t sub_19D743388(uint64_t a1)
{
  uint64_t v2 = sub_19D742EA0(a1, @"marconi-wifi", 0, a1, 0);
  if (v2) {
    return 1;
  }

  return sub_19D742EA0(v2, @"wlan", 0, a1, 0);
}

BOOL MobileGestalt_get_has3GProximityCapability()
{
  return MGGetBoolAnswer((const char **)@"NXJOYK7VhNn7ugbF2kx0zg");
}

BOOL MobileGestalt_get_has3GVeniceCapability()
{
  return MGGetBoolAnswer((const char **)@"DGBWzPMdVuqPxgH7iSz3SA");
}

BOOL MobileGestalt_get_has720PPlaybackCapability()
{
  return MGGetBoolAnswer((const char **)@"Lg1EJX11Jb7EbveB6+YgVQ");
}

uint64_t MobileGestalt_get_aDSCapability(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"qRxbmK4B8fGc06Iwe8YptQ");
  if (v3)
  {
    CFDictionaryRef v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      BOOL v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      BOOL v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9D8(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_apnCapability()
{
  return MGGetBoolAnswer((const char **)@"spGVujDEmyCzDznXozB3oA");
}

BOOL MobileGestalt_get_arm64ExecutionCapability()
{
  return MGGetBoolAnswer((const char **)@"kKgJsWN/rBUAkimOtm/wbA");
}

BOOL MobileGestalt_get_arm64EExecutionCapability()
{
  return MGGetBoolAnswer((const char **)@"li+w2foswFu0srn5UxdOug");
}

BOOL MobileGestalt_get_armV6ExecutionCapability()
{
  return MGGetBoolAnswer((const char **)@"g+9NpjmSVwtomd8nyNJimg");
}

BOOL MobileGestalt_get_armV7ExecutionCapability()
{
  return MGGetBoolAnswer((const char **)@"DWrhyh1BwYypYmW5q78Wuw");
}

BOOL MobileGestalt_get_armV7SExecutionCapability()
{
  return MGGetBoolAnswer((const char **)@"RYO2N0gqp5hHCik2TEiSVA");
}

BOOL MobileGestalt_get_aV1DecodingCapability()
{
  return MGGetBoolAnswer((const char **)@"PJKxdi6epBZAu1rqAsrcjQ");
}

id MobileGestalt_copy_aVDDecodingRate_obj()
{
  id v0 = (void *)MGCopyAnswer((const char **)@"J1QHVh74Nnd6Rqyiq71/yw");

  return v0;
}

char *MobileGestalt_copy_awdID()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"MWduuAGptrl7qIzWqBmOqQ");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_awdID_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"MWduuAGptrl7qIzWqBmOqQ");

  return v0;
}

BOOL MobileGestalt_get_awdLCapability()
{
  return MGGetBoolAnswer((const char **)@"XI87Zkcr5j1B/p2dom/B6A");
}

uint64_t MobileGestalt_get_absoluteDepthLimit(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"FtgLNPlv55lerm7FY/kClw");
  if (v3)
  {
    CFDictionaryRef v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      BOOL v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      BOOL v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76FA50(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_accelerometerCapability()
{
  return MGGetBoolAnswer((const char **)@"39ZkJVEsL4pmCXbg+89QmQ");
}

uint64_t MobileGestalt_get_acousticID(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"XWAyufZ2SrclH9F9EDmBKw");
  if (v3)
  {
    CFDictionaryRef v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      BOOL v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      BOOL v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76FAC8(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_activationProtocol(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"zP3kBA1Biwz2d6PTIIbmUQ");
  if (v3)
  {
    CFDictionaryRef v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      BOOL v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      BOOL v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76FB40(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

char *MobileGestalt_copy_activeWirelessTechnology()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"Eavu9TP+iZ0Lzlk7FU6w6Q");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_activeWirelessTechnology_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"Eavu9TP+iZ0Lzlk7FU6w6Q");

  return v0;
}

float MobileGestalt_get_actuatorResonantFrequency(void *a1)
{
  id v1 = a1;
  int valuePtr = -1082130432;
  uint64_t v2 = MGCopyAnswer((const char **)@"hhRNi2d3z2WEFmU+xG/EXw");
  if (v2)
  {
    CFDictionaryRef v3 = v2;
    CFTypeID v4 = CFGetTypeID(v2);
    if (v4 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v3, kCFNumberFloat32Type, &valuePtr))
      {
LABEL_10:
        CFRelease(v3);
        float v6 = *(float *)&valuePtr;
        goto LABEL_11;
      }
      uint64_t v5 = [v1 log];
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      uint64_t v5 = [v1 log];
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_19D76FBB8(v5, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_10;
  }
  float v6 = -1.0;
LABEL_11:

  return v6;
}

BOOL MobileGestalt_get_additionalTextTonesCapability()
{
  return MGGetBoolAnswer((const char **)@"6k70IxahfOQTZbGwu++QwA");
}

uint64_t MobileGestalt_get_aggregateDevicePhotoZoomFactor(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"JLP/IinyzetEPztvoNUNKg");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76FC30(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_aggregateDeviceVideoZoomFactor(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"IweaHIDpz+rknAcb3+xg9g");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76FCA8(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_airDropCapability()
{
  return MGGetBoolAnswer((const char **)@"IBqcPacFMPIX8HMWob444A");
}

BOOL MobileGestalt_get_airDropRestriction()
{
  return MGGetBoolAnswer((const char **)@"/bSMNaIuUT58N/BN1nYUjw");
}

BOOL MobileGestalt_get_airplaneMode()
{
  return MGGetBoolAnswer((const char **)@"l/n0Z7pMB8k0GyTKz3v3Tw");
}

BOOL MobileGestalt_get_airplayMirroringCapability()
{
  return MGGetBoolAnswer((const char **)@"yMmSdMRKEHRTCQ72ltCH1w");
}

BOOL MobileGestalt_get_allow32BitApps()
{
  return MGGetBoolAnswer((const char **)@"ibhfX8FQ6b809N632Ey98g");
}

BOOL MobileGestalt_get_allowOnlyATVCPSDKApps()
{
  return MGGetBoolAnswer((const char **)@"Ex6ChutQnIx5Zm6c5uwYuw");
}

BOOL MobileGestalt_get_allowYouTube()
{
  return MGGetBoolAnswer((const char **)@"7l0BaQsNxJCanoeHMJ2huA");
}

BOOL MobileGestalt_get_allowYouTubePlugin()
{
  return MGGetBoolAnswer((const char **)@"MTa8c+pEdbK0tHGXP06xOw");
}

uint64_t MobileGestalt_get_alwaysOnDisplayMaxMemory(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"Ty4lICNS1jQh45sB3wQd7A");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76FD20(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_ambientLightSensorCapability()
{
  return MGGetBoolAnswer((const char **)@"lo3szoQ4sLy7o3+ZD0GcAQ");
}

char *MobileGestalt_copy_ambientLightSensorSerialNumber()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"UCLOC2TKe3vRkId34ubKWw");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_ambientLightSensorSerialNumber_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"UCLOC2TKe3vRkId34ubKWw");

  return v0;
}

UInt8 *MobileGestalt_copy_apnonce()
{
  CFDataRef v0 = (const __CFData *)MGCopyAnswer((const char **)@"hykQtM0zkNe2/IY69+3PPQ");
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  size_t Length = CFDataGetLength(v0);
  CFDictionaryRef v3 = (UInt8 *)malloc_type_malloc(Length, 0x9A5E339AuLL);
  v5.CFIndex location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

id MobileGestalt_copy_apnonce_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"hykQtM0zkNe2/IY69+3PPQ");

  return v0;
}

UInt8 *MobileGestalt_copy_apnonceRetrieve()
{
  CFDataRef v0 = (const __CFData *)MGCopyAnswer((const char **)@"UcRWpMcvJDfLzn6utLj3XQ");
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  size_t Length = CFDataGetLength(v0);
  CFDictionaryRef v3 = (UInt8 *)malloc_type_malloc(Length, 0x181DA102uLL);
  v5.CFIndex location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

id MobileGestalt_copy_apnonceRetrieve_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"UcRWpMcvJDfLzn6utLj3XQ");

  return v0;
}

uint64_t MobileGestalt_get_appCapacityTVOS(void *a1)
{
  id v1 = a1;
  uint64_t v2 = -1;
  uint64_t valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"kkSkHTEei96N1ZehicOgoA");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt64Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76FD98(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_appStoreCapability()
{
  return MGGetBoolAnswer((const char **)@"XEoV4os3FAUL7yHDxWmSMw");
}

uint64_t MobileGestalt_get_appleNeuralEngineSubtype(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"eJGhnVvylF3dMOHBKJzeiw");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76FE10(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_applicationInstallationCapability()
{
  return MGGetBoolAnswer((const char **)@"7yzVesPANxqKQ+oqNPhTwg");
}

char *MobileGestalt_copy_arcModuleSerialNumber()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"KzUQgIyBRinkweVMNUCOWA");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_arcModuleSerialNumber_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"KzUQgIyBRinkweVMNUCOWA");

  return v0;
}

uint64_t MobileGestalt_get_arrowChipID(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"nhGhVMyvrWYe9U2ltAUImg");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76FE88(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_arrowUniqueChipID(void *a1)
{
  id v1 = a1;
  uint64_t v2 = -1;
  uint64_t valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"CPiqZJJPocpjc5C5qe1tiw");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt64Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76FF00(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

char *MobileGestalt_copy_artworkTraitDisplayGamut()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"LTI8wHvEYKy8zR1IXBW1uQ");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_artworkTraitDisplayGamut_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"LTI8wHvEYKy8zR1IXBW1uQ");

  return v0;
}

id MobileGestalt_copy_artworkTraits_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"oPeik/9e8lQWMszEjbPzng");

  return v0;
}

char *MobileGestalt_copy_attestationUniqueDeviceID()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"0KHhsv2F/BGA9AppFljmKg");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_attestationUniqueDeviceID_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"0KHhsv2F/BGA9AppFljmKg");

  return v0;
}

BOOL MobileGestalt_get_audioPlaybackCapability()
{
  return MGGetBoolAnswer((const char **)@"paR6NqTecAD44x45kzV87g");
}

BOOL MobileGestalt_get_autoFocusCameraCapability()
{
  return MGGetBoolAnswer((const char **)@"o0axLo6LGt8HbuEWdLZ92Q");
}

uint64_t MobileGestalt_get_automaticMicMode(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"yLfrxjB6AbZTASUIAcqi2Q");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76FF78(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

id MobileGestalt_copy_availableDisplayZoomSizes_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"ILaGO+KV5JAOq7Q5GEwbWQ");

  return v0;
}

BOOL MobileGestalt_get_backlightCapability()
{
  return MGGetBoolAnswer((const char **)@"1DQNgySZSIjPqLWroIzfiQ");
}

UInt8 *MobileGestalt_copy_basebandAPTimeSync()
{
  CFDataRef v0 = (const __CFData *)MGCopyAnswer((const char **)@"HXTqT3UXOKuTEklxz+wMAA");
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  size_t Length = CFDataGetLength(v0);
  CFDictionaryRef v3 = (UInt8 *)malloc_type_malloc(Length, 0xF4C2A82AuLL);
  v5.CFIndex location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

id MobileGestalt_copy_basebandAPTimeSync_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"HXTqT3UXOKuTEklxz+wMAA");

  return v0;
}

char *MobileGestalt_copy_basebandBoardSnum()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"ToJGxfcjkIerYyeL2e8c4A");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_basebandBoardSnum_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"ToJGxfcjkIerYyeL2e8c4A");

  return v0;
}

id MobileGestalt_copy_basebandCertId_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"Q5QHkCRPRmiX3L/5xxKrRg");

  return v0;
}

id MobileGestalt_copy_basebandChipId_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"eNgz35a7iZnVeEMwsBQZew");

  return v0;
}

char *MobileGestalt_copy_basebandChipset()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"pB5sZVvnp+QjZQtt2KfQvA");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_basebandChipset_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"pB5sZVvnp+QjZQtt2KfQvA");

  return v0;
}

uint64_t MobileGestalt_get_basebandClass(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"XQBHOWjPt2P+uNqlLm1P7A");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76FFF0(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

id MobileGestalt_copy_basebandFirmwareManifestData_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"FkD7K642S082lnfw/ohHzg");

  return v0;
}

id MobileGestalt_copy_basebandFirmwareUpdateInfo_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"Djv9tHz6MLdTUDjnkq0obQ");

  return v0;
}

char *MobileGestalt_copy_basebandFirmwareVersion()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"PQzmRjKVMistuIVsqs6QXA");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_basebandFirmwareVersion_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"PQzmRjKVMistuIVsqs6QXA");

  return v0;
}

id MobileGestalt_copy_basebandKeyHashInformation_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"H5HW20mJr/djc40tAehkww");

  return v0;
}

char *MobileGestalt_copy_basebandPostponementStatus()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"vaiFeAcMTIDXMSxTr8JwCw");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_basebandPostponementStatus_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"vaiFeAcMTIDXMSxTr8JwCw");

  return v0;
}

id MobileGestalt_copy_basebandPostponementStatusBlob_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"YUobJKXH3+ukrUe13TXL3Q");

  return v0;
}

UInt8 *MobileGestalt_copy_basebandRegionSKU()
{
  CFDataRef v0 = (const __CFData *)MGCopyAnswer((const char **)@"91LyMcx4z1w3SGVeqteMnA");
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  size_t Length = CFDataGetLength(v0);
  CFDictionaryRef v3 = (UInt8 *)malloc_type_malloc(Length, 0x3173986EuLL);
  v5.CFIndex location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

id MobileGestalt_copy_basebandRegionSKU_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"91LyMcx4z1w3SGVeqteMnA");

  return v0;
}

uint64_t MobileGestalt_get_basebandRegionSKURadioTechnology(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"Z3gOHeppbL6+rblIe8H5Ag");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D770068(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

id MobileGestalt_copy_basebandSecurityInfoBlob_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"EImfMz+bzJrUkVQKyY6tEg");

  return v0;
}

UInt8 *MobileGestalt_copy_basebandSerialNumber()
{
  CFDataRef v0 = (const __CFData *)MGCopyAnswer((const char **)@"Nmhz54v5ZLqj2I4NPFIFqQ");
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  size_t Length = CFDataGetLength(v0);
  CFDictionaryRef v3 = (UInt8 *)malloc_type_malloc(Length, 0x35D68F52uLL);
  v5.CFIndex location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

id MobileGestalt_copy_basebandSerialNumber_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"Nmhz54v5ZLqj2I4NPFIFqQ");

  return v0;
}

char *MobileGestalt_copy_basebandStatus()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"CN64p1hw1JVdTHCfBdgPLQ");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_basebandStatus_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"CN64p1hw1JVdTHCfBdgPLQ");

  return v0;
}

char *MobileGestalt_copy_basebandUniqueId()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"vIccod02kDxScKF5s2h6OA");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_basebandUniqueId_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"vIccod02kDxScKF5s2h6OA");

  return v0;
}

uint64_t MobileGestalt_get_batteryCurrentCapacity(void *a1)
{
  id v1 = a1;
  uint64_t v2 = -1;
  uint64_t valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"f2DlVMUVcV+MeWs/g2ku+g");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt64Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D7700E0(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_batteryIsCharging()
{
  return MGGetBoolAnswer((const char **)@"sLe8lqXRlqZM74MNUoVcyQ");
}

BOOL MobileGestalt_get_batteryIsFullyCharged()
{
  return MGGetBoolAnswer((const char **)@"jgE7MmmkZAG0BiWVqD7bMQ");
}

char *MobileGestalt_copy_batterySerialNumber()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"DcQNvnO5Uhpc1jjGIrzyng");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_batterySerialNumber_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"DcQNvnO5Uhpc1jjGIrzyng");

  return v0;
}

BOOL MobileGestalt_get_blueLightReductionSupported()
{
  return MGGetBoolAnswer((const char **)@"F1Xz9g1JORibBS9DYPUPrg");
}

char *MobileGestalt_copy_bluetoothAddress()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"k5lVWbXuiZHLA17KGiVUAA");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_bluetoothAddress_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"k5lVWbXuiZHLA17KGiVUAA");

  return v0;
}

BOOL MobileGestalt_get_bluetoothLE2Capability()
{
  return MGGetBoolAnswer((const char **)@"q3JBrhzy5fyJ1+LAITPW0w");
}

BOOL MobileGestalt_get_bluetoothLECapability()
{
  return MGGetBoolAnswer((const char **)@"8/HMvzDR3J6m0aY3NYeqcg");
}

uint64_t MobileGestalt_get_boardId(void *a1)
{
  id v1 = a1;
  uint64_t v2 = -1;
  uint64_t valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"0uthiXrHZ212KvcJizKHEw");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt64Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D770158(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_boardRevision(void *a1)
{
  id v1 = a1;
  uint64_t v2 = -1;
  uint64_t valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"VqRhf8vgXr9B+SYvpnX39g");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt64Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D7701D0(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

UInt8 *MobileGestalt_copy_bootManifestHash()
{
  CFDataRef v0 = (const __CFData *)MGCopyAnswer((const char **)@"Qq9/Mya05P4ToEr1pMpGGg");
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  size_t Length = CFDataGetLength(v0);
  CFDictionaryRef v3 = (UInt8 *)malloc_type_malloc(Length, 0xB39D7F8FuLL);
  v5.CFIndex location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

id MobileGestalt_copy_bootManifestHash_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"Qq9/Mya05P4ToEr1pMpGGg");

  return v0;
}

UInt8 *MobileGestalt_copy_bootNonce()
{
  CFDataRef v0 = (const __CFData *)MGCopyAnswer((const char **)@"1Rm/mWYEI5ttaC0dJ3sHBQ");
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  size_t Length = CFDataGetLength(v0);
  CFDictionaryRef v3 = (UInt8 *)malloc_type_malloc(Length, 0xE3A93A78uLL);
  v5.CFIndex location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

id MobileGestalt_copy_bootNonce_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"1Rm/mWYEI5ttaC0dJ3sHBQ");

  return v0;
}

char *MobileGestalt_copy_bridgeBuild()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"GxXmRWHjsY5yAVhMfCH6Lg");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_bridgeBuild_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"GxXmRWHjsY5yAVhMfCH6Lg");

  return v0;
}

char *MobileGestalt_copy_bridgeRestoreVersion()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"Glo+aTkt0Uw31BghCxnsyQ");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_bridgeRestoreVersion_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"Glo+aTkt0Uw31BghCxnsyQ");

  return v0;
}

BOOL MobileGestalt_get_buddyLanguagesAnimationRequiresOptimization()
{
  return MGGetBoolAnswer((const char **)@"z+5gEULGC7aEYopBd4ggpA");
}

char *MobileGestalt_copy_buildID()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"qwXfFvH5jPXPxrny0XuGtQ");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_buildID_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"qwXfFvH5jPXPxrny0XuGtQ");

  return v0;
}

char *MobileGestalt_copy_buildVersion()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"mZfUC7qo4pURNhyMHZ62RQ");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_buildVersion_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"mZfUC7qo4pURNhyMHZ62RQ");

  return v0;
}

BOOL MobileGestalt_get_c2KDeviceCapability()
{
  return MGGetBoolAnswer((const char **)@"tdUWKiiM7JdctnzQuvaVVA");
}

char *MobileGestalt_copy_cpuArchitecture()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"k7QIBwZJJOVw+Sej/8h8VA");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_cpuArchitecture_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"k7QIBwZJJOVw+Sej/8h8VA");

  return v0;
}

uint64_t MobileGestalt_get_cpuSubType(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"AWEfP3xWh0q1MjO3JAy/AA");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D770248(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_cpuType(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"xZm4Ky2/qswyf7ykvlchYg");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D7702C0(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_callForwardingCapability()
{
  return MGGetBoolAnswer((const char **)@"57eLnXynqDlQaGEi+9JAtQ");
}

BOOL MobileGestalt_get_callWaitingCapability()
{
  return MGGetBoolAnswer((const char **)@"eXCYx/SHTZIn5LInWvZByw");
}

BOOL MobileGestalt_get_callerIDCapability()
{
  return MGGetBoolAnswer((const char **)@"tad3RCjcWdkyLSVI8kUBtA");
}

uint64_t MobileGestalt_get_cameraAppUIVersion(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"NszbG6qiAztVal4mpDQRkg");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D770338(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

UInt8 *MobileGestalt_copy_cameraButtonCGRect()
{
  CFDataRef v0 = (const __CFData *)MGCopyAnswer((const char **)@"PsIXZ7uVWznKaTEXDbFSYA");
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  size_t Length = CFDataGetLength(v0);
  CFDictionaryRef v3 = (UInt8 *)malloc_type_malloc(Length, 0x50D27031uLL);
  v5.CFIndex location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

id MobileGestalt_copy_cameraButtonCGRect_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"PsIXZ7uVWznKaTEXDbFSYA");

  return v0;
}

BOOL MobileGestalt_get_cameraButtonCapability()
{
  return MGGetBoolAnswer((const char **)@"CwvKxM2cEogD3p+HYgaW0Q");
}

UInt8 *MobileGestalt_copy_cameraButtonNormalizedCGRect()
{
  CFDataRef v0 = (const __CFData *)MGCopyAnswer((const char **)@"DxmNcovWWN464hwZdGfonA");
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  size_t Length = CFDataGetLength(v0);
  CFDictionaryRef v3 = (UInt8 *)malloc_type_malloc(Length, 0xD39E83uLL);
  v5.CFIndex location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

id MobileGestalt_copy_cameraButtonNormalizedCGRect_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"DxmNcovWWN464hwZdGfonA");

  return v0;
}

BOOL MobileGestalt_get_cameraCapability()
{
  return MGGetBoolAnswer((const char **)@"nv4RoLkNoPT0/rsO8Yaiew");
}

BOOL MobileGestalt_get_cameraFlashCapability()
{
  return MGGetBoolAnswer((const char **)@"jdLgKT+0BZmGrzd9J0cuPA");
}

BOOL MobileGestalt_get_cameraFrontFlashCapability()
{
  return MGGetBoolAnswer((const char **)@"fJZs6N8SqTS4RuQVh3szxA");
}

BOOL MobileGestalt_get_cameraHDR2Capability()
{
  return MGGetBoolAnswer((const char **)@"cWWKdUn+rIclZ60ZGAVhBw");
}

uint64_t MobileGestalt_get_cameraHDRVersion(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"+97cHA72jHlHqQnIkgGBYg");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D7703B0(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_cameraIMUDistanceType(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"aDuN0jCthN9lLu4qQ9OrEA");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D770428(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_cameraLiveEffectsCapability()
{
  return MGGetBoolAnswer((const char **)@"03hWmMtMs+4nzama4/PzHQ");
}

id MobileGestalt_copy_cameraMaxBurstLength_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"gBw7IWiBnLHaA+lBrZBgWw");

  return v0;
}

BOOL MobileGestalt_get_cameraRestriction()
{
  return MGGetBoolAnswer((const char **)@"2pxKjejpRGpWvUE+3yp5mQ");
}

id MobileGestalt_copy_carrierBundleInfoArray_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"475wW3fne+tyzGr4wleUSQ");

  return v0;
}

BOOL MobileGestalt_get_carrierInstallCapability()
{
  return MGGetBoolAnswer((const char **)@"9n2qz3uDC5nSe1xZG1/Bkw");
}

BOOL MobileGestalt_get_cellBroadcastCapability()
{
  return MGGetBoolAnswer((const char **)@"CN/XFuy/9Fdv0yE+28kwRQ");
}

BOOL MobileGestalt_get_cellularTelephonyCapability()
{
  return MGGetBoolAnswer((const char **)@"ebyBs0j3KAquBsgcfrNZIg");
}

BOOL MobileGestalt_get_certificateProductionStatus()
{
  return MGGetBoolAnswer((const char **)@"uO3aPe7lfB1XxSiz/1xBvA");
}

BOOL MobileGestalt_get_certificateSecurityMode()
{
  return MGGetBoolAnswer((const char **)@"eg8KDO//lXaLwp+URGP6DA");
}

uint64_t MobileGestalt_get_chipID(void *a1)
{
  id v1 = a1;
  uint64_t v2 = -1;
  uint64_t valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"566JrJVMlDfnslGpwUzNlQ");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt64Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D7704A0(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

char *MobileGestalt_copy_chromeIdentifier()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"yUqD8AXE/c+IggkuYoxrqA");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_chromeIdentifier_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"yUqD8AXE/c+IggkuYoxrqA");

  return v0;
}

BOOL MobileGestalt_get_cloudPhotoLibraryCapability()
{
  return MGGetBoolAnswer((const char **)@"8OTc3mN30ACaEwecgpKfXA");
}

BOOL MobileGestalt_get_coastlineGlowRenderingCapability()
{
  return MGGetBoolAnswer((const char **)@"diS7AlmwFZz6NyF7CY97sA");
}

UInt8 *MobileGestalt_copy_compassCalibration()
{
  CFDataRef v0 = (const __CFData *)MGCopyAnswer((const char **)@"qb//mYg6KeTmjv8w4ZAMIg");
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  size_t Length = CFDataGetLength(v0);
  CFDictionaryRef v3 = (UInt8 *)malloc_type_malloc(Length, 0xDCBED811uLL);
  v5.CFIndex location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

id MobileGestalt_copy_compassCalibration_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"qb//mYg6KeTmjv8w4ZAMIg");

  return v0;
}

id MobileGestalt_copy_compassCalibrationDictionary_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"aoAKcHLuTUp/o3squcJkhA");

  return v0;
}

id MobileGestalt_copy_compassType_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"meLhyIpGgxiQoFZD/OGPcQ");

  return v0;
}

id MobileGestalt_copy_compatibleAppVariants_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"VuGdqp8UBpi9vPWHlPluVQ");

  return v0;
}

char *MobileGestalt_copy_computerName()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"v5YVEwERRin1v+reUNjJ5w");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_computerName_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"v5YVEwERRin1v+reUNjJ5w");

  return v0;
}

char *MobileGestalt_copy_conferenceCallType()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"ol92SaBpqIvQs+KBljuwGA");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_conferenceCallType_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"ol92SaBpqIvQs+KBljuwGA");

  return v0;
}

UInt8 *MobileGestalt_copy_configNumber()
{
  CFDataRef v0 = (const __CFData *)MGCopyAnswer((const char **)@"SmUPjD77AHIMCLny9nawdw");
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  size_t Length = CFDataGetLength(v0);
  CFDictionaryRef v3 = (UInt8 *)malloc_type_malloc(Length, 0xFA9C908DuLL);
  v5.CFIndex location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

id MobileGestalt_copy_configNumber_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"SmUPjD77AHIMCLny9nawdw");

  return v0;
}

BOOL MobileGestalt_get_containsCellularRadioCapability()
{
  return MGGetBoolAnswer((const char **)@"yRZv0s7Dpj8ZBk0S+0+nMA");
}

BOOL MobileGestalt_get_continuityCapability()
{
  return MGGetBoolAnswer((const char **)@"y0jtYciPmcx3ywPM582WZw");
}

BOOL MobileGestalt_get_coreRoutineCapability()
{
  return MGGetBoolAnswer((const char **)@"g7vU4YF+9Z+wkSvw/Cm8Dg");
}

char *MobileGestalt_copy_countryOfOrigin()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"gizLvTWx1sMUYQ9EYr/N4g");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_countryOfOrigin_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"gizLvTWx1sMUYQ9EYr/N4g");

  return v0;
}

char *MobileGestalt_copy_coverglassSerialNumber()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"OWi11Urd09rDmPVy1z5dOQ");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_coverglassSerialNumber_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"OWi11Urd09rDmPVy1z5dOQ");

  return v0;
}

id MobileGestalt_copy_dMin_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"ZEF0po63sTgpVrc9Ce7YNQ");

  return v0;
}

BOOL MobileGestalt_get_dataPlanCapability()
{
  return MGGetBoolAnswer((const char **)@"KGlZoljMyZQSxfhROj0IFg");
}

UInt8 *MobileGestalt_copy_debugBoardRevision()
{
  CFDataRef v0 = (const __CFData *)MGCopyAnswer((const char **)@"DrSqlXYNVfYXCvAsuUrUDA");
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  size_t Length = CFDataGetLength(v0);
  CFDictionaryRef v3 = (UInt8 *)malloc_type_malloc(Length, 0xE3EA0121uLL);
  v5.CFIndex location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

id MobileGestalt_copy_debugBoardRevision_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"DrSqlXYNVfYXCvAsuUrUDA");

  return v0;
}

BOOL MobileGestalt_get_delaySleepForHeadsetClickCapability()
{
  return MGGetBoolAnswer((const char **)@"Mh+drGtyBfLYKN02sROzxg");
}

BOOL MobileGestalt_get_desenseBuild()
{
  return MGGetBoolAnswer((const char **)@"OWLyWlUOIkl+eQB7Iq37xQ");
}

BOOL MobileGestalt_get_deviceAlwaysPrewarmActuator()
{
  return MGGetBoolAnswer((const char **)@"M+WPVivF4iTnm1CC8c6h+A");
}

uint64_t MobileGestalt_get_deviceBackGlassMaterial(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"bUJD9zcOcitJwFA0ieIkxA");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D770518(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_deviceBackingColor(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"CJcvxERO5v/3IWjDFKZKRw");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D770590(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_deviceBrand(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"fuKL2rMywRgQF1wowOA/cg");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D770608(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

char *MobileGestalt_copy_deviceClass()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"+3Uf0Pm5F8Xy7Onyvko0vA");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_deviceClass_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"+3Uf0Pm5F8Xy7Onyvko0vA");

  return v0;
}

char *MobileGestalt_copy_deviceColor()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"mumHZHMLEfAuTkkd28fHlQ");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_deviceColor_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"mumHZHMLEfAuTkkd28fHlQ");

  return v0;
}

uint64_t MobileGestalt_get_deviceColorMapPolicy(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"87sSAh2rboMI2TDvFBimkg");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D7706F8(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_deviceCoprocessorIsT1()
{
  return MGGetBoolAnswer((const char **)@"TLU8Pwcsys+5y2UFoMOjPA");
}

float MobileGestalt_get_deviceCornerRadius(void *a1)
{
  id v1 = a1;
  int valuePtr = -1082130432;
  uint64_t v2 = MGCopyAnswer((const char **)@"y5dppxx/LzxoNuW+iIKR3g");
  if (v2)
  {
    CFDictionaryRef v3 = v2;
    CFTypeID v4 = CFGetTypeID(v2);
    if (v4 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v3, kCFNumberFloat32Type, &valuePtr))
      {
LABEL_10:
        CFRelease(v3);
        float v6 = *(float *)&valuePtr;
        goto LABEL_11;
      }
      CFTypeID v5 = [v1 log];
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      CFTypeID v5 = [v1 log];
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_19D770770(v5, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_10;
  }
  float v6 = -1.0;
LABEL_11:

  return v6;
}

uint64_t MobileGestalt_get_deviceCoverGlassCoating(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"psOb+c5by4e5OqReDiFm7w");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D7707E8(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_deviceCoverGlassColor(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"9N7qIucqhr0Cy2/Tk27/hw");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D770860(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_deviceCoverGlassMaterial(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"gnQwi8RnEeMG9qBe3IUKrg");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D7708D8(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_deviceCoverMaterial(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"iaegRQa4jNGOuTA6hnZmcQ");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D770950(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_deviceDefaultsToAnalyticsOptIn()
{
  return MGGetBoolAnswer((const char **)@"TpY9O1U1rtUk/m0BvlO58A");
}

char *MobileGestalt_copy_deviceEnclosureColor()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"JhEU414EIaDvAz8ki5DSqw");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_deviceEnclosureColor_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"JhEU414EIaDvAz8ki5DSqw");

  return v0;
}

uint64_t MobileGestalt_get_deviceEnclosureMaterial(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"AtmPEO/j+Pdr8+WKxv4Aaw");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D7709C8(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_deviceEnclosureRGBColor(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"TXZxlSojLMQyLqusm9aa/g");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D770A40(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_deviceHasAggregateCamera()
{
  return MGGetBoolAnswer((const char **)@"0/VAyl58TL5U/mAQEJNRQw");
}

uint64_t MobileGestalt_get_deviceHasEmbeddedSIMOnlyBoard(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"UDftNoVOBIs9cSeia57q1A");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D770AB8(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_deviceHasNAN()
{
  return MGGetBoolAnswer((const char **)@"YgC2TeHCEwzJ/ixqmNCzwQ");
}

uint64_t MobileGestalt_get_deviceHousingColor(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"NJsxTSI2WuD+13rxShXX9w");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D770B30(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

UInt8 *MobileGestalt_copy_deviceHousingColorUncooked()
{
  CFDataRef v0 = (const __CFData *)MGCopyAnswer((const char **)@"0GizaJLOyfzgAbxQ/5aniA");
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  size_t Length = CFDataGetLength(v0);
  CFDictionaryRef v3 = (UInt8 *)malloc_type_malloc(Length, 0x191301F9uLL);
  v5.CFIndex location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

id MobileGestalt_copy_deviceHousingColorUncooked_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"0GizaJLOyfzgAbxQ/5aniA");

  return v0;
}

BOOL MobileGestalt_get_deviceIsMuseCapable()
{
  return MGGetBoolAnswer((const char **)@"VGDDUFPWHbX/Ie9RSI0yDQ");
}

BOOL MobileGestalt_get_deviceIsNED()
{
  return MGGetBoolAnswer((const char **)@"NDnoY3adyyskgiIQBNtlyQ");
}

BOOL MobileGestalt_get_deviceIsPortableMac()
{
  return MGGetBoolAnswer((const char **)@"T0FD6BT+PiWc2duMVlTRww");
}

UInt8 *MobileGestalt_copy_deviceKeyboardCalibration()
{
  CFDataRef v0 = (const __CFData *)MGCopyAnswer((const char **)@"DrrXMX9VWX7bMj0MZuhTUA");
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  size_t Length = CFDataGetLength(v0);
  CFDictionaryRef v3 = (UInt8 *)malloc_type_malloc(Length, 0x9A6EB5EBuLL);
  v5.CFIndex location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

id MobileGestalt_copy_deviceKeyboardCalibration_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"DrrXMX9VWX7bMj0MZuhTUA");

  return v0;
}

id MobileGestalt_copy_deviceLaunchTimeLimitScale_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"emXA9B552rnSoI7xXE91DA");

  return v0;
}

uint64_t MobileGestalt_get_deviceLowBatteryLevel(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"XnXl4MhKZx3zRKvA7ZwIYQ");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D770BA8(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_deviceMemorySize(void *a1)
{
  id v1 = a1;
  uint64_t v2 = -1;
  uint64_t valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"iJAKoV0Bp88r37qG+kkXzw");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt64Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D770C20(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_deviceMesaType(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"iTvGxmtSOnHv548XON379A");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D770C98(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

char *MobileGestalt_copy_deviceName()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"rkqlwPcRHwixY4gapPjanw");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_deviceName_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"rkqlwPcRHwixY4gapPjanw");

  return v0;
}

char *MobileGestalt_copy_deviceNameString()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"JUWcn+5Ss0nvr5w/jk4WEg");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_deviceNameString_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"JUWcn+5Ss0nvr5w/jk4WEg");

  return v0;
}

BOOL MobileGestalt_get_devicePrefers3DBuildingStrokes()
{
  return MGGetBoolAnswer((const char **)@"xbNo7dj2oAnz92JhEOn9tw");
}

BOOL MobileGestalt_get_devicePrefersBuildingStrokes()
{
  return MGGetBoolAnswer((const char **)@"QFnvO2shAYI+d4bj3qXuFQ");
}

BOOL MobileGestalt_get_devicePrefersCheapTrafficShaders()
{
  return MGGetBoolAnswer((const char **)@"7D54DikSnFQnbDEBwlKQTQ");
}

BOOL MobileGestalt_get_devicePrefersProceduralAntiAliasing()
{
  return MGGetBoolAnswer((const char **)@"bysMryc4yLwQjKvUQGGXXQ");
}

BOOL MobileGestalt_get_devicePrefersTrafficAlpha()
{
  return MGGetBoolAnswer((const char **)@"0VkTunHOJrrZdolQXR5gCg");
}

BOOL MobileGestalt_get_deviceProximityCapability()
{
  return MGGetBoolAnswer((const char **)@"9RryeqF6OCWlbaXP2Qsoag");
}

uint64_t MobileGestalt_get_deviceRGBColor(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"8/tysfSvORoyVg9IE901oQ");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D770D10(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_deviceRequiresPetalOptimization()
{
  return MGGetBoolAnswer((const char **)@"82Ono2SP03rNGkhOc5O1Mw");
}

BOOL MobileGestalt_get_deviceRequiresProximityAmeliorations()
{
  return MGGetBoolAnswer((const char **)@"r5QUsvvgcb2Qmuflua13fQ");
}

BOOL MobileGestalt_get_deviceRequiresSoftwareBrightnessCalculations()
{
  return MGGetBoolAnswer((const char **)@"2Qf/8sQyx6voo3Mw3QKgZQ");
}

id MobileGestalt_copy_deviceSceneUpdateTimeLimitScale_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"QbQzuIbef01P4JeoL9EmKg");

  return v0;
}

uint64_t MobileGestalt_get_deviceStingHousingColor(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"rtIWWK0kM4F+ZMkIqhE7yQ");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D770D88(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_deviceSubBrand(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"wtUF1NceYeLT6IHovZvocw");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D770E00(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_deviceSuportsExternalDriverKit()
{
  return MGGetBoolAnswer((const char **)@"Tqr2NqCLwGszJc3HOaPlTw");
}

BOOL MobileGestalt_get_deviceSupports1080P()
{
  return MGGetBoolAnswer((const char **)@"Mk4ZslaChmO+6s3h7L1w6Q");
}

BOOL MobileGestalt_get_deviceSupports3DImagery()
{
  return MGGetBoolAnswer((const char **)@"ohnQBWkVQf2nu9Vr/9uLug");
}

BOOL MobileGestalt_get_deviceSupports3DMaps()
{
  return MGGetBoolAnswer((const char **)@"HIaq6xVZ/V8B9pnigcvqCA");
}

BOOL MobileGestalt_get_deviceSupports3RdPartyHaptics()
{
  return MGGetBoolAnswer((const char **)@"6S9CvPHPtzHQqKudHSfsag");
}

BOOL MobileGestalt_get_deviceSupports4G()
{
  return MGGetBoolAnswer((const char **)@"eu8pUYR7yo+AlS9aojlgwg");
}

BOOL MobileGestalt_get_deviceSupports4K()
{
  return MGGetBoolAnswer((const char **)@"Fh2Ga0/Sj4T3Qn5Z9A9BMw");
}

BOOL MobileGestalt_get_deviceSupports64Bit()
{
  return MGGetBoolAnswer((const char **)@"V2Ykm/0M3CA6nyNhwNInsg");
}

BOOL MobileGestalt_get_deviceSupports720P()
{
  return MGGetBoolAnswer((const char **)@"lwHRTZNO5Jq87pVlzdNGIA");
}

BOOL MobileGestalt_get_deviceSupports80ChargeLimit()
{
  return MGGetBoolAnswer((const char **)@"37NVydb//GP/GrhuTN+exg");
}

BOOL MobileGestalt_get_deviceSupports9Pin()
{
  return MGGetBoolAnswer((const char **)@"qWGVjnlN/wWMhlWgfNcSBg");
}

BOOL MobileGestalt_get_deviceSupportsAODVibrancy()
{
  return MGGetBoolAnswer((const char **)@"ykpu7qyhqFweVMKtxNylWA");
}

BOOL MobileGestalt_get_deviceSupportsAOP()
{
  return MGGetBoolAnswer((const char **)@"HHF6YgqEQ9Kd7MBSVnLsgg");
}

BOOL MobileGestalt_get_deviceSupportsAOP2()
{
  return MGGetBoolAnswer((const char **)@"ceKgtkUE4F9ywcr57zdUWA");
}

BOOL MobileGestalt_get_deviceSupportsARKit()
{
  return MGGetBoolAnswer((const char **)@"67A3BpQkCRe1ihx0Me4lgg");
}

BOOL MobileGestalt_get_deviceSupportsASTC()
{
  return MGGetBoolAnswer((const char **)@"ji56BO1mUeT7Qg9RO7Er9w");
}

BOOL MobileGestalt_get_deviceSupportsAbsoluteAltimeter()
{
  return MGGetBoolAnswer((const char **)@"PFnuFyqMMnGUQQnTqS5byg");
}

BOOL MobileGestalt_get_deviceSupportsAbsoluteDepth()
{
  return MGGetBoolAnswer((const char **)@"Ijs+pw5tRyxqSy5kfgZNuQ");
}

BOOL MobileGestalt_get_deviceSupportsActiveNFCReadingOnly()
{
  return MGGetBoolAnswer((const char **)@"rGc8UCjL0zBt51mv81FtIg");
}

BOOL MobileGestalt_get_deviceSupportsAdaptiveMapsUI()
{
  return MGGetBoolAnswer((const char **)@"whbsdxpLirBFgUbLH3+0JA");
}

BOOL MobileGestalt_get_deviceSupportsAdvancedMapRendering()
{
  return MGGetBoolAnswer((const char **)@"UoeNJcQ336tc+F5/1r4tqQ");
}

BOOL MobileGestalt_get_deviceSupportsAdvancedVoiceProcessorChatFlavor()
{
  return MGGetBoolAnswer((const char **)@"52jOwM53SViDv1B3wZIIOg");
}

BOOL MobileGestalt_get_deviceSupportsAlmond()
{
  return MGGetBoolAnswer((const char **)@"lAu7Xt7uV5eHu3pIdfHyYA");
}

BOOL MobileGestalt_get_deviceSupportsAlwaysAPVoiceTrigger()
{
  return MGGetBoolAnswer((const char **)@"l/bXsek3q5yjYDwoPAktVQ");
}

BOOL MobileGestalt_get_deviceSupportsAlwaysListening()
{
  return MGGetBoolAnswer((const char **)@"U+73bmG4kBGj6kpreQXUTQ");
}

BOOL MobileGestalt_get_deviceSupportsAlwaysOnCompass()
{
  return MGGetBoolAnswer((const char **)@"aCQx2Qq/TChnNAq1rr6Egw");
}

BOOL MobileGestalt_get_deviceSupportsAlwaysOnDisplay()
{
  return MGGetBoolAnswer((const char **)@"2OOJf1VhaM7NxfRok3HbWQ");
}

BOOL MobileGestalt_get_deviceSupportsAlwaysOnDisplayFlipbook()
{
  return MGGetBoolAnswer((const char **)@"aoJSd/MXk7M40NgXTM6x+g");
}

BOOL MobileGestalt_get_deviceSupportsAppleLPM()
{
  return MGGetBoolAnswer((const char **)@"RbiXiBQAmypd3Btw3jADAw");
}

BOOL MobileGestalt_get_deviceSupportsAutoDim()
{
  return MGGetBoolAnswer((const char **)@"tbdNCtok0BwuLN11WwnwsQ");
}

BOOL MobileGestalt_get_deviceSupportsAutoLowLightVideo()
{
  return MGGetBoolAnswer((const char **)@"AX/UKxSHwm+OuFRIdvNAfg");
}

BOOL MobileGestalt_get_deviceSupportsAvatars()
{
  return MGGetBoolAnswer((const char **)@"y4GIxpQP4MO/j3wWUJdiyg");
}

BOOL MobileGestalt_get_deviceSupportsBatteryInformation()
{
  return MGGetBoolAnswer((const char **)@"Kao6GNYdAy5hwXblxeGYJQ");
}

BOOL MobileGestalt_get_deviceSupportsBatteryModuleAuthentication()
{
  return MGGetBoolAnswer((const char **)@"D6/BMDrlb8V3WSiqL8gL+w");
}

BOOL MobileGestalt_get_deviceSupportsBeacon()
{
  return MGGetBoolAnswer((const char **)@"ugia43pinTp0pukSIYQ7uA");
}

BOOL MobileGestalt_get_deviceSupportsBerkelium2()
{
  return MGGetBoolAnswer((const char **)@"wNdWl5xfBJmJGNWJr5t0zA");
}

BOOL MobileGestalt_get_deviceSupportsBootChime()
{
  return MGGetBoolAnswer((const char **)@"QHxt+hGLaBPbQJbXiUJX3w");
}

BOOL MobileGestalt_get_deviceSupportsBreathingDisturbancesMeasurements()
{
  return MGGetBoolAnswer((const char **)@"e0HV2blYUDBk/MsMEQACNA");
}

BOOL MobileGestalt_get_deviceSupportsBrook()
{
  return MGGetBoolAnswer((const char **)@"TR6Z82EVZEKMVUdHfkhDmQ");
}

BOOL MobileGestalt_get_deviceSupportsBrowserEngine()
{
  return MGGetBoolAnswer((const char **)@"FE4Tff1EICGXaI27X3P/dw");
}

BOOL MobileGestalt_get_deviceSupportsBrowserEngineEmbedded()
{
  return MGGetBoolAnswer((const char **)@"Fe55gxpfp6SByfqjASqF5A");
}

BOOL MobileGestalt_get_deviceSupportsCCK()
{
  return MGGetBoolAnswer((const char **)@"L47fh6KehOmR+AseqK2Xsw");
}

BOOL MobileGestalt_get_deviceSupportsCameraCaptureOnTouchDown()
{
  return MGGetBoolAnswer((const char **)@"gQDt76Te0SPw7N8oTLrBFw");
}

BOOL MobileGestalt_get_deviceSupportsCameraDeferredProcessing()
{
  return MGGetBoolAnswer((const char **)@"E9a3UzlfYjWEB9viQCHNAA");
}

BOOL MobileGestalt_get_deviceSupportsCameraHaptics()
{
  return MGGetBoolAnswer((const char **)@"XriAxQ+JY1z5nt5f3ftXVw");
}

BOOL MobileGestalt_get_deviceSupportsCarIntegration()
{
  return MGGetBoolAnswer((const char **)@"XFtUsQP3AyqT4CazSb5VCw");
}

BOOL MobileGestalt_get_deviceSupportsCarPlay2()
{
  return MGGetBoolAnswer((const char **)@"PR+xeEtTAiUN0R25+EYGfw");
}

BOOL MobileGestalt_get_deviceSupportsCinnamon()
{
  return MGGetBoolAnswer((const char **)@"j1pdCAYnpIEYMqIAitm3JA");
}

BOOL MobileGestalt_get_deviceSupportsCollisionSOS()
{
  return MGGetBoolAnswer((const char **)@"HCzWusHQwZDea6nNhaKndw");
}

BOOL MobileGestalt_get_deviceSupportsCompassOrienteering()
{
  return MGGetBoolAnswer((const char **)@"GPIs61LYNpcwZqwlFr7bbg");
}

BOOL MobileGestalt_get_deviceSupportsConcurrentHPLPMics()
{
  return MGGetBoolAnswer((const char **)@"dI30ovtFUIeLioNQKDMbGQ");
}

BOOL MobileGestalt_get_deviceSupportsCorrectedTemperature()
{
  return MGGetBoolAnswer((const char **)@"E0wrprlNya8gngoVpPXj2w");
}

BOOL MobileGestalt_get_deviceSupportsCrudeProx()
{
  return MGGetBoolAnswer((const char **)@"a/mex6YNO6gJ8N8SxAA71A");
}

BOOL MobileGestalt_get_deviceSupportsCyclingAutoStartReminders()
{
  return MGGetBoolAnswer((const char **)@"e8KVLQDfW5n4LxdE3N84Xw");
}

BOOL MobileGestalt_get_deviceSupportsDCP()
{
  return MGGetBoolAnswer((const char **)@"IhNb6V2L1pt+hBlZMsm5FQ");
}

BOOL MobileGestalt_get_deviceSupportsDClr()
{
  return MGGetBoolAnswer((const char **)@"XkfGVYlrkBQJgaGabHESJQ");
}

BOOL MobileGestalt_get_deviceSupportsDisplayPort()
{
  return MGGetBoolAnswer((const char **)@"CoWnN4xo783YGn4wLrUatA");
}

BOOL MobileGestalt_get_deviceSupportsDoNotDisturbWhileDriving()
{
  return MGGetBoolAnswer((const char **)@"Kq9K9xqDoUiUP7JEfg+pNw");
}

BOOL MobileGestalt_get_deviceSupportsDynamicEndOfCharge()
{
  return MGGetBoolAnswer((const char **)@"drMm12aFyD64om7eXVFRVA");
}

BOOL MobileGestalt_get_deviceSupportsDynamicEndOfChargeLegacyHW()
{
  return MGGetBoolAnswer((const char **)@"nfR1IphTGCaoFNu3NrCtWQ");
}

BOOL MobileGestalt_get_deviceSupportsDynamicIsland()
{
  return MGGetBoolAnswer((const char **)@"YlEtTtHlNesRBMal1CqRaA");
}

BOOL MobileGestalt_get_deviceSupportsELabel()
{
  return MGGetBoolAnswer((const char **)@"awim/yUQvLyTrKsoKhg2bA");
}

BOOL MobileGestalt_get_deviceSupportsEUCapabilities()
{
  return MGGetBoolAnswer((const char **)@"dz7F2FFseAysXoUZqaANZw");
}

BOOL MobileGestalt_get_deviceSupportsElton()
{
  return MGGetBoolAnswer((const char **)@"l1CWke97nbaAcWDqA6T5LA");
}

BOOL MobileGestalt_get_deviceSupportsEnhancedAC3()
{
  return MGGetBoolAnswer((const char **)@"kyszW/uUGJFTVNQwFaf6og");
}

BOOL MobileGestalt_get_deviceSupportsEnhancedMultitasking()
{
  return MGGetBoolAnswer((const char **)@"qeaj75wk3HF4DwQ8qbIi7g");
}

BOOL MobileGestalt_get_deviceSupportsEnvironmentalDosimetry()
{
  return MGGetBoolAnswer((const char **)@"SaW+DA+cbiqDHrex8MTABA");
}

BOOL MobileGestalt_get_deviceSupportsExternalHDR()
{
  return MGGetBoolAnswer((const char **)@"feC7TgoAAKLjn/KU8JAKFA");
}

BOOL MobileGestalt_get_deviceSupportsFairPlaySecureVideoPath()
{
  return MGGetBoolAnswer((const char **)@"trBC4VS5gVmCv6Wg41Hryw");
}

BOOL MobileGestalt_get_deviceSupportsFindApplePencil()
{
  return MGGetBoolAnswer((const char **)@"nXbrTiBAf1dbo4sCn7xs2w");
}

BOOL MobileGestalt_get_deviceSupportsFloorCounting()
{
  return MGGetBoolAnswer((const char **)@"nK4D+jDUuTGFFwRFPC2lWg");
}

BOOL MobileGestalt_get_deviceSupportsFrameSynchronousBrightness()
{
  return MGGetBoolAnswer((const char **)@"/oWN4fE81uA9pCW4FmD7Ug");
}

BOOL MobileGestalt_get_deviceSupportsGrey()
{
  return MGGetBoolAnswer((const char **)@"8Vbp0HyqndjWuIFZibhu7g");
}

BOOL MobileGestalt_get_deviceSupportsHDRDeferredProcessing()
{
  return MGGetBoolAnswer((const char **)@"JkZlE8z9YwHjE1hnbMhcgA");
}

BOOL MobileGestalt_get_deviceSupportsHDRPhotoDisplay()
{
  return MGGetBoolAnswer((const char **)@"a1r7npIrhXsZ7SmKRKC1eA");
}

BOOL MobileGestalt_get_deviceSupportsHaptics()
{
  return MGGetBoolAnswer((const char **)@"cBy4BcYs5YWtFHbBpt4C6A");
}

BOOL MobileGestalt_get_deviceSupportsHardwareDetents()
{
  return MGGetBoolAnswer((const char **)@"V9pLLbPQhyb75bbdTioZVw");
}

BOOL MobileGestalt_get_deviceSupportsHeartHealthAlerts()
{
  return MGGetBoolAnswer((const char **)@"H+r3Nk8ByXIY9ub/M8broA");
}

BOOL MobileGestalt_get_deviceSupportsHeartRateVariability()
{
  return MGGetBoolAnswer((const char **)@"/Oajtq8qODrC4XBBOULF3A");
}

BOOL MobileGestalt_get_deviceSupportsHiResBuildings()
{
  return MGGetBoolAnswer((const char **)@"MjqwTHDneTCNeqhZ7vCvUw");
}

BOOL MobileGestalt_get_deviceSupportsIndependentOutputOnSpeaker()
{
  return MGGetBoolAnswer((const char **)@"6VRApe6L2vc1r2s+xts9/w");
}

BOOL MobileGestalt_get_deviceSupportsInductiveCharging()
{
  return MGGetBoolAnswer((const char **)@"s7nuHoZIYNoOHCqT9iyZkQ");
}

BOOL MobileGestalt_get_deviceSupportsLaguna()
{
  return MGGetBoolAnswer((const char **)@"s8TgWYc7BjtSNbtuycqauw");
}

BOOL MobileGestalt_get_deviceSupportsLandscapeFaceID()
{
  return MGGetBoolAnswer((const char **)@"eP/CPXY0Q1CoIqAWn/J97g");
}

BOOL MobileGestalt_get_deviceSupportsLanguageDownloadUI()
{
  return MGGetBoolAnswer((const char **)@"TACCxk6y28d14yJN09RtTg");
}

BOOL MobileGestalt_get_deviceSupportsLiDAR()
{
  return MGGetBoolAnswer((const char **)@"8bCjks0zVuOcdivIhytNbQ");
}

BOOL MobileGestalt_get_deviceSupportsLineIn()
{
  return MGGetBoolAnswer((const char **)@"Mgwtle8wzQEz/0vzBk47FQ");
}

BOOL MobileGestalt_get_deviceSupportsLiquidDetectionCorrosionMitigation()
{
  return MGGetBoolAnswer((const char **)@"XxnEk9uiIk5vCdbWEGt7lA");
}

BOOL MobileGestalt_get_deviceSupportsLiveActivities()
{
  return MGGetBoolAnswer((const char **)@"e4ZSDal1Fg7QfCA7rlNmSQ");
}

BOOL MobileGestalt_get_deviceSupportsLivePhotoAuto()
{
  return MGGetBoolAnswer((const char **)@"pQzfsK0Ado+nkNFgPRIA8Q");
}

BOOL MobileGestalt_get_deviceSupportsLiveVideoRendering()
{
  return MGGetBoolAnswer((const char **)@"xqvkN8MjIzTv37omKFzrwg");
}

BOOL MobileGestalt_get_deviceSupportsLockdown()
{
  return MGGetBoolAnswer((const char **)@"7ZipyD32hkjOUTl66Q8REw");
}

BOOL MobileGestalt_get_deviceSupportsLongFormAudio()
{
  return MGGetBoolAnswer((const char **)@"tBrEf4ccS4Q6wtUiNB0WKw");
}

BOOL MobileGestalt_get_deviceSupportsLowLatency()
{
  return MGGetBoolAnswer((const char **)@"1CFbwvaGHR/89vDu2VjnpQ");
}

BOOL MobileGestalt_get_deviceSupportsLowPowerSoundClassification()
{
  return MGGetBoolAnswer((const char **)@"V0d6pv080gHL3QQWNs9aog");
}

BOOL MobileGestalt_get_deviceSupportsMTP()
{
  return MGGetBoolAnswer((const char **)@"68eiAurB2LJ96Vz/CzaAcA");
}

BOOL MobileGestalt_get_deviceSupportsMapsBlurredUI()
{
  return MGGetBoolAnswer((const char **)@"5y8gwXr/HXkhryza4xQeFg");
}

BOOL MobileGestalt_get_deviceSupportsMapsOpticalHeading()
{
  return MGGetBoolAnswer((const char **)@"nJU6/TSuJTVJlJ7t5/Z/ug");
}

BOOL MobileGestalt_get_deviceSupportsMomentCapture()
{
  return MGGetBoolAnswer((const char **)@"DtSpvgyOyNVwNa5W0zigqg");
}

BOOL MobileGestalt_get_deviceSupportsMultiUser()
{
  return MGGetBoolAnswer((const char **)@"il2TbGC66RCTKaEgSOVlgQ");
}

BOOL MobileGestalt_get_deviceSupportsNFC()
{
  return MGGetBoolAnswer((const char **)@"byGRtH44VNik9CzN/QKLCw");
}

BOOL MobileGestalt_get_deviceSupportsNavigation()
{
  return MGGetBoolAnswer((const char **)@"ee9YfVjjsbVte45bYSt4Wg");
}

BOOL MobileGestalt_get_deviceSupportsNewton()
{
  return MGGetBoolAnswer((const char **)@"nAl8QWlApaJQkipRf38fdg");
}

BOOL MobileGestalt_get_deviceSupportsOnDemandPhotoAnalysis()
{
  return MGGetBoolAnswer((const char **)@"ik8OQ5JoYhyK8AoTx29MuA");
}

BOOL MobileGestalt_get_deviceSupportsP3ColorspaceVideoRecording()
{
  return MGGetBoolAnswer((const char **)@"1eBwtCIwbIDdC80wiyzfow");
}

BOOL MobileGestalt_get_deviceSupportsPeriodicALSUpdates()
{
  return MGGetBoolAnswer((const char **)@"Leuy56dCZmAMYoVCQGTfPA");
}

BOOL MobileGestalt_get_deviceSupportsPhotosInpainting()
{
  return MGGetBoolAnswer((const char **)@"XNCjqOupLM/S8fNyxRNQTA");
}

BOOL MobileGestalt_get_deviceSupportsPhotosLocalLight()
{
  return MGGetBoolAnswer((const char **)@"m9ORTKMgu9A+zF+A61Zz5A");
}

BOOL MobileGestalt_get_deviceSupportsPortraitIntensityAdjustments()
{
  return MGGetBoolAnswer((const char **)@"L8CqbJeM+rf7l7NSOjnAHg");
}

BOOL MobileGestalt_get_deviceSupportsPortraitLightEffectFilters()
{
  return MGGetBoolAnswer((const char **)@"hewg+QX1h57eGJGphdCong");
}

BOOL MobileGestalt_get_deviceSupportsRGB10()
{
  return MGGetBoolAnswer((const char **)@"hOkus/A6lBEF6Ar3jV7LrQ");
}

BOOL MobileGestalt_get_deviceSupportsRaiseToSpeak()
{
  return MGGetBoolAnswer((const char **)@"4D8XW4YwJI7QvyPhv1TEdw");
}

BOOL MobileGestalt_get_deviceSupportsReverseZoom()
{
  return MGGetBoolAnswer((const char **)@"sQwlfROu8fcD1Qwm8YJVeg");
}

uint64_t MobileGestalt_get_deviceSupportsSWProRes(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"oWUSugFxOVhHOKYv7DawLw");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D770E78(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_deviceSupportsScandium()
{
  return MGGetBoolAnswer((const char **)@"eXzS2kvF8nNOI/xIJKquHg");
}

BOOL MobileGestalt_get_deviceSupportsSecureDoubleClick()
{
  return MGGetBoolAnswer((const char **)@"DoMjIR2qPkxXtP/kDu/gfQ");
}

BOOL MobileGestalt_get_deviceSupportsSecureMicrophone()
{
  return MGGetBoolAnswer((const char **)@"7UhDrmrZozgwO+3AgUbHxw");
}

BOOL MobileGestalt_get_deviceSupportsSiDP()
{
  return MGGetBoolAnswer((const char **)@"q69vauqK9djnPlEZBFBV4A");
}

BOOL MobileGestalt_get_deviceSupportsSideButtonClickSpeed()
{
  return MGGetBoolAnswer((const char **)@"Bg8VW4HdQj+GVY+191T3nQ");
}

BOOL MobileGestalt_get_deviceSupportsSimplisticRoadMesh()
{
  return MGGetBoolAnswer((const char **)@"ChBMzkxYdT9Xmw3QN5kMWA");
}

BOOL MobileGestalt_get_deviceSupportsSingleCameraPortrait()
{
  return MGGetBoolAnswer((const char **)@"FymLPtOEy6FdE7TmKeoTdg");
}

BOOL MobileGestalt_get_deviceSupportsSingleDisplayEnhancedMultitasking()
{
  return MGGetBoolAnswer((const char **)@"fbpzGGoBNcvDLt4LlZGnfA");
}

BOOL MobileGestalt_get_deviceSupportsSiriBargeIn()
{
  return MGGetBoolAnswer((const char **)@"WXi7NQbOKnEX4vPQFeZAdQ");
}

BOOL MobileGestalt_get_deviceSupportsSiriHub()
{
  return MGGetBoolAnswer((const char **)@"waGD2UTpntjbDXD1r3oALQ");
}

BOOL MobileGestalt_get_deviceSupportsSiriSpeaks()
{
  return MGGetBoolAnswer((const char **)@"PTQ+ABwag03BwO/CKvIK/A");
}

BOOL MobileGestalt_get_deviceSupportsSiriSpokenMessages()
{
  return MGGetBoolAnswer((const char **)@"0AJUv/uYPsRiZNGpWJ7zfg");
}

uint64_t MobileGestalt_get_deviceSupportsSiriUnderstandingOnDevice(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"K/R1GfGfCkXvEhaPS2Vrng");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D770EF0(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_deviceSupportsSpatialFaceTimeAudioPlayback()
{
  return MGGetBoolAnswer((const char **)@"/EVOCjM/Nmb2roP5ebtEFA");
}

BOOL MobileGestalt_get_deviceSupportsSpatialOverCapture()
{
  return MGGetBoolAnswer((const char **)@"SjQQ07G8UacM7E69G7dPbg");
}

BOOL MobileGestalt_get_deviceSupportsStageLightPortraitPreview()
{
  return MGGetBoolAnswer((const char **)@"IMUksyctl4kC/BFI2K/Qyw");
}

BOOL MobileGestalt_get_deviceSupportsStereoAudioRecording()
{
  return MGGetBoolAnswer((const char **)@"YlK+0xmxNWhNn/+r8SM8kA");
}

BOOL MobileGestalt_get_deviceSupportsStudioLightPortraitPreview()
{
  return MGGetBoolAnswer((const char **)@"oLjiDs+BWEdMVbjE0x6cnw");
}

BOOL MobileGestalt_get_deviceSupportsSwimmingWorkouts()
{
  return MGGetBoolAnswer((const char **)@"cRjPy4Ef+KZwJ+nfPeBV5Q");
}

BOOL MobileGestalt_get_deviceSupportsTVContinuityCamera()
{
  return MGGetBoolAnswer((const char **)@"5hfTRTYOuOthOyRny6a38w");
}

BOOL MobileGestalt_get_deviceSupportsTapToWake()
{
  return MGGetBoolAnswer((const char **)@"yZf3GTRMGTuwSV/lD7Cagw");
}

BOOL MobileGestalt_get_deviceSupportsTelephonyOverUSB()
{
  return MGGetBoolAnswer((const char **)@"YiUtBQygkHRhLcdO3LFB4A");
}

BOOL MobileGestalt_get_deviceSupportsTethering()
{
  return MGGetBoolAnswer((const char **)@"xSh3mf5+Zuoz6xhxEah0zQ");
}

BOOL MobileGestalt_get_deviceSupportsThunderbolt()
{
  return MGGetBoolAnswer((const char **)@"4ec+Q3FdQ1N0HeNpOPsmfA");
}

BOOL MobileGestalt_get_deviceSupportsTimeInDaylight()
{
  return MGGetBoolAnswer((const char **)@"8gVfz9/8R1OtWBBtI0o/+Q");
}

BOOL MobileGestalt_get_deviceSupportsToneMapping()
{
  return MGGetBoolAnswer((const char **)@"Lcu6Zck+C/+AMO8qULacDw");
}

BOOL MobileGestalt_get_deviceSupportsTwilight()
{
  return MGGetBoolAnswer((const char **)@"1Bk5Dr0hTb0bYXl04068MQ");
}

BOOL MobileGestalt_get_deviceSupportsUSBTypeC()
{
  return MGGetBoolAnswer((const char **)@"BWoQXWXYITrPRpFyc9xTLw");
}

BOOL MobileGestalt_get_deviceSupportsUSBTypeCDisplay()
{
  return MGGetBoolAnswer((const char **)@"khE304sL66yzf7K+2e+0cw");
}

BOOL MobileGestalt_get_deviceSupportsUnconditionalPluckItCollection()
{
  return MGGetBoolAnswer((const char **)@"1N37hGont/jibw4G2hwdRg");
}

UInt8 *MobileGestalt_copy_deviceSupportsVSHCompensation()
{
  CFDataRef v0 = (const __CFData *)MGCopyAnswer((const char **)@"QuSuh/r6w4M730U5XhKzrg");
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  size_t Length = CFDataGetLength(v0);
  CFDictionaryRef v3 = (UInt8 *)malloc_type_malloc(Length, 0xD6F3C121uLL);
  v5.CFIndex location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

id MobileGestalt_copy_deviceSupportsVSHCompensation_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"QuSuh/r6w4M730U5XhKzrg");

  return v0;
}

BOOL MobileGestalt_get_deviceSupportsVirtualResearchEnvironment()
{
  return MGGetBoolAnswer((const char **)@"YAbRmHobt+BRHuSPm2OGQw");
}

BOOL MobileGestalt_get_deviceSupportsVoiceOverCanUseSiriVoice()
{
  return MGGetBoolAnswer((const char **)@"tbBVomzeDyPq15QV5VGQGg");
}

BOOL MobileGestalt_get_deviceSupportsWalkingRadiusAnimation()
{
  return MGGetBoolAnswer((const char **)@"X5yfJDYNipZXIS8R2a7RmA");
}

BOOL MobileGestalt_get_deviceSupportsWatchSpeakerPlayback()
{
  return MGGetBoolAnswer((const char **)@"rJl1HTk57uav5OTZZAyc6g");
}

BOOL MobileGestalt_get_deviceSupportsWebkit()
{
  return MGGetBoolAnswer((const char **)@"sJmYs82RucA1MWX5jHFSjA");
}

BOOL MobileGestalt_get_deviceSupportsWirelessChargingEnergyUseNotification()
{
  return MGGetBoolAnswer((const char **)@"FLmEtGw+OD98VLXasx7W6A");
}

BOOL MobileGestalt_get_deviceSupportsWirelessSplitting()
{
  return MGGetBoolAnswer((const char **)@"2zyzecwSf2ZYRpB3tuQhOQ");
}

BOOL MobileGestalt_get_deviceSupportsYCbCr10()
{
  return MGGetBoolAnswer((const char **)@"v2Q3tLoD4+o/XazHC/0FyA");
}

BOOL MobileGestalt_get_deviceSupportseARC()
{
  return MGGetBoolAnswer((const char **)@"K57p2Tit1BlJ8rFbLl/Nqg");
}

char *MobileGestalt_copy_deviceVariant()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"SvI9oDkzw4XJFd+dKen/2Q");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_deviceVariant_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"SvI9oDkzw4XJFd+dKen/2Q");

  return v0;
}

char *MobileGestalt_copy_deviceVariantGuess()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"IMLaTlxS7ITtwfbRfPYWuA");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_deviceVariantGuess_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"IMLaTlxS7ITtwfbRfPYWuA");

  return v0;
}

UInt8 *MobileGestalt_copy_diagData()
{
  CFDataRef v0 = (const __CFData *)MGCopyAnswer((const char **)@"67x5O+zO+JwnGgmKlq+qdA");
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  size_t Length = CFDataGetLength(v0);
  CFDictionaryRef v3 = (UInt8 *)malloc_type_malloc(Length, 0xBCC0A96AuLL);
  v5.CFIndex location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

id MobileGestalt_copy_diagData_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"67x5O+zO+JwnGgmKlq+qdA");

  return v0;
}

BOOL MobileGestalt_get_dictationCapability()
{
  return MGGetBoolAnswer((const char **)@"1uZbhSbBhsNCsVSsopZ4qg");
}

uint64_t MobileGestalt_get_dieId(void *a1)
{
  id v1 = a1;
  uint64_t v2 = -1;
  uint64_t valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"Z/TJS0IaLyq10dcSvUTGPg");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt64Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D770F68(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

id MobileGestalt_copy_diskUsage_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"uyejyEdaxNWSRQQwHmXz1A");

  return v0;
}

uint64_t MobileGestalt_get_displayBootRotation(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"m7lDS+oP8q0pGg+CO7RvPg");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D770FE0(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

UInt8 *MobileGestalt_copy_displayDriverICChipID()
{
  CFDataRef v0 = (const __CFData *)MGCopyAnswer((const char **)@"yPqGUljqvtItkM6XMCZaQw");
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  size_t Length = CFDataGetLength(v0);
  CFDictionaryRef v3 = (UInt8 *)malloc_type_malloc(Length, 0x153BA13AuLL);
  v5.CFIndex location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

id MobileGestalt_copy_displayDriverICChipID_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"yPqGUljqvtItkM6XMCZaQw");

  return v0;
}

BOOL MobileGestalt_get_displayFCCLogosViaSoftwareCapability()
{
  return MGGetBoolAnswer((const char **)@"ueuuYQk48HGWm/cJlHq/Dw");
}

uint64_t MobileGestalt_get_displayInactiveBrightnessClass(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"Z+gc4OJwBMm2YaVtp4usig");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D771058(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_displayMaxNits(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"awLQ2KgwSTZswuKgSSjmEQ");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D7710D0(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_displayMirroringCapability()
{
  return MGGetBoolAnswer((const char **)@"iFOX66VmcijipO3YRc+AXg");
}

BOOL MobileGestalt_get_displayPortCapability()
{
  return MGGetBoolAnswer((const char **)@"vl45ziHlkqzh1Yt6+M9vBA");
}

BOOL MobileGestalt_get_dualSIMActivationPolicyCapable()
{
  return MGGetBoolAnswer((const char **)@"jkr5aFPOh/d6zTzNKYthBw");
}

char *MobileGestalt_copy_dynamicFunctionRowSerialNumber()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"Bb01MNJ0ezfSmzucKZXrsg");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_dynamicFunctionRowSerialNumber_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"Bb01MNJ0ezfSmzucKZXrsg");

  return v0;
}

uint64_t MobileGestalt_get_eOSHalleyConfiguration(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"bt5D9RI67C9koJO1oZ5cfg");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D771148(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_eUICCChipID(void *a1)
{
  id v1 = a1;
  uint64_t v2 = -1;
  uint64_t valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"qWG594bTi87edQCSYxlLeA");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt64Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D7711C0(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_effectiveProductionStatusAp()
{
  return MGGetBoolAnswer((const char **)@"AQiIpW0UeYQKnhy2da7AXg");
}

BOOL MobileGestalt_get_effectiveProductionStatusSEP()
{
  return MGGetBoolAnswer((const char **)@"PNexcW/LBlPgAm+Skp2EAg");
}

BOOL MobileGestalt_get_effectiveSecurityModeAp()
{
  return MGGetBoolAnswer((const char **)@"vENa/R1xAXLobl8r3PBL6w");
}

BOOL MobileGestalt_get_effectiveSecurityModeSEP()
{
  return MGGetBoolAnswer((const char **)@"QJSuJ2zhdxYX/7DUA2JtUw");
}

BOOL MobileGestalt_get_encodeAACCapability()
{
  return MGGetBoolAnswer((const char **)@"fqNtLlgbYfa9gSNrhg7VGQ");
}

BOOL MobileGestalt_get_encryptedDataPartitionCapability()
{
  return MGGetBoolAnswer((const char **)@"i8+iwUtLtB5jT+WNvqwrEA");
}

BOOL MobileGestalt_get_enforceCameraShutterClick()
{
  return MGGetBoolAnswer((const char **)@"xJUG7IKySthRrPcxII184g");
}

BOOL MobileGestalt_get_enforceGoogleMail()
{
  return MGGetBoolAnswer((const char **)@"Js8HVdVGRs8m5v94pMjkRw");
}

BOOL MobileGestalt_get_ephemeralDataModeEnabled()
{
  return MGGetBoolAnswer((const char **)@"sNm4HYxfChAt48rf54qAyQ");
}

id MobileGestalt_copy_ephemeralDataModeOverride_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"mx9l9PlJACEcOixUVDZEjg");

  return v0;
}

char *MobileGestalt_copy_ethernetMacAddress()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"VG9TCKNqNLCHk0J6zTkuVQ");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_ethernetMacAddress_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"VG9TCKNqNLCHk0J6zTkuVQ");

  return v0;
}

BOOL MobileGestalt_get_exclaveCapability()
{
  return MGGetBoolAnswer((const char **)@"oAX1wYJl2iL3BX2G9LA7iw");
}

BOOL MobileGestalt_get_explicitContentRestriction()
{
  return MGGetBoolAnswer((const char **)@"AthxlkPBk46HtzM9AxK9vg");
}

char *MobileGestalt_copy_extendedLOMMacAddress()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"WAfNjeiwOd/k6+VU6D6SIQ");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_extendedLOMMacAddress_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"WAfNjeiwOd/k6+VU6D6SIQ");

  return v0;
}

uint64_t MobileGestalt_get_extendedSecurityDomain(void *a1)
{
  id v1 = a1;
  uint64_t v2 = -1;
  uint64_t valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"9uRuEueUQZFyet0P69AWMw");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt64Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D771238(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_externalChargeCapability()
{
  return MGGetBoolAnswer((const char **)@"NPzjaX07XnS4KcMZ+l8ymA");
}

BOOL MobileGestalt_get_externalPowerSourceConnected()
{
  return MGGetBoolAnswer((const char **)@"na6PSBfq05lkAfWkwAwaGg");
}

BOOL MobileGestalt_get_fdrSealingStatus()
{
  return MGGetBoolAnswer((const char **)@"VHTcx7WQq0V7YgGKZisRWA");
}

BOOL MobileGestalt_get_fmfallowed()
{
  return MGGetBoolAnswer((const char **)@"Y2Y67z0Nq/XdDXgW2EeaVg");
}

uint64_t MobileGestalt_get_facetimeBackCameraTemporalNoiseReductionMode(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"JXmZWYUbLoumvz7hu/GL0A");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D7712B0(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_facetimeBitRate2G(void *a1)
{
  id v1 = a1;
  uint64_t v2 = -1;
  uint64_t valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"Nhm02nvVOaQPimpOshlO1g");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt64Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D771328(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_facetimeBitRate3G(void *a1)
{
  id v1 = a1;
  uint64_t v2 = -1;
  uint64_t valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"1rf3rZXIZFgznqrHlPehuQ");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt64Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D7713A0(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_facetimeBitRateLTE(void *a1)
{
  id v1 = a1;
  uint64_t v2 = -1;
  uint64_t valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"xunfK8NYNCS75N2z2buKWQ");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt64Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D771418(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_facetimeBitRateWiFi(void *a1)
{
  id v1 = a1;
  uint64_t v2 = -1;
  uint64_t valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"h8xonkkn/NzDMvvCXLw8cQ");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt64Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D771490(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_facetimeCameraRequiresFastSwitchOptions()
{
  return MGGetBoolAnswer((const char **)@"J912s3mVzhReVtPv4HwqNQ");
}

BOOL MobileGestalt_get_facetimeCameraSupportsHardwareFaceDetection()
{
  return MGGetBoolAnswer((const char **)@"Po0s2Vf6g2ZqymKGNLFxeQ");
}

id MobileGestalt_copy_facetimeDecodings_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"yl8qmYPdAhFLeDBho10sdQ");

  return v0;
}

id MobileGestalt_copy_facetimeEncodings_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"BoNz1QXiAEUgic9RdMVLIg");

  return v0;
}

uint64_t MobileGestalt_get_facetimeFrontCameraTemporalNoiseReductionMode(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"CK3I7fFGkgeqzKEhGew9rQ");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D771508(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_facetimePhotosOptIn()
{
  return MGGetBoolAnswer((const char **)@"4RgFi8v1sfuhCZhRdQkxxQ");
}

id MobileGestalt_copy_facetimePreferredDecoding_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"APeknA55ZAcu0FcufqVN4Q");

  return v0;
}

id MobileGestalt_copy_facetimePreferredEncoding_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"ct5Dh6u0D6WDJKg2PrMFVQ");

  return v0;
}

UInt8 *MobileGestalt_copy_firmwareNonce()
{
  CFDataRef v0 = (const __CFData *)MGCopyAnswer((const char **)@"VLfT+eziZYKNjRASM6ntnQ");
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  size_t Length = CFDataGetLength(v0);
  CFDictionaryRef v3 = (UInt8 *)malloc_type_malloc(Length, 0xF2F03DE2uLL);
  v5.CFIndex location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

id MobileGestalt_copy_firmwareNonce_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"VLfT+eziZYKNjRASM6ntnQ");

  return v0;
}

id MobileGestalt_copy_firmwarePreflightInfo_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"qOwiNS0eFEq9oi3MNsgxWg");

  return v0;
}

char *MobileGestalt_copy_firmwareVersion()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"LeSRsiLoJCMhjn6nd6GWbQ");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_firmwareVersion_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"LeSRsiLoJCMhjn6nd6GWbQ");

  return v0;
}

id MobileGestalt_copy_firstPartyLaunchTimeLimitScale_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"NUYAz1eq3Flzt7ZQxXC/ng");

  return v0;
}

BOOL MobileGestalt_get_forwardCameraCapability()
{
  return MGGetBoolAnswer((const char **)@"H97G3GzDYb4wY5kwJ0AKfQ");
}

char *MobileGestalt_copy_framebufferIdentifier()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"xojWvSTQWT7Icy+xfVzjAQ");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_framebufferIdentifier_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"xojWvSTQWT7Icy+xfVzjAQ");

  return v0;
}

id MobileGestalt_copy_frontCameraOffsetFromDisplayCenter_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"uksZ8eaKeV5sUpLNBPafww");

  return v0;
}

uint64_t MobileGestalt_get_frontCameraRotationForISP(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"dQf5OObttLFgJniqrS19qA");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D771580(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

id MobileGestalt_copy_frontCameraRotationFromDisplayNormal_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"g5LBi+DCiP5+jUnWVL7Y9w");

  return v0;
}

BOOL MobileGestalt_get_frontFacingCameraAutoHDRCapability()
{
  return MGGetBoolAnswer((const char **)@"fv8ZXM/NhUHQBQqCSk19cA");
}

BOOL MobileGestalt_get_frontFacingCameraBurstCapability()
{
  return MGGetBoolAnswer((const char **)@"Ty5/C8UDfdjcdR853kulmA");
}

BOOL MobileGestalt_get_frontFacingCameraCapability()
{
  return MGGetBoolAnswer((const char **)@"mAAbkChrX3bpxPIffHG1BQ");
}

BOOL MobileGestalt_get_frontFacingCameraHDRCapability()
{
  return MGGetBoolAnswer((const char **)@"7W2eNk/f6uewC8N58mlRrQ");
}

BOOL MobileGestalt_get_frontFacingCameraHDROnCapability()
{
  return MGGetBoolAnswer((const char **)@"HnHX0gXt8RvhMQzIVMM7hw");
}

BOOL MobileGestalt_get_frontFacingCameraHFRCapability()
{
  return MGGetBoolAnswer((const char **)@"1gsBzuZsXu2rXZJBE01M0w");
}

uint64_t MobileGestalt_get_frontFacingCameraHFRVideoCapture1080PMaxFPS(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"mL1lk3ZVGDFUQhxU9YLW6Q");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D7715F8(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_frontFacingCameraHFRVideoCapture720PMaxFPS(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"TqAfAH10ANDgiG7V2u8BkQ");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D771670(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_frontFacingCameraMaxVideoZoomFactor(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"ZeGw3VKUymUAbp4noKsxoQ");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D7716E8(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

char *MobileGestalt_copy_frontFacingCameraModuleSerialNumber()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"qlcdNkarcGLcbW3HvBhwaA");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_frontFacingCameraModuleSerialNumber_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"qlcdNkarcGLcbW3HvBhwaA");

  return v0;
}

BOOL MobileGestalt_get_frontFacingCameraSingleCameraPortrait()
{
  return MGGetBoolAnswer((const char **)@"fYsrGTmVTbneEs3HKetEdQ");
}

BOOL MobileGestalt_get_frontFacingCameraStageLightPortraitCaptureCapability()
{
  return MGGetBoolAnswer((const char **)@"ocYC+NyuthjbvU9CyI4Z8Q");
}

uint64_t MobileGestalt_get_frontFacingCameraStillDurationForBurst(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"TDM8SEI14n2KE9PGHO0a4A");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D771760(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_frontFacingCameraSuperWideCameraCapability()
{
  return MGGetBoolAnswer((const char **)@"fI93k3j19qMaEqYkKKI7BQ");
}

BOOL MobileGestalt_get_frontFacingCameraVariableFrameRateCapability()
{
  return MGGetBoolAnswer((const char **)@"THo7EIAWJiQExmTeHpevLg");
}

uint64_t MobileGestalt_get_frontFacingCameraVideoCapture1080PMaxFPS(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"3yzXj0lJhQi+r3kgQlwiOg");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D7717D8(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_frontFacingCameraVideoCapture4KMaxFPS(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"cux58RcuSiBhpxWnT3pE4A");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D771850(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_frontFacingCameraVideoCapture720PMaxFPS(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"0AFeHRmliNJ4pSlVb8ltZA");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D7718C8(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

char *MobileGestalt_copy_frontFacingIRCameraModuleSerialNumber()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"2kuITg6XPwXl8zbpx+hoCw");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_frontFacingIRCameraModuleSerialNumber_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"2kuITg6XPwXl8zbpx+hoCw");

  return v0;
}

char *MobileGestalt_copy_frontFacingIRStructuredLightProjectorModuleSerialNumber()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"wH7fRq4TDdYG2pN1KDQW/A");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_frontFacingIRStructuredLightProjectorModuleSerialNumber_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"wH7fRq4TDdYG2pN1KDQW/A");

  return v0;
}

BOOL MobileGestalt_get_frontFacingLowLightCameraCapability()
{
  return MGGetBoolAnswer((const char **)@"ud+MF+BkcM1zeTxPJCsHpg");
}

BOOL MobileGestalt_get_full6FeaturesCapability()
{
  return MGGetBoolAnswer((const char **)@"fW9C1U4C1FR8bwe1VqEWug");
}

BOOL MobileGestalt_get_gpsCapability()
{
  return MGGetBoolAnswer((const char **)@"ZiSlYxYSkyaYImU3lrSXWw");
}

char *MobileGestalt_copy_gsDeviceName()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"9s45ldrCC1WF+7b6C4H2BA");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_gsDeviceName_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"9s45ldrCC1WF+7b6C4H2BA");

  return v0;
}

BOOL MobileGestalt_get_gameKitCapability()
{
  return MGGetBoolAnswer((const char **)@"guykxGaRwHdenUK8fJRl8w");
}

BOOL MobileGestalt_get_gasGaugeBatteryCapability()
{
  return MGGetBoolAnswer((const char **)@"FOs+LbLUs+TajsEE4xkbrw");
}

BOOL MobileGestalt_get_generativeModelSystemsCapability()
{
  return MGGetBoolAnswer((const char **)@"I3lidq+FVH2CeOi/ARa0tg");
}

BOOL MobileGestalt_get_groundhogEnabled()
{
  return MGGetBoolAnswer((const char **)@"Knrkxkj5zZTf/FrPNQClgg");
}

BOOL MobileGestalt_get_gyroscopeCapability()
{
  return MGGetBoolAnswer((const char **)@"4+qmMh9JBDh72Nq6fD64RQ");
}

BOOL MobileGestalt_get_h264EncoderCapability()
{
  return MGGetBoolAnswer((const char **)@"SCNOHu+KqRX0xhIlj5KXaA");
}

BOOL MobileGestalt_get_hdRImageCaptureCapability()
{
  return MGGetBoolAnswer((const char **)@"fh6DnnDGDVZ5kZ9nYn/GrQ");
}

BOOL MobileGestalt_get_hdVideoCaptureCapability()
{
  return MGGetBoolAnswer((const char **)@"6pjDdEw65TFyL1FmIdszXw");
}

BOOL MobileGestalt_get_hevcDecoder10BitSupported()
{
  return MGGetBoolAnswer((const char **)@"ZEU7pCEskBhjQ4AOMuALDw");
}

BOOL MobileGestalt_get_hevcDecoder12BitSupported()
{
  return MGGetBoolAnswer((const char **)@"sigsyX/a/CpMjoZnrgwIgg");
}

BOOL MobileGestalt_get_hevcDecoder8BitSupported()
{
  return MGGetBoolAnswer((const char **)@"N8lZxRgC7lfdRS3dRLn+Ag");
}

BOOL MobileGestalt_get_hevcEncodingCapability()
{
  return MGGetBoolAnswer((const char **)@"g/MkWm2Ac6+TLNBgtBGxsg");
}

char *MobileGestalt_copy_hwModelStr()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"/YYygAofPDbhrwToVsXdeA");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_hwModelStr_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"/YYygAofPDbhrwToVsXdeA");

  return v0;
}

BOOL MobileGestalt_get_hallEffectSensorCapability()
{
  return MGGetBoolAnswer((const char **)@"/Pop5T2XQdDA60MRyxQJdQ");
}

uint64_t MobileGestalt_get_hapticsPowerControlFeatures(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"s2qnnwugvb7yAD70+Uho7g");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D771940(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_hardwareEncodeSnapshotsCapability()
{
  return MGGetBoolAnswer((const char **)@"m+FD6mX8VZzP95hOhM+jow");
}

BOOL MobileGestalt_get_hardwareKeyboardCapability()
{
  return MGGetBoolAnswer((const char **)@"/GK+yfRFY/b5ZDIDpdVImg");
}

char *MobileGestalt_copy_hardwarePlatform()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"5pYKlGnYYBzGvAlIU8RjEQ");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_hardwarePlatform_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"5pYKlGnYYBzGvAlIU8RjEQ");

  return v0;
}

BOOL MobileGestalt_get_hardwareSnapshotsRequirePurpleGfxCapability()
{
  return MGGetBoolAnswer((const char **)@"FDsm68UVR7l3wErusGLgKg");
}

BOOL MobileGestalt_get_hardwareSupportsSecureDoubleClick()
{
  return MGGetBoolAnswer((const char **)@"l3rf7ZBrcaYn5mY5o7xiIg");
}

BOOL MobileGestalt_get_hasAllFeaturesCapability()
{
  return MGGetBoolAnswer((const char **)@"QGmb9t2ZMFVwOImO6fewgQ");
}

BOOL MobileGestalt_get_hasAppleNeuralEngine()
{
  return MGGetBoolAnswer((const char **)@"+N9mZUAHooNvMiQnjeTJ8g");
}

BOOL MobileGestalt_get_hasBaseband()
{
  return MGGetBoolAnswer((const char **)@"AJFQheZDyUbvI6RmBMT9Cg");
}

BOOL MobileGestalt_get_hasBattery()
{
  return MGGetBoolAnswer((const char **)@"pX2TxZTxWKS7QSXZDC/Z6A");
}

BOOL MobileGestalt_get_hasDaliMode()
{
  return MGGetBoolAnswer((const char **)@"3m1Q0AXlqeA2C/LmqdTndQ");
}

BOOL MobileGestalt_get_hasExtendedColorDisplay()
{
  return MGGetBoolAnswer((const char **)@"Aixt/MEN2O2B7f+8m4TxUA");
}

BOOL MobileGestalt_get_hasHighBandwidthRadio()
{
  return MGGetBoolAnswer((const char **)@"IMZVdlDQXGM67ILcDE7hlA");
}

BOOL MobileGestalt_get_hasIcefall()
{
  return MGGetBoolAnswer((const char **)@"v9YZN998zL0OLA3q6SpPQA");
}

BOOL MobileGestalt_get_hasInternalSettingsBundle()
{
  return MGGetBoolAnswer((const char **)@"Oji6HRoPi7rH7HPdWVakuw");
}

BOOL MobileGestalt_get_hasMesa()
{
  return MGGetBoolAnswer((const char **)@"HV7WDiidgMf7lwAu++Lk5w");
}

BOOL MobileGestalt_get_hasPKA()
{
  return MGGetBoolAnswer((const char **)@"fkWvcjYnYzGRhVKiBoYzgA");
}

BOOL MobileGestalt_get_hasPartiallyOccludedDisplay()
{
  return MGGetBoolAnswer((const char **)@"yf309VokHnvuZ4SyOixR5A");
}

BOOL MobileGestalt_get_hasSEP()
{
  return MGGetBoolAnswer((const char **)@"7DfjbzhvH/GDkhio1dv8fA");
}

BOOL MobileGestalt_get_hasSpringBoard()
{
  return MGGetBoolAnswer((const char **)@"OBqqs000I0SR+EbJ7VO8UQ");
}

BOOL MobileGestalt_get_hasThinBezel()
{
  return MGGetBoolAnswer((const char **)@"RA3I5nhSK65i1ZxkRxQKfg");
}

BOOL MobileGestalt_get_healthKitCapability()
{
  return MGGetBoolAnswer((const char **)@"xDg5n/9rR2cMhp7MK0irBA");
}

BOOL MobileGestalt_get_hearingAidAudioEqualizationCapability()
{
  return MGGetBoolAnswer((const char **)@"SMgTCc2v9AU2ziIHRX8qww");
}

BOOL MobileGestalt_get_hearingAidLowEnergyAudioCapability()
{
  return MGGetBoolAnswer((const char **)@"RyXm3yMC4ejlFvwlEI509w");
}

BOOL MobileGestalt_get_hearingAidPowerReductionCapability()
{
  return MGGetBoolAnswer((const char **)@"u3c0R+31Df4SUTHrICQkTg");
}

BOOL MobileGestalt_get_hidpiCapability()
{
  return MGGetBoolAnswer((const char **)@"lSpe1QHIya0aeNrjLTtaJA");
}

float MobileGestalt_get_hiccoughInterval(void *a1)
{
  id v1 = a1;
  int valuePtr = -1082130432;
  uint64_t v2 = MGCopyAnswer((const char **)@"f8peylp799CJta4Ev/vz8A");
  if (v2)
  {
    CFDictionaryRef v3 = v2;
    CFTypeID v4 = CFGetTypeID(v2);
    if (v4 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v3, kCFNumberFloat32Type, &valuePtr))
      {
LABEL_10:
        CFRelease(v3);
        float v6 = *(float *)&valuePtr;
        goto LABEL_11;
      }
      uint64_t v5 = [v1 log];
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      uint64_t v5 = [v1 log];
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_19D7719B8(v5, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_10;
  }
  float v6 = -1.0;
LABEL_11:

  return v6;
}

BOOL MobileGestalt_get_hideNonDefaultApplicationsCapability()
{
  return MGGetBoolAnswer((const char **)@"cHla4KIe1wv0OvpRVrzy/w");
}

uint64_t MobileGestalt_get_highestSupportedVideoMode(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"ND6ZSbBBgMgwtMfh+OL5Wg");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D771A30(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_homeButtonType(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"JwLB44/jEB8aFDpXQ16Tuw");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D771AA8(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_homeScreenWallpaperCapability()
{
  return MGGetBoolAnswer((const char **)@"mVenV0u+B3ShrqRddinaFQ");
}

BOOL MobileGestalt_get_horsemanCapability()
{
  return MGGetBoolAnswer((const char **)@"X9cK3qXzcFCrVpE258P2lQ");
}

char *MobileGestalt_copy_humanReadableProductVersionString()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"ToLFRidm+eJGWnpw6W4Wwg");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_humanReadableProductVersionString_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"ToLFRidm+eJGWnpw6W4Wwg");

  return v0;
}

BOOL MobileGestalt_get_idamCapability()
{
  return MGGetBoolAnswer((const char **)@"QdL5XM6PGBrjvJ/k187Ueg");
}

BOOL MobileGestalt_get_iOSurfaceBackedImagesCapability()
{
  return MGGetBoolAnswer((const char **)@"0/2HluYMd/whD80Hua4Rpw");
}

id MobileGestalt_copy_iOSurfaceFormatDictionary_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"AoKnINTLPoKML3ctoP0AZg");

  return v0;
}

char *MobileGestalt_copy_iceFallID()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"hfs43coKE3iWlCwnqPgBpg");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_iceFallID_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"hfs43coKE3iWlCwnqPgBpg");

  return v0;
}

BOOL MobileGestalt_get_icefallInRestrictedMode()
{
  return MGGetBoolAnswer((const char **)@"2sWGezz2RezScIJJgiIYQg");
}

UInt8 *MobileGestalt_copy_icefallInfo()
{
  CFDataRef v0 = (const __CFData *)MGCopyAnswer((const char **)@"MW1p1oJH8nDJc6igOb8G4g");
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  size_t Length = CFDataGetLength(v0);
  CFDictionaryRef v3 = (UInt8 *)malloc_type_malloc(Length, 0x1BC5A8D7uLL);
  v5.CFIndex location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

id MobileGestalt_copy_icefallInfo_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"MW1p1oJH8nDJc6igOb8G4g");

  return v0;
}

char *MobileGestalt_copy_image4CryptoHashMethod()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"Nzu4E/VsXjEIa83CkRdZrQ");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_image4CryptoHashMethod_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"Nzu4E/VsXjEIa83CkRdZrQ");

  return v0;
}

BOOL MobileGestalt_get_image4Supported()
{
  return MGGetBoolAnswer((const char **)@"kyxFFGn+VS4L9a/bsvm19Q");
}

BOOL MobileGestalt_get_inDiagnosticsMode()
{
  return MGGetBoolAnswer((const char **)@"3kmXfug8VcxLI5yEmsqQKw");
}

char *MobileGestalt_copy_integratedCircuitCardIdentifier()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"j4dedPnpeXouudM1+j3dsQ");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_integratedCircuitCardIdentifier_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"j4dedPnpeXouudM1+j3dsQ");

  return v0;
}

char *MobileGestalt_copy_integratedCircuitCardIdentifier2()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"lHMDJnC58naUz2rOCJyVIw");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_integratedCircuitCardIdentifier2_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"lHMDJnC58naUz2rOCJyVIw");

  return v0;
}

char *MobileGestalt_copy_internationalMobileEquipmentIdentity()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"QZgogo2DypSAZfkRW4dP/A");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_internationalMobileEquipmentIdentity_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"QZgogo2DypSAZfkRW4dP/A");

  return v0;
}

char *MobileGestalt_copy_internationalMobileEquipmentIdentity2()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"xRyzf9zFE/ycr/wJPweZvQ");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_internationalMobileEquipmentIdentity2_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"xRyzf9zFE/ycr/wJPweZvQ");

  return v0;
}

BOOL MobileGestalt_get_internationalSettingsCapability()
{
  return MGGetBoolAnswer((const char **)@"tUIqcYyzHuWBvBQHsLk8IQ");
}

char *MobileGestalt_copy_inverseDeviceID()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"frZQaeyWLUvLjeuEK43hmg");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_inverseDeviceID_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"frZQaeyWLUvLjeuEK43hmg");

  return v0;
}

BOOL MobileGestalt_get_isComputeController()
{
  return MGGetBoolAnswer((const char **)@"NLWYUp5icK9sRsPDI7XJtw");
}

BOOL MobileGestalt_get_isComputeNode()
{
  return MGGetBoolAnswer((const char **)@"RvCUAjrf7O/zAzV1StnBlg");
}

BOOL MobileGestalt_get_isEmulatedDevice()
{
  return MGGetBoolAnswer((const char **)@"z5G/N9jcMdgPm8UegLwbKg");
}

BOOL MobileGestalt_get_isLargeFormatPhone()
{
  return MGGetBoolAnswer((const char **)@"iBLsDETxB4ATmspGucaJyg");
}

BOOL MobileGestalt_get_isPwrOpposedVol()
{
  return MGGetBoolAnswer((const char **)@"euampscYbKXqj/bSaHD0QA");
}

BOOL MobileGestalt_get_isServicePart()
{
  return MGGetBoolAnswer((const char **)@"1plD8faLv1bhScZQ3t0PLQ");
}

BOOL MobileGestalt_get_isThereEnoughBatteryLevelForSoftwareUpdate()
{
  return MGGetBoolAnswer((const char **)@"o/mXrucvBSYUXqq7K3UzKA");
}

BOOL MobileGestalt_get_isUIBuild()
{
  return MGGetBoolAnswer((const char **)@"I32sGclpgl5VujQRJxyhKQ");
}

BOOL MobileGestalt_get_isVirtualDevice()
{
  return MGGetBoolAnswer((const char **)@"MrC93gcyPVLHmEbzUu9uzQ");
}

char *MobileGestalt_copy_jasperSerialNumber()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"dJvRNnysMoubdy0ZCK2aRQ");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_jasperSerialNumber_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"dJvRNnysMoubdy0ZCK2aRQ");

  return v0;
}

BOOL MobileGestalt_get_keyboardMutePreservesRegionalShutterClickBehavior()
{
  return MGGetBoolAnswer((const char **)@"bGUN8lS6sYzy3xhePubp8A");
}

BOOL MobileGestalt_get_keyboardMutePreservesRegionalShutterClickBehaviorForLegacyDevices()
{
  return MGGetBoolAnswer((const char **)@"Bim3FC83Te8QX1kfSpqYKQ");
}

BOOL MobileGestalt_get_lteDeviceCapability()
{
  return MGGetBoolAnswer((const char **)@"1X0zc2JwBdYOQrMAyP81DQ");
}

BOOL MobileGestalt_get_launchTimeLimitScaleSupported()
{
  return MGGetBoolAnswer((const char **)@"AklmqJyJMChzHsYT0aiBbw");
}

UInt8 *MobileGestalt_copy_liDARCalibrationPrCL()
{
  CFDataRef v0 = (const __CFData *)MGCopyAnswer((const char **)@"njUcH4bm+JBmvASakDdObg");
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  size_t Length = CFDataGetLength(v0);
  CFDictionaryRef v3 = (UInt8 *)malloc_type_malloc(Length, 0xACCC6EA0uLL);
  v5.CFIndex location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

id MobileGestalt_copy_liDARCalibrationPrCL_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"njUcH4bm+JBmvASakDdObg");

  return v0;
}

BOOL MobileGestalt_get_lisaCapability()
{
  return MGGetBoolAnswer((const char **)@"4RwhtNOmePfUXmu57rh+KA");
}

BOOL MobileGestalt_get_loadThumbnailsWhileScrollingCapability()
{
  return MGGetBoolAnswer((const char **)@"1N14oS9TeyskaTU1DxpwoQ");
}

char *MobileGestalt_copy_localizedDeviceNameString()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"+VIu65zA5EW4ztayJXvOUg");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_localizedDeviceNameString_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"+VIu65zA5EW4ztayJXvOUg");

  return v0;
}

BOOL MobileGestalt_get_locationRemindersCapability()
{
  return MGGetBoolAnswer((const char **)@"BOPZue5C0v42pU9iJFYE3A");
}

BOOL MobileGestalt_get_locationServicesCapability()
{
  return MGGetBoolAnswer((const char **)@"0pY9r1XBV1duZ8HO3tBvFg");
}

id MobileGestalt_copy_lowPowerExpressModesSupported_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"JHXk7RXOxvlqK+SxkwcM2A");

  return v0;
}

BOOL MobileGestalt_get_lowPowerWalletMode()
{
  return MGGetBoolAnswer((const char **)@"Birtx7GxrxCCUzsE1JQO8Q");
}

char *MobileGestalt_copy_lunaFlexSerialNumber()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"2xSqkUxsVWmOBWk6StVOfQ");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_lunaFlexSerialNumber_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"2xSqkUxsVWmOBWk6StVOfQ");

  return v0;
}

UInt8 *MobileGestalt_copy_lynxPublicKey()
{
  CFDataRef v0 = (const __CFData *)MGCopyAnswer((const char **)@"HMpTbnbcAb+mQDi8O71h6Q");
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  size_t Length = CFDataGetLength(v0);
  CFDictionaryRef v3 = (UInt8 *)malloc_type_malloc(Length, 0xEC000D4CuLL);
  v5.CFIndex location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

id MobileGestalt_copy_lynxPublicKey_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"HMpTbnbcAb+mQDi8O71h6Q");

  return v0;
}

UInt8 *MobileGestalt_copy_lynxSerialNumber()
{
  CFDataRef v0 = (const __CFData *)MGCopyAnswer((const char **)@"r5pA2qLgR86BQKwgMjPWzg");
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  size_t Length = CFDataGetLength(v0);
  CFDictionaryRef v3 = (UInt8 *)malloc_type_malloc(Length, 0x83742AE7uLL);
  v5.CFIndex location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

id MobileGestalt_copy_lynxSerialNumber_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"r5pA2qLgR86BQKwgMjPWzg");

  return v0;
}

char *MobileGestalt_copy_mlbSerialNumber()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"Q1Ty5w8gxMWHx3p4lQ1fhA");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_mlbSerialNumber_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"Q1Ty5w8gxMWHx3p4lQ1fhA");

  return v0;
}

BOOL MobileGestalt_get_mmsCapability()
{
  return MGGetBoolAnswer((const char **)@"gKzNJcweSCWA+gIGiUQJ5w");
}

UInt8 *MobileGestalt_copy_macBridgingKeys()
{
  CFDataRef v0 = (const __CFData *)MGCopyAnswer((const char **)@"VdSOpM2K054AhCKBaXuiqw");
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  size_t Length = CFDataGetLength(v0);
  CFDictionaryRef v3 = (UInt8 *)malloc_type_malloc(Length, 0x47E16F8BuLL);
  v5.CFIndex location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

id MobileGestalt_copy_macBridgingKeys_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"VdSOpM2K054AhCKBaXuiqw");

  return v0;
}

char *MobileGestalt_copy_macFormFactor()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"m4alZgBFhxNuTZyrEM2nbA");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_macFormFactor_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"m4alZgBFhxNuTZyrEM2nbA");

  return v0;
}

char *MobileGestalt_copy_macPrefsAssetImage()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"a4GiDGlLmW0qD340gOCpFA");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_macPrefsAssetImage_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"a4GiDGlLmW0qD340gOCpFA");

  return v0;
}

BOOL MobileGestalt_get_magnetometerCapability()
{
  return MGGetBoolAnswer((const char **)@"ELLSWiPOyh0roYBypZFHFA");
}

uint64_t MobileGestalt_get_mainDisplayRotation(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"IIYjwu1lbAyGz5t0c4ECoA");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D771B20(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

UInt8 *MobileGestalt_copy_mainScreenCanvasSizes()
{
  CFDataRef v0 = (const __CFData *)MGCopyAnswer((const char **)@"ybGkijAwLTwevankfVzsDQ");
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  size_t Length = CFDataGetLength(v0);
  CFDictionaryRef v3 = (UInt8 *)malloc_type_malloc(Length, 0x35972BADuLL);
  v5.CFIndex location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

id MobileGestalt_copy_mainScreenCanvasSizes_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"ybGkijAwLTwevankfVzsDQ");

  return v0;
}

uint64_t MobileGestalt_get_mainScreenClass(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"fdh+s6j3VijuyrK7xLjd7g");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D771B98(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_mainScreenHeight(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"OjzOua0LkOegX7pQdgMksw");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D771C10(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

float MobileGestalt_get_mainScreenOrientation(void *a1)
{
  id v1 = a1;
  int valuePtr = -1082130432;
  uint64_t v2 = MGCopyAnswer((const char **)@"1qDdT/85SS7sxriK0wIbbg");
  if (v2)
  {
    CFDictionaryRef v3 = v2;
    CFTypeID v4 = CFGetTypeID(v2);
    if (v4 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v3, kCFNumberFloat32Type, &valuePtr))
      {
LABEL_10:
        CFRelease(v3);
        float v6 = *(float *)&valuePtr;
        goto LABEL_11;
      }
      CFTypeID v5 = [v1 log];
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      CFTypeID v5 = [v1 log];
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_19D771C88(v5, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_10;
  }
  float v6 = -1.0;
LABEL_11:

  return v6;
}

uint64_t MobileGestalt_get_mainScreenPitch(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"0l4wqBtWEAK1tOkeBHkU6Q");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D771D00(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_mainScreenWidth(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"g7YQ1Djxh4YiKlEeaoGhzg");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D771DF0(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

char *MobileGestalt_copy_marketingDeviceFamilyName()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"vme9Buk6XiWFCXoHApxNFA");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_marketingDeviceFamilyName_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"vme9Buk6XiWFCXoHApxNFA");

  return v0;
}

char *MobileGestalt_copy_marketingNameString()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"Z/dqyWS6OZTRy10UcmUAhw");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_marketingNameString_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"Z/dqyWS6OZTRy10UcmUAhw");

  return v0;
}

char *MobileGestalt_copy_marketingProductName()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"j9Th5smJpdztHwc+i39zIg");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_marketingProductName_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"j9Th5smJpdztHwc+i39zIg");

  return v0;
}

char *MobileGestalt_copy_marketingSOCNameString()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"Z06ZMtQY6G3kKrC7fs/gOA");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_marketingSOCNameString_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"Z06ZMtQY6G3kKrC7fs/gOA");

  return v0;
}

char *MobileGestalt_copy_marketingVersion()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"QtLcewkuPtPV0RpO+i0Zzw");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_marketingVersion_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"QtLcewkuPtPV0RpO+i0Zzw");

  return v0;
}

id MobileGestalt_copy_maxH264PlaybackLevel_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"4W7X4OWHjri5PGaAGsCWxw");

  return v0;
}

uint64_t MobileGestalt_get_maximumScreenScale(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"XmExwNGRvYTII6QC0+jvsA");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D771E68(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_medusaFloatingLiveAppCapability()
{
  return MGGetBoolAnswer((const char **)@"mG0AnH/Vy1veoqoLRAIgTA");
}

BOOL MobileGestalt_get_medusaOverlayAppCapability()
{
  return MGGetBoolAnswer((const char **)@"UCG5MkVahJxG1YULbbd5Bg");
}

BOOL MobileGestalt_get_medusaPIPCapability()
{
  return MGGetBoolAnswer((const char **)@"nVh/gwNpy7Jv1NOk00CMrw");
}

BOOL MobileGestalt_get_medusaPinnedAppCapability()
{
  return MGGetBoolAnswer((const char **)@"ZYqko/XM5zD3XBfN5RmaXA");
}

char *MobileGestalt_copy_mesaSerialNumber()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"jWdMTTxiAZc+KNO6Bz2jNg");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_mesaSerialNumber_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"jWdMTTxiAZc+KNO6Bz2jNg");

  return v0;
}

BOOL MobileGestalt_get_metalCapability()
{
  return MGGetBoolAnswer((const char **)@"hwd9ipb6eezNleN59+6n1Q");
}

uint64_t MobileGestalt_get_metalPerfLevelCapability(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"gme55xrmjlSlBkahnZq36A");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D771EE0(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_metalPerfLevelCapabilityOne4IOS()
{
  return MGGetBoolAnswer((const char **)@"oOV1jhJbdV3AddkcCg0AEA");
}

BOOL MobileGestalt_get_metalPerfLevelCapabilityOne4IPhoneAndiPad()
{
  return MGGetBoolAnswer((const char **)@"sI1x188eYDcARhSzXxk3Cg");
}

BOOL MobileGestalt_get_microphoneCapability()
{
  return MGGetBoolAnswer((const char **)@"s2UwZpwDQcywU3de47/ilw");
}

uint64_t MobileGestalt_get_microphoneCount(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"61xs1bQ+9eTk8tlRvG9UKw");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D771F58(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

char *MobileGestalt_copy_minimumSupportediTunesVersion()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"96GRvvjuBKkU4HzNsYcHPA");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_minimumSupportediTunesVersion_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"96GRvvjuBKkU4HzNsYcHPA");

  return v0;
}

BOOL MobileGestalt_get_mixAndMatchPrevention()
{
  return MGGetBoolAnswer((const char **)@"rxUlSnmihTL8oDg9Hrgq/A");
}

char *MobileGestalt_copy_mobileDeviceMinimumVersion()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"k+KTni1jrwErpcDMEnn3aw");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_mobileDeviceMinimumVersion_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"k+KTni1jrwErpcDMEnn3aw");

  return v0;
}

char *MobileGestalt_copy_mobileEquipmentIdentifier()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"xOEH0P1H/1jmYe2t54+5cQ");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_mobileEquipmentIdentifier_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"xOEH0P1H/1jmYe2t54+5cQ");

  return v0;
}

char *MobileGestalt_copy_mobileEquipmentInfoBaseId()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"inECTnNyR97XWxm7jU8uqA");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_mobileEquipmentInfoBaseId_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"inECTnNyR97XWxm7jU8uqA");

  return v0;
}

char *MobileGestalt_copy_mobileEquipmentInfoBaseProfile()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"heP+NTlvkhJ2zzWIUznawA");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_mobileEquipmentInfoBaseProfile_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"heP+NTlvkhJ2zzWIUznawA");

  return v0;
}

char *MobileGestalt_copy_mobileEquipmentInfoBaseVersion()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"RXyKSjeF239SL2vOcru01A");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_mobileEquipmentInfoBaseVersion_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"RXyKSjeF239SL2vOcru01A");

  return v0;
}

char *MobileGestalt_copy_mobileEquipmentInfoCSN()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"rkFHO5dZmWxy3QdOx7r7kA");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_mobileEquipmentInfoCSN_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"rkFHO5dZmWxy3QdOx7r7kA");

  return v0;
}

char *MobileGestalt_copy_mobileEquipmentInfoDisplayCSN()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"zPHFWx4ZItDiTXNT2onrWQ");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_mobileEquipmentInfoDisplayCSN_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"zPHFWx4ZItDiTXNT2onrWQ");

  return v0;
}

char *MobileGestalt_copy_mobileSubscriberCountryCode()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"CQ6gFmgMhpnnISvG6VakBQ");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_mobileSubscriberCountryCode_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"CQ6gFmgMhpnnISvG6VakBQ");

  return v0;
}

char *MobileGestalt_copy_mobileSubscriberNetworkCode()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"oJGeec0N+MudCr0LsdtbHw");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_mobileSubscriberNetworkCode_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"oJGeec0N+MudCr0LsdtbHw");

  return v0;
}

BOOL MobileGestalt_get_mobileWifi()
{
  return MGGetBoolAnswer((const char **)@"mtHZd1H8XJ2DMVtNVUSkag");
}

char *MobileGestalt_copy_modelNumber()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"D0cJ8r7U5zve6uA6QbOiLA");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_modelNumber_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"D0cJ8r7U5zve6uA6QbOiLA");

  return v0;
}

BOOL MobileGestalt_get_monarchLowEndHardware()
{
  return MGGetBoolAnswer((const char **)@"s+gaKNe68Gs3PfqKrZhi1w");
}

id MobileGestalt_copy_multiLynxPublicKeyArray_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"niQFEBBY7JaauAIosAyQQg");

  return v0;
}

id MobileGestalt_copy_multiLynxSerialNumberArray_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"juE6wCsjVG4bfAhgHcUVcQ");

  return v0;
}

BOOL MobileGestalt_get_multiTouchCapability()
{
  return MGGetBoolAnswer((const char **)@"pFpC81KCZegLf4FenQZ2OA");
}

uint64_t MobileGestalt_get_multiTouchMaxBootTime(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"EuwCLwMXh+X5LErHKwvuIw");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D771FD0(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_multitaskingCapability()
{
  return MGGetBoolAnswer((const char **)@"RECLuzbJ6oh8q4NKR8RtNg");
}

BOOL MobileGestalt_get_multitaskingGesturesCapability()
{
  return MGGetBoolAnswer((const char **)@"UFqkf9tcH1ltsOMzpdwSUw");
}

BOOL MobileGestalt_get_musicStoreCapability()
{
  return MGGetBoolAnswer((const char **)@"izFv/qj3IUhqAIiEuYH6xw");
}

BOOL MobileGestalt_get_n78AHack()
{
  return MGGetBoolAnswer((const char **)@"+bL/lKwaIAv+fzmjsHYZdw");
}

BOOL MobileGestalt_get_nfcRadio()
{
  return MGGetBoolAnswer((const char **)@"zxMIgVSILN6S5ee6MZhf+Q");
}

BOOL MobileGestalt_get_nfcRadioCalibrationDataPresent()
{
  return MGGetBoolAnswer((const char **)@"XFx5cRZ0tJYl+xJUCEgjnQ");
}

char *MobileGestalt_copy_nfcUniqueChipID()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"evtY5EeJ8V0nFhmrj/OYjg");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_nfcUniqueChipID_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"evtY5EeJ8V0nFhmrj/OYjg");

  return v0;
}

id MobileGestalt_copy_nVRAMDictionary_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"Q2jR+AUT9PTHUrP/mkdfxQ");

  return v0;
}

char *MobileGestalt_copy_nandControllerUID()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"PcQWbThCb7iLEW+EoqZdEQ");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_nandControllerUID_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"PcQWbThCb7iLEW+EoqZdEQ");

  return v0;
}

uint64_t MobileGestalt_get_navajoFusingState(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"LcUv5nw5flxnHlxWu9sJvw");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D772048(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_nikeIpodCapability()
{
  return MGGetBoolAnswer((const char **)@"qHVhw5NhezD+ljFUPvQb4g");
}

BOOL MobileGestalt_get_notGreenTeaDeviceCapability()
{
  return MGGetBoolAnswer((const char **)@"4snMZS8LJkSctKypt2m+xA");
}

BOOL MobileGestalt_get_oledDisplay()
{
  return MGGetBoolAnswer((const char **)@"noqTy5fUbyK03UHxWigBBQ");
}

BOOL MobileGestalt_get_otaActivationCapability()
{
  return MGGetBoolAnswer((const char **)@"38C0kq9NiVaMsqjlUsCHcQ");
}

id MobileGestalt_copy_oceanComputeCarrierID_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"qgfS+6l1exvcMW5Tfplv2Q");

  return v0;
}

id MobileGestalt_copy_oceanComputeCarrierSlot_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"LUy+wqFiBmou5hwM5OWbmA");

  return v0;
}

BOOL MobileGestalt_get_offlineDictationCapability()
{
  return MGGetBoolAnswer((const char **)@"c5uqoV7Z9ly+f4c5mYXILg");
}

BOOL MobileGestalt_get_onDeviceSiriCapability()
{
  return MGGetBoolAnswer((const char **)@"O/7gbXWA5X2IRPVtDRU+bw");
}

BOOL MobileGestalt_get_openGLES1Capability()
{
  return MGGetBoolAnswer((const char **)@"kt7gXeIiU0dLEKrgUSsLVw");
}

BOOL MobileGestalt_get_openGLES2Capability()
{
  return MGGetBoolAnswer((const char **)@"ce5pjDJVSOxjcg1HwmAezA");
}

BOOL MobileGestalt_get_openGLES3Capability()
{
  return MGGetBoolAnswer((const char **)@"LAB8o3Bxs3CgNuzDawjRdw");
}

uint64_t MobileGestalt_get_openGLESVersion(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"ErupMbaQrM6KypD4K0kTDQ");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D7720C0(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_oysterCapability()
{
  return MGGetBoolAnswer((const char **)@"0GUU+Z8xIu+7TE+scKXscg");
}

BOOL MobileGestalt_get_ptpLargeFilesCapability()
{
  return MGGetBoolAnswer((const char **)@"MWpHV1VYKXmaKqhgbmTWCg");
}

char *MobileGestalt_copy_panelSerialNumber()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"YVNo6vlMjhgQ9yGYV8gatw");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_panelSerialNumber_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"YVNo6vlMjhgQ9yGYV8gatw");

  return v0;
}

BOOL MobileGestalt_get_panoramaCameraCapability()
{
  return MGGetBoolAnswer((const char **)@"q4cLktMwtrx8dCJAQTeqTg");
}

char *MobileGestalt_copy_partitionStyle()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"yjP8DgByZmLk04Ta6f6DWQ");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_partitionStyle_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"yjP8DgByZmLk04Ta6f6DWQ");

  return v0;
}

char *MobileGestalt_copy_partitionType()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"xUHcyT2/HE8oi/4LaOI+Sw");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_partitionType_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"xUHcyT2/HE8oi/4LaOI+Sw");

  return v0;
}

BOOL MobileGestalt_get_passwordConfigured()
{
  return MGGetBoolAnswer((const char **)@"xsaMbRQ5rQ+eyKMKG+ZSSg");
}

BOOL MobileGestalt_get_passwordProtected()
{
  return MGGetBoolAnswer((const char **)@"yNesiJuidlesNpI/K5Ri4A");
}

BOOL MobileGestalt_get_pearlCameraCapability()
{
  return MGGetBoolAnswer((const char **)@"8S7ydMJ4DlCUF38/hI/fJA");
}

BOOL MobileGestalt_get_pearlMotionDetectionCapability()
{
  return MGGetBoolAnswer((const char **)@"j39y4QUrP6cvZY8Pjyv64w");
}

BOOL MobileGestalt_get_peekUICapability()
{
  return MGGetBoolAnswer((const char **)@"LvCIFE6lOM10QDqIEyYWRA");
}

uint64_t MobileGestalt_get_peekUIWidth(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"Y2TwC8z+XeBBBswnLf7JsQ");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D772138(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_peer2PeerCapability()
{
  return MGGetBoolAnswer((const char **)@"Ht1HDxwTOy2gyY+THjbd6w");
}

uint64_t MobileGestalt_get_perfLevelCapability(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"eW5H/Gwg0uqbMqFot70pYg");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D7721B0(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_perfLevelCapabilityOne4IOS()
{
  return MGGetBoolAnswer((const char **)@"Mi/ME+v1wZqkvXFU3xX3KA");
}

BOOL MobileGestalt_get_perfLevelCapabilityOne4TvOS()
{
  return MGGetBoolAnswer((const char **)@"2oKaRZpltNseA9gTdIKTQQ");
}

BOOL MobileGestalt_get_perfLevelCapabilityTwo4IOS()
{
  return MGGetBoolAnswer((const char **)@"JWjvsupiqWYtIGwr8yGd8w");
}

BOOL MobileGestalt_get_perfLevelCapabilityiPadM1()
{
  return MGGetBoolAnswer((const char **)@"TqtrpIdOXIIlhOraMmq/pQ");
}

char *MobileGestalt_copy_phoneNumber()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"H5TSt7Pu4zNCD5RvHuk5CQ");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_phoneNumber_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"H5TSt7Pu4zNCD5RvHuk5CQ");

  return v0;
}

char *MobileGestalt_copy_phoneNumber2()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"SZy8T5ma/+a0wJc0ntiaaA");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_phoneNumber2_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"SZy8T5ma/+a0wJc0ntiaaA");

  return v0;
}

BOOL MobileGestalt_get_phosphorusCapability()
{
  return MGGetBoolAnswer((const char **)@"7mV26K/1a+wTtqiunvHMUQ");
}

BOOL MobileGestalt_get_photoAdjustmentsCapability()
{
  return MGGetBoolAnswer((const char **)@"H8Pi7AthQFVZ0B6A1J5OTw");
}

BOOL MobileGestalt_get_photoCapability()
{
  return MGGetBoolAnswer((const char **)@"bl+nF6e86pLBiPP4pVJ24g");
}

BOOL MobileGestalt_get_photoSharingCapability()
{
  return MGGetBoolAnswer((const char **)@"UHwjAM1cqBLCR1OuYouf8A");
}

BOOL MobileGestalt_get_photoStreamCapability()
{
  return MGGetBoolAnswer((const char **)@"RYZZuAFEfSNnEKEzwzRnqw");
}

BOOL MobileGestalt_get_photosPostEffectsCapability()
{
  return MGGetBoolAnswer((const char **)@"4Jfu4lqX8dzru4Z+ONQ1rQ");
}

char *MobileGestalt_copy_physicalHardwareNameString()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"bbtR9jQx50Fv5Af/affNtA");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_physicalHardwareNameString_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"bbtR9jQx50Fv5Af/affNtA");

  return v0;
}

BOOL MobileGestalt_get_piezoClickerCapability()
{
  return MGGetBoolAnswer((const char **)@"DdNpmCCXbeMGbqj0kAMCdw");
}

UInt8 *MobileGestalt_copy_pintoMacAddress()
{
  CFDataRef v0 = (const __CFData *)MGCopyAnswer((const char **)@"d27R2IjPvpwp+MX/kUbJ2w");
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  size_t Length = CFDataGetLength(v0);
  CFDictionaryRef v3 = (UInt8 *)malloc_type_malloc(Length, 0xED22DE58uLL);
  v5.CFIndex location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

id MobileGestalt_copy_pintoMacAddress_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"d27R2IjPvpwp+MX/kUbJ2w");

  return v0;
}

BOOL MobileGestalt_get_pipelinedStillImageProcessingCapability()
{
  return MGGetBoolAnswer((const char **)@"XIcF5FOyQlt/H79oFw9ciA");
}

BOOL MobileGestalt_get_platformStandAloneContactsCapability()
{
  return MGGetBoolAnswer((const char **)@"HMKkoKYsMmBBSN6ozOtw/w");
}

BOOL MobileGestalt_get_platinumCapability()
{
  return MGGetBoolAnswer((const char **)@"1oMPwMsqxTa9BJxUs8v06w");
}

BOOL MobileGestalt_get_pressDemoMode()
{
  return MGGetBoolAnswer((const char **)@"l8Xo/NV8/U585G1uBtW29w");
}

UInt8 *MobileGestalt_copy_productHash()
{
  CFDataRef v0 = (const __CFData *)MGCopyAnswer((const char **)@"TZ/0j62wM3D0CuRt+Nc/Lw");
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  size_t Length = CFDataGetLength(v0);
  CFDictionaryRef v3 = (UInt8 *)malloc_type_malloc(Length, 0x9F0D401AuLL);
  v5.CFIndex location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

id MobileGestalt_copy_productHash_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"TZ/0j62wM3D0CuRt+Nc/Lw");

  return v0;
}

char *MobileGestalt_copy_productName()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"ivIu8YTDnBSrYv/SN4G8Ag");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_productName_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"ivIu8YTDnBSrYv/SN4G8Ag");

  return v0;
}

char *MobileGestalt_copy_productType()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"h9jDsbgj7xIVeIQ8S3/X3Q");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_productType_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"h9jDsbgj7xIVeIQ8S3/X3Q");

  return v0;
}

char *MobileGestalt_copy_productVersion()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"qNNddlUK+B/YlooNoymwgA");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

char *MobileGestalt_copy_productVersionExtra()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"P5Go9WVVA604m7rKhbVndw");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_productVersionExtra_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"P5Go9WVVA604m7rKhbVndw");

  return v0;
}

char *MobileGestalt_copy_provisioningUniqueDeviceID()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"RNcdWbM8+dO5tx82A+YCcQ");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_provisioningUniqueDeviceID_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"RNcdWbM8+dO5tx82A+YCcQ");

  return v0;
}

UInt8 *MobileGestalt_copy_proximitySensorCalibration()
{
  CFDataRef v0 = (const __CFData *)MGCopyAnswer((const char **)@"6UUmcaeT7rJoyUVmoPJd4A");
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  size_t Length = CFDataGetLength(v0);
  CFDictionaryRef v3 = (UInt8 *)malloc_type_malloc(Length, 0x988AB21uLL);
  v5.CFIndex location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

id MobileGestalt_copy_proximitySensorCalibration_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"6UUmcaeT7rJoyUVmoPJd4A");

  return v0;
}

id MobileGestalt_copy_proximitySensorCalibrationDictionary_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"5mvQIwu3Mqqw/zOKmwGkWw");

  return v0;
}

BOOL MobileGestalt_get_proximitySensorCapability()
{
  return MGGetBoolAnswer((const char **)@"5v2p6i7PyIMdWOK4n/+G4A");
}

BOOL MobileGestalt_get_quickNoteCapability()
{
  return MGGetBoolAnswer((const char **)@"8fyX2yEg28cYgJ10Yl+ueA");
}

uint64_t MobileGestalt_get_rFExposureSeparationDistance(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"5tnvmEsHQKfCoieLEYpnvg");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D772228(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

UInt8 *MobileGestalt_copy_rawPanelSerialNumber()
{
  CFDataRef v0 = (const __CFData *)MGCopyAnswer((const char **)@"PxEDp0oOasJ92F/V7YBa8A");
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  size_t Length = CFDataGetLength(v0);
  CFDictionaryRef v3 = (UInt8 *)malloc_type_malloc(Length, 0x9E4DD39BuLL);
  v5.CFIndex location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

id MobileGestalt_copy_rawPanelSerialNumber_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"PxEDp0oOasJ92F/V7YBa8A");

  return v0;
}

BOOL MobileGestalt_get_rearALSCapability()
{
  return MGGetBoolAnswer((const char **)@"PVMLomcejavaax8/I3Ud3A");
}

BOOL MobileGestalt_get_rearCameraCapability()
{
  return MGGetBoolAnswer((const char **)@"6iI7/9cVUGIjdrSvIXEt4A");
}

id MobileGestalt_copy_rearCameraOffsetFromDisplayCenter_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"waWRQ4fj6cyMuJ+wTWJs1g");

  return v0;
}

BOOL MobileGestalt_get_rearFacingCamera60FpsVideoCaptureCapability()
{
  return MGGetBoolAnswer((const char **)@"6RrxXzvfw2GZeUPLKXxrmA");
}

BOOL MobileGestalt_get_rearFacingCameraAutoHDRCapability()
{
  return MGGetBoolAnswer((const char **)@"RLlZndRrTB3oIDuZEihtpQ");
}

BOOL MobileGestalt_get_rearFacingCameraBurstCapability()
{
  return MGGetBoolAnswer((const char **)@"plaYa8bKJaAF5Erc5nvZ+g");
}

BOOL MobileGestalt_get_rearFacingCameraCapability()
{
  return MGGetBoolAnswer((const char **)@"dp7SlZZQotrh8McQoH1xFA");
}

BOOL MobileGestalt_get_rearFacingCameraFocusPixelCalibrationCapability()
{
  return MGGetBoolAnswer((const char **)@"STBQ8gY0pl0CK8VmRcks4w");
}

BOOL MobileGestalt_get_rearFacingCameraHDRCapability()
{
  return MGGetBoolAnswer((const char **)@"TTZrMo1OOEUELa7asaQ7xg");
}

BOOL MobileGestalt_get_rearFacingCameraHDROnCapability()
{
  return MGGetBoolAnswer((const char **)@"LkWb+FyA1+ef2UD1Fx+kAw");
}

BOOL MobileGestalt_get_rearFacingCameraHFRCapability()
{
  return MGGetBoolAnswer((const char **)@"fGpT09KNGDBjFXnqcVbgbw");
}

uint64_t MobileGestalt_get_rearFacingCameraHFRVideoCapture1080PMaxFPS(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"jKFTzVOYcfTfNBh+yDrprw");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D7722A0(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_rearFacingCameraHFRVideoCapture720PMaxFPS(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"XellXEQUbOIgUPoTrIj5nA");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D772318(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_rearFacingCameraMaxVideoZoomFactor(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"WC6wwFV23k19BlUQIAwDTg");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D772390(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

char *MobileGestalt_copy_rearFacingCameraModuleSerialNumber()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"nWFV2qG2TjSuH7vZFCdi4w");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_rearFacingCameraModuleSerialNumber_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"nWFV2qG2TjSuH7vZFCdi4w");

  return v0;
}

BOOL MobileGestalt_get_rearFacingCameraStageLightPortraitCaptureCapability()
{
  return MGGetBoolAnswer((const char **)@"8LAJHwc8DUQZwV2TSwsysA");
}

uint64_t MobileGestalt_get_rearFacingCameraStillDurationForBurst(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"gq0j1GmcIcaD4DjJoo9pfg");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D772408(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_rearFacingCameraSuperWideCameraCapability()
{
  return MGGetBoolAnswer((const char **)@"hnXJ1OpiiIL0+p3jUG/XxQ");
}

BOOL MobileGestalt_get_rearFacingCameraTimeOfFlightCameraCapability()
{
  return MGGetBoolAnswer((const char **)@"QVwCp3Lu9RLnxw7LO9DBfQ");
}

BOOL MobileGestalt_get_rearFacingCameraVariableFrameRateCapability()
{
  return MGGetBoolAnswer((const char **)@"ry09Fs7QIF3ITE0Fx5OdvQ");
}

uint64_t MobileGestalt_get_rearFacingCameraVideoCapture1080PMaxFPS(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"jBGZJ71pRJrqD8VZ6Tk2VQ");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D772480(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_rearFacingCameraVideoCapture4KMaxFPS(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"po7g0ATDzGoVI1DO8ISmuw");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D7724F8(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_rearFacingCameraVideoCapture720PMaxFPS(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"0/7QNywWU4IqDcyvTv9UYQ");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D772570(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_rearFacingCameraVideoCaptureFPS(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"wOVK1nhmiAawowdbIwgyaQ");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D7725E8(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_rearFacingLowLightCameraCapability()
{
  return MGGetBoolAnswer((const char **)@"jaJWtlotaa+Y41lCs7NVHg");
}

char *MobileGestalt_copy_rearFacingSuperWideCameraModuleSerialNumber()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"UZfUiD1Aqy3GOwg72SQcLQ");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_rearFacingSuperWideCameraModuleSerialNumber_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"UZfUiD1Aqy3GOwg72SQcLQ");

  return v0;
}

BOOL MobileGestalt_get_rearFacingTelephotoCameraCapability()
{
  return MGGetBoolAnswer((const char **)@"YzrS+WPEMqyh/FBv/n/jvA");
}

char *MobileGestalt_copy_rearFacingTelephotoCameraModuleSerialNumber()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"cm399FbDqnv8IOFoeBLWYg");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_rearFacingTelephotoCameraModuleSerialNumber_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"cm399FbDqnv8IOFoeBLWYg");

  return v0;
}

BOOL MobileGestalt_get_receiveARCStreamOverAirPlayCapability()
{
  return MGGetBoolAnswer((const char **)@"OHXV8ldryg9nrOCapcyDCQ");
}

char *MobileGestalt_copy_recoveryOSVersion()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"NE090Fbwd79LVOHj0AN+OA");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_recoveryOSVersion_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"NE090Fbwd79LVOHj0AN+OA");

  return v0;
}

char *MobileGestalt_copy_regionCode()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"h63QSdBCiT/z0WU6rdQv6Q");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_regionCode_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"h63QSdBCiT/z0WU6rdQv6Q");

  return v0;
}

char *MobileGestalt_copy_regionInfo()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"zHeENZu+wbg7PUprwNwBWg");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_regionInfo_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"zHeENZu+wbg7PUprwNwBWg");

  return v0;
}

id MobileGestalt_copy_regionalBehaviorAll_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"D4AU4tOIuGKN3G/uix65cQ");

  return v0;
}

BOOL MobileGestalt_get_regionalBehaviorChinaBrick()
{
  return MGGetBoolAnswer((const char **)@"0L5PkT61qoH1b/B1USWqjQ");
}

BOOL MobileGestalt_get_regionalBehaviorEUVolumeLimit()
{
  return MGGetBoolAnswer((const char **)@"Tr9qG122eEQiKGfr6EGRdQ");
}

BOOL MobileGestalt_get_regionalBehaviorGB18030()
{
  return MGGetBoolAnswer((const char **)@"inLiSl5OQHJ1stAIvKH8wg");
}

BOOL MobileGestalt_get_regionalBehaviorGoogleMail()
{
  return MGGetBoolAnswer((const char **)@"4uzgAFPkzKUmlZG5HpFIkg");
}

BOOL MobileGestalt_get_regionalBehaviorNTSC()
{
  return MGGetBoolAnswer((const char **)@"IFBSPGnQVFrGFW+ujtZu6Q");
}

BOOL MobileGestalt_get_regionalBehaviorNoPasscodeLocationTiles()
{
  return MGGetBoolAnswer((const char **)@"0R2aiV2nJVu/v8I7Ex2GcQ");
}

BOOL MobileGestalt_get_regionalBehaviorNoVOIP()
{
  return MGGetBoolAnswer((const char **)@"6MnVtR+c9LeR46bMxvR5Yw");
}

BOOL MobileGestalt_get_regionalBehaviorNoWiFi()
{
  return MGGetBoolAnswer((const char **)@"kjKnJNt7HY90iN6rpbSeFQ");
}

BOOL MobileGestalt_get_regionalBehaviorShutterClick()
{
  return MGGetBoolAnswer((const char **)@"ZgIjA7Nwd2jSo13lhDO1Iw");
}

BOOL MobileGestalt_get_regionalBehaviorValid()
{
  return MGGetBoolAnswer((const char **)@"KMgjmT+dsqBCXu1YQEcOFg");
}

BOOL MobileGestalt_get_regionalBehaviorVolumeLimit()
{
  return MGGetBoolAnswer((const char **)@"HxTvMvHnum5rI8d0Nr4xBw");
}

char *MobileGestalt_copy_regulatoryModelNumber()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"97JDvERpVwO+GHtthIh7hA");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_regulatoryModelNumber_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"97JDvERpVwO+GHtthIh7hA");

  return v0;
}

char *MobileGestalt_copy_releaseType()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"9UCjT7Qfi4xLVvPAKIzTCQ");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_releaseType_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"9UCjT7Qfi4xLVvPAKIzTCQ");

  return v0;
}

UInt8 *MobileGestalt_copy_remoteBluetoothAddress()
{
  CFDataRef v0 = (const __CFData *)MGCopyAnswer((const char **)@"uAIY4Jb2A7Fy2aLrlDU1gg");
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  size_t Length = CFDataGetLength(v0);
  CFDictionaryRef v3 = (UInt8 *)malloc_type_malloc(Length, 0x7F976AC0uLL);
  v5.CFIndex location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

id MobileGestalt_copy_remoteBluetoothAddress_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"uAIY4Jb2A7Fy2aLrlDU1gg");

  return v0;
}

BOOL MobileGestalt_get_renderWideGamutImagesAtDisplayTime()
{
  return MGGetBoolAnswer((const char **)@"jMiqevikb6QWeHOhvLsw6A");
}

BOOL MobileGestalt_get_rendersLetterPressSlowly()
{
  return MGGetBoolAnswer((const char **)@"MYKMJDMFE/lhvOVXgtDNuw");
}

float MobileGestalt_get_requiredBatteryLevelForSoftwareUpdate(void *a1)
{
  id v1 = a1;
  int valuePtr = -1082130432;
  uint64_t v2 = MGCopyAnswer((const char **)@"AFXhxraF1bvyaCMlBIOZPA");
  if (v2)
  {
    CFDictionaryRef v3 = v2;
    CFTypeID v4 = CFGetTypeID(v2);
    if (v4 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v3, kCFNumberFloat32Type, &valuePtr))
      {
LABEL_10:
        CFRelease(v3);
        float v6 = *(float *)&valuePtr;
        goto LABEL_11;
      }
      CFRange v5 = [v1 log];
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      CFRange v5 = [v1 log];
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_19D772660(v5, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_10;
  }
  float v6 = -1.0;
LABEL_11:

  return v6;
}

BOOL MobileGestalt_get_requiresNaturalVolumeButtonArrangement()
{
  return MGGetBoolAnswer((const char **)@"cW+7coMzO/hTtCCDcSvNOw");
}

BOOL MobileGestalt_get_requiresPairedRemote()
{
  return MGGetBoolAnswer((const char **)@"rXbje18EX3b6I7u/pXBYeg");
}

BOOL MobileGestalt_get_restoreOSBuild()
{
  return MGGetBoolAnswer((const char **)@"8DHlxr5ECKhTSL3HmlZQGQ");
}

id MobileGestalt_copy_restrictedCountryCodes_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"nSo8opze5rFk+EdBoR6tBw");

  return v0;
}

UInt8 *MobileGestalt_copy_ringerButtonCGRect()
{
  CFDataRef v0 = (const __CFData *)MGCopyAnswer((const char **)@"qzHhHrOpIDLAq2balBdVZg");
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  size_t Length = CFDataGetLength(v0);
  CFDictionaryRef v3 = (UInt8 *)malloc_type_malloc(Length, 0x712C813CuLL);
  v5.CFIndex location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

id MobileGestalt_copy_ringerButtonCGRect_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"qzHhHrOpIDLAq2balBdVZg");

  return v0;
}

UInt8 *MobileGestalt_copy_ringerButtonNormalizedCGRect()
{
  CFDataRef v0 = (const __CFData *)MGCopyAnswer((const char **)@"6JkXMDhnrEMvLiRlYJL6zA");
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  size_t Length = CFDataGetLength(v0);
  CFDictionaryRef v3 = (UInt8 *)malloc_type_malloc(Length, 0x8089859BuLL);
  v5.CFIndex location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

id MobileGestalt_copy_ringerButtonNormalizedCGRect_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"6JkXMDhnrEMvLiRlYJL6zA");

  return v0;
}

BOOL MobileGestalt_get_ringerSwitchCapability()
{
  return MGGetBoolAnswer((const char **)@"hx2qJfJRLZ9Sseb37IcQow");
}

char *MobileGestalt_copy_rosalineSerialNumber()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"O8mk69g6k/CbfeET9LtqQA");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_rosalineSerialNumber_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"O8mk69g6k/CbfeET9LtqQA");

  return v0;
}

UInt8 *MobileGestalt_copy_roswellChipID()
{
  CFDataRef v0 = (const __CFData *)MGCopyAnswer((const char **)@"OyENNqRhuo8+RHkpbr/82A");
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  size_t Length = CFDataGetLength(v0);
  CFDictionaryRef v3 = (UInt8 *)malloc_type_malloc(Length, 0xCE7100B5uLL);
  v5.CFIndex location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

id MobileGestalt_copy_roswellChipID_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"OyENNqRhuo8+RHkpbr/82A");

  return v0;
}

BOOL MobileGestalt_get_rotateToWakeStatus()
{
  return MGGetBoolAnswer((const char **)@"YdPNjYPBzyE0jJl2X/CayQ");
}

BOOL MobileGestalt_get_sbAllowSensitiveUI()
{
  return MGGetBoolAnswer((const char **)@"CpVSHukvtqlJzCgSdoHW5w");
}

BOOL MobileGestalt_get_sbCanForceDebuggingInfo()
{
  return MGGetBoolAnswer((const char **)@"gPoIZFd4NhmSKrk67qH80w");
}

UInt8 *MobileGestalt_copy_sEInfo()
{
  CFDataRef v0 = (const __CFData *)MGCopyAnswer((const char **)@"atOCpGf+lHCxgJ9GElef8Q");
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  size_t Length = CFDataGetLength(v0);
  CFDictionaryRef v3 = (UInt8 *)malloc_type_malloc(Length, 0xEBC45D21uLL);
  v5.CFIndex location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

id MobileGestalt_copy_sEInfo_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"atOCpGf+lHCxgJ9GElef8Q");

  return v0;
}

UInt8 *MobileGestalt_copy_sEPNonce()
{
  CFDataRef v0 = (const __CFData *)MGCopyAnswer((const char **)@"IGYvMgBnOsdJjgmSh7Pe1A");
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  size_t Length = CFDataGetLength(v0);
  CFDictionaryRef v3 = (UInt8 *)malloc_type_malloc(Length, 0xA16BA6CEuLL);
  v5.CFIndex location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

id MobileGestalt_copy_sEPNonce_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"IGYvMgBnOsdJjgmSh7Pe1A");

  return v0;
}

BOOL MobileGestalt_get_simCapability()
{
  return MGGetBoolAnswer((const char **)@"PUMArrha4PFeOqINeQRM3A");
}

BOOL MobileGestalt_get_simPhonebookCapability()
{
  return MGGetBoolAnswer((const char **)@"tYqUcLmLfhmk7vOgdFvURg");
}

char *MobileGestalt_copy_simStatus()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"yUCaqT4KOwJpYEb+XDPq7g");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_simStatus_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"yUCaqT4KOwJpYEb+XDPq7g");

  return v0;
}

char *MobileGestalt_copy_simStatus2()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"b2BKAEe88VRfp2WXEjJOyA");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_simStatus2_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"b2BKAEe88VRfp2WXEjJOyA");

  return v0;
}

char *MobileGestalt_copy_simTrayStatus()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"L2Oq7vNNUKuv+iJ4m9xtiw");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_simTrayStatus_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"L2Oq7vNNUKuv+iJ4m9xtiw");

  return v0;
}

char *MobileGestalt_copy_simTrayStatus2()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"sHiXbHqHvvRS3I/qo/rH2Q");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_simTrayStatus2_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"sHiXbHqHvvRS3I/qo/rH2Q");

  return v0;
}

BOOL MobileGestalt_get_smsCapability()
{
  return MGGetBoolAnswer((const char **)@"OPzhvROZUqCZhgYMyve5BA");
}

UInt8 *MobileGestalt_copy_savageChipID()
{
  CFDataRef v0 = (const __CFData *)MGCopyAnswer((const char **)@"m9OWD0Y4Br0TZHUl6rGcOg");
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  size_t Length = CFDataGetLength(v0);
  CFDictionaryRef v3 = (UInt8 *)malloc_type_malloc(Length, 0x6872DD68uLL);
  v5.CFIndex location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

id MobileGestalt_copy_savageChipID_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"m9OWD0Y4Br0TZHUl6rGcOg");

  return v0;
}

id MobileGestalt_copy_savageInfo_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"Fhqq6Bhy/XnCEBRAe3TI+g");

  return v0;
}

UInt8 *MobileGestalt_copy_savageSerialNumber()
{
  CFDataRef v0 = (const __CFData *)MGCopyAnswer((const char **)@"LE2kQ7U1iM32AmlhYvlagg");
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  size_t Length = CFDataGetLength(v0);
  CFDictionaryRef v3 = (UInt8 *)malloc_type_malloc(Length, 0x51C7FC24uLL);
  v5.CFIndex location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

id MobileGestalt_copy_savageSerialNumber_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"LE2kQ7U1iM32AmlhYvlagg");

  return v0;
}

UInt8 *MobileGestalt_copy_savageUID()
{
  CFDataRef v0 = (const __CFData *)MGCopyAnswer((const char **)@"FNvQ6lBvJIUcYBzQ8ggOUQ");
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  size_t Length = CFDataGetLength(v0);
  CFDictionaryRef v3 = (UInt8 *)malloc_type_malloc(Length, 0xD57AC65CuLL);
  v5.CFIndex location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

id MobileGestalt_copy_savageUID_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"FNvQ6lBvJIUcYBzQ8ggOUQ");

  return v0;
}

uint64_t MobileGestalt_get_screenCaptureHeight(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"n6blIRZ4IumqHl/toNJcpg");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D7726D8(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_screenCaptureWidth(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"kj5Hw7ZKY+hm7ZCs0Caznw");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D772750(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

id MobileGestalt_copy_screenDimensionsCapability_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"HkXhfA7q9eBKIU2+6yTgQg");

  return v0;
}

BOOL MobileGestalt_get_screenRecorderCapability()
{
  return MGGetBoolAnswer((const char **)@"ExSUJyf7MblY5nBQx2OaRw");
}

char *MobileGestalt_copy_screenSerialNumber()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"0D3qCmmfJ/i1mpmjOsV7EA");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_screenSerialNumber_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"0D3qCmmfJ/i1mpmjOsV7EA");

  return v0;
}

char *MobileGestalt_copy_secondaryBluetoothMacAddress()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"8bOgXKgqoLvqV/XeSomAfA");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_secondaryBluetoothMacAddress_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"8bOgXKgqoLvqV/XeSomAfA");

  return v0;
}

UInt8 *MobileGestalt_copy_secondaryEthernetMacAddress()
{
  CFDataRef v0 = (const __CFData *)MGCopyAnswer((const char **)@"BQwz+BT9b5mS7OPh2WGD6A");
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  size_t Length = CFDataGetLength(v0);
  CFDictionaryRef v3 = (UInt8 *)malloc_type_malloc(Length, 0xBA294AF0uLL);
  v5.CFIndex location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

id MobileGestalt_copy_secondaryEthernetMacAddress_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"BQwz+BT9b5mS7OPh2WGD6A");

  return v0;
}

UInt8 *MobileGestalt_copy_secondaryWifiMacAddress()
{
  CFDataRef v0 = (const __CFData *)MGCopyAnswer((const char **)@"7VoVaBmSuokzovhUkiDx6Q");
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  size_t Length = CFDataGetLength(v0);
  CFDictionaryRef v3 = (UInt8 *)malloc_type_malloc(Length, 0xF41B3D4CuLL);
  v5.CFIndex location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

id MobileGestalt_copy_secondaryWifiMacAddress_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"7VoVaBmSuokzovhUkiDx6Q");

  return v0;
}

BOOL MobileGestalt_get_secureElement()
{
  return MGGetBoolAnswer((const char **)@"0dnM19zBqLw5ZPhIo4GEkg");
}

char *MobileGestalt_copy_secureElementID()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"nZUUCFZgomfWUIPGGzNAqg");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_secureElementID_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"nZUUCFZgomfWUIPGGzNAqg");

  return v0;
}

uint64_t MobileGestalt_get_securityDomain(void *a1)
{
  id v1 = a1;
  uint64_t v2 = -1;
  uint64_t valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"wu9wv8HhpA95iHT4Yyez7A");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt64Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D7727C8(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_sensitiveUICapability()
{
  return MGGetBoolAnswer((const char **)@"BOYfUi496moe56A0RWFbqQ");
}

char *MobileGestalt_copy_serialNumber()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"VasUgeSzVyHdB27g2XpN0g");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_serialNumber_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"VasUgeSzVyHdB27g2XpN0g");

  return v0;
}

BOOL MobileGestalt_get_shoeboxCapability()
{
  return MGGetBoolAnswer((const char **)@"cX1+ZsVacGTXWVKB9enYow");
}

BOOL MobileGestalt_get_shouldHactivate()
{
  return MGGetBoolAnswer((const char **)@"a6vjPkzcRjrsXmniFsm0dg");
}

BOOL MobileGestalt_get_sikaCapability()
{
  return MGGetBoolAnswer((const char **)@"ssIPnsZyWHPGC5sg3Pzkiw");
}

BOOL MobileGestalt_get_signingFuse()
{
  return MGGetBoolAnswer((const char **)@"a5BRUxn1QBPXkAnbAHbmeg");
}

BOOL MobileGestalt_get_siliconBringupBoard()
{
  return MGGetBoolAnswer((const char **)@"cZflGJ39lJHTCPy35/N14Q");
}

BOOL MobileGestalt_get_simultaneousCallAndDataCurrentlySupported()
{
  return MGGetBoolAnswer((const char **)@"xleedMDMw0UV3fSgmHIoaQ");
}

BOOL MobileGestalt_get_simultaneousCallAndDataSupported()
{
  return MGGetBoolAnswer((const char **)@"0uyHvVqOLpJQBpSl/rF3Vg");
}

BOOL MobileGestalt_get_siriGestureCapability()
{
  return MGGetBoolAnswer((const char **)@"8bY/L3i3rmxrl4ZjFZZpgQ");
}

BOOL MobileGestalt_get_siriOfflineCapability()
{
  return MGGetBoolAnswer((const char **)@"ZeeiT4Cdn8HNANoqroPEAA");
}

BOOL MobileGestalt_get_skey()
{
  return MGGetBoolAnswer((const char **)@"XEzIXVPlevxuEIpZrMY+8A");
}

UInt8 *MobileGestalt_copy_softwareBehavior()
{
  CFDataRef v0 = (const __CFData *)MGCopyAnswer((const char **)@"7IgVvZZLtNjMFdInQlKg6A");
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  size_t Length = CFDataGetLength(v0);
  CFDictionaryRef v3 = (UInt8 *)malloc_type_malloc(Length, 0x488D6DCAuLL);
  v5.CFIndex location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

id MobileGestalt_copy_softwareBehavior_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"7IgVvZZLtNjMFdInQlKg6A");

  return v0;
}

char *MobileGestalt_copy_softwareBundleVersion()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"DViRIxZ/ZwO007CLcEYvZw");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_softwareBundleVersion_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"DViRIxZ/ZwO007CLcEYvZw");

  return v0;
}

float MobileGestalt_get_softwareDimmingAlpha(void *a1)
{
  id v1 = a1;
  int valuePtr = -1082130432;
  uint64_t v2 = MGCopyAnswer((const char **)@"KXUnLpPZ6IZSE+As45CkhA");
  if (v2)
  {
    CFDictionaryRef v3 = v2;
    CFTypeID v4 = CFGetTypeID(v2);
    if (v4 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v3, kCFNumberFloat32Type, &valuePtr))
      {
LABEL_10:
        CFRelease(v3);
        float v6 = *(float *)&valuePtr;
        goto LABEL_11;
      }
      uint64_t v5 = [v1 log];
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      uint64_t v5 = [v1 log];
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_19D772840(v5, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_10;
  }
  float v6 = -1.0;
LABEL_11:

  return v6;
}

BOOL MobileGestalt_get_spatialAudioProfileCapability()
{
  return MGGetBoolAnswer((const char **)@"gB6cQZBLeMojsPAaE/iRtg");
}

UInt8 *MobileGestalt_copy_speakerCalibrationMiGa()
{
  CFDataRef v0 = (const __CFData *)MGCopyAnswer((const char **)@"jxx29Cq5bGHDnkcha4y/Rw");
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  size_t Length = CFDataGetLength(v0);
  CFDictionaryRef v3 = (UInt8 *)malloc_type_malloc(Length, 0xF01275FAuLL);
  v5.CFIndex location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

id MobileGestalt_copy_speakerCalibrationMiGa_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"jxx29Cq5bGHDnkcha4y/Rw");

  return v0;
}

UInt8 *MobileGestalt_copy_speakerCalibrationSpGa()
{
  CFDataRef v0 = (const __CFData *)MGCopyAnswer((const char **)@"meicxSe0OZJaae1hEiOV5Q");
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  size_t Length = CFDataGetLength(v0);
  CFDictionaryRef v3 = (UInt8 *)malloc_type_malloc(Length, 0xA2F2DDCEuLL);
  v5.CFIndex location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

id MobileGestalt_copy_speakerCalibrationSpGa_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"meicxSe0OZJaae1hEiOV5Q");

  return v0;
}

UInt8 *MobileGestalt_copy_speakerCalibrationSpTS()
{
  CFDataRef v0 = (const __CFData *)MGCopyAnswer((const char **)@"Wr2SycNVQwBrdup3ok+LxQ");
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  size_t Length = CFDataGetLength(v0);
  CFDictionaryRef v3 = (UInt8 *)malloc_type_malloc(Length, 0x449284DAuLL);
  v5.CFIndex location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

id MobileGestalt_copy_speakerCalibrationSpTS_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"Wr2SycNVQwBrdup3ok+LxQ");

  return v0;
}

BOOL MobileGestalt_get_sphereCapability()
{
  return MGGetBoolAnswer((const char **)@"n/aVhqpGjESEbIjvJbEHKg");
}

BOOL MobileGestalt_get_starkCapability()
{
  return MGGetBoolAnswer((const char **)@"L+KOzmOzO5DiJUZl21QGVg");
}

id MobileGestalt_copy_stockholmJcopInfo_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"RgoxDxYGuZ0GzijFt6kSQQ");

  return v0;
}

BOOL MobileGestalt_get_storeDemoMode()
{
  return MGGetBoolAnswer((const char **)@"aadL+4GFBDe6DdsUD2HGGw");
}

id MobileGestalt_copy_strictWakeKeyboardCases_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"I4TfkcdXWazwTr1al8Ml5w");

  return v0;
}

char *MobileGestalt_copy_supplementalBuildVersion()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"gLd6IDfbVM+JiOhktEP7Bw");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_supplementalBuildVersion_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"gLd6IDfbVM+JiOhktEP7Bw");

  return v0;
}

id MobileGestalt_copy_supportedDeviceFamilies_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"9MZ5AdH43csAUajl/dU+IQ");

  return v0;
}

id MobileGestalt_copy_supportedKeyboards_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"wBVgxg3VYUU5gawcgq7MXg");

  return v0;
}

BOOL MobileGestalt_get_supportsBurninMitigation()
{
  return MGGetBoolAnswer((const char **)@"SR/QIL//glHfqoE+lOAnbA");
}

BOOL MobileGestalt_get_supportsEDUMU()
{
  return MGGetBoolAnswer((const char **)@"4fT83+9coO3VAUnlxuOOcw");
}

BOOL MobileGestalt_get_supportsForceTouch()
{
  return MGGetBoolAnswer((const char **)@"eQd5mlz0BN0amTp/2ccMoA");
}

BOOL MobileGestalt_get_supportsIrisCapture()
{
  return MGGetBoolAnswer((const char **)@"pLzf7OiX5nWAPUMj7BfI4Q");
}

BOOL MobileGestalt_get_supportsLEDAging()
{
  return MGGetBoolAnswer((const char **)@"AspYltP/iGWg0qxfg7c/3w");
}

BOOL MobileGestalt_get_supportsLowPowerMode()
{
  return MGGetBoolAnswer((const char **)@"f+PE44W6AO2UENJk3p2s5A");
}

BOOL MobileGestalt_get_supportsPerseus()
{
  return MGGetBoolAnswer((const char **)@"GdXjx1ixZYvN9Gg8iSf68A");
}

BOOL MobileGestalt_get_supportsRotateToWake()
{
  return MGGetBoolAnswer((const char **)@"nmOy2K5HzAAs2QNAi8wR+Q");
}

BOOL MobileGestalt_get_supportsSOS()
{
  return MGGetBoolAnswer((const char **)@"5lAK1Xp+ezh1Qu+4jnHAOg");
}

BOOL MobileGestalt_get_supportsSSHBButtonType()
{
  return MGGetBoolAnswer((const char **)@"Jq+xaurJgFzSwxOfTqtBGw");
}

BOOL MobileGestalt_get_supportsTouchRemote()
{
  return MGGetBoolAnswer((const char **)@"OoFyZnd3oLS2Lw/KQTccGA");
}

UInt8 *MobileGestalt_copy_sysCfg()
{
  CFDataRef v0 = (const __CFData *)MGCopyAnswer((const char **)@"0Y4fmR6ZHZPxDZFfPtBnRQ");
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  size_t Length = CFDataGetLength(v0);
  CFDictionaryRef v3 = (UInt8 *)malloc_type_malloc(Length, 0x98D8996FuLL);
  v5.CFIndex location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

id MobileGestalt_copy_sysCfg_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"0Y4fmR6ZHZPxDZFfPtBnRQ");

  return v0;
}

id MobileGestalt_copy_sysCfgDict_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"9/J7LY7zuYSGW1BcSTRpOw");

  return v0;
}

char *MobileGestalt_copy_systemImageID()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"4qfpxrvLtWillIHpIsVgMA");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_systemImageID_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"4qfpxrvLtWillIHpIsVgMA");

  return v0;
}

BOOL MobileGestalt_get_systemTelephonyOfAnyKindCapability()
{
  return MGGetBoolAnswer((const char **)@"NrXe/KHDNhJ4r2SC2bMQyA");
}

BOOL MobileGestalt_get_tVOutCrossfadeCapability()
{
  return MGGetBoolAnswer((const char **)@"xU1eZLRifcixnyDzjo52DQ");
}

id MobileGestalt_copy_tVOutSettingsCapability_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"kWVFqaGBc3nOGmfM+ZpoEg");

  return v0;
}

char *MobileGestalt_copy_targetSubType()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"oYicEKzVTz4/CxxE05pEgQ");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_targetSubType_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"oYicEKzVTz4/CxxE05pEgQ");

  return v0;
}

BOOL MobileGestalt_get_telephonyCapability()
{
  return MGGetBoolAnswer((const char **)@"ZApuwHXWV8RCz0iVzMnqLw");
}

float MobileGestalt_get_telephonyMaximumGeneration(void *a1)
{
  id v1 = a1;
  int valuePtr = -1082130432;
  uint64_t v2 = MGCopyAnswer((const char **)@"2IDxmg5KyAMBBi/b0rojgQ");
  if (v2)
  {
    CFDictionaryRef v3 = v2;
    CFTypeID v4 = CFGetTypeID(v2);
    if (v4 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v3, kCFNumberFloat32Type, &valuePtr))
      {
LABEL_10:
        CFRelease(v3);
        float v6 = *(float *)&valuePtr;
        goto LABEL_11;
      }
      uint64_t v5 = [v1 log];
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      uint64_t v5 = [v1 log];
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_19D7728B8(v5, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_10;
  }
  float v6 = -1.0;
LABEL_11:

  return v6;
}

char *MobileGestalt_copy_thinningProductType()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"0+nc/Udy4WNG8S+Q7a/s1A");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_thinningProductType_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"0+nc/Udy4WNG8S+Q7a/s1A");

  return v0;
}

BOOL MobileGestalt_get_threadRadioCapability()
{
  return MGGetBoolAnswer((const char **)@"BdS2M69XMEc9v/jsHBC3Eg");
}

char *MobileGestalt_copy_threadRadioMacAddress()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"0rbLl0hXmTehfEduXfeJYQ");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_threadRadioMacAddress_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"0rbLl0hXmTehfEduXfeJYQ");

  return v0;
}

char *MobileGestalt_copy_threadRadioMacAddress64Bit()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"W/xqvBX9L07XHb0BOtYycQ");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_threadRadioMacAddress64Bit_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"W/xqvBX9L07XHb0BOtYycQ");

  return v0;
}

char *MobileGestalt_copy_threadRadioMacAddressForProvisioning()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"AGrtXj3nqzz8KFfFHK7/sA");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_threadRadioMacAddressForProvisioning_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"AGrtXj3nqzz8KFfFHK7/sA");

  return v0;
}

BOOL MobileGestalt_get_timeSyncCapability()
{
  return MGGetBoolAnswer((const char **)@"LJ8aZhTg8lXUeVxHzT+hMw");
}

UInt8 *MobileGestalt_copy_topModuleAuthChipID()
{
  CFDataRef v0 = (const __CFData *)MGCopyAnswer((const char **)@"U/nyu97+Q5SFY9yJKJTuSA");
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  size_t Length = CFDataGetLength(v0);
  CFDictionaryRef v3 = (UInt8 *)malloc_type_malloc(Length, 0x59AF765DuLL);
  v5.CFIndex location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

id MobileGestalt_copy_topModuleAuthChipID_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"U/nyu97+Q5SFY9yJKJTuSA");

  return v0;
}

BOOL MobileGestalt_get_torpedoCapability()
{
  return MGGetBoolAnswer((const char **)@"kT9JwUR2xPCTHTdgvG3UdA");
}

BOOL MobileGestalt_get_touchDelivery120Hz()
{
  return MGGetBoolAnswer((const char **)@"2OK50OGmkXM1ospsh766WQ");
}

BOOL MobileGestalt_get_touchIDCapability()
{
  return MGGetBoolAnswer((const char **)@"8Shl+AdVKo09f1Sldkb0kA");
}

id MobileGestalt_copy_tribecaSettings_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"2tBx5IzZX4CpUVJ79LfsVg");

  return v0;
}

UInt8 *MobileGestalt_copy_tristarID()
{
  CFDataRef v0 = (const __CFData *)MGCopyAnswer((const char **)@"o60T6wXe1DDaO4a4gw10TA");
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  size_t Length = CFDataGetLength(v0);
  CFDictionaryRef v3 = (UInt8 *)malloc_type_malloc(Length, 0x79CA19AFuLL);
  v5.CFIndex location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

id MobileGestalt_copy_tristarID_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"o60T6wXe1DDaO4a4gw10TA");

  return v0;
}

uint64_t MobileGestalt_get_uiBackgroundQuality(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"eH9J8yYIjbRNxg2EeYvNFg");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D772930(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_uiParallaxCapability()
{
  return MGGetBoolAnswer((const char **)@"mmu76v66k1dAtghToInT8g");
}

BOOL MobileGestalt_get_uiProceduralWallpaperCapability()
{
  return MGGetBoolAnswer((const char **)@"UZyrJHlX635ocWEjBkt9YA");
}

BOOL MobileGestalt_get_uiReachability()
{
  return MGGetBoolAnswer((const char **)@"m4UsCAgXhbdnwLebiyKMiw");
}

BOOL MobileGestalt_get_umtsDeviceCapability()
{
  return MGGetBoolAnswer((const char **)@"0Yu30fwSQVPKvHVla17kXw");
}

BOOL MobileGestalt_get_unifiedIPodCapability()
{
  return MGGetBoolAnswer((const char **)@"sJ0n0UZHSUVJbmyy2p54Cw");
}

uint64_t MobileGestalt_get_uniqueChipID(void *a1)
{
  id v1 = a1;
  uint64_t v2 = -1;
  uint64_t valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"TF31PAB6aO8KAbPyNKSxKA");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt64Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D7729A8(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

char *MobileGestalt_copy_uniqueChipIDString()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"6WdGcQGw4VLzrgxJo+bcrw");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_uniqueChipIDString_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"6WdGcQGw4VLzrgxJo+bcrw");

  return v0;
}

char *MobileGestalt_copy_uniqueDeviceID()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"re6Zb+zwFKJNlkQTUeT+/w");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

UInt8 *MobileGestalt_copy_uniqueDeviceIDData()
{
  CFDataRef v0 = (const __CFData *)MGCopyAnswer((const char **)@"nFRqKto/RuQAV1P+0/qkBA");
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  size_t Length = CFDataGetLength(v0);
  CFDictionaryRef v3 = (UInt8 *)malloc_type_malloc(Length, 0x86D7AED2uLL);
  v5.CFIndex location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

id MobileGestalt_copy_uniqueDeviceIDData_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"nFRqKto/RuQAV1P+0/qkBA");

  return v0;
}

char *MobileGestalt_copy_userAssignedDeviceName()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"ghpAuGJlPoauWijdtPi7sQ");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_userAssignedDeviceName_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"ghpAuGJlPoauWijdtPi7sQ");

  return v0;
}

UInt8 *MobileGestalt_copy_userIntentPhysicalButtonCGRect()
{
  CFDataRef v0 = (const __CFData *)MGCopyAnswer((const char **)@"pMeQxE5szZTjLMk10TisDQ");
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  size_t Length = CFDataGetLength(v0);
  CFDictionaryRef v3 = (UInt8 *)malloc_type_malloc(Length, 0x9CD71602uLL);
  v5.CFIndex location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

id MobileGestalt_copy_userIntentPhysicalButtonCGRect_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"pMeQxE5szZTjLMk10TisDQ");

  return v0;
}

char *MobileGestalt_copy_userIntentPhysicalButtonCGRectString()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"rJkMAGeVLdhP5+10G5hVcA");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_userIntentPhysicalButtonCGRectString_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"rJkMAGeVLdhP5+10G5hVcA");

  return v0;
}

UInt8 *MobileGestalt_copy_userIntentPhysicalButtonNormalizedCGRect()
{
  CFDataRef v0 = (const __CFData *)MGCopyAnswer((const char **)@"WPEkba78QeFFU/wgqpOx6w");
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  size_t Length = CFDataGetLength(v0);
  CFDictionaryRef v3 = (UInt8 *)malloc_type_malloc(Length, 0x4734FAD4uLL);
  v5.CFIndex location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

id MobileGestalt_copy_userIntentPhysicalButtonNormalizedCGRect_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"WPEkba78QeFFU/wgqpOx6w");

  return v0;
}

UInt8 *MobileGestalt_copy_vMUniqueDeviceIDData()
{
  CFDataRef v0 = (const __CFData *)MGCopyAnswer((const char **)@"sjGZBQzow3yV/IOa0wCeoQ");
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  size_t Length = CFDataGetLength(v0);
  CFDictionaryRef v3 = (UInt8 *)malloc_type_malloc(Length, 0xB008A30CuLL);
  v5.CFIndex location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

id MobileGestalt_copy_vMUniqueDeviceIDData_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"sjGZBQzow3yV/IOa0wCeoQ");

  return v0;
}

BOOL MobileGestalt_get_vOIPCapability()
{
  return MGGetBoolAnswer((const char **)@"9ZqSL68MJyQESzQFDvKqXA");
}

id MobileGestalt_copy_vSHCompensationMinimumNits_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"HBf5L3fT108kze+YWeiy+w");

  return v0;
}

BOOL MobileGestalt_get_veniceCapability()
{
  return MGGetBoolAnswer((const char **)@"5MSZn7w3nnJp22VbpqaxLQ");
}

BOOL MobileGestalt_get_vibratorCapability()
{
  return MGGetBoolAnswer((const char **)@"/9luHerXthRoPoNt/PVkTg");
}

BOOL MobileGestalt_get_videoCameraCapability()
{
  return MGGetBoolAnswer((const char **)@"nteaxwXwZWYUI9z46VDRnA");
}

BOOL MobileGestalt_get_videoStillsCapability()
{
  return MGGetBoolAnswer((const char **)@"PxLTGkQx9GkeYcJKOaZguA");
}

BOOL MobileGestalt_get_voiceControlCapability()
{
  return MGGetBoolAnswer((const char **)@"tuwdHA2NDGnLajCo5K3UUA");
}

BOOL MobileGestalt_get_volumeButtonCapability()
{
  return MGGetBoolAnswer((const char **)@"4I0hOaR3n80379Vka7u+Xg");
}

UInt8 *MobileGestalt_copy_volumeDownButtonCGRect()
{
  CFDataRef v0 = (const __CFData *)MGCopyAnswer((const char **)@"PdprWthPO6YyrO6p1vLRgQ");
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  size_t Length = CFDataGetLength(v0);
  CFDictionaryRef v3 = (UInt8 *)malloc_type_malloc(Length, 0xC9FA7599uLL);
  v5.CFIndex location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

id MobileGestalt_copy_volumeDownButtonCGRect_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"PdprWthPO6YyrO6p1vLRgQ");

  return v0;
}

UInt8 *MobileGestalt_copy_volumeDownButtonNormalizedCGRect()
{
  CFDataRef v0 = (const __CFData *)MGCopyAnswer((const char **)@"SbXytSPZXB1jQ8GLZOxCPw");
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  size_t Length = CFDataGetLength(v0);
  CFDictionaryRef v3 = (UInt8 *)malloc_type_malloc(Length, 0x877EE4F9uLL);
  v5.CFIndex location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

id MobileGestalt_copy_volumeDownButtonNormalizedCGRect_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"SbXytSPZXB1jQ8GLZOxCPw");

  return v0;
}

UInt8 *MobileGestalt_copy_volumeUpButtonCGRect()
{
  CFDataRef v0 = (const __CFData *)MGCopyAnswer((const char **)@"aD51uqjUwgRKjAC04BCrxg");
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  size_t Length = CFDataGetLength(v0);
  CFDictionaryRef v3 = (UInt8 *)malloc_type_malloc(Length, 0x9C09831uLL);
  v5.CFIndex location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

id MobileGestalt_copy_volumeUpButtonCGRect_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"aD51uqjUwgRKjAC04BCrxg");

  return v0;
}

UInt8 *MobileGestalt_copy_volumeUpButtonNormalizedCGRect()
{
  CFDataRef v0 = (const __CFData *)MGCopyAnswer((const char **)@"913P3Zsei09w0GSSOaBD+w");
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  size_t Length = CFDataGetLength(v0);
  CFDictionaryRef v3 = (UInt8 *)malloc_type_malloc(Length, 0xAA355A8AuLL);
  v5.CFIndex location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

id MobileGestalt_copy_volumeUpButtonNormalizedCGRect_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"913P3Zsei09w0GSSOaBD+w");

  return v0;
}

uint64_t MobileGestalt_get_wAGraphicQuality(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"xYu8vn4nnbLnNTbBe0FT+w");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D772A20(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_wLANBkgScanCache(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"PLQ6xgfGji63NbFu+sjeYg");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D772A98(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

UInt8 *MobileGestalt_copy_wSKU()
{
  CFDataRef v0 = (const __CFData *)MGCopyAnswer((const char **)@"gD8SNRcHQeIxCAvsp+2vjA");
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  size_t Length = CFDataGetLength(v0);
  CFDictionaryRef v3 = (UInt8 *)malloc_type_malloc(Length, 0x18482CC6uLL);
  v5.CFIndex location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

id MobileGestalt_copy_wSKU_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"gD8SNRcHQeIxCAvsp+2vjA");

  return v0;
}

BOOL MobileGestalt_get_watchAppButtonCapability()
{
  return MGGetBoolAnswer((const char **)@"FBw/2WrPE2supEKosxxoTw");
}

BOOL MobileGestalt_get_watchCompanionCapability()
{
  return MGGetBoolAnswer((const char **)@"fucd7llSuoCNHrrvLS1QQg");
}

BOOL MobileGestalt_get_watchKeyboardCapability()
{
  return MGGetBoolAnswer((const char **)@"MQJ1mlVrhOwaUUVJehJSVA");
}

BOOL MobileGestalt_get_watchSupportsAutoPlaylistPlayback()
{
  return MGGetBoolAnswer((const char **)@"CnoPCMssOh+xPJJo6pvnog");
}

BOOL MobileGestalt_get_watchSupportsHighQualityClockFaceGraphics()
{
  return MGGetBoolAnswer((const char **)@"Zmd7xYUw9EutGXifzpvfsA");
}

BOOL MobileGestalt_get_watchSupportsListeningOnGesture()
{
  return MGGetBoolAnswer((const char **)@"Xa9nxhMDoHTdmrn/FufA3g");
}

BOOL MobileGestalt_get_watchSupportsMusicStreaming()
{
  return MGGetBoolAnswer((const char **)@"/bfa1LxXd7G1WqHujpjsdA");
}

BOOL MobileGestalt_get_watchSupportsSiriCommute()
{
  return MGGetBoolAnswer((const char **)@"mY5R+ZIWxy5BDEEZTeWlHQ");
}

BOOL MobileGestalt_get_wifiCallingCapability()
{
  return MGGetBoolAnswer((const char **)@"/6FWCRjN1yRdUABG9vF8ow");
}

BOOL MobileGestalt_get_wifiCapability()
{
  return MGGetBoolAnswer((const char **)@"P6z8eNrRPcv0AcKPML0iow");
}

char *MobileGestalt_copy_wifiChipsetRevision()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"wYMBabAO8VguyDDVgCsPdg");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_wifiChipsetRevision_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"wYMBabAO8VguyDDVgCsPdg");

  return v0;
}

char *MobileGestalt_copy_wifiAddress()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"gI6iODv8MZuiP0IA+efJCw");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_wifiAddress_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"gI6iODv8MZuiP0IA+efJCw");

  return v0;
}

UInt8 *MobileGestalt_copy_wifiAntennaSKUVersion()
{
  CFDataRef v0 = (const __CFData *)MGCopyAnswer((const char **)@"sFTm4FEVKVfdZ0ChdwQY1g");
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  size_t Length = CFDataGetLength(v0);
  CFDictionaryRef v3 = (UInt8 *)malloc_type_malloc(Length, 0x501E2A2EuLL);
  v5.CFIndex location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

id MobileGestalt_copy_wifiAntennaSKUVersion_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"sFTm4FEVKVfdZ0ChdwQY1g");

  return v0;
}

BOOL MobileGestalt_get_wifiCallingSecondaryDeviceCapability()
{
  return MGGetBoolAnswer((const char **)@"eLfYx8jpSlim2NZFIonPzA");
}

char *MobileGestalt_copy_wifiChipset()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"NaA/zJV7myg2w4YNmSe4yQ");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_wifiChipset_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"NaA/zJV7myg2w4YNmSe4yQ");

  return v0;
}

char *MobileGestalt_copy_wifiFirmwareVersion()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"uB6I2WImAHd8DEGuqYcMbw");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_wifiFirmwareVersion_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"uB6I2WImAHd8DEGuqYcMbw");

  return v0;
}

char *MobileGestalt_copy_wifiVendor()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"c7fCSBIbX1mFaRoKT5zTIw");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_wifiVendor_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"c7fCSBIbX1mFaRoKT5zTIw");

  return v0;
}

char *MobileGestalt_copy_wirelessBoardSnum()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CFStringRef v0 = (const __CFString *)MGCopyAnswer((const char **)@"XrPbSCNx9X7Lyw9oGPgMDQ");
  if (!v0) {
    return 0;
  }
  CFStringRef v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  uint64_t v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

id MobileGestalt_copy_wirelessBoardSnum_obj()
{
  CFStringRef v0 = (void *)MGCopyAnswer((const char **)@"XrPbSCNx9X7Lyw9oGPgMDQ");

  return v0;
}

BOOL MobileGestalt_get_wirelessChargingCapability()
{
  return MGGetBoolAnswer((const char **)@"PpmzzBVLpZVubmP0tCIymg");
}

BOOL MobileGestalt_get_workoutUltraMode()
{
  return MGGetBoolAnswer((const char **)@"fu+4kyf8VcMBtgbMyJlLtg");
}

UInt8 *MobileGestalt_copy_yonkersChipID()
{
  CFDataRef v0 = (const __CFData *)MGCopyAnswer((const char **)@"2/q9qmqGigMfkzY830Zf2g");
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  size_t Length = CFDataGetLength(v0);
  CFDictionaryRef v3 = (UInt8 *)malloc_type_malloc(Length, 0xA7C113A7uLL);
  v5.CFIndex location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

id MobileGestalt_copy_yonkersChipID_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"2/q9qmqGigMfkzY830Zf2g");

  return v0;
}

UInt8 *MobileGestalt_copy_yonkersSerialNumber()
{
  CFDataRef v0 = (const __CFData *)MGCopyAnswer((const char **)@"67Dsh4G8EGQp4WbPDfS/Xw");
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  size_t Length = CFDataGetLength(v0);
  CFDictionaryRef v3 = (UInt8 *)malloc_type_malloc(Length, 0x5CC2DCA6uLL);
  v5.CFIndex location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

id MobileGestalt_copy_yonkersSerialNumber_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"67Dsh4G8EGQp4WbPDfS/Xw");

  return v0;
}

UInt8 *MobileGestalt_copy_yonkersUID()
{
  CFDataRef v0 = (const __CFData *)MGCopyAnswer((const char **)@"bwLsbkp4shhHuNB5VpRa8w");
  if (!v0) {
    return 0;
  }
  CFDataRef v1 = v0;
  size_t Length = CFDataGetLength(v0);
  CFDictionaryRef v3 = (UInt8 *)malloc_type_malloc(Length, 0x23895A9AuLL);
  v5.CFIndex location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

id MobileGestalt_copy_yonkersUID_obj()
{
  CFDataRef v0 = (void *)MGCopyAnswer((const char **)@"bwLsbkp4shhHuNB5VpRa8w");

  return v0;
}

BOOL MobileGestalt_get_youtubeCapability()
{
  return MGGetBoolAnswer((const char **)@"pCbWB0w5vhsKbGJHs/c1jQ");
}

BOOL MobileGestalt_get_youtubePluginCapability()
{
  return MGGetBoolAnswer((const char **)@"81Zj1535/jeXbmfOndlIVA");
}

BOOL MobileGestalt_get_iAP2Capability()
{
  return MGGetBoolAnswer((const char **)@"ZepchaN1K8XQJaBUMMlV5w");
}

uint64_t MobileGestalt_get_iTunesFamilyID(void *a1)
{
  id v1 = a1;
  uint64_t v2 = 0xFFFFFFFFLL;
  unsigned int valuePtr = -1;
  CFDictionaryRef v3 = MGCopyAnswer((const char **)@"1qJmMHedWOh43VwRKPdDrw");
  if (v3)
  {
    CFTypeID v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        uint64_t v2 = valuePtr;
        goto LABEL_10;
      }
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D76F9A4();
      }
    }
    else
    {
      float v6 = [v1 log];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_19D772B10(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

void sub_19D7548CC(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_19D7548E8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

uint64_t _MGIterateDevices(int a1, char *name, uint64_t a3)
{
  if (a1 == 5)
  {
    uint64_t result = IORegistryEntryFromPath(*MEMORY[0x1E4F2EEF0], name);
    if (result)
    {
      io_object_t v6 = result;
      (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, result);
      return IOObjectRelease(v6);
    }
  }
  else
  {
    CFDictionaryRef v8 = (const __CFDictionary *)sub_19D754A50(a1, name);
    if (v8)
    {
      io_iterator_t existing = 0;
      uint64_t result = IOServiceGetMatchingServices(*MEMORY[0x1E4F2EEF0], v8, &existing);
      if (!result)
      {
        v9[0] = MEMORY[0x1E4F143A8];
        v9[1] = 0x40000000;
        v9[2] = sub_19D754B2C;
        v9[3] = &unk_1E5963500;
        v9[4] = a3;
        sub_19D73A3EC(existing, (uint64_t)v9);
        return IOObjectRelease(existing);
      }
    }
    else
    {
      return fprintf((FILE *)*MEMORY[0x1E4F143C8], "couldn't get matching dictionary for %d:%s\n", a1, name);
    }
  }
  return result;
}

void *sub_19D754A50(int a1, char *name)
{
  switch(a1)
  {
    case 1:
      uint64_t result = IOServiceNameMatching(name);
      break;
    case 2:
      uint64_t result = IOServiceMatching(name);
      break;
    case 3:
      mach_port_t v3 = *MEMORY[0x1E4F2EEF0];
      uint64_t result = IOBSDNameMatching(v3, 0, name);
      break;
    case 4:
      uint64_t result = (void *)sub_19D715CD8(name);
      break;
    case 5:
      uint64_t result = 0;
      break;
    default:
      abort();
  }
  return result;
}

uint64_t sub_19D754B2C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void _MGWaitForDevices(int a1, char *a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a1 == 5) {
    sub_19D772B88();
  }
  uint64_t v10 = sub_19D754A50(a1, a2);
  if (v10)
  {
    if (!a3)
    {
      if (!a5) {
        sub_19D772BB4();
      }
      a3 = 1;
    }
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 0x40000000;
    v11[2] = sub_19D754C20;
    v11[3] = &unk_1E5963528;
    v11[4] = a4;
    sub_19D73AEC8((uint64_t)v10, a3, (uint64_t)v11, a5);
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "couldn't get matching dictionary for %d:%s\n", a1, a2);
  }
}

uint64_t sub_19D754C20(uint64_t a1)
{
  return 0;
}

__CFDictionary *_MGCopyDeviceDescription(uint64_t a1, const __CFArray *a2, int a3, const char *a4, int a5)
{
  if (a3 == 1) {
    io_object_t v6 = 0;
  }
  else {
    io_object_t v6 = a4;
  }
  if (a3 == 3)
  {
    char v7 = 1;
  }
  else
  {
    a4 = v6;
    char v7 = 0;
  }
  return sub_19D754C74(a1, a2, 1, a4, v7, a5, 0);
}

__CFDictionary *sub_19D754C74(uint64_t a1, const __CFArray *a2, int a3, const char *a4, char a5, int a6, void *a7)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v34 = a7;
  CFDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  *(_OWORD *)cStr = 0u;
  long long v37 = 0u;
  memset(className, 0, sizeof(className));
  char v33 = 0;
  if (!MEMORY[0x19F3AA060](a1, cStr))
  {
    CFStringRef v14 = CFStringCreateWithCString(0, cStr, 0x8000100u);
    CFDictionarySetValue(Mutable, @"0:Name", v14);
    CFRelease(v14);
  }
  if (!IOObjectGetClass(a1, className))
  {
    CFStringRef v15 = CFStringCreateWithCString(0, className, 0x8000100u);
    CFDictionarySetValue(Mutable, @"1:Class", v15);
    CFRelease(v15);
  }
  sub_19D7552F4(a1, Mutable, @"2:IOService Path", "IOService", a4, (const char **)&v34, &v33);
  sub_19D7552F4(a1, Mutable, @"2:IODeviceTree Path", "IODeviceTree", a4, (const char **)&v34, &v33);
  if (a4 && strcmp(a4, "IOService") && strcmp(a4, "IODeviceTree"))
  {
    CFStringRef v16 = CFStringCreateWithFormat(0, 0, @"2:%s Path", a4);
    sub_19D7552F4(a1, Mutable, v16, a4, a4, (const char **)&v34, &v33);
    CFRelease(v16);
  }
  if (a3)
  {
    CFTypeRef cf = 0;
    if (a2)
    {
      uint64_t v17 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFTypeRef cf = v17;
      v31[0] = MEMORY[0x1E4F143A8];
      v31[1] = 0x40000000;
      _WORD v31[2] = sub_19D7554C4;
      v31[3] = &unk_1E5963548;
      int v32 = a1;
      v31[4] = v17;
      sub_19D71D6AC(a2, (uint64_t)v31);
      if (v17)
      {
LABEL_12:
        if (a6)
        {
          v30[0] = MEMORY[0x1E4F143A8];
          v30[1] = 0x40000000;
          v30[2] = sub_19D755558;
          v30[3] = &unk_1E5963568;
          v30[4] = v17;
          sub_19D710820((const __CFDictionary *)v17, (uint64_t)v30);
          uint64_t v17 = cf;
        }
        CFDictionarySetValue(Mutable, @"3:Properties", v17);
        CFRelease(cf);
        goto LABEL_15;
      }
    }
    else
    {
      IORegistryEntryCreateCFProperties(a1, (CFMutableDictionaryRef *)&cf, 0, 0);
      uint64_t v17 = cf;
      if (cf) {
        goto LABEL_12;
      }
    }
    CFDictionarySetValue(Mutable, @"3:Properties", @"*** NOT PRESENT ***");
    if (!a4) {
      goto LABEL_19;
    }
    goto LABEL_16;
  }
LABEL_15:
  if (!a4) {
    goto LABEL_19;
  }
LABEL_16:
  CFTypeRef cf = 0;
  p_CFTypeRef cf = &cf;
  uint64_t v28 = 0x2000000000;
  uint64_t v29 = 0;
  v24[0] = 0;
  v24[1] = v24;
  v24[2] = 0x2000000000;
  int v25 = 0;
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 0x40000000;
  v20[2] = sub_19D75561C;
  v20[3] = &unk_1E5963590;
  char v21 = a3 & a5;
  v20[6] = a2;
  v20[7] = a4;
  char v22 = a5;
  char v23 = a6;
  uint8_t v20[8] = v34;
  v20[4] = v24;
  v20[5] = &cf;
  sub_19D73A53C(a1, (uint64_t)a4, (uint64_t)v20);
  CFTypeRef v18 = p_cf[3];
  if (v18)
  {
    CFDictionarySetValue(Mutable, @"4:Children", v18);
    CFRelease(p_cf[3]);
  }
  _Block_object_dispose(v24, 8);
  _Block_object_dispose(&cf, 8);
LABEL_19:
  if (v33) {
    free(v34);
  }
  return Mutable;
}

CFMutableDictionaryRef _MGPrintIteratedDeviceDescription(FILE *a1, int a2, int a3, char *a4, int a5, int a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10)
{
  return sub_19D7550F8(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, 0);
}

CFMutableDictionaryRef sub_19D7550F8(FILE *__stream, int a2, int a3, char *name, int a5, int a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, char a11)
{
  CFStringRef v15 = name;
  uint64_t v19 = a10;
  char v20 = a11;
  v32[0] = 0;
  v32[1] = v32;
  v32[2] = 0x2000000000;
  int v33 = 0;
  int v21 = a2 & 4;
  if (__stream)
  {
    if ((a2 & 4) != 0)
    {
      sub_19D756840(__stream);
      char v20 = a11;
      uint64_t v19 = a10;
      CFStringRef v15 = name;
    }
    CFMutableDictionaryRef v23 = 0;
  }
  else
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    char v20 = a11;
    uint64_t v19 = a10;
    CFStringRef v15 = name;
    CFMutableDictionaryRef v23 = Mutable;
  }
  v27[0] = MEMORY[0x1E4F143A8];
  v27[1] = 0x40000000;
  v27[2] = sub_19D7557D0;
  v27[3] = &unk_1E59635B8;
  char v31 = v20;
  v27[4] = v32;
  v27[5] = a8;
  v27[6] = v19;
  v27[7] = __stream;
  int v28 = a9;
  int v29 = v21;
  int v30 = a2;
  __int16 v27[8] = v23;
  if (a5)
  {
    _MGWaitForDevices(a3, v15, a6, (uint64_t)v27, a7);
    if (!__stream) {
      goto LABEL_12;
    }
  }
  else
  {
    _MGIterateDevices(a3, v15, (uint64_t)v27);
    if (!__stream) {
      goto LABEL_12;
    }
  }
  if (v21) {
    sub_19D75698C(__stream);
  }
LABEL_12:
  _Block_object_dispose(v32, 8);
  return v23;
}

CFMutableDictionaryRef _MGCopyIteratedDeviceDescription(int a1, char *name, int a3, int a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, char a9)
{
  return sub_19D7550F8(0, 0, a1, name, a3, a4, a5, a6, a7, a8, a9);
}

void sub_19D7552F4(uint64_t a1, __CFDictionary *a2, const void *a3, const char *a4, const char *a5, const char **a6, unsigned char *a7)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  long long v50 = 0u;
  long long v51 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  *(_OWORD *)__s = 0u;
  long long v21 = 0u;
  if (!MEMORY[0x19F3AA070](a1, a4, __s))
  {
    if (!a5 || strcmp(a5, a4))
    {
      size_t v13 = strlen(a4);
      CFStringRef v14 = CFStringCreateWithCString(0, &__s[v13 + 1], 0x8000100u);
LABEL_5:
      CFStringRef v15 = v14;
      CFDictionarySetValue(a2, a3, v14);
      CFRelease(v15);
      return;
    }
    if (*a6)
    {
      size_t v16 = strlen(*a6);
      CFStringRef v14 = CFStringCreateWithFormat(0, 0, @".../%s", &__s[v16 + 1]);
      goto LABEL_5;
    }
    size_t v17 = strlen(a4);
    CFStringRef v18 = CFStringCreateWithCString(0, &__s[v17 + 1], 0x8000100u);
    CFDictionarySetValue(a2, a3, v18);
    CFRelease(v18);
    size_t v19 = strlen(__s) - 1;
    if (__s[v19] == 47) {
      __s[v19] = 0;
    }
    *a6 = strdup(__s);
    *a7 = 1;
  }
}

void sub_19D7554C4(uint64_t a1, const __CFString *a2)
{
  CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(*(_DWORD *)(a1 + 40), a2, 0, 0);
  CFTypeID v5 = *(__CFDictionary **)(a1 + 32);
  if (CFProperty)
  {
    CFDictionarySetValue(v5, a2, CFProperty);
    CFRelease(CFProperty);
  }
  else
  {
    CFDictionarySetValue(v5, a2, @"*** NOT PRESENT ***");
  }
}

void sub_19D755558(uint64_t a1, const void *a2, CFTypeRef cf)
{
  CFTypeID v6 = CFGetTypeID(cf);
  if (v6 == CFDataGetTypeID())
  {
    CFDataRef v7 = sub_19D71D75C((CFDataRef)cf);
    if (v7)
    {
      CFDataRef v8 = v7;
      CFIndex Length = CFDataGetLength((CFDataRef)cf);
      CFStringRef v10 = CFStringCreateWithFormat(0, 0, @"Decoded Data[%lld]: %@", Length, v8);
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), a2, v10);
      CFRelease(v10);
      CFRelease(v8);
    }
  }
}

void sub_19D75561C(uint64_t a1, uint64_t a2)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = sub_19D754C74(a2, *(void *)(a1 + 48), *(unsigned __int8 *)(a1 + 72), *(void *)(a1 + 56), *(unsigned __int8 *)(a1 + 73), *(unsigned __int8 *)(a1 + 74), *(void *)(a1 + 64));
  if (v4)
  {
    CFTypeID v5 = (const void *)v4;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    *(_OWORD *)cStr = 0u;
    long long v11 = 0u;
    if (MEMORY[0x19F3AA070](a2, *(void *)(a1 + 56), cStr))
    {
      CFStringRef v6 = CFStringCreateWithFormat(0, 0, @"Unknown Child %d", *(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
      ++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    }
    else
    {
      CFDataRef v7 = cStr;
      if (*(unsigned __int16 *)cStr != 47)
      {
        CFDataRef v8 = rindex(cStr, 47);
        if (v8) {
          CFDataRef v7 = v8 + 1;
        }
      }
      CFStringRef v6 = CFStringCreateWithCString(0, v7, 0x8000100u);
    }
    uint64_t v9 = *(__CFDictionary **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    if (!v9)
    {
      *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      uint64_t v9 = *(__CFDictionary **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    }
    CFDictionarySetValue(v9, v6, v5);
    CFRelease(v5);
    CFRelease(v6);
  }
}

void sub_19D7557D0(uint64_t a1, uint64_t a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  time_t v28 = time(0);
  int v35 = 0;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  *(_OWORD *)__s = 0u;
  long long v30 = 0u;
  ctime_r(&v28, __s);
  __s[strlen(__s) - 1] = 0;
  int v4 = *(_DWORD *)(a1 + 72);
  if (v4 == 1) {
    CFTypeID v5 = 0;
  }
  else {
    CFTypeID v5 = *(const char **)(a1 + 48);
  }
  if (v4 == 3) {
    CFStringRef v6 = *(const char **)(a1 + 48);
  }
  else {
    CFStringRef v6 = v5;
  }
  CFDataRef v7 = sub_19D754C74(a2, *(const __CFArray **)(a1 + 40), 1, v6, v4 == 3, *(unsigned __int8 *)(a1 + 84) != 0, 0);
  if (v7)
  {
    CFDataRef v8 = v7;
    int v25 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    CFStringRef v14 = CFStringCreateWithFormat(0, 0, @"%5d: %s");
    long long v15 = *(FILE **)(a1 + 56);
    if (v15)
    {
      if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
      {
        sub_19D7569CC(v15, *(_DWORD *)(a1 + 76), "\n--------------\n", v9, v10, v11, v12, v13, v25);
        long long v15 = *(FILE **)(a1 + 56);
      }
      sub_19D7569CC(v15, *(_DWORD *)(a1 + 76), "%@\n", v9, v10, v11, v12, v13, (char)v14);
      sub_19D7569F8(*(FILE **)(a1 + 56), v8, 0, *(unsigned int *)(a1 + 80), v16, v17, v18, v19, v26);
      sub_19D7569CC(*(FILE **)(a1 + 56), *(_DWORD *)(a1 + 76), "\n", v20, v21, v22, v23, v24, v27);
    }
    else
    {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 64), v14, v8);
    }
    CFRelease(v14);
    CFRelease(v8);
    ++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
}

void _MGWriteCache()
{
  uint64_t v107 = *MEMORY[0x1E4F143B8];
  if (sub_19D742880())
  {
    _MGClearInProcessCache();
    CFDataRef v0 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
    id v1 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFMutableDictionaryRef v3 = CFDictionaryCreateMutable(0, 0, v0, v1);
    int v4 = CFDataCreateMutable(0, 5886);
    CFDataSetLength(v4, 5886);
    MutableBytePtr = CFDataGetMutableBytePtr(v4);
    CFStringRef v6 = MGCopyAnswer((const char **)@"mZfUC7qo4pURNhyMHZ62RQ");
    CFDictionarySetValue(Mutable, @"CacheVersion", v6);
    CFDictionarySetValue(Mutable, @"CacheData", v4);
    CFDictionarySetValue(Mutable, @"CacheExtra", v3);
    CFTypeRef cf = Mutable;
    CFDictionarySetValue(Mutable, @"CacheUUID", @"940618A9-9D74-47FE-B6EA-8D86CDA7774C");
    CFRelease(v6);
    CFRelease(v4);
    CFRelease(v3);
    int v98 = -1;
    CFDataRef v7 = (char *)sub_19D71EF5C(&v98);
    int v8 = v98;
    long long v95 = v7;
    if (v98 < 1)
    {
      int v13 = 0;
      int v12 = 0;
      int v11 = 0;
      int v10 = 0;
      int v97 = 0;
    }
    else
    {
      uint64_t v9 = 0;
      int v97 = 0;
      int v10 = 0;
      int v11 = 0;
      int v12 = 0;
      int v13 = 0;
      CFStringRef v14 = v7 + 156;
      do
      {
        long long v15 = *(const char **)(v14 - 39);
        if (v15)
        {
          ++v13;
          if (*((__int16 *)v14 - 1) != -1) {
            ++v12;
          }
          if ((*(unsigned char *)(v14 - 1) & 0x10) != 0)
          {
            uint64_t v16 = (const char **)CFStringCreateWithCString(0, v15, 0x8000100u);
            uint64_t v17 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
            if (v17) {
              uint64_t v23 = v17 + 1;
            }
            else {
              uint64_t v23 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
            }
            _MGLog((uint64_t)v23, 469, @"MGCache: Invoking %@", v18, v19, v20, v21, v22, (char)v16);
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 138412290;
              *(void *)long long v102 = v16;
              _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "MGCache: Invoking %@", buf, 0xCu);
            }
            uint64_t v24 = MGCopyAnswer(v16);
            if (v24)
            {
              int v25 = v24;
              if (*v14 > 0xBu || ((1 << *v14) & 0x8E0) == 0)
              {
                CFDictionarySetValue(v3, v16, v24);
                ++v10;
              }
              CFRelease(v25);
            }
            else
            {
              ++v97;
            }
            ++v11;
            CFRelease(v16);
            int v8 = v98;
          }
        }
        ++v9;
        v14 += 40;
      }
      while (v9 < v8);
    }
    os_unfair_lock_lock((os_unfair_lock_t)&unk_1EB217440);
    uint64_t v33 = v98;
    if (v98 >= 1)
    {
      long long v34 = v95 + 156;
      do
      {
        if ((*(unsigned char *)(v34 - 1) & 0x10) != 0)
        {
          uint64_t v35 = *((__int16 *)v34 - 1);
          if (*((unsigned char *)&qword_1EB2178A8[654] + v35))
          {
            if (*v34 <= 0xBu && ((1 << *v34) & 0x8E0) != 0)
            {
              *(void *)&MutableBytePtr[8 * v35] = qword_1EB2178A8[v35];
              MutableBytePtr[*((__int16 *)v34 - 1) + 5232] = 1;
              ++v10;
            }
          }
        }
        v34 += 40;
        --v33;
      }
      while (v33);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&unk_1EB217440);
    long long v37 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
    if (v37) {
      long long v43 = v37 + 1;
    }
    else {
      long long v43 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
    }
    _MGLog((uint64_t)v43, 531, @"%d total, %d cacheable, %d precacheable, %d precached, %d null", v38, v39, v40, v41, v42, v13);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67110144;
      *(_DWORD *)long long v102 = v13;
      *(_WORD *)&v102[4] = 1024;
      *(_DWORD *)&v102[6] = v12;
      LOWORD(v103) = 1024;
      *(_DWORD *)((char *)&v103 + 2) = v11;
      HIWORD(v103) = 1024;
      int v104 = v10;
      __int16 v105 = 1024;
      int v106 = v97;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%d total, %d cacheable, %d precacheable, %d precached, %d null", buf, 0x20u);
    }
    CFErrorRef error = 0;
    uint64_t v100 = 1;
    long long v44 = (const char *)container_system_group_path_for_identifier();
    if (!v44)
    {
      uint64_t v61 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
      if (v61) {
        uint64_t v67 = v61 + 1;
      }
      else {
        uint64_t v67 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
      }
      _MGLog((uint64_t)v67, 349, @"Failed to look up system group container path: %llu", v62, v63, v64, v65, v66, v100);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 134217984;
        *(void *)long long v102 = v100;
        _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Failed to look up system group container path: %llu", buf, 0xCu);
      }
      goto LABEL_72;
    }
    long long v45 = (char *)v44;
    if (strstr("/private/var/containers/Shared/SystemGroup/systemgroup.com.apple.mobilegestaltcache/Library/Caches/com.apple.MobileGestalt.plist", v44))
    {
      CFAllocatorRef v46 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      size_t v47 = strlen(v45);
      CFURLRef v48 = CFURLCreateFromFileSystemRepresentation((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const UInt8 *)v45, v47, 1u);
      if (v48)
      {
        CFURLRef v49 = v48;
        CFURLRef v50 = CFURLCreateCopyAppendingPathComponent(v46, v48, @"Library", 1u);
        CFURLRef v51 = v50;
        if (v50)
        {
          int v52 = 1;
          if (!CFURLSetResourcePropertyForKey(v50, (CFStringRef)*MEMORY[0x1E4F1D680], (CFTypeRef)*MEMORY[0x1E4F1CFD0], &error)&& error)
          {
            CFStringRef v53 = CFErrorCopyDescription(error);
            BOOL v54 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
            if (v54) {
              uint64_t v60 = v54 + 1;
            }
            else {
              uint64_t v60 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
            }
            _MGLog((uint64_t)v60, 376, @"Failed to set backup exclusion for path: %@", v55, v56, v57, v58, v59, (char)v51);
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 138412290;
              *(void *)long long v102 = v51;
              _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Failed to set backup exclusion for path: %@", buf, 0xCu);
            }
            CFRelease(v53);
            CFRelease(error);
            goto LABEL_80;
          }
        }
        else
        {
          uint64_t v86 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
          if (v86) {
            long long v92 = v86 + 1;
          }
          else {
            long long v92 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
          }
          _MGLog((uint64_t)v92, 369, @"Failed to allocate container backup exclusion URL from %@", v87, v88, v89, v90, v91, (char)v49);
          int v52 = 0;
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 138412290;
            *(void *)long long v102 = v49;
            _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Failed to allocate container backup exclusion URL from %@", buf, 0xCu);
LABEL_80:
            int v52 = 0;
          }
        }
        free(v45);
        CFRelease(v49);
        if (v51)
        {
          CFRelease(v51);
          long long v85 = cf;
          if (v52) {
            goto LABEL_85;
          }
        }
        else
        {
          long long v85 = cf;
          if (v52)
          {
LABEL_85:
            long long v93 = (void (*)(__CFDictionary *, const char *))*((void *)off_1E9449170 + 51);
            if (!v93) {
              long long v93 = (void (*)(__CFDictionary *, const char *))sub_19D71A930(51, 2);
            }
            v93(v85, "/private/var/containers/Shared/SystemGroup/systemgroup.com.apple.mobilegestaltcache/Library/Caches/com.apple.MobileGestalt.plist");
          }
        }
LABEL_73:
        CFRelease(v85);
        return;
      }
      unsigned int v78 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
      if (v78) {
        uint64_t v84 = v78 + 1;
      }
      else {
        uint64_t v84 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
      }
      _MGLog((uint64_t)v84, 363, @"Failed to allocate container URL from %s", v79, v80, v81, v82, v83, (char)v45);
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_71;
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)long long v102 = v45;
      uint64_t v75 = MEMORY[0x1E4F14500];
      int v76 = "Failed to allocate container URL from %s";
      uint32_t v77 = 12;
    }
    else
    {
      uint64_t v68 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
      if (v68) {
        uint64_t v74 = v68 + 1;
      }
      else {
        uint64_t v74 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
      }
      _MGLog((uint64_t)v74, 357, @"System group container path: %s should match expected gestalt cache path: %s", v69, v70, v71, v72, v73, (char)v45);
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_71;
      }
      *(_DWORD *)long long buf = 136315394;
      *(void *)long long v102 = v45;
      *(_WORD *)&v102[8] = 2080;
      long long v103 = "/private/var/containers/Shared/SystemGroup/systemgroup.com.apple.mobilegestaltcache/Library/Caches/com.appl"
             "e.MobileGestalt.plist";
      uint64_t v75 = MEMORY[0x1E4F14500];
      int v76 = "System group container path: %s should match expected gestalt cache path: %s";
      uint32_t v77 = 22;
    }
    _os_log_impl(&dword_19D70E000, v75, OS_LOG_TYPE_DEFAULT, v76, buf, v77);
LABEL_71:
    free(v45);
LABEL_72:
    long long v85 = cf;
    goto LABEL_73;
  }
  char v26 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
  if (v26) {
    long long v32 = v26 + 1;
  }
  else {
    long long v32 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
  }
  _MGLog((uint64_t)v32, 410, @"IOKit is still busy, don't build cache", v27, v28, v29, v30, v31, v94);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "IOKit is still busy, don't build cache", buf, 2u);
  }
}

void _MGClearInProcessCache()
{
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1EB217440);
  int v10 = -1;
  CFDataRef v0 = (char *)sub_19D71EF5C(&v10);
  int v1 = v10;
  if (v10 >= 1)
  {
    uint64_t v2 = 0;
    CFMutableDictionaryRef v3 = (__int16 *)(v0 + 154);
    do
    {
      uint64_t v4 = *v3;
      if (v4 != -1 && *((unsigned char *)&qword_1EB2178A8[654] + v4))
      {
        unsigned int v5 = *(_DWORD *)(v3 + 1);
        BOOL v6 = v5 > 0xB;
        int v7 = (1 << v5) & 0x8E0;
        if (v6 || v7 == 0)
        {
          uint64_t v9 = (const void *)qword_1EB2178A8[v4];
          if (v9)
          {
            CFRelease(v9);
            qword_1EB2178A8[*v3] = 0;
            int v1 = v10;
          }
        }
      }
      ++v2;
      v3 += 80;
    }
    while (v2 < v1);
  }
  bzero(qword_1EB2178A8, 0x16FEuLL);
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1EB217440);
}

uint64_t _MGRebuildCache()
{
  sub_19D756428();
  if ((_MGCacheValid() & 1) == 0)
  {
    CFDataRef v0 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
    if (v0) {
      BOOL v6 = v0 + 1;
    }
    else {
      BOOL v6 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
    }
    _MGLog((uint64_t)v6, 591, @"Waiting for IOKit to quiesce", v1, v2, v3, v4, v5, v15[0]);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Waiting for IOKit to quiesce", buf, 2u);
    }
    if (sub_19D742880())
    {
      _MGWriteCache();
    }
    else
    {
      int v7 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
      if (v7) {
        int v13 = v7 + 1;
      }
      else {
        int v13 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
      }
      _MGLog((uint64_t)v13, 595, @"No cache generated", v8, v9, v10, v11, v12, v15[0]);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long v15 = 0;
        _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "No cache generated", v15, 2u);
      }
    }
  }
  return _MGCacheValid();
}

uint64_t sub_19D756428()
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (!unlink("/private/var/containers/Shared/SystemGroup/systemgroup.com.apple.mobilegestaltcache/Library/Caches/com.apple.MobileGestalt.plist"))
  {
    uint64_t v10 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
    if (v10) {
      uint64_t v16 = v10 + 1;
    }
    else {
      uint64_t v16 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
    }
    _MGLog((uint64_t)v16, 614, @"Successfully deleted gestalt cache", v11, v12, v13, v14, v15, v28);
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_13;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v8 = MEMORY[0x1E4F14500];
    uint64_t v9 = "Successfully deleted gestalt cache";
    goto LABEL_12;
  }
  int v0 = *__error();
  uint64_t v1 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
  uint64_t v2 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
  if (v2) {
    uint64_t v1 = v2 + 1;
  }
  if (v0 == 2)
  {
    _MGLog((uint64_t)v1, 611, @"Cache file did not exist. Rebuilding.", v3, v4, v5, v6, v7, v28);
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
LABEL_13:
      _MGClearInProcessCache();
      _MGWriteCache();
      return _MGCacheValid();
    }
    *(_WORD *)long long buf = 0;
    uint64_t v8 = MEMORY[0x1E4F14500];
    uint64_t v9 = "Cache file did not exist. Rebuilding.";
LABEL_12:
    _os_log_impl(&dword_19D70E000, v8, OS_LOG_TYPE_DEFAULT, v9, buf, 2u);
    goto LABEL_13;
  }
  uint64_t v18 = __error();
  char v19 = strerror(*v18);
  _MGLog((uint64_t)v1, 608, @"Failed to delete gestalt cache: %s", v20, v21, v22, v23, v24, v19);
  BOOL v25 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (v25)
  {
    char v26 = __error();
    uint64_t v27 = strerror(*v26);
    *(_DWORD *)long long buf = 136315138;
    uint64_t v30 = v27;
    _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "Failed to delete gestalt cache: %s", buf, 0xCu);
    return 0;
  }
  return result;
}

const char **_MGCacheCopyValueForKey(const char **a1)
{
  uint64_t result = sub_19D710B44(a1);
  if (result)
  {
    return (const char **)sub_19D711488((uint64_t)result);
  }
  return result;
}

void sub_19D756634(FILE *a1, int a2, char *cStr, va_list a4)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  CFStringRef v7 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  bzero(buffer, 0x400uLL);
  if (v7)
  {
    CFStringRef v8 = CFStringCreateWithFormatAndArguments(0, 0, v7, a4);
    if (v8)
    {
      CFStringRef v9 = v8;
      if (CFStringGetCString(v8, buffer, 1024, 0x8000100u))
      {
        if (a2)
        {
          size_t v10 = strlen(buffer);
          if (v10)
          {
            size_t v11 = v10;
            for (size_t i = 0; i < v11; ++i)
            {
              int v13 = buffer[i];
              if ((v13 - 92) <= 0x21 && ((1 << (buffer[i] - 92)) & 0x280000001) != 0) {
                goto LABEL_14;
              }
              if (v13 == 27)
              {
                int v16 = -1;
                if (sscanf(&buffer[i], "\x1B[%dm", &v16) == 1)
                {
                  do
                    int v15 = buffer[i++];
                  while (v15 != 109);
                  --i;
                  if (v16)
                  {
                    v16 -= 30;
                    fprintf(a1, "\\cf%d ");
                  }
                  else
                  {
                    fwrite("\\cf0 ", 5uLL, 1uLL, a1);
                  }
                }
                continue;
              }
              if (v13 != 10) {
                fputc(v13, a1);
              }
              else {
LABEL_14:
              }
                fprintf(a1, "\\%c");
            }
          }
        }
        else
        {
          fputs(buffer, a1);
        }
      }
      CFRelease(v7);
    }
    else
    {
      CFStringRef v9 = v7;
    }
    CFRelease(v9);
  }
}

size_t sub_19D756840(FILE *__stream)
{
  fwrite("{\\rtf1\\ansi\\ansicpg1252\\cocoartf1183\n", 0x25uLL, 1uLL, __stream);
  fwrite("{\\fonttbl\\f0\\fnil\\fcharset0 Menlo-Regular;}\n", 0x2CuLL, 1uLL, __stream);
  fwrite("{\\colortbl;", 0xBuLL, 1uLL, __stream);
  fwrite("\\red194\\green54\\blue33;", 0x17uLL, 1uLL, __stream);
  fwrite("\\red37\\green188\\blue36;", 0x17uLL, 1uLL, __stream);
  fwrite("\\red128\\green128\\blue0;", 0x17uLL, 1uLL, __stream);
  fwrite("\\red73\\green46\\blue225;", 0x17uLL, 1uLL, __stream);
  fwrite("\\red211\\green56\\blue211;", 0x18uLL, 1uLL, __stream);
  fwrite("\\red51\\green187\\blue200;", 0x18uLL, 1uLL, __stream);
  fwrite("}\n", 2uLL, 1uLL, __stream);
  fwrite("\\margl1440\\margr1440\\vieww16420\\viewh18180\\viewkind0\n", 0x35uLL, 1uLL, __stream);

  return fwrite("\\pard\\tx720\\tx1440\\tx2160\\tx2880\\tx3600\\tx4320\\tx5040\\tx5760\\tx6480\\tx7200\\tx7920\\tx8640\\pardirnatural\n\n\\f0\\fs24 ", 0x71uLL, 1uLL, __stream);
}

uint64_t sub_19D75698C(FILE *a1)
{
  fputc(125, a1);

  return fflush(a1);
}

void sub_19D7569CC(FILE *a1, int a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

void sub_19D7569F8(FILE *a1, const void *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  int v10 = a4 & 4;
  if ((a4 & 4) != 0) {
    int v11 = 1;
  }
  else {
    int v11 = a4 & 1;
  }
  if ((a4 & 4) != 0) {
    int v12 = 1;
  }
  else {
    int v12 = a4 & 2;
  }
  if (a2)
  {
    CFTypeID v16 = CFGetTypeID(a2);
    if (v16 == CFBooleanGetTypeID()) {
      goto LABEL_10;
    }
    CFTypeID v22 = CFGetTypeID(a2);
    if (v22 == CFNumberGetTypeID()) {
      goto LABEL_10;
    }
    CFTypeID v23 = CFGetTypeID(a2);
    if (v23 == CFStringGetTypeID())
    {
      sub_19D7569CC(a1, v10, "\"%@\"", v24, v25, v26, v27, v28, (char)a2);
      return;
    }
    CFTypeID v29 = CFGetTypeID(a2);
    if (v29 == CFDataGetTypeID())
    {
      CFIndex Length = CFDataGetLength((CFDataRef)a2);
      CFMutableDictionaryRef Mutable = CFStringCreateMutable(0, 0);
      BytePtr = CFDataGetBytePtr((CFDataRef)a2);
      uint64_t v38 = BytePtr;
      if (Length < 25)
      {
        if (Length < 1) {
          goto LABEL_46;
        }
        int v96 = v11;
        uint64_t v66 = BytePtr;
        CFIndex v67 = Length;
        do
        {
          unsigned int v68 = *v66++;
          CFStringAppendFormat(Mutable, 0, @"%02x", v68);
          --v67;
        }
        while (v67);
      }
      else
      {
        int v96 = v11;
        unint64_t v39 = 0;
        do
        {
          CFStringAppendFormat(Mutable, 0, @"%02x%02x%02x%02x", v38[v39], v38[v39 + 1], v38[v39 + 2], v38[v39 + 3]);
          BOOL v40 = v39 >= 0xC;
          v39 += 4;
        }
        while (!v40);
        CFStringAppend(Mutable, @" ... ");
        CFIndex v41 = Length - 8;
        do
        {
          CFStringAppendFormat(Mutable, 0, @"%02x%02x%02x%02x", v38[v41], v38[v41 + 1], v38[v41 + 2], v38[v41 + 3]);
          v41 += 4;
        }
        while (v41 < Length);
      }
      int v11 = v96;
      if ((a4 & 8) != 0 && Length >= 32)
      {
        sub_19D7569CC(a1, v10, "{ x: %f, y: %f, width: %f, height: %f }", v33, v34, v35, v36, v37, *(_OWORD *)v38);
        goto LABEL_47;
      }
LABEL_46:
      sub_19D7569CC(a1, v10, "Data[%llu] (%@)", v33, v34, v35, v36, v37, Length);
LABEL_47:
      if (v11)
      {
        if (Length)
        {
          CFDataRef v69 = sub_19D71D75C((CFDataRef)a2);
          if (v69)
          {
            CFDataRef v75 = v69;
            sub_19D7569CC(a1, v10, " (\"%@\")", v70, v71, v72, v73, v74, (char)v69);
            CFRelease(v75);
          }
        }
      }
      CFRelease(Mutable);
      return;
    }
    CFTypeID v42 = CFGetTypeID(a2);
    if (v42 == CFDictionaryGetTypeID())
    {
      int v97 = v11;
      CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)a2);
      int64_t v49 = Count;
      if (v12) {
        sub_19D7569CC(a1, v10, "Dictionary[%lld]", v44, v45, v46, v47, v48, Count);
      }
      CFURLRef v50 = (const void **)malloc_type_calloc(v49, 8uLL, 0xC0040B8AA526DuLL);
      CFDictionaryGetKeysAndValues((CFDictionaryRef)a2, v50, 0);
      qsort_b(v50, v49, 8uLL, &unk_1EEF8F658);
      if (v49 >= 1)
      {
        uint64_t v56 = 0;
        uint64_t v57 = (a3 + 1);
        int v95 = a3 % 6 + 31;
        do
        {
          int64_t v58 = v49;
          sub_19D7569CC(a1, v10, "\n", v51, v52, v53, v54, v55, v94);
          if (v57)
          {
            int v64 = v57;
            do
            {
              --v64;
              fwrite("   ", 3uLL, 1uLL, a1);
            }
            while (v64);
          }
          if (v97) {
            sub_19D7569CC(a1, v10, "\x1B[%dm%@\x1B[0m => ", v59, v60, v61, v62, v63, v95);
          }
          else {
            sub_19D7569CC(a1, v10, "%@ => ", v59, v60, v61, v62, v63, (char)v50[v56]);
          }
          int64_t v49 = v58;
          CFDataRef Value = CFDictionaryGetValue((CFDictionaryRef)a2, v50[v56]);
          sub_19D7569F8(a1, Value, v57, a4);
          ++v56;
        }
        while (v56 != v58);
      }
      free(v50);
    }
    else
    {
      CFTypeID v76 = CFGetTypeID(a2);
      if (v76 != CFArrayGetTypeID())
      {
LABEL_10:
        sub_19D7569CC(a1, v10, "%@", v17, v18, v19, v20, v21, (char)a2);
        return;
      }
      int v98 = v11;
      CFIndex v77 = CFArrayGetCount((CFArrayRef)a2);
      uint64_t v83 = v77;
      if (v12) {
        sub_19D7569CC(a1, v10, "Array[%lld]", v78, v79, v80, v81, v82, v77);
      }
      if (v83 >= 1)
      {
        CFIndex v84 = 0;
        uint64_t v85 = (a3 + 1);
        int v86 = a3 % 6 + 31;
        do
        {
          sub_19D7569CC(a1, v10, "\n", v78, v79, v80, v81, v82, v94);
          if (v85)
          {
            int v92 = v85;
            do
            {
              --v92;
              fwrite("   ", 3uLL, 1uLL, a1);
            }
            while (v92);
          }
          if (v98) {
            sub_19D7569CC(a1, v10, "\x1B[%dm[%lld]\x1B[0m: ", v87, v88, v89, v90, v91, v86);
          }
          else {
            sub_19D7569CC(a1, v10, "[%lld]: ", v87, v88, v89, v90, v91, v84);
          }
          CFStringRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a2, v84);
          sub_19D7569F8(a1, ValueAtIndex, v85, a4);
          ++v84;
        }
        while (v84 != v83);
      }
    }
  }
  else
  {
    sub_19D7569CC(a1, a4 & 4, "NULL", a4, a5, a6, a7, a8, a9);
  }
}

CFComparisonResult sub_19D756FBC(uint64_t a1, CFTypeRef *a2, const __CFNumber **a3)
{
  CFTypeID TypeID = CFNumberGetTypeID();
  CFTypeID v6 = CFGetTypeID(*a2);
  CFNumberRef v7 = (const __CFNumber *)*a2;
  CFNumberRef v8 = *a3;
  if (TypeID == v6) {
    return CFNumberCompare(v7, v8, 0);
  }
  else {
    return CFStringCompare((CFStringRef)v7, (CFStringRef)v8, 0);
  }
}

uint64_t sub_19D757020(uint64_t a1, unint64_t *a2)
{
  return sub_19D757028(a1, a2, 0);
}

uint64_t sub_19D757028(uint64_t result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *(void *)(result + 8);
  if (v3 < 2) {
    return 3;
  }
  uint64_t v4 = *(unsigned char **)result;
  if (*(void *)result == -1) {
    goto LABEL_68;
  }
  uint64_t v5 = &v4[v3];
  CFTypeID v6 = v4 + 1;
  unint64_t v7 = v3 - 1;
  unint64_t v8 = *v4 & 0x1F;
  if ((*v4 & 0x1F) != 0x1F)
  {
    int v12 = v4 + 1;
LABEL_20:
    *a2 = v8 | ((unint64_t)(*v4 & 0xE0) << 56);
    if (v12 != (char *)-1)
    {
      if (v12 >= v5 || v12 < v4) {
        goto LABEL_69;
      }
      uint64_t v14 = v12 + 1;
      unint64_t v15 = *v12;
      unint64_t v16 = v7 - 1;
      if ((*v12 & 0x80000000) == 0)
      {
        if (a3 || v16 >= v15)
        {
          if (v16 >= v15) {
            unint64_t v17 = *v12;
          }
          else {
            unint64_t v17 = v7 - 1;
          }
          BOOL v10 = v5 >= v14;
          unint64_t v18 = v5 - v14;
          if (v10 && v4 <= v14 && v17 <= v18)
          {
            a2[1] = (unint64_t)v14;
            a2[2] = v17;
            if (!a3) {
              return 0;
            }
LABEL_34:
            uint64_t result = 0;
            *a3 = v15;
            return result;
          }
LABEL_69:
          __break(0x5519u);
LABEL_70:
          __break(0x5515u);
          return result;
        }
        return 3;
      }
      unint64_t v19 = v15 & 0x7F;
      if ((v15 & 0x7F) > 8) {
        return 3;
      }
      if ((v15 & 0x7F) == 0 || v16 < v19) {
        return 3;
      }
      if (v14 >= v5 || v14 < v4) {
        goto LABEL_69;
      }
      if (!*v14) {
        return 3;
      }
      unint64_t v15 = 0;
      uint64_t v21 = (v19 - 1);
      unint64_t v22 = v7 - v21 - 2;
      unint64_t v23 = (unint64_t)&v12[v21 + 2];
      while (v14 != (unsigned char *)-1)
      {
        if (v14 >= v5) {
          goto LABEL_69;
        }
        BOOL v10 = v16-- != 0;
        if (!v10) {
          goto LABEL_70;
        }
        unsigned int v24 = *v14++;
        unint64_t v15 = (v15 << 8) | v24;
        LODWORD(v19) = v19 - 1;
        if (!v19)
        {
          if (a3) {
            BOOL v25 = 0;
          }
          else {
            BOOL v25 = v15 > v22;
          }
          char v26 = v25;
          uint64_t result = 3;
          if (v15 < 0x80 || (v26 & 1) != 0) {
            return result;
          }
          if (v15 >= v22) {
            unint64_t v27 = v22;
          }
          else {
            unint64_t v27 = v15;
          }
          BOOL v10 = (unint64_t)v5 >= v23;
          uint64_t v28 = &v5[-v23];
          if (!v10 || (unint64_t)v4 > v23 || v27 > (unint64_t)v28) {
            goto LABEL_69;
          }
          a2[1] = v23;
          a2[2] = v27;
          if (a3) {
            goto LABEL_34;
          }
          return 0;
        }
      }
    }
LABEL_68:
    __break(0x5513u);
    goto LABEL_69;
  }
  unsigned int v9 = *v6;
  BOOL v10 = v9 != 128 && v9 >= 0x1F;
  if (!v10) {
    return 3;
  }
  unint64_t v8 = 0;
  uint64_t result = 3;
  while (v7 >= 2)
  {
    unint64_t v11 = v8;
    if (v8 >> 57) {
      break;
    }
    if (v6 == (unsigned __int8 *)-1) {
      goto LABEL_68;
    }
    if (v6 >= v5 || v6 < v4) {
      goto LABEL_69;
    }
    int v12 = (char *)(v6 + 1);
    --v7;
    unsigned __int8 v13 = *v6;
    unint64_t v8 = *v6++ & 0x7F | (v8 << 7);
    if ((v13 & 0x80) == 0)
    {
      if (v11 >> 54) {
        return 3;
      }
      goto LABEL_20;
    }
  }
  return result;
}

uint64_t sub_19D757218(uint64_t result, unint64_t *a2, int a3)
{
  unint64_t v3 = *(void *)(result + 8);
  if (v3 < 2) {
    return 3;
  }
  uint64_t v4 = *(unsigned char **)result;
  if (*(void *)result == -1) {
    goto LABEL_54;
  }
  uint64_t v5 = &v4[v3];
  CFTypeID v6 = v4 + 1;
  unint64_t v7 = v3 - 1;
  unint64_t v8 = *v4 & 0x1F;
  if ((*v4 & 0x1F) != 0x1F)
  {
    int v12 = v4 + 1;
LABEL_20:
    *a2 = v8 | ((unint64_t)(*v4 & 0xE0) << 56);
    if (v12 != (char *)-1)
    {
      if (v12 >= v5 || v12 < v4) {
        goto LABEL_55;
      }
      uint64_t v14 = v12 + 1;
      unint64_t v15 = *v12;
      unint64_t v16 = v7 - 1;
      if ((*v12 & 0x80000000) == 0)
      {
        BOOL v17 = v16 < v15 && a3 == 0;
        unint64_t v18 = (unint64_t)(v12 + 1);
        if (v17) {
          return 3;
        }
LABEL_28:
        if (v15 > (~v18 & 0x7FFFFFFFFFFFFFFFLL)) {
          return 7;
        }
        if (v18 <= v18 + v15)
        {
          uint64_t result = 0;
          a2[1] = v18;
          a2[2] = v15;
          return result;
        }
        goto LABEL_55;
      }
      unint64_t v19 = v15 & 0x7F;
      if ((v15 & 0x7F) > 8) {
        return 3;
      }
      if ((v15 & 0x7F) == 0 || v16 < v19) {
        return 3;
      }
      if (v14 >= v5 || v14 < v4)
      {
LABEL_55:
        __break(0x5519u);
LABEL_56:
        __break(0x5515u);
        return result;
      }
      if (!*v14) {
        return 3;
      }
      unint64_t v15 = 0;
      uint64_t v21 = (v19 - 1);
      unint64_t v22 = v7 - v21 - 2;
      unint64_t v18 = (unint64_t)&v12[v21 + 2];
      while (v14 != (unsigned char *)-1)
      {
        if (v14 >= v5) {
          goto LABEL_55;
        }
        BOOL v10 = v16-- != 0;
        if (!v10) {
          goto LABEL_56;
        }
        unsigned int v23 = *v14++;
        unint64_t v15 = (v15 << 8) | v23;
        LODWORD(v19) = v19 - 1;
        if (!v19)
        {
          if (v15 <= v22) {
            char v24 = 1;
          }
          else {
            char v24 = a3;
          }
          uint64_t result = 3;
          if (v15 >= 0x80 && (v24 & 1) != 0) {
            goto LABEL_28;
          }
          return result;
        }
      }
    }
LABEL_54:
    __break(0x5513u);
    goto LABEL_55;
  }
  unsigned int v9 = *v6;
  BOOL v10 = v9 != 128 && v9 >= 0x1F;
  if (!v10) {
    return 3;
  }
  unint64_t v8 = 0;
  uint64_t result = 3;
  while (v7 >= 2)
  {
    unint64_t v11 = v8;
    if (v8 >> 57) {
      break;
    }
    if (v6 == (unsigned __int8 *)-1) {
      goto LABEL_54;
    }
    if (v6 >= v5 || v6 < v4) {
      goto LABEL_55;
    }
    int v12 = (char *)(v6 + 1);
    --v7;
    unsigned __int8 v13 = *v6;
    unint64_t v8 = *v6++ & 0x7F | (v8 << 7);
    if ((v13 & 0x80) == 0)
    {
      if (v11 >> 54) {
        return 3;
      }
      goto LABEL_20;
    }
  }
  return result;
}

uint64_t sub_19D7573D8(uint64_t result, unint64_t *a2, unsigned char *a3)
{
  *a3 = 0;
  *a2 = 0;
  a2[1] = 0;
  if (!*(void *)(result + 8)) {
    return 3;
  }
  unsigned int v3 = **(unsigned __int8 **)result;
  *a3 = v3;
  uint64_t v4 = *(void *)(result + 8);
  if (v4 != 1)
  {
    if (v3 <= 7)
    {
      unint64_t v5 = v4 - 1;
      if (!v4)
      {
LABEL_20:
        __break(0x5515u);
        goto LABEL_21;
      }
      unint64_t v6 = *(void *)result;
      unint64_t v7 = *(void *)result + v4;
      unint64_t v8 = (unsigned __int8 *)(*(void *)result + v5);
      if ((unint64_t)v8 >= v7 || (unint64_t)v8 < v6)
      {
LABEL_19:
        __break(0x5519u);
        goto LABEL_20;
      }
      if (((0xFFu >> (8 - v3)) & *v8) == 0)
      {
        if (v6 == -1)
        {
LABEL_21:
          __break(0x5513u);
          return result;
        }
        unint64_t v10 = v6 + 1;
        if (v6 + 1 <= v7 && v6 <= v10)
        {
          uint64_t result = 0;
          *a2 = v10;
          a2[1] = v5;
          return result;
        }
        goto LABEL_19;
      }
    }
    return 3;
  }
  if (v3) {
    return 3;
  }
  else {
    return 0;
  }
}

uint64_t sub_19D757498(unsigned __int8 **a1, BOOL *a2)
{
  if (a1[1] != (unsigned __int8 *)1) {
    return 3;
  }
  int v2 = **a1;
  if (v2 != 255 && v2 != 0) {
    return 3;
  }
  uint64_t result = 0;
  *a2 = v2 != 0;
  return result;
}

uint64_t sub_19D7574D4(unsigned __int8 **a1, BOOL a2, BOOL *a3)
{
  unsigned int v3 = a1[1];
  if (!v3) {
    goto LABEL_9;
  }
  if (v3 == (unsigned __int8 *)1)
  {
    int v4 = **a1;
    if (v4 == 255 || v4 == 0)
    {
      a2 = v4 != 0;
LABEL_9:
      uint64_t result = 0;
      *a3 = a2;
      return result;
    }
  }
  return 3;
}

uint64_t sub_19D757514(char **a1, _DWORD *a2)
{
  v4[1] = *MEMORY[0x1E4F143B8];
  v4[0] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t result = sub_19D757598(a1, v4);
  if (!result)
  {
    if (HIDWORD(v4[0]))
    {
      return 7;
    }
    else
    {
      uint64_t result = 0;
      *a2 = v4[0];
    }
  }
  return result;
}

uint64_t sub_19D757598(char **a1, unint64_t *a2)
{
  unint64_t v2 = (unint64_t)a1[1];
  if (!v2) {
    return 3;
  }
  unsigned int v3 = (unsigned __int8 *)*a1;
  if (**a1 < 0) {
    return 3;
  }
  if (**a1)
  {
    if (v2 > 8) {
      return 7;
    }
    goto LABEL_10;
  }
  if (v2 >= 2)
  {
    if (((char)v3[1] & 0x80000000) == 0) {
      return 3;
    }
    if (v2 > 9) {
      return 7;
    }
  }
LABEL_10:
  unint64_t v5 = 0;
  do
  {
    unsigned int v6 = *v3++;
    unint64_t v5 = v6 | (v5 << 8);
    --v2;
  }
  while (v2);
  uint64_t result = 0;
  *a2 = v5;
  return result;
}

uint64_t sub_19D757600(uint64_t a1, void *a2, void *a3)
{
  v8[3] = *MEMORY[0x1E4F143B8];
  memset(v8, 170, 24);
  uint64_t result = sub_19D757028(a1, v8, 0);
  if (!result)
  {
    unint64_t v6 = v8[0];
    *a2 = v8[0];
    if (v6 >> 1 == 0x1000000000000008)
    {
      if (__CFADD__(v8[1], v8[2]))
      {
        __break(0x5513u);
      }
      else
      {
        unint64_t v7 = v8[1] + v8[2];
        if (v8[1] <= v8[1] + v8[2])
        {
          uint64_t result = 0;
          *a3 = v8[1];
          a3[1] = v7;
          return result;
        }
      }
      __break(0x5519u);
    }
    else
    {
      return 2;
    }
  }
  return result;
}

unint64_t *sub_19D7576BC(unint64_t *result, unint64_t *a2)
{
  unint64_t v2 = *result;
  unint64_t v3 = result[1];
  if (__CFADD__(*result, v3))
  {
    __break(0x5513u);
  }
  else
  {
    unint64_t v4 = v2 + v3;
    if (v2 <= v4)
    {
      *a2 = v2;
      a2[1] = v4;
      return 0;
    }
  }
  __break(0x5519u);
  return result;
}

uint64_t sub_19D7576E8(unint64_t *a1, unint64_t *a2)
{
  v10[2] = *MEMORY[0x1E4F143B8];
  v10[0] = 0;
  unint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  if (*a1 >= v3) {
    return 1;
  }
  v10[0] = *a1;
  v10[1] = v3 - v2;
  uint64_t result = sub_19D757028((uint64_t)v10, a2, 0);
  if (!result)
  {
    unint64_t v8 = a2[1];
    unint64_t v7 = a2[2];
    if (!__CFADD__(v8, v7))
    {
      unint64_t v9 = v8 + v7;
      if (v9 <= a1[1] && *a1 <= v9)
      {
        uint64_t result = 0;
        *a1 = v9;
        return result;
      }
      __break(0x5519u);
    }
    __break(0x5513u);
  }
  return result;
}

uint64_t sub_19D7577A8(uint64_t a1, unsigned int a2, uint64_t a3, unint64_t a4, unint64_t a5, size_t a6)
{
  v12[3] = *MEMORY[0x1E4F143B8];
  memset(v12, 170, 24);
  uint64_t result = sub_19D757028(a1, v12, 0);
  if (!result)
  {
    if (v12[0] == 0x2000000000000010) {
      return sub_19D757874(&v12[1], a2, a3, a4, a5, a6);
    }
    else {
      return 2;
    }
  }
  return result;
}

uint64_t sub_19D757874(unint64_t *a1, unsigned int a2, uint64_t a3, unint64_t a4, unint64_t a5, size_t a6)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  unint64_t v32 = 0;
  if (a6)
  {
    if (a6 > a5) {
      goto LABEL_59;
    }
    bzero((void *)a4, a6);
  }
  unint64_t v10 = *a1;
  unint64_t v11 = a1[1];
  if (__CFADD__(*a1, v11)) {
    goto LABEL_58;
  }
  unint64_t v12 = v10 + v11;
  if (v10 > v12) {
LABEL_59:
  }
    __break(0x5519u);
  unint64_t v32 = *a1;
  unint64_t v33 = v12;
  if (a2)
  {
    unsigned __int16 v13 = 0;
    CFTypeID v29 = (char *)(a4 + a5);
    while (1)
    {
      memset(v31, 170, sizeof(v31));
      unint64_t v15 = v32;
      unint64_t v14 = v33;
      uint64_t result = sub_19D7576E8(&v32, v31);
      if (result) {
        break;
      }
      if (a2 <= v13) {
        return 2;
      }
      while (1)
      {
        if (24 * (__int16)v13 > (unint64_t)~a3) {
          goto LABEL_58;
        }
        unsigned __int16 v17 = v13;
        __int16 v18 = *(_WORD *)(a3 + 24 * v13 + 16);
        if ((v18 & 2) != 0 || v31[0] == *(void *)(a3 + 24 * v13 + 8)) {
          break;
        }
        uint64_t result = 2;
        if (v18)
        {
          ++v13;
          if (a2 > (unsigned __int16)(v17 + 1)) {
            continue;
          }
        }
        return result;
      }
      if ((v18 & 4) == 0)
      {
        unint64_t v19 = *(void *)(a3 + 24 * v13);
        if (v19 > 0xFFFFFFFFFFFFFFEFLL || v19 + 16 > a5) {
          return 7;
        }
        if (v19 > ~a4) {
          goto LABEL_58;
        }
        uint64_t v21 = (char *)(a4 + v19);
        if (v21 >= v29 || (unint64_t)v21 < a4) {
          goto LABEL_59;
        }
        *(_OWORD *)uint64_t v21 = *(_OWORD *)&v31[1];
        if ((v18 & 8) != 0)
        {
          if (v15 >= v31[1])
          {
            if (v21 + 16 <= v29 && v14 >= v15 && *((void *)v21 + 1) <= v14 - v15)
            {
              *(void *)uint64_t v21 = v15;
              return 3;
            }
            goto LABEL_59;
          }
          if (v21 + 16 > v29) {
            goto LABEL_59;
          }
          uint64_t v23 = *((void *)v21 + 1);
          unint64_t v24 = v23 + v31[1] - v15;
          if (__CFADD__(v23, v31[1] - v15))
          {
            __break(0x5500u);
            return result;
          }
          if (v14 < v15 || v24 > v14 - v15) {
            goto LABEL_59;
          }
          *(void *)uint64_t v21 = v15;
          *((void *)v21 + 1) = v24;
        }
      }
      ++v13;
      if (a2 == (unsigned __int16)(v17 + 1))
      {
        if (!__CFADD__(v31[1], v31[2]))
        {
          unint64_t v28 = a1[1];
          if (!__CFADD__(*a1, v28))
          {
            unint64_t v10 = v31[1] + v31[2];
            unint64_t v12 = *a1 + v28;
            goto LABEL_47;
          }
        }
LABEL_58:
        __break(0x5513u);
        goto LABEL_59;
      }
      if (a2 <= (unsigned __int16)(v17 + 1))
      {
        unint64_t v10 = v32;
        unint64_t v12 = v33;
        goto LABEL_47;
      }
    }
    if (result == 1)
    {
      if (a2 <= v13)
      {
        return 0;
      }
      else
      {
        BOOL v25 = (__int16 *)(a3 + 24 * v13 + 16);
        unint64_t v26 = a2 - (unint64_t)v13;
        uint64_t result = 0;
        while (1)
        {
          __int16 v27 = *v25;
          v25 += 12;
          if ((v27 & 1) == 0) {
            break;
          }
          if (!--v26) {
            return result;
          }
        }
        return 5;
      }
    }
  }
  else
  {
LABEL_47:
    if (v10 == v12) {
      return 0;
    }
    else {
      return 3;
    }
  }
  return result;
}

uint64_t sub_19D757B48(uint64_t result, unsigned int a2, uint64_t a3, unint64_t a4, size_t a5)
{
  if ((a4 | 0x7FFFFFFFFFFFFFFFLL) >= a4) {
    return sub_19D7577A8(result, a2, a3, a4, ~a4 & 0x7FFFFFFFFFFFFFFFLL, a5);
  }
  __break(0x5519u);
  return result;
}

BOOL sub_19D757B68(uint64_t a1, uint64_t a2)
{
  BOOL result = 0;
  if (a1 && a2)
  {
    size_t v4 = *(void *)(a1 + 8);
    return v4 == *(void *)(a2 + 8) && memcmp(*(const void **)a1, *(const void **)a2, v4) == 0;
  }
  return result;
}

uint64_t sub_19D757BBC(unsigned int *a1)
{
  return bswap32(*a1);
}

void *sub_19D757BC8(void *result)
{
  off_1E9449430 = result;
  return result;
}

uint64_t sub_19D757BD4(char *a1, size_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = 6;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        if (a5)
        {
          unint64_t v10 = *(void **)(a5 + 32);
          if (v10)
          {
            if (*v10 == a4)
            {
              if (sub_19D757B68(v10[1], (uint64_t)&off_1E59636B0))
              {
                if (!sub_19D761B30(a1, a2, a3)) {
                  return 0;
                }
              }
              else if (sub_19D757B68(*(void *)(*(void *)(a5 + 32) + 8), (uint64_t)&off_1E59636C0))
              {
                if (!sub_19D761B70(a1, a2, a3)) {
                  return 0;
                }
              }
              else
              {
                if (!sub_19D757B68(*(void *)(*(void *)(a5 + 32) + 8), (uint64_t)&off_1E59636D0)) {
                  return 4;
                }
                if (!sub_19D761BDC(a1, a2, a3)) {
                  return 0;
                }
              }
              return 3;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_19D757CC8(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, uint64_t a7, uint64_t a8)
{
  int v72 = 0;
  memset(v71, 170, sizeof(v71));
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v69 = v8;
  long long v70 = v8;
  long long v67 = v8;
  long long v68 = v8;
  long long v65 = v8;
  long long v66 = v8;
  long long v63 = v8;
  long long v64 = v8;
  long long v61 = v8;
  long long v62 = v8;
  long long v59 = v8;
  long long v60 = v8;
  long long v57 = v8;
  long long v58 = v8;
  long long v55 = v8;
  long long v56 = v8;
  long long v53 = v8;
  long long v54 = v8;
  v51[18] = v8;
  long long v52 = v8;
  v51[16] = v8;
  v51[17] = v8;
  v51[14] = v8;
  v51[15] = v8;
  v51[12] = v8;
  v51[13] = v8;
  v51[10] = v8;
  v51[11] = v8;
  v51[8] = v8;
  v51[9] = v8;
  v51[6] = v8;
  v51[7] = v8;
  v51[4] = v8;
  v51[5] = v8;
  v51[2] = v8;
  v51[3] = v8;
  v51[0] = v8;
  v51[1] = v8;
  CFURLRef v50 = v51;
  if (a8)
  {
    if (a1 && a2)
    {
      if (a5 && a6)
      {
        if (!a2)
        {
          uint64_t v19 = 3;
          sub_19D759A28(3, "%s: _AMFDRDecodeIterateCertChainBegin failed", "_AMFDRDecodeVerifyChain");
          uint64_t v21 = *(void *)a8 | 1;
          goto LABEL_56;
        }
        v71[1] = a2;
        v71[2] = 0;
        v71[0] = a1;
        sub_19D75B43C((uint64_t)v71, *(void *)(a8 + 2016), &v50, &v72);
        uint64_t v15 = v14;
        if (v14 || !v50)
        {
          uint64_t v19 = 3;
          sub_19D759A28(3, "%s: _AMFDRDecodeIterateCertChainNext failed (first call)", "_AMFDRDecodeVerifyChain");
          uint64_t v21 = *(void *)a8 | v15;
LABEL_56:
          *(void *)a8 = v21;
          return v19;
        }
        if (*(void *)(a8 + 1944) && *(void *)(a8 + 1952))
        {
          if (*(unsigned char *)(a8 + 2017))
          {
            memset(v49, 0, sizeof(v49));
            long long v48 = 0u;
            uint64_t v22 = sub_19D759C28(a8 + 1768);
            if (v22 == 0x40000000000000)
            {
              sub_19D759A28(4, "%s: trustobject does not contain trusted key", "_AMFDRDecodeVerifyChain");
            }
            else if (v22)
            {
              *(void *)a8 |= v22;
              sub_19D759A28(3, "%s: failed to begin decoding trusted key");
              return 3;
            }
            int v23 = 0;
LABEL_26:
            while (1)
            {
              unint64_t v73 = 0;
              uint64_t v74 = 0;
              uint64_t v75 = 0;
              int v24 = sub_19D7576E8((unint64_t *)(a8 + 1896), &v73);
              if (v24) {
                break;
              }
              uint64_t v25 = v74;
              unsigned int v26 = v75;
              if (v74) {
                BOOL v27 = v75 == 0;
              }
              else {
                BOOL v27 = 1;
              }
              if (v27) {
                goto LABEL_40;
              }
              sub_19D759A28(7, "%s: PKI: verify cert was issued by trusted key %d", "_AMFDRDecodeVerifyChain", v23);
              uint64_t v28 = sub_19D75AACC((uint64_t)&v48, v25, v26);
              if (v28)
              {
                sub_19D759A28(7, "%s: PKI: decoding trusted key %d failed with error 0x%016llX");
                goto LABEL_72;
              }
              while (!sub_19D757B68((uint64_t)(v50 + 1), (*(void **)((char *)&off_1E9449178 + v28))[3])
                   || !sub_19D757B68((uint64_t)v49, (*(void **)((char *)&off_1E9449178 + v28))[2]))
              {
                v28 += 8;
                if (v28 == 24)
                {
                  ++v23;
                  goto LABEL_26;
                }
              }
              long long v69 = 0u;
              long long v70 = 0u;
              long long v68 = 0u;
              long long v63 = 0u;
              long long v64 = 0u;
              long long v61 = 0u;
              long long v62 = 0u;
              long long v59 = 0u;
              long long v60 = 0u;
              long long v57 = 0u;
              long long v58 = 0u;
              long long v55 = 0u;
              long long v56 = 0u;
              long long v53 = 0u;
              long long v54 = 0u;
              long long v52 = 0u;
              long long v65 = v48;
              long long v66 = xmmword_1E5963680;
              long long v67 = v49[0];
              uint64_t v29 = sub_19D75B700((uint64_t)v50, (uint64_t)&v52, a8 + 1768, *(void *)(a8 + 2016), (void *)a8);
              if (v29 != 0x20000000000)
              {
                if (!v29)
                {
                  sub_19D759A28(7, "%s: PKI: verify cert was issued by trusted key %d (success)", "_AMFDRDecodeVerifyChain", v23);
                  goto LABEL_53;
                }
                goto LABEL_74;
              }
            }
            if (v24 == 1)
            {
LABEL_40:
              sub_19D759A28(7, "%s: end of trusted key sequence found root_key=%d", "_AMFDRDecodeVerifyChain", v23);
              *(void *)a8 |= 0x100uLL;
              goto LABEL_53;
            }
            uint64_t v29 = 0x400000;
LABEL_74:
            *(void *)a8 |= v29;
            sub_19D759A28(7, "%s: PKI: verify cert was issued by trusted key %d failed with error 0x%016llX");
            return 3;
          }
          uint64_t v16 = sub_19D759AF8(a8 + 1768);
          if (v16)
          {
            uint64_t v17 = v16;
            __int16 v18 = "%s: AMFDRDecodeIterateTrustObjectTrustedBegin failed";
LABEL_55:
            uint64_t v19 = 3;
            sub_19D759A28(3, v18, "_AMFDRDecodeVerifyChain");
            uint64_t v21 = *(void *)a8 | v17;
            goto LABEL_56;
          }
          uint64_t v30 = a4;
          for (int i = 0; ; ++i)
          {
            long long v48 = 0uLL;
            *(void *)&v49[0] = 0;
            int v32 = sub_19D7576E8((unint64_t *)(a8 + 1832), (unint64_t *)&v48);
            if (v32) {
              break;
            }
            uint64_t v33 = *((void *)&v48 + 1);
            unsigned int v34 = v49[0];
            if (*((void *)&v48 + 1)) {
              BOOL v35 = LODWORD(v49[0]) == 0;
            }
            else {
              BOOL v35 = 1;
            }
            if (v35) {
              goto LABEL_51;
            }
            sub_19D759A28(7, "%s: PKI: verify cert was issued by trusted root %d", "_AMFDRDecodeVerifyChain", i);
            uint64_t v36 = sub_19D75ACC4((unint64_t)&v52, v33, v34);
            if (v36)
            {
              uint64_t v28 = v36;
              sub_19D759A28(7, "%s: PKI: decoding trusted root %d failed with error 0x%016llX");
              goto LABEL_72;
            }
            uint64_t v37 = sub_19D75B700((uint64_t)v50, (uint64_t)&v52, a8 + 1768, 0, 0);
            if (v37 != 0x20000000000)
            {
              uint64_t v28 = v37;
              if (!v37)
              {
                sub_19D759A28(7, "%s: PKI: verify cert was issued by trusted root %d (success)", "_AMFDRDecodeVerifyChain", i);
                goto LABEL_52;
              }
              sub_19D759A28(7, "%s: PKI: verify cert was issued by trusted root %d failed with error 0x%016llX");
LABEL_72:
              uint64_t v46 = *(void *)a8 | v28;
              goto LABEL_64;
            }
          }
          if (v32 == 1)
          {
LABEL_51:
            sub_19D759A28(7, "%s: end of trusted root sequence found root_cert=%d", "_AMFDRDecodeVerifyChain", i);
            *(void *)a8 |= 0x100uLL;
LABEL_52:
            a4 = v30;
            goto LABEL_53;
          }
          sub_19D759A28(7, "%s: AMFDRDecodeIterateTrustObjectTrustedNext failed", "_AMFDRDecodeVerifyChain");
          uint64_t v46 = *(void *)a8 | 0x400000;
        }
        else
        {
          sub_19D759A28(4, "%s: Skipping trust root check (trustobject unset)", "_AMFDRDecodeVerifyChain");
          *(void *)a8 |= 0x200100uLL;
LABEL_53:
          uint64_t v38 = v50;
          CFURLRef v50 = &v52;
          sub_19D75B43C((uint64_t)v71, *(void *)(a8 + 2016), &v50, &v72);
          if (v39)
          {
            uint64_t v17 = v39;
            __int16 v18 = "%s: _AMFDRDecodeIterateCertChainNext failed (second call)";
            goto LABEL_55;
          }
          uint64_t v47 = a4;
          int v40 = 1;
          while (1)
          {
            if (!v50)
            {
              *a3 = *((void *)v38 + 26);
              *uint64_t v47 = *((void *)v38 + 27);
              *a5 = *((void *)v38 + 36);
              *a6 = *((void *)v38 + 37);
              long long v45 = v38[15];
              *(_OWORD *)(a8 + 312) = v38[14];
              *(_OWORD *)(a8 + 328) = v45;
              sub_19D759A28(7, "%s: PKI: check payload hash with signature (success)", "_AMFDRDecodeVerifyChain");
              return 0;
            }
            sub_19D759A28(7, "%s: PKI: verify cert %d was issued by cert %d", "_AMFDRDecodeVerifyChain", v40, v40 - 1);
            uint64_t v41 = sub_19D75B700((uint64_t)v50, (uint64_t)v38, a8 + 1768, *(void *)(a8 + 2016), (void *)a8);
            if (v41) {
              break;
            }
            sub_19D759A28(7, "%s: PKI: verify cert %d was issued by %d (success)", "_AMFDRDecodeVerifyChain", v40, v40 - 1);
            ++v40;
            CFTypeID v42 = v50;
            CFURLRef v50 = v38;
            sub_19D75B43C((uint64_t)v71, *(void *)(a8 + 2016), &v50, &v72);
            uint64_t v38 = v42;
            if (v43)
            {
              uint64_t v44 = v43;
              uint64_t v19 = 3;
              sub_19D759A28(3, "%s: _AMFDRDecodeIterateCertChainNext failed (%d)", "_AMFDRDecodeVerifyChain", v40);
              uint64_t v21 = *(void *)a8 | v44;
              goto LABEL_56;
            }
          }
          sub_19D759A28(7, "%s: PKI: verify cert %d was issued by cert %d failed with error 0x%016llX", "_AMFDRDecodeVerifyChain", v40, v40 - 1, v41);
          uint64_t v46 = *(void *)a8 | 0x40000000000;
        }
LABEL_64:
        *(void *)a8 = v46;
        return 3;
      }
      sub_19D759A28(3, "%s: outImg4Blob must be non NULL and outImg4BlobLength must be non 0");
    }
    else
    {
      sub_19D759A28(3, "%s: chain_blob must be non NULL and chain_blob_length must be non 0");
    }
    *(void *)a8 |= 1uLL;
  }
  else
  {
    sub_19D759A28(3, "%s: context must be non NULL", "_AMFDRDecodeVerifyChain");
  }
  return 6;
}

uint64_t sub_19D758468(const void *a1, size_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1 || !a2)
  {
    sub_19D759A28(3, "%s: publicKey must be non NULL and publicKeyLength must be non 0");
    goto LABEL_19;
  }
  if (!a3 || !a4)
  {
    sub_19D759A28(3, "%s: signature must be non NULL and publicKeyLsignatureLengthength must be non 0");
    goto LABEL_19;
  }
  if (!a5 || !a6)
  {
    sub_19D759A28(3, "%s: digest must be non NULL and digestLength must be non 0");
    goto LABEL_19;
  }
  if (!a7 || !*(void *)(a7 + 40))
  {
    sub_19D759A28(3, "%s: implementation must be non NULL and signatureOid must be non NULL");
    goto LABEL_19;
  }
  if (**(void **)(a7 + 32) != a6)
  {
    sub_19D759A28(3, "%s: digestLength is %zu, expecting %zu");
    goto LABEL_19;
  }
  if (!sub_19D757B68(a8 + 312, (uint64_t)&xmmword_1E5963680))
  {
    if (sub_19D757B68(*(void *)(a7 + 40), (uint64_t)&off_1E5963650))
    {
      if (!sub_19D757B68(a8 + 312, (uint64_t)&off_1E5963640)) {
        goto LABEL_46;
      }
      uint64_t result = sub_19D761C1C((uint64_t)a1, a2, (uint64_t)a3, a4, a5, a6);
    }
    else if (sub_19D757B68(*(void *)(a7 + 40), (uint64_t)&off_1E5963660))
    {
      if (!sub_19D757B68(a8 + 312, (uint64_t)&off_1E5963640)) {
        goto LABEL_46;
      }
      uint64_t result = sub_19D761E6C((uint64_t)a1, a2, (uint64_t)a3, a4, a5, a6);
    }
    else
    {
      if (!sub_19D757B68(*(void *)(a7 + 40), (uint64_t)&off_1E5963670))
      {
        uint64_t result = 4;
LABEL_20:
        if (!a8) {
          return result;
        }
        goto LABEL_21;
      }
      if (!sub_19D757B68(a8 + 312, (uint64_t)&off_1E5963640)) {
        goto LABEL_46;
      }
      uint64_t result = sub_19D761F10((uint64_t)a1, a2, (uint64_t)a3, a4, a5, a6);
    }
    if (result == 2)
    {
      *(void *)a8 |= 0x80000000000000uLL;
      uint64_t result = 3;
LABEL_21:
      *(void *)a8 |= 0x1000000000000uLL;
      return result;
    }
    goto LABEL_47;
  }
  if ((uint64_t (**)())a7 != off_1EEF8FBB8 && (uint64_t (**)())a7 != off_1EEF8FB48)
  {
    sub_19D759A28(3, "%s: Expecting kAMFDRDecodeImplementationSha384 or kAMFDRDecodeImplementationOffline");
LABEL_19:
    uint64_t result = 6;
    goto LABEL_20;
  }
  long long v20 = xmmword_1E59636E0;
  if ((*(unsigned char *)(a8 + 2017) & 1) == 0)
  {
    if (!sub_19D761B70(*(char **)(a8 + 664), *(void *)(a8 + 672), a8 + 776))
    {
      unsigned int v17 = 32;
      goto LABEL_44;
    }
LABEL_46:
    uint64_t result = 3;
    goto LABEL_20;
  }
  if (!*(void *)(a8 + 336))
  {
    sub_19D759A28(3, "%s: missing IM4C leaf public key OID");
    goto LABEL_19;
  }
  uint64_t v18 = 0;
  long long v20 = *(_OWORD *)(a8 + 328);
  while (!sub_19D757B68((uint64_t)&v20, (*(void **)((char *)&off_1E9449178 + v18))[2]))
  {
    v18 += 8;
    if (v18 == 24) {
      goto LABEL_36;
    }
  }
  uint64_t v19 = *(uint64_t *)((char *)&off_1E9449178 + v18);
  unsigned int v17 = *(_DWORD *)(v19 + 8);
  if (!v17)
  {
LABEL_36:
    sub_19D759A28(3, "%s: invalid digest length");
    goto LABEL_19;
  }
  if (sub_19D75DA6C(*(char **)(a8 + 664), *(void *)(a8 + 672), a8 + 776, *(unsigned int *)(v19 + 8))) {
    goto LABEL_46;
  }
LABEL_44:
  uint64_t result = sub_19D75D704(a1, a2, v20, *((uint64_t *)&v20 + 1), a3, a4, (unsigned __int8 *)(a8 + 776), v17);
  if (result == 2)
  {
    *(void *)a8 |= 0x80000000000000uLL;
    goto LABEL_46;
  }
LABEL_47:
  if (result) {
    goto LABEL_46;
  }
  return result;
}

uint64_t sub_19D7587E8(uint64_t a1, uint64_t a2)
{
  memset(v30, 170, 32);
  memset(v28, 170, sizeof(v28));
  memset(v27, 170, sizeof(v27));
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v25 = v3;
  long long v26 = v3;
  long long v23 = v3;
  long long v24 = v3;
  memset(v21, 170, sizeof(v21));
  uint64_t v4 = 6;
  v22[0] = v3;
  v22[1] = v3;
  if (!a1 || !a2) {
    goto LABEL_46;
  }
  if (!*(void *)(a1 + 320) || (uint64_t v6 = a1 + 312, !*(void *)(a1 + 312)))
  {
    uint64_t v4 = 0;
    uint64_t v19 = 0x200000000000;
    goto LABEL_36;
  }
  unint64_t v29 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v7 = sub_19D757600(v6, &v29, &v30[2]);
  if (v7)
  {
    uint64_t v4 = v7;
    sub_19D759A28(3, "%s: failed to init certificate sequence", "_AMFDRDecodeEvaluateCertificateProperties");
    goto LABEL_47;
  }
  if (v29 != 0x2000000000000011)
  {
    uint64_t v4 = 2;
    goto LABEL_47;
  }
  int v8 = 0;
  unint64_t v9 = (_OWORD *)(a1 + 72);
  unint64_t v10 = (_OWORD *)(a1 + 56);
LABEL_8:
  while (1)
  {
    int v11 = sub_19D7576E8(&v30[2], v28);
    if (v11) {
      break;
    }
    ++v8;
    unint64_t v12 = v10;
    if (v28[0] == 0xE00000004D414E50) {
      goto LABEL_12;
    }
    if (v28[0] != 0xE00000004F424A50)
    {
LABEL_44:
      sub_19D759A28(3, "%s: unexpected tag 0x%llX in certificate properties");
LABEL_45:
      uint64_t v4 = 2;
LABEL_46:
      if (!a2) {
        return v4;
      }
      goto LABEL_47;
    }
    unint64_t v12 = v9;
    if ((*(unsigned char *)(a2 + 2016) & 0x80) == 0)
    {
LABEL_12:
      v21[0] = *v12;
      uint64_t v13 = sub_19D75F8D0(&v28[1], v28[0], (uint64_t)&v24);
      if (v13)
      {
        uint64_t v4 = v13;
        sub_19D759A28(3, "%s: failed to parse certificate dictionary");
      }
      else
      {
        if (*((void *)&v26 + 1) != 0x2000000000000011) {
          goto LABEL_45;
        }
        uint64_t v14 = sub_19D7576BC((unint64_t *)&v25 + 1, v30);
        if (!v14)
        {
          int v15 = 0;
          while (1)
          {
            int v16 = sub_19D7576E8(v30, v27);
            if (v16)
            {
              if (v16 == 1)
              {
                if (v15) {
                  goto LABEL_8;
                }
                sub_19D759A28(3, "%s: End of Inner Sequence found, before any valid DER.");
              }
              else
              {
                sub_19D759A28(3, "%s: Inner DER did not terminate properly.");
              }
LABEL_42:
              uint64_t v4 = 0xFFFFFFFFLL;
              if (!a2) {
                return v4;
              }
LABEL_47:
              uint64_t v19 = 0x800000000000;
LABEL_36:
              *(void *)a2 |= v19;
              return v4;
            }
            uint64_t v17 = sub_19D75F8D0(&v27[1], v27[0], (uint64_t)v22);
            if (v17)
            {
              uint64_t v4 = v17;
              sub_19D759A28(3, "%s: failed to parse certificate property");
              goto LABEL_57;
            }
            sub_19D75F2B0((unint64_t *)v21, v27[0], &v21[1]);
            uint64_t v4 = v18;
            if (*((void *)&v23 + 1) <= 4uLL && ((1 << SBYTE8(v23)) & 0x16) != 0)
            {
              if (v18)
              {
                sub_19D759A28(3, "%s: failed to find property in the manifest");
                goto LABEL_57;
              }
              if (v27[2] != *((void *)&v21[1] + 1))
              {
                sub_19D759A28(3, "%s: manifest or object property length does not match");
                goto LABEL_42;
              }
              if (memcmp((const void *)v27[1], *(const void **)&v21[1], v27[2]))
              {
                sub_19D759A28(3, "%s: DERMemcmp failed.");
                goto LABEL_42;
              }
            }
            else
            {
              if (*((void *)&v23 + 1) == 0xA000000000000000)
              {
                if (v18 == 1)
                {
                  sub_19D759A28(7, "%s: manifest or object missing required property '%c%c%c%c'", "_AMFDRDecodeEvaluateCertificateProperties", SBYTE3(v27[0]), SBYTE2(v27[0]), SBYTE1(v27[0]), SLOBYTE(v27[0]));
                  uint64_t v4 = 0;
                  *(void *)a2 |= 0x200000000000uLL;
                }
                goto LABEL_28;
              }
              if (*((void *)&v23 + 1) != 0xA000000000000001) {
                goto LABEL_44;
              }
              if (v18 != 1)
              {
                sub_19D759A28(3, "%s: validation failed for property 0x%llX - tag present");
                goto LABEL_45;
              }
            }
            uint64_t v4 = 0;
LABEL_28:
            --v15;
            if (v4)
            {
              sub_19D759A28(3, "%s: validation failed for property 0x%llX");
              goto LABEL_57;
            }
          }
        }
        uint64_t v4 = (uint64_t)v14;
        sub_19D759A28(3, "%s: failed to certificate dictionary");
      }
LABEL_57:
      if (!a2) {
        return v4;
      }
      goto LABEL_47;
    }
  }
  if (v11 != 1)
  {
    sub_19D759A28(3, "%s: Outer DER did not terminate properly.");
    goto LABEL_42;
  }
  if (!v8)
  {
    sub_19D759A28(3, "%s: End of Outer Sequence found, before any valid DER.");
    goto LABEL_42;
  }
  return 0;
}

uint64_t sub_19D758C5C(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  memset(v26, 170, sizeof(v26));
  if (a8)
  {
    *(void *)&long long v11 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v24 = v11;
    long long v25 = v11;
    long long v22 = v11;
    long long v23 = v11;
    *(_OWORD *)__s1 = v11;
    long long v21 = v11;
    v19[11] = v11;
    v19[12] = v11;
    v19[9] = v11;
    v19[10] = v11;
    v19[7] = v11;
    v19[8] = v11;
    v19[5] = v11;
    v19[6] = v11;
    v19[3] = v11;
    v19[4] = v11;
    v19[1] = v11;
    v19[2] = v11;
    v19[0] = v11;
    v27[0] = a1;
    v27[1] = a2;
    if (sub_19D757020((uint64_t)v27, v26))
    {
      unint64_t v12 = "%s: malformed offline signing public key";
    }
    else
    {
      if (v26[0] != 2)
      {
        uint64_t v13 = 3;
        sub_19D759A28(3, "%s: malformed offline signing public key tag", "_AMFDRDecodeVerifyChainOffline");
        uint64_t v14 = *(void *)a8 | 0x40;
        goto LABEL_15;
      }
      if (!sub_19D75ACC4((unint64_t)v19, *(void *)(a8 + 296), *(_DWORD *)(a8 + 304)))
      {
        *(void *)a8 |= 0x100uLL;
        unint64_t v15 = v26[2];
        if ((void *)v26[2] == __s1[1])
        {
          unint64_t v16 = v26[1];
          if (!memcmp(__s1[0], (const void *)v26[1], v26[2]))
          {
            uint64_t v13 = 0;
            *a3 = v16;
            *a4 = v15;
            *(_OWORD *)(a8 + 312) = xmmword_1E5963680;
            return v13;
          }
          uint64_t v17 = "%s: offline signing public key mismatch";
        }
        else
        {
          uint64_t v17 = "%s: offline signing public key length mismatch";
        }
        uint64_t v13 = 3;
        sub_19D759A28(3, v17, "_AMFDRDecodeVerifyChainOffline");
        uint64_t v14 = *(void *)a8 | 0x20000000000000;
        goto LABEL_15;
      }
      unint64_t v12 = "%s: fail to decode certificate of offline signing";
    }
    uint64_t v13 = 3;
    sub_19D759A28(3, v12, "_AMFDRDecodeVerifyChainOffline");
    uint64_t v14 = *(void *)a8 | 0x40000000000;
LABEL_15:
    *(void *)a8 = v14;
    return v13;
  }
  sub_19D759A28(3, "%s: context must be non NULL", "_AMFDRDecodeVerifyChainOffline");
  return 6;
}

uint64_t sub_19D758E48()
{
  return 0;
}

uint64_t sub_19D758E50(int a1, uint64_t *a2, int a3, uint64_t a4)
{
  unsigned int v40 = 0;
  uint64_t v39 = 0;
  if (!a4)
  {
    sub_19D759A28(3, "%s: fdrDecode is NULL", "_AMFDRDecodeVerifyDataCallback");
    return 6;
  }
  if (!a2)
  {
    sub_19D759A28(3, "%s: property is NULL", "_AMFDRDecodeVerifyDataCallback");
    *(void *)a4 |= 1uLL;
    return 6;
  }
  if (a1 <= 1634953571)
  {
    if (a1 > 1400000108)
    {
      if (a1 == 1400000109) {
        return 0;
      }
      if (a1 == 1400010324)
      {
        uint64_t v9 = sub_19D760208(a2, 1400010324, &v39, &v40);
        if (v9)
        {
          uint64_t v6 = v9;
          sub_19D759A28(3, "%s: Img4DecodeGetPropertyData(kFDRTag_SrvT) failed.");
          goto LABEL_36;
        }
        if (v40 != 1)
        {
          sub_19D759A28(3, "%s: Invalid property length of kFDRTag_SrvT", "_AMFDRDecodeVerifyDataCallback");
          uint64_t v6 = 0;
          uint64_t v10 = *(void *)a4 | 0x200;
          goto LABEL_100;
        }
        if (*(unsigned char *)v39 != 48 && (*(unsigned char *)(a4 + 2017) & 4) != 0)
        {
          uint64_t v6 = 3;
          sub_19D759A28(3, "%s: Staged sealing is not allowed", "_AMFDRDecodeVerifyDataCallback");
          uint64_t v10 = *(void *)a4 | 0x800000000000000;
          goto LABEL_100;
        }
        return 0;
      }
      goto LABEL_37;
    }
    if (a1 == 1145525076)
    {
      if ((*(unsigned char *)(a4 + 2017) & 0x10) == 0)
      {
        uint64_t v13 = sub_19D760208(a2, 1145525076, &v39, &v40);
        if (v13)
        {
          uint64_t v6 = v13;
          sub_19D759A28(3, "%s: Img4DecodeGetPropertyData(kImg4Tag_DGST) failed.");
        }
        else
        {
          if (*(unsigned char *)(a4 + 400))
          {
            if (**(void **)(*(void *)(a4 + 2008) + 32) == v40)
            {
              if (!memcmp(v39, (const void *)(a4 + 584), v40)) {
                return 0;
              }
              BOOL v27 = "%s: propertyValue != fdrDecode->sealingManifestImg4.payload.hash";
            }
            else
            {
              BOOL v27 = "%s: propertyLength != implementation->digestInfo->digestOutputSize";
            }
          }
          else
          {
            BOOL v27 = "%s: fdrDecode->sealingManifestImg4.payload_hashed is false";
          }
          uint64_t v6 = 3;
          sub_19D759A28(3, v27, "_AMFDRDecodeVerifyDataCallback");
        }
LABEL_99:
        uint64_t v10 = *(void *)a4 | 0x8000;
        goto LABEL_100;
      }
      uint64_t v17 = "%s: verifying subCC, skip comparing digest of the entire data";
    }
    else
    {
      if (a1 != 1396917319) {
        goto LABEL_37;
      }
      uint64_t v7 = sub_19D760208(a2, 1396917319, &v39, &v40);
      if (v7)
      {
        uint64_t v6 = v7;
        sub_19D759A28(3, "%s: Img4DecodeGetPropertyData(kFDRTag_SCDG) failed.");
        goto LABEL_99;
      }
      uint64_t v23 = v40;
      *(void *)(a4 + 360) = v39;
      *(void *)(a4 + 368) = v23;
      if ((*(unsigned char *)(a4 + 2017) & 0x10) != 0)
      {
        if (*(void *)(a4 + 128))
        {
          uint64_t v28 = *(unsigned int **)(a4 + 120);
          if (v28)
          {
            __s1 = 0;
            size_t __n = 0;
            int v29 = sub_19D757BBC(v28);
            if (sub_19D75C7CC(*(void *)(a4 + 360), *(void *)(a4 + 368), v29, &__s1))
            {
              uint64_t v6 = 0;
              sub_19D759A28(3, "%s: failed to find subCC digest");
            }
            else if (*(unsigned char *)(a4 + 400))
            {
              if (__n == **(void **)(*(void *)(a4 + 2008) + 32))
              {
                if (!memcmp(__s1, (const void *)(a4 + 584), __n))
                {
                  sub_19D759A28(5, "%s: subCC digest verified", "_AMFDRDecodeVerifyDataCallback");
                  uint64_t v6 = 0;
                  *(unsigned char *)(a4 + 376) = 1;
                  return v6;
                }
                uint64_t v6 = 3;
                sub_19D759A28(3, "%s: subCC digest mismatch");
              }
              else
              {
                uint64_t v6 = 3;
                sub_19D759A28(3, "%s: subCC digest length mismatch");
              }
            }
            else
            {
              uint64_t v6 = 3;
              sub_19D759A28(3, "%s: subCC is not hashed");
            }
            uint64_t v10 = *(void *)a4 | 0x1000000000000000;
            goto LABEL_100;
          }
        }
        *(void *)a4 |= 0x1000000000000000uLL;
        uint64_t v17 = "%s: subCCName cannot be NULL when kAMFDRDecodeOptionSubCCOnly is set.";
        goto LABEL_103;
      }
      uint64_t v17 = "%s: not verifying subCC payload, skip checking subCC digest";
    }
    uint64_t v18 = 5;
    goto LABEL_51;
  }
  if (a1 <= 1717660002)
  {
    if (a1 == 1634953572)
    {
      uint64_t v14 = sub_19D760208(a2, 1634953572, &v39, &v40);
      if (v14)
      {
        uint64_t v6 = v14;
        sub_19D759A28(3, "%s: Img4DecodeGetPropertyData(kFDRTag_asid) failed.");
        goto LABEL_36;
      }
      size_t v24 = *(void *)(a4 + 224);
      if (v24)
      {
        if (v24 == v40)
        {
          long long v25 = *(const void **)(a4 + 216);
          if (v25 && !memcmp(v25, v39, v24)) {
            return 0;
          }
          long long v26 = "%s: kFDRTag_asid property != fdrDecode->assemblyID";
        }
        else
        {
          long long v26 = "%s: kFDRTag_asid property length != fdrDecode->assemblyID.length";
        }
        uint64_t v6 = 3;
        sub_19D759A28(3, v26, "_AMFDRDecodeVerifyDataCallback");
        uint64_t v10 = *(void *)a4 | 0x200000000000000;
        goto LABEL_100;
      }
      uint64_t v17 = "%s: Skip verifying assembly identifier";
      goto LABEL_42;
    }
    if (a1 == 1668047219)
    {
      if (sub_19D760208(a2, 1668047219, &v39, &v40))
      {
        int v8 = "%s: Img4DecodeGetPropertyData(kFDRTag_clas) failed.";
      }
      else
      {
        if (v39 && v40) {
          return 0;
        }
        uint64_t v33 = v40;
        int v8 = "%s: propertyValue must be non NULL with a non-zero length (length=%u)";
      }
      uint64_t v6 = 3;
      sub_19D759A28(3, v8, "_AMFDRDecodeVerifyDataCallback", v33);
      uint64_t v10 = *(void *)a4 | 0x400;
      goto LABEL_100;
    }
LABEL_37:
    uint64_t v15 = 1;
    while (v15 != 48)
    {
      int v16 = *(_DWORD *)&aMnrsBlmcamwcam[4 * v15++];
      if (v16 == a1)
      {
        if ((unint64_t)(v15 - 2) < 0x2F) {
          return 0;
        }
        break;
      }
    }
    uint64_t v35 = ((__int16)a1 >> 8);
    uint64_t v36 = (char)a1;
    uint64_t v33 = (a1 >> 24);
    uint64_t v34 = (a1 << 8 >> 24);
    uint64_t v17 = "%s: Unsupported tag found in manifest '%c%c%c%c'";
LABEL_42:
    uint64_t v18 = 7;
LABEL_51:
    sub_19D759A28(v18, v17, "_AMFDRDecodeVerifyDataCallback", v33, v34, v35, v36);
    return 0;
  }
  if (a1 == 1717660003)
  {
    LOBYTE(__s1) = 0;
    if (!sub_19D760184((uint64_t)a2, 1717660003, (BOOL *)&__s1))
    {
      uint64_t v6 = 0;
      *(unsigned char *)(a4 + 2004) = (_BYTE)__s1;
      return v6;
    }
    uint64_t v6 = 3;
    sub_19D759A28(3, "%s: Img4DecodeGetPropertyData(kFDRTag_faic) failed.", "_AMFDRDecodeVerifyDataCallback");
    uint64_t v10 = *(void *)a4 | 0x400000000;
LABEL_100:
    *(void *)a4 = v10;
    return v6;
  }
  if (a1 != 1768846196)
  {
    if (a1 == 1886546276)
    {
      uint64_t v5 = sub_19D760208(a2, 1886546276, &v39, &v40);
      if (v5)
      {
        uint64_t v6 = v5;
        sub_19D759A28(3, "%s: Img4DecodeGetPropertyData(kFDRTag_prid) failed.");
LABEL_36:
        uint64_t v10 = *(void *)a4 | 0x2000;
        goto LABEL_100;
      }
      uint64_t v19 = v39;
      uint64_t v20 = v40;
      *(void *)(a4 + 200) = v39;
      *(void *)(a4 + 208) = v20;
      if (!*(void *)(a4 + 1944) || !*(void *)(a4 + 1952))
      {
        sub_19D759A28(4, "%s: Skipping revocation check (trustobject unset)", "_AMFDRDecodeVerifyDataCallback");
        uint64_t v6 = 0;
        uint64_t v10 = *(void *)a4 | 0x200000;
        goto LABEL_100;
      }
      uint64_t v21 = sub_19D759FAC(a4 + 1768, (uint64_t)v19, v20);
      if (v21)
      {
        uint64_t v22 = v21;
        uint64_t v6 = 3;
        sub_19D759A28(3, "%s: AMFDRDecodeCheckProducerIDRevocation failed with error 0x%016llX", "_AMFDRDecodeVerifyDataCallback", v21);
        uint64_t v10 = *(void *)a4 | v22;
        goto LABEL_100;
      }
      return 0;
    }
    goto LABEL_37;
  }
  uint64_t v12 = sub_19D760208(a2, 1768846196, &v39, &v40);
  if (v12)
  {
    uint64_t v6 = v12;
    sub_19D759A28(3, "%s: Img4DecodeGetPropertyData(kFDRTag_inst) failed.", "_AMFDRDecodeVerifyDataCallback");
LABEL_30:
    uint64_t v10 = *(void *)a4 | 0x4000;
    goto LABEL_100;
  }
  if (a3 == 1)
  {
    uint64_t v30 = *(void **)(a4 + 104);
    if (v30)
    {
      size_t v31 = *(void *)(a4 + 112);
      if (v31)
      {
        if (sub_19D75C5F8(v39, v40, v30, v31, *(const void **)(a4 + 184), *(void *)(a4 + 192), 1, (void *)a4)) {
          return 0;
        }
        sub_19D759A28(3, "%s: kFDRTag_inst property != fdrDecode->uniqueID");
        goto LABEL_91;
      }
    }
    if ((*(unsigned char *)(a4 + 2017) & 0x20) == 0)
    {
      sub_19D759A28(3, "%s: no uniqueID is specified, cannot verify kFDRTag_inst property");
LABEL_91:
      uint64_t v6 = 0;
      goto LABEL_30;
    }
    uint64_t v17 = "%s: no uniqueID is specified, but this is allowed, skip comparing kFDRTag_inst object property";
LABEL_103:
    uint64_t v18 = 3;
    goto LABEL_51;
  }
  if (a3) {
    return 0;
  }
  uint64_t v6 = 0;
  if ((sub_19D75C5F8(v39, v40, *(void **)(a4 + 136), *(void *)(a4 + 144), *(const void **)(a4 + 168), *(void *)(a4 + 176), 0, (void *)a4) & 1) == 0)
  {
    sub_19D759A28(3, "%s: kFDRTag_inst property != fdrDecode->manifestUniqueID", "_AMFDRDecodeVerifyDataCallback");
    uint64_t v6 = 0;
    uint64_t v10 = *(void *)a4 | 0x40000000;
    goto LABEL_100;
  }
  return v6;
}

uint64_t sub_19D75969C(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return *(void *)(a2 + 2024);
  }
  sub_19D759A28(3, "%s: fdrDecode is NULL", "_AMFDRDecodeGetExpectedManifestHash");
  return 0;
}

uint64_t sub_19D7596E4(unint64_t *a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v21 = (unint64_t *)a5;
  unint64_t v22 = 0xAAAAAAAAAAAA0000;
  unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v20 = 0xAAAAAAAAAAAAAAAALL;
  if (!a5)
  {
    sub_19D759A28(3, "%s: fdrDecode is NULL");
    return 6;
  }
  if (*(void *)(a5 + 104) && *(void *)(a5 + 112))
  {
    int v8 = 0;
    goto LABEL_7;
  }
  if ((*(unsigned char *)(a5 + 2017) & 0x20) == 0)
  {
    sub_19D759A28(3, "%s: data instance cannot be missing without kAMFDRDecodeOptionAllowNoDataInstance specified");
    return 6;
  }
  int v8 = 1;
LABEL_7:
  uint64_t v9 = sub_19D7576BC(a1, &v19);
  if (v9)
  {
    uint64_t v11 = (uint64_t)v9;
    uint64_t v17 = "%s: can't parse top-level container";
    goto LABEL_34;
  }
  while (1)
  {
    if ((_BYTE)v22) {
      goto LABEL_25;
    }
    sub_19D75FAD4(&v19, a2, a3, a4);
    if (v10 == 1)
    {
      if (BYTE1(v22)) {
        sub_19D759A28(3, "%s: failed to find matching inst object propery, returning a mismatched one", "_AMFDRDecodePropertiesFilterCallback");
      }
      if ((_BYTE)v22)
      {
        if (!v8) {
          return 0;
        }
      }
      else
      {
        *v21 |= 0x4000uLL;
LABEL_25:
        if ((v8 & 1) == 0) {
          return 0;
        }
      }
      sub_19D759A28(3, "%s: uniqueID is not specified, which is allowed, skip uniqueID mismatch errors", "_AMFDRDecodePropertiesFilterCallback");
      uint64_t v11 = 0;
      uint64_t v14 = v21;
      unint64_t v15 = *v21 & 0xFFFFFFFFFFFFBFFFLL;
      goto LABEL_27;
    }
    uint64_t v11 = v10;
    if (v10) {
      break;
    }
    if (BYTE1(v22)) {
      char v12 = v8;
    }
    else {
      char v12 = 0;
    }
    if (v12)
    {
      sub_19D759A28(3, "%s: multiple entries for tag 0x%llu found, but no unique ID specified", "_AMFDRDecodePropertiesFilterCallback", a2);
      if ((_BYTE)v22) {
        return 0;
      }
      uint64_t v11 = 0;
      uint64_t v14 = v21;
      unint64_t v15 = *v21 | 0x4000;
LABEL_27:
      unint64_t *v14 = v15;
      return v11;
    }
    uint64_t v13 = sub_19D760510((unint64_t *)(a4 + 24), 1, (uint64_t (*)(unint64_t, uint64_t *, uint64_t, uint64_t))sub_19D75C460, (uint64_t)&v21);
    if (v13)
    {
      uint64_t v11 = v13;
      sub_19D759A28(5, "%s: failed to find corresponding data instance");
      return v11;
    }
  }
  uint64_t v18 = a2;
  uint64_t v17 = "%s: failed to find property tag 0x%llu";
LABEL_34:
  sub_19D759A28(3, v17, "_AMFDRDecodePropertiesFilterCallback", v18, v19, v20);
  return v11;
}

uint64_t sub_19D759920(unint64_t a1, uint64_t a2, unsigned int a3)
{
  v5[0] = a2;
  v5[1] = a3;
  if (sub_19D7577A8((uint64_t)v5, 5u, (uint64_t)&unk_19D779CD8, a1, 0x90uLL, 0))
  {
    sub_19D759A28(3, "%s: malformed FDR Trust Object Format");
  }
  else if (*(void *)a1 && *(void *)(a1 + 8) == 4)
  {
    if (**(_DWORD **)a1 == *(_DWORD *)"secb") {
      return 0;
    }
    sub_19D759A28(3, "%s: malformed FDR Trust Object, expected tag %c%c%c%c found tag %c%c%c%c", "AMFDRDecodeTrustObject", aSecb[0], aSecb[1]);
  }
  else
  {
    sub_19D759A28(3, "%s: malformed FDR Trust Object, invalid tag length");
  }
  return 0x400000;
}

uint64_t sub_19D759A28(uint64_t a1, char *__format, ...)
{
  va_start(va, __format);
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v19 = v3;
  long long v20 = v3;
  long long v17 = v3;
  long long v18 = v3;
  long long v15 = v3;
  long long v16 = v3;
  long long v13 = v3;
  long long v14 = v3;
  long long v11 = v3;
  long long v12 = v3;
  long long v9 = v3;
  long long v10 = v3;
  long long v7 = v3;
  long long v8 = v3;
  *(_OWORD *)__str = v3;
  long long v6 = v3;
  vsnprintf(__str, 0x100uLL, __format, va);
  if (off_1E9449430) {
    return off_1E9449430(a1, __str);
  }
  else {
    return sub_19D7624E4("%s", __str);
  }
}

uint64_t sub_19D759AF8(uint64_t a1)
{
  if (!a1) {
    return 1;
  }
  unint64_t v3 = 0;
  uint64_t v4 = 0;
  uint64_t v1 = (unint64_t *)(a1 + 64);
  uint64_t v5 = 0;
  if (sub_19D7576BC((unint64_t *)(a1 + 16), (unint64_t *)(a1 + 64)))
  {
    sub_19D759A28(3, "%s: can't parse FDR Trust Object trusted sequence");
  }
  else if (sub_19D7576E8(v1, &v3))
  {
    sub_19D759A28(3, "%s: can't parse FDR Trust Object trusted");
  }
  else if (v4 && v5 == 4)
  {
    if (*v4 == *(_DWORD *)"trst") {
      return 0;
    }
    sub_19D759A28(3, "%s: malformed FDR Trust Object trusted, expected tag %c%c%c%c found tag %c%c%c%c", "AMFDRDecodeIterateTrustObjectTrustedBegin", aTrst[0], aTrst[1]);
  }
  else
  {
    sub_19D759A28(3, "%s: malformed FDR Trust Object trusted, invalid trusted tag length");
  }
  return 0x400000;
}

uint64_t sub_19D759C28(uint64_t a1)
{
  if (!a1) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v1 = (unint64_t *)(a1 + 128);
  uint64_t v6 = 0;
  if (sub_19D7576BC((unint64_t *)(a1 + 112), (unint64_t *)(a1 + 128)))
  {
    sub_19D759A28(3, "%s: can't parse FDR Trust Object trusted key sequence");
  }
  else
  {
    int v3 = sub_19D7576E8(v1, &v4);
    if (v3)
    {
      if (v3 == 1) {
        return 0x40000000000000;
      }
      sub_19D759A28(3, "%s: can't parse FDR Trust Object trusted key: %d");
    }
    else if (v5 && v6 == 4)
    {
      if (*v5 == *(_DWORD *)"trpk") {
        return 0;
      }
      sub_19D759A28(3, "%s: malformed FDR Trust Object trusted key, expected tag %c%c%c%c found tag %c%c%c%c", "AMFDRDecodeIterateTrustObjectTrustedKeyBegin", aTrpk[0], aTrpk[1]);
    }
    else
    {
      sub_19D759A28(3, "%s: malformed FDR Trust Object trusted key, invalid trusted key tag length");
    }
  }
  return 0x400000;
}

uint64_t sub_19D759D68(uint64_t a1)
{
  if (!a1) {
    return 1;
  }
  unint64_t v3 = 0;
  unint64_t v4 = 0;
  uint64_t v1 = (unint64_t *)(a1 + 80);
  uint64_t v5 = 0;
  if (sub_19D7576BC((unint64_t *)(a1 + 48), (unint64_t *)(a1 + 80)))
  {
    sub_19D759A28(3, "%s: can't parse FDR Trust Object Revoked sequence");
  }
  else if (sub_19D7576E8(v1, &v3))
  {
    sub_19D759A28(3, "%s: can't parse FDR Trust Object Revoked");
  }
  else if (v4 && v5 == 4)
  {
    if (*v4 == *(_DWORD *)"rvok") {
      return 0;
    }
    sub_19D759A28(3, "%s: malformed FDR Trust Object Revoked, expected tag %c%c%c%c found tag %c%c%c%c", "AMFDRDecodeIterateTrustObjectRevokedBegin", aRvok[0], aRvok[1]);
  }
  else
  {
    sub_19D759A28(3, "%s: malformed FDR Trust Object Revoked, invalid trusted tag length");
  }
  return 0x400000;
}

uint64_t sub_19D759E98(uint64_t a1, void *a2, _DWORD *a3)
{
  uint64_t result = 1;
  if (a1 && a2 && a3)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    int v7 = sub_19D7576E8((unint64_t *)(a1 + 80), &v10);
    if (v7)
    {
      if (v7 == 1)
      {
        int v8 = 0;
        uint64_t v9 = 0;
        goto LABEL_9;
      }
    }
    else
    {
      int v8 = v12;
      if (v12 == 32)
      {
        uint64_t v9 = v11;
LABEL_9:
        uint64_t result = 0;
        *a2 = v9;
        *a3 = v8;
        return result;
      }
    }
    return 0x400000;
  }
  return result;
}

uint64_t sub_19D759F2C(void *a1, uint64_t a2, unsigned int a3)
{
  uint64_t result = 1;
  if (a1 && a2 && a3)
  {
    unint64_t v5 = 0xAAAAAAAAAAAAAAAALL;
    v6[0] = a2;
    v6[1] = a3;
    if (sub_19D757600((uint64_t)v6, &v5, a1))
    {
      sub_19D759A28(3, "%s: can't parse FDR Producer ID sequence", "AMFDRDecodeIterateProducerIDBegin");
      return 0x80000000000;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_19D759FAC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  __n_4[0] = 0xAAAAAAAAAAAAAAAALL;
  __n_4[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v3 = 1;
  if (!a1 || !a2 || !a3) {
    return v3;
  }
  sub_19D759A28(7, "%s: AMFDRDecodeCheckProducerIDRevocation", "AMFDRDecodeCheckProducerIDRevocation");
  uint64_t v7 = sub_19D759F2C(__n_4, a2, a3);
  if (v7)
  {
    uint64_t v3 = v7;
    sub_19D759A28(3, "%s: AMFDRDecodeIterateProducerIDBegin failed with error 0x%016llX");
    return v3;
  }
  unint64_t v17 = 0;
  long long v18 = 0;
  uint64_t v19 = 0;
  int v8 = sub_19D7576E8(__n_4, &v17);
  if (v8)
  {
    if (v8 != 1)
    {
      uint64_t v3 = 0x80000000000;
      sub_19D759A28(3, "%s: AMFDRDecodeIterateProducerIDNext(first) failed with error 0x%016llX");
      return v3;
    }
    return 0;
  }
  uint64_t v9 = v18;
  if (!v18) {
    return 0;
  }
  while (2)
  {
    unsigned int __n = 0;
    __s2 = 0;
    uint64_t v10 = sub_19D759D68(a1);
    if (v10)
    {
      uint64_t v3 = v10;
      sub_19D759A28(3, "%s: AMFDRDecodeIterateTrustObjectRevokedBegin failed");
      return v3;
    }
    while (1)
    {
      uint64_t v11 = sub_19D759E98(a1, &__s2, &__n);
      if (v11)
      {
        uint64_t v3 = v11;
        sub_19D759A28(3, "%s: AMFDRDecodeIterateTrustObjectRevokedNext failed");
        return v3;
      }
      if (!__s2) {
        break;
      }
      if (!memcmp(v9, __s2, __n))
      {
        sub_19D759A28(3, "%s: FDR Trust Object revoked certificate found", "AMFDRDecodeCheckProducerIDRevocation");
        return 0x10000000000;
      }
    }
    unint64_t v17 = 0;
    long long v18 = 0;
    uint64_t v19 = 0;
    int v12 = sub_19D7576E8(__n_4, &v17);
    if (v12)
    {
      if (v12 != 1)
      {
        uint64_t v3 = 0x80000000000;
        sub_19D759A28(3, "%s: AMFDRDecodeIterateProducerIDNext(loop) failed with error 0x%016llX");
        return v3;
      }
      return 0;
    }
    uint64_t v3 = 0;
    uint64_t v9 = v18;
    if (v18) {
      continue;
    }
    break;
  }
  return v3;
}

uint64_t sub_19D75A160(uint64_t a1)
{
  if (!*(void *)(a1 + 72) || !*(void *)(a1 + 80)) {
    *(void *)a1 |= 0x40000uLL;
  }
  if ((!*(void *)(a1 + 104) || !*(void *)(a1 + 112)) && (*(unsigned char *)(a1 + 2017) & 0x20) == 0)
  {
    sub_19D759A28(3, "%s: fdrDecode->uniqueID is NULL or 0 size", "AMFDRDecodeEvaluateTrustInternal");
    uint64_t result = *(void *)a1 | 1;
LABEL_12:
    *(void *)a1 = result;
    return result;
  }
  if (*(void *)(a1 + 8) && *(void *)(a1 + 16))
  {
    if (sub_19D75A6AC(a1))
    {
      sub_19D759A28(4, "%s: data is unwrapped", "AMFDRDecodeEvaluateTrustInternal");
      uint64_t v3 = *(void *)a1;
      *(void *)(a1 + 1912) = *(void *)(a1 + 8);
      *(void *)(a1 + 1920) = *(void *)(a1 + 16);
      uint64_t result = v3 | 0x5A01C00;
      goto LABEL_12;
    }
  }
  else if (!*(void *)(a1 + 1944) || !*(void *)(a1 + 1952))
  {
    *(void *)a1 |= 0x200000uLL;
  }
  uint64_t v4 = sub_19D75C2B4(a1);
  if (v4) {
    *(void *)a1 |= v4;
  }
  uint64_t v5 = sub_19D75C940(a1);
  if (v5) {
    *(void *)a1 |= v5;
  }
  long long v25 = 0;
  int v24 = 0;
  if ((!*(void *)(a1 + 344) || !*(_DWORD *)(a1 + 352)) && (!*(void *)(a1 + 232) || !*(void *)(a1 + 240)))
  {
    sub_19D759A28(6, "%s: No need to verify subCC and asid");
    goto LABEL_56;
  }
  uint64_t v6 = sub_19D75BDCC(*(void *)(a1 + 1912), *(_DWORD *)(a1 + 1920), &v25, &v24);
  uint64_t v7 = v25;
  if (!v25 || v6)
  {
    sub_19D759A28(3, "%s: FDR 3.0 Data can't be decoded!");
    goto LABEL_51;
  }
  char v8 = 0;
  while (1)
  {
    unsigned int v23 = 0;
    char __n_7 = 0;
    unsigned int __n = 0;
    __s2 = 0;
    uint64_t v9 = sub_19D75C084((uint64_t)v7, &v23, &__n_7, &__s2, &__n, 0);
    if (v9)
    {
      if (v9 == 0x40000000000000)
      {
        if (*(void *)(a1 + 232) && !((*(void *)(a1 + 240) == 0) | v8 & 1)) {
          sub_19D759A28(4, "%s: kFDRTag_asid doesn't exist, but this is allowed");
        }
        goto LABEL_56;
      }
      sub_19D759A28(3, "%s: failed to decode payload: 0x%llx!");
LABEL_51:
      uint64_t v17 = *(void *)a1 | 0x400000000000000;
      goto LABEL_55;
    }
    int v10 = sub_19D757BBC(&v23);
    if (v10 == 1634953572)
    {
      uint64_t v11 = *(const void **)(a1 + 232);
      if (v11)
      {
        size_t v12 = *(void *)(a1 + 240);
        if (v12)
        {
          if (v12 != __n)
          {
            sub_19D759A28(3, "%s: asid subCC length != fdrDecode->asidSubCCID.length", "_AMFDRDecodeVerifySubCC");
            *(void *)a1 |= 0x200000000000000uLL;
            uint64_t v11 = *(const void **)(a1 + 232);
            size_t v12 = __n;
          }
          if (memcmp(v11, __s2, v12))
          {
            sub_19D759A28(3, "%s: asid subCC data != fdrDecode->asidSubCCID", "_AMFDRDecodeVerifySubCC");
            *(void *)a1 |= 0x200000000000000uLL;
          }
          char v8 = 1;
        }
      }
    }
    if (*(void *)(a1 + 344))
    {
      unint64_t v13 = *(unsigned int *)(a1 + 352);
      if (v13) {
        break;
      }
    }
LABEL_47:
    uint64_t v7 = v25;
  }
  uint64_t v14 = 0;
  while (*(_DWORD *)(*(void *)(a1 + 344) + 4 * v14) != v10)
  {
LABEL_46:
    if (++v14 >= v13) {
      goto LABEL_47;
    }
  }
  uint64_t v15 = *(void *)(a1 + 360);
  if (!v15 || (uint64_t v16 = *(void *)(a1 + 368)) == 0)
  {
    sub_19D759A28(3, "%s: No SCDG in manifest, subCC digest missing");
    goto LABEL_54;
  }
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  if (!sub_19D75C7CC(v15, v16, v10, &v18) && v19 && v18)
  {
    unint64_t v13 = *(unsigned int *)(a1 + 352);
    goto LABEL_46;
  }
  sub_19D759A28(3, "%s: cannot find subCC digest for %u");
LABEL_54:
  uint64_t v17 = *(void *)a1 | 0x1000000000000000;
LABEL_55:
  *(void *)a1 = v17;
LABEL_56:
  if (v25) {
    free(v25);
  }
  return *(void *)a1;
}

unint64_t sub_19D75A504(__int16 a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if ((a1 & 2) != 0 && (a2 & 0x2600000000100) != 0)
  {
    sub_19D759A28(4, "%s: ignoring unsealed error 0x%016llX", "_AMFDRDecodeTolerateErrorsForOptions", a2 & 0x2600000000100);
    v2 &= 0xFFFD9FFFFFFFFEFFLL;
  }
  if ((a1 & 4) != 0 && (v2 & 0x140000) != 0)
  {
    sub_19D759A28(4, "%s: ignoring trust object mismatch error 0x%016llX", "_AMFDRDecodeTolerateErrorsForOptions", v2 & 0x140000);
    v2 &= 0xFFFFFFFFFFEBFFFFLL;
  }
  if ((a1 & 8) != 0)
  {
    uint64_t v4 = 0x8005A33C80;
    if ((a1 & 1) == 0) {
      uint64_t v4 = 0x8005A03C00;
    }
    uint64_t v5 = v2 & v4;
    if ((v2 & v4) != 0)
    {
      sub_19D759A28(4, "%s: ignoring raw error 0x%016llX", "_AMFDRDecodeTolerateErrorsForOptions", v5);
      v2 ^= v5;
    }
  }
  if ((a1 & 0x10) != 0 && (v2 & 0x1040000300000) != 0)
  {
    sub_19D759A28(4, "%s: ignoring offline signing verification error 0x%016llX", "_AMFDRDecodeTolerateErrorsForOptions", v2 & 0x1040000300000);
    v2 &= 0xFFFEFBFFFFCFFFFFLL;
  }
  if ((a1 & 0x40) != 0 && (v2 & 0x2C0100) != 0)
  {
    sub_19D759A28(4, "%s: ignoring no trustobject error 0x%016llX", "_AMFDRDecodeTolerateErrorsForOptions", v2 & 0x2C0100);
    v2 &= 0xFFFFFFFFFFD3FEFFLL;
  }
  if ((a1 & 0x4000) != 0 && (v2 & 0x1000000000000000) != 0)
  {
    sub_19D759A28(4, "%s: ignoring incomplete subcc error 0x%016llX", "_AMFDRDecodeTolerateErrorsForOptions", v2 & 0x1000000000000000);
    return v2 & 0xEFFFFFFFFFFFFFFFLL;
  }
  return v2;
}

uint64_t sub_19D75A6AC(uint64_t a1)
{
  memset(v17, 170, sizeof(v17));
  long long v15 = 0u;
  *(_OWORD *)uint64_t v16 = 0u;
  long long v14 = 0u;
  if (sub_19D757020(a1 + 8, v17))
  {
    sub_19D759A28(3, "%s: failed to decode FDR Combined Format", "_AMFDRDecodeCombined");
    *(void *)a1 |= 0x80uLL;
    return 128;
  }
  if (v17[0] != 0x2000000000000010)
  {
    sub_19D759A28(3, "%s: FDR Combined Format unexpected tag: %llu", "_AMFDRDecodeCombined", v17[0]);
    *(void *)a1 |= 0x10000uLL;
    return 0x10000;
  }
  uint64_t v3 = *(void *)(a1 + 16);
  unint64_t v4 = *(void *)(a1 + 8) + v3;
  if (v4 < v17[1] + v17[2])
  {
    sub_19D759A28(3, "%s: item is bigger on the inside", "_AMFDRDecodeCombined");
    *(void *)a1 |= 4uLL;
    return 4;
  }
  if (v4 > v17[1] + v17[2])
  {
    sub_19D759A28(3, "%s: Buffer contains %lu unused bytes", "_AMFDRDecodeCombined", v3 - v17[2]);
    *(void *)a1 |= 8uLL;
    return 8;
  }
  if (sub_19D757874(&v17[1], 3u, (uint64_t)"", (unint64_t)&v14, 0x30uLL, 0)) {
    goto LABEL_30;
  }
  if (!(void)v14 || *((void *)&v14 + 1) != 4) {
    goto LABEL_29;
  }
  if (*(_DWORD *)v14 != *(_DWORD *)"comb")
  {
LABEL_30:
    *(void *)a1 |= 0x20000uLL;
    return 0x20000;
  }
  if (!(void)v15 || !*((void *)&v15 + 1))
  {
    *(void *)a1 |= 0x200uLL;
    uint64_t v2 = 512;
    goto LABEL_20;
  }
  long long v12 = 0u;
  long long v13 = 0u;
  if (sub_19D757874((unint64_t *)&v15, 2u, (uint64_t)&unk_19D779CA8, (unint64_t)&v12, 0x20uLL, 0))
  {
    sub_19D759A28(3, "%s: malformed FDR Combined Format (DERFDRItemSpecs)");
    goto LABEL_30;
  }
  if (!(void)v12 || *((void *)&v12 + 1) != 4)
  {
LABEL_29:
    sub_19D759A28(3, "%s: malformed FDR Combined Format, invalid tag length");
    goto LABEL_30;
  }
  if (*(_DWORD *)v12 != *(_DWORD *)"fdrd")
  {
    sub_19D759A28(3, "%s: malformed FDR Combined Format, expected tag %c%c%c%c found tag %c%c%c%c", "_AMFDRDecodeCombined", aFdrd[0], aFdrd[1]);
    goto LABEL_30;
  }
  uint64_t v9 = *((void *)&v13 + 1);
  *(void *)(a1 + 24) = v13;
  *(void *)(a1 + 32) = v9;
  if ((*(unsigned char *)(a1 + 2017) & 8) != 0)
  {
    uint64_t v2 = sub_19D75D124(a1);
    if (v2)
    {
      sub_19D759A28(4, "%s: cannot decode to a multicombined data, proceed with combined format", "_AMFDRDecodeCombined");
      uint64_t v11 = *((void *)&v13 + 1);
      *(void *)(a1 + 24) = v13;
      *(void *)(a1 + 32) = v11;
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
LABEL_20:
  if (!v16[0] || !v16[1])
  {
    uint64_t v7 = *(void *)a1 | 0x200000;
LABEL_38:
    *(void *)a1 = v7;
    return v2;
  }
  long long v12 = 0u;
  long long v13 = 0u;
  if (sub_19D757874(v16, 2u, (uint64_t)&unk_19D779CA8, (unint64_t)&v12, 0x20uLL, 0))
  {
    sub_19D759A28(3, "%s: malformed FDR Combined Format (trustObject)");
LABEL_36:
    uint64_t v8 = 0x20000;
    uint64_t v2 = 0x20000;
LABEL_37:
    uint64_t v7 = *(void *)a1 | v8;
    goto LABEL_38;
  }
  if (!(void)v12 || *((void *)&v12 + 1) != 4)
  {
    sub_19D759A28(3, "%s: malformed FDR Combined Format (trustObject), invalid tag length");
    goto LABEL_36;
  }
  if (*(_DWORD *)v12 != *(_DWORD *)"secb")
  {
    sub_19D759A28(3, "%s: malformed FDR Combined Format (trustObject), expected tag %c%c%c%c found tag %c%c%c%c", "_AMFDRDecodeCombined", aSecb[0], aSecb[1]);
    goto LABEL_36;
  }
  long long v10 = v13;
  *(_OWORD *)(a1 + 1944) = v13;
  uint64_t v8 = 0x200000;
  if (!(void)v10 || !*((void *)&v10 + 1)) {
    goto LABEL_37;
  }
  return v2;
}

uint64_t sub_19D75AACC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t result = 1;
  if (a1 && a2 && a3)
  {
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    long long v6 = 0uLL;
    unint64_t v5 = 0;
    *(void *)(a1 + 32) = a2;
    *(void *)(a1 + 40) = a3;
    if (sub_19D75ABD4(a1 + 32, (unint64_t *)a1, a1 + 48))
    {
      sub_19D759A28(3, "%s: failed to decode public key: %d");
    }
    else
    {
      if (!sub_19D757B68(a1 + 48, (uint64_t)&xmmword_1E5963680))
      {
        sub_19D759A28(3, "%s: public key OID is not EC", "AMFDRDecodePublicKey");
        return 64;
      }
      if (!sub_19D757020(a1 + 64, &v5))
      {
        uint64_t result = 0;
        *(_OWORD *)(a1 + 16) = v6;
        return result;
      }
      sub_19D759A28(3, "%s: failed to decode params");
    }
    return 16;
  }
  return result;
}

uint64_t sub_19D75ABD4(uint64_t a1, unint64_t *a2, unint64_t a3)
{
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v8 = v5;
  long long v9 = v5;
  char v7 = -86;
  uint64_t result = sub_19D7577A8(a1, 2u, (uint64_t)&unk_19D779A90, (unint64_t)&v8, 0x20uLL, 0x20uLL);
  if (!result)
  {
    uint64_t result = sub_19D757874((unint64_t *)&v8, 2u, (uint64_t)&unk_19D779A58, a3, 0x20uLL, 0x20uLL);
    if (!result)
    {
      if (sub_19D757B68(a3, (uint64_t)&off_1E5963640) || sub_19D757B68(a3, (uint64_t)&xmmword_1E5963680))
      {
        uint64_t result = sub_19D7573D8((uint64_t)&v9, a2, &v7);
        if (!result)
        {
          if (v7) {
            return 3;
          }
          else {
            return 0;
          }
        }
      }
      else
      {
        return 2;
      }
    }
  }
  return result;
}

uint64_t sub_19D75ACC4(unint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t result = 1;
  if (a1 && a2 && a3)
  {
    *(_OWORD *)(a1 + 272) = 0u;
    *(_OWORD *)(a1 + 288) = 0u;
    *(_OWORD *)(a1 + 240) = 0u;
    *(_OWORD *)(a1 + 256) = 0u;
    *(_OWORD *)(a1 + 208) = 0u;
    *(_OWORD *)(a1 + 224) = 0u;
    *(_OWORD *)(a1 + 176) = 0u;
    *(_OWORD *)(a1 + 192) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    *(void *)(a1 + 256) = a2;
    *(void *)(a1 + 264) = a3;
    if (sub_19D7577A8(a1 + 256, 3u, (uint64_t)&unk_19D779888, a1, 0x30uLL, 0x30uLL)
      || sub_19D7577A8(a1, 0xAu, (uint64_t)&unk_19D779F60, a1 + 48, 0xA0uLL, 0xA0uLL)
      || sub_19D75ABD4(a1 + 144, (unint64_t *)(a1 + 208), a1 + 224))
    {
      return 0x40000000000;
    }
    if (*(void *)(a1 + 248))
    {
      if (sub_19D757B68(a1 + 224, (uint64_t)&xmmword_1E5963680))
      {
        if (*(void *)(a1 + 248) != 10) {
          return 0x40000000000;
        }
        long long v5 = *(unsigned char **)(a1 + 240);
        if (*v5 != 6 || v5[1] != 8 || memcmp(v5 + 2, &unk_19D779B52, 8uLL)) {
          return 0x40000000000;
        }
      }
      else if (sub_19D757B68(a1 + 224, (uint64_t)&off_1E5963640))
      {
        if (*(void *)(a1 + 248) != 2) {
          return 0x40000000000;
        }
        long long v6 = *(unsigned char **)(a1 + 240);
        if (*v6 != 5 || v6[1]) {
          return 0x40000000000;
        }
      }
    }
    unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
    if (sub_19D75AEEC(a1 + 48, (uint64_t)&off_1E59637C0, &v7, (void *)(a1 + 272), 1))
    {
      sub_19D759A28(5, "%s: ClientID extension not found", "AMFDRDecodeCertificate");
    }
    else if (v7 != 12)
    {
      return 0x40000000000;
    }
    if (sub_19D75AEEC(a1 + 48, (uint64_t)&off_1E59637D0, &v7, (void *)(a1 + 288), 0))
    {
      sub_19D759A28(5, "%s: Certificate Properties extension not found", "AMFDRDecodeCertificate");
      return 0;
    }
    if (v7 == 0x2000000000000011) {
      return 0;
    }
    return 0x40000000000;
  }
  return result;
}

uint64_t sub_19D75AEEC(uint64_t a1, uint64_t a2, void *a3, void *a4, int a5)
{
  v20[0] = 0xAAAAAAAAAAAAAAAALL;
  v20[1] = 0xAAAAAAAAAAAAAAAALL;
  memset(v18, 170, sizeof(v18));
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v16[1] = v5;
  long long v17 = v5;
  memset(v15, 170, sizeof(v15));
  uint64_t v6 = 1;
  v16[0] = v5;
  if (a1 && a2 && a4)
  {
    *a4 = 0;
    a4[1] = 0;
    if (*(void *)(a1 + 152) && (v10 = *(void *)(a1 + 144), uint64_t v9 = a1 + 144, v10))
    {
      unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
      uint64_t v6 = 16;
      if (!sub_19D757600(v9, &v19, v20) && v19 == 0x2000000000000010)
      {
        uint64_t v6 = 2;
        while (!sub_19D7576E8(v20, v18))
        {
          if (v18[0] != 0x2000000000000010
            || sub_19D757874(&v18[1], 3u, (uint64_t)&unk_19D779A08, (unint64_t)v16, 0x30uLL, 0x30uLL))
          {
            return 16;
          }
          if (sub_19D757B68(a2, (uint64_t)v16))
          {
            if (sub_19D757020((uint64_t)&v17, v15)) {
              return 0x40000000000;
            }
            uint64_t v6 = 0;
            *a3 = v15[0];
            if (a5) {
              long long v13 = &v15[1];
            }
            else {
              long long v13 = (unint64_t *)&v17;
            }
            *(_OWORD *)a4 = *(_OWORD *)v13;
            return v6;
          }
        }
      }
    }
    else
    {
      return 512;
    }
  }
  return v6;
}

double sub_19D75B088(_OWORD *a1, uint64_t a2, unsigned int a3)
{
  if (a1 && a2 && a3)
  {
    a1[17] = 0u;
    a1[18] = 0u;
    a1[15] = 0u;
    a1[16] = 0u;
    a1[13] = 0u;
    a1[14] = 0u;
    a1[11] = 0u;
    a1[12] = 0u;
    a1[9] = 0u;
    a1[10] = 0u;
    a1[7] = 0u;
    a1[8] = 0u;
    a1[5] = 0u;
    a1[6] = 0u;
    a1[3] = 0u;
    a1[4] = 0u;
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    memset(v22, 0, sizeof(v22));
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    v17[0] = 0;
    v17[1] = 0;
    unint64_t v16 = 0;
    unint64_t v14 = 0;
    long long v15 = 0uLL;
    *(void *)&long long v25 = a2;
    *((void *)&v25 + 1) = a3;
    if (sub_19D7577A8((uint64_t)&v25, 4u, (uint64_t)&unk_19D779F00, (unint64_t)v22, 0x40uLL, 0x40uLL))
    {
      sub_19D759A28(3, "%s: failed to parse im4c: %d");
    }
    else if (*(void *)&v22[0] && *((void *)&v22[0] + 1) == 4)
    {
      if (**(_DWORD **)&v22[0] == *(_DWORD *)"IM4C")
      {
        if (sub_19D757020((uint64_t)&v23, &v16))
        {
          sub_19D759A28(3, "%s: failed to parse signed section sequence: %d");
        }
        else if (v16 == 0x2000000000000011)
        {
          if (sub_19D757874(v17, 2u, (uint64_t)&unk_19D779ED0, (unint64_t)&v20, 0x20uLL, 0x20uLL))
          {
            sub_19D759A28(3, "%s: failed to parse signed section of im4c: %d");
          }
          else if (sub_19D757020((uint64_t)&v21, &v14))
          {
            sub_19D759A28(3, "%s: failed to parse public key of im4c: %d");
          }
          else if (sub_19D7577A8((uint64_t)&v20, 2u, (uint64_t)&unk_19D779EA0, (unint64_t)&v18, 0x20uLL, 0x20uLL))
          {
            sub_19D759A28(3, "%s: failed to parse cert properties: %d");
          }
          else if ((void)v18 && *((void *)&v18 + 1) == 4)
          {
            if (*(_DWORD *)v18 == *(_DWORD *)"CRTP")
            {
              uint64_t v4 = 0;
              long long v5 = 0;
              do
              {
                uint64_t v6 = 0;
                uint64_t v7 = (uint64_t)*(&off_1E9449178 + v4);
                while (*((void *)&v24 + 1) != *(_DWORD *)(v7 + 4) + v6)
                {
                  if (++v6 == 3) {
                    goto LABEL_22;
                  }
                }
                long long v5 = *(_OWORD **)(v7 + 24);
LABEL_22:
                ++v4;
              }
              while (v4 != 3);
              if (v5)
              {
                uint64_t v8 = 0;
                while (1)
                {
                  uint64_t v9 = *(uint64_t *)((char *)&off_1E9449178 + v8);
                  if (*((void *)&v15 + 1) == *(_DWORD *)v9) {
                    break;
                  }
                  v8 += 8;
                  if (v8 == 24) {
                    goto LABEL_27;
                  }
                }
                uint64_t v11 = *(long long **)(v9 + 16);
                if (!v11)
                {
LABEL_27:
                  sub_19D759A28(3, "%s: unsupported public key length: %lu");
                  return result;
                }
                *a1 = v23;
                a1[2] = v24;
                a1[1] = *v5;
                a1[13] = v15;
                a1[14] = xmmword_1E5963680;
                long long v12 = *v11;
                a1[18] = v19;
                long long v13 = v25;
                a1[15] = v12;
                a1[16] = v13;
                double result = *(double *)&v15;
                a1[9] = v15;
              }
              else
              {
                sub_19D759A28(3, "%s: unsupported signature length: %lu");
              }
            }
            else
            {
              sub_19D759A28(3, "%s: malformed cert property key: %c%c%c%c");
            }
          }
          else
          {
            sub_19D759A28(3, "%s: malformed cert property key length: %lu");
          }
        }
        else
        {
          sub_19D759A28(3, "%s: unexpected signed section tag: 0x%llx");
        }
      }
      else
      {
        sub_19D759A28(3, "%s: malformed im4c tag: %c%c%c%c");
      }
    }
    else
    {
      sub_19D759A28(3, "%s: malformed im4c tag length: %lu");
    }
  }
  return result;
}

void sub_19D75B43C(uint64_t a1, __int16 a2, _OWORD **a3, _DWORD *a4)
{
  unsigned int v15 = 0;
  if (a1 && a3 && *(void *)a1)
  {
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7)
    {
      if (!sub_19D75BAB4(*(void *)a1, v7, &v15))
      {
        unint64_t v9 = *(void *)(a1 + 8);
        if (v9 >= v15)
        {
          uint64_t v10 = *a3;
          uint64_t v11 = *(void *)a1;
          if ((a2 & 0x100) != 0) {
            sub_19D75B088(v10, v11, v9);
          }
          else {
            uint64_t v12 = sub_19D75ACC4((unint64_t)v10, v11, v9);
          }
          if (!v12)
          {
            int v13 = *(unsigned __int16 *)(a1 + 16);
            *(_WORD *)(a1 + 16) = v13 + 1;
            *a4 = v13;
            uint64_t v14 = *(void *)(a1 + 8) - v15;
            *(void *)a1 += v15;
            *(void *)(a1 + 8) = v14;
          }
        }
      }
    }
    else
    {
      *a3 = 0;
    }
  }
}

uint64_t sub_19D75B51C(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  unsigned int __n = 0;
  __s2 = 0;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __s1[0] = v4;
  __s1[1] = v4;
  v18[0] = v4;
  v18[1] = v4;
  __n_4[0] = v4;
  __n_4[1] = v4;
  unsigned int v5 = sub_19D761B70(*(char **)(a2 + 256), *(void *)(a2 + 264), (uint64_t)__s1);
  if (v5 || (unsigned int v5 = sub_19D761B70(*(char **)(a2 + 144), *(void *)(a2 + 152), (uint64_t)v18)) != 0)
  {
LABEL_3:
    uint64_t v6 = v5;
    uint64_t v7 = "%s: AMSupportDigestSha256 failed";
LABEL_4:
    sub_19D759A28(3, v7, "AMFDRDecodeCheckCertRevocation");
    return v6;
  }
  unint64_t v9 = *(char **)(a2 + 272);
  if (v9 && (size_t v10 = *(void *)(a2 + 280)) != 0)
  {
    unsigned int v5 = sub_19D761B70(v9, v10, (uint64_t)__n_4);
    if (v5) {
      goto LABEL_3;
    }
    int v11 = 1;
  }
  else
  {
    int v11 = 0;
  }
  uint64_t v12 = sub_19D759D68(a1);
  if (v12)
  {
    uint64_t v6 = v12;
    sub_19D759A28(3, "%s: AMFDRDecodeIterateTrustObjectRevokedBegin failed");
  }
  else
  {
    uint64_t v13 = sub_19D759E98(a1, &__s2, &__n);
    if (v13)
    {
      uint64_t v6 = v13;
      sub_19D759A28(3, "%s: AMFDRDecodeIterateTrustObjectRevokedNext failed");
    }
    else
    {
      uint64_t v7 = "%s: AMFDRDecodeIterateTrustObjectRevokedNext failed";
      while (1)
      {
        uint64_t v6 = (uint64_t)__s2;
        if (!__s2) {
          break;
        }
        size_t v14 = __n;
        if (!memcmp(__s1, __s2, __n))
        {
          uint64_t v6 = 0x10000000000;
          sub_19D759A28(3, "%s: FDR Trust Object revoked certificate found");
          return v6;
        }
        if (!memcmp(v18, (const void *)v6, v14))
        {
          uint64_t v6 = 0x10000000000;
          sub_19D759A28(3, "%s: FDR Trust Object revoked public key found");
          return v6;
        }
        if (v11 && !memcmp(__n_4, (const void *)v6, v14))
        {
          uint64_t v6 = 0x10000000000;
          sub_19D759A28(3, "%s: FDR Trust Object revoked client ID found");
          return v6;
        }
        uint64_t v6 = sub_19D759E98(a1, &__s2, &__n);
        if (v6) {
          goto LABEL_4;
        }
      }
    }
  }
  return v6;
}

uint64_t sub_19D75B700(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4, void *a5)
{
  if (!a3)
  {
    sub_19D759A28(3, "%s: trustObject is NULL", "AMFDRDecodeVerifyCertIssuerWithOptions");
    return 1;
  }
  if ((a4 & 0x100) != 0)
  {
    uint64_t v8 = *(void *)(a1 + 24);
    if (v8)
    {
      uint64_t v9 = *(void *)(a1 + 40);
      if (v9)
      {
        if (sub_19D75D3C8(*(void *)(a2 + 208), *(_DWORD *)(a2 + 216), *(void *)(a1 + 32), v9, *(char **)a1, *(_DWORD *)(a1 + 8), *(void *)(a1 + 16), v8, a2 + 240, 1, a5))
        {
          uint64_t v10 = 0x20000000000;
          sub_19D759A28(3, "%s: PKI: im4c cert signature validation with issuer pubkey failed");
        }
        else
        {
          sub_19D759A28(7, "%s: PKI: verify im4c cert was issued and signed by issuer (success)", "_AMFDRDecodeVerifyImage4CertIssuer");
          uint64_t v10 = sub_19D75B51C(a3, a1);
          if (v10) {
            sub_19D759A28(3, "%s: im4c revocation check failed");
          }
        }
      }
      else
      {
        uint64_t v10 = 0x40000000000;
        sub_19D759A28(3, "%s: decoded IM4C signature is empty");
      }
    }
    else
    {
      uint64_t v10 = 0x40000000000;
      sub_19D759A28(3, "%s: decoded IM4C signature OID is empty");
    }
    return v10;
  }

  return sub_19D75B854(a1, a2, a3, a5);
}

uint64_t sub_19D75B854(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v19[0] = v7;
  v19[1] = v7;
  uint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  size_t v8 = *(void *)(a2 + 136);
  if (v8 != *(void *)(a1 + 104) || memcmp(*(const void **)(a2 + 128), *(const void **)(a1 + 96), v8))
  {
    sub_19D759A28(3, "%s: PKI: cert was not issued by issuer (subject != issuer)", "_AMFDRDecodeVerifyCertIssuerInternal");
    uint64_t v10 = (char *)malloc(0x100uLL);
    if (sub_19D75D820(*(void *)(a2 + 128), *(void *)(a2 + 136), v10)) {
      int v11 = "decode error";
    }
    else {
      int v11 = v10;
    }
    uint64_t v12 = (char *)malloc(0x100uLL);
    if (sub_19D75D820(*(void *)(a1 + 96), *(void *)(a1 + 104), v12)) {
      uint64_t v13 = "decode error";
    }
    else {
      uint64_t v13 = v12;
    }
    sub_19D759A28(3, "%s: subject: %s, issuer: %s", "_AMFDRDecodeVerifyCertIssuerInternal", v11, v13);
    if (v10) {
      free(v10);
    }
    if (v12) {
      free(v12);
    }
    return 0x20000000000;
  }
  char v18 = -86;
  if (sub_19D757874((unint64_t *)(a1 + 16), 2u, (uint64_t)&unk_19D779A58, (unint64_t)v19, 0x20uLL, 0x20uLL))
  {
    sub_19D759A28(3, "%s: decodeAlgId failed");
    return 0x40000000000;
  }
  if (sub_19D7573D8(a1 + 32, (unint64_t *)&v16, &v18))
  {
    sub_19D759A28(3, "%s: DERParseBitString(sig) failed");
    return 0x40000000000;
  }
  if (v18)
  {
    sub_19D759A28(3, "%s: numUnused != 0");
    return 0x40000000000;
  }
  if (sub_19D75D3C8(*(void *)(a2 + 208), *(_DWORD *)(a2 + 216), v16, v17, *(char **)a1, *(_DWORD *)(a1 + 8), *(uint64_t *)&v19[0], DWORD2(v19[0]), a1 + 240, 0, a4))
  {
    sub_19D759A28(3, "%s: PKI: cert signature validation with issuer pubkey failed", "_AMFDRDecodeVerifyCertIssuerInternal");
    return 0x20000000000;
  }
  sub_19D759A28(7, "%s: PKI: verify cert was issued and signed by issuer (success)", "_AMFDRDecodeVerifyCertIssuerInternal");
  if (!a3) {
    return 0;
  }
  uint64_t v14 = sub_19D75B51C(a3, a1);
  if (v14) {
    sub_19D759A28(3, "%s: revocation check failed", "_AMFDRDecodeVerifyCertIssuerInternal");
  }
  return v14;
}

uint64_t sub_19D75BAB4(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  memset(v6, 170, sizeof(v6));
  uint64_t result = 1;
  if (a1 && a3)
  {
    v7[0] = a1;
    v7[1] = a2;
    if (sub_19D757028((uint64_t)v7, v6, 0))
    {
      sub_19D759A28(3, "%s: failed to decode DER", "AMFDRDecodeParseDERLengthFromBuffer");
      return 2;
    }
    else
    {
      uint64_t result = 0;
      *a3 = LODWORD(v6[2]) - a1 + LODWORD(v6[1]);
    }
  }
  return result;
}

uint64_t sub_19D75BB50(uint64_t *a1, void *a2, _DWORD *a3)
{
  uint64_t v6 = malloc(0x7F8uLL);
  if (v6)
  {
    uint64_t v7 = (uint64_t)v6;
    bzero(v6, 0x7F8uLL);
    if (a1)
    {
      uint64_t v8 = *a1;
      if (*a1 && (uint64_t v9 = *((unsigned int *)a1 + 2), v9))
      {
        if (a2 && a3)
        {
          uint64_t v10 = a1[18];
          if ((v10 & 0x801) != 0)
          {
            *(void *)(v7 + 8) = v8;
            *(void *)(v7 + 16) = v9;
          }
          else
          {
            *(void *)(v7 + 1944) = a1[2];
            *(void *)(v7 + 1952) = *((unsigned int *)a1 + 6);
            *(void *)(v7 + 24) = v8;
            *(void *)(v7 + 32) = v9;
            uint64_t v13 = *((unsigned int *)a1 + 10);
            *(void *)(v7 + 280) = a1[4];
            *(void *)(v7 + 288) = v13;
          }
          uint64_t v14 = *((unsigned int *)a1 + 14);
          *(void *)(v7 + 72) = a1[6];
          *(void *)(v7 + 80) = v14;
          uint64_t v15 = *((unsigned int *)a1 + 18);
          *(void *)(v7 + 88) = a1[8];
          *(void *)(v7 + 96) = v15;
          if ((v10 & 0x80) != 0)
          {
            uint64_t v18 = a1[12];
            uint64_t v19 = *((unsigned int *)a1 + 26);
            uint64_t v16 = v18;
            uint64_t v17 = v19;
          }
          else
          {
            uint64_t v16 = a1[10];
            uint64_t v17 = *((unsigned int *)a1 + 22);
            uint64_t v18 = a1[12];
            uint64_t v19 = *((unsigned int *)a1 + 26);
          }
          *(void *)(v7 + 104) = v16;
          *(void *)(v7 + 112) = v17;
          uint64_t v20 = *((unsigned int *)a1 + 34);
          *(void *)(v7 + 216) = a1[16];
          *(void *)(v7 + 224) = v20;
          uint64_t v21 = *((unsigned int *)a1 + 66);
          *(void *)(v7 + 232) = a1[32];
          *(void *)(v7 + 240) = v21;
          *(void *)(v7 + 136) = v18;
          *(void *)(v7 + 144) = v19;
          uint64_t v22 = a1[14];
          uint64_t v23 = *((unsigned int *)a1 + 30);
          *(void *)(v7 + 168) = v22;
          *(void *)(v7 + 176) = v23;
          uint64_t v24 = a1[26];
          if (v24 && (uint64_t v25 = *((unsigned int *)a1 + 54), v25))
          {
            *(void *)(v7 + 184) = v24;
            uint64_t v23 = v25;
          }
          else
          {
            *(void *)(v7 + 184) = v22;
          }
          *(void *)(v7 + 192) = v23;
          *(void *)(v7 + 2016) = v10;
          if (v22) {
            BOOL v26 = 1;
          }
          else {
            BOOL v26 = v14 == 48;
          }
          BOOL v27 = !v26 && (v10 & 0x20) == 0;
          uint64_t v28 = off_1EEF8FB80;
          if (!v27) {
            uint64_t v28 = off_1EEF8FBB8;
          }
          *(void *)(v7 + 2008) = v28;
          if ((v10 & 0x100) != 0)
          {
            *(void *)(v7 + 2008) = off_1EEF8FBB8;
            uint64_t v29 = *((unsigned int *)a1 + 58);
            *(void *)(v7 + 152) = a1[28];
            *(void *)(v7 + 160) = v29;
          }
          if ((v10 & 0x1000) != 0)
          {
            uint64_t v30 = *((unsigned int *)a1 + 62);
            *(void *)(v7 + 120) = a1[30];
            *(void *)(v7 + 128) = v30;
          }
          *(void *)(v7 + 2024) = a1[19];
          uint64_t v31 = a1[34];
          if (v31)
          {
            int v32 = *((_DWORD *)a1 + 70);
            if (v32)
            {
              *(void *)(v7 + 344) = v31;
              *(_DWORD *)(v7 + 352) = v32;
            }
          }
          uint64_t v33 = sub_19D75A160(v7);
          *a2 = *(void *)(v7 + 1912);
          *a3 = *(void *)(v7 + 1920);
          if (*(unsigned char *)(v7 + 2032))
          {
            long long v34 = *(_OWORD *)(v7 + 744);
            *((_OWORD *)a1 + 10) = *(_OWORD *)(v7 + 728);
            *((_OWORD *)a1 + 11) = v34;
            *((_OWORD *)a1 + 12) = *(_OWORD *)(v7 + 760);
          }
          if (v33) {
            unint64_t v11 = sub_19D75A504(a1[18], v33);
          }
          else {
            unint64_t v11 = 0;
          }
          goto LABEL_14;
        }
        sub_19D759A28(3, "%s: outRawData and outRawDataLength must be non NULL");
      }
      else
      {
        sub_19D759A28(3, "%s: ctx->inData must be non NULL and ctx->inDataLength must be non 0");
      }
    }
    else
    {
      sub_19D759A28(3, "%s: ctx must be non NULL");
    }
    unint64_t v11 = 1;
LABEL_14:
    free((void *)v7);
    return v11;
  }
  sub_19D759A28(3, "%s: Failed to malloc fdrDecode", "AMFDRDecodeTrustEvaluation");
  return 0x80000000000000;
}

uint64_t sub_19D75BDCC(uint64_t a1, unsigned int a2, void *a3, unsigned char *a4)
{
  uint64_t v16 = 0;
  uint64_t v4 = 1;
  if (!a1) {
    return v4;
  }
  if (!a2) {
    return v4;
  }
  if (!a3) {
    return v4;
  }
  uint64_t v7 = a4;
  if (!a4) {
    return v4;
  }
  uint64_t v9 = (void *)*a3;
  uint64_t v10 = (void *)*a3;
  if (!*a3)
  {
    uint64_t v10 = malloc(0x78uLL);
    if (!v10) {
      return 0x80000000000000;
    }
  }
  v10[14] = 0;
  *((_OWORD *)v10 + 5) = 0u;
  *((_OWORD *)v10 + 6) = 0u;
  *((_OWORD *)v10 + 3) = 0u;
  *((_OWORD *)v10 + 4) = 0u;
  *((_OWORD *)v10 + 1) = 0u;
  *((_OWORD *)v10 + 2) = 0u;
  *(_OWORD *)uint64_t v10 = 0u;
  v17[0] = a1;
  v17[1] = a2;
  int v11 = sub_19D7577A8((uint64_t)v17, 5u, (uint64_t)&unk_19D779DC8, (unint64_t)(v10 + 1), 0x50uLL, 0);
  if (v11)
  {
    sub_19D759A28(3, "%s: failed to parse sysconfig sequence: %d", "AMFDRDecodeIterateSysconfigBegin", v11);
    uint64_t v4 = 0x400000000000000;
    goto LABEL_32;
  }
  uint64_t v12 = v10[2];
  if (v12 != 4)
  {
    sub_19D759A28(3, "%s: magic size is invalid: %lu", "AMFDRDecodeIterateSysconfigBegin", v12);
    uint64_t v4 = 0x400000000000020;
    goto LABEL_32;
  }
  for (uint64_t i = 3; i != -1; --i)
    *v7++ = *(unsigned char *)(v10[1] + i);
  if (v10[4] != 4)
  {
    sub_19D759A28(3, "%s: version size is invalid: %lu");
    goto LABEL_25;
  }
  int v14 = *(_DWORD *)v10[3];
  if (!(_BYTE)v14)
  {
    sub_19D759A28(3, "%s: minor version not supported: 0x%x");
    goto LABEL_25;
  }
  if ((v14 & 0xFFFF00) != 0x30000)
  {
    sub_19D759A28(3, "%s: sysconfig version not supported: 0x%x");
LABEL_25:
    uint64_t v4 = 0x402000000000000;
    goto LABEL_32;
  }
  if (sub_19D757600((uint64_t)(v10 + 5), &v16, v10 + 11))
  {
    uint64_t v4 = 0x400000000000010;
    sub_19D759A28(3, "%s: failed to decode sysconfig payload: %d");
    goto LABEL_32;
  }
  if (v16 != 0x2000000000000011)
  {
    sub_19D759A28(3, "%s: invalid payload tag: 0x%llx");
LABEL_31:
    uint64_t v4 = 0x400000000000040;
    goto LABEL_32;
  }
  if (!sub_19D757600((uint64_t)(v10 + 7), &v16, v10 + 13))
  {
    if (v16 == 0x2000000000000011)
    {
      uint64_t v4 = 0;
      *(unsigned char *)uint64_t v10 = 1;
      *a3 = v10;
      return v4;
    }
    sub_19D759A28(3, "%s: invalid metadata tag: 0x%llx");
    goto LABEL_31;
  }
  uint64_t v4 = 0x400000000000010;
  sub_19D759A28(3, "%s: failed to decode sysconfig metadata: %d");
LABEL_32:
  if (!v9) {
    free(v10);
  }
  return v4;
}

uint64_t sub_19D75C084(uint64_t a1, unsigned char *a2, unsigned char *a3, void *a4, _DWORD *a5, unsigned char *a6)
{
  unint64_t v24 = 0;
  v25[0] = 0;
  v25[1] = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v21 = 0u;
  memset(v20, 0, sizeof(v20));
  uint64_t v6 = 1;
  BOOL v19 = 0;
  if (!a3) {
    return v6;
  }
  if (!a1) {
    return v6;
  }
  uint64_t v7 = a2;
  if (!a2 || !a4 || !a5) {
    return v6;
  }
  if (!*(unsigned char *)a1)
  {
    sub_19D759A28(3, "%s: sysconfig context is not initialized");
    return 0x400000000000000;
  }
  int v12 = sub_19D7576E8((unint64_t *)(a1 + 88), &v24);
  if (v12 == 1) {
    return 0x40000000000000;
  }
  if (v12 || v24 != 0x2000000000000010)
  {
    sub_19D759A28(3, "%s: failed to decode payload: %d", "AMFDRDecodeIterateSysconfigPayloadNext", v12);
    return 0x400000000000040;
  }
  int v13 = sub_19D757874(v25, 5u, (uint64_t)&unk_19D779D50, (unint64_t)v20, 0x50uLL, 0);
  if (v13)
  {
    uint64_t v6 = 0x400000000000010;
    sub_19D759A28(3, "%s: failed to parse payload content: %d", "AMFDRDecodeIterateSysconfigPayloadNext", v13);
    return v6;
  }
  if (*((void *)&v20[0] + 1) != 4)
  {
    sub_19D759A28(3, "%s: invalid key length: %lu", "AMFDRDecodeIterateSysconfigPayloadNext", *((void *)&v20[0] + 1));
    return 0x400000000000020;
  }
  uint64_t v14 = *(void *)&v20[0];
  for (uint64_t i = 3; i != -1; --i)
    *v7++ = *(unsigned char *)(v14 + i);
  if (sub_19D7574D4((unsigned __int8 **)&v23, 0, &v19))
  {
    sub_19D759A28(3, "%s: failed to parse BOOLean: %d");
    return 0x400000000000000;
  }
  if (v19)
  {
    uint64_t v6 = 0;
    *a3 = 1;
  }
  else
  {
    int v17 = DWORD2(v22);
    if (*((void *)&v22 + 1))
    {
      *a4 = v22;
      *a5 = v17;
      uint64_t v6 = 0;
      if (a6) {
        *a6 = 1;
      }
    }
    else
    {
      uint64_t v6 = 0;
      int v18 = DWORD2(v21);
      *a4 = v21;
      *a5 = v18;
    }
  }
  return v6;
}

uint64_t sub_19D75C2B4(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 1944);
  if (!v2)
  {
    sub_19D759A28(3, "%s: FDR Trust Object is NULL", "_AMFDRDecodeVerifyTrustObject");
    uint64_t v4 = 0x200000;
    goto LABEL_5;
  }
  uint64_t v3 = sub_19D759920(a1 + 1768, v2, *(_DWORD *)(a1 + 1952));
  if (!v3)
  {
    if (!*(void *)(a1 + 72))
    {
      sub_19D759A28(3, "%s: FDR Trust Object digest is NULL", "_AMFDRDecodeVerifyTrustObject");
      uint64_t v4 = 0x40000;
      goto LABEL_5;
    }
    *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
    __s2[1] = v6;
    __s2[2] = v6;
    __s2[0] = v6;
    uint64_t v7 = *(void *)(a1 + 80);
    if (v7 == 48)
    {
      if (sub_19D761BDC(*(char **)(a1 + 1944), *(void *)(a1 + 1952), (uint64_t)__s2))
      {
LABEL_11:
        sub_19D759A28(3, "%s: AMSupportDigestSha256 failed");
LABEL_16:
        uint64_t v4 = 0x100000;
        goto LABEL_5;
      }
    }
    else
    {
      if (v7 != 32)
      {
        sub_19D759A28(3, "%s: FDR Trust Object digest size not supported. digest is of size %zu", "_AMFDRDecodeVerifyTrustObject", v7);
        uint64_t v4 = 0x80000;
        goto LABEL_5;
      }
      if (sub_19D761B70(*(char **)(a1 + 1944), *(void *)(a1 + 1952), (uint64_t)__s2)) {
        goto LABEL_11;
      }
    }
    if (!memcmp(*(const void **)(a1 + 72), __s2, *(void *)(a1 + 80))) {
      return 0;
    }
    sub_19D759A28(3, "%s: FDR Trust Object digest mismatch.");
    goto LABEL_16;
  }
  uint64_t v4 = v3;
  sub_19D759A28(3, "%s: malformed FDR Trust Object Format", "_AMFDRDecodeVerifyTrustObject");
LABEL_5:
  *(void *)a1 |= v4;
  return v4;
}

uint64_t sub_19D75C460(int a1, uint64_t *a2, int a3, _WORD *a4)
{
  int v10 = 0;
  if (!*(void *)a4)
  {
    sub_19D759A28(3, "%s: fdrDecode is NULL", "_AMFDRDecodeFilterDataInstanceCallback");
    return 6;
  }
  *(void *)uint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  if (!a2)
  {
    sub_19D759A28(3, "%s: property is NULL", "_AMFDRDecodeFilterDataInstanceCallback");
    **(void **)a4 |= 1uLL;
    return 6;
  }
  if (a1 != 1768846196) {
    return 0;
  }
  uint64_t v6 = sub_19D760208(a2, 1768846196, v9, &v10);
  if (v6)
  {
    uint64_t v7 = v6;
    sub_19D759A28(3, "%s: Img4DecodeGetPropertyData(kFDRTag_inst) failed.", "_AMFDRDecodeFilterDataInstanceCallback");
    **(void **)a4 |= 0x4000uLL;
    return v7;
  }
  if (a3 != 1)
  {
    sub_19D759A28(3, "%s: unexpected property type != kImg4ObjectProperty", "_AMFDRDecodeFilterDataInstanceCallback");
    return 0;
  }
  if (sub_19D75C5F8(*(_DWORD **)v9, v10, *(void **)(*(void *)a4 + 104), *(void *)(*(void *)a4 + 112), *(const void **)(*(void *)a4 + 184), *(void *)(*(void *)a4 + 192), 1, *(void **)a4))
  {
    sub_19D759A28(6, "%s: kFDRTag_inst property == fdrDecode->uniqueID, found corresponding Data Instance.", "_AMFDRDecodeFilterDataInstanceCallback");
    uint64_t v7 = 0;
    a4[4] = 1;
  }
  else
  {
    sub_19D759A28(3, "%s: kFDRTag_inst property != fdrDecode->uniqueID", "_AMFDRDecodeFilterDataInstanceCallback");
    uint64_t v7 = 0;
    a4[4] = 256;
  }
  return v7;
}

uint64_t sub_19D75C5F8(_DWORD *a1, uint64_t a2, void *__s2, size_t __n, const void *a5, size_t a6, int a7, void *a8)
{
  if (a8)
  {
    uint64_t v11 = a8[252];
    if ((v11 & 0x100) != 0 && a8[19] && a8[20] && (!a7 || (v11 & 0x80) != 0))
    {
      a6 = 0;
      a5 = 0;
      unsigned int __n = a8[20];
      __s2 = (void *)a8[19];
    }
  }
  if (a2 < 5 || *a1 != 762014067)
  {
    if (__n != a2)
    {
      uint64_t v17 = a2;
      size_t v18 = __n;
      int v12 = "%s: kFDRTag_inst propertyLength (%d) != instLength (%zu)";
      goto LABEL_14;
    }
    if (memcmp(a1, __s2, __n))
    {
      int v12 = "%s: kFDRTag_inst propertyValue != instValue";
LABEL_14:
      uint64_t v13 = 4;
LABEL_20:
      sub_19D759A28(v13, v12, "_AMFDRDecodeInstPropertyMatching", v17, v18);
      return 0;
    }
    return 1;
  }
  size_t v14 = (a2 - 4);
  if (__n >= v14)
  {
    uint64_t v17 = (a2 - 4);
    size_t v18 = __n;
    int v12 = "%s: kFDRTag_inst propertyLength (sik) (%d) <= instLength (%zu)";
    goto LABEL_19;
  }
  uint64_t v15 = a1 + 1;
  if (memcmp(a1 + 1, __s2, __n))
  {
    int v12 = "%s: kFDRTag_inst propertyValue (sik) != instValue";
    goto LABEL_19;
  }
  if (*((unsigned char *)v15 + __n) != 45)
  {
    int v12 = "%s: kFDRTag_inst propertyValue missing expected -";
    goto LABEL_19;
  }
  uint64_t result = 1;
  if (a6 && a5)
  {
    if (a6 == v14 + ~__n)
    {
      if (!memcmp((char *)v15 + __n + 1, a5, a6)) {
        return 1;
      }
      int v12 = "%s: kFDRTag_inst propertyValue (sik) != sikValue";
    }
    else
    {
      uint64_t v17 = (v14 + ~__n);
      size_t v18 = a6;
      int v12 = "%s: kFDRTag_inst propertyLength (sik) (%d) != sikLength (%zu)";
    }
LABEL_19:
    uint64_t v13 = 3;
    goto LABEL_20;
  }
  return result;
}

uint64_t sub_19D75C7CC(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  v15[0] = a1;
  v15[1] = a2;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v9 = v6;
  long long v10 = v6;
  uint64_t v14 = 0;
  v13[0] = 0;
  v13[1] = 0;
  v12[0] = 0;
  v12[1] = 0;
  unint64_t v11 = 0;
  if (sub_19D757600((uint64_t)v15, &v14, v13) || v14 != 0x2000000000000011)
  {
    sub_19D759A28(3, "%s: failed to parse property list");
    return 2;
  }
  if (sub_19D7576E8(v13, &v11))
  {
LABEL_8:
    sub_19D759A28(3, "%s: cannot find tag in property list");
    return 2;
  }
  while (1)
  {
    long long v9 = 0u;
    long long v10 = 0u;
    if (sub_19D757874(v12, 2u, (uint64_t)&unk_19D779CA8, (unint64_t)&v9, 0x20uLL, 0))
    {
      sub_19D759A28(3, "%s: failed to decode subCC digests sequence");
      return 2;
    }
    if (*((void *)&v9 + 1) == 4 && sub_19D757BBC((unsigned int *)v9) == a3) {
      break;
    }
    if (sub_19D7576E8(v13, &v11)) {
      goto LABEL_8;
    }
  }
  if (a4)
  {
    uint64_t result = 0;
    uint64_t v8 = *((void *)&v10 + 1);
    *a4 = v10;
    a4[1] = v8;
  }
  else
  {
    sub_19D759A28(3, "%s: outValue is NULL", "_AMFDRDecodeSearchEntryFromPropertyList");
    return 1;
  }
  return result;
}

uint64_t sub_19D75C940(uint64_t a1)
{
  unsigned int v30 = 0;
  uint64_t v2 = *(void *)(a1 + 2016);
  if ((~*(_DWORD *)(a1 + 2016) & 0x1080) == 0)
  {
    sub_19D759A28(3, "%s: cannot set kAMFDRDecodeOptionManifestOnly and kAMFDRDecodeOptionSubCCOnly at the same time");
    goto LABEL_68;
  }
  if ((v2 & 0x80) != 0)
  {
    if (!sub_19D760728(*(void *)(a1 + 24), *(void *)(a1 + 32), a1 + 400)) {
      goto LABEL_5;
    }
    goto LABEL_7;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  unsigned int v5 = (_OWORD *)(a1 + 400);
  if ((v2 & 0x1000) == 0)
  {
    double v6 = sub_19D760638(v3, v4, (uint64_t)v5);
    if (!v7)
    {
LABEL_5:
      uint64_t v2 = *(void *)(a1 + 2016);
      goto LABEL_9;
    }
LABEL_7:
    sub_19D759A28(3, "%s: FDR failed to decode Data img4", v6);
LABEL_18:
    uint64_t v9 = *(void *)a1;
    uint64_t v10 = 83901440;
LABEL_19:
    uint64_t result = v9 | v10;
    *(void *)a1 = v9 | v10;
    uint64_t v12 = *(void *)(a1 + 32);
    *(void *)(a1 + 1912) = *(void *)(a1 + 24);
    *(void *)(a1 + 1920) = v12;
    return result;
  }
  *(void *)(a1 + 848) = 0;
  double v6 = 0.0;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  _OWORD *v5 = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(void *)(a1 + 408) = v3;
  *(void *)(a1 + 416) = v4;
  *(void *)(a1 + 488) = "IM4P";
  *(void *)(a1 + 496) = 4;
  *(void *)(a1 + 536) = v3;
  *(void *)(a1 + 544) = v4;
LABEL_9:
  uint64_t v8 = *(void *)(a1 + 280);
  if ((v2 & 0x1000) != 0)
  {
    if (v8) {
      goto LABEL_16;
    }
    sub_19D759A28(3, "%s: trust evaluation on subCC requires a reStitchManifest");
LABEL_68:
    uint64_t result = *(void *)a1 | 1;
    goto LABEL_36;
  }
  if (!v8)
  {
    if ((v2 & 0x1000) == 0) {
      goto LABEL_12;
    }
LABEL_21:
    unsigned int v30 = sub_19D757BBC(*(unsigned int **)(a1 + 88));
    goto LABEL_22;
  }
LABEL_16:
  *(_OWORD *)(a1 + 424) = *(_OWORD *)(a1 + 280);
  if (sub_19D75F72C((void *)(a1 + 280), a1 + 632))
  {
    sub_19D759A28(3, "%s: FDR failed to decode manifestOverride", v6);
    goto LABEL_18;
  }
  uint64_t v2 = *(void *)(a1 + 2016);
  if ((v2 & 0x1000) != 0) {
    goto LABEL_21;
  }
LABEL_12:
  if ((v2 & 0x80) == 0)
  {
    if (sub_19D75FD70(a1 + 400, &v30))
    {
      sub_19D759A28(3, "%s: FDR failed to get payload type", v6);
      goto LABEL_18;
    }
    if (*(void *)(a1 + 528) != 3)
    {
      sub_19D759A28(3, "%s: Payload version is wrong size. got %zu expected %d");
      goto LABEL_50;
    }
    long long v23 = *(unsigned __int16 **)(a1 + 520);
    int v24 = *v23;
    int v25 = *((unsigned __int8 *)v23 + 2);
    if (v24 != 11825 || v25 != 48)
    {
      sub_19D759A28(3, "%s: Payload version mismatch");
LABEL_50:
      uint64_t v9 = *(void *)a1;
      uint64_t v10 = 0x8005001C00;
      goto LABEL_19;
    }
  }
LABEL_22:
  uint64_t v13 = *(unsigned int **)(a1 + 88);
  if (!v13) {
    goto LABEL_25;
  }
  if ((unint64_t)(*(void *)(a1 + 96) - 3) >= 2)
  {
    sub_19D759A28(3, "%s: Invalid data class length", v6);
LABEL_35:
    uint64_t result = *(void *)a1 | 0x100000004000C00;
LABEL_36:
    *(void *)a1 = result;
    return result;
  }
  int v14 = sub_19D757BBC(v13);
  if (v14 != v30)
  {
    sub_19D759A28(3, "%s: Payload type mismatch", v15);
    goto LABEL_35;
  }
LABEL_25:
  uint64_t v16 = *(void *)a1;
  if ((*(unsigned char *)(a1 + 2016) & 0x80) != 0)
  {
    sub_19D760B68(a1 + 400, (uint64_t)off_1EEF8FB30, *(void *)(a1 + 2008), a1);
    if (!v18) {
      goto LABEL_59;
    }
  }
  else
  {
    sub_19D7608B0(v30, a1 + 400, (uint64_t)off_1EEF8FB30, *(void *)(a1 + 2008), a1);
    if (!v17) {
      goto LABEL_59;
    }
  }
  uint64_t v19 = *(void *)a1;
  if ((*(void *)a1 & 0x1000000000000) == 0)
  {
LABEL_54:
    sub_19D759A28(3, "%s: FDR data trust evaluation failed.", "_AMFDRDecodeVerifyData");
    if (!*(void *)a1) {
      *(void *)a1 = 0x100000000000;
    }
    goto LABEL_61;
  }
  uint64_t v20 = *(uint64_t (***)())(a1 + 2008);
  if (v20 == off_1EEF8FB80)
  {
    long long v21 = "%s: Evaluation returned code=0x%016llX, re-evaluate with FDR 2.0 format";
    long long v22 = off_1EEF8FBB8;
    goto LABEL_44;
  }
  if (v20 == off_1EEF8FBB8)
  {
    long long v21 = "%s: Evaluation returned code=0x%016llX, re-evaluate with FDR 1.0 format";
    long long v22 = off_1EEF8FB80;
LABEL_44:
    *(void *)(a1 + 2008) = v22;
    sub_19D759A28(4, v21, "_AMFDRDecodeVerifyData", v19);
  }
  BOOL v27 = *(uint64_t (***)())(a1 + 2008);
  if (v27 != off_1EEF8FB80 && v27 != off_1EEF8FBB8) {
    goto LABEL_54;
  }
  uint64_t v28 = *(void *)a1;
  *(void *)a1 = v16;
  *(unsigned char *)(a1 + 400) = 0;
  if ((*(unsigned char *)(a1 + 2016) & 0x80) != 0) {
    sub_19D760B68(a1 + 400, (uint64_t)off_1EEF8FB30, (uint64_t)v27, a1);
  }
  else {
    sub_19D7608B0(v30, a1 + 400, (uint64_t)off_1EEF8FB30, (uint64_t)v27, a1);
  }
  if (v29)
  {
    sub_19D759A28(4, "%s: Re-evaluation returned code=0x%016llX", "_AMFDRDecodeVerifyData", *(void *)a1);
    *(void *)a1 = v28;
    goto LABEL_54;
  }
  if ((*(unsigned char *)(a1 + 2016) & 0x20) != 0)
  {
    sub_19D759A28(3, "%s: Re-evaluation succeeded but decode options require version2", "_AMFDRDecodeVerifyData");
    *(void *)a1 |= 0x2000000000000uLL;
  }
  else
  {
    sub_19D759A28(4, "%s: Re-evaluation succeeded", "_AMFDRDecodeVerifyData");
  }
LABEL_59:
  if (*(unsigned char *)(a1 + 401)) {
    *(unsigned char *)(a1 + 2032) = 1;
  }
LABEL_61:
  if ((*(unsigned char *)(a1 + 2017) & 0x10) != 0)
  {
    uint64_t result = *(void *)a1;
    if (!*(unsigned char *)(a1 + 376))
    {
      result |= 0x1000000000000000uLL;
      *(void *)a1 = result;
    }
  }
  else
  {
    uint64_t result = *(void *)a1;
  }
  *(void *)(a1 + 1912) = *(void *)(a1 + 536);
  *(void *)(a1 + 1920) = *(void *)(a1 + 544);
  return result;
}

double sub_19D75CE0C(void *a1, _OWORD *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  v19[0] = 0xAAAAAAAAAAAAAAAALL;
  v19[1] = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v23[26] = v4;
  v23[27] = v4;
  v23[24] = v4;
  v23[25] = v4;
  v23[22] = v4;
  v23[23] = v4;
  v23[20] = v4;
  v23[21] = v4;
  v23[18] = v4;
  v23[19] = v4;
  v23[16] = v4;
  v23[17] = v4;
  v23[14] = v4;
  v23[15] = v4;
  uint8_t v23[12] = v4;
  v23[13] = v4;
  v23[10] = v4;
  v23[11] = v4;
  v23[8] = v4;
  v23[9] = v4;
  v23[6] = v4;
  v23[7] = v4;
  v23[4] = v4;
  v23[5] = v4;
  v23[3] = v4;
  v23[1] = v4;
  v23[2] = v4;
  v23[0] = v4;
  unsigned int v18 = 0;
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  int v16 = 0;
  memset(v15, 170, sizeof(v15));
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  unint64_t v20 = 0;
  if (sub_19D757020((uint64_t)(a1 + 3), &v20))
  {
    sub_19D759A28(3, "%s: failed to decode FDR Multi Combined Format", "_AMFDRDecodeGetPayloadSeqAndSetManifestFromMultiCombinedData");
    *a1 |= 0x80uLL;
  }
  else if (v20 == 0x2000000000000010)
  {
    uint64_t v6 = a1[3];
    uint64_t v7 = a1[4];
    if (v6 + v7 >= (unint64_t)(v21 + v22))
    {
      if (v6 + v7 > (unint64_t)(v21 + v22))
      {
        sub_19D759A28(3, "%s: Buffer contains %lu unused bytes", "_AMFDRDecodeGetPayloadSeqAndSetManifestFromMultiCombinedData", v7 - v22);
        *a1 |= 8uLL;
      }
      else
      {
        double v9 = sub_19D760638(v6, v7, (uint64_t)v23);
        if (v8)
        {
          sub_19D759A28(3, "%s: FDR failed to decode multi combined Data img4", v9);
        }
        else if (sub_19D75FDE8((uint64_t)v23, &v17, &v18))
        {
          sub_19D759A28(3, "%s: FDR failed to get manifest from multi combined data", v10);
        }
        else if (sub_19D75FD70((uint64_t)v23, &v16))
        {
          sub_19D759A28(3, "%s: FDR failed to get payload type from multi combined data", v11);
        }
        else
        {
          int v12 = v16;
          if (v12 == sub_19D757BBC((unsigned int *)"mcmb"))
          {
            if (sub_19D75FD00((uint64_t)v23, (uint64_t)v19))
            {
              sub_19D759A28(3, "%s: FDR failed to get payload from multi combined data", v13);
            }
            else if (sub_19D757600((uint64_t)v19, &v15[16], v15) {
                   || *(void *)&v15[16] != 0x2000000000000011)
            }
            {
              sub_19D759A28(3, "%s: payload sequence malformed for multi combined data");
            }
            else
            {
              uint64_t v14 = v18;
              a1[35] = v17;
              a1[36] = v14;
              if (a2)
              {
                double result = *(double *)v15;
                *a2 = *(_OWORD *)v15;
              }
            }
          }
          else
          {
            sub_19D759A28(3, "%s: multi combined payload type is not mcmb");
          }
        }
      }
    }
    else
    {
      sub_19D759A28(3, "%s: item is bigger on the inside", "_AMFDRDecodeGetPayloadSeqAndSetManifestFromMultiCombinedData");
      *a1 |= 4uLL;
    }
  }
  else
  {
    sub_19D759A28(3, "%s: FDR Multi Combined Format unexpected tag: %llu", "_AMFDRDecodeGetPayloadSeqAndSetManifestFromMultiCombinedData", v20);
    *a1 |= 0x10000uLL;
  }
  return result;
}

uint64_t sub_19D75D124(uint64_t a1)
{
  *(void *)&long long v16 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)uint64_t v14 = v2;
  *(_OWORD *)unsigned int __n = v2;
  *(_OWORD *)__s1 = v2;
  long long v13 = v2;
  v18[0] = 0;
  v18[1] = 0;
  unint64_t v17 = 0;
  sub_19D75CE0C((void *)a1, &v16);
  if (v3)
  {
    uint64_t v10 = v3;
    *(void *)a1 |= 0x20000uLL;
    sub_19D759A28(3, "%s: Failed to get payload sequence and set manifest from multi combined data", "_AMFDRDecodeFindDataFromMultiCombined");
    return v10;
  }
  if (*(void *)(a1 + 104) && *(void *)(a1 + 112))
  {
    char v4 = 0;
  }
  else
  {
    if ((*(unsigned char *)(a1 + 2017) & 0x20) == 0)
    {
      sub_19D759A28(3, "%s: no data instance is specified when looking for data in multi combined format", "_AMFDRDecodeFindDataFromMultiCombined");
      return 1;
    }
    char v4 = 1;
  }
  if (sub_19D7576E8((unint64_t *)&v16, &v17)) {
    goto LABEL_36;
  }
  char v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  while (1)
  {
    while (1)
    {
      *(_OWORD *)uint64_t v14 = 0u;
      *(_OWORD *)unsigned int __n = 0u;
      *(_OWORD *)__s1 = 0u;
      long long v13 = 0u;
      if (sub_19D757874(v18, 4u, (uint64_t)&unk_19D779E40, (unint64_t)__s1, 0x40uLL, 0))
      {
        sub_19D759A28(3, "%s: MultiCombinedItem malformed for multi combined data", "_AMFDRDecodeFindDataFromMultiCombined");
        return 0x20000;
      }
      if (__s1[1] != *(void **)(a1 + 96)
        || memcmp(__s1[0], *(const void **)(a1 + 88), (size_t)__s1[1])
        || (v4 & 1) == 0
        && (v14[1] != *(void *)(a1 + 112) || memcmp((const void *)v14[0], *(const void **)(a1 + 104), v14[1]))
        || __n[1] != *(void *)(a1 + 128))
      {
        goto LABEL_12;
      }
      int v8 = *(const void **)(a1 + 120);
      if (__n[0]) {
        break;
      }
      if (!v8) {
        goto LABEL_24;
      }
LABEL_12:
      if (sub_19D7576E8((unint64_t *)&v16, &v17))
      {
        if ((v5 & 1) == 0) {
          goto LABEL_36;
        }
        goto LABEL_29;
      }
    }
    if (!v8 || memcmp((const void *)__n[0], v8, __n[1])) {
      goto LABEL_12;
    }
LABEL_24:
    if ((v4 & 1) == 0)
    {
      sub_19D759A28(5, "%s: found data in multi combined format", "_AMFDRDecodeFindDataFromMultiCombined");
      uint64_t v6 = *((void *)&v13 + 1);
      uint64_t v7 = v13;
LABEL_29:
      uint64_t v10 = 0;
      *(void *)(a1 + 24) = v7;
      *(void *)(a1 + 32) = v6;
      return v10;
    }
    if (v5) {
      break;
    }
    size_t v9 = v14[1];
    *(void *)(a1 + 104) = v14[0];
    *(void *)(a1 + 112) = v9;
    sub_19D759A28(5, "%s: found data in multi combined format", "_AMFDRDecodeFindDataFromMultiCombined");
    uint64_t v6 = *((void *)&v13 + 1);
    uint64_t v7 = v13;
    char v5 = 1;
    if (sub_19D7576E8((unint64_t *)&v16, &v17)) {
      goto LABEL_29;
    }
  }
  sub_19D759A28(3, "%s: found multiple entries that match, uniqueID is required in this case", "_AMFDRDecodeFindDataFromMultiCombined");
  *(void *)a1 |= 0x4000uLL;
LABEL_36:
  sub_19D759A28(3, "%s: cannot find data in multi combined format", "_AMFDRDecodeFindDataFromMultiCombined");
  return 512;
}

uint64_t sub_19D75D3C8(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, char *a5, unsigned int a6, uint64_t a7, unsigned int a8, uint64_t a9, char a10, void *a11)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  v31[0] = a7;
  v31[1] = a8;
  if (sub_19D757B68((uint64_t)v31, (uint64_t)&off_1E5963650))
  {
    memset(v32, 170, 20);
    if (sub_19D761B30(a5, a6, (uint64_t)v32)) {
      return 0xFFFFFFFFLL;
    }
    uint64_t result = sub_19D761C1C(a1, a2, a3, a4, (uint64_t)v32, 20);
    if (!a11) {
      goto LABEL_36;
    }
LABEL_33:
    if (result != 2) {
      goto LABEL_36;
    }
    *a11 |= 0x80000000000000uLL;
    return 0xFFFFFFFFLL;
  }
  if (sub_19D757B68((uint64_t)v31, (uint64_t)&off_1E5963660))
  {
    *(void *)&long long v18 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)int v32 = v18;
    *(_OWORD *)&v32[16] = v18;
    if (sub_19D761B70(a5, a6, (uint64_t)v32)) {
      return 0xFFFFFFFFLL;
    }
    uint64_t result = sub_19D761E6C(a1, a2, a3, a4, (uint64_t)v32, 32);
    if (a11) {
      goto LABEL_33;
    }
    goto LABEL_36;
  }
  if (!sub_19D757B68((uint64_t)v31, (uint64_t)&off_1E5963670))
  {
    if (sub_19D757B68((uint64_t)v31, (uint64_t)&off_1E5963690))
    {
      *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)int v32 = v20;
      *(_OWORD *)&v32[16] = v20;
      unint64_t v29 = 0;
      long long v30 = 0uLL;
      if (!a9)
      {
        sub_19D759A28(3, "%s: publicKeyParam is NULL!!");
        return 0xFFFFFFFFLL;
      }
      if (!a10)
      {
        if (sub_19D757020(a9, &v29)) {
          return 0xFFFFFFFFLL;
        }
        goto LABEL_26;
      }
      if (*(void *)(a9 + 8))
      {
        long long v30 = *(_OWORD *)a9;
LABEL_26:
        if (sub_19D761B70(a5, a6, (uint64_t)v32)) {
          return 0xFFFFFFFFLL;
        }
        size_t v22 = a2;
        uint64_t v24 = *((void *)&v30 + 1);
        uint64_t v23 = v30;
        uint64_t v25 = a4;
        BOOL v26 = (const void *)a1;
        BOOL v27 = (unsigned __int8 *)a3;
        unint64_t v28 = 32;
        goto LABEL_32;
      }
LABEL_38:
      sub_19D759A28(3, "%s: missing public key algorithm parameter OID", "_AMFDRDecodeVerifySignatureDataWithOid");
      return 6;
    }
    if (!sub_19D757B68((uint64_t)v31, (uint64_t)&off_1E59636A0)) {
      return 4;
    }
    *(void *)&long long v21 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v32[16] = v21;
    long long v33 = v21;
    *(_OWORD *)int v32 = v21;
    unint64_t v29 = 0;
    long long v30 = 0uLL;
    if (!a9)
    {
      sub_19D759A28(3, "%s: publicKeyParam is NULL");
      return 0xFFFFFFFFLL;
    }
    if (a10)
    {
      if (!*(void *)(a9 + 8)) {
        goto LABEL_38;
      }
      long long v30 = *(_OWORD *)a9;
    }
    else if (sub_19D757020(a9, &v29))
    {
      return 0xFFFFFFFFLL;
    }
    if (sub_19D761BDC(a5, a6, (uint64_t)v32)) {
      return 0xFFFFFFFFLL;
    }
    size_t v22 = a2;
    uint64_t v24 = *((void *)&v30 + 1);
    uint64_t v23 = v30;
    uint64_t v25 = a4;
    BOOL v26 = (const void *)a1;
    BOOL v27 = (unsigned __int8 *)a3;
    unint64_t v28 = 48;
LABEL_32:
    uint64_t result = sub_19D75D704(v26, v22, v23, v24, v27, v25, v32, v28);
    if (!a11) {
      goto LABEL_36;
    }
    goto LABEL_33;
  }
  *(void *)&long long v19 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v32[16] = v19;
  long long v33 = v19;
  *(_OWORD *)int v32 = v19;
  if (sub_19D761BDC(a5, a6, (uint64_t)v32)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = sub_19D761F10(a1, a2, a3, a4, (uint64_t)v32, 48);
  if (a11) {
    goto LABEL_33;
  }
LABEL_36:
  if (result) {
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t sub_19D75D704(const void *a1, size_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, uint64_t a6, unsigned __int8 *a7, unint64_t a8)
{
  uint64_t result = 1;
  if (a1 && a2)
  {
    if (a2)
    {
      return sub_19D7619BC((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      unint64_t v17 = malloc(a2 + 1);
      if (v17)
      {
        long long v18 = v17;
        *unint64_t v17 = 4;
        memcpy(v17 + 1, a1, a2);
        uint64_t v19 = sub_19D7619BC((uint64_t)v18, a2 + 1, a3, a4, a5, a6, a7, a8);
        free(v18);
        return v19;
      }
      else
      {
        return 2;
      }
    }
  }
  return result;
}

uint64_t sub_19D75D820(unint64_t a1, unint64_t a2, _OWORD *a3)
{
  v20[0] = a1;
  v20[1] = a2;
  *(void *)&long long v14 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v18 = 0uLL;
  unint64_t v17 = 0;
  v19[0] = 0;
  v19[1] = 0;
  long long v15 = 0u;
  long long v16 = 0u;
  if (a3)
  {
    a3[14] = 0uLL;
    a3[15] = 0uLL;
    a3[12] = 0uLL;
    a3[13] = 0uLL;
    a3[10] = 0uLL;
    a3[11] = 0uLL;
    a3[8] = 0uLL;
    a3[9] = 0uLL;
    a3[6] = 0uLL;
    a3[7] = 0uLL;
    a3[4] = 0uLL;
    a3[5] = 0uLL;
    a3[2] = 0uLL;
    a3[3] = 0uLL;
    *a3 = 0uLL;
    a3[1] = 0uLL;
    char v4 = sub_19D7576BC(v20, v19);
    if (v4)
    {
      uint64_t v12 = (uint64_t)v4;
      sub_19D759A28(3, "%s: failed to init sequence");
    }
    else
    {
      uint64_t v5 = 0;
      size_t v6 = 255;
      while (1)
      {
        uint64_t v7 = sub_19D7576E8(v19, &v17);
        if (v7) {
          break;
        }
        long long v14 = v18;
        if (v17 == 0x2000000000000011)
        {
          long long v15 = 0u;
          long long v16 = 0u;
          uint64_t v8 = sub_19D7577A8((uint64_t)&v14, 2u, (uint64_t)&unk_19D7799D0, (unint64_t)&v15, 0x20uLL, 0);
          if (v8)
          {
            uint64_t v12 = v8;
            sub_19D759A28(3, "%s: malformed AttributeTypeAndValue format: %d");
            return v12;
          }
          if ((void)v16)
          {
            long long v14 = v16;
            long long v18 = 0uLL;
            unint64_t v17 = 0;
            uint64_t v9 = sub_19D757020((uint64_t)&v14, &v17);
            if (v9)
            {
              uint64_t v12 = v9;
              sub_19D759A28(3, "%s: malformed attribute: %d");
              return v12;
            }
            if (v17 == 19 || v17 == 12)
            {
              if (v5)
              {
                if (!v6) {
                  return 0;
                }
                *((unsigned char *)a3 + v5++) = 32;
                --v6;
              }
              uint64_t v10 = (char *)a3 + v5;
              uint64_t v11 = *((void *)&v18 + 1);
              if (v6 < *((void *)&v18 + 1))
              {
                memcpy(v10, (const void *)v18, v6);
                return 0;
              }
              v6 -= *((void *)&v18 + 1);
              memcpy(v10, (const void *)v18, *((size_t *)&v18 + 1));
              v5 += v11;
            }
          }
        }
        else
        {
          sub_19D759A28(3, "%s: Attribute must be set container. Found unexpected tag 0x%llu, skipping", "_AMFDRDecodeSequenceString", v17);
        }
      }
      uint64_t v12 = v7;
      if (v7 == 1) {
        return 0;
      }
      sub_19D759A28(3, "%s: failed to decode all sequences: %d");
    }
  }
  else
  {
    uint64_t v12 = 3;
    sub_19D759A28(3, "%s: buffer is NULL");
  }
  return v12;
}

uint64_t sub_19D75DA6C(char *a1, size_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 == 48) {
    return sub_19D761BDC(a1, a2, a3);
  }
  if (a4 == 32) {
    return sub_19D761B70(a1, a2, a3);
  }
  return 1;
}

uint64_t sub_19D75DA8C(uint64_t result)
{
  qword_1E94493A8 = result;
  return result;
}

uint64_t sub_19D75DA98()
{
  return qword_1E94493A8;
}

uint64_t sub_19D75DAA4(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (!a3)
  {
    uint64_t v8 = (void (*)(uint64_t, const char *, ...))sub_19D75DA98();
    if (v8) {
      v8(2, "%s the refcon arg was NULL", "DERReturn _DERDecodeSysConfig3ParseAndPopulateMetadataSequence(DERDecodedInfo *__single, _Bool *__single, void *__single)");
    }
    return 6;
  }
  long long v10 = 0u;
  long long v11 = 0u;
  long long v9 = 0u;
  if ((qword_1E9449258 & 0xFFFC) == 0)
  {
    uint64_t v4 = sub_19D757874((unint64_t *)(result + 8), (unsigned __int16)qword_1E9449258, (uint64_t)&unk_1E9449210, (unint64_t)&v9, 0x30uLL, 0x30uLL);
    if (!v4)
    {
      uint64_t v5 = sub_19D75DBC0((uint64_t)&v9);
      size_t v6 = sub_19D75DBC0((uint64_t)&v11);
      uint64_t v7 = sub_19D75E778(v5, v10, DWORD2(v10), v6);
      sub_19D75F194(a3, (uint64_t)v7);
      sub_19D75E910(v7);
      if (v5) {
        free(v5);
      }
      if (v6) {
        free(v6);
      }
    }
    return v4;
  }
  __break(0x5519u);
  return result;
}

char *sub_19D75DBC0(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = *(const void **)a1;
  if (!*(void *)a1) {
    return 0;
  }
  size_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (char *)malloc(v2 + 1);
  if (v3) {
    unint64_t v4 = (unint64_t)&v3[v2 + 1];
  }
  else {
    unint64_t v4 = 0;
  }
  BOOL v5 = v4 < (unint64_t)v3 || v2 > v4 - (unint64_t)v3;
  if (v5
    || ((size_t v6 = v3, memcpy(v3, v1, v2), v7 = &v6[v2], &v6[v2] >= v6) ? (v8 = (unint64_t)v7 >= v4) : (v8 = 1),
        v8 || ((*uint64_t v7 = 0, v7 + 1 >= v7) ? (v9 = (unint64_t)(v7 + 1) > v4) : (v9 = 1), v9)))
  {
    __break(0x5519u);
    return 0;
  }
  return v6;
}

uint64_t sub_19D75DC58(uint64_t result, unsigned int a2)
{
  v25[0] = result;
  v25[1] = a2;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v20 = 0u;
  if (((unsigned __int16)qword_1E9449328 & 0xFFFEu) < 6uLL)
  {
    if (sub_19D7577A8((uint64_t)v25, (unsigned __int16)qword_1E9449328, (uint64_t)&unk_1E94492B0, (unint64_t)&v20, 0x50uLL, 0x50uLL))return 0; {
    int v2 = 0;
    }
    if (*((void *)&v20 + 1) == 4 && (void)v20) {
      int v2 = *(_DWORD *)v20;
    }
    int v3 = 0;
    if (*((void *)&v21 + 1) == 4 && (void)v21) {
      int v3 = *(_DWORD *)v21;
    }
    if ((sub_19D75E218(v2) & 1) == 0)
    {
      uint64_t v7 = (void (*)(uint64_t, const char *))sub_19D75DA98();
      if (v7) {
        v7(2, "Sysconfig magic 0x%X is not valid");
      }
      return 0;
    }
    unint64_t v4 = sub_19D75EC0C(v2, v3);
    if (!v4)
    {
      BOOL v8 = (void (*)(uint64_t, const char *))sub_19D75DA98();
      if (v8) {
        v8(2, "Unable to allocate sysconfig3vX object. Likely due to an unsupported magic: 0x%X or version: 0x%X");
      }
      return 0;
    }
    BOOL v5 = v4;
    long long v29 = 0uLL;
    *(void *)&long long v30 = 0;
    if (sub_19D757020((uint64_t)&v22, (unint64_t *)&v29))
    {
      size_t v6 = (void (*)(uint64_t, const char *))sub_19D75DA98();
      if (v6) {
        v6(2, "Unable to decode payload with error %d");
      }
LABEL_24:
      sub_19D75EE0C(v5);
      return 0;
    }
    if ((void)v29 != 0x2000000000000011)
    {
      long long v10 = (void (*)(uint64_t, const char *))sub_19D75DA98();
      if (v10) {
        v10(2, "Tag was not the expected Payload tag %llX");
      }
      goto LABEL_24;
    }
    if (sub_19D75E014((uint64_t)&v22, (uint64_t (*)(unint64_t *, char *, uint64_t))sub_19D75E0DC, (uint64_t)v5))goto LABEL_20; {
    long long v29 = 0uLL;
    }
    *(void *)&long long v30 = 0;
    if (sub_19D757020((uint64_t)&v23, (unint64_t *)&v29))
    {
      long long v11 = (void (*)(uint64_t, const char *))sub_19D75DA98();
      if (v11) {
        v11(2, "Unable to decode metadata with error %d");
      }
      goto LABEL_24;
    }
    if ((void)v29 != 0x2000000000000011)
    {
      long long v13 = (void (*)(uint64_t, const char *))sub_19D75DA98();
      if (v13) {
        v13(2, "Tag was not the expected metadata tag %llX");
      }
      goto LABEL_24;
    }
    if (sub_19D75E014((uint64_t)&v23, (uint64_t (*)(unint64_t *, char *, uint64_t))sub_19D75DAA4, (uint64_t)v5))
    {
LABEL_20:
      BOOL v9 = (void (*)(uint64_t, const char *))sub_19D75DA98();
      if (v9) {
        v9(2, "Decode sequence error: %d");
      }
      goto LABEL_24;
    }
    memset(v32, 0, sizeof(v32));
    uint64_t result = sub_19D757020((uint64_t)&v24, v32);
    if (result)
    {
      uint64_t v12 = (void (*)(uint64_t, const char *))sub_19D75DA98();
      if (v12) {
        v12(2, "Unable to decode manifest with error %d");
      }
      goto LABEL_24;
    }
    if (v32[0] != 0x2000000000000010)
    {
      unint64_t v17 = (void (*)(uint64_t, const char *))sub_19D75DA98();
      if (v17) {
        v17(2, "Tag was not the expected manifest tag %llX");
      }
      goto LABEL_24;
    }
    long long v30 = 0u;
    long long v31 = 0u;
    long long v29 = 0u;
    if ((qword_1E94492A8 & 0xFFFC) == 0)
    {
      int v14 = sub_19D7577A8((uint64_t)&v24, (unsigned __int16)qword_1E94492A8, (uint64_t)&unk_1E9449260, (unint64_t)&v29, 0x30uLL, 0x30uLL);
      if (v14)
      {
        int v15 = v14;
        long long v16 = (void (*)(uint64_t, const char *, ...))sub_19D75DA98();
        if (v16) {
          v16(2, "Decode manifest sequence error: %d", v15);
        }
      }
      else
      {
        v28[0] = v29;
        v28[1] = DWORD2(v29);
        v27[0] = v30;
        v27[1] = DWORD2(v30);
        v26[0] = v31;
        v26[1] = DWORD2(v31);
        if (DWORD2(v30) | DWORD2(v29) | DWORD2(v31))
        {
          int v18 = sub_19D75EE98((uint64_t)v5);
          uint64_t v19 = (int *)sub_19D75E97C(v18, v28, v27, v26);
          sub_19D75ED38((uint64_t)v5, v19);
          sub_19D75EB9C(v19);
        }
      }
      return (uint64_t)v5;
    }
  }
  __break(0x5519u);
  return result;
}

uint64_t sub_19D75E014(uint64_t a1, uint64_t (*a2)(unint64_t *, char *, uint64_t), uint64_t a3)
{
  unint64_t v6 = 0;
  v7[0] = 0;
  v7[1] = 0;
  uint64_t result = sub_19D757020(a1, &v6);
  if (!result)
  {
    if (v6 - 0x2000000000000012 >= 0xFFFFFFFFFFFFFFFELL)
    {
      v10[0] = 0;
      v10[1] = 0;
      uint64_t result = (uint64_t)sub_19D7576BC(v7, v10);
      if (!result)
      {
        memset(v9, 0, sizeof(v9));
        char v8 = 0;
        while (1)
        {
          LODWORD(result) = sub_19D7576E8(v10, v9);
          if (result) {
            break;
          }
          LODWORD(result) = a2(v9, &v8, a3);
          if (result) {
            break;
          }
          if (v8) {
            return 0;
          }
        }
        if (result <= 1) {
          return 0;
        }
        else {
          return result;
        }
      }
    }
    else
    {
      return 2;
    }
  }
  return result;
}

uint64_t sub_19D75E0DC(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return 6;
  }
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v10 = 0u;
  if (((unsigned __int16)qword_1E9449208 & 0xFFFEu) < 6uLL)
  {
    uint64_t v4 = sub_19D757874((unint64_t *)(result + 8), (unsigned __int16)qword_1E9449208, (uint64_t)&unk_1E9449190, (unint64_t)&v10, 0x50uLL, 0x50uLL);
    if (!v4)
    {
      BOOL v9 = 0;
      uint64_t v4 = sub_19D7574D4((unsigned __int8 **)&v14, 0, &v9);
      if (!v4)
      {
        int v5 = 0;
        if (*((void *)&v10 + 1) == 4 && (void)v10) {
          int v5 = *(_DWORD *)v10;
        }
        unint64_t v6 = sub_19D75DBC0((uint64_t)&v11);
        uint64_t v7 = sub_19D75DBC0((uint64_t)&v13);
        char v8 = sub_19D75E2E0(v5, v6, (const void *)v12, DWORD2(v12), v7, v9);
        sub_19D75F0BC(a3, (uint64_t)v8);
        sub_19D75E664(v8);
        if (v6) {
          free(v6);
        }
        if (v7) {
          free(v7);
        }
      }
    }
    return v4;
  }
  __break(0x5519u);
  return result;
}

uint64_t sub_19D75E218(int a1)
{
  uint64_t result = 1;
  if (a1 <= 1682138726)
  {
    if (a1 > 1634758773)
    {
      if (a1 == 1634758774) {
        return result;
      }
      int v3 = 1648584295;
    }
    else
    {
      if (a1 == 809723495) {
        return result;
      }
      int v3 = 1279485543;
    }
    goto LABEL_13;
  }
  if (a1 <= 1715693158)
  {
    if (a1 == 1682138727) {
      return result;
    }
    int v3 = 1698915943;
    goto LABEL_13;
  }
  if (a1 != 1715693159 && a1 != 1936023916)
  {
    int v3 = 1950574183;
LABEL_13:
    if (a1 != v3) {
      return 0;
    }
  }
  return result;
}

_OWORD *sub_19D75E2E0(int a1, const char *a2, const void *a3, size_t a4, const char *a5, int a6)
{
  if (!a1)
  {
    long long v12 = (void (*)(uint64_t, const char *))sub_19D75DA98();
    if (v12) {
      v12(2, "%s key was invalid");
    }
    return 0;
  }
  if (a6) {
    int v9 = 4;
  }
  else {
    int v9 = 0;
  }
  int v10 = (a3 != 0) | (2 * (a5 != 0)) | v9;
  if (!v10)
  {
    long long v13 = (void (*)(uint64_t, const char *))sub_19D75DA98();
    if (v13) {
      v13(2, "%s one of data, string, or deleted must be provided");
    }
    return 0;
  }
  if ((v10 & (v10 - 1)) != 0)
  {
    long long v11 = (void (*)(uint64_t, const char *))sub_19D75DA98();
    if (v11) {
      v11(2, "%s data, string and deleted are mutually exclusive. Caller provided parameters [%s%s%s ]");
    }
    return 0;
  }
  if (a3 && !a4)
  {
    unint64_t v17 = (void (*)(uint64_t, const char *))sub_19D75DA98();
    if (v17) {
      v17(2, "%s data was 0 length");
    }
    return 0;
  }
  uint64_t result = malloc(0x30uLL);
  if (result) {
    unint64_t v20 = (unint64_t)(result + 3);
  }
  else {
    unint64_t v20 = 0;
  }
  if (v20 - (unint64_t)result >= 0x30)
  {
    int v18 = result;
    result[1] = 0u;
    result[2] = 0u;
    _OWORD *result = 0u;
    if ((unint64_t)(result + 3) <= v20)
    {
      *(_DWORD *)uint64_t result = a1;
      if (!a2 || !*a2) {
        a2 = ".";
      }
      *((void *)result + 1) = sub_19D75E500(a2, 0x1000000uLL);
      if (!a3) {
        goto LABEL_31;
      }
      uint64_t result = sub_19D75E5BC(a3, a4);
      if (v21 >= (unint64_t)result && (uint64_t)(v21 - (void)result) >= a4)
      {
        *((void *)v18 + 3) = result;
        *((_DWORD *)v18 + 8) = a4;
LABEL_31:
        if (a5) {
          *((void *)v18 + 2) = sub_19D75E500(a5, 0x1000000uLL);
        }
        *((unsigned char *)v18 + 4) = a6 << 31 >> 31;
        *((void *)v18 + 5) = 0;
        return v18;
      }
    }
  }
  __break(0x5519u);
  return result;
}

char *sub_19D75E500(const char *a1, size_t a2)
{
  if (!a1) {
    goto LABEL_11;
  }
  size_t v3 = strnlen(a1, a2);
  uint64_t v4 = (char *)malloc(v3 + 1);
  strlcpy(v4, a1, v3 + 1);
  int v5 = &v4[v3];
  if (v4 > &v4[v3]) {
    goto LABEL_10;
  }
  unint64_t v6 = (unint64_t)&v4[v3 + 1];
  if (!v4) {
    unint64_t v6 = 0;
  }
  BOOL v7 = v5 + 1 < v5 || (unint64_t)(v5 + 1) > v6;
  if (v7 || *v5)
  {
LABEL_10:
    __break(0x5519u);
LABEL_11:
    char v8 = (void (*)(uint64_t, const char *, ...))sub_19D75DA98();
    if (v8) {
      v8(2, "%s source string was NULL", "char *__single __terminated_by(0)_allocAndCopyString(const char *__single __terminated_by(0), size_t)");
    }
    return 0;
  }
  return v4;
}

void *sub_19D75E5BC(const void *a1, size_t __size)
{
  if (__size)
  {
    size_t v3 = __size;
    uint64_t result = malloc(__size);
    if (result) {
      unint64_t v5 = (unint64_t)result + v3;
    }
    else {
      unint64_t v5 = 0;
    }
    if (v5 < (unint64_t)result || v5 - (unint64_t)result < v3)
    {
      __break(0x5519u);
      return result;
    }
    BOOL v7 = result;
    memcpy(result, a1, v3);
  }
  else
  {
    char v8 = (void (*)(uint64_t, const char *, ...))sub_19D75DA98();
    if (v8) {
      v8(2, "%s data was zero length", "uint8_t *__indexable_allocAndCopyData(const uint8_t *__single __counted_by(dataLength), uint32_t)");
    }
    return 0;
  }
  return v7;
}

void sub_19D75E664(void *a1)
{
  if (a1)
  {
    *(_DWORD *)a1 = 0;
    int v2 = (void *)a1[1];
    if (v2)
    {
      free(v2);
      a1[1] = 0;
    }
    size_t v3 = (void *)a1[3];
    if (v3)
    {
      free(v3);
      a1[3] = 0;
      *((_DWORD *)a1 + 8) = 0;
    }
    uint64_t v4 = (void *)a1[2];
    if (v4) {
      free(v4);
    }
    free(a1);
  }
}

unsigned int *sub_19D75E6D4(unsigned int *result)
{
  if (result) {
    return (unsigned int *)*result;
  }
  return result;
}

BOOL sub_19D75E6E0(BOOL result)
{
  if (result) {
    return *(unsigned char *)(result + 4) != 0;
  }
  return result;
}

uint64_t sub_19D75E6F4(uint64_t result)
{
  if (result) {
    return *(void *)(result + 16);
  }
  return result;
}

uint64_t sub_19D75E700(uint64_t a1, uint64_t a2)
{
  if (a1 && a2)
  {
    uint64_t v2 = *(void *)(a1 + 24);
    if (v2)
    {
      int v3 = *(_DWORD *)(a1 + 32);
      *(void *)a2 = v2;
      *(_DWORD *)(a2 + 8) = v3;
      return 1;
    }
  }
  else
  {
    uint64_t result = sub_19D75DA98();
    if (!result) {
      return result;
    }
    ((void (*)(uint64_t, const char *, ...))result)(2, "%s invalid arguments. Either entry or data was NULL", "_Bool sysConfig3PayloadEntryGetData(struct __SysConfig3PayloadEntry *__single, SysConfigData *__single)");
  }
  return 0;
}

uint64_t sub_19D75E76C(uint64_t result)
{
  if (result) {
    return *(void *)(result + 40);
  }
  return result;
}

void *sub_19D75E778(const char *a1, unint64_t a2, size_t a3, const char *a4)
{
  if (!a1)
  {
    int v9 = (void (*)(uint64_t, const char *))sub_19D75DA98();
    if (v9) {
      v9(2, "%s key must be non-NULL");
    }
    return 0;
  }
  if (a2 && a4)
  {
    char v8 = (void (*)(uint64_t, const char *))sub_19D75DA98();
    if (v8) {
      v8(2, "%s data and string are mutually exclusive");
    }
    return 0;
  }
  if (!(a2 | (unint64_t)a4))
  {
    long long v11 = (void (*)(uint64_t, const char *))sub_19D75DA98();
    if (v11) {
      v11(2, "%s either data or string must be non-null");
    }
    return 0;
  }
  if (a2 && !a3)
  {
    int v10 = (void (*)(uint64_t, const char *))sub_19D75DA98();
    if (v10) {
      v10(2, "%s data cannot be length zero");
    }
    return 0;
  }
  uint64_t result = malloc(0x28uLL);
  long long v14 = (char *)(result + 5);
  if (result) {
    int v15 = (char *)(result + 5);
  }
  else {
    int v15 = 0;
  }
  if ((unint64_t)(v15 - (char *)result) >= 0x28)
  {
    long long v12 = result;
    result[4] = 0;
    *(_OWORD *)uint64_t result = 0u;
    *((_OWORD *)result + 1) = 0u;
    uint64_t result = sub_19D75E500(a1, 0x100uLL);
    if (v14 <= v15)
    {
      *long long v12 = result;
      if (!a2)
      {
LABEL_26:
        if (a4) {
          v12[1] = sub_19D75E500(a4, 0x1000000uLL);
        }
        unint64_t v12[4] = 0;
        return v12;
      }
      uint64_t result = sub_19D75E5BC((const void *)a2, a3);
      if (v16 >= (unint64_t)result && (uint64_t)(v16 - (void)result) >= a3)
      {
        unint64_t v12[2] = result;
        *((_DWORD *)v12 + 6) = a3;
        goto LABEL_26;
      }
    }
  }
  __break(0x5519u);
  return result;
}

void sub_19D75E910(void *a1)
{
  if (a1)
  {
    uint64_t v2 = (void *)*a1;
    if (v2)
    {
      free(v2);
      *a1 = 0;
    }
    int v3 = (void *)a1[2];
    if (v3)
    {
      free(v3);
      a1[2] = 0;
      *((_DWORD *)a1 + 6) = 0;
    }
    uint64_t v4 = (void *)a1[1];
    if (v4) {
      free(v4);
    }
    free(a1);
  }
}

void *sub_19D75E97C(int a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  if (!a2 || !a3 || !a4)
  {
    long long v11 = (void (*)(uint64_t, const char *, ...))sub_19D75DA98();
    if (v11) {
      v11(2, "%s one of the hmacs were NULL. payload ptr: %p metdata ptr: %p full ptr: %p", "struct __SysConfig3ManifestEntry *__singleallocSysConfig3Manifest(SysConfig3Version, const SysConfigData *__single, const SysConfigData *__single, const SysConfigData *__single)", a2, a3, a4);
    }
    return 0;
  }
  uint64_t result = malloc(0x38uLL);
  if (result) {
    unint64_t v9 = (unint64_t)(result + 7);
  }
  else {
    unint64_t v9 = 0;
  }
  if (v9 - (unint64_t)result >= 0x38)
  {
    int v10 = result;
    result[6] = 0;
    *((_OWORD *)result + 1) = 0u;
    *((_OWORD *)result + 2) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    if ((unint64_t)(result + 7) <= v9)
    {
      *(_DWORD *)uint64_t result = a1;
      if (*(void *)a2 && a2[2]) {
        sub_19D75EA9C((uint64_t)a2, (uint64_t)(result + 1));
      }
      if (*(void *)a3 && a3[2]) {
        sub_19D75EA9C((uint64_t)a3, (uint64_t)(v10 + 3));
      }
      if (*(void *)a4)
      {
        if (a4[2]) {
          sub_19D75EA9C((uint64_t)a4, (uint64_t)(v10 + 5));
        }
      }
      return v10;
    }
  }
  __break(0x5519u);
  return result;
}

char *sub_19D75EA9C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v4 = *(unsigned int *)(a1 + 8);
    if (*(void *)a1) {
      BOOL v5 = v4 == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (v5)
    {
      *(void *)a2 = 0;
      *(_DWORD *)(a2 + 8) = 0;
      uint64_t result = (char *)sub_19D75DA98();
      if (result) {
        return (char *)((uint64_t (*)(uint64_t, const char *))result)(2, "%s sourceData was 0 length");
      }
    }
    else
    {
      uint64_t result = (char *)malloc(*(unsigned int *)(a1 + 8));
      BOOL v7 = &result[v4];
      if (!result) {
        BOOL v7 = 0;
      }
      BOOL v8 = v7 >= result;
      uint64_t v9 = v7 - result;
      BOOL v10 = !v8 || v9 < v4;
      if (v10
        || (*(void *)a2 = result,
            *(_DWORD *)(a2 + 8) = v4,
            size_t v11 = *(unsigned int *)(a1 + 8),
            v11 > v4))
      {
        __break(0x5519u);
      }
      else
      {
        long long v12 = *(const void **)a1;
        return (char *)memcpy(result, v12, v11);
      }
    }
  }
  else
  {
    uint64_t result = (char *)sub_19D75DA98();
    if (result) {
      return (char *)((uint64_t (*)(uint64_t, const char *))result)(2, "%s sourceData or destData was NULL");
    }
  }
  return result;
}

void sub_19D75EB9C(void *a1)
{
  if (a1)
  {
    uint64_t v2 = (void *)a1[1];
    if (v2)
    {
      free(v2);
      a1[1] = 0;
      *((_DWORD *)a1 + 4) = 0;
    }
    int v3 = (void *)a1[3];
    if (v3)
    {
      free(v3);
      a1[3] = 0;
      *((_DWORD *)a1 + 8) = 0;
    }
    uint64_t v4 = (void *)a1[5];
    if (v4) {
      free(v4);
    }
    free(a1);
  }
}

_OWORD *sub_19D75EC0C(int a1, int a2)
{
  if ((sub_19D75E218(a1) & 1) == 0)
  {
    BOOL v8 = (void (*)(uint64_t, const char *))sub_19D75DA98();
    if (v8) {
      v8(2, "%s invalid magic provided 0x%08X");
    }
    return 0;
  }
  if ((a2 - 196609) >= 3)
  {
    uint64_t v9 = (void (*)(uint64_t, const char *))sub_19D75DA98();
    if (v9) {
      v9(2, "%s invalid version provided 0x%08X");
    }
    return 0;
  }
  uint64_t result = malloc(0x30uLL);
  if (result) {
    unint64_t v5 = (unint64_t)(result + 3);
  }
  else {
    unint64_t v5 = 0;
  }
  if (v5 - (unint64_t)result >= 0x30)
  {
    uint64_t v6 = (uint64_t)result;
    result[1] = 0u;
    result[2] = 0u;
    _OWORD *result = 0u;
    if ((unint64_t)(result + 3) <= v5)
    {
      *(_DWORD *)uint64_t result = a1;
      *((_DWORD *)result + 1) = a2;
      *((void *)result + 2) = 0;
      *((void *)result + 3) = 0;
      *((void *)result + 1) = 0;
      char v11 = 0;
      v10[0] = &v11;
      v10[1] = 1;
      BOOL v7 = (int *)sub_19D75E97C(a2, v10, v10, v10);
      sub_19D75ED38(v6, v7);
      sub_19D75EB9C(v7);
      return (_OWORD *)v6;
    }
  }
  __break(0x5519u);
  return result;
}

void (*sub_19D75ED38(uint64_t a1, int *a2))(uint64_t, const char *)
{
  if (!a1 || !a2)
  {
    uint64_t result = (void (*)(uint64_t, const char *))sub_19D75DA98();
    if (!result) {
      return result;
    }
    result(2, "%s sysconfig (0x%p) or manifest (0x%p) argument was null");
    return 0;
  }
  if (*(_DWORD *)(a1 + 4) == *a2)
  {
    sub_19D75EB9C(*(void **)(a1 + 24));
    *(void *)(a1 + 24) = 0;
    uint64_t v4 = sub_19D75E97C(*a2, a2 + 2, a2 + 6, a2 + 10);
    *(void *)(a1 + 24) = v4;
    return (void (*)(uint64_t, const char *))(v4 != 0);
  }
  uint64_t result = (void (*)(uint64_t, const char *))sub_19D75DA98();
  if (result)
  {
    result(2, "%s sysconfig version (0X%08X) did not match manifest version (0X%08X");
    return 0;
  }
  return result;
}

void sub_19D75EE0C(void *a1)
{
  if (a1 && sub_19D75E218(*(_DWORD *)a1))
  {
    *a1 = 0;
    while (1)
    {
      uint64_t v2 = (void *)a1[1];
      if (!v2) {
        break;
      }
      a1[1] = v2[5];
      sub_19D75E664(v2);
    }
    while (1)
    {
      int v3 = (void *)a1[2];
      if (!v3) {
        break;
      }
      a1[2] = v3[4];
      sub_19D75E910(v3);
    }
    uint64_t v4 = (void *)a1[3];
    if (v4) {
      sub_19D75EB9C(v4);
    }
    free(a1);
  }
}

uint64_t sub_19D75EE98(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 4);
  }
  return result;
}

uint64_t sub_19D75EEA4(uint64_t result)
{
  if (result) {
    return *(void *)(result + 8);
  }
  return result;
}

void *sub_19D75EEB0(uint64_t a1, int a2)
{
  if (!a1)
  {
    BOOL v10 = (void (*)(uint64_t, const char *, ...))sub_19D75DA98();
    if (v10) {
      v10(2, "%s invalid argument. sysconfig cannot be NULL", "_Bool _sysConfig3DeletePayloadEntryForKey(struct __SysConfig3 *__single, uint32_t)");
    }
    return (void *)(a1 != 0);
  }
  uint64_t v4 = (void *)(a1 + 8);
  uint64_t result = *(void **)(a1 + 8);
  if (!result) {
    return (void *)(a1 != 0);
  }
  uint64_t v6 = 0;
  unint64_t v7 = 0;
  BOOL v8 = 0;
  while (1)
  {
    if (*(_DWORD *)result != a2)
    {
      unint64_t v7 = (unint64_t)(result + 6);
      uint64_t v9 = (void **)(result + 5);
      BOOL v8 = result;
      uint64_t v6 = result;
      goto LABEL_11;
    }
    if (!v6)
    {
      void *v4 = result[5];
      sub_19D75E664(result);
      uint64_t v9 = (void **)(a1 + 8);
      goto LABEL_11;
    }
    if ((unint64_t)(v6 + 6) > v7 || v8 > v6) {
      break;
    }
    v6[5] = result[5];
    uint64_t v9 = (void **)(v6 + 5);
    sub_19D75E664(result);
LABEL_11:
    uint64_t result = *v9;
    if (!*v9) {
      return (void *)(a1 != 0);
    }
  }
  __break(0x5519u);
  return result;
}

uint64_t sub_19D75EFAC(uint64_t a1, char *__s2)
{
  if (a1) {
    BOOL v2 = __s2 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  uint64_t v3 = !v2;
  if (v2)
  {
    long long v12 = (void (*)(uint64_t, const char *, ...))sub_19D75DA98();
    if (v12) {
      v12(2, "%s invalid argument. sysconfig and key cannot be NULL", "_Bool _sysConfig3DeleteMetadataEntryForKey(struct __SysConfig3 *__single, const char *__single __terminated_by(0))");
    }
    return v3;
  }
  uint64_t v4 = (unint64_t *)(a1 + 16);
  unint64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    return v3;
  }
  unint64_t v7 = 0;
  unint64_t v8 = 0;
  unint64_t v9 = 0;
  while (1)
  {
    uint64_t result = strncmp(*(const char **)v5, __s2, 0x100uLL);
    if (!result) {
      break;
    }
    unint64_t v8 = v5 + 40;
    char v11 = (unint64_t *)(v5 + 32);
    unint64_t v9 = v5;
    unint64_t v7 = v5;
LABEL_17:
    unint64_t v5 = *v11;
    if (!*v11) {
      return v3;
    }
  }
  if (!v7)
  {
    unint64_t *v4 = *(void *)(v5 + 32);
    sub_19D75E910((void *)v5);
    char v11 = v4;
    goto LABEL_17;
  }
  if (v7 + 40 <= v8 && v9 <= v7)
  {
    *(void *)(v7 + 32) = *(void *)(v5 + 32);
    char v11 = (unint64_t *)(v7 + 32);
    sub_19D75E910((void *)v5);
    goto LABEL_17;
  }
  __break(0x5519u);
  return result;
}

uint64_t sub_19D75F0BC(uint64_t a1, uint64_t a2)
{
  if (a1 && a2)
  {
    uint64_t result = (uint64_t)sub_19D75EEB0(a1, *(_DWORD *)a2);
    if (result)
    {
      uint64_t v5 = *(void *)(a1 + 8);
      if (v5)
      {
        do
        {
          uint64_t v6 = v5;
          uint64_t v5 = *(void *)(v5 + 40);
        }
        while (v5);
        unint64_t v7 = sub_19D75E2E0(*(_DWORD *)a2, *(const char **)(a2 + 8), *(const void **)(a2 + 24), *(unsigned int *)(a2 + 32), *(const char **)(a2 + 16), *(unsigned char *)(a2 + 4) != 0);
        *(void *)(v6 + 40) = v7;
      }
      else
      {
        unint64_t v7 = sub_19D75E2E0(*(_DWORD *)a2, *(const char **)(a2 + 8), *(const void **)(a2 + 24), *(unsigned int *)(a2 + 32), *(const char **)(a2 + 16), *(unsigned char *)(a2 + 4) != 0);
        *(void *)(a1 + 8) = v7;
      }
      *((void *)v7 + 5) = 0;
      return 1;
    }
  }
  else
  {
    uint64_t result = sub_19D75DA98();
    if (result)
    {
      ((void (*)(uint64_t, const char *, ...))result)(2, "%s invalid argument. sysconfig and etnry cannot be NULL", "_Bool _sysConfig3AddPayloadEntry(struct __SysConfig3 *__single, struct __SysConfig3PayloadEntry *__single)");
      return 0;
    }
  }
  return result;
}

uint64_t sub_19D75F194(uint64_t a1, uint64_t a2)
{
  if (a1 && a2)
  {
    uint64_t result = sub_19D75EFAC(a1, *(char **)a2);
    if (result)
    {
      uint64_t v5 = *(void *)(a1 + 16);
      if (v5)
      {
        do
        {
          uint64_t v6 = v5;
          uint64_t v5 = *(void *)(v5 + 32);
        }
        while (v5);
        unint64_t v7 = sub_19D75E778(*(const char **)a2, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24), *(const char **)(a2 + 8));
        *(void *)(v6 + 32) = v7;
      }
      else
      {
        unint64_t v7 = sub_19D75E778(*(const char **)a2, *(void *)(a2 + 16), *(unsigned int *)(a2 + 24), *(const char **)(a2 + 8));
        *(void *)(a1 + 16) = v7;
      }
      v7[4] = 0;
      return 1;
    }
  }
  else
  {
    uint64_t result = sub_19D75DA98();
    if (result)
    {
      ((void (*)(uint64_t, const char *, ...))result)(2, "%s invalid argument. sysconfig and entry cannot be NULL", "_Bool _sysConfig3AddMetadataEntry(struct __SysConfig3 *__single, struct __SysConfig3MetadataEntry *__single)");
      return 0;
    }
  }
  return result;
}

double sub_19D75F24C(unint64_t *a1, uint64_t a2, _OWORD *a3)
{
  unint64_t v7 = 0;
  long long v8 = 0uLL;
  while (!sub_19D7576E8(a1, &v7))
  {
    if (v7 == a2)
    {
      double result = *(double *)&v8;
      *a3 = v8;
      return result;
    }
  }
  return result;
}

double sub_19D75F2B0(unint64_t *a1, uint64_t a2, _OWORD *a3)
{
  v6[0] = 0;
  v6[1] = 0;
  if (!sub_19D7576BC(a1, v6)) {
    return sub_19D75F24C(v6, a2, a3);
  }
  return result;
}

uint64_t sub_19D75F2FC(uint64_t a1, unsigned int a2)
{
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 < 4) {
    return 0xFFFFFFFFLL;
  }
  if (v2 != 4) {
    return 1;
  }
  unsigned int v5 = 0;
  if (sub_19D757514((char **)a1, &v5)) {
    return 4294967294;
  }
  if (v5 < a2) {
    return 0xFFFFFFFFLL;
  }
  return v5 > a2;
}

uint64_t sub_19D75F374(void *a1, unint64_t a2)
{
  uint64_t result = 6;
  if (a1)
  {
    if (a2)
    {
      unint64_t v6 = 0;
      unint64_t v7 = 0;
      uint64_t v8 = 0;
      uint64_t result = sub_19D757020((uint64_t)a1, &v6);
      if (!result)
      {
        if (v6 == 0x2000000000000010)
        {
          uint64_t v5 = a1[1];
          if (__CFADD__(*a1, v5) || __CFADD__(v7, v8))
          {
            __break(0x5513u);
          }
          else if (*a1 + v5 == v7 + v8)
          {
            uint64_t result = sub_19D757874(&v7, 4u, (uint64_t)&unk_19D77A068, a2, 0x40uLL, 0);
            if (!result) {
              return 2 * (sub_19D75F2FC(a2, 0x494D4734u) != 0);
            }
          }
          else
          {
            return 7;
          }
        }
        else
        {
          return 2;
        }
      }
    }
  }
  return result;
}

uint64_t sub_19D75F458(unint64_t *a1, char **a2)
{
  unsigned int v5 = 2;
  uint64_t result = 6;
  if (a1)
  {
    if (a2)
    {
      uint64_t result = sub_19D757874(a1, 2u, (uint64_t)&unk_19D77A380, (unint64_t)a2, 0x20uLL, 0);
      if (!result)
      {
        uint64_t result = sub_19D757514(a2, &v5);
        if (!result)
        {
          if (v5 <= 1) {
            return 0;
          }
          else {
            return 6;
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_19D75F4DC(uint64_t a1, unint64_t a2)
{
  uint64_t result = 6;
  if (a1)
  {
    if (a2)
    {
      uint64_t result = sub_19D7577A8(a1, 7u, (uint64_t)&unk_19D77A158, a2, 0xA0uLL, 0);
      if (!result)
      {
        if (sub_19D75F2FC(a2, 0x494D3450u))
        {
          return 2;
        }
        else if (!*(void *)(a2 + 80) {
               || (long long v7 = 0u, v8 = 0u,
        }
                            uint64_t result = sub_19D75F458((unint64_t *)(a2 + 80), (char **)&v7),
                            !result))
        {
          uint64_t v6 = *(void *)(a2 + 96);
          uint64_t v5 = a2 + 96;
          if (!v6) {
            return 0;
          }
          long long v7 = 0u;
          long long v8 = 0u;
          uint64_t result = sub_19D75F59C(v5, (unint64_t)&v7);
          if (!result) {
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_19D75F59C(uint64_t result, unint64_t a2)
{
  if (result)
  {
    if (!a2) {
      return 6;
    }
    if (*(void *)result && *(void *)(result + 8))
    {
      uint64_t result = sub_19D7577A8(result, 2u, (uint64_t)&unk_19D77A350, a2, 0x20uLL, 0);
      if (result) {
        return result;
      }
      if (sub_19D75F2FC(a2, 0x50415950u)) {
        return 2;
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_19D75F620(uint64_t a1, unint64_t a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t result = 6;
  if (a1 && a2)
  {
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    uint64_t result = sub_19D75F4DC(a1, (unint64_t)&v11);
    if (result)
    {
      uint64_t result = sub_19D7577A8(a1, 6u, (uint64_t)&unk_19D77A0C8, a2, 0x90uLL, 0);
      if (!result)
      {
        if (sub_19D75F2FC(a2, 0x494D3450u))
        {
          return 2;
        }
        else
        {
          uint64_t v6 = *(void *)(a2 + 80);
          uint64_t v5 = (unint64_t *)(a2 + 80);
          if (!v6) {
            return 0;
          }
          memset(v10, 0, sizeof(v10));
          uint64_t result = sub_19D75F458(v5, (char **)v10);
          if (!result) {
            return 0;
          }
        }
      }
    }
    else
    {
      long long v7 = v12;
      *(_OWORD *)a2 = v11;
      *(_OWORD *)(a2 + 16) = v7;
      long long v8 = v14;
      *(_OWORD *)(a2 + 32) = v13;
      *(_OWORD *)(a2 + 48) = v8;
      long long v9 = v16;
      *(_OWORD *)(a2 + 64) = v15;
      *(_OWORD *)(a2 + 80) = v9;
    }
  }
  return result;
}

uint64_t sub_19D75F72C(void *a1, unint64_t a2)
{
  return sub_19D75F748(a1, 5uLL, (uint64_t)&unk_19D77A200, a2, 0x494D344Du);
}

uint64_t sub_19D75F748(void *a1, unint64_t a2, uint64_t a3, unint64_t a4, unsigned int a5)
{
  uint64_t result = 6;
  if (a1 && a4)
  {
    if (!*a1 || !a1[1]) {
      return 0;
    }
    if (a2 >= 0x10000)
    {
      __break(0x5507u);
      return result;
    }
    uint64_t result = sub_19D7577A8((uint64_t)a1, (unsigned __int16)a2, a3, a4, 0xC0uLL, 0);
    if (!result)
    {
      if (sub_19D75F2FC(a4, a5)) {
        return 2;
      }
      unsigned int v9 = 0;
      uint64_t result = sub_19D757514((char **)(a4 + 16), &v9);
      if (result) {
        return result;
      }
      if (v9 > 2) {
        return 2;
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_19D75F7F8(void *a1, unint64_t a2)
{
  return sub_19D75F748(a1, 3uLL, (uint64_t)&unk_19D77A2D8, a2, 0x494D344Du);
}

uint64_t sub_19D75F814(void *a1, unint64_t a2)
{
  return sub_19D75F748(a1, 4uLL, (uint64_t)&unk_19D77A278, a2, 0x494D3443u);
}

uint64_t sub_19D75F830(void *a1, unint64_t a2)
{
  return sub_19D75F748(a1, 3uLL, (uint64_t)&unk_19D77A2D8, a2, 0x494D3443u);
}

uint64_t sub_19D75F84C(uint64_t result, unint64_t a2)
{
  if (result)
  {
    if (!a2) {
      return 6;
    }
    if (*(void *)result && *(void *)(result + 8))
    {
      uint64_t result = sub_19D7577A8(result, 2u, (uint64_t)&unk_19D77A320, a2, 0x20uLL, 0);
      if (result) {
        return result;
      }
      if (sub_19D75F2FC(a2, 0x494D3452u)) {
        return 2;
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_19D75F8D0(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = 6;
  if (a1)
  {
    if (a3)
    {
      unint64_t v14 = 0;
      long long v15 = 0uLL;
      long long v13 = 0uLL;
      uint64_t v11 = 0;
      unint64_t v12 = 0;
      uint64_t v9 = 0;
      unint64_t v10 = 0;
      unsigned int v8 = 0;
      uint64_t result = sub_19D757600((uint64_t)a1, &v9, &v10);
      if (!result)
      {
        if (v9 != 0x2000000000000010) {
          return 2;
        }
        uint64_t result = sub_19D7576E8(&v10, &v14);
        if (result) {
          return result;
        }
        if (v14 != 22) {
          return 2;
        }
        uint64_t result = sub_19D757514((char **)&v15, &v8);
        if (result) {
          return result;
        }
        if ((v8 | 0xE000000000000000) != a2) {
          return 2;
        }
        *(_OWORD *)a3 = v15;
        uint64_t result = sub_19D7576E8(&v10, &v12);
        if (result) {
          return result;
        }
        *(void *)(a3 + 40) = v12;
        *(_OWORD *)(a3 + 24) = v13;
        uint64_t result = sub_19D7576E8(&v10, &v12);
        if (result != 1) {
          return 2;
        }
        uint64_t v7 = a1[1];
        if (__CFADD__(*a1, v7))
        {
          __break(0x5513u);
        }
        else if (v11 == *a1 + v7)
        {
          return 0;
        }
        else
        {
          return 7;
        }
      }
    }
  }
  return result;
}

uint64_t sub_19D75FA00(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unsigned int v8 = 0;
  v9[0] = 0;
  int v9[2] = 0;
  v9[1] = 22;
  unint64_t v9[3] = 24;
  long long v10 = a3;
  uint64_t result = sub_19D7577A8(a1, 2u, (uint64_t)v9, a4, 0x30uLL, 0);
  if (!result)
  {
    uint64_t result = sub_19D757514((char **)a4, &v8);
    if (!result)
    {
      if ((v8 | 0xE000000000000000) == a2)
      {
        uint64_t result = 0;
        *(void *)(a4 + 16) = a2 | 0xE000000000000000;
        *(void *)(a4 + 40) = a3;
      }
      else
      {
        return 2;
      }
    }
  }
  return result;
}

void sub_19D75FAD4(unint64_t *a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  long long v8 = 0uLL;
  sub_19D75F24C(a1, a2, &v8);
  if (!v7) {
    sub_19D75FA00((uint64_t)&v8, a2, a3, a4);
  }
}

void sub_19D75FB30(unint64_t *a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  v7[0] = 0;
  v7[1] = 0;
  if (!sub_19D7576BC(a1, v7)) {
    sub_19D75FAD4(v7, a2, a3, a4);
  }
}

void sub_19D75FB8C(uint64_t a1, unint64_t a2, unint64_t a3)
{
}

void sub_19D75FB98(uint64_t a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  int v11 = 0;
  if (a1)
  {
    if (a2 | a3)
    {
      unint64_t v14 = 0;
      v15[0] = 0;
      v15[1] = 0;
      memset(v13, 0, sizeof(v13));
      memset(v12, 0, sizeof(v12));
      if (!sub_19D757020(a1 + 264, &v14)
        && v14 == 0x2000000000000011
        && !sub_19D757514((char **)(a1 + 248), &v11))
      {
        unint64_t v8 = v11 == 2 ? 0x2000000000000010 : 0x2000000000000011;
        sub_19D75FB30(v15, a4 | 0xE000000000000000, v8, (unint64_t)v13);
        if (!v9)
        {
          if (a2) {
            *(_OWORD *)a2 = *(_OWORD *)((char *)&v13[1] + 8);
          }
          sub_19D75FB30((unint64_t *)&v13[1] + 1, 0xE00000004D414E50, 0x2000000000000011uLL, (unint64_t)v12);
          if (a3)
          {
            if (!v10) {
              *(_OWORD *)a3 = *(_OWORD *)((char *)&v12[1] + 8);
            }
          }
        }
      }
    }
  }
}

uint64_t sub_19D75FCC8(uint64_t a1, BOOL *a2)
{
  uint64_t result = 6;
  if (a1 && a2)
  {
    if (*(void *)(a1 + 136)) {
      BOOL v4 = *(void *)(a1 + 144) != 0;
    }
    else {
      BOOL v4 = 0;
    }
    uint64_t result = 0;
    *a2 = v4;
  }
  return result;
}

uint64_t sub_19D75FD00(uint64_t a1, uint64_t a2)
{
  if (a1 && a2)
  {
    BOOL v5 = 0;
    uint64_t result = sub_19D75FCC8(a1, &v5);
    if (!result)
    {
      if (v5)
      {
        uint64_t result = 0;
        *(_OWORD *)a2 = *(_OWORD *)(a1 + 136);
        return result;
      }
      uint64_t result = 1;
    }
    goto LABEL_9;
  }
  uint64_t result = 6;
  if (a2)
  {
LABEL_9:
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  return result;
}

uint64_t sub_19D75FD70(uint64_t a1, _DWORD *a2)
{
  BOOL v5 = 0;
  uint64_t result = 6;
  if (!a1 || !a2 || (uint64_t result = sub_19D75FCC8(a1, &v5), result))
  {
LABEL_6:
    if (!a2) {
      return result;
    }
    goto LABEL_7;
  }
  if (v5)
  {
    uint64_t result = sub_19D757514((char **)(a1 + 104), a2);
    goto LABEL_6;
  }
  uint64_t result = 1;
  if (!a2) {
    return result;
  }
LABEL_7:
  if (result) {
    *a2 = 0;
  }
  return result;
}

uint64_t sub_19D75FDE8(uint64_t a1, void *a2, _DWORD *a3)
{
  uint64_t result = 6;
  if (a1 && a2 && a3)
  {
    uint64_t v5 = *(void *)(a1 + 24);
    *a2 = v5;
    int v6 = *(_DWORD *)(a1 + 32);
    *a3 = v6;
    if (v5) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    int v8 = v7;
    return (v8 << 31 >> 31);
  }
  return result;
}

uint64_t sub_19D75FE20(void *a1, unsigned int a2, char *a3)
{
  uint64_t v3 = 6;
  if (a2 <= 1 && a1 && a3)
  {
    if (a2 == 1)
    {
      if (!a1[55] || !a1[56]) {
        goto LABEL_11;
      }
    }
    else if (!a1[33] || !a1[34])
    {
LABEL_11:
      char v4 = 0;
      goto LABEL_12;
    }
    char v4 = 1;
LABEL_12:
    uint64_t v3 = 0;
    *a3 = v4;
  }
  return v3;
}

uint64_t sub_19D75FE80(uint64_t a1, unsigned int a2, uint64_t a3, BOOL *a4)
{
  memset(v8, 0, sizeof(v8));
  uint64_t v4 = 6;
  if (a1)
  {
    if (a4)
    {
      sub_19D760020(a1, a2, a3 | 0xE000000000000000, 1uLL, v8);
      uint64_t v4 = v6;
      if (!v6) {
        return sub_19D757498((unsigned __int8 **)&v8[1] + 1, a4);
      }
    }
  }
  return v4;
}

double sub_19D75FEF0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, _OWORD *a5)
{
  v14[0] = 0;
  v14[1] = 0;
  double result = 0.0;
  memset(v13, 0, sizeof(v13));
  if (a1)
  {
    if (a5)
    {
      sub_19D75FB8C(a1, (unint64_t)v14, 0);
      if (v10
        || (sub_19D75FB30(v14, a2 | 0xE000000000000000, 0x2000000000000011uLL, (unint64_t)v13), v11)
        || (sub_19D75FB30((unint64_t *)&v13[1] + 1, a3, a4, (unint64_t)a5), v12))
      {
        double result = 0.0;
        a5[1] = 0u;
        a5[2] = 0u;
        *a5 = 0u;
      }
    }
  }
  return result;
}

void sub_19D75FFA4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  long long v10 = 0u;
  long long v11 = 0u;
  long long v9 = 0u;
  if (a1 && a4 && a5)
  {
    sub_19D75FEF0(a1, a2, a3 | 0xE000000000000000, 4uLL, &v9);
    if (v7)
    {
      uint64_t v8 = 0;
      *a4 = 0;
    }
    else
    {
      uint64_t v8 = v11;
      *a4 = *((void *)&v10 + 1);
    }
    *a5 = v8;
  }
}

double sub_19D760020(uint64_t a1, unsigned int a2, uint64_t a3, unint64_t a4, _OWORD *a5)
{
  *(_OWORD *)long long v13 = 0uLL;
  if (a2 <= 1 && a1 && a5)
  {
    char v14 = 0;
    if (!sub_19D75FE20((void *)a1, a2, &v14) && v14)
    {
      if (a2)
      {
        *(_OWORD *)long long v13 = *(_OWORD *)(a1 + 440);
        goto LABEL_9;
      }
      sub_19D75FB8C(a1, 0, (unint64_t)v13);
      if (!v10)
      {
LABEL_9:
        sub_19D75FB30(v13, a3, a4, (unint64_t)a5);
        if (!v12) {
          return result;
        }
      }
    }
    double result = 0.0;
    a5[1] = 0u;
    a5[2] = 0u;
    *a5 = 0u;
  }
  return result;
}

uint64_t sub_19D7600F0(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  long long v8 = 0u;
  long long v9 = 0u;
  long long v7 = 0u;
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  v6[0] = *(void *)a1;
  v6[1] = v4;
  uint64_t result = sub_19D75F8D0(v6, a2 | 0xE000000000000000, (uint64_t)&v7);
  if (!result)
  {
    if (*((void *)&v9 + 1) != 2)
    {
      uint64_t result = 2;
      if (!a3) {
        return result;
      }
      goto LABEL_6;
    }
    if (!a3) {
      return 6;
    }
    uint64_t result = sub_19D757598((char **)&v8 + 1, a3);
  }
  if (!a3) {
    return result;
  }
LABEL_6:
  if (result) {
    *a3 = 0;
  }
  return result;
}

uint64_t sub_19D760184(uint64_t a1, uint64_t a2, BOOL *a3)
{
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  v6[0] = *(void *)a1;
  v6[1] = v4;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  uint64_t result = sub_19D75F8D0(v6, a2 | 0xE000000000000000, (uint64_t)&v7);
  if (!result)
  {
    if (*((void *)&v9 + 1) == 1)
    {
      if (a3) {
        return sub_19D757498((unsigned __int8 **)&v8 + 1, a3);
      }
      else {
        return 6;
      }
    }
    else
    {
      return 2;
    }
  }
  return result;
}

uint64_t sub_19D760208(uint64_t *a1, uint64_t a2, void *a3, _DWORD *a4)
{
  long long v13 = 0u;
  long long v14 = 0u;
  long long v12 = 0u;
  uint64_t result = 6;
  if (a3 && a4)
  {
    uint64_t v8 = *a1;
    uint64_t v9 = *((unsigned int *)a1 + 2);
    v11[0] = v8;
    v11[1] = v9;
    uint64_t result = sub_19D75F8D0(v11, a2 | 0xE000000000000000, (uint64_t)&v12);
    if (!result)
    {
      if (*((void *)&v14 + 1) == 4)
      {
        uint64_t result = 0;
        *a3 = *((void *)&v13 + 1);
        int v10 = v14;
LABEL_6:
        *a4 = v10;
        return result;
      }
      uint64_t result = 2;
    }
    int v10 = 0;
    *a3 = 0;
    goto LABEL_6;
  }
  return result;
}

void sub_19D7602A0(void *a1)
{
}

void sub_19D7602A8(void *a1, _OWORD *a2)
{
  v21[0] = 0;
  v21[1] = 0;
  v20[0] = 0;
  v20[1] = 0;
  uint64_t v19 = 0;
  long long v18 = 0uLL;
  size_t __n = 0;
  uint64_t v17 = 0;
  uint64_t v14 = 0;
  __s1 = 0;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  memset(v9, 0, sizeof(v9));
  long long __s2 = 0uLL;
  long long v7 = 0uLL;
  if (a1 && a1[40] && !sub_19D757600((uint64_t)(a1 + 39), &v19, v21) && v19 == 0x2000000000000011)
  {
    while (1)
    {
      if (sub_19D7576E8(v21, (unint64_t *)&v17)) {
        return;
      }
      uint64_t v4 = (long long *)(a1 + 7);
      switch(v17)
      {
        case 0xE00000004D414E50:
LABEL_11:
          long long v7 = *v4;
          if (sub_19D75F8D0(&v18, v17, (uint64_t)&v11)
            || *((void *)&v13 + 1) != 0x2000000000000011
            || sub_19D7576BC((unint64_t *)&v12 + 1, v20))
          {
            return;
          }
          while (1)
          {
            int v5 = sub_19D7576E8(v20, (unint64_t *)&v14);
            if (v5) {
              break;
            }
            if (sub_19D75F8D0(&__s1, v14, (uint64_t)v9)) {
              return;
            }
            sub_19D75F2B0((unint64_t *)&v7, v14, &__s2);
            if (*((void *)&v10 + 1) <= 4uLL && ((1 << SBYTE8(v10)) & 0x16) != 0)
            {
              if (v6) {
                return;
              }
              if (__n != *((void *)&__s2 + 1)) {
                return;
              }
              int v6 = memcmp(__s1, (const void *)__s2, __n);
              if (v6) {
                return;
              }
            }
            else if (*((void *)&v10 + 1) != 0xA000000000000000)
            {
              if (*((void *)&v10 + 1) != 0xA000000000000001 || v6 != 1) {
                return;
              }
              int v6 = 0;
            }
            if (v6) {
              return;
            }
          }
          if (v5 != 1) {
            return;
          }
          break;
        case 0xE00000006D616E78:
          if (a2) {
            *a2 = v18;
          }
          break;
        case 0xE00000004F424A50:
          uint64_t v4 = (long long *)(a1 + 9);
          if (a1[9]) {
            goto LABEL_11;
          }
          uint64_t v4 = (long long *)(a1 + 9);
          if (a1[10]) {
            goto LABEL_11;
          }
          break;
        default:
          return;
      }
    }
  }
}

uint64_t sub_19D760510(unint64_t *a1, uint64_t a2, uint64_t (*a3)(unint64_t, uint64_t *, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v15 = 0;
  unint64_t v16 = 0;
  unint64_t v14 = 0;
  v13[0] = 0;
  v13[1] = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v10 = 0;
  memset(v8, 0, sizeof(v8));
  long long v9 = 0u;
  if (!a3) {
    return 6;
  }
  uint64_t result = (uint64_t)sub_19D7576BC(a1, v13);
  if (!result)
  {
    while (1)
    {
      uint64_t result = sub_19D7576E8(v13, &v14);
      if (result == 1) {
        return 0;
      }
      if (result) {
        return result;
      }
      uint64_t result = sub_19D75F8D0(&v15, v14, (uint64_t)v8);
      if (result) {
        return result;
      }
      uint64_t result = 2;
      if (*((void *)&v9 + 1) > 0x16uLL
        || ((1 << SBYTE8(v9)) & 0x400016) == 0
        || !(v14 >> 62)
        || (v14 & 0x2000000000000000) == 0)
      {
        return result;
      }
      if (HIDWORD(v16)) {
        break;
      }
      uint64_t v10 = v15;
      LODWORD(v11) = v16;
      uint64_t v12 = *((void *)&v9 + 1);
      uint64_t result = a3(v14, &v10, a2, a4);
      if (result) {
        return result;
      }
    }
    return 7;
  }
  return result;
}

double sub_19D760638(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    if (a3)
    {
      v9[0] = a1;
      v9[1] = a2;
      long long v7 = 0u;
      long long v8 = 0u;
      long long v5 = 0u;
      long long v6 = 0u;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)(a3 + 64) = 0u;
      *(_OWORD *)(a3 + 80) = 0u;
      *(_OWORD *)(a3 + 96) = 0u;
      *(_OWORD *)(a3 + 112) = 0u;
      *(_OWORD *)(a3 + 128) = 0u;
      *(_OWORD *)(a3 + 144) = 0u;
      *(_OWORD *)(a3 + 160) = 0u;
      *(_OWORD *)(a3 + 176) = 0u;
      *(_OWORD *)(a3 + 192) = 0u;
      *(_OWORD *)(a3 + 208) = 0u;
      *(_OWORD *)(a3 + 224) = 0u;
      *(_OWORD *)(a3 + 240) = 0u;
      *(_OWORD *)(a3 + 256) = 0u;
      *(_OWORD *)(a3 + 272) = 0u;
      *(_OWORD *)(a3 + 288) = 0u;
      *(_OWORD *)(a3 + 304) = 0u;
      *(_OWORD *)(a3 + 320) = 0u;
      *(_OWORD *)(a3 + 336) = 0u;
      *(_OWORD *)(a3 + 352) = 0u;
      *(_OWORD *)(a3 + 368) = 0u;
      *(_OWORD *)(a3 + 384) = 0u;
      *(_OWORD *)(a3 + 400) = 0u;
      *(_OWORD *)(a3 + 416) = 0u;
      *(_OWORD *)(a3 + 432) = 0u;
      *(void *)(a3 + 448) = 0;
      if (!sub_19D75F374(v9, (unint64_t)&v5)
        && !sub_19D75F620((uint64_t)&v6, a3 + 88)
        && !sub_19D75F72C(&v7, a3 + 232)
        && !sub_19D75F84C((uint64_t)&v8, a3 + 424))
      {
        *(_OWORD *)(a3 + 8) = v6;
        double result = *(double *)&v7;
        *(_OWORD *)(a3 + 24) = v7;
      }
    }
  }
  return result;
}

uint64_t sub_19D760728(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19D76073C(a1, a2, 1, a3, 1229796429);
}

uint64_t sub_19D76073C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  uint64_t result = 6;
  if (a1 && a4)
  {
    uint64_t v15 = a1;
    uint64_t v16 = a2;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 80) = 0u;
    *(_OWORD *)(a4 + 96) = 0u;
    *(_OWORD *)(a4 + 112) = 0u;
    *(_OWORD *)(a4 + 128) = 0u;
    *(_OWORD *)(a4 + 144) = 0u;
    *(_OWORD *)(a4 + 160) = 0u;
    *(_OWORD *)(a4 + 176) = 0u;
    *(_OWORD *)(a4 + 192) = 0u;
    *(_OWORD *)(a4 + 208) = 0u;
    *(_OWORD *)(a4 + 224) = 0u;
    *(_OWORD *)(a4 + 240) = 0u;
    *(_OWORD *)(a4 + 256) = 0u;
    *(_OWORD *)(a4 + 272) = 0u;
    *(_OWORD *)(a4 + 288) = 0u;
    *(_OWORD *)(a4 + 304) = 0u;
    *(_OWORD *)(a4 + 320) = 0u;
    *(_OWORD *)(a4 + 336) = 0u;
    *(_OWORD *)(a4 + 352) = 0u;
    *(_OWORD *)(a4 + 368) = 0u;
    *(_OWORD *)(a4 + 384) = 0u;
    *(_OWORD *)(a4 + 400) = 0u;
    *(_OWORD *)(a4 + 416) = 0u;
    *(_OWORD *)(a4 + 432) = 0u;
    *(void *)(a4 + 448) = 0;
    if (a5 == 1229796419)
    {
      unint64_t v10 = a4 + 232;
      if (a3) {
        uint64_t result = sub_19D75F814(&v15, v10);
      }
      else {
        uint64_t result = sub_19D75F830(&v15, v10);
      }
    }
    else
    {
      if (a5 != 1229796429) {
        return 2;
      }
      unint64_t v9 = a4 + 232;
      if (a3) {
        uint64_t result = sub_19D75F72C(&v15, v9);
      }
      else {
        uint64_t result = sub_19D75F7F8(&v15, v9);
      }
    }
    if (!result)
    {
      if (*(void *)(a4 + 264))
      {
        unint64_t v12 = 0;
        uint64_t v13 = 0;
        uint64_t v14 = 0;
        uint64_t v15 = a1;
        uint64_t v16 = a2;
        uint64_t result = sub_19D757028((uint64_t)&v15, &v12, 0);
        if (!result)
        {
          *(void *)(a4 + 24) = a1;
          uint64_t v11 = v14 + v13 - a1;
          if (__CFADD__(v14, v13 - a1))
          {
            __break(0x5500u);
          }
          else
          {
            *(void *)(a4 + 32) = v11;
            if (v11 == a2) {
              return 0;
            }
            else {
              return 7;
            }
          }
        }
      }
      else
      {
        return 3;
      }
    }
  }
  return result;
}

void sub_19D76087C(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[1] = 0;
  void v5[2] = 0;
  v5[0] = a3;
  sub_19D7608BC(a1, a2, (uint64_t)v5, a4, 0, a5);
}

void sub_19D7608B0(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

void sub_19D7608BC(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  memset(v24, 0, sizeof(v24));
  if (a2)
  {
    if (a3)
    {
      BOOL v21 = 0;
      if (a4)
      {
        if (*(void *)a3)
        {
          if (*(void *)a4)
          {
            if (*(void *)(a4 + 24))
            {
              if (*(void *)(a4 + 8))
              {
                if (*(void *)(a4 + 16))
                {
                  unint64_t v9 = *(void **)(a4 + 32);
                  if (v9)
                  {
                    if (*(void *)(a2 + 24) && *v9 <= 0x30uLL && !(*(unsigned int (**)(void))a4)())
                    {
                      *(unsigned char *)(a2 + 1) = 1;
                      uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 8);
                      if (v13
                        && (uint64_t v14 = (const void *)v13(a2, a6)) != 0
                        && !memcmp((const void *)(a2 + 328), v14, **(void **)(a4 + 32)))
                      {
                        int v15 = 0;
                      }
                      else
                      {
                        if ((*(unsigned int (**)(void, void, uint64_t *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 8))(*(void *)(a2 + 296), *(void *)(a2 + 304), &v22, &v23, a2 + 312, a2 + 320, a4, a6)|| **(void **)(a4 + 32) > 0x30uLL|| (*(unsigned int (**)(void, void, uint64_t))a4)(*(void *)(a2 + 264), *(void *)(a2 + 272), a2 + 376)|| (*(unsigned int (**)(uint64_t, uint64_t, void, void, uint64_t, void, uint64_t, uint64_t))(a4 + 16))(v22, v23, *(void *)(a2 + 280), *(void *)(a2 + 288), a2 + 376,
                               **(void **)(a4 + 32),
                               a4,
                               a6))
                        {
                          return;
                        }
                        int v15 = 1;
                      }
                      sub_19D75FB8C(a2, a2 + 40, a2 + 56);
                      if (v16) {
                        return;
                      }
                      if ((a5 & 1) == 0)
                      {
                        uint64_t v17 = *(unsigned int (**)(unint64_t *, unint64_t, uint64_t, _OWORD *, uint64_t))(a3 + 16);
                        unint64_t v18 = a1 | 0xE000000000000000;
                        uint64_t v19 = (unint64_t *)(a2 + 40);
                        if (v17)
                        {
                          if (v17(v19, v18, 0x2000000000000011, v24, a6)) {
                            return;
                          }
                        }
                        else
                        {
                          sub_19D75FB30(v19, v18, 0x2000000000000011uLL, (unint64_t)v24);
                          if (v20) {
                            return;
                          }
                        }
                        *(_OWORD *)(a2 + 72) = *(_OWORD *)((char *)&v24[1] + 8);
                      }
                      if ((!v15 || !(*(unsigned int (**)(uint64_t, uint64_t))(a4 + 24))(a2, a6))
                        && **(void **)(a4 + 32) <= 0x30uLL
                        && !sub_19D75FCC8(a2, &v21))
                      {
                        if (v21)
                        {
                          if ((*(unsigned int (**)(void, void, uint64_t, void, uint64_t))a4)(*(void *)(a2 + 8), *(void *)(a2 + 16), a2 + 184, **(void **)(a4 + 32), a4))
                          {
                            return;
                          }
                          *(unsigned char *)a2 = 1;
                        }
                        if (!sub_19D760510((unint64_t *)(a2 + 56), 0, *(uint64_t (**)(unint64_t, uint64_t *, uint64_t, uint64_t))a3, a6)&& (a5 & 1) == 0)
                        {
                          sub_19D760510((unint64_t *)(a2 + 72), 1, *(uint64_t (**)(unint64_t, uint64_t *, uint64_t, uint64_t))a3, a6);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_19D760B68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_19D760B84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v24[2] = *MEMORY[0x1E4F143B8];
  if (a5 != 4096 && a5 != 3072) {
    return 0xFFFFFFFFLL;
  }
  v24[0] = 0;
  v24[1] = 0;
  unint64_t v9 = (unint64_t)(a5 + 63) >> 6;
  MEMORY[0x1F4188790]();
  uint64_t v11 = (unint64_t *)((char *)&v21 - v10);
  bzero((char *)&v21 - v10, v10);
  unint64_t *v11 = v9;
  uint64_t v12 = *(unsigned int *)(a1 + 8);
  v23[0] = *(void *)a1;
  v23[1] = v12;
  long long v21 = 0u;
  long long v22 = 0u;
  uint64_t result = sub_19D7577A8((uint64_t)v23, 2u, (uint64_t)&unk_19D779AC8, (unint64_t)&v21, 0x20uLL, 0x20uLL);
  if (result) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v14 = *((void *)&v21 + 1);
  int v15 = (unsigned __int8 *)v21;
  long long v16 = v22;
  if (*((void *)&v21 + 1))
  {
    while (!*v15)
    {
      if (v15 == (unsigned __int8 *)-1) {
        __break(0x5513u);
      }
      ++v15;
      if (!--v14)
      {
        int v15 = (unsigned __int8 *)(v21 + *((void *)&v21 + 1));
        break;
      }
    }
  }
  if (v14 >= 0xFFFFFFFFFFFFFFF8)
  {
    __break(0x5500u);
    return result;
  }
  unint64_t v17 = (v14 + 7) >> 3;
  if (v17 > *v11) {
    return 0xFFFFFFFFLL;
  }
  unint64_t *v11 = v17;
  if (sub_19D76CC00(v11, *((unint64_t *)&v16 + 1), (unsigned __int8 *)v16, v14, v15)) {
    return 0xFFFFFFFFLL;
  }
  if (sub_19D76A2E0) {
    BOOL v18 = byte_19D77B250 == 0;
  }
  else {
    BOOL v18 = 1;
  }
  if (!v18)
  {
    int v20 = sub_19D76A2E0(v11, a2, *(void *)(a3 + 8), *(char **)a3, *(void *)(a4 + 8), *(unsigned __int8 **)a4, v24);
    if (!v20 && !sub_19D76709C(16, byte_19D77B250, (char *)v24)) {
      return 0;
    }
    return 0xFFFFFFFFLL;
  }
  LOBYTE(v21) = 0;
  int v19 = sub_19D76A0D8(v11, a2, *(void *)(a3 + 8), *(char **)a3, *(void *)(a4 + 8), *(unsigned __int8 **)a4, &v21);
  uint64_t result = 0xFFFFFFFFLL;
  if (!v19 && (_BYTE)v21) {
    return 0;
  }
  return result;
}

uint64_t sub_19D760D98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v13[0] = a1;
  v13[1] = a2;
  v12[0] = a3;
  v12[1] = a4;
  v11[0] = a5;
  v11[1] = a6;
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if (!a2) {
    return 0xFFFFFFFFLL;
  }
  if (!a3) {
    return 0xFFFFFFFFLL;
  }
  if (!a4) {
    return 0xFFFFFFFFLL;
  }
  if (!a5) {
    return 0xFFFFFFFFLL;
  }
  if (!a6) {
    return 0xFFFFFFFFLL;
  }
  if (!a7) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v7 = *(void *)(a7 + 32);
  if (!v7) {
    return 0xFFFFFFFFLL;
  }
  long long v8 = *(void ***)(v7 + 16);
  if (!v8) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v9 = *v8;
  if (!v9) {
    return 0xFFFFFFFFLL;
  }
  if (*v9 != a6) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = sub_19D760B84((uint64_t)v13, v9[4], (uint64_t)v11, (uint64_t)v12, 4096);
  if (result) {
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t sub_19D760E30(unint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, uint64_t a7)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a1)
  {
    unsigned int v9 = a2;
    if (a2)
    {
      if (a3 && a4)
      {
        bzero(&v28, 0x2F0uLL);
        v26[0] = a1;
        v26[1] = v9;
        v27[0] = &unk_19D77A3B0;
        v27[1] = 1215;
        if (!sub_19D761780(v26, (uint64_t)v27, 3u)
          && !sub_19D761118((uint64_t)v27, 3u, (uint64_t)&v29, (uint64_t)v31, (uint64_t)v34, (uint64_t)v37))
        {
          long long v24 = a6;
          uint64_t v15 = 0;
          long long v16 = (const void **)v32;
          unint64_t v17 = &v30;
          BOOL v18 = (const void **)v32;
          while (1)
          {
            int v19 = &v26[20 * v15];
            size_t v20 = v19[37];
            long long v21 = *v18;
            v18 += 20;
            if ((const void *)v20 != v21) {
              break;
            }
            if (memcmp((const void *)v19[36], *(v16 - 1), v20)) {
              break;
            }
            uint64_t result = sub_19D761380(&v34[v15], v17, a7);
            if (result) {
              break;
            }
            v17 += 6;
            ++v15;
            long long v16 = v18;
            if (v15 == 2)
            {
              long long v25 = 0uLL;
              if ((unint64_t)v31 > 0xFFFFFFFFFFFFFF5FLL)
              {
LABEL_34:
                __break(0x5513u);
                return result;
              }
              v42[0] = 0;
              v42[1] = 0;
              unint64_t v40 = 0;
              v41[0] = 0;
              v41[1] = 0;
              if (sub_19D7576BC(v33, v42)) {
                return 0xFFFFFFFFLL;
              }
LABEL_14:
              if (!sub_19D7576E8(v42, &v40) && v40 == 0x2000000000000011)
              {
                v47[0] = 0;
                v47[1] = 0;
                unint64_t v45 = 0;
                v46[0] = 0;
                v46[1] = 0;
                long long v43 = 0u;
                long long v44 = 0u;
                if (!sub_19D7576BC(v41, v47))
                {
                  do
                  {
                    int v22 = sub_19D7576E8(v47, &v45);
                    if (v22)
                    {
                      if (v22 == 1) {
                        goto LABEL_14;
                      }
                      return 0xFFFFFFFFLL;
                    }
                    if (v45 != 0x2000000000000010
                      || sub_19D757874(v46, 2u, (uint64_t)&unk_19D7799D0, (unint64_t)&v43, 0x20uLL, 0x20uLL))
                    {
                      return 0xFFFFFFFFLL;
                    }
                  }
                  while (!sub_19D757B68((uint64_t)&off_1E5963710, (uint64_t)&v43));
                  long long v25 = v44;
                  uint64_t result = sub_19D757B68((uint64_t)&off_1E5963810, (uint64_t)&v25);
                  if (!result) {
                    return 0xFFFFFFFFLL;
                  }
                  if ((unint64_t)v34 > 0xFFFFFFFFFFFFFFDFLL) {
                    goto LABEL_34;
                  }
                  *a3 = v35;
                  *a4 = v36;
                  if ((unint64_t)v37 > 0xFFFFFFFFFFFFFFDFLL) {
                    goto LABEL_34;
                  }
                  if (!v38) {
                    return 0;
                  }
                  uint64_t v23 = v39;
                  if (!v39) {
                    return 0;
                  }
                  uint64_t result = 0;
                  if (a5)
                  {
                    if (v24)
                    {
                      uint64_t result = 0;
                      *a5 = v38;
                      void *v24 = v23;
                    }
                  }
                  return result;
                }
              }
              return 0xFFFFFFFFLL;
            }
          }
        }
        return 0xFFFFFFFFLL;
      }
    }
  }
  return result;
}

uint64_t sub_19D761118(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!a2) {
    return 0;
  }
  uint64_t v8 = 0;
  uint64_t v15 = result;
  unint64_t v18 = ~result;
  unint64_t v17 = ~a3;
  unint64_t v14 = ~a4;
  unint64_t v13 = ~a5;
  unint64_t v11 = ~a6;
  uint64_t v10 = a2;
  while (1)
  {
    unint64_t v9 = 16 * v8;
    if (16 * v8 > v18 || 48 * v8 > v17) {
      break;
    }
    uint64_t result = sub_19D7577A8(v15 + 16 * v8, 3u, (uint64_t)&unk_19D779888, a3 + 48 * v8, 0x30uLL, 0x30uLL);
    if (result) {
      return 0xFFFFFFFFLL;
    }
    if (160 * v8 > v14) {
      break;
    }
    uint64_t result = sub_19D7577A8(a3 + 48 * v8, 0xAu, (uint64_t)&unk_19D7798D8, a4 + 160 * v8, 0xA0uLL, 0xA0uLL);
    if (result) {
      return 0xFFFFFFFFLL;
    }
    if (v9 > v13) {
      break;
    }
    long long v22 = 0u;
    long long v23 = 0u;
    char v21 = 0;
    long long v19 = 0u;
    long long v20 = 0u;
    if (sub_19D757874((unint64_t *)(a4 + 160 * v8 + 96), 2u, (uint64_t)&unk_19D779A90, (unint64_t)&v22, 0x20uLL, 0x20uLL))return 0xFFFFFFFFLL; {
    if (sub_19D757874((unint64_t *)&v22, 2u, (uint64_t)&unk_19D779A58, (unint64_t)&v19, 0x20uLL, 0x20uLL))return 0xFFFFFFFFLL;
    }
    uint64_t result = sub_19D757B68((uint64_t)&v19, (uint64_t)&off_1E5963640);
    if (!result) {
      return 0xFFFFFFFFLL;
    }
    if (*((void *)&v20 + 1))
    {
      if (*((void *)&v20 + 1) != 2 || *(unsigned char *)v20 != 5) {
        return 0xFFFFFFFFLL;
      }
      if ((void)v20 == -1) {
        break;
      }
      if (*(unsigned char *)(v20 + 1)) {
        return 0xFFFFFFFFLL;
      }
    }
    uint64_t result = sub_19D7573D8((uint64_t)&v23, (unint64_t *)(a5 + 16 * v8), &v21);
    if (result || v21) {
      return 0xFFFFFFFFLL;
    }
    if (v9 > v11) {
      break;
    }
    uint64_t result = sub_19D76185C(a4 + 160 * v8, (void *)(a6 + 16 * v8));
    if (result) {
      return 0xFFFFFFFFLL;
    }
    if (++v8 == v10) {
      return 0;
    }
  }
  __break(0x5513u);
  return result;
}

uint64_t sub_19D761380(void *a1, void *a2, uint64_t a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if (!a2) {
    return 0xFFFFFFFFLL;
  }
  if (!a3) {
    return 0xFFFFFFFFLL;
  }
  long long v11 = 0u;
  long long v12 = 0u;
  char v10 = 0;
  memset(v13, 0, sizeof(v13));
  unint64_t v8 = 0;
  uint64_t v9 = 0;
  long long v5 = *(void **)(a3 + 32);
  if (!v5
    || !v5[2]
    || !*(void *)a3
    || !*(void *)(a3 + 40)
    || *v5 > 0x30uLL
    || sub_19D757874(a2 + 2, 2u, (uint64_t)&unk_19D779A58, (unint64_t)&v11, 0x20uLL, 0x20uLL))
  {
    return 0xFFFFFFFFLL;
  }
  if (*((void *)&v12 + 1))
  {
    uint64_t result = sub_19D757B68((uint64_t)&v11, (uint64_t)&xmmword_1E5963680);
    if ((result & 1) == 0)
    {
      if (*((void *)&v12 + 1) != 2 || *(unsigned char *)v12 != 5) {
        return 0xFFFFFFFFLL;
      }
      if ((void)v12 == -1)
      {
        __break(0x5513u);
        return result;
      }
      if (*(unsigned char *)(v12 + 1)) {
        return 0xFFFFFFFFLL;
      }
    }
  }
  if (!sub_19D757B68((uint64_t)&v11, *(void *)(a3 + 40))) {
    return 0xFFFFFFFFLL;
  }
  if ((*(unsigned int (**)(void, void, _OWORD *, void, uint64_t))a3)(*a2, a2[1], v13, **(void **)(a3 + 32), a3))
  {
    return 0xFFFFFFFFLL;
  }
  if (sub_19D7573D8((uint64_t)(a2 + 4), &v8, &v10)) {
    return 0xFFFFFFFFLL;
  }
  if (v10) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = (*(uint64_t (**)(void, void, unint64_t, uint64_t, _OWORD *, void, uint64_t, void))(a3 + 16))(*a1, a1[1], v8, v9, v13, **(void **)(a3 + 32), a3, 0);
  if (result) {
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t sub_19D761528(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, uint64_t a7, unsigned int (*a8)(void *, unsigned char *, uint64_t))
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a1)
  {
    unsigned int v10 = a2;
    if (a2)
    {
      if (a3 && a4)
      {
        bzero(v22, 0x300uLL);
        v21[0] = a1;
        v21[1] = v10;
        if (a8(v21, v22, 2)) {
          return 0xFFFFFFFFLL;
        }
        uint64_t result = sub_19D761118((uint64_t)v22, 2u, (uint64_t)v23, (uint64_t)&v24, (uint64_t)v27, (uint64_t)v28);
        if (result)
        {
          return 0xFFFFFFFFLL;
        }
        else
        {
          char v16 = 1;
          uint64_t v17 = 1;
          while ((v16 & 1) != 0)
          {
            unint64_t v18 = &v21[20 * v17];
            if (__n == v18[33] && !memcmp(__s1, (const void *)v18[32], __n))
            {
              uint64_t result = sub_19D761380(v27, &v23[3 * v17], a7);
              char v16 = 0;
              uint64_t v17 = 2;
              if (!result) {
                continue;
              }
            }
            return 0xFFFFFFFFLL;
          }
          if ((unint64_t)v27 > 0xFFFFFFFFFFFFFFEFLL
            || (*a3 = v27[2], *a4 = v27[3], (unint64_t)v28 > 0xFFFFFFFFFFFFFFEFLL))
          {
            __break(0x5513u);
          }
          else if (v29 && (uint64_t v19 = v30) != 0)
          {
            uint64_t result = 0;
            if (a5 && a6)
            {
              uint64_t result = 0;
              *a5 = v29;
              *a6 = v19;
            }
          }
          else
          {
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_19D7616BC(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, uint64_t a7)
{
  return sub_19D761528(a1, a2, a3, a4, a5, a6, a7, (unsigned int (*)(void *, unsigned char *, uint64_t))sub_19D7616D0);
}

uint64_t sub_19D7616D0(unint64_t *a1, void *a2, unsigned int a3)
{
  *a2 = &unk_19D77A8A8;
  a2[1] = 1374;
  if (sub_19D761780(a1, (uint64_t)a2, a3)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

uint64_t sub_19D761708(char *a1, size_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a1 && a2 && a3 && a5)
  {
    unint64_t v8 = *(void **)(a5 + 32);
    if (v8 && (uint64_t v9 = (void **)v8[2]) != 0 && *v8 == a4 && (v10 = *v9) != 0 && *v10 == a4)
    {
      sub_19D763660((uint64_t)v10, a2, a1, a3);
      return 0;
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t sub_19D761780(unint64_t *a1, uint64_t a2, unsigned int a3)
{
  unint64_t v18 = 0;
  unint64_t v19 = 0;
  unint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  unint64_t v5 = ~a2;
  unsigned int v6 = 1;
  unint64_t v7 = *a1;
  unint64_t v8 = a1[1];
  while (1)
  {
    unint64_t v18 = v7;
    unint64_t v19 = v8;
    uint64_t result = sub_19D757020((uint64_t)&v18, &v15);
    if (result) {
      return 0xFFFFFFFFLL;
    }
    if (__CFADD__(v16, v17)) {
      break;
    }
    unint64_t v10 = v16 + v17;
    unint64_t v11 = v16 + v17 - v7;
    BOOL v12 = !(v11 >> 17) && v8 >= v11;
    if (!v12 || v6 >= a3) {
      return 0xFFFFFFFFLL;
    }
    if (v5 < 16 * (unint64_t)v6) {
      break;
    }
    uint64_t v14 = (unint64_t *)(a2 + 16 * v6);
    unint64_t *v14 = v7;
    v14[1] = v11;
    if (v10 < v7) {
      break;
    }
    BOOL v12 = v8 >= v11;
    v8 -= v11;
    if (!v12) {
      goto LABEL_21;
    }
    ++v6;
    unint64_t v7 = v10;
    if (!v8)
    {
      if (v6 == a3) {
        return 0;
      }
      return 0xFFFFFFFFLL;
    }
  }
  __break(0x5513u);
LABEL_21:
  __break(0x5515u);
  return result;
}

uint64_t sub_19D76185C(uint64_t a1, void *a2)
{
  v11[0] = 0;
  v11[1] = 0;
  v9[1] = 0;
  uint64_t v10 = 0;
  unint64_t v8 = 0;
  v9[0] = 0;
  long long v7 = 0u;
  memset(v6, 0, sizeof(v6));
  *a2 = 0;
  a2[1] = 0;
  if (!*(void *)(a1 + 152)) {
    return 0;
  }
  if (sub_19D757600(a1 + 144, &v10, v11) || v10 != 0x2000000000000010) {
    return 0xFFFFFFFFLL;
  }
  char v3 = 1;
  while (1)
  {
    int v4 = sub_19D7576E8(v11, &v8);
    if (v4) {
      break;
    }
    if (v8 != 0x2000000000000010
      || sub_19D757874(v9, 3u, (uint64_t)&unk_19D779A08, (unint64_t)v6, 0x30uLL, 0x30uLL))
    {
      return 0xFFFFFFFFLL;
    }
    char v3 = 0;
    if (sub_19D757B68((uint64_t)&off_1E5963720, (uint64_t)v6))
    {
      memset(v12, 0, sizeof(v12));
      if (sub_19D757020((uint64_t)&v7, v12) || v12[0] != 0x2000000000000011) {
        return 0xFFFFFFFFLL;
      }
      char v3 = 0;
      *(_OWORD *)a2 = v7;
    }
  }
  if (v4 != 1 || (v3 & 1) != 0) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

uint64_t sub_19D7619BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, uint64_t a6, unsigned __int8 *a7, unint64_t a8)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  BOOL v22 = 0;
  uint64_t v14 = sub_19D767120(a2);
  if (!sub_19D76506C(v14)) {
    return 13;
  }
  unint64_t v15 = (unint64_t *)sub_19D765020(v14);
  MEMORY[0x1F4188790]();
  uint64_t v17 = (unint64_t **)&v21[-v16];
  bzero(&v21[-v16], v16);
  *uint64_t v17 = v15;
  uint64_t result = 1;
  if (a1 && a5 && a7)
  {
    int v19 = sub_19D765698(v15, a2, a1, v17);
    if (v19 == -13) {
      return 2;
    }
    if (v19) {
      return 6;
    }
    int v20 = sub_19D766F54(v17, a8, a7, a6, a5, &v22);
    if (v20 == -13) {
      return 2;
    }
    if (v20)
    {
      return 6;
    }
    else if (v22)
    {
      return 0;
    }
    else
    {
      return 6;
    }
  }
  return result;
}

uint64_t sub_19D761B30(char *a1, size_t a2, uint64_t a3)
{
  if (!a1) {
    return 1;
  }
  sub_19D763660((uint64_t)off_1E9449330, a2, a1, a3);
  return 0;
}

uint64_t sub_19D761B70(char *a1, size_t a2, uint64_t a3)
{
  if (!a1) {
    return 1;
  }
  unsigned int v6 = off_1E9449338;
  if (!off_1E9449338)
  {
    unsigned int v6 = sub_19D76EDA4();
    off_1E9449338 = v6;
  }
  sub_19D763660((uint64_t)v6, a2, a1, a3);
  return 0;
}

uint64_t sub_19D761BDC(char *a1, size_t a2, uint64_t a3)
{
  if (!a1) {
    return 1;
  }
  sub_19D763660((uint64_t)off_1E9449340, a2, a1, a3);
  return 0;
}

uint64_t sub_19D761C1C(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  void v12[2] = *MEMORY[0x1E4F143B8];
  v12[0] = a1;
  v12[1] = a2;
  v11[0] = a3;
  v11[1] = a4;
  v10[0] = a5;
  v10[1] = a6;
  uint64_t v6 = 6;
  if (a6 == 20)
  {
    int v7 = sub_19D761CC0((uint64_t)v12, (uint64_t)"\x06\x05+\x0E\x03\x02\x1A", (uint64_t)v10, (uint64_t)v11);
    if (v7) {
      unsigned int v8 = 6;
    }
    else {
      unsigned int v8 = 0;
    }
    if (v7 == -13) {
      return 2;
    }
    else {
      return v8;
    }
  }
  return v6;
}

uint64_t sub_19D761CC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v19[2] = *MEMORY[0x1E4F143B8];
  v19[0] = 0;
  v19[1] = 0;
  bzero(&v18, 0x638uLL);
  unint64_t v17 = 64;
  uint64_t v8 = *(unsigned int *)(a1 + 8);
  v16[0] = *(void *)a1;
  v16[1] = v8;
  long long v14 = 0u;
  long long v15 = 0u;
  if (sub_19D757B48((uint64_t)v16, 2u, (uint64_t)&unk_19D779AC8, (unint64_t)&v14, 0x20uLL)) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v9 = *((void *)&v14 + 1);
  uint64_t v10 = (unsigned __int8 *)v14;
  if (*((void *)&v14 + 1))
  {
    unint64_t v11 = 7;
    while (!*v10)
    {
      ++v10;
      if (!--v9)
      {
        uint64_t v10 = (unsigned __int8 *)(v14 + *((void *)&v14 + 1));
        goto LABEL_10;
      }
    }
    unint64_t v11 = v9 + 7;
    if (v9 + 7 >= 0x208) {
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    unint64_t v11 = 7;
  }
LABEL_10:
  unint64_t v17 = v11 >> 3;
  uint64_t result = sub_19D76CC00(&v17, *((unint64_t *)&v15 + 1), (unsigned __int8 *)v15, v9, v10);
  if (!result)
  {
    if (sub_19D76A2E0) {
      BOOL v13 = byte_19D77B250 == 0;
    }
    else {
      BOOL v13 = 1;
    }
    if (v13)
    {
      LOBYTE(v14) = 0;
      uint64_t result = sub_19D76A0D8(&v17, a2, *(void *)(a3 + 8), *(char **)a3, *(void *)(a4 + 8), *(unsigned __int8 **)a4, &v14);
      if (!result && (_BYTE)v14) {
        return 0;
      }
    }
    else
    {
      uint64_t result = sub_19D76A2E0(&v17, a2, *(void *)(a3 + 8), *(char **)a3, *(void *)(a4 + 8), *(unsigned __int8 **)a4, v19);
      if (!result)
      {
        sub_19D76709C(16, byte_19D77B250, (char *)v19);
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_19D761E6C(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  void v12[2] = *MEMORY[0x1E4F143B8];
  v12[0] = a1;
  v12[1] = a2;
  v11[0] = a3;
  v11[1] = a4;
  v10[0] = a5;
  v10[1] = a6;
  uint64_t v6 = 6;
  if (a6 == 32)
  {
    if (v7) {
      unsigned int v8 = 6;
    }
    else {
      unsigned int v8 = 0;
    }
    if (v7 == -13) {
      return 2;
    }
    else {
      return v8;
    }
  }
  return v6;
}

uint64_t sub_19D761F10(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  void v12[2] = *MEMORY[0x1E4F143B8];
  v12[0] = a1;
  v12[1] = a2;
  v11[0] = a3;
  v11[1] = a4;
  v10[0] = a5;
  v10[1] = a6;
  uint64_t v6 = 6;
  if (a6 == 48)
  {
    if (v7) {
      unsigned int v8 = 6;
    }
    else {
      unsigned int v8 = 0;
    }
    if (v7 == -13) {
      return 2;
    }
    else {
      return v8;
    }
  }
  return v6;
}

void sub_19D761FB4(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

void sub_19D761FC0(void *a1)
{
  if (a1) {
    free(a1);
  }
}

uint64_t sub_19D761FCC(const __CFAllocator *a1, CFTypeRef *a2, CFTypeRef cf)
{
  cfa[1] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  cfa[0] = 0;
  uint64_t v3 = 1;
  if (a2 && cf)
  {
    uint64_t v6 = sub_19D762098(a1, cf, cfa, 0);
    if (v6)
    {
      uint64_t v3 = v6;
      sub_19D7622F4(3, (uint64_t)"AMSupportCreateDataFromFileURL", (uint64_t)"AMSupportCopyPreserveFileURL failed.", v7, v8, v9, v10, v11, (char)cfa[0]);
    }
    else
    {
      uint64_t v3 = sub_19D762870(a1, a2, (const __CFURL *)cfa[0]);
    }
    if (cfa[0]) {
      CFRelease(cfa[0]);
    }
  }
  return v3;
}

uint64_t sub_19D762098(const __CFAllocator *a1, CFTypeRef cf, CFTypeRef *a3, int a4)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = 1;
  char v20 = 1;
  if (cf && a3)
  {
    CFURLRef v7 = (const __CFURL *)CFRetain(cf);
    CFTypeRef v8 = CFRetain(cf);
    CFStringRef v9 = 0;
    CFMutableStringRef Mutable = 0;
    CFStringRef v11 = 0;
    uint64_t v12 = 1;
    while (1)
    {
      uint64_t v13 = sub_19D762594(v7, (BOOL *)&v20);
      if (v13)
      {
        uint64_t v4 = v13;
        goto LABEL_25;
      }
      if (!v20) {
        goto LABEL_21;
      }
      if (v11) {
        CFRelease(v11);
      }
      CFStringRef v11 = CFStringCreateWithFormat(a1, 0, @"~%d", v12);
      if (!v11) {
        goto LABEL_38;
      }
      if (Mutable) {
        CFRelease(Mutable);
      }
      if (v9) {
        CFRelease(v9);
      }
      CFMutableStringRef Mutable = CFStringCreateMutable(a1, 0);
      if (!Mutable) {
        break;
      }
      CFStringRef v9 = CFURLCopyFileSystemPath((CFURLRef)cf, kCFURLPOSIXPathStyle);
      if (!v9) {
        goto LABEL_38;
      }
      CFStringAppend(Mutable, v9);
      CFStringAppend(Mutable, v11);
      if (v8) {
        CFRelease(v8);
      }
      CFTypeRef v8 = CFRetain(v7);
      CFRelease(v7);
      CFURLRef v14 = CFURLCreateWithFileSystemPath(a1, Mutable, kCFURLPOSIXPathStyle, 0);
      if (!v14)
      {
        uint64_t v4 = 2;
LABEL_28:
        CFRelease(v11);
        goto LABEL_29;
      }
      CFURLRef v7 = v14;
      if (v20)
      {
        BOOL v15 = v12 > 0x1E;
        uint64_t v12 = (v12 + 1);
        if (!v15) {
          continue;
        }
      }
LABEL_21:
      if (a4) {
        CFURLRef v16 = v7;
      }
      else {
        CFURLRef v16 = (const __CFURL *)v8;
      }
      uint64_t v4 = 0;
      *a3 = CFRetain(v16);
      goto LABEL_25;
    }
    CFStringRef v9 = 0;
LABEL_38:
    uint64_t v4 = 2;
LABEL_25:
    if (v7) {
      CFRelease(v7);
    }
    if (v11) {
      goto LABEL_28;
    }
LABEL_29:
    if (Mutable) {
      CFRelease(Mutable);
    }
    if (v9) {
      CFRelease(v9);
    }
    if (v8) {
      CFRelease(v8);
    }
  }
  return v4;
}

uint64_t sub_19D7622BC(int level, const char *a2)
{
  return asl_log(0, 0, level, "%s", a2);
}

void sub_19D7622F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  int v9 = MEMORY[0x1F4188790]();
  CFStringRef v11 = v10;
  uint64_t v13 = v12;
  int v14 = v9;
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  bzero(__str, 0x1000uLL);
  BOOL v15 = "";
  if (v13) {
    BOOL v15 = v13;
  }
  unsigned int v16 = snprintf(__str, 0x1000uLL, "%s: ", v15);
  CFAllocatorRef v17 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFStringRef v18 = CFStringCreateWithCStringNoCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v11, 0x8000100u, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
  if (!v18)
  {
    CFStringRef v20 = 0;
    goto LABEL_9;
  }
  CFStringRef v19 = CFStringCreateWithFormatAndArguments(v17, 0, v18, &a9);
  CFStringRef v20 = v19;
  if (!v19)
  {
LABEL_9:
    uint64_t v28 = 0;
    BOOL v27 = 0;
    goto LABEL_14;
  }
  uint64_t v21 = v16;
  unsigned int v22 = 4096 - v16;
  unsigned int Length = CFStringGetLength(v19);
  unsigned int v24 = Length;
  if (4096 - v16 < Length && (long long v25 = (char *)malloc_type_malloc(v16 + Length + 1, 0xD6DA2896uLL)) != 0)
  {
    BOOL v26 = v25;
    unsigned int v22 = v24 + 1;
    memcpy(v25, __str, v16);
    BOOL v27 = v26;
  }
  else
  {
    BOOL v27 = 0;
    BOOL v26 = __str;
  }
  if (CFStringGetCString(v20, &v26[v21], v22, 0x8000100u)) {
    uint64_t v28 = v26;
  }
  else {
    uint64_t v28 = 0;
  }
LABEL_14:
  if (v28) {
    uint64_t v29 = v28;
  }
  else {
    uint64_t v29 = "failed to format log message";
  }
  off_1EC2F7170(v14, v29);
  sub_19D761FB4(v18);
  sub_19D761FB4(v20);
  sub_19D761FC0(v27);
}

uint64_t sub_19D7624E4(char *__format, ...)
{
  va_start(va, __format);
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  long long v4 = 0u;
  long long v5 = 0u;
  *(_OWORD *)__str = 0u;
  long long v3 = 0u;
  vsnprintf(__str, 0x100uLL, __format, va);
  return fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s\n", __str);
}

uint64_t sub_19D762594(const __CFURL *a1, BOOL *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t result = 1;
  if (a1 && a2)
  {
    memset(&v7, 0, sizeof(v7));
    bzero(v6, 0x400uLL);
    if (CFURLGetFileSystemRepresentation(a1, 1u, v6, 1024))
    {
      int v5 = stat((const char *)v6, &v7);
      uint64_t result = 0;
      *a2 = v5 == 0;
    }
    else
    {
      return 3;
    }
  }
  return result;
}

uint64_t sub_19D762664(void *a1, off_t *a2, char *a3)
{
  char v3 = (char)a3;
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  memset(&v55, 0, sizeof(v55));
  int v6 = open(a3, 0, 0);
  if ((v6 & 0x80000000) == 0)
  {
    int v7 = v6;
    if (fstat(v6, &v55) < 0)
    {
      unsigned int v24 = __error();
      char v25 = strerror(*v24);
      sub_19D7622F4(3, (uint64_t)"AMSupportPlatformCreateBufferFromNativeFilePath", (uint64_t)"fstat failed: %s", v26, v27, v28, v29, v30, v25);
      sub_19D7622F4(7, (uint64_t)"AMSupportPlatformCreateBufferFromNativeFilePath", (uint64_t)"%s", v31, v32, v33, v34, v35, v3);
    }
    else
    {
      off_t st_size = v55.st_size;
      long long v9 = malloc_type_malloc(v55.st_size, 0xE7096D54uLL);
      if (!v9)
      {
        uint64_t v36 = __error();
        strerror(*v36);
        sub_19D7622F4(3, (uint64_t)"AMSupportPlatformCreateBufferFromNativeFilePath", (uint64_t)"malloc(%d) failed: %s", v37, v38, v39, v40, v41, st_size);
        uint64_t v11 = 2;
        goto LABEL_11;
      }
      long long v10 = v9;
      if (read(v7, v9, st_size) == st_size)
      {
        uint64_t v11 = 0;
        *a1 = v10;
        *a2 = st_size;
LABEL_11:
        close(v7);
        return v11;
      }
      CFTypeID v42 = __error();
      char v43 = strerror(*v42);
      sub_19D7622F4(3, (uint64_t)"AMSupportPlatformCreateBufferFromNativeFilePath", (uint64_t)"read failed: %s", v44, v45, v46, v47, v48, v43);
      sub_19D7622F4(7, (uint64_t)"AMSupportPlatformCreateBufferFromNativeFilePath", (uint64_t)"%s", v49, v50, v51, v52, v53, v3);
      free(v10);
    }
    uint64_t v11 = 4;
    goto LABEL_11;
  }
  long long v12 = __error();
  char v13 = strerror(*v12);
  sub_19D7622F4(3, (uint64_t)"AMSupportPlatformCreateBufferFromNativeFilePath", (uint64_t)"open failed: %s", v14, v15, v16, v17, v18, v13);
  sub_19D7622F4(7, (uint64_t)"AMSupportPlatformCreateBufferFromNativeFilePath", (uint64_t)"%s", v19, v20, v21, v22, v23, v3);
  return 4;
}

uint64_t sub_19D762870(const __CFAllocator *a1, CFTypeRef *a2, const __CFURL *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  bzero(buffer, 0x400uLL);
  if (CFURLGetFileSystemRepresentation(a3, 1u, buffer, 1024))
  {
    off_t v12 = 0;
    char v13 = 0;
    uint64_t v6 = sub_19D762664(&v13, &v12, (char *)buffer);
    if (v6)
    {
      uint64_t v10 = v6;
      CFDataRef v9 = 0;
    }
    else
    {
      int v7 = v13;
      CFDataRef v8 = CFDataCreateWithBytesNoCopy(a1, v13, v12, (CFAllocatorRef)*MEMORY[0x1E4F1CF90]);
      CFDataRef v9 = v8;
      if (v8)
      {
        uint64_t v10 = 0;
        *a2 = CFRetain(v8);
      }
      else
      {
        free(v7);
        uint64_t v10 = 2;
      }
    }
  }
  else
  {
    CFDataRef v9 = 0;
    uint64_t v10 = 3;
  }
  sub_19D761FB4(v9);
  return v10;
}

uint64_t sub_19D762980(uint64_t result, int8x16_t *a2, uint64_t a3, uint64_t a4, int8x16_t *a5)
{
  if (a3)
  {
    uint64_t v5 = *(unsigned int *)(result + 240);
    if (v5 == 160 || v5 == 192 || v5 == 224)
    {
      do
      {
        uint64_t v6 = v5 - 16;
        a4 += 16;
        _Q2 = *(int8x16_t *)result;
        int v7 = (int8x16_t *)(result + 16);
        do
        {
          __asm
          {
            AESE            V0.16B, V2.16B
            AESMC           V0.16B, V0.16B
          }
          _Q2 = *v7++;
          BOOL v15 = v6 <= 16;
          v6 -= 16;
        }
        while (!v15);
        __asm { AESE            V0.16B, V2.16B }
        int8x16_t v17 = veorq_s8(_Q0, *v7);
        uint64_t result = (uint64_t)v7->i64 - v5;
        *a5++ = v17;
        BOOL v15 = a3-- <= 1;
      }
      while (!v15);
      uint64_t result = 0;
      *a2 = v17;
    }
    else
    {
      return -1;
    }
  }
  return result;
}

uint64_t sub_19D762A00(unint64_t *a1, uint64_t a2, int a3, int a4)
{
  long long v4 = &byte_19D77AE10;
  *(_DWORD *)(a2 + 240) = 16 * a4;
  if (a3 == 6)
  {
    unint64_t v15 = *a1;
    unint64_t v16 = a1[1];
    uint64_t v14 = (uint64_t *)(a1 + 2);
    *(void *)a2 = v15;
    *(void *)(a2 + 8) = v16;
    int8x16_t v17 = (uint64_t *)(a2 + 16);
    uint64_t v18 = *v14;
    *int8x16_t v17 = *v14;
    uint64_t v19 = (unint64_t *)(v17 + 1);
    int v20 = 4 * a4 - 2;
    do
    {
      HIDWORD(v21) = HIDWORD(v18);
      LODWORD(v21) = HIDWORD(v18);
      unsigned int v22 = *v4++;
      uint64_t result = v22;
      uint64_t v23 = (byte_19D77AE1C[BYTE5(v18)] | (byte_19D77AE1C[(v21 >> 8) >> 24] << 24) | (byte_19D77AE1C[((v21 >> 8) >> 16)] << 16) | (byte_19D77AE1C[(unsigned __int16)(HIDWORD(v18) >> 8) >> 8] << 8)) ^ v22;
      v15 ^= v23 ^ ((v15 ^ v23) << 32);
      v16 ^= HIDWORD(v15) ^ ((v16 ^ HIDWORD(v15)) << 32);
      v18 ^= HIDWORD(v16) ^ ((v18 ^ HIDWORD(v16)) << 32);
      *uint64_t v19 = v15;
      v19[1] = v16;
      unsigned int v24 = v19 + 2;
      void *v24 = v18;
      uint64_t v19 = v24 + 1;
      BOOL v13 = __OFSUB__(v20, 6);
      v20 -= 6;
    }
    while (!((v20 < 0) ^ v13 | (v20 == 0)));
  }
  else if (a3 == 8)
  {
    unint64_t v26 = *a1;
    unint64_t v27 = a1[1];
    char v25 = a1 + 2;
    *(void *)a2 = v26;
    *(void *)(a2 + 8) = v27;
    uint64_t v28 = (unint64_t *)(a2 + 16);
    unint64_t v29 = *v25;
    unint64_t v30 = v25[1];
    *uint64_t v28 = *v25;
    v28[1] = v30;
    uint64_t v31 = v28 + 2;
    int v32 = 4 * a4 - 4;
    do
    {
      HIDWORD(v33) = HIDWORD(v30);
      LODWORD(v33) = HIDWORD(v30);
      unsigned int v34 = *v4++;
      uint64_t result = v34;
      uint64_t v35 = (byte_19D77AE1C[BYTE5(v30)] | (byte_19D77AE1C[(v33 >> 8) >> 24] << 24) | (byte_19D77AE1C[((v33 >> 8) >> 16)] << 16) | (byte_19D77AE1C[(unsigned __int16)(HIDWORD(v30) >> 8) >> 8] << 8)) ^ v34;
      v26 ^= v35 ^ ((v26 ^ v35) << 32);
      v27 ^= HIDWORD(v26) ^ ((v27 ^ HIDWORD(v26)) << 32);
      unint64_t *v31 = v26;
      v31[1] = v27;
      uint64_t v36 = v31 + 2;
      int v37 = v32 - 4;
      if (!v37) {
        break;
      }
      uint64_t result = byte_19D77AE1C[HIBYTE(HIDWORD(v27))];
      uint64_t v38 = byte_19D77AE1C[BYTE4(v27)] | (result << 24) | (byte_19D77AE1C[BYTE6(v27)] << 16) | (byte_19D77AE1C[BYTE5(v27)] << 8);
      v29 ^= v38 ^ ((v29 ^ v38) << 32);
      v30 ^= HIDWORD(v29) ^ ((v30 ^ HIDWORD(v29)) << 32);
      *uint64_t v36 = v29;
      v36[1] = v30;
      uint64_t v31 = v36 + 2;
      BOOL v13 = __OFSUB__(v37, 4);
      int v32 = v37 - 4;
    }
    while (!((v32 < 0) ^ v13 | (v32 == 0)));
  }
  else
  {
    unint64_t v5 = *a1;
    unint64_t v6 = a1[1];
    *(void *)a2 = *a1;
    *(void *)(a2 + 8) = v6;
    int v7 = (unint64_t *)(a2 + 16);
    int v8 = 4 * a4;
    do
    {
      HIDWORD(v9) = HIDWORD(v6);
      LODWORD(v9) = HIDWORD(v6);
      unsigned int v11 = *v4++;
      uint64_t result = v11;
      uint64_t v12 = (byte_19D77AE1C[BYTE5(v6)] | (byte_19D77AE1C[(v9 >> 8) >> 24] << 24) | (byte_19D77AE1C[((v9 >> 8) >> 16)] << 16) | (byte_19D77AE1C[(unsigned __int16)(HIDWORD(v6) >> 8) >> 8] << 8)) ^ v11;
      v5 ^= v12 ^ ((v5 ^ v12) << 32);
      v6 ^= HIDWORD(v5) ^ ((v6 ^ HIDWORD(v5)) << 32);
      *int v7 = v5;
      v7[1] = v6;
      v7 += 2;
      BOOL v13 = __OFSUB__(v8, 4);
      v8 -= 4;
    }
    while (!((v8 < 0) ^ v13 | (v8 == 0)));
  }
  return result;
}

uint64_t sub_19D762BF0(unint64_t *a1, uint64_t a2)
{
  return sub_19D762A00(a1, a2, 4, 10);
}

uint64_t sub_19D762C00(unint64_t *a1, uint64_t a2)
{
  return sub_19D762A00(a1, a2, 6, 12);
}

uint64_t sub_19D762C10(unint64_t *a1, uint64_t a2)
{
  return sub_19D762A00(a1, a2, 8, 14);
}

__n128 sub_19D762C20(unint64_t *a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_19D762A00(a1, a2, a3, a4);
  long long v4 = (__n128 *)(a2 + 16);
  uint64_t v5 = a4 - 1;
  do
  {
    --v5;
    _Q0 = *v4;
    __asm { AESIMC          V0.16B, V0.16B }
    *v4++ = result;
  }
  while (!(_NF ^ _VF | _ZF));
  return result;
}

double sub_19D762C60(unint64_t *a1, uint64_t a2)
{
  *(void *)&double result = sub_19D762C20(a1, a2, 4, 10).n128_u64[0];
  return result;
}

double sub_19D762C80(unint64_t *a1, uint64_t a2)
{
  *(void *)&double result = sub_19D762C20(a1, a2, 6, 12).n128_u64[0];
  return result;
}

double sub_19D762CA0(unint64_t *a1, uint64_t a2)
{
  *(void *)&double result = sub_19D762C20(a1, a2, 8, 14).n128_u64[0];
  return result;
}

uint64_t sub_19D762CC0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v6 = a2;
  unint64_t v8 = a3;
  if (a3 > 32) {
    unint64_t v8 = (unint64_t)a3 >> 3;
  }
  switch(v8)
  {
    case 0x10uLL:
      sub_19D762BF0(a4, v6);
      break;
    case 0x18uLL:
      sub_19D762C00(a4, v6);
      break;
    case 0x20uLL:
      sub_19D762C10(a4, v6);
      break;
    default:
      return -1;
  }
  return 0;
}

uint64_t sub_19D762D30(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v6 = a2;
  unint64_t v8 = a3;
  if (a3 > 32) {
    unint64_t v8 = (unint64_t)a3 >> 3;
  }
  switch(v8)
  {
    case 0x10uLL:
      sub_19D762C60(a4, v6);
      break;
    case 0x18uLL:
      sub_19D762C80(a4, v6);
      break;
    case 0x20uLL:
      sub_19D762CA0(a4, v6);
      break;
    default:
      return -1;
  }
  return 0;
}

uint64_t sub_19D762DA0(uint64_t a1, char a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result = sub_19D768730();
  for (uint64_t i = __ROR8__(0x5555555555555555, a2 | (2 * result)); a1; --a1)
  {
    uint64_t v10 = *a4 ^ *a3;
    *a3 ^= result;
    uint64_t v11 = *a4 ^ result;
    *a4 = v11;
    uint64_t v12 = *a3 ^ v10 & 0x5555555555555555;
    uint64_t v13 = v11 ^ v10 & 0x5555555555555555;
    uint64_t v14 = v10 & i;
    *a3++ = v12 ^ v14 ^ result;
    *a4++ = v13 ^ v14 ^ result;
  }
  return result;
}

uint64_t sub_19D762E3C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v8 = sub_19D767AEC(a2);
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v8);
  uint64_t v11 = (unint64_t *)sub_19D76ECF8(a2);
  if (sub_19D76945C(v8, v10, v11, 2uLL)) {
    uint64_t result = 0xFFFFFFFFLL;
  }
  else {
    uint64_t result = sub_19D76874C(a1, a2, a3, a4, v10);
  }
  *(void *)(a1 + 16) = v9;
  return result;
}

uint64_t sub_19D762EE4(unsigned __int8 **a1, uint64_t a2, unsigned __int8 **a3)
{
  unint64_t v8 = 0;
  uint64_t result = sub_19D763188(a1, a2, &v8, 0);
  if (result)
  {
    uint64_t v6 = *a1;
    int v7 = &(*a1)[v8];
    *a1 = v7;
    *a3 = v6;
    a3[1] = v7;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

uint64_t sub_19D762F40(unsigned __int8 **a1, unint64_t *a2)
{
  return sub_19D762F48(a1, a2, 1);
}

uint64_t sub_19D762F48(unsigned __int8 **a1, unint64_t *a2, int a3)
{
  long long v4 = *a1;
  unint64_t v3 = (unint64_t)a1[1];
  if (*a1) {
    BOOL v5 = v3 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5 || (unint64_t)v4 >= v3) {
    goto LABEL_10;
  }
  int v7 = v4 + 1;
  unint64_t v8 = *v4;
  if ((char)*v4 < 0)
  {
    switch(*v4)
    {
      case 0x81u:
        if ((uint64_t)(v3 - (void)v7) >= 1)
        {
          int v7 = v4 + 2;
          int v10 = (char)v4[1];
          unint64_t v8 = v10;
          if (!a3 || v10 < 0) {
            break;
          }
        }
        goto LABEL_10;
      case 0x82u:
        if ((uint64_t)(v3 - (void)v7) >= 2)
        {
          int v7 = v4 + 3;
          unint64_t v8 = __rev16(*(unsigned __int16 *)(v4 + 1));
          if (!a3 || v8 >= 0x100) {
            break;
          }
        }
        goto LABEL_10;
      case 0x83u:
        if ((uint64_t)(v3 - (void)v7) >= 3)
        {
          int v7 = v4 + 4;
          unint64_t v8 = ((unint64_t)v4[1] << 16) | ((unint64_t)v4[2] << 8) | v4[3];
          if (!a3 || v8 >= 0x10000) {
            break;
          }
        }
        goto LABEL_10;
      case 0x84u:
        if ((uint64_t)(v3 - (void)v7) >= 4)
        {
          int v7 = v4 + 5;
          unint64_t v8 = bswap32(*(_DWORD *)(v4 + 1));
          if (!a3 || v8 >> 24) {
            break;
          }
        }
        goto LABEL_10;
      default:
        goto LABEL_10;
    }
  }
  if (v3 - (unint64_t)v7 < v8)
  {
LABEL_10:
    uint64_t result = 0;
    *a2 = 0;
  }
  else
  {
    *a2 = v8;
    *a1 = v7;
    return 1;
  }
  return result;
}

uint64_t sub_19D76307C(unsigned __int8 **a1, unint64_t *a2)
{
  return sub_19D762F48(a1, a2, 0);
}

uint64_t sub_19D763084(unsigned __int8 **a1, unint64_t a2, void *a3, void *a4)
{
  unint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t result = sub_19D763100(a1, &v8);
  if (result)
  {
    uint64_t result = sub_19D76327C(&v8, a2, a3);
    if (result)
    {
      uint64_t result = sub_19D76327C(&v8, a2, a4);
      if (result) {
        return v8 == v9;
      }
    }
  }
  return result;
}

uint64_t sub_19D763100(unsigned __int8 **a1, unsigned __int8 **a2)
{
  return sub_19D762EE4(a1, 0x2000000000000010, a2);
}

uint64_t sub_19D763110(unsigned __int8 **a1, unint64_t *a2)
{
  unint64_t v2 = *a1;
  unint64_t v3 = (unint64_t)a1[1];
  if (*a1) {
    BOOL v4 = (unint64_t)v2 >= v3;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return 0;
  }
  unsigned int v8 = *v2;
  uint64_t v6 = v2 + 1;
  unint64_t v7 = v8;
  unint64_t v9 = v8 & 0x1F;
  if (v9 == 31)
  {
    unint64_t v9 = 0;
    while (1)
    {
      uint64_t v5 = 0;
      if ((unint64_t)v6 >= v3) {
        break;
      }
      unint64_t v10 = v9;
      if (v9 >> 57) {
        break;
      }
      char v11 = *v6++;
      unint64_t v9 = v11 & 0x7F | (v9 << 7);
      if ((v11 & 0x80) == 0)
      {
        if (v10 >> 54) {
          return 0;
        }
        goto LABEL_13;
      }
    }
  }
  else
  {
LABEL_13:
    *a2 = v9 | (v7 >> 5 << 61);
    *a1 = v6;
    return 1;
  }
  return v5;
}

uint64_t sub_19D763188(unsigned __int8 **a1, uint64_t a2, unint64_t *a3, int a4)
{
  unint64_t v10 = 0;
  *a3 = 0;
  int v8 = sub_19D763110(a1, &v10);
  uint64_t result = 0;
  if (v8 && v10 == a2)
  {
    if (a4) {
      return sub_19D762F40(a1, a3);
    }
    else {
      return sub_19D76307C(a1, a3);
    }
  }
  return result;
}

BOOL sub_19D763204(unsigned __int8 **a1, unint64_t a2, void *a3)
{
  unint64_t v3 = *a1;
  BOOL v4 = a1[1];
  if (*a1 == v4 || (char)*v3 < 0) {
    goto LABEL_7;
  }
  if (!*v3)
  {
    if (++v3 == v4)
    {
      unint64_t v3 = a1[1];
      goto LABEL_4;
    }
    if (((char)*v3 & 0x80000000) == 0)
    {
LABEL_7:
      uint64_t v5 = 0;
      *a1 = 0;
      a1[1] = 0;
      return v5;
    }
  }
LABEL_4:
  *a1 = v3;
  return sub_19D768E64(a2, a3, v4 - v3, v3) == 0;
}

uint64_t sub_19D76327C(unsigned __int8 **a1, unint64_t a2, void *a3)
{
  v6[0] = 0;
  v6[1] = 0;
  uint64_t result = sub_19D762EE4(a1, 2, v6);
  if (result) {
    return sub_19D763204(v6, a2, a3);
  }
  return result;
}

uint64_t sub_19D7632CC(uint64_t result, uint64_t *a2)
{
  if (result)
  {
    unint64_t v2 = result;
    uint64_t result = 0;
    unint64_t v3 = 0;
    do
    {
      uint64_t v4 = *a2++;
      ++v3;
      if (v4) {
        uint64_t result = v3;
      }
    }
    while (v3 < v2);
  }
  return result;
}

void *sub_19D7632FC(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v6 = sub_19D767AEC(a2);

  return sub_19D768F38(v6, a3, a4);
}

uint64_t sub_19D763340(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a2 + 16) + 56))();
}

void sub_19D76334C()
{
}

uint64_t sub_19D76335C(uint64_t result)
{
  if (result) {
    sub_19D7689A0();
  }
  return result;
}

unint64_t sub_19D763378(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = sub_19D767AEC(a1);
  BOOL v7 = sub_19D768DDC(v6, a3) != 0;
  int v8 = (uint64_t *)sub_19D76ECF8(a1);

  return sub_19D76CD30(v6, v7, a2, (unint64_t *)a3, v8);
}

unint64_t sub_19D7633F4(uint64_t a1, unsigned __int8 a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8 = sub_19D767AEC(a1);
  uint64_t v9 = (sub_19D768DDC(v8, a4) != 0) & a2;
  unint64_t v10 = (uint64_t *)sub_19D76ECF8(a1);

  return sub_19D76CD30(v8, v9, a3, (unint64_t *)a4, v10);
}

void *sub_19D763478(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v6 = sub_19D767AEC(a2);

  return sub_19D768F38(v6, a3, a4);
}

uint64_t sub_19D7634BC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a2 + 16) + 64))();
}

unint64_t sub_19D7634D0(uint64_t a1, void *a2, unint64_t *a3, unint64_t a4)
{
  unint64_t v4 = 0;
  if (a1)
  {
    unint64_t v5 = *a3++;
    unint64_t v4 = (v5 * (unsigned __int128)a4) >> 64;
    *a2++ = v5 * a4;
    --a1;
  }
  if ((a1 & 2) != 0)
  {
    unint64_t v6 = *a3;
    unint64_t v7 = a3[1];
    a3 += 2;
    unsigned long long v8 = v6 * (unsigned __int128)a4 + __PAIR128__(v7 * a4, v4);
    unint64_t v4 = (__CFADD__(__CFADD__(v6 * a4, v4), (v6 * (unsigned __int128)a4) >> 64) | __CFADD__(v7 * a4, *((void *)&v8 + 1)))+ ((v7 * (unsigned __int128)a4) >> 64);
    *(_OWORD *)a2 = v8;
    a2 += 2;
    a1 -= 2;
  }
  while (1)
  {
    BOOL v9 = a1 < 4;
    a1 -= 4;
    if (v9) {
      break;
    }
    unint64_t v11 = *a3;
    unint64_t v12 = a3[1];
    unint64_t v10 = a3 + 2;
    unint64_t v14 = *v10;
    unint64_t v15 = v10[1];
    a3 = v10 + 2;
    uint64_t v16 = (v12 * (unsigned __int128)a4) >> 64;
    BOOL v17 = __CFADD__(__CFADD__(v11 * a4, v4), (v11 * (unsigned __int128)a4) >> 64);
    unsigned long long v13 = v11 * (unsigned __int128)a4 + __PAIR128__(v12 * a4, v4);
    *(_OWORD *)a2 = v13;
    uint64_t v18 = a2 + 2;
    uint64_t v19 = (v14 * (unsigned __int128)a4) >> 64;
    uint64_t v20 = v16 + (v17 | __CFADD__(v12 * a4, *((void *)&v13 + 1))) + v14 * a4;
    uint64_t v22 = __CFADD__(v17 | __CFADD__(v12 * a4, *((void *)&v13 + 1)), v14 * a4) | __CFADD__(v16, (v17 | __CFADD__(v12 * a4, *((void *)&v13 + 1))) + v14 * a4);
    BOOL v17 = __CFADD__(v22, v19);
    uint64_t v21 = v22 + v19;
    unint64_t v4 = (v17 | __CFADD__(v15 * a4, v21)) + ((v15 * (unsigned __int128)a4) >> 64);
    void *v18 = v20;
    v18[1] = v15 * a4 + v21;
    a2 = v18 + 2;
  }
  return v4;
}

uint64_t sub_19D76357C(uint64_t a1, size_t a2, char *a3, uint64_t a4)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  size_t v8 = (*(void *)(a1 + 8) + *(void *)(a1 + 16) + 19) & 0xFFFFFFFFFFFFFFF8;
  BOOL v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v9, v8);
  sub_19D7638A4(a1, v9);
  sub_19D763910((unint64_t *)a1, v9, a2, a3);
  (*(void (**)(uint64_t, char *, uint64_t))(a1 + 56))(a1, v9, a4);
  return sub_19D76DA0C(*(void *)(a1 + 8) + *(void *)(a1 + 16) + 12, v9);
}

uint64_t sub_19D763660(uint64_t a1, size_t a2, char *a3, uint64_t a4)
{
  BOOL v9 = sub_19D76CDE0();
  sub_19D76357C(a1, a2, a3, a4);
  return sub_19D76EF94((unsigned int *)&v9);
}

uint64_t sub_19D7636C4(uint64_t a1, const void *a2, uint64_t a3)
{
  v20[1] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = (uint64_t)a2 + v7 + 8;
  if (v6 <= *(unsigned int *)(v8 + v6)) {
    *(_DWORD *)(v8 + v6) = 0;
  }
  size_t v9 = (v7 + v6 + 19) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (void *)((char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  bzero(v10, v9);
  memcpy(v10, a2, v7 + v6 + 12);
  unint64_t v11 = (char *)v10 + v7;
  uint64_t v12 = (uint64_t)v10 + v7 + 8;
  unsigned long long v13 = (char *)(v12 + v6);
  uint64_t v14 = *(unsigned int *)(v12 + v6);
  *v10 += (8 * v14);
  *(_DWORD *)(v12 + v6) = v14 + 1;
  *(unsigned char *)(v12 + v14) = 0x80;
  unint64_t v15 = *(unsigned int *)(v12 + v6);
  if (v15 < 0x39)
  {
    if (v15 == 56) {
      goto LABEL_9;
    }
  }
  else
  {
    if (v15 <= 0x3F)
    {
      do
      {
        *(_DWORD *)unsigned long long v13 = v15 + 1;
        *(unsigned char *)(v12 + v15) = 0;
        unint64_t v15 = *(unsigned int *)v13;
      }
      while (v15 < 0x40);
    }
    (*(void (**)(void *, uint64_t))(a1 + 48))(v10 + 1, 1);
    unint64_t v15 = 0;
    unint64_t v11 = (char *)v10 + *(void *)(a1 + 8);
    uint64_t v12 = (uint64_t)(v11 + 8);
    unsigned long long v13 = &v11[*(void *)(a1 + 16) + 8];
    *(_DWORD *)unsigned long long v13 = 0;
  }
  do
  {
    *(_DWORD *)unsigned long long v13 = v15 + 1;
    *(unsigned char *)(v12 + v15) = 0;
    unint64_t v15 = *(unsigned int *)v13;
  }
  while (v15 < 0x38);
LABEL_9:
  *((void *)v11 + 8) = bswap64(*v10);
  (*(void (**)(void *, uint64_t))(a1 + 48))(v10 + 1, 1);
  if (*(void *)a1 >= 4uLL)
  {
    unsigned int v16 = 0;
    unint64_t v17 = 0;
    unsigned int v18 = 1;
    do
    {
      *(_DWORD *)(a3 + v16) = bswap32(*((_DWORD *)v10 + v17 + 2));
      unint64_t v17 = v18++;
      v16 += 4;
    }
    while (v17 < *(void *)a1 >> 2);
  }
  return sub_19D76DA0C(*(void *)(a1 + 8) + *(void *)(a1 + 16) + 12, v10);
}

void *sub_19D7638A4(uint64_t a1, void *a2)
{
  uint64_t result = memcpy(a2 + 1, *(const void **)(a1 + 40), *(void *)(a1 + 8));
  *a2 = 0;
  *(_DWORD *)((char *)a2 + *(void *)(a1 + 8) + *(void *)(a1 + 16) + 8) = 0;
  return result;
}

unint64_t sub_19D7638EC(uint64_t *a1)
{
  return (unint64_t)(sub_19D767AF4(*a1) + 7) >> 3;
}

unint64_t *sub_19D763910(unint64_t *result, void *a2, size_t a3, char *__src)
{
  size_t v5 = a3;
  uint64_t v7 = result;
  unint64_t v8 = result[2];
  uint64_t v9 = (uint64_t)a2 + result[1] + 8;
  if (v8 <= *(unsigned int *)(v9 + v8)) {
    *(_DWORD *)(v9 + v8) = 0;
  }
  if (a3)
  {
    unint64_t v10 = a2 + 1;
    do
    {
      size_t v11 = v7[2];
      uint64_t v12 = (char *)v10 + v7[1];
      uint64_t v13 = *(unsigned int *)&v12[v11];
      if (v5 > v11 && v13 == 0)
      {
        if (v11 == 128)
        {
          size_t v22 = v5 >> 7;
          size_t v16 = v5 & 0xFFFFFFFFFFFFFF80;
        }
        else if (v11 == 64)
        {
          size_t v22 = v5 >> 6;
          size_t v16 = v5 & 0xFFFFFFFFFFFFFFC0;
        }
        else
        {
          size_t v22 = v5 / v11;
          size_t v16 = v5 / v11 * v11;
        }
        uint64_t result = (unint64_t *)((uint64_t (*)(void *, size_t, char *))v7[6])(a2 + 1, v22, __src);
        *a2 += 8 * v16;
      }
      else
      {
        size_t v15 = v11 - v13;
        if (v15 >= v5) {
          size_t v16 = v5;
        }
        else {
          size_t v16 = v15;
        }
        uint64_t result = (unint64_t *)memcpy(&v12[v13], __src, v16);
        unint64_t v17 = v7[2];
        unsigned int v18 = (char *)v10 + v7[1];
        uint64_t v19 = (*(_DWORD *)&v18[v17] + v16);
        *(_DWORD *)&v18[v17] = v19;
        if (v17 == v19)
        {
          uint64_t result = (unint64_t *)((uint64_t (*)(void *, uint64_t))v7[6])(a2 + 1, 1);
          unint64_t v20 = v7[2];
          uint64_t v21 = (char *)v10 + v7[1];
          *a2 += (8 * *(_DWORD *)&v21[v20]);
          *(_DWORD *)&v21[v20] = 0;
        }
      }
      __src += v16;
      v5 -= v16;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_19D763A4C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *a2;
  if (sub_19D7682F4(a2, a4)) {
    return 4294967289;
  }
  uint64_t v8 = *(void *)(a1 + 16);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  uint64_t v9 = sub_19D767AE0(a1, (uint64_t)a2);
  sub_19D76ECEC(a1, (uint64_t)a2);
  sub_19D76EA6C(a1, (uint64_t)a2);
  sub_19D76EA6C(a1, (uint64_t)a2);
  sub_19D76EA6C(a1, (uint64_t)a2);
  sub_19D7634BC(a1, (uint64_t)a2);
  sub_19D7634BC(a1, (uint64_t)a2);
  *(void *)(a1 + 16) = v8;
  return v9;
}

uint64_t sub_19D763B84(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *a2;
  if (sub_19D7682F4(a2, a4)) {
    return 4294967289;
  }
  uint64_t v8 = *(void *)(a1 + 16);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  sub_19D76ECEC(a1, (uint64_t)a2);
  uint64_t v9 = sub_19D767AE0(a1, (uint64_t)a2);
  sub_19D76EA6C(a1, (uint64_t)a2);
  sub_19D7634BC(a1, (uint64_t)a2);
  *(void *)(a1 + 16) = v8;
  return v9;
}

void *sub_19D763C5C()
{
  return &unk_1E5963820;
}

uint64_t sub_19D763C68(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t v16[3] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = a4[4];
  v16[0] = a4[3];
  v16[1] = v16[0];
  void v16[2] = 0;
  v15[0] = 0;
  v15[1] = v7;
  unint64_t v15[2] = v7;
  v14[0] = a4[5];
  v14[1] = v14[0];
  unint64_t v14[2] = v14[0];
  BOOL v8 = sub_19D768558(a1, 3, a3, a4, v16);
  BOOL v9 = sub_19D768558(a1, 3, a3, a3, v15) + v8;
  v13[0] = v9 + sub_19D768558(a1, 3, a3, a3, v14);
  v13[1] = v13[0];
  void v13[2] = 0;
  LOBYTE(v9) = sub_19D768558(a1, 3, v13, a3, v13);
  unint64_t v10 = (unint64_t *)sub_19D76ECF8(a2);
  BOOL v11 = sub_19D769390(a1, 3, a3, v13, v10);
  return sub_19D7686D0(3, !v11 | v9, a3, a3, v13);
}

unint64_t sub_19D763D94(uint64_t a1, unint64_t a2, void *a3, unint64_t *a4)
{
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, 2 * a2);
  unint64_t result = sub_19D768DD8(a2 - 1, (void *)(v9 + 8), a4 + 1, *a4);
  *(void *)(v9 + 8 * a2) = result;
  long long v11 = *a4;
  *a3 = *a4 * *a4;
  unint64_t v12 = *(void *)(v9 + 8);
  if (__CFADD__((unsigned __int128)(v11 * v11) >> 64, 2 * v12)) {
    uint64_t v13 = (v12 >> 63) + 1;
  }
  else {
    uint64_t v13 = v12 >> 63;
  }
  a3[1] = (__PAIR128__(2, v11) * v11) >> 64;
  unint64_t v14 = a2 - 2;
  if (a2 >= 2)
  {
    uint64_t v15 = 0;
    uint64_t v16 = v9 + 8 * a2 + 8;
    unint64_t v17 = (unint64_t *)(v9 + 24);
    unsigned int v18 = a3 + 3;
    do
    {
      unint64_t result = sub_19D767338(v14, v17, &a4[v15 + 2], a4[v15 + 1]);
      *(void *)(v16 + v15 * 8) = result;
      unint64_t v19 = a4[v15 + 1];
      uint64_t v20 = (v19 * (unsigned __int128)v19) >> 64;
      unint64_t v21 = v19 * v19;
      BOOL v22 = __CFADD__(v21, v13);
      unint64_t v23 = v21 + v13;
      if (v22) {
        ++v20;
      }
      unint64_t v24 = *(v17 - 1);
      *(v18 - 1) = v23 + 2 * v24;
      unint64_t v25 = *v17;
      v17 += 2;
      uint64_t v26 = v25 >> 63;
      BOOL v22 = __CFADD__(v20, 2 * v25);
      uint64_t v27 = v20 + 2 * v25;
      if (v22) {
        uint64_t v28 = v26 + 1;
      }
      else {
        uint64_t v28 = v26;
      }
      BOOL v22 = __CFADD__(__CFADD__(v23, 2 * v24), v27) | __CFADD__(v24 >> 63, __CFADD__(v23, 2 * v24) + v27);
      unint64_t v29 = (v24 >> 63) + __CFADD__(v23, 2 * v24) + v27;
      if (v22) {
        uint64_t v13 = v28 + 1;
      }
      else {
        uint64_t v13 = v28;
      }
      unint64_t *v18 = v29;
      v18 += 2;
      ++v15;
      --v14;
    }
    while (v14 != -1);
  }
  *(void *)(a1 + 16) = v8;
  return result;
}

uint64_t sub_19D763EBC(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  return sub_19D767C18(a1, a2, a3, a4, 0x60uLL, qword_19D77AF20, &unk_19D77AF40);
}

uint64_t sub_19D763ED4(uint64_t a1, uint64_t a2)
{
  return sub_19D76EA6C(a1, a2);
}

uint64_t sub_19D763EE8(uint64_t a1, uint64_t a2)
{
  return sub_19D76EA6C(a1, a2);
}

uint64_t sub_19D763EFC(uint64_t a1, uint64_t a2)
{
  return sub_19D76EA6C(a1, a2);
}

void *sub_19D763F10()
{
  return &unk_1E5963908;
}

uint64_t sub_19D763F1C(uint64_t a1, uint64_t a2, uint64_t *a3, int8x16_t *a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v15 = 0;
  memset(v14, 0, sizeof(v14));
  uint64_t v13 = 0;
  memset(v12, 0, sizeof(v12));
  sub_19D768F4C(9, v12, a4 + 4, 9);
  v13 += a4[4].i64[0] & 0x1FF;
  uint64_t v8 = sub_19D768558(a1, 8, v12, v12[0].i64, a4->i64);
  v13 += v8;
  uint64_t v9 = (unint64_t *)sub_19D76ECF8(a2);
  char v10 = sub_19D769390(a1, 9, v14, v12[0].i64, v9);
  return sub_19D7686D0(9, v10, a3, v12[0].i64, (uint64_t *)v14);
}

uint64_t sub_19D764024(uint64_t a1, void *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *(void *)(a1 + 16);
  (*(void (**)(uint64_t, void))(a1 + 24))(a1, *a2);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v4);
  sub_19D76ECEC(a1, (uint64_t)a2);
  sub_19D76ED98(a1, (uint64_t)a2);
  sub_19D76DCC8(a1, (uint64_t)a2);
  sub_19D76EA6C(a1, (uint64_t)a2);
  sub_19D76DCC8(a1, (uint64_t)a2);
  sub_19D76DCC8(a1, (uint64_t)a2);
  sub_19D76EA6C(a1, (uint64_t)a2);
  sub_19D76DCC8(a1, (uint64_t)a2);
  sub_19D76ECEC(a1, (uint64_t)a2);
  sub_19D76EA6C(a1, (uint64_t)a2);
  sub_19D76DCC8(a1, (uint64_t)a2);
  sub_19D76DCC8(a1, (uint64_t)a2);
  sub_19D76ECEC(a1, (uint64_t)a2);
  sub_19D76ED98(a1, (uint64_t)a2);
  sub_19D76ED98(a1, (uint64_t)a2);
  sub_19D76ECEC(a1, (uint64_t)a2);
  sub_19D76DCC8(a1, (uint64_t)a2);
  sub_19D76DCC8(a1, (uint64_t)a2);
  sub_19D76DCC8(a1, (uint64_t)a2);
  sub_19D76ED98(a1, (uint64_t)a2);
  sub_19D76EA6C(a1, (uint64_t)a2);
  uint64_t result = sub_19D76ED98(a1, (uint64_t)a2);
  *(void *)(a1 + 16) = v5;
  return result;
}

uint64_t sub_19D7642B0(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v9 = *a2;
  uint64_t v14 = *(void *)(a1 + 16);
  char v10 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, *a2);
  long long v11 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v9);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v9);
  sub_19D76ECEC(a1, (uint64_t)a2);
  sub_19D76EA6C(a1, (uint64_t)a2);
  sub_19D76EA6C(a1, (uint64_t)a2);
  sub_19D76EA6C(a1, (uint64_t)a2);
  sub_19D76ED98(a1, (uint64_t)a2);
  if (a6) {
    sub_19D76DCC8(a1, (uint64_t)a2);
  }
  else {
    sub_19D76ED98(a1, (uint64_t)a2);
  }
  if (sub_19D768DDC(v9, v10) || sub_19D768DDC(v9, v11))
  {
    if (sub_19D768DDC(v9, v10) || !sub_19D768DDC(v9, v11))
    {
      sub_19D76DCC8(a1, (uint64_t)a2);
      sub_19D76ED98(a1, (uint64_t)a2);
      sub_19D76DCC8(a1, (uint64_t)a2);
      sub_19D76ED98(a1, (uint64_t)a2);
      sub_19D76EA6C(a1, (uint64_t)a2);
      sub_19D76ECEC(a1, (uint64_t)a2);
      sub_19D76EA6C(a1, (uint64_t)a2);
      sub_19D76EA6C(a1, (uint64_t)a2);
      sub_19D76ECEC(a1, (uint64_t)a2);
      sub_19D76ED98(a1, (uint64_t)a2);
      sub_19D76ED98(a1, (uint64_t)a2);
      sub_19D76ED98(a1, (uint64_t)a2);
      sub_19D76EA6C(a1, (uint64_t)a2);
      sub_19D76EA6C(a1, (uint64_t)a2);
      sub_19D76ED98(a1, (uint64_t)a2);
      uint64_t result = sub_19D76E0A8(a1, (uint64_t)a2, (int8x16_t *)&a3[v9], &a3[v9]);
    }
    else
    {
      sub_19D76CCDC(v9, a3, 1);
      sub_19D763340(a1, (uint64_t)a2);
      sub_19D768F38(v9, &a3[v9], a3);
      uint64_t result = sub_19D76DA0C(8 * v9, &a3[2 * v9]);
    }
  }
  else
  {
    uint64_t result = sub_19D764024(a1, a2);
  }
  *(void *)(a1 + 16) = v14;
  return result;
}

uint64_t sub_19D764644(uint64_t a1, uint64_t *a2, char *a3, uint64_t a4, char *a5)
{
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *a2;
  if (sub_19D7682F4(a2, a4))
  {
    sub_19D768F38(v11, a3, a5);
    sub_19D768F38(v11, &a3[8 * *a2], &a5[8 * *a2]);
    uint64_t result = (uint64_t)sub_19D768F38(v11, &a3[16 * *a2], &a5[16 * *a2]);
  }
  else
  {
    uint64_t result = sub_19D7642B0(a1, a2, a3, a4, (uint64_t)a5, 0);
  }
  *(void *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_19D764700(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = sub_19D767AEC((uint64_t)a2);
  uint64_t v16 = *(void *)(a1 + 16);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  sub_19D764DF0(a1, (uint64_t)a2);
  sub_19D764DF0(a1, (uint64_t)a2);
  sub_19D76EA6C(a1, (uint64_t)a2);
  sub_19D76EA6C(a1, (uint64_t)a2);
  sub_19D76EA6C(a1, (uint64_t)a2);
  sub_19D76DCC8(a1, (uint64_t)a2);
  sub_19D76DCC8(a1, (uint64_t)a2);
  sub_19D76EA6C(a1, (uint64_t)a2);
  sub_19D76DCC8(a1, (uint64_t)a2);
  sub_19D76ED98(a1, (uint64_t)a2);
  sub_19D76DCC8(a1, (uint64_t)a2);
  sub_19D76DCC8(a1, (uint64_t)a2);
  sub_19D76EA6C(a1, (uint64_t)a2);
  sub_19D76DCC8(a1, (uint64_t)a2);
  sub_19D76ED98(a1, (uint64_t)a2);
  sub_19D76DCC8(a1, (uint64_t)a2);
  sub_19D76DCC8(a1, (uint64_t)a2);
  sub_19D76EA6C(a1, (uint64_t)a2);
  sub_19D76DCC8(a1, (uint64_t)a2);
  sub_19D76ED98(a1, (uint64_t)a2);
  sub_19D76EA6C(a1, (uint64_t)a2);
  sub_19D76ED98(a1, (uint64_t)a2);
  sub_19D76DCC8(a1, (uint64_t)a2);
  sub_19D76DCC8(a1, (uint64_t)a2);
  sub_19D76ED98(a1, (uint64_t)a2);
  sub_19D76DCC8(a1, (uint64_t)a2);
  sub_19D76EA6C(a1, (uint64_t)a2);
  sub_19D76DCC8(a1, (uint64_t)a2);
  sub_19D76DCC8(a1, (uint64_t)a2);
  sub_19D76ED98(a1, (uint64_t)a2);
  sub_19D76ED98(a1, (uint64_t)a2);
  sub_19D76DCC8(a1, (uint64_t)a2);
  sub_19D76DCC8(a1, (uint64_t)a2);
  sub_19D76DCC8(a1, (uint64_t)a2);
  sub_19D76DCC8(a1, (uint64_t)a2);
  sub_19D76ED98(a1, (uint64_t)a2);
  sub_19D76EA6C(a1, (uint64_t)a2);
  sub_19D76EA6C(a1, (uint64_t)a2);
  sub_19D76EA6C(a1, (uint64_t)a2);
  sub_19D76DCC8(a1, (uint64_t)a2);
  sub_19D76EA6C(a1, (uint64_t)a2);
  sub_19D76ED98(a1, (uint64_t)a2);
  sub_19D76EA6C(a1, (uint64_t)a2);
  sub_19D76EA6C(a1, (uint64_t)a2);
  sub_19D76DCC8(a1, (uint64_t)a2);
  uint64_t v7 = sub_19D767AEC((uint64_t)a2);
  uint64_t v8 = *a2;
  uint64_t v9 = &a3[*a2];
  uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v7);
  uint64_t v11 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v7);
  sub_19D768F38(v7, v10, v9);
  sub_19D7634BC(a1, (uint64_t)a2);
  BOOL v12 = sub_19D768DDC(v7, v11) == 1 && *v11 == 1;
  uint64_t v13 = &a3[2 * v8];
  if (sub_19D768DDC(v7, a3)) {
    BOOL v12 = 0;
  }
  char v14 = v12 & (sub_19D768DDC(v7, v13) == 0);
  sub_19D76EA6C(a1, (uint64_t)a2);
  sub_19D76ECEC(a1, (uint64_t)a2);
  sub_19D76EA6C(a1, (uint64_t)a2);
  sub_19D7686D0(v7, v14, a3, (uint64_t *)v10, a3);
  uint64_t result = sub_19D7686D0(v7, v14, v9, (uint64_t *)v10, v9);
  *(void *)(a1 + 16) = v16;
  return result;
}

uint64_t sub_19D764DF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_19D767AEC(a2);
  uint64_t v5 = *(void *)(a1 + 16);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v4);
  sub_19D76EA6C(a1, a2);
  sub_19D76ECEC(a1, a2);
  uint64_t result = sub_19D76EA6C(a1, a2);
  *(void *)(a1 + 16) = v5;
  return result;
}

uint64_t sub_19D764EA8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a2 + 16) + 88))();
}

uint64_t sub_19D764EB4(uint64_t a1, uint64_t *a2, char *a3, uint64_t a4, char *a5)
{
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *a2;
  if (sub_19D7682F4(a2, a4))
  {
    sub_19D768F38(v11, a3, a5);
    sub_19D763378((uint64_t)a2, (uint64_t *)&a3[8 * *a2], (uint64_t *)&a5[8 * *a2]);
    uint64_t result = (uint64_t)sub_19D768F38(v11, &a3[16 * *a2], &a5[16 * *a2]);
  }
  else
  {
    uint64_t result = sub_19D7642B0(a1, a2, a3, a4, (uint64_t)a5, 1);
  }
  *(void *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_19D764F70(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, char *a5)
{
  uint64_t v8 = *a2;
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 3 * *a2);
  sub_19D768F38(v8, v10, a5);
  sub_19D763378((uint64_t)a2, (uint64_t *)&v10[8 * *a2], (uint64_t *)&a5[8 * *a2]);
  sub_19D768F38(v8, &v10[16 * *a2], &a5[16 * *a2]);
  uint64_t result = sub_19D764EA8(a1, (uint64_t)a2);
  *(void *)(a1 + 16) = v9;
  return result;
}

void *sub_19D765020(uint64_t a1)
{
  if (a1 <= 255)
  {
    if (a1 == 192) {
      return sub_19D763C5C();
    }
    if (a1 == 224) {
      return sub_19D763EE4();
    }
  }
  else
  {
    switch(a1)
    {
      case 256:
        return sub_19D763EF8();
      case 384:
        return sub_19D763F0C();
      case 521:
        return sub_19D763F10();
    }
  }
  return 0;
}

uint64_t sub_19D76506C(uint64_t a1)
{
  BOOL v4 = sub_19D76CDE0();
  uint64_t v2 = 1;
  if (a1 <= 255)
  {
    if (a1 != 192 && a1 != 224) {
      goto LABEL_8;
    }
  }
  else if (a1 != 256 && a1 != 384 && a1 != 521)
  {
LABEL_8:
    uint64_t v2 = 0;
  }
  sub_19D76EF94((unsigned int *)&v4);
  return v2;
}

int8x16_t *sub_19D765130(int8x16_t *a1, int8x16_t *a2, uint64_t a3, int8x16_t *a4, int8x16_t *a5, uint64_t a6)
{
  int v6 = a5[15].i32[0];
  BOOL v8 = __OFSUB__(a3, 128);
  BOOL v7 = a3 - 128 < 0;
  uint64_t v9 = a3 - 128;
  if (v7 != v8) {
    return sub_19D7655CC(a1, a2, v9, a4, a5, a6, v6);
  }
  else {
    return (int8x16_t *)sub_19D765180(a1, a2, v9, (uint64_t)a4, a5, a6, v6);
  }
}

uint64_t sub_19D765180(_OWORD *a1, int8x16_t *a2, uint64_t a3, uint64_t a4, int8x16_t *a5, uint64_t a6, int a7)
{
  do
  {
    int64x2_t v8 = vaddq_s64(v7, vaddq_s64(v7, vaddq_s64(v7, vaddq_s64(v7, v8))));
    _Q20 = *a5;
    __asm
    {
      AESE            V22.16B, V20.16B
      AESMC           V22.16B, V22.16B
      AESE            V23.16B, V20.16B
      AESMC           V23.16B, V23.16B
      AESE            V24.16B, V20.16B
      AESMC           V24.16B, V24.16B
      AESE            V25.16B, V20.16B
      AESMC           V25.16B, V25.16B
      AESE            V26.16B, V20.16B
      AESMC           V26.16B, V26.16B
      AESE            V27.16B, V20.16B
      AESMC           V27.16B, V27.16B
      AESE            V28.16B, V20.16B
      AESMC           V28.16B, V28.16B
      AESE            V29.16B, V20.16B
      AESMC           V29.16B, V29.16B
    }
    _Q20 = a5[1];
    __asm
    {
      AESE            V22.16B, V20.16B
      AESMC           V22.16B, V22.16B
      AESE            V23.16B, V20.16B
      AESMC           V23.16B, V23.16B
      AESE            V24.16B, V20.16B
      AESMC           V24.16B, V24.16B
      AESE            V25.16B, V20.16B
      AESMC           V25.16B, V25.16B
      AESE            V26.16B, V20.16B
      AESMC           V26.16B, V26.16B
      AESE            V27.16B, V20.16B
      AESMC           V27.16B, V27.16B
      AESE            V28.16B, V20.16B
      AESMC           V28.16B, V28.16B
      AESE            V29.16B, V20.16B
      AESMC           V29.16B, V29.16B
    }
    _Q20 = a5[2];
    __asm
    {
      AESE            V22.16B, V20.16B
      AESMC           V22.16B, V22.16B
      AESE            V23.16B, V20.16B
      AESMC           V23.16B, V23.16B
      AESE            V24.16B, V20.16B
      AESMC           V24.16B, V24.16B
      AESE            V25.16B, V20.16B
      AESMC           V25.16B, V25.16B
      AESE            V26.16B, V20.16B
      AESMC           V26.16B, V26.16B
      AESE            V27.16B, V20.16B
      AESMC           V27.16B, V27.16B
      AESE            V28.16B, V20.16B
      AESMC           V28.16B, V28.16B
      AESE            V29.16B, V20.16B
      AESMC           V29.16B, V29.16B
    }
    _Q20 = a5[3];
    __asm
    {
      AESE            V22.16B, V20.16B
      AESMC           V22.16B, V22.16B
      AESE            V23.16B, V20.16B
      AESMC           V23.16B, V23.16B
      AESE            V24.16B, V20.16B
      AESMC           V24.16B, V24.16B
      AESE            V25.16B, V20.16B
      AESMC           V25.16B, V25.16B
      AESE            V26.16B, V20.16B
      AESMC           V26.16B, V26.16B
      AESE            V27.16B, V20.16B
      AESMC           V27.16B, V27.16B
      AESE            V28.16B, V20.16B
      AESMC           V28.16B, V28.16B
      AESE            V29.16B, V20.16B
      AESMC           V29.16B, V29.16B
    }
    _Q20 = a5[4];
    __asm
    {
      AESE            V22.16B, V20.16B
      AESMC           V22.16B, V22.16B
      AESE            V23.16B, V20.16B
      AESMC           V23.16B, V23.16B
      AESE            V24.16B, V20.16B
      AESMC           V24.16B, V24.16B
      AESE            V25.16B, V20.16B
      AESMC           V25.16B, V25.16B
      AESE            V26.16B, V20.16B
      AESMC           V26.16B, V26.16B
      AESE            V27.16B, V20.16B
      AESMC           V27.16B, V27.16B
      AESE            V28.16B, V20.16B
      AESMC           V28.16B, V28.16B
      AESE            V29.16B, V20.16B
      AESMC           V29.16B, V29.16B
    }
    _Q20 = a5[5];
    __asm
    {
      AESE            V22.16B, V20.16B
      AESMC           V22.16B, V22.16B
      AESE            V23.16B, V20.16B
      AESMC           V23.16B, V23.16B
      AESE            V24.16B, V20.16B
      AESMC           V24.16B, V24.16B
      AESE            V25.16B, V20.16B
      AESMC           V25.16B, V25.16B
      AESE            V26.16B, V20.16B
      AESMC           V26.16B, V26.16B
      AESE            V27.16B, V20.16B
      AESMC           V27.16B, V27.16B
      AESE            V28.16B, V20.16B
      AESMC           V28.16B, V28.16B
      AESE            V29.16B, V20.16B
      AESMC           V29.16B, V29.16B
    }
    _Q20 = a5[6];
    __asm
    {
      AESE            V22.16B, V20.16B
      AESMC           V22.16B, V22.16B
      AESE            V23.16B, V20.16B
      AESMC           V23.16B, V23.16B
      AESE            V24.16B, V20.16B
      AESMC           V24.16B, V24.16B
      AESE            V25.16B, V20.16B
      AESMC           V25.16B, V25.16B
      AESE            V26.16B, V20.16B
      AESMC           V26.16B, V26.16B
      AESE            V27.16B, V20.16B
      AESMC           V27.16B, V27.16B
      AESE            V28.16B, V20.16B
      AESMC           V28.16B, V28.16B
      AESE            V29.16B, V20.16B
      AESMC           V29.16B, V29.16B
    }
    _Q20 = a5[7];
    __asm
    {
      AESE            V22.16B, V20.16B
      AESMC           V22.16B, V22.16B
      AESE            V23.16B, V20.16B
      AESMC           V23.16B, V23.16B
      AESE            V24.16B, V20.16B
      AESMC           V24.16B, V24.16B
      AESE            V25.16B, V20.16B
      AESMC           V25.16B, V25.16B
      AESE            V26.16B, V20.16B
      AESMC           V26.16B, V26.16B
      AESE            V27.16B, V20.16B
      AESMC           V27.16B, V27.16B
      AESE            V28.16B, V20.16B
      AESMC           V28.16B, V28.16B
      AESE            V29.16B, V20.16B
      AESMC           V29.16B, V29.16B
    }
    _Q20 = a5[8];
    __asm
    {
      AESE            V22.16B, V20.16B
      AESMC           V22.16B, V22.16B
      AESE            V23.16B, V20.16B
      AESMC           V23.16B, V23.16B
      AESE            V24.16B, V20.16B
      AESMC           V24.16B, V24.16B
      AESE            V25.16B, V20.16B
      AESMC           V25.16B, V25.16B
      AESE            V26.16B, V20.16B
      AESMC           V26.16B, V26.16B
      AESE            V27.16B, V20.16B
      AESMC           V27.16B, V27.16B
      AESE            V28.16B, V20.16B
      AESMC           V28.16B, V28.16B
      AESE            V29.16B, V20.16B
      AESMC           V29.16B, V29.16B
    }
    _Q20 = a5[9];
    int8x16_t v167 = a5[10];
    if (a7 > 160)
    {
      __asm
      {
        AESE            V22.16B, V20.16B
        AESMC           V22.16B, V22.16B
        AESE            V23.16B, V20.16B
        AESMC           V23.16B, V23.16B
        AESE            V24.16B, V20.16B
        AESMC           V24.16B, V24.16B
        AESE            V25.16B, V20.16B
        AESMC           V25.16B, V25.16B
        AESE            V26.16B, V20.16B
        AESMC           V26.16B, V26.16B
        AESE            V27.16B, V20.16B
        AESMC           V27.16B, V27.16B
        AESE            V28.16B, V20.16B
        AESMC           V28.16B, V28.16B
        AESE            V29.16B, V20.16B
        AESMC           V29.16B, V29.16B
      }
      _Q20 = a5[10];
      __asm
      {
        AESE            V22.16B, V20.16B
        AESMC           V22.16B, V22.16B
        AESE            V23.16B, V20.16B
        AESMC           V23.16B, V23.16B
        AESE            V24.16B, V20.16B
        AESMC           V24.16B, V24.16B
        AESE            V25.16B, V20.16B
        AESMC           V25.16B, V25.16B
        AESE            V26.16B, V20.16B
        AESMC           V26.16B, V26.16B
        AESE            V27.16B, V20.16B
        AESMC           V27.16B, V27.16B
        AESE            V28.16B, V20.16B
        AESMC           V28.16B, V28.16B
        AESE            V29.16B, V20.16B
        AESMC           V29.16B, V29.16B
      }
      _Q20 = a5[11];
      int8x16_t v167 = a5[12];
      if (a7 > 192)
      {
        __asm
        {
          AESE            V22.16B, V20.16B
          AESMC           V22.16B, V22.16B
          AESE            V23.16B, V20.16B
          AESMC           V23.16B, V23.16B
          AESE            V24.16B, V20.16B
          AESMC           V24.16B, V24.16B
          AESE            V25.16B, V20.16B
          AESMC           V25.16B, V25.16B
          AESE            V26.16B, V20.16B
          AESMC           V26.16B, V26.16B
          AESE            V27.16B, V20.16B
          AESMC           V27.16B, V27.16B
          AESE            V28.16B, V20.16B
          AESMC           V28.16B, V28.16B
          AESE            V29.16B, V20.16B
          AESMC           V29.16B, V29.16B
        }
        _Q20 = a5[12];
        __asm
        {
          AESE            V22.16B, V20.16B
          AESMC           V22.16B, V22.16B
          AESE            V23.16B, V20.16B
          AESMC           V23.16B, V23.16B
          AESE            V24.16B, V20.16B
          AESMC           V24.16B, V24.16B
          AESE            V25.16B, V20.16B
          AESMC           V25.16B, V25.16B
          AESE            V26.16B, V20.16B
          AESMC           V26.16B, V26.16B
          AESE            V27.16B, V20.16B
          AESMC           V27.16B, V27.16B
          AESE            V28.16B, V20.16B
          AESMC           V28.16B, V28.16B
          AESE            V29.16B, V20.16B
          AESMC           V29.16B, V29.16B
        }
        _Q20 = a5[13];
        int8x16_t v167 = a5[14];
      }
    }
    int8x16_t v235 = *(int8x16_t *)a1;
    int8x16_t v236 = *((int8x16_t *)a1 + 1);
    int8x16_t v237 = *((int8x16_t *)a1 + 2);
    int8x16_t v238 = *((int8x16_t *)a1 + 3);
    uint64_t v234 = a1 + 4;
    __asm
    {
      AESE            V22.16B, V20.16B
      AESE            V23.16B, V20.16B
      AESE            V24.16B, V20.16B
      AESE            V25.16B, V20.16B
    }
    int8x16_t v243 = veorq_s8(v235, veorq_s8(_Q22, v167));
    int8x16_t v244 = veorq_s8(v236, veorq_s8(_Q23, v167));
    int8x16_t v245 = veorq_s8(v237, veorq_s8(_Q24, v167));
    int8x16_t v246 = veorq_s8(v238, veorq_s8(_Q25, v167));
    int8x16_t v247 = *(int8x16_t *)v234;
    int8x16_t v248 = *((int8x16_t *)v234 + 1);
    int8x16_t v249 = *((int8x16_t *)v234 + 2);
    int8x16_t v250 = *((int8x16_t *)v234 + 3);
    a1 = v234 + 4;
    __asm
    {
      AESE            V26.16B, V20.16B
      AESE            V27.16B, V20.16B
      AESE            V28.16B, V20.16B
      AESE            V29.16B, V20.16B
    }
    *a2 = v243;
    a2[1] = v244;
    a2[2] = v245;
    a2[3] = v246;
    uint64_t v255 = a2 + 4;
    *uint64_t v255 = veorq_s8(v247, veorq_s8(_Q26, v167));
    v255[1] = veorq_s8(v248, veorq_s8(_Q27, v167));
    v255[2] = veorq_s8(v249, veorq_s8(_Q28, v167));
    v255[3] = veorq_s8(v250, veorq_s8(_Q29, v167));
    a2 = v255 + 4;
    _VF = __OFSUB__(a3, 128);
    _NF = a3 - 128 < 0;
    a3 -= 128;
  }
  while (_NF == _VF);
  return sub_19D7655CC();
}

int8x16_t *sub_19D7655CC(int8x16_t *result, int8x16_t *a2, uint64_t a3, int8x16_t *a4, int8x16_t *a5, uint64_t a6, int a7)
{
  BOOL v10 = a3 < -112;
  for (uint64_t i = a3 + 112; !v10; i -= 16)
  {
    _Q4 = *a5;
    _Q5 = a5[1];
    _Q6 = a5[2];
    int64x2_t v9 = vaddq_s64(v7, v9);
    __asm
    {
      AESE            V7.16B, V4.16B
      AESMC           V7.16B, V7.16B
      AESE            V7.16B, V5.16B
      AESMC           V7.16B, V7.16B
      AESE            V7.16B, V6.16B
      AESMC           V7.16B, V7.16B
    }
    _Q4 = a5[3];
    _Q5 = a5[4];
    _Q6 = a5[5];
    __asm
    {
      AESE            V7.16B, V4.16B
      AESMC           V7.16B, V7.16B
      AESE            V7.16B, V5.16B
      AESMC           V7.16B, V7.16B
      AESE            V7.16B, V6.16B
      AESMC           V7.16B, V7.16B
    }
    _Q4 = a5[6];
    _Q5 = a5[7];
    _Q6 = a5[8];
    __asm
    {
      AESE            V7.16B, V4.16B
      AESMC           V7.16B, V7.16B
      AESE            V7.16B, V5.16B
      AESMC           V7.16B, V7.16B
      AESE            V7.16B, V6.16B
      AESMC           V7.16B, V7.16B
    }
    _Q20 = a5[9];
    _Q21 = a5[10];
    if (a7 > 160)
    {
      __asm
      {
        AESE            V7.16B, V20.16B
        AESMC           V7.16B, V7.16B
        AESE            V7.16B, V21.16B
        AESMC           V7.16B, V7.16B
      }
      _Q20 = a5[11];
      _Q21 = a5[12];
      if (a7 > 192)
      {
        __asm
        {
          AESE            V7.16B, V20.16B
          AESMC           V7.16B, V7.16B
          AESE            V7.16B, V21.16B
          AESMC           V7.16B, V7.16B
        }
        _Q20 = a5[13];
        _Q21 = a5[14];
      }
    }
    __asm { AESE            V7.16B, V20.16B }
    int8x16_t v54 = *result++;
    *a2++ = veorq_s8(v54, veorq_s8(_Q7, _Q21));
    BOOL v10 = i < 16;
  }
  *a4 = vqtbl1q_s8((int8x16_t)v9, v8);
  return result;
}

uint64_t sub_19D76569C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *a2;
  uint64_t v8 = *(void *)(a1 + 16);
  (*(void (**)(uint64_t, void))(a1 + 24))(a1, *a2);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v7);
  if ((sub_19D76899C(*a2, a4, a2 + 3) & 0x80000000) != 0)
  {
    sub_19D763340(a1, (uint64_t)a2);
    sub_19D76ECEC(a1, (uint64_t)a2);
    sub_19D76EA6C(a1, (uint64_t)a2);
    sub_19D76DCC8(a1, (uint64_t)a2);
    sub_19D76DCC8(a1, (uint64_t)a2);
    sub_19D76ED98(a1, (uint64_t)a2);
    sub_19D76DCC8(a1, (uint64_t)a2);
    uint64_t result = sub_19D76813C(a1, (uint64_t)a2);
    if (!result)
    {
      sub_19D7634BC(a1, (uint64_t)a2);
      sub_19D7634BC(a1, (uint64_t)a2);
      uint64_t result = 0;
    }
  }
  else
  {
    uint64_t result = 4294967289;
  }
  *(void *)(a1 + 16) = v8;
  return result;
}

uint64_t sub_19D76581C(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t a4, char *a5, unint64_t a6, unsigned __int8 *a7, int a8, unsigned __int8 *a9)
{
  *(void *)a9 = 0;
  *((void *)a9 + 1) = 0;
  uint64_t v16 = a2 + 3;
  unint64_t v17 = *a2;
  unint64_t v18 = sub_19D76948C(*a2, a2 + 3);
  BOOL v19 = v18 >= a6;
  if (a8 != 2110636126) {
    BOOL v19 = v18 == a6;
  }
  if (v19)
  {
    uint64_t v26 = a3;
    uint64_t v27 = a5;
    uint64_t v20 = *(void *)(a1 + 16);
    unint64_t v21 = (void *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v17);
    BOOL v22 = (uint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v17);
    sub_19D76DA0C(8 * (*(void *)(a1 + 16) - v20), (void *)(*(void *)a1 + 8 * v20));
    unint64_t v23 = sub_19D76948C(v17, v16);
    if (sub_19D768F34(v17, v21, a6, a7))
    {
      int v24 = -23;
    }
    else
    {
      unsigned int v29 = sub_19D76A014(a1, a2, v22, (uint64_t)v21);
      if (v29)
      {
LABEL_9:
        *(void *)(a1 + 16) = v20;
        return v29;
      }
      sub_19D76CCEC(v17, (unint64_t *)v22);
      if (sub_19D7698E8(v23, (unsigned char *)&v22[v17] - v23, a4, v27, v26, a9)) {
        int v24 = -146;
      }
      else {
        int v24 = a9[8] ^ a9[4] ^ a9[3] ^ a9[13] ^ 0x89 ^ a9[15] ^ a9[10] ^ a9[1] ^ a9[11] ^ a9[14] ^ a9[6] ^ a9[2] ^ a9[9] ^ a9[12] ^ *a9 ^ a9[7] ^ a9[5];
      }
    }
    unsigned int v29 = v24;
    goto LABEL_9;
  }
  return 4294967273;
}

uint64_t sub_19D765AAC(uint64_t a1, uint64_t *a2, uint64_t *a3, unsigned char *a4, unint64_t a5, uint64_t *a6)
{
  BOOL v12 = a2 + 4;
  if (sub_19D767AF4((uint64_t)&a2[5 * *a2 + 4]) < a5) {
    return 4294967289;
  }
  uint64_t v51 = a3;
  __src = a4;
  int8x16_t v54 = v12;
  uint64_t v14 = *a2;
  unint64_t v15 = (a5 + 63) >> 6;
  uint64_t v53 = *(void *)(a1 + 16);
  uint64_t v16 = 3 * *a2;
  unint64_t v17 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v16);
  unint64_t v18 = (int8x16_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v14);
  BOOL v55 = sub_19D768DDC(v14, a6) == 0;
  if (a5 + 63 >= 0x40) {
    sub_19D768F38((a5 + 63) >> 6, v18, a4);
  }
  sub_19D76CCD4(v14 - v15, (char *)v18 + 8 * v15);
  v18->i64[v15 - 1] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)a5;
  unint64_t v50 = (a5 + 63) >> 6;
  long long v57 = v18;
  sub_19D768F4C(v50, v18, v18, v55);
  sub_19D764024(a1, a2);
  sub_19D7686D0(3 * v14, !v55, v17, a6, v17);
  if (!sub_19D768DDC(v14, v17))
  {
LABEL_13:
    uint64_t result = 0xFFFFFFFFLL;
    goto LABEL_16;
  }
  if (sub_19D767AF4((uint64_t)&v54[5 * *a2]) >= a5)
  {
    unint64_t v19 = *a2;
    if (sub_19D768DDC(*a2, v17))
    {
      uint64_t v47 = v16;
      uint64_t v45 = *(void *)(a1 + 16);
      uint64_t v20 = (*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, 2 * v19);
      unint64_t v49 = v19;
      unint64_t v21 = (uint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, 2 * v19);
      uint64_t v56 = 2 * v19;
      uint64_t v22 = (*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, 2 * v19);
      uint64_t v23 = *a2;
      uint64_t v42 = *(void *)(a1 + 16);
      __dst = (void *)v22;
      (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, *a2);
      (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v23);
      (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v23);
      sub_19D76ECEC(a1, (uint64_t)a2);
      sub_19D76DCC8(a1, (uint64_t)a2);
      sub_19D76DCC8(a1, (uint64_t)a2);
      sub_19D76ECEC(a1, (uint64_t)a2);
      sub_19D76ECEC(a1, (uint64_t)a2);
      sub_19D76DCC8(a1, (uint64_t)a2);
      sub_19D76DCC8(a1, (uint64_t)a2);
      sub_19D76ED98(a1, (uint64_t)a2);
      sub_19D76ECEC(a1, (uint64_t)a2);
      sub_19D76DCC8(a1, (uint64_t)a2);
      sub_19D76DCC8(a1, (uint64_t)a2);
      uint64_t v46 = v17;
      sub_19D76EA6C(a1, (uint64_t)a2);
      sub_19D76ECEC(a1, (uint64_t)a2);
      sub_19D76ED98(a1, (uint64_t)a2);
      sub_19D76ED98(a1, (uint64_t)a2);
      uint64_t v24 = a1;
      uint64_t v25 = a1;
      uint64_t v26 = (uint64_t *)v20;
      sub_19D76ED98(v24, (uint64_t)a2);
      sub_19D76EA6C(v25, (uint64_t)a2);
      sub_19D76ECEC(v25, (uint64_t)a2);
      sub_19D76DCC8(v25, (uint64_t)a2);
      sub_19D76ED98(v25, (uint64_t)a2);
      uint64_t v48 = v25;
      *(void *)(v25 + 16) = v42;
      uint64_t v27 = v18;
      unint64_t v28 = *(unint64_t *)((char *)v18->i64 + (((a5 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (a5
                                                                                                 - 1);
      char v29 = v28 & 1;
      unsigned __int8 v30 = !(v28 & 1);
      unint64_t v31 = a5 - 2;
      if (a5 == 2)
      {
        char v43 = !(v28 & 1);
        LOBYTE(v32) = v28 & 1;
      }
      else
      {
        LOBYTE(v32) = v28 & 1;
        do
        {
          char v33 = v32;
          uint64_t v32 = (*(unint64_t *)((char *)v27->i64 + ((v31 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v31) & 1;
          sub_19D7633F4((uint64_t)a2, v30, &v21[v49], &v21[v49]);
          sub_19D762DA0(v56, v32 ^ v33 | v29 ^ 1, v26, v21);
          sub_19D7662F0(v25, a2);
          sub_19D766540(v25, a2);
          unsigned __int8 v30 = v32 & (v29 ^ 1);
          uint64_t v27 = v18;
          v29 |= v32;
          --v31;
        }
        while (v31);
        char v43 = v29 ^ 1;
      }
      sub_19D7633F4((uint64_t)a2, v30, &v21[v49], &v21[v49]);
      sub_19D762DA0(v56, v27->i8[0] & 1 ^ v32, v26, v21);
      sub_19D7662F0(v25, a2);
      sub_19D768F38(v56, __dst, v21);
      uint64_t v41 = v27->i64[0] & 1;
      sub_19D762DA0(v56, v27->i8[0] & 1, v26, v21);
      unsigned int v34 = v26;
      a1 = v25;
      uint64_t v35 = v51;
      uint64_t v40 = *(void *)(v25 + 16);
      sub_19D76ED98(v25, (uint64_t)a2);
      sub_19D76EA6C(v25, (uint64_t)a2);
      sub_19D76EA6C(v25, (uint64_t)a2);
      sub_19D76EA6C(v25, (uint64_t)a2);
      sub_19D76EA6C(v25, (uint64_t)a2);
      sub_19D76ECEC(v25, (uint64_t)a2);
      sub_19D76EA6C(v25, (uint64_t)a2);
      *(void *)(v25 + 16) = v40;
      sub_19D762DA0(v56, v41, v34, v21);
      sub_19D766540(v25, a2);
      sub_19D7686D0(v56, v41, v34, v21, v34);
      sub_19D76EA6C(v25, (uint64_t)a2);
      sub_19D76EA6C(v25, (uint64_t)a2);
      uint64_t v36 = (unint64_t *)sub_19D76ECF8((uint64_t)&v54[5 * *a2]);
      sub_19D76945C(v49, __dst, v36, 1uLL);
      unsigned __int8 v37 = (sub_19D767C14(v50, (uint64_t)v57, v49, (uint64_t)__dst) & 1) == 0;
      BOOL v38 = sub_19D7682F4(a2, (uint64_t)v46);
      sub_19D7686D0(3 * v49, v43 | v38 | v37, v35, v46, v35);
      sub_19D7633F4((uint64_t)a2, v37, &v35[*a2], &v35[*a2]);
      char v39 = v43 & ~v57->i32[0] & 1;
      sub_19D76C464(v49, v39, &v51[2 * *a2]);
      sub_19D76CCDC(v49, v34, 1);
      sub_19D763340(v48, (uint64_t)a2);
      sub_19D7686D0(v49, v39, v35, v34, v35);
      sub_19D7686D0(v49, v39, &v35[*a2], v34, &v35[*a2]);
      *(void *)(v48 + 16) = v45;
      sub_19D764EA8(v48, (uint64_t)a2);
      sub_19D7686D0(v47, *__src & v55, v35, v46, v35);
      uint64_t result = 0;
      goto LABEL_16;
    }
    goto LABEL_13;
  }
  uint64_t result = 4294967289;
LABEL_16:
  *(void *)(a1 + 16) = v53;
  return result;
}

uint64_t sub_19D7662E4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a2 + 16) + 96))();
}

uint64_t sub_19D7662F0(uint64_t a1, void *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *(void *)(a1 + 16);
  (*(void (**)(uint64_t, void))(a1 + 24))(a1, *a2);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v4);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v4);
  sub_19D76ED98(a1, (uint64_t)a2);
  sub_19D76ECEC(a1, (uint64_t)a2);
  sub_19D76EA6C(a1, (uint64_t)a2);
  sub_19D76EA6C(a1, (uint64_t)a2);
  sub_19D76DCC8(a1, (uint64_t)a2);
  sub_19D76ED98(a1, (uint64_t)a2);
  sub_19D76ED98(a1, (uint64_t)a2);
  sub_19D76EA6C(a1, (uint64_t)a2);
  sub_19D76DCC8(a1, (uint64_t)a2);
  sub_19D76ECEC(a1, (uint64_t)a2);
  sub_19D76ED98(a1, (uint64_t)a2);
  sub_19D76ED98(a1, (uint64_t)a2);
  sub_19D76EA6C(a1, (uint64_t)a2);
  sub_19D76ED98(a1, (uint64_t)a2);
  sub_19D76ECEC(a1, (uint64_t)a2);
  sub_19D76ED98(a1, (uint64_t)a2);
  sub_19D76ED98(a1, (uint64_t)a2);
  sub_19D76EA6C(a1, (uint64_t)a2);
  uint64_t result = sub_19D76ED98(a1, (uint64_t)a2);
  *(void *)(a1 + 16) = v5;
  return result;
}

uint64_t sub_19D766540(uint64_t a1, void *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *(void *)(a1 + 16);
  (*(void (**)(uint64_t, void))(a1 + 24))(a1, *a2);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v4);
  sub_19D76ED98(a1, (uint64_t)a2);
  sub_19D76ECEC(a1, (uint64_t)a2);
  sub_19D76EA6C(a1, (uint64_t)a2);
  sub_19D76EA6C(a1, (uint64_t)a2);
  sub_19D76ED98(a1, (uint64_t)a2);
  sub_19D76ECEC(a1, (uint64_t)a2);
  sub_19D76ED98(a1, (uint64_t)a2);
  sub_19D76ED98(a1, (uint64_t)a2);
  sub_19D76ED98(a1, (uint64_t)a2);
  sub_19D76EA6C(a1, (uint64_t)a2);
  sub_19D76ED98(a1, (uint64_t)a2);
  sub_19D76EA6C(a1, (uint64_t)a2);
  uint64_t result = sub_19D76ED98(a1, (uint64_t)a2);
  *(void *)(a1 + 16) = v5;
  return result;
}

unint64_t sub_19D7666F0(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t a4)
{
  unint64_t v4 = 0;
  if (a1)
  {
    unint64_t v5 = *a3++;
    unint64_t v4 = (v5 * (unsigned __int128)a4 + *a2) >> 64;
    *a2++ += v5 * a4;
    --a1;
  }
  if ((a1 & 2) != 0)
  {
    unint64_t v6 = *a3;
    unint64_t v7 = a3[1];
    a3 += 2;
    unsigned long long v8 = *(_OWORD *)a2 + __PAIR128__(v7 * a4, v4);
    unsigned long long v9 = v8 + v6 * (unsigned __int128)a4;
    unint64_t v4 = (__CFADD__(__CFADD__((void)v8, v6 * a4), *((void *)&v8 + 1)) | __CFADD__((v6* (unsigned __int128)a4) >> 64, *((void *)&v9 + 1)))+ (__CFADD__(__CFADD__(*a2, v4), a2[1]) | __CFADD__(v7 * a4, *((void *)&v8 + 1)))+ ((v7 * (unsigned __int128)a4) >> 64);
    *(_OWORD *)a2 = v9;
    a2 += 2;
    a1 -= 2;
  }
  while (1)
  {
    BOOL v10 = a1 < 4;
    a1 -= 4;
    if (v10) {
      break;
    }
    unint64_t v11 = a2[2];
    unint64_t v12 = a2[3];
    unint64_t v14 = *a3;
    unint64_t v15 = a3[1];
    uint64_t v13 = a3 + 2;
    unint64_t v16 = *v13;
    unint64_t v17 = v13[1];
    a3 = v13 + 2;
    uint64_t v18 = (v15 * (unsigned __int128)a4) >> 64;
    unsigned long long v19 = *(_OWORD *)a2 + __PAIR128__(v15 * a4, v4);
    BOOL v20 = __CFADD__(__CFADD__(__CFADD__(*a2, v4), a2[1]) | __CFADD__(v15 * a4, *((void *)&v19 + 1)), v11);
    unint64_t v21 = (__CFADD__(__CFADD__(*a2, v4), a2[1]) | __CFADD__(v15 * a4, *((void *)&v19 + 1))) + v11;
    v20 |= __CFADD__(v18, v21);
    v21 += v18;
    BOOL v23 = v20;
    BOOL v20 = __CFADD__(v20, v12);
    unint64_t v22 = v23 + v12;
    v20 |= __CFADD__(v17 * a4, v22);
    v22 += v17 * a4;
    uint64_t v24 = v20 + ((v17 * (unsigned __int128)a4) >> 64);
    unsigned long long v25 = v19 + v14 * (unsigned __int128)a4;
    *(_OWORD *)a2 = v25;
    uint64_t v26 = a2 + 2;
    uint64_t v27 = (v16 * (unsigned __int128)a4) >> 64;
    uint64_t v29 = __CFADD__(__CFADD__((void)v19, v14 * a4), *((void *)&v19 + 1)) | __CFADD__((v14* (unsigned __int128)a4) >> 64, *((void *)&v25 + 1));
    BOOL v20 = __CFADD__(v29, v21);
    uint64_t v28 = v29 + v21;
    uint64_t v31 = v20 | __CFADD__(v16 * a4, v28);
    BOOL v20 = __CFADD__(v31, v22);
    uint64_t v30 = v31 + v22;
    unint64_t v4 = (v20 | __CFADD__(v27, v30)) + v24;
    *uint64_t v26 = v16 * a4 + v28;
    v26[1] = v27 + v30;
    a2 = v26 + 2;
  }
  return v4;
}

uint64_t (**sub_19D7667D4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(void, unint64_t, uint64_t)))(void, unint64_t, uint64_t)
{
  unint64_t v5 = a5;
  uint64_t v9 = *(void *)(a1 + 16);
  if (a5)
  {
    uint64_t v10 = sub_19D767AF4((uint64_t)a2);
    unint64_t v5 = (uint64_t (**)(void, unint64_t, uint64_t))sub_19D768DE0(v10 - 1, a3 + 16 * *a2, v5);
    sub_19D76CCA4(a3 + 16 * *a2, v10 - 2, 1);
    sub_19D76ECEC(a1, (uint64_t)a2);
    sub_19D76EA6C(a1, (uint64_t)a2);
    sub_19D76EA6C(a1, (uint64_t)a2);
    sub_19D76EA6C(a1, (uint64_t)a2);
  }
  else
  {
    sub_19D76CCDC(*a2, (void *)(a3 + 16 * *a2), 1);
    sub_19D763340(a1, (uint64_t)a2);
  }
  sub_19D763340(a1, (uint64_t)a2);
  sub_19D763340(a1, (uint64_t)a2);
  *(void *)(a1 + 16) = v9;
  return v5;
}

uint64_t sub_19D766940(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a2 + 16) + 72))();
}

uint64_t sub_19D76694C(uint64_t a1, uint64_t *a2, char *a3, unint64_t *a4, uint64_t a5, unint64_t *a6, char *a7)
{
  v28[1] = *MEMORY[0x1E4F143B8];
  unint64_t v12 = *a2;
  uint64_t v24 = *(void *)(a1 + 16);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, *a2);
  (*(void (**)(uint64_t, unint64_t))(a1 + 24))(a1, v12);
  uint64_t v13 = (void *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v12);
  uint64_t v25 = 3 * v12;
  uint64_t v14 = (*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, 12 * v12);
  unint64_t v15 = v14 + 48 * v12;
  uint64_t v26 = v14;
  uint64_t v16 = v14 + 72 * v12;
  sub_19D764EA8(a1, (uint64_t)a2);
  sub_19D764F70(a1, a2, v16, a5, a7);
  sub_19D76EA6C(a1, (uint64_t)a2);
  sub_19D76EA6C(a1, (uint64_t)a2);
  sub_19D76EA6C(a1, (uint64_t)a2);
  unsigned int v23 = sub_19D767AE0(a1, (uint64_t)a2);
  if (!v23)
  {
    sub_19D766D18(a1, a2);
    sub_19D766D18(a1, a2);
    sub_19D766D18(a1, a2);
    sub_19D766D18(a1, a2);
    sub_19D76CCDC(v12, v13, 1);
    sub_19D763340(a1, (uint64_t)a2);
    sub_19D768F38(v12, (void *)(v26 + 24 * v12 + 16 * *a2), (void *)(v26 + 16 * *a2));
    sub_19D768F38(v12, (void *)(v15 + 16 * *a2), (void *)(v26 + 16 * *a2));
    sub_19D768F38(v12, (void *)(v16 + 16 * *a2), (void *)(v26 + 16 * *a2));
    unint64_t v17 = sub_19D768998(v12, a4);
    unint64_t v18 = sub_19D768998(v12, a6);
    v27[1] = 0;
    void v27[2] = 0;
    if (v17 <= v18) {
      unint64_t v17 = v18;
    }
    v27[0] = 0;
    sub_19D76831C((uint64_t)v27, v17, (uint64_t)a4, (uint64_t)a6);
    sub_19D768F38(v12, a3, (void *)(v26 + 16 * *a2));
    sub_19D768F38(v12, &a3[8 * *a2], (void *)(v26 + 16 * *a2));
    sub_19D76DA0C(8 * v12, &a3[16 * *a2]);
    for (; v17 != -1; --v17)
    {
      sub_19D764024(a1, a2);
      v28[0] = 0;
      sub_19D7683F0((uint64_t)v27, v17, (uint64_t)v28);
      if (v28[0])
      {
        unsigned long long v19 = (char *)(v26 + 8 * sub_19D76850C(v28) * v25);
        if (sub_19D768528((unsigned int *)v28) == 1) {
          sub_19D764644(a1, a2, a3, (uint64_t)a3, v19);
        }
        else {
          sub_19D764EB4(a1, a2, a3, (uint64_t)a3, v19);
        }
      }
    }
  }
  *(void *)(a1 + 16) = v24;
  return v23;
}

uint64_t sub_19D766D18(uint64_t a1, void *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *(void *)(a1 + 16);
  (*(void (**)(uint64_t, void))(a1 + 24))(a1, *a2);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v4);
  sub_19D76EA6C(a1, (uint64_t)a2);
  sub_19D76EA6C(a1, (uint64_t)a2);
  sub_19D76ECEC(a1, (uint64_t)a2);
  sub_19D76EA6C(a1, (uint64_t)a2);
  sub_19D76EA6C(a1, (uint64_t)a2);
  uint64_t result = sub_19D76EA6C(a1, (uint64_t)a2);
  *(void *)(a1 + 16) = v5;
  return result;
}

uint64_t sub_19D766E2C(uint64_t a1, unint64_t **a2, unint64_t a3, unsigned __int8 *a4, uint64_t a5, unsigned __int8 *a6, void *a7)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (a7)
  {
    *a7 = 0;
    a7[1] = 0;
  }
  long long v19 = 0uLL;
  unint64_t v13 = **a2;
  uint64_t v14 = *(void *)(a1 + 16);
  unint64_t v15 = (uint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v13);
  uint64_t v16 = (uint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v13);
  if (sub_19D769A78(v13, v15, v16, a6, &a6[a5]) == &a6[a5])
  {
    uint64_t result = sub_19D76D390(a1, a2, a3, a4, v15, v16, (uint64_t)&v19);
    if (a7 && !result) {
      *(_OWORD *)a7 = v19;
    }
  }
  else
  {
    uint64_t result = 4294967289;
  }
  *(void *)(a1 + 16) = v14;
  return result;
}

uint64_t sub_19D766F54(unint64_t **a1, unint64_t a2, unsigned __int8 *a3, uint64_t a4, unsigned __int8 *a5, BOOL *a6)
{
  BOOL v19 = sub_19D76CDE0();
  *a6 = 0;
  v17[0] = sub_19D76EDB0(376 * **a1);
  v17[1] = 47 * **a1;
  void v17[2] = 0;
  unint64_t v17[3] = sub_19D76EDEC;
  unint64_t v18 = sub_19D76EE34;
  if (v17[0])
  {
    unsigned int v12 = sub_19D766E2C((uint64_t)v17, a1, a2, a3, a4, a5, 0);
    v18((uint64_t)v17);
    if (v12 == -146) {
      unsigned int v13 = 0;
    }
    else {
      unsigned int v13 = v12;
    }
    BOOL v14 = v12 == 0;
    if (v12) {
      uint64_t v15 = v13;
    }
    else {
      uint64_t v15 = 0;
    }
    *a6 = v14;
  }
  else
  {
    uint64_t v15 = 4294967283;
  }
  sub_19D76EF94((unsigned int *)&v19);
  return v15;
}

unint64_t sub_19D767064(uint64_t a1, char *a2, char *a3)
{
  if (!a1) {
    return 1;
  }
  unsigned __int8 v3 = 0;
  do
  {
    char v5 = *a2++;
    char v4 = v5;
    char v6 = *a3++;
    v3 |= v6 ^ v4;
    --a1;
  }
  while (a1);
  return ((unint64_t)v3 + 0xFFFFFFFF) >> 32;
}

unint64_t sub_19D76709C(uint64_t a1, char *a2, char *a3)
{
  BOOL v12 = sub_19D76CDE0();
  if (a1)
  {
    unsigned __int8 v6 = 0;
    do
    {
      char v8 = *a2++;
      char v7 = v8;
      char v9 = *a3++;
      v6 |= v9 ^ v7;
      --a1;
    }
    while (a1);
    unint64_t v10 = ((unint64_t)v6 + 0xFFFFFFFF) >> 32;
  }
  else
  {
    unint64_t v10 = 1;
  }
  sub_19D76EF94((unsigned int *)&v12);
  return v10;
}

uint64_t sub_19D767120(uint64_t a1)
{
  if (a1 <= 64)
  {
    if (a1 == 49) {
      return 192;
    }
    if (a1 == 57) {
      return 224;
    }
  }
  else
  {
    switch(a1)
    {
      case 65:
        return 256;
      case 97:
        return 384;
      case 133:
        return 521;
    }
  }
  return 0;
}

uint64_t sub_19D767180(uint64_t a1, unint64_t *a2, uint64_t a3, unsigned __int8 *a4, unint64_t **a5)
{
  if (!a3) {
    return 4294967289;
  }
  if (a3 == 1)
  {
    int v10 = *a4;
    if (!*a4) {
      return 4294967136;
    }
  }
  else
  {
    int v10 = *a4;
  }
  unsigned int v12 = v10 - 2;
  if (v12 > 5 || ((0x37u >> v12) & 1) == 0) {
    return 4294967289;
  }
  int v13 = dword_19D77AF60[(char)v12];
  uint64_t v14 = *(void *)(a1 + 16);
  *a5 = a2;
  uint64_t result = sub_19D76A418(a1, a2, v13, a3, a4, a5 + 2);
  if (!result)
  {
    sub_19D76CCDC(*a2, &a5[2 * **a5 + 2], 1);
    uint64_t v15 = (*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, 3 * *a2);
    uint64_t result = sub_19D76EE88(a1, (uint64_t *)a2, v15, (uint64_t)(a5 + 2));
  }
  *(void *)(a1 + 16) = v14;
  return result;
}

uint64_t sub_19D767284(unint64_t *a1, uint64_t a2, unsigned __int8 *a3, unint64_t **a4)
{
  char v8 = sub_19D76EDB0(160 * *a1);
  uint64_t v9 = 20 * *a1;
  v12[0] = v8;
  v12[1] = v9;
  void v12[2] = 0;
  void v12[3] = sub_19D76EDEC;
  int v13 = sub_19D76EE34;
  if (!v8) {
    return 4294967283;
  }
  uint64_t v10 = sub_19D767180((uint64_t)v12, a1, a2, a3, a4);
  v13((uint64_t)v12);
  return v10;
}

BOOL sub_19D76733C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  if (a1)
  {
    unsigned __int8 v3 = a2;
    uint64_t v4 = a1;
    do
    {
      uint64_t v5 = *a3++;
      *v3++ = ~v5;
      --v4;
    }
    while (v4);
  }
  return sub_19D7686B0(0, a1, a2, a2, 1);
}

uint64_t sub_19D767374(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v6 = a2;
  unint64_t v8 = sub_19D767AEC(a2);
  uint64_t v9 = sub_19D76ECF8(v6);
  if ((sub_19D76899C(v8, a4, v9) & 0x80000000) == 0) {
    return 4294967289;
  }
  uint64_t v46 = *(void *)(a1 + 16);
  __s = a3;
  unint64_t v11 = (void *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v8);
  unsigned int v12 = (void *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v8);
  sub_19D7634BC(a1, v6);
  int v13 = (void *)sub_19D76ECF8(v6);
  sub_19D768F38(v8, v12, v13);
  uint64_t v14 = (uint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v8);
  uint64_t v15 = (uint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v8);
  uint64_t v53 = v14;
  sub_19D76CCDC(v8, v14, 1);
  uint64_t __n = 8 * v8;
  int8x16_t v54 = v15;
  sub_19D76DA0C(8 * v8, v15);
  uint64_t v52 = (void *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v8);
  unint64_t v16 = (v8 << 7) | 0x1E;
  if (v16 != 30)
  {
    uint64_t v17 = 0;
    unint64_t v49 = v8 - 1;
    unint64_t v50 = v16 / 0x1F;
    unint64_t v48 = v8 - 2;
    uint64_t v51 = (void *)v6;
    uint64_t v56 = v8;
    do
    {
      uint64_t v18 = v11[v49];
      uint64_t v19 = v12[v49];
      uint64_t v55 = v17;
      if (v8 >= 2)
      {
        unint64_t v20 = v48;
        do
        {
          char v21 = __clz(v19 | v18 | 1);
          char v22 = (((v19 | v18) >> 63) - v21 + 64) & -(uint64_t)(((v19 | v18 | ((v19 | (unint64_t)v18) >> 32))
                                                             + 0xFFFFFFFF) >> 32);
          uint64_t v18 = (v11[v20] >> v22) | (v18 << v21);
          uint64_t v19 = (v12[v20--] >> v22) | (v19 << v21);
        }
        while (v20 < v8);
      }
      unint64_t v23 = 0;
      uint64_t v24 = 0;
      unint64_t v25 = v18 & 0xFFFFFFFF80000000 | *v11 & 0x7FFFFFFFLL;
      unint64_t v26 = v19 & 0xFFFFFFFF80000000 | *v12 & 0x7FFFFFFFLL;
      uint64_t v27 = 31;
      uint64_t v28 = 0x80000000;
      unint64_t v29 = 0x80000000;
      do
      {
        unint64_t v30 = v25 & 1;
        unint64_t v31 = v25 >> !(v25 & 1);
        unint64_t v32 = v31 ^ v26;
        unint64_t v33 = v25 & ((((v31 - v26) ^ v31 | v31 ^ v26) ^ v31) >> 63);
        uint64_t v34 = -(uint64_t)v33;
        unint64_t v35 = v26 & -(uint64_t)v33--;
        unint64_t v36 = v33 & v31 | v35;
        unint64_t v26 = v32 ^ v36;
        unint64_t v37 = v33 & v29 | v24 & v34;
        v24 ^= v29 ^ v37;
        unint64_t v38 = v33 & v23 | v28 & v34;
        v28 ^= v23 ^ v38;
        unint64_t v25 = (v36 - (v26 & -(uint64_t)v30)) >> v30;
        unint64_t v29 = (v37 - (v24 & -(uint64_t)v30)) & 0x8000000000000000 | ((v37 - (v24 & -(uint64_t)v30)) >> 1);
        unint64_t v23 = (v38 - (v28 & -(uint64_t)v30)) & 0x8000000000000000 | ((v38 - (v28 & -(uint64_t)v30)) >> 1);
        --v27;
      }
      while (v27);
      uint64_t v39 = a1;
      unint64_t v40 = sub_19D7677AC(a1, v8, v52, v11, (v37 - (v24 & -(uint64_t)v30)) & 0x8000000000000000 | ((v37 - (v24 & -(uint64_t)v30)) >> 1), v12, (v38 - (v28 & -(uint64_t)v30)) & 0x8000000000000000 | ((v38 - (v28 & -(uint64_t)v30)) >> 1));
      unint64_t v41 = sub_19D7677AC(v39, v56, v12, v11, v24, v12, v28);
      sub_19D768F38(v56, v11, v52);
      unint64_t v42 = v40 - 1;
      uint64_t v43 = -(uint64_t)v40;
      a1 = v39;
      uint64_t v44 = v42 & v23 | v43 & -(uint64_t)v23;
      uint64_t v6 = (uint64_t)v51;
      unint64_t v8 = v56;
      sub_19D76792C(v39, v51, v52, v53, v42 & v29 | v43 & -(uint64_t)v29, v54, v44);
      sub_19D76792C(v39, v51, v54, v53, (v41 - 1) & v24 | -(uint64_t)v41 & -v24, v54, (v41 - 1) & v28 | -(uint64_t)v41 & -v28);
      sub_19D768F38(v56, v53, v52);
      uint64_t v17 = v55 + 1;
    }
    while (v55 + 1 != v50);
  }
  if (sub_19D768DDC(v8, v12) == 1 && *v12 == 1)
  {
    sub_19D763340(a1, v6);
    uint64_t result = 0;
  }
  else
  {
    sub_19D76DA0C(__n, __s);
    uint64_t result = 4294967289;
  }
  *(void *)(a1 + 16) = v46;
  return result;
}

unint64_t sub_19D7677AC(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, void *a6, uint64_t a7)
{
  uint64_t v19 = *(void *)(a1 + 16);
  uint64_t v13 = a2 + 1;
  uint64_t v14 = (int8x16_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, a2 + 1);
  uint64_t v15 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v13);
  if (a2) {
    sub_19D768F38(a2, v14, a4);
  }
  sub_19D76CCD4(1, (char *)v14 + 8 * a2);
  sub_19D7695FC(v13, a5 < 0, v14->i64, v14->i64);
  if (a2) {
    sub_19D768F38(a2, v15, a6);
  }
  sub_19D76CCD4(1, &v15[8 * a2]);
  sub_19D7695FC(v13, a7 < 0, (uint64_t *)v15, (uint64_t *)v15);
  sub_19D768DD8(v13, v14, (unint64_t *)v14, (a5 ^ (a5 >> 63)) + ((unint64_t)a5 >> 63));
  sub_19D767338(v13, v14, v15, (a7 ^ (a7 >> 63)) + ((unint64_t)a7 >> 63));
  unint64_t v16 = (unint64_t)v14->i64[a2] >> 63;
  sub_19D7695FC(v13, v14->i64[a2] < 0, v14->i64, v14->i64);
  sub_19D768F4C(v13, v14, v14, 31);
  sub_19D768F38(a2, a3, v14);
  *(void *)(a1 + 16) = v19;
  return v16;
}

uint64_t sub_19D76792C(uint64_t a1, void *a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v12 = sub_19D767AEC((uint64_t)a2);
  uint64_t v21 = *(void *)(a1 + 16);
  uint64_t v13 = (int8x16_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v12 + 1);
  uint64_t v14 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v12);
  sub_19D7633F4((uint64_t)a2, a5 < 0, v13->i64, a4);
  sub_19D7633F4((uint64_t)a2, a7 < 0, v14, a6);
  v13->i64[v12] = sub_19D768DD8(v12, v13, (unint64_t *)v13, (a5 ^ (a5 >> 63)) + ((unint64_t)a5 >> 63));
  v13->i64[v12] += sub_19D767338(v12, v13, v14, (a7 ^ (a7 >> 63)) + ((unint64_t)a7 >> 63));
  uint64_t v15 = sub_19D76ECF8((uint64_t)a2);
  v13->i64[v12] += sub_19D767338(v12, v13, v15, (LODWORD(a2[*a2 + 3]) * v13->i32[0]) & 0x7FFFFFFF);
  sub_19D768F4C(v12 + 1, v13, v13, 31);
  sub_19D768F38(v12, a3, v13);
  unint64_t v16 = (unint64_t *)sub_19D76ECF8((uint64_t)a2);
  char v17 = sub_19D769ACC(v12 + 1, v13, v13->i64, v12, v16);
  uint64_t result = sub_19D7686D0(v12, v17, (uint64_t *)a3, (uint64_t *)a3, v13->i64);
  *(void *)(a1 + 16) = v21;
  return result;
}

uint64_t sub_19D767AE0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a2 + 16) + 40))();
}

uint64_t sub_19D767AEC(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_19D767AF4(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_19D767B00(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    result *= -8;
    uint64_t v4 = (unint64_t *)(a2 - result);
    uint64_t v5 = a3 - result;
    uint64_t v6 = a4 - result;
    uint64_t v7 = result;
    uint64_t v8 = result;
    unint64_t v9 = 0;
    unint64_t v10 = *(void *)(v6 + result);
    do
    {
      unsigned long long v11 = *(unint64_t *)(v5 + v8) * (unsigned __int128)v10 + v9;
      *(unint64_t *)((char *)v4 + v8) = v11;
      unint64_t v9 = *((void *)&v11 + 1);
      v8 += 8;
    }
    while (v8);
    while (1)
    {
      unint64_t *v4 = v9;
      v7 += 8;
      if (!v7) {
        break;
      }
      ++v4;
      uint64_t v12 = result;
      unint64_t v9 = 0;
      unint64_t v13 = *(void *)(v6 + v7);
      do
      {
        unsigned long long v14 = *(unint64_t *)(v5 + v12) * (unsigned __int128)v13 + v9 + *(unint64_t *)((char *)v4 + v12);
        *(unint64_t *)((char *)v4 + v12) = v14;
        unint64_t v9 = *((void *)&v14 + 1);
        v12 += 8;
      }
      while (v12);
    }
  }
  return result;
}

uint64_t sub_19D767BAC(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a1 >= a3) {
    unint64_t v4 = a3;
  }
  else {
    unint64_t v4 = a1;
  }
  if (a1 >= a3) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = a4;
  }
  if (a1 <= a3) {
    unint64_t v6 = a3;
  }
  else {
    unint64_t v6 = a1;
  }
  if (a1 < a3) {
    unsigned int v7 = -1;
  }
  else {
    unsigned int v7 = 1;
  }
  unsigned int v8 = sub_19D76899C(v4, a2, a4);
  if (sub_19D768DDC(v6 - v4, (uint64_t *)(v5 + 8 * v4))) {
    return v7;
  }
  else {
    return v8;
  }
}

uint64_t sub_19D767C18(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, unint64_t a5, unint64_t *a6, void *a7)
{
  uint64_t v12 = sub_19D767AEC(a2);
  uint64_t v23 = *(void *)(a1 + 16);
  unint64_t v13 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v12);
  unsigned long long v14 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v12);
  uint64_t v15 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v12);
  unint64_t v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v12);
  uint64_t result = sub_19D76874C(a1, a2, a3, a4, a6);
  uint64_t v18 = v23;
  if (!result)
  {
    sub_19D76CCDC(v12, v16, 1);
    unint64_t v25 = v16;
    sub_19D763340(a1, a2);
    sub_19D768F38(v12, v15, a7);
    sub_19D76ECEC(a1, a2);
    sub_19D76EA6C(a1, a2);
    sub_19D76EA6C(a1, a2);
    if (a5 >= 2)
    {
      while (1)
      {
        sub_19D768F38(v12, v14, v13);
        if (a5 - 1 < 2) {
          break;
        }
        uint64_t v19 = 2;
        do
        {
          sub_19D76ECEC(a1, a2);
          ++v19;
        }
        while (a5 != v19);
        char v20 = sub_19D76899C(v12, v14, v25) & 1;
        sub_19D76EA6C(a1, a2);
        sub_19D7686D0(v12, v20, a3, (uint64_t *)v14, a3);
        sub_19D76ECEC(a1, a2);
        sub_19D76EA6C(a1, a2);
        sub_19D7686D0(v12, v20, (uint64_t *)v13, (uint64_t *)v14, (uint64_t *)v13);
        --a5;
      }
      char v21 = sub_19D76899C(v12, v14, v25) & 1;
      sub_19D76EA6C(a1, a2);
      sub_19D7686D0(v12, v21, a3, (uint64_t *)v14, a3);
      sub_19D76ECEC(a1, a2);
      sub_19D76EA6C(a1, a2);
      sub_19D7686D0(v12, v21, (uint64_t *)v13, (uint64_t *)v14, (uint64_t *)v13);
    }
    sub_19D76ECEC(a1, a2);
    if (sub_19D76899C(v12, v14, a4)) {
      uint64_t result = 4294967289;
    }
    else {
      uint64_t result = 0;
    }
    uint64_t v18 = v23;
  }
  *(void *)(a1 + 16) = v18;
  return result;
}

uint64_t sub_19D767F20(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t v8 = ~*(_DWORD *)sub_19D76ECF8(a2) & 3;
  uint64_t v9 = sub_19D767AEC(a2);
  uint64_t v10 = *(void *)(a1 + 16);
  unsigned long long v11 = (int8x16_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v9);
  uint64_t v12 = (void *)sub_19D76ECF8(a2);
  if (v8)
  {
    sub_19D768F38(v9, v11, v12);
    v11->i64[0] &= ~1uLL;
    unint64_t v14 = sub_19D76CE64(v9, (uint64_t)v11);
    sub_19D768F58(v9, v11, v11, v14);
    uint64_t v15 = (int8x16_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v9);
    sub_19D76945C(v9, v15, (unint64_t *)v11, 1uLL);
    sub_19D768F4C(v9, v15, v15, 1);
    unint64_t v16 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v9);
    sub_19D76CCDC(v9, v16, 1);
    while (sub_19D76DAC8(a1, a2, v16) == 1)
      sub_19D7686B0(a1, v9, v16, v16, 1);
    uint64_t result = sub_19D76874C(a1, a2, v16, v16, (unint64_t *)v11);
    if (!result) {
      uint64_t result = sub_19D767C18(a1, a2, a3, a4, v14, (unint64_t *)v15, v16);
    }
  }
  else
  {
    sub_19D7686B0(a1, v9, v11, (uint64_t *)v12, 1);
    sub_19D768F4C(v9, v11, v11, 2);
    uint64_t result = sub_19D76874C(a1, a2, a3, a4, (unint64_t *)v11);
    if (!result)
    {
      sub_19D76ECEC(a1, a2);
      if (sub_19D76899C(v9, v11, a4)) {
        uint64_t result = 4294967289;
      }
      else {
        uint64_t result = 0;
      }
    }
  }
  *(void *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_19D76813C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a2 + 16) + 48))();
}

uint64_t sub_19D768148()
{
  return 24;
}

BOOL sub_19D768150(uint64_t a1, void *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, void))(a1 + 24))(a1, *a2);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v4);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v4);
  sub_19D76ECEC(a1, (uint64_t)a2);
  sub_19D76EA6C(a1, (uint64_t)a2);
  sub_19D76ECEC(a1, (uint64_t)a2);
  sub_19D76DCC8(a1, (uint64_t)a2);
  sub_19D76DCC8(a1, (uint64_t)a2);
  sub_19D76ED98(a1, (uint64_t)a2);
  sub_19D76EA6C(a1, (uint64_t)a2);
  sub_19D76ECEC(a1, (uint64_t)a2);
  sub_19D76EA6C(a1, (uint64_t)a2);
  sub_19D76DCC8(a1, (uint64_t)a2);
  sub_19D76ECEC(a1, (uint64_t)a2);
  BOOL result = sub_19D76899C(v4, v7, v6) == 0;
  *(void *)(a1 + 16) = v5;
  return result;
}

BOOL sub_19D7682F4(uint64_t *a1, uint64_t a2)
{
  return sub_19D768DDC(*a1, (uint64_t *)(a2 + 16 * *a1)) == 0;
}

uint64_t sub_19D76831C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = 0;
  void v16[2] = *MEMORY[0x1E4F143B8];
  unint64_t v5 = (unint64_t)(a2 - 1) >> 6;
  *(void *)(result + 8) = a3;
  *(void *)(result + 16) = a4;
  char v6 = (a2 - 1) & 0x3F;
  unint64_t v7 = (unint64_t)(a2 - 2) >> 6;
  char v8 = (a2 - 2) & 0x3F;
  v16[0] = a3;
  v16[1] = a4;
  unint64_t v9 = (unint64_t)(a2 - 3) >> 6;
  char v10 = (a2 - 3) & 0x3F;
  unint64_t v11 = (unint64_t)(a2 - 4) >> 6;
  char v12 = (a2 - 4) & 0x3F;
  char v13 = 1;
  do
  {
    char v14 = v13;
    uint64_t v15 = v16[v4];
    *(unsigned char *)(result + v4) = (8 * ((*(void *)(v15 + 8 * v5) >> v6) & 1)) | (4
                                                                             * ((*(void *)(v15 + 8 * v7) >> v8) & 1)) | (2 * ((*(void *)(v15 + 8 * v9) >> v10) & 1)) | (*(void *)(v15 + 8 * v11) >> v12) & 1;
    uint64_t v4 = 1;
    char v13 = 0;
  }
  while ((v14 & 1) != 0);
  return result;
}

uint64_t sub_19D7683F0(uint64_t result, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  __int16 v10 = 0;
  if ((*(unsigned char *)result & 0x20) != 0) {
    char v4 = *(unsigned char *)result & 0x1F ^ 0x1F;
  }
  else {
    char v4 = *(unsigned char *)result & 0x1F;
  }
  LOBYTE(v10) = v4;
  if ((*(unsigned char *)(result + 1) & 0x20) != 0) {
    char v5 = *(unsigned char *)(result + 1) & 0x1F ^ 0x1F;
  }
  else {
    char v5 = *(unsigned char *)(result + 1) & 0x1F;
  }
  HIBYTE(v10) = v5;
  long long v11 = *(_OWORD *)(result + 8);
  char v6 = 1;
  do
  {
    char v7 = v6;
    if (a2 < 5) {
      LOBYTE(v8) = 0;
    }
    else {
      uint64_t v8 = (*(void *)(*((void *)&v11 + v3) + 8 * ((a2 - 5) >> 6)) >> ((a2 - 5) & 0x3F)) & 1;
    }
    if (*((unsigned __int8 *)&v10 + v3) >= byte_19D77AF78[*((unsigned __int8 *)&v10 + (v3 ^ 1))])
    {
      LOBYTE(v8) = v8 | 0x20;
      if ((*(unsigned char *)(result + v3) & 0x20) != 0) {
        int v9 = -1;
      }
      else {
        int v9 = 1;
      }
    }
    else
    {
      int v9 = 0;
    }
    char v6 = 0;
    *(_DWORD *)(a3 + 4 * v3) = v9;
    *(unsigned char *)(result + v3) = v8 ^ (2 * *(unsigned char *)(result + v3));
    uint64_t v3 = 1;
  }
  while ((v7 & 1) != 0);
  return result;
}

unint64_t sub_19D76850C(_DWORD *a1)
{
  return (*a1 & 1 | (2 * (a1[1] & 1u))) - (unint64_t)(*a1 + a1[1] != 0);
}

uint64_t sub_19D768528(unsigned int *a1)
{
  uint64_t result = *a1;
  if (result != -1)
  {
    if (!result && a1[1] == -1) {
      return 0xFFFFFFFFLL;
    }
    else {
      return 1;
    }
  }
  return result;
}

BOOL sub_19D768558(uint64_t a1, BOOL a2, void *a3, uint64_t *a4, uint64_t *a5)
{
  return sub_19D7685F8(a2, a3, a4, a5);
}

uint64_t sub_19D76856C()
{
  if (qword_1E94494B0 != -1) {
    _os_once();
  }
  return qword_1E94494A8;
}

os_log_t sub_19D7685C0(os_log_t *a1)
{
  os_log_t result = os_log_create("com.apple.corecrypto", "default");
  *a1 = result;
  return result;
}

BOOL sub_19D7685F8(BOOL result, void *a2, uint64_t *a3, uint64_t *a4)
{
  BOOL v4 = 0;
  if (result)
  {
    if (result)
    {
      uint64_t v6 = *a3++;
      uint64_t v5 = v6;
      uint64_t v7 = *a4++;
      BOOL v4 = __CFADD__(v5, v7);
      *a2++ = v5 + v7;
    }
    if (result & 2)
    {
      uint64_t v8 = *a3;
      uint64_t v9 = a3[1];
      a3 += 2;
      uint64_t v10 = *a4;
      uint64_t v11 = a4[1];
      a4 += 2;
      uint64_t v13 = v4 + v8;
      BOOL v4 = __CFADD__(v4, v8) | __CFADD__(v10, v13);
      uint64_t v12 = v10 + v13;
      uint64_t v14 = v4 + v9;
      BOOL v4 = __CFADD__(v4, v9) | __CFADD__(v11, v14);
      *a2 = v12;
      a2[1] = v11 + v14;
      a2 += 2;
    }
    BOOL v15 = result & 0xFFFFFFFC;
    if (v15)
    {
      int v16 = v15 - 4;
      uint64_t v18 = *a3;
      uint64_t v19 = a3[1];
      char v17 = a3 + 2;
      uint64_t v21 = *a4;
      uint64_t v22 = a4[1];
      char v20 = a4 + 2;
      uint64_t v24 = *v17;
      uint64_t v25 = v17[1];
      uint64_t v23 = v17 + 2;
      uint64_t v27 = *v20;
      uint64_t v28 = v20[1];
      for (uint64_t i = v20 + 2; v16; uint64_t i = v38 + 2)
      {
        uint64_t v30 = v4 + v18;
        BOOL v4 = __CFADD__(v4, v18) | __CFADD__(v21, v30);
        uint64_t v29 = v21 + v30;
        uint64_t v32 = v4 + v19;
        BOOL v4 = __CFADD__(v4, v19) | __CFADD__(v22, v32);
        uint64_t v31 = v22 + v32;
        uint64_t v18 = *v23;
        uint64_t v19 = v23[1];
        unint64_t v33 = v23 + 2;
        uint64_t v35 = v4 + v24;
        BOOL v4 = __CFADD__(v4, v24) | __CFADD__(v27, v35);
        uint64_t v34 = v27 + v35;
        *a2 = v29;
        a2[1] = v31;
        unint64_t v36 = a2 + 2;
        uint64_t v37 = v4 + v25;
        BOOL v4 = __CFADD__(v4, v25) | __CFADD__(v28, v37);
        uint64_t v21 = *i;
        uint64_t v22 = i[1];
        unint64_t v38 = i + 2;
        *unint64_t v36 = v34;
        v36[1] = v28 + v37;
        a2 = v36 + 2;
        v16 -= 4;
        uint64_t v24 = *v33;
        uint64_t v25 = v33[1];
        uint64_t v23 = v33 + 2;
        uint64_t v27 = *v38;
        uint64_t v28 = v38[1];
      }
      uint64_t v40 = v4 + v18;
      BOOL v4 = __CFADD__(v4, v18) | __CFADD__(v21, v40);
      uint64_t v39 = v21 + v40;
      uint64_t v42 = v4 + v19;
      BOOL v4 = __CFADD__(v4, v19) | __CFADD__(v22, v42);
      uint64_t v41 = v22 + v42;
      uint64_t v44 = v4 + v24;
      BOOL v4 = __CFADD__(v4, v24) | __CFADD__(v27, v44);
      uint64_t v43 = v27 + v44;
      uint64_t v45 = v4 + v25;
      BOOL v4 = __CFADD__(v4, v25) | __CFADD__(v28, v45);
      *a2 = v39;
      a2[1] = v41;
      uint64_t v46 = a2 + 2;
      *uint64_t v46 = v43;
      v46[1] = v28 + v45;
    }
    return v4;
  }
  return result;
}

BOOL sub_19D7686B0(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5)
{
  if (a2) {
    return sub_19D7695C0(a2, a3, a4, a5);
  }
  else {
    return a5;
  }
}

uint64_t sub_19D7686D0(uint64_t result, char a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  unint64_t v5 = qword_1E9449168 ^ (qword_1E9449168 << 13) ^ ((qword_1E9449168 ^ (unint64_t)(qword_1E9449168 << 13)) >> 7);
  uint64_t v6 = v5 ^ (v5 << 17);
  qword_1E9449168 = v6;
  for (uint64_t i = __ROR8__(0x5555555555555555, a2 | (2 * v6)); result; --result)
  {
    uint64_t v9 = *a4++;
    uint64_t v8 = v9;
    uint64_t v10 = *a5++;
    *a3 = v10 ^ v6;
    *a3++ = (v10 ^ v8) & 0x5555555555555555 ^ v10 ^ v6 ^ (v10 ^ v8) & i ^ v6;
  }
  return result;
}

uint64_t sub_19D768730()
{
  unint64_t v0 = qword_1E9449168 ^ (qword_1E9449168 << 13) ^ ((qword_1E9449168 ^ (unint64_t)(qword_1E9449168 << 13)) >> 7);
  uint64_t result = v0 ^ (v0 << 17);
  qword_1E9449168 = result;
  return result;
}

uint64_t sub_19D76874C(uint64_t a1, uint64_t a2, void *a3, void *a4, unint64_t *a5)
{
  uint64_t v10 = sub_19D767AEC(a2);
  unint64_t v11 = sub_19D768998(v10, a5);
  if (v11)
  {
    unint64_t v12 = v11;
    uint64_t v17 = *(void *)(a1 + 16);
    uint64_t v13 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 3 * v10);
    sub_19D768F38(v10, v13, a4);
    sub_19D76ECEC(a1, a2);
    sub_19D76EA6C(a1, a2);
    uint64_t v14 = (*(unint64_t *)((char *)a5 + (((v12 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v12 - 1)) & 1;
    if ((v12 & 1) == 0) {
      uint64_t v14 = (*(unint64_t *)((char *)a5 + (((v12 - 2) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v12 - 2)) & 1 | (2 * v14);
    }
    sub_19D768F38(v10, a3, &v13[8 * (v14 - 1) * v10]);
    if ((v12 | 0xFFFFFFFFFFFFFFFELL) + v12)
    {
      unint64_t v15 = v12 + (v12 | 0xFFFFFFFFFFFFFFFELL) - 1;
      do
      {
        sub_19D76ECEC(a1, a2);
        sub_19D76ECEC(a1, a2);
        if ((*(unint64_t *)((char *)a5 + (((v15 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v15 - 1)) & 1 | (2 * ((*(unint64_t *)((char *)a5 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v15) & 1))) {
          sub_19D76EA6C(a1, a2);
        }
        v15 -= 2;
      }
      while (v15 != -1);
    }
    *(void *)(a1 + 16) = v17;
  }
  else
  {
    sub_19D76CCDC(v10, a3, 1);
    sub_19D763340(a1, a2);
  }
  return 0;
}

unint64_t sub_19D768940(unint64_t result, unint64_t *a2)
{
  if (result)
  {
    unint64_t v2 = result;
    uint64_t result = 0;
    uint64_t v3 = 64;
    do
    {
      unint64_t v4 = *a2++;
      uint64_t result = ((((v4 | HIDWORD(v4)) + 0xFFFFFFFF) >> 32) - 1) & result | (v3 - __clz(v4 | 1)) & -(uint64_t)(((v4 | HIDWORD(v4)) + 0xFFFFFFFF) >> 32);
      v3 += 64;
      --v2;
    }
    while (v2);
  }
  return result;
}

void sub_19D7689A0()
{
}

uint64_t sub_19D7689B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_19D767B00(a2, a3, a4, a5);
}

uint64_t sub_19D7689C4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, char *a7, uint64_t *a8)
{
  v65[2] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = sub_19D768DDC(a6, a8);
  unint64_t v13 = a2 - v12;
  uint64_t v50 = *(void *)(a1 + 16);
  uint64_t v14 = v12 + 1;
  unint64_t v15 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v12 + 1);
  int v16 = (int8x16_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v12 + 1);
  uint64_t v59 = a1;
  uint64_t v17 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v12 + 1);
  v15[v12] = 0;
  uint64_t v57 = v12 - 1;
  unint64_t v18 = __clz(a8[v12 - 1]);
  sub_19D76D424(v12, (uint64_t)v15, (uint64_t)a8, v18, v19);
  int v20 = -(int)v18;
  unint64_t v60 = v18;
  unint64_t v21 = v18 + 0xFFFFFFFF;
  if (v12) {
    sub_19D768F38(v12, v16, (void *)(a3 + 8 * v13));
  }
  uint64_t v53 = -(uint64_t)HIDWORD(v21);
  char v54 = v20 & 0x3F;
  sub_19D76CCD4(1, (char *)v16 + 8 * v12);
  sub_19D76D424(v14, (uint64_t)v16, (uint64_t)v16, v60, v22);
  unint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  unint64_t v26 = v15[v57];
  uint64_t v27 = -(uint64_t)v26;
  unint64_t v29 = (unsigned __int128)-(__int128)__PAIR128__(v28, v26) >> 64;
  uint64_t v30 = 65;
  unint64_t v31 = v26;
  do
  {
    unsigned long long v32 = __PAIR128__(v29, v27) - __PAIR128__(v31, v23);
    unint64_t v33 = (unint64_t)((__PAIR128__(v29, v27) - __PAIR128__(v31, v23)) >> 64) >> 63;
    uint64_t v34 = v29 & ((uint64_t)((__PAIR128__(v29, v27) - __PAIR128__(v31, v23)) >> 64) >> 63);
    uint64_t v27 = (v33 - 1) & v32 | v27 & (*((uint64_t *)&v32 + 1) >> 63);
    *((void *)&v35 + 1) = v25;
    *(void *)&long long v35 = v24;
    uint64_t v25 = v35 >> 63;
    *((void *)&v35 + 1) = v24;
    *(void *)&long long v35 = *((void *)&v32 + 1);
    unint64_t v29 = (v33 != 0 ? 0 : *((void *)&v32 + 1)) | v34;
    uint64_t v24 = (v35 >> 63) ^ 1;
    *((void *)&v35 + 1) = v31;
    *(void *)&long long v35 = v23;
    unint64_t v23 = v35 >> 1;
    v31 >>= 1;
    --v30;
  }
  while (v30);
  unint64_t v56 = (v24 + 2) | ((((HIDWORD(v15[v57]) ^ 0x80000000 | v15[v57]) + 0xFFFFFFFF) >> 32) - 1);
  size_t v52 = 8 * v12;
  uint64_t v58 = v12;
  unint64_t v36 = (void *)(a3 - 8 * v12 + 8 * a2);
  unint64_t v37 = v13;
  do
  {
    unint64_t v38 = v13;
    uint64_t v39 = *v36 << v60;
    v16->i64[0] = v39;
    if (v37) {
      v16->i64[0] = ((*(v36 - 1) & (unint64_t)v53) >> v54) | v39;
    }
    unint64_t v40 = v16->u64[v58];
    uint64_t v41 = v16->i64[v57];
    uint64_t v63 = v15[v57];
    unint64_t v42 = ((__PAIR128__(v40, v41) - (unint64_t)v63) >> 64) + ((v40 * (unsigned __int128)v56) >> 64) + 2;
    if (v42 < v40) {
      unint64_t v42 = -1;
    }
    unint64_t v62 = v42;
    v65[0] = 0;
    v65[1] = 0;
    sub_19D767B00(1, (uint64_t)v65, (uint64_t)&v62, (uint64_t)&v63);
    v64[0] = v41;
    v64[1] = v40;
    BOOL v43 = sub_19D769390(0, 2, v65, v64, (unint64_t *)v65);
    v62 -= 2 * v43;
    BOOL v44 = sub_19D7686B0(0, 2, v65, v65, v63);
    unint64_t v45 = v62 + v44;
    v17[v58] = sub_19D768DD8(v58, v17, v15, v62 + v44);
    BOOL v46 = sub_19D769390(v59, v14, v16, v16->i64, v17);
    uint64_t v47 = v46 - sub_19D76DA20(v14, v46, v16->i64, v16->i64, (uint64_t *)v15);
    uint64_t result = sub_19D76DA20(v14, v47, v16->i64, v16->i64, (uint64_t *)v15);
    if (a5 && v37 < a4) {
      *(void *)(a5 + 8 * v37) = v45 - (v46 + v47);
    }
    if (v37) {
      uint64_t result = (uint64_t)memmove(&v16->u64[1], v16, v52);
    }
    --v37;
    --v36;
    unint64_t v13 = v38;
  }
  while (v37 <= v38);
  if (a5 && a4 > v38 + 1) {
    uint64_t result = sub_19D76DA0C(8 * (a4 - (v38 + 1)), (void *)(a5 + 8 * (v38 + 1)));
  }
  if (a7)
  {
    sub_19D768F4C(v58, v16, v16, v60);
    if (v58) {
      sub_19D768F38(v58, a7, v16);
    }
    uint64_t result = sub_19D76CCD4(a6 - v58, &a7[8 * v58]);
  }
  *(void *)(v59 + 16) = v50;
  return result;
}

uint64_t sub_19D768DE0(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, unint64_t, uint64_t))
{
  char v4 = a1;
  unint64_t v5 = (unint64_t)(a1 + 63) >> 6;
  uint64_t result = (*a3)(a3, 8 * v5, a2);
  if (!result) {
    *(void *)(a2 + 8 * v5 - 8) &= 0xFFFFFFFFFFFFFFFFLL >> -(((((unint64_t)(v4 & 0x3F) + 0xFFFFFFFF) >> 32) - 1) & 0x40 | v4 & 0x3F);
  }
  return result;
}

uint64_t sub_19D768E64(unint64_t a1, void *a2, unint64_t a3, unsigned __int8 *a4)
{
  unint64_t v4 = 8 * a1;
  if (a3 > 8 * a1)
  {
    int v5 = 0;
    unint64_t v6 = a3 - v4;
    uint64_t v7 = a4;
    do
    {
      int v8 = *v7++;
      v5 |= v8;
      --a3;
    }
    while (a3 > v4);
    if (v5) {
      return 4294967289;
    }
    a4 += v6;
    a3 = 8 * a1;
  }
  if (a3 < 8)
  {
    unint64_t v10 = 0;
  }
  else
  {
    unint64_t v10 = ((a3 - 8) >> 3) + 1;
    unint64_t v11 = a2;
    unint64_t v12 = v10;
    do
    {
      *v11++ = bswap64(*(void *)&a4[a3 - 8]);
      a3 -= 8;
      --v12;
    }
    while (v12);
  }
  if (a3)
  {
    unint64_t v13 = 0;
    uint64_t v14 = -(uint64_t)a3;
    do
      unint64_t v13 = a4[a3 + v14] | (v13 << 8);
    while (!__CFADD__(v14++, 1));
    a2[v10++] = v13;
  }
  if (v10 < a1) {
    bzero(&a2[v10], v4 - 8 * v10);
  }
  return 0;
}

void *sub_19D768F38(uint64_t a1, void *__dst, void *__src)
{
  return memmove(__dst, __src, 8 * a1);
}

uint64_t sub_19D768F4C(uint64_t result, int8x16_t *a2, int8x16_t *a3, uint64_t a4)
{
  if (result) {
    return sub_19D76CAE4(result, a2, a3, a4);
  }
  return result;
}

uint64_t sub_19D768F58(uint64_t a1, int8x16_t *a2, int8x16_t *a3, unint64_t a4)
{
  uint64_t result = sub_19D768F4C(a1, a2, a3, a4 & 0x3F);
  if (a1)
  {
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = 0;
      uint64_t v10 = v8;
      do
      {
        v9 |= ((((v10 ^ (v8 + (a4 >> 6)) | ((v10 ^ (v8 + (a4 >> 6))) >> 32))
               + 0xFFFFFFFF) >> 32)
             - 1) & a2->i64[v10];
        ++v10;
      }
      while (a1 != v10);
      a2->i64[v8++] = v9;
    }
    while (v8 != a1);
  }
  return result;
}

void *sub_19D768FEC()
{
  return &unk_1E5963B40;
}

void *sub_19D768FF8(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4, unint64_t *a5)
{
  return sub_19D7696C0(a3, a4, a5);
}

void *sub_19D769008(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4)
{
  return sub_19D7696C0(a3, a4, a4);
}

uint64_t sub_19D769018(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a1 + 16);
  int v8 = 4;
  uint64_t v9 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 4);
  uint64_t v10 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 4);
  unint64_t v11 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 4);
  sub_19D7696C0(v9, a4, a4);
  sub_19D7696C0(v10, v9, a4);
  sub_19D7696C0(v10, v10, v10);
  sub_19D7696C0(v10, v10, v10);
  sub_19D7696C0(v9, v9, v10);
  sub_19D7696C0(v10, v9, a4);
  sub_19D768F38(4, v11, v10);
  do
  {
    sub_19D7696C0(v10, v10, v10);
    --v8;
  }
  while (v8);
  sub_19D7696C0(v9, v9, v10);
  sub_19D7696C0(v10, v9, a4);
  int v12 = 8;
  do
  {
    sub_19D7696C0(v10, v10, v10);
    --v12;
  }
  while (v12);
  sub_19D7696C0(v9, v9, v10);
  sub_19D7696C0(v10, v9, a4);
  int v13 = 16;
  do
  {
    sub_19D7696C0(v10, v10, v10);
    --v13;
  }
  while (v13);
  sub_19D7696C0(v9, v9, v10);
  sub_19D7696C0(v10, v9, a4);
  sub_19D768F38(4, v11, v10);
  int v14 = 32;
  do
  {
    sub_19D7696C0(v11, v11, v11);
    --v14;
  }
  while (v14);
  sub_19D7696C0(v11, v11, v10);
  int v15 = 32;
  do
  {
    sub_19D7696C0(v11, v11, v11);
    --v15;
  }
  while (v15);
  sub_19D7696C0(v11, v11, v10);
  sub_19D768F38(4, v10, v11);
  int v16 = 32;
  do
  {
    sub_19D7696C0(v11, v11, v11);
    --v16;
  }
  while (v16);
  sub_19D7696C0(v11, v11, v9);
  int v17 = 96;
  do
  {
    sub_19D7696C0(v11, v11, v11);
    --v17;
  }
  while (v17);
  sub_19D7696C0(v10, v10, v11);
  sub_19D7696C0(v9, v10, a4);
  v19[0] = xmmword_19D77AF98;
  v19[1] = *(_OWORD *)algn_19D77AFA8;
  sub_19D7696C0(v9, v9, (unint64_t *)v19);
  if (sub_19D768DDC(4, (uint64_t *)v9) == 1 && *v9 == 1)
  {
    sub_19D768F38(4, a3, v10);
    uint64_t result = 0;
  }
  else
  {
    uint64_t result = 4294967254;
  }
  *(void *)(a1 + 16) = v7;
  return result;
}

void *sub_19D769328(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v5[0] = xmmword_19D77AF98;
  v5[1] = *(_OWORD *)algn_19D77AFA8;
  return sub_19D7696C0(a3, a4, (unint64_t *)v5);
}

BOOL sub_19D769390(uint64_t a1, BOOL a2, void *a3, uint64_t *a4, unint64_t *a5)
{
  return sub_19D7693A4(a2, a3, a4, a5);
}

BOOL sub_19D7693A4(BOOL result, void *a2, uint64_t *a3, unint64_t *a4)
{
  _BOOL1 v4 = 1;
  if (result)
  {
    if (result)
    {
      unint64_t v6 = *a3++;
      unint64_t v5 = v6;
      unint64_t v7 = *a4++;
      _BOOL1 v4 = v5 >= v7;
      *a2++ = v5 - v7;
    }
    if (result & 2)
    {
      uint64_t v8 = *a3;
      uint64_t v9 = a3[1];
      a3 += 2;
      unint64_t v10 = *a4;
      unint64_t v11 = a4[1];
      a4 += 2;
      _BOOL1 v13 = v4;
      _BOOL1 v4 = __CFSUB__(v8, v10, v4);
      uint64_t v12 = v8 - (v10 + !v13);
      _BOOL1 v14 = v4;
      _BOOL1 v4 = __CFSUB__(v9, v11, v4);
      *a2 = v12;
      a2[1] = v9 - (v11 + !v14);
      a2 += 2;
    }
    BOOL v15 = result & 0xFFFFFFFC;
    if (v15)
    {
      int v16 = v15 - 4;
      uint64_t v18 = *a3;
      uint64_t v19 = a3[1];
      int v17 = a3 + 2;
      unint64_t v21 = *a4;
      uint64_t v22 = a4[1];
      uint64_t v20 = (uint64_t *)(a4 + 2);
      uint64_t v24 = *v17;
      uint64_t v25 = v17[1];
      unint64_t v23 = v17 + 2;
      uint64_t v27 = *v20;
      uint64_t v28 = v20[1];
      for (uint64_t i = v20 + 2; v16; uint64_t i = v38 + 2)
      {
        _BOOL1 v30 = v4;
        _BOOL1 v4 = __CFSUB__(v18, v21, v4);
        uint64_t v29 = v18 - (v21 + !v30);
        _BOOL1 v32 = v4;
        _BOOL1 v4 = __CFSUB__(v19, v22, v4);
        uint64_t v31 = v19 - (v22 + !v32);
        uint64_t v18 = *v23;
        uint64_t v19 = v23[1];
        unint64_t v33 = v23 + 2;
        _BOOL1 v35 = v4;
        _BOOL1 v4 = __CFSUB__(v24, v27, v4);
        uint64_t v34 = v24 - (v27 + !v35);
        *a2 = v29;
        a2[1] = v31;
        unint64_t v36 = a2 + 2;
        _BOOL1 v37 = v4;
        _BOOL1 v4 = __CFSUB__(v25, v28, v4);
        unint64_t v21 = *i;
        uint64_t v22 = i[1];
        unint64_t v38 = i + 2;
        *unint64_t v36 = v34;
        v36[1] = v25 - (v28 + !v37);
        a2 = v36 + 2;
        v16 -= 4;
        uint64_t v24 = *v33;
        uint64_t v25 = v33[1];
        unint64_t v23 = v33 + 2;
        uint64_t v27 = *v38;
        uint64_t v28 = v38[1];
      }
      _BOOL1 v40 = v4;
      _BOOL1 v4 = __CFSUB__(v18, v21, v4);
      uint64_t v39 = v18 - (v21 + !v40);
      _BOOL1 v42 = v4;
      _BOOL1 v4 = __CFSUB__(v19, v22, v4);
      uint64_t v41 = v19 - (v22 + !v42);
      _BOOL1 v44 = v4;
      _BOOL1 v4 = __CFSUB__(v24, v27, v4);
      uint64_t v43 = v24 - (v27 + !v44);
      _BOOL1 v45 = v4;
      _BOOL1 v4 = __CFSUB__(v25, v28, v4);
      *a2 = v39;
      a2[1] = v41;
      BOOL v46 = a2 + 2;
      *BOOL v46 = v43;
      v46[1] = v25 - (v28 + !v45);
    }
    return !v4;
  }
  return result;
}

unint64_t sub_19D76945C(uint64_t a1, void *a2, unint64_t *a3, unint64_t a4)
{
  for (; a1; --a1)
  {
    unint64_t v4 = *a3++;
    unsigned long long v5 = v4 - (unsigned __int128)a4;
    *a2++ = v5;
    a4 = *((void *)&v5 + 1) >> 63;
  }
  return a4;
}

unint64_t sub_19D76948C(unint64_t a1, unint64_t *a2)
{
  return (sub_19D768940(a1, a2) + 7) >> 3;
}

uint64_t sub_19D7694AC(unint64_t a1, unint64_t *a2, unint64_t a3, char *__s)
{
  if (a3 > 0x7FFFFFFE) {
    return 4294967289;
  }
  unint64_t v6 = 8 * a1;
  if (8 * a1 > 0x7FFFFFFE) {
    return 4294967289;
  }
  unint64_t v7 = __s;
  unint64_t v8 = a3;
  unint64_t v10 = a3 - v6;
  if (a3 <= v6)
  {
    LODWORD(v10) = 0;
  }
  else
  {
    sub_19D76DA0C(a3 - v6, __s);
    v7 += v10;
    unint64_t v8 = v6;
  }
  unint64_t v11 = sub_19D768940(a1, a2);
  if (v8 < (v11 + 7) >> 3) {
    return 4294967289;
  }
  uint64_t result = v10 + v8 - ((v11 + 7) >> 3);
  if (v8 < 8)
  {
    unint64_t v12 = 0;
  }
  else
  {
    unint64_t v12 = ((v8 - 8) >> 3) + 1;
    _BOOL1 v13 = a2;
    unint64_t v14 = v12;
    do
    {
      unint64_t v15 = *v13++;
      *(void *)&v7[v8 - 8] = bswap64(v15);
      v8 -= 8;
      --v14;
    }
    while (v14);
  }
  if (v8)
  {
    unint64_t v16 = a2[v12];
    int v17 = &v7[v8 - 1];
    do
    {
      *v17-- = v16;
      v16 >>= 8;
      --v8;
    }
    while (v8);
  }
  return result;
}

BOOL sub_19D7695C0(uint64_t a1, void *a2, uint64_t *a3, uint64_t a4)
{
  if (!a1) {
    return a4;
  }
  uint64_t v5 = *a3;
  unint64_t v4 = a3 + 1;
  BOOL v6 = __CFADD__(v5, a4);
  *a2 = v5 + a4;
  for (uint64_t i = a2 + 1; --a1; ++i)
  {
    uint64_t v8 = *v4++;
    BOOL v9 = v6;
    BOOL v6 = __CFADD__(v6, v8);
    void *i = v9 + v8;
  }
  return v6;
}

uint64_t sub_19D7695FC(uint64_t a1, char a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result = sub_19D768730();
  uint64_t v9 = __ROR8__(0x5555555555555555, a2 | (2 * result));
  if (a1)
  {
    BOOL v10 = 1;
    do
    {
      uint64_t v12 = *a4++;
      uint64_t v11 = v12;
      BOOL v13 = v10 + ~v12;
      BOOL v10 = __CFADD__(v10, ~v12);
      uint64_t v14 = v11 ^ v13;
      uint64_t v15 = v11 ^ result;
      *a3 = v15;
      *a3++ = v14 & v9 ^ v14 & 0x5555555555555555 ^ v15 ^ result;
      --a1;
    }
    while (a1);
  }
  return result;
}

unint64_t sub_19D76968C(uint64_t a1)
{
  return ((unint64_t)(sub_19D767AF4(a1) + 7) >> 3) + 1;
}

uint64_t sub_19D7696B0()
{
  return 8;
}

void *sub_19D7696C0(void *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  uint64_t v3 = a2 + 2;
  unint64_t v6 = *v3;
  unint64_t v7 = v3[1];
  unint64_t v9 = *a3;
  unint64_t v10 = a3[1];
  uint64_t v8 = a3 + 2;
  unint64_t v11 = *v8;
  unint64_t v12 = v8[1];
  uint64_t v13 = v4 * v9;
  uint64_t v14 = (v5 * (unsigned __int128)v9) >> 64;
  uint64_t v15 = *v3 * v9;
  uint64_t v16 = (v6 * (unsigned __int128)v9) >> 64;
  unint64_t v18 = v9;
  uint64_t v17 = (__PAIR128__(v5, v4) * v9) >> 64;
  _BOOL1 v19 = __CFADD__(__CFADD__((v4 * (unsigned __int128)v9) >> 64, v5 * v9), v14);
  uint64_t v20 = __CFADD__((v4 * (unsigned __int128)v9) >> 64, v5 * v9) + v14;
  v19 |= __CFADD__(v15, v20);
  v20 += v15;
  uint64_t v21 = (v7 * (unsigned __int128)v9) >> 64;
  uint64_t v22 = (v7 * (unsigned __int128)v10) >> 64;
  BOOL v24 = v19;
  _BOOL1 v19 = __CFADD__(v19, v16);
  uint64_t v23 = v24 + v16;
  v19 |= __CFADD__(v7 * v9, v23);
  v23 += v7 * v9;
  BOOL v26 = v19;
  _BOOL1 v19 = __CFADD__(v19, v21);
  uint64_t v25 = v26 + v21;
  v19 |= __CFADD__(v7 * v10, v25);
  v25 += v7 * v10;
  uint64_t v27 = v7 * *v8;
  uint64_t v28 = (v7 * (unsigned __int128)v11) >> 64;
  BOOL v30 = v19;
  _BOOL1 v19 = __CFADD__(v19, v22);
  uint64_t v29 = v30 + v22;
  v19 |= __CFADD__(v27, v29);
  v29 += v27;
  BOOL v32 = v19;
  _BOOL1 v19 = __CFADD__(v19, v28);
  uint64_t v31 = v32 + v28;
  v19 |= __CFADD__(v7 * v12, v31);
  v31 += v7 * v12;
  uint64_t v33 = v19 + ((v7 * (unsigned __int128)v12) >> 64);
  uint64_t v34 = (v4 * (unsigned __int128)v10) >> 64;
  _BOOL1 v19 = __CFADD__(v17, v4 * v10);
  uint64_t v35 = (__PAIR128__(v10, v18) * __PAIR128__(v5, v4)) >> 64;
  BOOL v37 = v19;
  _BOOL1 v19 = __CFADD__(v19, v20);
  uint64_t v36 = v37 + v20;
  v19 |= __CFADD__(v34, v36);
  v36 += v34;
  uint64_t v38 = (v6 * (unsigned __int128)v10) >> 64;
  BOOL v40 = v19;
  _BOOL1 v19 = __CFADD__(v19, v23);
  uint64_t v39 = v40 + v23;
  v19 |= __CFADD__(v6 * v10, v39);
  v39 += v6 * v10;
  BOOL v42 = v19;
  _BOOL1 v19 = __CFADD__(v19, v25);
  uint64_t v41 = v42 + v25;
  v19 |= __CFADD__(v38, v41);
  v41 += v38;
  uint64_t v43 = (v6 * (unsigned __int128)v12) >> 64;
  BOOL v45 = v19;
  _BOOL1 v19 = __CFADD__(v19, v29);
  uint64_t v44 = v45 + v29;
  v19 |= __CFADD__(v6 * v12, v44);
  v44 += v6 * v12;
  BOOL v47 = v19;
  _BOOL1 v19 = __CFADD__(v19, v31);
  uint64_t v46 = v47 + v31;
  v19 |= __CFADD__(v43, v46);
  v46 += v43;
  uint64_t v48 = v19 + v33;
  uint64_t v49 = (v5 * (unsigned __int128)v10) >> 64;
  _BOOL1 v19 = __CFADD__(v36, v5 * v10);
  uint64_t v50 = v36 + v5 * v10;
  BOOL v52 = v19;
  _BOOL1 v19 = __CFADD__(v19, v39);
  uint64_t v51 = v52 + v39;
  v19 |= __CFADD__(v49, v51);
  v51 += v49;
  uint64_t v53 = (v6 * (unsigned __int128)v11) >> 64;
  BOOL v55 = v19;
  _BOOL1 v19 = __CFADD__(v19, v41);
  uint64_t v54 = v55 + v41;
  v19 |= __CFADD__(v6 * v11, v54);
  v54 += v6 * v11;
  BOOL v57 = v19;
  _BOOL1 v19 = __CFADD__(v19, v44);
  uint64_t v56 = v57 + v44;
  v19 |= __CFADD__(v53, v56);
  v56 += v53;
  BOOL v58 = v19;
  uint64_t v59 = (v4 * (unsigned __int128)v11) >> 64;
  _BOOL1 v19 = __CFADD__(v50, v4 * v11);
  uint64_t v60 = v50 + v4 * v11;
  BOOL v62 = v19;
  _BOOL1 v19 = __CFADD__(v19, v51);
  uint64_t v61 = v62 + v51;
  v19 |= __CFADD__(v59, v61);
  v61 += v59;
  uint64_t v63 = (v5 * (unsigned __int128)v12) >> 64;
  BOOL v65 = v19;
  _BOOL1 v19 = __CFADD__(v19, v54);
  uint64_t v64 = v65 + v54;
  v19 |= __CFADD__(v5 * v12, v64);
  v64 += v5 * v12;
  BOOL v67 = v19;
  _BOOL1 v19 = __CFADD__(v19, v56);
  uint64_t v66 = v67 + v56;
  v19 |= __CFADD__(v63, v66);
  v66 += v63;
  uint64_t v68 = v19 + v58;
  uint64_t v69 = (v5 * (unsigned __int128)v11) >> 64;
  _BOOL1 v19 = __CFADD__(v61, v5 * v11);
  uint64_t v70 = v61 + v5 * v11;
  BOOL v72 = v19;
  _BOOL1 v19 = __CFADD__(v19, v64);
  uint64_t v71 = v72 + v64;
  v19 |= __CFADD__(v69, v71);
  v71 += v69;
  uint64_t v73 = v19;
  uint64_t v74 = (v4 * (unsigned __int128)v12) >> 64;
  _BOOL1 v19 = __CFADD__(v70, v4 * v12);
  uint64_t v75 = v70 + v4 * v12;
  BOOL v77 = v19;
  _BOOL1 v19 = __CFADD__(v19, v71);
  uint64_t v76 = v77 + v71;
  v19 |= __CFADD__(v74, v76);
  v76 += v74;
  BOOL v79 = v19;
  _BOOL1 v19 = __CFADD__(v19, v66);
  uint64_t v78 = v79 + v66;
  v19 |= __CFADD__(v73, v78);
  v78 += v73;
  BOOL v81 = v19;
  _BOOL1 v19 = __CFADD__(v19, v46);
  uint64_t v80 = v81 + v46;
  v19 |= __CFADD__(v68, v80);
  v80 += v68;
  uint64_t v82 = v19 + v48;
  unint64_t v83 = 0xFFFFFFFF00000000 * v13;
  unint64_t v84 = (unint64_t)-v13 >> 32;
  _BOOL1 v19 = __CFADD__(__CFADD__(v13, -v13), v35);
  unint64_t v85 = __CFADD__(v13, -v13) + v35;
  BOOL v87 = v19;
  _BOOL1 v19 = __CFADD__(v19, v60);
  uint64_t v86 = v87 + v60;
  BOOL v89 = v19;
  _BOOL1 v19 = __CFADD__(v19, v75);
  unint64_t v88 = v89 + v75;
  v19 |= __CFADD__(0xFFFFFFFF00000000 * v13, v88);
  v88 += 0xFFFFFFFF00000000 * v13;
  unint64_t v90 = v19 + v84;
  _BOOL1 v19 = v85 >= v83;
  unint64_t v91 = v85 - v83;
  LOBYTE(v89) = v19;
  _BOOL1 v19 = __CFSUB__(v86, v84, v19);
  unint64_t v92 = v86 - (v84 + !v89);
  unsigned long long v93 = __PAIR128__(v90, v88) - !v19;
  unint64_t v94 = 0xFFFFFFFF00000000 * v91;
  unint64_t v95 = (unint64_t)-(uint64_t)v91 >> 32;
  _BOOL1 v19 = __CFADD__(__CFADD__(v91, -(uint64_t)v91), v92);
  unsigned long long v98 = __PAIR128__(v93, __CFADD__(v91, -(uint64_t)v91)) + v92;
  uint64_t v97 = v98 >> 64;
  unint64_t v96 = v98;
  BOOL v100 = __CFADD__(v19, (void)v93);
  _BOOL1 v19 = __CFADD__(v100, v76);
  unint64_t v99 = v100 + v76;
  v19 |= __CFADD__(0xFFFFFFFF00000000 * v91, v99);
  v99 += 0xFFFFFFFF00000000 * v91;
  unint64_t v101 = v19 + v95;
  _BOOL1 v19 = v96 >= v94;
  unint64_t v102 = v96 - v94;
  LOBYTE(v100) = v19;
  _BOOL1 v19 = __CFSUB__(v97, v95, v19);
  unint64_t v103 = v97 - (v95 + !v100);
  unsigned long long v104 = __PAIR128__(v101, v99) - !v19;
  unint64_t v105 = 0xFFFFFFFF00000000 * v102;
  unint64_t v106 = (unint64_t)-(uint64_t)v102 >> 32;
  _BOOL1 v19 = __CFADD__(__CFADD__(v102, -(uint64_t)v102), v103);
  unsigned long long v109 = __PAIR128__(v104, __CFADD__(v102, -(uint64_t)v102)) + v103;
  uint64_t v108 = v109 >> 64;
  unint64_t v107 = v109;
  BOOL v111 = __CFADD__(v19, (void)v104);
  _BOOL1 v19 = __CFADD__(v111, v78);
  unint64_t v110 = v111 + v78;
  v19 |= __CFADD__(0xFFFFFFFF00000000 * v102, v110);
  v110 += 0xFFFFFFFF00000000 * v102;
  unint64_t v112 = v19 + v106;
  _BOOL1 v19 = v107 >= v105;
  unint64_t v113 = v107 - v105;
  LOBYTE(v111) = v19;
  _BOOL1 v19 = __CFSUB__(v108, v106, v19);
  unint64_t v114 = v108 - (v106 + !v111);
  unsigned long long v115 = __PAIR128__(v112, v110) - !v19;
  unint64_t v116 = 0xFFFFFFFF00000000 * v113;
  unint64_t v117 = (unint64_t)-(uint64_t)v113 >> 32;
  _BOOL1 v19 = __CFADD__(__CFADD__(v113, -(uint64_t)v113), v114);
  unsigned long long v120 = __PAIR128__(v115, __CFADD__(v113, -(uint64_t)v113)) + v114;
  uint64_t v119 = v120 >> 64;
  unint64_t v118 = v120;
  BOOL v122 = __CFADD__(v19, (void)v115);
  _BOOL1 v19 = __CFADD__(v122, v80);
  unint64_t v121 = v122 + v80;
  v19 |= __CFADD__(0xFFFFFFFF00000000 * v113, v121);
  v121 += 0xFFFFFFFF00000000 * v113;
  unint64_t v123 = v19 + v117;
  _BOOL1 v19 = v118 >= v116;
  unint64_t v124 = v118 - v116;
  LOBYTE(v122) = v19;
  _BOOL1 v19 = __CFSUB__(v119, v117, v19);
  uint64_t v125 = v119 - (v117 + !v122);
  unsigned long long v126 = __PAIR128__(v123, v121) - !v19;
  uint64_t v127 = v126
       + (__CFADD__(__CFADD__(*((void *)&v93 + 1), v124), *((void *)&v104 + 1)) | __CFADD__(v125, __CFADD__(*((void *)&v93 + 1), v124) + *((void *)&v104 + 1)))
       + *((void *)&v115 + 1);
  uint64_t v128 = v82
       + (__CFADD__(__CFADD__(__CFADD__(*((void *)&v93 + 1), v124), *((void *)&v104 + 1)) | __CFADD__(v125, __CFADD__(*((void *)&v93 + 1), v124) + *((void *)&v104 + 1)), *((void *)&v115 + 1)) | __CFADD__((void)v126, (__CFADD__(__CFADD__(*((void *)&v93 + 1), v124), *((void *)&v104 + 1)) | __CFADD__(v125, __CFADD__(*((void *)&v93 + 1), v124) + *((void *)&v104 + 1)))+ *((void *)&v115 + 1)))+ *((void *)&v126 + 1);
  uint64_t v129 = *((void *)&v93 + 1) + v124 - 1;
  uint64_t v130 = v125
       + __CFADD__(*((void *)&v93 + 1), v124)
       + *((void *)&v104 + 1)
       - ((*((void *)&v93 + 1) + v124 == 0)
        - 0x100000000);
  _BOOL1 v19 = __CFSUB__(v127, -1, __PAIR128__(v125 + (unint64_t)__CFADD__(*((void *)&v93 + 1), v124) + *((void *)&v104 + 1), *((void *)&v93 + 1) + v124) >= __PAIR128__(0xFFFFFFFF00000000, 1));
  uint64_t v131 = v127
       - ((__PAIR128__(v125 + (unint64_t)__CFADD__(*((void *)&v93 + 1), v124) + *((void *)&v104 + 1), *((void *)&v93 + 1) + v124) < __PAIR128__(0xFFFFFFFF00000000, 1))- 1);
  LOBYTE(v122) = v19;
  _BOOL1 v19 = __CFSUB__(v128, 0xFFFFFFFFLL, v19);
  uint64_t v132 = v128 - (!v122 + 0xFFFFFFFFLL);
  unint64_t v133 = 1 - !v19;
  uint64_t v134 = 1 - !v19;
  _BOOL1 v19 = __CFADD__(__CFADD__(v129, v133 >> 63), v130);
  uint64_t v135 = __CFADD__(v129, v133 >> 63) + v130;
  uint64_t v137 = v19 | __CFADD__(v133 & 0xFFFFFFFF00000000, v135);
  _BOOL1 v19 = __CFADD__(v137, v131);
  uint64_t v136 = v137 + v131;
  *a1 = v129 + (v133 >> 63);
  a1[1] = (v133 & 0xFFFFFFFF00000000) + v135;
  uint64_t result = a1 + 2;
  void *result = v133 + v136;
  result[1] = v134 + (v19 | __CFADD__(v133, v136)) + v132;
  return result;
}

uint64_t sub_19D7698E8(unint64_t a1, unsigned char *a2, unint64_t a3, char *a4, uint64_t a5, void *a6)
{
  *a6 = 0;
  a6[1] = 0;
  if (a5)
  {
    uint64_t v9 = *(unsigned __int8 *)(a5 + 1);
    uint64_t v10 = a3 + v9 + 10;
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v10 = a3;
  }
  if (v10 + 11 > a1) {
    return 4294967273;
  }
  unint64_t v12 = a2 + 2;
  char v13 = a2[1] ^ 1 | *a2;
  if (a1 - v10 != 3)
  {
    uint64_t v14 = v10 - a1 + 3;
    do
    {
      char v15 = *v12++;
      v13 |= ~v15;
    }
    while (!__CFADD__(v14++, 1));
    unint64_t v12 = &a2[~v10 + a1];
  }
  uint64_t v17 = v12 + 1;
  char v18 = *v12 | v13;
  if (a5)
  {
    char v19 = v12[1] ^ 0x30;
    char v20 = v12[2] ^ (v10 - 2);
    char v21 = v12[3] ^ 0x30;
    uint64_t v22 = v12 + 5;
    char v23 = v12[4] ^ (v9 + 4);
    uint64_t v24 = v9 + 2;
    char v25 = sub_19D767064(v9 + 2, v12 + 5, (char *)a5);
    BOOL v26 = &v22[v24];
    char v27 = v22[v24] ^ 5;
    char v28 = v22[v24 + 1];
    char v29 = v22[v24 + 2] ^ 4;
    uint64_t v17 = &v22[v24 + 4];
    v18 |= v19 | v20 | v21 | v23 | v25 | v27 | v28 | v29 | v26[3] ^ a3;
  }
  sub_19D769B34((uint64_t)a6, (uint64_t)&unk_19D77B250, a3, (uint64_t)a4, (uint64_t)v17);
  return (v18 | sub_19D767064(a3, v17, a4));
}

unsigned __int8 *sub_19D769A78(unint64_t a1, void *a2, void *a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  if (!a4) {
    return 0;
  }
  v6[0] = a4;
  v6[1] = a5;
  if (sub_19D763084(v6, a1, a2, a3)) {
    return v6[0];
  }
  else {
    return 0;
  }
}

unint64_t sub_19D769ACC(uint64_t a1, void *a2, uint64_t *a3, BOOL a4, unint64_t *a5)
{
  uint64_t v5 = a1 - a4;
  unint64_t v6 = &a2[a4];
  unint64_t v7 = (unint64_t *)&a3[a4];
  unint64_t v8 = sub_19D769390(0, a4, a2, a3, a5);

  return sub_19D76945C(v5, v6, v7, v8);
}

uint64_t sub_19D769B34(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  for (unint64_t i = 0; i != 16; ++i)
    *(unsigned char *)(result + i) = *(unsigned char *)(a5 + i % a3) ^ *(unsigned char *)(a4 + i % a3) ^ *(unsigned char *)(a2 + i);
  if (a3 >= 0x11)
  {
    for (uint64_t j = 16; j != a3; ++j)
      *(unsigned char *)(result + (j & 0xF)) ^= *(unsigned char *)(a5 + j) ^ *(unsigned char *)(a4 + j);
  }
  return result;
}

uint64_t sub_19D769B9C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = sub_19D76ECF8((uint64_t)&a1[5 * *a1 + 4]);
  if ((sub_19D76899C(v4, a2, v5) & 0x80000000) == 0) {
    return 0xFFFFFFFFLL;
  }
  if (sub_19D768DDC(*a1, a2)) {
    return 0;
  }
  return 0xFFFFFFFFLL;
}

int32x4_t *sub_19D769D10(int32x4_t *result, uint64_t a2, int8x16_t *a3)
{
  if (a2)
  {
    int8x16_t v4 = *a3;
    int8x16_t v5 = a3[1];
    int8x16_t v6 = a3[2];
    int8x16_t v7 = a3[3];
    uint64_t v3 = a3 + 4;
    _Q1 = (int32x4_t)vrev32q_s8(v5);
    int32x4_t v9 = *result;
    _Q2 = (int32x4_t)vrev32q_s8(v6);
    _Q17 = result[1];
    _Q3 = (int32x4_t)vrev32q_s8(v7);
    _Q18 = *result;
    _Q4 = vaddq_s32((int32x4_t)vrev32q_s8(v4), (int32x4_t)xmmword_19D769C10);
    _Q5 = vaddq_s32(_Q1, (int32x4_t)xmmword_19D769C20);
    _Q19 = _Q17;
    _Q6 = vaddq_s32(_Q2, (int32x4_t)xmmword_19D769C30);
    _Q7 = vaddq_s32(_Q3, (int32x4_t)xmmword_19D769C40);
    char v19 = &xmmword_19D769C50;
    int v20 = 3;
    do
    {
      _Q20 = _Q18;
      int32x4_t v22 = (int32x4_t)*v19;
      __asm { SHA256SU0       V0.4S, V1.4S }
      int32x4_t v28 = (int32x4_t)v19[1];
      __asm { SHA256H         Q18, Q19, V4.4S }
      int32x4_t v30 = (int32x4_t)v19[2];
      __asm { SHA256SU1       V0.4S, V2.4S, V3.4S }
      int32x4_t v32 = (int32x4_t)v19[3];
      __asm { SHA256H2        Q19, Q20, V4.4S }
      v19 += 4;
      _Q4 = vaddq_s32(_Q0, v22);
      _Q20 = _Q18;
      __asm
      {
        SHA256SU0       V1.4S, V2.4S
        SHA256H         Q18, Q19, V5.4S
        SHA256SU1       V1.4S, V3.4S, V0.4S
        SHA256H2        Q19, Q20, V5.4S
      }
      _Q5 = vaddq_s32(_Q1, v28);
      _Q20 = _Q18;
      __asm
      {
        SHA256SU0       V2.4S, V3.4S
        SHA256H         Q18, Q19, V6.4S
        SHA256SU1       V2.4S, V0.4S, V1.4S
        SHA256H2        Q19, Q20, V6.4S
      }
      _Q6 = vaddq_s32(_Q2, v30);
      --v20;
      _Q20 = _Q18;
      __asm
      {
        SHA256SU0       V3.4S, V0.4S
        SHA256H         Q18, Q19, V7.4S
        SHA256SU1       V3.4S, V1.4S, V2.4S
        SHA256H2        Q19, Q20, V7.4S
      }
      _Q7 = vaddq_s32(_Q3, v32);
    }
    while (!(_NF ^ _VF | _ZF));
    BOOL v44 = a2 <= 1;
    uint64_t v45 = a2 - 1;
    if (!v44)
    {
      uint64_t v46 = (int32x4_t *)(v19 - 16);
      do
      {
        _Q20 = _Q18;
        __asm { SHA256H         Q18, Q19, V4.4S }
        int8x16_t v49 = v3[1];
        int8x16_t v50 = v3[2];
        __asm { SHA256H2        Q19, Q20, V4.4S }
        int8x16_t v52 = v3[3];
        _Q4 = vaddq_s32((int32x4_t)vrev32q_s8(*v3), *v46);
        _Q20 = _Q18;
        v3 += 4;
        __asm { SHA256H         Q18, Q19, V5.4S }
        _Q1 = (int32x4_t)vrev32q_s8(v49);
        __asm { SHA256H2        Q19, Q20, V5.4S }
        _Q5 = vaddq_s32(_Q1, v46[1]);
        _Q20 = _Q18;
        __asm { SHA256H         Q18, Q19, V6.4S }
        _Q2 = (int32x4_t)vrev32q_s8(v50);
        __asm { SHA256H2        Q19, Q20, V6.4S }
        _Q6 = vaddq_s32(_Q2, v46[2]);
        _Q20 = _Q18;
        __asm { SHA256H         Q18, Q19, V7.4S }
        _Q3 = (int32x4_t)vrev32q_s8(v52);
        __asm { SHA256H2        Q19, Q20, V7.4S }
        _Q7 = vaddq_s32(_Q3, v46[3]);
        int32x4_t v9 = vaddq_s32(v9, _Q18);
        _Q17 = vaddq_s32(_Q17, _Q19);
        _Q20 = v9;
        __asm
        {
          SHA256SU0       V0.4S, V1.4S
          SHA256H         Q18, Q19, V4.4S
          SHA256SU1       V0.4S, V2.4S, V3.4S
          SHA256H2        Q19, Q20, V4.4S
        }
        _Q4 = vaddq_s32(_Q0, v46[4]);
        _Q20 = _Q18;
        __asm
        {
          SHA256SU0       V1.4S, V2.4S
          SHA256H         Q18, Q19, V5.4S
          SHA256SU1       V1.4S, V3.4S, V0.4S
          SHA256H2        Q19, Q20, V5.4S
        }
        _Q5 = vaddq_s32(_Q1, v46[5]);
        _Q20 = _Q18;
        __asm
        {
          SHA256SU0       V2.4S, V3.4S
          SHA256H         Q18, Q19, V6.4S
          SHA256SU1       V2.4S, V0.4S, V1.4S
          SHA256H2        Q19, Q20, V6.4S
        }
        _Q6 = vaddq_s32(_Q2, v46[6]);
        _Q20 = _Q18;
        __asm
        {
          SHA256SU0       V3.4S, V0.4S
          SHA256H         Q18, Q19, V7.4S
          SHA256SU1       V3.4S, V1.4S, V2.4S
          SHA256H2        Q19, Q20, V7.4S
        }
        _Q7 = vaddq_s32(_Q3, v46[7]);
        _Q20 = _Q18;
        __asm
        {
          SHA256SU0       V0.4S, V1.4S
          SHA256H         Q18, Q19, V4.4S
          SHA256SU1       V0.4S, V2.4S, V3.4S
          SHA256H2        Q19, Q20, V4.4S
        }
        _Q4 = vaddq_s32(_Q0, v46[8]);
        _Q20 = _Q18;
        __asm
        {
          SHA256SU0       V1.4S, V2.4S
          SHA256H         Q18, Q19, V5.4S
          SHA256SU1       V1.4S, V3.4S, V0.4S
          SHA256H2        Q19, Q20, V5.4S
        }
        _Q5 = vaddq_s32(_Q1, v46[9]);
        _Q20 = _Q18;
        __asm
        {
          SHA256SU0       V2.4S, V3.4S
          SHA256H         Q18, Q19, V6.4S
          SHA256SU1       V2.4S, V0.4S, V1.4S
          SHA256H2        Q19, Q20, V6.4S
        }
        _Q6 = vaddq_s32(_Q2, v46[10]);
        _Q20 = _Q18;
        __asm
        {
          SHA256SU0       V3.4S, V0.4S
          SHA256H         Q18, Q19, V7.4S
          SHA256SU1       V3.4S, V1.4S, V2.4S
          SHA256H2        Q19, Q20, V7.4S
        }
        _Q7 = vaddq_s32(_Q3, v46[11]);
        _Q20 = _Q18;
        __asm
        {
          SHA256SU0       V0.4S, V1.4S
          SHA256H         Q18, Q19, V4.4S
          SHA256SU1       V0.4S, V2.4S, V3.4S
          SHA256H2        Q19, Q20, V4.4S
        }
        _Q4 = vaddq_s32(_Q0, v46[12]);
        _Q20 = _Q18;
        __asm
        {
          SHA256SU0       V1.4S, V2.4S
          SHA256H         Q18, Q19, V5.4S
          SHA256SU1       V1.4S, V3.4S, V0.4S
          SHA256H2        Q19, Q20, V5.4S
        }
        _Q5 = vaddq_s32(_Q1, v46[13]);
        _Q20 = _Q18;
        __asm
        {
          SHA256SU0       V2.4S, V3.4S
          SHA256H         Q18, Q19, V6.4S
          SHA256SU1       V2.4S, V0.4S, V1.4S
          SHA256H2        Q19, Q20, V6.4S
        }
        _Q6 = vaddq_s32(_Q2, v46[14]);
        _Q20 = _Q18;
        __asm
        {
          SHA256SU0       V3.4S, V0.4S
          SHA256H         Q18, Q19, V7.4S
          SHA256SU1       V3.4S, V1.4S, V2.4S
          SHA256H2        Q19, Q20, V7.4S
        }
        _Q7 = vaddq_s32(_Q3, v46[15]);
        BOOL v44 = v45-- <= 1;
      }
      while (!v44);
    }
    _Q20 = _Q18;
    __asm
    {
      SHA256H         Q18, Q19, V4.4S
      SHA256H2        Q19, Q20, V4.4S
    }
    _Q20 = _Q18;
    __asm
    {
      SHA256H         Q18, Q19, V5.4S
      SHA256H2        Q19, Q20, V5.4S
    }
    _Q20 = _Q18;
    __asm
    {
      SHA256H         Q18, Q19, V6.4S
      SHA256H2        Q19, Q20, V6.4S
    }
    _Q20 = _Q18;
    __asm
    {
      SHA256H         Q18, Q19, V7.4S
      SHA256H2        Q19, Q20, V7.4S
    }
    void *result = vaddq_s32(v9, _Q18);
    result[1] = vaddq_s32(_Q17, _Q19);
  }
  return result;
}

uint64_t sub_19D76A014(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v8 = (uint64_t *)(a2 + 3);
  uint64_t v9 = *a2;
  unint64_t v10 = sub_19D768998(*a2, &a2[2 * *a2 + 4]);
  if (v9) {
    BOOL v11 = v10 >= 2;
  }
  else {
    BOOL v11 = 0;
  }
  if (!v11 || (unint64_t)sub_19D768DDC(v9, v8) <= 1 && (unint64_t)*v8 < 2) {
    return 4294967268;
  }
  char v13 = (unint64_t *)&v8[2 * *a2 + 1];

  return sub_19D76E53C(a1, a2, a3, a4, v13);
}

uint64_t sub_19D76A0D8(unint64_t *a1, uint64_t a2, unint64_t a3, char *a4, unint64_t a5, unsigned __int8 *a6, unsigned char *a7)
{
  void v25[2] = *MEMORY[0x1E4F143B8];
  BOOL v24 = sub_19D76CDE0();
  *a7 = 0;
  unint64_t v13 = *a1;
  uint64_t v14 = sub_19D768148();
  unint64_t v15 = sub_19D7696B0();
  v22[0] = sub_19D76EDB0(8 * ((v14 + v15 - 1) / v15 + 13 * v13) + 8);
  unint64_t v16 = *a1;
  uint64_t v17 = sub_19D768148();
  unint64_t v18 = sub_19D7696B0();
  v22[1] = (v17 + v18 - 1) / v18 + 13 * v16 + 1;
  _OWORD v22[2] = 0;
  v22[3] = sub_19D76EDEC;
  char v23 = sub_19D76EE34;
  if (v22[0])
  {
    v25[0] = 0;
    v25[1] = 0;
    uint64_t v19 = sub_19D76581C((uint64_t)v22, a1, a2, a3, a4, a5, a6, 0, (unsigned __int8 *)v25);
    v23((uint64_t)v22);
    if (v19)
    {
      if (v19 == -146) {
        uint64_t v19 = 0;
      }
      else {
        uint64_t v19 = v19;
      }
    }
    else
    {
      *a7 = 1;
    }
  }
  else
  {
    uint64_t v19 = 4294967283;
  }
  sub_19D76EF94((unsigned int *)&v24);
  return v19;
}

double sub_19D76A264(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t a4, char *a5, unint64_t a6, unsigned __int8 *a7, void *a8)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a8)
  {
    *a8 = 0;
    a8[1] = 0;
  }
  long long v10 = 0uLL;
  sub_19D76581C(a1, a2, a3, a4, a5, a6, a7, 0, (unsigned __int8 *)&v10);
  if (a8)
  {
    double result = *(double *)&v10;
    *(_OWORD *)a8 = v10;
  }
  return result;
}

uint64_t sub_19D76A2E0(unint64_t *a1, uint64_t a2, unint64_t a3, char *a4, unint64_t a5, unsigned __int8 *a6, void *a7)
{
  BOOL v26 = sub_19D76CDE0();
  unint64_t v13 = *a1;
  uint64_t v14 = sub_19D768148();
  unint64_t v15 = sub_19D7696B0();
  v24[0] = sub_19D76EDB0(8 * ((v14 + v15 - 1) / v15 + 13 * v13) + 8);
  unint64_t v16 = *a1;
  uint64_t v17 = sub_19D768148();
  unint64_t v18 = sub_19D7696B0();
  v24[1] = (v17 + v18 - 1) / v18 + 13 * v16 + 1;
  v24[2] = 0;
  void v24[3] = sub_19D76EDEC;
  char v25 = sub_19D76EE34;
  if (v24[0])
  {
    double v19 = sub_19D76A264((uint64_t)v24, a1, a2, a3, a4, a5, a6, a7);
    uint64_t v21 = v20;
    ((void (*)(void *, double))v25)(v24, v19);
  }
  else
  {
    uint64_t v21 = 4294967283;
  }
  sub_19D76EF94((unsigned int *)&v26);
  return v21;
}

uint64_t sub_19D76A418(uint64_t a1, unint64_t *a2, int a3, uint64_t a4, unsigned __int8 *a5, void *a6)
{
  if (!a4) {
    return 4294967289;
  }
  unint64_t v11 = *a2;
  if (a4 == 1 && !*a5) {
    return 4294967136;
  }
  switch(a3)
  {
    case 4:
      uint64_t v12 = 4294967124;
      if (a4 != (unint64_t)(sub_19D767AF4((uint64_t)a2) + 7) >> 3) {
        return v12;
      }
      goto LABEL_20;
    case 1:
      if ((((unint64_t)(sub_19D767AF4((uint64_t)a2) + 7) >> 2) | 1) != a4) {
        return 4294967126;
      }
      uint64_t v12 = 4294967126;
      if (*a5 != 4) {
        return v12;
      }
LABEL_20:
      uint64_t v14 = *(void *)(a1 + 16);
      unint64_t v15 = (uint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v11);
      if (a3 == 4) {
        unint64_t v16 = a5;
      }
      else {
        unint64_t v16 = a5 + 1;
      }
      uint64_t v17 = sub_19D767AF4((uint64_t)a2);
      uint64_t v18 = sub_19D768E64(v11, a6, (unint64_t)(v17 + 7) >> 3, v16);
      if (v18) {
        goto LABEL_38;
      }
      if (sub_19D76899C(v11, a6, a2 + 3) == -1)
      {
        if ((a3 - 3) <= 1)
        {
          uint64_t v18 = sub_19D76569C(a1, a2, (uint64_t)a6, (uint64_t)a6);
          if (!v18)
          {
            sub_19D763378((uint64_t)a2, v15, &a6[*a2]);
            double v19 = &a6[*a2];
            if (a3 == 4) {
              unsigned int v20 = sub_19D76899C(v11, v15, v19) >> 31;
            }
            else {
              LOBYTE(v20) = (*v19 & 1) != (*a5 & 1);
            }
            sub_19D7686D0(v11, v20, v19, v15, v19);
            goto LABEL_35;
          }
LABEL_38:
          uint64_t v12 = v18;
          goto LABEL_36;
        }
        uint64_t v21 = &a5[((unint64_t)(sub_19D767AF4((uint64_t)a2) + 7) >> 3) + 1];
        int32x4_t v22 = &a6[*a2];
        uint64_t v23 = sub_19D767AF4((uint64_t)a2);
        uint64_t v12 = sub_19D768E64(v11, v22, (unint64_t)(v23 + 7) >> 3, v21);
        if (!v12)
        {
          if (a3 != 2 || (a6[*a2] & 1) == (*a5 & 1))
          {
LABEL_35:
            uint64_t v12 = 0;
            goto LABEL_36;
          }
          uint64_t v12 = 4294967125;
        }
      }
LABEL_36:
      *(void *)(a1 + 16) = v14;
      return v12;
    case 2:
      if ((((unint64_t)(sub_19D767AF4((uint64_t)a2) + 7) >> 2) | 1) != a4) {
        return 4294967125;
      }
      unsigned int v13 = *a5 - 8;
      uint64_t v12 = 4294967125;
      goto LABEL_19;
  }
  if (a3 != 3) {
    return 4294967289;
  }
  if (sub_19D76968C((uint64_t)a2) != a4) {
    return 4294967135;
  }
  unsigned int v13 = *a5 - 4;
  uint64_t v12 = 4294967135;
LABEL_19:
  if (v13 >= 0xFFFFFFFE) {
    goto LABEL_20;
  }
  return v12;
}

unsigned int *sub_19D76A6D0(unsigned int *result, uint64_t a2, const char *a3)
{
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  memset(v99, 0, sizeof(v99));
  memset(v98, 0, sizeof(v98));
  int8x16_t v96 = 0u;
  int8x16_t v97 = 0u;
  int8x16_t v94 = 0u;
  int8x16_t v95 = 0u;
  if (a2)
  {
    unsigned int v3 = *result;
    int v4 = result[1];
    int v5 = result[2];
    int v6 = result[3];
    int v7 = result[4];
    do
    {
      uint64_t v8 = 0;
      int8x16x4_t v103 = vld4q_s8(a3);
      uint16x8_t v9 = vmovl_u8(*(uint8x8_t *)v103.val[0].i8);
      uint16x8_t v10 = vmovl_high_u8((uint8x16_t)v103.val[0]);
      _Q16 = vmovl_u8(*(uint8x8_t *)v103.val[1].i8);
      _Q17 = vmovl_high_u8((uint8x16_t)v103.val[1]);
      __asm
      {
        SHLL2           V18.4S, V17.8H, #0x10
        SHLL2           V19.4S, V16.8H, #0x10
      }
      uint16x8_t v19 = vmovl_high_u8((uint8x16_t)v103.val[2]);
      uint16x8_t v20 = vmovl_u8(*(uint8x8_t *)v103.val[2].i8);
      int8x16_t v21 = vorrq_s8(vorrq_s8((int8x16_t)vshll_n_s16(*(int16x4_t *)_Q16.i8, 0x10uLL), (int8x16_t)vshll_n_u16(*(uint16x4_t *)v20.i8, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v9.i8), 0x18uLL));
      uint16x8_t v22 = vmovl_high_u8((uint8x16_t)v103.val[3]);
      v103.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v103.val[3].i8);
      int8x16_t v96 = vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshll_n_s16(*(int16x4_t *)_Q17.i8, 0x10uLL), (int8x16_t)vshll_n_u16(*(uint16x4_t *)v19.i8, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v10.i8), 0x18uLL)), (int8x16_t)vmovl_u16(*(uint16x4_t *)v22.i8));
      int8x16_t v97 = vorrq_s8(vorrq_s8(vorrq_s8(_Q18, (int8x16_t)vshll_high_n_u16(v19, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v10), 0x18uLL)), (int8x16_t)vmovl_high_u16(v22));
      int8x16_t v94 = vorrq_s8(v21, (int8x16_t)vmovl_u16(*(uint16x4_t *)v103.val[0].i8));
      int8x16_t v95 = vorrq_s8(vorrq_s8(vorrq_s8(_Q19, (int8x16_t)vshll_high_n_u16(v20, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v9), 0x18uLL)), (int8x16_t)vmovl_high_u16((uint16x8_t)v103.val[0]));
      do
      {
        HIDWORD(v23) = v96.i32[v8] ^ v97.i32[v8 + 1] ^ v94.i32[v8 + 2] ^ v94.i32[v8];
        LODWORD(v23) = HIDWORD(v23);
        *(_DWORD *)((char *)v98 + v8 * 4) = v23 >> 31;
        ++v8;
      }
      while (v8 != 64);
      unint64_t v24 = -5;
      char v25 = &v94.i32[2];
      int v26 = v7;
      int v27 = v6;
      int v28 = v5;
      int v29 = v4;
      unsigned int v30 = v3;
      do
      {
        HIDWORD(v31) = v30;
        LODWORD(v31) = v30;
        unsigned int v32 = (v31 >> 27) + v26 + 1518500249 + (v28 & v29 | v27 & ~v29) + *(v25 - 2);
        HIDWORD(v31) = v29;
        LODWORD(v31) = v29;
        int v33 = v31 >> 2;
        unint64_t v34 = __PAIR64__(v32, __ROR4__(v29, 2));
        int v35 = v30 & v34 | v28 & ~v30;
        LODWORD(v34) = v32;
        unsigned int v36 = v27 + 1518500249 + v35 + *(v25 - 1) + (v34 >> 27);
        HIDWORD(v34) = v30;
        LODWORD(v34) = v30;
        int v37 = v34 >> 2;
        unint64_t v38 = __PAIR64__(v36, __ROR4__(v30, 2));
        int v39 = v32 & v38 | v33 & ~v32;
        LODWORD(v38) = v36;
        unsigned int v40 = v28 + 1518500249 + *v25 + v39 + (v38 >> 27);
        HIDWORD(v38) = v32;
        LODWORD(v38) = v32;
        int v26 = v38 >> 2;
        unint64_t v41 = __PAIR64__(v40, __ROR4__(v32, 2));
        int v42 = v36 & v41 | v37 & ~v36;
        LODWORD(v41) = v40;
        int v29 = v33 + 1518500249 + v25[1] + v42 + (v41 >> 27);
        HIDWORD(v41) = v36;
        LODWORD(v41) = v36;
        int v27 = v41 >> 2;
        HIDWORD(v41) = v29;
        LODWORD(v41) = v29;
        int v43 = v41 >> 27;
        unint64_t v44 = __PAIR64__(v40, __ROR4__(v36, 2));
        unsigned int v30 = v37 + 1518500249 + v25[2] + (v40 & v44 | v26 & ~v40) + v43;
        LODWORD(v44) = v40;
        int v28 = v44 >> 2;
        v24 += 5;
        v25 += 5;
      }
      while (v24 < 0xF);
      --a2;
      uint64_t v45 = (int *)v99;
      for (unint64_t i = 15; i < 0x23; i += 5)
      {
        HIDWORD(v47) = v30;
        LODWORD(v47) = v30;
        unsigned int v48 = (v47 >> 27) + 1859775393 + (v28 ^ v29 ^ v27) + v26 + *(v45 - 4);
        HIDWORD(v47) = v29;
        LODWORD(v47) = v29;
        int v49 = v47 >> 2;
        HIDWORD(v47) = v48;
        LODWORD(v47) = v48;
        int v50 = v47 >> 27;
        unint64_t v51 = __PAIR64__(v30, __ROR4__(v29, 2));
        unsigned int v52 = v27 + 1859775393 + (v30 ^ v51 ^ v28) + *(v45 - 3) + v50;
        LODWORD(v51) = v30;
        int v53 = v51 >> 2;
        HIDWORD(v51) = v52;
        LODWORD(v51) = v52;
        int v54 = v51 >> 27;
        unint64_t v55 = __PAIR64__(v48, __ROR4__(v30, 2));
        unsigned int v56 = v28 + 1859775393 + *(v45 - 2) + (v49 ^ v55 ^ v48) + v54;
        LODWORD(v55) = v48;
        int v26 = v55 >> 2;
        HIDWORD(v55) = v56;
        LODWORD(v55) = v56;
        int v57 = v55 >> 27;
        unint64_t v58 = __PAIR64__(v52, __ROR4__(v30, 2));
        int v29 = v49 + 1859775393 + *(v45 - 1) + (v26 ^ v58 ^ v52) + v57;
        LODWORD(v58) = v52;
        int v27 = v58 >> 2;
        HIDWORD(v58) = v29;
        LODWORD(v58) = v29;
        int v59 = v58 >> 27;
        unint64_t v60 = __PAIR64__(v56, __ROR4__(v48, 2));
        int v61 = *v45;
        v45 += 5;
        unsigned int v30 = v53 + 1859775393 + v61 + (v27 ^ v60 ^ v56) + v59;
        LODWORD(v60) = v56;
        int v28 = v60 >> 2;
      }
      BOOL v62 = (int *)v100;
      unint64_t v63 = 35;
      do
      {
        HIDWORD(v65) = v30;
        LODWORD(v65) = v30;
        int v64 = v65 >> 27;
        HIDWORD(v65) = v29;
        LODWORD(v65) = v29;
        int v66 = v65 >> 2;
        int v67 = v64 + v26 - 1894007588 + (v27 & (v28 | v29) | v28 & v29) + *(v62 - 4);
        HIDWORD(v65) = v67;
        LODWORD(v65) = v67;
        int v68 = v65 >> 27;
        unint64_t v69 = __PAIR64__(v30, __ROR4__(v29, 2));
        int v70 = (v30 | v69) & v28 | v30 & __ROR4__(v29, 2);
        LODWORD(v69) = v30;
        int v71 = v69 >> 2;
        int v72 = v27 - 1894007588 + v70 + *(v62 - 3) + v68;
        HIDWORD(v69) = v72;
        LODWORD(v69) = v72;
        int v73 = v28
            - 1894007588
            + *(v62 - 2)
            + ((v67 | __ROR4__(v30, 2)) & __ROR4__(v29, 2) | v67 & __ROR4__(v30, 2))
            + (v69 >> 27);
        HIDWORD(v69) = v73;
        LODWORD(v69) = v73;
        int v29 = v66
            - 1894007588
            + *(v62 - 1)
            + ((v72 | __ROR4__(v67, 2)) & __ROR4__(v30, 2) | v72 & __ROR4__(v67, 2))
            + (v69 >> 27);
        unint64_t v74 = __PAIR64__(v67, __ROR4__(v67, 2));
        int v75 = (v73 | __ROR4__(v72, 2)) & v74 | v73 & __ROR4__(v72, 2);
        int v76 = *v62;
        v62 += 5;
        LODWORD(v74) = v67;
        int v26 = v74 >> 2;
        HIDWORD(v74) = v72;
        LODWORD(v74) = v72;
        int v27 = v74 >> 2;
        HIDWORD(v74) = v29;
        LODWORD(v74) = v29;
        unsigned int v30 = v71 - 1894007588 + v76 + v75 + (v74 >> 27);
        v63 += 5;
        HIDWORD(v74) = v73;
        LODWORD(v74) = v73;
        int v28 = v74 >> 2;
      }
      while (v63 < 0x37);
      BOOL v77 = (int *)v101;
      for (unint64_t j = 55; j < 0x4B; j += 5)
      {
        HIDWORD(v79) = v30;
        LODWORD(v79) = v30;
        unsigned int v80 = (v79 >> 27) - 899497514 + (v28 ^ v29 ^ v27) + v26 + *(v77 - 4);
        HIDWORD(v79) = v29;
        LODWORD(v79) = v29;
        int v81 = v79 >> 2;
        HIDWORD(v79) = v80;
        LODWORD(v79) = v80;
        int v82 = v79 >> 27;
        unint64_t v83 = __PAIR64__(v30, __ROR4__(v29, 2));
        unsigned int v84 = v27 - 899497514 + (v30 ^ v83 ^ v28) + *(v77 - 3) + v82;
        LODWORD(v83) = v30;
        int v85 = v83 >> 2;
        HIDWORD(v83) = v84;
        LODWORD(v83) = v84;
        int v86 = v83 >> 27;
        unint64_t v87 = __PAIR64__(v80, __ROR4__(v30, 2));
        unsigned int v88 = v28 - 899497514 + *(v77 - 2) + (v81 ^ v87 ^ v80) + v86;
        LODWORD(v87) = v80;
        int v26 = v87 >> 2;
        HIDWORD(v87) = v88;
        LODWORD(v87) = v88;
        int v89 = v87 >> 27;
        unint64_t v90 = __PAIR64__(v84, __ROR4__(v30, 2));
        int v29 = v81 - 899497514 + *(v77 - 1) + (v26 ^ v90 ^ v84) + v89;
        LODWORD(v90) = v84;
        int v27 = v90 >> 2;
        HIDWORD(v90) = v29;
        LODWORD(v90) = v29;
        int v91 = v90 >> 27;
        unint64_t v92 = __PAIR64__(v88, __ROR4__(v80, 2));
        int v93 = *v77;
        v77 += 5;
        unsigned int v30 = v85 - 899497514 + v93 + (v27 ^ v92 ^ v88) + v91;
        LODWORD(v92) = v88;
        int v28 = v92 >> 2;
      }
      v3 += v30;
      v4 += v29;
      void *result = v3;
      result[1] = v4;
      v5 += v28;
      v6 += v27;
      result[2] = v5;
      result[3] = v6;
      v7 += v26;
      a3 += 64;
      result[4] = v7;
    }
    while (a2);
  }
  return result;
}

int8x16_t sub_19D76AC40(int8x16_t *a1, int8x16_t *a2, double a3, double a4, double a5, double a6, double a7, int8x16_t a8)
{
  int32x4_t v8 = (int32x4_t)vqtbl1q_s8(*a2, *(int8x16_t *)qword_19D76B280);
  int8x16_t v9 = veorq_s8(a8, a8);
  int8x16_t v10 = veorq_s8(vandq_s8(vextq_s8(*(int8x16_t *)&qword_19D76B280[2], *(int8x16_t *)&qword_19D76B280[2], 8uLL), (int8x16_t)vshrq_n_s32(vdupq_laneq_s32(v8, 3), 0x1FuLL)), vorrq_s8(vextq_s8(v9, (int8x16_t)vshrq_n_u64((uint64x2_t)v8, 0x3FuLL), 8uLL), (int8x16_t)vshlq_n_s64((int64x2_t)v8, 1uLL)));
  *a1 = v10;
  a1[8] = veorq_s8(v10, vextq_s8(v10, v10, 8uLL));
  int8x16_t v11 = (int8x16_t)vmull_high_p64((uint64x2_t)v10, (uint64x2_t)v10);
  int8x16_t v12 = (int8x16_t)vmull_p64(v10.u64[0], v10.u64[0]);
  int8x16_t v13 = veorq_s8(v12, veorq_s8(v11, (int8x16_t)vmull_p64(veorq_s8(v10, vextq_s8(v10, v10, 8uLL)).u64[0], veorq_s8(v10, vextq_s8(v10, v10, 8uLL)).u64[0])));
  int8x16_t v14 = veorq_s8(vextq_s8(v9, v13, 8uLL), v12);
  int8x16_t v15 = veorq_s8(vextq_s8(v14, v14, 8uLL), (int8x16_t)vmull_p64(0xC200000000000000, v14.u64[0]));
  int8x16_t v16 = veorq_s8(veorq_s8(vextq_s8(v13, v9, 8uLL), v11), veorq_s8(vextq_s8(v15, v15, 8uLL), (int8x16_t)vmull_p64(0xC200000000000000, v15.u64[0])));
  a1[1] = v16;
  a1[9] = veorq_s8(v16, vextq_s8(v16, v16, 8uLL));
  v13.i64[0] = veorq_s8(v16, vextq_s8(v16, v16, 8uLL)).u64[0];
  int8x16_t v17 = (int8x16_t)vmull_high_p64((uint64x2_t)v16, (uint64x2_t)v10);
  int8x16_t v18 = (int8x16_t)vmull_p64(v16.u64[0], v10.u64[0]);
  int8x16_t v19 = veorq_s8(v18, veorq_s8(v17, (int8x16_t)vmull_p64(veorq_s8(v10, vextq_s8(v10, v10, 8uLL)).u64[0], v13.u64[0])));
  int8x16_t v20 = veorq_s8(vextq_s8(v9, v19, 8uLL), v18);
  int8x16_t v21 = veorq_s8(vextq_s8(v20, v20, 8uLL), (int8x16_t)vmull_p64(0xC200000000000000, v20.u64[0]));
  int8x16_t v22 = veorq_s8(veorq_s8(vextq_s8(v19, v9, 8uLL), v17), veorq_s8(vextq_s8(v21, v21, 8uLL), (int8x16_t)vmull_p64(0xC200000000000000, v21.u64[0])));
  a1[2] = v22;
  a1[10] = veorq_s8(v22, vextq_s8(v22, v22, 8uLL));
  v19.i64[0] = veorq_s8(v22, vextq_s8(v22, v22, 8uLL)).u64[0];
  int8x16_t v23 = (int8x16_t)vmull_high_p64((uint64x2_t)v22, (uint64x2_t)v10);
  int8x16_t v24 = (int8x16_t)vmull_p64(v22.u64[0], v10.u64[0]);
  int8x16_t v25 = veorq_s8(v24, veorq_s8(v23, (int8x16_t)vmull_p64(veorq_s8(v10, vextq_s8(v10, v10, 8uLL)).u64[0], v19.u64[0])));
  int8x16_t v26 = veorq_s8(vextq_s8(v9, v25, 8uLL), v24);
  int8x16_t v27 = veorq_s8(vextq_s8(v26, v26, 8uLL), (int8x16_t)vmull_p64(0xC200000000000000, v26.u64[0]));
  int8x16_t v28 = veorq_s8(veorq_s8(vextq_s8(v25, v9, 8uLL), v23), veorq_s8(vextq_s8(v27, v27, 8uLL), (int8x16_t)vmull_p64(0xC200000000000000, v27.u64[0])));
  a1[3] = v28;
  a1[11] = veorq_s8(v28, vextq_s8(v28, v28, 8uLL));
  v25.i64[0] = veorq_s8(v28, vextq_s8(v28, v28, 8uLL)).u64[0];
  int8x16_t v29 = (int8x16_t)vmull_high_p64((uint64x2_t)v28, (uint64x2_t)v10);
  int8x16_t v30 = (int8x16_t)vmull_p64(v28.u64[0], v10.u64[0]);
  int8x16_t v31 = veorq_s8(v30, veorq_s8(v29, (int8x16_t)vmull_p64(veorq_s8(v10, vextq_s8(v10, v10, 8uLL)).u64[0], v25.u64[0])));
  int8x16_t v32 = veorq_s8(vextq_s8(v9, v31, 8uLL), v30);
  int8x16_t v33 = veorq_s8(vextq_s8(v32, v32, 8uLL), (int8x16_t)vmull_p64(0xC200000000000000, v32.u64[0]));
  int8x16_t v34 = veorq_s8(veorq_s8(vextq_s8(v31, v9, 8uLL), v29), veorq_s8(vextq_s8(v33, v33, 8uLL), (int8x16_t)vmull_p64(0xC200000000000000, v33.u64[0])));
  a1[4] = v34;
  a1[12] = veorq_s8(v34, vextq_s8(v34, v34, 8uLL));
  v31.i64[0] = veorq_s8(v34, vextq_s8(v34, v34, 8uLL)).u64[0];
  int8x16_t v35 = (int8x16_t)vmull_high_p64((uint64x2_t)v34, (uint64x2_t)v10);
  int8x16_t v36 = (int8x16_t)vmull_p64(v34.u64[0], v10.u64[0]);
  int8x16_t v37 = veorq_s8(v36, veorq_s8(v35, (int8x16_t)vmull_p64(veorq_s8(v10, vextq_s8(v10, v10, 8uLL)).u64[0], v31.u64[0])));
  int8x16_t v38 = veorq_s8(vextq_s8(v9, v37, 8uLL), v36);
  int8x16_t v39 = veorq_s8(vextq_s8(v38, v38, 8uLL), (int8x16_t)vmull_p64(0xC200000000000000, v38.u64[0]));
  int8x16_t v40 = veorq_s8(veorq_s8(vextq_s8(v37, v9, 8uLL), v35), veorq_s8(vextq_s8(v39, v39, 8uLL), (int8x16_t)vmull_p64(0xC200000000000000, v39.u64[0])));
  a1[5] = v40;
  a1[13] = veorq_s8(v40, vextq_s8(v40, v40, 8uLL));
  v37.i64[0] = veorq_s8(v40, vextq_s8(v40, v40, 8uLL)).u64[0];
  int8x16_t v41 = (int8x16_t)vmull_high_p64((uint64x2_t)v40, (uint64x2_t)v10);
  int8x16_t v42 = (int8x16_t)vmull_p64(v40.u64[0], v10.u64[0]);
  int8x16_t v43 = veorq_s8(v42, veorq_s8(v41, (int8x16_t)vmull_p64(veorq_s8(v10, vextq_s8(v10, v10, 8uLL)).u64[0], v37.u64[0])));
  int8x16_t v44 = veorq_s8(vextq_s8(v9, v43, 8uLL), v42);
  int8x16_t v45 = veorq_s8(vextq_s8(v44, v44, 8uLL), (int8x16_t)vmull_p64(0xC200000000000000, v44.u64[0]));
  int8x16_t v46 = veorq_s8(veorq_s8(vextq_s8(v43, v9, 8uLL), v41), veorq_s8(vextq_s8(v45, v45, 8uLL), (int8x16_t)vmull_p64(0xC200000000000000, v45.u64[0])));
  a1[6] = v46;
  a1[14] = veorq_s8(v46, vextq_s8(v46, v46, 8uLL));
  v43.i64[0] = veorq_s8(v46, vextq_s8(v46, v46, 8uLL)).u64[0];
  int8x16_t v47 = (int8x16_t)vmull_high_p64((uint64x2_t)v46, (uint64x2_t)v10);
  int8x16_t v48 = (int8x16_t)vmull_p64(v46.u64[0], v10.u64[0]);
  int8x16_t v49 = veorq_s8(v48, veorq_s8(v47, (int8x16_t)vmull_p64(veorq_s8(v10, vextq_s8(v10, v10, 8uLL)).u64[0], v43.u64[0])));
  int8x16_t v50 = veorq_s8(vextq_s8(v9, v49, 8uLL), v48);
  int8x16_t v51 = veorq_s8(vextq_s8(v50, v50, 8uLL), (int8x16_t)vmull_p64(0xC200000000000000, v50.u64[0]));
  int8x16_t result = veorq_s8(veorq_s8(vextq_s8(v49, v9, 8uLL), v47), veorq_s8(vextq_s8(v51, v51, 8uLL), (int8x16_t)vmull_p64(0xC200000000000000, v51.u64[0])));
  a1[7] = result;
  a1[15] = veorq_s8(result, vextq_s8(result, result, 8uLL));
  return result;
}

int8x16_t sub_19D76AF40(int8x16_t *a1, uint64x2_t *a2, int8x16_t *a3, double a4, double a5, double a6, double a7, double a8, int8x16_t a9)
{
  int8x16_t v9 = vqtbl1q_s8(*a1, *(int8x16_t *)qword_19D76B280);
  int8x16_t v10 = veorq_s8(a9, a9);
  unint64_t v11 = veorq_s8(v9, vextq_s8(v9, v9, 8uLL)).u64[0];
  int8x16_t v12 = (int8x16_t)vmull_high_p64((uint64x2_t)v9, *a2);
  int8x16_t v13 = (int8x16_t)vmull_p64(v9.u64[0], a2->i64[0]);
  int8x16_t v14 = veorq_s8(v13, veorq_s8(v12, (int8x16_t)vmull_p64(veorq_s8(*(int8x16_t *)a2, vextq_s8(*(int8x16_t *)a2, *(int8x16_t *)a2, 8uLL)).u64[0], v11)));
  int8x16_t v15 = veorq_s8(vextq_s8(v10, v14, 8uLL), v13);
  int8x16_t v16 = veorq_s8(vextq_s8(v15, v15, 8uLL), (int8x16_t)vmull_p64(0xC200000000000000, v15.u64[0]));
  int8x16_t result = vqtbl1q_s8(veorq_s8(veorq_s8(vextq_s8(v14, v10, 8uLL), v12), veorq_s8(vextq_s8(v16, v16, 8uLL), (int8x16_t)vmull_p64(0xC200000000000000, v16.u64[0]))), *(int8x16_t *)qword_19D76B280);
  *a3 = result;
  return result;
}

int8x16_t sub_19D76AFC0(int8x16_t *a1, uint64x2_t *a2, int8x16_t *a3, uint64_t a4)
{
  int8x16_t v5 = veorq_s8(v4, v4);
  int8x16_t v6 = vqtbl1q_s8(*a1, *(int8x16_t *)qword_19D76B280);
  BOOL v7 = a4 < 128;
  for (uint64_t i = a4 - 128; !v7; i -= 128)
  {
    int8x16_t v9 = vqtbl1q_s8(a3[7], *(int8x16_t *)qword_19D76B280);
    int8x16_t v10 = (int8x16_t)vmull_p64(a2->i64[0], v9.u64[0]);
    int8x16_t v11 = (int8x16_t)vmull_high_p64(*a2, (uint64x2_t)v9);
    int8x16_t v12 = (int8x16_t)vmull_p64(a2[8].u64[0], veorq_s8(v9, vextq_s8(v9, v9, 8uLL)).u64[0]);
    int8x16_t v13 = vqtbl1q_s8(a3[6], *(int8x16_t *)qword_19D76B280);
    uint64x2_t v14 = a2[1];
    int8x16_t v15 = veorq_s8(v10, (int8x16_t)vmull_p64(v14.u64[0], v13.u64[0]));
    int8x16_t v16 = veorq_s8(v11, (int8x16_t)vmull_high_p64(v14, (uint64x2_t)v13));
    int8x16_t v17 = veorq_s8(v12, (int8x16_t)vmull_p64(a2[9].u64[0], veorq_s8(v13, vextq_s8(v13, v13, 8uLL)).u64[0]));
    int8x16_t v18 = vqtbl1q_s8(a3[5], *(int8x16_t *)qword_19D76B280);
    uint64x2_t v19 = a2[2];
    int8x16_t v20 = veorq_s8(v15, (int8x16_t)vmull_p64(v19.u64[0], v18.u64[0]));
    int8x16_t v21 = veorq_s8(v16, (int8x16_t)vmull_high_p64(v19, (uint64x2_t)v18));
    int8x16_t v22 = veorq_s8(v17, (int8x16_t)vmull_p64(a2[10].u64[0], veorq_s8(v18, vextq_s8(v18, v18, 8uLL)).u64[0]));
    int8x16_t v23 = vqtbl1q_s8(a3[4], *(int8x16_t *)qword_19D76B280);
    uint64x2_t v24 = a2[3];
    int8x16_t v25 = veorq_s8(v20, (int8x16_t)vmull_p64(v24.u64[0], v23.u64[0]));
    int8x16_t v26 = veorq_s8(v21, (int8x16_t)vmull_high_p64(v24, (uint64x2_t)v23));
    int8x16_t v27 = veorq_s8(v22, (int8x16_t)vmull_p64(a2[11].u64[0], veorq_s8(v23, vextq_s8(v23, v23, 8uLL)).u64[0]));
    int8x16_t v28 = vqtbl1q_s8(a3[3], *(int8x16_t *)qword_19D76B280);
    uint64x2_t v29 = a2[4];
    int8x16_t v30 = veorq_s8(v25, (int8x16_t)vmull_p64(v29.u64[0], v28.u64[0]));
    int8x16_t v31 = veorq_s8(v26, (int8x16_t)vmull_high_p64(v29, (uint64x2_t)v28));
    int8x16_t v32 = veorq_s8(v27, (int8x16_t)vmull_p64(a2[12].u64[0], veorq_s8(v28, vextq_s8(v28, v28, 8uLL)).u64[0]));
    int8x16_t v33 = vqtbl1q_s8(a3[2], *(int8x16_t *)qword_19D76B280);
    uint64x2_t v34 = a2[5];
    int8x16_t v35 = veorq_s8(v30, (int8x16_t)vmull_p64(v34.u64[0], v33.u64[0]));
    int8x16_t v36 = veorq_s8(v31, (int8x16_t)vmull_high_p64(v34, (uint64x2_t)v33));
    int8x16_t v37 = veorq_s8(v32, (int8x16_t)vmull_p64(a2[13].u64[0], veorq_s8(v33, vextq_s8(v33, v33, 8uLL)).u64[0]));
    int8x16_t v38 = vqtbl1q_s8(a3[1], *(int8x16_t *)qword_19D76B280);
    uint64x2_t v39 = a2[6];
    int8x16_t v40 = veorq_s8(v35, (int8x16_t)vmull_p64(v39.u64[0], v38.u64[0]));
    int8x16_t v41 = veorq_s8(v36, (int8x16_t)vmull_high_p64(v39, (uint64x2_t)v38));
    int8x16_t v42 = veorq_s8(v37, (int8x16_t)vmull_p64(a2[14].u64[0], veorq_s8(v38, vextq_s8(v38, v38, 8uLL)).u64[0]));
    uint64x2_t v43 = a2[7];
    int8x16_t v44 = veorq_s8(vqtbl1q_s8(*a3, *(int8x16_t *)qword_19D76B280), v6);
    int8x16_t v45 = veorq_s8(v40, (int8x16_t)vmull_p64(v43.u64[0], v44.u64[0]));
    int8x16_t v46 = veorq_s8(v41, (int8x16_t)vmull_high_p64(v43, (uint64x2_t)v44));
    int8x16_t v47 = veorq_s8(v46, veorq_s8(v45, veorq_s8(v42, (int8x16_t)vmull_p64(a2[15].u64[0], veorq_s8(v44, vextq_s8(v44, v44, 8uLL)).u64[0]))));
    int8x16_t v48 = veorq_s8(v45, vextq_s8(v5, v47, 8uLL));
    int8x16_t v49 = veorq_s8((int8x16_t)vmull_p64(0xC200000000000000, v48.u64[0]), vextq_s8(v48, v48, 8uLL));
    int8x16_t v6 = veorq_s8(veorq_s8(v46, vextq_s8(v47, v5, 8uLL)), veorq_s8((int8x16_t)vmull_p64(0xC200000000000000, v49.u64[0]), vextq_s8(v49, v49, 8uLL)));
    a3 += 8;
    BOOL v7 = i < 128;
  }
  BOOL v7 = i < -112;
  uint64_t v50 = i + 112;
  if (!v7)
  {
    int8x16_t v52 = *a3;
    int8x16_t v51 = a3 + 1;
    int8x16_t v53 = veorq_s8(v6, vqtbl1q_s8(v52, *(int8x16_t *)qword_19D76B280));
    int v54 = (uint64x2_t *)((char *)a2 + v50);
    uint64x2_t v55 = *(uint64x2_t *)((char *)a2 + v50);
    int8x16_t v56 = (int8x16_t)vmull_p64(v53.u64[0], v55.u64[0]);
    int8x16_t v57 = (int8x16_t)vmull_high_p64((uint64x2_t)v53, v55);
    int8x16_t v58 = (int8x16_t)vmull_p64(veorq_s8(v53, vextq_s8(v53, v53, 8uLL)).u64[0], *(unint64_t *)((char *)a2[8].u64 + v50));
    BOOL v7 = v50 < 16;
    for (uint64_t j = v50 - 16; !v7; j -= 16)
    {
      --v54;
      int8x16_t v60 = *v51++;
      int8x16_t v61 = vqtbl1q_s8(v60, *(int8x16_t *)qword_19D76B280);
      int8x16_t v56 = veorq_s8(v56, (int8x16_t)vmull_p64(v61.u64[0], v54->i64[0]));
      int8x16_t v57 = veorq_s8(v57, (int8x16_t)vmull_high_p64((uint64x2_t)v61, *v54));
      int8x16_t v58 = veorq_s8(v58, (int8x16_t)vmull_p64(veorq_s8(v61, vextq_s8(v61, v61, 8uLL)).u64[0], v54[8].u64[0]));
      BOOL v7 = j < 16;
    }
    int8x16_t v62 = veorq_s8(v57, veorq_s8(v56, v58));
    int8x16_t v63 = veorq_s8(v56, vextq_s8(v5, v62, 8uLL));
    int8x16_t v64 = veorq_s8((int8x16_t)vmull_p64(0xC200000000000000, v63.u64[0]), vextq_s8(v63, v63, 8uLL));
    int8x16_t v6 = veorq_s8(veorq_s8(v57, vextq_s8(v62, v5, 8uLL)), veorq_s8((int8x16_t)vmull_p64(0xC200000000000000, v64.u64[0]), vextq_s8(v64, v64, 8uLL)));
  }
  int8x16_t result = vqtbl1q_s8(v6, *(int8x16_t *)qword_19D76B280);
  *a1 = result;
  return result;
}

int64x2_t *sub_19D76B2A0(int64x2_t *result, uint64_t a2, int8x16_t *a3)
{
  if (a2)
  {
    int64x2_t v3 = *result;
    int64x2_t v4 = result[1];
    int64x2_t v5 = result[2];
    int64x2_t v6 = result[3];
    do
    {
      _Q24 = v3;
      _Q25 = v4;
      _Q0 = vrev64q_s8(*a3);
      _Q1 = vrev64q_s8(a3[1]);
      _Q2 = vrev64q_s8(a3[2]);
      _Q3 = vrev64q_s8(a3[3]);
      _Q4 = vrev64q_s8(a3[4]);
      _Q5 = vrev64q_s8(a3[5]);
      _Q6 = vrev64q_s8(a3[6]);
      _Q7 = vrev64q_s8(a3[7]);
      a3 += 8;
      _Q29 = vextq_s8((int8x16_t)v5, (int8x16_t)v6, 8uLL);
      _Q28 = vextq_s8((int8x16_t)v4, (int8x16_t)v5, 8uLL);
      _Q31 = vextq_s8(_Q4, _Q5, 8uLL);
      __asm
      {
        SHA512H         Q27, Q29, V28.2D
        SHA512SU0       V0.2D, V1.2D
      }
      int64x2_t v26 = _Q27;
      __asm
      {
        SHA512H2        Q27, Q25, V24.2D
        SHA512SU1       V0.2D, V7.2D, V31.2D
      }
      int8x16_t v29 = (int8x16_t)vaddq_s64(v4, v26);
      _Q29 = vextq_s8(v29, (int8x16_t)v5, 8uLL);
      _Q28 = vextq_s8((int8x16_t)v3, v29, 8uLL);
      _Q31 = vextq_s8(_Q5, _Q6, 8uLL);
      __asm
      {
        SHA512H         Q26, Q29, V28.2D
        SHA512SU0       V1.2D, V2.2D
      }
      int64x2_t v35 = _Q26;
      __asm
      {
        SHA512H2        Q26, Q24, V27.2D
        SHA512SU1       V1.2D, V0.2D, V31.2D
      }
      int8x16_t v38 = (int8x16_t)vaddq_s64(v3, v35);
      _Q29 = vextq_s8(v38, v29, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q27, v38, 8uLL);
      _Q31 = vextq_s8(_Q6, _Q7, 8uLL);
      __asm
      {
        SHA512H         Q25, Q29, V28.2D
        SHA512SU0       V2.2D, V3.2D
      }
      int64x2_t v44 = _Q25;
      __asm
      {
        SHA512H2        Q25, Q27, V26.2D
        SHA512SU1       V2.2D, V1.2D, V31.2D
      }
      int8x16_t v47 = (int8x16_t)vaddq_s64(_Q27, v44);
      _Q29 = vextq_s8(v47, v38, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q26, v47, 8uLL);
      _Q31 = vextq_s8(_Q7, _Q0, 8uLL);
      __asm
      {
        SHA512H         Q24, Q29, V28.2D
        SHA512SU0       V3.2D, V4.2D
      }
      int64x2_t v53 = _Q24;
      __asm
      {
        SHA512H2        Q24, Q26, V25.2D
        SHA512SU1       V3.2D, V2.2D, V31.2D
      }
      int8x16_t v56 = (int8x16_t)vaddq_s64(_Q26, v53);
      _Q29 = vextq_s8(v56, v47, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q25, v56, 8uLL);
      _Q31 = vextq_s8(_Q0, _Q1, 8uLL);
      __asm
      {
        SHA512H         Q27, Q29, V28.2D
        SHA512SU0       V4.2D, V5.2D
      }
      int64x2_t v62 = _Q27;
      __asm
      {
        SHA512H2        Q27, Q25, V24.2D
        SHA512SU1       V4.2D, V3.2D, V31.2D
      }
      int8x16_t v65 = (int8x16_t)vaddq_s64(_Q25, v62);
      _Q29 = vextq_s8(v65, v56, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q24, v65, 8uLL);
      _Q31 = vextq_s8(_Q1, _Q2, 8uLL);
      __asm
      {
        SHA512H         Q26, Q29, V28.2D
        SHA512SU0       V5.2D, V6.2D
      }
      int64x2_t v71 = _Q26;
      __asm
      {
        SHA512H2        Q26, Q24, V27.2D
        SHA512SU1       V5.2D, V4.2D, V31.2D
      }
      int8x16_t v74 = (int8x16_t)vaddq_s64(_Q24, v71);
      _Q29 = vextq_s8(v74, v65, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q27, v74, 8uLL);
      _Q31 = vextq_s8(_Q2, _Q3, 8uLL);
      __asm
      {
        SHA512H         Q25, Q29, V28.2D
        SHA512SU0       V6.2D, V7.2D
      }
      int64x2_t v80 = _Q25;
      __asm
      {
        SHA512H2        Q25, Q27, V26.2D
        SHA512SU1       V6.2D, V5.2D, V31.2D
      }
      int8x16_t v83 = (int8x16_t)vaddq_s64(_Q27, v80);
      _Q29 = vextq_s8(v83, v74, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q26, v83, 8uLL);
      _Q31 = vextq_s8(_Q3, _Q4, 8uLL);
      __asm
      {
        SHA512H         Q24, Q29, V28.2D
        SHA512SU0       V7.2D, V0.2D
      }
      int64x2_t v89 = _Q24;
      __asm
      {
        SHA512H2        Q24, Q26, V25.2D
        SHA512SU1       V7.2D, V6.2D, V31.2D
      }
      int8x16_t v92 = (int8x16_t)vaddq_s64(_Q26, v89);
      _Q29 = vextq_s8(v92, v83, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q25, v92, 8uLL);
      _Q31 = vextq_s8(_Q4, _Q5, 8uLL);
      __asm
      {
        SHA512H         Q27, Q29, V28.2D
        SHA512SU0       V0.2D, V1.2D
      }
      int64x2_t v98 = _Q27;
      __asm
      {
        SHA512H2        Q27, Q25, V24.2D
        SHA512SU1       V0.2D, V7.2D, V31.2D
      }
      int8x16_t v101 = (int8x16_t)vaddq_s64(_Q25, v98);
      _Q29 = vextq_s8(v101, v92, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q24, v101, 8uLL);
      _Q31 = vextq_s8(_Q5, _Q6, 8uLL);
      __asm
      {
        SHA512H         Q26, Q29, V28.2D
        SHA512SU0       V1.2D, V2.2D
      }
      int64x2_t v107 = _Q26;
      __asm
      {
        SHA512H2        Q26, Q24, V27.2D
        SHA512SU1       V1.2D, V0.2D, V31.2D
      }
      int8x16_t v110 = (int8x16_t)vaddq_s64(_Q24, v107);
      _Q29 = vextq_s8(v110, v101, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q27, v110, 8uLL);
      _Q31 = vextq_s8(_Q6, _Q7, 8uLL);
      __asm
      {
        SHA512H         Q25, Q29, V28.2D
        SHA512SU0       V2.2D, V3.2D
      }
      int64x2_t v116 = _Q25;
      __asm
      {
        SHA512H2        Q25, Q27, V26.2D
        SHA512SU1       V2.2D, V1.2D, V31.2D
      }
      int8x16_t v119 = (int8x16_t)vaddq_s64(_Q27, v116);
      _Q29 = vextq_s8(v119, v110, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q26, v119, 8uLL);
      _Q31 = vextq_s8(_Q7, _Q0, 8uLL);
      __asm
      {
        SHA512H         Q24, Q29, V28.2D
        SHA512SU0       V3.2D, V4.2D
      }
      int64x2_t v125 = _Q24;
      __asm
      {
        SHA512H2        Q24, Q26, V25.2D
        SHA512SU1       V3.2D, V2.2D, V31.2D
      }
      int8x16_t v128 = (int8x16_t)vaddq_s64(_Q26, v125);
      _Q29 = vextq_s8(v128, v119, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q25, v128, 8uLL);
      _Q31 = vextq_s8(_Q0, _Q1, 8uLL);
      __asm
      {
        SHA512H         Q27, Q29, V28.2D
        SHA512SU0       V4.2D, V5.2D
      }
      int64x2_t v134 = _Q27;
      __asm
      {
        SHA512H2        Q27, Q25, V24.2D
        SHA512SU1       V4.2D, V3.2D, V31.2D
      }
      int8x16_t v137 = (int8x16_t)vaddq_s64(_Q25, v134);
      _Q29 = vextq_s8(v137, v128, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q24, v137, 8uLL);
      _Q31 = vextq_s8(_Q1, _Q2, 8uLL);
      __asm
      {
        SHA512H         Q26, Q29, V28.2D
        SHA512SU0       V5.2D, V6.2D
      }
      int64x2_t v143 = _Q26;
      __asm
      {
        SHA512H2        Q26, Q24, V27.2D
        SHA512SU1       V5.2D, V4.2D, V31.2D
      }
      int8x16_t v146 = (int8x16_t)vaddq_s64(_Q24, v143);
      _Q29 = vextq_s8(v146, v137, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q27, v146, 8uLL);
      _Q31 = vextq_s8(_Q2, _Q3, 8uLL);
      __asm
      {
        SHA512H         Q25, Q29, V28.2D
        SHA512SU0       V6.2D, V7.2D
      }
      int64x2_t v152 = _Q25;
      __asm
      {
        SHA512H2        Q25, Q27, V26.2D
        SHA512SU1       V6.2D, V5.2D, V31.2D
      }
      int8x16_t v155 = (int8x16_t)vaddq_s64(_Q27, v152);
      _Q29 = vextq_s8(v155, v146, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q26, v155, 8uLL);
      _Q31 = vextq_s8(_Q3, _Q4, 8uLL);
      __asm
      {
        SHA512H         Q24, Q29, V28.2D
        SHA512SU0       V7.2D, V0.2D
      }
      int64x2_t v161 = _Q24;
      __asm
      {
        SHA512H2        Q24, Q26, V25.2D
        SHA512SU1       V7.2D, V6.2D, V31.2D
      }
      int8x16_t v164 = (int8x16_t)vaddq_s64(_Q26, v161);
      _Q29 = vextq_s8(v164, v155, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q25, v164, 8uLL);
      _Q31 = vextq_s8(_Q4, _Q5, 8uLL);
      __asm
      {
        SHA512H         Q27, Q29, V28.2D
        SHA512SU0       V0.2D, V1.2D
      }
      int64x2_t v170 = _Q27;
      __asm
      {
        SHA512H2        Q27, Q25, V24.2D
        SHA512SU1       V0.2D, V7.2D, V31.2D
      }
      int8x16_t v173 = (int8x16_t)vaddq_s64(_Q25, v170);
      _Q29 = vextq_s8(v173, v164, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q24, v173, 8uLL);
      _Q31 = vextq_s8(_Q5, _Q6, 8uLL);
      __asm
      {
        SHA512H         Q26, Q29, V28.2D
        SHA512SU0       V1.2D, V2.2D
      }
      int64x2_t v179 = _Q26;
      __asm
      {
        SHA512H2        Q26, Q24, V27.2D
        SHA512SU1       V1.2D, V0.2D, V31.2D
      }
      int8x16_t v182 = (int8x16_t)vaddq_s64(_Q24, v179);
      _Q29 = vextq_s8(v182, v173, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q27, v182, 8uLL);
      _Q31 = vextq_s8(_Q6, _Q7, 8uLL);
      __asm
      {
        SHA512H         Q25, Q29, V28.2D
        SHA512SU0       V2.2D, V3.2D
      }
      int64x2_t v188 = _Q25;
      __asm
      {
        SHA512H2        Q25, Q27, V26.2D
        SHA512SU1       V2.2D, V1.2D, V31.2D
      }
      int8x16_t v191 = (int8x16_t)vaddq_s64(_Q27, v188);
      _Q29 = vextq_s8(v191, v182, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q26, v191, 8uLL);
      _Q31 = vextq_s8(_Q7, _Q0, 8uLL);
      __asm
      {
        SHA512H         Q24, Q29, V28.2D
        SHA512SU0       V3.2D, V4.2D
      }
      int64x2_t v197 = _Q24;
      __asm
      {
        SHA512H2        Q24, Q26, V25.2D
        SHA512SU1       V3.2D, V2.2D, V31.2D
      }
      int8x16_t v200 = (int8x16_t)vaddq_s64(_Q26, v197);
      _Q29 = vextq_s8(v200, v191, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q25, v200, 8uLL);
      _Q31 = vextq_s8(_Q0, _Q1, 8uLL);
      __asm
      {
        SHA512H         Q27, Q29, V28.2D
        SHA512SU0       V4.2D, V5.2D
      }
      int64x2_t v206 = _Q27;
      __asm
      {
        SHA512H2        Q27, Q25, V24.2D
        SHA512SU1       V4.2D, V3.2D, V31.2D
      }
      int8x16_t v209 = (int8x16_t)vaddq_s64(_Q25, v206);
      _Q29 = vextq_s8(v209, v200, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q24, v209, 8uLL);
      _Q31 = vextq_s8(_Q1, _Q2, 8uLL);
      __asm
      {
        SHA512H         Q26, Q29, V28.2D
        SHA512SU0       V5.2D, V6.2D
      }
      int64x2_t v215 = _Q26;
      __asm
      {
        SHA512H2        Q26, Q24, V27.2D
        SHA512SU1       V5.2D, V4.2D, V31.2D
      }
      int8x16_t v218 = (int8x16_t)vaddq_s64(_Q24, v215);
      _Q29 = vextq_s8(v218, v209, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q27, v218, 8uLL);
      _Q31 = vextq_s8(_Q2, _Q3, 8uLL);
      __asm
      {
        SHA512H         Q25, Q29, V28.2D
        SHA512SU0       V6.2D, V7.2D
      }
      int64x2_t v224 = _Q25;
      __asm
      {
        SHA512H2        Q25, Q27, V26.2D
        SHA512SU1       V6.2D, V5.2D, V31.2D
      }
      int8x16_t v227 = (int8x16_t)vaddq_s64(_Q27, v224);
      _Q29 = vextq_s8(v227, v218, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q26, v227, 8uLL);
      _Q31 = vextq_s8(_Q3, _Q4, 8uLL);
      __asm
      {
        SHA512H         Q24, Q29, V28.2D
        SHA512SU0       V7.2D, V0.2D
      }
      int64x2_t v233 = _Q24;
      __asm
      {
        SHA512H2        Q24, Q26, V25.2D
        SHA512SU1       V7.2D, V6.2D, V31.2D
      }
      int8x16_t v236 = (int8x16_t)vaddq_s64(_Q26, v233);
      _Q29 = vextq_s8(v236, v227, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q25, v236, 8uLL);
      _Q31 = vextq_s8(_Q4, _Q5, 8uLL);
      __asm
      {
        SHA512H         Q27, Q29, V28.2D
        SHA512SU0       V0.2D, V1.2D
      }
      int64x2_t v242 = _Q27;
      __asm
      {
        SHA512H2        Q27, Q25, V24.2D
        SHA512SU1       V0.2D, V7.2D, V31.2D
      }
      int8x16_t v245 = (int8x16_t)vaddq_s64(_Q25, v242);
      _Q29 = vextq_s8(v245, v236, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q24, v245, 8uLL);
      _Q31 = vextq_s8(_Q5, _Q6, 8uLL);
      __asm
      {
        SHA512H         Q26, Q29, V28.2D
        SHA512SU0       V1.2D, V2.2D
      }
      int64x2_t v251 = _Q26;
      __asm
      {
        SHA512H2        Q26, Q24, V27.2D
        SHA512SU1       V1.2D, V0.2D, V31.2D
      }
      int8x16_t v254 = (int8x16_t)vaddq_s64(_Q24, v251);
      _Q29 = vextq_s8(v254, v245, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q27, v254, 8uLL);
      _Q31 = vextq_s8(_Q6, _Q7, 8uLL);
      __asm
      {
        SHA512H         Q25, Q29, V28.2D
        SHA512SU0       V2.2D, V3.2D
      }
      int64x2_t v260 = _Q25;
      __asm
      {
        SHA512H2        Q25, Q27, V26.2D
        SHA512SU1       V2.2D, V1.2D, V31.2D
      }
      int8x16_t v263 = (int8x16_t)vaddq_s64(_Q27, v260);
      _Q29 = vextq_s8(v263, v254, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q26, v263, 8uLL);
      _Q31 = vextq_s8(_Q7, _Q0, 8uLL);
      __asm
      {
        SHA512H         Q24, Q29, V28.2D
        SHA512SU0       V3.2D, V4.2D
      }
      int64x2_t v269 = _Q24;
      __asm
      {
        SHA512H2        Q24, Q26, V25.2D
        SHA512SU1       V3.2D, V2.2D, V31.2D
      }
      int8x16_t v272 = (int8x16_t)vaddq_s64(_Q26, v269);
      _Q29 = vextq_s8(v272, v263, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q25, v272, 8uLL);
      _Q31 = vextq_s8(_Q0, _Q1, 8uLL);
      __asm
      {
        SHA512H         Q27, Q29, V28.2D
        SHA512SU0       V4.2D, V5.2D
      }
      int64x2_t v278 = _Q27;
      __asm
      {
        SHA512H2        Q27, Q25, V24.2D
        SHA512SU1       V4.2D, V3.2D, V31.2D
      }
      int8x16_t v281 = (int8x16_t)vaddq_s64(_Q25, v278);
      _Q29 = vextq_s8(v281, v272, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q24, v281, 8uLL);
      _Q31 = vextq_s8(_Q1, _Q2, 8uLL);
      __asm
      {
        SHA512H         Q26, Q29, V28.2D
        SHA512SU0       V5.2D, V6.2D
      }
      int64x2_t v287 = _Q26;
      __asm
      {
        SHA512H2        Q26, Q24, V27.2D
        SHA512SU1       V5.2D, V4.2D, V31.2D
      }
      int8x16_t v290 = (int8x16_t)vaddq_s64(_Q24, v287);
      _Q29 = vextq_s8(v290, v281, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q27, v290, 8uLL);
      _Q31 = vextq_s8(_Q2, _Q3, 8uLL);
      __asm
      {
        SHA512H         Q25, Q29, V28.2D
        SHA512SU0       V6.2D, V7.2D
      }
      int64x2_t v296 = _Q25;
      __asm
      {
        SHA512H2        Q25, Q27, V26.2D
        SHA512SU1       V6.2D, V5.2D, V31.2D
      }
      int8x16_t v299 = (int8x16_t)vaddq_s64(_Q27, v296);
      _Q29 = vextq_s8(v299, v290, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q26, v299, 8uLL);
      _Q31 = vextq_s8(_Q3, _Q4, 8uLL);
      __asm
      {
        SHA512H         Q24, Q29, V28.2D
        SHA512SU0       V7.2D, V0.2D
      }
      int64x2_t v305 = _Q24;
      __asm
      {
        SHA512H2        Q24, Q26, V25.2D
        SHA512SU1       V7.2D, V6.2D, V31.2D
      }
      int8x16_t v308 = (int8x16_t)vaddq_s64(_Q26, v305);
      _Q29 = vextq_s8(v308, v299, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q25, v308, 8uLL);
      __asm
      {
        SHA512H         Q30, Q29, V28.2D
        SHA512H2        Q27, Q25, V24.2D
      }
      int8x16_t v313 = (int8x16_t)vaddq_s64(_Q25, _Q30);
      _Q29 = vextq_s8(v313, v308, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q24, v313, 8uLL);
      __asm
      {
        SHA512H         Q30, Q29, V28.2D
        SHA512H2        Q26, Q24, V27.2D
      }
      int8x16_t v318 = (int8x16_t)vaddq_s64(_Q24, _Q30);
      _Q29 = vextq_s8(v318, v313, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q27, v318, 8uLL);
      __asm
      {
        SHA512H         Q30, Q29, V28.2D
        SHA512H2        Q25, Q27, V26.2D
      }
      int8x16_t v323 = (int8x16_t)vaddq_s64(_Q27, _Q30);
      _Q29 = vextq_s8(v323, v318, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q26, v323, 8uLL);
      __asm
      {
        SHA512H         Q30, Q29, V28.2D
        SHA512H2        Q24, Q26, V25.2D
      }
      int8x16_t v328 = (int8x16_t)vaddq_s64(_Q26, _Q30);
      _Q29 = vextq_s8(v328, v323, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q25, v328, 8uLL);
      __asm
      {
        SHA512H         Q30, Q29, V28.2D
        SHA512H2        Q27, Q25, V24.2D
      }
      int8x16_t v333 = (int8x16_t)vaddq_s64(_Q25, _Q30);
      _Q29 = vextq_s8(v333, v328, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q24, v333, 8uLL);
      __asm
      {
        SHA512H         Q30, Q29, V28.2D
        SHA512H2        Q26, Q24, V27.2D
      }
      int8x16_t v338 = (int8x16_t)vaddq_s64(_Q24, _Q30);
      _Q29 = vextq_s8(v338, v333, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q27, v338, 8uLL);
      __asm
      {
        SHA512H         Q30, Q29, V28.2D
        SHA512H2        Q25, Q27, V26.2D
      }
      int64x2_t v343 = vaddq_s64(_Q27, _Q30);
      _Q29 = vextq_s8((int8x16_t)v343, v338, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q26, (int8x16_t)v343, 8uLL);
      __asm
      {
        SHA512H         Q30, Q29, V28.2D
        SHA512H2        Q24, Q26, V25.2D
      }
      int64x2_t v3 = vaddq_s64(v3, _Q24);
      int64x2_t v4 = vaddq_s64(v4, _Q25);
      int64x2_t v5 = vaddq_s64(v5, vaddq_s64(_Q26, _Q30));
      int64x2_t v6 = vaddq_s64(v6, v343);
    }
    while (a2-- > 1);
    void *result = v3;
    result[1] = v4;
    result[2] = v5;
    result[3] = v6;
  }
  return result;
}

void *sub_19D76BB14()
{
  return &unk_1E5963C60;
}

_OWORD *sub_19D76BB20(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4, unint64_t *a5)
{
  return sub_19D76EA80(a3, a4, a5);
}

_OWORD *sub_19D76BB30(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4)
{
  return sub_19D76EA80(a3, a4, a4);
}

uint64_t sub_19D76BB40(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a1 + 16);
  int v8 = 4;
  int8x16_t v9 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 4);
  int8x16_t v10 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 4);
  int8x16_t v11 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 4);
  sub_19D76EA80(v11, a4, a4);
  sub_19D76EA80(v10, v11, a4);
  sub_19D76EA80(v10, v10, v10);
  sub_19D76EA80(v10, v10, v10);
  sub_19D76EA80(v9, v10, a4);
  sub_19D76EA80(v10, v9, v11);
  do
  {
    sub_19D76EA80(v10, v10, v10);
    --v8;
  }
  while (v8);
  sub_19D76EA80(v9, v9, v10);
  sub_19D76EA80(v10, v9, v11);
  int v12 = 8;
  do
  {
    sub_19D76EA80(v10, v10, v10);
    --v12;
  }
  while (v12);
  sub_19D76EA80(v9, v9, v10);
  sub_19D76EA80(v10, v9, v11);
  int v13 = 16;
  do
  {
    sub_19D76EA80(v10, v10, v10);
    --v13;
  }
  while (v13);
  sub_19D76EA80(v9, v9, v10);
  sub_19D76EA80(v10, v9, v11);
  sub_19D768F38(4, v11, v10);
  int v14 = 32;
  do
  {
    sub_19D76EA80(v11, v11, v11);
    --v14;
  }
  while (v14);
  sub_19D76EA80(v11, v11, a4);
  int v15 = 128;
  do
  {
    sub_19D76EA80(v11, v11, v11);
    --v15;
  }
  while (v15);
  sub_19D76EA80(v11, v11, v10);
  int v16 = 32;
  do
  {
    sub_19D76EA80(v11, v11, v11);
    --v16;
  }
  while (v16);
  sub_19D76EA80(v11, v11, v10);
  int v17 = 32;
  do
  {
    sub_19D76EA80(v11, v11, v11);
    --v17;
  }
  while (v17);
  sub_19D76EA80(v10, v11, v9);
  sub_19D76EA80(v9, v10, a4);
  v19[0] = xmmword_19D77B278;
  v19[1] = *(_OWORD *)algn_19D77B288;
  sub_19D76EA80(v9, v9, (unint64_t *)v19);
  if (sub_19D768DDC(4, (uint64_t *)v9) == 1 && *v9 == 1)
  {
    sub_19D768F38(4, a3, v10);
    uint64_t result = 0;
  }
  else
  {
    uint64_t result = 4294967254;
  }
  *(void *)(a1 + 16) = v7;
  return result;
}

_OWORD *sub_19D76BE2C(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v5[0] = xmmword_19D77B278;
  v5[1] = *(_OWORD *)algn_19D77B288;
  return sub_19D76EA80(a3, a4, (unint64_t *)v5);
}

unsigned int *sub_19D76BE94(unsigned int *result, uint64_t a2, const char *a3)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  memset(v80, 0, sizeof(v80));
  int8x16_t v78 = 0u;
  int8x16_t v79 = 0u;
  int8x16_t v76 = 0u;
  int8x16_t v77 = 0u;
  if (a2)
  {
    unsigned int v3 = *result;
    unsigned int v4 = result[1];
    unsigned int v5 = result[2];
    unsigned int v6 = result[3];
    int v7 = result[4];
    int v8 = result[5];
    int v9 = result[6];
    int v10 = result[7];
    do
    {
      uint64_t v11 = 0;
      --a2;
      int8x16x4_t v82 = vld4q_s8(a3);
      uint16x8_t v12 = vmovl_u8(*(uint8x8_t *)v82.val[0].i8);
      uint16x8_t v13 = vmovl_high_u8((uint8x16_t)v82.val[0]);
      _Q16 = vmovl_high_u8((uint8x16_t)v82.val[1]);
      _Q17 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v82.val[1].i8);
      int8x16_t v16 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q17.i8, 0x10uLL);
      __asm
      {
        SHLL2           V19.4S, V16.8H, #0x10
        SHLL2           V17.4S, V17.8H, #0x10
      }
      uint16x8_t v22 = vmovl_u8(*(uint8x8_t *)v82.val[2].i8);
      uint16x8_t v23 = vmovl_high_u8((uint8x16_t)v82.val[2]);
      int8x16_t v24 = vorrq_s8(vorrq_s8((int8x16_t)vshll_n_s16(*(int16x4_t *)_Q16.i8, 0x10uLL), (int8x16_t)vshll_n_u16(*(uint16x4_t *)v23.i8, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v13.i8), 0x18uLL));
      uint16x8_t v25 = vmovl_u8(*(uint8x8_t *)v82.val[3].i8);
      v82.val[0] = (int8x16_t)vmovl_high_u8((uint8x16_t)v82.val[3]);
      int8x16_t v78 = vorrq_s8(v24, (int8x16_t)vmovl_u16(*(uint16x4_t *)v82.val[0].i8));
      int8x16_t v79 = vorrq_s8(vorrq_s8(vorrq_s8(_Q19, (int8x16_t)vshll_high_n_u16(v23, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v13), 0x18uLL)), (int8x16_t)vmovl_high_u16((uint16x8_t)v82.val[0]));
      int8x16_t v76 = vorrq_s8(vorrq_s8(vorrq_s8(v16, (int8x16_t)vshll_n_u16(*(uint16x4_t *)v22.i8, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v12.i8), 0x18uLL)), (int8x16_t)vmovl_u16(*(uint16x4_t *)v25.i8));
      int8x16_t v77 = vorrq_s8(vorrq_s8(vorrq_s8(_Q17, (int8x16_t)vshll_high_n_u16(v22, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v12), 0x18uLL)), (int8x16_t)vmovl_high_u16(v25));
      __int32 v26 = v76.i32[0];
      do
      {
        HIDWORD(v27) = v79.i32[v11 + 2];
        LODWORD(v27) = HIDWORD(v27);
        int v28 = (v27 >> 17) ^ __ROR4__(HIDWORD(v27), 19) ^ (HIDWORD(v27) >> 10);
        HIDWORD(v27) = v76.i32[v11 + 1];
        LODWORD(v27) = HIDWORD(v27);
        *(_DWORD *)((char *)v80 + v11 * 4) = v28
                                           + v78.i32[v11 + 1]
                                           + v26
                                           + ((v27 >> 7) ^ __ROR4__(HIDWORD(v27), 18) ^ (HIDWORD(v27) >> 3));
        ++v11;
        __int32 v26 = HIDWORD(v27);
      }
      while (v11 != 48);
      int8x16_t v29 = &dword_19D77B2B0;
      unint64_t v30 = -8;
      int8x16_t v31 = &v77;
      int v32 = v10;
      int v33 = v9;
      int v34 = v8;
      int v35 = v7;
      unsigned int v36 = v6;
      unsigned int v37 = v5;
      unsigned int v38 = v4;
      unsigned int v39 = v3;
      do
      {
        HIDWORD(v40) = v35;
        LODWORD(v40) = v35;
        int v41 = (v40 >> 6) ^ __ROR4__(v35, 11);
        unint64_t v43 = __PAIR64__(v39, __ROR4__(v35, 25));
        int v42 = v41 ^ v43;
        LODWORD(v43) = v39;
        int v44 = v32 + (v34 & v35 | v33 & ~v35) + *(v29 - 4) + v31[-1].i32[0] + v42;
        int v45 = v44 + v36;
        unsigned int v46 = ((v38 | v39) & v37 | v38 & v39) + ((v43 >> 2) ^ __ROR4__(v39, 13) ^ __ROR4__(v39, 22)) + v44;
        HIDWORD(v43) = v45;
        LODWORD(v43) = v45;
        int v47 = (v43 >> 6) ^ __ROR4__(v45, 11);
        unint64_t v48 = __PAIR64__(v46, __ROR4__(v45, 25));
        int v49 = *(v29 - 3) + v33 + v31[-1].i32[1] + (v35 & v45 | v34 & ~v45) + (v47 ^ v48);
        LODWORD(v48) = v46;
        int v50 = v49 + v37;
        unsigned int v51 = ((v48 >> 2) ^ __ROR4__(v46, 13) ^ __ROR4__(v46, 22)) + ((v46 | v39) & v38 | v46 & v39) + v49;
        HIDWORD(v48) = v50;
        LODWORD(v48) = v50;
        int v52 = (v48 >> 6) ^ __ROR4__(v50, 11);
        unint64_t v54 = __PAIR64__(v51, __ROR4__(v50, 25));
        int v53 = v52 ^ v54;
        LODWORD(v54) = v51;
        int v55 = *(v29 - 2) + v34 + v31[-1].i32[2] + (v45 & v50 | v35 & ~v50) + v53;
        int v56 = v55 + v38;
        unsigned int v57 = ((v54 >> 2) ^ __ROR4__(v51, 13) ^ __ROR4__(v51, 22)) + ((v51 | v46) & v39 | v51 & v46) + v55;
        HIDWORD(v54) = v56;
        LODWORD(v54) = v56;
        int v58 = (v54 >> 6) ^ __ROR4__(v56, 11);
        unint64_t v59 = __PAIR64__(v57, __ROR4__(v56, 25));
        int v60 = *(v29 - 1) + v35 + v31[-1].i32[3] + (v50 & v56 | v45 & ~v56) + (v58 ^ v59);
        LODWORD(v59) = v57;
        int v61 = v60 + v39;
        unsigned int v62 = ((v59 >> 2) ^ __ROR4__(v57, 13) ^ __ROR4__(v57, 22)) + ((v57 | v51) & v46 | v57 & v51) + v60;
        HIDWORD(v59) = v61;
        LODWORD(v59) = v61;
        int v63 = (v59 >> 6) ^ __ROR4__(v61, 11);
        unint64_t v65 = __PAIR64__(v62, __ROR4__(v61, 25));
        int v64 = v63 ^ v65;
        LODWORD(v65) = v62;
        int v66 = *v29 + v31->i32[0] + v45 + (v56 & v61 | v50 & ~v61) + v64;
        int v32 = v66 + v46;
        unsigned int v36 = ((v65 >> 2) ^ __ROR4__(v62, 13) ^ __ROR4__(v62, 22)) + ((v62 | v57) & v51 | v62 & v57) + v66;
        HIDWORD(v65) = v32;
        LODWORD(v65) = v32;
        int v67 = (v65 >> 6) ^ __ROR4__(v32, 11);
        unint64_t v68 = __PAIR64__(v36, __ROR4__(v32, 25));
        int v69 = v50 + v29[1] + v31->i32[1] + (v61 & v32 | v56 & ~v32) + (v67 ^ v68);
        LODWORD(v68) = v36;
        int v33 = v69 + v51;
        unsigned int v37 = ((v68 >> 2) ^ __ROR4__(v36, 13) ^ __ROR4__(v36, 22)) + ((v36 | v62) & v57 | v36 & v62) + v69;
        HIDWORD(v68) = v33;
        LODWORD(v68) = v33;
        int v70 = (v68 >> 6) ^ __ROR4__(v33, 11);
        unint64_t v71 = __PAIR64__(v37, __ROR4__(v33, 25));
        int v72 = v31->i32[2] + v29[2] + v56 + (v32 & v33 | v61 & ~v33) + (v70 ^ v71);
        LODWORD(v71) = v37;
        int v34 = v72 + v57;
        unsigned int v38 = ((v71 >> 2) ^ __ROR4__(v37, 13) ^ __ROR4__(v37, 22)) + ((v37 | v36) & v62 | v37 & v36) + v72;
        HIDWORD(v71) = v34;
        LODWORD(v71) = v34;
        int v73 = (v71 >> 6) ^ __ROR4__(v34, 11);
        unint64_t v74 = __PAIR64__(v38, __ROR4__(v34, 25));
        int v75 = v31->i32[3] + v29[3] + v61 + (v33 & v34 | v32 & ~v34) + (v73 ^ v74);
        LODWORD(v74) = v38;
        int v35 = v75 + v62;
        unsigned int v39 = ((v74 >> 2) ^ __ROR4__(v38, 13) ^ __ROR4__(v38, 22)) + ((v38 | v37) & v36 | v38 & v37) + v75;
        v30 += 8;
        v31 += 2;
        v29 += 8;
      }
      while (v30 < 0x38);
      v3 += v39;
      v4 += v38;
      void *result = v3;
      result[1] = v4;
      v5 += v37;
      v6 += v36;
      result[2] = v5;
      result[3] = v6;
      v7 += v35;
      v8 += v34;
      result[4] = v7;
      result[5] = v8;
      v9 += v33;
      v10 += v32;
      a3 += 64;
      result[6] = v9;
      result[7] = v10;
    }
    while (a2);
  }
  return result;
}

uint64_t sub_19D76C368(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8 = sub_19D767AEC((uint64_t)a2);
  uint64_t v9 = v8;
  if (v8)
  {
    uint64_t v10 = a2[*a2 + 3];
    uint64_t v11 = a4;
    uint64_t v12 = v8;
    do
    {
      uint64_t v13 = sub_19D76ECF8((uint64_t)a2);
      uint64_t *v11 = sub_19D767338(v9, v11, v13, *v11 * v10);
      ++v11;
      --v12;
    }
    while (v12);
  }
  BOOL v14 = sub_19D768558(a1, v9, &a4[v9], &a4[v9], a4);
  int v15 = (unint64_t *)sub_19D76ECF8((uint64_t)a2);
  char v16 = sub_19D769390(a1, v9, a4, &a4[v9], v15) ^ v14;

  return sub_19D7686D0(v9, v16, a3, &a4[v9], a4);
}

uint64_t sub_19D76C464(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t result = sub_19D768730();
  for (uint64_t i = __ROR8__(0x5555555555555555, a2 | (2 * result)); a1; --a1)
  {
    uint64_t v8 = *a3;
    uint64_t v9 = *a3 ^ result;
    *a3 = v9;
    *a3++ = v9 ^ v8 & 0x5555555555555555 ^ v8 & i ^ result;
  }
  return result;
}

void sub_19D76C4D4(long long *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  bzero(v41, 0x280uLL);
  for (; a2; --a2)
  {
    uint64_t v6 = 0;
    long long v7 = a1[1];
    long long v43 = *a1;
    long long v44 = v7;
    long long v8 = a1[3];
    long long v45 = a1[2];
    long long v46 = v8;
    do
    {
      v41[v6] = bswap64(*(void *)(a3 + v6 * 8));
      ++v6;
    }
    while (v6 != 16);
    unint64_t v9 = 0;
    unint64_t v10 = v41[0];
    do
    {
      unint64_t v11 = v41[v9 / 8 + 1];
      *(void *)&v42[v9 + 96] = (__ROR8__(*(void *)&v42[v9 + 80], 19) ^ __ROR8__(*(void *)&v42[v9 + 80], 61) ^ (*(void *)&v42[v9 + 80] >> 6))
                               + *(void *)&v42[v9 + 40]
                               + v10
                               + (__ROR8__(v11, 1) ^ __ROR8__(v11, 8) ^ (v11 >> 7));
      v9 += 8;
      unint64_t v10 = v11;
    }
    while (v9 != 512);
    uint64_t v12 = *((void *)&v46 + 1);
    uint64_t v13 = v46;
    uint64_t v15 = *((void *)&v45 + 1);
    uint64_t v14 = v45;
    uint64_t v16 = *((void *)&v43 + 1);
    uint64_t v17 = v43;
    int8x16_t v18 = &xmmword_19D77AFE0;
    unint64_t v19 = -8;
    uint64_t v20 = v42;
    uint64_t v21 = *((void *)&v44 + 1);
    uint64_t v22 = v44;
    do
    {
      uint64_t v23 = (__ROR8__(v14, 14) ^ __ROR8__(v14, 18) ^ __ROR8__(v14, 41))
          + v12
          + *((void *)v18 - 4)
          + *(v20 - 4)
          + (v15 & v14 | v13 & ~v14);
      uint64_t v24 = v21 + v23;
      uint64_t v25 = v23 + (__ROR8__(v17, 28) ^ __ROR8__(v17, 34) ^ __ROR8__(v17, 39)) + ((v16 | v17) & v22 | v16 & v17);
      uint64_t v26 = (v14 & v24 | v15 & ~v24)
          + v13
          + *((void *)v18 - 3)
          + *(v20 - 3)
          + (__ROR8__(v24, 14) ^ __ROR8__(v24, 18) ^ __ROR8__(v24, 41));
      uint64_t v27 = v26 + v22;
      uint64_t v28 = (__ROR8__(v25, 28) ^ __ROR8__(v25, 34) ^ __ROR8__(v25, 39)) + ((v25 | v17) & v16 | v25 & v17) + v26;
      uint64_t v29 = *((void *)v18 - 2)
          + v15
          + *(v20 - 2)
          + (v24 & v27 | v14 & ~v27)
          + (__ROR8__(v27, 14) ^ __ROR8__(v27, 18) ^ __ROR8__(v27, 41));
      uint64_t v30 = v29 + v16;
      uint64_t v31 = (__ROR8__(v28, 28) ^ __ROR8__(v28, 34) ^ __ROR8__(v28, 39)) + ((v28 | v25) & v17 | v28 & v25) + v29;
      uint64_t v32 = *((void *)v18 - 1)
          + v14
          + *(v20 - 1)
          + (v27 & v30 | v24 & ~v30)
          + (__ROR8__(v30, 14) ^ __ROR8__(v30, 18) ^ __ROR8__(v30, 41));
      uint64_t v33 = v32 + v17;
      uint64_t v34 = (__ROR8__(v31, 28) ^ __ROR8__(v31, 34) ^ __ROR8__(v31, 39)) + ((v31 | v28) & v25 | v31 & v28) + v32;
      uint64_t v35 = *(void *)v18
          + *v20
          + v24
          + (v30 & v33 | v27 & ~v33)
          + (__ROR8__(v33, 14) ^ __ROR8__(v33, 18) ^ __ROR8__(v33, 41));
      uint64_t v12 = v35 + v25;
      uint64_t v21 = (__ROR8__(v34, 28) ^ __ROR8__(v34, 34) ^ __ROR8__(v34, 39)) + ((v34 | v31) & v28 | v34 & v31) + v35;
      uint64_t v36 = *((void *)v18 + 1)
          + v20[1]
          + v27
          + (v33 & v12 | v30 & ~v12)
          + (__ROR8__(v12, 14) ^ __ROR8__(v12, 18) ^ __ROR8__(v12, 41));
      uint64_t v13 = v36 + v28;
      uint64_t v22 = (__ROR8__(v21, 28) ^ __ROR8__(v21, 34) ^ __ROR8__(v21, 39)) + ((v21 | v34) & v31 | v21 & v34) + v36;
      uint64_t v37 = *((void *)v18 + 2)
          + v20[2]
          + v30
          + (v12 & v13 | v33 & ~v13)
          + (__ROR8__(v13, 14) ^ __ROR8__(v13, 18) ^ __ROR8__(v13, 41));
      uint64_t v15 = v37 + v31;
      uint64_t v16 = (__ROR8__(v22, 28) ^ __ROR8__(v22, 34) ^ __ROR8__(v22, 39)) + ((v22 | v21) & v34 | v22 & v21) + v37;
      uint64_t v38 = *((void *)v18 + 3)
          + v20[3]
          + v33
          + (v13 & v15 | v12 & ~v15)
          + (__ROR8__(v15, 14) ^ __ROR8__(v15, 18) ^ __ROR8__(v15, 41));
      uint64_t v39 = (__ROR8__(v16, 28) ^ __ROR8__(v16, 34) ^ __ROR8__(v16, 39)) + ((v16 | v22) & v21 | v16 & v22);
      uint64_t v14 = v38 + v34;
      uint64_t v17 = v39 + v38;
      v19 += 8;
      v20 += 8;
      v18 += 4;
    }
    while (v19 < 0x48);
    uint64_t v40 = 0;
    *(void *)&long long v46 = v13;
    *((void *)&v46 + 1) = v12;
    *(void *)&long long v45 = v14;
    *((void *)&v45 + 1) = v15;
    *(void *)&long long v43 = v39 + v38;
    *((void *)&v43 + 1) = v16;
    *(void *)&long long v44 = v22;
    *((void *)&v44 + 1) = v21;
    do
    {
      a1[v40] = (__int128)vaddq_s64(*(int64x2_t *)((char *)&v43 + v40 * 16), (int64x2_t)a1[v40]);
      ++v40;
    }
    while (v40 != 4);
    a3 += 128;
  }
}

uint64_t sub_19D76C8F8(uint64_t a1, const void *a2, uint64_t a3)
{
  v22[1] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = (uint64_t)a2 + v7 + 8;
  if (v6 <= *(unsigned int *)(v8 + v6)) {
    *(_DWORD *)(v8 + v6) = 0;
  }
  unint64_t v9 = v7 + 8 + v6;
  size_t v10 = (v9 + 11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = (void *)((char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  bzero(v11, v10);
  memcpy(v11, a2, v9 + 4);
  uint64_t v12 = (char *)v11 + v7 + 8;
  uint64_t v13 = *(unsigned int *)&v12[v6];
  *v11 += (8 * v13);
  *(_DWORD *)&v12[v6] = v13 + 1;
  v12[v13] = 0x80;
  unint64_t v14 = *(unsigned int *)&v12[v6];
  if (v6 - 16 < v14)
  {
    while (v6 > v14)
    {
      *(_DWORD *)&v12[v6] = v14 + 1;
      v12[v14] = 0;
      unint64_t v14 = *(unsigned int *)&v12[v6];
    }
    (*(void (**)(void *, uint64_t))(a1 + 48))(v11 + 1, 1);
    LODWORD(v14) = 0;
    uint64_t v7 = *(void *)(a1 + 8);
    unint64_t v6 = *(void *)(a1 + 16);
    *(_DWORD *)((char *)v11 + v7 + v6 + 8) = 0;
  }
  uint64_t v15 = (uint64_t)v11 + v7 + 8;
  uint64_t v16 = (_DWORD *)(v15 + v6);
  if (v6 - 8 > v14)
  {
    unint64_t v17 = v14;
    do
    {
      _DWORD *v16 = v14 + 1;
      *(unsigned char *)(v15 + v17) = 0;
      unint64_t v17 = *v16;
      LODWORD(v14) = *v16;
    }
    while (v6 - 8 > v17);
  }
  *((void *)v16 - 1) = bswap64(*v11);
  (*(void (**)(void *, uint64_t))(a1 + 48))(v11 + 1, 1);
  if (*(void *)a1 >= 8uLL)
  {
    unsigned int v18 = 0;
    unint64_t v19 = 0;
    unsigned int v20 = 1;
    do
    {
      *(void *)(a3 + v18) = bswap64(v11[v19 + 1]);
      unint64_t v19 = v20++;
      v18 += 8;
    }
    while (v19 < *(void *)a1 >> 3);
  }
  return sub_19D76DA0C(*(void *)(a1 + 8) + *(void *)(a1 + 16) + 12, v11);
}

uint64_t sub_19D76CAE4(uint64_t result, int8x16_t *a2, int8x16_t *a3, uint64_t a4)
{
  if (result)
  {
    unint64_t v4 = a3->i64[0];
    char v5 = 64 - a4;
    uint64x2_t v6 = (uint64x2_t)vdupq_n_s64(64 - a4);
    uint64x2_t v7 = (uint64x2_t)vdupq_n_s64(-a4);
    BOOL v8 = result == 4;
    BOOL v9 = result < 4;
    result -= 4;
    if (!v9)
    {
      if (v8)
      {
        int8x16_t v13 = a3[1];
        *a2 = veorq_s8((int8x16_t)vshlq_u64(*(uint64x2_t *)a3, v7), (int8x16_t)vshlq_u64((uint64x2_t)vextq_s8(*a3, v13, 8uLL), v6));
        a2[1] = veorq_s8((int8x16_t)vshlq_u64((uint64x2_t)v13, v7), (int8x16_t)vshlq_u64((uint64x2_t)vextq_s8(v13, v13, 8uLL).u64[0], v6));
        return result;
      }
      do
      {
        int8x16_t v10 = *a3;
        int8x16_t v11 = a3[1];
        a3 += 2;
        unint64_t v4 = a3->i64[0];
        v12.i64[0] = vextq_s8(v11, v11, 8uLL).u64[0];
        v12.i64[1] = a3->i64[0];
        *a2 = veorq_s8((int8x16_t)vshlq_u64((uint64x2_t)v10, v7), (int8x16_t)vshlq_u64((uint64x2_t)vextq_s8(v10, v11, 8uLL), v6));
        a2[1] = veorq_s8((int8x16_t)vshlq_u64((uint64x2_t)v11, v7), (int8x16_t)vshlq_u64(v12, v6));
        a2 += 2;
        BOOL v9 = result <= 4;
        result -= 4;
      }
      while (!v9);
    }
    uint64_t v14 = result + 4;
    uint64_t v15 = &a3->u64[1];
    BOOL v16 = v14 == 2;
    BOOL v9 = v14 < 2;
    uint64_t result = v14 - 2;
    if (!v9)
    {
      if (v16)
      {
        uint64_t v19 = *v15 >> a4;
        a2->i64[0] = (v4 >> a4) | (*v15 << v5) & (((unint64_t)(64 - a4) >> 6) - 1);
        a2->i64[1] = v19;
        return result;
      }
      do
      {
        unint64_t v17 = *v15;
        unint64_t v18 = v15[1];
        v15 += 2;
        a2->i64[0] = (v4 >> a4) | (v17 << v5) & (((unint64_t)(64 - a4) >> 6) - 1);
        a2->i64[1] = (v17 >> a4) | (v18 << v5) & (((unint64_t)(64 - a4) >> 6) - 1);
        ++a2;
        unint64_t v4 = v18;
        BOOL v9 = result <= 2;
        result -= 2;
      }
      while (!v9);
    }
    a2->i64[0] = v4 >> a4;
  }
  return result;
}

uint64_t sub_19D76CC00(unint64_t *a1, unint64_t a2, unsigned __int8 *a3, unint64_t a4, unsigned __int8 *a5)
{
  BOOL v9 = a1 + 3;
  unint64_t v8 = *a1;
  if (sub_19D768E64(*a1, a1 + 3, a4, a5) || sub_19D768E64(v8, &v9[2 * *a1 + 1], a2, a3)) {
    return 4294967273;
  }

  return sub_19D76E2B4(a1);
}

uint64_t sub_19D76CCA4(uint64_t result, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = 1 << a2;
  uint64_t v4 = (a2 >> 3) & 0x1FFFFFFFFFFFFFF8;
  if (a3) {
    uint64_t v5 = *(void *)(result + v4) | v3;
  }
  else {
    uint64_t v5 = *(void *)(result + v4) & ~v3;
  }
  *(void *)(result + v4) = v5;
  return result;
}

uint64_t sub_19D76CCD4(uint64_t a1, void *a2)
{
  return sub_19D76DA0C(8 * a1, a2);
}

uint64_t sub_19D76CCDC(uint64_t a1, void *a2, uint64_t a3)
{
  *a2 = a3;
  return sub_19D76DA0C(8 * a1 - 8, a2 + 1);
}

uint64_t sub_19D76CCEC(uint64_t result, unint64_t *a2)
{
  for (uint64_t i = &a2[result - 1]; a2 < i; --i)
  {
    unint64_t v3 = bswap64(*a2);
    *a2++ = bswap64(*i);
    unint64_t *i = v3;
  }
  if (result) {
    *a2 = bswap64(*a2);
  }
  return result;
}

unint64_t sub_19D76CD30(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, uint64_t *a5)
{
  uint64_t v10 = sub_19D768730();
  uint64_t v11 = __ROR8__(0x5555555555555555, a2 | (2 * v10));
  if (a1)
  {
    uint64_t v12 = 0;
    do
    {
      unint64_t v14 = *a4++;
      unint64_t v13 = v14;
      uint64_t v15 = *a5++;
      unsigned long long v16 = __PAIR128__(v12, v12) - v13;
      uint64_t v17 = v16 + v15;
      if (__CFADD__((void)v16, v15)) {
        uint64_t v18 = *((void *)&v16 + 1) + 1;
      }
      else {
        uint64_t v18 = (__PAIR128__(v12, v12) - v13) >> 64;
      }
      uint64_t v12 = v18 >> 63;
      uint64_t v19 = v13 ^ v17;
      uint64_t v20 = v13 ^ v10;
      *a3 = v20;
      *a3++ = v19 & v11 ^ v19 & 0x5555555555555555 ^ v20 ^ v10;
      --a1;
    }
    while (a1);
    unint64_t v21 = (unint64_t)v18 >> 63;
  }
  else
  {
    unint64_t v21 = 0;
  }
  return v21 & a2;
}

BOOL sub_19D76CDE0()
{
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    BOOL v0 = _ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) != 0;
    __asm { MSR             DIT, #1 }
  }
  else
  {
    BOOL v0 = 0;
  }
  if ((MEMORY[0xFFFFFC010] & 0x200000000000) != 0)
  {
    sub_19D76CE5C();
  }
  else
  {
    __dsb(0xFu);
    __isb(0xFu);
  }
  return v0;
}

uint64_t sub_19D76CE40(uint64_t result)
{
  if ((result & 1) == 0 && (MEMORY[0xFFFFFC010] & 0x200000000000000) != 0) {
    __asm { MSR             DIT, #0 }
  }
  return result;
}

void sub_19D76CE5C()
{
  __asm { SB }
}

unint64_t sub_19D76CE64(unint64_t result, uint64_t a2)
{
  if (result)
  {
    unint64_t v2 = result;
    uint64_t result = 0;
    unint64_t v3 = v2 - 1;
    uint64_t v4 = (v2 << 6) - 64;
    do
    {
      unint64_t v5 = *(void *)(a2 + 8 * v3);
      uint64_t result = ((((v5 | HIDWORD(v5)) + 0xFFFFFFFF) >> 32) - 1) & result | (__clz(__rbit64(v5 | 0x8000000000000000))
                                                                                       + v4) & -(uint64_t)(((v5 | HIDWORD(v5)) + 0xFFFFFFFF) >> 32);
      --v3;
      v4 -= 64;
    }
    while (v3 < v2);
  }
  return result;
}

uint64_t sub_19D76CECC(uint64_t a1, unint64_t **a2, unint64_t a3, unsigned __int8 *a4, uint64_t *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  unint64_t v14 = (uint64_t *)*a2;
  uint64_t v16 = (uint64_t)(*a2 + 4);
  unint64_t v15 = **a2;
  if (a3 <= 0xF)
  {
    uint64_t v34 = sub_19D76856C();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_FAULT)) {
      sub_19D76D3AC(a3, v34);
    }
  }
  if (!sub_19D769B9C(v14, a5) && !sub_19D769B9C(v14, a6))
  {
    uint64_t v38 = (unint64_t *)a5;
    uint64_t v41 = *(void *)(a1 + 16);
    uint64_t v19 = (int8x16_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v15);
    uint64_t v39 = (void *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v15);
    long long v44 = (unint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v15);
    long long v43 = (unint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v15);
    uint64_t v40 = (char *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, 3 * v15);
    int v42 = (char *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, 3 * v15);
    size_t v20 = sub_19D7638EC((uint64_t *)a2);
    uint64_t v36 = (void *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v15);
    memset(v36, 170, v20);
    __s = (void *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v15);
    unint64_t v37 = v20;
    memset(__s, 255, v20);
    uint64_t v21 = sub_19D767AF4(v16 + 40 * *v14);
    unint64_t v22 = v21;
    if ((unint64_t)(v21 + 7) >> 3 >= a3) {
      unint64_t v23 = a3;
    }
    else {
      unint64_t v23 = (unint64_t)(v21 + 7) >> 3;
    }
    uint64_t v24 = sub_19D768F34(v15, v19, v23, a4);
    if ((v24 & 0x80000000) == 0)
    {
      if (v22 < 8 * a3) {
        sub_19D768F4C(v15, v19, v19, -(int)v22 & 7);
      }
      uint64_t v25 = (unint64_t *)sub_19D76ECF8(v16 + 40 * v15);
      if (!sub_19D769390(a1, v15, v39, v19->i64, v25)) {
        sub_19D768F38(v15, v19, v39);
      }
      if (sub_19D767AE0(a1, v16 + 40 * v15)
        || (sub_19D76EA6C(a1, v16 + 40 * v15),
            sub_19D76EA6C(a1, v16 + 40 * v15),
            uint64_t v26 = a2 + 2,
            sub_19D768DDC(v15, (uint64_t *)&a2[2 * *v14 + 2]) != 1)
        || v26[2 * *v14] != (unint64_t *)1)
      {
LABEL_37:
        uint64_t v17 = 4294967289;
LABEL_39:
        uint64_t v29 = v41;
LABEL_34:
        *(void *)(a1 + 16) = v29;
        return v17;
      }
      uint64_t v27 = v16 + 40 * v15;
      uint64_t v24 = sub_19D766940(a1, (uint64_t)v14);
      if (!v24)
      {
        uint64_t v24 = sub_19D766940(a1, (uint64_t)v14);
        if (!v24)
        {
          if (sub_19D7682F0(a1, v14, v42))
          {
            uint64_t v28 = *v14;
            if (sub_19D76899C(*v14, v16 + 16 * *v14 + 8 * *v14, v26))
            {
              uint64_t v17 = sub_19D76694C(a1, v14, v40, v44, (uint64_t)v40, v43, v42);
              uint64_t v29 = v41;
              if (v17) {
                goto LABEL_34;
              }
            }
            else
            {
              uint64_t v30 = v16 + 40 * v28;
              uint64_t v31 = *(void *)(a1 + 16);
              (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, 3 * v28);
              sub_19D767AF4(v30);
              if (sub_19D7662E4(a1, (uint64_t)v14)
                || (sub_19D767AF4(v30), sub_19D7662E4(a1, (uint64_t)v14)))
              {
                uint64_t v17 = 0xFFFFFFFFLL;
              }
              else
              {
                sub_19D764EA8(a1, (uint64_t)v14);
                uint64_t v17 = 0;
              }
              uint64_t v29 = v41;
              *(void *)(a1 + 16) = v31;
              if (v17) {
                goto LABEL_34;
              }
            }
            if (sub_19D763B84(a1, v14, (uint64_t)v40, (uint64_t)v40))
            {
              uint64_t v17 = 4294967289;
            }
            else
            {
              uint64_t v32 = sub_19D76ECF8(v27);
              if ((sub_19D76899C(v15, v40, v32) & 0x80000000) == 0)
              {
                uint64_t v33 = (unint64_t *)sub_19D76ECF8(v27);
                sub_19D769390(a1, v15, v40, (uint64_t *)v40, v33);
              }
              if (sub_19D76899C(v15, v40, v38)) {
                uint64_t v17 = 4294967150;
              }
              else {
                uint64_t v17 = 0;
              }
              sub_19D7694AC(v15, v38, v37, (char *)v36);
              sub_19D7694AC(v15, (unint64_t *)v40, v37, (char *)__s);
              sub_19D769B34(a8, (uint64_t)&unk_19D77B240, v37, (uint64_t)v36, (uint64_t)__s);
            }
            goto LABEL_34;
          }
          goto LABEL_37;
        }
      }
    }
    uint64_t v17 = v24;
    goto LABEL_39;
  }
  return 4294967289;
}

uint64_t sub_19D76D390(uint64_t a1, unint64_t **a2, unint64_t a3, unsigned __int8 *a4, uint64_t *a5, uint64_t *a6, uint64_t a7)
{
  return sub_19D76CECC(a1, a2, a3, a4, a5, a6, (uint64_t)&(*a2)[2 * **a2 + 4 + **a2], a7);
}

void sub_19D76D3AC(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 134217984;
  uint64_t v3 = a1;
  _os_log_fault_impl(&dword_19D70E000, a2, OS_LOG_TYPE_FAULT, "Digest should be at least 128 bits long: argument digest_len = %lu", (uint8_t *)&v2, 0xCu);
}

double sub_19D76D424(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64x2_t a5)
{
  uint64_t v5 = a2 + 8 * a1;
  uint64x2_t v6 = (uint64x2_t)vdupq_n_s64(a4);
  uint64x2_t v7 = (uint64x2_t)vdupq_n_s64(a4 - 64);
  unint64_t v8 = (unint64_t *)(a3 + 8 * a1 - 8);
  BOOL v9 = a1 == 4;
  BOOL v10 = a1 < 4;
  uint64_t v11 = a1 - 4;
  if (!v10)
  {
    if (v9)
    {
      v16.i64[0] = 0;
      v16.i64[1] = *(v8 - 3);
      a5 = (uint64x2_t)veorq_s8((int8x16_t)vshlq_u64(v16, v7), (int8x16_t)vshlq_u64(*(uint64x2_t *)(v8 - 3), v6));
      int8x16_t v17 = veorq_s8((int8x16_t)vshlq_u64(*((uint64x2_t *)v8 - 1), v7), (int8x16_t)vshlq_u64(*(uint64x2_t *)(v8 - 1), v6));
      *(uint64x2_t *)(v5 - 32) = a5;
      *(int8x16_t *)(v5 - 16) = v17;
      return *(double *)a5.i64;
    }
    do
    {
      uint64x2_t v12 = *(uint64x2_t *)(v8 - 3);
      uint64x2_t v13 = *(uint64x2_t *)(v8 - 1);
      uint64x2_t v14 = *((uint64x2_t *)v8 - 2);
      uint64x2_t v15 = *((uint64x2_t *)v8 - 1);
      v8 -= 4;
      a5 = (uint64x2_t)veorq_s8((int8x16_t)vshlq_u64(v14, v7), (int8x16_t)vshlq_u64(v12, v6));
      *(uint64x2_t *)(v5 - 32) = a5;
      *(int8x16_t *)(v5 - 16) = veorq_s8((int8x16_t)vshlq_u64(v15, v7), (int8x16_t)vshlq_u64(v13, v6));
      v5 -= 32;
      BOOL v10 = v11 <= 4;
      v11 -= 4;
    }
    while (!v10);
  }
  uint64_t v18 = v11 & 3;
  if (!v18) {
    return *(double *)a5.i64;
  }
  if (v18 == 3)
  {
    uint64x2_t v19 = *((uint64x2_t *)v8 - 1);
  }
  else
  {
    if ((v18 & 2) == 0) {
      goto LABEL_13;
    }
    v19.i64[0] = 0;
    v19.i64[1] = *(v8 - 1);
  }
  a5 = (uint64x2_t)veorq_s8((int8x16_t)vshlq_u64(*(uint64x2_t *)(v8 - 1), v6), (int8x16_t)vshlq_u64(v19, v7));
  v8 -= 2;
  *(uint64x2_t *)(v5 - 16) = a5;
  v5 -= 16;
LABEL_13:
  if (v18)
  {
    a5.i64[0] = *v8;
    a5.i64[0] = vshlq_u64(a5, v6).u64[0];
    *(void *)(v5 - 8) = a5.i64[0];
  }
  return *(double *)a5.i64;
}

void *sub_19D76D510(void *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  uint64_t v3 = a2 + 2;
  unint64_t v6 = *v3;
  unint64_t v7 = v3[1];
  v3 += 2;
  unint64_t v8 = *v3;
  unint64_t v9 = v3[1];
  unint64_t v11 = *a3;
  unint64_t v12 = a3[1];
  BOOL v10 = a3 + 2;
  unint64_t v13 = *v10;
  unint64_t v14 = v10[1];
  v10 += 2;
  unint64_t v15 = *v10;
  unint64_t v16 = v10[1];
  unsigned long long v17 = v5 * (unsigned __int128)v11 + ((v4 * (unsigned __int128)v11) >> 64);
  unsigned long long v18 = v17 + v4 * (unsigned __int128)v12;
  uint64_t v19 = __CFADD__(__CFADD__((void)v17, v4 * v12), *((void *)&v17 + 1)) | __CFADD__((v4* (unsigned __int128)v12) >> 64, *((void *)&v18 + 1));
  uint64_t v20 = (v6 * (unsigned __int128)v11) >> 64;
  uint64_t v21 = *((void *)&v18 + 1) + v6 * v11;
  _BOOL1 v22 = __CFADD__(__CFADD__(*((void *)&v18 + 1), v6 * v11), v19);
  uint64_t v23 = __CFADD__(*((void *)&v18 + 1), v6 * v11) + v19;
  v22 |= __CFADD__(v20, v23);
  v23 += v20;
  BOOL v24 = v22;
  uint64_t v25 = (v5 * (unsigned __int128)v12) >> 64;
  _BOOL1 v22 = __CFADD__(v21, v5 * v12);
  unint64_t v26 = v21 + v5 * v12;
  BOOL v28 = v22;
  _BOOL1 v22 = __CFADD__(v22, v23);
  uint64_t v27 = v28 + v23;
  v22 |= __CFADD__(v25, v27);
  v27 += v25;
  BOOL v29 = v22 + v24;
  uint64_t v30 = (v4 * (unsigned __int128)v13) >> 64;
  _BOOL1 v22 = __CFADD__(v26, v4 * v13);
  unint64_t v31 = v26 + v4 * v13;
  BOOL v33 = v22;
  _BOOL1 v22 = __CFADD__(v22, v27);
  uint64_t v32 = v33 + v27;
  v22 |= __CFADD__(v30, v32);
  v32 += v30;
  BOOL v34 = v22 + v29;
  uint64_t v35 = (v7 * (unsigned __int128)v11) >> 64;
  _BOOL1 v22 = __CFADD__(v32, v7 * v11);
  uint64_t v36 = v32 + v7 * v11;
  BOOL v38 = v22;
  _BOOL1 v22 = __CFADD__(v22, v34);
  uint64_t v37 = v38 + v34;
  v22 |= __CFADD__(v35, v37);
  v37 += v35;
  BOOL v39 = v22;
  uint64_t v40 = (v6 * (unsigned __int128)v12) >> 64;
  _BOOL1 v22 = __CFADD__(v36, v6 * v12);
  uint64_t v41 = v36 + v6 * v12;
  BOOL v43 = v22;
  _BOOL1 v22 = __CFADD__(v22, v37);
  uint64_t v42 = v43 + v37;
  v22 |= __CFADD__(v40, v42);
  v42 += v40;
  BOOL v44 = v22 + v39;
  uint64_t v45 = (v5 * (unsigned __int128)v13) >> 64;
  _BOOL1 v22 = __CFADD__(v41, v5 * v13);
  uint64_t v46 = v41 + v5 * v13;
  BOOL v48 = v22;
  _BOOL1 v22 = __CFADD__(v22, v42);
  uint64_t v47 = v48 + v42;
  v22 |= __CFADD__(v45, v47);
  v47 += v45;
  BOOL v49 = v22 + v44;
  uint64_t v50 = (v4 * (unsigned __int128)v14) >> 64;
  _BOOL1 v22 = __CFADD__(v46, v4 * v14);
  unint64_t v51 = v46 + v4 * v14;
  BOOL v53 = v22;
  _BOOL1 v22 = __CFADD__(v22, v47);
  uint64_t v52 = v53 + v47;
  v22 |= __CFADD__(v50, v52);
  v52 += v50;
  BOOL v54 = v22 + v49;
  uint64_t v55 = (*v3 * (unsigned __int128)v11) >> 64;
  _BOOL1 v22 = __CFADD__(v52, *v3 * v11);
  uint64_t v56 = v52 + *v3 * v11;
  BOOL v58 = v22;
  _BOOL1 v22 = __CFADD__(v22, v54);
  uint64_t v57 = v58 + v54;
  v22 |= __CFADD__(v55, v57);
  v57 += v55;
  BOOL v59 = v22;
  uint64_t v60 = (v7 * (unsigned __int128)v12) >> 64;
  _BOOL1 v22 = __CFADD__(v56, v7 * v12);
  uint64_t v61 = v56 + v7 * v12;
  BOOL v63 = v22;
  _BOOL1 v22 = __CFADD__(v22, v57);
  uint64_t v62 = v63 + v57;
  v22 |= __CFADD__(v60, v62);
  v62 += v60;
  BOOL v64 = v22 + v59;
  uint64_t v65 = (v6 * (unsigned __int128)v13) >> 64;
  _BOOL1 v22 = __CFADD__(v61, v6 * v13);
  uint64_t v66 = v61 + v6 * v13;
  BOOL v68 = v22;
  _BOOL1 v22 = __CFADD__(v22, v62);
  uint64_t v67 = v68 + v62;
  v22 |= __CFADD__(v65, v67);
  v67 += v65;
  BOOL v69 = v22 + v64;
  uint64_t v70 = (v5 * (unsigned __int128)v14) >> 64;
  _BOOL1 v22 = __CFADD__(v66, v5 * v14);
  uint64_t v71 = v66 + v5 * v14;
  BOOL v73 = v22;
  _BOOL1 v22 = __CFADD__(v22, v67);
  uint64_t v72 = v73 + v67;
  v22 |= __CFADD__(v70, v72);
  v72 += v70;
  BOOL v74 = v22 + v69;
  uint64_t v75 = (v4 * (unsigned __int128)v15) >> 64;
  _BOOL1 v22 = __CFADD__(v71, v4 * v15);
  unint64_t v76 = v71 + v4 * v15;
  BOOL v78 = v22;
  _BOOL1 v22 = __CFADD__(v22, v72);
  uint64_t v77 = v78 + v72;
  v22 |= __CFADD__(v75, v77);
  v77 += v75;
  BOOL v79 = v22 + v74;
  uint64_t v80 = (v9 * (unsigned __int128)v11) >> 64;
  _BOOL1 v22 = __CFADD__(v77, v9 * v11);
  uint64_t v81 = v77 + v9 * v11;
  BOOL v83 = v22;
  _BOOL1 v22 = __CFADD__(v22, v79);
  uint64_t v82 = v83 + v79;
  v22 |= __CFADD__(v80, v82);
  v82 += v80;
  BOOL v84 = v22;
  uint64_t v85 = (*v3 * (unsigned __int128)v12) >> 64;
  _BOOL1 v22 = __CFADD__(v81, *v3 * v12);
  uint64_t v86 = v81 + *v3 * v12;
  BOOL v88 = v22;
  _BOOL1 v22 = __CFADD__(v22, v82);
  uint64_t v87 = v88 + v82;
  v22 |= __CFADD__(v85, v87);
  v87 += v85;
  BOOL v89 = v22 + v84;
  uint64_t v90 = (v7 * (unsigned __int128)v13) >> 64;
  _BOOL1 v22 = __CFADD__(v86, v7 * v13);
  uint64_t v91 = v86 + v7 * v13;
  BOOL v93 = v22;
  _BOOL1 v22 = __CFADD__(v22, v87);
  uint64_t v92 = v93 + v87;
  v22 |= __CFADD__(v90, v92);
  v92 += v90;
  BOOL v94 = v22 + v89;
  uint64_t v95 = (v6 * (unsigned __int128)v14) >> 64;
  _BOOL1 v22 = __CFADD__(v91, v6 * v14);
  uint64_t v96 = v91 + v6 * v14;
  BOOL v98 = v22;
  _BOOL1 v22 = __CFADD__(v22, v92);
  uint64_t v97 = v98 + v92;
  v22 |= __CFADD__(v95, v97);
  v97 += v95;
  BOOL v99 = v22 + v94;
  uint64_t v100 = (v5 * (unsigned __int128)v15) >> 64;
  _BOOL1 v22 = __CFADD__(v96, v5 * v15);
  uint64_t v101 = v96 + v5 * v15;
  BOOL v103 = v22;
  _BOOL1 v22 = __CFADD__(v22, v97);
  uint64_t v102 = v103 + v97;
  v22 |= __CFADD__(v100, v102);
  v102 += v100;
  BOOL v104 = v22 + v99;
  uint64_t v105 = (v4 * (unsigned __int128)v16) >> 64;
  _BOOL1 v22 = __CFADD__(v101, v4 * v16);
  unint64_t v106 = v101 + v4 * v16;
  BOOL v108 = v22;
  _BOOL1 v22 = __CFADD__(v22, v102);
  uint64_t v107 = v108 + v102;
  v22 |= __CFADD__(v105, v107);
  v107 += v105;
  unint64_t v109 = 0x100000001 * v4 * v11;
  unint64_t v110 = HIDWORD(v109);
  unint64_t v111 = HIDWORD(v109) + __CFADD__(v4 * v11, (v4 * v11) << 32) + (void)v18;
  unsigned long long v112 = __PAIR128__(v51, __CFADD__(__CFADD__(v4 * v11, (v4 * v11) << 32), (void)v18) | __CFADD__(HIDWORD(v109), __CFADD__(v4 * v11, (v4 * v11) << 32)+ (void)v18))+ v31;
  BOOL v113 = __CFADD__(__CFADD__(__CFADD__(__CFADD__(v4 * v11, (v4 * v11) << 32), (void)v18) | __CFADD__(HIDWORD(v109), __CFADD__(v4 * v11, (v4 * v11) << 32)+ (void)v18), v31), v51);
  unsigned long long v114 = __PAIR128__(v106, v113) + v76;
  BOOL v116 = __CFADD__(__CFADD__(v113, v76), v106);
  unint64_t v115 = v109 + v116 + v107;
  unint64_t v117 = (__CFADD__(v116, v107) | __CFADD__(v109, v116 + v107)) + v22 + v104;
  _BOOL1 v22 = v111 >= (v4 * v11) << 32;
  unsigned long long v120 = __PAIR128__(v112, v111) - __PAIR128__(v109, (v4 * v11) << 32);
  unint64_t v119 = v120 >> 64;
  uint64_t v118 = v120;
  BOOL v121 = !__CFSUB__((void)v112, v109, v22);
  _BOOL1 v22 = v119 >= v110;
  unsigned long long v124 = __PAIR128__(*((unint64_t *)&v112 + 1), v119) - __PAIR128__(v121, v110);
  uint64_t v123 = v124 >> 64;
  uint64_t v122 = v124;
  _BOOL1 v126 = __CFSUB__(*((void *)&v112 + 1), v121, v22);
  unint64_t v125 = v114 - !v126;
  BOOL v128 = (unint64_t)v114 >= !v126;
  unint64_t v127 = *((void *)&v114 + 1) - !v128;
  unsigned long long v129 = __PAIR128__(v117, v115) - (*((void *)&v114 + 1) < (unint64_t)!v128);
  unsigned long long v130 = v129 + v9 * (unsigned __int128)v12;
  unsigned long long v131 = v130 + v8 * (unsigned __int128)v13;
  unsigned long long v132 = v131 + v7 * (unsigned __int128)v14;
  unsigned long long v133 = v132 + v6 * (unsigned __int128)v15;
  unsigned long long v134 = v133 + v5 * (unsigned __int128)v16;
  uint64_t v135 = 0x100000001 * v118;
  unint64_t v136 = (unint64_t)(0x100000001 * v118) >> 32;
  _BOOL1 v22 = __CFADD__(__CFADD__(v118, v118 << 32), v122);
  unint64_t v137 = __CFADD__(v118, v118 << 32) + v122;
  v22 |= __CFADD__(v136, v137);
  v137 += v136;
  uint64_t v138 = v22 + v123;
  BOOL v139 = __CFADD__(v22, v123);
  unsigned long long v140 = __PAIR128__(v127, v139) + v125;
  BOOL v142 = __CFADD__(__CFADD__(v139, v125), v127);
  unint64_t v141 = v142 + v134;
  uint64_t v143 = v135 + __CFADD__(v142, (void)v134) + *((void *)&v134 + 1);
  unint64_t v144 = (__CFADD__(__CFADD__(v142, (void)v134), *((void *)&v134 + 1)) | __CFADD__(v135, __CFADD__(v142, (void)v134)+ *((void *)&v134 + 1)))+ (__CFADD__(__CFADD__((void)v133, v5 * v16), *((void *)&v133 + 1)) | __CFADD__((v5 * (unsigned __int128)v16) >> 64, *((void *)&v134 + 1)))+ (__CFADD__(__CFADD__((void)v132, v6 * v15), *((void *)&v132 + 1)) | __CFADD__((v6 * (unsigned __int128)v15) >> 64, *((void *)&v133 + 1)))+ (__CFADD__(__CFADD__((void)v131, v7 * v14), *((void *)&v131 + 1)) | __CFADD__((v7 * (unsigned __int128)v14) >> 64, *((void *)&v132 + 1)))+ (__CFADD__(__CFADD__((void)v130, v8 * v13), *((void *)&v130 + 1)) | __CFADD__((v8 * (unsigned __int128)v13) >> 64, *((void *)&v131 + 1)))+ (unint64_t)(__CFADD__(__CFADD__((void)v129, v9 * v12), *((void *)&v129 + 1)) | __CFADD__((v9 * (unsigned __int128)v12) >> 64, *((void *)&v130 + 1)));
  _BOOL1 v22 = v137 >= v135 << 32;
  unint64_t v145 = v137 - (v135 << 32);
  LOBYTE(v142) = v22;
  _BOOL1 v22 = __CFSUB__(v138, v135, v22);
  unint64_t v146 = v138 - (v135 + !v142);
  uint64_t v147 = !v22;
  _BOOL1 v22 = v146 >= v136;
  unsigned long long v150 = __PAIR128__(v140, v146) - __PAIR128__(v147, v136);
  uint64_t v149 = v150 >> 64;
  uint64_t v148 = v150;
  _BOOL1 v152 = __CFSUB__((void)v140, v147, v22);
  unint64_t v151 = *((void *)&v140 + 1) - !v152;
  BOOL v154 = *((void *)&v140 + 1) >= (unint64_t)!v152;
  _BOOL1 v22 = v141 >= !v154;
  unint64_t v153 = v141 - !v154;
  unsigned long long v155 = __PAIR128__(v144, v143) - !v22;
  unsigned long long v156 = v155 + v9 * (unsigned __int128)v13;
  unsigned long long v157 = v156 + v8 * (unsigned __int128)v14;
  unsigned long long v158 = v157 + v7 * (unsigned __int128)v15;
  unsigned long long v159 = v158 + v6 * (unsigned __int128)v16;
  uint64_t v160 = 0x100000001 * v145;
  unint64_t v161 = (0x100000001 * v145) >> 32;
  _BOOL1 v22 = __CFADD__(__CFADD__(v145, v145 << 32), v148);
  unint64_t v162 = __CFADD__(v145, v145 << 32) + v148;
  v22 |= __CFADD__(v161, v162);
  v162 += v161;
  uint64_t v163 = v22 + v149;
  BOOL v164 = __CFADD__(v22, v149);
  unsigned long long v165 = __PAIR128__(v153, v164) + v151;
  BOOL v167 = __CFADD__(__CFADD__(v164, v151), v153);
  unint64_t v166 = v167 + v159;
  uint64_t v168 = v160 + __CFADD__(v167, (void)v159) + *((void *)&v159 + 1);
  unint64_t v169 = (__CFADD__(__CFADD__(v167, (void)v159), *((void *)&v159 + 1)) | __CFADD__(v160, __CFADD__(v167, (void)v159)+ *((void *)&v159 + 1)))+ (__CFADD__(__CFADD__((void)v158, v6 * v16), *((void *)&v158 + 1)) | __CFADD__((v6 * (unsigned __int128)v16) >> 64, *((void *)&v159 + 1)))+ (__CFADD__(__CFADD__((void)v157, v7 * v15), *((void *)&v157 + 1)) | __CFADD__((v7 * (unsigned __int128)v15) >> 64, *((void *)&v158 + 1)))+ (__CFADD__(__CFADD__((void)v156, v8 * v14), *((void *)&v156 + 1)) | __CFADD__((v8 * (unsigned __int128)v14) >> 64, *((void *)&v157 + 1)))+ (unint64_t)(__CFADD__(__CFADD__((void)v155, v9 * v13), *((void *)&v155 + 1)) | __CFADD__((v9 * (unsigned __int128)v13) >> 64, *((void *)&v156 + 1)));
  _BOOL1 v22 = v162 >= v160 << 32;
  unint64_t v170 = v162 - (v160 << 32);
  LOBYTE(v167) = v22;
  _BOOL1 v22 = __CFSUB__(v163, v160, v22);
  unint64_t v171 = v163 - (v160 + !v167);
  uint64_t v172 = !v22;
  _BOOL1 v22 = v171 >= v161;
  unsigned long long v175 = __PAIR128__(v165, v171) - __PAIR128__(v172, v161);
  uint64_t v174 = v175 >> 64;
  uint64_t v173 = v175;
  _BOOL1 v177 = __CFSUB__((void)v165, v172, v22);
  unint64_t v176 = *((void *)&v165 + 1) - !v177;
  BOOL v179 = *((void *)&v165 + 1) >= (unint64_t)!v177;
  _BOOL1 v22 = v166 >= !v179;
  unint64_t v178 = v166 - !v179;
  unsigned long long v180 = __PAIR128__(v169, v168) - !v22;
  unsigned long long v181 = v180 + v9 * (unsigned __int128)v14;
  unsigned long long v182 = v181 + v8 * (unsigned __int128)v15;
  unsigned long long v183 = v182 + v7 * (unsigned __int128)v16;
  uint64_t v184 = 0x100000001 * v170;
  unint64_t v185 = (0x100000001 * v170) >> 32;
  _BOOL1 v22 = __CFADD__(__CFADD__(v170, v170 << 32), v173);
  unint64_t v186 = __CFADD__(v170, v170 << 32) + v173;
  v22 |= __CFADD__(v185, v186);
  v186 += v185;
  uint64_t v187 = v22 + v174;
  BOOL v188 = __CFADD__(v22, v174);
  unsigned long long v189 = __PAIR128__(v178, v188) + v176;
  BOOL v191 = __CFADD__(__CFADD__(v188, v176), v178);
  unint64_t v190 = v191 + v183;
  uint64_t v192 = v184 + __CFADD__(v191, (void)v183) + *((void *)&v183 + 1);
  unint64_t v193 = (__CFADD__(__CFADD__(v191, (void)v183), *((void *)&v183 + 1)) | __CFADD__(v184, __CFADD__(v191, (void)v183)+ *((void *)&v183 + 1)))+ (__CFADD__(__CFADD__((void)v182, v7 * v16), *((void *)&v182 + 1)) | __CFADD__((v7 * (unsigned __int128)v16) >> 64, *((void *)&v183 + 1)))+ (__CFADD__(__CFADD__((void)v181, v8 * v15), *((void *)&v181 + 1)) | __CFADD__((v8 * (unsigned __int128)v15) >> 64, *((void *)&v182 + 1)))+ (unint64_t)(__CFADD__(__CFADD__((void)v180, v9 * v14), *((void *)&v180 + 1)) | __CFADD__((v9 * (unsigned __int128)v14) >> 64, *((void *)&v181 + 1)));
  _BOOL1 v22 = v186 >= v184 << 32;
  unint64_t v194 = v186 - (v184 << 32);
  LOBYTE(v191) = v22;
  _BOOL1 v22 = __CFSUB__(v187, v184, v22);
  unint64_t v195 = v187 - (v184 + !v191);
  uint64_t v196 = !v22;
  _BOOL1 v22 = v195 >= v185;
  unsigned long long v199 = __PAIR128__(v189, v195) - __PAIR128__(v196, v185);
  uint64_t v198 = v199 >> 64;
  uint64_t v197 = v199;
  _BOOL1 v201 = __CFSUB__((void)v189, v196, v22);
  unint64_t v200 = *((void *)&v189 + 1) - !v201;
  BOOL v203 = *((void *)&v189 + 1) >= (unint64_t)!v201;
  _BOOL1 v22 = v190 >= !v203;
  unint64_t v202 = v190 - !v203;
  unsigned long long v204 = __PAIR128__(v193, v192) - !v22;
  unsigned long long v205 = v204 + v9 * (unsigned __int128)v15;
  unsigned long long v206 = v205 + v8 * (unsigned __int128)v16;
  uint64_t v207 = 0x100000001 * v194;
  unint64_t v208 = (0x100000001 * v194) >> 32;
  _BOOL1 v22 = __CFADD__(__CFADD__(v194, v194 << 32), v197);
  unint64_t v209 = __CFADD__(v194, v194 << 32) + v197;
  v22 |= __CFADD__(v208, v209);
  v209 += v208;
  uint64_t v210 = v22 + v198;
  BOOL v211 = __CFADD__(v22, v198);
  unsigned long long v212 = __PAIR128__(v202, v211) + v200;
  BOOL v214 = __CFADD__(__CFADD__(v211, v200), v202);
  unint64_t v213 = v214 + v206;
  uint64_t v215 = v207 + __CFADD__(v214, (void)v206) + *((void *)&v206 + 1);
  unint64_t v216 = (__CFADD__(__CFADD__(v214, (void)v206), *((void *)&v206 + 1)) | __CFADD__(v207, __CFADD__(v214, (void)v206)+ *((void *)&v206 + 1)))+ (__CFADD__(__CFADD__((void)v205, v8 * v16), *((void *)&v205 + 1)) | __CFADD__((v8 * (unsigned __int128)v16) >> 64, *((void *)&v206 + 1)))+ (unint64_t)(__CFADD__(__CFADD__((void)v204, v9 * v15), *((void *)&v204 + 1)) | __CFADD__((v9 * (unsigned __int128)v15) >> 64, *((void *)&v205 + 1)));
  _BOOL1 v22 = v209 >= v207 << 32;
  unint64_t v217 = v209 - (v207 << 32);
  LOBYTE(v214) = v22;
  _BOOL1 v22 = __CFSUB__(v210, v207, v22);
  unint64_t v218 = v210 - (v207 + !v214);
  uint64_t v219 = !v22;
  _BOOL1 v22 = v218 >= v208;
  unsigned long long v222 = __PAIR128__(v212, v218) - __PAIR128__(v219, v208);
  uint64_t v221 = v222 >> 64;
  uint64_t v220 = v222;
  _BOOL1 v224 = __CFSUB__((void)v212, v219, v22);
  unint64_t v223 = *((void *)&v212 + 1) - !v224;
  BOOL v226 = *((void *)&v212 + 1) >= (unint64_t)!v224;
  _BOOL1 v22 = v213 >= !v226;
  unint64_t v225 = v213 - !v226;
  unsigned long long v227 = __PAIR128__(v216, v215) - !v22;
  unsigned long long v228 = v227 + v9 * (unsigned __int128)v16;
  uint64_t v229 = 0x100000001 * v217;
  unint64_t v230 = (0x100000001 * v217) >> 32;
  _BOOL1 v22 = __CFADD__(__CFADD__(v217, v217 << 32), v220);
  unint64_t v231 = __CFADD__(v217, v217 << 32) + v220;
  v22 |= __CFADD__(v230, v231);
  v231 += v230;
  uint64_t v232 = v22 + v221;
  BOOL v233 = __CFADD__(v22, v221);
  unsigned long long v234 = __PAIR128__(v225, v233) + v223;
  BOOL v236 = __CFADD__(__CFADD__(v233, v223), v225);
  unint64_t v235 = v236 + v228;
  uint64_t v237 = v229 + __CFADD__(v236, (void)v228) + *((void *)&v228 + 1);
  unint64_t v238 = (__CFADD__(__CFADD__(v236, (void)v228), *((void *)&v228 + 1)) | __CFADD__(v229, __CFADD__(v236, (void)v228)+ *((void *)&v228 + 1)))+ (unint64_t)(__CFADD__(__CFADD__((void)v227, v9 * v16), *((void *)&v227 + 1)) | __CFADD__((v9 * (unsigned __int128)v16) >> 64, *((void *)&v228 + 1)));
  _BOOL1 v22 = v231 >= v229 << 32;
  unint64_t v239 = v231 - (v229 << 32);
  LOBYTE(v236) = v22;
  _BOOL1 v22 = __CFSUB__(v232, v229, v22);
  unint64_t v240 = v232 - (v229 + !v236);
  uint64_t v241 = !v22;
  _BOOL1 v22 = v240 >= v230;
  unsigned long long v244 = __PAIR128__(v234, v240) - __PAIR128__(v241, v230);
  uint64_t v243 = v244 >> 64;
  uint64_t v242 = v244;
  _BOOL1 v246 = __CFSUB__((void)v234, v241, v22);
  uint64_t v245 = *((void *)&v234 + 1) - !v246;
  BOOL v248 = *((void *)&v234 + 1) >= (unint64_t)!v246;
  _BOOL1 v22 = v235 >= !v248;
  unint64_t v247 = v235 - !v248;
  unsigned long long v249 = __PAIR128__(v238, v237) - !v22;
  _BOOL1 v22 = v239 >= 0xFFFFFFFF;
  unint64_t v250 = v239 - 0xFFFFFFFF;
  _BOOL1 v252 = v22;
  _BOOL1 v22 = __CFSUB__(v242, 0xFFFFFFFF00000000, v22);
  uint64_t v251 = v242 - (!v252 - 0x100000000);
  _BOOL1 v254 = v22;
  _BOOL1 v22 = __CFSUB__(v243, -2, v22);
  uint64_t v253 = v243 - (!v254 - 2);
  _BOOL1 v256 = v22;
  _BOOL1 v22 = __CFSUB__(v245, -1, v22);
  uint64_t v255 = v245 - (!v256 - 1);
  _BOOL1 v258 = v22;
  _BOOL1 v22 = __CFSUB__(v247, -1, v22);
  unint64_t v257 = v247 - (!v258 - 1);
  uint64_t v259 = v249 - (!v22 - 1);
  uint64_t v260 = *((void *)&v249 + 1) - !__CFSUB__((void)v249, -1, v22);
  _BOOL1 v22 = __CFADD__(__CFADD__(v250, (v260 & 0xFFFFFFFF00000000) >> 32), v251);
  uint64_t v261 = __CFADD__(v250, (v260 & 0xFFFFFFFF00000000) >> 32) + v251;
  uint64_t v263 = v22 | __CFADD__(v260 & 0xFFFFFFFF00000000, v261);
  _BOOL1 v22 = __CFADD__(v263, v253);
  uint64_t v262 = v263 + v253;
  uint64_t v265 = v22 | __CFADD__(v260 & 0xFFFFFFFFFFFFFFFELL, v262);
  _BOOL1 v22 = __CFADD__(v265, v255);
  uint64_t v264 = v265 + v255;
  uint64_t v267 = v22 | __CFADD__(v260, v264);
  _BOOL1 v22 = __CFADD__(v267, v257);
  uint64_t v266 = v267 + v257;
  *a1 = v250 + ((v260 & 0xFFFFFFFF00000000) >> 32);
  a1[1] = (v260 & 0xFFFFFFFF00000000) + v261;
  uint64_t v268 = a1 + 2;
  *uint64_t v268 = (v260 & 0xFFFFFFFFFFFFFFFELL) + v262;
  v268[1] = v260 + v264;
  uint64_t result = v268 + 2;
  void *result = v260 + v266;
  result[1] = v260 + (v22 | __CFADD__(v260, v266)) + v259;
  return result;
}

uint64_t sub_19D76DA0C(rsize_t __n, void *__s)
{
  return memset_s(__s, __n, 0, __n);
}

uint64_t sub_19D76DA20(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10 = sub_19D768730();
  uint64_t v11 = __ROR8__(0x5555555555555555, a2 | (2 * v10));
  uint64_t v12 = 0;
  if (a1)
  {
    uint64_t v13 = 0;
    do
    {
      uint64_t v15 = *a4++;
      uint64_t v14 = v15;
      uint64_t v17 = *a5++;
      uint64_t v16 = v17;
      BOOL v18 = __CFADD__(v12, v14);
      uint64_t v19 = v12 + v14;
      if (v18) {
        uint64_t v13 = 1;
      }
      BOOL v18 = __CFADD__(v19, v16);
      uint64_t v20 = v19 + v16;
      if (v18) {
        uint64_t v12 = v13 + 1;
      }
      else {
        uint64_t v12 = v13;
      }
      uint64_t v21 = v14 ^ v20;
      uint64_t v22 = v14 ^ v10;
      *a3 = v22;
      *a3++ = v21 & v11 ^ v21 & 0x5555555555555555 ^ v22 ^ v10;
      uint64_t v13 = 0;
      --a1;
    }
    while (a1);
  }
  return v12 & a2;
}

uint64_t sub_19D76DAC8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = sub_19D767AEC(a2);
  uint64_t v7 = *(void *)(a1 + 16);
  unint64_t v8 = (int8x16_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  unint64_t v9 = (void *)sub_19D76ECF8(a2);
  sub_19D768F38(v6, v8, v9);
  v8->i64[0] &= ~1uLL;
  uint64_t v10 = (int8x16_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  sub_19D768F4C(v6, v10, v8, 1);
  uint64_t v11 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  unsigned int v12 = sub_19D76874C(a1, a2, v11, a3, (unint64_t *)v10);
  sub_19D7634BC(a1, a2);
  BOOL v13 = sub_19D768DDC(v6, v11) == 1 && *v11 == 1;
  uint64_t result = v13 & ~(((v12 | ((unint64_t)(int)v12 >> 32)) + 0xFFFFFFFF) >> 32);
  *(void *)(a1 + 16) = v7;
  return result;
}

uint64_t sub_19D76DC00(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = sub_19D767AEC(a2);
  unsigned int v12 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v11);
  LOBYTE(a5) = sub_19D768558(a1, v11, a3, a4, a5);
  BOOL v13 = (unint64_t *)sub_19D76ECF8(a2);
  BOOL v14 = sub_19D769390(a1, v11, v12, a3, v13);
  uint64_t result = sub_19D7686D0(v11, !v14 | a5, a3, v12, a3);
  *(void *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_19D76DCC8(uint64_t a1, uint64_t a2)
{
  return (**(uint64_t (***)(void))(a2 + 16))();
}

void *sub_19D76DCD4()
{
  return &unk_1E5963D80;
}

void *sub_19D76DCE0(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4, unint64_t *a5)
{
  return sub_19D76D510(a3, a4, a5);
}

void *sub_19D76DCF0(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4)
{
  return sub_19D76D510(a3, a4, a4);
}

uint64_t sub_19D76DD00(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a1 + 16);
  unint64_t v8 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 6);
  unint64_t v9 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 6);
  uint64_t v10 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 6);
  sub_19D76D510(v10, a4, a4);
  sub_19D76D510(v9, v10, a4);
  sub_19D76D510(v9, v9, v9);
  sub_19D76D510(v9, v9, v9);
  sub_19D76D510(v8, v9, a4);
  sub_19D76D510(v9, v8, v10);
  int v11 = 4;
  do
  {
    sub_19D76D510(v9, v9, v9);
    --v11;
  }
  while (v11);
  sub_19D76D510(v8, v8, v9);
  sub_19D76D510(v9, v8, v10);
  int v12 = 8;
  do
  {
    sub_19D76D510(v9, v9, v9);
    --v12;
  }
  while (v12);
  sub_19D76D510(v8, v8, v9);
  sub_19D76D510(v9, v8, v10);
  int v13 = 16;
  do
  {
    sub_19D76D510(v9, v9, v9);
    --v13;
  }
  while (v13);
  sub_19D76D510(v8, v8, v9);
  sub_19D76D510(v9, v8, a4);
  sub_19D76D510(v10, v9, a4);
  int v14 = 32;
  do
  {
    sub_19D76D510(v10, v10, v10);
    --v14;
  }
  while (v14);
  sub_19D76D510(v9, v10, v9);
  int v15 = 64;
  do
  {
    sub_19D76D510(v10, v10, v10);
    --v15;
  }
  while (v15);
  sub_19D76D510(v10, v10, v8);
  sub_19D76D510(v8, v9, a4);
  int v16 = 64;
  do
  {
    sub_19D76D510(v8, v8, v8);
    --v16;
  }
  while (v16);
  sub_19D76D510(v9, v8, v9);
  sub_19D76D510(v8, v9, a4);
  int v17 = 128;
  do
  {
    sub_19D76D510(v8, v8, v8);
    --v17;
  }
  while (v17);
  sub_19D76D510(v8, v8, v9);
  int v18 = 128;
  do
  {
    sub_19D76D510(v8, v8, v8);
    --v18;
  }
  while (v18);
  sub_19D76D510(v9, v8, v10);
  sub_19D76D510(v8, v9, a4);
  uint64_t v23 = 0;
  long long v21 = 0u;
  long long v22 = 0u;
  unint64_t v20 = 1;
  sub_19D76D510(v8, v8, &v20);
  if (sub_19D768DDC(6, (uint64_t *)v8) == 1 && *v8 == 1)
  {
    sub_19D768F38(6, a3, v9);
    uint64_t result = 0;
  }
  else
  {
    uint64_t result = 4294967254;
  }
  *(void *)(a1 + 16) = v7;
  return result;
}

void *sub_19D76E03C(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = 0;
  long long v6 = 0u;
  long long v7 = 0u;
  unint64_t v5 = 1;
  return sub_19D76D510(a3, a4, &v5);
}

uint64_t sub_19D76E0A8(uint64_t a1, uint64_t a2, int8x16_t *a3, uint64_t *a4)
{
  uint64_t v7 = sub_19D767AEC(a2);
  uint64_t v8 = *a4 & 1;
  uint64_t v9 = (uint64_t *)sub_19D76ECF8(a2);
  uint64_t v10 = sub_19D76DA20(v7, v8, a3->i64, a4, v9);
  uint64_t result = sub_19D768F4C(v7, a3, a3, 1);
  a3->i64[v7 - 1] |= v10 << 63;
  return result;
}

uint64_t sub_19D76E13C(uint64_t a1, void *a2)
{
  unint64_t v4 = (uint64_t *)sub_19D76ECF8((uint64_t)a2);
  uint64_t v5 = sub_19D767AEC((uint64_t)a2);
  if ((*(unsigned char *)v4 & 1) == 0 || sub_19D768DDC(v5, v4) == 1 && (unint64_t)*v4 < 3) {
    return 4294967289;
  }
  a2[2] = off_1EEF8FAA0;
  unint64_t v7 = sub_19D767AEC((uint64_t)a2);
  uint64_t v8 = (unint64_t *)sub_19D76ECF8((uint64_t)a2);
  a2[1] = sub_19D768940(v7, v8);
  uint64_t v9 = (2 - ((3 * *v4) ^ 2) * *v4) * ((3 * *v4) ^ 2);
  uint64_t v10 = (2 - (2 - v9 * *v4) * v9 * *v4) * (2 - v9 * *v4) * v9;
  a2[*a2 + 3] = (v10 * *v4 - 2) * v10;
  uint64_t v11 = sub_19D767AEC((uint64_t)a2);
  uint64_t v12 = *(void *)(a1 + 16);
  int v13 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 2 * v11);
  memset(&v13[v11], 255, 8 * v11);
  int v14 = (uint64_t *)sub_19D76ECF8((uint64_t)a2);
  sub_19D76733C(v11, v13, v14);
  int v15 = (char *)&a2[*a2 + 4];
  int v16 = (uint64_t *)sub_19D76ECF8((uint64_t)a2);
  sub_19D7689C4(a1, 2 * v11, (uint64_t)v13, 0, 0, v11, v15, v16);
  uint64_t result = 0;
  *(void *)(a1 + 16) = v12;
  return result;
}

uint64_t sub_19D76E2B4(void *a1)
{
  uint64_t v2 = sub_19D767AEC((uint64_t)a1);
  v5[0] = sub_19D76EDB0(40 * v2 + 24);
  v5[1] = 5 * sub_19D767AEC((uint64_t)a1) + 3;
  _OWORD v5[2] = 0;
  void v5[3] = sub_19D76EDEC;
  long long v6 = sub_19D76EE34;
  if (!v5[0]) {
    return 4294967283;
  }
  uint64_t v3 = sub_19D76E13C((uint64_t)v5, a1);
  v6((uint64_t)v5);
  return v3;
}

uint64_t sub_19D76E358(uint64_t a1, void *a2, uint64_t *a3, uint64_t a4, char *a5)
{
  unint64_t v10 = sub_19D767AEC((uint64_t)a2);
  uint64_t v11 = v10;
  if ((a4 - 1) / v10 <= 1) {
    unint64_t v12 = 1;
  }
  else {
    unint64_t v12 = (a4 - 1) / v10;
  }
  uint64_t v17 = a4;
  uint64_t v18 = *(void *)(a1 + 16);
  int v13 = (char *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, 2 * v10);
  uint64_t v19 = a5;
  sub_19D768F38(v11, v13, a5);
  unint64_t v14 = v12 - 1;
  if (v12 != 1)
  {
    int v15 = &v19[8 * v11];
    do
    {
      sub_19D768F38(v11, &v13[8 * v11], v15);
      sub_19D76C368(a1, a2, (uint64_t *)v13, (uint64_t *)v13);
      v15 += 8 * v11;
      --v14;
    }
    while (v14);
  }
  if (v17 != v12 * v11) {
    sub_19D768F38(v17 - v12 * v11, &v13[8 * v11], &v19[8 * v12 * v11]);
  }
  sub_19D76CCD4(v11 - (v17 - v12 * v11), &v13[8 * v11 + 8 * (v17 - v12 * v11)]);
  sub_19D76C368(a1, a2, a3, (uint64_t *)v13);
  do
  {
    sub_19D7689B0(a1, v11, (uint64_t)v13, (uint64_t)a3, (uint64_t)&a2[*a2 + 4]);
    uint64_t result = sub_19D76C368(a1, a2, a3, (uint64_t *)v13);
    --v12;
  }
  while (v12);
  *(void *)(a1 + 16) = v18;
  return result;
}

uint64_t sub_19D76E4D0(uint64_t a1, void *a2, uint64_t *a3, char *a4)
{
  uint64_t v8 = 2 * sub_19D767AEC((uint64_t)a2);

  return sub_19D76E358(a1, a2, a3, v8, a4);
}

uint64_t sub_19D76E530(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a2 + 16) + 32))();
}

uint64_t sub_19D76E53C(uint64_t a1, const void *a2, uint64_t *a3, uint64_t a4, unint64_t *a5)
{
  uint64_t v10 = sub_19D767AEC((uint64_t)a2);
  uint64_t v11 = sub_19D76ECF8((uint64_t)a2);
  if ((sub_19D76899C(v10, a4, v11) & 0x80000000) == 0) {
    return 4294967289;
  }
  uint64_t v13 = *(void *)(a1 + 16);
  unint64_t v14 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v10);
  int v15 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v10);
  sub_19D76DA0C(8 * (*(void *)(a1 + 16) - v13), (void *)(*(void *)a1 + 8 * v13));
  int v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 2 * v10 + 4);
  uint64_t v17 = sub_19D767AEC((uint64_t)a2);
  memcpy(v16, a2, 16 * v17 + 32);
  void v16[2] = off_1EEF8FAE8;
  sub_19D76E68C(a1, v16, v14, a4);
  uint64_t v12 = sub_19D76874C(a1, (uint64_t)v16, v15, v14, a5);
  if (!v12) {
    sub_19D76E728(a1, v16, a3, v15);
  }
  *(void *)(a1 + 16) = v13;
  return v12;
}

uint64_t sub_19D76E68C(uint64_t a1, void *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8 = sub_19D767AEC((uint64_t)a2);
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 2 * v8);
  sub_19D7689B0(a1, v8, (uint64_t)v10, a4, (uint64_t)&a2[*a2 + 4]);
  uint64_t result = sub_19D76C368(a1, a2, a3, v10);
  *(void *)(a1 + 16) = v9;
  return result;
}

uint64_t sub_19D76E728(uint64_t a1, void *a2, uint64_t *a3, void *a4)
{
  uint64_t v8 = sub_19D767AEC((uint64_t)a2);
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 2 * v8);
  if (v8) {
    sub_19D768F38(v8, v10, a4);
  }
  sub_19D76CCD4(v8, &v10[8 * v8]);
  uint64_t result = sub_19D76C368(a1, a2, a3, (uint64_t *)v10);
  *(void *)(a1 + 16) = v9;
  return result;
}

uint64_t sub_19D76E7C4(uint64_t a1, void *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = sub_19D767AEC((uint64_t)a2);
  uint64_t v12 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 2 * v11);
  sub_19D7689B0(a1, v11, (uint64_t)v12, a4, a5);
  uint64_t result = sub_19D76C368(a1, a2, a3, v12);
  *(void *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_19D76E860(uint64_t a1, void *a2, uint64_t *a3, unint64_t *a4)
{
  uint64_t v8 = *(void *)(a1 + 16);
  unint64_t v9 = sub_19D767AEC((uint64_t)a2);
  uint64_t v10 = (uint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, 2 * v9);
  sub_19D763D94(a1, v9, v10, a4);
  uint64_t result = sub_19D76C368(a1, a2, a3, v10);
  *(void *)(a1 + 16) = v8;
  return result;
}

uint64_t sub_19D76E8F4(uint64_t a1, void *a2, uint64_t *a3, void *a4)
{
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = 2 * sub_19D767AEC((uint64_t)a2);
  uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v9);
  sub_19D768F38(v9, v10, a4);
  uint64_t result = sub_19D76C368(a1, a2, a3, (uint64_t *)v10);
  *(void *)(a1 + 16) = v8;
  return result;
}

void sub_19D76E984()
{
}

uint64_t sub_19D76E99C()
{
  return 0xFFFFFFFFLL;
}

void sub_19D76E9A8()
{
}

uint64_t sub_19D76E9C0()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_19D76E9CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = sub_19D767AEC(a2);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 2 * v10);
  uint64_t v12 = sub_19D767AEC(a2);
  sub_19D7689B0(a1, v12, v11, a4, a5);
  uint64_t result = sub_19D76E530(a1, a2);
  *(void *)(a1 + 16) = v9;
  return result;
}

uint64_t sub_19D76EA6C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a2 + 16) + 16))();
}

_OWORD *sub_19D76EA80(void *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  uint64_t v3 = a2 + 2;
  unint64_t v6 = *v3;
  unint64_t v7 = v3[1];
  unint64_t v9 = *a3;
  unint64_t v10 = a3[1];
  uint64_t v8 = a3 + 2;
  unint64_t v11 = *v8;
  unint64_t v12 = v8[1];
  unint64_t v13 = v4 * v9;
  uint64_t v14 = (v5 * (unsigned __int128)v9) >> 64;
  uint64_t v15 = *v3 * v9;
  uint64_t v16 = (v6 * (unsigned __int128)v9) >> 64;
  unint64_t v18 = v9;
  uint64_t v17 = (__PAIR128__(v5, v4) * v9) >> 64;
  _BOOL1 v19 = __CFADD__(__CFADD__((v4 * (unsigned __int128)v9) >> 64, v5 * v9), v14);
  uint64_t v20 = __CFADD__((v4 * (unsigned __int128)v9) >> 64, v5 * v9) + v14;
  v19 |= __CFADD__(v15, v20);
  v20 += v15;
  uint64_t v21 = (v7 * (unsigned __int128)v9) >> 64;
  uint64_t v22 = (v7 * (unsigned __int128)v10) >> 64;
  BOOL v24 = v19;
  _BOOL1 v19 = __CFADD__(v19, v16);
  uint64_t v23 = v24 + v16;
  v19 |= __CFADD__(v7 * v9, v23);
  v23 += v7 * v9;
  BOOL v26 = v19;
  _BOOL1 v19 = __CFADD__(v19, v21);
  uint64_t v25 = v26 + v21;
  v19 |= __CFADD__(v7 * v10, v25);
  v25 += v7 * v10;
  uint64_t v27 = v7 * *v8;
  uint64_t v28 = (v7 * (unsigned __int128)v11) >> 64;
  BOOL v30 = v19;
  _BOOL1 v19 = __CFADD__(v19, v22);
  uint64_t v29 = v30 + v22;
  v19 |= __CFADD__(v27, v29);
  v29 += v27;
  BOOL v32 = v19;
  _BOOL1 v19 = __CFADD__(v19, v28);
  uint64_t v31 = v32 + v28;
  v19 |= __CFADD__(v7 * v12, v31);
  v31 += v7 * v12;
  uint64_t v33 = v19 + ((v7 * (unsigned __int128)v12) >> 64);
  uint64_t v34 = (v4 * (unsigned __int128)v10) >> 64;
  _BOOL1 v19 = __CFADD__(v17, v4 * v10);
  uint64_t v35 = (__PAIR128__(v10, v18) * __PAIR128__(v5, v4)) >> 64;
  BOOL v37 = v19;
  _BOOL1 v19 = __CFADD__(v19, v20);
  uint64_t v36 = v37 + v20;
  v19 |= __CFADD__(v34, v36);
  v36 += v34;
  uint64_t v38 = (v6 * (unsigned __int128)v10) >> 64;
  BOOL v40 = v19;
  _BOOL1 v19 = __CFADD__(v19, v23);
  uint64_t v39 = v40 + v23;
  v19 |= __CFADD__(v6 * v10, v39);
  v39 += v6 * v10;
  BOOL v42 = v19;
  _BOOL1 v19 = __CFADD__(v19, v25);
  uint64_t v41 = v42 + v25;
  v19 |= __CFADD__(v38, v41);
  v41 += v38;
  uint64_t v43 = (v6 * (unsigned __int128)v12) >> 64;
  BOOL v45 = v19;
  _BOOL1 v19 = __CFADD__(v19, v29);
  uint64_t v44 = v45 + v29;
  v19 |= __CFADD__(v6 * v12, v44);
  v44 += v6 * v12;
  BOOL v47 = v19;
  _BOOL1 v19 = __CFADD__(v19, v31);
  uint64_t v46 = v47 + v31;
  v19 |= __CFADD__(v43, v46);
  v46 += v43;
  uint64_t v48 = v19 + v33;
  uint64_t v49 = (v5 * (unsigned __int128)v10) >> 64;
  _BOOL1 v19 = __CFADD__(v36, v5 * v10);
  uint64_t v50 = v36 + v5 * v10;
  BOOL v52 = v19;
  _BOOL1 v19 = __CFADD__(v19, v39);
  uint64_t v51 = v52 + v39;
  v19 |= __CFADD__(v49, v51);
  v51 += v49;
  uint64_t v53 = (v6 * (unsigned __int128)v11) >> 64;
  BOOL v55 = v19;
  _BOOL1 v19 = __CFADD__(v19, v41);
  uint64_t v54 = v55 + v41;
  v19 |= __CFADD__(v6 * v11, v54);
  v54 += v6 * v11;
  BOOL v57 = v19;
  _BOOL1 v19 = __CFADD__(v19, v44);
  uint64_t v56 = v57 + v44;
  v19 |= __CFADD__(v53, v56);
  v56 += v53;
  BOOL v58 = v19;
  uint64_t v59 = (v4 * (unsigned __int128)v11) >> 64;
  _BOOL1 v19 = __CFADD__(v50, v4 * v11);
  uint64_t v60 = v50 + v4 * v11;
  BOOL v62 = v19;
  _BOOL1 v19 = __CFADD__(v19, v51);
  uint64_t v61 = v62 + v51;
  v19 |= __CFADD__(v59, v61);
  v61 += v59;
  uint64_t v63 = (v5 * (unsigned __int128)v12) >> 64;
  BOOL v65 = v19;
  _BOOL1 v19 = __CFADD__(v19, v54);
  uint64_t v64 = v65 + v54;
  v19 |= __CFADD__(v5 * v12, v64);
  v64 += v5 * v12;
  BOOL v67 = v19;
  _BOOL1 v19 = __CFADD__(v19, v56);
  uint64_t v66 = v67 + v56;
  v19 |= __CFADD__(v63, v66);
  v66 += v63;
  uint64_t v68 = v19 + v58;
  uint64_t v69 = (v5 * (unsigned __int128)v11) >> 64;
  _BOOL1 v19 = __CFADD__(v61, v5 * v11);
  uint64_t v70 = v61 + v5 * v11;
  BOOL v72 = v19;
  _BOOL1 v19 = __CFADD__(v19, v64);
  uint64_t v71 = v72 + v64;
  v19 |= __CFADD__(v69, v71);
  v71 += v69;
  uint64_t v73 = v19;
  uint64_t v74 = (v4 * (unsigned __int128)v12) >> 64;
  _BOOL1 v19 = __CFADD__(v70, v4 * v12);
  uint64_t v75 = v70 + v4 * v12;
  BOOL v77 = v19;
  _BOOL1 v19 = __CFADD__(v19, v71);
  uint64_t v76 = v77 + v71;
  v19 |= __CFADD__(v74, v76);
  v76 += v74;
  BOOL v79 = v19;
  _BOOL1 v19 = __CFADD__(v19, v66);
  uint64_t v78 = v79 + v66;
  v19 |= __CFADD__(v73, v78);
  v78 += v73;
  BOOL v81 = v19;
  _BOOL1 v19 = __CFADD__(v19, v46);
  uint64_t v80 = v81 + v46;
  v19 |= __CFADD__(v68, v80);
  v80 += v68;
  uint64_t v82 = v19 + v48;
  _BOOL1 v19 = __CFADD__(v35, v13 << 32);
  unint64_t v83 = v35 + (v13 << 32);
  BOOL v85 = v19;
  _BOOL1 v19 = __CFADD__(v19, v60);
  uint64_t v84 = v85 + v60;
  v19 |= __CFADD__(HIDWORD(v13), v84);
  v84 += HIDWORD(v13);
  BOOL v87 = v19;
  _BOOL1 v19 = __CFADD__(v19, v75);
  uint64_t v86 = v87 + v75;
  v19 |= __CFADD__(0xFFFFFFFF00000001 * v13, v86);
  v86 += 0xFFFFFFFF00000001 * v13;
  uint64_t v88 = v19 + ((v13 * (unsigned __int128)0xFFFFFFFF00000001) >> 64);
  _BOOL1 v19 = __CFADD__(v84, v83 << 32);
  unint64_t v89 = v84 + (v83 << 32);
  BOOL v91 = v19;
  _BOOL1 v19 = __CFADD__(v19, v86);
  uint64_t v90 = v91 + v86;
  v19 |= __CFADD__(HIDWORD(v83), v90);
  v90 += HIDWORD(v83);
  BOOL v93 = v19;
  _BOOL1 v19 = __CFADD__(v19, v76);
  uint64_t v92 = v93 + v76;
  v19 |= __CFADD__(0xFFFFFFFF00000001 * v83, v92);
  v92 += 0xFFFFFFFF00000001 * v83;
  uint64_t v94 = v19 + ((v83 * (unsigned __int128)0xFFFFFFFF00000001) >> 64);
  _BOOL1 v19 = __CFADD__(v90, v89 << 32);
  unint64_t v95 = v90 + (v89 << 32);
  BOOL v97 = v19;
  _BOOL1 v19 = __CFADD__(v19, v92);
  uint64_t v96 = v97 + v92;
  v19 |= __CFADD__(HIDWORD(v89), v96);
  v96 += HIDWORD(v89);
  BOOL v99 = v19;
  _BOOL1 v19 = __CFADD__(v19, v78);
  uint64_t v98 = v99 + v78;
  v19 |= __CFADD__(0xFFFFFFFF00000001 * v89, v98);
  v98 += 0xFFFFFFFF00000001 * v89;
  uint64_t v100 = v19 + ((v89 * (unsigned __int128)0xFFFFFFFF00000001) >> 64);
  _BOOL1 v19 = __CFADD__(v96, v95 << 32);
  uint64_t v101 = v96 + (v95 << 32);
  BOOL v103 = v19;
  _BOOL1 v19 = __CFADD__(v19, v98);
  uint64_t v102 = v103 + v98;
  v19 |= __CFADD__(HIDWORD(v95), v102);
  v102 += HIDWORD(v95);
  BOOL v105 = v19;
  _BOOL1 v19 = __CFADD__(v19, v80);
  uint64_t v104 = v105 + v80;
  v19 |= __CFADD__(0xFFFFFFFF00000001 * v95, v104);
  v104 += 0xFFFFFFFF00000001 * v95;
  uint64_t v106 = v19 + ((v95 * (unsigned __int128)0xFFFFFFFF00000001) >> 64);
  _BOOL1 v19 = __CFADD__(v88, v101);
  uint64_t v107 = v88 + v101;
  BOOL v109 = v19;
  _BOOL1 v19 = __CFADD__(v19, v94);
  uint64_t v108 = v109 + v94;
  v19 |= __CFADD__(v102, v108);
  v108 += v102;
  BOOL v111 = v19;
  _BOOL1 v19 = __CFADD__(v19, v100);
  unint64_t v110 = v111 + v100;
  v19 |= __CFADD__(v104, v110);
  v110 += v104;
  BOOL v113 = v19;
  _BOOL1 v19 = __CFADD__(v19, v106);
  uint64_t v112 = v113 + v106;
  v19 |= __CFADD__(v82, v112);
  v112 += v82;
  BOOL v114 = v19;
  _BOOL1 v19 = __CFADD__(v107++, 1);
  LOBYTE(v113) = v19;
  _BOOL1 v19 = __CFSUB__(v108, 0xFFFFFFFFLL, v19);
  uint64_t v115 = v108 - (!v113 + 0xFFFFFFFFLL);
  LOBYTE(v113) = v19;
  _BOOL1 v19 = v110 >= !v19;
  unint64_t v116 = v110 - !v113;
  LOBYTE(v113) = v19;
  _BOOL1 v19 = __CFSUB__(v112, 0xFFFFFFFF00000001, v19);
  BOOL v117 = v114 - !v19;
  uint64_t v118 = v114 - !v19;
  _BOOL1 v19 = __CFADD__(__CFADD__(v107, v117), v115);
  uint64_t v119 = __CFADD__(v107, v117) + v115;
  *a1 = v107 + v117;
  a1[1] = v118 + v119;
  uint64_t result = a1 + 2;
  _OWORD *result = __PAIR128__(v117 & 0xFFFFFFFF00000001, v19 | __CFADD__(v118, v119))
          + __PAIR128__(v112 - ((unint64_t)!v113 - 0xFFFFFFFF), v116);
  return result;
}

uint64_t sub_19D76EC58(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v7 = *(void *)(a1 + 16);
  unint64_t v8 = sub_19D767AEC(a2);
  unint64_t v9 = (void *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, 2 * v8);
  sub_19D763D94(a1, v8, v9, a4);
  uint64_t result = sub_19D76E530(a1, a2);
  *(void *)(a1 + 16) = v7;
  return result;
}

uint64_t sub_19D76ECEC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a2 + 16) + 24))();
}

uint64_t sub_19D76ECF8(uint64_t a1)
{
  return a1 + 24;
}

uint64_t sub_19D76ED00(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, unint64_t *a5)
{
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = sub_19D767AEC(a2);
  BOOL v12 = sub_19D769390(a1, v11, a3, a4, a5);
  unint64_t v13 = (uint64_t *)sub_19D76ECF8(a2);
  uint64_t result = sub_19D76DA20(v11, v12, a3, a3, v13);
  *(void *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_19D76ED98(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a2 + 16) + 8))();
}

void *sub_19D76EDA4()
{
  return &unk_1EEF8FA10;
}

void *sub_19D76EDB0(size_t a1)
{
  uint64_t v2 = malloc(a1);
  uint64_t v3 = v2;
  if (v2) {
    bzero(v2, a1);
  }
  return v3;
}

uint64_t sub_19D76EDEC(void *a1, uint64_t a2)
{
  unint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  uint64_t v4 = *a1 + 8 * v2;
  unint64_t v5 = v2 + a2;
  a1[2] = v5;
  sub_19D76335C(v5 > v3);
  return v4;
}

void sub_19D76EE34(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
}

uint64_t sub_19D76EE88(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *a2;
  uint64_t v9 = sub_19D76ECF8((uint64_t)a2);
  if ((int)sub_19D76899C(v8, v9, a4) < 1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v10 = *a2;
  uint64_t v11 = a4 + 8 * *a2;
  uint64_t v12 = sub_19D76ECF8((uint64_t)a2);
  if ((int)sub_19D76899C(v10, v12, v11) < 1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = sub_19D766940(a1, (uint64_t)a2);
  if (!result)
  {
    if (sub_19D7682F0(a1, a2, a3)) {
      return 0;
    }
    else {
      return 4294967289;
    }
  }
  return result;
}

uint64_t sub_19D76EF5C(uint64_t result, unint64_t *a2, unint64_t *a3)
{
  if (result)
  {
    unint64_t v3 = result;
    uint64_t result = 0;
    do
    {
      unint64_t v5 = *a2++;
      unint64_t v4 = v5;
      unint64_t v6 = *a3++;
      BOOL v7 = v4 >= v6;
      if (v4 > v6) {
        uint64_t result = 1;
      }
      if (!v7) {
        uint64_t result = -1;
      }
    }
    while (v3-- > 1);
  }
  return result;
}

uint64_t sub_19D76EF94(unsigned int *a1)
{
  return sub_19D76CE40(*a1);
}

void sub_19D76EF9C()
{
}

void sub_19D76EFC8()
{
}

void sub_19D76EFF4()
{
}

void sub_19D76F020(int a1)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  v1[0] = 67109120;
  v1[1] = a1;
  _os_log_fault_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "request for unknown screen param %d", (uint8_t *)v1, 8u);
}

void sub_19D76F0A0()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  int v0 = 138412290;
  uint64_t v1 = qword_1EB217450;
  _os_log_fault_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "invalid product id '%@'", (uint8_t *)&v0, 0xCu);
}

void sub_19D76F128(unsigned int *a1, uint64_t a2, const void *a3)
{
  unint64_t v6 = sub_19D71EF70("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
  _MGLog((uint64_t)v6, 974, @"%@ does not return a BOOL, actually returns a %s", v7, v8, v9, v10, v11, a2);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = qword_1E5962B30[*a1];
    *(_DWORD *)long long buf = 138412546;
    uint64_t v14 = a2;
    __int16 v15 = 2080;
    uint64_t v16 = v12;
    _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%@ does not return a BOOL, actually returns a %s", buf, 0x16u);
    if (!a3) {
LABEL_3:
    }
      abort();
  }
  else if (!a3)
  {
    goto LABEL_3;
  }
  CFRelease(a3);
  abort();
}

void sub_19D76F1F4(int a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_19D71EF70("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
  uint64_t v7 = qword_1E5962B30[a1];
  _MGLog((uint64_t)v6, 998, @"%@ value %@ can't be converted to %s", v8, v9, v10, v11, v12, a2);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412802;
    uint64_t v14 = a2;
    __int16 v15 = 2112;
    uint64_t v16 = a3;
    __int16 v17 = 2080;
    uint64_t v18 = v7;
    _os_log_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%@ value %@ can't be converted to %s", buf, 0x20u);
  }
  abort();
}

void sub_19D76F2B0(const __CFData *a1)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  int v1 = 134217984;
  CFIndex Length = CFDataGetLength(a1);
  _os_log_fault_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "TMAC address has unexpected length %zu", (uint8_t *)&v1, 0xCu);
}

void sub_19D76F334()
{
  *(_WORD *)int v0 = 0;
  _os_log_fault_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Unknown DeviceClass", v0, 2u);
}

void sub_19D76F37C()
{
  int v0 = (void *)[MEMORY[0x1E4F28B00] currentHandler];
  [v0 handleFailureInFunction:[NSString stringWithUTF8String:"Class getNFSecureElementClass(void)_block_invoke"] file:@"MGSecureElement.m" lineNumber:20 description:@"Unable to find class %s" argument:NFSecureElement];
  __break(1u);
}

void sub_19D76F3E4(void *a1)
{
  uint64_t v2 = (void *)[MEMORY[0x1E4F28B00] currentHandler];
  [v2 handleFailureInFunction:[NSString stringWithUTF8String:"void *NearFieldLibrary(void)"] file:@"MGSecureElement.m" lineNumber:18 description:@"%s", *a1];
  __break(1u);
}

void sub_19D76F44C()
{
  int v0 = (void *)[MEMORY[0x1E4F28B00] currentHandler];
  [v0 handleFailureInFunction:[NSString stringWithUTF8String:"Class getNFHardwareManagerClass(void)_block_invoke"] file:@"MGSecureElement.m" lineNumber:21 description:@"Unable to find class %s" argument:NFHardwareManager];
  __break(1u);
}

void sub_19D76F4B4(void *a1)
{
  uint64_t v2 = (void *)[MEMORY[0x1E4F28B00] currentHandler];
  [v2 handleFailureInFunction:[NSString stringWithUTF8String:"void *BiometricKitLibrary(void)"] file:@"MGSecureElement.m" lineNumber:30 description:@"%s", *a1];
  __break(1u);
}

void sub_19D76F51C()
{
  int v0 = (void *)[MEMORY[0x1E4F28B00] currentHandler];
  [v0 handleFailureInFunction:[NSString stringWithUTF8String:"Class getBKDeviceManagerClass(void)_block_invoke"] file:@"MGSecureElement.m" lineNumber:31 description:@"Unable to find class %s" argument:objc_msgSend(NSString, "stringWithUTF8String:", "BKDeviceManager")];
  __break(1u);
}

void sub_19D76F584(uint64_t a1)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  int v1 = 138412290;
  uint64_t v2 = a1;
  _os_log_fault_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Unexpected type returned for key %@.", (uint8_t *)&v1, 0xCu);
}

void sub_19D76F604(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D76F680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D76F6FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19D7414E8(&dword_19D70E000, MEMORY[0x1E4F14500], a3, "%s returning previously initialized sysconfig dictionary", a5, a6, a7, a8, 2u);
}

void sub_19D76F778(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v3[0] = 67109634;
  v3[1] = a3;
  __int16 v4 = 2112;
  uint64_t v5 = a1;
  __int16 v6 = 2112;
  uint64_t v7 = a2;
  _os_log_debug_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEBUG, "Appending syscfg key (0x%X): %@ from %@", (uint8_t *)v3, 0x1Cu);
}

uint64_t sub_19D76F80C()
{
  dlerror();
  uint64_t v0 = abort_report_np();
  return sub_19D76F830(v0);
}

void sub_19D76F830(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D76F8A4(uint64_t a1)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  int v1 = 138412290;
  uint64_t v2 = a1;
  _os_log_fault_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Busy service: %@", (uint8_t *)&v1, 0xCu);
}

void sub_19D76F924(uint64_t a1)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  int v1 = 138412290;
  uint64_t v2 = a1;
  _os_log_fault_impl(&dword_19D70E000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Last busy service of unexpected type %@", (uint8_t *)&v1, 0xCu);
}

void sub_19D76F9A4()
{
  sub_19D754904();
  sub_19D7548E8(&dword_19D70E000, v0, v1, "Failed to convert number", v2, v3, v4, v5, v6);
}

void sub_19D76F9D8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D76FA50(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D76FAC8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D76FB40(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D76FBB8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D76FC30(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D76FCA8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D76FD20(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D76FD98(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D76FE10(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D76FE88(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D76FF00(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D76FF78(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D76FFF0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D770068(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D7700E0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D770158(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D7701D0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D770248(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D7702C0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D770338(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D7703B0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D770428(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D7704A0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D770518(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D770590(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D770608(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D770680(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D7706F8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D770770(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D7707E8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D770860(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D7708D8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D770950(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D7709C8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D770A40(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D770AB8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D770B30(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D770BA8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D770C20(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D770C98(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D770D10(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D770D88(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D770E00(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D770E78(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D770EF0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D770F68(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D770FE0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D771058(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D7710D0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D771148(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D7711C0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D771238(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D7712B0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D771328(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D7713A0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D771418(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D771490(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D771508(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D771580(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D7715F8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D771670(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D7716E8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D771760(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D7717D8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D771850(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D7718C8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D771940(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D7719B8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D771A30(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D771AA8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D771B20(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D771B98(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D771C10(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D771C88(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D771D00(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D771D78(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D771DF0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D771E68(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D771EE0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D771F58(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D771FD0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D772048(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D7720C0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D772138(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D7721B0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D772228(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D7722A0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D772318(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D772390(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D772408(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D772480(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D7724F8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D772570(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D7725E8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D772660(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D7726D8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D772750(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D7727C8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D772840(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D7728B8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D772930(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D7729A8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D772A20(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D772A98(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D772B10(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_19D772B88()
{
  __assert_rtn("_MGWaitForDevices", "MGDeviceIteration.c", 60, "type != MGDeviceIterationTypePath");
}

void sub_19D772BB4()
{
}

unsigned __int8 *__cdecl CC_MD5(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1F40C9710](data, *(void *)&len, md);
}

unsigned __int8 *__cdecl CC_SHA1(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1F40C9730](data, *(void *)&len, md);
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

Boolean CFArrayContainsValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x1F40D7160](theArray, range.location, range.length, value);
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x1F40D7170](allocator, values, numValues, callBacks);
}

CFArrayRef CFArrayCreateCopy(CFAllocatorRef allocator, CFArrayRef theArray)
{
  return (CFArrayRef)MEMORY[0x1F40D7178](allocator, theArray);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1F40D7190](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1F40D71B8](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1F40D71D8]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1F40D71F0](theArray, idx);
}

void CFArrayGetValues(CFArrayRef theArray, CFRange range, const void **values)
{
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1F40D7420]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1F40D7430](BOOLean);
}

CFStringRef CFCopyTypeIDDescription(CFTypeID type_id)
{
  return (CFStringRef)MEMORY[0x1F40D77D0](type_id);
}

void CFDataAppendBytes(CFMutableDataRef theData, const UInt8 *bytes, CFIndex length)
{
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1F40D77E8](allocator, bytes, length);
}

CFDataRef CFDataCreateCopy(CFAllocatorRef allocator, CFDataRef theData)
{
  return (CFDataRef)MEMORY[0x1F40D77F8](allocator, theData);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableDataRef)MEMORY[0x1F40D7808](allocator, capacity);
}

CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return (CFDataRef)MEMORY[0x1F40D7818](allocator, bytes, length, bytesDeallocator);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1F40D7830](theData);
}

void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer)
{
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1F40D7850](theData);
}

UInt8 *__cdecl CFDataGetMutableBytePtr(CFMutableDataRef theData)
{
  return (UInt8 *)MEMORY[0x1F40D7858](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x1F40D7860]();
}

void CFDataSetLength(CFMutableDataRef theData, CFIndex length)
{
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1F40D7968](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7978](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFDictionaryRef CFDictionaryCreateCopy(CFAllocatorRef allocator, CFDictionaryRef theDict)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7990](allocator, theDict);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D7998](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x1F40D79C0](theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1F40D7A00]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1F40D7A10](theDict, key);
}

Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value)
{
  return MEMORY[0x1F40D7A18](theDict, key, value);
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1F40D7A68](cf1, cf2);
}

CFStringRef CFErrorCopyDescription(CFErrorRef err)
{
  return (CFStringRef)MEMORY[0x1F40D7A80](err);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1F40D7B80](cf);
}

CFLocaleRef CFLocaleCopyCurrent(void)
{
  return (CFLocaleRef)MEMORY[0x1F40D7BB8]();
}

CFTypeRef CFLocaleGetValue(CFLocaleRef locale, CFLocaleKey key)
{
  return (CFTypeRef)MEMORY[0x1F40D7C48](locale, key);
}

CFComparisonResult CFNumberCompare(CFNumberRef number, CFNumberRef otherNumber, void *context)
{
  return MEMORY[0x1F40D7D78](number, otherNumber, context);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1F40D7D80](allocator, theType, valuePtr);
}

CFNumberFormatterRef CFNumberFormatterCreate(CFAllocatorRef allocator, CFLocaleRef locale, CFNumberFormatterStyle style)
{
  return (CFNumberFormatterRef)MEMORY[0x1F40D7D98](allocator, locale, style);
}

CFNumberRef CFNumberFormatterCreateNumberFromString(CFAllocatorRef allocator, CFNumberFormatterRef formatter, CFStringRef string, CFRange *rangep, CFOptionFlags options)
{
  return (CFNumberRef)MEMORY[0x1F40D7DA0](allocator, formatter, string, rangep, options);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1F40D7E10]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1F40D7E20](number, theType, valuePtr);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7EA0](key, applicationID);
}

CFPropertyListRef CFPropertyListCreateWithData(CFAllocatorRef allocator, CFDataRef data, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7F50](allocator, data, options, format, error);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1F40D8048](cf);
}

void CFRunLoopAddCommonMode(CFRunLoopRef rl, CFRunLoopMode mode)
{
}

void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
}

CFRunLoopRef CFRunLoopGetCurrent(void)
{
  return (CFRunLoopRef)MEMORY[0x1F40D80B0]();
}

CFRunLoopRunResult CFRunLoopRunInMode(CFRunLoopMode mode, CFTimeInterval seconds, Boolean returnAfterSourceHandled)
{
  return MEMORY[0x1F40D8128](mode, returnAfterSourceHandled, seconds);
}

void CFSetAddValue(CFMutableSetRef theSet, const void *value)
{
}

Boolean CFSetContainsValue(CFSetRef theSet, const void *value)
{
  return MEMORY[0x1F40D81F8](theSet, value);
}

CFMutableSetRef CFSetCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFSetCallBacks *callBacks)
{
  return (CFMutableSetRef)MEMORY[0x1F40D8210](allocator, capacity, callBacks);
}

void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString)
{
}

void CFStringAppendFormat(CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1F40D8388](theString1, theString2, compareOptions);
}

CFArrayRef CFStringCreateArrayBySeparatingStrings(CFAllocatorRef alloc, CFStringRef theString, CFStringRef separatorString)
{
  return (CFArrayRef)MEMORY[0x1F40D83D0](alloc, theString, separatorString);
}

CFStringRef CFStringCreateCopy(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFStringRef)MEMORY[0x1F40D83F0](alloc, theString);
}

CFDataRef CFStringCreateExternalRepresentation(CFAllocatorRef alloc, CFStringRef theString, CFStringEncoding encoding, UInt8 lossByte)
{
  return (CFDataRef)MEMORY[0x1F40D83F8](alloc, theString, *(void *)&encoding, lossByte);
}

CFStringRef CFStringCreateFromExternalRepresentation(CFAllocatorRef alloc, CFDataRef data, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1F40D8400](alloc, data, *(void *)&encoding);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x1F40D8408](alloc, maxLength);
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x1F40D8438](alloc, bytes, numBytes, *(void *)&encoding, isExternalRepresentation);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1F40D8448](alloc, cStr, *(void *)&encoding);
}

CFStringRef CFStringCreateWithCStringNoCopy(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x1F40D8458](alloc, cStr, *(void *)&encoding, contentsDeallocator);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x1F40D8490](alloc, formatOptions, format);
}

CFStringRef CFStringCreateWithFormatAndArguments(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, va_list arguments)
{
  return (CFStringRef)MEMORY[0x1F40D8498](alloc, formatOptions, format, arguments);
}

CFStringRef CFStringCreateWithSubstring(CFAllocatorRef alloc, CFStringRef str, CFRange range)
{
  return (CFStringRef)MEMORY[0x1F40D84A8](alloc, str, range.location, range.length);
}

CFRange CFStringFind(CFStringRef theString, CFStringRef stringToFind, CFStringCompareFlags compareOptions)
{
  CFIndex v3 = MEMORY[0x1F40D84C8](theString, stringToFind, compareOptions);
  result.length = v4;
  result.CFIndex location = v3;
  return result;
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1F40D8510](theString, buffer, bufferSize, *(void *)&encoding);
}

UniChar CFStringGetCharacterAtIndex(CFStringRef theString, CFIndex idx)
{
  return MEMORY[0x1F40D8528](theString, idx);
}

SInt32 CFStringGetIntValue(CFStringRef str)
{
  return MEMORY[0x1F40D8568](str);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1F40D8578](theString);
}

CFIndex CFStringGetMaximumSizeForEncoding(CFIndex length, CFStringEncoding encoding)
{
  return MEMORY[0x1F40D8590](length, *(void *)&encoding);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1F40D85F0]();
}

Boolean CFStringHasPrefix(CFStringRef theString, CFStringRef prefix)
{
  return MEMORY[0x1F40D8600](theString, prefix);
}

CFStringRef CFURLCopyFileSystemPath(CFURLRef anURL, CFURLPathStyle pathStyle)
{
  return (CFStringRef)MEMORY[0x1F40D8758](anURL, pathStyle);
}

CFURLRef CFURLCreateCopyAppendingPathComponent(CFAllocatorRef allocator, CFURLRef url, CFStringRef pathComponent, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1F40D87F8](allocator, url, pathComponent, isDirectory);
}

CFURLRef CFURLCreateFromFileSystemRepresentation(CFAllocatorRef allocator, const UInt8 *buffer, CFIndex bufLen, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1F40D8848](allocator, buffer, bufLen, isDirectory);
}

CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1F40D88A0](allocator, filePath, pathStyle, isDirectory);
}

Boolean CFURLGetFileSystemRepresentation(CFURLRef url, Boolean resolveAgainstBase, UInt8 *buffer, CFIndex maxBufLen)
{
  return MEMORY[0x1F40D8908](url, resolveAgainstBase, buffer, maxBufLen);
}

Boolean CFURLSetResourcePropertyForKey(CFURLRef url, CFStringRef key, CFTypeRef propertyValue, CFErrorRef *error)
{
  return MEMORY[0x1F40D8958](url, key, propertyValue, error);
}

uint64_t CNEncode()
{
  return MEMORY[0x1F40C97D8]();
}

CFMutableDictionaryRef IOBSDNameMatching(mach_port_t mainPort, uint32_t options, const char *bsdName)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40E8680](*(void *)&mainPort, *(void *)&options, bsdName);
}

kern_return_t IOConnectCallMethod(mach_port_t connection, uint32_t selector, const uint64_t *input, uint32_t inputCnt, const void *inputStruct, size_t inputStructCnt, uint64_t *output, uint32_t *outputCnt, void *outputStruct, size_t *outputStructCnt)
{
  return MEMORY[0x1F40E86C8](*(void *)&connection, *(void *)&selector, input, *(void *)&inputCnt, inputStruct, inputStructCnt, output, outputCnt);
}

kern_return_t IOConnectCallScalarMethod(mach_port_t connection, uint32_t selector, const uint64_t *input, uint32_t inputCnt, uint64_t *output, uint32_t *outputCnt)
{
  return MEMORY[0x1F40E86D0](*(void *)&connection, *(void *)&selector, input, *(void *)&inputCnt, output, outputCnt);
}

kern_return_t IOConnectCallStructMethod(mach_port_t connection, uint32_t selector, const void *inputStruct, size_t inputStructCnt, void *outputStruct, size_t *outputStructCnt)
{
  return MEMORY[0x1F40E86D8](*(void *)&connection, *(void *)&selector, inputStruct, inputStructCnt, outputStruct, outputStructCnt);
}

io_object_t IOIteratorNext(io_iterator_t iterator)
{
  return MEMORY[0x1F40E8ED8](*(void *)&iterator);
}

kern_return_t IOKitGetBusyState(mach_port_t mainPort, uint32_t *busyState)
{
  return MEMORY[0x1F40E8EE8](*(void *)&mainPort, busyState);
}

uint64_t IOMobileFramebufferGetCanvasSizes()
{
  return MEMORY[0x1F4124A38]();
}

uint64_t IOMobileFramebufferGetDisplaySize()
{
  return MEMORY[0x1F4124A60]();
}

uint64_t IOMobileFramebufferGetDotPitch()
{
  return MEMORY[0x1F4124A68]();
}

uint64_t IOMobileFramebufferGetMainDisplay()
{
  return MEMORY[0x1F4124A88]();
}

IONotificationPortRef IONotificationPortCreate(mach_port_t mainPort)
{
  return (IONotificationPortRef)MEMORY[0x1F40E8F08](*(void *)&mainPort);
}

void IONotificationPortDestroy(IONotificationPortRef notify)
{
}

CFRunLoopSourceRef IONotificationPortGetRunLoopSource(IONotificationPortRef notify)
{
  return (CFRunLoopSourceRef)MEMORY[0x1F40E8F20](notify);
}

CFStringRef IOObjectCopyClass(io_object_t object)
{
  return (CFStringRef)MEMORY[0x1F40E8F40](*(void *)&object);
}

kern_return_t IOObjectGetClass(io_object_t object, io_name_t className)
{
  return MEMORY[0x1F40E8F48](*(void *)&object, className);
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return MEMORY[0x1F40E8F60](*(void *)&object);
}

CFTypeRef IOPSCopyPowerSourcesInfo(void)
{
  return (CFTypeRef)MEMORY[0x1F40E90E8]();
}

CFArrayRef IOPSCopyPowerSourcesList(CFTypeRef blob)
{
  return (CFArrayRef)MEMORY[0x1F40E90F0](blob);
}

uint64_t IOPSDrawingUnlimitedPower()
{
  return MEMORY[0x1F40E9100]();
}

uint64_t IOPSGetPercentRemaining()
{
  return MEMORY[0x1F40E9110]();
}

CFDictionaryRef IOPSGetPowerSourceDescription(CFTypeRef blob, CFTypeRef ps)
{
  return (CFDictionaryRef)MEMORY[0x1F40E9118](blob, ps);
}

kern_return_t IORegistryCreateIterator(mach_port_t mainPort, const io_name_t plane, IOOptionBits options, io_iterator_t *iterator)
{
  return MEMORY[0x1F40E9150](*(void *)&mainPort, plane, *(void *)&options, iterator);
}

kern_return_t IORegistryEntryCreateCFProperties(io_registry_entry_t entry, CFMutableDictionaryRef *properties, CFAllocatorRef allocator, IOOptionBits options)
{
  return MEMORY[0x1F40E9158](*(void *)&entry, properties, allocator, *(void *)&options);
}

CFTypeRef IORegistryEntryCreateCFProperty(io_registry_entry_t entry, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return (CFTypeRef)MEMORY[0x1F40E9168](*(void *)&entry, key, allocator, *(void *)&options);
}

kern_return_t IORegistryEntryCreateIterator(io_registry_entry_t entry, const io_name_t plane, IOOptionBits options, io_iterator_t *iterator)
{
  return MEMORY[0x1F40E9180](*(void *)&entry, plane, *(void *)&options, iterator);
}

io_registry_entry_t IORegistryEntryFromPath(mach_port_t mainPort, const io_string_t path)
{
  return MEMORY[0x1F40E9188](*(void *)&mainPort, path);
}

kern_return_t IORegistryEntryGetChildIterator(io_registry_entry_t entry, const io_name_t plane, io_iterator_t *iterator)
{
  return MEMORY[0x1F40E9190](*(void *)&entry, plane, iterator);
}

kern_return_t IORegistryEntryGetName(io_registry_entry_t entry, io_name_t name)
{
  return MEMORY[0x1F40E91A8](*(void *)&entry, name);
}

kern_return_t IORegistryEntryGetPath(io_registry_entry_t entry, const io_name_t plane, io_string_t path)
{
  return MEMORY[0x1F40E91E0](*(void *)&entry, plane, path);
}

CFTypeRef IORegistryEntrySearchCFProperty(io_registry_entry_t entry, const io_name_t plane, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return (CFTypeRef)MEMORY[0x1F40E9208](*(void *)&entry, plane, key, allocator, *(void *)&options);
}

kern_return_t IOServiceAddMatchingNotification(IONotificationPortRef notifyPort, const io_name_t notificationType, CFDictionaryRef matching, IOServiceMatchingCallback callback, void *refCon, io_iterator_t *notification)
{
  return MEMORY[0x1F40E9238](notifyPort, notificationType, matching, callback, refCon, notification);
}

kern_return_t IOServiceClose(io_connect_t connect)
{
  return MEMORY[0x1F40E9240](*(void *)&connect);
}

kern_return_t IOServiceGetBusyState(io_service_t service, uint32_t *busyState)
{
  return MEMORY[0x1F40E9248](*(void *)&service, busyState);
}

io_service_t IOServiceGetMatchingService(mach_port_t mainPort, CFDictionaryRef matching)
{
  return MEMORY[0x1F40E9250](*(void *)&mainPort, matching);
}

kern_return_t IOServiceGetMatchingServices(mach_port_t mainPort, CFDictionaryRef matching, io_iterator_t *existing)
{
  return MEMORY[0x1F40E9258](*(void *)&mainPort, matching, existing);
}

CFMutableDictionaryRef IOServiceMatching(const char *name)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40E9268](name);
}

CFMutableDictionaryRef IOServiceNameMatching(const char *name)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40E9278](name);
}

kern_return_t IOServiceOpen(io_service_t service, task_port_t owningTask, uint32_t type, io_connect_t *connect)
{
  return MEMORY[0x1F40E9280](*(void *)&service, *(void *)&owningTask, *(void *)&type, connect);
}

fat_arch *__cdecl NXFindBestFatArch(cpu_type_t cputype, cpu_subtype_t cpusubtype, fat_arch *fat_archs, uint32_t nfat_archs)
{
  return (fat_arch *)MEMORY[0x1F40C99C0](*(void *)&cputype, *(void *)&cpusubtype, fat_archs, *(void *)&nfat_archs);
}

const NXArchInfo *__cdecl NXGetArchInfoFromName(const char *name)
{
  return (const NXArchInfo *)MEMORY[0x1F40C99D0](name);
}

const NXArchInfo *NXGetLocalArchInfo(void)
{
  return (const NXArchInfo *)MEMORY[0x1F40C99D8]();
}

CFStringRef SCDynamicStoreCopyComputerName(SCDynamicStoreRef store, CFStringEncoding *nameEncoding)
{
  return (CFStringRef)MEMORY[0x1F4101D70](store, nameEncoding);
}

int SCError(void)
{
  return MEMORY[0x1F4101E20]();
}

const char *__cdecl SCErrorString(int status)
{
  return (const char *)MEMORY[0x1F4101E28](*(void *)&status);
}

Boolean SCPreferencesApplyChanges(SCPreferencesRef prefs)
{
  return MEMORY[0x1F4101FE8](prefs);
}

Boolean SCPreferencesCommitChanges(SCPreferencesRef prefs)
{
  return MEMORY[0x1F4101FF0](prefs);
}

SCPreferencesRef SCPreferencesCreate(CFAllocatorRef allocator, CFStringRef name, CFStringRef prefsID)
{
  return (SCPreferencesRef)MEMORY[0x1F4101FF8](allocator, name, prefsID);
}

CFPropertyListRef SCPreferencesGetValue(SCPreferencesRef prefs, CFStringRef key)
{
  return (CFPropertyListRef)MEMORY[0x1F4102010](prefs, key);
}

Boolean SCPreferencesLock(SCPreferencesRef prefs, Boolean wait)
{
  return MEMORY[0x1F4102018](prefs, wait);
}

Boolean SCPreferencesSetValue(SCPreferencesRef prefs, CFStringRef key, CFPropertyListRef value)
{
  return MEMORY[0x1F4102058](prefs, key, value);
}

Boolean SCPreferencesUnlock(SCPreferencesRef prefs)
{
  return MEMORY[0x1F4102068](prefs);
}

void _Block_object_assign(void *a1, const void *a2, const int a3)
{
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

uint64_t _CFCopySupplementalVersionDictionary()
{
  return MEMORY[0x1F40D8D08]();
}

uint64_t _CFCopySystemVersionDictionary()
{
  return MEMORY[0x1F40D8D10]();
}

uint64_t _CFMZEnabled()
{
  return MEMORY[0x1F40D8EA0]();
}

uint64_t _CFPreferencesCopyValueWithContainer()
{
  return MEMORY[0x1F40D8F58]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

int *__error(void)
{
  return (int *)MEMORY[0x1F40C9B88]();
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1F40C9C18](*(void *)&a1, a2);
}

uint64_t __memcpy_chk()
{
  return MEMORY[0x1F40C9C28]();
}

uint64_t __strcat_chk()
{
  return MEMORY[0x1F40C9CC0]();
}

uint64_t __strlcpy_chk()
{
  return MEMORY[0x1F40C9CD8]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _os_once()
{
  return MEMORY[0x1F40CA050]();
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1F415B160]();
}

void abort(void)
{
}

uint64_t abort_report_np()
{
  return MEMORY[0x1F40CA1E8]();
}

int access(const char *a1, int a2)
{
  return MEMORY[0x1F40CA210](a1, *(void *)&a2);
}

int asl_log(asl_object_t client, asl_object_t msg, int level, const char *format, ...)
{
  return MEMORY[0x1F40CA408](client, msg, *(void *)&level, format);
}

void bzero(void *a1, size_t a2)
{
}

int close(int a1)
{
  return MEMORY[0x1F40CB3F8](*(void *)&a1);
}

uint64_t container_system_group_path_for_identifier()
{
  return MEMORY[0x1F40CB7F8]();
}

char *__cdecl ctime_r(const time_t *a1, char *a2)
{
  return (char *)MEMORY[0x1F40CB8E8](a1, a2);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1F40CBA60](identifier, flags);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

void dispatch_release(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1F40CBC30](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1F40CBC40](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBC50](dsema, timeout);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1F40CBDB0]();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1F40CBDB8](__path, *(void *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1F40CBDC8](__handle, __symbol);
}

uint64_t dyld_get_active_platform()
{
  return MEMORY[0x1F40CBE10]();
}

uint64_t dyld_program_sdk_at_least()
{
  return MEMORY[0x1F40CBEC8]();
}

int fclose(FILE *a1)
{
  return MEMORY[0x1F40CC050](a1);
}

int feof(FILE *a1)
{
  return MEMORY[0x1F40CC098](a1);
}

int fflush(FILE *a1)
{
  return MEMORY[0x1F40CC0C8](a1);
}

char *__cdecl fgets(char *a1, int a2, FILE *a3)
{
  return (char *)MEMORY[0x1F40CC100](a1, *(void *)&a2, a3);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1F40CC1C0](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CC1D8](a1, a2);
}

int fputc(int a1, FILE *a2)
{
  return MEMORY[0x1F40CC1E8](*(void *)&a1, a2);
}

int fputs(const char *a1, FILE *a2)
{
  return MEMORY[0x1F40CC1F0](a1, a2);
}

void free(void *a1)
{
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x1F40CC2B8](*(void *)&a1, a2);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1F40CC338](__ptr, __size, __nitems, __stream);
}

int getattrlist(const char *a1, void *a2, void *a3, size_t a4, unsigned int a5)
{
  return MEMORY[0x1F40CC360](a1, a2, a3, a4, *(void *)&a5);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x1F40CC3B0](a1);
}

pid_t getpid(void)
{
  return MEMORY[0x1F40CC4A0]();
}

kern_return_t host_info(host_t host, host_flavor_t flavor, host_info_t host_info_out, mach_msg_type_number_t *host_info_outCnt)
{
  return MEMORY[0x1F40CC608](*(void *)&host, *(void *)&flavor, host_info_out, host_info_outCnt);
}

char *__cdecl index(const char *a1, int a2)
{
  return (char *)MEMORY[0x1F40CC658](a1, *(void *)&a2);
}

char *__cdecl mach_error_string(mach_error_t error_value)
{
  return (char *)MEMORY[0x1F40CC940](*(void *)&error_value);
}

mach_port_t mach_host_self(void)
{
  return MEMORY[0x1F40CC950]();
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1F40CCB10](__size);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB90](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB98](size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1F40CCCE8](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD20](__b, *(void *)&__c, __len);
}

errno_t memset_s(void *__s, rsize_t __smax, int __c, rsize_t __n)
{
  return MEMORY[0x1F40CCD40](__s, __smax, *(void *)&__c, __n);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1F4181648]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181678](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1F4181688]();
}

void objc_enumerationMutation(id obj)
{
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1F4181728](name);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A8](a1, a2);
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1F41817C0]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1F41818B0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1F41818B8](a1);
}

void objc_storeStrong(id *location, id obj)
{
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1F40CD0E0](a1, *(void *)&a2);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1F40CD360](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1F40CD3B8](oslog, type);
}

uint64_t os_parse_boot_arg_int()
{
  return MEMORY[0x1F40CD528]();
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t os_variant_has_internal_content()
{
  return MEMORY[0x1F40CD648]();
}

uint64_t os_variant_is_darwinos()
{
  return MEMORY[0x1F40CD660]();
}

int proc_pidinfo(int pid, int flavor, uint64_t arg, void *buffer, int buffersize)
{
  return MEMORY[0x1F40CD8A8](*(void *)&pid, *(void *)&flavor, arg, buffer, *(void *)&buffersize);
}

void *__cdecl pthread_getspecific(pthread_key_t a1)
{
  return (void *)MEMORY[0x1F40CDA20](a1);
}

int pthread_key_create(pthread_key_t *a1, void (__cdecl *a2)(void *))
{
  return MEMORY[0x1F40CDA40](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA88](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA98](a1);
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return MEMORY[0x1F40CDB70](a1, a2);
}

void qsort_b(void *__base, size_t __nel, size_t __width, void *__compar)
{
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x1F40CDC50](*(void *)&a1, a2, a3);
}

char *__cdecl rindex(const char *a1, int a2)
{
  return (char *)MEMORY[0x1F40CDD88](a1, *(void *)&a2);
}

uint64_t sandbox_check()
{
  return MEMORY[0x1F40CDDD0]();
}

unsigned int sleep(unsigned int a1)
{
  return MEMORY[0x1F40CE078](*(void *)&a1);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1F40CE080](__str, __size, __format);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CE0D0](a1, a2);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1F40CE110](a1, a2);
}

int statfs(const char *a1, statfs *a2)
{
  return MEMORY[0x1F40CE118](a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1F40CE158](__s1, __s2);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x1F40CE178](__s1);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1F40CE188](*(void *)&__errnum);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1F40CE1B0](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1F40CE1C8](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1F40CE1F0](__s1, __s2, __n);
}

size_t strnlen(const char *__s1, size_t __n)
{
  return MEMORY[0x1F40CE208](__s1, __n);
}

char *__cdecl strstr(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x1F40CE258](__s1, __s2);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x1F40CE3D0](a1, a2, a3, a4, a5);
}

time_t time(time_t *a1)
{
  return MEMORY[0x1F40CE588](a1);
}

int unlink(const char *a1)
{
  return MEMORY[0x1F40CE5E0](a1);
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x1F40CE790](__str, __size, __format, a4);
}