int sqlite3_bind_double(sqlite3_stmt *a1, int a2, double a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  _WORD *v8;
  uint64_t v9;
  uint64_t v10;

  if (a2 <= 0)
  {
    if (a1)
    {
      v10 = *(void *)a1;
      if (*(void *)a1)
      {
        v6 = 25;
        *(_DWORD *)(v10 + 80) = 25;
        sub_1B0D0E714(v10, 25);
        return v6;
      }
      sqlite3_log(21, "API called with finalized prepared statement", a3);
    }
    else
    {
      sqlite3_log(21, "API called with NULL prepared statement", a3);
    }
    return 25;
  }
  v5 = (a2 - 1);
  v6 = sub_1B0CC3F2C((uint64_t)a1, a2 - 1);
  if (!v6)
  {
    v7 = *((void *)a1 + 16) + (v5 << 6);
    v8 = (_WORD *)(v7 + 20);
    if ((*(_WORD *)(v7 + 20) & 0x9000) != 0) {
      sub_1B0D18138((int *)v7);
    }
    else {
      *v8 = 1;
    }
    *(double *)v7 = a3;
    *v8 = 8;
    v9 = *(void *)(*(void *)a1 + 24);
    if (v9) {
      xmmword_1EB21CA50(v9);
    }
    return 0;
  }
  return v6;
}

void sub_1B0CD0410(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (sub_1B0CB6238(*a3, a3[1], *(void *)(*(void *)(*(void *)(a1 + 24) + 136) + 40 * *(int *)(a1 + 32) - 24)))
  {
    v5 = (sqlite3_value *)*a3;
    sqlite3_result_value((sqlite3_context *)a1, v5);
  }
}

int sqlite3_value_int(sqlite3_value *a1)
{
  if (!a1)
  {
    sub_1B0CE1978(89717);
LABEL_5:
    LODWORD(v2) = 0;
    return v2;
  }
  __int16 v1 = *((_WORD *)a1 + 10);
  if ((v1 & 0x24) != 0) {
    return *(void *)a1;
  }
  if ((v1 & 8) == 0)
  {
    if ((v1 & 0x12) != 0 && *((void *)a1 + 1))
    {
      LODWORD(v2) = sub_1B0D186C0((uint64_t)a1);
      return v2;
    }
    goto LABEL_5;
  }
  double v3 = *(double *)a1;
  if (*(double *)a1 >= -9.22337204e18)
  {
    if (v3 <= 9.22337204e18) {
      return (uint64_t)v3;
    }
    else {
      LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = 0;
  }
  return v2;
}

void sqlite3_result_int(sqlite3_context *a1, int a2)
{
  if (a1)
  {
    uint64_t v2 = *(void *)a1;
    if ((*(_WORD *)(v2 + 20) & 0x9000) != 0)
    {
      sub_1B0D18980(v2, a2);
    }
    else
    {
      *(void *)uint64_t v2 = a2;
      *(_WORD *)(v2 + 20) = 4;
    }
  }
  else
  {
    sub_1B0CE1978(97431);
  }
}

uint64_t sub_1B0CD0568(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  if (*(void *)(a1 + 168)) {
    uint64_t v8 = *(void *)(a1 + 168);
  }
  else {
    uint64_t v8 = a1;
  }
  uint64_t v9 = *(void *)a1;
  if (*(void *)a1)
  {
    uint64_t v10 = sub_1B0D05DC0(*(void *)a1, 0x28uLL);
    if (!v10) {
      return v10;
    }
  }
  else
  {
    uint64_t v10 = sub_1B0C7FC94(40);
    if (!v10) {
      return v10;
    }
  }
  long long v80 = 0u;
  memset(v81, 0, sizeof(v81));
  memset(v79, 0, sizeof(v79));
  *(void *)(v10 + 32) = 0;
  *(_OWORD *)uint64_t v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(void *)(v10 + 8) = *(void *)(v8 + 184);
  *(void *)(v8 + 184) = v10;
  if (v9)
  {
    uint64_t v18 = sub_1B0D05DC0(v9, 0x30uLL);
    if (v18) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v18 = sub_1B0C7FC94(48);
    if (v18)
    {
LABEL_10:
      long long v19 = 0uLL;
      *(_OWORD *)(v18 + 16) = 0u;
      *(_OWORD *)(v18 + 32) = 0u;
      *(_OWORD *)uint64_t v18 = 0u;
      *(void *)(v10 + 16) = v18;
      uint64_t v20 = *(void *)(v8 + 16);
      *(void *)(v18 + 40) = *(void *)(v20 + 376);
      *(void *)(v20 + 376) = v18;
      *(void *)uint64_t v10 = a2;
      *(_DWORD *)(v10 + 24) = a4;
      *(void *)(v10 + 28) = -1;
      memset((char *)v79 + 8, 0, 216);
      memset((char *)v81 + 8, 0, 136);
      *(void *)&long long v80 = *(void *)(v9 + 344);
      *(void *)(v9 + 344) = v79;
      *(void *)&v79[0] = v9;
      if (*(unsigned char *)(v9 + 103))
      {
        sub_1B0CEF2BC((uint64_t)v79, "out of memory", (uint64_t)v12, v13, v14, v15, v16, v17, v72);
        long long v19 = 0uLL;
        v21 = *(uint64_t **)&v79[1];
      }
      else
      {
        v21 = 0;
      }
      long long v85 = v19;
      long long v84 = v19;
      long long v83 = v19;
      v82 = v79;
      *((void *)&v79[10] + 1) = v8;
      *(void *)&v79[11] = a3;
      uint64_t v22 = *a2;
      *(void *)&v81[6] = *a2;
      BYTE10(v79[13]) = *((unsigned char *)a2 + 16);
      WORD4(v79[13]) = *(_WORD *)(a1 + 216);
      BYTE5(v79[2]) = *(unsigned char *)(a1 + 37);
      v23 = v21;
      if (v21)
      {
        if (!v22) {
          goto LABEL_30;
        }
      }
      else
      {
        uint64_t v24 = sub_1B0CEF480((uint64_t *)v79, v11, (uint64_t)v12, v13, v14, v15, v16, v17);
        if (!v24)
        {
          if (*(_DWORD *)(a1 + 48))
          {
            if (*((void *)&v79[0] + 1)) {
              sub_1B0D05C10(*(void **)&v79[0], *((void **)&v79[0] + 1));
            }
          }
          else
          {
            *(void *)(a1 + 8) = *((void *)&v79[0] + 1);
            int v71 = DWORD2(v79[1]);
            *(_DWORD *)(a1 + 48) = v79[3];
            *(_DWORD *)(a1 + 24) = v71;
          }
          goto LABEL_72;
        }
        v23 = (uint64_t *)v24;
        uint64_t v22 = *a2;
        if (!*a2)
        {
LABEL_30:
          v30 = (unsigned __int8 *)a2[3];
          uint64_t v77 = v8;
          uint64_t v78 = a1;
          uint64_t v75 = (uint64_t)v23;
          uint64_t v76 = v18;
          if (v30)
          {
            v31 = sub_1B0CAE048(v9, v30, 0, 0);
            if (*(unsigned char *)(v9 + 103)
              || sub_1B0D373A0((uint64_t)&v82, (uint64_t)v31, (uint64_t)v12, v13, v14, v15, v16, v17))
            {
              int v74 = 0;
              if (!v31) {
                goto LABEL_36;
              }
              goto LABEL_34;
            }
            int v70 = --DWORD1(v79[4]);
            sub_1B0CC2204((uint64_t)v79, (unsigned __int8 **)v31, DWORD1(v79[4]), 16, v14, v15, v16, v17);
            int v74 = v70;
            if (v31) {
LABEL_34:
            }
              sub_1B0D1DF88((void *)v9, (unsigned __int8 *)v31);
          }
          else
          {
            int v74 = 0;
          }
LABEL_36:
          v73 = a2;
          v32 = (unsigned __int8 *)a2[7];
          if (v32)
          {
            uint64_t v33 = *(void *)&v79[1];
            v34 = *(void **)&v79[0];
            do
            {
              unsigned __int8 v35 = a4;
              if (a4 == 11) {
                unsigned __int8 v35 = v32[1];
              }
              BYTE12(v79[13]) = v35;
              if (*((void *)v32 + 9))
              {
                v36 = sub_1B0C904AC((uint64_t)v34, "-- %s", (uint64_t)v12, v13, v14, v15, v16, v17, *((void *)v32 + 9));
                sub_1B0CCB908((uint64_t *)v33, 181, 0x7FFFFFFFLL, 1, 0, (uint64_t)v36, 4294967290, v37);
              }
              int v38 = *v32;
              switch(v38)
              {
                case 127:
                  v43 = sub_1B0D57668((uint64_t *)v79, (uint64_t)v32);
                  uint64_t v44 = sub_1B0CB0DF4((uint64_t)v34, *((void *)v32 + 2), 0);
                  uint64_t v45 = sub_1B0CB0878((uint64_t)v34, *((int **)v32 + 7));
                  uint64_t v46 = BYTE12(v79[13]);
                  uint64_t v47 = sub_1B0D57880(v34, *((void *)v32 + 8));
                  sub_1B0CB6EBC(v79, v43, v44, v45, v46, v47);
                  break;
                case 128:
                  v51 = sub_1B0D57668((uint64_t *)v79, (uint64_t)v32);
                  v52 = (unsigned __int8 *)*((void *)v32 + 5);
                  if (v52) {
                    v53 = (unsigned __int8 *)sub_1B0CAE048((uint64_t)v34, v52, 0, 0);
                  }
                  else {
                    v53 = 0;
                  }
                  sub_1B0CCDA04(v79, (uint64_t)v51, v53, 0, 0, v48, v49, v50);
                  break;
                case 129:
                  v39 = sub_1B0D57668((uint64_t *)v79, (uint64_t)v32);
                  v40 = (unsigned int *)sub_1B0CAE478((uint64_t)v34, *((void **)v32 + 6), 0);
                  v41 = (unsigned __int8 *)*((void *)v32 + 5);
                  if (v41) {
                    v42 = sub_1B0CAE048((uint64_t)v34, v41, 0, 0);
                  }
                  else {
                    v42 = 0;
                  }
                  sub_1B0CCBA4C((uint64_t)v79, (uint64_t)v39, v40, (uint64_t)v42, BYTE12(v79[13]), 0, 0, 0);
                  break;
                default:
                  uint64_t v87 = 0;
                  memset(v86, 0, sizeof(v86));
                  uint64_t v54 = sub_1B0CB0DF4((uint64_t)v34, *((void *)v32 + 2), 0);
                  LOBYTE(v86[0]) = 4;
                  *((void *)&v86[1] + 1) = 0;
                  *(_OWORD *)((char *)v86 + 4) = 0uLL;
                  sub_1B0C9110C((void **)v79, v54, (uint64_t)v86, v55, v56, v57, v58, v59);
                  if (v54) {
                    sub_1B0CA0FA8(v34, v54, 1);
                  }
                  goto LABEL_39;
              }
              int v60 = *(_DWORD *)(v33 + 144);
              if (*(_DWORD *)(v33 + 148) <= v60)
              {
                sub_1B0D25510(v33, 131, 0, 0, 0, v15, v16, v17);
              }
              else
              {
                *(_DWORD *)(v33 + 144) = v60 + 1;
                uint64_t v61 = *(void *)(v33 + 136) + 40 * v60;
                *(unsigned char *)uint64_t v61 = -125;
                *(_OWORD *)(v61 + 1) = 0u;
                *(_OWORD *)(v61 + 17) = 0u;
                *(void *)(v61 + 32) = 0;
              }
LABEL_39:
              v32 = (unsigned __int8 *)*((void *)v32 + 10);
            }
            while (v32);
          }
          if (v74)
          {
            uint64_t v62 = *(void *)(v75 + 24);
            int v63 = ~v74;
            if (*(_DWORD *)(v62 + 68) + *(_DWORD *)(v62 + 72) < 0) {
              sub_1B0D34EC8(v62, v75, v63);
            }
            else {
              *(_DWORD *)(*(void *)(v62 + 80) + 4 * v63) = *(_DWORD *)(v75 + 144);
            }
          }
          int v64 = *(_DWORD *)(v75 + 144);
          if (*(_DWORD *)(v75 + 148) <= v64)
          {
            sub_1B0D25510(v75, 70, 0, 0, 0, v15, v16, v17);
          }
          else
          {
            *(_DWORD *)(v75 + 144) = v64 + 1;
            uint64_t v65 = *(void *)(v75 + 136) + 40 * v64;
            *(unsigned char *)uint64_t v65 = 70;
            *(_OWORD *)(v65 + 1) = 0u;
            *(_OWORD *)(v65 + 17) = 0u;
            *(void *)(v65 + 32) = 0;
          }
          if (*(_DWORD *)(v78 + 48))
          {
            if (!*((void *)&v79[0] + 1)) {
              goto LABEL_71;
            }
            sub_1B0D05C10(*(void **)&v79[0], *((void **)&v79[0] + 1));
            if (*(_DWORD *)(v78 + 48)) {
              goto LABEL_71;
            }
          }
          else
          {
            *(void *)(v78 + 8) = *((void *)&v79[0] + 1);
            int v68 = v79[3];
            int v69 = DWORD2(v79[1]);
            *(_DWORD *)(v78 + 48) = v79[3];
            *(_DWORD *)(v78 + 24) = v69;
            if (v68) {
              goto LABEL_71;
            }
          }
          uint64_t v66 = *(void *)(v75 + 136);
          sub_1B0D25990((void *)v75, (int *)(v77 + 136));
          *(_DWORD *)(v76 + 8) = *(_DWORD *)(v75 + 144);
          *(void *)(v75 + 136) = 0;
          *(void *)uint64_t v76 = v66;
LABEL_71:
          *(int32x2_t *)(v76 + 12) = vrev64_s32(*(int32x2_t *)((char *)&v79[3] + 4));
          *(void *)(v76 + 32) = v73;
          *(void *)(v10 + 28) = *(void *)&v79[13];
          sub_1B0CE20DC(v75);
LABEL_72:
          sub_1B0CEF890(v79);
          return v10;
        }
      }
      v12 = (char *)sub_1B0C904AC(v9, "-- TRIGGER %s", (uint64_t)v12, v13, v14, v15, v16, v17, v22);
      if (*(unsigned char *)(*v23 + 103))
      {
        if (v12) {
          sub_1B0D15C20((void *)*v23, v12);
        }
      }
      else
      {
        uint64_t v25 = *((int *)v23 + 36) - 1;
        uint64_t v26 = v23[17];
        uint64_t v27 = v26 + 40 * v25;
        int v29 = *(unsigned __int8 *)(v27 + 1);
        v28 = (unsigned char *)(v27 + 1);
        if (v29)
        {
          sub_1B0D257F4(v23, v26 + 40 * v25, v12, 0xFFFFFFFA);
        }
        else if (v12)
        {
          *(void *)(v26 + 40 * v25 + 16) = v12;
          unsigned char *v28 = -6;
        }
      }
      goto LABEL_30;
    }
  }
  *(void *)(v10 + 16) = 0;
  return 0;
}

uint64_t sub_1B0CD0C78(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = a5;
  uint64_t v14 = *(void *)(a1 + 16);
  if (!v14)
  {
    if (!*(void *)(a1 + 168) && (*(unsigned char *)(*(void *)a1 + 96) & 8) == 0) {
      *(unsigned char *)(a1 + 35) = 1;
    }
    uint64_t v14 = sub_1B0CEF480((uint64_t *)a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  }
  uint64_t v15 = *(void *)(a1 + 168);
  if (!v15) {
    uint64_t v15 = a1;
  }
  uint64_t result = *(void *)(v15 + 184);
  if (result)
  {
    while (*(uint64_t **)result != a2 || *(_DWORD *)(result + 24) != v9)
    {
      uint64_t result = *(void *)(result + 8);
      if (!result) {
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    uint64_t result = sub_1B0CD0568(a1, a2, a3, v9);
    *(_DWORD *)(*(void *)a1 + 84) = -1;
    if (!result) {
      return result;
    }
  }
  if (*a2) {
    __int16 v17 = (*(unsigned char *)(*(void *)a1 + 49) & 0x20) == 0;
  }
  else {
    __int16 v17 = 0;
  }
  uint64_t v18 = (*(_DWORD *)(a1 + 56) + 1);
  *(_DWORD *)(a1 + 56) = v18;
  uint64_t result = sub_1B0CCB908((uint64_t *)v14, 48, a4, a6, v18, *(void *)(result + 16), 4294967292, a8);
  int v19 = *(_DWORD *)(v14 + 144);
  BOOL v20 = __OFSUB__(v19, 1);
  int v21 = v19 - 1;
  if (v21 < 0 == v20) {
    *(_WORD *)(*(void *)(v14 + 136) + 40 * v21 + 2) = v17;
  }
  return result;
}

int sqlite3_bind_null(sqlite3_stmt *a1, int a2)
{
  if (a2 <= 0)
  {
    if (a1)
    {
      uint64_t v5 = *(void *)a1;
      if (*(void *)a1)
      {
        int v3 = 25;
        *(_DWORD *)(v5 + 80) = 25;
        sub_1B0D0E714(v5, 25);
        return v3;
      }
      sqlite3_log(21, "API called with finalized prepared statement");
    }
    else
    {
      sqlite3_log(21, "API called with NULL prepared statement");
    }
    return 25;
  }
  int v3 = sub_1B0CC3F2C((uint64_t)a1, a2 - 1);
  if (!v3)
  {
    uint64_t v4 = *(void *)(*(void *)a1 + 24);
    if (v4) {
      xmmword_1EB21CA50(v4);
    }
    return 0;
  }
  return v3;
}

void sub_1B0CD0E54(uint64_t a1, int a2, uint64_t *a3)
{
  if (!a1)
  {
    sub_1B0CE1978(97953);
    uint64_t v6 = 0;
    goto LABEL_6;
  }
  if (!*(void *)a1)
  {
    sub_1B0CE1978(97953);
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7) {
      goto LABEL_8;
    }
LABEL_6:
    sub_1B0CE1978(97932);
    uint64_t v8 = 0;
    goto LABEL_9;
  }
  uint64_t v6 = *(void *)(*(void *)a1 + 24);
  uint64_t v7 = *(void *)(a1 + 8);
  if (!v7) {
    goto LABEL_6;
  }
LABEL_8:
  uint64_t v8 = *(unsigned __int8 **)(v7 + 8);
LABEL_9:
  int v41 = 0;
  uint64_t v9 = *a3;
  if (!*a3)
  {
    sub_1B0CE1978(91138);
LABEL_17:
    int v11 = 0;
    goto LABEL_18;
  }
  __int16 v10 = *(_WORD *)(v9 + 20);
  if ((v10 & 2) != 0 && *(unsigned char *)(v9 + 22) == 1)
  {
    int v11 = *(_DWORD *)(v9 + 16);
    goto LABEL_18;
  }
  if ((v10 & 0x10) == 0)
  {
    if ((v10 & 1) == 0)
    {
      int v11 = sub_1B0D18228(v9, 1);
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  int v11 = *(_DWORD *)(v9 + 16);
  if ((*(_WORD *)(v9 + 20) & 0x400) != 0) {
    v11 += *(_DWORD *)v9;
  }
LABEL_18:
  if (v11 > *(_DWORD *)(v6 + 168))
  {
    if (a1)
    {
      *(_DWORD *)(a1 + 36) = 1;
      v12 = "LIKE or GLOB pattern too complex";
LABEL_21:
      uint64_t v13 = *(void *)a1;
      sub_1B0C79BBC(v13, v12, -1, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
      return;
    }
LABEL_68:
    sub_1B0CE1978(97407);
    return;
  }
  if (a2 == 3)
  {
    uint64_t v14 = a3[2];
    if (!v14) {
      return;
    }
    int v15 = *(unsigned __int16 *)(v14 + 20);
    if ((~v15 & 0x202) != 0 || *(unsigned char *)(v14 + 22) != 1)
    {
      if (v15) {
        return;
      }
      uint64_t v16 = (unsigned __int8 *)sub_1B0D18254((int *)v14, 1);
      if (!v16) {
        return;
      }
    }
    else
    {
      uint64_t v16 = *(unsigned __int8 **)(v14 + 8);
      if (!v16) {
        return;
      }
    }
    if (v16 == (unsigned __int8 *)-1) {
      goto LABEL_66;
    }
    uint64_t v17 = *v16;
    if (!*v16) {
      goto LABEL_66;
    }
    int v27 = 0;
    unsigned int v28 = *v16;
    int v29 = v16;
    do
    {
      int v32 = v27;
      if (v28 < 0xC0)
      {
        unsigned int v30 = *++v29;
        unsigned int v28 = v30;
      }
      else
      {
        do
        {
          unsigned int v33 = *++v29;
          unsigned int v28 = v33;
        }
        while ((v33 & 0xC0) == 0x80);
      }
      ++v27;
      if (v28) {
        BOOL v31 = v29 + 1 == 0;
      }
      else {
        BOOL v31 = 1;
      }
    }
    while (!v31);
    if (v32)
    {
LABEL_66:
      if (a1)
      {
        *(_DWORD *)(a1 + 36) = 1;
        v12 = "ESCAPE expression must be a single character";
        goto LABEL_21;
      }
      goto LABEL_68;
    }
    if (v17 >= 0xC0)
    {
      unsigned int v34 = byte_1B0DE211A[(v17 - 192)];
      unsigned __int8 v35 = v16[1];
      if ((v35 & 0xC0) == 0x80)
      {
        v36 = v16 + 2;
        do
        {
          unsigned int v34 = v35 & 0x3F | (v34 << 6);
          unsigned __int8 v37 = *v36++;
          unsigned __int8 v35 = v37;
        }
        while ((v37 & 0xC0) == 0x80);
      }
      if (v34 >> 11 == 27 || v34 < 0x80 || v34 >> 1 == 0x7FFF) {
        uint64_t v17 = 65533;
      }
      else {
        uint64_t v17 = v34;
      }
    }
    if (v17 == *v8 || v17 == v8[1])
    {
      int v40 = *(_DWORD *)v8;
      int v41 = v40;
      if (v17 == v40) {
        LOBYTE(v41) = 0;
      }
      if (v17 == BYTE1(v40)) {
        BYTE1(v41) = 0;
      }
      uint64_t v8 = (unsigned __int8 *)&v41;
    }
  }
  else
  {
    uint64_t v17 = v8[2];
  }
  uint64_t v18 = *a3;
  if (!*a3) {
    goto LABEL_41;
  }
  int v19 = *(unsigned __int16 *)(v18 + 20);
  if ((~v19 & 0x202) != 0 || *(unsigned char *)(v18 + 22) != 1)
  {
    if ((v19 & 1) == 0)
    {
      BOOL v20 = (unsigned __int8 *)sub_1B0D18254((int *)v18, 1);
      uint64_t v21 = a3[1];
      if (!v21) {
        return;
      }
      goto LABEL_42;
    }
LABEL_41:
    BOOL v20 = 0;
    uint64_t v21 = a3[1];
    if (!v21) {
      return;
    }
    goto LABEL_42;
  }
  BOOL v20 = *(unsigned __int8 **)(v18 + 8);
  uint64_t v21 = a3[1];
  if (!v21) {
    return;
  }
LABEL_42:
  int v22 = *(unsigned __int16 *)(v21 + 20);
  if ((~v22 & 0x202) != 0 || *(unsigned char *)(v21 + 22) != 1)
  {
    if (v22) {
      return;
    }
    v23 = (const char *)sub_1B0D18254((int *)v21, 1);
  }
  else
  {
    v23 = *(const char **)(v21 + 8);
  }
  if (v23 && v20)
  {
    int v24 = sub_1B0CD1228(v20, v23, v8, v17);
    if (a1)
    {
      BOOL v25 = v24 == 0;
      uint64_t v26 = *(void *)a1;
      if ((*(_WORD *)(*(void *)a1 + 20) & 0x9000) != 0)
      {
        sub_1B0D18980(v26, v25);
      }
      else
      {
        *(void *)uint64_t v26 = v25;
        *(_WORD *)(v26 + 20) = 4;
      }
    }
    else
    {
      sub_1B0CE1978(97431);
    }
  }
}

uint64_t sub_1B0CD1228(unsigned __int8 *a1, const char *a2, unsigned __int8 *a3, uint64_t a4)
{
  v103 = a1;
  if (!a1 || (uint64_t v4 = a2) == 0)
  {
    sub_1B0CE1978(135666);
    return 1;
  }
  uint64_t v7 = 0;
  int v8 = a3[1];
  int v9 = *a3;
  int v10 = a3[3];
  while (1)
  {
    int v12 = (char)*a1;
    int v11 = a1 + 1;
    unsigned int v13 = v12;
    uint64_t v14 = v11;
    v103 = v11;
    if ((v12 & 0x80000000) == 0) {
      break;
    }
    if (v13 < 0xC0) {
      goto LABEL_14;
    }
    unsigned int v13 = byte_1B0DE211A[v13 - 192];
    unsigned __int8 v15 = *v11;
    if ((*v11 & 0xC0) == 0x80)
    {
      do
      {
        unsigned __int8 v16 = *++v14;
        unsigned int v13 = v15 & 0x3F | (v13 << 6);
        unsigned __int8 v15 = v16;
      }
      while ((v16 & 0xC0) == 0x80);
      v103 = v14;
    }
    unsigned int v17 = 65533;
    if (v13 >> 1 != 0x7FFF && v13 >= 0x80 && (v13 & 0xFFFFF800) != 0xD800) {
      goto LABEL_14;
    }
LABEL_16:
    if (v17 == a4)
    {
      if (a3[2])
      {
        unsigned int v19 = *(unsigned __int8 *)v4++;
        unsigned int v18 = v19;
        unsigned int v20 = v19 - 192;
        if (v19 < 0xC0)
        {
          if (!v18) {
            return 1;
          }
        }
        else
        {
          unsigned int v18 = byte_1B0DE211A[v20];
          char v21 = *v4;
          if ((*v4 & 0xC0) == 0x80)
          {
            do
            {
              char v22 = *++v4;
              unsigned int v18 = v21 & 0x3F | (v18 << 6);
              char v21 = v22;
            }
            while ((v22 & 0xC0) == 0x80);
          }
          if (v18 >> 11 == 27 || v18 < 0x80 || v18 >> 1 == 0x7FFF) {
            unsigned int v18 = 65533;
          }
        }
        a1 = v14 + 1;
        v103 = v14 + 1;
        unsigned int v25 = *v14;
        if (v25 >= 0xC0)
        {
          unsigned int v26 = byte_1B0DE211A[v25 - 192];
          unsigned __int8 v27 = *a1;
          if ((*a1 & 0xC0) == 0x80)
          {
            do
            {
              unsigned __int8 v28 = *++a1;
              unsigned int v26 = v27 & 0x3F | (v26 << 6);
              unsigned __int8 v27 = v28;
            }
            while ((v28 & 0xC0) == 0x80);
            v103 = a1;
          }
          int v29 = 0;
          int v30 = 0;
          if (v26 >> 11 == 27 || v26 < 0x80 || v26 >> 1 == 0x7FFF) {
            unsigned int v25 = 65533;
          }
          else {
            unsigned int v25 = v26;
          }
          goto LABEL_76;
        }
        if (v25 == 94)
        {
          a1 = v14 + 2;
          v103 = v14 + 2;
          unsigned int v25 = v14[1];
          if (v25 >= 0xC0)
          {
            unsigned int v33 = byte_1B0DE211A[v25 - 192];
            unsigned __int8 v34 = *a1;
            if ((*a1 & 0xC0) == 0x80)
            {
              do
              {
                unsigned __int8 v35 = *++a1;
                unsigned int v33 = v34 & 0x3F | (v33 << 6);
                unsigned __int8 v34 = v35;
              }
              while ((v35 & 0xC0) == 0x80);
              v103 = a1;
            }
            int v30 = 0;
            if (v33 >> 11 == 27 || v33 < 0x80 || v33 >> 1 == 0x7FFF) {
              unsigned int v25 = 65533;
            }
            else {
              unsigned int v25 = v33;
            }
            int v29 = 1;
            goto LABEL_76;
          }
          int v29 = 1;
          if (v25 != 93)
          {
LABEL_75:
            int v30 = 0;
            goto LABEL_76;
          }
        }
        else
        {
          int v29 = 0;
          if (v25 != 93) {
            goto LABEL_75;
          }
        }
        int v30 = v18 == 93;
        int v38 = a1 + 1;
        v103 = a1 + 1;
        unsigned int v25 = *a1;
        if (v25 >= 0xC0)
        {
          unsigned int v39 = byte_1B0DE211A[v25 - 192];
          unsigned __int8 v40 = *v38;
          if ((*v38 & 0xC0) == 0x80)
          {
            do
            {
              unsigned __int8 v41 = *++v38;
              unsigned int v39 = v40 & 0x3F | (v39 << 6);
              unsigned __int8 v40 = v41;
            }
            while ((v41 & 0xC0) == 0x80);
            v103 = v38;
          }
          if (v39 >> 11 == 27 || v39 < 0x80 || v39 >> 1 == 0x7FFF) {
            unsigned int v25 = 65533;
          }
          else {
            unsigned int v25 = v39;
          }
        }
        a1 = v38;
LABEL_76:
        unsigned int v44 = 0;
LABEL_85:
        switch(v25)
        {
          case 0x2Du:
            unsigned int v47 = *a1;
            if (v47 == 93 || v44 == 0 || v47 == 0) {
              goto LABEL_97;
            }
            ++a1;
            if (v47 >= 0xC0)
            {
              unsigned int v54 = byte_1B0DE211A[v47 - 192];
              unsigned __int8 v55 = *a1;
              if ((*a1 & 0xC0) == 0x80)
              {
                do
                {
                  unsigned __int8 v56 = *++a1;
                  unsigned int v54 = v55 & 0x3F | (v54 << 6);
                  unsigned __int8 v55 = v56;
                }
                while ((v56 & 0xC0) == 0x80);
              }
              if (v54 >> 11 == 27 || v54 < 0x80 || v54 >> 1 == 0x7FFF) {
                unsigned int v47 = 65533;
              }
              else {
                unsigned int v47 = v54;
              }
            }
            BOOL v59 = v18 <= v47 && v18 >= v44;
            unsigned int v44 = 0;
            if (v59) {
              int v30 = 1;
            }
            break;
          case 0u:
            return 1;
          case 0x5Du:
            v103 = a1;
            uint64_t v90 = 1;
            if (v30 == v29) {
              return v90;
            }
            continue;
          default:
LABEL_97:
            if (v18 == v25) {
              int v30 = 1;
            }
            unsigned int v44 = v25;
            break;
        }
        unsigned int v50 = *a1++;
        unsigned int v25 = v50;
        unsigned int v51 = v50 - 192;
        if (v50 >= 0xC0)
        {
          unsigned int v25 = byte_1B0DE211A[v51];
          unsigned __int8 v52 = *a1;
          if ((*a1 & 0xC0) == 0x80)
          {
            do
            {
              unsigned __int8 v53 = *++a1;
              unsigned int v25 = v52 & 0x3F | (v25 << 6);
              unsigned __int8 v52 = v53;
            }
            while ((v53 & 0xC0) == 0x80);
          }
          if (v25 >> 11 == 27 || v25 < 0x80 || v25 >> 1 == 0x7FFF) {
            unsigned int v25 = 65533;
          }
        }
        goto LABEL_85;
      }
      a1 = v14 + 1;
      v103 = v14 + 1;
      unsigned int v17 = *v14;
      if (v17 < 0xC0)
      {
        uint64_t v7 = v14 + 1;
        if (!*v14) {
          return 1;
        }
      }
      else
      {
        unsigned int v17 = byte_1B0DE211A[v17 - 192];
        unsigned __int8 v60 = *a1;
        if ((*a1 & 0xC0) == 0x80)
        {
          do
          {
            unsigned __int8 v61 = *++a1;
            unsigned int v17 = v60 & 0x3F | (v17 << 6);
            unsigned __int8 v60 = v61;
          }
          while ((v61 & 0xC0) == 0x80);
          v103 = a1;
        }
        if (v17 >> 11 == 27 || v17 < 0x80 || v17 >> 1 == 0x7FFF) {
          unsigned int v17 = 65533;
        }
        uint64_t v7 = a1;
      }
    }
    else
    {
      a1 = v14;
    }
    unsigned int v65 = *(unsigned __int8 *)v4++;
    unsigned int v64 = v65;
    unsigned int v66 = v65 - 192;
    if (v65 >= 0xC0)
    {
      unsigned int v64 = byte_1B0DE211A[v66];
      char v67 = *v4;
      if ((*v4 & 0xC0) == 0x80)
      {
        do
        {
          char v68 = *++v4;
          unsigned int v64 = v67 & 0x3F | (v64 << 6);
          char v67 = v68;
        }
        while ((v68 & 0xC0) == 0x80);
      }
      if (v64 >> 11 == 27 || v64 < 0x80 || v64 >> 1 == 0x7FFF) {
        unsigned int v64 = 65533;
      }
    }
    if (v17 != v64
      && (!v10 || (v64 | v17) > 0x7F || byte_1B0DE1758[v17] != byte_1B0DE1758[v64]))
    {
      if (v17 != v8) {
        return 1;
      }
      uint64_t v90 = 1;
      if (!v64 || a1 == v7) {
        return v90;
      }
    }
  }
  if (!v13) {
    return *v4 != 0;
  }
LABEL_14:
  if (v13 != v9)
  {
    unsigned int v17 = v13;
    goto LABEL_16;
  }
  while (1)
  {
    unsigned int v73 = *v14++;
    unsigned int v72 = v73;
    v103 = v14;
    unsigned int v74 = v73 - 192;
    if (v73 >= 0xC0)
    {
      unsigned int v75 = byte_1B0DE211A[v74];
      unsigned __int8 v76 = *v14;
      if ((*v14 & 0xC0) == 0x80)
      {
        do
        {
          unsigned __int8 v77 = *++v14;
          unsigned int v75 = v76 & 0x3F | (v75 << 6);
          unsigned __int8 v76 = v77;
        }
        while ((v77 & 0xC0) == 0x80);
        v103 = v14;
      }
      if (v75 >> 11 == 27 || v75 < 0x80 || v75 >> 1 == 0x7FFF) {
        unsigned int v72 = 65533;
      }
      else {
        unsigned int v72 = v75;
      }
    }
    BOOL v80 = v8 && v72 == v8;
    BOOL v81 = v80;
    if (v72 != v9 && !v81) {
      break;
    }
    if (v72 == v8)
    {
      unsigned int v84 = *(unsigned __int8 *)v4++;
      unsigned int v83 = v84;
      if (v84 < 0xC0)
      {
        uint64_t v90 = 2;
        if (!v83) {
          return v90;
        }
      }
      else
      {
        for (char i = *v4; (i & 0xC0) == 0x80; char i = v86)
          char v86 = *++v4;
      }
    }
  }
  if (!v72) {
    return 0;
  }
  if (v72 == a4)
  {
    if (a3[2])
    {
      if (*v4)
      {
        uint64_t v87 = v14 - 1;
        while (1)
        {
          uint64_t v88 = sub_1B0CD1228(v87, v4, a3, a4);
          if (v88 != 1) {
            break;
          }
          if (*(unsigned __int8 *)v4 < 0xC0u)
          {
            ++v4;
          }
          else
          {
            do
              char v89 = *++v4;
            while ((v89 & 0xC0) == 0x80);
          }
          uint64_t v90 = 2;
          if (!*v4) {
            return v90;
          }
        }
        return v88;
      }
      return 2;
    }
    unsigned int v72 = sub_1B0D26F5C(&v103);
    if (!v72) {
      return 2;
    }
  }
  if (v72 < 0x80)
  {
    if (v10)
    {
      uint64_t v91 = v72;
      LOBYTE(v72) = v72 & (~byte_1B0DE196D[v72] | 0xDF);
      unsigned __int8 v92 = byte_1B0DE1758[v91];
      __charset[2] = 0;
    }
    else
    {
      unsigned __int8 v92 = 0;
    }
    __charset[0] = v72;
    __charset[1] = v92;
    v100 = v103;
    while (1)
    {
      v101 = &v4[strcspn(v4, __charset)];
      if (!*v101) {
        break;
      }
      uint64_t v4 = v101 + 1;
      uint64_t v88 = sub_1B0CD1228(v100, v101 + 1, a3, a4);
      if (v88 != 1) {
        return v88;
      }
    }
    return 2;
  }
  v93 = v103;
  while (1)
  {
    int v94 = *v4++;
    unsigned int v95 = v94;
    if (v94 < 0)
    {
      if (v95 >= 0xC0)
      {
        unsigned int v95 = byte_1B0DE211A[v95 - 192];
        char v96 = *v4;
        if ((*v4 & 0xC0) == 0x80)
        {
          do
          {
            char v97 = *++v4;
            unsigned int v95 = v96 & 0x3F | (v95 << 6);
            char v96 = v97;
          }
          while ((v97 & 0xC0) == 0x80);
        }
        if (v95 >> 11 == 27 || v95 < 0x80 || v95 >> 1 == 0x7FFF) {
          unsigned int v95 = 65533;
        }
      }
    }
    else if (!v95)
    {
      return 2;
    }
    if (v95 == v72)
    {
      uint64_t v90 = sub_1B0CD1228(v93, v4, a3, a4);
      if (v90 != 1) {
        break;
      }
    }
  }
  return v90;
}

int sqlite3_bind_blob(sqlite3_stmt *a1, int a2, const void *a3, int n, void (__cdecl *a5)(void *))
{
  if (n < 0) {
    return sub_1B0CE1978(98740);
  }
  else {
    return sub_1B0CC3DB8((uint64_t *)a1, a2, (char *)a3, n, (uint64_t (*)(uint64_t))a5, 0);
  }
}

sqlite3_stmt *__cdecl sqlite3_next_stmt(sqlite3 *pDb, sqlite3_stmt *pStmt)
{
  if (!pDb)
  {
    uint64_t v4 = "NULL";
    goto LABEL_11;
  }
  int v3 = *((unsigned __int8 *)pDb + 113);
  if (v3 == 186)
  {
LABEL_5:
    uint64_t v4 = "unopened";
LABEL_11:
    sqlite3_log(21, "API call with %s database connection pointer", v4);
    int v6 = 99162;
    goto LABEL_12;
  }
  if (v3 != 118)
  {
    if (v3 != 109)
    {
      uint64_t v4 = "invalid";
      goto LABEL_11;
    }
    goto LABEL_5;
  }
  if (pStmt && *(sqlite3 **)pStmt != pDb)
  {
    int v6 = 99167;
LABEL_12:
    sub_1B0CE1978(v6);
    return 0;
  }
  uint64_t v9 = *((void *)pDb + 3);
  if (v9)
  {
    xmmword_1EB21CA40(v9);
    uint64_t v10 = *((void *)pDb + 3);
    int v11 = (sqlite3_stmt **)((char *)pDb + 8);
    if (pStmt) {
      int v11 = (sqlite3_stmt **)((char *)pStmt + 16);
    }
    uint64_t v7 = *v11;
    if (v10) {
      xmmword_1EB21CA50(v10);
    }
  }
  else
  {
    int v12 = (sqlite3_stmt **)((char *)pDb + 8);
    if (pStmt) {
      int v12 = (sqlite3_stmt **)((char *)pStmt + 16);
    }
    return *v12;
  }
  return v7;
}

int sqlite3_close(sqlite3 *a1)
{
  return sub_1B0CF369C((uint64_t)a1, 0);
}

uint64_t sub_1B0CD1B0C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_1B0D06914(a1);
  sub_1B0D078E4(a1, 0, 0);
  int v3 = *(NSObject **)(a1 + 152);
  if (v3)
  {
    *(void *)(a1 + 152) = 0;
    if ((_dispatch_is_fork_of_multithreaded_parent() & 1) == 0)
    {
      dispatch_source_cancel_and_wait();
      dispatch_release(v3);
    }
  }
  if (qword_1EB2201D0) {
    xmmword_1EB21CA40(qword_1EB2201D0);
  }
  uint64_t v4 = *(void *)(v2 + 16);
  if (v4) {
    xmmword_1EB21CA40(v4);
  }
  if (*(_DWORD *)(v2 + 28))
  {
    uint64_t v5 = *(void *)(a1 + 16);
    uint64_t v6 = *(void *)(a1 + 48);
    *(void *)(v6 + 8) = *(void *)(v5 + 40);
    *(void *)(v5 + 40) = v6;
    *(_DWORD *)(a1 + 24) = -1;
    *(void *)(a1 + 48) = 0;
  }
  uint64_t v7 = *(void *)(v2 + 16);
  if (v7) {
    xmmword_1EB21CA50(v7);
  }
  sub_1B0D06A2C(a1);
  sub_1B0CCB3C8(a1);
  if (qword_1EB2201D0) {
    xmmword_1EB21CA50(qword_1EB2201D0);
  }
  return 0;
}

uint64_t sub_1B0CD1BF8(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 32);
  BOOL v2 = __OFSUB__(v1--, 1);
  *(_DWORD *)(result + 32) = v1;
  if (!((v1 < 0) ^ v2 | (v1 == 0))) {
    return result;
  }
  uint64_t v3 = result;
  sub_1B0D79DB0(result);
  uint64_t v4 = &off_1EB21C9E8;
  if (!dword_1EB21C9C0) {
    goto LABEL_8;
  }
  if ((void)xmmword_1EB2201B0) {
    xmmword_1EB21CA40(xmmword_1EB2201B0);
  }
  qword_1EB220108 -= (int)off_1EB21C9F8(v3);
  --qword_1EB220150;
  uint64_t result = off_1EB21C9E8(v3);
  uint64_t v3 = xmmword_1EB2201B0;
  if ((void)xmmword_1EB2201B0)
  {
    uint64_t v4 = &xmmword_1EB21CA50;
LABEL_8:
    uint64_t v5 = *v4;
    return v5(v3);
  }
  return result;
}

uint64_t sub_1B0CD1CD0(uint64_t a1, unsigned int a2, unsigned int a3, char *a4, int a5)
{
  uint64_t v5 = *(void *)(a1 + 136);
  if (*(unsigned __int16 *)(a1 + 86) >= *(unsigned __int16 *)(v5 + 24))
  {
    uint64_t v14 = 81902;
    goto LABEL_5;
  }
  int v11 = *(_DWORD **)(a1 + 32);
  sub_1B0D146DC(a1);
  uint64_t v12 = *(void *)(a1 + 56);
  unsigned int v13 = *(unsigned __int16 *)(a1 + 68);
  if (v12 - *(void *)(v5 + 80) <= (unint64_t)(v11[14] - v13))
  {
    if (v13 <= a2)
    {
      uint64_t v17 = 0;
      unsigned int v18 = a2 - v13;
      if (!a3) {
        goto LABEL_45;
      }
    }
    else
    {
      if (a3 + a2 <= v13) {
        size_t v16 = a3;
      }
      else {
        size_t v16 = v13 - a2;
      }
      uint64_t v17 = sub_1B0CD2060((const void *)(v12 + a2), a4, v16, a5, *(void *)(v5 + 112));
      unsigned int v18 = 0;
      a3 -= v16;
      a4 += (int)v16;
      if (!a3) {
        goto LABEL_45;
      }
    }
    if (!v17)
    {
      int v34 = a5;
      int v19 = v11[14];
      unsigned int v20 = v19 - 4;
      uint64_t v21 = *(unsigned __int16 *)(a1 + 68);
      uint64_t v17 = bswap32(*(_DWORD *)(v12 + v21));
      unsigned int v35 = v17;
      if ((*(unsigned char *)(a1 + 1) & 4) == 0)
      {
        char v22 = *(void **)(a1 + 16);
        signed int v23 = (v19 - (int)v21 + *(_DWORD *)(a1 + 64) - 5) / v20;
        if (!v22 || (v24 = off_1EB21C9F8(v22), char v22 = *(void **)(a1 + 16), v24 < 4 * v23))
        {
          char v22 = (void *)sub_1B0C8E1B8((uint64_t)v22, 8 * v23);
          if (!v22) {
            return 7;
          }
          *(void *)(a1 + 16) = v22;
        }
        bzero(v22, 4 * v23);
        uint64_t v25 = 0;
        *(unsigned char *)(a1 + 1) |= 4u;
        if (!v17) {
          goto LABEL_45;
        }
LABEL_27:
        uint64_t v28 = 4 * v25;
        while (v17 <= v11[16])
        {
          uint64_t v29 = *(void *)(a1 + 16);
          *(_DWORD *)(v29 + v28) = v17;
          if (v18 >= v20)
          {
            unsigned int v32 = *(_DWORD *)(v29 + v28 + 4);
            if (v32)
            {
              uint64_t v17 = 0;
              unsigned int v35 = v32;
            }
            else
            {
              uint64_t v17 = sub_1B0D1E590((uint64_t)v11, v17, 0, &v35);
            }
            v18 -= v20;
          }
          else
          {
            if (a3 + v18 <= v20) {
              size_t v30 = a3;
            }
            else {
              size_t v30 = v20 - v18;
            }
            uint64_t v31 = (*(uint64_t (**)(void))(*(void *)v11 + 288))();
            if (v31)
            {
              uint64_t v17 = v31;
              a3 -= v30;
              if (!a3) {
                return v17;
              }
            }
            else
            {
              unsigned int v35 = bswap32(*MEMORY[8]);
              uint64_t v17 = sub_1B0CD2060((const void *)(MEMORY[8] + v18 + 4), a4, v30, v34, 0);
              unsigned int v18 = 0;
              a3 -= v30;
              if (!a3) {
                return v17;
              }
            }
            a4 += (int)v30;
          }
          if (!v17)
          {
            uint64_t v17 = v35;
            v28 += 4;
            if (v35) {
              continue;
            }
          }
          goto LABEL_45;
        }
        return sub_1B0D1045C(81979);
      }
      uint64_t v26 = *(void *)(a1 + 16);
      int v27 = v18 / v20;
      if (*(_DWORD *)(v26 + 4 * (v18 / v20)))
      {
        uint64_t v25 = v27;
        uint64_t v17 = *(unsigned int *)(v26 + 4 * v27);
        unsigned int v35 = v17;
        v18 %= v20;
        if (v17) {
          goto LABEL_27;
        }
      }
      else
      {
        uint64_t v25 = 0;
        if (v17) {
          goto LABEL_27;
        }
      }
    }
LABEL_45:
    if (v17 || !a3) {
      return v17;
    }
    return sub_1B0D11B5C(82064, v5);
  }
  uint64_t v14 = 81917;
LABEL_5:

  return sub_1B0D11B5C(v14, v5);
}

uint64_t sub_1B0CD2060(const void *a1, void *a2, size_t a3, int a4, uint64_t a5)
{
  int v5 = a3;
  if (!a4)
  {
    a3 = (int)a3;
    uint64_t v10 = a2;
    int v11 = a1;
LABEL_14:
    memcpy(v10, v11, a3);
    return 0;
  }
  int v8 = *(_DWORD **)(a5 + 40);
  if ((*(_WORD *)(a5 + 52) & 4) == 0 || v8[8] < *(_DWORD *)(a5 + 48))
  {
    uint64_t result = v8[12];
    if (result) {
      return result;
    }
    if (v8[46] <= v8[50])
    {
      uint64_t result = sub_1B0CBD7E0(a5);
      if (result) {
        return result;
      }
    }
    else
    {
      uint64_t result = sub_1B0D133D0(a5);
      if (result) {
        return result;
      }
    }
    goto LABEL_13;
  }
  if (!v8[32] || (uint64_t result = sub_1B0D0F4D4(a5), !result))
  {
LABEL_13:
    a3 = v5;
    uint64_t v10 = (void *)a1;
    int v11 = a2;
    goto LABEL_14;
  }
  return result;
}

void *__cdecl sqlite3_user_data(sqlite3_context *a1)
{
  if (a1)
  {
    uint64_t v1 = *((void *)a1 + 1);
    if (v1) {
      return *(void **)(v1 + 8);
    }
  }
  sub_1B0CE1978(97932);
  return 0;
}

uint64_t sub_1B0CD2158(uint64_t a1, int a2)
{
  uint64_t v2 = a1;
  uint64_t v3 = *(unsigned __int8 *)(a1 + 9);
  unint64_t v4 = *(unsigned __int16 *)(a1 + 18);
  uint64_t v5 = *(unsigned __int16 *)(a1 + 24);
  unint64_t v6 = (v4 + 2 * v5);
  uint64_t v7 = *(_DWORD **)(a1 + 72);
  int v8 = *(char **)(a1 + 80);
  LODWORD(v9) = v7[14];
  uint64_t v10 = v3 + 7;
  if (v8[v3 + 7] > a2)
  {
    int v11 = v9 - 4;
LABEL_3:
    uint64_t v37 = v3 + 7;
    int v38 = v4 + 2 * v5;
    uint64_t v36 = *(unsigned __int8 *)(a1 + 9);
    if (*(_WORD *)(a1 + 24))
    {
      int v39 = v11;
      int v12 = __rev16(*(unsigned __int16 *)&v8[v3 + 5]);
      unsigned int v13 = *(char **)(*(void *)v7 + 328);
      memcpy(v13, v8, (int)v9);
      uint64_t v2 = a1;
      unsigned __int8 v15 = v8;
      uint64_t v16 = (uint64_t)&v8[v4 + 1];
      int v17 = v9;
      while (1)
      {
        unsigned int v18 = __rev16(*(unsigned __int16 *)(v16 - 1));
        if ((int)v18 > v39) {
          break;
        }
        unsigned int v19 = (*(uint64_t (**)(uint64_t, char *))(v2 + 120))(v2, &v13[v18]);
        LODWORD(v9) = v9 - v19;
        if ((int)v9 < v12 || (int)(v18 + v19) > v17)
        {
          uint64_t v25 = 78521;
          uint64_t v26 = a1;
          goto LABEL_25;
        }
        *(_WORD *)(v16 - 1) = bswap32(v9) >> 16;
        memcpy(&v15[v9], &v13[v18], v19);
        v16 += 2;
        --v5;
        uint64_t v2 = a1;
        if (!v5) {
          goto LABEL_19;
        }
      }
      uint64_t v25 = 78515;
      goto LABEL_24;
    }
    unsigned __int8 v15 = *(char **)(a1 + 80);
LABEL_19:
    int v8 = v15;
    uint64_t v10 = v37;
    LODWORD(v6) = v38;
    v8[v37] = 0;
    goto LABEL_20;
  }
  uint64_t v21 = __rev16(*(unsigned __int16 *)&v8[v3 + 1]);
  int v11 = v9 - 4;
  if ((int)v21 > (int)v9 - 4)
  {
    uint64_t v25 = 78462;
    goto LABEL_24;
  }
  if (!v21) {
    goto LABEL_3;
  }
  uint64_t v22 = __rev16(*(unsigned __int16 *)&v8[v21]);
  if ((int)v22 > v11)
  {
    uint64_t v25 = 78465;
    goto LABEL_24;
  }
  if (v22 && (v8[v22] || v8[v22 + 1])) {
    goto LABEL_3;
  }
  unsigned int v27 = __rev16(*(unsigned __int16 *)&v8[v3 + 5]);
  int v28 = v21 - v27;
  if (v21 <= v27)
  {
    uint64_t v25 = 78473;
    goto LABEL_24;
  }
  unsigned int v29 = __rev16(*(unsigned __int16 *)&v8[v21 + 2]);
  unsigned int v30 = v29 + v21;
  if (v22)
  {
    if (v22 < v30)
    {
      uint64_t v25 = 78476;
      goto LABEL_24;
    }
    unsigned int v31 = __rev16(*(unsigned __int16 *)&v8[v22 + 2]);
    if ((int)(v31 + v22) > (int)v9)
    {
      uint64_t v25 = 78478;
      goto LABEL_24;
    }
    uint64_t v32 = a1;
    unsigned int v40 = v22;
    uint64_t v36 = *(unsigned __int8 *)(a1 + 9);
    memmove(&v8[v31 + v30], &v8[v30], (int)(v22 - v30));
    int v28 = v21 - v27;
    v29 += v31;
  }
  else
  {
    if ((int)v30 > (int)v9)
    {
      uint64_t v25 = 78482;
      goto LABEL_24;
    }
    uint64_t v32 = a1;
    unsigned int v40 = v22;
    uint64_t v36 = *(unsigned __int8 *)(a1 + 9);
    unsigned int v31 = 0;
  }
  uint64_t v9 = v29 + v27;
  memmove(&v8[v9], &v8[v27], v28);
  if (v4 >= v6)
  {
    uint64_t v2 = v32;
  }
  else
  {
    unsigned int v33 = &v8[v4];
    uint64_t v2 = v32;
    do
    {
      unsigned int v34 = __rev16(*(unsigned __int16 *)v33);
      unsigned int v35 = v29;
      if (v34 < v21 || (unsigned int v35 = v31, v34 < v40)) {
        *(_WORD *)unsigned int v33 = bswap32(v34 + v35) >> 16;
      }
      v33 += 2;
    }
    while (v33 < &v8[v6]);
  }
LABEL_20:
  if (v9 - v6 + v8[v10] == *(_DWORD *)(v2 + 20))
  {
    signed int v23 = &v8[v36];
    *(_WORD *)(v23 + 5) = bswap32(v9) >> 16;
    v23[1] = 0;
    v23[2] = 0;
    bzero(&v8[v6], (int)v9 - (int)v6);
    return 0;
  }
  uint64_t v25 = 78535;
LABEL_24:
  uint64_t v26 = v2;
LABEL_25:

  return sub_1B0D11B5C(v25, v26);
}

_DWORD *sub_1B0CD24E8(_DWORD *result, int a2, int a3, int a4, _DWORD *a5)
{
  if (!*a5)
  {
    if (a2 == 1)
    {
      unsigned int v9 = 0;
    }
    else
    {
      if (!a2)
      {
        uint64_t result = (_DWORD *)sub_1B0D1045C(77893);
LABEL_11:
        *a5 = result;
        return result;
      }
      unsigned int v10 = (a2 - 2) / (result[14] / 5u + 1) * (result[14] / 5u + 1);
      if (v10 + 1 == dword_1E9B51ED0 / result[13]) {
        int v11 = 3;
      }
      else {
        int v11 = 2;
      }
      unsigned int v9 = v11 + v10;
    }
    uint64_t result = (_DWORD *)(*(uint64_t (**)(void))(*(void *)result + 288))();
    if (result) {
      goto LABEL_11;
    }
    if (*MEMORY[0x10])
    {
      int v12 = 77906;
    }
    else
    {
      int v13 = ~v9 + a2;
      uint64_t v14 = (5 * v13);
      if (5 * v13 >= 0)
      {
        uint64_t v15 = MEMORY[8];
        if (*(unsigned __int8 *)(MEMORY[8] + v14) != a3
          || bswap32(*(_DWORD *)(MEMORY[8] + v14 + 1)) != a4)
        {
          int v16 = sub_1B0CBD790(0);
          *a5 = v16;
          if (!v16)
          {
            *(unsigned char *)(v15 + v14) = a3;
            int v17 = (unsigned char *)(v15 + v14);
            v17[1] = HIBYTE(a4);
            v17[2] = BYTE2(a4);
            v17[3] = BYTE1(a4);
            v17[4] = a4;
          }
        }
        return 0;
      }
      int v12 = 77911;
    }
    *a5 = sub_1B0D1045C(v12);
    return 0;
  }
  return result;
}

sqlite3_int64 sqlite3_last_insert_rowid(sqlite3 *a1)
{
  if (a1)
  {
    int v1 = *((unsigned __int8 *)a1 + 113);
    switch(v1)
    {
      case 186:
        goto LABEL_5;
      case 118:
        return *((void *)a1 + 7);
      case 109:
LABEL_5:
        uint64_t v2 = "unopened";
        break;
      default:
        uint64_t v2 = "invalid";
        break;
    }
  }
  else
  {
    uint64_t v2 = "NULL";
  }
  sqlite3_log(21, "API call with %s database connection pointer", v2);
  sub_1B0CE1978(186263);
  return 0;
}

uint64_t sub_1B0CD2748(uint64_t a1, int a2, int a3, double a4)
{
  if (!a1 || *(unsigned char *)(a1 + 16) != 2) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 8);
  if (*(unsigned char *)(a1 + 17) && (++*(_DWORD *)(a1 + 20), !*(unsigned char *)(a1 + 18)))
  {
    sub_1B0D12478(a1);
    if (a2 != 2) {
      goto LABEL_12;
    }
  }
  else if (a2 != 2)
  {
    goto LABEL_12;
  }
  int v8 = *(unsigned __int8 **)(v7 + 16);
  if (!v8 || (uint64_t v9 = sub_1B0D143DC(v8, 0, 0), !v9))
  {
LABEL_12:
    uint64_t v9 = sub_1B0D17968(*(void *)v7, a2, a3, a4);
    if (!v9)
    {
      if (a3 < 0 && (*(_WORD *)(v7 + 40) & 0x10) != 0) {
        *(_DWORD *)(v7 + 64) = 0;
      }
      uint64_t v9 = sub_1B0CB6D6C(v7);
      unsigned int v11 = bswap32(*(_DWORD *)(*(void *)(*(void *)(v7 + 24) + 80) + 28));
      if (!v11) {
        unsigned int v11 = *(_DWORD *)(*(void *)v7 + 32);
      }
      *(_DWORD *)(v7 + 64) = v11;
    }
  }
  if (*(unsigned char *)(a1 + 17))
  {
    int v12 = *(_DWORD *)(a1 + 20) - 1;
    *(_DWORD *)(a1 + 20) = v12;
    if (!v12) {
      sub_1B0D12558(a1);
    }
  }
  return v9;
}

uint64_t sub_1B0CD2868(uint64_t result)
{
  if (!result) {
    return result;
  }
  uint64_t v1 = result;
  if (*(_DWORD *)(result + 8))
  {
    for (uint64_t i = 16; i != 512; i += 8)
      sub_1B0CD2868(*(void *)(v1 + i));
  }
  uint64_t v3 = (uint64_t (**)(void))&off_1EB21C9E8;
  if (!dword_1EB21C9C0) {
    goto LABEL_10;
  }
  if ((void)xmmword_1EB2201B0) {
    xmmword_1EB21CA40();
  }
  qword_1EB220108 -= (int)off_1EB21C9F8(v1);
  --qword_1EB220150;
  uint64_t result = off_1EB21C9E8(v1);
  uint64_t v1 = xmmword_1EB2201B0;
  if ((void)xmmword_1EB2201B0)
  {
    uint64_t v3 = &xmmword_1EB21CA50;
LABEL_10:
    unint64_t v4 = *v3;
    return ((uint64_t (*)(uint64_t))v4)(v1);
  }
  return result;
}

int sqlite3_wal_checkpoint(sqlite3 *db, const char *zDb)
{
  return sqlite3_wal_checkpoint_v2(db, zDb, 0, 0, 0);
}

uint64_t sub_1B0CD2960(uint64_t a1, uint64_t a2, int a3, unsigned int (*a4)(uint64_t), uint64_t a5, unsigned int a6, int a7, uint64_t a8, _DWORD *a9, _DWORD *a10)
{
  uint64_t v168 = *MEMORY[0x1E4F143B8];
  int v151 = 0;
  if (*(unsigned char *)(a1 + 66)) {
    return 8;
  }
  uint64_t v15 = a4;
  *(void *)(a1 + 160) = a2;
  if (a2)
  {
    if (a4)
    {
      LODWORD(v155) = *(_DWORD *)(a2 + 772);
      if (v155)
      {
        uint64_t v19 = *(void *)(a1 + 8);
        if (*(void *)v19) {
          (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)v19 + 80))(v19, 34, &v155);
        }
      }
    }
  }
  unsigned int v147 = a6;
  if (*(unsigned char *)(a1 + 63)
    || (v21 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 8) + 112))(*(void *)(a1 + 8), 1, 1, 10), int v22 = a3, !v21))
  {
    *(unsigned char *)(a1 + 65) = 1;
    if (a3)
    {
      while (!*(unsigned char *)(a1 + 63))
      {
        int v20 = (*(uint64_t (**)(void, void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 112))(*(void *)(a1 + 8), 0, 1, 10);
        int v21 = v20;
        if (!v15 || v20 != 5)
        {
          if (v20)
          {
            if (v20 != 5)
            {
              int v22 = a3;
              if (v20 != 773) {
                goto LABEL_35;
              }
              LODWORD(v155) = 0;
              uint64_t v23 = *(void *)(a1 + 8);
              if (*(void *)v23) {
                (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)v23 + 80))(v23, 34, &v155);
              }
            }
LABEL_23:
            uint64_t v15 = 0;
            int v22 = 0;
            goto LABEL_25;
          }
          break;
        }
        if (!v15(a5)) {
          goto LABEL_23;
        }
      }
      *(unsigned char *)(a1 + 64) = 1;
      int v22 = a3;
    }
    else
    {
      int v22 = 0;
    }
LABEL_25:
    LODWORD(v155) = 0;
    uint64_t v24 = **(void **)(a1 + 8);
    if (v24) {
      (*(void (**)(void))(v24 + 80))();
    }
    int v21 = sub_1B0C8D71C(a1, &v151);
    if (v22)
    {
      uint64_t v25 = *(void *)(a1 + 160);
      if (v25)
      {
        LODWORD(v155) = *(_DWORD *)(v25 + 772);
        if (v155)
        {
          uint64_t v26 = *(void *)(a1 + 8);
          if (*(void *)v26) {
            (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)v26 + 80))(v26, 34, &v155);
          }
        }
      }
    }
    if (v151)
    {
      uint64_t v27 = *(void *)(a1 + 8);
      if (**(int **)v27 >= 3) {
        (*(void (**)(uint64_t, void, void))(*(void *)v27 + 144))(v27, 0, 0);
      }
    }
LABEL_35:
    if (!v21)
    {
      uint64_t v31 = *(unsigned int *)(a1 + 88);
      if (v31 && ((*(unsigned __int16 *)(a1 + 86) | (*(unsigned __int16 *)(a1 + 86) << 16)) & 0x1FE00) != a7)
      {
        int v21 = sub_1B0D1045C(76199);
        goto LABEL_203;
      }
      uint64_t v143 = a2;
      uint64_t v32 = **(void **)(a1 + 48);
      if (*(_DWORD *)(v32 + 96) >= v31)
      {
        unsigned int v40 = 0;
        goto LABEL_88;
      }
      int v146 = v22;
      uint64_t v138 = a8;
      int v21 = 0;
      unsigned int v139 = *(_DWORD *)(a1 + 92);
      uint64_t v140 = (*(unsigned __int16 *)(a1 + 86) | (*(unsigned __int16 *)(a1 + 86) << 16)) & 0x1FE00;
      uint64_t v145 = **(void **)(a1 + 48);
      uint64_t v33 = v32 + 100;
      for (uint64_t i = 1; i != 5; ++i)
      {
        uint64_t v36 = *(unsigned int *)(v33 + 4 * i);
        if (v31 > v36)
        {
          uint64_t v37 = v31;
          while (1)
          {
            if (*(unsigned char *)(a1 + 63)) {
              goto LABEL_62;
            }
            int v38 = (*(uint64_t (**)(void, void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 112))(*(void *)(a1 + 8), (i + 3), 1, 10);
            int v21 = v38;
            if (!v15 || v38 != 5) {
              break;
            }
            if (!v15(a5)) {
              goto LABEL_75;
            }
          }
          if (v38)
          {
            if (v38 == 5)
            {
              uint64_t v15 = 0;
              uint64_t v31 = v36;
            }
            else
            {
              if (v38 != 773)
              {
                int v22 = v146;
                goto LABEL_203;
              }
              LODWORD(v155) = 0;
              uint64_t v39 = *(void *)(a1 + 8);
              if (*(void *)v39) {
                (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)v39 + 80))(v39, 34, &v155);
              }
LABEL_75:
              uint64_t v15 = 0;
              int v21 = 5;
              uint64_t v31 = v36;
            }
          }
          else
          {
LABEL_62:
            if (i == 1) {
              int v35 = v37;
            }
            else {
              int v35 = -1;
            }
            *(_DWORD *)(v33 + 4 * i) = v35;
            if (!*(unsigned char *)(a1 + 63)) {
              (*(void (**)(void, void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 112))(*(void *)(a1 + 8), (i + 3), 1, 9);
            }
            uint64_t v31 = v37;
            int v21 = 0;
          }
        }
      }
      uint64_t v32 = v145;
      if (*(_DWORD *)(v145 + 96) >= v31)
      {
        unsigned int v40 = 0;
        int v22 = v146;
        goto LABEL_87;
      }
      unsigned int v134 = v31;
      int v41 = *(_DWORD *)(v145 + 96);
      uint64_t v42 = *(unsigned int *)(a1 + 88);
      int v22 = v146;
      if (sqlite3_initialize())
      {
        int v21 = 7;
        goto LABEL_36;
      }
      unint64_t v44 = ((unint64_t)(v42 + 4096) + 0xFFFFFFFF021) >> 12;
      uint64_t v45 = v44 << 32;
      size_t v46 = 2 * v42 + 32 * (int)v44 + 40;
      int v137 = v42;
      if (v42 >= 0x1000) {
        int v47 = 4096;
      }
      else {
        int v47 = v42;
      }
      uint64_t v48 = (unsigned int *)sub_1B0C7FC94(v46 + (2 * v47));
      if (!v48)
      {
        int v21 = 7;
        int v22 = v146;
        goto LABEL_36;
      }
      uint64_t v49 = v48;
      bzero(v48, v46);
      v49[1] = v44 + 1;
      unint64_t v50 = ((unint64_t)(v41 + 4097) + 0xFFFFFFFF021) >> 12;
      unsigned int v40 = v49;
      v144 = v49;
      if ((int)v50 > (int)v44)
      {
LABEL_106:
        int v22 = v146;
        uint64_t v32 = v145;
        while (1)
        {
          if (*(unsigned char *)(a1 + 63)) {
            goto LABEL_213;
          }
          int v51 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 8) + 112))(*(void *)(a1 + 8), 3, 1, 10);
          int v21 = v51;
          if (!v15 || v51 != 5) {
            break;
          }
          if (!v15(a5)) {
            goto LABEL_88;
          }
        }
        if (v51)
        {
          if (v51 != 773) {
            goto LABEL_87;
          }
          LODWORD(v155) = 0;
          uint64_t v110 = *(void *)(a1 + 8);
          if (*(void *)v110) {
            (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)v110 + 80))(v110, 34, &v155);
          }
          goto LABEL_88;
        }
LABEL_213:
        unsigned int v150 = *(_DWORD *)(v145 + 96);
        *(_DWORD *)(v145 + 128) = v134;
        uint64_t v111 = (v147 >> 2) & 3;
        if (v111
          && (int v112 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16), (v147 >> 2) & 3)) != 0)
        {
          int v21 = v112;
        }
        else
        {
          unsigned int v113 = v139;
          *(void *)&long long v155 = v139 * (unint64_t)v140;
          uint64_t __buf = 0;
          (*(void (**)(void, uint64_t, void))(**(void **)(a1 + 8) + 80))(*(void *)(a1 + 8), 39, 0);
          int v21 = (*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), &__buf);
          if (!v21)
          {
            if (__buf < (uint64_t)v155)
            {
              if ((uint64_t)(__buf + *(unsigned int *)(a1 + 88) * (unint64_t)v140 + 0x10000) < (uint64_t)v155)
              {
                int v21 = sub_1B0D1045C(74117);
                goto LABEL_217;
              }
              uint64_t v116 = *(void *)(a1 + 8);
              if (*(void *)v116) {
                (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)v116 + 80))(v116, 5, &v155);
              }
            }
            uint64_t v117 = v40[1];
            if ((int)v117 >= 1)
            {
              unsigned int v118 = 0;
              while (1)
              {
                unsigned int v119 = *v40;
                unsigned int v120 = -1;
                do
                {
                  uint64_t v122 = (v117 - 1);
                  v123 = &v144[8 * v122];
                  v124 = v123 + 2;
                  signed int v125 = v123[2];
                  signed int v126 = v123[8];
                  if (v125 < v126)
                  {
                    uint64_t v127 = *((void *)v123 + 3);
                    v128 = (unsigned __int16 *)(*((void *)v123 + 2) + 2 * v125);
                    while (1)
                    {
                      unsigned int v130 = *v128++;
                      unsigned int v129 = v130;
                      unsigned int v131 = *(_DWORD *)(v127 + 4 * v130);
                      if (v131 > v119) {
                        break;
                      }
                      _DWORD *v124 = ++v125;
                      if (v126 == v125) {
                        goto LABEL_248;
                      }
                    }
                    if (v131 < v120)
                    {
                      unsigned int v118 = v144[8 * v122 + 9] + v129;
                      unsigned int v120 = v131;
                    }
                  }
LABEL_248:
                  ;
                }
                while (v117-- > 1);
                unsigned int *v144 = v120;
                if (v120 == -1)
                {
                  int v21 = 0;
                  goto LABEL_269;
                }
                if (*(_DWORD *)(v143 + 424)) {
                  break;
                }
                if (v118 > v150 && v118 <= v134 && v120 <= v113)
                {
                  int v132 = (*(uint64_t (**)(void, uint64_t, uint64_t, unint64_t))(**(void **)(a1 + 16)
                                                                                               + 16))(*(void *)(a1 + 16), v138, v140, (v140 | 0x18) * (unint64_t)(v118 - 1) + 56);
                  if (v132
                    || (v132 = (*(uint64_t (**)(void, uint64_t, uint64_t, unint64_t))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8), v138, v140, v140 * (unint64_t)(v120 - 1)), unsigned int v113 = v139, v132))
                  {
                    int v21 = v132;
                    goto LABEL_269;
                  }
                }
                unsigned int v40 = v144;
                uint64_t v117 = v144[1];
                if ((int)v117 <= 0) {
                  goto LABEL_264;
                }
              }
              if (*(unsigned char *)(v143 + 103)) {
                int v21 = 7;
              }
              else {
                int v21 = 9;
              }
LABEL_269:
              int v22 = v146;
              unsigned int v40 = v144;
              uint64_t v32 = v145;
              goto LABEL_218;
            }
LABEL_264:
            int v21 = 0;
            unsigned int *v40 = -1;
            int v22 = v146;
          }
        }
LABEL_217:
        uint64_t v32 = v145;
LABEL_218:
        uint64_t v114 = *(void *)(a1 + 8);
        if (*(void *)v114) {
          (*(void (**)(uint64_t, uint64_t, void))(*(void *)v114 + 80))(v114, 37, 0);
        }
        if (!v21
          && (v134 != *(_DWORD *)(**(void **)(a1 + 48) + 16)
           || (int v21 = (*(uint64_t (**)(void, unint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), v140 * (unint64_t)*(unsigned int *)(a1 + 92))) == 0&& (!v111|| (int v21 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8), v111)) == 0)))
        {
          int v21 = 0;
          *(_DWORD *)(v32 + 96) = v134;
        }
        if (!*(unsigned char *)(a1 + 63)) {
          (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 8) + 112))(*(void *)(a1 + 8), 3, 1, 9);
        }
        goto LABEL_87;
      }
      unsigned __int8 v53 = (_WORD *)((char *)v49 + v46);
      uint64_t v54 = (int)v50;
      uint64_t v55 = v45 >> 32;
      uint64_t v136 = v45 >> 32;
      if (v54 > v45 >> 32) {
        uint64_t v55 = v54;
      }
      uint64_t v135 = v55;
      v133 = v49 + 6;
      v56.i64[0] = 0x8000800080008;
      v56.i64[1] = 0x8000800080008;
      v57.i64[0] = 0x10001000100010;
      v57.i64[1] = 0x10001000100010;
LABEL_123:
      uint64_t __buf = 0;
      uint64_t v153 = 0;
      uint64_t v154 = 0;
      if (v54 < *(int *)(a1 + 40))
      {
        uint64_t v59 = *(void *)(*(void *)(a1 + 48) + 8 * v54);
        uint64_t v153 = v59;
        if (v59)
        {
          BOOL v60 = v54 == 0;
          uint64_t v61 = 34;
          if (v54) {
            uint64_t v61 = 0;
          }
          uint64_t v62 = v59 + 4 * v61;
          goto LABEL_133;
        }
      }
      unsigned int v63 = sub_1B0D10A2C(a1, v54, &v153);
      int v21 = v63;
      if (v153)
      {
        BOOL v60 = v54 == 0;
        uint64_t v61 = 34;
        if (v54) {
          uint64_t v61 = 0;
        }
        if (v63) {
          goto LABEL_231;
        }
        uint64_t v62 = v153 + 4 * v61;
        v56.i64[0] = 0x8000800080008;
        v56.i64[1] = 0x8000800080008;
        v57.i64[0] = 0x10001000100010;
        v57.i64[1] = 0x10001000100010;
LABEL_133:
        if (v60) {
          uint64_t v64 = 0;
        }
        else {
          uint64_t v64 = ((v54 << 12) - 34);
        }
        unint64_t v65 = (unint64_t)(0x4000 - 4 * v61) >> 2;
        if (v54 == v136) {
          uint64_t v66 = (v137 - v64);
        }
        else {
          uint64_t v66 = v65;
        }
        uint64_t v67 = (int)v40[1];
        uint64_t v148 = (uint64_t)&v40[8 * v67 + 2] + 2 * v64;
        uint64_t v149 = v66;
        LODWORD(v154) = v64 | 1;
        uint64_t v142 = v54;
        unsigned int v141 = v64 | 1;
        if ((int)v66 <= 0)
        {
          int v70 = 0;
          int v71 = 0;
          long long v166 = 0u;
          long long v167 = 0u;
          long long v164 = 0u;
          long long v165 = 0u;
          long long v162 = 0u;
          long long v163 = 0u;
          long long v160 = 0u;
          long long v161 = 0u;
          long long v158 = 0u;
          long long v159 = 0u;
          long long v156 = 0u;
          long long v157 = 0u;
          unsigned int v72 = 1;
          long long v155 = 0u;
          goto LABEL_171;
        }
        uint64_t v68 = 32 * v67;
        if (v66 >= 0x10)
        {
          uint64_t v69 = v66 & 0x7FFFFFF0;
          unsigned int v73 = (int16x8_t *)((char *)v133 + 2 * v64 + v68);
          uint64_t v74 = v69;
          int16x8_t v75 = (int16x8_t)xmmword_1B0DE1500;
          do
          {
            v73[-1] = v75;
            int16x8_t *v73 = vaddq_s16(v75, v56);
            int16x8_t v75 = vaddq_s16(v75, v57);
            v73 += 2;
            v74 -= 16;
          }
          while (v74);
          uint64_t v66 = v149;
          if (v69 == v149) {
            goto LABEL_148;
          }
        }
        else
        {
          uint64_t v69 = 0;
        }
        uint64_t v76 = -v66;
        uint64_t v77 = v69 + 4;
        uint64_t v78 = (char *)v40 + 2 * v64 + v68;
        do
        {
          *(_WORD *)&v78[2 * v77] = v77 - 4;
          ++v77;
        }
        while (v76 + v77 != 4);
LABEL_148:
        uint64_t v79 = 0;
        long long v166 = 0u;
        long long v167 = 0u;
        long long v164 = 0u;
        long long v165 = 0u;
        long long v162 = 0u;
        long long v163 = 0u;
        long long v160 = 0u;
        long long v161 = 0u;
        long long v158 = 0u;
        long long v159 = 0u;
        long long v156 = 0u;
        long long v157 = 0u;
        long long v155 = 0u;
        while (1)
        {
          int v70 = (char *)(v148 + 2 * v79);
          unsigned int v81 = 0;
          int v71 = 1;
          if (v79) {
            break;
          }
LABEL_149:
          BOOL v80 = &v155 + v81;
          *((void *)v80 + 1) = v70;
          *(_DWORD *)BOOL v80 = v71;
          ++v79;
          LODWORD(v66) = v149;
          if (v79 == v149)
          {
            unsigned int v72 = v81 + 1;
            if (v81 + 1 > 0xC) {
              goto LABEL_122;
            }
LABEL_171:
            uint64_t v95 = v72;
            while (2)
            {
              if (((v66 >> v95) & 1) == 0) {
                goto LABEL_173;
              }
              char v96 = &v155 + v95;
              char v97 = (unsigned __int16 *)*((void *)v96 + 1);
              int v98 = *(_DWORD *)v96;
              BOOL v99 = v98 > 0;
              BOOL v100 = v71 > 0;
              if (v71 <= 0 && v98 < 1)
              {
                int v71 = 0;
                goto LABEL_172;
              }
              uint64_t v101 = 0;
              int v102 = 0;
              int v103 = 0;
              while (2)
              {
                if (!v99)
                {
                  uint64_t v106 = v102;
LABEL_184:
                  ++v102;
                  v105 = (unsigned __int16 *)&v70[2 * v106];
                  goto LABEL_185;
                }
                uint64_t v104 = v103;
                if (v100
                  && *(_DWORD *)(v62 + 4 * v97[v103]) >= *(_DWORD *)(v62 + 4 * *(unsigned __int16 *)&v70[2 * v102]))
                {
                  uint64_t v106 = v102;
                  goto LABEL_184;
                }
                ++v103;
                v105 = &v97[v104];
LABEL_185:
                uint64_t v107 = *v105;
                int v108 = *(_DWORD *)(v62 + 4 * v107);
                v53[v101] = v107;
                if (v103 < v98 && *(_DWORD *)(v62 + 4 * v97[v103]) == v108) {
                  ++v103;
                }
                BOOL v99 = v103 < v98;
                ++v101;
                BOOL v100 = v102 < v71;
                if (v102 < v71 || v103 < v98) {
                  continue;
                }
                break;
              }
              int v71 = v101;
LABEL_172:
              memcpy(v97, v53, (2 * v71));
              int v70 = (char *)v97;
              v56.i64[0] = 0x8000800080008;
              v56.i64[1] = 0x8000800080008;
              v57.i64[0] = 0x10001000100010;
              v57.i64[1] = 0x10001000100010;
              LODWORD(v66) = v149;
LABEL_173:
              if (++v95 != 13) {
                continue;
              }
              break;
            }
LABEL_122:
            unsigned int v40 = v144;
            uint64_t v58 = &v144[8 * v142];
            v58[8] = v71;
            v58[9] = v141;
            *((void *)v58 + 2) = v148;
            *((void *)v58 + 3) = v62;
            uint64_t v54 = v142 + 1;
            if (v142 == v135) {
              goto LABEL_106;
            }
            goto LABEL_123;
          }
        }
        v82 = (char *)(v148 + 2 * v79);
LABEL_153:
        unsigned int v83 = &v155 + v81;
        int v70 = (char *)*((void *)v83 + 1);
        int v84 = *(_DWORD *)v83;
        BOOL v85 = v84 > 0;
        BOOL v86 = v71 > 0;
        if (v71 <= 0 && v84 < 1)
        {
          int v71 = 0;
          goto LABEL_152;
        }
        uint64_t v87 = 0;
        int v88 = 0;
        int v89 = 0;
        while (1)
        {
          if (v85)
          {
            uint64_t v90 = v89;
            if (!v86
              || *(_DWORD *)(v62 + 4 * *(unsigned __int16 *)&v70[2 * v89]) < *(_DWORD *)(v62
                                                                                         + 4
                                                                                         * *(unsigned __int16 *)&v82[2 * v88]))
            {
              ++v89;
              uint64_t v91 = &v70[2 * v90];
              goto LABEL_163;
            }
            uint64_t v92 = v88;
          }
          else
          {
            uint64_t v92 = v88;
          }
          ++v88;
          uint64_t v91 = &v82[2 * v92];
LABEL_163:
          uint64_t v93 = *(unsigned __int16 *)v91;
          int v94 = *(_DWORD *)(v62 + 4 * v93);
          v53[v87] = v93;
          if (v89 < v84 && *(_DWORD *)(v62 + 4 * *(unsigned __int16 *)&v70[2 * v89]) == v94) {
            ++v89;
          }
          BOOL v85 = v89 < v84;
          ++v87;
          BOOL v86 = v88 < v71;
          if (v88 >= v71 && v89 >= v84)
          {
            int v71 = v87;
LABEL_152:
            memcpy(v70, v53, (2 * v71));
            ++v81;
            v82 = v70;
            v56.i64[0] = 0x8000800080008;
            v56.i64[1] = 0x8000800080008;
            v57.i64[0] = 0x10001000100010;
            v57.i64[1] = 0x10001000100010;
            if (((v79 >> v81) & 1) == 0) {
              goto LABEL_149;
            }
            goto LABEL_153;
          }
        }
      }
      if (v63 <= 1) {
        int v21 = 1;
      }
      else {
        int v21 = v63;
      }
LABEL_231:
      v115 = (uint64_t (**)(unsigned int *))&off_1EB21C9E8;
      if (dword_1EB21C9C0)
      {
        int v22 = v146;
        if ((void)xmmword_1EB2201B0) {
          xmmword_1EB21CA40(xmmword_1EB2201B0);
        }
        qword_1EB220108 -= (int)off_1EB21C9F8(v40);
        --qword_1EB220150;
        off_1EB21C9E8(v40);
        unsigned int v40 = (unsigned int *)xmmword_1EB2201B0;
        if (!(void)xmmword_1EB2201B0)
        {
          uint64_t v32 = v145;
LABEL_87:
          if (v21 != 5)
          {
LABEL_89:
            if (v22 && !v21)
            {
              if (*(_DWORD *)(v32 + 96) < *(_DWORD *)(a1 + 88))
              {
LABEL_92:
                int v21 = 5;
                goto LABEL_196;
              }
              if (v22 >= 2)
              {
                LODWORD(__buf) = 0;
                sqlite3_initialize();
                arc4random_buf(&__buf, 4uLL);
                while (1)
                {
                  if (*(unsigned char *)(a1 + 63)) {
                    goto LABEL_117;
                  }
                  int v43 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 8) + 112))(*(void *)(a1 + 8), 4, 4, 10);
                  int v21 = v43;
                  if (!v15 || v43 != 5) {
                    break;
                  }
                  if (!v15(a5)) {
                    goto LABEL_92;
                  }
                }
                if (!v43)
                {
LABEL_117:
                  if (v22 == 3)
                  {
                    sub_1B0D1084C(a1, __buf);
                    int v21 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), 0);
                  }
                  else
                  {
                    int v21 = 0;
                  }
                  if (!*(unsigned char *)(a1 + 63)) {
                    (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 8) + 112))(*(void *)(a1 + 8), 4, 4, 9);
                  }
                  goto LABEL_196;
                }
                if (v43 != 773) {
                  goto LABEL_196;
                }
                LODWORD(v155) = 0;
                uint64_t v52 = *(void *)(a1 + 8);
                if (*(void *)v52) {
                  (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)v52 + 80))(v52, 34, &v155);
                }
                goto LABEL_92;
              }
              int v21 = 0;
            }
LABEL_196:
            if (v40)
            {
              v109 = (uint64_t (**)(unsigned int *))&off_1EB21C9E8;
              if (dword_1EB21C9C0)
              {
                if ((void)xmmword_1EB2201B0) {
                  xmmword_1EB21CA40(xmmword_1EB2201B0);
                }
                qword_1EB220108 -= (int)off_1EB21C9F8(v40);
                --qword_1EB220150;
                off_1EB21C9E8(v40);
                unsigned int v40 = (unsigned int *)xmmword_1EB2201B0;
                if (!(void)xmmword_1EB2201B0) {
                  goto LABEL_203;
                }
                v109 = (uint64_t (**)(unsigned int *))&xmmword_1EB21CA50;
              }
              (*v109)(v40);
            }
LABEL_203:
            if (v21 == 5 || !v21)
            {
              if (a9) {
                *a9 = *(_DWORD *)(a1 + 88);
              }
              if (a10) {
                *a10 = *(_DWORD *)(**(void **)(a1 + 48) + 96);
              }
            }
            goto LABEL_36;
          }
LABEL_88:
          int v21 = 0;
          goto LABEL_89;
        }
        v115 = (uint64_t (**)(unsigned int *))&xmmword_1EB21CA50;
      }
      else
      {
        int v22 = v146;
      }
      uint64_t v32 = v145;
      (*v115)(v40);
      unsigned int v40 = 0;
      goto LABEL_87;
    }
  }
LABEL_36:
  if (v151)
  {
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
  }
  LODWORD(v155) = 0;
  uint64_t v28 = *(void *)(a1 + 8);
  if (*(void *)v28) {
    (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)v28 + 80))(v28, 34, &v155);
  }
  *(void *)(a1 + 160) = 0;
  if (*(unsigned char *)(a1 + 64))
  {
    if (!*(unsigned char *)(a1 + 63)) {
      (*(void (**)(void, void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 112))(*(void *)(a1 + 8), 0, 1, 9);
    }
    *(unsigned char *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 124) = 0;
    *(unsigned char *)(a1 + 67) = 0;
  }
  if (*(unsigned char *)(a1 + 65))
  {
    if (!*(unsigned char *)(a1 + 63)) {
      (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 8) + 112))(*(void *)(a1 + 8), 1, 1, 9);
    }
    *(unsigned char *)(a1 + 65) = 0;
  }
  if (v21 == 773) {
    unsigned int v29 = 5;
  }
  else {
    unsigned int v29 = v21;
  }
  if (v29) {
    BOOL v30 = 1;
  }
  else {
    BOOL v30 = v22 == a3;
  }
  if (v30) {
    return v29;
  }
  else {
    return 5;
  }
}

uint64_t sub_1B0CD3930(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 160) || (uint64_t v5 = a2, (v6 = *(void *)(a1 + 64)) != 0) && *(_DWORD *)(*(void *)v6 + 168))
  {
    sqlite3_log(27, "denying truncate of invalidated fd %d", *(_DWORD *)(a1 + 24));
    return 6922;
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(a1 + 72);
    if ((int)v7 >= 1) {
      uint64_t v5 = (a2 + v7 - 1) / v7 * v7;
    }
    uint64_t v8 = *(unsigned int *)(a1 + 24);
    while (1)
    {
      int v9 = off_1EC526418(v8, v5);
      if ((v9 & 0x80000000) == 0) {
        break;
      }
      if (*__error() != 4) {
        goto LABEL_13;
      }
    }
    if (v9)
    {
LABEL_13:
      *(_DWORD *)(a1 + 32) = *__error();
      unsigned int v10 = *(const char **)(a1 + 56);
      int v11 = *__error();
      long long v16 = 0u;
      long long v17 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      *(_OWORD *)__strerrbuf = 0u;
      strerror_r(v11, __strerrbuf, 0x4FuLL);
      int v12 = &byte_1B0DE9952;
      if (v10) {
        int v12 = v10;
      }
      uint64_t v3 = 1546;
      sqlite3_log(1546, "os_unix.c:%d: (%d) %s(%s) - %s", 44694, v11, "ftruncate", v12, __strerrbuf);
      return v3;
    }
    uint64_t v3 = 0;
    if (v5 < *(void *)(a1 + 80)) {
      *(void *)(a1 + 80) = v5;
    }
  }
  return v3;
}

uint64_t sub_1B0CD3AB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v37 = 0;
  if (a3 >= 2)
  {
    unsigned int v3 = a3;
    if (*(_DWORD *)(a1 + 64) >= a3)
    {
      uint64_t v6 = a2;
      uint64_t v7 = *(void *)(a1 + 24);
      if (a2)
      {
        uint64_t v36 = a2;
        uint64_t v8 = *(void *)(a2 + 112);
        ++*(void *)(v8 + 56);
        ++*(void *)(*(void *)(v8 + 24) + 24);
LABEL_16:
        uint64_t v14 = *(void *)(v7 + 112);
        long long v15 = *(_DWORD **)(v14 + 40);
        if ((*(_WORD *)(v14 + 52) & 4) != 0 && v15[8] >= *(_DWORD *)(v14 + 48))
        {
          if (!v15[32])
          {
            unsigned int v35 = 0;
            goto LABEL_36;
          }
          uint64_t v17 = sub_1B0D0F4D4(v14);
        }
        else
        {
          uint64_t v16 = v15[12];
          if (v16) {
            goto LABEL_25;
          }
          if (v15[46] <= v15[50]) {
            uint64_t v17 = sub_1B0CBD7E0(v14);
          }
          else {
            uint64_t v17 = sub_1B0D133D0(v14);
          }
        }
        uint64_t v16 = v17;
        unsigned int v35 = v17;
        if (v17) {
          goto LABEL_25;
        }
LABEL_36:
        uint64_t v23 = *(void *)(v7 + 80);
        unsigned int v24 = bswap32(*(_DWORD *)(v23 + 36));
        *(_DWORD *)(v23 + 36) = bswap32(v24 + 1);
        if ((*(_WORD *)(a1 + 40) & 4) == 0)
        {
          if (!*(unsigned char *)(a1 + 33)) {
            goto LABEL_55;
          }
LABEL_38:
          sub_1B0CD24E8((_DWORD *)a1, v3, 2, 0, &v35);
          uint64_t v16 = v35;
          if (v35) {
            goto LABEL_25;
          }
LABEL_55:
          if (v24)
          {
            unsigned int v24 = bswap32(*(_DWORD *)(*(void *)(v7 + 80) + 32));
            if (v24 > *(_DWORD *)(a1 + 64))
            {
              uint64_t v28 = sub_1B0D1045C(83601);
LABEL_70:
              uint64_t v16 = v28;
              goto LABEL_25;
            }
            uint64_t v28 = sub_1B0D12DCC(a1, v24, &v37);
            if (v28) {
              goto LABEL_70;
            }
            uint64_t v29 = v37;
            unsigned int v30 = bswap32(*(_DWORD *)(*(void *)(v37 + 80) + 4));
            int v31 = *(_DWORD *)(a1 + 56) >> 2;
            if (v30 > v31 - 2)
            {
              uint64_t v28 = sub_1B0D1045C(83612);
              goto LABEL_70;
            }
            if (v30 < v31 - 8)
            {
              uint64_t v28 = sub_1B0CBD790(*(void *)(v37 + 112));
              if (!v28)
              {
                *(_DWORD *)(*(void *)(v29 + 80) + 4) = bswap32(v30 + 1);
                *(_DWORD *)(*(void *)(v29 + 80) + 4 * v30 + 8) = bswap32(v3);
                if (v6)
                {
                  if ((*(_WORD *)(a1 + 40) & 4) == 0)
                  {
                    uint64_t v32 = *(void *)(v6 + 112);
                    uint64_t v33 = *(void *)(v32 + 40);
                    if (!*(unsigned char *)(v33 + 16))
                    {
                      __int16 v34 = *(_WORD *)(v32 + 52);
                      if ((v34 & 2) != 0 && !*(_DWORD *)(v33 + 128)) {
                        *(_WORD *)(v32 + 52) = v34 & 0xFFEB | 0x10;
                      }
                    }
                  }
                }
                uint64_t v28 = sub_1B0D1E7B0(a1, v3);
              }
              goto LABEL_70;
            }
          }
          if (v6 || (uint64_t v16 = sub_1B0D12DCC(a1, v3, &v36), v6 = v36, !v16))
          {
            uint64_t v16 = sub_1B0CBD790(*(void *)(v6 + 112));
            if (!v16)
            {
              **(_DWORD **)(v6 + 80) = bswap32(v24);
              *(_DWORD *)(*(void *)(v6 + 80) + 4) = 0;
              *(_DWORD *)(*(void *)(v7 + 80) + 32) = bswap32(v3);
            }
            goto LABEL_26;
          }
LABEL_25:
          if (!v6) {
            goto LABEL_28;
          }
          goto LABEL_26;
        }
        if (!v6)
        {
          uint64_t v16 = sub_1B0D12DCC(a1, v3, &v36);
          uint64_t v6 = v36;
          if (v16) {
            goto LABEL_25;
          }
        }
        uint64_t v25 = *(void *)(v6 + 112);
        uint64_t v26 = *(_DWORD **)(v25 + 40);
        if ((*(_WORD *)(v25 + 52) & 4) != 0 && v26[8] >= *(_DWORD *)(v25 + 48))
        {
          if (!v26[32])
          {
            unsigned int v35 = 0;
            goto LABEL_54;
          }
          uint64_t v27 = sub_1B0D0F4D4(v25);
        }
        else
        {
          uint64_t v16 = v26[12];
          if (v16) {
            goto LABEL_26;
          }
          if (v26[46] <= v26[50]) {
            uint64_t v27 = sub_1B0CBD7E0(v25);
          }
          else {
            uint64_t v27 = sub_1B0D133D0(v25);
          }
        }
        uint64_t v16 = v27;
        unsigned int v35 = v27;
        if (!v27)
        {
LABEL_54:
          bzero(*(void **)(v6 + 80), *(unsigned int *)(*(void *)(v6 + 72) + 52));
          if (!*(unsigned char *)(a1 + 33)) {
            goto LABEL_55;
          }
          goto LABEL_38;
        }
LABEL_26:
        *(unsigned char *)uint64_t v6 = 0;
        uint64_t v18 = *(void *)(v6 + 112);
        if ((*(_WORD *)(v18 + 52) & 0x20) != 0)
        {
          uint64_t v20 = *(void *)(v18 + 40);
          --*(_DWORD *)(v20 + 152);
          *(void *)(v18 + 32) = *(void *)(v20 + 168);
          *(void *)(v20 + 168) = v18;
          (*(void (**)(void, void, void))(**(void **)(v20 + 72) + 144))(*(void *)(v20 + 72), *(void *)(v20 + 200) * (*(_DWORD *)(v18 + 48) - 1), *(void *)(v18 + 8));
          uint64_t v19 = v37;
          if (!v37) {
            return v16;
          }
LABEL_31:
          uint64_t v21 = *(void *)(v19 + 112);
          if ((*(_WORD *)(v21 + 52) & 0x20) != 0)
          {
            uint64_t v22 = *(void *)(v21 + 40);
            --*(_DWORD *)(v22 + 152);
            *(void *)(v21 + 32) = *(void *)(v22 + 168);
            *(void *)(v22 + 168) = v21;
            (*(void (**)(void, void, void))(**(void **)(v22 + 72) + 144))(*(void *)(v22 + 72), *(void *)(v22 + 200) * (*(_DWORD *)(v21 + 48) - 1), *(void *)(v21 + 8));
          }
          else
          {
            sub_1B0D0E3E8(v21);
          }
          return v16;
        }
        sub_1B0D0E3E8(v18);
LABEL_28:
        uint64_t v19 = v37;
        if (!v37) {
          return v16;
        }
        goto LABEL_31;
      }
      uint64_t v9 = *(void *)a1;
      uint64_t v10 = ((uint64_t (*)(void, uint64_t, void))*(&xmmword_1EB21CA98 + 1))(*(void *)(*(void *)(*(void *)a1 + 336) + 72), a3, 0);
      if (v10)
      {
        int v11 = (uint64_t *)v10;
        int v12 = *(void **)(v10 + 8);
        if (*v12)
        {
          ++*(void *)(*(void *)(v9 + 336) + 24);
          ++v12[7];
          goto LABEL_12;
        }
        int v12 = (void *)sub_1B0D1171C(*(void *)(v9 + 336), v3, v11);
        if (v12)
        {
LABEL_12:
          uint64_t v6 = v12[2];
          if (*(_DWORD *)(v6 + 4) != v3)
          {
            uint64_t v13 = v12[1];
            *(void *)(v6 + 112) = v12;
            *(void *)(v6 + 72) = a1;
            *(void *)(v6 + 80) = v13;
            *(_DWORD *)(v6 + 4) = v3;
            *(unsigned char *)(v6 + 9) = 0;
          }
          goto LABEL_15;
        }
      }
      uint64_t v6 = 0;
LABEL_15:
      uint64_t v36 = v6;
      goto LABEL_16;
    }
  }

  return sub_1B0D1045C(83554);
}

const char *__cdecl sqlite3_bind_parameter_name(sqlite3_stmt *a1, int a2)
{
  if (!a1) {
    return 0;
  }
  if (*(void *)(*(void *)a1 + 24)) {
    xmmword_1EB21CA40();
  }
  uint64_t v4 = *((void *)a1 + 22);
  if (v4)
  {
    int v5 = 2;
    while (*(_DWORD *)(v4 + 4 * v5) != a2)
    {
      v5 += *(_DWORD *)(v4 + 4 * v5 + 4);
      if (v5 >= *(_DWORD *)(v4 + 4)) {
        goto LABEL_8;
      }
    }
    uint64_t v6 = (const char *)(v4 + 4 * v5 + 8);
  }
  else
  {
LABEL_8:
    uint64_t v6 = 0;
  }
  if (*(void *)(*(void *)a1 + 24)) {
    xmmword_1EB21CA50();
  }
  return v6;
}

uint64_t sub_1B0CD403C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result = sub_1B0CACD5C((unsigned __int8 *)a2);
  if (result == 16)
  {
    uint64_t result = 0;
    *a3 = 0;
  }
  else if (!result)
  {
    uint64_t v7 = 0;
    while (1)
    {
      if (*(_DWORD *)(a1 + 424)) {
        return 0;
      }
      uint64_t v8 = *(void *)(a2 + 136);
      if (*(unsigned char *)(v8 + 8)) {
        break;
      }
      uint64_t v10 = *(unsigned __int16 *)(v8 + 24);
      if (!*(unsigned char *)(v8 + 1)) {
        v7 += v10;
      }
LABEL_16:
      uint64_t v15 = *(unsigned __int16 *)(a2 + 86);
      if (v15 == v10) {
        uint64_t v16 = (unsigned int *)(*(unsigned __int8 *)(v8 + 9) + *(void *)(v8 + 80) + 8);
      }
      else {
        uint64_t v16 = (unsigned int *)(*(void *)(v8 + 80)
      }
                             + ((*(unsigned __int8 *)(*(void *)(v8 + 96) + 2 * v15 + 1) | (*(unsigned __int8 *)(*(void *)(v8 + 96) + 2 * v15) << 8)) & (unint64_t)*(unsigned __int16 *)(v8 + 26)));
      uint64_t result = sub_1B0CAD12C(a2, bswap32(*v16));
      if (result) {
        return result;
      }
    }
    v7 += *(unsigned __int16 *)(v8 + 24);
    while (1)
    {
      uint64_t v11 = *(char *)(a2 + 84);
      if (!*(unsigned char *)(a2 + 84)) {
        break;
      }
      *(_WORD *)(a2 + 70) = 0;
      *(unsigned char *)(a2 + 1) &= 0xF9u;
      *(_WORD *)(a2 + 86) = *(_WORD *)(a2 + 2 * v11 + 86);
      char v12 = v11 - 1;
      *(unsigned char *)(a2 + 84) = v12;
      *(void *)(a2 + 136) = *(void *)(a2 + 8 * v12 + 144);
      uint64_t v13 = *(void *)(v8 + 112);
      if ((*(unsigned char *)(v13 + 52) & 0x20) != 0)
      {
        uint64_t v14 = *(void *)(v13 + 40);
        --*(_DWORD *)(v14 + 152);
        *(void *)(v13 + 32) = *(void *)(v14 + 168);
        *(void *)(v14 + 168) = v13;
        (*(void (**)(void, void, void))(**(void **)(v14 + 72) + 144))(*(void *)(v14 + 72), *(void *)(v14 + 200) * (*(_DWORD *)(v13 + 48) - 1), *(void *)(v13 + 8));
      }
      else
      {
        sub_1B0D0E3E8(v13);
      }
      unsigned int v9 = *(unsigned __int16 *)(a2 + 86);
      uint64_t v8 = *(void *)(a2 + 136);
      LODWORD(v10) = *(unsigned __int16 *)(v8 + 24);
      if (v9 < v10)
      {
        *(_WORD *)(a2 + 86) = v9 + 1;
        goto LABEL_16;
      }
    }
    *a3 = v7;
    return sub_1B0CACD5C((unsigned __int8 *)a2);
  }
  return result;
}

void *sub_1B0CD41FC(void *result, void *a2)
{
  if (a2)
  {
    unsigned int v3 = result;
    uint64_t v4 = (void *)a2[7];
    int v5 = (unsigned __int8 *)v4[5];
    if (v5) {
      sub_1B0D1DF88(result, v5);
    }
    uint64_t v6 = (void *)v4[6];
    if (v6) {
      sub_1B0D270DC(v3, v6);
    }
    uint64_t v7 = v4[2];
    if (v7) {
      sub_1B0CA0FA8(v3, v7, 1);
    }
    uint64_t v8 = (unsigned __int8 *)a2[3];
    if (v8) {
      sub_1B0D1DF88(v3, v8);
    }
    return sub_1B0D05C10(v3, a2);
  }
  return result;
}

int sqlite3_open16(const void *filename, sqlite3 **ppDb)
{
  if (ppDb)
  {
    *ppDb = 0;
    int result = sqlite3_initialize();
    if (result) {
      return result;
    }
    uint64_t v6 = sub_1B0C7FC94(64);
    if (!v6) {
      return 7;
    }
    uint64_t v7 = v6;
    *(_OWORD *)(v6 + 32) = 0u;
    *(_OWORD *)(v6 + 48) = 0u;
    if (filename) {
      uint64_t v8 = (char *)filename;
    }
    else {
      uint64_t v8 = (char *)&unk_1B0DE2028;
    }
    *(_OWORD *)uint64_t v6 = 0uLL;
    *(_OWORD *)(v6 + 16) = 0uLL;
    *(_WORD *)(v6 + 20) = 1;
    *(void *)(v6 + 24) = 0;
    sub_1B0C79BBC(v6, v8, -1, 2u, 0);
    int v9 = *(unsigned __int16 *)(v7 + 20);
    if ((~v9 & 0x202) != 0 || *(unsigned char *)(v7 + 22) != 1)
    {
      if (v9) {
        goto LABEL_20;
      }
      uint64_t v10 = (char *)sub_1B0D18254((int *)v7, 1);
      if (!v10) {
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v10 = *(char **)(v7 + 8);
      if (!v10)
      {
LABEL_20:
        unsigned __int8 v12 = 7;
LABEL_21:
        if ((*(_WORD *)(v7 + 20) & 0x9000) != 0 || *(_DWORD *)(v7 + 32)) {
          sub_1B0D180E4(v7);
        }
        sub_1B0D05C10(*(void **)(v7 + 24), (void *)v7);
        return v12;
      }
    }
    int v11 = sub_1B0C77698(v10, (uint64_t *)ppDb, 6u, 0);
    unsigned __int8 v12 = v11;
    if (!v11)
    {
      uint64_t v13 = *(void *)(*((void *)*ppDb + 4) + 24);
      unsigned __int8 v12 = 0;
      if ((*(_WORD *)(v13 + 114) & 1) == 0)
      {
        *((unsigned char *)*ppDb + 100) = 2;
        *(unsigned char *)(v13 + 113) = 2;
      }
    }
    goto LABEL_21;
  }
  return sub_1B0CE1978(189122);
}

uint64_t sub_1B0CD43EC(int *a1, int a2)
{
  if (a2 == 1 || *((unsigned char *)a1 + 22) == 1)
  {
    int v15 = a1[4];
    unint64_t v16 = v15;
    if (a2 == 1)
    {
      unint64_t v16 = v15 & 0xFFFFFFFFFFFFFFFELL;
      a1[4] = v16;
      uint64_t v17 = (4 * (v16 >> 1)) | 1;
      v15 &= ~1u;
    }
    else
    {
      uint64_t v17 = 2 * v15 + 2;
    }
    uint64_t v18 = (unsigned __int8 *)*((void *)a1 + 1);
    uint64_t v19 = *((void *)a1 + 3);
    if (v19)
    {
      unint64_t v20 = sub_1B0D05DC0(v19, v17);
      if (!v20) {
        return 7;
      }
    }
    else
    {
      unint64_t v20 = sub_1B0C7FC94(v17);
      if (!v20) {
        return 7;
      }
    }
    uint64_t v21 = &v18[v16];
    int v22 = *((unsigned __int8 *)a1 + 22);
    if (v22 != 1)
    {
      if (v22 == 2)
      {
        uint64_t v23 = (unsigned char *)v20;
        if (v15 >= 1)
        {
          uint64_t v23 = (unsigned char *)v20;
          do
          {
            int v28 = *v18;
            uint64_t v29 = v18 + 2;
            int v30 = v18[1];
            unsigned int v31 = v28 | (v30 << 8);
            if ((v30 & 0xF8) != 0xD8 || v29 >= v21)
            {
              if (v31 > 0x7F)
              {
                char v33 = v28 & 0x3F | 0x80;
                if (v31 > 0x7FF)
                {
                  unsigned char *v23 = (v18[1] >> 4) | 0xE0;
                  v23[1] = (v31 >> 6) & 0x3F | 0x80;
                  v23[2] = v33;
                  v23 += 3;
                }
                else
                {
                  unsigned char *v23 = (v31 >> 6) | 0xC0;
                  v23[1] = v33;
                  v23 += 2;
                }
              }
              else
              {
                *v23++ = v28;
              }
            }
            else
            {
              int v24 = v18[2];
              uint64_t v29 = v18 + 4;
              char v25 = v24 & 0x3F | 0x80;
              unsigned int v26 = v24 & 0xFFFC00FF | ((v18[3] & 3) << 8) & 0x3FF | (*v18 << 10);
              unsigned int v27 = ((v31 << 10) & 0xF0000) + 0x10000;
              unsigned char *v23 = (v27 >> 18) | 0xF0;
              v23[1] = ((v27 & 0xFFFF0000 | (unsigned __int16)((_WORD)v28 << 10)) >> 12) & 0x3F | 0x80;
              v23[2] = (v26 >> 6) & 0x3F | 0x80;
              v23[3] = v25;
              v23 += 4;
            }
            uint64_t v18 = v29;
          }
          while (v29 < v21);
        }
      }
      else
      {
        uint64_t v23 = (unsigned char *)v20;
        if (v15 >= 1)
        {
          uint64_t v23 = (unsigned char *)v20;
          do
          {
            int v46 = *v18;
            int v47 = v18 + 2;
            int v48 = v18[1];
            unsigned int v49 = v48 | (v46 << 8);
            if ((v46 & 0xF8) != 0xD8 || v47 >= v21)
            {
              if (v49 > 0x7F)
              {
                char v51 = v48 & 0x3F | 0x80;
                if (v49 > 0x7FF)
                {
                  unsigned char *v23 = (*v18 >> 4) | 0xE0;
                  v23[1] = (v49 >> 6) & 0x3F | 0x80;
                  v23[2] = v51;
                  v23 += 3;
                }
                else
                {
                  unsigned char *v23 = (v49 >> 6) | 0xC0;
                  v23[1] = v51;
                  v23 += 2;
                }
              }
              else
              {
                *v23++ = v48;
              }
            }
            else
            {
              int v47 = v18 + 4;
              int v42 = v18[3];
              char v43 = v42 & 0x3F | 0x80;
              unsigned int v44 = v42 & 0xFFFC00FF | ((v18[2] & 3) << 8) & 0x3FF | (v18[1] << 10);
              unsigned int v45 = ((v49 << 10) & 0xF0000) + 0x10000;
              unsigned char *v23 = (v45 >> 18) | 0xF0;
              v23[1] = ((v45 & 0xFFFF0000 | (unsigned __int16)((_WORD)v48 << 10)) >> 12) & 0x3F | 0x80;
              v23[2] = (v44 >> 6) & 0x3F | 0x80;
              v23[3] = v43;
              v23 += 4;
            }
            uint64_t v18 = v47;
          }
          while (v47 < v21);
        }
      }
      a1[4] = v23 - v20;
LABEL_91:
      unsigned char *v23 = 0;
      __int16 v60 = a1[5] & 0x83D | 0x202;
      if ((a1[5] & 0x9000) != 0 || a1[8]) {
        sub_1B0D180E4((uint64_t)a1);
      }
      *((_WORD *)a1 + 10) = v60;
      *((unsigned char *)a1 + 22) = a2;
      *((void *)a1 + 1) = v20;
      *((void *)a1 + 5) = v20;
      uint64_t v61 = *((void *)a1 + 3);
      if (v61 && *(void *)(v61 + 520) > v20)
      {
        if (*(void *)(v61 + 496) <= v20)
        {
          int v62 = 128;
          goto LABEL_99;
        }
        if (*(void *)(v61 + 504) <= v20)
        {
          int v62 = *(unsigned __int16 *)(v61 + 438);
          goto LABEL_99;
        }
      }
      int v62 = off_1EB21C9F8(v20);
LABEL_99:
      uint64_t result = 0;
      a1[8] = v62;
      return result;
    }
    unsigned int v35 = (unsigned char *)v20;
    if (a2 == 2)
    {
      if (v15 >= 1)
      {
        uint64_t v36 = &v18[v16];
        unsigned int v35 = (unsigned char *)v20;
        while (1)
        {
          unsigned int v38 = *v18++;
          __int16 v37 = v38;
          unsigned int v39 = v38 - 192;
          if (v38 < 0xC0) {
            goto LABEL_47;
          }
          unsigned int v40 = byte_1B0DE211A[v39];
          if (v18 == v21)
          {
            uint64_t v18 = v21;
          }
          else
          {
            while (1)
            {
              unsigned __int8 v41 = *v18;
              if ((*v18 & 0xC0) != 0x80) {
                break;
              }
              ++v18;
              unsigned int v40 = v41 & 0x3F | (v40 << 6);
              if (v18 == v21)
              {
                uint64_t v18 = v36;
                break;
              }
            }
          }
          __int16 v37 = -3;
          if (v40 >> 1 == 0x7FFF || v40 < 0x80 || (v40 & 0xFFFFF800) == 0xD800) {
            goto LABEL_47;
          }
          if (HIWORD(v40))
          {
            *unsigned int v35 = ((v40 - 0x10000) >> 10) & 0xC0 | ((unsigned __int16)v40 >> 10);
            v35[1] = ((v40 - 0x10000) >> 18) & 3 | 0xD8;
            v35[2] = v40;
            v35[3] = BYTE1(v40) & 3 | 0xDC;
            v35 += 4;
            if (v18 >= v21) {
              break;
            }
          }
          else
          {
            __int16 v37 = v40;
LABEL_47:
            *(_WORD *)unsigned int v35 = v37;
            v35 += 2;
            if (v18 >= v21) {
              break;
            }
          }
        }
      }
LABEL_90:
      a1[4] = v35 - v20;
      *unsigned int v35 = 0;
      uint64_t v23 = v35 + 1;
      goto LABEL_91;
    }
    if (v15 < 1) {
      goto LABEL_90;
    }
    uint64_t v52 = &v18[v16];
    unsigned int v35 = (unsigned char *)v20;
    while (1)
    {
      unsigned int v57 = *v18++;
      __int16 v53 = v57;
      unsigned int v58 = v57 - 192;
      if (v57 >= 0xC0)
      {
        unsigned int v55 = byte_1B0DE211A[v58];
        if (v18 == v21)
        {
          uint64_t v18 = v21;
        }
        else
        {
          while (1)
          {
            unsigned __int8 v59 = *v18;
            if ((*v18 & 0xC0) != 0x80) {
              break;
            }
            ++v18;
            unsigned int v55 = v59 & 0x3F | (v55 << 6);
            if (v18 == v21)
            {
              uint64_t v18 = v52;
              break;
            }
          }
        }
        __int16 v53 = -3;
        if (v55 >> 1 != 0x7FFF && v55 >= 0x80 && (v55 & 0xFFFFF800) != 0xD800)
        {
          if (HIWORD(v55))
          {
            *unsigned int v35 = ((v55 - 0x10000) >> 18) & 3 | 0xD8;
            v35[1] = ((v55 - 0x10000) >> 10) & 0xC0 | ((unsigned __int16)v55 >> 10);
            uint64_t v54 = v35 + 3;
            v35[2] = BYTE1(v55) & 3 | 0xDC;
            uint64_t v56 = 4;
            goto LABEL_78;
          }
          __int16 v53 = v55;
        }
      }
      *unsigned int v35 = HIBYTE(v53);
      uint64_t v54 = v35 + 1;
      LOBYTE(v55) = v53;
      uint64_t v56 = 2;
LABEL_78:
      v35 += v56;
      *uint64_t v54 = v55;
      if (v18 >= v21) {
        goto LABEL_90;
      }
    }
  }
  __int16 v4 = *((_WORD *)a1 + 10);
  if ((v4 & 0x12) == 0) {
    goto LABEL_15;
  }
  if ((a1[5] & 0x400) != 0)
  {
    int v5 = a1[4];
    signed int v6 = *a1 + v5;
    if ((v6 < 0) ^ __OFADD__(*a1, v5) | (v6 == 0))
    {
      if ((v4 & 0x10) == 0) {
        goto LABEL_11;
      }
      signed int v6 = 1;
    }
    if (sub_1B0CA0CF0((uint64_t)a1, v6, 1)) {
      return 7;
    }
    bzero((void *)(*((void *)a1 + 1) + a1[4]), *a1);
    a1[4] += *a1;
    __int16 v4 = a1[5] & 0xF9FF;
    *((_WORD *)a1 + 10) = v4;
  }
LABEL_11:
  if (!a1[8] || *((void *)a1 + 1) != *((void *)a1 + 5))
  {
    if (!sub_1B0D18460((uint64_t)a1))
    {
      __int16 v4 = *((_WORD *)a1 + 10);
      goto LABEL_15;
    }
    return 7;
  }
LABEL_15:
  *((_WORD *)a1 + 10) = v4 & 0xBFFF;
  unint64_t v7 = a1[4] & 0xFFFFFFFFFFFFFFFELL;
  if ((int)v7 >= 1)
  {
    uint64_t v8 = *((void *)a1 + 1);
    unint64_t v9 = v8 + v7;
    unint64_t v10 = v8 + 2;
    if (v9 > v8 + 2) {
      unint64_t v10 = v9;
    }
    unint64_t v11 = v10 + ~v8;
    unsigned __int8 v12 = (char *)*((void *)a1 + 1);
    if (v11 >= 0xE)
    {
      uint64_t v13 = (v11 >> 1) + 1;
      if (v11 < 0x3E)
      {
        unint64_t v14 = 0;
        goto LABEL_105;
      }
      unint64_t v14 = v13 & 0xFFFFFFFFFFFFFFE0;
      unsigned int v63 = (char *)(v8 + 32);
      unint64_t v64 = v13 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        unint64_t v65 = v63 - 32;
        int8x16x2_t v73 = vld2q_s8(v65);
        int8x16x2_t v74 = vld2q_s8(v63);
        int8x16_t v66 = v73.val[0];
        int8x16_t v67 = v74.val[0];
        vst2q_s8(v65, *(int8x16x2_t *)((char *)&v73 + 16));
        vst2q_s8(v63, *(int8x16x2_t *)((char *)&v74 + 16));
        v63 += 64;
        v64 -= 32;
      }
      while (v64);
      if (v13 == v14) {
        goto LABEL_112;
      }
      if ((v13 & 0x18) != 0)
      {
LABEL_105:
        unsigned __int8 v12 = (char *)(v8 + 2 * (v13 & 0xFFFFFFFFFFFFFFF8));
        uint64_t v68 = (char *)(v8 + 2 * v14);
        unint64_t v69 = v14 - (v13 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          int8x8x2_t v72 = vld2_s8(v68);
          int8x8_t v70 = v72.val[0];
          vst2_s8(v68, *(int8x8x2_t *)((char *)&v72 + 8));
          v68 += 16;
          v69 += 8;
        }
        while (v69);
        if (v13 == (v13 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_112;
        }
        goto LABEL_111;
      }
      unsigned __int8 v12 = (char *)(v8 + 2 * v14);
    }
    do
    {
LABEL_111:
      char v71 = *v12;
      char *v12 = v12[1];
      v12[1] = v71;
      v12 += 2;
    }
    while ((unint64_t)v12 < v9);
  }
LABEL_112:
  uint64_t result = 0;
  *((unsigned char *)a1 + 22) = a2;
  return result;
}

int sqlite3_prepare16_v2(sqlite3 *db, const void *zSql, int nByte, sqlite3_stmt **ppStmt, const void **pzTail)
{
  return sub_1B0CD4AD0((uint64_t)db, (char *)zSql, nByte, 128, ppStmt, pzTail);
}

uint64_t sub_1B0CD4AD0(uint64_t a1, char *__s, int a3, uint64_t a4, void *a5, void *a6)
{
  int v9 = a3;
  uint64_t v36 = 0;
  if (a6) {
    *a6 = 0;
  }
  if (!a5)
  {
    int v14 = 148826;
LABEL_26:
    return sub_1B0CE1978(v14);
  }
  *a5 = 0;
  if (!a1)
  {
    uint64_t v13 = "NULL";
    goto LABEL_24;
  }
  int v12 = *(unsigned __int8 *)(a1 + 113);
  if (v12 == 186)
  {
LABEL_8:
    uint64_t v13 = "unopened";
LABEL_24:
    sqlite3_log(21, "API call with %s database connection pointer", v13);
    goto LABEL_25;
  }
  if (v12 != 118)
  {
    if (v12 != 109)
    {
      uint64_t v13 = "invalid";
      goto LABEL_24;
    }
    goto LABEL_8;
  }
  if (!__s)
  {
LABEL_25:
    int v14 = 148830;
    goto LABEL_26;
  }
  if ((a3 & 0x80000000) == 0 && a3)
  {
    uint64_t v15 = 0;
    do
    {
      if (!__s[v15] && !__s[v15 + 1]) {
        break;
      }
      v15 += 2;
    }
    while ((int)v15 < a3);
    int v9 = v15;
  }
  uint64_t v16 = *(void *)(a1 + 24);
  if (v16) {
    xmmword_1EB21CA40(v16);
  }
  long long v40 = 0u;
  long long v41 = 0u;
  long long v37 = 0u;
  uint64_t v38 = 0;
  uint64_t v39 = a1;
  sub_1B0C79BBC((uint64_t)&v37, __s, v9, 2u, 0);
  if ((v38 & 0x200000000) != 0)
  {
    if (BYTE6(v38) != 1) {
      sub_1B0CD43EC((int *)&v37, 1);
    }
  }
  else
  {
    BYTE6(v38) = 1;
  }
  if (*(unsigned char *)(a1 + 103))
  {
    if (WORD2(v38) & 0x9000 | v40) {
      sub_1B0D180E4((uint64_t)&v37);
    }
    goto LABEL_50;
  }
  uint64_t v19 = (void *)*((void *)&v37 + 1);
  if (!*((void *)&v37 + 1))
  {
LABEL_50:
    unsigned int v20 = 0;
    goto LABEL_54;
  }
  unsigned int v20 = sub_1B0C7EAC0(a1, *((unsigned __int8 **)&v37 + 1), 0xFFFFFFFFLL, a4, 0, a5, &v36, v17);
  if (a6 && v36)
  {
    unint64_t v21 = (unint64_t)v19 + (v36 - v19);
    if ((int)v36 - (int)v19 < 0) {
      unint64_t v21 = -1;
    }
    unsigned int v22 = *(unsigned __int8 *)v19;
    if (*(unsigned char *)v19 && v21 > (unint64_t)v19)
    {
      int v23 = 1;
      int v24 = v19;
      do
      {
        int v27 = v23;
        if (v22 < 0xC0)
        {
          unsigned int v25 = *((unsigned __int8 *)v24 + 1);
          int v24 = (void *)((char *)v24 + 1);
          unsigned int v22 = v25;
        }
        else
        {
          do
          {
            unsigned int v28 = *((unsigned __int8 *)v24 + 1);
            int v24 = (void *)((char *)v24 + 1);
            unsigned int v22 = v28;
          }
          while ((v28 & 0xC0) == 0x80);
        }
        ++v23;
        if (v22) {
          BOOL v26 = (unint64_t)v24 >= v21;
        }
        else {
          BOOL v26 = 1;
        }
      }
      while (!v26);
      uint64_t v32 = __s + 1;
      uint64_t v29 = __s + 1;
      do
      {
        char v33 = *v29;
        v29 += 2;
        if ((v33 & 0xFC) == 0xD8)
        {
          int v34 = v32[2] & 0xFC;
          unsigned int v35 = v32 + 4;
          if (v34 == 220) {
            uint64_t v29 = v35;
          }
        }
        uint64_t v32 = v29;
        --v27;
      }
      while (v27);
    }
    else
    {
      LODWORD(v29) = __s + 1;
    }
    *a6 = &__s[(int)v29 + ~__s];
  }
  sub_1B0D05C10((void *)a1, v19);
  if (v20) {
    goto LABEL_56;
  }
LABEL_54:
  if (*(unsigned char *)(a1 + 103))
  {
LABEL_56:
    uint64_t v30 = sub_1B0D1806C(a1, v20);
    goto LABEL_57;
  }
  uint64_t v30 = 0;
LABEL_57:
  uint64_t v31 = *(void *)(a1 + 24);
  if (v31) {
    xmmword_1EB21CA50(v31);
  }
  return v30;
}

int sqlite3_data_count(sqlite3_stmt *pStmt)
{
  if (!pStmt) {
    return 0;
  }
  if (*(void *)(*(void *)pStmt + 24)) {
    xmmword_1EB21CA40();
  }
  if (*((void *)pStmt + 20)) {
    int v2 = *((unsigned __int16 *)pStmt + 130);
  }
  else {
    int v2 = 0;
  }
  if (*(void *)(*(void *)pStmt + 24)) {
    xmmword_1EB21CA50();
  }
  return v2;
}

const void *__cdecl sqlite3_column_text16(sqlite3_stmt *a1, int iCol)
{
  if (!a1) {
    goto LABEL_8;
  }
  uint64_t v4 = *(void *)(*(void *)a1 + 24);
  if (v4) {
    xmmword_1EB21CA40(v4);
  }
  uint64_t v5 = *((void *)a1 + 20);
  if (!v5 || *((unsigned __int16 *)a1 + 130) <= iCol)
  {
    uint64_t v7 = *(void *)a1;
    *(_DWORD *)(v7 + 80) = 25;
    sub_1B0D0E714(v7, 25);
LABEL_8:
    signed int v6 = &qword_1B0DE22A8;
    goto LABEL_9;
  }
  signed int v6 = (uint64_t *)(v5 + ((unint64_t)iCol << 6));
LABEL_9:
  int v8 = *((unsigned __int16 *)v6 + 10);
  if ((~v8 & 0x202) != 0 || *((unsigned char *)v6 + 22) != 2)
  {
    if (v8)
    {
      int v9 = 0;
      if (!a1) {
        return v9;
      }
    }
    else
    {
      int v9 = (const void *)sub_1B0D18254((int *)v6, 2);
      if (!a1) {
        return v9;
      }
    }
  }
  else
  {
    int v9 = (const void *)v6[1];
    if (!a1) {
      return v9;
    }
  }
  uint64_t v10 = *(void *)a1;
  unsigned int v11 = *((_DWORD *)a1 + 13);
  if (v11 || (int v12 = *(unsigned __int8 *)(v10 + 103), *(unsigned char *)(v10 + 103)))
  {
    int v12 = sub_1B0D1806C(v10, v11);
    uint64_t v10 = *(void *)a1;
  }
  *((_DWORD *)a1 + 13) = v12;
  uint64_t v13 = *(void *)(v10 + 24);
  if (v13) {
    xmmword_1EB21CA50(v13);
  }
  return v9;
}

int sqlite3_bind_text16(sqlite3_stmt *a1, int a2, const void *a3, int a4, void (__cdecl *a5)(void *))
{
  return sub_1B0CC3DB8((uint64_t *)a1, a2, (char *)a3, (int)(a4 & 0xFFFFFFFE), (uint64_t (*)(uint64_t))a5, 2u);
}

uint64_t sub_1B0CD4F54(uint64_t a1, char *__src, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  signed int v6 = __src;
  uint64_t v8 = *(unsigned int *)(a1 + 12);
  if ((int)v8 < 1 || a4 + (int)a3 <= v8)
  {
    if (a4 < 1)
    {
      if (!a4)
      {
        uint64_t v36 = *(void *)(a1 + 16);
        if (v36)
        {
          memcpy((void *)(v36 + 8), __src, (int)a3);
          return 0;
        }
      }
    }
    else if (*(void *)(a1 + 24) != a4)
    {
      sub_1B0CD52E4(a1, a4);
    }
    if ((int)v5 >= 1)
    {
      uint64_t v20 = *(void *)(a1 + 24);
      uint64_t v19 = 3082;
      while (1)
      {
        unsigned int v22 = *(void **)(a1 + 32);
        uint64_t v24 = *(int *)(a1 + 8);
        uint64_t v25 = v20 % v24;
        int v26 = v24 - v20 % v24;
        if ((int)v5 >= v26) {
          int v27 = v26;
        }
        else {
          int v27 = v5;
        }
        if (!v25)
        {
          uint64_t v28 = (v24 + 8);
          int v29 = sqlite3_initialize();
          if ((int)v28 < 1 || v29) {
            return v19;
          }
          uint64_t v30 = (void *)sub_1B0C7FC94(v28);
          if (!v30) {
            return 3082;
          }
          void *v30 = 0;
          if (v22) {
            unint64_t v21 = v22;
          }
          else {
            unint64_t v21 = (void *)(a1 + 16);
          }
          void *v21 = v30;
          *(void *)(a1 + 32) = v30;
          unsigned int v22 = v30;
        }
        memcpy((char *)v22 + v25 + 8, v6, v27);
        v6 += v27;
        uint64_t v20 = *(void *)(a1 + 24) + v27;
        *(void *)(a1 + 24) = v20;
        BOOL v23 = __OFSUB__(v5, v27);
        LODWORD(v5) = v5 - v27;
        if (((int)v5 < 0) ^ v23 | (v5 == 0)) {
          return 0;
        }
      }
    }
    return 0;
  }
  uint64_t v10 = *(void *)a1;
  LODWORD(v11) = *(_DWORD *)(a1 + 8);
  int v12 = *(void **)(a1 + 16);
  uint64_t v13 = *(void *)(a1 + 24);
  long long v14 = *(_OWORD *)(a1 + 32);
  uint64_t v46 = *(void *)(a1 + 48);
  uint64_t v15 = *(void *)(a1 + 56);
  uint64_t v16 = *(void *)(a1 + 64);
  uint64_t v17 = *(void *)(a1 + 72);
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v44 = v15;
  long long v45 = v14;
  uint64_t v42 = v17;
  uint64_t v43 = v16;
  uint64_t v18 = (*(uint64_t (**)(void))(v16 + 40))();
  uint64_t v19 = v18;
  if (v18)
  {
LABEL_10:
    if (*(void *)a1) {
      (*(void (**)(uint64_t))(*(void *)a1 + 8))(a1);
    }
    *(void *)a1 = v10;
    *(_DWORD *)(a1 + 8) = v11;
    *(_DWORD *)(a1 + 12) = v8;
    *(void *)(a1 + 16) = v12;
    *(void *)(a1 + 24) = v13;
    *(_OWORD *)(a1 + 32) = v45;
    *(void *)(a1 + 48) = v46;
    *(void *)(a1 + 56) = v44;
    *(void *)(a1 + 64) = v43;
    *(void *)(a1 + 72) = v42;
    return v19;
  }
  if (v12)
  {
    uint64_t v41 = v10;
    uint64_t v39 = v4;
    uint64_t v31 = 0;
    uint64_t v32 = v12;
    int v40 = v11;
    do
    {
      if (v31 + (int)v11 <= v13) {
        uint64_t v11 = v11;
      }
      else {
        uint64_t v11 = (v13 - v31);
      }
      uint64_t v33 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 24))(a1, v32 + 1, v11, v31);
      if (v33)
      {
        uint64_t v19 = v33;
        uint64_t v10 = v41;
        LODWORD(v11) = v40;
        goto LABEL_10;
      }
      v31 += (int)v11;
      uint64_t v32 = (void *)*v32;
    }
    while (v32);
    uint64_t v4 = v39;
    do
    {
      int v34 = (void *)*v12;
      unsigned int v35 = &off_1EB21C9E8;
      if (dword_1EB21C9C0)
      {
        if ((void)xmmword_1EB2201B0) {
          xmmword_1EB21CA40(xmmword_1EB2201B0);
        }
        qword_1EB220108 -= (int)off_1EB21C9F8(v12);
        --qword_1EB220150;
        off_1EB21C9E8(v12);
        int v12 = (void *)xmmword_1EB2201B0;
        if (!(void)xmmword_1EB2201B0) {
          goto LABEL_38;
        }
        unsigned int v35 = &xmmword_1EB21CA50;
      }
      (*v35)(v12);
LABEL_38:
      int v12 = v34;
    }
    while (v34);
  }
  uint64_t v38 = *(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)a1 + 24);

  return v38(a1, v6, v5, v4);
}

uint64_t sub_1B0CD52E4(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24) > a2)
  {
    if (a2)
    {
      uint64_t v4 = (void *)(a1 + 16);
      uint64_t v5 = *(int *)(a1 + 8);
      do
      {
        uint64_t v4 = (void *)*v4;
        if (v4) {
          BOOL v6 = v5 < a2;
        }
        else {
          BOOL v6 = 0;
        }
        v5 += *(int *)(a1 + 8);
      }
      while (v6);
      if (!v4)
      {
        uint64_t v10 = 0;
        goto LABEL_31;
      }
      uint64_t v7 = (void *)*v4;
      if (*v4)
      {
        do
        {
          uint64_t v8 = (void *)*v7;
          int v9 = (uint64_t (**)(void))&off_1EB21C9E8;
          if (dword_1EB21C9C0)
          {
            if ((void)xmmword_1EB2201B0) {
              xmmword_1EB21CA40();
            }
            qword_1EB220108 -= (int)off_1EB21C9F8(v7);
            --qword_1EB220150;
            off_1EB21C9E8(v7);
            uint64_t v7 = (void *)xmmword_1EB2201B0;
            if (!(void)xmmword_1EB2201B0) {
              goto LABEL_12;
            }
            int v9 = &xmmword_1EB21CA50;
          }
          ((void (*)(void *))*v9)(v7);
LABEL_12:
          uint64_t v7 = v8;
        }
        while (v8);
      }
      uint64_t v10 = v4;
LABEL_29:
      *uint64_t v4 = 0;
LABEL_31:
      *(void *)(a1 + 24) = a2;
      *(void *)(a1 + 32) = v10;
      *(void *)(a1 + 40) = 0;
      *(void *)(a1 + 48) = 0;
      return 0;
    }
    uint64_t v4 = (void *)(a1 + 16);
    uint64_t v11 = *(void **)(a1 + 16);
    if (!v11)
    {
LABEL_28:
      uint64_t v10 = 0;
      goto LABEL_29;
    }
    while (1)
    {
      int v12 = (void *)*v11;
      uint64_t v13 = (uint64_t (**)(void))&off_1EB21C9E8;
      if (dword_1EB21C9C0)
      {
        if ((void)xmmword_1EB2201B0) {
          xmmword_1EB21CA40();
        }
        qword_1EB220108 -= (int)off_1EB21C9F8(v11);
        --qword_1EB220150;
        off_1EB21C9E8(v11);
        uint64_t v11 = (void *)xmmword_1EB2201B0;
        if (!(void)xmmword_1EB2201B0) {
          goto LABEL_22;
        }
        uint64_t v13 = &xmmword_1EB21CA50;
      }
      ((void (*)(void *))*v13)(v11);
LABEL_22:
      uint64_t v11 = v12;
      if (!v12) {
        goto LABEL_28;
      }
    }
  }
  return 0;
}

uint64_t sub_1B0CD54C4(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 16);
  if (v1)
  {
    do
    {
      int v2 = (void *)*v1;
      unsigned int v3 = (uint64_t (**)(void))&off_1EB21C9E8;
      if (dword_1EB21C9C0)
      {
        if ((void)xmmword_1EB2201B0) {
          xmmword_1EB21CA40();
        }
        qword_1EB220108 -= (int)off_1EB21C9F8(v1);
        --qword_1EB220150;
        off_1EB21C9E8(v1);
        uint64_t v1 = (void *)xmmword_1EB2201B0;
        if (!(void)xmmword_1EB2201B0) {
          goto LABEL_4;
        }
        unsigned int v3 = &xmmword_1EB21CA50;
      }
      ((void (*)(void *))*v3)(v1);
LABEL_4:
      uint64_t v1 = v2;
    }
    while (v2);
  }
  return 0;
}

uint64_t sub_1B0CD559C(uint64_t a1, int a2, char *__s1)
{
  uint64_t v196 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (*(void *)a1)
    {
      if (*(uint64_t (**)(uint64_t, char *, signed int, uint64_t))(*(void *)a1 + 16) == sub_1B0C7D268
        && a2 != 106
        && *(_DWORD *)(a1 + 128) <= 3u
        && (*(_DWORD *)(a1 + 160) || (uint64_t v34 = *(void *)(a1 + 64)) != 0 && *(_DWORD *)(*(void *)v34 + 168)))
      {
        if (a2 != 101 || !__s1 || (int v7 = *(_DWORD *)__s1, (*(_DWORD *)__s1 & 0x80) == 0))
        {
          sqlite3_log(27, "denying fcntl on invalidated fd %d", *(_DWORD *)(a1 + 24));
          return 6922;
        }
        uint64_t v26 = *(void *)(a1 + 152);
        *(void *)(a1 + 152) = 0;
LABEL_95:
        *(void *)&v188.st_dev = 0;
        if (*(_UNKNOWN **)a1 == &unk_1F09A5320) {
          int v36 = *(_DWORD *)(a1 + 124) | 0x20;
        }
        else {
          int v36 = *(_DWORD *)(a1 + 124);
        }
        if ((v7 & 0x7F) != 0)
        {
          long long v37 = (const char *)sub_1B0D0826C();
          if (!v37 || (uint64_t v38 = v37, v39 = strlen(v37), v39 <= 0))
          {
            sqlite3_log(1, "Truncate database failed because TMPDIR is not set correctly\n");
            uint64_t v5 = 3;
            goto LABEL_310;
          }
        }
        else
        {
          uint64_t v38 = 0;
          int v39 = 0;
        }
        int v40 = v7 & 1;
        int v183 = v36;
        uint64_t v41 = sub_1B0D0A874(a1, v36, (uint64_t *)&v188.st_dev);
        if (!v41)
        {
          LODWORD(v43) = 0;
          if (v7)
          {
            int v185 = 0;
          }
          else
          {
            int v185 = 0;
            if (*(void *)&v188.st_dev)
            {
              LODWORD(v43) = 0;
              int v185 = 0;
              int v40 = *(_DWORD *)(*(void *)&v188.st_dev + 8);
            }
          }
LABEL_243:
          if ((v7 & 0x7F) == 0)
          {
            uint64_t v92 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, *(_DWORD *)(a1 + 128) & 1);
            BOOL v93 = 0;
LABEL_267:
            if ((v7 & 0x80) != 0 || (uint64_t v5 = v92, !v92))
            {
              sub_1B0D0AFB8(a1, 0);
              uint64_t v5 = 0;
            }
            (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, 3);
            if (v185)
            {
              unsigned int v97 = *(unsigned __int8 *)(a1 + 28);
              if (v43 < v97)
              {
                (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 64))(a1, 1);
                unsigned int v97 = *(unsigned __int8 *)(a1 + 28);
              }
              if (v97 > v43) {
                (*(void (**)(uint64_t, void))(*(void *)a1 + 64))(a1, 0);
              }
            }
            else if (*(void *)&v188.st_dev)
            {
              sub_1B0D0B30C(*(uint64_t *)&v188.st_dev);
            }
            if ((v7 & 0x80) == 0 || !(v93 | v92)) {
              goto LABEL_306;
            }
            __strlcpy_chk();
            __strlcat_chk();
            __strlcpy_chk();
            __strlcat_chk();
            if (ftruncate(*(_DWORD *)(a1 + 24), 0))
            {
              int v98 = *__error();
              if (v98)
              {
                *(_DWORD *)(a1 + 32) = v98;
                uint64_t v5 = 10;
                char v99 = 1;
                goto LABEL_285;
              }
              char v99 = 0;
            }
            else
            {
              char v99 = 0;
              int v98 = 0;
            }
            uint64_t v5 = 0;
LABEL_285:
            uint64_t v100 = sub_1B0D06D40(__strerrbuf, 2, 0, 0);
            uint64_t v101 = v100;
            if ((v100 & 0x80000000) != 0)
            {
              if (*__error() != 2)
              {
LABEL_287:
                int v102 = *__error();
                if (v102) {
                  char v103 = v99;
                }
                else {
                  char v103 = 1;
                }
                if ((v103 & 1) == 0)
                {
                  *(_DWORD *)(a1 + 32) = v102;
                  uint64_t v5 = 10;
                }
LABEL_294:
                uint64_t v104 = sub_1B0D06D40((char *)__buf, 2, 0, 0);
                uint64_t v105 = v104;
                if ((v104 & 0x80000000) != 0)
                {
                  if (*__error() == 2)
                  {
LABEL_303:
                    if ((v101 & 0x80000000) == 0)
                    {
                      fsync(v101);
                      off_1EC5263A0(v101);
                    }
                    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, 3);
LABEL_306:
                    if (v5)
                    {
                      uint64_t v107 = *(const char **)(a1 + 56);
                      if (!v107) {
                        uint64_t v107 = "<dst path null>";
                      }
                      sqlite3_log(1, "unixTruncateDatabase() failed with %d for replacing '%s' with flags %x\n", v5, v107, v183);
                    }
                    goto LABEL_310;
                  }
                }
                else if (!ftruncate(v104, 0))
                {
LABEL_302:
                  fsync(v105);
                  off_1EC5263A0(v105);
                  goto LABEL_303;
                }
                uint64_t v106 = __error();
                if (!(v102 | v98) && *v106)
                {
                  *(_DWORD *)(a1 + 32) = 0;
                  uint64_t v5 = 10;
                }
                if ((v105 & 0x80000000) != 0) {
                  goto LABEL_303;
                }
                goto LABEL_302;
              }
            }
            else if (ftruncate(v100, 0))
            {
              goto LABEL_287;
            }
            int v102 = 0;
            goto LABEL_294;
          }
          int v88 = (char *)malloc_type_calloc(1uLL, (v39 + 26), 0xFDBD9804uLL);
          strlcpy(v88, v38, (v39 + 26));
          if (v88[v39 - 1] != 47) {
            strlcat(v88, "/", (v39 + 26));
          }
          strlcat(v88, "tmpsqlitetruncatedbXXXXXX", (v39 + 26));
          uint64_t v89 = mkstemp(v88);
          if (v89 == -1)
          {
            *(_DWORD *)(a1 + 32) = *__error();
            BOOL v93 = 1;
            uint64_t v92 = 10;
LABEL_266:
            free(v88);
            goto LABEL_267;
          }
          uint64_t v90 = v89;
          __buf[0] = 0;
          uint64_t v91 = sub_1B0C77698(v88, (uint64_t *)__buf, 0x26u, 0);
          if (v91)
          {
            uint64_t v92 = v91;
            errmsg = 0;
          }
          else
          {
            int v94 = *(_DWORD *)(a1 + 168);
            if (v94 >= 1) {
              sqlite3_key_v2((uint64_t)__buf[0], "main", *(unsigned char **)(a1 + 176), v94);
            }
            errmsg = 0;
            if ((v7 & 0x70) != 0
              && (strcpy(&__strerrbuf[44], "pragma page_size=4096"),
                  strcpy(&__strerrbuf[66], "pragma page_size=8192"),
                  strcpy(__strerrbuf, "pragma page_size=1024"),
                  strcpy(&__strerrbuf[22], "pragma page_size=2048"),
                  uint64_t v95 = sqlite3_exec(__buf[0], &__strerrbuf[22 * ((v7 & 0x70) >> 4) - 22], 0, 0, &errmsg), v95))
            {
              uint64_t v92 = v95;
            }
            else
            {
              int v108 = ((v7 & 0xC) >> 2) - 1;
              strcpy(__strerrbuf, "pragma auto_vacuum=0");
              strcpy(&__strerrbuf[21], "pragma auto_vacuum=1");
              strcpy(&__strerrbuf[42], "pragma auto_vacuum=2");
              if ((v7 & 0xC) == 0) {
                int v108 = 2;
              }
              uint64_t v92 = sqlite3_exec(__buf[0], &__strerrbuf[21 * v108], 0, 0, &errmsg);
              if (!v92 && v40) {
                uint64_t v92 = sqlite3_exec(__buf[0], "pragma journal_mode=wal", 0, 0, &errmsg);
              }
              if (!v92) {
                goto LABEL_259;
              }
            }
          }
          if (__buf[0]) {
            sqlite3_log(1, "failed to set '%s' on truncated database %s, %d: %s\n");
          }
          else {
            sqlite3_log(1, "failed to open temp database '%s' to reset truncated database %s with flags %x: %d\n");
          }
LABEL_259:
          if (__buf[0])
          {
            *(_DWORD *)__strerrbuf = 0;
            sqlite3_file_control(__buf[0], 0, 10, __strerrbuf);
            sub_1B0CF369C((uint64_t)__buf[0], 0);
          }
          lseek(v90, 0, 0);
          lseek(*(_DWORD *)(a1 + 24), 0, 0);
          if (sub_1B0D0ADA8(v90, *(unsigned int *)(a1 + 24)))
          {
            int v96 = *__error();
            if (v96 == 12)
            {
              uint64_t v92 = 7;
            }
            else
            {
              *(_DWORD *)(a1 + 32) = v96;
              uint64_t v92 = 10;
            }
          }
          fsync(*(_DWORD *)(a1 + 24));
          close(v90);
          unlink(v88);
          BOOL v93 = v92 != 0;
          goto LABEL_266;
        }
        uint64_t v5 = v41;
        if (v41 == 26 || v41 == 11)
        {
          uint64_t v43 = *(unsigned __int8 *)(a1 + 28);
          if (v43 > 3
            || (uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 56))(a1, 1), !v5))
          {
            uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 56))(a1, 4);
            if (!v5)
            {
              int v51 = 1;
LABEL_162:
              int v185 = v51;
              if (v7) {
                int v40 = 1;
              }
              else {
                v40 = !(*(unsigned int (**)(uint64_t, char *, uint64_t, void))(*(void *)a1 + 16))(a1, __strerrbuf, 20, 0)&& (*(void *)__strerrbuf == 0x66206574694C5153? (BOOL v59 = *(void *)&__strerrbuf[7] == 0x332074616D726F66): (BOOL v59 = 0), v59)&& __strerrbuf[18] == 2&& __strerrbuf[19] == 2;
              }
              goto LABEL_243;
            }
          }
          if (*(unsigned __int8 *)(a1 + 28) > v43) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 64))(a1, v43);
          }
          int v51 = 1;
        }
        else
        {
          int v51 = 0;
        }
        LODWORD(v43) = 0;
        if ((v7 & 0x80) == 0 && v5)
        {
LABEL_310:
          if (v26) {
            *(void *)(a1 + 152) = v26;
          }
          return v5;
        }
        goto LABEL_162;
      }
    }
  }
  uint64_t v5 = 12;
  switch(a2)
  {
    case 1:
      uint64_t v5 = 0;
      *(_DWORD *)__s1 = *(unsigned __int8 *)(a1 + 28);
      return v5;
    case 2:
    case 3:
      if (a2 != 3)
      {
        if (a2 != 2) {
          return 1;
        }
        if (*(_UNKNOWN **)a1 == &unk_1F09A5320)
        {
          uint64_t v45 = *(void *)(a1 + 40);
          sub_1B0D083F0(a1);
          BOOL v6 = *(const char **)(v45 + 24);
          if (!v6) {
            BOOL v6 = ":auto: (not held)";
          }
        }
        else
        {
          BOOL v6 = 0;
        }
        uint64_t v5 = 0;
        *(void *)__s1 = v6;
        return v5;
      }
      if (!__s1) {
        return *(void *)a1 == (void)&unk_1F09A5320;
      }
      if (*(_UNKNOWN **)a1 != &unk_1F09A5320)
      {
        return sub_1B0D08B00(a1, __s1);
      }
      if (strcmp(__s1, ":auto:"))
      {
        uint64_t v57 = *(void *)(a1 + 40);
        unsigned int v58 = *(const char **)(v57 + 24);
        if (!v58 || strncmp(*(const char **)(v57 + 24), __s1, 0x400uLL))
        {
          if (*(unsigned char *)(a1 + 28)) {
            return 5;
          }
          if (*__s1 && (!v58 || strncmp(v58, __s1, 0x400uLL)))
          {
            uint64_t v81 = *(void *)(v57 + 16);
            *(void *)(v57 + 16) = 0;
            *(_DWORD *)(v57 + 40) = 0;
            if (!v81) {
              goto LABEL_226;
            }
            uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v81 + 8))(v81);
            if (v5) {
              return v5;
            }
            v82 = &off_1EB21C9E8;
            if (dword_1EB21C9C0)
            {
              if ((void)xmmword_1EB2201B0) {
                xmmword_1EB21CA40(xmmword_1EB2201B0);
              }
              qword_1EB220108 -= (int)off_1EB21C9F8(v81);
              --qword_1EB220150;
              off_1EB21C9E8(v81);
              uint64_t v81 = xmmword_1EB2201B0;
              if (!(void)xmmword_1EB2201B0)
              {
LABEL_226:
                if (v58)
                {
                  unsigned int v83 = (void (**)(const char *))&off_1EB21C9E8;
                  if (dword_1EB21C9C0)
                  {
                    if ((void)xmmword_1EB2201B0) {
                      xmmword_1EB21CA40(xmmword_1EB2201B0);
                    }
                    qword_1EB220108 -= (int)off_1EB21C9F8(v58);
                    --qword_1EB220150;
                    off_1EB21C9E8(v58);
                    unsigned int v58 = (const char *)xmmword_1EB2201B0;
                    if (!(void)xmmword_1EB2201B0) {
                      goto LABEL_233;
                    }
                    unsigned int v83 = (void (**)(const char *))&xmmword_1EB21CA50;
                  }
                  (*v83)(v58);
                }
LABEL_233:
                size_t v84 = strlen(__s1) + 1;
                BOOL v85 = (void *)sub_1B0C7FC94(v84);
                BOOL v86 = v85;
                if (v85) {
                  memcpy(v85, __s1, v84);
                }
                uint64_t v5 = 0;
                *(void *)(v57 + 24) = v86;
                return v5;
              }
              v82 = &xmmword_1EB21CA50;
            }
            (*v82)(v81);
            goto LABEL_226;
          }
        }
      }
      return 0;
    case 4:
      uint64_t v5 = 0;
      *(_DWORD *)__s1 = *(_DWORD *)(a1 + 32);
      return v5;
    case 5:
      *(void *)(a1 + 136) = *(void *)__s1;
      uint64_t v8 = *(void *)__s1;
      if (*(int *)(a1 + 72) < 1) {
        goto LABEL_129;
      }
      long long v195 = 0u;
      long long v194 = 0u;
      long long v193 = 0u;
      memset(__strerrbuf, 0, sizeof(__strerrbuf));
      if (off_1EC526400(*(unsigned int *)(a1 + 24), __strerrbuf))
      {
        *(_DWORD *)(a1 + 32) = *__error();
        return 1802;
      }
      uint64_t v46 = (v8 + *(int *)(a1 + 72) - 1) / *(int *)(a1 + 72) * *(int *)(a1 + 72);
      if (v46 <= (uint64_t)v193) {
        goto LABEL_129;
      }
      uint64_t v47 = (int)v194;
      uint64_t v48 = v193 + (int)v194 + ~((uint64_t)v193 % (int)v194);
      uint64_t v49 = v46 - 1 + (int)v194;
      if (v48 >= v49) {
        goto LABEL_129;
      }
      do
      {
        if (v48 >= v46) {
          off_t v50 = v46 - 1;
        }
        else {
          off_t v50 = v48;
        }
        if (sub_1B0D0751C(a1, v50, &byte_1B0DE9952, 1) != 1) {
          return 778;
        }
        uint64_t v48 = v50 + v47;
      }
      while (v50 + v47 < v49);
LABEL_129:
      if (*(uint64_t *)(a1 + 96) < 1 || *(void *)(a1 + 80) >= v8) {
        return 0;
      }
      if (*(int *)(a1 + 72) > 0) {
        return sub_1B0D07EEC(a1, v8);
      }
      uint64_t v69 = *(unsigned int *)(a1 + 24);
      while (1)
      {
        int v70 = off_1EC526418(v69, v8);
        if ((v70 & 0x80000000) == 0) {
          break;
        }
        if (*__error() != 4) {
          goto LABEL_211;
        }
      }
      if (!v70) {
        return sub_1B0D07EEC(a1, v8);
      }
LABEL_211:
      *(_DWORD *)(a1 + 32) = *__error();
      uint64_t v78 = *(const char **)(a1 + 56);
      int v79 = *__error();
      memset(__strerrbuf, 0, 80);
      strerror_r(v79, __strerrbuf, 0x4FuLL);
      BOOL v80 = &byte_1B0DE9952;
      if (v78) {
        BOOL v80 = v78;
      }
      uint64_t v5 = 1546;
      sqlite3_log(1546, "os_unix.c:%d: (%d) %s(%s) - %s", 44827, v79, "ftruncate", v80, __strerrbuf);
      return v5;
    case 6:
      uint64_t v5 = 0;
      *(_DWORD *)(a1 + 72) = *(_DWORD *)__s1;
      return v5;
    case 10:
      if ((*(_DWORD *)__s1 & 0x80000000) != 0)
      {
        uint64_t v5 = 0;
        *(_DWORD *)__s1 = (*(unsigned __int16 *)(a1 + 30) >> 2) & 1;
      }
      else
      {
        __int16 v9 = *(_WORD *)(a1 + 30);
        uint64_t v5 = 0;
        if (*(_DWORD *)__s1) {
          *(_WORD *)(a1 + 30) = v9 | 4;
        }
        else {
          *(_WORD *)(a1 + 30) = v9 & 0xFFFB;
        }
      }
      return v5;
    case 12:
      uint64_t v5 = 0;
      *(void *)__s1 = sqlite3_mprintf("%s", *(const char **)(*(void *)(a1 + 8) + 24));
      return v5;
    case 13:
      if ((*(_DWORD *)__s1 & 0x80000000) != 0)
      {
        uint64_t v5 = 0;
        *(_DWORD *)__s1 = (*(unsigned __int16 *)(a1 + 30) >> 4) & 1;
      }
      else
      {
        __int16 v10 = *(_WORD *)(a1 + 30);
        uint64_t v5 = 0;
        if (*(_DWORD *)__s1) {
          *(_WORD *)(a1 + 30) = v10 | 0x10;
        }
        else {
          *(_WORD *)(a1 + 30) = v10 & 0xFFEF;
        }
      }
      return v5;
    case 16:
      uint64_t v11 = *(int *)(*(void *)(a1 + 8) + 8);
      if (sqlite3_initialize()) {
        return 0;
      }
      int v12 = (char *)sub_1B0C7FC94(v11);
      if (!v12) {
        return 0;
      }
      uint64_t v13 = v12;
      sub_1B0D07DA4(*(_DWORD *)(*(void *)(a1 + 8) + 8), v12);
      uint64_t v5 = 0;
      *(void *)__s1 = v13;
      return v5;
    case 18:
      uint64_t v14 = *(void *)__s1;
      if (*(void *)__s1 >= qword_1EB21CAF0) {
        uint64_t v14 = qword_1EB21CAF0;
      }
      *(void *)__s1 = *(void *)(a1 + 96);
      if (v14 < 0) {
        return 0;
      }
      if (v14 == *(void *)(a1 + 96)) {
        return 0;
      }
      if (*(_DWORD *)(a1 + 76)) {
        return 0;
      }
      uint64_t v16 = (void *)(a1 + 80);
      uint64_t v15 = *(void *)(a1 + 80);
      *(void *)(a1 + 96) = v14;
      if (v15 < 1) {
        return 0;
      }
      uint64_t v17 = *(void *)(a1 + 104);
      if (v17)
      {
        off_1EC5265B0(v17, *(void *)(a1 + 88));
        *(void *)(a1 + 104) = 0;
        *uint64_t v16 = 0;
        *(void *)(a1 + 88) = 0;
      }
      return sub_1B0D07EEC(a1, -1);
    case 20:
      uint64_t v19 = *(void *)(a1 + 16);
      if (v19)
      {
        long long v195 = 0u;
        long long v194 = 0u;
        long long v193 = 0u;
        memset(__strerrbuf, 0, sizeof(__strerrbuf));
        if (off_1EC5263E8(*(void *)(a1 + 56), __strerrbuf)) {
          LODWORD(v19) = 1;
        }
        else {
          LODWORD(v19) = *(void *)&__strerrbuf[8] != *(void *)(*(void *)(a1 + 16) + 8);
        }
      }
      uint64_t v5 = 0;
      *(_DWORD *)__s1 = v19;
      return v5;
    case 34:
      uint64_t v5 = 0;
      int v20 = *(_DWORD *)(a1 + 132);
      *(_DWORD *)(a1 + 132) = *(_DWORD *)__s1;
      *(_DWORD *)__s1 = v20;
      return v5;
    case 40:
      *(_DWORD *)__s1 = 0;
      unint64_t v21 = *(uint64_t **)(a1 + 64);
      if (!v21) {
        return 0;
      }
      uint64_t v22 = *v21;
      *(void *)&char __strerrbuf[16] = 0x300000000;
      *(_OWORD *)__strerrbuf = xmmword_1B0DE14B0;
      uint64_t v23 = *(void *)(v22 + 8);
      if (v23) {
        xmmword_1EB21CA40(v23);
      }
      uint64_t v24 = *(unsigned int *)(v22 + 24);
      int v25 = off_1EC526430(v24, 92);
      if (v25 != -1) {
        goto LABEL_54;
      }
      if (*__error() != 45 && *__error() != 25) {
        goto LABEL_115;
      }
      int v25 = off_1EC526430(v24, 7);
LABEL_54:
      if ((v25 & 0x80000000) == 0)
      {
        uint64_t v5 = 0;
        *(_DWORD *)__s1 = *(unsigned __int16 *)&__strerrbuf[20] != 2;
      }
      else
      {
LABEL_115:
        uint64_t v5 = 3850;
      }
      uint64_t v44 = *(void *)(v22 + 8);
      if (v44) {
        xmmword_1EB21CA50(v44);
      }
      return v5;
    case 101:
      uint64_t v26 = 0;
      if (__s1) {
        int v7 = *(_DWORD *)__s1;
      }
      else {
        LOBYTE(v7) = 0;
      }
      goto LABEL_95;
    case 102:
      if (!__s1)
      {
        unsigned int v35 = "NULL";
LABEL_160:
        uint64_t v5 = 21;
        sqlite3_log(21, "API call with %s database connection pointer", v35);
        return v5;
      }
      int v27 = __s1[113];
      if (v27 == 186) {
        goto LABEL_62;
      }
      if (v27 != 118)
      {
        if (v27 == 109) {
LABEL_62:
        }
          uint64_t v28 = "unopened";
        else {
          uint64_t v28 = "invalid";
        }
        sqlite3_log(21, "API call with %s database connection pointer", v28);
        int v56 = __s1[113];
        v189 = 0;
        errmsg = 0;
        if (v56 == 186)
        {
LABEL_153:
          unsigned int v35 = "unopened";
          goto LABEL_160;
        }
        if (v56 != 118)
        {
          if (v56 != 109)
          {
            unsigned int v35 = "invalid";
            goto LABEL_160;
          }
          goto LABEL_153;
        }
LABEL_195:
        memset(&v188, 0, sizeof(v188));
        uint64_t v71 = *(void *)(*((void *)__s1 + 4) + 8);
        if (v71)
        {
          uint64_t v72 = **(void **)(v71 + 8);
          if (*(unsigned char *)(v72 + 19) || *(_UNKNOWN **)v72 == &unk_1EB21D5B8) {
            int8x16x2_t v73 = (const char *)&unk_1B0DE20F1;
          }
          else {
            int8x16x2_t v73 = *(const char **)(v72 + 216);
          }
        }
        else
        {
          int8x16x2_t v73 = 0;
        }
        int8x16x2_t v74 = (const char *)sub_1B0D0826C();
        if (v74 && (int16x8_t v75 = v74, v76 = strlen(v74), v76 > 0))
        {
          if (stat(*(const char **)(a1 + 56), &v188)) {
            BOOL v77 = *__error() == 2;
          }
          else {
            BOOL v77 = v188.st_size == 0;
          }
          int v109 = v77;
          if (*(_UNKNOWN **)a1 == &unk_1F09A5320) {
            int v110 = *(_DWORD *)(a1 + 124) | 0x20;
          }
          else {
            int v110 = *(_DWORD *)(a1 + 124);
          }
          uint64_t v111 = sub_1B0D0A874(a1, v110, (uint64_t *)&errmsg);
          if (!v111)
          {
            int v182 = v110;
            LODWORD(v112) = 0;
            int v113 = 0;
            int v180 = *((_DWORD *)errmsg + 2) != 0;
            LOBYTE(v5) = 1;
            goto LABEL_337;
          }
          uint64_t v5 = v111;
          if (v111 == 26 || v111 == 11)
          {
            uint64_t v112 = *(unsigned __int8 *)(a1 + 28);
            if (v112 <= 3
              && (uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 56))(a1, 1), v5)
              || (uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 56))(a1, 4), v5))
            {
              if (*(unsigned __int8 *)(a1 + 28) > v112) {
                (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 64))(a1, v112);
              }
              return v5;
            }
            int v182 = v110;
            int v180 = -1;
            int v113 = 1;
LABEL_337:
            uint64_t v114 = *((void *)__s1 + 3);
            if (v114) {
              xmmword_1EB21CA40(v114);
            }
            char v181 = v5;
            if (*((int *)__s1 + 10) < 1 || (uint64_t v115 = *(void *)(*((void *)__s1 + 4) + 8)) == 0)
            {
              v123 = 0;
              v124 = 0;
              signed int v125 = 0;
              int v184 = 0;
              uint64_t v186 = 0;
              char v126 = 1;
              goto LABEL_395;
            }
            uint64_t v186 = *(void *)(*((void *)__s1 + 4) + 8);
            if (*(unsigned char *)(v115 + 17))
            {
              ++*(_DWORD *)(v115 + 20);
              if (!*(unsigned char *)(v115 + 18))
              {
                sub_1B0D12478(v115);
                uint64_t v115 = v186;
              }
            }
            uint64_t v116 = *(void *)(**(void **)(v115 + 8) + 72);
            if (!*(void *)v116)
            {
              v123 = 0;
              v124 = 0;
              signed int v125 = 0;
              int v184 = 0;
LABEL_394:
              char v126 = 0;
LABEL_395:
              int v127 = -1;
              uint64_t v5 = 2;
              v128 = v189;
              if (!v189)
              {
LABEL_397:
                if (v125)
                {
                  unlink(v125);
                  free(v125);
                }
                if (v124)
                {
                  unlink(v124);
                  free(v124);
                }
                if (v123)
                {
                  unlink(v123);
                  free(v123);
                }
                if ((v126 & 1) == 0)
                {
                  if (*(unsigned char *)(v186 + 17))
                  {
                    int v135 = *(_DWORD *)(v186 + 20) - 1;
                    *(_DWORD *)(v186 + 20) = v135;
                    if (!v135) {
                      sub_1B0D12558(v186);
                    }
                  }
                }
                uint64_t v136 = *((void *)__s1 + 3);
                if (v136) {
                  xmmword_1EB21CA50(v136);
                }
                if (v181)
                {
                  sub_1B0D0B30C((uint64_t)errmsg);
                }
                else
                {
                  unsigned int v137 = *(unsigned __int8 *)(a1 + 28);
                  if (v112 < v137)
                  {
                    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 64))(a1, 1);
                    unsigned int v137 = *(unsigned __int8 *)(a1 + 28);
                  }
                  if (v137 > v112) {
                    (*(void (**)(uint64_t, void))(*(void *)a1 + 64))(a1, 0);
                  }
                }
                if (!(v184 | v5) && (v127 & 0x80000000) == 0)
                {
                  __buf[0] = 0;
                  if (!sub_1B0C77698(*(char **)(a1 + 56), (uint64_t *)__buf, v182 | 6u, 0))
                  {
                    sqlite3_busy_timeout(__buf[0], *((_DWORD *)__s1 + 193));
                    sqlite3_exec(__buf[0], "PRAGMA schema_version", 0, 0, 0);
                  }
                  if (__buf[0]) {
                    sub_1B0CF369C((uint64_t)__buf[0], 0);
                  }
                }
                if (v5)
                {
                  uint64_t v138 = *(const char **)(a1 + 56);
                  if (!v138) {
                    uint64_t v138 = "<dst path null>";
                  }
                  unsigned int v139 = "<src path null>";
                  if (v73) {
                    unsigned int v139 = v73;
                  }
                  sqlite3_log(1, "unixReplaceDatabase() failed with error %d for replacing '%s' with '%s' \n", v5, v138, v139);
                }
                return v5;
              }
LABEL_396:
              sub_1B0CF369C((uint64_t)v128, 0);
              v189 = 0;
              goto LABEL_397;
            }
            if ((*(_DWORD *)(v116 + 120) & 2) != 0) {
              int v117 = 2;
            }
            else {
              int v117 = 1;
            }
            int v118 = v117 | *(_DWORD *)(v116 + 124);
            if (*(_UNKNOWN **)v116 == &unk_1F09A5320) {
              unsigned int v119 = v118 | 0x20;
            }
            else {
              unsigned int v119 = v118;
            }
            uint64_t v179 = v116;
            unsigned int v178 = v119;
            uint64_t v120 = sub_1B0C77698(*(char **)(v116 + 56), (uint64_t *)&v189, v119, 0);
            if (v120)
            {
              uint64_t v5 = v120;
              LODWORD(v121) = 0;
              int v184 = 0;
              int v122 = 0;
              int v177 = -1;
            }
            else
            {
              __buf[0] = 0;
              int v131 = sqlite3_file_control(v189, 0, 7, __buf);
              if (__buf[0]) {
                BOOL v132 = v131 == 0;
              }
              else {
                BOOL v132 = 0;
              }
              if (v132) {
                v133 = __buf[0];
              }
              else {
                v133 = (sqlite3 *)v179;
              }
              int v134 = sub_1B0D0ACF0((uint64_t)v133);
              int v177 = v134 == 1;
              sqlite3_busy_timeout(v189, *((_DWORD *)__s1 + 193));
              uint64_t v5 = sqlite3_exec(v189, "BEGIN DEFERRED; PRAGMA schema_version", 0, 0, 0);
              if (v5 == 14 && v134 == 1)
              {
                sub_1B0CF369C((uint64_t)v189, 0);
                v189 = 0;
                uint64_t v5 = sub_1B0C77698(*(char **)(v179 + 56), (uint64_t *)&v189, v178 & 0xFFFFFFFC | 2, 0);
                if (!v5)
                {
                  sqlite3_busy_timeout(v189, *((_DWORD *)__s1 + 193));
                  uint64_t v5 = sqlite3_exec(v189, "BEGIN DEFERRED; PRAGMA schema_version", 0, 0, 0);
                }
              }
              if (v134 == 1 && v5 == 14)
              {
                if (v189)
                {
                  sub_1B0CF369C((uint64_t)v189, 0);
                  LODWORD(v121) = 0;
                  uint64_t v5 = 0;
                  int v184 = 0;
                  v189 = 0;
                }
                else
                {
                  LODWORD(v121) = 0;
                  uint64_t v5 = 0;
                  int v184 = 0;
                }
                int v122 = 1;
                goto LABEL_353;
              }
              if (v180 == v177) {
                int v146 = 1;
              }
              else {
                int v146 = v113;
              }
              int v122 = (v109 | v146) ^ 1;
              if (v5 == 26 || v5 == 11)
              {
                uint64_t v121 = *(unsigned __int8 *)(v179 + 28);
                if (*(unsigned char *)(v179 + 28))
                {
                  uint64_t v5 = 0;
                }
                else
                {
                  int v184 = 1;
                  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v179 + 56))(v179, 1);
                  if (!v5)
                  {
                    LODWORD(v121) = 0;
                    goto LABEL_353;
                  }
                  if (*(unsigned char *)(v179 + 28)) {
                    (*(void (**)(uint64_t, uint64_t))(*(void *)v179 + 64))(v179, v121);
                  }
                  LODWORD(v121) = 0;
                }
                int v184 = 1;
              }
              else
              {
                LODWORD(v121) = 0;
                int v184 = 0;
              }
            }
LABEL_353:
            if ((*(_DWORD *)(v179 + 24) & 0x80000000) == 0)
            {
              if (v5)
              {
                v123 = 0;
                v124 = 0;
                signed int v125 = 0;
                char v126 = 0;
                int v127 = -1;
                v128 = v189;
                if (!v189) {
                  goto LABEL_397;
                }
                goto LABEL_396;
              }
              int v171 = v121;
              unsigned int __fd = *(_DWORD *)(v179 + 24);
              if (!v122)
              {
                LODWORD(v5) = 0;
                __dst = 0;
                v173 = 0;
                v174 = 0;
                unsigned int v175 = -1;
                int v141 = -1;
                goto LABEL_461;
              }
              __buf[0] = 0;
              uint64_t v140 = (char *)malloc_type_calloc(1uLL, (v76 + 25), 0x2D3373B6uLL);
              strlcpy(v140, v75, (v76 + 25));
              __dst = v140;
              if (v140[v76 - 1] != 47) {
                strlcat(v140, "/", (v76 + 25));
              }
              strlcat(v140, "tmpsqlitereplacedbXXXXXX", (v76 + 25));
              int v141 = mkstemp(v140);
              if (v141 == -1)
              {
                v173 = 0;
                v174 = 0;
                *(_DWORD *)(a1 + 32) = *__error();
                LODWORD(v5) = 10;
                unsigned int v175 = -1;
                goto LABEL_461;
              }
              size_t v142 = (v76 + 30);
              uint64_t v143 = (char *)malloc_type_calloc(1uLL, v142, 0x5924BD1EuLL);
              strlcpy(v143, v140, v142);
              v174 = v143;
              strlcat(v143, "-wal", v142);
              v144 = (char *)malloc_type_calloc(1uLL, v142, 0x18F2F39CuLL);
              strlcpy(v144, v140, v142);
              v173 = v144;
              strlcat(v144, "-shm", v142);
              lseek(__fd, 0, 0);
              lseek(v141, 0, 0);
              if (fcopyfile(__fd, v141, 0, 8u))
              {
                int v145 = *__error();
                if (v145 == 12)
                {
                  LODWORD(v5) = 7;
                }
                else
                {
                  *(_DWORD *)(a1 + 32) = v145;
                  LODWORD(v5) = 10;
                }
                fsync(v141);
                goto LABEL_458;
              }
              fsync(v141);
              __strlcpy_chk();
              __strlcat_chk();
              uint64_t v147 = sub_1B0D06D40(__strerrbuf, 0, 0, 0);
              if ((v147 & 0x80000000) == 0)
              {
                uint64_t v148 = v147;
                unsigned int v175 = sub_1B0D06D40(v174, 1538, 0, 0);
                if ((v175 & 0x80000000) != 0)
                {
                  if (*__error() == 2)
                  {
                    off_1EC5263A0(v148);
                    goto LABEL_501;
                  }
                  *(_DWORD *)(a1 + 32) = *__error();
                  off_1EC5263A0(v148);
                  LODWORD(v5) = 10;
                }
                else
                {
                  lseek(v175, 0, 0);
                  lseek(v148, 0, 0);
                  int v149 = sub_1B0D0ADA8(v148, v175);
                  if (v149)
                  {
                    int v150 = *__error();
                    if (v150 == 12)
                    {
                      LODWORD(v5) = 7;
                    }
                    else
                    {
                      *(_DWORD *)(a1 + 32) = v150;
                      LODWORD(v5) = 10;
                    }
                  }
                  else
                  {
                    LODWORD(v5) = 0;
                  }
                  fsync(v175);
                  off_1EC5263A0(v148);
                  if (!v149) {
                    goto LABEL_501;
                  }
                }
LABEL_459:
                if (__buf[0]) {
                  sub_1B0CF369C((uint64_t)__buf[0], 0);
                }
                goto LABEL_461;
              }
              if (*__error() != 2)
              {
                *(_DWORD *)(a1 + 32) = *__error();
                LODWORD(v5) = 10;
LABEL_458:
                unsigned int v175 = -1;
                goto LABEL_459;
              }
              unsigned int v175 = -1;
LABEL_501:
              int v157 = sub_1B0C77698(__dst, (uint64_t *)__buf, v178 & 0xFFFFFFFC | 2, 0);
              if (v157)
              {
                LODWORD(v5) = v157;
                goto LABEL_459;
              }
              pStmt = 0;
              sqlite3_busy_timeout(__buf[0], *((_DWORD *)__s1 + 193));
              if (!sub_1B0C7EAC0((uint64_t)__s1, "PRAGMA main.cache_size", 0xFFFFFFFFLL, 0, 0, &pStmt, 0, v158))
              {
                int v169 = sqlite3_step(pStmt);
                if (v169 == 100)
                {
                  int v159 = sqlite3_column_int(pStmt, 0);
                  sqlite3_finalize(pStmt);
                  if (v159 < 1) {
                    goto LABEL_508;
                  }
                  goto LABEL_505;
                }
                sqlite3_finalize(pStmt);
                if (!v169) {
                  goto LABEL_508;
                }
              }
              int v159 = 256;
LABEL_505:
              long long v160 = (unsigned __int8 *)sqlite3_mprintf("PRAGMA cache_size=%d", v159);
              sub_1B0C7EAC0((uint64_t)__buf[0], v160, 0xFFFFFFFFLL, 128, 0, &pStmt, 0, v161);
              while (sqlite3_step(pStmt) == 100)
                ;
              sqlite3_finalize(pStmt);
              sqlite3_free(v160);
LABEL_508:
              int v163 = 0;
              if (sub_1B0C7EAC0((uint64_t)__s1, "PRAGMA main.cache_spill", 0xFFFFFFFFLL, 0, 0, &pStmt, 0, v162))goto LABEL_509; {
              int v170 = sqlite3_step(pStmt);
              }
              if (v170 == 100)
              {
                int v163 = sqlite3_column_int(pStmt, 0);
                sqlite3_finalize(pStmt);
                if (v163 < 0) {
                  goto LABEL_512;
                }
              }
              else
              {
                sqlite3_finalize(pStmt);
                if (!v170)
                {
LABEL_512:
                  int v166 = sqlite3_exec(__buf[0], "BEGIN DEFERRED; PRAGMA schema_version; COMMIT;", 0, 0, 0);
                  if (v177 == v180)
                  {
                    LODWORD(v5) = v166;
                    BOOL v167 = 1;
                  }
                  else
                  {
                    BOOL v167 = v180 != 0;
                    if (v180) {
                      uint64_t v168 = "PRAGMA journal_mode=WAL";
                    }
                    else {
                      uint64_t v168 = "PRAGMA journal_mode=DELETE";
                    }
                    LODWORD(v5) = sqlite3_exec(__buf[0], v168, 0, 0, 0);
                  }
                  if (v189)
                  {
                    sub_1B0CF369C((uint64_t)__buf[0], 0);
                    __buf[0] = 0;
                  }
                  else
                  {
                    v189 = __buf[0];
                    sqlite3_exec(__buf[0], "BEGIN DEFERRED; PRAGMA schema_version;", 0, 0, 0);
                  }
                  if (!v167)
                  {
                    if ((v175 & 0x80000000) == 0)
                    {
                      off_1EC5263A0(v175);
                      unsigned int v175 = -1;
                    }
                    unlink(v174);
                    free(v174);
                    unlink(v173);
                    free(v173);
                    v173 = 0;
                    v174 = 0;
                  }
                  if (!v5) {
                    unsigned int __fd = v141;
                  }
LABEL_461:
                  if (v189) {
                    uint64_t v5 = v5;
                  }
                  else {
                    uint64_t v5 = 2;
                  }
                  if (v5) {
                    goto LABEL_493;
                  }
                  __strlcpy_chk();
                  __strlcat_chk();
                  if ((v175 & 0x80000000) != 0
                    && (unsigned int v175 = sub_1B0D06D40(__strerrbuf, 0, 0, 0), (v175 & 0x80000000) != 0))
                  {
                    int v152 = 0;
                  }
                  else
                  {
                    LODWORD(pStmt) = -1;
                    __strlcpy_chk();
                    __strlcat_chk();
                    uint64_t v151 = sub_1B0D0B450((char *)__buf, *(unsigned int *)(a1 + 124), &pStmt);
                    if (v151)
                    {
                      uint64_t v5 = v151;
                      off_1EC5263A0(v175);
                      int v152 = 1;
                      goto LABEL_488;
                    }
                    lseek(v175, 0, 0);
                    uint64_t v153 = pStmt;
                    lseek((int)pStmt, 0, 0);
                    int v154 = sub_1B0D0ADA8(v175, v153);
                    if (v154)
                    {
                      int v155 = *__error();
                      if (v155 == 12)
                      {
                        uint64_t v5 = 7;
                      }
                      else
                      {
                        *(_DWORD *)(a1 + 32) = v155;
                        uint64_t v5 = 10;
                      }
                    }
                    else
                    {
                      uint64_t v5 = 0;
                    }
                    fsync(v153);
                    off_1EC5263A0(v153);
                    off_1EC5263A0(v175);
                    int v152 = 1;
                    if (v154)
                    {
LABEL_488:
                      if (v184) {
                        sub_1B0D0B290((unsigned __int8 *)v179, v171);
                      }
                      else {
                        sqlite3_exec(v189, "COMMIT", 0, 0, 0);
                      }
                      if (!v5)
                      {
                        sub_1B0D0AFB8(a1, v152);
                        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, 3);
                      }
LABEL_493:
                      if ((v141 & 0x80000000) == 0) {
                        close(v141);
                      }
                      char v126 = 0;
                      signed int v125 = __dst;
                      v123 = v173;
                      v124 = v174;
                      int v127 = v175;
                      v128 = v189;
                      if (!v189) {
                        goto LABEL_397;
                      }
                      goto LABEL_396;
                    }
                  }
                  LODWORD(__buf[0]) = 0;
                  LODWORD(pStmt) = 0;
                  pread(__fd, __buf, 4uLL, 24);
                  pread(*(_DWORD *)(a1 + 24), &pStmt, 4uLL, 24);
                  lseek(__fd, 0, 0);
                  lseek(*(_DWORD *)(a1 + 24), 0, 0);
                  if (sub_1B0D0ADA8(__fd, *(unsigned int *)(a1 + 24)))
                  {
                    int v156 = *__error();
                    if (v156 == 12)
                    {
                      uint64_t v5 = 7;
                    }
                    else
                    {
                      *(_DWORD *)(a1 + 32) = v156;
                      uint64_t v5 = 10;
                    }
                  }
                  else
                  {
                    uint64_t v5 = 0;
                  }
                  if (LODWORD(__buf[0]) == pStmt)
                  {
                    LODWORD(pStmt) = LODWORD(__buf[0]) + 1;
                    off_1EC5264A8(*(unsigned int *)(a1 + 24), &pStmt, 4uLL, 24);
                  }
                  goto LABEL_488;
                }
                int v163 = 0;
              }
LABEL_509:
              long long v164 = (unsigned __int8 *)sqlite3_mprintf("PRAGMA cache_spill=%d", v163);
              sub_1B0C7EAC0((uint64_t)__buf[0], v164, 0xFFFFFFFFLL, 128, 0, &pStmt, 0, v165);
              while (sqlite3_step(pStmt) == 100)
                ;
              sqlite3_finalize(pStmt);
              sqlite3_free(v164);
              goto LABEL_512;
            }
            v123 = 0;
            v124 = 0;
            signed int v125 = 0;
            goto LABEL_394;
          }
        }
        else
        {
          sqlite3_log(1, "Replace database failed because TMPDIR is not set correctly\n");
          return 3;
        }
        return v5;
      }
      uint64_t v52 = *(unsigned __int8 **)(**(void **)(*(void *)(*((void *)__s1 + 4) + 8) + 8) + 320);
      if (v52 && (int v54 = *v52, v52 += 2, (v53 = v54) != 0))
      {
        int v55 = *(_DWORD *)(a1 + 168);
      }
      else
      {
        int v55 = *(_DWORD *)(a1 + 168);
        if (v55 < 1)
        {
LABEL_194:
          v189 = 0;
          errmsg = 0;
          goto LABEL_195;
        }
        int v53 = 0;
      }
      if (v53 == v55 && !memcmp(v52, *(const void **)(a1 + 176), v55)) {
        goto LABEL_194;
      }
      sqlite3_log(21, "Replacement SPI only supports encrypted databases when keys match");
      return sub_1B0CE1978(45972);
    case 103:
      if (!__s1) {
        return 21;
      }
      uint64_t v29 = *(unsigned int *)(a1 + 24);
      if ((v29 & 0x80000000) != 0)
      {
        uint64_t v5 = 1;
        *((_DWORD *)__s1 + 1) = -1;
        return v5;
      }
      int v30 = *(_DWORD *)__s1;
      uint64_t v31 = off_1EC526460(*(unsigned int *)(a1 + 24), __strerrbuf, 100, 0);
      uint64_t v32 = v31;
      if (v31)
      {
        if (v31 != 100
          || (*(void *)__strerrbuf == 0x66206574694C5153
            ? (BOOL v33 = *(void *)&__strerrbuf[8] == 0x332074616D726FLL)
            : (BOOL v33 = 0),
              !v33))
        {
          uint64_t v5 = 26;
          *((_DWORD *)__s1 + 1) = 2;
          return v5;
        }
      }
      if (sub_1B0D0B9F0(v30, v29, 1, dword_1E9B51ED0 + 2, 0x1FEu))
      {
        uint64_t v5 = 0;
        *((_DWORD *)__s1 + 1) = 1;
        return v5;
      }
      if (v32 != 100 || __strerrbuf[18] != 2)
      {
        int v68 = sub_1B0D0B9F0(v30, v29, 1, dword_1E9B51ED0, 1u);
        if (!v68)
        {
          int v68 = sub_1B0D0B9F0(v30, v29, 1, dword_1E9B51ED0 + 1, 1u);
          if (!v68) {
            int v68 = sub_1B0D0B9F0(v30, v29, 3, dword_1E9B51ED0 + 2, 0x1FEu);
          }
        }
        goto LABEL_367;
      }
      int v61 = strlen(*(const char **)(a1 + 56));
      int v62 = sqlite3_initialize();
      uint64_t v5 = 7;
      int v63 = -1;
      if (v61 < -99 || v62)
      {
LABEL_376:
        *((_DWORD *)__s1 + 1) = v63;
        return v5;
      }
      unint64_t v64 = (char *)sub_1B0C7FC94((v61 + 100));
      if (!v64)
      {
        uint64_t v5 = 7;
        *((_DWORD *)__s1 + 1) = -1;
        return v5;
      }
      unint64_t v65 = v64;
      memcpy(v64, *(const void **)(a1 + 56), v61);
      strcpy(&v65[v61], "-shm");
      uint64_t v66 = open(v65, 0, 0);
      if ((v66 & 0x80000000) != 0)
      {
        if (*__error() != 2)
        {
          uint64_t v5 = 14;
          sub_1B0D072C0(14, "open", v65, 47695);
          sqlite3_free(v65);
          *((_DWORD *)__s1 + 1) = -1;
          return v5;
        }
        int v68 = 0;
      }
      else
      {
        uint64_t v67 = v66;
        int v68 = sub_1B0D0B9F0(v30, v66, 1, 0x7Au, 1u);
        if (!v68)
        {
          int v68 = sub_1B0D0B9F0(v30, v67, 1, 0x79u, 1u);
          if (!v68) {
            int v68 = sub_1B0D0B9F0(v30, v67, 1, 0x78u, 1u);
          }
        }
        close(v67);
      }
      unsigned int v129 = (void (**)(char *))&off_1EB21C9E8;
      if (!dword_1EB21C9C0) {
        goto LABEL_366;
      }
      if ((void)xmmword_1EB2201B0) {
        xmmword_1EB21CA40(xmmword_1EB2201B0);
      }
      qword_1EB220108 -= (int)off_1EB21C9F8(v65);
      --qword_1EB220150;
      off_1EB21C9E8(v65);
      unint64_t v65 = (char *)xmmword_1EB2201B0;
      if ((void)xmmword_1EB2201B0)
      {
        unsigned int v129 = (void (**)(char *))&xmmword_1EB21CA50;
LABEL_366:
        (*v129)(v65);
      }
LABEL_367:
      if (v32) {
        int v130 = 0;
      }
      else {
        int v130 = 3;
      }
      if (v68) {
        int v63 = (v68 >> 31) | 1;
      }
      else {
        int v63 = v130;
      }
      if (v68) {
        uint64_t v5 = v68 >> 31;
      }
      else {
        uint64_t v5 = 0;
      }
      goto LABEL_376;
    case 104:
      sub_1B0D08138();
      return 12;
    case 106:
      if (!a1
        || !*(void *)a1
        || *(uint64_t (**)(uint64_t, char *, signed int, uint64_t))(*(void *)a1 + 16) != sub_1B0C7D268
        || *(_DWORD *)(a1 + 128) > 3u)
      {
        return 1;
      }
      __int16 v60 = *(NSObject **)(a1 + 152);
      if (!v60) {
        return 0;
      }
      *(void *)(a1 + 152) = 0;
      if (_dispatch_is_fork_of_multithreaded_parent()) {
        return 0;
      }
      dispatch_source_cancel_and_wait();
      dispatch_release(v60);
      return 0;
    case 107:
      uint64_t v5 = 0;
      *(_DWORD *)(a1 + 168) = *(_DWORD *)__s1;
      return v5;
    case 108:
      uint64_t v5 = 0;
      *(void *)(a1 + 176) = __s1;
      return v5;
    case 204:
      uint64_t v5 = 0;
      *(_DWORD *)__s1 = HIBYTE(*(unsigned __int16 *)(a1 + 30)) & 1;
      return v5;
    default:
      return v5;
  }
}

void sub_1B0CD7998(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

BOOL sub_1B0CD79A4(void *a1, int a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)a4 = 0u;
  if (!a2)
  {
    if (!sub_1B0D6EE2C((uint64_t)a1)) {
      return 1;
    }
    uint64_t v15 = a1[3];
    uint64_t v18 = *(void *)(v15 + 72);
    uint64_t v17 = (uint64_t *)(v15 + 72);
    uint64_t v16 = v18;
    if (v18) {
      goto LABEL_9;
    }
    uint64_t v38 = **(void **)(*a1 + 24);
    if (*(int *)v38 >= 2 && (int v39 = *(unsigned int (**)(void))(v38 + 136)) != 0)
    {
      if (!v39())
      {
LABEL_49:
        uint64_t v16 = *v17;
LABEL_9:
        *(void *)a4 = v16;
        BOOL result = 1;
        if (v16 >= 1)
        {
          *(unsigned char *)(a4 + 40) = 1;
          return 0;
        }
        return result;
      }
    }
    else
    {
      *(void *)uint64_t v158 = 0;
      int v40 = (*(uint64_t (**)(uint64_t, unsigned char *))(v38 + 120))(v38, v158);
      *uint64_t v17 = (uint64_t)(*(double *)v158 * 86400000.0);
      if (!v40) {
        goto LABEL_49;
      }
    }
    *uint64_t v17 = 0;
    goto LABEL_52;
  }
  uint64_t v12 = *a3;
  if (*a3)
  {
    __int16 v13 = *(_WORD *)(v12 + 20);
    if (byte_1B0DE186A[v13 & 0x3F] - 1 <= 1)
    {
      if ((v13 & 8) != 0)
      {
        double v14 = *(double *)v12;
      }
      else if ((v13 & 0x24) != 0)
      {
        double v14 = (double)*(uint64_t *)v12;
      }
      else if ((v13 & 0x12) != 0)
      {
        double v14 = sub_1B0D18684(v12);
      }
      else
      {
        double v14 = 0.0;
      }
      uint64_t v154 = (uint64_t)a1;
      *(double *)(a4 + 32) = v14;
      *(unsigned char *)(a4 + 41) = 1;
      if (v14 >= 0.0 && v14 < 5373484.5)
      {
        *(void *)a4 = (uint64_t)(v14 * 86400000.0 + 0.5);
        *(unsigned char *)(a4 + 40) = 1;
        if (a2 >= 2) {
          goto LABEL_91;
        }
        goto LABEL_356;
      }
LABEL_64:
      if (a2 >= 2) {
        goto LABEL_91;
      }
LABEL_356:
      sub_1B0D6EC98(a4);
      if (*(unsigned char *)(a4 + 46)) {
        return 1;
      }
      return *(void *)a4 > 0x1A6401072FDFFuLL;
    }
  }
  else
  {
    sub_1B0CE1978(97220);
    uint64_t v12 = *a3;
    if (!*a3) {
      return 1;
    }
  }
  int v20 = *(unsigned __int16 *)(v12 + 20);
  if ((~v20 & 0x202) != 0 || *(unsigned char *)(v12 + 22) != 1)
  {
    if (v20) {
      return 1;
    }
    unint64_t v21 = (unsigned __int8 *)sub_1B0D18254((int *)v12, 1);
    if (!v21) {
      return 1;
    }
  }
  else
  {
    unint64_t v21 = *(unsigned __int8 **)(v12 + 8);
    if (!v21) {
      return 1;
    }
  }
  *(_DWORD *)uint64_t v158 = 0;
  uint64_t v157 = 0;
  int v22 = *v21;
  if (v22 == 45) {
    uint64_t v23 = v21 + 1;
  }
  else {
    uint64_t v23 = v21;
  }
  if (sub_1B0D6F164(v23, "40f-21a-21d", (uint64_t)a3, a4, a5, a6, a7, a8, (char)v158) != 3) {
    goto LABEL_30;
  }
  uint64_t v24 = &v21[(v22 == 45) + 9];
  do
  {
    int v25 = *++v24;
    int v26 = byte_1B0DE196D[v25] & 1;
  }
  while (v25 == 84 || v26 != 0);
  if (!sub_1B0D6EF78(v24, a4, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
LABEL_60:
    *(unsigned char *)(a4 + 40) = 0;
    *(unsigned char *)(a4 + 42) = 1;
    int v44 = HIDWORD(v157);
    int v43 = *(_DWORD *)v158;
    if (v22 == 45) {
      int v43 = -*(_DWORD *)v158;
    }
    *(_DWORD *)(a4 + 8) = v43;
    *(_DWORD *)(a4 + 12) = v44;
    *(_DWORD *)(a4 + 16) = v157;
    if (!*(unsigned char *)(a4 + 44)) {
      goto LABEL_90;
    }
    sub_1B0D6EC98(a4);
    uint64_t v154 = (uint64_t)a1;
    goto LABEL_64;
  }
  if (!*v24)
  {
    *(unsigned char *)(a4 + 43) = 0;
    goto LABEL_60;
  }
LABEL_30:
  if (!sub_1B0D6EF78(v21, a4, (uint64_t)a3, a4, a5, a6, a7, a8)) {
    goto LABEL_90;
  }
  for (uint64_t i = 0; ; ++i)
  {
    uint64_t v29 = v21[i];
    uint64_t v30 = aNow[i];
    if (v29 == v30) {
      break;
    }
    if (byte_1B0DE1758[v29] != byte_1B0DE1758[v30]) {
      goto LABEL_53;
    }
LABEL_33:
    ;
  }
  if (v21[i]) {
    goto LABEL_33;
  }
  if (sub_1B0D6EE2C((uint64_t)a1))
  {
    uint64_t v31 = a1[3];
    uint64_t v34 = *(void *)(v31 + 72);
    BOOL v33 = (uint64_t *)(v31 + 72);
    uint64_t v32 = v34;
    if (!v34)
    {
      uint64_t v35 = **(void **)(*a1 + 24);
      if (*(int *)v35 >= 2 && (int v36 = *(uint64_t (**)(void))(v35 + 136)) != 0)
      {
        int v37 = v36();
      }
      else
      {
        *(void *)uint64_t v158 = 0;
        int v37 = (*(uint64_t (**)(uint64_t, unsigned char *))(v35 + 120))(v35, v158);
        *BOOL v33 = (uint64_t)(*(double *)v158 * 86400000.0);
      }
      if (!v37) {
        goto LABEL_87;
      }
      goto LABEL_84;
    }
LABEL_88:
    *(void *)a4 = v32;
    if (v32 < 1) {
      return 1;
    }
    goto LABEL_89;
  }
LABEL_53:
  v159[0] = 0.0;
  int v41 = strlen((const char *)v21);
  if ((int)sub_1B0CC9D20(v21, v159, v41 & 0x3FFFFFFF, 1) <= 0)
  {
    uint64_t v45 = "subsec";
    for (j = v21; ; ++j)
    {
      uint64_t v47 = *j;
      uint64_t v48 = *(unsigned __int8 *)v45;
      if (v47 == v48)
      {
        if (!*j)
        {
LABEL_76:
          if (!sub_1B0D6EE2C((uint64_t)a1)) {
            return 1;
          }
          *(unsigned char *)(a4 + 47) = 1;
          uint64_t v52 = a1[3];
          uint64_t v53 = *(void *)(v52 + 72);
          BOOL v33 = (uint64_t *)(v52 + 72);
          uint64_t v32 = v53;
          if (v53) {
            goto LABEL_88;
          }
          uint64_t v54 = **(void **)(*a1 + 24);
          if (*(int *)v54 >= 2 && (int v55 = *(uint64_t (**)(void))(v54 + 136)) != 0)
          {
            int v56 = v55();
          }
          else
          {
            *(void *)uint64_t v158 = 0;
            int v56 = (*(uint64_t (**)(uint64_t, unsigned char *))(v54 + 120))(v54, v158);
            *BOOL v33 = (uint64_t)(*(double *)v158 * 86400000.0);
          }
          if (!v56)
          {
LABEL_87:
            uint64_t v32 = *v33;
            goto LABEL_88;
          }
LABEL_84:
          *BOOL v33 = 0;
LABEL_52:
          *(void *)a4 = 0;
          return 1;
        }
      }
      else if (byte_1B0DE1758[v47] != byte_1B0DE1758[v48])
      {
        for (k = "subsecond"; ; ++k)
        {
          uint64_t v50 = *v21;
          uint64_t v51 = *(unsigned __int8 *)k;
          if (v50 == v51)
          {
            if (!*v21) {
              goto LABEL_76;
            }
          }
          else if (byte_1B0DE1758[v50] != byte_1B0DE1758[v51])
          {
            return 1;
          }
          ++v21;
        }
      }
      ++v45;
    }
  }
  double v42 = v159[0];
  *(double *)(a4 + 32) = v159[0];
  *(unsigned char *)(a4 + 41) = 1;
  if (v42 >= 0.0 && v42 < 5373484.5)
  {
    *(void *)a4 = (uint64_t)(v42 * 86400000.0 + 0.5);
LABEL_89:
    *(unsigned char *)(a4 + 40) = 1;
  }
LABEL_90:
  uint64_t v154 = (uint64_t)a1;
  if (a2 < 2) {
    goto LABEL_356;
  }
LABEL_91:
  uint64_t v155 = a2;
  unint64_t v57 = 1;
  while (2)
  {
    uint64_t v58 = a3[v57];
    if (!v58)
    {
      __int16 v60 = 0;
      goto LABEL_103;
    }
    int v59 = *(unsigned __int16 *)(v58 + 20);
    if ((~v59 & 0x202) != 0 || *(unsigned char *)(v58 + 22) != 1)
    {
      if (v59)
      {
        __int16 v60 = 0;
        __int16 v61 = *(_WORD *)(v58 + 20);
        if ((v61 & 2) != 0) {
          goto LABEL_105;
        }
LABEL_100:
        if ((v61 & 0x11) == 0) {
          goto LABEL_110;
        }
        goto LABEL_111;
      }
      __int16 v60 = (unsigned __int8 *)sub_1B0D18254((int *)v58, 1);
      uint64_t v58 = a3[v57];
      if (v58)
      {
        __int16 v61 = *(_WORD *)(v58 + 20);
        if ((v61 & 2) != 0) {
          goto LABEL_105;
        }
        goto LABEL_100;
      }
LABEL_103:
      sub_1B0CE1978(91138);
      goto LABEL_111;
    }
    __int16 v60 = *(unsigned __int8 **)(v58 + 8);
    __int16 v61 = *(_WORD *)(v58 + 20);
    if ((v61 & 2) == 0) {
      goto LABEL_100;
    }
LABEL_105:
    int v62 = v61 & 0x11;
    if (*(unsigned char *)(v58 + 22) == 1 || v62 != 0) {
      goto LABEL_111;
    }
LABEL_110:
    sub_1B0D18228(v58, 1);
LABEL_111:
    if (!v60) {
      return 1;
    }
    v159[0] = 0.0;
    int v64 = *v60;
    switch(byte_1B0DE1758[*v60])
    {
      case '+':
      case '-':
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        uint64_t v156 = 0;
        uint64_t v157 = 0;
        uint64_t v65 = 1;
        while (2)
        {
          uint64_t v67 = v60[v65];
          if (!v60[v65] || v67 == 58 || (byte_1B0DE196D[v67] & 1) != 0) {
            break;
          }
          if (v67 != 45) {
            goto LABEL_116;
          }
          if (v65 == 6)
          {
            int v66 = sub_1B0D6F164(v60 + 1, "50f", (uint64_t)a3, a4, a5, a6, a7, a8, (char)&v157 + 4);
            goto LABEL_115;
          }
          if (v65 != 5) {
            goto LABEL_116;
          }
          int v66 = sub_1B0D6F164(v60 + 1, "40f", (uint64_t)a3, a4, a5, a6, a7, a8, (char)&v157 + 4);
LABEL_115:
          if (v66 != 1)
          {
LABEL_116:
            ++v65;
            continue;
          }
          break;
        }
        int v68 = 1;
        if ((int)sub_1B0CC9D20(v60, v159, v65, 1) < 1) {
          goto LABEL_286;
        }
        if (v60[v65] != 45)
        {
          uint64_t v69 = v60;
          goto LABEL_132;
        }
        if (v64 != 45 && v64 != 43) {
          goto LABEL_286;
        }
        if (v65 == 5)
        {
          if (sub_1B0D6F164(v60 + 1, "40f-20a-20d", (uint64_t)a3, a4, a5, a6, a7, a8, (char)&v157 + 4) != 3) {
            goto LABEL_286;
          }
        }
        else
        {
          int v76 = sub_1B0D6F164(++v60, "50f-20a-20d", (uint64_t)a3, a4, a5, a6, a7, a8, (char)&v157 + 4);
          if (v76 != 3) {
            goto LABEL_286;
          }
        }
        if ((int)v157 > 11 || SHIDWORD(v156) > 30) {
          goto LABEL_286;
        }
        sub_1B0CD90D4(a4);
        if (!*(unsigned char *)(a4 + 43))
        {
          sub_1B0D6EC98(a4);
          int v77 = (*(void *)a4 + 43200000) % 86400000;
          *(double *)(a4 + 32) = (double)(v77 % 60000) / 1000.0;
          __int16 v78 = (34953 * (__int16)(v77 / 60000)) >> 16;
          *(_DWORD *)(a4 + 20) = v77 / 3600000;
          *(_DWORD *)(a4 + 24) = (__int16)(v77 / 60000
                                         - 60 * ((v78 >> 5) + ((unsigned __int16)(v78 & 0x8000) >> 15)));
          *(unsigned char *)(a4 + 41) = 0;
          *(unsigned char *)(a4 + 43) = 1;
        }
        *(unsigned char *)(a4 + 40) = 0;
        int v80 = *(_DWORD *)(a4 + 8);
        int v79 = *(_DWORD *)(a4 + 12);
        if (v64 == 45)
        {
          int v81 = v80 - HIDWORD(v157);
          int v82 = v79 - v157;
          HIDWORD(v156) = -HIDWORD(v156);
        }
        else
        {
          int v81 = v80 + HIDWORD(v157);
          int v82 = v79 + v157;
        }
        if (v82 < 1) {
          unsigned int v124 = -((12 - v82) / 0xCu);
        }
        else {
          unsigned int v124 = (v82 - 1) / 0xCu;
        }
        *(_DWORD *)(a4 + 8) = v124 + v81;
        *(_DWORD *)(a4 + 12) = v82 - 12 * v124;
        sub_1B0D6EC98(a4);
        *(_WORD *)(a4 + 42) = 0;
        *(void *)a4 += 86400000 * SHIDWORD(v156);
        if (!v60[11])
        {
          int v68 = 0;
          goto LABEL_286;
        }
        if ((byte_1B0DE196D[v60[11]] & 1) == 0) {
          goto LABEL_286;
        }
        uint64_t v69 = v60 + 12;
        if (sub_1B0D6F164(v60 + 12, "20c:20e", (uint64_t)a3, a4, a5, a6, a7, a8, (char)&v156) != 2) {
          goto LABEL_144;
        }
        LODWORD(v65) = 2;
LABEL_132:
        if (v69[v65] == 58)
        {
          unint64_t v70 = *v69 - 58;
          memset(&v158[16], 0, 32);
          if (v70 < 0xFFFFFFFFFFFFFFF6) {
            uint64_t v71 = v69 + 1;
          }
          else {
            uint64_t v71 = v69;
          }
          *(_OWORD *)uint64_t v158 = 0uLL;
          if (!sub_1B0D6EF78(v71, (uint64_t)v158, (uint64_t)a3, a4, a5, a6, a7, a8))
          {
            sub_1B0D6EC98((uint64_t)v158);
            if (v64 == 45) {
              uint64_t v72 = -((*(void *)v158 - 43200000) % 86400000);
            }
            else {
              uint64_t v72 = (*(void *)v158 - 43200000) % 86400000;
            }
            sub_1B0D6EC98(a4);
            int v68 = 0;
            *(_WORD *)(a4 + 42) = 0;
            *(unsigned char *)(a4 + 44) = 0;
            *(void *)a4 += v72;
            goto LABEL_286;
          }
LABEL_144:
          int v68 = 1;
          goto LABEL_286;
        }
        int8x16x2_t v73 = (const char *)&v60[v65 - 1];
        do
          int v74 = *(unsigned __int8 *)++v73;
        while ((byte_1B0DE196D[v74] & 1) != 0);
        int v75 = strlen(v73) & 0x3FFFFFFF;
        if ((v75 - 11) < 0xFFFFFFF8) {
          goto LABEL_144;
        }
        if ((v73[v75 - 1] & 0xDF) == 0x53) {
          int v107 = v75 - 1;
        }
        else {
          int v107 = v75;
        }
        sub_1B0D6EC98(a4);
        uint64_t v108 = 0;
        double v109 = v159[0];
        if (v159[0] >= 0.0) {
          double v110 = 0.5;
        }
        else {
          double v110 = -0.5;
        }
        uint64_t v111 = "second";
        while (1)
        {
          if (v107 == *((unsigned __int8 *)&unk_1B0DE5BEC + 16 * v108))
          {
            uint64_t v116 = 0;
            while (1)
            {
              uint64_t v117 = v111[v116];
              if (!v111[v116]) {
                break;
              }
              LODWORD(v117) = byte_1B0DE1758[v117];
              int v118 = byte_1B0DE1758[v73[v116]];
              if (v117 != v118) {
                goto LABEL_242;
              }
              if ((v107 - 1) + 1 == ++v116) {
                goto LABEL_230;
              }
            }
            int v118 = byte_1B0DE1758[v73[v116]];
LABEL_242:
            if (v117 != v118) {
              goto LABEL_234;
            }
LABEL_230:
            float v112 = *((float *)&unk_1B0DE5BEC + 4 * v108 + 2);
            double v113 = (float)-v112;
            double v114 = v112;
            if (v159[0] > v113 && v159[0] < v114) {
              break;
            }
          }
LABEL_234:
          ++v108;
          v111 += 16;
          if (v108 == 6)
          {
            int v68 = 1;
            goto LABEL_285;
          }
        }
        if (v108 != 5)
        {
          if (v108 == 4)
          {
            sub_1B0CD8FDC(a4);
            int v125 = (int)v109;
            int v126 = *(_DWORD *)(a4 + 12) + (int)v109;
            if (v126 < 1) {
              unsigned int v127 = -((12 - v126) / 0xCu);
            }
            else {
              unsigned int v127 = (v126 - 1) / 0xCu;
            }
            *(_DWORD *)(a4 + 8) += v127;
            *(_DWORD *)(a4 + 12) = v126 - 12 * v127;
LABEL_283:
            *(unsigned char *)(a4 + 40) = 0;
            double v109 = v109 - (double)v125;
          }
          sub_1B0D6EC98(a4);
          int v68 = 0;
          *(void *)a4 += (uint64_t)(v110 + v109 * 1000.0 * *((float *)&unk_1B0DE5BEC + 4 * v108 + 3));
LABEL_285:
          *(_WORD *)(a4 + 42) = 0;
          *(unsigned char *)(a4 + 44) = 0;
LABEL_286:
          if (!v68) {
            goto LABEL_287;
          }
          return 1;
        }
        int v125 = (int)v159[0];
        sub_1B0CD8FDC(a4);
        *(_DWORD *)(a4 + 8) += v125;
        goto LABEL_283;
      case 'a':
        unsigned int v83 = v60 + 1;
        size_t v84 = "auto";
        while (2)
        {
          uint64_t v86 = *(unsigned __int8 *)v84;
          if (v64 != v86)
          {
            if (byte_1B0DE1758[v64] != byte_1B0DE1758[v86]) {
              return 1;
            }
LABEL_154:
            ++v84;
            int v85 = *v83++;
            int v64 = v85;
            continue;
          }
          break;
        }
        if (v64) {
          goto LABEL_154;
        }
        if (v57 > 1) {
          return 1;
        }
        if (!*(unsigned char *)(a4 + 41) || *(unsigned char *)(a4 + 40)) {
          goto LABEL_171;
        }
        double v87 = *(double *)(a4 + 32);
        if (v87 >= -2.1086676e11 && v87 <= 2.53402301e11)
        {
          *(_WORD *)(a4 + 42) = 0;
          *(unsigned char *)(a4 + 44) = 0;
          *(void *)a4 = (uint64_t)(v87 * 1000.0 + 2.1086676e14 + 0.5);
          *(unsigned char *)(a4 + 40) = 1;
          goto LABEL_171;
        }
LABEL_287:
        if (++v57 == v155) {
          goto LABEL_356;
        }
        continue;
      case 'j':
        int v88 = v60 + 1;
        uint64_t v89 = "julianday";
        while (2)
        {
          uint64_t v91 = *(unsigned __int8 *)v89;
          if (v64 == v91)
          {
            if (!v64)
            {
              if (v57 > 1 || !*(unsigned char *)(a4 + 40) || !*(unsigned char *)(a4 + 41)) {
                return 1;
              }
LABEL_171:
              *(unsigned char *)(a4 + 41) = 0;
              goto LABEL_287;
            }
          }
          else if (byte_1B0DE1758[v64] != byte_1B0DE1758[v91])
          {
            return 1;
          }
          ++v89;
          int v90 = *v88++;
          int v64 = v90;
          continue;
        }
      case 'l':
        uint64_t v92 = v60 + 1;
        BOOL v93 = "localtime";
        while (2)
        {
          uint64_t v95 = *(unsigned __int8 *)v93;
          if (v64 == v95)
          {
            if (!v64)
            {
              if (!sub_1B0D6EE2C(v154)) {
                return 1;
              }
              int v68 = sub_1B0D6F254(a4, v154);
              goto LABEL_286;
            }
          }
          else if (byte_1B0DE1758[v64] != byte_1B0DE1758[v95])
          {
            return 1;
          }
          ++v93;
          int v94 = *v92++;
          int v64 = v94;
          continue;
        }
      case 's':
        if (*v60)
        {
          uint64_t v96 = v60[1];
          if (v60[1])
          {
            if ((v96 & 0xFFFFFFDF) == 0x54)
            {
              uint64_t v96 = v60[2];
              if (v60[2])
              {
                if ((v96 & 0xFFFFFFDF) == 0x41)
                {
                  uint64_t v96 = v60[3];
                  if (v60[3])
                  {
                    if ((v96 & 0xFFFFFFDF) == 0x52)
                    {
                      uint64_t v96 = v60[4];
                      if (v60[4])
                      {
                        if ((v96 & 0xFFFFFFDF) == 0x54)
                        {
                          uint64_t v96 = v60[5];
                          if (v60[5])
                          {
                            if (v96 == 32)
                            {
                              uint64_t v96 = v60[6];
                              if (v60[6])
                              {
                                if ((v96 & 0xFFFFFFDF) == 0x4F)
                                {
                                  uint64_t v96 = v60[7];
                                  if (v60[7])
                                  {
                                    if ((v96 & 0xFFFFFFDF) == 0x46)
                                    {
                                      uint64_t v96 = v60[8];
                                      if (v60[8])
                                      {
                                        if (v96 == 32) {
                                          goto LABEL_324;
                                        }
                                        unsigned int v97 = " ";
                                        LODWORD(v96) = byte_1B0DE1758[v96];
                                      }
                                      else
                                      {
                                        unsigned int v97 = " ";
                                      }
                                    }
                                    else
                                    {
                                      unsigned int v97 = "f ";
                                      LODWORD(v96) = byte_1B0DE1758[v96];
                                    }
                                  }
                                  else
                                  {
                                    unsigned int v97 = "f ";
                                  }
                                }
                                else
                                {
                                  unsigned int v97 = "of ";
                                  LODWORD(v96) = byte_1B0DE1758[v96];
                                }
                              }
                              else
                              {
                                unsigned int v97 = "of ";
                              }
                            }
                            else
                            {
                              unsigned int v97 = " of ";
                              LODWORD(v96) = byte_1B0DE1758[v96];
                            }
                          }
                          else
                          {
                            unsigned int v97 = " of ";
                          }
                        }
                        else
                        {
                          unsigned int v97 = "t of ";
                          LODWORD(v96) = byte_1B0DE1758[v96];
                        }
                      }
                      else
                      {
                        unsigned int v97 = "t of ";
                      }
                    }
                    else
                    {
                      unsigned int v97 = "rt of ";
                      LODWORD(v96) = byte_1B0DE1758[v96];
                    }
                  }
                  else
                  {
                    unsigned int v97 = "rt of ";
                  }
                }
                else
                {
                  unsigned int v97 = "art of ";
                  LODWORD(v96) = byte_1B0DE1758[v96];
                }
              }
              else
              {
                unsigned int v97 = "art of ";
              }
            }
            else
            {
              unsigned int v97 = "tart of ";
              LODWORD(v96) = byte_1B0DE1758[v96];
            }
          }
          else
          {
            unsigned int v97 = "tart of ";
          }
        }
        else
        {
          LODWORD(v96) = 0;
          unsigned int v97 = "start of ";
        }
        if (v96 != byte_1B0DE1758[*v97])
        {
          int v145 = v60 + 1;
          int v146 = v60 + 1;
          int v147 = *v60;
          for (m = "subsec"; ; ++m)
          {
            uint64_t v150 = *(unsigned __int8 *)m;
            if (v147 == v150)
            {
              if (!v147)
              {
LABEL_353:
                *(unsigned char *)(a4 + 47) = 1;
                goto LABEL_287;
              }
            }
            else if (byte_1B0DE1758[v147] != byte_1B0DE1758[v150])
            {
              for (n = "subsecond"; ; ++n)
              {
                uint64_t v153 = *(unsigned __int8 *)n;
                if (v64 == v153)
                {
                  if (!v64) {
                    goto LABEL_353;
                  }
                }
                else if (byte_1B0DE1758[v64] != byte_1B0DE1758[v153])
                {
                  return 1;
                }
                int v152 = *v145++;
                int v64 = v152;
              }
            }
            int v149 = *v146++;
            int v147 = v149;
          }
        }
LABEL_324:
        if (*(unsigned char *)(a4 + 40) || *(unsigned char *)(a4 + 42) || *(unsigned char *)(a4 + 43))
        {
          v133 = v60 + 9;
          sub_1B0CD90D4(a4);
          *(_WORD *)(a4 + 43) = 1;
          *(_DWORD *)(a4 + 20) = 0;
          *(_DWORD *)(a4 + 24) = 0;
          *(void *)(a4 + 32) = 0;
          int v134 = v60 + 9;
          int v135 = "month";
          *(_WORD *)(a4 + 40) = 0;
          while (1)
          {
            uint64_t v136 = *v134;
            uint64_t v137 = *(unsigned __int8 *)v135;
            if (v136 == v137)
            {
              if (!*v134)
              {
                *(_DWORD *)(a4 + 16) = 1;
                goto LABEL_287;
              }
            }
            else if (byte_1B0DE1758[v136] != byte_1B0DE1758[v137])
            {
              uint64_t v138 = v60 + 9;
              for (iuint64_t i = "year"; ; ++ii)
              {
                uint64_t v140 = *v138;
                uint64_t v141 = *(unsigned __int8 *)ii;
                if (v140 == v141)
                {
                  if (!*v138)
                  {
                    *(void *)(a4 + 12) = 0x100000001;
                    goto LABEL_287;
                  }
                }
                else if (byte_1B0DE1758[v140] != byte_1B0DE1758[v141])
                {
                  for (jj = "day"; ; ++jj)
                  {
                    uint64_t v143 = *v133;
                    uint64_t v144 = *(unsigned __int8 *)jj;
                    if (v143 == v144)
                    {
                      if (!*v133) {
                        goto LABEL_287;
                      }
                    }
                    else if (byte_1B0DE1758[v143] != byte_1B0DE1758[v144])
                    {
                      return 1;
                    }
                    ++v133;
                  }
                }
                ++v138;
              }
            }
            ++v134;
            ++v135;
          }
        }
        return 1;
      case 'u':
        int v98 = v60 + 1;
        char v99 = v60 + 1;
        int v100 = *v60;
        uint64_t v101 = "unixepoch";
        while (2)
        {
          uint64_t v103 = *(unsigned __int8 *)v101;
          if (v100 == v103)
          {
            if (!v100)
            {
              if (*(unsigned char *)(a4 + 41))
              {
                if (v57 <= 1)
                {
                  double v104 = *(double *)(a4 + 32) * 1000.0 + 2.1086676e14;
                  if (v104 >= 0.0 && v104 < 4.64269061e14)
                  {
                    *(unsigned char *)(a4 + 44) = 0;
                    *(void *)a4 = (uint64_t)(v104 + 0.5);
                    *(_DWORD *)(a4 + 40) = 1;
                    goto LABEL_287;
                  }
                }
                return 1;
              }
              goto LABEL_245;
            }
LABEL_199:
            ++v101;
            int v102 = *v99++;
            int v100 = v102;
            continue;
          }
          break;
        }
        if (byte_1B0DE1758[v100] == byte_1B0DE1758[v103]) {
          goto LABEL_199;
        }
LABEL_245:
        for (kk = "utc"; ; ++kk)
        {
          uint64_t v121 = *(unsigned __int8 *)kk;
          if (v64 == v121) {
            break;
          }
          if (byte_1B0DE1758[v64] != byte_1B0DE1758[v121]) {
            return 1;
          }
LABEL_247:
          int v120 = *v98++;
          int v64 = v120;
        }
        if (v64) {
          goto LABEL_247;
        }
        if (sub_1B0D6EE2C(v154))
        {
          if (*(unsigned char *)(a4 + 45)) {
            goto LABEL_287;
          }
          sub_1B0D6EC98(a4);
          uint64_t v122 = *(void *)a4;
          *(void *)&v158[40] = 1;
          memset(&v158[8], 0, 32);
          *(void *)uint64_t v158 = v122;
          if (!sub_1B0D6F254((uint64_t)v158, v154))
          {
            sub_1B0D6EC98((uint64_t)v158);
            uint64_t v123 = v122;
            if (v122 == *(void *)v158) {
              goto LABEL_260;
            }
            uint64_t v123 = v122 - *(void *)v158 + v122;
            *(void *)&v158[40] = 1;
            memset(&v158[8], 0, 32);
            *(void *)uint64_t v158 = v123;
            if (sub_1B0D6F254((uint64_t)v158, v154)) {
              return 1;
            }
            sub_1B0D6EC98((uint64_t)v158);
            if (v122 == *(void *)v158) {
              goto LABEL_260;
            }
            v123 += v122 - *(void *)v158;
            *(void *)&v158[40] = 1;
            memset(&v158[8], 0, 32);
            *(void *)uint64_t v158 = v123;
            if (sub_1B0D6F254((uint64_t)v158, v154)) {
              return 1;
            }
            sub_1B0D6EC98((uint64_t)v158);
            if (v122 == *(void *)v158)
            {
LABEL_260:
              *(_OWORD *)(a4 + 16) = 0u;
              *(_OWORD *)(a4 + 32) = 0u;
              *(_OWORD *)a4 = 0u;
              *(void *)a4 = v123;
              *(unsigned char *)(a4 + 40) = 1;
              *(unsigned char *)(a4 + 45) = 1;
              goto LABEL_287;
            }
            v123 += v122 - *(void *)v158;
            *(void *)&v158[40] = 1;
            memset(&v158[8], 0, 32);
            *(void *)uint64_t v158 = v123;
            if (!sub_1B0D6F254((uint64_t)v158, v154))
            {
              sub_1B0D6EC98((uint64_t)v158);
              goto LABEL_260;
            }
          }
        }
        return 1;
      case 'w':
        if (*v60)
        {
          uint64_t v105 = v60[1];
          if (v60[1])
          {
            if ((v105 & 0xFFFFFFDF) == 0x45)
            {
              uint64_t v105 = v60[2];
              if (v60[2])
              {
                if ((v105 & 0xFFFFFFDF) == 0x45)
                {
                  uint64_t v105 = v60[3];
                  if (v60[3])
                  {
                    if ((v105 & 0xFFFFFFDF) == 0x4B)
                    {
                      uint64_t v105 = v60[4];
                      if (v60[4])
                      {
                        if ((v105 & 0xFFFFFFDF) == 0x44)
                        {
                          uint64_t v105 = v60[5];
                          if (v60[5])
                          {
                            if ((v105 & 0xFFFFFFDF) == 0x41)
                            {
                              uint64_t v105 = v60[6];
                              if (v60[6])
                              {
                                if ((v105 & 0xFFFFFFDF) == 0x59)
                                {
                                  uint64_t v105 = v60[7];
                                  if (v60[7])
                                  {
                                    if (v105 == 32) {
                                      goto LABEL_312;
                                    }
                                    uint64_t v106 = " ";
                                    LODWORD(v105) = byte_1B0DE1758[v105];
                                  }
                                  else
                                  {
                                    uint64_t v106 = " ";
                                  }
                                }
                                else
                                {
                                  uint64_t v106 = "y ";
                                  LODWORD(v105) = byte_1B0DE1758[v105];
                                }
                              }
                              else
                              {
                                uint64_t v106 = "y ";
                              }
                            }
                            else
                            {
                              uint64_t v106 = "ay ";
                              LODWORD(v105) = byte_1B0DE1758[v105];
                            }
                          }
                          else
                          {
                            uint64_t v106 = "ay ";
                          }
                        }
                        else
                        {
                          uint64_t v106 = "day ";
                          LODWORD(v105) = byte_1B0DE1758[v105];
                        }
                      }
                      else
                      {
                        uint64_t v106 = "day ";
                      }
                    }
                    else
                    {
                      uint64_t v106 = "kday ";
                      LODWORD(v105) = byte_1B0DE1758[v105];
                    }
                  }
                  else
                  {
                    uint64_t v106 = "kday ";
                  }
                }
                else
                {
                  uint64_t v106 = "ekday ";
                  LODWORD(v105) = byte_1B0DE1758[v105];
                }
              }
              else
              {
                uint64_t v106 = "ekday ";
              }
            }
            else
            {
              uint64_t v106 = "eekday ";
              LODWORD(v105) = byte_1B0DE1758[v105];
            }
          }
          else
          {
            uint64_t v106 = "eekday ";
          }
        }
        else
        {
          LODWORD(v105) = 0;
          uint64_t v106 = "weekday ";
        }
        if (v105 != byte_1B0DE1758[*v106]) {
          return 1;
        }
LABEL_312:
        int v128 = strlen((const char *)v60 + 8);
        if ((int)sub_1B0CC9D20(v60 + 8, v159, v128 & 0x3FFFFFFF, 1) < 1) {
          return 1;
        }
        if (v159[0] < 0.0) {
          return 1;
        }
        if (v159[0] >= 7.0) {
          return 1;
        }
        int v129 = (int)v159[0];
        if (v159[0] != (double)(int)v159[0]) {
          return 1;
        }
        sub_1B0CD90D4(a4);
        if (!*(unsigned char *)(a4 + 43))
        {
          sub_1B0D6EC98(a4);
          int v130 = (*(void *)a4 + 43200000) % 86400000;
          *(double *)(a4 + 32) = (double)(v130 % 60000) / 1000.0;
          __int16 v131 = (34953 * (__int16)(v130 / 60000)) >> 16;
          *(_DWORD *)(a4 + 20) = v130 / 3600000;
          *(_DWORD *)(a4 + 24) = (__int16)(v130 / 60000
                                         - 60 * ((v131 >> 5) + ((unsigned __int16)(v131 & 0x8000) >> 15)));
          *(unsigned char *)(a4 + 41) = 0;
          *(unsigned char *)(a4 + 43) = 1;
        }
        *(unsigned char *)(a4 + 44) = 0;
        *(unsigned char *)(a4 + 40) = 0;
        sub_1B0D6EC98(a4);
        uint64_t v132 = (*(void *)a4 + 129600000) / 86400000 % 7;
        if (v132 > v129) {
          v132 -= 7;
        }
        *(void *)a4 += 86400000 * (v129 - v132);
        *(_WORD *)(a4 + 42) = 0;
        *(unsigned char *)(a4 + 44) = 0;
        goto LABEL_287;
      default:
        return 1;
    }
  }
}

uint64_t sub_1B0CD8F60(uint64_t a1, void *a2)
{
  v4.tv_sec = 0;
  *(void *)&v4.tv_usec = 0;
  gettimeofday(&v4, 0);
  *a2 = 1000 * v4.tv_sec + v4.tv_usec / 1000 + 210866760000000;
  return 0;
}

double sub_1B0CD8FDC(uint64_t a1)
{
  sub_1B0CD90D4(a1);
  if (!*(unsigned char *)(a1 + 43))
  {
    sub_1B0D6EC98(a1);
    int v3 = (*(_DWORD *)a1 + 43200000) % 86400000;
    double result = (double)(v3 % 60000) / 1000.0;
    *(double *)(a1 + 32) = result;
    __int16 v4 = (34953 * (__int16)(v3 / 60000)) >> 16;
    *(_DWORD *)(a1 + 20) = v3 / 3600000;
    *(_DWORD *)(a1 + 24) = (__int16)(v3 / 60000
                                   - 60 * ((v4 >> 5) + ((unsigned __int16)(v4 & 0x8000) >> 15)));
    *(unsigned char *)(a1 + 41) = 0;
    *(unsigned char *)(a1 + 43) = 1;
  }
  return result;
}

uint64_t sub_1B0CD90D4(uint64_t result)
{
  uint64_t v1 = (unsigned char *)(result + 42);
  if (!*(unsigned char *)(result + 42))
  {
    if (*(unsigned char *)(result + 40))
    {
      if (*(void *)result < 0x1A6401072FE00uLL)
      {
        int v2 = (*(void *)result + 43200000) / 0x5265C00uLL
           + (int)(((double)(int)((*(void *)result + 43200000) / 0x5265C00uLL) + -1867216.25) / 36524.25)
           - (int)(((double)(int)((*(void *)result + 43200000) / 0x5265C00uLL) + -1867216.25) / 36524.25) / 4
           + 1525;
        int v3 = (int)(((double)v2 + -122.1) / 365.25);
        int v4 = v2 - 36525 * (v3 & 0x7FFFu) / 0x64;
        int v5 = (int)((double)v4 / 30.6001);
        *(_DWORD *)(result + 16) = v4 - (int)((double)v5 * 30.6001);
        if (v5 < 14) {
          int v6 = -1;
        }
        else {
          int v6 = -13;
        }
        int v7 = v6 + v5;
        if (v7 > 2) {
          int v8 = -4716;
        }
        else {
          int v8 = -4715;
        }
        *(_DWORD *)(result + 8) = v8 + v3;
        *(_DWORD *)(result + 12) = v7;
      }
      else
      {
        *(_OWORD *)(result + 16) = 0u;
        *(_OWORD *)(result + 32) = 0u;
        *(_OWORD *)double result = 0u;
        uint64_t v1 = (unsigned char *)(result + 46);
      }
    }
    else
    {
      *(void *)(result + 8) = 0x1000007D0;
      *(_DWORD *)(result + 16) = 1;
    }
    *uint64_t v1 = 1;
  }
  return result;
}

void **sub_1B0CD9230(void **result, void *a2, char *__s)
{
  int v4 = result;
  if (!__s)
  {
    int v8 = 0;
    goto LABEL_8;
  }
  size_t v6 = strlen(__s);
  unint64_t v7 = v6 + 1;
  if (!a2)
  {
    double result = (void **)sub_1B0C7FC94(v6 + 1);
    int v8 = result;
    if (!result) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  double result = (void **)sub_1B0D05DC0((uint64_t)a2, v7);
  int v8 = result;
  if (result) {
LABEL_7:
  }
    double result = (void **)memcpy(v8, __s, v7);
LABEL_8:
  if (*v4) {
    double result = (void **)sub_1B0D05C10(a2, *v4);
  }
  *int v4 = v8;
  return result;
}

uint64_t sub_1B0CD92D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return 0;
  }
  if (!*(void *)a3) {
    return 0;
  }
  if (!*(void *)(a3 + 16)) {
    return 0;
  }
  uint64_t v5 = sub_1B0CF60C8(*(void *)a1, *(char **)a3, *(unsigned char **)(a1 + 8));
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v5;
  unint64_t v7 = *(unsigned __int8 **)(a3 + 8);
  if (!v7) {
    goto LABEL_15;
  }
  int v8 = *(char **)a3;
  if (!*(void *)a3)
  {
LABEL_16:
    uint64_t v12 = sub_1B0D22904(*(void *)a1, v7, *(unsigned __int8 **)(a1 + 8));
    double v14 = *(unsigned __int8 **)(a3 + 16);
    if (v12)
    {
      __int16 v13 = *(_WORD *)(v12 + 99);
      goto LABEL_18;
    }
    goto LABEL_20;
  }
  for (uint64_t i = *(unsigned __int8 **)(a3 + 8); ; ++i)
  {
    uint64_t v10 = *v8;
    uint64_t v11 = *i;
    if (v10 == v11) {
      break;
    }
    if (byte_1B0DE1758[v10] != byte_1B0DE1758[v11]) {
      goto LABEL_16;
    }
LABEL_9:
    ++v8;
  }
  if (*v8) {
    goto LABEL_9;
  }
  uint64_t v12 = *(void *)(v5 + 16);
  if (v12)
  {
    while (1)
    {
      __int16 v13 = *(_WORD *)(v12 + 99);
      if ((v13 & 3) == 2) {
        break;
      }
      uint64_t v12 = *(void *)(v12 + 40);
      if (!v12) {
        goto LABEL_15;
      }
    }
    double v14 = *(unsigned __int8 **)(a3 + 16);
LABEL_18:
    int v15 = *(unsigned __int16 *)(v12 + 94) + 1;
    *(_WORD *)(v12 + 99) = v13 & 0xFFFB;
    sub_1B0D22C38(v14, v15, *(void *)(v12 + 16), v12);
    *(_WORD *)(v12 + 99) |= 0x80u;
    if (!*(void *)(v12 + 72))
    {
      *(_WORD *)(v6 + 58) = **(_WORD **)(v12 + 16);
      goto LABEL_21;
    }
    return 0;
  }
LABEL_15:
  double v14 = *(unsigned __int8 **)(a3 + 16);
LABEL_20:
  long long v18 = 0u;
  long long v19 = 0u;
  memset(v17, 0, sizeof(v17));
  WORD6(v18) = *(_WORD *)(v6 + 60);
  sub_1B0D22C38(v14, 1, v6 + 58, (uint64_t)v17);
  *(_WORD *)(v6 + 60) = WORD6(v18);
LABEL_21:
  *(_DWORD *)(v6 + 48) |= 0x10u;
  return 0;
}

uint64_t sub_1B0CD9448(uint64_t a1, int a2, int a3, int a4, int8x8_t a5)
{
  uint64_t v9 = *(void *)(a1 + 8);
  if (*(unsigned char *)(a1 + 17))
  {
    ++*(_DWORD *)(a1 + 20);
    if (!*(unsigned char *)(a1 + 18)) {
      sub_1B0D12478(a1);
    }
  }
  int v10 = *(_DWORD *)(v9 + 52);
  *(unsigned char *)(v9 + 38) = a3;
  int v11 = v10 - *(_DWORD *)(v9 + 56);
  if (v11 > a3) {
    a3 = v11;
  }
  if ((*(_WORD *)(v9 + 40) & 2) != 0)
  {
    if (!*(unsigned char *)(a1 + 17)) {
      return 8;
    }
    int v17 = *(_DWORD *)(a1 + 20);
    uint64_t v16 = 8;
    goto LABEL_23;
  }
  if ((a2 - 512) <= 0xFE00)
  {
    a5.i32[0] = a2;
    uint8x8_t v12 = (uint8x8_t)vcnt_s8(a5);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.i32[0] <= 1u)
    {
      BOOL v13 = a3 > 32 && a2 == 512;
      int v14 = v13 ? 1024 : a2;
      *(_DWORD *)(v9 + 52) = v14;
      uint64_t v15 = *(void *)(v9 + 136);
      if (v15)
      {
        *(void *)(v9 + 136) = v15 - 4;
        sub_1B0D10ED8(v15 - 4);
        *(void *)(v9 + 136) = 0;
      }
    }
  }
  uint64_t v16 = sub_1B0C7CE4C(*(void *)v9, (_DWORD *)(v9 + 52), a3);
  *(_DWORD *)(v9 + 56) = *(_DWORD *)(v9 + 52) - (unsigned __int16)a3;
  if (a4) {
    *(_WORD *)(v9 + 40) |= 2u;
  }
  if (*(unsigned char *)(a1 + 17))
  {
    int v17 = *(_DWORD *)(a1 + 20);
LABEL_23:
    int v18 = v17 - 1;
    *(_DWORD *)(a1 + 20) = v18;
    if (!v18) {
      sub_1B0D12558(a1);
    }
  }
  return v16;
}

uint64_t *sub_1B0CD9598(uint64_t *result, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (!*((_DWORD *)result + 12))
  {
    uint64_t v9 = result;
    if (!*((unsigned char *)result + 302))
    {
      uint64_t v10 = *result;
      int v11 = *(_DWORD *)(*result + 44);
      double result = (uint64_t *)sub_1B0D0E5DC(*result, a2, &a9);
      if (result)
      {
        uint8x8_t v12 = result;
        ++*((unsigned char *)v9 + 30);
        uint64_t v21 = v9[51];
        long long v19 = *(_OWORD *)(v9 + 47);
        long long v20 = *(_OWORD *)(v9 + 49);
        long long v15 = *(_OWORD *)(v9 + 39);
        long long v16 = *(_OWORD *)(v9 + 41);
        long long v17 = *(_OWORD *)(v9 + 43);
        long long v18 = *(_OWORD *)(v9 + 45);
        long long v13 = *(_OWORD *)(v9 + 35);
        long long v14 = *(_OWORD *)(v9 + 37);
        v9[51] = 0;
        *(_OWORD *)(v9 + 47) = 0u;
        *(_OWORD *)(v9 + 49) = 0u;
        *(_OWORD *)(v9 + 43) = 0u;
        *(_OWORD *)(v9 + 45) = 0u;
        *(_OWORD *)(v9 + 39) = 0u;
        *(_OWORD *)(v9 + 41) = 0u;
        *(_OWORD *)(v9 + 35) = 0u;
        *(_OWORD *)(v9 + 37) = 0u;
        *(_DWORD *)(v10 + 44) |= 2u;
        sub_1B0C7F440(v9, result);
        *(_DWORD *)(v10 + 44) = v11;
        double result = sub_1B0D05C10((void *)v10, v12);
        *(_OWORD *)(v9 + 47) = v19;
        *(_OWORD *)(v9 + 49) = v20;
        v9[51] = v21;
        *(_OWORD *)(v9 + 39) = v15;
        *(_OWORD *)(v9 + 41) = v16;
        *(_OWORD *)(v9 + 43) = v17;
        *(_OWORD *)(v9 + 45) = v18;
        *(_OWORD *)(v9 + 35) = v13;
        *(_OWORD *)(v9 + 37) = v14;
        --*((unsigned char *)v9 + 30);
      }
      else
      {
        if (!*(unsigned char *)(v10 + 103)) {
          *((_DWORD *)v9 + 6) = 18;
        }
        ++*((_DWORD *)v9 + 12);
      }
    }
  }
  return result;
}

uint64_t sub_1B0CD96FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(void *)(a1 + 400) || *(void *)(a3 + 104) || *(unsigned char *)(a2 + 63) == 1) {
    return 0;
  }
  uint64_t v8 = *(void *)a1;
  if (a4 == 11)
  {
    if (*(__int16 *)(a2 + 52) < 0 || (a4 = *(unsigned __int8 *)(a2 + 62), a4 == 11)) {
      a4 = 2;
    }
  }
  uint64_t v9 = *(void *)(a3 + 40);
  if (*(_DWORD *)v9 != 1) {
    return 0;
  }
  if (*(void *)(v9 + 48)) {
    return 0;
  }
  if (*(void *)(a3 + 48)) {
    return 0;
  }
  if (*(void *)(a3 + 72)) {
    return 0;
  }
  if (*(void *)(a3 + 56)) {
    return 0;
  }
  if (*(void *)(a3 + 96)) {
    return 0;
  }
  if (*(void *)(a3 + 80)) {
    return 0;
  }
  unsigned int v203 = a5;
  if (*(unsigned char *)(a3 + 4)) {
    return 0;
  }
  uint64_t v10 = *(void *)(a3 + 32);
  if (*(_DWORD *)v10 != 1 || **(unsigned __int8 **)(v10 + 8) != 180) {
    return 0;
  }
  uint64_t v11 = a4;
  uint64_t result = sub_1B0D38D78(a1, 0, v9 + 8, a4, a5, a6, a7, a8);
  if (!result) {
    return result;
  }
  uint64_t v19 = result;
  if (*(_DWORD *)(result + 40) == *(_DWORD *)(a2 + 40) && *(void *)(result + 96) == *(void *)(a2 + 96)) {
    return 0;
  }
  int v20 = *(_DWORD *)(a2 + 48);
  int v21 = *(_DWORD *)(result + 48);
  if (((v21 ^ v20) & 0x80) != 0) {
    return 0;
  }
  if (*(unsigned char *)(result + 63)) {
    return 0;
  }
  int v22 = *(unsigned __int16 *)(a2 + 54);
  if (v22 != *(unsigned __int16 *)(result + 54)
    || *(unsigned __int16 *)(a2 + 52) != *(unsigned __int16 *)(result + 52)
    || (v20 & 0x10000) != 0 && (v21 & 0x10000) == 0)
  {
    return 0;
  }
  if ((__int16)v22 >= 1)
  {
    uint64_t v23 = 0;
    do
    {
      uint64_t v24 = *(void *)(a2 + 8);
      uint64_t v201 = *(void *)(v19 + 8);
      uint64_t v25 = v24 + 16 * v23;
      __int16 v27 = *(_WORD *)(v25 + 14);
      int v26 = (__int16 *)(v25 + 14);
      int v28 = v27 & 0x60;
      uint64_t v29 = v201 + 16 * v23;
      __int16 v31 = *(_WORD *)(v29 + 14);
      uint64_t v30 = (_WORD *)(v29 + 14);
      if (v28 != (v31 & 0x60)) {
        return 0;
      }
      if (v28)
      {
        int v32 = *(unsigned __int16 *)(v201 + 16 * v23 + 12);
        if (*(_WORD *)(v201 + 16 * v23 + 12)
          && !*(unsigned char *)(v19 + 63)
          && (uint64_t v50 = *(_DWORD **)(v19 + 80)) != 0
          && *v50 >= v32)
        {
          BOOL v33 = *(unsigned __int8 **)&v50[6 * (v32 - 1) + 2];
        }
        else
        {
          BOOL v33 = 0;
        }
        int v34 = *(unsigned __int16 *)(v24 + 16 * v23 + 12);
        if (*(_WORD *)(v24 + 16 * v23 + 12)
          && !*(unsigned char *)(a2 + 63)
          && (uint64_t v51 = *(_DWORD **)(a2 + 80)) != 0
          && *v51 >= v34)
        {
          uint64_t v35 = *(unsigned __int8 **)&v51[6 * (v34 - 1) + 2];
        }
        else
        {
          uint64_t v35 = 0;
        }
        if (sub_1B0D31DE4(0, v33, v35, 0xFFFFFFFFLL)) {
          return 0;
        }
      }
      if (*(unsigned __int8 *)(v24 + 16 * v23 + 9) != *(unsigned __int8 *)(v201 + 16 * v23 + 9)) {
        return 0;
      }
      __int16 v36 = *v26;
      if ((*v26 & 0x200) != 0)
      {
        uint64_t v38 = *(void *)(v24 + 16 * v23) - 1;
        while (*(unsigned __int8 *)++v38)
          ;
        if ((v36 & 4) != 0)
        {
          while (*(unsigned __int8 *)++v38)
            ;
        }
        int v37 = (const char *)(v38 + 1);
      }
      else
      {
        int v37 = 0;
      }
      if ((*v30 & 0x200) != 0)
      {
        uint64_t v42 = *(void *)(v201 + 16 * v23) - 1;
        while (*(unsigned __int8 *)++v42)
          ;
        if ((*v30 & 4) != 0)
        {
          while (*(unsigned __int8 *)++v42)
            ;
        }
        int v41 = (const char *)(v42 + 1);
      }
      else
      {
        int v41 = 0;
      }
      if (sqlite3_stricmp(v37, v41)
        || (*(unsigned char *)(v24 + 16 * v23 + 8) & 0xF) != 0 && (*(unsigned char *)(v201 + 16 * v23 + 8) & 0xF) == 0)
      {
        return 0;
      }
      if (v23 && (v36 & 0x60) == 0)
      {
        int v45 = *(unsigned __int16 *)(v24 + 16 * v23 + 12);
        if (*(_WORD *)(v24 + 16 * v23 + 12)
          && !*(unsigned char *)(a2 + 63)
          && (uint64_t v52 = *(_DWORD **)(a2 + 80)) != 0
          && *v52 >= v45)
        {
          uint64_t v46 = *(void *)&v52[6 * (v45 - 1) + 2];
        }
        else
        {
          uint64_t v46 = 0;
        }
        int v47 = *(unsigned __int16 *)(v201 + 16 * v23 + 12);
        if (*(_WORD *)(v201 + 16 * v23 + 12)
          && !*(unsigned char *)(v19 + 63)
          && (uint64_t v48 = *(_DWORD **)(v19 + 80)) != 0
          && *v48 >= v47)
        {
          uint64_t v49 = *(void *)&v48[6 * (v47 - 1) + 2];
          if ((v46 != 0) == (v49 == 0) || v46 && strcmp(*(const char **)(v46 + 8), *(const char **)(v49 + 8))) {
            return 0;
          }
        }
        else if (v46)
        {
          return 0;
        }
      }
    }
    while (++v23 < *(__int16 *)(a2 + 54));
  }
  uint64_t v53 = *(void *)(a2 + 16);
  if (v53)
  {
    int v54 = 0;
    while (1)
    {
      if (*(unsigned char *)(v53 + 98)) {
        int v54 = 1;
      }
      uint64_t v55 = *(void *)(v19 + 16);
      if (!v55) {
        return 0;
      }
      while (1)
      {
        uint64_t result = sub_1B0D5CCB8(v53, v55);
        if (result) {
          break;
        }
        uint64_t v55 = *(void *)(v55 + 40);
        if (!v55) {
          return result;
        }
      }
      if (*(_DWORD *)(v55 + 88) == *(_DWORD *)(v53 + 88) && *(void *)(v19 + 96) == *(void *)(a2 + 96))
      {
        if (!off_1EB21CB60) {
          return 0;
        }
        uint64_t result = off_1EB21CB60(411);
        if (!result) {
          return result;
        }
      }
      uint64_t v53 = *(void *)(v53 + 40);
      if (!v53) {
        goto LABEL_97;
      }
    }
  }
  int v54 = 0;
LABEL_97:
  unint64_t v56 = *(void *)(a2 + 32);
  if (v56 && sub_1B0D323D8(*(void *)(v19 + 32), v56, 0xFFFFFFFFLL)) {
    return 0;
  }
  uint64_t v57 = *(void *)(v8 + 48);
  if ((v57 & 0x4000) == 0)
  {
    if ((v57 & 0x100000000) == 0)
    {
LABEL_104:
      uint64_t v58 = *(void *)(v19 + 96);
      if (v58)
      {
        int v59 = (uint64_t *)(*(void *)(v8 + 32) + 24);
        LODWORD(v60) = -1;
        do
        {
          uint64_t v61 = *v59;
          v59 += 4;
          uint64_t v60 = (v60 + 1);
        }
        while (v61 != v58);
      }
      else
      {
        uint64_t v60 = 4294934528;
      }
      uint64_t v62 = sub_1B0CCB8D4((uint64_t *)a1, v56, v13, v14, v15, v16, v17, v18);
      sub_1B0C9CCDC(a1, v60);
      uint64_t v63 = *(unsigned int *)(a1 + 52);
      *(_DWORD *)(a1 + 52) = v63 + 2;
      uint64_t v68 = sub_1B0D5C73C(a1, v203, a2);
      char v69 = *(unsigned char *)(a1 + 31);
      if (v69)
      {
        unsigned __int8 v70 = v69 - 1;
        *(unsigned char *)(a1 + 31) = v70;
        unsigned int v202 = *(_DWORD *)(a1 + 4 * v70 + 224);
      }
      else
      {
        unsigned int v202 = *(_DWORD *)(a1 + 56) + 1;
        *(_DWORD *)(a1 + 56) = v202;
      }
      sub_1B0D254B8(v62, 75, 0, v202, v64, v65, v66, v67);
      if (*(unsigned char *)(a1 + 31))
      {
        unsigned __int8 v74 = *(unsigned char *)(a1 + 31) - 1;
        *(unsigned char *)(a1 + 31) = v74;
        unsigned int v200 = *(_DWORD *)(a1 + 4 * v74 + 224);
      }
      else
      {
        unsigned int v200 = *(_DWORD *)(a1 + 56) + 1;
        *(_DWORD *)(a1 + 56) = v200;
      }
      sub_1B0C9CD14((void *)a1, (v63 + 1), v203, a2, 113, v71, v72, v73);
      if ((*(unsigned char *)(v8 + 44) & 4) == 0
        && (*(__int16 *)(a2 + 52) < 0 && *(void *)(a2 + 16) || v54 || (v11 - 3) <= 0xFFFFFFFD))
      {
        int v79 = sub_1B0D254B8(v62, 36, (v63 + 1), 0, v75, v76, v77, v78);
        int v198 = sub_1B0D2F924(v62, 9, v80, v81, v82, v83, v84, v85);
        if (*(unsigned char *)(*(void *)v62 + 103)) {
          uint64_t v86 = &byte_1E9B52240;
        }
        else {
          uint64_t v86 = (char *)(*(void *)(v62 + 136) + 40 * v79);
        }
        *((_DWORD *)v86 + 2) = *(_DWORD *)(v62 + 144);
      }
      else
      {
        int v198 = 0;
      }
      if ((*(unsigned char *)(v19 + 48) & 0x80) != 0)
      {
        sub_1B0D2FB04(a1, v203, *(_DWORD *)(a2 + 40), 1, *(void *)a2);
        sub_1B0D2FB04(a1, v60, *(_DWORD *)(v19 + 40), 0, *(void *)v19);
        int v199 = 0;
      }
      else
      {
        sub_1B0C9CD14((void *)a1, v63, v60, v19, 112, v76, v77, v78);
        int v199 = sub_1B0D254B8(v62, 36, v63, 0, v87, v88, v89, v90);
        if (*(__int16 *)(a2 + 52) < 0)
        {
          if (*(void *)(a2 + 16) || (*(unsigned char *)(v8 + 44) & 8) != 0)
          {
            uint64_t v115 = v62;
            uint64_t v116 = 135;
            uint64_t v117 = v63;
          }
          else
          {
            uint64_t v115 = v62;
            uint64_t v116 = 127;
            uint64_t v117 = (v63 + 1);
          }
          uint64_t v100 = sub_1B0D254B8(v115, v116, v117, v200, v91, v92, v93, v94);
        }
        else
        {
          uint64_t v100 = sub_1B0D254B8(v62, 135, v63, v200, v91, v92, v93, v94);
          if ((*(unsigned char *)(v8 + 44) & 4) == 0)
          {
            int v101 = sub_1B0C8A924(v62, 31, (v63 + 1), 0, v200, v97, v98, v99);
            sub_1B0D5C0A0((uint64_t *)a1, v11, a2, v102, v103, v104, v105, v106);
            if (*(unsigned char *)(*(void *)v62 + 103)) {
              int v107 = &byte_1E9B52240;
            }
            else {
              int v107 = (char *)(*(void *)(v62 + 136) + 40 * v101);
            }
            *((_DWORD *)v107 + 2) = *(_DWORD *)(v62 + 144);
          }
          sub_1B0D5CC54(a1, v68, v200, v95, v96, v97, v98, v99);
        }
        int v123 = *(_DWORD *)(v8 + 44);
        if ((v123 & 4) != 0)
        {
          sub_1B0D2F978(v62, 137, (v63 + 1), v118, v119, v120, v121, v122);
          int v123 = *(_DWORD *)(v8 + 44);
          __int16 v124 = 152;
        }
        else
        {
          __int16 v124 = 169;
        }
        if ((v123 & 4) != 0)
        {
          sub_1B0C8A924(v62, 129, (v63 + 1), v63, v200, v120, v121, v122);
        }
        else
        {
          sub_1B0C8A924(v62, 134, v63, v202, 1, v120, v121, v122);
          v124 &= 0x39u;
        }
        sub_1B0C8A924(v62, 128, (v63 + 1), v202, v200, v125, v126, v127);
        if ((*(unsigned char *)(v8 + 44) & 4) == 0) {
          sub_1B0C9B078((uint64_t *)v62, -1, a2, 0xFFFFFFFB);
        }
        int v132 = *(_DWORD *)(v62 + 144);
        BOOL v133 = __OFSUB__(v132, 1);
        int v134 = v132 - 1;
        if (v134 < 0 == v133) {
          *(_WORD *)(*(void *)(v62 + 136) + 40 * v134 + 2) = v124;
        }
        sub_1B0D254B8(v62, 39, v63, v100, v128, v129, v130, v131);
        sub_1B0D254B8(v62, 122, v63, 0, v135, v136, v137, v138);
        sub_1B0D254B8(v62, 122, (v63 + 1), 0, v139, v140, v141, v142);
      }
      uint64_t v143 = *(void *)(a2 + 16);
      if (!v143)
      {
LABEL_185:
        if (v199)
        {
          if (*(unsigned char *)(*(void *)v62 + 103)) {
            v190 = &byte_1E9B52240;
          }
          else {
            v190 = (char *)(*(void *)(v62 + 136) + 40 * v199);
          }
          *((_DWORD *)v190 + 2) = *(_DWORD *)(v62 + 144);
        }
        if (v200)
        {
          uint64_t v191 = *(unsigned __int8 *)(a1 + 31);
          if (v191 <= 7)
          {
            *(unsigned char *)(a1 + 31) = v191 + 1;
            *(_DWORD *)(a1 + 4 * v191 + 224) = v200;
          }
        }
        if (v202)
        {
          uint64_t v192 = *(unsigned __int8 *)(a1 + 31);
          if (v192 <= 7)
          {
            *(unsigned char *)(a1 + 31) = v192 + 1;
            *(_DWORD *)(a1 + 4 * v192 + 224) = v202;
          }
        }
        if (!v198) {
          return 1;
        }
        if (*(void *)(a1 + 160)) {
          sub_1B0D5A764((uint64_t *)a1, v108, v109, v110, v111, v112, v113, v114);
        }
        sub_1B0D254B8(v62, 70, 0, 0, v111, v112, v113, v114);
        if (*(unsigned char *)(*(void *)v62 + 103)) {
          v197 = &byte_1E9B52240;
        }
        else {
          v197 = (char *)(*(void *)(v62 + 136) + 40 * v198);
        }
        *((_DWORD *)v197 + 2) = *(_DWORD *)(v62 + 144);
        sub_1B0D254B8(v62, 122, (v63 + 1), 0, v193, v194, v195, v196);
        return 0;
      }
      while (1)
      {
        for (uint64_t i = *(void *)(v19 + 16); i; uint64_t i = *(void *)(i + 40))
        {
          if (sub_1B0D5CCB8(v143, i)) {
            break;
          }
        }
        sub_1B0C8A924(v62, 112, v63, *(unsigned int *)(i + 88), v60, v112, v113, v114);
        sub_1B0D2FB30(a1, i);
        sub_1B0C8A924(v62, 113, (v63 + 1), *(unsigned int *)(v143 + 88), v203, v149, v150, v151);
        sub_1B0D2FB30(a1, v143);
        int v156 = *(_DWORD *)(v62 + 144);
        BOOL v133 = __OFSUB__(v156, 1);
        int v157 = v156 - 1;
        if (v157 < 0 == v133) {
          *(_WORD *)(*(void *)(v62 + 136) + 40 * v157 + 2) = 1;
        }
        int v163 = sub_1B0D254B8(v62, 36, v63, 0, v152, v153, v154, v155);
        if ((*(unsigned char *)(v8 + 44) & 4) != 0) {
          break;
        }
        if ((*(unsigned char *)(v19 + 48) & 0x80) != 0)
        {
          if ((*(_WORD *)(v143 + 99) & 3) == 2) {
            __int16 v164 = 9;
          }
          else {
            __int16 v164 = 8;
          }
          goto LABEL_177;
        }
LABEL_176:
        __int16 v164 = 8;
LABEL_177:
        sub_1B0C8A924(v62, 134, v63, v202, 1, v160, v161, v162);
        if ((*(unsigned char *)(v8 + 44) & 4) == 0 && (*(unsigned char *)(a2 + 48) & 0x80) != 0 && (*(_WORD *)(v143 + 99) & 3) == 2) {
          sub_1B0D5C618(a1, a2, (v63 + 1), v202, v175, v176, v177, v178);
        }
LABEL_181:
        sub_1B0D254B8(v62, 138, (v63 + 1), v202, v175, v176, v177, v178);
        int v183 = *(_DWORD *)(v62 + 144);
        BOOL v133 = __OFSUB__(v183, 1);
        int v184 = v183 - 1;
        if (v184 < 0 == v133) {
          *(_WORD *)(*(void *)(v62 + 136) + 40 * v184 + 2) = v164;
        }
        sub_1B0D254B8(v62, 39, v63, (v163 + 1), v179, v180, v181, v182);
        v189 = &byte_1E9B52240;
        if (!*(unsigned char *)(*(void *)v62 + 103)) {
          v189 = (char *)(*(void *)(v62 + 136) + 40 * v163);
        }
        *((_DWORD *)v189 + 2) = *(_DWORD *)(v62 + 144);
        sub_1B0D254B8(v62, 122, v63, 0, v185, v186, v187, v188);
        sub_1B0D254B8(v62, 122, (v63 + 1), 0, v144, v145, v146, v147);
        uint64_t v143 = *(void *)(v143 + 40);
        if (!v143) {
          goto LABEL_185;
        }
      }
      uint64_t v165 = *(unsigned __int16 *)(i + 96);
      if (!*(_WORD *)(i + 96))
      {
        LODWORD(v166) = 0;
LABEL_174:
        if (v166 == v165) {
          goto LABEL_175;
        }
        goto LABEL_176;
      }
      uint64_t v166 = 0;
LABEL_165:
      BOOL v167 = *(unsigned __int8 **)(*(void *)(i + 64) + 8 * v166);
      if (!v167) {
        goto LABEL_174;
      }
      for (j = "BINARY"; ; ++j)
      {
        uint64_t v169 = *(unsigned __int8 *)j;
        uint64_t v170 = *v167;
        if (v169 == v170)
        {
          if (!*j)
          {
            if (++v166 == v165)
            {
LABEL_175:
              sub_1B0D2F978(v62, 137, (v63 + 1), v158, v159, v160, v161, v162);
              sub_1B0D254B8(v62, 129, (v63 + 1), v63, v171, v172, v173, v174);
              __int16 v164 = 152;
              goto LABEL_181;
            }
            goto LABEL_165;
          }
        }
        else if (byte_1B0DE1758[v169] != byte_1B0DE1758[v170])
        {
          goto LABEL_174;
        }
        ++v167;
      }
    }
    return 0;
  }
  uint64_t result = 0;
  if ((v57 & 0x100000000) == 0 && !*(void *)(a2 + 72)) {
    goto LABEL_104;
  }
  return result;
}

uint64_t sub_1B0CDA30C(uint64_t a1, int a2, double a3)
{
  if (off_1E9B52208) {
    a3 = off_1E9B52208(a1);
  }
  if (*(unsigned char *)(a1 + 111))
  {
    if ((*(unsigned char *)(a1 + 44) & 1) == 0)
    {
LABEL_5:
      BOOL v5 = 0;
      goto LABEL_8;
    }
  }
  else
  {
    sub_1B0D0E4C4(a1);
    if ((*(unsigned char *)(a1 + 44) & 1) == 0) {
      goto LABEL_5;
    }
  }
  BOOL v5 = *(unsigned char *)(a1 + 197) == 0;
LABEL_8:
  int v6 = *(_DWORD *)(a1 + 40);
  if (v6 < 1)
  {
    int v8 = 0;
  }
  else
  {
    uint64_t v7 = 0;
    int v8 = 0;
    uint64_t v9 = 8;
    do
    {
      uint64_t v10 = *(void *)(*(void *)(a1 + 32) + v9);
      if (v10)
      {
        if (*(unsigned char *)(v10 + 16) == 2) {
          int v8 = 1;
        }
        sub_1B0CC7410(v10, a2, !v5, a3);
        int v6 = *(_DWORD *)(a1 + 40);
      }
      ++v7;
      v9 += 32;
    }
    while (v7 < v6);
  }
  uint64_t result = (uint64_t)sub_1B0CB33C4((int *)a1, 0x88u);
  if (off_1E9B52210) {
    uint64_t result = off_1E9B52210(result);
  }
  if (v5)
  {
    for (uint64_t i = *(void *)(a1 + 8); i; uint64_t i = *(void *)(i + 16))
      *(_WORD *)(i + 268) = *(_WORD *)(i + 268) & 0xFFFC | 1;
    uint64_t result = (uint64_t)sub_1B0CE89B4(a1);
  }
  if (!*(unsigned char *)(a1 + 111)) {
    uint64_t result = sub_1B0D0E55C(a1);
  }
  *(_OWORD *)(a1 + 800) = 0u;
  *(void *)(a1 + 48) &= 0xFFFFFFFDFFF7FFFFLL;
  uint64_t v13 = *(uint64_t (**)(uint64_t))(a1 + 296);
  if (v13 && (v8 || !*(unsigned char *)(a1 + 101)))
  {
    uint64_t v14 = *(void *)(a1 + 288);
    return v13(v14);
  }
  return result;
}

uint64_t sub_1B0CDA4A0(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  int v49 = *(void *)(a1 + 200);
  int v50 = 1;
  uint64_t v5 = (*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 80) + 48))(*(void *)(a1 + 80), &v52);
  if (v5
    || (int v6 = *(int8x8_t **)(a1 + 328),
        uint64_t v5 = sub_1B0DDE4AC(*(void *)(a1 + 80), v6, *(_DWORD *)(*(void *)a1 + 8) + 1),
        v5))
  {
    uint64_t v8 = v5;
    int v9 = 0;
LABEL_4:
    uint64_t v10 = (unsigned char *)(a1 + 16);
    *(unsigned char *)(a1 + 23) = *(unsigned char *)(a1 + 16);
    goto LABEL_5;
  }
  if (v6->i8[0])
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t, int8x8_t *, void, int *))(v4 + 56))(v4, v6, 0, &v50);
    int v9 = 0;
    if (v8) {
      goto LABEL_48;
    }
  }
  else
  {
    uint64_t v8 = 0;
    int v9 = 0;
  }
  if (v50)
  {
    int v9 = 0;
    *(void *)(a1 + 96) = 0;
    uint64_t v15 = (uint64_t *)(a1 + 96);
    int v16 = a2;
LABEL_26:
    while (1)
    {
      *(float *)&double v7 = sub_1B0CDAD0C(a1, a2, v52, (_DWORD *)&v51 + 1, &v51, v7);
      if (v17) {
        break;
      }
      LODWORD(v18) = HIDWORD(v51);
      uint64_t v19 = *(unsigned int *)(a1 + 184);
      if (HIDWORD(v51) == -1)
      {
        uint64_t v18 = (v52 - v19) / (*(void *)(a1 + 200) + 8);
        HIDWORD(v51) = v18;
      }
      uint64_t v20 = *v15;
      if (!(v18 | a2) && *(void *)(a1 + 104) + v19 == v20)
      {
        uint64_t v18 = (v52 - v20) / (*(void *)(a1 + 200) + 8);
        HIDWORD(v51) = v18;
      }
      if (v20 == v19)
      {
        unsigned int v21 = v51;
        uint64_t v22 = sub_1B0CDAF40(a1, v51);
        if (v22)
        {
          uint64_t v8 = v22;
          goto LABEL_4;
        }
        *(_DWORD *)(a1 + 32) = v21;
        if (*(_DWORD *)(a1 + 188) < v21) {
          *(_DWORD *)(a1 + 188) = v21;
        }
      }
      if (v18)
      {
        int v23 = 0;
        int v24 = v9 + v18;
        while (1)
        {
          if (v16)
          {
            ++*(_DWORD *)(a1 + 132);
            for (uint64_t i = *(void *)(a1 + 112); i; uint64_t i = *(void *)(i + 64))
              *(_DWORD *)(i + 24) = 1;
            sub_1B0C7D108(*(void **)(a1 + 336), 0);
          }
          uint64_t v26 = sub_1B0CDB048(a1, (void *)(a1 + 96), 0, 1, 0);
          if (v26) {
            break;
          }
          int v16 = 0;
          ++v9;
          if (++v23 == v18)
          {
            int v9 = v24;
            goto LABEL_26;
          }
        }
        uint64_t v8 = v26;
        if (v26 != 101)
        {
          if (v26 == 522) {
            goto LABEL_49;
          }
          goto LABEL_48;
        }
        int v16 = 0;
        *uint64_t v15 = v52;
      }
    }
    uint64_t v8 = v17;
    if (v17 != 101) {
      goto LABEL_4;
    }
    goto LABEL_49;
  }
LABEL_48:
  if (v8) {
    goto LABEL_4;
  }
LABEL_49:
  uint64_t v27 = sub_1B0C7CE4C(a1, &v49, 0xFFFFFFFFLL);
  uint64_t v10 = (unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 23) = *(unsigned char *)(a1 + 16);
  if (v27
    || (int v28 = (int8x8_t *)(*(void *)(a1 + 328) + 4),
        uint64_t v27 = sub_1B0DDE4AC(*(void *)(a1 + 80), v28, *(_DWORD *)(*(void *)a1 + 8) + 1),
        v27)
    || *(unsigned __int8 *)(a1 + 21) - 4 <= 0xFFFFFFFC
    && ((uint64_t v29 = *(void *)(a1 + 72), *(void *)v29)
     && ((uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v29 + 80))(v29, 21, 0),
          v27 != 12)
       ? (BOOL v30 = v27 == 0)
       : (BOOL v30 = 1),
         !v30)
     || !*(unsigned char *)(a1 + 11)
     && *(unsigned char *)(a1 + 14)
     && (uint64_t v27 = (*(uint64_t (**)(void))(**(void **)(a1 + 72) + 40))(*(void *)(a1 + 72)), v27)))
  {
    uint64_t v8 = v27;
    goto LABEL_5;
  }
  uint64_t v8 = sub_1B0CB2BC8(a1, v28->i8[0] != 0, 0);
  if (v8 || !v28->i8[0] || !v50) {
    goto LABEL_5;
  }
  **(_DWORD **)(a1 + 328) = 0;
  uint64_t v31 = *(void *)a1;
  uint64_t v54 = 0;
  uint64_t v32 = 2 * *(int *)(v31 + 4);
  BOOL v33 = (void *)sub_1B0C7FC94(v32);
  if (!v33)
  {
    uint64_t v8 = 7;
    goto LABEL_5;
  }
  int v34 = v33;
  bzero(v33, v32);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, int8x8_t *, void *, void, void))(v31 + 40))(v31, v28, v34, *(_DWORD *)(a1 + 180) & 0x1700000 | 0x4001u, 0);
  if (!v8)
  {
    uint64_t v35 = *(int *)(v31 + 4);
    uint64_t v8 = (*(uint64_t (**)(void *, uint64_t *))(*(void *)v34 + 48))(v34, &v54);
    if (!v8)
    {
      uint64_t v43 = *(int *)(v31 + 8) + 1;
      __int16 v36 = (_DWORD *)sub_1B0C7FC94(v54 + v43 + 6);
      if (v36)
      {
        int v44 = v36;
        _DWORD *v36 = 0;
        __s1 = (char *)v54;
        uint64_t v48 = (const char *)(v36 + 1);
        uint64_t v8 = (*(uint64_t (**)(void *))(*(void *)v34 + 16))(v34);
        if (!v8)
        {
          v48[v54] = 0;
          v48[v54 + 1] = 0;
          if (v54 < 1)
          {
LABEL_88:
            if (*(void *)v34)
            {
              (*(void (**)(void *))(*(void *)v34 + 8))(v34);
              *(void *)int v34 = 0;
            }
            int v40 = *(uint64_t (**)(uint64_t, int8x8_t *, void))(v31 + 48);
            if (v40) {
              uint64_t v8 = v40(v31, v28, 0);
            }
            else {
              uint64_t v8 = 0;
            }
          }
          else
          {
            uint64_t v45 = (uint64_t)v34 + v35;
            int v37 = v48;
            __s1a = (int8x8_t *)&v48[(void)__s1 + 2];
            while (1)
            {
              int v53 = 0;
              uint64_t v8 = (*(uint64_t (**)(uint64_t, const char *, void, int *))(v31 + 56))(v31, v37, 0, &v53);
              if (v8) {
                break;
              }
              if (v53)
              {
                uint64_t v38 = (*(uint64_t (**)(uint64_t, const char *, uint64_t, void, void))(v31 + 40))(v31, v37, v45, *(_DWORD *)(a1 + 180) & 0x1700000 | 0x4001u, 0);
                if (v38)
                {
                  uint64_t v39 = v38;
LABEL_94:
                  uint64_t v8 = v39;
                  break;
                }
                uint64_t v39 = sub_1B0DDE4AC(v45, __s1a, v43);
                if (*(void *)v45)
                {
                  (*(void (**)(uint64_t))(*(void *)v45 + 8))(v45);
                  *(void *)uint64_t v45 = 0;
                }
                if (v39) {
                  goto LABEL_94;
                }
                if (__s1a->i8[0] && !strcmp((const char *)__s1a, (const char *)v28)) {
                  break;
                }
              }
              v37 += (strlen(v37) & 0x3FFFFFFF) + 1;
              if (v37 - v48 >= v54) {
                goto LABEL_88;
              }
            }
          }
        }
        int v41 = &off_1EB21C9E8;
        if (dword_1EB21C9C0)
        {
          if ((void)xmmword_1EB2201B0) {
            xmmword_1EB21CA40(xmmword_1EB2201B0);
          }
          qword_1EB220108 -= (int)off_1EB21C9F8(v44);
          --qword_1EB220150;
          off_1EB21C9E8(v44);
          int v44 = (_DWORD *)xmmword_1EB2201B0;
          if (!(void)xmmword_1EB2201B0) {
            goto LABEL_101;
          }
          int v41 = &xmmword_1EB21CA50;
        }
        (*v41)(v44);
      }
      else
      {
        uint64_t v8 = 7;
      }
    }
  }
LABEL_101:
  if (*(void *)v34)
  {
    (*(void (**)(void *))(*(void *)v34 + 8))(v34);
    *(void *)int v34 = 0;
  }
  uint64_t v42 = (uint64_t (**)(void *))&off_1EB21C9E8;
  if (!dword_1EB21C9C0) {
    goto LABEL_108;
  }
  if ((void)xmmword_1EB2201B0) {
    xmmword_1EB21CA40(xmmword_1EB2201B0);
  }
  qword_1EB220108 -= (int)off_1EB21C9F8(v34);
  --qword_1EB220150;
  off_1EB21C9E8(v34);
  int v34 = (void *)xmmword_1EB2201B0;
  if ((void)xmmword_1EB2201B0)
  {
    uint64_t v42 = (uint64_t (**)(void *))&xmmword_1EB21CA50;
LABEL_108:
    (*v42)(v34);
  }
LABEL_5:
  if (a2 && v9) {
    sqlite3_log(539, "recovered %d pages from %s", v9, *(const char **)(a1 + 224));
  }
  if (*v10 || ((*(uint64_t (**)(void))(**(void **)(a1 + 72) + 96))(*(void *)(a1 + 72)) & 0x1000) != 0)
  {
    int v13 = 512;
  }
  else
  {
    uint64_t v11 = *(uint64_t (**)(void))(**(void **)(a1 + 72) + 88);
    if (v11)
    {
      int v12 = v11();
      if (v12 >= 0x10000) {
        int v13 = 0x10000;
      }
      else {
        int v13 = v12;
      }
      if (v12 < 32) {
        int v13 = 512;
      }
    }
    else
    {
      int v13 = 4096;
    }
  }
  *(_DWORD *)(a1 + 184) = v13;
  return v8;
}

uint64_t sub_1B0CDABDC(uint64_t a1, void *a2)
{
  *a2 = *(void *)(a1 + 24);
  return 0;
}

uint64_t sub_1B0CDABEC(uint64_t a1, char *__dst, int a3, uint64_t a4)
{
  uint64_t v4 = a4 + a3;
  if (v4 > *(void *)(a1 + 24)) {
    return 522;
  }
  if (a4 && *(void *)(a1 + 40) == a4)
  {
    uint64_t v8 = *(void **)(a1 + 48);
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v8 = (void *)(a1 + 16);
    do
    {
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        break;
      }
      v9 += *(int *)(a1 + 8);
    }
    while (v9 <= a4);
  }
  uint64_t v10 = *(int *)(a1 + 8);
  uint64_t v11 = a4 % v10;
  int v12 = v10 - a4 % v10;
  int v13 = a3 - v12;
  if (a3 < v12) {
    int v12 = a3;
  }
  uint64_t v14 = v12;
  memcpy(__dst, (char *)v8 + v11 + 8, v12);
  if ((v13 & 0x80000000) == 0)
  {
    uint64_t v8 = (void *)*v8;
    if (v13 && v8 != 0)
    {
      int v16 = &__dst[v14];
      do
      {
        int v17 = *(_DWORD *)(a1 + 8);
        int v18 = v13 - v17;
        if (v13 < v17) {
          int v17 = v13;
        }
        uint64_t v19 = v17;
        memcpy(v16, v8 + 1, v17);
        if (v18 < 0) {
          break;
        }
        v16 += v19;
        uint64_t v8 = (void *)*v8;
        BOOL v20 = !v18 || v8 == 0;
        int v13 = v18;
      }
      while (!v20);
    }
  }
  uint64_t result = 0;
  if (v8) {
    uint64_t v21 = v4;
  }
  else {
    uint64_t v21 = 0;
  }
  *(void *)(a1 + 40) = v21;
  *(void *)(a1 + 48) = v8;
  return result;
}

float sub_1B0CDAD0C(uint64_t a1, int a2, uint64_t a3, _DWORD *a4, _DWORD *a5, double a6)
{
  v18[1] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *(void *)(a1 + 96);
  if (v9)
  {
    uint64_t v10 = v9 - 1;
    uint64_t v11 = *(unsigned int *)(a1 + 184);
    uint64_t v12 = v11 + v11 * (v10 / v11);
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v11 = *(unsigned int *)(a1 + 184);
  }
  *(void *)(a1 + 96) = v12;
  if (v12 + v11 <= a3
    && (!a2 && v12 == *(void *)(a1 + 104)
     || !(*(unsigned int (**)(void, void *, uint64_t, uint64_t))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v18, 8, v12)&& v18[0] == 0xD763A120F905D5D9)&& !(*(unsigned int (**)(void, char *, uint64_t, uint64_t))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), (char *)&v17 + 4, 4, v12 + 8))
  {
    *a4 = bswap32(HIDWORD(v17));
    if (!(*(unsigned int (**)(void, char *, uint64_t, uint64_t))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), (char *)&v17 + 4, 4, v12 + 12))
    {
      *(_DWORD *)(a1 + 56) = bswap32(HIDWORD(v17));
      if (!(*(unsigned int (**)(void, char *, uint64_t, uint64_t))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), (char *)&v17 + 4, 4, v12 + 16))
      {
        *a5 = bswap32(HIDWORD(v17));
        uint64_t v13 = *(void *)(a1 + 96);
        if (v13)
        {
          unsigned int v14 = *(_DWORD *)(a1 + 184);
LABEL_15:
          *(void *)(a1 + 96) = v13 + v14;
          return *(float *)&a6;
        }
        uint64_t v17 = 0;
        if (!sub_1B0D1801C(*(void *)(a1 + 80), v12 + 20, &v17)
          && !sub_1B0D1801C(*(void *)(a1 + 80), v12 + 24, (_DWORD *)&v17 + 1))
        {
          unsigned int v15 = HIDWORD(v17);
          if (!HIDWORD(v17))
          {
            unsigned int v15 = *(_DWORD *)(a1 + 200);
            HIDWORD(v17) = v15;
          }
          if (v15 - 512 <= 0xFE00)
          {
            unsigned int v14 = v17;
            if (v17 >= 0x20 && v17 <= 0x10000)
            {
              a6 = COERCE_DOUBLE(vceqz_s32((int32x2_t)vand_s8((int8x8_t)__PAIR64__(v15, v17), (int8x8_t)vadd_s32((int32x2_t)__PAIR64__(v15, v17), (int32x2_t)-1))));
              if (BYTE4(a6) & 1) != 0 && (LOBYTE(a6))
              {
                sub_1B0C7CE4C(a1, (char *)&v17 + 4, 0xFFFFFFFFLL);
                *(_DWORD *)(a1 + 184) = v14;
                uint64_t v13 = *(void *)(a1 + 96);
                goto LABEL_15;
              }
            }
          }
        }
      }
    }
  }
  return *(float *)&a6;
}

uint64_t sub_1B0CDAF40(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = **(void **)(a1 + 72);
  if (!v3 || *(unsigned __int8 *)(a1 + 21) - 4 > 0xFFFFFFFC) {
    return 0;
  }
  int64_t v10 = 0;
  uint64_t v5 = *(void *)(a1 + 200);
  uint64_t result = (*(uint64_t (**)(void))(v3 + 48))();
  int64_t v7 = (int)v5 * (unint64_t)a2;
  int64_t v9 = v7;
  if (result) {
    return result;
  }
  if (v10 == v7) {
    return 0;
  }
  if (v10 <= v7)
  {
    if (v10 + (int)v5 > v7) {
      goto LABEL_12;
    }
    uint64_t v8 = *(void **)(a1 + 328);
    bzero(v8, (int)v5);
    (*(void (**)(void, uint64_t, int64_t *))(**(void **)(a1 + 72) + 80))(*(void *)(a1 + 72), 5, &v9);
    uint64_t result = (*(uint64_t (**)(void, void *, void, int64_t))(**(void **)(a1 + 72) + 24))(*(void *)(a1 + 72), v8, (int)v5, v9 - (int)v5);
    if (!result) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 72) + 32))(*(void *)(a1 + 72));
    if (!result)
    {
LABEL_12:
      uint64_t result = 0;
      *(_DWORD *)(a1 + 40) = a2;
    }
  }
  return result;
}

uint64_t sub_1B0CDB048(uint64_t a1, void *a2, unsigned int *a3, int a4, int a5)
{
  if (a4) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = *(unsigned char *)(a1 + 26) == 0;
  }
  uint64_t v11 = *(unsigned __int8 **)(a1 + 328);
  uint64_t v12 = 80;
  if (!a4) {
    uint64_t v12 = 88;
  }
  uint64_t v13 = *(void *)(a1 + v12);
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t **, uint64_t, void))(*(void *)v13 + 16))(v13, &v52, 4, *a2);
  if (v14) {
    return v14;
  }
  unsigned int v16 = v52;
  uint64_t v15 = (*(uint64_t (**)(uint64_t, unsigned __int8 *, void, uint64_t))(*(void *)v13 + 16))(v13, v11, *(unsigned int *)(a1 + 200), *a2 + 4);
  if (v15) {
    return v15;
  }
  uint64_t v17 = bswap32(v16);
  uint64_t v18 = *(void *)(a1 + 200) + (4 * a4 + 4) + *a2;
  *a2 = v18;
  if (!v17 || v17 == *(_DWORD *)(a1 + 192)) {
    return 101;
  }
  if (v17 > *(_DWORD *)(a1 + 32)) {
    return 0;
  }
  if (a3)
  {
    unsigned int v20 = v17 - 1;
    if ((int)v17 - 1 < *a3)
    {
      uint64_t v21 = a3;
      while (1)
      {
        unsigned int v22 = v21[2];
        if (!v22) {
          break;
        }
        unsigned int v23 = v20 / v22;
        v20 %= v22;
        uint64_t v21 = *(unsigned int **)&v21[2 * v23 + 4];
        if (!v21) {
          goto LABEL_20;
        }
      }
      if (*v21 >= 0xF81)
      {
        unsigned int v28 = v20 % 0x7C;
        uint64_t v29 = v21 + 4;
        int v30 = v29[v20 % 0x7C];
        if (v30)
        {
          unsigned int v31 = v20 + 1;
          while (v30 != v31)
          {
            if (v28 == 123) {
              unsigned int v28 = 0;
            }
            else {
              ++v28;
            }
            int v30 = v29[v28];
            if (!v30) {
              goto LABEL_20;
            }
          }
          return 0;
        }
      }
      else if ((*((unsigned __int8 *)v21 + ((unint64_t)v20 >> 3) + 16) >> (v20 & 7)))
      {
        return 0;
      }
    }
  }
LABEL_20:
  int v51 = 0;
  if (a4)
  {
    uint64_t v15 = sub_1B0D1801C(v13, v18 - 4, &v51);
    if (v15) {
      return v15;
    }
    if (!a5)
    {
      int v24 = *(_DWORD *)(a1 + 56);
      unint64_t v25 = (*(_DWORD *)(a1 + 200) - 200);
      if ((int)v25 < 1) {
        goto LABEL_43;
      }
      unint64_t v26 = v25 - 200;
      if (v25 < 0xC8) {
        unint64_t v26 = 0;
      }
      if (v25 >= 0xC9)
      {
        int v32 = 0;
        uint64_t v33 = (((v26 + 199) * (unsigned __int128)0x147AE147AE147AFuLL) >> 64) + 1;
        unint64_t v27 = v25 - 200 * (v33 & 0x7FFFFFE);
        int v34 = &v11[v25];
        uint64_t v35 = v33 & 0x7FFFFFE;
        do
        {
          v24 += *v34;
          v32 += *(v34 - 200);
          v34 -= 400;
          v35 -= 2;
        }
        while (v35);
        v24 += v32;
        if (v33 == (v33 & 0x7FFFFFE))
        {
LABEL_43:
          if (v24 != v51) {
            return 101;
          }
          goto LABEL_44;
        }
      }
      else
      {
        unint64_t v27 = (*(_DWORD *)(a1 + 200) - 200);
      }
      do
      {
        v24 += v11[v27];
        BOOL v36 = v27 > 0xC8;
        v27 -= 200;
      }
      while (v36);
      goto LABEL_43;
    }
  }
LABEL_44:
  if (a3)
  {
    uint64_t v15 = sub_1B0CCABC4(a3, v17);
    if (v15) {
      return v15;
    }
  }
  if (v17 == 1)
  {
    int v37 = v11[20];
    if (*(__int16 *)(a1 + 178) != v37)
    {
      *(_WORD *)(a1 + 178) = v37;
      uint64_t v38 = *(void (**)(void, void))(a1 + 304);
      if (v38) {
        v38(*(void *)(a1 + 320), *(unsigned int *)(a1 + 200));
      }
    }
  }
  if (*(void *)(a1 + 344))
  {
    uint64_t v39 = 0;
    uint64_t v52 = 0;
    if (!a4) {
      goto LABEL_55;
    }
  }
  else
  {
    uint64_t v39 = sub_1B0D1168C(a1, v17);
    uint64_t v52 = v39;
    if (!a4)
    {
      if (!v39) {
        goto LABEL_55;
      }
      BOOL v40 = (*((_WORD *)v39 + 26) & 8) == 0;
      goto LABEL_59;
    }
  }
  if (*(unsigned char *)(a1 + 11))
  {
LABEL_55:
    BOOL v40 = 1;
    goto LABEL_59;
  }
  BOOL v40 = *a2 <= *(void *)(a1 + 104);
LABEL_59:
  int v41 = *(uint64_t **)(a1 + 72);
  uint64_t v42 = *v41;
  if (!*v41) {
    goto LABEL_62;
  }
  if (*(unsigned __int8 *)(a1 + 21) <= 3u)
  {
    if (*(unsigned char *)(a1 + 21)) {
      LOBYTE(v40) = 0;
    }
    if (v40) {
      goto LABEL_69;
    }
LABEL_62:
    uint64_t v15 = 0;
    if (!a4 && !v39)
    {
      *(unsigned char *)(a1 + 25) |= 2u;
      uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t **, uint64_t))(a1 + 288))(a1, v17, &v52, 1);
      *(unsigned char *)(a1 + 25) &= ~2u;
      if (v15) {
        return v15;
      }
      sub_1B0D13794((uint64_t)v52);
    }
    goto LABEL_92;
  }
  if (!v40) {
    goto LABEL_62;
  }
LABEL_69:
  uint64_t v43 = *(void *)(a1 + 200);
  uint64_t v44 = v43 * (v17 - 1);
  if (v10)
  {
    uint64_t v15 = (*(uint64_t (**)(void, unsigned __int8 *))(v42 + 24))(*(void *)(a1 + 72), v11);
  }
  else
  {
    uint64_t v45 = *(uint64_t (**)(void, unsigned __int8 *, uint64_t, uint64_t))(a1 + 296);
    if (v45)
    {
      uint64_t v11 = (unsigned __int8 *)v45(*(void *)(a1 + 320), v11, v17, 7);
      int v41 = *(uint64_t **)(a1 + 72);
      uint64_t v43 = *(void *)(a1 + 200);
      uint64_t v42 = *v41;
    }
    uint64_t v15 = (*(uint64_t (**)(uint64_t *, unsigned __int8 *, uint64_t, uint64_t))(v42 + 24))(v41, v11, v43, v44);
    uint64_t v46 = *(uint64_t (**)(void, unsigned __int8 *, uint64_t, uint64_t))(a1 + 296);
    if (v46)
    {
      if (v46(*(void *)(a1 + 320), v11, v17, 3)) {
        uint64_t v15 = v15;
      }
      else {
        uint64_t v15 = 7;
      }
    }
  }
  if (v17 > *(_DWORD *)(a1 + 40)) {
    *(_DWORD *)(a1 + 40) = v17;
  }
  if (*(void *)(a1 + 112))
  {
    if (v10)
    {
      int v47 = *(uint64_t (**)(void, unsigned __int8 *, uint64_t, uint64_t))(a1 + 296);
      if (!v47
        || (v47(*(void *)(a1 + 320), v11, v17, 3) ? (uint64_t v15 = v15) : (uint64_t v15 = 7), *(void *)(a1 + 112)))
      {
        sub_1B0D10D8C();
      }
      uint64_t v48 = *(uint64_t (**)(void, unsigned __int8 *, uint64_t, uint64_t))(a1 + 296);
      if (v48)
      {
        uint64_t v11 = (unsigned __int8 *)v48(*(void *)(a1 + 320), v11, v17, 7);
        if (v11) {
          uint64_t v15 = v15;
        }
        else {
          uint64_t v15 = 7;
        }
      }
    }
    else
    {
      sub_1B0D10D8C();
    }
  }
LABEL_92:
  if (v52)
  {
    uint64_t v49 = v52[1];
    memcpy((void *)v49, v11, *(void *)(a1 + 200));
    (*(void (**)(uint64_t *))(a1 + 280))(v52);
    if (v17 == 1) {
      *(_OWORD *)(a1 + 136) = *(_OWORD *)(v49 + 24);
    }
    if (v10)
    {
      int v50 = *(uint64_t (**)(void, uint64_t, void, uint64_t))(a1 + 296);
      if (v50)
      {
        if (v50(*(void *)(a1 + 320), v49, *((unsigned int *)v52 + 12), 3)) {
          uint64_t v15 = v15;
        }
        else {
          uint64_t v15 = 7;
        }
      }
    }
    sub_1B0D0E3E8((uint64_t)v52);
  }
  return v15;
}

unsigned char *sub_1B0CDB59C(uint64_t a1)
{
  uint64_t result = *(unsigned char **)(a1 + 16);
  if (*result)
  {
    *uint64_t result = 0;
    if (*(int *)(a1 + 56) >= 2) {
      return (unsigned char *)sub_1B0CAD004((uint64_t)result);
    }
  }
  return result;
}

void *sub_1B0CDB5C4(void *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *a1;
  if (*(unsigned char *)(*a1 + 103)) {
    goto LABEL_2;
  }
  if (!*(unsigned char *)(v9 + 197))
  {
    int v20 = *(_DWORD *)(v9 + 44);
    uint64_t v21 = *(void *)(*(void *)(v9 + 32) + 24);
    *(unsigned char *)(v9 + 100) = *(unsigned char *)(v21 + 113);
    if ((*(unsigned char *)(v21 + 114) & 1) != 0 || (int v22 = sub_1B0C879A0(v9, 0, (char **)a1 + 1, 0, a5, a6, a7, a8)) == 0)
    {
      uint64_t v23 = *(unsigned int *)(v9 + 40);
      if ((int)v23 < 2)
      {
LABEL_15:
        if ((v20 & 1) == 0) {
          *(_DWORD *)(v9 + 44) &= ~1u;
        }
        if (*(unsigned char *)(v9 + 111)) {
          *(_DWORD *)(v9 + 44) |= 0x10u;
        }
        goto LABEL_6;
      }
      while (1)
      {
        uint64_t v24 = v23 - 1;
        if ((*(_WORD *)(*(void *)(*(void *)(v9 + 32) + 32 * (v23 - 1) + 24) + 114) & 1) == 0)
        {
          int v22 = sub_1B0C879A0(v9, (v23 - 1), (char **)a1 + 1, 0, a5, a6, a7, a8);
          if (v22) {
            break;
          }
        }
        uint64_t v23 = v24;
        if ((unint64_t)(v24 + 1) <= 2) {
          goto LABEL_15;
        }
      }
    }
    *((_DWORD *)a1 + 6) = v22;
    ++*((_DWORD *)a1 + 12);
    goto LABEL_2;
  }
LABEL_6:
  if (a4) {
    ++*(unsigned char *)(v9 + 107);
  }
  uint64_t v14 = *(void *)(a2 + 8);
  if (v14)
  {
    uint64_t v15 = *(void *)(*a1 + 32);
    unsigned int v16 = (uint64_t *)(v15 + 24);
    uint64_t v17 = 0xFFFFFFFF00000000;
    do
    {
      uint64_t v18 = *v16;
      v16 += 4;
      v17 += 0x100000000;
    }
    while (v18 != v14);
    uint64_t v19 = (unsigned char **)(v15 + (v17 >> 27));
  }
  else
  {
    uint64_t v19 = (unsigned char **)(a2 + 16);
  }
  uint64_t v25 = sub_1B0CB02B4((uint64_t)a1, a3, *(char **)(a2 + 24), *v19, a5, a6, a7, a8);
  uint64_t v33 = v25;
  if (a4)
  {
    --*(unsigned char *)(v9 + 107);
    if (!v25)
    {
      uint64_t v34 = *a1;
      int v35 = *(_DWORD *)(*a1 + 40);
      if (v35 >= 1)
      {
        uint64_t v36 = 0;
        int v37 = *(unsigned char **)(a2 + 16);
        do
        {
          uint64_t v40 = *(void *)(v34 + 32) + 32 * v36;
          if (*(void *)(v40 + 8))
          {
            if (v37)
            {
              int v41 = *(unsigned __int8 **)v40;
              for (uint64_t i = v37; ; ++i)
              {
                uint64_t v43 = *i;
                uint64_t v44 = *v41;
                if (v43 == v44)
                {
                  if (!*i) {
                    break;
                  }
                }
                else if (byte_1B0DE1758[v43] != byte_1B0DE1758[v44])
                {
                  goto LABEL_32;
                }
                ++v41;
              }
            }
            if (a1[21]) {
              uint64_t v38 = a1[21];
            }
            else {
              uint64_t v38 = (uint64_t)a1;
            }
            int v39 = *(_DWORD *)(v38 + 124);
            if ((v39 & (1 << v36)) == 0)
            {
              *(_DWORD *)(v38 + 124) = v39 | (1 << v36);
              if (v36 == 1)
              {
                sub_1B0D0E7A4(v38);
                int v35 = *(_DWORD *)(v34 + 40);
              }
            }
          }
LABEL_32:
          ++v36;
        }
        while (v36 < v35);
      }
      sub_1B0D358A0(a1, v26, v27, v28, v29, v30, v31, v32);
      goto LABEL_2;
    }
  }
  else if (!v25)
  {
    goto LABEL_2;
  }
  uint64_t v45 = *(void *)(v25 + 96);
  if (v45)
  {
    uint64_t v46 = (uint64_t *)(*(void *)(v9 + 32) + 24);
    LODWORD(v47) = -1;
    do
    {
      uint64_t v48 = *v46;
      v46 += 4;
      uint64_t v47 = (v47 + 1);
    }
    while (v48 != v45);
  }
  else
  {
    uint64_t v47 = 4294934528;
  }
  if (*(unsigned char *)(v25 + 63) == 1 && sub_1B0D393F0((uint64_t)a1, v25, v27, v28, v29, v30, v31, v32)) {
    goto LABEL_2;
  }
  if (v47 == 1) {
    uint64_t v49 = "sqlite_temp_master";
  }
  else {
    uint64_t v49 = "sqlite_master";
  }
  uint64_t v50 = *(void *)(*(void *)(v9 + 32) + 32 * (int)v47);
  uint64_t v51 = *a1;
  uint64_t v52 = *(uint64_t (**)(void, uint64_t, const char *, void, void, void))(*a1 + 528);
  if (v52 && !*(unsigned char *)(v51 + 197) && !*((unsigned char *)a1 + 302))
  {
    int v67 = v52(*(void *)(v51 + 536), 9, v49, 0, *(void *)(*(void *)(v9 + 32) + 32 * (int)v47), a1[46]);
    if (v67 == 1) {
      goto LABEL_101;
    }
    if ((v67 & 0xFFFFFFFD) != 0) {
      goto LABEL_105;
    }
    if (v67) {
      goto LABEL_2;
    }
  }
  if (a3)
  {
    uint64_t v53 = 0;
    BOOL v54 = v47 == 1;
    unsigned int v55 = 17;
    unsigned int v56 = 15;
    goto LABEL_65;
  }
  if (*(unsigned char *)(v33 + 63) != 1)
  {
    uint64_t v53 = 0;
    BOOL v54 = v47 == 1;
    unsigned int v55 = 11;
    unsigned int v56 = 13;
LABEL_65:
    if (v54) {
      uint64_t v61 = v56;
    }
    else {
      uint64_t v61 = v55;
    }
    goto LABEL_68;
  }
  uint64_t v57 = (uint64_t **)(v33 + 80);
  do
  {
    uint64_t v58 = *v57;
    int v59 = *v57;
    uint64_t v60 = *v59;
    uint64_t v57 = (uint64_t **)(v59 + 5);
  }
  while (v60 != v9);
  uint64_t v53 = *(void *)(v58[1] + 8);
  uint64_t v61 = 30;
LABEL_68:
  uint64_t v62 = *(unsigned __int8 **)v33;
  uint64_t v63 = *a1;
  uint64_t v64 = *(uint64_t (**)(void, uint64_t, unsigned __int8 *, uint64_t, uint64_t, void))(*a1 + 528);
  if (!v64) {
    goto LABEL_73;
  }
  if (!*(unsigned char *)(v63 + 197) && !*((unsigned char *)a1 + 302))
  {
    int v69 = v64(*(void *)(v63 + 536), v61, v62, v53, v50, a1[46]);
    if (v69 != 1)
    {
      if ((v69 & 0xFFFFFFFD) != 0) {
        goto LABEL_105;
      }
      if (v69) {
        goto LABEL_2;
      }
      uint64_t v62 = *(unsigned __int8 **)v33;
      uint64_t v63 = *a1;
      uint64_t v64 = *(uint64_t (**)(void, uint64_t, unsigned __int8 *, uint64_t, uint64_t, void))(*a1 + 528);
      if (!v64) {
        goto LABEL_73;
      }
      goto LABEL_71;
    }
LABEL_101:
    int v71 = 23;
    uint64_t v72 = "not authorized";
LABEL_106:
    sub_1B0CEF2BC((uint64_t)a1, v72, v68, v53, v29, v30, v31, v32, v94);
    *((_DWORD *)a1 + 6) = v71;
    goto LABEL_2;
  }
LABEL_71:
  if (*(unsigned char *)(v63 + 197) || *((unsigned char *)a1 + 302)) {
    goto LABEL_73;
  }
  int v70 = v64(*(void *)(v63 + 536), 9, v62, 0, v50, a1[46]);
  if (v70 == 1) {
    goto LABEL_101;
  }
  if ((v70 & 0xFFFFFFFD) != 0)
  {
LABEL_105:
    int v71 = 1;
    uint64_t v72 = "authorizer malfunction";
    goto LABEL_106;
  }
  if (v70) {
    goto LABEL_2;
  }
  uint64_t v62 = *(unsigned __int8 **)v33;
LABEL_73:
  if (!v62) {
    goto LABEL_128;
  }
  unint64_t v65 = *v62;
  if (!*v62)
  {
    uint64_t v66 = "sqlite_";
    goto LABEL_118;
  }
  if ((v65 & 0xFFFFFFDF) != 0x53)
  {
    v65 += (unint64_t)byte_1B0DE1758;
    uint64_t v66 = "sqlite_";
LABEL_117:
    LODWORD(v65) = *(unsigned __int8 *)v65;
    goto LABEL_118;
  }
  unint64_t v65 = v62[1];
  if (!v62[1])
  {
    uint64_t v66 = "qlite_";
    goto LABEL_118;
  }
  if ((v65 & 0xFFFFFFDF) != 0x51)
  {
    v65 += (unint64_t)byte_1B0DE1758;
    uint64_t v66 = "qlite_";
    goto LABEL_117;
  }
  unint64_t v65 = v62[2];
  if (!v62[2])
  {
    uint64_t v66 = "lite_";
    goto LABEL_118;
  }
  if ((v65 & 0xFFFFFFDF) != 0x4C)
  {
    v65 += (unint64_t)byte_1B0DE1758;
    uint64_t v66 = "lite_";
    goto LABEL_117;
  }
  unint64_t v65 = v62[3];
  if (!v62[3])
  {
    uint64_t v66 = "ite_";
    goto LABEL_118;
  }
  if ((v65 & 0xFFFFFFDF) != 0x49)
  {
    v65 += (unint64_t)byte_1B0DE1758;
    uint64_t v66 = "ite_";
    goto LABEL_117;
  }
  unint64_t v65 = v62[4];
  if (!v62[4])
  {
    uint64_t v66 = "te_";
    goto LABEL_118;
  }
  if ((v65 & 0xFFFFFFDF) != 0x54)
  {
    v65 += (unint64_t)byte_1B0DE1758;
    uint64_t v66 = "te_";
    goto LABEL_117;
  }
  unint64_t v65 = v62[5];
  if (!v62[5])
  {
    uint64_t v66 = "e_";
    goto LABEL_118;
  }
  if ((v65 & 0xFFFFFFDF) != 0x45)
  {
    v65 += (unint64_t)byte_1B0DE1758;
    uint64_t v66 = "e_";
    goto LABEL_117;
  }
  unint64_t v65 = v62[6];
  if (v62[6])
  {
    if (v65 == 95) {
      goto LABEL_119;
    }
    v65 += (unint64_t)byte_1B0DE1758;
    uint64_t v66 = "_";
    goto LABEL_117;
  }
  uint64_t v66 = "_";
LABEL_118:
  if (v65 != byte_1B0DE1758[*v66])
  {
LABEL_128:
    int v81 = *(_DWORD *)(v33 + 48);
    if ((v81 & 0x1000) != 0 && (*(unsigned char *)(v9 + 51) & 0x10) != 0 && !*(void *)(v9 + 592) && !*(_DWORD *)(v9 + 220))
    {
      if (*(int *)(v9 + 564) >= 1 && (v81 & 0x8000) == 0 && !*(void *)(v9 + 600)) {
        goto LABEL_187;
      }
      goto LABEL_190;
    }
    if ((v81 & 0x8000) != 0) {
      goto LABEL_190;
    }
    goto LABEL_187;
  }
LABEL_119:
  uint64_t v73 = v62[7];
  if (!v62[7])
  {
    LODWORD(v74) = 0;
    uint64_t v82 = "parameters";
    goto LABEL_186;
  }
  unint64_t v74 = (unint64_t)&byte_1B0DE1758[v73];
  int v75 = v73 & 0xFFFFFFDF;
  if (v75 != 83)
  {
    uint64_t v80 = "stat";
    int v79 = (unsigned __int8 *)v74;
LABEL_144:
    int v83 = *v79;
    goto LABEL_145;
  }
  uint64_t v76 = v62[8];
  if (!v62[8])
  {
    int v83 = 0;
    uint64_t v80 = "tat";
    goto LABEL_145;
  }
  if ((v76 & 0xFFFFFFDF) != 0x54)
  {
    int v79 = &byte_1B0DE1758[v76];
    uint64_t v80 = "tat";
    goto LABEL_144;
  }
  uint64_t v77 = v62[9];
  if (!v62[9])
  {
    int v83 = 0;
    uint64_t v80 = "at";
    goto LABEL_145;
  }
  if ((v77 & 0xFFFFFFDF) != 0x41)
  {
    int v79 = &byte_1B0DE1758[v77];
    uint64_t v80 = "at";
    goto LABEL_144;
  }
  uint64_t v78 = v62[10];
  if (v62[10])
  {
    if ((v78 & 0xFFFFFFDF) == 0x54) {
      goto LABEL_187;
    }
    int v79 = &byte_1B0DE1758[v78];
    uint64_t v80 = "t";
    goto LABEL_144;
  }
  int v83 = 0;
  uint64_t v80 = "t";
LABEL_145:
  if (v83 != byte_1B0DE1758[*v80])
  {
    if (v75 != 80)
    {
      uint64_t v82 = "parameters";
      goto LABEL_185;
    }
    unint64_t v74 = v62[8];
    if (!v62[8])
    {
      uint64_t v82 = "arameters";
      goto LABEL_186;
    }
    if ((v74 & 0xFFFFFFDF) != 0x41)
    {
      v74 += (unint64_t)byte_1B0DE1758;
      uint64_t v82 = "arameters";
      goto LABEL_185;
    }
    unint64_t v74 = v62[9];
    if (!v62[9])
    {
      uint64_t v82 = "rameters";
      goto LABEL_186;
    }
    if ((v74 & 0xFFFFFFDF) != 0x52)
    {
      v74 += (unint64_t)byte_1B0DE1758;
      uint64_t v82 = "rameters";
      goto LABEL_185;
    }
    unint64_t v74 = v62[10];
    if (!v62[10])
    {
      uint64_t v82 = "ameters";
      goto LABEL_186;
    }
    if ((v74 & 0xFFFFFFDF) != 0x41)
    {
      v74 += (unint64_t)byte_1B0DE1758;
      uint64_t v82 = "ameters";
      goto LABEL_185;
    }
    unint64_t v74 = v62[11];
    if (!v62[11])
    {
      uint64_t v82 = "meters";
      goto LABEL_186;
    }
    if ((v74 & 0xFFFFFFDF) != 0x4D)
    {
      v74 += (unint64_t)byte_1B0DE1758;
      uint64_t v82 = "meters";
      goto LABEL_185;
    }
    unint64_t v74 = v62[12];
    if (!v62[12])
    {
      uint64_t v82 = "eters";
      goto LABEL_186;
    }
    if ((v74 & 0xFFFFFFDF) != 0x45)
    {
      v74 += (unint64_t)byte_1B0DE1758;
      uint64_t v82 = "eters";
      goto LABEL_185;
    }
    unint64_t v74 = v62[13];
    if (!v62[13])
    {
      uint64_t v82 = "ters";
      goto LABEL_186;
    }
    if ((v74 & 0xFFFFFFDF) != 0x54)
    {
      v74 += (unint64_t)byte_1B0DE1758;
      uint64_t v82 = "ters";
      goto LABEL_185;
    }
    unint64_t v74 = v62[14];
    if (!v62[14])
    {
      uint64_t v82 = "ers";
      goto LABEL_186;
    }
    if ((v74 & 0xFFFFFFDF) != 0x45)
    {
      v74 += (unint64_t)byte_1B0DE1758;
      uint64_t v82 = "ers";
      goto LABEL_185;
    }
    unint64_t v74 = v62[15];
    if (!v62[15])
    {
      uint64_t v82 = "rs";
      goto LABEL_186;
    }
    if ((v74 & 0xFFFFFFDF) != 0x52)
    {
      v74 += (unint64_t)byte_1B0DE1758;
      uint64_t v82 = "rs";
      goto LABEL_185;
    }
    unint64_t v74 = v62[16];
    if (!v62[16])
    {
      uint64_t v82 = "s";
LABEL_186:
      if (v74 == byte_1B0DE1758[*v82]) {
        goto LABEL_187;
      }
LABEL_190:
      sub_1B0CEF2BC((uint64_t)a1, "table %s may not be dropped", (uint64_t)v62, v53, v29, v30, v31, v32, (char)v62);
      goto LABEL_2;
    }
    if ((v74 & 0xFFFFFFDF) != 0x53)
    {
      v74 += (unint64_t)byte_1B0DE1758;
      uint64_t v82 = "s";
LABEL_185:
      LODWORD(v74) = *(unsigned __int8 *)v74;
      goto LABEL_186;
    }
  }
LABEL_187:
  int v84 = *(unsigned __int8 *)(v33 + 63);
  if (a3)
  {
    if (v84 != 2)
    {
      sub_1B0CEF2BC((uint64_t)a1, "use DROP TABLE to delete table %s", (uint64_t)v62, v53, v29, v30, v31, v32, (char)v62);
      goto LABEL_2;
    }
  }
  else if (v84 == 2)
  {
    sub_1B0CEF2BC((uint64_t)a1, "use DROP VIEW to delete view %s", (uint64_t)v62, v53, v29, v30, v31, v32, (char)v62);
    goto LABEL_2;
  }
  if (sub_1B0CCB8D4(a1, v61, (uint64_t)v62, v53, v29, v30, v31, v32))
  {
    sub_1B0D3597C((uint64_t)a1, 1, v47);
    if (!a3)
    {
      sub_1B0D3C0E4(a1, v47);
      sub_1B0D3C290((uint64_t)a1, (int *)a2, v33, v89, v90, v91, v92, v93);
    }
    sub_1B0D3C5F4(a1, v33, v47, a3, v85, v86, v87, v88);
  }
LABEL_2:

  return sub_1B0CA115C((void *)v9, (void *)a2);
}

uint64_t sub_1B0CDBF48(uint64_t a1, unsigned int a2, void *a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(unsigned char *)(a1 + 17))
  {
    ++*(_DWORD *)(a1 + 20);
    if (!*(unsigned char *)(a1 + 18))
    {
      sub_1B0D12478(a1);
      int64_t v7 = *(unsigned __int8 **)(v6 + 16);
      if (v7) {
        goto LABEL_4;
      }
LABEL_13:
      if (*(unsigned char *)(a1 + 19))
      {
        *(unsigned char *)(a1 + 19) = 0;
        for (uint64_t i = *(void *)(*(void *)(a1 + 8) + 16); i; uint64_t i = *(void *)(i + 40))
        {
          if ((*(unsigned char *)(i + 1) & 0x10) != 0)
          {
            *(unsigned char *)(a1 + 19) = 1;
            if (*(_DWORD *)(i + 80) == a2) {
              *(unsigned char *)uint64_t i = 1;
            }
          }
        }
      }
      uint64_t v9 = sub_1B0CDC078(v6, a2, 0, a3);
      goto LABEL_21;
    }
  }
  int64_t v7 = *(unsigned __int8 **)(v6 + 16);
  if (!v7) {
    goto LABEL_13;
  }
LABEL_4:
  uint64_t v8 = v7;
  while (a2)
  {
    if (*((_DWORD *)v8 + 20) == a2)
    {
      int64_t v7 = v8;
      break;
    }
    uint64_t v8 = (unsigned __int8 *)*((void *)v8 + 5);
    if (!v8) {
      goto LABEL_13;
    }
  }
  uint64_t v9 = sub_1B0D143DC(v7, a2, 0);
  if (!v9) {
    goto LABEL_13;
  }
LABEL_21:
  if (*(unsigned char *)(a1 + 17))
  {
    int v11 = *(_DWORD *)(a1 + 20) - 1;
    *(_DWORD *)(a1 + 20) = v11;
    if (!v11) {
      sub_1B0D12558(a1);
    }
  }
  return v9;
}

uint64_t sub_1B0CDC078(uint64_t a1, unsigned int a2, int a3, void *a4)
{
  if (*(_DWORD *)(a1 + 64) >= a2)
  {
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    v20[0] = 0;
    v20[1] = 0;
    uint64_t v9 = sub_1B0D1DE18((_DWORD *)a1, a2, &v22);
    if (v9) {
      return v9;
    }
    uint64_t v10 = v22;
    if ((*(unsigned char *)(a1 + 32) & 4) == 0)
    {
      int v11 = a2 == 1 ? 2 : 1;
      if (v11 != *(_DWORD *)(*(void *)(v22 + 112) + 56))
      {
        uint64_t v17 = sub_1B0D1045C(86916);
LABEL_25:
        uint64_t v9 = v17;
        goto LABEL_26;
      }
    }
    uint64_t v12 = *(unsigned __int8 *)(v22 + 9);
    LODWORD(v13) = *(unsigned __int16 *)(v22 + 24);
    if (*(_WORD *)(v22 + 24))
    {
      uint64_t v14 = 0;
      unint64_t v15 = 0;
      do
      {
        unsigned int v16 = (unsigned int *)(*(void *)(v10 + 80)
                             + ((*(unsigned __int8 *)(*(void *)(v10 + 96) + v14 + 1) | (*(unsigned __int8 *)(*(void *)(v10 + 96) + v14) << 8)) & (unint64_t)*(unsigned __int16 *)(v10 + 26)));
        if (!*(unsigned char *)(v10 + 8))
        {
          uint64_t v17 = sub_1B0CDC078(a1, bswap32(*v16), 1, a4);
          if (v17) {
            goto LABEL_25;
          }
        }
        (*(void (**)(uint64_t, unsigned int *, void *))(v10 + 128))(v10, v16, v20);
        if (v21 != WORD2(v21))
        {
          uint64_t v17 = sub_1B0D1E344(v10, (uint64_t)v16, (uint64_t)v20);
          if (v17) {
            goto LABEL_25;
          }
        }
        ++v15;
        unint64_t v13 = *(unsigned __int16 *)(v10 + 24);
        v14 += 2;
      }
      while (v15 < v13);
    }
    if (*(unsigned char *)(v10 + 8))
    {
      if (!a4)
      {
LABEL_22:
        if (!a3)
        {
          uint64_t v9 = sub_1B0CBD790(*(void *)(v10 + 112));
          if (!v9) {
            sub_1B0CC63D4(v10, *(unsigned __int8 *)(*(void *)(v10 + 80) + v12) | 8);
          }
          goto LABEL_26;
        }
        uint64_t v17 = sub_1B0CD3AB8(*(void *)(v10 + 72), v10, *(unsigned int *)(v10 + 4));
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v9 = sub_1B0CDC078(a1, bswap32(*(_DWORD *)(v12 + *(void *)(v10 + 80) + 8)), 1, a4);
      if (v9)
      {
LABEL_26:
        uint64_t v18 = *(void *)(v10 + 112);
        if ((*(_WORD *)(v18 + 52) & 0x20) != 0)
        {
          uint64_t v19 = *(void *)(v18 + 40);
          --*(_DWORD *)(v19 + 152);
          *(void *)(v18 + 32) = *(void *)(v19 + 168);
          *(void *)(v19 + 168) = v18;
          (*(void (**)(void, void, void))(**(void **)(v19 + 72) + 144))(*(void *)(v19 + 72), *(void *)(v19 + 200) * (*(_DWORD *)(v18 + 48) - 1), *(void *)(v18 + 8));
        }
        else
        {
          sub_1B0D0E3E8(v18);
        }
        return v9;
      }
      if (!a4 || *(unsigned char *)(v10 + 1)) {
        goto LABEL_22;
      }
      LODWORD(v13) = *(unsigned __int16 *)(v10 + 24);
    }
    *a4 += v13;
    goto LABEL_22;
  }

  return sub_1B0D1045C(86909);
}

uint64_t _sqlite3_apple_archive_type(const char *a1, int *a2, char **a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  *a2 = -1;
  int v6 = open(a1, 0, 0);
  if ((v6 & 0x80000000) == 0)
  {
    int v7 = v6;
    ssize_t v8 = pread(v6, __buf, 0x16uLL, 0);
    if (v8 == 22)
    {
      if (*(_DWORD *)__buf != 1766609235 || *(_DWORD *)&__buf[3] != 543519849) {
        goto LABEL_7;
      }
      if (*(void *)__buf == 0x66206574694C5153 && *(void *)&__buf[7] == 0x332074616D726F66)
      {
        uint64_t v10 = 0;
        int v11 = 3;
        goto LABEL_8;
      }
      BOOL v17 = *(void *)__buf == 0x41206574694C5153 && *(void *)&__buf[8] == 0x415F455649484352;
      if (!v17 || *(void *)&__buf[14] != 0x315F454C5050415FLL)
      {
LABEL_7:
        uint64_t v10 = 0;
        int v11 = 1;
LABEL_8:
        *a2 = v11;
LABEL_30:
        close(v7);
        return v10;
      }
      memset(v21, 0, sizeof(v21));
      if (!sub_1B0CDC54C(v7, (uint64_t)v21))
      {
        if (*((void *)&v21[0] + 1) == 2)
        {
          uint64_t v10 = 0;
          int v11 = 5;
        }
        else
        {
          if (*((void *)&v21[0] + 1) != 1)
          {
            uint64_t v10 = 0;
            *a2 = 0;
            goto LABEL_30;
          }
          uint64_t v10 = 0;
          int v11 = 4;
        }
        goto LABEL_8;
      }
      if (a3)
      {
        uint64_t v19 = __error();
        uint64_t v10 = *v19;
        *a3 = sqlite3_mprintf("sql_read_archive_header('%s') failed with errno %d", a1, *v19);
        goto LABEL_30;
      }
    }
    else if (a3)
    {
      ssize_t v13 = v8;
      uint64_t v14 = __error();
      uint64_t v15 = *v14;
      *a3 = sqlite3_mprintf("pread('%s') failed returning %ld bytes with errno %d", a1, v13, *v14);
      uint64_t v10 = v15;
      goto LABEL_30;
    }
    uint64_t v10 = 0xFFFFFFFFLL;
    goto LABEL_30;
  }
  if (!a3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v12 = __error();
  uint64_t v10 = *v12;
  *a3 = sqlite3_mprintf("open('%s') failed with errno %d", a1, *v12);
  return v10;
}

uint64_t sub_1B0CDC54C(int a1, uint64_t a2)
{
  uint64_t v4 = (char *)malloc_type_calloc(1uLL, 0x400uLL, 0x42524E37uLL);
  if (read(a1, v4, 0x16uLL) != 22 || strncmp("SQLite ARCHIVE_APPLE_1", v4, 0x16uLL)) {
    return 0xFFFFFFFFLL;
  }
  char v9 = 0;
  if (read(a1, &v9, 1uLL) >= 1)
  {
    int v6 = v4 + 22;
    do
    {
      if (v9 == 10) {
        break;
      }
      *v6++ = v9;
    }
    while (read(a1, &v9, 1uLL) > 0);
  }
  ssize_t v8 = 0;
  int v7 = strchr(v4, 44);
  *(_DWORD *)a2 = strtol(v7 + 1, &v8, 0);
  *(_DWORD *)(a2 + 4) = strtol(v8 + 1, &v8, 0);
  *(void *)(a2 + 8) = strtoll(v8 + 1, &v8, 0);
  *(void *)(a2 + 16) = strtoll(v8 + 1, &v8, 0);
  *(void *)(a2 + 24) = strtoll(v8 + 1, &v8, 0);
  *(void *)(a2 + 32) = strtoll(v8 + 1, &v8, 0);
  *(void *)(a2 + 40) = strtoll(v8 + 1, &v8, 0);
  free(v4);
  return 0;
}

uint64_t _sqlite3_apple_archive(const char *a1, char *a2, int a3, uint64_t a4, unsigned int a5, uint64_t a6, void *a7, char **a8)
{
  uint64_t v200 = *MEMORY[0x1E4F143B8];
  if (qword_1E9B52048 != -1) {
    dispatch_once(&qword_1E9B52048, &unk_1F09A4DE8);
  }
  int v171 = -1;
  uint64_t v15 = _sqlite3_apple_archive_type(a1, &v171, a8);
  if (!v15)
  {
    if (v171 == 3)
    {
      if (a4 <= 1) {
        int v17 = 1;
      }
      else {
        int v17 = a4;
      }
      if (a4 != 3)
      {
        __s1 = a2;
        if (a5) {
          uint64_t v18 = a5;
        }
        else {
          uint64_t v18 = 2049;
        }
LABEL_18:
        int v20 = (const char **)malloc_type_calloc(1uLL, 0x20uLL, 0x10040436913F5uLL);
        if (v17 == 3)
        {
          uint64_t v15 = sub_1B0CDE0B0(a1, __s1, a3);
          *int v20 = strdup(__s1);
          memset(&v170, 0, sizeof(v170));
          uint64_t v23 = sqlite3_mprintf("%s-wal", __s1);
          if (stat(v23, &v170) || v170.st_size < 1)
          {
            free(v23);
            int v24 = 1;
          }
          else
          {
            *int v20 = v23;
            int v24 = 2;
          }
          memset(&v170, 0, sizeof(v170));
          uint64_t v27 = sqlite3_mprintf("%s-journal", __s1);
          if (stat(v27, &v170) || v170.st_size < 1)
          {
            free(v27);
            if (!v15) {
              goto LABEL_256;
            }
          }
          else
          {
            ++v24;
            *int v20 = v27;
            if (!v15) {
              goto LABEL_256;
            }
          }
          goto LABEL_265;
        }
        if (v17 != 2)
        {
          if (v17 != 1)
          {
            if (a8) {
              *a8 = sqlite3_mprintf("Unknown operation type %ld", a4);
            }
            uint64_t v15 = 0xFFFFFFFFLL;
            goto LABEL_268;
          }
          memset(&errmsg, 0, sizeof(errmsg));
          uint64_t v21 = sub_1B0CDF334();
          ppDb = 0;
          int v22 = sqlite3_open_v2(a1, &ppDb, a3 | 1, 0);
          if (v22)
          {
            fprintf((FILE *)*MEMORY[0x1E4F143C8], "sqlite3_open_v2 open failed with %d", v22);
          }
          else
          {
            sqlite3_db_config(ppDb, 1006, 1, 0);
            sqlite3_busy_timeout(ppDb, 60000);
            sqlite3_extended_result_codes(ppDb, 1);
          }
          int v39 = mkstemp(v21);
          free(v21);
          if ((v39 & 0x80000000) == 0)
          {
            bzero(filename, 0x400uLL);
            fcntl(v39, 50, filename);
            uint64_t v179 = 0;
            if (sqlite3_open_v2(filename, &v179, a3 | 6, 0)
              || (sqlite3_busy_timeout(ppDb, 60000),
                  sqlite3_extended_result_codes(ppDb, 1),
                  sqlite3_file_control(v179, 0, 102, ppDb)))
            {
              if (!v179) {
                goto LABEL_95;
              }
              sqlite3_close(v179);
            }
            else
            {
              if (ppDb) {
                sqlite3_close(ppDb);
              }
              ppDb = v179;
            }
            uint64_t v179 = 0;
LABEL_95:
            memset((char *)&v198[6] + 5, 0, 27);
            *(_OWORD *)((char *)&v198[5] + 5) = 0u;
            *(_OWORD *)((char *)&v198[4] + 5) = 0u;
            *(_OWORD *)((char *)&v198[3] + 5) = 0u;
            memset((char *)v198 + 5, 0, 48);
            qmemcpy(v198, "UTF-8", 5);
            *(_OWORD *)db = xmmword_1B0DE10B0;
            long long v197 = unk_1B0DE10C0;
            *(_OWORD *)uint64_t v194 = *(_OWORD *)"delete";
            long long v195 = unk_1B0DE10E0;
            uint64_t v50 = ppDb;
            *(void *)&ppStmt.st_dev = 0;
            do
              int v51 = sqlite3_prepare(v50, "pragma legacy_file_format", -1, (sqlite3_stmt **)&ppStmt, 0);
            while (v51 == 5);
            int v168 = v39;
            if (v51)
            {
              uint64_t v53 = a7;
              int v54 = 0;
            }
            else
            {
              do
                int v52 = sqlite3_step(*(sqlite3_stmt **)&ppStmt.st_dev);
              while (v52 == 5);
              uint64_t v53 = a7;
              if (v52 == 100) {
                int v54 = sqlite3_column_int(*(sqlite3_stmt **)&ppStmt.st_dev, 0);
              }
              else {
                int v54 = 0;
              }
              sqlite3_finalize(*(sqlite3_stmt **)&ppStmt.st_dev);
            }
            sub_1B0CDEF40(ppDb, "pragma encoding", (char *)v198, 0x80u);
            unsigned int v55 = ppDb;
            *(void *)&ppStmt.st_dev = 0;
            do
              int v56 = sqlite3_prepare(v55, "pragma page_size", -1, (sqlite3_stmt **)&ppStmt, 0);
            while (v56 == 5);
            dispatch_queue_t queuea = (dispatch_queue_t)v18;
            if (v56)
            {
              uint64_t v58 = v20;
              int v59 = 4096;
            }
            else
            {
              do
                int v57 = sqlite3_step(*(sqlite3_stmt **)&ppStmt.st_dev);
              while (v57 == 5);
              uint64_t v58 = v20;
              if (v57 == 100) {
                int v59 = sqlite3_column_int(*(sqlite3_stmt **)&ppStmt.st_dev, 0);
              }
              else {
                int v59 = 4096;
              }
              sqlite3_finalize(*(sqlite3_stmt **)&ppStmt.st_dev);
            }
            sub_1B0CDEF40(ppDb, "pragma auto_vacuum", (char *)db, 0x20u);
            uint64_t v60 = ppDb;
            *(void *)&ppStmt.st_dev = 0;
            do
              int v61 = sqlite3_prepare(v60, "pragma application_id", -1, (sqlite3_stmt **)&ppStmt, 0);
            while (v61 == 5);
            if (v61)
            {
              int v63 = 0;
            }
            else
            {
              do
                int v62 = sqlite3_step(*(sqlite3_stmt **)&ppStmt.st_dev);
              while (v62 == 5);
              if (v62 == 100) {
                int v63 = sqlite3_column_int(*(sqlite3_stmt **)&ppStmt.st_dev, 0);
              }
              else {
                int v63 = 0;
              }
              sqlite3_finalize(*(sqlite3_stmt **)&ppStmt.st_dev);
            }
            uint64_t v64 = ppDb;
            *(void *)&ppStmt.st_dev = 0;
            do
              int v65 = sqlite3_prepare(v64, "pragma user_version", -1, (sqlite3_stmt **)&ppStmt, 0);
            while (v65 == 5);
            if (v65)
            {
              int v68 = 0;
              uint64_t v66 = (FILE **)MEMORY[0x1E4F143C8];
            }
            else
            {
              uint64_t v66 = (FILE **)MEMORY[0x1E4F143C8];
              do
                int v67 = sqlite3_step(*(sqlite3_stmt **)&ppStmt.st_dev);
              while (v67 == 5);
              if (v67 == 100) {
                int v68 = sqlite3_column_int(*(sqlite3_stmt **)&ppStmt.st_dev, 0);
              }
              else {
                int v68 = 0;
              }
              sqlite3_finalize(*(sqlite3_stmt **)&ppStmt.st_dev);
            }
            sub_1B0CDEF40(ppDb, "pragma journal_mode", (char *)v194, 0x20u);
            int v69 = (char *)malloc_type_calloc(1uLL, 0x400uLL, 0x7D2F11EuLL);
            if (v54)
            {
              long long v192 = 0u;
              long long v193 = 0u;
              long long v190 = 0u;
              long long v191 = 0u;
              long long v188 = 0u;
              long long v189 = 0u;
              long long v187 = 0u;
              memset(&ppStmt, 0, sizeof(ppStmt));
              __sprintf_chk((char *)&ppStmt, 0, 0x100uLL, "pragma legacy_file_format = %d;\n", v54);
              __strlcat_chk();
            }
            if (LODWORD(v198[0]) != 759583829 || BYTE4(v198[0]) != 56)
            {
              long long v192 = 0u;
              long long v193 = 0u;
              long long v190 = 0u;
              long long v191 = 0u;
              long long v188 = 0u;
              long long v189 = 0u;
              long long v187 = 0u;
              memset(&ppStmt, 0, sizeof(ppStmt));
              __sprintf_chk((char *)&ppStmt, 0, 0x100uLL, "pragma encoding = %s;\n", (const char *)v198);
              __strlcat_chk();
            }
            a7 = v53;
            if (v59 != 4096)
            {
              long long v192 = 0u;
              long long v193 = 0u;
              long long v190 = 0u;
              long long v191 = 0u;
              long long v188 = 0u;
              long long v189 = 0u;
              long long v187 = 0u;
              memset(&ppStmt, 0, sizeof(ppStmt));
              __sprintf_chk((char *)&ppStmt, 0, 0x100uLL, "pragma page_size = %d;\n", v59);
              __strlcat_chk();
            }
            if (LOBYTE(db[0]) != 48)
            {
              long long v192 = 0u;
              long long v193 = 0u;
              long long v190 = 0u;
              long long v191 = 0u;
              long long v188 = 0u;
              long long v189 = 0u;
              long long v187 = 0u;
              memset(&ppStmt, 0, sizeof(ppStmt));
              __sprintf_chk((char *)&ppStmt, 0, 0x100uLL, "pragma auto_vacuum = %s;\n", (const char *)db);
              __strlcat_chk();
            }
            int v20 = v58;
            if (v63)
            {
              long long v192 = 0u;
              long long v193 = 0u;
              long long v190 = 0u;
              long long v191 = 0u;
              long long v188 = 0u;
              long long v189 = 0u;
              long long v187 = 0u;
              memset(&ppStmt, 0, sizeof(ppStmt));
              __sprintf_chk((char *)&ppStmt, 0, 0x100uLL, "pragma application_id = %d;\n", v63);
              __strlcat_chk();
            }
            if (v68)
            {
              long long v192 = 0u;
              long long v193 = 0u;
              long long v190 = 0u;
              long long v191 = 0u;
              long long v188 = 0u;
              long long v189 = 0u;
              long long v187 = 0u;
              memset(&ppStmt, 0, sizeof(ppStmt));
              __sprintf_chk((char *)&ppStmt, 0, 0x100uLL, "pragma user_version = %d;\n", v68);
              __strlcat_chk();
            }
            if (LODWORD(v194[0]) != 1701602660 || WORD2(v194[0]) != 25972)
            {
              long long v192 = 0u;
              long long v193 = 0u;
              long long v190 = 0u;
              long long v191 = 0u;
              long long v188 = 0u;
              long long v189 = 0u;
              long long v187 = 0u;
              memset(&ppStmt, 0, sizeof(ppStmt));
              __sprintf_chk((char *)&ppStmt, 0, 0x100uLL, "pragma journal_mode = %s;\n", (const char *)v194);
              __strlcat_chk();
            }
            __strlcat_chk();
            uint64_t v72 = dispatch_queue_create("sql dump", 0);
            *(void *)uint64_t v185 = -1;
            if (pipe(v185))
            {
              uint64_t v73 = *v66;
              unint64_t v74 = __error();
              fprintf(v73, "pipe failed for %d\n", *v74);
              int v75 = v168;
            }
            else
            {
              uint64_t v175 = 0;
              uint64_t v176 = &v175;
              uint64_t v177 = 0x2000000000;
              int v178 = v185[1];
              fcntl(v185[0], 73, 1);
              fcntl(v185[1], 73, 1);
              *(void *)&ppStmt.st_dev = MEMORY[0x1E4F143A8];
              ppStmt.st_ino = 0x40000000;
              *(void *)&ppStmt.st_uid = sub_1B0CDEFF0;
              *(void *)&ppStmt.st_rdev = &unk_1E5FEED60;
              ppStmt.st_atimespec.tv_nsec = (uint64_t)ppDb;
              ppStmt.st_atimespec.tv_sec = (__darwin_time_t)&v175;
              dispatch_async(v72, &ppStmt);
              memset(&errmsg, 0, sizeof(errmsg));
              if (stat(a1, &errmsg) == -1)
              {
                uint64_t v76 = (FILE *)*MEMORY[0x1E4F143C8];
                uint64_t v77 = __error();
                fprintf(v76, "stat failed for %d\n", *v77);
              }
              int v78 = open(__s1, 1538, errmsg.st_mode | 0x80u);
              int v79 = (FILE **)MEMORY[0x1E4F143C8];
              if (v78 < 0)
              {
                uint64_t v105 = (FILE *)*MEMORY[0x1E4F143C8];
                uint64_t v106 = __error();
                fprintf(v105, "open destination failed for %d\n", *v106);
                close(v185[0]);
                int v75 = v168;
              }
              else
              {
                int v80 = v78;
                uint64_t v158 = v20;
                *(void *)uint64_t v182 = 1;
                *(_OWORD *)&v182[8] = xmmword_1B0DE10A0;
                uint64_t v184 = 0;
                *(void *)&v182[24] = (int)queuea;
                uint64_t v183 = 0;
                sub_1B0CDF0A4(v78, (uint64_t)v182);
                int v81 = malloc_type_valloc(0x80000uLL, 0x69BB1DDuLL);
                uint64_t v82 = malloc_type_valloc(0x80000uLL, 0x57D9A872uLL);
                uint64_t v174 = 0;
                *(_OWORD *)uint64_t v172 = 0u;
                long long v173 = 0u;
                int v83 = off_1E9B52050(v172, 0, queuea);
                if (v83) {
                  fprintf(*v79, "compression_stream_init failed for %d\n", v83);
                }
                dispatch_queue_t queueb = v72;
                v172[0] = v82;
                v172[1] = (void *)0x80000;
                *(void *)&long long v173 = v69;
                *((void *)&v173 + 1) = strlen(v69);
                int v84 = off_1E9B52058(v172, 0);
                if (v84) {
                  fprintf(*v79, "compression_stream_process failed for %d\n", v84);
                }
                if (v172[1] != (void *)0x80000)
                {
                  unint64_t v85 = 0x80000 - (unint64_t)v172[1];
                  ssize_t v86 = write(v80, v82, 0x80000 - (unint64_t)v172[1]);
                  if (v86 != v85)
                  {
                    ssize_t v87 = v86;
                    uint64_t v88 = (FILE *)*MEMORY[0x1E4F143C8];
                    int v155 = *__error();
                    uint64_t v89 = v88;
                    int v79 = (FILE **)MEMORY[0x1E4F143C8];
                    fprintf(v89, "last write ended with return %ld expected %ld with errno %d\n", v87, v85, v155);
                  }
                }
                free(v69);
                ssize_t v90 = read(v185[0], v81, 0x80000uLL);
                if (v90 >= 1)
                {
                  do
                  {
                    v172[0] = v82;
                    v172[1] = (void *)0x80000;
                    *(void *)&long long v173 = v81;
                    *((void *)&v173 + 1) = v90;
                    int v91 = off_1E9B52058(v172, 0);
                    if (v91) {
                      fprintf(*v79, "compression_stream_process failed for %d\n", v91);
                    }
                    if (v172[1] != (void *)0x80000)
                    {
                      unint64_t v92 = 0x80000 - (unint64_t)v172[1];
                      ssize_t v93 = write(v80, v82, 0x80000 - (unint64_t)v172[1]);
                      if (v93 != v92)
                      {
                        ssize_t v94 = v93;
                        uint64_t v95 = (FILE *)*MEMORY[0x1E4F143C8];
                        int v156 = *__error();
                        uint64_t v96 = v95;
                        int v79 = (FILE **)MEMORY[0x1E4F143C8];
                        fprintf(v96, "last write ended with return %ld expected %ld with errno %d\n", v94, v92, v156);
                      }
                    }
                    ssize_t v90 = read(v185[0], v81, 0x80000uLL);
                  }
                  while (v90 > 0);
                }
                do
                {
                  v172[0] = v82;
                  v172[1] = (void *)0x80000;
                  long long v173 = (unint64_t)v81;
                  unsigned int v97 = off_1E9B52058(v172, 1);
                  if (v97 >= 2) {
                    fprintf(*v79, "compression_stream_process bravo failed for %d\n", v97);
                  }
                  if (v172[1] != (void *)0x80000)
                  {
                    unint64_t v98 = 0x80000 - (unint64_t)v172[1];
                    ssize_t v99 = write(v80, v82, 0x80000 - (unint64_t)v172[1]);
                    BOOL v29 = v99 == v98;
                    int v79 = (FILE **)MEMORY[0x1E4F143C8];
                    if (!v29)
                    {
                      ssize_t v100 = v99;
                      int v101 = (FILE *)*MEMORY[0x1E4F143C8];
                      int v157 = *__error();
                      uint64_t v102 = v101;
                      int v79 = (FILE **)MEMORY[0x1E4F143C8];
                      fprintf(v102, "last write ended with return %ld expected %ld with errno %d\n", v100, v90, v157);
                    }
                  }
                }
                while (!v97);
                off_1E9B52060(v172);
                free(v81);
                free(v82);
                if (v90)
                {
                  uint64_t v103 = *v79;
                  uint64_t v104 = __error();
                  fprintf(v103, "last read ended with return %ld with errno %d\n", v90, *v104);
                }
                close(v80);
                close(v185[0]);
                int v69 = 0;
                int v20 = v158;
                a7 = v53;
                int v75 = v168;
                uint64_t v72 = queueb;
              }
              dispatch_sync(v72, &unk_1F09A4E08);
              dispatch_release(v72);
              int v107 = *((_DWORD *)v176 + 6);
              if (v107 != -1) {
                close(v107);
              }
              _Block_object_dispose(&v175, 8);
            }
            if (v69) {
              free(v69);
            }
            if (ppDb) {
              sqlite3_close(ppDb);
            }
            sub_1B0CDF1E0(filename);
            int v108 = v75;
LABEL_254:
            close(v108);
            uint64_t v15 = 0;
LABEL_255:
            *int v20 = strdup(__s1);
            int v24 = 1;
            if (!v15)
            {
LABEL_256:
              size_t v146 = strlen(*v20);
              if (v24 == 1)
              {
                size_t v147 = v146 + 9;
              }
              else
              {
                size_t v147 = v146 + strlen(v20[1]) + 18;
                if (v24 != 2) {
                  v147 += strlen(v20[2]) + 9;
                }
              }
              size_t v148 = v147 + 8;
              uint64_t v149 = sqlite3_malloc(v148);
              bzero(v149, v148);
              uint64_t v150 = (char *)&v149[v24 + 1];
              size_t v151 = strlen(*v20);
              *uint64_t v149 = v150;
              strcpy(v150, *v20);
              if (v24 != 1)
              {
                uint64_t v152 = &v150[v151 + 1];
                size_t v153 = strlen(v20[1]);
                v149[1] = v152;
                strcpy(v152, v20[1]);
                if (v24 != 2)
                {
                  uint64_t v154 = &v152[v153 + 1];
                  v149[2] = v154;
                  strcpy(v154, v20[2]);
                }
              }
              uint64_t v15 = 0;
              if (a7) {
                *a7 = v149;
              }
            }
LABEL_265:
            free((void *)*v20);
            if (v24 != 1)
            {
              free((void *)v20[1]);
              if (v24 != 2) {
                free((void *)v20[2]);
              }
            }
LABEL_268:
            free(v20);
            return v15;
          }
LABEL_68:
          uint64_t v15 = 0xFFFFFFFFLL;
          goto LABEL_255;
        }
        uint64_t v25 = sub_1B0CDF334();
        memset(&ppStmt, 0, sizeof(ppStmt));
        db[0] = 0;
        int v26 = sqlite3_open_v2(a1, db, a3 | 1, 0);
        if (v26)
        {
          fprintf((FILE *)*MEMORY[0x1E4F143C8], "sqlite3_open_v2 open failed with %d", v26);
        }
        else
        {
          sqlite3_db_config(db[0], 1006, 1, 0);
          sqlite3_busy_timeout(db[0], 60000);
          sqlite3_extended_result_codes(db[0], 1);
        }
        int v28 = mkstemp(v25);
        free(v25);
        if (v28 < 0) {
          goto LABEL_68;
        }
        bzero(filename, 0x400uLL);
        fcntl(v28, 50, filename);
        *(_OWORD *)uint64_t v182 = *(_OWORD *)"delete";
        *(_OWORD *)&v182[16] = unk_1B0DE10E0;
        sub_1B0CDEF40(db[0], "pragma journal_mode", v182, 0x20u);
        BOOL v29 = *(unsigned __int16 *)v182 == 24951 && v182[2] == 108;
        int v30 = !v29;
        v194[0] = 0;
        v172[0] = 0;
        v172[1] = 0;
        *(void *)&long long v173 = 0;
        int v161 = v28;
        if (!sqlite3_open_v2(filename, v194, a3 | 6, 0))
        {
          sqlite3_busy_timeout(db[0], 60000);
          sqlite3_extended_result_codes(db[0], 1);
          if (!sqlite3_file_control(v194[0], 0, 102, db[0]))
          {
            uint64_t v31 = v18;
            uint64_t v32 = malloc_type_calloc(1uLL, 0x800uLL, 0x10040436913F5uLL);
            uint64_t v33 = malloc_type_calloc(1uLL, 0x800uLL, 0x10040436913F5uLL);
            v172[0] = v32;
            v172[1] = v33;
            DWORD1(v173) = 256;
            sqlite3_exec(v194[0], "select name,sql from sqlite_master where type = 'index' and rootpage != 0", (int (__cdecl *)(void *, int, char **, char **))sub_1B0CDF3F8, v172, 0);
            sqlite3_exec(v194[0], "BEGIN EXCLUSIVE", 0, 0, 0);
            unint64_t v34 = v173;
            if (v173)
            {
              unint64_t v35 = 0;
              uint64_t v36 = (FILE **)MEMORY[0x1E4F143C8];
              do
              {
                if (*((void *)v172[0] + v35) && *((void *)v172[1] + v35))
                {
                  int v37 = sqlite3_mprintf("DROP INDEX IF EXISTS \"%w\"", *((void *)v172[0] + v35));
                  *(void *)&errmsg.st_dev = 0;
                  int v38 = sqlite3_exec(v194[0], v37, 0, 0, (char **)&errmsg);
                  if (v38 && v38 != 101)
                  {
                    fprintf(*v36, "while executing statement ('%s') it failed with error code %d and reason:'%s'\n", v37, v38, *(const char **)&errmsg.st_dev);
                    *((void *)v172[0] + v35) = 0;
                  }
                  if (*(void *)&errmsg.st_dev) {
                    sqlite3_free(*(void **)&errmsg.st_dev);
                  }
                  sqlite3_free(v37);
                  unint64_t v34 = v173;
                }
                ++v35;
              }
              while (v35 < v34);
            }
            sqlite3_exec(v194[0], "COMMIT", 0, 0, 0);
            sqlite3_exec(v194[0], "VACUUM", 0, 0, 0);
            uint64_t v18 = v31;
            int v28 = v161;
            if (!v30)
            {
              sqlite3_exec(v194[0], "pragma journal_mode = wal", 0, 0, 0);
              sqlite3_exec(v194[0], "BEGIN EXCLUSIVE", 0, 0, 0);
              sqlite3_exec(v194[0], "COMMIT", 0, 0, 0);
            }
          }
        }
        if (v194[0]) {
          sqlite3_close(v194[0]);
        }
        if (db[0]) {
          sqlite3_close(db[0]);
        }
        dispatch_queue_t queue = (dispatch_queue_t)v18;
        if (!v173)
        {
          size_t v48 = 0;
          uint64_t __buf = 0;
LABEL_203:
          int v169 = open(filename, 0, 0);
          memset(&ppStmt, 0, sizeof(ppStmt));
          if (stat(filename, &ppStmt) == -1)
          {
            uint64_t v113 = (FILE *)*MEMORY[0x1E4F143C8];
            uint64_t v114 = __error();
            fprintf(v113, "stat failed for %d\n", *v114);
          }
          memset(&ppStmt, 0, sizeof(ppStmt));
          if (stat(a1, &ppStmt) == -1)
          {
            uint64_t v115 = (FILE *)*MEMORY[0x1E4F143C8];
            uint64_t v116 = __error();
            fprintf(v115, "stat failed for %d\n", *v116);
          }
          int v117 = open(__s1, 1538, ppStmt.st_mode | 0x80u);
          if (v117 < 0)
          {
            uint64_t v140 = (FILE *)*MEMORY[0x1E4F143C8];
            uint64_t v141 = __error();
            fprintf(v140, "open destination failed for %d\n", *v141);
            close(v169);
          }
          else
          {
            int v118 = v117;
            *(void *)&errmsg.st_dev = 1;
            *(_OWORD *)&errmsg.st_ino = xmmword_1B0DE1090;
            *(void *)&errmsg.st_rdev = (int)queue;
            errmsg.st_atimespec = (timespec)v48;
            sub_1B0CDF0A4(v117, (uint64_t)&errmsg);
            uint64_t v160 = a7;
            if (v48)
            {
              write(v118, __buf, v48);
              free(__buf);
              uint64_t __buf = 0;
            }
            uint64_t v119 = malloc_type_valloc(0x80000uLL, 0x9CCE196uLL);
            uint64_t v120 = malloc_type_valloc(0x80000uLL, 0x35BE4CFAuLL);
            memset(v198, 0, 40);
            int v121 = off_1E9B52050(v198, 0, queue);
            if (v121) {
              fprintf((FILE *)*MEMORY[0x1E4F143C8], "compression_stream_init failed for %d\n", v121);
            }
            ssize_t v122 = read(v169, v119, 0x80000uLL);
            dispatch_queue_t queuec = v119;
            if (v122 >= 1)
            {
              int v123 = (FILE **)MEMORY[0x1E4F143C8];
              do
              {
                *(void *)&v198[0] = v120;
                *((void *)&v198[0] + 1) = 0x80000;
                *(void *)&v198[1] = v119;
                *((void *)&v198[1] + 1) = v122;
                do
                {
                  unsigned int v124 = off_1E9B52058(v198, 0);
                  if (v124 >= 2) {
                    fprintf(*v123, "compression_stream_process bravo failed for %d\n", v124);
                  }
                  if (*((void *)&v198[0] + 1) != 0x80000)
                  {
                    uint64_t v125 = 0x80000 - *((void *)&v198[0] + 1);
                    ssize_t v126 = write(v118, v120, 0x80000 - *((void *)&v198[0] + 1));
                    if (v126 != v125)
                    {
                      ssize_t v127 = v126;
                      uint64_t v128 = *v123;
                      uint64_t v129 = __error();
                      fprintf(v128, "last write ended with return %ld expected %ld with errno %d\n", v127, v122, *v129);
                    }
                  }
                  if (v124 == 1) {
                    break;
                  }
                }
                while (!v124 && *((void *)&v198[1] + 1) != 0);
                uint64_t v119 = queuec;
                ssize_t v122 = read(v169, queuec, 0x80000uLL);
              }
              while (v122 > 0);
            }
            *(void *)&v198[0] = v120;
            *((void *)&v198[0] + 1) = 0x80000;
            v198[1] = (unint64_t)v119;
            uint64_t v131 = (FILE **)MEMORY[0x1E4F143C8];
            do
            {
              unsigned int v132 = off_1E9B52058(v198, 1);
              if (v132 >= 2) {
                fprintf(*v131, "compression_stream_process bravo failed for %d\n", v132);
              }
              if (*((void *)&v198[0] + 1) != 0x80000)
              {
                uint64_t v133 = 0x80000 - *((void *)&v198[0] + 1);
                ssize_t v134 = write(v118, v120, 0x80000 - *((void *)&v198[0] + 1));
                if (v134 != v133)
                {
                  ssize_t v135 = v134;
                  uint64_t v136 = *v131;
                  uint64_t v137 = __error();
                  fprintf(v136, "last write ended with return %ld expected %ld with errno %d\n", v135, v122, *v137);
                }
              }
            }
            while (!v132);
            off_1E9B52060(v198);
            free(queuec);
            free(v120);
            if (v122)
            {
              uint64_t v138 = *v131;
              uint64_t v139 = __error();
              fprintf(v138, "last read ended with return %ld with errno %d\n", v122, *v139);
            }
            close(v118);
            close(v169);
            a7 = v160;
            int v28 = v161;
          }
          if (__buf) {
            free(__buf);
          }
          uint64_t v142 = v172[0];
          if (v172[0])
          {
            if (v173)
            {
              unint64_t v143 = 0;
              do
                free(*((void **)v172[0] + v143++));
              while (v143 < v173);
              uint64_t v142 = v172[0];
            }
            free(v142);
            v172[0] = 0;
          }
          uint64_t v144 = v172[1];
          if (v172[1])
          {
            if (v173)
            {
              unint64_t v145 = 0;
              do
                free(*((void **)v172[1] + v145++));
              while (v145 < v173);
              uint64_t v144 = v172[1];
            }
            free(v144);
            v172[1] = 0;
          }
          sub_1B0CDF1E0(filename);
          int v108 = v28;
          goto LABEL_254;
        }
        unint64_t v40 = 0;
        int v41 = 0;
        do
        {
          uint64_t v43 = (const char *)*((void *)v172[1] + v40);
          if (v43 && *((void *)v172[0] + v40))
          {
            if (v41)
            {
              uint64_t v42 = sqlite3_mprintf("%s;\n%s", v41, v43);
              sqlite3_free(v41);
              int v41 = v42;
            }
            else
            {
              int v41 = sqlite3_mprintf("%s", *((const char **)v172[1] + v40));
            }
          }
          ++v40;
        }
        while (v40 < v173);
        if (v41)
        {
          uint64_t v44 = sqlite3_mprintf("%s;\n", v41);
          sqlite3_free(v41);
          if (v44)
          {
            size_t v45 = strlen(v44);
            if (v45)
            {
              size_t v46 = v45;
              memset(&errmsg, 0, 40);
              int v47 = off_1E9B52050(&errmsg, 0, v18);
              if (v47)
              {
                fprintf((FILE *)*MEMORY[0x1E4F143C8], "compression_stream_init failed for %d\n", v47);
                size_t v48 = 0;
                uint64_t v49 = 0;
              }
              else
              {
                uint64_t v159 = a7;
                uint64_t v109 = malloc_type_valloc(0x80000uLL, 0xFEA5EDBDuLL);
                size_t v48 = 0;
                uint64_t v49 = 0;
                *(void *)&errmsg.st_uid = v44;
                *(void *)&errmsg.st_rdev = v46 + 1;
                do
                {
                  *(void *)&errmsg.st_dev = v109;
                  errmsg.st_ino = 0x80000;
                  unsigned int v111 = off_1E9B52058(&errmsg, 1);
                  if (v111 >= 2) {
                    fprintf((FILE *)*MEMORY[0x1E4F143C8], "compression_stream_process bravo failed for %d\n", v111);
                  }
                  size_t v112 = 0x80000 - errmsg.st_ino;
                  if ((int64_t)(0x80000 - errmsg.st_ino) >= 1)
                  {
                    if (v49) {
                      uint64_t v110 = (char *)malloc_type_realloc(v49, v112 + v48, 0xC7B82C0AuLL);
                    }
                    else {
                      uint64_t v110 = (char *)malloc_type_malloc(v112 + v48, 0xD756F970uLL);
                    }
                    uint64_t v49 = v110;
                    memcpy(&v110[v48], v109, v112);
                    v48 += v112;
                  }
                }
                while (!v111);
                off_1E9B52060(&errmsg);
                a7 = v159;
              }
              uint64_t __buf = v49;
              goto LABEL_202;
            }
          }
        }
        else
        {
          uint64_t v44 = 0;
        }
        size_t v48 = 0;
        uint64_t __buf = 0;
LABEL_202:
        sqlite3_free(v44);
        int v28 = v161;
        goto LABEL_203;
      }
      if (a5 + 1 < 2)
      {
        __s1 = a2;
        uint64_t v18 = 0xFFFFFFFFLL;
        goto LABEL_18;
      }
      if (a8)
      {
        uint64_t v19 = sqlite3_mprintf("Compression method %ld not currently supported for operationType %ld");
        goto LABEL_14;
      }
    }
    else if (a8)
    {
      uint64_t v19 = sqlite3_mprintf("Source file '%s' is not an SQLite database file, or is encrypted.  Type is %d");
LABEL_14:
      *a8 = v19;
      return 0xFFFFFFFFLL;
    }
    return 0xFFFFFFFFLL;
  }
  return v15;
}

uint64_t sub_1B0CDE0B0(const char *a1, const char *a2, int a3)
{
  int v7 = 0;
  ppDb = 0;
  uint64_t v5 = sqlite3_open_v2(a1, &ppDb, a3 | 1, 0);
  if (!v5)
  {
    sqlite3_busy_timeout(ppDb, 60000);
    sqlite3_extended_result_codes(ppDb, 1);
    sqlite3_db_config(ppDb, 1006, 1, 0);
    uint64_t v5 = sqlite3_open_v2(a2, &v7, a3 | 6, 0);
    if (!v5)
    {
      sqlite3_busy_timeout(v7, 60000);
      sqlite3_extended_result_codes(v7, 1);
      uint64_t v5 = sqlite3_file_control(v7, 0, 102, ppDb);
    }
  }
  if (ppDb) {
    sqlite3_close_v2(ppDb);
  }
  if (v7) {
    sqlite3_close(v7);
  }
  return v5;
}

uint64_t _sqlite3_apple_unarchive(const char *a1, const char *a2, int a3, uint64_t a4, void *a5, char **a6)
{
  v123[1] = *(sqlite3 **)MEMORY[0x1E4F143B8];
  if (qword_1E9B52048 != -1) {
    dispatch_once(&qword_1E9B52048, &unk_1F09A4DE8);
  }
  unsigned int v113 = -1;
  uint64_t v11 = _sqlite3_apple_archive_type(a1, (int *)&v113, a6);
  if (!v11)
  {
    uint64_t v12 = v113;
    if (v113 - 6 <= 0xFFFFFFFC)
    {
      if (a6) {
        *a6 = sqlite3_mprintf("Source file '%s' is not an SQLite database file or backup archive, or is encrypted.  Type is %d", a1, v113);
      }
      return 0xFFFFFFFFLL;
    }
    ssize_t v13 = (const char **)malloc_type_calloc(1uLL, 0x20uLL, 0x10040436913F5uLL);
    if (v12 != 3)
    {
      filename = (char *)a2;
      if (v12 == 5)
      {
        memset(&v119, 0, sizeof(v119));
        if (stat(a1, &v119) == -1)
        {
          uint64_t v23 = (FILE *)*MEMORY[0x1E4F143C8];
          int v24 = __error();
          fprintf(v23, "stat failed for %d\n", *v24);
        }
        int v25 = open(a2, 1538, v119.st_mode | 0x80u);
        int v26 = open(a1, 0, 0);
        if (v26 < 0)
        {
          unint64_t v34 = (FILE *)*MEMORY[0x1E4F143C8];
          unint64_t v35 = __error();
          fprintf(v34, "open destination failed for %d\n", *v35);
          close(v25);
        }
        else
        {
          int v27 = v26;
          int v99 = a3;
          int v28 = malloc_type_valloc(0x100000uLL, 0x873DDD66uLL);
          long long v117 = 0u;
          long long v118 = 0u;
          long long block = 0u;
          sub_1B0CDC54C(v27, (uint64_t)&block);
          uint64_t v29 = DWORD2(v117);
          size_t v30 = v118;
          int v110 = v25;
          int v107 = v28;
          uint64_t v104 = a5;
          int v108 = v27;
          if ((void)v118)
          {
            uint64_t v102 = malloc_type_calloc(1uLL, v118 + 1, 0x778FCE43uLL);
            if (read(v27, v102, v30))
            {
              uint64_t v122 = 0;
              long long v120 = 0u;
              long long v121 = 0u;
              int v31 = off_1E9B52050(&v120, 1, v29);
              if (v31)
              {
                fprintf((FILE *)*MEMORY[0x1E4F143C8], "compression_stream_init failed for %d\n", v31);
                uint64_t v32 = 0;
              }
              else
              {
                unsigned int v100 = v29;
                uint64_t v53 = v13;
                int v54 = malloc_type_valloc(0x80000uLL, 0xCF95EE1DuLL);
                uint64_t v55 = 0;
                int v56 = 0;
                *(void *)&long long v121 = v102;
                *((void *)&v121 + 1) = v30;
                int v57 = (FILE **)MEMORY[0x1E4F143C8];
                do
                {
                  *(void *)&long long v120 = v54;
                  *((void *)&v120 + 1) = 0x80000;
                  unsigned int v59 = off_1E9B52058(&v120, 1);
                  if (v59 >= 2) {
                    fprintf(*v57, "compression_stream_process bravo failed for %d\n", v59);
                  }
                  size_t v60 = 0x80000 - *((void *)&v120 + 1);
                  if (0x80000 - *((void *)&v120 + 1) >= 1)
                  {
                    if (v56) {
                      uint64_t v58 = (char *)malloc_type_realloc(v56, v60 + v55, 0xFF3ABD19uLL);
                    }
                    else {
                      uint64_t v58 = (char *)malloc_type_malloc(v60 + v55, 0x5347FD6BuLL);
                    }
                    int v56 = v58;
                    memcpy(&v58[v55], v54, v60);
                    v55 += v60;
                  }
                }
                while (!v59);
                off_1E9B52060(&v120);
                uint64_t v32 = (char *)malloc_type_realloc(v56, v55 + 1, 0x3E12C364uLL);
                v32[v55] = 0;
                ssize_t v13 = v53;
                int v25 = v110;
                int v28 = v107;
                uint64_t v29 = v100;
              }
            }
            else
            {
              uint64_t v32 = 0;
            }
            free(v102);
          }
          else
          {
            uint64_t v32 = 0;
          }
          int v61 = malloc_type_valloc(0x100000uLL, 0xFA5C8DA5uLL);
          uint64_t v122 = 0;
          long long v120 = 0u;
          long long v121 = 0u;
          int v62 = off_1E9B52050(&v120, 1, v29);
          if (v62) {
            fprintf((FILE *)*MEMORY[0x1E4F143C8], "compression_stream_init failed for %d\n", v62);
          }
          int v101 = v32;
          ssize_t v63 = read(v27, v28, 0x100000uLL);
          if (v63 >= 1)
          {
            uint64_t v64 = (FILE **)MEMORY[0x1E4F143C8];
            do
            {
              *(void *)&long long v121 = v28;
              *((void *)&v121 + 1) = v63;
              do
              {
                *(void *)&long long v120 = v61;
                *((void *)&v120 + 1) = 0x100000;
                unsigned int v66 = off_1E9B52058(&v120, 0);
                if (v66 >= 2) {
                  fprintf(*v64, "compression_stream_process alpha failed for %d\n", v66);
                }
                if (*((void *)&v120 + 1) != 0x100000)
                {
                  uint64_t v67 = 0x100000 - *((void *)&v120 + 1);
                  ssize_t v68 = write(v25, v61, 0x100000 - *((void *)&v120 + 1));
                  if (v68 != v67)
                  {
                    ssize_t v69 = v68;
                    int v70 = *v64;
                    int v97 = *__error();
                    int v71 = v70;
                    int v25 = v110;
                    fprintf(v71, "last write ended with return %ld expected %ld with errno %d\n", v69, v67, v97);
                  }
                }
                if (v66) {
                  BOOL v65 = 1;
                }
                else {
                  BOOL v65 = *((void *)&v121 + 1) == 0;
                }
              }
              while (!v65);
              int v28 = v107;
              ssize_t v63 = read(v108, v107, 0x100000uLL);
            }
            while (v63 > 0);
          }
          long long v121 = (unint64_t)v28;
          uint64_t v72 = (FILE **)MEMORY[0x1E4F143C8];
          do
          {
            *(void *)&long long v120 = v61;
            *((void *)&v120 + 1) = 0x100000;
            unsigned int v73 = off_1E9B52058(&v120, 1);
            if (v73 >= 2) {
              fprintf(*v72, "compression_stream_process bravo failed for %d\n", v73);
            }
            if (*((void *)&v120 + 1) != 0x100000)
            {
              uint64_t v74 = 0x100000 - *((void *)&v120 + 1);
              ssize_t v75 = write(v25, v61, 0x100000 - *((void *)&v120 + 1));
              if (v75 != v74)
              {
                ssize_t v76 = v75;
                uint64_t v77 = *v72;
                int v98 = *__error();
                int v78 = v77;
                int v25 = v110;
                fprintf(v78, "last write ended with return %ld expected %ld with errno %d\n", v76, v74, v98);
              }
            }
          }
          while (!v73);
          off_1E9B52060(&v120);
          close(v25);
          close(v108);
          free(v107);
          free(v61);
          a5 = v104;
          a2 = filename;
          if (v101)
          {
            v123[0] = 0;
            if (!sqlite3_open_v2(filename, v123, v99 | 2, 0))
            {
              sqlite3_busy_timeout(v123[0], 60000);
              sqlite3_extended_result_codes(v123[0], 1);
              int64_t v79 = strlen(v101);
              if (v79 >= 1)
              {
                int64_t v80 = v79;
                int v81 = v101;
                do
                {
                  uint64_t v82 = strstr(v81, ";\n");
                  if (!v82) {
                    break;
                  }
                  int v83 = v82;
                  size_t v84 = v82 - v81;
                  unint64_t v85 = (char *)malloc_type_calloc(1uLL, v82 - v81 + 1, 0xC364306BuLL);
                  strncpy(v85, v81, v84);
                  sqlite3_exec(v123[0], v85, 0, 0, 0);
                  free(v85);
                  int v81 = v83 + 2;
                }
                while (v83 + 2 - v101 < v80);
              }
            }
            if (v123[0]) {
              sqlite3_close(v123[0]);
            }
            free(v101);
            a2 = filename;
          }
        }
      }
      else
      {
        if (v12 != 4)
        {
          if (a6) {
            *a6 = sqlite3_mprintf("Unknown source file type %ld", v12);
          }
          uint64_t v11 = 0xFFFFFFFFLL;
          goto LABEL_136;
        }
        v123[0] = (sqlite3 *)-1;
        if (truncate(a2, 0) && *__error() != 2)
        {
          uint64_t v14 = (FILE *)*MEMORY[0x1E4F143C8];
          uint64_t v15 = __error();
          fprintf(v14, "truncate failed on '%s' with errno %d\n", a2, *v15);
        }
        unsigned int v16 = dispatch_queue_create("decompressor", 0);
        memset(&v119, 0, sizeof(v119));
        if (stat(a1, &v119) == -1)
        {
          int v17 = (FILE *)*MEMORY[0x1E4F143C8];
          uint64_t v18 = __error();
          fprintf(v17, "stat failed for %d\n", *v18);
        }
        if (pipe((int *)v123))
        {
          uint64_t v19 = (FILE *)*MEMORY[0x1E4F143C8];
          int v20 = __error();
          fprintf(v19, "pipe failed for %d\n", *v20);
        }
        else
        {
          *(void *)&long long v120 = 0;
          *((void *)&v120 + 1) = &v120;
          *(void *)&long long v121 = 0x2000000000;
          DWORD2(v121) = HIDWORD(v123[0]);
          fcntl((int)v123[0], 73, 1);
          fcntl(SHIDWORD(v123[0]), 73, 1);
          *(void *)&long long block = MEMORY[0x1E4F143A8];
          *((void *)&block + 1) = 0x40000000;
          *(void *)&long long v117 = sub_1B0CDF564;
          *((void *)&v117 + 1) = &unk_1E5FEEDA8;
          *(void *)&long long v118 = &v120;
          *((void *)&v118 + 1) = a1;
          dispatch_async(v16, &block);
          ppDb = 0;
          if (!sqlite3_open_v2(a2, &ppDb, a3 | 6, 0))
          {
            sqlite3_busy_timeout(ppDb, 60000);
            sqlite3_extended_result_codes(ppDb, 1);
            sub_1B0CE1108(ppDb);
            uint64_t v36 = malloc_type_malloc(0x80001uLL, 0x7BABD825uLL);
            v36[0x80000] = 0;
            ssize_t v37 = read((int)v123[0], v36, 0x80000uLL);
            if (!v37) {
              goto LABEL_117;
            }
            uint64_t v103 = v13;
            uint64_t v105 = a5;
            unint64_t v38 = 0;
            unint64_t v39 = 0x80000;
            unint64_t v40 = v36;
            do
            {
              v38 += v37;
              v36[v38] = 0;
              if (v38 >= v39)
              {
                uint64_t v41 = v40 - v36;
                if (v40 == v36)
                {
                  uint64_t v36 = malloc_type_realloc(v36, v39 + 524289, 0x13C8CE99uLL);
                  uint64_t v42 = v36 + 0x80000;
                  v39 += 0x80000;
                }
                else
                {
                  memmove(v36, v40, v39 - v41);
                  v38 -= v41;
                  uint64_t v42 = &v36[v38];
                }
                *(void *)uint64_t v109 = v39;
                unsigned char *v42 = 0;
                unint64_t v40 = v36;
              }
              else
              {
                *(void *)uint64_t v109 = v39;
              }
              uint64_t v43 = v36;
              int v44 = strncmp(v40, "CREATE TRIGGER", 0xEuLL);
              if (v44) {
                size_t v45 = ";\n";
              }
              else {
                size_t v45 = "END;\n";
              }
              if (v44) {
                unsigned int v46 = 2;
              }
              else {
                unsigned int v46 = 5;
              }
              unsigned int v111 = v43;
              int v47 = &v43[v38];
              do
              {
                uint64_t v49 = strstr(v40, v45);
                if (!v49) {
                  break;
                }
                uint64_t v50 = v49;
                if (v49 >= v47) {
                  break;
                }
                uint64_t v51 = v46 - 1;
                v49[v51] = 0;
                if (sqlite3_complete(v40))
                {
                  stat errmsg = 0;
                  int v52 = sqlite3_exec(ppDb, v40, 0, 0, &errmsg);
                  if (v52 && v52 != 100) {
                    fprintf((FILE *)*MEMORY[0x1E4F143C8], "executing sql '%s' returned error %x with message:'%s'\n", v40, v52, errmsg);
                  }
                  if (errmsg) {
                    sqlite3_free(errmsg);
                  }
                  v50[v51] = 10;
                  unint64_t v40 = &v50[v46];
                  int v48 = strncmp(v40, "CREATE TRIGGER", 0xEuLL);
                  if (v48) {
                    size_t v45 = ";\n";
                  }
                  else {
                    size_t v45 = "END;\n";
                  }
                  if (v48) {
                    unsigned int v46 = 2;
                  }
                  else {
                    unsigned int v46 = 5;
                  }
                }
              }
              while (v40 < v47);
              unint64_t v39 = *(void *)v109;
              ssize_t v37 = read((int)v123[0], v47, *(void *)v109 - v38);
              a5 = v105;
              uint64_t v36 = v111;
            }
            while (v37);
            ssize_t v13 = v103;
            a2 = filename;
            if (v111) {
LABEL_117:
            }
              free(v36);
          }
          if (ppDb) {
            sqlite3_close(ppDb);
          }
          close((int)v123[0]);
          dispatch_sync(v16, &unk_1F09A4E28);
          dispatch_release(v16);
          int v86 = *(_DWORD *)(*((void *)&v120 + 1) + 24);
          if (v86 != -1) {
            close(v86);
          }
          _Block_object_dispose(&v120, 8);
        }
      }
      *ssize_t v13 = strdup(a2);
      int v22 = 1;
      goto LABEL_124;
    }
    uint64_t v11 = sub_1B0CDE0B0(a1, a2, a3);
    *ssize_t v13 = strdup(a2);
    memset(&v112, 0, sizeof(v112));
    uint64_t v21 = sqlite3_mprintf("%s-wal", a2);
    if (stat(v21, &v112) || v112.st_size < 1)
    {
      free(v21);
      int v22 = 1;
    }
    else
    {
      *ssize_t v13 = v21;
      int v22 = 2;
    }
    memset(&v112, 0, sizeof(v112));
    uint64_t v33 = sqlite3_mprintf("%s-journal", a2);
    if (stat(v33, &v112) || v112.st_size < 1)
    {
      free(v33);
      if (!v11) {
        goto LABEL_124;
      }
    }
    else
    {
      ++v22;
      *ssize_t v13 = v33;
      if (!v11)
      {
LABEL_124:
        size_t v87 = strlen(*v13);
        if (v22 == 1)
        {
          size_t v88 = v87 + 9;
        }
        else
        {
          size_t v88 = v87 + strlen(v13[1]) + 18;
          if (v22 != 2) {
            v88 += strlen(v13[2]) + 9;
          }
        }
        size_t v89 = v88 + 8;
        ssize_t v90 = sqlite3_malloc(v89);
        bzero(v90, v89);
        int v91 = (char *)&v90[v22 + 1];
        size_t v92 = strlen(*v13);
        *ssize_t v90 = v91;
        strcpy(v91, *v13);
        if (v22 != 1)
        {
          ssize_t v93 = &v91[v92 + 1];
          size_t v94 = strlen(v13[1]);
          v90[1] = v93;
          strcpy(v93, v13[1]);
          if (v22 != 2)
          {
            uint64_t v95 = &v93[v94 + 1];
            v90[2] = v95;
            strcpy(v95, v13[2]);
          }
        }
        uint64_t v11 = 0;
        if (a5) {
          *a5 = v90;
        }
      }
    }
    free((void *)*v13);
    if (v22 != 1)
    {
      free((void *)v13[1]);
      if (v22 != 2) {
        free((void *)v13[2]);
      }
    }
LABEL_136:
    free(v13);
  }
  return v11;
}

void *sub_1B0CDEEC8()
{
  uint64_t result = dlopen("/usr/lib/libcompression.dylib", 8);
  if (result)
  {
    uint64_t v1 = result;
    off_1E9B52050 = (uint64_t (*)(void, void, void))dlsym(result, "compression_stream_init");
    off_1E9B52058 = (uint64_t (*)(void, void))dlsym(v1, "compression_stream_process");
    uint64_t result = dlsym(v1, "compression_stream_destroy");
    off_1E9B52060 = (uint64_t (*)(void))result;
  }
  return result;
}

uint64_t sub_1B0CDEF40(sqlite3 *db, char *zSql, char *a3, unsigned int a4)
{
  stat ppStmt = 0;
  do
    uint64_t result = sqlite3_prepare(db, zSql, -1, &ppStmt, 0);
  while (result == 5);
  if (!result)
  {
    do
      int v9 = sqlite3_step(ppStmt);
    while (v9 == 5);
    if (v9 == 100)
    {
      uint64_t v10 = sqlite3_column_text(ppStmt, 0);
      if (v10)
      {
        if (a3)
        {
          if (*v10) {
            strlcpy(a3, (const char *)v10, a4);
          }
        }
      }
    }
    return sqlite3_finalize(ppStmt);
  }
  return result;
}

uint64_t sub_1B0CDEFF0(uint64_t a1)
{
  sub_1B0CDFC64(*(sqlite3 **)(a1 + 40), "main", 0, (void (*)(void, void))sub_1B0CDF060, *(int *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
  uint64_t result = close(*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = -1;
  return result;
}

ssize_t sub_1B0CDF060(const char *a1, int a2)
{
  size_t v4 = strlen(a1);

  return write(a2, a1, v4);
}

void sub_1B0CDF0A4(int a1, uint64_t a2)
{
  size_t v4 = (char *)malloc_type_calloc(1uLL, 0x400uLL, 0x37E09262uLL);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(a2 + 24);
  if (v6 > 516)
  {
    switch(v6)
    {
      case 517:
        int v7 = "ZLIB";
        goto LABEL_15;
      case 774:
        int v7 = "LZMA";
        goto LABEL_15;
      case 2049:
        int v7 = "LZFSE";
        goto LABEL_15;
    }
  }
  else
  {
    switch(v6)
    {
      case 0:
        int v7 = "none";
        goto LABEL_15;
      case 256:
        int v7 = "LZ4";
        goto LABEL_15;
      case 257:
        int v7 = "LZ4_RAW";
        goto LABEL_15;
    }
  }
  int v7 = 0;
LABEL_15:
  snprintf(v4, 0x400uLL, "%s,%u,%u,0x%llx,0x%llx,0x%llx,%lu,0x%llx,%s\n", "SQLite ARCHIVE_APPLE_1", *(_DWORD *)a2, *(_DWORD *)(a2 + 4), *(void *)(a2 + 8), *(void *)(a2 + 16), v6, *(void *)(a2 + 32), *(void *)(a2 + 40), v7);
  size_t v8 = strlen(v5);
  write(a1, v5, v8);

  free(v5);
}

const char *sub_1B0CDF1E0(const char *result)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v1 = result;
    if (*result)
    {
      MEMORY[0x1F4188790]();
      bzero(v2, 0x409uLL);
      __strlcpy_chk();
      __strlcat_chk();
      unlink(v2);
      bzero(v2, 0x409uLL);
      __strlcpy_chk();
      __strlcat_chk();
      unlink(v2);
      bzero(v2, 0x409uLL);
      __strlcpy_chk();
      __strlcat_chk();
      unlink(v2);
      return (const char *)unlink(v1);
    }
  }
  return result;
}

char *sub_1B0CDF334()
{
  v0 = (char *)malloc_type_calloc(1uLL, 0x400uLL, 0x12D23B98uLL);
  confstr(65537, v0, 0x400uLL);
  size_t v1 = strlen(v0);
  size_t v2 = v1 + 24;
  uint64_t v3 = (char *)malloc_type_calloc(1uLL, v1 + 24, 0x85AA942BuLL);
  strlcpy(v3, v0, v1 + 24);
  if (v3[v1 - 1] != 47) {
    strlcat(v3, "/", v2);
  }
  strlcat(v3, "tmpsqlitearchiveXXXXXX", v2);
  free(v0);
  return v3;
}

uint64_t sub_1B0CDF3F8(uint64_t result, int a2, const char **a3)
{
  if (a2 <= 1)
  {
    __break(1u);
    return result;
  }
  uint64_t v4 = result;
  uint64_t v5 = *(unsigned int *)(result + 16);
  uint64_t v6 = *a3;
  if (*a3)
  {
    size_t v7 = strlen(*a3);
    if (v7)
    {
      size_t v8 = v7 + 1;
      int v9 = (char *)malloc_type_calloc(1uLL, v7 + 1, 0x209A181uLL);
    }
    else
    {
      int v9 = 0;
      size_t v8 = 1;
    }
    strlcpy(v9, v6, v8);
    uint64_t v10 = a3[1];
    if (v10) {
      goto LABEL_9;
    }
  }
  else
  {
    int v9 = 0;
    uint64_t v10 = a3[1];
    if (v10)
    {
LABEL_9:
      size_t v12 = strlen(v10);
      if (v12)
      {
        size_t v13 = v12 + 1;
        uint64_t v11 = (char *)malloc_type_calloc(1uLL, v12 + 1, 0x6FC8D12AuLL);
      }
      else
      {
        uint64_t v11 = 0;
        size_t v13 = 1;
      }
      strlcpy(v11, v10, v13);
      goto LABEL_13;
    }
  }
  uint64_t v11 = 0;
LABEL_13:
  unsigned int v14 = *(_DWORD *)(v4 + 20);
  if (v5 >= v14)
  {
    unsigned int v15 = v14 + 512;
    size_t v16 = 8 * (v14 + 512);
    *(void *)uint64_t v4 = malloc_type_realloc(*(void **)v4, v16, 0x10040436913F5uLL);
    *(void *)(v4 + 8) = malloc_type_realloc(*(void **)(v4 + 8), v16, 0x10040436913F5uLL);
    *(_DWORD *)(v4 + 20) = v15;
  }
  uint64_t v17 = 8 * v5;
  *(void *)(*(void *)v4 + v17) = v9;
  *(void *)(*(void *)(v4 + 8) + v17) = v11;
  ++*(_DWORD *)(v4 + 16);
  return 0;
}

void sub_1B0CDF564(uint64_t a1)
{
  int v2 = open(*(const char **)(a1 + 40), 0, 0);
  if (v2 < 0)
  {
    int v24 = (FILE *)*MEMORY[0x1E4F143C8];
    int v25 = __error();
    fprintf(v24, "open destination failed for %d\n", *v25);
  }
  else
  {
    int v3 = v2;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v30 = 0u;
    sub_1B0CDC54C(v2, (uint64_t)&v30);
    uint64_t v4 = DWORD2(v31);
    uint64_t v5 = malloc_type_valloc(0x100000uLL, 0x800D2BCBuLL);
    uint64_t v6 = malloc_type_valloc(0x100000uLL, 0x7DC0794EuLL);
    uint64_t v29 = 0;
    long long v27 = 0u;
    long long v28 = 0u;
    int v7 = off_1E9B52050(&v27, 1, v4);
    if (v7) {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "compression_stream_init failed for %d\n", v7);
    }
    ssize_t v8 = read(v3, v5, 0x100000uLL);
    int v26 = v5;
    if (v8 >= 1)
    {
      int v9 = (FILE **)MEMORY[0x1E4F143C8];
      do
      {
        *(void *)&long long v28 = v5;
        *((void *)&v28 + 1) = v8;
        do
        {
          *(void *)&long long v27 = v6;
          *((void *)&v27 + 1) = 0x100000;
          unsigned int v11 = off_1E9B52058(&v27, 0);
          if (v11 >= 2) {
            fprintf(*v9, "compression_stream_process alpha failed for %d\n", v11);
          }
          if (*((void *)&v27 + 1) != 0x100000)
          {
            uint64_t v12 = 0x100000 - *((void *)&v27 + 1);
            ssize_t v13 = write(*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v6, 0x100000 - *((void *)&v27 + 1));
            if (v13 != v12)
            {
              ssize_t v14 = v13;
              unsigned int v15 = *v9;
              size_t v16 = __error();
              fprintf(v15, "last write ended with return %ld expected %ld with errno %d\n", v14, v8, *v16);
            }
          }
          if (v11) {
            BOOL v10 = 1;
          }
          else {
            BOOL v10 = *((void *)&v28 + 1) == 0;
          }
        }
        while (!v10);
        uint64_t v5 = v26;
        ssize_t v8 = read(v3, v26, 0x100000uLL);
      }
      while (v8 > 0);
    }
    long long v28 = (unint64_t)v5;
    uint64_t v17 = (FILE **)MEMORY[0x1E4F143C8];
    do
    {
      *(void *)&long long v27 = v6;
      *((void *)&v27 + 1) = 0x100000;
      unsigned int v18 = off_1E9B52058(&v27, 1);
      if (v18 >= 2) {
        fprintf(*v17, "compression_stream_process bravo failed for %d\n", v18);
      }
      if (*((void *)&v27 + 1) != 0x100000)
      {
        uint64_t v19 = 0x100000 - *((void *)&v27 + 1);
        ssize_t v20 = write(*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), v6, 0x100000 - *((void *)&v27 + 1));
        if (v20 != v19)
        {
          ssize_t v21 = v20;
          int v22 = *v17;
          uint64_t v23 = __error();
          fprintf(v22, "last write ended with return %ld expected %ld with errno %d\n", v21, v8, *v23);
        }
      }
    }
    while (!v18);
    off_1E9B52060(&v27);
    close(*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = -1;
    close(v3);
    free(v26);
    free(v6);
  }
}

uint64_t sub_1B0CDF874()
{
  qword_1EB21C920 = (uint64_t)sqlite3_vfs_find(0);
  if (!qword_1EB21C920) {
    return 1;
  }
  dword_1EB21C904 = 40;
  LODWORD(result) = sqlite3_vfs_register((sqlite3_vfs *)&unk_1EB21C900, 0);
  if (result) {
    return result;
  }
  else {
    return 256;
  }
}

uint64_t sub_1B0CDF8CC(int a1, char *a2, uint64_t a3, __int16 a4)
{
  *(void *)(a3 + 32) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  if ((a4 & 0x100) == 0) {
    return 14;
  }
  sqlite3_int64 v6 = sqlite3_uri_int64(a2, "ptr", 0);
  *(void *)(a3 + 24) = v6;
  if (!v6) {
    return 14;
  }
  sqlite3_int64 v7 = sqlite3_uri_int64(a2, "sz", 0);
  *(void *)(a3 + 8) = v7;
  if (v7 < 0) {
    return 14;
  }
  sqlite3_int64 v8 = sqlite3_uri_int64(a2, "max", v7);
  *(void *)(a3 + 16) = v8;
  if (v8 < *(void *)(a3 + 8)) {
    return 14;
  }
  int v10 = sqlite3_uri_BOOLean(a2, "freeonclose", 0);
  uint64_t result = 0;
  *(_DWORD *)(a3 + 32) = v10;
  *(void *)a3 = &unk_1F09A4E48;
  return result;
}

uint64_t sub_1B0CDF990()
{
  return 2570;
}

uint64_t sub_1B0CDF998(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  *a4 = 0;
  return 0;
}

uint64_t sub_1B0CDF9A4(int a1, const char *a2, int a3, char *a4)
{
  return 0;
}

uint64_t sub_1B0CDF9DC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 72))();
}

uint64_t sub_1B0CDF9E8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 80))();
}

uint64_t sub_1B0CDF9F4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 88))();
}

uint64_t sub_1B0CDFA00(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 96))();
}

uint64_t sub_1B0CDFA0C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 104))();
}

uint64_t sub_1B0CDFA18(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 112))();
}

uint64_t sub_1B0CDFA24(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 120))();
}

uint64_t sub_1B0CDFA30(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 128))();
}

uint64_t sub_1B0CDFA3C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 136))();
}

uint64_t sub_1B0CDFA48(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 32)) {
    sqlite3_free(*(void **)(a1 + 24));
  }
  return 0;
}

uint64_t sub_1B0CDFA70(uint64_t a1, void *__dst, int a3, uint64_t a4)
{
  return 0;
}

uint64_t sub_1B0CDFAA0(void *a1, void *__src, int a3, uint64_t a4)
{
  size_t v7 = a3;
  uint64_t v8 = a3 + a4;
  uint64_t v9 = a1[1];
  if (v8 > v9)
  {
    if (v8 > a1[2]) {
      return 13;
    }
    if (a4 > v9) {
      bzero((void *)(a1[3] + v9), a4 - v9);
    }
    a1[1] = v8;
  }
  memcpy((void *)(a1[3] + a4), __src, v7);
  return 0;
}

uint64_t sub_1B0CDFB30(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[1];
  BOOL v5 = a2 <= v4;
  size_t v6 = a2 - v4;
  if (!v5)
  {
    if (a1[2] < a2) {
      return 13;
    }
    bzero((void *)(a1[3] + v4), v6);
  }
  uint64_t result = 0;
  a1[1] = a2;
  return result;
}

uint64_t sub_1B0CDFB88()
{
  return 0;
}

uint64_t sub_1B0CDFB90(uint64_t a1, void *a2)
{
  *a2 = *(void *)(a1 + 8);
  return 0;
}

uint64_t sub_1B0CDFBA0()
{
  return 0;
}

uint64_t sub_1B0CDFBA8()
{
  return 0;
}

uint64_t sub_1B0CDFBB0(uint64_t a1, _DWORD *a2)
{
  *a2 = 0;
  return 0;
}

uint64_t sub_1B0CDFBBC(uint64_t a1, int a2, char **a3)
{
  if (a2 != 12) {
    return 12;
  }
  uint64_t v4 = sqlite3_mprintf("mem(%p,%lld)", *(const void **)(a1 + 24), *(void *)(a1 + 8));
  uint64_t result = 0;
  *a3 = v4;
  return result;
}

uint64_t sub_1B0CDFC1C()
{
  return 1024;
}

uint64_t sub_1B0CDFC24()
{
  return 5633;
}

uint64_t sub_1B0CDFC2C()
{
  return 5386;
}

uint64_t sub_1B0CDFC34()
{
  return 5130;
}

uint64_t sub_1B0CDFC40()
{
  return 0;
}

uint64_t sub_1B0CDFC48(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  *a4 = *(void *)(a1 + 24) + a2;
  return 0;
}

uint64_t sub_1B0CDFC5C()
{
  return 0;
}

uint64_t sub_1B0CDFC64(sqlite3 *a1, const char *a2, uint64_t a3, void (*a4)(void, void), uint64_t a5)
{
  int v13 = 0;
  uint64_t v15 = 0;
  uint64_t result = sqlite3_exec(a1, "BEGIN", 0, 0, 0);
  unsigned int v14 = result;
  if (!result)
  {
    uint64_t v12 = a1;
    size_t v16 = a4;
    uint64_t v17 = a5;
    if (!a2) {
      a2 = "main";
    }
    a4("PRAGMA foreign_keys=OFF;\nBEGIN TRANSACTION;\n", a5);
    if (a3)
    {
      sub_1B0CDFDB8((uint64_t)&v12, "SELECT name, type, sql FROM \"%w\".sqlite_schema WHERE tbl_name=%Q COLLATE nocase AND type=='table'  AND sql NOT NULL", a2, a3);
      sub_1B0CDFE58((uint64_t)&v12, "SELECT sql FROM \"%w\".sqlite_schema WHERE sql NOT NULL  AND type IN ('index','trigger','view')  AND tbl_name=%Q COLLATE nocase", a2, a3);
    }
    else
    {
      sub_1B0CDFDB8((uint64_t)&v12, "SELECT name, type, sql FROM \"%w\".sqlite_schema WHERE sql NOT NULL AND type=='table' AND name!='sqlite_sequence'", a2);
      sub_1B0CDFDB8((uint64_t)&v12, "SELECT name, type, sql FROM \"%w\".sqlite_schema WHERE name=='sqlite_sequence'", a2);
      sub_1B0CDFE58((uint64_t)&v12, "SELECT sql FROM sqlite_schema WHERE sql NOT NULL AND type IN ('index','trigger','view')", 0);
    }
    if (v15) {
      a4("PRAGMA writable_schema=OFF;\n", a5);
    }
    if (v13) {
      unsigned int v11 = "ROLLBACK; -- due to errors\n";
    }
    else {
      unsigned int v11 = "COMMIT;\n";
    }
    a4(v11, a5);
    sqlite3_exec(a1, "COMMIT", 0, 0, 0);
    return v14;
  }
  return result;
}

void sub_1B0CDFDB8(uint64_t a1, char *a2, ...)
{
  va_start(va, a2);
  stat errmsg = 0;
  int v3 = sqlite3_vmprintf(a2, va);
  sqlite3_exec(*(sqlite3 **)a1, v3, (int (__cdecl *)(void *, int, char **, char **))sub_1B0CE0048, (void *)a1, &errmsg);
  sqlite3_free(v3);
  if (errmsg)
  {
    sub_1B0CE0CF8(a1, "/****** %s ******/\n", errmsg);
    sqlite3_free(errmsg);
    ++*(_DWORD *)(a1 + 8);
  }
}

void sub_1B0CDFE58(uint64_t a1, char *a2, ...)
{
  va_start(va, a2);
  stat ppStmt = 0;
  int v3 = sqlite3_vmprintf(a2, va);
  if (!v3)
  {
    *(_DWORD *)(a1 + 12) = 7;
    goto LABEL_25;
  }
  uint64_t v4 = v3;
  int v5 = sqlite3_prepare_v2(*(sqlite3 **)a1, v3, -1, &ppStmt, 0);
  sqlite3_free(v4);
  if (v5) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = ppStmt == 0;
  }
  if (v6)
  {
    size_t v7 = sqlite3_errmsg(*(sqlite3 **)a1);
    sub_1B0CE0CF8(a1, "/**** ERROR: (%d) %s *****/\n", v5, v7);
LABEL_25:
    ++*(_DWORD *)(a1 + 8);
    return;
  }
  int v8 = sqlite3_step(ppStmt);
  int v9 = sqlite3_column_count(ppStmt);
  if (v8 == 100)
  {
    int v10 = v9;
    do
    {
      uint64_t v12 = sqlite3_column_text(ppStmt, 0);
      (*(void (**)(const unsigned __int8 *, void))(a1 + 24))(v12, *(void *)(a1 + 32));
      if (v10 >= 2)
      {
        for (int i = 1; i != v10; ++i)
        {
          (*(void (**)(const char *, void))(a1 + 24))(",", *(void *)(a1 + 32));
          unsigned int v14 = *(void (**)(const unsigned __int8 *, void))(a1 + 24);
          uint64_t v15 = sqlite3_column_text(ppStmt, i);
          v14(v15, *(void *)(a1 + 32));
        }
      }
      if (v12) {
        size_t v16 = (char *)v12;
      }
      else {
        size_t v16 = &byte_1B0DE9952;
      }
      do
      {
        while (*v16++ == 45)
        {
          if (*v16 == 45)
          {
            unsigned int v11 = "\n;\n";
            goto LABEL_12;
          }
        }
      }
      while (*(v16 - 1));
      unsigned int v11 = ";\n";
LABEL_12:
      (*(void (**)(const char *, void))(a1 + 24))(v11, *(void *)(a1 + 32));
    }
    while (sqlite3_step(ppStmt) == 100);
  }
  int v17 = sqlite3_finalize(ppStmt);
  if (v17)
  {
    int v18 = v17;
    uint64_t v19 = sqlite3_errmsg(*(sqlite3 **)a1);
    sub_1B0CE0CF8(a1, "/**** ERROR: (%d) %s *****/\n", v18, v19);
    if (v18 != 11) {
      goto LABEL_25;
    }
  }
}

uint64_t sub_1B0CE0048(uint64_t a1, int a2, uint64_t a3)
{
  ppStmt[3] = *(sqlite3_stmt **)MEMORY[0x1E4F143B8];
  if (a2 != 3) {
    return 1;
  }
  uint64_t v4 = *(char **)a3;
  int v5 = *(const char **)(a3 + 8);
  BOOL v6 = *(const char **)(a3 + 16);
  if (!strcmp(*(const char **)a3, "sqlite_sequence"))
  {
    uint64_t v12 = "DELETE FROM sqlite_sequence;\n";
  }
  else if (sqlite3_strglob("sqlite_stat?", v4))
  {
    uint64_t result = strncmp(v4, "sqlite_", 7uLL);
    if (!result) {
      return result;
    }
    if (!strncmp(v6, "CREATE VIRTUAL TABLE", 0x14uLL))
    {
      if (!*(_DWORD *)(a1 + 16))
      {
        (*(void (**)(const char *, void))(a1 + 24))("PRAGMA writable_schema=ON;\n", *(void *)(a1 + 32));
        *(_DWORD *)(a1 + 16) = 1;
      }
      sub_1B0CE0CF8(a1, "INSERT INTO sqlite_schema(type,name,tbl_name,rootpage,sql)VALUES('table','%q','%q',0,'%q');",
        v4,
        v4,
        v6);
      return 0;
    }
    int v8 = sqlite3_strglob("CREATE TABLE ['\"]*", v6);
    int v10 = *(void (**)(const char *, uint64_t))(a1 + 24);
    uint64_t v9 = *(void *)(a1 + 32);
    if (v8)
    {
      unsigned int v11 = v6;
    }
    else
    {
      v10("CREATE TABLE IF NOT EXISTS ", v9);
      unsigned int v11 = v6 + 13;
      int v10 = *(void (**)(const char *, uint64_t))(a1 + 24);
      uint64_t v9 = *(void *)(a1 + 32);
    }
    v10(v11, v9);
    uint64_t v12 = ";\n";
  }
  else
  {
    uint64_t v12 = "ANALYZE sqlite_schema;\n";
  }
  (*(void (**)(const char *, void))(a1 + 24))(v12, *(void *)(a1 + 32));
  if (strcmp(v5, "table")) {
    return 0;
  }
  zSql = 0;
  uint64_t v101 = 0;
  int v98 = 0;
  uint64_t v99 = 0;
  ppStmt[0] = 0;
  int v13 = sqlite3_mprintf("PRAGMA table_info=%Q", v4);
  if (!v13) {
    return 0;
  }
  unsigned int v14 = v13;
  pStmt = 0;
  int v15 = sqlite3_prepare_v2(*(sqlite3 **)a1, v13, -1, ppStmt, 0);
  sqlite3_free(v14);
  if (v15) {
    return 0;
  }
  if (sqlite3_step(ppStmt[0]) == 100)
  {
    uint64_t v16 = 0;
    int v17 = 0;
    int v18 = 0;
    int v19 = 0;
    ssize_t v20 = 0;
    while (1)
    {
      if (v16 >= v19 - 2)
      {
        int v19 = v16 + 2 * v19 + 10;
        ssize_t v21 = (const char **)sqlite3_realloc64(v20, 8 * v19);
        if (!v21) {
          break;
        }
        char *v21 = 0;
        ssize_t v20 = v21;
      }
      int v22 = sqlite3_column_text(ppStmt[0], 1);
      uint64_t v23 = sqlite3_mprintf("%s", (const char *)v22);
      v20[v16 + 1] = v23;
      if (!v23) {
        break;
      }
      if (sqlite3_column_int(ppStmt[0], 5))
      {
        if (v18 || (int v24 = sqlite3_column_text(ppStmt[0], 2), sqlite3_stricmp((const char *)v24, "INTEGER")))
        {
          int v17 = 0;
          ++v18;
        }
        else
        {
          int v18 = 1;
          int v17 = 1;
        }
      }
      ++v16;
      if (sqlite3_step(ppStmt[0]) != 100) {
        goto LABEL_34;
      }
    }
LABEL_41:
    sqlite3_finalize(ppStmt[0]);
    uint64_t v33 = (char *)v20[1];
    if (v33)
    {
      unint64_t v34 = (void **)(v20 + 2);
      do
      {
        sqlite3_free(v33);
        unint64_t v35 = (char *)*v34++;
        uint64_t v33 = v35;
      }
      while (v35);
    }
    sqlite3_free(v20);
    ++*(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 12) = 7;
    return 0;
  }
  ssize_t v20 = 0;
  LODWORD(v16) = 0;
  int v17 = 0;
LABEL_34:
  sqlite3_finalize(ppStmt[0]);
  ppStmt[0] = 0;
  uint64_t v25 = (v16 + 1);
  v20[v25] = 0;
  if (!v17) {
    goto LABEL_46;
  }
  int v26 = sqlite3_mprintf("SELECT 1 FROM pragma_index_list(%Q) WHERE origin='pk'", v4);
  if (!v26) {
    goto LABEL_41;
  }
  long long v27 = v26;
  int v28 = sqlite3_prepare_v2(*(sqlite3 **)a1, v26, -1, ppStmt, 0);
  sqlite3_free(v27);
  if (v28)
  {
    uint64_t v29 = (char *)v20[1];
    if (v29)
    {
      long long v30 = (void **)(v20 + 2);
      do
      {
        sqlite3_free(v29);
        long long v31 = (char *)*v30++;
        uint64_t v29 = v31;
      }
      while (v31);
    }
    long long v32 = (char *)v20;
    goto LABEL_158;
  }
  int v36 = sqlite3_step(ppStmt[0]);
  sqlite3_finalize(ppStmt[0]);
  ppStmt[0] = 0;
  if (v36 == 100)
  {
LABEL_46:
    if (v16)
    {
      uint64_t v37 = v25 - 1;
      unint64_t v38 = v20 + 1;
      uint64_t v39 = v25 - 1;
      while (sqlite3_stricmp("rowid", *v38))
      {
        ++v38;
        if (!--v39) {
          goto LABEL_50;
        }
      }
      ssize_t v93 = v20 + 1;
      uint64_t v40 = 1;
      uint64_t v94 = v37;
      while (sqlite3_stricmp("_rowid_", *v93))
      {
        ++v93;
        if (!--v94) {
          goto LABEL_51;
        }
      }
      uint64_t v95 = v20 + 1;
      uint64_t v40 = 2;
      while (sqlite3_stricmp("oid", *v95))
      {
        ++v95;
        if (!--v37) {
          goto LABEL_51;
        }
      }
    }
    else
    {
LABEL_50:
      uint64_t v40 = 0;
LABEL_51:
      uint64_t v41 = off_1E5FEEDE8[v40];
      if (!sqlite3_table_column_metadata(*(sqlite3 **)a1, 0, v4, v41, 0, 0, 0, 0, 0)) {
        *ssize_t v20 = v41;
      }
    }
  }
  int v98 = 0;
  uint64_t v99 = 0;
  sub_1B0CE0D4C((uint64_t)&v98, "INSERT INTO ", 0);
  unsigned int v42 = sub_1B0CE1018(v4);
  sub_1B0CE0D4C((uint64_t)&v98, v4, v42);
  if (*v20)
  {
    sub_1B0CE0D4C((uint64_t)&v98, "(", 0);
    sub_1B0CE0D4C((uint64_t)&v98, (char *)*v20, 0);
    if (v20[1])
    {
      uint64_t v43 = v20 + 2;
      do
      {
        sub_1B0CE0D4C((uint64_t)&v98, ",", 0);
        int v44 = (char *)*(v43 - 1);
        unsigned int v45 = sub_1B0CE1018(v44);
        sub_1B0CE0D4C((uint64_t)&v98, v44, v45);
      }
      while (*v43++);
    }
    sub_1B0CE0D4C((uint64_t)&v98, ")", 0);
  }
  sub_1B0CE0D4C((uint64_t)&v98, " VALUES(", 0);
  zSql = 0;
  uint64_t v101 = 0;
  sub_1B0CE0D4C((uint64_t)&zSql, "SELECT ", 0);
  if (*v20)
  {
    sub_1B0CE0D4C((uint64_t)&zSql, (char *)*v20, 0);
    sub_1B0CE0D4C((uint64_t)&zSql, ",", 0);
  }
  int v47 = (char *)v20[1];
  if (v47)
  {
    uint64_t v48 = 2;
    do
    {
      uint64_t v49 = v48;
      unsigned int v50 = sub_1B0CE1018(v47);
      sub_1B0CE0D4C((uint64_t)&zSql, v47, v50);
      if (!v20[v49]) {
        break;
      }
      sub_1B0CE0D4C((uint64_t)&zSql, ",", 0);
      int v47 = (char *)v20[v49];
      uint64_t v48 = v49 + 1;
    }
    while (v47);
    uint64_t v51 = (char *)v20[1];
    if (*v20) {
      int v52 = 0;
    }
    else {
      int v52 = -1;
    }
    int v53 = v52 + v49;
    if (v51)
    {
      int v54 = (void **)(v20 + 2);
      do
      {
        sqlite3_free(v51);
        uint64_t v55 = (char *)*v54++;
        uint64_t v51 = v55;
      }
      while (v55);
    }
  }
  else
  {
    int v53 = *v20 != 0;
  }
  sqlite3_free(v20);
  sub_1B0CE0D4C((uint64_t)&zSql, " FROM ", 0);
  unsigned int v56 = sub_1B0CE1018(v4);
  sub_1B0CE0D4C((uint64_t)&zSql, v4, v56);
  int v57 = sqlite3_prepare_v2(*(sqlite3 **)a1, zSql, -1, &pStmt, 0);
  if (v57)
  {
    int v58 = *(_DWORD *)(a1 + 12);
    ++*(_DWORD *)(a1 + 8);
    if (!v58) {
      *(_DWORD *)(a1 + 12) = v57;
    }
    goto LABEL_157;
  }
  if (sqlite3_step(pStmt) != 100) {
    goto LABEL_157;
  }
  uint64_t v96 = a1;
  int v97 = v53;
  while (2)
  {
    (*(void (**)(void *, void))(a1 + 24))(v98, *(void *)(a1 + 32));
    if (v53 < 1) {
      goto LABEL_77;
    }
    int v59 = 0;
    while (2)
    {
      if (v59) {
        (*(void (**)(const char *, void))(a1 + 24))(",", *(void *)(a1 + 32));
      }
      switch(sqlite3_column_type(pStmt, v59))
      {
        case 1:
          sqlite3_int64 v60 = sqlite3_column_int64(pStmt, v59);
          sub_1B0CE0CF8(a1, "%lld", v60);
          goto LABEL_81;
        case 2:
          double v61 = sqlite3_column_double(pStmt, v59);
          if (v61 == -INFINITY)
          {
            (*(void (**)(const char *, void))(a1 + 24))("-1e999", *(void *)(a1 + 32));
          }
          else if (v61 == INFINITY)
          {
            (*(void (**)(const char *, void))(a1 + 24))("1e999", *(void *)(a1 + 32));
          }
          else
          {
            double v78 = -v61;
            if (v61 >= 0.0) {
              double v78 = v61;
            }
            if (v78 == 0.0)
            {
              unint64_t v80 = 0;
              LODWORD(v79) = 0;
            }
            else
            {
              uint64_t v79 = *(uint64_t *)&v78 >> 52;
              unint64_t v80 = *(void *)&v78 & 0xFFFFFFFFFFFFFLL | 0x10000000000000;
              if ((LOBYTE(v78) & 1) == 0 && (int)v79 <= 1074)
              {
                do
                {
                  unint64_t v81 = v80;
                  int v82 = v79;
                  v80 >>= 1;
                  LODWORD(v79) = v79 + 1;
                }
                while (v82 <= 1073 && v81 >= 2 && (v81 & 2) == 0);
              }
              if (v61 < 0.0) {
                unint64_t v80 = -(uint64_t)v80;
              }
            }
            size_t v92 = sqlite3_mprintf("ieee754(%lld,%d)", v80, (int)v79 - 1075);
            sub_1B0CE0CF8(a1, "%s", v92);
            sqlite3_free(v92);
          }
          goto LABEL_81;
        case 3:
          int v62 = sqlite3_column_text(pStmt, v59);
          ssize_t v63 = (char *)v62;
          uint64_t v64 = v62;
          while (2)
          {
            int v65 = *v64++;
            switch(v65)
            {
              case 0:
                sub_1B0CE0CF8(a1, "'%s'", (const char *)v62);
                goto LABEL_81;
              case 10:
              case 13:
              case 39:
                int v66 = 0;
                int v67 = 0;
                ssize_t v68 = v62;
                break;
              default:
                continue;
            }
            break;
          }
          break;
        case 4:
          LODWORD(v75) = sqlite3_column_bytes(pStmt, v59);
          ssize_t v76 = (char *)sqlite3_column_blob(pStmt, v59);
          (*(void (**)(const char *, void))(a1 + 24))("x'", *(void *)(a1 + 32));
          if ((int)v75 >= 1)
          {
            uint64_t v75 = v75;
            do
            {
              LOBYTE(ppStmt[0]) = a0123456789abcd[(unint64_t)*v76 >> 4];
              char v77 = *v76++;
              *(_WORD *)((char *)ppStmt + 1) = a0123456789abcd[v77 & 0xF];
              (*(void (**)(sqlite3_stmt **, void))(a1 + 24))(ppStmt, *(void *)(a1 + 32));
              --v75;
            }
            while (v75);
          }
          (*(void (**)(const char *, void))(a1 + 24))("'", *(void *)(a1 + 32));
          goto LABEL_81;
        case 5:
          (*(void (**)(const char *, void))(a1 + 24))("NULL", *(void *)(a1 + 32));
          goto LABEL_81;
        default:
          goto LABEL_81;
      }
      while (1)
      {
        int v70 = *v68++;
        int v69 = v70;
        if (v70 != 10) {
          break;
        }
        ++v66;
LABEL_92:
        if (v69 == 13) {
          ++v67;
        }
      }
      if (v69) {
        goto LABEL_92;
      }
      if (v66)
      {
        (*(void (**)(const char *, void))(a1 + 24))("replace(", *(void *)(a1 + 32));
        if (strstr(v63, "\\n"))
        {
          int v71 = "\\012";
          if (strstr(v63, "\\012"))
          {
            int v72 = 0;
            do
            {
              int v73 = v72 + 1;
              int v71 = (const char *)ppStmt;
              sqlite3_snprintf(20, (char *)ppStmt, "(%s%u)", "\\n", v72);
              uint64_t v74 = strstr(v63, (const char *)ppStmt);
              int v72 = v73;
            }
            while (v74);
          }
        }
        else
        {
          int v71 = "\\n";
        }
      }
      else
      {
        int v71 = 0;
      }
      if (v67)
      {
        (*(void (**)(const char *, void))(a1 + 24))("replace(", *(void *)(a1 + 32));
        if (strstr(v63, "\\r"))
        {
          int v83 = "\\015";
          if (strstr(v63, "\\015"))
          {
            int v84 = 0;
            do
            {
              int v85 = v84 + 1;
              int v83 = __s2;
              sqlite3_snprintf(20, __s2, "(%s%u)", "\\r", v84);
              int v86 = strstr(v63, __s2);
              int v84 = v85;
            }
            while (v86);
            a1 = v96;
          }
        }
        else
        {
          int v83 = "\\r";
        }
      }
      else
      {
        int v83 = 0;
      }
      (*(void (**)(const char *, void))(a1 + 24))("'", *(void *)(a1 + 32));
      while (1)
      {
        unsigned int v88 = *v63;
        if (!*v63) {
          break;
        }
        while (1)
        {
          uint64_t v89 = 0;
          while (v88 > 0x27 || ((1 << v88) & 0x8000002401) == 0)
          {
            ssize_t v90 = &v63[v89++];
            unsigned int v88 = v90[1];
          }
          if (v88 == 39) {
            unsigned int v91 = v89 + 1;
          }
          else {
            unsigned int v91 = v89;
          }
          if (v91)
          {
            sub_1B0CE0CF8(a1, "%.*s", v91, v63);
            v63 += v91;
          }
          if (v88 != 39) {
            break;
          }
          (*(void (**)(const char *, void))(a1 + 24))("'", *(void *)(a1 + 32));
          unsigned int v88 = *v63;
          if (!*v63) {
            goto LABEL_150;
          }
        }
        if (!v88) {
          break;
        }
        ++v63;
        if (v88 == 10) {
          size_t v87 = (void *)v71;
        }
        else {
          size_t v87 = v83;
        }
        (*(void (**)(void *, void))(a1 + 24))(v87, *(void *)(a1 + 32));
      }
LABEL_150:
      (*(void (**)(const char *, void))(a1 + 24))("'", *(void *)(a1 + 32));
      if (v67) {
        sub_1B0CE0CF8(a1, ",'%s',char(13))", v83);
      }
      int v53 = v97;
      if (v66) {
        sub_1B0CE0CF8(a1, ",'%s',char(10))", v71);
      }
LABEL_81:
      if (++v59 != v53) {
        continue;
      }
      break;
    }
LABEL_77:
    (*(void (**)(const char *, void))(a1 + 24))(");\n", *(void *)(a1 + 32));
    if (sqlite3_step(pStmt) == 100) {
      continue;
    }
    break;
  }
LABEL_157:
  sqlite3_finalize(pStmt);
  sqlite3_free(v98);
  int v98 = 0;
  uint64_t v99 = 0;
  long long v32 = zSql;
LABEL_158:
  sqlite3_free(v32);
  return 0;
}

void sub_1B0CE0CF8(uint64_t a1, char *a2, ...)
{
  va_start(va, a2);
  int v3 = sqlite3_vmprintf(a2, va);
  (*(void (**)(char *, void))(a1 + 24))(v3, *(void *)(a1 + 32));
  sqlite3_free(v3);
}

void sub_1B0CE0D4C(uint64_t a1, char *__s, unsigned int a3)
{
  uint64_t v4 = __s;
  int v6 = strlen(__s);
  int v7 = v6;
  uint64_t v8 = v6 & 0x3FFFFFFF;
  int v9 = *(_DWORD *)(a1 + 8);
  int v10 = (v6 & 0x3FFFFFFF) + v9;
  if (!a3)
  {
    unsigned int v11 = v10 + 1;
    goto LABEL_19;
  }
  unsigned int v11 = v10 + 3;
  if (!v8) {
    goto LABEL_19;
  }
  unint64_t v12 = v6 & 0x3FFFFFFF;
  if (v12 < 8)
  {
    unint64_t v13 = 0;
    goto LABEL_15;
  }
  if (v12 < 0x20)
  {
    unint64_t v13 = 0;
LABEL_12:
    long long v32 = (int8x8_t *)&v4[v13];
    unint64_t v33 = v13 + (v6 & 7);
    unint64_t v13 = v12 - (v6 & 7);
    int32x4_t v34 = 0uLL;
    int32x4_t v35 = (int32x4_t)v11;
    int8x8_t v36 = vdup_n_s8(a3);
    unint64_t v37 = v33 - v12;
    v38.i64[0] = 0x100000001;
    v38.i64[1] = 0x100000001;
    do
    {
      int8x8_t v39 = *v32++;
      uint16x8_t v40 = vmovl_u8((uint8x8_t)vceq_s8(v39, v36));
      int32x4_t v34 = vaddq_s32(v34, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v40), v38));
      int32x4_t v35 = vaddq_s32(v35, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v40.i8), v38));
      v37 += 8;
    }
    while (v37);
    unsigned int v11 = vaddvq_s32(vaddq_s32(v35, v34));
    if ((v6 & 7) == 0) {
      goto LABEL_19;
    }
    goto LABEL_15;
  }
  int32x4_t v14 = 0uLL;
  int32x4_t v15 = (int32x4_t)v11;
  int8x16_t v16 = vdupq_n_s8(a3);
  unint64_t v13 = v12 - (v6 & 0x1F);
  v17.i64[0] = 0x100000001;
  v17.i64[1] = 0x100000001;
  int v18 = (int8x16_t *)(v4 + 16);
  unint64_t v19 = v13;
  int32x4_t v20 = 0uLL;
  int32x4_t v21 = 0uLL;
  int32x4_t v22 = 0uLL;
  int32x4_t v23 = 0uLL;
  int32x4_t v24 = 0uLL;
  int32x4_t v25 = 0uLL;
  do
  {
    uint8x16_t v26 = (uint8x16_t)vceqq_s8(v18[-1], v16);
    uint16x8_t v27 = vmovl_u8(*(uint8x8_t *)v26.i8);
    uint16x8_t v28 = vmovl_high_u8(v26);
    uint8x16_t v29 = (uint8x16_t)vceqq_s8(*v18, v16);
    uint16x8_t v30 = vmovl_u8(*(uint8x8_t *)v29.i8);
    uint16x8_t v31 = vmovl_high_u8(v29);
    int32x4_t v21 = vaddq_s32(v21, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v28), v17));
    int32x4_t v20 = vaddq_s32(v20, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v28.i8), v17));
    int32x4_t v14 = vaddq_s32(v14, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v27), v17));
    int32x4_t v15 = vaddq_s32(v15, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v27.i8), v17));
    int32x4_t v25 = vaddq_s32(v25, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v31), v17));
    int32x4_t v24 = vaddq_s32(v24, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v31.i8), v17));
    int32x4_t v23 = vaddq_s32(v23, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v30), v17));
    int32x4_t v22 = vaddq_s32(v22, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v30.i8), v17));
    v18 += 2;
    v19 -= 32;
  }
  while (v19);
  unsigned int v11 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v22, v15), vaddq_s32(v24, v20)), vaddq_s32(vaddq_s32(v23, v14), vaddq_s32(v25, v21))));
  if ((v6 & 0x1F) == 0) {
    goto LABEL_19;
  }
  if ((v6 & 0x1Fu) >= 8uLL) {
    goto LABEL_12;
  }
LABEL_15:
  uint64_t v41 = &v4[v13];
  unint64_t v42 = v12 - v13;
  do
  {
    int v43 = *v41++;
    if (v43 == a3) {
      ++v11;
    }
    --v42;
  }
  while (v42);
LABEL_19:
  int v44 = v11 + v9;
  int v45 = *(_DWORD *)(a1 + 12);
  if (v44 >= v45)
  {
    int v46 = v11 + 2 * v45 + 20;
    *(_DWORD *)(a1 + 12) = v46;
    int v47 = sqlite3_realloc(*(void **)a1, v46);
    if (!v47)
    {
      sqlite3_free(*(void **)a1);
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      return;
    }
    *(void *)a1 = v47;
  }
  uint64_t v48 = (char *)(*(void *)a1 + *(int *)(a1 + 8));
  if (a3)
  {
    *uint64_t v48 = a3;
    uint64_t v49 = v48 + 1;
    if (v8)
    {
      uint64_t v50 = v7 & 0x3FFFFFFF;
      do
      {
        while (1)
        {
          *uint64_t v49 = *v4;
          int v51 = *v4++;
          if (v51 != a3) {
            break;
          }
          v49[1] = a3;
          v49 += 2;
          if (!--v50) {
            goto LABEL_28;
          }
        }
        ++v49;
        --v50;
      }
      while (v50);
    }
LABEL_28:
    *uint64_t v49 = a3;
    *(_DWORD *)(a1 + 8) = v49 + 1 - *(_DWORD *)a1;
    v49[1] = 0;
  }
  else
  {
    memcpy(v48, v4, v7 & 0x3FFFFFFF);
    uint64_t v52 = *(int *)(a1 + 8) + v8;
    *(_DWORD *)(a1 + 8) = v52;
    *(unsigned char *)(*(void *)a1 + v52) = 0;
  }
}

uint64_t sub_1B0CE1018(const char *a1)
{
  uint64_t v2 = *(unsigned __int8 *)a1;
  if (*a1 < 0) {
    int v3 = __maskrune(*(unsigned __int8 *)a1, 0x100uLL);
  }
  else {
    int v3 = *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v2 + 60) & 0x100;
  }
  if (v2 != 95 && v3 == 0) {
    return 34;
  }
  unsigned int v5 = *(unsigned __int8 *)a1;
  if (*a1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = MEMORY[0x1E4F14390];
    while (1)
    {
      if ((v5 & 0x80) != 0)
      {
        int v8 = __maskrune(v5, 0x500uLL);
        if (v5 != 95) {
          goto LABEL_11;
        }
      }
      else
      {
        int v8 = *(_DWORD *)(v7 + 4 * v5 + 60) & 0x500;
        if (v5 != 95)
        {
LABEL_11:
          if (!v8) {
            return 34;
          }
        }
      }
      int v9 = v6 + 1;
      unsigned int v5 = a1[++v6];
      if (!v5) {
        goto LABEL_18;
      }
    }
  }
  int v9 = 0;
LABEL_18:
  if (sqlite3_keyword_check(a1, v9)) {
    return 34;
  }
  else {
    return 0;
  }
}

uint64_t sub_1B0CE1108(sqlite3 *a1)
{
  uint64_t result = sqlite3_create_function(a1, "ieee754", 1, 2097153, &unk_1F09A4EEC, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))sub_1B0CE12F8, 0, 0);
  if (!result)
  {
    uint64_t result = sqlite3_create_function(a1, "ieee754", 2, 2097153, &unk_1F09A4F04, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))sub_1B0CE12F8, 0, 0);
    if (!result)
    {
      uint64_t result = sqlite3_create_function(a1, "ieee754_mantissa", 1, 2097153, &unk_1F09A4F1C, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))sub_1B0CE12F8, 0, 0);
      if (!result)
      {
        uint64_t result = sqlite3_create_function(a1, "ieee754_exponent", 1, 2097153, &unk_1F09A4F34, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))sub_1B0CE12F8, 0, 0);
        if (!result)
        {
          uint64_t result = sqlite3_create_function(a1, "ieee754_to_blob", 1, 2097153, &unk_1F09A4F4C, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))sub_1B0CE16D0, 0, 0);
          if (!result)
          {
            uint64_t result = sqlite3_create_function(a1, "ieee754_from_blob", 1, 2097153, &unk_1F09A4F64, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))sub_1B0CE1770, 0, 0);
            if (!result)
            {
              return sqlite3_create_function(a1, "ieee754_inc", 2, 2097153, &unk_1F09A4F7C, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))sub_1B0CE1828, 0, 0);
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_1B0CE12F8(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (a2 == 1)
  {
    if (sqlite3_value_type(*a3) == 5)
    {
      sqlite3_result_null(a1);
    }
    else
    {
      if (sqlite3_value_type(*a3) == 4 && sqlite3_value_bytes(*a3) == 8)
      {
        int v10 = (unsigned __int8 *)sqlite3_value_blob(*a3);
        *(void *)&double v11 = v10[7] | ((((unint64_t)v10[5] << 8) | ((((unint64_t)((v10[1] << 8) | (*v10 << 16) | v10[2]) << 16) | ((unint64_t)v10[3] << 8) | v10[4]) << 16) | v10[6]) << 8);
      }
      else
      {
        double v11 = sqlite3_value_double(*a3);
      }
      double v13 = -v11;
      if (v11 >= 0.0) {
        double v13 = v11;
      }
      if (v13 == 0.0)
      {
        sqlite3_int64 v20 = 0;
        LODWORD(v14) = 0;
      }
      else
      {
        uint64_t v14 = *(uint64_t *)&v13 >> 52;
        if ((*(uint64_t *)&v13 >> 52)) {
          unint64_t v15 = *(void *)&v13 & 0xFFFFFFFFFFFFFLL | 0x10000000000000;
        }
        else {
          unint64_t v15 = 2 * (*(void *)&v13 & 0xFFFFFFFFFFFFFLL);
        }
        if ((int)v14 <= 1074 && v15 != 0 && (v15 & 1) == 0)
        {
          do
          {
            unint64_t v18 = v15;
            int v19 = v14;
            v15 >>= 1;
            LODWORD(v14) = v14 + 1;
          }
          while (v19 <= 1073 && v18 >= 2 && (v18 & 2) == 0);
        }
        if (v11 >= 0.0) {
          sqlite3_int64 v20 = v15;
        }
        else {
          sqlite3_int64 v20 = -(uint64_t)v15;
        }
      }
      int v21 = *(_DWORD *)sqlite3_user_data(a1);
      switch(v21)
      {
        case 2:
          sqlite3_result_int(a1, v14 - 1075);
          break;
        case 1:
          sqlite3_result_int64(a1, v20);
          break;
        case 0:
          sqlite3_snprintf(100, v30, "ieee754(%lld,%d)", v20, v14 - 1075);
          sqlite3_result_text(a1, v30, -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
          break;
      }
    }
    return;
  }
  sqlite3_int64 v5 = sqlite3_value_int64(*a3);
  sqlite3_int64 v6 = sqlite3_value_int64(a3[1]);
  uint64_t v7 = -10000;
  if (v6 > -10000) {
    uint64_t v7 = v6;
  }
  if (v7 >= 10000) {
    uint64_t v7 = 10000;
  }
  if (v5 < 0)
  {
    unint64_t v8 = -v5;
    goto LABEL_18;
  }
  if (v5)
  {
    unint64_t v8 = v5;
    if (!((unint64_t)v5 >> 53)) {
      goto LABEL_19;
    }
    goto LABEL_48;
  }
  unint64_t v8 = 0;
  if ((unint64_t)(v7 + 999) > 0x7CE)
  {
LABEL_18:
    if (!(v8 >> 53))
    {
LABEL_19:
      unint64_t v12 = v8;
LABEL_49:
      if (v12 - 1 <= 0xFFFFFFFFFFFFELL)
      {
        do
        {
          v12 *= 2;
          --v7;
        }
        while (v12 - 1 < 0xFFFFFFFFFFFFFLL);
      }
      uint64_t v23 = 972;
      if (v7 < 972) {
        uint64_t v23 = v7;
      }
      uint64_t v24 = (v23 << 52) + 0x4330000000000000;
      unint64_t v25 = v12 >> (-50 - v7);
      if ((unint64_t)v7 < 0xFFFFFFFFFFFFFB8FLL) {
        unint64_t v25 = 0;
      }
      BOOL v26 = v7 <= -1075;
      if (v7 <= -1075) {
        unint64_t v27 = v25;
      }
      else {
        unint64_t v27 = v12;
      }
      if (v26) {
        uint64_t v28 = 0;
      }
      else {
        uint64_t v28 = v24;
      }
      uint64_t v29 = v27 & 0xFFFFFFFFFFFFFLL | v28;
      if (v5 < 0) {
        v29 |= 0x8000000000000000;
      }
      double v9 = *(double *)&v29;
      goto LABEL_64;
    }
    do
    {
LABEL_48:
      unint64_t v12 = v8 >> 1;
      ++v7;
      unint64_t v22 = v8 >> 54;
      v8 >>= 1;
    }
    while (v22);
    goto LABEL_49;
  }
  double v9 = 0.0;
LABEL_64:

  sqlite3_result_double(a1, v9);
}

void sub_1B0CE16D0(sqlite3_context *a1, uint64_t a2, sqlite3_value **a3)
{
  v5[1] = *MEMORY[0x1E4F143B8];
  if (sqlite3_value_type(*a3) == 2 || sqlite3_value_type(*a3) == 1)
  {
    v5[0] = bswap64(COERCE_UNSIGNED_INT64(sqlite3_value_double(*a3)));
    sqlite3_result_blob(a1, v5, 8, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  }
}

void sub_1B0CE1770(sqlite3_context *a1, uint64_t a2, sqlite3_value **a3)
{
  if (sqlite3_value_type(*a3) == 4 && sqlite3_value_bytes(*a3) == 8)
  {
    sqlite3_int64 v5 = (unsigned __int8 *)sqlite3_value_blob(*a3);
    *(void *)&double v6 = v5[7] | ((((unint64_t)v5[5] << 8) | ((((unint64_t)((v5[1] << 8) | (*v5 << 16) | v5[2]) << 16) | ((unint64_t)v5[3] << 8) | v5[4]) << 16) | v5[6]) << 8);
    sqlite3_result_double(a1, v6);
  }
}

void sub_1B0CE1828(sqlite3_context *a1, uint64_t a2, sqlite3_value **a3)
{
  double v5 = sqlite3_value_double(*a3);
  *(void *)&double v6 = sqlite3_value_int64(a3[1]) + *(void *)&v5;

  sqlite3_result_double(a1, v6);
}

int sqlite3_status64(int op, sqlite3_int64 *pCurrent, sqlite3_int64 *pHighwater, int resetFlag)
{
  if (op >= 0xA)
  {
    int v4 = 24423;
LABEL_16:
    return sub_1B0CE1978(v4);
  }
  if (!pCurrent || !pHighwater)
  {
    int v4 = 24426;
    goto LABEL_16;
  }
  uint64_t v8 = op;
  if ((0x379uLL >> op)) {
    double v9 = &xmmword_1EB2201B0;
  }
  else {
    double v9 = (long long *)((char *)&xmmword_1E9B521E0 + 8);
  }
  uint64_t v10 = *(void *)v9;
  if (*(void *)v9) {
    xmmword_1EB21CA40(v10);
  }
  double v11 = &qword_1EB220108[v8];
  sqlite3_int64 v12 = *v11;
  *pCurrent = *v11;
  sqlite3_int64 v14 = v11[10];
  double v13 = v11 + 10;
  *pHighwater = v14;
  if (resetFlag) {
    *double v13 = v12;
  }
  if (v10) {
    xmmword_1EB21CA50(v10);
  }
  return 0;
}

uint64_t sub_1B0CE1978(int a1)
{
  return sub_1B0D06FEC(21, a1, "misuse");
}

void sqlite3_mutex_enter(sqlite3_mutex *a1)
{
  if (a1) {
    xmmword_1EB21CA40();
  }
}

void sqlite3_mutex_leave(sqlite3_mutex *a1)
{
  if (a1) {
    xmmword_1EB21CA50();
  }
}

int sqlite3_status(int op, int *pCurrent, int *pHighwater, int resetFlag)
{
  if (!pCurrent || !pHighwater)
  {
    int v5 = 24443;
    goto LABEL_6;
  }
  if (op > 9)
  {
    int v5 = 24423;
LABEL_6:
    return sub_1B0CE1978(v5);
  }
  uint64_t v9 = op;
  if ((0x379uLL >> op)) {
    uint64_t v10 = &xmmword_1EB2201B0;
  }
  else {
    uint64_t v10 = (long long *)((char *)&xmmword_1E9B521E0 + 8);
  }
  uint64_t v11 = *(void *)v10;
  if (*(void *)v10) {
    xmmword_1EB21CA40(v11);
  }
  uint64_t v12 = qword_1EB220108[v9];
  double v13 = &qword_1EB220108[v9 + 10];
  uint64_t v14 = *v13;
  if (resetFlag) {
    *double v13 = v12;
  }
  if (v11) {
    xmmword_1EB21CA50(v11);
  }
  *pCurrent = v12;
  *pHighwater = v14;
  return 0;
}

int sqlite3_db_status(sqlite3 *a1, int op, int *pCur, int *pHiwtr, int resetFlg)
{
  if (!a1)
  {
    uint64_t v7 = "NULL";
    goto LABEL_15;
  }
  int v6 = *((unsigned __int8 *)a1 + 113);
  if (v6 == 186)
  {
LABEL_5:
    uint64_t v7 = "unopened";
LABEL_15:
    sqlite3_log(21, "API call with %s database connection pointer", v7);
    goto LABEL_16;
  }
  if (v6 != 118)
  {
    if (v6 != 109)
    {
      uint64_t v7 = "invalid";
      goto LABEL_15;
    }
    goto LABEL_5;
  }
  if (!pCur || !pHiwtr)
  {
LABEL_16:
    return sub_1B0CE1978(24492);
  }
  uint64_t v12 = *((void *)a1 + 3);
  if (v12) {
    xmmword_1EB21CA40(v12);
  }
  switch(op)
  {
    case 0:
      uint64_t v24 = *((void *)a1 + 58);
      if (v24)
      {
        int v25 = 0;
        BOOL v26 = (void *)*((void *)a1 + 58);
        do
        {
          BOOL v26 = (void *)*v26;
          ++v25;
        }
        while (v26);
      }
      else
      {
        int v25 = 0;
      }
      uint64_t v49 = (void *)*((void *)a1 + 59);
      if (v49)
      {
        int v50 = 0;
        int v51 = (void *)*((void *)a1 + 59);
        do
        {
          int v51 = (void *)*v51;
          --v50;
        }
        while (v51);
      }
      else
      {
        int v50 = 0;
      }
      uint64_t v53 = *((void *)a1 + 60);
      if (v53)
      {
        int v54 = 0;
        uint64_t v55 = (void *)*((void *)a1 + 60);
        do
        {
          uint64_t v55 = (void *)*v55;
          ++v54;
        }
        while (v55);
      }
      else
      {
        int v54 = 0;
      }
      int v56 = v54 + v25;
      int v57 = (void *)*((void *)a1 + 61);
      if (v57)
      {
        int v58 = 0;
        int v59 = (void *)*((void *)a1 + 61);
        do
        {
          int v59 = (void *)*v59;
          --v58;
        }
        while (v59);
      }
      else
      {
        int v58 = 0;
      }
      *pHiwtr = *((_DWORD *)a1 + 111) - v56;
      *pCur = v50 - v56 + v58 + *((_DWORD *)a1 + 111);
      if (resetFlg)
      {
        if (v49)
        {
          sqlite3_int64 v60 = v49;
          do
          {
            double v61 = v60;
            sqlite3_int64 v60 = (void *)*v60;
          }
          while (v60);
          *double v61 = v24;
          *((void *)a1 + 58) = v49;
          *((void *)a1 + 59) = 0;
        }
        if (v57)
        {
          int v62 = v57;
          do
          {
            ssize_t v63 = v62;
            int v62 = (void *)*v62;
          }
          while (v62);
          resetFlg = 0;
          *ssize_t v63 = v53;
          *((void *)a1 + 60) = v57;
          *((void *)a1 + 61) = 0;
        }
        else
        {
          resetFlg = 0;
        }
      }
      break;
    case 1:
    case 11:
      if (!*((unsigned char *)a1 + 111)) {
        sub_1B0D0E4C4((uint64_t)a1);
      }
      int v15 = *((_DWORD *)a1 + 10);
      uint64_t v64 = pHiwtr;
      if (v15 < 1)
      {
        int v17 = 0;
      }
      else
      {
        uint64_t v16 = 0;
        int v17 = 0;
        uint64_t v18 = 8;
        do
        {
          uint64_t v19 = *(void *)(*((void *)a1 + 4) + v18);
          if (v19)
          {
            uint64_t v20 = **(void **)(v19 + 8);
            int v21 = *(_DWORD *)(v20 + 200) + *(unsigned __int16 *)(v20 + 176) + 120;
            int v22 = xmmword_1EB21CA98(*(void *)(*(void *)(v20 + 336) + 72));
            int v23 = off_1EB21C9F8(v20) + v21 * v22 + *(_DWORD *)(v20 + 200);
            if (op == 11) {
              v23 /= *(int *)(*(void *)(v19 + 8) + 104);
            }
            v17 += v23;
            int v15 = *((_DWORD *)a1 + 10);
          }
          ++v16;
          v18 += 32;
        }
        while (v16 < v15);
      }
      if (!*((unsigned char *)a1 + 111)) {
        sub_1B0D0E55C((uint64_t)a1);
      }
      resetFlg = 0;
      *pCur = v17;
      *uint64_t v64 = 0;
      break;
    case 2:
      int v66 = 0;
      if (!*((unsigned char *)a1 + 111)) {
        sub_1B0D0E4C4((uint64_t)a1);
      }
      *((void *)a1 + 102) = &v66;
      *((void *)a1 + 64) = *((void *)a1 + 63);
      if (*((int *)a1 + 10) >= 1)
      {
        uint64_t v27 = 0;
        do
        {
          uint64_t v28 = *(void *)(*((void *)a1 + 4) + 32 * v27 + 24);
          if (v28)
          {
            int v29 = v66
                + (*(_DWORD *)(v28 + 60) + *(_DWORD *)(v28 + 12) + *(_DWORD *)(v28 + 36) + *(_DWORD *)(v28 + 84))
                * unk_1EB21CA00(32);
            int v66 = v29;
            uint64_t v30 = *(void *)(v28 + 24);
            if (v30)
            {
              LODWORD(v30) = off_1EB21C9F8(v30);
              int v29 = v66;
            }
            int v31 = v29 + v30;
            int v66 = v31;
            uint64_t v32 = *(void *)(v28 + 72);
            if (v32)
            {
              LODWORD(v32) = off_1EB21C9F8(v32);
              int v31 = v66;
            }
            int v33 = v31 + v32;
            int v66 = v33;
            uint64_t v34 = *(void *)(v28 + 48);
            if (v34)
            {
              LODWORD(v34) = off_1EB21C9F8(v34);
              int v33 = v66;
            }
            int v35 = v33 + v34;
            int v66 = v35;
            uint64_t v36 = *(void *)(v28 + 96);
            if (v36)
            {
              LODWORD(v36) = off_1EB21C9F8(v36);
              int v35 = v66;
            }
            int v66 = v35 + v36;
            for (int i = *(void **)(v28 + 64); i; int i = (void *)*i)
              sub_1B0C8AF78(a1, i[2]);
            for (j = *(void **)(v28 + 16); j; j = (void *)*j)
            {
              uint64_t v39 = j[2];
              if (v39)
              {
                if (*((void *)a1 + 102) || (int v40 = *(_DWORD *)(v39 + 44) - 1, (*(_DWORD *)(v39 + 44) = v40) == 0)) {
                  sub_1B0D26BF8(a1, (void *)v39);
                }
              }
            }
          }
          ++v27;
        }
        while (v27 < *((int *)a1 + 10));
      }
      *((void *)a1 + 102) = 0;
      *((void *)a1 + 64) = *((void *)a1 + 65);
      if (!*((unsigned char *)a1 + 111)) {
        sub_1B0D0E55C((uint64_t)a1);
      }
      resetFlg = 0;
      *pHiwtr = 0;
      int v42 = v66;
      goto LABEL_87;
    case 3:
      int v65 = 0;
      *((void *)a1 + 102) = &v65;
      *((void *)a1 + 64) = *((void *)a1 + 63);
      uint64_t v41 = *((void *)a1 + 1);
      if (v41)
      {
        do
        {
          sub_1B0CE20DC(v41);
          uint64_t v41 = *(void *)(v41 + 16);
        }
        while (v41);
        int v42 = v65;
      }
      else
      {
        int v42 = 0;
      }
      resetFlg = 0;
      *((void *)a1 + 64) = *((void *)a1 + 65);
      *((void *)a1 + 102) = 0;
      *pHiwtr = 0;
      goto LABEL_87;
    case 4:
    case 5:
    case 6:
      *pCur = 0;
      double v13 = (char *)a1 + 4 * (op - 4);
      *pHiwtr = *((_DWORD *)v13 + 112);
      if (resetFlg)
      {
        resetFlg = 0;
        *((_DWORD *)v13 + 112) = 0;
      }
      break;
    case 7:
    case 8:
    case 9:
      goto LABEL_63;
    case 10:
      *pHiwtr = 0;
      int v42 = *((uint64_t *)a1 + 101) > 0 || *((void *)a1 + 100) > 0;
      resetFlg = 0;
      goto LABEL_87;
    case 12:
      op = 10;
LABEL_63:
      int v43 = *((_DWORD *)a1 + 10);
      if (v43 < 1)
      {
        int v42 = 0;
      }
      else
      {
        uint64_t v44 = 0;
        int v42 = 0;
        uint64_t v45 = *((void *)a1 + 4) + 8;
        do
        {
          if (*(void *)v45)
          {
            uint64_t v46 = **(void **)(*(void *)v45 + 8) + 4 * (op - 7);
            int v48 = *(_DWORD *)(v46 + 248);
            int v47 = (_DWORD *)(v46 + 248);
            v42 += v48;
            if (resetFlg)
            {
              *int v47 = 0;
              int v43 = *((_DWORD *)a1 + 10);
            }
          }
          ++v44;
          v45 += 32;
        }
        while (v44 < v43);
      }
      resetFlg = 0;
      *pHiwtr = 0;
LABEL_87:
      *pCur = v42;
      break;
    default:
      resetFlg = 1;
      break;
  }
  uint64_t v52 = *((void *)a1 + 3);
  if (v52) {
    xmmword_1EB21CA50(v52);
  }
  return resetFlg;
}

sqlite3_uint64 sqlite3_msize(sqlite3_uint64 result)
{
  if (result) {
    return (int)off_1EB21C9F8(result);
  }
  return result;
}

void *sub_1B0CE20DC(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  unint64_t v3 = *(void *)(a1 + 152);
  if (v3)
  {
    if (*(_WORD *)(a1 + 262))
    {
      unint64_t v4 = v3 + 320 * *(unsigned __int16 *)(a1 + 262);
      int v5 = *(void **)(v3 + 24);
      if (!v5[102])
      {
        while (1)
        {
          if ((*(_WORD *)(v3 + 20) & 0x9000) != 0)
          {
            sub_1B0D180E4(v3);
          }
          else
          {
            if (!*(_DWORD *)(v3 + 32)) {
              goto LABEL_11;
            }
            sub_1B0D15C20(v5, *(void **)(v3 + 40));
            *(_DWORD *)(v3 + 32) = 0;
          }
          *(_WORD *)(v3 + 20) = 0;
LABEL_11:
          v3 += 64;
          if (v3 >= v4) {
            goto LABEL_15;
          }
        }
      }
      do
      {
        if (*(_DWORD *)(v3 + 32))
        {
          int v6 = *(void **)(v3 + 40);
          if (v6) {
            sub_1B0D05C10(v5, v6);
          }
        }
        v3 += 64;
      }
      while (v3 < v4);
    }
LABEL_15:
    sub_1B0D15C20(v2, *(void **)(a1 + 152));
  }
  uint64_t v7 = *(void *)(a1 + 376);
  if (v7)
  {
    do
    {
      uint64_t v8 = *(void *)(v7 + 40);
      uint64_t v9 = *(void **)v7;
      if (*(void *)v7)
      {
        uint64_t v10 = 40 * *(int *)(v7 + 8) - 40;
        do
        {
          int v11 = *((char *)v9 + v10 + 1);
          if (v11 <= -6) {
            sub_1B0C8B9A4(v2, v11, *(void *)((char *)v9 + v10 + 16));
          }
          v10 -= 40;
        }
        while (v10 != -40);
        sub_1B0D15C20(v2, v9);
      }
      sub_1B0D05C10(v2, (void *)v7);
      uint64_t v7 = v8;
    }
    while (v8);
  }
  if (*(unsigned char *)(a1 + 267))
  {
    unint64_t v12 = *(void *)(a1 + 128);
    if (v12)
    {
      int v13 = *(_DWORD *)(a1 + 32);
      if (v13)
      {
        unint64_t v14 = v12 + ((uint64_t)v13 << 6);
        int v15 = *(void **)(v12 + 24);
        if (!v15[102])
        {
          while (1)
          {
            if ((*(_WORD *)(v12 + 20) & 0x9000) != 0)
            {
              sub_1B0D180E4(v12);
            }
            else
            {
              if (!*(_DWORD *)(v12 + 32)) {
                goto LABEL_36;
              }
              sub_1B0D15C20(v15, *(void **)(v12 + 40));
              *(_DWORD *)(v12 + 32) = 0;
            }
            *(_WORD *)(v12 + 20) = 0;
LABEL_36:
            v12 += 64;
            if (v12 >= v14) {
              goto LABEL_40;
            }
          }
        }
        do
        {
          if (*(_DWORD *)(v12 + 32))
          {
            uint64_t v16 = *(void **)(v12 + 40);
            if (v16) {
              sub_1B0D05C10(v15, v16);
            }
          }
          v12 += 64;
        }
        while (v12 < v14);
      }
    }
LABEL_40:
    int v17 = *(void **)(a1 + 176);
    if (v17) {
      sub_1B0D15C20(v2, v17);
    }
    uint64_t v18 = *(void **)(a1 + 344);
    if (v18) {
      sub_1B0D15C20(v2, v18);
    }
  }
  uint64_t v19 = *(void **)(a1 + 136);
  if (v19)
  {
    uint64_t v20 = 40 * *(int *)(a1 + 144) - 40;
    do
    {
      int v21 = *((char *)v19 + v20 + 1);
      if (v21 <= -6) {
        sub_1B0C8B9A4(v2, v21, *(void *)((char *)v19 + v20 + 16));
      }
      v20 -= 40;
    }
    while (v20 != -40);
    sub_1B0D15C20(v2, v19);
  }
  int v22 = *(void **)(a1 + 320);
  if (v22) {
    sub_1B0D15C20(v2, v22);
  }
  int v23 = *(void **)(a1 + 328);
  if (v23) {
    sub_1B0D05C10(v2, v23);
  }
  uint64_t v24 = *(void **)(a1 + 336);
  if (v24)
  {
    do
    {
      int v25 = (void *)*v24;
      sub_1B0D05C10(v2, v24);
      uint64_t v24 = v25;
    }
    while (v25);
  }
  int v26 = *(_DWORD *)(a1 + 392);
  if (v26 >= 1)
  {
    uint64_t v27 = 0;
    uint64_t v28 = 48;
    do
    {
      int v29 = *(void **)(*(void *)(a1 + 400) + v28);
      if (v29)
      {
        sub_1B0D05C10(v2, v29);
        int v26 = *(_DWORD *)(a1 + 392);
      }
      ++v27;
      v28 += 56;
    }
    while (v27 < v26);
  }
  uint64_t v30 = *(void **)(a1 + 400);
  if (v30) {
    sub_1B0D05C10(v2, v30);
  }
  if (!v2[102])
  {
    **(void **)(a1 + 8) = *(void *)(a1 + 16);
    uint64_t v31 = *(void *)(a1 + 16);
    if (v31) {
      *(void *)(v31 + 8) = *(void *)(a1 + 8);
    }
  }

  return sub_1B0D15C20(v2, (void *)a1);
}

int sqlite3_vfs_unregister(sqlite3_vfs *a1)
{
  int result = sqlite3_initialize();
  if (result) {
    return result;
  }
  if (!(_BYTE)word_1EB21C9C4)
  {
    uint64_t v4 = 0;
LABEL_7:
    char v5 = 1;
    if (!a1) {
      goto LABEL_18;
    }
    goto LABEL_8;
  }
  uint64_t v3 = qword_1EB21CA30(2);
  uint64_t v4 = v3;
  if (!v3) {
    goto LABEL_7;
  }
  xmmword_1EB21CA40(v3);
  char v5 = 0;
  if (!a1) {
    goto LABEL_18;
  }
LABEL_8:
  p_pNext = &qword_1EB2201A8;
  uint64_t v7 = (sqlite3_vfs *)qword_1EB2201A8;
  if ((sqlite3_vfs *)qword_1EB2201A8 != a1)
  {
    if (!qword_1EB2201A8) {
      goto LABEL_18;
    }
    do
    {
      uint64_t v8 = v7;
      uint64_t v7 = v7->pNext;
      if (v7) {
        BOOL v9 = v7 == a1;
      }
      else {
        BOOL v9 = 1;
      }
    }
    while (!v9);
    if (v7 != a1) {
      goto LABEL_18;
    }
    p_pNext = (uint64_t *)&v8->pNext;
  }
  uint64_t *p_pNext = (uint64_t)a1->pNext;
LABEL_18:
  if ((v5 & 1) == 0) {
    xmmword_1EB21CA50(v4);
  }
  return 0;
}

sqlite3_mutex *__cdecl sqlite3_mutex_alloc(int a1)
{
  uint64_t v1 = *(void *)&a1;
  if (a1 > 1)
  {
    if (!qword_1EB21CA30)
    {
      uint64_t v3 = sub_1B0D05648;
      BOOL v4 = word_1EB21C9C4 == 0;
      if (!(_BYTE)word_1EB21C9C4) {
        uint64_t v3 = sub_1B0D05BE4;
      }
      xmmword_1EB21CA20 = v3;
      char v5 = sub_1B0D05650;
      if (!(_BYTE)word_1EB21C9C4) {
        char v5 = sub_1B0D05BEC;
      }
      *(&xmmword_1EB21CA20 + 1) = v5;
      int v6 = (uint64_t (*)(void))sub_1B0D05784;
      if (!(_BYTE)word_1EB21C9C4) {
        int v6 = nullsub_4;
      }
      off_1EB21CA38 = v6;
      uint64_t v7 = sub_1B0D05928;
      if (!(_BYTE)word_1EB21C9C4) {
        uint64_t v7 = (uint64_t (*)(uint64_t))nullsub_5;
      }
      xmmword_1EB21CA40 = v7;
      uint64_t v8 = sub_1B0D059C8;
      if (!(_BYTE)word_1EB21C9C4) {
        uint64_t v8 = (uint64_t (*)(void))sub_1B0D05C04;
      }
      *(&xmmword_1EB21CA40 + 1) = v8;
      BOOL v9 = sub_1B0D05A04;
      if (!(_BYTE)word_1EB21C9C4) {
        BOOL v9 = (void (*)(uint64_t))nullsub_6;
      }
      qword_1EB21CA60 = 0;
      *(_OWORD *)&xmmword_1EB21CA50 = (unint64_t)v9;
      __dmb(0xBu);
      uint64_t v10 = (uint64_t (*)(void))sub_1B0D05658;
      if (v4) {
        uint64_t v10 = (uint64_t (*)(void))sub_1B0D05BF4;
      }
      qword_1EB21CA30 = v10;
    }
    int v11 = xmmword_1EB21CA20();
    __dmb(0xBu);
    if (v11) {
      return 0;
    }
  }
  else if (sqlite3_initialize())
  {
    return 0;
  }
  unint64_t v12 = qword_1EB21CA30;

  return (sqlite3_mutex *)v12(v1);
}

void sqlite3_mutex_free(sqlite3_mutex *a1)
{
  if (a1) {
    off_1EB21CA38();
  }
}

int sqlite3_mutex_try(sqlite3_mutex *a1)
{
  if (a1) {
    LODWORD(a1) = (*(&xmmword_1EB21CA40 + 1))();
  }
  return (int)a1;
}

int sqlite3_release_memory(int a1)
{
  return 0;
}

int sqlite3_memory_alarm(void (__cdecl *a1)(void *, sqlite3_int64, int), void *a2, sqlite3_int64 a3)
{
  return 0;
}

sqlite3_int64 sqlite3_soft_heap_limit64(sqlite3_int64 N)
{
  if (sqlite3_initialize()) {
    return -1;
  }
  if ((void)xmmword_1EB2201B0) {
    xmmword_1EB21CA40(xmmword_1EB2201B0);
  }
  sqlite3_int64 v2 = *((void *)&xmmword_1EB2201B0 + 1);
  if (N < 0)
  {
    uint64_t v8 = xmmword_1EB2201B0;
    if (!(void)xmmword_1EB2201B0) {
      return v2;
    }
LABEL_25:
    xmmword_1EB21CA50(v8);
    return v2;
  }
  sqlite3_int64 v3 = qword_1EB2201C0;
  if (qword_1EB2201C0 >= N && N != 0 || qword_1EB2201C0 <= 0) {
    sqlite3_int64 v3 = N;
  }
  *((void *)&xmmword_1EB2201B0 + 1) = v3;
  BOOL v7 = v3 > 0 && v3 <= qword_1EB220108;
  dword_1EB2201C8 = v7;
  if ((void)xmmword_1EB2201B0)
  {
    xmmword_1EB21CA50(xmmword_1EB2201B0);
    uint64_t v8 = xmmword_1EB2201B0;
    if ((void)xmmword_1EB2201B0)
    {
      xmmword_1EB21CA40(xmmword_1EB2201B0);
      goto LABEL_25;
    }
  }
  return v2;
}

sqlite3_int64 sqlite3_memory_used(void)
{
  uint64_t v0 = xmmword_1EB2201B0;
  if (!(void)xmmword_1EB2201B0) {
    return qword_1EB220108;
  }
  xmmword_1EB21CA40(xmmword_1EB2201B0);
  sqlite3_int64 v1 = qword_1EB220108;
  xmmword_1EB21CA50(v0);
  return v1;
}

void sqlite3_soft_heap_limit(int N)
{
  if (!sqlite3_initialize())
  {
    uint64_t v2 = xmmword_1EB2201B0;
    if ((void)xmmword_1EB2201B0)
    {
      xmmword_1EB21CA40(xmmword_1EB2201B0);
      uint64_t v2 = xmmword_1EB2201B0;
    }
    uint64_t v3 = qword_1EB2201C0;
    if (qword_1EB2201C0 >= (N & ~(N >> 31)) && N >= 1 || qword_1EB2201C0 <= 0) {
      uint64_t v3 = N & ~(N >> 31);
    }
    *((void *)&xmmword_1EB2201B0 + 1) = v3;
    BOOL v7 = v3 > 0 && v3 <= qword_1EB220108[0];
    dword_1EB2201C8 = v7;
    if (v2)
    {
      xmmword_1EB21CA50(v2);
      uint64_t v8 = xmmword_1EB2201B0;
      if ((void)xmmword_1EB2201B0)
      {
        xmmword_1EB21CA40(xmmword_1EB2201B0);
        BOOL v9 = (void (*)(uint64_t))xmmword_1EB21CA50;
        v9(v8);
      }
    }
  }
}

uint64_t sqlite3_hard_heap_limit64(uint64_t a1)
{
  if (sqlite3_initialize()) {
    return -1;
  }
  if ((a1 & 0x8000000000000000) == 0)
  {
    uint64_t v7 = 0;
    uint64_t v8 = &v7;
    uint64_t v9 = 0x2000000000;
    int v10 = 0;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = sub_1B0CE2A28;
    block[3] = &unk_1E5FEEE08;
    block[4] = &v7;
    if (qword_1E9B52068 != -1) {
      dispatch_once(&qword_1E9B52068, block);
    }
    if (!*((_DWORD *)v8 + 6) || (uint64_t v3 = getprogname(), strcmp("backupd", v3)))
    {
      sub_1B0CE1978(30910);
      a1 = -1;
    }
    _Block_object_dispose(&v7, 8);
  }
  if ((void)xmmword_1EB2201B0) {
    xmmword_1EB21CA40(xmmword_1EB2201B0);
  }
  uint64_t v2 = qword_1EB2201C0;
  if ((a1 & 0x8000000000000000) == 0)
  {
    qword_1EB2201C0 = a1;
    if (a1 < *((uint64_t *)&xmmword_1EB2201B0 + 1) || *((void *)&xmmword_1EB2201B0 + 1) == 0) {
      *((void *)&xmmword_1EB2201B0 + 1) = a1;
    }
  }
  if ((void)xmmword_1EB2201B0) {
    xmmword_1EB21CA50(xmmword_1EB2201B0);
  }
  return v2;
}

uint64_t sub_1B0CE2A28(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  return result;
}

sqlite3_int64 sqlite3_memory_highwater(int resetFlag)
{
  uint64_t v2 = xmmword_1EB2201B0;
  if ((void)xmmword_1EB2201B0) {
    xmmword_1EB21CA40(xmmword_1EB2201B0);
  }
  sqlite3_int64 v3 = qword_1EB220158;
  if (resetFlag) {
    qword_1EB220158 = qword_1EB220108;
  }
  if (v2) {
    xmmword_1EB21CA50(v2);
  }
  return v3;
}

void *__cdecl sqlite3_malloc64(sqlite3_uint64 a1)
{
  if (sqlite3_initialize()) {
    return 0;
  }

  return (void *)sub_1B0C7FC94(a1);
}

void *__cdecl sqlite3_realloc(void *a1, int a2)
{
  if (sqlite3_initialize()) {
    return 0;
  }

  return (void *)sub_1B0C8E1B8((uint64_t)a1, a2 & ~(a2 >> 31));
}

void *__cdecl sqlite3_realloc64(void *a1, sqlite3_uint64 a2)
{
  if (sqlite3_initialize()) {
    return 0;
  }

  return (void *)sub_1B0C8E1B8((uint64_t)a1, a2);
}

void sqlite3_str_vappendf(sqlite3_str *a1, const char *zFormat, va_list a3)
{
  uint64_t v369 = *MEMORY[0x1E4F143B8];
  va_list v352 = a3;
  if (a1)
  {
    sqlite3_int64 v3 = (unsigned __int8 *)zFormat;
    if (zFormat)
    {
      char v348 = *((unsigned char *)a1 + 29);
      if ((v348 & 2) != 0)
      {
        va_list v352 = a3 + 8;
        uint64_t v5 = *(void *)a3;
      }
      else
      {
        uint64_t v5 = 0;
      }
      int v6 = 0;
      *(double *)&uint64_t v7 = 9.22337204e118;
      double v8 = 10.0;
      v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
      v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
      v10.i64[0] = 0x8080808080808080;
      v10.i64[1] = 0x8080808080808080;
      uint64_t v347 = v5;
LABEL_10:
      if (*v3 != 37)
      {
        if (!*v3) {
          return;
        }
        uint64_t v11 = 0;
        do
          int v12 = v3[++v11];
        while (v12 != 37 && v12 != 0);
        if ((int)v11 <= 0)
        {
          if (v11)
          {
            sub_1B0CE1978(32737);
            v10.i64[0] = 0x8080808080808080;
            v10.i64[1] = 0x8080808080808080;
            v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
            v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
            uint64_t v5 = v347;
          }
        }
        else
        {
          uint64_t v14 = *((unsigned int *)a1 + 6);
          if ((v14 + v11) >= *((_DWORD *)a1 + 4))
          {
            sub_1B0CE62B0((uint64_t)a1, v3, v11);
          }
          else
          {
            *((_DWORD *)a1 + 6) = v14 + v11;
            memcpy((void *)(*((void *)a1 + 1) + v14), v3, v11);
          }
          uint64_t v5 = v347;
          v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
          v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
          v10.i64[0] = 0x8080808080808080;
          v10.i64[1] = 0x8080808080808080;
        }
        int v6 = (char *)v3;
        v3 += v11;
        if (!*v3) {
          return;
        }
      }
      int v17 = v3[1];
      uint64_t v16 = v3 + 1;
      LOBYTE(v15) = v17;
      if (!v17)
      {
        uint64_t v321 = *((unsigned int *)a1 + 6);
        if ((v321 + 1) >= *((_DWORD *)a1 + 4))
        {
          sub_1B0CE62B0((uint64_t)a1, "%", 1u);
        }
        else
        {
          *((_DWORD *)a1 + 6) = v321 + 1;
          *(unsigned char *)(*((void *)a1 + 1) + v321) = 37;
        }
        return;
      }
      int v349 = 0;
      uint64_t v18 = 0;
      char v19 = 0;
      uint64_t v20 = 0;
      int v21 = 0;
      uint64_t v22 = 0;
      int v23 = 0;
      int v24 = -1;
      while (1)
      {
        int v27 = 0;
        int v15 = (char)v15;
        uint64_t v25 = 1;
        switch((char)v15)
        {
          case ' ':
            int v21 = 32;
            goto LABEL_29;
          case '!':
            char v19 = 1;
            goto LABEL_29;
          case '#':
            uint64_t v20 = 1;
            goto LABEL_29;
          case '*':
            if ((v348 & 2) == 0)
            {
              uint64_t v32 = v352;
              v352 += 8;
              LODWORD(v33) = *v32;
              goto LABEL_65;
            }
            uint64_t v37 = *(int *)(v5 + 4);
            if (*(_DWORD *)v5 <= (int)v37) {
              goto LABEL_64;
            }
            uint64_t v38 = *(void *)(v5 + 8);
            *(_DWORD *)(v5 + 4) = v37 + 1;
            uint64_t v39 = *(void *)(v38 + 8 * v37);
            if (!v39)
            {
              uint64_t v47 = v20;
              uint64_t v48 = v18;
              sub_1B0CE1978(89717);
              uint64_t v18 = v48;
              uint64_t v20 = v47;
              v10.i64[0] = 0x8080808080808080;
              v10.i64[1] = 0x8080808080808080;
              v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
              v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
              uint64_t v5 = v347;
LABEL_64:
              LODWORD(v33) = 0;
              goto LABEL_65;
            }
            __int16 v40 = *(_WORD *)(v39 + 20);
            if ((v40 & 0x24) != 0)
            {
              double v33 = *(double *)v39;
              goto LABEL_65;
            }
            if ((v40 & 8) != 0)
            {
              double v58 = *(double *)v39;
              if (*(double *)v39 >= -9.22337204e18)
              {
                if (v58 <= 9.22337204e18) {
                  *(void *)&double v33 = (uint64_t)v58;
                }
                else {
                  LODWORD(v33) = -1;
                }
              }
              else
              {
                LODWORD(v33) = 0;
              }
            }
            else
            {
              if ((v40 & 0x12) == 0 || !*(void *)(v39 + 8)) {
                goto LABEL_64;
              }
              uint64_t v50 = v20;
              uint64_t v51 = v18;
              LODWORD(v33) = sub_1B0D186C0(v39);
              uint64_t v18 = v51;
              uint64_t v20 = v50;
              v10.i64[0] = 0x8080808080808080;
              v10.i64[1] = 0x8080808080808080;
              v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
              v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
              uint64_t v5 = v347;
            }
LABEL_65:
            if (LODWORD(v33) == 0x80000000) {
              int v49 = 0;
            }
            else {
              int v49 = -LODWORD(v33);
            }
            if (SLODWORD(v33) < 0) {
              uint64_t v25 = 1;
            }
            else {
              uint64_t v25 = v22;
            }
            if (SLODWORD(v33) >= 0) {
              int v23 = LODWORD(v33);
            }
            else {
              int v23 = v49;
            }
            int v15 = v16[1];
            if (v15 == 46 || v15 == 108) {
              goto LABEL_30;
            }
            int v27 = 0;
            int v15 = (char)v15;
            ++v16;
            LOBYTE(v22) = v25;
            goto LABEL_106;
          case '+':
            int v21 = 43;
            goto LABEL_29;
          case ',':
            int v349 = 44;
            goto LABEL_29;
          case '-':
            goto LABEL_30;
          case '.':
            uint64_t v34 = v16 + 1;
            int v15 = (char)v16[1];
            if (v15 == 42)
            {
              if ((v348 & 2) == 0)
              {
                int v35 = v352;
                v352 += 8;
                LODWORD(v36) = *v35;
                goto LABEL_83;
              }
              uint64_t v43 = *(int *)(v5 + 4);
              if (*(_DWORD *)v5 > (int)v43)
              {
                uint64_t v44 = *(void *)(v5 + 8);
                *(_DWORD *)(v5 + 4) = v43 + 1;
                uint64_t v45 = *(void *)(v44 + 8 * v43);
                if (v45)
                {
                  __int16 v46 = *(_WORD *)(v45 + 20);
                  if ((v46 & 0x24) != 0)
                  {
                    double v36 = *(double *)v45;
                    goto LABEL_83;
                  }
                  if ((v46 & 8) != 0)
                  {
                    double v59 = *(double *)v45;
                    if (*(double *)v45 >= -9.22337204e18)
                    {
                      if (v59 <= 9.22337204e18) {
                        *(void *)&double v36 = (uint64_t)v59;
                      }
                      else {
                        LODWORD(v36) = -1;
                      }
                    }
                    else
                    {
                      LODWORD(v36) = 0;
                    }
LABEL_83:
                    if (LODWORD(v36) == 0x80000000) {
                      int v54 = -1;
                    }
                    else {
                      int v54 = -LODWORD(v36);
                    }
                    if (SLODWORD(v36) >= 0) {
                      int v24 = LODWORD(v36);
                    }
                    else {
                      int v24 = v54;
                    }
                    int v55 = (char)v16[2];
                    v16 += 2;
                    int v15 = v55;
                    goto LABEL_90;
                  }
                  if ((v46 & 0x12) != 0 && *(void *)(v45 + 8))
                  {
                    uint64_t v56 = v20;
                    uint64_t v57 = v18;
                    LODWORD(v36) = sub_1B0D186C0(v45);
                    uint64_t v18 = v57;
                    uint64_t v20 = v56;
                    v10.i64[0] = 0x8080808080808080;
                    v10.i64[1] = 0x8080808080808080;
                    v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
                    v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
                    uint64_t v5 = v347;
                    goto LABEL_83;
                  }
                }
                else
                {
                  uint64_t v52 = v20;
                  uint64_t v53 = v18;
                  sub_1B0CE1978(89717);
                  uint64_t v18 = v53;
                  uint64_t v20 = v52;
                  v10.i64[0] = 0x8080808080808080;
                  v10.i64[1] = 0x8080808080808080;
                  v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
                  v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
                  uint64_t v5 = v347;
                }
              }
              LODWORD(v36) = 0;
              goto LABEL_83;
            }
            if ((v15 - 48) > 9)
            {
              int v41 = 0;
            }
            else
            {
              int v41 = 0;
              do
              {
                int v41 = v15 + 10 * v41 - 48;
                int v42 = (char)*++v34;
                int v15 = v42;
              }
              while ((v42 - 48) < 0xA);
            }
            int v24 = v41 & 0x7FFFFFFF;
            uint64_t v16 = v34;
LABEL_90:
            if (v15 != 108)
            {
              int v27 = 0;
LABEL_106:
              unsigned int v60 = 0;
              switch(v15)
              {
                case '%':
                  unsigned int v60 = 18;
                  break;
                case 'E':
                  unsigned int v60 = 14;
                  break;
                case 'G':
                  unsigned int v60 = 15;
                  break;
                case 'Q':
                  unsigned int v60 = 5;
                  break;
                case 'T':
                  unsigned int v60 = 20;
                  break;
                case 'X':
                  unsigned int v60 = 11;
                  break;
                case 'c':
                  unsigned int v60 = 7;
                  break;
                case 'd':
                  break;
                case 'e':
                  unsigned int v60 = 13;
                  break;
                case 'f':
                  unsigned int v60 = 12;
                  break;
                case 'g':
                  unsigned int v60 = 2;
                  break;
                case 'i':
                  unsigned int v60 = 16;
                  break;
                case 'n':
                  unsigned int v60 = 17;
                  break;
                case 'o':
                  unsigned int v60 = 8;
                  break;
                case 'p':
                  unsigned int v60 = 19;
                  break;
                case 'q':
                  unsigned int v60 = 4;
                  break;
                case 's':
                  unsigned int v60 = 1;
                  break;
                case 'u':
                  unsigned int v60 = 9;
                  break;
                case 'w':
                  unsigned int v60 = 6;
                  break;
                case 'x':
                  unsigned int v60 = 10;
                  break;
                case 'z':
                  unsigned int v60 = 3;
                  break;
                default:
                  if (v15 == 83)
                  {
                    unsigned int v60 = 21;
                  }
                  else
                  {
                    if (v15 != 114) {
                      return;
                    }
                    unsigned int v60 = 22;
                  }
                  break;
              }
              int v62 = byte_1B0DE16C7[6 * v60 + 3];
              switch(byte_1B0DE16C7[6 * v60 + 3])
              {
                case 0u:
                case 0xFu:
                  goto LABEL_184;
                case 1u:
                case 2u:
                case 3u:
                  double v339 = *(double *)&v7;
                  memset(v367, 0, sizeof(v367));
                  if ((v348 & 2) != 0)
                  {
                    uint64_t v71 = *(int *)(v5 + 4);
                    double v64 = 0.0;
                    if (*(_DWORD *)v5 > (int)v71)
                    {
                      uint64_t v72 = *(void *)(v5 + 8);
                      *(_DWORD *)(v5 + 4) = v71 + 1;
                      uint64_t v73 = *(void *)(v72 + 8 * v71);
                      if (v73)
                      {
                        __int16 v74 = *(_WORD *)(v73 + 20);
                        if ((v74 & 8) != 0)
                        {
                          double v64 = *(double *)v73;
                        }
                        else if ((v74 & 0x24) != 0)
                        {
                          double v64 = (double)*(uint64_t *)v73;
                        }
                        else if ((v74 & 0x12) != 0)
                        {
                          char v345 = v20;
                          int v328 = v18;
                          int v331 = v62;
                          unsigned int v244 = v60;
                          double v245 = sub_1B0D18684(v73);
                          unsigned int v60 = v244;
                          int v62 = v331;
                          LODWORD(v18) = v328;
                          LOBYTE(v20) = v345;
                          v10.i64[0] = 0x8080808080808080;
                          v10.i64[1] = 0x8080808080808080;
                          v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
                          v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
                          double v64 = v245;
                        }
                      }
                      else
                      {
                        char v343 = v20;
                        int v327 = v18;
                        int v330 = v62;
                        unsigned int v140 = v60;
                        sub_1B0CE1978(89752);
                        unsigned int v60 = v140;
                        int v62 = v330;
                        LODWORD(v18) = v327;
                        LOBYTE(v20) = v343;
                        v10.i64[0] = 0x8080808080808080;
                        v10.i64[1] = 0x8080808080808080;
                        v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
                        v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
                      }
                    }
                  }
                  else
                  {
                    ssize_t v63 = (double *)v352;
                    v352 += 8;
                    double v64 = *v63;
                  }
                  if (v24 >= 100000000) {
                    int v141 = 100000000;
                  }
                  else {
                    int v141 = v24;
                  }
                  if (v24 < 0) {
                    int v141 = 6;
                  }
                  if (v62 == 3)
                  {
                    int v142 = v141;
                  }
                  else if (v62 == 1)
                  {
                    int v142 = -v141;
                  }
                  else
                  {
                    int v142 = v141 + 1;
                  }
                  if (v19) {
                    int v143 = 26;
                  }
                  else {
                    int v143 = 16;
                  }
                  BYTE1(v367[0]) = 0;
                  *(void *)&v367[1] = (char *)&v367[1] + 8;
                  if (v64 >= 0.0)
                  {
                    LOBYTE(v367[0]) = 43;
                    if (v64 == 0.0)
                    {
                      *(void *)((char *)v367 + 4) = 0x100000001;
                      uint64_t v144 = "0";
                      *(void *)&v367[1] = "0";
                      *(double *)&uint64_t v7 = v339;
                      goto LABEL_522;
                    }
                  }
                  else
                  {
                    LOBYTE(v367[0]) = 45;
                    double v64 = -v64;
                  }
                  if ((~*(void *)&v64 & 0x7FF0000000000000) != 0)
                  {
                    if (byte_1EB21C9CA)
                    {
                      if (v64 >= 1.0e19)
                      {
                        for (i = 0; v64 >= 1.0e119; double v64 = v64 * 1.0e-100)
                          i += 100;
                        for (; v64 >= 1.0e29; double v64 = v64 * 1.0e-10)
                          i += 10;
                        while (v64 >= 1.0e19)
                        {
                          ++i;
                          double v64 = v64 * 0.1;
                        }
                      }
                      else
                      {
                        for (i = 0; v64 < 1.0e-97; double v64 = v64 * 1.0e100)
                          i -= 100;
                        while (v64 < 10000000.0)
                        {
                          i -= 10;
                          double v64 = v64 * 1.0e10;
                        }
                        for (; v64 < 1.0e17; double v64 = v64 * v8)
                          --i;
                      }
                      unint64_t v148 = (unint64_t)v64;
                    }
                    else
                    {
                      double v354 = v64;
                      double v353 = 0.0;
                      if (v64 <= 9.22337204e18)
                      {
                        int i = 0;
                        if (v64 >= 9.22337204e-83)
                        {
                          double v147 = 0.0;
                        }
                        else
                        {
                          do
                          {
                            i -= 100;
                            double v362 = COERCE_DOUBLE(*(void *)&v64 & 0xFFFFFFFFFC000000) * 9.99999995e99
                                 + (v354 - COERCE_DOUBLE(*(void *)&v64 & 0xFFFFFFFFFC000000)) * 9.99999995e99
                                 + COERCE_DOUBLE(*(void *)&v64 & 0xFFFFFFFFFC000000) * 5.15323793e91;
                            double v356 = COERCE_DOUBLE(*(void *)&v64 & 0xFFFFFFFFFC000000) * 9.99999995e99
                                 - v362
                                 + (v354 - COERCE_DOUBLE(*(void *)&v64 & 0xFFFFFFFFFC000000)) * 9.99999995e99
                                 + COERCE_DOUBLE(*(void *)&v64 & 0xFFFFFFFFFC000000) * 5.15323793e91
                                 + (v354 - COERCE_DOUBLE(*(void *)&v64 & 0xFFFFFFFFFC000000)) * 5.15323793e91
                                 + v353 * 1.0e100
                                 + v354 * -1.59028911e83;
                            double v354 = v362 + v356;
                            double v64 = v362 + v356;
                            double v147 = v356 + v362 - (v362 + v356);
                            double v353 = v147;
                          }
                          while (v362 + v356 < 9.22337204e-83);
                        }
                        if (v64 < 92233720.4)
                        {
                          do
                          {
                            i -= 10;
                            double v365 = COERCE_DOUBLE(*(void *)&v64 & 0xFFFFFFFFFC000000) * 1.0e10
                                 + (v354 - COERCE_DOUBLE(*(void *)&v64 & 0xFFFFFFFFFC000000)) * 1.0e10
                                 + COERCE_DOUBLE(*(void *)&v64 & 0xFFFFFFFFFC000000) * 0.0;
                            double v359 = COERCE_DOUBLE(*(void *)&v64 & 0xFFFFFFFFFC000000) * 1.0e10
                                 - v365
                                 + (v354 - COERCE_DOUBLE(*(void *)&v64 & 0xFFFFFFFFFC000000)) * 1.0e10
                                 + COERCE_DOUBLE(*(void *)&v64 & 0xFFFFFFFFFC000000) * 0.0
                                 + (v354 - COERCE_DOUBLE(*(void *)&v64 & 0xFFFFFFFFFC000000)) * 0.0
                                 + v353 * 1.0e10
                                 + v354 * 0.0;
                            double v354 = v365 + v359;
                            double v64 = v365 + v359;
                            double v147 = v359 + v365 - (v365 + v359);
                            double v353 = v147;
                          }
                          while (v365 + v359 < 92233720.4);
                        }
                        while (v64 < 9.22337204e17)
                        {
                          --i;
                          double v366 = COERCE_DOUBLE(*(void *)&v64 & 0xFFFFFFFFFC000000) * 10.0
                               + (v354 - COERCE_DOUBLE(*(void *)&v64 & 0xFFFFFFFFFC000000)) * 10.0
                               + COERCE_DOUBLE(*(void *)&v64 & 0xFFFFFFFFFC000000) * 0.0;
                          double v8 = 10.0;
                          double v360 = COERCE_DOUBLE(*(void *)&v64 & 0xFFFFFFFFFC000000) * 10.0
                               - v366
                               + (v354 - COERCE_DOUBLE(*(void *)&v64 & 0xFFFFFFFFFC000000)) * 10.0
                               + COERCE_DOUBLE(*(void *)&v64 & 0xFFFFFFFFFC000000) * 0.0
                               + (v354 - COERCE_DOUBLE(*(void *)&v64 & 0xFFFFFFFFFC000000)) * 0.0
                               + v353 * 10.0
                               + v354 * 0.0;
                          double v354 = v366 + v360;
                          double v64 = v366 + v360;
                          double v147 = v360 + v366 - (v366 + v360);
                          double v353 = v147;
                        }
                      }
                      else
                      {
                        int i = 0;
                        if (v64 <= v339)
                        {
                          double v147 = 0.0;
                        }
                        else
                        {
                          do
                          {
                            i += 100;
                            double v361 = COERCE_DOUBLE(*(void *)&v64 & 0xFFFFFFFFFC000000) * 9.99999999e-101
                                 + (v354 - COERCE_DOUBLE(*(void *)&v64 & 0xFFFFFFFFFC000000)) * 9.99999999e-101
                                 + COERCE_DOUBLE(*(void *)&v64 & 0xFFFFFFFFFC000000) * 1.18108707e-109;
                            double v355 = COERCE_DOUBLE(*(void *)&v64 & 0xFFFFFFFFFC000000) * 9.99999999e-101
                                 - v361
                                 + (v354 - COERCE_DOUBLE(*(void *)&v64 & 0xFFFFFFFFFC000000)) * 9.99999999e-101
                                 + COERCE_DOUBLE(*(void *)&v64 & 0xFFFFFFFFFC000000) * 1.18108707e-109
                                 + (v354 - COERCE_DOUBLE(*(void *)&v64 & 0xFFFFFFFFFC000000)) * 1.18108707e-109
                                 + v353 * 1.0e-100
                                 + v354 * -1.99918998e-117;
                            double v354 = v361 + v355;
                            double v64 = v361 + v355;
                            double v147 = v355 + v361 - (v361 + v355);
                            double v353 = v147;
                          }
                          while (v361 + v355 > v339);
                        }
                        if (v64 > 9.22337204e28)
                        {
                          do
                          {
                            i += 10;
                            double v363 = COERCE_DOUBLE(*(void *)&v64 & 0xFFFFFFFFFC000000) * 9.99999996e-11
                                 + (v354 - COERCE_DOUBLE(*(void *)&v64 & 0xFFFFFFFFFC000000)) * 9.99999996e-11
                                 + COERCE_DOUBLE(*(void *)&v64 & 0xFFFFFFFFFC000000) * 3.99580284e-19;
                            double v357 = COERCE_DOUBLE(*(void *)&v64 & 0xFFFFFFFFFC000000) * 9.99999996e-11
                                 - v363
                                 + (v354 - COERCE_DOUBLE(*(void *)&v64 & 0xFFFFFFFFFC000000)) * 9.99999996e-11
                                 + COERCE_DOUBLE(*(void *)&v64 & 0xFFFFFFFFFC000000) * 3.99580284e-19
                                 + (v354 - COERCE_DOUBLE(*(void *)&v64 & 0xFFFFFFFFFC000000)) * 3.99580284e-19
                                 + v353 * 1.0e-10
                                 + v354 * -3.64321973e-27;
                            double v354 = v363 + v357;
                            double v64 = v363 + v357;
                            double v147 = v357 + v363 - (v363 + v357);
                            double v353 = v147;
                          }
                          while (v363 + v357 > 9.22337204e28);
                        }
                        while (v64 > 9.22337204e18)
                        {
                          ++i;
                          double v364 = COERCE_DOUBLE(*(void *)&v64 & 0xFFFFFFFFFC000000) * 0.0999999996
                               + (v354 - COERCE_DOUBLE(*(void *)&v64 & 0xFFFFFFFFFC000000)) * 0.0999999996
                               + COERCE_DOUBLE(*(void *)&v64 & 0xFFFFFFFFFC000000) * 3.72529035e-10;
                          double v358 = COERCE_DOUBLE(*(void *)&v64 & 0xFFFFFFFFFC000000) * 0.0999999996
                               - v364
                               + (v354 - COERCE_DOUBLE(*(void *)&v64 & 0xFFFFFFFFFC000000)) * 0.0999999996
                               + COERCE_DOUBLE(*(void *)&v64 & 0xFFFFFFFFFC000000) * 3.72529035e-10
                               + (v354 - COERCE_DOUBLE(*(void *)&v64 & 0xFFFFFFFFFC000000)) * 3.72529035e-10
                               + v353 * 0.1
                               + v354 * -5.55111512e-18;
                          double v354 = v364 + v358;
                          double v64 = v364 + v358;
                          double v147 = v358 + v364 - (v364 + v358);
                          double v353 = v147;
                        }
                      }
                      unint64_t v148 = (unint64_t)v64 - (unint64_t)-v147;
                      if (v147 >= 0.0) {
                        unint64_t v148 = (unint64_t)v147 + (unint64_t)v64;
                      }
                    }
                    *(double *)&uint64_t v7 = v339;
                    if (v148)
                    {
                      uint64_t v235 = 47;
                      do
                      {
                        *((unsigned char *)v367 + v235--) = (v148 % 0xA) | 0x30;
                        BOOL v172 = v148 > 9;
                        v148 /= 0xAuLL;
                      }
                      while (v172);
                      int v236 = v235 - 24;
                    }
                    else
                    {
                      int v236 = 23;
                    }
                    int v237 = 23 - v236;
                    int v238 = 23 - v236 + i;
                    DWORD1(v367[0]) = 23 - v236;
                    DWORD2(v367[0]) = v238;
                    if (v142 < 0 && (int v142 = v238 - v142) == 0)
                    {
                      uint64_t v243 = v236;
                      if (*((char *)&v367[1] + v236 + 9) >= 53)
                      {
                        --v236;
                        *((unsigned char *)&v367[1] + v243 + 8) = 48;
                        *(int32x2_t *)((char *)v367 + 4) = vadd_s32(*(int32x2_t *)((char *)v367 + 4), (int32x2_t)0x100000001);
                        int v237 = DWORD1(v367[0]);
                        int v142 = 1;
                        if (SDWORD1(v367[0]) > v143) {
                          goto LABEL_504;
                        }
LABEL_503:
                        if (v142 < v237)
                        {
LABEL_504:
                          uint64_t v239 = v236;
                          v240 = (char *)&v367[1] + v236 + 9;
                          if (v142 >= v143) {
                            int v237 = v143;
                          }
                          else {
                            int v237 = v142;
                          }
                          DWORD1(v367[0]) = v237;
                          if (v240[v237] < 53) {
                            goto LABEL_518;
                          }
                          int v241 = v237 - 1;
                          do
                          {
                            int v242 = ++v240[v241];
                            if (v242 < 58)
                            {
                              int v237 = DWORD1(v367[0]);
                              goto LABEL_518;
                            }
                            v240[v241--] = 48;
                          }
                          while (v241 != -1);
                          --v236;
                          *(unsigned char *)(*(void *)&v367[1] + v239) = 49;
                          *(int32x2_t *)((char *)v367 + 4) = vadd_s32(*(int32x2_t *)((char *)v367 + 4), (int32x2_t)0x100000001);
                          int v237 = DWORD1(v367[0]);
                        }
                      }
                    }
                    else if (v142 >= 1)
                    {
                      if (v237 <= v143) {
                        goto LABEL_503;
                      }
                      goto LABEL_504;
                    }
LABEL_518:
                    uint64_t v144 = (char *)&v367[1] + v236 + 9;
                    *(void *)&v367[1] = v144;
                    if (v237 >= 1)
                    {
                      uint64_t v246 = v237;
                      do
                      {
                        uint64_t v247 = v246 - 1;
                        if (v144[(v246 - 1)] != 48) {
                          break;
                        }
                        DWORD1(v367[0]) = --v246;
                      }
                      while ((unint64_t)(v247 + 1) > 1);
                    }
LABEL_522:
                    char v145 = BYTE1(v367[0]);
                    goto LABEL_523;
                  }
                  if (v64 == INFINITY) {
                    char v145 = 1;
                  }
                  else {
                    char v145 = 2;
                  }
                  BYTE1(v367[0]) = v145;
                  *(void *)((char *)v367 + 4) = 0;
                  uint64_t v144 = (char *)&v367[1] + 8;
                  *(double *)&uint64_t v7 = v339;
LABEL_523:
                  if (v145 != 2)
                  {
                    if (v145)
                    {
                      if (!v18)
                      {
                        strcpy((char *)__src, "-Inf");
                        if (LOBYTE(v367[0]) == 45) {
                          goto LABEL_574;
                        }
                        int v6 = (char *)__src + 1;
                        if (v21)
                        {
                          LOBYTE(__src[0]) = v21;
LABEL_574:
                          int v6 = (char *)__src;
                        }
                        uint64_t v78 = 0;
                        LODWORD(v79) = strlen(v6) & 0x3FFFFFFF;
                        goto LABEL_676;
                      }
                      char *v144 = 57;
                      *(void *)((char *)v367 + 4) = 0x3E800000001;
                      int v248 = 1000;
                    }
                    else
                    {
                      int v248 = DWORD2(v367[0]);
                    }
                    if (LOBYTE(v367[0]) == 45) {
                      int v249 = 45;
                    }
                    else {
                      int v249 = v21;
                    }
                    int v250 = v248 - 1;
                    BOOL v251 = v60 == 2;
                    if (v60 == 15) {
                      BOOL v251 = 1;
                    }
                    if (v141 <= 0) {
                      BOOL v251 = 0;
                    }
                    int v252 = v141 - v251;
                    if (v60 == 15 || (BOOL v253 = v19, v60 == 2))
                    {
                      BOOL v253 = v20 == 0;
                      BOOL v255 = v248 < -3 || v250 > v252;
                      if (v255) {
                        LOBYTE(v62) = 2;
                      }
                      else {
                        LOBYTE(v62) = 1;
                      }
                      if (v255) {
                        int v256 = 0;
                      }
                      else {
                        int v256 = v248 - 1;
                      }
                      v252 -= v256;
                    }
                    char v346 = v19;
                    if (v62 == 2) {
                      int v257 = 0;
                    }
                    else {
                      int v257 = v248 - 1;
                    }
                    int64_t v258 = v23;
                    uint64_t v259 = v23
                         + (uint64_t)v252
                         + (v257 & ~(v257 >> 31))
                         + 15
                         + (v257 + 2) / 3uLL;
                    if (v257 < 1) {
                      uint64_t v259 = v23 + (uint64_t)v252 + (v257 & ~(v257 >> 31)) + 15;
                    }
                    if (v349) {
                      uint64_t v260 = v259;
                    }
                    else {
                      uint64_t v260 = v23 + (uint64_t)v252 + (v257 & ~(v257 >> 31)) + 15;
                    }
                    unsigned int v338 = v60;
                    BOOL v336 = v253;
                    int v337 = v249;
                    if (v260 < 513)
                    {
                      uint64_t v341 = 0;
                      int v6 = (char *)__src;
                    }
                    else
                    {
                      if (*((unsigned char *)a1 + 28)) {
                        return;
                      }
                      if (v260 > (unint64_t)*((unsigned int *)a1 + 4))
                      {
                        unint64_t v133 = *((unsigned int *)a1 + 5);
                        if (v260 > v133)
                        {
LABEL_760:
                          *((unsigned char *)a1 + 28) = 18;
                          if (v133)
                          {
                            char v324 = *((unsigned char *)a1 + 29);
                            if ((v324 & 4) != 0)
                            {
                              v325 = (void *)*((void *)a1 + 1);
                              if (v325)
                              {
                                sub_1B0D05C10(*(void **)a1, v325);
                                char v324 = *((unsigned char *)a1 + 29);
                              }
                              *((unsigned char *)a1 + 29) = v324 & 0xFB;
                            }
                            *((_DWORD *)a1 + 4) = 0;
                            *((_DWORD *)a1 + 6) = 0;
                            *((void *)a1 + 1) = 0;
                          }
                          if (*(void *)a1)
                          {
                            uint64_t v326 = *(void *)(*(void *)a1 + 344);
                            if (v326)
                            {
                              *(_DWORD *)(v326 + 24) = 18;
                              ++*(_DWORD *)(v326 + 48);
                            }
                          }
                          return;
                        }
                      }
                      int v329 = v18;
                      int v332 = v250;
                      int v334 = v252;
                      char v261 = v20;
                      if (*(void *)a1) {
                        uint64_t v262 = sub_1B0D05DC0(*(void *)a1, v260);
                      }
                      else {
                        uint64_t v262 = sub_1B0C7FC94(v260);
                      }
                      int v6 = (char *)v262;
                      v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
                      v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
                      v10.i64[0] = 0x8080808080808080;
                      v10.i64[1] = 0x8080808080808080;
                      LOBYTE(v20) = v261;
                      LODWORD(v18) = v329;
                      int v250 = v332;
                      unsigned int v60 = v338;
                      uint64_t v341 = v262;
                      BOOL v253 = v336;
                      int v249 = v337;
                      int v252 = v334;
                      if (!v262) {
                        goto LABEL_754;
                      }
                    }
                    v263 = v6;
                    if (v249)
                    {
                      *int v6 = v249;
                      v263 = v6 + 1;
                    }
                    int v264 = 0;
                    if (v257 < 0)
                    {
                      *v263++ = 48;
                    }
                    else
                    {
                      do
                      {
                        v265 = v263;
                        if (v264 >= SDWORD1(v367[0])) {
                          char v266 = 48;
                        }
                        else {
                          char v266 = *(unsigned char *)(*(void *)&v367[1] + v264++);
                        }
                        *v263++ = v266;
                        if (v349 && v257 >= 2 && 3 * (v257 / 3u) == v257)
                        {
                          v263 = v265 + 2;
                          v265[1] = 44;
                        }
                        BOOL v172 = v257-- <= 0;
                      }
                      while (!v172);
                      int v250 = -1;
                    }
                    char v267 = v346;
                    char v268 = v20 | v346 | (v252 > 0);
                    if (v268) {
                      *v263++ = 46;
                    }
                    if (v250 <= -2)
                    {
                      LODWORD(v269) = v252 - 1;
                      if (v252 >= 1)
                      {
                        BOOL v270 = v269 >= -2 - v250;
                        int v271 = v269 - (-2 - v250);
                        if (v269 >= -2 - v250) {
                          uint64_t v269 = (-2 - v250);
                        }
                        else {
                          uint64_t v269 = v269;
                        }
                        size_t v272 = v269 + 1;
                        v273 = &v263[v269 + 1];
                        if (v270) {
                          int v274 = v271;
                        }
                        else {
                          int v274 = 0;
                        }
                        int v335 = v274;
                        char v333 = v62;
                        int v62 = v18;
                        char v351 = v268;
                        memset(v263, 48, v272);
                        char v268 = v351;
                        int v252 = v335;
                        BOOL v253 = v336;
                        int v249 = v337;
                        unsigned int v60 = v338;
                        LODWORD(v18) = v62;
                        LOBYTE(v62) = v333;
                        v10.i64[0] = 0x8080808080808080;
                        v10.i64[1] = 0x8080808080808080;
                        v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
                        v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
                        v263 = v273;
                        char v267 = v346;
                      }
                    }
                    if (v252 >= 1)
                    {
                      unsigned int v275 = v252 + 1;
                      do
                      {
                        if (v264 < SDWORD1(v367[0])) {
                          char v276 = *(unsigned char *)(*(void *)&v367[1] + v264++);
                        }
                        else {
                          char v276 = 48;
                        }
                        *v263++ = v276;
                        --v275;
                      }
                      while (v275 > 1);
                    }
                    if (v253 && v268)
                    {
                      --v263;
                      while (1)
                      {
                        int v277 = *v263;
                        if (v277 != 48) {
                          break;
                        }
                        *v263-- = 0;
                      }
                      if (v277 == 46)
                      {
                        if (v267)
                        {
                          v263[1] = 48;
                          v263 += 2;
                        }
                        else
                        {
                          char *v263 = 0;
                        }
                      }
                      else
                      {
                        ++v263;
                      }
                    }
                    if (v62 == 2)
                    {
                      int v278 = DWORD2(v367[0]);
                      char *v263 = a0123456789abcd_0[byte_1B0DE16C7[6 * v60 + 4]];
                      int v279 = 1 - v278;
                      BOOL v280 = __OFSUB__(v278, 1);
                      int v281 = v278 - 1;
                      if (v281 < 0 != v280) {
                        char v282 = 45;
                      }
                      else {
                        char v282 = 43;
                      }
                      if (v281 < 0 != v280) {
                        int v281 = v279;
                      }
                      v263[1] = v282;
                      if (v281 < 0x64)
                      {
                        v283 = v263 + 2;
                      }
                      else
                      {
                        v283 = v263 + 3;
                        v263[2] = v281 / 0x64u + 48;
                        v281 %= 0x64u;
                      }
                      unsigned char *v283 = (v281 / 0xAu) | 0x30;
                      v263 = v283 + 2;
                      v283[1] = (v281 % 0xAu) | 0x30;
                    }
                    char *v263 = 0;
                    LODWORD(v79) = v263 - v6;
                    if (!v18 || (_BYTE)v22 || (int v284 = v23 - v79, v23 <= (int)v79))
                    {
                      uint64_t v78 = v341;
                      goto LABEL_698;
                    }
                    if ((v79 & 0x80000000) != 0) {
                      goto LABEL_638;
                    }
                    if (v23 >= (uint64_t)v284) {
                      uint64_t v285 = v284;
                    }
                    else {
                      uint64_t v285 = v23;
                    }
                    unint64_t v286 = v23 - v285 + 1;
                    if (v286 >= 8)
                    {
                      uint64_t v288 = v23 >= (uint64_t)v284 ? v284 : v23;
                      uint64_t v289 = v23 - v288;
                      if (&v6[v23 - v289] <= &v6[v23]
                        && &v6[v23 - (uint64_t)v284 - v289] <= &v6[v23 - (uint64_t)v284]
                        && (unint64_t)(v284 + 31) >= 0x20)
                      {
                        if (v286 >= 0x20)
                        {
                          unint64_t v290 = v286 & 0xFFFFFFFFFFFFFFE0;
                          v292 = &v6[v23 - 15];
                          unint64_t v293 = v286 & 0xFFFFFFFFFFFFFFE0;
                          do
                          {
                            long long v294 = *(_OWORD *)&v292[-v284];
                            *((_OWORD *)v292 - 1) = *(_OWORD *)&v292[-v284 - 16];
                            *(_OWORD *)v292 = v294;
                            v292 -= 32;
                            v293 -= 32;
                          }
                          while (v293);
                          if (v286 == v290) {
                            goto LABEL_638;
                          }
                          if ((v286 & 0x18) != 0) {
                            goto LABEL_662;
                          }
                          int64_t v258 = v23 - v290;
                        }
                        else
                        {
                          unint64_t v290 = 0;
LABEL_662:
                          v295 = &v6[v23 - v290];
                          unint64_t v296 = v290 - (v286 & 0xFFFFFFFFFFFFFFF8);
                          v297 = v295 - 7;
                          do
                          {
                            *(void *)v297 = *(void *)&v297[-v284];
                            v297 -= 8;
                            v296 += 8;
                          }
                          while (v296);
                          int64_t v258 = v23 - (v286 & 0xFFFFFFFFFFFFFFF8);
                          if (v286 == (v286 & 0xFFFFFFFFFFFFFFF8))
                          {
LABEL_638:
                            uint64_t v78 = v341;
                            if (v23 == v79)
                            {
                              LODWORD(v79) = v23;
                            }
                            else
                            {
                              if (v249) {
                                v287 = v6 + 1;
                              }
                              else {
                                v287 = v6;
                              }
                              memset(v287, 48, (~v263 + v23 + v6) + 1);
                              v10.i64[0] = 0x8080808080808080;
                              v10.i64[1] = 0x8080808080808080;
                              v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
                              v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
                              LODWORD(v79) = v23;
                            }
                            goto LABEL_698;
                          }
                        }
                      }
                    }
                    do
                    {
                      v6[v258] = v6[v258 - v284];
                      BOOL v172 = v258-- <= v284;
                    }
                    while (!v172);
                    goto LABEL_638;
                  }
                  uint64_t v78 = 0;
                  if (v18) {
                    int v6 = "null";
                  }
                  else {
                    int v6 = "NaN";
                  }
                  if (v18) {
                    LODWORD(v79) = 4;
                  }
                  else {
                    LODWORD(v79) = 3;
                  }
                  goto LABEL_698;
                case 4u:
                  if ((v348 & 2) != 0) {
                    goto LABEL_696;
                  }
                  uint64_t v78 = 0;
                  int v23 = 0;
                  LODWORD(v79) = 0;
                  unint64_t v80 = (_DWORD **)v352;
                  v352 += 8;
                  **unint64_t v80 = *((_DWORD *)a1 + 6);
                  goto LABEL_698;
                case 5u:
                case 6u:
                  if ((v348 & 2) != 0)
                  {
                    uint64_t v101 = *(int *)(v5 + 4);
                    if (*(_DWORD *)v5 <= (int)v101
                      || (uint64_t v102 = *(void *)(v5 + 8),
                          *(_DWORD *)(v5 + 4) = v101 + 1,
                          (uint64_t v103 = *(void *)(v102 + 8 * v101)) == 0))
                    {
LABEL_321:
                      int v70 = 0;
                      int v6 = &byte_1B0DE9952;
                      v69.i64[0] = 0x100000001;
                      v69.i64[1] = 0x100000001;
                      goto LABEL_322;
                    }
                    int v104 = *(unsigned __int16 *)(v103 + 20);
                    if ((~v104 & 0x202) != 0 || *(unsigned char *)(v103 + 22) != 1)
                    {
                      if (v104) {
                        goto LABEL_321;
                      }
                      uint64_t v149 = sub_1B0D18254((int *)v103, 1);
                      v10.i64[0] = 0x8080808080808080;
                      v10.i64[1] = 0x8080808080808080;
                      v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
                      v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
                      int v6 = (char *)v149;
                      int v62 = 5;
                    }
                    else
                    {
                      int v6 = *(char **)(v103 + 8);
                      int v62 = 5;
                    }
                  }
                  else
                  {
                    ssize_t v68 = (char **)v352;
                    v352 += 8;
                    int v6 = *v68;
                  }
                  v69.i64[0] = 0x100000001;
                  v69.i64[1] = 0x100000001;
                  if (v6)
                  {
                    if (v62 == 6)
                    {
                      if (!*((_DWORD *)a1 + 6) && *((_DWORD *)a1 + 5) && !v23 && v24 < 0)
                      {
                        if (*((unsigned char *)a1 + 28))
                        {
                          char v342 = v19;
                          uint64_t v78 = (uint64_t)v6;
                          goto LABEL_333;
                        }
                        *((void *)a1 + 1) = v6;
                        uint64_t v319 = *(void *)a1;
                        if (*(void *)a1 && *(void *)(v319 + 520) > (unint64_t)v6)
                        {
                          if (*(void *)(v319 + 496) <= (unint64_t)v6)
                          {
                            int v320 = 128;
                          }
                          else
                          {
                            if (*(void *)(v319 + 504) > (unint64_t)v6) {
                              goto LABEL_739;
                            }
                            int v320 = *(unsigned __int16 *)(v319 + 438);
                          }
                        }
                        else
                        {
LABEL_739:
                          int v320 = off_1EB21C9F8(v6);
                        }
                        *((_DWORD *)a1 + 4) = v320;
                        uint64_t v78 = 0;
                        int v23 = 0;
                        LODWORD(v79) = 0;
                        *((_DWORD *)a1 + 6) = strlen(v6) & 0x7FFFFFFF;
                        *((unsigned char *)a1 + 29) |= 4u;
LABEL_676:
                        v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
                        v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
                        v10.i64[0] = 0x8080808080808080;
                        v10.i64[1] = 0x8080808080808080;
                        goto LABEL_698;
                      }
                      int v70 = v6;
                    }
                    else
                    {
                      int v70 = 0;
                    }
                  }
                  else
                  {
                    int v70 = 0;
                    int v6 = &byte_1B0DE9952;
                  }
LABEL_322:
                  if (v24 < 0)
                  {
                    char v342 = v19;
                    uint64_t v78 = (uint64_t)v70;
LABEL_333:
                    LODWORD(v79) = strlen(v6) & 0x7FFFFFFF;
                    v69.i64[0] = 0x100000001;
                    v69.i64[1] = 0x100000001;
                    v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
                    v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
                    v10.i64[0] = 0x8080808080808080;
                    v10.i64[1] = 0x8080808080808080;
                    goto LABEL_457;
                  }
                  if (v19)
                  {
                    uint64_t v150 = v6;
                    if (v24)
                    {
                      do
                      {
                        if (!*v150) {
                          break;
                        }
                        if (*v150 < 0xC0u)
                        {
                          ++v150;
                        }
                        else
                        {
                          do
                            char v151 = *++v150;
                          while ((v151 & 0xC0) == 0x80);
                        }
                        BOOL v172 = v24-- <= 1;
                      }
                      while (!v172);
                    }
                    LODWORD(v79) = v150 - v6;
                    char v342 = 1;
                    uint64_t v78 = (uint64_t)v70;
                    goto LABEL_457;
                  }
                  if (v24)
                  {
                    uint64_t v79 = 0;
                    unint64_t v152 = v24;
                    uint64_t v78 = (uint64_t)v70;
                    while (v79[(void)v6])
                    {
                      if ((const char *)v152 == ++v79)
                      {
                        LODWORD(v79) = v152;
                        break;
                      }
                    }
                  }
                  else
                  {
                    LODWORD(v79) = 0;
                    uint64_t v78 = (uint64_t)v70;
                  }
LABEL_698:
                  uint64_t v308 = (v23 - v79);
                  if ((int)v308 < 1)
                  {
                    if (!v6) {
                      goto LABEL_727;
                    }
                    if ((int)v79 > 0)
                    {
LABEL_713:
                      uint64_t v314 = *((unsigned int *)a1 + 6);
                      if ((v314 + v79) >= *((_DWORD *)a1 + 4))
                      {
                        sub_1B0CE62B0((uint64_t)a1, v6, v79);
                      }
                      else
                      {
                        *((_DWORD *)a1 + 6) = v314 + v79;
                        memcpy((void *)(*((void *)a1 + 1) + v314), v6, v79);
                      }
                      v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
                      v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
                      v10.i64[0] = 0x8080808080808080;
                      v10.i64[1] = 0x8080808080808080;
                      goto LABEL_727;
                    }
                  }
                  else
                  {
                    if ((_BYTE)v22)
                    {
                      if ((int)v79 >= 1 && v6)
                      {
                        uint64_t v309 = *((unsigned int *)a1 + 6);
                        if ((v309 + v79) >= *((_DWORD *)a1 + 4))
                        {
                          sub_1B0CE62B0((uint64_t)a1, v6, v79);
                        }
                        else
                        {
                          *((_DWORD *)a1 + 6) = v309 + v79;
                          memcpy((void *)(*((void *)a1 + 1) + v309), v6, v79);
                        }
                        v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
                        v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
                        v10.i64[0] = 0x8080808080808080;
                        v10.i64[1] = 0x8080808080808080;
                      }
                      else if (v79)
                      {
                        sub_1B0CE1978(32737);
                        v10.i64[0] = 0x8080808080808080;
                        v10.i64[1] = 0x8080808080808080;
                        v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
                        v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
                      }
                      if ((unint64_t)*((unsigned int *)a1 + 6) + v308 < *((unsigned int *)a1 + 4)
                        || (int v315 = sub_1B0CE5EFC((void **)a1, (v23 - v79)),
                            v10.i64[0] = 0x8080808080808080,
                            v10.i64[1] = 0x8080808080808080,
                            v9.i64[0] = 0xC0C0C0C0C0C0C0C0,
                            v9.i64[1] = 0xC0C0C0C0C0C0C0C0,
                            LODWORD(v308) = v315,
                            v315 >= 1))
                      {
                        unsigned int v316 = v308 + 1;
                        do
                        {
                          uint64_t v317 = *((void *)a1 + 1);
                          uint64_t v318 = *((unsigned int *)a1 + 6);
                          *((_DWORD *)a1 + 6) = v318 + 1;
                          *(unsigned char *)(v317 + v318) = 32;
                          --v316;
                        }
                        while (v316 > 1);
                      }
                      goto LABEL_727;
                    }
                    if ((unint64_t)*((unsigned int *)a1 + 6) + v308 < *((unsigned int *)a1 + 4)
                      || (int v310 = sub_1B0CE5EFC((void **)a1, (v23 - v79)),
                          v10.i64[0] = 0x8080808080808080,
                          v10.i64[1] = 0x8080808080808080,
                          v9.i64[0] = 0xC0C0C0C0C0C0C0C0,
                          v9.i64[1] = 0xC0C0C0C0C0C0C0C0,
                          LODWORD(v308) = v310,
                          v310 >= 1))
                    {
                      unsigned int v311 = v308 + 1;
                      do
                      {
                        uint64_t v312 = *((void *)a1 + 1);
                        uint64_t v313 = *((unsigned int *)a1 + 6);
                        *((_DWORD *)a1 + 6) = v313 + 1;
                        *(unsigned char *)(v312 + v313) = 32;
                        --v311;
                      }
                      while (v311 > 1);
                    }
                    if ((int)v79 >= 1 && v6) {
                      goto LABEL_713;
                    }
                  }
                  if (v79)
                  {
                    sub_1B0CE1978(32737);
                    v10.i64[0] = 0x8080808080808080;
                    v10.i64[1] = 0x8080808080808080;
                    v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
                    v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
                  }
LABEL_727:
                  if (v78)
                  {
                    sub_1B0D05C10(*(void **)a1, (void *)v78);
                    v10.i64[0] = 0x8080808080808080;
                    v10.i64[1] = 0x8080808080808080;
                    v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
                    v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
                  }
                  sqlite3_int64 v3 = v16 + 1;
                  uint64_t v5 = v347;
                  goto LABEL_10;
                case 7u:
                  uint64_t v78 = 0;
                  LOBYTE(__src[0]) = 37;
                  int v6 = (char *)__src;
                  LODWORD(v79) = 1;
                  goto LABEL_698;
                case 8u:
                  if ((v348 & 2) == 0)
                  {
                    unint64_t v81 = (unsigned int *)v352;
                    v352 += 8;
                    unsigned int v82 = *v81;
                    if (v82 <= 0x7F)
                    {
                      LOBYTE(__src[0]) = v82;
LABEL_424:
                      LODWORD(v79) = 1;
                      v69.i64[0] = 0x100000001;
                      v69.i64[1] = 0x100000001;
                      goto LABEL_425;
                    }
                    v69.i64[0] = 0x100000001;
                    v69.i64[1] = 0x100000001;
                    if (v82 <= 0x7FF)
                    {
                      LOBYTE(__src[0]) = (v82 >> 6) | 0xC0;
                      BYTE1(__src[0]) = v82 & 0x3F | 0x80;
                      LODWORD(v79) = 2;
                      goto LABEL_425;
                    }
                    if (!HIWORD(v82))
                    {
                      LOBYTE(__src[0]) = (v82 >> 12) | 0xE0;
                      BYTE1(__src[0]) = (v82 >> 6) & 0x3F | 0x80;
                      BYTE2(__src[0]) = v82 & 0x3F | 0x80;
                      LODWORD(v79) = 3;
                      goto LABEL_425;
                    }
                    LOBYTE(__src[0]) = (v82 >> 18) & 7 | 0xF0;
                    BYTE1(__src[0]) = (v82 >> 12) & 0x3F | 0x80;
                    BYTE2(__src[0]) = (v82 >> 6) & 0x3F | 0x80;
                    HIBYTE(__src[0]) = v82 & 0x3F | 0x80;
                    goto LABEL_657;
                  }
                  uint64_t v113 = *(int *)(v5 + 4);
                  if (*(_DWORD *)v5 <= (int)v113) {
                    goto LABEL_423;
                  }
                  uint64_t v114 = *(void *)(v5 + 8);
                  *(_DWORD *)(v5 + 4) = v113 + 1;
                  uint64_t v115 = *(void *)(v114 + 8 * v113);
                  if (!v115) {
                    goto LABEL_423;
                  }
                  int v116 = *(unsigned __int16 *)(v115 + 20);
                  if ((~v116 & 0x202) != 0 || *(unsigned char *)(v115 + 22) != 1)
                  {
                    if (v116) {
                      goto LABEL_423;
                    }
                    long long v117 = (unsigned char *)sub_1B0D18254((int *)v115, 1);
                    v10.i64[0] = 0x8080808080808080;
                    v10.i64[1] = 0x8080808080808080;
                    v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
                    v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
                  }
                  else
                  {
                    long long v117 = *(unsigned char **)(v115 + 8);
                  }
                  if (!v117)
                  {
LABEL_423:
                    LOBYTE(__src[0]) = 0;
                    goto LABEL_424;
                  }
                  LOBYTE(__src[0]) = *v117;
                  v69.i64[0] = 0x100000001;
                  v69.i64[1] = 0x100000001;
                  if (LOBYTE(__src[0]) >= 0xC0u && (v117[1] & 0xC0) == 0x80)
                  {
                    BYTE1(__src[0]) = v117[1];
                    if ((v117[2] & 0xC0) == 0x80)
                    {
                      BYTE2(__src[0]) = v117[2];
                      if ((v117[3] & 0xC0) == 0x80)
                      {
                        HIBYTE(__src[0]) = v117[3];
LABEL_657:
                        LODWORD(v79) = 4;
                        goto LABEL_425;
                      }
                      LODWORD(v79) = 3;
                    }
                    else
                    {
                      LODWORD(v79) = 2;
                    }
                  }
                  else
                  {
                    LODWORD(v79) = 1;
                  }
LABEL_425:
                  if (v24 >= 2)
                  {
                    int v194 = v24 - 1;
                    v23 -= v24 - 1;
                    if (v23 >= 2 && !(_BYTE)v22)
                    {
                      uint64_t v195 = (v23 - 1);
                      if ((unint64_t)*((unsigned int *)a1 + 6) + v195 < *((unsigned int *)a1 + 4)
                        || (LODWORD(v195) = sub_1B0CE5EFC((void **)a1, v195), (int)v195 >= 1))
                      {
                        unsigned int v196 = v195 + 1;
                        do
                        {
                          uint64_t v197 = *((void *)a1 + 1);
                          uint64_t v198 = *((unsigned int *)a1 + 6);
                          *((_DWORD *)a1 + 6) = v198 + 1;
                          *(unsigned char *)(v197 + v198) = 32;
                          --v196;
                        }
                        while (v196 > 1);
                      }
                      int v23 = 0;
                    }
                    uint64_t v199 = *((unsigned int *)a1 + 6);
                    if ((v199 + v79) >= *((_DWORD *)a1 + 4))
                    {
                      sub_1B0CE62B0((uint64_t)a1, __src, v79);
                    }
                    else
                    {
                      *((_DWORD *)a1 + 6) = v199 + v79;
                      memcpy((void *)(*((void *)a1 + 1) + v199), __src, v79);
                    }
                    v69.i64[0] = 0x100000001;
                    v69.i64[1] = 0x100000001;
                    v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
                    v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
                    v10.i64[0] = 0x8080808080808080;
                    v10.i64[1] = 0x8080808080808080;
                    if (v24 >= 3)
                    {
                      uint64_t v200 = 1;
                      while (1)
                      {
                        if (v200 >= (v194 - 1)) {
                          uint64_t v201 = (v194 - 1);
                        }
                        else {
                          uint64_t v201 = v200;
                        }
                        uint64_t v202 = v201 * v79;
                        if (v202 + *((unsigned int *)a1 + 6) >= *((unsigned int *)a1 + 4))
                        {
                          sub_1B0CE5EFC((void **)a1, v201 * v79);
                          v10.i64[0] = 0x8080808080808080;
                          v10.i64[1] = 0x8080808080808080;
                          v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
                          v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
                          v69.i64[0] = 0x100000001;
                          v69.i64[1] = 0x100000001;
                        }
                        if (*((unsigned char *)a1 + 28)) {
                          break;
                        }
                        uint64_t v203 = *((void *)a1 + 1);
                        if ((int)v202 < 1 || v203 == 0)
                        {
                          if (v202)
                          {
                            sub_1B0CE1978(32737);
                            v10.i64[0] = 0x8080808080808080;
                            v10.i64[1] = 0x8080808080808080;
                            v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
                            v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
                            v69.i64[0] = 0x100000001;
                            v69.i64[1] = 0x100000001;
                          }
                        }
                        else
                        {
                          uint64_t v205 = *((unsigned int *)a1 + 6);
                          v206 = (const void *)(v203 + v205 - v202);
                          if ((v205 + v202) < *((_DWORD *)a1 + 4))
                          {
                            *((_DWORD *)a1 + 6) = v205 + v202;
                            memcpy((void *)(v203 + v205), v206, v202);
                          }
                          else
                          {
                            sub_1B0CE62B0((uint64_t)a1, v206, v201 * v79);
                          }
                          v69.i64[0] = 0x100000001;
                          v69.i64[1] = 0x100000001;
                          v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
                          v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
                          v10.i64[0] = 0x8080808080808080;
                          v10.i64[1] = 0x8080808080808080;
                        }
                        v194 -= v201;
                        uint64_t v200 = 2 * v201;
                        int v6 = (char *)__src;
                        if (v194 <= 1)
                        {
                          char v342 = 1;
                          uint64_t v78 = 0;
                          goto LABEL_457;
                        }
                      }
                    }
                  }
                  uint64_t v78 = 0;
                  int v6 = (char *)__src;
                  char v342 = 1;
LABEL_457:
                  if (!v342 || v23 < 1 || (int)v79 < 1) {
                    goto LABEL_698;
                  }
                  if (v79 < 8 || (unint64_t v207 = v79 - 1, HIDWORD(v207)))
                  {
                    uint64_t v209 = v79;
                  }
                  else
                  {
                    if (v79 < 0x20)
                    {
                      uint64_t v208 = 0;
LABEL_474:
                      uint64_t v209 = v79 & 7;
                      int32x4_t v230 = 0uLL;
                      int32x4_t v231 = (int32x4_t)v23;
                      uint64_t v232 = ~v208 + v79;
                      uint64_t v233 = v208 - (v79 & 0xFFFFFFF8);
                      do
                      {
                        uint16x8_t v234 = vmovl_u8((uint8x8_t)vceq_s8(vrev64_s8(vand_s8(*(int8x8_t *)&v6[v232 - 7], (int8x8_t)0xC0C0C0C0C0C0C0C0)), (int8x8_t)0x8080808080808080));
                        int32x4_t v230 = vaddq_s32(v230, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v234), v69));
                        int32x4_t v231 = vaddq_s32(v231, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v234.i8), v69));
                        v232 -= 8;
                        v233 += 8;
                      }
                      while (v233);
                      int v23 = vaddvq_s32(vaddq_s32(v231, v230));
                      if ((v79 & 0xFFFFFFF8) == (unint64_t)v79) {
                        goto LABEL_698;
                      }
                      goto LABEL_465;
                    }
                    uint64_t v208 = v79 & 0xFFFFFFE0;
                    int32x4_t v211 = 0uLL;
                    int32x4_t v212 = (int32x4_t)v23;
                    uint64_t v213 = v208;
                    int32x4_t v214 = 0uLL;
                    int32x4_t v215 = 0uLL;
                    int32x4_t v216 = 0uLL;
                    v217.i64[0] = 0x100000001;
                    v217.i64[1] = 0x100000001;
                    int32x4_t v218 = 0uLL;
                    int32x4_t v219 = 0uLL;
                    int32x4_t v220 = 0uLL;
                    do
                    {
                      v221 = &v6[v207];
                      int8x16_t v222 = vrev64q_s8(vandq_s8(*(int8x16_t *)(v221 - 15), v9));
                      int8x16_t v223 = vrev64q_s8(vandq_s8(*(int8x16_t *)(v221 - 31), v9));
                      uint8x16_t v224 = (uint8x16_t)vceqq_s8(vextq_s8(v222, v222, 8uLL), v10);
                      uint16x8_t v225 = vmovl_u8(*(uint8x8_t *)v224.i8);
                      uint16x8_t v226 = vmovl_high_u8(v224);
                      uint8x16_t v227 = (uint8x16_t)vceqq_s8(vextq_s8(v223, v223, 8uLL), v10);
                      uint16x8_t v228 = vmovl_u8(*(uint8x8_t *)v227.i8);
                      uint16x8_t v229 = vmovl_high_u8(v227);
                      int32x4_t v215 = vaddq_s32(v215, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v226), v217));
                      int32x4_t v214 = vaddq_s32(v214, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v226.i8), v217));
                      int32x4_t v211 = vaddq_s32(v211, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v225), v217));
                      int32x4_t v212 = vaddq_s32(v212, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v225.i8), v217));
                      int32x4_t v220 = vaddq_s32(v220, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v229), v217));
                      int32x4_t v219 = vaddq_s32(v219, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v229.i8), v217));
                      int32x4_t v218 = vaddq_s32(v218, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v228), v217));
                      int32x4_t v216 = vaddq_s32(v216, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v228.i8), v217));
                      v207 -= 32;
                      v213 -= 32;
                    }
                    while (v213);
                    int v23 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v216, v212), vaddq_s32(v219, v214)), vaddq_s32(vaddq_s32(v218, v211), vaddq_s32(v220, v215))));
                    if (v208 == v79) {
                      goto LABEL_698;
                    }
                    v69.i64[0] = 0x100000001;
                    v69.i64[1] = 0x100000001;
                    if ((v79 & 0x18) != 0) {
                      goto LABEL_474;
                    }
                    uint64_t v209 = v79 & 0x1F;
                  }
LABEL_465:
                  unint64_t v210 = v209 + 1;
                  do
                  {
                    if ((v6[(v210 - 2)] & 0xC0) == 0x80) {
                      ++v23;
                    }
                    --v210;
                  }
                  while (v210 > 1);
                  goto LABEL_698;
                case 9u:
                case 0xAu:
                case 0xEu:
                  if (v60 == 6) {
                    int v65 = 34;
                  }
                  else {
                    int v65 = 39;
                  }
                  if ((v348 & 2) == 0)
                  {
                    int v66 = (uint64_t *)v352;
                    v352 += 8;
                    uint64_t v67 = *v66;
                    goto LABEL_223;
                  }
                  uint64_t v75 = *(int *)(v5 + 4);
                  if (*(_DWORD *)v5 <= (int)v75) {
                    goto LABEL_222;
                  }
                  uint64_t v76 = *(void *)(v5 + 8);
                  *(_DWORD *)(v5 + 4) = v75 + 1;
                  uint64_t v67 = *(void *)(v76 + 8 * v75);
                  if (v67)
                  {
                    int v77 = *(unsigned __int16 *)(v67 + 20);
                    if ((~v77 & 0x202) != 0 || *(unsigned char *)(v67 + 22) != 1)
                    {
                      if (v77)
                      {
LABEL_222:
                        uint64_t v67 = 0;
                      }
                      else
                      {
                        unsigned int v121 = v60;
                        uint64_t v67 = sub_1B0D18254((int *)v67, 1);
                        unsigned int v60 = v121;
                        v10.i64[0] = 0x8080808080808080;
                        v10.i64[1] = 0x8080808080808080;
                        v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
                        v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
                      }
                    }
                    else
                    {
                      uint64_t v67 = *(void *)(v67 + 8);
                    }
                  }
LABEL_223:
                  uint64_t v122 = "(NULL)";
                  if (v60 == 5) {
                    uint64_t v122 = "NULL";
                  }
                  if (v67) {
                    int v123 = (unsigned __int8 *)v67;
                  }
                  else {
                    int v123 = (unsigned __int8 *)v122;
                  }
                  if (!v24)
                  {
                    uint64_t v127 = 0;
                    uint64_t v124 = 0;
                    goto LABEL_241;
                  }
                  uint64_t v124 = 0;
                  uint64_t v125 = 0;
                  uint64_t v126 = v24;
                  while (1)
                  {
                    unsigned int v128 = v123[v125];
                    if (!v123[v125]) {
                      break;
                    }
                    if (v128 == v65) {
                      ++v124;
                    }
                    if (v19 && v128 >= 0xC0)
                    {
                      do
                      {
                        uint64_t v127 = v125 + 1;
                        int v129 = v123[++v125] & 0xC0;
                      }
                      while (v129 == 128);
                    }
                    else
                    {
                      uint64_t v127 = v125 + 1;
                    }
                    uint64_t v125 = v127;
                    if (!--v126) {
                      goto LABEL_241;
                    }
                  }
                  uint64_t v127 = v125;
LABEL_241:
                  BOOL v131 = v60 == 5 && v67 != 0;
                  uint64_t v132 = v127 + v124 + 3;
                  if (v132 < 513)
                  {
                    uint64_t v135 = 0;
                    int v6 = (char *)__src;
                    v69.i64[0] = 0x100000001;
                    v69.i64[1] = 0x100000001;
                  }
                  else
                  {
                    if (*((unsigned char *)a1 + 28)) {
                      return;
                    }
                    if (v132 > (unint64_t)*((unsigned int *)a1 + 4))
                    {
                      unint64_t v133 = *((unsigned int *)a1 + 5);
                      if (v132 > v133) {
                        goto LABEL_760;
                      }
                    }
                    BOOL v350 = v131;
                    if (*(void *)a1) {
                      uint64_t v134 = sub_1B0D05DC0(*(void *)a1, v132);
                    }
                    else {
                      uint64_t v134 = sub_1B0C7FC94(v132);
                    }
                    int v6 = (char *)v134;
                    v69.i64[0] = 0x100000001;
                    v69.i64[1] = 0x100000001;
                    v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
                    v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
                    v10.i64[0] = 0x8080808080808080;
                    v10.i64[1] = 0x8080808080808080;
                    uint64_t v135 = v134;
                    BOOL v131 = v350;
                    if (!v134) {
                      goto LABEL_754;
                    }
                  }
                  if (v131)
                  {
                    *int v6 = v65;
                    uint64_t v136 = 1;
                  }
                  else
                  {
                    uint64_t v136 = 0;
                  }
                  char v342 = v19;
                  if (v127 >= 1)
                  {
                    do
                    {
                      int v137 = *v123++;
                      uint64_t v79 = (const char *)(v136 + 1);
                      v6[v136] = v137;
                      if (v137 == v65)
                      {
                        v79[(void)v6] = v65;
                        uint64_t v79 = (const char *)(v136 + 2);
                      }
                      uint64_t v136 = (uint64_t)v79;
                      --v127;
                    }
                    while (v127);
                  }
                  else
                  {
                    uint64_t v79 = (const char *)v136;
                  }
                  if (v131) {
                    (v79++)[(void)v6] = v65;
                  }
                  uint64_t v78 = v135;
                  v79[(void)v6] = 0;
                  goto LABEL_457;
                case 0xBu:
                  if ((*((unsigned char *)a1 + 29) & 1) == 0) {
                    return;
                  }
                  int v83 = v352;
                  v352 += 8;
                  int v84 = (size_t *)*v83;
                  if ((_BYTE)v20)
                  {
                    if (v84 && (*((unsigned char *)v84 + 5) & 8) == 0)
                    {
                      int v85 = (const void *)v84[1];
                      if (v85)
                      {
                        int v86 = strlen((const char *)v84[1]);
                        v10.i64[0] = 0x8080808080808080;
                        v10.i64[1] = 0x8080808080808080;
                        v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
                        v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
                        unsigned int v87 = v86 & 0x3FFFFFFF;
                        if ((v86 & 0x3FFFFFFF) != 0)
                        {
                          uint64_t v88 = *((unsigned int *)a1 + 6);
                          if (v88 + v87 >= *((_DWORD *)a1 + 4))
                          {
                            sub_1B0CE62B0((uint64_t)a1, v85, v87);
                          }
                          else
                          {
                            *((_DWORD *)a1 + 6) = v88 + v87;
                            memcpy((void *)(*((void *)a1 + 1) + v88), v85, v86 & 0x3FFFFFFF);
                          }
                          v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
                          v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
                          v10.i64[0] = 0x8080808080808080;
                          v10.i64[1] = 0x8080808080808080;
                        }
                      }
                      do
                      {
                        if ((*((unsigned char *)v84 + 4) & 3) == 0)
                        {
                          int v304 = *((_DWORD *)v84 + 14);
                          if (v304 > 0)
                          {
                            uint64_t v78 = 0;
                            int v23 = 0;
                            LODWORD(v79) = 0;
                            *(_DWORD *)(*(void *)a1 + 84) = v304;
                            goto LABEL_698;
                          }
                        }
                        int v84 = (size_t *)v84[2];
                      }
                      while (v84);
                    }
LABEL_696:
                    uint64_t v78 = 0;
LABEL_697:
                    int v23 = 0;
                    LODWORD(v79) = 0;
                    goto LABEL_698;
                  }
                  if (!v84) {
                    goto LABEL_696;
                  }
                  size_t v118 = *((unsigned int *)v84 + 2);
                  if (!v118) {
                    goto LABEL_696;
                  }
                  stat v119 = (const void *)*v84;
                  if ((int)v118 < 1 || v119 == 0)
                  {
                    sub_1B0CE1978(32737);
                  }
                  else
                  {
                    uint64_t v291 = *((unsigned int *)a1 + 6);
                    if ((v291 + v118) >= *((_DWORD *)a1 + 4))
                    {
                      sub_1B0CE62B0((uint64_t)a1, v119, v118);
                    }
                    else
                    {
                      *((_DWORD *)a1 + 6) = v291 + v118;
                      memcpy((void *)(*((void *)a1 + 1) + v291), v119, v118);
                    }
                  }
                  uint64_t v78 = *(void *)a1;
                  v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
                  v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
                  v10.i64[0] = 0x8080808080808080;
                  v10.i64[1] = 0x8080808080808080;
                  if (!*(void *)a1) {
                    goto LABEL_697;
                  }
                  if (*(_DWORD *)(v78 + 84) != -2) {
                    goto LABEL_696;
                  }
                  uint64_t v305 = *(void *)(v78 + 344);
                  if (!v305) {
                    goto LABEL_696;
                  }
                  size_t v306 = *(void *)(v305 + 336);
                  if (!v306) {
                    goto LABEL_696;
                  }
                  size_t v307 = *v84;
                  if (v306 > v307) {
                    goto LABEL_696;
                  }
                  if (v306 + strlen(*(const char **)(v305 + 336)) <= v307)
                  {
LABEL_675:
                    uint64_t v78 = 0;
                    int v23 = 0;
                    LODWORD(v79) = 0;
                  }
                  else
                  {
                    int v23 = 0;
                    LODWORD(v79) = 0;
                    *(_DWORD *)(v78 + 84) = v307 - v306;
                    uint64_t v78 = 0;
                  }
                  goto LABEL_676;
                case 0xCu:
                  if ((*((unsigned char *)a1 + 29) & 1) == 0) {
                    return;
                  }
                  uint64_t v89 = v352;
                  v352 += 8;
                  uint64_t v90 = *v89;
                  char v91 = v19;
                  uint64_t v79 = *(const char **)(v90 + 24);
                  if (v79) {
                    BOOL v92 = v91 == 0;
                  }
                  else {
                    BOOL v92 = 0;
                  }
                  if (v92) {
                    goto LABEL_671;
                  }
                  if (*(void *)(v90 + 16))
                  {
                    ssize_t v93 = *(const void **)(v90 + 8);
                    if (v93)
                    {
                      int v94 = strlen(*(const char **)(v90 + 8));
                      unsigned int v95 = v94 & 0x3FFFFFFF;
                      if ((v94 & 0x3FFFFFFF) != 0)
                      {
                        uint64_t v96 = *((unsigned int *)a1 + 6);
                        if (v96 + v95 >= *((_DWORD *)a1 + 4))
                        {
                          sub_1B0CE62B0((uint64_t)a1, v93, v95);
                        }
                        else
                        {
                          *((_DWORD *)a1 + 6) = v96 + v95;
                          memcpy((void *)(*((void *)a1 + 1) + v96), v93, v94 & 0x3FFFFFFF);
                        }
                      }
                      uint64_t v298 = *((unsigned int *)a1 + 6);
                      if ((v298 + 1) >= *((_DWORD *)a1 + 4))
                      {
                        sub_1B0CE62B0((uint64_t)a1, ".", 1u);
                      }
                      else
                      {
                        *((_DWORD *)a1 + 6) = v298 + 1;
                        *(unsigned char *)(*((void *)a1 + 1) + v298) = 46;
                      }
                    }
                    uint64_t v79 = *(const char **)(v90 + 16);
                    if (!v79)
                    {
                      uint64_t v78 = 0;
                      int v23 = 0;
                      goto LABEL_676;
                    }
                  }
                  else if (!v79)
                  {
                    uint64_t v158 = *(void *)(v90 + 40);
                    int v159 = *(_DWORD *)(v158 + 16);
                    if ((*(unsigned char *)(v158 + 5) & 8) != 0) {
                      sqlite3_str_appendf(a1, "(join-%u)", v159);
                    }
                    else {
                      sqlite3_str_appendf(a1, "(subquery-%u)", v159);
                    }
                    goto LABEL_675;
                  }
LABEL_671:
                  int v299 = strlen(v79);
                  unsigned int v300 = v299 & 0x3FFFFFFF;
                  if ((v299 & 0x3FFFFFFF) != 0)
                  {
                    uint64_t v301 = *((unsigned int *)a1 + 6);
                    if (v301 + v300 >= *((_DWORD *)a1 + 4))
                    {
                      sub_1B0CE62B0((uint64_t)a1, v79, v300);
                    }
                    else
                    {
                      *((_DWORD *)a1 + 6) = v301 + v300;
                      memcpy((void *)(*((void *)a1 + 1) + v301), v79, v299 & 0x3FFFFFFF);
                    }
                  }
                  goto LABEL_675;
                case 0xDu:
                  int v27 = 2;
LABEL_184:
                  int v349 = 0;
                  goto LABEL_185;
                case 0x10u:
LABEL_185:
                  if (((0x3E0FFAuLL >> v60) & 1) == 0)
                  {
                    if ((v348 & 2) == 0)
                    {
                      if (v27)
                      {
                        int v97 = (uint64_t *)v352;
                        v352 += 8;
                        uint64_t v98 = *v97;
                      }
                      else
                      {
                        uint64_t v138 = (int *)v352;
                        v352 += 8;
                        uint64_t v98 = *v138;
                      }
LABEL_268:
                      if (v98 < 0) {
LABEL_269:
                      }
                        int v21 = 45;
                      goto LABEL_344;
                    }
                    uint64_t v105 = *(int *)(v5 + 4);
                    if (*(_DWORD *)v5 > (int)v105)
                    {
                      uint64_t v106 = *(void *)(v5 + 8);
                      *(_DWORD *)(v5 + 4) = v105 + 1;
                      uint64_t v107 = *(void *)(v106 + 8 * v105);
                      if (v107)
                      {
                        __int16 v108 = *(_WORD *)(v107 + 20);
                        if ((v108 & 0x24) != 0)
                        {
                          uint64_t v98 = *(void *)v107;
                          goto LABEL_268;
                        }
                        if ((v108 & 8) != 0)
                        {
                          double v302 = *(double *)v107;
                          if (*(double *)v107 < -9.22337204e18)
                          {
                            uint64_t v98 = 0x8000000000000000;
                            goto LABEL_269;
                          }
                          if (v302 <= 9.22337204e18)
                          {
                            uint64_t v98 = (uint64_t)v302;
                            goto LABEL_268;
                          }
                          uint64_t v98 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_344:
                          if (v98 >= 0) {
                            double v100 = *(double *)&v98;
                          }
                          else {
                            *(void *)&double v100 = -v98;
                          }
                          goto LABEL_347;
                        }
                        if ((v108 & 0x12) != 0 && *(void *)(v107 + 8))
                        {
                          char v160 = v20;
                          int v161 = v18;
                          unsigned int v162 = v60;
                          uint64_t v98 = sub_1B0D186C0(v107);
                          unsigned int v60 = v162;
                          LODWORD(v18) = v161;
                          LOBYTE(v20) = v160;
                          v10.i64[0] = 0x8080808080808080;
                          v10.i64[1] = 0x8080808080808080;
                          v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
                          v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
                          goto LABEL_268;
                        }
                      }
                      else
                      {
                        char v153 = v20;
                        int v154 = v18;
                        unsigned int v155 = v60;
                        sub_1B0CE1978(89717);
                        unsigned int v60 = v155;
                        LODWORD(v18) = v154;
                        LOBYTE(v20) = v153;
                        v10.i64[0] = 0x8080808080808080;
                        v10.i64[1] = 0x8080808080808080;
                        v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
                        v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
                      }
                    }
                    uint64_t v98 = 0;
                    goto LABEL_344;
                  }
                  if ((v348 & 2) == 0)
                  {
                    int v21 = 0;
                    if (v27)
                    {
                      uint64_t v99 = v352;
                      v352 += 8;
                      double v100 = *(double *)v99;
                    }
                    else
                    {
                      uint64_t v139 = (unsigned int *)v352;
                      v352 += 8;
                      *(void *)&double v100 = *v139;
                    }
                    goto LABEL_347;
                  }
                  uint64_t v109 = *(int *)(v5 + 4);
                  if (*(_DWORD *)v5 <= (int)v109) {
                    goto LABEL_370;
                  }
                  uint64_t v110 = *(void *)(v5 + 8);
                  *(_DWORD *)(v5 + 4) = v109 + 1;
                  uint64_t v111 = *(void *)(v110 + 8 * v109);
                  if (!v111)
                  {
                    int v156 = v18;
                    unsigned int v157 = v60;
                    sub_1B0CE1978(89717);
                    unsigned int v60 = v157;
                    LODWORD(v18) = v156;
                    v10.i64[0] = 0x8080808080808080;
                    v10.i64[1] = 0x8080808080808080;
                    v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
                    v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
                    int v21 = 0;
LABEL_371:
                    double v100 = 0.0;
                    LOBYTE(v20) = 0;
                    goto LABEL_372;
                  }
                  __int16 v112 = *(_WORD *)(v111 + 20);
                  if ((v112 & 0x24) != 0)
                  {
                    int v21 = 0;
                    double v100 = *(double *)v111;
                    goto LABEL_347;
                  }
                  if ((v112 & 8) == 0)
                  {
                    if ((v112 & 0x12) == 0 || !*(void *)(v111 + 8))
                    {
LABEL_370:
                      int v21 = 0;
                      goto LABEL_371;
                    }
                    char v163 = v20;
                    int v164 = v18;
                    unsigned int v165 = v60;
                    uint64_t v166 = sub_1B0D186C0(v111);
                    unsigned int v60 = v165;
                    LODWORD(v18) = v164;
                    LOBYTE(v20) = v163;
                    v10.i64[0] = 0x8080808080808080;
                    v10.i64[1] = 0x8080808080808080;
                    v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
                    v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
                    double v100 = *(double *)&v166;
                    int v21 = 0;
LABEL_347:
                    if (v100 != 0.0) {
                      goto LABEL_372;
                    }
                    goto LABEL_371;
                  }
                  double v303 = *(double *)v111;
                  if (*(double *)v111 >= -9.22337204e18)
                  {
                    int v21 = 0;
                    if (v303 <= 9.22337204e18)
                    {
                      *(void *)&double v100 = (uint64_t)v303;
                      goto LABEL_347;
                    }
                    double v100 = NAN;
                  }
                  else
                  {
                    int v21 = 0;
                    double v100 = -0.0;
                  }
LABEL_372:
                  if (v18 && v24 <= v23 - (v21 != 0)) {
                    int v24 = v23 - (v21 != 0);
                  }
                  char v344 = v20;
                  if (v24 >= 332)
                  {
                    if (v349) {
                      unint64_t v167 = v24 + 10 + v24 / 3uLL;
                    }
                    else {
                      unint64_t v167 = v24 + 10;
                    }
                    if (*((unsigned char *)a1 + 28)) {
                      return;
                    }
                    if (v167 > *((unsigned int *)a1 + 4))
                    {
                      unint64_t v133 = *((unsigned int *)a1 + 5);
                      if (v167 > v133) {
                        goto LABEL_760;
                      }
                    }
                    unsigned int v169 = v60;
                    if (*(void *)a1) {
                      int v168 = (_DWORD *)sub_1B0D05DC0(*(void *)a1, v167);
                    }
                    else {
                      int v168 = (_DWORD *)sub_1B0C7FC94(v167);
                    }
                    if (!v168)
                    {
LABEL_754:
                      *((unsigned char *)a1 + 28) = 7;
                      if (*((_DWORD *)a1 + 5))
                      {
                        char v322 = *((unsigned char *)a1 + 29);
                        if ((v322 & 4) != 0)
                        {
                          v323 = (void *)*((void *)a1 + 1);
                          if (v323)
                          {
                            sub_1B0D05C10(*(void **)a1, v323);
                            char v322 = *((unsigned char *)a1 + 29);
                          }
                          *((unsigned char *)a1 + 29) = v322 & 0xFB;
                        }
                        *((_DWORD *)a1 + 4) = 0;
                        *((_DWORD *)a1 + 6) = 0;
                        *((void *)a1 + 1) = 0;
                      }
                      return;
                    }
                    unsigned int v60 = v169;
                    v340 = v168;
                    v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
                    v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
                    v10.i64[0] = 0x8080808080808080;
                    v10.i64[1] = 0x8080808080808080;
                    LOBYTE(v20) = v344;
                  }
                  else
                  {
                    v340 = 0;
                    LODWORD(v167) = 512;
                    int v168 = __src;
                  }
                  stat v170 = (char *)v168 + (int)v167 - 1;
                  int v171 = v170;
                  if (v60 == 22)
                  {
                    BOOL v172 = __ROR8__(0xCCCCCCCCCCCCCCCDLL * (*(void *)&v100 / 0xAuLL) + 0x3333333333333333, 1) < 0x199999999999999AuLL
                        || (*(void *)&v100 % 0xAuLL) > 3;
                    if (v172) {
                      unsigned int v173 = 0;
                    }
                    else {
                      unsigned int v173 = *(void *)&v100 % 0xAuLL;
                    }
                    uint64_t v174 = 2 * v173;
                    char v175 = aThstndrd[(v174 & 0xFFFFFFFE) + 1];
                    *(v170 - 2) = aThstndrd[v174];
                    int v171 = v170 - 2;
                    *(v170 - 1) = v175;
                  }
                  uint64_t v176 = 0;
                  uint64_t v177 = (char *)&byte_1B0DE16C7[6 * v60];
                  int v178 = &a0123456789abcd_0[v177[4]];
                  unint64_t v179 = v177[1];
                  int v180 = v167 + v168;
                  unsigned int v181 = v24 + v171 - (v167 + v168);
                  do
                  {
                    v171[--v176] = v178[*(void *)&v100 % v179];
                    --v181;
                    BOOL v270 = *(void *)&v100 >= v179;
                    *(void *)&v100 /= v179;
                  }
                  while (v270);
                  if (v24 <= ~v171 + (int)v167 + (int)v168 - (int)v176)
                  {
                    int v6 = &v171[v176];
                    int v24 = ~v171 + v167 + v168 - v176;
                  }
                  else
                  {
                    int v6 = &v171[v176 - v181 - 1];
                    unsigned int v182 = v60;
                    int v183 = v21;
                    int v184 = (int)v170;
                    memset(v6, 48, (v24 + v171 - v180 + v176) + 1);
                    LODWORD(v170) = v184;
                    int v21 = v183;
                    unsigned int v60 = v182;
                    LOBYTE(v20) = v344;
                    v10.i64[0] = 0x8080808080808080;
                    v10.i64[1] = 0x8080808080808080;
                    v9.i64[0] = 0xC0C0C0C0C0C0C0C0;
                    v9.i64[1] = 0xC0C0C0C0C0C0C0C0;
                  }
                  if (v349 && (int v185 = (v24 - 1) / 3, v6 += (v24 - 1) / -3, v24 >= 4))
                  {
                    int v186 = 0;
                    unsigned int v187 = (v24 - 1) % 3u + 1;
                    uint64_t v78 = (uint64_t)v340;
                    do
                    {
                      uint64_t v188 = v186;
                      v6[v186] = v6[v186 + (uint64_t)v185];
                      if (!--v187)
                      {
                        ++v186;
                        v6[v188 + 1] = v349;
                        --v185;
                        unsigned int v187 = 3;
                      }
                      ++v186;
                    }
                    while (v185 > 0);
                  }
                  else
                  {
                    uint64_t v78 = (uint64_t)v340;
                  }
                  if (v21) {
                    *--int v6 = v21;
                  }
                  if ((_BYTE)v20 && ((0x77F2FFuLL >> v60) & 1) == 0)
                  {
                    long long v189 = (char *)&unk_1B0DE1751 + byte_1B0DE16C7[6 * v60 + 5];
                    char v192 = *v189;
                    long long v190 = v189 + 1;
                    char v191 = v192;
                    do
                    {
                      *--int v6 = v191;
                      int v193 = *v190++;
                      char v191 = v193;
                    }
                    while (v193);
                  }
                  LODWORD(v79) = v170 - v6;
                  goto LABEL_698;
                default:
                  return;
              }
            }
            --v16;
LABEL_29:
            uint64_t v25 = v22;
LABEL_30:
            int v26 = *++v16;
            LOBYTE(v15) = v26;
            uint64_t v22 = v25;
            if (!v26) {
              return;
            }
            break;
          case '0':
            uint64_t v18 = 1;
            goto LABEL_29;
          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
          case '8':
          case '9':
            int v28 = (char)v15 - 48;
            int v29 = v16 + 1;
            int v15 = (char)v16[1];
            if ((v15 - 48) > 9)
            {
              int v31 = v16[1];
            }
            else
            {
              do
              {
                int v28 = v15 + 10 * v28 - 48;
                int v30 = (char)*++v29;
                int v15 = v30;
              }
              while ((v30 - 48) < 0xA);
              int v31 = v15;
              uint64_t v16 = v29 - 1;
            }
            int v23 = v28 & 0x7FFFFFFF;
            if (v31 == 46 || v31 == 108) {
              goto LABEL_29;
            }
            int v27 = 0;
            uint64_t v16 = v29;
            goto LABEL_106;
          case 'l':
            int v15 = v16[1];
            if (v15 == 108)
            {
              signed __int8 v61 = v16[2];
              v16 += 2;
              int v27 = 2;
              int v15 = v61;
            }
            else
            {
              int v27 = 1;
              ++v16;
              int v15 = (char)v15;
            }
            goto LABEL_106;
          default:
            goto LABEL_106;
        }
      }
    }
  }

  sub_1B0CE1978(31910);
}

void sqlite3_str_append(sqlite3_str *a1, const char *zIn, int N)
{
  if (a1)
  {
    if (zIn && N > 0)
    {
      uint64_t v3 = *((unsigned int *)a1 + 6);
      if ((v3 + N) >= *((_DWORD *)a1 + 4))
      {
        sub_1B0CE62B0((uint64_t)a1, zIn, N);
      }
      else
      {
        *((_DWORD *)a1 + 6) = v3 + N;
        memcpy((void *)(*((void *)a1 + 1) + v3), zIn, N);
      }
    }
    else if (N)
    {
      sub_1B0CE1978(32737);
    }
  }
  else
  {
    sub_1B0CE1978(32733);
  }
}

void sqlite3_str_appendchar(sqlite3_str *a1, int N, char C)
{
  if (!a1 || N < 0)
  {
    sub_1B0CE1978(32699);
  }
  else
  {
    if (*((unsigned int *)a1 + 6) + (unint64_t)N >= *((unsigned int *)a1 + 4))
    {
      N = sub_1B0CE5EFC((void **)a1, N);
      if (N < 1) {
        return;
      }
    }
    else if (!N)
    {
      return;
    }
    unsigned int v6 = N + 1;
    do
    {
      uint64_t v7 = *((void *)a1 + 1);
      uint64_t v8 = *((unsigned int *)a1 + 6);
      *((_DWORD *)a1 + 6) = v8 + 1;
      *(unsigned char *)(v7 + v8) = C;
      --v6;
    }
    while (v6 > 1);
  }
}

uint64_t sub_1B0CE5EFC(void **a1, uint64_t a2)
{
  if (*((unsigned char *)a1 + 28)) {
    return 0;
  }
  uint64_t v5 = *((unsigned int *)a1 + 5);
  if (v5)
  {
    uint64_t v2 = a2;
    char v6 = *((unsigned char *)a1 + 29);
    if ((v6 & 4) != 0) {
      uint64_t v7 = a1[1];
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v9 = *((unsigned int *)a1 + 6);
    uint64_t v10 = a2 + v9;
    uint64_t v11 = a2 + v9 + 1 + v9;
    if (v11 > v5) {
      uint64_t v11 = v10 + 1;
    }
    if (v11 > v5)
    {
      if ((*((unsigned char *)a1 + 29) & 4) != 0)
      {
        int v13 = a1[1];
        if (v13)
        {
          sub_1B0D05C10(*a1, v13);
          char v6 = *((unsigned char *)a1 + 29);
          BOOL v14 = *((_DWORD *)a1 + 5) == 0;
        }
        else
        {
          BOOL v14 = 0;
        }
        v6 &= ~4u;
        *((unsigned char *)a1 + 29) = v6;
        *((_DWORD *)a1 + 4) = 0;
        *((_DWORD *)a1 + 6) = 0;
        a1[1] = 0;
        *((unsigned char *)a1 + 28) = 18;
        if (v14) {
          goto LABEL_33;
        }
      }
      else
      {
        *((unsigned char *)a1 + 28) = 18;
      }
      if ((v6 & 4) != 0) {
        *((unsigned char *)a1 + 29) = v6 & 0xFB;
      }
      *((_DWORD *)a1 + 4) = 0;
      *((_DWORD *)a1 + 6) = 0;
      a1[1] = 0;
LABEL_33:
      if (*a1)
      {
        uint64_t v16 = (*a1)[43];
        if (v16)
        {
          uint64_t v2 = 0;
          *(_DWORD *)(v16 + 24) = 18;
          ++*(_DWORD *)(v16 + 48);
          return v2;
        }
      }
      return 0;
    }
    *((_DWORD *)a1 + 4) = v11;
    uint64_t v12 = (uint64_t)*a1;
    if (*a1)
    {
      if (v7)
      {
        if (*(void *)(v12 + 512) > (unint64_t)v7)
        {
          if (*(void *)(v12 + 496) <= (unint64_t)v7)
          {
            if (v11 < 0x81uLL) {
              goto LABEL_39;
            }
          }
          else if (*(void *)(v12 + 504) <= (unint64_t)v7 {
                 && v11 <= (unint64_t)*(unsigned __int16 *)(v12 + 438))
          }
          {
LABEL_39:
            if ((v6 & 4) == 0)
            {
              size_t v17 = *((unsigned int *)a1 + 6);
              if (v17) {
                memcpy(v7, a1[1], v17);
              }
            }
            a1[1] = v7;
            uint64_t v18 = (uint64_t)*a1;
            if (*a1 && *(void *)(v18 + 520) > (unint64_t)v7)
            {
              if (*(void *)(v18 + 496) <= (unint64_t)v7)
              {
                int v19 = 128;
                goto LABEL_47;
              }
              if (*(void *)(v18 + 504) <= (unint64_t)v7)
              {
                int v19 = *(unsigned __int16 *)(v18 + 438);
                goto LABEL_47;
              }
            }
            int v19 = off_1EB21C9F8(v7);
LABEL_47:
            *((_DWORD *)a1 + 4) = v19;
            *((unsigned char *)a1 + 29) |= 4u;
            return v2;
          }
        }
        uint64_t v15 = sub_1B0D05E6C(v12, v7, v11);
      }
      else
      {
        uint64_t v15 = sub_1B0D05DC0(v12, v11);
      }
    }
    else
    {
      uint64_t v15 = sub_1B0C8E1B8((uint64_t)v7, v11);
    }
    uint64_t v7 = (void *)v15;
    char v6 = *((unsigned char *)a1 + 29);
    if (v15) {
      goto LABEL_39;
    }
    if ((*((unsigned char *)a1 + 29) & 4) != 0)
    {
      uint64_t v20 = a1[1];
      if (v20)
      {
        sub_1B0D05C10(*a1, v20);
        char v6 = *((unsigned char *)a1 + 29);
      }
      v6 &= ~4u;
      *((unsigned char *)a1 + 29) = v6;
    }
    *((_DWORD *)a1 + 4) = 0;
    *((_DWORD *)a1 + 6) = 0;
    a1[1] = 0;
    *((unsigned char *)a1 + 28) = 7;
    if (!*((_DWORD *)a1 + 5)) {
      return 0;
    }
    if ((v6 & 4) != 0) {
      *((unsigned char *)a1 + 29) = v6 & 0xFB;
    }
    uint64_t v2 = 0;
    *((_DWORD *)a1 + 4) = 0;
    *((_DWORD *)a1 + 6) = 0;
    a1[1] = 0;
  }
  else
  {
    *((unsigned char *)a1 + 28) = 18;
    if (*a1)
    {
      uint64_t v8 = (*a1)[43];
      if (v8)
      {
        *(_DWORD *)(v8 + 24) = 18;
        ++*(_DWORD *)(v8 + 48);
      }
    }
    return (*((_DWORD *)a1 + 4) + ~*((_DWORD *)a1 + 6));
  }
  return v2;
}

void sqlite3_str_appendall(sqlite3_str *a1, const char *zIn)
{
  if (zIn)
  {
    unsigned int v4 = strlen(zIn) & 0x3FFFFFFF;
    if (a1) {
      goto LABEL_3;
    }
LABEL_10:
    int v7 = 32733;
    goto LABEL_13;
  }
  unsigned int v4 = 0;
  if (!a1) {
    goto LABEL_10;
  }
LABEL_3:
  if (zIn && v4)
  {
    uint64_t v5 = *((unsigned int *)a1 + 6);
    if (v5 + v4 >= *((_DWORD *)a1 + 4))
    {
      sub_1B0CE62B0((uint64_t)a1, zIn, v4);
    }
    else
    {
      *((_DWORD *)a1 + 6) = v5 + v4;
      char v6 = (void *)(*((void *)a1 + 1) + v5);
      memcpy(v6, zIn, v4);
    }
    return;
  }
  if (!v4) {
    return;
  }
  int v7 = 32737;
LABEL_13:

  sub_1B0CE1978(v7);
}

void sqlite3_str_appendf(sqlite3_str *a1, const char *zFormat, ...)
{
  va_start(va, zFormat);
  sqlite3_str_vappendf(a1, zFormat, va);
}

uint64_t sub_1B0CE62B0(uint64_t a1, const void *a2, unsigned int a3)
{
  uint64_t result = sub_1B0CE5EFC((void **)a1, a3);
  if ((int)result >= 1)
  {
    int v6 = result;
    uint64_t result = (uint64_t)memcpy((void *)(*(void *)(a1 + 8) + *(unsigned int *)(a1 + 24)), a2, result);
    *(_DWORD *)(a1 + 24) += v6;
  }
  return result;
}

char *__cdecl sqlite3_str_finish(sqlite3_str *a1)
{
  sqlite3_int64 v1 = 0;
  if (a1)
  {
    uint64_t v2 = a1;
    if (a1 != (sqlite3_str *)&unk_1E9B51E88)
    {
      uint64_t v3 = *((void *)a1 + 1);
      if (v3 && (*(unsigned char *)(v3 + *((unsigned int *)a1 + 6)) = 0, *((_DWORD *)a1 + 5)) && (*((unsigned char *)a1 + 29) & 4) == 0) {
        sqlite3_int64 v1 = (char *)sub_1B0D06044((uint64_t *)a1);
      }
      else {
        sqlite3_int64 v1 = (char *)*((void *)a1 + 1);
      }
      unsigned int v4 = (void (**)(sqlite3_str *))&off_1EB21C9E8;
      if (!dword_1EB21C9C0) {
        goto LABEL_13;
      }
      if ((void)xmmword_1EB2201B0) {
        xmmword_1EB21CA40(xmmword_1EB2201B0);
      }
      qword_1EB220108 -= (int)off_1EB21C9F8(v2);
      --qword_1EB220150;
      off_1EB21C9E8(v2);
      uint64_t v2 = (sqlite3_str *)xmmword_1EB2201B0;
      if ((void)xmmword_1EB2201B0)
      {
        unsigned int v4 = (void (**)(sqlite3_str *))&xmmword_1EB21CA50;
LABEL_13:
        (*v4)(v2);
      }
    }
  }
  return v1;
}

int sqlite3_str_errcode(sqlite3_str *a1)
{
  if (a1) {
    return *((unsigned __int8 *)a1 + 28);
  }
  else {
    return 7;
  }
}

int sqlite3_str_length(sqlite3_str *a1)
{
  if (a1) {
    LODWORD(a1) = *((_DWORD *)a1 + 6);
  }
  return (int)a1;
}

char *__cdecl sqlite3_str_value(char *result)
{
  if (result)
  {
    uint64_t v1 = *((unsigned int *)result + 6);
    if (v1)
    {
      *(unsigned char *)(*((void *)result + 1) + v1) = 0;
      return (char *)*((void *)result + 1);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sqlite3_str_reset(sqlite3_str *a1)
{
  if (a1)
  {
    char v3 = *((unsigned char *)a1 + 29);
    if ((v3 & 4) != 0)
    {
      unsigned int v4 = (void *)*((void *)a1 + 1);
      if (v4)
      {
        sub_1B0D05C10(*(void **)a1, v4);
        char v3 = *((unsigned char *)a1 + 29);
      }
      *((unsigned char *)a1 + 29) = v3 & 0xFB;
    }
    *((_DWORD *)a1 + 4) = 0;
    *((_DWORD *)a1 + 6) = 0;
    *((void *)a1 + 1) = 0;
  }
  else
  {
    sub_1B0CE1978(32852);
  }
}

sqlite3_str *__cdecl sqlite3_str_new(sqlite3 *a1)
{
  if (sqlite3_initialize()) {
    return (sqlite3_str *)&unk_1E9B51E88;
  }
  uint64_t result = (sqlite3_str *)sub_1B0C7FC94(32);
  if (!result) {
    return (sqlite3_str *)&unk_1E9B51E88;
  }
  if (a1) {
    int v3 = *((_DWORD *)a1 + 34);
  }
  else {
    int v3 = 2147483645;
  }
  *(void *)uint64_t result = 0;
  *((void *)result + 1) = 0;
  *((_DWORD *)result + 4) = 0;
  *((_DWORD *)result + 5) = v3;
  *((_DWORD *)result + 6) = 0;
  *((_WORD *)result + 14) = 0;
  return result;
}

char *__cdecl sqlite3_vsnprintf(int a1, char *a2, const char *a3, va_list a4)
{
  if (a1 >= 1)
  {
    if (a2 && a3)
    {
      v7[0] = 0;
      v7[1] = a2;
      int v8 = a1;
      uint64_t v9 = 0;
      int v10 = 0;
      sqlite3_str_vappendf((sqlite3_str *)v7, a3, a4);
      uint64_t v5 = &a2[HIDWORD(v9)];
LABEL_6:
      char *v5 = 0;
      return a2;
    }
    sub_1B0CE1978(32992);
    uint64_t v5 = a2;
    if (a2) {
      goto LABEL_6;
    }
  }
  return a2;
}

int sqlite3_stricmp(const char *a1, const char *a2)
{
  if (a1)
  {
    if (a2)
    {
      while (1)
      {
        uint64_t v2 = *(unsigned __int8 *)a1;
        uint64_t v3 = *(unsigned __int8 *)a2;
        if (v2 == v3)
        {
          if (!*a1) {
            return v2;
          }
        }
        else
        {
          LODWORD(v2) = byte_1B0DE1758[v2] - byte_1B0DE1758[v3];
          if (v2) {
            return v2;
          }
        }
        ++a1;
        ++a2;
      }
    }
    return 1;
  }
  else if (a2)
  {
    return -1;
  }
  else
  {
    return 0;
  }
}

int sqlite3_strnicmp(const char *a1, const char *a2, int a3)
{
  if (a3 < 0)
  {
    sub_1B0CE1978(35844);
    return 0;
  }
  if (!a1)
  {
    if (a2) {
      return -1;
    }
    else {
      return 0;
    }
  }
  if (!a2) {
    return 1;
  }
  if (!a3) {
    return 0;
  }
  int v3 = a3 + 1;
  while (1)
  {
    uint64_t v4 = *(unsigned __int8 *)a1;
    if (!*a1) {
      break;
    }
    LODWORD(v4) = byte_1B0DE1758[v4];
    if (v4 != byte_1B0DE1758[*(unsigned __int8 *)a2]) {
      break;
    }
    ++a1;
    ++a2;
    if (--v3 <= 1) {
      return 0;
    }
  }
  return v4 - byte_1B0DE1758[*(unsigned __int8 *)a2];
}

int sqlite3_os_init(void)
{
  for (uint64_t i = 0; i != 9; ++i)
  {
    if (sqlite3_initialize()) {
      continue;
    }
    if ((_BYTE)word_1EB21C9C4)
    {
      uint64_t v1 = qword_1EB21CA30(2);
      uint64_t v2 = v1;
      if (v1)
      {
        xmmword_1EB21CA40(v1);
        char v3 = 0;
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v2 = 0;
    }
    char v3 = 1;
LABEL_9:
    uint64_t v4 = (char *)&qword_1EB21CBA8[21 * i];
    uint64_t v5 = qword_1EB2201A8;
    if ((char *)qword_1EB2201A8 == v4)
    {
      uint64_t v9 = &qword_1EB2201A8;
      goto LABEL_20;
    }
    if (!qword_1EB2201A8) {
      goto LABEL_24;
    }
    uint64_t v6 = qword_1EB2201A8;
    do
    {
      uint64_t v7 = v6;
      uint64_t v6 = *(void *)(v6 + 16);
      if (v6) {
        BOOL v8 = v6 == (void)v4;
      }
      else {
        BOOL v8 = 1;
      }
    }
    while (!v8);
    if ((char *)v6 == v4)
    {
      uint64_t v9 = (uint64_t *)(v7 + 16);
LABEL_20:
      *uint64_t v9 = qword_1EB21CBA8[21 * i + 2];
      uint64_t v5 = qword_1EB2201A8;
    }
    if (i && v5)
    {
      int v10 = (uint64_t *)(v5 + 16);
      uint64_t v5 = *(void *)(v5 + 16);
      goto LABEL_25;
    }
LABEL_24:
    int v10 = &qword_1EB2201A8;
LABEL_25:
    qword_1EB21CBA8[21 * i + 2] = v5;
    *int v10 = (uint64_t)v4;
    if ((v3 & 1) == 0) {
      xmmword_1EB21CA50(v2);
    }
  }
  if ((_BYTE)word_1EB21C9C4) {
    uint64_t v11 = qword_1EB21CA30(11);
  }
  else {
    uint64_t v11 = 0;
  }
  qword_1EB2201D0 = v11;
  sub_1B0CDF874();
  qword_1EB21D580 = (uint64_t)getenv("SQLITE_TMPDIR");
  if (!qword_1EB21D588)
  {
    uint64_t v12 = malloc_type_calloc(1uLL, 0x400uLL, 0x6AE76ED9uLL);
    if (!confstr(65537, (char *)v12, 0x400uLL))
    {
      free(v12);
      uint64_t v12 = 0;
    }
    qword_1EB21D588 = (uint64_t)v12;
  }
  qword_1EB21D590 = (uint64_t)getenv("TMPDIR");
  if (qword_1EB2201D8 == -1)
  {
    if ((_BYTE)word_1EB21C9C4) {
      goto LABEL_36;
    }
LABEL_38:
    uint64_t v13 = 0;
  }
  else
  {
    dispatch_once(&qword_1EB2201D8, &unk_1F09A4FC8);
    if (!(_BYTE)word_1EB21C9C4) {
      goto LABEL_38;
    }
LABEL_36:
    uint64_t v13 = qword_1EB21CA30(11);
  }
  qword_1EB2201D0 = v13;
  return 0;
}

uint64_t sub_1B0CE6A8C(uint64_t a1, uint64_t a2)
{
  v4.tv_sec = (int)a2 / 1000000;
  v4.tv_nsec = 1000 * ((int)a2 % 1000000);
  nanosleep(&v4, 0);
  return a2;
}

uint64_t sub_1B0CE6AFC(uint64_t a1, double *a2)
{
  v4.tv_sec = 0;
  *(void *)&v4.tv_usec = 0;
  gettimeofday(&v4, 0);
  *a2 = (double)(1000 * v4.tv_sec + v4.tv_usec / 1000 + 210866760000000) / 86400000.0;
  return 0;
}

uint64_t sub_1B0CE6B8C()
{
  return *__error();
}

uint64_t sub_1B0CE6BA8(int a1, char *__s1, char *a3)
{
  if (__s1)
  {
    uint64_t v5 = 0;
    while (strcmp(__s1, (&off_1EC526380)[v5]))
    {
      v5 += 3;
      if (v5 == 87) {
        return 12;
      }
    }
    uint64_t v9 = &(&off_1EC526380)[v5];
    int v10 = (&off_1EC526380)[v5 + 2];
    if (!v10)
    {
      int v10 = v9[1];
      v9[2] = v10;
    }
    uint64_t result = 0;
    if (a3) {
      int v10 = a3;
    }
    v9[1] = v10;
  }
  else
  {
    for (uint64_t i = 0; i != 87; i += 3)
    {
      BOOL v8 = (&off_1EC526380)[i + 2];
      if (v8) {
        (&off_1EC526380)[i + 1] = v8;
      }
    }
    return 0;
  }
  return result;
}

char *sub_1B0CE6C64(int a1, char *__s1)
{
  uint64_t v3 = 0;
  while (strcmp(__s1, (&off_1EC526380)[v3]))
  {
    v3 += 3;
    if (v3 == 87) {
      return 0;
    }
  }
  return (&off_1EC526380)[v3 + 1];
}

uint64_t sub_1B0CE6CC4(int a1, char *__s1)
{
  if (__s1)
  {
    uint64_t v3 = 0;
    timeval v4 = (const char **)&off_1EC526380;
    do
    {
      if (!strcmp(__s1, *v4)) {
        break;
      }
      ++v3;
      v4 += 3;
    }
    while (v3 != 28);
  }
  else
  {
    uint64_t v3 = -1;
  }
  uint64_t v5 = v3 - 29;
  uint64_t v6 = &(&off_1EC526380)[3 * v3 + 4];
  while (!__CFADD__(v5++, 1))
  {
    BOOL v8 = v6 + 3;
    uint64_t v9 = *v6;
    v6 += 3;
    if (v9) {
      return (uint64_t)*(v8 - 4);
    }
  }
  return 0;
}

char *sub_1B0CE6D60()
{
  xmmword_1EB2201E0 = MEMORY[0x1E4F14898];
  qword_1EB2201F0 = MEMORY[0x1E4F14890];
  qword_1EB2201F8 = MEMORY[0x1E4F148A8];
  qword_1EB220200 = MEMORY[0x1E4F148B0];
  uint64_t result = getenv("RC_XBS");
  if (result)
  {
    if (*result)
    {
      qword_1EB2201F8 = 0;
      qword_1EB220200 = 0;
    }
  }
  return result;
}

int sqlite3_os_end(void)
{
  qword_1EB2201D0 = 0;
  return 0;
}

unsigned __int8 *__cdecl sqlite3_serialize(sqlite3 *db, const char *zSchema, sqlite3_int64 *piSize, unsigned int mFlags)
{
  pStmt = 0;
  if (!db)
  {
    uint64_t v6 = "NULL";
    goto LABEL_32;
  }
  int v5 = *((unsigned __int8 *)db + 113);
  if (v5 == 186)
  {
LABEL_5:
    uint64_t v6 = "unopened";
LABEL_32:
    sqlite3_log(21, "API call with %s database connection pointer", v6);
    sub_1B0CE1978(58675);
    return 0;
  }
  if (v5 != 118)
  {
    if (v5 != 109)
    {
      uint64_t v6 = "invalid";
      goto LABEL_32;
    }
    goto LABEL_5;
  }
  char v7 = mFlags;
  uint64_t v9 = zSchema;
  if (!zSchema) {
    uint64_t v9 = (const char *)**((void **)db + 4);
  }
  uint64_t v50 = 0;
  int v10 = sqlite3_file_control(db, v9, 7, &v50);
  uint64_t v11 = 0;
  if (!v10)
  {
    if (*(_UNKNOWN **)v50 == &unk_1F09A5470)
    {
      uint64_t v39 = *(void *)(v50 + 8);
      uint64_t v40 = *(void *)(v39 + 32);
      if (v40) {
        xmmword_1EB21CA40(v40);
      }
      if (*(void *)(v39 + 64)) {
        uint64_t v50 = 0;
      }
      uint64_t v41 = *(void *)(v39 + 32);
      if (v41) {
        xmmword_1EB21CA50(v41);
      }
      uint64_t v11 = v50;
      if (!v9) {
        goto LABEL_48;
      }
    }
    else
    {
      uint64_t v11 = 0;
      if (!v9) {
        goto LABEL_48;
      }
    }
LABEL_11:
    int v12 = *((_DWORD *)db + 10);
    BOOL v13 = __OFSUB__(v12, 1);
    uint64_t v14 = (v12 - 1);
    if ((int)v14 < 0 != v13)
    {
LABEL_35:
      unsigned int v20 = v14;
    }
    else
    {
      uint64_t v15 = (unsigned char **)(*((void *)db + 4) + 32 * v14);
      do
      {
        uint64_t v16 = *v15;
        if (*v15)
        {
          for (uint64_t i = v9; ; ++i)
          {
            uint64_t v18 = *v16;
            uint64_t v19 = *(unsigned __int8 *)i;
            if (v18 == v19)
            {
              if (!*v16) {
                goto LABEL_35;
              }
            }
            else if (byte_1B0DE1758[v18] != byte_1B0DE1758[v19])
            {
              break;
            }
            ++v16;
          }
        }
        if (!v14)
        {
          uint64_t v22 = "main";
          for (j = v9; ; ++j)
          {
            uint64_t v24 = *(unsigned __int8 *)v22;
            uint64_t v25 = *(unsigned __int8 *)j;
            if (v24 == v25)
            {
              if (!*v22)
              {
                unsigned int v20 = 0;
                if (!piSize) {
                  goto LABEL_38;
                }
LABEL_37:
                *piSize = -1;
                goto LABEL_38;
              }
            }
            else if (byte_1B0DE1758[v24] != byte_1B0DE1758[v25])
            {
              break;
            }
            ++v22;
          }
        }
        v15 -= 4;
        unsigned int v20 = -1;
        BOOL v21 = (int)v14 <= 0;
        LODWORD(v14) = v14 - 1;
      }
      while (!v21);
    }
    if (!piSize) {
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  if (v9) {
    goto LABEL_11;
  }
LABEL_48:
  unsigned int v20 = -1;
  if (piSize) {
    goto LABEL_37;
  }
LABEL_38:
  if ((v20 & 0x80000000) != 0) {
    return 0;
  }
  if (!v11)
  {
    uint64_t v31 = *(void *)(*((void *)db + 4) + 32 * v20 + 8);
    if (!v31) {
      return 0;
    }
    size_t v32 = *(int *)(*(void *)(v31 + 8) + 52);
    double v33 = (unsigned __int8 *)sqlite3_mprintf("PRAGMA \"%w\".page_count", v9);
    if (!v33) {
      return 0;
    }
    int v35 = v33;
    int v36 = sub_1B0C7EAC0((uint64_t)db, v33, 0xFFFFFFFFLL, 128, 0, &pStmt, 0, v34);
    uint64_t v37 = (uint64_t (**)(unsigned __int8 *))&off_1EB21C9E8;
    if (dword_1EB21C9C0)
    {
      if ((void)xmmword_1EB2201B0) {
        xmmword_1EB21CA40(xmmword_1EB2201B0);
      }
      qword_1EB220108[0] -= (int)off_1EB21C9F8(v35);
      --qword_1EB220150;
      off_1EB21C9E8(v35);
      int v35 = (unsigned __int8 *)xmmword_1EB2201B0;
      if (!(void)xmmword_1EB2201B0) {
        goto LABEL_58;
      }
      uint64_t v37 = (uint64_t (**)(unsigned __int8 *))&xmmword_1EB21CA50;
    }
    (*v37)(v35);
LABEL_58:
    if (v36) {
      return 0;
    }
    if (sqlite3_step(pStmt) != 100) {
      goto LABEL_64;
    }
    sqlite3_int64 v38 = sqlite3_column_int64(pStmt, 0) * v32;
    if (piSize) {
      *piSize = v38;
    }
    if ((v7 & 1) != 0 || sqlite3_initialize())
    {
LABEL_64:
      int v26 = 0;
LABEL_65:
      sqlite3_finalize(pStmt);
      return v26;
    }
    int v26 = (unsigned __int8 *)sub_1B0C7FC94(v38);
    if (!v26) {
      goto LABEL_65;
    }
    int v42 = sqlite3_column_int(pStmt, 0);
    if (v42 < 1) {
      goto LABEL_65;
    }
    uint64_t v43 = **(void **)(v31 + 8);
    uint64_t v44 = (v42 + 1);
    uint64_t v45 = 1;
    __int16 v46 = v26;
    while (1)
    {
      uint64_t v50 = 0;
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t *, void))(v43 + 288))(v43, v45, &v50, 0)) {
        break;
      }
      bzero(v46, v32);
      uint64_t v47 = v50;
      if (v50) {
        goto LABEL_84;
      }
LABEL_79:
      ++v45;
      v46 += v32;
      if (v44 == v45) {
        goto LABEL_65;
      }
    }
    uint64_t v47 = v50;
    memcpy(v46, *(const void **)(v50 + 8), v32);
LABEL_84:
    if ((*(_WORD *)(v47 + 52) & 0x20) != 0)
    {
      uint64_t v48 = *(void *)(v47 + 40);
      --*(_DWORD *)(v48 + 152);
      *(void *)(v47 + 32) = *(void *)(v48 + 168);
      *(void *)(v48 + 168) = v47;
      (*(void (**)(void, void, void))(**(void **)(v48 + 72) + 144))(*(void *)(v48 + 72), *(void *)(v48 + 200) * (*(_DWORD *)(v47 + 48) - 1), *(void *)(v47 + 8));
    }
    else
    {
      sub_1B0D0E3E8(v47);
    }
    goto LABEL_79;
  }
  uint64_t v28 = *(void *)(v11 + 8);
  if (piSize) {
    *piSize = *(void *)v28;
  }
  if (v7) {
    return *(unsigned __int8 **)(v28 + 24);
  }
  uint64_t v29 = *(void *)v28;
  if (sqlite3_initialize()) {
    return 0;
  }
  int v30 = (unsigned __int8 *)sub_1B0C7FC94(v29);
  int v26 = v30;
  if (v30) {
    memcpy(v30, *(const void **)(v28 + 24), *(void *)v28);
  }
  return v26;
}

int sqlite3_deserialize(sqlite3 *db, const char *zSchema, unsigned __int8 *pData, sqlite3_int64 szDb, sqlite3_int64 szBuf, unsigned int mFlags)
{
  pStmt = 0;
  if (!db)
  {
    BOOL v8 = "NULL";
    goto LABEL_33;
  }
  int v7 = *((unsigned __int8 *)db + 113);
  if (v7 == 186)
  {
LABEL_5:
    BOOL v8 = "unopened";
LABEL_33:
    sqlite3_log(21, "API call with %s database connection pointer", v8);
    int v25 = 58754;
LABEL_34:
    return sub_1B0CE1978(v25);
  }
  if (v7 != 118)
  {
    if (v7 != 109)
    {
      BOOL v8 = "invalid";
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (szDb < 0)
  {
    int v25 = 58756;
    goto LABEL_34;
  }
  if (szBuf < 0)
  {
    int v25 = 58757;
    goto LABEL_34;
  }
  uint64_t v14 = *((void *)db + 3);
  if (v14) {
    xmmword_1EB21CA40(v14);
  }
  if (!zSchema)
  {
    zSchema = (const char *)**((void **)db + 4);
    if (!zSchema) {
      goto LABEL_39;
    }
  }
  int v15 = *((_DWORD *)db + 10);
  uint64_t v16 = (v15 - 1);
  if (v15 >= 1)
  {
    size_t v17 = (void *)(*((void *)db + 4) + 32 * v16);
    do
    {
      if (*v17)
      {
        for (uint64_t i = 0; ; ++i)
        {
          uint64_t v19 = *(unsigned __int8 *)(*v17 + i);
          uint64_t v20 = zSchema[i];
          if (v19 == v20)
          {
            if (!*(unsigned char *)(*v17 + i)) {
              goto LABEL_40;
            }
          }
          else if (byte_1B0DE1758[v19] != byte_1B0DE1758[v20])
          {
            break;
          }
        }
      }
      if (!v16)
      {
        for (uint64_t j = 0; ; ++j)
        {
          uint64_t v23 = aMain[j];
          uint64_t v24 = zSchema[j];
          if (v23 == v24)
          {
            if (!aMain[j])
            {
              LOBYTE(v16) = 0;
              goto LABEL_43;
            }
          }
          else if (byte_1B0DE1758[v23] != byte_1B0DE1758[v24])
          {
            break;
          }
        }
      }
      v17 -= 4;
      BOOL v21 = (int)v16 <= 0;
      LODWORD(v16) = v16 - 1;
    }
    while (!v21);
LABEL_39:
    LODWORD(v16) = -1;
  }
LABEL_40:
  if ((int)v16 <= 1 && v16)
  {
LABEL_42:
    int v27 = 1;
    goto LABEL_65;
  }
LABEL_43:
  uint64_t v28 = (unsigned __int8 *)sqlite3_mprintf("ATTACH x AS %Q", zSchema);
  if (!v28)
  {
    int v27 = 7;
    goto LABEL_65;
  }
  int v30 = v28;
  int v27 = sub_1B0C7EAC0((uint64_t)db, v28, 0xFFFFFFFFLL, 128, 0, &pStmt, 0, v29);
  uint64_t v31 = (uint64_t (**)(unsigned __int8 *))&off_1EB21C9E8;
  if (!dword_1EB21C9C0) {
    goto LABEL_49;
  }
  if ((void)xmmword_1EB2201B0) {
    xmmword_1EB21CA40(xmmword_1EB2201B0);
  }
  qword_1EB220108[0] -= (int)off_1EB21C9F8(v30);
  --qword_1EB220150;
  off_1EB21C9E8(v30);
  int v30 = (unsigned __int8 *)xmmword_1EB2201B0;
  if ((void)xmmword_1EB2201B0)
  {
    uint64_t v31 = (uint64_t (**)(unsigned __int8 *))&xmmword_1EB21CA50;
LABEL_49:
    (*v31)(v30);
  }
  if (v27) {
    goto LABEL_65;
  }
  *((unsigned char *)db + 196) = v16;
  *((unsigned char *)db + 198) |= 4u;
  int v32 = sqlite3_step(pStmt);
  *((unsigned char *)db + 198) &= ~4u;
  if (v32 != 101) {
    goto LABEL_42;
  }
  uint64_t v41 = 0;
  if (sqlite3_file_control(db, zSchema, 7, &v41) || *(_UNKNOWN **)v41 != &unk_1F09A5470) {
    goto LABEL_42;
  }
  uint64_t v33 = *(void *)(v41 + 8);
  uint64_t v34 = *(void *)(v33 + 32);
  if (v34) {
    xmmword_1EB21CA40(v34);
  }
  if (*(void *)(v33 + 64)) {
    uint64_t v41 = 0;
  }
  uint64_t v35 = *(void *)(v33 + 32);
  if (v35) {
    xmmword_1EB21CA50(v35);
  }
  if (!v41) {
    goto LABEL_42;
  }
  int v27 = 0;
  uint64_t v36 = *(void *)(v41 + 8);
  *(void *)(v36 + 24) = pData;
  *(void *)uint64_t v36 = szDb;
  *(void *)(v36 + 8) = szBuf;
  sqlite3_int64 v37 = qword_1EB21CB58;
  if (qword_1EB21CB58 <= szBuf) {
    sqlite3_int64 v37 = szBuf;
  }
  *(void *)(v36 + 16) = v37;
  *(_DWORD *)(v36 + 44) = mFlags;
  pData = 0;
LABEL_65:
  sqlite3_finalize(pStmt);
  if ((mFlags & 1) != 0 && pData)
  {
    sqlite3_int64 v38 = (void (**)(unsigned __int8 *))&off_1EB21C9E8;
    if (dword_1EB21C9C0)
    {
      if ((void)xmmword_1EB2201B0) {
        xmmword_1EB21CA40(xmmword_1EB2201B0);
      }
      qword_1EB220108[0] -= (int)off_1EB21C9F8(pData);
      --qword_1EB220150;
      off_1EB21C9E8(pData);
      pData = (unsigned __int8 *)xmmword_1EB2201B0;
      if (!(void)xmmword_1EB2201B0) {
        goto LABEL_73;
      }
      sqlite3_int64 v38 = (void (**)(unsigned __int8 *))&xmmword_1EB21CA50;
    }
    (*v38)(pData);
  }
LABEL_73:
  uint64_t v39 = *((void *)db + 3);
  if (v39) {
    xmmword_1EB21CA50(v39);
  }
  return v27;
}

sqlite3_file *__cdecl sqlite3_database_file_object(sqlite3_file *result)
{
  if (result)
  {
    for (uint64_t i = (char *)&result[-1].pMethods + 4; i[3] || i[2] || i[1] || *i; --i)
      ;
    return *(sqlite3_file **)(*((void *)i - 1) + 72);
  }
  return result;
}

int sqlite3_snapshot_cmp(sqlite3_snapshot *p1, sqlite3_snapshot *p2)
{
  if (p1 && p2)
  {
    unsigned int v4 = *(_DWORD *)&p1->hidden[32];
    unsigned int v5 = *(_DWORD *)&p2->hidden[32];
    if (v4 >= v5)
    {
      if (v4 > v5)
      {
        return 1;
      }
      else
      {
        unsigned int v7 = *(_DWORD *)&p1->hidden[16];
        unsigned int v8 = *(_DWORD *)&p2->hidden[16];
        BOOL v9 = v7 >= v8;
        BOOL v10 = v7 > v8;
        if (v9) {
          return v10;
        }
        else {
          return -1;
        }
      }
    }
    else
    {
      return -1;
    }
  }
  else
  {
    sub_1B0CE1978(76385);
    return p1 != p2;
  }
}

int sqlite3_enable_shared_cache(int a1)
{
  return 21;
}

sqlite3_backup *__cdecl sqlite3_backup_init(sqlite3 *pDest, const char *zDestName, sqlite3 *pSource, const char *zSourceName)
{
  if (!pSource) {
    goto LABEL_11;
  }
  int v9 = *((unsigned __int8 *)pSource + 113);
  if (v9 == 186)
  {
LABEL_5:
    BOOL v10 = "unopened";
LABEL_12:
    sqlite3_log(21, "API call with %s database connection pointer", v10);
    sub_1B0CE1978(88404);
    return 0;
  }
  if (v9 != 118)
  {
    if (v9 == 109) {
      goto LABEL_5;
    }
LABEL_10:
    BOOL v10 = "invalid";
    goto LABEL_12;
  }
  if (!pDest)
  {
LABEL_11:
    BOOL v10 = "NULL";
    goto LABEL_12;
  }
  int v12 = *((unsigned __int8 *)pDest + 113);
  if (v12 == 186) {
    goto LABEL_5;
  }
  if (v12 != 118)
  {
    if (v12 == 109) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  uint64_t v17 = *((void *)pSource + 3);
  if (v17) {
    xmmword_1EB21CA40(v17);
  }
  uint64_t v18 = *((void *)pDest + 3);
  if (v18) {
    xmmword_1EB21CA40(v18);
  }
  if (pSource == pDest)
  {
    sub_1B0CE79F4((uint64_t)pSource, 1, "source and destination must be distinct", (uint64_t)zSourceName, v4, v5, v6, v7, v40);
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v19 = sub_1B0C7FC94(72);
    uint64_t v13 = v19;
    if (v19)
    {
      *(void *)(v19 + 64) = 0;
      *(_OWORD *)(v19 + 32) = 0u;
      *(_OWORD *)(v19 + 48) = 0u;
      *(_OWORD *)uint64_t v19 = 0u;
      *(_OWORD *)(v19 + 16) = 0u;
      *(void *)(v19 + 40) = sub_1B0CE7B34(pDest, (uint64_t)pSource, (uint64_t)zSourceName, v20, v21, v22, v23, v24);
      uint64_t v30 = sub_1B0CE7B34(pDest, (uint64_t)pDest, (uint64_t)zDestName, v25, v26, v27, v28, v29);
      *(void *)uint64_t v13 = pDest;
      *(void *)(v13 + 8) = v30;
      *(void *)(v13 + 32) = pSource;
      *(_DWORD *)(v13 + 24) = 1;
      *(_DWORD *)(v13 + 60) = 0;
      uint64_t v36 = *(void *)(v13 + 40);
      if (v36 && v30)
      {
        if (!*(unsigned char *)(v30 + 16))
        {
          ++*(_DWORD *)(v36 + 24);
          goto LABEL_33;
        }
        sub_1B0CE79F4((uint64_t)pDest, 1, "destination database is in use", v31, v32, v33, v34, v35, v40);
      }
      sqlite3_int64 v37 = &off_1EB21C9E8;
      if (dword_1EB21C9C0)
      {
        if ((void)xmmword_1EB2201B0) {
          xmmword_1EB21CA40(xmmword_1EB2201B0);
        }
        qword_1EB220108 -= (int)off_1EB21C9F8(v13);
        --qword_1EB220150;
        off_1EB21C9E8(v13);
        uint64_t v13 = xmmword_1EB2201B0;
        if (!(void)xmmword_1EB2201B0) {
          goto LABEL_33;
        }
        sqlite3_int64 v37 = &xmmword_1EB21CA50;
      }
      (*v37)(v13);
      uint64_t v13 = 0;
    }
    else
    {
      *((_DWORD *)pDest + 20) = 7;
      sub_1B0D0E714((uint64_t)pDest, 7);
    }
  }
LABEL_33:
  uint64_t v38 = *((void *)pDest + 3);
  if (v38) {
    xmmword_1EB21CA50(v38);
  }
  uint64_t v39 = *((void *)pSource + 3);
  if (v39) {
    xmmword_1EB21CA50(v39);
  }
  return (sqlite3_backup *)v13;
}

void sub_1B0CE79F4(uint64_t a1, int a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  *(_DWORD *)(a1 + 80) = a2;
  if (a2 != 3082 && (a2 & 0xFB) == 0xA)
  {
    int v12 = *(uint64_t (**)(void))(*(void *)a1 + 128);
    if (v12) {
      int v13 = v12();
    }
    else {
      int v13 = 0;
    }
    *(_DWORD *)(a1 + 92) = v13;
  }
  if (a3)
  {
    if (!*(void *)(a1 + 416))
    {
      uint64_t v14 = sub_1B0D05DC0(a1, 0x40uLL);
      if (!v14)
      {
        *(void *)(a1 + 416) = 0;
        return;
      }
      *(_OWORD *)(v14 + 32) = 0u;
      *(_OWORD *)(v14 + 48) = 0u;
      *(_OWORD *)uint64_t v14 = 0u;
      *(_OWORD *)(v14 + 16) = 0u;
      *(_WORD *)(v14 + 20) = 1;
      *(void *)(v14 + 24) = a1;
      *(void *)(a1 + 416) = v14;
    }
    int v15 = (char *)sub_1B0D0E5DC(a1, a3, &a9);
    uint64_t v16 = *(void *)(a1 + 416);
    if (v16) {
      sub_1B0C79BBC(v16, v15, -1, 1u, sub_1B0CF5398);
    }
  }
  else
  {
    *(_DWORD *)(a1 + 80) = a2;
    if (a2 || *(void *)(a1 + 416))
    {
      sub_1B0D0E714(a1, a2);
    }
    else
    {
      *(_DWORD *)(a1 + 84) = -1;
    }
  }
}

uint64_t sub_1B0CE7B34(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a3) {
    goto LABEL_29;
  }
  int v10 = *(_DWORD *)(a2 + 40);
  uint64_t v11 = (v10 - 1);
  if (v10 < 1) {
    goto LABEL_29;
  }
  uint64_t v12 = *(void *)(a2 + 32);
  int v13 = (unsigned char **)(v12 + 32 * v11);
  while (1)
  {
    uint64_t v14 = *v13;
    if (*v13) {
      break;
    }
LABEL_11:
    if (!v11)
    {
      uint64_t v19 = "main";
      for (uint64_t i = (unsigned __int8 *)a3; ; ++i)
      {
        uint64_t v21 = *(unsigned __int8 *)v19;
        uint64_t v22 = *i;
        if (v21 == v22)
        {
          if (!*v19)
          {
            LODWORD(v11) = 0;
            return *(void *)(v12 + 32 * v11 + 8);
          }
        }
        else if (byte_1B0DE1758[v21] != byte_1B0DE1758[v22])
        {
          break;
        }
        ++v19;
      }
    }
    v13 -= 4;
    BOOL v18 = (int)v11 <= 0;
    LODWORD(v11) = v11 - 1;
    if (v18) {
      goto LABEL_29;
    }
  }
  for (uint64_t j = (unsigned __int8 *)a3; ; ++j)
  {
    uint64_t v16 = *v14;
    uint64_t v17 = *j;
    if (v16 == v17) {
      break;
    }
    if (byte_1B0DE1758[v16] != byte_1B0DE1758[v17]) {
      goto LABEL_11;
    }
LABEL_7:
    ++v14;
  }
  if (*v14) {
    goto LABEL_7;
  }
  if (v11 != 1)
  {
    if ((v11 & 0x80000000) == 0) {
      return *(void *)(v12 + 32 * v11 + 8);
    }
LABEL_29:
    sub_1B0CE79F4((uint64_t)a1, 1, "unknown database %s", a4, a5, a6, a7, a8, a3);
    return 0;
  }
  long long v55 = 0u;
  long long v56 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v48 = 0u;
  long long v47 = 0u;
  long long v46 = 0u;
  long long v45 = 0u;
  long long v44 = 0u;
  long long v43 = 0u;
  long long v42 = 0u;
  long long v41 = 0u;
  long long v40 = 0u;
  long long v39 = 0u;
  long long v38 = 0u;
  long long v37 = 0u;
  long long v36 = 0u;
  long long v35 = 0u;
  long long v34 = 0u;
  long long v33 = 0u;
  long long v32 = 0u;
  uint64_t v23 = *(void *)(a2 + 344);
  uint64_t v57 = 0;
  *((void *)&v47 + 1) = v23;
  *(void *)(a2 + 344) = &v31;
  uint64_t v31 = a2;
  if (*(unsigned char *)(a2 + 103)) {
    sub_1B0CEF2BC((uint64_t)&v31, "out of memory", a3, a4, a5, a6, a7, a8, v30);
  }
  if (!sub_1B0D0E7A4((uint64_t)&v31))
  {
    if ((void)v32) {
      sub_1B0D05C10(a1, (void *)v32);
    }
    sub_1B0CEF890(&v31);
    uint64_t v12 = *(void *)(a2 + 32);
    LODWORD(v11) = 1;
    return *(void *)(v12 + 32 * v11 + 8);
  }
  sub_1B0CE79F4((uint64_t)a1, v33, "%s", v24, v25, v26, v27, v28, v32);
  if ((void)v32) {
    sub_1B0D05C10(a1, (void *)v32);
  }
  sub_1B0CEF890(&v31);
  return 0;
}

int sqlite3_backup_step(sqlite3_backup *p, int nPage)
{
  if (p)
  {
    uint64_t v6 = *(void *)(*((void *)p + 4) + 24);
    if (v6) {
      xmmword_1EB21CA40(v6);
    }
    uint64_t v7 = *((void *)p + 5);
    if (*(unsigned char *)(v7 + 17))
    {
      ++*(_DWORD *)(v7 + 20);
      if (!*(unsigned char *)(v7 + 18)) {
        sub_1B0D12478(v7);
      }
    }
    if (*(void *)p)
    {
      uint64_t v8 = *(void *)(*(void *)p + 24);
      if (v8) {
        xmmword_1EB21CA40(v8);
      }
    }
    unsigned int v9 = *((_DWORD *)p + 12);
    if (v9 <= 6 && ((1 << v9) & 0x61) != 0)
    {
      uint64_t v10 = *((void *)p + 5);
      uint64_t v11 = *(uint64_t **)(v10 + 8);
      uint64_t v12 = *v11;
      uint64_t v13 = **(void **)(*((void *)p + 1) + 8);
      if (*(void *)p && *((unsigned char *)v11 + 36) == 2)
      {
        int v14 = 5;
        BOOL v15 = 1;
        goto LABEL_36;
      }
      BOOL v15 = *(unsigned char *)(v10 + 16) != 0;
      if (*(unsigned char *)(v10 + 16)) {
        int v14 = 0;
      }
      else {
        int v14 = sub_1B0D12594(v10, 0, 0);
      }
      int v17 = *((_DWORD *)p + 5);
      if (v17 | v14)
      {
        if (v14) {
          goto LABEL_36;
        }
        if (!v17)
        {
LABEL_28:
          uint64_t v18 = *((void *)p + 1);
          uint64_t v19 = (_DWORD *)((char *)p + 16);
          if (*(unsigned char *)(v18 + 17) || *(unsigned __int8 *)(v18 + 16) <= 1u)
          {
            int v14 = sub_1B0D12594(v18, 2, v19);
            if (v14) {
              goto LABEL_36;
            }
          }
          else
          {
            uint64_t v20 = *(uint64_t **)(v18 + 8);
            *uint64_t v19 = bswap32(*(_DWORD *)(*(void *)(v20[3] + 80) + 40));
            uint64_t v21 = *v20;
            int v22 = *(_DWORD *)(*(void *)v18 + 788);
            if (*(_DWORD *)(v21 + 128) < v22)
            {
              if (*(unsigned char *)(v21 + 10))
              {
                int v14 = sub_1B0D13268(v21, v22);
                if (v14)
                {
LABEL_36:
                  uint64_t v23 = *(void *)(*((void *)p + 5) + 8);
                  uint64_t v24 = *(int *)(v23 + 52);
                  uint64_t v25 = *(_DWORD **)(*((void *)p + 1) + 8);
                  int v26 = v25[13];
                  if (v14) {
                    goto LABEL_45;
                  }
                  if (*(unsigned char *)(*(void *)v25 + 9) == 5)
                  {
                    if (v24 == v26)
                    {
                      int v14 = 0;
                      goto LABEL_45;
                    }
                  }
                  else
                  {
                    if (*(unsigned char *)(v13 + 16))
                    {
                      int v14 = 0;
                    }
                    else
                    {
                      int v14 = 0;
                      if (!*(unsigned char *)(v13 + 20)) {
                        goto LABEL_45;
                      }
                    }
                    if (v24 == v26)
                    {
LABEL_45:
                      unsigned int v27 = *(_DWORD *)(v23 + 64);
                      int v61 = v25[13];
                      BOOL v62 = v15;
                      int v60 = *(unsigned __int8 *)(*(void *)v25 + 9);
                      if (nPage)
                      {
                        uint64_t v28 = *((unsigned int *)p + 6);
                        int v29 = 1;
                        while (v28 <= v27 && !v14)
                        {
                          int v30 = v29;
                          if (v28 == dword_1E9B51ED0
                                            / *(_DWORD *)(*(void *)(*((void *)p + 5) + 8) + 52)
                                            + 1)
                          {
                            int v14 = 0;
                          }
                          else
                          {
                            uint64_t v63 = 0;
                            int v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(v12 + 288))(v12, v28, &v63, 2);
                            if (!v14)
                            {
                              int v14 = sub_1B0CE8578((uint64_t)p, v28, *(void *)(v63 + 8), 0);
                              uint64_t v31 = v63;
                              if (v63)
                              {
                                if ((*(_WORD *)(v63 + 52) & 0x20) != 0)
                                {
                                  uint64_t v32 = *(void *)(v63 + 40);
                                  --*(_DWORD *)(v32 + 152);
                                  *(void *)(v31 + 32) = *(void *)(v32 + 168);
                                  *(void *)(v32 + 168) = v31;
                                  (*(void (**)(void, void, void))(**(void **)(v32 + 72) + 144))(*(void *)(v32 + 72), *(void *)(v32 + 200) * (*(_DWORD *)(v31 + 48) - 1), *(void *)(v31 + 8));
                                }
                                else
                                {
                                  sub_1B0D0E3E8(v63);
                                }
                              }
                            }
                            LODWORD(v28) = *((_DWORD *)p + 6);
                          }
                          uint64_t v28 = (v28 + 1);
                          *((_DWORD *)p + 6) = v28;
                          int v29 = v30 + 1;
                          if ((nPage & 0x80000000) == 0 && v30 >= nPage) {
                            break;
                          }
                        }
                      }
                      uint64_t v33 = v13;
                      if (v14 != 101)
                      {
                        if (v14) {
                          goto LABEL_119;
                        }
                        unsigned int v34 = *((_DWORD *)p + 6);
                        *((_DWORD *)p + 13) = v27 - v34 + 1;
                        *((_DWORD *)p + 14) = v27;
                        if (v27 >= v34)
                        {
                          int v14 = 0;
                          if (!*((_DWORD *)p + 15))
                          {
                            uint64_t v48 = **(void **)(*((void *)p + 5) + 8);
                            *((void *)p + 8) = *(void *)(v48 + 112);
                            *(void *)(v48 + 112) = p;
                            *((_DWORD *)p + 15) = 1;
                          }
                          goto LABEL_119;
                        }
                      }
                      if (!v27)
                      {
                        uint64_t v35 = *((void *)p + 1);
                        if (*(unsigned char *)(v35 + 17))
                        {
                          ++*(_DWORD *)(v35 + 20);
                          if (!*(unsigned char *)(v35 + 18)) {
                            sub_1B0D12478(v35);
                          }
                        }
                        uint64_t v36 = *(void *)(v35 + 8);
                        *(_DWORD *)(v36 + 64) = 0;
                        int v14 = sub_1B0CB6D6C(v36);
                        if (*(unsigned char *)(v35 + 17))
                        {
                          int v37 = *(_DWORD *)(v35 + 20) - 1;
                          *(_DWORD *)(v35 + 20) = v37;
                          if (!v37) {
                            sub_1B0D12558(v35);
                          }
                        }
                        if (v14 != 101 && v14 != 0) {
                          goto LABEL_119;
                        }
                        unsigned int v27 = 1;
                      }
                      int v14 = sub_1B0CE888C(*((void *)p + 1), 1, *((_DWORD *)p + 4) + 1);
                      if (v14) {
                        goto LABEL_119;
                      }
                      if (*(void *)p) {
                        sub_1B0CE89B4(*(void *)p);
                      }
                      if (v60 == 5)
                      {
                        int v14 = sub_1B0CE8A9C(*((void *)p + 1), 2);
                        if (v14) {
                          goto LABEL_119;
                        }
                      }
                      if ((int)v24 >= v61)
                      {
                        *(_DWORD *)(v13 + 32) = (int)v24 / v61 * v27;
                        int v14 = sub_1B0CC19D8(v13, 0, 0);
                        if (v14) {
                          goto LABEL_119;
                        }
                        goto LABEL_107;
                      }
                      int v39 = (int)(v27 + v61 / (int)v24 - 1) / (v61 / (int)v24);
                      uint64_t v40 = v39
                          - (v39 == dword_1E9B51ED0
                                                / *(_DWORD *)(*(void *)(*((void *)p + 1) + 8) + 52)
                                                + 1);
                      uint64_t v41 = (int)v24 * (uint64_t)(int)v27;
                      uint64_t v42 = *(void *)(v33 + 72);
                      unsigned int v43 = *(_DWORD *)(v33 + 32);
                      if (v40 > v43) {
                        goto LABEL_111;
                      }
                      while (1)
                      {
                        if (v40 == dword_1E9B51ED0
                                          / *(_DWORD *)(*(void *)(*((void *)p + 1) + 8) + 52)
                                          + 1)
                        {
                          int v14 = 0;
                          goto LABEL_86;
                        }
                        uint64_t v63 = 0;
                        int v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, void))(v33 + 288))(v33, v40, &v63, 0);
                        if (!v14)
                        {
                          long long v44 = *(_DWORD **)(v63 + 40);
                          if ((*(_WORD *)(v63 + 52) & 4) == 0 || v44[8] < *(_DWORD *)(v63 + 48))
                          {
                            int v14 = v44[12];
                            if (!v14)
                            {
                              if (v44[46] <= v44[50]) {
                                int v45 = sub_1B0CBD7E0(v63);
                              }
                              else {
                                int v45 = sub_1B0D133D0(v63);
                              }
LABEL_97:
                              int v14 = v45;
                            }
                            uint64_t v46 = v63;
                            if (v63) {
                              goto LABEL_99;
                            }
                            goto LABEL_86;
                          }
                          if (v44[32])
                          {
                            int v45 = sub_1B0D0F4D4(v63);
                            goto LABEL_97;
                          }
                          int v14 = 0;
                          uint64_t v46 = v63;
                          if (v63)
                          {
LABEL_99:
                            if ((*(_WORD *)(v46 + 52) & 0x20) != 0)
                            {
                              uint64_t v47 = *(void *)(v46 + 40);
                              --*(_DWORD *)(v47 + 152);
                              *(void *)(v46 + 32) = *(void *)(v47 + 168);
                              *(void *)(v47 + 168) = v46;
                              (*(void (**)(void, void, void))(**(void **)(v47 + 72) + 144))(*(void *)(v47 + 72), *(void *)(v47 + 200) * (*(_DWORD *)(v46 + 48) - 1), *(void *)(v46 + 8));
                            }
                            else
                            {
                              sub_1B0D0E3E8(v46);
                            }
                          }
                        }
LABEL_86:
                        if (!v14)
                        {
                          uint64_t v40 = (v40 + 1);
                          if (v40 <= v43) {
                            continue;
                          }
                        }
                        if (!v14) {
LABEL_111:
                        }
                          int v14 = sub_1B0CC19D8(v33, 0, 1);
                        uint64_t v50 = v41;
                        if (v41 >= dword_1E9B51ED0 + v61) {
                          uint64_t v41 = dword_1E9B51ED0 + v61;
                        }
                        BOOL v51 = v14 == 0;
                        if (!v14)
                        {
                          uint64_t v52 = dword_1E9B51ED0 + (int)v24;
                          if (v41 > v52)
                          {
                            do
                            {
                              uint64_t v63 = 0;
                              int v14 = (*(uint64_t (**)(uint64_t, void, uint64_t *, void))(v12 + 288))(v12, (v52 / v24) + 1, &v63, 0);
                              if (!v14) {
                                int v14 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)v42 + 24))(v42, *(void *)(v63 + 8), v24, v52);
                              }
                              uint64_t v58 = v63;
                              if (v63)
                              {
                                if ((*(_WORD *)(v63 + 52) & 0x20) != 0)
                                {
                                  uint64_t v59 = *(void *)(v63 + 40);
                                  --*(_DWORD *)(v59 + 152);
                                  *(void *)(v58 + 32) = *(void *)(v59 + 168);
                                  *(void *)(v59 + 168) = v58;
                                  (*(void (**)(void, void, void))(**(void **)(v59 + 72) + 144))(*(void *)(v59 + 72), *(void *)(v59 + 200) * (*(_DWORD *)(v58 + 48) - 1), *(void *)(v58 + 8));
                                }
                                else
                                {
                                  sub_1B0D0E3E8(v63);
                                }
                              }
                              v52 += v24;
                              BOOL v51 = v14 == 0;
                              if (v14) {
                                BOOL v57 = 0;
                              }
                              else {
                                BOOL v57 = v52 < v41;
                              }
                            }
                            while (v57);
                          }
                        }
                        if (!v51 || (int v14 = sub_1B0CE8C0C(v42, v50)) != 0 || (int v14 = sub_1B0CE8C78(v33, 0)) != 0)
                        {
LABEL_119:
                          if (!v62)
                          {
                            sub_1B0CB23E8(*((void *)p + 5), 0, v3);
                            sub_1B0CB283C(*((void *)p + 5), 0);
                          }
                          if (v14 == 3082) {
                            unsigned int v9 = 7;
                          }
                          else {
                            unsigned int v9 = v14;
                          }
                          *((_DWORD *)p + 12) = v9;
                          goto LABEL_125;
                        }
LABEL_107:
                        int v49 = sub_1B0CB283C(*((void *)p + 1), 0);
                        if (v49) {
                          int v14 = v49;
                        }
                        else {
                          int v14 = 101;
                        }
                        goto LABEL_119;
                      }
                    }
                  }
                  int v14 = 8;
                  goto LABEL_45;
                }
              }
            }
          }
          int v14 = 0;
          *((_DWORD *)p + 5) = 1;
          goto LABEL_36;
        }
      }
      else
      {
        if (sub_1B0CD9448(*((void *)p + 1), *(_DWORD *)(*(void *)(*((void *)p + 5) + 8) + 52), 0, 0, *(int8x8_t *)&v3) == 7)
        {
          int v14 = 7;
          goto LABEL_36;
        }
        if (!*((_DWORD *)p + 5)) {
          goto LABEL_28;
        }
      }
      int v14 = 0;
      goto LABEL_36;
    }
LABEL_125:
    if (*(void *)p)
    {
      uint64_t v53 = *(void *)(*(void *)p + 24);
      if (v53) {
        xmmword_1EB21CA50(v53);
      }
    }
    uint64_t v54 = *((void *)p + 5);
    if (*(unsigned char *)(v54 + 17))
    {
      int v55 = *(_DWORD *)(v54 + 20) - 1;
      *(_DWORD *)(v54 + 20) = v55;
      if (!v55) {
        sub_1B0D12558(v54);
      }
    }
    uint64_t v56 = *(void *)(*((void *)p + 4) + 24);
    if (v56) {
      xmmword_1EB21CA50(v56);
    }
    return v9;
  }
  else
  {
    return sub_1B0CE1978(88602);
  }
}

uint64_t sub_1B0CE8578(uint64_t a1, unsigned int a2, uint64_t a3, int a4)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(v5 + 8);
  uint64_t v7 = *(void *)v6;
  uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8);
  int v9 = *(_DWORD *)(v6 + 52);
  int v10 = *(_DWORD *)(v8 + 52);
  int v11 = *(_DWORD *)(v8 + 56);
  if (v10 >= v9) {
    int v12 = *(_DWORD *)(v6 + 52);
  }
  else {
    int v12 = *(_DWORD *)(v8 + 52);
  }
  if (!*(unsigned char *)(v5 + 17))
  {
    int v14 = *(unsigned __int8 *)(v6 + 38);
    int v15 = *(_DWORD *)(v6 + 56);
    int v16 = *(_DWORD *)(v6 + 52);
    goto LABEL_12;
  }
  int v13 = *(_DWORD *)(v5 + 20);
  *(_DWORD *)(v5 + 20) = v13 + 1;
  if (*(unsigned char *)(v5 + 18))
  {
    int v14 = *(unsigned __int8 *)(v6 + 38);
    int v15 = *(_DWORD *)(v6 + 56);
    int v16 = v9;
    *(_DWORD *)(v5 + 20) = v13;
    if (v13) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  sub_1B0D12478(v5);
  uint64_t v17 = *(void *)(v5 + 8);
  int v14 = *(unsigned __int8 *)(v17 + 38);
  int v16 = *(_DWORD *)(v17 + 52);
  int v15 = *(_DWORD *)(v17 + 56);
  if (*(unsigned char *)(v5 + 17))
  {
    int v18 = *(_DWORD *)(v5 + 20);
    *(_DWORD *)(v5 + 20) = v18 - 1;
    if (v18 == 1) {
LABEL_11:
    }
      sub_1B0D12558(v5);
  }
LABEL_12:
  int v19 = v10 - v11;
  int v20 = v16 - v15;
  if (v16 - v15 <= v14) {
    int v20 = v14;
  }
  if (v10 == v9)
  {
    uint64_t v21 = 0;
    if (v19 == v20) {
      goto LABEL_21;
    }
  }
  else
  {
    uint64_t v21 = 8 * (*(void *)(v7 + 320) != 0);
    if (v19 == v20) {
      goto LABEL_21;
    }
  }
  int v37 = v10;
  unsigned int v22 = sub_1B0C7CE4C(v7, &v37, v19);
  if (v22) {
    uint64_t v21 = v22;
  }
  else {
    uint64_t v21 = 8 * (v37 != v10);
  }
LABEL_21:
  if (!v21 && v10 >= 1)
  {
    int64_t v23 = v10 * (unint64_t)a2;
    int64_t v24 = v23 - v10;
    size_t v25 = v12;
    do
    {
      uint64_t v36 = 0;
      int64_t v26 = v24 / v9;
      if (dword_1E9B51ED0 / *(_DWORD *)(*(void *)(*(void *)(a1 + 8) + 8) + 52) == v26)
      {
        uint64_t v21 = 0;
        goto LABEL_45;
      }
      uint64_t v21 = (*(uint64_t (**)(uint64_t, void, uint64_t *, void))(v7 + 288))(v7, (v26 + 1), &v36, 0);
      if (!v21)
      {
        uint64_t v27 = v36;
        uint64_t v28 = *(_DWORD **)(v36 + 40);
        if ((*(_WORD *)(v36 + 52) & 4) != 0 && v28[8] >= *(_DWORD *)(v36 + 48))
        {
          if (!v28[32]) {
            goto LABEL_38;
          }
          uint64_t v21 = sub_1B0D0F4D4(v36);
          if (!v21)
          {
LABEL_37:
            uint64_t v27 = v36;
LABEL_38:
            int64_t v29 = *(void *)(v27 + 8) - v9 * v26;
            memcpy((void *)(v29 + v24), (const void *)(a3 + v24 % v10), v25);
            uint64_t v21 = 0;
            **(unsigned char **)(v36 + 16) = 0;
            if (!a4 && !v24)
            {
              uint64_t v21 = 0;
              *(_DWORD *)(v29 + 28) = bswap32(*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 64));
            }
          }
        }
        else
        {
          uint64_t v21 = v28[12];
          if (!v21)
          {
            if (v28[46] <= v28[50])
            {
              uint64_t v21 = sub_1B0CBD7E0(v36);
              if (!v21) {
                goto LABEL_37;
              }
            }
            else
            {
              uint64_t v21 = sub_1B0D133D0(v36);
              if (!v21) {
                goto LABEL_37;
              }
            }
          }
        }
      }
      uint64_t v30 = v36;
      if (!v36) {
        goto LABEL_44;
      }
      if ((*(_WORD *)(v36 + 52) & 0x20) == 0)
      {
        sub_1B0D0E3E8(v36);
LABEL_44:
        if (v21) {
          return v21;
        }
        goto LABEL_45;
      }
      uint64_t v31 = *(void *)(v36 + 40);
      --*(_DWORD *)(v31 + 152);
      *(void *)(v30 + 32) = *(void *)(v31 + 168);
      *(void *)(v31 + 168) = v30;
      (*(void (**)(void, void, void))(**(void **)(v31 + 72) + 144))(*(void *)(v31 + 72), *(void *)(v31 + 200) * (*(_DWORD *)(v30 + 48) - 1), *(void *)(v30 + 8));
      if (v21) {
        return v21;
      }
LABEL_45:
      v24 += v9;
    }
    while (v24 < v23);
  }
  return v21;
}

uint64_t sub_1B0CE888C(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(unsigned char *)(a1 + 17))
  {
    ++*(_DWORD *)(a1 + 20);
    if (!*(unsigned char *)(a1 + 18)) {
      sub_1B0D12478(a1);
    }
  }
  uint64_t v7 = *(void *)(v6 + 24);
  uint64_t v8 = *(void *)(v7 + 80);
  uint64_t v9 = *(void *)(v7 + 112);
  int v10 = *(_DWORD **)(v9 + 40);
  if ((*(_WORD *)(v9 + 52) & 4) != 0 && v10[8] >= *(_DWORD *)(v9 + 48))
  {
    if (v10[32])
    {
      uint64_t v11 = sub_1B0D0F4D4(v9);
      if (v11)
      {
LABEL_16:
        if (!*(unsigned char *)(a1 + 17)) {
          return v11;
        }
        goto LABEL_17;
      }
    }
  }
  else
  {
    uint64_t v11 = v10[12];
    if (v11) {
      goto LABEL_16;
    }
    if (v10[46] <= v10[50])
    {
      uint64_t v11 = sub_1B0CBD7E0(v9);
      if (v11) {
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t v11 = sub_1B0D133D0(v9);
      if (v11) {
        goto LABEL_16;
      }
    }
  }
  *(_DWORD *)(v8 + 4 * a2 + 36) = bswap32(a3);
  if (a2 == 7)
  {
    uint64_t v11 = 0;
    *(unsigned char *)(v6 + 34) = a3;
    goto LABEL_16;
  }
  uint64_t v11 = 0;
  if (!*(unsigned char *)(a1 + 17)) {
    return v11;
  }
LABEL_17:
  int v12 = *(_DWORD *)(a1 + 20) - 1;
  *(_DWORD *)(a1 + 20) = v12;
  if (!v12) {
    sub_1B0D12558(a1);
  }
  return v11;
}

void *sub_1B0CE89B4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 111)) {
    sub_1B0D0E4C4(a1);
  }
  int v2 = *(_DWORD *)(a1 + 40);
  if (v2 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = 24;
    do
    {
      uint64_t v5 = *(void *)(*(void *)(a1 + 32) + v4);
      if (v5)
      {
        if (*(_DWORD *)(a1 + 72))
        {
          *(_WORD *)(v5 + 114) |= 8u;
        }
        else
        {
          sub_1B0D1BE68(v5);
          int v2 = *(_DWORD *)(a1 + 40);
        }
      }
      ++v3;
      v4 += 32;
    }
    while (v3 < v2);
  }
  *(_DWORD *)(a1 + 44) &= 0xFFFFFFEE;
  uint64_t result = sub_1B0D22AA4((void *)a1);
  if (*(unsigned char *)(a1 + 111))
  {
    if (*(_DWORD *)(a1 + 72)) {
      return result;
    }
  }
  else
  {
    uint64_t result = (void *)sub_1B0D0E55C(a1);
    if (*(_DWORD *)(a1 + 72)) {
      return result;
    }
  }

  return sub_1B0D26B04((void *)a1);
}

uint64_t sub_1B0CE8A9C(uint64_t a1, int a2)
{
  unsigned __int8 v2 = a2;
  uint64_t v4 = *(void *)(a1 + 8);
  *(_WORD *)(v4 + 40) = *(_WORD *)(v4 + 40) & 0xFFDF | (32 * (a2 == 1));
  if (!*(unsigned char *)(a1 + 17) && *(unsigned char *)(a1 + 16) || (uint64_t result = sub_1B0D12594(a1, 0, 0), !result))
  {
    uint64_t v6 = *(void *)(v4 + 24);
    uint64_t v7 = *(void *)(v6 + 80);
    int v8 = *(unsigned __int8 *)(v7 + 18);
    if (v8 == v2 && *(unsigned __int8 *)(v7 + 19) == v8)
    {
      uint64_t result = 0;
      goto LABEL_26;
    }
    if (*(unsigned char *)(a1 + 17) || *(unsigned __int8 *)(a1 + 16) <= 1u)
    {
      uint64_t result = sub_1B0D12594(a1, 2, 0);
      if (result) {
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v9 = **(void **)(a1 + 8);
      int v10 = *(_DWORD *)(*(void *)a1 + 788);
      if (*(_DWORD *)(v9 + 128) >= v10 || !*(unsigned char *)(v9 + 10))
      {
LABEL_16:
        uint64_t v11 = *(void *)(v6 + 112);
        int v12 = *(_DWORD **)(v11 + 40);
        if ((*(_WORD *)(v11 + 52) & 4) != 0 && v12[8] >= *(_DWORD *)(v11 + 48))
        {
          if (!v12[32]) {
            goto LABEL_25;
          }
          uint64_t result = sub_1B0D0F4D4(v11);
        }
        else
        {
          uint64_t result = v12[12];
          if (result) {
            goto LABEL_26;
          }
          if (v12[46] <= v12[50]) {
            uint64_t result = sub_1B0CBD7E0(v11);
          }
          else {
            uint64_t result = sub_1B0D133D0(v11);
          }
        }
        if (result) {
          goto LABEL_26;
        }
LABEL_25:
        uint64_t result = 0;
        *(unsigned char *)(v7 + 18) = v2;
        *(unsigned char *)(v7 + 19) = v2;
        goto LABEL_26;
      }
      uint64_t result = sub_1B0D13268(v9, v10);
      if (result) {
        goto LABEL_26;
      }
    }
    uint64_t v6 = *(void *)(v4 + 24);
    goto LABEL_16;
  }
LABEL_26:
  *(_WORD *)(v4 + 40) &= ~0x20u;
  return result;
}

uint64_t sub_1B0CE8C0C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, &v5);
  if (!result)
  {
    if (v5 <= a2) {
      return 0;
    }
    else {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, a2);
    }
  }
  return result;
}

uint64_t sub_1B0CE8C78(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 72);
  if (!*(void *)v3
    || ((uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3 + 80))(v3, 21, a2),
         result != 12)
      ? (BOOL v5 = result == 0)
      : (BOOL v5 = 1),
        v5))
  {
    if (*(unsigned char *)(a1 + 11) || !*(unsigned char *)(a1 + 14))
    {
      return 0;
    }
    else
    {
      uint64_t v6 = *(uint64_t (**)(void))(**(void **)(a1 + 72) + 40);
      return v6();
    }
  }
  return result;
}

int sqlite3_backup_finish(sqlite3_backup *p)
{
  if (!p) {
    return 0;
  }
  unsigned __int8 v2 = p;
  uint64_t v3 = *((void *)p + 4);
  uint64_t v4 = *(void *)(v3 + 24);
  if (v4) {
    xmmword_1EB21CA40(v4);
  }
  uint64_t v5 = *((void *)v2 + 5);
  if (*(unsigned char *)(v5 + 17))
  {
    ++*(_DWORD *)(v5 + 20);
    if (!*(unsigned char *)(v5 + 18)) {
      sub_1B0D12478(v5);
    }
  }
  if (*(void *)v2)
  {
    uint64_t v6 = *(void *)(*(void *)v2 + 24);
    if (!v6 || (xmmword_1EB21CA40(v6), *(void *)v2)) {
      --*(_DWORD *)(*((void *)v2 + 5) + 24);
    }
  }
  if (*((_DWORD *)v2 + 15))
  {
    uint64_t v7 = (void *)(**(void **)(*((void *)v2 + 5) + 8) + 112);
    do
    {
      int v8 = v7;
      uint64_t v9 = (sqlite3_backup *)*v7;
      uint64_t v7 = (void *)(*v7 + 64);
    }
    while (v9 != v2);
    *int v8 = *((void *)v2 + 8);
  }
  sub_1B0CC7410(*((void *)v2 + 1), 0, 0, v1);
  if (*((_DWORD *)v2 + 12) == 101) {
    int v11 = 0;
  }
  else {
    int v11 = *((_DWORD *)v2 + 12);
  }
  uint64_t v12 = *(void *)v2;
  if (*(void *)v2)
  {
    *(_DWORD *)(v12 + 80) = v11;
    if (v11 || *(void *)(v12 + 416))
    {
      sub_1B0D0E714(v12, v11);
      uint64_t v12 = *(void *)v2;
    }
    else
    {
      *(_DWORD *)(v12 + 84) = -1;
    }
    sub_1B0CE8ED8(v12, v10);
  }
  uint64_t v13 = *((void *)v2 + 5);
  if (*(unsigned char *)(v13 + 17))
  {
    int v14 = *(_DWORD *)(v13 + 20) - 1;
    *(_DWORD *)(v13 + 20) = v14;
    if (!v14) {
      sub_1B0D12558(v13);
    }
  }
  if (*(void *)v2)
  {
    int v15 = (double (**)(sqlite3_backup *))&off_1EB21C9E8;
    if (dword_1EB21C9C0)
    {
      if ((void)xmmword_1EB2201B0) {
        xmmword_1EB21CA40(xmmword_1EB2201B0);
      }
      qword_1EB220108 -= (int)off_1EB21C9F8(v2);
      --qword_1EB220150;
      off_1EB21C9E8(v2);
      unsigned __int8 v2 = (sqlite3_backup *)xmmword_1EB2201B0;
      if (!(void)xmmword_1EB2201B0) {
        goto LABEL_33;
      }
      int v15 = (double (**)(sqlite3_backup *))&xmmword_1EB21CA50;
    }
    double v10 = (*v15)(v2);
  }
LABEL_33:
  sub_1B0CE8ED8(v3, v10);
  return v11;
}

uint64_t sub_1B0CE8ED8(uint64_t result, double a2)
{
  uint64_t v2 = result;
  if (*(unsigned __int8 *)(result + 113) != 167 || *(void *)(result + 8))
  {
LABEL_3:
    uint64_t v2 = *(void *)(result + 24);
    if (!v2) {
      return result;
    }
    uint64_t v3 = &xmmword_1EB21CA50;
    goto LABEL_5;
  }
  uint64_t v5 = *(unsigned int *)(result + 40);
  if ((int)v5 >= 1)
  {
    uint64_t v6 = *(void *)(result + 32) + 8;
    while (!*(void *)v6 || !*(_DWORD *)(*(void *)v6 + 24))
    {
      v6 += 32;
      if (!--v5) {
        goto LABEL_14;
      }
    }
    goto LABEL_3;
  }
LABEL_14:
  sub_1B0CDA30C(result, 0, a2);
  for (uint64_t i = *(void **)(v2 + 760); i; uint64_t i = *(void **)(v2 + 760))
  {
    *(void *)(v2 + 760) = i[3];
    sub_1B0D05C10((void *)v2, i);
  }
  *(void *)(v2 + 788) = 0;
  *(unsigned char *)(v2 + 109) = 0;
  if (*(int *)(v2 + 40) >= 1)
  {
    uint64_t v9 = *(void *)(v2 + 32);
    uint64_t v10 = *(void *)(v9 + 8);
    if (v10)
    {
      sub_1B0CC70E4(v10, v7);
      *(void *)(v9 + 8) = 0;
      *(void *)(v9 + 24) = 0;
    }
    if (*(int *)(v2 + 40) >= 2)
    {
      uint64_t v11 = *(void *)(v2 + 32);
      uint64_t v12 = *(void *)(v11 + 40);
      if (v12)
      {
        sub_1B0CC70E4(v12, v7);
        *(void *)(v11 + 40) = 0;
      }
      if (*(int *)(v2 + 40) >= 3)
      {
        uint64_t v13 = 0;
        uint64_t v14 = 2;
        do
        {
          uint64_t v15 = *(void *)(v2 + 32) + v13;
          uint64_t v16 = *(void *)(v15 + 72);
          if (v16)
          {
            sub_1B0CC70E4(v16, v7);
            *(void *)(v15 + 72) = 0;
            *(void *)(v15 + 88) = 0;
          }
          ++v14;
          v13 += 32;
        }
        while (v14 < *(int *)(v2 + 40));
      }
    }
  }
  uint64_t v17 = *(void *)(*(void *)(v2 + 32) + 56);
  if (v17) {
    sub_1B0D1BE68(v17);
  }
  sub_1B0D22AA4((void *)v2);
  sub_1B0D26B04((void *)v2);
  for (uint64_t j = *(void **)(v2 + 624); j; uint64_t j = (void *)*j)
  {
    unsigned int v22 = (void *)j[2];
    do
    {
      uint64_t v24 = v22[8];
      if (v24)
      {
        if ((*(_DWORD *)v24)-- == 1)
        {
          (*(void (**)(void))(v24 + 8))(*(void *)(v24 + 16));
          sub_1B0D05C10((void *)v2, (void *)v24);
        }
      }
      int64_t v23 = (void *)v22[2];
      sub_1B0D05C10((void *)v2, v22);
      unsigned int v22 = v23;
    }
    while (v23);
  }
  sub_1B0D2226C(v2 + 616);
  for (k = *(void **)(v2 + 648); k; k = (void *)*k)
  {
    int64_t v26 = (void *)k[2];
    uint64_t v27 = (void (*)(void))v26[4];
    if (v27) {
      v27(v26[2]);
    }
    uint64_t v28 = (void (*)(void))v26[9];
    if (v28) {
      v28(v26[7]);
    }
    int64_t v29 = (void (*)(void))v26[14];
    if (v29) {
      v29(v26[12]);
    }
    sub_1B0D05C10((void *)v2, v26);
  }
  sub_1B0D2226C(v2 + 640);
  for (m = *(void **)(v2 + 576); m; m = (void *)*m)
  {
    uint64_t v30 = m[2];
    uint64_t v31 = *(void *)(v30 + 40);
    if (v31)
    {
      *(_DWORD *)(v31 + 48) |= 0x4000u;
      if (*(void *)(v2 + 816) || (int v32 = *(_DWORD *)(v31 + 44) - 1, (*(_DWORD *)(v31 + 44) = v32) == 0)) {
        sub_1B0D26BF8((void *)v2, (void *)v31);
      }
      *(void *)(v30 + 40) = 0;
    }
    int v33 = *(_DWORD *)(v30 + 16) - 1;
    *(_DWORD *)(v30 + 16) = v33;
    if (!v33)
    {
      unsigned int v34 = *(void (**)(void))(v30 + 32);
      if (v34) {
        v34(*(void *)(v30 + 24));
      }
      sub_1B0D05C10((void *)v2, (void *)v30);
    }
  }
  sub_1B0D2226C(v2 + 568);
  *(_DWORD *)(v2 + 80) = 0;
  if (*(void *)(v2 + 416))
  {
    sub_1B0D0E714(v2, 0);
    uint64_t v21 = *(void *)(v2 + 416);
    if (v21)
    {
      if ((*(_WORD *)(v21 + 20) & 0x9000) != 0 || *(_DWORD *)(v21 + 32)) {
        sub_1B0D180E4(*(void *)(v2 + 416));
      }
      sub_1B0D05C10(*(void **)(v21 + 24), (void *)v21);
    }
  }
  else
  {
    *(_DWORD *)(v2 + 84) = -1;
  }
  *(unsigned char *)(v2 + 113) = -43;
  uint64_t v35 = *(void **)(*(void *)(v2 + 32) + 56);
  if (v35) {
    sub_1B0D05C10((void *)v2, v35);
  }
  uint64_t v36 = *(void (**)(void))(v2 + 328);
  if (v36) {
    v36(*(void *)(v2 + 320));
  }
  uint64_t v37 = *(void *)(v2 + 24);
  if (v37)
  {
    xmmword_1EB21CA50(v37);
    uint64_t v38 = *(void *)(v2 + 24);
    *(unsigned char *)(v2 + 113) = -50;
    if (v38) {
      off_1EB21CA38();
    }
  }
  else
  {
    *(unsigned char *)(v2 + 113) = -50;
  }
  if (*(unsigned char *)(v2 + 440))
  {
    uint64_t v39 = *(void *)(v2 + 504);
    if (v39)
    {
      uint64_t v40 = &off_1EB21C9E8;
      if (!dword_1EB21C9C0)
      {
LABEL_78:
        (*v40)(v39);
        goto LABEL_79;
      }
      if ((void)xmmword_1EB2201B0) {
        xmmword_1EB21CA40(xmmword_1EB2201B0);
      }
      qword_1EB220108 -= (int)off_1EB21C9F8(v39);
      --qword_1EB220150;
      off_1EB21C9E8(v39);
      uint64_t v39 = xmmword_1EB2201B0;
      if ((void)xmmword_1EB2201B0)
      {
        uint64_t v40 = &xmmword_1EB21CA50;
        goto LABEL_78;
      }
    }
  }
LABEL_79:
  uint64_t v3 = &off_1EB21C9E8;
  if (!dword_1EB21C9C0)
  {
LABEL_5:
    uint64_t v4 = *v3;
    return v4(v2);
  }
  if ((void)xmmword_1EB2201B0) {
    xmmword_1EB21CA40(xmmword_1EB2201B0);
  }
  qword_1EB220108 -= (int)off_1EB21C9F8(v2);
  --qword_1EB220150;
  uint64_t result = off_1EB21C9E8(v2);
  uint64_t v2 = xmmword_1EB2201B0;
  if ((void)xmmword_1EB2201B0)
  {
    uint64_t v3 = &xmmword_1EB21CA50;
    goto LABEL_5;
  }
  return result;
}

int sqlite3_backup_remaining(sqlite3_backup *p)
{
  if (p) {
    return *((_DWORD *)p + 13);
  }
  sub_1B0CE1978(88909);
  return 0;
}

int sqlite3_backup_pagecount(sqlite3_backup *p)
{
  if (p) {
    return *((_DWORD *)p + 14);
  }
  sub_1B0CE1978(88923);
  return 0;
}

void sub_1B0CE93FC(uint64_t a1, uint64_t a2)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a2 + 192))
  {
    if (qword_1EB2202F8 != -1) {
      dispatch_once(&qword_1EB2202F8, &unk_1F09A5008);
    }
    uint64_t v4 = qword_1EB2202E0;
    uint64_t v5 = qword_1EB2202D8;
    uint64_t v6 = *(char **)(a2 + 320);
    int v7 = *(_DWORD *)(a2 + 224);
    int v9 = *(_DWORD *)(a2 + 204);
    int v8 = *(_DWORD *)(a2 + 208);
    int v10 = *(_DWORD *)(a2 + 236);
    int v11 = *(_DWORD *)(a2 + 212);
    int v12 = *(_DWORD *)(a2 + 216);
    if (qword_1EB220338 != -1)
    {
      int v56 = *(_DWORD *)(a2 + 212);
      int v49 = *(_DWORD *)(a2 + 224);
      dispatch_once(&qword_1EB220338, &unk_1F09A55C0);
      int v11 = v56;
      int v7 = v49;
    }
    if (dword_1EB21CB84)
    {
      int v53 = v7;
      int v54 = v8;
      uint64_t v13 = *(unsigned int *)(a1 + 40);
      int v58 = v9;
      int v55 = v11;
      if ((int)v13 <= 0)
      {
        int v24 = 0;
        int v52 = -*(_DWORD *)(a2 + 240);
        int v51 = -*(_DWORD *)(a2 + 244);
        int v26 = -*(_DWORD *)(a2 + 248);
      }
      else
      {
        int v14 = 0;
        uint64_t v15 = *(void *)(a1 + 32);
        uint64_t v16 = v15 + 8;
        uint64_t v17 = *(unsigned int *)(a1 + 40);
        do
        {
          if (*(void *)v16) {
            v14 += *(_DWORD *)(**(void **)(*(void *)v16 + 8) + 248);
          }
          v16 += 32;
          --v17;
        }
        while (v17);
        int v18 = 0;
        uint64_t v19 = v15 + 8;
        uint64_t v20 = *(unsigned int *)(a1 + 40);
        do
        {
          if (*(void *)v19) {
            v18 += *(_DWORD *)(**(void **)(*(void *)v19 + 8) + 252);
          }
          v19 += 32;
          --v20;
        }
        while (v20);
        int v21 = 0;
        uint64_t v22 = v15 + 8;
        uint64_t v23 = *(unsigned int *)(a1 + 40);
        do
        {
          if (*(void *)v22) {
            v21 += *(_DWORD *)(**(void **)(*(void *)v22 + 8) + 256);
          }
          v22 += 32;
          --v23;
        }
        while (v23);
        int v24 = 0;
        uint64_t v25 = v15 + 8;
        do
        {
          if (*(void *)v25) {
            v24 += *(_DWORD *)(**(void **)(*(void *)v25 + 8) + 260);
          }
          v25 += 32;
          --v13;
        }
        while (v13);
        int v52 = v14 - *(_DWORD *)(a2 + 240);
        int v51 = v18 - *(_DWORD *)(a2 + 244);
        int v26 = v21 - *(_DWORD *)(a2 + 248);
      }
      int v50 = v26;
      int v27 = *(_DWORD *)(a2 + 252);
      int v57 = v24 - v27;
      int v59 = v12;
      if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v28 = 0;
        goto LABEL_34;
      }
      if (*(_DWORD *)(a2 + 52)) {
        goto LABEL_28;
      }
      uint64_t v28 = 0;
      if ((*(_WORD *)(a2 + 268) & 0x40) != 0 && v10 >= 1)
      {
        if (v58 <= 4 * v10 || strstr(v6, "/*scan*/") || v58 < 101)
        {
          if (v55 < 101)
          {
            if (v54 < 101 || strstr(v6, "/*sort*/") || strstr(v6, "/*scan*/"))
            {
LABEL_28:
              uint64_t v28 = 0;
              goto LABEL_29;
            }
            if (strlen(v6) >= 0x81)
            {
              uint64_t v48 = strndup(v6, 0x80uLL);
              uint64_t v28 = v48;
              if (v48)
              {
                *(_WORD *)(v48 + 125) = 11822;
                v48[127] = 46;
                uint64_t v6 = v48;
              }
            }
            else
            {
              uint64_t v28 = 0;
            }
            if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315138;
              *(void *)int v61 = v6;
              long long v44 = "sort without index in [%s]";
              int v45 = v4;
              uint32_t v46 = 12;
              goto LABEL_113;
            }
          }
          else
          {
            if (strlen(v6) >= 0x81)
            {
              unsigned int v43 = strndup(v6, 0x80uLL);
              uint64_t v28 = v43;
              if (v43)
              {
                *(_WORD *)(v43 + 125) = 11822;
                v43[127] = 46;
                uint64_t v6 = v43;
              }
            }
            else
            {
              uint64_t v28 = 0;
            }
            if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 67109378;
              *(_DWORD *)int v61 = v55;
              *(_WORD *)&v61[4] = 2080;
              *(void *)&v61[6] = v6;
              long long v44 = "%d automatic index rows in [%s]";
              int v45 = v4;
              uint32_t v46 = 18;
LABEL_113:
              _os_log_impl(&dword_1B0C76000, v45, OS_LOG_TYPE_DEFAULT, v44, buf, v46);
            }
          }
        }
        else
        {
          if (strlen(v6) >= 0x81)
          {
            uint64_t v47 = strndup(v6, 0x80uLL);
            uint64_t v28 = v47;
            if (v47)
            {
              *(_WORD *)(v47 + 125) = 11822;
              v47[127] = 46;
              uint64_t v6 = v47;
            }
          }
          else
          {
            uint64_t v28 = 0;
          }
          if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109634;
            *(_DWORD *)int v61 = v58;
            *(_WORD *)&v61[4] = 1024;
            *(_DWORD *)&v61[6] = v10;
            *(_WORD *)&v61[10] = 2080;
            *(void *)&v61[12] = v6;
            long long v44 = "%d scan steps for %d row steps in [%s]";
            int v45 = v4;
            uint32_t v46 = 24;
            goto LABEL_113;
          }
        }
      }
LABEL_29:
      if (v24 != v27)
      {
        int64_t v29 = v28;
        if (v28) {
          goto LABEL_49;
        }
        if (strlen(v6) >= 0x81)
        {
          uint64_t v31 = strndup(v6, 0x80uLL);
          uint64_t v28 = v31;
          if (v31)
          {
            *(_WORD *)(v31 + 125) = 11822;
            v31[127] = 46;
            int64_t v29 = v31;
            goto LABEL_49;
          }
        }
        else
        {
          uint64_t v28 = 0;
        }
        int64_t v29 = v6;
LABEL_49:
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109378;
          *(_DWORD *)int v61 = v57;
          *(_WORD *)&v61[4] = 2080;
          *(void *)&v61[6] = v29;
          _os_log_impl(&dword_1B0C76000, v4, OS_LOG_TYPE_DEFAULT, "spilled %d pages during execution of [%s]", buf, 0x12u);
        }
        uint64_t v6 = v29;
        if ((dword_1EB21CB84 & 0x20) != 0) {
          goto LABEL_52;
        }
        goto LABEL_35;
      }
LABEL_34:
      if ((dword_1EB21CB84 & 0x20) != 0)
      {
LABEL_52:
        int v32 = *(unsigned __int8 *)(a2 + 52);
        if (v32 == 11 || v32 == 26 || *(_DWORD *)(a2 + 256))
        {
          if (qword_1EB2202F8 != -1) {
            dispatch_once(&qword_1EB2202F8, &unk_1F09A5008);
          }
          uint64_t v5 = qword_1EB2202E8;
          int v30 = 1;
        }
        else
        {
          int v30 = 0;
        }
        if (v10 <= 1) {
          int v33 = 1;
        }
        else {
          int v33 = v10;
        }
        if (qword_1EB220330) {
          BOOL v34 = 0;
        }
        else {
          BOOL v34 = *(double *)&qword_1EB220328 <= 0.0;
        }
        if (!v34)
        {
          int v35 = (int)((double)(qword_1EB220330 / (unint64_t)v33) + (double)v33 * *(double *)&qword_1EB220328);
          if (v59 > v35)
          {
            if (qword_1EB2202F8 != -1) {
              dispatch_once(&qword_1EB2202F8, &unk_1F09A5008);
            }
            uint64_t v5 = qword_1EB2202E8;
            if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 67109890;
              *(_DWORD *)int v61 = v10;
              *(_WORD *)&v61[4] = 1024;
              *(_DWORD *)&v61[6] = v35;
              *(_WORD *)&v61[10] = 1024;
              *(_DWORD *)&v61[12] = v59;
              *(_WORD *)&v61[16] = 2080;
              *(void *)&v61[18] = v6;
              _os_log_impl(&dword_1B0C76000, v4, OS_LOG_TYPE_DEFAULT, "flagged inefficient query yielding %d results (expected vdbe steps ≤ %d, actual: %d) [%s]", buf, 0x1Eu);
            }
            int v30 = 1;
          }
        }
LABEL_71:
        if (!os_signpost_enabled(v5))
        {
          if (!v28) {
            goto LABEL_77;
          }
          goto LABEL_76;
        }
        os_signpost_id_t v36 = os_signpost_id_make_with_pointer(v5, (const void *)a2);
        uint64_t v37 = v28;
        if (!v28)
        {
          if (strlen(v6) >= 0x81)
          {
            uint64_t v38 = strndup(v6, 0x80uLL);
            uint64_t v28 = v38;
            if (v38)
            {
              *(_WORD *)(v38 + 125) = 11822;
              v38[127] = 46;
              uint64_t v37 = v38;
              goto LABEL_83;
            }
          }
          else
          {
            uint64_t v28 = 0;
          }
          uint64_t v37 = v6;
        }
LABEL_83:
        if (v36 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          if (os_signpost_enabled(v5))
          {
            uint64_t v39 = *(void *)(a2 + 192);
            *(_DWORD *)buf = 134218498;
            *(void *)int v61 = v39;
            *(_WORD *)&v61[8] = 2050;
            *(void *)&v61[10] = a1;
            *(_WORD *)&v61[18] = 2082;
            *(void *)&v61[20] = v37;
            _os_signpost_emit_with_name_impl(&dword_1B0C76000, v5, OS_SIGNPOST_INTERVAL_BEGIN, v36, "execute", "startTime=%{signpost.description:begin_time}llu db=%{public}p query=%{public,signpost.telemetry:string1,name=query}s", buf, 0x20u);
          }
          if (os_signpost_enabled(v5))
          {
            uint64_t v40 = "NO";
            if (v30) {
              uint64_t v40 = "YES";
            }
            int v41 = *(_DWORD *)(a2 + 52);
            uint64_t v42 = *(const char **)(a2 + 168);
            if (!v42)
            {
              switch(v41)
              {
                case 516:
                  uint64_t v42 = "abort due to ROLLBACK";
                  break;
                case 101:
                  uint64_t v42 = "no more rows available";
                  break;
                case 100:
                  uint64_t v42 = "another row available";
                  break;
                default:
                  if *(_DWORD *)(a2 + 52) > 0x1Cu || ((0x1410004uLL >> v41)) {
                    uint64_t v42 = "unknown error";
                  }
                  else {
                    uint64_t v42 = off_1E5FF0368[*(_DWORD *)(a2 + 52)];
                  }
                  break;
              }
            }
            *(_DWORD *)buf = 136318210;
            *(void *)int v61 = v40;
            *(_WORD *)&v61[8] = 1026;
            *(_DWORD *)&v61[10] = v41;
            *(_WORD *)&v61[14] = 1026;
            *(_DWORD *)&v61[16] = v53;
            *(_WORD *)&v61[20] = 1026;
            *(_DWORD *)&v61[22] = v58;
            *(_WORD *)&v61[26] = 1026;
            int v62 = v55;
            __int16 v63 = 1026;
            int v64 = v54;
            __int16 v65 = 1026;
            int v66 = v57;
            __int16 v67 = 1026;
            int v68 = v10;
            __int16 v69 = 2082;
            int v70 = v42;
            __int16 v71 = 1026;
            int v72 = v59;
            __int16 v73 = 1026;
            int v74 = v52;
            __int16 v75 = 1026;
            int v76 = v51;
            __int16 v77 = 1026;
            int v78 = v50;
            _os_signpost_emit_with_name_impl(&dword_1B0C76000, v5, OS_SIGNPOST_INTERVAL_END, v36, "execute", "enableTelemetry=%s rc=%{public,signpost.telemetry:number1,name=rc}d runCount=%{public}d nScan=%{public}d nAutoindex=%{public}d nSort=%{public}d nSpill=%{public}d nStep=%{public}d errMsg=%{public}s nVmStep=%{public,signpost.telemetry:number2,name=nVmStep}d hits=%{public}d misses=%{public}d writes=%{public}d", buf, 0x58u);
          }
        }
        *(void *)(a2 + 192) = 0;
        if (!v28) {
          goto LABEL_77;
        }
LABEL_76:
        free(v28);
        goto LABEL_77;
      }
LABEL_35:
      int v30 = 0;
      goto LABEL_71;
    }
  }
LABEL_77:
  if (*(void *)(a2 + 184)) {
    sub_1B0D15ED0((uint64_t *)a1, a2);
  }
}

const void *__cdecl sqlite3_value_blob(sqlite3_value *a1)
{
  if (!a1)
  {
    sub_1B0CE1978(97074);
    return 0;
  }
  int v2 = *((unsigned __int16 *)a1 + 10);
  if ((v2 & 0x12) != 0)
  {
    int v3 = *((_DWORD *)a1 + 4);
    if ((v2 & 0x400) == 0) {
      goto LABEL_10;
    }
    signed int v4 = *(_DWORD *)a1 + v3;
    if ((v4 < 0) ^ __OFADD__(*(_DWORD *)a1, v3) | (v4 == 0))
    {
      if ((v2 & 0x10) == 0) {
        goto LABEL_10;
      }
      signed int v4 = 1;
    }
    if (!sub_1B0CA0CF0((uint64_t)a1, v4, 1))
    {
      bzero((void *)(*((void *)a1 + 1) + *((int *)a1 + 4)), *(int *)a1);
      int v3 = *((_DWORD *)a1 + 4) + *(_DWORD *)a1;
      *((_DWORD *)a1 + 4) = v3;
      LOWORD(v2) = *((_WORD *)a1 + 10) & 0xF9FF;
LABEL_10:
      *((_WORD *)a1 + 10) = v2 | 0x10;
      if (!v3) {
        return 0;
      }
      return (const void *)*((void *)a1 + 1);
    }
    return 0;
  }
  if ((~v2 & 0x202) == 0 && *((unsigned char *)a1 + 22) == 1) {
    return (const void *)*((void *)a1 + 1);
  }
  if (v2) {
    return 0;
  }

  return (const void *)sub_1B0D18254((int *)a1, 1);
}

int sqlite3_value_bytes(sqlite3_value *a1)
{
  if (!a1)
  {
    sub_1B0CE1978(91138);
    return 0;
  }
  __int16 v1 = *((_WORD *)a1 + 10);
  if ((v1 & 2) != 0 && *((unsigned char *)a1 + 22) == 1) {
    return *((_DWORD *)a1 + 4);
  }
  if ((v1 & 0x10) != 0)
  {
    int v2 = *((_DWORD *)a1 + 4);
    if ((*((_WORD *)a1 + 10) & 0x400) != 0) {
      v2 += *(_DWORD *)a1;
    }
    return v2;
  }
  if (v1) {
    return 0;
  }

  return sub_1B0D18228((uint64_t)a1, 1);
}

int sqlite3_value_bytes16(sqlite3_value *a1)
{
  if (!a1)
  {
    sub_1B0CE1978(91138);
    return 0;
  }
  __int16 v1 = *((_WORD *)a1 + 10);
  if ((v1 & 2) != 0 && *((unsigned char *)a1 + 22) != 1) {
    return *((_DWORD *)a1 + 4);
  }
  if ((v1 & 0x10) != 0)
  {
    int v2 = *((_DWORD *)a1 + 4);
    if ((*((_WORD *)a1 + 10) & 0x400) != 0) {
      v2 += *(_DWORD *)a1;
    }
    return v2;
  }
  if (v1) {
    return 0;
  }

  return sub_1B0D18228((uint64_t)a1, 2);
}

double sqlite3_value_double(sqlite3_value *a1)
{
  if (!a1)
  {
    sub_1B0CE1978(89752);
    return 0.0;
  }
  __int16 v1 = *((_WORD *)a1 + 10);
  if ((v1 & 8) != 0) {
    return *(double *)a1;
  }
  if ((v1 & 0x24) != 0) {
    return (double)*(uint64_t *)a1;
  }
  if ((v1 & 0x12) == 0) {
    return 0.0;
  }

  return sub_1B0D18684((uint64_t)a1);
}

sqlite3_int64 sqlite3_value_int64(sqlite3_value *a1)
{
  if (!a1)
  {
    sub_1B0CE1978(89717);
    return 0;
  }
  __int16 v1 = *((_WORD *)a1 + 10);
  if ((v1 & 0x24) != 0) {
    return *(void *)a1;
  }
  if ((v1 & 8) != 0)
  {
    double v3 = *(double *)a1;
    if (*(double *)a1 < -9.22337204e18) {
      return 0x8000000000000000;
    }
    if (v3 <= 9.22337204e18) {
      return (uint64_t)v3;
    }
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  if ((v1 & 0x12) == 0 || !*((void *)a1 + 1)) {
    return 0;
  }

  return sub_1B0D186C0((uint64_t)a1);
}

unsigned int sqlite3_value_subtype(sqlite3_value *a1)
{
  if (a1)
  {
    if ((*((_WORD *)a1 + 10) & 0x800) != 0) {
      return *((unsigned __int8 *)a1 + 23);
    }
  }
  else
  {
    sub_1B0CE1978(97108);
  }
  return 0;
}

void *__cdecl sqlite3_value_pointer(sqlite3_value *a1, const char *a2)
{
  if (!a1)
  {
    sub_1B0CE1978(97118);
    return 0;
  }
  uint64_t result = 0;
  if (a2 && (*((_WORD *)a1 + 10) & 0xFBF) == 0xA01)
  {
    if (*((unsigned char *)a1 + 23) == 112 && !strcmp(*(const char **)a1, a2)) {
      return (void *)*((void *)a1 + 1);
    }
    return 0;
  }
  return result;
}

const void *__cdecl sqlite3_value_text16(const void *result)
{
  if (result)
  {
    int v1 = *((unsigned __int16 *)result + 10);
    if ((~v1 & 0x202) != 0 || *((unsigned char *)result + 22) != 2)
    {
      if (v1) {
        return 0;
      }
      else {
        return (const void *)sub_1B0D18254((int *)result, 2);
      }
    }
    else
    {
      return (const void *)*((void *)result + 1);
    }
  }
  return result;
}

const void *__cdecl sqlite3_value_text16be(const void *result)
{
  if (result)
  {
    int v1 = *((unsigned __int16 *)result + 10);
    if ((~v1 & 0x202) != 0 || *((unsigned char *)result + 22) != 3)
    {
      if (v1) {
        return 0;
      }
      else {
        return (const void *)sub_1B0D18254((int *)result, 3);
      }
    }
    else
    {
      return (const void *)*((void *)result + 1);
    }
  }
  return result;
}

const void *__cdecl sqlite3_value_text16le(const void *result)
{
  if (result)
  {
    int v1 = *((unsigned __int16 *)result + 10);
    if ((~v1 & 0x202) != 0 || *((unsigned char *)result + 22) != 2)
    {
      if (v1) {
        return 0;
      }
      else {
        return (const void *)sub_1B0D18254((int *)result, 2);
      }
    }
    else
    {
      return (const void *)*((void *)result + 1);
    }
  }
  return result;
}

int sqlite3_value_type(sqlite3_value *a1)
{
  if (a1) {
    return byte_1B0DE186A[*((_WORD *)a1 + 10) & 0x3F];
  }
  sub_1B0CE1978(97220);
  return 0;
}

uint64_t sqlite3_value_encoding(uint64_t a1)
{
  if (a1) {
    return *(unsigned __int8 *)(a1 + 22);
  }
  sub_1B0CE1978(97244);
  return 0;
}

int sqlite3_value_nochange(sqlite3_value *a1)
{
  if (a1) {
    return (~*((unsigned __int16 *)a1 + 10) & 0x401) == 0;
  }
  sub_1B0CE1978(97255);
  return 0;
}

int sqlite3_value_frombind(sqlite3_value *a1)
{
  if (a1) {
    return (*((unsigned __int16 *)a1 + 10) >> 6) & 1;
  }
  sub_1B0CE1978(97266);
  return 0;
}

sqlite3_value *__cdecl sqlite3_value_dup(const sqlite3_value *a1)
{
  if (!a1 || sqlite3_initialize()) {
    return 0;
  }
  uint64_t v4 = sub_1B0C7FC94(64);
  uint64_t v2 = v4;
  if (!v4) {
    return (sqlite3_value *)v2;
  }
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)uint64_t v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  uint64_t v5 = *((void *)a1 + 2);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a1;
  *(void *)(v4 + 16) = v5;
  *(void *)(v4 + 24) = 0;
  *(_WORD *)(v4 + 20) = WORD2(v5) & 0xEFFF;
  if ((v5 & 0x1200000000) != 0)
  {
    *(_WORD *)(v4 + 20) = WORD2(v5) & 0x8FFF | 0x4000;
    if (!sub_1B0CEA388((int *)v4)) {
      return (sqlite3_value *)v2;
    }
    if ((*(_WORD *)(v2 + 20) & 0x9000) != 0 || *(_DWORD *)(v2 + 32)) {
      sub_1B0D180E4(v2);
    }
    sub_1B0D05C10(*(void **)(v2 + 24), (void *)v2);
    return 0;
  }
  if ((v5 & 0x100000000) != 0) {
    *(_WORD *)(v4 + 20) = WORD2(v5) & 0xE5FF;
  }
  return (sqlite3_value *)v2;
}

uint64_t sub_1B0CEA388(int *a1)
{
  __int16 v2 = *((_WORD *)a1 + 10);
  if ((v2 & 0x12) == 0) {
    goto LABEL_14;
  }
  if ((a1[5] & 0x400) != 0)
  {
    int v3 = a1[4];
    signed int v4 = *a1 + v3;
    if ((v4 < 0) ^ __OFADD__(*a1, v3) | (v4 == 0))
    {
      if ((v2 & 0x10) == 0) {
        goto LABEL_10;
      }
      signed int v4 = 1;
    }
    if (sub_1B0CA0CF0((uint64_t)a1, v4, 1)) {
      return 7;
    }
    bzero((void *)(*((void *)a1 + 1) + a1[4]), *a1);
    a1[4] += *a1;
    __int16 v2 = a1[5] & 0xF9FF;
    *((_WORD *)a1 + 10) = v2;
  }
LABEL_10:
  if (!a1[8] || *((void *)a1 + 1) != *((void *)a1 + 5))
  {
    uint64_t result = sub_1B0D18460((uint64_t)a1);
    if (result) {
      return result;
    }
    __int16 v2 = *((_WORD *)a1 + 10);
  }
LABEL_14:
  uint64_t result = 0;
  *((_WORD *)a1 + 10) = v2 & 0xBFFF;
  return result;
}

void *sub_1B0CEA450(void *result)
{
  if (result)
  {
    int v1 = result;
    if ((*((_WORD *)result + 10) & 0x9000) != 0 || *((_DWORD *)result + 8)) {
      sub_1B0D180E4((uint64_t)result);
    }
    __int16 v2 = (void *)v1[3];
    return sub_1B0D05C10(v2, v1);
  }
  return result;
}

void sqlite3_value_free(sqlite3_value *a1)
{
  if (a1)
  {
    if ((*((_WORD *)a1 + 10) & 0x9000) != 0 || *((_DWORD *)a1 + 8)) {
      sub_1B0D180E4((uint64_t)a1);
    }
    __int16 v2 = (void *)*((void *)a1 + 3);
    sub_1B0D05C10(v2, a1);
  }
}

void sqlite3_result_blob(sqlite3_context *a1, const void *a2, int a3, void (__cdecl *a4)(void *))
{
  if (!a1 || a3 < 0) {
    sub_1B0CE1978(97366);
  }
  else {
    sub_1B0CEA530((uint64_t)a1, (char *)a2, a3, 0, (uint64_t (*)(uint64_t))a4);
  }
}

void sub_1B0CEA530(uint64_t a1, char *a2, int a3, unsigned int a4, uint64_t (*a5)(uint64_t result))
{
  uint64_t v6 = *(void *)a1;
  int v7 = sub_1B0C79BBC(*(void *)a1, a2, a3, a4, a5);
  if (v7)
  {
    if (v7 != 18)
    {
      sqlite3_result_error_nomem((sqlite3_context *)a1);
      return;
    }
    goto LABEL_14;
  }
  int v8 = *(unsigned __int8 *)(a1 + 40);
  __int16 v9 = *(_WORD *)(v6 + 20);
  if ((v9 & 2) != 0)
  {
    if (*(unsigned __int8 *)(v6 + 22) != v8)
    {
      sub_1B0CD43EC((int *)v6, v8);
      __int16 v9 = *(_WORD *)(v6 + 20);
    }
  }
  else
  {
    *(unsigned char *)(v6 + 22) = v8;
  }
  if ((v9 & 0x12) != 0)
  {
    int v10 = *(_DWORD *)(v6 + 16);
    if ((v9 & 0x400) != 0) {
      v10 += *(_DWORD *)v6;
    }
    if (v10 > *(_DWORD *)(*(void *)(v6 + 24) + 136))
    {
LABEL_14:
      *(_DWORD *)(a1 + 36) = 18;
      uint64_t v11 = *(void *)a1;
      sub_1B0C79BBC(v11, "string or blob too big", -1, 1u, 0);
    }
  }
}

void sqlite3_result_blob64(sqlite3_context *a1, const void *a2, sqlite3_uint64 a3, void (__cdecl *a4)(void *))
{
  if (a1)
  {
    if (a3 >> 31)
    {
      if ((unint64_t)a4 + 1 >= 2) {
        ((void (*)(const void *))a4)(a2);
      }
      *((_DWORD *)a1 + 9) = 18;
      uint64_t v5 = *(void *)a1;
      sub_1B0C79BBC(v5, "string or blob too big", -1, 1u, 0);
    }
    else
    {
      sub_1B0CEA530((uint64_t)a1, (char *)a2, a3, 0, (uint64_t (*)(uint64_t))a4);
    }
  }
  else
  {
    sub_1B0CE1978(97382);
  }
}

void sqlite3_result_double(sqlite3_context *a1, double a2)
{
  if (a1)
  {
    signed int v4 = *(int **)a1;
    if ((*(_WORD *)(*(void *)a1 + 20) & 0x9000) != 0) {
      sub_1B0D18138(*(int **)a1);
    }
    else {
      *((_WORD *)v4 + 10) = 1;
    }
    *(double *)signed int v4 = a2;
    *((_WORD *)v4 + 10) = 8;
  }
  else
  {
    sub_1B0CE1978(97397);
  }
}

void sqlite3_result_error(sqlite3_context *a1, const char *a2, int a3)
{
  if (a1)
  {
    *((_DWORD *)a1 + 9) = 1;
    sub_1B0C79BBC(*(void *)a1, (char *)a2, a3, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
  }
  else
  {
    sub_1B0CE1978(97407);
  }
}

void sqlite3_result_error16(sqlite3_context *a1, const void *a2, int a3)
{
  if (a1)
  {
    *((_DWORD *)a1 + 9) = 1;
    sub_1B0C79BBC(*(void *)a1, (char *)a2, a3, 2u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
  }
  else
  {
    sub_1B0CE1978(97419);
  }
}

void sqlite3_result_int64(sqlite3_context *a1, sqlite3_int64 a2)
{
  if (a1)
  {
    uint64_t v2 = *(void *)a1;
    if ((*(_WORD *)(v2 + 20) & 0x9000) != 0)
    {
      sub_1B0D18980(v2, a2);
    }
    else
    {
      *(void *)uint64_t v2 = a2;
      *(_WORD *)(v2 + 20) = 4;
    }
  }
  else
  {
    sub_1B0CE1978(97441);
  }
}

void sqlite3_result_null(sqlite3_context *a1)
{
  if (a1)
  {
    uint64_t v1 = *(void *)a1;
    if ((*(_WORD *)(v1 + 20) & 0x9000) != 0) {
      sub_1B0D18138((int *)v1);
    }
    else {
      *(_WORD *)(v1 + 20) = 1;
    }
  }
  else
  {
    sub_1B0CE1978(97451);
  }
}

void sqlite3_result_pointer(sqlite3_context *a1, void *a2, const char *a3, void (__cdecl *a4)(void *))
{
  if (a1)
  {
    uint64_t v8 = *(void *)a1;
    if ((*(_WORD *)(*(void *)a1 + 20) & 0x9000) != 0 || *(_DWORD *)(v8 + 32)) {
      sub_1B0D180E4(*(void *)a1);
    }
    *(_WORD *)(v8 + 20) = 1;
    sub_1B0D180E4(v8);
    __int16 v9 = &byte_1B0DE9952;
    if (a3) {
      __int16 v9 = a3;
    }
    *(void *)uint64_t v8 = v9;
    *(void *)(v8 + 8) = a2;
    *(_WORD *)(v8 + 20) = 6657;
    *(unsigned char *)(v8 + 23) = 112;
    *(unsigned char *)(v8 + 56) = 0;
    if (a4) {
      int v10 = a4;
    }
    else {
      int v10 = (void (__cdecl *)(void *))nullsub_7;
    }
    *(void *)(v8 + 48) = v10;
  }
  else
  {
    sub_1B0CE1978(97467);
  }
}

void sqlite3_result_subtype(sqlite3_context *a1, unsigned int a2)
{
  if (a1)
  {
    uint64_t v2 = *(void *)a1;
    *(unsigned char *)(v2 + 23) = a2;
    *(_WORD *)(v2 + 20) |= 0x800u;
  }
  else
  {
    sub_1B0CE1978(97481);
  }
}

void sqlite3_result_text(sqlite3_context *a1, const char *a2, int a3, void (__cdecl *a4)(void *))
{
  if (a1) {
    sub_1B0CEA530((uint64_t)a1, (char *)a2, a3, 1u, (uint64_t (*)(uint64_t))a4);
  }
  else {
    sub_1B0CE1978(97498);
  }
}

void sqlite3_result_text64(sqlite3_context *a1, const char *a2, sqlite3_uint64 a3, void (__cdecl *a4)(void *), unsigned __int8 encoding)
{
  if (a1)
  {
    if (encoding != 1) {
      a3 &= ~1uLL;
    }
    if (a3 >> 31)
    {
      if ((unint64_t)a4 + 1 >= 2) {
        ((void (*)(const char *))a4)(a2);
      }
      *((_DWORD *)a1 + 9) = 18;
      uint64_t v7 = *(void *)a1;
      sub_1B0C79BBC(v7, "string or blob too big", -1, 1u, 0);
      return;
    }
    if (encoding == 4) {
      unsigned int v8 = 2;
    }
    else {
      unsigned int v8 = encoding;
    }
    sub_1B0CEA530((uint64_t)a1, (char *)a2, a3, v8, (uint64_t (*)(uint64_t))a4);
    uint64_t v9 = *(void *)a1;
    if ((*(_WORD *)(v9 + 20) & 0x6202) != 2) {
      return;
    }
    if (*(unsigned char *)(v9 + 22) != 1) {
      return;
    }
    uint64_t v10 = *(void *)(v9 + 8);
    if (!v10) {
      return;
    }
    if ((*(_WORD *)(v9 + 20) & 0x1000) == 0)
    {
      int v11 = *(_DWORD *)(v9 + 16);
      if (*(_DWORD *)(v9 + 32) <= v11) {
        return;
      }
      goto LABEL_28;
    }
    int v12 = *(void (__cdecl **)(void *))(v9 + 48);
    if (v12 == sqlite3_free)
    {
      unsigned int v13 = off_1EB21C9F8(v10);
      int v11 = *(_DWORD *)(v9 + 16);
      if (v13 >= v11 + 1)
      {
        uint64_t v10 = *(void *)(v9 + 8);
LABEL_28:
        *(unsigned char *)(v10 + v11) = 0;
LABEL_29:
        *(_WORD *)(v9 + 20) |= 0x200u;
        return;
      }
      int v12 = *(void (__cdecl **)(void *))(v9 + 48);
    }
    if ((char *)v12 != (char *)sub_1B0D167E8) {
      return;
    }
    goto LABEL_29;
  }

  sub_1B0CE1978(97514);
}

void sqlite3_result_text16(sqlite3_context *a1, const void *a2, int a3, void (__cdecl *a4)(void *))
{
  if (a1) {
    sub_1B0CEA530((uint64_t)a1, (char *)a2, a3 & 0xFFFFFFFE, 2u, (uint64_t (*)(uint64_t))a4);
  }
  else {
    sub_1B0CE1978(97540);
  }
}

void sqlite3_result_text16be(sqlite3_context *a1, const void *a2, int a3, void (__cdecl *a4)(void *))
{
  if (a1) {
    sub_1B0CEA530((uint64_t)a1, (char *)a2, a3 & 0xFFFFFFFE, 3u, (uint64_t (*)(uint64_t))a4);
  }
  else {
    sub_1B0CE1978(97555);
  }
}

void sqlite3_result_text16le(sqlite3_context *a1, const void *a2, int a3, void (__cdecl *a4)(void *))
{
  if (a1) {
    sub_1B0CEA530((uint64_t)a1, (char *)a2, a3 & 0xFFFFFFFE, 2u, (uint64_t (*)(uint64_t))a4);
  }
  else {
    sub_1B0CE1978(97570);
  }
}

void sqlite3_result_value(sqlite3_context *a1, sqlite3_value *a2)
{
  if (a1)
  {
    uint64_t v4 = *(int **)a1;
    if ((*(_WORD *)(*(void *)a1 + 20) & 0x9000) != 0) {
      sub_1B0D18138(*(int **)a1);
    }
    long long v5 = *(_OWORD *)a2;
    uint64_t v6 = *((void *)a2 + 2);
    *((void *)v4 + 2) = v6;
    *(_OWORD *)uint64_t v4 = v5;
    LOWORD(v6) = WORD2(v6) & 0xEFFF;
    *((_WORD *)v4 + 10) = WORD2(v6) & 0xEFFF;
    if ((v6 & 0x1200000000) != 0 && (*((_WORD *)a2 + 10) & 0x2000) == 0)
    {
      *((_WORD *)v4 + 10) = WORD2(v6) & 0xAFFF | 0x4000;
      sub_1B0CEA388(v4);
      LOWORD(v6) = *((_WORD *)v4 + 10);
    }
    int v7 = *((unsigned __int8 *)a1 + 40);
    if ((v6 & 2) != 0)
    {
      if (*((unsigned __int8 *)v4 + 22) != v7)
      {
        sub_1B0CD43EC(v4, v7);
        LOWORD(v6) = *((_WORD *)v4 + 10);
      }
    }
    else
    {
      *((unsigned char *)v4 + 22) = v7;
    }
    if ((v6 & 0x12) != 0)
    {
      int v8 = v4[4];
      if ((v6 & 0x400) != 0) {
        v8 += *v4;
      }
      if (v8 > *(_DWORD *)(*((void *)v4 + 3) + 136))
      {
        *((_DWORD *)a1 + 9) = 18;
        uint64_t v9 = *(int **)a1;
        sub_1B0C79BBC((uint64_t)v9, "string or blob too big", -1, 1u, 0);
      }
    }
  }
  else
  {
    sub_1B0CE1978(97582);
  }
}

uint64_t sub_1B0CEAC48(uint64_t a1, long long *a2)
{
  if ((*(_WORD *)(a1 + 20) & 0x9000) != 0) {
    sub_1B0D18138((int *)a1);
  }
  long long v4 = *a2;
  uint64_t v5 = *((void *)a2 + 2);
  *(void *)(a1 + 16) = v5;
  *(_OWORD *)a1 = v4;
  *(_WORD *)(a1 + 20) = WORD2(v5) & 0xEFFF;
  if ((v5 & 0x1200000000) == 0 || (*((_WORD *)a2 + 10) & 0x2000) != 0) {
    return 0;
  }
  *(_WORD *)(a1 + 20) = WORD2(v5) & 0xAFFF | 0x4000;

  return sub_1B0CEA388((int *)a1);
}

void sqlite3_result_error_toobig(sqlite3_context *a1)
{
  if (a1)
  {
    *((_DWORD *)a1 + 9) = 18;
    sub_1B0C79BBC(*(void *)a1, "string or blob too big", -1, 1u, 0);
  }
  else
  {
    sub_1B0CE1978(97638);
  }
}

void sqlite3_result_zeroblob(sqlite3_context *a1, int n)
{
  if (a1)
  {
    unsigned int v2 = n & ~(n >> 31);
    uint64_t v3 = *(void *)a1;
    if (*(_DWORD *)(*(void *)(*(void *)a1 + 24) + 136) >= v2)
    {
      if ((*(_WORD *)(v3 + 20) & 0x9000) != 0 || *(_DWORD *)(v3 + 32)) {
        sub_1B0D180E4(*(void *)a1);
      }
      *(_WORD *)(v3 + 20) = 1040;
      *(_DWORD *)(v3 + 16) = 0;
      *(_DWORD *)uint64_t v3 = v2;
      *(unsigned char *)(v3 + 22) = 1;
      *(void *)(v3 + 8) = 0;
    }
    else
    {
      *((_DWORD *)a1 + 9) = 18;
      sub_1B0C79BBC(v3, "string or blob too big", -1, 1u, 0);
    }
  }
  else
  {
    sub_1B0CE1978(97601);
  }
}

int sqlite3_result_zeroblob64(sqlite3_context *a1, sqlite3_uint64 n)
{
  if (a1)
  {
    int v3 = n;
    uint64_t v4 = *(void *)a1;
    if (*(int *)(*(void *)(*(void *)a1 + 24) + 136) >= n)
    {
      if ((*(_WORD *)(v4 + 20) & 0x9000) != 0 || *(_DWORD *)(v4 + 32)) {
        sub_1B0D180E4(*(void *)a1);
      }
      int v5 = 0;
      *(_WORD *)(v4 + 20) = 1040;
      *(_DWORD *)(v4 + 16) = 0;
      *(_DWORD *)uint64_t v4 = v3 & ~(v3 >> 31);
      *(unsigned char *)(v4 + 22) = 1;
      *(void *)(v4 + 8) = 0;
    }
    else
    {
      int v5 = 18;
      *((_DWORD *)a1 + 9) = 18;
      sub_1B0C79BBC(v4, "string or blob too big", -1, 1u, 0);
    }
    return v5;
  }
  else
  {
    return sub_1B0CE1978(97601);
  }
}

void sub_1B0CEAEB0(uint64_t a1, int a2)
{
  if ((*(_WORD *)(a1 + 20) & 0x9000) != 0 || *(_DWORD *)(a1 + 32)) {
    sub_1B0D180E4(a1);
  }
  *(_WORD *)(a1 + 20) = 1040;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)a1 = a2 & ~(a2 >> 31);
  *(unsigned char *)(a1 + 22) = 1;
  *(void *)(a1 + 8) = 0;
}

void sqlite3_result_error_code(sqlite3_context *a1, int a2)
{
  if (a1)
  {
    if (a2) {
      int v2 = a2;
    }
    else {
      int v2 = -1;
    }
    *((_DWORD *)a1 + 9) = v2;
    if (*(_WORD *)(*(void *)a1 + 20))
    {
      switch(a2)
      {
        case 516:
          int v3 = "abort due to ROLLBACK";
          break;
        case 101:
          int v3 = "no more rows available";
          break;
        case 100:
          int v3 = "another row available";
          break;
        default:
          if a2 > 0x1Cu || ((0x1410004uLL >> a2)) {
            int v3 = "unknown error";
          }
          else {
            int v3 = off_1E5FF0368[a2];
          }
          break;
      }
      sub_1B0CEA530((uint64_t)a1, v3, -1, 1u, 0);
    }
  }
  else
  {
    sub_1B0CE1978(97620);
  }
}

void sqlite3_result_error_nomem(sqlite3_context *a1)
{
  if (a1)
  {
    uint64_t v9 = *(void *)a1;
    if ((*(_WORD *)(v9 + 20) & 0x9000) != 0)
    {
      sub_1B0D18138((int *)v9);
      uint64_t v9 = *(void *)a1;
    }
    else
    {
      *(_WORD *)(v9 + 20) = 1;
    }
    *((_DWORD *)a1 + 9) = 7;
    uint64_t v10 = *(void *)(v9 + 24);
    if (!*(unsigned char *)(v10 + 103) && !*(unsigned char *)(v10 + 104))
    {
      *(unsigned char *)(v10 + 103) = 1;
      if (*(int *)(v10 + 220) >= 1) {
        *(_DWORD *)(v10 + 424) = 1;
      }
      ++*(_DWORD *)(v10 + 432);
      *(_WORD *)(v10 + 436) = 0;
      uint64_t v11 = *(void *)(v10 + 344);
      if (v11)
      {
        sub_1B0CEF2BC(v11, "out of memory", v1, v2, v3, v4, v5, v6, v13);
        for (uint64_t i = *(void *)(v10 + 344); ; ++*(_DWORD *)(i + 48))
        {
          *(_DWORD *)(i + 24) = 7;
          uint64_t i = *(void *)(i + 256);
          if (!i) {
            break;
          }
        }
      }
    }
  }
  else
  {
    sub_1B0CE1978(97652);
  }
}

void sub_1B0CEB0A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*(unsigned char *)(a1 + 103) && !*(unsigned char *)(a1 + 104))
  {
    *(unsigned char *)(a1 + 103) = 1;
    if (*(int *)(a1 + 220) >= 1) {
      *(_DWORD *)(a1 + 424) = 1;
    }
    ++*(_DWORD *)(a1 + 432);
    *(_WORD *)(a1 + 436) = 0;
    uint64_t v9 = *(void *)(a1 + 344);
    if (v9)
    {
      sub_1B0CEF2BC(v9, "out of memory", a3, a4, a5, a6, a7, a8, v11);
      for (uint64_t i = *(void *)(a1 + 344); ; ++*(_DWORD *)(i + 48))
      {
        *(_DWORD *)(i + 24) = 7;
        uint64_t i = *(void *)(i + 256);
        if (!i) {
          break;
        }
      }
    }
  }
}

uint64_t sub_1B0CEB134(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(void *)(*(void *)a1 + 24);
  if (v10)
  {
    xmmword_1EB21CA40(v10);
    uint64_t v9 = *(void *)a1;
    uint64_t v11 = *(void *)(*(void *)a1 + 24);
    int v12 = *(unsigned __int8 **)(a1 + 320);
    if (v11)
    {
      xmmword_1EB21CA50(v11);
      uint64_t v9 = *(void *)a1;
    }
  }
  else
  {
    int v12 = *(unsigned __int8 **)(a1 + 320);
  }
  __src = 0;
  uint64_t v13 = sub_1B0C7EAC0(v9, v12, 0xFFFFFFFFLL, *(unsigned __int8 *)(a1 + 266), (unsigned __int16 *)a1, &__src, 0, a8);
  if (v13)
  {
    uint64_t v20 = v13;
    if (v13 == 7)
    {
      if (*(unsigned char *)(v9 + 103) || *(unsigned char *)(v9 + 104))
      {
        return 7;
      }
      else
      {
        *(unsigned char *)(v9 + 103) = 1;
        if (*(int *)(v9 + 220) >= 1) {
          *(_DWORD *)(v9 + 424) = 1;
        }
        ++*(_DWORD *)(v9 + 432);
        *(_WORD *)(v9 + 436) = 0;
        uint64_t v30 = *(void *)(v9 + 344);
        uint64_t v20 = 7;
        if (v30)
        {
          sub_1B0CEF2BC(v30, "out of memory", v14, v15, v16, v17, v18, v19, (char)__src);
          for (uint64_t i = *(void *)(v9 + 344); ; ++*(_DWORD *)(i + 48))
          {
            *(_DWORD *)(i + 24) = 7;
            uint64_t i = *(void *)(i + 256);
            if (!i) {
              break;
            }
          }
        }
      }
    }
  }
  else
  {
    int v21 = __src;
    memcpy(__dst, __src, sizeof(__dst));
    memcpy(__src, (const void *)a1, 0x198uLL);
    memcpy((void *)a1, __dst, 0x198uLL);
    long long v22 = *(_OWORD *)((char *)v21 + 8);
    *(_OWORD *)((char *)v21 + 8) = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v22;
    long long v23 = v21[20];
    v21[20] = *(_OWORD *)(a1 + 320);
    *(_OWORD *)(a1 + 320) = v23;
    *(_DWORD *)(a1 + 372) = *((_DWORD *)v21 + 93);
    *(unsigned char *)(a1 + 266) = *((unsigned char *)v21 + 266);
    long long v25 = *(_OWORD *)((char *)v21 + 280);
    long long v24 = *(_OWORD *)((char *)v21 + 296);
    *(_DWORD *)(a1 + 312) = *((_DWORD *)v21 + 78);
    *(_OWORD *)(a1 + 280) = v25;
    *(_OWORD *)(a1 + 296) = v24;
    ++*(_DWORD *)(a1 + 300);
    long long v26 = *(_OWORD *)((char *)v21 + 200);
    long long v27 = *(_OWORD *)((char *)v21 + 216);
    *(void *)(a1 + 232) = *((void *)v21 + 29);
    *(_OWORD *)(a1 + 216) = v27;
    *(_OWORD *)(a1 + 200) = v26;
    ++*(_DWORD *)(a1 + 220);
    sub_1B0CEC310((uint64_t)v21, (void *)a1);
    uint64_t v28 = (void **)__src;
    *((_DWORD *)__src + 13) = 0;
    if (*((unsigned char *)v28 + 267)) {
      sub_1B0C8B140(v28);
    }
    sub_1B0CE20DC((uint64_t)v28);
    return 0;
  }
  return v20;
}

sqlite3 *__cdecl sqlite3_context_db_handle(sqlite3_context *a1)
{
  if (a1 && *(void *)a1) {
    return *(sqlite3 **)(*(void *)a1 + 24);
  }
  sub_1B0CE1978(97953);
  return 0;
}

int sqlite3_vtab_nochange(sqlite3_context *a1)
{
  if (a1)
  {
    if (*(void *)a1) {
      return (~*(unsigned __int16 *)(*(void *)a1 + 20) & 0x401) == 0;
    }
    int v2 = 97255;
  }
  else
  {
    int v2 = 97978;
  }
  sub_1B0CE1978(v2);
  return 0;
}

int sqlite3_vtab_in_first(sqlite3_value *pVal, sqlite3_value **ppOut)
{
  return sub_1B0CEB3CC((uint64_t)pVal, (uint64_t *)ppOut, 0);
}

uint64_t sub_1B0CEB3CC(uint64_t a1, uint64_t *a2, int a3)
{
  if (a2)
  {
    *a2 = 0;
    if (!a1) {
      return 21;
    }
    if ((*(_WORD *)(a1 + 20) & 0x1000) == 0 || *(uint64_t (**)(uint64_t))(a1 + 48) != sub_1B0D1D4B0) {
      return 1;
    }
    uint64_t v7 = *(uint64_t **)(a1 + 8);
    uint64_t v8 = *v7;
    if (a3)
    {
      uint64_t v5 = sub_1B0CAE698(*v7);
      goto LABEL_13;
    }
    uint64_t v15 = sub_1B0CACD5C((unsigned __int8 *)*v7);
    if (v15 != 16)
    {
      uint64_t v5 = v15;
      if (v15) {
        goto LABEL_25;
      }
      while (1)
      {
        uint64_t v16 = *(void *)(v8 + 136);
        if (*(unsigned char *)(v16 + 8)) {
          break;
        }
        uint64_t v17 = sub_1B0CAD12C(v8, bswap32(*(_DWORD *)(*(void *)(v16 + 80)+ (unsigned __int16)(_byteswap_ushort(*(_WORD *)(*(void *)(v16 + 96)+ 2 * *(unsigned __int16 *)(v8 + 86))) & *(_WORD *)(v16 + 26)))));
        if (v17)
        {
          uint64_t v5 = v17;
          goto LABEL_25;
        }
      }
    }
    uint64_t v5 = 0;
LABEL_25:
    if (*(unsigned char *)*v7) {
      return 101;
    }
LABEL_13:
    if (v5) {
      return v5;
    }
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    uint64_t v9 = *v7;
    sub_1B0D146DC(*v7);
    unsigned int v10 = *(_DWORD *)(v9 + 64);
    uint64_t v11 = *v7;
    int v12 = *(unsigned __int16 *)(*v7 + 68);
    uint64_t v13 = *(void *)(*v7 + 56);
    int v14 = *(_DWORD *)(*(void *)(*v7 + 136) + 88) - v13;
    if (v12 > v14) {
      int v12 = v14 & ~(v14 >> 31);
    }
    *((void *)&v22 + 1) = *(void *)(*v7 + 56);
    if (v12 >= v10)
    {
      WORD2(v23) = 16400;
      LODWORD(v23) = v10;
    }
    else
    {
      uint64_t v5 = sub_1B0CB63E0(v11, 0, v10, (uint64_t)&v22);
      if (v5)
      {
LABEL_35:
        if (WORD2(v23) & 0x9000 | v24) {
          sub_1B0D180E4((uint64_t)&v22);
        }
        return v5;
      }
      uint64_t v13 = *((void *)&v22 + 1);
    }
    int v21 = 0;
    uint64_t v18 = v7[1];
    int v19 = *(unsigned __int8 *)(v13 + 1);
    if ((v19 & 0x80) != 0)
    {
      uint64_t v20 = (sub_1B0D19A08((char *)(v13 + 1), &v21) + 1);
      int v19 = v21;
    }
    else
    {
      int v21 = *(unsigned __int8 *)(v13 + 1);
      uint64_t v20 = 2;
    }
    sub_1B0CAD5D4((char *)(v13 + v20), v19, v18);
    *(unsigned char *)(v18 + 22) = *(unsigned char *)(*(void *)(v18 + 24) + 100);
    if ((*(unsigned char *)(v18 + 21) & 0x40) != 0 && sub_1B0CEA388((int *)v18))
    {
      uint64_t v5 = 7;
    }
    else
    {
      uint64_t v5 = 0;
      *a2 = v18;
    }
    goto LABEL_35;
  }
  return sub_1B0CE1978(98010);
}

int sqlite3_vtab_in_next(sqlite3_value *pVal, sqlite3_value **ppOut)
{
  return sub_1B0CEB3CC((uint64_t)pVal, (uint64_t *)ppOut, 1);
}

void *sub_1B0CEB5F8(uint64_t a1, signed int a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (a2 <= 0)
  {
    if ((*(_WORD *)(v2 + 20) & 0x9000) != 0) {
      sub_1B0D18138(*(int **)(a1 + 16));
    }
    else {
      *(_WORD *)(v2 + 20) = 1;
    }
    uint64_t result = 0;
    *(void *)(v2 + 8) = 0;
  }
  else
  {
    if (*(_DWORD *)(v2 + 32) >= a2)
    {
      uint64_t result = *(void **)(v2 + 40);
      *(void *)(v2 + 8) = result;
    }
    else
    {
      sub_1B0CA0CF0(*(void *)(a1 + 16), a2, 0);
      uint64_t result = *(void **)(v2 + 8);
    }
    *(_WORD *)(v2 + 20) = 0x8000;
    *(void *)uint64_t v2 = *(void *)(a1 + 8);
    if (result)
    {
      bzero(result, a2);
      return *(void **)(v2 + 8);
    }
  }
  return result;
}

void *__cdecl sqlite3_get_auxdata(sqlite3_context *a1, int N)
{
  if (!a1)
  {
    sub_1B0CE1978(98151);
    return 0;
  }
  uint64_t v2 = *(void *)(*((void *)a1 + 3) + 384);
  if (!v2) {
    return 0;
  }
  while (*(_DWORD *)(v2 + 4) != N || (N & 0x80000000) == 0 && *(_DWORD *)v2 != *((_DWORD *)a1 + 8))
  {
    uint64_t v2 = *(void *)(v2 + 24);
    if (!v2) {
      return 0;
    }
  }
  return *(void **)(v2 + 8);
}

void sqlite3_set_auxdata(sqlite3_context *a1, int N, void *a3, void (__cdecl *a4)(void *))
{
  if (a1)
  {
    uint64_t v7 = (uint64_t *)*((void *)a1 + 3);
    uint64_t v8 = v7[48];
    int v12 = a4;
    if (v8)
    {
      while (*(_DWORD *)(v8 + 4) != N || (N & 0x80000000) == 0 && *(_DWORD *)v8 != *((_DWORD *)a1 + 8))
      {
        uint64_t v8 = *(void *)(v8 + 24);
        if (!v8) {
          goto LABEL_3;
        }
      }
      unsigned int v10 = *(void (**)(void))(v8 + 16);
      if (v10)
      {
        v10(*(void *)(v8 + 8));
        a4 = v12;
      }
      goto LABEL_18;
    }
LABEL_3:
    if (*v7) {
      uint64_t v9 = sub_1B0D05DC0(*v7, 0x20uLL);
    }
    else {
      uint64_t v9 = sub_1B0C7FC94(32);
    }
    uint64_t v8 = v9;
    a4 = v12;
    if (v9)
    {
      *(_OWORD *)uint64_t v9 = 0u;
      *(_OWORD *)(v9 + 16) = 0u;
      int v11 = *((_DWORD *)a1 + 9);
      *(_DWORD *)uint64_t v9 = *((_DWORD *)a1 + 8);
      *(_DWORD *)(v9 + 4) = N;
      *(void *)(v9 + 24) = v7[48];
      v7[48] = v9;
      if (!v11) {
        *((_DWORD *)a1 + 9) = -1;
      }
LABEL_18:
      *(void *)(v8 + 8) = a3;
      *(void *)(v8 + 16) = a4;
      return;
    }
    if (v12)
    {
      ((void (*)(void *))v12)(a3);
    }
  }
  else
  {
    sub_1B0CE1978(98190);
  }
}

int sqlite3_aggregate_count(sqlite3_context *a1)
{
  if (a1)
  {
    uint64_t v1 = *((void *)a1 + 2);
    if (v1)
    {
      uint64_t v2 = *((void *)a1 + 1);
      if (v2)
      {
        if (*(void *)(v2 + 32)) {
          return *(_DWORD *)(v1 + 16);
        }
      }
    }
  }
  sub_1B0CE1978(98243);
  return 0;
}

int sqlite3_column_bytes16(sqlite3_stmt *a1, int iCol)
{
  if (!a1) {
    goto LABEL_9;
  }
  uint64_t v4 = *(void *)(*(void *)a1 + 24);
  if (v4) {
    xmmword_1EB21CA40(v4);
  }
  uint64_t v5 = *((void *)a1 + 20);
  if (!v5 || *((unsigned __int16 *)a1 + 130) <= iCol)
  {
    uint64_t v8 = *(void *)a1;
    *(_DWORD *)(v8 + 80) = 25;
    sub_1B0D0E714(v8, 25);
LABEL_9:
    uint64_t v6 = &qword_1B0DE22A8;
    __int16 v7 = 1;
    goto LABEL_13;
  }
  uint64_t v6 = (uint64_t *)(v5 + ((unint64_t)iCol << 6));
  __int16 v7 = *((_WORD *)v6 + 10);
  if ((v7 & 2) != 0 && *((unsigned char *)v6 + 22) != 1)
  {
    int v9 = *((_DWORD *)v6 + 4);
    if (!a1) {
      return v9;
    }
    goto LABEL_20;
  }
LABEL_13:
  if ((v7 & 0x10) == 0)
  {
    if (v7)
    {
      int v9 = 0;
      if (!a1) {
        return v9;
      }
    }
    else
    {
      int v9 = sub_1B0D18228((uint64_t)v6, 2);
      if (!a1) {
        return v9;
      }
    }
    goto LABEL_20;
  }
  int v9 = *((_DWORD *)v6 + 4);
  if ((v7 & 0x400) != 0) {
    v9 += *(_DWORD *)v6;
  }
  if (a1)
  {
LABEL_20:
    uint64_t v10 = *(void *)a1;
    unsigned int v11 = *((_DWORD *)a1 + 13);
    if (v11 || (int v12 = *(unsigned __int8 *)(v10 + 103), *(unsigned char *)(v10 + 103)))
    {
      int v12 = sub_1B0D1806C(v10, v11);
      uint64_t v10 = *(void *)a1;
    }
    *((_DWORD *)a1 + 13) = v12;
    uint64_t v13 = *(void *)(v10 + 24);
    if (v13) {
      xmmword_1EB21CA50(v13);
    }
  }
  return v9;
}

sqlite3_value *__cdecl sqlite3_column_value(sqlite3_stmt *a1, int iCol)
{
  if (!a1) {
    goto LABEL_9;
  }
  uint64_t v4 = *(void *)(*(void *)a1 + 24);
  if (v4) {
    xmmword_1EB21CA40(v4);
  }
  uint64_t v5 = *((void *)a1 + 20);
  if (!v5 || *((unsigned __int16 *)a1 + 130) <= iCol)
  {
    uint64_t v7 = *(void *)a1;
    *(_DWORD *)(v7 + 80) = 25;
    sub_1B0D0E714(v7, 25);
LABEL_9:
    uint64_t v6 = &qword_1B0DE22A8;
    goto LABEL_11;
  }
  uint64_t v6 = (uint64_t *)(v5 + ((unint64_t)iCol << 6));
  if ((*((_WORD *)v6 + 10) & 0x2000) != 0) {
    *((_WORD *)v6 + 10) = *((_WORD *)v6 + 10) & 0x9FFF | 0x4000;
  }
LABEL_11:
  if (a1)
  {
    uint64_t v8 = *(void *)a1;
    unsigned int v9 = *((_DWORD *)a1 + 13);
    if (v9 || (int v10 = *(unsigned __int8 *)(v8 + 103), *(unsigned char *)(v8 + 103)))
    {
      int v10 = sub_1B0D1806C(v8, v9);
      uint64_t v8 = *(void *)a1;
    }
    *((_DWORD *)a1 + 13) = v10;
    uint64_t v11 = *(void *)(v8 + 24);
    if (v11) {
      xmmword_1EB21CA50(v11);
    }
  }
  return (sqlite3_value *)v6;
}

char *sub_1B0CEBAA4(uint64_t *a1, unsigned int a2, int a3, int a4)
{
  if (!a1)
  {
    sub_1B0CE1978(98497);
    return 0;
  }
  if ((a2 & 0x80000000) != 0) {
    return 0;
  }
  uint64_t v8 = *a1;
  uint64_t v9 = *(void *)(*a1 + 24);
  if (v9) {
    xmmword_1EB21CA40(v9);
  }
  int v10 = (*((unsigned __int16 *)a1 + 134) >> 2) & 3;
  if (v10)
  {
    if (a4 <= 0)
    {
      unsigned int v11 = v10 == 1 ? 8 : 4;
      if (v11 > a2)
      {
        uint64_t v12 = a2 + 8 * v10 - 8;
        if (a3)
        {
          uint64_t v13 = (char *)&unk_1B0DE222A + 2 * byte_1B0DE221E[v12];
          uint64_t v14 = *(void *)(v8 + 24);
          if (!v14) {
            return v13;
          }
        }
        else
        {
          uint64_t v13 = off_1E5FEF638[v12];
          uint64_t v14 = *(void *)(v8 + 24);
          if (!v14) {
            return v13;
          }
        }
        goto LABEL_37;
      }
    }
    goto LABEL_35;
  }
  unsigned int v15 = *((unsigned __int16 *)a1 + 130);
  if (v15 > a2)
  {
    unsigned int v16 = *(unsigned __int8 *)(v8 + 103);
    uint64_t v17 = a2 + v15 * a4;
    uint64_t v18 = a1[19];
    if (a3)
    {
      if (!v18) {
        goto LABEL_32;
      }
      uint64_t v19 = v18 + (v17 << 6);
      int v20 = *(unsigned __int16 *)(v19 + 20);
      if ((~v20 & 0x202) != 0 || *(unsigned char *)(v19 + 22) != 2)
      {
        if ((v20 & 1) == 0)
        {
          int v21 = 2;
LABEL_31:
          uint64_t v13 = (char *)sub_1B0D18254((int *)(v18 + (v17 << 6)), v21);
          goto LABEL_33;
        }
        goto LABEL_32;
      }
    }
    else
    {
      if (!v18) {
        goto LABEL_32;
      }
      uint64_t v22 = v18 + (v17 << 6);
      int v23 = *(unsigned __int16 *)(v22 + 20);
      if ((~v23 & 0x202) != 0 || *(unsigned char *)(v22 + 22) != 1)
      {
        if ((v23 & 1) == 0)
        {
          int v21 = 1;
          goto LABEL_31;
        }
LABEL_32:
        uint64_t v13 = 0;
        goto LABEL_33;
      }
    }
    uint64_t v13 = *(char **)(v18 + (v17 << 6) + 8);
LABEL_33:
    if (*(unsigned __int8 *)(v8 + 103) <= v16) {
      goto LABEL_36;
    }
    int v24 = *(_DWORD *)(v8 + 220);
    if (!v24)
    {
      *(unsigned char *)(v8 + 103) = 0;
      *(_DWORD *)(v8 + 424) = 0;
      int v26 = *(_DWORD *)(v8 + 432) - 1;
      *(_DWORD *)(v8 + 432) = v26;
      if (!v26) {
        LOWORD(v24) = *(_WORD *)(v8 + 438);
      }
      uint64_t v13 = 0;
      *(_WORD *)(v8 + 436) = v24;
      uint64_t v14 = *(void *)(v8 + 24);
      if (v14) {
        goto LABEL_37;
      }
      return v13;
    }
  }
LABEL_35:
  uint64_t v13 = 0;
LABEL_36:
  uint64_t v14 = *(void *)(v8 + 24);
  if (v14) {
LABEL_37:
  }
    xmmword_1EB21CA50(v14);
  return v13;
}

const void *__cdecl sqlite3_column_name16(sqlite3_stmt *a1, int N)
{
  return sub_1B0CEBAA4((uint64_t *)a1, N, 1, 0);
}

const char *__cdecl sqlite3_column_decltype(sqlite3_stmt *a1, int a2)
{
  return sub_1B0CEBAA4((uint64_t *)a1, a2, 0, 1);
}

const void *__cdecl sqlite3_column_decltype16(sqlite3_stmt *a1, int a2)
{
  return sub_1B0CEBAA4((uint64_t *)a1, a2, 1, 1);
}

const char *__cdecl sqlite3_column_database_name(sqlite3_stmt *a1, int a2)
{
  return sub_1B0CEBAA4((uint64_t *)a1, a2, 0, 2);
}

const void *__cdecl sqlite3_column_database_name16(sqlite3_stmt *a1, int a2)
{
  return sub_1B0CEBAA4((uint64_t *)a1, a2, 1, 2);
}

const char *__cdecl sqlite3_column_table_name(sqlite3_stmt *a1, int a2)
{
  return sub_1B0CEBAA4((uint64_t *)a1, a2, 0, 3);
}

const void *__cdecl sqlite3_column_table_name16(sqlite3_stmt *a1, int a2)
{
  return sub_1B0CEBAA4((uint64_t *)a1, a2, 1, 3);
}

const char *__cdecl sqlite3_column_origin_name(sqlite3_stmt *a1, int a2)
{
  return sub_1B0CEBAA4((uint64_t *)a1, a2, 0, 4);
}

const void *__cdecl sqlite3_column_origin_name16(sqlite3_stmt *a1, int a2)
{
  return sub_1B0CEBAA4((uint64_t *)a1, a2, 1, 4);
}

int sqlite3_bind_blob64(sqlite3_stmt *a1, int a2, const void *a3, sqlite3_uint64 a4, void (__cdecl *a5)(void *))
{
  return sub_1B0CC3DB8((uint64_t *)a1, a2, (char *)a3, a4, (uint64_t (*)(uint64_t))a5, 0);
}

int sqlite3_bind_pointer(sqlite3_stmt *a1, int a2, void *a3, const char *a4, void (__cdecl *a5)(void *))
{
  if (a2 <= 0)
  {
    if (a1)
    {
      uint64_t v12 = *(void *)a1;
      if (*(void *)a1)
      {
        int v11 = 25;
        *(_DWORD *)(v12 + 80) = 25;
        sub_1B0D0E714(v12, 25);
        return v11;
      }
      sqlite3_log(21, "API called with finalized prepared statement", a3, a4, a5);
    }
    else
    {
      sqlite3_log(21, "API called with NULL prepared statement", a3, a4, a5);
    }
    return 25;
  }
  uint64_t v9 = (a2 - 1);
  int v10 = sub_1B0CC3F2C((uint64_t)a1, a2 - 1);
  if (v10)
  {
    int v11 = v10;
    if (a5) {
      ((void (*)(void *))a5)(a3);
    }
  }
  else
  {
    uint64_t v13 = *((void *)a1 + 16) + (v9 << 6);
    sub_1B0D180E4(v13);
    uint64_t v14 = &byte_1B0DE9952;
    if (a4) {
      uint64_t v14 = a4;
    }
    *(void *)uint64_t v13 = v14;
    *(void *)(v13 + 8) = a3;
    *(_WORD *)(v13 + 20) = 6657;
    *(unsigned char *)(v13 + 23) = 112;
    *(unsigned char *)(v13 + 56) = 0;
    if (a5) {
      unsigned int v15 = a5;
    }
    else {
      unsigned int v15 = (void (__cdecl *)(void *))nullsub_7;
    }
    *(void *)(v13 + 48) = v15;
    uint64_t v16 = *(void *)(*(void *)a1 + 24);
    if (v16) {
      xmmword_1EB21CA50(v16);
    }
    return 0;
  }
  return v11;
}

int sqlite3_bind_text64(sqlite3_stmt *a1, int a2, const char *a3, sqlite3_uint64 a4, void (__cdecl *a5)(void *), unsigned __int8 encoding)
{
  if (encoding == 4) {
    unsigned int v6 = 2;
  }
  else {
    unsigned int v6 = encoding;
  }
  if (encoding != 1) {
    a4 &= ~1uLL;
  }
  return sub_1B0CC3DB8((uint64_t *)a1, a2, (char *)a3, a4, (uint64_t (*)(uint64_t))a5, v6);
}

int sqlite3_bind_value(sqlite3_stmt *a1, int a2, const sqlite3_value *a3)
{
  if (!a3)
  {
    sub_1B0CE1978(97220);
LABEL_7:
    if (a2 > 0)
    {
      int v8 = sub_1B0CC3F2C((uint64_t)a1, a2 - 1);
      if (!v8)
      {
        uint64_t v9 = *(void *)(*(void *)a1 + 24);
        if (v9) {
          xmmword_1EB21CA50(v9);
        }
        return 0;
      }
      return v8;
    }
    if (a1)
    {
      uint64_t v10 = *(void *)a1;
      if (*(void *)a1)
      {
        int v8 = 25;
        *(_DWORD *)(v10 + 80) = 25;
        sub_1B0D0E714(v10, 25);
        return v8;
      }
      sqlite3_log(21, "API called with finalized prepared statement");
    }
    else
    {
      sqlite3_log(21, "API called with NULL prepared statement");
    }
    return 25;
  }
  __int16 v5 = *((_WORD *)a3 + 10);
  switch(byte_1B0DE186A[v5 & 0x3F])
  {
    case 1u:
      sqlite3_int64 v6 = *(void *)a3;
      return sqlite3_bind_int64(a1, a2, v6);
    case 2u:
      if ((v5 & 8) != 0) {
        double v11 = *(double *)a3;
      }
      else {
        double v11 = (double)*(uint64_t *)a3;
      }
      return sqlite3_bind_double(a1, a2, v11);
    case 3u:
      uint64_t v12 = *((int *)a3 + 4);
      unsigned int v13 = *((unsigned __int8 *)a3 + 22);
      uint64_t v14 = (char *)*((void *)a3 + 1);
      goto LABEL_21;
    case 4u:
      if ((*((_WORD *)a3 + 10) & 0x400) != 0)
      {
        int v15 = *(_DWORD *)a3;
        int result = sqlite3_bind_zeroblob(a1, a2, v15);
      }
      else
      {
        uint64_t v12 = *((unsigned int *)a3 + 4);
        if ((v12 & 0x80000000) != 0)
        {
          int result = sub_1B0CE1978(98740);
        }
        else
        {
          uint64_t v14 = (char *)*((void *)a3 + 1);
          unsigned int v13 = 0;
LABEL_21:
          int result = sub_1B0CC3DB8((uint64_t *)a1, a2, v14, v12, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL, v13);
        }
      }
      break;
    default:
      goto LABEL_7;
  }
  return result;
}

int sqlite3_bind_zeroblob(sqlite3_stmt *a1, int a2, int n)
{
  if (a2 <= 0)
  {
    if (a1)
    {
      uint64_t v11 = *(void *)a1;
      if (*(void *)a1)
      {
        int v6 = 25;
        *(_DWORD *)(v11 + 80) = 25;
        sub_1B0D0E714(v11, 25);
        return v6;
      }
      sqlite3_log(21, "API called with finalized prepared statement", *(void *)&n);
    }
    else
    {
      sqlite3_log(21, "API called with NULL prepared statement", *(void *)&n);
    }
    return 25;
  }
  uint64_t v5 = (a2 - 1);
  int v6 = sub_1B0CC3F2C((uint64_t)a1, a2 - 1);
  if (!v6)
  {
    uint64_t v7 = *((void *)a1 + 16);
    uint64_t v8 = v7 + (v5 << 6);
    if ((*(_WORD *)(v8 + 20) & 0x9000) != 0 || *(_DWORD *)(v8 + 32)) {
      sub_1B0D180E4(v7 + (v5 << 6));
    }
    *(_WORD *)(v8 + 20) = 1040;
    uint64_t v9 = v7 + (v5 << 6);
    *(_DWORD *)(v9 + 16) = 0;
    *(_DWORD *)uint64_t v8 = n & ~(n >> 31);
    *(unsigned char *)(v9 + 22) = 1;
    *(void *)(v9 + 8) = 0;
    uint64_t v10 = *(void *)(*(void *)a1 + 24);
    if (v10) {
      xmmword_1EB21CA50(v10);
    }
    return 0;
  }
  return v6;
}

int sqlite3_bind_zeroblob64(sqlite3_stmt *a1, int a2, sqlite3_uint64 a3)
{
  if (a1)
  {
    uint64_t v7 = *(void *)a1;
    if (*(void *)(v7 + 24))
    {
      xmmword_1EB21CA40(*(void *)(v7 + 24));
      uint64_t v7 = *(void *)a1;
    }
    if (*(int *)(v7 + 136) >= a3)
    {
      unsigned int v8 = sqlite3_bind_zeroblob(a1, a2, a3);
      uint64_t v7 = *(void *)a1;
      if (!v8 && !*(unsigned char *)(v7 + 103))
      {
        int v10 = 0;
        uint64_t v11 = *(void *)(v7 + 24);
        if (!v11) {
          return v10;
        }
        goto LABEL_14;
      }
    }
    else
    {
      unsigned int v8 = 18;
    }
    int v10 = sub_1B0D1806C(v7, v8);
    uint64_t v11 = *(void *)(*(void *)a1 + 24);
    if (!v11) {
      return v10;
    }
LABEL_14:
    xmmword_1EB21CA50(v11);
    return v10;
  }
  return sub_1B0CE1978(98955);
}

int sqlite3_bind_parameter_count(sqlite3_stmt *a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    uint64_t v2 = *(void *)(*(void *)a1 + 24);
    if (v2)
    {
      xmmword_1EB21CA40(v2);
      uint64_t v3 = *(void *)(*(void *)v1 + 24);
      LODWORD(v1) = *((_DWORD *)v1 + 8);
      if (v3) {
        xmmword_1EB21CA50(v3);
      }
    }
    else
    {
      LODWORD(v1) = *((_DWORD *)v1 + 8);
    }
  }
  return (int)v1;
}

int sqlite3_transfer_bindings(sqlite3_stmt *a1, sqlite3_stmt *a2)
{
  if (a1 && a2)
  {
    if (*((_DWORD *)a1 + 8) == *((_DWORD *)a2 + 8))
    {
      if (*((_DWORD *)a2 + 93)) {
        *((_WORD *)a2 + 134) = *((_WORD *)a2 + 134) & 0xFFFC | 1;
      }
      if (*((_DWORD *)a1 + 93)) {
        *((_WORD *)a1 + 134) = *((_WORD *)a1 + 134) & 0xFFFC | 1;
      }
      sub_1B0CEC310((uint64_t)a1, a2);
      return 0;
    }
    else
    {
      return 1;
    }
  }
  else
  {
    return sub_1B0CE1978(99049);
  }
}

uint64_t sub_1B0CEC310(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(*a2 + 24);
  if (v4) {
    xmmword_1EB21CA40(v4);
  }
  if (*(int *)(a1 + 32) >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    do
    {
      uint64_t v11 = a2[16] + v5;
      uint64_t v12 = *(void *)(a1 + 128);
      if ((*(_WORD *)(v11 + 20) & 0x9000) != 0 || *(_DWORD *)(v11 + 32)) {
        sub_1B0D180E4(a2[16] + v5);
      }
      long long v7 = *(_OWORD *)(v12 + v5);
      long long v8 = *(_OWORD *)(v12 + v5 + 16);
      long long v9 = *(_OWORD *)(v12 + v5 + 48);
      *(_OWORD *)(v11 + 32) = *(_OWORD *)(v12 + v5 + 32);
      *(_OWORD *)(v11 + 48) = v9;
      *(_OWORD *)uint64_t v11 = v7;
      *(_OWORD *)(v11 + 16) = v8;
      uint64_t v10 = v12 + v5;
      *(_WORD *)(v10 + 20) = 1;
      *(_DWORD *)(v10 + 32) = 0;
      ++v6;
      v5 += 64;
    }
    while (v6 < *(int *)(a1 + 32));
  }
  uint64_t result = *(void *)(*a2 + 24);
  if (result)
  {
    uint64_t v14 = (uint64_t (*)(void))xmmword_1EB21CA50;
    return v14();
  }
  return result;
}

sqlite3 *__cdecl sqlite3_db_handle(sqlite3_stmt *a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = *(sqlite3 **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 24);
  if (v3)
  {
    xmmword_1EB21CA40(v3);
    uint64_t v2 = *(sqlite3 **)a1;
    uint64_t v4 = *(void *)(*(void *)a1 + 24);
    if (v4) {
      xmmword_1EB21CA50(v4);
    }
  }
  return v2;
}

int sqlite3_stmt_readonly(sqlite3_stmt *pStmt)
{
  if (!pStmt) {
    return 1;
  }
  uint64_t v2 = *(void *)(*(void *)pStmt + 24);
  if (!v2) {
    return (*((unsigned __int16 *)pStmt + 134) >> 6) & 1;
  }
  xmmword_1EB21CA40(v2);
  uint64_t v3 = *(void *)(*(void *)pStmt + 24);
  int v4 = (*((unsigned __int16 *)pStmt + 134) >> 6) & 1;
  if (v3) {
    xmmword_1EB21CA50(v3);
  }
  return v4;
}

int sqlite3_stmt_isexplain(sqlite3_stmt *pStmt)
{
  uint64_t v1 = (unsigned __int16 *)pStmt;
  if (pStmt)
  {
    uint64_t v2 = *(void *)(*(void *)pStmt + 24);
    if (v2)
    {
      xmmword_1EB21CA40(v2);
      uint64_t v3 = *(void *)(*(void *)v1 + 24);
      LODWORD(v1) = (v1[134] >> 2) & 3;
      if (v3) {
        xmmword_1EB21CA50(v3);
      }
    }
    else
    {
      LODWORD(v1) = (v1[134] >> 2) & 3;
    }
  }
  return (int)v1;
}

uint64_t sqlite3_stmt_explain(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    unsigned int v9 = a2;
    uint64_t v11 = *(void *)(*(void *)a1 + 24);
    if (v11) {
      xmmword_1EB21CA40(v11);
    }
    unsigned int v12 = *(unsigned __int16 *)(a1 + 268);
    if (((v12 >> 2) & 3) == v9)
    {
      uint64_t v13 = 0;
      int v14 = (v12 >> 2) & 3;
      if (v14)
      {
LABEL_6:
        __int16 v15 = (4 * v14) ^ 0xC;
LABEL_14:
        *(_WORD *)(a1 + 260) = v15;
        uint64_t v17 = *(void *)(*(void *)a1 + 24);
        if (v17) {
          xmmword_1EB21CA50(v17);
        }
        return v13;
      }
    }
    else if (v9 <= 2 && *(char *)(a1 + 266) < 0)
    {
      if (*(unsigned char *)(a1 + 267) == 1)
      {
        if (*(int *)(a1 + 36) >= 10 && (v9 != 2 || (v12 & 0x100) != 0))
        {
          uint64_t v13 = 0;
          unsigned int v18 = v12 & 0xFFFFFFF3 | (4 * (v9 & 3));
        }
        else
        {
          *(_WORD *)(a1 + 268) = v12 & 0xFFF3 | (4 * (v9 & 3));
          uint64_t v13 = sub_1B0CEB134(a1, a2, a3, a4, a5, a6, a7, a8);
          unsigned int v18 = *(_WORD *)(a1 + 268) & 0xFEFF | ((v9 == 2) << 8);
        }
        *(_WORD *)(a1 + 268) = v18;
        int v14 = (v18 >> 2) & 3;
        if (v14) {
          goto LABEL_6;
        }
      }
      else
      {
        uint64_t v13 = 5;
        int v14 = (v12 >> 2) & 3;
        if (v14) {
          goto LABEL_6;
        }
      }
    }
    else
    {
      uint64_t v13 = 1;
      int v14 = (v12 >> 2) & 3;
      if (v14) {
        goto LABEL_6;
      }
    }
    __int16 v15 = *(_WORD *)(a1 + 262);
    goto LABEL_14;
  }
  return sub_1B0CE1978(99111);
}

int sqlite3_stmt_busy(sqlite3_stmt *a1)
{
  uint64_t v1 = (unsigned __int8 *)a1;
  if (a1)
  {
    uint64_t v2 = *(void *)(*(void *)a1 + 24);
    if (v2)
    {
      xmmword_1EB21CA40(v2);
      uint64_t v3 = *(void *)(*(void *)v1 + 24);
      LODWORD(v1) = v1[267] == 2;
      if (v3) {
        xmmword_1EB21CA50(v3);
      }
    }
    else
    {
      LODWORD(v1) = v1[267] == 2;
    }
  }
  return (int)v1;
}

int sqlite3_stmt_status(sqlite3_stmt *a1, int op, int resetFlg)
{
  if (!a1 || op != 99 && op >= 9)
  {
    sub_1B0CE1978(99192);
    return 0;
  }
  long long v7 = *(void **)a1;
  uint64_t v8 = *(void *)(*(void *)a1 + 24);
  if (op == 99)
  {
    if (v8) {
      xmmword_1EB21CA40(v8);
    }
    int v11 = 0;
    v7[102] = &v11;
    v7[64] = v7[63];
    sub_1B0CE20DC((uint64_t)a1);
    v7[102] = 0;
    v7[64] = v7[65];
    uint64_t v9 = v7[3];
    if (!v9) {
      return v11;
    }
  }
  else
  {
    if (v8) {
      xmmword_1EB21CA40(v8);
    }
    uint64_t v10 = (char *)a1 + 4 * op;
    int v11 = *((_DWORD *)v10 + 70);
    if (resetFlg) {
      *((_DWORD *)v10 + 70) = 0;
    }
    uint64_t v9 = *(void *)(*(void *)a1 + 24);
    if (!v9) {
      return v11;
    }
  }
  xmmword_1EB21CA50(v9);
  return v11;
}

const char *__cdecl sqlite3_sql(sqlite3_stmt *pStmt)
{
  uint64_t v1 = (const char **)pStmt;
  if (pStmt)
  {
    uint64_t v2 = *(void *)(*(void *)pStmt + 24);
    if (v2)
    {
      xmmword_1EB21CA40(v2);
      uint64_t v3 = *((void *)*v1 + 3);
      uint64_t v1 = (const char **)v1[40];
      if (v3) {
        xmmword_1EB21CA50(v3);
      }
    }
    else
    {
      return v1[40];
    }
  }
  return (const char *)v1;
}

char *__cdecl sqlite3_expanded_sql(sqlite3_stmt *pStmt)
{
  if (!pStmt) {
    return 0;
  }
  uint64_t v2 = *(void *)pStmt;
  uint64_t v3 = *(void *)(*(void *)pStmt + 24);
  if (v3 && (xmmword_1EB21CA40(v3), uint64_t v2 = *(void *)pStmt, (v4 = *(void *)(*(void *)pStmt + 24)) != 0))
  {
    xmmword_1EB21CA40(v4);
    uint64_t v2 = *(void *)pStmt;
    uint64_t v5 = *(void *)(*(void *)pStmt + 24);
    uint64_t v6 = (char *)*((void *)pStmt + 40);
    if (v5)
    {
      xmmword_1EB21CA50(v5);
      uint64_t v2 = *(void *)pStmt;
    }
  }
  else
  {
    uint64_t v6 = (char *)*((void *)pStmt + 40);
  }
  if (v6)
  {
    uint64_t v7 = *(void *)(v2 + 24);
    if (v7) {
      xmmword_1EB21CA40(v7);
    }
    uint64_t v6 = (char *)sub_1B0CEC95C(pStmt, v6);
    uint64_t v2 = *(void *)pStmt;
    uint64_t v8 = *(void *)(*(void *)pStmt + 24);
    if (v8)
    {
      xmmword_1EB21CA50(v8);
      uint64_t v2 = *(void *)pStmt;
    }
  }
  uint64_t v9 = *(void *)(v2 + 24);
  if (v9) {
    xmmword_1EB21CA50(v9);
  }
  return v6;
}

void *sub_1B0CEC95C(void *a1, char *__s)
{
  uint64_t v2 = __s;
  int v61 = 0;
  uint64_t v60 = 0;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 136);
  int v56 = 0;
  int v57 = 0;
  unsigned int v58 = 0;
  int v59 = v4;
  if (*(int *)(v3 + 220) < 2)
  {
    if (!*((_DWORD *)a1 + 8))
    {
      if (__s)
      {
        unsigned int v49 = strlen(__s) & 0x3FFFFFFF;
        if (v49) {
          sub_1B0CE62B0((uint64_t)&v56, v2, v49);
        }
      }
      goto LABEL_97;
    }
    if (!*__s) {
      goto LABEL_97;
    }
    int v12 = 1;
    while (1)
    {
      signed int v13 = 0;
      int v62 = 0;
      int v14 = (unsigned __int8 *)v2;
      while (1)
      {
        int v15 = sub_1B0C7FE7C(v14, &v62);
        int v16 = v15;
        if (v62 == 156) {
          break;
        }
        v13 += v15;
        v14 += v15;
        if (!*v14)
        {
          int v16 = 0;
          break;
        }
      }
      if (v13 <= 0)
      {
        if (v13) {
          sub_1B0CE1978(32737);
        }
      }
      else
      {
        uint64_t v17 = v60;
        if ((int)v60 + v13 >= v58)
        {
          sub_1B0CE62B0((uint64_t)&v56, v2, v13);
        }
        else
        {
          LODWORD(v60) = v60 + v13;
          memcpy((char *)v57 + v17, v2, v13);
        }
      }
      if (!v16) {
        goto LABEL_97;
      }
      unsigned int v18 = &v2[v13];
      if (*v18 == 63)
      {
        if (v16 < 2)
        {
          int v61 = v12;
          LODWORD(v19) = v12;
        }
        else
        {
          sub_1B0D22EF0((unsigned __int8 *)v18 + 1, &v61);
          LODWORD(v19) = v61;
        }
      }
      else
      {
        uint64_t v20 = *(void *)(*a1 + 24);
        if (v20) {
          xmmword_1EB21CA40(v20);
        }
        uint64_t v19 = a1[22];
        if (v19)
        {
          int v21 = *(_DWORD *)(v19 + 4);
          int v22 = 2;
          do
          {
            uint64_t v23 = v22;
            int v24 = (const char *)(v19 + 4 * v22 + 8);
            if (!strncmp(v24, v18, v16) && !v24[v16])
            {
              LODWORD(v19) = *(_DWORD *)(v19 + 4 * v23);
              goto LABEL_45;
            }
            int v22 = *(_DWORD *)(v19 + 4 * v23 + 4) + v23;
          }
          while (v22 < v21);
          LODWORD(v19) = 0;
        }
LABEL_45:
        uint64_t v25 = *(void *)(*a1 + 24);
        if (v25) {
          xmmword_1EB21CA50(v25);
        }
        int v61 = v19;
      }
      if ((int)v19 + 1 > v12) {
        int v12 = v19 + 1;
      }
      uint64_t v26 = a1[16];
      uint64_t v27 = (int)v19 - 1;
      uint64_t v28 = (long long *)(v26 + (v27 << 6));
      __int16 v29 = *((_WORD *)v28 + 10);
      if (v29)
      {
        uint64_t v30 = v60;
        if ((int)v60 + 4 >= v58)
        {
          sub_1B0CE62B0((uint64_t)&v56, "NULL", 4u);
        }
        else
        {
          LODWORD(v60) = v60 + 4;
          *(_DWORD *)((char *)v57 + v30) = 1280070990;
        }
      }
      else if ((v29 & 0x24) != 0)
      {
        sqlite3_str_appendf((sqlite3_str *)&v56, "%lld");
      }
      else if ((v29 & 8) != 0)
      {
        sqlite3_str_appendf((sqlite3_str *)&v56, "%!.15g", *(void *)v28);
      }
      else
      {
        if ((v29 & 2) != 0)
        {
          unsigned int v32 = *(unsigned __int8 *)(v3 + 100);
          if (v32 != 1)
          {
            long long v54 = 0u;
            long long v55 = 0u;
            long long v52 = 0u;
            *(void *)&long long v53 = 0;
            *((void *)&v53 + 1) = v3;
            sub_1B0C79BBC((uint64_t)&v52, *(char **)(v26 + (v27 << 6) + 8), *(int *)(v26 + (v27 << 6) + 16), v32, 0);
            if ((BYTE4(v53) & 2) == 0)
            {
              BYTE6(v53) = 1;
              goto LABEL_79;
            }
            if (BYTE6(v53) == 1)
            {
LABEL_79:
              uint64_t v28 = &v52;
            }
            else
            {
              uint64_t v28 = &v52;
              if (sub_1B0CD43EC((int *)&v52, 1) == 7)
              {
                BYTE4(v60) = 7;
                unsigned int v58 = 0;
                goto LABEL_79;
              }
            }
          }
          uint64_t v42 = *((unsigned int *)v28 + 4);
          uint64_t v43 = *((void *)v28 + 1);
          if ((int)v42 <= 2048)
          {
LABEL_84:
            uint64_t v45 = *((unsigned int *)v28 + 4);
          }
          else
          {
            uint64_t v44 = 2048;
            while ((*(unsigned char *)(v43 + v44) & 0xC0) == 0x80)
            {
              if (v42 == ++v44) {
                goto LABEL_84;
              }
            }
            uint64_t v45 = v44;
          }
          sqlite3_str_appendf((sqlite3_str *)&v56, "'%.*q'", v45, v43);
          int v46 = *((_DWORD *)v28 + 4);
          BOOL v47 = __OFSUB__(v46, v45);
          int v48 = v46 - v45;
          if (!((v48 < 0) ^ v47 | (v48 == 0))) {
            sqlite3_str_appendf((sqlite3_str *)&v56, "/*+%d bytes*/", v48);
          }
          if (v32 != 1 && WORD2(v53) & 0x9000 | v54) {
            sub_1B0D180E4((uint64_t)&v52);
          }
          goto LABEL_20;
        }
        if ((*((_WORD *)v28 + 10) & 0x400) != 0)
        {
          sqlite3_str_appendf((sqlite3_str *)&v56, "zeroblob(%d)");
        }
        else
        {
          uint64_t v31 = v60;
          if ((int)v60 + 2 >= v58)
          {
            sub_1B0CE62B0((uint64_t)&v56, "x'", 2u);
          }
          else
          {
            LODWORD(v60) = v60 + 2;
            *(_WORD *)((char *)v57 + v31) = 10104;
          }
          uint64_t v33 = v26 + (v27 << 6);
          int v36 = *(_DWORD *)(v33 + 16);
          int v35 = (int *)(v33 + 16);
          int v34 = v36;
          if (v36 >= 2048) {
            int v37 = 2048;
          }
          else {
            int v37 = v34;
          }
          int v51 = v37;
          if (v34 >= 1)
          {
            uint64_t v38 = 0;
            uint64_t v39 = (void *)(v26 + (v27 << 6) + 8);
            if (v37 <= 1) {
              uint64_t v40 = 1;
            }
            else {
              uint64_t v40 = v37;
            }
            do
              sqlite3_str_appendf((sqlite3_str *)&v56, "%02x", *(unsigned __int8 *)(*v39 + v38++));
            while (v40 != v38);
          }
          uint64_t v41 = v60;
          if ((int)v60 + 1 >= v58)
          {
            sub_1B0CE62B0((uint64_t)&v56, "'", 1u);
          }
          else
          {
            LODWORD(v60) = v60 + 1;
            *((unsigned char *)v57 + v41) = 39;
          }
          if (*v35 > v51) {
            sqlite3_str_appendf((sqlite3_str *)&v56, "/*+%d bytes*/");
          }
        }
      }
LABEL_20:
      uint64_t v2 = &v18[v16];
      if (!*v2) {
        goto LABEL_97;
      }
    }
  }
  int v5 = *__s;
  if (*__s)
  {
    do
    {
      uint64_t v6 = 1;
      do
      {
        uint64_t v7 = v6;
        if (v5 == 10) {
          break;
        }
        int v5 = v2[v6++];
      }
      while (v2[v7]);
      uint64_t v8 = v60;
      if ((int)v60 + 3 >= v58)
      {
        sub_1B0CE62B0((uint64_t)&v56, "-- ", 3u);
        if ((int)v7 <= 0)
        {
LABEL_14:
          if (v7) {
            sub_1B0CE1978(32737);
          }
          goto LABEL_5;
        }
      }
      else
      {
        LODWORD(v60) = v60 + 3;
        uint64_t v9 = (char *)v57 + v8;
        v9[2] = 32;
        *(_WORD *)uint64_t v9 = 11565;
        if ((int)v7 <= 0) {
          goto LABEL_14;
        }
      }
      uint64_t v10 = v60;
      if ((int)v60 + (int)v7 < v58)
      {
        LODWORD(v60) = v60 + v7;
        memcpy((char *)v57 + v10, v2, v7);
      }
      else
      {
        sub_1B0CE62B0((uint64_t)&v56, v2, v7);
      }
LABEL_5:
      v2 += v7;
      int v5 = *v2;
    }
    while (*v2);
  }
LABEL_97:
  if (BYTE4(v60))
  {
    if ((v60 & 0x40000000000) != 0)
    {
      if (v57) {
        sub_1B0D05C10(v56, v57);
      }
    }
    return 0;
  }
  if (!v57) {
    return v57;
  }
  *((unsigned char *)v57 + v60) = 0;
  if (!v59 || (v60 & 0x40000000000) != 0) {
    return v57;
  }
  return sub_1B0D06044((uint64_t *)&v56);
}

const char *__cdecl sqlite3_normalized_sql(sqlite3_stmt *pStmt)
{
  if (!pStmt) {
    return 0;
  }
  uint64_t v2 = (const char *)*((void *)pStmt + 41);
  if (v2) {
    return v2;
  }
  uint64_t v3 = (unsigned __int8 *)*((void *)pStmt + 40);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *(void *)pStmt;
  uint64_t v5 = *(void *)(*(void *)pStmt + 24);
  if (v5)
  {
    xmmword_1EB21CA40(v5);
    uint64_t v4 = *(void *)pStmt;
    uint64_t v3 = (unsigned __int8 *)*((void *)pStmt + 40);
  }
  int v60 = -1;
  uint64_t v6 = (unsigned int *)&unk_1E9B51E88;
  if (!sqlite3_initialize())
  {
    uint64_t v7 = sub_1B0C7FC94(32);
    if (v7)
    {
      uint64_t v6 = (unsigned int *)v7;
      if (v4) {
        int v8 = *(_DWORD *)(v4 + 136);
      }
      else {
        int v8 = 2147483645;
      }
      *(void *)uint64_t v7 = 0;
      *(void *)(v7 + 8) = 0;
      *(_DWORD *)(v7 + 16) = 0;
      *(_DWORD *)(v7 + 20) = v8;
      *(_DWORD *)(v7 + 24) = 0;
      *(_WORD *)(v7 + 28) = 0;
    }
    else
    {
      uint64_t v6 = (unsigned int *)&unk_1E9B51E88;
    }
  }
  int v10 = *v3;
  if (!*v3)
  {
LABEL_113:
    uint64_t v51 = v6[6];
    if ((int)v51 + 1 < v6[4])
    {
      v6[6] = v51 + 1;
      *(unsigned char *)(*((void *)v6 + 1) + v51) = 59;
      goto LABEL_115;
    }
    sub_1B0CE62B0((uint64_t)v6, ";", 1u);
    if (v6 == (unsigned int *)&unk_1E9B51E88) {
      goto LABEL_128;
    }
LABEL_116:
    uint64_t v52 = *((void *)v6 + 1);
    if (v52 && (*(unsigned char *)(v52 + v6[6]) = 0, v6[5]) && (*((unsigned char *)v6 + 29) & 4) == 0) {
      uint64_t v2 = (const char *)sub_1B0D06044((uint64_t *)v6);
    }
    else {
      uint64_t v2 = (const char *)*((void *)v6 + 1);
    }
    long long v53 = (void (**)(void *))&off_1EB21C9E8;
    if (dword_1EB21C9C0)
    {
      if ((void)xmmword_1EB2201B0) {
        xmmword_1EB21CA40(xmmword_1EB2201B0);
      }
      qword_1EB220108[0] -= (int)off_1EB21C9F8(v6);
      --qword_1EB220150;
      off_1EB21C9E8(v6);
      uint64_t v6 = (unsigned int *)xmmword_1EB2201B0;
      if (!(void)xmmword_1EB2201B0) {
        goto LABEL_129;
      }
      long long v53 = (void (**)(void *))&xmmword_1EB21CA50;
    }
    (*v53)(v6);
    goto LABEL_129;
  }
  long long v55 = (void *)v4;
  int v56 = 0;
  int v11 = 0;
  int v58 = 0;
  int v12 = 0;
  int v13 = 0;
  int v14 = -1;
  int v15 = v3;
  int v57 = v3;
  do
  {
    if (*((unsigned char *)v6 + 28)) {
      break;
    }
    if (v14 != 183) {
      int v12 = v14;
    }
    int v16 = sub_1B0C7FE7C(v15, &v60);
    int v14 = v60;
    if (v16 < 1) {
      break;
    }
    unsigned int v17 = v16;
    if (v60 > 116)
    {
      switch(v60)
      {
        case 117:
        case 153:
        case 154:
        case 155:
        case 156:
          goto LABEL_26;
        case 121:
          if (v12 == 45 || v12 == 19)
          {
            uint64_t v25 = v6[6];
            if ((int)v25 + 5 >= v6[4])
            {
              sub_1B0CE62B0((uint64_t)v6, " NULL", 5u);
            }
            else
            {
              v6[6] = v25 + 5;
              uint64_t v26 = *((void *)v6 + 1) + v25;
              *(unsigned char *)(v26 + 4) = 76;
              *(_DWORD *)uint64_t v26 = 1280658976;
            }
            goto LABEL_19;
          }
LABEL_26:
          uint64_t v18 = v6[6];
          if ((int)v18 + 1 < v6[4])
          {
            v6[6] = v18 + 1;
            uint64_t v19 = *((void *)v6 + 1);
            char v20 = 63;
            goto LABEL_28;
          }
          uint64_t v23 = (uint64_t)v6;
          int v24 = "?";
          break;
        case 138:
          int v11 = 0;
          goto LABEL_44;
        case 183:
          goto LABEL_19;
        default:
          goto LABEL_44;
      }
LABEL_38:
      sub_1B0CE62B0(v23, v24, 1u);
      goto LABEL_19;
    }
    switch(v60)
    {
      case 22:
        uint64_t v29 = v6[6];
        if (v12 == 49) {
          int v11 = v6[6];
        }
        int v30 = v56;
        if (v12 == 49) {
          int v30 = v58 + 1;
        }
        int v56 = v30;
        if ((int)v29 + 1 >= v6[4])
        {
          sub_1B0CE62B0((uint64_t)v6, "(", 1u);
        }
        else
        {
          v6[6] = v29 + 1;
          *(unsigned char *)(*((void *)v6 + 1) + v29) = 40;
        }
        ++v58;
        goto LABEL_19;
      case 23:
        if (v11 < 1)
        {
          int v31 = v58;
        }
        else
        {
          int v31 = v58;
          if (v58 == v56)
          {
            unsigned int v32 = v11 + 1;
            v6[6] = v11 + 1;
            int v33 = v11 + 6;
            if (v11 + 6 >= v6[4])
            {
              sub_1B0CE62B0((uint64_t)v6, "?,?,?", 5u);
              int v11 = 0;
            }
            else
            {
              int v11 = 0;
              v6[6] = v33;
              uint64_t v34 = *((void *)v6 + 1) + v32;
              *(unsigned char *)(v34 + 4) = 63;
              *(_DWORD *)uint64_t v34 = 742337599;
            }
          }
        }
        int v58 = v31 - 1;
        uint64_t v18 = v6[6];
        if ((int)v18 + 1 < v6[4])
        {
          v6[6] = v18 + 1;
          uint64_t v19 = *((void *)v6 + 1);
          char v20 = 41;
LABEL_28:
          *(unsigned char *)(v19 + v18) = v20;
          goto LABEL_19;
        }
        uint64_t v23 = (uint64_t)v6;
        int v24 = ")";
        goto LABEL_38;
      case 59:
        unint64_t v21 = v6[6];
        if ((char)byte_1B0DE196D[v10] < 0)
        {
          int v35 = (char *)sub_1B0D05DC0((uint64_t)v55, v16 + 1);
          if (!v35)
          {
            uint64_t v3 = v57;
            int v11 = 0;
            goto LABEL_19;
          }
          int v36 = v35;
          memcpy(v35, v15, v17);
          v36[v17] = 0;
          int v59 = 0;
          int v37 = *v36;
          if ((char)byte_1B0DE196D[*v36] < 0)
          {
            uint64_t v38 = 0;
            if (v37 == 91) {
              int v37 = 93;
            }
            for (int i = 1; ; ++i)
            {
              uint64_t v40 = i;
              int v41 = v36[i];
              if (v41 == v37)
              {
                ++i;
                LOBYTE(v41) = v37;
                if (v36[v40 + 1] != v37) {
                  break;
                }
              }
              v36[v38++] = v41;
            }
            v36[v38] = 0;
          }
          if (*v15 == 34)
          {
            uint64_t v42 = (const char *)*((void *)pStmt + 42);
            if (v42)
            {
              while (strcmp(v36, v42 + 8))
              {
                uint64_t v42 = *(const char **)v42;
                if (!v42) {
                  goto LABEL_74;
                }
              }
              uint64_t v49 = v6[6];
              if ((int)v49 + 1 >= v6[4])
              {
                sub_1B0CE62B0((uint64_t)v6, "?", 1u);
              }
              else
              {
                v6[6] = v49 + 1;
                *(unsigned char *)(*((void *)v6 + 1) + v49) = 63;
              }
              uint64_t v3 = v57;
              sub_1B0D05C10(v55, v36);
              int v11 = 0;
              goto LABEL_19;
            }
          }
LABEL_74:
          int v43 = strlen(v36);
          unsigned int v44 = v43 & 0x3FFFFFFF;
          if (sub_1B0C7FE7C((unsigned __int8 *)v36, &v59) == (v43 & 0x3FFFFFFF) && v59 == 59)
          {
            uint64_t v45 = v6[6];
            if (v45)
            {
              uint64_t v46 = *((void *)v6 + 1);
              if ((byte_1B0DE196D[*(unsigned __int8 *)(v46 + (v45 - 1))] & 0x46) != 0)
              {
                if ((int)v45 + 1 >= v6[4])
                {
                  sub_1B0CE62B0((uint64_t)v6, " ", 1u);
                }
                else
                {
                  v6[6] = v45 + 1;
                  *(unsigned char *)(v46 + v45) = 32;
                }
              }
            }
            if (v44)
            {
              uint64_t v50 = v6[6];
              if (v50 + v44 >= v6[4])
              {
                sub_1B0CE62B0((uint64_t)v6, v36, v44);
              }
              else
              {
                v6[6] = v50 + v44;
                memcpy((void *)(*((void *)v6 + 1) + v50), v36, v43 & 0x3FFFFFFF);
              }
            }
          }
          else
          {
            sqlite3_str_appendf((sqlite3_str *)v6, "\"%w\"", v36);
          }
          sub_1B0D05C10(v55, v36);
        }
        else
        {
          if (v21)
          {
            uint64_t v22 = *((void *)v6 + 1);
            if ((byte_1B0DE196D[*(unsigned __int8 *)(v22 + (v21 - 1))] & 0x46) != 0)
            {
              if ((int)v21 + 1 >= v6[4])
              {
                sub_1B0CE62B0((uint64_t)v6, " ", 1u);
              }
              else
              {
                v6[6] = v21 + 1;
                *(unsigned char *)(v22 + v21) = 32;
              }
            }
          }
          uint64_t v48 = v6[6];
          if (v48 + v17 >= v6[4])
          {
            sub_1B0CE62B0((uint64_t)v6, v15, v17);
          }
          else
          {
            v6[6] = v48 + v17;
            memcpy((void *)(*((void *)v6 + 1) + v48), v15, v17);
          }
        }
        if (v21 < v6[6])
        {
          do
          {
            *(unsigned char *)(*((void *)v6 + 1) + v21) = byte_1B0DE1758[*(unsigned __int8 *)(*((void *)v6 + 1) + v21)];
            ++v21;
          }
          while (v21 < v6[6]);
        }
        int v11 = 0;
        break;
      default:
LABEL_44:
        if ((byte_1B0DE196D[v10] & 0x46) != 0)
        {
          uint64_t v27 = v6[6];
          if (v27)
          {
            uint64_t v28 = *((void *)v6 + 1);
            if ((byte_1B0DE196D[*(unsigned __int8 *)(v28 + (v27 - 1))] & 0x46) != 0)
            {
              if ((int)v27 + 1 >= v6[4])
              {
                sub_1B0CE62B0((uint64_t)v6, " ", 1u);
              }
              else
              {
                v6[6] = v27 + 1;
                *(unsigned char *)(v28 + v27) = 32;
              }
            }
          }
        }
        unint64_t v47 = v6[6];
        if (v47 + v17 >= v6[4])
        {
          sub_1B0CE62B0((uint64_t)v6, v15, v17);
        }
        else
        {
          v6[6] = v47 + v17;
          memcpy((void *)(*((void *)v6 + 1) + v47), v15, v17);
        }
        if (v47 < v6[6])
        {
          do
          {
            *(unsigned char *)(*((void *)v6 + 1) + v47) &= ~byte_1B0DE196D[*(unsigned __int8 *)(*((void *)v6 + 1) + v47)] | 0xDF;
            ++v47;
          }
          while (v47 < v6[6]);
        }
        break;
    }
    uint64_t v3 = v57;
LABEL_19:
    v13 += v17;
    int v15 = &v3[v13];
    int v10 = *v15;
  }
  while (*v15);
  if (v14 != 1) {
    goto LABEL_113;
  }
LABEL_115:
  if (v6 != (unsigned int *)&unk_1E9B51E88) {
    goto LABEL_116;
  }
LABEL_128:
  uint64_t v2 = 0;
LABEL_129:
  *((void *)pStmt + 41) = v2;
  uint64_t v54 = *(void *)(*(void *)pStmt + 24);
  if (v54)
  {
    xmmword_1EB21CA50(v54);
    return (const char *)*((void *)pStmt + 41);
  }
  return v2;
}

uint64_t sqlite3_preupdate_old(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)(a1 + 368);
  if (!v4 || *(_DWORD *)(v4 + 16) == 18)
  {
    unsigned int v5 = sub_1B0CE1978(99305);
    *(_DWORD *)(a1 + 80) = v5;
    goto LABEL_4;
  }
  unsigned int v8 = a2;
  uint64_t v9 = *(void *)(v4 + 128);
  if (v9)
  {
    uint64_t v10 = *(unsigned __int16 *)(v9 + 96);
    if (!*(_WORD *)(v9 + 96))
    {
LABEL_12:
      unsigned int v5 = 25;
      *(_DWORD *)(a1 + 80) = 25;
      goto LABEL_4;
    }
    uint64_t v11 = 0;
    int v12 = *(unsigned __int16 **)(v9 + 8);
    uint64_t v13 = v10 << 16;
    while (1)
    {
      int v14 = *v12++;
      if (v14 == (unsigned __int16)a2) {
        break;
      }
      v11 += 0x10000;
      if (v13 == v11) {
        goto LABEL_12;
      }
    }
    unsigned int v8 = (int)v11 >> 16;
  }
  unsigned int v5 = 25;
  if ((v8 & 0x80000000) != 0) {
    goto LABEL_31;
  }
  uint64_t v15 = *(void *)(v4 + 8);
  if ((int)v8 >= *(__int16 *)(v15 + 64)) {
    goto LABEL_31;
  }
  uint64_t v16 = *(void *)(v4 + 72);
  if (v16) {
    goto LABEL_17;
  }
  uint64_t v21 = *(void *)(v15 + 40);
  sub_1B0D146DC(v21);
  unsigned int v22 = *(_DWORD *)(v21 + 64);
  if (a1) {
    uint64_t v23 = (char *)sub_1B0D05DC0(a1, *(unsigned int *)(v21 + 64));
  }
  else {
    uint64_t v23 = (char *)sub_1B0C7FC94(*(unsigned int *)(v21 + 64));
  }
  int v24 = v23;
  if (!v23) {
    goto LABEL_33;
  }
  unsigned int v5 = sub_1B0CD1CD0(*(void *)(*(void *)(v4 + 8) + 40), 0, v22, v23, 0);
  if (v5)
  {
LABEL_30:
    sub_1B0D05C10((void *)a1, v24);
LABEL_31:
    *(_DWORD *)(a1 + 80) = v5;
    goto LABEL_4;
  }
  uint64_t v16 = sub_1B0CEDB8C(v4 + 32, v22, v24);
  *(void *)(v4 + 72) = v16;
  if (!v16)
  {
    unsigned int v5 = 7;
    goto LABEL_30;
  }
  *(void *)(v4 + 24) = v24;
LABEL_17:
  uint64_t v17 = *(void *)(v16 + 8);
  uint64_t v18 = v17 + ((unint64_t)v8 << 6);
  *a3 = v18;
  uint64_t v19 = *(void *)(v4 + 120);
  if (v8 == *(__int16 *)(v19 + 52))
  {
    uint64_t v20 = *(void *)(v4 + 96);
    if ((*(_WORD *)(v18 + 20) & 0x9000) != 0)
    {
      sub_1B0D18980(v18, v20);
    }
    else
    {
      *(void *)uint64_t v18 = v20;
      *(_WORD *)(v18 + 20) = 4;
    }
  }
  else if (v8 >= *(unsigned __int16 *)(*(void *)(v4 + 72) + 28))
  {
    *a3 = (uint64_t)&qword_1B0DE22A8;
  }
  else if (*(unsigned char *)(*(void *)(v19 + 8) + 16 * v8 + 9) == 69 {
         && (*(_WORD *)(v17 + ((unint64_t)v8 << 6) + 20) & 0x24) != 0)
  }
  {
    sub_1B0CEDC28(v18);
  }
LABEL_33:
  unsigned int v5 = 0;
  *(_DWORD *)(a1 + 80) = 0;
  if (*(void *)(a1 + 416))
  {
LABEL_4:
    sub_1B0D0E714(a1, v5);
    if (v5) {
      goto LABEL_35;
    }
    goto LABEL_5;
  }
  unsigned int v5 = 0;
  *(_DWORD *)(a1 + 84) = -1;
LABEL_5:
  if (!*(unsigned char *)(a1 + 103)) {
    return 0;
  }
LABEL_35:

  return sub_1B0D1806C(a1, v5);
}

uint64_t sub_1B0CEDB8C(uint64_t a1, unsigned int a2, char *a3)
{
  unint64_t v6 = (unint64_t)*(unsigned __int16 *)(a1 + 6) << 6;
  uint64_t v7 = *(void *)(a1 + 16);
  if (!v7)
  {
    uint64_t v8 = sub_1B0C7FC94(v6 + 104);
    if (!v8) {
      return v8;
    }
    goto LABEL_3;
  }
  uint64_t v8 = sub_1B0D05DC0(v7, v6 + 104);
  if (v8)
  {
LABEL_3:
    *(void *)uint64_t v8 = a1;
    *(void *)(v8 + 8) = v8 + 40;
    uint64_t v9 = *(unsigned __int16 *)(a1 + 6);
    *(_WORD *)(v8 + 28) = v9 + 1;
    bzero((void *)(v8 + 40), (v9 << 6) + 64);
    sub_1B0CC14AC(a1, a2, a3, v8);
  }
  return v8;
}

void sub_1B0CEDC28(uint64_t a1)
{
  if (a1)
  {
    __int16 v2 = *(_WORD *)(a1 + 20);
    if ((v2 & 8) != 0)
    {
      double v3 = *(double *)a1;
    }
    else if ((v2 & 0x24) != 0)
    {
      double v3 = (double)*(uint64_t *)a1;
    }
    else if ((v2 & 0x12) != 0)
    {
      double v3 = sub_1B0D18684(a1);
    }
    else
    {
      double v3 = 0.0;
    }
  }
  else
  {
    sub_1B0CE1978(89752);
    double v3 = 0.0;
  }
  *(double *)a1 = v3;
  *(_WORD *)(a1 + 20) = *(_WORD *)(a1 + 20) & 0xF240 | 8;
}

uint64_t sqlite3_preupdate_count(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 368);
  if (v1) {
    return *(unsigned __int16 *)(v1 + 38);
  }
  else {
    return 0;
  }
}

uint64_t sqlite3_preupdate_depth(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 368);
  if (v1) {
    return *(unsigned int *)(*(void *)v1 + 368);
  }
  else {
    return 0;
  }
}

uint64_t sqlite3_preupdate_blobwrite(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 368);
  if (v1) {
    return *(unsigned int *)(v1 + 92);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sqlite3_preupdate_new(uint64_t a1, unsigned int a2, uint64_t **a3)
{
  uint64_t v4 = *(void *)(a1 + 368);
  if (!v4 || (int v5 = *(_DWORD *)(v4 + 16), v5 == 9))
  {
    unsigned int v6 = sub_1B0CE1978(99407);
    *(_DWORD *)(a1 + 80) = v6;
    goto LABEL_47;
  }
  unsigned int v8 = a2;
  uint64_t v9 = *(void *)(v4 + 128);
  if (v5 != 23 && v9 != 0)
  {
    uint64_t v11 = *(unsigned __int16 *)(v9 + 96);
    if (*(_WORD *)(v9 + 96))
    {
      uint64_t v12 = 0;
      uint64_t v13 = *(unsigned __int16 **)(v9 + 8);
      uint64_t v14 = v11 << 16;
      while (1)
      {
        int v15 = *v13++;
        if (v15 == (unsigned __int16)a2) {
          break;
        }
        v12 += 0x10000;
        if (v14 == v12) {
          goto LABEL_12;
        }
      }
      unsigned int v8 = (int)v12 >> 16;
      unsigned int v6 = 25;
      if ((int)v12 >> 16 < 0) {
        goto LABEL_46;
      }
      goto LABEL_14;
    }
LABEL_12:
    unsigned int v8 = -1;
  }
  unsigned int v6 = 25;
  if ((v8 & 0x80000000) != 0) {
    goto LABEL_46;
  }
LABEL_14:
  if ((int)v8 >= *(__int16 *)(*(void *)(v4 + 8) + 64)) {
    goto LABEL_46;
  }
  if (v5 == 18)
  {
    uint64_t v16 = *(void *)(v4 + 80);
    if (v16)
    {
LABEL_21:
      uint64_t v19 = (uint64_t *)(*(void *)(v16 + 8) + ((unint64_t)v8 << 6));
      if (v8 == *(__int16 *)(*(void *)(v4 + 120) + 52))
      {
        uint64_t v20 = *(void *)(v4 + 104);
        uint64_t v21 = (_WORD *)v19 + 10;
        if ((*((_WORD *)v19 + 10) & 0x9000) != 0)
        {
          sub_1B0D18980(*(void *)(v16 + 8) + ((unint64_t)v8 << 6), v20);
          goto LABEL_40;
        }
        *uint64_t v19 = v20;
        goto LABEL_39;
      }
      if (v8 >= *(unsigned __int16 *)(v16 + 28)) {
        uint64_t v19 = &qword_1B0DE22A8;
      }
      goto LABEL_40;
    }
    uint64_t v17 = *(int *)(v4 + 88);
    uint64_t v18 = *(void *)(*(void *)v4 + 104) + (v17 << 6);
    if ((*(_WORD *)(v18 + 20) & 0x400) == 0
      || (unsigned int v6 = sub_1B0CC9B18((int *)(*(void *)(*(void *)v4 + 104) + (v17 << 6)))) == 0)
    {
      uint64_t v16 = sub_1B0CEDB8C(v4 + 32, *(_DWORD *)(v18 + 16), *(char **)(v18 + 8));
      if (v16)
      {
        *(void *)(v4 + 80) = v16;
        goto LABEL_21;
      }
      goto LABEL_45;
    }
    goto LABEL_46;
  }
  unsigned int v22 = *(char **)(v4 + 112);
  if (!v22)
  {
    size_t v23 = (uint64_t)*(__int16 *)(*(void *)(v4 + 8) + 64) << 6;
    if (a1) {
      int v24 = (char *)sub_1B0D05DC0(a1, (uint64_t)*(__int16 *)(*(void *)(v4 + 8) + 64) << 6);
    }
    else {
      int v24 = (char *)sub_1B0C7FC94((uint64_t)*(__int16 *)(*(void *)(v4 + 8) + 64) << 6);
    }
    unsigned int v22 = v24;
    if (!v24)
    {
      *(void *)(v4 + 112) = 0;
LABEL_45:
      unsigned int v6 = 7;
      goto LABEL_46;
    }
    bzero(v24, v23);
    *(void *)(v4 + 112) = v22;
  }
  uint64_t v19 = (uint64_t *)&v22[64 * (unint64_t)v8];
  uint64_t v21 = (_WORD *)v19 + 10;
  if (*((_WORD *)v19 + 10)) {
    goto LABEL_40;
  }
  if (v8 == *(__int16 *)(*(void *)(v4 + 120) + 52))
  {
    *uint64_t v19 = *(void *)(v4 + 104);
LABEL_39:
    _WORD *v21 = 4;
    goto LABEL_40;
  }
  unsigned int v6 = sub_1B0CEAC48((uint64_t)&v22[64 * (unint64_t)v8], (long long *)(*(void *)(*(void *)v4 + 104) + ((uint64_t)(int)(v8 + *(_DWORD *)(v4 + 88) + 1) << 6)));
  if (v6)
  {
LABEL_46:
    *(_DWORD *)(a1 + 80) = v6;
LABEL_47:
    sub_1B0D0E714(a1, v6);
    if (v6) {
      goto LABEL_50;
    }
    goto LABEL_48;
  }
LABEL_40:
  unsigned int v6 = 0;
  *a3 = v19;
  *(_DWORD *)(a1 + 80) = 0;
  if (*(void *)(a1 + 416)) {
    goto LABEL_47;
  }
  unsigned int v6 = 0;
  *(_DWORD *)(a1 + 84) = -1;
LABEL_48:
  if (!*(unsigned char *)(a1 + 103)) {
    return 0;
  }
LABEL_50:

  return sub_1B0D1806C(a1, v6);
}

uint64_t sqlite3_stmt_scanstatus_v2(uint64_t a1, int a2, int a3, char a4, uint64_t *a5)
{
  uint64_t v5 = 1;
  if (!a1 || !a5) {
    return v5;
  }
  uint64_t v11 = *(void *)(*(void *)a1 + 24);
  if (v11) {
    xmmword_1EB21CA40(v11);
  }
  uint64_t v12 = *(void *)(a1 + 352);
  if (v12)
  {
    do
    {
      uint64_t v13 = v12;
      uint64_t v12 = *(void *)(v12 + 8);
    }
    while (v12);
    uint64_t v14 = (unsigned __int8 **)(v13 + 16);
    int v15 = (unsigned int *)(v13 + 80);
  }
  else
  {
    uint64_t v14 = (unsigned __int8 **)(a1 + 136);
    int v15 = (unsigned int *)(a1 + 144);
  }
  uint64_t v16 = *v15;
  uint64_t v17 = *v14;
  if (a2 < 0)
  {
    if (a3 != 7) {
      goto LABEL_28;
    }
    if ((int)v16 < 1)
    {
      uint64_t v23 = 0;
    }
    else
    {
      if (v16 == 1)
      {
        uint64_t v22 = 0;
        uint64_t v23 = 0;
      }
      else
      {
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        uint64_t v22 = v16 & 0xFFFFFFFE;
        int v30 = (uint64_t *)(v17 + 72);
        uint64_t v31 = v22;
        do
        {
          uint64_t v32 = *(v30 - 5);
          uint64_t v33 = *v30;
          v30 += 10;
          v28 += v32;
          v29 += v33;
          v31 -= 2;
        }
        while (v31);
        uint64_t v23 = v29 + v28;
        if (v22 == v16) {
          goto LABEL_37;
        }
      }
      uint64_t v34 = &v17[40 * v22 + 32];
      uint64_t v35 = v16 - v22;
      do
      {
        uint64_t v36 = *(void *)v34;
        v34 += 40;
        v23 += v36;
        --v35;
      }
      while (v35);
    }
LABEL_37:
    uint64_t v26 = 0;
    uint64_t v5 = 0;
    *a5 = v23;
    goto LABEL_109;
  }
  uint64_t v18 = *(unsigned int *)(a1 + 392);
  if (a4)
  {
    if ((int)v18 <= a2) {
      goto LABEL_28;
    }
    uint64_t v20 = (int *)(*(void *)(a1 + 400) + 56 * a2);
    goto LABEL_26;
  }
  if ((int)v18 >= 1)
  {
    uint64_t v19 = 0;
    uint64_t v20 = *(int **)(a1 + 400);
    while (1)
    {
      if (*((void *)v20 + 6))
      {
        BOOL v21 = __OFSUB__(a2--, 1);
        if (a2 < 0 != v21) {
          break;
        }
      }
      ++v19;
      v20 += 14;
      if (v18 == v19) {
        goto LABEL_28;
      }
    }
    if ((int)v19 < (int)v18)
    {
LABEL_26:
      switch(a3)
      {
        case 0:
          int v24 = v20[7];
          goto LABEL_39;
        case 1:
          int v24 = v20[8];
LABEL_39:
          if (v24 < 1) {
            uint64_t v37 = -1;
          }
          else {
            uint64_t v37 = *(void *)&v17[40 * v24 + 24];
          }
          goto LABEL_57;
        case 2:
          int v38 = *((__int16 *)v20 + 20);
          double v39 = 1.0;
          if (v38 > 99)
          {
            __int16 v40 = *((_WORD *)v20 + 20);
          }
          else
          {
            do
            {
              __int16 v40 = v38 + 10;
              int v41 = (__int16)v38;
              double v39 = v39 * 0.5;
              v38 += 10;
            }
            while (v41 < 90);
          }
          *(double *)a5 = v39 * (double)(unint64_t)sub_1B0CEE588(v40);
          goto LABEL_108;
        case 3:
          uint64_t v37 = *((void *)v20 + 6);
          goto LABEL_57;
        case 4:
          if (*v20)
          {
            uint64_t v37 = *(void *)&v17[40 * *v20 + 16];
LABEL_57:
            *a5 = v37;
          }
          else
          {
            *a5 = 0;
          }
          goto LABEL_108;
        case 5:
          if (!*v20) {
            goto LABEL_58;
          }
          *(_DWORD *)a5 = *(_DWORD *)&v17[40 * *v20 + 4];
          goto LABEL_108;
        case 6:
          if (*v20) {
            *(_DWORD *)a5 = *(_DWORD *)&v17[40 * *v20 + 8];
          }
          else {
LABEL_58:
          }
            *(_DWORD *)a5 = -1;
          goto LABEL_108;
        case 7:
          uint64_t v42 = v20[1];
          if (!v42)
          {
            uint64_t v44 = -1;
            goto LABEL_107;
          }
          int v43 = v20[2];
          if ((int)v42 <= 0)
          {
            if ((int)v16 >= 1)
            {
              uint64_t v44 = 0;
              uint64_t v47 = v16;
              uint64_t v48 = v17;
              do
              {
                if (*((_DWORD *)v48 + 1) == v43 && (byte_1B0DE18AA[*v48] & 0x40) != 0) {
                  v44 += *((void *)v48 + 4);
                }
                v48 += 40;
                --v47;
              }
              while (v47);
              goto LABEL_75;
            }
          }
          else if (v43 >= (int)v42)
          {
            uint64_t v44 = 0;
            uint64_t v45 = (v43 - v42);
            if (v43 == v42)
            {
              uint64_t v46 = v20[1];
LABEL_73:
              int v56 = &v17[40 * v46 + 32];
              int v57 = v43 - v46 + 1;
              do
              {
                uint64_t v58 = *(void *)v56;
                v56 += 40;
                v44 += v58;
                --v57;
              }
              while (v57);
              goto LABEL_75;
            }
            uint64_t v49 = 0;
            uint64_t v50 = v45 + 1;
            uint64_t v51 = (v45 + 1) & 0x1FFFFFFFELL;
            uint64_t v46 = v51 + v42;
            uint64_t v52 = &v17[40 * v42 + 72];
            uint64_t v53 = v51;
            do
            {
              uint64_t v54 = *((void *)v52 - 5);
              uint64_t v55 = *(void *)v52;
              v52 += 80;
              v44 += v54;
              v49 += v55;
              v53 -= 2;
            }
            while (v53);
            v44 += v49;
            if (v50 != v51) {
              goto LABEL_73;
            }
LABEL_75:
            uint64_t v59 = v20[3];
            if (!v59) {
              goto LABEL_107;
            }
            int v60 = v20[4];
            if ((int)v59 <= 0)
            {
              if ((int)v16 >= 1)
              {
                __int16 v63 = v17;
                uint64_t v64 = v16;
                do
                {
                  if (*((_DWORD *)v63 + 1) == v60 && (byte_1B0DE18AA[*v63] & 0x40) != 0) {
                    v44 += *((void *)v63 + 4);
                  }
                  v63 += 40;
                  --v64;
                }
                while (v64);
              }
            }
            else
            {
              if (v60 < (int)v59) {
                goto LABEL_91;
              }
              uint64_t v61 = (v60 - v59);
              if (v60 == v59)
              {
                uint64_t v62 = v20[3];
LABEL_89:
                int v72 = v60 - v62 + 1;
                __int16 v73 = &v17[40 * v62 + 32];
                do
                {
                  uint64_t v74 = *(void *)v73;
                  v73 += 40;
                  v44 += v74;
                  --v72;
                }
                while (v72);
                goto LABEL_91;
              }
              uint64_t v65 = 0;
              uint64_t v66 = v61 + 1;
              uint64_t v67 = (v61 + 1) & 0x1FFFFFFFELL;
              uint64_t v62 = v67 + v59;
              int v68 = &v17[40 * v59 + 72];
              uint64_t v69 = v67;
              do
              {
                uint64_t v70 = *((void *)v68 - 5);
                uint64_t v71 = *(void *)v68;
                v68 += 80;
                v44 += v70;
                v65 += v71;
                v69 -= 2;
              }
              while (v69);
              v44 += v65;
              if (v66 != v67) {
                goto LABEL_89;
              }
            }
LABEL_91:
            uint64_t v75 = v20[5];
            if (!v75) {
              goto LABEL_107;
            }
            int v76 = v20[6];
            if ((int)v75 <= 0)
            {
              if ((int)v16 >= 1)
              {
                do
                {
                  if (*((_DWORD *)v17 + 1) == v76 && (byte_1B0DE18AA[*v17] & 0x40) != 0) {
                    v44 += *((void *)v17 + 4);
                  }
                  v17 += 40;
                  --v16;
                }
                while (v16);
              }
            }
            else
            {
              if (v76 < (int)v75) {
                goto LABEL_107;
              }
              uint64_t v77 = (v76 - v75);
              if (v76 == v75)
              {
                uint64_t v78 = v75;
LABEL_105:
                int v86 = v76 - v78 + 1;
                unsigned int v87 = &v17[40 * v78 + 32];
                do
                {
                  uint64_t v88 = *(void *)v87;
                  v87 += 40;
                  v44 += v88;
                  --v86;
                }
                while (v86);
                goto LABEL_107;
              }
              uint64_t v79 = 0;
              uint64_t v80 = v77 + 1;
              uint64_t v81 = (v77 + 1) & 0x1FFFFFFFELL;
              uint64_t v78 = v81 + v75;
              unsigned int v82 = &v17[40 * v75 + 72];
              uint64_t v83 = v81;
              do
              {
                uint64_t v84 = *((void *)v82 - 5);
                uint64_t v85 = *(void *)v82;
                v82 += 80;
                v44 += v84;
                v79 += v85;
                v83 -= 2;
              }
              while (v83);
              v44 += v79;
              if (v80 != v81) {
                goto LABEL_105;
              }
            }
LABEL_107:
            *a5 = v44;
LABEL_108:
            uint64_t v26 = 0;
            uint64_t v5 = 0;
LABEL_109:
            uint64_t v25 = *(void *)(*(void *)a1 + 24);
            if (!v25) {
              return v5;
            }
            goto LABEL_29;
          }
          uint64_t v44 = 0;
          goto LABEL_75;
        default:
          break;
      }
    }
  }
LABEL_28:
  uint64_t v25 = *(void *)(*(void *)a1 + 24);
  uint64_t v26 = 1;
  uint64_t v5 = 1;
  if (v25)
  {
LABEL_29:
    xmmword_1EB21CA50(v25);
    return v26;
  }
  return v5;
}

uint64_t sub_1B0CEE588(int a1)
{
  if (a1 > 609) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  unsigned int v2 = ((26215 * a1) >> 18) + ((26215 * a1) >> 31);
  uint64_t v3 = (__int16)a1 % 10;
  uint64_t v4 = v3 - 2;
  uint64_t v5 = v3 - 1;
  if (!((__int16)a1 % 10)) {
    uint64_t v5 = 0;
  }
  if ((unsigned __int16)((__int16)a1 % 10) <= 4u) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = v4;
  }
  unint64_t v7 = v6 + 8;
  if (a1 < 30) {
    return v7 >> (3 - v2);
  }
  else {
    return v7 << (v2 - 3);
  }
}

int sqlite3_stmt_scanstatus(sqlite3_stmt *pStmt, int idx, int iScanStatusOp, void *pOut)
{
  return sqlite3_stmt_scanstatus_v2((uint64_t)pStmt, idx, iScanStatusOp, 0, (uint64_t *)pOut);
}

void sqlite3_stmt_scanstatus_reset(sqlite3_stmt *a1)
{
  if (a1)
  {
    uint64_t v2 = *(void *)(*(void *)a1 + 24);
    if (v2) {
      xmmword_1EB21CA40(v2);
    }
    uint64_t v3 = *((unsigned int *)a1 + 36);
    if ((int)v3 >= 1)
    {
      uint64_t v4 = (void *)(*((void *)a1 + 17) + 24);
      do
      {
        *uint64_t v4 = 0;
        v4[1] = 0;
        v4 += 5;
        --v3;
      }
      while (v3);
    }
    if (*(void *)(*(void *)a1 + 24))
    {
      uint64_t v5 = (void (*)(void))xmmword_1EB21CA50;
      v5();
    }
  }
  else
  {
    sub_1B0CE1978(99659);
  }
}

uint64_t sqlite3_bind_blob_b(uint64_t *a1, int a2, char *a3, int a4, uint64_t a5)
{
  if (a4 < 0)
  {
    if ((unint64_t)(a5 + 1) >= 2) {
      (*(void (**)(uint64_t, char *))(a5 + 16))(a5, a3);
    }
    return sub_1B0CE1978(99764);
  }
  else
  {
    return sub_1B0CEE714(a1, a2, a3, a4, a5, 0);
  }
}

uint64_t sub_1B0CEE714(uint64_t *a1, int a2, char *a3, int a4, uint64_t a5, unsigned int a6)
{
  if (a2 <= 0)
  {
    if (a1)
    {
      uint64_t v13 = *a1;
      if (*a1)
      {
        uint64_t v12 = 25;
        *(_DWORD *)(v13 + 80) = 25;
        sub_1B0D0E714(v13, 25);
        goto LABEL_12;
      }
      sqlite3_log(21, "API called with finalized prepared statement");
    }
    else
    {
      sqlite3_log(21, "API called with NULL prepared statement");
    }
    uint64_t v12 = 25;
LABEL_12:
    if ((unint64_t)(a5 + 1) >= 2) {
      (*(void (**)(uint64_t, char *))(a5 + 16))(a5, a3);
    }
    return v12;
  }
  uint64_t v11 = (a2 - 1);
  uint64_t v12 = sub_1B0CC3F2C((uint64_t)a1, a2 - 1);
  if (v12) {
    goto LABEL_12;
  }
  if ((uint64_t (*)(uint64_t))a5 == sub_1B0CF5398 || (unint64_t)(a5 + 1) <= 1)
  {
    uint64_t v12 = sub_1B0CE1978(99727);
    goto LABEL_12;
  }
  if (!a3)
  {
    (*(void (**)(uint64_t, void))(a5 + 16))(a5, 0);
LABEL_21:
    uint64_t v12 = 0;
    goto LABEL_24;
  }
  uint64_t v15 = a1[16];
  uint64_t v16 = (uint64_t (*)(uint64_t))_Block_copy((const void *)a5);
  if (v16)
  {
    unsigned int v17 = sub_1B0C79BBC(v15 + (v11 << 6), a3, a4, a6, v16);
    *(unsigned char *)(v15 + (v11 << 6) + 56) = 1;
    if (!v17)
    {
      int v18 = *(unsigned __int8 *)(*a1 + 100);
      uint64_t v19 = v15 + (v11 << 6);
      __int16 v20 = *(_WORD *)(v19 + 20);
      BOOL v21 = (unsigned char *)(v19 + 22);
      if ((v20 & 2) == 0)
      {
        uint64_t v12 = 0;
        unsigned char *v21 = v18;
        goto LABEL_24;
      }
      if (*v21 == v18) {
        goto LABEL_21;
      }
      unsigned int v17 = sub_1B0CD43EC((int *)(v15 + (v11 << 6)), v18);
      if (!v17) {
        goto LABEL_21;
      }
    }
  }
  else
  {
    unsigned int v17 = 7;
  }
  uint64_t v22 = *a1;
  *(_DWORD *)(v22 + 80) = v17;
  sub_1B0D0E714(v22, v17);
  uint64_t v12 = sub_1B0D1806C(*a1, v17);
LABEL_24:
  uint64_t v23 = *(void *)(*a1 + 24);
  if (v23) {
    xmmword_1EB21CA50(v23);
  }
  return v12;
}

uint64_t sqlite3_bind_text_b(uint64_t *a1, int a2, char *a3, int a4, uint64_t a5)
{
  return sub_1B0CEE714(a1, a2, a3, a4, a5, 1u);
}

int sqlite3_value_numeric_type(sqlite3_value *a1)
{
  if (a1)
  {
    __int16 v2 = *((_WORD *)a1 + 10);
    if ((0x4000000040004uLL >> v2))
    {
      sub_1B0CEE968((uint64_t)a1, 0);
      __int16 v2 = *((_WORD *)a1 + 10);
    }
    return byte_1B0DE186A[v2 & 0x3F];
  }
  else
  {
    sub_1B0CE1978(97220);
    return 0;
  }
}

uint64_t sub_1B0CEE968(uint64_t a1, int a2)
{
  double v17 = 0.0;
  int v4 = *(unsigned __int8 *)(a1 + 22);
  uint64_t v5 = *(unsigned __int8 **)(a1 + 8);
  int v6 = *(_DWORD *)(a1 + 16);
  uint64_t result = sub_1B0CC9D20(v5, &v17, v6, v4);
  if ((int)result >= 1)
  {
    double v8 = v17;
    if (result == 1)
    {
      uint64_t v9 = 0x8000000000000000;
      uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
      if (v17 <= 9.22337204e18) {
        uint64_t v10 = (uint64_t)v17;
      }
      if (v17 >= -9.22337204e18) {
        uint64_t v9 = v10;
      }
      if (v17 == 0.0
        || (unint64_t)(v9 - 0x8000000000000) >> 52 == 4095 && *(void *)&v17 == COERCE__INT64((double)v9))
      {
        *(void *)a1 = v9;
        __int16 v11 = *(_WORD *)(a1 + 20);
        goto LABEL_26;
      }
      uint64_t result = sub_1B0D186FC(v5, (void *)a1, v6, v4);
      if (!result)
      {
        __int16 v11 = *(_WORD *)(a1 + 20);
        goto LABEL_26;
      }
    }
    *(double *)a1 = v8;
    __int16 v12 = *(_WORD *)(a1 + 20);
    __int16 v13 = v12 | 8;
    if (!a2)
    {
LABEL_27:
      *(_WORD *)(a1 + 20) = v13 & 0xFFFD;
      return result;
    }
    if ((v12 & 0x20) == 0)
    {
      if (v8 < -9.22337204e18
        || v8 > 9.22337204e18
        || v8 != (double)(uint64_t)v8
        || (unint64_t)((uint64_t)v8 + 0x7FFFFFFFFFFFFFFFLL) > 0xFFFFFFFFFFFFFFFDLL)
      {
        goto LABEL_27;
      }
      *(void *)a1 = (uint64_t)v8;
    }
    __int16 v11 = v12 & 0xF240;
LABEL_26:
    __int16 v13 = v11 | 4;
    goto LABEL_27;
  }
  return result;
}

int sqlite3_blob_open(sqlite3 *a1, const char *zDb, const char *zTable, const char *zColumn, sqlite3_int64 iRow, int flags, sqlite3_blob **ppBlob)
{
  uint64_t v122 = 0;
  if (!ppBlob)
  {
    int v10 = 109157;
LABEL_101:
    return sub_1B0CE1978(v10);
  }
  *ppBlob = 0;
  if (!a1)
  {
    uint64_t v9 = "NULL";
    goto LABEL_99;
  }
  int v8 = *((unsigned __int8 *)a1 + 113);
  if (v8 == 186)
  {
LABEL_6:
    uint64_t v9 = "unopened";
LABEL_99:
    sqlite3_log(21, "API call with %s database connection pointer", v9);
    goto LABEL_100;
  }
  if (v8 != 118)
  {
    if (v8 != 109)
    {
      uint64_t v9 = "invalid";
      goto LABEL_99;
    }
    goto LABEL_6;
  }
  __int16 v11 = (char *)zTable;
  if (!zTable)
  {
LABEL_100:
    int v10 = 109163;
    goto LABEL_101;
  }
  BOOL v86 = flags != 0;
  uint64_t v15 = *((void *)a1 + 3);
  if (v15) {
    xmmword_1EB21CA40(v15);
  }
  int v92 = flags;
  uint64_t v16 = sub_1B0D05DC0((uint64_t)a1, 0x38uLL);
  uint64_t v23 = (sqlite3_blob *)v16;
  if (v16)
  {
    *(void *)(v16 + 48) = 0;
    *(_OWORD *)(v16 + 16) = 0u;
    *(_OWORD *)(v16 + 32) = 0u;
    *(_OWORD *)uint64_t v16 = 0u;
  }
  unsigned int v94 = 0;
  int v24 = 0;
  uint64_t v112 = 0;
  long long v110 = 0u;
  long long v111 = 0u;
  long long v109 = 0u;
  unsigned int v87 = zDb;
  sqlite3_int64 v88 = iRow;
  uint64_t v89 = v11;
  uint64_t v90 = v16;
  while (1)
  {
    uint64_t v108 = 0;
    long long v106 = 0u;
    long long v107 = 0u;
    long long v104 = 0u;
    long long v105 = 0u;
    long long v102 = 0u;
    long long v103 = 0u;
    long long v100 = 0u;
    long long v101 = 0u;
    long long v99 = 0u;
    long long v97 = 0u;
    memset(v98, 0, sizeof(v98));
    long long v96 = 0u;
    long long v113 = 0u;
    long long v114 = 0u;
    long long v115 = 0u;
    long long v116 = 0u;
    long long v117 = 0u;
    long long v118 = 0u;
    long long v119 = 0u;
    long long v120 = 0u;
    uint64_t v121 = 0;
    uint64_t v25 = *((void *)a1 + 43);
    *((void *)a1 + 43) = &v95;
    *(void *)&long long v111 = v25;
    unsigned int v95 = a1;
    if (*((unsigned char *)a1 + 103)) {
      sub_1B0CEF2BC((uint64_t)&v95, "out of memory", v17, (uint64_t)v18, v19, v20, v21, v22, v84);
    }
    if (!v23) {
      goto LABEL_105;
    }
    if (v122) {
      sub_1B0D05C10(a1, v122);
    }
    uint64_t v122 = 0;
    if (!*((unsigned char *)a1 + 111)) {
      sub_1B0D0E4C4((uint64_t)a1);
    }
    uint64_t v26 = sub_1B0CB02B4((uint64_t)&v95, 0, v11, zDb, v19, v20, v21, v22);
    if (!v26) {
      goto LABEL_113;
    }
    uint64_t v34 = v26;
    int v35 = *(unsigned __int8 *)(v26 + 63);
    if (v35 == 1)
    {
      uint64_t v78 = "cannot open virtual table: %s";
      goto LABEL_112;
    }
    if ((*(unsigned char *)(v26 + 48) & 0x80) != 0)
    {
      uint64_t v78 = "cannot open table without rowid: %s";
      goto LABEL_112;
    }
    if (v35 == 2)
    {
      uint64_t v78 = "cannot open view: %s";
LABEL_112:
      sub_1B0CEF2BC((uint64_t)&v95, v78, v28, v29, v30, v31, v32, v33, (char)v11);
LABEL_113:
      if ((void)v96)
      {
        uint64_t v122 = (void *)v96;
        *(void *)&long long v96 = 0;
      }
      if (!*((unsigned char *)a1 + 111)) {
        sub_1B0D0E55C((uint64_t)a1);
      }
      unsigned int v74 = 1;
      goto LABEL_123;
    }
    *((void *)v23 + 6) = v26;
    uint64_t v36 = *((void *)a1 + 4);
    uint64_t v37 = *(void *)(v26 + 96);
    if (v37)
    {
      int v38 = (uint64_t *)(v36 + 24);
      int v39 = -1;
      __int16 v40 = zColumn;
      do
      {
        uint64_t v41 = *v38;
        v38 += 4;
        ++v39;
      }
      while (v41 != v37);
    }
    else
    {
      int v39 = -32768;
      __int16 v40 = zColumn;
    }
    *((void *)v23 + 5) = *(void *)(v36 + 32 * v39);
    uint64_t v42 = *(__int16 *)(v26 + 54);
    if ((int)v42 >= 1)
    {
      uint64_t v43 = 0;
      while (1)
      {
        uint64_t v44 = *(unsigned char **)(*(void *)(v26 + 8) + 16 * v43);
        for (int i = v40; ; ++i)
        {
          uint64_t v46 = *v44;
          uint64_t v47 = *(unsigned __int8 *)i;
          if (v46 != v47) {
            break;
          }
          if (!*v44) {
            goto LABEL_42;
          }
LABEL_35:
          ++v44;
        }
        if (byte_1B0DE1758[v46] == byte_1B0DE1758[v47]) {
          goto LABEL_35;
        }
        if (++v43 == v42) {
          goto LABEL_108;
        }
      }
    }
    LODWORD(v43) = 0;
LABEL_42:
    if (v43 == v42)
    {
LABEL_108:
      uint64_t v77 = sub_1B0C904AC((uint64_t)a1, "no such column: \"%s\"", v28, v29, v30, v31, v32, v33, (char)v40);
      goto LABEL_120;
    }
    unsigned int v93 = v24;
    if (v92)
    {
      if ((*((unsigned char *)a1 + 49) & 0x40) != 0 && (uint64_t v48 = *(void *)(v26 + 72)) != 0)
      {
        uint64_t v49 = 0;
        do
        {
          uint64_t v50 = *(unsigned int *)(v48 + 40);
          if ((int)v50 >= 1)
          {
            uint64_t v51 = (int *)(v48 + 64);
            do
            {
              int v52 = *v51;
              v51 += 4;
              if (v52 == v43) {
                uint64_t v49 = "foreign key";
              }
              --v50;
            }
            while (v50);
          }
          uint64_t v48 = *(void *)(v48 + 8);
        }
        while (v48);
      }
      else
      {
        uint64_t v49 = 0;
      }
      for (uint64_t j = *(void *)(v26 + 16); j; uint64_t j = *(void *)(j + 40))
      {
        uint64_t v65 = *(unsigned __int16 *)(j + 94);
        if (*(_WORD *)(j + 94))
        {
          uint64_t v66 = *(__int16 **)(j + 8);
          do
          {
            int v68 = *v66++;
            int v67 = v68;
            if (v43 == v68 || v67 == -2) {
              uint64_t v49 = "indexed";
            }
            --v65;
          }
          while (v65);
        }
      }
      if (v49) {
        break;
      }
    }
    uint64_t v54 = sub_1B0CEF480((uint64_t *)&v95, v27, v28, v29, v30, v31, v32, v33);
    *((void *)v23 + 3) = v54;
    if (!v54) {
      goto LABEL_92;
    }
    int v60 = (uint64_t *)v54;
    uint64_t v61 = *(unsigned int **)(v34 + 96);
    if (v61)
    {
      uint64_t v62 = (unsigned int **)(*((void *)a1 + 4) + 24);
      LODWORD(v63) = -1;
      do
      {
        uint64_t v64 = *v62;
        v62 += 4;
        uint64_t v63 = (v63 + 1);
      }
      while (v64 != v61);
    }
    else
    {
      uint64_t v63 = 4294934528;
    }
    uint64_t v19 = *v61;
    uint64_t v20 = v61[1];
    int v70 = *(_DWORD *)(v54 + 144);
    if (*(_DWORD *)(v54 + 148) <= v70)
    {
      sub_1B0D2575C(v54, 2, v63, v86, v19, v20, v21, v22);
    }
    else
    {
      *(_DWORD *)(v54 + 144) = v70 + 1;
      uint64_t v71 = *(void *)(v54 + 136) + 40 * v70;
      *(_DWORD *)uint64_t v71 = 64770;
      *(_DWORD *)(v71 + 4) = v63;
      *(_DWORD *)(v71 + 8) = v86;
      *(_DWORD *)(v71 + 12) = v19;
      *(_DWORD *)(v71 + 16) = v20;
      *(void *)(v71 + 24) = 0;
      *(void *)(v71 + 32) = 0;
    }
    int v72 = *((_DWORD *)v60 + 36);
    if (v72 >= 1) {
      *(_WORD *)(v60[17] + 40 * (v72 - 1) + 2) = 1;
    }
    if (v72 + 6 > *((_DWORD *)v60 + 37))
    {
      if (sub_1B0D255A4((uint64_t)v60, v55, v56, (uint64_t)v18, v19, v20, v21, v22))
      {
        uint64_t v73 = 0;
        goto LABEL_83;
      }
      int v72 = *((_DWORD *)v60 + 36);
    }
    uint64_t v73 = v60[17] + 40 * v72;
    *(unsigned char *)uint64_t v73 = -87;
    *(void *)(v73 + 9) = 0;
    *(void *)(v73 + 1) = 0;
    *(void *)(v73 + 16) = 0;
    *(unsigned char *)(v73 + 40) = 112;
    *(void *)(v73 + 49) = 0;
    *(void *)(v73 + 41) = 0;
    *(void *)(v73 + 56) = 0;
    *(void *)(v73 + 80) = 31;
    *(_DWORD *)(v73 + 88) = *((_DWORD *)v60 + 36) + 5;
    *(_DWORD *)(v73 + 92) = 1;
    *(void *)(v73 + 96) = 0;
    *(unsigned char *)(v73 + 120) = 94;
    *(_DWORD *)(v73 + 124) = 0;
    *(_DWORD *)(v73 + 128) = 0;
    *(_DWORD *)(v73 + 132) = 1;
    *(unsigned char *)(v73 + 121) = 0;
    *(void *)(v73 + 136) = 0;
    *(_WORD *)(v73 + 122) = 0;
    *(unsigned char *)(v73 + 160) = 84;
    *(_DWORD *)(v73 + 164) = 1;
    *(unsigned char *)(v73 + 161) = 0;
    *(_WORD *)(v73 + 162) = 0;
    *(void *)(v73 + 168) = 0;
    *(void *)(v73 + 176) = 0;
    *(unsigned char *)(v73 + 200) = 70;
    *(void *)(v73 + 216) = 0;
    *(void *)(v73 + 201) = 0;
    *(void *)(v73 + 209) = 0;
    *((_DWORD *)v60 + 36) += 6;
LABEL_83:
    *((_DWORD *)v60 + 68) |= 1 << v63;
    if (v63 != 1 && *(unsigned char *)(*(void *)(*(void *)(*v60 + 32) + 32 * (int)v63 + 8) + 17)) {
      *((_DWORD *)v60 + 69) |= 1 << v63;
    }
    if (!*((unsigned char *)a1 + 103))
    {
      *(_DWORD *)(v73 + 4) = v63;
      *(_DWORD *)(v73 + 8) = *(_DWORD *)(v34 + 40);
      *(_DWORD *)(v73 + 12) = v86;
      if (*(unsigned char *)(*v60 + 103) || (sub_1B0D257F4(v60, v60[17] + 80, *(char **)v34, 0), !*((unsigned char *)a1 + 103)))
      {
        if (v92) {
          *(unsigned char *)(v73 + 40) = 113;
        }
        *(_DWORD *)(v73 + 48) = *(_DWORD *)(v34 + 40);
        *(_DWORD *)(v73 + 52) = v63;
        *(unsigned char *)(v73 + 41) = -3;
        *(_DWORD *)(v73 + 56) = *(__int16 *)(v34 + 54) + 1;
        *(_DWORD *)(v73 + 128) = *(__int16 *)(v34 + 54);
        LODWORD(v114) = 0;
        *(void *)&v98[3] = 0x100000001;
        *(double *)v57.i64 = sub_1B0C8A974((uint64_t)v60, (uint64_t)&v95);
      }
    }
LABEL_92:
    uint64_t v23 = (sqlite3_blob *)v90;
    *(_WORD *)(v90 + 8) = v43;
    *(void *)(v90 + 32) = a1;
    if (!*((unsigned char *)a1 + 111)) {
      sub_1B0D0E55C((uint64_t)a1);
    }
    unsigned int v74 = v93;
    __int16 v11 = v89;
    if (*((unsigned char *)a1 + 103)
      || (v75 = sub_1B0CEF694(v90, v88, &v122, v18, v19, v20, v21, v22, v57, v58, v59), unsigned int v74 = v75, v94 > 0x30)
      || v75 != 17)
    {
      if (v74) {
        goto LABEL_123;
      }
LABEL_105:
      if (*((unsigned char *)a1 + 103))
      {
        unsigned int v74 = 0;
        if (v23) {
          goto LABEL_123;
        }
      }
      else
      {
        unsigned int v74 = 0;
        *ppBlob = v23;
      }
      goto LABEL_128;
    }
    ++v94;
    sub_1B0CEF890(&v95);
    int v24 = 17;
    zDb = v87;
  }
  uint64_t v77 = sub_1B0C904AC((uint64_t)a1, "cannot open %s column for writing", v28, v29, v30, v31, v32, v33, (char)v49);
LABEL_120:
  uint64_t v122 = v77;
  if (!*((unsigned char *)a1 + 111)) {
    sub_1B0D0E55C((uint64_t)a1);
  }
  unsigned int v74 = 1;
LABEL_123:
  uint64_t v79 = *((void *)v23 + 3);
  if (v79)
  {
    if (*(unsigned char *)(v79 + 267)) {
      sub_1B0C8B140(*((void ***)v23 + 3));
    }
    sub_1B0CE20DC(v79);
  }
  sub_1B0D05C10(a1, v23);
LABEL_128:
  uint64_t v80 = v122;
  if (v122) {
    uint64_t v81 = "%s";
  }
  else {
    uint64_t v81 = 0;
  }
  sub_1B0CE79F4((uint64_t)a1, v74, v81, (uint64_t)v18, v19, v20, v21, v22, (char)v122);
  if (v80) {
    sub_1B0D05C10(a1, v80);
  }
  sub_1B0CEF890(&v95);
  if (v74 || *((unsigned char *)a1 + 103)) {
    int v82 = sub_1B0D1806C((uint64_t)a1, v74);
  }
  else {
    int v82 = 0;
  }
  uint64_t v83 = *((void *)a1 + 3);
  if (v83) {
    xmmword_1EB21CA50(v83);
  }
  return v82;
}

void sub_1B0CEF2BC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *(void *)a1;
  *(_DWORD *)(v10 + 84) = -2;
  uint64_t v16 = v10;
  uint64_t v20 = 0;
  int v11 = *(_DWORD *)(v10 + 136);
  uint64_t v17 = &v21;
  int v18 = 512;
  int v19 = v11;
  WORD2(v20) = 256;
  sqlite3_str_vappendf((sqlite3_str *)&v16, a2, &a9);
  if (v17 && (v17[v20] = 0, v19) && (v20 & 0x40000000000) == 0) {
    __int16 v12 = sub_1B0D06044(&v16);
  }
  else {
    __int16 v12 = v17;
  }
  if (BYTE4(v20) == 7 && !*(unsigned char *)(v10 + 103) && !*(unsigned char *)(v10 + 104))
  {
    *(unsigned char *)(v10 + 103) = 1;
    if (*(int *)(v10 + 220) >= 1) {
      *(_DWORD *)(v10 + 424) = 1;
    }
    ++*(_DWORD *)(v10 + 432);
    *(_WORD *)(v10 + 436) = 0;
    uint64_t v14 = *(void *)(v10 + 344);
    if (v14)
    {
      sub_1B0CEF2BC(v14, "out of memory");
      for (uint64_t i = *(void *)(v10 + 344); ; ++*(_DWORD *)(i + 48))
      {
        *(_DWORD *)(i + 24) = 7;
        uint64_t i = *(void *)(i + 256);
        if (!i) {
          break;
        }
      }
    }
  }
  if (*(int *)(v10 + 84) <= -2) {
    *(_DWORD *)(v10 + 84) = -1;
  }
  if (*(unsigned char *)(v10 + 107))
  {
    if (v12) {
      sub_1B0D05C10((void *)v10, v12);
    }
    if (*(unsigned char *)(v10 + 103))
    {
      ++*(_DWORD *)(a1 + 48);
      *(_DWORD *)(a1 + 24) = 7;
    }
  }
  else
  {
    ++*(_DWORD *)(a1 + 48);
    __int16 v13 = *(void **)(a1 + 8);
    if (v13) {
      sub_1B0D05C10((void *)v10, v13);
    }
    *(void *)(a1 + 8) = v12;
    *(_DWORD *)(a1 + 24) = 1;
    *(void *)(a1 + 400) = 0;
  }
}

uint64_t sub_1B0CEF480(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *a1;
  if (*(unsigned __int16 *)(*a1 + 436) <= 0x197u)
  {
    if (*(_DWORD *)(v9 + 432))
    {
      if (*(unsigned char *)(v9 + 103)) {
        return 0;
      }
    }
    else
    {
      ++*(_DWORD *)(v9 + 452);
    }
    goto LABEL_12;
  }
  uint64_t v10 = *(void *)(v9 + 472);
  if (v10)
  {
    int v11 = (void *)(v9 + 472);
  }
  else
  {
    uint64_t v10 = *(void *)(v9 + 464);
    if (!v10)
    {
      ++*(_DWORD *)(v9 + 456);
LABEL_12:
      uint64_t v10 = sub_1B0D05FA0(v9, 408);
      if (!v10) {
        return v10;
      }
      goto LABEL_13;
    }
    int v11 = (void *)(v9 + 464);
  }
  *int v11 = *(void *)v10;
  ++*(_DWORD *)(v9 + 448);
LABEL_13:
  *(_OWORD *)(v10 + 248) = 0u;
  *(_OWORD *)(v10 + 232) = 0u;
  *(_OWORD *)(v10 + 216) = 0u;
  *(_OWORD *)(v10 + 200) = 0u;
  *(_OWORD *)(v10 + 184) = 0u;
  *(_OWORD *)(v10 + 168) = 0u;
  *(_OWORD *)(v10 + 152) = 0u;
  *(_OWORD *)(v10 + 136) = 0u;
  *(_OWORD *)(v10 + 376) = 0u;
  *(_OWORD *)(v10 + 392) = 0u;
  *(_OWORD *)(v10 + 344) = 0u;
  *(_OWORD *)(v10 + 360) = 0u;
  *(_OWORD *)(v10 + 312) = 0u;
  *(_OWORD *)(v10 + 328) = 0u;
  *(_OWORD *)(v10 + 280) = 0u;
  *(_OWORD *)(v10 + 296) = 0u;
  *(_OWORD *)(v10 + 264) = 0u;
  *(void *)uint64_t v10 = v9;
  uint64_t v14 = *(void *)(v9 + 8);
  __int16 v13 = (uint64_t *)(v9 + 8);
  uint64_t v12 = v14;
  if (v14) {
    *(void *)(v12 + 8) = v10 + 16;
  }
  *(void *)(v10 + 8) = v13;
  *(void *)(v10 + 16) = v12;
  *__int16 v13 = v10;
  *(void *)(v10 + 24) = a1;
  a1[2] = v10;
  int v15 = *(_DWORD *)(v10 + 144);
  if (*(_DWORD *)(v10 + 148) <= v15)
  {
    sub_1B0D25510(v10, 8, 0, 1, 0, a6, a7, a8);
  }
  else
  {
    *(_DWORD *)(v10 + 144) = v15 + 1;
    uint64_t v16 = *(void *)(v10 + 136) + 40 * v15;
    *(_DWORD *)uint64_t v16 = 8;
    *(void *)(v16 + 4) = 0x100000000;
    *(void *)(v16 + 12) = 0;
    *(void *)(v16 + 28) = 0;
    *(void *)(v16 + 20) = 0;
    *(_DWORD *)(v16 + 36) = 0;
  }
  return v10;
}

uint64_t sub_1B0CEF5FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = *(int *)(a1 + 144);
  if (*(_DWORD *)(a1 + 148) <= (int)result) {
    return sub_1B0D2575C(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_DWORD *)(a1 + 144) = result + 1;
  uint64_t v10 = *(void *)(a1 + 136) + 40 * (int)result;
  *(unsigned char *)uint64_t v10 = a2;
  *(_WORD *)(v10 + 2) = 0;
  *(_DWORD *)(v10 + 4) = a3;
  *(_DWORD *)(v10 + 8) = a4;
  *(_DWORD *)(v10 + 12) = a5;
  *(_DWORD *)(v10 + 16) = a6;
  *(unsigned char *)(v10 + 1) = -3;
  *(void *)(v10 + 24) = 0;
  *(void *)(v10 + 32) = 0;
  return result;
}

_DWORD *sub_1B0CEF64C(_DWORD *result, int a2)
{
  result[68] |= 1 << a2;
  if (a2 != 1)
  {
    if (*(unsigned char *)(*(void *)(*(void *)(*(void *)result + 32) + 32 * a2 + 8) + 17)) {
      result[69] |= 1 << a2;
    }
  }
  return result;
}

uint64_t sub_1B0CEF694(uint64_t a1, uint64_t a2, void *a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int64x2_t a9, double a10, int64x2_t a11)
{
  char v12 = a2;
  uint64_t v14 = *(void *)(a1 + 24);
  uint64_t v15 = *(void *)(v14 + 104);
  if ((*(_WORD *)(v15 + 84) & 0x9000) != 0)
  {
    sub_1B0D18980(v15 + 64, a2);
  }
  else
  {
    *(void *)(v15 + 64) = a2;
    *(_WORD *)(v15 + 84) = 4;
  }
  if (*(int *)(v14 + 48) < 5)
  {
    uint64_t v16 = sqlite3_step(*(sqlite3_stmt **)(a1 + 24));
  }
  else
  {
    *(_DWORD *)(v14 + 48) = 4;
    uint64_t v16 = sub_1B0CA1F80((uint64_t *)v14, a9, a10, a11, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  uint64_t v23 = v16;
  if (v16 == 100)
  {
    uint64_t v24 = **(void **)(v14 + 120);
    uint64_t v25 = *(unsigned __int16 *)(a1 + 8);
    if (*(unsigned __int16 *)(v24 + 66) <= v25)
    {
      uint64_t v27 = *(void *)(a1 + 32);
      goto LABEL_17;
    }
    unsigned int v26 = *(_DWORD *)(v24 + 4 * v25 + 112);
    if (v26 <= 0xB)
    {
      uint64_t v27 = *(void *)(a1 + 32);
      if (v26 == 7)
      {
        uint64_t v28 = "real";
        goto LABEL_18;
      }
      if (v26)
      {
        uint64_t v28 = "integer";
LABEL_18:
        uint64_t v45 = sub_1B0C904AC(v27, "cannot open value of type %s", v17, v18, v19, v20, v21, v22, (char)v28);
        sqlite3_finalize(*(sqlite3_stmt **)(a1 + 24));
        *(void *)(a1 + 24) = 0;
        uint64_t v23 = 1;
        goto LABEL_25;
      }
LABEL_17:
      uint64_t v28 = "null";
      goto LABEL_18;
    }
    *(_DWORD *)(a1 + 4) = *(_DWORD *)(v24 + 4 * (*(__int16 *)(v24 + 64) + v25) + 112);
    if (v26 < 0x80) {
      unsigned int v46 = byte_1B0DE2184[v26];
    }
    else {
      unsigned int v46 = (v26 - 12) >> 1;
    }
    uint64_t v23 = 0;
    uint64_t v45 = 0;
    *(_DWORD *)a1 = v46;
    uint64_t v47 = *(void *)(v24 + 40);
    *(void *)(a1 + 16) = v47;
    *(unsigned char *)(v47 + 1) |= 0x10u;
    *(unsigned char *)(*(void *)(v47 + 8) + 19) = 1;
  }
  else
  {
    uint64_t v29 = *(sqlite3_stmt **)(a1 + 24);
    if (v29)
    {
      uint64_t v30 = sqlite3_finalize(v29);
      *(void *)(a1 + 24) = 0;
      uint64_t v37 = *(sqlite3 **)(a1 + 32);
      if (v30)
      {
        uint64_t v23 = v30;
        char v38 = sqlite3_errmsg(v37);
        uint64_t v45 = sub_1B0C904AC((uint64_t)v37, "%s", v39, v40, v41, v42, v43, v44, v38);
      }
      else
      {
        uint64_t v45 = sub_1B0C904AC((uint64_t)v37, "no such rowid: %lld", v31, v32, v33, v34, v35, v36, v12);
        uint64_t v23 = 1;
      }
    }
    else
    {
      uint64_t v45 = 0;
    }
  }
LABEL_25:
  *a3 = v45;
  return v23;
}

void *sub_1B0CEF890(void *result)
{
  uint64_t v1 = result;
  __int16 v2 = (void *)*result;
  uint64_t v3 = (void *)result[19];
  if (!v3) {
    goto LABEL_5;
  }
  int v4 = (void *)*result;
  while (1)
  {
    uint64_t result = sub_1B0D15C20(v4, v3);
LABEL_5:
    uint64_t v6 = v1[24];
    if (!v6) {
      break;
    }
    uint64_t v5 = *(void *)(v6 + 8);
    v1[24] = *(void *)v6;
    (*(void (**)(void *, uint64_t))(v6 + 16))(v2, v5);
    int v4 = v2;
    uint64_t v3 = (void *)v6;
  }
  unint64_t v7 = (void *)v1[10];
  if (v7) {
    uint64_t result = sub_1B0D15C20(v2, v7);
  }
  int v8 = (void *)v1[11];
  if (v8) {
    uint64_t result = sub_1B0D270DC(v2, v8);
  }
  int v9 = *((_DWORD *)v2 + 108) - *((unsigned __int8 *)v1 + 36);
  *((_DWORD *)v2 + 108) = v9;
  if (v9) {
    __int16 v10 = 0;
  }
  else {
    __int16 v10 = *((_WORD *)v2 + 219);
  }
  *((_WORD *)v2 + 218) = v10;
  v2[43] = v1[32];
  *uint64_t v1 = 0;
  *((unsigned char *)v1 + 36) = 0;
  return result;
}

int sqlite3_blob_close(sqlite3_blob *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    __int16 v2 = (sqlite3_stmt *)*((void *)a1 + 3);
    uint64_t v3 = (void *)*((void *)a1 + 4);
    uint64_t v4 = v3[3];
    if (v4) {
      xmmword_1EB21CA40(v4);
    }
    sub_1B0D05C10(v3, v1);
    uint64_t v5 = v3[3];
    if (v5) {
      xmmword_1EB21CA50(v5);
    }
    LODWORD(a1) = sqlite3_finalize(v2);
  }
  return (int)a1;
}

int sqlite3_blob_read(sqlite3_blob *a1, void *Z, int N, int iOffset)
{
  return sub_1B0CEF9D8((int *)a1, (char *)Z, *(uint64_t *)&N, iOffset, sub_1B0CEFBDC);
}

uint64_t sub_1B0CEF9D8(int *a1, char *a2, uint64_t a3, unsigned int a4, uint64_t (*a5)(unsigned __int8 *a1, unsigned int a2, unsigned int a3, char *a4))
{
  if (a1)
  {
    uint64_t v11 = *((void *)a1 + 4);
    uint64_t v12 = *(void *)(v11 + 24);
    if (v12) {
      xmmword_1EB21CA40(v12);
    }
    unsigned int v13 = 1;
    if (((a4 | a3) & 0x80000000) == 0 && a2 && (uint64_t)(a4 + (unint64_t)a3) <= *a1)
    {
      uint64_t v14 = *((void *)a1 + 3);
      if (v14)
      {
        uint64_t v15 = *(void *)(*((void *)a1 + 2) + 8);
        if (*(unsigned char *)(v15 + 17))
        {
          ++*(_DWORD *)(v15 + 20);
          if (!*(unsigned char *)(v15 + 18)) {
            sub_1B0D12478(v15);
          }
        }
        if (a5 == sub_1B0CEFC04 && *(void *)(v11 + 360))
        {
          uint64_t v16 = *((void *)a1 + 2);
          sub_1B0D146DC(v16);
          sub_1B0D1B400((uint64_t *)v14, **(void **)(v14 + 120), 9, *((void *)a1 + 5), *((void *)a1 + 6), *(void *)(v16 + 48), 0xFFFFFFFF, *((unsigned __int16 *)a1 + 4));
        }
        unsigned int v13 = a5(*((unsigned __int8 **)a1 + 2), a1[1] + a4, a3, a2);
        uint64_t v17 = *(void *)(*((void *)a1 + 2) + 8);
        if (*(unsigned char *)(v17 + 17))
        {
          int v18 = *(_DWORD *)(v17 + 20) - 1;
          *(_DWORD *)(v17 + 20) = v18;
          if (!v18) {
            sub_1B0D12558(v17);
          }
        }
        if (v13 != 4)
        {
          *(_DWORD *)(v14 + 52) = v13;
          *(_DWORD *)(v11 + 80) = v13;
          if (!v13)
          {
            if (!*(void *)(v11 + 416))
            {
              unsigned int v13 = 0;
              *(_DWORD *)(v11 + 84) = -1;
LABEL_24:
              if (!*(unsigned char *)(v11 + 103))
              {
                uint64_t v19 = 0;
                uint64_t v20 = *(void *)(v11 + 24);
                if (!v20) {
                  return v19;
                }
                goto LABEL_35;
              }
LABEL_34:
              uint64_t v19 = sub_1B0D1806C(v11, v13);
              uint64_t v20 = *(void *)(v11 + 24);
              if (!v20) {
                return v19;
              }
LABEL_35:
              xmmword_1EB21CA50(v20);
              return v19;
            }
            unsigned int v13 = 0;
          }
LABEL_23:
          sub_1B0D0E714(v11, v13);
          if (v13) {
            goto LABEL_34;
          }
          goto LABEL_24;
        }
        if (*(unsigned char *)(v14 + 267)) {
          sub_1B0C8B140((void **)v14);
        }
        sub_1B0CE20DC(v14);
        *((void *)a1 + 3) = 0;
      }
      unsigned int v13 = 4;
    }
    *(_DWORD *)(v11 + 80) = v13;
    goto LABEL_23;
  }
  return sub_1B0CE1978(109406);
}

uint64_t sub_1B0CEFBDC(unsigned char *a1, unsigned int a2, unsigned int a3, char *a4)
{
  if (*a1) {
    return sub_1B0D25ACC(a1, a2, a3, a4);
  }
  else {
    return sub_1B0CD1CD0((uint64_t)a1, a2, a3, a4, 0);
  }
}

int sqlite3_blob_write(sqlite3_blob *a1, const void *z, int n, int iOffset)
{
  return sub_1B0CEF9D8((int *)a1, (char *)z, *(uint64_t *)&n, iOffset, sub_1B0CEFC04);
}

uint64_t sub_1B0CEFC04(unsigned __int8 *a1, unsigned int a2, unsigned int a3, char *a4)
{
  unsigned int v8 = *a1;
  if (v8 >= 3)
  {
    uint64_t result = sub_1B0D1DAC8((uint64_t)a1);
    if (result) {
      return result;
    }
    unsigned int v8 = *a1;
  }
  if (v8) {
    return 4;
  }
  uint64_t v10 = *(void *)(*((void *)a1 + 4) + 16);
  if (v10)
  {
    int v11 = *((_DWORD *)a1 + 20);
    while ((unsigned __int8 *)v10 == a1 || v11 && *(_DWORD *)(v10 + 80) != v11)
    {
      uint64_t v10 = *(void *)(v10 + 40);
      if (!v10) {
        goto LABEL_16;
      }
    }
    sub_1B0D143DC((unsigned __int8 *)v10, v11, a1);
    if (a1[1]) {
      goto LABEL_13;
    }
    return 8;
  }
LABEL_16:
  unsigned __int8 v12 = a1[1] & 0xDF;
  a1[1] = v12;
  if ((v12 & 1) == 0) {
    return 8;
  }
LABEL_13:

  return sub_1B0CD1CD0((uint64_t)a1, a2, a3, a4, 1);
}

int sqlite3_blob_bytes(sqlite3_blob *a1)
{
  if (a1)
  {
    if (*((void *)a1 + 3)) {
      LODWORD(a1) = *(_DWORD *)a1;
    }
    else {
      LODWORD(a1) = 0;
    }
  }
  return (int)a1;
}

int sqlite3_blob_reopen(sqlite3_blob *a1, sqlite3_int64 a2)
{
  if (a1)
  {
    uint64_t v13 = *((void *)a1 + 4);
    uint64_t v14 = *(void *)(v13 + 24);
    if (v14) {
      xmmword_1EB21CA40(v14);
    }
    uint64_t v15 = *((void *)a1 + 3);
    if (v15)
    {
      uint64_t v27 = 0;
      *(_DWORD *)(v15 + 52) = 0;
      unsigned int v21 = sub_1B0CEF694((uint64_t)a1, a2, &v27, v2, v3, v4, v5, v6, v8, v9, v10);
      if (v21)
      {
        uint64_t v22 = v27;
        if (v27) {
          uint64_t v23 = "%s";
        }
        else {
          uint64_t v23 = 0;
        }
        sub_1B0CE79F4(v13, v21, v23, v16, v17, v18, v19, v20, (char)v27);
        if (v22) {
          sub_1B0D05C10((void *)v13, v22);
        }
      }
      else
      {
        int v25 = 0;
        if (!*(unsigned char *)(v13 + 103))
        {
LABEL_17:
          uint64_t v26 = *(void *)(v13 + 24);
          if (v26) {
            xmmword_1EB21CA50(v26);
          }
          return v25;
        }
      }
    }
    else
    {
      unsigned int v21 = 4;
    }
    int v25 = sub_1B0D1806C(v13, v21);
    goto LABEL_17;
  }
  return sub_1B0CE1978(109506);
}

int sqlite3_strglob(const char *zGlob, const char *zStr)
{
  if (!zStr) {
    return zGlob != 0;
  }
  if (zGlob) {
    return sub_1B0CD1228((unsigned __int8 *)zGlob, zStr, byte_1B0DE1965, 91);
  }
  return 1;
}

int sqlite3_strlike(const char *zGlob, const char *zStr, unsigned int cEsc)
{
  if (!zStr) {
    return zGlob != 0;
  }
  if (zGlob) {
    return sub_1B0CD1228((unsigned __int8 *)zGlob, zStr, byte_1B0DE1969, *(uint64_t *)&cEsc);
  }
  return 1;
}

const char *__cdecl sqlite3_errmsg(sqlite3 *a1)
{
  if (!a1) {
    return "out of memory";
  }
  int v2 = *((unsigned __int8 *)a1 + 113);
  if (v2 != 109 && v2 != 118 && v2 != 186)
  {
    sqlite3_log(21, "API call with %s database connection pointer", "invalid");
    return "bad parameter or other API misuse";
  }
  uint64_t v3 = *((void *)a1 + 3);
  if (v3) {
    xmmword_1EB21CA40(v3);
  }
  if (*((unsigned char *)a1 + 103))
  {
    uint64_t v4 = "out of memory";
    goto LABEL_9;
  }
  int v6 = *((_DWORD *)a1 + 20);
  if (v6)
  {
    uint64_t v7 = *((void *)a1 + 52);
    if (!v7) {
      goto LABEL_23;
    }
    int v8 = *(unsigned __int16 *)(v7 + 20);
    if ((~v8 & 0x202) != 0 || *(unsigned char *)(v7 + 22) != 1)
    {
      if (v8) {
        goto LABEL_23;
      }
      uint64_t v4 = (const char *)sub_1B0D18254((int *)v7, 1);
    }
    else
    {
      uint64_t v4 = *(const char **)(v7 + 8);
    }
    if (v4) {
      goto LABEL_9;
    }
    int v6 = *((_DWORD *)a1 + 20);
LABEL_23:
    switch(v6)
    {
      case 516:
        uint64_t v4 = "abort due to ROLLBACK";
        goto LABEL_9;
      case 101:
        uint64_t v4 = "no more rows available";
        goto LABEL_9;
      case 100:
        uint64_t v4 = "another row available";
        goto LABEL_9;
    }
    int v6 = v6;
    if (v6 > 0x1Cu) {
      goto LABEL_32;
    }
  }
  if (((0x1410004uLL >> v6) & 1) == 0)
  {
    uint64_t v4 = off_1E5FF0368[v6];
    goto LABEL_9;
  }
LABEL_32:
  uint64_t v4 = "unknown error";
LABEL_9:
  uint64_t v5 = *((void *)a1 + 3);
  if (v5) {
    xmmword_1EB21CA50(v5);
  }
  return v4;
}

uint64_t sqlite3_exec_b(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v25 = 0;
  if (!a1)
  {
    int64x2_t v10 = "NULL";
    goto LABEL_15;
  }
  int v9 = *(unsigned __int8 *)(a1 + 113);
  if (v9 != 186)
  {
    if (v9 != 118)
    {
      if (v9 != 109)
      {
        int64x2_t v10 = "invalid";
        goto LABEL_15;
      }
      goto LABEL_5;
    }
    if (a2) {
      unsigned __int8 v12 = a2;
    }
    else {
      unsigned __int8 v12 = (unsigned __int8 *)&byte_1B0DE9952;
    }
    uint64_t v13 = *(void *)(a1 + 24);
    if (v13) {
      xmmword_1EB21CA40(v13);
    }
    *(_DWORD *)(a1 + 80) = 0;
    if (*(void *)(a1 + 416)) {
      sub_1B0D0E714(a1, 0);
    }
    else {
      *(_DWORD *)(a1 + 84) = -1;
    }
    uint64_t v26 = 0;
    while (1)
    {
      if (!*v12)
      {
        unsigned int v16 = 0;
        goto LABEL_40;
      }
      int v25 = 0;
      unsigned int v15 = sub_1B0C7EAC0(a1, v12, 0xFFFFFFFFLL, 128, 0, &v25, &v26, a8);
      if (v15)
      {
        unsigned int v16 = v15;
        goto LABEL_40;
      }
      if (v25) {
        break;
      }
      unsigned int v16 = 0;
      unsigned __int8 v12 = v26;
LABEL_20:
      if (v16) {
        goto LABEL_40;
      }
    }
    while (1)
    {
      int v17 = sqlite3_step(v25);
      int v18 = v17;
      if (a3)
      {
        if (v17 != 100 && (v17 != 101 || (*(unsigned char *)(a1 + 49) & 1) == 0))
        {
LABEL_31:
          uint64_t v19 = v25;
          if (*((unsigned char *)v25 + 267)) {
            unsigned int v16 = sub_1B0C8B140((void **)v25);
          }
          else {
            unsigned int v16 = 0;
          }
          sub_1B0CE20DC((uint64_t)v19);
          int v25 = 0;
          unsigned __int8 v12 = v26 - 1;
          do
            int v20 = *++v12;
          while ((byte_1B0DE196D[v20] & 1) != 0);
          goto LABEL_20;
        }
        if ((*(unsigned int (**)(uint64_t, sqlite3_stmt *))(a3 + 16))(a3, v25)) {
          break;
        }
      }
      if (v18 != 100) {
        goto LABEL_31;
      }
    }
    unsigned int v21 = v25;
    if (*((unsigned char *)v25 + 267)) {
      sub_1B0C8B140((void **)v25);
    }
    sub_1B0CE20DC((uint64_t)v21);
    int v25 = 0;
    unsigned int v16 = 4;
    *(_DWORD *)(a1 + 80) = 4;
    sub_1B0D0E714(a1, 4);
LABEL_40:
    uint64_t v22 = v25;
    if (v25)
    {
      if (*((unsigned char *)v25 + 267)) {
        sub_1B0C8B140((void **)v25);
      }
      sub_1B0CE20DC((uint64_t)v22);
    }
    if (v16 || *(unsigned char *)(a1 + 103))
    {
      uint64_t v23 = sub_1B0D1806C(a1, v16);
      uint64_t v24 = *(void *)(a1 + 24);
      if (!v24) {
        return v23;
      }
    }
    else
    {
      uint64_t v23 = 0;
      uint64_t v24 = *(void *)(a1 + 24);
      if (!v24) {
        return v23;
      }
    }
    xmmword_1EB21CA50(v24);
    return v23;
  }
LABEL_5:
  int64x2_t v10 = "unopened";
LABEL_15:
  sqlite3_log(21, "API call with %s database connection pointer", v10);

  return sub_1B0CE1978(142415);
}

int sqlite3_auto_extension(void (*xEntryPoint)(void))
{
  return 21;
}

int sqlite3_cancel_auto_extension(void (*xEntryPoint)(void))
{
  if ((_BYTE)word_1EB21C9C4)
  {
    uint64_t v1 = qword_1EB21CA30(2);
    if (v1)
    {
      uint64_t v2 = v1;
      xmmword_1EB21CA40(v1);
      xmmword_1EB21CA50(v2);
    }
  }
  return 0;
}

void sqlite3_reset_auto_extension(void)
{
  if (!sqlite3_initialize())
  {
    if ((_BYTE)word_1EB21C9C4)
    {
      uint64_t v0 = qword_1EB21CA30(2);
      if (v0)
      {
        uint64_t v1 = v0;
        xmmword_1EB21CA40(v0);
        uint64_t v2 = (void (*)(uint64_t))xmmword_1EB21CA50;
        v2(v1);
      }
    }
  }
}

int sqlite3_prepare(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)
{
  return sub_1B0C7EAC0((uint64_t)db, (unsigned __int8 *)zSql, *(uint64_t *)&nByte, 0, 0, ppStmt, pzTail, v5);
}

int sqlite3_prepare_v3(sqlite3 *db, const char *zSql, int nByte, unsigned int prepFlags, sqlite3_stmt **ppStmt, const char **pzTail)
{
  return sub_1B0C7EAC0((uint64_t)db, (unsigned __int8 *)zSql, *(uint64_t *)&nByte, prepFlags & 0xF | 0x80, 0, ppStmt, pzTail, v6);
}

int sqlite3_prepare16(sqlite3 *db, const void *zSql, int nByte, sqlite3_stmt **ppStmt, const void **pzTail)
{
  return sub_1B0CD4AD0((uint64_t)db, (char *)zSql, nByte, 0, ppStmt, pzTail);
}

int sqlite3_prepare16_v3(sqlite3 *db, const void *zSql, int nByte, unsigned int prepFlags, sqlite3_stmt **ppStmt, const void **pzTail)
{
  return sub_1B0CD4AD0((uint64_t)db, (char *)zSql, nByte, prepFlags & 0xF | 0x80, ppStmt, pzTail);
}

int sqlite3_create_module(sqlite3 *db, const char *zName, const sqlite3_module *p, void *pClientData)
{
  if (!db)
  {
    uint64_t v5 = "NULL";
    goto LABEL_12;
  }
  int v4 = *((unsigned __int8 *)db + 113);
  if (v4 == 186)
  {
LABEL_5:
    uint64_t v5 = "unopened";
LABEL_12:
    sqlite3_log(21, "API call with %s database connection pointer", v5);
    goto LABEL_13;
  }
  if (v4 != 118)
  {
    if (v4 != 109)
    {
      uint64_t v5 = "invalid";
      goto LABEL_12;
    }
    goto LABEL_5;
  }
  if (!zName)
  {
LABEL_13:
    return sub_1B0CE1978(161256);
  }

  return sub_1B0C7E204((uint64_t)db, (char *)zName, (uint64_t)p, (uint64_t)pClientData, 0);
}

int sqlite3_create_module_v2(sqlite3 *db, const char *zName, const sqlite3_module *p, void *pClientData, void (__cdecl *xDestroy)(void *))
{
  if (!db)
  {
    uint64_t v6 = "NULL";
    goto LABEL_12;
  }
  int v5 = *((unsigned __int8 *)db + 113);
  if (v5 == 186)
  {
LABEL_5:
    uint64_t v6 = "unopened";
LABEL_12:
    sqlite3_log(21, "API call with %s database connection pointer", v6);
    goto LABEL_13;
  }
  if (v5 != 118)
  {
    if (v5 != 109)
    {
      uint64_t v6 = "invalid";
      goto LABEL_12;
    }
    goto LABEL_5;
  }
  if (!zName)
  {
LABEL_13:
    return sub_1B0CE1978(161272);
  }

  return sub_1B0C7E204((uint64_t)db, (char *)zName, (uint64_t)p, (uint64_t)pClientData, (void (*)(uint64_t))xDestroy);
}

int sqlite3_drop_modules(sqlite3 *db, const char **azKeep)
{
  if (!db)
  {
    int v4 = "NULL";
    goto LABEL_18;
  }
  int v3 = *((unsigned __int8 *)db + 113);
  if (v3 == 186)
  {
LABEL_5:
    int v4 = "unopened";
LABEL_18:
    sqlite3_log(21, "API call with %s database connection pointer", v4);
    return sub_1B0CE1978(161284);
  }
  if (v3 != 118)
  {
    if (v3 != 109)
    {
      int v4 = "invalid";
      goto LABEL_18;
    }
    goto LABEL_5;
  }
  int v5 = (void *)*((void *)db + 72);
  if (v5)
  {
    uint64_t v7 = azKeep + 1;
    do
    {
      uint64_t v8 = v5[2];
      int v5 = (void *)*v5;
      if (azKeep && (int v9 = *azKeep) != 0)
      {
        int64x2_t v10 = *(const char **)(v8 + 8);
        int v11 = v7;
        while (strcmp(v9, v10))
        {
          unsigned __int8 v12 = *v11++;
          int v9 = v12;
          if (!v12) {
            goto LABEL_9;
          }
        }
      }
      else
      {
LABEL_9:
        sub_1B0C7E204((uint64_t)db, *(char **)(v8 + 8), 0, 0, 0);
      }
    }
    while (v5);
  }
  return 0;
}

int sqlite3_declare_vtab(sqlite3 *a1, const char *zSQL)
{
  if (!a1)
  {
    int64x2_t v10 = "NULL";
    goto LABEL_16;
  }
  int v9 = *((unsigned __int8 *)a1 + 113);
  if (v9 == 186)
  {
LABEL_5:
    int64x2_t v10 = "unopened";
LABEL_16:
    sqlite3_log(21, "API call with %s database connection pointer", v10);
    goto LABEL_17;
  }
  if (v9 != 118)
  {
    if (v9 != 109)
    {
      int64x2_t v10 = "invalid";
      goto LABEL_16;
    }
    goto LABEL_5;
  }
  if (!zSQL)
  {
LABEL_17:
    int v15 = 161961;
LABEL_18:
    return sub_1B0CE1978(v15);
  }
  uint64_t v12 = *((void *)a1 + 3);
  if (v12) {
    xmmword_1EB21CA40(v12);
  }
  uint64_t v13 = *((void *)a1 + 74);
  if (!v13 || (v59 = 0, v57 = 0u, v58 = 0u, long long v56 = 0u, *(_DWORD *)(v13 + 24)))
  {
    *((_DWORD *)a1 + 20) = 21;
    sub_1B0D0E714((uint64_t)a1, 21);
    uint64_t v14 = *((void *)a1 + 3);
    if (v14) {
      xmmword_1EB21CA50(v14);
    }
    int v15 = 161969;
    goto LABEL_18;
  }
  uint64_t v17 = *(void *)(v13 + 8);
  long long v54 = 0uLL;
  long long v53 = 0uLL;
  long long v52 = 0uLL;
  long long v51 = 0uLL;
  long long v50 = 0uLL;
  long long v49 = 0uLL;
  long long v48 = 0uLL;
  long long v47 = 0uLL;
  long long v46 = 0uLL;
  long long v45 = 0uLL;
  long long v44 = 0uLL;
  long long v43 = 0uLL;
  long long v42 = 0uLL;
  long long v60 = 0uLL;
  long long v61 = 0uLL;
  long long v62 = 0uLL;
  long long v63 = 0uLL;
  long long v64 = 0uLL;
  long long v65 = 0uLL;
  long long v66 = 0uLL;
  long long v67 = 0uLL;
  uint64_t v68 = 0;
  uint64_t v18 = *((void *)a1 + 43);
  uint64_t v55 = 0;
  *(void *)&long long v58 = v18;
  *((void *)a1 + 43) = &v41;
  uint64_t v41 = a1;
  if (*((unsigned char *)a1 + 103)) {
    sub_1B0CEF2BC((uint64_t)&v41, "out of memory", v2, v3, v4, v5, v6, v7, v40);
  }
  BYTE6(v61) = 1;
  BYTE5(v55) = 1;
  char v19 = *((unsigned char *)a1 + 197);
  *((unsigned char *)a1 + 197) = 0;
  LOWORD(v55) = 1;
  if (sub_1B0C7F440((uint64_t)&v41, (unsigned __int8 *)zSQL)
    || (uint64_t v25 = v64) == 0
    || *((unsigned char *)a1 + 103)
    || *(unsigned char *)(v64 + 63))
  {
    if ((void)v42) {
      uint64_t v26 = "%s";
    }
    else {
      uint64_t v26 = 0;
    }
    unsigned int v27 = 1;
    sub_1B0CE79F4((uint64_t)a1, 1, v26, v20, v21, v22, v23, v24, v42);
    if ((void)v42) {
      sub_1B0D05C10(a1, (void *)v42);
    }
  }
  else
  {
    if (*(void *)(v17 + 8))
    {
      unsigned int v27 = 0;
    }
    else
    {
      *(void *)(v17 + 8) = *(void *)(v64 + 8);
      uint64_t v34 = *(void **)(v25 + 80);
      if (v34) {
        sub_1B0D270DC(a1, v34);
      }
      unsigned int v27 = 0;
      __int16 v35 = *(_WORD *)(v25 + 54);
      *(_WORD *)(v17 + 54) = v35;
      *(_WORD *)(v17 + 56) = v35;
      *(_DWORD *)(v17 + 48) |= *(_DWORD *)(v25 + 48) & 0x280;
      *(_WORD *)(v25 + 54) = 0;
      *(void *)(v25 + 8) = 0;
      if ((*(unsigned char *)(v25 + 48) & 0x80) != 0)
      {
        if (*(void *)(**(void **)(*(void *)v13 + 8) + 104))
        {
          uint64_t v36 = v25 + 16;
          do
          {
            uint64_t v37 = *(void *)v36;
            int v38 = *(_WORD *)(*(void *)v36 + 99) & 3;
            uint64_t v36 = *(void *)v36 + 40;
          }
          while (v38 != 2);
          unsigned int v27 = *(unsigned __int16 *)(v37 + 94) != 1;
        }
        else
        {
          unsigned int v27 = 0;
        }
      }
      uint64_t v39 = *(void *)(v25 + 16);
      if (v39)
      {
        *(void *)(v17 + 16) = v39;
        *(void *)(v25 + 16) = 0;
        *(void *)(v39 + 24) = v17;
      }
    }
    *(_DWORD *)(v13 + 24) = 1;
  }
  BYTE6(v61) = 0;
  uint64_t v28 = *((void *)&v42 + 1);
  if (*((void *)&v42 + 1))
  {
    if (*(unsigned char *)(*((void *)&v42 + 1) + 267)) {
      sub_1B0C8B140(*((void ***)&v42 + 1));
    }
    sub_1B0CE20DC(v28);
  }
  uint64_t v29 = (void *)v64;
  if ((void)v64)
  {
    if (*((void *)a1 + 102) || (int v30 = *(_DWORD *)(v64 + 44) - 1, (*(_DWORD *)(v64 + 44) = v30) == 0)) {
      sub_1B0D26BF8(a1, v29);
    }
  }
  sub_1B0CEF890(&v41);
  *((unsigned char *)a1 + 197) = v19;
  if (v27) {
    BOOL v31 = 0;
  }
  else {
    BOOL v31 = *((unsigned char *)a1 + 103) == 0;
  }
  if (v31) {
    int v32 = 0;
  }
  else {
    int v32 = sub_1B0D1806C((uint64_t)a1, v27);
  }
  uint64_t v33 = *((void *)a1 + 3);
  if (v33) {
    xmmword_1EB21CA50(v33);
  }
  return v32;
}

int sqlite3_vtab_on_conflict(sqlite3 *a1)
{
  if (!a1)
  {
    uint64_t v2 = "NULL";
    goto LABEL_10;
  }
  int v1 = *((unsigned __int8 *)a1 + 113);
  if (v1 == 186)
  {
LABEL_5:
    uint64_t v2 = "unopened";
LABEL_10:
    sqlite3_log(21, "API call with %s database connection pointer", v2);
    goto LABEL_11;
  }
  if (v1 != 118)
  {
    if (v1 != 109)
    {
      uint64_t v2 = "invalid";
      goto LABEL_10;
    }
    goto LABEL_5;
  }
  int v3 = *((unsigned __int8 *)a1 + 108);
  if ((v3 - 1) < 5) {
    return byte_1B0DE1A6D[v3 - 1];
  }
LABEL_11:
  sub_1B0CE1978(162440);
  return 0;
}

int sqlite3_vtab_config(sqlite3 *a1, int op, ...)
{
  va_start(va, op);
  uint64_t v13 = va_arg(va, void);
  if (!a1)
  {
    uint64_t v4 = "NULL";
    goto LABEL_13;
  }
  int v3 = *((unsigned __int8 *)a1 + 113);
  if (v3 != 186)
  {
    if (v3 != 118)
    {
      if (v3 != 109)
      {
        uint64_t v4 = "invalid";
        goto LABEL_13;
      }
      goto LABEL_5;
    }
    uint64_t v6 = *((void *)a1 + 3);
    if (v6) {
      xmmword_1EB21CA40(v6);
    }
    uint64_t v7 = *((void *)a1 + 74);
    if (v7)
    {
      switch(op)
      {
        case 1:
          *(unsigned char *)(*(void *)v7 + 28) = v13;
          break;
        case 2:
          *(unsigned char *)(*(void *)v7 + 30) = 0;
          break;
        case 3:
          *(unsigned char *)(*(void *)v7 + 30) = 2;
          break;
        case 4:
          *(unsigned char *)(*(void *)v7 + 29) = 1;
          break;
        default:
          int v9 = 162488;
          goto LABEL_18;
      }
      int v10 = 0;
      uint64_t v11 = *((void *)a1 + 3);
      if (!v11) {
        return v10;
      }
    }
    else
    {
      int v9 = 162466;
LABEL_18:
      int v10 = sub_1B0CE1978(v9);
      *((_DWORD *)a1 + 20) = v10;
      sub_1B0D0E714((uint64_t)a1, v10);
      uint64_t v11 = *((void *)a1 + 3);
      if (!v11) {
        return v10;
      }
    }
    xmmword_1EB21CA50(v11);
    return v10;
  }
LABEL_5:
  uint64_t v4 = "unopened";
LABEL_13:
  sqlite3_log(21, "API call with %s database connection pointer", v4);

  return sub_1B0CE1978(162461);
}

const char *sqlite3_vtab_collation(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    sub_1B0CE1978(171867);
    return 0;
  }
  if ((a2 & 0x80000000) != 0 || *(_DWORD *)a1 <= (signed int)a2) {
    return 0;
  }
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 96) + 32) + 56 * *(int *)(*(void *)(a1 + 8) + 12 * a2 + 8));
  if (*(void *)(v8 + 16) && (uint64_t v9 = sub_1B0CF0CA8(*(void *)(a1 + 104), v8, a3, a4, a5, a6, a7, a8)) != 0) {
    return *(const char **)v9;
  }
  else {
    return "BINARY";
  }
}

uint64_t sub_1B0CF0CA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = a1;
  if ((*(unsigned char *)(a2 + 5) & 4) != 0)
  {
    int v10 = *(unsigned __int8 **)(a2 + 24);
    if ((v10[5] & 2) != 0) {
      goto LABEL_12;
    }
    uint64_t v11 = *(unsigned __int8 **)(a2 + 16);
    if (!v11) {
      goto LABEL_8;
    }
  }
  else
  {
    int v10 = *(unsigned __int8 **)(a2 + 16);
    if ((v10[5] & 2) != 0) {
      goto LABEL_12;
    }
    uint64_t v11 = *(unsigned __int8 **)(a2 + 24);
    if (!v11) {
      goto LABEL_8;
    }
  }
  if ((v11[5] & 2) == 0)
  {
LABEL_8:
    uint64_t result = sub_1B0C9ADE0(a1, v10, a3, a4, a5, a6, a7, a8);
    if (result) {
      return result;
    }
  }
  a1 = v9;
  int v10 = v11;
LABEL_12:

  return sub_1B0C9ADE0(a1, v10, a3, a4, a5, a6, a7, a8);
}

int sqlite3_vtab_in(sqlite3_index_info *a1, int iCons, int bHandle)
{
  if (!a1 || iCons < 0)
  {
    sub_1B0CE1978(171894);
    return 0;
  }
  int v3 = 1 << iCons;
  if (iCons >= 0x20) {
    int v3 = 0;
  }
  if ((*(&a1[1].nOrderBy + 1) & v3) == 0) {
    return 0;
  }
  if (!bHandle)
  {
    int v4 = (uint64_t)a1[1].aOrderBy & ~v3;
    goto LABEL_12;
  }
  if (bHandle >= 1)
  {
    int v4 = LODWORD(a1[1].aOrderBy) | v3;
LABEL_12:
    LODWORD(a1[1].aOrderBy) = v4;
  }
  return 1;
}

int sqlite3_vtab_rhs_value(sqlite3_index_info *a1, int a2, sqlite3_value **ppVal)
{
  if (a1)
  {
    if (a2 < 0 || a1->nConstraint <= a2)
    {
      uint64_t v6 = 0;
      int result = 21;
    }
    else
    {
      uint64_t v5 = (char *)a1 + 8 * a2;
      uint64_t v8 = (sqlite3_value *)*((void *)v5 + 16);
      uint64_t v7 = (uint64_t *)(v5 + 128);
      uint64_t v6 = v8;
      if (v8)
      {
        int result = 0;
      }
      else
      {
        uint64_t v11 = *(unsigned __int8 **)(*(void *)(*(void *)(*(void *)&a1[1].nConstraint + 32)
                                              + 56 * a1->aConstraint[a2].iTermOffset)
                                  + 24);
        if (v11)
        {
          int result = sub_1B0D27644(*(void *)a1[1].aConstraint, v11, *(unsigned __int8 *)(*(void *)a1[1].aConstraint + 100), 65, v7);
          uint64_t v6 = (sqlite3_value *)*v7;
        }
        else
        {
          uint64_t v6 = 0;
          int result = 0;
        }
      }
    }
    *ppVal = v6;
    if (v6) {
      BOOL v10 = 0;
    }
    else {
      BOOL v10 = result == 0;
    }
    if (v10) {
      return 12;
    }
  }
  else
  {
    return sub_1B0CE1978(171927);
  }
  return result;
}

int sqlite3_vtab_distinct(sqlite3_index_info *a1)
{
  if (!a1 || (int result = a1[1].nOrderBy, result >= 4))
  {
    sub_1B0CE1978(171963);
    return 0;
  }
  return result;
}

int sqlite3_keyword_name(int a1, const char **a2, int *a3)
{
  if (!a2) {
    return sub_1B0CE1978(183888);
  }
  *a2 = 0;
  if (!a3) {
    return sub_1B0CE1978(183888);
  }
  if (a1 > 0x92) {
    return 1;
  }
  int result = 0;
  uint64_t v5 = a1 + 1;
  *a2 = &aReindexedescap[*(unsigned __int16 *)&aReindexedescap[2 * v5 + 666]];
  *a3 = byte_1B0DE1E34[v5];
  return result;
}

int sqlite3_keyword_count(void)
{
  return 147;
}

int sqlite3_keyword_check(const char *a1, int a2)
{
  if (!a1 || a2 < 0)
  {
    sub_1B0CE1978(183900);
  }
  else if (a2 >= 2)
  {
    unsigned int v2 = ((3 * byte_1B0DE1758[a1[a2 - 1]]) ^ (4 * byte_1B0DE1758[*(unsigned __int8 *)a1]) ^ a2)
       % 0x7F;
    int v3 = byte_1B0DE23E8[v2];
    if (byte_1B0DE23E8[v2])
    {
      do
      {
        if (byte_1B0DE1E34[v3] == a2)
        {
          uint64_t v4 = *(unsigned __int16 *)&aReindexedescap[2 * v3 + 666];
          if ((*a1 & 0xDF) == aReindexedescap[v4]
            && (a1[1] & 0xDF) == aReindexedescap[v4 + 1])
          {
            if (a2 < 3) {
              return 1;
            }
            uint64_t v5 = &aReindexedescap[v4 + 2];
            uint64_t v6 = a1 + 2;
            uint64_t v7 = a2 - 2;
            while (1)
            {
              int v8 = *(unsigned __int8 *)v6++;
              unsigned int v9 = v8 & 0xFFFFFFDF;
              int v10 = *v5++;
              if (v9 != v10) {
                break;
              }
              if (!--v7) {
                return 1;
              }
            }
          }
        }
        int v3 = byte_1B0DE24FB[v3];
      }
      while (v3);
    }
  }
  return 0;
}

int sqlite3_complete(const char *sql)
{
  if (!sql)
  {
    sub_1B0CE1978(184756);
    return 0;
  }
  unsigned __int8 v1 = *sql;
  if (!*sql) {
    return 0;
  }
  unsigned int v2 = 0;
  while (2)
  {
    uint64_t v3 = 0;
    switch(v1)
    {
      case 9u:
      case 0xAu:
      case 0xCu:
      case 0xDu:
      case 0x20u:
        goto LABEL_4;
      case 0x22u:
      case 0x27u:
      case 0x60u:
        do
        {
          int v6 = *(unsigned __int8 *)++sql;
          int v5 = v6;
        }
        while (v6 && v5 != v1);
        if (!v5) {
          return 0;
        }
        goto LABEL_10;
      case 0x2Du:
        if (sql[1] != 45) {
          goto LABEL_10;
        }
        int v16 = v1;
        if (!v1) {
          return v2 == 1;
        }
        while (v16 != 10)
        {
          unsigned __int8 v17 = *++sql;
          int v16 = v17;
          if (!v17) {
            return v2 == 1;
          }
        }
        goto LABEL_4;
      case 0x2Fu:
        if (sql[1] != 42) {
          goto LABEL_10;
        }
        sql += 3;
LABEL_48:
        if (*(sql - 1) == 42)
        {
          if (*sql != 47) {
            goto LABEL_47;
          }
LABEL_4:
          uint64_t v3 = 1;
LABEL_5:
          unsigned int v2 = byte_1B0DE1EC8[8 * v2 + v3];
          int v4 = *(unsigned __int8 *)++sql;
          unsigned __int8 v1 = v4;
          if (!v4) {
            return v2 == 1;
          }
          continue;
        }
        if (*(sql - 1))
        {
LABEL_47:
          ++sql;
          goto LABEL_48;
        }
        return 0;
      case 0x3Bu:
        goto LABEL_5;
      case 0x5Bu:
        do
        {
          int v8 = *(unsigned __int8 *)++sql;
          int v7 = v8;
          if (!v8) {
            return 0;
          }
        }
        while (v7 != 93);
LABEL_10:
        uint64_t v3 = 2;
        goto LABEL_5;
      default:
        if ((byte_1B0DE196D[v1] & 0x46) == 0) {
          goto LABEL_10;
        }
        uint64_t v9 = 0;
        uint64_t v10 = 0xFFFFFFFF00000000;
        do
        {
          char v11 = byte_1B0DE196D[sql[v9 + 1]];
          v10 += 0x100000000;
          ++v9;
        }
        while ((v11 & 0x46) != 0);
        char v12 = v1 - 67;
        if (((char)v1 - 67) > 0x31) {
          goto LABEL_197;
        }
        if (((1 << v12) & 0x100000001) == 0)
        {
          if (((1 << v12) & 0x400000004) == 0)
          {
            uint64_t v13 = 1 << v12;
            uint64_t v3 = 2;
            if ((v13 & 0x2000000020000) == 0) {
              goto LABEL_198;
            }
            switch(v9)
            {
              case 4:
                if (!v1)
                {
                  LODWORD(v24) = 0;
                  uint64_t v25 = "temp";
                  goto LABEL_195;
                }
                if ((v1 & 0xDF) == 0x54)
                {
                  unint64_t v24 = *((unsigned __int8 *)sql + 1);
                  if (!sql[1])
                  {
                    uint64_t v25 = "emp";
                    goto LABEL_195;
                  }
                  if ((v24 & 0xFFFFFFDF) == 0x45)
                  {
                    unint64_t v24 = *((unsigned __int8 *)sql + 2);
                    if (!sql[2])
                    {
                      uint64_t v25 = "mp";
                      goto LABEL_195;
                    }
                    if ((v24 & 0xFFFFFFDF) == 0x4D)
                    {
                      unint64_t v24 = *((unsigned __int8 *)sql + 3);
                      if (!sql[3])
                      {
                        uint64_t v25 = "p";
                        goto LABEL_195;
                      }
                      if ((v24 & 0xFFFFFFDF) == 0x50) {
                        goto LABEL_196;
                      }
                      v24 += (unint64_t)byte_1B0DE1758;
                      uint64_t v25 = "p";
                    }
                    else
                    {
                      v24 += (unint64_t)byte_1B0DE1758;
                      uint64_t v25 = "mp";
                    }
                  }
                  else
                  {
                    v24 += (unint64_t)byte_1B0DE1758;
                    uint64_t v25 = "emp";
                  }
                }
                else
                {
                  unint64_t v24 = (unint64_t)&byte_1B0DE1758[v1];
                  uint64_t v25 = "temp";
                }
                break;
              case 9:
                if (!v1)
                {
                  LODWORD(v24) = 0;
                  uint64_t v25 = "temporary";
                  goto LABEL_195;
                }
                if ((v1 & 0xDF) == 0x54)
                {
                  unint64_t v24 = *((unsigned __int8 *)sql + 1);
                  if (!sql[1])
                  {
                    uint64_t v25 = "emporary";
                    goto LABEL_195;
                  }
                  if ((v24 & 0xFFFFFFDF) == 0x45)
                  {
                    unint64_t v24 = *((unsigned __int8 *)sql + 2);
                    if (!sql[2])
                    {
                      uint64_t v25 = "mporary";
                      goto LABEL_195;
                    }
                    if ((v24 & 0xFFFFFFDF) == 0x4D)
                    {
                      unint64_t v24 = *((unsigned __int8 *)sql + 3);
                      if (!sql[3])
                      {
                        uint64_t v25 = "porary";
                        goto LABEL_195;
                      }
                      if ((v24 & 0xFFFFFFDF) == 0x50)
                      {
                        unint64_t v24 = *((unsigned __int8 *)sql + 4);
                        if (!sql[4])
                        {
                          uint64_t v25 = "orary";
                          goto LABEL_195;
                        }
                        if ((v24 & 0xFFFFFFDF) == 0x4F)
                        {
                          unint64_t v24 = *((unsigned __int8 *)sql + 5);
                          if (!sql[5])
                          {
                            uint64_t v25 = "rary";
                            goto LABEL_195;
                          }
                          if ((v24 & 0xFFFFFFDF) == 0x52)
                          {
                            unint64_t v24 = *((unsigned __int8 *)sql + 6);
                            if (!sql[6])
                            {
                              uint64_t v25 = "ary";
                              goto LABEL_195;
                            }
                            if ((v24 & 0xFFFFFFDF) == 0x41)
                            {
                              unint64_t v24 = *((unsigned __int8 *)sql + 7);
                              if (!sql[7])
                              {
                                uint64_t v25 = "ry";
                                goto LABEL_195;
                              }
                              if ((v24 & 0xFFFFFFDF) == 0x52)
                              {
                                unint64_t v24 = *((unsigned __int8 *)sql + 8);
                                if (!sql[8])
                                {
                                  uint64_t v25 = "y";
LABEL_195:
                                  if (v24 == byte_1B0DE1758[*v25])
                                  {
LABEL_196:
                                    uint64_t v3 = 5;
                                    goto LABEL_198;
                                  }
                                  goto LABEL_197;
                                }
                                if ((v24 & 0xFFFFFFDF) == 0x59) {
                                  goto LABEL_196;
                                }
                                v24 += (unint64_t)byte_1B0DE1758;
                                uint64_t v25 = "y";
                              }
                              else
                              {
                                v24 += (unint64_t)byte_1B0DE1758;
                                uint64_t v25 = "ry";
                              }
                            }
                            else
                            {
                              v24 += (unint64_t)byte_1B0DE1758;
                              uint64_t v25 = "ary";
                            }
                          }
                          else
                          {
                            v24 += (unint64_t)byte_1B0DE1758;
                            uint64_t v25 = "rary";
                          }
                        }
                        else
                        {
                          v24 += (unint64_t)byte_1B0DE1758;
                          uint64_t v25 = "orary";
                        }
                      }
                      else
                      {
                        v24 += (unint64_t)byte_1B0DE1758;
                        uint64_t v25 = "porary";
                      }
                    }
                    else
                    {
                      v24 += (unint64_t)byte_1B0DE1758;
                      uint64_t v25 = "mporary";
                    }
                  }
                  else
                  {
                    v24 += (unint64_t)byte_1B0DE1758;
                    uint64_t v25 = "emporary";
                  }
                }
                else
                {
                  unint64_t v24 = (unint64_t)&byte_1B0DE1758[v1];
                  uint64_t v25 = "temporary";
                }
                break;
              case 7:
                if (!v1)
                {
                  LODWORD(v14) = 0;
                  int v15 = "trigger";
                  goto LABEL_185;
                }
                if ((v1 & 0xDF) == 0x54)
                {
                  unint64_t v14 = *((unsigned __int8 *)sql + 1);
                  if (!sql[1])
                  {
                    int v15 = "rigger";
                    goto LABEL_185;
                  }
                  if ((v14 & 0xFFFFFFDF) == 0x52)
                  {
                    unint64_t v14 = *((unsigned __int8 *)sql + 2);
                    if (!sql[2])
                    {
                      int v15 = "igger";
                      goto LABEL_185;
                    }
                    if ((v14 & 0xFFFFFFDF) == 0x49)
                    {
                      unint64_t v14 = *((unsigned __int8 *)sql + 3);
                      if (!sql[3])
                      {
                        int v15 = "gger";
                        goto LABEL_185;
                      }
                      if ((v14 & 0xFFFFFFDF) == 0x47)
                      {
                        unint64_t v14 = *((unsigned __int8 *)sql + 4);
                        if (!sql[4])
                        {
                          int v15 = "ger";
                          goto LABEL_185;
                        }
                        if ((v14 & 0xFFFFFFDF) == 0x47)
                        {
                          unint64_t v14 = *((unsigned __int8 *)sql + 5);
                          if (!sql[5])
                          {
                            int v15 = "er";
                            goto LABEL_185;
                          }
                          if ((v14 & 0xFFFFFFDF) == 0x45)
                          {
                            unint64_t v14 = *((unsigned __int8 *)sql + 6);
                            if (!sql[6])
                            {
                              int v15 = "r";
LABEL_185:
                              if (v14 == byte_1B0DE1758[*v15])
                              {
LABEL_186:
                                uint64_t v3 = 6;
                                goto LABEL_198;
                              }
LABEL_197:
                              uint64_t v3 = 2;
LABEL_198:
                              sql += v10 >> 32;
                              goto LABEL_5;
                            }
                            if ((v14 & 0xFFFFFFDF) == 0x52) {
                              goto LABEL_186;
                            }
                            v14 += (unint64_t)byte_1B0DE1758;
                            int v15 = "r";
                          }
                          else
                          {
                            v14 += (unint64_t)byte_1B0DE1758;
                            int v15 = "er";
                          }
                        }
                        else
                        {
                          v14 += (unint64_t)byte_1B0DE1758;
                          int v15 = "ger";
                        }
                      }
                      else
                      {
                        v14 += (unint64_t)byte_1B0DE1758;
                        int v15 = "gger";
                      }
                    }
                    else
                    {
                      v14 += (unint64_t)byte_1B0DE1758;
                      int v15 = "igger";
                    }
                  }
                  else
                  {
                    v14 += (unint64_t)byte_1B0DE1758;
                    int v15 = "rigger";
                  }
                }
                else
                {
                  unint64_t v14 = (unint64_t)&byte_1B0DE1758[v1];
                  int v15 = "trigger";
                }
                LODWORD(v14) = *(unsigned __int8 *)v14;
                goto LABEL_185;
              default:
                goto LABEL_197;
            }
            LODWORD(v24) = *(unsigned __int8 *)v24;
            goto LABEL_195;
          }
          if (v9 != 7)
          {
            if (v9 != 3) {
              goto LABEL_197;
            }
            if (!v1)
            {
              LODWORD(v20) = 0;
              uint64_t v21 = "end";
              goto LABEL_135;
            }
            if ((v1 & 0xDF) == 0x45)
            {
              unint64_t v20 = *((unsigned __int8 *)sql + 1);
              if (!sql[1])
              {
                uint64_t v21 = "nd";
                goto LABEL_135;
              }
              if ((v20 & 0xFFFFFFDF) == 0x4E)
              {
                unint64_t v20 = *((unsigned __int8 *)sql + 2);
                if (!sql[2])
                {
                  uint64_t v21 = "d";
LABEL_135:
                  if (v20 == byte_1B0DE1758[*v21])
                  {
LABEL_136:
                    uint64_t v3 = 7;
                    goto LABEL_198;
                  }
                  goto LABEL_197;
                }
                if ((v20 & 0xFFFFFFDF) == 0x44) {
                  goto LABEL_136;
                }
                v20 += (unint64_t)byte_1B0DE1758;
                uint64_t v21 = "d";
              }
              else
              {
                v20 += (unint64_t)byte_1B0DE1758;
                uint64_t v21 = "nd";
              }
            }
            else
            {
              uint64_t v21 = "end";
              unint64_t v20 = (unint64_t)&byte_1B0DE1758[v1];
            }
            LODWORD(v20) = *(unsigned __int8 *)v20;
            goto LABEL_135;
          }
          if (v1)
          {
            if ((v1 & 0xDF) == 0x45)
            {
              uint64_t v22 = "xplain";
              unint64_t v23 = *((unsigned __int8 *)sql + 1);
              if (!sql[1]) {
                goto LABEL_179;
              }
              if ((v23 & 0xFFFFFFDF) == 0x58)
              {
                unint64_t v23 = *((unsigned __int8 *)sql + 2);
                if (!sql[2])
                {
                  uint64_t v22 = "plain";
                  goto LABEL_179;
                }
                if ((v23 & 0xFFFFFFDF) == 0x50)
                {
                  unint64_t v23 = *((unsigned __int8 *)sql + 3);
                  if (!sql[3])
                  {
                    uint64_t v22 = "lain";
                    goto LABEL_179;
                  }
                  if ((v23 & 0xFFFFFFDF) == 0x4C)
                  {
                    unint64_t v23 = *((unsigned __int8 *)sql + 4);
                    if (!sql[4])
                    {
                      uint64_t v22 = "ain";
                      goto LABEL_179;
                    }
                    if ((v23 & 0xFFFFFFDF) == 0x41)
                    {
                      unint64_t v23 = *((unsigned __int8 *)sql + 5);
                      if (!sql[5])
                      {
                        uint64_t v22 = "in";
                        goto LABEL_179;
                      }
                      if ((v23 & 0xFFFFFFDF) == 0x49)
                      {
                        unint64_t v23 = *((unsigned __int8 *)sql + 6);
                        if (sql[6])
                        {
                          if ((v23 & 0xFFFFFFDF) == 0x4E) {
                            goto LABEL_180;
                          }
                          v23 += (unint64_t)byte_1B0DE1758;
                          uint64_t v22 = "n";
                          goto LABEL_178;
                        }
                        uint64_t v22 = "n";
LABEL_179:
                        if (v23 == byte_1B0DE1758[*v22])
                        {
LABEL_180:
                          uint64_t v3 = 3;
                          goto LABEL_198;
                        }
                        goto LABEL_197;
                      }
                      v23 += (unint64_t)byte_1B0DE1758;
                      uint64_t v22 = "in";
                    }
                    else
                    {
                      v23 += (unint64_t)byte_1B0DE1758;
                      uint64_t v22 = "ain";
                    }
                  }
                  else
                  {
                    uint64_t v22 = "lain";
                    v23 += (unint64_t)byte_1B0DE1758;
                  }
                }
                else
                {
                  v23 += (unint64_t)byte_1B0DE1758;
                  uint64_t v22 = "plain";
                }
              }
              else
              {
                v23 += (unint64_t)byte_1B0DE1758;
              }
            }
            else
            {
              unint64_t v23 = (unint64_t)&byte_1B0DE1758[v1];
              uint64_t v22 = "explain";
            }
LABEL_178:
            LODWORD(v23) = *(unsigned __int8 *)v23;
            goto LABEL_179;
          }
          LODWORD(v23) = 0;
          uint64_t v22 = "explain";
          goto LABEL_179;
        }
        if (v9 != 6) {
          goto LABEL_197;
        }
        if (v1)
        {
          if ((v1 & 0xDF) == 0x43)
          {
            uint64_t v18 = "reate";
            unint64_t v19 = *((unsigned __int8 *)sql + 1);
            if (!sql[1]) {
              goto LABEL_167;
            }
            if ((v19 & 0xFFFFFFDF) == 0x52)
            {
              unint64_t v19 = *((unsigned __int8 *)sql + 2);
              if (!sql[2])
              {
                uint64_t v18 = "eate";
                goto LABEL_167;
              }
              if ((v19 & 0xFFFFFFDF) == 0x45)
              {
                unint64_t v19 = *((unsigned __int8 *)sql + 3);
                if (!sql[3])
                {
                  uint64_t v18 = "ate";
                  goto LABEL_167;
                }
                if ((v19 & 0xFFFFFFDF) == 0x41)
                {
                  unint64_t v19 = *((unsigned __int8 *)sql + 4);
                  if (!sql[4])
                  {
                    uint64_t v18 = "te";
                    goto LABEL_167;
                  }
                  if ((v19 & 0xFFFFFFDF) == 0x54)
                  {
                    unint64_t v19 = *((unsigned __int8 *)sql + 5);
                    if (sql[5])
                    {
                      if ((v19 & 0xFFFFFFDF) == 0x45) {
                        goto LABEL_168;
                      }
                      v19 += (unint64_t)byte_1B0DE1758;
                      uint64_t v18 = "e";
                      goto LABEL_166;
                    }
                    uint64_t v18 = "e";
LABEL_167:
                    if (v19 == byte_1B0DE1758[*v18])
                    {
LABEL_168:
                      uint64_t v3 = 4;
                      goto LABEL_198;
                    }
                    goto LABEL_197;
                  }
                  v19 += (unint64_t)byte_1B0DE1758;
                  uint64_t v18 = "te";
                }
                else
                {
                  uint64_t v18 = "ate";
                  v19 += (unint64_t)byte_1B0DE1758;
                }
              }
              else
              {
                v19 += (unint64_t)byte_1B0DE1758;
                uint64_t v18 = "eate";
              }
            }
            else
            {
              v19 += (unint64_t)byte_1B0DE1758;
            }
          }
          else
          {
            unint64_t v19 = (unint64_t)&byte_1B0DE1758[v1];
            uint64_t v18 = "create";
          }
LABEL_166:
          LODWORD(v19) = *(unsigned __int8 *)v19;
          goto LABEL_167;
        }
        LODWORD(v19) = 0;
        uint64_t v18 = "create";
        goto LABEL_167;
    }
  }
}

int sqlite3_complete16(const void *sql)
{
  int v2 = sqlite3_initialize();
  if (v2) {
    return v2;
  }
  uint64_t v3 = sub_1B0C7FC94(64);
  if (!v3) {
    return 7;
  }
  uint64_t v4 = v3;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)uint64_t v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_WORD *)(v3 + 20) = 1;
  *(void *)(v3 + 24) = 0;
  sub_1B0C79BBC(v3, (char *)sql, -1, 2u, 0);
  int v5 = *(unsigned __int16 *)(v4 + 20);
  if ((~v5 & 0x202) != 0 || *(unsigned char *)(v4 + 22) != 1)
  {
    if (v5) {
      goto LABEL_11;
    }
    int v6 = (const char *)sub_1B0D18254((int *)v4, 1);
    if (!v6) {
      goto LABEL_11;
    }
LABEL_9:
    int v2 = sqlite3_complete(v6);
    goto LABEL_12;
  }
  int v6 = *(const char **)(v4 + 8);
  if (v6) {
    goto LABEL_9;
  }
LABEL_11:
  int v2 = 7;
LABEL_12:
  if ((*(_WORD *)(v4 + 20) & 0x9000) != 0 || *(_DWORD *)(v4 + 32)) {
    sub_1B0D180E4(v4);
  }
  sub_1B0D05C10(*(void **)(v4 + 24), (void *)v4);
  return v2;
}

uint64_t sub_1B0CF1CE4(uint64_t a1)
{
  if (a1)
  {
    uint64_t result = sub_1B0D05DC0(a1, 0x40uLL);
    if (!result) {
      return result;
    }
  }
  else
  {
    uint64_t result = sub_1B0C7FC94(64);
    if (!result) {
      return result;
    }
  }
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)uint64_t result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(_WORD *)(result + 20) = 1;
  *(void *)(result + 24) = a1;
  return result;
}

const char *sqlite3_libversion(void)
{
  return "3.43.2";
}

int sqlite3_libversion_number(void)
{
  return 3043002;
}

int sqlite3_threadsafe(void)
{
  return 2;
}

void sub_1B0CF1D60()
{
  for (uint64_t i = 0; i != 5; ++i)
  {
    int v2 = (char *)&qword_1EB21F2F8[9 * i];
    uint64_t v3 = (char *)*((void *)v2 + 7);
    if (v3) {
      int v4 = strlen(*((const char **)v2 + 7)) & 0x3FFFFFFF;
    }
    else {
      int v4 = 0;
    }
    int v5 = (void *)&xmmword_1EB220210 + (v4 + *v3) % 23;
    int v6 = (void *)*v5;
    if (!*v5)
    {
LABEL_2:
      unsigned __int8 v1 = (char *)&qword_1EB21F2F8[9 * i];
      *((void *)v1 + 2) = 0;
      *((void *)v1 + 8) = v6;
      goto LABEL_3;
    }
    int v7 = (void *)*v5;
LABEL_9:
    int v8 = (unsigned char *)v7[7];
    for (uint64_t j = (unsigned __int8 *)*((void *)v2 + 7); ; ++j)
    {
      uint64_t v10 = *v8;
      uint64_t v11 = *j;
      if (v10 == v11) {
        break;
      }
      if (byte_1B0DE1758[v10] != byte_1B0DE1758[v11])
      {
        int v7 = (void *)v7[8];
        if (v7) {
          goto LABEL_9;
        }
        goto LABEL_2;
      }
LABEL_11:
      ++v8;
    }
    if (*v8) {
      goto LABEL_11;
    }
    if (!v7) {
      goto LABEL_2;
    }
    qword_1EB21F2F8[9 * i + 2] = v7[2];
    int v5 = v7 + 2;
LABEL_3:
    void *v5 = v2;
  }
  for (uint64_t k = 0; k != 15; ++k)
  {
    unint64_t v14 = (char *)&qword_1EB21F460[9 * k];
    int v15 = (char *)*((void *)v14 + 7);
    if (v15) {
      int v16 = strlen(*((const char **)v14 + 7)) & 0x3FFFFFFF;
    }
    else {
      int v16 = 0;
    }
    unsigned __int8 v17 = (void *)&xmmword_1EB220210 + (v16 + *v15) % 23;
    uint64_t v18 = (void *)*v17;
    if (!*v17)
    {
LABEL_20:
      uint64_t v13 = (char *)&qword_1EB21F460[9 * k];
      *((void *)v13 + 2) = 0;
      *((void *)v13 + 8) = v18;
      goto LABEL_21;
    }
    unint64_t v19 = (void *)*v17;
LABEL_27:
    unint64_t v20 = (unsigned char *)v19[7];
    for (m = (unsigned __int8 *)*((void *)v14 + 7); ; ++m)
    {
      uint64_t v22 = *v20;
      uint64_t v23 = *m;
      if (v22 == v23) {
        break;
      }
      if (byte_1B0DE1758[v22] != byte_1B0DE1758[v23])
      {
        unint64_t v19 = (void *)v19[8];
        if (v19) {
          goto LABEL_27;
        }
        goto LABEL_20;
      }
LABEL_29:
      ++v20;
    }
    if (*v20) {
      goto LABEL_29;
    }
    if (!v19) {
      goto LABEL_20;
    }
    qword_1EB21F460[9 * k + 2] = v19[2];
    unsigned __int8 v17 = v19 + 2;
LABEL_21:
    *unsigned __int8 v17 = v14;
  }
  for (uint64_t n = 0; n != 10; ++n)
  {
    uint64_t v26 = (char *)&qword_1EB21F898[9 * n];
    unsigned int v27 = (char *)*((void *)v26 + 7);
    if (v27) {
      int v28 = strlen(*((const char **)v26 + 7)) & 0x3FFFFFFF;
    }
    else {
      int v28 = 0;
    }
    uint64_t v29 = (void *)&xmmword_1EB220210 + (v28 + *v27) % 23;
    int v30 = (void *)*v29;
    if (!*v29)
    {
LABEL_38:
      uint64_t v25 = (char *)&qword_1EB21F898[9 * n];
      *((void *)v25 + 2) = 0;
      *((void *)v25 + 8) = v30;
      goto LABEL_39;
    }
    BOOL v31 = (void *)*v29;
LABEL_45:
    int v32 = (unsigned char *)v31[7];
    for (iuint64_t i = (unsigned __int8 *)*((void *)v26 + 7); ; ++ii)
    {
      uint64_t v34 = *v32;
      uint64_t v35 = *ii;
      if (v34 == v35) {
        break;
      }
      if (byte_1B0DE1758[v34] != byte_1B0DE1758[v35])
      {
        BOOL v31 = (void *)v31[8];
        if (v31) {
          goto LABEL_45;
        }
        goto LABEL_38;
      }
LABEL_47:
      ++v32;
    }
    if (*v32) {
      goto LABEL_47;
    }
    if (!v31) {
      goto LABEL_38;
    }
    qword_1EB21F898[9 * n + 2] = v31[2];
    uint64_t v29 = v31 + 2;
LABEL_39:
    *uint64_t v29 = v26;
  }
  for (juint64_t j = 0; jj != 20; ++jj)
  {
    int v38 = (char *)&qword_1EB21FB68[9 * jj];
    uint64_t v39 = (char *)*((void *)v38 + 7);
    if (v39) {
      int v40 = strlen(*((const char **)v38 + 7)) & 0x3FFFFFFF;
    }
    else {
      int v40 = 0;
    }
    uint64_t v41 = (void *)&xmmword_1EB220210 + (v40 + *v39) % 23;
    long long v42 = (void *)*v41;
    if (!*v41)
    {
LABEL_56:
      uint64_t v37 = (char *)&qword_1EB21FB68[9 * jj];
      *((void *)v37 + 2) = 0;
      *((void *)v37 + 8) = v42;
      goto LABEL_57;
    }
    long long v43 = (void *)*v41;
LABEL_63:
    long long v44 = (unsigned char *)v43[7];
    for (kuint64_t k = (unsigned __int8 *)*((void *)v38 + 7); ; ++kk)
    {
      uint64_t v46 = *v44;
      uint64_t v47 = *kk;
      if (v46 == v47) {
        break;
      }
      if (byte_1B0DE1758[v46] != byte_1B0DE1758[v47])
      {
        long long v43 = (void *)v43[8];
        if (v43) {
          goto LABEL_63;
        }
        goto LABEL_56;
      }
LABEL_65:
      ++v44;
    }
    if (*v44) {
      goto LABEL_65;
    }
    if (!v43) {
      goto LABEL_56;
    }
    qword_1EB21FB68[9 * jj + 2] = v43[2];
    uint64_t v41 = v43 + 2;
LABEL_57:
    void *v41 = v38;
  }
  for (uint64_t mm = 0; mm != 101; ++mm)
  {
    long long v50 = (char *)&qword_1EB21D690[9 * mm];
    long long v51 = (char *)*((void *)v50 + 7);
    if (v51) {
      int v52 = strlen(*((const char **)v50 + 7)) & 0x3FFFFFFF;
    }
    else {
      int v52 = 0;
    }
    long long v53 = (void *)&xmmword_1EB220210 + (v52 + *v51) % 23;
    long long v54 = (void *)*v53;
    if (!*v53)
    {
LABEL_74:
      long long v49 = (char *)&qword_1EB21D690[9 * mm];
      *((void *)v49 + 2) = 0;
      *((void *)v49 + 8) = v54;
      goto LABEL_75;
    }
    uint64_t v55 = (void *)*v53;
LABEL_81:
    long long v56 = (unsigned char *)v55[7];
    for (nuint64_t n = (unsigned __int8 *)*((void *)v50 + 7); ; ++nn)
    {
      uint64_t v58 = *v56;
      uint64_t v59 = *nn;
      if (v58 == v59) {
        break;
      }
      if (byte_1B0DE1758[v58] != byte_1B0DE1758[v59])
      {
        uint64_t v55 = (void *)v55[8];
        if (v55) {
          goto LABEL_81;
        }
        goto LABEL_74;
      }
LABEL_83:
      ++v56;
    }
    if (*v56) {
      goto LABEL_83;
    }
    if (!v55) {
      goto LABEL_74;
    }
    qword_1EB21D690[9 * mm + 2] = v55[2];
    long long v53 = v55 + 2;
LABEL_75:
    void *v53 = v50;
  }
}

uint64_t sub_1B0CF2248()
{
  uint64_t v0 = (uint64_t (*)(uint64_t))xmmword_1EB21CA78;
  if (!(void)xmmword_1EB21CA78)
  {
    if (dword_1EB21CB04) {
      BOOL v1 = dword_1EB21CB00 == 0;
    }
    else {
      BOOL v1 = 1;
    }
    BOOL v2 = v1 || qword_1EB21CAF8 == 0;
    uint64_t v3 = &unk_1F09A5848;
    if (v2) {
      uint64_t v3 = &unk_1F09A58B0;
    }
    sqlite3_config(18, v3);
    uint64_t v0 = (uint64_t (*)(uint64_t))xmmword_1EB21CA78;
  }
  uint64_t v4 = *((void *)&xmmword_1EB21CA68 + 1);

  return v0(v4);
}

uint64_t sub_1B0CF22D0()
{
  if (sqlite3_initialize()) {
    return 7;
  }
  uint64_t v1 = sub_1B0C7FC94(10);
  if (!v1) {
    return 7;
  }
  uint64_t v2 = v1;
  uint64_t v3 = &off_1EB21C9E8;
  if (dword_1EB21C9C0)
  {
    if ((void)xmmword_1EB2201B0) {
      xmmword_1EB21CA40(xmmword_1EB2201B0);
    }
    qword_1EB220108 -= (int)off_1EB21C9F8(v2);
    --qword_1EB220150;
    off_1EB21C9E8(v2);
    uint64_t v2 = xmmword_1EB2201B0;
    if (!(void)xmmword_1EB2201B0) {
      goto LABEL_10;
    }
    uint64_t v3 = &xmmword_1EB21CA50;
  }
  (*v3)(v2);
LABEL_10:
  sqlite3_os_init();
  return 0;
}

uint64_t sub_1B0CF239C()
{
  if (sqlite3_initialize()) {
    return 1;
  }
  if ((_BYTE)word_1EB21C9C4 && (uint64_t v1 = qword_1EB21CA30(2)) != 0)
  {
    uint64_t v2 = v1;
    xmmword_1EB21CA40(v1);
    uint64_t v3 = qword_1EB2201A8;
    xmmword_1EB21CA50(v2);
    if (!v3) {
      return 1;
    }
  }
  else
  {
    uint64_t v3 = qword_1EB2201A8;
    if (!qword_1EB2201A8) {
      return 1;
    }
  }
  unsigned int v4 = *(_DWORD *)(v3 + 4);
  *(void *)algn_1EB21D5D8 = v3;
  if (v4 <= 0x18) {
    unsigned int v4 = 24;
  }
  dword_1EB21D5BC = v4;
  uint64_t result = sqlite3_initialize();
  if (!result)
  {
    if ((_BYTE)word_1EB21C9C4)
    {
      uint64_t v5 = qword_1EB21CA30(2);
      uint64_t v6 = v5;
      if (v5)
      {
        xmmword_1EB21CA40(v5);
        char v7 = 0;
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v6 = 0;
    }
    char v7 = 1;
LABEL_17:
    int v8 = &qword_1EB2201A8;
    uint64_t v9 = qword_1EB2201A8;
    if ((_UNKNOWN *)qword_1EB2201A8 != &unk_1EB21D5B8)
    {
      if (!qword_1EB2201A8) {
        goto LABEL_30;
      }
      uint64_t v10 = (void *)qword_1EB2201A8;
      do
      {
        uint64_t v11 = v10;
        uint64_t v10 = (void *)v10[2];
        if (v10) {
          BOOL v12 = v10 == (void *)&unk_1EB21D5B8;
        }
        else {
          BOOL v12 = 1;
        }
      }
      while (!v12);
      if (v10 != (void *)&unk_1EB21D5B8)
      {
LABEL_28:
        if (v9)
        {
          uint64_t v15 = *(void *)(v9 + 16);
          uint64_t v13 = (uint64_t *)(v9 + 16);
          uint64_t v14 = v15;
LABEL_31:
          qword_1EB21D5C8 = v14;
          *uint64_t v13 = (uint64_t)&unk_1EB21D5B8;
          if ((v7 & 1) == 0) {
            xmmword_1EB21CA50(v6);
          }
          return 0;
        }
LABEL_30:
        uint64_t v14 = 0;
        uint64_t v13 = &qword_1EB2201A8;
        goto LABEL_31;
      }
      int v8 = v11 + 2;
    }
    *int v8 = qword_1EB21D5C8;
    uint64_t v9 = qword_1EB2201A8;
    goto LABEL_28;
  }
  return result;
}

void *sub_1B0CF2524(void *result, int a2, int a3)
{
  if (xmmword_1E9B521C0)
  {
    if (result) {
      int v3 = a3;
    }
    else {
      int v3 = 0;
    }
    if (v3) {
      BOOL v4 = result == 0;
    }
    else {
      BOOL v4 = 1;
    }
    signed int v5 = a2 & 0xFFFFFFF8;
    dword_1E9B521F8 = v3;
    if (v4) {
      signed int v5 = 0;
    }
    HIDWORD(xmmword_1E9B521C0) = v5;
    dword_1E9B521D0 = v3;
    if (v3 < 91)
    {
      dword_1E9B521D4 = v3 / 10 + 1;
      qword_1E9B521D8 = (uint64_t)result;
      qword_1E9B521F0 = 0;
      dword_1E9B521FC = 0;
      if (!v3)
      {
LABEL_16:
        *(void *)&xmmword_1E9B521E0 = result;
        return result;
      }
    }
    else
    {
      dword_1E9B521D4 = 10;
      qword_1E9B521D8 = (uint64_t)result;
      dword_1E9B521FC = 0;
    }
    uint64_t v6 = 0;
    do
    {
      *uint64_t result = v6;
      uint64_t v6 = result;
      uint64_t result = (void *)((char *)result + v5);
      --v3;
    }
    while (v3);
    qword_1E9B521F0 = (uint64_t)result - v5;
    goto LABEL_16;
  }
  return result;
}

int sqlite3_shutdown(void)
{
  if (qword_1EB21CB14)
  {
    os_unfair_recursive_lock_lock_with_options();
    HIDWORD(qword_1EB21CB14) = 1;
    if (!qword_1EB21CB14)
    {
      qword_1EB21CB14 = 0;
      os_unfair_recursive_lock_unlock();
      return 0;
    }
    qword_1EB2201D0 = 0;
    if (!sqlite3_initialize())
    {
      if ((_BYTE)word_1EB21C9C4)
      {
        uint64_t v0 = qword_1EB21CA30(2);
        if (v0)
        {
          uint64_t v1 = v0;
          xmmword_1EB21CA40(v0);
          xmmword_1EB21CA50(v1);
        }
      }
    }
    qword_1EB21CB14 = 0;
    os_unfair_recursive_lock_unlock();
  }
  if (dword_1EB21CB24)
  {
    if (*((void *)&xmmword_1EB21CA78 + 1)) {
      (*((void (**)(void))&xmmword_1EB21CA78 + 1))(*((void *)&xmmword_1EB21CA68 + 1));
    }
    dword_1EB21CB24 = 0;
  }
  if (dword_1EB21CB20)
  {
    if (off_1EB21CA10) {
      off_1EB21CA10(qword_1EB21CA18);
    }
    xmmword_1EB2201B0 = 0u;
    *(_OWORD *)&qword_1EB2201C0 = 0u;
    dword_1EB21CB20 = 0;
    sqlite3_data_directory = 0;
    sqlite3_temp_directory = 0;
  }
  if (dword_1EB21CB1C)
  {
    if (*(&xmmword_1EB21CA20 + 1)) {
      ((void (*)(void))*(&xmmword_1EB21CA20 + 1))();
    }
    dword_1EB21CB1C = 0;
  }
  return 0;
}

uint64_t sub_1B0CF27C0()
{
  if (dword_1EB21CB04) {
    BOOL v0 = dword_1EB21CB00 == 0;
  }
  else {
    BOOL v0 = 1;
  }
  BOOL v1 = v0 || qword_1EB21CAF8 == 0;
  uint64_t v2 = &unk_1F09A5848;
  if (v1) {
    uint64_t v2 = &unk_1F09A58B0;
  }
  return sqlite3_config(18, v2);
}

sqlite3_mutex *__cdecl sqlite3_db_mutex(sqlite3 *a1)
{
  if (a1)
  {
    int v1 = *((unsigned __int8 *)a1 + 113);
    switch(v1)
    {
      case 186:
        goto LABEL_5;
      case 118:
        return (sqlite3_mutex *)*((void *)a1 + 3);
      case 109:
LABEL_5:
        uint64_t v2 = "unopened";
        break;
      default:
        uint64_t v2 = "invalid";
        break;
    }
  }
  else
  {
    uint64_t v2 = "NULL";
  }
  sqlite3_log(21, "API call with %s database connection pointer", v2);
  sub_1B0CE1978(186024);
  return 0;
}

int sqlite3_db_release_memory(sqlite3 *a1)
{
  if (!a1)
  {
    int v3 = "NULL";
    goto LABEL_18;
  }
  int v2 = *((unsigned __int8 *)a1 + 113);
  if (v2 == 186)
  {
LABEL_5:
    int v3 = "unopened";
LABEL_18:
    sqlite3_log(21, "API call with %s database connection pointer", v3);
    return sub_1B0CE1978(186039);
  }
  if (v2 != 118)
  {
    if (v2 != 109)
    {
      int v3 = "invalid";
      goto LABEL_18;
    }
    goto LABEL_5;
  }
  uint64_t v4 = *((void *)a1 + 3);
  if (v4) {
    xmmword_1EB21CA40(v4);
  }
  if (!*((unsigned char *)a1 + 111)) {
    sub_1B0D0E4C4((uint64_t)a1);
  }
  int v5 = *((_DWORD *)a1 + 10);
  if (v5 >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 8;
    do
    {
      uint64_t v8 = *(void *)(*((void *)a1 + 4) + v7);
      if (v8 && off_1EB21CAC8)
      {
        ((void (*)(void))off_1EB21CAC8)(*(void *)(*(void *)(**(void **)(v8 + 8) + 336) + 72));
        int v5 = *((_DWORD *)a1 + 10);
      }
      ++v6;
      v7 += 32;
    }
    while (v6 < v5);
  }
  if (!*((unsigned char *)a1 + 111)) {
    sub_1B0D0E55C((uint64_t)a1);
  }
  uint64_t v10 = *((void *)a1 + 3);
  if (v10) {
    xmmword_1EB21CA50(v10);
  }
  return 0;
}

int sqlite3_db_cacheflush(sqlite3 *a1)
{
  if (!a1)
  {
    int v3 = "NULL";
    goto LABEL_34;
  }
  int v2 = *((unsigned __int8 *)a1 + 113);
  if (v2 == 186)
  {
LABEL_5:
    int v3 = "unopened";
LABEL_34:
    sqlite3_log(21, "API call with %s database connection pointer", v3);
    return sub_1B0CE1978(186065);
  }
  if (v2 != 118)
  {
    if (v2 != 109)
    {
      int v3 = "invalid";
      goto LABEL_34;
    }
    goto LABEL_5;
  }
  uint64_t v4 = *((void *)a1 + 3);
  if (v4) {
    xmmword_1EB21CA40(v4);
  }
  if (!*((unsigned char *)a1 + 111)) {
    sub_1B0D0E4C4((uint64_t)a1);
  }
  uint64_t v5 = 0;
  int v6 = 0;
  while (1)
  {
    uint64_t v7 = v5;
    uint64_t v8 = *((int *)a1 + 10);
    if (v5 >= v8) {
      break;
    }
    uint64_t v9 = *(void *)(*((void *)a1 + 4) + 32 * v5 + 8);
    if (v9 && *(unsigned char *)(v9 + 16) == 2)
    {
      uint64_t v10 = **(void **)(v9 + 8);
      int v11 = *(_DWORD *)(v10 + 48);
      if (!*(unsigned char *)(v10 + 19))
      {
        uint64_t v12 = sub_1B0D13A30(*(uint64_t **)(v10 + 336));
        if (!v11 && v12 != 0)
        {
          uint64_t v14 = v12;
          do
          {
            uint64_t v15 = *(void *)(v14 + 32);
            if (*(void *)(v14 + 56))
            {
              int v11 = 0;
            }
            else
            {
              int v11 = sub_1B0D0F298(v10, v14);
              if (v11) {
                break;
              }
            }
            uint64_t v14 = v15;
          }
          while (v15);
        }
      }
      if (v11 == 5) {
        int v16 = 0;
      }
      else {
        int v16 = v11;
      }
      if (v11 == 5) {
        int v6 = 1;
      }
      uint64_t v5 = v7 + 1;
      if (v16) {
        goto LABEL_38;
      }
    }
    else
    {
      uint64_t v5 = v7 + 1;
    }
  }
  int v16 = 0;
LABEL_38:
  if (!*((unsigned char *)a1 + 111)) {
    sub_1B0D0E55C((uint64_t)a1);
  }
  uint64_t v18 = *((void *)a1 + 3);
  if (v18) {
    xmmword_1EB21CA50(v18);
  }
  if (v6) {
    BOOL v19 = v7 < v8;
  }
  else {
    BOOL v19 = 1;
  }
  if (v19) {
    return v16;
  }
  else {
    return 5;
  }
}

int sqlite3_db_config(sqlite3 *a1, int op, ...)
{
  va_start(va, op);
  uint64_t v14 = va_arg(va, void *);
  uint64_t v15 = va_arg(va, int *);
  uint64_t v16 = va_arg(va, void);
  if (!a1)
  {
    uint64_t v4 = "NULL";
    goto LABEL_12;
  }
  int v3 = *((unsigned __int8 *)a1 + 113);
  if (v3 == 186)
  {
LABEL_5:
    uint64_t v4 = "unopened";
LABEL_12:
    sqlite3_log(21, "API call with %s database connection pointer", v4);
    return sub_1B0CE1978(186093);
  }
  if (v3 != 118)
  {
    if (v3 != 109)
    {
      uint64_t v4 = "invalid";
      goto LABEL_12;
    }
    goto LABEL_5;
  }
  uint64_t v6 = *((void *)a1 + 3);
  if (v6) {
    xmmword_1EB21CA40(v6);
  }
  uint64_t v7 = 0;
  switch(op)
  {
    case 1000:
      int v8 = 0;
      **((void **)a1 + 4) = v14;
      goto LABEL_43;
    case 1001:
      int v8 = sub_1B0CF2EFC((uint64_t)a1, v14, (int)v15, v16);
      goto LABEL_43;
    case 1002:
      goto LABEL_34;
    case 1003:
      uint64_t v7 = 1;
      goto LABEL_34;
    case 1004:
      if ((dword_1EB21CB84 & 0x80) == 0)
      {
        uint64_t v7 = 3;
LABEL_34:
        uint64_t v10 = *((void *)a1 + 6);
        if ((int)v14 < 1)
        {
          if (v14)
          {
LABEL_41:
            int v8 = 0;
            if (v15) {
              *uint64_t v15 = (*((void *)a1 + 6) & *((unsigned int *)&unk_1B0DE1F08 + 2 * v7 + 1)) != 0;
            }
            goto LABEL_43;
          }
          unint64_t v11 = v10 & ~(unint64_t)*((unsigned int *)&unk_1B0DE1F08 + 2 * v7 + 1);
        }
        else
        {
          unint64_t v11 = v10 | *((unsigned int *)&unk_1B0DE1F08 + 2 * v7 + 1);
        }
        *((void *)a1 + 6) = v11;
        if (v10 != v11)
        {
          for (uint64_t i = *((void *)a1 + 1); i; uint64_t i = *(void *)(i + 16))
            *(_WORD *)(i + 268) = *(_WORD *)(i + 268) & 0xFFFC | 1;
        }
        goto LABEL_41;
      }
      int v8 = 0;
      if (v15) {
        *uint64_t v15 = (*((_DWORD *)a1 + 12) >> 22) & 1;
      }
LABEL_43:
      uint64_t v13 = *((void *)a1 + 3);
      if (v13) {
        xmmword_1EB21CA50(v13);
      }
      return v8;
    case 1005:
      int v8 = sub_1B0CE1978(186113);
      goto LABEL_43;
    case 1006:
      uint64_t v7 = 5;
      goto LABEL_34;
    case 1007:
      uint64_t v7 = 6;
      goto LABEL_34;
    case 1008:
      uint64_t v7 = 7;
      goto LABEL_34;
    case 1009:
      uint64_t v7 = 8;
      goto LABEL_34;
    case 1010:
      uint64_t v7 = 9;
      goto LABEL_34;
    case 1011:
      uint64_t v7 = 10;
      goto LABEL_34;
    case 1012:
      uint64_t v7 = 11;
      goto LABEL_34;
    case 1013:
      uint64_t v7 = 13;
      goto LABEL_34;
    case 1014:
      uint64_t v7 = 12;
      goto LABEL_34;
    case 1015:
      uint64_t v7 = 2;
      goto LABEL_34;
    case 1016:
      uint64_t v7 = 14;
      goto LABEL_34;
    case 1017:
      uint64_t v7 = 15;
      goto LABEL_34;
    case 1018:
      uint64_t v7 = 16;
      goto LABEL_34;
    case 1019:
      uint64_t v7 = 17;
      goto LABEL_34;
    default:
      int v8 = 1;
      goto LABEL_43;
  }
}

uint64_t sub_1B0CF2EFC(uint64_t a1, void *a2, int a3, int a4)
{
  uint64_t v7 = a1;
  int v8 = *(void **)(a1 + 464);
  if (!v8)
  {
    int v9 = 0;
    uint64_t v10 = *(void **)(a1 + 472);
    if (v10) {
      goto LABEL_5;
    }
LABEL_15:
    int v11 = 0;
    uint64_t v12 = *(void **)(a1 + 480);
    if (v12) {
      goto LABEL_8;
    }
    goto LABEL_16;
  }
  int v9 = 0;
  do
  {
    int v8 = (void *)*v8;
    --v9;
  }
  while (v8);
  uint64_t v10 = *(void **)(a1 + 472);
  if (!v10) {
    goto LABEL_15;
  }
LABEL_5:
  int v11 = 0;
  do
  {
    uint64_t v10 = (void *)*v10;
    --v11;
  }
  while (v10);
  uint64_t v12 = *(void **)(a1 + 480);
  if (v12)
  {
LABEL_8:
    int v13 = 0;
    do
    {
      uint64_t v12 = (void *)*v12;
      --v13;
    }
    while (v12);
    uint64_t v14 = *(void **)(a1 + 488);
    if (v14) {
      goto LABEL_11;
    }
LABEL_17:
    int v15 = 0;
    goto LABEL_18;
  }
LABEL_16:
  int v13 = 0;
  uint64_t v14 = *(void **)(a1 + 488);
  if (!v14) {
    goto LABEL_17;
  }
LABEL_11:
  int v15 = 0;
  do
  {
    uint64_t v14 = (void *)*v14;
    --v15;
  }
  while (v14);
LABEL_18:
  if (v11 + v9 + v13 + v15 + *(_DWORD *)(a1 + 444) > 0) {
    return 5;
  }
  if (*(unsigned char *)(a1 + 440))
  {
    uint64_t v17 = *(void *)(a1 + 504);
    if (v17)
    {
      uint64_t v18 = &off_1EB21C9E8;
      if (!dword_1EB21C9C0)
      {
LABEL_27:
        a1 = (*v18)(v17);
        goto LABEL_28;
      }
      if ((void)xmmword_1EB2201B0) {
        xmmword_1EB21CA40(xmmword_1EB2201B0);
      }
      qword_1EB220108 -= (int)off_1EB21C9F8(v17);
      --qword_1EB220150;
      a1 = off_1EB21C9E8(v17);
      uint64_t v17 = xmmword_1EB2201B0;
      if ((void)xmmword_1EB2201B0)
      {
        uint64_t v18 = &xmmword_1EB21CA50;
        goto LABEL_27;
      }
    }
  }
LABEL_28:
  BOOL v19 = (void *)(v7 + 464);
  unint64_t v20 = (void *)(v7 + 480);
  unsigned int v21 = a3 & 0xFFFFFFF8;
  if ((int)(a3 & 0xFFFFFFF8) >= 9) {
    uint64_t v22 = v21;
  }
  else {
    uint64_t v22 = 0;
  }
  if ((int)v21 < 9 || a4 <= 0)
  {
    *(_WORD *)(v7 + 438) = 0;
    *BOOL v19 = 0;
    *(void *)(v7 + 472) = 0;
  }
  else
  {
    uint64_t v23 = a4 * (uint64_t)a3;
    if (a2)
    {
      unint64_t v24 = a2;
    }
    else
    {
      if (off_1E9B52208) {
        off_1E9B52208(a1);
      }
      uint64_t v25 = sub_1B0C7FC94(v23);
      unint64_t v24 = (void *)v25;
      if (off_1E9B52210) {
        off_1E9B52210(v25);
      }
      if (v24) {
        uint64_t v23 = (int)off_1EB21C9F8(v24);
      }
    }
    if (v22 < 0x180)
    {
      uint64_t v26 = v23 / (v22 + 128);
      unint64_t v27 = (v23 - (int)v22 * (int)v26 + (v23 - (int)v22 * (int)v26 < 0 ? 0x7FuLL : 0)) >> 7;
      if (v22 < 0x100)
      {
        unsigned int v21 = v22;
        LODWORD(v26) = v23 / v22;
        LODWORD(v27) = 0;
      }
    }
    else
    {
      uint64_t v26 = v23 / (v22 + 384);
      unint64_t v27 = (v23 - (int)v22 * (int)v26 + (v23 - (int)v22 * (int)v26 < 0 ? 0x7FuLL : 0)) >> 7;
    }
    *(void *)(v7 + 504) = v24;
    *BOOL v19 = 0;
    *(void *)(v7 + 472) = 0;
    *(_WORD *)(v7 + 436) = v21;
    *(_WORD *)(v7 + 438) = v21;
    if (v24)
    {
      if ((int)v26 >= 1)
      {
        int v28 = 0;
        int v29 = v26;
        do
        {
          *unint64_t v24 = v28;
          int v28 = v24;
          unint64_t v24 = (void *)((char *)v24 + v21);
          --v29;
        }
        while (v29);
        *BOOL v19 = (char *)v24 - v21;
      }
      *unint64_t v20 = 0;
      *(void *)(v7 + 488) = 0;
      *(void *)(v7 + 496) = v24;
      if ((int)v27 >= 1)
      {
        int v30 = 0;
        int v31 = v27;
        do
        {
          int v32 = v24;
          *unint64_t v24 = v30;
          v24 += 16;
          int v30 = v32;
          --v31;
        }
        while (v31);
        *unint64_t v20 = v24 - 16;
      }
      *(void *)(v7 + 512) = v24;
      *(_DWORD *)(v7 + 432) = 0;
      *(unsigned char *)(v7 + 440) = a2 == 0;
      int v33 = v27 + v26;
      goto LABEL_57;
    }
  }
  unint64_t v24 = 0;
  int v33 = 0;
  *(void *)(v7 + 504) = 0;
  *(void *)(v7 + 512) = 0;
  *(void *)(v7 + 488) = 0;
  *(void *)(v7 + 496) = 0;
  *unint64_t v20 = 0;
  *(_DWORD *)(v7 + 432) = 1;
  *(_WORD *)(v7 + 436) = 0;
  *(unsigned char *)(v7 + 440) = 0;
LABEL_57:
  uint64_t result = 0;
  *(_DWORD *)(v7 + 444) = v33;
  *(void *)(v7 + 520) = v24;
  return result;
}

void sqlite3_set_last_insert_rowid(sqlite3 *a1, sqlite3_int64 a2)
{
  if (!a1)
  {
    uint64_t v4 = "NULL";
    goto LABEL_13;
  }
  int v3 = *((unsigned __int8 *)a1 + 113);
  if (v3 == 186)
  {
LABEL_5:
    uint64_t v4 = "unopened";
LABEL_13:
    sqlite3_log(21, "API call with %s database connection pointer", v4);
    sub_1B0CE1978(186276);
    return;
  }
  if (v3 != 118)
  {
    if (v3 != 109)
    {
      uint64_t v4 = "invalid";
      goto LABEL_13;
    }
    goto LABEL_5;
  }
  uint64_t v6 = *((void *)a1 + 3);
  if (v6)
  {
    xmmword_1EB21CA40(v6);
    uint64_t v7 = *((void *)a1 + 3);
    *((void *)a1 + 7) = a2;
    if (v7)
    {
      int v8 = (void (*)(void))xmmword_1EB21CA50;
      v8();
    }
  }
  else
  {
    *((void *)a1 + 7) = a2;
  }
}

sqlite3_int64 sqlite3_changes64(sqlite3 *a1)
{
  if (a1)
  {
    int v1 = *((unsigned __int8 *)a1 + 113);
    switch(v1)
    {
      case 186:
        goto LABEL_5;
      case 118:
        return *((void *)a1 + 15);
      case 109:
LABEL_5:
        int v2 = "unopened";
        break;
      default:
        int v2 = "invalid";
        break;
    }
  }
  else
  {
    int v2 = "NULL";
  }
  sqlite3_log(21, "API call with %s database connection pointer", v2);
  sub_1B0CE1978(186291);
  return 0;
}

sqlite3_int64 sqlite3_total_changes64(sqlite3 *a1)
{
  if (a1)
  {
    int v1 = *((unsigned __int8 *)a1 + 113);
    switch(v1)
    {
      case 186:
        goto LABEL_5;
      case 118:
        return *((void *)a1 + 16);
      case 109:
LABEL_5:
        int v2 = "unopened";
        break;
      default:
        int v2 = "invalid";
        break;
    }
  }
  else
  {
    int v2 = "NULL";
  }
  sqlite3_log(21, "API call with %s database connection pointer", v2);
  sub_1B0CE1978(186307);
  return 0;
}

int sqlite3_total_changes(sqlite3 *a1)
{
  if (a1)
  {
    int v1 = *((unsigned __int8 *)a1 + 113);
    switch(v1)
    {
      case 186:
        goto LABEL_5;
      case 118:
        return *((_DWORD *)a1 + 32);
      case 109:
LABEL_5:
        int v2 = "unopened";
        break;
      default:
        int v2 = "invalid";
        break;
    }
  }
  else
  {
    int v2 = "NULL";
  }
  sqlite3_log(21, "API call with %s database connection pointer", v2);
  sub_1B0CE1978(186307);
  return 0;
}

int sqlite3_txn_state(sqlite3 *a1, const char *zSchema)
{
  if (!a1)
  {
    uint64_t v4 = "NULL";
    goto LABEL_30;
  }
  int v3 = *((unsigned __int8 *)a1 + 113);
  if (v3 == 186)
  {
LABEL_5:
    uint64_t v4 = "unopened";
LABEL_30:
    sqlite3_log(21, "API call with %s database connection pointer", v4);
    sub_1B0CE1978(186522);
    return -1;
  }
  if (v3 != 118)
  {
    if (v3 != 109)
    {
      uint64_t v4 = "invalid";
      goto LABEL_30;
    }
    goto LABEL_5;
  }
  uint64_t v6 = *((void *)a1 + 3);
  if (v6) {
    xmmword_1EB21CA40(v6);
  }
  int v7 = *((_DWORD *)a1 + 10);
  BOOL v8 = __OFSUB__(v7, 1);
  uint64_t v9 = (v7 - 1);
  if (zSchema)
  {
    if ((int)v9 < 0 != v8) {
      goto LABEL_41;
    }
    uint64_t v10 = (unsigned char **)(*((void *)a1 + 4) + 32 * v9);
    int v11 = -1;
    while (1)
    {
      uint64_t v12 = *v10;
      if (*v10) {
        break;
      }
LABEL_19:
      if (!v9)
      {
        uint64_t v17 = "main";
        for (uint64_t i = zSchema; ; ++i)
        {
          uint64_t v19 = *(unsigned __int8 *)v17;
          uint64_t v20 = *(unsigned __int8 *)i;
          if (v19 == v20)
          {
            if (!*v17)
            {
              LODWORD(v9) = 0;
              goto LABEL_33;
            }
          }
          else if (byte_1B0DE1758[v19] != byte_1B0DE1758[v20])
          {
            break;
          }
          ++v17;
        }
      }
      v10 -= 4;
      BOOL v16 = (int)v9 <= 0;
      LODWORD(v9) = v9 - 1;
      if (v16) {
        goto LABEL_42;
      }
    }
    for (uint64_t j = zSchema; ; ++j)
    {
      uint64_t v14 = *v12;
      uint64_t v15 = *(unsigned __int8 *)j;
      if (v14 == v15)
      {
        if (!*v12)
        {
          unsigned int v22 = v9;
          if ((v9 & 0x80000000) == 0) {
            goto LABEL_35;
          }
LABEL_41:
          int v11 = -1;
          goto LABEL_42;
        }
      }
      else if (byte_1B0DE1758[v14] != byte_1B0DE1758[v15])
      {
        goto LABEL_19;
      }
      ++v12;
    }
  }
  if ((int)v9 < 0 != v8) {
    goto LABEL_41;
  }
LABEL_33:
  unsigned int v22 = 0;
LABEL_35:
  uint64_t v23 = (uint64_t *)(*((void *)a1 + 4) + 32 * v22 + 8);
  int v24 = v9 - v22 + 1;
  int v11 = -1;
  do
  {
    uint64_t v25 = *v23;
    if (*v23) {
      LODWORD(v25) = *(unsigned __int8 *)(v25 + 16);
    }
    if ((int)v25 > v11) {
      int v11 = v25;
    }
    v23 += 4;
    --v24;
  }
  while (v24);
LABEL_42:
  uint64_t v26 = *((void *)a1 + 3);
  if (v26) {
    xmmword_1EB21CA50(v26);
  }
  return v11;
}

uint64_t sub_1B0CF369C(uint64_t a1, int a2)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = mach_continuous_time();
  if (!a1) {
    return 0;
  }
  uint64_t v5 = v4;
  int v6 = *(unsigned __int8 *)(a1 + 113);
  if (v6 == 109 || v6 == 118 || v6 == 186)
  {
    uint64_t v7 = *(void *)(a1 + 24);
    if (v7) {
      xmmword_1EB21CA40(v7);
    }
    if ((*(unsigned char *)(a1 + 110) & 8) != 0) {
      (*(void (**)(uint64_t, void, uint64_t, void))(a1 + 240))(8, *(void *)(a1 + 248), a1, 0);
    }
    if (!*(unsigned char *)(a1 + 111)) {
      sub_1B0D0E4C4(a1);
    }
    int v8 = *(_DWORD *)(a1 + 40);
    if (v8 >= 1)
    {
      for (uint64_t i = 0; i < v8; ++i)
      {
        uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 32 * i + 24);
        if (v10)
        {
          int v11 = *(void **)(v10 + 16);
          if (v11)
          {
            do
            {
              uint64_t v12 = v11[2];
              if (*(unsigned char *)(v12 + 63) == 1) {
                sub_1B0D78C78((void *)a1, v12);
              }
              int v11 = (void *)*v11;
            }
            while (v11);
            int v8 = *(_DWORD *)(a1 + 40);
          }
        }
      }
    }
    for (uint64_t j = *(void **)(a1 + 576); j; uint64_t j = (void *)*j)
    {
      uint64_t v25 = *(void *)(j[2] + 40);
      if (v25) {
        sub_1B0D78C78((void *)a1, v25);
      }
    }
    sub_1B0D22AA4((void *)a1);
    if (!*(unsigned char *)(a1 + 111)) {
      sub_1B0D0E55C(a1);
    }
    sub_1B0CB33C4((int *)a1, 0x88u);
    uint64_t v20 = *(void **)(a1 + 8);
    if (!v20)
    {
      uint64_t v26 = *(unsigned int *)(a1 + 40);
      if ((int)v26 < 1)
      {
LABEL_54:
        if (off_1EB21CB48) {
          off_1EB21CB48(qword_1EB21CB50, a1, 0, 2);
        }
        *(unsigned char *)(a1 + 113) = -89;
        sub_1B0CE8ED8(a1, v19);
        if (v5)
        {
          if (qword_1EB2202F8 != -1) {
            dispatch_once(&qword_1EB2202F8, &unk_1F09A5008);
          }
          int v31 = qword_1EB2202F0;
          os_signpost_id_t v32 = os_signpost_id_make_with_pointer((os_log_t)qword_1EB2202F0, (const void *)a1);
          if (v32 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            os_signpost_id_t v33 = v32;
            if (os_signpost_enabled(v31))
            {
              *(_DWORD *)buf = 134218240;
              uint64_t v46 = v5;
              __int16 v47 = 2048;
              uint64_t v48 = a1;
              _os_signpost_emit_with_name_impl(&dword_1B0C76000, v31, OS_SIGNPOST_INTERVAL_BEGIN, v33, "close", "startTime=%{signpost.description:begin_time}llu db=%p", buf, 0x16u);
            }
            if (os_signpost_enabled(v31))
            {
              *(_WORD *)buf = 0;
              _os_signpost_emit_with_name_impl(&dword_1B0C76000, v31, OS_SIGNPOST_INTERVAL_END, v33, "close", (const char *)&unk_1B0DF50AA, buf, 2u);
            }
          }
        }
        return 0;
      }
      uint64_t v27 = *(void *)(a1 + 32) + 8;
      while (!*(void *)v27 || !*(_DWORD *)(*(void *)v27 + 24))
      {
        v27 += 32;
        if (!--v26) {
          goto LABEL_54;
        }
      }
    }
    if (a2)
    {
      uint64_t v21 = 28;
      if (v20)
      {
LABEL_27:
        uint64_t v22 = *(void *)(*v20 + 24);
        if (v22)
        {
          xmmword_1EB21CA40(v22);
          uint64_t v23 = *(void *)(*v20 + 24);
          uint64_t v24 = v20[40];
          if (v23) {
            xmmword_1EB21CA50(v23);
          }
          if (v24) {
            goto LABEL_31;
          }
        }
        else if (v20[40])
        {
LABEL_31:
          sqlite3_log(v21, "%s unfinalized statement: \"%s\"");
          goto LABEL_53;
        }
        sqlite3_log(v21, "%s unfinalized statement");
LABEL_53:
        if (!a2)
        {
          if ((dword_1EB21CB84 & 0x100) != 0
            && (uint64_t v34 = getprogname(), strcmp(v34, "xctest"))
            && (BOOL v35 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT)))
          {
            sub_1B0DE01B0(v35, v36, v37, v38, v39, v40, v41, v42);
            uint64_t v43 = *(void *)(a1 + 24);
            if (!v43) {
              return v21;
            }
          }
          else
          {
            uint64_t v43 = *(void *)(a1 + 24);
            if (!v43) {
              return v21;
            }
          }
          xmmword_1EB21CA50(v43);
          return v21;
        }
        goto LABEL_54;
      }
    }
    else
    {
      uint64_t v21 = 5;
      sub_1B0CE79F4(a1, 5, "unable to close due to unfinalized statements or unfinished backups", v14, v15, v16, v17, v18, v44);
      uint64_t v20 = *(void **)(a1 + 8);
      if (v20) {
        goto LABEL_27;
      }
    }
    uint64_t v29 = *(unsigned int *)(a1 + 40);
    if ((int)v29 >= 1)
    {
      uint64_t v30 = *(void *)(a1 + 32) + 8;
      while (!*(void *)v30 || !*(_DWORD *)(*(void *)v30 + 24))
      {
        v30 += 32;
        if (!--v29) {
          goto LABEL_53;
        }
      }
      sqlite3_log(v21, "%s unfinished backup");
    }
    goto LABEL_53;
  }
  sqlite3_log(21, "API call with %s database connection pointer", "invalid");

  return sub_1B0CE1978(186411);
}

int sqlite3_close_v2(sqlite3 *a1)
{
  return sub_1B0CF369C((uint64_t)a1, 1);
}

uint64_t sub_1B0CF3B30(uint64_t *a1, int a2)
{
  int v4 = *((_DWORD *)a1 + 193);
  uint64_t v5 = *a1;
  if (*(int *)v5 >= 2 && (int v6 = *(void (**)(void))(v5 + 136)) != 0)
  {
    v6();
    uint64_t v7 = 0;
    if (!a2)
    {
LABEL_4:
      a1[97] = v7;
      goto LABEL_9;
    }
  }
  else
  {
    double v13 = 0.0;
    (*(void (**)(uint64_t, double *))(v5 + 120))(v5, &v13);
    uint64_t v7 = (uint64_t)(v13 * 86400000.0);
    if (!a2) {
      goto LABEL_4;
    }
  }
  int v8 = v7 - *((_DWORD *)a1 + 194);
  if (v8 < 0) {
    return 0;
  }
  if (*((_DWORD *)a1 + 193) > v8)
  {
LABEL_12:
    (*(void (**)(void))(*a1 + 112))();
    return 1;
  }
  if (a2 > 46)
  {
    int v10 = 1000;
    int v11 = 1000 * a2 - 38773;
    goto LABEL_10;
  }
LABEL_9:
  uint64_t v9 = 2 * a2;
  int v10 = *(unsigned __int16 *)((char *)&unk_1B0DE5E6C + v9);
  int v11 = *(unsigned __int16 *)((char *)&unk_1B0DE5ECA + v9);
LABEL_10:
  if (v11 + v10 <= v4 || v4 - v11 >= 1) {
    goto LABEL_12;
  }
  return 0;
}

void sqlite3_interrupt(sqlite3 *a1)
{
  if (a1)
  {
    int v2 = *((unsigned __int8 *)a1 + 113);
    switch(v2)
    {
      case 186:
        goto LABEL_5;
      case 118:
LABEL_9:
        *((_DWORD *)a1 + 106) = 1;
        return;
      case 109:
LABEL_5:
        int v3 = "unopened";
        break;
      default:
        int v3 = "invalid";
        break;
    }
    sqlite3_log(21, "API call with %s database connection pointer", v3);
    if (*((unsigned __int8 *)a1 + 113) == 167) {
      goto LABEL_9;
    }
  }
  else
  {
    sqlite3_log(21, "API call with %s database connection pointer", "NULL");
  }

  sub_1B0CE1978(187130);
}

BOOL sqlite3_is_interrupted(uint64_t a1)
{
  if (a1)
  {
    int v2 = *(unsigned __int8 *)(a1 + 113);
    switch(v2)
    {
      case 186:
        goto LABEL_5;
      case 118:
        return *(_DWORD *)(a1 + 424) != 0;
      case 109:
LABEL_5:
        int v3 = "unopened";
        break;
      default:
        int v3 = "invalid";
        break;
    }
    sqlite3_log(21, "API call with %s database connection pointer", v3);
    if (*(unsigned __int8 *)(a1 + 113) == 167) {
      return *(_DWORD *)(a1 + 424) != 0;
    }
  }
  else
  {
    sqlite3_log(21, "API call with %s database connection pointer", "NULL");
  }
  sub_1B0CE1978(187146);
  return 0;
}

uint64_t sub_1B0CF3DF8(uint64_t a1, char *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void (*a11)(uint64_t))
{
  if (!a1)
  {
    double v13 = "NULL";
    goto LABEL_19;
  }
  int v12 = *(unsigned __int8 *)(a1 + 113);
  if (v12 != 186)
  {
    if (v12 != 118)
    {
      if (v12 != 109)
      {
        double v13 = "invalid";
        goto LABEL_19;
      }
      goto LABEL_5;
    }
    uint64_t v21 = *(void *)(a1 + 24);
    if (v21) {
      xmmword_1EB21CA40(v21);
    }
    if (!a11)
    {
      unsigned int v30 = sub_1B0C7DAA8(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, 0);
      goto LABEL_23;
    }
    uint64_t v22 = sub_1B0C7FC94(24);
    if (!v22)
    {
      if (!*(unsigned char *)(a1 + 103) && !*(unsigned char *)(a1 + 104))
      {
        *(unsigned char *)(a1 + 103) = 1;
        if (*(int *)(a1 + 220) >= 1) {
          *(_DWORD *)(a1 + 424) = 1;
        }
        ++*(_DWORD *)(a1 + 432);
        *(_WORD *)(a1 + 436) = 0;
        uint64_t v35 = *(void *)(a1 + 344);
        if (v35)
        {
          sub_1B0CEF2BC(v35, "out of memory", v23, v24, v25, v26, v27, v28, v37);
          for (uint64_t i = *(void *)(a1 + 344); ; ++*(_DWORD *)(i + 48))
          {
            *(_DWORD *)(i + 24) = 7;
            uint64_t i = *(void *)(i + 256);
            if (!i) {
              break;
            }
          }
        }
      }
      a11(a5);
      unsigned int v30 = 1;
      goto LABEL_30;
    }
    uint64_t v29 = (_DWORD *)v22;
    *(_DWORD *)uint64_t v22 = 0;
    *(void *)(v22 + 8) = a11;
    *(void *)(v22 + 16) = a5;
    unsigned int v30 = sub_1B0C7DAA8(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (_DWORD *)v22);
    if (!*v29)
    {
      a11(a5);
      int v31 = &off_1EB21C9E8;
      if (!dword_1EB21C9C0)
      {
LABEL_17:
        (*v31)(v29);
        goto LABEL_23;
      }
      if ((void)xmmword_1EB2201B0) {
        xmmword_1EB21CA40(xmmword_1EB2201B0);
      }
      qword_1EB220108 -= (int)off_1EB21C9F8(v29);
      --qword_1EB220150;
      off_1EB21C9E8(v29);
      uint64_t v29 = (_DWORD *)xmmword_1EB2201B0;
      if ((void)xmmword_1EB2201B0)
      {
        int v31 = &xmmword_1EB21CA50;
        goto LABEL_17;
      }
    }
LABEL_23:
    if (!v30 && !*(unsigned char *)(a1 + 103))
    {
      uint64_t v33 = 0;
      uint64_t v34 = *(void *)(a1 + 24);
      if (!v34) {
        return v33;
      }
      goto LABEL_31;
    }
LABEL_30:
    uint64_t v33 = sub_1B0D1806C(a1, v30);
    uint64_t v34 = *(void *)(a1 + 24);
    if (!v34) {
      return v33;
    }
LABEL_31:
    xmmword_1EB21CA50(v34);
    return v33;
  }
LABEL_5:
  double v13 = "unopened";
LABEL_19:
  sqlite3_log(21, "API call with %s database connection pointer", v13);

  return sub_1B0CE1978(187311);
}

int sqlite3_create_window_function(sqlite3 *db, const char *zFunctionName, int nArg, int eTextRep, void *pApp, void (__cdecl *xStep)(sqlite3_context *, int, sqlite3_value **), void (__cdecl *xFinal)(sqlite3_context *), void (__cdecl *xValue)(sqlite3_context *), void (__cdecl *xInverse)(sqlite3_context *, int, sqlite3_value **), void (__cdecl *xDestroy)(void *))
{
  return sub_1B0CF3DF8((uint64_t)db, (char *)zFunctionName, *(uint64_t *)&nArg, eTextRep, (uint64_t)pApp, 0, (uint64_t)xStep, (uint64_t)xFinal, (uint64_t)xValue, (uint64_t)xInverse, (void (*)(uint64_t))xDestroy);
}

int sqlite3_create_function16(sqlite3 *db, const void *zFunctionName, int nArg, int eTextRep, void *pApp, void (__cdecl *xFunc)(sqlite3_context *, int, sqlite3_value **), void (__cdecl *xStep)(sqlite3_context *, int, sqlite3_value **), void (__cdecl *xFinal)(sqlite3_context *))
{
  if (!db)
  {
    int v10 = "NULL";
    goto LABEL_13;
  }
  int v9 = *((unsigned __int8 *)db + 113);
  if (v9 == 186)
  {
LABEL_5:
    int v10 = "unopened";
LABEL_13:
    sqlite3_log(21, "API call with %s database connection pointer", v10);
    goto LABEL_14;
  }
  if (v9 != 118)
  {
    if (v9 != 109)
    {
      int v10 = "invalid";
      goto LABEL_13;
    }
    goto LABEL_5;
  }
  if (!zFunctionName)
  {
LABEL_14:
    return sub_1B0CE1978(187402);
  }
  uint64_t v17 = *(void *)&nArg;
  uint64_t v18 = *((void *)db + 3);
  if (v18) {
    xmmword_1EB21CA40(v18);
  }
  long long v27 = 0u;
  long long v28 = 0u;
  long long v24 = 0u;
  uint64_t v25 = 0;
  uint64_t v26 = db;
  sub_1B0C79BBC((uint64_t)&v24, (char *)zFunctionName, -1, 2u, 0);
  if ((v25 & 0x200000000) != 0)
  {
    if (BYTE6(v25) != 1) {
      sub_1B0CD43EC((int *)&v24, 1);
    }
  }
  else
  {
    BYTE6(v25) = 1;
  }
  if (*((unsigned char *)db + 103))
  {
    if (WORD2(v25) & 0x9000 | v27) {
      sub_1B0D180E4((uint64_t)&v24);
    }
    unsigned int v20 = sub_1B0C7DAA8((uint64_t)db, 0, v17, eTextRep, (uint64_t)pApp, (uint64_t)xFunc, (uint64_t)xStep, (uint64_t)xFinal, 0, 0, 0);
  }
  else
  {
    uint64_t v21 = (void *)*((void *)&v24 + 1);
    unsigned int v20 = sub_1B0C7DAA8((uint64_t)db, *((char **)&v24 + 1), v17, eTextRep, (uint64_t)pApp, (uint64_t)xFunc, (uint64_t)xStep, (uint64_t)xFinal, 0, 0, 0);
    if (v21) {
      sub_1B0D05C10(db, v21);
    }
  }
  if (v20 || *((unsigned char *)db + 103)) {
    int v22 = sub_1B0D1806C((uint64_t)db, v20);
  }
  else {
    int v22 = 0;
  }
  uint64_t v23 = *((void *)db + 3);
  if (v23) {
    xmmword_1EB21CA50(v23);
  }
  return v22;
}

uint64_t sub_1B0CF4354(uint64_t a1)
{
  if (a1 && (uint64_t v2 = *(void *)(a1 + 8)) != 0)
  {
    int v3 = sqlite3_mprintf("unable to use function %s in the requested context", *(const char **)(v2 + 8));
  }
  else
  {
    sub_1B0CE1978(97932);
    int v3 = sqlite3_mprintf("unable to use function %s in the requested context", 0);
    if (!a1)
    {
      uint64_t result = sub_1B0CE1978(97407);
      if (!v3) {
        return result;
      }
      goto LABEL_8;
    }
  }
  *(_DWORD *)(a1 + 36) = 1;
  uint64_t result = sub_1B0C79BBC(*(void *)a1, v3, -1, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
  if (!v3) {
    return result;
  }
LABEL_8:
  uint64_t v5 = (uint64_t (**)(char *))&off_1EB21C9E8;
  if (!dword_1EB21C9C0)
  {
LABEL_13:
    int v6 = *v5;
    return v6(v3);
  }
  if ((void)xmmword_1EB2201B0) {
    xmmword_1EB21CA40(xmmword_1EB2201B0);
  }
  qword_1EB220108 -= (int)off_1EB21C9F8(v3);
  --qword_1EB220150;
  uint64_t result = off_1EB21C9E8(v3);
  int v3 = (char *)xmmword_1EB2201B0;
  if ((void)xmmword_1EB2201B0)
  {
    uint64_t v5 = (uint64_t (**)(char *))&xmmword_1EB21CA50;
    goto LABEL_13;
  }
  return result;
}

void *__cdecl sqlite3_trace(sqlite3 *a1, void (__cdecl *xTrace)(void *, const char *), void *a3)
{
  if (!a1)
  {
    uint64_t v5 = "NULL";
    goto LABEL_12;
  }
  int v4 = *((unsigned __int8 *)a1 + 113);
  if (v4 == 186)
  {
LABEL_5:
    uint64_t v5 = "unopened";
LABEL_12:
    sqlite3_log(21, "API call with %s database connection pointer", v5);
    sub_1B0CE1978(187488);
    return 0;
  }
  if (v4 != 118)
  {
    if (v4 != 109)
    {
      uint64_t v5 = "invalid";
      goto LABEL_12;
    }
    goto LABEL_5;
  }
  uint64_t v8 = *((void *)a1 + 3);
  if (v8)
  {
    xmmword_1EB21CA40(v8);
    uint64_t v8 = *((void *)a1 + 3);
  }
  int v9 = (void *)*((void *)a1 + 31);
  *((unsigned char *)a1 + 110) = (xTrace != 0) << 6;
  *((void *)a1 + 30) = xTrace;
  *((void *)a1 + 31) = a3;
  if (v8) {
    xmmword_1EB21CA50(v8);
  }
  return v9;
}

int sqlite3_trace_v2(sqlite3 *a1, unsigned int uMask, int (__cdecl *xCallback)(unsigned int, void *, void *, void *), void *pCtx)
{
  if (!a1)
  {
    int v6 = "NULL";
    goto LABEL_19;
  }
  int v5 = *((unsigned __int8 *)a1 + 113);
  if (v5 == 186)
  {
LABEL_5:
    int v6 = "unopened";
LABEL_19:
    sqlite3_log(21, "API call with %s database connection pointer", v6);
    return sub_1B0CE1978(187512);
  }
  if (v5 != 118)
  {
    if (v5 != 109)
    {
      int v6 = "invalid";
      goto LABEL_19;
    }
    goto LABEL_5;
  }
  uint64_t v10 = *((void *)a1 + 3);
  if (v10)
  {
    xmmword_1EB21CA40(v10);
    uint64_t v10 = *((void *)a1 + 3);
  }
  if (uMask) {
    int v11 = xCallback;
  }
  else {
    int v11 = 0;
  }
  if (v11) {
    char v12 = uMask;
  }
  else {
    char v12 = 0;
  }
  *((unsigned char *)a1 + 110) = v12;
  *((void *)a1 + 30) = v11;
  *((void *)a1 + 31) = pCtx;
  if (v10) {
    xmmword_1EB21CA50(v10);
  }
  return 0;
}

void *__cdecl sqlite3_profile(sqlite3 *a1, void (__cdecl *xProfile)(void *, const char *, sqlite3_uint64), void *a3)
{
  if (!a1)
  {
    int v5 = "NULL";
    goto LABEL_15;
  }
  int v4 = *((unsigned __int8 *)a1 + 113);
  if (v4 == 186)
  {
LABEL_5:
    int v5 = "unopened";
LABEL_15:
    sqlite3_log(21, "API call with %s database connection pointer", v5);
    sub_1B0CE1978(187543);
    return 0;
  }
  if (v4 != 118)
  {
    if (v4 != 109)
    {
      int v5 = "invalid";
      goto LABEL_15;
    }
    goto LABEL_5;
  }
  uint64_t v8 = *((void *)a1 + 3);
  if (v8)
  {
    xmmword_1EB21CA40(v8);
    uint64_t v8 = *((void *)a1 + 3);
  }
  int v9 = (void *)*((void *)a1 + 33);
  *((void *)a1 + 32) = xProfile;
  *((void *)a1 + 33) = a3;
  if (xProfile) {
    char v10 = *((unsigned char *)a1 + 110) & 0xF | 0x80;
  }
  else {
    char v10 = *((unsigned char *)a1 + 110) & 0xF;
  }
  *((unsigned char *)a1 + 110) = v10;
  if (v8) {
    xmmword_1EB21CA50(v8);
  }
  return v9;
}

void *__cdecl sqlite3_commit_hook(sqlite3 *a1, int (__cdecl *a2)(void *), void *a3)
{
  if (!a1)
  {
    int v5 = "NULL";
    goto LABEL_11;
  }
  int v4 = *((unsigned __int8 *)a1 + 113);
  if (v4 == 186)
  {
LABEL_5:
    int v5 = "unopened";
LABEL_11:
    sqlite3_log(21, "API call with %s database connection pointer", v5);
    sub_1B0CE1978(187573);
    return 0;
  }
  if (v4 != 118)
  {
    if (v4 != 109)
    {
      int v5 = "invalid";
      goto LABEL_11;
    }
    goto LABEL_5;
  }
  uint64_t v8 = *((void *)a1 + 3);
  if (v8)
  {
    xmmword_1EB21CA40(v8);
    uint64_t v9 = *((void *)a1 + 3);
    char v10 = (void *)*((void *)a1 + 34);
    *((void *)a1 + 34) = a3;
    *((void *)a1 + 35) = a2;
    if (v9) {
      xmmword_1EB21CA50(v9);
    }
  }
  else
  {
    char v10 = (void *)*((void *)a1 + 34);
    *((void *)a1 + 34) = a3;
    *((void *)a1 + 35) = a2;
  }
  return v10;
}

void *__cdecl sqlite3_update_hook(sqlite3 *a1, void (__cdecl *a2)(void *, int, const char *, const char *, sqlite3_int64), void *a3)
{
  if (!a1)
  {
    int v5 = "NULL";
    goto LABEL_11;
  }
  int v4 = *((unsigned __int8 *)a1 + 113);
  if (v4 == 186)
  {
LABEL_5:
    int v5 = "unopened";
LABEL_11:
    sqlite3_log(21, "API call with %s database connection pointer", v5);
    sub_1B0CE1978(187598);
    return 0;
  }
  if (v4 != 118)
  {
    if (v4 != 109)
    {
      int v5 = "invalid";
      goto LABEL_11;
    }
    goto LABEL_5;
  }
  uint64_t v8 = *((void *)a1 + 3);
  if (v8)
  {
    xmmword_1EB21CA40(v8);
    uint64_t v9 = *((void *)a1 + 3);
    char v10 = (void *)*((void *)a1 + 38);
    *((void *)a1 + 38) = a3;
    *((void *)a1 + 39) = a2;
    if (v9) {
      xmmword_1EB21CA50(v9);
    }
  }
  else
  {
    char v10 = (void *)*((void *)a1 + 38);
    *((void *)a1 + 38) = a3;
    *((void *)a1 + 39) = a2;
  }
  return v10;
}

void *__cdecl sqlite3_rollback_hook(sqlite3 *a1, void (__cdecl *a2)(void *), void *a3)
{
  if (!a1)
  {
    int v5 = "NULL";
    goto LABEL_11;
  }
  int v4 = *((unsigned __int8 *)a1 + 113);
  if (v4 == 186)
  {
LABEL_5:
    int v5 = "unopened";
LABEL_11:
    sqlite3_log(21, "API call with %s database connection pointer", v5);
    sub_1B0CE1978(187623);
    return 0;
  }
  if (v4 != 118)
  {
    if (v4 != 109)
    {
      int v5 = "invalid";
      goto LABEL_11;
    }
    goto LABEL_5;
  }
  uint64_t v8 = *((void *)a1 + 3);
  if (v8)
  {
    xmmword_1EB21CA40(v8);
    uint64_t v9 = *((void *)a1 + 3);
    char v10 = (void *)*((void *)a1 + 36);
    *((void *)a1 + 36) = a3;
    *((void *)a1 + 37) = a2;
    if (v9) {
      xmmword_1EB21CA50(v9);
    }
  }
  else
  {
    char v10 = (void *)*((void *)a1 + 36);
    *((void *)a1 + 36) = a3;
    *((void *)a1 + 37) = a2;
  }
  return v10;
}

uint64_t sqlite3_preupdate_hook(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1[3];
  if (v6)
  {
    xmmword_1EB21CA40(v6);
    uint64_t v7 = a1[3];
    uint64_t v8 = a1[44];
    a1[44] = a3;
    a1[45] = a2;
    if (v7) {
      xmmword_1EB21CA50(v7);
    }
  }
  else
  {
    uint64_t v8 = a1[44];
    a1[44] = a3;
    a1[45] = a2;
  }
  return v8;
}

int sqlite3_autovacuum_pages(sqlite3 *db, unsigned int (__cdecl *a2)(void *, const char *, unsigned int, unsigned int, unsigned int), void *a3, void (__cdecl *a4)(void *))
{
  if (!db)
  {
    uint64_t v8 = "NULL";
    goto LABEL_15;
  }
  int v7 = *((unsigned __int8 *)db + 113);
  if (v7 == 186)
  {
LABEL_5:
    uint64_t v8 = "unopened";
LABEL_15:
    sqlite3_log(21, "API call with %s database connection pointer", v8);
    if (a4) {
      ((void (*)(void *))a4)(a3);
    }
    return sub_1B0CE1978(187669);
  }
  if (v7 != 118)
  {
    if (v7 != 109)
    {
      uint64_t v8 = "invalid";
      goto LABEL_15;
    }
    goto LABEL_5;
  }
  uint64_t v10 = *((void *)db + 3);
  if (v10) {
    xmmword_1EB21CA40(v10);
  }
  int v11 = (void (*)(void))*((void *)db + 41);
  if (v11) {
    v11(*((void *)db + 40));
  }
  *((void *)db + 41) = a4;
  *((void *)db + 42) = a2;
  *((void *)db + 40) = a3;
  uint64_t v12 = *((void *)db + 3);
  if (v12) {
    xmmword_1EB21CA50(v12);
  }
  return 0;
}

int sqlite3_wal_autocheckpoint(sqlite3 *db, int N)
{
  if (!db)
  {
    int v4 = "NULL";
    goto LABEL_12;
  }
  int v3 = *((unsigned __int8 *)db + 113);
  if (v3 != 186)
  {
    if (v3 != 118)
    {
      if (v3 != 109)
      {
        int v4 = "invalid";
        goto LABEL_12;
      }
      goto LABEL_5;
    }
    if (N < 1)
    {
      uint64_t v9 = *((void *)db + 3);
      if (!v9)
      {
        *((void *)db + 47) = 0;
        *((void *)db + 48) = 0;
        return 0;
      }
      xmmword_1EB21CA40(v9);
      uint64_t v7 = *((void *)db + 3);
      *((void *)db + 47) = 0;
      *((void *)db + 48) = 0;
      if (!v7) {
        return 0;
      }
    }
    else
    {
      uint64_t v5 = N;
      uint64_t v6 = *((void *)db + 3);
      if (!v6)
      {
        *((void *)db + 47) = sub_1B0CC2198;
        *((void *)db + 48) = N;
        return 0;
      }
      xmmword_1EB21CA40(v6);
      uint64_t v7 = *((void *)db + 3);
      *((void *)db + 47) = sub_1B0CC2198;
      *((void *)db + 48) = v5;
      if (!v7) {
        return 0;
      }
    }
    xmmword_1EB21CA50(v7);
    return 0;
  }
LABEL_5:
  int v4 = "unopened";
LABEL_12:
  sqlite3_log(21, "API call with %s database connection pointer", v4);

  return sub_1B0CE1978(187723);
}

void *__cdecl sqlite3_wal_hook(sqlite3 *a1, int (__cdecl *a2)(void *, sqlite3 *, const char *, int), void *a3)
{
  if (!a1)
  {
    uint64_t v5 = "NULL";
    goto LABEL_11;
  }
  int v4 = *((unsigned __int8 *)a1 + 113);
  if (v4 == 186)
  {
LABEL_5:
    uint64_t v5 = "unopened";
LABEL_11:
    sqlite3_log(21, "API call with %s database connection pointer", v5);
    sub_1B0CE1978(187747);
    return 0;
  }
  if (v4 != 118)
  {
    if (v4 != 109)
    {
      uint64_t v5 = "invalid";
      goto LABEL_11;
    }
    goto LABEL_5;
  }
  uint64_t v8 = *((void *)a1 + 3);
  if (v8)
  {
    xmmword_1EB21CA40(v8);
    uint64_t v9 = *((void *)a1 + 3);
    uint64_t v10 = (void *)*((void *)a1 + 48);
    *((void *)a1 + 47) = a2;
    *((void *)a1 + 48) = a3;
    if (v9) {
      xmmword_1EB21CA50(v9);
    }
  }
  else
  {
    uint64_t v10 = (void *)*((void *)a1 + 48);
    *((void *)a1 + 47) = a2;
    *((void *)a1 + 48) = a3;
  }
  return v10;
}

int sqlite3_wal_checkpoint_v2(sqlite3 *db, const char *zDb, int eMode, int *pnLog, int *pnCkpt)
{
  if (!db)
  {
    uint64_t v10 = "NULL";
    goto LABEL_14;
  }
  int v9 = *((unsigned __int8 *)db + 113);
  if (v9 == 186)
  {
LABEL_5:
    uint64_t v10 = "unopened";
LABEL_14:
    sqlite3_log(21, "API call with %s database connection pointer", v10);
    return sub_1B0CE1978(187779);
  }
  if (v9 != 118)
  {
    if (v9 != 109)
    {
      uint64_t v10 = "invalid";
      goto LABEL_14;
    }
    goto LABEL_5;
  }
  int v11 = pnCkpt;
  uint64_t v12 = pnLog;
  if (pnLog) {
    *pnLog = -1;
  }
  if (pnCkpt) {
    *pnCkpt = -1;
  }
  if (eMode > 3) {
    return 21;
  }
  uint64_t v17 = *((void *)db + 3);
  if (v17) {
    xmmword_1EB21CA40(v17);
  }
  if (!zDb || !*zDb)
  {
    LODWORD(v19) = 12;
    goto LABEL_41;
  }
  int v18 = *((_DWORD *)db + 10);
  uint64_t v19 = (v18 - 1);
  if (v18 < 1) {
    goto LABEL_65;
  }
  unsigned int v20 = (unsigned char **)(*((void *)db + 4) + 32 * v19);
  while (1)
  {
    uint64_t v21 = *v20;
    if (*v20) {
      break;
    }
LABEL_30:
    if (!v19)
    {
      uint64_t v26 = "main";
      for (uint64_t i = zDb; ; ++i)
      {
        uint64_t v28 = *(unsigned __int8 *)v26;
        uint64_t v29 = *(unsigned __int8 *)i;
        if (v28 == v29)
        {
          if (!*v26)
          {
            LODWORD(v19) = 0;
            goto LABEL_41;
          }
        }
        else if (byte_1B0DE1758[v28] != byte_1B0DE1758[v29])
        {
          break;
        }
        ++v26;
      }
    }
    v20 -= 4;
    BOOL v25 = (int)v19 <= 0;
    LODWORD(v19) = v19 - 1;
    if (v25)
    {
LABEL_65:
      unsigned int v37 = 1;
      sub_1B0CE79F4((uint64_t)db, 1, "unknown database: %s", (uint64_t)pnLog, (uint64_t)pnCkpt, v5, v6, v7, (char)zDb);
      goto LABEL_66;
    }
  }
  for (uint64_t j = zDb; ; ++j)
  {
    uint64_t v23 = *v21;
    uint64_t v24 = *(unsigned __int8 *)j;
    if (v23 == v24) {
      break;
    }
    if (byte_1B0DE1758[v23] != byte_1B0DE1758[v24]) {
      goto LABEL_30;
    }
LABEL_26:
    ++v21;
  }
  if (*v21) {
    goto LABEL_26;
  }
  if ((v19 & 0x80000000) != 0) {
    goto LABEL_65;
  }
LABEL_41:
  *((_DWORD *)db + 172) = 0;
  int v30 = *((_DWORD *)db + 10);
  if (v30 < 1)
  {
    unsigned int v34 = 0;
    int v32 = 0;
    BOOL v36 = 1;
  }
  else
  {
    uint64_t v31 = 0;
    int v32 = 0;
    uint64_t v33 = 8;
    do
    {
      if (v19 == 12 || v19 == v31)
      {
        unsigned int v35 = sub_1B0D78DC0(*(void *)(*((void *)db + 4) + v33), eMode, v12, v11);
        uint64_t v12 = 0;
        int v11 = 0;
        if (v35 == 5) {
          unsigned int v34 = 0;
        }
        else {
          unsigned int v34 = v35;
        }
        if (v35 == 5) {
          int v32 = 1;
        }
        int v30 = *((_DWORD *)db + 10);
      }
      else
      {
        unsigned int v34 = 0;
      }
      ++v31;
      BOOL v36 = v34 == 0;
      if (v31 >= v30) {
        break;
      }
      v33 += 32;
    }
    while (!v34);
  }
  if (v36 && v32 != 0) {
    unsigned int v37 = 5;
  }
  else {
    unsigned int v37 = v34;
  }
  *((_DWORD *)db + 20) = v37;
  if (v37 || *((void *)db + 52))
  {
    sub_1B0D0E714((uint64_t)db, v37);
    if (!v37) {
      goto LABEL_62;
    }
    goto LABEL_66;
  }
  *((_DWORD *)db + 21) = -1;
LABEL_62:
  if (*((unsigned char *)db + 103)) {
LABEL_66:
  }
    int v15 = sub_1B0D1806C((uint64_t)db, v37);
  else {
    int v15 = 0;
  }
  if (!*((_DWORD *)db + 52)) {
    *((_DWORD *)db + 106) = 0;
  }
  uint64_t v38 = *((void *)db + 3);
  if (v38) {
    xmmword_1EB21CA50(v38);
  }
  return v15;
}

int sqlite3_error_offset(sqlite3 *db)
{
  if (!db) {
    return -1;
  }
  int v2 = *((unsigned __int8 *)db + 113);
  if (v2 != 109 && v2 != 118 && v2 != 186)
  {
    sqlite3_log(21, "API call with %s database connection pointer", "invalid");
    return -1;
  }
  if (!*((_DWORD *)db + 20)) {
    return -1;
  }
  uint64_t v3 = *((void *)db + 3);
  if (!v3) {
    return *((_DWORD *)db + 21);
  }
  xmmword_1EB21CA40(v3);
  uint64_t v4 = *((void *)db + 3);
  int v5 = *((_DWORD *)db + 21);
  if (v4) {
    xmmword_1EB21CA50(v4);
  }
  return v5;
}

const void *__cdecl sqlite3_errmsg16(sqlite3 *a1)
{
  if (!a1) {
    return L"out of memory";
  }
  int v7 = *((unsigned __int8 *)a1 + 113);
  if (v7 != 109 && v7 != 118 && v7 != 186)
  {
    sqlite3_log(21, "API call with %s database connection pointer", "invalid");
    return L"bad parameter or other API misuse";
  }
  uint64_t v8 = *((void *)a1 + 3);
  if (v8) {
    xmmword_1EB21CA40(v8);
  }
  if (*((unsigned char *)a1 + 103))
  {
    int v9 = L"out of memory";
    goto LABEL_9;
  }
  uint64_t v11 = *((void *)a1 + 52);
  if (v11)
  {
    int v12 = *(unsigned __int16 *)(v11 + 20);
    if ((~v12 & 0x202) != 0 || *(unsigned char *)(v11 + 22) != 2)
    {
      if ((v12 & 1) == 0)
      {
        int v9 = (const __int16 *)sub_1B0D18254((int *)v11, 2);
        if (v9)
        {
LABEL_40:
          if (!*((unsigned char *)a1 + 103)) {
            goto LABEL_9;
          }
          goto LABEL_41;
        }
      }
    }
    else
    {
      int v9 = *(const __int16 **)(v11 + 8);
      if (v9) {
        goto LABEL_40;
      }
    }
  }
  int v14 = *((_DWORD *)a1 + 20);
  switch(v14)
  {
    case 516:
      int v15 = "abort due to ROLLBACK";
      break;
    case 101:
      int v15 = "no more rows available";
      break;
    case 100:
      int v15 = "another row available";
      break;
    default:
      if *((_DWORD *)a1 + 20) > 0x1Cu || ((0x1410004uLL >> v14)) {
        int v15 = "unknown error";
      }
      else {
        int v15 = off_1E5FF0368[*((_DWORD *)a1 + 20)];
      }
      break;
  }
  sub_1B0CE79F4((uint64_t)a1, v14, v15, v1, v2, v3, v4, v5, v20);
  uint64_t v16 = *((void *)a1 + 52);
  if (!v16)
  {
    int v9 = 0;
    goto LABEL_40;
  }
  int v17 = *(unsigned __int16 *)(v16 + 20);
  if ((~v17 & 0x202) == 0 && *(unsigned char *)(v16 + 22) == 2)
  {
    int v9 = *(const __int16 **)(v16 + 8);
    if (!*((unsigned char *)a1 + 103)) {
      goto LABEL_9;
    }
LABEL_41:
    int v18 = *((_DWORD *)a1 + 55);
    if (!v18)
    {
      *((unsigned char *)a1 + 103) = 0;
      *((_DWORD *)a1 + 106) = 0;
      int v19 = *((_DWORD *)a1 + 108) - 1;
      *((_DWORD *)a1 + 108) = v19;
      if (!v19) {
        LOWORD(v18) = *((_WORD *)a1 + 219);
      }
      *((_WORD *)a1 + 218) = v18;
    }
    goto LABEL_9;
  }
  if (v17)
  {
    int v9 = 0;
    if (*((unsigned char *)a1 + 103)) {
      goto LABEL_41;
    }
  }
  else
  {
    int v9 = (const __int16 *)sub_1B0D18254((int *)v16, 2);
    if (*((unsigned char *)a1 + 103)) {
      goto LABEL_41;
    }
  }
LABEL_9:
  uint64_t v10 = *((void *)a1 + 3);
  if (v10) {
    xmmword_1EB21CA50(v10);
  }
  return v9;
}

uint64_t sub_1B0CF5398(uint64_t result)
{
  if (*(unsigned char *)(result + 103) && !*(_DWORD *)(result + 220))
  {
    *(unsigned char *)(result + 103) = 0;
    *(_DWORD *)(result + 424) = 0;
    int v1 = *(_DWORD *)(result + 432) - 1;
    *(_DWORD *)(result + 432) = v1;
    if (v1) {
      *(_WORD *)(result + 436) = 0;
    }
    else {
      *(_WORD *)(result + 436) = *(_WORD *)(result + 438);
    }
  }
  return result;
}

int sqlite3_errcode(sqlite3 *db)
{
  if (!db) {
    return 7;
  }
  int v1 = *((unsigned __int8 *)db + 113);
  if (v1 == 109 || v1 == 118 || v1 == 186)
  {
    if (*((unsigned char *)db + 103)) {
      return 7;
    }
    return *((_DWORD *)db + 22) & *((_DWORD *)db + 20);
  }
  else
  {
    sqlite3_log(21, "API call with %s database connection pointer", "invalid");
    return sub_1B0CE1978(188008);
  }
}

int sqlite3_extended_errcode(sqlite3 *db)
{
  if (!db) {
    return 7;
  }
  int v1 = *((unsigned __int8 *)db + 113);
  if (v1 == 109 || v1 == 118 || v1 == 186)
  {
    if (*((unsigned char *)db + 103)) {
      return 7;
    }
    return *((_DWORD *)db + 20);
  }
  else
  {
    sqlite3_log(21, "API call with %s database connection pointer", "invalid");
    return sub_1B0CE1978(188017);
  }
}

int sqlite3_system_errno(sqlite3 *a1)
{
  if (a1) {
    LODWORD(a1) = *((_DWORD *)a1 + 23);
  }
  return (int)a1;
}

const char *__cdecl sqlite3_errstr(int a1)
{
  switch(a1)
  {
    case 516:
      return "abort due to ROLLBACK";
    case 101:
      return "no more rows available";
    case 100:
      return "another row available";
  }
  if a1 > 0x1Cu || ((0x1410004uLL >> a1)) {
    return "unknown error";
  }
  return off_1E5FF0368[a1];
}

int sqlite3_limit(sqlite3 *a1, int id, int newVal)
{
  if (!a1)
  {
    uint64_t v4 = "NULL";
    goto LABEL_16;
  }
  int v3 = *((unsigned __int8 *)a1 + 113);
  if (v3 == 186)
  {
LABEL_5:
    uint64_t v4 = "unopened";
LABEL_16:
    sqlite3_log(21, "API call with %s database connection pointer", v4);
    sub_1B0CE1978(188186);
    return -1;
  }
  if (v3 != 118)
  {
    if (v3 != 109)
    {
      uint64_t v4 = "invalid";
      goto LABEL_16;
    }
    goto LABEL_5;
  }
  if (id > 0xB) {
    return -1;
  }
  uint64_t v5 = (char *)a1 + 4 * id;
  int v8 = *((_DWORD *)v5 + 34);
  int v7 = (int *)(v5 + 136);
  int result = v8;
  if ((newVal & 0x80000000) == 0)
  {
    int v9 = *((_DWORD *)&xmmword_1B0DE1FF8 + id);
    if (newVal | id) {
      int v10 = newVal;
    }
    else {
      int v10 = 1;
    }
    if (v9 >= newVal) {
      int v9 = v10;
    }
    *int v7 = v9;
  }
  return result;
}

uint64_t _sqlite_auto_profile(uint64_t a1, const char *a2, unint64_t a3)
{
  return fprintf((FILE *)*MEMORY[0x1E4F143C8], "Query: %s\n Execution Time: %llu ms\n", a2, a3 / 0xF4240);
}

uint64_t _sqlite_auto_trace(const void *a1, const char *a2)
{
  return fprintf((FILE *)*MEMORY[0x1E4F143C8], "TraceSQL(%p): %s\n", a1, a2);
}

int sqlite3_create_collation_v2(sqlite3 *a1, const char *zName, int eTextRep, void *pArg, int (__cdecl *xCompare)(void *, int, const void *, int, const void *), void (__cdecl *xDestroy)(void *))
{
  if (!a1)
  {
    int v10 = "NULL";
    goto LABEL_14;
  }
  int v9 = *((unsigned __int8 *)a1 + 113);
  if (v9 == 186)
  {
LABEL_5:
    int v10 = "unopened";
LABEL_14:
    sqlite3_log(21, "API call with %s database connection pointer", v10);
    goto LABEL_15;
  }
  if (v9 != 118)
  {
    if (v9 != 109)
    {
      int v10 = "invalid";
      goto LABEL_14;
    }
    goto LABEL_5;
  }
  if (!zName)
  {
LABEL_15:
    return sub_1B0CE1978(189176);
  }
  unsigned __int8 v15 = eTextRep;
  uint64_t v16 = *((void *)a1 + 3);
  if (v16) {
    xmmword_1EB21CA40(v16);
  }
  unsigned int v17 = sub_1B0C792E4((uint64_t)a1, (char *)zName, v15, (uint64_t)pArg, (uint64_t)xCompare, (uint64_t)xDestroy, v6, v7);
  if (v17 || *((unsigned char *)a1 + 103)) {
    int v18 = sub_1B0D1806C((uint64_t)a1, v17);
  }
  else {
    int v18 = 0;
  }
  uint64_t v20 = *((void *)a1 + 3);
  if (v20) {
    xmmword_1EB21CA50(v20);
  }
  return v18;
}

int sqlite3_create_collation16(sqlite3 *a1, const void *zName, int eTextRep, void *pArg, int (__cdecl *xCompare)(void *, int, const void *, int, const void *))
{
  if (!a1)
  {
    uint64_t v7 = "NULL";
    goto LABEL_13;
  }
  int v6 = *((unsigned __int8 *)a1 + 113);
  if (v6 == 186)
  {
LABEL_5:
    uint64_t v7 = "unopened";
LABEL_13:
    sqlite3_log(21, "API call with %s database connection pointer", v7);
    goto LABEL_14;
  }
  if (v6 != 118)
  {
    if (v6 != 109)
    {
      uint64_t v7 = "invalid";
      goto LABEL_13;
    }
    goto LABEL_5;
  }
  if (!zName)
  {
LABEL_14:
    return sub_1B0CE1978(189201);
  }
  unsigned __int8 v11 = eTextRep;
  uint64_t v12 = *((void *)a1 + 3);
  if (v12) {
    xmmword_1EB21CA40(v12);
  }
  long long v23 = 0u;
  long long v24 = 0u;
  long long v20 = 0u;
  uint64_t v21 = 0;
  int v22 = a1;
  sub_1B0C79BBC((uint64_t)&v20, (char *)zName, -1, 2u, 0);
  if ((v21 & 0x200000000) != 0)
  {
    if (BYTE6(v21) != 1) {
      sub_1B0CD43EC((int *)&v20, 1);
    }
  }
  else
  {
    BYTE6(v21) = 1;
  }
  if (*((unsigned char *)a1 + 103))
  {
    if (WORD2(v21) & 0x9000 | v23) {
      sub_1B0D180E4((uint64_t)&v20);
    }
  }
  else
  {
    uint64_t v16 = (void *)*((void *)&v20 + 1);
    if (*((void *)&v20 + 1))
    {
      unsigned int v17 = sub_1B0C792E4((uint64_t)a1, *((char **)&v20 + 1), v11, (uint64_t)pArg, (uint64_t)xCompare, 0, v13, v14);
      sub_1B0D05C10(a1, v16);
      goto LABEL_25;
    }
  }
  unsigned int v17 = 0;
LABEL_25:
  if (v17 || *((unsigned char *)a1 + 103)) {
    int v18 = sub_1B0D1806C((uint64_t)a1, v17);
  }
  else {
    int v18 = 0;
  }
  uint64_t v19 = *((void *)a1 + 3);
  if (v19) {
    xmmword_1EB21CA50(v19);
  }
  return v18;
}

int sqlite3_collation_needed(sqlite3 *a1, void *a2, void (__cdecl *a3)(void *, sqlite3 *, int, const char *))
{
  if (!a1)
  {
    uint64_t v5 = "NULL";
    goto LABEL_11;
  }
  int v4 = *((unsigned __int8 *)a1 + 113);
  if (v4 == 186)
  {
LABEL_5:
    uint64_t v5 = "unopened";
LABEL_11:
    sqlite3_log(21, "API call with %s database connection pointer", v5);
    return sub_1B0CE1978(189226);
  }
  if (v4 != 118)
  {
    if (v4 != 109)
    {
      uint64_t v5 = "invalid";
      goto LABEL_11;
    }
    goto LABEL_5;
  }
  uint64_t v8 = *((void *)a1 + 3);
  if (v8)
  {
    xmmword_1EB21CA40(v8);
    uint64_t v9 = *((void *)a1 + 3);
    *((void *)a1 + 49) = a3;
    *((void *)a1 + 50) = 0;
    *((void *)a1 + 51) = a2;
    if (v9) {
      xmmword_1EB21CA50(v9);
    }
  }
  else
  {
    *((void *)a1 + 49) = a3;
    *((void *)a1 + 50) = 0;
    *((void *)a1 + 51) = a2;
  }
  return 0;
}

int sqlite3_collation_needed16(sqlite3 *a1, void *a2, void (__cdecl *a3)(void *, sqlite3 *, int, const void *))
{
  if (!a1)
  {
    uint64_t v5 = "NULL";
    goto LABEL_11;
  }
  int v4 = *((unsigned __int8 *)a1 + 113);
  if (v4 == 186)
  {
LABEL_5:
    uint64_t v5 = "unopened";
LABEL_11:
    sqlite3_log(21, "API call with %s database connection pointer", v5);
    return sub_1B0CE1978(189247);
  }
  if (v4 != 118)
  {
    if (v4 != 109)
    {
      uint64_t v5 = "invalid";
      goto LABEL_11;
    }
    goto LABEL_5;
  }
  uint64_t v8 = *((void *)a1 + 3);
  if (v8)
  {
    xmmword_1EB21CA40(v8);
    uint64_t v9 = *((void *)a1 + 3);
    *((void *)a1 + 49) = 0;
    *((void *)a1 + 50) = a3;
    *((void *)a1 + 51) = a2;
    if (v9) {
      xmmword_1EB21CA50(v9);
    }
  }
  else
  {
    *((void *)a1 + 49) = 0;
    *((void *)a1 + 50) = a3;
    *((void *)a1 + 51) = a2;
  }
  return 0;
}

int sqlite3_global_recover(void)
{
  return 0;
}

int sqlite3_get_autocommit(sqlite3 *a1)
{
  if (a1)
  {
    int v1 = *((unsigned __int8 *)a1 + 113);
    switch(v1)
    {
      case 186:
        goto LABEL_5;
      case 118:
        return *((unsigned __int8 *)a1 + 101);
      case 109:
LABEL_5:
        uint64_t v2 = "unopened";
        break;
      default:
        uint64_t v2 = "invalid";
        break;
    }
  }
  else
  {
    uint64_t v2 = "NULL";
  }
  sqlite3_log(21, "API call with %s database connection pointer", v2);
  sub_1B0CE1978(189277);
  return 0;
}

int sqlite3_table_column_metadata(sqlite3 *db, const char *zDbName, const char *zTableName, const char *zColumnName, const char **pzDataType, const char **pzCollSeq, int *pNotNull, int *pPrimaryKey, int *pAutoinc)
{
  uint64_t v9 = pPrimaryKey;
  int v10 = pNotNull;
  uint64_t v14 = (char *)zTableName;
  unsigned int v17 = pAutoinc;
  long long v65 = 0;
  if (pzDataType) {
    *pzDataType = 0;
  }
  if (pzCollSeq) {
    *pzCollSeq = 0;
  }
  if (!db)
  {
    uint64_t v19 = "NULL";
    goto LABEL_44;
  }
  int v18 = *((unsigned __int8 *)db + 113);
  if (v18 == 186)
  {
LABEL_9:
    uint64_t v19 = "unopened";
LABEL_44:
    sqlite3_log(21, "API call with %s database connection pointer", v19);
    goto LABEL_45;
  }
  if (v18 != 118)
  {
    if (v18 != 109)
    {
      uint64_t v19 = "invalid";
      goto LABEL_44;
    }
    goto LABEL_9;
  }
  if (!zTableName)
  {
LABEL_45:
    return sub_1B0CE1978(189398);
  }
  uint64_t v20 = *((void *)db + 3);
  if (v20) {
    xmmword_1EB21CA40(v20);
  }
  if (!*((unsigned char *)db + 111)) {
    sub_1B0D0E4C4((uint64_t)db);
  }
  unsigned int v27 = sub_1B0C878D8((uint64_t)db, &v65, (uint64_t)zTableName, (uint64_t)zColumnName, (uint64_t)pzDataType, (uint64_t)pzCollSeq, (uint64_t)pNotNull, (uint64_t)pPrimaryKey);
  if (v27) {
    goto LABEL_17;
  }
  uint64_t v28 = sub_1B0CF60C8((uint64_t)db, v14, zDbName);
  if (v28)
  {
    if (*(unsigned char *)(v28 + 63) != 2)
    {
      if (!zColumnName) {
        goto LABEL_75;
      }
      uint64_t v43 = *(__int16 *)(v28 + 54);
      if ((int)v43 >= 1)
      {
        uint64_t v44 = 0;
        uint64_t v45 = *(void *)(v28 + 8);
        while (1)
        {
          uint64_t v46 = *(unsigned char **)(v45 + 16 * v44);
          for (uint64_t i = zColumnName; ; ++i)
          {
            uint64_t v48 = *v46;
            uint64_t v49 = *(unsigned __int8 *)i;
            if (v48 != v49) {
              break;
            }
            if (!*v46)
            {
              uint64_t v33 = v45 + 16 * v44;
              goto LABEL_66;
            }
LABEL_59:
            ++v46;
          }
          if (byte_1B0DE1758[v48] == byte_1B0DE1758[v49]) {
            goto LABEL_59;
          }
          if (++v44 == v43) {
            goto LABEL_67;
          }
        }
      }
      LODWORD(v44) = 0;
      uint64_t v33 = 0;
LABEL_66:
      if (v44 != v43) {
        goto LABEL_71;
      }
LABEL_67:
      if ((*(unsigned char *)(v28 + 48) & 0x80) == 0)
      {
        uint64_t v50 = v28;
        if (sub_1B0CF6954(zColumnName))
        {
          uint64_t v28 = v50;
          if ((*(__int16 *)(v50 + 52) & 0x80000000) == 0)
          {
            LODWORD(v44) = *(unsigned __int16 *)(v50 + 52);
            uint64_t v33 = *(void *)(v50 + 8) + 16 * *(unsigned __int16 *)(v50 + 52);
LABEL_71:
            if (v33)
            {
              __int16 v51 = *(_WORD *)(v33 + 14);
              if ((v51 & 4) != 0)
              {
                int v62 = v44;
                uint64_t v64 = v28;
                size_t v54 = strlen(*(const char **)v33);
                __int16 v51 = *(_WORD *)(v33 + 14);
                size_t v55 = *(void *)v33 + v54;
                LODWORD(v44) = v62;
                uint64_t v28 = v64;
                uint64_t v29 = (const char *)(v55 + 1);
              }
              else
              {
                unint64_t v52 = *(unsigned __int8 *)(v33 + 8);
                if (v52 >= 0x10) {
                  uint64_t v29 = off_1E9B51F20[(v52 >> 4) - 1];
                }
                else {
                  uint64_t v29 = 0;
                }
              }
              if ((v51 & 0x200) != 0)
              {
                uint64_t v56 = *(void *)v33 - 1;
                while (*(unsigned __int8 *)++v56)
                  ;
                if ((v51 & 4) != 0)
                {
                  while (*(unsigned __int8 *)++v56)
                    ;
                }
                long long v53 = (const char *)(v56 + 1);
              }
              else
              {
                long long v53 = 0;
              }
              BOOL v31 = (*(unsigned char *)(v33 + 8) & 0xF) != 0;
              int v32 = v51 & 1;
              if (v44 == *(__int16 *)(v28 + 52)) {
                LODWORD(v33) = (*(_DWORD *)(v28 + 48) >> 3) & 1;
              }
              else {
                LODWORD(v33) = 0;
              }
LABEL_78:
              int v30 = "BINARY";
              if (v53) {
                int v30 = v53;
              }
              if (*((unsigned char *)db + 111)) {
                goto LABEL_20;
              }
              goto LABEL_19;
            }
            long long v53 = 0;
            BOOL v31 = 0;
LABEL_77:
            int v32 = 1;
            uint64_t v29 = "INTEGER";
            goto LABEL_78;
          }
LABEL_75:
          long long v53 = 0;
          BOOL v31 = 0;
          LODWORD(v33) = 0;
          goto LABEL_77;
        }
      }
    }
LABEL_17:
    uint64_t v28 = 0;
  }
  uint64_t v29 = 0;
  int v30 = 0;
  BOOL v31 = 0;
  int v32 = 0;
  LODWORD(v33) = 0;
  if (!*((unsigned char *)db + 111))
  {
LABEL_19:
    unsigned int v59 = v27;
    long long v61 = v10;
    uint64_t v63 = v28;
    long long v60 = v9;
    unsigned int v34 = v29;
    char v35 = (char)v14;
    LODWORD(v14) = v31;
    int v36 = v32;
    unsigned int v37 = v30;
    sub_1B0D0E55C((uint64_t)db);
    int v30 = v37;
    int v32 = v36;
    BOOL v31 = (int)v14;
    LOBYTE(v14) = v35;
    uint64_t v29 = v34;
    unsigned int v17 = pAutoinc;
    uint64_t v9 = v60;
    int v10 = v61;
    uint64_t v28 = v63;
    unsigned int v27 = v59;
  }
LABEL_20:
  if (pzDataType) {
    *pzDataType = v29;
  }
  if (pzCollSeq) {
    *pzCollSeq = v30;
  }
  if (v10) {
    *int v10 = v31;
  }
  if (v9) {
    *uint64_t v9 = v32;
  }
  if (v17) {
    *unsigned int v17 = v33;
  }
  uint64_t v38 = v65;
  if (!v27 && !v28)
  {
    if (v65) {
      sub_1B0D05C10(db, v65);
    }
    uint64_t v38 = (char *)sub_1B0C904AC((uint64_t)db, "no such table column: %s.%s", v21, v22, v23, v24, v25, v26, (char)v14);
    long long v65 = v38;
    unsigned int v27 = 1;
  }
  if (v38) {
    uint64_t v39 = "%s";
  }
  else {
    uint64_t v39 = 0;
  }
  sub_1B0CE79F4((uint64_t)db, v27, v39, v22, v23, v24, v25, v26, (char)v38);
  if (v65) {
    sub_1B0D05C10(db, v65);
  }
  if (v27 || *((unsigned char *)db + 103)) {
    int v40 = sub_1B0D1806C((uint64_t)db, v27);
  }
  else {
    int v40 = 0;
  }
  uint64_t v42 = *((void *)db + 3);
  if (v42) {
    xmmword_1EB21CA50(v42);
  }
  return v40;
}

uint64_t sub_1B0CF60C8(uint64_t a1, char *a2, unsigned char *a3)
{
  if (!a3)
  {
    uint64_t v15 = *(void *)(a1 + 32);
    uint64_t v16 = *(void *)(v15 + 56);
    uint64_t v17 = *(void *)(v16 + 24);
    if (v17)
    {
      int v18 = *a2;
      if (*a2)
      {
        unsigned int v19 = 0;
        uint64_t v20 = a2 + 1;
        do
        {
          unsigned int v19 = -1640531535 * (v19 + byte_1B0DE1758[v18]);
          int v21 = *v20++;
          int v18 = v21;
        }
        while (v21);
      }
      else
      {
        unsigned int v19 = 0;
      }
      size_t v54 = (_DWORD *)(v17 + 16 * (v19 % *(_DWORD *)(v16 + 8)));
      uint64_t v22 = (uint64_t *)(v54 + 2);
      int v23 = *v54;
      if (v23)
      {
        do
        {
LABEL_67:
          uint64_t v22 = (uint64_t *)*v22;
          size_t v55 = (unsigned char *)v22[3];
          for (uint64_t i = a2; ; ++i)
          {
            uint64_t v57 = *v55;
            uint64_t v58 = *i;
            if (v57 != v58) {
              break;
            }
            if (!*v55) {
              goto LABEL_24;
            }
LABEL_69:
            ++v55;
          }
          if (byte_1B0DE1758[v57] == byte_1B0DE1758[v58]) {
            goto LABEL_69;
          }
          --v23;
        }
        while (v23);
        uint64_t v22 = &qword_1E9B52220;
LABEL_24:
        uint64_t v24 = v22[2];
        if (v24) {
          return v24;
        }
        uint64_t v25 = *(void *)(v15 + 24);
        uint64_t v26 = *(void *)(v25 + 24);
        if (v26)
        {
          int v27 = *a2;
          if (*a2)
          {
            unsigned int v28 = 0;
            uint64_t v29 = a2 + 1;
            do
            {
              unsigned int v28 = -1640531535 * (v28 + byte_1B0DE1758[v27]);
              int v30 = *v29++;
              int v27 = v30;
            }
            while (v30);
          }
          else
          {
            unsigned int v28 = 0;
          }
          uint64_t v85 = (_DWORD *)(v26 + 16 * (v28 % *(_DWORD *)(v25 + 8)));
          unsigned int v59 = (uint64_t *)(v85 + 2);
          int v60 = *v85;
          if (v60)
          {
            while (1)
            {
LABEL_116:
              unsigned int v59 = (uint64_t *)*v59;
              BOOL v86 = (unsigned char *)v59[3];
              for (uint64_t j = a2; ; ++j)
              {
                uint64_t v88 = *v86;
                uint64_t v89 = *j;
                if (v88 != v89) {
                  break;
                }
                if (!*v86) {
                  goto LABEL_77;
                }
LABEL_118:
                ++v86;
              }
              if (byte_1B0DE1758[v88] == byte_1B0DE1758[v89]) {
                goto LABEL_118;
              }
              if (!--v60)
              {
                unsigned int v59 = &qword_1E9B52220;
LABEL_77:
                uint64_t v24 = v59[2];
                if (v24) {
                  return v24;
                }
                uint64_t v61 = *(unsigned int *)(a1 + 40);
                if ((int)v61 >= 3)
                {
                  uint64_t v62 = 2;
                  while (1)
                  {
                    uint64_t v63 = *(void *)(v15 + 32 * v62 + 24);
                    uint64_t v64 = *(void *)(v63 + 24);
                    if (v64) {
                      break;
                    }
                    uint64_t v69 = (uint64_t *)(v63 + 16);
                    int v70 = *(_DWORD *)(v63 + 12);
                    if (v70) {
                      goto LABEL_92;
                    }
LABEL_86:
                    uint64_t v69 = &qword_1E9B52220;
LABEL_87:
                    uint64_t v24 = v69[2];
                    if (v24) {
                      return v24;
                    }
                    if (++v62 == v61) {
                      goto LABEL_101;
                    }
                  }
                  int v65 = *a2;
                  if (*a2)
                  {
                    unsigned int v66 = 0;
                    long long v67 = a2 + 1;
                    do
                    {
                      unsigned int v66 = -1640531535 * (v66 + byte_1B0DE1758[v65]);
                      int v68 = *v67++;
                      int v65 = v68;
                    }
                    while (v68);
                  }
                  else
                  {
                    unsigned int v66 = 0;
                  }
                  uint64_t v71 = (_DWORD *)(v64 + 16 * (v66 % *(_DWORD *)(v63 + 8)));
                  uint64_t v69 = (uint64_t *)(v71 + 2);
                  int v70 = *v71;
                  if (!v70) {
                    goto LABEL_86;
                  }
LABEL_92:
                  uint64_t v69 = (uint64_t *)*v69;
                  int v72 = (unsigned char *)v69[3];
                  for (uint64_t k = a2; ; ++k)
                  {
                    uint64_t v74 = *v72;
                    uint64_t v75 = *k;
                    if (v74 == v75)
                    {
                      if (!*v72) {
                        goto LABEL_87;
                      }
                    }
                    else if (byte_1B0DE1758[v74] != byte_1B0DE1758[v75])
                    {
                      if (!--v70) {
                        goto LABEL_86;
                      }
                      goto LABEL_92;
                    }
                    ++v72;
                  }
                }
LABEL_101:
                if (!sqlite3_strnicmp(a2, "sqlite_", 7))
                {
                  uint64_t v77 = a2 + 7;
                  uint64_t v78 = "schema";
                  for (m = a2 + 7; ; ++m)
                  {
                    uint64_t v80 = *m;
                    uint64_t v81 = *v78;
                    if (v80 == v81)
                    {
                      if (!*m)
                      {
                        int v32 = (_DWORD *)(*(void *)(*(void *)(a1 + 32) + 24) + 8);
LABEL_127:
                        uint64_t v90 = "sqlite_master";
LABEL_128:
                        return sub_1B0D22710((uint64_t)v32, (unsigned __int8 *)v90);
                      }
                    }
                    else if (byte_1B0DE1758[v80] != byte_1B0DE1758[v81])
                    {
                      for (uint64_t n = "temp_schema"; ; ++n)
                      {
                        uint64_t v83 = *v77;
                        uint64_t v84 = *n;
                        if (v83 == v84)
                        {
                          if (!*v77)
                          {
                            int v32 = (_DWORD *)(*(void *)(*(void *)(a1 + 32) + 56) + 8);
                            uint64_t v90 = "sqlite_temp_master";
                            goto LABEL_128;
                          }
                        }
                        else if (byte_1B0DE1758[v83] != byte_1B0DE1758[v84])
                        {
                          return 0;
                        }
                        ++v77;
                      }
                    }
                    ++v78;
                  }
                }
                return 0;
              }
            }
          }
        }
        else
        {
          unsigned int v59 = (uint64_t *)(v25 + 16);
          int v60 = *(_DWORD *)(v25 + 12);
          if (v60) {
            goto LABEL_116;
          }
        }
        unsigned int v59 = &qword_1E9B52220;
        goto LABEL_77;
      }
    }
    else
    {
      uint64_t v22 = (uint64_t *)(v16 + 16);
      int v23 = *(_DWORD *)(v16 + 12);
      if (v23) {
        goto LABEL_67;
      }
    }
    uint64_t v22 = &qword_1E9B52220;
    goto LABEL_24;
  }
  uint64_t v5 = *(unsigned int *)(a1 + 40);
  if ((int)v5 < 1)
  {
LABEL_11:
    for (iuint64_t i = "main"; ; ++ii)
    {
      uint64_t v13 = *a3;
      uint64_t v14 = *(unsigned __int8 *)ii;
      if (v13 == v14)
      {
        if (!*a3)
        {
          LODWORD(v6) = 0;
          uint64_t v7 = *(void *)(a1 + 32);
          goto LABEL_31;
        }
      }
      else if (byte_1B0DE1758[v13] != byte_1B0DE1758[v14])
      {
        return 0;
      }
      ++a3;
    }
  }
  uint64_t v6 = 0;
  uint64_t v7 = *(void *)(a1 + 32);
LABEL_4:
  uint64_t v8 = *(unsigned __int8 **)(v7 + 32 * v6);
  for (juint64_t j = a3; ; ++jj)
  {
    uint64_t v10 = *jj;
    uint64_t v11 = *v8;
    if (v10 == v11) {
      break;
    }
    if (byte_1B0DE1758[v10] != byte_1B0DE1758[v11])
    {
      if (++v6 == v5) {
        goto LABEL_11;
      }
      goto LABEL_4;
    }
LABEL_6:
    ++v8;
  }
  if (*jj) {
    goto LABEL_6;
  }
LABEL_31:
  uint64_t v31 = *(void *)(v7 + 32 * v6 + 24);
  int v32 = (_DWORD *)(v31 + 8);
  uint64_t v33 = *(void *)(v31 + 24);
  if (!v33)
  {
    uint64_t v38 = (uint64_t *)(v31 + 16);
    int v39 = *(_DWORD *)(v31 + 12);
    if (v39) {
      goto LABEL_57;
    }
LABEL_37:
    uint64_t v38 = &qword_1E9B52220;
    goto LABEL_38;
  }
  int v34 = *a2;
  if (*a2)
  {
    unsigned int v35 = 0;
    int v36 = a2 + 1;
    do
    {
      unsigned int v35 = -1640531535 * (v35 + byte_1B0DE1758[v34]);
      int v37 = *v36++;
      int v34 = v37;
    }
    while (v37);
  }
  else
  {
    unsigned int v35 = 0;
  }
  uint64_t v49 = (_DWORD *)(v33 + 16 * (v35 % *v32));
  uint64_t v38 = (uint64_t *)(v49 + 2);
  int v39 = *v49;
  if (!v39) {
    goto LABEL_37;
  }
LABEL_57:
  while (2)
  {
    uint64_t v38 = (uint64_t *)*v38;
    uint64_t v50 = (unsigned char *)v38[3];
    for (kuint64_t k = a2; ; ++kk)
    {
      uint64_t v52 = *v50;
      uint64_t v53 = *kk;
      if (v52 != v53) {
        break;
      }
      if (!*v50) {
        goto LABEL_38;
      }
LABEL_59:
      ++v50;
    }
    if (byte_1B0DE1758[v52] == byte_1B0DE1758[v53]) {
      goto LABEL_59;
    }
    if (--v39) {
      continue;
    }
    break;
  }
  uint64_t v38 = &qword_1E9B52220;
LABEL_38:
  uint64_t v24 = v38[2];
  if (v24) {
    return v24;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v40 = *a2;
  if (!*a2)
  {
    int v76 = 0;
    uint64_t v48 = "sqlite_";
    goto LABEL_141;
  }
  if ((v40 & 0xFFFFFFDF) != 0x53)
  {
    __int16 v47 = &byte_1B0DE1758[v40];
    uint64_t v48 = "sqlite_";
LABEL_140:
    int v76 = *v47;
    goto LABEL_141;
  }
  uint64_t v41 = a2[1];
  if (!a2[1])
  {
    int v76 = 0;
    uint64_t v48 = "qlite_";
    goto LABEL_141;
  }
  if ((v41 & 0xFFFFFFDF) != 0x51)
  {
    __int16 v47 = &byte_1B0DE1758[v41];
    uint64_t v48 = "qlite_";
    goto LABEL_140;
  }
  uint64_t v42 = a2[2];
  if (!a2[2])
  {
    int v76 = 0;
    uint64_t v48 = "lite_";
    goto LABEL_141;
  }
  if ((v42 & 0xFFFFFFDF) != 0x4C)
  {
    __int16 v47 = &byte_1B0DE1758[v42];
    uint64_t v48 = "lite_";
    goto LABEL_140;
  }
  uint64_t v43 = a2[3];
  if (!a2[3])
  {
    int v76 = 0;
    uint64_t v48 = "ite_";
    goto LABEL_141;
  }
  if ((v43 & 0xFFFFFFDF) != 0x49)
  {
    __int16 v47 = &byte_1B0DE1758[v43];
    uint64_t v48 = "ite_";
    goto LABEL_140;
  }
  uint64_t v44 = a2[4];
  if (!a2[4])
  {
    int v76 = 0;
    uint64_t v48 = "te_";
    goto LABEL_141;
  }
  if ((v44 & 0xFFFFFFDF) != 0x54)
  {
    __int16 v47 = &byte_1B0DE1758[v44];
    uint64_t v48 = "te_";
    goto LABEL_140;
  }
  uint64_t v45 = a2[5];
  if (!a2[5])
  {
    int v76 = 0;
    uint64_t v48 = "e_";
    goto LABEL_141;
  }
  if ((v45 & 0xFFFFFFDF) != 0x45)
  {
    __int16 v47 = &byte_1B0DE1758[v45];
    uint64_t v48 = "e_";
    goto LABEL_140;
  }
  uint64_t v46 = a2[6];
  if (!a2[6])
  {
    int v76 = 0;
    uint64_t v48 = "_";
LABEL_141:
    if (v76 == byte_1B0DE1758[*v48]) {
      goto LABEL_142;
    }
    return 0;
  }
  if (v46 != 95)
  {
    __int16 v47 = &byte_1B0DE1758[v46];
    uint64_t v48 = "_";
    goto LABEL_140;
  }
LABEL_142:
  int v92 = a2 + 7;
  if (v6 != 1)
  {
    for (uint64_t mm = "schema"; ; ++mm)
    {
      uint64_t v105 = *v92;
      uint64_t v106 = *mm;
      if (v105 == v106)
      {
        if (!*v92) {
          goto LABEL_127;
        }
      }
      else if (byte_1B0DE1758[v105] != byte_1B0DE1758[v106])
      {
        return 0;
      }
      ++v92;
    }
  }
  unsigned int v93 = "temp_schema";
  unsigned int v94 = a2 + 7;
  while (2)
  {
    uint64_t v95 = *v94;
    uint64_t v96 = *v93;
    if (v95 != v96)
    {
      if (byte_1B0DE1758[v95] != byte_1B0DE1758[v96])
      {
        long long v97 = "schema";
        for (nuint64_t n = a2 + 7; ; ++nn)
        {
          uint64_t v99 = *nn;
          uint64_t v100 = *v97;
          if (v99 == v100)
          {
            if (!*nn) {
              goto LABEL_166;
            }
          }
          else if (byte_1B0DE1758[v99] != byte_1B0DE1758[v100])
          {
            for (i1 = "master"; ; ++i1)
            {
              uint64_t v102 = *v92;
              uint64_t v103 = *i1;
              if (v102 == v103)
              {
                if (!*v92) {
                  goto LABEL_166;
                }
              }
              else if (byte_1B0DE1758[v102] != byte_1B0DE1758[v103])
              {
                return 0;
              }
              ++v92;
            }
          }
          ++v97;
        }
      }
      goto LABEL_145;
    }
    if (*v94)
    {
LABEL_145:
      ++v94;
      ++v93;
      continue;
    }
    break;
  }
LABEL_166:
  uint64_t v107 = *(void *)(v7 + 56);
  uint64_t v108 = *(void *)(v107 + 24);
  if (v108)
  {
    long long v109 = (_DWORD *)(v108 + 16 * (0x55F9AA32u % *(_DWORD *)(v107 + 8)));
    long long v110 = (uint64_t *)(v109 + 2);
  }
  else
  {
    long long v110 = (uint64_t *)(v107 + 16);
    long long v109 = (_DWORD *)(v107 + 12);
  }
  int v111 = *v109;
  if (!v111) {
    return qword_1E9B52230;
  }
  while (2)
  {
    long long v110 = (uint64_t *)*v110;
    uint64_t v112 = (unsigned char *)v110[3];
    long long v113 = "sqlite_temp_master";
    while (2)
    {
      uint64_t v114 = *v112;
      uint64_t v115 = *(unsigned __int8 *)v113;
      if (v114 == v115)
      {
        if (!*v112) {
          return v110[2];
        }
        goto LABEL_172;
      }
      if (byte_1B0DE1758[v114] == byte_1B0DE1758[v115])
      {
LABEL_172:
        ++v112;
        ++v113;
        continue;
      }
      break;
    }
    if (--v111) {
      continue;
    }
    break;
  }
  long long v110 = &qword_1E9B52220;
  return v110[2];
}

uint64_t sub_1B0CF6954(unsigned char *a1)
{
  int v1 = "_ROWID_";
  for (uint64_t i = a1; ; ++i)
  {
    uint64_t v3 = *i;
    uint64_t v4 = *(unsigned __int8 *)v1;
    if (v3 != v4) {
      break;
    }
    if (!*i) {
      return 1;
    }
LABEL_3:
    ++v1;
  }
  if (byte_1B0DE1758[v3] == byte_1B0DE1758[v4]) {
    goto LABEL_3;
  }
  uint64_t v6 = "ROWID";
  for (uint64_t j = a1; ; ++j)
  {
    uint64_t v8 = *j;
    uint64_t v9 = *(unsigned __int8 *)v6;
    if (v8 != v9) {
      break;
    }
    if (!*j) {
      return 1;
    }
LABEL_9:
    ++v6;
  }
  if (byte_1B0DE1758[v8] == byte_1B0DE1758[v9]) {
    goto LABEL_9;
  }
  for (uint64_t k = "OID"; ; ++k)
  {
    uint64_t v11 = *a1;
    uint64_t v12 = *(unsigned __int8 *)k;
    if (v11 != v12) {
      break;
    }
    if (!*a1) {
      return 1;
    }
LABEL_15:
    ++a1;
  }
  if (byte_1B0DE1758[v11] == byte_1B0DE1758[v12]) {
    goto LABEL_15;
  }
  return 0;
}

char *sub_1B0CF6A2C(uint64_t a1, uint64_t a2)
{
  if ((*(_WORD *)(a1 + 14) & 4) != 0) {
    return (char *)(*(void *)a1 + strlen(*(const char **)a1) + 1);
  }
  unint64_t v2 = *(unsigned __int8 *)(a1 + 8);
  if (v2 >= 0x10) {
    return off_1E9B51F20[(v2 >> 4) - 1];
  }
  return (char *)a2;
}

int sqlite3_sleep(int a1)
{
  if (sqlite3_initialize()) {
    return 0;
  }
  if ((_BYTE)word_1EB21C9C4 && (uint64_t v3 = qword_1EB21CA30(2)) != 0)
  {
    uint64_t v4 = v3;
    xmmword_1EB21CA40(v3);
    uint64_t v5 = qword_1EB2201A8;
    xmmword_1EB21CA50(v4);
    if (!v5) {
      return 0;
    }
  }
  else
  {
    uint64_t v5 = qword_1EB2201A8;
    if (!qword_1EB2201A8) {
      return 0;
    }
  }
  if (a1 >= 0) {
    uint64_t v6 = (1000 * a1);
  }
  else {
    uint64_t v6 = 0;
  }
  return (*(int (**)(uint64_t, uint64_t))(v5 + 112))(v5, v6) / 1000;
}

int sqlite3_file_control(sqlite3 *a1, const char *zDbName, int op, void *a4)
{
  if (!a1)
  {
    uint64_t v7 = "NULL";
    goto LABEL_30;
  }
  int v6 = *((unsigned __int8 *)a1 + 113);
  if (v6 != 186)
  {
    if (v6 != 118)
    {
      if (v6 != 109)
      {
        uint64_t v7 = "invalid";
        goto LABEL_30;
      }
      goto LABEL_5;
    }
    uint64_t v9 = *(void *)&op;
    uint64_t v11 = *((void *)a1 + 3);
    if (v11) {
      xmmword_1EB21CA40(v11);
    }
    if (!zDbName)
    {
      LODWORD(v13) = 0;
      uint64_t v14 = *((void *)a1 + 4);
      goto LABEL_35;
    }
    int v12 = *((_DWORD *)a1 + 10);
    uint64_t v13 = (v12 - 1);
    if (v12 < 1) {
      goto LABEL_42;
    }
    uint64_t v14 = *((void *)a1 + 4);
    uint64_t v15 = (unsigned char **)(v14 + 32 * v13);
    while (1)
    {
      uint64_t v16 = *v15;
      if (*v15) {
        break;
      }
LABEL_19:
      if (!v13)
      {
        int v21 = "main";
        for (uint64_t i = zDbName; ; ++i)
        {
          uint64_t v23 = *(unsigned __int8 *)v21;
          uint64_t v24 = *(unsigned __int8 *)i;
          if (v23 == v24)
          {
            if (!*v21)
            {
              LODWORD(v13) = 0;
              goto LABEL_35;
            }
          }
          else if (byte_1B0DE1758[v23] != byte_1B0DE1758[v24])
          {
            break;
          }
          ++v21;
        }
      }
      v15 -= 4;
      BOOL v20 = (int)v13 <= 0;
      LODWORD(v13) = v13 - 1;
      if (v20) {
        goto LABEL_42;
      }
    }
    for (uint64_t j = zDbName; ; ++j)
    {
      uint64_t v18 = *v16;
      uint64_t v19 = *(unsigned __int8 *)j;
      if (v18 == v19)
      {
        if (!*v16)
        {
          if ((v13 & 0x80000000) == 0)
          {
LABEL_35:
            uint64_t v26 = *(void *)(v14 + 32 * v13 + 8);
            if (v26)
            {
              if (*(unsigned char *)(v26 + 17))
              {
                ++*(_DWORD *)(v26 + 20);
                if (!*(unsigned char *)(v26 + 18)) {
                  sub_1B0D12478(v26);
                }
              }
              int v27 = *(uint64_t **)(v26 + 8);
              uint64_t v28 = *v27;
              uint64_t v29 = *(uint64_t **)(*v27 + 72);
              switch((int)v9)
              {
                case 7:
                  int v30 = 0;
                  *(void *)a4 = v29;
                  if (*(unsigned char *)(v26 + 17)) {
                    goto LABEL_84;
                  }
                  goto LABEL_86;
                case 27:
                  int v30 = 0;
                  goto LABEL_50;
                case 28:
                  int v30 = 0;
                  uint64_t v37 = *(void *)(v28 + 344);
                  v28 += 80;
                  if (v37) {
                    uint64_t v28 = v37 + 16;
                  }
LABEL_50:
                  *(void *)a4 = *(void *)v28;
                  if (!*(unsigned char *)(v26 + 17)) {
                    goto LABEL_86;
                  }
                  goto LABEL_84;
                case 35:
                  int v30 = 0;
                  *(_DWORD *)a4 = *(_DWORD *)(v28 + 132);
                  if (!*(unsigned char *)(v26 + 17)) {
                    goto LABEL_86;
                  }
                  goto LABEL_84;
                case 38:
                  unsigned int v38 = *(_DWORD *)a4;
                  if (!*(unsigned char *)(v26 + 17))
                  {
                    int v40 = *((unsigned __int8 *)v27 + 38);
                    int v41 = *((_DWORD *)v27 + 13);
                    int v42 = *((_DWORD *)v27 + 14);
                    goto LABEL_67;
                  }
                  int v39 = *(_DWORD *)(v26 + 20);
                  *(_DWORD *)(v26 + 20) = v39 + 1;
                  if (*(unsigned char *)(v26 + 18))
                  {
                    int v40 = *((unsigned __int8 *)v27 + 38);
                    int v41 = *((_DWORD *)v27 + 13);
                    int v42 = *((_DWORD *)v27 + 14);
                  }
                  else
                  {
                    sub_1B0D12478(v26);
                    uint64_t v44 = *(void *)(v26 + 8);
                    int v40 = *(unsigned __int8 *)(v44 + 38);
                    int v41 = *(_DWORD *)(v44 + 52);
                    int v42 = *(_DWORD *)(v44 + 56);
                    if (!*(unsigned char *)(v26 + 17)) {
                      goto LABEL_67;
                    }
                    int v39 = *(_DWORD *)(v26 + 20) - 1;
                  }
                  *(_DWORD *)(v26 + 20) = v39;
                  if (!v39) {
                    sub_1B0D12558(v26);
                  }
LABEL_67:
                  int v45 = v41 - v42;
                  if (v41 - v42 <= v40) {
                    int v45 = v40;
                  }
                  *(_DWORD *)a4 = v45;
                  if (v38 <= 0xFF) {
                    sub_1B0CD9448(v26, 0, v38, 0, v4);
                  }
                  goto LABEL_82;
                case 42:
                  if (!*((unsigned char *)v27 + 36) && !*(unsigned char *)(v28 + 16))
                  {
                    ++*(_DWORD *)(v28 + 132);
                    for (uint64_t k = *(void *)(v28 + 112); k; uint64_t k = *(void *)(k + 64))
                      *(_DWORD *)(k + 24) = 1;
                    sub_1B0C7D108(*(void **)(v28 + 336), 0);
                  }
                  goto LABEL_82;
                default:
                  int v31 = *((_DWORD *)a1 + 172);
                  uint64_t v32 = *v29;
                  unsigned int v33 = v9 - 101;
                  if ((v9 - 101) <= 1 && v32)
                  {
                    int v34 = *(unsigned __int8 **)(**(void **)(*(void *)(*((void *)a1 + 4) + 8) + 8) + 320);
                    if (v34)
                    {
                      int v36 = *v34;
                      v34 += 2;
                      int v35 = v36;
                    }
                    else
                    {
                      int v35 = 0;
                    }
                    int v51 = v35;
                    (*(void (**)(uint64_t *, uint64_t, int *))(v32 + 80))(v29, 107, &v51);
                    uint64_t v32 = *v29;
                    if (*v29)
                    {
                      (*(void (**)(uint64_t *, uint64_t, unsigned __int8 *))(v32 + 80))(v29, 108, v34);
                      uint64_t v32 = *v29;
                    }
                  }
                  if (!v32)
                  {
                    *((_DWORD *)a1 + 172) = v31;
                    int v30 = 12;
                    if (!*(unsigned char *)(v26 + 17)) {
                      goto LABEL_86;
                    }
                    goto LABEL_84;
                  }
                  int v46 = (*(uint64_t (**)(uint64_t *, uint64_t, void *))(v32 + 80))(v29, v9, a4);
                  int v30 = v46;
                  uint64_t v47 = *v29;
                  *((_DWORD *)a1 + 172) = v31;
                  if (v33 <= 1 && v47 && v46 == 0)
                  {
                    sub_1B0CE89B4((uint64_t)a1);
LABEL_82:
                    int v30 = 0;
                  }
                  if (*(unsigned char *)(v26 + 17))
                  {
LABEL_84:
                    int v49 = *(_DWORD *)(v26 + 20) - 1;
                    *(_DWORD *)(v26 + 20) = v49;
                    if (!v49) {
                      sub_1B0D12558(v26);
                    }
                  }
LABEL_86:
                  *((_DWORD *)a1 + 20) = v30;
                  if (v30) {
                    break;
                  }
                  if (!*((void *)a1 + 52))
                  {
                    int v30 = 0;
                    *((_DWORD *)a1 + 21) = -1;
                    uint64_t v50 = *((void *)a1 + 3);
                    if (!v50) {
                      return v30;
                    }
                    goto LABEL_90;
                  }
                  int v30 = 0;
                  break;
              }
LABEL_89:
              sub_1B0D0E714((uint64_t)a1, v30);
              uint64_t v50 = *((void *)a1 + 3);
              if (!v50) {
                return v30;
              }
LABEL_90:
              xmmword_1EB21CA50(v50);
              return v30;
            }
          }
LABEL_42:
          int v30 = 1;
          *((_DWORD *)a1 + 20) = 1;
          goto LABEL_89;
        }
      }
      else if (byte_1B0DE1758[v18] != byte_1B0DE1758[v19])
      {
        goto LABEL_19;
      }
      ++v16;
    }
  }
LABEL_5:
  uint64_t v7 = "unopened";
LABEL_30:
  sqlite3_log(21, "API call with %s database connection pointer", v7);

  return sub_1B0CE1978(189525);
}

uint64_t sub_1B0CF7094(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 17))
  {
    uint64_t v6 = *(void *)(a1 + 8);
    unsigned int v3 = *(unsigned __int8 *)(v6 + 38);
    int v4 = *(_DWORD *)(v6 + 52);
    int v5 = *(_DWORD *)(v6 + 56);
    goto LABEL_8;
  }
  ++*(_DWORD *)(a1 + 20);
  if (*(unsigned char *)(a1 + 18))
  {
    uint64_t v2 = *(void *)(a1 + 8);
    unsigned int v3 = *(unsigned __int8 *)(v2 + 38);
    int v4 = *(_DWORD *)(v2 + 52);
    int v5 = *(_DWORD *)(v2 + 56);
  }
  else
  {
    sub_1B0D12478(a1);
    uint64_t v7 = *(void *)(a1 + 8);
    unsigned int v3 = *(unsigned __int8 *)(v7 + 38);
    int v4 = *(_DWORD *)(v7 + 52);
    int v5 = *(_DWORD *)(v7 + 56);
    if (!*(unsigned char *)(a1 + 17)) {
      goto LABEL_8;
    }
  }
  int v8 = *(_DWORD *)(a1 + 20) - 1;
  *(_DWORD *)(a1 + 20) = v8;
  if (!v8) {
    sub_1B0D12558(a1);
  }
LABEL_8:
  if (v4 - v5 <= (int)v3) {
    return v3;
  }
  else {
    return (v4 - v5);
  }
}

int sqlite3_test_control(int op, ...)
{
  va_start(va, op);
  *(double *)&unint64_t v93 = va_arg(va, double);
  unsigned int v94 = va_arg(va, uint64_t (*)(void));
  uint64_t v95 = va_arg(va, unint64_t *);
  uint64_t v96 = va_arg(va, _DWORD *);
  int v1 = 0;
  switch(op)
  {
    case 5:
      int v1 = 0;
      uint64_t v2 = &xmmword_1EB220354;
      unsigned int v3 = &xmmword_1E9B52280;
      goto LABEL_4;
    case 6:
      int v1 = 0;
      uint64_t v2 = &xmmword_1E9B52280;
      unsigned int v3 = &xmmword_1EB220354;
LABEL_4:
      *((_DWORD *)v3 + 32) = *((_DWORD *)v2 + 32);
      long long v4 = v2[7];
      v3[6] = v2[6];
      v3[7] = v4;
      long long v5 = v2[3];
      v3[2] = v2[2];
      v3[3] = v5;
      long long v6 = v2[5];
      v3[4] = v2[4];
      v3[5] = v6;
      long long v7 = v2[1];
      *unsigned int v3 = *v2;
      v3[1] = v7;
      return v1;
    case 8:
      int __buf = 0;
      int v8 = (_OWORD *)sub_1B0C7FC94(512);
      uint64_t v9 = v8;
      if (v8)
      {
        v8[30] = 0u;
        v8[31] = 0u;
        v8[28] = 0u;
        v8[29] = 0u;
        v8[26] = 0u;
        v8[27] = 0u;
        v8[24] = 0u;
        v8[25] = 0u;
        v8[22] = 0u;
        v8[23] = 0u;
        v8[20] = 0u;
        v8[21] = 0u;
        v8[18] = 0u;
        v8[19] = 0u;
        v8[16] = 0u;
        v8[17] = 0u;
        v8[14] = 0u;
        v8[15] = 0u;
        v8[12] = 0u;
        v8[13] = 0u;
        v8[10] = 0u;
        v8[11] = 0u;
        v8[8] = 0u;
        v8[9] = 0u;
        v8[6] = 0u;
        v8[7] = 0u;
        v8[4] = 0u;
        v8[5] = 0u;
        v8[2] = 0u;
        v8[3] = 0u;
        *int v8 = 0u;
        v8[1] = 0u;
        *(_DWORD *)int v8 = v93;
      }
      int v10 = v93 + 7;
      if ((int)v93 < -7) {
        int v10 = v93 + 14;
      }
      size_t v11 = (v10 >> 3) + 1;
      int v12 = (unsigned char *)sub_1B0C7FC94(v11);
      uint64_t v13 = v12;
      if (v12) {
        bzero(v12, v11);
      }
      if (sqlite3_initialize())
      {
        int v1 = -1;
        goto LABEL_173;
      }
      uint64_t v31 = sub_1B0C7FC94(512);
      uint64_t v32 = (void *)v31;
      int v1 = -1;
      if (!v9) {
        goto LABEL_166;
      }
      BOOL v33 = !v13 || v31 == 0;
      if (v33) {
        goto LABEL_166;
      }
      uint64_t v34 = 0;
      int __buf = 0;
      while (2)
      {
        int v35 = *((_DWORD *)v94 + v34);
        if ((v35 - 1) < 2 || v35 == 5)
        {
          uint64_t v37 = (char *)v94 + 4 * v34;
          int v38 = *((_DWORD *)v37 + 2);
          int v39 = v38 - 1;
          *((_DWORD *)v37 + 2) = *((_DWORD *)v37 + 3) + v38;
          uint64_t v40 = 4;
          goto LABEL_81;
        }
        if (v35)
        {
          sqlite3_initialize();
          arc4random_buf(&__buf, 4uLL);
          int v39 = __buf;
          uint64_t v40 = 2;
LABEL_81:
          uint64_t v41 = (4 * v34) | 4;
          int v42 = *(_DWORD *)((char *)v94 + v41);
          BOOL v16 = __OFSUB__(v42, 1);
          int v43 = v42 - 1;
          if (!((v43 < 0) ^ v16 | (v43 == 0))) {
            uint64_t v40 = 0;
          }
          *(_DWORD *)((char *)v94 + v41) = v43;
          v34 += v40;
          int __buf = (v39 & 0x7FFFFFFF) % (int)v93;
          int v44 = 1 << ((__buf + 1) & 7);
          unint64_t v45 = (unint64_t)(__buf + 1) >> 3;
          char v46 = v13[v45];
          if ((v35 & 1) == 0)
          {
            v13[v45] = v46 & ~(_BYTE)v44;
            sub_1B0D15684(v9, __buf + 1, v32);
            continue;
          }
          v13[v45] = v46 | v44;
          if (v35 != 5 && sub_1B0CCABC4(v9, __buf + 1))
          {
            int v1 = -1;
            goto LABEL_166;
          }
          continue;
        }
        break;
      }
      unsigned int v55 = *v9;
      if (*v9 <= v93) {
        goto LABEL_113;
      }
      uint64_t v56 = v9;
      unsigned int v57 = v93;
      while (1)
      {
        unsigned int v58 = v56[2];
        if (!v58) {
          break;
        }
        unsigned int v59 = v57 / v58;
        v57 %= v58;
        uint64_t v56 = *(_DWORD **)&v56[2 * v59 + 4];
        if (!v56) {
          goto LABEL_113;
        }
      }
      if (*v56 > 0xF80u)
      {
        unsigned int v88 = v57 % 0x7C;
        uint64_t v89 = v56 + 4;
        int v90 = v89[v57 % 0x7C];
        if (v90)
        {
          unsigned int v91 = v57 + 1;
          while (v90 != v91)
          {
            if (v88 == 123) {
              unsigned int v88 = 0;
            }
            else {
              ++v88;
            }
            int v90 = v89[v88];
            if (!v90) {
              goto LABEL_113;
            }
          }
          int v60 = 1;
        }
        else
        {
LABEL_113:
          int v60 = 0;
        }
      }
      else
      {
        int v60 = (*((unsigned __int8 *)v56 + ((unint64_t)v57 >> 3) + 16) >> (v57 & 7)) & 1;
      }
      int v1 = v60 - v93 + v55;
      unsigned int v61 = 1;
      int __buf = 1;
      if ((int)v93 < 1) {
        goto LABEL_166;
      }
      while (2)
      {
        unsigned int v62 = v61 - 1;
        if (v61 - 1 >= v55) {
          goto LABEL_119;
        }
        uint64_t v63 = v9;
        while (1)
        {
          unsigned int v64 = v63[2];
          if (!v64) {
            break;
          }
          unsigned int v65 = v62 / v64;
          v62 %= v64;
          uint64_t v63 = *(_DWORD **)&v63[2 * v65 + 4];
          if (!v63) {
            goto LABEL_119;
          }
        }
        if (*v63 > 0xF80u)
        {
          unsigned int v67 = v62 % 0x7C;
          int v68 = v63 + 4;
          int v69 = v68[v62 % 0x7C];
          if (v69)
          {
            unsigned int v70 = v62 + 1;
            while (v69 != v70)
            {
              if (v67 == 123) {
                unsigned int v67 = 0;
              }
              else {
                ++v67;
              }
              int v69 = v68[v67];
              if (!v69) {
                goto LABEL_119;
              }
            }
            int v66 = 1;
          }
          else
          {
LABEL_119:
            int v66 = 0;
          }
        }
        else
        {
          int v66 = (*((unsigned __int8 *)v63 + ((unint64_t)v62 >> 3) + 16) >> (v62 & 7)) & 1;
        }
        if (((v13[(unint64_t)v61 >> 3] >> (v61 & 7)) & 1) == v66)
        {
          int __buf = v61 + 1;
          BOOL v33 = v61++ == v93;
          if (v33) {
            goto LABEL_166;
          }
          continue;
        }
        break;
      }
      int v1 = v61;
LABEL_166:
      if (v32)
      {
        uint64_t v85 = (void (**)(void *))&off_1EB21C9E8;
        if (!dword_1EB21C9C0) {
          goto LABEL_172;
        }
        if ((void)xmmword_1EB2201B0) {
          xmmword_1EB21CA40(xmmword_1EB2201B0);
        }
        qword_1EB220108[0] -= (int)off_1EB21C9F8(v32);
        --qword_1EB220150;
        off_1EB21C9E8(v32);
        uint64_t v32 = (void *)xmmword_1EB2201B0;
        if ((void)xmmword_1EB2201B0)
        {
          uint64_t v85 = (void (**)(void *))&xmmword_1EB21CA50;
LABEL_172:
          (*v85)(v32);
        }
      }
LABEL_173:
      if (v13)
      {
        BOOL v86 = (uint64_t (**)(void *))&off_1EB21C9E8;
        if (!dword_1EB21C9C0) {
          goto LABEL_179;
        }
        if ((void)xmmword_1EB2201B0) {
          xmmword_1EB21CA40(xmmword_1EB2201B0);
        }
        qword_1EB220108[0] -= (int)off_1EB21C9F8(v13);
        --qword_1EB220150;
        off_1EB21C9E8(v13);
        uint64_t v13 = (unsigned char *)xmmword_1EB2201B0;
        if ((void)xmmword_1EB2201B0)
        {
          BOOL v86 = (uint64_t (**)(void *))&xmmword_1EB21CA50;
LABEL_179:
          (*v86)(v13);
        }
      }
      sub_1B0CD2868((uint64_t)v9);
      return v1;
    case 9:
      off_1EB21CB60 = (uint64_t (*)(void))v93;
      if (*(double *)&v93 == 0.0) {
        return 0;
      }
      return ((uint64_t (*)(void))v93)(0);
    case 10:
      int v1 = 0;
      off_1E9B52208 = (double (*)(void))v93;
      off_1E9B52210 = v94;
      return v1;
    case 11:
      int v1 = dword_1E9B51ED0;
      if (v93) {
        dword_1E9B51ED0 = v93;
      }
      return v1;
    case 12:
      int __buf = 0;
      return 0;
    case 13:
      return v93;
    case 15:
      int v1 = 0;
      *(_DWORD *)(v93 + 96) = v94;
      return v1;
    case 17:
      int v1 = 0;
      *(_DWORD *)(v93 + 44) ^= 0x20u;
      return v1;
    case 18:
      dword_1EB21CB68 = v93;
      int v1 = 0;
      if (v93 == 2) {
        off_1EB21CB70 = (uint64_t (*)(void, void, __n128))v94;
      }
      else {
        off_1EB21CB70 = 0;
      }
      return v1;
    case 19:
      int v1 = 0;
      dword_1EB21CB78 = v93;
      return v1;
    case 20:
      int v1 = 0;
      dword_1EB21C9D0 = v93;
      return v1;
    case 22:
      return 123410;
    case 23:
      return qword_1EB21CB14 == 0;
    case 24:
      int v1 = 0;
      *(_DWORD *)(v93 + 184) = v94;
      return v1;
    case 25:
      uint64_t v14 = *(void *)(v93 + 24);
      if (v14) {
        xmmword_1EB21CA40(v14);
      }
      if (!v94) {
        goto LABEL_94;
      }
      int v15 = *(_DWORD *)(v93 + 40);
      BOOL v16 = __OFSUB__(v15, 1);
      uint64_t v17 = (v15 - 1);
      if ((int)v17 < 0 != v16) {
        goto LABEL_94;
      }
      uint64_t v18 = (unsigned char **)(*(void *)(v93 + 32) + 32 * v17);
      while (1)
      {
        uint64_t v19 = *v18;
        if (*v18) {
          break;
        }
LABEL_41:
        if (!v17)
        {
          uint64_t v24 = "main";
          for (uint64_t i = (unsigned __int8 *)v94; ; ++i)
          {
            uint64_t v26 = *(unsigned __int8 *)v24;
            uint64_t v27 = *i;
            if (v26 == v27)
            {
              if (!*v24)
              {
                LOBYTE(v17) = 0;
LABEL_89:
                *(unsigned char *)(v93 + 196) = v17;
                *(unsigned char *)(v93 + 198) = *(unsigned char *)(v93 + 198) & 0xFD | (2 * (v95 & 1));
                *(unsigned char *)(v93 + 197) = v95 & 1;
                *(_DWORD *)(v93 + 192) = v96;
                if ((v95 & 1) == 0 && v96 != 0) {
                  sub_1B0CE89B4(v93);
                }
LABEL_94:
                uint64_t v48 = *(void *)(v93 + 24);
                if (!v48) {
                  return 0;
                }
                xmmword_1EB21CA50(v48);
                return 0;
              }
            }
            else if (byte_1B0DE1758[v26] != byte_1B0DE1758[v27])
            {
              break;
            }
            ++v24;
          }
        }
        v18 -= 4;
        BOOL v23 = (int)v17 <= 0;
        LODWORD(v17) = v17 - 1;
        if (v23) {
          goto LABEL_94;
        }
      }
      for (uint64_t j = (unsigned __int8 *)v94; ; ++j)
      {
        uint64_t v21 = *v19;
        uint64_t v22 = *j;
        if (v21 == v22)
        {
          if (!*v19)
          {
            if ((v17 & 0x80000000) == 0) {
              goto LABEL_89;
            }
            goto LABEL_94;
          }
        }
        else if (byte_1B0DE1758[v21] != byte_1B0DE1758[v22])
        {
          goto LABEL_41;
        }
        ++v19;
      }
    case 27:
      __int16 v28 = *(_WORD *)(*(void *)v93 + 20);
      if ((v28 & 4) == 0) {
        return 0;
      }
      int v1 = 0;
      *(_WORD *)(*(void *)v93 + 20) = v28 & 0xFFDB | 0x20;
      return v1;
    case 28:
      return sub_1B0CE1978(189645);
    case 29:
      int v1 = 0;
      byte_1EB21C9C9 = v93;
      return v1;
    case 30:
      int v1 = 0;
      *(void *)unsigned int v94 = 0;
      return v1;
    case 31:
      switch((int)v93)
      {
        case 0:
          int v1 = 0;
          *(_DWORD *)unsigned int v94 = dword_1E9B52070;
          break;
        case 1:
          int v1 = 0;
          dword_1E9B52070 = *(_DWORD *)v94;
          break;
        case 2:
          int v1 = 0;
          *(_DWORD *)unsigned int v94 = dword_1E9B52074;
          break;
        case 3:
          int v1 = 0;
          dword_1E9B52074 = *(_DWORD *)v94;
          break;
        default:
          return 0;
      }
      return v1;
    case 33:
      if (*(double *)&v93 <= 1.0) {
        goto LABEL_99;
      }
      if (*(double *)&v93 <= 2000000000.0)
      {
        unint64_t v49 = (unint64_t)*(double *)&v93;
        if ((unint64_t)*(double *)&v93 >= 8)
        {
          __int16 v52 = 40;
          if (v49 >= 0x100)
          {
            unint64_t v53 = (unint64_t)*(double *)&v93;
            do
            {
              v52 += 40;
              unint64_t v49 = v53 >> 4;
              BOOL v23 = v53 > 0xFFF;
              v53 >>= 4;
            }
            while (v23);
          }
          if (v49 < 0x10)
          {
            LOBYTE(v54) = v49;
          }
          else
          {
            do
            {
              v52 += 10;
              unint64_t v54 = v49 >> 1;
              BOOL v23 = v49 > 0x1F;
              v49 >>= 1;
            }
            while (v23);
          }
        }
        else
        {
          if (v49 < 2)
          {
LABEL_99:
            LOWORD(v29) = 0;
            uint64_t v50 = v95;
            int v51 = v96;
            *(_DWORD *)unsigned int v94 = 0;
            goto LABEL_143;
          }
          __int16 v52 = 40;
          do
          {
            v52 -= 10;
            LOBYTE(v54) = 2 * v49;
            BOOL v71 = v49 >= 4;
            v49 *= 2;
          }
          while (!v71);
        }
        LOWORD(v29) = v52 + word_1B0DE8C5A[v54 & 7] - 10;
      }
      else
      {
        int v29 = 10 * (v93 >> 52) - 10220;
      }
      uint64_t v50 = v95;
      int v51 = v96;
      *(_DWORD *)unsigned int v94 = (__int16)v29;
      if ((__int16)v29 >= 610)
      {
        unint64_t v72 = 0x7FFFFFFFFFFFFFFFLL;
        *uint64_t v95 = 0x7FFFFFFFFFFFFFFFLL;
        goto LABEL_154;
      }
LABEL_143:
      int v73 = (__int16)v29;
      unsigned int v74 = ((26215 * v73) >> 18) + ((26215 * v73) >> 31);
      unsigned __int16 v75 = (__int16)v29 % 10;
      uint64_t v76 = (__int16)v75 - 1;
      if (!v75) {
        uint64_t v76 = 0;
      }
      if (v75 <= 4u) {
        uint64_t v77 = v76;
      }
      else {
        uint64_t v77 = (__int16)v75 - 2;
      }
      unint64_t v78 = v77 + 8;
      unint64_t v79 = v78 << (v74 - 3);
      unint64_t v72 = v78 >> (3 - v74);
      if (v73 > 29) {
        unint64_t v72 = v79;
      }
      *uint64_t v50 = v72;
      if (v72 < 8)
      {
        if (v72 < 2)
        {
          int v80 = 0;
          goto LABEL_164;
        }
        __int16 v81 = 40;
        do
        {
          unint64_t v83 = v72;
          v81 -= 10;
          v72 *= 2;
        }
        while (v83 < 4);
LABEL_163:
        int v80 = (__int16)(v81 + word_1B0DE8C5A[v72 & 7] - 10);
LABEL_164:
        int v1 = 0;
        _DWORD *v51 = v80;
        return v1;
      }
      if (v72 < 0x100)
      {
        __int16 v81 = 40;
        goto LABEL_161;
      }
LABEL_154:
      __int16 v81 = 40;
      do
      {
        unint64_t v82 = v72;
        v81 += 40;
        v72 >>= 4;
      }
      while (v82 > 0xFFF);
LABEL_161:
      if (v72 >= 0x10)
      {
        do
        {
          unint64_t v84 = v72;
          v81 += 10;
          v72 >>= 1;
        }
        while (v84 > 0x1F);
      }
      goto LABEL_163;
    case 34:
      int v30 = v93;
      if (v93 == 2) {
        int v30 = 0;
      }
      if (v30 < 0) {
        return byte_1EB21C9CA != 0;
      }
      int v1 = v30 != 0;
      byte_1EB21C9CA = v30 != 0;
      return v1;
    default:
      return v1;
  }
}

uint64_t sub_1B0CF7DF4(unint64_t a1)
{
  if (a1 >= 8)
  {
    __int16 v2 = 40;
    if (a1 >= 0x100)
    {
      unint64_t v3 = a1;
      do
      {
        v2 += 40;
        a1 = v3 >> 4;
        BOOL v4 = v3 > 0xFFF;
        v3 >>= 4;
      }
      while (v4);
    }
    if (a1 < 0x10)
    {
      LOBYTE(v5) = a1;
    }
    else
    {
      do
      {
        v2 += 10;
        unint64_t v5 = a1 >> 1;
        BOOL v4 = a1 > 0x1F;
        a1 >>= 1;
      }
      while (v4);
    }
  }
  else
  {
    if (a1 < 2) {
      return 0;
    }
    __int16 v2 = 40;
    do
    {
      v2 -= 10;
      LOBYTE(v5) = 2 * a1;
      BOOL v6 = a1 >= 4;
      a1 *= 2;
    }
    while (!v6);
  }
  return (__int16)(v2 + word_1B0DE8C5A[v5 & 7] - 10);
}

char *__cdecl sqlite3_create_filename(const char *zDatabase, const char *zJournal, const char *zWal, int nParam, const char **azParam)
{
  if (nParam < 0 || !zDatabase || !zJournal || !zWal || (int v8 = azParam, nParam) && !azParam)
  {
    sub_1B0CE1978(190176);
    return 0;
  }
  size_t v12 = strlen(zDatabase);
  size_t v13 = strlen(zJournal);
  uint64_t v14 = v12 + v13 + strlen(zWal) + 10;
  LODWORD(v15) = 2 * nParam;
  if (nParam)
  {
    if (v15 <= 1) {
      uint64_t v16 = 1;
    }
    else {
      uint64_t v16 = v15;
    }
    uint64_t v17 = v8;
    do
    {
      uint64_t v18 = *v17++;
      v14 += strlen(v18) + 1;
      --v16;
    }
    while (v16);
  }
  if (sqlite3_initialize()) {
    return 0;
  }
  uint64_t v19 = (char *)sub_1B0C7FC94(v14);
  int v10 = v19;
  if (v19)
  {
    *(_DWORD *)uint64_t v19 = 0;
    int v10 = v19 + 4;
    size_t v20 = strlen(zDatabase);
    memcpy(v10, zDatabase, v20 + 1);
    uint64_t v21 = &v10[v20];
    if (nParam)
    {
      uint64_t v22 = v21 + 1;
      if (v15 <= 1) {
        uint64_t v15 = 1;
      }
      else {
        uint64_t v15 = v15;
      }
      do
      {
        BOOL v23 = *v8++;
        size_t v24 = strlen(v23);
        memcpy(v22, v23, v24 + 1);
        uint64_t v21 = &v22[v24];
        v22 += v24 + 1;
        --v15;
      }
      while (v15);
    }
    uint64_t v25 = v21 + 2;
    v21[1] = 0;
    size_t v26 = strlen(zJournal) + 1;
    memcpy(v25, zJournal, v26);
    uint64_t v27 = &v25[v26];
    size_t v28 = strlen(zWal);
    memcpy(v27, zWal, v28 + 1);
    *(_WORD *)&v27[v28 + 1] = 0;
  }
  return v10;
}

void sqlite3_free_filename(char *a1)
{
  if (!a1) {
    return;
  }
  for (uint64_t i = a1 - 4; i[3] || i[2] || i[1] || *i; --i)
    ;
  __int16 v2 = (void (**)(char *))&off_1EB21C9E8;
  if (!dword_1EB21C9C0) {
    goto LABEL_13;
  }
  if ((void)xmmword_1EB2201B0) {
    xmmword_1EB21CA40(xmmword_1EB2201B0);
  }
  qword_1EB220108 -= (int)off_1EB21C9F8(i);
  --qword_1EB220150;
  off_1EB21C9E8(i);
  uint64_t i = (char *)xmmword_1EB2201B0;
  if ((void)xmmword_1EB2201B0)
  {
    __int16 v2 = (void (**)(char *))&xmmword_1EB21CA50;
LABEL_13:
    unint64_t v3 = *v2;
    v3(i);
  }
}

const char *__cdecl sqlite3_uri_parameter(const char *zFilename, const char *zParam)
{
  __int16 v2 = 0;
  if (zFilename && zParam)
  {
    for (uint64_t i = zFilename + 1; *(i - 2) || *(i - 3) || *(i - 4) || *(i - 5); --i)
      ;
    unint64_t v5 = &i[strlen(i - 1) & 0x3FFFFFFF];
    if (*v5)
    {
      while (1)
      {
        int v6 = strcmp(v5, zParam);
        long long v7 = &v5[strlen(v5) & 0x3FFFFFFF];
        __int16 v2 = v7 + 1;
        if (!v6) {
          break;
        }
        int v8 = &v2[strlen(v7 + 1) & 0x3FFFFFFF];
        int v9 = *((unsigned __int8 *)v8 + 1);
        unint64_t v5 = v8 + 1;
        if (!v9) {
          return 0;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

const char *__cdecl sqlite3_uri_key(const char *zFilename, int N)
{
  int result = 0;
  if (zFilename)
  {
    int v4 = N;
    if ((N & 0x80000000) == 0)
    {
      for (uint64_t i = zFilename + 1; *(i - 2) || *(i - 3) || *(i - 4) || *(i - 5); --i)
        ;
      int v6 = &i[strlen(i - 1) & 0x3FFFFFFF];
      int v7 = *(unsigned __int8 *)v6;
      if (*v6) {
        BOOL v8 = v4 < 1;
      }
      else {
        BOOL v8 = 1;
      }
      if (!v8)
      {
        do
        {
          int v9 = &v6[(strlen(v6) & 0x3FFFFFFF) + 1];
          int v10 = &v9[strlen(v9) & 0x3FFFFFFF];
          int v11 = *((unsigned __int8 *)v10 + 1);
          int v6 = v10 + 1;
          int v7 = v11;
          if (v11) {
            BOOL v12 = v4 > 1;
          }
          else {
            BOOL v12 = 0;
          }
          --v4;
        }
        while (v12);
      }
      if (v7) {
        return v6;
      }
      else {
        return 0;
      }
    }
  }
  return result;
}

int sqlite3_uri_BOOLean(const char *zFile, const char *zParam, int bDefault)
{
  int v4 = (char *)sqlite3_uri_parameter(zFile, zParam);
  int result = bDefault != 0;
  if (v4) {
    return sub_1B0D5D5D8(v4, 1, bDefault != 0) != 0;
  }
  return result;
}

sqlite3_int64 sqlite3_uri_int64(const char *a1, const char *a2, sqlite3_int64 a3)
{
  int v4 = (char *)sqlite3_uri_parameter(a1, a2);
  if (v4)
  {
    sqlite3_int64 v6 = 0;
    if (!sub_1B0CF8344(v4, (unint64_t *)&v6)) {
      return v6;
    }
  }
  return a3;
}

uint64_t sub_1B0CF8344(char *__s, unint64_t *a2)
{
  if (*__s == 48 && (__s[1] | 0x20) == 0x78)
  {
    uint64_t v4 = 1;
    do
      int v5 = __s[++v4];
    while (v5 == 48);
    uint64_t v6 = v4;
    uint64_t v7 = __s[v4];
    if ((byte_1B0DE196D[v7] & 8) != 0)
    {
      unint64_t v8 = 0;
      uint64_t v13 = v4 + 1;
      do
      {
        unint64_t v8 = ((((char)(2 * v7) >> 7) & 0xF9) + (_BYTE)v7) & 0xF | (16 * v8);
        uint64_t v7 = __s[v13++];
      }
      while ((byte_1B0DE196D[v7] & 8) != 0);
      uint64_t v6 = v13 - 1;
      int v9 = v6;
    }
    else
    {
      unint64_t v8 = 0;
      int v9 = v4;
    }
    *a2 = v8;
    if (v9 - (int)v4 <= 16) {
      return __s[v6] != 0;
    }
    else {
      return 2;
    }
  }
  else
  {
    int v10 = strspn(__s, "+- \n\t0123456789");
    if (__s[v10 & 0x3FFFFFFF]) {
      int v11 = (v10 & 0x3FFFFFFF) + 1;
    }
    else {
      int v11 = v10 & 0x3FFFFFFF;
    }
    return sub_1B0D186FC((unsigned __int8 *)__s, a2, v11, 1);
  }
}

const char *__cdecl sqlite3_filename_database(const char *a1)
{
  if (!a1) {
    return 0;
  }
  do
  {
    do
      int v1 = a1;
    while (*(unsigned __int8 *)--a1);
  }
  while (*(v1 - 2) || *(v1 - 3) || *(v1 - 4));
  return v1;
}

const char *__cdecl sqlite3_filename_journal(const char *result)
{
  if (result)
  {
    for (uint64_t i = result + 1; *(i - 2) || *(i - 3) || *(i - 4) || *(i - 5); --i)
      ;
    __int16 v2 = &i[strlen(i - 1) & 0x3FFFFFFF];
    if (*v2)
    {
      do
      {
        unint64_t v3 = &v2[(strlen(v2) & 0x3FFFFFFF) + 1];
        uint64_t v4 = &v3[strlen(v3) & 0x3FFFFFFF];
        int v5 = *((unsigned __int8 *)v4 + 1);
        __int16 v2 = v4 + 1;
      }
      while (v5);
    }
    return v2 + 1;
  }
  return result;
}

const char *__cdecl sqlite3_filename_wal(const char *result)
{
  if (result)
  {
    for (uint64_t i = result + 1; *(i - 2) || *(i - 3) || *(i - 4) || *(i - 5); --i)
      ;
    __int16 v2 = &i[strlen(i - 1) & 0x3FFFFFFF];
    if (*v2)
    {
      do
      {
        unint64_t v3 = &v2[(strlen(v2) & 0x3FFFFFFF) + 1];
        uint64_t v4 = &v3[strlen(v3) & 0x3FFFFFFF];
        int v5 = *((unsigned __int8 *)v4 + 1);
        __int16 v2 = v4 + 1;
      }
      while (v5);
    }
    return &v2[(strlen(v2 + 1) & 0x3FFFFFFF) + 2];
  }
  return result;
}

const char *__cdecl sqlite3_db_name(sqlite3 *db, int N)
{
  if (!db)
  {
    unint64_t v3 = "NULL";
    goto LABEL_11;
  }
  int v2 = *((unsigned __int8 *)db + 113);
  if (v2 == 186)
  {
LABEL_5:
    unint64_t v3 = "unopened";
LABEL_11:
    sqlite3_log(21, "API call with %s database connection pointer", v3);
    sub_1B0CE1978(190318);
    return 0;
  }
  if (v2 != 118)
  {
    if (v2 != 109)
    {
      unint64_t v3 = "invalid";
      goto LABEL_11;
    }
    goto LABEL_5;
  }
  if ((N & 0x80000000) == 0 && *((_DWORD *)db + 10) > N) {
    return *(const char **)(*((void *)db + 4) + 32 * N);
  }
  return 0;
}

const char *__cdecl sqlite3_db_filename(sqlite3 *db, const char *zDbName)
{
  if (!db)
  {
    unint64_t v3 = "NULL";
    goto LABEL_28;
  }
  int v2 = *((unsigned __int8 *)db + 113);
  if (v2 == 186)
  {
LABEL_5:
    unint64_t v3 = "unopened";
LABEL_28:
    sqlite3_log(21, "API call with %s database connection pointer", v3);
    sub_1B0CE1978(190337);
    return 0;
  }
  if (v2 != 118)
  {
    if (v2 != 109)
    {
      unint64_t v3 = "invalid";
      goto LABEL_28;
    }
    goto LABEL_5;
  }
  if (!zDbName)
  {
    LODWORD(v5) = 0;
    uint64_t v6 = *((void *)db + 4);
    goto LABEL_32;
  }
  int v4 = *((_DWORD *)db + 10);
  uint64_t v5 = (v4 - 1);
  if (v4 < 1) {
    return 0;
  }
  uint64_t v6 = *((void *)db + 4);
  uint64_t v7 = (unsigned char **)(v6 + 32 * v5);
  do
  {
    unint64_t v8 = *v7;
    if (*v7)
    {
      for (uint64_t i = zDbName; ; ++i)
      {
        uint64_t v10 = *v8;
        uint64_t v11 = *(unsigned __int8 *)i;
        if (v10 == v11)
        {
          if (!*v8)
          {
            if ((v5 & 0x80000000) == 0)
            {
LABEL_32:
              uint64_t v18 = *(void *)(v6 + 32 * v5 + 8);
              if (v18)
              {
                uint64_t v19 = **(void **)(v18 + 8);
                if (*(unsigned char *)(v19 + 19) || *(_UNKNOWN **)v19 == &unk_1EB21D5B8) {
                  return (const char *)&unk_1B0DE20F1;
                }
                else {
                  return *(const char **)(v19 + 216);
                }
              }
            }
            return 0;
          }
        }
        else if (byte_1B0DE1758[v10] != byte_1B0DE1758[v11])
        {
          break;
        }
        ++v8;
      }
    }
    if (!v5)
    {
      uint64_t v14 = "main";
      for (uint64_t j = zDbName; ; ++j)
      {
        uint64_t v16 = *(unsigned __int8 *)v14;
        uint64_t v17 = *(unsigned __int8 *)j;
        if (v16 == v17)
        {
          if (!*v14)
          {
            LODWORD(v5) = 0;
            goto LABEL_32;
          }
        }
        else if (byte_1B0DE1758[v16] != byte_1B0DE1758[v17])
        {
          break;
        }
        ++v14;
      }
    }
    int result = 0;
    v7 -= 4;
    BOOL v13 = (int)v5 <= 0;
    LODWORD(v5) = v5 - 1;
  }
  while (!v13);
  return result;
}

int sqlite3_db_readonly(sqlite3 *db, const char *zDbName)
{
  if (!db)
  {
    unint64_t v3 = "NULL";
    goto LABEL_28;
  }
  int v2 = *((unsigned __int8 *)db + 113);
  if (v2 == 186)
  {
LABEL_5:
    unint64_t v3 = "unopened";
LABEL_28:
    sqlite3_log(21, "API call with %s database connection pointer", v3);
    sub_1B0CE1978(190353);
    return -1;
  }
  if (v2 != 118)
  {
    if (v2 != 109)
    {
      unint64_t v3 = "invalid";
      goto LABEL_28;
    }
    goto LABEL_5;
  }
  if (!zDbName)
  {
    LODWORD(v5) = 0;
    uint64_t v6 = *((void *)db + 4);
    goto LABEL_32;
  }
  int v4 = *((_DWORD *)db + 10);
  uint64_t v5 = (v4 - 1);
  if (v4 < 1) {
    return -1;
  }
  uint64_t v6 = *((void *)db + 4);
  uint64_t v7 = (unsigned char **)(v6 + 32 * v5);
  int result = -1;
  do
  {
    int v9 = *v7;
    if (*v7)
    {
      for (uint64_t i = zDbName; ; ++i)
      {
        uint64_t v11 = *v9;
        uint64_t v12 = *(unsigned __int8 *)i;
        if (v11 == v12)
        {
          if (!*v9)
          {
            if ((v5 & 0x80000000) == 0)
            {
LABEL_32:
              uint64_t v18 = *(void *)(v6 + 32 * v5 + 8);
              if (v18) {
                return *(_WORD *)(*(void *)(v18 + 8) + 40) & 1;
              }
            }
            return -1;
          }
        }
        else if (byte_1B0DE1758[v11] != byte_1B0DE1758[v12])
        {
          break;
        }
        ++v9;
      }
    }
    if (!v5)
    {
      uint64_t v14 = "main";
      for (uint64_t j = zDbName; ; ++j)
      {
        uint64_t v16 = *(unsigned __int8 *)v14;
        uint64_t v17 = *(unsigned __int8 *)j;
        if (v16 == v17)
        {
          if (!*v14)
          {
            LODWORD(v5) = 0;
            goto LABEL_32;
          }
        }
        else if (byte_1B0DE1758[v16] != byte_1B0DE1758[v17])
        {
          break;
        }
        ++v14;
      }
    }
    v7 -= 4;
    BOOL v13 = (int)v5 <= 0;
    LODWORD(v5) = v5 - 1;
  }
  while (!v13);
  return result;
}

uint64_t _sqlite3_lockstate(char *a1, int a2)
{
  uint64_t v6 = 0;
  if (sub_1B0C77698(a1, (uint64_t *)&v6, 1u, 0))
  {
    if (v6) {
      sub_1B0CF369C((uint64_t)v6, 0);
    }
    return 0xFFFFFFFFLL;
  }
  else
  {
    sqlite3_db_config(v6, 1006, 1, 0);
    int v4 = a2;
    unsigned int v5 = -1;
    sqlite3_file_control(v6, 0, 103, &v4);
    sub_1B0CF369C((uint64_t)v6, 0);
    return v5;
  }
}

uint64_t (*_sqlite3_system_busy_handler())(uint64_t *a1, int a2)
{
  return sub_1B0CF8A54;
}

uint64_t sub_1B0CF8A54(uint64_t *a1, int a2)
{
  LODWORD(v8) = 0;
  uint64_t v4 = *a1;
  if (*(int *)v4 >= 2 && (unsigned int v5 = *(void (**)(void))(v4 + 136)) != 0)
  {
    v5();
  }
  else
  {
    double v9 = 0.0;
    (*(void (**)(uint64_t, double *))(v4 + 120))(v4, &v9);
    uint64_t v8 = (uint64_t)(v9 * 86400000.0);
  }
  ++*((unsigned char *)a1 + 784);
  if (!a2) {
    return 109;
  }
  uint64_t result = 0;
  int v7 = v8 - *((_DWORD *)a1 + 194);
  if (*((_DWORD *)a1 + 193) >= v7 && (v7 & 0x80000000) == 0) {
    return 109;
  }
  return result;
}

uint64_t _sqlite3_db_clone(uint64_t a1, const char *a2, const char *a3, int a4)
{
  if (!a1)
  {
    uint64_t v6 = "NULL";
    goto LABEL_32;
  }
  int v5 = *(unsigned __int8 *)(a1 + 113);
  if (v5 != 186)
  {
    if (v5 != 118)
    {
      if (v5 != 109)
      {
        uint64_t v6 = "invalid";
        goto LABEL_32;
      }
      goto LABEL_5;
    }
    uint64_t v10 = *(void *)(a1 + 24);
    if (v10) {
      xmmword_1EB21CA40(v10);
    }
    if (a2) {
      uint64_t v11 = a2;
    }
    else {
      uint64_t v11 = "main";
    }
    int v12 = *(_DWORD *)(a1 + 40);
    uint64_t v13 = (v12 - 1);
    if (v12 < 1) {
      goto LABEL_42;
    }
    uint64_t v14 = *(void *)(a1 + 32);
    uint64_t v15 = (unsigned char **)(v14 + 32 * v13);
    while (1)
    {
      uint64_t v16 = *v15;
      if (*v15) {
        break;
      }
LABEL_21:
      if (!v13)
      {
        uint64_t v21 = "main";
        for (uint64_t i = v11; ; ++i)
        {
          uint64_t v23 = *(unsigned __int8 *)v21;
          uint64_t v24 = *(unsigned __int8 *)i;
          if (v23 == v24)
          {
            if (!*v21)
            {
              LODWORD(v13) = 0;
              goto LABEL_36;
            }
          }
          else if (byte_1B0DE1758[v23] != byte_1B0DE1758[v24])
          {
            break;
          }
          ++v21;
        }
      }
      v15 -= 4;
      BOOL v20 = (int)v13 <= 0;
      LODWORD(v13) = v13 - 1;
      if (v20) {
        goto LABEL_42;
      }
    }
    for (uint64_t j = v11; ; ++j)
    {
      uint64_t v18 = *v16;
      uint64_t v19 = *(unsigned __int8 *)j;
      if (v18 == v19)
      {
        if (!*v16)
        {
          if ((v13 & 0x80000000) == 0)
          {
LABEL_36:
            uint64_t v26 = *(void *)(v14 + 32 * v13 + 8);
            if (v26)
            {
              if (*(unsigned char *)(v26 + 17))
              {
                ++*(_DWORD *)(v26 + 20);
                if (!*(unsigned char *)(v26 + 18)) {
                  sub_1B0D12478(v26);
                }
              }
              uint64_t v27 = **(void ***)(v26 + 8);
              uint64_t v28 = v27[9];
              if (strncmp(*(const char **)(*v27 + 24), "unix", 4uLL))
              {
                uint64_t v29 = sub_1B0CE1978(190433);
                goto LABEL_129;
              }
              if (a3)
              {
                uint64_t v32 = *(char **)(v28 + 56);
                if (v32)
                {
                  unsigned int v55 = 0;
                  if (a4) {
                    int v33 = a4;
                  }
                  else {
                    int v33 = 16777224;
                  }
                  unsigned int v34 = *(_DWORD *)(v28 + 124);
                  if (*(_UNKNOWN **)v28 == &unk_1F09A5320) {
                    int v35 = 33;
                  }
                  else {
                    int v35 = 1;
                  }
                  int v36 = v35 | v34;
                  uint64_t v29 = sub_1B0C77698(v32, (uint64_t *)&v55, v35 | v34, 0);
                  uint64_t v37 = v55;
                  if (v29) {
                    goto LABEL_126;
                  }
                  uint64_t v38 = sqlite3_exec(v55, "BEGIN DEFERRED; PRAGMA schema_version", 0, 0, 0);
                  uint64_t v29 = v38;
                  if (v38 != 14) {
                    goto LABEL_63;
                  }
                  sub_1B0CF369C((uint64_t)v55, 0);
                  uint64_t v29 = sub_1B0C77698(*(char **)(v28 + 56), (uint64_t *)&v55, v36 & 0xFFFFFFFC | 2, 0);
                  uint64_t v37 = v55;
                  if (v29) {
                    goto LABEL_126;
                  }
                  uint64_t v38 = sqlite3_exec(v55, "BEGIN DEFERRED; PRAGMA schema_version", 0, 0, 0);
                  uint64_t v29 = v38;
LABEL_63:
                  if (v29)
                  {
LABEL_125:
                    uint64_t v37 = v55;
LABEL_126:
                    sub_1B0CF369C((uint64_t)v37, 0);
                    goto LABEL_127;
                  }
                  copyfile_flags_t flags = v33;
                  uint64_t v40 = 0;
                  unint64_t v41 = 0x1EC526000;
                  while (2)
                  {
                    int v43 = v32;
                    int v44 = a3;
                    if (v40)
                    {
                      unint64_t v45 = (const char *)*((void *)&off_1E5FF0778 + v40);
                      int v43 = sqlite3_mprintf("%s%s", v32, v45);
                      uint64_t v38 = (uint64_t)sqlite3_mprintf("%s%s", a3, v45);
                      int v44 = (const char *)v38;
                    }
                    if (!v43 || !v44)
                    {
                      uint64_t v29 = 7;
                      goto LABEL_101;
                    }
                    if ((*(unsigned int (**)(char *, uint64_t))(v41 + 952))(v43, 4) && *__error() == 2)
                    {
                      if (!v40)
                      {
                        uint64_t v38 = (uint64_t)__error();
                        int v48 = *(_DWORD *)v38;
LABEL_98:
                        *(_DWORD *)(v28 + 32) = v48;
                        uint64_t v29 = 10;
                        goto LABEL_101;
                      }
                      goto LABEL_81;
                    }
                    uint64_t v38 = (*(uint64_t (**)(const char *, void))(v41 + 952))(v44, 0);
                    if (!v38)
                    {
                      int v48 = 17;
                      goto LABEL_98;
                    }
                    uint64_t v38 = copyfile(v43, v44, 0, flags);
                    if (v38)
                    {
                      uint64_t v38 = (uint64_t)__error();
                      int v47 = *(_DWORD *)v38;
                      if (*(_DWORD *)v38)
                      {
                        if (v47 == 12)
                        {
                          uint64_t v29 = 7;
                          goto LABEL_101;
                        }
                      }
                      else
                      {
                        sqlite3_log(28, "copyfile returned unsuccessfully without setting errno, assuming target path was inaccessible");
                        int v47 = 2;
                      }
                      *(_DWORD *)(v28 + 32) = v47;
                      uint64_t v29 = 10;
LABEL_101:
                      if (off_1E9B52208) {
                        v39.n128_f64[0] = off_1E9B52208(v38);
                      }
                      if (!v40)
                      {
LABEL_123:
                        if (off_1E9B52210) {
                          off_1E9B52210(v38);
                        }
                        goto LABEL_125;
                      }
                      uint64_t v49 = v40 - 1;
                      while (2)
                      {
                        if (v43)
                        {
                          uint64_t v50 = (uint64_t (**)(char *, __n128))&off_1EB21C9E8;
                          if (!dword_1EB21C9C0) {
                            goto LABEL_111;
                          }
                          if ((void)xmmword_1EB2201B0) {
                            xmmword_1EB21CA40(xmmword_1EB2201B0);
                          }
                          qword_1EB220108[0] -= (int)off_1EB21C9F8(v43);
                          --qword_1EB220150;
                          uint64_t v38 = off_1EB21C9E8(v43);
                          int v43 = (char *)xmmword_1EB2201B0;
                          if ((void)xmmword_1EB2201B0)
                          {
                            uint64_t v50 = (uint64_t (**)(char *, __n128))&xmmword_1EB21CA50;
LABEL_111:
                            uint64_t v38 = (*v50)(v43, v39);
                          }
                        }
                        if (v44)
                        {
                          int v51 = (uint64_t (**)(const char *, __n128))&off_1EB21C9E8;
                          if (!dword_1EB21C9C0) {
                            goto LABEL_118;
                          }
                          if ((void)xmmword_1EB2201B0) {
                            xmmword_1EB21CA40(xmmword_1EB2201B0);
                          }
                          qword_1EB220108[0] -= (int)off_1EB21C9F8(v44);
                          --qword_1EB220150;
                          uint64_t v38 = off_1EB21C9E8(v44);
                          int v44 = (const char *)xmmword_1EB2201B0;
                          if ((void)xmmword_1EB2201B0)
                          {
                            int v51 = (uint64_t (**)(const char *, __n128))&xmmword_1EB21CA50;
LABEL_118:
                            uint64_t v38 = (*v51)(v44, v39);
                          }
                        }
                        int v44 = a3;
                        if (v49)
                        {
                          uint64_t v38 = (uint64_t)sqlite3_mprintf("%s%s", a3, *((const char **)&off_1E5FF0778 + v49));
                          int v44 = (const char *)v38;
                        }
                        if (!v44) {
                          goto LABEL_123;
                        }
                        uint64_t v38 = off_1EC526508(v44);
                        int v43 = 0;
                        unint64_t v52 = v49-- + 1;
                        if (v52 <= 1) {
                          goto LABEL_123;
                        }
                        continue;
                      }
                    }
                    if (v40)
                    {
LABEL_81:
                      char v46 = (void (**)(char *))&off_1EB21C9E8;
                      if (!dword_1EB21C9C0) {
                        goto LABEL_86;
                      }
                      if ((void)xmmword_1EB2201B0) {
                        xmmword_1EB21CA40(xmmword_1EB2201B0);
                      }
                      qword_1EB220108[0] -= (int)off_1EB21C9F8(v43);
                      --qword_1EB220150;
                      off_1EB21C9E8(v43);
                      int v43 = (char *)xmmword_1EB2201B0;
                      unint64_t v41 = 0x1EC526000;
                      if ((void)xmmword_1EB2201B0)
                      {
                        char v46 = (void (**)(char *))&xmmword_1EB21CA50;
LABEL_86:
                        (*v46)(v43);
                      }
                      int v42 = (uint64_t (**)(const char *))&off_1EB21C9E8;
                      if (dword_1EB21C9C0)
                      {
                        if ((void)xmmword_1EB2201B0) {
                          xmmword_1EB21CA40(xmmword_1EB2201B0);
                        }
                        qword_1EB220108[0] -= (int)off_1EB21C9F8(v44);
                        --qword_1EB220150;
                        uint64_t v38 = off_1EB21C9E8(v44);
                        int v44 = (const char *)xmmword_1EB2201B0;
                        unint64_t v41 = 0x1EC526000uLL;
                        if (!(void)xmmword_1EB2201B0) {
                          goto LABEL_69;
                        }
                        int v42 = (uint64_t (**)(const char *))&xmmword_1EB21CA50;
                      }
                      uint64_t v38 = (*v42)(v44);
                    }
LABEL_69:
                    if (++v40 == 3)
                    {
                      uint64_t v29 = 0;
                      goto LABEL_125;
                    }
                    continue;
                  }
                }
                uint64_t v29 = 10;
              }
              else
              {
                uint64_t v29 = sub_1B0CE1978(45085);
              }
LABEL_127:
              if (*(void *)v28) {
                (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v28 + 80))(v28, 4, a1 + 92);
              }
LABEL_129:
              if (*(unsigned char *)(v26 + 17))
              {
                int v53 = *(_DWORD *)(v26 + 20) - 1;
                *(_DWORD *)(v26 + 20) = v53;
                if (!v53) {
                  sub_1B0D12558(v26);
                }
              }
LABEL_43:
              *(_DWORD *)(a1 + 80) = v29;
              uint64_t v30 = *(void *)(a1 + 416);
              if (v30)
              {
                if ((*(_WORD *)(v30 + 20) & 0x9000) == 0)
                {
                  *(_WORD *)(v30 + 20) = 1;
                  uint64_t v31 = *(void *)(a1 + 24);
                  if (!v31) {
                    return v29;
                  }
                  goto LABEL_47;
                }
                sub_1B0D18138((int *)v30);
              }
              uint64_t v31 = *(void *)(a1 + 24);
              if (!v31) {
                return v29;
              }
LABEL_47:
              xmmword_1EB21CA50(v31);
              return v29;
            }
          }
LABEL_42:
          uint64_t v29 = 1;
          goto LABEL_43;
        }
      }
      else if (byte_1B0DE1758[v18] != byte_1B0DE1758[v19])
      {
        goto LABEL_21;
      }
      ++v16;
    }
  }
LABEL_5:
  uint64_t v6 = "unopened";
LABEL_32:
  sqlite3_log(21, "API call with %s database connection pointer", v6);

  return sub_1B0CE1978(190418);
}

uint64_t _sqlite3_integrity_check(char *a1)
{
  uint64_t v10 = 0;
  int v2 = sub_1B0C77698(a1, &v10, 6u, 0);
  pStmt = 0;
  if (!v2)
  {
    int v2 = sub_1B0C7EAC0(v10, "PRAGMA integrity_check", 0xFFFFFFFFLL, 0, 0, &pStmt, 0, v1);
    if (!v2)
    {
      int v2 = sqlite3_step(pStmt);
      if (v2 == 100)
      {
        while (2)
        {
          unint64_t v3 = sqlite3_column_text(pStmt, 0);
          uint64_t v4 = (char *)v3;
          do
          {
            int v5 = strchr(v4, 10);
            if (!v5) {
              int v5 = &v4[strlen(v4)];
            }
            if (!strncmp("ok", v4, v5 - v4))
            {
              int v2 = 0;
              goto LABEL_20;
            }
            if (strncmp("*** ", v4, 4uLL) && (v5 - v4 < 14 || strncmp(" is never used", v5 - 14, 0xEuLL)))
            {
              uint64_t v8 = (const char *)v3;
              int v2 = 11;
              sqlite3_log(11, "Integrity check failed: %s", v8);
              goto LABEL_20;
            }
            if (*v5) {
              uint64_t v4 = v5 + 1;
            }
            else {
              uint64_t v4 = v5;
            }
          }
          while (*v4);
          int v2 = sqlite3_step(pStmt);
          if (v2 == 100) {
            continue;
          }
          break;
        }
      }
    }
LABEL_20:
    if (pStmt) {
      sqlite3_finalize(pStmt);
    }
  }
  if (v10) {
    sub_1B0CF369C(v10, 0);
  }
  if (v2 == 26) {
    unsigned int v6 = 11;
  }
  else {
    unsigned int v6 = v2;
  }
  if ((v2 & 0xFFFFFFFE) == 0x64) {
    return 0;
  }
  else {
    return v6;
  }
}

uint64_t _sqlite3_db_truncate(sqlite3 *a1, const char *a2)
{
  if (a2)
  {
    if (sqlite3_initialize() || (uint64_t v6 = sub_1B0C7FC94(32)) == 0)
    {
      uint64_t v4 = (sqlite3_str *)&unk_1E9B51E88;
    }
    else
    {
      uint64_t v4 = (sqlite3_str *)v6;
      if (a1) {
        int v7 = *((_DWORD *)a1 + 34);
      }
      else {
        int v7 = 2147483645;
      }
      *(void *)uint64_t v6 = 0;
      *(void *)(v6 + 8) = 0;
      *(_DWORD *)(v6 + 16) = 0;
      *(_DWORD *)(v6 + 20) = v7;
      *(_DWORD *)(v6 + 24) = 0;
      *(_WORD *)(v6 + 28) = 0;
    }
    sqlite3_str_appendf(v4, "VACUUM %s", a2);
    int v5 = sqlite3_str_finish(v4);
    if (!v5) {
      return 7;
    }
  }
  else
  {
    int v5 = 0;
  }
  sqlite3_exec(a1, "SELECT 1 FROM sqlite_master LIMIT 1", 0, 0, 0);
  uint64_t v8 = sqlite3_db_config(a1, 1009, 1, 0);
  if (v8)
  {
    uint64_t v9 = v8;
    if (v5)
    {
      uint64_t v10 = (void (**)(char *))&off_1EB21C9E8;
      if (dword_1EB21C9C0)
      {
        if ((void)xmmword_1EB2201B0) {
          xmmword_1EB21CA40(xmmword_1EB2201B0);
        }
        qword_1EB220108[0] -= (int)off_1EB21C9F8(v5);
        --qword_1EB220150;
        off_1EB21C9E8(v5);
        int v5 = (char *)xmmword_1EB2201B0;
        if (!(void)xmmword_1EB2201B0) {
          return v9;
        }
        uint64_t v10 = (void (**)(char *))&xmmword_1EB21CA50;
      }
      (*v10)(v5);
    }
    return v9;
  }
  if (v5) {
    uint64_t v11 = v5;
  }
  else {
    uint64_t v11 = "VACUUM";
  }
  uint64_t v9 = sqlite3_exec(a1, v11, 0, 0, 0);
  if (v5)
  {
    int v12 = (void (**)(char *))&off_1EB21C9E8;
    if (!dword_1EB21C9C0)
    {
LABEL_28:
      (*v12)(v5);
      goto LABEL_29;
    }
    if ((void)xmmword_1EB2201B0) {
      xmmword_1EB21CA40(xmmword_1EB2201B0);
    }
    qword_1EB220108[0] -= (int)off_1EB21C9F8(v5);
    --qword_1EB220150;
    off_1EB21C9E8(v5);
    int v5 = (char *)xmmword_1EB2201B0;
    if ((void)xmmword_1EB2201B0)
    {
      int v12 = (void (**)(char *))&xmmword_1EB21CA50;
      goto LABEL_28;
    }
  }
LABEL_29:
  uint64_t v13 = sqlite3_db_config(a1, 1009, 0, 0);
  if (v9) {
    return v9;
  }
  uint64_t v9 = v13;
  if (v13) {
    return v9;
  }
  if (a2) {
    uint64_t v14 = a2;
  }
  else {
    uint64_t v14 = "main";
  }

  return sqlite3_wal_checkpoint_v2(a1, v14, 0, 0, 0);
}

uint64_t _sqlite3_db_copy(char *a1, sqlite3 *a2, const char *a3)
{
  uint64_t v6 = _sqlite3_db_clone((uint64_t)a2, a3, a1, 0x2000000);
  uint64_t v7 = v6;
  if (v6 && v6 != 5)
  {
    pDest = 0;
    uint64_t v7 = sub_1B0C77698(a1, (uint64_t *)&pDest, 6u, 0);
    uint64_t v8 = pDest;
    if (v7)
    {
LABEL_16:
      sub_1B0CF369C((uint64_t)v8, 0);
      return v7;
    }
    if (a3) {
      uint64_t v9 = a3;
    }
    else {
      uint64_t v9 = "main";
    }
    uint64_t v10 = sqlite3_backup_init(pDest, "main", a2, v9);
    if (v10)
    {
      uint64_t v11 = v10;
      sqlite3_backup_step(v10, -1);
      sqlite3_backup_finish(v11);
    }
    if (!pDest) {
      goto LABEL_14;
    }
    int v12 = *((unsigned __int8 *)pDest + 113);
    if (v12 == 109 || v12 == 118 || v12 == 186)
    {
      if (*((unsigned char *)pDest + 103))
      {
LABEL_14:
        uint64_t v7 = 7;
LABEL_15:
        uint64_t v8 = pDest;
        goto LABEL_16;
      }
      uint64_t v7 = (*((_DWORD *)pDest + 22) & *((_DWORD *)pDest + 20));
      if (v7 == 26)
      {
LABEL_22:
        if (!a3 || !strcasecmp("main", a3)) {
          uint64_t v7 = sqlite3_file_control(pDest, "main", 102, a2);
        }
        else {
          uint64_t v7 = 1;
        }
        goto LABEL_15;
      }
    }
    else
    {
      sqlite3_log(21, "API call with %s database connection pointer", "invalid");
      uint64_t v7 = sub_1B0CE1978(188008);
      if (v7 == 26) {
        goto LABEL_22;
      }
    }
    if (v7 != 2) {
      goto LABEL_15;
    }
    goto LABEL_22;
  }
  return v7;
}

uint64_t _sqlite3_db_copy_compact(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v33 = 0;
  uint64_t v11 = *(void *)(a2 + 24);
  if (v11) {
    xmmword_1EB21CA40(v11);
  }
  int v12 = "main";
  if (a3) {
    int v12 = (const char *)a3;
  }
  int v13 = *(_DWORD *)(a2 + 40);
  uint64_t v14 = (v13 - 1);
  if (v13 < 1) {
    goto LABEL_30;
  }
  uint64_t v15 = (unsigned char **)(*(void *)(a2 + 32) + 32 * v14);
  while (1)
  {
    uint64_t v16 = *v15;
    if (*v15) {
      break;
    }
LABEL_14:
    if (!v14)
    {
      uint64_t v21 = "main";
      for (uint64_t i = v12; ; ++i)
      {
        uint64_t v23 = *(unsigned __int8 *)v21;
        uint64_t v24 = *(unsigned __int8 *)i;
        if (v23 == v24)
        {
          if (!*v21)
          {
            LODWORD(v14) = 0;
            goto LABEL_25;
          }
        }
        else if (byte_1B0DE1758[v23] != byte_1B0DE1758[v24])
        {
          break;
        }
        ++v21;
      }
    }
    v15 -= 4;
    BOOL v20 = (int)v14 <= 0;
    LODWORD(v14) = v14 - 1;
    if (v20) {
      goto LABEL_30;
    }
  }
  for (uint64_t j = v12; ; ++j)
  {
    uint64_t v18 = *v16;
    uint64_t v19 = *(unsigned __int8 *)j;
    if (v18 == v19) {
      break;
    }
    if (byte_1B0DE1758[v18] != byte_1B0DE1758[v19]) {
      goto LABEL_14;
    }
LABEL_10:
    ++v16;
  }
  if (*v16) {
    goto LABEL_10;
  }
  if ((v14 & 0x80000000) != 0)
  {
LABEL_30:
    char v32 = a3;
    uint64_t v26 = 1;
    sub_1B0CE79F4(a2, 1, "invalid database name \"%s\"", a4, a5, a6, a7, a8, v32);
    goto LABEL_31;
  }
LABEL_25:
  uint64_t v25 = (char *)sub_1B0C904AC(a2, "VACUUM \"%w\" INTO '%q'", a3, a4, a5, a6, a7, a8, (char)v12);
  uint64_t v26 = sqlite3_exec((sqlite3 *)a2, v25, 0, 0, 0);
  if (v25) {
    sub_1B0D05C10((void *)a2, v25);
  }
  if (v26)
  {
LABEL_31:
    BOOL v28 = 0;
    unsigned int v27 = 0;
    uint64_t v29 = *(void *)(a2 + 24);
    if (!v29) {
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  unsigned int v27 = *(_DWORD *)(a2 + 76) & 0xFFFFFFFC | 2;
  BOOL v28 = *(unsigned __int8 *)(**(void **)(*(void *)(*(void *)(a2 + 32) + 32 * v14 + 8) + 8) + 9) == 5;
  uint64_t v29 = *(void *)(a2 + 24);
  if (v29) {
LABEL_32:
  }
    xmmword_1EB21CA50(v29);
LABEL_33:
  if (v28)
  {
    uint64_t v26 = sub_1B0C77698(a1, (uint64_t *)&v33, v27, 0);
    uint64_t v30 = v33;
    if (!v26)
    {
      uint64_t v26 = sqlite3_exec(v33, "PRAGMA journal_mode=wal", 0, 0, 0);
      sqlite3_exec(v33, "PRAGMA user_version", 0, 0, 0);
      uint64_t v30 = v33;
    }
  }
  else
  {
    uint64_t v30 = 0;
  }
  sub_1B0CF369C((uint64_t)v30, 0);
  return v26;
}

uint64_t _sqlite3_maintain_load_factor(uint64_t a1, uint64_t a2)
{
  uint64_t v35 = 0;
  int v36 = &v35;
  uint64_t v37 = 0x2000000000;
  int v38 = 0;
  uint64_t v34 = 0;
  int v4 = *(_DWORD *)(a1 + 140);
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  unsigned int v32 = 0;
  int v33 = v4;
  sub_1B0CE62B0((uint64_t)&v30, "PRAGMA ", 7u);
  if (a2) {
    sqlite3_str_appendf((sqlite3_str *)&v30, "%Q.", a2);
  }
  uint64_t v10 = v34;
  if ((int)v34 + 11 >= v32)
  {
    sub_1B0CE62B0((uint64_t)&v30, "auto_vacuum", 0xBu);
    int v12 = v31;
    if (!v31) {
      goto LABEL_10;
    }
  }
  else
  {
    LODWORD(v34) = v34 + 11;
    uint64_t v11 = &v31[v10];
    *(void *)uint64_t v11 = *(void *)"auto_vacuum";
    *(_DWORD *)(v11 + 7) = 1836414307;
    int v12 = v31;
    if (!v31) {
      goto LABEL_10;
    }
  }
  v12[v34] = 0;
  if (v33 && (v34 & 0x40000000000) == 0)
  {
    int v13 = (unsigned __int8 *)sub_1B0D06044(&v30);
    goto LABEL_11;
  }
LABEL_10:
  int v13 = v31;
LABEL_11:
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 0x40000000;
  v29[2] = sub_1B0CF9FBC;
  v29[3] = &unk_1E5FEEE50;
  v29[4] = &v35;
  uint64_t v14 = sqlite3_exec_b(a1, v13, (uint64_t)v29, v5, v6, v7, v8, v9);
  if (!v13) {
    goto LABEL_18;
  }
  uint64_t v15 = (void (**)(unsigned __int8 *))&off_1EB21C9E8;
  if (!dword_1EB21C9C0) {
    goto LABEL_17;
  }
  if ((void)xmmword_1EB2201B0) {
    xmmword_1EB21CA40(xmmword_1EB2201B0);
  }
  qword_1EB220108[0] -= (int)off_1EB21C9F8(v13);
  --qword_1EB220150;
  off_1EB21C9E8(v13);
  int v13 = (unsigned __int8 *)xmmword_1EB2201B0;
  if ((void)xmmword_1EB2201B0)
  {
    uint64_t v15 = (void (**)(unsigned __int8 *))&xmmword_1EB21CA50;
LABEL_17:
    (*v15)(v13);
  }
LABEL_18:
  if (v14) {
    goto LABEL_54;
  }
  if (*((_DWORD *)v36 + 6) != 1)
  {
    int v18 = *(_DWORD *)(a1 + 140);
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    unsigned int v32 = 0;
    int v33 = v18;
    LODWORD(v34) = 0;
    WORD2(v34) = 0;
    sub_1B0CE62B0((uint64_t)&v30, "PRAGMA ", 7u);
    if (a2) {
      sqlite3_str_appendf((sqlite3_str *)&v30, "%Q.", a2);
    }
    uint64_t v19 = v34;
    if ((int)v34 + 13 >= v32)
    {
      sub_1B0CE62B0((uint64_t)&v30, "auto_vacuum=1", 0xDu);
      BOOL v20 = v31;
      if (!v31) {
        goto LABEL_33;
      }
    }
    else
    {
      LODWORD(v34) = v34 + 13;
      qmemcpy(&v31[v19], "auto_vacuum=1", 13);
      BOOL v20 = v31;
      if (!v31) {
        goto LABEL_33;
      }
    }
    v20[v34] = 0;
    if (v33 && (v34 & 0x40000000000) == 0)
    {
      uint64_t v21 = (const char *)sub_1B0D06044(&v30);
      goto LABEL_34;
    }
LABEL_33:
    uint64_t v21 = (const char *)v31;
LABEL_34:
    uint64_t v14 = sqlite3_exec((sqlite3 *)a1, v21, 0, 0, 0);
    if (v21)
    {
      uint64_t v22 = (void (**)(const char *))&off_1EB21C9E8;
      if (!dword_1EB21C9C0)
      {
LABEL_40:
        (*v22)(v21);
        goto LABEL_41;
      }
      if ((void)xmmword_1EB2201B0) {
        xmmword_1EB21CA40(xmmword_1EB2201B0);
      }
      qword_1EB220108[0] -= (int)off_1EB21C9F8(v21);
      --qword_1EB220150;
      off_1EB21C9E8(v21);
      uint64_t v21 = (const char *)xmmword_1EB2201B0;
      if ((void)xmmword_1EB2201B0)
      {
        uint64_t v22 = (void (**)(const char *))&xmmword_1EB21CA50;
        goto LABEL_40;
      }
    }
LABEL_41:
    if (v14) {
      goto LABEL_54;
    }
    if (!*((_DWORD *)v36 + 6))
    {
      if (a2)
      {
        int v23 = *(_DWORD *)(a1 + 140);
        uint64_t v30 = 0;
        uint64_t v31 = 0;
        unsigned int v32 = 0;
        int v33 = v23;
        LODWORD(v34) = 0;
        WORD2(v34) = 0;
        sqlite3_str_appendall((sqlite3_str *)&v30, "VACUUM");
        sqlite3_str_appendf((sqlite3_str *)&v30, " %Q", a2);
        uint64_t v24 = (char *)sub_1B0C7B544((uint64_t)&v30);
        uint64_t v14 = sqlite3_exec((sqlite3 *)a1, v24, 0, 0, 0);
        sqlite3_free(v24);
      }
      else
      {
        uint64_t v14 = sqlite3_exec((sqlite3 *)a1, "VACUUM", 0, 0, 0);
      }
      if (v14) {
        goto LABEL_54;
      }
    }
  }
  int v16 = *(unsigned __int8 *)(a1 + 113);
  if (v16 == 186) {
    goto LABEL_23;
  }
  if (v16 != 118)
  {
    if (v16 != 109)
    {
      uint64_t v17 = "invalid";
      goto LABEL_53;
    }
LABEL_23:
    uint64_t v17 = "unopened";
LABEL_53:
    sqlite3_log(21, "API call with %s database connection pointer", v17);
    uint64_t v14 = sub_1B0CE1978(187669);
    goto LABEL_54;
  }
  uint64_t v25 = *(void *)(a1 + 24);
  if (v25) {
    xmmword_1EB21CA40(v25);
  }
  uint64_t v26 = *(void (**)(void))(a1 + 328);
  if (v26) {
    v26(*(void *)(a1 + 320));
  }
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = sub_1B0CF9FF8;
  *(void *)(a1 + 320) = 0;
  uint64_t v27 = *(void *)(a1 + 24);
  if (v27) {
    xmmword_1EB21CA50(v27);
  }
  uint64_t v14 = 0;
LABEL_54:
  _Block_object_dispose(&v35, 8);
  return v14;
}

uint64_t sub_1B0CF9FBC(uint64_t a1, sqlite3_stmt *a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = sqlite3_column_int(a2, 0);
  return 0;
}

uint64_t sub_1B0CF9FF8(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, int a5)
{
  if (!a4) {
    return 0;
  }
  double v5 = (double)(a3 - a4) / (double)a3;
  if (!((a5 * a4) >> 21) && v5 > 0.85) {
    return 0;
  }
  if (v5 <= 0.4) {
    return a4 - (a3 - a4);
  }
  return ((double)a4 * 0.2);
}

int sqlite3_snapshot_get(sqlite3 *db, const char *zSchema, sqlite3_snapshot **ppSnapshot)
{
  if (ppSnapshot) {
    *ppSnapshot = 0;
  }
  if (db)
  {
    int v6 = *((unsigned __int8 *)db + 113);
    switch(v6)
    {
      case 186:
        goto LABEL_7;
      case 118:
        uint64_t v8 = *((void *)db + 3);
        if (v8) {
          xmmword_1EB21CA40(v8);
        }
        if (*((unsigned char *)db + 101)) {
          goto LABEL_57;
        }
        if (zSchema)
        {
          int v9 = *((_DWORD *)db + 10);
          uint64_t v10 = (v9 - 1);
          if (v9 < 1)
          {
LABEL_36:
            int v17 = v10;
          }
          else
          {
            uint64_t v11 = *((void *)db + 4);
            int v12 = (unsigned char **)(v11 + 32 * v10);
            do
            {
              int v13 = *v12;
              if (*v12)
              {
                for (uint64_t i = zSchema; ; ++i)
                {
                  uint64_t v15 = *v13;
                  uint64_t v16 = *(unsigned __int8 *)i;
                  if (v15 == v16)
                  {
                    if (!*v13) {
                      goto LABEL_36;
                    }
                  }
                  else if (byte_1B0DE1758[v15] != byte_1B0DE1758[v16])
                  {
                    break;
                  }
                  ++v13;
                }
              }
              if (!v10)
              {
                uint64_t v19 = "main";
                for (uint64_t j = zSchema; ; ++j)
                {
                  uint64_t v21 = *(unsigned __int8 *)v19;
                  uint64_t v22 = *(unsigned __int8 *)j;
                  if (v21 == v22)
                  {
                    if (!*v19)
                    {
                      int v17 = 0;
LABEL_41:
                      uint64_t v24 = *(void *)(v11 + 32 * v17 + 8);
                      if (v24 && *(unsigned char *)(v24 + 16) == 2) {
                        goto LABEL_57;
                      }
                      uint64_t v25 = **(void **)(v24 + 8);
                      uint64_t v26 = *(void *)(v25 + 344);
                      if (v26) {
                        *(_DWORD *)(v26 + 152) = 1;
                      }
                      if (*(unsigned char *)(v24 + 17) || !*(unsigned char *)(v24 + 16))
                      {
                        int v27 = sub_1B0D12594(v24, 0, 0);
                        uint64_t v26 = *(void *)(v25 + 344);
                      }
                      else
                      {
                        int v27 = 0;
                      }
                      if (v26)
                      {
                        *(void *)(v26 + 144) = 0;
                        *(_DWORD *)(v26 + 152) = 0;
                      }
                      if (!v27)
                      {
                        BOOL v28 = *(_OWORD **)(**(void **)(v24 + 8) + 344);
                        if (v28)
                        {
                          if (v28[6] == 0)
                          {
                            uint64_t v30 = 0;
                            int v27 = 1;
                            goto LABEL_64;
                          }
                          if (sqlite3_initialize() || (uint64_t v30 = sub_1B0C7FC94(48)) == 0)
                          {
                            int v27 = 7;
                            uint64_t v29 = *((void *)db + 3);
                            if (!v29) {
                              return v27;
                            }
                          }
                          else
                          {
                            int v27 = 0;
                            long long v31 = *(_OWORD *)((char *)v28 + 72);
                            long long v32 = *(_OWORD *)((char *)v28 + 104);
                            *(_OWORD *)(v30 + 16) = *(_OWORD *)((char *)v28 + 88);
                            *(_OWORD *)(v30 + 32) = v32;
                            *(_OWORD *)uint64_t v30 = v31;
LABEL_64:
                            *ppSnapshot = (sqlite3_snapshot *)v30;
                            uint64_t v29 = *((void *)db + 3);
                            if (!v29) {
                              return v27;
                            }
                          }
LABEL_59:
                          xmmword_1EB21CA50(v29);
                          return v27;
                        }
LABEL_57:
                        int v27 = 1;
                      }
                      uint64_t v29 = *((void *)db + 3);
                      if (!v29) {
                        return v27;
                      }
                      goto LABEL_59;
                    }
                  }
                  else if (byte_1B0DE1758[v21] != byte_1B0DE1758[v22])
                  {
                    break;
                  }
                  ++v19;
                }
              }
              v12 -= 4;
              int v17 = -1;
              BOOL v18 = (int)v10 <= 0;
              LODWORD(v10) = v10 - 1;
            }
            while (!v18);
          }
        }
        else
        {
          int v17 = -1;
        }
        if (!v17 || v17 >= 2)
        {
          uint64_t v11 = *((void *)db + 4);
          goto LABEL_41;
        }
        goto LABEL_57;
      case 109:
LABEL_7:
        uint64_t v7 = "unopened";
        break;
      default:
        uint64_t v7 = "invalid";
        break;
    }
  }
  else
  {
    uint64_t v7 = "NULL";
  }
  sqlite3_log(21, "API call with %s database connection pointer", v7);

  return sub_1B0CE1978(190738);
}

int sqlite3_snapshot_open(sqlite3 *db, const char *zSchema, sqlite3_snapshot *pSnapshot)
{
  if (!db)
  {
    double v5 = "NULL";
    goto LABEL_31;
  }
  int v4 = *((unsigned __int8 *)db + 113);
  if (v4 == 186)
  {
LABEL_5:
    double v5 = "unopened";
LABEL_31:
    sqlite3_log(21, "API call with %s database connection pointer", v5);
    return sub_1B0CE1978(190778);
  }
  if (v4 != 118)
  {
    if (v4 != 109)
    {
      double v5 = "invalid";
      goto LABEL_31;
    }
    goto LABEL_5;
  }
  uint64_t v8 = *((void *)db + 3);
  if (v8) {
    xmmword_1EB21CA40(v8);
  }
  if (*((unsigned char *)db + 101)) {
    goto LABEL_52;
  }
  if (zSchema)
  {
    int v9 = *((_DWORD *)db + 10);
    uint64_t v10 = (v9 - 1);
    if (v9 < 1)
    {
LABEL_34:
      int v17 = v10;
    }
    else
    {
      uint64_t v11 = *((void *)db + 4);
      int v12 = (unsigned char **)(v11 + 32 * v10);
      do
      {
        int v13 = *v12;
        if (*v12)
        {
          for (uint64_t i = zSchema; ; ++i)
          {
            uint64_t v15 = *v13;
            uint64_t v16 = *(unsigned __int8 *)i;
            if (v15 == v16)
            {
              if (!*v13) {
                goto LABEL_34;
              }
            }
            else if (byte_1B0DE1758[v15] != byte_1B0DE1758[v16])
            {
              break;
            }
            ++v13;
          }
        }
        if (!v10)
        {
          uint64_t v19 = "main";
          for (uint64_t j = zSchema; ; ++j)
          {
            uint64_t v21 = *(unsigned __int8 *)v19;
            uint64_t v22 = *(unsigned __int8 *)j;
            if (v21 == v22)
            {
              if (!*v19)
              {
                int v17 = 0;
                goto LABEL_39;
              }
            }
            else if (byte_1B0DE1758[v21] != byte_1B0DE1758[v22])
            {
              break;
            }
            ++v19;
          }
        }
        v12 -= 4;
        int v17 = -1;
        BOOL v18 = (int)v10 <= 0;
        LODWORD(v10) = v10 - 1;
      }
      while (!v18);
    }
  }
  else
  {
    int v17 = -1;
  }
  if (v17 && v17 < 2) {
    goto LABEL_52;
  }
  uint64_t v11 = *((void *)db + 4);
LABEL_39:
  uint64_t v24 = *(void *)(v11 + 32 * v17 + 8);
  if (v24)
  {
    int v25 = *(unsigned __int8 *)(v24 + 16);
    if (v25 == 2) {
      goto LABEL_52;
    }
  }
  else
  {
    int v25 = MEMORY[0x10];
  }
  uint64_t v26 = **(void **)(v24 + 8);
  if (!v25)
  {
    uint64_t v30 = *(void *)(v26 + 344);
    if (v30) {
      goto LABEL_49;
    }
LABEL_52:
    int v27 = 1;
    goto LABEL_53;
  }
  if (*((_DWORD *)db + 52)) {
    goto LABEL_52;
  }
  int v27 = sub_1B0CFA610(v26, (uint64_t)pSnapshot);
  if (v27) {
    goto LABEL_53;
  }
  int v29 = sub_1B0CFA6C4(v24, v28);
  uint64_t v30 = *(void *)(v26 + 344);
  if (v29)
  {
    int v27 = v29;
    goto LABEL_63;
  }
LABEL_49:
  long long v31 = (uint64_t *)(v26 + 344);
  if (pSnapshot && !*(_DWORD *)pSnapshot->hidden)
  {
    int v32 = 1;
  }
  else
  {
    int v32 = 0;
    *(void *)(v30 + 144) = pSnapshot;
  }
  *(_DWORD *)(v30 + 152) = v32;
  if (*(unsigned char *)(v24 + 17) || !*(unsigned char *)(v24 + 16))
  {
    int v27 = sub_1B0D12594(v24, 0, 0);
    uint64_t v30 = *v31;
    if (!*v31) {
      goto LABEL_53;
    }
  }
  else
  {
    int v27 = 0;
  }
  *(void *)(v30 + 144) = 0;
  *(_DWORD *)(v30 + 152) = 0;
  if (v25)
  {
LABEL_63:
    if (!*(unsigned char *)(v30 + 63)) {
      (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v30 + 8) + 112))(*(void *)(v30 + 8), 1, 1, 5);
    }
  }
LABEL_53:
  uint64_t v33 = *((void *)db + 3);
  if (v33) {
    xmmword_1EB21CA50(v33);
  }
  return v27;
}

uint64_t sub_1B0CFA610(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 344);
  if (!v2) {
    return 1;
  }
  if (*(unsigned char *)(v2 + 63)
    || (uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v2 + 8) + 112))(*(void *)(v2 + 8), 1, 1, 6), !result))
  {
    if (*(void *)(a2 + 32) == *(void *)(v2 + 104)
      && *(_DWORD *)(a2 + 16) >= *(_DWORD *)(**(void **)(v2 + 48) + 128))
    {
      return 0;
    }
    else
    {
      if (!*(unsigned char *)(v2 + 63)) {
        (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v2 + 8) + 112))(*(void *)(v2 + 8), 1, 1, 5);
      }
      return 769;
    }
  }
  return result;
}

uint64_t sub_1B0CFA6C4(uint64_t a1, double a2)
{
  if (*(unsigned char *)(a1 + 17))
  {
    ++*(_DWORD *)(a1 + 20);
    if (!*(unsigned char *)(a1 + 18)) {
      sub_1B0D12478(a1);
    }
  }
  uint64_t v3 = sub_1B0CB23E8(a1, 0, a2);
  if (v3)
  {
    if (!*(unsigned char *)(a1 + 17)) {
      return v3;
    }
  }
  else
  {
    uint64_t v3 = sub_1B0CB283C(a1, 0);
    if (!*(unsigned char *)(a1 + 17)) {
      return v3;
    }
  }
  int v4 = *(_DWORD *)(a1 + 20) - 1;
  *(_DWORD *)(a1 + 20) = v4;
  if (!v4) {
    sub_1B0D12558(a1);
  }
  return v3;
}

int sqlite3_snapshot_recover(sqlite3 *db, const char *zDb)
{
  if (!db)
  {
    double v5 = "NULL";
    goto LABEL_30;
  }
  int v4 = *((unsigned __int8 *)db + 113);
  if (v4 == 186)
  {
LABEL_5:
    double v5 = "unopened";
LABEL_30:
    sqlite3_log(21, "API call with %s database connection pointer", v5);
    return sub_1B0CE1978(190831);
  }
  if (v4 != 118)
  {
    if (v4 != 109)
    {
      double v5 = "invalid";
      goto LABEL_30;
    }
    goto LABEL_5;
  }
  uint64_t v7 = *((void *)db + 3);
  if (v7) {
    xmmword_1EB21CA40(v7);
  }
  if (!zDb)
  {
    int v22 = -1;
    goto LABEL_37;
  }
  int v8 = *((_DWORD *)db + 10);
  uint64_t v9 = (v8 - 1);
  if (v8 < 1)
  {
    int v22 = v8 - 1;
LABEL_37:
    if (v22 < 2) {
      goto LABEL_41;
    }
LABEL_38:
    uint64_t v10 = *((void *)db + 4);
    goto LABEL_39;
  }
  uint64_t v10 = *((void *)db + 4);
  uint64_t v11 = (unsigned char **)(v10 + 32 * v9);
  while (1)
  {
    int v12 = *v11;
    if (*v11)
    {
      for (uint64_t i = zDb; ; ++i)
      {
        uint64_t v14 = *v12;
        uint64_t v15 = *(unsigned __int8 *)i;
        if (v14 == v15)
        {
          if (!*v12)
          {
            int v22 = v9;
            goto LABEL_34;
          }
        }
        else if (byte_1B0DE1758[v14] != byte_1B0DE1758[v15])
        {
          break;
        }
        ++v12;
      }
    }
    if (!v9) {
      break;
    }
LABEL_20:
    v11 -= 4;
    int v22 = -1;
    BOOL v16 = (int)v9 <= 0;
    LODWORD(v9) = v9 - 1;
    if (v16)
    {
LABEL_34:
      if (!v22) {
        goto LABEL_38;
      }
      goto LABEL_37;
    }
  }
  int v17 = "main";
  for (uint64_t j = zDb; ; ++j)
  {
    uint64_t v19 = *(unsigned __int8 *)v17;
    uint64_t v20 = *(unsigned __int8 *)j;
    if (v19 == v20) {
      break;
    }
    if (byte_1B0DE1758[v19] != byte_1B0DE1758[v20]) {
      goto LABEL_20;
    }
LABEL_25:
    ++v17;
  }
  if (*v17) {
    goto LABEL_25;
  }
  int v22 = 0;
LABEL_39:
  uint64_t v23 = *(void *)(v10 + 32 * v22 + 8);
  if (v23 && *(unsigned char *)(v23 + 16))
  {
LABEL_41:
    int v24 = 1;
    goto LABEL_42;
  }
  if (!*(unsigned char *)(v23 + 17) && *(unsigned char *)(v23 + 16) || (int v24 = sub_1B0D12594(v23, 0, 0)) == 0)
  {
    uint64_t v26 = *(void *)(**(void **)(v23 + 8) + 344);
    if (!v26)
    {
      int v24 = 1;
      goto LABEL_107;
    }
    if (*(unsigned char *)(v26 + 63)
      || (int v24 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v26 + 8) + 112))(*(void *)(v26 + 8), 1, 1, 10)) == 0)
    {
      uint64_t v27 = *(unsigned int *)(v26 + 56);
      int v28 = sqlite3_initialize();
      if ((int)v27 >= 1 && v28 == 0) {
        uint64_t v30 = (const void *)sub_1B0C7FC94(v27);
      }
      else {
        uint64_t v30 = 0;
      }
      uint64_t v31 = *(unsigned int *)(v26 + 56);
      int v32 = sqlite3_initialize();
      if ((int)v31 < 1 || v32 != 0)
      {
        int v24 = 7;
        if (v30)
        {
          uint64_t v34 = 0;
          BOOL v35 = 1;
          goto LABEL_92;
        }
LABEL_105:
        if (!*(unsigned char *)(v26 + 63)) {
          (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v26 + 8) + 112))(*(void *)(v26 + 8), 1, 1, 9);
        }
        goto LABEL_107;
      }
      uint64_t v36 = sub_1B0C7FC94(v31);
      uint64_t v34 = (const void *)v36;
      BOOL v35 = v36 == 0;
      if (v30 && v36)
      {
        *(unsigned char *)(v26 + 65) = 1;
        size_t v37 = *(int *)(v26 + 56);
        int64_t v52 = 0;
        int v24 = (*(uint64_t (**)(void, int64_t *))(**(void **)(v26 + 8) + 48))(*(void *)(v26 + 8), &v52);
        if (!v24)
        {
          uint64_t v38 = **(void **)(v26 + 48);
          LODWORD(v39) = *(_DWORD *)(v38 + 128);
          uint64_t v49 = v38;
          if (v39 > *(_DWORD *)(v38 + 96))
          {
            while (1)
            {
              uint64_t v50 = 0;
              uint64_t v51 = 0;
              unint64_t v40 = ((unint64_t)(v39 + 4096) + 0xFFFFFFFF021) >> 12;
              if (*(_DWORD *)(v26 + 40) > (int)v40
                && (v41 = *(void *)(*(void *)(v26 + 48) + 8 * (int)v40), (uint64_t v50 = v41) != 0))
              {
                int v24 = 0;
              }
              else
              {
                unsigned int v42 = sub_1B0D10A2C(v26, ((unint64_t)(v39 + 4096) + 0xFFFFFFFF021) >> 12, &v50);
                int v24 = v42;
                uint64_t v41 = v50;
                if (!v50)
                {
                  if (v42 <= 1) {
                    int v24 = 1;
                  }
                  else {
                    int v24 = v42;
                  }
                  break;
                }
              }
              if (v40)
              {
                int v43 = (v40 << 12) - 34;
              }
              else
              {
                int v43 = 0;
                v41 += 136;
                uint64_t v50 = v41;
              }
              LODWORD(v51) = v43;
              if (v24) {
                break;
              }
              uint64_t v39 = (v39 - 1);
              size_t v44 = (*(_DWORD *)(v41 + 4 * (v39 - v43)) - 1) * v37;
              if ((uint64_t)(v44 + v37) <= v52)
              {
                int v45 = (*(uint64_t (**)(void, const void *, size_t, size_t))(**(void **)(v26 + 16) + 16))(*(void *)(v26 + 16), v30, v37, v39 * (v37 + 24) + 56);
                if (v45
                  || (int v45 = (*(uint64_t (**)(void, const void *, size_t, size_t))(**(void **)(v26 + 8)
                                                                                            + 16))(*(void *)(v26 + 8), v34, v37, v44)) != 0)
                {
                  int v24 = v45;
                  break;
                }
                if (!memcmp(v30, v34, v37))
                {
LABEL_84:
                  int v24 = 0;
                  break;
                }
              }
              *(_DWORD *)(v49 + 128) = v39;
              if (v39 <= *(_DWORD *)(v49 + 96)) {
                goto LABEL_84;
              }
            }
          }
        }
        BOOL v35 = 0;
        *(unsigned char *)(v26 + 65) = 0;
LABEL_92:
        char v46 = (void (**)(const void *))&off_1EB21C9E8;
        if (dword_1EB21C9C0)
        {
          if ((void)xmmword_1EB2201B0) {
            xmmword_1EB21CA40(xmmword_1EB2201B0);
          }
          qword_1EB220108[0] -= (int)off_1EB21C9F8(v30);
          --qword_1EB220150;
          off_1EB21C9E8(v30);
          uint64_t v30 = (const void *)xmmword_1EB2201B0;
          if ((void)xmmword_1EB2201B0)
          {
            char v46 = (void (**)(const void *))&xmmword_1EB21CA50;
            goto LABEL_97;
          }
        }
        else
        {
LABEL_97:
          (*v46)(v30);
        }
      }
      else
      {
        int v24 = 7;
        if (v30) {
          goto LABEL_92;
        }
      }
      if (v35) {
        goto LABEL_105;
      }
      int v47 = (void (**)(const void *))&off_1EB21C9E8;
      if (dword_1EB21C9C0)
      {
        if ((void)xmmword_1EB2201B0) {
          xmmword_1EB21CA40(xmmword_1EB2201B0);
        }
        qword_1EB220108[0] -= (int)off_1EB21C9F8(v34);
        --qword_1EB220150;
        off_1EB21C9E8(v34);
        uint64_t v34 = (const void *)xmmword_1EB2201B0;
        if (!(void)xmmword_1EB2201B0) {
          goto LABEL_105;
        }
        int v47 = (void (**)(const void *))&xmmword_1EB21CA50;
      }
      (*v47)(v34);
      goto LABEL_105;
    }
LABEL_107:
    if (*(unsigned char *)(v23 + 17))
    {
      ++*(_DWORD *)(v23 + 20);
      if (!*(unsigned char *)(v23 + 18)) {
        sub_1B0D12478(v23);
      }
    }
    if (!sub_1B0CB23E8(v23, 0, v2)) {
      sub_1B0CB283C(v23, 0);
    }
    if (*(unsigned char *)(v23 + 17))
    {
      int v48 = *(_DWORD *)(v23 + 20) - 1;
      *(_DWORD *)(v23 + 20) = v48;
      if (!v48) {
        sub_1B0D12558(v23);
      }
    }
  }
LABEL_42:
  uint64_t v25 = *((void *)db + 3);
  if (v25) {
    xmmword_1EB21CA50(v25);
  }
  return v24;
}

void sqlite3_snapshot_free(sqlite3_snapshot *a1)
{
  if (!a1) {
    return;
  }
  uint64_t v1 = a1;
  double v2 = (void (**)(sqlite3_snapshot *))&off_1EB21C9E8;
  if (!dword_1EB21C9C0) {
    goto LABEL_7;
  }
  if ((void)xmmword_1EB2201B0) {
    xmmword_1EB21CA40(xmmword_1EB2201B0);
  }
  qword_1EB220108 -= (int)off_1EB21C9F8(v1);
  --qword_1EB220150;
  off_1EB21C9E8(v1);
  uint64_t v1 = (sqlite3_snapshot *)xmmword_1EB2201B0;
  if ((void)xmmword_1EB2201B0)
  {
    double v2 = (void (**)(sqlite3_snapshot *))&xmmword_1EB21CA50;
LABEL_7:
    uint64_t v3 = *v2;
    v3(v1);
  }
}

int sqlite3_compileoption_used(const char *zOptName)
{
  if (zOptName)
  {
    uint64_t v1 = zOptName;
    uint64_t v2 = *(unsigned __int8 *)zOptName;
    if (!*zOptName)
    {
      int v12 = 0;
      uint64_t v10 = "SQLITE_";
      goto LABEL_32;
    }
    if ((v2 & 0xFFFFFFDF) == 0x53)
    {
      uint64_t v3 = *((unsigned __int8 *)zOptName + 1);
      if (!zOptName[1])
      {
        int v12 = 0;
        uint64_t v10 = "QLITE_";
        goto LABEL_32;
      }
      if ((v3 & 0xFFFFFFDF) == 0x51)
      {
        uint64_t v4 = *((unsigned __int8 *)zOptName + 2);
        if (!zOptName[2])
        {
          int v12 = 0;
          uint64_t v10 = "LITE_";
          goto LABEL_32;
        }
        if ((v4 & 0xFFFFFFDF) == 0x4C)
        {
          uint64_t v5 = *((unsigned __int8 *)zOptName + 3);
          if (!zOptName[3])
          {
            int v12 = 0;
            uint64_t v10 = "ITE_";
            goto LABEL_32;
          }
          if ((v5 & 0xFFFFFFDF) == 0x49)
          {
            uint64_t v6 = *((unsigned __int8 *)zOptName + 4);
            if (!zOptName[4])
            {
              int v12 = 0;
              uint64_t v10 = "TE_";
              goto LABEL_32;
            }
            if ((v6 & 0xFFFFFFDF) == 0x54)
            {
              uint64_t v7 = *((unsigned __int8 *)zOptName + 5);
              if (!zOptName[5])
              {
                int v12 = 0;
                uint64_t v10 = "E_";
                goto LABEL_32;
              }
              if ((v7 & 0xFFFFFFDF) == 0x45)
              {
                uint64_t v8 = *((unsigned __int8 *)zOptName + 6);
                if (!zOptName[6])
                {
                  int v12 = 0;
                  uint64_t v10 = "_";
LABEL_32:
                  if (v12 != byte_1B0DE1758[*v10])
                  {
LABEL_34:
                    int v13 = strlen(v1);
                    uint64_t v14 = 0;
                    int v15 = v13 & 0x3FFFFFFF;
                    uint64_t v16 = v13 & 0x3FFFFFFF;
                    while (1)
                    {
                      int v17 = off_1E5FF0790[v14];
                      if (v17)
                      {
                        if (!v15) {
                          goto LABEL_35;
                        }
                        int v18 = v15 + 1;
                        uint64_t v19 = off_1E5FF0790[v14];
                        uint64_t v20 = v1;
                        while (1)
                        {
                          uint64_t v21 = *(unsigned __int8 *)v20;
                          if (!*v20) {
                            break;
                          }
                          LODWORD(v21) = byte_1B0DE1758[v21];
                          int v22 = byte_1B0DE1758[*v19];
                          if (v21 != v22) {
                            goto LABEL_45;
                          }
                          ++v20;
                          ++v19;
                          if (--v18 <= 1) {
                            goto LABEL_35;
                          }
                        }
                        int v22 = byte_1B0DE1758[*v19];
LABEL_45:
                        if (v21 == v22)
                        {
LABEL_35:
                          if ((byte_1B0DE196D[v17[v16]] & 0x46) == 0) {
                            return 1;
                          }
                        }
                      }
                      if (++v14 == 69) {
                        return 0;
                      }
                    }
                  }
LABEL_33:
                  uint64_t v1 = zOptName + 7;
                  goto LABEL_34;
                }
                if (v8 == 95) {
                  goto LABEL_33;
                }
                uint64_t v9 = &byte_1B0DE1758[v8];
                uint64_t v10 = "_";
              }
              else
              {
                uint64_t v9 = &byte_1B0DE1758[v7];
                uint64_t v10 = "E_";
              }
            }
            else
            {
              uint64_t v9 = &byte_1B0DE1758[v6];
              uint64_t v10 = "TE_";
            }
          }
          else
          {
            uint64_t v9 = &byte_1B0DE1758[v5];
            uint64_t v10 = "ITE_";
          }
        }
        else
        {
          uint64_t v9 = &byte_1B0DE1758[v4];
          uint64_t v10 = "LITE_";
        }
      }
      else
      {
        uint64_t v9 = &byte_1B0DE1758[v3];
        uint64_t v10 = "QLITE_";
      }
    }
    else
    {
      uint64_t v9 = &byte_1B0DE1758[v2];
      uint64_t v10 = "SQLITE_";
    }
    int v12 = *v9;
    goto LABEL_32;
  }
  sub_1B0CE1978(190875);
  return 0;
}

const char *__cdecl sqlite3_compileoption_get(int N)
{
  if (N > 0x44) {
    return 0;
  }
  else {
    return off_1E5FF0790[N];
  }
}

int sqlite3_rtree_geometry_callback(sqlite3 *db, const char *zGeom, int (__cdecl *xGeom)(sqlite3_rtree_geometry *, int, sqlite3_rtree_dbl *, int *), void *pContext)
{
  if (sqlite3_initialize()) {
    return 7;
  }
  uint64_t v9 = (void *)sub_1B0C7FC94(32);
  if (!v9) {
    return 7;
  }
  *uint64_t v9 = xGeom;
  v9[1] = 0;
  v9[2] = 0;
  v9[3] = pContext;
  return sub_1B0CF3DF8((uint64_t)db, (char *)zGeom, 0xFFFFFFFFLL, 5, (uint64_t)v9, (uint64_t)sub_1B0CFB180, 0, 0, 0, 0, (void (*)(uint64_t))sub_1B0CFB3D8);
}

void sub_1B0CFB180(sqlite3_context *a1, int a2, uint64_t a3)
{
  if (!a1 || (uint64_t v6 = *((void *)a1 + 1)) == 0)
  {
    sub_1B0CE1978(97932);
    uint64_t v7 = 0;
    if (!sqlite3_initialize()) {
      goto LABEL_6;
    }
LABEL_21:
    sqlite3_result_error_nomem(a1);
    return;
  }
  uint64_t v7 = *(long long **)(v6 + 8);
  if (sqlite3_initialize()) {
    goto LABEL_21;
  }
LABEL_6:
  uint64_t v8 = sub_1B0C7FC94(8 * (a2 + (uint64_t)(a2 - 1)) + 64);
  if (!v8) {
    goto LABEL_21;
  }
  uint64_t v9 = v8;
  *(_DWORD *)uint64_t v8 = 8 * (a2 + a2 - 1) + 64;
  long long v10 = *v7;
  *(_OWORD *)(v8 + 24) = v7[1];
  *(_OWORD *)(v8 + 8) = v10;
  *(void *)(v8 + 48) = v8 + 8 * a2 + 56;
  *(_DWORD *)(v8 + 40) = a2;
  if (a2 < 1) {
    goto LABEL_28;
  }
  uint64_t v11 = 0;
  int v12 = 0;
  uint64_t v13 = 8 * a2;
  do
  {
    *(void *)(*(void *)(v9 + 48) + v11) = sqlite3_value_dup(*(const sqlite3_value **)(a3 + v11));
    if (!*(void *)(*(void *)(v9 + 48) + v11)) {
      int v12 = 1;
    }
    uint64_t v15 = *(void *)(a3 + v11);
    if (!v15)
    {
      sub_1B0CE1978(89752);
LABEL_18:
      double v14 = 0.0;
      goto LABEL_10;
    }
    __int16 v16 = *(_WORD *)(v15 + 20);
    if ((v16 & 8) != 0)
    {
      double v14 = *(double *)v15;
      goto LABEL_10;
    }
    if ((v16 & 0x24) != 0)
    {
      double v14 = (double)*(uint64_t *)v15;
      goto LABEL_10;
    }
    if ((v16 & 0x12) == 0) {
      goto LABEL_18;
    }
    double v14 = sub_1B0D18684(v15);
LABEL_10:
    *(double *)(v9 + v11 + 56) = v14;
    v11 += 8;
  }
  while (v13 != v11);
  if (v12)
  {
    sqlite3_result_error_nomem(a1);
    sub_1B0DD4914(v9);
    return;
  }
LABEL_28:
  if (a1)
  {
    uint64_t v17 = *(void *)a1;
    if ((*(_WORD *)(v17 + 20) & 0x9000) != 0 || *(_DWORD *)(v17 + 32)) {
      sub_1B0D180E4(v17);
    }
    *(_WORD *)(v17 + 20) = 1;
    sub_1B0D180E4(v17);
    *(void *)uint64_t v17 = "RtreeMatchArg";
    *(void *)(v17 + 8) = v9;
    *(_WORD *)(v17 + 20) = 6657;
    *(unsigned char *)(v17 + 23) = 112;
    *(unsigned char *)(v17 + 56) = 0;
    *(void *)(v17 + 48) = sub_1B0DD4914;
  }
  else
  {
    sub_1B0CE1978(97467);
  }
}

uint64_t sub_1B0CFB3D8(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void (**)(void))(a1 + 16);
  if (v2) {
    v2(*(void *)(a1 + 24));
  }
  uint64_t v3 = &off_1EB21C9E8;
  if (!dword_1EB21C9C0) {
    goto LABEL_8;
  }
  if ((void)xmmword_1EB2201B0) {
    xmmword_1EB21CA40(xmmword_1EB2201B0);
  }
  qword_1EB220108 -= (int)off_1EB21C9F8(v1);
  --qword_1EB220150;
  uint64_t result = off_1EB21C9E8(v1);
  uint64_t v1 = xmmword_1EB2201B0;
  if ((void)xmmword_1EB2201B0)
  {
    uint64_t v3 = &xmmword_1EB21CA50;
LABEL_8:
    uint64_t v5 = *v3;
    return v5(v1);
  }
  return result;
}

int sqlite3_rtree_query_callback(sqlite3 *db, const char *zQueryFunc, int (__cdecl *xQueryFunc)(sqlite3_rtree_query_info *), void *pContext, void (__cdecl *xDestructor)(void *))
{
  if (sqlite3_initialize() || (uint64_t v11 = (void *)sub_1B0C7FC94(32)) == 0)
  {
    if (xDestructor) {
      ((void (*)(void *))xDestructor)(pContext);
    }
    return 7;
  }
  else
  {
    *uint64_t v11 = 0;
    v11[1] = xQueryFunc;
    v11[2] = xDestructor;
    v11[3] = pContext;
    return sub_1B0CF3DF8((uint64_t)db, (char *)zQueryFunc, 0xFFFFFFFFLL, 5, (uint64_t)v11, (uint64_t)sub_1B0CFB180, 0, 0, 0, 0, (void (*)(uint64_t))sub_1B0CFB3D8);
  }
}

uint64_t sqlite3_intarray_create(unsigned __int8 *a1, char *a2, void *a3)
{
  if (sqlite3_initialize())
  {
    *a3 = 0;
    return 7;
  }
  uint64_t v8 = (void *)sub_1B0C7FC94(24);
  *a3 = v8;
  if (!v8) {
    return 7;
  }
  *uint64_t v8 = 0;
  v8[1] = 0;
  v8[2] = 0;
  if (!a1)
  {
    long long v10 = "NULL";
    goto LABEL_22;
  }
  int v9 = a1[113];
  if (v9 == 186)
  {
LABEL_10:
    long long v10 = "unopened";
LABEL_22:
    sqlite3_log(21, "API call with %s database connection pointer", v10);
    goto LABEL_23;
  }
  if (v9 != 118)
  {
    if (v9 != 109)
    {
      long long v10 = "invalid";
      goto LABEL_22;
    }
    goto LABEL_10;
  }
  if (a2)
  {
    uint64_t v6 = sub_1B0C7E204((uint64_t)a1, a2, (uint64_t)&unk_1EC526118, (uint64_t)v8, (void (*)(uint64_t))sub_1B0CFB738);
    if (!v6)
    {
      uint64_t v11 = sqlite3_mprintf("CREATE VIRTUAL TABLE temp.%Q USING %Q", a2, a2);
      uint64_t v6 = sqlite3_exec((sqlite3 *)a1, v11, 0, 0, 0);
      if (v11)
      {
        int v12 = (void (**)(char *))&off_1EB21C9E8;
        if (dword_1EB21C9C0)
        {
          if ((void)xmmword_1EB2201B0) {
            xmmword_1EB21CA40(xmmword_1EB2201B0);
          }
          qword_1EB220108[0] -= (int)off_1EB21C9F8(v11);
          --qword_1EB220150;
          off_1EB21C9E8(v11);
          uint64_t v11 = (char *)xmmword_1EB2201B0;
          if (!(void)xmmword_1EB2201B0) {
            return v6;
          }
          int v12 = (void (**)(char *))&xmmword_1EB21CA50;
        }
        (*v12)(v11);
      }
    }
    return v6;
  }
LABEL_23:

  return sub_1B0CE1978(161272);
}

uint64_t sub_1B0CFB738(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void (**)(void))(a1 + 16);
  if (v2) {
    v2(*(void *)(a1 + 8));
  }
  uint64_t v3 = &off_1EB21C9E8;
  if (!dword_1EB21C9C0) {
    goto LABEL_8;
  }
  if ((void)xmmword_1EB2201B0) {
    xmmword_1EB21CA40(xmmword_1EB2201B0);
  }
  qword_1EB220108 -= (int)off_1EB21C9F8(v1);
  --qword_1EB220150;
  uint64_t result = off_1EB21C9E8(v1);
  uint64_t v1 = xmmword_1EB2201B0;
  if ((void)xmmword_1EB2201B0)
  {
    uint64_t v3 = &xmmword_1EB21CA50;
LABEL_8:
    uint64_t v5 = *v3;
    return v5(v1);
  }
  return result;
}

uint64_t sqlite3_intarray_bind(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void (**)(void))(a1 + 16);
  if (v8) {
    v8(*(void *)(a1 + 8));
  }
  *(_DWORD *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a4;
  return 0;
}

uint64_t sqlite3session_diff(uint64_t a1, const char *a2, char *__s, char **a4)
{
  uint64_t v8 = *(unsigned int *)(a1 + 36);
  v78[0] = 0;
  v78[1] = 0;
  *(void *)(a1 + 96) = v78;
  *(void *)(a1 + 104) = sub_1B0DD4D30;
  *(void *)(a1 + 112) = sub_1B0DD4D70;
  *(void *)(a1 + 120) = sub_1B0DD4DAC;
  *(void *)(a1 + 128) = sub_1B0DD4E24;
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  if (!*(void *)a1)
  {
    int v12 = "NULL";
    goto LABEL_10;
  }
  int v11 = *(unsigned __int8 *)(v9 + 113);
  if (v11 == 186)
  {
LABEL_5:
    int v12 = "unopened";
LABEL_10:
    sqlite3_log(21, "API call with %s database connection pointer", v12);
    sub_1B0CE1978(186024);
    goto LABEL_11;
  }
  if (v11 != 118)
  {
    if (v11 != 109)
    {
      int v12 = "invalid";
      goto LABEL_10;
    }
    goto LABEL_5;
  }
  uint64_t v13 = *(void *)(v9 + 24);
  if (v13) {
    xmmword_1EB21CA40(v13);
  }
LABEL_11:
  if (a4) {
    *a4 = 0;
  }
  double v14 = *(unsigned __int8 **)a1;
  if (!v8)
  {
    uint64_t v77 = 0;
    uint64_t v8 = sub_1B0CFC1C0(a1, __s, &v77);
    uint64_t v15 = v77;
    if (!v77) {
      goto LABEL_55;
    }
    if (sub_1B0CFC2F4(a1, v77))
    {
      uint64_t v8 = *(unsigned int *)(a1 + 36);
      goto LABEL_55;
    }
    if (v8)
    {
LABEL_55:
      double v14 = *(unsigned __int8 **)a1;
      goto LABEL_56;
    }
    uint64_t v75 = 0;
    uint64_t v76 = 0;
    unint64_t v79 = 0;
    __int16 v16 = (BOOL *)&v76;
    if (!*(_DWORD *)(a1 + 32)) {
      __int16 v16 = 0;
    }
    LODWORD(v8) = sub_1B0CFC460(0, (sqlite3 *)v14, a2, __s, (_DWORD *)&v76 + 1, 0, &v75, &v79, v16);
    int v17 = 0;
    int v18 = 0;
    if (!v8)
    {
      uint64_t v19 = *(unsigned int *)(v15 + 16);
      if (v19 == HIDWORD(v76))
      {
        if ((int)v19 >= 1)
        {
          uint64_t v20 = 0;
          int v18 = 0;
          int v17 = 0;
          while (1)
          {
            if (*(unsigned __int8 *)(*(void *)(v15 + 40) + v20) != *((unsigned __int8 *)v79 + v20)) {
              int v18 = 1;
            }
            uint64_t v21 = *(unsigned char **)(v75 + 8 * v20);
            int v22 = *(unsigned __int8 **)(*(void *)(v15 + 32) + 8 * v20);
            if (v21)
            {
              if (v22)
              {
                while (1)
                {
                  uint64_t v24 = *v21;
                  uint64_t v25 = *v22;
                  if (v24 == v25)
                  {
                    if (!*v21) {
                      goto LABEL_25;
                    }
                  }
                  else
                  {
                    int v23 = byte_1B0DE1758[v24] - byte_1B0DE1758[v25];
                    if (v23) {
                      goto LABEL_41;
                    }
                  }
                  ++v21;
                  ++v22;
                }
              }
            }
            else
            {
              if (v22) {
                int v23 = -1;
              }
              else {
                int v23 = 0;
              }
LABEL_41:
              if (!v23) {
                goto LABEL_25;
              }
            }
            int v18 = 1;
LABEL_25:
            if (*((unsigned char *)v79 + v20)) {
              int v17 = 1;
            }
            if (++v20 == v19) {
              goto LABEL_45;
            }
          }
        }
        int v17 = 0;
        int v18 = 0;
      }
      else
      {
        int v17 = 0;
        int v18 = 1;
      }
    }
LABEL_45:
    uint64_t v26 = v75;
    if (v75)
    {
      uint64_t v27 = &off_1EB21C9E8;
      if (!dword_1EB21C9C0)
      {
LABEL_51:
        (*v27)(v26);
        goto LABEL_52;
      }
      if ((void)xmmword_1EB2201B0) {
        xmmword_1EB21CA40(xmmword_1EB2201B0);
      }
      qword_1EB220108[0] -= (int)off_1EB21C9F8(v26);
      --qword_1EB220150;
      off_1EB21C9E8(v26);
      uint64_t v26 = xmmword_1EB2201B0;
      if ((void)xmmword_1EB2201B0)
      {
        uint64_t v27 = &xmmword_1EB21CA50;
        goto LABEL_51;
      }
    }
LABEL_52:
    if (a4 && v18)
    {
      *a4 = sqlite3_mprintf("table schemas do not match");
      uint64_t v8 = 17;
      goto LABEL_55;
    }
    if (v18) {
      uint64_t v8 = 17;
    }
    else {
      uint64_t v8 = v8;
    }
    if (v17 && !v8)
    {
      uint64_t v32 = *(unsigned int *)(v15 + 16);
      if ((int)v32 < 1)
      {
        uint64_t v33 = 0;
        goto LABEL_80;
      }
      uint64_t v33 = 0;
      uint64_t v34 = *(void *)(v15 + 8);
      BOOL v35 = &byte_1B0DE9952;
      size_t v37 = *(void **)(v15 + 32);
      uint64_t v36 = *(unsigned __int8 **)(v15 + 40);
      while (1)
      {
        if (*v36++)
        {
          uint64_t v33 = sqlite3_mprintf("%z%s\"%w\".\"%w\".\"%w\"=\"%w\".\"%w\".\"%w\"", v33, v35, v10, v34, *v37, a2, v34, *v37);
          if (!v33)
          {
LABEL_78:
            uint64_t v15 = v77;
LABEL_80:
            uint64_t v8 = sub_1B0CFC9A0(18, (uint64_t *)a1, v15, v10, (uint64_t)a2, (uint64_t)v33);
            if (v8 || (uint64_t v8 = sub_1B0CFC9A0(9, (uint64_t *)a1, v77, (uint64_t)a2, v10, (uint64_t)v33), v8))
            {
LABEL_82:
              if (v33)
              {
                uint64_t v39 = (void (**)(char *))&off_1EB21C9E8;
                if (!dword_1EB21C9C0) {
                  goto LABEL_88;
                }
                if ((void)xmmword_1EB2201B0) {
                  xmmword_1EB21CA40(xmmword_1EB2201B0);
                }
                qword_1EB220108[0] -= (int)off_1EB21C9F8(v33);
                --qword_1EB220150;
                off_1EB21C9E8(v33);
                uint64_t v33 = (char *)xmmword_1EB2201B0;
                if ((void)xmmword_1EB2201B0)
                {
                  uint64_t v39 = (void (**)(char *))&xmmword_1EB21CA50;
LABEL_88:
                  (*v39)(v33);
                }
              }
              goto LABEL_55;
            }
            uint64_t v40 = v77;
            uint64_t v41 = *(unsigned int *)(v77 + 16);
            if ((int)v41 < 1) {
              goto LABEL_99;
            }
            uint64_t v42 = 0;
            int v43 = 0;
            uint64_t v44 = *(void *)(a1 + 8);
            uint64_t v45 = *(void *)(v77 + 8);
            uint64_t v46 = v41 - 1;
            int v47 = &byte_1B0DE9952;
            char v48 = 1;
            uint64_t v49 = *(void *)(v77 + 32);
            uint64_t v50 = *(void *)(v77 + 40);
            uint64_t v51 = "%z%s\"%w\".\"%w\".\"%w\" IS NOT \"%w\".\"%w\".\"%w\"";
            do
            {
              while (!*(unsigned char *)(v50 + v42))
              {
                uint64_t v72 = v46;
                uint64_t v73 = v49;
                uint64_t v52 = v45;
                uint64_t v53 = v44;
                unint64_t v54 = v51;
                int v43 = sqlite3_mprintf(v51, v43, v47, v44, v45, *(void *)(v49 + 8 * v42), a2, v45, *(void *)(v49 + 8 * v42));
                if (!v43) {
                  goto LABEL_109;
                }
                char v48 = 0;
                int v47 = " OR ";
                uint64_t v46 = v72;
                uint64_t v49 = v73;
                BOOL v55 = v72 == v42++;
                uint64_t v44 = v53;
                uint64_t v45 = v52;
                uint64_t v51 = v54;
                if (v55) {
                  goto LABEL_101;
                }
              }
              ++v42;
            }
            while (v41 != v42);
            if (v48) {
LABEL_99:
            }
              int v43 = sqlite3_mprintf("0");
            if (!v43)
            {
LABEL_109:
              uint64_t v8 = 7;
              goto LABEL_82;
            }
LABEL_101:
            if (*(int *)(v40 + 16) < 1)
            {
              unsigned int v57 = 0;
              unsigned int v61 = 0;
            }
            else
            {
              unsigned int v74 = v43;
              uint64_t v56 = 0;
              unsigned int v57 = 0;
              uint64_t v58 = *(void *)(a1 + 8);
              while (1)
              {
                unsigned int v59 = v57 ? ", " : &byte_1B0DE9952;
                unsigned int v57 = sqlite3_mprintf("%z%s\"%w\".\"%w\".\"%w\"", v57, v59, v58, *(void *)(v40 + 8), *(void *)(*(void *)(v40 + 32) + 8 * v56));
                if (!v57) {
                  break;
                }
                ++v56;
                uint64_t v60 = *(int *)(v40 + 16);
                if (v56 >= v60) {
                  goto LABEL_112;
                }
              }
              LODWORD(v60) = *(_DWORD *)(v40 + 16);
LABEL_112:
              if ((int)v60 < 1)
              {
                unsigned int v61 = 0;
              }
              else
              {
                uint64_t v62 = 0;
                unsigned int v61 = 0;
                do
                {
                  if (v61) {
                    uint64_t v63 = ", ";
                  }
                  else {
                    uint64_t v63 = &byte_1B0DE9952;
                  }
                  unsigned int v61 = sqlite3_mprintf("%z%s\"%w\".\"%w\".\"%w\"", v61, v63, a2, *(void *)(v40 + 8), *(void *)(*(void *)(v40 + 32) + 8 * v62));
                  if (!v61) {
                    break;
                  }
                  ++v62;
                }
                while (v62 < *(int *)(v40 + 16));
              }
              int v43 = v74;
            }
            unsigned int v64 = (unsigned __int8 *)sqlite3_mprintf("SELECT %s,%s FROM \"%w\".\"%w\", \"%w\".\"%w\" WHERE %s AND (%z)", v57, v61, *(void *)(a1 + 8), *(void *)(v40 + 8), a2, *(void *)(v40 + 8), v33, v43);
            int v66 = v64;
            uint64_t v8 = 7;
            if (v61)
            {
              if (v57)
              {
                if (v64)
                {
                  unint64_t v79 = 0;
                  uint64_t v8 = sub_1B0C7EAC0(*(void *)a1, v64, 0xFFFFFFFFLL, 0, 0, &v79, 0, v65);
                  if (!v8)
                  {
                    uint64_t v67 = *(void *)(a1 + 96);
                    *(void *)uint64_t v67 = v79;
                    *(_DWORD *)(v67 + 12) = *(_DWORD *)(v40 + 16);
                    while (sqlite3_step(v79) == 100)
                    {
                      if (*(_DWORD *)(v40 + 24)) {
                        sqlite3_int64 v68 = sqlite3_column_int64(v79, 0);
                      }
                      else {
                        sqlite3_int64 v68 = 0;
                      }
                      sub_1B0DD4E2C(23, v68, a1, v40);
                    }
                    uint64_t v8 = sqlite3_finalize(v79);
                  }
                }
              }
            }
            if (v66)
            {
              int v69 = (uint64_t (**)(unsigned __int8 *))&off_1EB21C9E8;
              if (!dword_1EB21C9C0) {
                goto LABEL_139;
              }
              if ((void)xmmword_1EB2201B0) {
                xmmword_1EB21CA40(xmmword_1EB2201B0);
              }
              qword_1EB220108[0] -= (int)off_1EB21C9F8(v66);
              --qword_1EB220150;
              off_1EB21C9E8(v66);
              int v66 = (unsigned __int8 *)xmmword_1EB2201B0;
              if ((void)xmmword_1EB2201B0)
              {
                int v69 = (uint64_t (**)(unsigned __int8 *))&xmmword_1EB21CA50;
LABEL_139:
                (*v69)(v66);
              }
            }
            if (v57)
            {
              unsigned int v70 = (void (**)(char *))&off_1EB21C9E8;
              if (!dword_1EB21C9C0) {
                goto LABEL_146;
              }
              if ((void)xmmword_1EB2201B0) {
                xmmword_1EB21CA40(xmmword_1EB2201B0);
              }
              qword_1EB220108[0] -= (int)off_1EB21C9F8(v57);
              --qword_1EB220150;
              off_1EB21C9E8(v57);
              unsigned int v57 = (char *)xmmword_1EB2201B0;
              if ((void)xmmword_1EB2201B0)
              {
                unsigned int v70 = (void (**)(char *))&xmmword_1EB21CA50;
LABEL_146:
                (*v70)(v57);
              }
            }
            if (!v61) {
              goto LABEL_82;
            }
            BOOL v71 = (void (**)(char *))&off_1EB21C9E8;
            if (dword_1EB21C9C0)
            {
              if ((void)xmmword_1EB2201B0) {
                xmmword_1EB21CA40(xmmword_1EB2201B0);
              }
              qword_1EB220108[0] -= (int)off_1EB21C9F8(v61);
              --qword_1EB220150;
              off_1EB21C9E8(v61);
              unsigned int v61 = (char *)xmmword_1EB2201B0;
              if (!(void)xmmword_1EB2201B0) {
                goto LABEL_82;
              }
              BOOL v71 = (void (**)(char *))&xmmword_1EB21CA50;
            }
            (*v71)(v61);
            goto LABEL_82;
          }
          BOOL v35 = " AND ";
        }
        ++v37;
        if (!--v32) {
          goto LABEL_78;
        }
      }
    }
    goto LABEL_55;
  }
LABEL_56:
  *(void *)(a1 + 96) = v14;
  *(void *)(a1 + 104) = j__sqlite3_preupdate_old;
  *(void *)(a1 + 112) = j__sqlite3_preupdate_new;
  *(void *)(a1 + 120) = sub_1B0DD65EC;
  *(void *)(a1 + 128) = sub_1B0DD6604;
  if (!v14)
  {
    int v29 = "NULL";
    goto LABEL_65;
  }
  int v28 = v14[113];
  if (v28 == 186)
  {
LABEL_60:
    int v29 = "unopened";
LABEL_65:
    sqlite3_log(21, "API call with %s database connection pointer", v29);
    sub_1B0CE1978(186024);
    return v8;
  }
  if (v28 != 118)
  {
    if (v28 != 109)
    {
      int v29 = "invalid";
      goto LABEL_65;
    }
    goto LABEL_60;
  }
  uint64_t v30 = *((void *)v14 + 3);
  if (v30) {
    xmmword_1EB21CA50(v30);
  }
  return v8;
}

uint64_t sub_1B0CFC1C0(uint64_t a1, char *__s, void *a3)
{
  if (__s) {
    int v6 = (strlen(__s) & 0x3FFFFFFF) + 1;
  }
  else {
    int v6 = 1;
  }
  if (__s) {
    int v7 = -1;
  }
  else {
    int v7 = 0;
  }
  int v8 = v6 + 1;
  uint64_t v9 = (void *)(a1 + 88);
  while (1)
  {
    uint64_t v9 = (void *)*v9;
    if (!v9) {
      break;
    }
    int v12 = (unsigned char *)v9[1];
    if (v12) {
      int v11 = 1;
    }
    else {
      int v11 = v7;
    }
    if (v12) {
      BOOL v13 = __s == 0;
    }
    else {
      BOOL v13 = 1;
    }
    if (!v13)
    {
      int v14 = v8;
      uint64_t v15 = __s;
      while (1)
      {
        uint64_t v16 = *v12;
        if (!*v12) {
          break;
        }
        LODWORD(v16) = byte_1B0DE1758[v16];
        int v10 = byte_1B0DE1758[*v15];
        if (v16 != v10) {
          goto LABEL_9;
        }
        ++v12;
        ++v15;
        if (--v14 <= 1) {
          goto LABEL_23;
        }
      }
      int v10 = byte_1B0DE1758[*v15];
LABEL_9:
      int v11 = v16 - v10;
    }
    if (!v11) {
      goto LABEL_23;
    }
  }
  if (*(_DWORD *)(a1 + 28))
  {
    int v18 = *(uint64_t (**)(void, char *))(a1 + 48);
    if (!v18 || (uint64_t result = v18(*(void *)(a1 + 40), __s), result))
    {
      uint64_t result = sqlite3session_attach((uint64_t *)a1, (uint64_t)__s);
      if (!result)
      {
        uint64_t v19 = *(void **)(a1 + 88);
        while (1)
        {
          uint64_t v9 = v19;
          if (!v19) {
            break;
          }
          uint64_t v19 = (void *)*v19;
          if (!*v9) {
            goto LABEL_24;
          }
        }
LABEL_23:
        uint64_t result = 0;
        goto LABEL_24;
      }
    }
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t result = 0;
    uint64_t v9 = 0;
  }
LABEL_24:
  *a3 = v9;
  return result;
}

BOOL sub_1B0CFC2F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (_DWORD *)(a2 + 16);
  if (*(_DWORD *)(a2 + 16))
  {
    int v5 = *(_DWORD *)(a1 + 36);
  }
  else
  {
    int v6 = *(sqlite3 **)a1;
    int v7 = *(const char **)(a1 + 8);
    int v8 = *(char **)(a2 + 8);
    if (*(_DWORD *)(a1 + 32)) {
      uint64_t v9 = (BOOL *)(a2 + 24);
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v21 = 0;
    int v5 = sub_1B0CFC460(a1, v6, v7, v8, v4, 0, (void *)(a2 + 32), &v21, v9);
    *(_DWORD *)(a1 + 36) = v5;
    if (!v5)
    {
      uint64_t v10 = *v4;
      if ((int)v10 >= 1)
      {
        uint64_t v11 = 0;
        while (!*(unsigned char *)(v21 + v11))
        {
          if (v10 == ++v11) {
            goto LABEL_13;
          }
        }
        *(void *)(a2 + 40) = v21;
      }
LABEL_13:
      int v12 = *(const char **)(a2 + 8);
      if (v12)
      {
        BOOL v13 = "sqlite_stat1";
        for (uint64_t i = *(unsigned __int8 **)(a2 + 8); ; ++i)
        {
          uint64_t v15 = *(unsigned __int8 *)v13;
          uint64_t v16 = *i;
          if (v15 == v16)
          {
            if (!*v13)
            {
              *(_DWORD *)(a2 + 20) = 1;
              break;
            }
          }
          else if (byte_1B0DE1758[v15] != byte_1B0DE1758[v16])
          {
            break;
          }
          ++v13;
        }
      }
      if (*(_DWORD *)(a1 + 16))
      {
        unint64_t v17 = (int)v10;
        int v18 = 1;
        if (v10 >= 0x80)
        {
          do
          {
            unint64_t v19 = v17 >> 14;
            v17 >>= 7;
            ++v18;
          }
          while (v19);
        }
        *(void *)(a1 + 64) += strlen(v12) + (int)v10 + v18 + 1 + 1;
      }
    }
  }
  return v5 || *(void *)(a2 + 40) == 0;
}

uint64_t sub_1B0CFC460(uint64_t a1, sqlite3 *a2, const char *a3, char *__s, _DWORD *a5, void *a6, void *a7, void *a8, BOOL *a9)
{
  if (!__s)
  {
    int v17 = 0;
LABEL_10:
    int v22 = (unsigned __int8 *)sqlite3_mprintf("PRAGMA '%q'.table_info('%q')", a3, __s);
    if (!v22)
    {
LABEL_37:
      *a7 = 0;
      *a8 = 0;
      *a5 = 0;
      if (a6) {
        *a6 = 0;
      }
      return 7;
    }
LABEL_11:
    pStmt = 0;
    uint64_t v23 = sub_1B0C7EAC0((uint64_t)a2, v22, 0xFFFFFFFFLL, 128, 0, &pStmt, 0, v21);
    uint64_t v24 = (void (**)(unsigned __int8 *))&off_1EB21C9E8;
    uint64_t v51 = a7;
    uint64_t v25 = a8;
    if (dword_1EB21C9C0)
    {
      if ((void)xmmword_1EB2201B0) {
        xmmword_1EB21CA40(xmmword_1EB2201B0);
      }
      qword_1EB220108[0] -= (int)off_1EB21C9F8(v22);
      --qword_1EB220150;
      off_1EB21C9E8(v22);
      int v22 = (unsigned __int8 *)xmmword_1EB2201B0;
      if (!(void)xmmword_1EB2201B0)
      {
LABEL_17:
        if (v23)
        {
          void *v51 = 0;
          *a8 = 0;
          *a5 = 0;
          if (!a6) {
            return v23;
          }
LABEL_19:
          *a6 = 0;
          return v23;
        }
        size_t v26 = (v17 + 1);
        __uint64_t n = v26;
        int v27 = 0;
        if (sqlite3_step(pStmt) == 100)
        {
          BOOL v28 = a9 != 0;
          size_t v29 = v26;
          do
          {
            v29 += sqlite3_column_bytes(pStmt, 1);
            ++v27;
            if (sqlite3_column_int(pStmt, 5)) {
              BOOL v28 = 0;
            }
          }
          while (sqlite3_step(pStmt) == 100);
        }
        else
        {
          BOOL v28 = 0;
          size_t v29 = v26;
        }
        uint64_t v32 = sqlite3_reset(pStmt);
        if (v32)
        {
          uint64_t v23 = v32;
          uint64_t v33 = 0;
          goto LABEL_60;
        }
        int v34 = v28 + v27;
        if (sqlite3_initialize())
        {
          uint64_t v33 = 0;
          if (!a1) {
            goto LABEL_52;
          }
          uint64_t v35 = 0;
        }
        else
        {
          uint64_t v36 = sub_1B0C7FC94(v29 + 10 * v34 + 7);
          uint64_t v33 = (void *)v36;
          if (!a1) {
            goto LABEL_47;
          }
          if (v36) {
            uint64_t v35 = (int)off_1EB21C9F8(v36);
          }
          else {
            uint64_t v35 = 0;
          }
        }
        *(void *)(a1 + 56) += v35;
LABEL_47:
        if (v33)
        {
          size_t v37 = &v33[v34];
          uint64_t v49 = v37;
          uint64_t v38 = &v37[v34];
          if (a6)
          {
            memcpy(&v37[v34], __s, __n);
            *a6 = v38;
            uint64_t v38 = (void *)((char *)v38 + __n);
          }
          uint64_t v48 = a1;
          if (v28)
          {
            *uint64_t v38 = 0x5F6469776F725FLL;
            *uint64_t v33 = v38++;
            uint64_t v39 = 1;
            *uint64_t v49 = 1;
          }
          else
          {
            uint64_t v39 = 0;
          }
          if (sqlite3_step(pStmt) == 100)
          {
            uint64_t v40 = (char *)v33 + (v39 | (8 * v34));
            uint64_t v41 = &v33[v39];
            do
            {
              int v42 = sqlite3_column_bytes(pStmt, 1);
              int v43 = sqlite3_column_text(pStmt, 1);
              if (!v43) {
                break;
              }
              memcpy(v38, v43, v42 + 1);
              *v41++ = v38;
              uint64_t v38 = (void *)((char *)v38 + v42 + 1);
              *v40++ = sqlite3_column_int(pStmt, 5);
            }
            while (sqlite3_step(pStmt) == 100);
          }
          uint64_t v23 = sqlite3_reset(pStmt);
          if (!v23)
          {
            void *v51 = v33;
            *uint64_t v25 = v49;
            *a5 = v34;
            uint64_t v46 = a9;
            if (!a9) {
              goto LABEL_76;
            }
            goto LABEL_75;
          }
          a1 = v48;
LABEL_60:
          void *v51 = 0;
          *uint64_t v25 = 0;
          *a5 = 0;
          if (a6) {
            *a6 = 0;
          }
          if (a1)
          {
            if (v33) {
              uint64_t v44 = (int)off_1EB21C9F8(v33);
            }
            else {
              uint64_t v44 = 0;
            }
            *(void *)(a1 + 56) -= v44;
          }
          if (v33)
          {
            uint64_t v45 = &off_1EB21C9E8;
            if (!dword_1EB21C9C0)
            {
LABEL_73:
              (*v45)(v33);
              goto LABEL_74;
            }
            if ((void)xmmword_1EB2201B0) {
              xmmword_1EB21CA40(xmmword_1EB2201B0);
            }
            qword_1EB220108[0] -= (int)off_1EB21C9F8(v33);
            --qword_1EB220150;
            off_1EB21C9E8(v33);
            uint64_t v33 = (void *)xmmword_1EB2201B0;
            if ((void)xmmword_1EB2201B0)
            {
              uint64_t v45 = &xmmword_1EB21CA50;
              goto LABEL_73;
            }
          }
LABEL_74:
          uint64_t v46 = a9;
          if (!a9)
          {
LABEL_76:
            sqlite3_finalize(pStmt);
            return v23;
          }
LABEL_75:
          *uint64_t v46 = v28;
          goto LABEL_76;
        }
LABEL_52:
        uint64_t v23 = 7;
        goto LABEL_60;
      }
      uint64_t v24 = (void (**)(unsigned __int8 *))&xmmword_1EB21CA50;
    }
    (*v24)(v22);
    goto LABEL_17;
  }
  int v17 = strlen(__s) & 0x3FFFFFFF;
  if (v17 != 12) {
    goto LABEL_10;
  }
  for (uint64_t i = 0; ; ++i)
  {
    uint64_t v19 = aSqliteStat1[i];
    uint64_t v20 = __s[i];
    if (v19 == v20) {
      break;
    }
    if (byte_1B0DE1758[v19] != byte_1B0DE1758[v20])
    {
      int v17 = 12;
      goto LABEL_10;
    }
LABEL_5:
    ;
  }
  if (aSqliteStat1[i]) {
    goto LABEL_5;
  }
  uint64_t v30 = sqlite3_table_column_metadata(a2, a3, __s, 0, 0, 0, 0, 0, 0);
  if (v30 == 1)
  {
    uint64_t v31 = sqlite3_mprintf(&byte_1B0DE9952);
LABEL_36:
    int v22 = (unsigned __int8 *)v31;
    int v17 = 12;
    if (!v31) {
      goto LABEL_37;
    }
    goto LABEL_11;
  }
  uint64_t v23 = v30;
  if (!v30)
  {
    uint64_t v31 = sqlite3_mprintf("SELECT 0, 'tbl',  '', 0, '', 1     UNION ALL SELECT 1, 'idx',  '', 0, '', 2     UNION ALL SELECT 2, 'stat', '', 0, '', 0");
    goto LABEL_36;
  }
  *a7 = 0;
  *a8 = 0;
  *a5 = 0;
  if (a6) {
    goto LABEL_19;
  }
  return v23;
}

uint64_t sub_1B0CFC9A0(int a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (*(_DWORD *)(a3 + 24)) {
    uint64_t v9 = "_rowid_, *";
  }
  else {
    uint64_t v9 = "*";
  }
  uint64_t v10 = (unsigned __int8 *)sqlite3_mprintf("SELECT %s FROM \"%w\".\"%w\" WHERE NOT EXISTS( SELECT 1 FROM \"%w\".\"%w\" WHERE %s)", v9, a4, *(void *)(a3 + 8), a5, *(void *)(a3 + 8), a6);
  if (!v10) {
    return 7;
  }
  int v12 = v10;
  pStmt = 0;
  uint64_t v13 = sub_1B0C7EAC0(*a2, v10, 0xFFFFFFFFLL, 0, 0, &pStmt, 0, v11);
  if (!v13)
  {
    int v14 = (sqlite3_stmt **)a2[12];
    *int v14 = pStmt;
    v14[1] = (sqlite3_stmt *)*(unsigned int *)(a3 + 24);
    while (sqlite3_step(pStmt) == 100)
    {
      if (*(_DWORD *)(a3 + 24)) {
        sqlite3_int64 v15 = sqlite3_column_int64(pStmt, 0);
      }
      else {
        sqlite3_int64 v15 = 0;
      }
      sub_1B0DD4E2C(a1, v15, (uint64_t)a2, a3);
    }
    uint64_t v13 = sqlite3_finalize(pStmt);
  }
  uint64_t v16 = (uint64_t (**)(unsigned __int8 *))&off_1EB21C9E8;
  if (!dword_1EB21C9C0) {
    goto LABEL_19;
  }
  if ((void)xmmword_1EB2201B0) {
    xmmword_1EB21CA40(xmmword_1EB2201B0);
  }
  qword_1EB220108[0] -= (int)off_1EB21C9F8(v12);
  --qword_1EB220150;
  off_1EB21C9E8(v12);
  int v12 = (unsigned __int8 *)xmmword_1EB2201B0;
  if ((void)xmmword_1EB2201B0)
  {
    uint64_t v16 = (uint64_t (**)(unsigned __int8 *))&xmmword_1EB21CA50;
LABEL_19:
    (*v16)(v12);
  }
  return v13;
}

uint64_t sqlite3session_create(uint64_t a1, char *__s, uint64_t *a3)
{
  if (__s) {
    int v6 = strlen(__s) & 0x3FFFFFFF;
  }
  else {
    int v6 = 0;
  }
  *a3 = 0;
  if (sqlite3_initialize()) {
    return 7;
  }
  uint64_t v8 = sub_1B0C7FC94((v6 + 137));
  if (!v8) {
    return 7;
  }
  uint64_t v9 = v8;
  *(_OWORD *)uint64_t v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(void *)(v8 + 128) = 0;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  uint64_t v10 = (void *)(v8 + 136);
  *(void *)uint64_t v9 = a1;
  *(void *)(v9 + 8) = v10;
  *(_DWORD *)(v9 + 20) = 1;
  memcpy(v10, __s, (v6 + 1));
  *(void *)(v9 + 96) = a1;
  *(void *)(v9 + 104) = j__sqlite3_preupdate_old;
  *(void *)(v9 + 112) = j__sqlite3_preupdate_new;
  *(void *)(v9 + 120) = sub_1B0DD65EC;
  *(void *)(v9 + 128) = sub_1B0DD6604;
  if (a1)
  {
    int v11 = *(unsigned __int8 *)(a1 + 113);
    switch(v11)
    {
      case 186:
        goto LABEL_11;
      case 118:
        uint64_t v13 = *(void *)(a1 + 24);
        if (v13) {
          xmmword_1EB21CA40(v13);
        }
        goto LABEL_17;
      case 109:
LABEL_11:
        int v12 = "unopened";
        break;
      default:
        int v12 = "invalid";
        break;
    }
  }
  else
  {
    int v12 = "NULL";
  }
  sqlite3_log(21, "API call with %s database connection pointer", v12);
  sub_1B0CE1978(186024);
LABEL_17:
  uint64_t v14 = *(void *)(a1 + 24);
  if (v14)
  {
    xmmword_1EB21CA40(v14);
    uint64_t v15 = *(void *)(a1 + 24);
    uint64_t v16 = *(void *)(a1 + 352);
    *(void *)(a1 + 352) = v9;
    *(void *)(a1 + 360) = sub_1B0CFCD6C;
    if (v15) {
      xmmword_1EB21CA50(v15);
    }
  }
  else
  {
    uint64_t v16 = *(void *)(a1 + 352);
    *(void *)(a1 + 352) = v9;
    *(void *)(a1 + 360) = sub_1B0CFCD6C;
  }
  *(void *)(v9 + 80) = v16;
  int v17 = *(unsigned __int8 *)(a1 + 113);
  switch(v17)
  {
    case 186:
      goto LABEL_24;
    case 118:
      uint64_t v19 = *(void *)(a1 + 24);
      if (v19) {
        xmmword_1EB21CA50(v19);
      }
      goto LABEL_29;
    case 109:
LABEL_24:
      int v18 = "unopened";
      break;
    default:
      int v18 = "invalid";
      break;
  }
  sqlite3_log(21, "API call with %s database connection pointer", v18);
  sub_1B0CE1978(186024);
LABEL_29:
  uint64_t result = 0;
  *a3 = v9;
  return result;
}

void sub_1B0CFCD6C(uint64_t a1, int a2, int a3, char *__s, char *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = a1;
  if (!__s)
  {
    int v13 = 1;
    if (!a1) {
      return;
    }
    goto LABEL_5;
  }
  int v13 = (strlen(__s) & 0x3FFFFFFF) + 1;
  if (v12)
  {
LABEL_5:
    unsigned int v14 = v13 + 1;
    do
    {
      uint64_t v22 = 0;
      if (*(_DWORD *)(v12 + 20) && !*(_DWORD *)(v12 + 36))
      {
        uint64_t v15 = *(unsigned __int8 **)(v12 + 8);
        if (__s)
        {
          if (!v15) {
            goto LABEL_6;
          }
          unsigned int v16 = v14;
          int v17 = __s;
          do
          {
            uint64_t v18 = *v17;
            if (!*v17) {
              break;
            }
            LODWORD(v18) = byte_1B0DE1758[v18];
            int v19 = byte_1B0DE1758[*v15];
            if (v18 != v19) {
              goto LABEL_22;
            }
            ++v17;
            ++v15;
            --v16;
          }
          while (v16 > 1);
          int v19 = byte_1B0DE1758[*v15];
LABEL_22:
          if (v18 != v19) {
            goto LABEL_6;
          }
        }
        else
        {
          if (v15) {
            int v20 = -1;
          }
          else {
            int v20 = 0;
          }
          if (v20) {
            goto LABEL_6;
          }
        }
        *(_DWORD *)(v12 + 36) = sub_1B0CFC1C0(v12, a5, &v22);
        uint64_t v21 = v22;
        if (v22)
        {
          sub_1B0DD4E2C(a3, a6, v12, v22);
          if (a3 == 23) {
            sub_1B0DD4E2C(18, a7, v12, v21);
          }
        }
      }
LABEL_6:
      uint64_t v12 = *(void *)(v12 + 80);
    }
    while (v12);
  }
}

uint64_t sqlite3session_delete(uint64_t *a1)
{
  uint64_t v1 = (uint64_t)a1;
  uint64_t v2 = *a1;
  if (!*a1)
  {
    uint64_t v4 = "NULL";
    goto LABEL_15;
  }
  int v3 = *(unsigned __int8 *)(v2 + 113);
  if (v3 == 186)
  {
LABEL_5:
    uint64_t v4 = "unopened";
    goto LABEL_15;
  }
  if (v3 != 118)
  {
    if (v3 == 109) {
      goto LABEL_5;
    }
    uint64_t v4 = "invalid";
LABEL_15:
    sqlite3_log(21, "API call with %s database connection pointer", v4);
    sub_1B0CE1978(186024);
    uint64_t v6 = *(void *)(v2 + 24);
    if (!v6) {
      goto LABEL_16;
    }
LABEL_10:
    xmmword_1EB21CA40(v6);
    uint64_t v7 = *(void *)(v2 + 24);
    uint64_t v8 = *(void *)(v2 + 352);
    *(void *)(v2 + 352) = 0;
    *(void *)(v2 + 360) = 0;
    if (v7) {
      xmmword_1EB21CA50(v7);
    }
    uint64_t v21 = v8;
    if (!v8) {
      goto LABEL_29;
    }
    goto LABEL_17;
  }
  uint64_t v5 = *(void *)(v2 + 24);
  if (v5) {
    xmmword_1EB21CA40(v5);
  }
  uint64_t v6 = *(void *)(v2 + 24);
  if (v6) {
    goto LABEL_10;
  }
LABEL_16:
  uint64_t v8 = *(void *)(v2 + 352);
  *(void *)(v2 + 352) = 0;
  *(void *)(v2 + 360) = 0;
  uint64_t v21 = v8;
  if (!v8) {
    goto LABEL_29;
  }
LABEL_17:
  if (v8 == v1)
  {
    uint64_t v10 = &v21;
LABEL_22:
    *uint64_t v10 = *(void *)(v1 + 80);
    uint64_t v11 = v21;
    if (v21)
    {
      uint64_t v12 = *(void *)(v2 + 24);
      if (v12)
      {
        xmmword_1EB21CA40(v12);
        uint64_t v13 = *(void *)(v2 + 24);
        *(void *)(v2 + 352) = v11;
        *(void *)(v2 + 360) = sub_1B0CFCD6C;
        if (v13) {
          xmmword_1EB21CA50(v13);
        }
      }
      else
      {
        *(void *)(v2 + 352) = v21;
        *(void *)(v2 + 360) = sub_1B0CFCD6C;
      }
      goto LABEL_29;
    }
  }
  else
  {
    while (1)
    {
      uint64_t v9 = v8;
      uint64_t v8 = *(void *)(v8 + 80);
      if (!v8) {
        break;
      }
      if (v8 == v1)
      {
        uint64_t v10 = (uint64_t *)(v9 + 80);
        goto LABEL_22;
      }
    }
  }
  if (!v2)
  {
    unsigned int v14 = "NULL";
LABEL_36:
    sqlite3_log(21, "API call with %s database connection pointer", v14);
    sub_1B0CE1978(186024);
    goto LABEL_37;
  }
LABEL_29:
  int v15 = *(unsigned __int8 *)(v2 + 113);
  if (v15 == 186)
  {
LABEL_32:
    unsigned int v14 = "unopened";
    goto LABEL_36;
  }
  if (v15 != 118)
  {
    if (v15 != 109)
    {
      unsigned int v14 = "invalid";
      goto LABEL_36;
    }
    goto LABEL_32;
  }
  uint64_t v16 = *(void *)(v2 + 24);
  if (v16) {
    xmmword_1EB21CA50(v16);
  }
LABEL_37:
  uint64_t v17 = *(void *)(v1 + 72);
  if (v17)
  {
    if ((*(_WORD *)(v17 + 20) & 0x9000) != 0 || *(_DWORD *)(v17 + 32)) {
      sub_1B0D180E4(*(void *)(v1 + 72));
    }
    sub_1B0D05C10(*(void **)(v17 + 24), (void *)v17);
  }
  sub_1B0CFD1A8(v1, *(uint64_t **)(v1 + 88));
  uint64_t v18 = &off_1EB21C9E8;
  if (!dword_1EB21C9C0) {
    goto LABEL_47;
  }
  if ((void)xmmword_1EB2201B0) {
    xmmword_1EB21CA40(xmmword_1EB2201B0);
  }
  qword_1EB220108[0] -= (int)off_1EB21C9F8(v1);
  --qword_1EB220150;
  uint64_t result = off_1EB21C9E8(v1);
  uint64_t v1 = xmmword_1EB2201B0;
  if ((void)xmmword_1EB2201B0)
  {
    uint64_t v18 = &xmmword_1EB21CA50;
LABEL_47:
    int v20 = *v18;
    return v20(v1);
  }
  return result;
}

uint64_t sub_1B0CFD1A8(uint64_t result, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    uint64_t v3 = result;
    do
    {
      uint64_t v16 = (uint64_t *)*v2;
      int v4 = *((_DWORD *)v2 + 13);
      if (v4 >= 1)
      {
        uint64_t v5 = 0;
        while (1)
        {
          uint64_t v6 = *(void *)(v2[7] + 8 * v5);
          if (v6) {
            break;
          }
LABEL_8:
          if (++v5 >= v4) {
            goto LABEL_20;
          }
        }
        while (2)
        {
          uint64_t v7 = *(void *)(v6 + 24);
          if (v3) {
            *(void *)(v3 + 56) -= (int)off_1EB21C9F8(v6);
          }
          uint64_t v8 = &off_1EB21C9E8;
          if (dword_1EB21C9C0)
          {
            if ((void)xmmword_1EB2201B0) {
              xmmword_1EB21CA40(xmmword_1EB2201B0);
            }
            qword_1EB220108 -= (int)off_1EB21C9F8(v6);
            --qword_1EB220150;
            off_1EB21C9E8(v6);
            uint64_t v6 = xmmword_1EB2201B0;
            if ((void)xmmword_1EB2201B0)
            {
              uint64_t v8 = &xmmword_1EB21CA50;
              goto LABEL_11;
            }
          }
          else
          {
LABEL_11:
            (*v8)(v6);
          }
          uint64_t v6 = v7;
          if (!v7)
          {
            int v4 = *((_DWORD *)v2 + 13);
            goto LABEL_8;
          }
          continue;
        }
      }
LABEL_20:
      uint64_t v9 = v2[4];
      if (v3)
      {
        if (v9) {
          uint64_t v10 = (int)off_1EB21C9F8(v2[4]);
        }
        else {
          uint64_t v10 = 0;
        }
        *(void *)(v3 + 56) -= v10;
      }
      if (!v9) {
        goto LABEL_32;
      }
      uint64_t v11 = &off_1EB21C9E8;
      if (dword_1EB21C9C0)
      {
        if ((void)xmmword_1EB2201B0) {
          xmmword_1EB21CA40(xmmword_1EB2201B0);
        }
        qword_1EB220108 -= (int)off_1EB21C9F8(v9);
        --qword_1EB220150;
        off_1EB21C9E8(v9);
        uint64_t v9 = xmmword_1EB2201B0;
        if (!(void)xmmword_1EB2201B0) {
          goto LABEL_32;
        }
        uint64_t v11 = &xmmword_1EB21CA50;
      }
      (*v11)(v9);
LABEL_32:
      uint64_t v12 = v2[7];
      if (v3)
      {
        if (v12) {
          uint64_t v13 = (int)off_1EB21C9F8(v2[7]);
        }
        else {
          uint64_t v13 = 0;
        }
        *(void *)(v3 + 56) -= v13;
      }
      if (v12)
      {
        unsigned int v14 = &off_1EB21C9E8;
        if (!dword_1EB21C9C0) {
          goto LABEL_43;
        }
        if ((void)xmmword_1EB2201B0) {
          xmmword_1EB21CA40(xmmword_1EB2201B0);
        }
        qword_1EB220108 -= (int)off_1EB21C9F8(v12);
        --qword_1EB220150;
        off_1EB21C9E8(v12);
        uint64_t v12 = xmmword_1EB2201B0;
        if ((void)xmmword_1EB2201B0)
        {
          unsigned int v14 = &xmmword_1EB21CA50;
LABEL_43:
          (*v14)(v12);
        }
      }
      if (v3) {
        *(void *)(v3 + 56) -= (int)off_1EB21C9F8(v2);
      }
      int v15 = (uint64_t (**)(uint64_t *))&off_1EB21C9E8;
      if (dword_1EB21C9C0)
      {
        if ((void)xmmword_1EB2201B0) {
          xmmword_1EB21CA40(xmmword_1EB2201B0);
        }
        qword_1EB220108 -= (int)off_1EB21C9F8(v2);
        --qword_1EB220150;
        uint64_t result = off_1EB21C9E8(v2);
        uint64_t v2 = (uint64_t *)xmmword_1EB2201B0;
        if (!(void)xmmword_1EB2201B0) {
          goto LABEL_4;
        }
        int v15 = (uint64_t (**)(uint64_t *))&xmmword_1EB21CA50;
      }
      uint64_t result = (*v15)(v2);
LABEL_4:
      uint64_t v2 = v16;
    }
    while (v16);
  }
  return result;
}

uint64_t sqlite3session_table_filter(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(result + 28) = 1;
  *(void *)(result + 40) = a3;
  *(void *)(result + 48) = a2;
  return result;
}

uint64_t sqlite3session_attach(uint64_t *a1, uint64_t __s)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(unsigned __int8 *)(v4 + 113);
    switch(v5)
    {
      case 186:
        goto LABEL_5;
      case 118:
        uint64_t v7 = *(void *)(v4 + 24);
        if (v7) {
          xmmword_1EB21CA40(v7);
        }
        if (!__s) {
          goto LABEL_23;
        }
        goto LABEL_10;
      case 109:
LABEL_5:
        uint64_t v6 = "unopened";
        break;
      default:
        uint64_t v6 = "invalid";
        break;
    }
  }
  else
  {
    uint64_t v6 = "NULL";
  }
  sqlite3_log(21, "API call with %s database connection pointer", v6);
  sub_1B0CE1978(186024);
  if (!__s)
  {
LABEL_23:
    *((_DWORD *)a1 + 7) = 1;
    goto LABEL_24;
  }
LABEL_10:
  int v8 = strlen((const char *)__s) & 0x3FFFFFFF;
  uint64_t v9 = a1 + 11;
  size_t v10 = (v8 + 1);
  uint64_t v11 = a1 + 11;
  do
  {
LABEL_11:
    uint64_t v11 = (void *)*v11;
    if (!v11)
    {
      if (sqlite3_initialize() || (uint64_t v22 = sub_1B0C7FC94((v8 + 65))) == 0)
      {
        __s = 7;
      }
      else
      {
        uint64_t v23 = v22;
        a1[7] += (int)off_1EB21C9F8(v22);
        *(_OWORD *)(v23 + 32) = 0u;
        *(_OWORD *)(v23 + 48) = 0u;
        *(_OWORD *)uint64_t v23 = 0u;
        *(_OWORD *)(v23 + 16) = 0u;
        *(void *)(v23 + 8) = v23 + 64;
        memcpy((void *)(v23 + 64), (const void *)__s, v10);
        do
        {
          uint64_t v24 = v9;
          uint64_t v9 = (uint64_t *)*v9;
        }
        while (v9);
        __s = 0;
        *uint64_t v24 = v23;
      }
      goto LABEL_24;
    }
    uint64_t v12 = (unsigned char *)v11[1];
  }
  while (!v12);
  int v13 = v8 + 2;
  unsigned int v14 = (unsigned __int8 *)__s;
  while (1)
  {
    uint64_t v15 = *v12;
    if (!*v12) {
      break;
    }
    LODWORD(v15) = byte_1B0DE1758[v15];
    int v16 = byte_1B0DE1758[*v14];
    if (v15 != v16) {
      goto LABEL_19;
    }
    ++v12;
    ++v14;
    if (--v13 <= 1) {
      goto LABEL_20;
    }
  }
  int v16 = byte_1B0DE1758[*v14];
LABEL_19:
  if (v15 != v16) {
    goto LABEL_11;
  }
LABEL_20:
  __s = 0;
LABEL_24:
  uint64_t v17 = *a1;
  if (!*a1)
  {
    int v19 = "NULL";
    goto LABEL_33;
  }
  int v18 = *(unsigned __int8 *)(v17 + 113);
  if (v18 == 186)
  {
LABEL_28:
    int v19 = "unopened";
LABEL_33:
    sqlite3_log(21, "API call with %s database connection pointer", v19);
    sub_1B0CE1978(186024);
    return __s;
  }
  if (v18 != 118)
  {
    if (v18 != 109)
    {
      int v19 = "invalid";
      goto LABEL_33;
    }
    goto LABEL_28;
  }
  uint64_t v20 = *(void *)(v17 + 24);
  if (v20) {
    xmmword_1EB21CA50(v20);
  }
  return __s;
}

uint64_t sub_1B0CFD714(uint64_t a1, uint64_t a2)
{
  if (sqlite3_initialize())
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    if (!a1) {
      return v4;
    }
    goto LABEL_8;
  }
  uint64_t v6 = sub_1B0C7FC94(a2);
  uint64_t v4 = v6;
  if (a1)
  {
    if (v6) {
      uint64_t v5 = (int)off_1EB21C9F8(v6);
    }
    else {
      uint64_t v5 = 0;
    }
LABEL_8:
    *(void *)(a1 + 56) += v5;
  }
  return v4;
}

uint64_t sqlite3session_changeset(uint64_t a1, _DWORD *a2, uint64_t *a3)
{
  if (a2 && a3) {
    return sub_1B0DDE754(a1, 0, a2, a3);
  }
  else {
    return 21;
  }
}

uint64_t sub_1B0CFD7B0(uint64_t a1, int a2, uint64_t (*a3)(void, void), uint64_t a4, _DWORD *a5, uint64_t *a6)
{
  uint64_t v6 = a6;
  uint64_t v7 = a5;
  int v8 = a3;
  uint64_t v9 = a1;
  uint64_t v10 = *(void *)a1;
  uint64_t v72 = 0;
  uint64_t v73 = 0;
  if (a3)
  {
    uint64_t result = *(unsigned int *)(a1 + 36);
    if (result) {
      return result;
    }
  }
  else
  {
    *a5 = 0;
    *a6 = 0;
    uint64_t result = *(unsigned int *)(a1 + 36);
    if (result) {
      return result;
    }
  }
  uint64_t result = sqlite3_exec(*(sqlite3 **)v9, "SAVEPOINT changeset", 0, 0, 0);
  unsigned int v71 = result;
  if (!result)
  {
    if (v10)
    {
      int v12 = *(unsigned __int8 *)(v10 + 113);
      switch(v12)
      {
        case 186:
          goto LABEL_10;
        case 118:
          uint64_t v14 = *(void *)(v10 + 24);
          if (v14) {
            xmmword_1EB21CA40(v14);
          }
          goto LABEL_16;
        case 109:
LABEL_10:
          int v13 = "unopened";
          break;
        default:
          int v13 = "invalid";
          break;
      }
    }
    else
    {
      int v13 = "NULL";
    }
    sqlite3_log(21, "API call with %s database connection pointer", v13);
    sub_1B0CE1978(186024);
LABEL_16:
    uint64_t v15 = *(void *)(v9 + 88);
    if (!v15)
    {
      if (!v8)
      {
        LODWORD(v16) = 0;
        goto LABEL_114;
      }
LABEL_104:
      uint64_t v52 = v72;
      goto LABEL_105;
    }
    unsigned int v57 = v6;
    uint64_t v58 = v9;
    uint64_t v16 = 0;
    uint64_t v62 = v8;
    unsigned int v59 = v7;
    uint64_t v60 = v10;
    while (1)
    {
      if (*(_DWORD *)(v15 + 48))
      {
        uint64_t v17 = *(char **)(v15 + 8);
        int v70 = 0;
        uint64_t v68 = 0;
        __s1 = 0;
        pStmt = 0;
        int v66 = 0;
        int v18 = (BOOL *)&v66;
        if (!*(_DWORD *)(v9 + 32)) {
          int v18 = 0;
        }
        unsigned int v71 = sub_1B0CFC460(0, (sqlite3 *)v10, *(const char **)(v9 + 8), v17, &v70, 0, &v68, &__s1, v18);
        if (!v71)
        {
          size_t v19 = *(int *)(v15 + 16);
          if (v19 != v70 || *(_DWORD *)(v15 + 24) != v66 || memcmp(__s1, *(const void **)(v15 + 40), v19)) {
            unsigned int v71 = 17;
          }
        }
        sub_1B0DD6620((uint64_t)&v72, a2, v15, &v71);
        unsigned int v20 = v71;
        if (v71)
        {
          unsigned int v21 = v73;
          int v22 = v73;
          goto LABEL_87;
        }
        unsigned int v23 = sub_1B0DD6760(v10, 0, *(void *)(v9 + 8), (unsigned __int8 *)v17, v66, v70, v68, (uint64_t)__s1, &pStmt);
        unsigned int v20 = v23;
        unsigned int v71 = v23;
        int v22 = v73;
        int v24 = *(_DWORD *)(v15 + 52);
        if (v24 >= 1 && !v23)
        {
          uint64_t v64 = v15;
          int v61 = v16;
          uint64_t v25 = 0;
          int v26 = v70;
          int v27 = __s1;
          int v28 = a2;
          while (1)
          {
            size_t v29 = *(unsigned __int8 **)(*(void *)(v64 + 56) + 8 * v25);
            if (!v29)
            {
              unsigned int v49 = 0;
              goto LABEL_83;
            }
            while (1)
            {
              unsigned int v30 = sub_1B0DD6BE0(pStmt, v26, (uint64_t)v27, (uint64_t)v29);
              unsigned int v71 = v30;
              if (v30) {
                break;
              }
              int v31 = sqlite3_step(pStmt);
              int v32 = *v29;
              if (v31 == 100)
              {
                if (v32 == 18)
                {
                  LODWORD(v33) = HIDWORD(v73);
                  uint64_t v34 = (int)v73;
                  if ((int)v73 < SHIDWORD(v73))
                  {
                    uint64_t v35 = v72;
                    goto LABEL_38;
                  }
                  if (HIDWORD(v73)) {
                    int v39 = HIDWORD(v73);
                  }
                  else {
                    int v39 = 128;
                  }
                  uint64_t v33 = v39;
                  do
                  {
                    uint64_t v40 = v33;
                    v33 *= 2;
                  }
                  while (v33 <= (int)v73);
                  if (v40 > 1073741695 && (uint64_t v33 = 2147483391, (int)v73 > 2147483390)
                    || (uint64_t v41 = v72, sqlite3_initialize())
                    || (uint64_t v47 = sub_1B0C8E1B8(v41, v33)) == 0)
                  {
                    unsigned int v71 = 7;
                    if (v26 >= 1) {
                      goto LABEL_65;
                    }
                  }
                  else
                  {
                    uint64_t v35 = v47;
                    uint64_t v72 = v47;
                    HIDWORD(v73) = v33;
LABEL_38:
                    uint64_t v36 = v34 + 1;
                    LODWORD(v73) = v34 + 1;
                    *(unsigned char *)(v35 + v34) = 18;
                    unsigned __int8 v37 = v29[1];
                    if ((int)v34 + 1 >= (int)v33)
                    {
                      if (v33) {
                        int v42 = v33;
                      }
                      else {
                        int v42 = 128;
                      }
                      uint64_t v43 = v42;
                      do
                      {
                        uint64_t v44 = v43;
                        v43 *= 2;
                      }
                      while (v43 <= v36);
                      if (v44 <= 1073741695 || (uint64_t v43 = 2147483391, (int)v34 <= 2147483389))
                      {
                        if (!sqlite3_initialize())
                        {
                          uint64_t v48 = sub_1B0C8E1B8(v35, v43);
                          if (v48)
                          {
                            uint64_t v35 = v48;
                            uint64_t v72 = v48;
                            HIDWORD(v73) = v43;
                            goto LABEL_39;
                          }
                        }
                      }
                      unsigned int v71 = 7;
                    }
                    else
                    {
LABEL_39:
                      LODWORD(v73) = v34 + 2;
                      *(unsigned char *)(v35 + v36) = v37;
                    }
                    int v8 = v62;
                    int v28 = a2;
                    if (v26 >= 1)
                    {
LABEL_65:
                      for (int i = 0; i != v26; ++i)
                        sub_1B0DD6E6C((uint64_t)&v72, pStmt, i, &v71);
                    }
                  }
LABEL_67:
                  unsigned int v20 = v71;
                  if (v71) {
                    goto LABEL_82;
                  }
                  goto LABEL_68;
                }
                unsigned int v38 = sub_1B0DD70AC((uint64_t)&v72, v28, (unsigned __int16 *)pStmt, (uint64_t)v29, (uint64_t)v27);
              }
              else
              {
                if (v32 == 18) {
                  goto LABEL_67;
                }
                unsigned int v38 = sub_1B0DD76E4((uint64_t)&v72, v28, (uint64_t)v29, v26, v27);
              }
              unsigned int v20 = v38;
              unsigned int v71 = v38;
              if (v38) {
                goto LABEL_82;
              }
LABEL_68:
              int v46 = sqlite3_reset(pStmt);
              unsigned int v20 = v46;
              unsigned int v71 = v46;
              if (v8 && !v46 && (int)v73 > v22 && (int)v73 > dword_1E9B51ED8)
              {
                unsigned int v20 = v8(a4, v72);
                unsigned int v71 = v20;
                LODWORD(v73) = 0;
                int v22 = -1;
              }
              if (!v20)
              {
                size_t v29 = (unsigned __int8 *)*((void *)v29 + 3);
                if (v29) {
                  continue;
                }
              }
              goto LABEL_82;
            }
            unsigned int v20 = v30;
LABEL_82:
            int v24 = *(_DWORD *)(v64 + 52);
            unsigned int v49 = v20;
LABEL_83:
            if (++v25 >= v24 || v49)
            {
              unsigned int v21 = v73;
              uint64_t v7 = v59;
              uint64_t v10 = v60;
              uint64_t v9 = v58;
              LODWORD(v16) = v61;
              uint64_t v15 = v64;
              goto LABEL_87;
            }
          }
        }
        unsigned int v21 = v73;
LABEL_87:
        sqlite3_finalize(pStmt);
        if (v21 == v22) {
          uint64_t v16 = v16;
        }
        else {
          uint64_t v16 = v21;
        }
        LODWORD(v73) = v16;
        uint64_t v50 = v68;
        if (!v68) {
          goto LABEL_97;
        }
        uint64_t v51 = (void (**)(uint64_t))&off_1EB21C9E8;
        if (dword_1EB21C9C0)
        {
          if ((void)xmmword_1EB2201B0) {
            xmmword_1EB21CA40(xmmword_1EB2201B0);
          }
          qword_1EB220108[0] -= (int)off_1EB21C9F8(v50);
          --qword_1EB220150;
          off_1EB21C9E8(v50);
          uint64_t v50 = xmmword_1EB2201B0;
          if (!(void)xmmword_1EB2201B0) {
            goto LABEL_97;
          }
          uint64_t v51 = (void (**)(uint64_t))&xmmword_1EB21CA50;
        }
        (*v51)(v50);
      }
      else
      {
        unsigned int v20 = 0;
      }
LABEL_97:
      if (!v20)
      {
        uint64_t v15 = *(void *)v15;
        if (v15) {
          continue;
        }
      }
      if (!v20)
      {
        if (v8)
        {
          uint64_t v52 = v72;
          if ((int)v16 >= 1) {
            unsigned int v71 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v8)(a4, v72, v16);
          }
LABEL_105:
          if (v52)
          {
            uint64_t v53 = &off_1EB21C9E8;
            if (!dword_1EB21C9C0) {
              goto LABEL_111;
            }
            if ((void)xmmword_1EB2201B0) {
              xmmword_1EB21CA40(xmmword_1EB2201B0);
            }
            qword_1EB220108[0] -= (int)off_1EB21C9F8(v52);
            --qword_1EB220150;
            off_1EB21C9E8(v52);
            uint64_t v52 = xmmword_1EB2201B0;
            if ((void)xmmword_1EB2201B0)
            {
              uint64_t v53 = &xmmword_1EB21CA50;
LABEL_111:
              (*v53)(v52);
            }
          }
LABEL_115:
          sqlite3_exec((sqlite3 *)v10, "RELEASE changeset", 0, 0, 0);
          if (!v10)
          {
            BOOL v55 = "NULL";
            goto LABEL_124;
          }
          int v54 = *(unsigned __int8 *)(v10 + 113);
          if (v54 == 186) {
            goto LABEL_119;
          }
          if (v54 == 118)
          {
            uint64_t v56 = *(void *)(v10 + 24);
            if (v56) {
              xmmword_1EB21CA50(v56);
            }
          }
          else
          {
            if (v54 == 109) {
LABEL_119:
            }
              BOOL v55 = "unopened";
            else {
              BOOL v55 = "invalid";
            }
LABEL_124:
            sqlite3_log(21, "API call with %s database connection pointer", v55);
            sub_1B0CE1978(186024);
          }
          return v71;
        }
        uint64_t v6 = v57;
LABEL_114:
        *uint64_t v7 = v16;
        *uint64_t v6 = v72;
        goto LABEL_115;
      }
      goto LABEL_104;
    }
  }
  return result;
}

uint64_t sqlite3session_changeset_strm(uint64_t a1, uint64_t (*a2)(void, void), uint64_t a3)
{
  if (a2) {
    return sub_1B0CFD7B0(a1, 0, a2, a3, 0, 0);
  }
  else {
    return 21;
  }
}

uint64_t sqlite3session_patchset_strm(uint64_t a1, uint64_t (*a2)(void, void), uint64_t a3)
{
  if (a2) {
    return sub_1B0CFD7B0(a1, 1, a2, a3, 0, 0);
  }
  else {
    return 21;
  }
}

uint64_t sqlite3session_patchset(uint64_t a1, _DWORD *a2, uint64_t *a3)
{
  if (a2 && a3) {
    return sub_1B0DDE754(a1, 1, a2, a3);
  }
  else {
    return 21;
  }
}

uint64_t sqlite3session_enable(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  if (!*a1)
  {
    uint64_t v6 = "NULL";
    goto LABEL_16;
  }
  int v5 = *(unsigned __int8 *)(v4 + 113);
  if (v5 == 186)
  {
LABEL_5:
    uint64_t v6 = "unopened";
    goto LABEL_16;
  }
  if (v5 != 118)
  {
    if (v5 == 109) {
      goto LABEL_5;
    }
    uint64_t v6 = "invalid";
LABEL_16:
    sqlite3_log(21, "API call with %s database connection pointer", v6);
    sub_1B0CE1978(186024);
    if ((a2 & 0x80000000) != 0) {
      goto LABEL_17;
    }
    goto LABEL_10;
  }
  uint64_t v7 = *(void *)(v4 + 24);
  if (v7) {
    xmmword_1EB21CA40(v7);
  }
  if ((a2 & 0x80000000) != 0)
  {
LABEL_17:
    a2 = *((unsigned int *)a1 + 5);
    uint64_t v8 = *a1;
    if (!*a1) {
      goto LABEL_18;
    }
    goto LABEL_11;
  }
LABEL_10:
  *((_DWORD *)a1 + 5) = a2;
  uint64_t v8 = *a1;
  if (!*a1)
  {
LABEL_18:
    uint64_t v10 = "NULL";
    goto LABEL_22;
  }
LABEL_11:
  int v9 = *(unsigned __int8 *)(v8 + 113);
  if (v9 == 186)
  {
LABEL_14:
    uint64_t v10 = "unopened";
LABEL_22:
    sqlite3_log(21, "API call with %s database connection pointer", v10);
    sub_1B0CE1978(186024);
    return a2;
  }
  if (v9 != 118)
  {
    if (v9 != 109)
    {
      uint64_t v10 = "invalid";
      goto LABEL_22;
    }
    goto LABEL_14;
  }
  uint64_t v11 = *(void *)(v8 + 24);
  if (v11) {
    xmmword_1EB21CA50(v11);
  }
  return a2;
}

uint64_t sqlite3session_indirect(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  if (!*a1)
  {
    uint64_t v6 = "NULL";
    goto LABEL_16;
  }
  int v5 = *(unsigned __int8 *)(v4 + 113);
  if (v5 == 186)
  {
LABEL_5:
    uint64_t v6 = "unopened";
    goto LABEL_16;
  }
  if (v5 != 118)
  {
    if (v5 == 109) {
      goto LABEL_5;
    }
    uint64_t v6 = "invalid";
LABEL_16:
    sqlite3_log(21, "API call with %s database connection pointer", v6);
    sub_1B0CE1978(186024);
    if ((a2 & 0x80000000) != 0) {
      goto LABEL_17;
    }
    goto LABEL_10;
  }
  uint64_t v7 = *(void *)(v4 + 24);
  if (v7) {
    xmmword_1EB21CA40(v7);
  }
  if ((a2 & 0x80000000) != 0)
  {
LABEL_17:
    a2 = *((unsigned int *)a1 + 6);
    uint64_t v8 = *a1;
    if (!*a1) {
      goto LABEL_18;
    }
    goto LABEL_11;
  }
LABEL_10:
  *((_DWORD *)a1 + 6) = a2;
  uint64_t v8 = *a1;
  if (!*a1)
  {
LABEL_18:
    uint64_t v10 = "NULL";
    goto LABEL_22;
  }
LABEL_11:
  int v9 = *(unsigned __int8 *)(v8 + 113);
  if (v9 == 186)
  {
LABEL_14:
    uint64_t v10 = "unopened";
LABEL_22:
    sqlite3_log(21, "API call with %s database connection pointer", v10);
    sub_1B0CE1978(186024);
    return a2;
  }
  if (v9 != 118)
  {
    if (v9 != 109)
    {
      uint64_t v10 = "invalid";
      goto LABEL_22;
    }
    goto LABEL_14;
  }
  uint64_t v11 = *(void *)(v8 + 24);
  if (v11) {
    xmmword_1EB21CA50(v11);
  }
  return a2;
}

BOOL sqlite3session_isempty(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (!*a1)
  {
    uint64_t v4 = "NULL";
    goto LABEL_12;
  }
  int v3 = *(unsigned __int8 *)(v2 + 113);
  if (v3 == 186)
  {
LABEL_5:
    uint64_t v4 = "unopened";
    goto LABEL_12;
  }
  if (v3 != 118)
  {
    if (v3 == 109) {
      goto LABEL_5;
    }
    uint64_t v4 = "invalid";
LABEL_12:
    sqlite3_log(21, "API call with %s database connection pointer", v4);
    sub_1B0CE1978(186024);
    uint64_t v6 = (uint64_t *)a1[11];
    if (v6) {
      goto LABEL_13;
    }
LABEL_22:
    BOOL v9 = 1;
    uint64_t v10 = *a1;
    if (*a1) {
      goto LABEL_18;
    }
LABEL_23:
    int v12 = "NULL";
    goto LABEL_27;
  }
  uint64_t v5 = *(void *)(v2 + 24);
  if (v5) {
    xmmword_1EB21CA40(v5);
  }
  uint64_t v6 = (uint64_t *)a1[11];
  if (!v6) {
    goto LABEL_22;
  }
  do
  {
LABEL_13:
    int v7 = *((_DWORD *)v6 + 12);
    uint64_t v6 = (uint64_t *)*v6;
    if (v6) {
      BOOL v8 = v7 < 1;
    }
    else {
      BOOL v8 = 0;
    }
  }
  while (v8);
  BOOL v9 = v7 < 1;
  uint64_t v10 = *a1;
  if (!*a1) {
    goto LABEL_23;
  }
LABEL_18:
  int v11 = *(unsigned __int8 *)(v10 + 113);
  if (v11 == 186)
  {
LABEL_21:
    int v12 = "unopened";
LABEL_27:
    sqlite3_log(21, "API call with %s database connection pointer", v12);
    sub_1B0CE1978(186024);
    return v9;
  }
  if (v11 != 118)
  {
    if (v11 != 109)
    {
      int v12 = "invalid";
      goto LABEL_27;
    }
    goto LABEL_21;
  }
  uint64_t v13 = *(void *)(v10 + 24);
  if (v13) {
    xmmword_1EB21CA50(v13);
  }
  return v9;
}

uint64_t sqlite3session_memory_used(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t sqlite3session_object_config(uint64_t a1, int a2, _DWORD *a3)
{
  if (a2 == 2)
  {
    if ((*a3 & 0x80000000) != 0)
    {
      uint64_t v3 = 0;
    }
    else
    {
      uint64_t v3 = *(void *)(a1 + 88);
      if (v3) {
        uint64_t v3 = 21;
      }
      else {
        *(_DWORD *)(a1 + 32) = *a3 != 0;
      }
    }
    uint64_t v4 = (_DWORD *)(a1 + 32);
  }
  else
  {
    if (a2 != 1) {
      return 21;
    }
    if ((*a3 & 0x80000000) != 0)
    {
      uint64_t v3 = 0;
      uint64_t v4 = (_DWORD *)(a1 + 16);
    }
    else
    {
      uint64_t v3 = *(void *)(a1 + 88);
      if (v3) {
        uint64_t v3 = 21;
      }
      else {
        *(_DWORD *)(a1 + 16) = *a3 != 0;
      }
      uint64_t v4 = (_DWORD *)(a1 + 16);
    }
  }
  *a3 = *v4;
  return v3;
}

uint64_t sqlite3session_changeset_size(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

double sqlite3changeset_start(uint64_t *a1, int a2, uint64_t a3)
{
  *a1 = 0;
  if (!sqlite3_initialize())
  {
    uint64_t v7 = sub_1B0C7FC94(152);
    if (v7)
    {
      double result = 0.0;
      *(_OWORD *)(v7 + 16) = 0u;
      *(_OWORD *)(v7 + 32) = 0u;
      *(void *)(v7 + 16) = a3;
      *(_OWORD *)(v7 + 64) = 0u;
      *(_OWORD *)(v7 + 80) = 0u;
      *(void *)(v7 + 144) = 0;
      *(_OWORD *)(v7 + 112) = 0u;
      *(_OWORD *)(v7 + 128) = 0u;
      *(_OWORD *)(v7 + 96) = 0u;
      *(_OWORD *)(v7 + 48) = 0u;
      *(_OWORD *)uint64_t v7 = 0u;
      *(_DWORD *)(v7 + 24) = a2;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 1;
      *(_DWORD *)(v7 + 92) = 0;
      *(_DWORD *)(v7 + 96) = 0;
      *a1 = v7;
    }
  }
  return result;
}

double sqlite3changeset_start_v2(uint64_t *a1, int a2, uint64_t a3, unsigned int a4)
{
  *a1 = 0;
  if (!sqlite3_initialize())
  {
    uint64_t v9 = sub_1B0C7FC94(152);
    if (v9)
    {
      double result = 0.0;
      *(_OWORD *)(v9 + 16) = 0u;
      *(_OWORD *)(v9 + 32) = 0u;
      *(void *)(v9 + 16) = a3;
      *(_OWORD *)(v9 + 64) = 0u;
      *(_OWORD *)(v9 + 80) = 0u;
      *(void *)(v9 + 144) = 0;
      *(_OWORD *)(v9 + 112) = 0u;
      *(_OWORD *)(v9 + 128) = 0u;
      *(_OWORD *)(v9 + 96) = 0u;
      *(_OWORD *)(v9 + 48) = 0u;
      *(_OWORD *)uint64_t v9 = 0u;
      *(_DWORD *)(v9 + 24) = a2;
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 1;
      *(void *)(v9 + 92) = (a4 >> 1) & 1;
      *a1 = v9;
    }
  }
  return result;
}

uint64_t sqlite3changeset_start_strm(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  *a1 = 0;
  if (sqlite3_initialize()) {
    return 7;
  }
  uint64_t v7 = sub_1B0C7FC94(152);
  if (!v7) {
    return 7;
  }
  uint64_t v8 = v7;
  uint64_t result = 0;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(void *)(v8 + 48) = a2;
  *(void *)(v8 + 56) = a3;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(void *)(v8 + 144) = 0;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 128) = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)uint64_t v8 = 0u;
  *(void *)(v8 + 16) = 0;
  *(_DWORD *)(v8 + 24) = 0;
  *(_DWORD *)(v8 + 64) = a2 == 0;
  *(_DWORD *)(v8 + 92) = 0;
  *(_DWORD *)(v8 + 96) = 0;
  *a1 = v8;
  return result;
}

uint64_t sqlite3changeset_start_v2_strm(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  *a1 = 0;
  if (sqlite3_initialize()) {
    return 7;
  }
  uint64_t v9 = sub_1B0C7FC94(152);
  if (!v9) {
    return 7;
  }
  uint64_t v10 = v9;
  uint64_t result = 0;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  *(void *)(v10 + 48) = a2;
  *(void *)(v10 + 56) = a3;
  *(_OWORD *)(v10 + 80) = 0u;
  *(_OWORD *)(v10 + 96) = 0u;
  *(void *)(v10 + 144) = 0;
  *(_OWORD *)(v10 + 112) = 0u;
  *(_OWORD *)(v10 + 128) = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)uint64_t v10 = 0u;
  *(void *)(v10 + 16) = 0;
  *(_DWORD *)(v10 + 24) = 0;
  *(_DWORD *)(v10 + 64) = a2 == 0;
  *(_DWORD *)(v10 + 92) = (a4 >> 1) & 1;
  *(_DWORD *)(v10 + 96) = 0;
  *a1 = v10;
  return result;
}

uint64_t sqlite3changeset_next(uint64_t a1)
{
  return sub_1B0CFE634(a1, 0, 0, 0);
}

uint64_t sub_1B0CFE634(uint64_t a1, void *a2, int *a3, _DWORD *a4)
{
  while (2)
  {
    int v94 = 0;
    uint64_t result = *(unsigned int *)(a1 + 100);
    if (result) {
      break;
    }
    uint64_t v7 = *(void **)(a1 + 144);
    if (v7)
    {
      int v8 = *(_DWORD *)(a1 + 120);
      if (v8 >= 1)
      {
        uint64_t v9 = 0;
        do
        {
          uint64_t v10 = *(void *)(a1 + 144);
          uint64_t v11 = *(void *)(v10 + 8 * v9);
          if (v11)
          {
            if ((*(_WORD *)(v11 + 20) & 0x9000) != 0 || *(_DWORD *)(v11 + 32)) {
              sub_1B0D180E4(*(void *)(v10 + 8 * v9));
            }
            sub_1B0D05C10(*(void **)(v11 + 24), (void *)v11);
            int v8 = *(_DWORD *)(a1 + 120);
          }
          ++v9;
        }
        while (v9 < 2 * v8);
        uint64_t v7 = *(void **)(a1 + 144);
      }
      bzero(v7, 16 * v8);
    }
    uint64_t result = sub_1B0DD7F10(a1, 2);
    *(_DWORD *)(a1 + 100) = result;
    if (result) {
      break;
    }
    uint64_t v13 = *(unsigned int *)(a1 + 8);
    if ((int)v13 >= *(_DWORD *)(a1 + 24)) {
      return 101;
    }
    if (*(void *)(a1 + 48) && (int)v13 >= dword_1E9B51ED8)
    {
      size_t v14 = (*(_DWORD *)(a1 + 40) - v13);
      if ((int)v14 >= 1)
      {
        memmove(*(void **)(a1 + 32), (const void *)(*(void *)(a1 + 32) + v13), v14);
        LODWORD(v14) = *(_DWORD *)(a1 + 40) - *(_DWORD *)(a1 + 8);
      }
      LODWORD(v13) = 0;
      *(_DWORD *)(a1 + 40) = v14;
      *(_DWORD *)(a1 + 24) = v14;
    }
    *(_DWORD *)(a1 + 4) = v13;
    while (1)
    {
      uint64_t v15 = *(void *)(a1 + 16);
      uint64_t v16 = (int)v13 + 1;
      *(_DWORD *)(a1 + 8) = v16;
      unsigned int v17 = *(unsigned __int8 *)(v15 + (int)v13);
      if ((v17 | 4) != 0x54) {
        break;
      }
      if (a4) {
        *a4 = 1;
      }
      *(_DWORD *)(a1 + 88) = v17 == 80;
      int v95 = 0;
      uint64_t result = sub_1B0DD85CC(a1, &v95);
      if (!result)
      {
        uint64_t v21 = *(int *)(a1 + 8);
        int v22 = (char *)(*(void *)(a1 + 16) + v21);
        int v23 = *v22;
        if (*v22 < 0)
        {
          int v33 = v22[1];
          if (v22[1] < 0)
          {
            int v36 = v22[2];
            if (v36 < 0)
            {
              unint64_t v96 = 0;
              unsigned int v24 = sub_1B0CAD43C(v22, &v96);
              if (HIDWORD(v96)) {
                int v23 = -1;
              }
              else {
                int v23 = v96;
              }
              *(_DWORD *)(a1 + 120) = v23;
              if (v23 < 1)
              {
LABEL_55:
                uint64_t result = sub_1B0D1045C(233868);
                goto LABEL_33;
              }
            }
            else
            {
              int v23 = v36 & 0x7F | (v23 << 14) & 0x1FC07F | ((v33 & 0x7F) << 7);
              *(_DWORD *)(a1 + 120) = v23;
              unsigned int v24 = 3;
              if (v23 < 1) {
                goto LABEL_55;
              }
            }
          }
          else
          {
            int v23 = ((v23 & 0x7F) << 7) | v33;
            *(_DWORD *)(a1 + 120) = v23;
            unsigned int v24 = 2;
            if (v23 < 1) {
              goto LABEL_55;
            }
          }
        }
        else
        {
          *(_DWORD *)(a1 + 120) = v23;
          unsigned int v24 = 1;
          if (v23 < 1) {
            goto LABEL_55;
          }
        }
        size_t v25 = v95 - (unint64_t)v24;
        *(_DWORD *)(a1 + 8) = v24 + v21;
        int v26 = v25 + 16 * v23;
        *(_DWORD *)(a1 + 80) = 0;
        int v27 = *(_DWORD *)(a1 + 84);
        if (v26 <= v27)
        {
          uint64_t v34 = *(void **)(a1 + 72);
        }
        else
        {
          uint64_t v28 = v26;
          if (v27) {
            int v29 = *(_DWORD *)(a1 + 84);
          }
          else {
            int v29 = 128;
          }
          uint64_t v30 = v29;
          do
          {
            uint64_t v31 = v30;
            v30 *= 2;
          }
          while (v30 < v28);
          if (v31 >= 1073741696)
          {
            if ((int)v28 > 2147483391) {
              goto LABEL_47;
            }
            uint64_t v30 = 2147483391;
          }
          uint64_t v32 = *(void *)(a1 + 72);
          if (sqlite3_initialize() || (uint64_t v34 = (void *)sub_1B0C8E1B8(v32, v30)) == 0)
          {
LABEL_47:
            uint64_t result = 7;
            goto LABEL_33;
          }
          *(void *)(a1 + 72) = v34;
          *(_DWORD *)(a1 + 84) = v30;
          int v23 = *(_DWORD *)(a1 + 120);
        }
        size_t v35 = 16 * v23;
        bzero(v34, v35);
        memcpy((void *)(*(void *)(a1 + 72) + v35), (const void *)(*(void *)(a1 + 16) + *(int *)(a1 + 8)), v25);
        uint64_t result = 0;
        *(_DWORD *)(a1 + 8) += v25;
      }
LABEL_33:
      uint64_t v18 = *(void *)(a1 + 72);
      *(void *)(a1 + 144) = v18;
      if (v18)
      {
        uint64_t v19 = *(int *)(a1 + 120);
        v18 += 16 * v19;
        uint64_t v20 = v18 + v19;
      }
      else
      {
        uint64_t v20 = 0;
      }
      *(void *)(a1 + 136) = v18;
      *(void *)(a1 + 112) = v20;
      *(_DWORD *)(a1 + 100) = result;
      if (result) {
        goto LABEL_15;
      }
      uint64_t result = sub_1B0DD7F10(a1, 2);
      *(_DWORD *)(a1 + 100) = result;
      if (result) {
        goto LABEL_15;
      }
      LODWORD(v13) = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 4) = v13;
      if ((int)v13 >= *(_DWORD *)(a1 + 24)) {
        return 101;
      }
    }
    int v37 = 233954;
    if (!*(void *)(a1 + 112) || (int v38 = *(_DWORD *)(a1 + 88)) != 0 && *(_DWORD *)(a1 + 92))
    {
LABEL_104:
      uint64_t result = sub_1B0D1045C(v37);
      *(_DWORD *)(a1 + 100) = result;
      break;
    }
    *(_DWORD *)(a1 + 124) = v17;
    *(_DWORD *)(a1 + 8) = v13 + 2;
    *(_DWORD *)(a1 + 128) = *(unsigned __int8 *)(v15 + v16);
    if (v17 > 0x17 || ((1 << v17) & 0x840200) == 0)
    {
      int v37 = 233960;
      goto LABEL_104;
    }
    if (a2)
    {
      if (v17 == 23 && v38 == 0)
      {
        unsigned int v43 = 2 * *(_DWORD *)(a1 + 120);
        goto LABEL_106;
      }
      uint64_t v41 = *(unsigned int *)(a1 + 120);
      BOOL v42 = v17 != 9 || v38 == 0;
      unsigned int v43 = *(_DWORD *)(a1 + 120);
      if (!v42)
      {
        if ((int)v41 < 1)
        {
          unsigned int v43 = 0;
          goto LABEL_106;
        }
        uint64_t v44 = *(int8x16_t **)(a1 + 136);
        if (v41 >= 8)
        {
          if (v41 >= 0x20)
          {
            int32x4_t v60 = 0uLL;
            uint64_t v45 = v41 & 0xFFFFFFE0;
            int32x4_t v61 = 0uLL;
            uint64_t v62 = v44 + 1;
            uint64_t v63 = v45;
            int32x4_t v64 = 0uLL;
            int32x4_t v65 = 0uLL;
            int32x4_t v66 = 0uLL;
            int32x4_t v67 = 0uLL;
            int32x4_t v68 = 0uLL;
            int32x4_t v69 = 0uLL;
            v70.i64[0] = 0x100000001;
            v70.i64[1] = 0x100000001;
            do
            {
              uint8x16_t v71 = (uint8x16_t)vtstq_s8(v62[-1], v62[-1]);
              uint16x8_t v72 = vmovl_u8(*(uint8x8_t *)v71.i8);
              uint16x8_t v73 = vmovl_high_u8(v71);
              uint8x16_t v74 = (uint8x16_t)vtstq_s8(*v62, *v62);
              uint16x8_t v75 = vmovl_u8(*(uint8x8_t *)v74.i8);
              uint16x8_t v76 = vmovl_high_u8(v74);
              int32x4_t v65 = vaddq_s32(v65, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v73), v70));
              int32x4_t v64 = vaddq_s32(v64, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v73.i8), v70));
              int32x4_t v61 = vaddq_s32(v61, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v72), v70));
              int32x4_t v60 = vaddq_s32(v60, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v72.i8), v70));
              int32x4_t v69 = vaddq_s32(v69, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v76), v70));
              int32x4_t v68 = vaddq_s32(v68, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v76.i8), v70));
              int32x4_t v67 = vaddq_s32(v67, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v75), v70));
              int32x4_t v66 = vaddq_s32(v66, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v75.i8), v70));
              v62 += 2;
              v63 -= 32;
            }
            while (v63);
            unsigned int v43 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v66, v60), vaddq_s32(v68, v64)), vaddq_s32(vaddq_s32(v67, v61), vaddq_s32(v69, v65))));
            if (v45 == v41) {
              goto LABEL_106;
            }
            if ((v41 & 0x18) == 0) {
              goto LABEL_139;
            }
          }
          else
          {
            unsigned int v43 = 0;
            uint64_t v45 = 0;
          }
          uint64_t v77 = v45;
          uint64_t v45 = v41 & 0xFFFFFFF8;
          int32x4_t v78 = 0uLL;
          int32x4_t v79 = (int32x4_t)v43;
          int v80 = (int8x8_t *)&v44->i8[v77];
          uint64_t v81 = v77 - v45;
          v82.i64[0] = 0x100000001;
          v82.i64[1] = 0x100000001;
          do
          {
            int8x8_t v83 = *v80++;
            uint16x8_t v84 = vmovl_u8((uint8x8_t)vtst_s8(v83, v83));
            int32x4_t v78 = vaddq_s32(v78, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v84), v82));
            int32x4_t v79 = vaddq_s32(v79, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v84.i8), v82));
            v81 += 8;
          }
          while (v81);
          unsigned int v43 = vaddvq_s32(vaddq_s32(v79, v78));
          if (v45 != v41) {
            goto LABEL_139;
          }
        }
        else
        {
          uint64_t v45 = 0;
          unsigned int v43 = 0;
LABEL_139:
          uint64_t v85 = v41 - v45;
          BOOL v86 = &v44->u8[v45];
          do
          {
            if (*v86++) {
              ++v43;
            }
            --v85;
          }
          while (v85);
        }
      }
LABEL_106:
      uint64_t result = sub_1B0DD80DC(a1, v43, a3);
      *(_DWORD *)(a1 + 100) = result;
      if (!result)
      {
        uint64_t v54 = *(int *)(a1 + 8);
        *a2 = *(void *)(a1 + 16) + v54;
        *(_DWORD *)(a1 + 8) = *a3 + v54;
        goto LABEL_16;
      }
      break;
    }
    int v46 = *(_DWORD *)(a1 + 92);
    uint64_t v47 = *(void *)(a1 + 144);
    uint64_t v48 = *(int *)(a1 + 120);
    if (v46) {
      uint64_t v49 = v47 + 8 * v48;
    }
    else {
      uint64_t v49 = *(void *)(a1 + 144);
    }
    if (v46) {
      uint64_t v50 = *(void *)(a1 + 144);
    }
    else {
      uint64_t v50 = v47 + 8 * v48;
    }
    BOOL v52 = v17 == 9 || v38 == 0;
    if (v17 != 18 && v52)
    {
      if (v38) {
        uint64_t v53 = *(void *)(a1 + 136);
      }
      else {
        uint64_t v53 = 0;
      }
      uint64_t result = sub_1B0DD8234(a1, v48, v53, v49, 0);
      *(_DWORD *)(a1 + 100) = result;
      if (result) {
        break;
      }
      unsigned int v17 = *(_DWORD *)(a1 + 124);
    }
    if (v17 == 9
      || (uint64_t result = sub_1B0DD8234(a1, *(_DWORD *)(a1 + 120), 0, v50, &v94), (*(_DWORD *)(a1 + 100) = result) == 0))
    {
      int v55 = *(_DWORD *)(a1 + 88);
      if (v55)
      {
        int v56 = *(_DWORD *)(a1 + 124);
        goto LABEL_116;
      }
      int v56 = *(_DWORD *)(a1 + 124);
      if (!*(_DWORD *)(a1 + 92)) {
        goto LABEL_147;
      }
LABEL_116:
      if (v56 == 23)
      {
        uint64_t v57 = *(unsigned int *)(a1 + 120);
        if ((int)v57 >= 1)
        {
          for (uint64_t i = 0; v57 != i; ++i)
          {
            if (*(unsigned char *)(*(void *)(a1 + 136) + i))
            {
              *(void *)(*(void *)(a1 + 144) + 8 * i) = *(void *)(*(void *)(a1 + 144) + 8 * i + 8 * v57);
              uint64_t v59 = *(void *)(a1 + 144);
              if (!*(void *)(v59 + 8 * i))
              {
                int v37 = 234004;
                goto LABEL_104;
              }
              *(void *)(v59 + 8 * v57 + 8 * i) = 0;
            }
          }
        }
        int v56 = 23;
      }
      else
      {
        if (!*(_DWORD *)(a1 + 92)) {
          goto LABEL_146;
        }
        if (v56 == 18)
        {
          int v56 = 9;
        }
        else
        {
          if (v56 != 9) {
            goto LABEL_146;
          }
          int v56 = 18;
        }
        *(_DWORD *)(a1 + 124) = v56;
      }
LABEL_146:
      if (!v55)
      {
LABEL_147:
        if (v56 == 23)
        {
          int v88 = *(_DWORD *)(a1 + 120);
          if (v88 >= 1)
          {
            for (uint64_t j = 0; j < v88; ++j)
            {
              if (!*(unsigned char *)(*(void *)(a1 + 136) + j))
              {
                uint64_t v90 = *(void *)(a1 + 144);
                if (!*(void *)(v90 + 8 * ((int)j + v88)))
                {
                  uint64_t v91 = *(void *)(v90 + 8 * j);
                  if (v91)
                  {
                    if ((*(_WORD *)(v91 + 20) & 0x9000) != 0 || *(_DWORD *)(v91 + 32)) {
                      sub_1B0D180E4(*(void *)(v90 + 8 * j));
                    }
                    sub_1B0D05C10(*(void **)(v91 + 24), (void *)v91);
                    uint64_t v90 = *(void *)(a1 + 144);
                    int v88 = *(_DWORD *)(a1 + 120);
                  }
                  *(void *)(v90 + 8 * j) = 0;
                }
              }
            }
          }
        }
      }
LABEL_16:
      if (*(_DWORD *)(a1 + 96)) {
        BOOL v12 = v94 == 0;
      }
      else {
        BOOL v12 = 1;
      }
      if (v12) {
        return 100;
      }
      continue;
    }
    break;
  }
LABEL_15:
  if (result == 100) {
    goto LABEL_16;
  }
  return result;
}

uint64_t sqlite3changeset_op(uint64_t a1, void *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  *a4 = *(_DWORD *)(a1 + 124);
  *a3 = *(_DWORD *)(a1 + 120);
  *a2 = *(void *)(a1 + 112);
  if (a5) {
    *a5 = *(_DWORD *)(a1 + 128);
  }
  return 0;
}

uint64_t sqlite3changeset_pk(uint64_t a1, void *a2, _DWORD *a3)
{
  *a2 = *(void *)(a1 + 136);
  if (a3) {
    *a3 = *(_DWORD *)(a1 + 120);
  }
  return 0;
}

uint64_t sqlite3changeset_old(uint64_t a1, unsigned int a2, void *a3)
{
  int v3 = *(_DWORD *)(a1 + 124);
  if (v3 != 23 && v3 != 9) {
    return 21;
  }
  if ((a2 & 0x80000000) != 0 || *(_DWORD *)(a1 + 120) <= (signed int)a2) {
    return 25;
  }
  uint64_t result = 0;
  *a3 = *(void *)(*(void *)(a1 + 144) + 8 * a2);
  return result;
}

uint64_t sqlite3changeset_new(uint64_t a1, int a2, void *a3)
{
  int v3 = *(_DWORD *)(a1 + 124);
  if (v3 != 23 && v3 != 18) {
    return 21;
  }
  if (a2 < 0) {
    return 25;
  }
  int v6 = *(_DWORD *)(a1 + 120);
  if (v6 <= a2) {
    return 25;
  }
  uint64_t result = 0;
  *a3 = *(void *)(*(void *)(a1 + 144) + 8 * (v6 + a2));
  return result;
}

uint64_t sqlite3changeset_conflict(uint64_t a1, int a2, sqlite3_value **a3)
{
  uint64_t v4 = *(sqlite3_stmt **)(a1 + 104);
  if (!v4) {
    return 21;
  }
  if (a2 < 0 || *(_DWORD *)(a1 + 120) <= a2) {
    return 25;
  }
  int v6 = sqlite3_column_value(v4, a2);
  uint64_t result = 0;
  *a3 = v6;
  return result;
}

uint64_t sqlite3changeset_fk_conflicts(uint64_t a1, _DWORD *a2)
{
  if (*(void *)(a1 + 104)) {
    return 21;
  }
  if (*(void *)(a1 + 144)) {
    return 21;
  }
  uint64_t result = 0;
  *a2 = *(_DWORD *)(a1 + 120);
  return result;
}

uint64_t sqlite3changeset_finalize(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = a1;
  uint64_t v2 = *(unsigned int *)(a1 + 100);
  if (*(void *)(a1 + 144))
  {
    int v3 = *(_DWORD *)(a1 + 120);
    if (v3 >= 1)
    {
      uint64_t v4 = 0;
      do
      {
        uint64_t v5 = *(void *)(v1 + 144);
        uint64_t v6 = *(void *)(v5 + 8 * v4);
        if (v6)
        {
          if ((*(_WORD *)(v6 + 20) & 0x9000) != 0 || *(_DWORD *)(v6 + 32)) {
            sub_1B0D180E4(*(void *)(v5 + 8 * v4));
          }
          sub_1B0D05C10(*(void **)(v6 + 24), (void *)v6);
          int v3 = *(_DWORD *)(v1 + 120);
        }
        ++v4;
      }
      while (v4 < 2 * v3);
    }
  }
  uint64_t v7 = *(void *)(v1 + 72);
  if (v7)
  {
    int v8 = &off_1EB21C9E8;
    if (!dword_1EB21C9C0)
    {
LABEL_18:
      (*v8)(v7);
      goto LABEL_19;
    }
    if ((void)xmmword_1EB2201B0) {
      xmmword_1EB21CA40(xmmword_1EB2201B0);
    }
    qword_1EB220108[0] -= (int)off_1EB21C9F8(v7);
    --qword_1EB220150;
    off_1EB21C9E8(v7);
    uint64_t v7 = xmmword_1EB2201B0;
    if ((void)xmmword_1EB2201B0)
    {
      int v8 = &xmmword_1EB21CA50;
      goto LABEL_18;
    }
  }
LABEL_19:
  uint64_t v9 = *(void *)(v1 + 32);
  if (!v9) {
    goto LABEL_26;
  }
  uint64_t v10 = &off_1EB21C9E8;
  if (!dword_1EB21C9C0) {
    goto LABEL_25;
  }
  if ((void)xmmword_1EB2201B0) {
    xmmword_1EB21CA40(xmmword_1EB2201B0);
  }
  qword_1EB220108[0] -= (int)off_1EB21C9F8(v9);
  --qword_1EB220150;
  off_1EB21C9E8(v9);
  uint64_t v9 = xmmword_1EB2201B0;
  if ((void)xmmword_1EB2201B0)
  {
    uint64_t v10 = &xmmword_1EB21CA50;
LABEL_25:
    (*v10)(v9);
  }
LABEL_26:
  uint64_t v11 = &off_1EB21C9E8;
  if (!dword_1EB21C9C0)
  {
LABEL_31:
    (*v11)(v1);
    return v2;
  }
  if ((void)xmmword_1EB2201B0) {
    xmmword_1EB21CA40(xmmword_1EB2201B0);
  }
  qword_1EB220108[0] -= (int)off_1EB21C9F8(v1);
  --qword_1EB220150;
  off_1EB21C9E8(v1);
  uint64_t v1 = xmmword_1EB2201B0;
  if ((void)xmmword_1EB2201B0)
  {
    uint64_t v11 = &xmmword_1EB21CA50;
    goto LABEL_31;
  }
  return v2;
}

uint64_t sqlite3changeset_invert(unsigned int a1, uint64_t a2, _DWORD *a3, uint64_t *a4)
{
  uint64_t v10 = 0;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v5 = 0u;
  uint64_t v7 = a1;
  uint64_t v6 = a2;
  return sub_1B0CFF1F4((uint64_t)&v5, 0, 0, a3, a4);
}

uint64_t sub_1B0CFF1F4(uint64_t a1, uint64_t (*a2)(void, void), uint64_t a3, _DWORD *a4, uint64_t *a5)
{
  unsigned int v108 = 0;
  uint64_t v106 = 0;
  uint64_t v107 = 0;
  if (a5)
  {
    *a5 = 0;
    *a4 = 0;
  }
  uint64_t v9 = sub_1B0DD7F10(a1, 2);
  if (!v9)
  {
    uint64_t v98 = a4;
    uint64_t v99 = a5;
    BOOL v12 = 0;
    uint64_t v11 = 0;
    int v100 = 0;
    int v18 = 0;
    uint64_t v102 = a2;
    while (1)
    {
      uint64_t v20 = *(int *)(a1 + 8);
      if ((int)v20 >= *(_DWORD *)(a1 + 24))
      {
        if (v98 && v99)
        {
          uint64_t v10 = 0;
          *uint64_t v98 = v107;
          *uint64_t v99 = v106;
          goto LABEL_12;
        }
        uint64_t v10 = 0;
        if (!a2 || (int)v107 < 1) {
          goto LABEL_5;
        }
        uint64_t v13 = v106;
        uint64_t v10 = a2(a3, v106);
        if (v13) {
          goto LABEL_6;
        }
        goto LABEL_12;
      }
      uint64_t v21 = *(void *)(a1 + 16);
      unsigned int v22 = *(unsigned __int8 *)(v21 + v20);
      if (v22 > 0x16)
      {
        if (v22 != 23)
        {
          if (v22 != 84) {
            goto LABEL_209;
          }
          int v105 = 0;
          *(_DWORD *)(a1 + 8) = v20 + 1;
          uint64_t v19 = sub_1B0DD85CC(a1, &v105);
          if (v19) {
            goto LABEL_210;
          }
          uint64_t v36 = *(void *)(a1 + 16);
          uint64_t v37 = *(int *)(a1 + 8);
          uint64_t v38 = v36 + v37;
          int v18 = *(unsigned __int8 *)(v36 + v37);
          if ((v18 & 0x80) != 0)
          {
            int v59 = *(unsigned __int8 *)(v38 + 1);
            if ((*(char *)(v38 + 1) & 0x80000000) == 0)
            {
              int v18 = ((v18 & 0x7F) << 7) | v59;
              unsigned int v39 = 2;
              goto LABEL_151;
            }
            int v77 = *(char *)(v38 + 2);
            if ((v77 & 0x80000000) == 0)
            {
              int v18 = v77 & 0x7F | (v18 << 14) & 0x1FC07F | ((v59 & 0x7F) << 7);
              unsigned int v39 = 3;
              goto LABEL_151;
            }
            unint64_t v109 = 0;
            unsigned int v78 = sub_1B0CAD43C((char *)v38, &v109);
            int v18 = v109;
            if (!HIDWORD(v109))
            {
              unsigned int v39 = v78;
              goto LABEL_151;
            }
            int v18 = -1;
          }
          else
          {
            unsigned int v39 = 1;
LABEL_151:
            if (v18 >= 1)
            {
              if (v18 > (uint64_t)v100)
              {
                if (v100) {
                  uint64_t v79 = v100;
                }
                else {
                  uint64_t v79 = 128;
                }
                do
                {
                  uint64_t v80 = v79;
                  v79 *= 2;
                }
                while (v79 < v18);
                if (v80 > 1073741695 && (uint64_t v79 = 2147483391, v18 > 0x7FFFFEFF)
                  || sqlite3_initialize()
                  || (uint64_t v81 = sub_1B0C8E1B8((uint64_t)v12, v79)) == 0)
                {
                  uint64_t v10 = 7;
                  goto LABEL_5;
                }
                BOOL v12 = (unsigned __int8 *)v81;
                int v100 = v79;
              }
              memcpy(v12, (const void *)(v36 + v37 + v39), v18);
            }
          }
          int v82 = HIDWORD(v107);
          uint64_t v83 = (int)v107;
          if ((int)v107 >= SHIDWORD(v107))
          {
            if (!HIDWORD(v107)) {
              int v82 = 128;
            }
            uint64_t v85 = v82;
            do
            {
              uint64_t v86 = v85;
              v85 *= 2;
            }
            while (v85 <= (int)v107);
            if (v86 > 1073741695)
            {
              uint64_t v85 = 2147483391;
              if ((int)v107 > 2147483390) {
                goto LABEL_213;
              }
            }
            uint64_t v87 = v106;
            if (sqlite3_initialize()) {
              goto LABEL_213;
            }
            uint64_t v84 = sub_1B0C8E1B8(v87, v85);
            if (!v84) {
              goto LABEL_213;
            }
            uint64_t v106 = v84;
            HIDWORD(v107) = v85;
          }
          else
          {
            uint64_t v84 = v106;
          }
          LODWORD(v107) = v83 + 1;
          *(unsigned char *)(v84 + v83) = 84;
          size_t v88 = v105;
          if (v105 >= 1)
          {
            uint64_t v89 = *(void *)(a1 + 16);
            uint64_t v90 = *(int *)(a1 + 8);
            uint64_t v91 = (int)v107;
            int64_t v92 = (int)v107 + (unint64_t)v105;
            if (v92 <= SHIDWORD(v107))
            {
              uint64_t v96 = v106;
            }
            else
            {
              if (HIDWORD(v107)) {
                uint64_t v93 = SHIDWORD(v107);
              }
              else {
                uint64_t v93 = 128;
              }
              do
              {
                uint64_t v94 = v93;
                v93 *= 2;
              }
              while (v93 < v92);
              if (v94 > 1073741695)
              {
                uint64_t v93 = 2147483391;
                if (v92 > 2147483391) {
                  goto LABEL_213;
                }
              }
              uint64_t v95 = v106;
              if (sqlite3_initialize()) {
                goto LABEL_213;
              }
              uint64_t v96 = sub_1B0C8E1B8(v95, v93);
              if (!v96) {
                goto LABEL_213;
              }
              uint64_t v106 = v96;
              HIDWORD(v107) = v93;
            }
            memcpy((void *)(v96 + v91), (const void *)(v89 + v90), v88);
            LODWORD(v107) = v91 + v88;
          }
          *(_DWORD *)(a1 + 8) += v88;
          a2 = v102;
          if (v11)
          {
            long long v97 = (void (**)(void *))&off_1EB21C9E8;
            if (!dword_1EB21C9C0) {
              goto LABEL_193;
            }
            if ((void)xmmword_1EB2201B0) {
              xmmword_1EB21CA40(xmmword_1EB2201B0);
            }
            qword_1EB220108[0] -= (int)off_1EB21C9F8(v11);
            --qword_1EB220150;
            off_1EB21C9E8(v11);
            uint64_t v11 = (sqlite3_value **)xmmword_1EB2201B0;
            if ((void)xmmword_1EB2201B0)
            {
              long long v97 = (void (**)(void *))&xmmword_1EB21CA50;
LABEL_193:
              (*v97)(v11);
            }
          }
          uint64_t v11 = 0;
          if (!v102) {
            goto LABEL_28;
          }
LABEL_195:
          if ((int)v107 >= dword_1E9B51ED8)
          {
            uint64_t v19 = a2(a3, v106);
            LODWORD(v107) = 0;
            if (v19) {
              goto LABEL_210;
            }
          }
          goto LABEL_28;
        }
        if (!v11)
        {
          if (sqlite3_initialize())
          {
            uint64_t v11 = 0;
LABEL_213:
            uint64_t v10 = 7;
            goto LABEL_5;
          }
          uint64_t v40 = (sqlite3_value **)sub_1B0C7FC94(16 * v18);
          uint64_t v11 = v40;
          if (!v40) {
            goto LABEL_213;
          }
          bzero(v40, 16 * v18);
        }
        LODWORD(v41) = HIDWORD(v107);
        uint64_t v42 = (int)v107;
        unsigned int v43 = v12;
        if ((int)v107 < SHIDWORD(v107))
        {
          uint64_t v44 = v106;
          goto LABEL_64;
        }
        if (HIDWORD(v107)) {
          int v53 = HIDWORD(v107);
        }
        else {
          int v53 = 128;
        }
        uint64_t v41 = v53;
        do
        {
          uint64_t v54 = v41;
          v41 *= 2;
        }
        while (v41 <= (int)v107);
        if (v54 <= 1073741695 || (uint64_t v41 = 2147483391, (int)v107 <= 2147483390))
        {
          uint64_t v55 = v106;
          if (!sqlite3_initialize())
          {
            uint64_t v44 = sub_1B0C8E1B8(v55, v41);
            if (v44)
            {
              uint64_t v106 = v44;
              HIDWORD(v107) = v41;
LABEL_64:
              uint64_t v45 = v42 + 1;
              *(unsigned char *)(v44 + v42) = 23;
              LODWORD(v107) = v42 + 1;
              char v46 = *(unsigned char *)(*(int *)(a1 + 8) + *(void *)(a1 + 16) + 1);
              if ((int)v42 + 1 < (int)v41)
              {
                uint64_t v47 = v106;
                goto LABEL_66;
              }
              if (v41) {
                int v60 = v41;
              }
              else {
                int v60 = 128;
              }
              uint64_t v61 = v60;
              do
              {
                uint64_t v62 = v61;
                v61 *= 2;
              }
              while (v61 <= v45);
              if (v62 <= 1073741695 || (uint64_t v61 = 2147483391, (int)v42 <= 2147483389))
              {
                uint64_t v63 = v106;
                if (!sqlite3_initialize())
                {
                  uint64_t v47 = sub_1B0C8E1B8(v63, v61);
                  if (v47)
                  {
                    uint64_t v106 = v47;
                    HIDWORD(v107) = v61;
LABEL_66:
                    LODWORD(v107) = v42 + 2;
                    *(unsigned char *)(v47 + v45) = v46;
                  }
                }
              }
            }
          }
        }
        *(_DWORD *)(a1 + 8) += 2;
        unsigned int v108 = sub_1B0DD8234(a1, v18, 0, (uint64_t)v11, 0);
        if (!v108) {
          unsigned int v108 = sub_1B0DD8234(a1, v18, 0, (uint64_t)&v11[v18], 0);
        }
        BOOL v12 = v43;
        if (v18 >= 1)
        {
          uint64_t v64 = 0;
          uint64_t v65 = v18;
          do
          {
            if (v12[v64]) {
              int v66 = 0;
            }
            else {
              int v66 = v18;
            }
            sub_1B0DD86FC((uint64_t)&v106, *(&v11[v64++] + v66), &v108);
          }
          while (v18 != v64);
          int32x4_t v67 = v12;
          int32x4_t v68 = v11;
          do
          {
            if (*v67++) {
              int32x4_t v69 = 0;
            }
            else {
              int32x4_t v69 = *v68;
            }
            sub_1B0DD86FC((uint64_t)&v106, v69, &v108);
            ++v68;
            --v65;
          }
          while (v65);
          if (2 * v18 <= 1) {
            uint64_t v71 = 1;
          }
          else {
            uint64_t v71 = (2 * v18);
          }
          uint16x8_t v72 = (uint64_t *)v11;
          do
          {
            uint64_t v73 = *v72;
            if (*v72)
            {
              if ((*(_WORD *)(v73 + 20) & 0x9000) != 0 || *(_DWORD *)(v73 + 32)) {
                sub_1B0D180E4(*v72);
              }
              sub_1B0D05C10(*(void **)(v73 + 24), (void *)v73);
            }
            ++v72;
            --v71;
          }
          while (v71);
        }
        bzero(v11, 16 * v18);
        uint64_t v10 = v108;
        if (v108) {
          goto LABEL_5;
        }
        a2 = v102;
        if (!v102) {
          goto LABEL_28;
        }
        goto LABEL_195;
      }
      if (v22 != 9 && v22 != 18)
      {
LABEL_209:
        uint64_t v19 = sub_1B0D1045C(234369);
LABEL_210:
        uint64_t v10 = v19;
        goto LABEL_5;
      }
      uint64_t v103 = v11;
      LODWORD(v109) = 0;
      char v24 = *(unsigned char *)(v20 + v21 + 1);
      *(_DWORD *)(a1 + 8) = v20 + 2;
      uint64_t v25 = sub_1B0DD80DC(a1, v18, (int *)&v109);
      if (v22 == 9) {
        char v26 = 18;
      }
      else {
        char v26 = 9;
      }
      int v27 = v107;
      long long v104 = v12;
      if (v25)
      {
        uint64_t v10 = v25;
        goto LABEL_41;
      }
      int v48 = HIDWORD(v107);
      if ((int)v107 >= SHIDWORD(v107))
      {
        if (!HIDWORD(v107)) {
          int v48 = 128;
        }
        uint64_t v56 = v48;
        do
        {
          uint64_t v57 = v56;
          v56 *= 2;
        }
        while (v56 <= (int)v107);
        if (v57 > 1073741695 && (uint64_t v56 = 2147483391, (int)v107 > 2147483390)
          || (uint64_t v58 = v106, sqlite3_initialize())
          || (uint64_t v49 = sub_1B0C8E1B8(v58, v56)) == 0)
        {
          uint64_t v10 = 7;
          unsigned int v108 = 7;
          goto LABEL_41;
        }
        uint64_t v106 = v49;
        HIDWORD(v107) = v56;
      }
      else
      {
        uint64_t v49 = v106;
      }
      uint64_t v50 = v27 + 1;
      LODWORD(v107) = v27 + 1;
      *(unsigned char *)(v49 + v27) = v26;
      int v51 = HIDWORD(v107);
      if (v27 + 1 < SHIDWORD(v107))
      {
        uint64_t v52 = v106;
LABEL_71:
        uint64_t v10 = 0;
        v27 += 2;
        LODWORD(v107) = v27;
        *(unsigned char *)(v52 + v50) = v24;
        goto LABEL_41;
      }
      if (!HIDWORD(v107)) {
        int v51 = 128;
      }
      uint64_t v74 = v51;
      do
      {
        uint64_t v75 = v74;
        v74 *= 2;
      }
      while (v74 <= v50);
      if (v75 <= 1073741695 || (uint64_t v74 = 2147483391, v27 <= 2147483389))
      {
        uint64_t v76 = v106;
        if (!sqlite3_initialize())
        {
          uint64_t v52 = sub_1B0C8E1B8(v76, v74);
          if (v52)
          {
            uint64_t v106 = v52;
            HIDWORD(v107) = v74;
            goto LABEL_71;
          }
        }
        uint64_t v10 = 7;
        unsigned int v108 = 7;
        ++v27;
      }
      else
      {
        uint64_t v10 = 7;
        ++v27;
      }
LABEL_41:
      uint64_t v28 = *(int *)(a1 + 8);
      size_t v29 = v109;
      if ((int)v109 >= 1)
      {
        if (v10) {
          goto LABEL_208;
        }
        uint64_t v30 = *(void *)(a1 + 16);
        int64_t v31 = v27 + (unint64_t)v109;
        if (v31 <= SHIDWORD(v107))
        {
          uint64_t v35 = v106;
        }
        else
        {
          if (HIDWORD(v107)) {
            uint64_t v32 = SHIDWORD(v107);
          }
          else {
            uint64_t v32 = 128;
          }
          do
          {
            uint64_t v33 = v32;
            v32 *= 2;
          }
          while (v32 < v31);
          if (v33 > 1073741695)
          {
            uint64_t v32 = 2147483391;
            if (v31 > 2147483391) {
              goto LABEL_207;
            }
          }
          uint64_t v34 = v106;
          if (sqlite3_initialize() || (uint64_t v35 = sub_1B0C8E1B8(v34, v32)) == 0)
          {
            LODWORD(v28) = *(_DWORD *)(a1 + 8);
LABEL_207:
            uint64_t v10 = 7;
LABEL_208:
            *(_DWORD *)(a1 + 8) = v28 + v29;
            uint64_t v11 = v103;
            BOOL v12 = v104;
            goto LABEL_5;
          }
          uint64_t v106 = v35;
          HIDWORD(v107) = v32;
        }
        memcpy((void *)(v35 + v27), (const void *)(v30 + v28), v29);
        LODWORD(v107) = v27 + v29;
        LODWORD(v28) = *(_DWORD *)(a1 + 8);
        a2 = v102;
      }
      *(_DWORD *)(a1 + 8) = v28 + v29;
      uint64_t v11 = v103;
      BOOL v12 = v104;
      if (v10) {
        goto LABEL_5;
      }
      if (a2) {
        goto LABEL_195;
      }
LABEL_28:
      uint64_t v19 = sub_1B0DD7F10(a1, 2);
      unsigned int v108 = v19;
      if (v19) {
        goto LABEL_210;
      }
    }
  }
  uint64_t v10 = v9;
  uint64_t v11 = 0;
  BOOL v12 = 0;
LABEL_5:
  uint64_t v13 = v106;
  if (v106)
  {
LABEL_6:
    size_t v14 = &off_1EB21C9E8;
    if (dword_1EB21C9C0)
    {
      if ((void)xmmword_1EB2201B0) {
        xmmword_1EB21CA40(xmmword_1EB2201B0);
      }
      qword_1EB220108[0] -= (int)off_1EB21C9F8(v13);
      --qword_1EB220150;
      off_1EB21C9E8(v13);
      uint64_t v13 = xmmword_1EB2201B0;
      if (!(void)xmmword_1EB2201B0) {
        goto LABEL_12;
      }
      size_t v14 = &xmmword_1EB21CA50;
    }
    (*v14)(v13);
  }
LABEL_12:
  if (v11)
  {
    uint64_t v15 = (void (**)(void *))&off_1EB21C9E8;
    if (!dword_1EB21C9C0)
    {
LABEL_18:
      (*v15)(v11);
      goto LABEL_19;
    }
    if ((void)xmmword_1EB2201B0) {
      xmmword_1EB21CA40(xmmword_1EB2201B0);
    }
    qword_1EB220108[0] -= (int)off_1EB21C9F8(v11);
    --qword_1EB220150;
    off_1EB21C9E8(v11);
    uint64_t v11 = (sqlite3_value **)xmmword_1EB2201B0;
    if ((void)xmmword_1EB2201B0)
    {
      uint64_t v15 = (void (**)(void *))&xmmword_1EB21CA50;
      goto LABEL_18;
    }
  }
LABEL_19:
  if (v12)
  {
    uint64_t v16 = (void (**)(void *))&off_1EB21C9E8;
    if (!dword_1EB21C9C0)
    {
LABEL_25:
      (*v16)(v12);
      return v10;
    }
    if ((void)xmmword_1EB2201B0) {
      xmmword_1EB21CA40(xmmword_1EB2201B0);
    }
    qword_1EB220108[0] -= (int)off_1EB21C9F8(v12);
    --qword_1EB220150;
    off_1EB21C9E8(v12);
    BOOL v12 = (unsigned __int8 *)xmmword_1EB2201B0;
    if ((void)xmmword_1EB2201B0)
    {
      uint64_t v16 = (void (**)(void *))&xmmword_1EB21CA50;
      goto LABEL_25;
    }
  }
  return v10;
}

uint64_t sqlite3changeset_invert_strm(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, void), uint64_t a4)
{
  long long v9 = 0u;
  memset(v8, 0, sizeof(v8));
  uint64_t v10 = a1;
  uint64_t v11 = a2;
  uint64_t v12 = 0;
  uint64_t v4 = sub_1B0CFF1F4((uint64_t)v8, a3, a4, 0, 0);
  uint64_t v5 = v9;
  if ((void)v9)
  {
    uint64_t v6 = &off_1EB21C9E8;
    if (!dword_1EB21C9C0)
    {
LABEL_7:
      (*v6)(v5);
      return v4;
    }
    if ((void)xmmword_1EB2201B0) {
      xmmword_1EB21CA40(xmmword_1EB2201B0);
    }
    qword_1EB220108[0] -= (int)off_1EB21C9F8(v5);
    --qword_1EB220150;
    off_1EB21C9E8(v5);
    uint64_t v5 = xmmword_1EB2201B0;
    if ((void)xmmword_1EB2201B0)
    {
      uint64_t v6 = &xmmword_1EB21CA50;
      goto LABEL_7;
    }
  }
  return v4;
}

uint64_t sqlite3changeset_apply_v2(sqlite3 *a1, int a2, uint64_t a3, unsigned int (*a4)(uint64_t, char *), uint64_t (*a5)(uint64_t, uint64_t, uint64_t), uint64_t a6, void *a7, _DWORD *a8, unsigned int a9)
{
  if (sqlite3_initialize()) {
    return 7;
  }
  uint64_t v18 = sub_1B0C7FC94(152);
  if (!v18) {
    return 7;
  }
  *(_OWORD *)(v18 + 64) = 0u;
  *(_OWORD *)(v18 + 80) = 0u;
  *(void *)(v18 + 144) = 0;
  *(_OWORD *)(v18 + 112) = 0u;
  *(_OWORD *)(v18 + 128) = 0u;
  *(_OWORD *)(v18 + 96) = 0u;
  *(_OWORD *)(v18 + 32) = 0u;
  *(_OWORD *)(v18 + 48) = 0u;
  *(_OWORD *)uint64_t v18 = 0u;
  *(_OWORD *)(v18 + 16) = 0u;
  *(void *)(v18 + 16) = a3;
  *(_DWORD *)(v18 + 24) = a2;
  *(void *)(v18 + 48) = 0;
  *(void *)(v18 + 56) = 0;
  *(_DWORD *)(v18 + 64) = 1;
  *(_DWORD *)(v18 + 92) = (a9 >> 1) & 1;
  *(_DWORD *)(v18 + 96) = 1;

  return sub_1B0CFFF60(a1, v18, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_1B0CFFF60(sqlite3 *a1, uint64_t a2, unsigned int (*a3)(uint64_t, char *), uint64_t (*a4)(uint64_t, uint64_t, uint64_t), uint64_t a5, void *a6, _DWORD *a7, unsigned int a8)
{
  char v8 = a8;
  int v77 = 0;
  *(_DWORD *)a2 = 1;
  long long v69 = 0u;
  long long v70 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  long long v74 = 0u;
  long long v75 = 0u;
  long long v76 = 0u;
  if (a6) {
    BOOL v11 = a7 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  char v12 = !v11;
  BYTE9(v76) = v12;
  LODWORD(v74) = (a8 >> 1) & 1;
  BYTE10(v76) = (a8 & 4) != 0;
  if (!a1)
  {
    size_t v14 = "NULL";
    goto LABEL_18;
  }
  int v13 = *((unsigned __int8 *)a1 + 113);
  if (v13 == 186)
  {
LABEL_11:
    size_t v14 = "unopened";
    goto LABEL_18;
  }
  if (v13 != 118)
  {
    if (v13 == 109) {
      goto LABEL_11;
    }
    size_t v14 = "invalid";
LABEL_18:
    sqlite3_log(21, "API call with %s database connection pointer", v14);
    sub_1B0CE1978(186024);
    char v61 = v8;
    if ((v8 & 1) == 0) {
      goto LABEL_19;
    }
    goto LABEL_20;
  }
  uint64_t v15 = *((void *)a1 + 3);
  if (v15) {
    xmmword_1EB21CA40(v15);
  }
  char v61 = v8;
  if ((v8 & 1) == 0)
  {
LABEL_19:
    uint64_t v16 = sqlite3_exec(a1, "SAVEPOINT changeset_apply", 0, 0, 0);
    if (v16) {
      goto LABEL_21;
    }
  }
LABEL_20:
  uint64_t v16 = sqlite3_exec(a1, "PRAGMA defer_foreign_keys = 1", 0, 0, 0);
  if (v16) {
    goto LABEL_21;
  }
  int v19 = 0;
  int v20 = 0;
  while (1)
  {
    while (1)
    {
      if (sub_1B0CFE634(a2, 0, 0, 0) != 100)
      {
        int v17 = *(_DWORD *)(a2 + 88);
        uint64_t v52 = sqlite3changeset_finalize(a2);
        if (v52)
        {
          uint64_t v16 = v52;
          goto LABEL_22;
        }
        uint64_t v53 = sub_1B0DD8804(a1, v17, (uint64_t)v77, (uint64_t)&v69, a4, a5);
        char v18 = v61;
        if (v53)
        {
          uint64_t v16 = v53;
          goto LABEL_23;
        }
        if (a1)
        {
          int v54 = *((unsigned __int8 *)a1 + 113);
          switch(v54)
          {
            case 186:
              goto LABEL_135;
            case 118:
              uint64_t v56 = *((void *)a1 + 3);
              if (v56) {
                xmmword_1EB21CA40(v56);
              }
              BOOL v57 = *((uint64_t *)a1 + 101) > 0 || *((void *)a1 + 100) > 0;
              uint64_t v58 = *((void *)a1 + 3);
              if (v58) {
                xmmword_1EB21CA50(v58);
              }
              if (v57)
              {
                uint64_t v68 = 0;
                long long v66 = 0u;
                long long v67 = 0u;
                memset(v65, 0, sizeof(v65));
                DWORD2(v66) = v57;
                if (a4(a5, 5, (uint64_t)v65)) {
                  uint64_t v16 = 19;
                }
                else {
                  uint64_t v16 = 0;
                }
              }
              else
              {
                uint64_t v16 = 0;
              }
              goto LABEL_23;
            case 109:
LABEL_135:
              uint64_t v55 = "unopened";
              break;
            default:
              uint64_t v55 = "invalid";
              break;
          }
        }
        else
        {
          uint64_t v55 = "NULL";
        }
        sqlite3_log(21, "API call with %s database connection pointer", v55);
        sub_1B0CE1978(24492);
        uint64_t v16 = 0;
        goto LABEL_23;
      }
      int v21 = *(_DWORD *)(a2 + 120);
      unsigned int v22 = *(char **)(a2 + 112);
      if (!v77) {
        goto LABEL_45;
      }
      if (v20 > -2) {
        break;
      }
      sub_1B0CE1978(35844);
      if (!v19) {
        goto LABEL_27;
      }
LABEL_30:
      int v19 = 1;
    }
    if (!v22) {
      goto LABEL_45;
    }
    if (v20 != -1) {
      break;
    }
    int v20 = -1;
    if (v19) {
      goto LABEL_30;
    }
LABEL_27:
    uint64_t v16 = sub_1B0DD9224(a1, a2, (uint64_t)&v69, a4, a5);
    if (v16) {
      goto LABEL_21;
    }
  }
  int v23 = v20 + 2;
  char v24 = v77;
  uint64_t v25 = *(unsigned char **)(a2 + 112);
  while (1)
  {
    uint64_t v26 = *v25;
    if (!*v25) {
      break;
    }
    LODWORD(v26) = byte_1B0DE1758[v26];
    int v27 = byte_1B0DE1758[*v24];
    if (v26 != v27) {
      goto LABEL_44;
    }
    ++v25;
    ++v24;
    if (--v23 <= 1) {
      goto LABEL_73;
    }
  }
  int v27 = byte_1B0DE1758[*v24];
LABEL_44:
  if (v26 == v27)
  {
LABEL_73:
    if (!v19) {
      goto LABEL_27;
    }
    goto LABEL_30;
  }
LABEL_45:
  uint64_t v28 = sub_1B0DD8804(a1, *(_DWORD *)(a2 + 88), (uint64_t)v77, (uint64_t)&v69, a4, a5);
  if (v28) {
    goto LABEL_128;
  }
  sub_1B0DD8AA8((uint64_t)&v69);
  uint64_t v29 = *((void *)&v71 + 1);
  if (*((void *)&v71 + 1))
  {
    uint64_t v30 = &off_1EB21C9E8;
    if (!dword_1EB21C9C0)
    {
LABEL_52:
      (*v30)(v29);
      goto LABEL_53;
    }
    if ((void)xmmword_1EB2201B0) {
      xmmword_1EB21CA40(xmmword_1EB2201B0);
    }
    qword_1EB220108[0] -= (int)off_1EB21C9F8(v29);
    --qword_1EB220150;
    off_1EB21C9E8(v29);
    uint64_t v29 = xmmword_1EB2201B0;
    if ((void)xmmword_1EB2201B0)
    {
      uint64_t v30 = &xmmword_1EB21CA50;
      goto LABEL_52;
    }
  }
LABEL_53:
  sqlite3_finalize(*((sqlite3_stmt **)&v69 + 1));
  sqlite3_finalize((sqlite3_stmt *)v70);
  sqlite3_finalize(*((sqlite3_stmt **)&v70 + 1));
  long long v69 = (unint64_t)a1;
  long long v70 = 0uLL;
  LODWORD(v71) = 0;
  *((void *)&v71 + 1) = 0;
  *(void *)&long long v72 = 0;
  *((void *)&v73 + 1) = 0x100000000;
  BYTE8(v76) = 0;
  HIDWORD(v76) = 0;
  *((void *)&v74 + 1) = 0;
  *(void *)&long long v75 = 0;
  if (a3 && !a3(a5, v22))
  {
    uint64_t v35 = (unsigned __int8 *)sqlite3_mprintf("%s", v22);
    int v77 = v35;
    if (!v35)
    {
      uint64_t v16 = 7;
      goto LABEL_21;
    }
    uint64_t v36 = v35;
    int v20 = strlen((const char *)v35);
    *((void *)&v71 + 1) = v36;
    goto LABEL_30;
  }
  int64_t v31 = *(const void **)(a2 + 136);
  uint64_t v28 = sub_1B0CFC460(0, a1, "main", v22, &v71, &v77, (void *)&v71 + 1, &v72, (BOOL *)&v76 + 3);
  if (v28) {
    goto LABEL_128;
  }
  if ((int)v71 < 1)
  {
    int v33 = 0;
    if (!v71)
    {
      sqlite3_log(17, "sqlite3changeset_apply(): no such table: %s");
      goto LABEL_70;
    }
  }
  else
  {
    uint64_t v32 = 0;
    int v33 = 0;
    do
    {
      if (*(unsigned __int8 *)(v72 + v32++)) {
        int v33 = v32;
      }
    }
    while (v71 != v32);
  }
  if ((int)v71 < v21)
  {
    sqlite3_log(17, "sqlite3changeset_apply(): table %s has %d columns, expected %d or more");
LABEL_70:
    int v19 = 1;
    goto LABEL_71;
  }
  if (v21 < v33 || (uint64_t v37 = v72, memcmp((const void *)v72, v31, v21)))
  {
    sqlite3_log(17, "sqlite3changeset_apply(): primary key mismatch for table %s");
    goto LABEL_70;
  }
  LODWORD(v71) = v21;
  if (!v77)
  {
LABEL_85:
    uint64_t v28 = sub_1B0DD6760((uint64_t)a1, BYTE10(v76), (uint64_t)"main", v77, SHIDWORD(v76), v21, *((uint64_t *)&v71 + 1), v37, (void *)&v70 + 1);
    if (v28) {
      goto LABEL_128;
    }
    uint64_t v28 = sub_1B0DD8CC0((uint64_t)a1, (char *)v77, (uint64_t)&v69);
    if (v28) {
      goto LABEL_128;
    }
    uint64_t v28 = sub_1B0DD9020((uint64_t)a1, (char *)v77, (uint64_t)&v69);
    if (v28) {
      goto LABEL_128;
    }
    int v19 = 0;
    DWORD2(v73) = 0;
LABEL_71:
    if (!v77)
    {
      int v20 = 0;
      if (!v19) {
        goto LABEL_27;
      }
      goto LABEL_30;
    }
    int v20 = strlen((const char *)v77) & 0x3FFFFFFF;
    goto LABEL_73;
  }
  uint64_t v38 = v77;
  for (uint64_t i = "sqlite_stat1"; ; ++i)
  {
    uint64_t v40 = *v38;
    uint64_t v41 = *(unsigned __int8 *)i;
    if (v40 == v41) {
      break;
    }
    if (byte_1B0DE1758[v40] != byte_1B0DE1758[v41]) {
      goto LABEL_85;
    }
LABEL_80:
    ++v38;
  }
  if (*v38) {
    goto LABEL_80;
  }
  uint64_t v28 = sub_1B0DD8BFC((uint64_t)a1, (uint64_t)&v69);
  if (!v28)
  {
    int v19 = 0;
    DWORD2(v73) = 1;
    goto LABEL_71;
  }
LABEL_128:
  uint64_t v16 = v28;
LABEL_21:
  int v17 = *(_DWORD *)(a2 + 88);
  sqlite3changeset_finalize(a2);
LABEL_22:
  char v18 = v61;
LABEL_23:
  sqlite3_exec(a1, "PRAGMA defer_foreign_keys = 0", 0, 0, 0);
  if ((v18 & 1) == 0)
  {
    if (v16)
    {
      sqlite3_exec(a1, "ROLLBACK TO changeset_apply", 0, 0, 0);
      sqlite3_exec(a1, "RELEASE changeset_apply", 0, 0, 0);
      goto LABEL_94;
    }
    uint64_t v16 = sqlite3_exec(a1, "RELEASE changeset_apply", 0, 0, 0);
  }
  if (!v16 && !v17 && BYTE9(v76))
  {
    uint64_t v16 = 0;
    *a6 = *((void *)&v75 + 1);
    *a7 = v76;
    *((void *)&v75 + 1) = 0;
  }
LABEL_94:
  sub_1B0DD8AA8((uint64_t)&v69);
  sqlite3_finalize((sqlite3_stmt *)v70);
  sqlite3_finalize(*((sqlite3_stmt **)&v69 + 1));
  sqlite3_finalize(*((sqlite3_stmt **)&v70 + 1));
  uint64_t v42 = *((void *)&v71 + 1);
  if (*((void *)&v71 + 1))
  {
    unsigned int v43 = &off_1EB21C9E8;
    if (!dword_1EB21C9C0) {
      goto LABEL_100;
    }
    if ((void)xmmword_1EB2201B0) {
      xmmword_1EB21CA40(xmmword_1EB2201B0);
    }
    qword_1EB220108[0] -= (int)off_1EB21C9F8(v42);
    --qword_1EB220150;
    off_1EB21C9E8(v42);
    uint64_t v42 = xmmword_1EB2201B0;
    if ((void)xmmword_1EB2201B0)
    {
      unsigned int v43 = &xmmword_1EB21CA50;
LABEL_100:
      (*v43)(v42);
    }
  }
  uint64_t v44 = *((void *)&v74 + 1);
  if (*((void *)&v74 + 1))
  {
    uint64_t v45 = &off_1EB21C9E8;
    if (!dword_1EB21C9C0) {
      goto LABEL_107;
    }
    if ((void)xmmword_1EB2201B0) {
      xmmword_1EB21CA40(xmmword_1EB2201B0);
    }
    qword_1EB220108[0] -= (int)off_1EB21C9F8(v44);
    --qword_1EB220150;
    off_1EB21C9E8(v44);
    uint64_t v44 = xmmword_1EB2201B0;
    if ((void)xmmword_1EB2201B0)
    {
      uint64_t v45 = &xmmword_1EB21CA50;
LABEL_107:
      (*v45)(v44);
    }
  }
  uint64_t v46 = *((void *)&v75 + 1);
  if (*((void *)&v75 + 1))
  {
    uint64_t v47 = &off_1EB21C9E8;
    if (!dword_1EB21C9C0) {
      goto LABEL_114;
    }
    if ((void)xmmword_1EB2201B0) {
      xmmword_1EB21CA40(xmmword_1EB2201B0);
    }
    qword_1EB220108[0] -= (int)off_1EB21C9F8(v46);
    --qword_1EB220150;
    off_1EB21C9E8(v46);
    uint64_t v46 = xmmword_1EB2201B0;
    if ((void)xmmword_1EB2201B0)
    {
      uint64_t v47 = &xmmword_1EB21CA50;
LABEL_114:
      (*v47)(v46);
    }
  }
  if (!a1)
  {
    uint64_t v49 = "NULL";
    goto LABEL_124;
  }
  int v48 = *((unsigned __int8 *)a1 + 113);
  if (v48 == 186) {
    goto LABEL_119;
  }
  if (v48 == 118)
  {
    uint64_t v50 = *((void *)a1 + 3);
    if (v50) {
      xmmword_1EB21CA50(v50);
    }
  }
  else
  {
    if (v48 == 109) {
LABEL_119:
    }
      uint64_t v49 = "unopened";
    else {
      uint64_t v49 = "invalid";
    }
LABEL_124:
    sqlite3_log(21, "API call with %s database connection pointer", v49);
    sub_1B0CE1978(186024);
  }
  return v16;
}

uint64_t sqlite3changeset_apply(sqlite3 *a1, int a2, uint64_t a3, unsigned int (*a4)(uint64_t, char *), uint64_t (*a5)(uint64_t, uint64_t, uint64_t), uint64_t a6)
{
  if (sqlite3_initialize()) {
    return 7;
  }
  uint64_t v13 = sub_1B0C7FC94(152);
  if (!v13) {
    return 7;
  }
  *(_OWORD *)(v13 + 64) = 0u;
  *(_OWORD *)(v13 + 80) = 0u;
  *(void *)(v13 + 144) = 0;
  *(_OWORD *)(v13 + 112) = 0u;
  *(_OWORD *)(v13 + 128) = 0u;
  *(_OWORD *)(v13 + 96) = 0u;
  *(_OWORD *)(v13 + 32) = 0u;
  *(_OWORD *)(v13 + 48) = 0u;
  *(_OWORD *)uint64_t v13 = 0u;
  *(_OWORD *)(v13 + 16) = 0u;
  *(void *)(v13 + 16) = a3;
  *(_DWORD *)(v13 + 24) = a2;
  *(void *)(v13 + 48) = 0;
  *(void *)(v13 + 56) = 0;
  *(_DWORD *)(v13 + 64) = 1;
  *(void *)(v13 + 92) = 0x100000000;

  return sub_1B0CFFF60(a1, v13, a4, a5, a6, 0, 0, 0);
}

uint64_t sqlite3changeset_apply_v2_strm(sqlite3 *a1, uint64_t a2, uint64_t a3, unsigned int (*a4)(uint64_t, char *), uint64_t (*a5)(uint64_t, uint64_t, uint64_t), uint64_t a6, void *a7, _DWORD *a8, unsigned int a9)
{
  if (sqlite3_initialize()) {
    return 7;
  }
  uint64_t v18 = sub_1B0C7FC94(152);
  if (!v18) {
    return 7;
  }
  *(_OWORD *)(v18 + 64) = 0u;
  *(_OWORD *)(v18 + 80) = 0u;
  *(void *)(v18 + 144) = 0;
  *(_OWORD *)(v18 + 112) = 0u;
  *(_OWORD *)(v18 + 128) = 0u;
  *(_OWORD *)(v18 + 96) = 0u;
  *(_OWORD *)(v18 + 32) = 0u;
  *(_OWORD *)(v18 + 48) = 0u;
  *(_OWORD *)uint64_t v18 = 0u;
  *(_OWORD *)(v18 + 16) = 0u;
  *(void *)(v18 + 48) = a2;
  *(void *)(v18 + 56) = a3;
  *(void *)(v18 + 16) = 0;
  *(_DWORD *)(v18 + 24) = 0;
  *(_DWORD *)(v18 + 64) = a2 == 0;
  *(_DWORD *)(v18 + 92) = (a9 >> 1) & 1;
  *(_DWORD *)(v18 + 96) = 1;

  return sub_1B0CFFF60(a1, v18, a4, a5, a6, a7, a8, a9);
}

uint64_t sqlite3changeset_apply_strm(sqlite3 *a1, uint64_t a2, uint64_t a3, unsigned int (*a4)(uint64_t, char *), uint64_t (*a5)(uint64_t, uint64_t, uint64_t), uint64_t a6)
{
  if (sqlite3_initialize()) {
    return 7;
  }
  uint64_t v13 = sub_1B0C7FC94(152);
  if (!v13) {
    return 7;
  }
  *(_OWORD *)(v13 + 64) = 0u;
  *(_OWORD *)(v13 + 80) = 0u;
  *(void *)(v13 + 144) = 0;
  *(_OWORD *)(v13 + 112) = 0u;
  *(_OWORD *)(v13 + 128) = 0u;
  *(_OWORD *)(v13 + 96) = 0u;
  *(_OWORD *)(v13 + 32) = 0u;
  *(_OWORD *)(v13 + 48) = 0u;
  *(_OWORD *)uint64_t v13 = 0u;
  *(_OWORD *)(v13 + 16) = 0u;
  *(void *)(v13 + 16) = 0;
  *(_DWORD *)(v13 + 24) = 0;
  *(void *)(v13 + 48) = a2;
  *(void *)(v13 + 56) = a3;
  *(_DWORD *)(v13 + 64) = a2 == 0;
  *(void *)(v13 + 92) = 0x100000000;

  return sub_1B0CFFF60(a1, v13, a4, a5, a6, 0, 0, 0);
}

uint64_t sqlite3changegroup_new(void *a1)
{
  if (sqlite3_initialize())
  {
    uint64_t v2 = 0;
  }
  else
  {
    uint64_t v2 = (void *)sub_1B0C7FC94(16);
    if (v2)
    {
      uint64_t v3 = 0;
      *uint64_t v2 = 0;
      v2[1] = 0;
      goto LABEL_6;
    }
  }
  uint64_t v3 = 7;
LABEL_6:
  *a1 = v2;
  return v3;
}

uint64_t sqlite3changegroup_add(uint64_t a1, int a2, uint64_t a3)
{
  if (sqlite3_initialize())
  {
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v8 = sub_1B0C7FC94(152);
    uint64_t v6 = v8;
    if (v8)
    {
      *(_OWORD *)(v8 + 64) = 0u;
      *(_OWORD *)(v8 + 80) = 0u;
      *(void *)(v8 + 144) = 0;
      *(_OWORD *)(v8 + 112) = 0u;
      *(_OWORD *)(v8 + 128) = 0u;
      *(_OWORD *)(v8 + 96) = 0u;
      *(_OWORD *)(v8 + 32) = 0u;
      *(_OWORD *)(v8 + 48) = 0u;
      *(_OWORD *)uint64_t v8 = 0u;
      *(_OWORD *)(v8 + 16) = 0u;
      *(void *)(v8 + 16) = a3;
      *(_DWORD *)(v8 + 24) = a2;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 1;
      *(_DWORD *)(v8 + 92) = 0;
      *(_DWORD *)(v8 + 96) = 0;
      uint64_t v7 = sub_1B0D00D00(v8, a1, 0);
      goto LABEL_6;
    }
  }
  uint64_t v7 = 7;
LABEL_6:
  sqlite3changeset_finalize(v6);
  return v7;
}

uint64_t sub_1B0D00D00(uint64_t a1, uint64_t a2, int a3)
{
  __s2 = 0;
  int v145 = 0;
  if (sub_1B0CFE634(a1, &__s2, &v145, 0) != 100) {
    return *(unsigned int *)(a1 + 100);
  }
  uint64_t v5 = 0;
  uint64_t v144 = (uint64_t *)(a2 + 8);
  uint64_t v140 = a2;
  while (1)
  {
    int v6 = *(_DWORD *)(a1 + 88);
    if (!*v144)
    {
      *(_DWORD *)(a2 + 4) = v6;
      goto LABEL_7;
    }
    if (v6 != *(_DWORD *)(a2 + 4)) {
      return 1;
    }
LABEL_7:
    int v8 = *(_DWORD *)(a1 + 120);
    int v7 = *(_DWORD *)(a1 + 124);
    long long v9 = *(const char **)(a1 + 112);
    int v143 = *(_DWORD *)(a1 + 128);
    if (v5)
    {
      uint64_t v10 = *(unsigned __int8 **)(v5 + 8);
      if (v9)
      {
        if (v10)
        {
          for (uint64_t i = *(unsigned char **)(a1 + 112); ; ++i)
          {
            uint64_t v12 = *i;
            uint64_t v13 = *v10;
            if (v12 == v13)
            {
              if (!*i) {
                goto LABEL_40;
              }
            }
            else if (byte_1B0DE1758[v12] != byte_1B0DE1758[v13])
            {
              break;
            }
            ++v10;
          }
        }
      }
      else if (!v10)
      {
        goto LABEL_40;
      }
    }
    size_t v14 = strlen(v9);
    size_t v15 = v14;
    uint64_t v16 = *(const void **)(a1 + 136);
    if (v9) {
      int v17 = -1;
    }
    else {
      int v17 = 0;
    }
    uint64_t v5 = (uint64_t)v144;
    while (1)
    {
      uint64_t v5 = *(void *)v5;
      if (!v5)
      {
        if (!sqlite3_initialize())
        {
          size_t v57 = v15 << 32;
          uint64_t v58 = sub_1B0C7FC94(v8 + (uint64_t)(int)v15 + 65);
          if (v58)
          {
            uint64_t v5 = v58;
            *(_OWORD *)(v58 + 32) = 0u;
            *(_OWORD *)(v58 + 48) = 0u;
            *(_OWORD *)uint64_t v58 = 0u;
            *(_OWORD *)(v58 + 16) = 0u;
            *(_DWORD *)(v58 + 16) = v8;
            uint64_t v59 = v58 + 64;
            *(void *)(v58 + 40) = v58 + 64;
            memcpy((void *)(v58 + 64), v16, v8);
            *(void *)(v5 + 8) = v59 + v8;
            memcpy((void *)(v59 + v8), v9, (uint64_t)(v57 + 0x100000000) >> 32);
            int v60 = v144;
            do
            {
              char v61 = v60;
              int v60 = (uint64_t *)*v60;
            }
            while (v60);
            *char v61 = v5;
            a2 = v140;
            goto LABEL_40;
          }
        }
        return 7;
      }
      if ((int)v14 <= -2) {
        break;
      }
      int v20 = *(unsigned char **)(v5 + 8);
      if (v20) {
        int v19 = 1;
      }
      else {
        int v19 = v17;
      }
      if (v20) {
        BOOL v21 = v9 == 0;
      }
      else {
        BOOL v21 = 1;
      }
      if (!v21)
      {
        if (v14 == -1) {
          goto LABEL_38;
        }
        int v22 = v14 + 2;
        int v23 = *(unsigned __int8 **)(a1 + 112);
        while (1)
        {
          uint64_t v24 = *v20;
          if (!*v20) {
            break;
          }
          LODWORD(v24) = byte_1B0DE1758[v24];
          int v18 = byte_1B0DE1758[*v23];
          if (v24 != v18) {
            goto LABEL_22;
          }
          ++v20;
          ++v23;
          if (--v22 <= 1) {
            goto LABEL_38;
          }
        }
        int v18 = byte_1B0DE1758[*v23];
LABEL_22:
        int v19 = v24 - v18;
      }
      if (!v19) {
        goto LABEL_38;
      }
    }
    sub_1B0CE1978(35844);
LABEL_38:
    if (*(_DWORD *)(v5 + 16) != v8 || memcmp(*(const void **)(v5 + 40), v16, v8)) {
      return 17;
    }
LABEL_40:
    if (sub_1B0DD58DC(0, *(_DWORD *)(a1 + 88), v5)) {
      return 7;
    }
    if (*(_DWORD *)(a1 + 88)) {
      BOOL v25 = v7 == 9;
    }
    else {
      BOOL v25 = 0;
    }
    int v26 = v25;
    int v27 = sub_1B0DD63A0(v5, v26, (unsigned __int8 *)__s2, *(_DWORD *)(v5 + 52));
    uint64_t v28 = *(void *)(v5 + 56) + 8 * v27;
    uint64_t v29 = *(char ***)v28;
    int v142 = v27;
    if (!*(void *)v28)
    {
LABEL_53:
      uint64_t v34 = (char *)__s2;
      int v35 = v145;
      if (sqlite3_initialize()) {
        return 7;
      }
      uint64_t v36 = sub_1B0C7FC94(v35 + 32);
      if (!v36) {
        return 7;
      }
      int v33 = (char **)v36;
      *(_OWORD *)uint64_t v36 = 0u;
      *(_OWORD *)(v36 + 16) = 0u;
      *(unsigned char *)uint64_t v36 = v7;
      *(unsigned char *)(v36 + 1) = v143;
      uint64_t v37 = (unsigned char *)(v36 + 32);
      *(void *)(v36 + 16) = v36 + 32;
      if (a3 && v143)
      {
        if (*(int *)(v5 + 16) < 1)
        {
          LODWORD(v52) = v36 + 32;
        }
        else
        {
          uint64_t v38 = 0;
          do
          {
            int v40 = *v34;
            if (*v34)
            {
              int v39 = 1;
              if (v40 != 5 && v40 != 255)
              {
                if ((v40 - 1) < 2)
                {
                  int v39 = 9;
                }
                else
                {
                  int v41 = v34[1];
                  if ((v41 & 0x80) != 0)
                  {
                    int v43 = v34[2];
                    if (v34[2] < 0)
                    {
                      int v44 = v34[3];
                      if (v44 < 0)
                      {
                        unint64_t v148 = 0;
                        char v45 = sub_1B0CAD43C(v34 + 1, &v148);
                        if (HIDWORD(v148)) {
                          int v41 = -1;
                        }
                        else {
                          int v41 = v148;
                        }
                        int v42 = (v45 + 1);
                      }
                      else
                      {
                        int v41 = v44 & 0x7F | (v41 << 14) & 0x1FC07F | ((v43 & 0x7F) << 7);
                        int v42 = 4;
                      }
                    }
                    else
                    {
                      int v41 = ((v41 & 0x7F) << 7) | v43;
                      int v42 = 3;
                    }
                  }
                  else
                  {
                    int v42 = 2;
                  }
                  int v39 = v42 + v41;
                }
              }
              if (*(unsigned char *)(*(void *)(v5 + 40) + v38))
              {
                memcpy(v37, v34, v39);
                v37 += v39;
              }
              else
              {
                *v37++ = -1;
              }
            }
            else
            {
              *v37++ = 0;
              int v39 = 1;
            }
            v34 += v39;
            ++v38;
          }
          while (v38 < *(int *)(v5 + 16));
          uint64_t v52 = v33[2];
        }
        *((_DWORD *)v33 + 2) = v37 - v52;
      }
      else
      {
        *(_DWORD *)(v36 + 8) = v35;
        memcpy((void *)(v36 + 32), v34, v35);
      }
      goto LABEL_189;
    }
    while (1)
    {
      if (*(_DWORD *)(a1 + 88))
      {
        BOOL v30 = *(unsigned __int8 *)v29 == 9;
        BOOL v31 = v7 == 9;
      }
      else
      {
        BOOL v30 = 0;
        BOOL v31 = 0;
      }
      int v32 = sub_1B0DDA904(v5, v30, v29[2], v31, (char *)__s2);
      int v33 = *(char ***)v28;
      uint64_t v29 = *(char ***)(*(void *)v28 + 24);
      if (v32) {
        break;
      }
      uint64_t v28 = *(void *)v28 + 24;
      if (!v29) {
        goto LABEL_53;
      }
    }
    *(void *)uint64_t v28 = v29;
    --*(_DWORD *)(v5 + 48);
    uint64_t v46 = (char *)__s2;
    size_t v47 = v145;
    int v48 = *(unsigned __int8 *)v33;
    if (a3)
    {
      if (v48 != 9 || !*((unsigned char *)v33 + 1))
      {
        uint64_t v49 = *((int *)v33 + 2);
        if (sqlite3_initialize())
        {
          uint64_t v50 = 0;
          int v51 = 0;
          uint64_t v132 = 7;
          goto LABEL_181;
        }
        uint64_t v62 = v49 + v47 + 32;
        uint64_t v63 = (_DWORD *)sub_1B0C7FC94(v62);
        uint64_t v50 = v63;
        if (v63)
        {
          uint64_t v64 = v33[2];
          bzero(v63, v62);
          int v65 = v143;
          if (v143) {
            BOOL v66 = 1;
          }
          else {
            BOOL v66 = *((unsigned char *)v33 + 1) != 0;
          }
          a2 = v140;
          long long v73 = v46;
          *((unsigned char *)v50 + 1) = v66;
          *(unsigned char *)uint64_t v50 = v7;
          long long v74 = v50 + 8;
          *((void *)v50 + 2) = v50 + 8;
          if (*(int *)(v5 + 16) >= 1)
          {
            __srca = v50;
            uint64_t v75 = 0;
            while (1)
            {
              int v76 = *v64;
              int v77 = 1;
              if (*v64) {
                BOOL v78 = v76 == 5;
              }
              else {
                BOOL v78 = 1;
              }
              if (!v78 && v76 != 255)
              {
                if ((v76 - 1) >= 2)
                {
                  int v79 = v64[1];
                  if ((v79 & 0x80) != 0)
                  {
                    int v81 = v64[2];
                    if (v64[2] < 0)
                    {
                      int v82 = v64[3];
                      if (v82 < 0)
                      {
                        unint64_t v148 = 0;
                        uint64_t v83 = v73;
                        uint64_t v84 = v74;
                        char v85 = sub_1B0CAD43C(v64 + 1, &v148);
                        long long v74 = v84;
                        long long v73 = v83;
                        int v65 = v143;
                        if (HIDWORD(v148)) {
                          int v79 = -1;
                        }
                        else {
                          int v79 = v148;
                        }
                        int v80 = (v85 + 1);
                      }
                      else
                      {
                        int v79 = v82 & 0x7F | (v79 << 14) & 0x1FC07F | ((v81 & 0x7F) << 7);
                        int v80 = 4;
                      }
                    }
                    else
                    {
                      int v79 = ((v79 & 0x7F) << 7) | v81;
                      int v80 = 3;
                    }
                  }
                  else
                  {
                    int v80 = 2;
                  }
                  int v77 = v80 + v79;
                }
                else
                {
                  int v77 = 9;
                }
              }
              int v86 = *v73;
              int v87 = 1;
              if (*v73) {
                BOOL v88 = v86 == 5;
              }
              else {
                BOOL v88 = 1;
              }
              if (v88 || v86 == 255) {
                goto LABEL_159;
              }
              if ((v86 - 1) < 2) {
                break;
              }
              int v92 = v73[1];
              if ((v92 & 0x80) != 0)
              {
                int v95 = v73[2];
                if (v73[2] < 0)
                {
                  int v96 = v73[3];
                  if (v96 < 0)
                  {
                    unint64_t v148 = 0;
                    uint64_t v139 = v73;
                    long long v97 = v74;
                    char v98 = sub_1B0CAD43C(v73 + 1, &v148);
                    long long v74 = v97;
                    long long v73 = v139;
                    int v65 = v143;
                    if (HIDWORD(v148)) {
                      int v92 = -1;
                    }
                    else {
                      int v92 = v148;
                    }
                    int v93 = (v98 + 1);
                  }
                  else
                  {
                    int v92 = v96 & 0x7F | (v92 << 14) & 0x1FC07F | ((v95 & 0x7F) << 7);
                    int v93 = 4;
                  }
                }
                else
                {
                  int v92 = ((v92 & 0x7F) << 7) | v95;
                  int v93 = 3;
                }
              }
              else
              {
                int v93 = 2;
              }
              int v87 = v93 + v92;
              if (v76 == 255) {
                goto LABEL_132;
              }
LABEL_160:
              if (!v65 || *(unsigned char *)(*(void *)(v5 + 40) + v75))
              {
                uint64_t v138 = v73;
                if (v86)
                {
                  size_t v89 = v87;
                  uint64_t v90 = v74;
                  uint64_t v91 = v73;
                }
                else
                {
                  size_t v89 = v77;
                  uint64_t v90 = v74;
                  uint64_t v91 = v64;
                }
                uint64_t v94 = v74;
                memcpy(v90, v91, v89);
                long long v73 = v138;
                long long v74 = &v94[v89];
                int v65 = v143;
                goto LABEL_133;
              }
LABEL_132:
              *v74++ = -1;
LABEL_133:
              v64 += v77;
              v73 += v87;
              ++v75;
              a2 = v140;
              if (v75 >= *(int *)(v5 + 16))
              {
                uint64_t v50 = __srca;
                uint64_t v99 = __srca[2];
                goto LABEL_180;
              }
            }
            int v87 = 9;
LABEL_159:
            if (v76 == 255) {
              goto LABEL_132;
            }
            goto LABEL_160;
          }
          LODWORD(v99) = v50 + 32;
LABEL_180:
          uint64_t v132 = 0;
          v50[2] = v74 - v99;
          int v51 = 1;
        }
        else
        {
          int v51 = 0;
          uint64_t v132 = 7;
          a2 = v140;
        }
LABEL_181:
        int v100 = (void (**)(unsigned __int8 *))&off_1EB21C9E8;
        if (dword_1EB21C9C0)
        {
          if ((void)xmmword_1EB2201B0) {
            xmmword_1EB21CA40(xmmword_1EB2201B0);
          }
          qword_1EB220108[0] -= (int)off_1EB21C9F8(v33);
          --qword_1EB220150;
          off_1EB21C9E8(v33);
          int v33 = (char **)xmmword_1EB2201B0;
          if ((void)xmmword_1EB2201B0)
          {
            int v100 = (void (**)(unsigned __int8 *))&xmmword_1EB21CA50;
            goto LABEL_186;
          }
        }
        else
        {
LABEL_186:
          (*v100)((unsigned __int8 *)v33);
        }
        if (!v51) {
          return v132;
        }
LABEL_188:
        int v33 = (char **)v50;
        if (v50)
        {
LABEL_189:
          uint64_t v101 = *(void *)(v5 + 56);
          uint64_t v102 = 8 * v142;
          v33[3] = *(char **)(v101 + v102);
          *(void *)(v101 + v102) = v33;
          ++*(_DWORD *)(v5 + 48);
        }
      }
      goto LABEL_190;
    }
    BOOL v54 = v48 == 18 || v48 == 23;
    if (v7 == 18 && v54) {
      goto LABEL_189;
    }
    BOOL v55 = v7 == 9 || v7 == 23;
    if (v55 && v48 == 9) {
      goto LABEL_189;
    }
    if (v7 != 9 || v48 != 18)
    {
      int v137 = *(_DWORD *)(a1 + 88);
      __src = v33[2];
      uint64_t v67 = *((int *)v33 + 2);
      if (!sqlite3_initialize())
      {
        uint64_t v68 = sub_1B0C7FC94(v47 + v67 + 32);
        if (v68)
        {
          uint64_t v50 = (_DWORD *)v68;
          *(_OWORD *)uint64_t v68 = 0u;
          *(_OWORD *)(v68 + 16) = 0u;
          BOOL v69 = v143;
          int v70 = v137;
          if (v143) {
            BOOL v69 = *((unsigned char *)v33 + 1) != 0;
          }
          long long v71 = v46;
          *(unsigned char *)(v68 + 1) = v69;
          uint64_t v72 = v68 + 32;
          *(void *)(v68 + 16) = v68 + 32;
          size_t v147 = v68 + 32;
          if (v48 == 18)
          {
            *(unsigned char *)uint64_t v68 = 18;
            if (v137)
            {
              a2 = v140;
            }
            else
            {
              int v123 = *(_DWORD *)(v5 + 16);
              a2 = v140;
              if (v123 >= 1)
              {
                do
                {
                  while (1)
                  {
                    uint64_t v125 = (unsigned __int8 *)(v71 + 1);
                    int v124 = *v71;
                    if ((v124 - 3) <= 1) {
                      break;
                    }
                    if ((v124 - 1) >= 2) {
                      ++v71;
                    }
                    else {
                      v71 += 9;
                    }
                    if (!--v123) {
                      goto LABEL_128;
                    }
                  }
                  int v126 = *v125;
                  if ((v126 & 0x80) != 0)
                  {
                    int v128 = v71[2];
                    if (v71[2] < 0)
                    {
                      int v129 = v71[3];
                      if (v129 < 0)
                      {
                        unint64_t v148 = 0;
                        unsigned int v130 = sub_1B0CAD43C(v71 + 1, &v148);
                        if (HIDWORD(v148)) {
                          int v126 = -1;
                        }
                        else {
                          int v126 = v148;
                        }
                        uint64_t v127 = v130;
                      }
                      else
                      {
                        int v126 = v129 & 0x7F | (v126 << 14) & 0x1FC07F | ((v128 & 0x7F) << 7);
                        uint64_t v127 = 3;
                      }
                    }
                    else
                    {
                      int v126 = ((v126 & 0x7F) << 7) | v128;
                      uint64_t v127 = 2;
                    }
                  }
                  else
                  {
                    uint64_t v127 = 1;
                  }
                  long long v71 = (char *)&v125[v127 + v126];
                  --v123;
                }
                while (v123);
              }
            }
LABEL_128:
            sub_1B0DDAC7C((void **)&v147, *(_DWORD *)(v5 + 16), __src, v71);
            goto LABEL_264;
          }
          if (v48 == 9)
          {
            *(unsigned char *)uint64_t v68 = 23;
            if (!v137)
            {
              a2 = v140;
              if (sub_1B0DDAE8C((unsigned char **)&v147, v5, 0, __src, 0, v46, 0)) {
                goto LABEL_264;
              }
LABEL_236:
              uint64_t v122 = &off_1EB21C9E8;
              if (dword_1EB21C9C0)
              {
                if ((void)xmmword_1EB2201B0) {
                  xmmword_1EB21CA40(xmmword_1EB2201B0);
                }
                qword_1EB220108[0] -= (int)off_1EB21C9F8(v50);
                --qword_1EB220150;
                off_1EB21C9E8(v50);
                uint64_t v50 = (_DWORD *)xmmword_1EB2201B0;
                if ((void)xmmword_1EB2201B0)
                {
                  uint64_t v122 = &xmmword_1EB21CA50;
                  goto LABEL_241;
                }
              }
              else
              {
LABEL_241:
                (*v122)(v50);
                uint64_t v50 = 0;
              }
LABEL_265:
              BOOL v131 = (void (**)(unsigned __int8 *))&off_1EB21C9E8;
              if (dword_1EB21C9C0)
              {
                if ((void)xmmword_1EB2201B0) {
                  xmmword_1EB21CA40(xmmword_1EB2201B0);
                }
                qword_1EB220108[0] -= (int)off_1EB21C9F8(v33);
                --qword_1EB220150;
                off_1EB21C9E8(v33);
                int v33 = (char **)xmmword_1EB2201B0;
                if (!(void)xmmword_1EB2201B0) {
                  goto LABEL_188;
                }
                BOOL v131 = (void (**)(unsigned __int8 *))&xmmword_1EB21CA50;
              }
              (*v131)((unsigned __int8 *)v33);
              goto LABEL_188;
            }
            goto LABEL_262;
          }
          if (v7 == 23)
          {
            uint64_t v103 = v46;
            long long v104 = __src;
            int v105 = __src;
            a2 = v140;
            if (!v137)
            {
              int v106 = *(_DWORD *)(v5 + 16);
              uint64_t v103 = v46;
              int v105 = __src;
              if (v106 >= 1)
              {
                int v105 = __src;
                do
                {
                  while (1)
                  {
                    unsigned int v108 = (unsigned __int8 *)(v105 + 1);
                    int v107 = *v105;
                    if ((v107 - 3) <= 1) {
                      break;
                    }
                    if ((v107 - 1) >= 2) {
                      ++v105;
                    }
                    else {
                      v105 += 9;
                    }
                    if (!--v106) {
                      goto LABEL_216;
                    }
                  }
                  int v109 = *v108;
                  if ((v109 & 0x80) != 0)
                  {
                    int v111 = v105[2];
                    if (v105[2] < 0)
                    {
                      int v112 = v105[3];
                      if (v112 < 0)
                      {
                        unint64_t v148 = 0;
                        unsigned int v113 = sub_1B0CAD43C(v105 + 1, &v148);
                        long long v71 = v46;
                        if (HIDWORD(v148)) {
                          int v109 = -1;
                        }
                        else {
                          int v109 = v148;
                        }
                        uint64_t v110 = v113;
                      }
                      else
                      {
                        int v109 = v112 & 0x7F | (v109 << 14) & 0x1FC07F | ((v111 & 0x7F) << 7);
                        uint64_t v110 = 3;
                      }
                    }
                    else
                    {
                      int v109 = ((v109 & 0x7F) << 7) | v111;
                      uint64_t v110 = 2;
                    }
                  }
                  else
                  {
                    uint64_t v110 = 1;
                  }
                  int v105 = (char *)&v108[v110 + v109];
                  --v106;
                }
                while (v106);
LABEL_216:
                int v114 = *(_DWORD *)(v5 + 16);
                uint64_t v103 = v71;
                if (v114 >= 1)
                {
                  do
                  {
                    while (1)
                    {
                      long long v116 = (unsigned __int8 *)(v103 + 1);
                      int v115 = *v103;
                      if ((v115 - 3) <= 1) {
                        break;
                      }
                      if ((v115 - 1) >= 2) {
                        ++v103;
                      }
                      else {
                        v103 += 9;
                      }
                      if (!--v114) {
                        goto LABEL_234;
                      }
                    }
                    int v117 = *v116;
                    if ((v117 & 0x80) != 0)
                    {
                      int v119 = v103[2];
                      if (v103[2] < 0)
                      {
                        int v120 = v103[3];
                        if (v120 < 0)
                        {
                          unint64_t v148 = 0;
                          unsigned int v121 = sub_1B0CAD43C(v103 + 1, &v148);
                          long long v71 = v46;
                          if (HIDWORD(v148)) {
                            int v117 = -1;
                          }
                          else {
                            int v117 = v148;
                          }
                          uint64_t v118 = v121;
                        }
                        else
                        {
                          int v117 = v120 & 0x7F | (v117 << 14) & 0x1FC07F | ((v119 & 0x7F) << 7);
                          uint64_t v118 = 3;
                        }
                      }
                      else
                      {
                        int v117 = ((v117 & 0x7F) << 7) | v119;
                        uint64_t v118 = 2;
                      }
                    }
                    else
                    {
                      uint64_t v118 = 1;
                    }
                    uint64_t v103 = (char *)&v116[v118 + v117];
                    --v114;
                  }
                  while (v114);
                }
LABEL_234:
                long long v104 = __src;
                int v70 = v137;
              }
            }
            *(unsigned char *)uint64_t v50 = 23;
            if (!sub_1B0DDAE8C((unsigned char **)&v147, v5, v70, v71, v104, v105, v103)) {
              goto LABEL_236;
            }
LABEL_264:
            v50[2] = v147 - v50[4];
            goto LABEL_265;
          }
          *(unsigned char *)uint64_t v68 = 9;
          if (v137)
          {
LABEL_262:
            memcpy((void *)(v68 + 32), v46, v47);
            size_t v147 = v72 + v47;
          }
          else
          {
            sub_1B0DDAC7C((void **)&v147, *(_DWORD *)(v5 + 16), v46, __src);
          }
          a2 = v140;
          goto LABEL_264;
        }
      }
      unint64_t v133 = (void (**)(unsigned __int8 *))&off_1EB21C9E8;
      if (dword_1EB21C9C0)
      {
        if ((void)xmmword_1EB2201B0) {
          xmmword_1EB21CA40(xmmword_1EB2201B0);
        }
        qword_1EB220108[0] -= (int)off_1EB21C9F8(v33);
        --qword_1EB220150;
        off_1EB21C9E8(v33);
        int v33 = (char **)xmmword_1EB2201B0;
        if ((void)xmmword_1EB2201B0)
        {
          unint64_t v133 = (void (**)(unsigned __int8 *))&xmmword_1EB21CA50;
          goto LABEL_279;
        }
      }
      else
      {
LABEL_279:
        (*v133)((unsigned __int8 *)v33);
      }
      return 7;
    }
    uint64_t v56 = (void (**)(unsigned __int8 *))&off_1EB21C9E8;
    if (dword_1EB21C9C0)
    {
      if ((void)xmmword_1EB2201B0) {
        xmmword_1EB21CA40(xmmword_1EB2201B0);
      }
      qword_1EB220108[0] -= (int)off_1EB21C9F8(v33);
      --qword_1EB220150;
      off_1EB21C9E8(v33);
      int v33 = (char **)xmmword_1EB2201B0;
      if (!(void)xmmword_1EB2201B0) {
        goto LABEL_190;
      }
      uint64_t v56 = (void (**)(unsigned __int8 *))&xmmword_1EB21CA50;
    }
    (*v56)((unsigned __int8 *)v33);
LABEL_190:
    if (sub_1B0CFE634(a1, &__s2, &v145, 0) != 100) {
      return *(unsigned int *)(a1 + 100);
    }
  }
}

uint64_t sqlite3changegroup_output(uint64_t a1, _DWORD *a2, uint64_t *a3)
{
  unsigned int v36 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3)
  {
    if (a3)
    {
      uint64_t v28 = 0;
      goto LABEL_55;
    }
    return 0;
  }
  BOOL v31 = a2;
  int v32 = a3;
  do
  {
    if (*(_DWORD *)(v3 + 48))
    {
      sub_1B0DD6620((uint64_t)&v34, *(_DWORD *)(a1 + 4), v3, &v36);
      int v4 = *(_DWORD *)(v3 + 52);
      uint64_t v5 = v36;
      if (v4 >= 1)
      {
        uint64_t v6 = 0;
        uint64_t v7 = v34;
        while (1)
        {
          int v8 = *(char **)(*(void *)(v3 + 56) + 8 * v6);
          if (v8) {
            break;
          }
LABEL_7:
          unsigned int v36 = v5;
          uint64_t v34 = v7;
          if (++v6 >= v4) {
            goto LABEL_48;
          }
        }
        while (1)
        {
          if (v5) {
            goto LABEL_12;
          }
          char v9 = *v8;
          int v10 = HIDWORD(v35);
          uint64_t v11 = (int)v35;
          if ((int)v35 >= SHIDWORD(v35))
          {
            if (!HIDWORD(v35)) {
              int v10 = 128;
            }
            uint64_t v22 = v10;
            do
            {
              uint64_t v23 = v22;
              v22 *= 2;
            }
            while (v22 <= (int)v35);
            if (v23 > 1073741695)
            {
              uint64_t v22 = 2147483391;
              if ((int)v35 > 2147483390) {
                goto LABEL_11;
              }
            }
            if (sqlite3_initialize()) {
              goto LABEL_11;
            }
            uint64_t v27 = sub_1B0C8E1B8(v7, v22);
            if (!v27) {
              goto LABEL_11;
            }
            HIDWORD(v35) = v22;
            uint64_t v7 = v27;
          }
          uint64_t v12 = v11 + 1;
          LODWORD(v35) = v11 + 1;
          *(unsigned char *)(v7 + v11) = v9;
          char v13 = v8[1];
          int v14 = HIDWORD(v35);
          if ((int)v11 + 1 < SHIDWORD(v35)) {
            goto LABEL_16;
          }
          if (!HIDWORD(v35)) {
            int v14 = 128;
          }
          uint64_t v24 = v14;
          do
          {
            uint64_t v25 = v24;
            v24 *= 2;
          }
          while (v24 <= v12);
          if (v25 <= 1073741695 || (uint64_t v24 = 2147483391, (int)v11 <= 2147483389))
          {
            if (!sqlite3_initialize())
            {
              uint64_t v26 = sub_1B0C8E1B8(v7, v24);
              if (v26)
              {
                HIDWORD(v35) = v24;
                uint64_t v7 = v26;
LABEL_16:
                LODWORD(v35) = v11 + 2;
                *(unsigned char *)(v7 + v12) = v13;
                size_t v15 = *((unsigned int *)v8 + 2);
                if ((int)v15 < 1)
                {
                  uint64_t v5 = 0;
                  goto LABEL_12;
                }
                uint64_t v16 = (int)v35;
                uint64_t v17 = (int)v35 + v15;
                int v18 = (const void *)*((void *)v8 + 2);
                if (v17 <= SHIDWORD(v35)) {
                  goto LABEL_27;
                }
                if (HIDWORD(v35)) {
                  uint64_t v19 = SHIDWORD(v35);
                }
                else {
                  uint64_t v19 = 128;
                }
                do
                {
                  uint64_t v20 = v19;
                  v19 *= 2;
                }
                while (v19 < v17);
                if (v20 <= 1073741695 || (uint64_t v19 = 2147483391, v17 <= 2147483391))
                {
                  if (!sqlite3_initialize())
                  {
                    uint64_t v21 = sub_1B0C8E1B8(v7, v19);
                    if (v21)
                    {
                      HIDWORD(v35) = v19;
                      uint64_t v7 = v21;
LABEL_27:
                      memcpy((void *)(v7 + v16), v18, v15);
                      uint64_t v5 = 0;
                      LODWORD(v35) = v16 + v15;
                      goto LABEL_12;
                    }
                  }
                }
              }
            }
          }
LABEL_11:
          uint64_t v5 = 7;
LABEL_12:
          int v8 = (char *)*((void *)v8 + 3);
          if (!v8)
          {
            int v4 = *(_DWORD *)(v3 + 52);
            goto LABEL_7;
          }
        }
      }
    }
    else
    {
      uint64_t v5 = 0;
    }
LABEL_48:
    if (v5) {
      break;
    }
    uint64_t v3 = *(void *)v3;
  }
  while (v3);
  uint64_t v28 = v34;
  a3 = v32;
  if (!v32 || v5)
  {
    if (!v34) {
      return v5;
    }
    uint64_t v29 = &off_1EB21C9E8;
    if (dword_1EB21C9C0)
    {
      if ((void)xmmword_1EB2201B0) {
        xmmword_1EB21CA40(xmmword_1EB2201B0);
      }
      qword_1EB220108[0] -= (int)off_1EB21C9F8(v28);
      --qword_1EB220150;
      off_1EB21C9E8(v28);
      uint64_t v28 = xmmword_1EB2201B0;
      if (!(void)xmmword_1EB2201B0) {
        return v5;
      }
      uint64_t v29 = &xmmword_1EB21CA50;
    }
    (*v29)(v28);
    return v5;
  }
  a2 = v31;
LABEL_55:
  *a3 = v28;
  uint64_t v5 = 0;
  if (a2) {
    *a2 = v35;
  }
  return v5;
}

uint64_t sqlite3changegroup_add_strm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (sqlite3_initialize())
  {
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v8 = sub_1B0C7FC94(152);
    uint64_t v6 = v8;
    if (v8)
    {
      *(_OWORD *)(v8 + 64) = 0u;
      *(_OWORD *)(v8 + 80) = 0u;
      *(void *)(v8 + 144) = 0;
      *(_OWORD *)(v8 + 112) = 0u;
      *(_OWORD *)(v8 + 128) = 0u;
      *(_OWORD *)(v8 + 96) = 0u;
      *(_OWORD *)(v8 + 32) = 0u;
      *(_OWORD *)(v8 + 48) = 0u;
      *(_OWORD *)uint64_t v8 = 0u;
      *(_OWORD *)(v8 + 16) = 0u;
      *(void *)(v8 + 16) = 0;
      *(_DWORD *)(v8 + 24) = 0;
      *(void *)(v8 + 48) = a2;
      *(void *)(v8 + 56) = a3;
      *(_DWORD *)(v8 + 64) = a2 == 0;
      *(_DWORD *)(v8 + 92) = 0;
      *(_DWORD *)(v8 + 96) = 0;
      uint64_t v7 = sub_1B0D00D00(v8, a1, 0);
      goto LABEL_6;
    }
  }
  uint64_t v7 = 7;
LABEL_6:
  sqlite3changeset_finalize(v6);
  return v7;
}

uint64_t sqlite3changegroup_output_strm(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  unsigned int v37 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    uint64_t v4 = 0;
    while (1)
    {
      if (*(_DWORD *)(v3 + 48))
      {
        sub_1B0DD6620((uint64_t)&v35, *(_DWORD *)(a1 + 4), v3, &v37);
        int v5 = *(_DWORD *)(v3 + 52);
        uint64_t v4 = v37;
        if (v5 >= 1)
        {
          uint64_t v6 = 0;
          uint64_t v7 = v35;
          while (1)
          {
            char v9 = *(char **)(*(void *)(v3 + 56) + 8 * v6);
            if (v9) {
              break;
            }
LABEL_7:
            unsigned int v37 = v4;
            uint64_t v35 = v7;
            ++v6;
            int v8 = v4;
            if (v6 >= v5) {
              goto LABEL_51;
            }
          }
          while (2)
          {
            if (v4) {
              goto LABEL_12;
            }
            char v10 = *v9;
            int v11 = HIDWORD(v36);
            uint64_t v12 = (int)v36;
            if ((int)v36 < SHIDWORD(v36)) {
              goto LABEL_15;
            }
            if (!HIDWORD(v36)) {
              int v11 = 128;
            }
            uint64_t v23 = v11;
            do
            {
              uint64_t v24 = v23;
              v23 *= 2;
            }
            while (v23 <= (int)v36);
            if (v24 <= 1073741695 || (uint64_t v23 = 2147483391, (int)v36 <= 2147483390))
            {
              if (!sqlite3_initialize())
              {
                uint64_t v28 = sub_1B0C8E1B8(v7, v23);
                if (v28)
                {
                  HIDWORD(v36) = v23;
                  uint64_t v7 = v28;
LABEL_15:
                  uint64_t v13 = v12 + 1;
                  LODWORD(v36) = v12 + 1;
                  *(unsigned char *)(v7 + v12) = v10;
                  char v14 = v9[1];
                  int v15 = HIDWORD(v36);
                  if ((int)v12 + 1 >= SHIDWORD(v36))
                  {
                    if (!HIDWORD(v36)) {
                      int v15 = 128;
                    }
                    uint64_t v25 = v15;
                    do
                    {
                      uint64_t v26 = v25;
                      v25 *= 2;
                    }
                    while (v25 <= v13);
                    if (v26 <= 1073741695 || (uint64_t v25 = 2147483391, (int)v12 <= 2147483389))
                    {
                      if (!sqlite3_initialize())
                      {
                        uint64_t v27 = sub_1B0C8E1B8(v7, v25);
                        if (v27)
                        {
                          HIDWORD(v36) = v25;
                          uint64_t v7 = v27;
                          goto LABEL_16;
                        }
                      }
                    }
                  }
                  else
                  {
LABEL_16:
                    LODWORD(v36) = v12 + 2;
                    *(unsigned char *)(v7 + v13) = v14;
                    size_t v16 = *((unsigned int *)v9 + 2);
                    if ((int)v16 < 1) {
                      goto LABEL_28;
                    }
                    uint64_t v17 = (int)v36;
                    uint64_t v18 = (int)v36 + v16;
                    uint64_t v19 = (const void *)*((void *)v9 + 2);
                    if (v18 <= SHIDWORD(v36)) {
                      goto LABEL_27;
                    }
                    if (HIDWORD(v36)) {
                      uint64_t v20 = SHIDWORD(v36);
                    }
                    else {
                      uint64_t v20 = 128;
                    }
                    do
                    {
                      uint64_t v21 = v20;
                      v20 *= 2;
                    }
                    while (v20 < v18);
                    if (v21 <= 1073741695 || (uint64_t v20 = 2147483391, v18 <= 2147483391))
                    {
                      if (!sqlite3_initialize())
                      {
                        uint64_t v22 = sub_1B0C8E1B8(v7, v20);
                        if (v22)
                        {
                          HIDWORD(v36) = v20;
                          uint64_t v7 = v22;
LABEL_27:
                          memcpy((void *)(v7 + v17), v19, v16);
                          LODWORD(v36) = v17 + v16;
LABEL_28:
                          if (a2 && (int)v36 >= dword_1E9B51ED8)
                          {
                            uint64_t v4 = a2(a3, v7);
                            LODWORD(v36) = 0;
                          }
                          else
                          {
                            uint64_t v4 = 0;
                          }
LABEL_12:
                          char v9 = (char *)*((void *)v9 + 3);
                          if (!v9)
                          {
                            int v5 = *(_DWORD *)(v3 + 52);
                            goto LABEL_7;
                          }
                          continue;
                        }
                      }
                    }
                  }
                }
              }
            }
            break;
          }
          uint64_t v4 = 7;
          goto LABEL_12;
        }
        int v8 = v37;
        if (v37) {
          goto LABEL_55;
        }
      }
      else
      {
        int v8 = 0;
LABEL_51:
        if (v8)
        {
LABEL_55:
          if (!v8 && a2) {
            goto LABEL_57;
          }
LABEL_60:
          uint64_t v29 = v35;
          goto LABEL_61;
        }
      }
      uint64_t v3 = *(void *)v3;
      if (!v3) {
        goto LABEL_55;
      }
    }
  }
  uint64_t v4 = 0;
  if (!a2) {
    goto LABEL_60;
  }
LABEL_57:
  uint64_t v29 = v35;
  if ((int)v36 >= 1) {
    uint64_t v4 = a2(a3, v35);
  }
LABEL_61:
  if (v29)
  {
    BOOL v30 = &off_1EB21C9E8;
    if (!dword_1EB21C9C0)
    {
LABEL_67:
      (*v30)(v29);
      return v4;
    }
    if ((void)xmmword_1EB2201B0) {
      xmmword_1EB21CA40(xmmword_1EB2201B0);
    }
    qword_1EB220108[0] -= (int)off_1EB21C9F8(v29);
    --qword_1EB220150;
    off_1EB21C9E8(v29);
    uint64_t v29 = xmmword_1EB2201B0;
    if ((void)xmmword_1EB2201B0)
    {
      BOOL v30 = &xmmword_1EB21CA50;
      goto LABEL_67;
    }
  }
  return v4;
}

uint64_t sqlite3changegroup_delete(uint64_t result)
{
  if (!result) {
    return result;
  }
  uint64_t v1 = result;
  sub_1B0CFD1A8(0, *(uint64_t **)(result + 8));
  uint64_t v2 = &off_1EB21C9E8;
  if (!dword_1EB21C9C0) {
    goto LABEL_7;
  }
  if ((void)xmmword_1EB2201B0) {
    xmmword_1EB21CA40(xmmword_1EB2201B0);
  }
  qword_1EB220108[0] -= (int)off_1EB21C9F8(v1);
  --qword_1EB220150;
  uint64_t result = off_1EB21C9E8(v1);
  uint64_t v1 = xmmword_1EB2201B0;
  if ((void)xmmword_1EB2201B0)
  {
    uint64_t v2 = &xmmword_1EB21CA50;
LABEL_7:
    uint64_t v3 = *v2;
    return v3(v1);
  }
  return result;
}

uint64_t sqlite3changeset_concat(int a1, uint64_t a2, int a3, uint64_t a4, _DWORD *a5, uint64_t *a6)
{
  if (sqlite3_initialize()) {
    return 7;
  }
  char v14 = (void *)sub_1B0C7FC94(16);
  if (!v14) {
    return 7;
  }
  uint64_t v15 = (uint64_t)v14;
  *char v14 = 0;
  v14[1] = 0;
  if (!sqlite3_initialize())
  {
    uint64_t v17 = sub_1B0C7FC94(152);
    if (v17)
    {
      uint64_t v18 = v17;
      *(_OWORD *)(v17 + 64) = 0u;
      *(_OWORD *)(v17 + 80) = 0u;
      *(void *)(v17 + 144) = 0;
      *(_OWORD *)(v17 + 112) = 0u;
      *(_OWORD *)(v17 + 128) = 0u;
      *(_OWORD *)(v17 + 96) = 0u;
      *(_OWORD *)(v17 + 32) = 0u;
      *(_OWORD *)(v17 + 48) = 0u;
      *(_OWORD *)uint64_t v17 = 0u;
      *(_OWORD *)(v17 + 16) = 0u;
      *(void *)(v17 + 16) = a2;
      *(_DWORD *)(v17 + 24) = a1;
      *(void *)(v17 + 48) = 0;
      *(void *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 1;
      *(_DWORD *)(v17 + 92) = 0;
      *(_DWORD *)(v17 + 96) = 0;
      uint64_t v12 = sub_1B0D00D00(v17, v15, 0);
      sqlite3changeset_finalize(v18);
      if (v12) {
        goto LABEL_7;
      }
      if (!sqlite3_initialize())
      {
        uint64_t v19 = sub_1B0C7FC94(152);
        if (v19)
        {
          uint64_t v20 = v19;
          *(_OWORD *)(v19 + 64) = 0u;
          *(_OWORD *)(v19 + 80) = 0u;
          *(void *)(v19 + 144) = 0;
          *(_OWORD *)(v19 + 112) = 0u;
          *(_OWORD *)(v19 + 128) = 0u;
          *(_OWORD *)(v19 + 96) = 0u;
          *(_OWORD *)(v19 + 32) = 0u;
          *(_OWORD *)(v19 + 48) = 0u;
          *(_OWORD *)uint64_t v19 = 0u;
          *(_OWORD *)(v19 + 16) = 0u;
          *(void *)(v19 + 16) = a4;
          *(_DWORD *)(v19 + 24) = a3;
          *(void *)(v19 + 48) = 0;
          *(void *)(v19 + 56) = 0;
          *(_DWORD *)(v19 + 64) = 1;
          *(_DWORD *)(v19 + 92) = 0;
          *(_DWORD *)(v19 + 96) = 0;
          uint64_t v12 = sub_1B0D00D00(v19, v15, 0);
          sqlite3changeset_finalize(v20);
          if (!v12) {
            uint64_t v12 = sqlite3changegroup_output(v15, a5, a6);
          }
          goto LABEL_7;
        }
      }
    }
  }
  sqlite3changeset_finalize(0);
  uint64_t v12 = 7;
LABEL_7:
  sub_1B0CFD1A8(0, *(uint64_t **)(v15 + 8));
  size_t v16 = (void (**)(uint64_t))&off_1EB21C9E8;
  if (!dword_1EB21C9C0)
  {
LABEL_12:
    (*v16)(v15);
    return v12;
  }
  if ((void)xmmword_1EB2201B0) {
    xmmword_1EB21CA40(xmmword_1EB2201B0);
  }
  qword_1EB220108[0] -= (int)off_1EB21C9F8(v15);
  --qword_1EB220150;
  off_1EB21C9E8(v15);
  uint64_t v15 = xmmword_1EB2201B0;
  if ((void)xmmword_1EB2201B0)
  {
    size_t v16 = (void (**)(uint64_t))&xmmword_1EB21CA50;
    goto LABEL_12;
  }
  return v12;
}

uint64_t sqlite3changeset_concat_strm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t), uint64_t a6)
{
  if (sqlite3_initialize()) {
    return 7;
  }
  char v14 = (void *)sub_1B0C7FC94(16);
  if (!v14) {
    return 7;
  }
  uint64_t v15 = (uint64_t)v14;
  *char v14 = 0;
  v14[1] = 0;
  if (!sqlite3_initialize())
  {
    uint64_t v17 = sub_1B0C7FC94(152);
    if (v17)
    {
      uint64_t v18 = v17;
      *(_OWORD *)(v17 + 64) = 0u;
      *(_OWORD *)(v17 + 80) = 0u;
      *(void *)(v17 + 144) = 0;
      *(_OWORD *)(v17 + 112) = 0u;
      *(_OWORD *)(v17 + 128) = 0u;
      *(_OWORD *)(v17 + 96) = 0u;
      *(_OWORD *)(v17 + 32) = 0u;
      *(_OWORD *)(v17 + 48) = 0u;
      *(_OWORD *)uint64_t v17 = 0u;
      *(_OWORD *)(v17 + 16) = 0u;
      *(void *)(v17 + 16) = 0;
      *(_DWORD *)(v17 + 24) = 0;
      *(void *)(v17 + 48) = a1;
      *(void *)(v17 + 56) = a2;
      *(_DWORD *)(v17 + 64) = a1 == 0;
      *(_DWORD *)(v17 + 92) = 0;
      *(_DWORD *)(v17 + 96) = 0;
      uint64_t v12 = sub_1B0D00D00(v17, v15, 0);
      sqlite3changeset_finalize(v18);
      if (v12) {
        goto LABEL_7;
      }
      if (!sqlite3_initialize())
      {
        uint64_t v19 = sub_1B0C7FC94(152);
        if (v19)
        {
          uint64_t v20 = v19;
          *(_OWORD *)(v19 + 64) = 0u;
          *(_OWORD *)(v19 + 80) = 0u;
          *(void *)(v19 + 144) = 0;
          *(_OWORD *)(v19 + 112) = 0u;
          *(_OWORD *)(v19 + 128) = 0u;
          *(_OWORD *)(v19 + 96) = 0u;
          *(_OWORD *)(v19 + 32) = 0u;
          *(_OWORD *)(v19 + 48) = 0u;
          *(_OWORD *)uint64_t v19 = 0u;
          *(_OWORD *)(v19 + 16) = 0u;
          *(void *)(v19 + 16) = 0;
          *(_DWORD *)(v19 + 24) = 0;
          *(void *)(v19 + 48) = a3;
          *(void *)(v19 + 56) = a4;
          *(_DWORD *)(v19 + 64) = a3 == 0;
          *(_DWORD *)(v19 + 92) = 0;
          *(_DWORD *)(v19 + 96) = 0;
          uint64_t v12 = sub_1B0D00D00(v19, v15, 0);
          sqlite3changeset_finalize(v20);
          if (!v12) {
            uint64_t v12 = sqlite3changegroup_output_strm(v15, a5, a6);
          }
          goto LABEL_7;
        }
      }
    }
  }
  sqlite3changeset_finalize(0);
  uint64_t v12 = 7;
LABEL_7:
  sub_1B0CFD1A8(0, *(uint64_t **)(v15 + 8));
  size_t v16 = (void (**)(uint64_t))&off_1EB21C9E8;
  if (!dword_1EB21C9C0)
  {
LABEL_12:
    (*v16)(v15);
    return v12;
  }
  if ((void)xmmword_1EB2201B0) {
    xmmword_1EB21CA40(xmmword_1EB2201B0);
  }
  qword_1EB220108[0] -= (int)off_1EB21C9F8(v15);
  --qword_1EB220150;
  off_1EB21C9E8(v15);
  uint64_t v15 = xmmword_1EB2201B0;
  if ((void)xmmword_1EB2201B0)
  {
    size_t v16 = (void (**)(uint64_t))&xmmword_1EB21CA50;
    goto LABEL_12;
  }
  return v12;
}

uint64_t sqlite3rebaser_create(void *a1)
{
  if (sqlite3_initialize())
  {
    uint64_t v2 = 0;
  }
  else
  {
    uint64_t v2 = (void *)sub_1B0C7FC94(16);
    if (v2)
    {
      uint64_t v3 = 0;
      *uint64_t v2 = 0;
      v2[1] = 0;
      goto LABEL_6;
    }
  }
  uint64_t v3 = 7;
LABEL_6:
  *a1 = v2;
  return v3;
}

uint64_t sqlite3rebaser_configure(uint64_t a1, int a2, uint64_t a3)
{
  if (sqlite3_initialize())
  {
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v8 = sub_1B0C7FC94(152);
    uint64_t v6 = v8;
    if (v8)
    {
      *(_OWORD *)(v8 + 64) = 0u;
      *(_OWORD *)(v8 + 80) = 0u;
      *(void *)(v8 + 144) = 0;
      *(_OWORD *)(v8 + 112) = 0u;
      *(_OWORD *)(v8 + 128) = 0u;
      *(_OWORD *)(v8 + 96) = 0u;
      *(_OWORD *)(v8 + 32) = 0u;
      *(_OWORD *)(v8 + 48) = 0u;
      *(_OWORD *)uint64_t v8 = 0u;
      *(_OWORD *)(v8 + 16) = 0u;
      *(void *)(v8 + 16) = a3;
      *(_DWORD *)(v8 + 24) = a2;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 1;
      *(_DWORD *)(v8 + 92) = 0;
      *(_DWORD *)(v8 + 96) = 0;
      uint64_t v7 = sub_1B0D00D00(v8, a1, 1);
      goto LABEL_6;
    }
  }
  uint64_t v7 = 7;
LABEL_6:
  sqlite3changeset_finalize(v6);
  return v7;
}

uint64_t sqlite3rebaser_rebase(uint64_t a1, int a2, uint64_t a3, _DWORD *a4, uint64_t *a5)
{
  if (sqlite3_initialize()) {
    return 7;
  }
  uint64_t v11 = sub_1B0C7FC94(152);
  if (!v11) {
    return 7;
  }
  uint64_t v12 = v11;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(void *)(v11 + 144) = 0;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)uint64_t v11 = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  *(void *)(v11 + 16) = a3;
  *(_DWORD *)(v11 + 24) = a2;
  *(void *)(v11 + 48) = 0;
  *(void *)(v11 + 56) = 0;
  *(_DWORD *)(v11 + 64) = 1;
  *(_DWORD *)(v11 + 92) = 0;
  *(_DWORD *)(v11 + 96) = 0;
  uint64_t v13 = sub_1B0D029E0(a1, v11, 0, 0, a4, a5);
  sqlite3changeset_finalize(v12);
  return v13;
}

uint64_t sub_1B0D029E0(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t a4, _DWORD *a5, uint64_t *a6)
{
  uint64_t v8 = 0;
  unsigned int v207 = 0;
  uint64_t v205 = 0;
  __s1 = 0;
  uint64_t v9 = a1 + 8;
  uint64_t v203 = 0;
  uint64_t v204 = 0;
  uint64_t v201 = a1 + 8;
  while (2)
  {
    if (sub_1B0CFE634(a2, &__s1, (int *)&v205 + 1, &v205) != 100)
    {
      if (a3)
      {
        uint64_t v190 = v203;
        if ((int)v204 >= 1)
        {
          unsigned int v207 = a3(a4, v203);
          uint64_t v190 = v203;
        }
      }
      else
      {
        uint64_t v190 = v203;
        if (a6)
        {
          *a6 = v203;
          *a5 = v204;
          return v207;
        }
      }
      if (!v190) {
        return v207;
      }
      int v193 = &off_1EB21C9E8;
      if (dword_1EB21C9C0)
      {
        if ((void)xmmword_1EB2201B0) {
          xmmword_1EB21CA40(xmmword_1EB2201B0);
        }
        qword_1EB220108[0] -= (int)off_1EB21C9F8(v190);
        --qword_1EB220150;
        off_1EB21C9E8(v190);
        uint64_t v190 = xmmword_1EB2201B0;
        if (!(void)xmmword_1EB2201B0) {
          return v207;
        }
        int v193 = &xmmword_1EB21CA50;
      }
      (*v193)(v190);
      return v207;
    }
    if (v205)
    {
      uint64_t v11 = *(void *)(a2 + 112);
      if (v11) {
        int v12 = -1;
      }
      else {
        int v12 = 0;
      }
      uint64_t v8 = v9;
      do
      {
        uint64_t v8 = *(void *)v8;
        if (!v8) {
          break;
        }
        uint64_t v13 = *(unsigned char **)(v8 + 8);
        if (v13) {
          int v14 = 1;
        }
        else {
          int v14 = v12;
        }
        if (v13) {
          BOOL v15 = v11 == 0;
        }
        else {
          BOOL v15 = 1;
        }
        if (!v15)
        {
          for (uint64_t i = *(unsigned __int8 **)(a2 + 112); ; ++i)
          {
            uint64_t v17 = *v13;
            uint64_t v18 = *i;
            if (v17 == v18)
            {
              if (!*v13) {
                goto LABEL_25;
              }
            }
            else if (byte_1B0DE1758[v17] != byte_1B0DE1758[v18])
            {
              int v14 = 1;
              break;
            }
            ++v13;
          }
        }
      }
      while (v14);
LABEL_25:
      LODWORD(v205) = 0;
      if (*(_DWORD *)(a2 + 88))
      {
        unsigned int v207 = 1;
      }
      else
      {
        int v20 = v204;
        int v21 = HIDWORD(v204);
        uint64_t v22 = (int)v204;
        if ((int)v204 >= SHIDWORD(v204))
        {
          if (!HIDWORD(v204)) {
            int v21 = 128;
          }
          uint64_t v24 = v21;
          do
          {
            uint64_t v25 = v24;
            v24 *= 2;
          }
          while (v24 <= (int)v204);
          if (v25 > 1073741695 && (uint64_t v24 = 2147483391, (int)v204 > 2147483390)
            || (uint64_t v26 = v203, sqlite3_initialize())
            || (uint64_t v23 = sub_1B0C8E1B8(v26, v24)) == 0)
          {
            unsigned int v207 = 7;
            goto LABEL_39;
          }
          uint64_t v203 = v23;
          HIDWORD(v204) = v24;
          int v20 = v204;
          uint64_t v22 = (int)v204;
        }
        else
        {
          uint64_t v23 = v203;
        }
        LODWORD(v204) = v20 + 1;
        *(unsigned char *)(v23 + v22) = 84;
      }
LABEL_39:
      sub_1B0DD7990((uint64_t)&v203, *(_DWORD *)(a2 + 120), &v207);
      size_t v27 = *(unsigned int *)(a2 + 120);
      int v19 = v207;
      if ((int)v27 >= 1 && !v207)
      {
        uint64_t v28 = *(const void **)(a2 + 136);
        uint64_t v29 = (int)v204;
        uint64_t v30 = (int)v204 + v27;
        if (v30 <= SHIDWORD(v204))
        {
          uint64_t v34 = v203;
        }
        else
        {
          if (HIDWORD(v204)) {
            uint64_t v31 = SHIDWORD(v204);
          }
          else {
            uint64_t v31 = 128;
          }
          do
          {
            uint64_t v32 = v31;
            v31 *= 2;
          }
          while (v31 < v30);
          if (v32 > 1073741695 && (uint64_t v31 = 2147483391, v30 > 2147483391)
            || (uint64_t v33 = v203, sqlite3_initialize())
            || (uint64_t v34 = sub_1B0C8E1B8(v33, v31)) == 0)
          {
            int v19 = 7;
            unsigned int v207 = 7;
            goto LABEL_52;
          }
          uint64_t v203 = v34;
          HIDWORD(v204) = v31;
          uint64_t v29 = (int)v204;
        }
        memcpy((void *)(v34 + v29), v28, v27);
        int v19 = 0;
        LODWORD(v204) = v204 + v27;
      }
LABEL_52:
      uint64_t v35 = *(const char **)(a2 + 112);
      int v36 = strlen(v35);
      if ((v36 & 0x80000000) == 0)
      {
        if (v19) {
          goto LABEL_347;
        }
        size_t v37 = (v36 + 1);
        uint64_t v38 = (int)v204;
        uint64_t v39 = (int)v204 + v37;
        if (v39 <= SHIDWORD(v204))
        {
          uint64_t v43 = v203;
        }
        else
        {
          if (HIDWORD(v204)) {
            uint64_t v40 = SHIDWORD(v204);
          }
          else {
            uint64_t v40 = 128;
          }
          do
          {
            uint64_t v41 = v40;
            v40 *= 2;
          }
          while (v40 < v39);
          if (v41 > 1073741695 && (uint64_t v40 = 2147483391, v39 > 2147483391)
            || (uint64_t v42 = v203, sqlite3_initialize())
            || (uint64_t v43 = sub_1B0C8E1B8(v42, v40)) == 0)
          {
            unsigned int v207 = 7;
            goto LABEL_347;
          }
          uint64_t v203 = v43;
          HIDWORD(v204) = v40;
          uint64_t v38 = (int)v204;
        }
        memcpy((void *)(v43 + v38), v35, v37);
        int v19 = 0;
        LODWORD(v204) = v204 + v37;
      }
      goto LABEL_65;
    }
    int v19 = 0;
LABEL_65:
    if (!v8 || v19)
    {
LABEL_70:
      if (v19) {
        goto LABEL_347;
      }
LABEL_71:
      int v45 = v204;
      int v46 = HIDWORD(v204);
      int v47 = *(_DWORD *)(a2 + 124);
      uint64_t v48 = (int)v204;
      if ((int)v204 >= SHIDWORD(v204))
      {
        if (!HIDWORD(v204)) {
          int v46 = 128;
        }
        uint64_t v58 = v46;
        do
        {
          uint64_t v59 = v58;
          v58 *= 2;
        }
        while (v58 <= (int)v204);
        if (v59 > 1073741695)
        {
          uint64_t v58 = 2147483391;
          if ((int)v204 > 2147483390) {
            goto LABEL_112;
          }
        }
        uint64_t v60 = v203;
        if (sqlite3_initialize()) {
          goto LABEL_112;
        }
        uint64_t v49 = sub_1B0C8E1B8(v60, v58);
        if (!v49) {
          goto LABEL_112;
        }
        uint64_t v203 = v49;
        HIDWORD(v204) = v58;
        int v45 = v204;
        uint64_t v48 = (int)v204;
      }
      else
      {
        uint64_t v49 = v203;
      }
      LODWORD(v204) = v45 + 1;
      *(unsigned char *)(v49 + v48) = v47;
      int v50 = *(_DWORD *)(a2 + 128);
      int v51 = v204;
      int v52 = HIDWORD(v204);
      uint64_t v53 = (int)v204;
      if ((int)v204 < SHIDWORD(v204))
      {
        uint64_t v54 = v203;
        goto LABEL_75;
      }
      if (!HIDWORD(v204)) {
        int v52 = 128;
      }
      uint64_t v79 = v52;
      do
      {
        uint64_t v80 = v79;
        v79 *= 2;
      }
      while (v79 <= (int)v204);
      if (v80 <= 1073741695 || (uint64_t v79 = 2147483391, (int)v204 <= 2147483390))
      {
        uint64_t v81 = v203;
        if (!sqlite3_initialize())
        {
          uint64_t v54 = sub_1B0C8E1B8(v81, v79);
          if (v54)
          {
            uint64_t v203 = v54;
            HIDWORD(v204) = v79;
            int v51 = v204;
            uint64_t v53 = (int)v204;
LABEL_75:
            LODWORD(v204) = v51 + 1;
            *(unsigned char *)(v54 + v53) = v50;
            size_t v55 = HIDWORD(v205);
            if (SHIDWORD(v205) < 1) {
              goto LABEL_359;
            }
            uint64_t v56 = (int)v204;
            int64_t v57 = (int)v204 + (unint64_t)HIDWORD(v205);
            uint64_t v9 = v201;
            int v82 = __s1;
            if (v57 > SHIDWORD(v204))
            {
              if (HIDWORD(v204)) {
                uint64_t v83 = SHIDWORD(v204);
              }
              else {
                uint64_t v83 = 128;
              }
              do
              {
                uint64_t v84 = v83;
                v83 *= 2;
              }
              while (v83 < v57);
              goto LABEL_119;
            }
LABEL_345:
            uint64_t v113 = v203;
            goto LABEL_346;
          }
        }
      }
LABEL_112:
      unsigned int v207 = 7;
      uint64_t v9 = v201;
      goto LABEL_347;
    }
    uint64_t v44 = *(void *)(*(void *)(v8 + 56)
                    + 8 * (int)sub_1B0DD63A0(v8, 0, (unsigned __int8 *)__s1, *(_DWORD *)(v8 + 52)));
    if (!v44) {
      goto LABEL_71;
    }
    while (!sub_1B0DDA904(v8, 0, (char *)__s1, 0, *(char **)(v44 + 16)))
    {
      uint64_t v44 = *(void *)(v44 + 24);
      if (!v44) {
        goto LABEL_70;
      }
    }
    int v61 = *(_DWORD *)(a2 + 124);
    if (v61 != 23)
    {
      if (v61 == 18)
      {
        if (*(unsigned char *)v44 == 18)
        {
          if (*(unsigned char *)(v44 + 1)) {
            goto LABEL_347;
          }
          int v62 = v204;
          int v63 = HIDWORD(v204);
          uint64_t v64 = (int)v204;
          if ((int)v204 >= SHIDWORD(v204))
          {
            if (!HIDWORD(v204)) {
              int v63 = 128;
            }
            uint64_t v177 = v63;
            do
            {
              uint64_t v178 = v177;
              v177 *= 2;
            }
            while (v177 <= (int)v204);
            if (v178 > 1073741695)
            {
              uint64_t v177 = 2147483391;
              if ((int)v204 > 2147483390) {
                goto LABEL_297;
              }
            }
            uint64_t v179 = v203;
            if (sqlite3_initialize()) {
              goto LABEL_297;
            }
            uint64_t v65 = sub_1B0C8E1B8(v179, v177);
            if (!v65) {
              goto LABEL_297;
            }
            uint64_t v203 = v65;
            HIDWORD(v204) = v177;
            int v62 = v204;
            uint64_t v64 = (int)v204;
          }
          else
          {
            uint64_t v65 = v203;
          }
          LODWORD(v204) = v62 + 1;
          *(unsigned char *)(v65 + v64) = 23;
          int v66 = *(_DWORD *)(a2 + 128);
          int v67 = v204;
          int v68 = HIDWORD(v204);
          uint64_t v69 = (int)v204;
          if ((int)v204 >= SHIDWORD(v204))
          {
            if (!HIDWORD(v204)) {
              int v68 = 128;
            }
            uint64_t v184 = v68;
            do
            {
              uint64_t v185 = v184;
              v184 *= 2;
            }
            while (v184 <= (int)v204);
            if (v185 > 1073741695 && (uint64_t v184 = 2147483391, (int)v204 > 2147483390)
              || (uint64_t v186 = v203, sqlite3_initialize())
              || (uint64_t v70 = sub_1B0C8E1B8(v186, v184)) == 0)
            {
              int v180 = 0;
              unsigned int v207 = 7;
              uint64_t v9 = v201;
              goto LABEL_337;
            }
            uint64_t v203 = v70;
            HIDWORD(v204) = v184;
            int v67 = v204;
            uint64_t v69 = (int)v204;
          }
          else
          {
            uint64_t v70 = v203;
          }
          LODWORD(v204) = v67 + 1;
          *(unsigned char *)(v70 + v69) = v66;
          size_t v71 = *(unsigned int *)(v44 + 8);
          if ((int)v71 < 1)
          {
            int v180 = 1;
            uint64_t v9 = v201;
            goto LABEL_337;
          }
          uint64_t v72 = *(const void **)(v44 + 16);
          uint64_t v73 = (int)v204;
          uint64_t v74 = (int)v204 + v71;
          uint64_t v9 = v201;
          if (v74 <= SHIDWORD(v204))
          {
            uint64_t v78 = v203;
            goto LABEL_336;
          }
          if (HIDWORD(v204)) {
            uint64_t v75 = SHIDWORD(v204);
          }
          else {
            uint64_t v75 = 128;
          }
          do
          {
            uint64_t v76 = v75;
            v75 *= 2;
          }
          while (v75 < v74);
          if (v76 <= 1073741695 || (uint64_t v75 = 2147483391, v74 <= 2147483391))
          {
            uint64_t v77 = v203;
            if (!sqlite3_initialize())
            {
              uint64_t v78 = sub_1B0C8E1B8(v77, v75);
              if (v78)
              {
                uint64_t v203 = v78;
                HIDWORD(v204) = v75;
                uint64_t v73 = (int)v204;
LABEL_336:
                memcpy((void *)(v78 + v73), v72, v71);
                LODWORD(v204) = v204 + v71;
                int v180 = 1;
                goto LABEL_337;
              }
            }
          }
LABEL_297:
          int v180 = 0;
          unsigned int v207 = 7;
LABEL_337:
          size_t v55 = HIDWORD(v205);
          if (SHIDWORD(v205) >= 1 && v180)
          {
            int v82 = __s1;
            uint64_t v56 = (int)v204;
            int64_t v57 = (int)v204 + (unint64_t)HIDWORD(v205);
            if (v57 > SHIDWORD(v204))
            {
              if (HIDWORD(v204)) {
                uint64_t v83 = SHIDWORD(v204);
              }
              else {
                uint64_t v83 = 128;
              }
              do
              {
                uint64_t v84 = v83;
                v83 *= 2;
              }
              while (v83 < v57);
LABEL_119:
              if (v84 <= 1073741695 || (uint64_t v83 = 2147483391, v57 <= 2147483391))
              {
                uint64_t v85 = v203;
                if (!sqlite3_initialize())
                {
                  uint64_t v113 = sub_1B0C8E1B8(v85, v83);
                  if (v113)
                  {
                    uint64_t v203 = v113;
                    HIDWORD(v204) = v83;
                    uint64_t v56 = (int)v204;
LABEL_346:
                    memcpy((void *)(v113 + v56), v82, v55);
                    LODWORD(v204) = v204 + v55;
                    goto LABEL_347;
                  }
                }
              }
LABEL_122:
              unsigned int v207 = 7;
              int v10 = 7;
              if (!a3) {
                goto LABEL_3;
              }
              goto LABEL_348;
            }
            goto LABEL_345;
          }
LABEL_347:
          int v10 = v207;
          if (!a3) {
            goto LABEL_3;
          }
          goto LABEL_348;
        }
        goto LABEL_70;
      }
      if (*(unsigned char *)v44 != 18) {
        goto LABEL_347;
      }
      int v104 = v204;
      int v105 = HIDWORD(v204);
      uint64_t v106 = (int)v204;
      if ((int)v204 >= SHIDWORD(v204))
      {
        if (!HIDWORD(v204)) {
          int v105 = 128;
        }
        uint64_t v122 = v105;
        do
        {
          uint64_t v123 = v122;
          v122 *= 2;
        }
        while (v122 <= (int)v204);
        if (v123 > 1073741695 && (uint64_t v122 = 2147483391, (int)v204 > 2147483390)
          || (uint64_t v124 = v203, sqlite3_initialize())
          || (uint64_t v107 = sub_1B0C8E1B8(v124, v122)) == 0)
        {
          unsigned int v207 = 7;
LABEL_287:
          int v172 = *(_DWORD *)(a2 + 120);
          unsigned int v173 = *(char **)(v44 + 16);
          int v174 = *(_DWORD *)(v44 + 8);
          char v175 = (char *)__s1;
          int v176 = HIDWORD(v205);
          goto LABEL_326;
        }
        uint64_t v203 = v107;
        HIDWORD(v204) = v122;
        int v104 = v204;
        uint64_t v106 = (int)v204;
      }
      else
      {
        uint64_t v107 = v203;
      }
      LODWORD(v204) = v104 + 1;
      *(unsigned char *)(v107 + v106) = 9;
      int v108 = *(_DWORD *)(a2 + 128);
      int v109 = v204;
      int v110 = HIDWORD(v204);
      uint64_t v111 = (int)v204;
      if ((int)v204 >= SHIDWORD(v204))
      {
        if (!HIDWORD(v204)) {
          int v110 = 128;
        }
        uint64_t v169 = v110;
        do
        {
          uint64_t v170 = v169;
          v169 *= 2;
        }
        while (v169 <= (int)v204);
        if (v170 > 1073741695 && (uint64_t v169 = 2147483391, (int)v204 > 2147483390)
          || (uint64_t v171 = v203, sqlite3_initialize())
          || (uint64_t v112 = sub_1B0C8E1B8(v171, v169)) == 0)
        {
          unsigned int v207 = 7;
          goto LABEL_286;
        }
        uint64_t v203 = v112;
        HIDWORD(v204) = v169;
        int v109 = v204;
        uint64_t v111 = (int)v204;
      }
      else
      {
        uint64_t v112 = v203;
      }
      LODWORD(v204) = v109 + 1;
      *(unsigned char *)(v112 + v111) = v108;
LABEL_286:
      uint64_t v9 = v201;
      goto LABEL_287;
    }
    if (*(unsigned char *)v44 == 9)
    {
      if (*(unsigned char *)(v44 + 1)) {
        goto LABEL_347;
      }
      int v86 = (unsigned __int8 *)__s1;
      int v87 = *(_DWORD *)(a2 + 120);
      if (v87 >= 1)
      {
        do
        {
          while (1)
          {
            size_t v89 = v86 + 1;
            int v88 = *v86;
            if ((v88 - 3) <= 1) {
              break;
            }
            if ((v88 - 1) >= 2) {
              ++v86;
            }
            else {
              v86 += 9;
            }
            if (!--v87) {
              goto LABEL_144;
            }
          }
          int v90 = *v89;
          if ((v90 & 0x80) != 0)
          {
            int v92 = v86[2];
            if ((char)v86[2] < 0)
            {
              int v93 = (char)v86[3];
              if (v93 < 0)
              {
                unint64_t v208 = 0;
                unsigned int v94 = sub_1B0CAD43C((char *)v86 + 1, &v208);
                if (HIDWORD(v208)) {
                  int v90 = -1;
                }
                else {
                  int v90 = v208;
                }
                uint64_t v91 = v94;
              }
              else
              {
                int v90 = v93 & 0x7F | (v90 << 14) & 0x1FC07F | ((v92 & 0x7F) << 7);
                uint64_t v91 = 3;
              }
            }
            else
            {
              int v90 = ((v90 & 0x7F) << 7) | v92;
              uint64_t v91 = 2;
            }
          }
          else
          {
            uint64_t v91 = 1;
          }
          int v86 = &v89[v91 + v90];
          --v87;
        }
        while (v87);
      }
LABEL_144:
      int v95 = v204;
      int v96 = HIDWORD(v204);
      uint64_t v97 = (int)v204;
      if ((int)v204 >= SHIDWORD(v204))
      {
        if (!HIDWORD(v204)) {
          int v96 = 128;
        }
        uint64_t v181 = v96;
        uint64_t v9 = v201;
        do
        {
          uint64_t v182 = v181;
          v181 *= 2;
        }
        while (v181 <= (int)v204);
        if (v182 > 1073741695 && (uint64_t v181 = 2147483391, (int)v204 > 2147483390)
          || (uint64_t v183 = v203, sqlite3_initialize())
          || (uint64_t v98 = sub_1B0C8E1B8(v183, v181)) == 0)
        {
          unsigned int v207 = 7;
LABEL_325:
          int v172 = *(_DWORD *)(a2 + 120);
          int v174 = HIDWORD(v205) + __s1 - v86;
          char v175 = *(char **)(v44 + 16);
          int v176 = *(_DWORD *)(v44 + 8);
          unsigned int v173 = (char *)v86;
LABEL_326:
          sub_1B0DDB24C((uint64_t)&v203, v172, v173, v174, v175, v176, &v207);
          int v10 = v207;
          if (!a3) {
            goto LABEL_3;
          }
          goto LABEL_348;
        }
        uint64_t v203 = v98;
        HIDWORD(v204) = v181;
        int v95 = v204;
        uint64_t v97 = (int)v204;
      }
      else
      {
        uint64_t v98 = v203;
      }
      LODWORD(v204) = v95 + 1;
      *(unsigned char *)(v98 + v97) = 18;
      int v99 = *(_DWORD *)(a2 + 128);
      int v100 = v204;
      int v101 = HIDWORD(v204);
      uint64_t v102 = (int)v204;
      if ((int)v204 >= SHIDWORD(v204))
      {
        if (!HIDWORD(v204)) {
          int v101 = 128;
        }
        uint64_t v187 = v101;
        do
        {
          uint64_t v188 = v187;
          v187 *= 2;
        }
        while (v187 <= (int)v204);
        if (v188 > 1073741695 && (uint64_t v187 = 2147483391, (int)v204 > 2147483390)
          || (uint64_t v189 = v203, sqlite3_initialize())
          || (uint64_t v103 = sub_1B0C8E1B8(v189, v187)) == 0)
        {
          unsigned int v207 = 7;
          goto LABEL_324;
        }
        uint64_t v203 = v103;
        HIDWORD(v204) = v187;
        int v100 = v204;
        uint64_t v102 = (int)v204;
      }
      else
      {
        uint64_t v103 = v203;
      }
      LODWORD(v204) = v100 + 1;
      *(unsigned char *)(v103 + v102) = v99;
LABEL_324:
      uint64_t v9 = v201;
      goto LABEL_325;
    }
    int v114 = (char *)__s1;
    unsigned int v196 = *(char **)(v44 + 16);
    uint64_t v115 = (int)v204;
    uint64_t v116 = SHIDWORD(v205) + (uint64_t)*(int *)(v44 + 8) + (int)v204 + 2;
    if (v116 <= SHIDWORD(v204))
    {
      uint64_t v195 = a3;
      uint64_t v121 = v203;
      int v119 = *(char **)(v44 + 16);
    }
    else
    {
      if (HIDWORD(v204)) {
        uint64_t v117 = SHIDWORD(v204);
      }
      else {
        uint64_t v117 = 128;
      }
      do
      {
        uint64_t v118 = v117;
        v117 *= 2;
      }
      while (v117 < v116);
      int v119 = *(char **)(v44 + 16);
      if (v118 > 1073741695)
      {
        uint64_t v117 = 2147483391;
        if (v116 > 2147483391) {
          goto LABEL_122;
        }
      }
      uint64_t v120 = v203;
      if (sqlite3_initialize()) {
        goto LABEL_122;
      }
      uint64_t v121 = sub_1B0C8E1B8(v120, v117);
      if (!v121) {
        goto LABEL_122;
      }
      uint64_t v195 = a3;
      uint64_t v203 = v121;
      HIDWORD(v204) = v117;
      uint64_t v115 = (int)v204;
    }
    uint64_t v125 = (unsigned char *)(v121 + v115);
    *uint64_t v125 = 23;
    v125[1] = *(_DWORD *)(a2 + 128);
    if (*(int *)(a2 + 120) < 1)
    {
      a3 = v195;
      int v10 = v207;
      if (!v195) {
        goto LABEL_3;
      }
      goto LABEL_348;
    }
    uint64_t v126 = 0;
    int v199 = 0;
    __dst = v125 + 2;
    for (uint64_t j = v119; ; j += v137)
    {
      while (1)
      {
        int v128 = *v114;
        int v129 = 1;
        if (*v114) {
          BOOL v130 = v128 == 5;
        }
        else {
          BOOL v130 = 1;
        }
        if (!v130 && v128 != 255)
        {
          if ((v128 - 1) >= 2)
          {
            int v131 = v114[1];
            if ((v131 & 0x80) != 0)
            {
              int v133 = v114[2];
              if (v114[2] < 0)
              {
                int v134 = v114[3];
                if (v134 < 0)
                {
                  unint64_t v208 = 0;
                  char v135 = sub_1B0CAD43C(v114 + 1, &v208);
                  int v131 = v208;
                  if (HIDWORD(v208)) {
                    int v131 = -1;
                  }
                  int v132 = (v135 + 1);
                }
                else
                {
                  int v131 = v134 & 0x7F | (v131 << 14) & 0x1FC07F | ((v133 & 0x7F) << 7);
                  int v132 = 4;
                }
              }
              else
              {
                int v131 = ((v131 & 0x7F) << 7) | v133;
                int v132 = 3;
              }
            }
            else
            {
              int v132 = 2;
            }
            int v129 = v132 + v131;
          }
          else
          {
            int v129 = 9;
          }
        }
        int v136 = *j;
        int v137 = 1;
        if (*j) {
          BOOL v138 = v136 == 5;
        }
        else {
          BOOL v138 = 1;
        }
        if (!v138 && v136 != 255)
        {
          if ((v136 - 1) >= 2)
          {
            int v139 = j[1];
            if ((v139 & 0x80) != 0)
            {
              int v141 = j[2];
              if (j[2] < 0)
              {
                int v142 = j[3];
                if (v142 < 0)
                {
                  unint64_t v208 = 0;
                  char v143 = sub_1B0CAD43C(j + 1, &v208);
                  int v139 = v208;
                  if (HIDWORD(v208)) {
                    int v139 = -1;
                  }
                  int v140 = (v143 + 1);
                }
                else
                {
                  int v139 = v142 & 0x7F | (v139 << 14) & 0x1FC07F | ((v141 & 0x7F) << 7);
                  int v140 = 4;
                }
              }
              else
              {
                int v139 = ((v139 & 0x7F) << 7) | v141;
                int v140 = 3;
              }
            }
            else
            {
              int v140 = 2;
            }
            int v137 = v140 + v139;
          }
          else
          {
            int v137 = 9;
          }
        }
        if (*(unsigned char *)(*(void *)(a2 + 136) + v126)) {
          goto LABEL_221;
        }
        if (v136 == 255) {
          break;
        }
        if (!v136)
        {
          int v146 = v199;
          if (v128) {
            int v146 = 1;
          }
          int v199 = v146;
LABEL_221:
          uint64_t v144 = v129;
          memcpy(__dst, v114, v129);
          __dst += v129;
          goto LABEL_222;
        }
        if (!v128) {
          break;
        }
        memcpy(__dst, j, v137);
        __dst += v137;
        v114 += v129;
        ++v126;
        uint64_t v147 = *(int *)(a2 + 120);
        if (v126 >= v147)
        {
          if ((int)v147 < 1) {
            goto LABEL_356;
          }
LABEL_235:
          uint64_t v148 = 0;
          uint64_t v149 = v196;
          uint64_t v150 = __dst;
          while (2)
          {
            int v153 = *v114;
            int v154 = 1;
            if (*v114) {
              BOOL v155 = v153 == 5;
            }
            else {
              BOOL v155 = 1;
            }
            if (!v155 && v153 != 255)
            {
              if ((v153 - 1) >= 2)
              {
                int v156 = v114[1];
                if ((v156 & 0x80) != 0)
                {
                  int v158 = v114[2];
                  if (v114[2] < 0)
                  {
                    int v159 = v114[3];
                    if (v159 < 0)
                    {
                      unint64_t v208 = 0;
                      char v160 = sub_1B0CAD43C(v114 + 1, &v208);
                      int v156 = v208;
                      if (HIDWORD(v208)) {
                        int v156 = -1;
                      }
                      int v157 = (v160 + 1);
                    }
                    else
                    {
                      int v156 = v159 & 0x7F | (v156 << 14) & 0x1FC07F | ((v158 & 0x7F) << 7);
                      int v157 = 4;
                    }
                  }
                  else
                  {
                    int v156 = ((v156 & 0x7F) << 7) | v158;
                    int v157 = 3;
                  }
                }
                else
                {
                  int v157 = 2;
                }
                int v154 = v157 + v156;
              }
              else
              {
                int v154 = 9;
              }
            }
            int v161 = *v149;
            if (*v149) {
              BOOL v162 = v161 == 5;
            }
            else {
              BOOL v162 = 1;
            }
            if (v162 || v161 == 255)
            {
              if (v161 != 255 || *(unsigned char *)(*(void *)(a2 + 136) + v148) != 0)
              {
                int v152 = 1;
                goto LABEL_277;
              }
              *v150++ = 0;
              uint64_t v151 = v154;
              int v152 = 1;
            }
            else
            {
              if ((v161 - 1) >= 2)
              {
                int v164 = v149[1];
                if ((v164 & 0x80) != 0)
                {
                  int v166 = v149[2];
                  if (v149[2] < 0)
                  {
                    int v167 = v149[3];
                    if (v167 < 0)
                    {
                      unint64_t v208 = 0;
                      char v168 = sub_1B0CAD43C(v149 + 1, &v208);
                      int v164 = v208;
                      if (HIDWORD(v208)) {
                        int v164 = -1;
                      }
                      int v165 = (v168 + 1);
                    }
                    else
                    {
                      int v164 = v167 & 0x7F | (v164 << 14) & 0x1FC07F | ((v166 & 0x7F) << 7);
                      int v165 = 4;
                    }
                  }
                  else
                  {
                    int v164 = ((v164 & 0x7F) << 7) | v166;
                    int v165 = 3;
                  }
                }
                else
                {
                  int v165 = 2;
                }
                int v152 = v165 + v164;
              }
              else
              {
                int v152 = 9;
              }
LABEL_277:
              uint64_t v151 = v154;
              memcpy(v150, v114, v154);
              v150 += v154;
            }
            v114 += v151;
            v149 += v152;
            if (++v148 >= *(int *)(a2 + 120)) {
              goto LABEL_357;
            }
            continue;
          }
        }
        int v199 = 1;
        j += v137;
      }
      *__dst++ = 0;
      uint64_t v144 = v129;
LABEL_222:
      v114 += v144;
      ++v126;
      uint64_t v145 = *(int *)(a2 + 120);
      if (v126 >= v145) {
        break;
      }
    }
    if (v199)
    {
      if ((int)v145 >= 1) {
        goto LABEL_235;
      }
LABEL_356:
      LODWORD(v150) = __dst;
LABEL_357:
      LODWORD(v204) = v150 - v203;
    }
    a3 = v195;
LABEL_359:
    uint64_t v9 = v201;
    int v10 = v207;
    if (a3)
    {
LABEL_348:
      if (!v10)
      {
        if ((int)v204 > dword_1E9B51ED8)
        {
          int v10 = a3(a4, v203);
          unsigned int v207 = v10;
          LODWORD(v204) = 0;
        }
        else
        {
          int v10 = 0;
        }
      }
    }
LABEL_3:
    if (!v10) {
      continue;
    }
    break;
  }
  uint64_t v191 = v203;
  if (v203)
  {
    char v192 = &off_1EB21C9E8;
    if (!dword_1EB21C9C0) {
      goto LABEL_370;
    }
    if ((void)xmmword_1EB2201B0) {
      xmmword_1EB21CA40(xmmword_1EB2201B0);
    }
    qword_1EB220108[0] -= (int)off_1EB21C9F8(v191);
    --qword_1EB220150;
    off_1EB21C9E8(v191);
    uint64_t v191 = xmmword_1EB2201B0;
    if ((void)xmmword_1EB2201B0)
    {
      char v192 = &xmmword_1EB21CA50;
LABEL_370:
      (*v192)(v191);
    }
  }
  return v207;
}

uint64_t sqlite3rebaser_rebase_strm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t), uint64_t a5)
{
  if (sqlite3_initialize()) {
    return 7;
  }
  uint64_t v11 = sub_1B0C7FC94(152);
  if (!v11) {
    return 7;
  }
  uint64_t v12 = v11;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(void *)(v11 + 144) = 0;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)uint64_t v11 = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  *(void *)(v11 + 16) = 0;
  *(_DWORD *)(v11 + 24) = 0;
  *(void *)(v11 + 48) = a2;
  *(void *)(v11 + 56) = a3;
  *(_DWORD *)(v11 + 64) = a2 == 0;
  *(_DWORD *)(v11 + 92) = 0;
  *(_DWORD *)(v11 + 96) = 0;
  uint64_t v13 = sub_1B0D029E0(a1, v11, a4, a5, 0, 0);
  sqlite3changeset_finalize(v12);
  return v13;
}

uint64_t sqlite3rebaser_delete(uint64_t result)
{
  if (!result) {
    return result;
  }
  uint64_t v1 = result;
  sub_1B0CFD1A8(0, *(uint64_t **)(result + 8));
  uint64_t v2 = &off_1EB21C9E8;
  if (!dword_1EB21C9C0) {
    goto LABEL_7;
  }
  if ((void)xmmword_1EB2201B0) {
    xmmword_1EB21CA40(xmmword_1EB2201B0);
  }
  qword_1EB220108[0] -= (int)off_1EB21C9F8(v1);
  --qword_1EB220150;
  uint64_t result = off_1EB21C9E8(v1);
  uint64_t v1 = xmmword_1EB2201B0;
  if ((void)xmmword_1EB2201B0)
  {
    uint64_t v2 = &xmmword_1EB21CA50;
LABEL_7:
    uint64_t v3 = *v2;
    return v3(v1);
  }
  return result;
}

uint64_t sqlite3session_config(int a1, int *a2)
{
  if (a1 != 1) {
    return 21;
  }
  int v2 = *a2;
  if (*a2 <= 0) {
    int v2 = dword_1E9B51ED8;
  }
  else {
    dword_1E9B51ED8 = *a2;
  }
  uint64_t result = 0;
  *a2 = v2;
  return result;
}

uint64_t sqlite3_carray_bind(sqlite3_stmt *a1, int a2, void *a3, int a4, int a5, void (__cdecl *a6)(void *))
{
  LODWORD(v8) = a4;
  if (sqlite3_initialize() || (uint64_t v13 = sub_1B0C7FC94(24)) == 0)
  {
    if ((unint64_t)a6 + 1 >= 2) {
      ((void (*)(void *))a6)(a3);
    }
    return 7;
  }
  int v14 = (void *)v13;
  *(_DWORD *)(v13 + 8) = v8;
  *(_DWORD *)(v13 + 12) = a5;
  if (a6 != (void (__cdecl *)(void *))-1)
  {
    *(void *)uint64_t v13 = a3;
    goto LABEL_8;
  }
  int v15 = a5 & 7;
  switch(a5 & 7)
  {
    case 0:
      int v16 = 0;
      uint64_t v17 = 4 * (int)v8;
      break;
    case 1:
    case 2:
      int v16 = 0;
      uint64_t v17 = 8 * (int)v8;
      break;
    case 3:
      uint64_t v17 = 8 * (int)v8;
      if ((int)v8 >= 1)
      {
        uint64_t v18 = v8;
        int v19 = (const char **)a3;
        do
        {
          if (*v19) {
            v17 += strlen(*v19) + 1;
          }
          ++v19;
          --v18;
        }
        while (v18);
      }
      int v16 = 1;
      break;
    case 4:
      uint64_t v17 = 16 * (int)v8;
      if ((int)v8 >= 1)
      {
        if (v8 >= 5)
        {
          uint64_t v21 = v8 & 3;
          if ((v8 & 3) == 0) {
            uint64_t v21 = 4;
          }
          uint64_t v20 = v8 - v21;
          int64x2_t v22 = 0uLL;
          int64x2_t v23 = (int64x2_t)(unint64_t)(16 * (int)v8);
          uint64_t v24 = (const double *)(a3 + 5);
          uint64_t v25 = v20;
          do
          {
            uint64_t v26 = v24 - 4;
            unsigned long long v27 = (unsigned __int128)vld2q_f64(v26);
            unsigned long long v28 = (unsigned __int128)vld2q_f64(v24);
            int64x2_t v23 = vaddq_s64((int64x2_t)v27, v23);
            int64x2_t v22 = vaddq_s64((int64x2_t)v28, v22);
            v24 += 8;
            v25 -= 4;
          }
          while (v25);
          uint64_t v17 = vaddvq_s64(vaddq_s64(v22, v23));
        }
        else
        {
          uint64_t v20 = 0;
        }
        uint64_t v29 = &a3[2 * v20 + 1];
        uint64_t v30 = v8 - v20;
        do
        {
          uint64_t v31 = *v29;
          v29 += 2;
          v17 += v31;
          --v30;
        }
        while (v30);
      }
      int v16 = 0;
      break;
    default:
      int v16 = 0;
      uint64_t v17 = (int)v8;
      break;
  }
  if (sqlite3_initialize())
  {
    *int v14 = 0;
LABEL_34:
    uint64_t v32 = &off_1EB21C9E8;
    if (dword_1EB21C9C0)
    {
      if ((void)xmmword_1EB2201B0) {
        xmmword_1EB21CA40(xmmword_1EB2201B0);
      }
      qword_1EB220108[0] -= (int)off_1EB21C9F8(v14);
      --qword_1EB220150;
      off_1EB21C9E8(v14);
      int v14 = (void *)xmmword_1EB2201B0;
      if (!(void)xmmword_1EB2201B0) {
        return 7;
      }
      uint64_t v32 = &xmmword_1EB21CA50;
    }
    (*v32)(v14);
    return 7;
  }
  uint64_t v33 = (void *)sub_1B0C7FC94(v17);
  *int v14 = v33;
  if (!v33) {
    goto LABEL_34;
  }
  uint64_t v34 = v33;
  if (v16)
  {
    if ((int)v8 >= 1)
    {
      uint64_t v35 = (char *)&v33[(int)v8];
      uint64_t v36 = v8;
      do
      {
        uint64_t v38 = (const char *)*a3;
        if (*a3)
        {
          void *v34 = v35;
          size_t v37 = strlen(v38) + 1;
          memcpy(v35, v38, v37);
          v35 += v37;
        }
        else
        {
          void *v34 = 0;
        }
        ++v34;
        ++a3;
        --v36;
      }
      while (v36);
    }
  }
  else if (v15 == 4)
  {
    if ((int)v8 >= 1)
    {
      uint64_t v39 = (char *)&v33[2 * (int)v8];
      uint64_t v40 = v34 + 1;
      uint64_t v41 = a3 + 1;
      uint64_t v8 = v8;
      do
      {
        size_t v42 = *v41;
        *(v40 - 1) = (size_t)v39;
        size_t *v40 = v42;
        uint64_t v43 = &v39[v42];
        memcpy(v39, (const void *)*(v41 - 1), v42);
        v40 += 2;
        v41 += 2;
        a6 = sqlite3_free;
        uint64_t v39 = v43;
        --v8;
      }
      while (v8);
      goto LABEL_8;
    }
  }
  else
  {
    memcpy(v33, a3, v17);
  }
  a6 = sqlite3_free;
LABEL_8:
  v14[2] = a6;

  return sqlite3_bind_pointer(a1, a2, v14, "carray-bind", (void (__cdecl *)(void *))sub_1B0D042A0);
}

uint64_t sub_1B0D042A0(void *a1)
{
  uint64_t v1 = a1;
  int v2 = (void (*)(void))a1[2];
  if (v2) {
    v2(*a1);
  }
  uint64_t v3 = &off_1EB21C9E8;
  if (!dword_1EB21C9C0) {
    goto LABEL_8;
  }
  if ((void)xmmword_1EB2201B0) {
    xmmword_1EB21CA40(xmmword_1EB2201B0);
  }
  qword_1EB220108 -= (int)off_1EB21C9F8(v1);
  --qword_1EB220150;
  uint64_t result = off_1EB21C9E8(v1);
  uint64_t v1 = (void *)xmmword_1EB2201B0;
  if ((void)xmmword_1EB2201B0)
  {
    uint64_t v3 = &xmmword_1EB21CA50;
LABEL_8:
    int v5 = (uint64_t (*)(void *))*v3;
    return v5(v1);
  }
  return result;
}

uint64_t sqlite3_carray_init(uint64_t a1)
{
  if (!a1)
  {
    int v2 = "NULL";
    goto LABEL_11;
  }
  int v1 = *(unsigned __int8 *)(a1 + 113);
  if (v1 == 186)
  {
LABEL_5:
    int v2 = "unopened";
LABEL_11:
    sqlite3_log(21, "API call with %s database connection pointer", v2);
    return sub_1B0CE1978(161256);
  }
  if (v1 != 118)
  {
    if (v1 != 109)
    {
      int v2 = "invalid";
      goto LABEL_11;
    }
    goto LABEL_5;
  }

  return sub_1B0C7E204(a1, "carray", (uint64_t)&unk_1EC5261E0, 0, 0);
}

uint64_t sqlite3_csv_init(uint64_t a1)
{
  if (!a1)
  {
    int v2 = "NULL";
    goto LABEL_11;
  }
  int v1 = *(unsigned __int8 *)(a1 + 113);
  if (v1 == 186)
  {
LABEL_5:
    int v2 = "unopened";
LABEL_11:
    sqlite3_log(21, "API call with %s database connection pointer", v2);
    return sub_1B0CE1978(161256);
  }
  if (v1 != 118)
  {
    if (v1 != 109)
    {
      int v2 = "invalid";
      goto LABEL_11;
    }
    goto LABEL_5;
  }

  return sub_1B0C7E204(a1, "csv", (uint64_t)&unk_1EC5262A0, 0, 0);
}

void sqlite3_activate_see(uint64_t a1)
{
  if (!sqlite3_initialize())
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = sub_1B0D04588;
    block[3] = &unk_1E5FEEE70;
    block[4] = a1;
    if (qword_1E9B52078 != -1) {
      dispatch_once(&qword_1E9B52078, block);
    }
  }
}

void sub_1B0D04588(uint64_t a1)
{
  if (dword_1E9B52080)
  {
    if (*(void *)(a1 + 32))
    {
LABEL_3:
      sqlite3_log(28, "This version of the encryption extension does not support an activation passphrase");
      return;
    }
  }
  else
  {
    int v2 = (void *)xpc_copy_entitlement_for_self();
    if (v2)
    {
      xpc_release(v2);
      int v3 = 1;
    }
    else
    {
      int v3 = 0;
    }
    dword_1E9B52080 = v3;
    if (*(void *)(a1 + 32)) {
      goto LABEL_3;
    }
  }
  if (os_variant_allows_internal_security_policies())
  {
    uint64_t v4 = getenv("SQLITE_ENABLE_SEE");
    if (v4)
    {
      dword_1E9B52080 = strcmp(v4, "0") != 0;
    }
    else if (!dword_1E9B52080)
    {
      int v5 = getprogname();
      if (!strcmp("xctest", v5)) {
        dword_1E9B52080 = 1;
      }
      else {
        sqlite3_log(1, "entitlement \"%s\" or environment variable \"SQLITE_ENABLE_SEE=1\" required to activate SEE");
      }
    }
  }
  else
  {
    sqlite3_log(1, "entitlement \"%s\" required to activate SEE");
  }
}

uint64_t sqlite3_key_v2(uint64_t a1, unsigned char *a2, unsigned char *a3, int a4)
{
  if (!dword_1E9B52080)
  {
    if (sqlite3_initialize()
      || (block[0] = MEMORY[0x1E4F143A8],
          block[1] = 0x40000000,
          block[2] = sub_1B0D04588,
          block[3] = &unk_1E5FEEE70,
          block[4] = 0,
          qword_1E9B52078 == -1))
    {
      if (dword_1E9B52080) {
        goto LABEL_5;
      }
      return 21;
    }
    dispatch_once(&qword_1E9B52078, block);
    if (!dword_1E9B52080) {
      return 21;
    }
  }
LABEL_5:
  uint64_t v8 = *(void *)(a1 + 24);
  if (v8) {
    xmmword_1EB21CA40(v8);
  }
  if (*(unsigned char *)(a1 + 111))
  {
    if (a2) {
      goto LABEL_9;
    }
LABEL_22:
    LODWORD(v10) = 0;
LABEL_23:
    uint64_t v16 = sub_1B0D04884(a1, v10, a3, a4);
    if (!*(unsigned char *)(a1 + 111)) {
      goto LABEL_24;
    }
    goto LABEL_25;
  }
  sub_1B0D0E4C4(a1);
  if (!a2) {
    goto LABEL_22;
  }
LABEL_9:
  uint64_t v9 = *(unsigned int *)(a1 + 40);
  if ((int)v9 < 1) {
    goto LABEL_19;
  }
  uint64_t v10 = 0;
  uint64_t v11 = *(void *)(a1 + 32);
  while (!*(void *)(v11 + 32 * v10 + 8))
  {
LABEL_11:
    if (++v10 == v9) {
      goto LABEL_19;
    }
  }
  uint64_t v12 = *(unsigned __int8 **)(v11 + 32 * v10);
  for (uint64_t i = a2; ; ++i)
  {
    uint64_t v14 = *i;
    uint64_t v15 = *v12;
    if (v14 == v15) {
      break;
    }
    if (byte_1B0DE1758[v14] != byte_1B0DE1758[v15]) {
      goto LABEL_11;
    }
LABEL_15:
    ++v12;
  }
  if (*i) {
    goto LABEL_15;
  }
  if ((v10 & 0x80000000) == 0) {
    goto LABEL_23;
  }
LABEL_19:
  uint64_t v16 = 1;
  if (!*(unsigned char *)(a1 + 111)) {
LABEL_24:
  }
    sub_1B0D0E55C(a1);
LABEL_25:
  uint64_t v17 = *(void *)(a1 + 24);
  if (v17) {
    xmmword_1EB21CA50(v17);
  }
  return v16;
}

uint64_t sub_1B0D04884(uint64_t a1, int a2, unsigned char *a3, int a4)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 32) + 32 * a2;
  uint64_t v7 = *(void *)(v4 + 8);
  uint64_t v6 = (uint64_t *)(v4 + 8);
  uint64_t v5 = v7;
  if (!v7) {
    return 0;
  }
  uint64_t v8 = **(void **)(v5 + 8);
  if (!v8) {
    return 0;
  }
  if (sqlite3_initialize()) {
    return 7;
  }
  uint64_t v12 = (_OWORD *)sub_1B0C7FC94(112);
  if (!v12) {
    return 7;
  }
  uint64_t v13 = v12;
  v12[5] = 0u;
  v12[6] = 0u;
  v12[3] = 0u;
  v12[4] = 0u;
  v12[1] = 0u;
  v12[2] = 0u;
  _OWORD *v12 = 0u;
  sub_1B0CD9448(*v6, 0, 12, 0, 0);
  LOBYTE(v14) = 0;
  char v15 = 1;
  if (a3 && a4)
  {
    if (a4 < 0)
    {
      v36[0] = xmmword_1B0DE1390;
      v36[1] = xmmword_1B0DE13A0;
      v37[5] = xmmword_1B0DE1400;
      v37[6] = xmmword_1B0DE1410;
      v37[7] = xmmword_1B0DE1420;
      v37[8] = xmmword_1B0DE1430;
      v37[9] = xmmword_1B0DE1440;
      v37[10] = xmmword_1B0DE1450;
      v37[11] = xmmword_1B0DE1460;
      v37[12] = xmmword_1B0DE1470;
      v37[13] = xmmword_1B0DE1480;
      if (*a3)
      {
        uint64_t v17 = 0;
        int v18 = 0;
        unsigned __int8 v19 = 0;
        do
        {
          char v20 = *((unsigned char *)v36 + v17);
          int v21 = a3[v18];
          v19 += v20 + v21;
          char v22 = *((unsigned char *)v36 + v19);
          *((unsigned char *)v36 + v19) = v20;
          *((unsigned char *)v36 + v17++) = v22;
          if (v21) {
            ++v18;
          }
          else {
            int v18 = 0;
          }
        }
        while (v17 != 256);
      }
      uint64_t v23 = 0;
      unsigned __int8 v24 = 0;
      do
      {
        char v25 = *((unsigned char *)v36 + v23 + 1);
        v24 += v25;
        *((unsigned char *)v36 + v23 + 1) = *((unsigned char *)v36 + v24);
        *((unsigned char *)v36 + v24) = v25;
        *((unsigned char *)v13 + v23 + 2) = *((unsigned char *)v36 + v23 + 1) + v25;
        ++v23;
      }
      while (v23 != 32);
      char v15 = 0;
      LOBYTE(v14) = 32;
    }
    else
    {
      uint64_t v16 = 0;
      if (a4 >= 32) {
        int v14 = 32;
      }
      else {
        int v14 = a4;
      }
      do
      {
        *((unsigned char *)v13 + v16 + 2) = a3[(int)v16 % v14];
        ++v16;
      }
      while (v16 != 32);
      char v15 = 0;
    }
  }
  *(unsigned char *)uint64_t v13 = v14;
  *((unsigned char *)v13 + 1) = v15;
  long long v26 = *v13;
  *(_OWORD *)((char *)v13 + 50) = v13[1];
  *((_WORD *)v13 + 33) = *((_WORD *)v13 + 16);
  *(_OWORD *)((char *)v13 + 34) = v26;
  unsigned long long v27 = *(void (**)(void))(v8 + 312);
  if (v27)
  {
    v27(*(void *)(v8 + 320));
  }
  else
  {
    ++*(_DWORD *)(v8 + 132);
    for (uint64_t i = *(void *)(v8 + 112); i; uint64_t i = *(void *)(i + 64))
      *(_DWORD *)(i + 24) = 1;
    sub_1B0C7D108(*(void **)(v8 + 336), 0);
  }
  int v29 = *(unsigned __int8 *)(v8 + 19);
  if (*(unsigned char *)(v8 + 19)) {
    uint64_t v30 = 0;
  }
  else {
    uint64_t v30 = sub_1B0DDDBCC;
  }
  *(void *)(v8 + 296) = v30;
  *(void *)(v8 + 304) = sub_1B0DDE1CC;
  *(void *)(v8 + 312) = sub_1B0DDE1F0;
  *(void *)(v8 + 320) = v13;
  uint64_t v31 = sub_1B0D11088;
  if (!*(_DWORD *)(v8 + 48))
  {
    BOOL v32 = !v29 || *(unsigned char *)(v8 + 27) == 0;
    uint64_t v31 = sub_1B0D11094;
    if (v32) {
      uint64_t v31 = sub_1B0D112F8;
    }
  }
  uint64_t result = 0;
  *(void *)(v8 + 288) = v31;
  int v33 = *(_DWORD *)(v8 + 200);
  int v34 = *(__int16 *)(v8 + 178);
  if (v34 >= 12) {
    unsigned __int8 v35 = 12;
  }
  else {
    unsigned __int8 v35 = *(_WORD *)(v8 + 178);
  }
  *((unsigned char *)v13 + 69) = v35;
  *((_DWORD *)v13 + 19) = v33;
  *((_DWORD *)v13 + 20) = v33 - v34;
  *((_DWORD *)v13 + 18) = 12 - v35;
  return result;
}

uint64_t sqlite3_key(uint64_t a1, unsigned char *a2, int a3)
{
  return sqlite3_key_v2(a1, 0, a2, a3);
}

uint64_t sqlite3_rekey_v2(sqlite3 *a1, unsigned char *a2, unsigned char *a3, int a4)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  if (!dword_1E9B52080)
  {
    if (sqlite3_initialize())
    {
      if (dword_1E9B52080) {
        goto LABEL_4;
      }
LABEL_42:
      uint64_t v16 = 21;
LABEL_43:
      *((_DWORD *)a1 + 20) = v16;
      return v16;
    }
    *(void *)&long long block = MEMORY[0x1E4F143A8];
    *((void *)&block + 1) = 0x40000000;
    *(void *)&long long v51 = sub_1B0D04588;
    *((void *)&v51 + 1) = &unk_1E5FEEE70;
    *(void *)&v52[0] = 0;
    if (qword_1E9B52078 == -1)
    {
      if (!dword_1E9B52080) {
        goto LABEL_42;
      }
    }
    else
    {
      dispatch_once(&qword_1E9B52078, &block);
      if (!dword_1E9B52080) {
        goto LABEL_42;
      }
    }
  }
LABEL_4:
  sqlite3_exec(a1, "PRAGMA page_count", 0, 0, 0);
  uint64_t v8 = *((void *)a1 + 3);
  if (v8) {
    xmmword_1EB21CA40(v8);
  }
  if (!*((unsigned char *)a1 + 111))
  {
    sub_1B0D0E4C4((uint64_t)a1);
    if (a2) {
      goto LABEL_8;
    }
LABEL_20:
    LODWORD(v10) = 0;
    uint64_t v11 = *((void *)a1 + 4);
    goto LABEL_21;
  }
  if (!a2) {
    goto LABEL_20;
  }
LABEL_8:
  uint64_t v9 = *((unsigned int *)a1 + 10);
  if ((int)v9 < 1)
  {
LABEL_18:
    uint64_t v16 = 1;
    goto LABEL_23;
  }
  uint64_t v10 = 0;
  uint64_t v11 = *((void *)a1 + 4);
  while (!*(void *)(v11 + 32 * v10 + 8))
  {
LABEL_10:
    if (++v10 == v9) {
      goto LABEL_18;
    }
  }
  uint64_t v12 = *(unsigned __int8 **)(v11 + 32 * v10);
  for (uint64_t i = a2; ; ++i)
  {
    uint64_t v14 = *i;
    uint64_t v15 = *v12;
    if (v14 == v15) {
      break;
    }
    if (byte_1B0DE1758[v14] != byte_1B0DE1758[v15]) {
      goto LABEL_10;
    }
LABEL_14:
    ++v12;
  }
  if (*i) {
    goto LABEL_14;
  }
  if ((v10 & 0x80000000) != 0) {
    goto LABEL_18;
  }
LABEL_21:
  uint64_t v17 = **(void **)(*(void *)(v11 + 32 * v10 + 8) + 8);
  if (*(unsigned char *)(v17 + 18))
  {
    uint64_t v16 = 8;
    goto LABEL_23;
  }
  uint64_t v19 = *(void *)(v17 + 320);
  if (!v19)
  {
    sub_1B0D04884((uint64_t)a1, 0, &byte_1B0DE9952, 0);
    uint64_t v19 = *(void *)(v17 + 320);
    if (!v19)
    {
      uint64_t v16 = 7;
      goto LABEL_23;
    }
  }
  unsigned int v20 = *(unsigned __int8 *)(v17 + 21);
  if (!*(unsigned char *)(v17 + 21))
  {
    uint64_t v16 = sub_1B0C8BBCC(v17);
    if (v16) {
      goto LABEL_23;
    }
  }
  uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, void))(v17 + 288))(v17, 1, &v49, 0);
  uint64_t v22 = v21;
  if (v20 <= 1 && v21 == 0)
  {
    uint64_t v16 = sub_1B0D05234(v17, 1, 0);
    if (v16) {
      goto LABEL_23;
    }
    goto LABEL_46;
  }
  if (!v21)
  {
LABEL_46:
    int v24 = *(_DWORD *)(v17 + 32);
    goto LABEL_47;
  }
  int v24 = 0;
LABEL_47:
  LOBYTE(v26) = 0;
  char v27 = 1;
  if (a3 && a4)
  {
    if (a4 < 0)
    {
      long long block = xmmword_1B0DE1390;
      long long v51 = xmmword_1B0DE13A0;
      v52[5] = xmmword_1B0DE1400;
      v52[6] = xmmword_1B0DE1410;
      v52[7] = xmmword_1B0DE1420;
      v52[8] = xmmword_1B0DE1430;
      v52[9] = xmmword_1B0DE1440;
      v52[10] = xmmword_1B0DE1450;
      v52[11] = xmmword_1B0DE1460;
      v52[12] = xmmword_1B0DE1470;
      v52[13] = xmmword_1B0DE1480;
      if (*a3)
      {
        uint64_t v29 = 0;
        int v30 = 0;
        unsigned __int8 v31 = 0;
        do
        {
          char v32 = *((unsigned char *)&block + v29);
          int v33 = a3[v30];
          v31 += v32 + v33;
          char v34 = *((unsigned char *)&block + v31);
          *((unsigned char *)&block + v31) = v32;
          *((unsigned char *)&block + v29++) = v34;
          if (v33) {
            ++v30;
          }
          else {
            int v30 = 0;
          }
        }
        while (v29 != 256);
      }
      uint64_t v35 = 0;
      unsigned __int8 v36 = 0;
      do
      {
        char v37 = *((unsigned char *)&block + v35 + 1);
        v36 += v37;
        *((unsigned char *)&block + v35 + 1) = *((unsigned char *)&block + v36);
        *((unsigned char *)&block + v36) = v37;
        *(unsigned char *)(v19 + 2 + v35) = *((unsigned char *)&block + v35 + 1) + v37;
        ++v35;
      }
      while (v35 != 32);
      char v27 = 0;
      LOBYTE(v26) = 32;
    }
    else
    {
      uint64_t v28 = 0;
      if (a4 >= 32) {
        int v26 = 32;
      }
      else {
        int v26 = a4;
      }
      do
      {
        *(unsigned char *)(v19 + 2 + v28) = a3[(int)v28 % v26];
        ++v28;
      }
      while (v28 != 32);
      char v27 = 0;
    }
  }
  *(unsigned char *)uint64_t v19 = v26;
  *(unsigned char *)(v19 + 1) = v27;
  if (v24 > 0 && !v22)
  {
    unsigned int v38 = dword_1E9B51ED0 / *(_DWORD *)(v19 + 76) + 1;
    uint64_t v39 = 1;
    while (1)
    {
      if (v38 == v39)
      {
        uint64_t v22 = 0;
        goto LABEL_87;
      }
      uint64_t v40 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, void))(v17 + 288))(v17, v39, &v48, 0);
      if (v40)
      {
        uint64_t v22 = v40;
        goto LABEL_93;
      }
      if (*((_DWORD *)a1 + 106))
      {
        *((_DWORD *)a1 + 106) = 0;
        uint64_t v22 = 9;
LABEL_93:
        long long v45 = *(_OWORD *)(v19 + 34);
        long long v46 = *(_OWORD *)(v19 + 50);
        *(_OWORD *)uint64_t v19 = v45;
        *(_OWORD *)(v19 + 16) = v46;
        *(_WORD *)(v19 + 32) = *(_WORD *)(v19 + 66);
        sub_1B0CC7574(v17, *(double *)&v45);
        uint64_t v16 = v22;
        goto LABEL_23;
      }
      uint64_t v41 = *(_DWORD **)(v48 + 40);
      if ((*(_WORD *)(v48 + 52) & 4) == 0 || v41[8] < *(_DWORD *)(v48 + 48)) {
        break;
      }
      if (v41[32])
      {
        uint64_t v42 = sub_1B0D0F4D4(v48);
        goto LABEL_82;
      }
      uint64_t v22 = 0;
      uint64_t v43 = v48;
      if (v48)
      {
LABEL_84:
        if ((*(_WORD *)(v43 + 52) & 0x20) != 0)
        {
          uint64_t v44 = *(void *)(v43 + 40);
          --*(_DWORD *)(v44 + 152);
          *(void *)(v43 + 32) = *(void *)(v44 + 168);
          *(void *)(v44 + 168) = v43;
          (*(void (**)(void, void, void))(**(void **)(v44 + 72) + 144))(*(void *)(v44 + 72), *(void *)(v44 + 200) * (*(_DWORD *)(v43 + 48) - 1), *(void *)(v43 + 8));
        }
        else
        {
          sub_1B0D0E3E8(v43);
        }
      }
LABEL_87:
      if ((int)v39 < v24)
      {
        uint64_t v39 = (v39 + 1);
        if (!v22) {
          continue;
        }
      }
      goto LABEL_92;
    }
    uint64_t v22 = v41[12];
    if (!v22)
    {
      if (v41[46] <= v41[50]) {
        uint64_t v42 = sub_1B0CBD7E0(v48);
      }
      else {
        uint64_t v42 = sub_1B0D133D0(v48);
      }
LABEL_82:
      uint64_t v22 = v42;
    }
    uint64_t v43 = v48;
    if (v48) {
      goto LABEL_84;
    }
    goto LABEL_87;
  }
LABEL_92:
  if (v22) {
    goto LABEL_93;
  }
  long long v47 = *(_OWORD *)(v19 + 16);
  *(_OWORD *)(v19 + 34) = *(_OWORD *)v19;
  *(_OWORD *)(v19 + 50) = v47;
  *(_WORD *)(v19 + 66) = *(_WORD *)(v19 + 32);
  if (v20 > 1)
  {
    uint64_t v16 = 0;
  }
  else
  {
    uint64_t v16 = sub_1B0CC19D8(v17, 0, 0);
    if (!v16) {
      uint64_t v16 = sub_1B0D054B8(v17);
    }
  }
LABEL_23:
  if (v49) {
    sub_1B0D05580(v49);
  }
  if (!*((unsigned char *)a1 + 111)) {
    sub_1B0D0E55C((uint64_t)a1);
  }
  uint64_t v18 = *((void *)a1 + 3);
  if (v18) {
    xmmword_1EB21CA50(v18);
  }
  if (v16) {
    goto LABEL_43;
  }
  return v16;
}

uint64_t sub_1B0D05234(uint64_t a1, int a2, char a3)
{
  uint64_t result = *(unsigned int *)(a1 + 48);
  if (result) {
    return result;
  }
  *(unsigned char *)(a1 + 26) = a3;
  if (*(unsigned char *)(a1 + 21) != 1) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 344);
  if (!v5)
  {
    unsigned int v9 = *(unsigned __int8 *)(a1 + 22);
    if (v9 <= 5 && ((1 << v9) & 0x23) != 0)
    {
      if (*(unsigned char *)(a1 + 17))
      {
        if (v9 == 5) {
          goto LABEL_17;
        }
      }
      else
      {
        uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 72) + 56))(*(void *)(a1 + 72), 2);
        if (result) {
          return result;
        }
        if (*(unsigned char *)(a1 + 22) == 5) {
          goto LABEL_17;
        }
      }
      *(unsigned char *)(a1 + 22) = 2;
    }
LABEL_17:
    if (a2)
    {
      while (1)
      {
        unsigned int v11 = *(unsigned __int8 *)(a1 + 22);
        if (v11 >= 4 && v11 != 5) {
          break;
        }
        if (*(unsigned char *)(a1 + 17)) {
          goto LABEL_31;
        }
        uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 72) + 56))(*(void *)(a1 + 72), 4);
        if (result != 5)
        {
          if (result) {
            return result;
          }
LABEL_31:
          *(unsigned char *)(a1 + 22) = 4;
          goto LABEL_39;
        }
        int v13 = (*(uint64_t (**)(void))(a1 + 232))(*(void *)(a1 + 240));
        uint64_t result = 5;
        if (!v13) {
          return result;
        }
      }
    }
    goto LABEL_39;
  }
  if (!*(unsigned char *)(a1 + 8)) {
    goto LABEL_38;
  }
  uint64_t v6 = (unsigned char *)(v5 + 63);
  if (*(unsigned char *)(v5 + 63)) {
    goto LABEL_38;
  }
  unsigned int v7 = *(unsigned __int8 *)(a1 + 22);
  if (v7 < 4 || v7 == 5)
  {
    if (*(unsigned char *)(a1 + 17))
    {
      *(unsigned char *)(a1 + 22) = 4;
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 72) + 56))(*(void *)(a1 + 72), 4);
      if (result) {
        return result;
      }
      uint64_t v5 = *(void *)(a1 + 344);
      int v14 = *(unsigned __int8 *)(v5 + 63);
      uint64_t v6 = (unsigned char *)(v5 + 63);
      *(unsigned char *)(a1 + 22) = 4;
      if (v14) {
        goto LABEL_37;
      }
    }
  }
  (*(void (**)(void, void, uint64_t, uint64_t))(**(void **)(v5 + 8) + 112))(*(void *)(v5 + 8), (*(__int16 *)(v5 + 60) + 3), 1, 5);
  uint64_t v5 = *(void *)(a1 + 344);
LABEL_37:
  *uint64_t v6 = 1;
LABEL_38:
  if (*(unsigned char *)(v5 + 64))
  {
LABEL_39:
    uint64_t result = 0;
    *(unsigned char *)(a1 + 21) = 2;
    int v15 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 40) = v15;
    *(_DWORD *)(a1 + 44) = v15;
    *(_DWORD *)(a1 + 36) = v15;
    *(void *)(a1 + 96) = 0;
    return result;
  }
  if (*(unsigned char *)(v5 + 66)) {
    return 8;
  }
  if (*(unsigned char *)(v5 + 63)
    || (uint64_t result = (*(uint64_t (**)(void, void, uint64_t, uint64_t))(**(void **)(v5 + 8) + 112))(*(void *)(v5 + 8), 0, 1, 10), !result))
  {
    *(unsigned char *)(v5 + 64) = 1;
    uint64_t v16 = **(uint64_t ***)(v5 + 48);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    uint64_t v19 = v16[2];
    uint64_t v20 = v16[3];
    uint64_t v21 = v16[4];
    uint64_t v22 = v16[5];
    if (*(void *)(v5 + 72) == v17
      && *(void *)(v5 + 80) == v18
      && *(void *)(v5 + 88) == v19
      && *(void *)(v5 + 96) == v20
      && *(void *)(v5 + 104) == v21
      && *(void *)(v5 + 112) == v22)
    {
      goto LABEL_39;
    }
    if (!*(unsigned char *)(v5 + 63)) {
      (*(void (**)(void, void, uint64_t, uint64_t))(**(void **)(v5 + 8) + 112))(*(void *)(v5 + 8), 0, 1, 9);
    }
    *(unsigned char *)(v5 + 64) = 0;
    return 517;
  }
  return result;
}

uint64_t sub_1B0D054B8(uint64_t a1)
{
  uint64_t result = *(unsigned int *)(a1 + 48);
  if (!result)
  {
    ++*(_DWORD *)(a1 + 132);
    if (*(unsigned char *)(a1 + 21) == 2 && *(unsigned char *)(a1 + 8) && *(unsigned char *)(a1 + 9) == 1)
    {
      uint64_t result = 0;
      *(unsigned char *)(a1 + 21) = 1;
    }
    else
    {
      uint64_t result = sub_1B0CB2BC8(a1, *(unsigned __int8 *)(a1 + 24), 1);
      if (result == 13 || result == 10)
      {
        *(_DWORD *)(a1 + 48) = result;
        *(unsigned char *)(a1 + 21) = 6;
        uint64_t v4 = sub_1B0D11088;
        if (!result)
        {
          if (!*(unsigned char *)(a1 + 27) || (uint64_t v4 = sub_1B0D11094, *(void *)(a1 + 296))) {
            uint64_t v4 = sub_1B0D112F8;
          }
        }
        *(void *)(a1 + 288) = v4;
      }
    }
  }
  return result;
}

uint64_t sub_1B0D05580(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t result = sub_1B0D0E3E8(a1);
  if (!*(void *)(*(void *)(v1 + 336) + 24))
  {
    int v4 = *(unsigned __int8 *)(v1 + 21);
    if (*(unsigned char *)(v1 + 21))
    {
      if (v4 == 1)
      {
        if (!*(unsigned char *)(v1 + 8)) {
          sub_1B0CB2BC8(v1, 0, 0);
        }
      }
      else if (v4 != 6)
      {
        if (off_1E9B52208) {
          double v3 = off_1E9B52208(result);
        }
        uint64_t v5 = sub_1B0CC7574(v1, v3);
        if (off_1E9B52210) {
          off_1E9B52210(v5);
        }
      }
    }
    return sub_1B0CB3198(v1);
  }
  return result;
}

uint64_t sqlite3_rekey(sqlite3 *a1, unsigned char *a2, int a3)
{
  return sqlite3_rekey_v2(a1, 0, a2, a3);
}

const char *sqlite3_sourceid(void)
{
  return "2023-10-10 13:08:14 1b37c146ee9ebb7acd0160c0ab1fd11017a419fa8a3187386ed8cb32b709aapl";
}

uint64_t sub_1B0D05648()
{
  return 0;
}

uint64_t sub_1B0D05650()
{
  return 0;
}

char *sub_1B0D05658(signed int a1)
{
  if (a1 <= 1)
  {
    uint64_t result = (char *)sub_1B0C7FC94(16);
    if (!result) {
      return result;
    }
    double v3 = result;
    *(void *)uint64_t result = 0;
    *((void *)result + 1) = 0;
    *(_DWORD *)uint64_t result = a1;
    if (!*((void *)result + 1)) {
      goto LABEL_8;
    }
    return v3;
  }
  if (a1 >= 0xE)
  {
    sub_1B0CE1978(29127);
    return 0;
  }
  double v3 = (char *)&unk_1EB21D4C0 + 16 * (a1 - 2);
  if (*((void *)v3 + 1)) {
    return v3;
  }
LABEL_8:
  int v4 = sub_1B0D05A1C(a1);
  *((void *)v3 + 1) = v4;
  if (v4) {
    uint64_t result = v3;
  }
  else {
    uint64_t result = 0;
  }
  if (a1 <= 1 && !v4)
  {
    uint64_t v5 = (void (**)(char *))&off_1EB21C9E8;
    if (dword_1EB21C9C0)
    {
      if ((void)xmmword_1EB2201B0) {
        xmmword_1EB21CA40(xmmword_1EB2201B0);
      }
      qword_1EB220108 -= (int)off_1EB21C9F8(v3);
      --qword_1EB220150;
      off_1EB21C9E8(v3);
      double v3 = (char *)xmmword_1EB2201B0;
      if (!(void)xmmword_1EB2201B0) {
        return 0;
      }
      uint64_t v5 = (void (**)(char *))&xmmword_1EB21CA50;
    }
    (*v5)(v3);
    return 0;
  }
  return result;
}

uint64_t sub_1B0D05784(uint64_t a1)
{
  if (*(int *)a1 > 1)
  {
    return sub_1B0CE1978(29165);
  }
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v2 + 8) > 1u)
  {
    sub_1B0CE1978(29571);
    int v4 = &off_1EB21C9E8;
    if (!dword_1EB21C9C0)
    {
LABEL_19:
      uint64_t v6 = *v4;
      return v6(v1);
    }
    goto LABEL_15;
  }
  double v3 = &off_1EB21C9E8;
  if (!dword_1EB21C9C0) {
    goto LABEL_8;
  }
  if ((void)xmmword_1EB2201B0) {
    xmmword_1EB21CA40(xmmword_1EB2201B0);
  }
  qword_1EB220108 -= (int)off_1EB21C9F8(v2);
  --qword_1EB220150;
  off_1EB21C9E8(v2);
  uint64_t v2 = xmmword_1EB2201B0;
  if ((void)xmmword_1EB2201B0)
  {
    double v3 = &xmmword_1EB21CA50;
LABEL_8:
    (*v3)(v2);
  }
  int v4 = &off_1EB21C9E8;
  if (!dword_1EB21C9C0) {
    goto LABEL_19;
  }
LABEL_15:
  if ((void)xmmword_1EB2201B0) {
    xmmword_1EB21CA40(xmmword_1EB2201B0);
  }
  qword_1EB220108 -= (int)off_1EB21C9F8(v1);
  --qword_1EB220150;
  uint64_t result = off_1EB21C9E8(v1);
  uint64_t v1 = xmmword_1EB2201B0;
  if ((void)xmmword_1EB2201B0)
  {
    int v4 = &xmmword_1EB21CA50;
    goto LABEL_19;
  }
  return result;
}

uint64_t sub_1B0D05928(uint64_t a1)
{
  if (*(_DWORD *)a1 == -1)
  {
    uint64_t v2 = *(os_unfair_lock_s **)(a1 + 8);
    if (v2[2]._os_unfair_lock_opaque == 1)
    {
      uint64_t result = os_unfair_recursive_lock_trylock();
      if (result) {
        return result;
      }
    }
    else
    {
      uint64_t result = os_unfair_lock_trylock(v2);
      if (result) {
        return result;
      }
    }
    sub_1B0D05AB4();
  }
  if (*(_DWORD *)(*(void *)(a1 + 8) + 8) == 1)
  {
    return os_unfair_recursive_lock_lock_with_options();
  }
  else
  {
    return MEMORY[0x1F40CD5E8]();
  }
}

uint64_t sub_1B0D059C8(uint64_t a1)
{
  uint64_t v1 = *(os_unfair_lock_s **)(a1 + 8);
  if (v1[2]._os_unfair_lock_opaque == 1) {
    int v2 = os_unfair_recursive_lock_trylock();
  }
  else {
    int v2 = os_unfair_lock_trylock(v1);
  }
  if (v2) {
    return 0;
  }
  else {
    return 5;
  }
}

void sub_1B0D05A04(uint64_t a1)
{
  uint64_t v1 = *(os_unfair_lock_s **)(a1 + 8);
  if (v1[2]._os_unfair_lock_opaque == 1) {
    os_unfair_recursive_lock_unlock();
  }
  else {
    os_unfair_lock_unlock(v1);
  }
}

char *sub_1B0D05A1C(unsigned int a1)
{
  if ((a1 & 0x80000000) != 0)
  {
    int v2 = 29522;
    goto LABEL_11;
  }
  if (a1)
  {
    if (a1 == 1)
    {
      uint64_t result = (char *)sub_1B0C7FC94(12);
      if (result)
      {
        *(void *)uint64_t result = 0;
        *((_DWORD *)result + 2) = 1;
      }
      return result;
    }
    if (a1 < 0xE) {
      return (char *)&unk_1EB21D1C0 + 64 * (unint64_t)(a1 - 2);
    }
    int v2 = 29550;
LABEL_11:
    sub_1B0CE1978(v2);
    return 0;
  }
  uint64_t result = (char *)sub_1B0C7FC94(12);
  if (result)
  {
    *(void *)uint64_t result = 0;
    *((_DWORD *)result + 2) = 0;
    *(_DWORD *)uint64_t result = 0;
  }
  return result;
}

void sub_1B0D05AB4()
{
  if (qword_1E9B52088 != -1) {
    dispatch_once(&qword_1E9B52088, &unk_1F09A4FE8);
  }
  if (byte_1E9B52084 != 1 || (dword_1EB21CB84 & 0x10) != 0)
  {
    qword_1E9B52010 = (uint64_t)"BUG IN CLIENT OF libsqlite3.dylib: illegal multi-threaded access to database connection";
    __break(1u);
  }
}

uint64_t sub_1B0D05B44()
{
  BOOL v0 = getprogname();
  if (!strcmp(v0, "Paper")) {
    byte_1E9B52084 = 1;
  }
  if (!strcmp(v0, "GooglePhotos")) {
    byte_1E9B52084 = 1;
  }
  if (!strcmp(v0, "grindrx")) {
    byte_1E9B52084 = 1;
  }
  uint64_t result = strcmp(v0, "AlipayWallet");
  if (!result) {
    byte_1E9B52084 = 1;
  }
  return result;
}

uint64_t sub_1B0D05BE4()
{
  return 0;
}

uint64_t sub_1B0D05BEC()
{
  return 0;
}

uint64_t sub_1B0D05BF4()
{
  return 8;
}

uint64_t sub_1B0D05C04()
{
  return 0;
}

void *sub_1B0D05C10(void *result, void *a2)
{
  int v2 = a2;
  if (result)
  {
    if (result[64] > (unint64_t)a2)
    {
      if (result[62] <= (unint64_t)a2)
      {
        *a2 = result[61];
        result[61] = a2;
        return result;
      }
      if (result[63] <= (unint64_t)a2)
      {
        *a2 = result[59];
        result[59] = a2;
        return result;
      }
    }
    if (result[102])
    {
      return (void *)sub_1B0D05D48((uint64_t)result, (unint64_t)a2);
    }
  }
  if (!a2) {
    return result;
  }
  double v3 = &off_1EB21C9E8;
  if (!dword_1EB21C9C0) {
    goto LABEL_15;
  }
  if ((void)xmmword_1EB2201B0) {
    xmmword_1EB21CA40(xmmword_1EB2201B0);
  }
  qword_1EB220108 -= (int)off_1EB21C9F8(v2);
  --qword_1EB220150;
  uint64_t result = (void *)off_1EB21C9E8(v2);
  int v2 = (void *)xmmword_1EB2201B0;
  if ((void)xmmword_1EB2201B0)
  {
    double v3 = &xmmword_1EB21CA50;
LABEL_15:
    int v4 = (uint64_t (*)(void *))*v3;
    return (void *)v4(v2);
  }
  return result;
}

uint64_t sub_1B0D05D48(uint64_t a1, unint64_t a2)
{
  if (a1 && *(void *)(a1 + 520) > a2)
  {
    if (*(void *)(a1 + 496) <= a2)
    {
      uint64_t result = 128;
      goto LABEL_6;
    }
    if (*(void *)(a1 + 504) <= a2)
    {
      uint64_t result = *(unsigned __int16 *)(a1 + 438);
      goto LABEL_6;
    }
  }
  uint64_t result = off_1EB21C9F8(a2);
LABEL_6:
  **(_DWORD **)(a1 + 816) += result;
  return result;
}

uint64_t sub_1B0D05DC0(uint64_t a1, unint64_t a2)
{
  if (*(unsigned __int16 *)(a1 + 436) < a2)
  {
    if (*(_DWORD *)(a1 + 432))
    {
      if (*(unsigned char *)(a1 + 103)) {
        return 0;
      }
    }
    else
    {
      ++*(_DWORD *)(a1 + 452);
    }
    return sub_1B0D05FA0(a1, a2);
  }
  if (a2 <= 0x80)
  {
    double v3 = *(void **)(a1 + 488);
    if (v3)
    {
      *(void *)(a1 + 488) = *v3;
      goto LABEL_16;
    }
    double v3 = *(void **)(a1 + 480);
    if (v3)
    {
      *(void *)(a1 + 480) = *v3;
      goto LABEL_16;
    }
  }
  double v3 = *(void **)(a1 + 472);
  if (v3)
  {
    *(void *)(a1 + 472) = *v3;
  }
  else
  {
    double v3 = *(void **)(a1 + 464);
    if (!v3)
    {
      ++*(_DWORD *)(a1 + 456);
      return sub_1B0D05FA0(a1, a2);
    }
    *(void *)(a1 + 464) = *v3;
  }
LABEL_16:
  ++*(_DWORD *)(a1 + 448);
  return (uint64_t)v3;
}

uint64_t sub_1B0D05E6C(uint64_t a1, void *a2, unint64_t a3)
{
  if (*(unsigned char *)(a1 + 103)) {
    return 0;
  }
  if (*(void *)(a1 + 504) > (unint64_t)a2 || *(void *)(a1 + 520) <= (unint64_t)a2)
  {
    uint64_t v3 = sub_1B0C8E1B8((uint64_t)a2, a3);
    if (v3) {
      return v3;
    }
    if (*(unsigned char *)(a1 + 103) || *(unsigned char *)(a1 + 104)) {
      return 0;
    }
    *(unsigned char *)(a1 + 103) = 1;
    if (*(int *)(a1 + 220) >= 1) {
      *(_DWORD *)(a1 + 424) = 1;
    }
    ++*(_DWORD *)(a1 + 432);
    *(_WORD *)(a1 + 436) = 0;
    uint64_t v15 = *(void *)(a1 + 344);
    if (!v15) {
      return 0;
    }
    sub_1B0CEF2BC(v15, "out of memory", v9, v10, v11, v12, v13, v14, v18);
    uint64_t v16 = *(void *)(a1 + 344);
    *(_DWORD *)(v16 + 24) = 7;
    uint64_t v17 = *(void *)(v16 + 256);
    if (!v17) {
      return 0;
    }
    uint64_t v3 = 0;
    do
    {
      ++*(_DWORD *)(v17 + 48);
      *(_DWORD *)(v17 + 24) = 7;
      uint64_t v17 = *(void *)(v17 + 256);
    }
    while (v17);
  }
  else
  {
    unsigned int v7 = (void *)sub_1B0D05DC0(a1, a3);
    uint64_t v3 = (uint64_t)v7;
    if (v7)
    {
      if (*(void *)(a1 + 496) <= (unint64_t)a2) {
        size_t v8 = 128;
      }
      else {
        size_t v8 = *(unsigned __int16 *)(a1 + 438);
      }
      memcpy(v7, a2, v8);
      if (a2) {
        sub_1B0D05C10((void *)a1, a2);
      }
    }
  }
  return v3;
}

uint64_t sub_1B0D05FA0(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = sub_1B0C7FC94(a2);
  if (!v9 && !*(unsigned char *)(a1 + 103) && !*(unsigned char *)(a1 + 104))
  {
    *(unsigned char *)(a1 + 103) = 1;
    if (*(int *)(a1 + 220) >= 1) {
      *(_DWORD *)(a1 + 424) = 1;
    }
    ++*(_DWORD *)(a1 + 432);
    *(_WORD *)(a1 + 436) = 0;
    uint64_t v11 = *(void *)(a1 + 344);
    if (v11)
    {
      sub_1B0CEF2BC(v11, "out of memory", v3, v4, v5, v6, v7, v8, v13);
      for (uint64_t i = *(void *)(a1 + 344); ; ++*(_DWORD *)(i + 48))
      {
        *(_DWORD *)(i + 24) = 7;
        uint64_t i = *(void *)(i + 256);
        if (!i) {
          break;
        }
      }
    }
  }
  return v9;
}

void *sub_1B0D06044(uint64_t *a1)
{
  uint64_t v2 = *a1;
  int v3 = *((_DWORD *)a1 + 6);
  if (v2)
  {
    uint64_t v4 = (void *)sub_1B0D05DC0(v2, (v3 + 1));
    if (v4)
    {
LABEL_3:
      memcpy(v4, (const void *)a1[1], (*((_DWORD *)a1 + 6) + 1));
      *((unsigned char *)a1 + 29) |= 4u;
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v4 = (void *)sub_1B0C7FC94((v3 + 1));
    if (v4) {
      goto LABEL_3;
    }
  }
  *((unsigned char *)a1 + 28) = 7;
  if (*((_DWORD *)a1 + 5))
  {
    char v5 = *((unsigned char *)a1 + 29);
    if ((v5 & 4) != 0)
    {
      uint64_t v6 = (void *)a1[1];
      if (v6)
      {
        sub_1B0D05C10((void *)*a1, v6);
        char v5 = *((unsigned char *)a1 + 29);
      }
      *((unsigned char *)a1 + 29) = v5 & 0xFB;
    }
    *((_DWORD *)a1 + 4) = 0;
    *((_DWORD *)a1 + 6) = 0;
  }
LABEL_11:
  a1[1] = (uint64_t)v4;
  return v4;
}

os_log_t sub_1B0D060F8()
{
  os_log_t v0 = os_log_create("com.apple.libsqlite3", "logging");
  uint64_t v1 = MEMORY[0x1E4F14500];
  if (v0) {
    uint64_t v2 = (uint64_t)v0;
  }
  else {
    uint64_t v2 = MEMORY[0x1E4F14500];
  }
  qword_1EB2202C8 = v2;
  os_log_t v3 = os_log_create("com.apple.libsqlite3", "logging-persist");
  if (v3) {
    uint64_t v4 = (uint64_t)v3;
  }
  else {
    uint64_t v4 = v1;
  }
  qword_1EB2202D0 = v4;
  os_log_t v5 = os_log_create("com.apple.libsqlite3", "queries");
  if (v5) {
    uint64_t v6 = (uint64_t)v5;
  }
  else {
    uint64_t v6 = v1;
  }
  qword_1EB2202D8 = v6;
  os_log_t v7 = os_log_create("com.apple.libsqlite3", "queries_performance");
  if (v7) {
    uint64_t v8 = (uint64_t)v7;
  }
  else {
    uint64_t v8 = v1;
  }
  qword_1EB2202E0 = v8;
  os_log_t v9 = os_log_create("com.apple.libsqlite3", "queries_persist");
  if (v9) {
    uint64_t v10 = (uint64_t)v9;
  }
  else {
    uint64_t v10 = v1;
  }
  qword_1EB2202E8 = v10;
  os_log_t result = os_log_create("com.apple.libsqlite3", "connections");
  if (result) {
    uint64_t v12 = (uint64_t)result;
  }
  else {
    uint64_t v12 = v1;
  }
  qword_1EB2202F0 = v12;
  return result;
}

uint64_t sub_1B0D061E4(uint64_t a1, int *a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    xmmword_1EB21CA40(v5);
    uint64_t v4 = *(void *)(a1 + 16);
  }
  if (*(unsigned __int8 *)(v4 + 32) <= 1u)
  {
    if (*(unsigned char *)(v4 + 33))
    {
      uint64_t v6 = 0;
      int v7 = 0;
      uint64_t v8 = *(void *)(v4 + 16);
      if (!v8) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
    uint64_t v10 = *(unsigned int *)(a1 + 24);
    int v11 = off_1EC526430(v10, 92);
    if (v11 == -1)
    {
      if ((*__error() == 45 || *__error() == 25) && !off_1EC526430(v10, 7)) {
        goto LABEL_17;
      }
    }
    else if (!v11)
    {
LABEL_17:
      uint64_t v6 = 0;
      int v7 = 1;
LABEL_18:
      uint64_t v8 = *(void *)(*(void *)(a1 + 16) + 16);
      if (!v8) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
    int v7 = 0;
    *(_DWORD *)(a1 + 32) = *__error();
    uint64_t v6 = 3594;
    goto LABEL_18;
  }
  uint64_t v6 = 0;
  int v7 = 1;
  uint64_t v8 = *(void *)(v4 + 16);
  if (v8) {
LABEL_8:
  }
    xmmword_1EB21CA50(v8);
LABEL_9:
  *a2 = v7;
  return v6;
}

uint64_t sub_1B0D06674(uint64_t a1, int a2)
{
  uint64_t v2 = *(void **)(a1 + 64);
  if (!v2) {
    return 0;
  }
  uint64_t v5 = *v2;
  uint64_t v6 = *(void *)(*v2 + 8);
  if (v6) {
    xmmword_1EB21CA40(v6);
  }
  int v7 = (void *)(v5 + 56);
  do
  {
    uint64_t v8 = v7;
    os_log_t v9 = (void *)*v7;
    int v7 = (void *)(*v7 + 8);
  }
  while (v9 != v2);
  *uint64_t v8 = v2[1];
  uint64_t v10 = &off_1EB21C9E8;
  if (dword_1EB21C9C0)
  {
    if ((void)xmmword_1EB2201B0) {
      xmmword_1EB21CA40(xmmword_1EB2201B0);
    }
    qword_1EB220108[0] -= (int)off_1EB21C9F8(v2);
    --qword_1EB220150;
    off_1EB21C9E8(v2);
    uint64_t v2 = (void *)xmmword_1EB2201B0;
    if (!(void)xmmword_1EB2201B0) {
      goto LABEL_12;
    }
    uint64_t v10 = &xmmword_1EB21CA50;
  }
  (*v10)(v2);
LABEL_12:
  *(void *)(a1 + 64) = 0;
  uint64_t v11 = *(void *)(v5 + 8);
  if (v11) {
    xmmword_1EB21CA50(v11);
  }
  if (qword_1EB2201D0) {
    xmmword_1EB21CA40(qword_1EB2201D0);
  }
  int v12 = *(_DWORD *)(v5 + 48) - 1;
  *(_DWORD *)(v5 + 48) = v12;
  if (!v12)
  {
    if (a2 == 1 && (*(_DWORD *)(v5 + 24) & 0x80000000) == 0) {
      off_1EC526508(*(void *)(v5 + 16));
    }
    sub_1B0D0BD4C(a1);
  }
  if (qword_1EB2201D0) {
    xmmword_1EB21CA50(qword_1EB2201D0);
  }
  return 0;
}

uint64_t sub_1B0D067E8(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  if (*(_DWORD *)(a1 + 160) || (uint64_t v9 = *(void *)(a1 + 64)) != 0 && *(_DWORD *)(*(void *)v9 + 168))
  {
    sqlite3_log(27, "denying read from invalidated fd %d", *(_DWORD *)(a1 + 24));
    return 6922;
  }
  else
  {
    *a4 = 0;
    if (*(uint64_t *)(a1 + 96) < 1) {
      return 0;
    }
    if (*(void *)(a1 + 104) || (uint64_t result = sub_1B0D07EEC(a1, -1), !result))
    {
      if (*(void *)(a1 + 80) < a2 + a3) {
        return 0;
      }
      uint64_t result = 0;
      *a4 = *(void *)(a1 + 104) + a2;
      ++*(_DWORD *)(a1 + 76);
    }
  }
  return result;
}

uint64_t sub_1B0D068BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    --*(_DWORD *)(a1 + 76);
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 104);
    if (v4)
    {
      off_1EC5265B0(v4, *(void *)(a1 + 88));
      *(void *)(a1 + 104) = 0;
      *(void *)(a1 + 80) = 0;
      *(void *)(a1 + 88) = 0;
    }
  }
  return 0;
}

void sub_1B0D06914(uint64_t a1)
{
  if ((*(_WORD *)(a1 + 30) & 0x80) == 0)
  {
    memset(v2, 0, sizeof(v2));
    if (off_1EC526400(*(unsigned int *)(a1 + 24), v2))
    {
      sqlite3_log(28, "cannot fstat db file %s");
    }
    else if (WORD3(v2[0]) == 1)
    {
      if (*(void *)(a1 + 16))
      {
        memset(v3, 0, sizeof(v3));
        if (off_1EC5263E8(*(void *)(a1 + 56), v3)
          || *((void *)&v3[0] + 1) != *(void *)(*(void *)(a1 + 16) + 8))
        {
          sqlite3_log(28, "file renamed while open: %s");
        }
      }
    }
    else if (WORD3(v2[0]))
    {
      sqlite3_log(28, "multiple links to file: %s");
    }
    else if ((*(_WORD *)(a1 + 30) & 0x20) == 0)
    {
      sqlite3_log(28, "file unlinked while open: %s");
    }
  }
}

uint64_t sub_1B0D06A2C(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return result;
  }
  int v2 = *(_DWORD *)(v1 + 48) - 1;
  *(_DWORD *)(v1 + 48) = v2;
  if (v2) {
    return result;
  }
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(v1 + 16);
  if (v4) {
    xmmword_1EB21CA40(v4);
  }
  sub_1B0D07034(v3);
  uint64_t v5 = *(void *)(v1 + 16);
  if (v5) {
    xmmword_1EB21CA50(v5);
  }
  uint64_t v7 = *(void *)(v1 + 64);
  uint64_t v6 = *(void *)(v1 + 72);
  if (v6)
  {
    *(void *)(v6 + 64) = v7;
    uint64_t v7 = *(void *)(v1 + 64);
    if (!v7) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  qword_1EB220300 = *(void *)(v1 + 64);
  if (v7) {
LABEL_10:
  }
    *(void *)(v7 + 72) = v6;
LABEL_11:
  if (*(void *)(v1 + 16)) {
    off_1EB21CA38();
  }
  uint64_t v8 = &off_1EB21C9E8;
  if (!dword_1EB21C9C0) {
    goto LABEL_18;
  }
  if ((void)xmmword_1EB2201B0) {
    xmmword_1EB21CA40(xmmword_1EB2201B0);
  }
  qword_1EB220108 -= (int)off_1EB21C9F8(v1);
  --qword_1EB220150;
  uint64_t result = off_1EB21C9E8(v1);
  uint64_t v1 = xmmword_1EB2201B0;
  if ((void)xmmword_1EB2201B0)
  {
    uint64_t v8 = &xmmword_1EB21CA50;
LABEL_18:
    uint64_t v9 = *v8;
    return v9(v1);
  }
  return result;
}

uint64_t sub_1B0D06B70(const char *a1, int a2, uint64_t a3)
{
  if (xmmword_1EB2201E0 == 0) {
    return open(a1, a2, a3);
  }
  else {
    return guarded_open_np();
  }
}

uint64_t sub_1B0D06BCC(uint64_t a1)
{
  if (qword_1EB2201F0) {
    return MEMORY[0x1F40CC5B8](a1, &qword_1E9B51EF8);
  }
  else {
    return close(a1);
  }
}

ssize_t sub_1B0D06BE8(uint64_t a1, void *__buf, size_t __nbyte)
{
  if (qword_1EB220200) {
    return MEMORY[0x1F40CC5D8](a1, &qword_1E9B51EF8, __buf, __nbyte);
  }
  else {
    return write(a1, __buf, __nbyte);
  }
}

ssize_t sub_1B0D06C14(uint64_t a1, void *__buf, size_t __nbyte, off_t a4)
{
  if (qword_1EB2201F8) {
    return MEMORY[0x1F40CC5D0](a1, &qword_1E9B51EF8, __buf, __nbyte, a4);
  }
  else {
    return pwrite(a1, __buf, __nbyte, a4);
  }
}

uint64_t sub_1B0D06C48()
{
  return sysconf(29);
}

uint64_t sub_1B0D06C64(uint64_t a1, const char *a2, const char *a3, int __errnum, int a5)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  *(_OWORD *)__strerrbuf = 0u;
  strerror_r(__errnum, __strerrbuf, 0x4FuLL);
  uint64_t v10 = &byte_1B0DE9952;
  if (a3) {
    uint64_t v10 = a3;
  }
  sqlite3_log(a1, "os_unix.c:%d: (%d) %s(%s) - %s", a5, __errnum, a2, v10, __strerrbuf);
  return a1;
}

uint64_t sub_1B0D06D2C(int a1)
{
  return sub_1B0D06FEC(14, a1, "cannot open file");
}

uint64_t sub_1B0D06D40(char *a1, int a2, uint64_t a3, int a4)
{
  if (a3) {
    uint64_t v7 = a3;
  }
  else {
    uint64_t v7 = 420;
  }
  int v15 = a4 & (a2 << 22 >> 31);
  int v8 = a2 & 0xA00;
  while (1)
  {
    while (off_1EC526388 == sub_1B0D06B70)
    {
      if (xmmword_1EB2201E0 == 0)
      {
        uint64_t v9 = open(a1, a2, v7);
        if ((v9 & 0x80000000) == 0) {
          goto LABEL_15;
        }
      }
      else
      {
        if (v15 && (void)xmmword_1EB2201E0)
        {
          uint64_t v9 = guarded_open_dprotected_np();
          if ((v9 & 0x80000000) != 0) {
            goto LABEL_19;
          }
          goto LABEL_15;
        }
        uint64_t v9 = guarded_open_np();
        if ((v9 & 0x80000000) == 0) {
          goto LABEL_15;
        }
      }
LABEL_19:
      if (*__error() != 4) {
        return v9;
      }
    }
    uint64_t v9 = off_1EC526388(a1, a2, v7);
    if ((v9 & 0x80000000) != 0) {
      goto LABEL_19;
    }
LABEL_15:
    if (v9 > 2) {
      break;
    }
    if (v8 == 2560) {
      off_1EC526508(a1);
    }
    off_1EC5263A0(v9);
    sqlite3_log(28, "attempt to open \"%s\" as file descriptor %d", a1, v9);
    if ((off_1EC526388("/dev/null", 0, a3) & 0x80000000) != 0) {
      return 0xFFFFFFFFLL;
    }
  }
  if (a3)
  {
    long long v18 = 0u;
    long long v19 = 0u;
    long long v17 = 0u;
    memset(v16, 0, sizeof(v16));
    BOOL v10 = !off_1EC526400(v9, v16) && (void)v17 == 0;
    if (v10 && (WORD2(v16[0]) & 0x1FF) != a3) {
      off_1EC5264D8(v9, a3);
    }
  }
  if (fcntl(v9, 95, 1) == -1)
  {
    int v11 = *__error();
    int v12 = __error();
    long long v13 = strerror(*v12);
    sqlite3_log(28, "Failed to confine fd %d for file %s (%d): %s", v9, a1, v11, v13);
  }
  return v9;
}

uint64_t sub_1B0D06FEC(uint64_t a1, int a2, const char *a3)
{
  return a1;
}

uint64_t sub_1B0D07034(uint64_t result)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *(void *)(result + 16);
  uint64_t v1 = *(unsigned int **)(v9 + 40);
  if (v1)
  {
    uint64_t v2 = result;
    do
    {
      uint64_t v3 = (unsigned int *)*((void *)v1 + 1);
      uint64_t v4 = *v1;
      if ((v4 & 0x80000000) == 0 && off_1EC5263A0(v4))
      {
        uint64_t v5 = *(const char **)(v2 + 56);
        int v6 = *__error();
        long long v13 = 0u;
        long long v14 = 0u;
        long long v11 = 0u;
        long long v12 = 0u;
        *(_OWORD *)__strerrbuf = 0u;
        strerror_r(v6, __strerrbuf, 0x4FuLL);
        uint64_t v7 = &byte_1B0DE9952;
        if (v5) {
          uint64_t v7 = v5;
        }
        sqlite3_log(4106, "os_unix.c:%d: (%d) %s(%s) - %s", 41827, v6, "close", v7, __strerrbuf);
      }
      int v8 = (uint64_t (**)(unsigned int *))&off_1EB21C9E8;
      if (dword_1EB21C9C0)
      {
        if ((void)xmmword_1EB2201B0) {
          xmmword_1EB21CA40(xmmword_1EB2201B0);
        }
        qword_1EB220108 -= (int)off_1EB21C9F8(v1);
        --qword_1EB220150;
        uint64_t result = off_1EB21C9E8(v1);
        uint64_t v1 = (unsigned int *)xmmword_1EB2201B0;
        if (!(void)xmmword_1EB2201B0) {
          goto LABEL_4;
        }
        int v8 = (uint64_t (**)(unsigned int *))&xmmword_1EB21CA50;
      }
      uint64_t result = (*v8)(v1);
LABEL_4:
      uint64_t v1 = v3;
    }
    while (v3);
  }
  *(void *)(v9 + 40) = 0;
  return result;
}

void sub_1B0D071D8(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if ((a2 & 0x80000000) == 0 && off_1EC5263A0(a2))
  {
    if (a1) {
      uint64_t v5 = *(const char **)(a1 + 56);
    }
    else {
      uint64_t v5 = 0;
    }
    int v6 = *__error();
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    *(_OWORD *)__strerrbuf = 0u;
    strerror_r(v6, __strerrbuf, 0x4FuLL);
    uint64_t v7 = &byte_1B0DE9952;
    if (v5) {
      uint64_t v7 = v5;
    }
    sqlite3_log(4106, "os_unix.c:%d: (%d) %s(%s) - %s", a3, v6, "close", v7, __strerrbuf);
  }
}

uint64_t sub_1B0D072C0(uint64_t a1, const char *a2, const char *a3, int a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  int v8 = *__error();
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  *(_OWORD *)__strerrbuf = 0u;
  strerror_r(v8, __strerrbuf, 0x4FuLL);
  long long v9 = &byte_1B0DE9952;
  if (a3) {
    long long v9 = a3;
  }
  sqlite3_log(a1, "os_unix.c:%d: (%d) %s(%s) - %s", a4, v8, a2, v9, __strerrbuf);
  return a1;
}

uint64_t sub_1B0D0738C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v4 = a4;
  uint64_t v5 = a3;
  uint64_t v6 = a2;
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  unsigned int v8 = off_1EC526460(*(unsigned int *)(a1 + 24), a3, (int)a4, a2);
  if (v8 == v4)
  {
    int v9 = 0;
    return v9 + v4;
  }
  int v9 = 0;
  while ((v8 & 0x80000000) == 0)
  {
    if (!v8)
    {
      unsigned int v4 = 0;
      return v9 + v4;
    }
    v4 -= v8;
    v6 += v8;
    v9 += v8;
    v5 += v8;
LABEL_5:
    unsigned int v8 = off_1EC526460(*(unsigned int *)(a1 + 24), v5, (int)v4, v6);
    if (v4 == v8) {
      return v9 + v4;
    }
  }
  if (*__error() == 4) {
    goto LABEL_5;
  }
  *(_DWORD *)(a1 + 32) = *__error();
  long long v10 = *(const char **)(a1 + 56);
  int v11 = *__error();
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  *(_OWORD *)__strerrbuf = 0u;
  strerror_r(v11, __strerrbuf, 0x4FuLL);
  long long v12 = &byte_1B0DE9952;
  if (v10) {
    long long v12 = v10;
  }
  sqlite3_log(266, "os_unix.c:%d: (%d) %s(%s) - %s", 44053, v11, "seekAndRead", v12, __strerrbuf);
  int v9 = 0;
  unsigned int v4 = v8;
  return v9 + v4;
}

ssize_t sub_1B0D0751C(uint64_t a1, off_t a2, void *__buf, int a4)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)(a1 + 136);
  if (v8 < 1)
  {
    if (!v8 && *(void *)(a1 + 56))
    {
      unint64_t v14 = *(void *)(a1 + 144);
      if ((uint64_t)(v14 + 10485760) < a2)
      {
        long long v29 = 0u;
        long long v30 = 0u;
        long long v27 = 0u;
        long long v28 = 0u;
        long long v25 = 0u;
        long long v26 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        *(_OWORD *)__strerrbuf = 0u;
        if (off_1EC526400(*(unsigned int *)(a1 + 24), __strerrbuf))
        {
          unint64_t v14 = *(void *)(a1 + 144);
        }
        else
        {
          unint64_t v14 = v28;
          *(void *)(a1 + 144) = v28;
        }
        if ((uint64_t)(v14 + 10485760) < a2)
        {
          if ((uint64_t)(v14 + (*(int (**)(uint64_t))(*(void *)a1 + 88))(a1)) < a2)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT)) {
              sub_1B0DE02C0((uint64_t *)(a1 + 144), a2, a4);
            }
            goto LABEL_12;
          }
          unint64_t v14 = *(void *)(a1 + 144);
        }
      }
      unint64_t v15 = a2 + a4;
      if (v14 > v15) {
        unint64_t v15 = v14;
      }
      *(void *)(a1 + 144) = v15;
    }
  }
  else
  {
    off_t v9 = v8 + 10485760;
    if (*(void *)(a1 + 56)) {
      BOOL v10 = v9 < a2;
    }
    else {
      BOOL v10 = 0;
    }
    if (v10)
    {
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      *(_OWORD *)__strerrbuf = 0u;
      int v11 = off_1EC526400(*(unsigned int *)(a1 + 24), __strerrbuf);
      uint64_t v12 = *(void *)(a1 + 136);
      if (!v11)
      {
        sqlite3_log(1, "seekAndWrite: updated file size hint from %lld to actual size %lld", *(void *)(a1 + 136), (void)v28);
        uint64_t v12 = v28;
        *(void *)(a1 + 136) = v28;
      }
      if (v12 + 10485760 < a2)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT)) {
          sub_1B0DE0228(a2, a4, v12);
        }
LABEL_12:
        *(_DWORD *)(a1 + 32) = 22;
        return 0xFFFFFFFFLL;
      }
    }
  }
  uint64_t v16 = *(unsigned int *)(a1 + 24);
  size_t v17 = a4 & 0x1FFFF;
  while (1)
  {
    ssize_t v13 = off_1EC5264A8(v16, __buf, v17, a2);
    if ((v13 & 0x80000000) == 0) {
      break;
    }
    if (*__error() != 4)
    {
      int v18 = *__error();
      *(_DWORD *)(a1 + 32) = v18;
      uint64_t v19 = *(const char **)(a1 + 56);
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      *(_OWORD *)__strerrbuf = 0u;
      strerror_r(v18, __strerrbuf, 0x4FuLL);
      uint64_t v20 = &byte_1B0DE9952;
      if (v19) {
        uint64_t v20 = v19;
      }
      sqlite3_log(778, "os_unix.c:%d: (%d) %s(%s) - %s", 44288, v18, "seekAndWrite", v20, __strerrbuf);
      return v13;
    }
  }
  return v13;
}

uint64_t sub_1B0D077B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a3 + 132))
  {
    uint64_t result = off_1EC526430(a1, 93);
    if (result != -1) {
      return result;
    }
    if (*__error() == 45 || *__error() == 25) {
      return off_1EC526430(a1, 10);
    }
    return 0xFFFFFFFFLL;
  }
  uint64_t result = off_1EC526430(a1, 90);
  if (result != -1) {
    return result;
  }
  if (*__error() != 45 && *__error() != 25) {
    return 0xFFFFFFFFLL;
  }
  return off_1EC526430(a1, 8);
}

uint64_t sub_1B0D078E4(uint64_t a1, signed int a2, int a3)
{
  unsigned int v3 = *(unsigned __int8 *)(a1 + 28);
  if ((int)v3 <= a2) {
    return 0;
  }
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  uint64_t v37 = 0;
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(v7 + 16);
  if (v8)
  {
    xmmword_1EB21CA40(v8);
    unsigned int v3 = *(unsigned __int8 *)(a1 + 28);
  }
  if (v3 < 2)
  {
LABEL_52:
    if (a2)
    {
      uint64_t v13 = 0;
      goto LABEL_68;
    }
    int v30 = *(_DWORD *)(v7 + 24) - 1;
    *(_DWORD *)(v7 + 24) = v30;
    if (v30)
    {
      uint64_t v13 = 0;
      goto LABEL_66;
    }
    HIDWORD(v39) = 2;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    uint64_t v31 = *(void *)(a1 + 16);
    uint64_t v32 = *(unsigned int *)(v31 + 88);
    if (v32 == -1)
    {
      uint64_t v32 = *(unsigned int *)(a1 + 24);
      *(_DWORD *)(v31 + 88) = v32;
    }
    if ((*(_WORD *)(a1 + 30) & 3) == 1)
    {
      if (*(unsigned char *)(v31 + 33)) {
        goto LABEL_65;
      }
      uint64_t v40 = dword_1E9B51ED0 + 2;
      long long v41 = xmmword_1B0DE14A0;
      int v33 = sub_1B0D077B8(v32, (uint64_t)&v40, a1);
      if (v33 < 0)
      {
LABEL_64:
        *(_DWORD *)(a1 + 32) = *__error();
        *(unsigned char *)(v7 + 32) = 0;
        *(unsigned char *)(a1 + 28) = 0;
        uint64_t v13 = 2058;
        goto LABEL_66;
      }
      *(unsigned char *)(v31 + 33) = 1;
      ++*(_DWORD *)(v31 + 28);
    }
    else
    {
      int v33 = sub_1B0D077B8(v32, (uint64_t)&v37, a1);
    }
    if (v33) {
      goto LABEL_64;
    }
LABEL_65:
    uint64_t v13 = 0;
    *(unsigned char *)(v7 + 32) = 0;
LABEL_66:
    int v34 = *(_DWORD *)(v7 + 28) - 1;
    *(_DWORD *)(v7 + 28) = v34;
    if (!v34)
    {
      *(_DWORD *)(v7 + 88) = -1;
      sub_1B0D07034(a1);
    }
    goto LABEL_68;
  }
  if (a2 != 1) {
    goto LABEL_42;
  }
  if (a3)
  {
    HIDWORD(v39) = 2;
    uint64_t v9 = dword_1E9B51ED0 + 2;
    uint64_t v37 = v9;
    uint64_t v38 = 509;
    uint64_t v10 = *(void *)(a1 + 16);
    uint64_t v11 = *(unsigned int *)(v10 + 88);
    if (v11 == -1)
    {
      uint64_t v11 = *(unsigned int *)(a1 + 24);
      *(_DWORD *)(v10 + 88) = v11;
    }
    if ((*(_WORD *)(a1 + 30) & 3) == 1)
    {
      if (*(unsigned char *)(v10 + 33)) {
        goto LABEL_22;
      }
      uint64_t v40 = v9;
      long long v41 = xmmword_1B0DE14A0;
      int v12 = sub_1B0D077B8(v11, (uint64_t)&v40, a1);
      if ((v12 & 0x80000000) == 0)
      {
        *(unsigned char *)(v10 + 33) = 1;
        ++*(_DWORD *)(v10 + 28);
        goto LABEL_22;
      }
    }
    else
    {
      int v12 = sub_1B0D077B8(v11, (uint64_t)&v37, a1);
    }
    if (v12 == -1) {
      goto LABEL_50;
    }
LABEL_22:
    HIDWORD(v39) = 1;
    uint64_t v18 = dword_1E9B51ED0 + 2;
    uint64_t v37 = v18;
    uint64_t v38 = 509;
    uint64_t v19 = *(void *)(a1 + 16);
    uint64_t v20 = *(unsigned int *)(v19 + 88);
    if (v20 == -1)
    {
      uint64_t v20 = *(unsigned int *)(a1 + 24);
      *(_DWORD *)(v19 + 88) = v20;
    }
    if ((*(_WORD *)(a1 + 30) & 3) == 1)
    {
      if (*(unsigned char *)(v19 + 33))
      {
LABEL_30:
        HIDWORD(v39) = 2;
        uint64_t v22 = dword_1E9B51ED0;
        uint64_t v37 = dword_1E9B51ED0 + 511;
        uint64_t v38 = 1;
        uint64_t v23 = *(void *)(a1 + 16);
        uint64_t v24 = *(unsigned int *)(v23 + 88);
        if (v24 == -1)
        {
          uint64_t v24 = *(unsigned int *)(a1 + 24);
          *(_DWORD *)(v23 + 88) = v24;
        }
        if ((*(_WORD *)(a1 + 30) & 3) != 1)
        {
          int v25 = sub_1B0D077B8(v24, (uint64_t)&v37, a1);
          goto LABEL_37;
        }
        if (!*(unsigned char *)(v23 + 33))
        {
          uint64_t v40 = v22 + 2;
          long long v41 = xmmword_1B0DE14A0;
          int v25 = sub_1B0D077B8(v24, (uint64_t)&v40, a1);
          if ((v25 & 0x80000000) == 0)
          {
            *(unsigned char *)(v23 + 33) = 1;
            ++*(_DWORD *)(v23 + 28);
            goto LABEL_42;
          }
LABEL_37:
          if (v25 == -1) {
            goto LABEL_50;
          }
        }
LABEL_42:
        HIDWORD(v39) = 2;
        uint64_t v26 = dword_1E9B51ED0;
        uint64_t v37 = dword_1E9B51ED0;
        uint64_t v38 = 2;
        uint64_t v27 = *(void *)(a1 + 16);
        uint64_t v28 = *(unsigned int *)(v27 + 88);
        if (v28 == -1)
        {
          uint64_t v28 = *(unsigned int *)(a1 + 24);
          *(_DWORD *)(v27 + 88) = v28;
        }
        if ((*(_WORD *)(a1 + 30) & 3) != 1)
        {
          int v29 = sub_1B0D077B8(v28, (uint64_t)&v37, a1);
LABEL_49:
          if (v29) {
            goto LABEL_50;
          }
          goto LABEL_51;
        }
        if (*(unsigned char *)(v27 + 33))
        {
LABEL_51:
          *(unsigned char *)(v7 + 32) = 1;
          goto LABEL_52;
        }
        uint64_t v40 = v26 + 2;
        long long v41 = xmmword_1B0DE14A0;
        int v29 = sub_1B0D077B8(v28, (uint64_t)&v40, a1);
        if ((v29 & 0x80000000) == 0)
        {
          *(unsigned char *)(v27 + 33) = 1;
          ++*(_DWORD *)(v27 + 28);
          goto LABEL_49;
        }
LABEL_50:
        *(_DWORD *)(a1 + 32) = *__error();
        uint64_t v13 = 2058;
        goto LABEL_68;
      }
      uint64_t v40 = v18;
      long long v41 = xmmword_1B0DE14A0;
      int v21 = sub_1B0D077B8(v20, (uint64_t)&v40, a1);
      if ((v21 & 0x80000000) == 0)
      {
        *(unsigned char *)(v19 + 33) = 1;
        ++*(_DWORD *)(v19 + 28);
        goto LABEL_30;
      }
    }
    else
    {
      int v21 = sub_1B0D077B8(v20, (uint64_t)&v37, a1);
    }
    if (v21 == -1) {
      goto LABEL_50;
    }
    goto LABEL_30;
  }
  HIDWORD(v39) = 1;
  uint64_t v14 = dword_1E9B51ED0 + 2;
  uint64_t v37 = v14;
  uint64_t v38 = 510;
  uint64_t v15 = *(void *)(a1 + 16);
  uint64_t v16 = *(unsigned int *)(v15 + 88);
  if (v16 == -1)
  {
    uint64_t v16 = *(unsigned int *)(a1 + 24);
    *(_DWORD *)(v15 + 88) = v16;
  }
  if ((*(_WORD *)(a1 + 30) & 3) != 1)
  {
    int v17 = sub_1B0D077B8(v16, (uint64_t)&v37, a1);
LABEL_40:
    if (!v17) {
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  if (*(unsigned char *)(v15 + 33)) {
    goto LABEL_42;
  }
  uint64_t v40 = v14;
  long long v41 = xmmword_1B0DE14A0;
  int v17 = sub_1B0D077B8(v16, (uint64_t)&v40, a1);
  if ((v17 & 0x80000000) == 0)
  {
    *(unsigned char *)(v15 + 33) = 1;
    ++*(_DWORD *)(v15 + 28);
    goto LABEL_40;
  }
LABEL_41:
  *(_DWORD *)(a1 + 32) = *__error();
  uint64_t v13 = 2314;
LABEL_68:
  uint64_t v35 = *(void *)(v7 + 16);
  if (v35) {
    xmmword_1EB21CA50(v35);
  }
  if (!v13) {
    *(unsigned char *)(a1 + 28) = a2;
  }
  return v13;
}

uint64_t sub_1B0D07DA4(int a1, char *a2)
{
  *a2 = 0;
  if ((_BYTE)word_1EB21C9C4)
  {
    uint64_t v4 = qword_1EB21CA30(11);
    if (v4) {
      xmmword_1EB21CA40(v4);
    }
  }
  uint64_t v5 = (const char *)sub_1B0D0826C();
  if (v5)
  {
    uint64_t v6 = v5;
    unsigned int v7 = 0;
    uint64_t v8 = a1 - 2;
    while (1)
    {
      uint64_t __buf = 0;
      sqlite3_initialize();
      arc4random_buf(&__buf, 8uLL);
      a2[v8] = 0;
      sqlite3_snprintf(a1, a2, "%s/etilqs_%llx%c", v6, __buf, 0);
      if (a2[v8] || v7 > 0xA) {
        break;
      }
      ++v7;
      if (off_1EC5263B8(a2, 0))
      {
        uint64_t v10 = 0;
        if ((_BYTE)word_1EB21C9C4) {
          goto LABEL_16;
        }
        return v10;
      }
    }
    uint64_t v10 = 1;
    if (!(_BYTE)word_1EB21C9C4) {
      return v10;
    }
  }
  else
  {
    uint64_t v10 = 6410;
    if (!(_BYTE)word_1EB21C9C4) {
      return v10;
    }
  }
LABEL_16:
  uint64_t v11 = qword_1EB21CA30(11);
  if (v11) {
    xmmword_1EB21CA50(v11);
  }
  return v10;
}

uint64_t sub_1B0D07EEC(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (*(int *)(a1 + 76) > 0) {
    return 0;
  }
  if (a2 < 0)
  {
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    *(_OWORD *)__strerrbuf = 0u;
    if (off_1EC526400(*(unsigned int *)(a1 + 24), __strerrbuf)) {
      return 1802;
    }
    a2 = v19;
  }
  uint64_t v4 = a2 >= *(void *)(a1 + 96) ? *(void *)(a1 + 96) : a2;
  if (v4 == *(void *)(a1 + 80)) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 104);
  if (!v5) {
    goto LABEL_21;
  }
  uint64_t v6 = *(void *)(a1 + 88);
  uint64_t v7 = *(void *)(a1 + 80) & (int)-off_1EC5265E0();
  if (v6 != v7) {
    off_1EC5265B0(v5 + v7, v6 - v7);
  }
  uint64_t v8 = off_1EC526598(v5 + v7, v4 - v7, 1, 1);
  if (v8 == -1)
  {
    uint64_t v9 = -1;
  }
  else
  {
    uint64_t v9 = v5;
    if (v8 != v5 + v7)
    {
      off_1EC5265B0(v8, v4 - v7);
      uint64_t v9 = 0;
    }
  }
  if ((unint64_t)(v9 + 1) <= 1)
  {
    off_1EC5265B0(v5, v7);
    if (!v9) {
LABEL_21:
    }
      uint64_t v9 = off_1EC526598(0, v4, 1, 1);
  }
  if (v9 == -1)
  {
    uint64_t v10 = *(const char **)(a1 + 56);
    int v11 = *__error();
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    *(_OWORD *)__strerrbuf = 0u;
    strerror_r(v11, __strerrbuf, 0x4FuLL);
    int v12 = &byte_1B0DE9952;
    if (v10) {
      int v12 = v10;
    }
    sqlite3_log(0, "os_unix.c:%d: (%d) %s(%s) - %s", 47830, v11, "mmap", v12, __strerrbuf);
    uint64_t v9 = 0;
    uint64_t v4 = 0;
    *(void *)(a1 + 96) = 0;
  }
  uint64_t result = 0;
  *(void *)(a1 + 104) = v9;
  *(void *)(a1 + 80) = v4;
  *(void *)(a1 + 88) = v4;
  return result;
}

void sub_1B0D08138()
{
  memset(v14, 0, sizeof(v14));
  os_log_t v0 = sqlite3_temp_directory;
  BOOL v1 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT);
  if (v1) {
    sub_1B0DE035C(v1, v2, v3, v4, v5, v6, v7, v8);
  }
  uint64_t v9 = 0;
  if (v0)
  {
LABEL_4:
    *__error() = 0;
    off_1EC5263E8(v0, v14);
    int v10 = *__error();
    if ((WORD2(v14[0]) & 0xF000) == 0x4000) {
      int v11 = &byte_1B0DE9952;
    }
    else {
      int v11 = " is not a directory";
    }
    if (v10) {
      int v12 = &byte_1B0DE9952;
    }
    else {
      int v12 = v11;
    }
    *__error() = 0;
    off_1EC5263B8(v0, 3);
    uint64_t v13 = __error();
    sqlite3_log(1, "\t Attempted temporary directory at path '%s' with stat() errno %d and access errno %d%s\n", v0, v10, *v13, v12);
  }
  while (v9 != 7)
  {
    os_log_t v0 = (char *)qword_1EB21D580[v9++];
    if (v0) {
      goto LABEL_4;
    }
  }
}

void *sub_1B0D0826C()
{
  uint64_t v0 = 0;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v12 = 0u;
  BOOL v1 = sqlite3_temp_directory;
  if (!sqlite3_temp_directory)
  {
LABEL_5:
    while (v0 != 7)
    {
      uint64_t v2 = (void **)&qword_1EB21D580[v0++];
      BOOL v1 = *v2;
      if (*v2) {
        goto LABEL_2;
      }
    }
    if (qword_1EB21D588)
    {
      BOOL v1 = malloc_type_calloc(1uLL, 0x400uLL, 0x6AE76ED9uLL);
      if (confstr(65537, (char *)v1, 0x400uLL))
      {
        if (v1)
        {
          qword_1EB21D588 = (uint64_t)v1;
          long long v12 = 0u;
          long long v13 = 0u;
          long long v14 = 0u;
          long long v15 = 0u;
          long long v16 = 0u;
          long long v17 = 0u;
          long long v18 = 0u;
          long long v19 = 0u;
          long long v20 = 0u;
          if (!off_1EC5263E8(v1, &v12)
            && (WORD2(v12) & 0xF000) == 0x4000
            && !off_1EC5263B8(v1, 3))
          {
            BOOL v3 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT);
            if (v3) {
              sub_1B0DE0398(v3, v4, v5, v6, v7, v8, v9, v10);
            }
            return v1;
          }
        }
      }
      else
      {
        free(v1);
      }
    }
    sub_1B0D08138();
    return 0;
  }
LABEL_2:
  if (off_1EC5263E8(v1, &v12) || (WORD2(v12) & 0xF000) != 0x4000 || off_1EC5263B8(v1, 3)) {
    goto LABEL_5;
  }
  return v1;
}

uint64_t sub_1B0D083F0(uint64_t a1)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 40);
  if (*(_DWORD *)(v1 + 40)) {
    return 0;
  }
  uint64_t v4 = *(void *)v1;
  long long v65 = 0uLL;
  uint64_t v5 = sub_1B0D09700(a1, (uint64_t)&v65, 1);
  if (!v5)
  {
    unsigned int v9 = sub_1B0D0738C(v4, 0, (uint64_t)&v61, 0x411u);
    if ((v9 & 0x80000000) != 0)
    {
      uint64_t v6 = 0;
      int v7 = 0;
      int v8 = 0;
      char v12 = 0;
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(v4 + 32);
      uint64_t v2 = 266;
      goto LABEL_68;
    }
    if (v9 < 0x12 || v61 != 2)
    {
      uint64_t v6 = 0;
      int v8 = 0;
      BOOL v11 = 1;
      int v7 = 1;
      goto LABEL_28;
    }
    BOOL v14 = v62 != (void)v65 || v63 != *((void *)&v65 + 1);
    if (*(void *)(v1 + 24))
    {
      if (!v14)
      {
        BOOL v11 = 0;
        int v7 = 0;
        uint64_t v6 = 0;
        uint64_t v2 = 0;
        char v12 = 0;
        int v8 = 1;
        if (!strncmp(*(const char **)(v1 + 24), v64, v9 - 17)) {
          goto LABEL_68;
        }
        goto LABEL_28;
      }
    }
    else if (!v14)
    {
      if (v9 - 17 >= 0x3FF) {
        uint64_t v15 = 1023;
      }
      else {
        uint64_t v15 = v9 - 17;
      }
      uint64_t v6 = v60;
      __memcpy_chk();
      uint64_t v2 = 0;
      int v7 = 0;
      v60[v15] = 0;
      int v8 = 1;
      char v12 = 1;
      goto LABEL_68;
    }
    BOOL v11 = 0;
    int v7 = 0;
    uint64_t v6 = 0;
    int v8 = 0;
    goto LABEL_28;
  }
  uint64_t v2 = v5;
  uint64_t v6 = 0;
  int v7 = 0;
  int v8 = 0;
  while (1)
  {
    char v12 = 0;
LABEL_68:
    if (v2) {
      goto LABEL_95;
    }
    if (!*(_DWORD *)(a1 + 120)) {
      goto LABEL_77;
    }
    uint64_t v41 = *(unsigned int *)(a1 + 24);
    if ((v41 & 0x80000000) == 0 && off_1EC5263A0(v41))
    {
      uint64_t v42 = *(const char **)(a1 + 56);
      int v43 = *__error();
      memset(&c, 0, 80);
      strerror_r(v43, (char *)&c, 0x4FuLL);
      uint64_t v44 = &byte_1B0DE9952;
      if (v42) {
        uint64_t v44 = v42;
      }
      sqlite3_log(4106, "os_unix.c:%d: (%d) %s(%s) - %s", 50979, v43, "close", v44, (const char *)&c);
    }
    *(_DWORD *)(a1 + 24) = -1;
    int v45 = sub_1B0D06D40(*(char **)(v1 + 32), *(_DWORD *)(a1 + 120), 0, 0);
    if (v45 < 0) {
      break;
    }
    *(_DWORD *)(a1 + 24) = v45;
LABEL_77:
    if (*(void *)(v1 + 16))
    {
      uint64_t v2 = 0;
LABEL_85:
      if (v2 || !v6)
      {
        if (v2) {
          goto LABEL_95;
        }
        uint64_t v51 = *(void *)(v1 + 16);
      }
      else
      {
        size_t v48 = strlen(v6) + 1;
        uint64_t v49 = (void *)sub_1B0C7FC94(v48);
        if (!v49)
        {
          *(void *)(v1 + 24) = 0;
          *(void *)(*(void *)(v1 + 16) + 56) = 0;
          uint64_t v2 = 7;
          goto LABEL_95;
        }
        int v50 = v49;
        memcpy(v49, v6, v48);
        *(void *)(v1 + 24) = v50;
        uint64_t v51 = *(void *)(v1 + 16);
        *(void *)(v51 + 56) = v50;
      }
      *(_DWORD *)(v1 + 40) = 1;
      if (*(_UNKNOWN **)v51 == &unk_1F09A50C0)
      {
        uint64_t v2 = 0;
        *(void *)(*(void *)(v51 + 40) + 8) = *(void *)(v1 + 24);
        return v2;
      }
      return 0;
    }
    long long v46 = v6;
    if (!v6) {
      long long v46 = *(char **)(v1 + 24);
    }
    uint64_t v47 = sub_1B0D09BF4(v46, (uint64_t *)(v1 + 16), 1);
    uint64_t v2 = v47;
    if ((v12 & 1) == 0 || !v47 || v47 == 7) {
      goto LABEL_85;
    }
    BOOL v11 = v7 != 0;
LABEL_28:
    uint64_t v2 = 5;
    if ((*(unsigned char *)(v4 + 120) & 2) != 0)
    {
      if (!*(void *)(v1 + 24))
      {
        long long v16 = *(char **)(v1 + 32);
        uint64_t v6 = v60;
        if (confstr(65537, v60, 0x400uLL))
        {
          int v17 = __strlcat_chk();
          if (v60[v17 - 1] != 47) {
            int v17 = __strlcat_chk();
          }
          int v18 = strlen(v16);
          CC_LONG v19 = v18;
          if (v18 > 248 || ((unint64_t)(v18 + v17) << 32) - 0x3F900000001 < 0xFFFFFBFFFFFFFFFFLL)
          {
            memset(&c, 0, sizeof(c));
            CC_SHA256_Init(&c);
            CC_SHA256_Update(&c, v16, v19);
            CC_SHA256_Final(md, &c);
            v22.i64[0] = 0x3030303030303030;
            v22.i64[1] = 0x3030303030303030;
            v23.i64[0] = 0x3030303030303030;
            v23.i64[1] = 0x3030303030303030;
            int8x16_t v24 = (int8x16_t)vsraq_n_u8(v23, *(uint8x16_t *)md, 4uLL);
            v25.i64[0] = 0x3030303030303030;
            v25.i64[1] = 0x3030303030303030;
            int8x16_t v26 = (int8x16_t)vsraq_n_u8(v25, v67, 4uLL);
            v27.i64[0] = 0x3939393939393939;
            v27.i64[1] = 0x3939393939393939;
            v28.i64[0] = 0x5757575757575757;
            v28.i64[1] = 0x5757575757575757;
            v29.i64[0] = 0x5757575757575757;
            v29.i64[1] = 0x5757575757575757;
            v30.i64[0] = 0x5757575757575757;
            v30.i64[1] = 0x5757575757575757;
            v70.val[0] = vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v24, v27), (int8x16_t)vsraq_n_u8(v29, *(uint8x16_t *)md, 4uLL), v24);
            v24.i64[0] = 0xF0F0F0F0F0F0F0FLL;
            v24.i64[1] = 0xF0F0F0F0F0F0F0FLL;
            int8x16_t v31 = vandq_s8(*(int8x16_t *)md, v24);
            int8x16_t v32 = vorrq_s8(v31, v22);
            v70.val[1] = vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v32, v27), vaddq_s8(v31, v28), v32);
            v69.val[0] = vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v26, v27), (int8x16_t)vsraq_n_u8(v30, v67, 4uLL), v26);
            int8x16_t v33 = vandq_s8((int8x16_t)v67, v24);
            int8x16_t v34 = vorrq_s8(v33, v22);
            v69.val[1] = vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v34, v27), vaddq_s8(v33, v28), v34);
            uint64_t v35 = (char *)v53;
            vst2q_s8(v35, v70);
            v35 += 32;
            vst2q_s8(v35, v69);
            LOWORD(v54) = 45;
            __strlcat_chk();
            strrchr(v16, 47);
            __strlcat_chk();
          }
          else
          {
            if (v18 >= 1)
            {
              int v20 = 0;
              while (1)
              {
                int v21 = v16[v20];
                if (v20 + 2 >= v18 || v21 != 46 || v16[v20 + 1] != 47) {
                  break;
                }
                if (v20)
                {
                  if (v16[v20 - 1] != 47) {
                    break;
                  }
                  ++v20;
                }
                else
                {
                  int v20 = 1;
                }
LABEL_40:
                if (++v20 >= v18) {
                  goto LABEL_49;
                }
              }
              if (v21 == 47) {
                LOBYTE(v21) = 95;
              }
              v60[v17++] = v21;
              goto LABEL_40;
            }
LABEL_49:
            v60[v17] = 0;
          }
          uint64_t v6 = v60;
          __strlcat_chk();
        }
      }
      futimes(*(_DWORD *)(v4 + 24), 0);
      if (v8) {
        char v36 = v11;
      }
      else {
        char v36 = 1;
      }
      if ((v36 & 1) != 0 || (v37 = *(void *)(v4 + 16)) == 0 || (uint64_t v2 = 5, *(int *)(v37 + 24) <= 1))
      {
        uint64_t v2 = sub_1B0D09700(a1, (uint64_t)&v65, 4);
        if (!v2)
        {
          LOBYTE(c.count[0]) = 2;
          *(_OWORD *)((char *)c.count + 1) = v65;
          __strlcpy_chk();
          uint64_t v38 = *(unsigned int *)(v4 + 24);
          uint64_t v39 = (int)(strlen((const char *)&c.hash[2] + 1) + 17);
          while ((off_1EC526418(v38, v39) & 0x80000000) != 0 && *__error() == 4)
            ;
          uint64_t v2 = sub_1B0CC1D40(v4, (char *)&c, v39, 0);
          fsync(*(_DWORD *)(v4 + 24));
          char v40 = !v11;
          if (v2) {
            char v40 = 1;
          }
          if ((v40 & 1) == 0)
          {
            long long v57 = 0u;
            long long v58 = 0u;
            long long v55 = 0u;
            long long v56 = 0u;
            long long v54 = 0u;
            memset(v53, 0, sizeof(v53));
            if (!off_1EC526400(*(unsigned int *)(a1 + 24), v53)) {
              off_1EC5264D8(*(unsigned int *)(v4 + 24), WORD2(v53[0]) & 0x1B6);
            }
          }
        }
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 64))(v4, 1);
    }
  }
  uint64_t v2 = sub_1B0D06D2C(50988);
LABEL_95:
  (*(void (**)(uint64_t, void))(*(void *)v4 + 64))(v4, 0);
  return v2;
}

uint64_t sub_1B0D08B00(uint64_t a1, const char *a2)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 28)) {
    return 5;
  }
  if (*(_UNKNOWN **)a1 != &unk_1F09A50C0 && *(_UNKNOWN **)a1 == &unk_1F09A5288)
  {
    strlen(*(const char **)(a1 + 40));
    __memcpy_chk();
    if (!a2) {
      goto LABEL_14;
    }
  }
  else
  {
    __strlcpy_chk();
    if (!a2) {
      goto LABEL_14;
    }
  }
  if (*a2)
  {
    if (!strcmp(a2, ":auto:")) {
      uint64_t v5 = 0;
    }
    else {
      uint64_t v5 = a2;
    }
    if (sqlite3_initialize()) {
      return 7;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t v5 = 0;
  if (sqlite3_initialize()) {
    return 7;
  }
LABEL_15:
  uint64_t v6 = (uint64_t *)sub_1B0C7FC94(64);
  if (!v6) {
    return 7;
  }
  int v7 = v6;
  *((_OWORD *)v6 + 2) = 0u;
  *((_OWORD *)v6 + 3) = 0u;
  *(_OWORD *)uint64_t v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  int v8 = v6 + 1;
  size_t v9 = strlen(__s);
  int v10 = sqlite3_initialize();
  BOOL v11 = v8;
  if (!v10)
  {
    int v20 = (unsigned char *)sub_1B0C7FC94((uint64_t)((v9 << 32) + 0x800000000) >> 32);
    *int v8 = v20;
    if (!v20) {
      goto LABEL_18;
    }
    int v21 = v20;
    memcpy(v20, __s, (uint64_t)((v9 << 32) + 0x100000000) >> 32);
    int v22 = (v9 & ((int)v9 >> 31)) - 1;
    uint64_t v23 = v9 - 1;
    int v24 = v9;
    while (1)
    {
      BOOL v25 = __OFSUB__(v24--, 1);
      if (v24 < 0 != v25) {
        break;
      }
      int v26 = v21[v23--];
      if (v26 == 47)
      {
        int v22 = v24 + 1;
        break;
      }
    }
    unint64_t v27 = v22;
    v21[v22] = 46;
    if (v22 >= (int)v9)
    {
LABEL_71:
      strcpy(&v21[v22 + 1], "-conch");
      uint64_t v2 = sub_1B0D09BF4((char *)v7[1], v7, 0);
      if (v2 == 14)
      {
        if ((*(unsigned char *)(a1 + 120) & 2) != 0)
        {
          uint64_t v2 = 14;
          goto LABEL_19;
        }
        memset(&v50, 0, 512);
        memset(v49, 0, sizeof(v49));
        if (off_1EC5263E8(*v8, v49) == -1
          && *__error() == 2
          && statfs(__s, &v50) != -1
          && (v50.f_flags & 1) != 0)
        {
          uint64_t v2 = 0;
          *((_DWORD *)v7 + 10) = -1;
          if (!v5) {
            goto LABEL_85;
          }
          goto LABEL_79;
        }
        uint64_t v2 = 14;
      }
      if (!v5) {
        goto LABEL_85;
      }
LABEL_79:
      if (!v2)
      {
        size_t v43 = strlen(v5) + 1;
        uint64_t v44 = (void *)sub_1B0C7FC94(v43);
        if (!v44)
        {
          BOOL v11 = v7 + 3;
          goto LABEL_17;
        }
        uint64_t v45 = (uint64_t)v44;
        memcpy(v44, v5, v43);
        v7[3] = v45;
LABEL_86:
        size_t v46 = strlen(__s) + 1;
        uint64_t v47 = (void *)sub_1B0C7FC94(v46);
        if (v47)
        {
          uint64_t v48 = (uint64_t)v47;
          memcpy(v47, __s, v46);
          uint64_t v2 = 0;
          v7[4] = v48;
          v7[6] = *(void *)(a1 + 40);
          *(void *)(a1 + 40) = v7;
          v7[7] = *(void *)a1;
          *(void *)a1 = &unk_1F09A5320;
          return v2;
        }
        BOOL v11 = v7 + 4;
        goto LABEL_17;
      }
LABEL_85:
      if (v2) {
        goto LABEL_19;
      }
      goto LABEL_86;
    }
    unint64_t v28 = (int)v9 - (uint64_t)v22;
    if (v28 >= 8 && (unint64_t)(v21 - __s + 1) >= 0x20)
    {
      if (v28 < 0x20)
      {
        unint64_t v29 = 0;
        goto LABEL_63;
      }
      unint64_t v29 = v28 & 0xFFFFFFFFFFFFFFE0;
      uint8x16_t v30 = &v21[v22 + 17];
      int8x16_t v31 = &__s[v22 + 16];
      unint64_t v32 = v28 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v33 = *(_OWORD *)v31;
        *(v30 - 1) = *((_OWORD *)v31 - 1);
        _OWORD *v30 = v33;
        v30 += 2;
        v31 += 32;
        v32 -= 32;
      }
      while (v32);
      if (v28 == v29) {
        goto LABEL_70;
      }
      if ((v28 & 0x18) != 0)
      {
LABEL_63:
        unint64_t v34 = v29 - (v28 & 0xFFFFFFFFFFFFFFF8);
        unint64_t v35 = v29 + v22;
        char v36 = &__s[v35];
        uint64_t v37 = &v21[v35 + 1];
        do
        {
          uint64_t v38 = *(void *)v36;
          v36 += 8;
          *v37++ = v38;
          v34 += 8;
        }
        while (v34);
        unint64_t v27 = (v28 & 0xFFFFFFFFFFFFFFF8) + v22;
        if (v28 == (v28 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_70;
        }
        goto LABEL_68;
      }
      unint64_t v27 = v29 + v22;
    }
LABEL_68:
    unint64_t v39 = (int)v9 - v27;
    char v40 = &v21[v27 + 1];
    uint64_t v41 = &__s[v27];
    do
    {
      char v42 = *v41++;
      *v40++ = v42;
      --v39;
    }
    while (v39);
LABEL_70:
    int v22 = v9;
    goto LABEL_71;
  }
LABEL_17:
  *BOOL v11 = 0;
LABEL_18:
  uint64_t v2 = 7;
LABEL_19:
  if (*v7)
  {
    (*(void (**)(uint64_t))(*(void *)*v7 + 8))(*v7);
    uint64_t v12 = *v7;
    if (*v7)
    {
      long long v13 = (void (**)(uint64_t))&off_1EB21C9E8;
      if (!dword_1EB21C9C0)
      {
LABEL_26:
        (*v13)(v12);
        goto LABEL_27;
      }
      if ((void)xmmword_1EB2201B0) {
        xmmword_1EB21CA40(xmmword_1EB2201B0);
      }
      qword_1EB220108 -= (int)off_1EB21C9F8(v12);
      --qword_1EB220150;
      off_1EB21C9E8(v12);
      uint64_t v12 = xmmword_1EB2201B0;
      if ((void)xmmword_1EB2201B0)
      {
        long long v13 = (void (**)(uint64_t))&xmmword_1EB21CA50;
        goto LABEL_26;
      }
    }
  }
LABEL_27:
  uint64_t v14 = v7[3];
  if (!v14) {
    goto LABEL_34;
  }
  uint64_t v15 = &off_1EB21C9E8;
  if (!dword_1EB21C9C0) {
    goto LABEL_33;
  }
  if ((void)xmmword_1EB2201B0) {
    xmmword_1EB21CA40(xmmword_1EB2201B0);
  }
  qword_1EB220108 -= (int)off_1EB21C9F8(v14);
  --qword_1EB220150;
  off_1EB21C9E8(v14);
  uint64_t v14 = xmmword_1EB2201B0;
  if ((void)xmmword_1EB2201B0)
  {
    uint64_t v15 = &xmmword_1EB21CA50;
LABEL_33:
    (*v15)(v14);
  }
LABEL_34:
  uint64_t v16 = *v8;
  if (!*v8) {
    goto LABEL_41;
  }
  int v17 = &off_1EB21C9E8;
  if (!dword_1EB21C9C0) {
    goto LABEL_40;
  }
  if ((void)xmmword_1EB2201B0) {
    xmmword_1EB21CA40(xmmword_1EB2201B0);
  }
  qword_1EB220108 -= (int)off_1EB21C9F8(v16);
  --qword_1EB220150;
  off_1EB21C9E8(v16);
  uint64_t v16 = xmmword_1EB2201B0;
  if ((void)xmmword_1EB2201B0)
  {
    int v17 = &xmmword_1EB21CA50;
LABEL_40:
    (*v17)(v16);
  }
LABEL_41:
  int v18 = (uint64_t (**)(uint64_t *))&off_1EB21C9E8;
  if (!dword_1EB21C9C0)
  {
LABEL_46:
    (*v18)(v7);
    return v2;
  }
  if ((void)xmmword_1EB2201B0) {
    xmmword_1EB21CA40(xmmword_1EB2201B0);
  }
  qword_1EB220108 -= (int)off_1EB21C9F8(v7);
  --qword_1EB220150;
  off_1EB21C9E8(v7);
  int v7 = (uint64_t *)xmmword_1EB2201B0;
  if ((void)xmmword_1EB2201B0)
  {
    int v18 = (uint64_t (**)(uint64_t *))&xmmword_1EB21CA50;
    goto LABEL_46;
  }
  return v2;
}

uint64_t sub_1B0D0919C(uint64_t result)
{
  if (!result) {
    return result;
  }
  uint64_t v1 = (void *)result;
  uint64_t v2 = *(uint64_t **)(result + 40);
  uint64_t v3 = v2[2];
  uint64_t v4 = *v2;
  if (v3)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)v3 + 64))(v2[2], 0);
    if (result) {
      return result;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
    if (result) {
      return result;
    }
    uint64_t v5 = &off_1EB21C9E8;
    if (dword_1EB21C9C0)
    {
      if ((void)xmmword_1EB2201B0) {
        xmmword_1EB21CA40(xmmword_1EB2201B0);
      }
      qword_1EB220108 -= (int)off_1EB21C9F8(v3);
      --qword_1EB220150;
      off_1EB21C9E8(v3);
      uint64_t v3 = xmmword_1EB2201B0;
      if (!(void)xmmword_1EB2201B0) {
        goto LABEL_11;
      }
      uint64_t v5 = &xmmword_1EB21CA50;
    }
    (*v5)(v3);
LABEL_11:
    v2[2] = 0;
  }
  if (!v4) {
    goto LABEL_26;
  }
  if (*((_DWORD *)v2 + 10))
  {
    uint64_t v6 = (_DWORD *)v1[5];
    if ((int)v6[10] <= 0)
    {
      v6[10] = 0;
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(void, void))(**(void **)v6 + 64))(*(void *)v6, 0);
      v6[10] = 0;
      if (result) {
        return result;
      }
    }
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
  if (!result)
  {
    int v7 = &off_1EB21C9E8;
    if (dword_1EB21C9C0)
    {
      if ((void)xmmword_1EB2201B0) {
        xmmword_1EB21CA40(xmmword_1EB2201B0);
      }
      qword_1EB220108 -= (int)off_1EB21C9F8(v4);
      --qword_1EB220150;
      off_1EB21C9E8(v4);
      uint64_t v4 = xmmword_1EB2201B0;
      if (!(void)xmmword_1EB2201B0)
      {
LABEL_26:
        uint64_t v8 = v2[3];
        if (!v8) {
          goto LABEL_33;
        }
        size_t v9 = &off_1EB21C9E8;
        if (dword_1EB21C9C0)
        {
          if ((void)xmmword_1EB2201B0) {
            xmmword_1EB21CA40(xmmword_1EB2201B0);
          }
          qword_1EB220108 -= (int)off_1EB21C9F8(v8);
          --qword_1EB220150;
          off_1EB21C9E8(v8);
          uint64_t v8 = xmmword_1EB2201B0;
          if (!(void)xmmword_1EB2201B0)
          {
LABEL_33:
            uint64_t v10 = v2[1];
            if (!v10) {
              goto LABEL_40;
            }
            BOOL v11 = &off_1EB21C9E8;
            if (dword_1EB21C9C0)
            {
              if ((void)xmmword_1EB2201B0) {
                xmmword_1EB21CA40(xmmword_1EB2201B0);
              }
              qword_1EB220108 -= (int)off_1EB21C9F8(v10);
              --qword_1EB220150;
              off_1EB21C9E8(v10);
              uint64_t v10 = xmmword_1EB2201B0;
              if (!(void)xmmword_1EB2201B0)
              {
LABEL_40:
                uint64_t v12 = v2[4];
                if (!v12) {
                  goto LABEL_47;
                }
                long long v13 = &off_1EB21C9E8;
                if (dword_1EB21C9C0)
                {
                  if ((void)xmmword_1EB2201B0) {
                    xmmword_1EB21CA40(xmmword_1EB2201B0);
                  }
                  qword_1EB220108 -= (int)off_1EB21C9F8(v12);
                  --qword_1EB220150;
                  off_1EB21C9E8(v12);
                  uint64_t v12 = xmmword_1EB2201B0;
                  if (!(void)xmmword_1EB2201B0)
                  {
LABEL_47:
                    uint64_t v14 = v2[7];
                    v1[5] = v2[6];
                    *uint64_t v1 = v14;
                    uint64_t v15 = (uint64_t (**)(uint64_t *))&off_1EB21C9E8;
                    if (dword_1EB21C9C0)
                    {
                      if ((void)xmmword_1EB2201B0) {
                        xmmword_1EB21CA40(xmmword_1EB2201B0);
                      }
                      qword_1EB220108 -= (int)off_1EB21C9F8(v2);
                      --qword_1EB220150;
                      off_1EB21C9E8(v2);
                      uint64_t v2 = (uint64_t *)xmmword_1EB2201B0;
                      if (!(void)xmmword_1EB2201B0) {
                        goto LABEL_53;
                      }
                      uint64_t v15 = (uint64_t (**)(uint64_t *))&xmmword_1EB21CA50;
                    }
                    (*v15)(v2);
LABEL_53:
                    uint64_t v16 = *(uint64_t (**)(void *))(*v1 + 8);
                    return v16(v1);
                  }
                  long long v13 = &xmmword_1EB21CA50;
                }
                (*v13)(v12);
                goto LABEL_47;
              }
              BOOL v11 = &xmmword_1EB21CA50;
            }
            (*v11)(v10);
            goto LABEL_40;
          }
          size_t v9 = &xmmword_1EB21CA50;
        }
        (*v9)(v8);
        goto LABEL_33;
      }
      int v7 = &xmmword_1EB21CA50;
    }
    (*v7)(v4);
    goto LABEL_26;
  }
  return result;
}

uint64_t sub_1B0D095B8(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1B0D083F0(a1);
  if (!result)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    if (*(int *)(v5 + 40) < 1)
    {
      return 0;
    }
    else
    {
      uint64_t v6 = *(unsigned char **)(v5 + 16);
      uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t))(*(void *)v6 + 56))(v6, a2);
      *(unsigned char *)(a1 + 28) = v6[28];
    }
  }
  return result;
}

uint64_t sub_1B0D09624(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1B0D083F0(a1);
  if (!result)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    if (*(int *)(v5 + 40) < 1)
    {
      return 0;
    }
    else
    {
      uint64_t v6 = *(unsigned char **)(v5 + 16);
      uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t))(*(void *)v6 + 64))(v6, a2);
      *(unsigned char *)(a1 + 28) = v6[28];
    }
  }
  return result;
}

uint64_t sub_1B0D09690(uint64_t a1)
{
  uint64_t result = sub_1B0D083F0(a1);
  if (!result)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    if (*(int *)(v3 + 40) < 1)
    {
      return 0;
    }
    else
    {
      uint64_t v4 = *(uint64_t (**)(void))(**(void **)(v3 + 16) + 72);
      return v4();
    }
  }
  return result;
}

uint64_t sub_1B0D09700(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  unint64_t v6 = 0;
  unint64_t v7 = 0;
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)(a1 + 40);
  unint64_t v9 = 0x1EC526000uLL;
  uint64_t v10 = *(unsigned int **)v8;
  while (1)
  {
    uint64_t result = (*(uint64_t (**)(unsigned int *, uint64_t))(*(void *)v10 + 56))(v10, a3);
    if (result != 5) {
      return result;
    }
    ++*(_DWORD *)(v8 + 44);
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    memset(v36, 0, sizeof(v36));
    if ((*(unsigned int (**)(void, _OWORD *))(v9 + 1024))(v10[6], v36)) {
      goto LABEL_37;
    }
    int v12 = *(_DWORD *)(v8 + 44);
    unint64_t v13 = v37;
    if (v12 == 1)
    {
      unint64_t v7 = *((void *)&v37 + 1);
      *(_OWORD *)__rqtp = xmmword_1B0DE14D0;
      nanosleep((const timespec *)__rqtp, 0);
      unint64_t v6 = v13;
    }
    else
    {
      uint64_t result = 5;
      if (__PAIR128__(v7, v6) != v37) {
        return result;
      }
      if (v12 == 3)
      {
        uint64_t v16 = *(uint64_t **)(v5 + 40);
        uint64_t v17 = *v16;
        int v18 = (const std::__fs::filesystem::path *)v16[1];
        long long v45 = 0u;
        long long v46 = 0u;
        *(_OWORD *)size_t v43 = 0u;
        long long v44 = 0u;
        uint64_t v19 = __strlcpy_chk();
        if ((unint64_t)(v19 - 1025) >= 0xFFFFFFFFFFFFFC05)
        {
          strcpy((char *)v48 + v19 - 5, "break");
          unint64_t v20 = off_1EC526460(*(unsigned int *)(v17 + 24), __rqtp, 1041, 0);
          size_t v21 = v20;
          if (v20 >= 0x11)
          {
            uint64_t v35 = a2;
            uint64_t v22 = sub_1B0D06D40((char *)v48, 536873474, 0, 0);
            if ((v22 & 0x80000000) != 0)
            {
              unint64_t v32 = __error();
              sqlite3_snprintf(64, v43, "create failed (%d)", *v32);
            }
            else
            {
              uint64_t v23 = v22;
              uint64_t v34 = v5;
              BOOL v25 = "write failed (%d)";
              if (off_1EC5264A8(v22, __rqtp, v21, 0) == v21)
              {
                rename(v48, v18, v24);
                BOOL v25 = "rename failed (%d)";
                if (!v26)
                {
                  sqlite3_log(28, "broke stale lock on %s\n", (const char *)v18);
                  uint64_t v5 = v34;
                  sub_1B0D071D8(v34, *(unsigned int *)(v17 + 24), 50697);
                  *(_DWORD *)(v17 + 24) = v23;
                  *(_DWORD *)(v17 + 120) = 514;
                  if (a3 != 4
                    || (uint64_t result = (*(uint64_t (**)(unsigned int *, uint64_t))(*(void *)v10 + 56))(v10, 1),
                        !result))
                  {
                    uint64_t result = (*(uint64_t (**)(unsigned int *, uint64_t))(*(void *)v10 + 56))(v10, a3);
                  }
                  a2 = v35;
                  unint64_t v9 = 0x1EC526000;
                  if (result != 5) {
                    return result;
                  }
                  goto LABEL_3;
                }
              }
              unint64_t v27 = __error();
              sqlite3_snprintf(64, v43, v25, *v27);
              off_1EC526508(v48);
              int v28 = off_1EC5263A0(v23);
              uint64_t v5 = v34;
              a2 = v35;
              if (v28)
              {
                unint64_t v29 = *(const char **)(v34 + 56);
                int v30 = *__error();
                memset(v50, 0, sizeof(v50));
                *(_OWORD *)__strerrbuf = 0u;
                strerror_r(v30, __strerrbuf, 0x4FuLL);
                int8x16_t v31 = &byte_1B0DE9952;
                if (v29) {
                  int8x16_t v31 = v29;
                }
                int v33 = v30;
                uint64_t v5 = v34;
                sqlite3_log(4106, "os_unix.c:%d: (%d) %s(%s) - %s", 50705, v33, "close", v31, __strerrbuf);
              }
            }
          }
          else
          {
            sqlite3_snprintf(64, v43, "read error (len %d)", v20);
          }
        }
        else
        {
          sqlite3_snprintf(64, v43, "path error (len %d)", v19);
        }
        sqlite3_log(1, "failed to break stale lock on %s, %s\n", (const char *)v18, v43);
        unint64_t v9 = 0x1EC526000;
      }
      else if (v12 == 2)
      {
        unsigned int v14 = off_1EC526460(v10[6], __rqtp, 1041, 0);
        if ((v14 & 0x80000000) != 0)
        {
LABEL_37:
          *(_DWORD *)(v5 + 32) = *__error();
          return 3850;
        }
        uint64_t result = 5;
        if (v14 < 0x12 || __rqtp[0] != 2) {
          return result;
        }
        if (*(void *)&__rqtp[1] != *(void *)a2 || *(void *)&__rqtp[9] != *(void *)(a2 + 8))
        {
          memset(v48, 0, 37);
          *(_OWORD *)__strerrbuf = 0u;
          memset(v50, 0, 21);
          *(_OWORD *)size_t v43 = *(_OWORD *)&__rqtp[1];
          uuid_unparse((const unsigned __int8 *)v43, (char *)v48);
          uuid_unparse((const unsigned __int8 *)a2, __strerrbuf);
          sqlite3_log(1, "ERROR: sqlite database is locked because it is in use by another host that holds a host-exclusive lock on %s; this host (UUID %s) cannot override the host-exclusive lock until the other host (UUID %s) releases its locks on %s\n",
            *(const char **)(v5 + 56),
            __strerrbuf,
            (const char *)v48,
            *((const char **)v10 + 7));
          return 5;
        }
        *(_OWORD *)&v48[0].__pn_.__r_.__value_.__l.__data_ = xmmword_1B0DE14C0;
        nanosleep((const timespec *)v48, 0);
      }
    }
LABEL_3:
    if (*(int *)(v8 + 44) >= 3) {
      return 5;
    }
  }
}

uint64_t sub_1B0D09BF4(char *a1, uint64_t *a2, int a3)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t v44 = 0;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  unint64_t v6 = (_DWORD *)sub_1B0D0A1A0((uint64_t)a1, 6);
  if (v6)
  {
    unint64_t v7 = v6;
    if ((*v6 & 0x80000000) == 0)
    {
      HIDWORD(v8) = 6;
      LODWORD(v8) = *v6;
      goto LABEL_4;
    }
  }
  else
  {
    if (sqlite3_initialize()) {
      return 7;
    }
    unint64_t v7 = (void *)sub_1B0C7FC94(16);
    if (!v7) {
      return 7;
    }
  }
  int v9 = 770;
  unsigned int v11 = sub_1B0D06D40(a1, 770, 0, 0);
  __error();
  if ((v11 & 0x80000000) == 0)
  {
    HIDWORD(v12) = 6;
    goto LABEL_37;
  }
  unint64_t v13 = __error();
  if (!a3 || *v13 != 2)
  {
LABEL_35:
    int v9 = 0x20000000;
    unsigned int v11 = sub_1B0D06D40(a1, 0x20000000, 0, 0);
    size_t v21 = __error();
    if ((v11 & 0x80000000) == 0)
    {
      HIDWORD(v12) = 1;
LABEL_37:
      LODWORD(v12) = v11;
      uint64_t v33 = v12;
      if (!sqlite3_initialize()) {
        goto LABEL_38;
      }
      goto LABEL_42;
    }
    int v31 = *v21;
    unint64_t v32 = &off_1EB21C9E8;
    if (dword_1EB21C9C0)
    {
      if ((void)xmmword_1EB2201B0) {
        xmmword_1EB21CA40(xmmword_1EB2201B0);
      }
      qword_1EB220108 -= (int)off_1EB21C9F8(v7);
      --qword_1EB220150;
      off_1EB21C9E8(v7);
      unint64_t v7 = (void *)xmmword_1EB2201B0;
      if (!(void)xmmword_1EB2201B0) {
        goto LABEL_67;
      }
      unint64_t v32 = &xmmword_1EB21CA50;
    }
    (*v32)(v7);
LABEL_67:
    if (a3) {
      return 5;
    }
    if (v31 == 13) {
      return 3;
    }
    if (v31 == 5) {
      return 3850;
    }
    return sub_1B0D06D2C(50570);
  }
  int v14 = strlen(a1);
  __strerrbuf[0] = *a1;
  if (v14 < 2) {
    goto LABEL_32;
  }
  uint64_t v15 = 0;
  int v16 = 0;
  uint64_t v17 = v14 - 1;
  int v18 = a1 + 1;
  while (1)
  {
    int v19 = v18[v15];
    if (v19 != 47) {
      goto LABEL_16;
    }
    if ((int)v15 - v16 + 1 < 1)
    {
      LOBYTE(v19) = 47;
      goto LABEL_16;
    }
    if ((v15 - v16 + 1) <= 2)
    {
      if (v15 - v16 == 1)
      {
        if (__strerrbuf[v16] == 46 || __strerrbuf[v16 + 1] == 46) {
          goto LABEL_15;
        }
      }
      else if (v15 != v16 || (__strerrbuf[v16] & 0xFE) == 0x2E)
      {
        goto LABEL_15;
      }
    }
    __strerrbuf[v15 + 1] = 0;
    if (off_1EC526538(__strerrbuf, 493))
    {
      int v20 = *__error();
      if (v20 != 17) {
        break;
      }
    }
LABEL_15:
    int v16 = v15 + 2;
    LOBYTE(v19) = v18[v15];
LABEL_16:
    __strerrbuf[++v15] = v19;
    if (v17 == v15) {
      goto LABEL_32;
    }
  }
  if (!v20) {
LABEL_32:
  }
    unsigned int v11 = sub_1B0D06D40(a1, 770, 0, 0);
  if ((v11 & 0x80000000) != 0) {
    goto LABEL_35;
  }
  uint64_t v8 = v11 | 0x600000000;
LABEL_4:
  uint64_t v33 = v8;
  int v9 = 770;
  if (sqlite3_initialize()) {
    goto LABEL_42;
  }
LABEL_38:
  uint64_t v22 = sub_1B0C7FC94(184);
  if (!v22)
  {
LABEL_42:
    uint64_t v10 = 7;
    if (off_1EC5263A0(v33))
    {
      uint64_t v23 = 0;
      BOOL v25 = 0;
      char v24 = 1;
LABEL_44:
      int v26 = *__error();
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      *(_OWORD *)__strerrbuf = 0u;
      strerror_r(v26, __strerrbuf, 0x4FuLL);
      unint64_t v27 = &byte_1B0DE9952;
      if (v25) {
        unint64_t v27 = v25;
      }
      sqlite3_log(4106, "os_unix.c:%d: (%d) %s(%s) - %s", 50594, v26, "close", v27, __strerrbuf);
      if ((v24 & 1) == 0) {
        goto LABEL_47;
      }
    }
    goto LABEL_53;
  }
  uint64_t v23 = v22;
  *(void *)(v22 + 176) = 0;
  *(_OWORD *)(v22 + 144) = 0u;
  *(_OWORD *)(v22 + 160) = 0u;
  *(_OWORD *)(v22 + 112) = 0u;
  *(_OWORD *)(v22 + 128) = 0u;
  *(_OWORD *)(v22 + 80) = 0u;
  *(_OWORD *)(v22 + 96) = 0u;
  *(_OWORD *)(v22 + 48) = 0u;
  *(_OWORD *)(v22 + 64) = 0u;
  *(_OWORD *)(v22 + 16) = 0u;
  *(_OWORD *)(v22 + 32) = 0u;
  *(_OWORD *)uint64_t v22 = 0u;
  *(_DWORD *)(v22 + 120) = v9;
  long long v34 = 0u;
  *(void *)&long long v35 = 0;
  *((void *)&v36 + 1) = 0;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  uint64_t v44 = 0;
  *((void *)&v35 + 1) = "dummy";
  *(void *)&long long v36 = off_1F09A4F88;
  *unint64_t v7 = v33;
  *(void *)(v22 + 48) = v7;
  uint64_t v10 = sub_1B0C7C488((uint64_t)&v34, v33, v22, a1, 0);
  if (v10)
  {
    if (off_1EC5263A0(v33))
    {
      char v24 = 0;
      BOOL v25 = *(const char **)(v23 + 56);
      goto LABEL_44;
    }
LABEL_47:
    int v28 = &off_1EB21C9E8;
    if (dword_1EB21C9C0)
    {
      if ((void)xmmword_1EB2201B0) {
        xmmword_1EB21CA40(xmmword_1EB2201B0);
      }
      qword_1EB220108 -= (int)off_1EB21C9F8(v23);
      --qword_1EB220150;
      off_1EB21C9E8(v23);
      uint64_t v23 = xmmword_1EB2201B0;
      if ((void)xmmword_1EB2201B0)
      {
        int v28 = &xmmword_1EB21CA50;
        goto LABEL_52;
      }
    }
    else
    {
LABEL_52:
      (*v28)(v23);
    }
LABEL_53:
    unint64_t v29 = &off_1EB21C9E8;
    if (dword_1EB21C9C0)
    {
      if ((void)xmmword_1EB2201B0) {
        xmmword_1EB21CA40(xmmword_1EB2201B0);
      }
      qword_1EB220108 -= (int)off_1EB21C9F8(v7);
      --qword_1EB220150;
      off_1EB21C9E8(v7);
      unint64_t v7 = (void *)xmmword_1EB2201B0;
      if ((void)xmmword_1EB2201B0)
      {
        unint64_t v29 = &xmmword_1EB21CA50;
        goto LABEL_58;
      }
    }
    else
    {
LABEL_58:
      (*v29)(v7);
    }
  }
  else
  {
    *a2 = v23;
  }
  return v10;
}

uint64_t sub_1B0D0A1A0(uint64_t a1, char a2)
{
  if (qword_1EB2201D0) {
    xmmword_1EB21CA40(qword_1EB2201D0);
  }
  memset(v12, 0, sizeof(v12));
  if (qword_1EB220300 && !off_1EC5263E8(a1, v12) && (uint64_t v6 = qword_1EB220300) != 0)
  {
    while (*(_DWORD *)v6 != LODWORD(v12[0]) || *(void *)(v6 + 8) != *((void *)&v12[0] + 1))
    {
      uint64_t v6 = *(void *)(v6 + 64);
      if (!v6)
      {
        uint64_t v4 = 0;
        goto LABEL_24;
      }
    }
    uint64_t v7 = *(void *)(v6 + 16);
    if (v7) {
      xmmword_1EB21CA40(v7);
    }
    uint64_t v8 = (void *)(v6 + 40);
    uint64_t v4 = *(void *)(v6 + 40);
    if (v4)
    {
      if (*(_DWORD *)(v4 + 4) == (a2 & 3))
      {
LABEL_19:
        *uint64_t v8 = *(void *)(v4 + 8);
      }
      else
      {
        while (1)
        {
          uint64_t v9 = v4;
          uint64_t v4 = *(void *)(v4 + 8);
          if (!v4) {
            break;
          }
          if (*(_DWORD *)(v4 + 4) == (a2 & 3))
          {
            uint64_t v8 = (void *)(v9 + 8);
            goto LABEL_19;
          }
        }
      }
    }
    uint64_t v10 = *(void *)(v6 + 16);
    if (v10)
    {
      xmmword_1EB21CA50(v10);
      uint64_t v5 = qword_1EB2201D0;
      if (qword_1EB2201D0) {
        goto LABEL_25;
      }
      return v4;
    }
LABEL_24:
    uint64_t v5 = qword_1EB2201D0;
    if (!qword_1EB2201D0) {
      return v4;
    }
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = qword_1EB2201D0;
    if (!qword_1EB2201D0) {
      return v4;
    }
  }
LABEL_25:
  xmmword_1EB21CA50(v5);
  return v4;
}

void sub_1B0D0A2FC(unsigned int a1, NSObject **a2, uint64_t a3)
{
  if ((a1 & 0x80000000) == 0)
  {
    if (_dispatch_is_multithreaded())
    {
      if ((_dispatch_is_fork_of_multithreaded_parent() & 1) == 0)
      {
        global_dispatch_queue_t queue = dispatch_get_global_queue(0, 2uLL);
        uint64_t v7 = dispatch_source_create(MEMORY[0x1E4F144A8], a1, a3 ^ 0x71, global_queue);
        if (v7)
        {
          uint64_t v8 = v7;
          dispatch_set_context(v7, a2);
          dispatch_source_set_event_handler_f(v8, (dispatch_function_t)sub_1B0D0A3B8);
          *a2 = v8;
          dispatch_resume(v8);
        }
      }
    }
  }
}

void sub_1B0D0A3B8(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)a1;
  if (*(void *)a1)
  {
    uintptr_t data = dispatch_source_get_data(*(dispatch_source_t *)a1);
    if (data)
    {
      uint64_t v4 = data;
      uintptr_t handle = dispatch_source_get_handle(v1);
      int v6 = handle;
      if ((v4 & 8) == 0
        || ((v10 = 0u, v11 = 0u, long long v9 = 0u, memset(v8, 0, sizeof(v8)), !off_1EC526400(handle, v8))
          ? (BOOL v7 = (void)v9 == 0)
          : (BOOL v7 = 1),
            v7))
      {
        atomic_fetch_or_explicit((atomic_uint *volatile)(a1 + 8), 1u, memory_order_relaxed);
        sub_1B0D0A478(v6, v4);
        sqlite3_log(1, "invalidated open fd: %d (0x%02lx)", v6, v4);
      }
    }
  }
}

void sub_1B0D0A478(int a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = v15;
  if (fcntl(a1, 50, v15)) {
    uint64_t v3 = "<unresolvable path>";
  }
  uint64_t v4 = "truncated";
  switch(a2)
  {
    case 1:
    case 17:
      uint64_t v4 = "unlinked";
      break;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
      goto LABEL_7;
    case 8:
      break;
    case 16:
      uint64_t v4 = "linked";
      break;
    case 32:
      uint64_t v4 = "renamed";
      break;
    default:
      if (a2 == 64)
      {
        uint64_t v4 = "revoked";
      }
      else
      {
LABEL_7:
        if ((a2 & (a2 - 1)) != 0) {
          uint64_t v4 = "affected by unexpected operations";
        }
        else {
          uint64_t v4 = "affected by unexpected operation";
        }
      }
      break;
  }
  sqlite3_log(1, "BUG IN CLIENT OF libsqlite3.dylib: database integrity compromised by API violation: vnode %s while in use: %s", v4, v3);
  if ((dword_1EB21CB84 & 4) != 0
    || (dword_1EB21CB84 & 2) != 0
    && (strstr(v3, "/iTunes/MediaLibrary.sqlitedb")
     || strstr(v3, "/PhotoData/Photos.sqlite")
     || strstr(v3, "/Notes/notes.sqlite")
     || strstr(v3, "/Accounts/Accounts3.sqlite")
     || strstr(v3, "/Calendar/Calendar.sqlitedb")
     || strstr(v3, "/AddressBook/AddressBook.sqlitedb")
     || strstr(v3, "/NoteStore.sqlite")))
  {
    uint64_t v12 = v4;
    int v14 = 0;
    uint64_t v5 = strrchr(v3, 47);
    unint64_t v6 = 0;
    if (v5) {
      BOOL v7 = v5;
    }
    else {
      BOOL v7 = v3;
    }
    if (!*v7)
    {
LABEL_36:
      qword_1E9B52040 = (v6 | a2) ^ 0x1B0A00000000;
      unint64_t v13 = 0;
      asprintf(&v13, "BUG IN CLIENT OF libsqlite3.dylib: database integrity compromised by API violation: vnode %s while in use", v12);
      if ((dword_1EB21CB84 & 0x20) != 0)
      {
        asprintf(&v14, "%s: %s");
      }
      else if (dword_1EB21CB84)
      {
        asprintf(&v14, "%s. See syslog for more information");
      }
      else
      {
        int v14 = v13;
      }
      qword_1E9B52010 = (uint64_t)v14;
      __break(1u);
      JUMPOUT(0x1B0D0A7ACLL);
    }
    size_t v8 = strlen(v7);
    int v9 = v8;
    unint64_t v10 = v8 << 32;
    if (v8 << 32 < 0x400000001) {
      goto LABEL_34;
    }
    uint64_t v11 = (int)v8 - 4;
    if (!strcmp(&v7[v11], "-shm") || !strcmp(&v7[v11], "-wal")) {
      goto LABEL_35;
    }
    if (v10 < 0x800000001)
    {
      if (v10 < 0x600000001) {
        goto LABEL_34;
      }
    }
    else
    {
      LODWORD(v11) = v9 - 8;
      if (!strcmp(&v7[v9 - 8], "-journal")) {
        goto LABEL_35;
      }
    }
    LODWORD(v11) = v9 - 6;
    if (!strcmp(&v7[v9 - 6], "-conch"))
    {
LABEL_35:
      unint64_t v6 = (unint64_t)sub_1B0D0A82C((unsigned __int8 *)v7, v11) << 16;
      goto LABEL_36;
    }
LABEL_34:
    LODWORD(v11) = v9;
    goto LABEL_35;
  }
}

uint64_t sub_1B0D0A82C(unsigned __int8 *a1, int a2)
{
  int v2 = 0xFFFF;
  if (a1 && a2 >= 1)
  {
    do
    {
      int v3 = *a1++;
      int v4 = (char)(v3 ^ ((unsigned __int16)(v2 & 0xFF00) >> 8) ^ ((char)(v3 ^ ((unsigned __int16)(v2 & 0xFF00) >> 8)) >> 4));
      int v2 = (v2 << 8) ^ ((v3 ^ ((unsigned __int16)(v2 & 0xFF00) >> 8) ^ ((char)(v3 ^ ((unsigned __int16)(v2 & 0xFF00) >> 8)) >> 4)) << 12) ^ (32 * v4) ^ v4;
      --a2;
    }
    while (a2);
  }
  return (unsigned __int16)v2;
}

uint64_t sub_1B0D0A874(uint64_t a1, int a2, uint64_t *a3)
{
  long long v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  if (!sqlite3_initialize())
  {
    BOOL v7 = (uint64_t *)sub_1B0C7FC94(16);
    if (v7)
    {
      uint64_t v8 = (uint64_t)v7;
      *BOOL v7 = 0;
      v7[1] = 0;
      uint64_t v6 = sub_1B0C77698(*(char **)(a1 + 56), v7, a2 | 6u, *(const char **)(*(void *)(a1 + 8) + 24));
      if (v6) {
        goto LABEL_5;
      }
      int v10 = *(_DWORD *)(a1 + 168);
      if (v10 >= 1)
      {
        uint64_t v6 = sqlite3_key_v2(*(void *)v8, 0, *(unsigned char **)(a1 + 176), v10);
        if (v6) {
          goto LABEL_5;
        }
      }
      uint64_t v11 = *(void *)v8;
      if (*(void *)v8)
      {
        int v12 = *(unsigned __int8 *)(v11 + 113);
        switch(v12)
        {
          case 186:
            goto LABEL_14;
          case 118:
            uint64_t v14 = *(void *)(v11 + 24);
            if (v14)
            {
              xmmword_1EB21CA40(v14);
              uint64_t v15 = *(void *)(v11 + 24);
              *(_DWORD *)(v11 + 88) = -1;
              if (v15) {
                xmmword_1EB21CA50(v15);
              }
            }
            else
            {
              *(_DWORD *)(v11 + 88) = -1;
            }
LABEL_21:
            long long v35 = 0;
            uint64_t v36 = 0;
            uint64_t v16 = *(void *)v8;
            if (*(void *)v8)
            {
              int v17 = *(unsigned __int8 *)(v16 + 113);
              switch(v17)
              {
                case 186:
                  goto LABEL_25;
                case 118:
                  uint64_t v19 = *(void *)(v16 + 24);
                  if (v19)
                  {
                    xmmword_1EB21CA40(v19);
                    uint64_t v20 = *(void *)(v16 + 24);
                    *(void *)(v16 + 664) = sub_1B0D0B428;
                    *(void *)(v16 + 672) = &v35;
                    *(void *)(v16 + 680) = v16;
                    *(_DWORD *)(v16 + 688) = 0;
                    if (v20) {
                      xmmword_1EB21CA50(v20);
                    }
                  }
                  else
                  {
                    *(void *)(v16 + 664) = sub_1B0D0B428;
                    *(void *)(v16 + 672) = &v35;
                    *(void *)(v16 + 680) = v16;
                    *(_DWORD *)(v16 + 688) = 0;
                  }
LABEL_32:
                  uint64_t v6 = sqlite3_exec(*(sqlite3 **)v8, "BEGIN EXCLUSIVE", 0, 0, 0);
                  if (v6) {
                    goto LABEL_5;
                  }
                  pStmt = 0;
                  uint64_t v22 = sub_1B0C7EAC0(*(void *)v8, "PRAGMA main.journal_mode", 0xFFFFFFFFLL, 0, 0, &pStmt, 0, v21);
                  if (v22)
                  {
                    uint64_t v6 = v22;
                    goto LABEL_5;
                  }
                  *(_DWORD *)(v8 + 8) = 0;
                  if (sqlite3_step(pStmt) != 100
                    || (uint64_t v23 = sqlite3_column_text(pStmt, 0)) == 0
                    || (char v24 = v23, strlen((const char *)v23) != 3))
                  {
LABEL_48:
                    uint64_t v6 = sqlite3_finalize(pStmt);
                    if (!v6)
                    {
                      if (!*(_DWORD *)(v8 + 8))
                      {
                        uint64_t v6 = 0;
                        goto LABEL_6;
                      }
                      uint64_t v6 = sqlite3_exec(*(sqlite3 **)v8, "COMMIT", 0, 0, 0);
                      if (!v6)
                      {
                        unint64_t v27 = *(sqlite3 **)v8;
                        long long v38 = 0;
                        pStmt = 0;
                        uint64_t v6 = sqlite3_file_control(v27, "main", 7, &pStmt);
                        if (!v6)
                        {
                          int v28 = pStmt;
                          unint64_t v29 = *(uint64_t (**)(sqlite3_stmt *, uint64_t, uint64_t, uint64_t))(*(void *)pStmt + 112);
                          while (1)
                          {
                            uint64_t v30 = v29(v28, 2, 1, 10);
                            if (v30 != 5) {
                              break;
                            }
                            if (v35)
                            {
                              LODWORD(v37) = v37 + 1;
                              if (v35(v36)) {
                                continue;
                              }
                            }
LABEL_56:
                            uint64_t v6 = 5;
                            goto LABEL_5;
                          }
                          uint64_t v6 = v30;
                          if (!v30)
                          {
                            uint64_t v6 = (*(uint64_t (**)(sqlite3_stmt *, void, uint64_t, uint64_t, _OWORD **))(*(void *)pStmt + 104))(pStmt, 0, 0x8000, 1, &v38);
                            if (!v6)
                            {
                              int v31 = v38;
                              unint64_t v32 = pStmt;
                              *long long v38 = 0u;
                              v31[1] = 0u;
                              uint64_t v33 = *(uint64_t (**)(sqlite3_stmt *, uint64_t, uint64_t, uint64_t))(*(void *)v32 + 112);
                              while (1)
                              {
                                uint64_t v34 = v33(v32, 3, 5, 10);
                                if (v34 != 5) {
                                  break;
                                }
                                if (!v35) {
                                  goto LABEL_56;
                                }
                                LODWORD(v37) = v37 + 1;
                                uint64_t v6 = 5;
                                if (!v35(v36)) {
                                  goto LABEL_5;
                                }
                              }
                              uint64_t v6 = v34;
                              if (!v34) {
                                goto LABEL_6;
                              }
                            }
                          }
                        }
                      }
                    }
LABEL_5:
                    sub_1B0D0B30C(v8);
                    uint64_t v8 = 0;
LABEL_6:
                    *a3 = v8;
                    return v6;
                  }
                  int v25 = *v24;
                  if ((v25 & 0xFFFFFFDF) == 0x57)
                  {
                    int v25 = v24[1];
                    if ((v25 & 0xFFFFFFDF) == 0x41)
                    {
                      int v25 = v24[2];
                      if ((v25 & 0xFFFFFFDF) == 0x4C)
                      {
LABEL_47:
                        *(_DWORD *)(v8 + 8) = 1;
                        goto LABEL_48;
                      }
                      int v26 = 108;
                    }
                    else
                    {
                      int v26 = 97;
                    }
                  }
                  else
                  {
                    int v26 = 119;
                  }
                  if (v26 != byte_1B0DE1758[v25]) {
                    goto LABEL_48;
                  }
                  goto LABEL_47;
                case 109:
LABEL_25:
                  int v18 = "unopened";
                  break;
                default:
                  int v18 = "invalid";
                  break;
              }
            }
            else
            {
              int v18 = "NULL";
            }
            sqlite3_log(21, "API call with %s database connection pointer", v18);
            sub_1B0CE1978(187045);
            goto LABEL_32;
          case 109:
LABEL_14:
            unint64_t v13 = "unopened";
            break;
          default:
            unint64_t v13 = "invalid";
            break;
        }
      }
      else
      {
        unint64_t v13 = "NULL";
      }
      sqlite3_log(21, "API call with %s database connection pointer", v13);
      sub_1B0CE1978(189509);
      goto LABEL_21;
    }
  }
  return 7;
}

uint64_t sub_1B0D0ACF0(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (!a1
    || (*(unsigned int (**)(uint64_t, void *, uint64_t, void))(*(void *)a1 + 16))(a1, v4, 20, 0))
  {
    return 0xFFFFFFFFLL;
  }
  if (v4[0] != 0x66206574694C5153 || *(void *)((char *)v4 + 7) != 0x332074616D726F66) {
    return 0xFFFFFFFFLL;
  }
  return v5 == 2 && v6 == 2;
}

uint64_t sub_1B0D0ADA8(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  bzero(&v22, 0x878uLL);
  memset(&v21, 0, sizeof(v21));
  if (fstat(a1, &v21)) {
    unint64_t st_size = 0;
  }
  else {
    unint64_t st_size = v21.st_size;
  }
  int v5 = fstatfs(a1, &v22);
  unint64_t p_f_iosize = (unint64_t)&v22.f_iosize;
  if (v5 == -1) {
    unint64_t p_f_iosize = (unint64_t)&v21.st_blksize;
  }
  LODWORD(p_f_iosize) = *(_DWORD *)p_f_iosize;
  if (p_f_iosize >= 0x200000) {
    LODWORD(p_f_iosize) = 0x200000;
  }
  if (p_f_iosize <= 0x8000) {
    unint64_t p_f_iosize = 0x8000;
  }
  else {
    unint64_t p_f_iosize = p_f_iosize;
  }
  if (st_size >= p_f_iosize || st_size == 0) {
    size_t v8 = p_f_iosize;
  }
  else {
    size_t v8 = st_size;
  }
  int v9 = (char *)malloc_type_malloc(v8, 0xC404BDEFuLL);
  if (v9)
  {
    int v10 = v9;
    uint64_t v11 = off_1EC526448(a1, v9, v8);
    unint64_t v12 = v11;
    if (v11 < 1)
    {
      off_t v14 = 0;
      if ((v11 & 0x8000000000000000) == 0)
      {
LABEL_34:
        if ((ftruncate(a2, v14) & 0x80000000) == 0)
        {
          uint64_t v19 = 0;
LABEL_38:
          free(v10);
          return v19;
        }
      }
    }
    else
    {
      int v13 = 0;
      off_t v14 = 0;
      uint64_t v15 = v10;
      while (1)
      {
        if (v12 >= v8) {
          size_t v16 = v8;
        }
        else {
          size_t v16 = v12;
        }
        uint64_t v17 = off_1EC526490(a2, v15, v16);
        if (v17)
        {
          if (v17 == -1) {
            goto LABEL_36;
          }
          int v13 = 0;
          v12 -= v17;
          v15 += v17;
        }
        else
        {
          if (v13 > 4)
          {
            uint64_t v19 = 35;
            *__error() = 35;
            goto LABEL_38;
          }
          ++v13;
        }
        v14 += v17;
        if (!v12)
        {
          uint64_t v18 = off_1EC526448(a1, v10, v8);
          unint64_t v12 = v18;
          int v13 = 0;
          uint64_t v15 = v10;
          if (v18 < 1) {
            break;
          }
        }
      }
      if ((v18 & 0x8000000000000000) == 0) {
        goto LABEL_34;
      }
    }
LABEL_36:
    uint64_t v19 = *__error();
    goto LABEL_38;
  }
  return 0xFFFFFFFFLL;
}

void sub_1B0D0AFB8(uint64_t a1, int a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  int v4 = __strlcpy_chk();
  if (v4 > 1023) {
    return;
  }
  *(_OWORD *)unint64_t v29 = *(_OWORD *)"-wal";
  unint64_t v5 = a2 != 0;
  char v6 = &v30[v4];
  *(_OWORD *)&v29[11] = unk_1B0DE20DD;
  uint64_t v7 = (const char *)((unint64_t)v29 | v5 | (8 * v5));
  while (v5 != 2)
  {
LABEL_12:
    if (strlcpy(v6, v7, 9uLL) <= 8)
    {
      if (v5 >= 2) {
        int v9 = 2;
      }
      else {
        int v9 = 1024;
      }
      uint64_t v10 = sub_1B0D06D40(v30, v9, 0, 0);
      if (v10 == -1)
      {
        if (*__error() != 2) {
          perror(v30);
        }
      }
      else
      {
        uint64_t v11 = v10;
        if (v5 == 2)
        {
          long long v28 = 0u;
          long long v26 = 0u;
          long long v27 = 0u;
          long long v24 = 0u;
          long long v25 = 0u;
          long long v22 = 0u;
          long long v23 = 0u;
          long long v20 = 0u;
          long long v21 = 0u;
          if (!off_1EC526400(v10, &v20))
          {
            if ((uint64_t)v26 >= 4) {
              size_t v12 = 4;
            }
            else {
              size_t v12 = v26;
            }
            if (v12)
            {
              int __buf = 0;
              pwrite(v11, &__buf, v12, 0);
            }
          }
        }
        fsync(v11);
        off_1EC5263A0(v11);
      }
    }
    ++v5;
    v7 += 9;
    if (v5 == 3) {
      return;
    }
  }
  if (qword_1EB2201D0) {
    xmmword_1EB21CA40(qword_1EB2201D0);
  }
  uint64_t v8 = *(void *)(*(void *)(a1 + 16) + 56);
  if (!v8 || *(unsigned char *)(v8 + 34) || (int v13 = *(void **)(v8 + 40)) == 0 || !*v13)
  {
LABEL_10:
    if (qword_1EB2201D0) {
      xmmword_1EB21CA50(qword_1EB2201D0);
    }
    goto LABEL_12;
  }
  long long v28 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  uint64_t v14 = *(void *)(v8 + 8);
  if (v14) {
    xmmword_1EB21CA40(v14);
  }
  uint64_t v15 = *(unsigned int *)(v8 + 24);
  if ((v15 & 0x80000000) != 0
    || off_1EC526400(v15, &v20)
    || ((uint64_t)v26 >= 4 ? (size_t v16 = 4) : (size_t v16 = v26), !v16))
  {
    uint64_t v17 = *(void *)(v8 + 8);
    if (v17) {
      xmmword_1EB21CA50(v17);
    }
    goto LABEL_10;
  }
  if (!*(_DWORD *)(v8 + 168)) {
    bzero(**(void ***)(v8 + 40), v16);
  }
  uint64_t v18 = *(void *)(v8 + 8);
  if (v18) {
    xmmword_1EB21CA50(v18);
  }
  if (qword_1EB2201D0) {
    xmmword_1EB21CA50(qword_1EB2201D0);
  }
}

unsigned __int8 *sub_1B0D0B290(unsigned __int8 *result, int a2)
{
  int v3 = result;
  int v4 = result[28];
  if (v4 > a2)
  {
    uint64_t result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *, uint64_t))(*(void *)result + 64))(result, 1);
    int v4 = v3[28];
  }
  if (v4 > a2)
  {
    unint64_t v5 = *(uint64_t (**)(unsigned __int8 *, void))(*(void *)v3 + 64);
    return (unsigned __int8 *)v5(v3, 0);
  }
  return result;
}

uint64_t sub_1B0D0B30C(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)a1;
  if (*(_DWORD *)(a1 + 8))
  {
    uint64_t v4 = 0;
    if (!sqlite3_file_control(*(sqlite3 **)a1, "main", 7, &v4))
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v4 + 112))(v4, 2, 1, 9);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v4 + 112))(v4, 3, 5, 9);
    }
  }
  sub_1B0CF369C(*v1, 0);
  int v2 = (uint64_t (**)(uint64_t *))&off_1EB21C9E8;
  if (!dword_1EB21C9C0) {
    return (*v2)(v1);
  }
  if ((void)xmmword_1EB2201B0) {
    xmmword_1EB21CA40(xmmword_1EB2201B0);
  }
  qword_1EB220108 -= (int)off_1EB21C9F8(v1);
  --qword_1EB220150;
  uint64_t result = off_1EB21C9E8(v1);
  uint64_t v1 = (uint64_t *)xmmword_1EB2201B0;
  if ((void)xmmword_1EB2201B0)
  {
    int v2 = (uint64_t (**)(uint64_t *))&xmmword_1EB21CA50;
    return (*v2)(v1);
  }
  return result;
}

uint64_t sub_1B0D0B428(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))a1;
  if (!*(void *)a1) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 8);
  ++*(_DWORD *)(a1 + 16);
  return v1(v2);
}

uint64_t sub_1B0D0B450(char *a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v6 = strlen(a1);
    int v7 = v6;
    int v8 = v6 >= 5 && strncmp("-shm", &a1[v6 - 4], 4uLL) == 0;
    uint64_t v9 = v7 & 0x3FFFFFFF;
  }
  else
  {
    int v8 = 0;
    uint64_t v9 = 0;
  }
  do
  {
    if (v9 >= 2)
    {
      uint64_t v10 = --v9;
      int v11 = a1[v9];
      if (v11 != 46) {
        continue;
      }
    }
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = (a2 >> 20) & 7;
    if (!v8) {
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  while (v11 != 45);
  __memcpy_chk();
  __strerrbuf[v10] = 0;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v26 = 0u;
  if (off_1EC5263E8(__strerrbuf, &v26)) {
    return 1802;
  }
  uint64_t v15 = WORD2(v26) & 0x1FF;
  uint64_t v14 = v27;
  uint64_t v13 = DWORD1(v27);
  uint64_t v16 = (a2 >> 20) & 7;
  if (v8)
  {
LABEL_13:
    uint64_t v17 = &dword_1B0DE8CB4[v16];
LABEL_17:
    int v19 = *v17;
    goto LABEL_18;
  }
LABEL_15:
  uint64_t v18 = v16 - 1;
  if (v18 <= 6)
  {
    uint64_t v17 = &dword_1B0DE8C98[v18];
    goto LABEL_17;
  }
  int v19 = 0;
LABEL_18:
  uint64_t v20 = sub_1B0D06D40(a1, 514, v15, v19);
  if ((v20 & 0x80000000) != 0)
  {
    if (*__error() == 1)
    {
      int v23 = *__error();
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      *(_OWORD *)__strerrbuf = 0u;
      strerror_r(v23, __strerrbuf, 0x4FuLL);
      uint64_t v12 = 23;
      sqlite3_log(23, "os_unix.c:%d: (%d) %s(%s) - %s");
    }
    else
    {
      uint64_t v12 = sub_1B0D06D2C(44931);
      int v24 = *__error();
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      *(_OWORD *)__strerrbuf = 0u;
      strerror_r(v24, __strerrbuf, 0x4FuLL);
      sqlite3_log(v12, "os_unix.c:%d: (%d) %s(%s) - %s");
    }
    return v12;
  }
  uint64_t v21 = v20;
  if (!geteuid())
  {
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    *(_OWORD *)__strerrbuf = 0u;
    int v22 = off_1EC526400(v21, __strerrbuf);
    if (v22 || (void)v36 != __PAIR64__(v13, v14))
    {
      if (!off_1EC526580() && off_1EC526568(v21, v14, v13))
      {
        uint64_t v12 = sub_1B0D06D2C(41169);
LABEL_26:
        *a3 = -1;
        off_1EC5263A0(v21);
        return v12;
      }
      if (v22)
      {
        uint64_t v12 = 1802;
        goto LABEL_26;
      }
    }
  }
  uint64_t v12 = sub_1B0D0B87C(v21, a2, v8);
  if (v12) {
    goto LABEL_26;
  }
  *a3 = v21;
  return v12;
}

uint64_t sub_1B0D0B7C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = geteuid();
  if (!result)
  {
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v9 = 0u;
    uint64_t result = off_1EC526400(a1, &v9);
    if (result) {
      BOOL v7 = 0;
    }
    else {
      BOOL v7 = v10 == a2;
    }
    if (!v7 || DWORD1(v10) != a3)
    {
      uint64_t result = off_1EC526580();
      if (!result)
      {
        uint64_t result = off_1EC526568(a1, a2, a3);
        if (result) {
          return sub_1B0D06D2C(41169);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1B0D0B87C(int a1, unsigned int a2, int a3)
{
  if (!a2) {
    return 0;
  }
  int v4 = (a2 >> 20) & 7;
  if (a3)
  {
    char v5 = 0;
    uint64_t v6 = (a2 >> 20) & 7;
    switch(v4)
    {
      case 0:
        break;
      case 1:
      case 3:
      case 7:
        char v5 = 0;
        uint64_t v6 = 3;
        break;
      case 2:
        char v5 = 0;
        uint64_t v6 = 2;
        break;
      default:
        uint64_t v6 = 4;
        char v5 = 1;
        break;
    }
  }
  else
  {
    char v5 = 0;
    uint64_t v6 = 0;
    switch(v4)
    {
      case 1:
      case 2:
      case 3:
      case 6:
      case 7:
        char v5 = 0;
        goto LABEL_8;
      case 4:
        char v5 = 1;
LABEL_8:
        uint64_t v6 = (a2 >> 20) & 7;
        break;
      default:
        break;
    }
  }
  int v8 = fcntl(a1, 63);
  uint64_t result = 0;
  if (v8 < 1) {
    char v9 = v5;
  }
  else {
    char v9 = 0;
  }
  if (v6 != v8 && (v9 & 1) == 0)
  {
    uint64_t result = fcntl(a1, 64, v6);
    if (result)
    {
      if (*__error() == 1) {
        return 23;
      }
      else {
        return 10;
      }
    }
  }
  return result;
}

uint64_t sub_1B0D0B9F0(int a1, uint64_t a2, __int16 a3, unsigned int a4, unsigned int a5)
{
  uint64_t v12 = 0;
  WORD2(v12) = a3;
  v11[0] = a4;
  v11[1] = a5;
  if (a1 == -1)
  {
    int v8 = (unsigned int (*)(uint64_t, uint64_t))off_1EC526430;
  }
  else
  {
    LODWORD(v12) = a1;
    int v7 = off_1EC526430(a2, 94);
    if (v7 == -1)
    {
      if ((*__error() == 45 || *__error() == 25) && (off_1EC526430(a2, 66) & 0x80000000) == 0) {
        goto LABEL_14;
      }
    }
    else if ((v7 & 0x80000000) == 0)
    {
      goto LABEL_14;
    }
    sqlite3_log(28, "F_GETLKPID undefined or not supported, _sqlite3_lockstate falling back to F_GETLK", v11);
    LODWORD(v12) = 0;
    int v8 = (unsigned int (*)(uint64_t, uint64_t))off_1EC526430;
  }
  if (v8(a2, 92) == -1 && (*__error() != 45 && *__error() != 25 || off_1EC526430(a2, 7) == -1))
  {
    long long v10 = __error();
    sqlite3_log(28, "fcntl(%d) failed: errno=%d\n", a2, *v10);
    return 0xFFFFFFFFLL;
  }
LABEL_14:
  if (WORD2(v12) == 2) {
    return 0;
  }
  uint64_t result = 1;
  if (a1 != -1 && v12 != a1) {
    return 0;
  }
  return result;
}

uint64_t sub_1B0D0BB7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 24);
  int v3 = off_1EC526430(v2, 92);
  if (v3 == -1)
  {
    if ((*__error() == 45 || *__error() == 25) && !off_1EC526430(v2, 7)) {
      return 5;
    }
  }
  else if (!v3)
  {
    return 5;
  }
  return 3850;
}

uint64_t sub_1B0D0BD4C(uint64_t result)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(*(void *)(result + 16) + 56);
  if (!v1 || *(_DWORD *)(v1 + 48)) {
    return result;
  }
  uint64_t v2 = result;
  int v3 = off_1EC5265E0();
  if (v3 < 0x8000) {
    uint64_t v4 = 1;
  }
  else {
    uint64_t v4 = v3 >> 15;
  }
  if (*(void *)(v1 + 8)) {
    off_1EB21CA38();
  }
  if (*(void *)(v1 + 64)) {
    off_1EB21CA38();
  }
  if (*(void *)(v1 + 72)) {
    off_1EB21CA38();
  }
  if (*(void *)(v1 + 80)) {
    off_1EB21CA38();
  }
  if (*(void *)(v1 + 88)) {
    off_1EB21CA38();
  }
  if (*(void *)(v1 + 96)) {
    off_1EB21CA38();
  }
  if (*(void *)(v1 + 104)) {
    off_1EB21CA38();
  }
  if (*(void *)(v1 + 112)) {
    off_1EB21CA38();
  }
  if (*(void *)(v1 + 120)) {
    off_1EB21CA38();
  }
  if (*(_WORD *)(v1 + 32))
  {
    unint64_t v5 = 0;
    do
    {
      if ((*(_DWORD *)(v1 + 24) & 0x80000000) != 0)
      {
        uint64_t v6 = *(void *)(*(void *)(v1 + 40) + 8 * v5);
        if (v6)
        {
          int v7 = &off_1EB21C9E8;
          if (dword_1EB21C9C0)
          {
            if ((void)xmmword_1EB2201B0) {
              xmmword_1EB21CA40(xmmword_1EB2201B0);
            }
            qword_1EB220108 -= (int)off_1EB21C9F8(v6);
            --qword_1EB220150;
            off_1EB21C9E8(v6);
            uint64_t v6 = xmmword_1EB2201B0;
            if (!(void)xmmword_1EB2201B0) {
              goto LABEL_27;
            }
            int v7 = &xmmword_1EB21CA50;
          }
          (*v7)(v6);
        }
      }
      else
      {
        off_1EC5265B0(*(void *)(*(void *)(v1 + 40) + 8 * v5), *(int *)(v1 + 28));
      }
LABEL_27:
      v5 += v4;
    }
    while (v5 < *(unsigned __int16 *)(v1 + 32));
  }
  uint64_t v8 = *(void *)(v1 + 40);
  if (v8)
  {
    char v9 = &off_1EB21C9E8;
    if (dword_1EB21C9C0)
    {
      if ((void)xmmword_1EB2201B0) {
        xmmword_1EB21CA40(xmmword_1EB2201B0);
      }
      qword_1EB220108 -= (int)off_1EB21C9F8(v8);
      --qword_1EB220150;
      off_1EB21C9E8(v8);
      uint64_t v8 = xmmword_1EB2201B0;
      if (!(void)xmmword_1EB2201B0) {
        goto LABEL_43;
      }
      char v9 = &xmmword_1EB21CA50;
    }
    (*v9)(v8);
  }
LABEL_43:
  if ((*(_DWORD *)(v1 + 24) & 0x80000000) == 0)
  {
    long long v10 = *(NSObject **)(v1 + 160);
    if (v10)
    {
      *(void *)(v1 + 160) = 0;
      if ((_dispatch_is_fork_of_multithreaded_parent() & 1) == 0)
      {
        dispatch_source_cancel_and_wait();
        dispatch_release(v10);
      }
    }
    uint64_t v11 = *(unsigned int *)(v1 + 24);
    if ((v11 & 0x80000000) == 0 && off_1EC5263A0(v11))
    {
      if (v2) {
        uint64_t v12 = *(const char **)(v2 + 56);
      }
      else {
        uint64_t v12 = 0;
      }
      int v13 = *__error();
      long long v19 = 0u;
      long long v20 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      *(_OWORD *)__strerrbuf = 0u;
      strerror_r(v13, __strerrbuf, 0x4FuLL);
      long long v14 = &byte_1B0DE9952;
      if (v12) {
        long long v14 = v12;
      }
      sqlite3_log(4106, "os_unix.c:%d: (%d) %s(%s) - %s", 46485, v13, "close", v14, __strerrbuf);
    }
    *(_DWORD *)(v1 + 24) = -1;
  }
  *(void *)(*(void *)v1 + 56) = 0;
  long long v15 = &off_1EB21C9E8;
  if (!dword_1EB21C9C0) {
    return (*v15)(v1);
  }
  if ((void)xmmword_1EB2201B0) {
    xmmword_1EB21CA40(xmmword_1EB2201B0);
  }
  qword_1EB220108 -= (int)off_1EB21C9F8(v1);
  --qword_1EB220150;
  uint64_t result = off_1EB21C9E8(v1);
  uint64_t v1 = xmmword_1EB2201B0;
  if ((void)xmmword_1EB2201B0)
  {
    long long v15 = &xmmword_1EB21CA50;
    return (*v15)(v1);
  }
  return result;
}

uint64_t sub_1B0D0C0F0(uint64_t a1, __int16 a2, int a3, int a4)
{
  uint64_t v5 = *(unsigned int *)(*(void *)(*(void *)(a1 + 16) + 56) + 24);
  if ((v5 & 0x80000000) != 0) {
    return 0;
  }
  uint64_t v8 = 0;
  WORD2(v8) = a2;
  v7[0] = a3;
  v7[1] = a4;
  if (sub_1B0D077B8(v5, (uint64_t)v7, a1) != -1) {
    return 0;
  }
  if (*(_DWORD *)(a1 + 132)) {
    return 773;
  }
  return 5;
}

uint64_t sub_1B0D0C16C(uint64_t a1)
{
  sub_1B0D0C808(a1, 0);
  uint64_t v2 = *(NSObject **)(a1 + 152);
  if (v2)
  {
    *(void *)(a1 + 152) = 0;
    if ((_dispatch_is_fork_of_multithreaded_parent() & 1) == 0)
    {
      dispatch_source_cancel_and_wait();
      dispatch_release(v2);
    }
  }
  if (qword_1EB2201D0) {
    xmmword_1EB21CA40(qword_1EB2201D0);
  }
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 16);
    if (v4) {
      xmmword_1EB21CA40(v4);
    }
    if (*(_DWORD *)(v3 + 28))
    {
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 48);
      *(void *)(v6 + 8) = *(void *)(v5 + 40);
      *(void *)(v5 + 40) = v6;
      *(_DWORD *)(a1 + 24) = -1;
      *(void *)(a1 + 48) = 0;
    }
    uint64_t v7 = *(void *)(v3 + 16);
    if (v7) {
      xmmword_1EB21CA50(v7);
    }
  }
  sub_1B0D06A2C(a1);
  uint64_t v8 = *(void *)(a1 + 40);
  if (v8)
  {
    char v9 = &off_1EB21C9E8;
    if (!dword_1EB21C9C0)
    {
LABEL_19:
      (*v9)(v8);
      goto LABEL_20;
    }
    if ((void)xmmword_1EB2201B0) {
      xmmword_1EB21CA40(xmmword_1EB2201B0);
    }
    qword_1EB220108[0] -= (int)off_1EB21C9F8(v8);
    --qword_1EB220150;
    off_1EB21C9E8(v8);
    uint64_t v8 = xmmword_1EB2201B0;
    if ((void)xmmword_1EB2201B0)
    {
      char v9 = &xmmword_1EB21CA50;
      goto LABEL_19;
    }
  }
LABEL_20:
  sub_1B0CCB3C8(a1);
  if (qword_1EB2201D0) {
    xmmword_1EB21CA50(qword_1EB2201D0);
  }
  return 0;
}

uint64_t sub_1B0D0C2DC(uint64_t a1, int a2)
{
  unsigned int v2 = *(unsigned __int8 *)(a1 + 28);
  if ((int)v2 >= a2) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(int32x2_t **)(a1 + 16);
  int32x2_t v7 = v6[2];
  if (v7)
  {
    xmmword_1EB21CA40(*(void *)&v7);
    unsigned int v2 = *(unsigned __int8 *)(a1 + 28);
  }
  unsigned int v8 = v6[4].u8[0];
  if (v2 != v8)
  {
    uint64_t v9 = 5;
    if (a2 > 1 || v8 > 2) {
      goto LABEL_68;
    }
  }
  if (a2 == 1)
  {
    if (v8 - 1 <= 1)
    {
      uint64_t v9 = 0;
      *(unsigned char *)(a1 + 28) = 1;
      v6[3] = vadd_s32(v6[3], (int32x2_t)0x100000001);
      goto LABEL_68;
    }
  }
  else
  {
    if (a2 != 4)
    {
      int v19 = 0;
      goto LABEL_32;
    }
    if (v2 > 2)
    {
LABEL_28:
      if (v6[3].i32[0] > 1)
      {
        uint64_t v9 = 5;
LABEL_57:
        *(unsigned char *)(a1 + 28) = 3;
        v6[4].i8[0] = 3;
        goto LABEL_68;
      }
      int v19 = 1;
LABEL_32:
      if (*(unsigned __int8 *)(a1 + 28) <= 1u)
      {
        long long v20 = *(const char **)(v5 + 8);
        uint64_t v31 = 0;
        uint64_t v32 = 0;
        uint64_t v29 = dword_1E9B51ED0 + 1;
        uint64_t v30 = 1;
        HIDWORD(v32) = *(_DWORD *)(a1 + 24);
        if (fsctl(v20, 0xC0207A17uLL, &v29, 0) == -1)
        {
          uint64_t v25 = *__error();
          uint64_t v9 = 5;
          if (v25 > 0x3C) {
            goto LABEL_45;
          }
          if (((1 << v25) & 0x1000000800012010) != 0) {
            goto LABEL_56;
          }
          if (v25 != 1)
          {
LABEL_45:
            if (v25 == 77) {
              goto LABEL_56;
            }
            uint64_t v9 = 3850;
            goto LABEL_55;
          }
          goto LABEL_50;
        }
        *(_DWORD *)uint64_t v5 = 1;
      }
      if (!v19) {
        goto LABEL_67;
      }
      uint64_t v21 = *(const char **)(v5 + 8);
      uint64_t v22 = dword_1E9B51ED0 + *(void *)&v6[10] + 2;
      uint64_t v31 = 0;
      uint64_t v32 = 1;
      uint64_t v29 = v22;
      uint64_t v30 = 1;
      HIDWORD(v32) = *(_DWORD *)(a1 + 24);
      if (fsctl(v21, 0xC0207A17uLL, &v29, 0) != -1)
      {
        uint64_t v23 = sub_1B0D0CE74(*(const char **)(v5 + 8), a1, dword_1E9B51ED0 + 2, 510, 1);
        if (v23)
        {
          uint64_t v9 = v23;
          unsigned int v24 = sub_1B0D0CE74(*(const char **)(v5 + 8), a1, dword_1E9B51ED0 + *(void *)&v6[10] + 2, 1, 1);
          if (v24)
          {
            if (v9 == 10) {
              uint64_t v9 = v24;
            }
            else {
              uint64_t v9 = 3850;
            }
            goto LABEL_68;
          }
          goto LABEL_56;
        }
LABEL_67:
        uint64_t v9 = 0;
        *(unsigned char *)(a1 + 28) = a2;
        v6[4].i8[0] = a2;
        goto LABEL_68;
      }
      uint64_t v25 = *__error();
      uint64_t v9 = 5;
      if (v25 > 0x3C) {
        goto LABEL_53;
      }
      if (((1 << v25) & 0x1000000800012010) != 0) {
        goto LABEL_56;
      }
      if (v25 != 1)
      {
LABEL_53:
        if (v25 == 77) {
          goto LABEL_56;
        }
        uint64_t v9 = 2058;
LABEL_55:
        *(_DWORD *)(a1 + 32) = v25;
LABEL_56:
        if (a2 != 4) {
          goto LABEL_68;
        }
        goto LABEL_57;
      }
LABEL_50:
      uint64_t v9 = 3;
      goto LABEL_55;
    }
  }
  long long v10 = *(const char **)(v5 + 8);
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v29 = dword_1E9B51ED0;
  uint64_t v30 = 1;
  HIDWORD(v32) = *(_DWORD *)(a1 + 24);
  if (fsctl(v10, 0xC0207A17uLL, &v29, 0) == -1)
  {
    uint64_t v18 = *__error();
    uint64_t v9 = 5;
    if (v18 > 0x3C) {
      goto LABEL_51;
    }
    if (((1 << v18) & 0x1000000800012010) != 0) {
      goto LABEL_68;
    }
    if (v18 != 1)
    {
LABEL_51:
      if (v18 != 77)
      {
        uint64_t v9 = 3850;
        *(_DWORD *)(a1 + 32) = v18;
      }
      goto LABEL_68;
    }
    uint64_t v9 = 3;
    *(_DWORD *)(a1 + 32) = 1;
    goto LABEL_68;
  }
  if (a2 != 1) {
    goto LABEL_28;
  }
  unint64_t v11 = (random() & 0x7FFFFFFFFFFFFFFFuLL) % 0x1FD;
  v6[10] = (int32x2_t)v11;
  uint64_t v12 = *(const char **)(v5 + 8);
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v29 = dword_1E9B51ED0 + v11 + 2;
  uint64_t v30 = 1;
  HIDWORD(v32) = *(_DWORD *)(a1 + 24);
  int v13 = fsctl(v12, 0xC0207A17uLL, &v29, 0);
  uint64_t v14 = 0;
  if (v13 != -1)
  {
LABEL_18:
    LODWORD(v15) = 0;
    goto LABEL_19;
  }
  uint64_t v15 = *__error();
  uint64_t v14 = 5;
  if (v15 > 0x3C) {
    goto LABEL_76;
  }
  if (((1 << v15) & 0x1000000800012010) != 0) {
    goto LABEL_18;
  }
  if (v15 == 1)
  {
    uint64_t v14 = 3;
  }
  else
  {
LABEL_76:
    if (v15 == 77) {
      goto LABEL_18;
    }
    uint64_t v14 = 3850;
  }
  *(_DWORD *)(a1 + 32) = v15;
LABEL_19:
  long long v16 = *(const char **)(v5 + 8);
  uint64_t v31 = 0;
  uint64_t v32 = 1;
  uint64_t v29 = dword_1E9B51ED0;
  uint64_t v30 = 1;
  HIDWORD(v32) = *(_DWORD *)(a1 + 24);
  uint64_t v9 = 0;
  if (fsctl(v16, 0xC0207A17uLL, &v29, 0) == -1)
  {
    uint64_t v17 = *__error();
    uint64_t v9 = 5;
    if (v17 <= 0x3C)
    {
      if (((1 << v17) & 0x1000000800012010) != 0) {
        goto LABEL_61;
      }
      if (v17 == 1)
      {
        uint64_t v9 = 3;
LABEL_60:
        *(_DWORD *)(a1 + 32) = v17;
        goto LABEL_61;
      }
    }
    if (v17 != 77)
    {
      uint64_t v9 = 2058;
      goto LABEL_60;
    }
  }
LABEL_61:
  if (v14 && v14 != 5)
  {
    *(_DWORD *)(a1 + 32) = v15;
    uint64_t v9 = v14;
  }
  else if (v9 == 5 || !v9)
  {
    if (v13 != -1)
    {
      int v26 = v6[3].i32[1] + 1;
      v6[3].i32[0] = 1;
      v6[3].i32[1] = v26;
      goto LABEL_67;
    }
    uint64_t v9 = v14;
    if (!v14) {
      goto LABEL_67;
    }
  }
LABEL_68:
  int32x2_t v27 = v6[2];
  if (v27) {
    xmmword_1EB21CA50(*(void *)&v27);
  }
  return v9;
}

uint64_t sub_1B0D0C808(uint64_t a1, signed int a2)
{
  unsigned int v2 = *(unsigned __int8 *)(a1 + 28);
  if ((int)v2 <= a2) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7)
  {
    xmmword_1EB21CA40(v7);
    unsigned int v2 = *(unsigned __int8 *)(a1 + 28);
  }
  if (v2 < 2)
  {
    uint64_t v12 = 0;
    goto LABEL_13;
  }
  if (v2 != 4)
  {
    int v11 = 0;
    if (v2 < 3) {
      goto LABEL_32;
    }
    goto LABEL_15;
  }
  unsigned int v8 = *(const char **)(v5 + 8);
  uint64_t v28 = 0;
  uint64_t v29 = 1;
  uint64_t v26 = dword_1E9B51ED0 + 2;
  uint64_t v27 = 510;
  HIDWORD(v29) = *(_DWORD *)(a1 + 24);
  if (fsctl(v8, 0xC0207A17uLL, &v26, 0) == -1)
  {
    uint64_t v14 = *__error();
    uint64_t v12 = 5;
    if (v14 <= 0x3C)
    {
      if (((1 << v14) & 0x1000000800012010) != 0) {
        goto LABEL_49;
      }
      if (v14 == 1)
      {
        uint64_t v12 = 3;
LABEL_48:
        *(_DWORD *)(a1 + 32) = v14;
        goto LABEL_49;
      }
    }
    if (v14 != 77)
    {
      uint64_t v12 = 2058;
      goto LABEL_48;
    }
LABEL_49:
    int v11 = 1;
    goto LABEL_50;
  }
  if (a2 == 1 || *(int *)(v6 + 24) >= 2)
  {
    uint64_t v9 = *(const char **)(v5 + 8);
    uint64_t v10 = dword_1E9B51ED0 + *(_DWORD *)(v6 + 80) + 2;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v26 = v10;
    uint64_t v27 = 1;
    HIDWORD(v29) = *(_DWORD *)(a1 + 24);
    if (fsctl(v9, 0xC0207A17uLL, &v26, 0) != -1)
    {
      int v11 = 0;
      goto LABEL_31;
    }
    uint64_t v16 = *__error();
    uint64_t v12 = 5;
    if (v16 <= 0x3C)
    {
      if (((1 << v16) & 0x1000000800012010) != 0) {
        goto LABEL_13;
      }
      if (v16 == 1)
      {
        uint64_t v12 = 3;
LABEL_69:
        *(_DWORD *)(a1 + 32) = v16;
        goto LABEL_13;
      }
    }
    if (v16 != 77)
    {
      uint64_t v12 = 3850;
      goto LABEL_69;
    }
LABEL_13:
    int v11 = 0;
    goto LABEL_50;
  }
  int v11 = 1;
LABEL_31:
  unsigned int v2 = *(unsigned __int8 *)(a1 + 28);
  if (v2 < 3)
  {
LABEL_32:
    if (v2 >= 2) {
      goto LABEL_33;
    }
LABEL_36:
    if (a2 == 1 || *(int *)(v6 + 24) >= 2)
    {
      uint64_t v12 = 0;
      *(unsigned char *)(v6 + 32) = 1;
    }
    else
    {
      uint64_t v12 = 0;
    }
    goto LABEL_50;
  }
LABEL_15:
  int v13 = *(const char **)(v5 + 8);
  uint64_t v28 = 0;
  uint64_t v29 = 1;
  uint64_t v26 = dword_1E9B51ED0;
  uint64_t v27 = 1;
  HIDWORD(v29) = *(_DWORD *)(a1 + 24);
  if (fsctl(v13, 0xC0207A17uLL, &v26, 0) == -1)
  {
    uint64_t v15 = *__error();
    uint64_t v12 = 5;
    if (v15 <= 0x3C)
    {
      if (((1 << v15) & 0x1000000800012010) != 0) {
        goto LABEL_50;
      }
      if (v15 == 1) {
        goto LABEL_43;
      }
    }
    goto LABEL_44;
  }
  if (*(unsigned __int8 *)(a1 + 28) < 2u) {
    goto LABEL_36;
  }
LABEL_33:
  if (!*(_DWORD *)v5) {
    goto LABEL_36;
  }
  uint64_t v17 = *(const char **)(v5 + 8);
  uint64_t v28 = 0;
  uint64_t v29 = 1;
  uint64_t v26 = dword_1E9B51ED0 + 1;
  uint64_t v27 = 1;
  HIDWORD(v29) = *(_DWORD *)(a1 + 24);
  if (fsctl(v17, 0xC0207A17uLL, &v26, 0) != -1)
  {
    *(_DWORD *)uint64_t v5 = 0;
    goto LABEL_36;
  }
  uint64_t v15 = *__error();
  uint64_t v12 = 5;
  if (v15 <= 0x3C)
  {
    if (((1 << v15) & 0x1000000800012010) != 0) {
      goto LABEL_50;
    }
    if (v15 == 1)
    {
LABEL_43:
      uint64_t v12 = 3;
      *(_DWORD *)(a1 + 32) = v15;
      goto LABEL_50;
    }
  }
LABEL_44:
  if (v15 != 77)
  {
    uint64_t v12 = 2058;
    *(_DWORD *)(a1 + 32) = v15;
  }
LABEL_50:
  if (!(v12 | a2))
  {
    uint64_t v18 = dword_1E9B51ED0;
    uint64_t v19 = *(void *)(v6 + 80);
    int v20 = *(_DWORD *)(v6 + 24) - 1;
    *(_DWORD *)(v6 + 24) = v20;
    if (v20)
    {
LABEL_55:
      int v22 = *(_DWORD *)(v6 + 28) - 1;
      *(_DWORD *)(v6 + 28) = v22;
      if (!v22) {
        sub_1B0D07034(a1);
      }
      uint64_t v12 = 0;
      goto LABEL_58;
    }
    if (v11
      || (uint64_t v21 = *(const char **)(v5 + 8),
          uint64_t v28 = 0,
          uint64_t v29 = 1,
          uint64_t v26 = v18 + v19 + 2,
          uint64_t v27 = 1,
          HIDWORD(v29) = *(_DWORD *)(a1 + 24),
          fsctl(v21, 0xC0207A17uLL, &v26, 0) != -1))
    {
      *(unsigned char *)(v6 + 32) = 0;
      *(unsigned char *)(a1 + 28) = 0;
      goto LABEL_55;
    }
    uint64_t v25 = *__error();
    uint64_t v12 = 5;
    if (v25 > 0x3C) {
      goto LABEL_70;
    }
    if (((1 << v25) & 0x1000000800012010) == 0)
    {
      if (v25 == 1)
      {
        uint64_t v12 = 3;
        *(_DWORD *)(a1 + 32) = 1;
        goto LABEL_58;
      }
LABEL_70:
      if (v25 != 77)
      {
        uint64_t v12 = 2058;
        *(_DWORD *)(a1 + 32) = v25;
      }
    }
  }
LABEL_58:
  uint64_t v23 = *(void *)(v6 + 16);
  if (v23) {
    xmmword_1EB21CA50(v23);
  }
  if (!v12) {
    *(unsigned char *)(a1 + 28) = a2;
  }
  return v12;
}

uint64_t sub_1B0D0CC84(uint64_t a1, int *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (*(_DWORD *)v3)
  {
    uint64_t v4 = 0;
    int v5 = 1;
    goto LABEL_29;
  }
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(v7 + 16);
  if (v8)
  {
    xmmword_1EB21CA40(v8);
    uint64_t v7 = *(void *)(a1 + 16);
  }
  if (*(unsigned __int8 *)(v7 + 32) > 1u)
  {
    uint64_t v4 = 0;
    int v5 = 1;
    goto LABEL_27;
  }
  uint64_t v9 = *(const char **)(v3 + 8);
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v15 = dword_1E9B51ED0 + 1;
  uint64_t v16 = 1;
  HIDWORD(v18) = *(_DWORD *)(a1 + 24);
  if (fsctl(v9, 0xC0207A17uLL, &v15, 0) == -1)
  {
    uint64_t v12 = *__error();
    uint64_t v4 = 5;
    if (v12 <= 0x3C)
    {
      if (((1 << v12) & 0x1000000800012010) != 0) {
        goto LABEL_20;
      }
      if (v12 == 1)
      {
        uint64_t v4 = 3;
LABEL_19:
        *(_DWORD *)(a1 + 32) = v12;
        goto LABEL_20;
      }
    }
    if (v12 != 77)
    {
      uint64_t v4 = 3850;
      goto LABEL_19;
    }
LABEL_20:
    int v5 = 1;
    goto LABEL_25;
  }
  uint64_t v10 = *(const char **)(v3 + 8);
  uint64_t v17 = 0;
  uint64_t v18 = 1;
  uint64_t v15 = dword_1E9B51ED0 + 1;
  uint64_t v16 = 1;
  HIDWORD(v18) = *(_DWORD *)(a1 + 24);
  uint64_t v4 = 0;
  if (fsctl(v10, 0xC0207A17uLL, &v15, 0) != -1) {
    goto LABEL_24;
  }
  uint64_t v11 = *__error();
  uint64_t v4 = 5;
  if (v11 > 0x3C) {
    goto LABEL_21;
  }
  if (((1 << v11) & 0x1000000800012010) != 0) {
    goto LABEL_24;
  }
  if (v11 == 1)
  {
    uint64_t v4 = 3;
  }
  else
  {
LABEL_21:
    if (v11 == 77) {
      goto LABEL_24;
    }
    uint64_t v4 = 2058;
  }
  *(_DWORD *)(a1 + 32) = v11;
LABEL_24:
  int v5 = 0;
  if (v4)
  {
LABEL_25:
    if (v4 == 5) {
      uint64_t v4 = 0;
    }
  }
LABEL_27:
  uint64_t v13 = *(void *)(*(void *)(a1 + 16) + 16);
  if (v13) {
    xmmword_1EB21CA50(v13);
  }
LABEL_29:
  *a2 = v5;
  return v4;
}

uint64_t sub_1B0D0CE74(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  v10[2] = 0;
  uint64_t v11 = a5 == 0;
  v10[0] = a3;
  v10[1] = a4;
  HIDWORD(v11) = *(_DWORD *)(a2 + 24);
  int v7 = fsctl(a1, 0xC0207A17uLL, v10, 0);
  uint64_t result = 0;
  if (v7 == -1)
  {
    uint64_t v9 = *__error();
    uint64_t result = 5;
    if (v9 > 0x3C) {
      goto LABEL_6;
    }
    if (((1 << v9) & 0x1000000800012010) != 0) {
      return result;
    }
    if (v9 == 1)
    {
      uint64_t result = 3;
    }
    else
    {
LABEL_6:
      if (v9 == 77) {
        return result;
      }
      if (a5) {
        uint64_t result = 3850;
      }
      else {
        uint64_t result = 2058;
      }
    }
    *(_DWORD *)(a2 + 32) = v9;
  }
  return result;
}

uint64_t sub_1B0D0CF40(uint64_t a1, signed int a2)
{
  return sub_1B0D078E4(a1, a2, 1);
}

uint64_t sub_1B0D0CF48()
{
  return 0;
}

uint64_t sub_1B0D0CF50()
{
  return 0;
}

uint64_t sub_1B0D0CF58(uint64_t a1, _DWORD *a2)
{
  *a2 = 0;
  return 0;
}

uint64_t sub_1B0D0CF64(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(unsigned char *)(a1 + 28))
  {
    if ((off_1EC526550(*(void *)(a1 + 40)) & 0x80000000) != 0)
    {
      int v3 = *__error();
      if (v3 != 2) {
        *(_DWORD *)(a1 + 32) = v3;
      }
    }
    else
    {
      *(unsigned char *)(a1 + 28) = 0;
    }
    uint64_t v2 = *(void *)(a1 + 40);
  }
  if (v2)
  {
    uint64_t v4 = &off_1EB21C9E8;
    if (!dword_1EB21C9C0)
    {
LABEL_13:
      (*v4)(v2);
      goto LABEL_14;
    }
    if ((void)xmmword_1EB2201B0) {
      xmmword_1EB21CA40(xmmword_1EB2201B0);
    }
    qword_1EB220108[0] -= (int)off_1EB21C9F8(v2);
    --qword_1EB220150;
    off_1EB21C9E8(v2);
    uint64_t v2 = xmmword_1EB2201B0;
    if ((void)xmmword_1EB2201B0)
    {
      uint64_t v4 = &xmmword_1EB21CA50;
      goto LABEL_13;
    }
  }
LABEL_14:
  sub_1B0CCB3C8(a1);
  return 0;
}

uint64_t sub_1B0D0D05C(uint64_t a1, char a2)
{
  uint64_t v4 = *(const char **)(a1 + 40);
  if (*(unsigned char *)(a1 + 28))
  {
    *(unsigned char *)(a1 + 28) = a2;
    utime(v4, 0);
    return 0;
  }
  else
  {
    uint64_t result = off_1EC526538(v4, 511);
    if ((result & 0x80000000) != 0)
    {
      int v6 = *__error();
      uint64_t v7 = 3;
      uint64_t result = 5;
      switch(v6)
      {
        case 1:
          goto LABEL_7;
        case 4:
        case 13:
        case 16:
        case 17:
        case 35:
        case 60:
        case 77:
          return result;
        default:
          uint64_t v7 = 3850;
LABEL_7:
          *(_DWORD *)(a1 + 32) = v6;
          uint64_t result = v7;
          break;
      }
    }
    else
    {
      *(unsigned char *)(a1 + 28) = a2;
    }
  }
  return result;
}

uint64_t sub_1B0D0D238(uint64_t a1, int a2)
{
  if (*(unsigned __int8 *)(a1 + 28) == a2) {
    return 0;
  }
  if (a2 == 1)
  {
    uint64_t result = 0;
    *(unsigned char *)(a1 + 28) = 1;
  }
  else if ((off_1EC526550(*(void *)(a1 + 40)) & 0x80000000) != 0)
  {
    int v4 = *__error();
    if (v4 == 2) {
      return 0;
    }
    *(_DWORD *)(a1 + 32) = v4;
    return 2058;
  }
  else
  {
    uint64_t result = 0;
    *(unsigned char *)(a1 + 28) = 0;
  }
  return result;
}

uint64_t sub_1B0D0D2BC(uint64_t a1, _DWORD *a2)
{
  *a2 = off_1EC5263B8(*(void *)(a1 + 40), 0) == 0;
  return 0;
}

char *sub_1B0D0D300()
{
  uint64_t result = getenv("SQLITE_EXEMPT_PATH_FROM_VNODE_GUARDS");
  if (!result) {
    return result;
  }
  uint64_t v1 = strdup(result);
  int v2 = strlen(v1);
  if (!v2) {
    goto LABEL_12;
  }
  qword_1E9B52090[0] = (uint64_t)v1;
  if (v2 < 1) {
    goto LABEL_12;
  }
  LODWORD(v3) = 0;
  uint64_t v4 = v2;
  int v5 = v1 + 1;
  while (*(v5 - 1) != 58)
  {
LABEL_5:
    ++v5;
    if (!--v4) {
      goto LABEL_12;
    }
  }
  *(v5 - 1) = 0;
  if ((int)v3 <= 23)
  {
    uint64_t v3 = (int)v3 + 1;
    if (*v5) {
      qword_1E9B52090[v3] = (uint64_t)v5;
    }
    goto LABEL_5;
  }
  sqlite3_log(28, "Too many entries in SQLITE_EXEMPT_PATH_FROM_VNODE_GUARDS, truncating list to first %d entries", 26);
LABEL_12:

  return (char *)sub_1B0D0826C();
}

void sub_1B0D0D3E0(uint64_t a1, uint64_t a2)
{
  int v4 = 0;
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = 0x1EC526000;
  unint64_t v6 = 0x1EC526000;
  do
  {
    uint64_t v7 = 0;
    uint64_t v8 = v4;
    uint64_t v9 = (unsigned char *)(a2 + v4);
    int v10 = *v9;
    if (*v9)
    {
      do
      {
        if (v10 == 47) {
          break;
        }
        int v10 = v9[++v7];
      }
      while (v9[v7]);
    }
    uint64_t v11 = (unsigned char *)(a2 + v8);
    if ((int)v8 < (int)v8 + (int)v7)
    {
      if (*v11 == 46)
      {
        if (v7 == 1) {
          goto LABEL_3;
        }
        uint64_t v12 = *(unsigned int *)(a1 + 20);
        if (v7 == 2 && v11[1] == 46)
        {
          if ((int)v12 >= 2)
          {
            uint64_t v13 = (unsigned __int8 *)(*(void *)(a1 + 8) + v12 - 1);
            int v14 = v12 - 1;
            do
            {
              *(_DWORD *)(a1 + 20) = v14;
              int v15 = *v13--;
              --v14;
            }
            while (v15 != 47);
          }
          goto LABEL_3;
        }
      }
      else
      {
        LODWORD(v12) = *(_DWORD *)(a1 + 20);
      }
      if ((int)v12 + (int)v7 + 2 >= *(_DWORD *)(a1 + 16))
      {
        *(_DWORD *)a1 = 1;
        goto LABEL_3;
      }
      uint64_t v16 = *(void *)(a1 + 8);
      *(_DWORD *)(a1 + 20) = v12 + 1;
      *(unsigned char *)(v16 + (int)v12) = 47;
      memcpy((void *)(*(void *)(a1 + 8) + *(int *)(a1 + 20)), (const void *)(a2 + v8), (int)v7);
      int v17 = *(_DWORD *)(a1 + 20) + v7;
      *(_DWORD *)(a1 + 20) = v17;
      if (!*(_DWORD *)a1)
      {
        memset(v30, 0, sizeof(v30));
        *(unsigned char *)(*(void *)(a1 + 8) + v17) = 0;
        uint64_t v18 = *(const char **)(a1 + 8);
        if ((*(unsigned int (**)(const char *, _OWORD *))(v5 + 1552))(v18, v30))
        {
          if (*__error() != 2 && *__error() != 1)
          {
            unint64_t v19 = v6;
            int v20 = *__error();
            long long v34 = 0u;
            long long v35 = 0u;
            long long v32 = 0u;
            long long v33 = 0u;
            *(_OWORD *)__strerrbuf = 0u;
            strerror_r(v20, __strerrbuf, 0x4FuLL);
            uint64_t v21 = &byte_1B0DE9952;
            if (v18) {
              uint64_t v21 = v18;
            }
            int v28 = v20;
            unint64_t v6 = v19;
            sqlite3_log(14, "os_unix.c:%d: (%d) %s(%s) - %s", 49868, v28, "lstat", v21, __strerrbuf);
          }
        }
        else
        {
          if ((WORD2(v30[0]) & 0xF000) != 0xA000) {
            goto LABEL_3;
          }
          int v22 = *(_DWORD *)(a1 + 4);
          *(_DWORD *)(a1 + 4) = v22 + 1;
          if (v22 >= 201)
          {
            int v23 = sub_1B0D06D2C(49874);
LABEL_32:
            *(_DWORD *)a1 = v23;
            unint64_t v6 = 0x1EC526000uLL;
            goto LABEL_3;
          }
          uint64_t v24 = (*(uint64_t (**)(const char *, char *, uint64_t))(v6 + 1528))(v18, __strerrbuf, 1024);
          if ((unint64_t)(v24 - 1024) <= 0xFFFFFFFFFFFFFC00)
          {
            int v23 = sub_1B0D06D2C(49879);
            int v25 = *__error();
            long long v39 = 0u;
            long long v40 = 0u;
            long long v37 = 0u;
            long long v38 = 0u;
            *(_OWORD *)long long v36 = 0u;
            strerror_r(v25, v36, 0x4FuLL);
            uint64_t v26 = &byte_1B0DE9952;
            if (v18) {
              uint64_t v26 = v18;
            }
            int v29 = v25;
            unint64_t v5 = 0x1EC526000uLL;
            sqlite3_log(v23, "os_unix.c:%d: (%d) %s(%s) - %s", 49879, v29, "readlink", v26, v36);
            goto LABEL_32;
          }
          int v27 = 0;
          __strerrbuf[v24] = 0;
          if (__strerrbuf[0] != 47) {
            int v27 = ~v7 + *(_DWORD *)(a1 + 20);
          }
          *(_DWORD *)(a1 + 20) = v27;
          sub_1B0D0D3E0(a1, __strerrbuf);
        }
      }
    }
LABEL_3:
    int v4 = v8 + v7 + 1;
  }
  while (v11[v7]);
}

void *sub_1B0D0D744()
{
  return &unk_1F09A51F0;
}

void *sub_1B0D0D750()
{
  return &unk_1F09A5288;
}

void *sub_1B0D0D75C()
{
  return &unk_1F09A5028;
}

void *sub_1B0D0D768()
{
  return &unk_1F09A53D8;
}

uint64_t sub_1B0D0D774(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 28))
  {
    int v2 = *(_DWORD *)(a1 + 24);
    while (1)
    {
      int v3 = flock(v2, 8);
      if ((v3 & 0x80000000) == 0) {
        break;
      }
      if (*__error() != 4) {
        goto LABEL_8;
      }
    }
    if (!v3) {
      *(unsigned char *)(a1 + 28) = 0;
    }
  }
LABEL_8:
  sub_1B0CCB3C8(a1);
  return 0;
}

uint64_t sub_1B0D0D7D8(uint64_t a1, char a2)
{
  if (*(unsigned char *)(a1 + 28))
  {
    uint64_t result = 0;
LABEL_3:
    *(unsigned char *)(a1 + 28) = a2;
  }
  else
  {
    int v5 = *(_DWORD *)(a1 + 24);
    while (1)
    {
      uint64_t result = flock(v5, 6);
      if ((result & 0x80000000) == 0) {
        break;
      }
      if (*__error() != 4) {
        goto LABEL_9;
      }
    }
    if (!result) {
      goto LABEL_3;
    }
LABEL_9:
    uint64_t v6 = *__error();
    uint64_t result = 5;
    if (v6 > 0x3C) {
      goto LABEL_13;
    }
    if (((1 << v6) & 0x1000000800012010) != 0) {
      return result;
    }
    if (v6 == 1)
    {
      uint64_t result = 3;
    }
    else
    {
LABEL_13:
      if (v6 == 77) {
        return result;
      }
      uint64_t result = 3850;
    }
    *(_DWORD *)(a1 + 32) = v6;
  }
  return result;
}

uint64_t sub_1B0D0D898(uint64_t a1, int a2)
{
  if (*(unsigned __int8 *)(a1 + 28) == a2) {
    return 0;
  }
  if (a2 == 1)
  {
    char v4 = 1;
  }
  else
  {
    int v5 = *(_DWORD *)(a1 + 24);
    while (1)
    {
      int v6 = flock(v5, 8);
      if ((v6 & 0x80000000) == 0) {
        break;
      }
      if (*__error() != 4) {
        return 2058;
      }
    }
    if (v6) {
      return 2058;
    }
    char v4 = 0;
  }
  uint64_t result = 0;
  *(unsigned char *)(a1 + 28) = v4;
  return result;
}

uint64_t sub_1B0D0D91C(uint64_t a1, int *a2)
{
  if (*(unsigned __int8 *)(a1 + 28) > 1u)
  {
    uint64_t result = 0;
    int v7 = 1;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 24);
    while (1)
    {
      int v5 = flock(v4, 6);
      if ((v5 & 0x80000000) == 0) {
        break;
      }
      if (*__error() != 4) {
        goto LABEL_8;
      }
    }
    if (!v5)
    {
      int v10 = *(_DWORD *)(a1 + 24);
      while (1)
      {
        uint64_t result = flock(v10, 8);
        if ((result & 0x80000000) == 0) {
          break;
        }
        if (*__error() != 4) {
          goto LABEL_19;
        }
      }
      if (result)
      {
LABEL_19:
        uint64_t v11 = __error();
        int v7 = 0;
        LODWORD(v9) = *v11;
        uint64_t result = 2058;
        goto LABEL_20;
      }
      int v7 = 0;
      goto LABEL_21;
    }
LABEL_8:
    uint64_t v8 = __error();
    uint64_t result = 0;
    uint64_t v9 = *v8;
    int v7 = 1;
    if (v9 > 0x3C) {
      goto LABEL_12;
    }
    if (((1 << v9) & 0x1000000800012010) != 0) {
      goto LABEL_21;
    }
    if (v9 == 1)
    {
      uint64_t result = 3;
      int v7 = 1;
    }
    else
    {
LABEL_12:
      if (v9 == 77) {
        goto LABEL_21;
      }
      uint64_t result = 3850;
    }
LABEL_20:
    *(_DWORD *)(a1 + 32) = v9;
  }
LABEL_21:
  *a2 = v7;
  return result;
}

void *sub_1B0D0DA38()
{
  return &unk_1F09A50C0;
}

void *sub_1B0D0DA44()
{
  return &unk_1F09A5158;
}

void *sub_1B0D0DA50()
{
  return &unk_1F09A5320;
}

uint64_t sub_1B0D0DA5C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!*(void *)(v1 + 64))
  {
    uint64_t v3 = *(void *)(v1 + 32);
    if (!v3) {
      goto LABEL_28;
    }
    int v5 = &xmmword_1EB21CA40;
    goto LABEL_27;
  }
  if (!(_BYTE)word_1EB21C9C4)
  {
    uint64_t v3 = 0;
    goto LABEL_8;
  }
  uint64_t v2 = qword_1EB21CA30(11);
  uint64_t v3 = v2;
  if (!v2)
  {
LABEL_8:
    char v4 = 1;
    goto LABEL_9;
  }
  xmmword_1EB21CA40(v2);
  char v4 = 0;
LABEL_9:
  if (dword_1E9B52160 < 1) {
    goto LABEL_25;
  }
  uint64_t v6 = 0;
  while (*(void *)(qword_1E9B52168 + v6) != v1)
  {
    v6 += 8;
    if (8 * dword_1E9B52160 == v6) {
      goto LABEL_25;
    }
  }
  uint64_t v7 = *(void *)(v1 + 32);
  if (v7) {
    xmmword_1EB21CA40(v7);
  }
  if (*(_DWORD *)(v1 + 56) != 1) {
    goto LABEL_25;
  }
  uint64_t v8 = qword_1E9B52168;
  uint64_t v9 = --dword_1E9B52160;
  *(void *)(qword_1E9B52168 + v6) = *(void *)(qword_1E9B52168 + 8 * v9);
  if (v9) {
    goto LABEL_25;
  }
  int v10 = (void (**)(uint64_t))&off_1EB21C9E8;
  if (dword_1EB21C9C0)
  {
    if ((void)xmmword_1EB2201B0) {
      xmmword_1EB21CA40(xmmword_1EB2201B0);
    }
    qword_1EB220108 -= (int)off_1EB21C9F8(v8);
    --qword_1EB220150;
    off_1EB21C9E8(v8);
    uint64_t v8 = xmmword_1EB2201B0;
    if (!(void)xmmword_1EB2201B0) {
      goto LABEL_24;
    }
    int v10 = (void (**)(uint64_t))&xmmword_1EB21CA50;
  }
  (*v10)(v8);
LABEL_24:
  qword_1E9B52168 = 0;
LABEL_25:
  if (v4) {
    goto LABEL_28;
  }
  int v5 = &xmmword_1EB21CA50;
LABEL_27:
  (*v5)(v3);
LABEL_28:
  int v11 = *(_DWORD *)(v1 + 56);
  BOOL v12 = __OFSUB__(v11--, 1);
  *(_DWORD *)(v1 + 56) = v11;
  if (!((v11 < 0) ^ v12 | (v11 == 0)))
  {
    uint64_t v1 = *(void *)(v1 + 32);
    if (v1)
    {
      uint64_t v16 = &xmmword_1EB21CA50;
      goto LABEL_48;
    }
    return 0;
  }
  if (*(unsigned char *)(v1 + 44))
  {
    uint64_t v13 = *(void *)(v1 + 24);
    if (v13)
    {
      int v14 = &off_1EB21C9E8;
      if (!dword_1EB21C9C0)
      {
LABEL_37:
        (*v14)(v13);
        goto LABEL_38;
      }
      if ((void)xmmword_1EB2201B0) {
        xmmword_1EB21CA40(xmmword_1EB2201B0);
      }
      qword_1EB220108 -= (int)off_1EB21C9F8(v13);
      --qword_1EB220150;
      off_1EB21C9E8(v13);
      uint64_t v13 = xmmword_1EB2201B0;
      if ((void)xmmword_1EB2201B0)
      {
        int v14 = &xmmword_1EB21CA50;
        goto LABEL_37;
      }
    }
  }
LABEL_38:
  uint64_t v15 = *(void *)(v1 + 32);
  if (v15)
  {
    xmmword_1EB21CA50(v15);
    if (*(void *)(v1 + 32)) {
      off_1EB21CA38();
    }
  }
  uint64_t v16 = &off_1EB21C9E8;
  if (!dword_1EB21C9C0) {
    goto LABEL_48;
  }
  if ((void)xmmword_1EB2201B0) {
    xmmword_1EB21CA40(xmmword_1EB2201B0);
  }
  qword_1EB220108 -= (int)off_1EB21C9F8(v1);
  --qword_1EB220150;
  off_1EB21C9E8(v1);
  uint64_t v1 = xmmword_1EB2201B0;
  if ((void)xmmword_1EB2201B0)
  {
    uint64_t v16 = &xmmword_1EB21CA50;
LABEL_48:
    (*v16)(v1);
  }
  return 0;
}

uint64_t sub_1B0D0DD68(uint64_t a1, void *__dst, int a3, uint64_t a4)
{
  uint64_t v7 = *(uint64_t **)(a1 + 8);
  uint64_t v8 = v7[4];
  if (v8) {
    xmmword_1EB21CA40(v8);
  }
  if (a3 + a4 <= *v7)
  {
    memcpy(__dst, (const void *)(v7[3] + a4), a3);
    uint64_t v10 = 0;
    uint64_t v9 = v7[4];
    if (!v9) {
      return v10;
    }
LABEL_9:
    xmmword_1EB21CA50(v9);
    return v10;
  }
  bzero(__dst, a3);
  if (*v7 > a4) {
    memcpy(__dst, (const void *)(v7[3] + a4), *v7 - a4);
  }
  uint64_t v9 = v7[4];
  uint64_t v10 = 522;
  if (v9) {
    goto LABEL_9;
  }
  return v10;
}

uint64_t sub_1B0D0DE28(uint64_t a1, void *__src, int a3, uint64_t a4)
{
  uint64_t v7 = *(uint64_t **)(a1 + 8);
  uint64_t v8 = v7[4];
  if (v8) {
    xmmword_1EB21CA40(v8);
  }
  int v9 = *((_DWORD *)v7 + 11);
  if ((v9 & 4) == 0)
  {
    uint64_t v10 = a3 + a4;
    uint64_t v11 = *v7;
    if (v10 <= *v7) {
      goto LABEL_22;
    }
    if (v10 <= v7[1])
    {
LABEL_19:
      if (a4 > v11) {
        bzero((void *)(v7[3] + v11), a4 - v11);
      }
      *uint64_t v7 = v10;
LABEL_22:
      memcpy((void *)(v7[3] + a4), __src, a3);
      uint64_t v13 = 0;
      uint64_t v14 = v7[4];
      if (!v14) {
        return v13;
      }
      goto LABEL_12;
    }
    if ((v9 & 2) == 0 || *((int *)v7 + 10) > 0 || (uint64_t v12 = v7[2], v12 < v10))
    {
      uint64_t v13 = 13;
      uint64_t v14 = v7[4];
      if (!v14) {
        return v13;
      }
      goto LABEL_12;
    }
    if (2 * v10 >= v12) {
      uint64_t v16 = v7[2];
    }
    else {
      uint64_t v16 = 2 * v10;
    }
    uint64_t v17 = sub_1B0C8E1B8(v7[3], v16);
    if (v17)
    {
      v7[3] = v17;
      v7[1] = v16;
      uint64_t v11 = *v7;
      goto LABEL_19;
    }
    uint64_t v13 = 3082;
    uint64_t v14 = v7[4];
    if (!v14) {
      return v13;
    }
LABEL_12:
    xmmword_1EB21CA50(v14);
    return v13;
  }
  uint64_t v14 = v7[4];
  uint64_t v13 = 778;
  if (v14) {
    goto LABEL_12;
  }
  return v13;
}

uint64_t sub_1B0D0DF5C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  uint64_t v4 = v3[4];
  if (v4) {
    xmmword_1EB21CA40(v4);
  }
  if (*v3 < a2)
  {
    uint64_t v5 = 11;
    uint64_t v6 = v3[4];
    if (!v6) {
      return v5;
    }
    goto LABEL_7;
  }
  uint64_t v5 = 0;
  *uint64_t v3 = a2;
  uint64_t v6 = v3[4];
  if (v6) {
LABEL_7:
  }
    xmmword_1EB21CA50(v6);
  return v5;
}

uint64_t sub_1B0D0DFD8()
{
  return 0;
}

uint64_t sub_1B0D0DFE0(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  uint64_t v4 = v3[4];
  if (v4)
  {
    xmmword_1EB21CA40(v4);
    uint64_t v5 = v3[4];
    *a2 = *v3;
    if (v5) {
      xmmword_1EB21CA50(v5);
    }
  }
  else
  {
    *a2 = *v3;
  }
  return 0;
}

uint64_t sub_1B0D0E044(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 16) >= a2) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(v4 + 32);
  if (v5) {
    xmmword_1EB21CA40(v5);
  }
  if (a2 >= 2 && (*(unsigned char *)(v4 + 44) & 4) != 0)
  {
    uint64_t v6 = 8;
    uint64_t v7 = *(void *)(v4 + 32);
    if (!v7) {
      return v6;
    }
    goto LABEL_22;
  }
  if ((a2 - 2) >= 2)
  {
    if (a2 == 1)
    {
      if (*(int *)(v4 + 52) <= 0)
      {
        ++*(_DWORD *)(v4 + 48);
        goto LABEL_21;
      }
    }
    else if (*(int *)(v4 + 48) <= 1)
    {
      if (*(_DWORD *)(a1 + 16) != 1) {
        goto LABEL_21;
      }
      goto LABEL_20;
    }
LABEL_17:
    uint64_t v6 = 5;
    uint64_t v7 = *(void *)(v4 + 32);
    if (!v7) {
      return v6;
    }
    goto LABEL_22;
  }
  if (*(_DWORD *)(a1 + 16) != 1) {
    goto LABEL_21;
  }
  if (*(int *)(v4 + 52) > 0) {
    goto LABEL_17;
  }
LABEL_20:
  *(_DWORD *)(v4 + 52) = 1;
LABEL_21:
  uint64_t v6 = 0;
  *(_DWORD *)(a1 + 16) = a2;
  uint64_t v7 = *(void *)(v4 + 32);
  if (v7) {
LABEL_22:
  }
    xmmword_1EB21CA50(v7);
  return v6;
}

uint64_t sub_1B0D0E154(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 16) > a2)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(v4 + 32);
    if (v5) {
      xmmword_1EB21CA40(v5);
    }
    int v6 = *(_DWORD *)(a1 + 16);
    if (a2 == 1)
    {
      if (v6 >= 2) {
        --*(_DWORD *)(v4 + 52);
      }
    }
    else
    {
      if (v6 >= 2) {
        --*(_DWORD *)(v4 + 52);
      }
      --*(_DWORD *)(v4 + 48);
    }
    *(_DWORD *)(a1 + 16) = a2;
    uint64_t v7 = *(void *)(v4 + 32);
    if (v7) {
      xmmword_1EB21CA50(v7);
    }
  }
  return 0;
}

uint64_t sub_1B0D0E204(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  uint64_t v6 = v5[4];
  if (v6) {
    xmmword_1EB21CA40(v6);
  }
  if (a2 != 36)
  {
    if (a2 == 12)
    {
      uint64_t v7 = 0;
      *a3 = (uint64_t)sqlite3_mprintf("memdb(%p,%lld)", (const void *)v5[3], *v5);
      uint64_t v8 = v5[4];
      if (!v8) {
        return v7;
      }
    }
    else
    {
      uint64_t v7 = 12;
      uint64_t v8 = v5[4];
      if (!v8) {
        return v7;
      }
    }
    goto LABEL_14;
  }
  uint64_t v9 = *v5;
  if (*a3 >= *v5)
  {
    uint64_t v9 = *a3;
  }
  else if (*a3 < 0)
  {
    uint64_t v9 = v5[2];
  }
  uint64_t v7 = 0;
  void v5[2] = v9;
  *a3 = v9;
  uint64_t v8 = v5[4];
  if (v8) {
LABEL_14:
  }
    xmmword_1EB21CA50(v8);
  return v7;
}

uint64_t sub_1B0D0E2E0()
{
  return 5633;
}

uint64_t sub_1B0D0E2E8(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(v7 + 32);
  if (v8) {
    xmmword_1EB21CA40(v8);
  }
  if (a2 + a3 > *(void *)v7 || (*(unsigned char *)(v7 + 44) & 2) != 0)
  {
    uint64_t v9 = 0;
  }
  else
  {
    ++*(_DWORD *)(v7 + 40);
    uint64_t v9 = *(void *)(v7 + 24) + a2;
  }
  *a4 = v9;
  uint64_t v10 = *(void *)(v7 + 32);
  if (v10) {
    xmmword_1EB21CA50(v10);
  }
  return 0;
}

uint64_t sub_1B0D0E380(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(v1 + 32);
  if (v2)
  {
    xmmword_1EB21CA40(v2);
    uint64_t v3 = *(void *)(v1 + 32);
    --*(_DWORD *)(v1 + 40);
    if (v3) {
      xmmword_1EB21CA50(v3);
    }
  }
  else
  {
    --*(_DWORD *)(v1 + 40);
  }
  return 0;
}

uint64_t sub_1B0D0E3E8(uint64_t result)
{
  uint64_t v1 = *(uint64_t **)(result + 24);
  --v1[3];
  uint64_t v2 = *(void *)(result + 56) - 1;
  *(void *)(result + 56) = v2;
  if (v2) {
    return result;
  }
  uint64_t v3 = *(unsigned __int16 *)(result + 52);
  if ((v3 & 1) == 0)
  {
    uint64_t v4 = v1[2];
    uint64_t v5 = *(void *)(result + 72);
    if (v4 == result)
    {
      v1[2] = v5;
      uint64_t v4 = v5;
    }
    uint64_t v6 = *(void *)(result + 64);
    if (v6)
    {
      *(void *)(v6 + 72) = v5;
      uint64_t v5 = *(void *)(result + 72);
      if (!v5)
      {
        *(void *)(result + 64) = v6;
        *(void *)(result + 72) = 0;
LABEL_13:
        *(void *)(v6 + 72) = result;
LABEL_17:
        *uint64_t v1 = result;
        if ((v3 & 8) == 0 && !v4) {
          v1[2] = result;
        }
        return result;
      }
    }
    else
    {
      v1[1] = v5;
      if (!v5)
      {
        *((unsigned char *)v1 + 49) = 2;
        *(void *)(result + 64) = 0;
        *(void *)(result + 72) = 0;
        goto LABEL_15;
      }
    }
    *(void *)(v5 + 64) = v6;
    uint64_t v6 = *v1;
    *(void *)(result + 64) = *v1;
    *(void *)(result + 72) = 0;
    if (v6) {
      goto LABEL_13;
    }
LABEL_15:
    v1[1] = result;
    if (*((unsigned char *)v1 + 48)) {
      *((unsigned char *)v1 + 49) = 1;
    }
    goto LABEL_17;
  }
  if (*((unsigned char *)v1 + 48)) {
    return xmmword_1EB21CAA8(v1[9], *(void *)result, 0);
  }
  return result;
}

uint64_t sub_1B0D0E4C4(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)(result + 40);
  if (v2 < 1)
  {
    char v4 = 1;
  }
  else
  {
    uint64_t v3 = 0;
    char v4 = 1;
    uint64_t v5 = 8;
    do
    {
      uint64_t result = *(void *)(*(void *)(v1 + 32) + v5);
      if (result && *(unsigned char *)(result + 17))
      {
        ++*(_DWORD *)(result + 20);
        if (*(unsigned char *)(result + 18))
        {
          char v4 = 0;
        }
        else
        {
          uint64_t result = sub_1B0D12478(result);
          char v4 = 0;
          int v2 = *(_DWORD *)(v1 + 40);
        }
      }
      ++v3;
      v5 += 32;
    }
    while (v3 < v2);
  }
  *(unsigned char *)(v1 + 111) = v4;
  return result;
}

uint64_t sub_1B0D0E55C(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 40);
  if (v1 >= 1)
  {
    uint64_t v2 = result;
    uint64_t v3 = 0;
    uint64_t v4 = 8;
    do
    {
      uint64_t result = *(void *)(*(void *)(v2 + 32) + v4);
      if (result && *(unsigned char *)(result + 17))
      {
        int v5 = *(_DWORD *)(result + 20) - 1;
        *(_DWORD *)(result + 20) = v5;
        if (!v5)
        {
          uint64_t result = sub_1B0D12558(result);
          int v1 = *(_DWORD *)(v2 + 40);
        }
      }
      ++v3;
      v4 += 32;
    }
    while (v3 < v1);
  }
  return result;
}

void *sub_1B0D0E5DC(uint64_t a1, const char *a2, va_list a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v20 = 0;
  int v4 = *(_DWORD *)(a1 + 136);
  uint64_t v16 = a1;
  uint64_t v17 = &v21;
  int v18 = 512;
  int v19 = v4;
  WORD2(v20) = 256;
  sqlite3_str_vappendf((sqlite3_str *)&v16, a2, a3);
  if (v17 && (v17[v20] = 0, v19) && (v20 & 0x40000000000) == 0) {
    uint64_t v11 = sub_1B0D06044(&v16);
  }
  else {
    uint64_t v11 = v17;
  }
  if (BYTE4(v20) == 7 && !*(unsigned char *)(a1 + 103) && !*(unsigned char *)(a1 + 104))
  {
    *(unsigned char *)(a1 + 103) = 1;
    if (*(int *)(a1 + 220) >= 1) {
      *(_DWORD *)(a1 + 424) = 1;
    }
    ++*(_DWORD *)(a1 + 432);
    *(_WORD *)(a1 + 436) = 0;
    uint64_t v13 = *(void *)(a1 + 344);
    if (v13)
    {
      sub_1B0CEF2BC(v13, "out of memory", v5, v6, v7, v8, v9, v10, v15);
      for (uint64_t i = *(void *)(a1 + 344); ; ++*(_DWORD *)(i + 48))
      {
        *(_DWORD *)(i + 24) = 7;
        uint64_t i = *(void *)(i + 256);
        if (!i) {
          break;
        }
      }
    }
  }
  return v11;
}

void sub_1B0D0E714(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(a1 + 416);
  if (v4)
  {
    if ((*(_WORD *)(v4 + 20) & 0x9000) == 0)
    {
      *(_WORD *)(v4 + 20) = 1;
      if (a2 == 3082) {
        return;
      }
      goto LABEL_5;
    }
    sub_1B0D18138((int *)v4);
  }
  if (a2 == 3082) {
    return;
  }
LABEL_5:
  if ((a2 & 0xFB) == 0xA)
  {
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)a1 + 128);
    if (v5) {
      int v6 = v5();
    }
    else {
      int v6 = 0;
    }
    *(_DWORD *)(a1 + 92) = v6;
  }
}

uint64_t sub_1B0D0E7A4(uint64_t a1)
{
  uint64_t v1 = *(void *)a1;
  if (*(void *)(*(void *)(*(void *)a1 + 32) + 40) || *(unsigned char *)(a1 + 301)) {
    return 0;
  }
  uint64_t v23 = 0;
  int v4 = sub_1B0C79F48(*(void *)v1, 0, v1, &v23, 0, 0x21Eu);
  if (v4)
  {
    int v12 = v4;
    sub_1B0CEF2BC(a1, "unable to open a temporary database file for storing temporary tables", v5, v6, v7, v8, v9, v10, v22);
    *(_DWORD *)(a1 + 24) = v12;
    return 1;
  }
  uint64_t v13 = v23;
  *(void *)(*(void *)(v1 + 32) + 40) = v23;
  if (sub_1B0CD9448(v13, *(_DWORD *)(v1 + 116), 0, 0, v11) == 7)
  {
    if (!*(unsigned char *)(v1 + 103) && !*(unsigned char *)(v1 + 104))
    {
      *(unsigned char *)(v1 + 103) = 1;
      if (*(int *)(v1 + 220) >= 1) {
        *(_DWORD *)(v1 + 424) = 1;
      }
      ++*(_DWORD *)(v1 + 432);
      *(_WORD *)(v1 + 436) = 0;
      uint64_t v20 = *(void *)(v1 + 344);
      if (v20)
      {
        sub_1B0CEF2BC(v20, "out of memory", v14, v15, v16, v17, v18, v19, v22);
        for (uint64_t i = *(void *)(v1 + 344); ; ++*(_DWORD *)(i + 48))
        {
          *(_DWORD *)(i + 24) = 7;
          uint64_t i = *(void *)(i + 256);
          if (!i) {
            break;
          }
        }
      }
    }
    return 1;
  }
  return 0;
}

uint64_t sub_1B0D0E8C8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(uint64_t (**)(void))(v1 + 664);
  if (!v2 || (*(_DWORD *)(v1 + 688) & 0x80000000) != 0) {
    return 0;
  }
  *(unsigned char *)(*(void *)(v1 + 680) + 784) = 0;
  uint64_t v3 = v2(*(void *)(v1 + 672));
  if (*(uint64_t (**)(uint64_t *, int))(v1 + 664) != sub_1B0CF3B30)
  {
    uint64_t v4 = *(void *)(v1 + 680);
    if (*(unsigned char *)(v4 + 784))
    {
      unsigned int v5 = sub_1B0CF3B30((uint64_t *)v4, *(_DWORD *)(v1 + 688));
      if (v3 == 109) {
        uint64_t v3 = v5;
      }
      else {
        uint64_t v3 = v3;
      }
    }
  }
  if (v3) {
    int v6 = *(_DWORD *)(v1 + 688) + 1;
  }
  else {
    int v6 = -1;
  }
  *(_DWORD *)(v1 + 688) = v6;
  return v3;
}

void *sub_1B0D0E964(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(unsigned char *)(a1 + 17))
  {
    ++*(_DWORD *)(a1 + 20);
    if (!*(unsigned char *)(a1 + 18)) {
      sub_1B0D12478(a1);
    }
  }
  uint64_t v7 = *(void **)(v6 + 72);
  if (a2 && !v7)
  {
    uint64_t v8 = (void *)sub_1B0C7FC94(a2);
    uint64_t v7 = v8;
    if (v8) {
      bzero(v8, a2);
    }
    *(void *)(v6 + 72) = v7;
    *(void *)(v6 + 80) = a3;
  }
  if (*(unsigned char *)(a1 + 17))
  {
    int v9 = *(_DWORD *)(a1 + 20) - 1;
    *(_DWORD *)(a1 + 20) = v9;
    if (!v9)
    {
      sub_1B0D12558(a1);
      return *(void **)(v6 + 72);
    }
  }
  return v7;
}

uint64_t sub_1B0D0EA1C(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(unsigned char *)(a1 + 17))
  {
    ++*(_DWORD *)(a1 + 20);
    if (!*(unsigned char *)(a1 + 18)) {
      sub_1B0D12478(a1);
    }
  }
  uint64_t v5 = *(void *)(*(void *)v4 + 336);
  uint64_t v6 = *a2;
  uint64_t v7 = getprogname();
  unsigned int v8 = v6;
  if (v7)
  {
    int v9 = v7;
    if (strncmp("assetsd", v7, 7uLL) && strncmp("backupd", v9, 7uLL) && strncmp("bird", v9, 4uLL))
    {
      if (!strncmp("callservicesd", v9, 0xDuLL)) {
        goto LABEL_59;
      }
      if (strncmp("cloudd", v9, 6uLL) && strncmp("dataaccessd", v9, 0xBuLL))
      {
        if (strncmp("duetexpert", v9, 0xAuLL)
          && strncmp("healthd", v9, 7uLL)
          && strncmp("IMDPersistence", v9, 0xEuLL)
          && strncmp("IMDPersistenceAgent", v9, 0x13uLL))
        {
          if (!strncmp("itunesstored", v9, 0xCuLL))
          {
            unsigned int v8 = 128;
            goto LABEL_32;
          }
          if (strncmp("keybagd", v9, 7uLL)
            && strncmp("mediaanalysisd", v9, 0xEuLL)
            && strncmp("medialibraryd", v9, 0xDuLL))
          {
            if (!strncmp("MobileMail", v9, 0xAuLL)
              || !strncmp("MobileNotes", v9, 0xBuLL)
              || !strncmp("MobileSafari", v9, 0xCuLL)
              || !strncmp("nsurlstoraged", v9, 0xDuLL))
            {
              unsigned int v8 = 1024;
              goto LABEL_32;
            }
            if (strncmp("pipelined", v9, 9uLL)
              && strncmp("resentsd", v9, 8uLL)
              && strncmp("searchd", v9, 7uLL)
              && strncmp("securityd", v9, 9uLL)
              && strncmp("SpringBoard", v9, 0xBuLL))
            {
              if (!strncmp("suggestd", v9, 8uLL)) {
                unsigned int v8 = 512;
              }
              else {
                unsigned int v8 = v6;
              }
              goto LABEL_32;
            }
          }
        }
LABEL_59:
        unsigned int v8 = 256;
        goto LABEL_32;
      }
    }
    unsigned int v8 = 512;
  }
LABEL_32:
  if (qword_1EB220320 != -1) {
    dispatch_once(&qword_1EB220320, &unk_1F09A55A0);
  }
  if (v8 <= dword_1EB220318) {
    uint64_t v10 = dword_1EB220318;
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10 != v6 && (int)v6 >= 1 && (int)v10 > (int)v6)
  {
    if (dword_1EB220318 && dword_1EB220318 >= v8) {
      sqlite3_log(28, "Environment override of cache_size %d -> %d");
    }
    else {
      sqlite3_log(27, "Overriding cache_size %d -> %d");
    }
    uint64_t v6 = v10;
  }
  *(_DWORD *)(v5 + 32) = v6;
  if ((v6 & 0x80000000) != 0)
  {
    uint64_t v13 = *(int *)(v5 + 44);
    if (-1024 * (int)v6 / (v13 + *(int *)(v5 + 40)) >= 1000000000) {
      uint64_t v6 = 1000000000;
    }
    else {
      uint64_t v6 = -1024 * (int)v6 / (v13 + *(int *)(v5 + 40));
    }
  }
  uint64_t result = ((uint64_t (*)(void, uint64_t))*(&xmmword_1EB21CA88 + 1))(*(void *)(v5 + 72), v6);
  *a2 = *(_DWORD *)(v5 + 32);
  if (*(unsigned char *)(a1 + 17))
  {
    int v15 = *(_DWORD *)(a1 + 20) - 1;
    *(_DWORD *)(a1 + 20) = v15;
    if (!v15)
    {
      return sub_1B0D12558(a1);
    }
  }
  return result;
}

uint64_t sub_1B0D0EE10(uint64_t a1, int a2)
{
  LODWORD(v2) = a2;
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(unsigned char *)(a1 + 17))
  {
    ++*(_DWORD *)(a1 + 20);
    if (!*(unsigned char *)(a1 + 18)) {
      sub_1B0D12478(a1);
    }
  }
  uint64_t v5 = *(_DWORD **)(*(void *)v4 + 336);
  if (v2)
  {
    if ((v2 & 0x80000000) != 0) {
      uint64_t v2 = -1024 * (int)v2 / ((int)v5[11] + (uint64_t)(int)v5[10]);
    }
    v5[9] = v2;
  }
  LODWORD(v6) = v5[8];
  if ((v6 & 0x80000000) != 0)
  {
    uint64_t v7 = (int)v5[11];
    if (-1024 * (int)v6 / (v7 + (int)v5[10]) >= 1000000000) {
      LODWORD(v6) = 1000000000;
    }
    else {
      uint64_t v6 = -1024 * (int)v6 / (v7 + (int)v5[10]);
    }
  }
  int v8 = v5[9];
  if (*(unsigned char *)(a1 + 17))
  {
    int v9 = *(_DWORD *)(a1 + 20) - 1;
    *(_DWORD *)(a1 + 20) = v9;
    if (!v9) {
      sub_1B0D12558(a1);
    }
  }
  if ((int)v6 <= v8) {
    return v8;
  }
  else {
    return v6;
  }
}

uint64_t sub_1B0D0EEE4(int a1, char *__s, void *a3, int a4, int *a5)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (!__s || (unsigned int v9 = strlen(__s) & 0x3FFFFFFF, v9 < 2) || (v10 = *__s, v10 != 92) && v10 != 47)
  {
    uint64_t v13 = sub_1B0C7FC94(72);
    if (!v13) {
      return 7;
    }
    uint64_t v14 = v13;
    *(void *)(v13 + 64) = 0;
    *(_OWORD *)(v13 + 32) = 0u;
    *(_OWORD *)(v13 + 48) = 0u;
    *(_OWORD *)uint64_t v13 = 0u;
    *(_OWORD *)(v13 + 16) = 0u;
    *(_DWORD *)(v13 + 44) = 3;
    *(void *)(v13 + 16) = qword_1EB21CB58;
    goto LABEL_10;
  }
  if ((_BYTE)word_1EB21C9C4)
  {
    uint64_t v11 = qword_1EB21CA30(11);
    uint64_t v12 = v11;
    if (v11)
    {
      xmmword_1EB21CA40(v11);
      char v26 = 0;
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  char v26 = 1;
LABEL_18:
  uint64_t v17 = dword_1E9B52160;
  if (dword_1E9B52160 >= 1)
  {
    uint64_t v18 = qword_1E9B52168;
    while (1)
    {
      uint64_t v14 = *(void *)v18;
      if (!strcmp(*(const char **)(*(void *)v18 + 64), __s)) {
        break;
      }
      v18 += 8;
      if (!--v17) {
        goto LABEL_22;
      }
    }
    uint64_t v24 = *(void *)(v14 + 32);
    if (v24) {
      xmmword_1EB21CA40(v24);
    }
    ++*(_DWORD *)(v14 + 56);
    if ((v26 & 1) == 0) {
      goto LABEL_38;
    }
    goto LABEL_10;
  }
LABEL_22:
  uint64_t v19 = sub_1B0C7FC94(v9 + 75);
  if (!v19) {
    goto LABEL_33;
  }
  uint64_t v14 = v19;
  uint64_t v20 = sub_1B0C8E1B8(qword_1E9B52168, 8 * dword_1E9B52160 + 8);
  if (!v20)
  {
LABEL_27:
    uint64_t v23 = &off_1EB21C9E8;
    if (!dword_1EB21C9C0)
    {
LABEL_32:
      (*v23)(v14);
      goto LABEL_33;
    }
    if ((void)xmmword_1EB2201B0) {
      xmmword_1EB21CA40(xmmword_1EB2201B0);
    }
    qword_1EB220108[0] -= (int)off_1EB21C9F8(v14);
    --qword_1EB220150;
    off_1EB21C9E8(v14);
    uint64_t v14 = xmmword_1EB2201B0;
    if ((void)xmmword_1EB2201B0)
    {
      uint64_t v23 = &xmmword_1EB21CA50;
      goto LABEL_32;
    }
LABEL_33:
    uint64_t v15 = 7;
    if (v26) {
      return v15;
    }
    goto LABEL_13;
  }
  uint64_t v21 = dword_1E9B52160++;
  *(void *)(v20 + 8 * v21) = v14;
  qword_1E9B52168 = v20;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(void *)(v14 + 64) = 0;
  *(_OWORD *)uint64_t v14 = 0u;
  *(_OWORD *)(v14 + 16) = 0u;
  *(_DWORD *)(v14 + 44) = 3;
  *(void *)(v14 + 16) = qword_1EB21CB58;
  *(void *)(v14 + 64) = v14 + 72;
  memcpy((void *)(v14 + 72), __s, v9 + 1);
  uint64_t v22 = sqlite3_initialize();
  if (v22)
  {
    *(void *)(v14 + 32) = 0;
LABEL_26:
    --dword_1E9B52160;
    goto LABEL_27;
  }
  uint64_t v25 = qword_1EB21CA30(v22);
  *(void *)(v14 + 32) = v25;
  if (!v25) {
    goto LABEL_26;
  }
  *(_DWORD *)(v14 + 56) = 1;
  xmmword_1EB21CA40(v25);
  if ((v26 & 1) == 0) {
LABEL_38:
  }
    xmmword_1EB21CA50(v12);
LABEL_10:
  a3[1] = v14;
  if (a5) {
    *a5 = a4 | 0x80;
  }
  uint64_t v15 = 0;
  *a3 = &unk_1F09A5470;
  uint64_t v12 = *(void *)(v14 + 32);
  if (v12) {
LABEL_13:
  }
    xmmword_1EB21CA50(v12);
  return v15;
}

uint64_t sub_1B0D0F1F4(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  *a4 = 0;
  return 0;
}

uint64_t sub_1B0D0F200(int a1, const char *a2, int a3, char *a4)
{
  return 0;
}

uint64_t sub_1B0D0F238(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 72))();
}

uint64_t sub_1B0D0F244(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 80))();
}

uint64_t sub_1B0D0F250(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 88))();
}

uint64_t sub_1B0D0F25C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 96))();
}

uint64_t sub_1B0D0F268(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 104))();
}

uint64_t sub_1B0D0F274(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 112))();
}

uint64_t sub_1B0D0F280(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 128))();
}

uint64_t sub_1B0D0F28C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 136))();
}

uint64_t sub_1B0D0F298(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 48) || *(unsigned char *)(a1 + 25) && ((*(unsigned char *)(a1 + 25) & 3) != 0 || (*(_WORD *)(a2 + 52) & 8) != 0)) {
    return 0;
  }
  ++*(_DWORD *)(a1 + 260);
  ++*(_DWORD *)(a1 + 276);
  *(void *)(a2 + 32) = 0;
  if (*(void *)(a1 + 344))
  {
    uint64_t result = sub_1B0D0F4D4(a2);
    if (!result)
    {
      uint64_t result = sub_1B0D0F828(a1, a2, 0, 0);
      if (!result)
      {
LABEL_18:
        uint64_t v5 = *(void *)(a2 + 24);
        uint64_t v6 = *(void *)(a2 + 72);
        if (*(void *)(v5 + 16) == a2) {
          *(void *)(v5 + 16) = v6;
        }
        uint64_t v7 = *(void *)(a2 + 64);
        if (v7)
        {
          *(void *)(v7 + 72) = v6;
          uint64_t v6 = *(void *)(a2 + 72);
          if (!v6)
          {
            *(void *)uint64_t v5 = v7;
            goto LABEL_25;
          }
        }
        else
        {
          *(void *)(v5 + 8) = v6;
          if (!v6)
          {
            *(void *)uint64_t v5 = 0;
            *(unsigned char *)(v5 + 49) = 2;
LABEL_25:
            *(_WORD *)(a2 + 52) = *(_WORD *)(a2 + 52) & 0xFFF0 | 1;
            if (!*(void *)(a2 + 56))
            {
              if (*(unsigned char *)(v5 + 48)) {
                xmmword_1EB21CAA8(*(void *)(v5 + 72), *(void *)a2, 0);
              }
            }
            return 0;
          }
        }
        *(void *)(v6 + 64) = v7;
        goto LABEL_25;
      }
    }
  }
  else if ((*(_WORD *)(a2 + 52) & 8) == 0 && *(unsigned char *)(a1 + 21) != 3 {
         || (uint64_t result = sub_1B0CCAE84(a1, 1), !result))
  }
  {
    uint64_t result = sub_1B0CCB118((void *)a1, a2);
    if (!result) {
      goto LABEL_18;
    }
  }
  if (result == 13 || result == 10)
  {
    *(_DWORD *)(a1 + 48) = result;
    *(unsigned char *)(a1 + 21) = 6;
    *(void *)(a1 + 288) = sub_1B0D11088;
  }
  return result;
}

uint64_t sub_1B0D0F420(uint64_t result, char a2)
{
  if (*(unsigned char *)(result + 16))
  {
    BOOL v2 = 0;
    *(_WORD *)(result + 11) = 1;
    *(unsigned char *)(result + 13) = 0;
LABEL_4:
    char v3 = 0;
    *(unsigned char *)(result + 14) = 0;
    int v4 = 1;
    goto LABEL_5;
  }
  BOOL v2 = (a2 & 7u) > 2;
  *(unsigned char *)(result + 12) = v2;
  *(unsigned char *)(result + 13) = (a2 & 7) == 4;
  *(unsigned char *)(result + 11) = (a2 & 7) == 1;
  if ((a2 & 7) == 1) {
    goto LABEL_4;
  }
  int v4 = 0;
  if ((a2 & 8) != 0) {
    char v3 = 3;
  }
  else {
    char v3 = 2;
  }
  *(unsigned char *)(result + 14) = v3;
LABEL_5:
  char v5 = 4 * v3;
  if (v2) {
    char v6 = v3;
  }
  else {
    char v6 = 0;
  }
  if ((a2 & 0x10) != 0) {
    int v7 = v4;
  }
  else {
    int v7 = 1;
  }
  if (v7) {
    char v8 = v5;
  }
  else {
    char v8 = 12;
  }
  *(unsigned char *)(result + 15) = v8 | v6;
  *(unsigned char *)(result + 25) = *(unsigned char *)(result + 25) & 0xFE | ((a2 & 0x20) == 0);
  return result;
}

uint64_t sub_1B0D0F4D4(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 40);
  uint64_t v2 = *((unsigned int *)v1 + 32);
  if ((int)v2 < 1) {
    return 0;
  }
  uint64_t v4 = 0;
  unsigned int v5 = *(_DWORD *)(a1 + 48);
  uint64_t v6 = v2 - 1;
  uint64_t v7 = v1[15];
  char v8 = (_DWORD *)(v7 + 88);
  uint64_t v9 = 1;
  while (1)
  {
    if (*(_DWORD *)(v7 + 56 * v4 + 24) < v5) {
      goto LABEL_4;
    }
    int v10 = *(_DWORD **)(v7 + 56 * v4 + 16);
    if (v5 - 1 >= *v10) {
      goto LABEL_19;
    }
    unsigned int v11 = v5 - 1;
    while (1)
    {
      unsigned int v12 = v10[2];
      if (!v12) {
        break;
      }
      unsigned int v13 = v11 / v12;
      v11 %= v12;
      int v10 = *(_DWORD **)&v10[2 * v13 + 4];
      if (!v10) {
        goto LABEL_19;
      }
    }
    if (*v10 >= 0xF81u) {
      break;
    }
    if (((*((unsigned __int8 *)v10 + ((unint64_t)v11 >> 3) + 16) >> (v11 & 7)) & 1) == 0) {
      goto LABEL_19;
    }
LABEL_4:
    ++v4;
    ++v9;
    --v6;
    v8 += 14;
    if (v4 == v2) {
      return 0;
    }
  }
  unsigned int v14 = v11 % 0x7C;
  uint64_t v15 = v10 + 4;
  int v16 = v15[v11 % 0x7C];
  if (v16)
  {
    unsigned int v17 = v11 + 1;
    while (v16 != v17)
    {
      if (v14 == 123) {
        unsigned int v14 = 0;
      }
      else {
        ++v14;
      }
      int v16 = v15[v14];
      if (!v16) {
        goto LABEL_19;
      }
    }
    goto LABEL_4;
  }
LABEL_19:
  if ((int)v4 + 1 < (int)v2)
  {
    uint64_t v18 = v2 - v9;
    if ((unint64_t)(v2 - v9) < 2) {
      goto LABEL_24;
    }
    v9 += v18 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v19 = v6 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      *char v8 = 0;
      v8[14] = 0;
      v8 += 28;
      v19 -= 2;
    }
    while (v19);
    if (v18 != (v18 & 0xFFFFFFFFFFFFFFFELL))
    {
LABEL_24:
      uint64_t v20 = v2 - v9;
      uint64_t v21 = (_DWORD *)(v7 + 56 * v9 + 32);
      do
      {
        _DWORD *v21 = 0;
        v21 += 14;
        --v20;
      }
      while (v20);
    }
  }
  int v22 = *((unsigned __int8 *)v1 + 9);
  if (v22 == 2)
  {
LABEL_27:
    ++*((_DWORD *)v1 + 15);
    if ((int)v2 >= 1)
    {
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      uint64_t v25 = 0;
      do
      {
        uint64_t v26 = v1[15] + v23;
        if (*(_DWORD *)(v26 + 24) >= v5)
        {
          uint64_t v25 = sub_1B0CCABC4(*(unsigned int **)(v26 + 16), v5) | v25;
          LODWORD(v2) = *((_DWORD *)v1 + 32);
        }
        ++v24;
        v23 += 56;
      }
      while (v24 < (int)v2);
      return v25;
    }
    return 0;
  }
  uint64_t v27 = v1[11];
  if (!*(void *)v27)
  {
    if (v22 == 4 || *((unsigned char *)v1 + 26))
    {
      uint64_t v28 = *v1;
      *(_OWORD *)(v27 + 48) = 0u;
      *(_OWORD *)(v27 + 64) = 0u;
      *(_OWORD *)(v27 + 16) = 0u;
      *(_OWORD *)(v27 + 32) = 0u;
      *(_OWORD *)uint64_t v27 = 0u;
      int v29 = 1016;
      int v30 = -1;
      goto LABEL_37;
    }
    int v30 = dword_1EB21C9DC;
    uint64_t v28 = *v1;
    *(_OWORD *)(v27 + 48) = 0u;
    *(_OWORD *)(v27 + 64) = 0u;
    *(_OWORD *)(v27 + 16) = 0u;
    *(_OWORD *)(v27 + 32) = 0u;
    *(_OWORD *)uint64_t v27 = 0u;
    if (v30)
    {
      if (v30 <= 0) {
        int v29 = 1016;
      }
      else {
        int v29 = v30;
      }
LABEL_37:
      *(void *)uint64_t v27 = &unk_1F09A5508;
      *(_DWORD *)(v27 + 8) = v29;
      *(_DWORD *)(v27 + 12) = v30;
      *(_DWORD *)(v27 + 56) = 8222;
      *(void *)(v27 + 64) = v28;
      *(void *)(v27 + 72) = 0;
    }
    else
    {
      uint64_t v25 = (*(uint64_t (**)(uint64_t, void))(v28 + 40))(v28, 0);
      if (v25) {
        return v25;
      }
    }
  }
  uint64_t v31 = *(void *)(a1 + 8);
  uint64_t v32 = *((unsigned int *)v1 + 15);
  uint64_t v33 = v1[25];
  if (*((unsigned char *)v1 + 26)
    || (long long v36 = (uint64_t (*)(uint64_t, void, void, uint64_t))v1[37]) == 0
    || (uint64_t v25 = 7, (v31 = v36(v1[40], *(void *)(a1 + 8), *(unsigned int *)(a1 + 48), 7)) != 0))
  {
    uint64_t v34 = (v33 + 4) * v32;
    uint64_t v35 = v1[11];
    unsigned int v38 = bswap32(*(_DWORD *)(a1 + 48));
    uint64_t v25 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(*(void *)v35 + 24))(v35, &v38, 4, v34);
    if (!v25)
    {
      uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)v1[11] + 24))(v1[11], v31, *((unsigned int *)v1 + 50), v34 + 4);
      if (!v25)
      {
        unsigned int v5 = *(_DWORD *)(a1 + 48);
        LODWORD(v2) = *((_DWORD *)v1 + 32);
        goto LABEL_27;
      }
    }
  }
  return v25;
}

uint64_t sub_1B0D0F828(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v5 = a2;
  uint64_t v114 = *MEMORY[0x1E4F143B8];
  uint64_t v95 = a2;
  if (a4)
  {
    int v7 = 0;
    if (a2)
    {
      char v8 = &v95;
      do
      {
        uint64_t v11 = *(void *)(v5 + 32);
        uint64_t v10 = v5 + 32;
        uint64_t v9 = v11;
        if (*(_DWORD *)(v10 + 16) <= a3)
        {
          ++v7;
          char v8 = (uint64_t *)v10;
        }
        *char v8 = v9;
        uint64_t v5 = v9;
      }
      while (v9);
      uint64_t v5 = v95;
    }
  }
  else
  {
    int v7 = 1;
  }
  *(_DWORD *)(a1 + 256) += v7;
  *(_DWORD *)(a1 + 272) += v7;
  if (*(_DWORD *)(v5 + 48) == 1)
  {
    unsigned int v12 = bswap32(bswap32(*(_DWORD *)(*(void *)(v5 + 40) + 136)) + 1);
    *(_DWORD *)(*(void *)(v5 + 8) + 24) = v12;
    *(_DWORD *)(*(void *)(v5 + 8) + 92) = v12;
    *(_DWORD *)(*(void *)(v5 + 8) + 96) = -1167184384;
  }
  uint64_t v13 = *(void *)(a1 + 344);
  uint64_t v14 = *(void *)(a1 + 200);
  unsigned int v15 = *(unsigned __int8 *)(a1 + 15);
  uint64_t v101 = 0;
  uint64_t v16 = **(void **)(v13 + 48);
  if (*(void *)(v13 + 72) == *(void *)v16
    && *(void *)(v13 + 80) == *(void *)(v16 + 8)
    && *(void *)(v13 + 88) == *(void *)(v16 + 16)
    && *(void *)(v13 + 96) == *(void *)(v16 + 24)
    && *(void *)(v13 + 104) == *(void *)(v16 + 32)
    && *(void *)(v13 + 112) == *(void *)(v16 + 40))
  {
    unsigned int v22 = 0;
    if (*(_WORD *)(v13 + 60)) {
      goto LABEL_43;
    }
  }
  else
  {
    unsigned int v22 = *(_DWORD *)(v16 + 16) + 1;
    if (*(_WORD *)(v13 + 60)) {
      goto LABEL_43;
    }
  }
  if (!*(_DWORD *)(v16 + 96)) {
    goto LABEL_37;
  }
  LODWORD(__buf) = 0;
  sqlite3_initialize();
  arc4random_buf(&__buf, 4uLL);
  if (*(unsigned char *)(v13 + 63)) {
    goto LABEL_32;
  }
  uint64_t v27 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v13 + 8) + 112))(*(void *)(v13 + 8), 4, 4, 10);
  if (v27 != 5)
  {
    uint64_t v28 = v27;
    if (v27) {
      goto LABEL_42;
    }
LABEL_32:
    int v23 = __buf;
    uint64_t v24 = **(_DWORD ***)(v13 + 48);
    ++*(_DWORD *)(v13 + 136);
    *(_DWORD *)(v13 + 88) = 0;
    unsigned int v25 = bswap32(*(_DWORD *)(v13 + 104)) + 1;
    *(unsigned char *)(v13 + 104) = HIBYTE(v25);
    *(unsigned char *)(v13 + 105) = BYTE2(v25);
    *(unsigned char *)(v13 + 106) = BYTE1(v25);
    *(unsigned char *)(v13 + 107) = v25;
    *(_DWORD *)(v13 + 108) = v23;
    __n128 v26 = sub_1B0C8F600(v13);
    v24[24] = 0;
    v24[32] = 0;
    v24[26] = 0;
    v24[27] = -1;
    v24[28] = -1;
    v24[29] = -1;
    if (!*(unsigned char *)(v13 + 63)) {
      (*(void (**)(void, uint64_t, uint64_t, uint64_t, __n128))(**(void **)(v13 + 8) + 112))(*(void *)(v13 + 8), 4, 4, 9, v26);
    }
  }
LABEL_37:
  if (!*(unsigned char *)(v13 + 63)) {
    (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v13 + 8) + 112))(*(void *)(v13 + 8), 3, 1, 5);
  }
  *(_WORD *)(v13 + 60) = -1;
  int v29 = 1;
  do
    uint64_t v30 = sub_1B0C8CD54(v13, &__buf, 1, v29++);
  while (v30 == -1);
  uint64_t v28 = v30;
LABEL_42:
  if (v28) {
    return v28;
  }
LABEL_43:
  uint64_t v31 = *(unsigned int *)(v13 + 88);
  if (!v31)
  {
    uint64_t __buf = 0x18E22D0082067F37;
    LOBYTE(v103) = BYTE3(v14);
    BYTE1(v103) = BYTE2(v14);
    BYTE2(v103) = BYTE1(v14);
    HIBYTE(v103) = v14;
    unsigned int v45 = *(_DWORD *)(v13 + 136);
    unsigned int v104 = bswap32(v45);
    if (!v45)
    {
      sqlite3_initialize();
      arc4random_buf((void *)(v13 + 104), 8uLL);
    }
    uint64_t v105 = *(void *)(v13 + 104);
    int v46 = HIDWORD(__buf) + __buf + __buf + v103;
    int v47 = v104 + HIDWORD(__buf) + __buf + v46;
    int v48 = v46 + v105 + v47;
    int v49 = v47 + HIDWORD(v105) + v48;
    char v106 = HIBYTE(v48);
    char v107 = BYTE2(v48);
    char v108 = BYTE1(v48);
    char v109 = v48;
    char v110 = HIBYTE(v49);
    char v111 = BYTE2(v49);
    char v112 = BYTE1(v49);
    char v113 = v49;
    *(_DWORD *)(v13 + 56) = v14;
    *(unsigned char *)(v13 + 85) = 0;
    *(_DWORD *)(v13 + 96) = v48;
    *(_DWORD *)(v13 + 100) = v49;
    *(unsigned char *)(v13 + 67) = 1;
    uint64_t v28 = (*(uint64_t (**)(void, uint64_t *, uint64_t, void))(**(void **)(v13 + 16) + 24))(*(void *)(v13 + 16), &__buf, 32, 0);
    if (v28) {
      return v28;
    }
    if (*(unsigned char *)(v13 + 68))
    {
      if (((v15 >> 2) & 3) != 0)
      {
        uint64_t v28 = (*(uint64_t (**)(void))(**(void **)(v13 + 16) + 40))(*(void *)(v13 + 16));
        if (v28) {
          return v28;
        }
      }
    }
  }
  if (*(_DWORD *)(v13 + 56) != v14) {
    return sub_1B0D1045C(75914);
  }
  uint64_t v32 = *(void *)(v13 + 16);
  v96[0] = v13;
  v96[1] = v32;
  uint64_t v87 = v32;
  uint64_t v97 = 0;
  unsigned int v98 = v15;
  int v99 = v14;
  size_t v33 = (int)v14 + 24;
  uint64_t v34 = malloc_type_malloc(v33, 0xD8065E5BuLL);
  int v100 = v34;
  if (!v34) {
    return 7;
  }
  int v88 = v34;
  char v89 = v15;
  uint64_t v91 = v14;
  uint64_t v93 = (int)v14 + 24;
  uint64_t v35 = v33 * v31 + 32;
  if (v5)
  {
    uint64_t v92 = 0;
    uint64_t v36 = v5;
    while (1)
    {
      if (!v22) {
        goto LABEL_53;
      }
      if (a4)
      {
        uint64_t v37 = *(void *)(v36 + 32);
        if (!v37)
        {
          LODWORD(v31) = v31 + 1;
          goto LABEL_55;
        }
      }
      LODWORD(__buf) = 0;
      sub_1B0D10470(v13, *(_DWORD *)(v36 + 48), &__buf);
      int v38 = __buf;
      if (__buf >= v22)
      {
        if (*(_DWORD *)(v13 + 124) - 1 >= __buf) {
          *(_DWORD *)(v13 + 124) = __buf;
        }
        uint64_t v41 = *(void *)(v36 + 40);
        long long v42 = *(uint64_t (**)(void, void, void, uint64_t))(v41 + 296);
        if (v42)
        {
          uint64_t v43 = v42(*(void *)(v41 + 320), *(void *)(v36 + 8), *(unsigned int *)(v36 + 48), 6);
          if (!v43) {
            return 7;
          }
        }
        else
        {
          uint64_t v43 = *(void *)(v36 + 8);
          if (!v43) {
            return 7;
          }
        }
        uint64_t v44 = (*(uint64_t (**)(void, uint64_t, uint64_t, size_t))(**(void **)(v13 + 16) + 24))(*(void *)(v13 + 16), v43, v91, v33 * (v38 - 1) + 56);
        if (v44) {
          return v44;
        }
        *(_WORD *)(v36 + 52) &= ~0x40u;
        uint64_t v36 = *(void *)(v36 + 32);
        if (!v36) {
          goto LABEL_80;
        }
      }
      else
      {
LABEL_53:
        LODWORD(v31) = v31 + 1;
        if (a4)
        {
          uint64_t v37 = *(void *)(v36 + 32);
LABEL_55:
          if (v37) {
            int v39 = 0;
          }
          else {
            int v39 = a3;
          }
          goto LABEL_59;
        }
        int v39 = 0;
LABEL_59:
        uint64_t v40 = sub_1B0D10634((uint64_t)v96, v36, v39, v35);
        if (v40) {
          goto LABEL_125;
        }
        v35 += v33;
        *(_WORD *)(v36 + 52) |= 0x40u;
        uint64_t v92 = v36;
        uint64_t v36 = *(void *)(v36 + 32);
        if (!v36) {
          goto LABEL_80;
        }
      }
    }
  }
  uint64_t v92 = 0;
LABEL_80:
  char v50 = v89;
  if (a4)
  {
    if (!*(_DWORD *)(v13 + 124)) {
      goto LABEL_108;
    }
    int v51 = *(_DWORD *)(v13 + 56);
    int v52 = sqlite3_initialize();
    if (v51 >= -23 && !v52)
    {
      uint64_t v53 = (v51 + 24);
      uint64_t v54 = sub_1B0C7FC94(v53);
      if (v54)
      {
        long long v55 = (unsigned int *)v54;
        int v56 = *(_DWORD *)(v13 + 124);
        uint64_t v86 = v53;
        if (v56 == 1) {
          unint64_t v57 = 24;
        }
        else {
          unint64_t v57 = v53 * (unint64_t)(v56 - 2) + 48;
        }
        uint64_t v28 = (*(uint64_t (**)(void, uint64_t, uint64_t, unint64_t))(**(void **)(v13 + 16) + 16))(*(void *)(v13 + 16), v54, 8, v57);
        *(_DWORD *)(v13 + 96) = bswap32(*v55);
        *(_DWORD *)(v13 + 100) = bswap32(v55[1]);
        unsigned int v58 = *(_DWORD *)(v13 + 124);
        *(_DWORD *)(v13 + 124) = 0;
        if (v28) {
          BOOL v59 = 1;
        }
        else {
          BOOL v59 = v58 > v31;
        }
        if (!v59)
        {
          unsigned int v60 = v58 + 1;
          while (1)
          {
            uint64_t v61 = (*(uint64_t (**)(void, unsigned int *, uint64_t, unint64_t))(**(void **)(v13 + 16)
                                                                                               + 16))(*(void *)(v13 + 16), v55, v86, v86 * (unint64_t)(v60 - 2) + 32);
            if (v61) {
              break;
            }
            sub_1B0CC1C5C(v13, bswap32(*v55), bswap32(v55[1]), v55 + 6, (uint64_t)&__buf);
            uint64_t v62 = (*(uint64_t (**)(void, uint64_t *, uint64_t, unint64_t))(**(void **)(v13 + 16)
                                                                                          + 24))(*(void *)(v13 + 16), &__buf, 24, v86 * (unint64_t)(v60 - 2) + 32);
            uint64_t v28 = v62;
            if (v60 <= v31)
            {
              ++v60;
              if (!v62) {
                continue;
              }
            }
            goto LABEL_101;
          }
          uint64_t v28 = v61;
        }
LABEL_101:
        uint64_t v64 = (void (**)(unsigned int *))&off_1EB21C9E8;
        if (dword_1EB21C9C0)
        {
          if ((void)xmmword_1EB2201B0) {
            xmmword_1EB21CA40(xmmword_1EB2201B0);
          }
          qword_1EB220108 -= (int)off_1EB21C9F8(v55);
          --qword_1EB220150;
          off_1EB21C9E8(v55);
          long long v55 = (unsigned int *)xmmword_1EB2201B0;
          if (!(void)xmmword_1EB2201B0)
          {
LABEL_107:
            char v50 = v89;
            if (v28) {
              return v28;
            }
LABEL_108:
            uint64_t v65 = v50 & 3;
            if ((v50 & 3) != 0)
            {
              if (!*(unsigned char *)(v13 + 69))
              {
                int v63 = 0;
                uint64_t v69 = v87;
LABEL_129:
                uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v69 + 40))(v69, v65);
LABEL_131:
                free(v88);
                if (*(unsigned char *)(v13 + 67))
                {
                  uint64_t v74 = *(void *)(v13 + 32);
                  if ((v74 & 0x8000000000000000) == 0)
                  {
                    if (v93 * (v63 + v31) + 32 <= v74) {
                      uint64_t v75 = *(void *)(v13 + 32);
                    }
                    else {
                      uint64_t v75 = v93 * (v63 + v31) + 32;
                    }
                    if (off_1E9B52208) {
                      v73.n128_f64[0] = off_1E9B52208(v72);
                    }
                    uint64_t __buf = 0;
                    uint64_t v76 = (*(uint64_t (**)(void, uint64_t *, __n128))(**(void **)(v13 + 16) + 48))(*(void *)(v13 + 16), &__buf, v73);
                    int v77 = v76;
                    if (!v76)
                    {
                      if (__buf <= v75)
                      {
                        int v77 = 0;
                      }
                      else
                      {
                        uint64_t v76 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v13 + 16) + 32))(*(void *)(v13 + 16), v75);
                        int v77 = v76;
                      }
                    }
                    if (off_1E9B52210) {
                      off_1E9B52210(v76);
                    }
                    if (v77) {
                      sqlite3_log(v77, "cannot limit WAL size: %s", *(const char **)(v13 + 128));
                    }
                    *(unsigned char *)(v13 + 67) = 0;
                  }
                }
                goto LABEL_147;
              }
              unsigned int v90 = v50 & 3;
              int v66 = *(uint64_t (**)(void))(**(void **)(v13 + 16) + 88);
              if (v66)
              {
                int v67 = v66();
                if (v67 >= 0x10000) {
                  LODWORD(v68) = 0x10000;
                }
                else {
                  LODWORD(v68) = v67;
                }
                if (v67 >= 32) {
                  uint64_t v68 = v68;
                }
                else {
                  uint64_t v68 = 512;
                }
              }
              else
              {
                uint64_t v68 = 4096;
              }
              uint64_t v70 = (v35 + v68 - 1) / v68 * v68;
              uint64_t v97 = v70;
              if (v35 < v70)
              {
                int v63 = 0;
                uint64_t v71 = v35;
                while (1)
                {
                  uint64_t v40 = sub_1B0D10634((uint64_t)v96, v92, a3, v71);
                  if (v40) {
                    break;
                  }
                  v71 += v93;
                  ++v63;
                  if (v71 >= v70) {
                    goto LABEL_127;
                  }
                }
LABEL_125:
                uint64_t v28 = v40;
                free(v88);
                return v28;
              }
              int v63 = 0;
LABEL_127:
              if (v70 == v35)
              {
                uint64_t v69 = v87;
                uint64_t v65 = v90;
                goto LABEL_129;
              }
            }
            else
            {
              int v63 = 0;
            }
            uint64_t v28 = 0;
            goto LABEL_131;
          }
          uint64_t v64 = (void (**)(unsigned int *))&xmmword_1EB21CA50;
        }
        (*v64)(v55);
        goto LABEL_107;
      }
    }
    return 7;
  }
  free(v88);
  int v63 = 0;
  uint64_t v28 = 0;
LABEL_147:
  int v78 = *(_DWORD *)(v13 + 88);
  if (v5 && !v28)
  {
    uint64_t v79 = v5;
    do
    {
      if ((*(_WORD *)(v79 + 52) & 0x40) != 0) {
        uint64_t v28 = sub_1B0C8F47C(v13, ++v78, *(_DWORD *)(v79 + 48));
      }
      else {
        uint64_t v28 = 0;
      }
      uint64_t v79 = *(void *)(v79 + 32);
      if (v79) {
        BOOL v80 = v28 == 0;
      }
      else {
        BOOL v80 = 0;
      }
    }
    while (v80);
  }
  BOOL v81 = v28 == 0;
  if (!v28 && v63 >= 1)
  {
    do
    {
      uint64_t v82 = sub_1B0C8F47C(v13, ++v78, *(_DWORD *)(v92 + 48));
      BOOL v81 = v82 == 0;
      if (v82) {
        BOOL v83 = 0;
      }
      else {
        BOOL v83 = v63 > 1;
      }
      --v63;
    }
    while (v83);
    uint64_t v28 = v82;
  }
  if (v81)
  {
    *(_WORD *)(v13 + 86) = v91 & 0xFF00 | WORD1(v91);
    *(_DWORD *)(v13 + 88) = v78;
    if (a4)
    {
      ++*(_DWORD *)(v13 + 80);
      *(_DWORD *)(v13 + 92) = a3;
      sub_1B0C8F600(v13);
      *(_DWORD *)(v13 + 24) = v78;
    }
  }
  else if (v28)
  {
    return v28;
  }
  uint64_t v28 = 0;
  uint64_t v84 = *(void *)(a1 + 112);
  if (v84 && v5)
  {
LABEL_171:
    sub_1B0D10D8C(v84, *(_DWORD *)(v5 + 48), *(void *)(v5 + 8));
    while (1)
    {
      uint64_t v5 = *(void *)(v5 + 32);
      if (!v5) {
        return 0;
      }
      uint64_t v84 = *(void *)(a1 + 112);
      if (v84) {
        goto LABEL_171;
      }
    }
  }
  return v28;
}

uint64_t sub_1B0D10248(uint64_t result, unsigned int a2)
{
  int v2 = *(_DWORD *)(result + 128);
  if (v2 >= 1)
  {
    uint64_t v4 = result;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    int v7 = 0;
    do
    {
      uint64_t v8 = *(void *)(v4 + 120) + v5;
      if (*(_DWORD *)(v8 + 24) >= a2)
      {
        uint64_t result = sub_1B0CCABC4(*(unsigned int **)(v8 + 16), a2);
        v7 |= result;
        int v2 = *(_DWORD *)(v4 + 128);
      }
      ++v6;
      v5 += 56;
    }
    while (v6 < v2);
  }
  return result;
}

uint64_t sub_1B0D102D4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  if (!a5) {
    return (*(uint64_t (**)(void))(a1 + 40))();
  }
  *(void *)a3 = &unk_1F09A5508;
  if (a5 <= 0) {
    int v5 = 1016;
  }
  else {
    int v5 = a5;
  }
  *(_DWORD *)(a3 + 8) = v5;
  *(_DWORD *)(a3 + 12) = a5;
  *(_DWORD *)(a3 + 56) = a4;
  *(void *)(a3 + 64) = a1;
  *(void *)(a3 + 72) = a2;
  return 0;
}

uint64_t sub_1B0D1032C()
{
  return 0;
}

uint64_t sub_1B0D10334(uint64_t result, unsigned int *a2, int a3, int *a4, _DWORD *a5)
{
  if (a4)
  {
    int v6 = *a4;
    int v5 = a4[1];
    int v7 = (unsigned int *)((char *)a2 + a3);
    if (!result)
    {
      do
      {
LABEL_8:
        unsigned int v10 = *a2;
        unsigned int v11 = a2[1];
        a2 += 2;
        v6 += v5 + bswap32(v10);
        v5 += bswap32(v11) + v6;
      }
      while (a2 < v7);
      goto LABEL_11;
    }
  }
  else
  {
    int v6 = 0;
    int v5 = 0;
    int v7 = (unsigned int *)((char *)a2 + a3);
    if (!result) {
      goto LABEL_8;
    }
  }
  if ((a3 & 0x3F) != 0)
  {
    do
    {
      unsigned int v8 = *a2;
      unsigned int v9 = a2[1];
      a2 += 2;
      v6 += v5 + v8;
      v5 += v9 + v6;
    }
    while (a2 < v7);
  }
  else
  {
    do
    {
      int v12 = v5 + v6 + *a2;
      unsigned int v13 = a2[1] + v5 + v12;
      unsigned int v14 = v12 + a2[2] + v13;
      unsigned int v15 = v13 + a2[3] + v14;
      unsigned int v16 = v14 + a2[4] + v15;
      unsigned int v17 = v15 + a2[5] + v16;
      unsigned int v18 = v16 + a2[6] + v17;
      unsigned int v19 = v17 + a2[7] + v18;
      unsigned int v20 = v18 + a2[8] + v19;
      unsigned int v21 = v19 + a2[9] + v20;
      int v22 = v20 + a2[10] + v21;
      int v23 = v21 + a2[11] + v22;
      int v24 = v22 + a2[12] + v23;
      int v25 = v23 + a2[13] + v24;
      int v6 = v24 + a2[14] + v25;
      int v5 = v25 + a2[15] + v6;
      a2 += 16;
    }
    while (a2 < v7);
  }
LABEL_11:
  *a5 = v6;
  a5[1] = v5;
  return result;
}

uint64_t sub_1B0D1045C(int a1)
{
  return sub_1B0D06FEC(11, a1, "database corruption");
}

uint64_t sub_1B0D10470(uint64_t a1, int a2, _DWORD *a3)
{
  unsigned int v4 = *(_DWORD *)(a1 + 88);
  if (v4 && (*(_WORD *)(a1 + 60) || *(unsigned char *)(a1 + 70)))
  {
    unint64_t v7 = ((unint64_t)(*(_DWORD *)(a1 + 120) + 4096) + 0xFFFFFFFF021) >> 12;
    unint64_t v8 = ((unint64_t)(v4 + 4096) + 0xFFFFFFFF021) >> 12;
    if ((int)v8 >= (int)v7)
    {
      uint64_t v11 = (383 * a2) & 0x1FFF;
      uint64_t v12 = (int)v8;
      uint64_t v13 = (int)v7;
      while (1)
      {
        uint64_t v22 = 0;
        uint64_t v23 = 0;
        if (v12 < *(int *)(a1 + 40) && (uint64_t v15 = *(void *)(*(void *)(a1 + 48) + 8 * v12), (v22 = v15) != 0))
        {
          uint64_t result = 0;
        }
        else
        {
          uint64_t result = sub_1B0D10A2C(a1, v12, &v22);
          uint64_t v15 = v22;
          if (!v22)
          {
            if (result <= 1) {
              return 1;
            }
            else {
              return result;
            }
          }
        }
        uint64_t v16 = v15 + 0x4000;
        if (v12)
        {
          int v17 = (v12 << 12) - 34;
          LODWORD(v23) = v17;
          if (result) {
            return result;
          }
        }
        else
        {
          int v17 = 0;
          v15 += 136;
          uint64_t v22 = v15;
          LODWORD(v23) = 0;
          if (result) {
            return result;
          }
        }
        int v18 = *(unsigned __int16 *)(v16 + 2 * v11);
        if (*(_WORD *)(v16 + 2 * v11)) {
          break;
        }
LABEL_9:
        if (v12-- <= v13) {
          goto LABEL_5;
        }
      }
      int v9 = 0;
      int v19 = -8193;
      LOWORD(v20) = v11;
      do
      {
        if (v17 + v18 <= v4
          && (v17 + v18) >= *(_DWORD *)(a1 + 120)
          && *(_DWORD *)(v15 + 4 * (v18 - 1)) == a2)
        {
          int v9 = v17 + v18;
        }
        if (__CFADD__(v19++, 1)) {
          return sub_1B0D1045C(75373);
        }
        unsigned int v20 = ((_WORD)v20 + 1) & 0x1FFF;
        int v18 = *(unsigned __int16 *)(v16 + 2 * v20);
      }
      while (*(_WORD *)(v16 + 2 * v20));
      if (!v9) {
        goto LABEL_9;
      }
    }
    else
    {
LABEL_5:
      int v9 = 0;
    }
    uint64_t result = 0;
    *a3 = v9;
  }
  else
  {
    uint64_t result = 0;
    *a3 = 0;
  }
  return result;
}

uint64_t sub_1B0D10634(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  unsigned int v10 = *(uint64_t (**)(void, void, void, uint64_t))(v9 + 296);
  if (v10)
  {
    uint64_t v11 = (unsigned int *)v10(*(void *)(v9 + 320), *(void *)(a2 + 8), *(unsigned int *)(a2 + 48), 6);
    if (v11) {
      goto LABEL_3;
    }
    return 7;
  }
  uint64_t v11 = *(unsigned int **)(a2 + 8);
  if (!v11) {
    return 7;
  }
LABEL_3:
  sub_1B0CC1C5C(*(void *)a1, *(_DWORD *)(a2 + 48), a3, v11, v8);
  memcpy((void *)(v8 + 24), v11, *(int *)(a1 + 28));
  uint64_t v12 = *(int *)(a1 + 28) + 24;
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v14 = v13 - a4;
  if (v13 <= a4
    || v12 + a4 < v13
    || (result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8), v8, v14, a4), !result)&& ((int v17 = v12 - v14, v18 = *(_DWORD *)(a1 + 24), (v18 & 3) == 0)? (result = 0): (result = (*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8), v18 & 3)), v17 && !result))
  {
    uint64_t v15 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 24);
    return v15();
  }
  return result;
}

void sub_1B0D10790(uint64_t a1, uint64_t a2)
{
  if (off_1E9B52208) {
    off_1E9B52208(a1);
  }
  uint64_t v6 = 0;
  uint64_t v4 = (*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 16) + 48))(*(void *)(a1 + 16), &v6);
  int v5 = v4;
  if (!v4)
  {
    if (v6 <= a2)
    {
      int v5 = 0;
    }
    else
    {
      uint64_t v4 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), a2);
      int v5 = v4;
    }
  }
  if (off_1E9B52210) {
    off_1E9B52210(v4);
  }
  if (v5) {
    sqlite3_log(v5, "cannot limit WAL size: %s", *(const char **)(a1 + 128));
  }
}

void sub_1B0D1084C(uint64_t a1, int a2)
{
  int v2 = **(_DWORD ***)(a1 + 48);
  ++*(_DWORD *)(a1 + 136);
  *(_DWORD *)(a1 + 88) = 0;
  unsigned int v3 = bswap32(*(_DWORD *)(a1 + 104)) + 1;
  *(unsigned char *)(a1 + 104) = HIBYTE(v3);
  *(unsigned char *)(a1 + 105) = BYTE2(v3);
  *(unsigned char *)(a1 + 106) = BYTE1(v3);
  *(unsigned char *)(a1 + 107) = v3;
  *(_DWORD *)(a1 + 108) = a2;
  sub_1B0C8F600(a1);
  v2[24] = 0;
  v2[32] = 0;
  v2[26] = 0;
  v2[27] = -1;
  v2[28] = -1;
  v2[29] = -1;
}

uint64_t sub_1B0D108CC(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(unsigned __int8 *)(result + 63);
  if (v2 != 2 && !*(unsigned char *)(result + 70)) {
    goto LABEL_16;
  }
  if (*(int *)(result + 40) < 1) {
    goto LABEL_15;
  }
  uint64_t v3 = 0;
  do
  {
    uint64_t v5 = *(void *)(*(void *)(v1 + 48) + 8 * v3);
    if (v5)
    {
      uint64_t v4 = &off_1EB21C9E8;
      if (!dword_1EB21C9C0) {
        goto LABEL_6;
      }
      if ((void)xmmword_1EB2201B0) {
        xmmword_1EB21CA40(xmmword_1EB2201B0);
      }
      qword_1EB220108 -= (int)off_1EB21C9F8(v5);
      --qword_1EB220150;
      uint64_t result = off_1EB21C9E8(v5);
      uint64_t v5 = xmmword_1EB2201B0;
      if ((void)xmmword_1EB2201B0)
      {
        uint64_t v4 = &xmmword_1EB21CA50;
LABEL_6:
        uint64_t result = (*v4)(v5);
      }
    }
    *(void *)(*(void *)(v1 + 48) + 8 * v3++) = 0;
  }
  while (v3 < *(int *)(v1 + 40));
  int v2 = *(unsigned __int8 *)(v1 + 63);
LABEL_15:
  if (v2 != 2)
  {
LABEL_16:
    uint64_t v6 = *(uint64_t (**)(void))(**(void **)(v1 + 8) + 128);
    return v6();
  }
  return result;
}

uint64_t sub_1B0D10A2C(uint64_t a1, uint64_t a2, void *a3)
{
  if (*(_DWORD *)(a1 + 40) <= (int)a2)
  {
    int v6 = a2 + 1;
    uint64_t v7 = sub_1B0C8E1B8(*(void *)(a1 + 48), 8 * ((int)a2 + 1));
    if (!v7)
    {
      uint64_t v14 = 0;
      uint64_t result = 7;
      goto LABEL_22;
    }
    uint64_t v8 = v7;
    bzero((void *)(v7 + 8 * *(int *)(a1 + 40)), 8 * (v6 - *(_DWORD *)(a1 + 40)));
    *(void *)(a1 + 48) = v8;
    *(_DWORD *)(a1 + 40) = v6;
  }
  if (*(unsigned char *)(a1 + 63) == 2)
  {
    uint64_t v9 = (void *)sub_1B0C7FC94(0x8000);
    unsigned int v10 = v9;
    if (v9) {
      bzero(v9, 0x8000uLL);
    }
    uint64_t v11 = (int)a2;
    uint64_t v12 = 8 * (int)a2;
    *(void *)(*(void *)(a1 + 48) + v12) = v10;
    if (*(void *)(*(void *)(a1 + 48) + v12)) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = 7;
    }
  }
  else
  {
    uint64_t v11 = (int)a2;
    uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, void, uint64_t))(**(void **)(a1 + 8) + 104))(*(void *)(a1 + 8), a2, 0x8000, *(unsigned __int8 *)(a1 + 64), *(void *)(a1 + 48) + 8 * (int)a2);
    if (result)
    {
      if (result == 8)
      {
        *(unsigned char *)(a1 + 66) |= 2u;
        if (result == 8) {
          uint64_t result = 0;
        }
        else {
          uint64_t result = result;
        }
      }
    }
    else if ((int)a2 >= 1 && off_1EB21CB60 && off_1EB21CB60(600))
    {
      uint64_t result = 7;
    }
    else
    {
      uint64_t result = 0;
    }
  }
  uint64_t v14 = *(void *)(*(void *)(a1 + 48) + 8 * v11);
LABEL_22:
  *a3 = v14;
  return result;
}

uint64_t sub_1B0D10B8C(uint64_t a1, unsigned int *a2, _DWORD *a3, unsigned int *a4, uint64_t a5)
{
  if (*(void *)(a1 + 104) != *(void *)(a5 + 8)) {
    return 0;
  }
  unsigned int v7 = bswap32(*(_DWORD *)a5);
  if (!v7) {
    return 0;
  }
  uint64_t v11 = (int *)(a1 + 96);
  int v12 = *(unsigned __int8 *)(a1 + 85);
  BOOL v13 = *(unsigned char *)(a1 + 85) == 0;
  int v14 = *(_DWORD *)(a1 + 100);
  if (v12)
  {
    unsigned int v15 = bswap32(*(_DWORD *)a5);
    unsigned int v16 = bswap32(*(_DWORD *)(a5 + 4));
  }
  else
  {
    unsigned int v15 = *(_DWORD *)a5;
    unsigned int v16 = *(_DWORD *)(a5 + 4);
  }
  unsigned int v17 = v14 + *(_DWORD *)(a1 + 96) + v15;
  *(_DWORD *)(a1 + 96) = v17;
  *(_DWORD *)(a1 + 100) = v16 + v14 + v17;
  sub_1B0D10334(v13, a4, *(_DWORD *)(a1 + 56), v11, v11);
  if (*(_DWORD *)(a1 + 96) != bswap32(*(_DWORD *)(a5 + 16)) || *(_DWORD *)(a1 + 100) != bswap32(*(_DWORD *)(a5 + 20))) {
    return 0;
  }
  *a2 = v7;
  *a3 = bswap32(*(_DWORD *)(a5 + 4));
  return 1;
}

void sub_1B0D10C78(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 88);
  if (v1)
  {
    v12[0] = 0;
    v12[1] = 0;
    unint64_t v3 = ((unint64_t)(v1 + 4096) + 0xFFFFFFFF021) >> 12;
    if (*(_DWORD *)(a1 + 40) > (int)v3
      && (uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8 * (int)v3), (v12[0] = v4) != 0))
    {
      int v5 = 0;
    }
    else
    {
      int v5 = sub_1B0D10A2C(a1, v3, v12);
      uint64_t v4 = v12[0];
      if (!v12[0]) {
        return;
      }
    }
    if (v3) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = 136;
    }
    if (!v5)
    {
      uint64_t v7 = 0;
      uint64_t v8 = v4 + 0x4000;
      uint64_t v9 = v4 + v6;
      int v10 = (v3 << 12) - 34;
      if (!v3) {
        int v10 = 0;
      }
      int v11 = *(_DWORD *)(a1 + 88) - v10;
      do
      {
        if (v11 < *(unsigned __int16 *)(v8 + v7)) {
          *(_WORD *)(v8 + v7) = 0;
        }
        v7 += 2;
      }
      while (v7 != 0x4000);
      bzero((void *)(v9 + 4 * v11), (int)v8 - ((int)v9 + 4 * v11));
    }
  }
}

uint64_t sub_1B0D10D8C(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = result;
  do
  {
    unsigned int v6 = *(_DWORD *)(v5 + 48);
    BOOL v7 = v6 > 6;
    int v8 = (1 << v6) & 0x61;
    BOOL v9 = v7 || v8 == 0;
    if (!v9 && *(_DWORD *)(v5 + 24) > a2)
    {
      uint64_t v10 = *(void *)(*(void *)v5 + 24);
      if (v10) {
        xmmword_1EB21CA40(v10);
      }
      int v11 = sub_1B0CE8578(v5, a2, a3, 1);
      uint64_t result = *(void *)(*(void *)v5 + 24);
      if (result) {
        uint64_t result = xmmword_1EB21CA50(result);
      }
      if (v11) {
        *(_DWORD *)(v5 + 48) = v11;
      }
    }
    uint64_t v5 = *(void *)(v5 + 64);
  }
  while (v5);
  return result;
}

uint64_t sub_1B0D10E58(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 22);
  if (v2 != 5 && v2 >= (int)a2) {
    return 0;
  }
  int v4 = a2;
  if (*(unsigned char *)(a1 + 17))
  {
    if (a2 != 4)
    {
LABEL_8:
      if (v2 == 5) {
        return 0;
      }
    }
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 72) + 56))(*(void *)(a1 + 72), a2);
    if (result) {
      return result;
    }
    int v2 = *(unsigned __int8 *)(a1 + 22);
    if (v4 != 4) {
      goto LABEL_8;
    }
  }
  uint64_t result = 0;
  *(unsigned char *)(a1 + 22) = v4;
  return result;
}

unint64_t sub_1B0D10ED8(unint64_t result)
{
  if (!result) {
    return result;
  }
  int v1 = (void *)result;
  if (qword_1E9B521D8 <= result && (unint64_t)xmmword_1E9B521E0 > result)
  {
    uint64_t result = *((void *)&xmmword_1E9B521E0 + 1);
    if (*((void *)&xmmword_1E9B521E0 + 1))
    {
      xmmword_1EB21CA40(*((void *)&xmmword_1E9B521E0 + 1));
      uint64_t result = *((void *)&xmmword_1E9B521E0 + 1);
    }
    --qword_1EB220110;
    *int v1 = qword_1E9B521F0;
    qword_1E9B521F0 = (uint64_t)v1;
    BOOL v4 = ++dword_1E9B521F8 < dword_1E9B521D4;
    dword_1E9B521FC = v4;
    if (result)
    {
      uint64_t v5 = &xmmword_1EB21CA50;
LABEL_21:
      unsigned int v6 = *v5;
      return v6(result);
    }
  }
  else
  {
    int v3 = off_1EB21C9F8(result);
    if (*((void *)&xmmword_1E9B521E0 + 1))
    {
      xmmword_1EB21CA40(*((void *)&xmmword_1E9B521E0 + 1));
      qword_1EB220118 -= v3;
      if (*((void *)&xmmword_1E9B521E0 + 1)) {
        xmmword_1EB21CA50(*((void *)&xmmword_1E9B521E0 + 1));
      }
    }
    else
    {
      qword_1EB220118 -= v3;
    }
    uint64_t v5 = &off_1EB21C9E8;
    if (!dword_1EB21C9C0)
    {
      uint64_t result = (unint64_t)v1;
      goto LABEL_21;
    }
    if ((void)xmmword_1EB2201B0) {
      xmmword_1EB21CA40(xmmword_1EB2201B0);
    }
    qword_1EB220108 -= (int)off_1EB21C9F8(v1);
    --qword_1EB220150;
    off_1EB21C9E8(v1);
    uint64_t result = xmmword_1EB2201B0;
    if ((void)xmmword_1EB2201B0)
    {
      uint64_t v5 = &xmmword_1EB21CA50;
      goto LABEL_21;
    }
  }
  return result;
}

uint64_t sub_1B0D11088(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = 0;
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_1B0D11094(uint64_t a1, uint64_t a2, uint64_t *a3, char a4)
{
  int v21 = 0;
  uint64_t v8 = (a2 - 1);
  if (a2 <= 1)
  {
    if (!a2)
    {
      return sub_1B0D1045C(69568);
    }
    return sub_1B0D112F8(a1, a2, a3, a4);
  }
  if ((a4 & 2) == 0 && *(unsigned char *)(a1 + 21) != 1) {
    return sub_1B0D112F8(a1, a2, a3, a4);
  }
  uint64_t v9 = *(void *)(a1 + 344);
  if (v9)
  {
    uint64_t result = sub_1B0D10470(v9, a2, &v21);
    if (result)
    {
      *a3 = 0;
      return result;
    }
    if (v21) {
      return sub_1B0D112F8(a1, a2, a3, a4);
    }
  }
  uint64_t v20 = 0;
  uint64_t result = (*(uint64_t (**)(void, uint64_t, void, uint64_t *))(**(void **)(a1 + 72) + 136))(*(void *)(a1 + 72), *(void *)(a1 + 200) * v8, *(void *)(a1 + 200), &v20);
  if (result) {
    BOOL v11 = 1;
  }
  else {
    BOOL v11 = v20 == 0;
  }
  if (v11)
  {
    if (result)
    {
      *a3 = 0;
      return result;
    }
    return sub_1B0D112F8(a1, a2, a3, a4);
  }
  if (*(unsigned __int8 *)(a1 + 21) > 1u || *(unsigned char *)(a1 + 16))
  {
    uint64_t v12 = ((uint64_t (*)(void, uint64_t, void))*(&xmmword_1EB21CA98 + 1))(*(void *)(*(void *)(a1 + 336) + 72), a2, 0);
    if (v12)
    {
      BOOL v13 = (uint64_t *)v12;
      uint64_t v14 = *(void *)(a1 + 336);
      unsigned int v15 = (void *)v13[1];
      if (*v15)
      {
        ++*(void *)(v14 + 24);
        ++v15[7];
LABEL_27:
        (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 72) + 144))(*(void *)(a1 + 72), *(void *)(a1 + 200) * v8, v20);
        uint64_t result = 0;
        *a3 = (uint64_t)v15;
        return result;
      }
      unsigned int v15 = (void *)sub_1B0D1171C(v14, a2, v13);
      if (v15) {
        goto LABEL_27;
      }
    }
  }
  uint64_t v16 = v20;
  unsigned int v17 = *(void **)(a1 + 168);
  if (v17)
  {
    *(void *)(a1 + 168) = v17[4];
    v17[4] = 0;
    *(void *)v17[2] = 0;
LABEL_32:
    uint64_t result = 0;
    *((_DWORD *)v17 + 12) = a2;
    v17[1] = v16;
    ++*(_DWORD *)(a1 + 152);
    *a3 = (uint64_t)v17;
    return result;
  }
  uint64_t v18 = *(unsigned __int16 *)(a1 + 176) + 80;
  int v19 = (void *)sub_1B0C7FC94(v18);
  unsigned int v17 = v19;
  if (v19)
  {
    bzero(v19, v18);
    v17[2] = v17 + 10;
    *((_WORD *)v17 + 26) = 32;
    v17[7] = 1;
    _OWORD v17[5] = a1;
    goto LABEL_32;
  }
  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 72) + 144))(*(void *)(a1 + 72), *(void *)(a1 + 200) * v8, v16);
  uint64_t result = 7;
  *a3 = 0;
  return result;
}

uint64_t sub_1B0D112F8(uint64_t a1, uint64_t a2, uint64_t *a3, char a4)
{
  if (a2)
  {
    uint64_t v9 = ((uint64_t (*)(void, uint64_t, void))*(&xmmword_1EB21CA98 + 1))(*(void *)(*(void *)(a1 + 336) + 72), a2, *(unsigned char *)(*(void *)(a1 + 336) + 49) & 3);
    BOOL v11 = (uint64_t *)v9;
    if (v9) {
      goto LABEL_3;
    }
    uint64_t v15 = *(void *)(a1 + 336);
    if (*(unsigned char *)(v15 + 49) == 2) {
      goto LABEL_26;
    }
    if ((int)xmmword_1EB21CA98(*(void *)(v15 + 72)) > *(_DWORD *)(v15 + 36))
    {
      uint64_t v16 = *(void *)(v15 + 16);
      if (v16)
      {
        while (*(void *)(v16 + 56) || (*(_WORD *)(v16 + 52) & 8) != 0)
        {
          uint64_t v16 = *(void *)(v16 + 72);
          if (!v16) {
            goto LABEL_12;
          }
        }
        *(void *)(v15 + 16) = v16;
LABEL_20:
        uint64_t v9 = (*(uint64_t (**)(void))(v15 + 56))(*(void *)(v15 + 64));
        if (v9 != 5 && v9 != 0)
        {
          uint64_t v25 = v9;
LABEL_57:
          if (!*(void *)(*(void *)(a1 + 336) + 24))
          {
            int v23 = *(unsigned __int8 *)(a1 + 21);
            if (*(unsigned char *)(a1 + 21))
            {
              if (v23 == 1)
              {
                if (!*(unsigned char *)(a1 + 8)) {
                  sub_1B0CB2BC8(a1, 0, 0);
                }
              }
              else if (v23 != 6)
              {
                if (off_1E9B52208) {
                  double v10 = off_1E9B52208(v9);
                }
                uint64_t v24 = sub_1B0CC7574(a1, v10);
                if (off_1E9B52210) {
                  off_1E9B52210(v24);
                }
              }
            }
            sub_1B0CB3198(a1);
          }
          *a3 = 0;
          return v25;
        }
        goto LABEL_25;
      }
LABEL_12:
      *(void *)(v15 + 16) = 0;
      uint64_t v17 = *(void *)(v15 + 8);
      if (v17)
      {
        while (*(void *)(v17 + 56))
        {
          uint64_t v17 = *(void *)(v17 + 72);
          if (!v17) {
            goto LABEL_25;
          }
        }
        goto LABEL_20;
      }
    }
LABEL_25:
    uint64_t v9 = ((uint64_t (*)(void, uint64_t, uint64_t))*(&xmmword_1EB21CA98 + 1))(*(void *)(v15 + 72), a2, 2);
    BOOL v11 = (uint64_t *)v9;
    if (v9)
    {
LABEL_3:
      uint64_t v12 = *(void *)(a1 + 336);
      uint64_t v13 = v11[1];
      if (*(void *)v13)
      {
        ++*(void *)(v12 + 24);
        ++*(void *)(v13 + 56);
        *a3 = v13;
        if (a4) {
          goto LABEL_30;
        }
      }
      else
      {
        uint64_t v13 = sub_1B0D1171C(v12, a2, v11);
        *a3 = v13;
        if (a4) {
          goto LABEL_30;
        }
      }
      if (*(void *)(v13 + 40))
      {
        uint64_t v25 = 0;
        ++*(_DWORD *)(a1 + 248);
        ++*(_DWORD *)(a1 + 264);
        return v25;
      }
LABEL_30:
      if (*(_DWORD *)(a1 + 192) == a2)
      {
        uint64_t v25 = sub_1B0D1045C(69479);
        goto LABEL_32;
      }
      *(void *)(v13 + 40) = a1;
      if (!**(void **)(a1 + 72) || (a4 & 1) != 0 || *(_DWORD *)(a1 + 32) < a2)
      {
        if (*(_DWORD *)(a1 + 188) >= a2)
        {
          if (a4)
          {
            if (off_1E9B52208) {
              ((void (*)(void))off_1E9B52208)();
            }
            if (*(_DWORD *)(a1 + 36) >= a2) {
              sub_1B0CCABC4(*(unsigned int **)(a1 + 64), a2);
            }
            uint64_t v22 = sub_1B0D10248(a1, a2);
            if (off_1E9B52210) {
              off_1E9B52210(v22);
            }
          }
          bzero(*(void **)(v13 + 8), *(void *)(a1 + 200));
          return 0;
        }
        if (*(_DWORD *)(a1 + 32) >= a2)
        {
          uint64_t v9 = sub_1B0D0E3E8(v13);
          uint64_t v25 = 13;
          goto LABEL_57;
        }
        uint64_t v25 = 13;
      }
      else
      {
        ++*(_DWORD *)(a1 + 252);
        ++*(_DWORD *)(a1 + 268);
        uint64_t v25 = sub_1B0C90380(v13);
        if (!v25) {
          return v25;
        }
      }
LABEL_32:
      uint64_t v19 = *(void *)(v13 + 24);
      if ((*(_WORD *)(v13 + 52) & 2) != 0)
      {
        uint64_t v20 = *(void *)(v13 + 72);
        if (*(void *)(v19 + 16) == v13) {
          *(void *)(v19 + 16) = v20;
        }
        uint64_t v21 = *(void *)(v13 + 64);
        if (v21)
        {
          *(void *)(v21 + 72) = v20;
          uint64_t v20 = *(void *)(v13 + 72);
          if (!v20)
          {
            *(void *)uint64_t v19 = v21;
            goto LABEL_56;
          }
        }
        else
        {
          *(void *)(v19 + 8) = v20;
          if (!v20)
          {
            *(void *)uint64_t v19 = 0;
            *(unsigned char *)(v19 + 49) = 2;
            goto LABEL_56;
          }
        }
        *(void *)(v20 + 64) = v21;
      }
LABEL_56:
      --*(void *)(v19 + 24);
      uint64_t v9 = xmmword_1EB21CAA8(*(void *)(v19 + 72), *(void *)v13, 1);
      goto LABEL_57;
    }
LABEL_26:
    uint64_t v25 = 7;
    goto LABEL_57;
  }
  return sub_1B0D1045C(69444);
}

uint64_t *sub_1B0D1168C(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  uint64_t result = (uint64_t *)(*((uint64_t (**)(void, uint64_t, void))&xmmword_1EB21CA98 + 1))(*(void *)(*(void *)(a1 + 336) + 72), a2, 0);
  if (result)
  {
    uint64_t v5 = result;
    uint64_t result = (uint64_t *)result[1];
    if (*result)
    {
      ++*(void *)(*(void *)(a1 + 336) + 24);
      ++result[7];
    }
    else
    {
      uint64_t v6 = *(void *)(a1 + 336);
      return (uint64_t *)sub_1B0D1171C(v6, v2, v5);
    }
  }
  return result;
}

uint64_t sub_1B0D1171C(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t result = a3[1];
  do
  {
    *(_OWORD *)(result + 48) = 0uLL;
    *(_OWORD *)(result + 64) = 0uLL;
    *(_OWORD *)(result + 32) = 0uLL;
    uint64_t v5 = *a3;
    *(void *)uint64_t result = a3;
    *(void *)(result + 8) = v5;
    *(void *)(result + 80) = 0;
    *(void *)(result + 16) = result + 80;
    *(void *)(result + 24) = a1;
    *(_DWORD *)(result + 48) = a2;
    *(_WORD *)(result + 52) = 1;
    uint64_t result = a3[1];
  }
  while (!*(void *)result);
  ++*(void *)(a1 + 24);
  ++*(void *)(result + 56);
  return result;
}

uint64_t sub_1B0D11778(uint64_t result)
{
  uint64_t v1 = result;
  if (*(int *)(result + 128) >= 1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = 16;
    do
    {
      uint64_t result = sub_1B0CD2868(*(void *)(*(void *)(v1 + 120) + v3));
      ++v2;
      v3 += 56;
    }
    while (v2 < *(int *)(v1 + 128));
  }
  uint64_t v4 = *(void ***)(v1 + 88);
  uint64_t v5 = (uint64_t (**)(void))*v4;
  if (*(unsigned char *)(v1 + 8))
  {
    if (v5 != (uint64_t (**)(void))&unk_1F09A5508) {
      goto LABEL_9;
    }
    uint64_t v5 = (uint64_t (**)(void))&unk_1F09A5508;
  }
  else if (!v5)
  {
    goto LABEL_9;
  }
  uint64_t result = v5[1](*(void *)(v1 + 88));
  *uint64_t v4 = 0;
LABEL_9:
  uint64_t v6 = *(void *)(v1 + 120);
  if (v6)
  {
    BOOL v7 = &off_1EB21C9E8;
    if (!dword_1EB21C9C0)
    {
LABEL_15:
      uint64_t result = (*v7)(v6);
      goto LABEL_16;
    }
    if ((void)xmmword_1EB2201B0) {
      xmmword_1EB21CA40(xmmword_1EB2201B0);
    }
    qword_1EB220108 -= (int)off_1EB21C9F8(v6);
    --qword_1EB220150;
    uint64_t result = off_1EB21C9E8(v6);
    uint64_t v6 = xmmword_1EB2201B0;
    if ((void)xmmword_1EB2201B0)
    {
      BOOL v7 = &xmmword_1EB21CA50;
      goto LABEL_15;
    }
  }
LABEL_16:
  *(void *)(v1 + 120) = 0;
  *(_DWORD *)(v1 + 128) = 0;
  *(_DWORD *)(v1 + 60) = 0;
  return result;
}

uint64_t *sub_1B0D118A4(uint64_t *result)
{
  uint64_t v1 = *result;
  if (*result)
  {
    uint64_t v2 = result;
    do
    {
      uint64_t v3 = *(void *)(v1 + 24);
      uint64_t v4 = *(void *)(v1 + 72);
      if (*(void *)(v3 + 16) == v1)
      {
        *(void *)(v3 + 16) = v4;
        uint64_t v5 = *(void *)(v1 + 64);
        if (!v5)
        {
LABEL_9:
          *(void *)(v3 + 8) = v4;
          if (!v4)
          {
            *(void *)uint64_t v3 = 0;
            *(unsigned char *)(v3 + 49) = 2;
            goto LABEL_11;
          }
LABEL_10:
          *(void *)(v4 + 64) = v5;
          goto LABEL_11;
        }
      }
      else
      {
        uint64_t v5 = *(void *)(v1 + 64);
        if (!v5) {
          goto LABEL_9;
        }
      }
      *(void *)(v5 + 72) = v4;
      uint64_t v4 = *(void *)(v1 + 72);
      if (v4) {
        goto LABEL_10;
      }
      *(void *)uint64_t v3 = v5;
LABEL_11:
      *(_WORD *)(v1 + 52) = *(_WORD *)(v1 + 52) & 0xFFF0 | 1;
      if (!*(void *)(v1 + 56))
      {
        if (*(unsigned char *)(v3 + 48)) {
          uint64_t result = (uint64_t *)xmmword_1EB21CAA8(*(void *)(v3 + 72), *(void *)v1, 0);
        }
      }
      uint64_t v1 = *v2;
    }
    while (*v2);
  }
  return result;
}

uint64_t sub_1B0D11974(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 72);
  if (*(void *)result)
  {
    char v4 = a2;
    if (!*(unsigned char *)(a1 + 17)) {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 64))(result, a2);
    }
    if (*(unsigned char *)(a1 + 22) != 5) {
      *(unsigned char *)(a1 + 22) = v4;
    }
  }
  *(unsigned char *)(a1 + 23) = *(unsigned char *)(a1 + 16);
  return result;
}

void *sub_1B0D119D0(uint64_t a1)
{
  ++*(_DWORD *)(a1 + 132);
  for (uint64_t i = *(void *)(a1 + 112); i; uint64_t i = *(void *)(i + 64))
    *(_DWORD *)(i + 24) = 1;
  return sub_1B0C7D108(*(void **)(a1 + 336), 0);
}

uint64_t sub_1B0D11A00(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 72);
  *(unsigned char *)(a1 + 11) = *(unsigned char *)(v2 + 37);
  if (a2 < 10)
  {
    *(unsigned char *)(a1 + 10) = 4;
    *(unsigned char *)(a1 + 8) = 0;
    if (a2 == 5)
    {
      *(void *)(a1 + 120) = sub_1B0D1213C;
      *(void *)(a1 + 128) = sub_1B0D12160;
      __int16 v3 = 1;
      goto LABEL_13;
    }
    if (a2 != 2)
    {
      *(_WORD *)(a1 + 1) = 0;
      *(void *)(a1 + 120) = sub_1B0CBDB10;
      *(void *)(a1 + 128) = sub_1B0D12038;
      return sub_1B0D11B5C(78893, a1);
    }
    *(_WORD *)(a1 + 1) = 0;
    char v4 = sub_1B0CBDB10;
LABEL_9:
    *(void *)(a1 + 120) = v4;
    *(void *)(a1 + 128) = sub_1B0D12038;
    int v5 = *(_DWORD *)(v2 + 42);
LABEL_14:
    *(_DWORD *)(a1 + 14) = v5;
    return 0;
  }
  *(unsigned char *)(a1 + 10) = 0;
  *(unsigned char *)(a1 + 8) = 1;
  if (a2 == 10)
  {
    *(_WORD *)(a1 + 1) = 0;
    char v4 = sub_1B0D11F1C;
    goto LABEL_9;
  }
  if (a2 == 13)
  {
    *(void *)(a1 + 120) = sub_1B0D11D80;
    *(void *)(a1 + 128) = sub_1B0CAD26C;
    __int16 v3 = 257;
LABEL_13:
    *(_WORD *)(a1 + 1) = v3;
    int v5 = *(_DWORD *)(v2 + 46);
    goto LABEL_14;
  }
  *(_WORD *)(a1 + 1) = 0;
  *(void *)(a1 + 120) = sub_1B0D11F1C;
  *(void *)(a1 + 128) = sub_1B0D12038;
  return sub_1B0D11B5C(78869, a1);
}

uint64_t sub_1B0D11B5C(uint64_t a1, uint64_t a2)
{
  int v3 = a1;
  if (off_1E9B52208) {
    off_1E9B52208(a1);
  }
  char v4 = sqlite3_mprintf("database corruption page %u of %s", *(_DWORD *)(a2 + 4), *(const char **)(**(void **)(a2 + 72) + 216));
  int v5 = v4;
  if (off_1E9B52210) {
    off_1E9B52210(v4);
  }
  if (v5)
  {
    sub_1B0D06FEC(11, v3, v5);
    uint64_t v6 = (void (**)(const char *))&off_1EB21C9E8;
    if (!dword_1EB21C9C0)
    {
LABEL_11:
      (*v6)(v5);
      goto LABEL_12;
    }
    if ((void)xmmword_1EB2201B0) {
      xmmword_1EB21CA40(xmmword_1EB2201B0);
    }
    qword_1EB220108 -= (int)off_1EB21C9F8(v5);
    --qword_1EB220150;
    off_1EB21C9E8(v5);
    int v5 = (const char *)xmmword_1EB2201B0;
    if ((void)xmmword_1EB2201B0)
    {
      uint64_t v6 = (void (**)(const char *))&xmmword_1EB21CA50;
      goto LABEL_11;
    }
  }
LABEL_12:

  return sub_1B0D1045C(76991);
}

uint64_t sub_1B0D11C80(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    int v1 = -4;
  }
  else {
    int v1 = -5;
  }
  if (!*(_WORD *)(a1 + 24)) {
    return 0;
  }
  uint64_t v3 = 0;
  uint64_t v4 = *(unsigned __int16 *)(a1 + 18);
  unsigned int v5 = v4 + 2 * *(unsigned __int16 *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 80);
  signed int v7 = *(_DWORD *)(*(void *)(a1 + 72) + 56);
  int v8 = v1 + v7;
  uint64_t v9 = 79006;
  for (uint64_t i = v4 + v6 + 1; ; i += 2)
  {
    unsigned int v11 = __rev16(*(unsigned __int16 *)(i - 1));
    if (v11 < v5 || (int)v11 > v8) {
      break;
    }
    if ((int)(v11 + (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 120))(a1, v6 + v11)) > v7)
    {
      uint64_t v9 = 79011;
      break;
    }
    if (++v3 >= (unint64_t)*(unsigned __int16 *)(a1 + 24)) {
      return 0;
    }
  }

  return sub_1B0D11B5C(v9, a1);
}

uint64_t sub_1B0D11D80(uint64_t a1, char *a2)
{
  unsigned int v2 = *a2;
  uint64_t v3 = a2;
  if (*a2 < 0)
  {
    uint64_t v3 = a2 + 1;
    int v4 = a2[1] & 0x7F | ((v2 & 0x7F) << 7);
    if ((a2[1] & 0x80) == 0)
    {
LABEL_3:
      unsigned int v2 = v4;
      goto LABEL_6;
    }
    uint64_t v3 = a2 + 2;
    unsigned int v2 = a2[2] & 0x7F | (v4 << 7);
    if (a2[2] < 0)
    {
      uint64_t v3 = a2 + 3;
      unsigned int v2 = a2[3] & 0x7F | (v2 << 7);
      if (a2[3] < 0)
      {
        uint64_t v3 = a2 + 4;
        int v4 = a2[4] & 0x7F | (v2 << 7);
        if ((a2[4] & 0x80) == 0) {
          goto LABEL_3;
        }
        uint64_t v3 = a2 + 5;
        unsigned int v2 = a2[5] & 0x7F | (v4 << 7);
        if (a2[5] < 0)
        {
          uint64_t v3 = a2 + 6;
          int v4 = a2[6] & 0x7F | (v2 << 7);
          if ((a2[6] & 0x80) == 0) {
            goto LABEL_3;
          }
          uint64_t v3 = a2 + 7;
          unsigned int v2 = a2[7] & 0x7F | (v4 << 7);
          if (a2[7] < 0)
          {
            uint64_t v3 = a2 + 8;
            int v4 = a2[8] & 0x7F | (v2 << 7);
            goto LABEL_3;
          }
        }
      }
    }
  }
LABEL_6:
  if (v3[1] < 0)
  {
    if (v3[2] < 0)
    {
      if (v3[3] < 0)
      {
        if (v3[4] < 0)
        {
          if (v3[5] < 0)
          {
            if (v3[6] < 0)
            {
              if (v3[7] < 0)
              {
                int v6 = 9;
                if (v3[8] < 0) {
                  int v6 = 10;
                }
                int v5 = v3 + v6;
              }
              else
              {
                int v5 = v3 + 8;
              }
            }
            else
            {
              int v5 = v3 + 7;
            }
          }
          else
          {
            int v5 = v3 + 6;
          }
        }
        else
        {
          int v5 = v3 + 5;
        }
      }
      else
      {
        int v5 = v3 + 4;
      }
    }
    else
    {
      int v5 = v3 + 3;
    }
  }
  else
  {
    int v5 = v3 + 2;
  }
  unsigned int v7 = *(unsigned __int16 *)(a1 + 14);
  if (v2 <= v7)
  {
    unsigned int v10 = v2 + v5 - a2;
    if (v10 <= 4) {
      LOWORD(v10) = 4;
    }
    return (unsigned __int16)v10;
  }
  else
  {
    unsigned int v8 = (v2 - *(unsigned __int16 *)(a1 + 16)) % (*(_DWORD *)(*(void *)(a1 + 72) + 56) - 4)
       + *(unsigned __int16 *)(a1 + 16);
    if (v8 > v7) {
      LOWORD(v8) = *(_WORD *)(a1 + 16);
    }
    return (unsigned __int16)(v8 + v5 - (_WORD)a2 + 4);
  }
}

uint64_t sub_1B0D11F1C(uint64_t a1, char *a2)
{
  unsigned int v2 = *a2;
  int v3 = (int)a2;
  if (*a2 < 0)
  {
    int v3 = a2 + 1;
    int v4 = a2[1] & 0x7F | ((v2 & 0x7F) << 7);
    if ((a2[1] & 0x80) == 0)
    {
LABEL_3:
      unsigned int v2 = v4;
      goto LABEL_6;
    }
    int v3 = a2 + 2;
    unsigned int v2 = a2[2] & 0x7F | (v4 << 7);
    if (a2[2] < 0)
    {
      int v3 = a2 + 3;
      unsigned int v2 = a2[3] & 0x7F | (v2 << 7);
      if (a2[3] < 0)
      {
        int v3 = a2 + 4;
        int v4 = a2[4] & 0x7F | (v2 << 7);
        if ((a2[4] & 0x80) == 0) {
          goto LABEL_3;
        }
        int v3 = a2 + 5;
        unsigned int v2 = a2[5] & 0x7F | (v4 << 7);
        if (a2[5] < 0)
        {
          int v3 = a2 + 6;
          int v4 = a2[6] & 0x7F | (v2 << 7);
          if ((a2[6] & 0x80) == 0) {
            goto LABEL_3;
          }
          int v3 = a2 + 7;
          unsigned int v2 = a2[7] & 0x7F | (v4 << 7);
          if (a2[7] < 0)
          {
            int v3 = a2 + 8;
            int v4 = a2[8] & 0x7F | (v2 << 7);
            goto LABEL_3;
          }
        }
      }
    }
  }
LABEL_6:
  int v5 = v3 + 1;
  unsigned int v6 = *(unsigned __int16 *)(a1 + 14);
  if (v2 <= v6)
  {
    unsigned int v9 = v2 + v5 - a2;
    if (v9 <= 4) {
      LOWORD(v9) = 4;
    }
    return (unsigned __int16)v9;
  }
  else
  {
    unsigned int v7 = (v2 - *(unsigned __int16 *)(a1 + 16)) % (*(_DWORD *)(*(void *)(a1 + 72) + 56) - 4)
       + *(unsigned __int16 *)(a1 + 16);
    if (v7 > v6) {
      LOWORD(v7) = *(_WORD *)(a1 + 16);
    }
    return (unsigned __int16)(v7 + v5 - (_WORD)a2 + 4);
  }
}

uint64_t sub_1B0D12038(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v3 = (char *)(a2 + *(unsigned __int8 *)(result + 10));
  unsigned int v4 = *v3;
  if (*v3 < 0)
  {
    int v5 = (unsigned __int8 *)(v3 + 1);
    int v6 = v3[1] & 0x7F | ((v4 & 0x7F) << 7);
    if ((v3[1] & 0x80) == 0)
    {
LABEL_3:
      int v3 = (char *)v5;
LABEL_4:
      unsigned int v4 = v6;
      goto LABEL_9;
    }
    unsigned int v7 = (unsigned __int8 *)(v3 + 2);
    unsigned int v4 = v3[2] & 0x7F | (v6 << 7);
    if ((v3[2] & 0x80) == 0) {
      goto LABEL_6;
    }
    unsigned int v4 = v3[3] & 0x7F | (v4 << 7);
    if (v3[3] < 0)
    {
      int v5 = (unsigned __int8 *)(v3 + 4);
      int v6 = v3[4] & 0x7F | (v4 << 7);
      if ((v3[4] & 0x80) == 0) {
        goto LABEL_3;
      }
      unsigned int v7 = (unsigned __int8 *)(v3 + 5);
      unsigned int v4 = v3[5] & 0x7F | (v6 << 7);
      if (v3[5] < 0)
      {
        int v5 = (unsigned __int8 *)(v3 + 6);
        int v6 = v3[6] & 0x7F | (v4 << 7);
        if ((v3[6] & 0x80) == 0) {
          goto LABEL_3;
        }
        unsigned int v7 = (unsigned __int8 *)(v3 + 7);
        unsigned int v4 = v3[7] & 0x7F | (v6 << 7);
        if (v3[7] < 0)
        {
          unsigned __int8 v10 = v3[8];
          v3 += 8;
          int v6 = v10 & 0x7F | (v4 << 7);
          goto LABEL_4;
        }
      }
LABEL_6:
      int v3 = (char *)v7;
      goto LABEL_9;
    }
    v3 += 3;
  }
LABEL_9:
  unsigned int v8 = (unsigned __int8 *)(v3 + 1);
  *(_DWORD *)(a3 + 16) = v4;
  *(void *)a3 = v4;
  *(void *)(a3 + 8) = v8;
  if (v4 > *(unsigned __int16 *)(result + 14)) {
    return sub_1B0D121A4(result, a2, a3);
  }
  __int16 v9 = v4 + (_WORD)v8 - a2;
  if ((v9 & 0xFFFC) == 0) {
    __int16 v9 = 4;
  }
  *(_WORD *)(a3 + 22) = v9;
  *(_WORD *)(a3 + 20) = v4;
  return result;
}

uint64_t sub_1B0D1213C(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = 4;
  do
  {
    unsigned __int16 v3 = v2 + 1;
    if (v2 > 0xB) {
      break;
    }
    int v4 = *(char *)(a2 + v2++);
  }
  while (v4 < 0);
  return v3;
}

uint64_t sub_1B0D12160(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_1B0CAD43C((char *)(a2 + 4), (unint64_t *)a3);
  *(_WORD *)(a3 + 22) = (result + 4);
  *(_DWORD *)(a3 + 16) = 0;
  *(_WORD *)(a3 + 20) = 0;
  *(void *)(a3 + 8) = 0;
  return result;
}

uint64_t sub_1B0D121A4(uint64_t result, __int16 a2, uint64_t a3)
{
  int v3 = *(unsigned __int16 *)(result + 16);
  if ((int)((*(_DWORD *)(a3 + 16) - v3) % (*(_DWORD *)(*(void *)(result + 72) + 56) - 4) + v3) <= *(unsigned __int16 *)(result + 14)) {
    LOWORD(v3) = (*(_DWORD *)(a3 + 16) - v3) % (*(_DWORD *)(*(void *)(result + 72) + 56) - 4) + v3;
  }
  *(_WORD *)(a3 + 20) = v3;
  *(_WORD *)(a3 + 22) = *(_WORD *)(a3 + 8) + v3 - a2 + 4;
  return result;
}

uint64_t sub_1B0D121F0(int a1)
{
  if (SHIDWORD(xmmword_1E9B521C0) < a1) {
    goto LABEL_12;
  }
  if (*((void *)&xmmword_1E9B521E0 + 1)) {
    xmmword_1EB21CA40(*((void *)&xmmword_1E9B521E0 + 1));
  }
  uint64_t v2 = qword_1E9B521F0;
  if (qword_1E9B521F0)
  {
    qword_1E9B521F0 = *(void *)qword_1E9B521F0;
    BOOL v3 = dword_1E9B521F8-- <= dword_1E9B521D4;
    dword_1E9B521FC = v3;
    if (qword_1EB220190 < a1) {
      qword_1EB220190 = a1;
    }
    uint64_t v4 = qword_1EB220110;
    uint64_t v5 = ++qword_1EB220110;
    if (v4 >= qword_1EB220160) {
      qword_1EB220160 = v5;
    }
  }
  if (*((void *)&xmmword_1E9B521E0 + 1)) {
    xmmword_1EB21CA50(*((void *)&xmmword_1E9B521E0 + 1));
  }
  if (!v2)
  {
LABEL_12:
    uint64_t v6 = sub_1B0C7FC94(a1);
    uint64_t v2 = v6;
    if (v6)
    {
      int v7 = off_1EB21C9F8(v6);
      if (*((void *)&xmmword_1E9B521E0 + 1)) {
        xmmword_1EB21CA40(*((void *)&xmmword_1E9B521E0 + 1));
      }
      if (qword_1EB220190 < a1) {
        qword_1EB220190 = a1;
      }
      uint64_t v8 = qword_1EB220118 + v7;
      qword_1EB220118 = v8;
      if (v8 > qword_1EB220168) {
        qword_1EB220168 = v8;
      }
      if (*((void *)&xmmword_1E9B521E0 + 1)) {
        xmmword_1EB21CA50(*((void *)&xmmword_1E9B521E0 + 1));
      }
    }
  }
  return v2;
}

uint64_t sub_1B0D12364(uint64_t a1)
{
  uint64_t result = 0;
  int v5 = 0;
  if (!*(unsigned char *)(a1 + 16))
  {
    if (*(_DWORD *)(a1 + 32)
      && (uint64_t v3 = *(void *)(a1 + 72), *(void *)v3)
      && (LODWORD(result) = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)v3 + 80))(v3, 20, &v5),
          result != 12))
    {
      if (v5) {
        BOOL v4 = result == 0;
      }
      else {
        BOOL v4 = 0;
      }
      if (v4) {
        return 1032;
      }
      else {
        return result;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1B0D123DC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 11)
    || (uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 80) + 40))(*(void *)(a1 + 80), 2),
        !result))
  {
    uint64_t v2 = *(uint64_t (**)(void))(**(void **)(a1 + 80) + 48);
    return v2();
  }
  return result;
}

const char *sub_1B0D12448()
{
  uint64_t result = getenv("SQLITE_MIN_CACHE_SIZE");
  if (result) {
    uint64_t result = (const char *)atoi(result);
  }
  dword_1EB220318 = (int)result;
  return result;
}

uint64_t sub_1B0D12478(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t result = *(void *)(v2 + 88);
  if (!result) {
    goto LABEL_17;
  }
  uint64_t result = ((uint64_t (*)(void))*(&xmmword_1EB21CA40 + 1))();
  if (!result)
  {
    uint64_t v2 = *(void *)(v1 + 8);
LABEL_17:
    *(void *)(v2 + 8) = *(void *)v1;
    *(unsigned char *)(v1 + 18) = 1;
    return result;
  }
  for (uint64_t i = *(void *)(v1 + 32); i; uint64_t i = *(void *)(i + 32))
  {
    if (*(unsigned char *)(i + 18)) {
      sub_1B0D12558(i);
    }
  }
  uint64_t v5 = *(void *)(v1 + 8);
  uint64_t result = *(void *)(v5 + 88);
  if (result)
  {
    uint64_t result = xmmword_1EB21CA40(result);
    uint64_t v5 = *(void *)(v1 + 8);
  }
  *(void *)(v5 + 8) = *(void *)v1;
LABEL_11:
  *(unsigned char *)(v1 + 18) = 1;
  while (1)
  {
    uint64_t v1 = *(void *)(v1 + 32);
    if (!v1) {
      return result;
    }
    if (*(_DWORD *)(v1 + 20))
    {
      uint64_t v6 = *(void *)(v1 + 8);
      uint64_t result = *(void *)(v6 + 88);
      if (result)
      {
        uint64_t result = xmmword_1EB21CA40(result);
        uint64_t v6 = *(void *)(v1 + 8);
      }
      *(void *)(v6 + 8) = *(void *)v1;
      goto LABEL_11;
    }
  }
}

uint64_t sub_1B0D12558(uint64_t a1)
{
  uint64_t result = *(void *)(*(void *)(a1 + 8) + 88);
  if (result) {
    uint64_t result = xmmword_1EB21CA50(result);
  }
  *(unsigned char *)(a1 + 18) = 0;
  return result;
}

uint64_t sub_1B0D12594(uint64_t a1, int a2, _DWORD *a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)v6;
  if (*(unsigned char *)(a1 + 17))
  {
    ++*(_DWORD *)(a1 + 20);
    if (!*(unsigned char *)(a1 + 18)) {
      sub_1B0D12478(a1);
    }
  }
  int v8 = *(unsigned __int8 *)(a1 + 16);
  if (v8 == 2 || !a2 && v8 == 1) {
    goto LABEL_7;
  }
  if ((*(unsigned char *)(*(void *)a1 + 51) & 2) != 0 && !*(unsigned char *)(v7 + 18)) {
    *(_WORD *)(v6 + 40) &= ~1u;
  }
  __int16 v13 = *(_WORD *)(v6 + 40);
  if (a2 && (v13 & 1) != 0)
  {
    uint64_t v10 = 8;
    goto LABEL_14;
  }
  if (!a2)
  {
    if ((v13 & 0x80) == 0) {
      goto LABEL_35;
    }
    goto LABEL_33;
  }
  if ((v13 & 0x80) != 0 || *(unsigned char *)(v6 + 36) == 2)
  {
LABEL_33:
    uint64_t v15 = *(void **)(v6 + 128);
    goto LABEL_34;
  }
  if (a2 < 2) {
    goto LABEL_35;
  }
  uint64_t v14 = *(void *)(v6 + 120);
  if (!v14) {
    goto LABEL_35;
  }
  while (1)
  {
    uint64_t v15 = *(void **)v14;
    if (*(void *)v14 != a1) {
      break;
    }
    uint64_t v14 = *(void *)(v14 + 16);
    if (!v14) {
      goto LABEL_35;
    }
  }
LABEL_34:
  if (*v15) {
    goto LABEL_154;
  }
LABEL_35:
  if (*(unsigned char *)(a1 + 17))
  {
    uint64_t v16 = *(void *)(a1 + 8);
    if (*(void *)(v16 + 128) == a1 || (*(_WORD *)(v16 + 40) & 0x40) == 0)
    {
      uint64_t v17 = *(void *)(v16 + 120);
      if (!v17) {
        goto LABEL_39;
      }
      while (*(void *)v17 == a1 || *(_DWORD *)(v17 + 8) != 1 || *(unsigned char *)(v17 + 12) == 1)
      {
        uint64_t v17 = *(void *)(v17 + 16);
        if (!v17) {
          goto LABEL_39;
        }
      }
    }
LABEL_154:
    uint64_t v10 = 262;
    goto LABEL_14;
  }
LABEL_39:
  uint64_t v53 = a3;
  *(_WORD *)(v6 + 40) = v13 & 0xFFEF;
  if (!*(_DWORD *)(v6 + 64)) {
    *(_WORD *)(v6 + 40) = v13 | 0x10;
  }
  unsigned int v18 = 0;
  uint64_t v54 = v7;
  long long v55 = (_DWORD *)(v6 + 52);
  uint64_t v19 = *(void *)(v7 + 344);
  if (v19) {
    goto LABEL_42;
  }
  while (2)
  {
    uint64_t v21 = *(void *)(v6 + 24);
    if (a2 && !v21)
    {
LABEL_61:
      unsigned int v18 = 0;
LABEL_62:
      uint64_t v21 = *(void *)(v6 + 24);
    }
LABEL_63:
    if (v21) {
      goto LABEL_64;
    }
    while (1)
    {
      while (1)
      {
        unsigned int v26 = sub_1B0C8BBCC(*(void *)v6);
        if (v26 || (v56 = 0, (unsigned int v26 = (*(uint64_t (**)(void))(*(void *)v6 + 288))()) != 0))
        {
LABEL_114:
          unsigned int v18 = v26;
          goto LABEL_124;
        }
        uint64_t v27 = *(void *)(v56 + 16);
        if (*(_DWORD *)(v27 + 4) == 1)
        {
          uint64_t v28 = *(void *)(v27 + 80);
        }
        else
        {
          uint64_t v28 = *(void *)(v56 + 8);
          *(void *)(v27 + 112) = v56;
          *(void *)(v27 + 72) = v6;
          *(void *)(v27 + 80) = v28;
          *(_DWORD *)(v27 + 4) = 1;
          *(unsigned char *)(v27 + 9) = 100;
        }
        unsigned int v29 = bswap32(*(_DWORD *)(v28 + 28));
        uint64_t v30 = *(void *)v6;
        unsigned int v31 = *(_DWORD *)(*(void *)v6 + 32);
        if (!v29 || *(_DWORD *)(v28 + 24) != *(_DWORD *)(v28 + 92)) {
          unsigned int v29 = *(_DWORD *)(*(void *)v6 + 32);
        }
        if ((*(unsigned char *)(*(void *)(v6 + 8) + 51) & 2) != 0 || !v29)
        {
          unsigned int v29 = 0;
          unsigned int v39 = *(_DWORD *)(v6 + 56);
          goto LABEL_145;
        }
        if (*(void *)v28 != 0x66206574694C5153 || *(void *)(v28 + 8) != 0x332074616D726FLL) {
          goto LABEL_122;
        }
        if (*(unsigned __int8 *)(v28 + 18) >= 3u) {
          *(_WORD *)(v6 + 40) |= 1u;
        }
        unsigned int v33 = *(unsigned __int8 *)(v28 + 19);
        if (v33 > 2) {
          goto LABEL_122;
        }
        if (v33 != 2 || (*(_WORD *)(v6 + 40) & 0x20) != 0)
        {
          sub_1B0D12E54((void *)v6, 3);
          break;
        }
        LODWORD(v56) = 0;
        unsigned int v34 = sub_1B0C8CB54(v30, &v56);
        if (v34) {
          goto LABEL_149;
        }
        sub_1B0D12E54((void *)v6, 2);
        if (v56) {
          break;
        }
        sub_1B0D05580(*(void *)(v27 + 112));
        uint64_t v7 = v54;
        if (*(void *)(v6 + 24)) {
          goto LABEL_113;
        }
      }
      if (*(_WORD *)(v28 + 21) != 8256 || *(unsigned char *)(v28 + 23) != 32) {
        goto LABEL_122;
      }
      int v36 = (*(unsigned __int8 *)(v28 + 16) << 8) | (*(unsigned __int8 *)(v28 + 17) << 16);
      if ((v36 - 65537) < 0xFFFF0100 || ((v36 - 1) & v36) != 0) {
        goto LABEL_122;
      }
      int v38 = *(unsigned __int8 *)(v28 + 20);
      unsigned int v39 = v36 - v38;
      if (v36 == *v55) {
        break;
      }
      sub_1B0D05580(*(void *)(v27 + 112));
      *(_DWORD *)(v6 + 52) = v36;
      *(_DWORD *)(v6 + 56) = v39;
      *(_WORD *)(v6 + 40) |= 2u;
      uint64_t v40 = *(void *)(v6 + 136);
      uint64_t v7 = v54;
      if (v40)
      {
        *(void *)(v6 + 136) = v40 - 4;
        sub_1B0D10ED8(v40 - 4);
        *(void *)(v6 + 136) = 0;
      }
      unsigned int v26 = sub_1B0C7CE4C(*(void *)v6, v55, v38);
      if (v26) {
        goto LABEL_114;
      }
      if (*(void *)(v6 + 24))
      {
LABEL_113:
        unsigned int v18 = 0;
        goto LABEL_64;
      }
    }
    if (v29 > v31)
    {
      unsigned int v29 = v31;
      if ((*(void *)(*(void *)(v6 + 8) + 48) & 0x10000001) != 1)
      {
        unsigned int v34 = sub_1B0D1045C(80214);
LABEL_149:
        unsigned int v18 = v34;
        goto LABEL_123;
      }
    }
    if (v39 < 0x1E0)
    {
LABEL_122:
      unsigned int v18 = 26;
LABEL_123:
      uint64_t v7 = v54;
      sub_1B0D05580(*(void *)(v27 + 112));
      *(void *)(v6 + 24) = 0;
      goto LABEL_124;
    }
    *(_WORD *)(v6 + 40) |= 2u;
    *(_DWORD *)(v6 + 52) = v36;
    *(_DWORD *)(v6 + 56) = v39;
    *(unsigned char *)(v6 + 33) = bswap32(*(_DWORD *)(v28 + 52)) != 0;
    *(unsigned char *)(v6 + 34) = bswap32(*(_DWORD *)(v28 + 64)) != 0;
LABEL_145:
    uint64_t v7 = v54;
    unsigned int v18 = 0;
    *(_WORD *)(v6 + 46) = v39 - 35;
    *(_WORD *)(v6 + 42) = ((v39 << 6) - 768) / 0xFF - 23;
    unsigned int v48 = (unsigned __int16)(((v39 << 6) - 768) / 0xFF - 23);
    __int16 v49 = (32 * v39 - 384) / 0xFF - 23;
    *(_WORD *)(v6 + 44) = v49;
    *(_WORD *)(v6 + 48) = v49;
    if (v48 >= 0x7F) {
      LOBYTE(v48) = 127;
    }
    *(unsigned char *)(v6 + 37) = v48;
    *(void *)(v6 + 24) = v27;
    *(_DWORD *)(v6 + 64) = v29;
LABEL_64:
    if (!a2 || v18)
    {
LABEL_70:
      if (v18) {
        goto LABEL_124;
      }
    }
    else
    {
      if (*(_WORD *)(v6 + 40))
      {
        unsigned int v18 = 8;
      }
      else
      {
        unsigned int v25 = sub_1B0D05234(v7, a2 > 1, *(unsigned char *)(*(void *)a1 + 102) == 2);
        if (v25 != 517)
        {
          unsigned int v18 = v25;
          if (!v25) {
            unsigned int v18 = sub_1B0CB6D6C(v6);
          }
          goto LABEL_70;
        }
        if (*(unsigned char *)(v6 + 36)) {
          unsigned int v18 = 517;
        }
        else {
          unsigned int v18 = 5;
        }
      }
LABEL_124:
      uint64_t v41 = *(void *)(v7 + 344);
      if (v41 && !*(unsigned char *)(v7 + 8) && *(unsigned char *)(v41 + 64))
      {
        if (!*(unsigned char *)(v41 + 63)) {
          (*(void (**)(void, void, uint64_t, uint64_t))(**(void **)(v41 + 8) + 112))(*(void *)(v41 + 8), 0, 1, 9);
        }
        *(unsigned char *)(v41 + 64) = 0;
      }
      if (!*(unsigned char *)(v6 + 36))
      {
        uint64_t v42 = *(void *)(v6 + 24);
        if (v42)
        {
          *(void *)(v6 + 24) = 0;
          sub_1B0D05580(*(void *)(v42 + 112));
        }
      }
      if (v18 == 5 && !*(unsigned char *)(v6 + 36))
      {
        uint64_t v43 = *(void *)(v6 + 8);
        uint64_t v44 = *(uint64_t (**)(void))(v43 + 664);
        if (v44)
        {
          if ((*(_DWORD *)(v43 + 688) & 0x80000000) == 0)
          {
            *(unsigned char *)(*(void *)(v43 + 680) + 784) = 0;
            int v45 = v44(*(void *)(v43 + 672));
            if (*(uint64_t (**)(uint64_t *, int))(v43 + 664) != sub_1B0CF3B30)
            {
              uint64_t v46 = *(void *)(v43 + 680);
              if (*(unsigned char *)(v46 + 784))
              {
                int v47 = sub_1B0CF3B30((uint64_t *)v46, *(_DWORD *)(v43 + 688));
                if (v45 == 109) {
                  int v45 = v47;
                }
              }
            }
            if (!v45)
            {
              *(_DWORD *)(v43 + 688) = -1;
              break;
            }
            ++*(_DWORD *)(v43 + 688);
            uint64_t v19 = *(void *)(v7 + 344);
            if (!v19) {
              continue;
            }
LABEL_42:
            uint64_t v20 = *(void *)a1;
            *(void *)(v19 + 160) = *(void *)a1;
            uint64_t v21 = *(void *)(v6 + 24);
            if (!a2 || v21) {
              goto LABEL_63;
            }
            unsigned int v18 = 0;
            if (!*(unsigned char *)(v7 + 8) && v20)
            {
              LODWORD(v56) = *(_DWORD *)(v20 + 772);
              if (!v56) {
                goto LABEL_61;
              }
              uint64_t v22 = *(void *)(v19 + 8);
              if (!*(void *)v22
                || (*(unsigned int (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v22 + 80))(v22, 34, &v56))
              {
                goto LABEL_61;
              }
              if (*(unsigned char *)(v19 + 63)
                || (unsigned int v18 = (*(uint64_t (**)(void, void, uint64_t, uint64_t))(**(void **)(v19 + 8) + 112))(*(void *)(v19 + 8), 0, 1, 10)) == 0)
              {
                unsigned int v18 = 0;
                *(unsigned char *)(v19 + 64) = 1;
              }
              LODWORD(v56) = 0;
              uint64_t v23 = *(void *)(v19 + 8);
              if (*(void *)v23) {
                (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v23 + 80))(v23, 34, &v56);
              }
              if (v18 != 5 && v18 != 0) {
                break;
              }
            }
            goto LABEL_62;
          }
        }
      }
    }
    break;
  }
  uint64_t v50 = *(void *)(v7 + 344);
  if (v50) {
    *(void *)(v50 + 160) = 0;
  }
  if (v18 == 773) {
    uint64_t v10 = 5;
  }
  else {
    uint64_t v10 = v18;
  }
  if (v10) {
    goto LABEL_14;
  }
  if (!*(unsigned char *)(a1 + 16))
  {
    ++*(_DWORD *)(v6 + 60);
    if (*(unsigned char *)(a1 + 17))
    {
      *(unsigned char *)(a1 + 60) = 1;
      *(void *)(a1 + 64) = *(void *)(v6 + 120);
      *(void *)(v6 + 120) = a1 + 48;
    }
  }
  if (a2) {
    unsigned int v51 = 2;
  }
  else {
    unsigned int v51 = 1;
  }
  *(unsigned char *)(a1 + 16) = v51;
  a3 = v53;
  if (v51 > *(unsigned __int8 *)(v6 + 36)) {
    *(unsigned char *)(v6 + 36) = v51;
  }
  if (!a2
    || (uint64_t v52 = *(void *)(v6 + 24),
        *(void *)(v6 + 128) = a1,
        *(_WORD *)(v6 + 40) = *(_WORD *)(v6 + 40) & 0xFFBF | ((a2 > 1) << 6),
        *(_DWORD *)(v6 + 64) == bswap32(*(_DWORD *)(*(void *)(v52 + 80) + 28))))
  {
LABEL_7:
    if (a3) {
      *a3 = bswap32(*(_DWORD *)(*(void *)(*(void *)(v6 + 24) + 80) + 40));
    }
    if (a2 && (int v9 = *(_DWORD *)(*(void *)a1 + 788), *(_DWORD *)(v7 + 128) < v9) && *(unsigned char *)(v7 + 10)) {
      uint64_t v10 = sub_1B0D13268(v7, v9);
    }
    else {
      uint64_t v10 = 0;
    }
    goto LABEL_14;
  }
  uint64_t v10 = sub_1B0CBD790(*(void *)(v52 + 112));
  if (!v10)
  {
    *(_DWORD *)(*(void *)(v52 + 80) + 28) = bswap32(*(_DWORD *)(v6 + 64));
    a3 = v53;
    goto LABEL_7;
  }
LABEL_14:
  if (*(unsigned char *)(a1 + 17))
  {
    int v11 = *(_DWORD *)(a1 + 20) - 1;
    *(_DWORD *)(a1 + 20) = v11;
    if (!v11) {
      sub_1B0D12558(a1);
    }
  }
  return v10;
}

uint64_t sub_1B0D12DCC(uint64_t a1, int a2, void *a3)
{
  uint64_t v10 = 0;
  uint64_t result = (*(uint64_t (**)(void))(*(void *)a1 + 288))();
  if (!result)
  {
    uint64_t v7 = *(void *)(v10 + 16);
    if (*(_DWORD *)(v7 + 4) != a2)
    {
      uint64_t v8 = *(void *)(v10 + 8);
      *(void *)(v7 + 112) = v10;
      *(void *)(v7 + 72) = a1;
      *(void *)(v7 + 80) = v8;
      *(_DWORD *)(v7 + 4) = a2;
      if (a2 == 1) {
        char v9 = 100;
      }
      else {
        char v9 = 0;
      }
      *(unsigned char *)(v7 + 9) = v9;
    }
    *a3 = v7;
  }
  return result;
}

void *sub_1B0D12E54(void *result, int a2)
{
  uint64_t v2 = result[1];
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 32);
    if (v3)
    {
      for (uint64_t i = 0; ; i += 32)
      {
        uint64_t v5 = *(void *)(v3 + i + 8);
        if (v5)
        {
          if (*(void **)(v5 + 8) == result) {
            break;
          }
        }
      }
      uint64_t v6 = v3 + i;
      if (!*(unsigned char *)(v6 + 17) && i != 32 && *(unsigned __int8 *)(v6 + 16) != a2)
      {
        *(unsigned char *)(v6 + 16) = a2;
        uint64_t v7 = *result;
        int v8 = *(_DWORD *)(v2 + 48) & 0x38 | a2;
        if (*(unsigned char *)(*result + 16))
        {
          BOOL v9 = 0;
          *(_WORD *)(v7 + 11) = 1;
          *(unsigned char *)(v7 + 13) = 0;
        }
        else
        {
          BOOL v9 = (v8 & 7u) > 2;
          *(unsigned char *)(v7 + 12) = v9;
          *(unsigned char *)(v7 + 13) = (v8 & 7) == 4;
          *(unsigned char *)(v7 + 11) = (v8 & 7) == 1;
          if ((v8 & 7) != 1)
          {
            int v11 = 0;
            if ((v8 & 8) != 0) {
              char v10 = 3;
            }
            else {
              char v10 = 2;
            }
            *(unsigned char *)(v7 + 14) = v10;
            goto LABEL_15;
          }
        }
        char v10 = 0;
        *(unsigned char *)(v7 + 14) = 0;
        int v11 = 1;
LABEL_15:
        char v12 = 4 * v10;
        if (v9) {
          char v13 = v10;
        }
        else {
          char v13 = 0;
        }
        if ((v8 & 0x10) != 0) {
          int v14 = v11;
        }
        else {
          int v14 = 1;
        }
        if (v14) {
          char v15 = v12;
        }
        else {
          char v15 = 12;
        }
        *(unsigned char *)(v7 + 15) = v15 | v13;
        *(unsigned char *)(v7 + 25) = *(unsigned char *)(v7 + 25) & 0xFE | ((v8 & 0x20) == 0);
      }
    }
  }
  return result;
}

uint64_t sub_1B0D12F74(uint64_t *a1)
{
  int v2 = *((unsigned __int8 *)a1 + 8);
  if (*((unsigned char *)a1 + 8))
  {
    uint64_t v3 = *((unsigned __int8 *)a1 + 22);
    if (v3 < 4 || v3 == 5)
    {
      if (!*((unsigned char *)a1 + 17))
      {
        uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1[9] + 56))(a1[9], 4);
        if (v5)
        {
          uint64_t v6 = v5;
          uint64_t v7 = a1[9];
          if (*(void *)v7)
          {
            if (!*((unsigned char *)a1 + 17)) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 64))(v7, v3);
            }
            if (*((unsigned char *)a1 + 22) != 5) {
              *((unsigned char *)a1 + 22) = v3;
            }
          }
          *((unsigned char *)a1 + 23) = *((unsigned char *)a1 + 16);
          goto LABEL_38;
        }
        int v2 = *((unsigned __int8 *)a1 + 8);
      }
      *((unsigned char *)a1 + 22) = 4;
    }
    else
    {
      int v2 = 1;
    }
  }
  uint64_t v8 = *a1;
  uint64_t v9 = a1[9];
  uint64_t v10 = a1[44];
  uint64_t v11 = a1[26];
  int v12 = *((_DWORD *)a1 + 45);
  a1[43] = 0;
  uint64_t v13 = *(int *)(v8 + 4) + 168;
  int v14 = (void *)sub_1B0C7FC94(v13);
  if (!v14)
  {
    uint64_t v6 = 7;
    goto LABEL_38;
  }
  uint64_t v15 = (uint64_t)v14;
  bzero(v14, v13);
  *(void *)(v15 + 8) = v9;
  *(void *)(v15 + 16) = v15 + 168;
  *(void *)uint64_t v15 = v8;
  *(_WORD *)(v15 + 60) = -1;
  *(void *)(v15 + 32) = v11;
  *(void *)(v15 + 128) = v10;
  *(_WORD *)(v15 + 68) = 257;
  *(unsigned char *)(v15 + 63) = 2 * (v2 != 0);
  if (v12) {
    char v16 = 0;
  }
  else {
    char v16 = 6;
  }
  char v25 = v16 | v12 & 1;
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 40))(v8, v10);
  if (v17)
  {
    uint64_t v6 = v17;
    sub_1B0D108CC(v15);
    uint64_t v18 = *(void *)(v15 + 16);
    if (*(void *)v18)
    {
      (*(void (**)(void))(*(void *)v18 + 8))(*(void *)(v15 + 16));
      *(void *)uint64_t v18 = 0;
    }
    uint64_t v19 = (void (**)(uint64_t))&off_1EB21C9E8;
    if (!dword_1EB21C9C0) {
      goto LABEL_28;
    }
    if ((void)xmmword_1EB2201B0) {
      xmmword_1EB21CA40(xmmword_1EB2201B0);
    }
    qword_1EB220108 -= (int)off_1EB21C9F8(v15);
    --qword_1EB220150;
    off_1EB21C9E8(v15);
    uint64_t v15 = xmmword_1EB2201B0;
    if ((void)xmmword_1EB2201B0)
    {
      uint64_t v19 = (void (**)(uint64_t))&xmmword_1EB21CA50;
LABEL_28:
      (*v19)(v15);
    }
  }
  else
  {
    if (v25) {
      *(unsigned char *)(v15 + 66) = 1;
    }
    if (*(void *)v9)
    {
      __int16 v20 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 96))(v9);
      if ((v20 & 0x400) != 0) {
        *(unsigned char *)(v15 + 68) = 0;
      }
      if ((v20 & 0x1000) != 0) {
        *(unsigned char *)(v15 + 69) = 0;
      }
    }
    uint64_t v6 = 0;
    a1[43] = v15;
  }
LABEL_38:
  uint64_t v21 = *(void *)a1[9];
  if (v21 && *(int *)v21 >= 3)
  {
    uint64_t v22 = a1[20];
    *((unsigned char *)a1 + 27) = v22 > 0;
    uint64_t v23 = sub_1B0D11088;
    if (!*((_DWORD *)a1 + 12))
    {
      if (v22 < 1 || (uint64_t v23 = sub_1B0D11094, a1[37])) {
        uint64_t v23 = sub_1B0D112F8;
      }
    }
    a1[36] = (uint64_t)v23;
    (*(void (**)(void))(v21 + 80))();
  }
  return v6;
}

uint64_t sub_1B0D13268(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)(a1 + 128);
  uint64_t v5 = sub_1B0C8E1B8(*(void *)(a1 + 120), 56 * a2);
  if (v5)
  {
    uint64_t v6 = v5;
    bzero((void *)(v5 + 56 * v4), 56 * (a2 - v4));
    *(void *)(a1 + 120) = v6;
    if (a2 <= v4) {
      return 0;
    }
    for (uint64_t i = (_DWORD *)(v6 + 56 * v4 + 24); ; i += 14)
    {
      int v8 = *(_DWORD *)(a1 + 32);
      *uint64_t i = v8;
      if (!**(void **)(a1 + 80) || (uint64_t v9 = *(void *)(a1 + 96), v9 <= 0)) {
        uint64_t v9 = *(unsigned int *)(a1 + 184);
      }
      *((void *)i - 3) = v9;
      i[1] = *(_DWORD *)(a1 + 60);
      uint64_t v10 = (_OWORD *)sub_1B0C7FC94(512);
      if (!v10) {
        break;
      }
      v10[30] = 0u;
      v10[31] = 0u;
      v10[28] = 0u;
      v10[29] = 0u;
      v10[26] = 0u;
      v10[27] = 0u;
      v10[24] = 0u;
      v10[25] = 0u;
      v10[22] = 0u;
      v10[23] = 0u;
      v10[20] = 0u;
      v10[21] = 0u;
      v10[18] = 0u;
      v10[19] = 0u;
      v10[16] = 0u;
      v10[17] = 0u;
      v10[14] = 0u;
      v10[15] = 0u;
      v10[12] = 0u;
      v10[13] = 0u;
      v10[10] = 0u;
      v10[11] = 0u;
      v10[8] = 0u;
      v10[9] = 0u;
      v10[6] = 0u;
      v10[7] = 0u;
      v10[4] = 0u;
      v10[5] = 0u;
      v10[2] = 0u;
      void v10[3] = 0u;
      *uint64_t v10 = 0u;
      v10[1] = 0u;
      *(_DWORD *)uint64_t v10 = v8;
      *((void *)i - 1) = v10;
      i[2] = 1;
      uint64_t v11 = *(_DWORD **)(a1 + 344);
      if (v11)
      {
        i[3] = v11[22];
        i[4] = v11[24];
        i[5] = v11[25];
        i[6] = v11[34];
      }
      *(_DWORD *)(a1 + 128) = ++v4;
      if (a2 == v4) {
        return 0;
      }
    }
    *((void *)i - 1) = 0;
    i[2] = 1;
  }
  return 7;
}

uint64_t sub_1B0D133D0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(unsigned int *)(v1 + 184) / *(uint64_t *)(v1 + 200);
  *(unsigned char *)(v1 + 25) |= 4u;
  unsigned int v3 = *(_DWORD *)(a1 + 48);
  int v4 = (v3 - 1) & -(int)v2;
  unsigned int v5 = *(_DWORD *)(v1 + 32);
  if (v4 + (int)v2 > v5) {
    LODWORD(v2) = v5 - v4;
  }
  if (v3 > v5) {
    int v6 = v3 - v4;
  }
  else {
    int v6 = v2;
  }
  if (v6 < 1)
  {
    uint64_t v15 = 0;
    goto LABEL_56;
  }
  int v8 = 0;
  int v9 = 0;
  uint64_t v10 = (v4 + 1);
  do
  {
    uint64_t v35 = 0;
    if (v9 + v10 == *(_DWORD *)(a1 + 48)) {
      goto LABEL_13;
    }
    uint64_t v11 = *(_DWORD **)(v1 + 64);
    if (!v11) {
      goto LABEL_13;
    }
    unsigned int v12 = v9 + v4;
    if ((v9 + v4) >= *v11) {
      goto LABEL_13;
    }
    while (1)
    {
      unsigned int v13 = v11[2];
      if (!v13) {
        break;
      }
      unsigned int v14 = v12 / v13;
      v12 %= v13;
      uint64_t v11 = *(_DWORD **)&v11[2 * v14 + 4];
      if (!v11) {
        goto LABEL_13;
      }
    }
    if (*v11 >= 0xF81u)
    {
      unsigned int v23 = v12 % 0x7C;
      uint64_t v24 = v11 + 4;
      int v25 = v24[v12 % 0x7C];
      if (!v25) {
        goto LABEL_13;
      }
      unsigned int v26 = v12 + 1;
      while (v25 != v26)
      {
        if (v23 == 123) {
          unsigned int v23 = 0;
        }
        else {
          ++v23;
        }
        int v25 = v24[v23];
        if (!v25) {
          goto LABEL_13;
        }
      }
LABEL_26:
      uint64_t v20 = ((uint64_t (*)(void, void, void))*(&xmmword_1EB21CA98 + 1))(*(void *)(*(void *)(v1 + 336) + 72), (v9 + v10), 0);
      if (v20)
      {
        uint64_t v21 = (uint64_t *)v20;
        uint64_t v22 = *(void *)(v20 + 8);
        if (*(void *)v22)
        {
          ++*(void *)(*(void *)(v1 + 336) + 24);
          ++*(void *)(v22 + 56);
          uint64_t v35 = v22;
LABEL_38:
          __int16 v27 = *(_WORD *)(v22 + 52);
          if ((v27 & 8) != 0) {
            int v8 = 1;
          }
          if ((v27 & 0x20) != 0)
          {
            uint64_t v28 = *(void *)(v22 + 40);
            --*(_DWORD *)(v28 + 152);
            *(void *)(v22 + 32) = *(void *)(v28 + 168);
            *(void *)(v28 + 168) = v22;
            (*(void (**)(void, void, void))(**(void **)(v28 + 72) + 144))(*(void *)(v28 + 72), *(void *)(v28 + 200) * (*(_DWORD *)(v22 + 48) - 1), *(void *)(v22 + 8));
          }
          else
          {
            sub_1B0D0E3E8(v22);
          }
          goto LABEL_14;
        }
        uint64_t v22 = sub_1B0D1171C(*(void *)(v1 + 336), v9 + (int)v10, v21);
        uint64_t v35 = v22;
        if (v22) {
          goto LABEL_38;
        }
      }
LABEL_14:
      uint64_t v15 = 0;
      goto LABEL_21;
    }
    if ((*((unsigned __int8 *)v11 + ((unint64_t)v12 >> 3) + 16) >> (v12 & 7))) {
      goto LABEL_26;
    }
LABEL_13:
    if (v9 + v10 == *(_DWORD *)(v1 + 192)) {
      goto LABEL_14;
    }
    uint64_t v16 = (*(uint64_t (**)(uint64_t, void, uint64_t *, void))(v1 + 288))(v1, (v9 + v10), &v35, 0);
    if (v16)
    {
      uint64_t v15 = v16;
      goto LABEL_56;
    }
    uint64_t v15 = sub_1B0CBD7E0(v35);
    uint64_t v17 = v35;
    __int16 v18 = *(_WORD *)(v35 + 52);
    if ((v18 & 8) != 0) {
      int v8 = 1;
    }
    if ((v18 & 0x20) != 0)
    {
      uint64_t v19 = *(void *)(v35 + 40);
      --*(_DWORD *)(v19 + 152);
      *(void *)(v17 + 32) = *(void *)(v19 + 168);
      *(void *)(v19 + 168) = v17;
      (*(void (**)(void, void, void))(**(void **)(v19 + 72) + 144))(*(void *)(v19 + 72), *(void *)(v19 + 200) * (*(_DWORD *)(v17 + 48) - 1), *(void *)(v17 + 8));
    }
    else
    {
      sub_1B0D0E3E8(v35);
    }
LABEL_21:
    ++v9;
  }
  while (v9 < v6 && !v15);
  if (!v15 && v8)
  {
    do
    {
      uint64_t v29 = ((uint64_t (*)(void, uint64_t, void))*(&xmmword_1EB21CA98 + 1))(*(void *)(*(void *)(v1 + 336) + 72), v10, 0);
      if (v29)
      {
        uint64_t v30 = (uint64_t *)v29;
        uint64_t v31 = *(void *)(v29 + 8);
        if (*(void *)v31)
        {
          ++*(void *)(*(void *)(v1 + 336) + 24);
          ++*(void *)(v31 + 56);
LABEL_52:
          __int16 v32 = *(_WORD *)(v31 + 52);
          *(_WORD *)(v31 + 52) = v32 | 8;
          if ((v32 & 0x20) != 0)
          {
            uint64_t v33 = *(void *)(v31 + 40);
            --*(_DWORD *)(v33 + 152);
            *(void *)(v31 + 32) = *(void *)(v33 + 168);
            *(void *)(v33 + 168) = v31;
            (*(void (**)(void, void, void))(**(void **)(v33 + 72) + 144))(*(void *)(v33 + 72), *(void *)(v33 + 200) * (*(_DWORD *)(v31 + 48) - 1), *(void *)(v31 + 8));
          }
          else
          {
            sub_1B0D0E3E8(v31);
          }
          goto LABEL_47;
        }
        uint64_t v31 = sub_1B0D1171C(*(void *)(v1 + 336), v10, v30);
        if (v31) {
          goto LABEL_52;
        }
      }
LABEL_47:
      uint64_t v10 = (v10 + 1);
      --v6;
    }
    while (v6);
  }
LABEL_56:
  *(unsigned char *)(v1 + 25) &= ~4u;
  return v15;
}

uint64_t sub_1B0D13794(uint64_t result)
{
  __int16 v1 = *(_WORD *)(result + 52);
  if ((v1 & 0x11) != 0)
  {
    *(_WORD *)(result + 52) = v1 & 0xFFEF;
    if (v1)
    {
      *(_WORD *)(result + 52) = v1 & 0xFFEF ^ 3;
      uint64_t v2 = *(uint64_t **)(result + 24);
      uint64_t v3 = *v2;
      *(void *)(result + 64) = *v2;
      *(void *)(result + 72) = 0;
      if (v3)
      {
        *(void *)(v3 + 72) = result;
      }
      else
      {
        v2[1] = result;
        if (*((unsigned char *)v2 + 48)) {
          *((unsigned char *)v2 + 49) = 1;
        }
      }
      *uint64_t v2 = result;
      if ((v1 & 8) == 0 && !v2[2]) {
        v2[2] = result;
      }
    }
  }
  return result;
}

uint64_t sub_1B0D137FC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(v2 + 96);
  int v4 = *(uint64_t (**)(void, void, void, uint64_t))(v2 + 296);
  if (v4)
  {
    uint64_t v5 = 7;
    uint64_t v6 = v4(*(void *)(v2 + 320), *(void *)(a1 + 8), *(unsigned int *)(a1 + 48), 7);
    if (!v6) {
      return v5;
    }
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 8);
  }
  unsigned int v7 = *(_DWORD *)(v2 + 56);
  unint64_t v8 = (*(_DWORD *)(v2 + 200) - 200);
  if ((int)v8 >= 1)
  {
    unint64_t v9 = v8 - 200;
    if (v8 < 0xC8) {
      unint64_t v9 = 0;
    }
    if (v8 < 0xC9)
    {
      unint64_t v10 = (*(_DWORD *)(v2 + 200) - 200);
      do
      {
LABEL_13:
        v7 += *(unsigned __int8 *)(v6 + v10);
        BOOL v15 = v10 > 0xC8;
        v10 -= 200;
      }
      while (v15);
      goto LABEL_14;
    }
    int v11 = 0;
    uint64_t v12 = (((v9 + 199) * (unsigned __int128)0x147AE147AE147AFuLL) >> 64) + 1;
    unint64_t v10 = v8 - 200 * (v12 & 0x7FFFFFE);
    unsigned int v13 = (unsigned __int8 *)(v6 + v8);
    uint64_t v14 = v12 & 0x7FFFFFE;
    do
    {
      v7 += *v13;
      v11 += *(v13 - 200);
      v13 -= 400;
      v14 -= 2;
    }
    while (v14);
    v7 += v11;
    if (v12 != (v12 & 0x7FFFFFE)) {
      goto LABEL_13;
    }
  }
LABEL_14:
  *(_WORD *)(a1 + 52) |= 8u;
  uint64_t v16 = *(void *)(v2 + 80);
  unsigned int v28 = bswap32(*(_DWORD *)(a1 + 48));
  uint64_t v5 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(*(void *)v16 + 24))(v16, &v28, 4, v3);
  if (!v5)
  {
    uint64_t v17 = v3 + 4;
    uint64_t v5 = (*(uint64_t (**)(void, uint64_t, void, uint64_t))(**(void **)(v2 + 80) + 24))(*(void *)(v2 + 80), v6, *(unsigned int *)(v2 + 200), v17);
    if (!v5)
    {
      uint64_t v18 = *(void *)(v2 + 80);
      uint64_t v19 = v17 + *(void *)(v2 + 200);
      unsigned int v29 = bswap32(v7);
      uint64_t v5 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(*(void *)v18 + 24))(v18, &v29, 4, v19);
      if (!v5)
      {
        *(void *)(v2 + 96) += *(void *)(v2 + 200) + 8;
        ++*(_DWORD *)(v2 + 52);
        unsigned int v20 = sub_1B0CCABC4(*(unsigned int **)(v2 + 64), *(_DWORD *)(a1 + 48));
        int v21 = *(_DWORD *)(v2 + 128);
        if (v21 < 1)
        {
          int v24 = 0;
        }
        else
        {
          uint64_t v22 = 0;
          uint64_t v23 = 0;
          int v24 = 0;
          unsigned int v25 = *(_DWORD *)(a1 + 48);
          do
          {
            uint64_t v26 = *(void *)(v2 + 120) + v22;
            if (*(_DWORD *)(v26 + 24) >= v25)
            {
              v24 |= sub_1B0CCABC4(*(unsigned int **)(v26 + 16), v25);
              int v21 = *(_DWORD *)(v2 + 128);
            }
            ++v23;
            v22 += 56;
          }
          while (v23 < v21);
        }
        return v24 | v20;
      }
    }
  }
  return v5;
}

uint64_t sub_1B0D13A30(uint64_t *a1)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v2 = *a1;
    do
    {
      uint64_t v3 = *(void *)(v2 + 64);
      *(void *)(v2 + 32) = v3;
      uint64_t v2 = v3;
    }
    while (v3);
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    if (v1)
    {
      do
      {
LABEL_7:
        uint64_t v4 = 0;
        uint64_t v5 = (long long *)v1;
        uint64_t v1 = *(void *)(v1 + 32);
        *((void *)v5 + 4) = 0;
        do
        {
          uint64_t v6 = *((void *)&v31 + v4);
          if (!v6)
          {
            *((void *)&v31 + v4) = v5;
            if (!v1) {
              goto LABEL_23;
            }
            goto LABEL_7;
          }
          long long v29 = 0uLL;
          long long v30 = 0uLL;
          long long v27 = 0uLL;
          long long v28 = 0uLL;
          unsigned int v7 = &v26;
          long long v26 = 0uLL;
          do
          {
            unint64_t v8 = v7;
            unsigned int v7 = (long long *)v6;
            unsigned int v9 = *(_DWORD *)(v6 + 48);
            unint64_t v10 = v5;
            while (1)
            {
              uint64_t v5 = v10;
              if (v9 < *((_DWORD *)v10 + 12)) {
                break;
              }
              *((void *)v8 + 4) = v10;
              unint64_t v10 = (long long *)*((void *)v10 + 4);
              unint64_t v8 = v5;
              if (!v10)
              {
                int v11 = v5;
                uint64_t v5 = v7;
                goto LABEL_15;
              }
            }
            *((void *)v8 + 4) = v7;
            uint64_t v6 = *((void *)v7 + 4);
            int v11 = v7;
          }
          while (v6);
LABEL_15:
          *((void *)v11 + 4) = v5;
          uint64_t v5 = (long long *)v28;
          *((void *)&v31 + v4++) = 0;
        }
        while (v4 != 31);
        uint64_t v12 = *((void *)&v46 + 1);
        long long v29 = 0uLL;
        long long v30 = 0uLL;
        long long v27 = 0uLL;
        long long v28 = 0uLL;
        unsigned int v13 = &v26;
        long long v26 = 0uLL;
        do
        {
          uint64_t v14 = v13;
          unsigned int v13 = (long long *)v12;
          unsigned int v15 = *(_DWORD *)(v12 + 48);
          uint64_t v16 = v5;
          while (1)
          {
            uint64_t v5 = v16;
            if (v15 < *((_DWORD *)v16 + 12)) {
              break;
            }
            *((void *)v14 + 4) = v16;
            uint64_t v16 = (long long *)*((void *)v16 + 4);
            uint64_t v14 = v5;
            if (!v16)
            {
              uint64_t v17 = v5;
              uint64_t v5 = v13;
              goto LABEL_22;
            }
          }
          *((void *)v14 + 4) = v13;
          uint64_t v12 = *((void *)v13 + 4);
          uint64_t v17 = v13;
        }
        while (v12);
LABEL_22:
        *((void *)v17 + 4) = v5;
        *((void *)&v46 + 1) = v28;
      }
      while (v1);
LABEL_23:
      uint64_t result = v31;
    }
    else
    {
      uint64_t result = 0;
    }
  }
  else
  {
    uint64_t result = 0;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
  }
  for (uint64_t i = 1; i != 32; ++i)
  {
    unsigned int v20 = (_OWORD *)*((void *)&v31 + i);
    if (v20)
    {
      if (result)
      {
        long long v29 = 0uLL;
        long long v30 = 0uLL;
        long long v27 = 0uLL;
        long long v28 = 0uLL;
        int v21 = &v26;
        long long v26 = 0uLL;
        do
        {
          uint64_t v22 = v21;
          int v21 = (long long *)result;
          unsigned int v23 = *(_DWORD *)(result + 48);
          int v24 = v20;
          while (1)
          {
            unsigned int v20 = v24;
            if (v23 < *((_DWORD *)v24 + 12)) {
              break;
            }
            *((void *)v22 + 4) = v24;
            int v24 = (_OWORD *)*((void *)v24 + 4);
            uint64_t v22 = v20;
            if (!v24)
            {
              unsigned int v25 = v20;
              unsigned int v20 = (_OWORD *)result;
              goto LABEL_37;
            }
          }
          *((void *)v22 + 4) = result;
          uint64_t result = *(void *)(result + 32);
          unsigned int v25 = v21;
        }
        while (result);
LABEL_37:
        *((void *)v25 + 4) = v20;
        uint64_t result = v28;
      }
      else
      {
        uint64_t result = *((void *)&v31 + i);
      }
    }
  }
  return result;
}

uint64_t sub_1B0D13CA8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 23) || !*(_DWORD *)(a1 + 32)) {
    return 0;
  }
  uint64_t v9 = 0;
  uint64_t v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, void))(a1 + 288))(a1, 1, &v9, 0);
  uint64_t v4 = v9;
  if (v1) {
    goto LABEL_6;
  }
  uint64_t v5 = *(_DWORD **)(v9 + 40);
  if ((*(_WORD *)(v9 + 52) & 4) != 0 && v5[8] >= *(_DWORD *)(v9 + 48))
  {
    if (!v5[32]) {
      goto LABEL_21;
    }
    uint64_t v7 = sub_1B0D0F4D4(v9);
LABEL_19:
    uint64_t v1 = v7;
    uint64_t v4 = v9;
    if (v1) {
      goto LABEL_6;
    }
    if (!v9)
    {
LABEL_22:
      uint64_t v1 = 0;
      *(unsigned char *)(a1 + 23) = 1;
LABEL_6:
      if (!v4) {
        return v1;
      }
      goto LABEL_11;
    }
LABEL_21:
    unsigned int v8 = bswap32(bswap32(*(_DWORD *)(*(void *)(v4 + 40) + 136)) + 1);
    *(_DWORD *)(*(void *)(v4 + 8) + 24) = v8;
    *(_DWORD *)(*(void *)(v4 + 8) + 92) = v8;
    *(_DWORD *)(*(void *)(v4 + 8) + 96) = -1167184384;
    goto LABEL_22;
  }
  uint64_t v1 = v5[12];
  if (!v1)
  {
    if (v5[46] <= v5[50]) {
      uint64_t v7 = sub_1B0CBD7E0(v9);
    }
    else {
      uint64_t v7 = sub_1B0D133D0(v9);
    }
    goto LABEL_19;
  }
LABEL_11:
  if ((*(_WORD *)(v4 + 52) & 0x20) != 0)
  {
    uint64_t v6 = *(void *)(v4 + 40);
    --*(_DWORD *)(v6 + 152);
    *(void *)(v4 + 32) = *(void *)(v6 + 168);
    *(void *)(v6 + 168) = v4;
    (*(void (**)(void, void, void))(**(void **)(v6 + 72) + 144))(*(void *)(v6 + 72), *(void *)(v6 + 200) * (*(_DWORD *)(v4 + 48) - 1), *(void *)(v4 + 8));
  }
  else
  {
    sub_1B0D0E3E8(v4);
  }
  return v1;
}

uint64_t sub_1B0D13E14(uint64_t a1, unsigned char *a2)
{
  if (!a2) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 9) == 4) {
    return 0;
  }
  uint64_t v15 = 0;
  uint64_t v3 = **(void **)(a1 + 80);
  if (!v3) {
    return 0;
  }
  *(unsigned char *)(a1 + 24) = 1;
  LOBYTE(v5) = *a2;
  if (*a2)
  {
    uint64_t v6 = 0;
    unsigned int v7 = 0;
    do
    {
      v7 += (char)v5;
      int v5 = a2[++v6];
    }
    while (v5);
    uint64_t v8 = v6;
  }
  else
  {
    uint64_t v8 = 0;
    unsigned int v7 = 0;
    uint64_t v6 = 0;
  }
  uint64_t v10 = *(void *)(a1 + 96);
  if (*(unsigned char *)(a1 + 12))
  {
    if (v10) {
      uint64_t v10 = *(unsigned int *)(a1 + 184) + *(unsigned int *)(a1 + 184) * ((v10 - 1) / *(unsigned int *)(a1 + 184));
    }
    *(void *)(a1 + 96) = v10;
  }
  unsigned int v16 = bswap32(*(_DWORD *)(a1 + 192));
  uint64_t result = (*(uint64_t (**)(void))(v3 + 24))();
  if (!result)
  {
    uint64_t v11 = v10 + 4;
    uint64_t result = (*(uint64_t (**)(void, unsigned char *, uint64_t, uint64_t))(**(void **)(a1 + 80) + 24))(*(void *)(a1 + 80), a2, v8, v11);
    if (!result)
    {
      uint64_t v12 = *(void *)(a1 + 80);
      uint64_t v13 = v11 + v6;
      unsigned int v16 = bswap32(v8);
      uint64_t result = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(*(void *)v12 + 24))(v12, &v16, 4, v11 + v6);
      if (!result)
      {
        uint64_t v14 = *(void *)(a1 + 80);
        unsigned int v16 = bswap32(v7);
        uint64_t result = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(*(void *)v14 + 24))(v14, &v16, 4, v13 + 4);
        if (!result)
        {
          uint64_t result = (*(uint64_t (**)(void, void *, uint64_t, uint64_t))(**(void **)(a1 + 80) + 24))(*(void *)(a1 + 80), &unk_1B0DE20F5, 8, v13 + 8);
          if (!result)
          {
            *(void *)(a1 + 96) += (v8 + 20);
            uint64_t result = (*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 80) + 48))(*(void *)(a1 + 80), &v15);
            if (!result)
            {
              if (v15 > *(void *)(a1 + 96)) {
                return (*(uint64_t (**)(void))(**(void **)(a1 + 80) + 32))(*(void *)(a1 + 80));
              }
              return 0;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1B0D13FF0(uint64_t a1, unsigned int a2, unsigned int a3, int a4)
{
  unsigned int v5 = a3;
  if (a3 >= 2)
  {
    unsigned int v8 = (a3 - 2) / (*(_DWORD *)(a1 + 56) / 5u + 1) * (*(_DWORD *)(a1 + 56) / 5u + 1);
    if (v8 + 1 == dword_1E9B51ED0 / *(_DWORD *)(a1 + 52)) {
      int v9 = 3;
    }
    else {
      int v9 = 2;
    }
    if (v9 + v8 == a3)
    {
LABEL_9:
      if (a4) {
        return 0;
      }
      unsigned int v11 = dword_1E9B51ED0 / *(_DWORD *)(a1 + 52);
      do
      {
        while (1)
        {
          do
            unsigned int v14 = v5--;
          while (v11 + 2 == v14);
          if (v5 >= 2) {
            break;
          }
          if (v5) {
            goto LABEL_19;
          }
        }
        unsigned int v12 = (v14 - 3) / (*(_DWORD *)(a1 + 56) / 5u + 1) * (*(_DWORD *)(a1 + 56) / 5u + 1);
        if (v12 + 1 == v11) {
          int v13 = 3;
        }
        else {
          int v13 = 2;
        }
      }
      while (v5 == v13 + v12);
LABEL_19:
      uint64_t v10 = 0;
      *(unsigned char *)(a1 + 35) = 1;
      *(_DWORD *)(a1 + 64) = v5;
      return v10;
    }
  }
  else if (!a3)
  {
    goto LABEL_9;
  }
  if (dword_1E9B51ED0 / *(_DWORD *)(a1 + 52) + 1 == a3) {
    goto LABEL_9;
  }
  unsigned __int8 v32 = 0;
  int v31 = 0;
  if (!bswap32(*(_DWORD *)(*(void *)(*(void *)(a1 + 24) + 80) + 36))) {
    return 101;
  }
  uint64_t v10 = sub_1B0D14784((_DWORD *)a1, a3, &v32, &v31);
  if (!v10)
  {
    int v15 = v32;
    if (v32 == 2)
    {
      if (a4) {
        goto LABEL_9;
      }
      LODWORD(v28) = 0;
      uint64_t v30 = 0;
      uint64_t v16 = sub_1B0CC64B8(a1, &v30, (int *)&v28, v5, 1);
      if (!v16)
      {
        sub_1B0D1493C(v30);
        goto LABEL_9;
      }
    }
    else
    {
      if (v32 != 1)
      {
        unsigned int v29 = 0;
        uint64_t v30 = 0;
        uint64_t v10 = sub_1B0D12DCC(a1, v5, &v30);
        if (v10) {
          return v10;
        }
        if (a4) {
          unsigned int v18 = 0;
        }
        else {
          unsigned int v18 = a2;
        }
        do
        {
          uint64_t v28 = 0;
          unsigned int v19 = *(_DWORD *)(a1 + 64);
          uint64_t v20 = sub_1B0CC64B8(a1, &v28, (int *)&v29, v18, 2 * (a4 == 0));
          if (v20)
          {
            uint64_t v10 = v20;
            if (v30)
            {
              uint64_t v24 = *(void *)(v30 + 112);
              if ((*(_WORD *)(v24 + 52) & 0x20) != 0)
              {
                uint64_t v26 = *(void *)(v24 + 40);
                --*(_DWORD *)(v26 + 152);
                *(void *)(v24 + 32) = *(void *)(v26 + 168);
                *(void *)(v26 + 168) = v24;
                (*(void (**)(void, void, void))(**(void **)(v26 + 72) + 144))(*(void *)(v26 + 72), *(void *)(v26 + 200) * (*(_DWORD *)(v24 + 48) - 1), *(void *)(v24 + 8));
              }
              else
              {
                sub_1B0D0E3E8(v24);
              }
            }
            return v10;
          }
          if (v28)
          {
            uint64_t v21 = *(void *)(v28 + 112);
            if ((*(_WORD *)(v21 + 52) & 0x20) != 0)
            {
              uint64_t v22 = *(void *)(v21 + 40);
              --*(_DWORD *)(v22 + 152);
              *(void *)(v21 + 32) = *(void *)(v22 + 168);
              *(void *)(v22 + 168) = v21;
              (*(void (**)(void, void, void))(**(void **)(v22 + 72) + 144))(*(void *)(v22 + 72), *(void *)(v22 + 200) * (*(_DWORD *)(v21 + 48) - 1), *(void *)(v21 + 8));
            }
            else
            {
              sub_1B0D0E3E8(v21);
            }
          }
          if (v29 > v19)
          {
            if (v30)
            {
              uint64_t v25 = *(void *)(v30 + 112);
              if ((*(_WORD *)(v25 + 52) & 0x20) != 0)
              {
                uint64_t v27 = *(void *)(v25 + 40);
                --*(_DWORD *)(v27 + 152);
                *(void *)(v25 + 32) = *(void *)(v27 + 168);
                *(void *)(v27 + 168) = v25;
                (*(void (**)(void, void, void))(**(void **)(v27 + 72) + 144))(*(void *)(v27 + 72), *(void *)(v27 + 200) * (*(_DWORD *)(v25 + 48) - 1), *(void *)(v25 + 8));
              }
              else
              {
                sub_1B0D0E3E8(v25);
              }
            }
            return sub_1B0D1045C(80887);
          }
        }
        while (a4 && v29 > a2);
        uint64_t v23 = v30;
        uint64_t v10 = sub_1B0D14998((_DWORD *)a1, v30, v15, v31, v29, a4);
        sub_1B0D1493C(v23);
        if (v10) {
          return v10;
        }
        goto LABEL_9;
      }
      return sub_1B0D1045C(80835);
    }
    return v16;
  }
  return v10;
}

uint64_t sub_1B0D143DC(unsigned __int8 *a1, int a2, unsigned __int8 *a3)
{
  while (1)
  {
    if (a1 == a3 || a2 && *((_DWORD *)a1 + 20) != a2) {
      goto LABEL_3;
    }
    int v6 = *a1;
    if ((v6 | 2) == 2) {
      break;
    }
    sub_1B0D144AC((uint64_t)a1);
LABEL_3:
    a1 = (unsigned __int8 *)*((void *)a1 + 5);
    if (!a1) {
      return 0;
    }
  }
  if ((a1[1] & 0x40) != 0) {
    return 2835;
  }
  if (v6 == 2) {
    *a1 = 0;
  }
  else {
    *((_DWORD *)a1 + 1) = 0;
  }
  uint64_t result = sub_1B0D145BC((uint64_t)a1);
  if (!result)
  {
    sub_1B0D144AC((uint64_t)a1);
    *a1 = 3;
    a1[1] &= 0xF1u;
    goto LABEL_3;
  }
  a1[1] &= 0xF1u;
  return result;
}

uint64_t sub_1B0D144AC(uint64_t result)
{
  if ((*(char *)(result + 84) & 0x80000000) == 0)
  {
    uint64_t v1 = result;
    if (*(unsigned char *)(result + 84))
    {
      uint64_t v2 = 0;
      do
      {
        uint64_t v3 = *(void *)(*(void *)(v1 + 144 + 8 * v2) + 112);
        if ((*(_WORD *)(v3 + 52) & 0x20) != 0)
        {
          uint64_t v4 = *(void *)(v3 + 40);
          --*(_DWORD *)(v4 + 152);
          *(void *)(v3 + 32) = *(void *)(v4 + 168);
          *(void *)(v4 + 168) = v3;
          (*(void (**)(void, void, void))(**(void **)(v4 + 72) + 144))(*(void *)(v4 + 72), *(void *)(v4 + 200) * (*(_DWORD *)(v3 + 48) - 1), *(void *)(v3 + 8));
        }
        else
        {
          sub_1B0D0E3E8(v3);
        }
        ++v2;
      }
      while (v2 < *(char *)(v1 + 84));
    }
    uint64_t v5 = *(void *)(*(void *)(v1 + 136) + 112);
    if ((*(_WORD *)(v5 + 52) & 0x20) != 0)
    {
      uint64_t v6 = *(void *)(v5 + 40);
      --*(_DWORD *)(v6 + 152);
      *(void *)(v5 + 32) = *(void *)(v6 + 168);
      *(void *)(v6 + 168) = v5;
      uint64_t result = (*(uint64_t (**)(void, void, void))(**(void **)(v6 + 72) + 144))(*(void *)(v6 + 72), *(void *)(v6 + 200) * (*(_DWORD *)(v5 + 48) - 1), *(void *)(v5 + 8));
    }
    else
    {
      uint64_t result = sub_1B0D0E3E8(v5);
    }
    *(unsigned char *)(v1 + 84) = -1;
  }
  return result;
}

uint64_t sub_1B0D145BC(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 85);
  sub_1B0D146DC(a1);
  if (v2)
  {
    uint64_t v3 = 0;
    *(void *)(a1 + 72) = *(void *)(a1 + 48);
    return v3;
  }
  uint64_t v5 = *(unsigned int *)(a1 + 64);
  *(void *)(a1 + 72) = v5;
  uint64_t v6 = (char *)sub_1B0C7FC94(v5 + 17);
  if (!v6) {
    return 7;
  }
  unsigned int v7 = v6;
  uint64_t v3 = sub_1B0CD1CD0(a1, 0, *(_DWORD *)(a1 + 72), v6, 0);
  if (!v3)
  {
    int v9 = &v7[*(void *)(a1 + 72)];
    *(void *)int v9 = 0;
    *((void *)v9 + 1) = 0;
    v9[16] = 0;
    *(void *)(a1 + 24) = v7;
    return v3;
  }
  unsigned int v8 = (uint64_t (**)(char *))&off_1EB21C9E8;
  if (!dword_1EB21C9C0)
  {
LABEL_11:
    (*v8)(v7);
    return v3;
  }
  if ((void)xmmword_1EB2201B0) {
    xmmword_1EB21CA40(xmmword_1EB2201B0);
  }
  qword_1EB220108 -= (int)off_1EB21C9F8(v7);
  --qword_1EB220150;
  off_1EB21C9E8(v7);
  unsigned int v7 = (char *)xmmword_1EB2201B0;
  if ((void)xmmword_1EB2201B0)
  {
    unsigned int v8 = (uint64_t (**)(char *))&xmmword_1EB21CA50;
    goto LABEL_11;
  }
  return v3;
}

uint64_t sub_1B0D146DC(uint64_t result)
{
  if (!*(_WORD *)(result + 70))
  {
    *(unsigned char *)(result + 1) |= 2u;
    uint64_t v1 = *(void *)(result + 136);
    int v2 = (unsigned __int8 *)(*(void *)(v1 + 96) + 2 * *(unsigned __int16 *)(result + 86));
    return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v1 + 128))(v1, *(void *)(v1 + 80) + ((v2[1] | (*v2 << 8)) & (unint64_t)*(unsigned __int16 *)(v1 + 26)), result + 48);
  }
  return result;
}

uint64_t sub_1B0D14730(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 112);
  if ((*(_WORD *)(v1 + 52) & 0x20) == 0) {
    return sub_1B0D0E3E8(v1);
  }
  uint64_t v3 = *(void *)(v1 + 40);
  --*(_DWORD *)(v3 + 152);
  *(void *)(v1 + 32) = *(void *)(v3 + 168);
  *(void *)(v3 + 168) = v1;
  return (*(uint64_t (**)(void, void, void))(**(void **)(v3 + 72) + 144))(*(void *)(v3 + 72), *(void *)(v3 + 200) * (*(_DWORD *)(v1 + 48) - 1), *(void *)(v1 + 8));
}

uint64_t sub_1B0D14784(_DWORD *a1, unsigned int a2, unsigned char *a3, _DWORD *a4)
{
  if (a2 >= 2)
  {
    unsigned int v8 = (a2 - 2) / (a1[14] / 5u + 1) * (a1[14] / 5u + 1);
    if (v8 + 1 == dword_1E9B51ED0 / a1[13]) {
      int v9 = 3;
    }
    else {
      int v9 = 2;
    }
    unsigned int v7 = v9 + v8;
  }
  else
  {
    unsigned int v7 = 0;
  }
  uint64_t result = (*(uint64_t (**)(void))(*(void *)a1 + 288))();
  if (!result)
  {
    uint64_t v11 = MEMORY[8];
    int v12 = 5 * (~v7 + a2);
    if (v12 < 0)
    {
      int v13 = 77956;
      if ((MEMORY[0x34] & 0x20) != 0)
      {
        uint64_t v15 = MEMORY[0x28];
        --*(_DWORD *)(MEMORY[0x28] + 152);
        MEMORY[0x20] = *(void *)(v15 + 168);
        *(void *)(v15 + 168) = 0;
        (*(void (**)(void, void, uint64_t))(**(void **)(v15 + 72) + 144))(*(void *)(v15 + 72), *(void *)(v15 + 200) * (MEMORY[0x30] - 1), v11);
      }
      else
      {
        sub_1B0D0E3E8(0);
      }
    }
    else
    {
      *a3 = *(unsigned char *)(MEMORY[8] + v12);
      if (a4) {
        *a4 = bswap32(*(_DWORD *)(v11 + v12 + 1));
      }
      if ((MEMORY[0x34] & 0x20) != 0)
      {
        uint64_t v14 = MEMORY[0x28];
        --*(_DWORD *)(MEMORY[0x28] + 152);
        MEMORY[0x20] = *(void *)(v14 + 168);
        *(void *)(v14 + 168) = 0;
        (*(void (**)(void, void, void))(**(void **)(v14 + 72) + 144))(*(void *)(v14 + 72), *(void *)(v14 + 200) * (MEMORY[0x30] - 1), MEMORY[8]);
      }
      else
      {
        sub_1B0D0E3E8(0);
      }
      if (*a3 - 6 > 0xFFFFFFFA) {
        return 0;
      }
      int v13 = 77964;
    }
    return sub_1B0D1045C(v13);
  }
  return result;
}

uint64_t sub_1B0D1493C(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(void *)(result + 112);
    if ((*(_WORD *)(v1 + 52) & 0x20) != 0)
    {
      uint64_t v2 = *(void *)(v1 + 40);
      --*(_DWORD *)(v2 + 152);
      *(void *)(v1 + 32) = *(void *)(v2 + 168);
      *(void *)(v2 + 168) = v1;
      return (*(uint64_t (**)(void, void, void))(**(void **)(v2 + 72) + 144))(*(void *)(v2 + 72), *(void *)(v2 + 200) * (*(_DWORD *)(v1 + 48) - 1), *(void *)(v1 + 8));
    }
    else
    {
      return sub_1B0D0E3E8(v1);
    }
  }
  return result;
}

uint64_t sub_1B0D14998(_DWORD *a1, uint64_t a2, int a3, int a4, uint64_t a5, int a6)
{
  unsigned int v6 = *(_DWORD *)(a2 + 4);
  uint64_t v7 = *(void *)a1;
  unsigned int v56 = 0;
  if (v6 > 2)
  {
    uint64_t v17 = *(void *)(a2 + 112);
    if (*(unsigned char *)(v7 + 16))
    {
      unsigned int v18 = *(_DWORD **)(v17 + 40);
      if ((*(_WORD *)(v17 + 52) & 4) != 0 && v18[8] >= *(_DWORD *)(v17 + 48))
      {
        if (v18[32])
        {
          uint64_t v19 = sub_1B0D0F4D4(*(void *)(a2 + 112));
          if (v19) {
            return v19;
          }
        }
      }
      else
      {
        uint64_t v19 = v18[12];
        if (v19) {
          return v19;
        }
        uint64_t v20 = *(void *)(a2 + 112);
        if (v18[46] <= v18[50])
        {
          uint64_t v19 = sub_1B0CBD7E0(v20);
          if (v19) {
            return v19;
          }
        }
        else
        {
          uint64_t v19 = sub_1B0D133D0(v20);
          if (v19) {
            return v19;
          }
        }
      }
    }
    __int16 v21 = *(_WORD *)(v17 + 52);
    if ((v21 & 2) != 0)
    {
      uint64_t v19 = sub_1B0D0F4D4(v17);
      if (v19) {
        return v19;
      }
      __int16 v21 = *(_WORD *)(v17 + 52);
    }
    unsigned int v55 = 0;
    if (!a6 && (v21 & 8) != 0) {
      unsigned int v55 = *(_DWORD *)(v17 + 48);
    }
    *(_WORD *)(v17 + 52) = v21 & 0xFFF7;
    uint64_t v22 = ((uint64_t (*)(void, uint64_t, void))*(&xmmword_1EB21CA98 + 1))(*(void *)(*(void *)(v7 + 336) + 72), a5, 0);
    if (!v22)
    {
      int v54 = a3;
      int v27 = a4;
      char v28 = 0;
      uint64_t v25 = 0;
LABEL_46:
      uint64_t v34 = *(unsigned int *)(v17 + 48);
      sub_1B0D15484(v17, a5);
      __int16 v35 = *(_WORD *)(v17 + 52);
      if ((v35 & 0x11) != 0)
      {
        *(_WORD *)(v17 + 52) = v35 & 0xFFEF;
        if (v35)
        {
          *(_WORD *)(v17 + 52) = v35 & 0xFFEF ^ 3;
          long long v36 = *(uint64_t **)(v17 + 24);
          *(void *)(v17 + 72) = 0;
          uint64_t v37 = *v36;
          *(void *)(v17 + 64) = *v36;
          if (v37)
          {
            *(void *)(v37 + 72) = v17;
          }
          else
          {
            v36[1] = v17;
            if (*((unsigned char *)v36 + 48)) {
              *((unsigned char *)v36 + 49) = 1;
            }
          }
          uint64_t *v36 = v17;
          if ((v35 & 8) == 0 && !v36[2]) {
            _OWORD v36[2] = v17;
          }
        }
      }
      char v38 = v28 ^ 1;
      if (!*(unsigned char *)(v7 + 16)) {
        char v38 = 1;
      }
      if ((v38 & 1) == 0)
      {
        sub_1B0D15484(v25, v34);
        if ((*(_WORD *)(v25 + 52) & 0x20) != 0)
        {
          uint64_t v40 = *(void *)(v25 + 40);
          --*(_DWORD *)(v40 + 152);
          *(void *)(v25 + 32) = *(void *)(v40 + 168);
          *(void *)(v40 + 168) = v25;
          (*(void (**)(void, void, void))(**(void **)(v40 + 72) + 144))(*(void *)(v40 + 72), *(void *)(v40 + 200) * (*(_DWORD *)(v25 + 48) - 1), *(void *)(v25 + 8));
          if (!v55) {
            goto LABEL_76;
          }
          goto LABEL_61;
        }
        sub_1B0D0E3E8(v25);
      }
      if (!v55) {
        goto LABEL_76;
      }
LABEL_61:
      uint64_t v57 = 0;
      uint64_t v39 = (*(uint64_t (**)(uint64_t, void, uint64_t *, void))(v7 + 288))(v7, v55, &v57, 0);
      if (v39)
      {
        uint64_t v19 = v39;
        if (v55 <= *(_DWORD *)(v7 + 36)) {
          sub_1B0D15684(*(void **)(v7 + 64), v55, *(void **)(v7 + 328));
        }
        return v19;
      }
      uint64_t v41 = v57;
      __int16 v42 = *(_WORD *)(v57 + 52);
      LOBYTE(v43) = v42 | 8;
      *(_WORD *)(v57 + 52) = v42 | 8;
      if ((v42 & 0x11) != 0)
      {
        __int16 v43 = v42 & 0xFFE7 | 8;
        *(_WORD *)(v41 + 52) = v43;
        if (v42)
        {
          *(_WORD *)(v41 + 52) = v43 ^ 3;
          long long v44 = *(uint64_t **)(v41 + 24);
          *(void *)(v41 + 72) = 0;
          uint64_t v45 = *v44;
          *(void *)(v41 + 64) = *v44;
          if (v45)
          {
            *(void *)(v45 + 72) = v41;
          }
          else
          {
            v44[1] = v41;
            if (*((unsigned char *)v44 + 48)) {
              *((unsigned char *)v44 + 49) = 1;
            }
          }
          *long long v44 = v41;
          uint64_t v41 = v57;
          __int16 v43 = *(_WORD *)(v57 + 52);
        }
      }
      if ((v43 & 0x20) != 0)
      {
        uint64_t v46 = *(void *)(v41 + 40);
        --*(_DWORD *)(v46 + 152);
        *(void *)(v41 + 32) = *(void *)(v46 + 168);
        *(void *)(v46 + 168) = v41;
        (*(void (**)(void, void, void))(**(void **)(v46 + 72) + 144))(*(void *)(v46 + 72), *(void *)(v46 + 200) * (*(_DWORD *)(v41 + 48) - 1), *(void *)(v41 + 8));
      }
      else
      {
        sub_1B0D0E3E8(v41);
      }
LABEL_76:
      unsigned int v56 = 0;
      *(_DWORD *)(a2 + 4) = a5;
      if ((v54 & 0xFFFFFFFB) == 1)
      {
        uint64_t v19 = sub_1B0D150D0(a2);
        if (!v19) {
          goto LABEL_81;
        }
      }
      else
      {
        int v47 = bswap32(**(_DWORD **)(a2 + 80));
        if (!v47 || (sub_1B0CD24E8(a1, v47, 4, a5, &v56), (uint64_t v19 = v56) == 0))
        {
LABEL_81:
          if (v54 == 1)
          {
            return 0;
          }
          else
          {
            uint64_t v57 = 0;
            uint64_t v48 = (*(uint64_t (**)(void))(*(void *)a1 + 288))();
            if (v48)
            {
              return v48;
            }
            else
            {
              uint64_t v49 = v57;
              uint64_t v50 = *(void *)(v57 + 16);
              if (*(_DWORD *)(v50 + 4) == v27)
              {
                uint64_t v49 = *(void *)(v50 + 112);
              }
              else
              {
                uint64_t v51 = *(void *)(v57 + 8);
                *(void *)(v50 + 112) = v57;
                *(void *)(v50 + 72) = a1;
                *(void *)(v50 + 80) = v51;
                *(_DWORD *)(v50 + 4) = v27;
                if (v27 == 1) {
                  char v52 = 100;
                }
                else {
                  char v52 = 0;
                }
                *(unsigned char *)(v50 + 9) = v52;
              }
              uint64_t v53 = sub_1B0CBD790(v49);
              if (v53)
              {
                uint64_t v19 = v53;
                sub_1B0D1493C(v50);
              }
              else
              {
                uint64_t v19 = sub_1B0D15258(v50, v6, a5, v54);
                unsigned int v56 = v19;
                sub_1B0D1493C(v50);
                if (!v19)
                {
                  sub_1B0CD24E8(a1, a5, v54, v27, &v56);
                  return v56;
                }
              }
            }
          }
        }
      }
      return v19;
    }
    uint64_t v23 = (uint64_t *)v22;
    uint64_t v24 = *(void *)(v7 + 336);
    uint64_t v25 = v23[1];
    if (*(void *)v25)
    {
      ++*(void *)(v24 + 24);
      uint64_t v26 = *(void *)(v25 + 56) + 1;
      *(void *)(v25 + 56) = v26;
    }
    else
    {
      uint64_t v29 = sub_1B0D1171C(v24, a5, v23);
      uint64_t v25 = v29;
      if (!v29)
      {
        int v54 = a3;
        int v27 = a4;
        char v28 = 0;
        goto LABEL_46;
      }
      uint64_t v26 = *(void *)(v29 + 56);
    }
    if (v26 >= 2)
    {
      if ((*(_WORD *)(v25 + 52) & 0x20) != 0)
      {
        uint64_t v30 = *(void *)(v25 + 40);
        --*(_DWORD *)(v30 + 152);
        *(void *)(v25 + 32) = *(void *)(v30 + 168);
        *(void *)(v30 + 168) = v25;
        (*(void (**)(void, void, void))(**(void **)(v30 + 72) + 144))(*(void *)(v30 + 72), *(void *)(v30 + 200) * (*(_DWORD *)(v25 + 48) - 1), *(void *)(v25 + 8));
      }
      else
      {
        sub_1B0D0E3E8(v25);
      }
      unsigned __int16 v8 = 5657;
      goto LABEL_3;
    }
    *(_WORD *)(v17 + 52) |= *(_WORD *)(v25 + 52) & 8;
    int v54 = a3;
    if (*(unsigned char *)(v7 + 16))
    {
      int v27 = a4;
      sub_1B0D15484(v25, (*(_DWORD *)(v7 + 32) + 1));
      char v28 = 1;
      goto LABEL_46;
    }
    uint64_t v31 = *(void *)(v25 + 24);
    if ((*(_WORD *)(v25 + 52) & 2) != 0)
    {
      uint64_t v32 = *(void *)(v25 + 72);
      if (*(void *)(v31 + 16) == v25) {
        *(void *)(v31 + 16) = v32;
      }
      uint64_t v33 = *(void *)(v25 + 64);
      if (v33)
      {
        *(void *)(v33 + 72) = v32;
        uint64_t v32 = *(void *)(v25 + 72);
        if (!v32)
        {
          *(void *)uint64_t v31 = v33;
          goto LABEL_45;
        }
      }
      else
      {
        *(void *)(v31 + 8) = v32;
        if (!v32)
        {
          *(void *)uint64_t v31 = 0;
          *(unsigned char *)(v31 + 49) = 2;
          goto LABEL_45;
        }
      }
      *(void *)(v32 + 64) = v33;
    }
LABEL_45:
    int v27 = a4;
    --*(void *)(v31 + 24);
    char v28 = 1;
    xmmword_1EB21CAA8(*(void *)(v31 + 72), *(void *)v25, 1);
    goto LABEL_46;
  }
  unsigned __int16 v8 = 15201;
LABEL_3:
  int v9 = v8 | 0x10000;

  return sub_1B0D1045C(v9);
}

uint64_t sub_1B0D14FC0(uint64_t a1, int a2, void *a3)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)a1 + 288))();
  if (result)
  {
    *a3 = 0;
  }
  else
  {
    uint64_t v7 = MEMORY[0x10];
    if (*(_DWORD *)(MEMORY[0x10] + 4) != a2)
    {
      uint64_t v8 = MEMORY[8];
      *(void *)(MEMORY[0x10] + 112) = 0;
      *(void *)(v7 + 72) = a1;
      *(void *)(v7 + 80) = v8;
      *(_DWORD *)(v7 + 4) = a2;
      if (a2 == 1) {
        char v9 = 100;
      }
      else {
        char v9 = 0;
      }
      *(unsigned char *)(v7 + 9) = v9;
    }
    *a3 = v7;
    uint64_t v10 = *(void *)(v7 + 112);
    if (*(int *)(v10 + 56) < 2)
    {
      uint64_t result = 0;
      *(unsigned char *)uint64_t v7 = 0;
    }
    else
    {
      if ((*(_WORD *)(v10 + 52) & 0x20) != 0)
      {
        uint64_t v11 = *(void *)(v10 + 40);
        --*(_DWORD *)(v11 + 152);
        *(void *)(v10 + 32) = *(void *)(v11 + 168);
        *(void *)(v11 + 168) = v10;
        (*(void (**)(void, void, void))(**(void **)(v11 + 72) + 144))(*(void *)(v11 + 72), *(void *)(v11 + 200) * (*(_DWORD *)(v10 + 48) - 1), *(void *)(v10 + 8));
      }
      else
      {
        sub_1B0D0E3E8(v10);
      }
      *a3 = 0;
      return sub_1B0D1045C(79272);
    }
  }
  return result;
}

uint64_t sub_1B0D150D0(uint64_t a1)
{
  uint64_t v2 = *(_DWORD **)(a1 + 72);
  int v3 = *(_DWORD *)(a1 + 4);
  if (*(unsigned char *)a1)
  {
    unsigned int v10 = 0;
  }
  else
  {
    uint64_t result = sub_1B0CAD004(a1);
    unsigned int v10 = result;
    if (result) {
      return result;
    }
  }
  if (*(_WORD *)(a1 + 24))
  {
    uint64_t v4 = 0;
    uint64_t v5 = 2 * *(unsigned __int16 *)(a1 + 24);
    do
    {
      unsigned int v6 = (unsigned int *)(*(void *)(a1 + 80)
                          + ((*(unsigned __int8 *)(*(void *)(a1 + 96) + v4 + 1) | (*(unsigned __int8 *)(*(void *)(a1 + 96) + v4) << 8)) & (unint64_t)*(unsigned __int16 *)(a1 + 26)));
      if (!v10)
      {
        v11[0] = 0;
        v11[1] = 0;
        uint64_t v12 = 0;
        (*(void (**)(uint64_t, unsigned int *, void *))(a1 + 128))(a1, v6, v11);
        if (v12 > WORD2(v12))
        {
          unint64_t v7 = *(void *)(a1 + 88);
          if (v7 > (unint64_t)v6 && (unint64_t)v6 + WORD2(v12) > v7)
          {
            unsigned int v10 = sub_1B0D1045C(78404);
            if (*(unsigned char *)(a1 + 8)) {
              goto LABEL_5;
            }
LABEL_14:
            sub_1B0CD24E8(v2, bswap32(*v6), 5, v3, &v10);
            goto LABEL_5;
          }
          sub_1B0CD24E8(*(_DWORD **)(a1 + 72), bswap32(*(unsigned int *)((char *)v6 + HIWORD(v12) - 4)), 3, *(_DWORD *)(a1 + 4), &v10);
        }
      }
      if (!*(unsigned char *)(a1 + 8)) {
        goto LABEL_14;
      }
LABEL_5:
      v4 += 2;
    }
    while (v5 != v4);
  }
  if (!*(unsigned char *)(a1 + 8)) {
    sub_1B0CD24E8(v2, bswap32(*(_DWORD *)(*(unsigned __int8 *)(a1 + 9) + *(void *)(a1 + 80) + 8)), 5, v3, &v10);
  }
  return v10;
}

uint64_t sub_1B0D15258(uint64_t a1, int a2, unsigned int a3, int a4)
{
  if (a4 == 4)
  {
    unint64_t v7 = *(unsigned int **)(a1 + 80);
    if (bswap32(*v7) != a2)
    {
      return sub_1B0D11B5C(80662, a1);
    }
LABEL_3:
    uint64_t result = 0;
    *unint64_t v7 = bswap32(a3);
    return result;
  }
  if (!*(unsigned char *)a1)
  {
    uint64_t result = sub_1B0CAD004(a1);
    if (result) {
      return result;
    }
  }
  uint64_t v10 = *(unsigned __int16 *)(a1 + 24);
  if (!*(_WORD *)(a1 + 24))
  {
    LODWORD(v12) = 0;
LABEL_22:
    if (v12 == v10)
    {
LABEL_23:
      if (a4 != 5) {
        goto LABEL_29;
      }
      uint64_t v16 = *(unsigned __int8 *)(a1 + 9) + *(void *)(a1 + 80);
      unsigned int v17 = *(_DWORD *)(v16 + 8);
      unint64_t v7 = (unsigned int *)(v16 + 8);
      if (bswap32(v17) != a2) {
        goto LABEL_29;
      }
      goto LABEL_3;
    }
    return 0;
  }
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  while (1)
  {
    uint64_t v13 = *(void *)(a1 + 80);
    uint64_t v14 = (unsigned int *)(v13
                         + ((*(unsigned __int8 *)(*(void *)(a1 + 96) + v11 + 1) | (*(unsigned __int8 *)(*(void *)(a1 + 96) + v11) << 8)) & (unint64_t)*(unsigned __int16 *)(a1 + 26)));
    if (a4 != 3)
    {
      if ((unint64_t)(v14 + 1) > v13 + (unint64_t)*(unsigned int *)(*(void *)(a1 + 72) + 56))
      {
        uint64_t v18 = 80690;
        return sub_1B0D11B5C(v18, a1);
      }
      if (bswap32(*v14) == a2)
      {
        *uint64_t v14 = bswap32(a3);
        goto LABEL_22;
      }
      goto LABEL_7;
    }
    v19[0] = 0;
    v19[1] = 0;
    uint64_t v20 = 0;
    (*(void (**)(uint64_t, unsigned int *, void *))(a1 + 128))(a1, v14, v19);
    if (v20 > WORD2(v20))
    {
      unint64_t v15 = (unint64_t)v14 + HIWORD(v20);
      if (v15 > *(void *)(a1 + 80) + (unint64_t)*(unsigned int *)(*(void *)(a1 + 72) + 56))
      {
        uint64_t v18 = 80681;
        return sub_1B0D11B5C(v18, a1);
      }
      if (bswap32(*(_DWORD *)(v15 - 4)) == a2) {
        break;
      }
    }
LABEL_7:
    ++v12;
    v11 += 2;
    if (v10 == v12) {
      goto LABEL_23;
    }
  }
  *(_DWORD *)(v15 - 4) = bswap32(a3);
  if (v10 != v12) {
    return 0;
  }
LABEL_29:
  uint64_t v18 = 80702;
  return sub_1B0D11B5C(v18, a1);
}

uint64_t sub_1B0D15484(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = ((uint64_t (*)(void, uint64_t, void))*(&xmmword_1EB21CA98 + 1))(*(void *)(v4 + 72), a2, 0);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 8);
    uint64_t v7 = *(void *)(v6 + 56);
    if (v7 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)unsigned int v17 = 0;
      _os_log_fault_impl(&dword_1B0C76000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "pcache replacing page with non-zero refcount", v17, 2u);
      uint64_t v7 = *(void *)(v6 + 56);
    }
    *(void *)(v6 + 56) = v7 + 1;
    ++*(void *)(v4 + 24);
    uint64_t v8 = *(void *)(v6 + 24);
    if ((*(unsigned char *)(v6 + 52) & 2) == 0) {
      goto LABEL_13;
    }
    uint64_t v9 = *(void *)(v6 + 72);
    if (*(void *)(v8 + 16) == v6)
    {
      *(void *)(v8 + 16) = v9;
      uint64_t v10 = *(void *)(v6 + 64);
      if (v10)
      {
LABEL_8:
        *(void *)(v10 + 72) = v9;
        uint64_t v9 = *(void *)(v6 + 72);
        if (!v9)
        {
          *(void *)uint64_t v8 = v10;
LABEL_13:
          --*(void *)(v8 + 24);
          xmmword_1EB21CAA8(*(void *)(v8 + 72), *(void *)v6, 1);
          goto LABEL_14;
        }
LABEL_12:
        *(void *)(v9 + 64) = v10;
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v10 = *(void *)(v6 + 64);
      if (v10) {
        goto LABEL_8;
      }
    }
    *(void *)(v8 + 8) = v9;
    if (!v9)
    {
      *(void *)uint64_t v8 = 0;
      *(unsigned char *)(v8 + 49) = 2;
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_14:
  uint64_t result = ((uint64_t (*)(void, void, void, uint64_t))*(&xmmword_1EB21CAA8 + 1))(*(void *)(v4 + 72), *(void *)a1, *(unsigned int *)(a1 + 48), a2);
  *(_DWORD *)(a1 + 48) = a2;
  int v12 = *(unsigned __int16 *)(a1 + 52);
  if ((~v12 & 0xA) != 0) {
    return result;
  }
  uint64_t v13 = *(uint64_t **)(a1 + 24);
  uint64_t v14 = v13[2];
  uint64_t v15 = *(void *)(a1 + 72);
  if (v14 == a1)
  {
    v13[2] = v15;
    uint64_t v14 = v15;
  }
  uint64_t v16 = *(void *)(a1 + 64);
  if (!v16)
  {
    v13[1] = v15;
    if (!v15)
    {
      *((unsigned char *)v13 + 49) = 2;
      *(void *)(a1 + 64) = 0;
      *(void *)(a1 + 72) = 0;
      goto LABEL_24;
    }
LABEL_21:
    *(void *)(v15 + 64) = v16;
    uint64_t v16 = *v13;
    *(void *)(a1 + 64) = *v13;
    *(void *)(a1 + 72) = 0;
    if (v16) {
      goto LABEL_22;
    }
LABEL_24:
    v13[1] = a1;
    if (*((unsigned char *)v13 + 48)) {
      *((unsigned char *)v13 + 49) = 1;
    }
    goto LABEL_26;
  }
  *(void *)(v16 + 72) = v15;
  uint64_t v15 = *(void *)(a1 + 72);
  if (v15) {
    goto LABEL_21;
  }
  *(void *)(a1 + 64) = v16;
  *(void *)(a1 + 72) = 0;
LABEL_22:
  *(void *)(v16 + 72) = a1;
LABEL_26:
  *uint64_t v13 = a1;
  if ((v12 & 8) == 0 && !v14) {
    v13[2] = a1;
  }
  return result;
}

void *sub_1B0D15684(void *result, int a2, void *__dst)
{
  if (result)
  {
    uint64_t v4 = (uint64_t)result;
    unsigned int v5 = a2 - 1;
    while (1)
    {
      unsigned int v6 = *(_DWORD *)(v4 + 8);
      if (!v6) {
        break;
      }
      unsigned int v7 = v5 / v6;
      v5 %= v6;
      uint64_t v4 = *(void *)(v4 + 8 * v7 + 16);
      if (!v4) {
        return result;
      }
    }
    if (*(_DWORD *)v4 > 0xF80u)
    {
      uint64_t v8 = v4 + 16;
      uint64_t result = memcpy(__dst, (const void *)(v4 + 16), 0x1F0uLL);
      uint64_t v9 = 0;
      *(_OWORD *)(v4 + 16) = 0u;
      *(_OWORD *)(v4 + 32) = 0u;
      *(_OWORD *)(v4 + 48) = 0u;
      *(_OWORD *)(v4 + 64) = 0u;
      *(_OWORD *)(v4 + 80) = 0u;
      *(_OWORD *)(v4 + 96) = 0u;
      *(_OWORD *)(v4 + 112) = 0u;
      *(_OWORD *)(v4 + 128) = 0u;
      *(_OWORD *)(v4 + 144) = 0u;
      *(_OWORD *)(v4 + 160) = 0u;
      *(_OWORD *)(v4 + 176) = 0u;
      *(_OWORD *)(v4 + 192) = 0u;
      *(_OWORD *)(v4 + 208) = 0u;
      *(_OWORD *)(v4 + 224) = 0u;
      *(_OWORD *)(v4 + 240) = 0u;
      *(_OWORD *)(v4 + 256) = 0u;
      *(_OWORD *)(v4 + 272) = 0u;
      *(_OWORD *)(v4 + 288) = 0u;
      *(_OWORD *)(v4 + 304) = 0u;
      *(_OWORD *)(v4 + 320) = 0u;
      *(_OWORD *)(v4 + 336) = 0u;
      *(_OWORD *)(v4 + 352) = 0u;
      *(_OWORD *)(v4 + 368) = 0u;
      *(_OWORD *)(v4 + 384) = 0u;
      *(_OWORD *)(v4 + 400) = 0u;
      *(_OWORD *)(v4 + 416) = 0u;
      *(_OWORD *)(v4 + 432) = 0u;
      *(_OWORD *)(v4 + 448) = 0u;
      *(_OWORD *)(v4 + 464) = 0u;
      *(_OWORD *)(v4 + 480) = 0u;
      *(_OWORD *)(v4 + 496) = 0u;
      *(_DWORD *)(v4 + 4) = 0;
      do
      {
        int v10 = *((_DWORD *)__dst + v9);
        if (v10) {
          BOOL v11 = v10 == v5 + 1;
        }
        else {
          BOOL v11 = 1;
        }
        if (!v11)
        {
          uint64_t v12 = (v10 - 1) % 0x7Cu;
          ++*(_DWORD *)(v4 + 4);
          while (*(_DWORD *)(v8 + 4 * v12))
          {
            if ((v12 + 1) <= 0x7B) {
              uint64_t v12 = (v12 + 1);
            }
            else {
              uint64_t v12 = 0;
            }
          }
          *(_DWORD *)(v8 + 4 * v12) = *((_DWORD *)__dst + v9);
        }
        ++v9;
      }
      while (v9 != 124);
    }
    else
    {
      *(unsigned char *)(v4 + ((unint64_t)v5 >> 3) + 16) &= ~(1 << (v5 & 7));
    }
  }
  return result;
}

_DWORD *sub_1B0D157E0(_DWORD *result, uint64_t a2, unint64_t a3, _DWORD *a4)
{
  if (!*a4)
  {
    unsigned int v7 = result;
    v10[0] = 0;
    v10[1] = 0;
    uint64_t v11 = 0;
    uint64_t result = (_DWORD *)(*((uint64_t (**)(_DWORD *, unint64_t, void *))result + 16))(result, a3, v10);
    if (v11 > WORD2(v11))
    {
      unint64_t v8 = *(void *)(a2 + 88);
      if (v8 > a3 && a3 + WORD2(v11) > v8)
      {
        uint64_t result = (_DWORD *)sub_1B0D1045C(78404);
        *a4 = result;
      }
      else
      {
        return sub_1B0CD24E8(*((_DWORD **)v7 + 9), bswap32(*(_DWORD *)(HIWORD(v11) + a3 - 4)), 3, v7[1], a4);
      }
    }
  }
  return result;
}

uint64_t sub_1B0D15898(uint64_t a1, int a2, int a3)
{
  if (!a1) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 17))
  {
    ++*(_DWORD *)(a1 + 20);
    if (!*(unsigned char *)(a1 + 18)) {
      sub_1B0D12478(a1);
    }
  }
  unsigned int v6 = *(unsigned __int8 **)(*(void *)(a1 + 8) + 16);
  if (!v6)
  {
LABEL_25:
    uint64_t v11 = 0;
    goto LABEL_26;
  }
  while (!a3 || (v6[1] & 1) != 0)
  {
    uint64_t v8 = *((void *)v6 + 3);
    if (v8)
    {
      uint64_t v9 = &off_1EB21C9E8;
      if (dword_1EB21C9C0)
      {
        if ((void)xmmword_1EB2201B0) {
          xmmword_1EB21CA40(xmmword_1EB2201B0);
        }
        qword_1EB220108 -= (int)off_1EB21C9F8(v8);
        --qword_1EB220150;
        off_1EB21C9E8(v8);
        uint64_t v8 = xmmword_1EB2201B0;
        if (!(void)xmmword_1EB2201B0) {
          goto LABEL_8;
        }
        uint64_t v9 = &xmmword_1EB21CA50;
      }
      (*v9)(v8);
    }
LABEL_8:
    *((void *)v6 + 3) = 0;
    *unsigned int v6 = 4;
    *((_DWORD *)v6 + 1) = a2;
LABEL_9:
    sub_1B0D144AC((uint64_t)v6);
    unsigned int v6 = (unsigned __int8 *)*((void *)v6 + 5);
    if (!v6) {
      goto LABEL_25;
    }
  }
  int v7 = *v6;
  if ((v7 | 2) != 2) {
    goto LABEL_9;
  }
  if ((v6[1] & 0x40) != 0)
  {
    uint64_t v11 = 2835;
    if (!*(unsigned char *)(a1 + 17)) {
      goto LABEL_36;
    }
    goto LABEL_34;
  }
  if (v7 == 2) {
    *unsigned int v6 = 0;
  }
  else {
    *((_DWORD *)v6 + 1) = 0;
  }
  uint64_t v10 = sub_1B0D145BC((uint64_t)v6);
  if (!v10)
  {
    sub_1B0D144AC((uint64_t)v6);
    *unsigned int v6 = 3;
    v6[1] &= 0xF1u;
    goto LABEL_9;
  }
  uint64_t v11 = v10;
  v6[1] &= 0xF1u;
  if (!*(unsigned char *)(a1 + 17)) {
    goto LABEL_36;
  }
LABEL_34:
  ++*(_DWORD *)(a1 + 20);
  if (!*(unsigned char *)(a1 + 18)) {
    sub_1B0D12478(a1);
  }
LABEL_36:
  uint64_t v14 = *(void *)(*(void *)(a1 + 8) + 16);
  if (v14)
  {
    while (2)
    {
      uint64_t v15 = *(void *)(v14 + 24);
      if (v15)
      {
        uint64_t v16 = &off_1EB21C9E8;
        if (!dword_1EB21C9C0) {
          goto LABEL_38;
        }
        if ((void)xmmword_1EB2201B0) {
          xmmword_1EB21CA40(xmmword_1EB2201B0);
        }
        qword_1EB220108 -= (int)off_1EB21C9F8(v15);
        --qword_1EB220150;
        off_1EB21C9E8(v15);
        uint64_t v15 = xmmword_1EB2201B0;
        if ((void)xmmword_1EB2201B0)
        {
          uint64_t v16 = &xmmword_1EB21CA50;
LABEL_38:
          (*v16)(v15);
        }
      }
      *(void *)(v14 + 24) = 0;
      *(unsigned char *)uint64_t v14 = 4;
      *(_DWORD *)(v14 + 4) = v11;
      sub_1B0D144AC(v14);
      uint64_t v14 = *(void *)(v14 + 40);
      if (!v14) {
        break;
      }
      continue;
    }
  }
  if (*(unsigned char *)(a1 + 17))
  {
    int v17 = *(_DWORD *)(a1 + 20) - 1;
    *(_DWORD *)(a1 + 20) = v17;
    if (!v17) {
      sub_1B0D12558(a1);
    }
LABEL_26:
    if (*(unsigned char *)(a1 + 17))
    {
      int v12 = *(_DWORD *)(a1 + 20) - 1;
      *(_DWORD *)(a1 + 20) = v12;
      if (!v12) {
        sub_1B0D12558(a1);
      }
    }
  }
  return v11;
}

uint64_t sub_1B0D15B64(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 24);
  if (v2)
  {
    int v3 = &off_1EB21C9E8;
    if (!dword_1EB21C9C0)
    {
LABEL_7:
      uint64_t result = (*v3)(v2);
      goto LABEL_8;
    }
    if ((void)xmmword_1EB2201B0) {
      xmmword_1EB21CA40(xmmword_1EB2201B0);
    }
    qword_1EB220108 -= (int)off_1EB21C9F8(v2);
    --qword_1EB220150;
    uint64_t result = off_1EB21C9E8(v2);
    uint64_t v2 = xmmword_1EB2201B0;
    if ((void)xmmword_1EB2201B0)
    {
      int v3 = &xmmword_1EB21CA50;
      goto LABEL_7;
    }
  }
LABEL_8:
  *(void *)(v1 + 24) = 0;
  *(unsigned char *)uint64_t v1 = 1;
  return result;
}

void *sub_1B0D15C20(void *result, void *a2)
{
  uint64_t v2 = a2;
  if (result[64] > (unint64_t)a2)
  {
    if (result[62] <= (unint64_t)a2)
    {
      *a2 = result[61];
      result[61] = a2;
      return result;
    }
    if (result[63] <= (unint64_t)a2)
    {
      *a2 = result[59];
      result[59] = a2;
      return result;
    }
  }
  if (result[102])
  {
    return (void *)sub_1B0D05D48((uint64_t)result, (unint64_t)a2);
  }
  if (!a2) {
    return result;
  }
  int v3 = &off_1EB21C9E8;
  if (!dword_1EB21C9C0) {
    goto LABEL_15;
  }
  if ((void)xmmword_1EB2201B0) {
    xmmword_1EB21CA40(xmmword_1EB2201B0);
  }
  qword_1EB220108 -= (int)off_1EB21C9F8(v2);
  --qword_1EB220150;
  uint64_t result = (void *)off_1EB21C9E8(v2);
  uint64_t v2 = (void *)xmmword_1EB2201B0;
  if ((void)xmmword_1EB2201B0)
  {
    int v3 = &xmmword_1EB21CA50;
LABEL_15:
    uint64_t v4 = (uint64_t (*)(void *))*v3;
    return (void *)v4(v2);
  }
  return result;
}

void *sub_1B0D15D7C(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  if ((*(unsigned char *)(v4 + 4) & 0x10) != 0) {
    sub_1B0D15C20(a1, (void *)v4);
  }

  return sub_1B0D15C20(a1, a2);
}

void *sub_1B0D15DCC(void *a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 32))
  {
    uint64_t v4 = *(void **)(a2 + 40);
    if (v4) {
      sub_1B0D05C10(a1, v4);
    }
  }

  return sub_1B0D15C20(a1, (void *)a2);
}

void *sub_1B0D15E20(void *result)
{
  uint64_t v1 = (void *)*result;
  int v2 = *((_DWORD *)result + 6) - 1;
  *((_DWORD *)result + 6) = v2;
  if (!v2)
  {
    int v3 = result;
    uint64_t v4 = result[2];
    unsigned int v5 = v1;
    if (v4)
    {
      (*(void (**)(uint64_t))(*(void *)v4 + 32))(v4);
      unsigned int v5 = (void *)*v3;
    }
    uint64_t v6 = v3[1];
    int v7 = *(_DWORD *)(v6 + 16) - 1;
    *(_DWORD *)(v6 + 16) = v7;
    if (!v7)
    {
      uint64_t v8 = *(void (**)(void))(v6 + 32);
      if (v8) {
        v8(*(void *)(v6 + 24));
      }
      sub_1B0D05C10(v5, (void *)v6);
    }
    return sub_1B0D05C10(v1, v3);
  }
  return result;
}

uint64_t sub_1B0D15ED0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  if (*(int *)v4 >= 2 && (unsigned int v5 = *(uint64_t (**)(void))(v4 + 136)) != 0)
  {
    uint64_t result = v5();
    uint64_t v7 = 0;
  }
  else
  {
    double v9 = 0.0;
    uint64_t result = (*(uint64_t (**)(uint64_t, double *))(v4 + 120))(v4, &v9);
    uint64_t v7 = (uint64_t)(v9 * 86400000.0);
  }
  *(void *)&double v9 = 1000000 * (v7 - *(void *)(a2 + 184));
  uint64_t v8 = (uint64_t (*)(uint64_t, void))a1[32];
  if (v8) {
    uint64_t result = v8(a1[33], *(void *)(a2 + 320));
  }
  if ((*((unsigned char *)a1 + 110) & 2) != 0) {
    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, double *))a1[30])(2, a1[31], a2, &v9);
  }
  *(void *)(a2 + 184) = 0;
  return result;
}

uint64_t sub_1B0D15FA0()
{
  uint64_t v0 = getenv("SQLITE_ACCEPTABLE_RATIO_VM_STEP_TO_STEP");
  if (!v0) {
    uint64_t v0 = "10000.0";
  }
  qword_1EB220328 = atof(v0);
  uint64_t v1 = getenv("SQLITE_ACCEPTABLE_OVERALL_VM_STEP");
  if (!v1) {
    uint64_t v1 = "50000";
  }
  uint64_t result = atoll(v1);
  qword_1EB220330 = result;
  return result;
}

uint64_t sub_1B0D16004(uint64_t a1)
{
  uint64_t v1 = *(void *)a1;
  uint64_t v2 = *(unsigned int *)(a1 + 52);
  if (*(void *)(a1 + 168))
  {
    ++*(unsigned char *)(v1 + 104);
    if (off_1E9B52208) {
      off_1E9B52208(a1);
    }
    uint64_t v4 = *(void *)(v1 + 416);
    if (!v4)
    {
      uint64_t v4 = sub_1B0D05DC0(v1, 0x40uLL);
      if (!v4)
      {
        *(void *)(v1 + 416) = 0;
        goto LABEL_8;
      }
      *(_OWORD *)(v4 + 32) = 0u;
      *(_OWORD *)(v4 + 48) = 0u;
      *(_OWORD *)uint64_t v4 = 0u;
      *(_OWORD *)(v4 + 16) = 0u;
      *(_WORD *)(v4 + 20) = 1;
      *(void *)(v4 + 24) = v1;
      *(void *)(v1 + 416) = v4;
    }
    uint64_t v4 = sub_1B0C79BBC(v4, *(char **)(a1 + 168), -1, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
LABEL_8:
    if (off_1E9B52210) {
      off_1E9B52210(v4);
    }
    --*(unsigned char *)(v1 + 104);
    goto LABEL_11;
  }
  uint64_t v6 = *(void *)(v1 + 416);
  if (v6)
  {
    if ((*(_WORD *)(v6 + 20) & 0x9000) != 0) {
      sub_1B0D18138((int *)v6);
    }
    else {
      *(_WORD *)(v6 + 20) = 1;
    }
  }
LABEL_11:
  *(_DWORD *)(v1 + 80) = v2;
  *(_DWORD *)(v1 + 84) = -1;
  return v2;
}

_DWORD *sub_1B0D160FC(_DWORD *result)
{
  int v1 = result[69];
  if (v1)
  {
    uint64_t v2 = result;
    uint64_t v3 = *(unsigned int *)(*(void *)result + 40);
    if ((int)v3 >= 1)
    {
      uint64_t v4 = *(void *)(*(void *)result + 32);
      if (v1)
      {
        uint64_t result = *(_DWORD **)(v4 + 8);
        if (result)
        {
          if (*((unsigned char *)result + 17))
          {
            ++result[5];
            if (!*((unsigned char *)result + 18)) {
              uint64_t result = (_DWORD *)sub_1B0D12478((uint64_t)result);
            }
          }
        }
      }
      if (v3 >= 3)
      {
        unsigned int v5 = (_DWORD **)(v4 + 72);
        for (uint64_t i = 2; i != v3; ++i)
        {
          if ((v2[69] >> i))
          {
            uint64_t result = *v5;
            if (*v5)
            {
              if (*((unsigned char *)result + 17))
              {
                ++result[5];
                if (!*((unsigned char *)result + 18)) {
                  uint64_t result = (_DWORD *)sub_1B0D12478((uint64_t)result);
                }
              }
            }
          }
          v5 += 4;
        }
      }
    }
  }
  return result;
}

void *sub_1B0D161C8(void *result)
{
  int v1 = result;
  for (uint64_t i = (void *)result[95]; i; uint64_t i = (void *)v1[95])
  {
    v1[95] = i[3];
    uint64_t result = sub_1B0D05C10(v1, i);
  }
  *(void *)((char *)v1 + 788) = 0;
  *((unsigned char *)v1 + 109) = 0;
  return result;
}

uint64_t sub_1B0D16214(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2)
  {
    if (!(((uint64_t)(*(void *)(*(void *)a1 + 808) + *(void *)(*(void *)a1 + 800)) < 0) ^ __OFADD__(*(void *)(*(void *)a1 + 808), *(void *)(*(void *)a1 + 800)) | (*(void *)(*(void *)a1 + 808) + *(void *)(*(void *)a1 + 800) == 0))) {
      goto LABEL_3;
    }
    return 0;
  }
  if (*(uint64_t *)(a1 + 80) < 1) {
    return 0;
  }
LABEL_3:
  *(_DWORD *)(a1 + 52) = 787;
  *(unsigned char *)(a1 + 264) = 2;
  sub_1B0D17334((uint64_t *)a1, "FOREIGN KEY constraint failed", a3, a4, a5, a6, a7, a8, v10);
  if (*(char *)(a1 + 266) >= 0) {
    return 1;
  }
  else {
    return 787;
  }
}

uint64_t sub_1B0D1628C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  int v3 = *(_DWORD *)(*a1 + 40);
  if (v3 >= 1)
  {
    for (uint64_t i = 0; i < v3; ++i)
    {
      unsigned int v5 = *(unsigned __int8 **)(*(void *)(v2 + 120) + 8 * i);
      if (v5)
      {
        sub_1B0D1637C((void **)v2, v5);
        *(void *)(*(void *)(v2 + 120) + 8 * i) = 0;
        int v3 = *(_DWORD *)(v2 + 40);
      }
    }
  }
  uint64_t v6 = a1[3];
  *(void *)(v2 + 136) = a1[2];
  int v7 = *((_DWORD *)a1 + 21);
  *(_DWORD *)(v2 + 144) = *((_DWORD *)a1 + 20);
  *(void *)(v2 + 104) = v6;
  *(void *)(v2 + 120) = a1[4];
  int v8 = *((_DWORD *)a1 + 18);
  *(_DWORD *)(v2 + 36) = v7;
  *(_DWORD *)(v2 + 40) = v8;
  double v9 = *(void **)v2;
  v9[7] = a1[7];
  uint64_t v10 = a1[13];
  *(void *)(v2 + 56) = a1[12];
  v9[15] = v10;
  while (1)
  {
    uint64_t v11 = *(void **)(v2 + 384);
    if (!v11) {
      break;
    }
    int v12 = (void (*)(void))v11[2];
    if (v12) {
      v12(v11[1]);
    }
    *(void *)(v2 + 384) = v11[3];
    sub_1B0D05C10(v9, v11);
  }
  *(void *)(v2 + 384) = a1[8];
  a1[8] = 0;
  return *((unsigned int *)a1 + 19);
}

void **sub_1B0D1637C(void **result, unsigned __int8 *a2)
{
  if ((a2[5] & 0x10) != 0)
  {
    return (void **)sub_1B0D166D8(result, (uint64_t)a2);
  }
  int v3 = *a2;
  if (!*a2)
  {
    int v8 = (void *)*((void *)a2 + 5);
    uint64_t v9 = v8[1];
    if (!v9) {
      return result;
    }
    uint64_t v10 = v8[4];
    if (*(unsigned char *)(v9 + 17))
    {
      ++*(_DWORD *)(v9 + 20);
      if (!*(unsigned char *)(v9 + 18)) {
        sub_1B0D12478(v9);
      }
    }
    uint64_t v11 = *(void **)(v10 + 16);
    int v12 = (void *)(v10 + 16);
    if (v11 != v8)
    {
      while (1)
      {
        uint64_t v13 = (void *)v11[5];
        if (v13 == v8) {
          break;
        }
        uint64_t v11 = (void *)v11[5];
        if (!v13) {
          goto LABEL_30;
        }
      }
      int v12 = v11 + 5;
    }
    void *v12 = v8[5];
LABEL_30:
    uint64_t result = (void **)sub_1B0D144AC((uint64_t)v8);
    if (!*(unsigned char *)(v10 + 36))
    {
      uint64_t v18 = *(void *)(v10 + 24);
      if (v18)
      {
        *(void *)(v10 + 24) = 0;
        uint64_t result = (void **)sub_1B0D05580(*(void *)(v18 + 112));
      }
    }
    uint64_t v19 = v8[2];
    if (v19)
    {
      uint64_t v20 = &off_1EB21C9E8;
      if (!dword_1EB21C9C0)
      {
LABEL_39:
        uint64_t result = (void **)(*v20)(v19);
        goto LABEL_40;
      }
      if ((void)xmmword_1EB2201B0) {
        xmmword_1EB21CA40(xmmword_1EB2201B0);
      }
      qword_1EB220108 -= (int)off_1EB21C9F8(v19);
      --qword_1EB220150;
      uint64_t result = (void **)off_1EB21C9E8(v19);
      uint64_t v19 = xmmword_1EB2201B0;
      if ((void)xmmword_1EB2201B0)
      {
        uint64_t v20 = &xmmword_1EB21CA50;
        goto LABEL_39;
      }
    }
LABEL_40:
    uint64_t v21 = v8[3];
    if (v21)
    {
      uint64_t v22 = &off_1EB21C9E8;
      if (dword_1EB21C9C0)
      {
        if ((void)xmmword_1EB2201B0) {
          xmmword_1EB21CA40(xmmword_1EB2201B0);
        }
        qword_1EB220108 -= (int)off_1EB21C9F8(v21);
        --qword_1EB220150;
        uint64_t result = (void **)off_1EB21C9E8(v21);
        uint64_t v21 = xmmword_1EB2201B0;
        if (!(void)xmmword_1EB2201B0) {
          goto LABEL_47;
        }
        uint64_t v22 = &xmmword_1EB21CA50;
      }
      uint64_t result = (void **)(*v22)(v21);
    }
LABEL_47:
    if ((*(unsigned char *)(v10 + 32) & 4) != 0 && !*(void *)(v10 + 16))
    {
      uint64_t result = (void **)sub_1B0CC70E4(v9, v17);
    }
    else if (*(unsigned char *)(v9 + 17))
    {
      int v23 = *(_DWORD *)(v9 + 20) - 1;
      *(_DWORD *)(v9 + 20) = v23;
      if (!v23) {
        uint64_t result = (void **)sub_1B0D12558(v9);
      }
    }
    v8[1] = 0;
    return result;
  }
  if (v3 == 2)
  {
    uint64_t v14 = (uint64_t **)*((void *)a2 + 5);
    uint64_t v15 = **v14;
    --*((_DWORD *)*v14 + 2);
    uint64_t v16 = *(uint64_t (**)(void))(v15 + 56);
    return (void **)v16();
  }
  else if (v3 == 1)
  {
    uint64_t v4 = (void *)*((void *)a2 + 5);
    if (v4)
    {
      unsigned int v5 = *result;
      sub_1B0D168C0(*result, *((void *)a2 + 5));
      uint64_t v6 = v4[8];
      if (v6)
      {
        int v7 = &off_1EB21C9E8;
        if (dword_1EB21C9C0)
        {
          if ((void)xmmword_1EB2201B0) {
            xmmword_1EB21CA40(xmmword_1EB2201B0);
          }
          qword_1EB220108 -= (int)off_1EB21C9F8(v6);
          --qword_1EB220150;
          off_1EB21C9E8(v6);
          uint64_t v6 = xmmword_1EB2201B0;
          if (!(void)xmmword_1EB2201B0) {
            goto LABEL_13;
          }
          int v7 = &xmmword_1EB21CA50;
        }
        (*v7)(v6);
      }
LABEL_13:
      uint64_t result = (void **)sub_1B0D05C10(v5, v4);
      *((void *)a2 + 5) = 0;
    }
  }
  return result;
}

uint64_t sub_1B0D166D8(void **a1, uint64_t a2)
{
  uint64_t v4 = *(uint64_t **)(a2 + 104);
  *(unsigned char *)(a2 + 5) &= ~0x10u;
  *(void *)(a2 + 104) = 0;
  uint64_t v5 = *v4;
  if (*v4)
  {
    unint64_t v8 = *(void *)(v5 - 8);
    int v7 = (void *)(v5 - 8);
    unint64_t v6 = v8;
    if (v8 < 2)
    {
      uint64_t v9 = &off_1EB21C9E8;
      if (dword_1EB21C9C0)
      {
        if ((void)xmmword_1EB2201B0) {
          xmmword_1EB21CA40(xmmword_1EB2201B0);
        }
        qword_1EB220108 -= (int)off_1EB21C9F8(v7);
        --qword_1EB220150;
        off_1EB21C9E8(v7);
        int v7 = (void *)xmmword_1EB2201B0;
        if (!(void)xmmword_1EB2201B0) {
          goto LABEL_10;
        }
        uint64_t v9 = &xmmword_1EB21CA50;
      }
      (*v9)(v7);
    }
    else
    {
      *int v7 = v6 - 1;
    }
LABEL_10:
    *uint64_t v4 = 0;
  }
  sub_1B0D05C10(*a1, v4);

  return sub_1B0D1637C(a1, a2);
}

uint64_t sub_1B0D167E8(uint64_t result)
{
  uint64_t v2 = (void *)(result - 8);
  unint64_t v1 = *(void *)(result - 8);
  if (v1 >= 2)
  {
    *uint64_t v2 = v1 - 1;
    return result;
  }
  int v3 = &off_1EB21C9E8;
  if (!dword_1EB21C9C0) {
    goto LABEL_9;
  }
  if ((void)xmmword_1EB2201B0) {
    xmmword_1EB21CA40(xmmword_1EB2201B0);
  }
  qword_1EB220108 -= (int)off_1EB21C9F8(v2);
  --qword_1EB220150;
  uint64_t result = off_1EB21C9E8(v2);
  uint64_t v2 = (void *)xmmword_1EB2201B0;
  if ((void)xmmword_1EB2201B0)
  {
    int v3 = &xmmword_1EB21CA50;
LABEL_9:
    uint64_t v4 = (uint64_t (*)(void *))*v3;
    return v4(v2);
  }
  return result;
}

void sub_1B0D168C0(void *a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 91))
  {
    unint64_t v3 = *(unsigned __int8 *)(a2 + 91) + 1;
    uint64_t v4 = a2 + 104 * *(unsigned __int8 *)(a2 + 91) - 8;
    do
    {
      uint64_t v5 = *(void *)v4;
      if (!*(void *)v4) {
        goto LABEL_5;
      }
      if (*(void *)v5) {
        (*(void (**)(void))v5)(*(void *)(v5 + 8));
      }
      unint64_t v6 = &off_1EB21C9E8;
      if (dword_1EB21C9C0)
      {
        if ((void)xmmword_1EB2201B0) {
          xmmword_1EB21CA40(xmmword_1EB2201B0);
        }
        qword_1EB220108 -= (int)off_1EB21C9F8(v5);
        --qword_1EB220150;
        off_1EB21C9E8(v5);
        uint64_t v5 = xmmword_1EB2201B0;
        if (!(void)xmmword_1EB2201B0) {
          goto LABEL_4;
        }
        unint64_t v6 = &xmmword_1EB21CA50;
      }
      (*v6)(v5);
LABEL_4:
      *(_DWORD *)(v4 + 8) = 0;
      *(void *)uint64_t v4 = 0;
LABEL_5:
      --v3;
      v4 -= 104;
    }
    while (v3 > 1);
  }
  uint64_t v7 = *(void *)(a2 + 16);
  if (v7)
  {
    sub_1B0D16DCC(v7);
    unint64_t v8 = *(void **)(a2 + 16);
    if (v8) {
      sub_1B0D05C10(a1, v8);
    }
    *(void *)(a2 + 16) = 0;
  }
  uint64_t v9 = *(int **)(a2 + 24);
  if (v9)
  {
    if (*v9 >= 1)
    {
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      do
      {
        sub_1B0D16DCC(*((void *)v9 + 3) + v10);
        ++v11;
        v10 += 80;
      }
      while (v11 < *v9);
    }
    int v12 = (void (**)(int *))&off_1EB21C9E8;
    if (!dword_1EB21C9C0) {
      goto LABEL_27;
    }
    if ((void)xmmword_1EB2201B0) {
      xmmword_1EB21CA40(xmmword_1EB2201B0);
    }
    qword_1EB220108 -= (int)off_1EB21C9F8(v9);
    --qword_1EB220150;
    off_1EB21C9E8(v9);
    uint64_t v9 = (int *)xmmword_1EB2201B0;
    if ((void)xmmword_1EB2201B0)
    {
      int v12 = (void (**)(int *))&xmmword_1EB21CA50;
LABEL_27:
      (*v12)(v9);
    }
  }
  *(void *)(a2 + 24) = 0;
  if (*(unsigned char *)(a2 + 91))
  {
    unint64_t v13 = 0;
    while (1)
    {
      uint64_t v14 = a2 + 104 * v13;
      uint64_t v15 = *(void **)(v14 + 120);
      if (v15) {
        sub_1B0D05C10(a1, v15);
      }
      uint64_t v16 = *(void *)(a2 + 104 * v13 + 136);
      if (!v16) {
        break;
      }
      double v17 = &off_1EB21C9E8;
      if (!dword_1EB21C9C0) {
        goto LABEL_40;
      }
      if ((void)xmmword_1EB2201B0) {
        xmmword_1EB21CA40(xmmword_1EB2201B0);
      }
      qword_1EB220108 -= (int)off_1EB21C9F8(v16);
      --qword_1EB220150;
      off_1EB21C9E8(v16);
      uint64_t v16 = xmmword_1EB2201B0;
      if ((void)xmmword_1EB2201B0)
      {
        double v17 = &xmmword_1EB21CA50;
LABEL_40:
        (*v17)(v16);
      }
LABEL_42:
      uint64_t v19 = *(void *)(a2 + 104 * v13 + 168);
      if (!v19) {
        goto LABEL_51;
      }
      if (*(void *)v19)
      {
        (*(void (**)(void))(*(void *)v19 + 8))(*(void *)(a2 + 104 * v13 + 168));
        *(void *)uint64_t v19 = 0;
      }
      uint64_t v20 = &off_1EB21C9E8;
      if (!dword_1EB21C9C0) {
        goto LABEL_50;
      }
      if ((void)xmmword_1EB2201B0) {
        xmmword_1EB21CA40(xmmword_1EB2201B0);
      }
      qword_1EB220108 -= (int)off_1EB21C9F8(v19);
      --qword_1EB220150;
      off_1EB21C9E8(v19);
      uint64_t v19 = xmmword_1EB2201B0;
      if ((void)xmmword_1EB2201B0)
      {
        uint64_t v20 = &xmmword_1EB21CA50;
LABEL_50:
        (*v20)(v19);
      }
LABEL_51:
      uint64_t v21 = *(void *)(a2 + 104 * v13 + 184);
      if (v21)
      {
        if (*(void *)v21)
        {
          (*(void (**)(void))(*(void *)v21 + 8))(*(void *)(a2 + 104 * v13 + 184));
          *(void *)uint64_t v21 = 0;
        }
        uint64_t v22 = &off_1EB21C9E8;
        if (dword_1EB21C9C0)
        {
          if ((void)xmmword_1EB2201B0) {
            xmmword_1EB21CA40(xmmword_1EB2201B0);
          }
          qword_1EB220108 -= (int)off_1EB21C9F8(v21);
          --qword_1EB220150;
          off_1EB21C9E8(v21);
          uint64_t v21 = xmmword_1EB2201B0;
          if (!(void)xmmword_1EB2201B0) {
            goto LABEL_31;
          }
          uint64_t v22 = &xmmword_1EB21CA50;
        }
        (*v22)(v21);
      }
LABEL_31:
      *(void *)(v14 + 192) = 0;
      *(_OWORD *)(v14 + 160) = 0u;
      *(_OWORD *)(v14 + 176) = 0u;
      *(_OWORD *)(v14 + 128) = 0u;
      *(_OWORD *)(v14 + 144) = 0u;
      *(_OWORD *)(v14 + 96) = 0u;
      *(_OWORD *)(v14 + 112) = 0u;
      *(void *)(a2 + 104 * v13++ + 112) = a2;
      if (v13 >= *(unsigned __int8 *)(a2 + 91)) {
        goto LABEL_66;
      }
    }
    uint64_t v18 = *(void *)(a2 + 104 * v13 + 128);
    if (!v18) {
      goto LABEL_42;
    }
    while (1)
    {
      uint64_t v23 = *(void *)(v18 + 8);
      uint64_t v24 = &off_1EB21C9E8;
      if (dword_1EB21C9C0)
      {
        if ((void)xmmword_1EB2201B0) {
          xmmword_1EB21CA40(xmmword_1EB2201B0);
        }
        qword_1EB220108 -= (int)off_1EB21C9F8(v18);
        --qword_1EB220150;
        off_1EB21C9E8(v18);
        uint64_t v18 = xmmword_1EB2201B0;
        if (!(void)xmmword_1EB2201B0) {
          goto LABEL_60;
        }
        uint64_t v24 = &xmmword_1EB21CA50;
      }
      (*v24)(v18);
LABEL_60:
      uint64_t v18 = v23;
      if (!v23) {
        goto LABEL_42;
      }
    }
  }
LABEL_66:
  if (!*(void *)(a2 + 64))
  {
    uint64_t v26 = *(void *)(a2 + 56);
    if (v26)
    {
      do
      {
        uint64_t v27 = *(void *)(v26 + 8);
        char v28 = &off_1EB21C9E8;
        if (dword_1EB21C9C0)
        {
          if ((void)xmmword_1EB2201B0) {
            xmmword_1EB21CA40(xmmword_1EB2201B0);
          }
          qword_1EB220108 -= (int)off_1EB21C9F8(v26);
          --qword_1EB220150;
          off_1EB21C9E8(v26);
          uint64_t v26 = xmmword_1EB2201B0;
          if (!(void)xmmword_1EB2201B0) {
            goto LABEL_73;
          }
          char v28 = &xmmword_1EB21CA50;
        }
        (*v28)(v26);
LABEL_73:
        uint64_t v26 = v27;
      }
      while (v27);
    }
  }
  *(void *)(a2 + 56) = 0;
  *(_DWORD *)(a2 + 72) = 0;
  *(unsigned char *)(a2 + 88) = 0;
  *(_DWORD *)(a2 + 80) = 0;
  *(_DWORD *)(a2 + 8) = 0;
  uint64_t v25 = *(void **)(a2 + 48);
  if (v25) {
    sub_1B0D05C10(a1, v25);
  }
  *(void *)(a2 + 48) = 0;
}

double sub_1B0D16DCC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    unint64_t v3 = &off_1EB21C9E8;
    if (!dword_1EB21C9C0)
    {
LABEL_7:
      (*v3)(v2);
      goto LABEL_8;
    }
    if ((void)xmmword_1EB2201B0) {
      xmmword_1EB21CA40(xmmword_1EB2201B0);
    }
    qword_1EB220108 -= (int)off_1EB21C9F8(v2);
    --qword_1EB220150;
    off_1EB21C9E8(v2);
    uint64_t v2 = xmmword_1EB2201B0;
    if ((void)xmmword_1EB2201B0)
    {
      unint64_t v3 = &xmmword_1EB21CA50;
      goto LABEL_7;
    }
  }
LABEL_8:
  uint64_t v4 = *(void *)(a1 + 48);
  if (!v4) {
    goto LABEL_15;
  }
  uint64_t v5 = &off_1EB21C9E8;
  if (!dword_1EB21C9C0) {
    goto LABEL_14;
  }
  if ((void)xmmword_1EB2201B0) {
    xmmword_1EB21CA40(xmmword_1EB2201B0);
  }
  qword_1EB220108 -= (int)off_1EB21C9F8(v4);
  --qword_1EB220150;
  off_1EB21C9E8(v4);
  uint64_t v4 = xmmword_1EB2201B0;
  if ((void)xmmword_1EB2201B0)
  {
    uint64_t v5 = &xmmword_1EB21CA50;
LABEL_14:
    (*v5)(v4);
  }
LABEL_15:
  if (*(void *)(a1 + 64)) {
    (*(void (**)(void, void))(**(void **)(a1 + 24) + 144))(*(void *)(a1 + 24), 0);
  }
  unint64_t v6 = *(uint64_t ***)(a1 + 72);
  if (!v6) {
    goto LABEL_63;
  }
  if (!*((_DWORD *)v6 + 8)) {
    goto LABEL_47;
  }
  uint64_t v7 = *v6;
  uint64_t v8 = **v6;
  if (v8)
  {
    if (*(void *)v8) {
      (*(void (**)(void))v8)(*(void *)(v8 + 8));
    }
    uint64_t v9 = &off_1EB21C9E8;
    if (dword_1EB21C9C0)
    {
      if ((void)xmmword_1EB2201B0) {
        xmmword_1EB21CA40(xmmword_1EB2201B0);
      }
      qword_1EB220108 -= (int)off_1EB21C9F8(v8);
      --qword_1EB220150;
      off_1EB21C9E8(v8);
      uint64_t v8 = xmmword_1EB2201B0;
      if (!(void)xmmword_1EB2201B0) {
        goto LABEL_28;
      }
      uint64_t v9 = &xmmword_1EB21CA50;
    }
    (*v9)(v8);
LABEL_28:
    *((_DWORD *)v7 + 2) = 0;
    *uint64_t v7 = 0;
  }
  uint64_t v10 = v6[5];
  if (v10)
  {
    if (*v10)
    {
      (*(void (**)(uint64_t *))(*v10 + 8))(v6[5]);
      *uint64_t v10 = 0;
    }
    uint64_t v11 = &off_1EB21C9E8;
    if (dword_1EB21C9C0)
    {
      if ((void)xmmword_1EB2201B0) {
        xmmword_1EB21CA40(xmmword_1EB2201B0);
      }
      qword_1EB220108 -= (int)off_1EB21C9F8(v10);
      --qword_1EB220150;
      off_1EB21C9E8(v10);
      uint64_t v10 = (uint64_t *)xmmword_1EB2201B0;
      if (!(void)xmmword_1EB2201B0) {
        goto LABEL_38;
      }
      uint64_t v11 = &xmmword_1EB21CA50;
    }
    (*v11)((uint64_t)v10);
  }
LABEL_38:
  int v12 = v6[7];
  if (!v12) {
    goto LABEL_47;
  }
  if (*v12)
  {
    (*(void (**)(uint64_t *))(*v12 + 8))(v6[7]);
    uint64_t *v12 = 0;
  }
  unint64_t v13 = &off_1EB21C9E8;
  if (!dword_1EB21C9C0) {
    goto LABEL_46;
  }
  if ((void)xmmword_1EB2201B0) {
    xmmword_1EB21CA40(xmmword_1EB2201B0);
  }
  qword_1EB220108 -= (int)off_1EB21C9F8(v12);
  --qword_1EB220150;
  off_1EB21C9E8(v12);
  int v12 = (uint64_t *)xmmword_1EB2201B0;
  if ((void)xmmword_1EB2201B0)
  {
    unint64_t v13 = &xmmword_1EB21CA50;
LABEL_46:
    (*v13)((uint64_t)v12);
  }
LABEL_47:
  uint64_t v14 = v6[1];
  if (v14)
  {
    if (*(int *)v14 >= 1)
    {
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      do
      {
        sub_1B0D16DCC(v14[3] + v15);
        ++v16;
        v15 += 80;
      }
      while (v16 < *(int *)v14);
    }
    double v17 = (void (**)(int *))&off_1EB21C9E8;
    if (dword_1EB21C9C0)
    {
      if ((void)xmmword_1EB2201B0) {
        xmmword_1EB21CA40(xmmword_1EB2201B0);
      }
      qword_1EB220108 -= (int)off_1EB21C9F8(v14);
      --qword_1EB220150;
      off_1EB21C9E8(v14);
      uint64_t v14 = (uint64_t *)xmmword_1EB2201B0;
      if (!(void)xmmword_1EB2201B0) {
        goto LABEL_57;
      }
      double v17 = (void (**)(int *))&xmmword_1EB21CA50;
    }
    (*v17)((int *)v14);
  }
LABEL_57:
  uint64_t v18 = (uint64_t (**)(uint64_t **))&off_1EB21C9E8;
  if (!dword_1EB21C9C0)
  {
LABEL_62:
    (*v18)(v6);
    goto LABEL_63;
  }
  if ((void)xmmword_1EB2201B0) {
    xmmword_1EB21CA40(xmmword_1EB2201B0);
  }
  qword_1EB220108 -= (int)off_1EB21C9F8(v6);
  --qword_1EB220150;
  off_1EB21C9E8(v6);
  unint64_t v6 = (uint64_t **)xmmword_1EB2201B0;
  if ((void)xmmword_1EB2201B0)
  {
    uint64_t v18 = (uint64_t (**)(uint64_t **))&xmmword_1EB21CA50;
    goto LABEL_62;
  }
LABEL_63:
  double result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t sub_1B0D17258(void *a1)
{
  unint64_t v1 = a1;
  if (*a1)
  {
    (*(void (**)(void *))(*a1 + 8))(a1);
    *unint64_t v1 = 0;
  }
  uint64_t v2 = &off_1EB21C9E8;
  if (!dword_1EB21C9C0) {
    goto LABEL_8;
  }
  if ((void)xmmword_1EB2201B0) {
    xmmword_1EB21CA40(xmmword_1EB2201B0);
  }
  qword_1EB220108 -= (int)off_1EB21C9F8(v1);
  --qword_1EB220150;
  uint64_t result = off_1EB21C9E8(v1);
  unint64_t v1 = (void *)xmmword_1EB2201B0;
  if ((void)xmmword_1EB2201B0)
  {
    uint64_t v2 = &xmmword_1EB21CA50;
LABEL_8:
    uint64_t v4 = (uint64_t (*)(void *))*v2;
    return v4(v1);
  }
  return result;
}

void *sub_1B0D17334(uint64_t *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v11 = (void *)a1[21];
  if (v11) {
    sub_1B0D05C10((void *)*a1, v11);
  }
  uint64_t result = sub_1B0D0E5DC(*a1, a2, &a9);
  a1[21] = (uint64_t)result;
  return result;
}

uint64_t sub_1B0D1738C(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(*(void *)result + 40);
  if ((int)v1 >= 1)
  {
    uint64_t v2 = result;
    uint64_t v3 = *(void *)(*(void *)result + 32);
    if (*(unsigned char *)(result + 276))
    {
      uint64_t result = *(void *)(v3 + 8);
      if (result)
      {
        if (*(unsigned char *)(result + 17))
        {
          int v4 = *(_DWORD *)(result + 20) - 1;
          *(_DWORD *)(result + 20) = v4;
          if (!v4) {
            uint64_t result = sub_1B0D12558(result);
          }
        }
      }
    }
    if (v1 >= 3)
    {
      uint64_t v5 = (uint64_t *)(v3 + 72);
      for (uint64_t i = 2; i != v1; ++i)
      {
        if ((*(_DWORD *)(v2 + 276) >> i))
        {
          uint64_t result = *v5;
          if (*v5)
          {
            if (*(unsigned char *)(result + 17))
            {
              int v7 = *(_DWORD *)(result + 20) - 1;
              *(_DWORD *)(result + 20) = v7;
              if (!v7) {
                uint64_t result = sub_1B0D12558(result);
              }
            }
          }
        }
        v5 += 4;
      }
    }
  }
  return result;
}

uint64_t sub_1B0D1744C(uint64_t a1, uint64_t a2, void *a3, int a4, uint64_t a5)
{
  size_t v10 = *(int *)(a1 + 4);
  uint64_t v11 = (void *)sub_1B0C7FC94(v10);
  int v12 = v11;
  if (!v11)
  {
    uint64_t v13 = 7;
    goto LABEL_10;
  }
  bzero(v11, v10);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, void *, void, uint64_t))(a1 + 40))(a1, a2, v12, a4 & 0x1787F7F, a5);
  if (v13)
  {
    uint64_t v14 = (uint64_t (**)(void *))&off_1EB21C9E8;
    if (!dword_1EB21C9C0)
    {
LABEL_8:
      (*v14)(v12);
      int v12 = 0;
      goto LABEL_10;
    }
    if ((void)xmmword_1EB2201B0) {
      xmmword_1EB21CA40(xmmword_1EB2201B0);
    }
    qword_1EB220108 -= (int)off_1EB21C9F8(v12);
    --qword_1EB220150;
    off_1EB21C9E8(v12);
    int v12 = (void *)xmmword_1EB2201B0;
    if ((void)xmmword_1EB2201B0)
    {
      uint64_t v14 = (uint64_t (**)(void *))&xmmword_1EB21CA50;
      goto LABEL_8;
    }
  }
LABEL_10:
  *a3 = v12;
  return v13;
}

uint64_t sub_1B0D17574(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(const char **)(a2 + 16);
  if (v2)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)result;
    unint64_t v6 = *(void **)(result + 168);
    if (v6)
    {
      uint64_t result = (uint64_t)sub_1B0D05C10(*(void **)result, v6);
      uint64_t v2 = *(const char **)(a2 + 16);
      if (!v2)
      {
        *(void *)(v4 + 168) = 0;
        goto LABEL_17;
      }
    }
    size_t v7 = strlen(v2);
    unint64_t v8 = v7 + 1;
    if (v5)
    {
      uint64_t result = sub_1B0D05DC0(v5, v8);
      uint64_t v9 = (void *)result;
      if (!result) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t result = sub_1B0C7FC94(v7 + 1);
      uint64_t v9 = (void *)result;
      if (!result)
      {
LABEL_7:
        uint64_t v10 = *(void *)(a2 + 16);
        *(void *)(v4 + 168) = v9;
        if (v10)
        {
          uint64_t v11 = &off_1EB21C9E8;
          if (dword_1EB21C9C0)
          {
            if ((void)xmmword_1EB2201B0) {
              xmmword_1EB21CA40(xmmword_1EB2201B0);
            }
            qword_1EB220108 -= (int)off_1EB21C9F8(v10);
            --qword_1EB220150;
            uint64_t result = off_1EB21C9E8(v10);
            uint64_t v10 = xmmword_1EB2201B0;
            if (!(void)xmmword_1EB2201B0) {
              goto LABEL_17;
            }
            uint64_t v11 = &xmmword_1EB21CA50;
          }
          uint64_t result = (*v11)(v10);
        }
LABEL_17:
        *(void *)(a2 + 16) = 0;
        return result;
      }
    }
    uint64_t result = (uint64_t)memcpy(v9, v2, v8);
    goto LABEL_7;
  }
  return result;
}

uint64_t sub_1B0D176AC(uint64_t a1, int a2, double a3)
{
  uint64_t v5 = *(void *)a1;
  int v6 = *(_DWORD *)(a1 + 64) - 1;
  int v7 = *(_DWORD *)(*(void *)a1 + 40);
  if (v7 <= 0)
  {
    --*(_DWORD *)(v5 + 792);
    *(_DWORD *)(a1 + 64) = 0;
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 8;
    do
    {
      uint64_t v12 = *(void *)(v5 + 32);
      uint64_t v13 = *(void *)(v12 + v10);
      if (v13)
      {
        if (a2 != 2 || (unsigned int v11 = sub_1B0CD2748(*(void *)(v12 + v10), 2, v6, a3)) == 0) {
          unsigned int v11 = sub_1B0CD2748(v13, 1, v6, a3);
        }
        if (v9) {
          uint64_t v9 = v9;
        }
        else {
          uint64_t v9 = v11;
        }
        int v7 = *(_DWORD *)(v5 + 40);
      }
      ++v8;
      v10 += 32;
    }
    while (v8 < v7);
    --*(_DWORD *)(v5 + 792);
    *(_DWORD *)(a1 + 64) = 0;
    if (v9)
    {
      if (a2 != 2) {
        return v9;
      }
      goto LABEL_20;
    }
  }
  if (a2 == 2 && (uint64_t v9 = sub_1B0D177E0(v5, 2, v6), v9) || (uint64_t v9 = sub_1B0D177E0(v5, 1, v6), a2 == 2)) {
LABEL_20:
  }
    *(_OWORD *)(v5 + 800) = *(_OWORD *)(a1 + 88);
  return v9;
}

uint64_t sub_1B0D177E0(uint64_t a1, int a2, int a3)
{
  if (*(void *)(a1 + 600))
  {
    uint64_t v6 = 0;
    int v7 = a3 + 1;
    while (1)
    {
      if (v6 >= *(int *)(a1 + 564)) {
        return 0;
      }
      uint64_t v9 = *(void *)(*(void *)(a1 + 600) + 8 * v6);
      if (*(void *)(v9 + 16))
      {
        uint64_t v10 = **(void **)(v9 + 8);
        if (*(int *)v10 >= 2) {
          break;
        }
      }
      uint64_t v8 = 0;
LABEL_4:
      ++v6;
      if (v8) {
        return v8;
      }
    }
    int v11 = *(_DWORD *)(v9 + 24) + 1;
    *(_DWORD *)(v9 + 24) = v11;
    if (a2 == 2)
    {
      uint64_t v12 = *(uint64_t (**)(void))(v10 + 176);
      if (!v12) {
        goto LABEL_17;
      }
    }
    else if (a2)
    {
      uint64_t v12 = *(uint64_t (**)(void))(v10 + 168);
      if (!v12) {
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v12 = *(uint64_t (**)(void))(v10 + 160);
      *(_DWORD *)(v9 + 32) = v7;
      if (!v12) {
        goto LABEL_17;
      }
    }
    if (*(_DWORD *)(v9 + 32) > a3)
    {
      uint64_t v13 = *(void *)(a1 + 48) & 0x10000000;
      *(void *)(a1 + 48) &= ~0x10000000uLL;
      uint64_t v8 = v12();
      *(void *)(a1 + 48) |= v13;
      int v11 = *(_DWORD *)(v9 + 24);
      goto LABEL_18;
    }
LABEL_17:
    uint64_t v8 = 0;
LABEL_18:
    uint64_t v14 = *(void **)v9;
    int v15 = v11 - 1;
    *(_DWORD *)(v9 + 24) = v15;
    if (!v15)
    {
      uint64_t v16 = *(void *)(v9 + 16);
      double v17 = v14;
      if (v16)
      {
        (*(void (**)(uint64_t))(*(void *)v16 + 32))(v16);
        double v17 = *(void **)v9;
      }
      uint64_t v18 = *(void *)(v9 + 8);
      int v19 = *(_DWORD *)(v18 + 16) - 1;
      *(_DWORD *)(v18 + 16) = v19;
      if (!v19)
      {
        uint64_t v20 = *(void (**)(void))(v18 + 32);
        if (v20) {
          v20(*(void *)(v18 + 24));
        }
        sub_1B0D05C10(v17, (void *)v18);
      }
      sub_1B0D05C10(v14, (void *)v9);
    }
    goto LABEL_4;
  }
  return 0;
}

uint64_t sub_1B0D17968(uint64_t a1, int a2, int a3, double a4)
{
  uint64_t v4 = *(unsigned int *)(a1 + 48);
  if (v4) {
    return v4;
  }
  int v6 = *(_DWORD *)(a1 + 128);
  if (v6 <= a3) {
    return 0;
  }
  if (a2 == 1) {
    int v8 = a3;
  }
  else {
    int v8 = a3 + 1;
  }
  if (v8 < v6)
  {
    if (a2 == 1) {
      uint64_t v9 = a3;
    }
    else {
      uint64_t v9 = a3 + 1;
    }
    uint64_t v10 = 56 * v9 + 16;
    do
    {
      sub_1B0CD2868(*(void *)(*(void *)(a1 + 120) + v10));
      ++v9;
      v10 += 56;
    }
    while (v9 < *(int *)(a1 + 128));
  }
  *(_DWORD *)(a1 + 128) = v8;
  if (a2 == 1)
  {
    uint64_t v24 = *(void *)(a1 + 120);
    if (*(_DWORD *)(v24 + 56 * v8 + 32))
    {
      uint64_t v25 = *(void ***)(a1 + 88);
      if (*v25)
      {
        if (*v25 == &unk_1F09A5508) {
          uint64_t v4 = sub_1B0CD52E4((uint64_t)v25, (*(void *)(a1 + 200) + 4) * *(unsigned int *)(v24 + 56 * v8 + 28));
        }
        else {
          uint64_t v4 = 0;
        }
        *(_DWORD *)(a1 + 60) = *(_DWORD *)(v24 + 56 * v8 + 28);
        return v4;
      }
    }
    return 0;
  }
  uint64_t v11 = *(void *)(a1 + 344);
  if (!v11 && !**(void **)(a1 + 80)) {
    return 0;
  }
  if (!v8 || (uint64_t v12 = *(void *)(a1 + 120)) == 0)
  {
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 36);
    *(unsigned char *)(a1 + 23) = *(unsigned char *)(a1 + 16);
    if (!v11)
    {
      uint64_t v19 = 0;
      uint64_t v21 = (uint64_t *)(a1 + 96);
      uint64_t v22 = *(void *)(a1 + 96);
      char v23 = 1;
      *(void *)(a1 + 96) = 0;
      goto LABEL_65;
    }
    if (*(unsigned char *)(v11 + 64))
    {
      unsigned int v27 = *(_DWORD *)(v11 + 88);
      char v28 = **(long long ***)(v11 + 48);
      long long v29 = v28[2];
      long long v30 = *v28;
      *(_OWORD *)(v11 + 88) = v28[1];
      *(_OWORD *)(v11 + 72) = v30;
      *(_OWORD *)(v11 + 104) = v29;
      int v31 = *(_DWORD *)(v11 + 88);
      if (v31 + 1 <= v27)
      {
        unsigned int v32 = v31 + 4097;
        do
        {
          unint64_t v37 = v32 + 0xFFFFFFFF021;
          char v38 = *(void **)(v11 + 48);
          if ((v37 & 0xFFFFFFFF000) != 0) {
            uint64_t v33 = (unsigned int *)(v38[(int)(v37 >> 12)] + 4 * (((_WORD)v32 - 4063) & 0xFFF));
          }
          else {
            uint64_t v33 = (unsigned int *)(*v38 + 4 * (v32 - 4096) + 132);
          }
          uint64_t v34 = sub_1B0D17E64(a1, *v33);
          unsigned int v35 = v32 - 4095;
          ++v32;
          if (v34) {
            BOOL v36 = 1;
          }
          else {
            BOOL v36 = v35 > v27;
          }
        }
        while (!v36);
        uint64_t v4 = v34;
        int v31 = *(_DWORD *)(v11 + 88);
      }
      else
      {
        uint64_t v4 = 0;
      }
      if (v27 != v31) {
        sub_1B0D10C78(v11);
      }
    }
    else
    {
      uint64_t v4 = 0;
    }
    uint64_t v39 = sub_1B0D13A30(*(uint64_t **)(a1 + 336));
    if (v4) {
      BOOL v40 = 1;
    }
    else {
      BOOL v40 = v39 == 0;
    }
    if (!v40)
    {
      do
      {
        uint64_t v41 = *(void *)(v39 + 32);
        uint64_t v42 = sub_1B0D17E64(a1, *(unsigned int *)(v39 + 48));
        uint64_t v4 = v42;
        if (v41) {
          BOOL v43 = v42 == 0;
        }
        else {
          BOOL v43 = 0;
        }
        uint64_t v39 = v41;
      }
      while (v43);
    }
    return v4;
  }
  uint64_t v13 = v8 - 1;
  uint64_t v14 = v12 + 56 * v13;
  int v17 = *(_DWORD *)(v14 + 24);
  int v15 = (int *)(v14 + 24);
  int v16 = v17;
  uint64_t v18 = (_OWORD *)sub_1B0C7FC94(512);
  if (!v18) {
    return 7;
  }
  uint64_t v11 = (uint64_t)v18;
  a4 = 0.0;
  v18[30] = 0u;
  v18[31] = 0u;
  uint64_t v19 = v12 + 56 * v13;
  v18[28] = 0u;
  v18[29] = 0u;
  v18[26] = 0u;
  v18[27] = 0u;
  v18[24] = 0u;
  v18[25] = 0u;
  v18[22] = 0u;
  v18[23] = 0u;
  v18[20] = 0u;
  v18[21] = 0u;
  v18[18] = 0u;
  v18[19] = 0u;
  v18[16] = 0u;
  v18[17] = 0u;
  v18[14] = 0u;
  v18[15] = 0u;
  v18[12] = 0u;
  v18[13] = 0u;
  v18[10] = 0u;
  v18[11] = 0u;
  v18[8] = 0u;
  v18[9] = 0u;
  v18[6] = 0u;
  v18[7] = 0u;
  v18[4] = 0u;
  v18[5] = 0u;
  void v18[2] = 0u;
  v18[3] = 0u;
  *uint64_t v18 = 0u;
  v18[1] = 0u;
  *(_DWORD *)uint64_t v18 = v16;
  int v20 = *v15;
  uint64_t v21 = (uint64_t *)(a1 + 96);
  uint64_t v22 = *(void *)(a1 + 96);
  *(_DWORD *)(a1 + 32) = v20;
  *(unsigned char *)(a1 + 23) = *(unsigned char *)(a1 + 16);
  if (*(void *)(a1 + 344))
  {
    char v23 = 0;
    uint64_t *v21 = 0;
    goto LABEL_65;
  }
  if (*(void *)(v12 + 56 * v13 + 8)) {
    uint64_t v44 = *(void *)(v12 + 56 * v13 + 8);
  }
  else {
    uint64_t v44 = v22;
  }
  uint64_t *v21 = *(void *)v19;
  while (*v21 < v44)
  {
    uint64_t v45 = sub_1B0CDB048(a1, (void *)(a1 + 96), (unsigned int *)v11, 1, 1);
    if (v45)
    {
      uint64_t v4 = v45;
      goto LABEL_80;
    }
  }
  char v23 = 0;
LABEL_65:
  while (*v21 < v22)
  {
    LODWORD(v56) = 0;
    *(float *)&a4 = sub_1B0CDAD0C(a1, 0, v22, &v56, &v57, a4);
    uint64_t v4 = v46;
    LODWORD(v47) = v56;
    if (v56)
    {
      if (!v46) {
        goto LABEL_68;
      }
    }
    else
    {
      uint64_t v50 = *(void *)(a1 + 104) + *(unsigned int *)(a1 + 184);
      if (v50 == *(void *)(a1 + 96))
      {
        uint64_t v47 = (v22 - v50) / (*(void *)(a1 + 200) + 8);
        if (!v46)
        {
LABEL_68:
          if (v47)
          {
            unsigned int v48 = 1;
            while (*v21 < v22)
            {
              uint64_t v4 = sub_1B0CDB048(a1, v21, (unsigned int *)v11, 1, 1);
              if (!v4 && v48++ < v47) {
                continue;
              }
              goto LABEL_64;
            }
            uint64_t v4 = 0;
          }
        }
      }
    }
LABEL_64:
    if (v4) {
      goto LABEL_79;
    }
  }
  uint64_t v4 = 0;
LABEL_79:
  if ((v23 & 1) == 0)
  {
LABEL_80:
    uint64_t v51 = *(unsigned int *)(v19 + 28);
    uint64_t v56 = (*(void *)(a1 + 200) + 4) * v51;
    char v52 = *(_DWORD **)(a1 + 344);
    if (v52)
    {
      if (*(_DWORD *)(v19 + 48) == v52[34])
      {
        unsigned int v53 = *(_DWORD *)(v19 + 36);
      }
      else
      {
        unsigned int v53 = 0;
        *(_DWORD *)(v19 + 36) = 0;
        *(_DWORD *)(v19 + 48) = v52[34];
      }
      if (v53 < v52[22])
      {
        v52[22] = v53;
        v52[24] = *(_DWORD *)(v19 + 40);
        v52[25] = *(_DWORD *)(v19 + 44);
        sub_1B0D10C78((uint64_t)v52);
        LODWORD(v51) = *(_DWORD *)(v19 + 28);
      }
      goto LABEL_88;
    }
    if (!v4)
    {
LABEL_88:
      int v54 = v51 - 1;
      while (++v54 < *(_DWORD *)(a1 + 60))
      {
        uint64_t v55 = sub_1B0CDB048(a1, &v56, (unsigned int *)v11, 0, 1);
        if (v55)
        {
          uint64_t v4 = v55;
          goto LABEL_93;
        }
      }
      uint64_t v4 = 0;
    }
  }
LABEL_93:
  sub_1B0CD2868(v11);
  if (!v4) {
    uint64_t *v21 = v22;
  }
  return v4;
}

uint64_t sub_1B0D17E64(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  uint64_t v4 = (*((uint64_t (**)(void, uint64_t, void))&xmmword_1EB21CA98 + 1))(*(void *)(*(void *)(a1 + 336) + 72), a2, 0);
  if (!v4) {
    goto LABEL_20;
  }
  uint64_t v5 = (uint64_t *)v4;
  uint64_t v6 = *(void *)(a1 + 336);
  uint64_t v7 = v5[1];
  if (*(void *)v7)
  {
    ++*(void *)(v6 + 24);
    uint64_t v8 = *(void *)(v7 + 56) + 1;
    *(void *)(v7 + 56) = v8;
    if (v8 == 1) {
      goto LABEL_4;
    }
    goto LABEL_11;
  }
  uint64_t v12 = sub_1B0D1171C(v6, v2, v5);
  if (v12)
  {
    uint64_t v7 = v12;
    if (*(void *)(v12 + 56) == 1)
    {
LABEL_4:
      uint64_t v9 = *(void *)(v7 + 24);
      if ((*(_WORD *)(v7 + 52) & 2) == 0)
      {
LABEL_19:
        --*(void *)(v9 + 24);
        xmmword_1EB21CAA8(*(void *)(v9 + 72), *(void *)v7, 1);
        goto LABEL_20;
      }
      uint64_t v10 = *(void *)(v7 + 72);
      if (*(void *)(v9 + 16) == v7)
      {
        *(void *)(v9 + 16) = v10;
        uint64_t v11 = *(void *)(v7 + 64);
        if (v11)
        {
LABEL_7:
          *(void *)(v11 + 72) = v10;
          uint64_t v10 = *(void *)(v7 + 72);
          if (!v10)
          {
            *(void *)uint64_t v9 = v11;
            goto LABEL_19;
          }
LABEL_18:
          *(void *)(v10 + 64) = v11;
          goto LABEL_19;
        }
      }
      else
      {
        uint64_t v11 = *(void *)(v7 + 64);
        if (v11) {
          goto LABEL_7;
        }
      }
      *(void *)(v9 + 8) = v10;
      if (!v10)
      {
        *(void *)uint64_t v9 = 0;
        *(unsigned char *)(v9 + 49) = 2;
        goto LABEL_19;
      }
      goto LABEL_18;
    }
LABEL_11:
    uint64_t v13 = sub_1B0C90380(v7);
    if (v13)
    {
      if ((*(_WORD *)(v7 + 52) & 0x20) == 0)
      {
LABEL_13:
        sub_1B0D0E3E8(v7);
        goto LABEL_21;
      }
    }
    else
    {
      (*(void (**)(uint64_t))(a1 + 280))(v7);
      if ((*(_WORD *)(v7 + 52) & 0x20) == 0) {
        goto LABEL_13;
      }
    }
    uint64_t v14 = *(void *)(v7 + 40);
    --*(_DWORD *)(v14 + 152);
    *(void *)(v7 + 32) = *(void *)(v14 + 168);
    *(void *)(v14 + 168) = v7;
    (*(void (**)(void, void, void))(**(void **)(v14 + 72) + 144))(*(void *)(v14 + 72), *(void *)(v14 + 200) * (*(_DWORD *)(v7 + 48) - 1), *(void *)(v7 + 8));
    goto LABEL_21;
  }
LABEL_20:
  uint64_t v13 = 0;
LABEL_21:
  for (uint64_t i = *(void *)(a1 + 112); i; uint64_t i = *(void *)(i + 64))
    *(_DWORD *)(i + 24) = 1;
  return v13;
}

uint64_t sub_1B0D1801C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(*(void *)a1 + 16))(a1, &v5, 4, a2);
  if (!result) {
    *a3 = bswap32(v5);
  }
  return result;
}

uint64_t sub_1B0D1806C(uint64_t a1, unsigned int a2)
{
  if (a2 != 3082 && !*(unsigned char *)(a1 + 103)) {
    return *(_DWORD *)(a1 + 88) & a2;
  }
  if (*(unsigned char *)(a1 + 103))
  {
    int v3 = *(_DWORD *)(a1 + 220);
    if (!v3)
    {
      *(unsigned char *)(a1 + 103) = 0;
      *(_DWORD *)(a1 + 424) = 0;
      int v4 = *(_DWORD *)(a1 + 432) - 1;
      *(_DWORD *)(a1 + 432) = v4;
      if (!v4) {
        LOWORD(v3) = *(_WORD *)(a1 + 438);
      }
      *(_WORD *)(a1 + 436) = v3;
    }
  }
  uint64_t v2 = 7;
  *(_DWORD *)(a1 + 80) = 7;
  sub_1B0D0E714(a1, 7);
  return v2;
}

void sub_1B0D180E4(uint64_t a1)
{
  if ((*(_WORD *)(a1 + 20) & 0x9000) != 0) {
    sub_1B0D18138((int *)a1);
  }
  if (*(_DWORD *)(a1 + 32))
  {
    sub_1B0D05C10(*(void **)(a1 + 24), *(void **)(a1 + 40));
    *(_DWORD *)(a1 + 32) = 0;
  }
  *(void *)(a1 + 8) = 0;
}

void sub_1B0D18138(int *a1)
{
  int v2 = *((__int16 *)a1 + 10);
  if ((v2 & 0x80000000) == 0)
  {
    if ((v2 & 0x1000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_7;
  }
  uint64_t v3 = *(void *)a1;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  WORD2(v8) = 1;
  *((void *)&v8 + 1) = *((void *)a1 + 3);
  v11[1] = v3;
  void v11[2] = a1;
  v11[0] = &v7;
  LOBYTE(v13) = *(unsigned char *)(*((void *)&v8 + 1) + 100);
  (*(void (**)(void *))(v3 + 32))(v11);
  if (a1[8] >= 1) {
    sub_1B0D05C10(*((void **)a1 + 3), *((void **)a1 + 5));
  }
  long long v4 = v8;
  *(_OWORD *)a1 = v7;
  *((_OWORD *)a1 + 1) = v4;
  long long v5 = v10;
  *((_OWORD *)a1 + 2) = v9;
  *((_OWORD *)a1 + 3) = v5;
  if ((a1[5] & 0x1000) != 0)
  {
LABEL_7:
    uint64_t v6 = *((void *)a1 + 6);
    if (*((unsigned char *)a1 + 56))
    {
      (*(void (**)(uint64_t, uint64_t))(v6 + 16))(*((void *)a1 + 6), *((void *)a1 + 1));
      _Block_release(*((const void **)a1 + 6));
      *((void *)a1 + 6) = 0;
    }
    else
    {
      ((void (*)(void))v6)(*((void *)a1 + 1));
    }
  }
LABEL_10:
  *((_WORD *)a1 + 10) = 1;
}

uint64_t sub_1B0D18228(uint64_t a1, int a2)
{
  uint64_t result = sub_1B0D18254((int *)a1, a2);
  if (result) {
    return *(unsigned int *)(a1 + 16);
  }
  return result;
}

uint64_t sub_1B0D18254(int *a1, int a2)
{
  __int16 v4 = *((_WORD *)a1 + 10);
  if ((v4 & 0x12) != 0)
  {
    if ((a1[5] & 0x400) == 0) {
      goto LABEL_9;
    }
    int v5 = a1[4];
    signed int v6 = *a1 + v5;
    if ((v6 < 0) ^ __OFADD__(*a1, v5) | (v6 == 0))
    {
      if ((v4 & 0x10) == 0) {
        goto LABEL_9;
      }
      signed int v6 = 1;
    }
    if (sub_1B0CA0CF0((uint64_t)a1, v6, 1)) {
      return 0;
    }
    bzero((void *)(*((void *)a1 + 1) + a1[4]), *a1);
    a1[4] += *a1;
    __int16 v4 = a1[5] & 0xF9FF;
LABEL_9:
    *((_WORD *)a1 + 10) = v4 | 2;
    if ((a2 & 0xFFFFFFF7) != *((unsigned __int8 *)a1 + 22)) {
      sub_1B0CD43EC(a1, a2 & 0xF7);
    }
    if ((a2 & 8) == 0)
    {
      int v7 = *((unsigned __int16 *)a1 + 10);
      goto LABEL_30;
    }
    int v7 = *((unsigned __int16 *)a1 + 10);
    if ((a1[2] & 1) == 0)
    {
LABEL_30:
      if ((v7 & 0x2020202) == 2) {
        sub_1B0D18460((uint64_t)a1);
      }
      goto LABEL_36;
    }
    if ((v7 & 0x12) == 0)
    {
LABEL_29:
      v7 &= 0xBFFFu;
      *((_WORD *)a1 + 10) = v7;
      goto LABEL_30;
    }
    if ((v7 & 0x400) != 0)
    {
      int v8 = a1[4];
      signed int v9 = *a1 + v8;
      if (!((v9 < 0) ^ __OFADD__(*a1, v8) | (v9 == 0))) {
        goto LABEL_23;
      }
      if ((v7 & 0x10) != 0)
      {
        signed int v9 = 1;
LABEL_23:
        if (sub_1B0CA0CF0((uint64_t)a1, v9, 1)) {
          return 0;
        }
        bzero((void *)(*((void *)a1 + 1) + a1[4]), *a1);
        a1[4] += *a1;
        LOWORD(v7) = a1[5] & 0xF9FF;
        *((_WORD *)a1 + 10) = v7;
      }
    }
    if (!a1[8] || *((void *)a1 + 1) != *((void *)a1 + 5))
    {
      if (sub_1B0D18460((uint64_t)a1)) {
        return 0;
      }
      LOWORD(v7) = *((_WORD *)a1 + 10);
    }
    goto LABEL_29;
  }
  if (a1[8] >= 32)
  {
    long long v10 = (void *)*((void *)a1 + 5);
    *((void *)a1 + 1) = v10;
    *((_WORD *)a1 + 10) = v4 & 0x2D;
  }
  else
  {
    if (sub_1B0CA0CF0((uint64_t)a1, 32, 0))
    {
      *((unsigned char *)a1 + 22) = 0;
      goto LABEL_36;
    }
    long long v10 = (void *)*((void *)a1 + 1);
  }
  sub_1B0D18508(v10, (uint64_t)a1);
  *((unsigned char *)a1 + 22) = 1;
  *((_WORD *)a1 + 10) |= 0x202u;
  if (a2 != 1) {
    sub_1B0CD43EC(a1, a2);
  }
LABEL_36:
  if (*((unsigned __int8 *)a1 + 22) == (a2 & 0xFFFFFFF7)) {
    return *((void *)a1 + 1);
  }
  return 0;
}

uint64_t sub_1B0D18460(uint64_t a1)
{
  uint64_t result = sub_1B0CA0CF0(a1, *(_DWORD *)(a1 + 16) + 3, 1);
  if (result) {
    return 7;
  }
  *(unsigned char *)(*(void *)(a1 + 8) + *(int *)(a1 + 16)) = 0;
  *(unsigned char *)(*(int *)(a1 + 16) + *(void *)(a1 + 8) + 1) = 0;
  *(unsigned char *)(*(int *)(a1 + 16) + *(void *)(a1 + 8) + 2) = 0;
  *(_WORD *)(a1 + 20) |= 0x200u;
  return result;
}

uint64_t sub_1B0D184D4(uint64_t a1, signed int a2)
{
  if (*(_DWORD *)(a1 + 32) < a2) {
    return sub_1B0CA0CF0(a1, a2, 0);
  }
  *(void *)(a1 + 8) = *(void *)(a1 + 40);
  *(_WORD *)(a1 + 20) &= 0x2Du;
  return 0;
}

void sub_1B0D18508(void *__dst, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  __int16 v4 = *(_WORD *)(a2 + 20);
  if ((v4 & 4) != 0)
  {
    uint64_t v6 = *(void *)a2;
    if (*(uint64_t *)a2 >= 0) {
      unint64_t v7 = *(void *)a2;
    }
    else {
      unint64_t v7 = -v6;
    }
    LOWORD(v15) = (v7 % 0xA) | 0x30;
    if (v7 >= 0xA)
    {
      uint64_t v11 = 19;
      do
      {
        *((unsigned char *)v13 + v11--) = (v7 / 0xA - 10 * ((v7 / 0xA * (unsigned __int128)0x199999999999999AuLL) >> 64)) | 0x30;
        BOOL v12 = v7 > 0x63;
        v7 /= 0xAuLL;
      }
      while (v12);
      int v8 = v11 + 1;
      if ((v6 & 0x8000000000000000) == 0) {
        goto LABEL_9;
      }
    }
    else
    {
      int v8 = 20;
      if ((v6 & 0x8000000000000000) == 0)
      {
LABEL_9:
        uint64_t v9 = v8;
LABEL_16:
        memcpy(__dst, (char *)v13 + v9, 22 - v9);
        int v10 = 21 - v8;
        goto LABEL_17;
      }
    }
    uint64_t v9 = v8 - 1;
    *((unsigned char *)v13 + v9) = 45;
    --v8;
    goto LABEL_16;
  }
  __int16 v17 = 0;
  v13[0] = 0;
  v13[1] = __dst;
  int v14 = 32;
  uint64_t v15 = 0;
  __int16 v16 = 0;
  if ((v4 & 0x20) != 0) {
    double v5 = (double)*(uint64_t *)a2;
  }
  else {
    double v5 = *(double *)a2;
  }
  sqlite3_str_appendf((sqlite3_str *)v13, "%!.15g", *(void *)&v5);
  int v10 = HIDWORD(v15);
  *((unsigned char *)__dst + HIDWORD(v15)) = 0;
LABEL_17:
  *(_DWORD *)(a2 + 16) = v10;
}

double sub_1B0D18684(uint64_t a1)
{
  double v2 = 0.0;
  sub_1B0CC9D20(*(unsigned __int8 **)(a1 + 8), &v2, *(_DWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 22));
  return v2;
}

uint64_t sub_1B0D186C0(uint64_t a1)
{
  uint64_t v2 = 0;
  sub_1B0D186FC(*(unsigned __int8 **)(a1 + 8), &v2, *(_DWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 22));
  return v2;
}

uint64_t sub_1B0D186FC(unsigned __int8 *a1, void *a2, int a3, int a4)
{
  if (a4 == 1)
  {
    uint64_t result = 0;
    unsigned int v6 = 1;
    unint64_t v7 = a1;
  }
  else
  {
    LODWORD(v8) = 3 - a4;
    if (3 - a4 >= (int)(a3 & 0xFFFFFFFE))
    {
      uint64_t result = 0;
    }
    else
    {
      uint64_t v8 = (int)v8;
      while (!a1[v8])
      {
        v8 += 2;
        if (v8 >= (int)(a3 & 0xFFFFFFFE))
        {
          uint64_t result = 0;
          goto LABEL_10;
        }
      }
      uint64_t result = 1;
    }
LABEL_10:
    a3 = v8 ^ 1;
    unint64_t v7 = &a1[a4 & 1];
    unsigned int v6 = 2;
  }
  uint64_t v9 = &a1[a3];
  if (v7 >= v9)
  {
LABEL_14:
    int v11 = 1;
  }
  else
  {
    while (1)
    {
      uint64_t v10 = *v7;
      if ((byte_1B0DE196D[v10] & 1) == 0) {
        break;
      }
      v7 += v6;
      if (v7 >= v9) {
        goto LABEL_14;
      }
    }
    BOOL v12 = &v7[v6];
    if (v10 == 45)
    {
      v7 += v6;
      int v13 = 0;
    }
    else
    {
      int v13 = 1;
    }
    if (v10 == 43)
    {
      unint64_t v7 = v12;
      int v11 = 1;
    }
    else
    {
      int v11 = v13;
    }
  }
  int v14 = v7;
  if (v7 < v9)
  {
    int v14 = v7;
    do
    {
      if (*v14 != 48) {
        break;
      }
      v14 += v6;
    }
    while (v14 < v9);
  }
  if (v14 >= v9)
  {
    LODWORD(v15) = 0;
    uint64_t v16 = 0;
    BOOL v18 = 1;
    goto LABEL_35;
  }
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  do
  {
    uint64_t v17 = v14[v15];
    BOOL v18 = (v17 - 48) < 0xA;
    if ((v17 - 48) > 9) {
      break;
    }
    uint64_t v16 = v17 + 10 * v16 - 48;
    v15 += v6;
  }
  while (&v14[v15] < v9);
  if ((v16 & 0x8000000000000000) == 0)
  {
LABEL_35:
    if (!v11) {
      uint64_t v16 = -v16;
    }
    *a2 = v16;
    if (v15) {
      goto LABEL_40;
    }
    goto LABEL_38;
  }
  unint64_t v19 = 0x7FFFFFFFFFFFFFFFLL;
  if (!v11) {
    unint64_t v19 = 0x8000000000000000;
  }
  *a2 = v19;
  if (v15) {
    goto LABEL_40;
  }
LABEL_38:
  if (v7 == v14)
  {
    uint64_t result = 0xFFFFFFFFLL;
    goto LABEL_49;
  }
LABEL_40:
  if (result) {
    char v20 = 1;
  }
  else {
    char v20 = v18;
  }
  if ((v20 & 1) == 0)
  {
    uint64_t v21 = &v14[v15];
    while ((byte_1B0DE196D[*v21] & 1) != 0)
    {
      v21 += v6;
      if (v21 >= v9)
      {
        uint64_t result = 0;
        goto LABEL_49;
      }
    }
    uint64_t result = 1;
  }
LABEL_49:
  if (v15 < 19 * v6) {
    return result;
  }
  if (v15 > 19 * v6)
  {
    BOOL v29 = v11 == 0;
    unint64_t v22 = 0x7FFFFFFFFFFFFFFFLL;
    if (v29) {
      unint64_t v22 = 0x8000000000000000;
    }
    *a2 = v22;
    return 2;
  }
  else
  {
    unint64_t v23 = 0;
    uint64_t v24 = v14;
    do
    {
      int v25 = *v24;
      int v26 = a92233720368547[v23];
      if (v23 > 0x10) {
        break;
      }
      ++v23;
      v24 += v6;
    }
    while (v25 == v26);
    int v27 = (char)v25 - (char)v26;
    if ((char)v25 == (char)v26)
    {
      int v28 = (char)v14[18 * v6] - 56;
      if (v28 < 0) {
        return result;
      }
    }
    else
    {
      int v28 = 10 * v27;
      if (10 * v27 < 0) {
        return result;
      }
    }
    BOOL v29 = v11 == 0;
    unint64_t v30 = 0x7FFFFFFFFFFFFFFFLL;
    if (v29) {
      unint64_t v30 = 0x8000000000000000;
    }
    *a2 = v30;
    if (v29) {
      unsigned int v31 = result;
    }
    else {
      unsigned int v31 = 3;
    }
    if (v28) {
      return 2;
    }
    else {
      return v31;
    }
  }
}

void sub_1B0D18980(uint64_t a1, uint64_t a2)
{
  if ((*(_WORD *)(a1 + 20) & 0x9000) != 0) {
    sub_1B0D18138((int *)a1);
  }
  *(void *)a1 = a2;
  *(_WORD *)(a1 + 20) = 4;
}

uint64_t sub_1B0D18CD8(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, int *a5, void *a6)
{
  int v8 = *(_DWORD *)(a1 + 144);
  if (!a2 || (*(_WORD *)(a2 + 20) & 0x10) == 0)
  {
    LODWORD(v9) = 0;
    uint64_t v10 = 0;
    goto LABEL_4;
  }
  int v30 = *(_DWORD *)(a2 + 16);
  uint64_t v9 = (v30 >> 3);
  uint64_t v10 = *(void **)(a2 + 8);
  if (v30 >= 8)
  {
    if (v30 < 0x10)
    {
      uint64_t v31 = 0;
      do
LABEL_43:
        v8 += *(_DWORD *)(v10[v31++] + 8);
      while (v9 != v31);
      goto LABEL_4;
    }
    uint64_t v32 = 0;
    int v33 = 0;
    uint64_t v31 = v9 & 0xFFFFFFFE;
    do
    {
      uint64_t v34 = &v10[v32];
      v8 += *(_DWORD *)(*v34 + 8);
      v33 += *(_DWORD *)(v34[1] + 8);
      v32 += 2;
    }
    while (v31 != v32);
    v8 += v33;
    if (v31 != v9) {
      goto LABEL_43;
    }
  }
LABEL_4:
  int v11 = *a4;
  int v12 = *a4 + 1;
  if (*a4 < v8)
  {
    int v13 = (uint64_t *)(a1 + 136);
    int v35 = *a4 + 1;
    uint64_t v39 = a5;
    BOOL v40 = a4;
    char v38 = a6;
    unsigned int v37 = a3;
    BOOL v36 = (uint64_t *)(a1 + 136);
    while (1)
    {
      int v14 = v11;
      int v11 = v12;
      int v15 = *(_DWORD *)(a1 + 144);
      int v16 = v14;
      uint64_t v17 = v13;
      BOOL v18 = __OFSUB__(v14, v15);
      int v19 = v14 - v15;
      if (v19 < 0 == v18)
      {
        uint64_t v17 = (uint64_t *)*v10;
        int v20 = *(_DWORD *)(*v10 + 8);
        if (v19 >= v20)
        {
          uint64_t v21 = v10 + 1;
          do
          {
            v19 -= v20;
            uint64_t v22 = *v21++;
            uint64_t v17 = (uint64_t *)v22;
            int v20 = *(_DWORD *)(v22 + 8);
          }
          while (v19 >= v20);
        }
        int v16 = v19;
      }
      uint64_t v23 = *v17;
      if (a2 && *(unsigned __int8 *)(v23 + 40 * v16 + 1) == 252)
      {
        if ((int)v9 < 1)
        {
          LODWORD(v24) = 0;
        }
        else
        {
          uint64_t v24 = 0;
          while (v10[v24] != *(void *)(v23 + 40 * v16 + 16))
          {
            if (v9 == ++v24) {
              goto LABEL_22;
            }
          }
        }
        if (v24 == v9)
        {
LABEL_22:
          uint64_t v41 = *v17;
          int v25 = sub_1B0CA0CF0(a2, 8 * ((int)v9 + 1), v9 != 0);
          *(_DWORD *)(a1 + 52) = v25;
          if (v25)
          {
            a3 = 1;
            a6 = v38;
            a5 = v39;
            a4 = v40;
            uint64_t v23 = v41;
            goto LABEL_36;
          }
          uint64_t v10 = *(void **)(a2 + 8);
          a4 = v40;
          uint64_t v23 = v41;
          uint64_t v26 = v41 + 40 * v16;
          v10[(int)v9] = *(void *)(v26 + 16);
          *(_WORD *)(a2 + 20) = *(_WORD *)(a2 + 20) & 0xF240 | 0x10;
          *(_DWORD *)(a2 + 16) = 8 * (v9 + 1);
          v8 += *(_DWORD *)(*(void *)(v26 + 16) + 8);
          LODWORD(v9) = v9 + 1;
          a6 = v38;
          a5 = v39;
          a3 = v37;
          int v13 = v36;
        }
      }
      if (a3 == 2)
      {
        int v28 = *(unsigned __int8 *)(v23 + 40 * v16);
        if (v28 == 113)
        {
          if ((*(_WORD *)(v23 + 40 * v16 + 2) & 0x10) == 0) {
            goto LABEL_33;
          }
        }
        else if (v28 == 101 || v28 == 112)
        {
LABEL_33:
          a3 = 0;
          goto LABEL_36;
        }
      }
      else
      {
        if (!a3)
        {
          int v11 = v35;
          goto LABEL_36;
        }
        int v27 = *(unsigned __int8 *)(v23 + 40 * v16);
        if (v27 == 185 || v14 >= 1 && v27 == 8) {
          goto LABEL_33;
        }
      }
      int v12 = v11 + 1;
      if (v11 >= v8) {
        goto LABEL_35;
      }
    }
  }
  uint64_t v23 = 0;
LABEL_35:
  int v16 = v11;
  *(_DWORD *)(a1 + 52) = 0;
  a3 = 101;
  int v11 = v12;
LABEL_36:
  *a4 = v11;
  *a5 = v16;
  *a6 = v23;
  return a3;
}

void *sub_1B0D18FB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a1;
  long long v32 = 0u;
  long long v33 = 0u;
  DWORD1(v33) = 2147483645;
  BYTE12(v33) = 0;
  uint64_t v9 = "program";
  switch(*(unsigned char *)(a2 + 1))
  {
    case 0xF1:
    case 0xF9:
      sqlite3_str_appendf((sqlite3_str *)&v32, "%s(%d)");
      goto LABEL_52;
    case 0xF2:
      uint64_t v10 = *(unsigned int **)(a2 + 16);
      unsigned int v11 = *v10;
      if (!*v10) {
        goto LABEL_41;
      }
      unsigned int v12 = 1;
      do
      {
        if (v12 == 1) {
          uint64_t v13 = 91;
        }
        else {
          uint64_t v13 = 44;
        }
        sqlite3_str_appendf((sqlite3_str *)&v32, "%c%u", v13, v10[v12++]);
      }
      while (v12 <= v11);
      uint64_t v14 = DWORD2(v33);
      if (DWORD2(v33) + 1 >= v33)
      {
LABEL_41:
        int v25 = "]";
        LODWORD(a3) = 1;
        goto LABEL_51;
      }
      ++DWORD2(v33);
      *(unsigned char *)(*((void *)&v32 + 1) + v14) = 93;
      goto LABEL_52;
    case 0xF3:
      goto LABEL_14;
    case 0xF4:
      goto LABEL_10;
    case 0xF5:
      sqlite3_str_appendf((sqlite3_str *)&v32, "vtab:%p");
      goto LABEL_52;
    case 0xF6:
      uint64_t v15 = *(void *)(a2 + 16);
      __int16 v16 = *(_WORD *)(v15 + 20);
      if ((v16 & 2) != 0)
      {
        uint64_t v9 = *(const char **)(v15 + 8);
        if (!v9) {
          goto LABEL_52;
        }
      }
      else
      {
        if ((v16 & 0x24) != 0)
        {
LABEL_14:
          sqlite3_str_appendf((sqlite3_str *)&v32, "%lld");
          goto LABEL_52;
        }
        if ((v16 & 8) != 0)
        {
LABEL_10:
          sqlite3_str_appendf((sqlite3_str *)&v32, "%.16g");
          goto LABEL_52;
        }
        if (v16) {
          uint64_t v9 = "NULL";
        }
        else {
          uint64_t v9 = "(blob)";
        }
      }
LABEL_49:
      int v26 = strlen(v9);
      a3 = v26 & 0x3FFFFFFF;
      if ((v26 & 0x3FFFFFFF) != 0)
      {
        int v25 = v9;
LABEL_51:
        sub_1B0CE62B0((uint64_t)&v32, v25, a3);
      }
LABEL_52:
      if ((BYTE12(v33) & 7) != 0 && !*(unsigned char *)(v8 + 103) && !*(unsigned char *)(v8 + 104))
      {
        *(unsigned char *)(v8 + 103) = 1;
        if (*(int *)(v8 + 220) >= 1) {
          *(_DWORD *)(v8 + 424) = 1;
        }
        ++*(_DWORD *)(v8 + 432);
        *(_WORD *)(v8 + 436) = 0;
        uint64_t v28 = *(void *)(v8 + 344);
        if (v28)
        {
          sub_1B0CEF2BC(v28, "out of memory", a3, a4, a5, a6, a7, a8, v30);
          for (uint64_t i = *(void *)(v8 + 344); ; ++*(_DWORD *)(i + 48))
          {
            *(_DWORD *)(i + 24) = 7;
            uint64_t i = *(void *)(i + 256);
            if (!i) {
              break;
            }
          }
        }
      }
      if (*((void *)&v32 + 1)
        && (*(unsigned char *)(*((void *)&v32 + 1) + DWORD2(v33)) = 0, DWORD1(v33))
        && (BYTE13(v33) & 4) == 0)
      {
        return sub_1B0D06044((uint64_t *)&v32);
      }
      else
      {
        return (void *)*((void *)&v32 + 1);
      }
    case 0xF8:
      uint64_t v17 = *(void *)(a2 + 16);
      sqlite3_str_appendf((sqlite3_str *)&v32, "k(%d", *(unsigned __int16 *)(v17 + 6));
      if (*(_WORD *)(v17 + 6))
      {
        unint64_t v18 = 0;
        do
        {
          uint64_t v23 = *(const char ***)(v17 + 32 + 8 * v18);
          if (v23) {
            int v19 = *v23;
          }
          else {
            int v19 = &byte_1B0DE9952;
          }
          if (!strcmp(v19, "BINARY")) {
            int v20 = "B";
          }
          else {
            int v20 = v19;
          }
          if (*(unsigned char *)(*(void *)(v17 + 24) + v18)) {
            uint64_t v21 = "-";
          }
          else {
            uint64_t v21 = &byte_1B0DE9952;
          }
          if ((*(unsigned char *)(*(void *)(v17 + 24) + v18) & 2) != 0) {
            uint64_t v22 = "N.";
          }
          else {
            uint64_t v22 = &byte_1B0DE9952;
          }
          sqlite3_str_appendf((sqlite3_str *)&v32, ",%s%s%s", v21, v22, v20);
          ++v18;
        }
        while (v18 < *(unsigned __int16 *)(v17 + 6));
      }
      uint64_t v24 = DWORD2(v33);
      if (DWORD2(v33) + 1 >= v33)
      {
        sub_1B0CE62B0((uint64_t)&v32, ")", 1u);
      }
      else
      {
        ++DWORD2(v33);
        *(unsigned char *)(*((void *)&v32 + 1) + v24) = 41;
      }
      uint64_t v8 = a1;
      goto LABEL_52;
    case 0xFB:
      uint64_t v9 = **(const char ***)(a2 + 16);
      if (!v9) {
        goto LABEL_52;
      }
      goto LABEL_49;
    case 0xFC:
      goto LABEL_49;
    case 0xFD:
      sqlite3_str_appendf((sqlite3_str *)&v32, "%d");
      goto LABEL_52;
    case 0xFE:
      sqlite3_str_appendf((sqlite3_str *)&v32, "%.18s-%s");
      goto LABEL_52;
    default:
      uint64_t v9 = *(const char **)(a2 + 16);
      if (!v9) {
        goto LABEL_52;
      }
      goto LABEL_49;
  }
}

uint64_t sub_1B0D193FC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (a2 != 0x8000000000000000)
  {
    if (a2 <= 0)
    {
      if (v2 >= 1 && (v2 ^ 0x7FFFFFFFFFFFFFFFuLL) < -a2) {
        return 1;
      }
    }
    else if (v2 < 0 && (uint64_t)(0x8000000000000001 - v2) > 1 - a2)
    {
      return 1;
    }
    unint64_t v3 = v2 - a2;
    goto LABEL_14;
  }
  if (v2 < 0)
  {
    unint64_t v3 = v2 ^ 0x8000000000000000;
LABEL_14:
    *a1 = v3;
    return 0;
  }
  return 1;
}

uint64_t sub_1B0D19478(uint64_t *a1, unint64_t a2)
{
  uint64_t v2 = *a1;
  if ((uint64_t)a2 >= 1)
  {
    if (v2 > (uint64_t)(0x7FFFFFFFFFFFFFFFLL / a2)) {
      return 1;
    }
    if (v2 < -(uint64_t)(0x8000000000000000 / a2)) {
      return 1;
    }
    goto LABEL_11;
  }
  if ((a2 & 0x8000000000000000) == 0) {
    goto LABEL_11;
  }
  if (v2 >= 1)
  {
    if (-(uint64_t)(0x8000000000000000 / v2) > a2) {
      return 1;
    }
    goto LABEL_11;
  }
  if ((v2 & 0x8000000000000000) == 0) {
    goto LABEL_11;
  }
  uint64_t v4 = 1;
  if (a2 == 0x8000000000000000 || v2 == 0x8000000000000000) {
    return v4;
  }
  if (0x7FFFFFFFFFFFFFFFuLL / -(uint64_t)a2 >= -v2)
  {
LABEL_11:
    uint64_t v4 = 0;
    *a1 = v2 * a2;
    return v4;
  }
  return 1;
}

uint64_t sub_1B0D19530(uint64_t a1)
{
  if (!a1)
  {
    sub_1B0CE1978(89717);
LABEL_5:
    uint64_t result = 0;
    goto LABEL_15;
  }
  __int16 v2 = *(_WORD *)(a1 + 20);
  if ((v2 & 0x24) != 0)
  {
    uint64_t result = *(void *)a1;
    goto LABEL_15;
  }
  if ((v2 & 8) == 0)
  {
    if ((v2 & 0x12) != 0 && *(void *)(a1 + 8))
    {
      uint64_t result = sub_1B0D186C0(a1);
      goto LABEL_15;
    }
    goto LABEL_5;
  }
  uint64_t v4 = 0x7FFFFFFFFFFFFFFFLL;
  if (*(double *)a1 <= 9.22337204e18) {
    uint64_t v4 = (uint64_t)*(double *)a1;
  }
  if (*(double *)a1 >= -9.22337204e18) {
    uint64_t result = v4;
  }
  else {
    uint64_t result = 0x8000000000000000;
  }
LABEL_15:
  *(void *)a1 = result;
  *(_WORD *)(a1 + 20) = *(_WORD *)(a1 + 20) & 0xF240 | 4;
  return result;
}

uint64_t sub_1B0D195EC(uint64_t a1, int a2, int a3)
{
  __int16 v3 = *(_WORD *)(a1 + 20);
  if (v3) {
    return 0;
  }
  switch(a2)
  {
    case 'A':
      if ((v3 & 0x10) != 0)
      {
        uint64_t result = 0;
        *(_WORD *)(a1 + 20) = v3 & 0xF250;
      }
      else
      {
        sub_1B0CBCF8C(a1, 66, a3);
        __int16 v6 = *(_WORD *)(a1 + 20);
        if ((v6 & 2) == 0) {
          return 0;
        }
        uint64_t result = 0;
        *(_WORD *)(a1 + 20) = v6 & 0xF240 | 0x10;
      }
      return result;
    case 'C':
      sub_1B0D1D730(a1);
      return 0;
    case 'D':
      if ((v3 & 0x24) != 0)
      {
        double v10 = *(double *)a1;
      }
      else if ((v3 & 8) != 0)
      {
        double v10 = -0.0;
        uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
        if (*(double *)a1 <= 9.22337204e18) {
          uint64_t v13 = (uint64_t)*(double *)a1;
        }
        if (*(double *)a1 >= -9.22337204e18) {
          double v10 = *(double *)&v13;
        }
      }
      else if ((v3 & 0x12) != 0)
      {
        double v10 = *(double *)(a1 + 8);
        if (v10 != 0.0)
        {
          double v10 = COERCE_DOUBLE(sub_1B0D186C0(a1));
          __int16 v3 = *(_WORD *)(a1 + 20);
        }
      }
      else
      {
        double v10 = 0.0;
      }
      uint64_t result = 0;
      *(double *)a1 = v10;
      *(_WORD *)(a1 + 20) = v3 & 0xF240 | 4;
      return result;
    case 'E':
      if ((v3 & 8) != 0)
      {
        double v11 = *(double *)a1;
      }
      else if ((v3 & 0x24) != 0)
      {
        double v11 = (double)*(uint64_t *)a1;
      }
      else if ((v3 & 0x12) != 0)
      {
        double v11 = sub_1B0D18684(a1);
        __int16 v3 = *(_WORD *)(a1 + 20);
      }
      else
      {
        double v11 = 0.0;
      }
      uint64_t result = 0;
      *(double *)a1 = v11;
      *(_WORD *)(a1 + 20) = v3 & 0xF240 | 8;
      return result;
    default:
      *(_WORD *)(a1 + 20) |= (*(_WORD *)(a1 + 20) >> 3) & 2;
      sub_1B0CBCF8C(a1, 66, a3);
      __int16 v8 = *(_WORD *)(a1 + 20);
      __int16 v9 = v8 & 0xFBC3;
      *(_WORD *)(a1 + 20) = v8 & 0xFBC3;
      if (a3 != 1) {
        *(_DWORD *)(a1 + 16) &= ~1u;
      }
      if ((v8 & 2) != 0)
      {
        if (*(unsigned __int8 *)(a1 + 22) != a3)
        {
          uint64_t result = sub_1B0CD43EC((int *)a1, a3);
          if (result) {
            return result;
          }
          __int16 v9 = *(_WORD *)(a1 + 20);
        }
      }
      else
      {
        *(unsigned char *)(a1 + 22) = a3;
      }
      if ((v9 & 0x6202) != 2 || *(unsigned char *)(a1 + 22) != 1) {
        return 0;
      }
      uint64_t result = *(void *)(a1 + 8);
      if (!result) {
        return result;
      }
      if ((v9 & 0x1000) == 0)
      {
        int v12 = *(_DWORD *)(a1 + 16);
        if (*(_DWORD *)(a1 + 32) <= v12) {
          return 0;
        }
        goto LABEL_49;
      }
      uint64_t v14 = *(void (__cdecl **)(void *))(a1 + 48);
      if (v14 == sqlite3_free)
      {
        unsigned int v15 = off_1EB21C9F8(result);
        int v12 = *(_DWORD *)(a1 + 16);
        if (v15 >= v12 + 1)
        {
          uint64_t result = *(void *)(a1 + 8);
LABEL_49:
          *(unsigned char *)(result + v12) = 0;
          goto LABEL_50;
        }
        uint64_t v14 = *(void (__cdecl **)(void *))(a1 + 48);
      }
      if ((char *)v14 != (char *)sub_1B0D167E8) {
        return 0;
      }
LABEL_50:
      uint64_t result = 0;
      *(_WORD *)(a1 + 20) |= 0x200u;
      break;
  }
  return result;
}

BOOL sub_1B0D198B8(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 20);
  if ((v2 & 0x24) != 0)
  {
    BOOL v3 = *(void *)a1 == 0;
  }
  else
  {
    if (v2) {
      return a2;
    }
    if ((v2 & 8) != 0)
    {
      double v4 = *(double *)a1;
    }
    else if ((v2 & 0x12) != 0)
    {
      double v4 = sub_1B0D18684(a1);
    }
    else
    {
      double v4 = 0.0;
    }
    BOOL v3 = v4 == 0.0;
  }
  return !v3;
}

uint64_t sub_1B0D1991C(uint64_t a1)
{
  int v3 = 0;
  uint64_t result = sub_1B0D1AA30(*(void *)(a1 + 40), *(void *)(a1 + 72), 0, &v3);
  if (!result)
  {
    if (v3)
    {
      return sub_1B0D1045C(94942);
    }
    else
    {
      uint64_t result = 0;
      *(unsigned char *)(a1 + 3) = 0;
      *(_DWORD *)(a1 + 24) = 0;
    }
  }
  return result;
}

uint64_t sub_1B0D199A0(uint64_t a1)
{
  __int16 v2 = *(unsigned __int8 **)(a1 + 40);
  unsigned int v3 = *v2;
  if (v3 >= 3)
  {
    uint64_t v4 = sub_1B0D1DAC8(*(void *)(a1 + 40));
    if (v4)
    {
      *(_DWORD *)(a1 + 24) = 0;
LABEL_6:
      *(unsigned char *)(a1 + 2) = 1;
      return v4;
    }
    unsigned int v3 = *v2;
  }
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  if (v3) {
    goto LABEL_6;
  }
  return v5;
}

uint64_t sub_1B0D19A08(char *a1, int *a2)
{
  int v3 = *a1;
  int v4 = a1[1];
  if (a1[1] < 0)
  {
    int v6 = a1[2];
    if (v6 < 0)
    {
      unint64_t v8 = 0;
      uint64_t result = sub_1B0CAD43C(a1, &v8);
      if (HIDWORD(v8)) {
        int v7 = -1;
      }
      else {
        int v7 = v8;
      }
      *a2 = v7;
    }
    else
    {
      *a2 = v6 & 0x7F | (v3 << 14) & 0x1FC07F | ((v4 & 0x7F) << 7);
      return 3;
    }
  }
  else
  {
    *a2 = ((v3 & 0x7F) << 7) | v4;
    return 2;
  }
  return result;
}

uint64_t sub_1B0D19A9C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  int v3 = *(unsigned __int16 *)(a1 + 68);
  uint64_t v4 = *(void *)(a1 + 56);
  int v5 = *(_DWORD *)(*(void *)(a1 + 136) + 88) - v4;
  if (v3 > v5) {
    int v3 = v5 & ~(v5 >> 31);
  }
  *(void *)(a3 + 8) = v4;
  if (v3 < a2) {
    return sub_1B0CB63E0(a1, 0, a2, a3);
  }
  *(_WORD *)(a3 + 20) = 16400;
  *(_DWORD *)(a3 + 16) = a2;
  return 0;
}

uint64_t sub_1B0D19B1C(uint64_t a1, int a2, unsigned int a3, unsigned int a4, int a5, int a6, uint64_t a7)
{
  uint64_t v14 = *(void *)(a7 + 24);
  if (a3 < 0x80) {
    unsigned int v15 = byte_1B0DE2184[a3];
  }
  else {
    unsigned int v15 = (a3 - 12) >> 1;
  }
  if ((signed int)v15 > *(_DWORD *)(v14 + 136)) {
    return 18;
  }
  unsigned int v17 = *(unsigned __int8 *)(a7 + 22);
  if (v15 >= 0xFA1 && !*(void *)(a1 + 48))
  {
    if ((*(unsigned char *)(a1 + 5) & 0x10) != 0)
    {
      unsigned int v29 = *(unsigned __int8 *)(a7 + 22);
      int v19 = *(_OWORD **)(a1 + 104);
      int v20 = *(char **)v19;
      if (!*(void *)v19) {
        goto LABEL_32;
      }
    }
    else
    {
      unint64_t v18 = (_OWORD *)sub_1B0D05DC0(v14, 0x20uLL);
      if (!v18)
      {
        *(void *)(a1 + 104) = 0;
        return 7;
      }
      int v19 = v18;
      unsigned int v29 = v17;
      *unint64_t v18 = 0u;
      v18[1] = 0u;
      *(void *)(a1 + 104) = v18;
      *(unsigned char *)(a1 + 5) |= 0x10u;
      int v20 = *(char **)v18;
      if (!*(void *)v18) {
        goto LABEL_32;
      }
    }
    if (*((_DWORD *)v19 + 4) != a2 || *((_DWORD *)v19 + 5) != a5 || *((_DWORD *)v19 + 6) != a6) {
      goto LABEL_24;
    }
    uint64_t v28 = *((void *)v19 + 1);
    uint64_t v21 = sub_1B0D1DC14(*(void **)(a1 + 40));
    int v20 = *(char **)v19;
    if (v28 == v21) {
      goto LABEL_37;
    }
    if (v20)
    {
LABEL_24:
      unint64_t v24 = *((void *)v20 - 1);
      uint64_t v23 = v20 - 8;
      unint64_t v22 = v24;
      if (v24 < 2)
      {
        int v25 = (uint64_t (**)(char *))&off_1EB21C9E8;
        if (dword_1EB21C9C0)
        {
          if ((void)xmmword_1EB2201B0) {
            xmmword_1EB21CA40(xmmword_1EB2201B0);
          }
          qword_1EB220108 -= (int)off_1EB21C9F8(v23);
          --qword_1EB220150;
          off_1EB21C9E8(v23);
          uint64_t v23 = (char *)xmmword_1EB2201B0;
          if (!(void)xmmword_1EB2201B0) {
            goto LABEL_32;
          }
          int v25 = (uint64_t (**)(char *))&xmmword_1EB21CA50;
        }
        (*v25)(v23);
      }
      else
      {
        *(void *)uint64_t v23 = v22 - 1;
      }
    }
LABEL_32:
    if (!sqlite3_initialize())
    {
      uint64_t v26 = sub_1B0C7FC94(v15 + 12);
      if (v26)
      {
        *(void *)uint64_t v26 = 1;
        int v20 = (char *)(v26 + 8);
        *(void *)int v19 = v26 + 8;
        uint64_t result = sub_1B0CD1CD0(*(void *)(a1 + 40), a4, v15, (char *)(v26 + 8), 0);
        if (result) {
          return result;
        }
        int v27 = &v20[v15];
        *(_WORD *)int v27 = 0;
        v27[2] = 0;
        *((_DWORD *)v19 + 4) = a2;
        *((_DWORD *)v19 + 5) = a5;
        *((_DWORD *)v19 + 6) = a6;
        *((void *)v19 + 1) = sub_1B0D1DC14(*(void **)(a1 + 40));
LABEL_37:
        ++*((void *)v20 - 1);
        if ((a3 & 1) == 0)
        {
          uint64_t result = sub_1B0C79BBC(a7, v20, v15, 0, sub_1B0D167E8);
          goto LABEL_13;
        }
        uint64_t result = sub_1B0C79BBC(a7, v20, v15, v29, sub_1B0D167E8);
LABEL_12:
        *(_WORD *)(a7 + 20) |= 0x200u;
LABEL_13:
        *(_WORD *)(a7 + 20) &= ~0x4000u;
        return result;
      }
    }
    *(void *)int v19 = 0;
    return 7;
  }
  uint64_t result = sub_1B0CB63E0(*(void *)(a1 + 40), a4, v15, a7);
  if (!result)
  {
    sub_1B0CAD5D4(*(char **)(a7 + 8), a3, a7);
    uint64_t result = 0;
    if ((a3 & 1) == 0 || v17 != 1) {
      goto LABEL_13;
    }
    uint64_t result = 0;
    *(unsigned char *)(*(void *)(a7 + 8) + v15) = 0;
    goto LABEL_12;
  }
  return result;
}

uint64_t sub_1B0D19E38(int8x8_t *a1, unint64_t a2)
{
  if (a2 > 0x7F)
  {
    if (a2 >> 14)
    {
      return sub_1B0D1DC5C(a1, a2);
    }
    else
    {
      a1->i8[0] = (a2 >> 7) | 0x80;
      a1->i8[1] = a2 & 0x7F;
      return 2;
    }
  }
  else
  {
    a1->i8[0] = a2;
    return 1;
  }
}

uint64_t sub_1B0D19E74(uint64_t a1)
{
  if (*(unsigned char *)a1) {
    return -1;
  }
  uint64_t v3 = *(void *)(a1 + 136);
  if (!*(unsigned char *)(v3 + 8)) {
    return -1;
  }
  uint64_t result = *(unsigned __int16 *)(v3 + 24);
  if (*(char *)(a1 + 84) >= 1)
  {
    uint64_t v4 = *(unsigned __int8 *)(a1 + 84);
    if (v4 == 1)
    {
      uint64_t v5 = 0;
LABEL_10:
      __int16 v9 = (uint64_t *)(a1 + 8 * v5 + 144);
      uint64_t v10 = v4 - v5;
      do
      {
        uint64_t v11 = *v9++;
        result *= *(unsigned __int16 *)(v11 + 24);
        --v10;
      }
      while (v10);
      return result;
    }
    uint64_t v5 = v4 & 0xFE;
    uint64_t v6 = a1 + 152;
    uint64_t v7 = 1;
    uint64_t v8 = v5;
    do
    {
      result *= *(unsigned __int16 *)(*(void *)(v6 - 8) + 24);
      v7 *= *(unsigned __int16 *)(*(void *)v6 + 24);
      v6 += 16;
      v8 -= 2;
    }
    while (v8);
    result *= v7;
    if (v5 != v4) {
      goto LABEL_10;
    }
  }
  return result;
}

uint64_t sub_1B0D19F18(uint64_t a1, int a2)
{
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (*(unsigned char *)(a1 + 17))
  {
    ++*(_DWORD *)(a1 + 20);
    if (!*(unsigned char *)(a1 + 18)) {
      sub_1B0D12478(a1);
    }
  }
  uint64_t v5 = *v4;
  if (*(_DWORD *)(*v4 + 128) < a2 && *(unsigned char *)(v5 + 10))
  {
    uint64_t v6 = sub_1B0D13268(v5, a2);
    if (!*(unsigned char *)(a1 + 17)) {
      return v6;
    }
  }
  else
  {
    uint64_t v6 = 0;
    if (!*(unsigned char *)(a1 + 17)) {
      return v6;
    }
  }
  int v7 = *(_DWORD *)(a1 + 20) - 1;
  *(_DWORD *)(a1 + 20) = v7;
  if (!v7) {
    sub_1B0D12558(a1);
  }
  return v6;
}

uint64_t sub_1B0D19FC4(uint64_t result, unsigned int a2)
{
  uint64_t v2 = result;
  if ((a2 & 0x80000000) == 0)
  {
    uint64_t v3 = *(void *)(result + 32);
    uint64_t v4 = *(void *)(v3 + 32 * a2 + 24);
    *(_WORD *)(v4 + 114) |= 8u;
    *(_WORD *)(*(void *)(v3 + 56) + 114) |= 8u;
    *(_DWORD *)(result + 44) &= ~0x10u;
  }
  if (!*(_DWORD *)(result + 72))
  {
    int v5 = *(_DWORD *)(result + 40);
    if (v5 >= 1)
    {
      uint64_t v6 = 0;
      uint64_t v7 = 24;
      do
      {
        uint64_t result = *(void *)(*(void *)(v2 + 32) + v7);
        if ((*(_WORD *)(result + 114) & 8) != 0)
        {
          uint64_t result = sub_1B0D1BE68(result);
          int v5 = *(_DWORD *)(v2 + 40);
        }
        ++v6;
        v7 += 32;
      }
      while (v6 < v5);
    }
  }
  return result;
}

uint64_t sub_1B0D1A074(uint64_t result, int a2, int *a3)
{
  uint64_t v5 = result;
  uint64_t v6 = *(void **)(result + 8);
  if (*(unsigned char *)(result + 17))
  {
    ++*(_DWORD *)(result + 20);
    if (!*(unsigned char *)(result + 18))
    {
      uint64_t result = sub_1B0D12478(result);
      if (a2 == 15) {
        goto LABEL_4;
      }
LABEL_6:
      int v7 = bswap32(*(_DWORD *)(*(void *)(v6[3] + 80) + 4 * a2 + 36));
      goto LABEL_7;
    }
  }
  if (a2 != 15) {
    goto LABEL_6;
  }
LABEL_4:
  int v7 = *(_DWORD *)(v5 + 28) + *(_DWORD *)(*v6 + 132);
LABEL_7:
  *a3 = v7;
  if (*(unsigned char *)(v5 + 17))
  {
    int v8 = *(_DWORD *)(v5 + 20) - 1;
    *(_DWORD *)(v5 + 20) = v8;
    if (!v8)
    {
      return sub_1B0D12558(v5);
    }
  }
  return result;
}

void *sub_1B0D1A148(void *result, int a2)
{
  uint64_t v2 = *(void **)(*(void *)(result[4] + 32 * a2 + 24) + 16);
  if (v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = v2[2];
      if (!*(unsigned char *)(v4 + 63))
      {
        for (uint64_t i = *(void *)(v4 + 72); i; uint64_t i = *(void *)(i + 8))
        {
          sub_1B0CD41FC(v3, *(void **)(i + 48));
          *(void *)(i + 48) = 0;
          uint64_t result = sub_1B0CD41FC(v3, *(void **)(i + 56));
          *(void *)(i + 56) = 0;
        }
      }
      uint64_t v2 = (void *)*v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_1B0D1A1D4(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = a3;
  unsigned int v8 = a2;
  if (*(unsigned char *)(a1 + 17))
  {
    ++*(_DWORD *)(a1 + 20);
    if (!*(unsigned char *)(a1 + 18)) {
      sub_1B0D12478(a1);
    }
    uint64_t v10 = *(void *)(a1 + 8);
    if (v8 <= 1)
    {
      if (!v8)
      {
        uint64_t v18 = sub_1B0D1045C(81497);
LABEL_28:
        uint64_t v7 = v18;
        if (*(unsigned char *)(a1 + 17))
        {
LABEL_29:
          int v19 = *(_DWORD *)(a1 + 20) - 1;
          *(_DWORD *)(a1 + 20) = v19;
          if (!v19) {
            sub_1B0D12558(a1);
          }
          return v7;
        }
        return v7;
      }
      unsigned int v8 = *(_DWORD *)(v10 + 64) != 0;
    }
    *(_DWORD *)(a5 + 80) = v8;
    *(unsigned char *)(a5 + 84) = -1;
    *(void *)(a5 + 128) = a4;
    *(void *)(a5 + 8) = a1;
    *(void *)(a5 + 32) = v10;
    *(unsigned char *)(a5 + 1) = 0;
    uint64_t v11 = *(void *)(v10 + 16);
    if (v11)
    {
      char v12 = 0;
      uint64_t v13 = *(void *)(v10 + 16);
      do
      {
        if (*(_DWORD *)(v13 + 80) == v8)
        {
          *(unsigned char *)(v13 + 1) |= 0x20u;
          char v12 = 32;
          *(unsigned char *)(a5 + 1) = 32;
        }
        uint64_t v13 = *(void *)(v13 + 40);
      }
      while (v13);
    }
    else
    {
      char v12 = 0;
    }
    *(unsigned char *)a5 = 1;
    *(void *)(a5 + 40) = v11;
    *(void *)(v10 + 16) = a5;
    if (v7)
    {
      uint64_t v7 = 0;
      *(unsigned char *)(a5 + 1) = v12 | 1;
      *(unsigned char *)(a5 + 2) = 0;
      if (!*(void *)(v10 + 136))
      {
        uint64_t v18 = sub_1B0D1E268(v10);
        goto LABEL_28;
      }
    }
    else
    {
      *(unsigned char *)(a5 + 2) = 2;
    }
    if (*(unsigned char *)(a1 + 17)) {
      goto LABEL_29;
    }
    return v7;
  }
  uint64_t v14 = *(void *)(a1 + 8);
  if (a2 <= 1)
  {
    if (!a2)
    {
      return sub_1B0D1045C(81497);
    }
    unsigned int v8 = *(_DWORD *)(v14 + 64) != 0;
  }
  *(_DWORD *)(a5 + 80) = v8;
  *(unsigned char *)(a5 + 84) = -1;
  *(void *)(a5 + 128) = a4;
  *(void *)(a5 + 8) = a1;
  *(void *)(a5 + 32) = v14;
  *(unsigned char *)(a5 + 1) = 0;
  uint64_t v15 = *(void *)(v14 + 16);
  if (v15)
  {
    char v16 = 0;
    uint64_t v17 = *(void *)(v14 + 16);
    do
    {
      if (*(_DWORD *)(v17 + 80) == v8)
      {
        *(unsigned char *)(v17 + 1) |= 0x20u;
        char v16 = 32;
        *(unsigned char *)(a5 + 1) = 32;
      }
      uint64_t v17 = *(void *)(v17 + 40);
    }
    while (v17);
  }
  else
  {
    char v16 = 0;
  }
  *(unsigned char *)a5 = 1;
  *(void *)(a5 + 40) = v15;
  *(void *)(v14 + 16) = a5;
  if (!a3)
  {
    *(unsigned char *)(a5 + 2) = 2;
    return v7;
  }
  uint64_t v7 = 0;
  *(unsigned char *)(a5 + 1) = v16 | 1;
  *(unsigned char *)(a5 + 2) = 0;
  if (*(void *)(v14 + 136)) {
    return v7;
  }

  return sub_1B0D1E268(v14);
}

uint64_t sub_1B0D1A434(uint64_t a1, unsigned int *a2, char a3)
{
  if (*(unsigned char *)(a1 + 17))
  {
    ++*(_DWORD *)(a1 + 20);
    if (!*(unsigned char *)(a1 + 18)) {
      sub_1B0D12478(a1);
    }
  }
  uint64_t v6 = *(_DWORD **)(a1 + 8);
  uint64_t v48 = 0;
  unsigned int v47 = 0;
  if (!*((unsigned char *)v6 + 33))
  {
    uint64_t v9 = sub_1B0CC64B8((uint64_t)v6, &v48, (int *)&v47, 1u, 0);
    unsigned int v46 = v9;
    if (v9) {
      goto LABEL_46;
    }
    uint64_t v10 = v48;
    goto LABEL_12;
  }
  unsigned int v45 = 0;
  uint64_t v44 = 0;
  for (uint64_t i = *((void *)v6 + 2); i; uint64_t i = *(void *)(i + 40))
    *(unsigned char *)(i + 1) &= ~4u;
  int v8 = *(unsigned __int8 *)(a1 + 17);
  if (*(unsigned char *)(a1 + 17))
  {
    ++*(_DWORD *)(a1 + 20);
    if (*(unsigned char *)(a1 + 18))
    {
      int v8 = 1;
    }
    else
    {
      sub_1B0D12478(a1);
      int v8 = *(unsigned __int8 *)(a1 + 17);
    }
  }
  unsigned int v13 = bswap32(*(_DWORD *)(*(void *)(*((void *)v6 + 3) + 80) + 52));
  if (v8)
  {
    int v14 = *(_DWORD *)(a1 + 20) - 1;
    *(_DWORD *)(a1 + 20) = v14;
    if (!v14) {
      sub_1B0D12558(a1);
    }
  }
  if (v13 > v6[16])
  {
    uint64_t v15 = sub_1B0D1045C(86771);
    goto LABEL_24;
  }
  do
  {
    do
    {
      while (1)
      {
        unsigned int v16 = v13++;
        if (v13 >= 2) {
          break;
        }
        if (v13) {
          goto LABEL_26;
        }
      }
      unsigned int v17 = (v16 - 1) / (v6[14] / 5u + 1) * (v6[14] / 5u + 1);
      if (v17 + 1 == dword_1E9B51ED0 / v6[13]) {
        int v18 = 3;
      }
      else {
        int v18 = 2;
      }
    }
    while (v13 == v18 + v17);
LABEL_26:
    ;
  }
  while (v16 == dword_1E9B51ED0 / v6[13]);
  unsigned int v19 = v16 + 1;
  unsigned int v47 = v16 + 1;
  uint64_t v9 = sub_1B0CC64B8((uint64_t)v6, &v44, (int *)&v45, v16 + 1, 1);
  unsigned int v46 = v9;
  if (v9) {
    goto LABEL_46;
  }
  uint64_t v20 = v45;
  if (v45 - 1 == v16)
  {
    uint64_t v10 = v44;
    uint64_t v48 = v44;
    goto LABEL_38;
  }
  unsigned __int8 v43 = 0;
  int v42 = 0;
  uint64_t v21 = (unsigned __int8 *)*((void *)v6 + 2);
  if (v21)
  {
    uint64_t v9 = sub_1B0D143DC(v21, 0, 0);
    uint64_t v22 = v44;
    if (!v44) {
      goto LABEL_58;
    }
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v22 = v44;
    if (!v44) {
      goto LABEL_58;
    }
  }
  uint64_t v28 = *(void *)(v22 + 112);
  if ((*(_WORD *)(v28 + 52) & 0x20) != 0)
  {
    uint64_t v29 = *(void *)(v28 + 40);
    --*(_DWORD *)(v29 + 152);
    *(void *)(v28 + 32) = *(void *)(v29 + 168);
    *(void *)(v29 + 168) = v28;
    (*(void (**)(void, void, void))(**(void **)(v29 + 72) + 144))(*(void *)(v29 + 72), *(void *)(v29 + 200) * (*(_DWORD *)(v28 + 48) - 1), *(void *)(v28 + 8));
  }
  else
  {
    sub_1B0D0E3E8(v28);
  }
LABEL_58:
  if (v9) {
    goto LABEL_46;
  }
  uint64_t v49 = 0;
  uint64_t v15 = (*(uint64_t (**)(void))(*(void *)v6 + 288))();
  if (v15)
  {
LABEL_24:
    uint64_t v9 = v15;
    goto LABEL_46;
  }
  uint64_t v30 = *(void *)(v49 + 16);
  if (*(_DWORD *)(v30 + 4) - 1 != v16)
  {
    uint64_t v31 = *(void *)(v49 + 8);
    *(void *)(v30 + 112) = v49;
    *(void *)(v30 + 72) = v6;
    *(void *)(v30 + 80) = v31;
    *(_DWORD *)(v30 + 4) = v19;
    if (v16) {
      char v32 = 0;
    }
    else {
      char v32 = 100;
    }
    *(unsigned char *)(v30 + 9) = v32;
  }
  uint64_t v48 = v30;
  uint64_t v33 = sub_1B0D14784(v6, v16 + 1, &v43, &v42);
  if ((v43 - 1) <= 1u)
  {
    uint64_t v9 = sub_1B0D1045C(86819);
    goto LABEL_68;
  }
  uint64_t v9 = v33;
  if (!v33)
  {
    uint64_t v9 = sub_1B0D14998(v6, v30, v43, v42, v20, 0);
    uint64_t v35 = *(void *)(v30 + 112);
    if ((*(_WORD *)(v35 + 52) & 0x20) != 0)
    {
      uint64_t v36 = *(void *)(v35 + 40);
      --*(_DWORD *)(v36 + 152);
      *(void *)(v35 + 32) = *(void *)(v36 + 168);
      *(void *)(v36 + 168) = v35;
      (*(void (**)(void, void, void))(**(void **)(v36 + 72) + 144))(*(void *)(v36 + 72), *(void *)(v36 + 200) * (*(_DWORD *)(v35 + 48) - 1), *(void *)(v35 + 8));
    }
    else
    {
      sub_1B0D0E3E8(v35);
    }
    if (v9) {
      goto LABEL_46;
    }
    uint64_t v49 = 0;
    uint64_t v15 = (*(uint64_t (**)(void))(*(void *)v6 + 288))();
    if (v15) {
      goto LABEL_24;
    }
    uint64_t v27 = v49;
    uint64_t v10 = *(void *)(v49 + 16);
    if (*(_DWORD *)(v10 + 4) - 1 == v16)
    {
      uint64_t v27 = *(void *)(v10 + 112);
    }
    else
    {
      uint64_t v37 = *(void *)(v49 + 8);
      *(void *)(v10 + 112) = v49;
      *(void *)(v10 + 72) = v6;
      *(void *)(v10 + 80) = v37;
      *(_DWORD *)(v10 + 4) = v19;
      if (v16) {
        char v38 = 0;
      }
      else {
        char v38 = 100;
      }
      *(unsigned char *)(v10 + 9) = v38;
    }
    uint64_t v48 = v10;
    uint64_t v39 = *(_DWORD **)(v27 + 40);
    __int16 v40 = *(_WORD *)(v27 + 52);
    if ((v40 & 4) != 0 && v39[8] >= *(_DWORD *)(v27 + 48))
    {
      if (!v39[32])
      {
        unsigned int v46 = 0;
LABEL_38:
        sub_1B0CD24E8(v6, v16 + 1, 1, 0, &v46);
        uint64_t v9 = v46;
        if (v46)
        {
          if (!v10) {
            goto LABEL_46;
          }
          goto LABEL_52;
        }
        uint64_t v26 = sub_1B0CE888C(a1, 4, v16 + 1);
        unsigned int v46 = v26;
        if (v26)
        {
          uint64_t v9 = v26;
          if (!v10) {
            goto LABEL_46;
          }
LABEL_52:
          uint64_t v27 = *(void *)(v10 + 112);
          if ((*(_WORD *)(v27 + 52) & 0x20) != 0) {
            goto LABEL_69;
          }
          goto LABEL_53;
        }
LABEL_12:
        if (a3) {
          int v11 = 13;
        }
        else {
          int v11 = 10;
        }
        sub_1B0CC63D4(v10, v11);
        uint64_t v12 = *(void *)(v10 + 112);
        if (v12)
        {
          if ((*(_WORD *)(v12 + 52) & 0x20) != 0)
          {
            uint64_t v23 = *(void *)(v12 + 40);
            --*(_DWORD *)(v23 + 152);
            *(void *)(v12 + 32) = *(void *)(v23 + 168);
            *(void *)(v23 + 168) = v12;
            (*(void (**)(void, void, void))(**(void **)(v23 + 72) + 144))(*(void *)(v23 + 72), *(void *)(v23 + 200) * (*(_DWORD *)(v12 + 48) - 1), *(void *)(v12 + 8));
          }
          else
          {
            sub_1B0D0E3E8(v12);
          }
        }
        uint64_t v9 = 0;
        *a2 = v47;
        goto LABEL_46;
      }
      uint64_t v41 = sub_1B0D0F4D4(v27);
    }
    else
    {
      uint64_t v9 = v39[12];
      if (v9)
      {
        unsigned int v46 = v39[12];
LABEL_92:
        if ((v40 & 0x20) == 0) {
          goto LABEL_53;
        }
LABEL_69:
        uint64_t v34 = *(void *)(v27 + 40);
        --*(_DWORD *)(v34 + 152);
        *(void *)(v27 + 32) = *(void *)(v34 + 168);
        *(void *)(v34 + 168) = v27;
        (*(void (**)(void, void, void))(**(void **)(v34 + 72) + 144))(*(void *)(v34 + 72), *(void *)(v34 + 200) * (*(_DWORD *)(v27 + 48) - 1), *(void *)(v27 + 8));
        goto LABEL_46;
      }
      if (v39[46] <= v39[50]) {
        uint64_t v41 = sub_1B0CBD7E0(v27);
      }
      else {
        uint64_t v41 = sub_1B0D133D0(v27);
      }
    }
    uint64_t v9 = v41;
    unsigned int v46 = v41;
    if (v41)
    {
      uint64_t v27 = *(void *)(v10 + 112);
      __int16 v40 = *(_WORD *)(v27 + 52);
      goto LABEL_92;
    }
    goto LABEL_38;
  }
LABEL_68:
  uint64_t v27 = *(void *)(v30 + 112);
  if ((*(_WORD *)(v27 + 52) & 0x20) != 0) {
    goto LABEL_69;
  }
LABEL_53:
  sub_1B0D0E3E8(v27);
LABEL_46:
  if (*(unsigned char *)(a1 + 17))
  {
    int v24 = *(_DWORD *)(a1 + 20) - 1;
    *(_DWORD *)(a1 + 20) = v24;
    if (!v24) {
      sub_1B0D12558(a1);
    }
  }
  return v9;
}

uint64_t sub_1B0D1AA30(uint64_t a1, int64_t a2, char a3, int *a4)
{
  if (!*(unsigned char *)a1 && (*(unsigned char *)(a1 + 1) & 2) != 0)
  {
    int64_t v8 = *(void *)(a1 + 48);
    if (v8 == a2)
    {
      uint64_t result = 0;
      *a4 = 0;
      return result;
    }
    if (v8 < a2)
    {
      if ((*(unsigned char *)(a1 + 1) & 8) != 0)
      {
LABEL_38:
        uint64_t result = 0;
        *a4 = -1;
        return result;
      }
      if (v8 + 1 == a2)
      {
        *a4 = 0;
        uint64_t result = sub_1B0CAE698(a1);
        if (result != 101)
        {
          if (result) {
            return result;
          }
          sub_1B0D146DC(a1);
          if (*(void *)(a1 + 48) == a2) {
            return 0;
          }
        }
      }
    }
  }
  uint64_t result = sub_1B0CACD5C((unsigned __int8 *)a1);
  if (result == 16) {
    goto LABEL_38;
  }
  if (result) {
    return result;
  }
  uint64_t v27 = a4;
  char v10 = 1 - a3;
  char v28 = 1 - a3;
LABEL_15:
  int v11 = 0;
  uint64_t v12 = *(void *)(a1 + 136);
  int v29 = *(unsigned __int16 *)(v12 + 24);
  int v13 = v29 - 1;
  int v14 = (v29 - 1) >> v10;
  __int16 v15 = *(_WORD *)(v12 + 26);
  uint64_t v17 = *(void *)(v12 + 96);
  uint64_t v16 = *(void *)(v12 + 104);
  int v18 = *(unsigned __int8 *)(v12 + 2);
  while (1)
  {
    int64_t v30 = 0;
    uint64_t v19 = (*(unsigned __int8 *)(v17 + 2 * v14 + 1) | (*(unsigned __int8 *)(v17 + 2 * v14) << 8)) & *(void *)&v15;
    uint64_t v20 = (char *)(v16 + v19);
    if (v18)
    {
      uint64_t v21 = (char *)(v16 + v19);
      while (1)
      {
        int v22 = *v21++;
        if ((v22 & 0x80000000) == 0) {
          break;
        }
        uint64_t v20 = v21;
        if ((unint64_t)v21 >= *(void *)(v12 + 88)) {
          return sub_1B0D11B5C(82605, v12);
        }
      }
      ++v20;
    }
    sub_1B0CAD43C(v20, (unint64_t *)&v30);
    int64_t v23 = v30;
    if (v30 < a2)
    {
      int v11 = v14 + 1;
      if (v14 >= v13)
      {
        int v24 = -1;
        goto LABEL_32;
      }
      goto LABEL_28;
    }
    if (v30 <= a2) {
      break;
    }
    if (v11 >= v14)
    {
      int v24 = 1;
LABEL_32:
      if (*(unsigned char *)(v12 + 8))
      {
        uint64_t result = 0;
        *(_WORD *)(a1 + 86) = v14;
        *uint64_t v27 = v24;
LABEL_41:
        *(_WORD *)(a1 + 70) = 0;
        return result;
      }
LABEL_33:
      if (v11 >= v29) {
        uint64_t v25 = *(unsigned __int8 *)(v12 + 9) + 8;
      }
      else {
        uint64_t v25 = (*(unsigned __int8 *)(v17 + 2 * v11 + 1) | (*(unsigned __int8 *)(v17 + 2 * v11) << 8)) & *(void *)&v15;
      }
      unsigned int v26 = bswap32(*(_DWORD *)(*(void *)(v12 + 80) + v25));
      *(_WORD *)(a1 + 86) = v11;
      uint64_t result = sub_1B0CAD12C(a1, v26);
      char v10 = v28;
      if (result) {
        goto LABEL_41;
      }
      goto LABEL_15;
    }
    int v13 = v14 - 1;
LABEL_28:
    int v14 = (v13 + v11) >> 1;
  }
  *(_WORD *)(a1 + 86) = v14;
  if (!*(unsigned char *)(v12 + 8))
  {
    int v11 = v14;
    goto LABEL_33;
  }
  uint64_t result = 0;
  *(unsigned char *)(a1 + 1) |= 2u;
  *(void *)(a1 + 48) = v23;
  *(_WORD *)(a1 + 70) = 0;
  *uint64_t v27 = 0;
  return result;
}

uint64_t sub_1B0D1AC94(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = *a2;
  uint64_t v7 = (uint64_t (*)(void))sub_1B0CB6230;
  if (*(unsigned __int16 *)(*a2 + 8) <= 0xDu)
  {
    uint64_t v8 = a2[1];
    __int16 v9 = *(_WORD *)(v8 + 20);
    if (**(unsigned char **)(v6 + 24))
    {
      uint64_t v7 = (uint64_t (*)(void))sub_1B0CB6230;
      if ((**(unsigned char **)(v6 + 24) & 2) != 0) {
        goto LABEL_11;
      }
      char v10 = -1;
      char v11 = 1;
    }
    else
    {
      char v10 = 1;
      char v11 = -1;
    }
    *((unsigned char *)a2 + 32) = v11;
    *((unsigned char *)a2 + 33) = v10;
    if ((v9 & 4) != 0)
    {
      a2[2] = *(void *)v8;
      uint64_t v7 = (uint64_t (*)(void))sub_1B0D1E92C;
    }
    else
    {
      uint64_t v7 = (uint64_t (*)(void))sub_1B0CB6230;
      if ((v9 & 0x39) == 0)
      {
        uint64_t v7 = (uint64_t (*)(void))sub_1B0CB6230;
        if (!*(void *)(v6 + 32))
        {
          a2[2] = *(void *)(v8 + 8);
          *((_DWORD *)a2 + 6) = *(_DWORD *)(v8 + 16);
          uint64_t v7 = (uint64_t (*)(void))sub_1B0D1EA64;
        }
      }
    }
  }
LABEL_11:
  uint64_t v12 = (int (*)(void))v7;
  *((unsigned char *)a2 + 31) = 0;
  if (*(unsigned char *)a1) {
    goto LABEL_12;
  }
  uint64_t v44 = *(void *)(a1 + 136);
  if (!*(unsigned char *)(v44 + 8)) {
    goto LABEL_12;
  }
  if (*(char *)(a1 + 84) >= 1)
  {
    uint64_t v45 = 0;
    while (*(unsigned __int16 *)(a1 + 144 + 2 * v45 - 56) >= *(unsigned __int16 *)(*(void *)(a1 + 144 + 8 * v45)
                                                                                                + 24))
    {
      if (*(unsigned __int8 *)(a1 + 84) == ++v45) {
        goto LABEL_52;
      }
    }
    goto LABEL_12;
  }
LABEL_52:
  uint64_t v46 = *(unsigned __int16 *)(a1 + 86);
  if (*(unsigned __int16 *)(v44 + 24) - 1 == v46)
  {
    unsigned int v47 = (unsigned __int8 *)(*(void *)(v44 + 104)
                            + ((*(unsigned __int8 *)(*(void *)(v44 + 96) + 2 * v46 + 1) | (*(unsigned __int8 *)(*(void *)(v44 + 96) + 2 * v46) << 8)) & (unint64_t)*(unsigned __int16 *)(v44 + 26)));
    unsigned int v48 = *v47;
    if (v48 <= *(unsigned __int8 *)(v44 + 11)
      || ((char)v47[1] & 0x80000000) == 0 && ((v48 & 0x7F) << 7) + v47[1] <= *(unsigned __int16 *)(v44 + 14))
    {
      int v49 = v7();
      if (v49 <= 0 && !*((unsigned char *)v4 + 31))
      {
        uint64_t v14 = 0;
        *a3 = v49;
        return v14;
      }
    }
  }
  if (*(char *)(a1 + 84) < 1
    || (uint64_t v50 = *(void *)(a1 + 136),
        uint64_t v51 = (unsigned __int8 *)(*(void *)(v50 + 104)
                                + ((*(unsigned __int8 *)(*(void *)(v50 + 96) + 1) | (**(unsigned __int8 **)(v50 + 96) << 8)) & (unint64_t)*(unsigned __int16 *)(v50 + 26))),
        unsigned int v54 = *v51,
        unsigned int v53 = v51 + 1,
        char v52 = v54,
        v54 > *(unsigned __int8 *)(v50 + 11))
    && ((char)*v53 < 0 || ((v52 & 0x7F) << 7) + *v53 > *(unsigned __int16 *)(v50 + 14))
    || v12() > 0
    || *((unsigned char *)v4 + 31))
  {
    *((unsigned char *)v4 + 31) = 0;
LABEL_12:
    uint64_t v13 = sub_1B0CACD5C((unsigned __int8 *)a1);
    if (v13 == 16)
    {
      uint64_t v14 = 0;
      *a3 = -1;
      return v14;
    }
    uint64_t v14 = v13;
    if (v13) {
      return v14;
    }
    uint64_t v15 = *(void *)(a1 + 136);
    uint64_t v4 = a2;
    goto LABEL_15;
  }
  *(unsigned char *)(a1 + 1) &= ~4u;
  uint64_t v15 = *(void *)(a1 + 136);
  if (!*(unsigned char *)v15)
  {
    int v56 = 82801;
LABEL_82:
    return sub_1B0D1045C(v56);
  }
LABEL_15:
  unsigned int v60 = a3;
  uint64_t v61 = (uint64_t *)(a1 + 136);
  uint64_t v62 = (uint64_t *)(a1 + 48);
  int v16 = *(unsigned __int16 *)(v15 + 24);
LABEL_16:
  int v17 = 0;
  int v18 = v16 - 1;
  int v19 = v16 - 1;
  while (1)
  {
    int v20 = v19;
    uint64_t v21 = (unsigned __int8 *)(*(void *)(v15 + 96) + (v19 & 0xFFFFFFFFFFFFFFFELL));
    int v22 = (unsigned __int8 *)(*(void *)(v15 + 104)
                            + ((v21[1] | (*v21 << 8)) & (unint64_t)*(unsigned __int16 *)(v15 + 26)));
    unsigned int v25 = *v22;
    int v24 = v22 + 1;
    char v23 = v25;
    if (v25 > *(unsigned __int8 *)(v15 + 11)
      && ((char)*v24 < 0 || ((v23 & 0x7F) << 7) + *v24 > *(unsigned __int16 *)(v15 + 14)))
    {
      break;
    }
    int v31 = v12();
    int v33 = v20 >> 1;
    if ((v31 & 0x80000000) == 0)
    {
LABEL_35:
      if (!v31)
      {
        *unsigned int v60 = 0;
        *(_WORD *)(a1 + 86) = v20 >> 1;
        if (*((unsigned char *)v4 + 31)) {
          uint64_t v14 = sub_1B0D1045C(82920);
        }
        else {
          uint64_t v14 = 0;
        }
        goto LABEL_88;
      }
      int v18 = v33 - 1;
      goto LABEL_18;
    }
LABEL_17:
    int v17 = v33 + 1;
LABEL_18:
    int v19 = v18 + v17;
    if (v17 > v18)
    {
      if (*(unsigned char *)(v15 + 8))
      {
        uint64_t v14 = 0;
        *(_WORD *)(a1 + 86) = v20 >> 1;
        *unsigned int v60 = v31;
        goto LABEL_88;
      }
      if (v17 >= *(unsigned __int16 *)(v15 + 24))
      {
        unint64_t v35 = *(unsigned __int8 *)(v15 + 9) + 8;
      }
      else
      {
        uint64_t v34 = (unsigned __int8 *)(*(void *)(v15 + 96) + 2 * v17);
        unint64_t v35 = (v34[1] | (*v34 << 8)) & (unint64_t)*(unsigned __int16 *)(v15 + 26);
      }
      uint64_t v36 = (unsigned __int8 *)(*(void *)(v15 + 80) + v35);
      int v37 = *v36;
      int v38 = v36[1];
      int v39 = v36[2];
      unsigned int v40 = v36[3];
      *(_WORD *)(a1 + 70) = 0;
      *(unsigned char *)(a1 + 1) &= 0xF9u;
      uint64_t v41 = *(char *)(a1 + 84);
      if (v41 >= 19)
      {
        int v56 = 82951;
        goto LABEL_82;
      }
      *(_WORD *)(a1 + 2 * v41 + 88) = v17;
      *(void *)(a1 + 8 * v41 + 144) = *(void *)(a1 + 136);
      *(_WORD *)(a1 + 86) = 0;
      *(unsigned char *)(a1 + 84) = v41 + 1;
      uint64_t v42 = sub_1B0D1DE18(*(_DWORD **)(a1 + 32), (v37 << 24) | (v38 << 16) | (v39 << 8) | v40, v61);
      if (v42) {
        goto LABEL_87;
      }
      uint64_t v15 = *v61;
      int v16 = *(unsigned __int16 *)(*v61 + 24);
      uint64_t v4 = a2;
      if (!*(_WORD *)(*v61 + 24) || *(unsigned __int8 *)(v15 + 1) != *(unsigned __int8 *)(a1 + 85))
      {
        uint64_t v43 = *(void *)(v15 + 112);
        if ((*(_WORD *)(v43 + 52) & 0x20) != 0)
        {
          uint64_t v58 = *(void *)(v43 + 40);
          --*(_DWORD *)(v58 + 152);
          *(void *)(v43 + 32) = *(void *)(v58 + 168);
          *(void *)(v58 + 168) = v43;
          (*(void (**)(void, void, void))(**(void **)(v58 + 72) + 144))(*(void *)(v58 + 72), *(void *)(v58 + 200) * (*(_DWORD *)(v43 + 48) - 1), *(void *)(v43 + 8));
        }
        else
        {
          sub_1B0D0E3E8(v43);
        }
        uint64_t v42 = sub_1B0D1045C(82962);
LABEL_87:
        uint64_t v14 = v42;
        char v59 = *(unsigned char *)(a1 + 84) - 1;
        *(unsigned char *)(a1 + 84) = v59;
        *(void *)(a1 + 136) = *(void *)(a1 + 8 * v59 + 144);
        goto LABEL_88;
      }
      goto LABEL_16;
    }
  }
  (*(void (**)(uint64_t, unint64_t, uint64_t *))(v15 + 128))(v15, *(void *)(v15 + 104)+ ((v21[1] | (*v21 << 8)) & (unint64_t)*(unsigned __int16 *)(v15 + 26))- *(unsigned __int8 *)(v15 + 10), v62);
  uint64_t v26 = *v62;
  if ((int)*v62 < 2
    || v26 / *(_DWORD *)(*(void *)(a1 + 32) + 56) > *(_DWORD *)(*(void *)(a1 + 32) + 64))
  {
    uint64_t v14 = sub_1B0D11B5C(82888, v15);
    goto LABEL_88;
  }
  uint64_t v27 = (char *)sub_1B0C7FC94((int)v26 + 18);
  if (!v27)
  {
    uint64_t v14 = 7;
    goto LABEL_88;
  }
  char v28 = v27;
  *(_WORD *)(a1 + 86) = v20 >> 1;
  uint64_t v29 = sub_1B0CD1CD0(a1, 0, v26, v27, 0);
  int64_t v30 = &v28[v26];
  *(void *)int64_t v30 = 0;
  *((void *)v30 + 1) = 0;
  *((_WORD *)v30 + 8) = 0;
  *(unsigned char *)(a1 + 1) &= ~4u;
  if (!v29)
  {
    uint64_t v4 = a2;
    int v31 = sub_1B0D1B630(v26, v28, a2, 0);
    char v32 = (void (**)(char *))&off_1EB21C9E8;
    if (dword_1EB21C9C0)
    {
      if ((void)xmmword_1EB2201B0) {
        xmmword_1EB21CA40(xmmword_1EB2201B0);
      }
      qword_1EB220108 -= (int)off_1EB21C9F8(v28);
      --qword_1EB220150;
      off_1EB21C9E8(v28);
      char v28 = (char *)xmmword_1EB2201B0;
      if (!(void)xmmword_1EB2201B0)
      {
LABEL_32:
        int v33 = v20 >> 1;
        if ((v31 & 0x80000000) == 0) {
          goto LABEL_35;
        }
        goto LABEL_17;
      }
      char v32 = (void (**)(char *))&xmmword_1EB21CA50;
    }
    (*v32)(v28);
    goto LABEL_32;
  }
  uint64_t v14 = v29;
  uint64_t v55 = (void (**)(char *))&off_1EB21C9E8;
  if (!dword_1EB21C9C0)
  {
LABEL_75:
    (*v55)(v28);
    goto LABEL_88;
  }
  if ((void)xmmword_1EB2201B0) {
    xmmword_1EB21CA40(xmmword_1EB2201B0);
  }
  qword_1EB220108 -= (int)off_1EB21C9F8(v28);
  --qword_1EB220150;
  off_1EB21C9E8(v28);
  char v28 = (char *)xmmword_1EB2201B0;
  if ((void)xmmword_1EB2201B0)
  {
    uint64_t v55 = (void (**)(char *))&xmmword_1EB21CA50;
    goto LABEL_75;
  }
LABEL_88:
  *(_WORD *)(a1 + 70) = 0;
  return v14;
}

void *sub_1B0D1B400(uint64_t *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, unsigned int a8)
{
  uint64_t v9 = *a1;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  uint64_t v34 = 0;
  if ((*(unsigned char *)(a5 + 48) & 0x80) != 0)
  {
    for (uint64_t i = *(void *)(a5 + 16); i; uint64_t i = *(void *)(i + 40))
    {
      if ((*(_WORD *)(i + 99) & 3) == 2) {
        break;
      }
    }
    a6 = 0;
    uint64_t v10 = 0;
    uint64_t v34 = i;
  }
  else if (a3 == 23)
  {
    uint64_t v10 = *(void *)(a1[13] + ((uint64_t)(int)a7 << 6));
  }
  else
  {
    uint64_t v10 = a6;
  }
  v26[0] = a1;
  v26[1] = a2;
  BYTE4(v28) = *(unsigned char *)(v9 + 100);
  WORD3(v28) = *(_WORD *)(a5 + 54);
  LODWORD(v27) = a3;
  *(void *)&long long v29 = v9;
  *((void *)&v29 + 1) = &unk_1B0DE2208;
  *(void *)&long long v32 = a6;
  *((void *)&v32 + 1) = v10;
  *((void *)&v33 + 1) = a5;
  *((void *)&v31 + 1) = __PAIR64__(a8, a7);
  *(void *)(v9 + 368) = v26;
  uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t))(v9 + 360))(*(void *)(v9 + 352), v9);
  *(void *)(v9 + 368) = 0;
  if (*((void *)&v27 + 1)) {
    uint64_t result = sub_1B0D05C10((void *)v9, *((void **)&v27 + 1));
  }
  uint64_t v13 = (void *)*((void *)&v30 + 1);
  if (*((void *)&v30 + 1))
  {
    uint64_t v14 = 0;
    unint64_t v15 = ((unint64_t)WORD3(v28) << 6) + 64;
    do
    {
      uint64_t v16 = v13[1];
      if (*(void *)(v16 + v14 + 40) && *(_DWORD *)(v16 + v14 + 32)) {
        sub_1B0D180E4(v16 + v14);
      }
      v14 += 64;
    }
    while (v15 != v14);
    uint64_t result = sub_1B0D15C20((void *)v9, v13);
  }
  int v17 = (void *)v31;
  if ((void)v31)
  {
    uint64_t v18 = 0;
    unint64_t v19 = ((unint64_t)WORD3(v28) << 6) + 64;
    do
    {
      uint64_t v20 = v17[1];
      if (*(void *)(v20 + v18 + 40) && *(_DWORD *)(v20 + v18 + 32)) {
        sub_1B0D180E4(v20 + v18);
      }
      v18 += 64;
    }
    while (v19 != v18);
    uint64_t result = sub_1B0D15C20((void *)v9, v17);
  }
  uint64_t v21 = (void *)v33;
  if ((void)v33)
  {
    int v22 = *(__int16 *)(a2 + 64);
    if (v22 >= 1)
    {
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      do
      {
        uint64_t v25 = v33 + v23;
        if ((*(_WORD *)(v33 + v23 + 20) & 0x9000) != 0 || *(_DWORD *)(v25 + 32))
        {
          sub_1B0D180E4(v25);
          LOWORD(v22) = *(_WORD *)(a2 + 64);
        }
        ++v24;
        v23 += 64;
      }
      while (v24 < (__int16)v22);
      uint64_t v21 = (void *)v33;
    }
    return sub_1B0D15C20((void *)v9, v21);
  }
  return result;
}

uint64_t sub_1B0D1B630(unsigned int a1, char *a2, uint64_t *a3, int a4)
{
  uint64_t v7 = a3[1];
  if (a4)
  {
    unsigned int v8 = a2[1];
    if (a2[1] < 0)
    {
      int v12 = a2[2];
      if (a2[2] < 0)
      {
        int v14 = a2[3];
        if (v14 < 0)
        {
          *(void *)&long long v59 = 0;
          char v16 = sub_1B0CAD43C(a2 + 1, (unint64_t *)&v59);
          unsigned int v8 = v59;
          unsigned int v9 = (v16 + 1);
          if (DWORD1(v59))
          {
            unsigned int v10 = *a2;
            unsigned int v8 = -1;
            goto LABEL_16;
          }
        }
        else
        {
          unsigned int v8 = v14 & 0x7F | (v8 << 14) & 0x1FC07F | ((v12 & 0x7F) << 7);
          unsigned int v9 = 4;
        }
      }
      else
      {
        unsigned int v8 = ((v8 & 0x7F) << 7) | v12;
        unsigned int v9 = 3;
      }
    }
    else
    {
      unsigned int v9 = 2;
    }
    unsigned int v10 = *a2;
    if (v8 < 0x80)
    {
      unsigned int v17 = byte_1B0DE2184[v8];
LABEL_18:
      unsigned int v18 = v17 + v10;
      v7 += 64;
      unint64_t v11 = 1;
      if (v17 + v10 > a1)
      {
LABEL_19:
        uint64_t v19 = 0;
        *((unsigned char *)a3 + 31) = sub_1B0D1045C(95878);
        return v19;
      }
      goto LABEL_24;
    }
LABEL_16:
    unsigned int v17 = (v8 - 12) >> 1;
    goto LABEL_18;
  }
  unsigned int v10 = *a2;
  if (*a2 < 0)
  {
    int v13 = a2[1];
    if (a2[1] < 0)
    {
      int v15 = a2[2];
      if (v15 < 0)
      {
        *(void *)&long long v59 = 0;
        unsigned int v9 = sub_1B0CAD43C(a2, (unint64_t *)&v59);
        unint64_t v11 = 0;
        if (DWORD1(v59)) {
          unsigned int v10 = -1;
        }
        else {
          unsigned int v10 = v59;
        }
      }
      else
      {
        unint64_t v11 = 0;
        unsigned int v10 = v15 & 0x7F | (v10 << 14) & 0x1FC07F | ((v13 & 0x7F) << 7);
        unsigned int v9 = 3;
      }
    }
    else
    {
      unint64_t v11 = 0;
      unsigned int v10 = ((v10 & 0x7F) << 7) | v13;
      unsigned int v9 = 2;
    }
  }
  else
  {
    unint64_t v11 = 0;
    unsigned int v9 = 1;
  }
  unsigned int v18 = v10;
  if (v10 > a1) {
    goto LABEL_19;
  }
LABEL_24:
  uint64_t v58 = (char *)a3 + 31;
  long long v61 = 0u;
  long long v62 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  while (1)
  {
    __int16 v21 = *(_WORD *)(v7 + 20);
    if ((v21 & 0x24) == 0) {
      break;
    }
    unsigned int v22 = a2[v9];
    BOOL v23 = v22 == 10;
    if (v22 >= 0xA) {
      goto LABEL_136;
    }
    if (v22 == 7)
    {
      long long v28 = (unsigned __int8 *)&a2[v18];
      int v29 = ~((*v28 << 24) | (v28[1] << 16));
      *(void *)&double v30 = ((unint64_t)v28[4] << 24) | ((unint64_t)v28[5] << 16) | ((unint64_t)((*v28 << 24) | (v28[1] << 16) | (bswap32(*((unsigned __int16 *)v28 + 1)) >> 16)) << 32) | v28[7] | ((unint64_t)v28[6] << 8);
      *(double *)&long long v59 = v30;
      if ((*(void *)&v30 & 0xFFFFFFFFFFFFFLL) != 0 && (v29 & 0x7FF00000) == 0) {
        __int16 v32 = 1;
      }
      else {
        __int16 v32 = 8;
      }
      WORD2(v60) = v32;
      double v33 = v30;
      if (v30 < -9.22337204e18) {
        goto LABEL_135;
      }
      if (v30 >= 9.22337204e18) {
        goto LABEL_133;
      }
      uint64_t v34 = *(void *)v7;
      if (*(void *)v7 < (uint64_t)v33) {
        goto LABEL_133;
      }
      if (v34 > (uint64_t)v33) {
        goto LABEL_135;
      }
      if (v33 > (double)v34) {
        goto LABEL_133;
      }
      if (v33 >= (double)v34) {
        uint64_t v19 = 0;
      }
      else {
        uint64_t v19 = 0xFFFFFFFFLL;
      }
      unsigned int v22 = 7;
      if (v19) {
        goto LABEL_142;
      }
    }
    else
    {
      if (!a2[v9]) {
        goto LABEL_134;
      }
      uint64_t v24 = (unsigned __int8 *)&a2[v18];
      switch(a2[v9])
      {
        case 1:
          int64_t v25 = (char)*v24;
          break;
        case 2:
          int64_t v25 = v24[1] | (unint64_t)((uint64_t)(char)*v24 << 8);
          break;
        case 3:
          int64_t v25 = ((uint64_t)(char)*v24 << 16) | ((unint64_t)v24[1] << 8) | v24[2];
          break;
        case 4:
          int64_t v25 = (*v24 << 24) | ((unint64_t)v24[1] << 16) | ((unint64_t)v24[2] << 8) | v24[3];
          break;
        case 5:
          int64_t v25 = bswap32(*(_DWORD *)(v24 + 2)) | ((unint64_t)(v24[1] | ((char)*v24 << 8)) << 32);
          break;
        case 6:
          int64_t v25 = bswap64(*(void *)v24);
          break;
        default:
          int64_t v25 = v22 - 8;
          break;
      }
      if (v25 < *(void *)v7) {
        goto LABEL_134;
      }
      if (v25 > *(void *)v7)
      {
        uint64_t v19 = 1;
        goto LABEL_142;
      }
    }
LABEL_116:
    if (++v11 == *((unsigned __int16 *)a3 + 14)) {
      goto LABEL_132;
    }
    v7 += 64;
    if (v22 < 0x80) {
      goto LABEL_119;
    }
    unsigned int v50 = (v22 - 12) >> 1;
LABEL_120:
    v18 += v50;
    if (v18 > a1)
    {
LABEL_132:
      *((unsigned char *)a3 + 34) = 1;
      return *((char *)a3 + 30);
    }
    if (v22 < 0x80)
    {
      int v20 = 1;
    }
    else
    {
      unint64_t v51 = v22;
      int v20 = 1;
      do
      {
        unint64_t v52 = v51 >> 14;
        v51 >>= 7;
        ++v20;
      }
      while (v52);
    }
    v9 += v20;
    if (v9 >= v10)
    {
      int v56 = 96029;
LABEL_141:
      uint64_t v19 = 0;
      *uint64_t v58 = sub_1B0D1045C(v56);
      return v19;
    }
  }
  if ((v21 & 8) != 0)
  {
    unsigned int v22 = a2[v9];
    BOOL v23 = v22 == 10;
    if (v22 >= 0xA)
    {
LABEL_136:
      if (v23) {
        uint64_t v19 = 0xFFFFFFFFLL;
      }
      else {
        uint64_t v19 = 1;
      }
      unsigned int v22 = 7;
      goto LABEL_142;
    }
    if (!a2[v9]) {
      goto LABEL_134;
    }
    sub_1B0CAD5D4(&a2[v18], a2[v9], (uint64_t)&v59);
    double v35 = *(double *)v7;
    if (v22 == 7)
    {
      if (*(double *)&v59 < v35) {
        goto LABEL_135;
      }
      if (*(double *)&v59 > v35) {
        goto LABEL_133;
      }
      if (++v11 == *((unsigned __int16 *)a3 + 14)) {
        goto LABEL_132;
      }
      v7 += 64;
      unsigned int v22 = 7u;
LABEL_119:
      unsigned int v50 = byte_1B0DE2184[v22];
      goto LABEL_120;
    }
    if (v35 < -9.22337204e18) {
      goto LABEL_133;
    }
    if (v35 >= 9.22337204e18 || (uint64_t)v59 < (uint64_t)v35) {
      goto LABEL_135;
    }
    if ((uint64_t)v59 > (uint64_t)v35) {
      goto LABEL_133;
    }
    if (v35 > (double)(uint64_t)v59)
    {
LABEL_135:
      unsigned int v22 = 7;
      uint64_t v19 = 0xFFFFFFFFLL;
      goto LABEL_142;
    }
    uint64_t v19 = v35 < (double)(uint64_t)v59;
    goto LABEL_115;
  }
  uint64_t v26 = &a2[v9];
  if ((v21 & 2) != 0)
  {
    unsigned int v22 = *v26;
    if (*v26 < 0)
    {
      int v36 = v26[1];
      if (v26[1] < 0)
      {
        int v38 = v26[2];
        if (v38 < 0)
        {
          unint64_t v63 = 0;
          sub_1B0CAD43C(v26, &v63);
          unsigned int v22 = v63;
          if (HIDWORD(v63))
          {
            unsigned int v22 = -1;
            goto LABEL_95;
          }
        }
        else
        {
          unsigned int v22 = v38 & 0x7F | (v22 << 14) & 0x1FC07F | ((v36 & 0x7F) << 7);
        }
      }
      else
      {
        unsigned int v22 = ((v22 & 0x7F) << 7) | v36;
      }
    }
    if (v22 < 0xC) {
      goto LABEL_134;
    }
    if ((v22 & 1) == 0) {
      goto LABEL_133;
    }
LABEL_95:
    LODWORD(v40) = (v22 - 12) >> 1;
    LODWORD(v60) = v40;
    if (v40 + v18 > a1 || (uint64_t v41 = *a3, v11 >= *(unsigned __int16 *)(*a3 + 8)))
    {
      int v56 = 95955;
      goto LABEL_141;
    }
    uint64_t v42 = v41 + 8 * v11;
    uint64_t v44 = *(void *)(v42 + 32);
    uint64_t v43 = (uint64_t *)(v42 + 32);
    if (v44)
    {
      BYTE6(v60) = *(unsigned char *)(v41 + 4);
      *((void *)&v60 + 1) = *(void *)(v41 + 16);
      WORD2(v60) = 2;
      *((void *)&v59 + 1) = &a2[v18];
      uint64_t v19 = sub_1B0D1D834(&v59, (long long *)v7, *v43, v58);
      if (v19) {
        goto LABEL_142;
      }
      goto LABEL_116;
    }
    int v45 = *(_DWORD *)(v7 + 16);
    uint64_t v19 = (v40 - v45);
    if ((int)v40 >= v45) {
      LODWORD(v40) = *(_DWORD *)(v7 + 16);
    }
LABEL_114:
    uint64_t v49 = memcmp(&a2[v18], *(const void **)(v7 + 8), (int)v40);
    if (v49)
    {
      unsigned int v22 = 7;
      uint64_t v19 = v49;
      goto LABEL_142;
    }
LABEL_115:
    if (v19) {
      goto LABEL_142;
    }
    goto LABEL_116;
  }
  unsigned int v22 = *v26;
  if ((v21 & 0x10) == 0)
  {
    if (*v26) {
      BOOL v27 = v22 == 10;
    }
    else {
      BOOL v27 = 1;
    }
    uint64_t v19 = !v27;
    if (v19) {
      goto LABEL_142;
    }
    goto LABEL_116;
  }
  if ((v22 & 0x80) != 0)
  {
    int v37 = v26[1];
    if (v26[1] < 0)
    {
      int v39 = v26[2];
      if (v39 < 0)
      {
        unint64_t v63 = 0;
        sub_1B0CAD43C(v26, &v63);
        if (HIDWORD(v63)) {
          unsigned int v22 = -1;
        }
        else {
          unsigned int v22 = v63;
        }
      }
      else
      {
        unsigned int v22 = v39 & 0x7F | (v22 << 14) & 0x1FC07F | ((v37 & 0x7F) << 7);
      }
    }
    else
    {
      unsigned int v22 = ((v22 & 0x7F) << 7) | v37;
    }
  }
  unsigned int v46 = v22 - 12;
  if (v22 < 0xC || (v22 & 1) != 0)
  {
LABEL_134:
    uint64_t v19 = 0xFFFFFFFFLL;
    goto LABEL_142;
  }
  uint64_t v40 = v46 >> 1;
  if (v40 + v18 > a1)
  {
    int v56 = 95985;
    goto LABEL_141;
  }
  if ((*(_WORD *)(v7 + 20) & 0x400) == 0)
  {
    int v48 = *(_DWORD *)(v7 + 16);
    uint64_t v19 = (v40 - v48);
    if ((int)v40 >= v48) {
      LODWORD(v40) = *(_DWORD *)(v7 + 16);
    }
    goto LABEL_114;
  }
  if (v46 < 2)
  {
LABEL_129:
    uint64_t v19 = (v40 - *(_DWORD *)v7);
    if (v19) {
      goto LABEL_142;
    }
    goto LABEL_116;
  }
  unsigned int v53 = (unsigned __int8 *)&a2[v18];
  uint64_t v54 = v40;
  while (!*v53++)
  {
    if (!--v54) {
      goto LABEL_129;
    }
  }
LABEL_133:
  unsigned int v22 = 7;
  uint64_t v19 = 1;
LABEL_142:
  if (*(unsigned char *)(*(void *)(*a3 + 24) + v11))
  {
    if ((*(unsigned char *)(*(void *)(*a3 + 24) + v11) & 2) == 0) {
      return -(int)v19;
    }
    if (v22)
    {
      if (((((*(unsigned char *)(*(void *)(*a3 + 24) + v11) & 1) == 0) ^ *(unsigned __int16 *)(v7 + 20)) & 1) == 0) {
        return -(int)v19;
      }
    }
    else if ((*(unsigned char *)(*(void *)(*a3 + 24) + v11) & 1) == 0)
    {
      return -(int)v19;
    }
  }
  return v19;
}

uint64_t sub_1B0D1BE04(uint64_t result, int a2, int a3, int a4)
{
  uint64_t v4 = *(void *)(*(void *)(result + 32) + 32 * a2 + 24);
  for (uint64_t i = *(void **)(v4 + 16); i; uint64_t i = (void *)*i)
  {
    uint64_t v7 = i[2];
    if (*(_DWORD *)(v7 + 40) == a3) {
      *(_DWORD *)(v7 + 40) = a4;
    }
  }
  for (uint64_t j = *(void **)(v4 + 40); j; uint64_t j = (void *)*j)
  {
    uint64_t v8 = j[2];
    if (*(_DWORD *)(v8 + 88) == a3) {
      *(_DWORD *)(v8 + 88) = a4;
    }
  }
  return result;
}

uint64_t sub_1B0D1BE68(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 8);
  bzero(v9, 0x338uLL);
  long long v12 = *(_OWORD *)(a1 + 8);
  uint64_t v13 = *(void *)(a1 + 24);
  long long v10 = *(_OWORD *)(a1 + 56);
  uint64_t v11 = *(void *)(a1 + 72);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  sub_1B0D2226C(a1 + 32);
  uint64_t v3 = (void *)*((void *)&v10 + 1);
  if (*((void *)&v10 + 1))
  {
    do
    {
      sub_1B0C8AF78(v9, v3[2]);
      uint64_t v3 = (void *)*v3;
    }
    while (v3);
  }
  sub_1B0D2226C((uint64_t)&v10);
  *uint64_t v2 = 0;
  v2[1] = 0;
  v2[2] = 0;
  uint64_t v4 = (void *)*((void *)&v12 + 1);
  if (*((void *)&v12 + 1))
  {
    do
    {
      uint64_t v7 = v4[2];
      if (v7)
      {
        if (v9[102] || (int v8 = *(_DWORD *)(v7 + 44) - 1, (*(_DWORD *)(v7 + 44) = v8) == 0)) {
          sub_1B0D26BF8(v9, (void *)v7);
        }
      }
      uint64_t v4 = (void *)*v4;
    }
    while (v4);
  }
  sub_1B0D2226C((uint64_t)&v12);
  uint64_t result = sub_1B0D2226C(a1 + 80);
  *(void *)(a1 + 104) = 0;
  __int16 v6 = *(_WORD *)(a1 + 114);
  if (v6) {
    ++*(_DWORD *)(a1 + 4);
  }
  *(_WORD *)(a1 + 114) = v6 & 0xFFF6;
  return result;
}

uint64_t sub_1B0D1BF78(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if ((*(_WORD *)(a1 + 20) & 0x9000) != 0 || *(_DWORD *)(a1 + 32)) {
    sub_1B0D180E4(a1);
  }
  unint64_t v3 = sub_1B0D05DC0(v2, 0x38uLL);
  if (v3)
  {
    unint64_t v4 = v3;
    if (v2 && *(void *)(v2 + 520) > v3)
    {
      if (*(void *)(v2 + 496) <= v3)
      {
        int v5 = 128;
        goto LABEL_10;
      }
      if (*(void *)(v2 + 504) <= v3)
      {
        int v5 = *(unsigned __int16 *)(v2 + 438);
        goto LABEL_10;
      }
    }
    int v5 = off_1EB21C9F8(v3);
LABEL_10:
    uint64_t result = 0;
    *(void *)unint64_t v4 = 0;
    *(void *)(v4 + 8) = v2;
    *(void *)(v4 + 32) = v4 + 56;
    *(void *)(v4 + 40) = 0;
    *(void *)(v4 + 16) = 0;
    *(void *)(v4 + 24) = 0;
    *(_WORD *)(v4 + 48) = (v5 - 56) / 0x18uLL;
    *(_WORD *)(v4 + 50) = 1;
    *(_DWORD *)(v4 + 52) = 0;
    *(void *)(a1 + 8) = v4;
    *(_WORD *)(a1 + 20) = 4112;
    *(unsigned char *)(a1 + 56) = 0;
    *(void *)(a1 + 48) = sub_1B0D240B8;
    return result;
  }
  return 7;
}

uint64_t sub_1B0D1C088(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  if (*(_WORD *)(result + 48))
  {
    unint64_t v4 = *(void **)(result + 32);
    --*(_WORD *)(result + 48);
    *(void *)(result + 32) = v4 + 3;
    if (!v4) {
      return result;
    }
    goto LABEL_17;
  }
  uint64_t result = *(void *)(result + 8);
  if (*(unsigned __int16 *)(result + 436) <= 0x3F7u)
  {
    if (*(_DWORD *)(result + 432))
    {
      if (*(unsigned char *)(result + 103)) {
        return result;
      }
    }
    else
    {
      ++*(_DWORD *)(result + 452);
    }
LABEL_15:
    uint64_t result = sub_1B0D05FA0(result, 1016);
    int v5 = (void *)result;
    if (!result) {
      return result;
    }
    goto LABEL_16;
  }
  int v5 = *(void **)(result + 472);
  if (v5)
  {
    __int16 v6 = (void *)(result + 472);
  }
  else
  {
    int v5 = *(void **)(result + 464);
    if (!v5)
    {
      ++*(_DWORD *)(result + 456);
      goto LABEL_15;
    }
    __int16 v6 = (void *)(result + 464);
  }
  *__int16 v6 = *v5;
  ++*(_DWORD *)(result + 448);
LABEL_16:
  void *v5 = *(void *)v3;
  uint64_t v7 = v5 + 4;
  *(void *)uint64_t v3 = v5;
  unint64_t v4 = v5 + 1;
  *(_WORD *)(v3 + 48) = 41;
  *(void *)(v3 + 32) = v7;
LABEL_17:
  *unint64_t v4 = a2;
  v4[1] = 0;
  int v8 = *(void **)(v3 + 24);
  if (v8)
  {
    if (*v8 >= a2) {
      *(_WORD *)(v3 + 50) &= ~1u;
    }
    unsigned int v9 = v8 + 1;
  }
  else
  {
    unsigned int v9 = (void *)(v3 + 16);
  }
  *unsigned int v9 = v4;
  *(void *)(v3 + 24) = v4;
  return result;
}

uint64_t sub_1B0D1C1AC(uint64_t a1, void *a2)
{
  __int16 v4 = *(_WORD *)(a1 + 50);
  if ((v4 & 2) == 0)
  {
    if ((v4 & 1) == 0)
    {
      *(void *)(a1 + 16) = sub_1B0D24120(*(void **)(a1 + 16));
      __int16 v4 = *(_WORD *)(a1 + 50);
    }
    *(_WORD *)(a1 + 50) = v4 | 3;
  }
  __int16 v6 = (void *)(a1 + 16);
  int v5 = *(uint64_t **)(a1 + 16);
  if (!v5) {
    return 0;
  }
  uint64_t v8 = *v5;
  uint64_t v7 = v5[1];
  *a2 = v8;
  *__int16 v6 = v7;
  if (v7) {
    return 1;
  }
  long long v10 = *(void **)a1;
  if (*(void *)a1)
  {
    do
    {
      uint64_t v11 = (void *)*v10;
      sub_1B0D05C10(*(void **)(a1 + 8), v10);
      long long v10 = v11;
    }
    while (v11);
  }
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 48) = 0x10000;
  *(void *)(a1 + 40) = 0;
  uint64_t result = 1;
  *__int16 v6 = 0;
  *(void *)(a1 + 24) = 0;
  return result;
}

uint64_t sub_1B0D1C25C(uint64_t a1, int a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 52) == a2)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    if (v5) {
      goto LABEL_49;
    }
    return 0;
  }
  uint64_t v8 = (void *)(a1 + 16);
  uint64_t v7 = *(void **)(a1 + 16);
  if (v7)
  {
    unsigned int v9 = (void **)(a1 + 40);
    if ((*(_WORD *)(a1 + 50) & 1) == 0) {
      uint64_t v7 = sub_1B0D24120(*(void **)(a1 + 16));
    }
    while (1)
    {
      char v16 = *v9;
      if (!*v9) {
        break;
      }
      uint64_t v10 = v16[2];
      if (!v10)
      {
        uint64_t v17 = v7[1];
        v7[1] = 0;
        void v7[2] = 0;
        if (!v17)
        {
          v16[2] = v7;
          goto LABEL_45;
        }
        int v18 = 1;
        do
        {
          uint64_t v19 = (void *)v17;
          uint64_t v29 = *(void *)(v17 + 8);
          *(void *)(v17 + 16) = v7;
          *(void *)(v17 + 8) = sub_1B0D24340(&v29, v18++);
          uint64_t v17 = v29;
          uint64_t v7 = v19;
        }
        while (v29);
        goto LABEL_44;
      }
      unsigned int v9 = (void **)(v16 + 1);
      uint64_t v27 = 0;
      long long v28 = 0;
      sub_1B0D242DC(v10, &v28, &v27);
      v16[2] = 0;
      uint64_t v11 = v28;
      uint64_t v29 = 0;
      double v30 = 0;
      long long v12 = &v29;
      uint64_t v31 = 0;
      do
      {
        uint64_t v13 = *v11;
        int v14 = v7;
        while (1)
        {
          uint64_t v7 = v14;
          uint64_t v15 = *v14;
          if (v13 <= v15) {
            break;
          }
          v12[1] = (uint64_t)v7;
          int v14 = (void *)v7[1];
          long long v12 = v7;
          if (!v14)
          {
            long long v12 = v7;
            uint64_t v7 = v11;
            goto LABEL_16;
          }
        }
        if (v13 < v15)
        {
          v12[1] = (uint64_t)v11;
          long long v12 = v11;
        }
        uint64_t v11 = (void *)v11[1];
      }
      while (v11);
LABEL_16:
      v12[1] = (uint64_t)v7;
      uint64_t v7 = v30;
    }
    if (*(_WORD *)(a1 + 48))
    {
      char v16 = *(void **)(a1 + 32);
      --*(_WORD *)(a1 + 48);
      *(void *)(a1 + 32) = v16 + 3;
      *unsigned int v9 = v16;
      if (!v16) {
        goto LABEL_45;
      }
      goto LABEL_39;
    }
    uint64_t v20 = *(void *)(a1 + 8);
    if (*(unsigned __int16 *)(v20 + 436) <= 0x3F7u)
    {
      if (*(_DWORD *)(v20 + 432))
      {
        if (*(unsigned char *)(v20 + 103))
        {
LABEL_57:
          *unsigned int v9 = 0;
LABEL_45:
          *uint64_t v8 = 0;
          *(void *)(a1 + 24) = 0;
          *(_WORD *)(a1 + 50) |= 1u;
          goto LABEL_46;
        }
      }
      else
      {
        ++*(_DWORD *)(v20 + 452);
      }
LABEL_37:
      __int16 v21 = (void *)sub_1B0D05FA0(v20, 1016);
      if (v21) {
        goto LABEL_38;
      }
      goto LABEL_57;
    }
    __int16 v21 = *(void **)(v20 + 472);
    if (v21)
    {
      unsigned int v22 = (void *)(v20 + 472);
    }
    else
    {
      __int16 v21 = *(void **)(v20 + 464);
      if (!v21)
      {
        ++*(_DWORD *)(v20 + 456);
        goto LABEL_37;
      }
      unsigned int v22 = (void *)(v20 + 464);
    }
    *unsigned int v22 = *v21;
    ++*(_DWORD *)(v20 + 448);
LABEL_38:
    void *v21 = *(void *)a1;
    *(void *)a1 = v21;
    char v16 = v21 + 1;
    *(_WORD *)(a1 + 48) = 41;
    *(void *)(a1 + 32) = v21 + 4;
    *unsigned int v9 = v21 + 1;
LABEL_39:
    *char v16 = 0;
    v16[1] = 0;
    uint64_t v23 = v7[1];
    v7[1] = 0;
    void v7[2] = 0;
    if (v23)
    {
      int v24 = 1;
      do
      {
        uint64_t v19 = (void *)v23;
        uint64_t v29 = *(void *)(v23 + 8);
        *(void *)(v23 + 16) = v7;
        *(void *)(v23 + 8) = sub_1B0D24340(&v29, v24++);
        uint64_t v23 = v29;
        uint64_t v7 = v19;
      }
      while (v29);
    }
    else
    {
      uint64_t v19 = v7;
    }
LABEL_44:
    v16[2] = v19;
    goto LABEL_45;
  }
LABEL_46:
  *(_DWORD *)(a1 + 52) = a2;
  uint64_t v5 = *(void *)(a1 + 40);
  if (!v5) {
    return 0;
  }
LABEL_49:
  while (1)
  {
    uint64_t v26 = *(void **)(v5 + 16);
    if (v26) {
      break;
    }
LABEL_48:
    uint64_t v5 = *(void *)(v5 + 8);
    if (!v5) {
      return 0;
    }
  }
  while (1)
  {
    while (*v26 < a3)
    {
      uint64_t v26 = (void *)v26[1];
      if (!v26) {
        goto LABEL_48;
      }
    }
    if (*v26 <= a3) {
      return 1;
    }
    uint64_t v26 = (void *)v26[2];
    if (!v26) {
      goto LABEL_48;
    }
  }
}

void *sub_1B0D1C54C(void *result)
{
  uint64_t v1 = *result;
  result[1] = *(void *)(*result + 360);
  *(void *)(v1 + 360) = result;
  return result;
}

uint64_t sub_1B0D1C560(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 344);
  if (v4) {
    goto LABEL_2;
  }
  int v12 = *(unsigned __int8 *)(a1 + 22);
  if (v12 == 5 || v12 == 0)
  {
    if (*(unsigned char *)(a1 + 17))
    {
      if (v12 == 5) {
        goto LABEL_31;
      }
    }
    else
    {
      uint64_t v19 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 72) + 56))(*(void *)(a1 + 72), 1);
      if (v19) {
        return v19;
      }
      if (*(unsigned char *)(a1 + 22) == 5) {
        goto LABEL_31;
      }
    }
    *(unsigned char *)(a1 + 22) = 1;
  }
LABEL_31:
  uint64_t v7 = (*(uint64_t (**)(void))(*(void *)a1 + 56))();
  if (v7) {
    return v7;
  }
  uint64_t v4 = *(void *)(a1 + 344);
  if (!v4) {
    return 0;
  }
LABEL_2:
  uint64_t v5 = *(unsigned __int8 *)(a1 + 22);
  if (v5 < 4 || v5 == 5)
  {
    if (!*(unsigned char *)(a1 + 17))
    {
      uint64_t v14 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 72) + 56))(*(void *)(a1 + 72), 4);
      if (v14)
      {
        uint64_t v7 = v14;
        uint64_t v15 = *(void *)(a1 + 72);
        if (*(void *)v15)
        {
          if (!*(unsigned char *)(a1 + 17)) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 64))(v15, v5);
          }
          if (*(unsigned char *)(a1 + 22) != 5) {
            *(unsigned char *)(a1 + 22) = v5;
          }
        }
        goto LABEL_40;
      }
      uint64_t v4 = *(void *)(a1 + 344);
    }
    *(unsigned char *)(a1 + 22) = 4;
  }
  uint64_t v7 = sub_1B0CC7A24(v4, a2, *(unsigned __int8 *)(a1 + 15), *(_DWORD *)(a1 + 200), *(void *)(a1 + 328));
  *(void *)(a1 + 344) = 0;
  uint64_t v8 = **(void **)(a1 + 72);
  if (v8 && *(int *)v8 >= 3)
  {
    uint64_t v9 = *(void *)(a1 + 160);
    *(unsigned char *)(a1 + 27) = v9 > 0;
    uint64_t v10 = sub_1B0D11088;
    if (!*(_DWORD *)(a1 + 48))
    {
      if (v9 < 1 || (uint64_t v10 = sub_1B0D11094, *(void *)(a1 + 296))) {
        uint64_t v10 = sub_1B0D112F8;
      }
    }
    *(void *)(a1 + 288) = v10;
    (*(void (**)(void))(v8 + 80))();
  }
  if (v7)
  {
    if (!*(unsigned char *)(a1 + 8)) {
      goto LABEL_18;
    }
    return v7;
  }
  char v16 = *(uint64_t (**)(void))(*(void *)a1 + 48);
  if (!v16) {
    return 0;
  }
  uint64_t v17 = v16();
  uint64_t v7 = 0;
  if (v17) {
    BOOL v18 = v17 == 5898;
  }
  else {
    BOOL v18 = 1;
  }
  if (!v18)
  {
    uint64_t v7 = v17;
    if (!*(unsigned char *)(a1 + 8))
    {
LABEL_18:
      uint64_t v11 = *(void *)(a1 + 72);
      if (*(void *)v11)
      {
        if (!*(unsigned char *)(a1 + 17)) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 64))(v11, 1);
        }
        if (*(unsigned char *)(a1 + 22) != 5) {
          *(unsigned char *)(a1 + 22) = 1;
        }
      }
LABEL_40:
      *(unsigned char *)(a1 + 23) = *(unsigned char *)(a1 + 16);
    }
  }
  return v7;
}

uint64_t sub_1B0D1C7E0(uint64_t a1, int a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 9);
  if (*(unsigned char *)(a1 + 19)) {
    BOOL v4 = a2 == 4;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4 && a2 != 2 || v3 == a2) {
    return *(unsigned __int8 *)(a1 + 9);
  }
  *(unsigned char *)(a1 + 9) = a2;
  if ((a2 & 1) != 0 || ((v3 & 5) == 1 ? (BOOL v8 = *(unsigned char *)(a1 + 8) == 0) : (BOOL v8 = 0), !v8))
  {
    if (a2 == 2)
    {
      uint64_t v11 = *(void *)(a1 + 80);
      if (*(void *)v11)
      {
        (*(void (**)(void))(*(void *)v11 + 8))(*(void *)(a1 + 80));
        *(void *)uint64_t v11 = 0;
      }
    }
    return *(unsigned __int8 *)(a1 + 9);
  }
  uint64_t v9 = *(void *)(a1 + 80);
  if (*(void *)v9)
  {
    (*(void (**)(void))(*(void *)v9 + 8))(*(void *)(a1 + 80));
    *(void *)uint64_t v9 = 0;
  }
  if (*(unsigned __int8 *)(a1 + 22) >= 2u)
  {
    uint64_t v10 = *(void (**)(void))(*(void *)a1 + 48);
    if (v10) {
      v10();
    }
    return *(unsigned __int8 *)(a1 + 9);
  }
  int v12 = *(unsigned __int8 *)(a1 + 21);
  if (*(unsigned char *)(a1 + 21))
  {
    if (v12 != 1) {
      goto LABEL_40;
    }
  }
  else
  {
    int v13 = sub_1B0C8BBCC(a1);
    if (*(unsigned char *)(a1 + 21) != 1)
    {
      if (v13) {
        goto LABEL_50;
      }
      goto LABEL_40;
    }
  }
  unsigned int v14 = *(unsigned __int8 *)(a1 + 22);
  if (v14 <= 5 && ((1 << v14) & 0x23) != 0)
  {
    if (*(unsigned char *)(a1 + 17))
    {
      if (v14 == 5) {
        goto LABEL_40;
      }
    }
    else
    {
      if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 72) + 56))(*(void *)(a1 + 72), 2)) {
        goto LABEL_49;
      }
      if (*(unsigned char *)(a1 + 22) == 5) {
        goto LABEL_40;
      }
    }
    *(unsigned char *)(a1 + 22) = 2;
  }
LABEL_40:
  uint64_t v15 = *(void (**)(void))(*(void *)a1 + 48);
  if (v15) {
    v15();
  }
  if (v12 != 1)
  {
LABEL_49:
    if (v12) {
      return *(unsigned __int8 *)(a1 + 9);
    }
LABEL_50:
    sub_1B0CB3198(a1);
    return *(unsigned __int8 *)(a1 + 9);
  }
  uint64_t v16 = *(void *)(a1 + 72);
  if (*(void *)v16)
  {
    if (!*(unsigned char *)(a1 + 17)) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 64))(v16, 1);
    }
    if (*(unsigned char *)(a1 + 22) != 5) {
      *(unsigned char *)(a1 + 22) = 1;
    }
  }
  *(unsigned char *)(a1 + 23) = *(unsigned char *)(a1 + 16);
  return *(unsigned __int8 *)(a1 + 9);
}

uint64_t sub_1B0D1C9AC(char **a1, uint64_t a2, int a3, uint64_t a4)
{
  if (!*(unsigned char *)(a2 + 101))
  {
    BOOL v8 = (char *)sub_1B0D05DC0(a2, 0x28uLL);
    uint64_t v7 = v8;
    if (v8) {
      strcpy(v8, "cannot VACUUM from within a transaction");
    }
    goto LABEL_11;
  }
  if (*(int *)(a2 + 208) >= 2)
  {
    __int16 v6 = (char *)sub_1B0D05DC0(a2, 0x2BuLL);
    uint64_t v7 = v6;
    if (v6) {
      strcpy(v6, "cannot VACUUM - SQL statements in progress");
    }
LABEL_11:
    if (*a1) {
      sub_1B0D05C10((void *)a2, *a1);
    }
    *a1 = v7;
    return 1;
  }
  int v11 = *(_DWORD *)(a2 + 76);
  if (!a4)
  {
    uint64_t v15 = &byte_1B0DE9952;
    goto LABEL_23;
  }
  int v12 = *(unsigned __int16 *)(a4 + 20);
  if (((0x4000000040004uLL >> v12) & 1) == 0)
  {
    int v13 = (char *)sub_1B0D05DC0(a2, 0x12uLL);
    uint64_t v7 = v13;
    if (v13) {
      strcpy(v13, "non-text filename");
    }
    goto LABEL_11;
  }
  if ((~v12 & 0x202) == 0 && *(unsigned char *)(a4 + 22) == 1)
  {
    uint64_t v15 = *(const char **)(a4 + 8);
LABEL_21:
    int v16 = *(_DWORD *)(a2 + 76);
    goto LABEL_22;
  }
  if (v12)
  {
    uint64_t v15 = 0;
    goto LABEL_21;
  }
  uint64_t v15 = (const char *)sub_1B0D18254((int *)a4, 1);
  int v16 = *(_DWORD *)(a2 + 76);
LABEL_22:
  *(_DWORD *)(a2 + 76) = v16 & 0xFFFFFFF8 | 6;
LABEL_23:
  uint64_t v17 = *(void *)(a2 + 48);
  int v18 = *(_DWORD *)(a2 + 44);
  long long v102 = *(_OWORD *)(a2 + 120);
  char v101 = *(unsigned char *)(a2 + 110);
  *(_DWORD *)(a2 + 44) = v18 | 6;
  *(void *)(a2 + 48) = v17 & 0xFFFFFFFEEFFFADFELL | 0x201;
  *(unsigned char *)(a2 + 110) = 0;
  uint64_t v19 = a3;
  uint64_t v20 = (uint64_t *)(*(void *)(a2 + 32) + 32 * a3);
  uint64_t v21 = v20[1];
  uint64_t v22 = **(void **)(v21 + 8);
  uint64_t v100 = v17;
  if (*(unsigned char *)(v22 + 16)) {
    BOOL v23 = 1;
  }
  else {
    BOOL v23 = *(unsigned __int8 *)(v22 + 20) != 0;
  }
  BOOL v99 = v23;
  uint64_t v24 = *v20;
  uint64_t v25 = *(int *)(a2 + 40);
  if (access(v15, 0) != -1)
  {
    uint64_t v31 = (char *)sub_1B0D05DC0(a2, 0x1BuLL);
    __int16 v32 = v31;
    if (v31) {
      strcpy(v31, "output file already exists");
    }
    if (*a1) {
      sub_1B0D05C10((void *)a2, *a1);
    }
    uint64_t v33 = 0;
    *a1 = v32;
    uint64_t v14 = 1;
    goto LABEL_75;
  }
  char v97 = v24;
  char v98 = v25;
  uint64_t v34 = sub_1B0D243C0((sqlite3 *)a2, (void **)a1, "ATTACH %Q AS vacuum_db", v26, v27, v28, v29, v30, (char)v15);
  *(_DWORD *)(a2 + 76) = v11;
  if (v34)
  {
    uint64_t v14 = v34;
    uint64_t v33 = 0;
    goto LABEL_75;
  }
  uint64_t v35 = *(void *)(a2 + 32);
  uint64_t v33 = v35 + 32 * v25;
  uint64_t v96 = *(void *)(v33 + 8);
  if (a4)
  {
    uint64_t v36 = *(void *)(**(void **)(*(void *)(v33 + 8) + 8) + 72);
    uint64_t v104 = 0;
    if (*(void *)v36)
    {
      if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)v36 + 48))(v36, &v104)) {
        BOOL v37 = 0;
      }
      else {
        BOOL v37 = v104 <= 0;
      }
      if (!v37)
      {
        sub_1B0CD9230((void **)a1, (void *)a2, "output file already exists");
        uint64_t v14 = 1;
        goto LABEL_75;
      }
      uint64_t v35 = *(void *)(a2 + 32);
    }
    int v39 = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a2 + 44) |= 8u;
    char v38 = v39 & 0x38 | *(unsigned char *)(v35 + 32 * v19 + 16);
  }
  else
  {
    char v38 = 1;
  }
  char v95 = v38;
  if (*(unsigned char *)(v21 + 17))
  {
    int v40 = *(_DWORD *)(v21 + 20) + 1;
    *(_DWORD *)(v21 + 20) = v40;
    if (*(unsigned char *)(v21 + 18))
    {
      uint64_t v41 = *(void *)(v21 + 8);
      int v42 = *(unsigned __int8 *)(v41 + 38);
      int v43 = *(_DWORD *)(v41 + 52);
      int v44 = *(_DWORD *)(v41 + 56);
      goto LABEL_50;
    }
    sub_1B0D12478(v21);
    uint64_t v46 = *(void *)(v21 + 8);
    int v42 = *(unsigned __int8 *)(v46 + 38);
    int v43 = *(_DWORD *)(v46 + 52);
    int v44 = *(_DWORD *)(v46 + 56);
    if (*(unsigned char *)(v21 + 17))
    {
      int v40 = *(_DWORD *)(v21 + 20);
LABEL_50:
      int v47 = v40 - 1;
      *(_DWORD *)(v21 + 20) = v47;
      if (!v47)
      {
        int v48 = v43;
        sub_1B0D12558(v21);
        int v43 = v48;
      }
    }
  }
  else
  {
    uint64_t v45 = *(void *)(v21 + 8);
    int v42 = *(unsigned __int8 *)(v45 + 38);
    int v43 = *(_DWORD *)(v45 + 52);
    int v44 = *(_DWORD *)(v45 + 56);
  }
  if (v43 - v44 <= v42) {
    int v49 = v42;
  }
  else {
    int v49 = v43 - v44;
  }
  uint64_t v50 = *(void *)(a2 + 32);
  if (*(_DWORD *)(a2 + 116))
  {
    unint64_t v51 = *(unsigned char **)(**(void **)(*(void *)(v50 + 32 * v19 + 8) + 8) + 320);
    if (v51)
    {
      if (*v51) {
        *(_DWORD *)(a2 + 116) = 0;
      }
    }
  }
  sub_1B0D0EA1C(v96, (_DWORD *)(*(void *)(v50 + 32 * v19 + 24) + 116));
  uint64_t v52 = *(void *)(v21 + 8);
  if (*(unsigned char *)(v21 + 17))
  {
    ++*(_DWORD *)(v21 + 20);
    if (!*(unsigned char *)(v21 + 18)) {
      sub_1B0D12478(v21);
    }
  }
  unsigned int v53 = *(_DWORD **)(*(void *)v52 + 336);
  LODWORD(v52) = v53[8];
  if ((v52 & 0x80000000) != 0)
  {
    uint64_t v54 = (int)v53[11];
    if (-1024 * (int)v52 / (v54 + (int)v53[10]) >= 1000000000) {
      LODWORD(v52) = 1000000000;
    }
    else {
      uint64_t v52 = -1024 * (int)v52 / (v54 + (int)v53[10]);
    }
  }
  int v55 = v53[9];
  if (*(unsigned char *)(v21 + 17))
  {
    int v56 = *(_DWORD *)(v21 + 20) - 1;
    *(_DWORD *)(v21 + 20) = v56;
    if (!v56) {
      sub_1B0D12558(v21);
    }
  }
  if ((int)v52 <= v55) {
    int v57 = v55;
  }
  else {
    int v57 = v52;
  }
  sub_1B0D0EE10(v96, v57);
  sub_1B0D24440(v96, v95 | 0x20);
  uint64_t v63 = sub_1B0D24584((sqlite3 *)a2, (void **)a1, "BEGIN", v58, v59, v60, v61, v62);
  if (!v63)
  {
    uint64_t v63 = sub_1B0C8BB5C(v21, 2 * (a4 == 0), 0);
    if (!v63)
    {
      int v67 = *(int **)(v21 + 8);
      if (!a4 && *(unsigned char *)(*(void *)v67 + 9) == 5) {
        *(_DWORD *)(a2 + 116) = 0;
      }
      if (sub_1B0CD9448(v96, v67[13], v49, 0, v64)
        || !v99 && sub_1B0CD9448(v96, *(_DWORD *)(a2 + 116), v49, 0, v68)
        || *(unsigned char *)(a2 + 103))
      {
        uint64_t v14 = 7;
        goto LABEL_75;
      }
      if (*(char *)(a2 + 106) < 0) {
        unsigned __int8 v69 = sub_1B0D247B8(v21);
      }
      else {
        unsigned __int8 v69 = *(unsigned char *)(a2 + 106);
      }
      sub_1B0D246F4(v96, v69);
      *(unsigned char *)(a2 + 196) = v98;
      uint64_t v63 = sub_1B0D243C0((sqlite3 *)a2, (void **)a1, "SELECT sql FROM \"%w\".sqlite_schema WHERE type='table'AND name<>'sqlite_sequence' AND coalesce(rootpage,1)>0", v70, v71, v72, v73, v74, v97);
      if (!v63)
      {
        uint64_t v63 = sub_1B0D243C0((sqlite3 *)a2, (void **)a1, "SELECT sql FROM \"%w\".sqlite_schema WHERE type='index'", v75, v76, v77, v78, v79, v97);
        if (!v63)
        {
          *(unsigned char *)(a2 + 196) = 0;
          uint64_t v63 = sub_1B0D243C0((sqlite3 *)a2, (void **)a1, "SELECT'INSERT INTO vacuum_db.'||quote(name)||' SELECT*FROM\"%w\".'||quote(name)FROM vacuum_db.sqlite_schema WHERE type='table'AND coalesce(rootpage,1)>0", v80, v81, v82, v83, v84, v97);
          *(_DWORD *)(a2 + 44) &= ~4u;
          if (!v63)
          {
            uint64_t v63 = sub_1B0D243C0((sqlite3 *)a2, (void **)a1, "INSERT INTO vacuum_db.sqlite_schema SELECT*FROM \"%w\".sqlite_schema WHERE type IN('view','trigger') OR(type='table'AND rootpage=0)", v85, v86, v87, v88, v89, v97);
            if (!v63)
            {
              unsigned int v103 = 0;
              sub_1B0D1A074(v21, 1, (int *)&v103);
              uint64_t v14 = sub_1B0CE888C(v96, 1, v103 + 1);
              if (v14) {
                goto LABEL_75;
              }
              sub_1B0D1A074(v21, 3, (int *)&v103);
              uint64_t v14 = sub_1B0CE888C(v96, 3, v103);
              if (v14) {
                goto LABEL_75;
              }
              sub_1B0D1A074(v21, 5, (int *)&v103);
              uint64_t v14 = sub_1B0CE888C(v96, 5, v103);
              if (v14) {
                goto LABEL_75;
              }
              sub_1B0D1A074(v21, 6, (int *)&v103);
              uint64_t v14 = sub_1B0CE888C(v96, 6, v103);
              if (v14) {
                goto LABEL_75;
              }
              sub_1B0D1A074(v21, 8, (int *)&v103);
              uint64_t v14 = sub_1B0CE888C(v96, 8, v103);
              if (v14) {
                goto LABEL_75;
              }
              if (a4)
              {
                uint64_t v63 = sub_1B0CFA6C4(v96, v90);
              }
              else
              {
                uint64_t v14 = sub_1B0D2484C(v21, v96);
                if (v14) {
                  goto LABEL_75;
                }
                uint64_t v63 = sub_1B0CFA6C4(v96, v91);
                if (!v63)
                {
                  unsigned __int8 v92 = sub_1B0D247B8(v96);
                  sub_1B0D246F4(v21, v92);
                  int v93 = sub_1B0CF7094(v96);
                  uint64_t v63 = sub_1B0CD9448(v21, *(_DWORD *)(*(void *)(v96 + 8) + 52), v93, 1, v94);
                }
              }
            }
          }
        }
      }
    }
  }
  uint64_t v14 = v63;
LABEL_75:
  *(unsigned char *)(a2 + 196) = 0;
  *(_DWORD *)(a2 + 44) = v18;
  *(void *)(a2 + 48) = v100;
  *(_OWORD *)(a2 + 120) = v102;
  *(unsigned char *)(a2 + 110) = v101;
  sub_1B0CD9448(v21, -1, 0, 1, *(int8x8_t *)&v102);
  *(unsigned char *)(a2 + 101) = 1;
  if (v33)
  {
    sub_1B0CC70E4(*(void *)(v33 + 8), v65);
    *(void *)(v33 + 8) = 0;
    *(void *)(v33 + 24) = 0;
  }
  sub_1B0CE89B4(a2);
  return v14;
}

uint64_t sub_1B0D1D12C(uint64_t a1, int a2, char a3)
{
  if (!*(unsigned char *)(a1 + 17)) {
    return 0;
  }
  unsigned __int8 v5 = a3 + 1;
  ++*(_DWORD *)(a1 + 20);
  if (*(unsigned char *)(a1 + 18))
  {
    uint64_t v6 = *(void *)(a1 + 8);
    goto LABEL_6;
  }
  sub_1B0D12478(a1);
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(unsigned char *)(a1 + 17))
  {
LABEL_6:
    if (*(void *)(v6 + 128) != a1 && (*(_WORD *)(v6 + 40) & 0x40) != 0) {
      goto LABEL_16;
    }
    uint64_t v9 = (uint64_t *)(v6 + 120);
    uint64_t v8 = *(void *)(v6 + 120);
    if (v8)
    {
      uint64_t v10 = *(void *)(v6 + 120);
      while (*(void *)v10 == a1 || *(_DWORD *)(v10 + 8) != a2 || *(unsigned __int8 *)(v10 + 12) == v5)
      {
        uint64_t v10 = *(void *)(v10 + 16);
        if (!v10) {
          goto LABEL_19;
        }
      }
      if (v5 == 2) {
        *(_WORD *)(v6 + 40) |= 0x80u;
      }
LABEL_16:
      uint64_t v7 = 262;
      if (!*(unsigned char *)(a1 + 17)) {
        return v7;
      }
      goto LABEL_31;
    }
    goto LABEL_20;
  }
  uint64_t v8 = *(void *)(v6 + 120);
LABEL_19:
  uint64_t v9 = (uint64_t *)(v6 + 120);
  if (!v8)
  {
LABEL_20:
    uint64_t v8 = sub_1B0C7FC94(24);
    if (!v8)
    {
      uint64_t v7 = 7;
      if (!*(unsigned char *)(a1 + 17)) {
        return v7;
      }
      goto LABEL_31;
    }
    *(void *)uint64_t v8 = 0;
    *(void *)(v8 + 8) = 0;
    *(void *)(v8 + 16) = 0;
    *(_DWORD *)(v8 + 8) = a2;
    *(void *)uint64_t v8 = a1;
    *(void *)(v8 + 16) = *v9;
    *uint64_t v9 = v8;
    goto LABEL_25;
  }
  while (*(_DWORD *)(v8 + 8) != a2 || *(void *)v8 != a1)
  {
    uint64_t v8 = *(void *)(v8 + 16);
    if (!v8) {
      goto LABEL_20;
    }
  }
LABEL_25:
  if (*(unsigned __int8 *)(v8 + 12) >= v5)
  {
    uint64_t v7 = 0;
    if (!*(unsigned char *)(a1 + 17)) {
      return v7;
    }
  }
  else
  {
    uint64_t v7 = 0;
    *(unsigned char *)(v8 + 12) = v5;
    if (!*(unsigned char *)(a1 + 17)) {
      return v7;
    }
  }
LABEL_31:
  int v11 = *(_DWORD *)(a1 + 20) - 1;
  *(_DWORD *)(a1 + 20) = v11;
  if (!v11) {
    sub_1B0D12558(a1);
  }
  return v7;
}

void sub_1B0D1D2C8(uint64_t a1, int a2, char *a3, void **a4)
{
  uint64_t v6 = sub_1B0CF60C8(a1, a3, *(unsigned char **)(*(void *)(a1 + 32) + 32 * a2));
  uint64_t v12 = v6;
  int v13 = **(unsigned char ***)(v6 + 72);
  uint64_t v14 = *(void *)(a1 + 584);
  if (v14)
  {
    int v15 = *v13;
    if (*v13)
    {
      unsigned int v16 = 0;
      uint64_t v17 = v13 + 1;
      do
      {
        unsigned int v16 = -1640531535 * (v16 + byte_1B0DE1758[v15]);
        int v18 = *v17++;
        int v15 = v18;
      }
      while (v18);
    }
    else
    {
      unsigned int v16 = 0;
    }
    uint64_t v25 = (_DWORD *)(v14 + 16 * (v16 % *(_DWORD *)(a1 + 568)));
    uint64_t v19 = (uint64_t *)(v25 + 2);
    int v20 = *v25;
    if (v20)
    {
      while (1)
      {
LABEL_20:
        uint64_t v19 = (uint64_t *)*v19;
        uint64_t v26 = (unsigned char *)v19[3];
        for (uint64_t i = **(unsigned __int8 ***)(v6 + 72); ; ++i)
        {
          uint64_t v28 = *v26;
          uint64_t v29 = *i;
          if (v28 != v29) {
            break;
          }
          if (!*v26) {
            goto LABEL_8;
          }
LABEL_22:
          ++v26;
        }
        if (byte_1B0DE1758[v28] == byte_1B0DE1758[v29]) {
          goto LABEL_22;
        }
        if (!--v20)
        {
          uint64_t v19 = &qword_1E9B52220;
          goto LABEL_8;
        }
      }
    }
  }
  else
  {
    uint64_t v19 = (uint64_t *)(a1 + 576);
    int v20 = *(_DWORD *)(a1 + 572);
    if (v20) {
      goto LABEL_20;
    }
  }
  uint64_t v19 = &qword_1E9B52220;
LABEL_8:
  uint64_t v21 = v19[2];
  if (v21
    && (uint64_t v7 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)v21 + 8)) != 0
    && *(void *)(*(void *)v21 + 40))
  {
    if (!sub_1B0D24B38(a1, v6, v21, v7, a4, v9, v10, v11))
    {
      uint64_t v24 = *(void **)(v12 + 80);
      BOOL v23 = (uint64_t **)(v12 + 80);
      uint64_t v22 = v24;
      if (v24)
      {
        while (*v22 != a1)
        {
          uint64_t v22 = (void *)v22[5];
          if (!v22) {
            return;
          }
        }
        sub_1B0D24A54(a1);
        if (!v30)
        {
          do
          {
            uint64_t v31 = *v23;
            __int16 v32 = *v23;
            uint64_t v33 = *v32;
            BOOL v23 = (uint64_t **)(v32 + 5);
          }
          while (v33 != a1);
          uint64_t v34 = *(void *)(a1 + 600);
          uint64_t v35 = *(int *)(a1 + 564);
          *(_DWORD *)(a1 + 564) = v35 + 1;
          *(void *)(v34 + 8 * v35) = v31;
          ++*((_DWORD *)v31 + 6);
        }
      }
    }
  }
  else
  {
    *a4 = sub_1B0C904AC(a1, "no such module: %s", v21, (uint64_t)v7, v8, v9, v10, v11, **(void **)(v6 + 72));
  }
}

uint64_t sub_1B0D1D4B0(uint64_t result)
{
  if (!result) {
    return result;
  }
  uint64_t v1 = result;
  uint64_t v2 = &off_1EB21C9E8;
  if (!dword_1EB21C9C0) {
    goto LABEL_7;
  }
  if ((void)xmmword_1EB2201B0) {
    xmmword_1EB21CA40(xmmword_1EB2201B0);
  }
  qword_1EB220108 -= (int)off_1EB21C9F8(v1);
  --qword_1EB220150;
  uint64_t result = off_1EB21C9E8(v1);
  uint64_t v1 = xmmword_1EB2201B0;
  if ((void)xmmword_1EB2201B0)
  {
    uint64_t v2 = &xmmword_1EB21CA50;
LABEL_7:
    int v3 = *v2;
    return v3(v1);
  }
  return result;
}

uint64_t sub_1B0D1D578(uint64_t a1)
{
  if ((*(_WORD *)(a1 + 20) & 0x9000) != 0) {
    sub_1B0D18138((int *)a1);
  }
  *(_WORD *)(a1 + 20) = 4;
  return a1;
}

void sub_1B0D1D5BC(uint64_t a1, long long *a2, __int16 a3)
{
  do
    sub_1B0D18138((int *)a1);
  while ((*(_WORD *)(a1 + 20) & 0x9000) != 0);
  long long v6 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v6;
  if ((*((unsigned char *)a2 + 21) & 0x20) == 0) {
    *(_WORD *)(a1 + 20) = *(_WORD *)(a1 + 20) & 0x8FFF | a3;
  }
}

uint64_t sub_1B0D1D62C(int *a1)
{
  __int16 v2 = *((_WORD *)a1 + 10);
  int v3 = a1[4];
  if ((v2 & 0x400) != 0)
  {
    signed int v4 = *a1 + v3;
    if ((v4 < 0) ^ __OFADD__(*a1, v3) | (v4 == 0))
    {
      if ((v2 & 0x10) == 0) {
        goto LABEL_9;
      }
      signed int v4 = 1;
    }
    if (sub_1B0CA0CF0((uint64_t)a1, v4, 1))
    {
      uint64_t v5 = 0;
LABEL_16:
      *(void *)a1 = v5;
      return 4;
    }
    bzero((void *)(*((void *)a1 + 1) + a1[4]), *a1);
    int v3 = a1[4] + *a1;
    a1[4] = v3;
    *((_WORD *)a1 + 10) &= 0xF9FFu;
  }
LABEL_9:
  uint64_t v8 = 0;
  int v6 = sub_1B0CC9D20(*((unsigned __int8 **)a1 + 1), (double *)a1, v3, *((unsigned __int8 *)a1 + 22));
  if (v6 <= 0)
  {
    if (!v6 && (int)sub_1B0D186FC(*((unsigned __int8 **)a1 + 1), &v8, a1[4], *((unsigned __int8 *)a1 + 22)) <= 1) {
      goto LABEL_15;
    }
  }
  else if (v6 == 1 {
         && !sub_1B0D186FC(*((unsigned __int8 **)a1 + 1), &v8, a1[4], *((unsigned __int8 *)a1 + 22)))
  }
  {
LABEL_15:
    uint64_t v5 = v8;
    goto LABEL_16;
  }
  return 8;
}

uint64_t sub_1B0D1D730(uint64_t result)
{
  uint64_t v1 = result;
  __int16 v2 = *(_WORD *)(result + 20);
  if ((v2 & 0x2D) == 0)
  {
    uint64_t v7 = 0;
    uint64_t result = sub_1B0CC9D20(*(unsigned __int8 **)(result + 8), (double *)result, *(_DWORD *)(result + 16), *(unsigned __int8 *)(result + 22));
    if (result > 1
      || (uint64_t result = sub_1B0D186FC(*(unsigned __int8 **)(v1 + 8), &v7, *(_DWORD *)(v1 + 16), *(unsigned __int8 *)(v1 + 22)), (int)result > 1))
    {
      double v4 = *(double *)v1;
      uint64_t v3 = 0x8000000000000000;
      uint64_t v5 = 0x7FFFFFFFFFFFFFFFLL;
      if (*(double *)v1 <= 9.22337204e18) {
        uint64_t v5 = (uint64_t)*(double *)v1;
      }
      if (v4 >= -9.22337204e18) {
        uint64_t v3 = v5;
      }
      if (v4 != 0.0)
      {
        __int16 v6 = 8;
        if ((unint64_t)(v3 - 0x8000000000000) >> 52 != 4095 || *(void *)&v4 != COERCE__INT64((double)v3)) {
          goto LABEL_13;
        }
      }
    }
    else
    {
      uint64_t v3 = v7;
    }
    *(void *)uint64_t v1 = v3;
    __int16 v6 = 4;
LABEL_13:
    __int16 v2 = *(_WORD *)(v1 + 20) & 0xF240 | v6;
  }
  *(_WORD *)(v1 + 20) = v2 & 0xFBED;
  return result;
}

uint64_t sub_1B0D1D834(long long *a1, long long *a2, uint64_t a3, unsigned char *a4)
{
  int v6 = *(unsigned __int8 *)(a3 + 8);
  if (*((unsigned __int8 *)a1 + 22) == v6)
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 24);
    uint64_t v8 = *((unsigned int *)a1 + 4);
    uint64_t v9 = *((void *)a1 + 1);
    uint64_t v10 = *((unsigned int *)a2 + 4);
    uint64_t v11 = *((void *)a2 + 1);
    uint64_t v12 = *(void *)(a3 + 16);
    return v7(v12, v8, v9, v10, v11);
  }
  long long v28 = 0u;
  long long v29 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  uint64_t v16 = *((void *)a1 + 2);
  uint64_t v15 = *((void *)a1 + 3);
  LODWORD(v28) = 0;
  uint64_t v22 = v15;
  long long v25 = *a1;
  uint64_t v26 = v16;
  uint64_t v27 = v15;
  if ((*((unsigned char *)a1 + 21) & 0x20) == 0) {
    WORD2(v26) = WORD2(v26) & 0x8FFF | 0x4000;
  }
  long long v20 = *a2;
  uint64_t v21 = *((void *)a2 + 2);
  if ((*((unsigned char *)a2 + 21) & 0x20) == 0) {
    WORD2(v21) = WORD2(v21) & 0x8FFF | 0x4000;
  }
  if ((~WORD2(v26) & 0x202) != 0 || BYTE6(v26) != v6)
  {
    if ((v26 & 0x100000000) != 0)
    {
      uint64_t v17 = 0;
    }
    else
    {
      uint64_t v17 = sub_1B0D18254((int *)&v25, v6);
      int v6 = *(unsigned __int8 *)(a3 + 8);
    }
  }
  else
  {
    uint64_t v17 = *((void *)&v25 + 1);
  }
  if ((~WORD2(v21) & 0x202) != 0 || BYTE6(v21) != v6)
  {
    if ((v21 & 0x100000000) != 0 || (uint64_t v18 = sub_1B0D18254((int *)&v20, v6), !v17))
    {
LABEL_23:
      uint64_t v19 = 0;
      if (a4) {
        *a4 = 7;
      }
      goto LABEL_25;
    }
  }
  else
  {
    uint64_t v18 = *((void *)&v20 + 1);
    if (!v17) {
      goto LABEL_23;
    }
  }
  if (!v18) {
    goto LABEL_23;
  }
  uint64_t v19 = (*(uint64_t (**)(void, void, uint64_t, void))(a3 + 24))(*(void *)(a3 + 16), v26, v17, v21);
LABEL_25:
  if (v28) {
    sub_1B0D180E4((uint64_t)&v25);
  }
  if (v23) {
    sub_1B0D180E4((uint64_t)&v20);
  }
  return v19;
}

uint64_t sub_1B0D1D9EC(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 16);
  int v3 = *(_DWORD *)(a2 + 16);
  int v4 = *(unsigned __int16 *)(a1 + 20);
  int v5 = *(unsigned __int16 *)(a2 + 20);
  if (((v5 | v4) & 0x400) != 0)
  {
    int v10 = v4 & 0x400;
    if ((v10 & v5) != 0)
    {
      return (*(_DWORD *)a1 - *(_DWORD *)a2);
    }
    else if (v10)
    {
      if (v3 < 1)
      {
        return (*(_DWORD *)a1 - v3);
      }
      else
      {
        uint64_t v14 = *(unsigned __int8 **)(a2 + 8);
        uint64_t v15 = *(unsigned int *)(a2 + 16);
        while (!*v14++)
        {
          if (!--v15) {
            return (*(_DWORD *)a1 - v3);
          }
        }
        return 0xFFFFFFFFLL;
      }
    }
    else if (v2 < 1)
    {
      return (v2 - *(_DWORD *)a2);
    }
    else
    {
      uint64_t v11 = *(unsigned __int8 **)(a1 + 8);
      uint64_t v12 = *(unsigned int *)(a1 + 16);
      while (!*v11++)
      {
        if (!--v12) {
          return (v2 - *(_DWORD *)a2);
        }
      }
      return 1;
    }
  }
  else
  {
    int v6 = *(const void **)(a1 + 8);
    uint64_t v7 = *(const void **)(a2 + 8);
    unsigned int v8 = v2 - v3;
    if (v2 >= v3) {
      int v2 = v3;
    }
    LODWORD(result) = memcmp(v6, v7, v2);
    if (result) {
      return result;
    }
    else {
      return v8;
    }
  }
}

uint64_t sub_1B0D1DAC8(uint64_t a1)
{
  int v5 = 0;
  if (*(unsigned char *)a1 == 4) {
    return *(unsigned int *)(a1 + 4);
  }
  *(unsigned char *)a1 = 1;
  if (off_1EB21CB60 && off_1EB21CB60(410)) {
    return 10;
  }
  uint64_t result = sub_1B0CC1388(a1, *(char **)(a1 + 24), *(void *)(a1 + 72), 0, &v5);
  if (result) {
    return result;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3)
  {
    int v4 = &off_1EB21C9E8;
    if (dword_1EB21C9C0)
    {
      if ((void)xmmword_1EB2201B0) {
        xmmword_1EB21CA40(xmmword_1EB2201B0);
      }
      qword_1EB220108 -= (int)off_1EB21C9F8(v3);
      --qword_1EB220150;
      off_1EB21C9E8(v3);
      uint64_t v3 = xmmword_1EB2201B0;
      if (!(void)xmmword_1EB2201B0) {
        goto LABEL_14;
      }
      int v4 = &xmmword_1EB21CA50;
    }
    (*v4)(v3);
  }
LABEL_14:
  *(void *)(a1 + 24) = 0;
  if (v5)
  {
    *(_DWORD *)(a1 + 4) = v5;
  }
  else if (!*(_DWORD *)(a1 + 4))
  {
    return 0;
  }
  if (*(unsigned char *)a1) {
    return 0;
  }
  uint64_t result = 0;
  *(unsigned char *)a1 = 2;
  return result;
}

uint64_t sub_1B0D1DC14(void *a1)
{
  return a1[7] - *(void *)(a1[17] + 80) + (*(unsigned int *)(a1[17] + 4) - 1) * *(unsigned int *)(a1[4] + 52);
}

uint64_t sub_1B0D1DC5C(int8x8_t *a1, unint64_t a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = HIBYTE(a2);
  if (HIBYTE(a2))
  {
    a1[1].i8[0] = a2;
    uint64x2_t v6 = (uint64x2_t)vdupq_n_s64(a2);
    *a1 = vorr_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v6, (uint64x2_t)xmmword_1B0DE1560), (int32x4_t)vshlq_u64(v6, (uint64x2_t)xmmword_1B0DE1550)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v6, (uint64x2_t)xmmword_1B0DE1580), (int32x4_t)vshlq_u64(v6, (uint64x2_t)xmmword_1B0DE1570)))), (int8x8_t)0x8080808080808080);
    return 9;
  }
  do
  {
    v20[v2++] = a2 | 0x80;
    BOOL v3 = a2 > 0x7F;
    a2 >>= 7;
  }
  while (v3);
  v20[0] &= ~0x80u;
  if (v2 < 8)
  {
    unint64_t v4 = 0;
    unint64_t v5 = v2 - 1;
    goto LABEL_17;
  }
  if (v2 >= 0x20)
  {
    uint64_t v7 = (int8x16_t *)&v20[v2 - 16];
    unint64_t v4 = v2 & 0x7FFFFFE0;
    unsigned int v8 = (int8x16_t *)&a1[2];
    unint64_t v9 = v2 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      int8x16_t v10 = vrev64q_s8(*v7);
      int8x16_t v11 = vrev64q_s8(v7[-1]);
      v8[-1] = vextq_s8(v10, v10, 8uLL);
      *unsigned int v8 = vextq_s8(v11, v11, 8uLL);
      v8 += 2;
      v7 -= 2;
      v9 -= 32;
    }
    while (v9);
    if (v2 == v4) {
      return v2;
    }
    if ((v2 & 0x18) == 0)
    {
      unint64_t v5 = (~v2 | 0x1F) + v2;
LABEL_17:
      uint64_t v17 = &v20[v5];
      do
      {
        __int8 v18 = *v17--;
        a1->i8[v4++] = v18;
      }
      while (v2 != v4);
      return v2;
    }
  }
  else
  {
    unint64_t v4 = 0;
  }
  uint64_t v12 = (int8x8_t *)((char *)a1 + v4);
  unint64_t v13 = v4 - (v2 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v14 = &v20[-v4];
  unint64_t v4 = v2 & 0x7FFFFFF8;
  unint64_t v5 = ~(v2 & 0xFFFFFFFFFFFFFFF8) + v2;
  uint64_t v15 = (int8x8_t *)&v14[v2 - 8];
  do
  {
    int8x8_t v16 = *v15--;
    *v12++ = vrev64_s8(v16);
    v13 += 8;
  }
  while (v13);
  if (v2 != v4) {
    goto LABEL_17;
  }
  return v2;
}

uint64_t sub_1B0D1DE18(_DWORD *a1, unsigned int a2, uint64_t *a3)
{
  if (a1[16] >= a2)
  {
    uint64_t v7 = (*(uint64_t (**)(void))(*(void *)a1 + 288))();
    if (v7)
    {
      uint64_t v8 = v7;
      *a3 = 0;
    }
    else
    {
      uint64_t v9 = MEMORY[0x10];
      if (*MEMORY[0x10]) {
        goto LABEL_8;
      }
      if (*(_DWORD *)(MEMORY[0x10] + 4) != a2)
      {
        uint64_t v10 = MEMORY[8];
        *(void *)(MEMORY[0x10] + 112) = 0;
        *(void *)(v9 + 72) = a1;
        *(void *)(v9 + 80) = v10;
        *(_DWORD *)(v9 + 4) = a2;
        if (a2 == 1) {
          char v11 = 100;
        }
        else {
          char v11 = 0;
        }
        *(unsigned char *)(v9 + 9) = v11;
      }
      uint64_t v12 = sub_1B0CAD004(v9);
      if (!v12)
      {
LABEL_8:
        uint64_t v8 = 0;
        *a3 = v9;
      }
      else
      {
        uint64_t v8 = v12;
        uint64_t v13 = *(void *)(v9 + 112);
        if ((*(_WORD *)(v13 + 52) & 0x20) != 0)
        {
          uint64_t v14 = *(void *)(v13 + 40);
          --*(_DWORD *)(v14 + 152);
          *(void *)(v13 + 32) = *(void *)(v14 + 168);
          *(void *)(v14 + 168) = v13;
          (*(void (**)(void, void, void))(**(void **)(v14 + 72) + 144))(*(void *)(v14 + 72), *(void *)(v14 + 200) * (*(_DWORD *)(v13 + 48) - 1), *(void *)(v13 + 8));
        }
        else
        {
          sub_1B0D0E3E8(v13);
        }
        *a3 = 0;
      }
    }
    return v8;
  }
  else
  {
    *a3 = 0;
    return sub_1B0D1045C(79200);
  }
}

void *sub_1B0D1DF78(void *result, uint64_t a2)
{
  if (a2) {
    return sub_1B0CA0FA8(result, a2, 1);
  }
  return result;
}

void *sub_1B0D1DF88(void *result, unsigned __int8 *a2)
{
  BOOL v3 = result;
  if ((a2[6] & 0x81) == 0)
  {
    if (*((void *)a2 + 2) && *a2 != 178) {
      uint64_t result = (void *)sub_1B0D1DF88(result);
    }
    if (*((void *)a2 + 3))
    {
      uint64_t result = (void *)sub_1B0D1DF88(v3);
    }
    else
    {
      int v4 = *((_DWORD *)a2 + 1);
      unint64_t v5 = (void *)*((void *)a2 + 4);
      if ((v4 & 0x1000) != 0)
      {
        if (v5) {
          uint64_t result = (void *)sub_1B0CA0FA8(v3, v5, 1);
        }
      }
      else
      {
        if (v5)
        {
          uint64_t result = sub_1B0D270DC(v3, v5);
          int v4 = *((_DWORD *)a2 + 1);
        }
        if ((v4 & 0x1000000) != 0) {
          uint64_t result = sub_1B0D1E054(v3, *((void **)a2 + 9));
        }
      }
    }
  }
  if ((a2[7] & 8) == 0)
  {
    return sub_1B0D15C20(v3, a2);
  }
  return result;
}

void *sub_1B0D1E054(void *result, void *a2)
{
  if (a2)
  {
    BOOL v3 = result;
    int v4 = (void *)a2[7];
    if (v4)
    {
      *int v4 = a2[8];
      uint64_t v5 = a2[8];
      if (v5) {
        *(void *)(v5 + 56) = a2[7];
      }
      a2[7] = 0;
    }
    if (a2[9]) {
      sub_1B0D1DF88(result);
    }
    uint64x2_t v6 = (void *)a2[2];
    if (v6) {
      sub_1B0D270DC(v3, v6);
    }
    uint64_t v7 = (void *)a2[3];
    if (v7) {
      sub_1B0D270DC(v3, v7);
    }
    if (a2[6]) {
      sub_1B0D1DF88(v3);
    }
    if (a2[5]) {
      sub_1B0D1DF88(v3);
    }
    if (*a2) {
      sub_1B0D05C10(v3, (void *)*a2);
    }
    uint64_t v8 = (void *)a2[1];
    if (v8) {
      sub_1B0D05C10(v3, v8);
    }
    return sub_1B0D05C10(v3, a2);
  }
  return result;
}

void *sub_1B0D1E12C(void *result, void *a2)
{
  if (a2)
  {
    BOOL v3 = result;
    if (*(int *)a2 >= 1)
    {
      uint64_t v4 = 0;
      uint64_t v5 = a2 + 4;
      do
      {
        uint64x2_t v6 = (void *)*(v5 - 1);
        if (v6) {
          sub_1B0D270DC(v3, v6);
        }
        if (*v5) {
          sub_1B0CA0FA8(v3, *v5, 1);
        }
        uint64_t v7 = (void *)*(v5 - 2);
        if (v7) {
          sub_1B0D05C10(v3, v7);
        }
        ++v4;
        v5 += 6;
      }
      while (v4 < *(int *)a2);
    }
    return sub_1B0D05C10(v3, a2);
  }
  return result;
}

void *sub_1B0D1E1DC(void *result, void *a2)
{
  if (a2)
  {
    BOOL v3 = result;
    int v4 = *(_DWORD *)a2;
    if (*(int *)a2 >= 1)
    {
      uint64_t v5 = 0;
      uint64_t v6 = 1;
      do
      {
        uint64_t v7 = (void *)a2[v6];
        if (v7)
        {
          sub_1B0D05C10(v3, v7);
          int v4 = *(_DWORD *)a2;
        }
        ++v5;
        v6 += 2;
      }
      while (v5 < v4);
    }
    return sub_1B0D15C20(v3, a2);
  }
  return result;
}

uint64_t sub_1B0D1E268(uint64_t a1)
{
  uint64_t v2 = sub_1B0D121F0(*(_DWORD *)(a1 + 52));
  *(void *)(a1 + 136) = v2;
  if (v2)
  {
    BOOL v3 = (void *)v2;
    uint64_t result = 0;
    *BOOL v3 = 0;
    *(void *)(a1 + 136) += 4;
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = *(void *)(v5 + 40);
    *(void *)(v5 + 288) = 0;
    *(_OWORD *)(v5 + 256) = 0u;
    *(_OWORD *)(v5 + 272) = 0u;
    *(_OWORD *)(v5 + 224) = 0u;
    *(_OWORD *)(v5 + 240) = 0u;
    *(_OWORD *)(v5 + 192) = 0u;
    *(_OWORD *)(v5 + 208) = 0u;
    *(_OWORD *)(v5 + 160) = 0u;
    *(_OWORD *)(v5 + 176) = 0u;
    *(_OWORD *)(v5 + 128) = 0u;
    *(_OWORD *)(v5 + 144) = 0u;
    *(_OWORD *)(v5 + 96) = 0u;
    *(_OWORD *)(v5 + 112) = 0u;
    *(_OWORD *)(v5 + 64) = 0u;
    *(_OWORD *)(v5 + 80) = 0u;
    *(_OWORD *)uint64_t v5 = 0u;
    *(_OWORD *)(v5 + 16) = 0u;
    uint64_t result = 7;
    *(_OWORD *)(v5 + 32) = 0u;
    *(_OWORD *)(v5 + 48) = 0u;
  }
  return result;
}

uint64_t sub_1B0D1E2F0(uint64_t result, int a2, uint64_t a3, int a4)
{
  *(unsigned char *)(result + 19) = 0;
  for (uint64_t i = *(void *)(*(void *)(result + 8) + 16); i; uint64_t i = *(void *)(i + 40))
  {
    if ((*(unsigned char *)(i + 1) & 0x10) != 0)
    {
      *(unsigned char *)(result + 19) = 1;
      if (*(_DWORD *)(i + 80) == a2 && (a4 || *(void *)(i + 48) == a3)) {
        *(unsigned char *)uint64_t i = 1;
      }
    }
  }
  return result;
}

uint64_t sub_1B0D1E344(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = a2 + *(unsigned __int16 *)(a3 + 22);
  if (v3 > *(void *)(a1 + 88))
  {
    return sub_1B0D11B5C(83701, a1);
  }
  uint64_t v5 = *(_DWORD **)(a1 + 72);
  unsigned int v6 = v5[14] - 4;
  unsigned int v7 = ~*(unsigned __int16 *)(a3 + 20) + *(_DWORD *)(a3 + 16) + v6;
  if (v6 > v7) {
    return 0;
  }
  uint64_t v9 = bswap32(*(_DWORD *)(v3 - 4));
  int v10 = v7 / v6;
  while (1)
  {
    unsigned int v22 = 0;
    uint64_t v21 = 0;
    if (v9 < 2 || v9 > v5[16]) {
      return sub_1B0D1045C(83718);
    }
    if (!--v10) {
      goto LABEL_13;
    }
    uint64_t v11 = sub_1B0D1E590((uint64_t)v5, v9, &v21, &v22);
    if (v11) {
      return v11;
    }
    uint64_t v12 = v21;
    if (!v21)
    {
LABEL_13:
      uint64_t v13 = *(void *)v5;
      uint64_t v14 = ((uint64_t (*)(void, uint64_t, void))*(&xmmword_1EB21CA98 + 1))(*(void *)(*(void *)(*(void *)v5 + 336) + 72), v9, 0);
      if (!v14) {
        goto LABEL_22;
      }
      uint64_t v15 = (uint64_t *)v14;
      int8x8_t v16 = *(void **)(v14 + 8);
      if (*v16)
      {
        ++*(void *)(*(void *)(v13 + 336) + 24);
        ++v16[7];
      }
      else
      {
        int8x8_t v16 = (void *)sub_1B0D1171C(*(void *)(v13 + 336), v9, v15);
        if (!v16)
        {
LABEL_22:
          uint64_t v12 = 0;
          uint64_t v21 = 0;
LABEL_23:
          uint64_t v18 = sub_1B0CD3AB8((uint64_t)v5, v12, v9);
          goto LABEL_24;
        }
      }
      uint64_t v12 = v16[2];
      if (*(_DWORD *)(v12 + 4) != v9)
      {
        uint64_t v17 = v16[1];
        *(void *)(v12 + 112) = v16;
        *(void *)(v12 + 72) = v5;
        *(void *)(v12 + 80) = v17;
        *(_DWORD *)(v12 + 4) = v9;
        *(unsigned char *)(v12 + 9) = 0;
      }
      uint64_t v21 = v12;
    }
    if (*(_DWORD *)(*(void *)(v12 + 112) + 56) == 1) {
      goto LABEL_23;
    }
    uint64_t v18 = sub_1B0D1045C(83738);
LABEL_24:
    uint64_t v8 = v18;
    if (v21)
    {
      uint64_t v19 = *(void *)(v21 + 112);
      if (v19)
      {
        if ((*(_WORD *)(v19 + 52) & 0x20) != 0)
        {
          uint64_t v20 = *(void *)(v19 + 40);
          --*(_DWORD *)(v20 + 152);
          *(void *)(v19 + 32) = *(void *)(v20 + 168);
          *(void *)(v20 + 168) = v19;
          (*(void (**)(void, void, void))(**(void **)(v20 + 72) + 144))(*(void *)(v20 + 72), *(void *)(v20 + 200) * (*(_DWORD *)(v19 + 48) - 1), *(void *)(v19 + 8));
        }
        else
        {
          sub_1B0D0E3E8(v19);
        }
      }
    }
    if (v8) {
      return v8;
    }
    uint64_t v9 = v22;
    if (!v10) {
      return 0;
    }
  }
}

uint64_t sub_1B0D1E590(uint64_t a1, unsigned int a2, void *a3, unsigned int *a4)
{
  if (!*(unsigned char *)(a1 + 33)) {
    goto LABEL_12;
  }
  int v23 = 0;
  char v22 = 0;
  unsigned int v8 = a2;
  do
  {
    do
    {
      while (1)
      {
        unsigned int v9 = v8++;
        if (v8 >= 2) {
          break;
        }
        if (v8) {
          goto LABEL_10;
        }
      }
      unsigned int v10 = (v9 - 1) / (*(_DWORD *)(a1 + 56) / 5u + 1) * (*(_DWORD *)(a1 + 56) / 5u + 1);
      if (v10 + 1 == dword_1E9B51ED0 / *(_DWORD *)(a1 + 52)) {
        int v11 = 3;
      }
      else {
        int v11 = 2;
      }
    }
    while (v8 == v11 + v10);
LABEL_10:
    ;
  }
  while (v9 == dword_1E9B51ED0 / *(_DWORD *)(a1 + 52));
  unsigned int v12 = v9 + 1;
  if (v9 + 1 > *(_DWORD *)(a1 + 64)) {
    goto LABEL_12;
  }
  unsigned int v16 = sub_1B0D14784((_DWORD *)a1, v9 + 1, &v22, &v23);
  unsigned int v14 = v16;
  if (v16 || v22 != 4)
  {
    if (v16)
    {
LABEL_14:
      uint64_t v15 = 0;
      unsigned int v12 = 0;
      goto LABEL_28;
    }
LABEL_12:
    uint64_t v24 = 0;
    unsigned int v13 = (*(uint64_t (**)(void))(*(void *)a1 + 288))();
    if (!v13)
    {
      uint64_t v15 = *(void *)(v24 + 16);
      if (*(_DWORD *)(v15 + 4) == a2)
      {
        uint64_t v17 = *(unsigned int **)(v15 + 80);
      }
      else
      {
        uint64_t v17 = *(unsigned int **)(v24 + 8);
        *(void *)(v15 + 112) = v24;
        *(void *)(v15 + 72) = a1;
        *(void *)(v15 + 80) = v17;
        *(_DWORD *)(v15 + 4) = a2;
        if (a2 == 1) {
          char v18 = 100;
        }
        else {
          char v18 = 0;
        }
        *(unsigned char *)(v15 + 9) = v18;
      }
      unsigned int v14 = 0;
      unsigned int v12 = bswap32(*v17);
      goto LABEL_28;
    }
    unsigned int v14 = v13;
    goto LABEL_14;
  }
  if (v23 != a2) {
    goto LABEL_12;
  }
  uint64_t v15 = 0;
  unsigned int v14 = 101;
LABEL_28:
  *a4 = v12;
  if (a3)
  {
    *a3 = v15;
  }
  else if (v15)
  {
    uint64_t v20 = *(void *)(v15 + 112);
    if ((*(_WORD *)(v20 + 52) & 0x20) != 0)
    {
      uint64_t v21 = *(void *)(v20 + 40);
      --*(_DWORD *)(v21 + 152);
      *(void *)(v20 + 32) = *(void *)(v21 + 168);
      *(void *)(v21 + 168) = v20;
      (*(void (**)(void, void, void))(**(void **)(v21 + 72) + 144))(*(void *)(v21 + 72), *(void *)(v21 + 200) * (*(_DWORD *)(v20 + 48) - 1), *(void *)(v20 + 8));
    }
    else
    {
      sub_1B0D0E3E8(v20);
    }
  }
  if (v14 == 101) {
    return 0;
  }
  else {
    return v14;
  }
}

uint64_t sub_1B0D1E7B0(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(a1 + 96);
  if (v4)
  {
    if (*(_DWORD *)v4 < a2) {
      return 0;
    }
  }
  else
  {
    unsigned int v6 = *(_DWORD *)(a1 + 64);
    uint64_t v4 = sub_1B0C7FC94(512);
    if (!v4)
    {
      *(void *)(a1 + 96) = 0;
      return 7;
    }
    *(_OWORD *)(v4 + 480) = 0u;
    *(_OWORD *)(v4 + 496) = 0u;
    *(_OWORD *)(v4 + 448) = 0u;
    *(_OWORD *)(v4 + 464) = 0u;
    *(_OWORD *)(v4 + 416) = 0u;
    *(_OWORD *)(v4 + 432) = 0u;
    *(_OWORD *)(v4 + 384) = 0u;
    *(_OWORD *)(v4 + 400) = 0u;
    *(_OWORD *)(v4 + 352) = 0u;
    *(_OWORD *)(v4 + 368) = 0u;
    *(_OWORD *)(v4 + 320) = 0u;
    *(_OWORD *)(v4 + 336) = 0u;
    *(_OWORD *)(v4 + 288) = 0u;
    *(_OWORD *)(v4 + 304) = 0u;
    *(_OWORD *)(v4 + 256) = 0u;
    *(_OWORD *)(v4 + 272) = 0u;
    *(_OWORD *)(v4 + 224) = 0u;
    *(_OWORD *)(v4 + 240) = 0u;
    *(_OWORD *)(v4 + 192) = 0u;
    *(_OWORD *)(v4 + 208) = 0u;
    *(_OWORD *)(v4 + 160) = 0u;
    *(_OWORD *)(v4 + 176) = 0u;
    *(_OWORD *)(v4 + 128) = 0u;
    *(_OWORD *)(v4 + 144) = 0u;
    *(_OWORD *)(v4 + 96) = 0u;
    *(_OWORD *)(v4 + 112) = 0u;
    *(_OWORD *)(v4 + 64) = 0u;
    *(_OWORD *)(v4 + 80) = 0u;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    *(_OWORD *)uint64_t v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_DWORD *)uint64_t v4 = v6;
    *(void *)(a1 + 96) = v4;
    if (v6 < a2) {
      return 0;
    }
  }

  return sub_1B0CCABC4((unsigned int *)v4, a2);
}

uint64_t sub_1B0D1E888(uint64_t a1, _DWORD *a2)
{
  uint64_t result = sub_1B0CACD5C((unsigned __int8 *)a1);
  if (result == 16)
  {
    uint64_t result = 0;
    *a2 = 1;
  }
  else if (!result)
  {
    *a2 = 0;
    while (1)
    {
      uint64_t v5 = *(void *)(a1 + 136);
      if (*(unsigned char *)(v5 + 8)) {
        break;
      }
      unsigned int v6 = bswap32(*(_DWORD *)(*(unsigned __int8 *)(v5 + 9) + *(void *)(v5 + 80) + 8));
      *(_WORD *)(a1 + 86) = *(_WORD *)(v5 + 24);
      uint64_t result = sub_1B0CAD12C(a1, v6);
      if (result)
      {
        char v7 = *(unsigned char *)(a1 + 1) & 0xF7;
        goto LABEL_9;
      }
    }
    uint64_t result = 0;
    *(_WORD *)(a1 + 86) = *(_WORD *)(v5 + 24) - 1;
    char v7 = *(unsigned char *)(a1 + 1) | 8;
LABEL_9:
    *(unsigned char *)(a1 + 1) = v7;
  }
  return result;
}

uint64_t sub_1B0D1E92C(unsigned int a1, char *a2, uint64_t a3)
{
  int64_t v3 = 0;
  uint64_t v4 = &a2[*a2 & 0x3F];
  switch(a2[1])
  {
    case 1:
      int64_t v3 = *v4;
      goto LABEL_11;
    case 2:
      int64_t v3 = v4[1] | (unint64_t)((uint64_t)*v4 << 8);
      goto LABEL_11;
    case 3:
      int64_t v3 = ((uint64_t)*v4 << 16) | ((unint64_t)v4[1] << 8) | v4[2];
      goto LABEL_11;
    case 4:
      int64_t v3 = (*v4 << 24) | ((unint64_t)v4[1] << 16) | ((unint64_t)v4[2] << 8) | v4[3];
      goto LABEL_11;
    case 5:
      int64_t v3 = bswap32(*(_DWORD *)(v4 + 2)) | ((unint64_t)(v4[1] | (*v4 << 8)) << 32);
      goto LABEL_11;
    case 6:
      int64_t v3 = bswap64(*(void *)v4);
      goto LABEL_11;
    case 8:
      goto LABEL_11;
    case 9:
      int64_t v3 = 1;
LABEL_11:
      int64_t v6 = *(void *)(a3 + 16);
      if (v6 > v3) {
        return *(char *)(a3 + 32);
      }
      if (v6 < v3) {
        return *(char *)(a3 + 33);
      }
      if (*(unsigned __int16 *)(a3 + 28) < 2u)
      {
        uint64_t result = *(char *)(a3 + 30);
        *(unsigned char *)(a3 + 34) = 1;
      }
      else
      {
        int v5 = 1;
        return sub_1B0D1B630(a1, a2, (uint64_t *)a3, v5);
      }
      return result;
    default:
      int v5 = 0;
      return sub_1B0D1B630(a1, a2, (uint64_t *)a3, v5);
  }
}

uint64_t sub_1B0D1EA64(signed int a1, char *a2, uint64_t a3)
{
  char v7 = a2 + 1;
  int v6 = a2[1];
  int v8 = (char)v6;
  int v9 = v6 << 14;
  int v10 = (v6 & 0x7F) << 7;
  while (v8 <= 11)
  {
    if ((v8 & 0x80000000) == 0) {
      return *(char *)(a3 + 32);
    }
    int v11 = a2[2];
    if (a2[2] < 0)
    {
      int v12 = a2[3];
      if (v12 < 0)
      {
        unint64_t v20 = 0;
        sub_1B0CAD43C(v7, &v20);
        int v8 = v20;
        if (HIDWORD(v20)) {
          return *(char *)(a3 + 32);
        }
      }
      else
      {
        int v8 = v9 & 0x1FC07F | v12 & 0x7F | ((v11 & 0x7F) << 7);
      }
    }
    else
    {
      int v8 = v10 | v11;
    }
    if (v8 <= 11) {
      return *(char *)(a3 + 32);
    }
  }
  if ((v8 & 1) == 0) {
    return *(char *)(a3 + 33);
  }
  uint64_t v13 = *a2;
  signed int v14 = (v8 - 12) >> 1;
  if (v14 + (int)v13 > a1)
  {
    char v15 = sub_1B0D1045C(96192);
    uint64_t result = 0;
    *(unsigned char *)(a3 + 31) = v15;
    return result;
  }
  signed int v17 = *(_DWORD *)(a3 + 24);
  signed int v18 = v17 >= v14 ? (v8 - 12) >> 1 : *(_DWORD *)(a3 + 24);
  int v19 = memcmp(&a2[v13], *(const void **)(a3 + 16), v18);
  if (v19 >= 1) {
    return *(char *)(a3 + 33);
  }
  if (v19 < 0) {
    return *(char *)(a3 + 32);
  }
  if (v14 != v17)
  {
    if (v17 < v14) {
      return *(char *)(a3 + 33);
    }
    return *(char *)(a3 + 32);
  }
  if (*(unsigned __int16 *)(a3 + 28) < 2u)
  {
    uint64_t result = *(char *)(a3 + 30);
    *(unsigned char *)(a3 + 34) = 1;
  }
  else
  {
    return sub_1B0D1B630(a1, a2, (uint64_t *)a3, 1);
  }
  return result;
}

uint64_t sub_1B0D1EC00(unsigned __int8 *a1)
{
  unsigned int v2 = *a1;
  if (*a1)
  {
    if (v2 < 3) {
      goto LABEL_22;
    }
    int v20 = 0;
    if (v2 == 4)
    {
      uint64_t result = *((unsigned int *)a1 + 1);
      if (result) {
        return result;
      }
      goto LABEL_25;
    }
    *a1 = 1;
    if (off_1EB21CB60 && off_1EB21CB60(410)) {
      return 10;
    }
    uint64_t result = sub_1B0CC1388((uint64_t)a1, *((char **)a1 + 3), *((void *)a1 + 9), 0, &v20);
    if (result) {
      return result;
    }
    uint64_t v4 = *((void *)a1 + 3);
    if (v4)
    {
      int v5 = &off_1EB21C9E8;
      if (!dword_1EB21C9C0)
      {
LABEL_16:
        (*v5)(v4);
        goto LABEL_17;
      }
      if ((void)xmmword_1EB2201B0) {
        xmmword_1EB21CA40(xmmword_1EB2201B0);
      }
      qword_1EB220108 -= (int)off_1EB21C9F8(v4);
      --qword_1EB220150;
      off_1EB21C9E8(v4);
      uint64_t v4 = xmmword_1EB2201B0;
      if ((void)xmmword_1EB2201B0)
      {
        int v5 = &xmmword_1EB21CA50;
        goto LABEL_16;
      }
    }
LABEL_17:
    *((void *)a1 + 3) = 0;
    if (v20)
    {
      *((_DWORD *)a1 + 1) = v20;
      unsigned int v2 = *a1;
    }
    else
    {
      unsigned int v2 = *a1;
      if (!*((_DWORD *)a1 + 1)) {
        goto LABEL_22;
      }
    }
    if (!v2)
    {
      unsigned int v2 = 2;
      *a1 = 2;
    }
LABEL_22:
    if (v2 == 1) {
      return 101;
    }
    if (v2 == 2)
    {
      uint64_t result = 0;
      *a1 = 0;
      if (*((int *)a1 + 1) > 0) {
        return result;
      }
    }
  }
LABEL_25:
  uint64_t v6 = *((void *)a1 + 17);
  unsigned __int16 v7 = *((_WORD *)a1 + 43) + 1;
  *((_WORD *)a1 + 43) = v7;
  if (off_1EB21CB60 && off_1EB21CB60(412))
  {
    *(unsigned char *)uint64_t v6 = 0;
LABEL_35:
    return sub_1B0D1045C(83063);
  }
  if (!*(unsigned char *)v6) {
    goto LABEL_35;
  }
  if (*(unsigned __int16 *)(v6 + 24) > v7)
  {
    if (!*(unsigned char *)(v6 + 8))
    {
      while (1)
      {
        uint64_t v8 = *((void *)a1 + 17);
        if (*(unsigned char *)(v8 + 8)) {
          break;
        }
        uint64_t result = sub_1B0CAD12C((uint64_t)a1, bswap32(*(_DWORD *)(*(void *)(v8 + 80)+ (unsigned __int16)(_byteswap_ushort(*(_WORD *)(*(void *)(v8 + 96)+ 2* *((unsigned __int16 *)a1 + 43))) & *(_WORD *)(v8 + 26)))));
        if (result) {
          return result;
        }
      }
    }
    return 0;
  }
  if (*(unsigned char *)(v6 + 8))
  {
    do
    {
      uint64_t v15 = (char)a1[84];
      if (!a1[84])
      {
        *a1 = 1;
        return 101;
      }
      *((_WORD *)a1 + 35) = 0;
      a1[1] &= 0xF9u;
      *((_WORD *)a1 + 43) = *(_WORD *)&a1[2 * v15 + 86];
      uint64_t v16 = *((void *)a1 + 17);
      signed __int8 v17 = v15 - 1;
      a1[84] = v17;
      *((void *)a1 + 17) = *(void *)&a1[8 * v17 + 144];
      uint64_t v18 = *(void *)(v16 + 112);
      if ((*(unsigned char *)(v18 + 52) & 0x20) != 0)
      {
        uint64_t v19 = *(void *)(v18 + 40);
        --*(_DWORD *)(v19 + 152);
        *(void *)(v18 + 32) = *(void *)(v19 + 168);
        *(void *)(v19 + 168) = v18;
        (*(void (**)(void, void, void))(**(void **)(v19 + 72) + 144))(*(void *)(v19 + 72), *(void *)(v19 + 200) * (*(_DWORD *)(v18 + 48) - 1), *(void *)(v18 + 8));
      }
      else
      {
        sub_1B0D0E3E8(v18);
      }
      uint64_t v14 = *((void *)a1 + 17);
    }
    while (*((unsigned __int16 *)a1 + 43) >= *(unsigned __int16 *)(v14 + 24));
    if (!*(unsigned char *)(v14 + 1)) {
      return 0;
    }
    return sub_1B0CAE698(a1);
  }
  else
  {
    for (unsigned int i = *(_DWORD *)(*(unsigned __int8 *)(v6 + 9) + *(void *)(v6 + 80) + 8);
          ;
          unsigned int i = *(_DWORD *)(v11 + ((v13[1] | (*v13 << 8)) & *(void *)&v12)))
    {
      uint64_t result = sub_1B0CAD12C((uint64_t)a1, bswap32(i));
      if (result) {
        break;
      }
      uint64_t v10 = *((void *)a1 + 17);
      if (*(unsigned char *)(v10 + 8)) {
        return 0;
      }
      uint64_t v11 = *(void *)(v10 + 80);
      __int16 v12 = *(_WORD *)(v10 + 26);
      uint64_t v13 = (unsigned __int8 *)(*(void *)(v10 + 96) + 2 * *((unsigned __int16 *)a1 + 43));
    }
  }
  return result;
}

uint64_t sub_1B0D1EF8C(unsigned __int8 *a1)
{
  unsigned int v2 = *a1;
  if (*a1)
  {
LABEL_2:
    if (v2 >= 3)
    {
      uint64_t result = sub_1B0D1DAC8((uint64_t)a1);
      if (result) {
        return result;
      }
      unsigned int v2 = *a1;
    }
    if (v2 == 2)
    {
      *a1 = 0;
      if ((*((_DWORD *)a1 + 1) & 0x80000000) == 0) {
        goto LABEL_9;
      }
      return 0;
    }
    else
    {
      if (v2 != 1) {
        goto LABEL_9;
      }
      return 101;
    }
  }
  else
  {
LABEL_9:
    while (1)
    {
      uint64_t v4 = *((void *)a1 + 17);
      uint64_t v5 = *((unsigned __int16 *)a1 + 43);
      if (!*(unsigned char *)(v4 + 8)) {
        break;
      }
      if (!*((_WORD *)a1 + 43))
      {
        while (1)
        {
          uint64_t v6 = (char)a1[84];
          if (!a1[84]) {
            break;
          }
          *((_WORD *)a1 + 35) = 0;
          a1[1] &= 0xF9u;
          *((_WORD *)a1 + 43) = *(_WORD *)&a1[2 * v6 + 86];
          uint64_t v7 = *((void *)a1 + 17);
          signed __int8 v8 = v6 - 1;
          a1[84] = v8;
          *((void *)a1 + 17) = *(void *)&a1[8 * v8 + 144];
          uint64_t v9 = *(void *)(v7 + 112);
          if ((*(unsigned char *)(v9 + 52) & 0x20) != 0)
          {
            uint64_t v10 = *(void *)(v9 + 40);
            --*(_DWORD *)(v10 + 152);
            *(void *)(v9 + 32) = *(void *)(v10 + 168);
            *(void *)(v10 + 168) = v9;
            (*(void (**)(void, void, void))(**(void **)(v10 + 72) + 144))(*(void *)(v10 + 72), *(void *)(v10 + 200) * (*(_DWORD *)(v9 + 48) - 1), *(void *)(v9 + 8));
            LOWORD(v5) = *((_WORD *)a1 + 43);
            if ((_WORD)v5)
            {
LABEL_16:
              uint64_t v4 = *((void *)a1 + 17);
              goto LABEL_17;
            }
          }
          else
          {
            sub_1B0D0E3E8(v9);
            LOWORD(v5) = *((_WORD *)a1 + 43);
            if ((_WORD)v5) {
              goto LABEL_16;
            }
          }
        }
        *a1 = 1;
        return 101;
      }
LABEL_17:
      *((_WORD *)a1 + 43) = v5 - 1;
      if (!*(unsigned char *)(v4 + 1) || *(unsigned char *)(v4 + 8)) {
        return 0;
      }
      a1[1] &= 0xF1u;
      *((_WORD *)a1 + 35) = 0;
      unsigned int v2 = *a1;
      if (*a1) {
        goto LABEL_2;
      }
    }
    unsigned int v11 = bswap32(*(_DWORD *)(*(void *)(v4 + 80)
                            + ((*(unsigned __int8 *)(*(void *)(v4 + 96) + 2 * v5 + 1) | (*(unsigned __int8 *)(*(void *)(v4 + 96) + 2 * v5) << 8)) & (unint64_t)*(unsigned __int16 *)(v4 + 26))));
    while (1)
    {
      uint64_t result = sub_1B0CAD12C((uint64_t)a1, v11);
      if (result) {
        break;
      }
      uint64_t v12 = *((void *)a1 + 17);
      if (*(unsigned char *)(v12 + 8))
      {
        uint64_t result = 0;
        *((_WORD *)a1 + 43) = *(_WORD *)(v12 + 24) - 1;
        return result;
      }
      unsigned int v11 = bswap32(*(_DWORD *)(*(unsigned __int8 *)(v12 + 9) + *(void *)(v12 + 80) + 8));
      *((_WORD *)a1 + 43) = *(_WORD *)(v12 + 24);
    }
  }
  return result;
}

uint64_t sub_1B0D1F164(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 136);
  uint64_t v5 = *(unsigned char **)(a1 + 56);
  uint64_t v6 = *(unsigned __int16 *)(a1 + 68);
  if ((unint64_t)&v5[v6] > *(void *)(v4 + 88)
    || (unint64_t)v5 < *(void *)(v4 + 80) + (unint64_t)*(unsigned __int16 *)(v4 + 18))
  {
    return sub_1B0D1045C(86052);
  }
  int v8 = *(_DWORD *)(a2 + 40) + *(_DWORD *)(a2 + 36);
  if (v8 == v6) {
    return sub_1B0D1F2D4(v4, v5, a2, 0, v8);
  }
  else {
    return sub_1B0D1F47C(a1, a2);
  }
}

uint64_t sub_1B0D1F1CC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  int v3 = *(_DWORD *)(*(void *)(a1 + 72) + 56);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 9);
  unsigned int v5 = (unsigned __int16)(_byteswap_ushort(*(_WORD *)(v4 + v2 + 5)) - 1);
  unsigned int v6 = __rev16(*(unsigned __int16 *)(v4 + v2 + 1));
  int v7 = v5 + *(unsigned __int8 *)(v4 + v2 + 7) + 1;
  if (v6)
  {
    if (v6 <= v5)
    {
      uint64_t v11 = 78944;
      return sub_1B0D11B5C(v11, a1);
    }
    do
    {
      if ((int)v6 > v3 - 4)
      {
        int v13 = 5;
LABEL_10:
        uint64_t v11 = v13 | 0x13460u;
        return sub_1B0D11B5C(v11, a1);
      }
      int v8 = (unsigned __int16 *)(v2 + v6);
      unsigned int v9 = __rev16(*v8);
      LODWORD(v8) = __rev16(v8[1]);
      v7 += (int)v8;
      unsigned int v10 = v8 + v6;
      unsigned int v6 = v9;
    }
    while (v9 > v10 + 3);
    if (v9)
    {
      uint64_t v11 = 78959;
      return sub_1B0D11B5C(v11, a1);
    }
    if (v10 > v3)
    {
      int v13 = 19;
      goto LABEL_10;
    }
  }
  int v14 = v4 + *(unsigned __int8 *)(a1 + 10) + 2 * *(unsigned __int16 *)(a1 + 24) + 8;
  if (v7 > v3 || v7 < v14)
  {
    uint64_t v11 = 78975;
    return sub_1B0D11B5C(v11, a1);
  }
  *(_DWORD *)(a1 + 20) = (unsigned __int16)(v7 - v14);
  return 0;
}

uint64_t sub_1B0D1F2D4(uint64_t a1, unsigned char *a2, uint64_t a3, int a4, int a5)
{
  unsigned int v6 = a2;
  int v8 = *(_DWORD *)(a3 + 36);
  int v9 = v8 - a4;
  if (v8 <= a4)
  {
    if (a5 < 1) {
      return 0;
    }
    uint64_t v19 = a5;
    size_t v20 = a5;
    while (!*v6)
    {
      --v20;
      ++v6;
      if (!--v19) {
        return 0;
      }
    }
    uint64_t v21 = *(void *)(a1 + 112);
    char v22 = *(_DWORD **)(v21 + 40);
    if ((*(_WORD *)(v21 + 52) & 4) != 0 && v22[8] >= *(_DWORD *)(v21 + 48))
    {
      if (!v22[32])
      {
LABEL_32:
        bzero(v6, v20);
        return 0;
      }
      uint64_t result = sub_1B0D0F4D4(*(void *)(a1 + 112));
    }
    else
    {
      uint64_t result = v22[12];
      if (result) {
        return result;
      }
      uint64_t v23 = *(void *)(a1 + 112);
      if (v22[46] <= v22[50]) {
        uint64_t result = sub_1B0CBD7E0(v23);
      }
      else {
        uint64_t result = sub_1B0D133D0(v23);
      }
    }
    if (result) {
      return result;
    }
    goto LABEL_32;
  }
  if (a5 > v9)
  {
    uint64_t result = sub_1B0D1F2D4(a1, &a2[v9], a3);
    if (result) {
      return result;
    }
    a5 = v9;
  }
  uint64_t v12 = *(void *)(a3 + 16);
  uint64_t v13 = a4;
  int v14 = (const void *)(v12 + a4);
  size_t v15 = a5;
  uint64_t result = memcmp(v6, v14, a5);
  if (result)
  {
    uint64_t v16 = *(void *)(a1 + 112);
    signed __int8 v17 = *(_DWORD **)(v16 + 40);
    if ((*(_WORD *)(v16 + 52) & 4) != 0 && v17[8] >= *(_DWORD *)(v16 + 48))
    {
      if (!v17[32])
      {
LABEL_27:
        memmove(v6, (const void *)(v12 + v13), v15);
        return 0;
      }
      uint64_t result = sub_1B0D0F4D4(*(void *)(a1 + 112));
      if (result) {
        return result;
      }
    }
    else
    {
      uint64_t result = v17[12];
      if (result) {
        return result;
      }
      uint64_t v18 = *(void *)(a1 + 112);
      if (v17[46] <= v17[50])
      {
        uint64_t result = sub_1B0CBD7E0(v18);
        if (result) {
          return result;
        }
      }
      else
      {
        uint64_t result = sub_1B0D133D0(v18);
        if (result) {
          return result;
        }
      }
    }
    uint64_t v12 = *(void *)(a3 + 16);
    goto LABEL_27;
  }
  return result;
}

uint64_t sub_1B0D1F47C(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 36);
  int v5 = *(_DWORD *)(a2 + 40);
  uint64_t v6 = *(void *)(a1 + 136);
  uint64_t v7 = sub_1B0D1F2D4(v6, *(unsigned char **)(a1 + 56), a2, 0, *(unsigned __int16 *)(a1 + 68));
  if (!v7)
  {
    uint64_t v9 = *(unsigned __int16 *)(a1 + 68);
    int v10 = v5 + v4;
    unsigned int v11 = bswap32(*(_DWORD *)(*(void *)(a1 + 56) + v9));
    uint64_t v12 = *(_DWORD **)(v6 + 72);
    int v13 = v12[14] - 4;
    while (1)
    {
      uint64_t v14 = (*(uint64_t (**)(void))(*(void *)v12 + 288))();
      if (v14) {
        return v14;
      }
      uint64_t v15 = 0;
      uint64_t v16 = MEMORY[0x10];
      if (*(_DWORD *)(MEMORY[0x10] + 4) == v11)
      {
        uint64_t v15 = *(void *)(MEMORY[0x10] + 112);
      }
      else
      {
        uint64_t v17 = MEMORY[8];
        *(void *)(MEMORY[0x10] + 112) = 0;
        *(void *)(v16 + 72) = v12;
        *(void *)(v16 + 80) = v17;
        *(_DWORD *)(v16 + 4) = v11;
        if (v11 == 1) {
          char v18 = 100;
        }
        else {
          char v18 = 0;
        }
        *(unsigned char *)(v16 + 9) = v18;
      }
      if (*(_DWORD *)(v15 + 56) == 1 && !*(unsigned char *)v16)
      {
        if (v13 + (int)v9 >= v10)
        {
          int v13 = v10 - v9;
          uint64_t v22 = *(void *)(v16 + 80);
        }
        else
        {
          uint64_t v22 = *(void *)(v16 + 80);
          unsigned int v11 = bswap32(*(_DWORD *)v22);
        }
        uint64_t v19 = sub_1B0D1F2D4(v16, (unsigned char *)(v22 + 4), a2, v9, v13);
      }
      else
      {
        uint64_t v19 = sub_1B0D1045C(86024);
      }
      uint64_t v7 = v19;
      uint64_t v20 = *(void *)(v16 + 112);
      if (v20)
      {
        if ((*(_WORD *)(v20 + 52) & 0x20) != 0)
        {
          uint64_t v21 = *(void *)(v20 + 40);
          --*(_DWORD *)(v21 + 152);
          *(void *)(v20 + 32) = *(void *)(v21 + 168);
          *(void *)(v21 + 168) = v20;
          (*(void (**)(void, void, void))(**(void **)(v21 + 72) + 144))(*(void *)(v21 + 72), *(void *)(v21 + 200) * (*(_DWORD *)(v20 + 48) - 1), *(void *)(v20 + 8));
          if (v7) {
            return v7;
          }
          goto LABEL_20;
        }
        sub_1B0D0E3E8(v20);
      }
      if (v7) {
        return v7;
      }
LABEL_20:
      LODWORD(v9) = v13 + v9;
      if ((int)v9 >= v10) {
        return 0;
      }
    }
  }
  return v7;
}

uint64_t sub_1B0D1F658(uint64_t a1, unsigned int a2, int a3)
{
  unsigned int v3 = a2;
  unsigned int v5 = a3 + a2;
  uint64_t v6 = *(void *)(a1 + 80);
  uint64_t v7 = *(unsigned __int8 *)(a1 + 9);
  uint64_t v8 = v7 + 1;
  if (!*(unsigned char *)(v7 + v6 + 2) && !*(unsigned char *)(v6 + v8))
  {
    __int16 v29 = a3 + a2;
    LOBYTE(v13) = 0;
    LOBYTE(v12) = 0;
    unsigned __int16 v18 = a3;
    LOWORD(v10) = v7 + 1;
    goto LABEL_29;
  }
  unsigned int v9 = v7 + 1;
  while (1)
  {
    unsigned int v10 = v9;
    unsigned int v11 = (unsigned __int8 *)(v6 + (unsigned __int16)v9);
    int v12 = *v11;
    int v13 = v11[1];
    unsigned int v9 = v13 | (v12 << 8);
    if (v9 >= a2) {
      break;
    }
    if (v9 <= (unsigned __int16)v10)
    {
      if (v9)
      {
        uint64_t v14 = 78761;
        goto LABEL_39;
      }
      break;
    }
  }
  unsigned int v15 = *(_DWORD *)(*(void *)(a1 + 72) + 56);
  if (v15 - 4 >= v9)
  {
    if (v9) {
      BOOL v16 = v5 + 3 >= v9;
    }
    else {
      BOOL v16 = 0;
    }
    if (v16)
    {
      unsigned __int8 v17 = v13 - v5;
      if (v9 < v5)
      {
        uint64_t v14 = 78778;
        goto LABEL_39;
      }
      unsigned int v5 = v9 + (bswap32(*(unsigned __int16 *)(v6 + v9 + 2)) >> 16);
      if (v5 > v15)
      {
        uint64_t v14 = 78781;
        goto LABEL_39;
      }
      unsigned __int16 v18 = v5 - a2;
      uint64_t v21 = (unsigned char *)(v6 + v9);
      LOBYTE(v12) = *v21;
      LOBYTE(v13) = v21[1];
    }
    else
    {
      unsigned __int8 v17 = 0;
      unsigned __int16 v18 = a3;
    }
    if (v8 < (unsigned __int16)v10)
    {
      unsigned int v19 = (unsigned __int16)v10 + (bswap32(*(unsigned __int16 *)(v6 + (unsigned __int16)v10 + 2)) >> 16);
      if (v19 + 3 >= a2)
      {
        BOOL v16 = a2 >= v19;
        char v20 = a2 - v19;
        if (!v16)
        {
          uint64_t v14 = 78794;
          goto LABEL_39;
        }
        v17 += v20;
        unsigned __int16 v18 = v5 - v10;
        unsigned int v3 = v10;
      }
    }
    unsigned int v22 = *(unsigned __int8 *)(v6 + v7 + 7);
    if (v22 < v17)
    {
      uint64_t v14 = 78800;
      goto LABEL_39;
    }
    __int16 v29 = v5;
    *(unsigned char *)(v6 + v7 + 7) = v22 - v17;
LABEL_29:
    uint64_t v23 = (unsigned char *)(v7 + v6 + 5);
    unsigned int v24 = __rev16(*(unsigned __int16 *)v23);
    if ((*(_WORD *)(*(void *)(a1 + 72) + 40) & 0xC) != 0)
    {
      int v25 = a3;
      unsigned int v30 = v24;
      bzero((void *)(v6 + (unsigned __int16)v3), v18);
      unsigned int v24 = v30;
      a3 = v25;
    }
    if (v24 >= (unsigned __int16)v3)
    {
      if (v24 > (unsigned __int16)v3)
      {
        uint64_t v14 = 78814;
        goto LABEL_39;
      }
      if (v8 != (unsigned __int16)v10)
      {
        uint64_t v14 = 78815;
        goto LABEL_39;
      }
      uint64_t v27 = (unsigned char *)(v6 + v8);
      *uint64_t v27 = v12;
      v27[1] = v13;
      unsigned char *v23 = HIBYTE(v29);
      v23[1] = v29;
    }
    else
    {
      *(_WORD *)(v6 + (unsigned __int16)v10) = bswap32(v3) >> 16;
      uint64_t v26 = (unsigned char *)(v6 + (unsigned __int16)v3);
      *uint64_t v26 = v12;
      v26[1] = v13;
      void v26[2] = HIBYTE(v18);
      v26[3] = v18;
    }
    *(_DWORD *)(a1 + 20) += a3;
    return 0;
  }
  uint64_t v14 = 78766;
LABEL_39:

  return sub_1B0D11B5C(v14, a1);
}

_WORD *sub_1B0D1F920(uint64_t a1, int a2, _DWORD *a3)
{
  uint64_t v5 = *(unsigned __int8 *)(a1 + 9);
  unsigned int v6 = v5 + 1;
  uint64_t v7 = *(void *)(a1 + 80);
  unsigned int v8 = __rev16(*(unsigned __int16 *)(v7 + v5 + 1));
  int v9 = *(_DWORD *)(*(void *)(a1 + 72) + 56);
  signed int v10 = v9 - a2;
  while (1)
  {
    if ((int)v8 > v10)
    {
      if ((int)v8 <= v9 - 4) {
        return 0;
      }
      uint64_t v15 = 78614;
      goto LABEL_14;
    }
    uint64_t result = (_WORD *)(v7 + v8);
    signed int v12 = __rev16((unsigned __int16)result[1]) - a2;
    if (v12 >= 0) {
      break;
    }
    unsigned int v13 = __rev16(*(unsigned __int16 *)(v7 + v8));
    unsigned int v6 = v8;
    BOOL v14 = v13 > v8;
    unsigned int v8 = v13;
    if (!v14)
    {
      if (v13)
      {
        uint64_t v15 = 78607;
        goto LABEL_14;
      }
      return 0;
    }
  }
  if (v12 > 3)
  {
    if ((int)(v12 + v8) <= v10)
    {
      result[1] = bswap32(v12) >> 16;
      return (_WORD *)(v7 + v12 + v8);
    }
    uint64_t v15 = 78592;
LABEL_14:
    int v16 = sub_1B0D11B5C(v15, a1);
    uint64_t result = 0;
    *a3 = v16;
    return result;
  }
  if (*(unsigned __int8 *)(v7 + v5 + 7) > 0x39u) {
    return 0;
  }
  *(_WORD *)(v7 + v6) = *result;
  *(unsigned char *)(v7 + v5 + 7) += v12;
  return result;
}

uint64_t sub_1B0D1FA40(uint64_t a1, int a2, int a3, uint64_t a4)
{
  unint64_t v12 = *(void *)(a4 + 72);
  uint64_t v6 = *(void *)(a4 + 80);
  uint64_t v7 = *(int *)(v12 + 56);
  unsigned int v8 = (char *)(v6 + v7);
  __int16 v27 = a3;
  int v9 = a3 + a2;
  uint64_t v28 = *(unsigned __int8 *)(a4 + 9);
  signed int v10 = *(char **)(a4 + 96);
  uint64_t v11 = *(void *)(*(void *)v12 + 328);
  LODWORD(v12) = __rev16(*(unsigned __int16 *)(v28 + v6 + 5));
  if (v12 <= v7) {
    unint64_t v12 = v12;
  }
  else {
    unint64_t v12 = 0;
  }
  uint64_t v31 = v11;
  __int16 v32 = (char *)(v6 + v12);
  memcpy((void *)(v11 + v12), (const void *)(v6 + v12), (v7 - v12));
  if (*(_DWORD *)(a1 + 80) <= a2)
  {
    if (*(_DWORD *)(a1 + 84) <= a2)
    {
      if (*(_DWORD *)(a1 + 88) <= a2)
      {
        if (*(_DWORD *)(a1 + 92) <= a2)
        {
          if (*(_DWORD *)(a1 + 96) <= a2)
          {
            if (*(_DWORD *)(a1 + 100) > a2) {
              uint64_t v13 = 5;
            }
            else {
              uint64_t v13 = 6;
            }
          }
          else
          {
            uint64_t v13 = 4;
          }
        }
        else
        {
          uint64_t v13 = 3;
        }
      }
      else
      {
        uint64_t v13 = 2;
      }
    }
    else
    {
      uint64_t v13 = 1;
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t v14 = a2;
  uint64_t v15 = v8;
LABEL_18:
  unint64_t v16 = *(void *)(a1 + 8 * v13 + 32);
  uint64_t v30 = v13;
  unsigned __int8 v17 = (int *)(a1 + 4 * v13 + 80);
  while (1)
  {
    unsigned __int16 v18 = *(char **)(*(void *)(a1 + 16) + 8 * v14);
    size_t v19 = *(unsigned __int16 *)(*(void *)(a1 + 24) + 2 * v14);
    char v20 = &v18[v19];
    if (v18 >= v32 && v18 < v8) {
      break;
    }
    if ((unint64_t)v18 < v16 && (unint64_t)v20 > v16)
    {
      int v26 = 84385;
      goto LABEL_39;
    }
LABEL_32:
    v15 -= v19;
    __int16 v23 = (_WORD)v15 - v6;
    *(_WORD *)signed int v10 = bswap32(v15 - v6) >> 16;
    v10 += 2;
    if (v15 < v10)
    {
      int v26 = 84391;
      goto LABEL_39;
    }
    memmove(v15, v18, v19);
    if (++v14 >= v9)
    {
      *(_WORD *)(a4 + 24) = v27;
      *(unsigned char *)(a4 + 12) = 0;
      uint64_t v24 = v28 + v6;
      *(_WORD *)(v24 + 1) = 0;
      *(unsigned char *)(v24 + 3) = *(unsigned char *)(a4 + 25);
      *(unsigned char *)(v24 + 4) = *(unsigned char *)(a4 + 24);
      *(unsigned char *)(v28 + v6 + 5) = HIBYTE(v23);
      *(_WORD *)(v28 + v6 + 6) = v23;
      return 0;
    }
    if (v14 >= *v17)
    {
      uint64_t v13 = v30 + 1;
      goto LABEL_18;
    }
  }
  if (v20 <= v8)
  {
    unsigned __int16 v18 = &v18[v31 - v6];
    goto LABEL_32;
  }
  int v26 = 84380;
LABEL_39:

  return sub_1B0D1045C(v26);
}

uint64_t sub_1B0D1FC9C(uint64_t a1, int a2)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 120))();
  *(_WORD *)(*(void *)(a1 + 24) + 2 * a2) = result;
  return result;
}

uint64_t sub_1B0D1FCDC(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if (a3 < 1) {
    return 0;
  }
  int v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = *(void *)(a1 + 80);
  uint64_t v9 = *(unsigned int *)(*(void *)(a1 + 72) + 56);
  unint64_t v10 = v8 + v9;
  unint64_t v11 = *(unsigned __int8 *)(a1 + 9) + (unint64_t)*(unsigned __int8 *)(a1 + 10) + v8 + 8;
  uint64_t v12 = a2;
  uint64_t v13 = a3 + a2;
  int v36 = *(_DWORD *)(*(void *)(a1 + 72) + 56);
  __int16 v37 = v8;
  unint64_t v35 = v8 + v9;
  do
  {
    unint64_t v14 = *(void *)(*(void *)(a4 + 16) + 8 * v12);
    if (v14 >= v11 && v14 < v10)
    {
      int v16 = (unsigned __int16)(v14 - v8);
      unsigned int v17 = v16 + *(unsigned __int16 *)(*(void *)(a4 + 24) + 2 * v12);
      if (v6 >= 1)
      {
        uint64_t v18 = v6;
        size_t v19 = (unsigned int *)v39;
        char v20 = v40;
        uint64_t v21 = v6;
        do
        {
          if (*v20 == v17)
          {
            *char v20 = v16;
            goto LABEL_4;
          }
          if (*v19 == v16)
          {
            *size_t v19 = v17;
            goto LABEL_4;
          }
          ++v19;
          ++v20;
          --v21;
        }
        while (v21);
        if (v6 >= 10)
        {
          int v38 = v7;
          unsigned int v22 = (int *)v39;
          __int16 v23 = (int *)v40;
          do
          {
            int v25 = *v23++;
            unsigned __int16 v24 = v25;
            int v26 = *v22++;
            sub_1B0D1F658(a1, v24, (unsigned __int16)(v26 - v24));
            --v18;
          }
          while (v18);
          int v6 = 0;
          LODWORD(v7) = v38;
          LODWORD(v9) = v36;
          LOWORD(v8) = v37;
          unint64_t v10 = v35;
        }
      }
      uint64_t v27 = 4 * v6;
      *(_DWORD *)&v40[v27] = v16;
      *(_DWORD *)&v39[v27] = v17;
      if (v17 > v9) {
        return 0;
      }
      ++v6;
LABEL_4:
      uint64_t v7 = (v7 + 1);
    }
    ++v12;
  }
  while (v12 < v13);
  if (v6 >= 1)
  {
    uint64_t v28 = v6;
    __int16 v29 = (int *)v39;
    uint64_t v30 = (int *)v40;
    do
    {
      int v32 = *v30++;
      unsigned __int16 v31 = v32;
      int v33 = *v29++;
      sub_1B0D1F658(a1, v31, (unsigned __int16)(v33 - v31));
      --v28;
    }
    while (v28);
  }
  return v7;
}

uint64_t sub_1B0D1FED8(uint64_t a1, uint64_t a2, void **a3, _WORD *a4, int a5, int a6, uint64_t a7)
{
  if (a6 < 1) {
    return 0;
  }
  uint64_t v9 = *(void *)(a1 + 80);
  unint64_t v10 = (char *)*a3;
  if (*(_DWORD *)(a7 + 80) <= a5)
  {
    if (*(_DWORD *)(a7 + 84) <= a5)
    {
      if (*(_DWORD *)(a7 + 88) <= a5)
      {
        if (*(_DWORD *)(a7 + 92) <= a5)
        {
          if (*(_DWORD *)(a7 + 96) <= a5)
          {
            if (*(_DWORD *)(a7 + 100) > a5) {
              LODWORD(v11) = 5;
            }
            else {
              LODWORD(v11) = 6;
            }
          }
          else
          {
            LODWORD(v11) = 4;
          }
        }
        else
        {
          LODWORD(v11) = 3;
        }
      }
      else
      {
        LODWORD(v11) = 2;
      }
    }
    else
    {
      LODWORD(v11) = 1;
    }
  }
  else
  {
    LODWORD(v11) = 0;
  }
  unint64_t v13 = *(void *)(a7 + 8 * v11 + 32);
  uint64_t v14 = a5;
  uint64_t v15 = a6 + a5;
  while (1)
  {
    if (((int64_t v16 = *(unsigned __int16 *)(*(void *)(a7 + 24) + 2 * v14), *(unsigned char *)(v9 + 1)) || *(unsigned char *)(v9 + 2))
      && (unsigned int v17 = sub_1B0D1F920(a1, *(unsigned __int16 *)(*(void *)(a7 + 24) + 2 * v14), &v24)) != 0)
    {
      uint64_t v18 = v17;
    }
    else
    {
      if ((uint64_t)&v10[-a2] < v16) {
        return 1;
      }
      v10 -= v16;
      uint64_t v18 = v10;
    }
    size_t v19 = *(const void **)(*(void *)(a7 + 16) + 8 * v14);
    if ((unint64_t)v19 < v13 && (unint64_t)v19 + v16 > v13)
    {
      sub_1B0D1045C(84476);
      return 1;
    }
    memmove(v18, v19, v16);
    *a4 = bswap32(v18 - v9) >> 16;
    if (v14 + 1 >= v15) {
      break;
    }
    if (v14 + 1 >= *(int *)(a7 + 4 * (int)v11 + 80))
    {
      uint64_t v11 = (int)v11 + 1;
      unint64_t v13 = *(void *)(a7 + 8 * v11 + 32);
    }
    ++a4;
    ++v14;
  }
  uint64_t result = 0;
  *a3 = v10;
  return result;
}

uint64_t sub_1B0D200AC(void *a1, unsigned int **a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1[2];
  if (a1[3]) {
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v4 + 40);
  unint64_t v6 = (unint64_t)*(unsigned __int16 *)(v5 + 6) << 6;
  uint64_t v7 = *(void *)(v5 + 16);
  if (!v7)
  {
    uint64_t v8 = sub_1B0C7FC94(v6 + 104);
    if (v8) {
      goto LABEL_4;
    }
LABEL_42:
    a1[3] = 0;
    return 7;
  }
  uint64_t v8 = sub_1B0D05DC0(v7, v6 + 104);
  if (!v8) {
    goto LABEL_42;
  }
LABEL_4:
  *(void *)uint64_t v8 = v5;
  *(void *)(v8 + 8) = v8 + 40;
  a1[3] = v8;
  uint64_t v4 = a1[2];
  *(_WORD *)(v8 + 28) = *(_WORD *)(*(void *)(v4 + 40) + 6);
  *(unsigned char *)(v8 + 31) = 0;
LABEL_5:
  uint64_t v9 = *a2;
  int v10 = *(unsigned __int8 *)(v4 + 92);
  uint64_t v11 = sub_1B0D20988;
  if (v10 == 2) {
    uint64_t v11 = sub_1B0D20794;
  }
  if (v10 == 1) {
    uint64_t v11 = sub_1B0D20610;
  }
  a1[8] = v11;
  memset(v25, 0, sizeof(v25));
  if (v9)
  {
    do
    {
      unint64_t v13 = a2[1];
      if (v13)
      {
        if (v9 == v13) {
          uint64_t v14 = 0;
        }
        else {
          uint64_t v14 = (unsigned int *)((char *)v13 + (int)v9[2]);
        }
      }
      else
      {
        uint64_t v14 = (unsigned int *)*((void *)v9 + 1);
      }
      *((void *)v9 + 1) = 0;
      uint64_t v15 = *(unsigned int **)&v25[0];
      if (*(void *)&v25[0])
      {
        uint64_t v16 = 0;
        do
        {
          int v24 = 0;
          int v23 = 0;
          unsigned int v17 = &v24;
          do
          {
            while (((int (*)(void *, int *, unsigned int *, void, unsigned int *, void))a1[8])(a1, &v23, v9 + 4, *v9, v15 + 4, *v15) <= 0)
            {
              *unsigned int v17 = v9;
              unsigned int v17 = (unsigned int **)(v9 + 2);
              uint64_t v9 = (unsigned int *)*((void *)v9 + 1);
              if (!v9)
              {
                *unsigned int v17 = v15;
                goto LABEL_26;
              }
            }
            *unsigned int v17 = v15;
            unsigned int v17 = (unsigned int **)(v15 + 2);
            uint64_t v15 = (unsigned int *)*((void *)v15 + 1);
            int v23 = 0;
          }
          while (v15);
          *unsigned int v17 = v9;
LABEL_26:
          uint64_t v9 = v24;
          *((void *)v25 + v16++) = 0;
          uint64_t v12 = (unsigned int **)v25 + v16;
          uint64_t v15 = *v12;
        }
        while (*v12);
      }
      else
      {
        uint64_t v12 = (unsigned int **)v25;
      }
      _DWORD *v12 = v9;
      uint64_t v9 = v14;
    }
    while (v14);
  }
  uint64_t v18 = 0;
  size_t v19 = 0;
  do
  {
    char v20 = (unsigned int *)*((void *)v25 + v18);
    if (v20)
    {
      if (v19)
      {
        int v24 = 0;
        int v23 = 0;
        uint64_t v21 = &v24;
        do
        {
          while (((int (*)(void *, int *, unsigned int *, void, unsigned int *, void))a1[8])(a1, &v23, v19 + 4, *v19, v20 + 4, *v20) <= 0)
          {
            unsigned char *v21 = v19;
            uint64_t v21 = (unsigned int **)(v19 + 2);
            size_t v19 = (unsigned int *)*((void *)v19 + 1);
            if (!v19)
            {
              unsigned char *v21 = v20;
              goto LABEL_39;
            }
          }
          unsigned char *v21 = v20;
          uint64_t v21 = (unsigned int **)(v20 + 2);
          char v20 = (unsigned int *)*((void *)v20 + 1);
          int v23 = 0;
        }
        while (v20);
        unsigned char *v21 = v19;
LABEL_39:
        size_t v19 = v24;
      }
      else
      {
        size_t v19 = (unsigned int *)*((void *)v25 + v18);
      }
    }
    ++v18;
  }
  while (v18 != 64);
  *a2 = v19;
  return *(unsigned __int8 *)(a1[3] + 31);
}

void sub_1B0D20398(uint64_t a1)
{
  unsigned int v2 = *(unsigned __int8 *)(a1 + 91);
  signed int v3 = v2 - 1;
  *(unsigned char *)(a1 + 88) = 1;
  if (v2 < 2)
  {
    int v4 = 0;
    uint64_t v6 = 0;
    goto LABEL_8;
  }
  int v4 = 0;
  while (1)
  {
    uint64_t v5 = a1 + 104 * ((*(unsigned __int8 *)(a1 + 90) + 1 + v4) % v3);
    uint64_t v8 = *(void *)(v5 + 96);
    uint64_t v6 = v5 + 96;
    uint64_t v7 = v8;
    if (*(_DWORD *)(v6 + 8)) {
      break;
    }
    if (!v7) {
      goto LABEL_8;
    }
    if (v3 == ++v4) {
      goto LABEL_9;
    }
  }
  if (v7)
  {
    if (*(void *)v7) {
      LODWORD(v14) = (*(uint64_t (**)(void))v7)(*(void *)(v7 + 8));
    }
    else {
      uint64_t v14 = *(void *)(v7 + 16);
    }
    uint64_t v16 = &off_1EB21C9E8;
    if (dword_1EB21C9C0)
    {
      if ((void)xmmword_1EB2201B0) {
        xmmword_1EB21CA40(xmmword_1EB2201B0);
      }
      qword_1EB220108 -= (int)off_1EB21C9F8(v7);
      --qword_1EB220150;
      off_1EB21C9E8(v7);
      uint64_t v7 = xmmword_1EB2201B0;
      if (!(void)xmmword_1EB2201B0)
      {
LABEL_32:
        *(_DWORD *)(v6 + 8) = 0;
        *(void *)uint64_t v6 = 0;
        if (v14) {
          return;
        }
        goto LABEL_8;
      }
      uint64_t v16 = &xmmword_1EB21CA50;
    }
    (*v16)(v7);
    goto LABEL_32;
  }
LABEL_8:
  if (v4 == v3)
  {
LABEL_9:
    sub_1B0D20A04(a1 + 104 * v3 + 96, a1 + 56);
  }
  else
  {
    uint64_t v9 = *(void *)(v6 + 40);
    *(unsigned char *)(a1 + 90) = -59 * ((v6 - a1 - 96) >> 3);
    long long v10 = *(_OWORD *)(a1 + 56);
    *(void *)(v6 + 48) = *(void *)(a1 + 72);
    *(_OWORD *)(v6 + 32) = v10;
    *(void *)(a1 + 56) = 0;
    *(_DWORD *)(a1 + 72) = 0;
    if (v9)
    {
      *(void *)(a1 + 64) = v9;
      *(_DWORD *)(a1 + 84) = off_1EB21C9F8(v9);
    }
    else if (*(void *)(a1 + 64))
    {
      uint64_t v15 = sub_1B0C7FC94(*(int *)(a1 + 84));
      *(void *)(a1 + 64) = v15;
      if (!v15) {
        return;
      }
    }
    *(void *)uint64_t v6 = 0;
    uint64_t v11 = (void *)sub_1B0C7FC94(24);
    if (v11)
    {
      uint64_t v12 = v11;
      if (((int)v11 / 17))
      {
        *uint64_t v11 = sub_1B0D20D68;
        v11[1] = v6;
      }
      else
      {
        *uint64_t v11 = 0;
        sub_1B0D20A04(v6, v6 + 32);
        *(_DWORD *)(v6 + 8) = 1;
        void v12[2] = v13;
      }
      *(void *)uint64_t v6 = v12;
    }
  }
}

uint64_t sub_1B0D20610(uint64_t a1, _DWORD *a2, char *a3, unsigned int a4, char *a5, unsigned int a6)
{
  uint64_t v9 = a3[1];
  unsigned int v10 = a5[1];
  uint64_t v11 = (unsigned __int8 *)&a3[*a3];
  uint64_t v12 = &a5[*a5];
  unsigned int v13 = v9 - v10;
  if (v9 == v10)
  {
    if ((unint64_t)(v9 - 7) < 0xFFFFFFFFFFFFFFFALL) {
      goto LABEL_30;
    }
    if (byte_1B0DE2209[v9] <= 1u) {
      uint64_t v14 = 1;
    }
    else {
      uint64_t v14 = byte_1B0DE2209[v9];
    }
    uint64_t v15 = (unsigned __int8 *)&a3[*a3];
    uint64_t v16 = (unsigned __int8 *)&a5[*a5];
    while (1)
    {
      int v18 = *v15++;
      int v17 = v18;
      int v19 = *v16++;
      unsigned int v13 = v17 - v19;
      if (v13) {
        break;
      }
      if (!--v14) {
        goto LABEL_30;
      }
    }
    int v22 = (char)*v11;
    if (((*v12 ^ v22) & 0x80) != 0)
    {
      unsigned int v13 = (v22 >> 31) | 1;
      goto LABEL_27;
    }
  }
  else if (v9 < 8 || v10 <= 7)
  {
    if (v9 > 7) {
      unsigned int v13 = -1;
    }
    if (v10 > 7) {
      int v21 = 1;
    }
    else {
      int v21 = v13;
    }
    if (v21 < 1)
    {
      if (*v12 < 0)
      {
        unsigned int v13 = 1;
LABEL_27:
        if (**(unsigned char **)(*(void *)(*(void *)(a1 + 16) + 40) + 24)) {
          return -v13;
        }
        else {
          return v13;
        }
      }
    }
    else if ((*v11 & 0x80u) != 0)
    {
      unsigned int v13 = -1;
    }
    else
    {
      unsigned int v13 = v21;
    }
  }
  if (v13) {
    goto LABEL_27;
  }
LABEL_30:
  if (*(unsigned __int16 *)(*(void *)(*(void *)(a1 + 16) + 40) + 6) < 2u) {
    return 0;
  }
  int v24 = *(uint64_t **)(a1 + 24);
  if (!*a2)
  {
    sub_1B0CC14AC(*(void *)(*(void *)(a1 + 16) + 40), a6, a5, (uint64_t)v24);
    *a2 = 1;
  }

  return sub_1B0D1B630(a4, a3, v24, 1);
}

uint64_t sub_1B0D20794(uint64_t a1, _DWORD *a2, char *a3, unsigned int a4, char *a5, unsigned int a6)
{
  uint64_t v12 = (unsigned __int8 *)&a3[*a3];
  unsigned int v13 = (unsigned __int8 *)&a5[*a5];
  int v14 = a3[1];
  if (a3[1] < 0)
  {
    int v15 = a3[2];
    if (a3[2] < 0)
    {
      int v16 = a3[3];
      if (v16 < 0)
      {
        unint64_t v29 = 0;
        sub_1B0CAD43C(a3 + 1, &v29);
        if (HIDWORD(v29)) {
          int v14 = -1;
        }
        else {
          int v14 = v29;
        }
      }
      else
      {
        int v14 = v16 & 0x7F | (v14 << 14) & 0x1FC07F | ((v15 & 0x7F) << 7);
      }
    }
    else
    {
      int v14 = ((v14 & 0x7F) << 7) | v15;
    }
  }
  int v17 = a5[1];
  if (a5[1] < 0)
  {
    int v18 = a5[2];
    if (a5[2] < 0)
    {
      int v19 = a5[3];
      if (v19 < 0)
      {
        unint64_t v29 = 0;
        sub_1B0CAD43C(a5 + 1, &v29);
        if (HIDWORD(v29)) {
          int v17 = -1;
        }
        else {
          int v17 = v29;
        }
      }
      else
      {
        int v17 = v19 & 0x7F | (v17 << 14) & 0x1FC07F | ((v18 & 0x7F) << 7);
      }
    }
    else
    {
      int v17 = ((v17 & 0x7F) << 7) | v18;
    }
  }
  int v20 = v14 - v17;
  if (v14 < v17) {
    int v17 = v14;
  }
  int v22 = v17 - 13;
  BOOL v21 = v17 < 13;
  int v23 = v17 - 12;
  if (!v21) {
    int v23 = v22;
  }
  int v24 = memcmp(v12, v13, (uint64_t)v23 >> 1);
  if (v24) {
    unsigned int v25 = v24;
  }
  else {
    unsigned int v25 = v20;
  }
  uint64_t v26 = *(void *)(*(void *)(a1 + 16) + 40);
  if (v25)
  {
    if (**(unsigned char **)(v26 + 24)) {
      return -v25;
    }
    else {
      return v25;
    }
  }
  else if (*(unsigned __int16 *)(v26 + 6) < 2u)
  {
    return 0;
  }
  else
  {
    uint64_t v28 = *(uint64_t **)(a1 + 24);
    if (!*a2)
    {
      sub_1B0CC14AC(v26, a6, a5, (uint64_t)v28);
      *a2 = 1;
    }
    return sub_1B0D1B630(a4, a3, v28, 1);
  }
}

uint64_t sub_1B0D20988(uint64_t a1, _DWORD *a2, char *a3, unsigned int a4, char *a5, unsigned int a6)
{
  uint64_t v8 = *(uint64_t **)(a1 + 24);
  if (!*a2)
  {
    sub_1B0CC14AC(*(void *)(*(void *)(a1 + 16) + 40), a6, a5, (uint64_t)v8);
    *a2 = 1;
  }

  return sub_1B0D1B630(a4, a3, v8, 0);
}

double sub_1B0D20A04(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 16) + 32);
  uint64_t v5 = (uint64_t **)(a1 + 72);
  uint64_t v6 = *(uint64_t **)(a1 + 72);
  if (!v6)
  {
    if (off_1EB21CB60 && off_1EB21CB60(202)) {
      return result;
    }
    LODWORD(v31) = 0;
    LODWORD(v31) = sub_1B0D1744C(*(void *)v4, 0, v5, 4126, (uint64_t)&v31);
    if (v31) {
      return result;
    }
    *(void *)&long long v27 = 20971520;
    uint64_t v12 = **v5;
    if (v12)
    {
      (*(void (**)(void))(v12 + 80))();
      if (v31) {
        return result;
      }
    }
    uint64_t v6 = *v5;
  }
  uint64_t v26 = (void *)(a1 + 80);
  *(void *)&long long v27 = *(void *)(a1 + 80) + *(int *)(a2 + 16) + 9;
  if ((uint64_t)v27 <= *(int *)(v4 + 184))
  {
    uint64_t v7 = *v6;
    if (*(int *)*v6 >= 3)
    {
      uint64_t v31 = 0;
      int v30 = 4096;
      (*(void (**)(uint64_t *, uint64_t, int *))(v7 + 80))(v6, 6, &v30);
      (*(void (**)(uint64_t *, uint64_t, long long *))(*v6 + 80))(v6, 5, &v27);
      (*(void (**)(uint64_t *, void, void, uint64_t *))(*v6 + 136))(v6, 0, v27, &v31);
      if (v31) {
        (*(void (**)(uint64_t *, void))(*v6 + 144))(v6, 0);
      }
    }
  }
  if (!sub_1B0D200AC((void *)a1, (unsigned int **)a2))
  {
    int v9 = *(_DWORD *)(*(void *)(a1 + 16) + 12);
    uint64_t v10 = *(void *)(a1 + 72);
    uint64_t v11 = *(void *)(a1 + 80);
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    *((void *)&v27 + 1) = sub_1B0C7FC94(v9);
    if (*((void *)&v27 + 1))
    {
      DWORD1(v28) = v11 % v9;
      DWORD2(v28) = DWORD1(v28);
      LODWORD(v28) = v9;
      *(void *)&long long v29 = v11 / v9 * v9;
      *((void *)&v29 + 1) = v10;
    }
    else
    {
      LODWORD(v27) = 7;
    }
    ++*(_DWORD *)(a1 + 56);
    sub_1B0D20EDC((uint64_t)&v27, *(int *)(a2 + 16));
    unsigned int v13 = *(unsigned int **)a2;
    if (!*(void *)a2)
    {
LABEL_17:
      *(void *)a2 = 0;
      return sub_1B0D2102C((uint64_t)&v27, v26);
    }
    while (1)
    {
      int v14 = (int *)v13;
      unsigned int v13 = (unsigned int *)*((void *)v13 + 1);
      sub_1B0D20EDC((uint64_t)&v27, *v14);
      int v15 = *v14;
      if (*v14 >= 1)
      {
        int v16 = v27;
        int v17 = *v14;
        while (!v16)
        {
          uint64_t v21 = (int)v28;
          int v22 = DWORD2(v28);
          if (v17 >= (int)v28 - DWORD2(v28)) {
            int v23 = v28 - DWORD2(v28);
          }
          else {
            int v23 = v17;
          }
          uint64_t v24 = *((void *)&v27 + 1);
          memcpy((void *)(*((void *)&v27 + 1) + SDWORD2(v28)), (char *)v14 + v15 - v17 + 16, v23);
          DWORD2(v28) = v22 + v23;
          if (v22 + v23 == v21)
          {
            uint64_t v18 = v24 + SDWORD1(v28);
            uint64_t v19 = v29;
            int v16 = (*(uint64_t (**)(void, uint64_t, void, void))(**((void **)&v29 + 1) + 24))(*((void *)&v29 + 1), v18, (v21 - DWORD1(v28)), v29 + SDWORD1(v28));
            *(void *)((char *)&v28 + 4) = 0;
            LODWORD(v27) = v16;
            *(void *)&long long v29 = v19 + v21;
            BOOL v20 = __OFSUB__(v17, v23);
            v17 -= v23;
            if ((v17 < 0) ^ v20 | (v17 == 0)) {
              break;
            }
          }
          else
          {
            int v16 = 0;
            BOOL v20 = __OFSUB__(v17, v23);
            v17 -= v23;
            if ((v17 < 0) ^ v20 | (v17 == 0)) {
              break;
            }
          }
        }
      }
      if (*(void *)(a2 + 8)) {
        goto LABEL_20;
      }
      unsigned int v25 = (void (**)(int *))&off_1EB21C9E8;
      if (dword_1EB21C9C0)
      {
        if ((void)xmmword_1EB2201B0) {
          xmmword_1EB21CA40(xmmword_1EB2201B0);
        }
        qword_1EB220108 -= (int)off_1EB21C9F8(v14);
        --qword_1EB220150;
        off_1EB21C9E8(v14);
        int v14 = (int *)xmmword_1EB2201B0;
        if (!(void)xmmword_1EB2201B0) {
          goto LABEL_20;
        }
        unsigned int v25 = (void (**)(int *))&xmmword_1EB21CA50;
      }
      (*v25)(v14);
LABEL_20:
      if (!v13) {
        goto LABEL_17;
      }
    }
  }
  return result;
}

uint64_t sub_1B0D20D68(uint64_t a1)
{
  sub_1B0D20A04(a1, a1 + 32);
  *(_DWORD *)(a1 + 8) = 1;
  return (int)result;
}

uint64_t sub_1B0D20D9C(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  if (off_1EB21CB60 && off_1EB21CB60(202)) {
    return 3338;
  }
  unsigned int v10 = 0;
  uint64_t result = sub_1B0D1744C(*(void *)a1, 0, a3, 4126, (uint64_t)&v10);
  unsigned int v10 = result;
  if (!result)
  {
    uint64_t v7 = **a3;
    if (v7) {
      (*(void (**)(uint64_t *))(v7 + 80))(*a3);
    }
    if (a2 >= 1)
    {
      uint64_t v8 = *a3;
      uint64_t v13 = a2;
      if (*(int *)(a1 + 184) >= a2)
      {
        uint64_t v9 = *v8;
        if (*(int *)*v8 >= 3)
        {
          uint64_t v12 = 0;
          int v11 = 4096;
          (*(void (**)(uint64_t *, uint64_t, int *))(v9 + 80))(v8, 6, &v11);
          (*(void (**)(uint64_t *, uint64_t, uint64_t *))(*v8 + 80))(v8, 5, &v13);
          (*(void (**)(uint64_t *, void, void, uint64_t *))(*v8 + 136))(v8, 0, v13, &v12);
          if (v12) {
            (*(void (**)(uint64_t *, void))(*v8 + 144))(v8, 0);
          }
        }
      }
    }
    return v10;
  }
  return result;
}

uint64_t sub_1B0D20EDC(uint64_t result, unint64_t a2)
{
  uint64_t v2 = result;
  *(void *)&v9[5] = *MEMORY[0x1E4F143B8];
  if (a2 > 0x7F)
  {
    if (a2 >> 14)
    {
      uint64_t result = sub_1B0D1DC5C((int8x8_t *)v9, a2);
      int v3 = result;
      if ((int)result < 1) {
        return result;
      }
    }
    else
    {
      LOBYTE(v9[0]) = (a2 >> 7) | 0x80;
      HIBYTE(v9[0]) = a2 & 0x7F;
      int v3 = 2;
    }
  }
  else
  {
    LOBYTE(v9[0]) = a2;
    int v3 = 1;
  }
  int v4 = v3;
  do
  {
    if (*(_DWORD *)v2) {
      break;
    }
    uint64_t v6 = *(int *)(v2 + 24);
    int v7 = v4 >= *(_DWORD *)(v2 + 16) - (int)v6 ? *(_DWORD *)(v2 + 16) - v6 : v4;
    uint64_t result = (uint64_t)memcpy((void *)(*(void *)(v2 + 8) + v6), (char *)v9 + v3 - v4, v7);
    int v8 = *(_DWORD *)(v2 + 24) + v7;
    *(_DWORD *)(v2 + 24) = v8;
    if (v8 == *(_DWORD *)(v2 + 16))
    {
      uint64_t result = (*(uint64_t (**)(void, void, void, void))(**(void **)(v2 + 40) + 24))(*(void *)(v2 + 40), *(void *)(v2 + 8) + *(int *)(v2 + 20), (v8 - *(_DWORD *)(v2 + 20)), *(void *)(v2 + 32) + *(int *)(v2 + 20));
      *(_DWORD *)uint64_t v2 = result;
      *(_DWORD *)(v2 + 20) = 0;
      *(_DWORD *)(v2 + 24) = 0;
      *(void *)(v2 + 32) += *(int *)(v2 + 16);
    }
    BOOL v5 = __OFSUB__(v4, v7);
    v4 -= v7;
  }
  while (!((v4 < 0) ^ v5 | (v4 == 0)));
  return result;
}

double sub_1B0D2102C(uint64_t a1, void *a2)
{
  if (!*(_DWORD *)a1)
  {
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7)
    {
      int v8 = *(_DWORD *)(a1 + 24);
      uint64_t v9 = *(int *)(a1 + 20);
      if (v8 > (int)v9) {
        *(_DWORD *)a1 = (*(uint64_t (**)(void, uint64_t, void, uint64_t))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), v7 + v9, (v8 - v9), *(void *)(a1 + 32) + v9);
      }
    }
  }
  *a2 = *(void *)(a1 + 32) + *(int *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    BOOL v5 = &off_1EB21C9E8;
    if (!dword_1EB21C9C0)
    {
LABEL_8:
      (*v5)(v4);
      goto LABEL_9;
    }
    if ((void)xmmword_1EB2201B0) {
      xmmword_1EB21CA40(xmmword_1EB2201B0);
    }
    qword_1EB220108 -= (int)off_1EB21C9F8(v4);
    --qword_1EB220150;
    off_1EB21C9E8(v4);
    uint64_t v4 = xmmword_1EB2201B0;
    if ((void)xmmword_1EB2201B0)
    {
      BOOL v5 = &xmmword_1EB21CA50;
      goto LABEL_8;
    }
  }
LABEL_9:
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t sub_1B0D21144(uint64_t a1, int *a2, uint64_t *a3)
{
  if (off_1EB21CB60 && off_1EB21CB60(100) || (uint64_t v6 = sub_1B0C7FC94(72)) == 0)
  {
    *a3 = 0;
    if (a2)
    {
      if (*a2 >= 1)
      {
        uint64_t v10 = 0;
        uint64_t v11 = 0;
        do
        {
          sub_1B0D16DCC(*((void *)a2 + 3) + v10);
          ++v11;
          v10 += 80;
        }
        while (v11 < *a2);
      }
      uint64_t v12 = (void (**)(int *))&off_1EB21C9E8;
      if (dword_1EB21C9C0)
      {
        if ((void)xmmword_1EB2201B0) {
          xmmword_1EB21CA40(xmmword_1EB2201B0);
        }
        qword_1EB220108 -= (int)off_1EB21C9F8(a2);
        --qword_1EB220150;
        off_1EB21C9E8(a2);
        a2 = (int *)xmmword_1EB2201B0;
        if (!(void)xmmword_1EB2201B0) {
          return 7;
        }
        uint64_t v12 = (void (**)(int *))&xmmword_1EB21CA50;
      }
      (*v12)(a2);
    }
    return 7;
  }
  uint64_t v7 = v6;
  uint64_t result = 0;
  *(void *)(v7 + 64) = 0;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)uint64_t v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *a3 = v7;
  int v9 = *(_DWORD *)(*(void *)(a1 + 16) + 4) / 2;
  if (*(_DWORD *)(*(void *)(a1 + 16) + 8) + 9 > v9) {
    int v9 = *(_DWORD *)(*(void *)(a1 + 16) + 8) + 9;
  }
  *(void *)uint64_t v7 = a1;
  *(void *)(v7 + 8) = a2;
  *(_DWORD *)(v7 + 24) = v9;
  *(void *)(a1 + 96) += v9;
  return result;
}

uint64_t sub_1B0D212AC(uint64_t a1, int a2)
{
  int v3 = *(uint64_t ***)(a1 + 72);
  uint64_t v4 = *v3;
  BOOL v5 = (unsigned int *)v3[1];
  int v33 = v3;
  uint64_t v32 = *(void *)((*v3)[2] + 32);
  *((void *)v5 + 1) = *v3;
  uint64_t v6 = *v5;
  if ((int)v6 >= 1)
  {
    uint64_t v7 = 0;
    int v8 = v6 - 1;
    uint64_t v9 = 80 * v6;
    do
    {
      uint64_t v11 = *((void *)v5 + 3);
      if (a2 == 2)
      {
        uint64_t result = sub_1B0D21A4C(v11 + 80 * v8);
        if (result) {
          return result;
        }
      }
      else
      {
        uint64_t v12 = v11 + v7;
        uint64_t v13 = *(void *)(v11 + v7 + 72);
        if (v13)
        {
          if (*(_DWORD *)(v13 + 32))
          {
            int v14 = *(void **)v13;
            **(void **)uint64_t v13 = 0;
            int v15 = (void *)sub_1B0C7FC94(24);
            if (!v15) {
              return 7;
            }
            int v16 = v15;
            if (((int)v15 / 17))
            {
              *int v15 = sub_1B0D22230;
              v15[1] = v12;
            }
            else
            {
              *int v15 = 0;
              int v17 = sub_1B0D212AC(v12, 1);
              *(_DWORD *)(**(void **)(v12 + 72) + 8) = 1;
              v16[2] = v17;
            }
            *int v14 = v16;
          }
          else
          {
            uint64_t result = sub_1B0D212AC(v12, 0);
            if (result) {
              return result;
            }
          }
        }
      }
      --v8;
      v7 += 80;
    }
    while (v9 != v7);
    uint64_t v18 = *v5;
    if ((int)v18 >= 2)
    {
      unsigned int v19 = 2 * v18 - 2;
      do
      {
        int v22 = (int)*v5 / 2;
        if (v18 <= v22)
        {
          uint64_t v24 = *((void *)v5 + 2);
          unsigned int v23 = *(_DWORD *)(v24 + 4 * v19);
          unsigned int v21 = *(_DWORD *)(v24 + 4 * (v19 + 1));
        }
        else
        {
          unsigned int v23 = v19 - 2 * v22;
          unsigned int v21 = v23 + 1;
        }
        uint64_t v25 = *((void *)v5 + 3);
        if (*(void *)(v25 + 80 * (int)v23 + 24))
        {
          if (*(void *)(v25 + 80 * (int)v21 + 24))
          {
            uint64_t v20 = *((void *)v5 + 1);
            int v34 = 0;
            if ((*(int (**)(uint64_t, int *))(v20 + 64))(v20, &v34) < 1) {
              unsigned int v21 = v23;
            }
          }
          else
          {
            unsigned int v21 = v23;
          }
        }
        *(_DWORD *)(*((void *)v5 + 2) + 4 * --v18) = v21;
        v19 -= 2;
      }
      while ((unint64_t)(v18 + 1) > 2);
    }
  }
  uint64_t v26 = v4[3];
  uint64_t result = *(unsigned __int8 *)(v26 + 31);
  if (!*(unsigned char *)(v26 + 31))
  {
    long long v27 = v33;
    uint64_t v28 = *((int *)v33 + 6);
    if (*((_DWORD *)v33 + 8))
    {
      uint64_t result = sub_1B0D20D9C(v32, *((int *)v33 + 6), v33 + 5);
      if (result) {
        return result;
      }
      uint64_t result = sub_1B0D20D9C(v32, v28, v33 + 7);
      if (result) {
        return result;
      }
    }
    else
    {
      int v30 = (uint64_t *)v4[11];
      uint64_t v29 = v4[12];
      if (!v30)
      {
        uint64_t result = sub_1B0D20D9C(v32, v29, (uint64_t **)v4 + 11);
        v4[12] = 0;
        if (result) {
          return result;
        }
        uint64_t v29 = 0;
        int v30 = (uint64_t *)v4[11];
        long long v27 = v33;
      }
      v27[7] = v30;
      v27[2] = (uint64_t *)v29;
      v4[12] = v29 + v28;
    }
    if (*((_DWORD *)v33 + 8))
    {
      uint64_t result = sub_1B0D21E68(v33);
      if (a2 == 1) {
        return result;
      }
    }
    else
    {
      uint64_t result = 0;
      if (a2 == 1) {
        return result;
      }
    }
    if (!result) {
      return sub_1B0D21A4C(a1);
    }
  }
  return result;
}

uint64_t sub_1B0D21590(uint64_t a1, int a2, uint64_t *a3, int **a4)
{
  uint64_t v8 = *a3;
  int v9 = 2;
  do
  {
    int v10 = v9;
    v9 *= 2;
  }
  while (v10 < a2);
  if (off_1EB21CB60 && off_1EB21CB60(100)
    || (size_t v11 = 84 * v10 + 32, (v12 = (int *)sub_1B0C7FC94(v11)) == 0))
  {
    uint64_t v20 = 7;
    goto LABEL_26;
  }
  uint64_t v13 = v12;
  bzero(v12, v11);
  *uint64_t v13 = v10;
  *((void *)v13 + 3) = v13 + 8;
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 2) = &v13[20 * v10 + 8];
  *a4 = v13;
  uint64_t v26 = a4;
  if (a2 >= 1)
  {
    uint64_t v14 = 0;
    unint64_t v15 = 1;
    unint64_t v16 = a2;
    while (1)
    {
      int v17 = (uint64_t *)(*((void *)v13 + 3) + v14);
      uint64_t v18 = sub_1B0D217D4(a1, v17, (uint64_t *)(a1 + 72), v8);
      if (v18) {
        break;
      }
      unint64_t v27 = 0;
      uint64_t v18 = sub_1B0D21950((uint64_t)v17, &v27);
      v17[1] = v27 + *v17;
      if (v18) {
        break;
      }
      uint64_t v19 = sub_1B0D21A4C((uint64_t)v17);
      uint64_t v20 = v19;
      uint64_t v8 = v17[1];
      BOOL v21 = v19 == 0;
      if (v15 < v16)
      {
        v14 += 80;
        ++v15;
        if (!v19) {
          continue;
        }
      }
      goto LABEL_16;
    }
    uint64_t v20 = v18;
    uint64_t v8 = v17[1];
    a4 = v26;
LABEL_17:
    if (*v13 >= 1)
    {
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      do
      {
        sub_1B0D16DCC(*((void *)v13 + 3) + v22);
        ++v23;
        v22 += 80;
      }
      while (v23 < *v13);
    }
    uint64_t v24 = (void (**)(int *))&off_1EB21C9E8;
    if (dword_1EB21C9C0)
    {
      if ((void)xmmword_1EB2201B0) {
        xmmword_1EB21CA40(xmmword_1EB2201B0);
      }
      qword_1EB220108 -= (int)off_1EB21C9F8(v13);
      --qword_1EB220150;
      off_1EB21C9E8(v13);
      uint64_t v13 = (int *)xmmword_1EB2201B0;
      if (!(void)xmmword_1EB2201B0) {
        goto LABEL_26;
      }
      uint64_t v24 = (void (**)(int *))&xmmword_1EB21CA50;
    }
    (*v24)(v13);
LABEL_26:
    *a4 = 0;
    goto LABEL_27;
  }
  uint64_t v20 = 0;
  BOOL v21 = 1;
LABEL_16:
  a4 = v26;
  if (!v21) {
    goto LABEL_17;
  }
LABEL_27:
  *a3 = v8;
  return v20;
}

uint64_t sub_1B0D217D4(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  if (off_1EB21CB60 && off_1EB21CB60(201)) {
    return 266;
  }
  if (a2[8])
  {
    (*(void (**)(uint64_t, void))(*(void *)a2[3] + 144))(a2[3], 0);
    a2[8] = 0;
  }
  uint64_t v9 = *a3;
  uint64_t v10 = a3[1];
  *a2 = a4;
  a2[1] = v10;
  a2[3] = v9;
  if (v10 <= *(int *)(*(void *)(*(void *)(a1 + 16) + 32) + 184) && **(int **)v9 >= 3)
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t, void))(*(void *)v9 + 136))(v9, 0);
    if (v8) {
      return v8;
    }
    if (a2[8]) {
      return 0;
    }
  }
  int v11 = *(_DWORD *)(*(void *)(a1 + 16) + 12);
  uint64_t v12 = *a2;
  uint64_t v13 = a2[6];
  if (v13)
  {
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v13 = sub_1B0C7FC94(v11);
    a2[6] = v13;
    if (v13) {
      uint64_t v8 = 0;
    }
    else {
      uint64_t v8 = 7;
    }
    *((_DWORD *)a2 + 14) = v11;
    if (v8) {
      return v8;
    }
  }
  uint64_t v14 = v12 % v11;
  if (!v14) {
    return v8;
  }
  uint64_t v15 = a2[1];
  if (*a2 + v11 - (int)v14 <= v15) {
    uint64_t v16 = (v11 - v14);
  }
  else {
    uint64_t v16 = v15 - *a2;
  }
  uint64_t v17 = v13 + v14;
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2[3] + 16);
  uint64_t v19 = a2[3];

  return v18(v19, v17, v16);
}

uint64_t sub_1B0D21950(uint64_t a1, unint64_t *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t v5 = *(void *)a1;
  if (v4) {
    goto LABEL_11;
  }
  uint64_t v6 = *(int *)(a1 + 56);
  v5 %= v6;
  int v7 = v6 - v5;
  if (v5) {
    BOOL v8 = v7 < 9;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    uint64_t v4 = *(void *)(a1 + 48);
LABEL_11:
    unsigned int v12 = sub_1B0CAD43C((char *)(v4 + v5), a2);
    uint64_t result = 0;
    *(void *)a1 += v12;
    return result;
  }
  int v9 = 0;
  uint64_t v13 = 0;
  while (1)
  {
    uint64_t result = sub_1B0D21CC0((uint64_t *)a1, 1, &v13);
    if (result) {
      break;
    }
    int v11 = *v13;
    v14[v9++ & 0xF] = *v13;
    if ((v11 & 0x80000000) == 0)
    {
      sub_1B0CAD43C(v14, a2);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1B0D21A4C(uint64_t a1)
{
  v15[0] = 0;
  if (*(void *)a1 < *(void *)(a1 + 8)) {
    goto LABEL_2;
  }
  uint64_t v5 = *(uint64_t ***)(a1 + 72);
  if (!v5) {
    goto LABEL_26;
  }
  if (!*((_DWORD *)v5 + 8))
  {
    uint64_t v8 = sub_1B0D21E68(*(void **)(a1 + 72));
    uint64_t v2 = v8;
    *(_OWORD *)(v5 + 5) = *(_OWORD *)(v5 + 7);
    if (v5[6] == v5[2]) {
      *((_DWORD *)v5 + 7) = 1;
    }
    if (v8) {
      goto LABEL_27;
    }
    goto LABEL_25;
  }
  uint64_t v6 = *v5;
  uint64_t v7 = **v5;
  if (v7)
  {
    if (*(void *)v7) {
      uint64_t v2 = (*(uint64_t (**)(void))v7)(*(void *)(v7 + 8));
    }
    else {
      uint64_t v2 = *(void *)(v7 + 16);
    }
    int v9 = &off_1EB21C9E8;
    if (dword_1EB21C9C0)
    {
      if ((void)xmmword_1EB2201B0) {
        xmmword_1EB21CA40(xmmword_1EB2201B0);
      }
      qword_1EB220108 -= (int)off_1EB21C9F8(v7);
      --qword_1EB220150;
      off_1EB21C9E8(v7);
      uint64_t v7 = xmmword_1EB2201B0;
      if (!(void)xmmword_1EB2201B0)
      {
LABEL_22:
        *((_DWORD *)v6 + 2) = 0;
        *uint64_t v6 = 0;
        if (v2)
        {
LABEL_27:
          sub_1B0D16DCC(a1);
          return v2;
        }
        goto LABEL_23;
      }
      int v9 = &xmmword_1EB21CA50;
    }
    (*v9)(v7);
    goto LABEL_22;
  }
LABEL_23:
  long long v10 = *(_OWORD *)(v5 + 5);
  *(_OWORD *)(v5 + 5) = *(_OWORD *)(v5 + 7);
  *(_OWORD *)(v5 + 7) = v10;
  if (v5[6] != v5[2])
  {
    int v11 = *v5;
    *unsigned int *v5 = 0;
    unsigned int v12 = (void *)sub_1B0C7FC94(24);
    if (!v12)
    {
      uint64_t v2 = 7;
      goto LABEL_27;
    }
    uint64_t v13 = v12;
    if (((int)v12 / 17))
    {
      void *v12 = sub_1B0D22070;
      v12[1] = v5;
    }
    else
    {
      void *v12 = 0;
      int v14 = sub_1B0D21E68(v5);
      *((_DWORD *)*v5 + 2) = 1;
      void v13[2] = v14;
    }
    *int v11 = (uint64_t)v13;
    if (*((_DWORD *)v5 + 7)) {
      goto LABEL_26;
    }
    goto LABEL_35;
  }
  *((_DWORD *)v5 + 7) = 1;
LABEL_25:
  if (*((_DWORD *)v5 + 7))
  {
LABEL_26:
    uint64_t v2 = 0;
    goto LABEL_27;
  }
LABEL_35:
  uint64_t v2 = sub_1B0D217D4((uint64_t)*v5, (uint64_t *)a1, (uint64_t *)v5 + 5, (uint64_t)v5[2]);
  if (v2) {
    return v2;
  }
LABEL_2:
  uint64_t v2 = sub_1B0D21950(a1, v15);
  if (v2) {
    return v2;
  }
  int v3 = v15[0];
  *(_DWORD *)(a1 + 20) = v15[0];

  return sub_1B0D21CC0((uint64_t *)a1, v3, (void *)(a1 + 40));
}

uint64_t sub_1B0D21CC0(uint64_t *a1, int a2, void *a3)
{
  uint64_t v6 = a1[8];
  uint64_t v7 = *a1;
  if (v6)
  {
    uint64_t result = 0;
    *a3 = v6 + v7;
    uint64_t v9 = v7 + a2;
LABEL_3:
    *a1 = v9;
    return result;
  }
  unsigned int v10 = *((_DWORD *)a1 + 14);
  uint64_t v11 = v7 % (int)v10;
  if (!v11)
  {
    uint64_t v20 = a1[1] - v7;
    if (v20 <= (int)v10) {
      uint64_t v21 = v20;
    }
    else {
      uint64_t v21 = v10;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[3] + 16))(a1[3], a1[6], v21);
    if (result) {
      return result;
    }
    unsigned int v10 = *((_DWORD *)a1 + 14);
  }
  int v12 = v10 - v11;
  int v13 = a2 - (v10 - v11);
  if (a2 <= (int)(v10 - v11))
  {
    uint64_t result = 0;
    *a3 = a1[6] + v11;
    uint64_t v9 = *a1 + a2;
    goto LABEL_3;
  }
  uint64_t v14 = *((int *)a1 + 4);
  if ((int)v14 >= a2)
  {
    uint64_t v19 = (void *)a1[4];
  }
  else
  {
    uint64_t v15 = 2 * v14;
    BOOL v16 = (int)v14 < 64;
    uint64_t v17 = 128;
    if (!v16) {
      uint64_t v17 = v15;
    }
    do
    {
      uint64_t v18 = v17;
      v17 *= 2;
    }
    while (v18 < a2);
    uint64_t v19 = (void *)sub_1B0C8E1B8(a1[4], v18);
    if (!v19) {
      return 7;
    }
    *((_DWORD *)a1 + 4) = v18;
    a1[4] = (uint64_t)v19;
  }
  memcpy(v19, (const void *)(a1[6] + v11), v12);
  *a1 += v12;
  if (v13 < 1)
  {
LABEL_27:
    uint64_t result = 0;
    *a3 = a1[4];
  }
  else
  {
    while (1)
    {
      __srCC_SHA256_CTX c = 0;
      int v22 = *((_DWORD *)a1 + 14);
      uint64_t v23 = v13 >= v22 ? v22 : v13;
      uint64_t result = sub_1B0D21CC0(a1, v23, &__src);
      if (result) {
        break;
      }
      memcpy((void *)(a1[4] + a2 - v13), __src, (int)v23);
      BOOL v24 = __OFSUB__(v13, v23);
      v13 -= v23;
      if ((v13 < 0) ^ v24 | (v13 == 0)) {
        goto LABEL_27;
      }
    }
  }
  return result;
}

uint64_t sub_1B0D21E68(void *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = a1[2];
  uint64_t v29 = a1[1];
  uint64_t v3 = a1[7];
  int v4 = *(_DWORD *)(*(void *)(*a1 + 16) + 12);
  uint64_t v31 = 0;
  long long v33 = 0u;
  long long v34 = 0u;
  uint64_t v32 = sub_1B0C7FC94(v4);
  if (v32)
  {
    DWORD1(v33) = v2 % v4;
    DWORD2(v33) = DWORD1(v33);
    LODWORD(v33) = v4;
    *(void *)&long long v34 = v2 / v4 * v4;
    *((void *)&v34 + 1) = v3;
  }
  else
  {
    LODWORD(v31) = 7;
  }
  uint64_t v27 = v2;
  uint64_t v28 = v1;
  do
  {
    uint64_t v6 = *(void *)(v29 + 24);
    int v7 = *(_DWORD *)(*(void *)(v29 + 16) + 4);
    uint64_t v8 = v6 + 80 * v7;
    if (!*(void *)(v8 + 24)) {
      goto LABEL_23;
    }
    int v9 = *(_DWORD *)(v8 + 20);
    int v10 = 1;
    if (v9 >= 0x80)
    {
      unint64_t v11 = v9;
      do
      {
        unint64_t v12 = v11 >> 14;
        v11 >>= 7;
        ++v10;
      }
      while (v12);
    }
    if ((uint64_t)v34 + v9 + SDWORD2(v33) + v10 > v2 + *((int *)v1 + 6))
    {
LABEL_23:
      sub_1B0D2102C((uint64_t)&v31, v1 + 8);
      return v24;
    }
    sub_1B0D20EDC((uint64_t)&v31, v9);
    if (v9 >= 1)
    {
      uint64_t v13 = *(void *)(v6 + 80 * v7 + 40);
      int v14 = v31;
      unsigned int v15 = DWORD1(v33);
      unsigned int v16 = DWORD2(v33);
      uint64_t v17 = (int)v33;
      uint64_t v18 = v32;
      uint64_t v19 = *((void *)&v34 + 1);
      uint64_t v20 = v34;
      int v21 = v9;
      while (!v14)
      {
        if (v21 >= (int)(v17 - v16)) {
          int v23 = v17 - v16;
        }
        else {
          int v23 = v21;
        }
        memcpy((void *)(v18 + (int)v16), (const void *)(v13 + v9 - v21), v23);
        v16 += v23;
        if (v16 == v17)
        {
          int v14 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)v19 + 24))(v19, v18 + (int)v15, v17 - v15, v20 + (int)v15);
          unsigned int v15 = 0;
          unsigned int v16 = 0;
          v20 += v17;
          BOOL v22 = __OFSUB__(v21, v23);
          v21 -= v23;
          if ((v21 < 0) ^ v22 | (v21 == 0)) {
            break;
          }
        }
        else
        {
          int v14 = 0;
          BOOL v22 = __OFSUB__(v21, v23);
          v21 -= v23;
          if ((v21 < 0) ^ v22 | (v21 == 0)) {
            break;
          }
        }
      }
      *(void *)((char *)&v33 + 4) = __PAIR64__(v16, v15);
      LODWORD(v31) = v14;
      *(void *)&long long v34 = v20;
      uint64_t v2 = v27;
      uint64_t v1 = v28;
    }
    uint64_t v5 = sub_1B0D220A4(v1[1], &v30);
  }
  while (!v5);
  uint64_t v25 = v5;
  sub_1B0D2102C((uint64_t)&v31, v1 + 8);
  return v25;
}

uint64_t sub_1B0D22070(void *a1)
{
  uint64_t result = (int)sub_1B0D21E68(a1);
  *(_DWORD *)(*a1 + 8) = 1;
  return result;
}

uint64_t sub_1B0D220A4(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  int v5 = *(_DWORD *)(*(void *)(a1 + 16) + 4);
  uint64_t result = sub_1B0D21A4C(*(void *)(a1 + 24) + 80 * v5);
  if (!result)
  {
    int v7 = v5;
    int v19 = 0;
    int v8 = *(_DWORD *)a1 + v5;
    if (v8 >= 2)
    {
      unsigned int v9 = v8 >> 1;
      uint64_t v10 = *(void *)(a1 + 24);
      unint64_t v11 = v10 + 80 * (v7 | 1);
      unint64_t v12 = v10 + 80 * ((unsigned __int16)v7 & 0xFFFE);
      do
      {
        if (*(void *)(v12 + 24))
        {
          if (!*(void *)(v11 + 24)) {
            goto LABEL_4;
          }
          int v16 = (*(uint64_t (**)(uint64_t, int *, void, void, void, void))(v4 + 64))(v4, &v19, *(void *)(v12 + 40), *(unsigned int *)(v12 + 20), *(void *)(v11 + 40), *(unsigned int *)(v11 + 20));
          if (v16 < 0) {
            goto LABEL_4;
          }
        }
        else
        {
          int v16 = 1;
        }
        if (v16 || v12 >= v11)
        {
          if (*(void *)(v12 + 24)) {
            int v19 = 0;
          }
          uint64_t v18 = *(void *)(a1 + 16);
          uint64_t v17 = *(void *)(a1 + 24);
          *(_DWORD *)(v18 + 4 * v9) = -858993459 * ((v11 - v17) >> 4);
          unint64_t v12 = v17 + 80 * *(int *)(v18 + 4 * (v9 ^ 1));
          goto LABEL_5;
        }
LABEL_4:
        uint64_t v14 = *(void *)(a1 + 16);
        uint64_t v13 = *(void *)(a1 + 24);
        *(_DWORD *)(v14 + 4 * v9) = -858993459 * ((v12 - v13) >> 4);
        unint64_t v11 = v13 + 80 * *(int *)(v14 + 4 * (v9 ^ 1));
        int v19 = 0;
LABEL_5:
        BOOL v15 = v9 > 1;
        v9 >>= 1;
      }
      while (v15);
    }
    *a2 = *(void *)(*(void *)(a1 + 24) + 80 * *(int *)(*(void *)(a1 + 16) + 4) + 24) == 0;
    return *(unsigned __int8 *)(*(void *)(v4 + 24) + 31);
  }
  return result;
}

uint64_t sub_1B0D22230(uint64_t a1)
{
  uint64_t result = (int)sub_1B0D212AC(a1, 1);
  *(_DWORD *)(**(void **)(a1 + 72) + 8) = 1;
  return result;
}

uint64_t sub_1B0D2226C(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void **)(result + 8);
  uint64_t v3 = *(void *)(result + 16);
  *(void *)(result + 8) = 0;
  if (v3)
  {
    uint64_t v4 = &off_1EB21C9E8;
    if (!dword_1EB21C9C0)
    {
LABEL_7:
      uint64_t result = (*v4)(v3);
      goto LABEL_8;
    }
    if ((void)xmmword_1EB2201B0) {
      xmmword_1EB21CA40(xmmword_1EB2201B0);
    }
    qword_1EB220108 -= (int)off_1EB21C9F8(v3);
    --qword_1EB220150;
    uint64_t result = off_1EB21C9E8(v3);
    uint64_t v3 = xmmword_1EB2201B0;
    if ((void)xmmword_1EB2201B0)
    {
      uint64_t v4 = &xmmword_1EB21CA50;
      goto LABEL_7;
    }
  }
LABEL_8:
  *(void *)(v1 + 16) = 0;
  *(_DWORD *)uint64_t v1 = 0;
  if (v2)
  {
    do
    {
      int v5 = (void *)*v2;
      uint64_t v6 = &off_1EB21C9E8;
      if (dword_1EB21C9C0)
      {
        if ((void)xmmword_1EB2201B0) {
          xmmword_1EB21CA40(xmmword_1EB2201B0);
        }
        qword_1EB220108 -= (int)off_1EB21C9F8(v2);
        --qword_1EB220150;
        uint64_t result = off_1EB21C9E8(v2);
        uint64_t v2 = (void *)xmmword_1EB2201B0;
        if (!(void)xmmword_1EB2201B0) {
          goto LABEL_11;
        }
        uint64_t v6 = &xmmword_1EB21CA50;
      }
      uint64_t result = (*v6)(v2);
LABEL_11:
      uint64_t v2 = v5;
    }
    while (v5);
  }
  *(_DWORD *)(v1 + 4) = 0;
  return result;
}

uint64_t sub_1B0D223C0(uint64_t result, unsigned int a2)
{
  *(unsigned char *)(result + 100) = a2;
  uint64_t v2 = *(void *)(result + 656);
  if (!v2)
  {
    uint64_t v4 = (uint64_t *)(result + 648);
    int v5 = *(_DWORD *)(result + 644);
    if (!v5) {
      goto LABEL_12;
    }
LABEL_3:
    uint64_t v4 = (uint64_t *)*v4;
    uint64_t v6 = (unsigned char *)v4[3];
    for (unsigned int i = "BINARY"; ; ++i)
    {
      uint64_t v8 = *v6;
      uint64_t v9 = *(unsigned __int8 *)i;
      if (v8 == v9)
      {
        if (!*v6) {
          goto LABEL_13;
        }
      }
      else if (byte_1B0DE1758[v8] != byte_1B0DE1758[v9])
      {
        if (!--v5)
        {
          uint64_t v4 = &qword_1E9B52220;
          goto LABEL_13;
        }
        goto LABEL_3;
      }
      ++v6;
    }
  }
  uint64_t v3 = (_DWORD *)(v2 + 16 * (0x2EB35835u % *(_DWORD *)(result + 640)));
  uint64_t v4 = (uint64_t *)(v3 + 2);
  int v5 = *v3;
  if (v5) {
    goto LABEL_3;
  }
LABEL_12:
  uint64_t v4 = &qword_1E9B52220;
LABEL_13:
  uint64_t v10 = v4[2];
  if (v10) {
    uint64_t v11 = v10 + 40 * a2 - 40;
  }
  else {
    uint64_t v11 = 0;
  }
  *(void *)(result + 16) = v11;
  for (uint64_t j = *(void *)(result + 8); j; uint64_t j = *(void *)(j + 16))
    *(_WORD *)(j + 268) = *(_WORD *)(j + 268) & 0xFFFC | 2;
  return result;
}

void *sub_1B0D224B0(uint64_t a1, unsigned int a2, char *__s, int a4)
{
  if (!__s) {
    return *(void **)(a1 + 16);
  }
  uint64_t v7 = *(void *)(a1 + 656);
  if (v7)
  {
    int v8 = *__s;
    if (*__s)
    {
      unsigned int v9 = 0;
      uint64_t v10 = __s + 1;
      do
      {
        unsigned int v9 = -1640531535 * (v9 + byte_1B0DE1758[v8]);
        int v11 = *v10++;
        int v8 = v11;
      }
      while (v11);
    }
    else
    {
      unsigned int v9 = 0;
    }
    int v19 = (_DWORD *)(v7 + 16 * (v9 % *(_DWORD *)(a1 + 640)));
    uint64_t v13 = (uint64_t *)(v19 + 2);
    int v14 = *v19;
    if (v14)
    {
      while (1)
      {
LABEL_19:
        uint64_t v13 = (uint64_t *)*v13;
        uint64_t v20 = (unsigned char *)v13[3];
        for (unsigned int i = __s; ; ++i)
        {
          uint64_t v22 = *v20;
          uint64_t v23 = *i;
          if (v22 != v23) {
            break;
          }
          if (!*v20) {
            goto LABEL_10;
          }
LABEL_21:
          ++v20;
        }
        if (byte_1B0DE1758[v22] == byte_1B0DE1758[v23]) {
          goto LABEL_21;
        }
        if (!--v14)
        {
          uint64_t v13 = &qword_1E9B52220;
          goto LABEL_10;
        }
      }
    }
  }
  else
  {
    uint64_t v13 = (uint64_t *)(a1 + 648);
    int v14 = *(_DWORD *)(a1 + 644);
    if (v14) {
      goto LABEL_19;
    }
  }
  uint64_t v13 = &qword_1E9B52220;
LABEL_10:
  BOOL v15 = (void *)v13[2];
  if (!a4 || v15)
  {
    if (!v15) {
      return 0;
    }
  }
  else
  {
    int v16 = strlen(__s);
    uint64_t v17 = v16 & 0x3FFFFFFF;
    unint64_t v18 = v17 + 121;
    if (a1)
    {
      BOOL v15 = (void *)sub_1B0D05DC0(a1, v18);
      if (!v15) {
        return 0;
      }
    }
    else
    {
      BOOL v15 = (void *)sub_1B0C7FC94((v16 & 0x3FFFFFFF) + 121);
      if (!v15) {
        return 0;
      }
    }
    bzero(v15, v18);
    *BOOL v15 = v15 + 15;
    *((unsigned char *)v15 + 8) = 1;
    v15[5] = v15 + 15;
    *((unsigned char *)v15 + 48) = 2;
    v15[10] = v15 + 15;
    *((unsigned char *)v15 + 88) = 3;
    memcpy(v15 + 15, __s, v17 + 1);
    uint64_t v24 = sub_1B0C796D8(a1 + 640, (unsigned __int8 *)v15 + 120, (uint64_t)v15);
    if (v24)
    {
      uint64_t v31 = (void *)v24;
      if (!*(unsigned char *)(a1 + 103) && !*(unsigned char *)(a1 + 104))
      {
        *(unsigned char *)(a1 + 103) = 1;
        if (*(int *)(a1 + 220) >= 1) {
          *(_DWORD *)(a1 + 424) = 1;
        }
        ++*(_DWORD *)(a1 + 432);
        *(_WORD *)(a1 + 436) = 0;
        uint64_t v32 = *(void *)(a1 + 344);
        if (v32)
        {
          sub_1B0CEF2BC(v32, "out of memory", v25, v26, v27, v28, v29, v30, v34);
          for (uint64_t j = *(void *)(a1 + 344); ; ++*(_DWORD *)(j + 48))
          {
            *(_DWORD *)(j + 24) = 7;
            uint64_t j = *(void *)(j + 256);
            if (!j) {
              break;
            }
          }
        }
      }
      sub_1B0D05C10((void *)a1, v31);
      return 0;
    }
  }
  return &v15[5 * a2 - 5];
}

uint64_t sub_1B0D22710(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v7 = (uint64_t *)(a1 + 8);
    int v8 = *(_DWORD *)(a1 + 4);
    if (v8) {
      goto LABEL_10;
    }
    return qword_1E9B52230;
  }
  int v3 = *a2;
  if (*a2)
  {
    unsigned int v4 = 0;
    int v5 = a2 + 1;
    do
    {
      unsigned int v4 = -1640531535 * (v4 + byte_1B0DE1758[v3]);
      int v6 = *v5++;
      int v3 = v6;
    }
    while (v6);
  }
  else
  {
    unsigned int v4 = 0;
  }
  uint64_t v10 = (_DWORD *)(v2 + 16 * (v4 % *(_DWORD *)a1));
  uint64_t v7 = (uint64_t *)(v10 + 2);
  int v8 = *v10;
  if (!v8) {
    return qword_1E9B52230;
  }
  do
  {
LABEL_10:
    uint64_t v7 = (uint64_t *)*v7;
    int v11 = (unsigned char *)v7[3];
    for (unsigned int i = a2; ; ++i)
    {
      uint64_t v13 = *v11;
      uint64_t v14 = *i;
      if (v13 != v14) {
        break;
      }
      if (!*v11) {
        return v7[2];
      }
LABEL_12:
      ++v11;
    }
    if (byte_1B0DE1758[v13] == byte_1B0DE1758[v14]) {
      goto LABEL_12;
    }
    --v8;
  }
  while (v8);
  uint64_t v7 = &qword_1E9B52220;
  return v7[2];
}

uint64_t sub_1B0D227EC(uint64_t result, void *a2, unsigned char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = result;
  uint64_t v9 = *(void *)result;
  if (*(unsigned char *)(*(void *)result + 103))
  {
    uint64_t result = 7;
LABEL_3:
    *(_DWORD *)(v8 + 20) = result;
    return result;
  }
  if (!**(void **)(result + 8))
  {
    if ((*(_DWORD *)(result + 24) & 3) != 0)
    {
      **(void **)(result + 8) = sub_1B0C904AC(v9, "error in %s %s after %s: %s", (uint64_t)a3, a4, a5, a6, a7, a8, *a2);
      uint64_t result = 1;
    }
    else
    {
      if (*(unsigned char *)(v9 + 48))
      {
        int v19 = 147860;
      }
      else
      {
        int v11 = (const char *)a2[1];
        if (!v11) {
          int v11 = "?";
        }
        unint64_t v12 = sub_1B0C904AC(v9, "malformed database schema (%s)", (uint64_t)a3, a4, a5, a6, a7, a8, (char)v11);
        if (a3)
        {
          if (*a3) {
            unint64_t v12 = sub_1B0C904AC(v9, "%z - %s", v13, v14, v15, v16, v17, v18, (char)v12);
          }
        }
        **(void **)(v8 + 8) = v12;
        int v19 = 147867;
      }
      uint64_t result = sub_1B0D1045C(v19);
    }
    goto LABEL_3;
  }
  return result;
}

uint64_t sub_1B0D22904(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 < 1) {
    return 0;
  }
  unsigned int v4 = 0;
  uint64_t v5 = *(void *)(a1 + 32);
  while (1)
  {
    uint64_t v8 = v4 ^ (v4 < 2);
    uint64_t v9 = *(void *)(v5 + 32 * v8 + 24);
    if (!a3) {
      break;
    }
    uint64_t v10 = *(unsigned char **)(v5 + 32 * v8);
    for (unsigned int i = a3; ; ++i)
    {
      uint64_t v12 = *v10;
      uint64_t v13 = *i;
      if (v12 != v13) {
        break;
      }
      if (!*v10) {
        goto LABEL_12;
      }
LABEL_9:
      ++v10;
    }
    if (byte_1B0DE1758[v12] == byte_1B0DE1758[v13]) {
      goto LABEL_9;
    }
    if (!v8)
    {
      int v19 = "main";
      for (uint64_t j = a3; ; ++j)
      {
        uint64_t v21 = *(unsigned __int8 *)v19;
        uint64_t v22 = *j;
        if (v21 == v22)
        {
          if (!*v19) {
            goto LABEL_12;
          }
        }
        else if (byte_1B0DE1758[v21] != byte_1B0DE1758[v22])
        {
          break;
        }
        ++v19;
      }
    }
LABEL_5:
    if (++v4 == v3) {
      return 0;
    }
  }
LABEL_12:
  uint64_t v14 = *(void *)(v9 + 48);
  if (v14)
  {
    int v15 = *a2;
    if (*a2)
    {
      unsigned int v16 = 0;
      uint64_t v17 = a2 + 1;
      do
      {
        unsigned int v16 = -1640531535 * (v16 + byte_1B0DE1758[v15]);
        int v18 = *v17++;
        int v15 = v18;
      }
      while (v18);
    }
    else
    {
      unsigned int v16 = 0;
    }
    uint64_t v24 = (_DWORD *)(v14 + 16 * (v16 % *(_DWORD *)(v9 + 32)));
    int v6 = (uint64_t *)(v24 + 2);
    int v23 = *v24;
    if (!v23) {
      goto LABEL_3;
    }
    while (1)
    {
LABEL_28:
      int v6 = (uint64_t *)*v6;
      uint64_t v25 = (unsigned char *)v6[3];
      for (uint64_t k = a2; ; ++k)
      {
        uint64_t v27 = *v25;
        uint64_t v28 = *k;
        if (v27 != v28) {
          break;
        }
        if (!*v25) {
          goto LABEL_4;
        }
LABEL_30:
        ++v25;
      }
      if (byte_1B0DE1758[v27] == byte_1B0DE1758[v28]) {
        goto LABEL_30;
      }
      if (!--v23) {
        goto LABEL_3;
      }
    }
  }
  int v6 = (uint64_t *)(v9 + 40);
  int v23 = *(_DWORD *)(v9 + 36);
  if (v23) {
    goto LABEL_28;
  }
LABEL_3:
  int v6 = &qword_1E9B52220;
LABEL_4:
  uint64_t result = v6[2];
  if (!result) {
    goto LABEL_5;
  }
  return result;
}

void *sub_1B0D22AA4(void *result)
{
  uint64_t v1 = result[76];
  if (v1)
  {
    result[76] = 0;
    for (uint64_t i = result[1]; i; uint64_t i = *(void *)(i + 16))
      *(_WORD *)(i + 268) = *(_WORD *)(i + 268) & 0xFFFC | 1;
    do
    {
      uint64_t v3 = *(void *)(v1 + 40);
      unsigned int v4 = *(void **)v1;
      int v5 = *(_DWORD *)(v1 + 24) - 1;
      *(_DWORD *)(v1 + 24) = v5;
      if (!v5)
      {
        uint64_t v6 = *(void *)(v1 + 16);
        uint64_t v7 = v4;
        if (v6)
        {
          (*(void (**)(uint64_t))(*(void *)v6 + 32))(v6);
          uint64_t v7 = *(void **)v1;
        }
        uint64_t v8 = *(void *)(v1 + 8);
        int v9 = *(_DWORD *)(v8 + 16) - 1;
        *(_DWORD *)(v8 + 16) = v9;
        if (!v9)
        {
          uint64_t v10 = *(void (**)(void))(v8 + 32);
          if (v10) {
            v10(*(void *)(v8 + 24));
          }
          sub_1B0D05C10(v7, (void *)v8);
        }
        uint64_t result = sub_1B0D05C10(v4, (void *)v1);
      }
      uint64_t v1 = v3;
    }
    while (v3);
  }
  return result;
}

void *sub_1B0D22B7C(uint64_t a1)
{
  unsigned int v2 = *(unsigned __int16 *)(a1 + 94);
  if (v2 >= 5) {
    unsigned int v3 = 5;
  }
  else {
    unsigned int v3 = *(unsigned __int16 *)(a1 + 94);
  }
  int v5 = *(_WORD **)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  int v6 = *(__int16 *)(v4 + 58);
  if (v6 <= 98)
  {
    LOWORD(v6) = 99;
    *(_WORD *)(v4 + 58) = 99;
  }
  if (*(void *)(a1 + 72)) {
    LOWORD(v6) = v6 - 10;
  }
  _WORD *v5 = v6;
  uint64_t result = memcpy(v5 + 1, &unk_1B0DE2214, 2 * (v3 & 0x7FFF));
  LODWORD(v8) = *(unsigned __int16 *)(a1 + 94);
  if (v3 < v8)
  {
    if (v2 >= 5) {
      unint64_t v9 = 5;
    }
    else {
      unint64_t v9 = v2;
    }
    do
    {
      v5[v9 + 1] = 23;
      unint64_t v8 = *(unsigned __int16 *)(a1 + 94);
      ++v9;
    }
    while (v9 < v8);
  }
  if (*(unsigned char *)(a1 + 98)) {
    v5[v8] = 0;
  }
  return result;
}

unsigned __int8 *sub_1B0D22C38(unsigned __int8 *result, int a2, uint64_t a3, uint64_t a4)
{
  int v5 = result;
  unsigned int v6 = *result;
  if (*result) {
    BOOL v7 = a2 < 1;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    unint64_t v16 = 0;
    do
    {
      if (v6 - 48 <= 9)
      {
        unint64_t v19 = 0;
        do
        {
          unint64_t v19 = 10 * v19 + v6 - 48;
          unsigned int v20 = *++v5;
          unsigned int v6 = v20;
        }
        while (v20 - 48 < 0xA);
        if (v19 >= 8)
        {
          __int16 v21 = 40;
          if (v19 >= 0x100)
          {
            unint64_t v23 = v19;
            do
            {
              v21 += 40;
              unint64_t v19 = v23 >> 4;
              BOOL v7 = v23 > 0xFFF;
              v23 >>= 4;
            }
            while (v7);
          }
          LOBYTE(v22) = v19;
          if (v19 >= 0x10)
          {
            do
            {
              v21 += 10;
              unint64_t v22 = v19 >> 1;
              BOOL v7 = v19 > 0x1F;
              v19 >>= 1;
            }
            while (v7);
          }
          goto LABEL_54;
        }
        if (v19 >= 2)
        {
          __int16 v21 = 40;
          do
          {
            v21 -= 10;
            LOBYTE(v22) = 2 * v19;
            BOOL v18 = v19 >= 4;
            v19 *= 2;
          }
          while (!v18);
LABEL_54:
          __int16 v17 = v21 + word_1B0DE8C5A[v22 & 7] - 10;
          goto LABEL_34;
        }
      }
      __int16 v17 = 0;
LABEL_34:
      *(_WORD *)(a3 + 2 * v16) = v17;
      if (*v5 == 32) {
        ++v5;
      }
      ++v16;
      unsigned int v6 = *v5;
      if (*v5) {
        BOOL v18 = v16 >= a2;
      }
      else {
        BOOL v18 = 1;
      }
    }
    while (!v18);
  }
  *(_WORD *)(a4 + 99) &= 0xFFBBu;
  if (*v5)
  {
    while (1)
    {
      uint64_t result = (unsigned __int8 *)sub_1B0CD1228("unordered*", (const char *)v5, byte_1B0DE1965, 91);
      if (!result) {
        break;
      }
      if (!sub_1B0CD1228("sz=[0-9]*", (const char *)v5, byte_1B0DE1965, 91))
      {
        int v24 = 0;
        uint64_t result = (unsigned __int8 *)sub_1B0D22EF0(v5 + 3, &v24);
        if (v24 <= 2) {
          unint64_t v9 = 2;
        }
        else {
          unint64_t v9 = v24;
        }
        __int16 v10 = 40;
        if (v9 > 7)
        {
          if (v9 >= 0x100)
          {
            unint64_t v12 = v9;
            do
            {
              v10 += 40;
              unint64_t v9 = v12 >> 4;
              BOOL v7 = v12 > 0xFFF;
              v12 >>= 4;
            }
            while (v7);
          }
          LOBYTE(v11) = v9;
          if (v9 >= 0x10)
          {
            do
            {
              v10 += 10;
              unint64_t v11 = v9 >> 1;
              BOOL v7 = v9 > 0x1F;
              v9 >>= 1;
            }
            while (v7);
          }
        }
        else
        {
          do
          {
            v10 -= 10;
            LOBYTE(v11) = 2 * v9;
            BOOL v18 = v9 >= 4;
            v9 *= 2;
          }
          while (!v18);
        }
        *(_WORD *)(a4 + 92) = v10 + word_1B0DE8C5A[v11 & 7] - 10;
        goto LABEL_26;
      }
      uint64_t result = (unsigned __int8 *)sub_1B0CD1228("noskipscan*", (const char *)v5, byte_1B0DE1965, 91);
      if (!result)
      {
        __int16 v8 = *(_WORD *)(a4 + 99) | 0x40;
LABEL_12:
        *(_WORD *)(a4 + 99) = v8;
      }
LABEL_26:
      uint64_t v13 = v5 - 1;
      while ((*v5 | 0x20) != 0x20)
      {
        ++v5;
        ++v13;
      }
      int v5 = v13;
      do
      {
        int v15 = *++v5;
        int v14 = v15;
      }
      while (v15 == 32);
      if (!v14) {
        return result;
      }
    }
    __int16 v8 = *(_WORD *)(a4 + 99) | 4;
    goto LABEL_12;
  }
  return result;
}

uint64_t sub_1B0D22EF0(unsigned __int8 *a1, _DWORD *a2)
{
  int v2 = *a1;
  switch(v2)
  {
    case '-':
      ++a1;
      uint64_t v3 = -1;
      break;
    case '0':
      if ((a1[1] | 0x20) == 0x78 && (byte_1B0DE196D[a1[2]] & 8) != 0)
      {
        do
        {
          uint64_t v16 = a1[2];
          ++a1;
        }
        while (v16 == 48);
        if ((byte_1B0DE196D[v16] & 8) != 0)
        {
          unsigned int v17 = ((((char)(2 * v16) >> 7) & 0xF9) + (_BYTE)v16) & 0xF;
          uint64_t v21 = a1[2];
          if ((byte_1B0DE196D[v21] & 8) != 0)
          {
            unsigned int v17 = ((((char)(2 * v21) >> 7) & 0xF9) + (_BYTE)v21) & 0xF | (16 * v17);
            uint64_t v22 = a1[3];
            if ((byte_1B0DE196D[v22] & 8) != 0)
            {
              unsigned int v17 = ((((char)(2 * v22) >> 7) & 0xF9) + (_BYTE)v22) & 0xF | (16 * v17);
              uint64_t v23 = a1[4];
              if ((byte_1B0DE196D[v23] & 8) != 0)
              {
                unsigned int v17 = ((((char)(2 * v23) >> 7) & 0xF9) + (_BYTE)v23) & 0xF | (16 * v17);
                uint64_t v24 = a1[5];
                if ((byte_1B0DE196D[v24] & 8) != 0)
                {
                  unsigned int v17 = ((((char)(2 * v24) >> 7) & 0xF9) + (_BYTE)v24) & 0xF | (16 * v17);
                  uint64_t v25 = a1[6];
                  if ((byte_1B0DE196D[v25] & 8) != 0)
                  {
                    unsigned int v17 = ((((char)(2 * v25) >> 7) & 0xF9) + (_BYTE)v25) & 0xF | (16 * v17);
                    uint64_t v26 = a1[7];
                    if ((byte_1B0DE196D[v26] & 8) != 0)
                    {
                      unsigned int v17 = ((((char)(2 * v26) >> 7) & 0xF9) + (_BYTE)v26) & 0xF | (16 * v17);
                      uint64_t v27 = a1[8];
                      if ((byte_1B0DE196D[v27] & 8) != 0)
                      {
                        unsigned int v28 = ((((char)(2 * v27) >> 7) & 0xF9) + (_BYTE)v27) & 0xF | (16 * v17);
                        if (((16 * v17) & 0x80000000) != 0) {
                          return 0;
                        }
                        uint64_t v18 = 8;
                        unsigned int v17 = v28;
                      }
                      else
                      {
                        uint64_t v18 = 7;
                      }
                    }
                    else
                    {
                      uint64_t v18 = 6;
                    }
                  }
                  else
                  {
                    uint64_t v18 = 5;
                  }
                }
                else
                {
                  uint64_t v18 = 4;
                }
              }
              else
              {
                uint64_t v18 = 3;
              }
            }
            else
            {
              uint64_t v18 = 2;
            }
          }
          else
          {
            uint64_t v18 = 1;
          }
        }
        else
        {
          unsigned int v17 = 0;
          uint64_t v18 = 0;
        }
        if ((byte_1B0DE196D[a1[v18 + 1]] & 8) != 0) {
          return 0;
        }
        *a2 = v17;
        return 1;
      }
      uint64_t v3 = 0;
      break;
    case '+':
      uint64_t v3 = 0;
      ++a1;
      break;
    default:
      uint64_t v3 = 0;
      unsigned int v4 = *a1;
      goto LABEL_10;
  }
  unsigned int v4 = *a1;
LABEL_10:
  if ((unint64_t)v4 - 58 < 0xFFFFFFFFFFFFFFF6) {
    return 0;
  }
  if (v4 == 48)
  {
    do
    {
      unsigned int v5 = *++a1;
      unsigned int v4 = v5;
    }
    while (v5 == 48);
  }
  if (v4 - 48 >= 0xA)
  {
    uint64_t v6 = 0;
    goto LABEL_29;
  }
  uint64_t v6 = v4 - 48;
  int v7 = a1[1];
  if ((v7 - 48) > 9) {
    goto LABEL_29;
  }
  uint64_t v6 = (v7 - 48) + 10 * v6;
  int v8 = a1[2];
  if ((v8 - 48) > 9) {
    goto LABEL_29;
  }
  uint64_t v6 = (v8 - 48) + 10 * v6;
  int v9 = a1[3];
  if ((v9 - 48) > 9) {
    goto LABEL_29;
  }
  uint64_t v6 = (v9 - 48) + 10 * v6;
  int v10 = a1[4];
  if ((v10 - 48) > 9) {
    goto LABEL_29;
  }
  uint64_t v6 = (v10 - 48) + 10 * v6;
  int v11 = a1[5];
  if ((v11 - 48) > 9) {
    goto LABEL_29;
  }
  uint64_t v6 = (v11 - 48) + 10 * v6;
  int v12 = a1[6];
  if ((v12 - 48) > 9) {
    goto LABEL_29;
  }
  uint64_t v6 = (v12 - 48) + 10 * v6;
  int v13 = a1[7];
  if ((v13 - 48) > 9) {
    goto LABEL_29;
  }
  uint64_t v6 = (v13 - 48) + 10 * v6;
  int v14 = a1[8];
  if ((v14 - 48) > 9) {
    goto LABEL_29;
  }
  uint64_t v6 = (v14 - 48) + 10 * v6;
  int v15 = a1[9];
  if ((v15 - 48) > 9) {
    goto LABEL_29;
  }
  if (a1[10] - 48 < 0xA) {
    return 0;
  }
  uint64_t v6 = (v15 - 48) + 10 * v6;
LABEL_29:
  if (v6 + v3 > 0x7FFFFFFF) {
    return 0;
  }
  if (v2 == 45) {
    int v20 = -(int)v6;
  }
  else {
    int v20 = v6;
  }
  *a2 = v20;
  return 1;
}

void *sub_1B0D23288(void *a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int8 **)(a2 + 72);
  if (v4) {
    sub_1B0D1DF88(a1, v4);
  }
  unsigned int v5 = *(void **)(a2 + 80);
  if (v5) {
    sub_1B0D270DC(a1, v5);
  }
  uint64_t v6 = *(void **)(a2 + 32);
  if (v6) {
    sub_1B0D05C10(a1, v6);
  }
  if ((*(_WORD *)(a2 + 99) & 0x10) != 0)
  {
    int v7 = *(void **)(a2 + 64);
    if (v7) {
      sub_1B0D05C10(a1, v7);
    }
  }

  return sub_1B0D05C10(a1, (void *)a2);
}

void sub_1B0D2330C(uint64_t a1, int a2, uint64_t a3, int a4)
{
  int v4 = a2;
  int v27 = *(_DWORD *)(a1 + 32);
  int v6 = a4;
  if (a3)
  {
    uint64_t v7 = a3;
    int v8 = "invalid page number %u";
    int v6 = a4;
    while (*(_DWORD *)(a1 + 28))
    {
      if ((v7 - 1) >= *(_DWORD *)(a1 + 24)) {
        goto LABEL_32;
      }
      uint64_t v9 = *(void *)(a1 + 16);
      unint64_t v10 = (unint64_t)v7 >> 3;
      int v11 = *(unsigned __int8 *)(v9 + v10);
      int v12 = 1 << (v7 & 7);
      if ((v12 & v11) != 0)
      {
        sub_1B0D23628(a1, "2nd reference to page %u");
        break;
      }
      *(unsigned char *)(v9 + v10) = v11 | v12;
      int v13 = v6 - 1;
      if ((*(unsigned int (**)(void))(*(void *)(a1 + 8) + 288))())
      {
        int v8 = "failed to get page %u";
        --v6;
LABEL_32:
        sub_1B0D23628(a1, v8, v7);
        break;
      }
      int v14 = (unsigned int *)MEMORY[8];
      if (v4)
      {
        unsigned int v15 = *(_DWORD *)(MEMORY[8] + 4);
        uint64_t v16 = *(void *)a1;
        if (*(unsigned char *)(*(void *)a1 + 33))
        {
          sub_1B0D23784(a1, v7, 2, 0);
          uint64_t v16 = *(void *)a1;
        }
        uint64_t v17 = bswap32(v15);
        if (v17 <= (*(_DWORD *)(v16 + 56) >> 2) - 2)
        {
          if ((int)v17 >= 1)
          {
            uint64_t v18 = (unsigned __int8 *)v14 + 11;
            uint64_t v19 = v17;
            do
            {
              int v20 = *(v18 - 1);
              unsigned int v21 = *v18;
              unint64_t v22 = (*(v18 - 3) << 24) | (*(v18 - 2) << 16) | (v20 << 8) | v21;
              if (*(unsigned char *)(*(void *)a1 + 33)) {
                sub_1B0D23784(a1, (*(v18 - 3) << 24) | (*(v18 - 2) << 16) | (v20 << 8) | v21, 2, 0);
              }
              if ((v22 - 1) >= *(_DWORD *)(a1 + 24))
              {
                sub_1B0D23628(a1, "invalid page number %u");
              }
              else
              {
                uint64_t v23 = *(void *)(a1 + 16);
                int v24 = *(unsigned __int8 *)(v23 + (v22 >> 3));
                int v25 = 1 << (v21 & 7);
                if ((v25 & v24) != 0) {
                  sub_1B0D23628(a1, "2nd reference to page %u");
                }
                else {
                  *(unsigned char *)(v23 + (v22 >> 3)) = v24 | v25;
                }
              }
              v18 += 4;
              --v19;
            }
            while (v19);
          }
          int v6 = v13 - v17;
        }
        else
        {
          sub_1B0D23628(a1, "freelist leaf count too big on page %u", v7);
          v6 -= 2;
        }
        int v4 = a2;
      }
      else
      {
        if (*(unsigned char *)(*(void *)a1 + 33) && v6 != 1) {
          sub_1B0D23784(a1, bswap32(*MEMORY[8]), 4, v7);
        }
        --v6;
      }
      uint64_t v7 = bswap32(*v14);
      if (!v7) {
        break;
      }
    }
  }
  if (v6 && v27 == *(_DWORD *)(a1 + 32))
  {
    uint64_t v26 = "size";
    if (!v4) {
      uint64_t v26 = "overflow list length";
    }
    sub_1B0D23628(a1, "%s is %u but should be %u", v26, a4 - v6, a4);
  }
}

void sub_1B0D23628(uint64_t a1, char *zFormat, ...)
{
  va_start(va, zFormat);
  uint64_t v4 = *(void *)(a1 + 112);
  if (*(_DWORD *)(v4 + 424))
  {
    ++*(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 36) = 9;
    *(_DWORD *)(a1 + 28) = 0;
  }
  unsigned int v5 = *(unsigned int (**)(void))(v4 + 544);
  if (v5)
  {
    unsigned int v6 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 40) = v6;
    if (!(v6 % *(_DWORD *)(v4 + 560)))
    {
      if (v5(*(void *)(v4 + 552)))
      {
        ++*(_DWORD *)(a1 + 32);
        *(_DWORD *)(a1 + 36) = 9;
        *(_DWORD *)(a1 + 28) = 0;
      }
    }
  }
  int v7 = *(_DWORD *)(a1 + 28);
  if (v7)
  {
    int v8 = *(_DWORD *)(a1 + 32) + 1;
    *(_DWORD *)(a1 + 28) = v7 - 1;
    *(_DWORD *)(a1 + 32) = v8;
    va_copy(v11, va);
    uint64_t v9 = *(unsigned int *)(a1 + 96);
    if (v9)
    {
      if ((v9 + 1) >= *(_DWORD *)(a1 + 88))
      {
        sub_1B0CE62B0(a1 + 72, "\n", 1u);
        unint64_t v10 = *(const char **)(a1 + 48);
        if (!v10)
        {
LABEL_13:
          sqlite3_str_vappendf((sqlite3_str *)(a1 + 72), zFormat, v11);
          if (*(unsigned char *)(a1 + 100) == 7)
          {
            *(_DWORD *)(a1 + 36) = 7;
            *(_DWORD *)(a1 + 28) = 0;
            if (!*(_DWORD *)(a1 + 32)) {
              *(_DWORD *)(a1 + 32) = 1;
            }
          }
          return;
        }
LABEL_12:
        sqlite3_str_appendf((sqlite3_str *)(a1 + 72), v10, *(unsigned int *)(a1 + 56), *(unsigned int *)(a1 + 60), *(unsigned int *)(a1 + 64), va);
        goto LABEL_13;
      }
      *(_DWORD *)(a1 + 96) = v9 + 1;
      *(unsigned char *)(*(void *)(a1 + 80) + v9) = 10;
    }
    unint64_t v10 = *(const char **)(a1 + 48);
    if (!v10) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
}

void sub_1B0D23784(uint64_t a1, unsigned int a2, int a3, int a4)
{
  unsigned __int8 v11 = 0;
  int v10 = 0;
  int v7 = sub_1B0D14784(*(_DWORD **)a1, a2, &v11, &v10);
  if (v7)
  {
    if (v7 == 3082 || v7 == 7)
    {
      *(_DWORD *)(a1 + 36) = 7;
      *(_DWORD *)(a1 + 28) = 0;
      if (!*(_DWORD *)(a1 + 32)) {
        *(_DWORD *)(a1 + 32) = 1;
      }
    }
    sub_1B0D23628(a1, "Failed to read ptrmap key=%u");
  }
  else if (v11 != a3 || v10 != a4)
  {
    sub_1B0D23628(a1, "Bad ptr map entry key=%u expected=(%u,%u) got=(%u,%u)");
  }
}

uint64_t sub_1B0D23848(uint64_t a1, unsigned int a2, void *a3, uint64_t a4)
{
  v87[0] = a4;
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 60);
  uint64_t v10 = *(void *)(a1 + 112);
  if (*(_DWORD *)(v10 + 424))
  {
    ++*(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 36) = 9;
    *(_DWORD *)(a1 + 28) = 0;
  }
  unsigned __int8 v11 = *(unsigned int (**)(void))(v10 + 544);
  if (v11)
  {
    unsigned int v12 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 40) = v12;
    if (!(v12 % *(_DWORD *)(v10 + 560)))
    {
      if (v11(*(void *)(v10 + 552)))
      {
        ++*(_DWORD *)(a1 + 32);
        *(_DWORD *)(a1 + 36) = 9;
        *(_DWORD *)(a1 + 28) = 0;
      }
    }
  }
  if (!*(_DWORD *)(a1 + 28)) {
    goto LABEL_16;
  }
  if (!a2) {
    return 0;
  }
  if (a2 - 1 >= *(_DWORD *)(a1 + 24))
  {
    sub_1B0D23628(a1, "invalid page number %u");
    return 0;
  }
  uint64_t v13 = *(void *)(a1 + 16);
  unint64_t v14 = (unint64_t)a2 >> 3;
  int v15 = *(unsigned __int8 *)(v13 + v14);
  int v16 = 1 << (a2 & 7);
  if ((v16 & v15) != 0)
  {
    sub_1B0D23628(a1, "2nd reference to page %u");
    return 0;
  }
  uint64_t v18 = *(unsigned char **)a1;
  unsigned int v19 = *(_DWORD *)(*(void *)a1 + 56);
  *(unsigned char *)(v13 + v14) = v15 | v16;
  *(void *)(a1 + 48) = "Tree %u page %u: ";
  *(_DWORD *)(a1 + 60) = a2;
  int v20 = (*(uint64_t (**)(void))(*(void *)v18 + 288))();
  if (!v20)
  {
    uint64_t v22 = MEMORY[0x10];
    if (*(_DWORD *)(MEMORY[0x10] + 4) != a2)
    {
      uint64_t v23 = MEMORY[8];
      *(void *)(MEMORY[0x10] + 112) = 0;
      *(void *)(v22 + 72) = v18;
      *(void *)(v22 + 80) = v23;
      *(_DWORD *)(v22 + 4) = a2;
      if (a2 == 1) {
        char v24 = 100;
      }
      else {
        char v24 = 0;
      }
      *(unsigned char *)(v22 + 9) = v24;
    }
    char v25 = *(unsigned char *)v22;
    *(unsigned char *)uint64_t v22 = 0;
    if (sub_1B0CAD004(v22))
    {
      sub_1B0D23628(a1, "btreeInitPage() returns error code %d");
LABEL_27:
      int v21 = -1;
      goto LABEL_28;
    }
    if (sub_1B0D1F1CC(v22))
    {
      sub_1B0D23628(a1, "free space corruption");
      goto LABEL_27;
    }
    char v75 = v25;
    unsigned int v81 = v19;
    uint64_t v28 = *(void *)(v22 + 80);
    uint64_t v29 = *(unsigned __int8 *)(v22 + 9);
    *(void *)(a1 + 48) = "Tree %u page %u cell %u: ";
    uint64_t v83 = v28;
    unsigned __int16 v30 = _byteswap_ushort(*(_WORD *)(v29 + v28 + 5)) - 1;
    uint64_t v77 = __rev16(*(unsigned __int16 *)(v29 + v28 + 3));
    uint64_t v76 = v29;
    uint64_t v31 = v29 - 4 * *(unsigned __int8 *)(v22 + 8);
    if (*(unsigned char *)(v22 + 8))
    {
      uint64_t v32 = *(unsigned int **)(a1 + 104);
      unsigned int *v32 = 0;
      int v78 = 1;
      int v21 = -1;
    }
    else
    {
      uint64_t v33 = bswap32(*(_DWORD *)(v29 + v28 + 8));
      if (v18[33])
      {
        *(void *)(a1 + 48) = "Tree %u page %u right child: ";
        sub_1B0D23784(a1, v33, 5, a2);
      }
      int v21 = sub_1B0D23848(a1, v33, v87, a4);
      int v78 = 0;
      uint64_t v32 = 0;
    }
    uint64_t v34 = v31 + 12;
    unsigned int v35 = v30;
    uint64_t v82 = v22;
    unsigned int v85 = v30;
    uint64_t v79 = v31 + 12;
    if (!v77)
    {
      *a3 = v87[0];
      *(void *)(a1 + 48) = 0;
LABEL_70:
      uint64_t v49 = v77;
      if (*(int *)(a1 + 28) >= 1)
      {
        if (!*(unsigned char *)(v22 + 8))
        {
          uint64_t v32 = *(unsigned int **)(a1 + 104);
          unsigned int *v32 = 0;
          if (v77)
          {
            do
            {
              uint64_t v50 = __rev16(*(unsigned __int16 *)(v83 + v34 + 2 * ((int)v49 - 1)));
              int v51 = (*(uint64_t (**)(uint64_t, uint64_t))(v82 + 120))(v82, v83 + v50);
              unsigned int v52 = *v32 + 1;
              unsigned int *v32 = v52;
              v32[v52] = (v50 + v51 - 1) | (v50 << 16);
              if (v52 >= 2)
              {
                do
                {
                  uint64_t v53 = v52 >> 1;
                  unsigned int v54 = v32[v53];
                  unsigned int v55 = v32[v52];
                  if (v54 <= v55) {
                    break;
                  }
                  unsigned int v56 = v52;
                  v32[v53] = v55;
                  v32[v52] = v54;
                  v52 >>= 1;
                }
                while (v56 > 3);
              }
              BOOL v40 = v49-- <= 1;
              uint64_t v34 = v79;
            }
            while (!v40);
            uint64_t v22 = v82;
            LOWORD(v35) = v85;
          }
        }
        for (unsigned int i = *(unsigned __int16 *)(v76 + v83 + 1); ; unsigned int i = *(unsigned __int16 *)(v83 + v58))
        {
          unsigned int v58 = __rev16(i);
          if (!v58) {
            break;
          }
          unsigned int v59 = (v58 + (bswap32(*(unsigned __int16 *)(v83 + v58 + 2)) >> 16) - 1) | (v58 << 16);
          unsigned int v60 = *v32 + 1;
          unsigned int *v32 = v60;
          v32[v60] = v59;
          if (v60 >= 2)
          {
            do
            {
              uint64_t v61 = v60 >> 1;
              unsigned int v62 = v32[v61];
              unsigned int v63 = v32[v60];
              if (v62 <= v63) {
                break;
              }
              unsigned int v64 = v60;
              v32[v61] = v63;
              v32[v60] = v62;
              v60 >>= 1;
            }
            while (v64 > 3);
          }
        }
        unsigned int v65 = *v32;
        if (*v32)
        {
          int v66 = 0;
          unsigned __int16 v67 = v35;
          while (1)
          {
            unsigned int v68 = v65;
            unsigned int v35 = v32[1];
            uint64_t v69 = v65;
            v32[1] = v32[v69];
            v32[v69] = -1;
            unsigned int v65 = v68 - 1;
            unsigned int *v32 = v68 - 1;
            if (v68 >= 3)
            {
              unsigned int v70 = v32[1];
              unsigned int v71 = v32[2] <= v32[3] ? 2 : 3;
              uint64_t v72 = &v32[v71];
              unsigned int v73 = *v72;
              if (v70 >= *v72)
              {
                unsigned int v74 = 1;
                do
                {
                  v32[v74] = v73;
                  unsigned int v74 = v71;
                  *uint64_t v72 = v70;
                  v71 *= 2;
                  unsigned int v65 = *v32;
                  if (v71 > *v32) {
                    break;
                  }
                  if (v32[v71] > v32[v71 | 1]) {
                    v71 |= 1u;
                  }
                  uint64_t v72 = &v32[v71];
                  unsigned int v73 = *v72;
                }
                while (v70 >= *v72);
              }
            }
            if (v67 >= HIWORD(v35)) {
              break;
            }
            v66 += ~v67 + HIWORD(v35);
            unsigned __int16 v67 = v35;
            if (!v65) {
              goto LABEL_105;
            }
          }
          sub_1B0D23628(a1, "Multiple uses for byte %u of page %u", HIWORD(v35), a2);
          LOWORD(v35) = v67;
          if (*v32) {
            goto LABEL_28;
          }
        }
        else
        {
          int v66 = 0;
        }
LABEL_105:
        if (v66 + v81 + (~(_WORD)v35 | 0xFFFF0000) != *(unsigned __int8 *)(v76 + v83 + 7)) {
          sub_1B0D23628(a1, "Fragmentation of %u bytes reported as %u on page %u", v66 + v81 + (~(_WORD)v35 | 0xFFFF0000), *(unsigned __int8 *)(v76 + v83 + 7), a2);
        }
      }
LABEL_28:
      uint64_t v26 = *(void *)(v22 + 112);
      if ((*(_WORD *)(v26 + 52) & 0x20) != 0)
      {
        uint64_t v27 = *(void *)(v26 + 40);
        --*(_DWORD *)(v27 + 152);
        *(void *)(v26 + 32) = *(void *)(v27 + 168);
        *(void *)(v27 + 168) = v26;
        (*(void (**)(void, void, void))(**(void **)(v27 + 72) + 144))(*(void *)(v27 + 72), *(void *)(v27 + 200) * (*(_DWORD *)(v26 + 48) - 1), *(void *)(v26 + 8));
      }
      else
      {
        sub_1B0D0E3E8(v26);
      }
      goto LABEL_17;
    }
    int v36 = v77 - 1;
    __int16 v37 = (unsigned __int16 *)(v83 + v34 + 2 * (v77 - 1));
    int v80 = v30 + 1;
    unsigned int v38 = v81 - 4;
    int v84 = 1;
    while (1)
    {
      if (!*(_DWORD *)(a1 + 28))
      {
LABEL_67:
        *a3 = v87[0];
        *(void *)(a1 + 48) = 0;
        if (v84)
        {
          uint64_t v34 = v79;
          goto LABEL_70;
        }
        *(unsigned char *)uint64_t v22 = v75;
        goto LABEL_28;
      }
      *(_DWORD *)(a1 + 64) = v36;
      uint64_t v86 = v37 - 1;
      unsigned int v39 = __rev16(*v37);
      BOOL v40 = v39 <= v35 || v39 > v38;
      if (!v40) {
        break;
      }
      sub_1B0D23628(a1, "Offset %u out of range %u..%u", v39, v80, v38);
      unsigned int v38 = v81 - 4;
      int v84 = 0;
      unsigned int v35 = v85;
      __int16 v37 = v86;
LABEL_39:
      BOOL v40 = v36-- <= 0;
      if (v40) {
        goto LABEL_67;
      }
    }
    (*(void (**)(uint64_t))(v22 + 128))(v22);
    if (v39 > v81)
    {
      sub_1B0D23628(a1, "Extends off end of page");
      int v84 = 0;
      goto LABEL_47;
    }
    if (!*(unsigned char *)(v22 + 1))
    {
      unsigned int v35 = v85;
      goto LABEL_55;
    }
    if (v78)
    {
      if (v87[0] >= 0)
      {
LABEL_53:
        unsigned int v35 = v85;
        int v78 = 0;
        v87[0] = 0;
LABEL_55:
        uint64_t v22 = v82;
        if (*(unsigned char *)(v82 + 8))
        {
          unsigned int v41 = *v32 + 1;
          unsigned int *v32 = v41;
          v32[v41] = (v39 - 1) | (v39 << 16);
          if (v41 >= 2)
          {
            do
            {
              uint64_t v42 = v41 >> 1;
              unsigned int v43 = v32[v42];
              unsigned int v44 = v32[v41];
              if (v43 <= v44) {
                break;
              }
              unsigned int v45 = v41;
              v32[v42] = v44;
              v32[v41] = v43;
              v41 >>= 1;
            }
            while (v45 > 3);
          }
          goto LABEL_48;
        }
        uint64_t v46 = bswap32(*(_DWORD *)(v83 + v39));
        if (v18[33]) {
          sub_1B0D23784(a1, v46, 5, a2);
        }
        int v47 = sub_1B0D23848(a1, v46, v87, v87[0]);
        if (v47 == v21)
        {
          int v78 = 0;
        }
        else
        {
          int v48 = v47;
          sub_1B0D23628(a1, "Child page depth differs");
          int v78 = 0;
          int v21 = v48;
        }
LABEL_47:
        unsigned int v35 = v85;
LABEL_48:
        __int16 v37 = v86;
        unsigned int v38 = v81 - 4;
        goto LABEL_39;
      }
    }
    else if (v87[0] > 0)
    {
      goto LABEL_53;
    }
    sub_1B0D23628(a1, "Rowid %lld out of order", 0);
    goto LABEL_53;
  }
  sub_1B0D23628(a1, "unable to get the page. error code=%d", v20);
LABEL_16:
  int v21 = -1;
LABEL_17:
  *(void *)(a1 + 48) = v8;
  *(void *)(a1 + 60) = v9;
  return (v21 + 1);
}

void *sub_1B0D240B8(uint64_t a1)
{
  int v2 = *(void **)a1;
  if (*(void *)a1)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_1B0D05C10(*(void **)(a1 + 8), v2);
      int v2 = v3;
    }
    while (v3);
  }
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 48) = 0x10000;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  uint64_t v4 = *(void **)(a1 + 8);

  return sub_1B0D05C10(v4, (void *)a1);
}

void *sub_1B0D24120(void *result)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  memset(v18, 0, sizeof(v18));
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = 0;
    do
    {
      uint64_t v3 = (void *)v1[1];
      v1[1] = 0;
      if (result)
      {
        int v4 = 0;
        int v2 = v18;
        do
        {
          uint64_t v15 = 0;
          int v16 = 0;
          unsigned int v5 = &v15;
          uint64_t v17 = 0;
          do
          {
            uint64_t v6 = *result;
            int v7 = v1;
            while (1)
            {
              uint64_t v1 = v7;
              uint64_t v8 = *v7;
              if (v6 <= v8) {
                break;
              }
              v5[1] = (uint64_t)v1;
              int v7 = (void *)v1[1];
              unsigned int v5 = v1;
              if (!v7)
              {
                unsigned int v5 = v1;
                uint64_t v1 = result;
                goto LABEL_15;
              }
            }
            if (v6 < v8)
            {
              v5[1] = (uint64_t)result;
              unsigned int v5 = result;
            }
            uint64_t result = (void *)result[1];
          }
          while (result);
LABEL_15:
          v5[1] = (uint64_t)v1;
          uint64_t v1 = v16;
          *int v2 = 0;
          int v2 = (void *)v18 + ++v4;
          uint64_t result = (void *)*v2;
        }
        while (*v2);
      }
      else
      {
        int v2 = v18;
      }
      *int v2 = v1;
      uint64_t result = *(void **)&v18[0];
      uint64_t v1 = v3;
    }
    while (v3);
  }
  for (uint64_t i = 1; i != 40; ++i)
  {
    uint64_t v10 = (void *)*((void *)v18 + i);
    if (v10)
    {
      if (result)
      {
        uint64_t v15 = 0;
        int v16 = 0;
        unsigned __int8 v11 = &v15;
        uint64_t v17 = 0;
        do
        {
          uint64_t v12 = *result;
          uint64_t v13 = v10;
          while (1)
          {
            uint64_t v10 = v13;
            uint64_t v14 = *v13;
            if (v12 <= v14) {
              break;
            }
            v11[1] = (uint64_t)v10;
            uint64_t v13 = (void *)v10[1];
            unsigned __int8 v11 = v10;
            if (!v13)
            {
              unsigned __int8 v11 = v10;
              uint64_t v10 = result;
              goto LABEL_30;
            }
          }
          if (v12 < v14)
          {
            v11[1] = (uint64_t)result;
            unsigned __int8 v11 = result;
          }
          uint64_t result = (void *)result[1];
        }
        while (result);
LABEL_30:
        v11[1] = (uint64_t)v10;
        uint64_t result = v16;
      }
      else
      {
        uint64_t result = (void *)*((void *)v18 + i);
      }
    }
  }
  return result;
}

uint64_t sub_1B0D242DC(uint64_t result, void *a2, void *a3)
{
  do
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)(result + 16);
    if (v5)
    {
      uint64_t v6 = 0;
      sub_1B0D242DC(v5, a2, &v6);
      *(void *)(v6 + 8) = v4;
    }
    else
    {
      *a2 = v4;
    }
    a2 = (void *)(v4 + 8);
    uint64_t result = *(void *)(v4 + 8);
  }
  while (result);
  *a3 = v4;
  return result;
}

uint64_t sub_1B0D24340(uint64_t *a1, int a2)
{
  uint64_t result = *a1;
  if (result)
  {
    if (a2 < 2)
    {
      *a1 = *(void *)(result + 8);
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = 0;
    }
    else
    {
      uint64_t v4 = (a2 - 1);
      uint64_t result = sub_1B0D24340(a1, v4);
      uint64_t v5 = *a1;
      if (*a1)
      {
        *(void *)(v5 + 16) = result;
        *a1 = *(void *)(v5 + 8);
        *(void *)(v5 + 8) = sub_1B0D24340(a1, v4);
        return v5;
      }
    }
  }
  return result;
}

uint64_t sub_1B0D243C0(sqlite3 *a1, void **a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  unsigned __int8 v11 = (unsigned __int8 *)sub_1B0D0E5DC((uint64_t)a1, a3, &a9);
  if (!v11) {
    return 7;
  }
  uint64_t v17 = v11;
  uint64_t v18 = sub_1B0D24584(a1, a2, v11, v12, v13, v14, v15, v16);
  sub_1B0D05C10(a1, v17);
  return v18;
}

uint64_t sub_1B0D24440(uint64_t result, char a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(uint64_t **)(result + 8);
  if (*(unsigned char *)(result + 17))
  {
    ++*(_DWORD *)(result + 20);
    if (!*(unsigned char *)(result + 18)) {
      uint64_t result = sub_1B0D12478(result);
    }
  }
  uint64_t v5 = *v4;
  if (*(unsigned char *)(*v4 + 16))
  {
    BOOL v6 = 0;
    *(_WORD *)(v5 + 11) = 1;
    *(unsigned char *)(v5 + 13) = 0;
LABEL_7:
    char v7 = 0;
    *(unsigned char *)(v5 + 14) = 0;
    int v8 = 1;
    goto LABEL_8;
  }
  BOOL v6 = (a2 & 7u) > 2;
  *(unsigned char *)(v5 + 12) = v6;
  *(unsigned char *)(v5 + 13) = (a2 & 7) == 4;
  *(unsigned char *)(v5 + 11) = (a2 & 7) == 1;
  if ((a2 & 7) == 1) {
    goto LABEL_7;
  }
  int v8 = 0;
  if ((a2 & 8) != 0) {
    char v7 = 3;
  }
  else {
    char v7 = 2;
  }
  *(unsigned char *)(v5 + 14) = v7;
LABEL_8:
  char v9 = 4 * v7;
  if (v6) {
    char v10 = v7;
  }
  else {
    char v10 = 0;
  }
  if ((a2 & 0x10) != 0) {
    int v11 = v8;
  }
  else {
    int v11 = 1;
  }
  if (v11) {
    char v12 = v9;
  }
  else {
    char v12 = 12;
  }
  *(unsigned char *)(v5 + 15) = v12 | v10;
  *(unsigned char *)(v5 + 25) = *(unsigned char *)(v5 + 25) & 0xFE | ((a2 & 0x20) == 0);
  if (*(unsigned char *)(v3 + 17))
  {
    int v13 = *(_DWORD *)(v3 + 20) - 1;
    *(_DWORD *)(v3 + 20) = v13;
    if (!v13)
    {
      return sub_1B0D12558(v3);
    }
  }
  return result;
}

uint64_t sub_1B0D24584(sqlite3 *a1, void **a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  pStmt = 0;
  uint64_t v10 = sub_1B0C7EAC0((uint64_t)a1, a3, 0xFFFFFFFFLL, 128, 0, &pStmt, 0, a8);
  if (!v10)
  {
    for (unsigned int i = sqlite3_step(pStmt); i == 100; unsigned int i = sqlite3_step(pStmt))
    {
      char v12 = sqlite3_column_text(pStmt, 0);
      if (v12)
      {
        int v13 = (const char *)v12;
        if (!strncmp((const char *)v12, "CRE", 3uLL) || !strncmp(v13, "INS", 3uLL))
        {
          unsigned int i = sub_1B0D24584(a1, a2, v13);
          if (i) {
            break;
          }
        }
      }
    }
    if (i == 101) {
      uint64_t v10 = 0;
    }
    else {
      uint64_t v10 = i;
    }
    if (!v10) {
      goto LABEL_24;
    }
    uint64_t v14 = sqlite3_errmsg(a1);
    if (v14)
    {
      uint64_t v15 = v14;
      size_t v16 = strlen(v14);
      unint64_t v17 = v16 + 1;
      if (a1)
      {
        uint64_t v18 = (void *)sub_1B0D05DC0((uint64_t)a1, v17);
        if (!v18) {
          goto LABEL_21;
        }
        goto LABEL_20;
      }
      uint64_t v18 = (void *)sub_1B0C7FC94(v16 + 1);
      if (v18) {
LABEL_20:
      }
        memcpy(v18, v15, v17);
    }
    else
    {
      uint64_t v18 = 0;
    }
LABEL_21:
    if (*a2) {
      sub_1B0D05C10(a1, *a2);
    }
    *a2 = v18;
LABEL_24:
    sqlite3_finalize(pStmt);
  }
  return v10;
}

uint64_t sub_1B0D246F4(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(unsigned char *)(a1 + 17))
  {
    ++*(_DWORD *)(a1 + 20);
    if (!*(unsigned char *)(a1 + 18)) {
      sub_1B0D12478(a1);
    }
  }
  int v5 = a2;
  if ((*(_WORD *)(v4 + 40) & 2) != 0 && *(unsigned char *)(v4 + 33) != (a2 != 0))
  {
    uint64_t v6 = 8;
    if (!*(unsigned char *)(a1 + 17)) {
      return v6;
    }
  }
  else
  {
    uint64_t v6 = 0;
    *(unsigned char *)(v4 + 33) = v5 != 0;
    *(unsigned char *)(v4 + 34) = v5 == 2;
    if (!*(unsigned char *)(a1 + 17)) {
      return v6;
    }
  }
  int v7 = *(_DWORD *)(a1 + 20) - 1;
  *(_DWORD *)(a1 + 20) = v7;
  if (!v7) {
    sub_1B0D12558(a1);
  }
  return v6;
}

uint64_t sub_1B0D247B8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 17))
  {
    ++*(_DWORD *)(a1 + 20);
    if (!*(unsigned char *)(a1 + 18)) {
      sub_1B0D12478(a1);
    }
  }
  uint64_t v2 = *(void *)(a1 + 8);
  if (!*(unsigned char *)(v2 + 33))
  {
    uint64_t v3 = 0;
    if (!*(unsigned char *)(a1 + 17)) {
      return v3;
    }
    goto LABEL_11;
  }
  if (*(unsigned char *)(v2 + 34)) {
    uint64_t v3 = 2;
  }
  else {
    uint64_t v3 = 1;
  }
  if (*(unsigned char *)(a1 + 17))
  {
LABEL_11:
    int v4 = *(_DWORD *)(a1 + 20) - 1;
    *(_DWORD *)(a1 + 20) = v4;
    if (!v4) {
      sub_1B0D12558(a1);
    }
  }
  return v3;
}

uint64_t sub_1B0D2484C(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 17) && (++*(_DWORD *)(a1 + 20), !*(unsigned char *)(a1 + 18)))
  {
    sub_1B0D12478(a1);
    if (!*(unsigned char *)(a2 + 17)) {
      goto LABEL_7;
    }
  }
  else if (!*(unsigned char *)(a2 + 17))
  {
    goto LABEL_7;
  }
  ++*(_DWORD *)(a2 + 20);
  if (!*(unsigned char *)(a2 + 18)) {
    sub_1B0D12478(a2);
  }
LABEL_7:
  uint64_t v21 = 0;
  long long v4 = 0uLL;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  uint64_t v5 = **(void **)(**(void **)(a1 + 8) + 72);
  if (v5)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(v5 + 80))();
    if (v6 == 12)
    {
      long long v4 = 0uLL;
    }
    else
    {
      uint64_t v7 = v6;
      long long v4 = 0uLL;
      if (v6) {
        goto LABEL_20;
      }
    }
  }
  long long v17 = v4;
  long long v18 = v4;
  uint64_t v21 = 0;
  long long v19 = v4;
  long long v20 = v4;
  uint64_t v8 = *(void *)(a2 + 8);
  *(void *)&long long v19 = *(void *)a2;
  *((void *)&v19 + 1) = a2;
  *((void *)&v17 + 1) = a1;
  DWORD2(v18) = 1;
  uint64_t v9 = **(void **)(a1 + 8);
  int v10 = *(unsigned __int16 *)(*(void *)v8 + 178);
  if (*(unsigned __int16 *)(v9 + 178) != v10)
  {
    *(_WORD *)(v9 + 178) = v10;
    int v11 = *(void (**)(void, void, void))(v9 + 304);
    if (v11) {
      v11(*(void *)(v9 + 320), *(unsigned int *)(v9 + 200), (__int16)v10);
    }
  }
  sqlite3_backup_step((sqlite3_backup *)&v17, 0x7FFFFFFF);
  uint64_t v7 = sqlite3_backup_finish((sqlite3_backup *)&v17);
  if (v7)
  {
    uint64_t v12 = **(void **)(*((void *)&v17 + 1) + 8);
    if (!*(unsigned char *)(v12 + 16))
    {
      ++*(_DWORD *)(v12 + 132);
      for (uint64_t i = *(void *)(v12 + 112); i; uint64_t i = *(void *)(i + 64))
        *(_DWORD *)(i + 24) = 1;
      sub_1B0C7D108(*(void **)(v12 + 336), 0);
    }
  }
  else
  {
    *(_WORD *)(*(void *)(a1 + 8) + 40) &= ~2u;
  }
LABEL_20:
  if (*(unsigned char *)(a2 + 17) && (int v14 = *(_DWORD *)(a2 + 20) - 1, (*(_DWORD *)(a2 + 20) = v14) == 0))
  {
    sub_1B0D12558(a2);
    if (!*(unsigned char *)(a1 + 17)) {
      return v7;
    }
  }
  else if (!*(unsigned char *)(a1 + 17))
  {
    return v7;
  }
  int v15 = *(_DWORD *)(a1 + 20) - 1;
  *(_DWORD *)(a1 + 20) = v15;
  if (!v15) {
    sub_1B0D12558(a1);
  }
  return v7;
}

double sub_1B0D24A54(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 564);
  if ((-858993459 * v1 + 429496729) <= 0x33333332)
  {
    unint64_t v3 = 8 * v1 + 40;
    long long v4 = *(void **)(a1 + 600);
    if (v4)
    {
      if (*(void *)(a1 + 512) > (unint64_t)v4)
      {
        if (*(void *)(a1 + 496) <= (unint64_t)v4)
        {
          if (v3 < 0x81)
          {
LABEL_13:
            uint64_t v6 = &v4[v1];
            v6[4] = 0;
            double result = 0.0;
            *(_OWORD *)uint64_t v6 = 0u;
            *((_OWORD *)v6 + 1) = 0u;
            *(void *)(a1 + 600) = v4;
            return result;
          }
        }
        else if (*(void *)(a1 + 504) <= (unint64_t)v4 && v3 <= *(unsigned __int16 *)(a1 + 438))
        {
          goto LABEL_13;
        }
      }
      long long v4 = (void *)sub_1B0D05E6C(a1, v4, v3);
      if (v4)
      {
LABEL_12:
        uint64_t v1 = *(int *)(a1 + 564);
        goto LABEL_13;
      }
    }
    else
    {
      long long v4 = (void *)sub_1B0D05DC0(a1, 8 * v1 + 40);
      if (v4) {
        goto LABEL_12;
      }
    }
  }
  return result;
}

uint64_t sub_1B0D24B38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t *), void **a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v87 = 0;
  uint64_t v13 = *(unsigned int *)(a2 + 64);
  uint64_t v84 = 0;
  uint64_t v14 = *(void *)(a2 + 72);
  uint64_t v15 = *(void *)(a1 + 592);
  if (!v15)
  {
LABEL_4:
    size_t v16 = *(const char **)a2;
    if (*(void *)a2)
    {
      size_t v17 = strlen(*(const char **)a2);
      unint64_t v18 = v17 + 1;
      if (a1)
      {
        long long v19 = (void *)sub_1B0D05DC0(a1, v18);
        if (v19) {
          goto LABEL_7;
        }
      }
      else
      {
        long long v19 = (void *)sub_1B0C7FC94(v17 + 1);
        if (v19)
        {
LABEL_7:
          memcpy(v19, v16, v18);
          uint64_t v20 = sub_1B0C7FC94(48);
          if (!v20)
          {
            if (!*(unsigned char *)(a1 + 103) && !*(unsigned char *)(a1 + 104))
            {
              *(unsigned char *)(a1 + 103) = 1;
              if (*(int *)(a1 + 220) >= 1) {
                *(_DWORD *)(a1 + 424) = 1;
              }
              ++*(_DWORD *)(a1 + 432);
              *(_WORD *)(a1 + 436) = 0;
              uint64_t v79 = *(void *)(a1 + 344);
              if (v79)
              {
                sub_1B0CEF2BC(v79, "out of memory", v21, v22, v23, v24, v25, v26, v83);
                for (uint64_t i = *(void *)(a1 + 344); ; ++*(_DWORD *)(i + 48))
                {
                  *(_DWORD *)(i + 24) = 7;
                  uint64_t i = *(void *)(i + 256);
                  if (!i) {
                    break;
                  }
                }
              }
            }
            sub_1B0D05C10((void *)a1, v19);
            return 7;
          }
          uint64_t v27 = v20;
          *(_OWORD *)uint64_t v20 = 0u;
          *(_OWORD *)(v20 + 16) = 0u;
          *(_OWORD *)(v20 + 32) = 0u;
          *(void *)uint64_t v20 = a1;
          *(void *)(v20 + 8) = a3;
          *(unsigned char *)(v20 + 30) = 1;
          uint64_t v28 = *(void *)(a2 + 96);
          uint64_t v29 = *(void *)(a1 + 32);
          if (v28)
          {
            unsigned __int16 v30 = (uint64_t *)(v29 + 24);
            int v31 = -1;
            do
            {
              uint64_t v32 = *v30;
              v30 += 4;
              ++v31;
            }
            while (v32 != v28);
          }
          else
          {
            int v31 = -32768;
          }
          *(void *)(*(void *)(a2 + 72) + 8) = *(void *)(v29 + 32 * v31);
          v85[0] = v20;
          v85[1] = a2;
          uint64_t v86 = *(void *)(a1 + 592);
          LODWORD(v87) = 0;
          *(void *)(a1 + 592) = v85;
          ++*(_DWORD *)(a2 + 44);
          uint64_t v34 = (void **)(v20 + 16);
          uint64_t v33 = a4(a1, *(void *)(a3 + 24), v13, v14, v20 + 16, &v84);
          if (*(void *)(a1 + 816) || (int v41 = *(_DWORD *)(a2 + 44) - 1, (*(_DWORD *)(a2 + 44) = v41) == 0)) {
            sub_1B0D26BF8((void *)a1, (void *)a2);
          }
          *(void *)(a1 + 592) = v86;
          if (v33)
          {
            if (v33 == 7 && !*(unsigned char *)(a1 + 103) && !*(unsigned char *)(a1 + 104))
            {
              *(unsigned char *)(a1 + 103) = 1;
              if (*(int *)(a1 + 220) >= 1) {
                *(_DWORD *)(a1 + 424) = 1;
              }
              ++*(_DWORD *)(a1 + 432);
              *(_WORD *)(a1 + 436) = 0;
              uint64_t v81 = *(void *)(a1 + 344);
              if (v81)
              {
                sub_1B0CEF2BC(v81, "out of memory", v35, v36, v37, v38, v39, v40, v83);
                for (uint64_t j = *(void *)(a1 + 344); ; ++*(_DWORD *)(j + 48))
                {
                  *(_DWORD *)(j + 24) = 7;
                  uint64_t j = *(void *)(j + 256);
                  if (!j) {
                    break;
                  }
                }
              }
            }
            if (v84)
            {
              *a5 = sub_1B0C904AC(a1, "%s", v35, v36, v37, v38, v39, v40, v84);
              uint64_t v42 = v84;
              if (v84)
              {
                unsigned int v43 = &off_1EB21C9E8;
                if (dword_1EB21C9C0)
                {
                  if ((void)xmmword_1EB2201B0) {
                    xmmword_1EB21CA40(xmmword_1EB2201B0);
                  }
                  qword_1EB220108 -= (int)off_1EB21C9F8(v42);
                  --qword_1EB220150;
                  off_1EB21C9E8(v42);
                  uint64_t v42 = xmmword_1EB2201B0;
                  if (!(void)xmmword_1EB2201B0) {
                    goto LABEL_107;
                  }
                  unsigned int v43 = &xmmword_1EB21CA50;
                }
                (*v43)(v42);
              }
            }
            else
            {
              *a5 = sub_1B0C904AC(a1, "vtable constructor failed: %s", v35, v36, v37, v38, v39, v40, (char)v19);
            }
LABEL_107:
            sub_1B0D05C10((void *)a1, (void *)v27);
            goto LABEL_108;
          }
          unsigned int v44 = *v34;
          if (!*v34) {
            goto LABEL_105;
          }
          *unsigned int v44 = 0;
          v44[1] = 0;
          v44[2] = 0;
          **(void **)(v27 + 16) = *(void *)a3;
          ++*(_DWORD *)(a3 + 16);
          *(_DWORD *)(v27 + 24) = 1;
          if (!v87)
          {
            *a5 = sub_1B0C904AC(a1, "vtable constructor did not declare schema: %s", v35, v36, v37, v38, v39, v40, *(void *)a2);
            sub_1B0D15E20((void *)v27);
            uint64_t v33 = 1;
            goto LABEL_108;
          }
          *(void *)(v27 + 40) = *(void *)(a2 + 80);
          *(void *)(a2 + 80) = v27;
          int v45 = *(__int16 *)(a2 + 54);
          if (v45 < 1)
          {
LABEL_105:
            uint64_t v33 = 0;
LABEL_108:
            sub_1B0D05C10((void *)a1, v19);
            return v33;
          }
          uint64_t v46 = 0;
          int v47 = 0;
          uint64_t v48 = *(void *)(a2 + 8);
LABEL_40:
          uint64_t v49 = v48 + 16 * v46;
          if ((*(_WORD *)(v49 + 14) & 4) != 0)
          {
            int v51 = (char *)(*(void *)(v48 + 16 * v46) + strlen(*(const char **)(v48 + 16 * v46)) + 1);
          }
          else
          {
            unint64_t v50 = *(unsigned __int8 *)(v49 + 8);
            int v51 = &byte_1B0DE9952;
            if (v50 >= 0x10)
            {
              int v51 = off_1E9B51F20[(v50 >> 4) - 1];
              if (!v51)
              {
LABEL_38:
                *(_DWORD *)(a2 + 48) |= v47;
                goto LABEL_39;
              }
            }
          }
          int v52 = strlen(v51);
          unsigned int v53 = v52 & 0x3FFFFFFF;
          if ((v52 & 0x3FFFFFFF) == 0) {
            goto LABEL_38;
          }
          unint64_t v54 = v52 & 0x3FFFFFFF;
          if (!v51) {
            goto LABEL_60;
          }
          if ((*v51 & 0xDF) == 0x48)
          {
            unsigned int v55 = v51 + 1;
            if ((v51[1] & 0xDF) == 0x49)
            {
              unsigned int v55 = v51 + 2;
              if ((v51[2] & 0xDF) == 0x44 && (unsigned int v55 = v51 + 3, (v51[3] & 0xDF) == 0x44))
              {
                unsigned int v55 = v51 + 4;
                if ((v51[4] & 0xDF) == 0x45)
                {
                  unsigned int v55 = v51 + 5;
                  if ((v51[5] & 0xDF) == 0x4E) {
                    goto LABEL_58;
                  }
                  int v56 = 110;
                }
                else
                {
                  int v56 = 101;
                }
              }
              else
              {
                int v56 = 100;
              }
            }
            else
            {
              int v56 = 105;
            }
          }
          else
          {
            int v56 = 104;
            unsigned int v55 = v51;
          }
          if (v56 != byte_1B0DE1758[*v55])
          {
LABEL_60:
            if (v53 == 1) {
              goto LABEL_38;
            }
            uint64_t v60 = 0;
            uint64_t v61 = 1;
            while (1)
            {
              if (!v51) {
                goto LABEL_62;
              }
              unsigned int v62 = &v51[v61];
              if ((v51[v60 + 1] & 0xDF) != 0x48)
              {
                int v63 = 104;
                goto LABEL_76;
              }
              if ((v51[v60 + 2] & 0xDF) != 0x49)
              {
                ++v62;
                int v63 = 105;
                goto LABEL_76;
              }
              if ((v51[v60 + 3] & 0xDF) != 0x44)
              {
                v62 += 2;
                int v63 = 100;
                goto LABEL_76;
              }
              if ((v51[v60 + 4] & 0xDF) != 0x44) {
                break;
              }
              if ((v51[v60 + 5] & 0xDF) != 0x45)
              {
                v62 += 4;
                int v63 = 101;
LABEL_76:
                if (v63 != byte_1B0DE1758[*v62]) {
                  goto LABEL_62;
                }
                goto LABEL_77;
              }
              unsigned int v62 = &v51[v60 + 6];
              if ((*v62 & 0xDF) != 0x4E)
              {
                int v63 = 110;
                goto LABEL_76;
              }
LABEL_77:
              if (v51[v60] == 32)
              {
                int v57 = v51[v60 + 7];
                if ((v57 | 0x20) == 0x20)
                {
                  uint64_t v58 = v60 + 1;
                  unsigned int v59 = &v51[v58];
LABEL_80:
                  if (v57) {
                    uint64_t v64 = 7;
                  }
                  else {
                    uint64_t v64 = 6;
                  }
                  if ((int)v58 + (int)v64 <= v53)
                  {
                    uint64_t v65 = v64 + v58;
                    unint64_t v66 = v54 - v65 + 1;
                    if (v66 < 8 || (unint64_t)-v64 < 0x20)
                    {
                      unint64_t v67 = v58;
                      goto LABEL_87;
                    }
                    if (v66 >= 0x20)
                    {
                      unint64_t v72 = v66 & 0xFFFFFFFFFFFFFFE0;
                      unsigned int v73 = &v51[v58 + 16];
                      unint64_t v74 = v66 & 0xFFFFFFFFFFFFFFE0;
                      do
                      {
                        long long v75 = *(_OWORD *)&v73[v64];
                        *((_OWORD *)v73 - 1) = *(_OWORD *)&v73[v64 - 16];
                        *(_OWORD *)unsigned int v73 = v75;
                        v73 += 32;
                        v74 -= 32;
                      }
                      while (v74);
                      if (v66 != v72)
                      {
                        if ((v66 & 0x18) == 0)
                        {
                          v65 += v72;
                          unint64_t v67 = v72 + v58;
                          goto LABEL_87;
                        }
                        goto LABEL_100;
                      }
                    }
                    else
                    {
                      unint64_t v72 = 0;
LABEL_100:
                      unint64_t v67 = (v66 & 0xFFFFFFFFFFFFFFF8) + v58;
                      v65 += v66 & 0xFFFFFFFFFFFFFFF8;
                      unint64_t v76 = v72 - (v66 & 0xFFFFFFFFFFFFFFF8);
                      uint64_t v77 = &v51[v72 + v58];
                      do
                      {
                        *(void *)uint64_t v77 = *(void *)&v77[v64];
                        v77 += 8;
                        v76 += 8;
                      }
                      while (v76);
                      if (v66 != (v66 & 0xFFFFFFFFFFFFFFF8))
                      {
LABEL_87:
                        unsigned int v68 = &v51[v67];
                        unint64_t v69 = v67 + v64;
                        unsigned int v70 = &v51[v65];
                        do
                        {
                          char v71 = *v70++;
                          *v68++ = v71;
                          ++v69;
                        }
                        while (v69 <= v54);
                      }
                    }
                  }
                  if (v58 && !*v59) {
                    v51[(v58 - 1)] = 0;
                  }
                  uint64_t v48 = *(void *)(a2 + 8);
                  *(_WORD *)(v48 + 16 * v46 + 14) |= 2u;
                  *(_DWORD *)(a2 + 48) |= 2u;
                  LOWORD(v45) = *(_WORD *)(a2 + 54);
                  int v47 = 1024;
LABEL_39:
                  if (++v46 >= (__int16)v45) {
                    goto LABEL_105;
                  }
                  goto LABEL_40;
                }
              }
LABEL_62:
              ++v61;
              if (v54 - 1 == ++v60) {
                goto LABEL_38;
              }
            }
            v62 += 3;
            int v63 = 100;
            goto LABEL_76;
          }
LABEL_58:
          int v57 = v51[6];
          if ((v57 | 0x20) == 0x20)
          {
            LODWORD(v58) = 0;
            unsigned int v59 = v51;
            goto LABEL_80;
          }
          goto LABEL_60;
        }
      }
    }
    return 7;
  }
  while (*(void *)(v15 + 8) != a2)
  {
    uint64_t v15 = *(void *)(v15 + 16);
    if (!v15) {
      goto LABEL_4;
    }
  }
  *a5 = sub_1B0C904AC(a1, "vtable constructor called recursively: %s", a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8, *(void *)a2);
  return 6;
}

uint64_t sub_1B0D2539C(unsigned __int8 *a1, uint64_t a2, _DWORD *a3)
{
  int v3 = (int)((3 * byte_1B0DE1758[a1[(int)a2 - 1]]) ^ (4 * byte_1B0DE1758[*a1]) ^ a2) % 127;
  int v4 = byte_1B0DE23E8[v3];
  if (byte_1B0DE23E8[v3])
  {
    do
    {
      if (byte_1B0DE1E34[v4] == a2)
      {
        uint64_t v5 = *(unsigned __int16 *)&aReindexedescap[2 * v4 + 666];
        if ((*a1 & 0xDF) == aReindexedescap[v5]
          && (a1[1] & 0xDF) == aReindexedescap[v5 + 1])
        {
          if ((int)a2 < 3)
          {
LABEL_11:
            *a3 = byte_1B0DE2467[v4];
            return a2;
          }
          uint64_t v6 = &aReindexedescap[v5 + 2];
          uint64_t v7 = a2 - 2;
          uint64_t v8 = a1 + 2;
          while (1)
          {
            int v9 = *v8++;
            unsigned int v10 = v9 & 0xFFFFFFDF;
            int v11 = *v6++;
            if (v10 != v11) {
              break;
            }
            if (!--v7) {
              goto LABEL_11;
            }
          }
        }
      }
      int v4 = byte_1B0DE24FB[v4];
    }
    while (v4);
  }
  return a2;
}

uint64_t sub_1B0D254B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = *(int *)(a1 + 144);
  if (*(_DWORD *)(a1 + 148) <= (int)result) {
    return sub_1B0D25510(a1, a2, a3, a4, 0, a6, a7, a8);
  }
  *(_DWORD *)(a1 + 144) = result + 1;
  uint64_t v10 = *(void *)(a1 + 136) + 40 * (int)result;
  *(unsigned char *)uint64_t v10 = a2;
  *(_WORD *)(v10 + 2) = 0;
  *(_DWORD *)(v10 + 4) = a3;
  *(_DWORD *)(v10 + 8) = a4;
  *(unsigned char *)(v10 + 1) = 0;
  *(void *)(v10 + 12) = 0;
  *(void *)(v10 + 28) = 0;
  *(void *)(v10 + 20) = 0;
  *(_DWORD *)(v10 + 36) = 0;
  return result;
}

uint64_t sub_1B0D25510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a5;
  int v9 = a4;
  int v10 = a3;
  char v11 = a2;
  while (!sub_1B0D255A4(a1, a2, a3, a4, a5, a6, a7, a8))
  {
    uint64_t result = *(unsigned int *)(a1 + 144);
    if (*(_DWORD *)(a1 + 148) > (int)result)
    {
      *(_DWORD *)(a1 + 144) = result + 1;
      uint64_t v14 = *(void *)(a1 + 136) + 40 * (int)result;
      *(unsigned char *)uint64_t v14 = v11;
      *(_WORD *)(v14 + 2) = 0;
      *(_DWORD *)(v14 + 4) = v10;
      *(_DWORD *)(v14 + 8) = v9;
      *(_DWORD *)(v14 + 12) = v8;
      *(unsigned char *)(v14 + 1) = 0;
      *(void *)(v14 + 24) = 0;
      *(void *)(v14 + 32) = 0;
      *(void *)(v14 + 16) = 0;
      return result;
    }
  }
  return 1;
}

uint64_t sub_1B0D255A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(int *)(a1 + 148);
  uint64_t v10 = 2 * v9;
  BOOL v11 = v9 == 0;
  uint64_t v12 = 25;
  if (!v11) {
    uint64_t v12 = v10;
  }
  uint64_t v13 = *(void *)v8;
  if (v12 <= *(int *)(*(void *)v8 + 156))
  {
    unint64_t v18 = *(void **)(a1 + 136);
    uint64_t v19 = 5 * v12;
    unint64_t v20 = 8 * v19;
    if (v18)
    {
      if (*(void *)(v13 + 512) > (unint64_t)v18)
      {
        if (*(void *)(v13 + 496) <= (unint64_t)v18)
        {
          if (v20 < 0x81) {
            goto LABEL_23;
          }
        }
        else if (*(void *)(v13 + 504) <= (unint64_t)v18 && v20 <= *(unsigned __int16 *)(v13 + 438))
        {
LABEL_23:
          if (*(void *)(v13 + 520) > (unint64_t)v18)
          {
            if (*(void *)(v13 + 496) <= (unint64_t)v18)
            {
              int v21 = 128;
              goto LABEL_27;
            }
            if (*(void *)(v13 + 504) <= (unint64_t)v18)
            {
              int v21 = *(unsigned __int16 *)(v13 + 438);
              goto LABEL_27;
            }
          }
LABEL_26:
          int v21 = off_1EB21C9F8(v18);
LABEL_27:
          uint64_t v15 = 0;
          *(_DWORD *)(v8 + 60) = v21;
          *(_DWORD *)(a1 + 148) = v21 / 0x28uLL;
          *(void *)(a1 + 136) = v18;
          return v15;
        }
      }
      unint64_t v18 = (void *)sub_1B0D05E6C(*(void *)v8, v18, v20);
      if (v18)
      {
LABEL_22:
        uint64_t v13 = *(void *)v8;
        if (!*(void *)v8) {
          goto LABEL_26;
        }
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v18 = (void *)sub_1B0D05DC0(*(void *)v8, 8 * v19);
      if (v18) {
        goto LABEL_22;
      }
    }
    return 7;
  }
  if (*(unsigned char *)(v13 + 103) || *(unsigned char *)(v13 + 104)) {
    return 7;
  }
  *(unsigned char *)(v13 + 103) = 1;
  if (*(int *)(v13 + 220) >= 1) {
    *(_DWORD *)(v13 + 424) = 1;
  }
  ++*(_DWORD *)(v13 + 432);
  *(_WORD *)(v13 + 436) = 0;
  uint64_t v14 = *(void *)(v13 + 344);
  uint64_t v15 = 7;
  if (v14)
  {
    sub_1B0CEF2BC(v14, "out of memory", a3, a4, a5, a6, a7, a8, v23);
    for (uint64_t i = *(void *)(v13 + 344); ; ++*(_DWORD *)(i + 48))
    {
      *(_DWORD *)(i + 24) = 7;
      uint64_t i = *(void *)(i + 256);
      if (!i) {
        break;
      }
    }
  }
  return v15;
}

uint64_t sub_1B0D2575C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a6;
  uint64_t result = *(unsigned int *)(a1 + 144);
  if (*(_DWORD *)(a1 + 148) <= (int)result)
  {
    uint64_t result = sub_1B0D25510(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    *(_DWORD *)(a1 + 144) = result + 1;
    uint64_t v11 = *(void *)(a1 + 136) + 40 * (int)result;
    *(unsigned char *)uint64_t v11 = a2;
    *(_WORD *)(v11 + 2) = 0;
    *(_DWORD *)(v11 + 4) = a3;
    *(_DWORD *)(v11 + 8) = a4;
    *(_DWORD *)(v11 + 12) = a5;
    *(unsigned char *)(v11 + 1) = 0;
    *(void *)(v11 + 24) = 0;
    *(void *)(v11 + 32) = 0;
    *(void *)(v11 + 16) = 0;
  }
  if (!*(unsigned char *)(*(void *)a1 + 103))
  {
    uint64_t v12 = *(void *)(a1 + 136) + 40 * (int)result;
    *(unsigned char *)(v12 + 1) = -3;
    *(_DWORD *)(v12 + 16) = v8;
  }
  return result;
}

uint64_t *sub_1B0D257F4(uint64_t *result, uint64_t a2, char *__s, unsigned int a4)
{
  uint64_t v7 = result;
  int v8 = (char *)a2;
  int v9 = *(char *)(a2 + 1);
  if (v9)
  {
LABEL_2:
    uint64_t result = sub_1B0C8B9A4((void *)*v7, v9, *((void *)v8 + 2));
    v8[1] = 0;
    *((void *)v8 + 2) = 0;
    goto LABEL_3;
  }
  while (1)
  {
LABEL_3:
    if ((a4 & 0x80000000) == 0)
    {
      if (a4)
      {
        if (!__s) {
          goto LABEL_26;
        }
      }
      else
      {
        if (!__s)
        {
LABEL_26:
          unint64_t v18 = 0;
LABEL_27:
          *(void *)(a2 + 16) = v18;
          v8[1] = -6;
          return result;
        }
        a4 = strlen(__s) & 0x3FFFFFFF;
      }
      uint64_t v16 = *v7;
      size_t v17 = a4;
      uint64_t result = (uint64_t *)sub_1B0D05DC0(v16, a4 + 1);
      unint64_t v18 = result;
      if (result)
      {
        uint64_t result = (uint64_t *)memcpy(result, __s, v17);
        *((unsigned char *)v18 + v17) = 0;
      }
      goto LABEL_27;
    }
    uint64_t result = (uint64_t *)*v7;
    if (*(unsigned char *)(*v7 + 103)) {
      break;
    }
    uint64_t v10 = (char *)v7[17];
    int v11 = -858993459 * ((unint64_t)(v8 - v10) >> 3);
    if (v11 < 0) {
      int v11 = *((_DWORD *)v7 + 36) - 1;
    }
    int v12 = v11;
    uint64_t v13 = &v10[40 * v11];
    int v15 = v13[1];
    uint64_t v14 = v13 + 1;
    if (!v15)
    {
      if (a4 == -3)
      {
        *(_DWORD *)&v10[40 * v12 + 16] = __s;
        *uint64_t v14 = -3;
      }
      else if (__s)
      {
        *(void *)&v10[40 * v12 + 16] = __s;
        *uint64_t v14 = a4;
        if (a4 == -11) {
          ++*((_DWORD *)__s + 6);
        }
      }
      return result;
    }
    int v8 = &v10[40 * v12];
    int v9 = v8[1];
    if (v8[1]) {
      goto LABEL_2;
    }
  }
  if (a4 != -11)
  {
    return sub_1B0C8B9A4(result, a4, (uint64_t)__s);
  }
  return result;
}

void *sub_1B0D25990(void *result, int *a2)
{
  int v3 = *a2;
  uint64_t v4 = result[3];
  uint64_t v5 = *(void *)(v4 + 80);
  *((_WORD *)result + 134) = *((_WORD *)result + 134) & 0xFF3F | 0x40;
  for (uint64_t i = (_DWORD *)(result[17] + 40 * *((int *)result + 36) - 32); ; i -= 10)
  {
    while (2)
    {
      if (*((unsigned __int8 *)i - 8) <= 0x40u)
      {
        switch(*((unsigned char *)i - 8))
        {
          case 0:
          case 1:
            goto LABEL_8;
          case 2:
            if (*i) {
              *((_WORD *)result + 134) &= ~0x40u;
            }
LABEL_8:
            __int16 v7 = *((_WORD *)result + 134);
            goto LABEL_9;
          case 3:
          case 4:
          case 5:
            __int16 v7 = *((_WORD *)result + 134) & 0xFF3F;
LABEL_9:
            *((_WORD *)result + 134) = v7 | 0x80;
            i -= 10;
            continue;
          case 6:
            if (*(i - 11) > v3) {
              int v3 = *(i - 11);
            }
            goto LABEL_12;
          case 7:
            int v9 = *i;
            i -= 10;
            int v8 = v9;
            if (v9 > v3) {
              int v3 = v8;
            }
            continue;
          case 8:
            if (v5)
            {
              uint64_t result = sub_1B0D15C20((void *)*result, *(void **)(v4 + 80));
              *(void *)(v4 + 80) = 0;
            }
            *(_DWORD *)(v4 + 68) = 0;
            *a2 = v3;
            return result;
          default:
LABEL_12:
            if ((*i & 0x80000000) != 0) {
              *uint64_t i = *(_DWORD *)(v5 + 4 * ~*i);
            }
            break;
        }
      }
      break;
    }
  }
}

uint64_t sub_1B0D25ACC(unsigned char *a1, unsigned int a2, unsigned int a3, char *a4)
{
  if (*a1 == 1) {
    return 4;
  }
  uint64_t result = sub_1B0D1DAC8((uint64_t)a1);
  if (!result)
  {
    return sub_1B0CD1CD0((uint64_t)a1, a2, a3, a4, 0);
  }
  return result;
}

uint64_t sub_1B0D25B50(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a1;
  if (*(unsigned char *)(*a1 + 197)) {
    return 0;
  }
  uint64_t result = sub_1B0C878D8(*a1, (char **)a1 + 1, a3, a4, a5, a6, a7, a8);
  if (result)
  {
    *((_DWORD *)a1 + 6) = result;
    ++*((_DWORD *)a1 + 12);
  }
  else
  {
    if (!*(unsigned char *)(v8 + 111)) {
      return 0;
    }
    uint64_t result = 0;
    *(_DWORD *)(v8 + 44) |= 0x10u;
  }
  return result;
}

uint64_t sub_1B0D25BC0(uint64_t a1, char *a2)
{
  int v2 = 0;
  int v3 = 73;
  while (1)
  {
    int v4 = v3 + v2;
    if (v3 + v2 < 0 != __OFADD__(v3, v2)) {
      ++v4;
    }
    int v5 = v4 >> 1;
    uint64_t v6 = (uint64_t)v4 >> 1;
    __int16 v7 = &(&off_1E5FEF698)[3 * v5];
    if (*v7) {
      break;
    }
    int v9 = 1;
LABEL_12:
    if (v9 >= 0) {
      int v2 = v6 + 1;
    }
    else {
      int v3 = v6 - 1;
    }
    if (v2 > v3) {
      return 0;
    }
  }
  for (uint64_t i = 0; ; ++i)
  {
    uint64_t v10 = a2[i + 7];
    uint64_t v11 = (*v7)[i];
    if (v10 == v11) {
      break;
    }
    int v9 = byte_1B0DE1758[v10] - byte_1B0DE1758[v11];
    if (v9) {
      goto LABEL_12;
    }
LABEL_7:
    ;
  }
  if (a2[i + 7]) {
    goto LABEL_7;
  }
  if ((*((unsigned char *)&off_1E5FEF698 + 24 * (int)v6 + 9) & 0x30) != 0) {
    return sub_1B0D25C7C(a1, a2, (uint64_t)&unk_1F09A55E0, (uint64_t)v7, 0);
  }
  return 0;
}

uint64_t sub_1B0D25C7C(uint64_t a1, char *__s, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5 = __s;
  if (a3)
  {
    if (__s) {
      int v10 = strlen(__s) & 0x3FFFFFFF;
    }
    else {
      int v10 = 0;
    }
    uint64_t v12 = sub_1B0C7FC94((v10 + 49));
    if (!v12)
    {
      if (*(unsigned char *)(a1 + 103) || *(unsigned char *)(a1 + 104)) {
        return 0;
      }
      *(unsigned char *)(a1 + 103) = 1;
      if (*(int *)(a1 + 220) >= 1) {
        *(_DWORD *)(a1 + 424) = 1;
      }
      ++*(_DWORD *)(a1 + 432);
      *(_WORD *)(a1 + 436) = 0;
      uint64_t v33 = *(void *)(a1 + 344);
      if (!v33) {
        return 0;
      }
      sub_1B0CEF2BC(v33, "out of memory", v13, v14, v15, v16, v17, v18, v38);
      uint64_t v34 = *(void *)(a1 + 344);
      *(_DWORD *)(v34 + 24) = 7;
      uint64_t v35 = *(void *)(v34 + 256);
      if (!v35) {
        return 0;
      }
      uint64_t v11 = 0;
      do
      {
        ++*(_DWORD *)(v35 + 48);
        *(_DWORD *)(v35 + 24) = 7;
        uint64_t v35 = *(void *)(v35 + 256);
      }
      while (v35);
      return v11;
    }
    uint64_t v11 = v12;
    uint64_t v19 = (char *)(v12 + 48);
    memcpy((void *)(v12 + 48), v5, (v10 + 1));
    *(void *)uint64_t v11 = a3;
    *(void *)(v11 + 8) = v19;
    *(void *)(v11 + 24) = a4;
    *(void *)(v11 + 32) = a5;
    *(void *)(v11 + 40) = 0;
    int v5 = v19;
    *(_DWORD *)(v11 + 16) = 1;
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v20 = sub_1B0C796D8(a1 + 568, (unsigned __int8 *)v5, v11);
  if (v20)
  {
    uint64_t v27 = v20;
    if (v20 == v11)
    {
      if (!*(unsigned char *)(a1 + 103) && !*(unsigned char *)(a1 + 104))
      {
        *(unsigned char *)(a1 + 103) = 1;
        if (*(int *)(a1 + 220) >= 1) {
          *(_DWORD *)(a1 + 424) = 1;
        }
        ++*(_DWORD *)(a1 + 432);
        *(_WORD *)(a1 + 436) = 0;
        uint64_t v36 = *(void *)(a1 + 344);
        if (v36)
        {
          sub_1B0CEF2BC(v36, "out of memory", v21, v22, v23, v24, v25, v26, v38);
          for (uint64_t i = *(void *)(a1 + 344); ; ++*(_DWORD *)(i + 48))
          {
            *(_DWORD *)(i + 24) = 7;
            uint64_t i = *(void *)(i + 256);
            if (!i) {
              break;
            }
          }
        }
      }
      uint64_t v27 = v11;
      uint64_t v11 = 0;
      goto LABEL_24;
    }
    uint64_t v28 = *(void *)(v20 + 40);
    if (v28)
    {
      *(_DWORD *)(v28 + 48) |= 0x4000u;
      if (*(void *)(a1 + 816) || (int v29 = *(_DWORD *)(v28 + 44) - 1, (*(_DWORD *)(v28 + 44) = v29) == 0)) {
        sub_1B0D26BF8((void *)a1, (void *)v28);
      }
      *(void *)(v27 + 40) = 0;
    }
    int v30 = *(_DWORD *)(v27 + 16) - 1;
    *(_DWORD *)(v27 + 16) = v30;
    if (!v30)
    {
      int v31 = *(void (**)(void))(v27 + 32);
      if (v31) {
        v31(*(void *)(v27 + 24));
      }
LABEL_24:
      sub_1B0D05C10((void *)a1, (void *)v27);
    }
  }
  return v11;
}

uint64_t sub_1B0D25EB4(sqlite3 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, char **a6)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  __int16 v29 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = zSQL;
  unsigned int v26 = 200;
  uint64_t v27 = 0xE00000000;
  __int16 v28 = 0;
  qmemcpy(zSQL, "CREATE TABLE x", 14);
  if (!*(unsigned char *)(a2 + 11))
  {
    sqlite3_str_appendf((sqlite3_str *)&v24, "(\"%s\"", *(const char **)a2);
    goto LABEL_7;
  }
  uint64_t v10 = *(unsigned __int8 *)(a2 + 10);
  sqlite3_str_appendf((sqlite3_str *)&v24, "%c\"%s\"", 40, off_1E5FEFD88[v10]);
  if (*(unsigned __int8 *)(a2 + 11) < 2u)
  {
LABEL_7:
    LOBYTE(v11) = 1;
    goto LABEL_8;
  }
  uint64_t v11 = 1;
  do
    sqlite3_str_appendf((sqlite3_str *)&v24, "%c\"%s\"", 44, (&off_1E5FEFD88[v10])[v11++]);
  while (v11 < *(unsigned __int8 *)(a2 + 11));
LABEL_8:
  unsigned int v12 = *(unsigned __int8 *)(a2 + 9);
  uint64_t v13 = HIDWORD(v27);
  unsigned int v14 = v26;
  if ((v12 & 0x20) == 0)
  {
    char v15 = 0;
    if (v12 < 0x40) {
      goto LABEL_19;
    }
    goto LABEL_15;
  }
  if (HIDWORD(v27) + 11 >= v26)
  {
    sub_1B0CE62B0((uint64_t)&v24, ",arg HIDDEN", 0xBu);
  }
  else
  {
    HIDWORD(v27) += 11;
    uint64_t v16 = &v25[v13];
    *(void *)uint64_t v16 = *(void *)",arg HIDDEN";
    *(_DWORD *)(v16 + 7) = 1313162308;
  }
  char v15 = 1;
  LODWORD(v13) = HIDWORD(v27);
  unsigned int v14 = v26;
  if (*(unsigned __int8 *)(a2 + 9) >= 0x40u)
  {
LABEL_15:
    if ((int)v13 + 14 >= v14)
    {
      sub_1B0CE62B0((uint64_t)&v24, ",schema HIDDEN", 0xEu);
    }
    else
    {
      HIDWORD(v27) = v13 + 14;
      qmemcpy(&v25[v13], ",schema HIDDEN", 14);
    }
    ++v15;
    LODWORD(v13) = HIDWORD(v27);
    unsigned int v14 = v26;
  }
LABEL_19:
  if ((int)v13 + 1 >= v14)
  {
    sub_1B0CE62B0((uint64_t)&v24, ")", 1u);
    uint64_t v17 = v25;
    if (!v25) {
      goto LABEL_26;
    }
  }
  else
  {
    HIDWORD(v27) = v13 + 1;
    v25[v13] = 41;
    uint64_t v17 = v25;
    if (!v25) {
      goto LABEL_26;
    }
  }
  v17[HIDWORD(v27)] = 0;
  if (v27 && (v28 & 0x400) == 0) {
    sub_1B0D06044(&v24);
  }
LABEL_26:
  uint64_t v18 = sqlite3_declare_vtab(a1, zSQL);
  if (v18)
  {
    uint64_t v19 = v18;
    uint64_t v20 = sqlite3_errmsg(a1);
    uint64_t v21 = sqlite3_mprintf("%s", v20);
    uint64_t v22 = 0;
    *a6 = v21;
  }
  else
  {
    if (sqlite3_initialize())
    {
      uint64_t v22 = 0;
    }
    else
    {
      uint64_t v22 = sub_1B0C7FC94(48);
      if (v22)
      {
        uint64_t v19 = 0;
        *(_OWORD *)(v22 + 16) = 0u;
        *(_OWORD *)(v22 + 32) = 0u;
        *(_OWORD *)uint64_t v22 = 0u;
        *(void *)(v22 + 24) = a1;
        *(void *)(v22 + 32) = a2;
        *(unsigned char *)(v22 + 41) = v11;
        *(unsigned char *)(v22 + 40) = v15;
        goto LABEL_33;
      }
    }
    uint64_t v19 = 7;
  }
LABEL_33:
  *a5 = v22;
  return v19;
}

uint64_t sub_1B0D261C0(uint64_t a1, uint64_t a2)
{
  v17[1] = *MEMORY[0x1E4F143B8];
  *(void *)(a2 + 64) = 0x3FF0000000000000;
  if (*(unsigned char *)(a1 + 40))
  {
    uint64_t v2 = *(void *)(a2 + 8);
    v17[0] = 0;
    int v3 = *(_DWORD *)a2;
    if (*(int *)a2 < 1) {
      goto LABEL_12;
    }
    int v4 = 0;
    int v5 = (unsigned __int8 *)(v2 + 5);
    uint64_t v6 = (unsigned __int8 *)(v2 + 5);
    do
    {
      int v7 = *v6;
      v6 += 12;
      if (v7)
      {
        if (*(v5 - 1) == 2)
        {
          int v8 = *(_DWORD *)(v5 - 5);
          int v9 = *(unsigned __int8 *)(a1 + 41);
          BOOL v10 = __OFSUB__(v8, v9);
          int v11 = v8 - v9;
          if (v11 < 0 == v10) {
            *((_DWORD *)v17 + v11) = v4 + 1;
          }
        }
      }
      ++v4;
      int v5 = v6;
    }
    while (v3 != v4);
    if (LODWORD(v17[0]))
    {
      uint64_t v12 = *(void *)(a2 + 32);
      uint64_t v13 = v12 + 8 * (LODWORD(v17[0]) - 1);
      *(_DWORD *)uint64_t v13 = 1;
      *(unsigned char *)(v13 + 4) = 1;
      int v14 = HIDWORD(v17[0]);
      if (HIDWORD(v17[0]))
      {
        *(void *)(a2 + 64) = 0x4034000000000000;
        *(void *)(a2 + 72) = 20;
        uint64_t v15 = v12 + 8 * (v14 - 1);
        *(_DWORD *)uint64_t v15 = 2;
        *(unsigned char *)(v15 + 4) = 1;
      }
    }
    else
    {
LABEL_12:
      *(void *)(a2 + 64) = 0x41DFFFFFFFC00000;
      *(void *)(a2 + 72) = 0x7FFFFFFFLL;
    }
  }
  return 0;
}

uint64_t sub_1B0D262E0(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    uint64_t v2 = &off_1EB21C9E8;
    if (!dword_1EB21C9C0)
    {
LABEL_7:
      (*v2)(v1);
      return 0;
    }
    if ((void)xmmword_1EB2201B0) {
      xmmword_1EB21CA40(xmmword_1EB2201B0);
    }
    qword_1EB220108 -= (int)off_1EB21C9F8(v1);
    --qword_1EB220150;
    off_1EB21C9E8(v1);
    uint64_t v1 = xmmword_1EB2201B0;
    if ((void)xmmword_1EB2201B0)
    {
      uint64_t v2 = &xmmword_1EB21CA50;
      goto LABEL_7;
    }
  }
  return 0;
}

double sub_1B0D26394(uint64_t a1, uint64_t *a2)
{
  if (!sqlite3_initialize())
  {
    uint64_t v5 = sub_1B0C7FC94(40);
    if (v5)
    {
      *(void *)(v5 + 32) = 0;
      double result = 0.0;
      *(_OWORD *)uint64_t v5 = 0u;
      *(_OWORD *)(v5 + 16) = 0u;
      *(void *)uint64_t v5 = a1;
      *a2 = v5;
    }
  }
  return result;
}

uint64_t sub_1B0D263F0(uint64_t a1)
{
  uint64_t v1 = a1;
  sub_1B0D26894(a1);
  if (v1)
  {
    uint64_t v2 = &off_1EB21C9E8;
    if (!dword_1EB21C9C0)
    {
LABEL_7:
      (*v2)(v1);
      return 0;
    }
    if ((void)xmmword_1EB2201B0) {
      xmmword_1EB21CA40(xmmword_1EB2201B0);
    }
    qword_1EB220108[0] -= (int)off_1EB21C9F8(v1);
    --qword_1EB220150;
    off_1EB21C9E8(v1);
    uint64_t v1 = xmmword_1EB2201B0;
    if ((void)xmmword_1EB2201B0)
    {
      uint64_t v2 = &xmmword_1EB21CA50;
      goto LABEL_7;
    }
  }
  return 0;
}

uint64_t sub_1B0D264A4(void *a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5)
{
  int v8 = (void *)*a1;
  uint64_t v33 = 0;
  sub_1B0D26894((uint64_t)a1);
  if (a4 >= 1)
  {
    uint64_t v9 = a4;
    BOOL v10 = (char **)&a1[((*(unsigned char *)(v8[4] + 9) & 0x20) == 0) + 3];
    do
    {
      uint64_t v13 = *a5;
      if (*a5)
      {
        int v14 = *(unsigned __int16 *)(v13 + 20);
        if ((~v14 & 0x202) == 0 && *(unsigned char *)(v13 + 22) == 1)
        {
          int v11 = *(const char **)(v13 + 8);
          if (v11) {
            goto LABEL_4;
          }
        }
        else if ((v14 & 1) == 0)
        {
          int v11 = (const char *)sub_1B0D18254((int *)v13, 1);
          if (v11)
          {
LABEL_4:
            uint64_t v12 = sqlite3_mprintf("%s", v11);
            *BOOL v10 = v12;
            if (!v12) {
              return 7;
            }
          }
        }
      }
      ++a5;
      ++v10;
      --v9;
    }
    while (v9);
  }
  int v15 = *(_DWORD *)(v8[3] + 140);
  uint64_t v29 = 0;
  int v30 = 0;
  unsigned int v31 = 0;
  int v32 = v15;
  LODWORD(v33) = 0;
  WORD2(v33) = 0;
  sub_1B0CE62B0((uint64_t)&v29, "PRAGMA ", 7u);
  if (a1[4]) {
    sqlite3_str_appendf((sqlite3_str *)&v29, "%Q.", a1[4]);
  }
  uint64_t v18 = (const char **)v8[4];
  uint64_t v19 = *v18;
  if (*v18)
  {
    int v20 = strlen(*v18);
    uint64_t v16 = v20 & 0x3FFFFFFF;
    if ((v20 & 0x3FFFFFFF) != 0)
    {
      uint64_t v21 = v33;
      if ((int)v33 + (int)v16 >= v31)
      {
        sub_1B0CE62B0((uint64_t)&v29, v19, v16);
        uint64_t v22 = a1[3];
        if (!v22) {
          goto LABEL_20;
        }
        goto LABEL_19;
      }
      LODWORD(v33) = v33 + v16;
      memcpy(&v30[v21], v19, v20 & 0x3FFFFFFF);
    }
  }
  uint64_t v22 = a1[3];
  if (v22) {
LABEL_19:
  }
    sqlite3_str_appendf((sqlite3_str *)&v29, "=%Q", v16, v22);
LABEL_20:
  if (v30 && (v30[v33] = 0, v32) && (v33 & 0x40000000000) == 0)
  {
    uint64_t v23 = (unsigned __int8 *)sub_1B0D06044(&v29);
    if (!v23) {
      return 7;
    }
  }
  else
  {
    uint64_t v23 = v30;
    if (!v30) {
      return 7;
    }
  }
  uint64_t v24 = sub_1B0C7EAC0(v8[3], v23, 0xFFFFFFFFLL, 128, 0, a1 + 1, 0, v17);
  uint64_t v25 = (void (**)(unsigned __int8 *))&off_1EB21C9E8;
  if (dword_1EB21C9C0)
  {
    if ((void)xmmword_1EB2201B0) {
      xmmword_1EB21CA40(xmmword_1EB2201B0);
    }
    qword_1EB220108[0] -= (int)off_1EB21C9F8(v23);
    --qword_1EB220150;
    off_1EB21C9E8(v23);
    uint64_t v23 = (unsigned __int8 *)xmmword_1EB2201B0;
    if (!(void)xmmword_1EB2201B0) {
      goto LABEL_32;
    }
    uint64_t v25 = (void (**)(unsigned __int8 *))&xmmword_1EB21CA50;
  }
  (*v25)(v23);
LABEL_32:
  if (v24)
  {
    unsigned int v26 = sqlite3_errmsg((sqlite3 *)v8[3]);
    _OWORD v8[2] = sqlite3_mprintf("%s", v26);
  }
  else
  {
    uint64_t v27 = (sqlite3_stmt *)a1[1];
    ++a1[2];
    if (sqlite3_step(v27) == 100)
    {
      return 0;
    }
    else
    {
      uint64_t v24 = sqlite3_finalize((sqlite3_stmt *)a1[1]);
      a1[1] = 0;
      sub_1B0D26894((uint64_t)a1);
    }
  }
  return v24;
}

uint64_t sub_1B0D26798(uint64_t a1)
{
  uint64_t v3 = a1 + 8;
  uint64_t v2 = *(sqlite3_stmt **)(a1 + 8);
  *(void *)(a1 + 16) = *(void *)(v3 + 8) + 1;
  if (sqlite3_step(v2) == 100) {
    return 0;
  }
  uint64_t v5 = sqlite3_finalize(*(sqlite3_stmt **)(a1 + 8));
  *(void *)(a1 + 8) = 0;
  sub_1B0D26894(a1);
  return v5;
}

BOOL sub_1B0D267F4(uint64_t a1)
{
  return *(void *)(a1 + 8) == 0;
}

uint64_t sub_1B0D26804(sqlite3_stmt **a1, sqlite3_context *a2, int iCol)
{
  int v4 = *((unsigned __int8 *)*a1 + 41);
  BOOL v5 = __OFSUB__(iCol, v4);
  int v6 = iCol - v4;
  if (v6 < 0 != v5)
  {
    int v7 = sqlite3_column_value(a1[1], iCol);
    sqlite3_result_value(a2, v7);
  }
  else if (a2)
  {
    sub_1B0CEA530((uint64_t)a2, (char *)a1[v6 + 3], -1, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
  }
  else
  {
    sub_1B0CE1978(97498);
  }
  return 0;
}

uint64_t sub_1B0D26884(uint64_t a1, void *a2)
{
  *a2 = *(void *)(a1 + 16);
  return 0;
}

uint64_t sub_1B0D26894(uint64_t a1)
{
  uint64_t result = sqlite3_finalize(*(sqlite3_stmt **)(a1 + 8));
  *(void *)(a1 + 8) = 0;
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3)
  {
    int v4 = &off_1EB21C9E8;
    if (!dword_1EB21C9C0)
    {
LABEL_7:
      uint64_t result = (*v4)(v3);
      goto LABEL_8;
    }
    if ((void)xmmword_1EB2201B0) {
      xmmword_1EB21CA40(xmmword_1EB2201B0);
    }
    qword_1EB220108[0] -= (int)off_1EB21C9F8(v3);
    --qword_1EB220150;
    uint64_t result = off_1EB21C9E8(v3);
    uint64_t v3 = xmmword_1EB2201B0;
    if ((void)xmmword_1EB2201B0)
    {
      int v4 = &xmmword_1EB21CA50;
      goto LABEL_7;
    }
  }
LABEL_8:
  *(void *)(a1 + 24) = 0;
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5)
  {
    int v6 = &off_1EB21C9E8;
    if (!dword_1EB21C9C0)
    {
LABEL_14:
      uint64_t result = (*v6)(v5);
      goto LABEL_15;
    }
    if ((void)xmmword_1EB2201B0) {
      xmmword_1EB21CA40(xmmword_1EB2201B0);
    }
    qword_1EB220108[0] -= (int)off_1EB21C9F8(v5);
    --qword_1EB220150;
    uint64_t result = off_1EB21C9E8(v5);
    uint64_t v5 = xmmword_1EB2201B0;
    if ((void)xmmword_1EB2201B0)
    {
      int v6 = &xmmword_1EB21CA50;
      goto LABEL_14;
    }
  }
LABEL_15:
  *(void *)(a1 + 32) = 0;
  return result;
}

void sub_1B0D269E4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = *(void *)a1;
  int v11 = *(_DWORD *)(a2 + 64);
  unint64_t v12 = 8 * (v11 + 2);
  if (v11 + 3 >= *(_DWORD *)(*(void *)a1 + 144)) {
    sub_1B0CEF2BC(a1, "too many columns on %s", (uint64_t)a3, a4, a5, a6, a7, a8, *(void *)a2);
  }
  uint64_t v13 = *(void **)(a2 + 72);
  if (!v13)
  {
    uint64_t v13 = (void *)sub_1B0D05DC0(v10, v12);
    if (!v13) {
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (*(void *)(v10 + 512) <= (unint64_t)v13) {
    goto LABEL_12;
  }
  if (*(void *)(v10 + 496) <= (unint64_t)v13)
  {
    if (v12 >= 0x81) {
      goto LABEL_12;
    }
LABEL_13:
    uint64_t v14 = *(int *)(a2 + 64);
    *(_DWORD *)(a2 + 64) = v14 + 1;
    v13[v14] = a3;
    v13[v14 + 1] = 0;
    *(void *)(a2 + 72) = v13;
    return;
  }
  if (*(void *)(v10 + 504) <= (unint64_t)v13 && v12 <= *(unsigned __int16 *)(v10 + 438)) {
    goto LABEL_13;
  }
LABEL_12:
  uint64_t v13 = (void *)sub_1B0D05E6C(v10, v13, v12);
  if (v13) {
    goto LABEL_13;
  }
LABEL_15:
  if (a3)
  {
    sub_1B0D05C10((void *)v10, a3);
  }
}

void *sub_1B0D26B04(void *result)
{
  uint64_t v1 = result;
  if (*((int *)result + 10) <= 2)
  {
    *((_DWORD *)result + 10) = 2;
LABEL_13:
    uint64_t v9 = (long long *)v1[4];
    uint64_t v10 = v1 + 87;
    if (v9 != (long long *)(v1 + 87))
    {
      long long v11 = *v9;
      long long v12 = v9[1];
      long long v13 = v9[3];
      *(_OWORD *)(v1 + 91) = v9[2];
      *(_OWORD *)(v1 + 93) = v13;
      *uint64_t v10 = v11;
      *(_OWORD *)(v1 + 89) = v12;
      if (v9) {
        uint64_t result = sub_1B0D05C10(v1, v9);
      }
      v1[4] = v10;
    }
    return result;
  }
  uint64_t v2 = 0;
  uint64_t v3 = 2;
  int v4 = 2;
  do
  {
    uint64_t v5 = v1[4];
    int v6 = (void **)(v5 + v2 + 64);
    if (*(void *)(v5 + v2 + 72))
    {
      if (v3 > v4)
      {
        long long v7 = *(_OWORD *)(v5 + v2 + 80);
        int v8 = (_OWORD *)(v5 + 32 * v4);
        *int v8 = *(_OWORD *)v6;
        v8[1] = v7;
      }
      ++v4;
    }
    else
    {
      if (*v6) {
        uint64_t result = sub_1B0D05C10(v1, *v6);
      }
      *int v6 = 0;
    }
    ++v3;
    v2 += 32;
  }
  while (v3 < *((int *)v1 + 10));
  *((_DWORD *)v1 + 10) = v4;
  if (v4 <= 2) {
    goto LABEL_13;
  }
  return result;
}

void *sub_1B0D26BF8(void *a1, void *a2)
{
  uint64_t v4 = a2[2];
  while (v4)
  {
    uint64_t v6 = v4;
    uint64_t v4 = *(void *)(v4 + 40);
    if (!a1[102] && *((unsigned char *)a2 + 63) != 1) {
      sub_1B0C796D8(*(void *)(v6 + 48) + 32, *(unsigned __int8 **)v6, 0);
    }
    sub_1B0D23288(a1, v6);
  }
  if (*((unsigned char *)a2 + 63) == 1)
  {
    if (!a1[102])
    {
      uint64_t v18 = (uint64_t *)a2[10];
      a2[10] = 0;
      if (v18)
      {
        do
        {
          uint64_t v20 = *v18;
          if (*v18)
          {
            uint64_t v19 = (uint64_t **)(v20 + 608);
            uint64_t v20 = *(void *)(v20 + 608);
          }
          else
          {
            uint64_t v19 = (uint64_t **)(a2 + 10);
          }
          uint64_t v21 = (uint64_t *)v18[5];
          *uint64_t v19 = v18;
          v18[5] = v20;
          uint64_t v18 = v21;
        }
        while (v21);
      }
    }
    long long v12 = (void *)a2[9];
    if (v12)
    {
      int v13 = *((_DWORD *)a2 + 16);
      if (v13 < 1) {
        goto LABEL_39;
      }
      uint64_t v14 = (void *)*v12;
      if (v14)
      {
        sub_1B0D05C10(a1, v14);
        int v13 = *((_DWORD *)a2 + 16);
      }
      if (v13 >= 3)
      {
        for (uint64_t i = 2; i < v13; ++i)
        {
          uint64_t v16 = *(void **)(a2[9] + 8 * i);
          if (v16)
          {
            sub_1B0D05C10(a1, v16);
            int v13 = *((_DWORD *)a2 + 16);
          }
        }
      }
      long long v12 = (void *)a2[9];
      if (v12) {
LABEL_39:
      }
        sub_1B0D05C10(a1, v12);
    }
  }
  else
  {
    if (!*((unsigned char *)a2 + 63))
    {
      uint64_t v5 = a2[9];
      if (!v5) {
        goto LABEL_40;
      }
      while (1)
      {
        if (!a1[102])
        {
          uint64_t v8 = *(void *)(v5 + 24);
          uint64_t v9 = *(void *)(v5 + 32);
          if (v9)
          {
            *(void *)(v9 + 24) = v8;
            uint64_t v10 = *(void *)(v5 + 24);
            if (!v10) {
              goto LABEL_10;
            }
          }
          else
          {
            if (v8) {
              uint64_t v11 = *(void *)(v5 + 24);
            }
            else {
              uint64_t v11 = v5;
            }
            sub_1B0C796D8(a2[12] + 80, *(unsigned __int8 **)(v11 + 16), v8);
            uint64_t v10 = *(void *)(v5 + 24);
            if (!v10) {
              goto LABEL_10;
            }
          }
          *(void *)(v10 + 32) = *(void *)(v5 + 32);
        }
LABEL_10:
        sub_1B0CD41FC(a1, *(void **)(v5 + 48));
        sub_1B0CD41FC(a1, *(void **)(v5 + 56));
        uint64_t v7 = *(void *)(v5 + 8);
        sub_1B0D05C10(a1, (void *)v5);
        uint64_t v5 = v7;
        if (!v7) {
          goto LABEL_40;
        }
      }
    }
    uint64_t v17 = a2[8];
    if (v17) {
      sub_1B0CA0FA8(a1, v17, 1);
    }
  }
LABEL_40:
  uint64_t v22 = (void *)a2[1];
  if (v22)
  {
    int v23 = *((__int16 *)a2 + 27);
    if (v23 >= 1)
    {
      int v24 = 0;
      do
      {
        if (*v22)
        {
          sub_1B0D05C10(a1, (void *)*v22);
          LOWORD(v23) = *((_WORD *)a2 + 27);
        }
        ++v24;
        v22 += 2;
      }
      while (v24 < (__int16)v23);
      uint64_t v22 = (void *)a2[1];
    }
    sub_1B0D15C20(a1, v22);
    if (!*((unsigned char *)a2 + 63))
    {
      uint64_t v25 = (void *)a2[10];
      if (v25) {
        sub_1B0D270DC(a1, v25);
      }
    }
    if (!a1[102])
    {
      a2[1] = 0;
      *((_WORD *)a2 + 27) = 0;
      if (!*((unsigned char *)a2 + 63)) {
        a2[10] = 0;
      }
    }
  }
  if (*a2) {
    sub_1B0D05C10(a1, (void *)*a2);
  }
  unsigned int v26 = (void *)a2[3];
  if (v26) {
    sub_1B0D05C10(a1, v26);
  }
  uint64_t v27 = (void *)a2[4];
  if (v27) {
    sub_1B0D270DC(a1, v27);
  }

  return sub_1B0D05C10(a1, a2);
}

void *sub_1B0D26EA8(void *result, uint64_t a2)
{
  uint64_t v2 = *(void **)(a2 + 8);
  if (v2)
  {
    uint64_t v4 = result;
    int v5 = *(__int16 *)(a2 + 54);
    if (v5 >= 1)
    {
      int v6 = 0;
      do
      {
        if (*v2)
        {
          sub_1B0D05C10(v4, (void *)*v2);
          LOWORD(v5) = *(_WORD *)(a2 + 54);
        }
        ++v6;
        v2 += 2;
      }
      while (v6 < (__int16)v5);
      uint64_t v2 = *(void **)(a2 + 8);
    }
    uint64_t result = sub_1B0D15C20(v4, v2);
    if (!*(unsigned char *)(a2 + 63))
    {
      uint64_t v7 = *(void **)(a2 + 80);
      if (v7) {
        uint64_t result = sub_1B0D270DC(v4, v7);
      }
    }
    if (!v4[102])
    {
      *(void *)(a2 + 8) = 0;
      *(_WORD *)(a2 + 54) = 0;
      if (!*(unsigned char *)(a2 + 63)) {
        *(void *)(a2 + 80) = 0;
      }
    }
  }
  return result;
}

uint64_t sub_1B0D26F5C(unsigned __int8 **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *a1 + 1;
  *a1 = v2;
  uint64_t v3 = *v1;
  if (v3 >= 0xC0)
  {
    int v4 = byte_1B0DE211A[(v3 - 192)];
    if ((*v2 & 0xC0) == 0x80)
    {
      int v5 = v1 + 2;
      do
      {
        *a1 = v5;
        LODWORD(v3) = *(v5 - 1) & 0x3F | (v4 << 6);
        char v6 = *v5++;
        int v4 = v3;
      }
      while ((v6 & 0xC0) == 0x80);
    }
    else
    {
      LODWORD(v3) = byte_1B0DE211A[(v3 - 192)];
    }
    if (v3 >> 11 == 27 || v3 < 0x80 || v3 >> 1 == 0x7FFF) {
      return 65533;
    }
    else {
      return v3;
    }
  }
  return v3;
}

uint64_t sub_1B0D26FE8(unsigned char *a1, int a2)
{
  if (a2 < 0) {
    unint64_t v2 = -1;
  }
  else {
    unint64_t v2 = (unint64_t)&a1[a2];
  }
  unsigned int v3 = *a1;
  uint64_t v4 = 0;
  if (*a1) {
    BOOL v5 = v2 > (unint64_t)a1;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5)
  {
    do
    {
      if (v3 < 0xC0)
      {
        unsigned int v7 = *++a1;
        unsigned int v3 = v7;
      }
      else
      {
        do
        {
          unsigned int v9 = *++a1;
          unsigned int v3 = v9;
        }
        while ((v9 & 0xC0) == 0x80);
      }
      uint64_t v4 = (v4 + 1);
      if (v3) {
        BOOL v8 = (unint64_t)a1 >= v2;
      }
      else {
        BOOL v8 = 1;
      }
    }
    while (!v8);
  }
  return v4;
}

void *sub_1B0D27040(void *a1, void *a2)
{
  do
  {
    BOOL v5 = (void *)a2[4];
    if (*a2) {
      sub_1B0D270DC(a1, (void *)*a2);
    }
    char v6 = (unsigned __int8 *)a2[1];
    if (v6) {
      sub_1B0D1DF88(a1, v6);
    }
    unsigned int v7 = (void *)a2[2];
    if (v7) {
      sub_1B0D270DC(a1, v7);
    }
    BOOL v8 = (unsigned __int8 *)a2[3];
    if (v8) {
      sub_1B0D1DF88(a1, v8);
    }
    unsigned int v9 = (void *)a2[6];
    if (v9) {
      sub_1B0D05C10(a1, v9);
    }
    uint64_t result = sub_1B0D05C10(a1, a2);
    a2 = v5;
  }
  while (v5);
  return result;
}

void *sub_1B0D270DC(void *a1, void *a2)
{
  int v4 = *(_DWORD *)a2 + 1;
  uint64_t v5 = 1;
  do
  {
    if (a2[v5]) {
      sub_1B0D1DF88(a1);
    }
    char v6 = (void *)a2[v5 + 1];
    if (v6) {
      sub_1B0D15C20(a1, v6);
    }
    --v4;
    v5 += 3;
  }
  while (v4 > 1);

  return sub_1B0D15C20(a1, a2);
}

uint64_t sub_1B0D2719C(uint64_t a1, uint64_t a2, uint64_t a3, char *__s, uint64_t k, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v8 = __s;
  uint64_t v11 = *(void *)a1;
  if (a3) {
    goto LABEL_14;
  }
  if (!__s)
  {
    a3 = *(void *)(v11 + 16);
    if (!a3) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  uint64_t v12 = *(void *)(v11 + 656);
  if (v12)
  {
    int v13 = *__s;
    if (*__s)
    {
      unsigned int v14 = 0;
      int v15 = __s + 1;
      do
      {
        unsigned int v14 = -1640531535 * (v14 + byte_1B0DE1758[v13]);
        int v16 = *v15++;
        int v13 = v16;
      }
      while (v16);
    }
    else
    {
      unsigned int v14 = 0;
    }
    unint64_t v54 = (_DWORD *)(v12 + 16 * (v14 % *(_DWORD *)(v11 + 640)));
    uint64_t v17 = (uint64_t *)(v54 + 2);
    int v18 = *v54;
    if (v18)
    {
      while (1)
      {
LABEL_81:
        uint64_t v17 = (uint64_t *)*v17;
        unsigned int v55 = (unsigned char *)v17[3];
        for (uint64_t i = __s; ; ++i)
        {
          uint64_t v57 = *v55;
          uint64_t v58 = *i;
          if (v57 != v58) {
            break;
          }
          if (!*v55) {
            goto LABEL_12;
          }
LABEL_83:
          ++v55;
        }
        if (byte_1B0DE1758[v57] == byte_1B0DE1758[v58]) {
          goto LABEL_83;
        }
        if (!--v18)
        {
          uint64_t v17 = &qword_1E9B52220;
          goto LABEL_12;
        }
      }
    }
  }
  else
  {
    uint64_t v17 = (uint64_t *)(v11 + 648);
    int v18 = *(_DWORD *)(v11 + 644);
    if (v18) {
      goto LABEL_81;
    }
  }
  uint64_t v17 = &qword_1E9B52220;
LABEL_12:
  uint64_t v19 = v17[2];
  if (v19)
  {
    uint64_t v20 = v19 + 40 * a2;
    a3 = v20 - 40;
    if (v20 != 40)
    {
LABEL_14:
      if (*(void *)(a3 + 24)) {
        return a3;
      }
    }
  }
LABEL_15:
  if (*(void *)(v11 + 392))
  {
    if (!__s) {
      goto LABEL_38;
    }
    unint64_t v21 = strlen(__s) + 1;
    uint64_t v22 = (void *)sub_1B0D05DC0(v11, v21);
    if (!v22) {
      goto LABEL_33;
    }
    int v23 = v22;
    memcpy(v22, v8, v21);
    (*(void (**)(void, uint64_t, uint64_t, void *))(v11 + 392))(*(void *)(v11 + 408), v11, a2, v23);
    sub_1B0D05C10((void *)v11, v23);
  }
  if (*(void *)(v11 + 400))
  {
    uint64_t v24 = sub_1B0D05DC0(v11, 0x40uLL);
    if (v24)
    {
      uint64_t v25 = v24;
      *(_OWORD *)(v24 + 32) = 0u;
      *(_OWORD *)(v24 + 48) = 0u;
      *(_OWORD *)uint64_t v24 = 0u;
      *(_OWORD *)(v24 + 16) = 0u;
      *(_WORD *)(v24 + 20) = 1;
      *(void *)(v24 + 24) = v11;
      sub_1B0C79BBC(v24, v8, -1, 1u, 0);
      int v26 = *(unsigned __int16 *)(v25 + 20);
      if ((~v26 & 0x202) != 0 || *(unsigned char *)(v25 + 22) != 2)
      {
        if (v26)
        {
LABEL_28:
          if ((*(_WORD *)(v25 + 20) & 0x9000) != 0 || *(_DWORD *)(v25 + 32)) {
            sub_1B0D180E4(v25);
          }
          sub_1B0D05C10(*(void **)(v25 + 24), (void *)v25);
          goto LABEL_32;
        }
        uint64_t v27 = sub_1B0D18254((int *)v25, 2);
      }
      else
      {
        uint64_t v27 = *(void *)(v25 + 8);
      }
      if (v27) {
        (*(void (**)(void, uint64_t, void))(v11 + 400))(*(void *)(v11 + 408), v11, *(unsigned __int8 *)(v11 + 100));
      }
      goto LABEL_28;
    }
  }
LABEL_32:
  if (v8)
  {
LABEL_33:
    uint64_t v28 = *(void *)(v11 + 656);
    if (v28)
    {
      int v29 = *v8;
      if (*v8)
      {
        unsigned int v30 = 0;
        unsigned int v31 = (unsigned __int8 *)(v8 + 1);
        do
        {
          unsigned int v30 = -1640531535 * (v30 + byte_1B0DE1758[v29]);
          int v32 = *v31++;
          int v29 = v32;
        }
        while (v32);
      }
      else
      {
        unsigned int v30 = 0;
      }
      uint64_t v49 = (_DWORD *)(v28 + 16 * (v30 % *(_DWORD *)(v11 + 640)));
      uint64_t v33 = (uint64_t *)(v49 + 2);
      int v34 = *v49;
      if (v34)
      {
        while (1)
        {
LABEL_71:
          uint64_t v33 = (uint64_t *)*v33;
          unint64_t v50 = (unsigned char *)v33[3];
          for (uint64_t j = v8; ; ++j)
          {
            uint64_t v52 = *v50;
            uint64_t v53 = *j;
            if (v52 != v53) {
              break;
            }
            if (!*v50) {
              goto LABEL_42;
            }
LABEL_73:
            ++v50;
          }
          if (byte_1B0DE1758[v52] == byte_1B0DE1758[v53]) {
            goto LABEL_73;
          }
          if (!--v34)
          {
            uint64_t v33 = &qword_1E9B52220;
            goto LABEL_42;
          }
        }
      }
    }
    else
    {
      uint64_t v33 = (uint64_t *)(v11 + 648);
      int v34 = *(_DWORD *)(v11 + 644);
      if (v34) {
        goto LABEL_71;
      }
    }
    uint64_t v33 = &qword_1E9B52220;
LABEL_42:
    uint64_t v35 = v33[2];
    if (v35)
    {
      uint64_t v36 = v35 + 40 * a2;
      a3 = v36 - 40;
      if (v36 != 40) {
        goto LABEL_44;
      }
    }
LABEL_67:
    sub_1B0CEF2BC(a1, "no such collation sequence: %s", a3, (uint64_t)__s, k, a6, a7, a8, (char)v8);
    a3 = 0;
    *(_DWORD *)(a1 + 24) = 257;
    return a3;
  }
LABEL_38:
  a3 = *(void *)(v11 + 16);
  if (!a3) {
    goto LABEL_67;
  }
LABEL_44:
  uint64_t v37 = *(void *)(a3 + 24);
  if (v37) {
    return a3;
  }
  char v38 = *(unsigned char **)a3;
  while (2)
  {
    if (!v38)
    {
      uint64_t v45 = *(void *)(v11 + 16);
      goto LABEL_65;
    }
    uint64_t v39 = *(void *)(v11 + 656);
    uint64_t v40 = (char *)(v11 + 648);
    __s = (char *)(v11 + 644);
    if (v39)
    {
      int v41 = *v38;
      if (*v38)
      {
        unsigned int v42 = 0;
        unsigned int v43 = (unsigned __int8 *)(*(void *)a3 + 1);
        do
        {
          unsigned int v42 = -1640531535 * (v42 + byte_1B0DE1758[v41]);
          int v44 = *v43++;
          int v41 = v44;
        }
        while (v44);
      }
      else
      {
        unsigned int v42 = 0;
      }
      unsigned int v46 = *(_DWORD *)(v11 + 640);
      uint64_t k = v42 / v46;
      __s = (char *)(v39 + 16 * (v42 % v46));
      uint64_t v40 = __s + 8;
    }
    int v47 = *(_DWORD *)__s;
    if (!*(_DWORD *)__s) {
      goto LABEL_63;
    }
    do
    {
      uint64_t v40 = *(char **)v40;
      __s = (char *)*((void *)v40 + 3);
      for (uint64_t k = *(void *)a3; ; ++k)
      {
        a6 = *__s;
        a7 = *(unsigned __int8 *)k;
        if (a6 != a7) {
          break;
        }
        if (!*__s) {
          goto LABEL_64;
        }
LABEL_58:
        ++__s;
      }
      a6 = byte_1B0DE1758[a6];
      a7 = byte_1B0DE1758[a7];
      if (a6 == a7) {
        goto LABEL_58;
      }
      --v47;
    }
    while (v47);
LABEL_63:
    uint64_t v40 = (char *)&qword_1E9B52220;
LABEL_64:
    uint64_t v45 = *((void *)v40 + 2) + 40 * byte_1B0DE258F[v37] - 40;
LABEL_65:
    if (!*(void *)(v45 + 24))
    {
      if (++v37 == 3) {
        goto LABEL_67;
      }
      continue;
    }
    break;
  }
  long long v59 = *(_OWORD *)(v45 + 16);
  *(_OWORD *)a3 = *(_OWORD *)v45;
  *(_OWORD *)(a3 + 16) = v59;
  *(void *)(a3 + 32) = 0;
  return a3;
}

uint64_t sub_1B0D27644(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  int v6 = a4;
  uint64_t v63 = 0;
  while (1)
  {
    int v10 = *a2;
    if (v10 != 174 && v10 != 181) {
      break;
    }
    a2 = (unsigned __int8 *)*((void *)a2 + 2);
  }
  if (v10 == 176) {
    int v10 = a2[2];
  }
  if (v10 == 173)
  {
    a2 = (unsigned __int8 *)*((void *)a2 + 2);
    int v10 = *a2;
    if ((v10 | 2) != 0x9B)
    {
      int v32 = sub_1B0D27644(a1, a2, a3, a4, &v63);
      uint64_t v23 = 0;
      uint64_t v24 = v63;
      if (v32 || !v63) {
        goto LABEL_124;
      }
      sub_1B0D1D730(v63);
      __int16 v33 = *(_WORD *)(v24 + 20);
      if ((v33 & 8) != 0)
      {
        *(double *)uint64_t v24 = -*(double *)v24;
      }
      else if (*(void *)v24 == 0x8000000000000000)
      {
        *(void *)uint64_t v24 = 0x43E0000000000000;
        *(_WORD *)(v24 + 20) = v33 & 0xF240 | 8;
      }
      else
      {
        *(void *)uint64_t v24 = -*(void *)v24;
      }
      sub_1B0CBCF8C(v24, (char)v6, a3);
      goto LABEL_123;
    }
    unint64_t v21 = "-";
    int v22 = -1;
    goto LABEL_38;
  }
  if (v10 != 36)
  {
    unint64_t v21 = &byte_1B0DE9952;
    int v22 = 1;
LABEL_38:
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    switch(v10)
    {
      case 117:
      case 153:
      case 155:
        if (a1)
        {
          uint64_t v24 = sub_1B0D05DC0(a1, 0x40uLL);
          if (!v24) {
            goto LABEL_100;
          }
        }
        else
        {
          uint64_t v24 = sub_1B0C7FC94(64);
          if (!v24) {
            goto LABEL_100;
          }
        }
        *(_OWORD *)(v24 + 32) = 0u;
        *(_OWORD *)(v24 + 48) = 0u;
        *(_OWORD *)uint64_t v24 = 0u;
        *(_OWORD *)(v24 + 16) = 0u;
        *(_WORD *)(v24 + 20) = 1;
        *(void *)(v24 + 24) = a1;
        if ((a2[5] & 8) != 0)
        {
          *(void *)uint64_t v24 = v22 * (uint64_t)*((int *)a2 + 2);
          *(_WORD *)(v24 + 20) = 4;
          if (v6 != 65) {
            goto LABEL_74;
          }
        }
        else
        {
          int v34 = (char *)sub_1B0C904AC(a1, "%s%s", v25, v26, v27, v28, v29, v30, (char)v21);
          if (!v34) {
            goto LABEL_100;
          }
          sub_1B0C79BBC(v24, v34, -1, 1u, sub_1B0CF5398);
          if (v6 != 65) {
            goto LABEL_74;
          }
        }
        if ((v10 & 0xFFFFFFFD) == 0x99)
        {
          __int16 v36 = *(_WORD *)(v24 + 20);
          if ((v36 & 4) != 0) {
            goto LABEL_75;
          }
          if ((v36 & 0x28) != 0)
          {
            if ((v36 & 0x20) != 0)
            {
LABEL_73:
              *(_WORD *)(v24 + 20) = v36 & 0xF240 | 4;
              goto LABEL_75;
            }
            double v37 = *(double *)v24;
            if (*(double *)v24 >= -9.22337204e18
              && v37 <= 9.22337204e18
              && v37 == (double)(uint64_t)v37
              && (unint64_t)((uint64_t)v37 + 0x7FFFFFFFFFFFFFFFLL) <= 0xFFFFFFFFFFFFFFFDLL)
            {
              *(void *)uint64_t v24 = (uint64_t)v37;
              goto LABEL_73;
            }
          }
          else if ((v36 & 2) != 0)
          {
            sub_1B0CEE968(v24, 1);
          }
LABEL_75:
          __int16 v38 = *(_WORD *)(v24 + 20);
          if ((v38 & 0x2C) != 0)
          {
            v38 &= ~2u;
            *(_WORD *)(v24 + 20) = v38;
          }
          if (a3 != 1)
          {
            if ((v38 & 2) == 0)
            {
              uint64_t v23 = 0;
              *(unsigned char *)(v24 + 22) = a3;
LABEL_124:
              *a5 = v24;
              return v23;
            }
            if (*(unsigned __int8 *)(v24 + 22) != a3)
            {
              uint64_t v23 = sub_1B0CD43EC((int *)v24, a3);
              goto LABEL_124;
            }
          }
LABEL_123:
          uint64_t v23 = 0;
          goto LABEL_124;
        }
LABEL_74:
        sub_1B0CBCF8C(v24, (char)v6, 1);
        goto LABEL_75;
      case 121:
        if (a1)
        {
          uint64_t v24 = sub_1B0D05DC0(a1, 0x40uLL);
          if (!v24) {
            goto LABEL_100;
          }
        }
        else
        {
          uint64_t v24 = sub_1B0C7FC94(64);
          if (!v24) {
            goto LABEL_100;
          }
        }
        uint64_t v23 = 0;
        *(_OWORD *)(v24 + 32) = 0u;
        *(_OWORD *)(v24 + 48) = 0u;
        *(_OWORD *)uint64_t v24 = 0u;
        *(_OWORD *)(v24 + 16) = 0u;
        *(void *)(v24 + 24) = a1;
        *(_WORD *)(v24 + 20) = 1;
        goto LABEL_124;
      case 154:
        if (a1)
        {
          uint64_t v24 = sub_1B0D05DC0(a1, 0x40uLL);
          if (!v24)
          {
LABEL_100:
            if (!*(unsigned char *)(a1 + 103) && !*(unsigned char *)(a1 + 104))
            {
              *(unsigned char *)(a1 + 103) = 1;
              if (*(int *)(a1 + 220) >= 1) {
                *(_DWORD *)(a1 + 424) = 1;
              }
              ++*(_DWORD *)(a1 + 432);
              *(_WORD *)(a1 + 436) = 0;
              uint64_t v52 = *(void *)(a1 + 344);
              if (v52)
              {
                sub_1B0CEF2BC(v52, "out of memory", v25, v26, v27, v28, v29, v30, v62);
                for (uint64_t i = *(void *)(a1 + 344); ; ++*(_DWORD *)(i + 48))
                {
                  *(_DWORD *)(i + 24) = 7;
                  uint64_t i = *(void *)(i + 256);
                  if (!i) {
                    break;
                  }
                }
              }
            }
            if (v24)
            {
              if ((*(_WORD *)(v24 + 20) & 0x9000) != 0 || *(_DWORD *)(v24 + 32)) {
                sub_1B0D180E4(v24);
              }
              sub_1B0D05C10(*(void **)(v24 + 24), (void *)v24);
            }
            return 7;
          }
        }
        else
        {
          uint64_t v24 = sub_1B0C7FC94(64);
          if (!v24) {
            goto LABEL_100;
          }
        }
        *(_OWORD *)(v24 + 32) = 0u;
        *(_OWORD *)(v24 + 48) = 0u;
        *(_OWORD *)uint64_t v24 = 0u;
        *(_OWORD *)(v24 + 16) = 0u;
        *(_WORD *)(v24 + 20) = 1;
        *(void *)(v24 + 24) = a1;
        uint64_t v39 = *((void *)a2 + 1);
        unsigned int v40 = strlen((const char *)(v39 + 2)) & 0x3FFFFFFF;
        int v41 = v40 - 1;
        if (!v40) {
          int v41 = 0;
        }
        uint64_t v42 = (v41 >> 1);
        unsigned int v43 = (char *)sub_1B0D05DC0(a1, (v42 + 1));
        if (!v43) {
          goto LABEL_120;
        }
        if (v40 < 3)
        {
          uint64_t v51 = 0;
          goto LABEL_119;
        }
        unint64_t v44 = v40 - 2;
        unint64_t v45 = 2;
        if (v44 > 2) {
          unint64_t v45 = v40 - 2;
        }
        if (v45 < 0x3F) {
          goto LABEL_96;
        }
        uint64_t v46 = 2;
        if (v44 > 2) {
          uint64_t v46 = v40 - 2;
        }
        unint64_t v47 = v46 - 1;
        if ((unint64_t)v43 >= (v47 & 0xFFFFFFFFFFFFFFFELL) + v39 + 4
          || v39 + 2 >= (unint64_t)&v43[(v47 >> 1) + 1])
        {
          uint64_t v55 = 0;
          unint64_t v56 = ((v45 - 1) >> 1) + 1;
          uint64_t v49 = v56 & 0x7FFFFFFFFFFFFFE0;
          unint64_t v48 = 2 * (v56 & 0x7FFFFFFFFFFFFFE0);
          uint64_t v57 = (const char *)(v39 + 34);
          v58.i64[0] = 0x4040404040404040;
          v58.i64[1] = 0x4040404040404040;
          v59.i64[0] = 0x909090909090909;
          v59.i64[1] = 0x909090909090909;
          do
          {
            uint64_t v60 = v57 - 32;
            int8x16x2_t v64 = vld2q_s8(v60);
            int8x16x2_t v65 = vld2q_s8(v57);
            uint64_t v61 = (int8x16_t *)&v43[v55 & 0x7FFFFFFFFFFFFFE0];
            *uint64_t v61 = vsliq_n_s8(vaddq_s8(vbicq_s8(v59, vceqzq_s8(vandq_s8(v64.val[1], v58))), v64.val[1]), vaddq_s8(vbicq_s8(v59, vceqzq_s8(vandq_s8(v64.val[0], v58))), v64.val[0]), 4uLL);
            v61[1] = vsliq_n_s8(vaddq_s8(vbicq_s8(v59, vceqzq_s8(vandq_s8(v65.val[1], v58))), v65.val[1]), vaddq_s8(vbicq_s8(v59, vceqzq_s8(vandq_s8(v65.val[0], v58))), v65.val[0]), 4uLL);
            v55 += 32;
            v57 += 64;
          }
          while (v49 != v55);
          if (v56 == v49) {
            goto LABEL_99;
          }
        }
        else
        {
LABEL_96:
          unint64_t v48 = 0;
        }
        uint64_t v49 = ((v48 + 2) >> 1) - 1;
        unint64_t v50 = &v43[v48 >> 1];
        do
        {
          *v50++ = ((((char)(2 * *(unsigned char *)(v39 + v48 + 3)) >> 7) & 0xF9) + *(unsigned char *)(v39 + v48 + 3)) & 0xF | (16 * ((((char)(2 * *(unsigned char *)(v39 + v48 + 2)) >> 7) & 0xF9) + *(unsigned char *)(v39 + v48 + 2)));
          v48 += 2;
          LODWORD(v49) = v49 + 1;
        }
        while (v48 < v44);
LABEL_99:
        uint64_t v51 = v49 & 0x7FFFFFFF;
LABEL_119:
        v43[v51] = 0;
LABEL_120:
        sub_1B0C79BBC(v24, v43, v42, 0, sub_1B0CF5398);
        goto LABEL_123;
      case 170:
        if (a1) {
          uint64_t v35 = sub_1B0D05DC0(a1, 0x40uLL);
        }
        else {
          uint64_t v35 = sub_1B0C7FC94(64);
        }
        uint64_t v23 = 0;
        uint64_t v24 = v35;
        if (v35)
        {
          *(_OWORD *)(v35 + 32) = 0u;
          *(_OWORD *)(v35 + 48) = 0u;
          *(_OWORD *)uint64_t v35 = 0u;
          *(_OWORD *)(v35 + 16) = 0u;
          *(void *)(v35 + 24) = a1;
          *(_WORD *)(v35 + 20) = 4;
          *(void *)uint64_t v35 = *(unsigned char *)(*((void *)a2 + 1) + 4) == 0;
        }
        goto LABEL_124;
      default:
        goto LABEL_124;
    }
  }
  uint64_t v11 = (unsigned char *)*((void *)a2 + 1);
  int v12 = *v11;
  if (!*v11)
  {
    LOBYTE(v18) = 67;
    goto LABEL_43;
  }
  int v13 = 0;
  unsigned int v14 = v11 + 1;
  uint64_t v15 = 67;
  while (1)
  {
    int v13 = byte_1B0DE1758[v12] | (v13 << 8);
    uint64_t v18 = 66;
    if (v13 > 1668050785)
    {
      if (v13 == 1668050786 || v13 == 1952807028) {
        goto LABEL_16;
      }
      goto LABEL_23;
    }
    if (v13 == 1651273570) {
      break;
    }
    if (v13 != 1667785074) {
      goto LABEL_23;
    }
LABEL_16:
    int v17 = *v14++;
    int v12 = v17;
    uint64_t v15 = v18;
    if (!v17) {
      goto LABEL_43;
    }
  }
  uint64_t v18 = 65;
  if (v15 == 67 || v15 == 69) {
    goto LABEL_16;
  }
LABEL_23:
  BOOL v20 = v13 == 1718382433 || v13 == 1919246700 || v13 == 1685026146;
  if (v20 && v15 == 67)
  {
    uint64_t v18 = 69;
    goto LABEL_16;
  }
  uint64_t v18 = v15;
  if ((v13 & 0xFFFFFF) != 0x696E74) {
    goto LABEL_16;
  }
  LOBYTE(v18) = 68;
LABEL_43:
  int v31 = v18;
  uint64_t v23 = sub_1B0D27644(a1, *((void *)a2 + 2), a3, v18, a5);
  if (*a5)
  {
    sub_1B0D195EC(*a5, v31, a3);
    sub_1B0CBCF8C(*a5, (char)v6, a3);
  }
  return v23;
}

uint64_t sub_1B0D27EF0(unsigned char *a1, uint64_t a2)
{
  int v3 = *a1;
  if (*a1)
  {
    uint64_t v5 = 0;
    int v6 = 0;
    unsigned int v7 = a1 + 1;
    int v8 = 67;
    while (1)
    {
      while (1)
      {
        int v6 = byte_1B0DE1758[v3] | (v6 << 8);
        if (v6 <= 1668050785) {
          break;
        }
        if (v6 != 1668050786 && v6 != 1952807028)
        {
LABEL_18:
          BOOL v10 = v6 == 1718382433 || v6 == 1919246700 || v6 == 1685026146;
          if (v10 && v8 == 67)
          {
            int v8 = 69;
          }
          else if ((v6 & 0xFFFFFF) == 0x696E74)
          {
            if (a2)
            {
              int v11 = 0;
              LOBYTE(v8) = 68;
              goto LABEL_44;
            }
            LOBYTE(v8) = 68;
            return (char)v8;
          }
          goto LABEL_4;
        }
        int v8 = 66;
LABEL_4:
        int v3 = *v7++;
        if (!v3) {
          goto LABEL_31;
        }
      }
      if (v6 != 1651273570)
      {
        if (v6 != 1667785074) {
          goto LABEL_18;
        }
        int v8 = 66;
        uint64_t v5 = v7;
        goto LABEL_4;
      }
      if (v8 != 69 && v8 != 67) {
        goto LABEL_18;
      }
      int v3 = *v7;
      if (v3 == 40) {
        uint64_t v5 = v7;
      }
      int v8 = 65;
      ++v7;
      if (!v3)
      {
LABEL_31:
        if (!a2) {
          return (char)v8;
        }
        int v14 = 0;
        if ((char)v8 > 66)
        {
          int v11 = 0;
        }
        else if (v5)
        {
          int v11 = *v5;
          if (*v5)
          {
            while ((unint64_t)v11 - 58 < 0xFFFFFFFFFFFFFFF6)
            {
              int v12 = *++v5;
              int v11 = v12;
              if (!v12) {
                goto LABEL_44;
              }
            }
            sub_1B0D22EF0(v5, &v14);
            int v11 = v14 / 4;
          }
        }
        else
        {
          int v11 = 4;
        }
LABEL_44:
        if (v11 >= 254) {
          LOBYTE(v11) = -2;
        }
        *(unsigned char *)(a2 + 10) = v11 + 1;
        return (char)v8;
      }
    }
  }
  if (a2)
  {
    int v11 = 0;
    LOBYTE(v8) = 67;
    goto LABEL_44;
  }
  LOBYTE(v8) = 67;
  return (char)v8;
}

unint64_t sub_1B0D280E0(uint64_t a1, unint64_t a2, int a3)
{
  if (a3 >= 0) {
    int v5 = a3;
  }
  else {
    int v5 = a3 + 1;
  }
  unint64_t result = sub_1B0D05DC0(a1, ((v5 >> 1) + 1));
  if (result)
  {
    if (a3 < 2)
    {
      uint64_t v21 = 0;
LABEL_24:
      *(unsigned char *)(result + v21) = 0;
      return result;
    }
    unint64_t v7 = (a3 - 1);
    unint64_t v8 = 2;
    if (v7 > 2) {
      unint64_t v8 = (a3 - 1);
    }
    if (v8 < 0x3F) {
      goto LABEL_20;
    }
    uint64_t v9 = 2;
    if (v7 > 2) {
      uint64_t v9 = (a3 - 1);
    }
    unint64_t v10 = v9 - 1;
    if (result < (v10 & 0xFFFFFFFFFFFFFFFELL) + a2 + 2 && result + (v10 >> 1) + 1 > a2)
    {
LABEL_20:
      unint64_t v15 = 0;
    }
    else
    {
      uint64_t v12 = 0;
      unint64_t v13 = ((v8 - 1) >> 1) + 1;
      uint64_t v14 = v13 & 0x7FFFFFFFFFFFFFE0;
      unint64_t v15 = 2 * (v13 & 0x7FFFFFFFFFFFFFE0);
      int v16 = (const char *)(a2 + 32);
      v17.i64[0] = 0x4040404040404040;
      v17.i64[1] = 0x4040404040404040;
      v18.i64[0] = 0x909090909090909;
      v18.i64[1] = 0x909090909090909;
      do
      {
        uint64_t v19 = v16 - 32;
        int8x16x2_t v23 = vld2q_s8(v19);
        int8x16x2_t v24 = vld2q_s8(v16);
        BOOL v20 = (int8x16_t *)(result + (v12 & 0x7FFFFFFFFFFFFFE0));
        *BOOL v20 = vsliq_n_s8(vaddq_s8(vbicq_s8(v18, vceqzq_s8(vandq_s8(v23.val[1], v17))), v23.val[1]), vaddq_s8(vbicq_s8(v18, vceqzq_s8(vandq_s8(v23.val[0], v17))), v23.val[0]), 4uLL);
        v20[1] = vsliq_n_s8(vaddq_s8(vbicq_s8(v18, vceqzq_s8(vandq_s8(v24.val[1], v17))), v24.val[1]), vaddq_s8(vbicq_s8(v18, vceqzq_s8(vandq_s8(v24.val[0], v17))), v24.val[0]), 4uLL);
        v12 += 32;
        v16 += 64;
      }
      while (v14 != v12);
      if (v13 == v14) {
        goto LABEL_23;
      }
    }
    int v22 = (unsigned char *)(result + (v15 >> 1));
    uint64_t v14 = ((v15 + 2) >> 1) - 1;
    do
    {
      *v22++ = ((((char)(2 * *(unsigned char *)(a2 + v15 + 1)) >> 7) & 0xF9) + *(unsigned char *)(a2 + v15 + 1)) & 0xF | (16 * ((((char)(2 * *(unsigned char *)(a2 + v15)) >> 7) & 0xF9) + *(unsigned char *)(a2 + v15)));
      v15 += 2;
      LODWORD(v14) = v14 + 1;
    }
    while (v15 < v7);
LABEL_23:
    uint64_t v21 = v14 & 0x7FFFFFFF;
    goto LABEL_24;
  }
  return result;
}

void sub_1B0D28988(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v9 = a2 == 12;
  if (a2 == 12) {
    unint64_t v10 = "ROLLBACK";
  }
  else {
    unint64_t v10 = "COMMIT";
  }
  uint64_t v11 = *a1;
  uint64_t v12 = *(uint64_t (**)(void, uint64_t, const char *, void, void, uint64_t))(*a1 + 528);
  if (v12 && !*(unsigned char *)(v11 + 197) && !*((unsigned char *)a1 + 302))
  {
    int v16 = v12(*(void *)(v11 + 536), 22, v10, 0, 0, a1[46]);
    if (v16 == 1)
    {
      int v17 = 23;
      int8x16_t v18 = "not authorized";
    }
    else
    {
      if ((v16 & 0xFFFFFFFD) == 0)
      {
        if (v16) {
          return;
        }
        goto LABEL_7;
      }
      int v17 = 1;
      int8x16_t v18 = "authorizer malfunction";
    }
    sub_1B0CEF2BC((uint64_t)a1, v18, (uint64_t)v10, a4, a5, a6, a7, a8, v19);
    *((_DWORD *)a1 + 6) = v17;
    return;
  }
LABEL_7:
  uint64_t v13 = a1[2];
  if (v13) {
    goto LABEL_12;
  }
  if (!a1[21] && (*(unsigned char *)(*a1 + 96) & 8) == 0) {
    *((unsigned char *)a1 + 35) = 1;
  }
  uint64_t v13 = sub_1B0CEF480(a1, a2, (uint64_t)v10, a4, a5, a6, a7, a8);
  if (v13)
  {
LABEL_12:
    int v14 = *(_DWORD *)(v13 + 144);
    if (*(_DWORD *)(v13 + 148) <= v14)
    {
      sub_1B0D25510(v13, 1, 1, v9, 0, a6, a7, a8);
    }
    else
    {
      *(_DWORD *)(v13 + 144) = v14 + 1;
      uint64_t v15 = *(void *)(v13 + 136) + 40 * v14;
      *(void *)uint64_t v15 = 0x100000001;
      *(_DWORD *)(v15 + 8) = v9;
      *(void *)(v15 + 12) = 0;
      *(void *)(v15 + 28) = 0;
      *(void *)(v15 + 20) = 0;
      *(_DWORD *)(v15 + 36) = 0;
    }
  }
}

uint64_t *sub_1B0D28AD8(uint64_t *result, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return result;
  }
  int v3 = *(const void **)a3;
  if (!*(void *)a3) {
    return result;
  }
  uint64_t v5 = (uint64_t)result;
  size_t v6 = *(unsigned int *)(a3 + 8);
  unint64_t result = (uint64_t *)sub_1B0D05DC0(*result, v6 + 1);
  if (!result) {
    return result;
  }
  unint64_t v7 = result;
  memcpy(result, v3, v6);
  *((unsigned char *)v7 + v6) = 0;
  int v15 = *(unsigned __int8 *)v7;
  if ((char)byte_1B0DE196D[*(unsigned __int8 *)v7] < 0)
  {
    uint64_t v17 = 0;
    if (v15 == 91) {
      int v15 = 93;
    }
    for (int i = 1; ; ++i)
    {
      uint64_t v19 = i;
      int v20 = *((unsigned __int8 *)v7 + i);
      if (v20 == v15)
      {
        ++i;
        LOBYTE(v20) = v15;
        if (*((unsigned __int8 *)v7 + v19 + 1) != v15) {
          break;
        }
      }
      *((unsigned char *)v7 + v17++) = v20;
    }
    *((unsigned char *)v7 + v17) = 0;
    int v16 = *(uint64_t **)(v5 + 16);
    if (v16) {
      goto LABEL_19;
    }
  }
  else
  {
    int v16 = *(uint64_t **)(v5 + 16);
    if (v16) {
      goto LABEL_19;
    }
  }
  if (!*(void *)(v5 + 168) && (*(unsigned char *)(*(void *)v5 + 96) & 8) == 0) {
    *(unsigned char *)(v5 + 35) = 1;
  }
  int v16 = (uint64_t *)sub_1B0CEF480((uint64_t *)v5, v8, v9, v10, v11, v12, v13, v14);
  if (!v16) {
    goto LABEL_30;
  }
LABEL_19:
  uint64_t v21 = *(void *)v5;
  int v22 = *(uint64_t (**)(void, uint64_t, char *, uint64_t *, void, void))(*(void *)v5 + 528);
  if (!v22 || *(unsigned char *)(v21 + 197) || *(unsigned char *)(v5 + 302))
  {
LABEL_22:
    return (uint64_t *)sub_1B0CCB908(v16, 0, a2, 0, 0, (uint64_t)v7, 4294967290, v14);
  }
  int v23 = v22(*(void *)(v21 + 536), 32, off_1E5FEFF80[a2], v7, 0, *(void *)(v5 + 368));
  if (v23 == 1)
  {
    int v29 = 23;
    uint64_t v30 = "not authorized";
LABEL_29:
    sub_1B0CEF2BC(v5, v30, v24, v25, v26, v27, v28, v14, v32);
    *(_DWORD *)(v5 + 24) = v29;
    goto LABEL_30;
  }
  if ((v23 & 0xFFFFFFFD) != 0)
  {
    int v29 = 1;
    uint64_t v30 = "authorizer malfunction";
    goto LABEL_29;
  }
  if (!v23) {
    goto LABEL_22;
  }
LABEL_30:
  int v31 = *(void **)v5;

  return sub_1B0D05C10(v31, v7);
}

uint64_t sub_1B0D28CCC(uint64_t *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_1B0D05DC0(*a1, 0x50uLL);
  uint64_t v15 = v8;
  if (v8)
  {
    *(_OWORD *)(v8 + 48) = 0u;
    *(_OWORD *)(v8 + 64) = 0u;
    *(_OWORD *)(v8 + 16) = 0u;
    *(_OWORD *)(v8 + 32) = 0u;
    *(_OWORD *)uint64_t v8 = 0u;
    *(unsigned char *)uint64_t v8 = a2;
    *(_WORD *)(v8 + 52) = -1;
    if (a4)
    {
      *(void *)(v8 + 24) = a4;
      *(_DWORD *)(v8 + 4) |= *(_DWORD *)(a4 + 4) & 0x400208;
      int v16 = *(_DWORD *)(a4 + 40) + 1;
      *(_DWORD *)(v8 + 40) = v16;
      if (!a3)
      {
LABEL_12:
        if (*(_DWORD *)(*a1 + 148) < v16) {
          sub_1B0CEF2BC((uint64_t)a1, "Expression tree is too large (maximum depth %d)", v9, v10, v11, v12, v13, v14, *(_DWORD *)(*a1 + 148));
        }
        return v15;
      }
    }
    else
    {
      int v16 = 1;
      *(_DWORD *)(v8 + 40) = 1;
      if (!a3) {
        goto LABEL_12;
      }
    }
    *(void *)(v8 + 16) = a3;
    *(_DWORD *)(v8 + 4) |= *(_DWORD *)(a3 + 4) & 0x400208;
    int v17 = *(_DWORD *)(a3 + 40);
    if (v17 >= v16)
    {
      int v16 = v17 + 1;
      *(_DWORD *)(v8 + 40) = v17 + 1;
    }
    goto LABEL_12;
  }
  if (a3) {
    sub_1B0D1DF88((void *)*a1, (unsigned __int8 *)a3);
  }
  if (a4) {
    sub_1B0D1DF88((void *)*a1, (unsigned __int8 *)a4);
  }
  return v15;
}

uint64_t sub_1B0D28DFC(uint64_t a1, char a2, const void *a3, uint64_t a4)
{
  size_t v8 = a4;
  uint64_t v9 = sub_1B0D05DC0(*(void *)a1, a4 + 81);
  uint64_t v10 = v9;
  if (v9)
  {
    *(unsigned char *)uint64_t v9 = a2;
    *(_WORD *)(v9 + 1) = 0;
    *(_DWORD *)(v9 + 4) = 0x800000;
    *(void *)(v9 + 64) = 0;
    *(void *)(v9 + 72) = 0;
    *(void *)(v9 + 24) = 0;
    *(void *)(v9 + 32) = 0;
    *(_DWORD *)(v9 + 44) = 0;
    *(_DWORD *)(v9 + 48) = 0;
    uint64_t v11 = v9 + 80;
    *(void *)(v9 + 8) = v9 + 80;
    *(void *)(v9 + 16) = 0;
    memcpy((void *)(v9 + 80), a3, v8);
    *(unsigned char *)(v11 + v8) = 0;
    *(_DWORD *)(v10 + 56) = a3 - *(_DWORD *)(a1 + 336);
    int v12 = *(unsigned __int8 *)(v10 + 80);
    if ((char)byte_1B0DE196D[*(unsigned __int8 *)(v10 + 80)] < 0)
    {
      uint64_t v13 = 0;
      if (v12 == 34) {
        int v14 = 75497600;
      }
      else {
        int v14 = 75497472;
      }
      *(_DWORD *)(v10 + 4) = v14;
      if (v12 == 91) {
        int v12 = 93;
      }
      for (int i = 1; ; ++i)
      {
        uint64_t v16 = i;
        int v17 = *(unsigned __int8 *)(v11 + i);
        if (v17 == v12)
        {
          ++i;
          LOBYTE(v17) = v12;
          if (*(unsigned __int8 *)(v11 + v16 + 1) != v12) {
            break;
          }
        }
        *(unsigned char *)(v11 + v13++) = v17;
      }
      *(unsigned char *)(v11 + v13) = 0;
    }
    *(_DWORD *)(v10 + 40) = 1;
    unsigned int v18 = *(unsigned __int8 *)(a1 + 302);
    if (v18 > 3 || v18 == 2)
    {
      if (*(void *)a1)
      {
        uint64_t v20 = sub_1B0D05DC0(*(void *)a1, 0x20uLL);
        if (!v20) {
          return v10;
        }
      }
      else
      {
        uint64_t v20 = sub_1B0C7FC94(32);
        if (!v20) {
          return v10;
        }
      }
      *(_OWORD *)uint64_t v20 = 0u;
      *(_OWORD *)(v20 + 16) = 0u;
      *(void *)uint64_t v20 = v10;
      *(void *)(v20 + 8) = a3;
      *(void *)(v20 + 16) = a4;
      *(void *)(v20 + 24) = *(void *)(a1 + 408);
      *(void *)(a1 + 408) = v20;
    }
  }
  return v10;
}

uint64_t sub_1B0D28F70(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 4);
  if ((v1 & 0x4000800) != 0) {
    return result;
  }
  unint64_t v2 = *(unsigned char **)(result + 8);
  int v3 = "true";
  for (int i = v2; ; ++i)
  {
    uint64_t v5 = *i;
    uint64_t v6 = *(unsigned __int8 *)v3;
    if (v5 != v6) {
      break;
    }
    if (!*i)
    {
      int v7 = 0x10000000;
      goto LABEL_15;
    }
LABEL_5:
    ++v3;
  }
  if (byte_1B0DE1758[v5] == byte_1B0DE1758[v6]) {
    goto LABEL_5;
  }
  for (uint64_t j = "false"; ; ++j)
  {
    uint64_t v9 = *v2;
    uint64_t v10 = *(unsigned __int8 *)j;
    if (v9 == v10) {
      break;
    }
    if (byte_1B0DE1758[v9] != byte_1B0DE1758[v10]) {
      return result;
    }
LABEL_11:
    ++v2;
  }
  if (*v2) {
    goto LABEL_11;
  }
  int v7 = 0x20000000;
LABEL_15:
  *(unsigned char *)unint64_t result = -86;
  *(_DWORD *)(result + 4) = v7 | v1;
  return result;
}

uint64_t sub_1B0D29028(uint64_t result, char a2)
{
  uint64_t v2 = *(void *)(result + 344);
  if (v2)
  {
    if (*(__int16 *)(v2 + 54) >= 1)
    {
      uint64_t v3 = *(void *)(v2 + 8) + 16 * (*(unsigned __int16 *)(v2 + 54) - 1);
      *(unsigned char *)(v3 + 8) = *(unsigned char *)(v3 + 8) & 0xF0 | a2 & 0xF;
      *(_DWORD *)(v2 + 48) |= 0x800u;
      if ((*(_WORD *)(v3 + 14) & 8) != 0)
      {
        for (uint64_t i = *(void *)(v2 + 16); i; uint64_t i = *(void *)(i + 40))
        {
          if (*(__int16 *)(v2 + 54) - 1 == **(__int16 **)(i + 8)) {
            *(_WORD *)(i + 99) |= 8u;
          }
        }
      }
    }
  }
  return result;
}

void *sub_1B0D290A8(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a1 + 344);
  unint64_t result = *(void **)a1;
  if (v7
    && *(unsigned char *)(a1 + 302) != 1
    && (*(_WORD *)(*(void *)(*(void *)(result[4] + 32 * *((unsigned __int8 *)result + 196) + 8) + 8) + 40) & 1) == 0)
  {
    uint64_t v10 = *(int **)(v7 + 32);
    if (v10)
    {
      int v11 = *v10;
      if (v10[1] > *v10)
      {
        *uint64_t v10 = v11 + 1;
        int v12 = &v10[6 * v11];
        *((void *)v12 + 2) = 0;
        *((void *)v12 + 3) = 0;
        *((void *)v12 + 1) = a2;
        goto LABEL_14;
      }
      uint64_t v13 = sub_1B0D55B34((uint64_t)result, v10, a2);
    }
    else
    {
      uint64_t v13 = (int *)sub_1B0D55ACC(result, a2);
    }
    uint64_t v10 = v13;
LABEL_14:
    *(void *)(v7 + 32) = v10;
    if (*(_DWORD *)(a1 + 112))
    {
      return (void *)sub_1B0D29C34(a1, v10, a1 + 104, 1);
    }
    else
    {
      uint64_t v19 = 0;
      int v14 = a4 - a3 + 1;
      do
      {
        int v15 = *(unsigned __int8 *)++a3;
        --v14;
      }
      while ((byte_1B0DE196D[v15] & 1) != 0);
      uint64_t v16 = (unsigned __int8 *)(a4 - 1);
      do
      {
        int v17 = *v16--;
        --v14;
      }
      while ((byte_1B0DE196D[v17] & 1) != 0);
      uint64_t v18 = a3;
      LODWORD(v19) = v14;
      return (void *)sub_1B0D29C34(a1, v10, (uint64_t)&v18, 1);
    }
  }
  if (a2)
  {
    return sub_1B0D1DF88(result, a2);
  }
  return result;
}

uint64_t *sub_1B0D29218(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = result[43];
  if (!v2) {
    return result;
  }
  uint64_t v3 = result;
  if (*((unsigned __int8 *)result + 302) > 1u) {
    return result;
  }
  if (!a2) {
    return result;
  }
  int v4 = *(const void **)a2;
  if (!*(void *)a2) {
    return result;
  }
  uint64_t v5 = *(__int16 *)(v2 + 54);
  uint64_t v6 = (void *)*result;
  size_t v7 = *(unsigned int *)(a2 + 8);
  unint64_t result = (uint64_t *)sub_1B0D05DC0(*result, v7 + 1);
  if (!result) {
    return result;
  }
  size_t v8 = (char *)result;
  memcpy(result, v4, v7);
  v8[v7] = 0;
  int v9 = *v8;
  if ((char)byte_1B0DE196D[*v8] < 0)
  {
    uint64_t v10 = 0;
    if (v9 == 91) {
      int v9 = 93;
    }
    for (int i = 1; ; ++i)
    {
      uint64_t v12 = i;
      int v13 = v8[i];
      if (v13 == v9)
      {
        ++i;
        LOBYTE(v13) = v9;
        if (v8[v12 + 1] != v9) {
          break;
        }
      }
      v8[v10++] = v13;
    }
    v8[v10] = 0;
  }
  uint64_t v14 = *(unsigned __int8 *)(*v3 + 100);
  int v15 = *(unsigned __int8 *)(*v3 + 197);
  uint64_t v16 = sub_1B0D224B0(*v3, *(unsigned __int8 *)(*v3 + 100), v8, v15);
  uint64_t v21 = (uint64_t)v16;
  if (!v15)
  {
    if (v16 && v16[3])
    {
LABEL_19:
      uint64_t v22 = v5 - 1;
      sub_1B0D3A1A4((uint64_t)v6, *(void *)(v2 + 8) + 16 * (v5 - 1), v8);
      for (uint64_t j = *(void *)(v2 + 16); j; uint64_t j = *(void *)(j + 40))
      {
        if (v22 == **(__int16 **)(j + 8))
        {
          uint64_t v25 = *(void *)(v2 + 8);
          __int16 v26 = *(_WORD *)(v25 + 16 * v22 + 14);
          if ((v26 & 0x200) != 0)
          {
            uint64_t v27 = *(void *)(v25 + 16 * v22) - 1;
            while (*(unsigned __int8 *)++v27)
              ;
            if ((v26 & 4) != 0)
            {
              while (*(unsigned __int8 *)++v27)
                ;
            }
            uint64_t v24 = v27 + 1;
          }
          else
          {
            uint64_t v24 = 0;
          }
          **(void **)(j + 64) = v24;
        }
      }
      goto LABEL_32;
    }
    uint64_t v21 = sub_1B0D2719C((uint64_t)v3, v14, (uint64_t)v16, v8, v17, v18, v19, v20);
  }
  if (v21) {
    goto LABEL_19;
  }
LABEL_32:

  return sub_1B0D05C10(v6, v8);
}

void sub_1B0D293F8(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = *(void *)(a1 + 344);
  if (!v10)
  {
LABEL_7:
    if (a2)
    {
      int v15 = *(void **)a1;
      sub_1B0D1DF88(v15, a2);
    }
    return;
  }
  if (*(unsigned char *)(a1 + 302) == 1)
  {
    int v11 = "virtual tables cannot use computed columns";
LABEL_6:
    sub_1B0CEF2BC(a1, v11, a3, a4, a5, a6, a7, a8, v32);
    goto LABEL_7;
  }
  uint64_t v12 = *(void *)(v10 + 8);
  uint64_t v13 = *(__int16 *)(v10 + 54) - 1;
  uint64_t v14 = (uint64_t *)(v12 + 16 * v13);
  if (*((_WORD *)v14 + 6))
  {
LABEL_5:
    uint64_t v32 = *v14;
    int v11 = "error in generated column \"%s\"";
    goto LABEL_6;
  }
  if (!a3) {
    goto LABEL_48;
  }
  int v16 = *(_DWORD *)(a3 + 8);
  if (v16 != 6)
  {
    if (v16 != 7) {
      goto LABEL_5;
    }
    uint64_t v17 = *(unsigned __int8 **)a3;
    if (!*(void *)a3) {
      goto LABEL_5;
    }
    if ((*v17 & 0xDF) != 0x56)
    {
      int v20 = 118;
      goto LABEL_47;
    }
    uint64_t v18 = v17 + 1;
    if ((v17[1] & 0xDF) == 0x49)
    {
      uint64_t v18 = v17 + 2;
      if ((v17[2] & 0xDF) == 0x52)
      {
        uint64_t v18 = v17 + 3;
        if ((v17[3] & 0xDF) == 0x54)
        {
          uint64_t v18 = v17 + 4;
          if ((v17[4] & 0xDF) == 0x55)
          {
            uint64_t v18 = v17 + 5;
            if ((v17[5] & 0xDF) == 0x41)
            {
              int v19 = v17[6];
              v17 += 6;
              if ((v19 & 0xFFFFFFDF) == 0x4C)
              {
LABEL_48:
                --*(_WORD *)(v10 + 56);
                int v25 = 32;
                goto LABEL_49;
              }
              int v20 = 108;
LABEL_47:
              if (v20 != byte_1B0DE1758[*v17]) {
                goto LABEL_5;
              }
              goto LABEL_48;
            }
            int v20 = 97;
          }
          else
          {
            int v20 = 117;
          }
        }
        else
        {
          int v20 = 116;
        }
      }
      else
      {
        int v20 = 114;
      }
    }
    else
    {
      int v20 = 105;
    }
    uint64_t v17 = v18;
    goto LABEL_47;
  }
  uint64_t v21 = *(unsigned __int8 **)a3;
  if (!*(void *)a3) {
    goto LABEL_5;
  }
  if ((*v21 & 0xDF) != 0x53)
  {
    int v24 = 115;
    goto LABEL_43;
  }
  uint64_t v22 = v21 + 1;
  if ((v21[1] & 0xDF) != 0x54)
  {
    int v24 = 116;
LABEL_42:
    uint64_t v21 = v22;
LABEL_43:
    if (v24 != byte_1B0DE1758[*v21]) {
      goto LABEL_5;
    }
    goto LABEL_44;
  }
  uint64_t v22 = v21 + 2;
  if ((v21[2] & 0xDF) != 0x4F)
  {
    int v24 = 111;
    goto LABEL_42;
  }
  uint64_t v22 = v21 + 3;
  if ((v21[3] & 0xDF) != 0x52)
  {
    int v24 = 114;
    goto LABEL_42;
  }
  uint64_t v22 = v21 + 4;
  if ((v21[4] & 0xDF) != 0x45)
  {
    int v24 = 101;
    goto LABEL_42;
  }
  int v23 = v21[5];
  v21 += 5;
  if ((v23 & 0xFFFFFFDF) != 0x44)
  {
    int v24 = 100;
    goto LABEL_43;
  }
LABEL_44:
  int v25 = 64;
LABEL_49:
  uint64_t v26 = v12 + 16 * v13;
  __int16 v28 = *(_WORD *)(v26 + 14);
  uint64_t v27 = (_WORD *)(v26 + 14);
  __int16 v29 = v28 | v25;
  *uint64_t v27 = v28 | v25;
  *(_DWORD *)(v10 + 48) |= v25;
  if (v28)
  {
    *uint64_t v27 = v29 | 1;
    if ((v29 & 0x60) != 0) {
      sub_1B0CEF2BC(a1, "generated columns cannot be part of the PRIMARY KEY", a3, a4, a5, a6, a7, a8, v32);
    }
  }
  if (!a2) {
    goto LABEL_58;
  }
  int v30 = *a2;
  if (v30 != 59) {
    goto LABEL_56;
  }
  int v31 = (unsigned __int8 *)sub_1B0D28CCC((uint64_t *)a1, 174, (uint64_t)a2, 0);
  a2 = v31;
  if (v31)
  {
    int v30 = *v31;
LABEL_56:
    if (v30 != 71) {
      a2[1] = *(unsigned char *)(v12 + 16 * v13 + 9);
    }
  }
LABEL_58:

  sub_1B0D36624((uint64_t *)a1, v10, v12 + 16 * v13, a2);
}

void sub_1B0D29740(uint64_t a1, void *a2, _OWORD *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a6;
  long long v57 = 0uLL;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  uint64_t v11 = *(void *)a1;
  if (*(int *)(a1 + 296) < 1)
  {
    int v19 = (_OWORD *)a4;
    sub_1B0C88550(a1, a3, a4, a7, 1, 0, a8, a8, v49);
    uint64_t v28 = *(void *)(a1 + 344);
    if (v28 && !*(_DWORD *)(a1 + 48))
    {
      *(_DWORD *)(v28 + 48) |= 0x200u;
      if (*((_DWORD *)v19 + 2))
      {
        if (*(unsigned char *)(*(void *)a1 + 197))
        {
          sub_1B0CEF2BC(a1, "corrupt database", v22, v23, v24, v25, v26, v27, v50);
          int v19 = 0;
        }
        else if ((sub_1B0D35B18(*(void *)a1, (uint64_t)a3) & 0x80000000) != 0)
        {
          sub_1B0CEF2BC(a1, "unknown database %T", v29, v30, v31, v32, v33, v34, (char)a3);
        }
      }
      else
      {
        int v19 = a3;
      }
      uint64_t v35 = *(void *)(v28 + 96);
      if (v35)
      {
        __int16 v36 = (uint64_t *)(*(void *)(v11 + 32) + 24);
        int v37 = -1;
        do
        {
          uint64_t v38 = *v36;
          v36 += 4;
          ++v37;
        }
        while (v38 != v35);
      }
      else
      {
        int v37 = -32768;
      }
      uint64_t v39 = *(void *)a1;
      *(void *)&long long v51 = a1;
      unsigned int v40 = (void *)(*(void *)(v39 + 32) + 32 * v37);
      *((void *)&v55 + 1) = *v40;
      uint64_t v41 = v40[3];
      *(void *)&long long v56 = "view";
      *((void *)&v56 + 1) = v19;
      LOBYTE(v55) = v37 == 1;
      *(void *)&long long v54 = &v51;
      *((void *)&v54 + 1) = v41;
      *((void *)&v51 + 1) = a1;
      *(void *)&long long v52 = sub_1B0D3B968;
      *((void *)&v52 + 1) = sub_1B0D3B9E8;
      *(void *)&long long v53 = nullsub_8;
      DWORD2(v53) = 0;
      WORD6(v53) = 0;
      if (!sub_1B0C962CC((void *)&v51 + 1, (void *)v8))
      {
        *(_DWORD *)(v8 + 4) |= 0x200000u;
        if (*(unsigned __int8 *)(a1 + 302) <= 1u)
        {
          uint64_t v42 = sub_1B0CB0DF4(v11, v8, 1);
        }
        else
        {
          uint64_t v42 = v8;
          uint64_t v8 = 0;
        }
        *(void *)(v28 + 64) = v42;
        *(void *)(v28 + 32) = sub_1B0CAE478(v11, a5, 1u);
        *(unsigned char *)(v28 + 63) = 2;
        if (!*(unsigned char *)(v11 + 103))
        {
          long long v57 = *(_OWORD *)(a1 + 280);
          if (*(unsigned char *)v57 == 59) {
            int v46 = 0;
          }
          else {
            int v46 = DWORD2(v57);
          }
          uint64_t v47 = *a2 + (int)(v57 + v46 - *a2);
          do
            int v48 = *(unsigned __int8 *)--v47;
          while ((byte_1B0DE196D[v48] & 1) != 0);
          *(void *)&long long v57 = v47;
          DWORD2(v57) = 1;
          sub_1B0C8958C(a1, 0, (uint64_t)&v57, 0, 0, v43, v44, v45, v50);
        }
      }
    }
  }
  else
  {
    sub_1B0CEF2BC(a1, "parameters are not allowed in views", (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8, v49);
  }
  if (v8) {
    sub_1B0CA0FA8((void *)v11, v8, 1);
  }
  if (*(unsigned __int8 *)(a1 + 302) < 2u) {
    goto LABEL_26;
  }
  if (a5)
  {
    long long v59 = 0u;
    long long v60 = 0u;
    v58[0] = a1;
    v58[1] = sub_1B0D3A9BC;
    int v12 = *(_DWORD *)a5;
    if (*(int *)a5 < 1) {
      goto LABEL_26;
    }
    for (uint64_t i = 1; ; i += 3)
    {
      uint64_t v14 = a5[i];
      if (v14)
      {
        if (sub_1B0D32AB4((uint64_t)v58, v14)) {
          BOOL v15 = 1;
        }
        else {
          BOOL v15 = v12 <= 1;
        }
        if (v15)
        {
LABEL_17:
          uint64_t v16 = *(unsigned int *)a5;
          if ((int)v16 >= 1)
          {
            for (uint64_t j = 0; j != v16; ++j)
            {
              if ((*(_WORD *)((unsigned char *)&a5[3 * j + 3] + 1) & 3) == 0)
              {
                uint64_t v18 = *(void **)(a1 + 408);
                if (v18)
                {
                  while (*v18 != a5[3 * j + 2])
                  {
                    uint64_t v18 = (void *)v18[3];
                    if (!v18) {
                      goto LABEL_20;
                    }
                  }
                  *uint64_t v18 = 0;
                }
              }
LABEL_20:
              ;
            }
          }
LABEL_26:
          if (a5) {
            sub_1B0D270DC((void *)v11, a5);
          }
          return;
        }
      }
      else if (v12 <= 1)
      {
        goto LABEL_17;
      }
      --v12;
    }
  }
}

uint64_t sub_1B0D29AC8(void **a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2)
  {
    *(void *)(a2 + 104) = a3;
    sub_1B0D29B0C((uint64_t)a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8, v10);
  }
  else
  {
    sub_1B0D1E12C(*a1, a3);
  }
  return a2;
}

void sub_1B0D29B0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (*(void *)(a2 + 80))
  {
    uint64_t v11 = 0;
    int v12 = 1;
    uint64_t v13 = "ORDER BY";
    uint64_t v14 = a2;
    while (1)
    {
      int v15 = v12;
      uint64_t v16 = v14;
      *(void *)(v14 + 88) = v11;
      *(_DWORD *)(v14 + 4) |= 0x100u;
      uint64_t v14 = *(void *)(v14 + 80);
      if (!v14) {
        break;
      }
      if (*(void *)(v14 + 72)) {
        goto LABEL_7;
      }
      ++v12;
      uint64_t v11 = v16;
      if (*(void *)(v14 + 96))
      {
        uint64_t v13 = "LIMIT";
LABEL_7:
        ++v15;
        sub_1B0CEF2BC(a1, "%s clause should come after %s not before", a3, a4, a5, a6, a7, a8, (char)v13);
        break;
      }
    }
    if ((*(unsigned char *)(a2 + 5) & 4) == 0)
    {
      int v17 = *(_DWORD *)(*(void *)a1 + 152);
      if (v17 >= 1 && v15 > v17)
      {
        sub_1B0CEF2BC(a1, "too many terms in compound SELECT", a3, a4, a5, a6, a7, a8, a9);
      }
    }
  }
}

uint64_t sub_1B0D29C34(uint64_t result, int *a2, uint64_t a3, int a4)
{
  if (a2)
  {
    uint64_t v7 = result;
    uint64_t v8 = *a2 - 1;
    int v9 = *(const void **)a3;
    if (*(void *)a3)
    {
      size_t v10 = *(unsigned int *)(a3 + 8);
      unint64_t result = sub_1B0D05DC0(*(void *)result, v10 + 1);
      uint64_t v11 = (unsigned char *)result;
      if (result)
      {
        unint64_t result = (uint64_t)memcpy((void *)result, v9, v10);
        v11[v10] = 0;
      }
    }
    else
    {
      uint64_t v11 = 0;
    }
    int v12 = &a2[6 * v8];
    *((void *)v12 + 2) = v11;
    uint64_t v13 = (uint64_t *)(v12 + 4);
    if (a4)
    {
      if (v11 && (char)byte_1B0DE196D[*v11] < 0)
      {
        uint64_t v14 = 0;
        if (*v11 == 91) {
          int v15 = 93;
        }
        else {
          int v15 = *v11;
        }
        for (int i = 1; ; ++i)
        {
          uint64_t v17 = i;
          int v18 = v11[i];
          if (v18 == v15)
          {
            ++i;
            LOBYTE(v18) = v15;
            if (v11[v17 + 1] != v15) {
              break;
            }
          }
          v11[v14++] = v18;
        }
        v11[v14] = 0;
      }
      unsigned int v19 = *(unsigned __int8 *)(v7 + 302);
      if (v19 >= 2 && v19 != 3)
      {
        uint64_t v20 = *v13;
        if (*(void *)v7)
        {
          unint64_t result = sub_1B0D05DC0(*(void *)v7, 0x20uLL);
          if (!result) {
            return result;
          }
        }
        else
        {
          unint64_t result = sub_1B0C7FC94(32);
          if (!result) {
            return result;
          }
        }
        *(_OWORD *)unint64_t result = 0u;
        *(_OWORD *)(result + 16) = 0u;
        *(void *)unint64_t result = v20;
        *(_OWORD *)(result + 8) = *(_OWORD *)a3;
        *(void *)(result + 24) = *(void *)(v7 + 408);
        *(void *)(v7 + 408) = result;
      }
    }
  }
  return result;
}

uint64_t *sub_1B0D29D94(uint64_t *result, int *a2, unsigned __int8 *a3, int a4)
{
  if (a2)
  {
    uint64_t v5 = *a2 - 1;
    uint64_t v6 = &a2[6 * v5];
    uint64_t v8 = *((void *)v6 + 2);
    uint64_t v7 = (uint64_t **)(v6 + 4);
    if (!v8)
    {
      uint64_t v9 = *result;
      int v10 = a4 - a3;
      do
      {
        uint64_t v11 = a3;
        int v12 = v10;
        int v13 = *a3++;
        --v10;
      }
      while ((byte_1B0DE196D[v13] & 1) != 0);
      uint64_t v14 = v12;
      uint64_t v15 = ((uint64_t)v12 << 32) + 0x100000000;
      uint64_t v16 = v14 - 2;
      do
      {
        char v17 = byte_1B0DE196D[a3[v16]];
        v15 -= 0x100000000;
        --v16;
      }
      while ((v17 & 1) != 0);
      size_t v18 = v15 >> 32;
      unint64_t result = (uint64_t *)sub_1B0D05DC0(v9, (v15 >> 32) + 1);
      unsigned int v19 = result;
      if (result)
      {
        unint64_t result = (uint64_t *)memcpy(result, v11, v18);
        *((unsigned char *)v19 + v18) = 0;
      }
      *uint64_t v7 = v19;
      *(_WORD *)((char *)&a2[6 * v5 + 6] + 1) = *(_WORD *)((unsigned char *)&a2[6 * v5 + 6] + 1) & 0xFFFC | 1;
    }
  }
  return result;
}

uint64_t sub_1B0D29E78(uint64_t a1, int a2, char *__s)
{
  v7[0] = __s;
  if (__s) {
    unsigned int v5 = strlen(__s) & 0x3FFFFFFF;
  }
  else {
    unsigned int v5 = 0;
  }
  v7[1] = v5;
  return sub_1B0C904D8(a1, a2, (uint64_t)v7, 0);
}

unsigned int *sub_1B0D29EDC(unsigned int *result)
{
  if (result)
  {
    uint64_t v1 = *result;
    if ((int)v1 >= 2)
    {
      char v2 = 0;
      unint64_t v3 = *result;
      do
      {
        char v4 = result[26 * (v3 - 2) + 17];
        LOBYTE(result[26 * (v3 - 1) + 17]) = v4;
        v2 |= v4;
      }
      while (v3-- > 2);
      *((unsigned char *)result + 68) = 0;
      if ((v2 & 0x10) != 0)
      {
        int v6 = 1;
        while (v1 >= 2)
        {
          if ((result[26 * --v1 + 17] & 0x10) != 0)
          {
            int v6 = v1 + 1;
            break;
          }
        }
        uint64_t v7 = v6 - 2;
        unint64_t v8 = (v7 & ~(v7 >> 63)) + 1;
        if (v8 < 2)
        {
          uint64_t v9 = v7;
LABEL_15:
          uint64_t v13 = v9 + 1;
          uint64_t v14 = &result[26 * v9 + 17];
          do
          {
            *(unsigned char *)v14 |= 0x40u;
            v14 -= 26;
            --v13;
          }
          while (v13 > 0);
          return result;
        }
        uint64_t v9 = v7 - (v8 & 0xFFFFFFFFFFFFFFFELL);
        int v10 = &result[26 * (int)v7 + 17];
        unint64_t v11 = v8 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          char v12 = *((unsigned char *)v10 - 104) | 0x40;
          *(unsigned char *)v10 |= 0x40u;
          *((unsigned char *)v10 - 104) = v12;
          v10 -= 52;
          v11 -= 2;
        }
        while (v11);
        if (v8 != (v8 & 0xFFFFFFFFFFFFFFFELL)) {
          goto LABEL_15;
        }
      }
    }
  }
  return result;
}

uint64_t *sub_1B0D29FE8(uint64_t *result, int *a2, uint64_t a3)
{
  if (a2)
  {
    size_t v3 = *(unsigned int *)(a3 + 8);
    if (v3)
    {
      uint64_t v5 = *a2 - 1;
      int v6 = *(const void **)a3;
      if (v3 == 1)
      {
        size_t v3 = 1;
        if (!v6) {
          goto LABEL_19;
        }
      }
      else if (!v6)
      {
        uint64_t v7 = 0;
LABEL_18:
        *(void *)&a2[26 * v5 + 24] = v7;
        LOWORD(v3) = 2;
LABEL_19:
        *(_WORD *)((char *)&a2[26 * v5 + 17] + 1) |= v3;
        return result;
      }
      unint64_t result = (uint64_t *)sub_1B0D05DC0(*result, v3 + 1);
      uint64_t v7 = result;
      if (result)
      {
        unint64_t result = (uint64_t *)memcpy(result, v6, v3);
        *((unsigned char *)v7 + v3) = 0;
        if ((char)byte_1B0DE196D[*(unsigned __int8 *)v7] < 0)
        {
          uint64_t v8 = 0;
          if (*(unsigned char *)v7 == 91) {
            int v9 = 93;
          }
          else {
            int v9 = *(unsigned __int8 *)v7;
          }
          for (int i = 1; ; ++i)
          {
            uint64_t v11 = i;
            int v12 = *((unsigned __int8 *)v7 + i);
            if (v12 == v9)
            {
              ++i;
              LOBYTE(v12) = v9;
              if (*((unsigned __int8 *)v7 + v11 + 1) != v9) {
                break;
              }
            }
            *((unsigned char *)v7 + v8++) = v12;
          }
          *((unsigned char *)v7 + v8) = 0;
        }
      }
      goto LABEL_18;
    }
  }
  return result;
}

void *sub_1B0D2A100(void *result, int *a2, void *a3)
{
  if (a2)
  {
    size_t v3 = &a2[26 * *a2];
    *((void *)v3 - 1) = a3;
    *(_WORD *)((char *)v3 - 35) |= 4u;
  }
  else if (a3)
  {
    return sub_1B0D270DC((void *)*result, a3);
  }
  return result;
}

uint64_t sub_1B0D2A138(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  if (*(unsigned char *)(a1 + 302) != 3)
  {
    uint64_t v6 = *(void *)a1;
    if (!v6)
    {
      uint64_t v7 = sub_1B0C7FC94(32);
      if (!v7) {
        return a2;
      }
      goto LABEL_4;
    }
    uint64_t v7 = sub_1B0D05DC0(v6, 0x20uLL);
    if (v7)
    {
LABEL_4:
      *(_OWORD *)uint64_t v7 = 0u;
      *(_OWORD *)(v7 + 16) = 0u;
      *(void *)uint64_t v7 = a2;
      *(_OWORD *)(v7 + 8) = *a3;
      *(void *)(v7 + 24) = *(void *)(a1 + 408);
      *(void *)(a1 + 408) = v7;
    }
  }
  return a2;
}

unsigned char *sub_1B0D2A1BC(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  char v2 = *(const void **)a2;
  if (!*(void *)a2) {
    return 0;
  }
  size_t v3 = *(unsigned int *)(a2 + 8);
  char v4 = (unsigned char *)sub_1B0D05DC0(a1, v3 + 1);
  uint64_t v5 = v4;
  if (v4)
  {
    memcpy(v4, v2, v3);
    v5[v3] = 0;
    if ((char)byte_1B0DE196D[*v5] < 0)
    {
      uint64_t v6 = 0;
      if (*v5 == 91) {
        int v7 = 93;
      }
      else {
        int v7 = *v5;
      }
      for (int i = 1; ; ++i)
      {
        uint64_t v9 = i;
        int v10 = v5[i];
        if (v10 == v7)
        {
          ++i;
          LOBYTE(v10) = v7;
          if (v5[v9 + 1] != v7) {
            break;
          }
        }
        v5[v6++] = v10;
      }
      v5[v6] = 0;
    }
  }
  return v5;
}

uint64_t sub_1B0D2A280(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  v23[3] = *MEMORY[0x1E4F143B8];
  v23[0] = a2;
  v23[1] = a3;
  v23[2] = a4;
  while (2)
  {
    uint64_t v10 = v23[v8];
    if (!v10) {
      break;
    }
    uint64_t v11 = 0;
    int v12 = *(_DWORD *)(v10 + 8);
    while (1)
    {
      if (v12 != byte_1B0DE57E4[3 * v11 + 1]) {
        goto LABEL_6;
      }
      if (v12 < 0) {
        break;
      }
      uint64_t v14 = *(unsigned char **)v10;
      if (*(void *)v10)
      {
        if (!v12) {
          goto LABEL_15;
        }
        uint64_t v15 = &aNaturaleftoute[byte_1B0DE57E4[3 * v11]];
        int v16 = v12 + 1;
        while (1)
        {
          uint64_t v17 = *v14;
          if (!*v14) {
            break;
          }
          LODWORD(v17) = byte_1B0DE1758[v17];
          int v13 = byte_1B0DE1758[*v15];
          if (v17 != v13) {
            goto LABEL_5;
          }
          ++v14;
          ++v15;
          if (--v16 <= 1) {
            goto LABEL_15;
          }
        }
        int v13 = byte_1B0DE1758[*v15];
LABEL_5:
        if (v17 == v13) {
          goto LABEL_15;
        }
      }
LABEL_6:
      if (++v11 == 7)
      {
        uint64_t v9 = v9 | 0x80;
        goto LABEL_19;
      }
    }
    uint64_t v18 = a1;
    uint64_t v19 = a2;
    uint64_t v20 = a3;
    uint64_t v21 = a4;
    sub_1B0CE1978(35844);
    a4 = v21;
    a3 = v20;
    a2 = v19;
    a1 = v18;
LABEL_15:
    uint64_t v9 = v9 | byte_1B0DE57E4[3 * v11 + 2];
    if (++v8 != 3) {
      continue;
    }
    break;
  }
LABEL_19:
  if ((v9 & 0x38) == 0x20 || (v9 & 0x21) == 0x21 || (v9 & 0x80) != 0)
  {
    sub_1B0CEF2BC(a1, "unknown join type: %T%s%T%s%T", a3, a4, a5, a6, a7, a8, a2);
    return 1;
  }
  return v9;
}

int *sub_1B0D2A45C(int *result, int a2, int a3)
{
  if (result)
  {
    uint64_t v3 = *result - 1;
    if (a2 == -1) {
      int v4 = 0;
    }
    else {
      int v4 = a2;
    }
    uint64_t v5 = &result[6 * v3];
    *((unsigned char *)v5 + 24) = v4;
    uint64_t v6 = v5 + 6;
    if (a3 != -1)
    {
      *(_WORD *)((char *)&result[6 * v3 + 6] + 1) |= 0x20u;
      if (v4 != a3) {
        *uint64_t v6 = v4 | 2;
      }
    }
  }
  return result;
}

void sub_1B0D2A4AC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = *(void *)a1;
  if (*(void *)(a1 + 360)) {
    sub_1B0CEF2BC(a1, "cannot use RETURNING in a trigger", a3, a4, a5, a6, a7, a8, v27);
  }
  *(unsigned char *)(a1 + 219) = 1;
  if (v10)
  {
    if (*(unsigned __int16 *)(v10 + 436) <= 0xC7u)
    {
      if (*(_DWORD *)(v10 + 432))
      {
        if (*(unsigned char *)(v10 + 103)) {
          goto LABEL_22;
        }
      }
      else
      {
        ++*(_DWORD *)(v10 + 452);
      }
      goto LABEL_17;
    }
    uint64_t v11 = *(void *)(v10 + 472);
    if (v11)
    {
      int v12 = (void *)(v10 + 472);
    }
    else
    {
      uint64_t v11 = *(void *)(v10 + 464);
      if (!v11)
      {
        ++*(_DWORD *)(v10 + 456);
LABEL_17:
        uint64_t v11 = sub_1B0D05FA0(v10, 200);
        if (v11) {
          goto LABEL_18;
        }
LABEL_22:
        if (a2)
        {
          sub_1B0D270DC((void *)v10, a2);
        }
        return;
      }
      int v12 = (void *)(v10 + 464);
    }
    void *v12 = *(void *)v11;
    ++*(_DWORD *)(v10 + 448);
  }
  else
  {
    uint64_t v11 = sub_1B0C7FC94(200);
    if (!v11) {
      goto LABEL_22;
    }
  }
LABEL_18:
  *(void *)(v11 + 192) = 0;
  *(_OWORD *)(v11 + 160) = 0u;
  *(_OWORD *)(v11 + 176) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_OWORD *)(v11 + 144) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)uint64_t v11 = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  *(void *)(a1 + 200) = v11;
  *(void *)uint64_t v11 = a1;
  *(void *)(v11 + 8) = a2;
  if (*(void *)a1)
  {
    int v13 = (void *)sub_1B0D05DC0(*(void *)a1, 0x18uLL);
    if (v13) {
      goto LABEL_20;
    }
  }
  else
  {
    int v13 = (void *)sub_1B0C7FC94(24);
    if (v13)
    {
LABEL_20:
      uint64_t v14 = *(void *)(a1 + 192);
      *(void *)(a1 + 192) = v13;
      *int v13 = v14;
      v13[1] = v11;
      void v13[2] = sub_1B0D5A944;
      if (*(unsigned char *)(v10 + 103)) {
        return;
      }
      goto LABEL_30;
    }
  }
  uint64_t v15 = *(void **)a1;
  sub_1B0C796D8(*(void *)(v15[4] + 56) + 56, "sqlite_returning", 0);
  int v16 = *(void **)(v11 + 8);
  if (v16) {
    sub_1B0D270DC(v15, v16);
  }
  sub_1B0D05C10(v15, (void *)v11);
  if (!*(unsigned char *)(v10 + 103))
  {
LABEL_30:
    *(void *)(v11 + 16) = "sqlite_returning";
    uint64_t v17 = v11 + 16;
    *(_WORD *)(v17 + 16) = 662;
    *(unsigned char *)(v17 + 18) = 1;
    uint64_t v18 = *(void *)(*(void *)(v10 + 32) + 56);
    *(void *)(v17 + 40) = v18;
    *(void *)(v17 + 48) = v18;
    *(unsigned char *)(v17 + 72) = -106;
    *(void *)(v17 + 56) = v17 + 72;
    *(void *)(v17 + 80) = v17;
    *(void *)(v17 + 120) = a2;
    if (sub_1B0C796D8(v18 + 56, "sqlite_returning", v17) == v17 && !*(unsigned char *)(v10 + 103) && !*(unsigned char *)(v10 + 104))
    {
      *(unsigned char *)(v10 + 103) = 1;
      if (*(int *)(v10 + 220) >= 1) {
        *(_DWORD *)(v10 + 424) = 1;
      }
      ++*(_DWORD *)(v10 + 432);
      *(_WORD *)(v10 + 436) = 0;
      uint64_t v25 = *(void *)(v10 + 344);
      if (v25)
      {
        sub_1B0CEF2BC(v25, "out of memory", v19, v20, v21, v22, v23, v24, v27);
        for (uint64_t i = *(void *)(v10 + 344); ; ++*(_DWORD *)(i + 48))
        {
          *(_DWORD *)(i + 24) = 7;
          uint64_t i = *(void *)(i + 256);
          if (!i) {
            break;
          }
        }
      }
    }
  }
}

int *sub_1B0D2A73C(uint64_t *a1, int *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a2;
  if (a3)
  {
    uint64_t v11 = sub_1B0C90D48(a1, a2, *(unsigned int *)a3, 1, a5, a6, a7, a8);
    if (v11)
    {
      int v12 = v11;
      memcpy(v11 + 28, a3 + 1, 104 * *(int *)a3);
      sub_1B0D05C10((void *)*a1, a3);
      *((unsigned char *)v12 + 68) |= v12[43] & 0x40;
      return v12;
    }
    else
    {
      sub_1B0CA115C((void *)*a1, a3);
    }
  }
  return v8;
}

int *sub_1B0D2A7D8(uint64_t *a1, int *a2, void *a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = a2;
  uint64_t v12 = *a1;
  if (a2)
  {
    int v13 = *a2;
    if (!a3) {
      goto LABEL_27;
    }
  }
  else
  {
    int v13 = 0;
    if (!a3) {
      goto LABEL_27;
    }
  }
  if (!a4) {
    goto LABEL_27;
  }
  int v14 = *a4;
  uint64_t v15 = *(unsigned int *)a3;
  if (v14 != 138)
  {
    if (v14 == 176) {
      int v14 = a4[2];
    }
    if (v14 == 138)
    {
      int v16 = (_DWORD **)(*((void *)a4 + 4) + 32);
LABEL_13:
      if (v15 == **v16) {
        goto LABEL_14;
      }
LABEL_35:
      sub_1B0CEF2BC((uint64_t)a1, "%d columns assigned %d values", (uint64_t)a3, v15, a5, a6, a7, a8, *(_DWORD *)a3);
      goto LABEL_36;
    }
    if (v14 == 177)
    {
      int v16 = (_DWORD **)(a4 + 32);
      goto LABEL_13;
    }
    if (v15 != 1) {
      goto LABEL_35;
    }
  }
LABEL_14:
  if ((int)v15 >= 1)
  {
    uint64_t v17 = 0;
    uint64_t v18 = 1;
    while (1)
    {
      uint64_t v20 = (unsigned __int8 *)sub_1B0D4A3A0((uint64_t)a1, a4, v17, v15);
      if (!v20) {
        goto LABEL_18;
      }
      if (!v10) {
        break;
      }
      int v21 = *v10;
      if (v10[1] <= *v10)
      {
        uint64_t v22 = sub_1B0D55B34(*a1, v10, v20);
        goto LABEL_24;
      }
      *uint64_t v10 = v21 + 1;
      uint64_t v19 = &v10[6 * v21];
      *((void *)v19 + 2) = 0;
      *((void *)v19 + 3) = 0;
      *((void *)v19 + 1) = v20;
LABEL_17:
      *(void *)&v10[6 * *v10 - 2] = a3[v18];
      a3[v18] = 0;
LABEL_18:
      ++v17;
      uint64_t v15 = *(int *)a3;
      v18 += 2;
      if (v17 >= v15) {
        goto LABEL_26;
      }
    }
    uint64_t v22 = (int *)sub_1B0D55ACC((void *)*a1, v20);
LABEL_24:
    uint64_t v10 = v22;
    if (!v22) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
LABEL_26:
  if (!*(unsigned char *)(v12 + 103))
  {
    if (*a4 == 138 && v10)
    {
      uint64_t v23 = *(void *)&v10[6 * v13 + 2];
      *(void *)(v23 + 24) = a4;
      *(_DWORD *)(v23 + 44) = v15;
      if ((int)v15 >= 1) {
        goto LABEL_40;
      }
      goto LABEL_44;
    }
    goto LABEL_36;
  }
LABEL_27:
  if (!a4)
  {
    if (!a3) {
      return v10;
    }
LABEL_39:
    LODWORD(v15) = *(_DWORD *)a3;
    if (*(int *)a3 >= 1)
    {
LABEL_40:
      uint64_t v25 = 0;
      uint64_t v26 = 1;
      do
      {
        char v27 = (void *)a3[v26];
        if (v27)
        {
          sub_1B0D05C10((void *)v12, v27);
          LODWORD(v15) = *(_DWORD *)a3;
        }
        ++v25;
        v26 += 2;
      }
      while (v25 < (int)v15);
    }
LABEL_44:
    sub_1B0D15C20((void *)v12, a3);
    return v10;
  }
LABEL_36:
  unsigned int v24 = *((unsigned __int8 *)a1 + 302);
  if (v24 >= 2)
  {
    v29[0] = a1;
    v29[1] = sub_1B0D3A9BC;
    v29[2] = sub_1B0D3AA28;
    memset(&v29[3], 0, 24);
    *((unsigned char *)a1 + 302) = 3;
    sub_1B0D32AB4((uint64_t)v29, (uint64_t)a4);
    *((unsigned char *)a1 + 302) = v24;
  }
  sub_1B0D1DF88((void *)*a1, a4);
  if (a3) {
    goto LABEL_39;
  }
  return v10;
}

uint64_t sub_1B0D2AA4C(void *a1, void *a2, unsigned __int8 *a3, void *a4, unsigned __int8 *a5, void *a6)
{
  if (a1)
  {
    uint64_t v12 = sub_1B0D05DC0((uint64_t)a1, 0x58uLL);
    if (v12)
    {
LABEL_3:
      *(_OWORD *)uint64_t v12 = 0u;
      *(_OWORD *)(v12 + 16) = 0u;
      *(void *)(v12 + 80) = 0;
      *(_OWORD *)(v12 + 48) = 0u;
      *(_OWORD *)(v12 + 64) = 0u;
      *(_OWORD *)(v12 + 32) = 0u;
      *(void *)uint64_t v12 = a2;
      *(void *)(v12 + 8) = a3;
      *(void *)(v12 + 16) = a4;
      *(void *)(v12 + 24) = a5;
      *(unsigned char *)(v12 + 40) = a4 != 0;
      *(void *)(v12 + 32) = a6;
      return v12;
    }
  }
  else
  {
    uint64_t v12 = sub_1B0C7FC94(88);
    if (v12) {
      goto LABEL_3;
    }
  }
  if (a2) {
    sub_1B0D270DC(a1, a2);
  }
  if (a3) {
    sub_1B0D1DF88(a1, a3);
  }
  if (a4) {
    sub_1B0D270DC(a1, a4);
  }
  if (a5) {
    sub_1B0D1DF88(a1, a5);
  }
  if (a6) {
    sub_1B0D27040(a1, a6);
  }
  return v12;
}

void *sub_1B0D2AB44(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)a1;
  if (!a2)
  {
    if (v5)
    {
      uint64_t v8 = (void *)sub_1B0D05DC0(*(void *)a1, 0x18uLL);
      if (!v8) {
        return v8;
      }
    }
    else
    {
      uint64_t v8 = (void *)sub_1B0C7FC94(24);
      if (!v8) {
        return v8;
      }
    }
    *uint64_t v8 = 0;
    v8[1] = 0;
    _OWORD v8[2] = 0;
    goto LABEL_20;
  }
  unint64_t v7 = 16 * *(int *)a2 + 24;
  if (*(void *)(v5 + 512) > (unint64_t)a2)
  {
    if (*(void *)(v5 + 496) <= (unint64_t)a2)
    {
      if (v7 < 0x81)
      {
LABEL_6:
        uint64_t v8 = a2;
LABEL_20:
        uint64_t v13 = *(int *)v8;
        *(_DWORD *)uint64_t v8 = v13 + 1;
        if (a3
          && (int v14 = *(const void **)a3) != 0
          && (size_t v15 = *(unsigned int *)(a3 + 8), (v16 = (unsigned char *)sub_1B0D05DC0(v5, v15 + 1)) != 0))
        {
          uint64_t v17 = v16;
          memcpy(v16, v14, v15);
          v17[v15] = 0;
          if ((char)byte_1B0DE196D[*v17] < 0)
          {
            uint64_t v18 = 0;
            if (*v17 == 91) {
              int v19 = 93;
            }
            else {
              int v19 = *v17;
            }
            for (int i = 1; ; ++i)
            {
              uint64_t v21 = i;
              int v22 = v17[i];
              if (v22 == v19)
              {
                ++i;
                LOBYTE(v22) = v19;
                if (v17[v21 + 1] != v19) {
                  break;
                }
              }
              v17[v18++] = v22;
            }
            v17[v18] = 0;
          }
          v8[2 * v13 + 1] = v17;
          unsigned int v23 = *(unsigned __int8 *)(a1 + 302);
          if (v23 > 3 || v23 == 2)
          {
            if (*(void *)a1) {
              uint64_t v25 = sub_1B0D05DC0(*(void *)a1, 0x20uLL);
            }
            else {
              uint64_t v25 = sub_1B0C7FC94(32);
            }
            if (v25)
            {
              *(_OWORD *)uint64_t v25 = 0u;
              *(_OWORD *)(v25 + 16) = 0u;
              *(void *)uint64_t v25 = v17;
              *(_OWORD *)(v25 + 8) = *(_OWORD *)a3;
              *(void *)(v25 + 24) = *(void *)(a1 + 408);
              *(void *)(a1 + 408) = v25;
            }
          }
        }
        else
        {
          v8[2 * v13 + 1] = 0;
        }
        return v8;
      }
    }
    else if (*(void *)(v5 + 504) <= (unint64_t)a2 && v7 <= *(unsigned __int16 *)(v5 + 438))
    {
      goto LABEL_6;
    }
  }
  uint64_t v8 = (void *)sub_1B0D05E6C(*(void *)a1, a2, v7);
  if (v8) {
    goto LABEL_20;
  }
  int v9 = *(_DWORD *)a2;
  if (*(int *)a2 >= 1)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 1;
    do
    {
      uint64_t v12 = (void *)a2[v11];
      if (v12)
      {
        sub_1B0D05C10((void *)v5, v12);
        int v9 = *(_DWORD *)a2;
      }
      ++v10;
      v11 += 2;
    }
    while (v10 < v9);
  }
  sub_1B0D15C20((void *)v5, a2);
  return 0;
}

uint64_t sub_1B0D2AD7C(uint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  if (*(_DWORD *)(a3 + 8))
  {
    uint64_t v5 = sub_1B0C904D8(*a1, 113, a3, a4);
    if (v5)
    {
      *(void *)(v5 + 16) = a2;
      *(_DWORD *)(v5 + 4) |= 0x2200u;
      return v5;
    }
  }
  return a2;
}

void sub_1B0D2ADD0(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (a2)
  {
    *(void *)(a2 + 72) = a3;
    int v9 = *(_DWORD *)(a2 + 4);
    *(_DWORD *)(a2 + 4) = v9 | 0x1000000;
    *(void *)(a3 + 112) = a2;
    if ((v9 & 4) != 0 && *(unsigned __int8 *)(a3 + 32) != 166) {
      sub_1B0CEF2BC((uint64_t)a1, "DISTINCT is not supported for window functions", a3, a4, a5, a6, a7, a8, a9);
    }
  }
  else
  {
    sub_1B0D1E054(*a1, (void *)a3);
  }
}

uint64_t sub_1B0D2AE14(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (unsigned __int8 *)a3;
  if (!a2) {
    return (uint64_t)v3;
  }
  if (!a3) {
    return a2;
  }
  if (((*(_DWORD *)(a3 + 4) | *(_DWORD *)(a2 + 4)) & 0x20000003) == 0x20000000 && *((unsigned __int8 *)a1 + 302) <= 1u)
  {
    uint64_t v7 = *a1;
    if (*a1)
    {
      uint64_t v8 = (void *)sub_1B0D05DC0(*a1, 0x18uLL);
      if (v8) {
        goto LABEL_11;
      }
    }
    else
    {
      uint64_t v8 = (void *)sub_1B0C7FC94(24);
      if (v8)
      {
LABEL_11:
        *uint64_t v8 = a1[24];
        a1[24] = (uint64_t)v8;
        v8[1] = a2;
        _OWORD v8[2] = sub_1B0C9AA88;
        uint64_t v9 = *a1;
        if (*a1) {
          goto LABEL_12;
        }
        goto LABEL_16;
      }
    }
    sub_1B0D1DF88((void *)*a1, (unsigned __int8 *)a2);
    uint64_t v9 = *a1;
    if (*a1)
    {
LABEL_12:
      uint64_t v10 = (void *)sub_1B0D05DC0(v9, 0x18uLL);
      if (v10)
      {
LABEL_13:
        *uint64_t v10 = a1[24];
        a1[24] = (uint64_t)v10;
        v10[1] = v3;
        void v10[2] = sub_1B0C9AA88;
LABEL_18:
        v11[0] = "0";
        v11[1] = 1;
        return sub_1B0C904D8(v7, 155, (uint64_t)v11, 0);
      }
LABEL_17:
      sub_1B0D1DF88((void *)*a1, v3);
      goto LABEL_18;
    }
LABEL_16:
    uint64_t v10 = (void *)sub_1B0C7FC94(24);
    if (v10) {
      goto LABEL_13;
    }
    goto LABEL_17;
  }

  return sub_1B0D28CCC(a1, 44, a2, a3);
}

void *sub_1B0D2AF88(void *result, unsigned char *a2, uint64_t a3, char a4)
{
  if (a2 && a3 && *a2 == 121 && *((unsigned __int8 *)result + 302) <= 1u)
  {
    unint64_t result = (void *)*result;
    *(unsigned char *)a3 = a4;
    uint64_t v5 = *(unsigned __int8 **)(a3 + 24);
    if (v5) {
      unint64_t result = sub_1B0D1DF88(result, v5);
    }
    *(void *)(a3 + 24) = 0;
  }
  return result;
}

void *sub_1B0D2AFE4(void *result, unsigned __int8 *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    unsigned int v4 = *((unsigned __int8 *)result + 302);
    if (v4 >= 2)
    {
      v5[0] = result;
      v5[1] = sub_1B0D3A9BC;
      void v5[2] = sub_1B0D3AA28;
      memset(&v5[3], 0, 24);
      *((unsigned char *)result + 302) = 3;
      sub_1B0D32AB4((uint64_t)v5, (uint64_t)a2);
      *((unsigned char *)v3 + 302) = v4;
    }
    return sub_1B0D1DF88((void *)*v3, a2);
  }
  return result;
}

uint64_t sub_1B0D2B074(uint64_t a1)
{
  v3[3] = 0;
  long long v4 = 0u;
  v3[0] = 0;
  uint64_t result = 1;
  WORD2(v4) = 1;
  v3[1] = sub_1B0CADEA4;
  v3[2] = sub_1B0D32AA8;
  if (a1)
  {
    sub_1B0D32AB4((uint64_t)v3, a1);
    return WORD2(v4);
  }
  return result;
}

void sub_1B0D2B0D8(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2)
  {
    *(void *)(a2 + 32) = a3;
    *(_DWORD *)(a2 + 4) |= 0x401000u;
    sub_1B0D2B274(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else if (a3)
  {
    sub_1B0CA0FA8(*(void **)a1, a3, 1);
  }
}

_OWORD *sub_1B0D2B110(void **a1, int a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*a3 < 1)
  {
    int v14 = 0;
    goto LABEL_17;
  }
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 2;
  while (1)
  {
    size_t v15 = *(unsigned __int8 **)&a3[v13];
    if (*v15 != 177) {
      break;
    }
    int v16 = **((_DWORD **)v15 + 4);
    if (v16 != a2) {
      goto LABEL_13;
    }
LABEL_9:
    uint64_t v17 = sub_1B0C90F4C(a1, *((void **)v15 + 4), 0, 0, 0, 0, 0, 512, 0);
    *((void *)v15 + 4) = 0;
    if (v17)
    {
      int v14 = v17;
      if (v12)
      {
        *(unsigned char *)uint64_t v17 = -121;
        *((void *)v17 + 10) = v12;
      }
    }
    else
    {
      int v14 = v12;
    }
    ++v11;
    v13 += 6;
    uint64_t v12 = v14;
    if (v11 >= *a3) {
      goto LABEL_14;
    }
  }
  LOBYTE(v16) = 1;
  if (a2 == 1) {
    goto LABEL_9;
  }
LABEL_13:
  sub_1B0CEF2BC((uint64_t)a1, "IN(...) element has %d term%s - expected %d", (uint64_t)a3, a4, a5, a6, a7, a8, v16);
  int v14 = v12;
LABEL_14:
  if (v14 && *((void *)v14 + 10)) {
    *((_DWORD *)v14 + 1) |= 0x400u;
  }
LABEL_17:
  sub_1B0D270DC(*a1, a3);
  return v14;
}

void sub_1B0D2B274(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1[12])
  {
    uint64_t v10 = *(void *)(a2 + 16);
    if (v10) {
      LODWORD(v10) = *(_DWORD *)(v10 + 40);
    }
    int v31 = v10;
    uint64_t v11 = *(void *)(a2 + 24);
    if (v11)
    {
      int v12 = *(_DWORD *)(v11 + 40);
      if (v12 > (int)v10)
      {
        int v31 = v12;
        LODWORD(v10) = v12;
      }
    }
    int v13 = *(_DWORD *)(a2 + 4);
    int v14 = *(void **)(a2 + 32);
    if ((v13 & 0x1000) != 0)
    {
      sub_1B0CB0C94(v14, &v31);
      LODWORD(v10) = v31;
      goto LABEL_27;
    }
    if (!v14) {
      goto LABEL_27;
    }
    uint64_t v15 = *(unsigned int *)v14;
    if ((int)v15 < 1)
    {
      int v21 = 0;
LABEL_26:
      *(_DWORD *)(a2 + 4) = v21 | v13;
LABEL_27:
      *(_DWORD *)(a2 + 40) = v10 + 1;
      if (*(_DWORD *)(*(void *)a1 + 148) <= (int)v10) {
        sub_1B0CEF2BC((uint64_t)a1, "Expression tree is too large (maximum depth %d)", a3, a4, a5, a6, a7, a8, *(_DWORD *)(*(void *)a1 + 148));
      }
      return;
    }
    uint64_t v16 = 0;
    uint64_t v17 = v14 + 1;
    int v18 = *(_DWORD *)v14;
    do
    {
      if (*v17 && *(_DWORD *)(*v17 + 40) > (int)v10)
      {
        LODWORD(v10) = *(_DWORD *)(*v17 + 40);
        int v18 = *(_DWORD *)v14;
      }
      ++v16;
      v17 += 3;
    }
    while (v16 < v18);
    if (v15 >= 2)
    {
      int v22 = 0;
      int v23 = 0;
      uint64_t v19 = v15 & 0xFFFFFFFE;
      unsigned int v24 = v14 + 4;
      uint64_t v25 = v19;
      do
      {
        uint64_t v26 = *(v24 - 3);
        uint64_t v27 = *v24;
        v24 += 6;
        v22 |= *(_DWORD *)(v26 + 4);
        v23 |= *(_DWORD *)(v27 + 4);
        v25 -= 2;
      }
      while (v25);
      int v20 = v23 | v22;
      if (v19 == v15) {
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v19 = 0;
      int v20 = 0;
    }
    uint64_t v28 = v15 - v19;
    uint64_t v29 = &v14[3 * v19 + 1];
    do
    {
      uint64_t v30 = *v29;
      v29 += 3;
      v20 |= *(_DWORD *)(v30 + 4);
      --v28;
    }
    while (v28);
LABEL_25:
    int v21 = v20 & 0x400208;
    goto LABEL_26;
  }
}

int *sub_1B0D2B3FC(uint64_t *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a5;
  int v9 = a4;
  if (a2)
  {
    int v12 = a2;
    int v13 = *a2;
    if (a2[1] <= *a2)
    {
      int v12 = sub_1B0D55B34(*a1, a2, 0);
      if (v9) {
        goto LABEL_9;
      }
    }
    else
    {
      *a2 = v13 + 1;
      int v14 = &a2[6 * v13];
      *((void *)v14 + 1) = 0;
      *((void *)v14 + 2) = 0;
      *((void *)v14 + 3) = 0;
      if (a4) {
        goto LABEL_9;
      }
    }
LABEL_8:
    if (v8 == -1) {
      goto LABEL_11;
    }
    goto LABEL_9;
  }
  int v12 = (int *)sub_1B0D55ACC((void *)*a1, 0);
  if (!v9) {
    goto LABEL_8;
  }
LABEL_9:
  if (!*(unsigned char *)(*a1 + 197)) {
    sub_1B0CEF2BC((uint64_t)a1, "syntax error after column name \"%.*s\"", a3, a4, a5, a6, a7, a8, *(_DWORD *)(a3 + 8));
  }
LABEL_11:
  sub_1B0D29C34((uint64_t)a1, v12, a3, 1);
  return v12;
}

void *sub_1B0D2B4EC(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void *)a1;
  if (*(unsigned char *)(*(void *)a1 + 103)) {
    goto LABEL_2;
  }
  if (!*(unsigned char *)(v9 + 197))
  {
    int v23 = *(_DWORD *)(v9 + 44);
    uint64_t v24 = *(void *)(*(void *)(v9 + 32) + 24);
    *(unsigned char *)(v9 + 100) = *(unsigned char *)(v24 + 113);
    if ((*(unsigned char *)(v24 + 114) & 1) != 0 || (int v25 = sub_1B0C879A0(v9, 0, (char **)(a1 + 8), 0, a5, a6, a7, a8)) == 0)
    {
      uint64_t v26 = *(unsigned int *)(v9 + 40);
      if ((int)v26 < 2)
      {
LABEL_12:
        if ((v23 & 1) == 0) {
          *(_DWORD *)(v9 + 44) &= ~1u;
        }
        if (*(unsigned char *)(v9 + 111)) {
          *(_DWORD *)(v9 + 44) |= 0x10u;
        }
        goto LABEL_6;
      }
      while (1)
      {
        uint64_t v27 = v26 - 1;
        if ((*(_WORD *)(*(void *)(*(void *)(v9 + 32) + 32 * (v26 - 1) + 24) + 114) & 1) == 0)
        {
          int v25 = sub_1B0C879A0(v9, (v26 - 1), (char **)(a1 + 8), 0, a5, a6, a7, a8);
          if (v25) {
            break;
          }
        }
        uint64_t v26 = v27;
        if ((unint64_t)(v27 + 1) <= 2) {
          goto LABEL_12;
        }
      }
    }
    *(_DWORD *)(a1 + 24) = v25;
    ++*(_DWORD *)(a1 + 48);
    goto LABEL_2;
  }
LABEL_6:
  int v13 = *(unsigned __int8 **)(a2 + 16);
  uint64_t v14 = sub_1B0D22904(v9, *(unsigned __int8 **)(a2 + 24), v13);
  if (v14)
  {
    int v22 = (uint64_t *)v14;
    if ((*(_WORD *)(v14 + 99) & 3) != 0)
    {
      sub_1B0CEF2BC(a1, "index associated with UNIQUE or PRIMARY KEY constraint cannot be dropped", v16, v17, v18, v19, v20, v21, 0);
      goto LABEL_2;
    }
    uint64_t v38 = *(void *)(v14 + 48);
    uint64_t v39 = *(void *)(v9 + 32);
    if (v38)
    {
      unsigned int v40 = (uint64_t *)(v39 + 24);
      int v41 = -1;
      do
      {
        uint64_t v42 = *v40;
        v40 += 4;
        ++v41;
      }
      while (v42 != v38);
    }
    else
    {
      int v41 = -32768;
    }
    uint64_t v43 = v41;
    if (v41 == 1) {
      uint64_t v44 = "sqlite_temp_master";
    }
    else {
      uint64_t v44 = "sqlite_master";
    }
    uint64_t v45 = *(void *)a1;
    int v46 = *(uint64_t (**)(void, uint64_t, const char *, void, uint64_t, void))(*(void *)a1 + 528);
    if (!v46) {
      goto LABEL_57;
    }
    uint64_t v47 = *(void **)(v14 + 24);
    uint64_t v48 = *(void *)(v39 + 32 * v41);
    if (*(unsigned char *)(v45 + 197) || *(unsigned char *)(a1 + 302))
    {
      if (v41 == 1) {
        uint64_t v15 = 12;
      }
      else {
        uint64_t v15 = 10;
      }
    }
    else
    {
      int v68 = v46(*(void *)(v45 + 536), 9, v44, 0, v48, *(void *)(a1 + 368));
      if (v68 == 1)
      {
LABEL_72:
        int v70 = 23;
        char v71 = "not authorized";
LABEL_75:
        sub_1B0CEF2BC(a1, v71, (uint64_t)v44, v17, v18, v19, v20, v21, v72);
        *(_DWORD *)(a1 + 24) = v70;
        goto LABEL_2;
      }
      if ((v68 & 0xFFFFFFFD) != 0)
      {
LABEL_74:
        int v70 = 1;
        char v71 = "authorizer malfunction";
        goto LABEL_75;
      }
      if (v68) {
        goto LABEL_2;
      }
      uint64_t v45 = *(void *)a1;
      int v46 = *(uint64_t (**)(void, uint64_t, const char *, void, uint64_t, void))(*(void *)a1 + 528);
      if (v43 == 1) {
        uint64_t v15 = 12;
      }
      else {
        uint64_t v15 = 10;
      }
      if (!v46) {
        goto LABEL_57;
      }
    }
    if (*(unsigned char *)(v45 + 197) || *(unsigned char *)(a1 + 302))
    {
LABEL_57:
      char v49 = *(uint64_t **)(a1 + 16);
      if (v49) {
        goto LABEL_62;
      }
      if (!*(void *)(a1 + 168) && (*(unsigned char *)(*(void *)a1 + 96) & 8) == 0) {
        *(unsigned char *)(a1 + 35) = 1;
      }
      char v49 = (uint64_t *)sub_1B0CEF480((uint64_t *)a1, v15, (uint64_t)v44, v17, v18, v19, v20, v21);
      if (v49)
      {
LABEL_62:
        sub_1B0D3597C(a1, 1, v43);
        sub_1B0CD9598((uint64_t *)a1, "DELETE FROM %Q.sqlite_master WHERE name=%Q AND type='index'", v50, v51, v52, v53, v54, v55, *(void *)(*(void *)(v9 + 32) + 32 * v43));
        sub_1B0D3C0E4((uint64_t *)a1, v43);
        sub_1B0D37018((uint64_t *)a1, v43, v56, v57, v58, v59, v60, v61);
        sub_1B0D3CD5C(a1, *((unsigned int *)v22 + 22), v43, v62, v63, v64, v65, v66);
        sub_1B0CCB908(v49, 152, v43, 0, 0, *v22, 0, v67);
      }
      goto LABEL_2;
    }
    int v69 = v46(*(void *)(v45 + 536), v15, (const char *)*v22, *v47, v48, *(void *)(a1 + 368));
    if (v69 == 1) {
      goto LABEL_72;
    }
    if ((v69 & 0xFFFFFFFD) == 0)
    {
      if (v69) {
        goto LABEL_2;
      }
      goto LABEL_57;
    }
    goto LABEL_74;
  }
  if (a3)
  {
    uint64_t v28 = *(void *)a1;
    int v29 = *(_DWORD *)(*(void *)a1 + 40);
    if (v29 >= 1)
    {
      for (uint64_t i = 0; i < v29; ++i)
      {
        uint64_t v33 = *(void *)(v28 + 32) + 32 * i;
        if (*(void *)(v33 + 8))
        {
          if (v13)
          {
            uint64_t v34 = *(unsigned __int8 **)v33;
            for (uint64_t j = v13; ; ++j)
            {
              uint64_t v36 = *j;
              uint64_t v37 = *v34;
              if (v36 == v37)
              {
                if (!*j) {
                  break;
                }
              }
              else if (byte_1B0DE1758[v36] != byte_1B0DE1758[v37])
              {
                goto LABEL_27;
              }
              ++v34;
            }
          }
          if (*(void *)(a1 + 168)) {
            uint64_t v31 = *(void *)(a1 + 168);
          }
          else {
            uint64_t v31 = a1;
          }
          int v32 = *(_DWORD *)(v31 + 124);
          if ((v32 & (1 << i)) == 0)
          {
            *(_DWORD *)(v31 + 124) = v32 | (1 << i);
            if (i == 1)
            {
              sub_1B0D0E7A4(v31);
              int v29 = *(_DWORD *)(v28 + 40);
            }
          }
        }
LABEL_27:
        ;
      }
    }
    sub_1B0D358A0((uint64_t *)a1, v15, v16, v17, v18, v19, v20, v21);
  }
  else
  {
    sub_1B0CEF2BC(a1, "no such index: %S", v16, v17, v18, v19, v20, v21, a2 + 8);
  }
  *(unsigned char *)(a1 + 29) = 1;
LABEL_2:

  return sub_1B0CA115C((void *)v9, (void *)a2);
}

uint64_t sub_1B0D2B944(uint64_t result, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = a2;
  uint64_t v10 = (void **)result;
  uint64_t v11 = *(void *)(result + 16);
  if (v11) {
    goto LABEL_31;
  }
  if (!*(void *)(result + 168) && (*(unsigned char *)(*(void *)result + 96) & 8) == 0) {
    *(unsigned char *)(result + 35) = 1;
  }
  uint64_t result = sub_1B0CEF480((uint64_t *)result, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  uint64_t v11 = result;
  if (result)
  {
LABEL_31:
    if (!*((_DWORD *)v10 + 12))
    {
      if (!v9
        || (result = sub_1B0D35B18((uint64_t)*v10, v9), uint64_t v9 = result & ~((int)result >> 31), v9 != 1))
      {
        if (!a3) {
          goto LABEL_11;
        }
        uint64_t v24 = 0;
        long long v23 = 0u;
        long long v22 = 0u;
        memset(v25, 0, sizeof(v25));
        v21[0] = v10;
        v21[1] = v25;
        DWORD2(v23) = 0x10000;
        uint64_t result = sub_1B0D373A0((uint64_t)v21, (uint64_t)a3, (uint64_t)a3, a4, a5, a6, a7, a8);
        if (!result)
        {
          uint64_t v14 = (*((_DWORD *)v10 + 14) + 1);
          *((_DWORD *)v10 + 14) = v14;
          if (v10[2])
          {
            uint64_t result = sub_1B0C9E080(v10, a3, v14, v12, v13, a6, a7, a8);
            if (result != v14)
            {
              uint64_t v17 = result;
              uint64_t v18 = 80;
              if ((a3[6] & 0x40) == 0)
              {
                if (*a3 == 176) {
                  uint64_t v18 = 80;
                }
                else {
                  uint64_t v18 = 81;
                }
              }
              uint64_t result = (uint64_t)v10[2];
              int v19 = *(_DWORD *)(result + 144);
              if (*(_DWORD *)(result + 148) <= v19)
              {
                uint64_t result = sub_1B0D25510(result, v18, v17, v14, 0, a6, a7, a8);
              }
              else
              {
                *(_DWORD *)(result + 144) = v19 + 1;
                uint64_t v20 = *(void *)(result + 136) + 40 * v19;
                *(unsigned char *)uint64_t v20 = v18;
                *(_WORD *)(v20 + 2) = 0;
                *(_DWORD *)(v20 + 4) = v17;
                *(_DWORD *)(v20 + 8) = v14;
                *(unsigned char *)(v20 + 1) = 0;
                *(void *)(v20 + 12) = 0;
                *(void *)(v20 + 28) = 0;
                *(void *)(v20 + 20) = 0;
                *(_DWORD *)(v20 + 36) = 0;
              }
            }
          }
        }
        else
        {
LABEL_11:
          uint64_t v14 = 0;
        }
        int v15 = *(_DWORD *)(v11 + 144);
        if (*(_DWORD *)(v11 + 148) <= v15)
        {
          uint64_t result = sub_1B0D25510(v11, 5, v9, v14, 0, a6, a7, a8);
        }
        else
        {
          *(_DWORD *)(v11 + 144) = v15 + 1;
          uint64_t v16 = *(void *)(v11 + 136) + 40 * v15;
          *(_DWORD *)uint64_t v16 = 5;
          *(_DWORD *)(v16 + 4) = v9;
          *(_DWORD *)(v16 + 8) = v14;
          *(void *)(v16 + 12) = 0;
          *(void *)(v16 + 28) = 0;
          *(void *)(v16 + 20) = 0;
          *(_DWORD *)(v16 + 36) = 0;
        }
        *(_DWORD *)(v11 + 272) |= 1 << v9;
        if (*(unsigned char *)(*(void *)(*(void *)(*(void *)v11 + 32) + 32 * v9 + 8) + 17)) {
          *(_DWORD *)(v11 + 276) |= 1 << v9;
        }
      }
    }
  }
  if (a3) {
    return (uint64_t)sub_1B0D1DF88(*v10, a3);
  }
  return result;
}

void *sub_1B0D2BC28(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, char a5, unsigned int **a6, unsigned __int8 *a7, int a8)
{
  uint64_t v13 = *(void **)a1;
  uint64_t v20 = sub_1B0CB0988(a1, 127, a2, a7, a8);
  if (!v20)
  {
    if (a3)
    {
      int v22 = *(_DWORD *)a3;
      if (*(int *)a3 >= 1)
      {
        uint64_t v23 = 0;
        uint64_t v24 = 1;
        do
        {
          int v25 = (void *)a3[v24];
          if (v25)
          {
            sub_1B0D05C10(v13, v25);
            int v22 = *(_DWORD *)a3;
          }
          ++v23;
          v24 += 2;
        }
        while (v23 < v22);
      }
      sub_1B0D15C20(v13, a3);
    }
    if (a6) {
      sub_1B0D27040(v13, a6);
    }
LABEL_21:
    if (!a4) {
      return v20;
    }
LABEL_22:
    sub_1B0CA0FA8(v13, a4, 1);
    return v20;
  }
  if (*(unsigned __int8 *)(a1 + 302) <= 1u)
  {
    uint64_t v21 = sub_1B0CB0DF4((uint64_t)v13, a4, 1);
  }
  else
  {
    uint64_t v21 = a4;
    a4 = 0;
  }
  void v20[2] = v21;
  v20[7] = a3;
  v20[8] = a6;
  *((unsigned char *)v20 + 1) = a5;
  if (!a6) {
    goto LABEL_21;
  }
  uint64_t v26 = *a6;
  if (!*a6) {
    goto LABEL_21;
  }
  uint64_t v27 = *v26;
  if ((int)v27 < 1) {
    goto LABEL_21;
  }
  uint64_t v28 = (_WORD *)((char *)v26 + 25);
  while ((*v28 & 0x20) == 0)
  {
    v28 += 12;
    if (!--v27) {
      goto LABEL_21;
    }
  }
  int v30 = *((unsigned __int8 *)v28 - 1);
  BOOL v31 = v30 == 3 || v30 == 0;
  int v32 = "LAST";
  if (v31) {
    int v32 = "FIRST";
  }
  sub_1B0CEF2BC(a1, "unsupported use of NULLS %s", v14, v15, v16, v17, v18, v19, (char)v32);
  if (a4) {
    goto LABEL_22;
  }
  return v20;
}

void *sub_1B0D2BDB4(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unsigned __int8 *a4, int a5)
{
  uint64_t v7 = *(void **)a1;
  int v8 = sub_1B0CB0988(a1, 128, a2, a4, a5);
  if (v8)
  {
    if (*(unsigned __int8 *)(a1 + 302) <= 1u)
    {
      if (a3) {
        uint64_t v9 = sub_1B0CAE048((uint64_t)v7, a3, 1, 0);
      }
      else {
        uint64_t v9 = 0;
      }
    }
    else
    {
      uint64_t v9 = (unsigned int *)a3;
      a3 = 0;
    }
    v8[5] = v9;
    *((unsigned char *)v8 + 1) = 11;
  }
  if (a3) {
    sub_1B0D1DF88(v7, a3);
  }
  return v8;
}

uint64_t sub_1B0D2BE50(void *a1, uint64_t a2, unsigned __int8 *a3, int a4)
{
  if (a1)
  {
    uint64_t v8 = sub_1B0D05DC0((uint64_t)a1, 0x60uLL);
    if (v8) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v8 = sub_1B0C7FC94(96);
    if (v8)
    {
LABEL_3:
      *(_OWORD *)uint64_t v8 = 0u;
      *(_OWORD *)(v8 + 16) = 0u;
      *(_OWORD *)(v8 + 64) = 0u;
      *(_OWORD *)(v8 + 80) = 0u;
      *(_OWORD *)(v8 + 32) = 0u;
      *(_OWORD *)(v8 + 48) = 0u;
      *(_WORD *)uint64_t v8 = 2954;
      int v9 = a4 - a3;
      *(void *)(v8 + 16) = a2;
      do
      {
        uint64_t v10 = a3;
        int v11 = v9;
        int v12 = *a3++;
        --v9;
      }
      while ((byte_1B0DE196D[v12] & 1) != 0);
      uint64_t v13 = v11;
      uint64_t v14 = ((uint64_t)v11 << 32) + 0x100000000;
      uint64_t v15 = v13 - 2;
      do
      {
        char v16 = byte_1B0DE196D[a3[v15]];
        v14 -= 0x100000000;
        --v15;
      }
      while ((v16 & 1) != 0);
      size_t v17 = v14 >> 32;
      uint64_t v18 = (unsigned char *)sub_1B0D05DC0((uint64_t)a1, (v14 >> 32) + 1);
      uint64_t v19 = v18;
      if (v18)
      {
        memcpy(v18, v10, v17);
        v19[v17] = 0;
        int v20 = *v19;
        if (*v19)
        {
          uint64_t v21 = v19 + 1;
          do
          {
            if (byte_1B0DE196D[v20]) {
              *(v21 - 1) = 32;
            }
            int v22 = *v21++;
            int v20 = v22;
          }
          while (v22);
        }
      }
      *(void *)(v8 + 72) = v19;
      return v8;
    }
  }
  if (a2) {
    sub_1B0CA0FA8(a1, a2, 1);
  }
  return v8;
}

void *sub_1B0D2BF94(uint64_t *a1, void *a2, uint64_t n, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *a1;
  if (*(unsigned char *)(*a1 + 103)) {
    goto LABEL_70;
  }
  int v10 = n;
  if (!*(unsigned char *)(v9 + 197))
  {
    int v43 = *(_DWORD *)(v9 + 44);
    uint64_t v44 = *(void *)(*(void *)(v9 + 32) + 24);
    *(unsigned char *)(v9 + 100) = *(unsigned char *)(v44 + 113);
    if ((*(unsigned char *)(v44 + 114) & 1) != 0 || (int v45 = sub_1B0C879A0(v9, 0, (char **)a1 + 1, 0, a5, a6, a7, a8)) == 0)
    {
      uint64_t v46 = *(unsigned int *)(v9 + 40);
      if ((int)v46 < 2)
      {
LABEL_59:
        if ((v43 & 1) == 0) {
          *(_DWORD *)(v9 + 44) &= ~1u;
        }
        if (*(unsigned char *)(v9 + 111)) {
          *(_DWORD *)(v9 + 44) |= 0x10u;
        }
        goto LABEL_3;
      }
      while (1)
      {
        uint64_t v47 = v46 - 1;
        if ((*(_WORD *)(*(void *)(*(void *)(v9 + 32) + 32 * (v46 - 1) + 24) + 114) & 1) == 0)
        {
          int v45 = sub_1B0C879A0(v9, (v46 - 1), (char **)a1 + 1, 0, a5, a6, a7, a8);
          if (v45) {
            break;
          }
        }
        uint64_t v46 = v47;
        if ((unint64_t)(v47 + 1) <= 2) {
          goto LABEL_59;
        }
      }
    }
    *((_DWORD *)a1 + 6) = v45;
    ++*((_DWORD *)a1 + 12);
    goto LABEL_70;
  }
LABEL_3:
  int v12 = (unsigned char *)a2[2];
  int v13 = *(_DWORD *)(v9 + 40);
  if (v13 < 1)
  {
LABEL_38:
    if (v10)
    {
      uint64_t v33 = *a1;
      int v34 = *(_DWORD *)(*a1 + 40);
      if (v34 >= 1)
      {
        for (uint64_t i = 0; i < v34; ++i)
        {
          uint64_t v38 = *(void *)(v33 + 32) + 32 * i;
          if (*(void *)(v38 + 8))
          {
            if (v12)
            {
              uint64_t v39 = *(unsigned __int8 **)v38;
              for (uint64_t j = v12; ; ++j)
              {
                uint64_t v41 = *j;
                uint64_t v42 = *v39;
                if (v41 == v42)
                {
                  if (!*j) {
                    break;
                  }
                }
                else if (byte_1B0DE1758[v41] != byte_1B0DE1758[v42])
                {
                  goto LABEL_45;
                }
                ++v39;
              }
            }
            if (a1[21]) {
              uint64_t v36 = a1[21];
            }
            else {
              uint64_t v36 = (uint64_t)a1;
            }
            int v37 = *(_DWORD *)(v36 + 124);
            if ((v37 & (1 << i)) == 0)
            {
              *(_DWORD *)(v36 + 124) = v37 | (1 << i);
              if (i == 1)
              {
                sub_1B0D0E7A4(v36);
                int v34 = *(_DWORD *)(v33 + 40);
              }
            }
          }
LABEL_45:
          ;
        }
      }
    }
    else
    {
      sub_1B0CEF2BC((uint64_t)a1, "no such trigger: %S", n, a4, a5, a6, a7, a8, (_BYTE)a2 + 8);
    }
    *((unsigned char *)a1 + 29) = 1;
  }
  else
  {
    unsigned int v14 = 0;
    uint64_t v15 = (unsigned char *)a2[3];
    uint64_t v16 = *(void *)(v9 + 32);
    while (1)
    {
      uint64_t v19 = v14 ^ (v14 < 2);
      if (!v12) {
        break;
      }
      int v20 = *(unsigned char **)(v16 + 32 * v19);
      for (uint64_t k = (unsigned __int8 *)a2[2]; ; ++k)
      {
        uint64_t n = *v20;
        a4 = *k;
        if (n != a4) {
          break;
        }
        if (!*v20) {
          goto LABEL_14;
        }
LABEL_11:
        ++v20;
      }
      uint64_t n = byte_1B0DE1758[n];
      a4 = byte_1B0DE1758[a4];
      if (n == a4) {
        goto LABEL_11;
      }
      if (!v19)
      {
        uint64_t v27 = "main";
        for (m = (unsigned __int8 *)a2[2]; ; ++m)
        {
          uint64_t n = *(unsigned __int8 *)v27;
          a4 = *m;
          if (n == a4)
          {
            if (!*v27) {
              goto LABEL_14;
            }
          }
          else
          {
            uint64_t n = byte_1B0DE1758[n];
            a4 = byte_1B0DE1758[a4];
            if (n != a4) {
              break;
            }
          }
          ++v27;
        }
      }
LABEL_7:
      if (++v14 == v13) {
        goto LABEL_38;
      }
    }
LABEL_14:
    uint64_t v22 = *(void *)(v16 + 32 * v19 + 24);
    uint64_t v23 = *(void *)(v22 + 72);
    if (v23)
    {
      int v24 = *v15;
      if (*v15)
      {
        unsigned int v25 = 0;
        a4 = (uint64_t)(v15 + 1);
        do
        {
          unsigned int v25 = -1640531535 * (v25 + byte_1B0DE1758[v24]);
          int v26 = *(unsigned __int8 *)a4++;
          int v24 = v26;
        }
        while (v26);
      }
      else
      {
        unsigned int v25 = 0;
      }
      unsigned int v30 = *(_DWORD *)(v22 + 56);
      uint64_t n = v25 / v30;
      BOOL v31 = (_DWORD *)(v23 + 16 * (v25 % v30));
      size_t v17 = (uint64_t *)(v31 + 2);
      int v29 = *v31;
      if (!v29) {
        goto LABEL_5;
      }
      while (1)
      {
LABEL_30:
        size_t v17 = (uint64_t *)*v17;
        int v32 = (unsigned char *)v17[3];
        for (uint64_t n = a2[3]; ; ++n)
        {
          a4 = *v32;
          a5 = *(unsigned __int8 *)n;
          if (a4 != a5) {
            break;
          }
          if (!*v32) {
            goto LABEL_6;
          }
LABEL_32:
          ++v32;
        }
        a4 = byte_1B0DE1758[a4];
        a5 = byte_1B0DE1758[a5];
        if (a4 == a5) {
          goto LABEL_32;
        }
        if (!--v29) {
          goto LABEL_5;
        }
      }
    }
    size_t v17 = (uint64_t *)(v22 + 64);
    int v29 = *(_DWORD *)(v22 + 60);
    if (v29) {
      goto LABEL_30;
    }
LABEL_5:
    size_t v17 = &qword_1E9B52220;
LABEL_6:
    uint64_t v18 = (uint64_t *)v17[2];
    if (!v18) {
      goto LABEL_7;
    }
    sub_1B0D3CA10(a1, v18, n, a4, a5, a6, a7, a8);
  }
LABEL_70:

  return sub_1B0CA115C((void *)v9, a2);
}

void sub_1B0D2C354(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9 = a3;
  uint64_t v12 = *a1;
  if (*(unsigned char *)(*a1 + 197)) {
    goto LABEL_2;
  }
  int v15 = *(_DWORD *)(v12 + 44);
  uint64_t v16 = *(void *)(*(void *)(v12 + 32) + 24);
  *(unsigned char *)(v12 + 100) = *(unsigned char *)(v16 + 113);
  if ((*(unsigned char *)(v16 + 114) & 1) == 0)
  {
    int v17 = sub_1B0C879A0(v12, 0, (char **)a1 + 1, 0, a5, a6, a7, a8);
    if (v17)
    {
LABEL_21:
      *((_DWORD *)a1 + 6) = v17;
      ++*((_DWORD *)a1 + 12);
      return;
    }
  }
  uint64_t v18 = *(unsigned int *)(v12 + 40);
  if ((int)v18 >= 2)
  {
    do
    {
      uint64_t v19 = v18 - 1;
      if ((*(_WORD *)(*(void *)(*(void *)(v12 + 32) + 32 * (v18 - 1) + 24) + 114) & 1) == 0)
      {
        int v17 = sub_1B0C879A0(v12, (v18 - 1), (char **)a1 + 1, 0, a5, a6, a7, a8);
        if (v17) {
          goto LABEL_21;
        }
      }
      uint64_t v18 = v19;
    }
    while ((unint64_t)(v19 + 1) > 2);
  }
  if ((v15 & 1) == 0) {
    *(_DWORD *)(v12 + 44) &= ~1u;
  }
  if (*(unsigned char *)(v12 + 111)) {
    *(_DWORD *)(v12 + 44) |= 0x10u;
  }
LABEL_2:
  if (!a2)
  {
    uint64_t v39 = *a1;
    int v40 = *(_DWORD *)(*a1 + 40);
    if (v40 >= 1)
    {
      int v41 = 0;
      uint64_t v42 = *(void *)(v39 + 32);
      do
      {
        int v43 = *(void **)(*(void *)(v42 + 24) + 16);
        if (v43)
        {
          do
          {
            uint64_t v44 = v43[2];
            if (*(unsigned char *)(v44 + 63) != 1)
            {
              for (uint64_t i = *(void *)(v44 + 16); i; uint64_t i = *(void *)(i + 40))
              {
                uint64_t v46 = *(void *)(v44 + 96);
                if (v46)
                {
                  uint64_t v47 = (uint64_t *)(*(void *)(*a1 + 32) + 24);
                  int v48 = -1;
                  do
                  {
                    uint64_t v49 = *v47;
                    v47 += 4;
                    ++v48;
                  }
                  while (v49 != v46);
                }
                else
                {
                  int v48 = -32768;
                }
                if (a1[21]) {
                  uint64_t v50 = a1[21];
                }
                else {
                  uint64_t v50 = (uint64_t)a1;
                }
                int v51 = *(_DWORD *)(v50 + 124);
                int v52 = 1 << v48;
                if ((v51 & (1 << v48)) == 0)
                {
                  *(_DWORD *)(v50 + 124) = v51 | v52;
                  if (v48 == 1) {
                    sub_1B0D0E7A4(v50);
                  }
                }
                *(_DWORD *)(v50 + 120) |= v52;
                sub_1B0D3B084((uint64_t)a1, i, 0xFFFFFFFFLL, a4, a5, a6, a7, a8);
              }
            }
            int v43 = (void *)*v43;
          }
          while (v43);
          int v40 = *(_DWORD *)(v39 + 40);
        }
        ++v41;
        v42 += 32;
      }
      while (v41 < v40);
    }
    return;
  }
  if (v9 && *(void *)v9)
  {
LABEL_5:
    uint64_t v13 = *a1;
    if (*(_DWORD *)(v9 + 8))
    {
      if (*(unsigned char *)(v13 + 197))
      {
        unsigned int v14 = "corrupt database";
        goto LABEL_8;
      }
      unsigned int v53 = sub_1B0D35B18(v13, a2);
      if ((v53 & 0x80000000) != 0)
      {
        sub_1B0CEF2BC((uint64_t)a1, "unknown database %T", v54, v55, v56, v57, v58, v59, a2);
        return;
      }
    }
    else
    {
      unsigned int v53 = *(unsigned __int8 *)(v13 + 196);
      uint64_t v9 = a2;
    }
    uint64_t v60 = *(const void **)v9;
    if (!*(void *)v9) {
      return;
    }
    size_t v61 = *(unsigned int *)(v9 + 8);
    uint64_t v62 = (char *)sub_1B0D05DC0(v12, v61 + 1);
    if (!v62) {
      return;
    }
    uint64_t v23 = v62;
    memcpy(v62, v60, v61);
    v23[v61] = 0;
    int v63 = *v23;
    if ((char)byte_1B0DE196D[*v23] < 0)
    {
      uint64_t v64 = 0;
      if (v63 == 91) {
        int v63 = 93;
      }
      for (int j = 1; ; ++j)
      {
        uint64_t v66 = j;
        int v67 = v23[j];
        if (v67 == v63)
        {
          ++j;
          LOBYTE(v67) = v63;
          if (v23[v66 + 1] != v63) {
            break;
          }
        }
        v23[v64++] = v67;
      }
      v23[v64] = 0;
    }
    int v68 = *(unsigned __int8 **)(*(void *)(v12 + 32) + 32 * v53);
    uint64_t v69 = sub_1B0CF60C8(v12, v23, v68);
    if (v69)
    {
      uint64_t v75 = v69;
      if (*(unsigned char *)(v69 + 63) != 1)
      {
        for (uint64_t k = *(void *)(v69 + 16); k; uint64_t k = *(void *)(k + 40))
        {
          uint64_t v77 = *(void *)(v75 + 96);
          if (v77)
          {
            int v78 = (uint64_t *)(*(void *)(*a1 + 32) + 24);
            int v79 = -1;
            do
            {
              uint64_t v80 = *v78;
              v78 += 4;
              ++v79;
            }
            while (v80 != v77);
          }
          else
          {
            int v79 = -32768;
          }
          if (a1[21]) {
            uint64_t v81 = a1[21];
          }
          else {
            uint64_t v81 = (uint64_t)a1;
          }
          int v82 = *(_DWORD *)(v81 + 124);
          int v83 = 1 << v79;
          if ((v82 & (1 << v79)) == 0)
          {
            *(_DWORD *)(v81 + 124) = v82 | v83;
            if (v79 == 1) {
              sub_1B0D0E7A4(v81);
            }
          }
          *(_DWORD *)(v81 + 120) |= v83;
          sub_1B0D3B084((uint64_t)a1, k, 0xFFFFFFFFLL, v70, v71, v72, v73, v74);
        }
      }
      uint64_t v104 = (void *)v12;
      goto LABEL_125;
    }
    uint64_t v110 = sub_1B0D22904(v12, (unsigned __int8 *)v23, v68);
    sub_1B0D05C10((void *)v12, v23);
    if (v110)
    {
      sub_1B0D3597C((uint64_t)a1, 0, v53);
      sub_1B0D3B084((uint64_t)a1, v110, 0xFFFFFFFFLL, v111, v112, v113, v114, v115);
      return;
    }
    unsigned int v14 = "unable to identify the object to be reindexed";
LABEL_8:
    sub_1B0CEF2BC((uint64_t)a1, v14, a3, a4, a5, a6, a7, a8, a9);
    return;
  }
  int v20 = *(const void **)a2;
  if (!*(void *)a2) {
    return;
  }
  size_t v21 = *(unsigned int *)(a2 + 8);
  uint64_t v22 = (char *)sub_1B0D05DC0(*a1, v21 + 1);
  if (!v22) {
    return;
  }
  uint64_t v23 = v22;
  memcpy(v22, v20, v21);
  v23[v21] = 0;
  int v29 = *v23;
  if ((char)byte_1B0DE196D[*v23] < 0)
  {
    uint64_t v30 = 0;
    if (v29 == 91) {
      int v29 = 93;
    }
    for (int m = 1; ; ++m)
    {
      uint64_t v32 = m;
      int v33 = v23[m];
      if (v33 == v29)
      {
        ++m;
        LOBYTE(v33) = v29;
        if (v23[v32 + 1] != v29) {
          break;
        }
      }
      v23[v30++] = v33;
    }
    v23[v30] = 0;
  }
  uint64_t v34 = *(void *)(v12 + 656);
  if (!v34)
  {
    uint64_t v84 = (uint64_t *)(v12 + 648);
    int v85 = *(_DWORD *)(v12 + 644);
    if (v85) {
      goto LABEL_130;
    }
LABEL_88:
    uint64_t v84 = &qword_1E9B52220;
    goto LABEL_89;
  }
  int v35 = *v23;
  if (*v23)
  {
    unsigned int v36 = 0;
    int v37 = (unsigned __int8 *)(v23 + 1);
    do
    {
      unsigned int v36 = -1640531535 * (v36 + byte_1B0DE1758[v35]);
      int v38 = *v37++;
      int v35 = v38;
    }
    while (v38);
  }
  else
  {
    unsigned int v36 = 0;
  }
  uint64_t v105 = (_DWORD *)(v34 + 16 * (v36 % *(_DWORD *)(v12 + 640)));
  uint64_t v84 = (uint64_t *)(v105 + 2);
  int v85 = *v105;
  if (!v85) {
    goto LABEL_88;
  }
  do
  {
LABEL_130:
    uint64_t v84 = (uint64_t *)*v84;
    char v106 = (unsigned char *)v84[3];
    for (uint64_t n = v23; ; ++n)
    {
      uint64_t v108 = *v106;
      uint64_t v109 = *n;
      if (v108 != v109) {
        break;
      }
      if (!*v106) {
        goto LABEL_89;
      }
LABEL_132:
      ++v106;
    }
    if (byte_1B0DE1758[v108] == byte_1B0DE1758[v109]) {
      goto LABEL_132;
    }
    --v85;
  }
  while (v85);
  uint64_t v84 = &qword_1E9B52220;
LABEL_89:
  if (!v84[2])
  {
    sub_1B0D05C10((void *)v12, v23);
    goto LABEL_5;
  }
  uint64_t v116 = (void *)v12;
  uint64_t v117 = *a1;
  int v86 = *(_DWORD *)(*a1 + 40);
  if (v86 < 1) {
    goto LABEL_122;
  }
  int v87 = 0;
  uint64_t v88 = *(void *)(v117 + 32);
  while (2)
  {
    uint64_t v89 = *(void **)(*(void *)(v88 + 24) + 16);
    if (!v89) {
      goto LABEL_93;
    }
    int v118 = v87;
    while (2)
    {
      uint64_t v90 = v89[2];
      if (*(unsigned char *)(v90 + 63) == 1) {
        goto LABEL_96;
      }
      uint64_t v91 = *(void *)(v90 + 16);
      if (!v91) {
        goto LABEL_96;
      }
      while (2)
      {
        if (!*(_WORD *)(v91 + 96)) {
          goto LABEL_101;
        }
        uint64_t v92 = 0;
        while (*(__int16 *)(*(void *)(v91 + 8) + 2 * v92) < 0)
        {
LABEL_104:
          if (++v92 == *(unsigned __int16 *)(v91 + 96)) {
            goto LABEL_101;
          }
        }
        int v93 = *(unsigned char **)(*(void *)(v91 + 64) + 8 * v92);
        int8x8_t v94 = v23;
        while (2)
        {
          uint64_t v95 = *v93;
          uint64_t v96 = *v94;
          if (v95 != v96)
          {
            if (byte_1B0DE1758[v95] != byte_1B0DE1758[v96]) {
              goto LABEL_104;
            }
            goto LABEL_108;
          }
          if (*v93)
          {
LABEL_108:
            ++v93;
            ++v94;
            continue;
          }
          break;
        }
        uint64_t v97 = *(void *)(v90 + 96);
        if (v97)
        {
          char v98 = (uint64_t *)(*(void *)(*a1 + 32) + 24);
          int v99 = -1;
          do
          {
            uint64_t v100 = *v98;
            v98 += 4;
            ++v99;
          }
          while (v100 != v97);
        }
        else
        {
          int v99 = -32768;
        }
        if (a1[21]) {
          uint64_t v101 = a1[21];
        }
        else {
          uint64_t v101 = (uint64_t)a1;
        }
        int v102 = *(_DWORD *)(v101 + 124);
        int v103 = 1 << v99;
        if ((v102 & (1 << v99)) == 0)
        {
          *(_DWORD *)(v101 + 124) = v102 | v103;
          if (v99 == 1) {
            sub_1B0D0E7A4(v101);
          }
        }
        *(_DWORD *)(v101 + 120) |= v103;
        sub_1B0D3B084((uint64_t)a1, v91, 0xFFFFFFFFLL, v24, v25, v26, v27, v28);
LABEL_101:
        uint64_t v91 = *(void *)(v91 + 40);
        if (v91) {
          continue;
        }
        break;
      }
LABEL_96:
      uint64_t v89 = (void *)*v89;
      if (v89) {
        continue;
      }
      break;
    }
    int v86 = *(_DWORD *)(v117 + 40);
    int v87 = v118;
LABEL_93:
    ++v87;
    v88 += 32;
    if (v87 < v86) {
      continue;
    }
    break;
  }
LABEL_122:
  uint64_t v104 = v116;
LABEL_125:

  sub_1B0D05C10(v104, v23);
}

void sub_1B0D2CAF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = a2;
  uint64_t v11 = *(void *)a1;
  if (!*(unsigned char *)(*(void *)a1 + 197))
  {
    int v12 = *(_DWORD *)(v11 + 44);
    uint64_t v13 = *(void *)(*(void *)(v11 + 32) + 24);
    *(unsigned char *)(v11 + 100) = *(unsigned char *)(v13 + 113);
    if ((*(unsigned char *)(v13 + 114) & 1) != 0
      || (int v14 = sub_1B0C879A0(v11, 0, (char **)(a1 + 8), 0, a5, a6, a7, a8)) == 0)
    {
      uint64_t v15 = *(unsigned int *)(v11 + 40);
      if ((int)v15 < 2)
      {
LABEL_9:
        if ((v12 & 1) == 0) {
          *(_DWORD *)(v11 + 44) &= ~1u;
        }
        if (*(unsigned char *)(v11 + 111)) {
          *(_DWORD *)(v11 + 44) |= 0x10u;
        }
        goto LABEL_2;
      }
      while (1)
      {
        uint64_t v16 = v15 - 1;
        if ((*(_WORD *)(*(void *)(*(void *)(v11 + 32) + 32 * (v15 - 1) + 24) + 114) & 1) == 0)
        {
          int v14 = sub_1B0C879A0(v11, (v15 - 1), (char **)(a1 + 8), 0, a5, a6, a7, a8);
          if (v14) {
            break;
          }
        }
        uint64_t v15 = v16;
        if ((unint64_t)(v16 + 1) <= 2) {
          goto LABEL_9;
        }
      }
    }
    *(_DWORD *)(a1 + 24) = v14;
    ++*(_DWORD *)(a1 + 48);
    return;
  }
LABEL_2:
  if (!v9)
  {
    if (*(int *)(v11 + 40) >= 1)
    {
      sub_1B0D5FC84((uint64_t *)a1, 0, a3, a4, a5, a6, a7, a8);
      if (*(int *)(v11 + 40) >= 3)
      {
        uint64_t v17 = 2;
        do
        {
          sub_1B0D5FC84((uint64_t *)a1, v17, a3, a4, a5, a6, a7, a8);
          uint64_t v17 = (v17 + 1);
        }
        while ((int)v17 < *(_DWORD *)(v11 + 40));
      }
    }
    goto LABEL_65;
  }
  if (!*(_DWORD *)(a3 + 8))
  {
    uint64_t v18 = sub_1B0D35B18(v11, v9);
    if ((v18 & 0x80000000) == 0)
    {
      sub_1B0D5FC84((uint64_t *)a1, v18, a3, a4, a5, a6, a7, a8);
      goto LABEL_65;
    }
    if (!*(_DWORD *)(a3 + 8))
    {
      int v20 = 0;
      goto LABEL_32;
    }
  }
  if (!*(unsigned char *)(*(void *)a1 + 197))
  {
    unsigned int v19 = sub_1B0D35B18(*(void *)a1, v9);
    if ((v19 & 0x80000000) != 0)
    {
      sub_1B0CEF2BC(a1, "unknown database %T", a3, a4, a5, a6, a7, a8, v9);
      goto LABEL_65;
    }
    if (*(_DWORD *)(a3 + 8)) {
      int v20 = *(unsigned __int8 **)(*(void *)(v11 + 32) + 32 * v19);
    }
    else {
      int v20 = 0;
    }
    uint64_t v9 = a3;
LABEL_32:
    size_t v21 = *(const void **)v9;
    if (*(void *)v9)
    {
      size_t v22 = *(unsigned int *)(v9 + 8);
      uint64_t v23 = (unsigned __int8 *)sub_1B0D05DC0(v11, v22 + 1);
      if (v23)
      {
        uint64_t v24 = v23;
        memcpy(v23, v21, v22);
        v24[v22] = 0;
        int v25 = *v24;
        if ((char)byte_1B0DE196D[*v24] < 0)
        {
          uint64_t v26 = 0;
          if (v25 == 91) {
            int v25 = 93;
          }
          for (int i = 1; ; ++i)
          {
            uint64_t v28 = i;
            int v29 = v24[i];
            if (v29 == v25)
            {
              ++i;
              LOBYTE(v29) = v25;
              if (v24[v28 + 1] != v25) {
                break;
              }
            }
            v24[v26++] = v29;
          }
          v24[v26] = 0;
        }
        uint64_t v30 = sub_1B0D22904(v11, v24, v20);
        if (v30)
        {
          int v35 = (uint64_t *)v30;
          uint64_t v36 = *(void *)(v30 + 24);
          uint64_t v37 = *(void *)(v36 + 96);
          if (v37)
          {
            int v38 = (uint64_t *)(*(void *)(*(void *)a1 + 32) + 24);
            LODWORD(v39) = -1;
            do
            {
              uint64_t v40 = *v38;
              v38 += 4;
              uint64_t v39 = (v39 + 1);
            }
            while (v40 != v37);
          }
          else
          {
            uint64_t v39 = 4294934528;
          }
          if (*(void *)(a1 + 168)) {
            uint64_t v47 = *(void *)(a1 + 168);
          }
          else {
            uint64_t v47 = a1;
          }
          int v48 = *(_DWORD *)(v47 + 124);
          int v49 = 1 << v39;
          if ((v48 & (1 << v39)) == 0)
          {
            *(_DWORD *)(v47 + 124) = v48 | v49;
            if (v39 == 1) {
              sub_1B0D0E7A4(v47);
            }
          }
          *(_DWORD *)(v47 + 120) |= v49;
          uint64_t v50 = *(unsigned int *)(a1 + 52);
          *(_DWORD *)(a1 + 52) = v50 + 3;
          sub_1B0D5FFA4(a1, v39, v50, *v35, (uint64_t)"idx", v32, v33, v34);
          sub_1B0D60260(a1, v36, (uint64_t)v35, v50, (*(_DWORD *)(a1 + 56) + 1), *(unsigned int *)(a1 + 52), v51, v52);
          uint64_t v60 = *(void *)(a1 + 16);
          if (v60) {
            goto LABEL_61;
          }
          if (!*(void *)(a1 + 168) && (*(unsigned char *)(*(void *)a1 + 96) & 8) == 0) {
            *(unsigned char *)(a1 + 35) = 1;
          }
          uint64_t v60 = sub_1B0CEF480((uint64_t *)a1, v53, v54, v55, v56, v57, v58, v59);
          if (v60)
          {
LABEL_61:
            int v61 = *(_DWORD *)(v60 + 144);
            if (*(_DWORD *)(v60 + 148) <= v61)
            {
              sub_1B0D25510(v60, 150, v39, 0, 0, v57, v58, v59);
            }
            else
            {
              *(_DWORD *)(v60 + 144) = v61 + 1;
              uint64_t v62 = *(void *)(v60 + 136) + 40 * v61;
              *(_DWORD *)uint64_t v62 = 150;
              *(_DWORD *)(v62 + 4) = v39;
              *(_OWORD *)(v62 + 8) = 0u;
              *(_OWORD *)(v62 + 24) = 0u;
            }
          }
        }
        else
        {
          uint64_t v41 = sub_1B0CB02B4(a1, 0, (char *)v24, v20, v31, v32, v33, v34);
          if (v41) {
            sub_1B0D5FE04((uint64_t *)a1, v41, 0, v42, v43, v44, v45, v46);
          }
        }
        sub_1B0D05C10((void *)v11, v24);
      }
    }
    goto LABEL_65;
  }
  sub_1B0CEF2BC(a1, "corrupt database", a3, a4, a5, a6, a7, a8, v66);
LABEL_65:
  if (!*(unsigned char *)(v11 + 112))
  {
    uint64_t v63 = *(void *)(a1 + 16);
    if (v63) {
      goto LABEL_71;
    }
    if (!*(void *)(a1 + 168) && (*(unsigned char *)(*(void *)a1 + 96) & 8) == 0) {
      *(unsigned char *)(a1 + 35) = 1;
    }
    uint64_t v63 = sub_1B0CEF480((uint64_t *)a1, a2, a3, a4, a5, a6, a7, a8);
    if (v63)
    {
LABEL_71:
      int v64 = *(_DWORD *)(v63 + 144);
      if (*(_DWORD *)(v63 + 148) <= v64)
      {
        sub_1B0D25510(v63, 166, 0, 0, 0, a6, a7, a8);
      }
      else
      {
        *(_DWORD *)(v63 + 144) = v64 + 1;
        uint64_t v65 = *(void *)(v63 + 136) + 40 * v64;
        *(unsigned char *)uint64_t v65 = -90;
        *(_OWORD *)(v65 + 1) = 0u;
        *(_OWORD *)(v65 + 17) = 0u;
        *(void *)(v65 + 32) = 0;
      }
    }
  }
}

void *sub_1B0D2CFB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void **)a1;
  if (*(unsigned char *)(*(void *)a1 + 103)) {
    goto LABEL_2;
  }
  uint64_t v13 = *(void *)(a2 + 8);
  if (v13)
  {
    uint64_t v14 = v9[4];
    uint64_t v15 = (uint64_t *)(v14 + 24);
    uint64_t v16 = 0xFFFFFFFF00000000;
    do
    {
      uint64_t v17 = *v15;
      v15 += 4;
      v16 += 0x100000000;
    }
    while (v17 != v13);
    uint64_t v18 = (unsigned char **)(v14 + (v16 >> 27));
  }
  else
  {
    uint64_t v18 = (unsigned char **)(a2 + 16);
  }
  uint64_t v19 = sub_1B0CB02B4(a1, 0, *(char **)(a2 + 24), *v18, a5, a6, a7, a8);
  if (!v19) {
    goto LABEL_2;
  }
  int v20 = (unsigned char **)v19;
  uint64_t v21 = *(void *)(v19 + 96);
  if (v21)
  {
    size_t v22 = (uint64_t *)(*(void *)(*(void *)a1 + 32) + 24);
    LODWORD(v23) = -1;
    do
    {
      uint64_t v24 = *v22;
      v22 += 4;
      uint64_t v23 = (v23 + 1);
    }
    while (v24 != v21);
    if (!a3)
    {
LABEL_2:
      return sub_1B0CA115C(v9, (void *)a2);
    }
  }
  else
  {
    uint64_t v23 = 4294934528;
    if (!a3) {
      goto LABEL_2;
    }
  }
  int v25 = *(const void **)a3;
  if (!*(void *)a3) {
    goto LABEL_2;
  }
  uint64_t v26 = *(unsigned __int8 **)(v9[4] + 32 * (int)v23);
  size_t v27 = *(unsigned int *)(a3 + 8);
  uint64_t v28 = (char *)sub_1B0D05DC0((uint64_t)v9, v27 + 1);
  if (!v28) {
    goto LABEL_2;
  }
  int v29 = v28;
  memcpy(v28, v25, v27);
  v29[v27] = 0;
  if ((char)byte_1B0DE196D[*v29] < 0)
  {
    uint64_t v30 = 0;
    if (*v29 == 91) {
      int v31 = 93;
    }
    else {
      int v31 = *v29;
    }
    for (int i = 1; ; ++i)
    {
      uint64_t v33 = i;
      int v34 = v29[i];
      if (v34 == v31)
      {
        ++i;
        LOBYTE(v34) = v31;
        if (v29[v33 + 1] != v31) {
          break;
        }
      }
      v29[v30++] = v34;
    }
    v29[v30] = 0;
  }
  if (sub_1B0CF60C8((uint64_t)v9, v29, v26)
    || sub_1B0D22904((uint64_t)v9, (unsigned __int8 *)v29, v26)
    || sub_1B0D35CAC((uint64_t)v9, (uint64_t)v20, v29))
  {
    sub_1B0CEF2BC(a1, "there is already another table or index with this name: %s", v35, v36, v37, v38, v39, v40, (char)v29);
  }
  else
  {
    if (sub_1B0D61C98(a1, v20, v35, v36, v37, v38, v39, v40)
      || sub_1B0D3555C((unsigned char *)a1, v29, "table", v29, v41, v42, v43, v44))
    {
      goto LABEL_32;
    }
    uint64_t v50 = *v20;
    if (*((unsigned char *)v20 + 63) == 2)
    {
      sub_1B0CEF2BC(a1, "view %s may not be altered", v45, (uint64_t)v50, v46, v47, v48, v49, (char)*v20);
    }
    else if (!sub_1B0D354D0(a1, 26, (uint64_t)v26, (uint64_t)v50, 0))
    {
      if (*((unsigned char *)v20 + 63) != 1 && *((__int16 *)v20 + 27) > 0) {
        goto LABEL_49;
      }
      if (sub_1B0D393F0(a1, (uint64_t)v20, v52, v53, v54, v55, v56, v57)) {
        goto LABEL_32;
      }
      if (*((unsigned char *)v20 + 63) == 1)
      {
        uint64_t v58 = v20 + 10;
        do
        {
          uint64_t v59 = (void *)*v58;
          uint64_t v60 = (void *)*v58;
          int v61 = (void *)*v60;
          uint64_t v58 = v60 + 5;
        }
        while (v61 != v9);
        if (!*(void *)(*(void *)v59[2] + 152)) {
          uint64_t v59 = 0;
        }
        uint64_t v88 = (uint64_t)v59;
      }
      else
      {
LABEL_49:
        uint64_t v88 = 0;
      }
      uint64_t v62 = sub_1B0CCB8D4((uint64_t *)a1, v51, v52, v53, v54, v55, v56, v57);
      if (v62)
      {
        uint64_t v63 = (uint64_t *)v62;
        uint64_t v64 = *(void *)(a1 + 168);
        if (!v64) {
          uint64_t v64 = a1;
        }
        *(unsigned char *)(v64 + 33) = 1;
        sub_1B0D26FE8(*v20, -1);
        sub_1B0CD9598((uint64_t *)a1, "UPDATE \"%w\".sqlite_master SET sql = sqlite_rename_table(%Q, type, name, sql, %Q, %Q, %d) WHERE (type!='index' OR tbl_name=%Q COLLATE nocase)AND   name NOT LIKE 'sqliteX_%%' ESCAPE 'X'", v65, v66, v67, v68, v69, v70, (char)v26);
        sub_1B0CD9598((uint64_t *)a1, "UPDATE %Q.sqlite_master SET tbl_name = %Q, name = CASE WHEN type='table' THEN %Q WHEN name LIKE 'sqliteX_autoindex%%' ESCAPE 'X'      AND type='index' THEN 'sqlite_autoindex_' || %Q || substr(name,%d+18) ELSE name END WHERE tbl_name=%Q COLLATE nocase AND (type='table' OR type='index' OR type='trigger');",
          v71,
          v72,
          v73,
          v74,
          v75,
          v76,
          (char)v26);
        if (sub_1B0CF60C8((uint64_t)v9, "sqlite_sequence", v26)) {
          sub_1B0CD9598((uint64_t *)a1, "UPDATE \"%w\".sqlite_sequence set name = %Q WHERE name = %Q", v77, v78, v79, v80, v81, v82, (char)v26);
        }
        if (v23 != 1) {
          sub_1B0CD9598((uint64_t *)a1, "UPDATE sqlite_temp_schema SET sql = sqlite_rename_table(%Q, type, name, sql, %Q, %Q, 1), tbl_name = CASE WHEN tbl_name=%Q COLLATE nocase AND   sqlite_rename_test(%Q, sql, type, name, 1, 'after rename', 0) THEN %Q ELSE tbl_name END WHERE type IN ('view', 'trigger')", v77, v78, v79, v80, v81, v82, (char)v26);
        }
        if (v88)
        {
          uint64_t v83 = (*(_DWORD *)(a1 + 56) + 1);
          *(_DWORD *)(a1 + 56) = v83;
          sub_1B0CCB908(v63, 117, 0, v83, 0, (uint64_t)v29, 0, v82);
          sub_1B0CCB908(v63, 176, v83, 0, 0, v88, 4294967285, v84);
        }
        sub_1B0D61E94((uint64_t *)a1, v23, 1, v78, v79, v80, v81, v82);
        sub_1B0D61F84(a1, (char)v26, v23 == 1, (uint64_t)"after rename", 0, v85, v86, v87);
      }
    }
  }
LABEL_32:
  sub_1B0CA115C(v9, (void *)a2);

  return sub_1B0D05C10(v9, v29);
}

void sub_1B0D2D40C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (*(_DWORD *)(a1 + 48)) {
    return;
  }
  uint64_t v11 = *(void *)a1;
  uint64_t v12 = *(void *)(a1 + 344);
  uint64_t v13 = *(void *)(v12 + 96);
  uint64_t v14 = *(void *)(*(void *)a1 + 32);
  if (v13)
  {
    uint64_t v15 = (uint64_t *)(v14 + 24);
    LODWORD(v16) = -1;
    do
    {
      uint64_t v17 = *v15;
      v15 += 4;
      uint64_t v16 = (v16 + 1);
    }
    while (v17 != v13);
  }
  else
  {
    uint64_t v16 = 4294934528;
  }
  uint64_t v18 = *(unsigned char **)(v14 + 32 * (int)v16);
  uint64_t v19 = (char *)(*(void *)v12 + 16);
  uint64_t v20 = *(__int16 *)(v12 + 54) - 1;
  uint64_t v85 = *(void *)(v12 + 8);
  int v21 = *(unsigned __int16 *)(v85 + 16 * v20 + 12);
  if (*(_WORD *)(v85 + 16 * v20 + 12) && !*(unsigned char *)(v12 + 63) && (uint64_t v38 = *(_DWORD **)(v12 + 80)) != 0 && *v38 >= v21) {
    uint64_t v22 = *(void *)&v38[6 * (v21 - 1) + 2];
  }
  else {
    uint64_t v22 = 0;
  }
  uint64_t v23 = (void *)sub_1B0CF60C8(v11, v19, v18);
  uint64_t v31 = *(void *)a1;
  uint64_t v32 = *(uint64_t (**)(void, uint64_t, unsigned char *, void, void, void))(*(void *)a1 + 528);
  if (v32 && !*(unsigned char *)(v31 + 197) && !*(unsigned char *)(a1 + 302))
  {
    int v40 = v32(*(void *)(v31 + 536), 26, v18, *v23, 0, *(void *)(a1 + 368));
    if (v40 == 1)
    {
      int v41 = 23;
      uint64_t v42 = "not authorized";
    }
    else
    {
      if ((v40 & 0xFFFFFFFD) == 0)
      {
        if (v40) {
          return;
        }
        goto LABEL_14;
      }
      int v41 = 1;
      uint64_t v42 = "authorizer malfunction";
    }
    sub_1B0CEF2BC(a1, v42, v25, v26, v27, v28, v29, v30, v82);
    *(_DWORD *)(a1 + 24) = v41;
    return;
  }
LABEL_14:
  uint64_t v33 = v85 + 16 * v20;
  __int16 v36 = *(_WORD *)(v33 + 14);
  uint64_t v35 = (_WORD *)(v33 + 14);
  char v34 = v36;
  if (v36)
  {
    uint64_t v37 = "Cannot add a PRIMARY KEY column";
    goto LABEL_18;
  }
  if (*(void *)(v12 + 16))
  {
    uint64_t v37 = "Cannot add a UNIQUE column";
LABEL_18:
    sub_1B0CEF2BC(a1, v37, v25, v26, v27, v28, v29, v30, a9);
    return;
  }
  if ((v34 & 0x60) != 0)
  {
    if ((v34 & 0x40) == 0) {
      goto LABEL_50;
    }
    uint64_t v39 = "cannot add a STORED column";
    goto LABEL_49;
  }
  if (v22 && **(unsigned char **)(v22 + 16) == 121) {
    uint64_t v22 = 0;
  }
  if ((*(unsigned char *)(v11 + 49) & 0x40) != 0 && *(void *)(v12 + 72) && v22)
  {
    sub_1B0CD9598((uint64_t *)a1, "SELECT raise(ABORT,%Q) FROM \"%w\".\"%w\"", v25, v26, v27, v28, v29, v30, (char)"Cannot add a REFERENCES column with non-NULL default value");
    goto LABEL_41;
  }
  if ((*(unsigned char *)(v85 + 16 * v20 + 8) & 0xF) == 0 || v22 != 0)
  {
    if (!v22) {
      goto LABEL_50;
    }
LABEL_41:
    uint64_t v86 = 0;
    if (sub_1B0D27644(v11, (unsigned __int8 *)v22, 1, 65, (uint64_t *)&v86)) {
      return;
    }
    uint64_t v50 = v86;
    if (!v86) {
      sub_1B0CD9598((uint64_t *)a1, "SELECT raise(ABORT,%Q) FROM \"%w\".\"%w\"", v44, v45, v46, v47, v48, v49, (char)"Cannot add a column with non-constant default");
    }
    sub_1B0CEA450(v50);
    goto LABEL_50;
  }
  uint64_t v39 = "Cannot add a NOT NULL column with default value NULL";
LABEL_49:
  sub_1B0CD9598((uint64_t *)a1, "SELECT raise(ABORT,%Q) FROM \"%w\".\"%w\"", v25, v26, v27, v28, v29, v30, (char)v39);
LABEL_50:
  char v83 = (char)v19;
  char v84 = (char)v18;
  uint64_t v51 = *(const void **)a2;
  if (*(void *)a2)
  {
    size_t v52 = *(unsigned int *)(a2 + 8);
    uint64_t v53 = (void *)sub_1B0D05DC0(v11, v52 + 1);
    if (v53)
    {
      uint64_t v54 = v53;
      memcpy(v53, v51, v52);
      *((unsigned char *)v54 + v52) = 0;
      if (*(_DWORD *)(a2 + 8) != 1)
      {
        int v61 = (unsigned __int8 *)v54 + (*(_DWORD *)(a2 + 8) - 1);
        do
        {
          uint64_t v62 = *v61;
          if (v62 != 59 && (byte_1B0DE196D[v62] & 1) == 0) {
            break;
          }
          *v61-- = 0;
        }
        while (v61 > (unsigned __int8 *)v54);
      }
      sub_1B0CD9598((uint64_t *)a1, "UPDATE \"%w\".sqlite_master SET sql = printf('%%.%ds, ',sql) || %Q || substr(sql,1+length(printf('%%.%ds',sql))) WHERE type = 'table' AND name = %Q", v55, v56, v57, v58, v59, v60, v84);
      sub_1B0D05C10((void *)v11, v54);
    }
  }
  uint64_t v63 = *(void *)(a1 + 16);
  if (v63) {
    goto LABEL_93;
  }
  if (!*(void *)(a1 + 168) && (*(unsigned char *)(*(void *)a1 + 96) & 8) == 0) {
    *(unsigned char *)(a1 + 35) = 1;
  }
  uint64_t v63 = sub_1B0CEF480((uint64_t *)a1, v24, v25, v26, v27, v28, v29, v30);
  if (v63)
  {
LABEL_93:
    if (*(unsigned char *)(a1 + 31))
    {
      unsigned __int8 v64 = *(unsigned char *)(a1 + 31) - 1;
      *(unsigned char *)(a1 + 31) = v64;
      uint64_t v65 = *(unsigned int *)(a1 + 4 * v64 + 224);
    }
    else
    {
      uint64_t v65 = (*(_DWORD *)(a1 + 56) + 1);
      *(_DWORD *)(a1 + 56) = v65;
    }
    int v66 = *(_DWORD *)(v63 + 144);
    if (*(_DWORD *)(v63 + 148) <= v66)
    {
      sub_1B0D25510(v63, 99, v16, v65, 2, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)(v63 + 144) = v66 + 1;
      uint64_t v67 = *(void *)(v63 + 136) + 40 * v66;
      *(_DWORD *)uint64_t v67 = 99;
      *(_DWORD *)(v67 + 4) = v16;
      *(_DWORD *)(v67 + 8) = v65;
      *(_DWORD *)(v67 + 12) = 2;
      *(void *)(v67 + 24) = 0;
      *(void *)(v67 + 32) = 0;
      *(void *)(v67 + 16) = 0;
    }
    *(_DWORD *)(v63 + 272) |= 1 << v16;
    if (v16 != 1 && *(unsigned char *)(*(void *)(*(void *)(*(void *)v63 + 32) + 32 * (int)v16 + 8) + 17)) {
      *(_DWORD *)(v63 + 276) |= 1 << v16;
    }
    int v68 = *(_DWORD *)(v63 + 144);
    if (*(_DWORD *)(v63 + 148) <= v68)
    {
      sub_1B0D25510(v63, 86, v65, 4294967294, 0, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)(v63 + 144) = v68 + 1;
      uint64_t v69 = *(void *)(v63 + 136) + 40 * v68;
      *(_DWORD *)uint64_t v69 = 86;
      *(_DWORD *)(v69 + 4) = v65;
      *(_DWORD *)(v69 + 8) = -2;
      *(void *)(v69 + 12) = 0;
      *(void *)(v69 + 28) = 0;
      *(void *)(v69 + 20) = 0;
      *(_DWORD *)(v69 + 36) = 0;
    }
    int v70 = *(_DWORD *)(v63 + 144);
    uint64_t v71 = (v70 + 2);
    if (*(_DWORD *)(v63 + 148) <= v70)
    {
      sub_1B0D25510(v63, 59, v65, v71, 0, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)(v63 + 144) = v70 + 1;
      uint64_t v72 = *(void *)(v63 + 136) + 40 * v70;
      *(_DWORD *)uint64_t v72 = 59;
      *(_DWORD *)(v72 + 4) = v65;
      *(_DWORD *)(v72 + 8) = v71;
      *(void *)(v72 + 12) = 0;
      *(void *)(v72 + 28) = 0;
      *(void *)(v72 + 20) = 0;
      *(_DWORD *)(v72 + 36) = 0;
    }
    int v73 = *(_DWORD *)(v63 + 144);
    if (*(_DWORD *)(v63 + 148) <= v73)
    {
      sub_1B0D25510(v63, 100, v16, 2, 3, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)(v63 + 144) = v73 + 1;
      uint64_t v74 = *(void *)(v63 + 136) + 40 * v73;
      *(_DWORD *)uint64_t v74 = 100;
      *(_DWORD *)(v74 + 4) = v16;
      *(void *)(v74 + 8) = 0x300000002;
      *(void *)(v74 + 24) = 0;
      *(void *)(v74 + 32) = 0;
      *(void *)(v74 + 16) = 0;
    }
    if (v65)
    {
      uint64_t v75 = *(unsigned __int8 *)(a1 + 31);
      if (v75 <= 7)
      {
        *(unsigned char *)(a1 + 31) = v75 + 1;
        *(_DWORD *)(a1 + 4 * v75 + 224) = v65;
      }
    }
    sub_1B0D61E94((uint64_t *)a1, v16, 3, v71, v27, v28, v29, v30);
    if (*(void *)(v12 + 32) || (*(unsigned char *)(v85 + 16 * v20 + 8) & 0xF) != 0 && (*v35 & 0x60) != 0) {
      sub_1B0CD9598((uint64_t *)a1, "SELECT CASE WHEN quick_check GLOB 'CHECK*' THEN raise(ABORT,'CHECK constraint failed') ELSE raise(ABORT,'NOT NULL constraint failed') END  FROM pragma_quick_check(%Q,%Q) WHERE quick_check GLOB 'CHECK*' OR quick_check GLOB 'NULL*'", v76, v77, v78, v79, v80, v81, v83);
    }
  }
}

void *sub_1B0D2DA04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void **)a1;
  if (*(unsigned char *)(*(void *)a1 + 103)) {
    goto LABEL_2;
  }
  uint64_t v13 = *(void *)(a2 + 8);
  if (v13)
  {
    uint64_t v14 = v9[4];
    uint64_t v15 = (uint64_t *)(v14 + 24);
    uint64_t v16 = 0xFFFFFFFF00000000;
    do
    {
      uint64_t v17 = *v15;
      v15 += 4;
      v16 += 0x100000000;
    }
    while (v17 != v13);
    uint64_t v18 = (unsigned char **)(v14 + (v16 >> 27));
  }
  else
  {
    uint64_t v18 = (unsigned char **)(a2 + 16);
  }
  uint64_t v19 = (unsigned __int8 **)sub_1B0CB02B4(a1, 0, *(char **)(a2 + 24), *v18, a5, a6, a7, a8);
  if (!v19) {
    goto LABEL_2;
  }
  uint64_t v26 = (uint64_t)v19;
  if (sub_1B0D61C98(a1, v19, v20, v21, v22, v23, v24, v25)) {
    goto LABEL_2;
  }
  int v33 = *(unsigned __int8 *)(v26 + 63);
  char v34 = "view";
  if (v33 != 2) {
    char v34 = 0;
  }
  if (v33 == 1) {
    uint64_t v35 = "virtual table";
  }
  else {
    uint64_t v35 = v34;
  }
  if (v35)
  {
    sub_1B0CEF2BC(a1, "cannot %s %s \"%s\"", v27, v28, v29, v30, v31, v32, (char)"drop column from");
    goto LABEL_2;
  }
  if (!a3) {
    goto LABEL_2;
  }
  __int16 v36 = *(const void **)a3;
  if (!*(void *)a3) {
    goto LABEL_2;
  }
  size_t v37 = *(unsigned int *)(a3 + 8);
  uint64_t v38 = (void *)sub_1B0D05DC0((uint64_t)v9, v37 + 1);
  if (!v38) {
    goto LABEL_2;
  }
  uint64_t v39 = v38;
  memcpy(v38, v36, v37);
  *((unsigned char *)v39 + v37) = 0;
  int v46 = *(unsigned __int8 *)v39;
  if ((char)byte_1B0DE196D[*(unsigned __int8 *)v39] < 0)
  {
    uint64_t v47 = 0;
    if (v46 == 91) {
      int v48 = 93;
    }
    else {
      int v48 = *(unsigned __int8 *)v39;
    }
    for (int i = 1; ; ++i)
    {
      uint64_t v50 = i;
      int v51 = *((unsigned __int8 *)v39 + i);
      if (v51 == v48)
      {
        ++i;
        LOBYTE(v51) = v48;
        if (*((unsigned __int8 *)v39 + v50 + 1) != v48) {
          break;
        }
      }
      *((unsigned char *)v39 + v47++) = v51;
    }
    *((unsigned char *)v39 + v47) = 0;
    int v46 = *(unsigned __int8 *)v39;
  }
  unsigned __int8 v52 = 0;
  if (v46)
  {
    uint64_t v53 = (unsigned __int8 *)v39 + 1;
    do
    {
      v52 += byte_1B0DE1758[v46];
      int v54 = *v53++;
      int v46 = v54;
    }
    while (v54);
  }
  int v55 = *(__int16 *)(v26 + 54);
  if (v55 < 1)
  {
LABEL_48:
    sub_1B0CEF2BC(a1, "no such column: \"%T\"", v40, v41, v42, v43, v44, v45, a3);
    goto LABEL_49;
  }
  unsigned int v56 = 0;
  uint64_t v57 = *(void *)(v26 + 8);
  while (*(unsigned __int8 *)(v57 + 11) != v52)
  {
LABEL_36:
    v57 += 16;
    if (++v56 == v55) {
      goto LABEL_48;
    }
  }
  for (uint64_t j = 0; ; ++j)
  {
    uint64_t v59 = *(unsigned __int8 *)(*(void *)v57 + j);
    uint64_t v60 = *((unsigned __int8 *)v39 + j);
    if (v59 == v60) {
      break;
    }
    if (byte_1B0DE1758[v59] != byte_1B0DE1758[v60]) {
      goto LABEL_36;
    }
LABEL_40:
    ;
  }
  if (*(unsigned char *)(*(void *)v57 + j)) {
    goto LABEL_40;
  }
  __int16 v61 = *(_WORD *)(*(void *)(v26 + 8) + 16 * v56 + 14);
  if ((v61 & 9) != 0)
  {
    if (v61) {
      uint64_t v62 = "PRIMARY KEY";
    }
    else {
      uint64_t v62 = "UNIQUE";
    }
    sub_1B0CEF2BC(a1, "cannot drop %s column: \"%s\"", v40, v41, v42, v43, v44, v45, (char)v62);
    goto LABEL_49;
  }
  if (v55 <= 1)
  {
    sub_1B0CEF2BC(a1, "cannot drop column \"%s\": no other columns exist", v40, v41, v42, v43, v44, v45, (char)v39);
    goto LABEL_49;
  }
  uint64_t v63 = *(void *)(v26 + 96);
  uint64_t v64 = v9[4];
  if (v63)
  {
    uint64_t v65 = (uint64_t *)(v64 + 24);
    LODWORD(v66) = -1;
    do
    {
      uint64_t v67 = *v65;
      v65 += 4;
      uint64_t v66 = (v66 + 1);
    }
    while (v67 != v63);
  }
  else
  {
    uint64_t v66 = 4294934528;
  }
  uint64_t v68 = *(void *)(v64 + 32 * (int)v66);
  if (!sub_1B0D354D0(a1, 26, v68, *(void *)v26, (uint64_t)v39))
  {
    sub_1B0D61F84(a1, v68, v66 == 1, (uint64_t)&byte_1B0DE9952, 0, v69, v70, v71);
    sub_1B0D62008((uint64_t *)a1, v68, v66 == 1, v72, v73, v74, v75, v76, v142);
    sub_1B0CD9598((uint64_t *)a1, "UPDATE \"%w\".sqlite_master SET sql = sqlite_drop_column(%d, sql, %d) WHERE (type=='table' AND tbl_name=%Q COLLATE nocase)", v77, v78, v79, v80, v81, v82, v68);
    sub_1B0D61E94((uint64_t *)a1, v66, 2, v83, v84, v85, v86, v87);
    sub_1B0D61F84(a1, v68, v66 == 1, (uint64_t)"after drop column", 1, v88, v89, v90);
    if (!*(_DWORD *)(a1 + 48) && (*(_WORD *)(*(void *)(v26 + 8) + 16 * v56 + 14) & 0x20) == 0)
    {
      uint64_t v98 = sub_1B0CCB8D4((uint64_t *)a1, v91, v92, v93, v94, v95, v96, v97);
      uint64_t v99 = *(unsigned int *)(a1 + 52);
      *(_DWORD *)(a1 + 52) = v99 + 1;
      sub_1B0C9CD14((void *)a1, v99, v66, v26, 113, v100, v101, v102);
      uint64_t v148 = v98;
      unsigned int v147 = v99;
      int v144 = sub_1B0D2F978(v98, 36, v99, v103, v104, v105, v106, v107);
      int v145 = *(_DWORD *)(a1 + 56);
      unsigned int v143 = v145 + 1;
      *(_DWORD *)(a1 + 56) = v145 + 1;
      if ((*(unsigned char *)(v26 + 48) & 0x80) != 0)
      {
        uint64_t v117 = v26 + 16;
        do
        {
          uint64_t v113 = *(void *)v117;
          int v118 = *(_WORD *)(*(void *)v117 + 99) & 3;
          uint64_t v117 = *(void *)v117 + 40;
        }
        while (v118 != 2);
        int v116 = v143 + *(unsigned __int16 *)(v113 + 96);
        *(_DWORD *)(a1 + 56) = v116;
        if (*(_WORD *)(v113 + 94))
        {
          uint64_t v119 = 0;
          do
          {
            sub_1B0C8A924(v148, 94, v99, v119, (v145 + 2 + v119), v109, v110, v111);
            uint64_t v119 = (v119 + 1);
            uint64_t v114 = *(unsigned __int16 *)(v113 + 94);
          }
          while (v119 < v114);
          int v116 = *(_DWORD *)(a1 + 56);
        }
        else
        {
          uint64_t v114 = 0;
        }
        __int16 v115 = *(_WORD *)(v26 + 54);
      }
      else
      {
        sub_1B0D254B8(v98, 135, v99, v143, v108, v109, v110, v111);
        uint64_t v113 = 0;
        uint64_t v114 = 0;
        __int16 v115 = *(_WORD *)(v26 + 54);
        int v116 = *(_DWORD *)(a1 + 56) + v115;
      }
      unsigned int v146 = v116 + 1;
      *(_DWORD *)(a1 + 56) = v116 + 1;
      if (v115 >= 1)
      {
        uint64_t v120 = 0;
        int v149 = v145 + 2;
        uint64_t v121 = v56;
        uint64_t v122 = v114;
        while (1)
        {
          if (v120 != v121 && (*(_WORD *)(*(void *)(v26 + 8) + 16 * v120 + 14) & 0x20) == 0)
          {
            if (!v113)
            {
              LODWORD(v124) = v122;
              uint64_t v128 = (v149 + v122);
LABEL_91:
              if (v120 == *(__int16 *)(v26 + 52)) {
                sub_1B0D254B8(v148, 75, 0, v128, v128, v109, v110, v111);
              }
              else {
                *(double *)v112.i64 = sub_1B0D32578(v148, v26, v147, v120, v128, v109, v110, v111, v112);
              }
              uint64_t v122 = (v124 + 1);
              __int16 v115 = *(_WORD *)(v26 + 54);
              goto LABEL_74;
            }
            uint64_t v123 = *(unsigned __int16 *)(v113 + 96);
            if (*(_WORD *)(v113 + 96))
            {
              uint64_t v124 = v122;
              uint64_t v125 = 0;
              uint64_t v126 = *(void *)(v113 + 8);
              while (*(unsigned __int16 *)(v126 + 2 * v125) != (unsigned __int16)v120)
              {
                if (v123 == ++v125)
                {
                  LOWORD(v125) = -1;
                  break;
                }
              }
              uint64_t v127 = 0;
              while (*(unsigned __int16 *)(v126 + 2 * v127) != (unsigned __int16)v56)
              {
                if (v123 == ++v127)
                {
                  LOWORD(v127) = -1;
                  break;
                }
              }
              if ((__int16)v125 >= (int)*(unsigned __int16 *)(v113 + 94))
              {
                uint64_t v128 = v149 + (__int16)v125 - ((__int16)v125 > (__int16)v127);
                uint64_t v121 = v56;
                goto LABEL_91;
              }
              uint64_t v121 = v56;
              uint64_t v122 = v124;
            }
          }
LABEL_74:
          if (++v120 >= v115) {
            goto LABEL_94;
          }
        }
      }
      uint64_t v122 = v114;
LABEL_94:
      if (v122)
      {
        uint64_t v129 = v122;
        uint64_t v130 = (v145 + 2);
      }
      else
      {
        ++*(_DWORD *)(a1 + 56);
        uint64_t v130 = (v145 + 2);
        sub_1B0D254B8(v148, 75, 0, v130, v108, v109, v110, v111);
        uint64_t v129 = 1;
      }
      sub_1B0C8A924(v148, 97, v130, v129, v146, v109, v110, v111);
      if (v113) {
        sub_1B0CEF5FC(v148, 138, v147, v146, v130, *(unsigned __int16 *)(v113 + 94), v132, v133);
      }
      else {
        sub_1B0C8A924(v148, 128, v147, v146, v143, v131, v132, v133);
      }
      int v138 = *(_DWORD *)(v148 + 144);
      BOOL v139 = __OFSUB__(v138, 1);
      int v140 = v138 - 1;
      if (v140 < 0 == v139) {
        *(_WORD *)(*(void *)(v148 + 136) + 40 * v140 + 2) = 2;
      }
      sub_1B0D254B8(v148, 39, v147, (v144 + 1), v134, v135, v136, v137);
      if (*(unsigned char *)(*(void *)v148 + 103)) {
        int v141 = &byte_1E9B52240;
      }
      else {
        int v141 = (char *)(*(void *)(v148 + 136) + 40 * v144);
      }
      *((_DWORD *)v141 + 2) = *(_DWORD *)(v148 + 144);
    }
  }
LABEL_49:
  sub_1B0D05C10(v9, v39);
LABEL_2:

  return sub_1B0CA115C(v9, (void *)a2);
}

void *sub_1B0D2E114(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = (void *)*a1;
  if (*(unsigned char *)(*a1 + 103)) {
    goto LABEL_14;
  }
  uint64_t v11 = *(void *)(a2 + 8);
  if (v11)
  {
    uint64_t v12 = v9[4];
    uint64_t v13 = (uint64_t *)(v12 + 24);
    uint64_t v14 = 0xFFFFFFFF00000000;
    do
    {
      uint64_t v15 = *v13;
      v13 += 4;
      v14 += 0x100000000;
    }
    while (v15 != v11);
    uint64_t v16 = (unsigned char **)(v12 + (v14 >> 27));
  }
  else
  {
    uint64_t v16 = (unsigned char **)(a2 + 16);
  }
  uint64_t v17 = sub_1B0CB02B4((uint64_t)a1, 0, *(char **)(a2 + 24), *v16, a5, a6, a7, a8);
  if (!v17) {
    goto LABEL_14;
  }
  uint64_t v24 = v17;
  int v25 = *(unsigned __int8 *)(v17 + 63);
  if (v25 == 2)
  {
    uint64_t v26 = "Cannot add a column to a view";
    goto LABEL_12;
  }
  if (v25 == 1)
  {
    uint64_t v26 = "virtual tables may not be altered";
LABEL_12:
    sub_1B0CEF2BC((uint64_t)a1, v26, v18, v19, v20, v21, v22, v23, v57);
    goto LABEL_14;
  }
  if (!sub_1B0D61C98((uint64_t)a1, (unsigned __int8 **)v17, v18, v19, v20, v21, v22, v23))
  {
    uint64_t v28 = (void *)a1[21];
    if (!v28) {
      uint64_t v28 = a1;
    }
    *((unsigned char *)v28 + 33) = 1;
    uint64_t v29 = *(void *)(v24 + 96);
    if (v29)
    {
      uint64_t v30 = (uint64_t *)(v9[4] + 24);
      int v31 = -1;
      do
      {
        uint64_t v32 = *v30;
        v30 += 4;
        ++v31;
      }
      while (v32 != v29);
      if (!v9)
      {
        uint64_t v33 = sub_1B0C7FC94(104);
        char v59 = 1;
        goto LABEL_26;
      }
    }
    else
    {
      int v31 = -32768;
    }
    uint64_t v33 = sub_1B0D05DC0((uint64_t)v9, 0x68uLL);
    char v59 = 0;
LABEL_26:
    if (!v33) {
      goto LABEL_14;
    }
    *(void *)(v33 + 96) = 0;
    *(_OWORD *)(v33 + 64) = 0u;
    *(_OWORD *)(v33 + 80) = 0u;
    *(_OWORD *)(v33 + 32) = 0u;
    *(_OWORD *)(v33 + 48) = 0u;
    *(_OWORD *)uint64_t v33 = 0u;
    *(_OWORD *)(v33 + 16) = 0u;
    a1[43] = v33;
    *(_DWORD *)(v33 + 44) = 1;
    int v34 = *(__int16 *)(v24 + 54);
    *(_WORD *)(v33 + 54) = v34;
    int v36 = v34 - 1;
    BOOL v35 = v34 < 1;
    int v37 = v34 + 6;
    if (!v35) {
      int v37 = v36;
    }
    *(void *)(v33 + 8) = sub_1B0C79680((uint64_t)v9, 16 * (int)((v37 & 0xFFFFFFF8) + 8));
    uint64_t v44 = sub_1B0C904AC((uint64_t)v9, "sqlite_altertab_%s", v38, v39, v40, v41, v42, v43, *(void *)v24);
    *(void *)uint64_t v33 = v44;
    uint64_t v45 = *(void **)(v33 + 8);
    if (!v45 || !v44) {
      goto LABEL_14;
    }
    uint64_t v58 = v24;
    memcpy(v45, *(const void **)(v24 + 8), 16 * *(__int16 *)(v33 + 54));
    if (*(__int16 *)(v33 + 54) < 1)
    {
LABEL_46:
      *(void *)(v33 + 80) = sub_1B0CAE478((uint64_t)v9, *(void **)(v58 + 80), 0);
      *(void *)(v33 + 96) = *(void *)(v9[4] + 32 * v31 + 24);
      *(_DWORD *)(v33 + 64) = *(_DWORD *)(v58 + 64);
      goto LABEL_14;
    }
    uint64_t v46 = 0;
    uint64_t v60 = v33;
    while (1)
    {
      uint64_t v48 = *(void *)(v33 + 8);
      uint64_t v49 = (const char **)(v48 + 16 * v46);
      uint64_t v50 = *v49;
      if (!*v49) {
        break;
      }
      size_t v51 = strlen(*v49);
      unint64_t v52 = v51 + 1;
      if (v59)
      {
        uint64_t v53 = (unsigned __int8 *)sub_1B0C7FC94(v51 + 1);
        if (!v53) {
          break;
        }
      }
      else
      {
        uint64_t v53 = (unsigned __int8 *)sub_1B0D05DC0((uint64_t)v9, v52);
        if (!v53) {
          break;
        }
      }
      memcpy(v53, v50, v52);
      *uint64_t v49 = (const char *)v53;
      int v54 = *v53;
      if (*v53)
      {
        char v47 = 0;
        int v55 = v53 + 1;
        uint64_t v33 = v60;
        do
        {
          v47 += byte_1B0DE1758[v54];
          int v56 = *v55++;
          int v54 = v56;
        }
        while (v56);
        goto LABEL_35;
      }
      char v47 = 0;
LABEL_34:
      uint64_t v33 = v60;
LABEL_35:
      *(unsigned char *)(v48 + 16 * v46++ + 11) = v47;
      if (v46 >= *(__int16 *)(v33 + 54)) {
        goto LABEL_46;
      }
    }
    char v47 = 0;
    *uint64_t v49 = 0;
    goto LABEL_34;
  }
LABEL_14:

  return sub_1B0CA115C(v9, (void *)a2);
}

void *sub_1B0D2E420(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12 = (void *)*a1;
  uint64_t v13 = *(void *)(a2 + 8);
  if (v13)
  {
    uint64_t v14 = v12[4];
    uint64_t v15 = (uint64_t *)(v14 + 24);
    uint64_t v16 = 0xFFFFFFFF00000000;
    do
    {
      uint64_t v17 = *v15;
      v15 += 4;
      v16 += 0x100000000;
    }
    while (v17 != v13);
    uint64_t v18 = (unsigned char **)(v14 + (v16 >> 27));
  }
  else
  {
    uint64_t v18 = (unsigned char **)(a2 + 16);
  }
  uint64_t v19 = (unsigned __int8 **)sub_1B0CB02B4((uint64_t)a1, 0, *(char **)(a2 + 24), *v18, a5, a6, a7, a8);
  if (!v19) {
    goto LABEL_15;
  }
  uint64_t v26 = v19;
  if (sub_1B0D61C98((uint64_t)a1, v19, v20, v21, v22, v23, v24, v25)) {
    goto LABEL_15;
  }
  int v33 = *((unsigned __int8 *)v26 + 63);
  int v34 = "view";
  if (v33 != 2) {
    int v34 = 0;
  }
  if (v33 == 1) {
    BOOL v35 = "virtual table";
  }
  else {
    BOOL v35 = v34;
  }
  if (v35)
  {
    sub_1B0CEF2BC((uint64_t)a1, "cannot %s %s \"%s\"", v27, v28, v29, v30, v31, v32, (char)"rename columns of");
    goto LABEL_15;
  }
  int v37 = v26[12];
  uint64_t v38 = v12[4];
  if (v37)
  {
    uint64_t v39 = (unsigned __int8 **)(v38 + 24);
    LODWORD(v40) = -1;
    do
    {
      uint64_t v41 = *v39;
      v39 += 4;
      uint64_t v40 = (v40 + 1);
    }
    while (v41 != v37);
  }
  else
  {
    uint64_t v40 = 4294934528;
  }
  uint64_t v42 = *(void *)(v38 + 32 * (int)v40);
  uint64_t v43 = *a1;
  uint64_t v44 = *(uint64_t (**)(void, uint64_t, uint64_t, unsigned __int8 *, void, uint64_t))(*a1 + 528);
  char v103 = v42;
  if (v44 && !*(unsigned char *)(v43 + 197) && !*((unsigned char *)a1 + 302))
  {
    int v66 = v44(*(void *)(v43 + 536), 26, v42, *v26, 0, a1[46]);
    if (v66 == 1)
    {
      int v73 = 23;
      uint64_t v74 = "not authorized";
LABEL_63:
      sub_1B0CEF2BC((uint64_t)a1, v74, v67, v68, v69, v70, v71, v72, v102);
      *((_DWORD *)a1 + 6) = v73;
      goto LABEL_15;
    }
    if ((v66 & 0xFFFFFFFD) != 0)
    {
      int v73 = 1;
      uint64_t v74 = "authorizer malfunction";
      goto LABEL_63;
    }
    if (a3 && !v66) {
      goto LABEL_27;
    }
LABEL_15:
    return sub_1B0CA115C(v12, (void *)a2);
  }
  if (!a3) {
    goto LABEL_15;
  }
LABEL_27:
  uint64_t v45 = *(const void **)a3;
  if (!*(void *)a3) {
    goto LABEL_15;
  }
  size_t v46 = *(unsigned int *)(a3 + 8);
  char v47 = (void *)sub_1B0D05DC0((uint64_t)v12, v46 + 1);
  if (!v47) {
    goto LABEL_15;
  }
  uint64_t v48 = v47;
  memcpy(v47, v45, v46);
  *((unsigned char *)v48 + v46) = 0;
  int v55 = *(unsigned __int8 *)v48;
  if ((char)byte_1B0DE196D[*(unsigned __int8 *)v48] < 0)
  {
    uint64_t v56 = 0;
    if (v55 == 91) {
      int v55 = 93;
    }
    for (int i = 1; ; ++i)
    {
      uint64_t v58 = i;
      int v59 = *((unsigned __int8 *)v48 + i);
      if (v59 == v55)
      {
        ++i;
        LOBYTE(v59) = v55;
        if (*((unsigned __int8 *)v48 + v58 + 1) != v55) {
          break;
        }
      }
      *((unsigned char *)v48 + v56++) = v59;
    }
    *((unsigned char *)v48 + v56) = 0;
  }
  uint64_t v60 = *((__int16 *)v26 + 27);
  if ((int)v60 >= 1)
  {
    uint64_t v61 = 0;
    while (1)
    {
      uint64_t v62 = *(unsigned char **)&v26[1][16 * v61];
      for (uint64_t j = (unsigned __int8 *)v48; ; ++j)
      {
        uint64_t v64 = *v62;
        uint64_t v65 = *j;
        if (v64 != v65) {
          break;
        }
        if (!*v62) {
          goto LABEL_50;
        }
LABEL_41:
        ++v62;
      }
      if (byte_1B0DE1758[v64] == byte_1B0DE1758[v65]) {
        goto LABEL_41;
      }
      if (++v61 == v60) {
        goto LABEL_51;
      }
    }
  }
  LODWORD(v61) = 0;
LABEL_50:
  if (v61 == v60)
  {
LABEL_51:
    sub_1B0CEF2BC((uint64_t)a1, "no such column: \"%T\"", v49, v50, v51, v52, v53, v54, a3);
    uint64_t v75 = 0;
  }
  else
  {
    sub_1B0D61F84((uint64_t)a1, v103, v40 == 1, (uint64_t)&byte_1B0DE9952, 0, v52, v53, v54);
    sub_1B0D62008(a1, v103, v40 == 1, v76, v77, v78, v79, v80, v102);
    uint64_t v81 = (uint64_t *)a1[21];
    if (!v81) {
      uint64_t v81 = a1;
    }
    *((unsigned char *)v81 + 33) = 1;
    uint64_t v75 = sub_1B0D2A1BC((uint64_t)v12, a4);
    if (v75)
    {
      sub_1B0CD9598(a1, "UPDATE \"%w\".sqlite_master SET sql = sqlite_rename_column(sql, type, name, %Q, %Q, %d, %Q, %d, %d) WHERE name NOT LIKE 'sqliteX_%%' ESCAPE 'X'  AND (type != 'index' OR tbl_name = %Q)", v82, v83, v84, v85, v86, v87, v103);
      sub_1B0CD9598(a1, "UPDATE temp.sqlite_master SET sql = sqlite_rename_column(sql, type, name, %Q, %Q, %d, %Q, %d, 1) WHERE type IN ('trigger', 'view')", v88, v89, v90, v91, v92, v93, v103);
      sub_1B0D61E94(a1, v40, 1, v94, v95, v96, v97, v98);
      sub_1B0D61F84((uint64_t)a1, v103, v40 == 1, (uint64_t)"after rename", 1, v99, v100, v101);
    }
  }
  sub_1B0CA115C(v12, (void *)a2);
  uint64_t result = sub_1B0D05C10(v12, v48);
  if (v75)
  {
    return sub_1B0D05C10(v12, v75);
  }
  return result;
}

void sub_1B0D2E880(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 344);
  if (!v8) {
    return;
  }
  uint64_t v11 = *(void *)a1;
  uint64_t v12 = *(const void **)(a1 + 376);
  if (v12)
  {
    size_t v13 = *(int *)(a1 + 384);
    uint64_t v14 = (void *)sub_1B0D05DC0(*(void *)a1, v13 + 1);
    uint64_t v20 = v14;
    if (v14)
    {
      memcpy(v14, v12, v13);
      *((unsigned char *)v20 + v13) = 0;
    }
    sub_1B0D269E4(a1, v8, v20, v15, v16, v17, v18, v19);
  }
  *(void *)(a1 + 376) = 0;
  if (*(int *)(v8 + 64) < 1) {
    return;
  }
  if (!*(unsigned char *)(v11 + 197))
  {
    uint64_t v27 = *(void *)(a1 + 168);
    if (!v27) {
      uint64_t v27 = a1;
    }
    *(unsigned char *)(v27 + 33) = 1;
    if (a2) {
      *(_DWORD *)(a1 + 272) = a2[2] + *a2 - *(_DWORD *)(a1 + 264);
    }
    int v34 = sub_1B0C904AC(v11, "CREATE VIRTUAL TABLE %T", a3, a4, a5, a6, a7, a8, a1 + 8);
    uint64_t v35 = *(void *)(v8 + 96);
    uint64_t v36 = *(void *)(v11 + 32);
    if (v35)
    {
      int v37 = (uint64_t *)(v36 + 24);
      LODWORD(v38) = -1;
      do
      {
        uint64_t v39 = *v37;
        v37 += 4;
        uint64_t v38 = (v38 + 1);
      }
      while (v39 != v35);
    }
    else
    {
      uint64_t v38 = 4294934528;
    }
    sub_1B0CD9598((uint64_t *)a1, "UPDATE %Q.sqlite_master SET type='table', name=%Q, tbl_name=%Q, rootpage=0, sql=%Q WHERE rowid=#%d", v28, v29, v30, v31, v32, v33, *(void *)(v36 + 32 * (int)v38));
    uint64_t v59 = *(void *)(a1 + 16);
    uint64_t v60 = v59;
    if (!v59)
    {
      if (!*(void *)(a1 + 168) && (*(unsigned char *)(*(void *)a1 + 96) & 8) == 0) {
        *(unsigned char *)(a1 + 35) = 1;
      }
      uint64_t v60 = sub_1B0CEF480((uint64_t *)a1, v52, v53, v54, v55, v56, v57, v58);
      uint64_t v59 = *(void *)(a1 + 16);
    }
    uint64_t v61 = (**(_DWORD **)(*(void *)(*(void *)a1 + 32) + 32 * (int)v38 + 24) + 1);
    int v62 = *(_DWORD *)(v59 + 144);
    if (*(_DWORD *)(v59 + 148) <= v62)
    {
      sub_1B0D25510(v59, 100, v38, 1, v61, v56, v57, v58);
    }
    else
    {
      *(_DWORD *)(v59 + 144) = v62 + 1;
      uint64_t v63 = *(void *)(v59 + 136) + 40 * v62;
      *(_DWORD *)uint64_t v63 = 100;
      *(_DWORD *)(v63 + 4) = v38;
      *(_DWORD *)(v63 + 8) = 1;
      *(_DWORD *)(v63 + 12) = v61;
      *(void *)(v63 + 24) = 0;
      *(void *)(v63 + 32) = 0;
      *(void *)(v63 + 16) = 0;
    }
    int v64 = *(_DWORD *)(v60 + 144);
    if (*(_DWORD *)(v60 + 148) <= v64)
    {
      sub_1B0D25510(v60, 166, 0, 0, 0, v56, v57, v58);
    }
    else
    {
      *(_DWORD *)(v60 + 144) = v64 + 1;
      uint64_t v65 = *(void *)(v60 + 136) + 40 * v64;
      *(unsigned char *)uint64_t v65 = -90;
      *(_OWORD *)(v65 + 1) = 0u;
      *(_OWORD *)(v65 + 17) = 0u;
      *(void *)(v65 + 32) = 0;
    }
    int v66 = sub_1B0C904AC(v11, "name=%Q AND sql=%Q", v53, v54, v61, v56, v57, v58, *(void *)v8);
    sub_1B0D37088(v60, v38, (uint64_t)v66, 0, v67, v68, v69, v70);
    if (v34) {
      sub_1B0D05C10((void *)v11, v34);
    }
    uint64_t v72 = (*(_DWORD *)(a1 + 56) + 1);
    *(_DWORD *)(a1 + 56) = v72;
    sub_1B0CCB908((uint64_t *)v60, 117, 0, v72, 0, *(void *)v8, 0, v71);
    int v76 = *(_DWORD *)(v60 + 144);
    if (*(_DWORD *)(v60 + 148) <= v76)
    {
      sub_1B0D25510(v60, 171, v38, v72, 0, v73, v74, v75);
    }
    else
    {
      *(_DWORD *)(v60 + 144) = v76 + 1;
      uint64_t v77 = *(void *)(v60 + 136) + 40 * v76;
      *(_DWORD *)uint64_t v77 = 171;
      *(_DWORD *)(v77 + 4) = v38;
      *(_DWORD *)(v77 + 8) = v72;
      *(void *)(v77 + 12) = 0;
      *(void *)(v77 + 28) = 0;
      *(void *)(v77 + 20) = 0;
      *(_DWORD *)(v77 + 36) = 0;
    }
    return;
  }
  uint64_t v21 = **(unsigned char ***)(v8 + 72);
  uint64_t v22 = *(void *)(v11 + 584);
  if (!v22)
  {
    uint64_t v40 = (uint64_t *)(v11 + 576);
    int v41 = *(_DWORD *)(v11 + 572);
    if (v41) {
      goto LABEL_31;
    }
LABEL_22:
    uint64_t v40 = &qword_1E9B52220;
    goto LABEL_23;
  }
  int v23 = *v21;
  if (*v21)
  {
    unsigned int v24 = 0;
    uint64_t v25 = v21 + 1;
    do
    {
      unsigned int v24 = -1640531535 * (v24 + byte_1B0DE1758[v23]);
      int v26 = *v25++;
      int v23 = v26;
    }
    while (v26);
  }
  else
  {
    unsigned int v24 = 0;
  }
  char v47 = (_DWORD *)(v22 + 16 * (v24 % *(_DWORD *)(v11 + 568)));
  uint64_t v40 = (uint64_t *)(v47 + 2);
  int v41 = *v47;
  if (!v41) {
    goto LABEL_22;
  }
  do
  {
LABEL_31:
    uint64_t v40 = (uint64_t *)*v40;
    uint64_t v48 = (unsigned char *)v40[3];
    for (int i = **(unsigned __int8 ***)(v8 + 72); ; ++i)
    {
      uint64_t v50 = *v48;
      uint64_t v51 = *i;
      if (v50 != v51) {
        break;
      }
      if (!*v48) {
        goto LABEL_23;
      }
LABEL_33:
      ++v48;
    }
    if (byte_1B0DE1758[v50] == byte_1B0DE1758[v51]) {
      goto LABEL_33;
    }
    --v41;
  }
  while (v41);
  uint64_t v40 = &qword_1E9B52220;
LABEL_23:
  uint64_t v42 = *(void *)(v8 + 96);
  uint64_t v43 = *(unsigned __int8 **)v8;
  uint64_t v44 = v40[2];
  if (v44)
  {
    uint64_t v45 = *(void *)v44;
    if (*(void *)v44)
    {
      if (*(int *)v45 >= 3 && *(void *)(v45 + 184))
      {
        unsigned int v46 = v43 ? strlen(*(const char **)v8) & 0x3FFFFFFF : 0;
        uint64_t v78 = *(void **)(v42 + 16);
        if (v78)
        {
          uint64_t v79 = v46;
          do
          {
            uint64_t v80 = v78[2];
            if (!*(unsigned char *)(v80 + 63) && (*(unsigned char *)(v80 + 49) & 0x10) == 0)
            {
              uint64_t v81 = *(unsigned __int8 **)v8;
              if (*(void *)v80)
              {
                if (!v81) {
                  goto LABEL_61;
                }
                if (v46)
                {
                  unsigned int v82 = v46 + 1;
                  uint64_t v83 = *(unsigned char **)v80;
                  while (1)
                  {
                    uint64_t v84 = *v83;
                    if (!*v83) {
                      break;
                    }
                    LODWORD(v84) = byte_1B0DE1758[v84];
                    int v85 = byte_1B0DE1758[*v81];
                    if (v84 != v85) {
                      goto LABEL_78;
                    }
                    ++v83;
                    ++v81;
                    if (--v82 <= 1) {
                      goto LABEL_79;
                    }
                  }
                  int v85 = byte_1B0DE1758[*v81];
LABEL_78:
                  if (v84 != v85) {
                    goto LABEL_61;
                  }
                }
LABEL_79:
                uint64_t v87 = (unsigned char *)(*(void *)v80 + v79);
                if (*v87 == 95)
                {
                  int v88 = (*(uint64_t (**)(unsigned char *))(*(void *)v44 + 184))(v87 + 1);
                  uint64_t v79 = v46;
                  if (v88) {
                    *(_DWORD *)(v80 + 48) |= 0x1000u;
                  }
                }
                goto LABEL_61;
              }
              if (v81) {
                int v86 = -1;
              }
              else {
                int v86 = 0;
              }
              if (!v86) {
                goto LABEL_79;
              }
            }
LABEL_61:
            uint64_t v78 = (void *)*v78;
          }
          while (v78);
        }
      }
    }
  }
  if (sub_1B0C796D8(v42 + 8, v43, v8))
  {
    if (!*(unsigned char *)(v11 + 103) && !*(unsigned char *)(v11 + 104))
    {
      *(unsigned char *)(v11 + 103) = 1;
      if (*(int *)(v11 + 220) >= 1) {
        *(_DWORD *)(v11 + 424) = 1;
      }
      ++*(_DWORD *)(v11 + 432);
      *(_WORD *)(v11 + 436) = 0;
      uint64_t v95 = *(void *)(v11 + 344);
      if (v95)
      {
        sub_1B0CEF2BC(v95, "out of memory", v89, v90, v91, v92, v93, v94, v97);
        for (uint64_t j = *(void *)(v11 + 344); ; ++*(_DWORD *)(j + 48))
        {
          *(_DWORD *)(j + 24) = 7;
          uint64_t j = *(void *)(j + 256);
          if (!j) {
            break;
          }
        }
      }
    }
  }
  else
  {
    *(void *)(a1 + 344) = 0;
  }
}

void sub_1B0D2EE48(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B0C88550(a1, a2, a3, 0, 0, 1, a5, a8, v57);
  uint64_t v15 = *(void **)(a1 + 344);
  if (!v15) {
    return;
  }
  *((unsigned char *)v15 + 63) = 1;
  uint64_t v16 = *(void *)a1;
  if (a4 && (uint64_t v17 = *(const void **)a4) != 0)
  {
    size_t v18 = *(unsigned int *)(a4 + 8);
    uint64_t v19 = (void *)sub_1B0D05DC0(*(void *)a1, v18 + 1);
    uint64_t v20 = v19;
    if (v19)
    {
      memcpy(v19, v17, v18);
      *((unsigned char *)v20 + v18) = 0;
      if ((char)byte_1B0DE196D[*(unsigned __int8 *)v20] < 0)
      {
        uint64_t v21 = 0;
        if (*(unsigned char *)v20 == 91) {
          int v22 = 93;
        }
        else {
          int v22 = *(unsigned __int8 *)v20;
        }
        for (int i = 1; ; ++i)
        {
          uint64_t v24 = i;
          int v25 = *((unsigned __int8 *)v20 + i);
          if (v25 == v22)
          {
            ++i;
            LOBYTE(v25) = v22;
            if (*((unsigned __int8 *)v20 + v24 + 1) != v22) {
              break;
            }
          }
          *((unsigned char *)v20 + v21++) = v25;
        }
        *((unsigned char *)v20 + v21) = 0;
      }
    }
  }
  else
  {
    uint64_t v20 = 0;
  }
  sub_1B0D269E4(a1, (uint64_t)v15, v20, v10, v11, v12, v13, v14);
  sub_1B0D269E4(a1, (uint64_t)v15, 0, v26, v27, v28, v29, v30);
  uint64_t v36 = (const char *)*v15;
  if (*v15)
  {
    size_t v37 = strlen((const char *)*v15);
    unint64_t v38 = v37 + 1;
    if (v16)
    {
      uint64_t v39 = (void *)sub_1B0D05DC0(v16, v38);
      if (!v39) {
        goto LABEL_22;
      }
      goto LABEL_21;
    }
    uint64_t v39 = (void *)sub_1B0C7FC94(v37 + 1);
    if (v39) {
LABEL_21:
    }
      memcpy(v39, v36, v38);
  }
  else
  {
    uint64_t v39 = 0;
  }
LABEL_22:
  sub_1B0D269E4(a1, (uint64_t)v15, v39, v31, v32, v33, v34, v35);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)a4 + *(_DWORD *)(a4 + 8) - *(_DWORD *)(a1 + 264);
  uint64_t v40 = (void *)v15[9];
  if (v40)
  {
    uint64_t v41 = v15[12];
    if (v41)
    {
      uint64_t v42 = (uint64_t *)(*(void *)(v16 + 32) + 24);
      uint64_t v43 = 0xFFFFFFFF00000000;
      do
      {
        uint64_t v44 = *v42;
        v42 += 4;
        v43 += 0x100000000;
      }
      while (v44 != v41);
      uint64_t v45 = v43 >> 32;
    }
    else
    {
      uint64_t v45 = -32768;
    }
    uint64_t v46 = *(void *)a1;
    char v47 = *(uint64_t (**)(void, uint64_t, void, void, void, void))(*(void *)a1 + 528);
    if (v47)
    {
      if (!*(unsigned char *)(v46 + 197) && !*(unsigned char *)(a1 + 302))
      {
        int v48 = v47(*(void *)(v46 + 536), 29, *v15, *v40, *(void *)(*(void *)(v46 + 32) + 32 * v45), *(void *)(a1 + 368));
        if (v48 == 1)
        {
          int v55 = 23;
          uint64_t v56 = "not authorized";
        }
        else
        {
          if ((v48 & 0xFFFFFFFD) == 0) {
            return;
          }
          int v55 = 1;
          uint64_t v56 = "authorizer malfunction";
        }
        sub_1B0CEF2BC(a1, v56, v49, v50, v51, v52, v53, v54, v58);
        *(_DWORD *)(a1 + 24) = v55;
      }
    }
  }
}

void sub_1B0D2F0A0(uint64_t a1)
{
  char v2 = *(const void **)(a1 + 376);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 344);
    if (v3)
    {
      size_t v4 = *(int *)(a1 + 384);
      uint64_t v5 = (void *)sub_1B0D05DC0(*(void *)a1, v4 + 1);
      uint64_t v11 = v5;
      if (v5)
      {
        memcpy(v5, v2, v4);
        *((unsigned char *)v11 + v4) = 0;
      }
      sub_1B0D269E4(a1, v3, v11, v6, v7, v8, v9, v10);
    }
  }
  *(void *)(a1 + 376) = 0;
  *(_DWORD *)(a1 + 384) = 0;
}

void *sub_1B0D2F124(uint64_t a1, void *a2, int a3)
{
  uint64_t v3 = a2;
  if (!a2) {
    return v3;
  }
  if (!a3) {
    goto LABEL_6;
  }
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1)
  {
    uint64_t v6 = (void *)sub_1B0D05DC0(v5, 0x18uLL);
    if (v6)
    {
LABEL_5:
      uint64_t v7 = *(void *)(a1 + 192);
      *(void *)(a1 + 192) = v6;
      *uint64_t v6 = v7;
      v6[1] = v3;
      v6[2] = sub_1B0D1E12C;
LABEL_6:
      if (!*(_DWORD *)(a1 + 48))
      {
        v3[1] = *(void *)(a1 + 400);
        *(void *)(a1 + 400) = v3;
      }
      return v3;
    }
  }
  else
  {
    uint64_t v6 = (void *)sub_1B0C7FC94(24);
    if (v6) {
      goto LABEL_5;
    }
  }
  uint64_t v8 = *(void **)a1;
  if (*(int *)v3 >= 1)
  {
    uint64_t v9 = 0;
    uint64_t v10 = v3 + 4;
    do
    {
      uint64_t v11 = (void *)*(v10 - 1);
      if (v11) {
        sub_1B0D270DC(v8, v11);
      }
      if (*v10) {
        sub_1B0CA0FA8(v8, *v10, 1);
      }
      uint64_t v12 = (void *)*(v10 - 2);
      if (v12) {
        sub_1B0D05C10(v8, v12);
      }
      ++v9;
      v10 += 6;
    }
    while (v9 < *(int *)v3);
  }
  sub_1B0D05C10(v8, v3);
  return 0;
}

uint64_t sub_1B0D2F228(uint64_t *a1, uint64_t a2, void *a3, uint64_t a4, char a5)
{
  uint64_t v10 = *a1;
  if (*a1)
  {
    uint64_t v11 = sub_1B0D05DC0(*a1, 0x30uLL);
    if (!v11) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v11 = sub_1B0C7FC94(48);
  if (v11)
  {
LABEL_3:
    *(_OWORD *)(v11 + 16) = 0u;
    *(_OWORD *)(v11 + 32) = 0u;
    *(_OWORD *)uint64_t v11 = 0u;
  }
LABEL_4:
  if (*(unsigned char *)(v10 + 103))
  {
    if (a3) {
      sub_1B0D270DC((void *)v10, a3);
    }
    if (a4) {
      sub_1B0CA0FA8((void *)v10, a4, 1);
    }
  }
  else
  {
    *(void *)(v11 + 8) = a3;
    *(void *)(v11 + 16) = a4;
    if (a2 && (uint64_t v12 = *(const void **)a2) != 0)
    {
      size_t v13 = *(unsigned int *)(a2 + 8);
      uint64_t v14 = (unsigned char *)sub_1B0D05DC0(*a1, v13 + 1);
      uint64_t v15 = v14;
      if (v14)
      {
        memcpy(v14, v12, v13);
        v15[v13] = 0;
        if ((char)byte_1B0DE196D[*v15] < 0)
        {
          uint64_t v16 = 0;
          if (*v15 == 91) {
            int v17 = 93;
          }
          else {
            int v17 = *v15;
          }
          for (int i = 1; ; ++i)
          {
            uint64_t v19 = i;
            int v20 = v15[i];
            if (v20 == v17)
            {
              ++i;
              LOBYTE(v20) = v17;
              if (v15[v19 + 1] != v17) {
                break;
              }
            }
            v15[v16++] = v20;
          }
          v15[v16] = 0;
        }
      }
    }
    else
    {
      uint64_t v15 = 0;
    }
    *(void *)uint64_t v11 = v15;
    *(unsigned char *)(v11 + 40) = a5;
  }
  return v11;
}

void *sub_1B0D2F38C(uint64_t *a1, _DWORD *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a2;
  if (!a3) {
    return v8;
  }
  uint64_t v11 = *a1;
  if (a2 && (uint64_t v12 = (void *)*a3) != 0)
  {
    int v13 = *a2;
    if ((int)*a2 >= 1)
    {
      for (uint64_t i = 0; i < v13; ++i)
      {
        for (uint64_t j = 0; ; ++j)
        {
          uint64_t v16 = *((unsigned __int8 *)v12 + j);
          uint64_t v17 = *(unsigned __int8 *)(v8[6 * i + 2] + j);
          if (v16 == v17) {
            break;
          }
          if (byte_1B0DE1758[v16] != byte_1B0DE1758[v17]) {
            goto LABEL_6;
          }
LABEL_9:
          ;
        }
        if (*((unsigned char *)v12 + j)) {
          goto LABEL_9;
        }
        sub_1B0CEF2BC((uint64_t)a1, "duplicate WITH table name: %s", (uint64_t)a3, a4, a5, a6, a7, a8, (char)v12);
        int v13 = *(_DWORD *)v8;
LABEL_6:
        ;
      }
    }
  }
  else
  {
    if (!a2)
    {
      if (v11)
      {
        uint64_t v19 = (_OWORD *)sub_1B0D05DC0(*a1, 0x40uLL);
        if (!v19) {
          goto LABEL_22;
        }
      }
      else
      {
        uint64_t v19 = (_OWORD *)sub_1B0C7FC94(64);
        if (!v19) {
          goto LABEL_22;
        }
      }
      void v19[2] = 0u;
      v19[3] = 0u;
      *uint64_t v19 = 0u;
      v19[1] = 0u;
      goto LABEL_22;
    }
    int v13 = *a2;
  }
  unint64_t v18 = 48 * v13 + 64;
  if (*(void *)(v11 + 512) <= (unint64_t)v8) {
    goto LABEL_21;
  }
  if (*(void *)(v11 + 496) > (unint64_t)v8)
  {
    if (*(void *)(v11 + 504) <= (unint64_t)v8)
    {
      uint64_t v19 = v8;
      if (v18 <= *(unsigned __int16 *)(v11 + 438)) {
        goto LABEL_22;
      }
    }
    goto LABEL_21;
  }
  uint64_t v19 = v8;
  if (v18 >= 0x81) {
LABEL_21:
  }
    uint64_t v19 = (_OWORD *)sub_1B0D05E6C(v11, v8, v18);
LABEL_22:
  if (*(unsigned char *)(v11 + 103))
  {
    int v20 = (void *)a3[1];
    if (v20) {
      sub_1B0D270DC((void *)v11, v20);
    }
    uint64_t v21 = a3[2];
    if (v21) {
      sub_1B0CA0FA8((void *)v11, v21, 1);
    }
    if (*a3) {
      sub_1B0D05C10((void *)v11, (void *)*a3);
    }
  }
  else
  {
    int v22 = (*(_DWORD *)v19)++;
    int v23 = &v19[3 * v22];
    long long v24 = *(_OWORD *)a3;
    long long v25 = *((_OWORD *)a3 + 2);
    v23[2] = *((_OWORD *)a3 + 1);
    v23[3] = v25;
    v23[1] = v24;
    uint64_t v8 = v19;
  }
  sub_1B0D05C10((void *)v11, a3);
  return v8;
}

void sub_1B0D2F584(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a2[1];
  if (!v8) {
    return;
  }
  uint64_t v9 = a3;
  if (!a3)
  {
LABEL_11:
    sub_1B0CEF2BC((uint64_t)a1, "no such window: %s", a3, a4, a5, a6, a7, a8, a2[1]);
    return;
  }
  uint64_t v11 = (void *)*a1;
LABEL_4:
  for (uint64_t i = 0; ; ++i)
  {
    uint64_t v13 = *(unsigned __int8 *)(*(void *)v9 + i);
    uint64_t v14 = *(unsigned __int8 *)(v8 + i);
    if (v13 == v14) {
      break;
    }
    if (byte_1B0DE1758[v13] != byte_1B0DE1758[v14])
    {
      uint64_t v9 = *(void *)(v9 + 64);
      if (v9) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
LABEL_6:
    ;
  }
  if (*(unsigned char *)(*(void *)v9 + i)) {
    goto LABEL_6;
  }
  if (a2[2])
  {
    uint64_t v15 = "PARTITION clause";
LABEL_14:
    sub_1B0CEF2BC((uint64_t)a1, "cannot override %s of window: %s", a3, a4, a5, a6, a7, a8, (char)v15);
    return;
  }
  if (*(void *)(v9 + 24) && a2[3])
  {
    uint64_t v15 = "ORDER BY clause";
    goto LABEL_14;
  }
  if (!*(unsigned char *)(v9 + 35))
  {
    uint64_t v15 = "frame specification";
    goto LABEL_14;
  }
  a2[2] = sub_1B0CAE478(*a1, *(void **)(v9 + 16), 0);
  uint64_t v16 = *(void **)(v9 + 24);
  if (v16) {
    a2[3] = sub_1B0CAE478((uint64_t)v11, v16, 0);
  }
  uint64_t v17 = (void *)a2[1];
  if (v17) {
    sub_1B0D05C10(v11, v17);
  }
  a2[1] = 0;
}

void *sub_1B0D2F6B4(uint64_t *a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  if (a2)
  {
    a2[2] = a3;
    a2[3] = a4;
    if (a5)
    {
      uint64_t v8 = *(const void **)a5;
      if (*(void *)a5)
      {
        size_t v9 = *(unsigned int *)(a5 + 8);
        uint64_t v10 = (unsigned char *)sub_1B0D05DC0(*a1, v9 + 1);
        uint64_t v11 = v10;
        if (v10)
        {
          memcpy(v10, v8, v9);
          v11[v9] = 0;
        }
        a2[1] = v11;
      }
      else
      {
        a2[1] = 0;
      }
    }
  }
  else
  {
    if (a3) {
      sub_1B0D270DC((void *)*a1, a3);
    }
    if (a4) {
      sub_1B0D270DC((void *)*a1, a4);
    }
  }
  return a2;
}

uint64_t sub_1B0D2F75C(uint64_t *a1, int a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, unsigned __int8 *a6, uint64_t a7, uint64_t a8)
{
  int v8 = a7;
  char v10 = a5;
  char v12 = a3;
  BOOL v15 = a2 == 0;
  if (a3 == 85 && a5 == 88 || a3 == 86 && (a5 == 88 || a5 == 85))
  {
    sub_1B0CEF2BC((uint64_t)a1, "unsupported frame specification", a3, (uint64_t)a4, a5, (uint64_t)a6, a7, a8, v22);
    goto LABEL_4;
  }
  uint64_t v17 = *a1;
  if (!*a1)
  {
    uint64_t v18 = sub_1B0C7FC94(144);
    goto LABEL_26;
  }
  if (*(unsigned __int16 *)(v17 + 436) <= 0x8Fu)
  {
    if (*(_DWORD *)(v17 + 432))
    {
      if (*(unsigned char *)(v17 + 103)) {
        goto LABEL_4;
      }
    }
    else
    {
      ++*(_DWORD *)(v17 + 452);
    }
    goto LABEL_25;
  }
  uint64_t v16 = *(void *)(v17 + 472);
  if (v16)
  {
    uint64_t v19 = (void *)(v17 + 472);
LABEL_23:
    *uint64_t v19 = *(void *)v16;
    ++*(_DWORD *)(v17 + 448);
LABEL_27:
    *(_OWORD *)(v16 + 112) = 0u;
    *(_OWORD *)(v16 + 128) = 0u;
    *(_OWORD *)(v16 + 80) = 0u;
    *(_OWORD *)(v16 + 96) = 0u;
    *(_OWORD *)(v16 + 48) = 0u;
    *(_OWORD *)(v16 + 64) = 0u;
    *(_OWORD *)(v16 + 16) = 0u;
    *(_OWORD *)(v16 + 32) = 0u;
    *(_OWORD *)uint64_t v16 = 0u;
    if (a2) {
      char v20 = a2;
    }
    else {
      char v20 = 89;
    }
    *(unsigned char *)(v16 + 32) = v20;
    *(unsigned char *)(v16 + 33) = v12;
    *(unsigned char *)(v16 + 34) = v10;
    if (!v8) {
      int v8 = (*(unsigned __int8 *)(*a1 + 96) << 30 >> 31) & 0x42;
    }
    *(unsigned char *)(v16 + 36) = v8;
    *(unsigned char *)(v16 + 35) = v15;
    *(void *)(v16 + 48) = sub_1B0D62074(a1, (uint64_t)a6);
    *(void *)(v16 + 40) = sub_1B0D62074(a1, (uint64_t)a4);
    return v16;
  }
  uint64_t v16 = *(void *)(v17 + 464);
  if (v16)
  {
    uint64_t v19 = (void *)(v17 + 464);
    goto LABEL_23;
  }
  ++*(_DWORD *)(v17 + 456);
LABEL_25:
  uint64_t v18 = sub_1B0D05FA0(v17, 144);
LABEL_26:
  uint64_t v16 = v18;
  if (v18) {
    goto LABEL_27;
  }
LABEL_4:
  if (a6) {
    sub_1B0D1DF88((void *)*a1, a6);
  }
  if (a4) {
    sub_1B0D1DF88((void *)*a1, a4);
  }
  return 0;
}

uint64_t sub_1B0D2F924(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = *(int *)(a1 + 144);
  if (*(_DWORD *)(a1 + 148) <= (int)result) {
    return sub_1B0D25510(a1, a2, 0, 0, 0, a6, a7, a8);
  }
  *(_DWORD *)(a1 + 144) = result + 1;
  uint64_t v10 = *(void *)(a1 + 136) + 40 * (int)result;
  *(unsigned char *)uint64_t v10 = a2;
  *(_OWORD *)(v10 + 1) = 0u;
  *(_OWORD *)(v10 + 17) = 0u;
  *(void *)(v10 + 32) = 0;
  return result;
}

uint64_t sub_1B0D2F978(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = *(int *)(a1 + 144);
  if (*(_DWORD *)(a1 + 148) <= (int)result) {
    return sub_1B0D25510(a1, a2, a3, 0, 0, a6, a7, a8);
  }
  *(_DWORD *)(a1 + 144) = result + 1;
  uint64_t v10 = *(void *)(a1 + 136) + 40 * (int)result;
  *(unsigned char *)uint64_t v10 = a2;
  *(_WORD *)(v10 + 2) = 0;
  *(_DWORD *)(v10 + 4) = a3;
  *(unsigned char *)(v10 + 1) = 0;
  *(_OWORD *)(v10 + 8) = 0u;
  *(_OWORD *)(v10 + 24) = 0u;
  return result;
}

uint64_t sub_1B0D2F9D0(uint64_t result, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(result + 16))
  {
    uint64_t v5 = result;
    uint64_t result = sub_1B0C9E080();
    if (result != a3)
    {
      uint64_t v9 = result;
      if (a2 && ((a2[6] & 0x40) != 0 || *a2 == 176)) {
        uint64_t v10 = 80;
      }
      else {
        uint64_t v10 = 81;
      }
      uint64_t result = *(void *)(v5 + 16);
      int v11 = *(_DWORD *)(result + 144);
      if (*(_DWORD *)(result + 148) <= v11)
      {
        return sub_1B0D25510(result, v10, v9, a3, 0, v6, v7, v8);
      }
      else
      {
        *(_DWORD *)(result + 144) = v11 + 1;
        uint64_t v12 = *(void *)(result + 136) + 40 * v11;
        *(unsigned char *)uint64_t v12 = v10;
        *(_WORD *)(v12 + 2) = 0;
        *(_DWORD *)(v12 + 4) = v9;
        *(_DWORD *)(v12 + 8) = a3;
        *(unsigned char *)(v12 + 1) = 0;
        *(void *)(v12 + 12) = 0;
        *(void *)(v12 + 28) = 0;
        *(void *)(v12 + 20) = 0;
        *(_DWORD *)(v12 + 36) = 0;
      }
    }
  }
  return result;
}

uint64_t sub_1B0D2FAAC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = *(_DWORD *)(result + 144);
  if (*(_DWORD *)(result + 148) <= v8) {
    return sub_1B0D25510(result, 9, 0, a2, 0, a6, a7, a8);
  }
  *(_DWORD *)(result + 144) = v8 + 1;
  uint64_t v9 = *(void *)(result + 136) + 40 * v8;
  *(void *)uint64_t v9 = 9;
  *(_DWORD *)(v9 + 8) = a2;
  *(void *)(v9 + 12) = 0;
  *(void *)(v9 + 28) = 0;
  *(void *)(v9 + 20) = 0;
  *(_DWORD *)(v9 + 36) = 0;
  return result;
}

void sub_1B0D2FB04(uint64_t a1, int a2, int a3, int a4, uint64_t a5)
{
  if (a2 != 1)
  {
    if (*(unsigned char *)(*(void *)(*(void *)(*(void *)a1 + 32) + 32 * a2 + 8) + 17)) {
      sub_1B0D2FBBC(a1, a2, a3, a4, a5);
    }
  }
}

void *sub_1B0D2FB30(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = (void *)sub_1B0D2FDAC((_DWORD *)a1, a2);
  if (result)
  {
    size_t v4 = result;
    if (*(unsigned char *)(*(void *)v2 + 103))
    {
      if (!*(void *)(*(void *)v2 + 816) && (*(_DWORD *)result)-- == 1)
      {
        uint64_t v6 = (void *)result[2];
        return sub_1B0D15C20(v6, v4);
      }
    }
    else
    {
      uint64_t v7 = *(void *)(v2 + 136) + 40 * *(int *)(v2 + 144);
      *(unsigned char *)(v7 - 39) = -8;
      *(void *)(v7 - 24) = result;
    }
  }
  return result;
}

void sub_1B0D2FBBC(uint64_t a1, int a2, int a3, int a4, uint64_t a5)
{
  char v6 = a4;
  if (*(void *)(a1 + 168)) {
    uint64_t v9 = *(void *)(a1 + 168);
  }
  else {
    uint64_t v9 = a1;
  }
  int v10 = *(_DWORD *)(v9 + 148);
  int v11 = *(void **)(v9 + 152);
  if (v10 < 1)
  {
    int v14 = 24 * v10 + 24;
    uint64_t v15 = *(void *)v9;
    unint64_t v16 = v14;
    if (!v11)
    {
      uint64_t v17 = sub_1B0D05DC0(*(void *)v9, v14);
      *(void *)(v9 + 152) = v17;
      if (v17) {
        goto LABEL_20;
      }
      goto LABEL_23;
    }
  }
  else
  {
    uint64_t v12 = (BOOL *)(v11 + 1);
    uint64_t v13 = *(unsigned int *)(v9 + 148);
    do
    {
      if (*((_DWORD *)v12 - 2) == a2 && *((_DWORD *)v12 - 1) == a3)
      {
        BOOL *v12 = (*v12 | a4) != 0;
        return;
      }
      v12 += 24;
      --v13;
    }
    while (v13);
    int v14 = 24 * v10 + 24;
    uint64_t v15 = *(void *)v9;
    unint64_t v16 = v14;
  }
  if (*(void *)(v15 + 512) > (unint64_t)v11)
  {
    if (*(void *)(v15 + 496) <= (unint64_t)v11)
    {
      if (v14 < 0x81)
      {
LABEL_16:
        uint64_t v17 = *(void *)(v9 + 152);
LABEL_19:
        *(void *)(v9 + 152) = v17;
LABEL_20:
        int v18 = *(_DWORD *)(v9 + 148);
        *(_DWORD *)(v9 + 148) = v18 + 1;
        uint64_t v19 = v17 + 24 * v18;
        *(_DWORD *)uint64_t v19 = a2;
        *(_DWORD *)(v19 + 4) = a3;
        *(unsigned char *)(v19 + 8) = v6;
        *(void *)(v19 + 16) = a5;
        return;
      }
    }
    else if (*(void *)(v15 + 504) <= (unint64_t)v11 && v16 <= *(unsigned __int16 *)(v15 + 438))
    {
      goto LABEL_16;
    }
  }
  uint64_t v17 = sub_1B0D05E6C(v15, *(void **)(v9 + 152), v16);
  if (v17) {
    goto LABEL_19;
  }
  sub_1B0D05C10((void *)v15, v11);
  *(void *)(v9 + 152) = 0;
LABEL_23:
  *(_DWORD *)(v9 + 148) = 0;
  uint64_t v26 = *(void *)v9;
  if (!*(unsigned char *)(*(void *)v9 + 103) && !*(unsigned char *)(v26 + 104))
  {
    *(unsigned char *)(v26 + 103) = 1;
    if (*(int *)(v26 + 220) >= 1) {
      *(_DWORD *)(v26 + 424) = 1;
    }
    ++*(_DWORD *)(v26 + 432);
    *(_WORD *)(v26 + 436) = 0;
    uint64_t v27 = *(void *)(v26 + 344);
    if (v27)
    {
      sub_1B0CEF2BC(v27, "out of memory", v20, v21, v22, v23, v24, v25, v29);
      for (uint64_t i = *(void *)(v26 + 344); ; ++*(_DWORD *)(i + 48))
      {
        *(_DWORD *)(i + 24) = 7;
        uint64_t i = *(void *)(i + 256);
        if (!i) {
          break;
        }
      }
    }
  }
}

uint64_t sub_1B0D2FDAC(_DWORD *a1, uint64_t a2)
{
  if (a1[12]) {
    return 0;
  }
  uint64_t v6 = *(unsigned __int16 *)(a2 + 96);
  uint64_t v7 = *(void *)a1;
  if ((*(_WORD *)(a2 + 99) & 8) != 0)
  {
    int v8 = *(unsigned __int16 *)(a2 + 94);
    int v9 = v6 - v8;
  }
  else
  {
    int v8 = *(unsigned __int16 *)(a2 + 96);
    int v9 = 0;
  }
  uint64_t v2 = sub_1B0D2FF40(v7, v8, v9);
  if (v2)
  {
    if (v6)
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        uint64_t v12 = *(void *)(a2 + 64);
        uint64_t v13 = *(char **)(v12 + 8 * i);
        if (v13 == "BINARY")
        {
          uint64_t v11 = 0;
        }
        else
        {
          uint64_t v14 = *(unsigned __int8 *)(*(void *)a1 + 100);
          int v15 = *(unsigned __int8 *)(*(void *)a1 + 197);
          unint64_t v16 = sub_1B0D224B0(*(void *)a1, *(unsigned __int8 *)(*(void *)a1 + 100), *(char **)(v12 + 8 * i), v15);
          uint64_t v11 = (uint64_t)v16;
          if (!v15 && (!v16 || !v16[3])) {
            uint64_t v11 = sub_1B0D2719C((uint64_t)a1, v14, (uint64_t)v16, v13, v17, v18, v19, v20);
          }
        }
        *(void *)(v2 + 32 + 8 * i) = v11;
        *(unsigned char *)(*(void *)(v2 + 24) + i) = *(unsigned char *)(*(void *)(a2 + 56) + i);
      }
    }
    if (a1[12])
    {
      if ((*(_WORD *)(a2 + 99) & 0x100) == 0)
      {
        *(_WORD *)(a2 + 99) |= 0x100u;
        a1[6] = 513;
      }
      if ((*(_DWORD *)v2)-- == 1) {
        sub_1B0D15C20(*(void **)(v2 + 16), (void *)v2);
      }
      return 0;
    }
  }
  return v2;
}

void *sub_1B0D2FF04(void *result, uint64_t a2, char a3)
{
  if (*(unsigned char *)(*result + 103)) {
    return sub_1B0C8B9A4((void *)*result, a3, a2);
  }
  uint64_t v3 = result[17] + 40 * *((int *)result + 36);
  *(unsigned char *)(v3 - 39) = a3;
  *(void *)(v3 - 24) = a2;
  return result;
}

uint64_t sub_1B0D2FF40(uint64_t a1, int a2, int a3)
{
  __int16 v3 = a2;
  int v5 = a3 + a2;
  size_t v6 = 9 * (a3 + a2) - 8;
  uint64_t v7 = sub_1B0D05DC0(a1, v6 + 40);
  if (v7)
  {
    uint64_t v14 = v7;
    *(_WORD *)(v7 + 6) = v3;
    *(_WORD *)(v7 + 8) = v5;
    *(unsigned char *)(v7 + 4) = *(unsigned char *)(a1 + 100);
    *(void *)(v7 + 16) = a1;
    *(void *)(v7 + 24) = v7 + 8 * v5 + 32;
    *(_DWORD *)uint64_t v7 = 1;
    bzero((void *)(v7 + 40), v6);
  }
  else
  {
    if (*(unsigned char *)(a1 + 103) || *(unsigned char *)(a1 + 104)) {
      return 0;
    }
    *(unsigned char *)(a1 + 103) = 1;
    if (*(int *)(a1 + 220) >= 1) {
      *(_DWORD *)(a1 + 424) = 1;
    }
    ++*(_DWORD *)(a1 + 432);
    *(_WORD *)(a1 + 436) = 0;
    uint64_t v16 = *(void *)(a1 + 344);
    if (!v16) {
      return 0;
    }
    sub_1B0CEF2BC(v16, "out of memory", v8, v9, v10, v11, v12, v13, v19);
    uint64_t v17 = *(void *)(a1 + 344);
    *(_DWORD *)(v17 + 24) = 7;
    uint64_t v18 = *(void *)(v17 + 256);
    if (!v18)
    {
      return 0;
    }
    else
    {
      uint64_t v14 = 0;
      do
      {
        ++*(_DWORD *)(v18 + 48);
        *(_DWORD *)(v18 + 24) = 7;
        uint64_t v18 = *(void *)(v18 + 256);
      }
      while (v18);
    }
  }
  return v14;
}

uint64_t sub_1B0D302D8(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 96);
  if (!v3) {
    return 0xFFFFFFFFLL;
  }
  while (1)
  {
    uint64_t v7 = *(unsigned int *)(v3 + 8);
    if ((v7 & 0x80000000) == 0)
    {
      int v8 = *(_DWORD *)(a1 + 64);
      if (v8)
      {
        if (v7 != v8 - 1) {
          goto LABEL_4;
        }
        uint64_t v7 = 0xFFFFFFFFLL;
      }
      if (!sub_1B0D31DE4(0, a2, *(unsigned __int8 **)v3, v7)) {
        break;
      }
    }
LABEL_4:
    uint64_t v3 = *(void *)(v3 + 24);
    if (!v3) {
      return 0xFFFFFFFFLL;
    }
  }
  unsigned int v9 = sub_1B0CB5528(a2);
  if (v9 <= 0x41)
  {
    if (*(unsigned char *)(v3 + 21) == 65) {
      goto LABEL_16;
    }
    goto LABEL_4;
  }
  int v13 = *(unsigned __int8 *)(v3 + 21);
  if (v9 == 66)
  {
    if (v13 == 66) {
      goto LABEL_16;
    }
    goto LABEL_4;
  }
  if (v13 != 67) {
    goto LABEL_4;
  }
LABEL_16:
  uint64_t v14 = *(void *)(a1 + 16);
  if (*(unsigned char *)(v3 + 20))
  {
    uint64_t v15 = *(unsigned int *)(v3 + 12);
    int v16 = *(_DWORD *)(v14 + 144);
    uint64_t v17 = (v16 + 3);
    if (*(_DWORD *)(v14 + 148) <= v16)
    {
      sub_1B0D25510(*(void *)(a1 + 16), 20, v15, v17, a3, v10, v11, v12);
    }
    else
    {
      *(_DWORD *)(v14 + 144) = v16 + 1;
      uint64_t v18 = *(void *)(v14 + 136) + 40 * v16;
      *(_DWORD *)uint64_t v18 = 20;
      *(_DWORD *)(v18 + 4) = v15;
      *(_DWORD *)(v18 + 8) = v17;
      *(_DWORD *)(v18 + 12) = a3;
      *(void *)(v18 + 24) = 0;
      *(void *)(v18 + 32) = 0;
      *(void *)(v18 + 16) = 0;
    }
    uint64_t v24 = *(unsigned int *)(v3 + 12);
    uint64_t v25 = *(unsigned int *)(v3 + 16);
    int v26 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v26)
    {
      sub_1B0D25510(v14, 94, v24, v25, a3, v10, v11, v12);
    }
    else
    {
      *(_DWORD *)(v14 + 144) = v26 + 1;
      uint64_t v27 = *(void *)(v14 + 136) + 40 * v26;
      *(_DWORD *)uint64_t v27 = 94;
      *(_DWORD *)(v27 + 4) = v24;
      *(_DWORD *)(v27 + 8) = v25;
      *(_DWORD *)(v27 + 12) = a3;
      *(void *)(v27 + 24) = 0;
      *(void *)(v27 + 32) = 0;
      *(void *)(v27 + 16) = 0;
    }
    int v28 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v28)
    {
      sub_1B0D25510(v14, 9, 0, 0, 0, v10, v11, v12);
    }
    else
    {
      *(_DWORD *)(v14 + 144) = v28 + 1;
      uint64_t v29 = *(void *)(v14 + 136) + 40 * v28;
      *(unsigned char *)uint64_t v29 = 9;
      *(_OWORD *)(v29 + 1) = 0u;
      *(_OWORD *)(v29 + 17) = 0u;
      *(void *)(v29 + 32) = 0;
    }
    uint64_t v30 = *(void *)(a1 + 96);
    *(void *)(a1 + 96) = 0;
    sub_1B0D2F9D0(a1, a2, a3);
    *(void *)(a1 + 96) = v30;
    if (*(unsigned char *)(*(void *)v14 + 103)) {
      dword_1E9B52248 = *(_DWORD *)(v14 + 144);
    }
    else {
      *(_DWORD *)(*(void *)(v14 + 136) + 40 * (v16 + 2) + 8) = *(_DWORD *)(v14 + 144);
    }
  }
  else
  {
    uint64_t v20 = *(unsigned int *)(v3 + 12);
    uint64_t v21 = *(unsigned int *)(v3 + 16);
    int v22 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v22)
    {
      sub_1B0D25510(*(void *)(a1 + 16), 94, v20, v21, a3, v10, v11, v12);
    }
    else
    {
      *(_DWORD *)(v14 + 144) = v22 + 1;
      uint64_t v23 = *(void *)(v14 + 136) + 40 * v22;
      *(_DWORD *)uint64_t v23 = 94;
      *(_DWORD *)(v23 + 4) = v20;
      *(_DWORD *)(v23 + 8) = v21;
      *(_DWORD *)(v23 + 12) = a3;
      *(void *)(v23 + 24) = 0;
      *(void *)(v23 + 32) = 0;
      *(void *)(v23 + 16) = 0;
    }
  }
  return a3;
}

uint64_t sub_1B0D30554(uint64_t a1, unsigned int a2)
{
  if ((a2 & 0x80000000) == 0 && (*(_DWORD *)(a1 + 48) & 0x20) != 0)
  {
    uint64_t v2 = *(void *)(a1 + 8);
    if (a2)
    {
      if (a2 >= 0x11)
      {
        uint64_t v5 = a2 & 0xF;
        if ((a2 & 0xF) == 0) {
          uint64_t v5 = 16;
        }
        uint64_t v3 = a2 - v5;
        uint64_t v6 = v2 + 142;
        int16x8_t v7 = 0uLL;
        v8.i64[0] = 0x1000100010001;
        v8.i64[1] = 0x1000100010001;
        uint64_t v9 = v3;
        int16x8_t v10 = 0uLL;
        do
        {
          int8x16_t v11 = vqtbl2q_s8(*(int8x16x2_t *)(v6 - 64), (int8x16_t)xmmword_1B0DE1610);
          v11.i32[3] = vqtbl2q_s8(*(int8x16x2_t *)(v6 - 32), (int8x16_t)xmmword_1B0DE1600).i32[3];
          v12.i32[0] = vzip1q_s16(*(int16x8_t *)(v6 - 128), *(int16x8_t *)(v6 - 112)).u32[0];
          v12.i32[1] = vqtbl2q_s8(*(int8x16x2_t *)(v6 - 96), (int8x16_t)xmmword_1B0DE1620).i32[1];
          v12.i64[1] = v11.i64[1];
          uint16x8_t v13 = (uint16x8_t)vqtbl2q_s8(*(int8x16x2_t *)(v6 + 96), (int8x16_t)xmmword_1B0DE1600);
          int8x16x2_t v21 = *(int8x16x2_t *)(v6 + 32);
          int8x16_t v14 = vqtbl2q_s8(*(int8x16x2_t *)(v6 + 64), (int8x16_t)xmmword_1B0DE1610);
          int16x8_t v16 = *(int16x8_t *)v6;
          int16x8_t v15 = *(int16x8_t *)(v6 + 16);
          v6 += 256;
          v14.i32[3] = v13.i32[3];
          v13.i32[0] = vzip1q_s16(v16, v15).u32[0];
          v13.i32[1] = vqtbl2q_s8(v21, (int8x16_t)xmmword_1B0DE1620).i32[1];
          v13.i64[1] = v14.i64[1];
          int16x8_t v7 = vaddq_s16((int16x8_t)vbicq_s8(v8, (int8x16_t)vshrq_n_u16(v12, 5uLL)), v7);
          int16x8_t v10 = vaddq_s16((int16x8_t)vbicq_s8(v8, (int8x16_t)vshrq_n_u16(v13, 5uLL)), v10);
          v9 -= 16;
        }
        while (v9);
        __int16 v4 = vaddvq_s16(vaddq_s16(v10, v7));
      }
      else
      {
        uint64_t v3 = 0;
        __int16 v4 = 0;
      }
      uint64_t v17 = (unsigned __int16 *)(v2 + 16 * v3 + 14);
      uint64_t v18 = a2 - v3;
      do
      {
        unsigned int v19 = *v17;
        v17 += 8;
        v4 += ((v19 >> 5) & 1) == 0;
        --v18;
      }
      while (v18);
    }
    else
    {
      __int16 v4 = 0;
    }
    if ((*(_WORD *)(v2 + 16 * a2 + 14) & 0x20) == 0) {
      return v4;
    }
    LOWORD(a2) = a2 - v4 + *(_WORD *)(a1 + 56);
  }
  return (__int16)a2;
}

uint64_t sub_1B0D30694(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = result;
  uint64_t v12 = *(void *)(result + 16);
  int v13 = *(_DWORD *)(result + 48);
  int v14 = *(_DWORD *)(result + 64);
  uint64_t v15 = (v14 - 1);
  if (v14 < 1)
  {
    int v16 = 0;
    int v18 = *(unsigned __int16 *)(a3 + 12);
    if (!*(_WORD *)(a3 + 12)) {
      goto LABEL_9;
    }
  }
  else
  {
    int v16 = *(_DWORD *)(v12 + 144);
    if (*(_DWORD *)(v12 + 148) <= v16)
    {
      uint64_t result = sub_1B0D25510(*(void *)(result + 16), 20, v15, 0, a4, a6, a7, a8);
      int v16 = result;
      int v18 = *(unsigned __int16 *)(a3 + 12);
      if (!*(_WORD *)(a3 + 12))
      {
LABEL_9:
        unsigned int v19 = 0;
        uint64_t v20 = *(void *)v11;
        goto LABEL_10;
      }
    }
    else
    {
      *(_DWORD *)(v12 + 144) = v16 + 1;
      uint64_t v17 = *(void *)(v12 + 136) + 40 * v16;
      *(_DWORD *)uint64_t v17 = 20;
      *(_DWORD *)(v17 + 4) = v15;
      *(_DWORD *)(v17 + 8) = 0;
      *(_DWORD *)(v17 + 12) = a4;
      *(void *)(v17 + 24) = 0;
      *(void *)(v17 + 32) = 0;
      *(void *)(v17 + 16) = 0;
      int v18 = *(unsigned __int16 *)(a3 + 12);
      if (!*(_WORD *)(a3 + 12)) {
        goto LABEL_9;
      }
    }
  }
  if (*(unsigned char *)(a2 + 63)) {
    goto LABEL_9;
  }
  uint64_t v24 = *(_DWORD **)(a2 + 80);
  if (!v24 || *v24 < v18) {
    goto LABEL_9;
  }
  uint64_t v25 = *(unsigned __int8 **)&v24[6 * (v18 - 1) + 2];
  uint64_t v20 = *(void *)v11;
  if (v25)
  {
    uint64_t result = (uint64_t)sub_1B0CAE048(*(void *)v11, v25, 0, 0);
    unsigned int v19 = (unsigned __int8 *)result;
  }
  else
  {
    unsigned int v19 = 0;
  }
LABEL_10:
  if (!*(unsigned char *)(v20 + 103)) {
    uint64_t result = sub_1B0D2F9D0(v11, v19, a4);
  }
  if (v19) {
    uint64_t result = (uint64_t)sub_1B0D1DF88((void *)v20, v19);
  }
  int v22 = *(char *)(a3 + 9);
  uint64_t v21 = a3 + 9;
  if (v22 >= 66) {
    uint64_t result = sub_1B0CCB908((uint64_t *)v12, 96, a4, 1, 0, v21, 1, a8);
  }
  if (v16)
  {
    if (*(unsigned char *)(*(void *)v12 + 103)) {
      uint64_t v23 = &byte_1E9B52240;
    }
    else {
      uint64_t v23 = (char *)(*(void *)(v12 + 136) + 40 * v16);
    }
    *((_DWORD *)v23 + 2) = *(_DWORD *)(v12 + 144);
  }
  if (*(_DWORD *)(v11 + 48) > v13) {
    *(_DWORD *)(*(void *)v11 + 84) = -1;
  }
  return result;
}